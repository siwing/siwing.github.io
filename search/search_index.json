{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Python基础/2.1.python基本语法.html","text":"运行环境 Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) 交互模式 Python是一种解释型语言，Python解释器通过一次执行一条语句的方式运行程序。从 tty 读取命令时, 我们称解释器工作于交互模式 (interactive mode)。可以在cmd窗口通过 python 命令启动CPython解释器的交互模式，交互模式下CPython通过主提示符 (primary prompt) 提示下一条命令, 主提示符为 >>> ，而从提示符 ··· 提示一条命令的续行。 加强的交互式解释器(IPython)的提示符是一种编号的风格，如 In[2] ，而不是标准的 >>> 。 python保留字 保留字（又称为关键字）， 不能把它们用作任何标识符名称 。Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字： import keyword keyword . kwlist print ( keyword . kwlist ) ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释 Python中单行注释以 # 开头。多行注释则使用： ''' 或者 \"\"\" 。实际上python只有单行注释。多行注释的本质是字符串对象。 # 这是单行注释 ''' 这是多行注释 这是多行注释 ''' 代码块 python最具特色的就是使用缩进来表示代码块，不是使用大括号{}。而冒号表示一段缩进代码块的开始，其后所有相同层次的代码必须保持相同的缩进量，缩进量则可以随意，直至代码块结束。 一般约定俗成使用4个空格的缩进。 if True : print ( \"True\" ) else : print ( \"False\" ) True 代码续行 如果语句很长，可以使用反斜杠 \\ 来续行，例如： a = 3 + \\ 4 + \\ 5 a 12 在 [] , {} , 或 () 中的多行语句 1 ，不需要使用反斜杠 \\ ，例如： total = [ 'item_one' , 'item_two' , 'item_three' , 'item_four' , 'item_five' ] total ['item_one', 'item_two', 'item_three', 'item_four', 'item_five'] 同一行书写多条语句 Python可以在同一行中使用多条语句，语句之间使用半角分号 ; 分隔。但这样的做法一般不推荐，因为会使代码的可读性变差。 空行 函数、类方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行与代码缩进不同， 空行并不是Python语法的一部分。 书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。空行也是程序代码的一部分。 Print 输出 print函数默认输出是换行的，如果要实现不换行打印，需要更改print函数的 end 参数： # 换行输出 print ( \"a\" ) print ( \"b\" ) print ( '-' * 10 ) # 不换行输出 print ( \"a\" , end = \" \" ) print ( \"b\" , end = \" \" ) print () a b ---------- a b import 与 from...import 在 python 用 import 或者 from...import 来导入相应的模块。 将整个模块 ( module ) 导入： import somemodule 从某个模块中导入某个函数： from somemodule import somefunction 从某个模块中导入多个函数： from somemodule import firstfunc , secondfunc , thirdfunc 将某个模块中的全部函数导入： from somemodule import * 转义符 \\ 如果要在字符串中输入一些特殊的字符（这些字符特殊之处在于不能直接输出），这就需要“转义符”。所谓转义，就是不采用符号原先的含义，而采用另外一含义。在Pyhton中， \\ 代表转义符。 下面表格中列出常用的转义符： 转义字符 描述 \\ 在字符串行尾的续行符 \\\\ 反斜杠符号 \\' 单引号 \\\" 双引号 \\a 蜂鸣器响铃（不是喇叭发声），现在的计算机很多都不带蜂鸣器了，所以响铃不一定有效 \\b 退格（Backspace），将光标位置移到前一列 \\e 转义 \\000 空 \\n 换行符 \\v 纵向制表符 \\t 横向制表符，即 Tab 键，一般相当于四个空格 \\r 回车符 \\f 换页 \\oyy 八进制数，yy代表字符，例如： \\o12 代表换行 \\xyy 十六进制数，yy代表字符，例如： \\x0a 代表换行 \\other 其它的字符以普通格式输出 有时候，字符串包含了很多 \\ ，Python默认将'\\'作为转义符处理，但实际上我们想输出的是反斜杠符号 \\ ，（例如输入文件路径）。此时，自然可以在反斜杠前加上转义符 \\ ，但是这样未免太麻烦。Python提供了一个简化的操作，Pyhon允许用 r'字符串内容' 表示 '字符串内容' 内部的字符串默认不转义： print ( ' \\\\\\t\\\\ ' ) print ( '-' * 10 ) print ( r ' \\\\ \\t \\\\ ' ) \\ \\ ---------- \\\\\\t\\\\ name与object 提到编程语言，常常会提起变量这个概念，但在Python中，变量一词更准确的说法应该是name（名字）。有观点认为Python不存在变量这个概念，也有观点认为Python存在变量的概念（即name），只不过Python的变量的行为和其他编程语言有所区别。但在这里不深入探究，在本系列的文章中， 变量 和 名字（name） 具有等同的内涵； 变量值（变量的值） 和 对象（object） 具有等同的内涵。 Python是动态类型的语言，变量不需要声明、定义和初始化，变量会在赋值时被创建。 Objects 所有Python对象都有: 一个惟一的 identity （由id(x)返回的一个整数，注意：identity 不是 identifier） 一个类型（由type(x)返回） 一些值 无法改变对象的identity，也不能改变对象的类型。 改变位于某一地址的对象的引用与类型是不可能的，只能把对象销毁，然后重新创建。 Note 在CPython2.2及更新的版本中，你可以在相当有限的情况下更改对象的类型。 一些对象允许你改变它们的值（在不改变它们的identity和type的情况下），这种对象被称为 mutable object ；而一些对象并不允许你改变它们的值，它们被称为 immutable object 。 类型由 类对象 表示（类对象往往知道类的对象要占多少内存，有什么方法等等）。 一个对象可以有： 零个或多个方法（由类对象提供） 零个或多个 名字 某些对象具有允许你更改对象内容（即对其进行修改）的方法。某些对象仅具有允许您访问内容而不更改内容的方法。一些对象没有任何方法。即使对象具有方法，你也不能改变它们的类型或者identity。 Names name不是object的属性，object并不知道它们的name（名字）。 所有name在创建时必须关联（bind）到一个object，否则在需要引用该name时会报错。 name可以在创建以后指向任何一个object（包括不同类型），所以name本身没有类别，但name关联的object是有类别的。 在python中可以使用type（name）来查看name关联的object的类型。 一个对象可以关联（bind）多个名字，也可以没有名字。 Name存在于namespace（命名空间），例如模块命名空间、实例命名空间、函数的局部命名空间等等。 assignment Python也有assignment这个英文概念，它的中文或许译为 分配 或者 命名 更为恰当，因为在Python中，assignment语句会改动namespace，而不是改动了object。 换而言之，如果在python中有一个assignment statement如下： a = 10 这个assignment语句表示将名称a添加到namespace，并且namespace的a键 2 所对应的value为10。 如果名称已经存在，assignment语句将替换原始名称： a = 10 a = 20 这意味着首先要将名称a添加到namespace，并使其指向包含值10的整数对象。然后再使a其指向包含值20的整数对象。原来的整数对象10不受此操作的影响。 如果这样做： a = [] a . append （ 1 ） 第一条语句将 a 关联到一个空列表对象，这会修改命名空间，第二条语句修改了该列表的内容，这并不会触及namespace。 综上所述，assignment statement在python中有两个作用： 用于（重新）将名称绑定到对象 修改可变对象的属性（内容） 单引号与双引号 在Python中单引号和双引号都可以用来表示一个字符串，比如： str1 = 'python' str2 = \"python\" str1和str2是没有任何区别的。 Python以其易用性而著名，但单引号和双引号却不仅仅是为了方便。想想I'm a big fans of Python.这个字符串应该怎么定义？可以这样写： str3 = 'I \\' m a big fan of Python.' 那么We all know that 'A' and 'B' are two capital letters.又该怎么定义呢？ str4 = 'We all know that \\' A \\' and \\' B \\' are two capital letters.' 显然太多的转义符看起来并不好看，而且容易出错了。那么，在Python中，还可以这样写： str4 = \"We all know that 'A' and 'B' are two capital letters.\" 这样就人性化多了，这就是Python支持双引号和单引号都能用来定义字符串的原因。反之，如果字符串中有双引号，为了避免使用转义符，你可以使用单引号来定义这个字符串。比如： str5 = 'The teacher said: \"Practice makes perfect\" is a very famous proverb.' 这就是Python易用性和人性化的一个极致体现，当你用单引号' '定义字符串的时候，它就会认为你字符串里面的双引号\" \"是普通字符，从而不需要转义。反之当你用双引号定义字符串的时候，就会认为你字符串里面的单引号是普通字符无需转义。 进制数表示 0b 开头表示二进制数： 0b10 2 0o 开头表示八进制数： 0o10 8 0x 开头表示十六进制数： 0x10 16 Lambdas 正常创建函数（使用 def ）会自动将其赋值给变量，这与创建其他对象（例如字符串和整数）不同，后者可以动态创建，而无需将它们分配给变量。但只要使用lambda语法创建函数，函数也可以这样做，以这种方式创建的函数称为匿名（anonymous）函数。将简单函数作为参数传递给另一个函数时，最常使用此方法。语法如下： # my_func是正常创建的函数（named function） def my_func ( f , arg ): return f ( arg ) my_func ( lambda x : 2 * x * x , 5 ) 50 在上面的代码中，我们动态创建了一个匿名函数，并使用参数调用它。Lambda函数没有命名函数（named function）那么强大。Lambda函数只能包含一个表达式，通常相当于一行代码。实际上，Lambda函数可以分配给变量，并像普通函数一样使用。但是，很少有充分的理由这样做。通常使用 def 来定义函数通常更好。 double = lambda x : x * 2 print ( double ( 7 )) 14 运算符 算术运算符 运算符 描述 + 加 - 减 * 乘 / 除 % 取模 ** 幂 // 取整除 比较运算符 运算符 描述 == 等于 != 不等于 > 大于 < 小于 >= 大于等于 <= 小于等于 赋值运算符 运算符 描述 = 简单的赋值运算符 += 加法赋值运算符 -= 减法赋值运算符 *= 乘法赋值运算符 /= 除法赋值运算符 %= 取模赋值运算符 **= 幂赋值运算符 //= 取整除赋值运算符 按位运算符 运算符 描述 << 左移运算符：运算数的各二进位全部左移若干位，由 << 右边的数指定移动的位数，高位丢弃，低位补0 >> 右移运算符：把 > 左边的运算数的各二进位全部右移若干位， >> 右边的数指定移动的位数 & 与运算符：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0 | 或运算符：只要对应的二个二进位有一个为1时，结果位就为1 ^ 异或运算符：当两对应的二进位相异时，结果为1 ~ 取反运算符：对数据的每个二进制位取反，即把1变为0，把0变为1。 ~x 类似于 -x-1 左移和右移的意思就是把位数整体向左或者向右移动若干位。比如1111向右移一位就变成了0111，原来没有的位自动填0，超出范围的位舍弃掉。看几个例子： print ( 0b1111 >> 1 ) print (( 0b1111 >> 1 ) is 0b111 is 7 ) 7 True print ( 0b1010 << 2 ) print (( 0b1010 << 2 ) is 0b101000 is 40 ) 40 True 如果使用十进制（或者其他进制数），也是对其二进制形式进行移位： print ( 0b1111 is 15 ) print (( 15 >> 1 ) is 7 is 0b111 ) True True 其他按位运算符的例子： print (( 0b1111 & 0b1010 ) is 0b1010 is 10 ) print (( 0b1111 | 0b1010 ) is 0b1111 is 15 ) print (( 0b1111 ^ 0b1010 ) is 0b0101 is 5 ) print (( ~ 0b1010 ) is ( - 0b1010 - 1 ) is - 11 ) True True True True 如果使用十进制（或者其他进制数），也是对其二进制形式进行移位： print (( 15 & 10 ) is 0b1010 is 10 ) print (( 15 | 10 ) is 0b1111 is 15 ) print (( 15 ^ 10 ) is 0b0101 is 5 ) print (( ~ 10 ) is ( - 10 - 1 ) is - 0b1011 ) True True True True 逻辑运算符 运算符 逻辑表达式 描述 and x and y x、y同时为真，则结果为真，否则为假 or x or y x、y两者有一个为真，则结果为真，否则为假 not not x x为真，结果为假；x为假，结果为真 成员运算符 运算符 描述 in 如果在指定的序列中找到值返回 True，否则返回 False not in 如果在指定的序列中没有找到值返回 True，否则返回 False 身份运算符 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b) 。如果引用的不是同一个对象则返回结果 True，否则返回 False 运算符优先级 运算符 描述 优先级 {key:value, ...} 字典显示 16 [...] 列表显示 16 (...) 将表达式用括号括起或元组显示 16 x[index]、x[index1:index2]、f(args...)、x.attribute 元素访问、切片、函数调用、属性引用 15 ** 幂运算 14 ~ 按位求补 13 *、/、//、%、@ 乘、除、取整、取模 12 +、- 加、减 11 <<、>> 左移位、右移位 10 & 按位与 9 ^ 按位异或 8 | 按位或 7 <、<=、>、>=、==、!= 比较运算符 6 is、is not 身份运算符 6 in、not in 成员运算符 6 not 逻辑运算符 5 and 逻辑运算符 4 or 逻辑运算符 3 if - else 条件表达式 2 lambda Lambda 表达式 1 具有相同优先级的运算符将从左至右的方式依次进行。用小括号 () 可以改变运算顺序。 包括函数、类的定义。 ↩ 目前Python的命名空间使用字典实现，但日后可能会改变。 ↩","text_tokens":["动态","除法","右","n","nonlocal","类","一列","相同","全部","three","强大","10","用作","位于","\\","不会","代码","变差","突出","区别","被","attribute","v.1915","即","prompt","r","实现","下面","0x10","----------","计算","它们","很多","声明","斜杠","主","冒号","cmd","范围","制表","可读","表达式","而","amd64","判断","比较","相当","0","处理","填","不仅仅","from","数","8","语句","e","变量","50","20","以","无法","：","中","入口","右移","更好","letters","第二","所述","关键字","只要","加法","以后","右边","续行","动态创建","达式","符号","5","该","访问","太多","行","这是","作用","库","[","四个","very","多行","that","两个","看起来","fan","assert","这会","直至","16","后者","量","若干","somefunction","0x","不仅","如果","列出","for","任何","深入","调用","运行","定义","↩","3","括号","多少","pyhton","通过","namespace","有效","对应","msc","那么","和","pass","行中","assignment","等于","符","值","提供","开头","&","留字","未免","程序","存在","及","由类","二进位","制表符","正常","反","import","充分","著名","首先","处","部分","包括","个","半角","整数","0b1111","原先","cpython","做","中有","看","空格","变为","said","·","tab","加上","内存","常","teacher","左移","切片","概念","双引号","不带","新","改动","实际上","十六进制","实例","找到","左","就是","保持","index1","一位","作为","可读性","b","not","module","想想",".","八进制","十六","else","global","id","*","这些","综上所述","舍弃","好看","时","便于","时候","文章","capital","自","销毁","假","更","光标","内涵","算术","左边","13","参与","yy","默认","named","修改","单引号","取整","break","易用性","人性化","触及","在于","单行","four","横向","此","two","时会","换","第一","仅仅","windows","我们","一段","需要","用","大括号","secondfunc","makes","两者","优先","，","赋值","优先级","交互","更新","know","然后","为","执行","打印","综上","用于","一般","提示符","推荐","index2","as","等等","现在","按位","该位","实际","编程语言","\"","引用","关联","print","-","位数","有所区别","认为","可变","已经","40","逻辑","所","当于","所有","一定","整除","+","空间","操作","关键","上面","显示",";","维护","变成","mode","一样","多条","tty","如","函数调用","转义字符","想","成员","有","写","零个","极致","无需","做法","...","12","缩","15","版本","字符","statement","64","str5","相当于","路径","运算","命令","回车符","但是","are","yield","加","参数","内容","my","型","取","函数","keyword","窗口","避免","proverb","返回","说法","注释","a","其后","具有","约定","ipython","并","0o","elif","大于","thirdfunc","分配","仅","乘法","除","算符","但","x","数传","某些","元素","在","意味","初始","args","def","immutable","相应","更改","有所","二条","起来","目前","括起","}","primary","特色","喇叭","应该","进行","一条","容易","oyy","这样","解释器","lambda","、","属性","str3","又","条件","提起","丢弃","不同","分","取反","取模","0b1010","若干位","移到","提到","二进制位","function","语言","原始","观点"," ","提示","位置","except","乘","表示","一个","你","求补","4","至","000","%","出错","的","类型","用来","模块","每个","方式","常常","多","报错","分隔","为了","很少","bind","0b101000","cpython2.2","other","原因","保留","程序代码","只能","原来","移动","9","会","由","采用","_","惟一","当","if","地址","with","其它","lambdas","本质","怎么","行为","称为","重构","了","2","例如","影响","很长","没有","finally","somemodule","6","几个","到","'",")","是","使用","并不知道","false","while","来","不知","结束","del","{","第二条","却","小于","firstfunc","字符串","最","未免太",":","传递","引号","含义","比如","arg","一部","指定","名称","当前","算机","一些","也","普通","幂","译","模式","因为","其他","一种","v","书写","object","还","顺序","换页","本身","显然","or","7","从","呢","简单","fans","超出","变量值","什么","1111","编号","响铃","换行符","回车","绑定","小括号","可以","命名","interactive","we",",","描述","即使","减","await","二个","能","块","不是","导入","一","格式","@","type","重新","表格","真","(","读取","而言","里面","相异","功能","反之","将","famous","标识符","the","匿名","如下","麻烦","0o10","同一","一行","易用","蜂鸣器","一词",">","进来","backspace","f","体现","恰当","~","并且","整体","这里","或","str4","保留字","支持","类似","补","元组","指向","您","and","转义","mutable","str1","第一条","像","另","移位","0b10","则","five","换行","量值","理由","y","key","这种","identity","有限","名字","（","探究","直接","objects","而且","号","意味着","下","或许","多个","func","python","这","all","退格","name","0b111","标识","往往","方法","向","不过","true","系列","两段","是不是","约定俗成","风格","例子","整个","知道","缩进","数据","one","与","所以","只不过","发声","特殊","try","都","要","同时","in","m","超出范围","文件","前","”","编程","之间","于","加强","纵向","str2","身份","对象","查看","工作","列表","有时候","参数传递","o12","async","掉","英文","添加","names","0b","anonymous","两","输入","减法","某个","代表","环境","is","给","“","形式","续行符","位","同一个","准确","再","十进制","/","另外","double","可能","continue","）","；","一次","语法","value","i","表达","结果","解释","类别","kwlist","class","t","此时","？","有时","字典","0b0101","pyhon","各","看起","使","其","随意","创建","替换","14","人性","局部","输出","一部分","插入","不能","x0a","标准","否则","bit","total","不","]","<","xyy","之","释器","进制","它","内部","某一","空行","通常","常用","空","perfect","异或","0111","所谓","把","高位","键","note","方便","end","初始化","简化","practice","最具","等同","更为","|","item","11","index","=","必须","3.7","包含","情况","就","层次","对","raise","或者","。","占","序列","进位","append","自动","^","二进制","中文","允许","依次","行尾","改变","注意","1","这个","日后","只有","意思","自然","以其","运算符","启动","#","big","本","of","none","低位","计算机","交互式","不受","称","identifier","开始","从而","return","!","0b1011"],"title":"2.1.python基本语法","title_tokens":["基本",".","2.1","python","语法"]},{"location":"Python基础/2.1.python基本语法.html#_1","text":"Python是一种解释型语言，Python解释器通过一次执行一条语句的方式运行程序。从 tty 读取命令时, 我们称解释器工作于交互模式 (interactive mode)。可以在cmd窗口通过 python 命令启动CPython解释器的交互模式，交互模式下CPython通过主提示符 (primary prompt) 提示下一条命令, 主提示符为 >>> ，而从提示符 ··· 提示一条命令的续行。 加强的交互式解释器(IPython)的提示符是一种编号的风格，如 In[2] ，而不是标准的 >>> 。","text_tokens":["在","时","编号","cpython","语句","可以","interactive","的","运行","是","命令",",","。",")","方式","·","2","通过","in","不是","primary","标准","型","(","一条","读取","prompt","]","窗口","解释器","续行","释器","下","于","加强","我们","[","一次","程序","mode","python","工作","启动","，","主","cmd","tty","如","交互","ipython",">","为","语言","执行","提示符","模式","而","解释"," ","称","一种","交互式","提示","从","风格"],"title":"交互模式","title_tokens":["模式","交互"]},{"location":"Python基础/2.1.python基本语法.html#python","text":"保留字（又称为关键字）， 不能把它们用作任何标识符名称 。Python的标准库提供了一个keyword模块，可以输出当前版本的所有关键字： import keyword keyword . kwlist print ( keyword . kwlist ) ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']","text_tokens":["一个","nonlocal","的","模块","try","用作","in","保留","break","它们","if","with","，","称为","了","async","as","finally","from","is","print","'",")","false","：","while","关键字","所有","del","continue","）","关键","库","[","名称","当前","assert","kwlist","class","or","版本","可以","for","任何",",","输出","await","yield","不能","标准","(","keyword","]","pass","提供","留字","标识符","把","elif","import","保留字","raise","and","def","。","（","lambda","又","python","标识","not","none","."," ","else","global","true","return","except"],"title":"python保留字","title_tokens":["留字","保留字","python","保留"]},{"location":"Python基础/2.1.python基本语法.html#_2","text":"Python中单行注释以 # 开头。多行注释则使用： ''' 或者 \"\"\" 。实际上python只有单行注释。多行注释的本质是字符串对象。 # 这是单行注释 ''' 这是多行注释 这是多行注释 '''","text_tokens":["实际","\"","字符","'","或者","的","则","是","。","使用","以","：","中","单行","实际上","字符串","开头","这是","只有","注释","对象","python","#","多行","本质"," "],"title":"注释","title_tokens":["注释"]},{"location":"Python基础/2.1.python基本语法.html#_3","text":"python最具特色的就是使用缩进来表示代码块，不是使用大括号{}。而冒号表示一段缩进代码块的开始，其后所有相同层次的代码必须保持相同的缩进量，缩进量则可以随意，直至代码块结束。 一般约定俗成使用4个空格的缩进。 if True : print ( \"True\" ) else : print ( \"False\" ) True","text_tokens":["缩","\"","层次","4","print","缩进","可以","随意","的","空格","相同","则",")","。","括号","使用","false","块","不是","}","特色","代码","所有","(","结束","{","个",":","if","一段","就是","保持","大括号","python","冒号","，","其后","约定","进来","而","直至"," ","一般","量","else","最具","开始","true","必须","约定俗成","表示"],"title":"代码块","title_tokens":["代码","块"]},{"location":"Python基础/2.1.python基本语法.html#_4","text":"如果语句很长，可以使用反斜杠 \\ 来续行，例如： a = 3 + \\ 4 + \\ 5 a 12 在 [] , {} , 或 () 中的多行语句 1 ，不需要使用反斜杠 \\ ，例如： total = [ 'item_one' , 'item_two' , 'item_three' , 'item_four' , 'item_five' ] total ['item_one', 'item_two', 'item_three', 'item_four', 'item_five']","text_tokens":["12","或","在","如果","4","语句","可以","one","的","'",")","3",",","five","使用","three","：","中","\\","来","}","(","{","不","total","]","+","续行","5","four","1","_","two","[","需要","斜杠","a","多行","，"," ","例如","反","很长","item","="],"title":"代码续行","title_tokens":["代码","续行"]},{"location":"Python基础/2.1.python基本语法.html#_5","text":"Python可以在同一行中使用多条语句，语句之间使用半角分号 ; 分隔。但这样的做法一般不推荐，因为会使代码的可读性变差。","text_tokens":["在","使","语句","可以","的","。","使用","分隔","代码","变差","不","这样","行中","号","会","之间",";","python","可读性","分","同一","，","多条","可读","因为"," ","一般","推荐","但","做法","半角"],"title":"同一行书写多条语句","title_tokens":["行","语句","书写","同一","多条"]},{"location":"Python基础/2.1.python基本语法.html#_6","text":"函数、类方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行与代码缩进不同， 空行并不是Python语法的一部分。 书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。空行也是程序代码的一部分。","text_tokens":["或","时","便于","缩进","类","出错","的","运行","与","是","。","但是","以","一部分","分隔","入口","不是","不会","代码","突出","插入","函数","和","不","程序代码","新","、","解释器","在于","功能","释器","之间","作用","日后","一段","用","不同","维护","程序","空行","python","语法","，","一行","含义","一部","重构","并","也","方法"," ","解释","书写","开始","部分","两段","表示"],"title":"空行","title_tokens":["空行"]},{"location":"Python基础/2.1.python基本语法.html#print","text":"print函数默认输出是换行的，如果要实现不换行打印，需要更改print函数的 end 参数： # 换行输出 print ( \"a\" ) print ( \"b\" ) print ( '-' * 10 ) # 不换行输出 print ( \"a\" , end = \" \" ) print ( \"b\" , end = \" \" ) print () a b ---------- a b","text_tokens":["\"","如果","print","的","'","-","换行","是",")",",","输出","更改","10","要","：","默认","参数","函数","(","不","实现","----------","需要","a","#","，","b","打印"," ","end","*","="],"title":"Print 输出","title_tokens":[" ","输出","print"]},{"location":"Python基础/2.1.python基本语法.html#import-fromimport","text":"在 python 用 import 或者 from...import 来导入相应的模块。 将整个模块 ( module ) 导入： import somemodule 从某个模块中导入某个函数： from somemodule import somefunction 从某个模块中导入多个函数： from somemodule import firstfunc , secondfunc , thirdfunc 将某个模块中的全部函数导入： from somemodule import *","text_tokens":["某个","在","somemodule","整个","from","或者","的","模块",")",",","全部","。","相应","：","中","导入","来","(","函数","firstfunc","将","用","多个","secondfunc","python","module","thirdfunc"," ","import","*","somefunction","从","..."],"title":"import 与 from...import","title_tokens":["from"," ","import","与","..."]},{"location":"Python基础/2.1.python基本语法.html#_7","text":"如果要在字符串中输入一些特殊的字符（这些字符特殊之处在于不能直接输出），这就需要“转义符”。所谓转义，就是不采用符号原先的含义，而采用另外一含义。在Pyhton中， \\ 代表转义符。 下面表格中列出常用的转义符： 转义字符 描述 \\ 在字符串行尾的续行符 \\\\ 反斜杠符号 \\' 单引号 \\\" 双引号 \\a 蜂鸣器响铃（不是喇叭发声），现在的计算机很多都不带蜂鸣器了，所以响铃不一定有效 \\b 退格（Backspace），将光标位置移到前一列 \\e 转义 \\000 空 \\n 换行符 \\v 纵向制表符 \\t 横向制表符，即 Tab 键，一般相当于四个空格 \\r 回车符 \\f 换页 \\oyy 八进制数，yy代表字符，例如： \\o12 代表换行 \\xyy 十六进制数，yy代表字符，例如： \\x0a 代表换行 \\other 其它的字符以普通格式输出 有时候，字符串包含了很多 \\ ，Python默认将'\\'作为转义符处理，但实际上我们想输出的是反斜杠符号 \\ ，（例如输入文件路径）。此时，自然可以在反斜杠前加上转义符 \\ ，但是这样未免太麻烦。Python提供了一个简化的操作，Pyhon允许用 r'字符串内容' 表示 '字符串内容' 内部的字符串默认不转义： print ( ' \\\\\\t\\\\ ' ) print ( '-' * 10 ) print ( r ' \\\\ \\t \\\\ ' ) \\ \\ ---------- \\\\\\t\\\\","text_tokens":["一个","n","时候","000","一列","的","所以","发声","特殊","光标","都","10","要","\\","yy","默认","文件","前","other","”","单引号","即","r","下面","在于","----------","计算","采用","横向","纵向","很多","我们","需要","用","斜杠","其它","，","制表","有时候","了","o12","而","相当","一般","例如","处理","现在","输入","代表","实际","\"","数","print","e","'","“","-","是",")","以","：","中","续行符","当于","另外","一定","续行","）","字符串","符号","操作","未免太","四个","引号","含义","转义字符","想","算机","一些","普通","v","换页","t","此时","有时","如果","pyhon","响铃","字符","换行符","列出","回车","可以","相当于","路径","描述","回车符","输出","pyhton","但是","一","不是","格式","表格","有效","不能","x0a","内容","(","不","xyy","之","符","提供","将","进制","内部","未免","麻烦","a","常用","空","所谓","制表符","蜂鸣器","键","backspace","f","反","简化","处","但","在","包含","就","原先","转义","空格","换行","。","tab","加上","喇叭","（","双引号","不带","允许","直接","oyy","这样","行尾","实际上","十六进制","就是","自然","作为","python","这","退格","b","移到","计算机","八进制","十六"," ","*","这些","位置","表示"],"title":"转义符\\","title_tokens":["符","转义","\\"]},{"location":"Python基础/2.1.python基本语法.html#nameobject","text":"提到编程语言，常常会提起变量这个概念，但在Python中，变量一词更准确的说法应该是name（名字）。有观点认为Python不存在变量这个概念，也有观点认为Python存在变量的概念（即name），只不过Python的变量的行为和其他编程语言有所区别。但在这里不深入探究，在本系列的文章中， 变量 和 名字（name） 具有等同的内涵； 变量值（变量的值） 和 对象（object） 具有等同的内涵。 Python是动态类型的语言，变量不需要声明、定义和初始化，变量会在赋值时被创建。","text_tokens":["动态","在","编程语言","时","文章","变量值","初始","深入","变量","的","这里","类型","定义","是","更","认为","。","只不过","有所区别","常常","有所","内涵","量值","中","概念","准确","名字","（","区别","应该","探究","即","不","和","被","、","编程","会","）","值","；","提起","这个","声明","需要","说法","存在","对象","python","具有","，","行为","本","赋值","name","创建","提到","一词","也","语言","有","观点"," ","其他","object","初始化","不过","等同","系列","但"],"title":"name与object","title_tokens":["与","name","object"]},{"location":"Python基础/2.1.python基本语法.html#objects","text":"所有Python对象都有: 一个惟一的 identity （由id(x)返回的一个整数，注意：identity 不是 identifier） 一个类型（由type(x)返回） 一些值 无法改变对象的identity，也不能改变对象的类型。 改变位于某一地址的对象的引用与类型是不可能的，只能把对象销毁，然后重新创建。 Note 在CPython2.2及更新的版本中，你可以在相当有限的情况下更改对象的类型。 一些对象允许你改变它们的值（在不改变它们的identity和type的情况下），这种对象被称为 mutable object ；而一些对象并不允许你改变它们的值，它们被称为 immutable object 。 类型由 类对象 表示（类对象往往知道类的对象要占多少内存，有什么方法等等）。 一个对象可以有： 零个或多个方法（由类对象提供） 零个或多个 名字 某些对象具有允许你更改对象内容（即对其进行修改）的方法。某些对象仅具有允许您访问内容而不更改内容的方法。一些对象没有任何方法。即使对象具有方法，你也不能改变它们的类型或者identity。","text_tokens":["一个","你","知道","销毁","类","类型","的","与","都","要","位于","cpython2.2","修改","被","即","只能","由","惟一","它们","地址","对象","，","更新","称为","然后","而","相当","没有","等等","引用",")","是","无法","：","中","所有","可能","）","访问","；",":","一些","也","有","零个","object","什么","版本","可以","其","任何","创建","多少","即使","不是","type","重新","不能","内容","(","和","不","值","提供","返回","某一","由类","及","具有","把","并","note","仅","x","整数","某些","或","在","情况","对","您","mutable","或者","immutable","。","占","更改","内存","这种","identity","有限","名字","（","进行","允许","改变","注意","下","多个","python","往往","方法"," ","identifier","id","表示"],"title":"Objects","title_tokens":["objects"]},{"location":"Python基础/2.1.python基本语法.html#names","text":"name不是object的属性，object并不知道它们的name（名字）。 所有name在创建时必须关联（bind）到一个object，否则在需要引用该name时会报错。 name可以在创建以后指向任何一个object（包括不同类型），所以name本身没有类别，但name关联的object是有类别的。 在python中可以使用type（name）来查看name关联的object的类型。 一个对象可以关联（bind）多个名字，也可以没有名字。 Name存在于namespace（命名空间），例如模块命名空间、实例命名空间、函数的局部命名空间等等。","text_tokens":["在","一个","时","引用","关联","到","指向","知道","可以","任何","类型","的","创建","命名","模块","所以","是","局部","。","使用","并不知道","报错","中","namespace","不是","type","bind","不知","名字","来","所有","否则","（","函数","以后","空间","、","属性","等等","）","该","但","时会","实例","它们","于","需要","不同","对象","查看","多个","python","存在","，","name","也","有"," ","类别","例如","object","没有","本身","必须","包括"],"title":"Names","title_tokens":["names"]},{"location":"Python基础/2.1.python基本语法.html#assignment","text":"Python也有assignment这个英文概念，它的中文或许译为 分配 或者 命名 更为恰当，因为在Python中，assignment语句会改动namespace，而不是改动了object。 换而言之，如果在python中有一个assignment statement如下： a = 10 这个assignment语句表示将名称a添加到namespace，并且namespace的a键 2 所对应的value为10。 如果名称已经存在，assignment语句将替换原始名称： a = 10 a = 20 这意味着首先要将名称a添加到namespace，并使其指向包含值10的整数对象。然后再使a其指向包含值20的整数对象。原来的整数对象10不受此操作的影响。 如果这样做： a = [] a . append （ 1 ） 第一条语句将 a 关联到一个空列表对象，这会修改命名空间，第二条语句修改了该列表的内容，这并不会触及namespace。 综上所述，assignment statement在python中有两个作用： 用于（重新）将名称绑定到对象 修改可变对象的属性（内容）","text_tokens":["一个","的","10","要","不会","修改","原来","触及","会","此","换","第一","对象","，","列表","了","然后","为","而","2","综上","用于","影响","英文","添加","关联","到","语句","20","可变","已经","：","中","第二","所述","再","所","第二条","空间","）","操作","该","作用","[","value","两个","名称","也","这会","有","译","因为","object","如果","使","绑定","statement","其","命名","替换","namespace","不是","重新","对应","内容","而言","]","assignment","之","值","将","它","如下","存在","a","空","并","键","分配","恰当","并且","更为","首先","=","整数","在","意味","包含","指向","做","中有","第一条","或者","。","二条","append","概念","（","中文","一条","这样","属性","改动","意味着","1","或许","这个","python","这",".","原始","不受"," ","综上所述","表示"],"title":"assignment","title_tokens":["assignment"]},{"location":"Python基础/2.1.python基本语法.html#_8","text":"在Python中单引号和双引号都可以用来表示一个字符串，比如： str1 = 'python' str2 = \"python\" str1和str2是没有任何区别的。 Python以其易用性而著名，但单引号和双引号却不仅仅是为了方便。想想I'm a big fans of Python.这个字符串应该怎么定义？可以这样写： str3 = 'I \\' m a big fan of Python.' 那么We all know that 'A' and 'B' are two capital letters.又该怎么定义呢？ str4 = 'We all know that \\' A \\' and \\' B \\' are two capital letters.' 显然太多的转义符看起来并不好看，而且容易出错了。那么，在Python中，还可以这样写： str4 = \"We all know that 'A' and 'B' are two capital letters.\" 这样就人性化多了，这就是Python支持双引号和单引号都能用来定义字符串的原因。反之，如果字符串中有双引号，为了避免使用转义符，你可以使用单引号来定义这个字符串。比如： str5 = 'The teacher said: \"Practice makes perfect\" is a very famous proverb.' 这就是Python易用性和人性化的一个极致体现，当你用单引号' '定义字符串的时候，它就会认为你字符串里面的双引号\" \"是普通字符，从而不需要转义。反之当你用双引号定义字符串的时候，就会认为你字符串里面的单引号是普通字符无需转义。","text_tokens":["好看","一个","时候","capital","你","出错","的","用来","都","多","为了","m","\\","区别","原因","单引号","易用性","人性化","会","two","当","仅仅","str2","用","makes","需要","，","怎么","know","了","而","没有","\"","不仅仅","is","'","是","认为","使用","：","中","letters","来","却","字符串","该","太多",":","very","引号","比如","that","看起来","i","fan","普通","写","还","极致","无需","显然","？","呢","不仅","fans","如果","字符","看起","可以","任何","str5","we","定义","人性","are","能","那么","和","不","里面","避免","符","反之","famous","proverb","the","它","a","perfect","易用","并","方便","体现","practice","著名","=","但","在","str4","支持","就","str1","and","转义","中有","。","起来","said","teacher","双引号","应该","容易","而且","这样","str3","又","这个","就是","以其","python","big","这","all","of","b","想想","."," ","从而","表示"],"title":"单引号与双引号","title_tokens":["引号","双引号","与","单引号"]},{"location":"Python基础/2.1.python基本语法.html#_9","text":"0b 开头表示二进制数： 0b10 2 0o 开头表示八进制数： 0o10 8 0x 开头表示十六进制数： 0x10 16","text_tokens":["数","8","0b10","：","二进制","0x10","十六进制","开头","进制","0o10","2","0o","八进制","十六"," ","16","0b","0x","表示"],"title":"进制数表示","title_tokens":["进制","数","表示"]},{"location":"Python基础/2.1.python基本语法.html#lambdas","text":"正常创建函数（使用 def ）会自动将其赋值给变量，这与创建其他对象（例如字符串和整数）不同，后者可以动态创建，而无需将它们分配给变量。但只要使用lambda语法创建函数，函数也可以这样做，以这种方式创建的函数称为匿名（anonymous）函数。将简单函数作为参数传递给另一个函数时，最常使用此方法。语法如下： # my_func是正常创建的函数（named function） def my_func ( f , arg ): return f ( arg ) my_func ( lambda x : 2 * x * x , 5 ) 50 在上面的代码中，我们动态创建了一个匿名函数，并使用参数调用它。Lambda函数没有命名函数（named function）那么强大。Lambda函数只能包含一个表达式，通常相当于一行代码。实际上，Lambda函数可以分配给变量，并像普通函数一样使用。但是，很少有充分的理由这样做。通常使用 def 来定义函数通常更好。 double = lambda x : x * 2 print ( double ( 7 )) 14","text_tokens":["动态","一个","时","的","与","方式","强大","很少","代码","named","只能","会","此","_","它们","我们","对象","，","赋值","称为","了","参数传递","表达式","2","而","相当","例如","anonymous","没有","实际","print","给","变量","50","是",")","使用","以","：","中","更好","来","当于","double","只要","达式","动态创建","）","字符串","最","5","上面",":","传递","语法","一样","arg","表达","也","普通","有","其他","后者","无需","7","简单","字符","可以","其","命名","调用","创建","相当于","定义","14",",","但是","参数","my","函数","(","和","那么","将","它","匿名","如下","通常","一行","并","正常","f","分配","充分","=","但","数传","整数","x","在","包含","做","像","另","def","理由","。","常","这种","自动","（","这样","lambda","实际上","不同","作为","func","#","这","function","方法"," ","*","return"],"title":"Lambdas","title_tokens":["lambdas"]},{"location":"Python基础/2.1.python基本语法.html#_10","text":"","text_tokens":[],"title":"运算符","title_tokens":["运算符","运算","算符"]},{"location":"Python基础/2.1.python基本语法.html#_11","text":"运算符 描述 + 加 - 减 * 乘 / 除 % 取模 ** 幂 // 取整除","text_tokens":["幂","乘","*","加"," ","整除","/","%","取","运算符","除","运算","算符","-","描述","+","取模","减"],"title":"算术运算符","title_tokens":["算符","运算符","运算","算术"]},{"location":"Python基础/2.1.python基本语法.html#_12","text":"运算符 描述 == 等于 != 不等于 > 大于 < 小于 >= 大于等于 <= 小于等于","text_tokens":["等于",">","大于"," ","运算符","运算","算符","不","描述","小于","=","!","<"],"title":"比较运算符","title_tokens":["比较","运算符","运算","算符"]},{"location":"Python基础/2.1.python基本语法.html#_13","text":"运算符 描述 = 简单的赋值运算符 += 加法赋值运算符 -= 减法赋值运算符 *= 乘法赋值运算符 /= 除法赋值运算符 %= 取模赋值运算符 **= 幂赋值运算符 //= 取整除赋值运算符","text_tokens":["除法","%","的","运算","-","描述","/","取","加法","整除","+","运算符","赋值","取模","幂"," ","乘法","算符","*","=","减法","简单"],"title":"赋值运算符","title_tokens":["运算符","赋值","运算","算符"]},{"location":"Python基础/2.1.python基本语法.html#_14","text":"运算符 描述 << 左移运算符：运算数的各二进位全部左移若干位，由 << 右边的数指定移动的位数，高位丢弃，低位补0 >> 右移运算符：把 > 左边的运算数的各二进位全部右移若干位， >> 右边的数指定移动的位数 & 与运算符：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0 | 或运算符：只要对应的二个二进位有一个为1时，结果位就为1 ^ 异或运算符：当两对应的二进位相异时，结果为1 ~ 取反运算符：对数据的每个二进制位取反，即把1变为0，把0变为1。 ~x 类似于 -x-1 左移和右移的意思就是把位数整体向左或者向右移动若干位。比如1111向右移一位就变成了0111，原来没有的位自动填0，超出范围的位舍弃掉。看几个例子： print ( 0b1111 >> 1 ) print (( 0b1111 >> 1 ) is 0b111 is 7 ) 7 True print ( 0b1010 << 2 ) print (( 0b1010 << 2 ) is 0b101000 is 40 ) 40 True 如果使用十进制（或者其他进制数），也是对其二进制形式进行移位： print ( 0b1111 is 15 ) print (( 15 >> 1 ) is 7 is 0b111 ) True True 其他按位运算符的例子： print (( 0b1111 & 0b1010 ) is 0b1010 is 10 ) print (( 0b1111 | 0b1010 ) is 0b1111 is 15 ) print (( 0b1111 ^ 0b1010 ) is 0b0101 is 5 ) print (( ~ 0b1010 ) is ( - 0b1010 - 1 ) is - 11 ) True True True True 如果使用十进制（或者其他进制数），也是对其二进制形式进行移位： print (( 15 & 10 ) is 0b1010 is 10 ) print (( 15 | 10 ) is 0b1111 is 15 ) print (( 15 ^ 10 ) is 0b0101 is 5 ) print (( ~ 10 ) is ( - 10 - 1 ) is - 0b1011 ) True True True True","text_tokens":["右","例子","一个","时","数据","的","与","每个","全部","都","左边","10","参与","0b101000","超出范围","即","原来","移动","由","当","于","，","范围","了","为","2","0","掉","没有","两","按位","填","该位","几个","数","is","print","-","位数",")","是","形式","使用","：","40","右移","位","十进制","只要","右边","）","5","变成","比如","指定","两个","也","有","结果","其他","若干","7","超出","0b0101","15","如果","各","1111","其","运算","描述","二个","对应","否则","(","和","相异","<","值","进制","&","0111","异或","二进位","高位","把",">","|","~","整体","11","算符","x","0b1111","或","类似","补","就","对","移位","或者","看","则","变为","。","相应","进位","左移","自动","^","二进制","（","进行","1","左","丢弃","意思","就是","运算符","一位","取反","0b1010","若干位","0b111","二进制位","低位"," ","向","true","舍弃","0b1011"],"title":"按位运算符","title_tokens":["运算符","按位","运算","算符"]},{"location":"Python基础/2.1.python基本语法.html#_15","text":"运算符 逻辑表达式 描述 and x and y x、y同时为真，则结果为真，否则为假 or x or y x、y两者有一个为真，则结果为真，否则为假 not not x x为真，结果为假；x为假，结果为真","text_tokens":["一个","and","假","运算","则","描述","y","同时","逻辑","真","否则","、","达式","；","两者","运算符","，","not","表达","表达式","为","有","结果"," ","算符","or","x"],"title":"逻辑运算符","title_tokens":["运算","运算符","逻辑","算符"]},{"location":"Python基础/2.1.python基本语法.html#_16","text":"运算符 描述 in 如果在指定的序列中找到值返回 True，否则返回 False not in 如果在指定的序列中没有找到值返回 True，否则返回 False","text_tokens":["在","如果","的","运算","描述","序列","false","中","in","否则","值","找到","返回","运算符","，","指定","not"," ","算符","true","没有"],"title":"成员运算符","title_tokens":["成员","运算符","运算","算符"]},{"location":"Python基础/2.1.python基本语法.html#_17","text":"运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b) 。如果引用的不是同一个对象则返回结果 True，否则返回 False","text_tokens":["引用","一个","类似","自","如果","true","is","的","运算","是","描述","y",",",")","则","。","false","不是","!","同一个","否则","(","实例","标识符","返回","不同","运算符","对象","a","同一","，","两个","标识","not","b","判断","结果"," ","算符","id","=","是不是","x"],"title":"身份运算符","title_tokens":["身份","运算符","运算","算符"]},{"location":"Python基础/2.1.python基本语法.html#_18","text":"运算符 描述 优先级 {key:value, ...} 字典显示 16 [...] 列表显示 16 (...) 将表达式用括号括起或元组显示 16 x[index]、x[index1:index2]、f(args...)、x.attribute 元素访问、切片、函数调用、属性引用 15 ** 幂运算 14 ~ 按位求补 13 *、/、//、%、@ 乘、除、取整、取模 12 +、- 加、减 11 <<、>> 左移位、右移位 10 & 按位与 9 ^ 按位异或 8 | 按位或 7 <、<=、>、>=、==、!= 比较运算符 6 is、is not 身份运算符 6 in、not in 成员运算符 6 not 逻辑运算符 5 and 逻辑运算符 4 or 逻辑运算符 3 if - else 条件表达式 2 lambda Lambda 表达式 1 具有相同优先级的运算符将从左至右的方式依次进行。用小括号 () 可以改变运算顺序。 包括函数、类的定义。 ↩ 目前Python的命名空间使用字典实现，但日后可能会改变。 ↩","text_tokens":["右","求补","4","至","%","类","的","与","相同","方式","10","13","in","attribute","取整","9","实现","会","if","用","身份","优先","，","列表","优先级","表达式","2","比较","index2","按位","6","引用","8","is","-",")","使用","逻辑","/","{","+","空间","可能","达式","5","访问",":","显示","[","函数调用","value","表达","幂","成员","16","顺序","7","or","从","字典","12","...","15","小括号","可以","命名","调用","运算","14","定义",",","描述","括号","3","↩","减","@","加","(","函数","]","<","将","&","具有","异或",">","f","|","~","除","11","算符","index","=","但","包括","x","或","元素","元组","and","移位","key","args","。","切片","目前","括起","!","}","^","进行","依次","、","lambda","属性","改变","条件","1","日后","左","运算符","index1","python","取模","not","."," ","else","*","乘"],"title":"运算符优先级","title_tokens":["优先","运算符","运算","算符","优先级"]},{"location":"Python基础/2.2.语句.html","text":"语句 if 语句 if 语句的语法如下： age = 20 if age >= 18 : print ( 'your age is' , age ) print ( 'adult' ) else : print ( 'your age is' , age ) print ( 'teenager' ) your age is 20 adult 注意不要少写了冒号 : 。 类似R语言的else if，在python中则是使用 elif ： kid elif 是 else if 的缩写，使用缩写是为了避免过度缩进。完全可以有多个 elif ，所以 if 语句的完整形式就是： if < 条件判断1 > : < 执行1 > elif < 条件判断2 > : < 执行2 > elif < 条件判断3 > : < 执行3 > else : < 执行4 > if 判断条件还可以简写，比如写： if True : print ( 'True' ) True 在python中， False 、 0 、 '' 、 [] 、 () 、 {} 都视作False，否则为True。 注意，负值也是被判断为真。 断言 断言语句检查条件是否满足，如果不满足，就引发 AssertionError 异常（并可提供错误消息）。语法如下： assert condition 等价于 if not condition : crash program 例子： assert age >= 12 , 'Children under the age of 12 are not allowed' ---------------------------------------------------------------------------AssertionError Traceback (most recent call last)<ipython-input-1-7c799b440abf> in <module> ----> 1 assert age >= 12, 'Children under the age of 12 are not allowed' AssertionError: Children under the age of 12 are not allowed 循环 Python的循环有两种: for 循环 while 循环 for语句 for 循环， 依次把可迭代对象中的每个元素迭代出来 ，可包含 else 子句。看例子： # 执行这段代码，会依次打印`names`的每一个元素 names = [ 'Michael' , 'Bob' , 'Tracy' ] for name in names : print ( name ) Michael Bob Tracy 所以 for x in ... 循环就是把每个元素代入变量 x ，然后执行缩进块的语句。 while语句 while 语句用于在指定条件为真时反复地执行（循环），条件不满足时退出循环， 比如我们要计算100以内所有奇数之和，可以用while循环实现： sum = 0 n = 99 # 在循环内部变量`n`不断自减，直到变为`-1`时，不再满足while条件，循环退出 while n > 0 : sum = sum + n n = n - 2 print ( sum ) 2500 break 在循环中， break 语句可以提前退出循环。例如 注意 break语句只能用于循环中。 i = 1 while i < 100 : i = i + 1 print ( \"结束循环\" ) break print ( i ) 结束循环 break 的作用是退出当前循环， print(i) 语句不会执行。 continue continue 语句：跳过当前的这次循环，直接开始下一次循环。 注意 continue 语句只能用于循环中。 n = 0 while n < 10 : n = n + 1 print ( n , end = \" \" ) 1 2 3 4 5 6 7 8 9 10 上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用 continue 语句跳过某些循环： n = 0 while n < 10 : n = n + 1 if n % 2 == 0 : # 如果n是偶数，执行continue语句 continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行 print ( n , end = \" \" ) 1 3 5 7 9 执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。 循环中的 else 子句 else 子句不仅可以用在 if 语句，还可以用在循环语句。循环语句中的 else 子句在循环迭代完成时、执行条件为 false （对于 while ）时执行，但循环被 break 中止的情况下不会执行。 # for循环 i = 1 for i in range ( 1 , 10 , 2 ): print ( i , end = \" \" ) else : print ( \"i=\" , i ) # while循环 i = 1 while i < 5 : print ( i , end = \" \" ) i = i + 1 else : print ( \"i=\" , i ) # break子句直接结束循环，循环语句一次也没有执行，此时else子句不会执行。 # 注意，这与while子句中条件为false，循环语句没有执行不同 i = 1 for i in range ( 1 , 10 , 2 ): break print ( i , end = \" \" ) else : print ( \"i=\" , i ) i = 1 while i < 5 : break print ( i , end = \" \" ) i = i + 1 else : print ( \"i=\" , i ) 1 3 5 7 9 i= 9 1 2 3 4 i= 5 小结 break 、 continue 语句通常都配合 if 语句使用。 要特别注意，不要滥用 break 和 continue 语句。 break 和 continue 会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到 break 和 continue 语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉 break 和 continue 语句。 pass 语句 pass 语句什么也不做。它用于那些语法上必须要有什么语句，但程序什么也不做的场合，例如: # 死循环 while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) # 创建最小结构的类: class MyEmptyClass : pass return 语句 return 语句结束函数的执行并返回一个值。如果没有指定值，将返回 None 。示例： 注意 return 语句只能用于函数中。 def func1 (): return 4 , 2 def func2 (): return print ( func1 ()) print ( func2 ()) (4, 2) None","text_tokens":["例子","一个","时","n","interrupt","一轮","子句","4","teenager","缩进","%","出错","的","类","与","crash","所以","每个","代入","迭代","都","10","要","为了","in","不会","少写","代码","修改","被","以内","过度","break","只能","r","实现","9","简写","会","计算","只","视作","于","if","我们","用","需要","对象","小结","冒号","，","range","不再","了","这次","然后","2","执行","判断","为","打印","用于","例如","特别","0","call","缩写","names","分叉","keyboard","没有","提前","6","对于","满足","反复","\"","8","is","print","语句","偶数","input","under","'","变量","-",")","是","20","完全","使用","形式","bob","99","false","：","中","跳过","逻辑","最小","while","每","2500","所有","---------------------------------------------------------------------------","负值","结束","{","场合","michael","+","是否","continue","）","去掉","5","上面","结构",":","作用","退出","busy","----","[","most","一次","assertionerror","语法","将","不断","100","比如","adult","指定","两个","想","当前","i","也","assert","recent","有","kid","写","检查","大多数","还","class","循环","此时","等价","7","中止","完整","12","...","不仅","如果","什么","可以","for","func2","创建","大多","上",",","3","tracy","are","但是","并不需要","块","～","通过","真","可","sum","配合","program","否则","消息","(","函数","和","不","]","pass","age","<","避免","之","过多","children","提供","引发","而是","多数","改写","the","内部","如下","用到","它","返回","程序","通常","中则","ipython","your","把","并",">","elif","自减","end","值","奇数","代码执行","ctrl","=","但","必须","x","某些","元素","在","类似","包含","情况","就","做","traceback","后续","看","出","地","或者","def","变为","。","两种","死循环","}","func1","（","继续","`","依次","容易","wait","直接","myemptyclass","段","直到","、","条件","注意","那些","1","下","7c799b440abf","就是","不同","18","不要","多个","allowed","python","出来","#","这","真时","c","name","of","none","not","错误","module","看到","完成","滥用","语言","造成","示例","异常","condition"," ","else","last","开始","true","return","断言"],"title":"2.2.语句","title_tokens":["语句","2.2","."]},{"location":"Python基础/2.2.语句.html#_1","text":"","text_tokens":[],"title":"语句","title_tokens":["语句"]},{"location":"Python基础/2.2.语句.html#if","text":"if 语句的语法如下： age = 20 if age >= 18 : print ( 'your age is' , age ) print ( 'adult' ) else : print ( 'your age is' , age ) print ( 'teenager' ) your age is 20 adult 注意不要少写了冒号 : 。 类似R语言的else if，在python中则是使用 elif ： kid elif 是 else if 的缩写，使用缩写是为了避免过度缩进。完全可以有多个 elif ，所以 if 语句的完整形式就是： if < 条件判断1 > : < 执行1 > elif < 条件判断2 > : < 执行2 > elif < 条件判断3 > : < 执行3 > else : < 执行4 > if 判断条件还可以简写，比如写： if True : print ( 'True' ) True 在python中， False 、 0 、 '' 、 [] 、 () 、 {} 都视作False，否则为True。 注意，负值也是被判断为真。","text_tokens":["4","teenager","缩进","的","所以","都","为了","少写","被","过度","r","简写","视作","if","冒号","，","了","2","执行","判断","为","0","缩写","is","print","语句","'",")","是","20","完全","使用","形式","false","：","中","负值","{",":","[","语法","比如","adult","也","有","kid","写","还","完整","可以",",","3","真","否则","(","]","age","<","避免","如下","中则","your",">","elif","=","在","类似","。","}","、","条件","注意","1","就是","18","不要","多个","python","语言"," ","else","true"],"title":"if 语句","title_tokens":["语句"," ","if"]},{"location":"Python基础/2.2.语句.html#_2","text":"断言语句检查条件是否满足，如果不满足，就引发 AssertionError 异常（并可提供错误消息）。语法如下： assert condition 等价于 if not condition : crash program 例子： assert age >= 12 , 'Children under the age of 12 are not allowed' ---------------------------------------------------------------------------AssertionError Traceback (most recent call last)<ipython-input-1-7c799b440abf> in <module> ----> 1 assert age >= 12, 'Children under the age of 12 are not allowed' AssertionError: Children under the age of 12 are not allowed","text_tokens":["12","例子","满足","如果","就","语句","traceback","input","under","'","-","crash",")",",","。","=","are","：","in","可","program","（","消息","---------------------------------------------------------------------------","(","不","age","<","是否","）","条件","children","提供","引发","于",":","1","the","if","如下","7c799b440abf","most","----","assertionerror","allowed","语法","，","of","ipython","not","错误","并","module",">","assert","recent","异常","检查"," ","condition","last","call","等价","断言"],"title":"断言","title_tokens":["断言"]},{"location":"Python基础/2.2.语句.html#_3","text":"Python的循环有两种: for 循环 while 循环","text_tokens":["两种","有",":","while"," ","for","的","循环","python"],"title":"循环","title_tokens":["循环"]},{"location":"Python基础/2.2.语句.html#for","text":"for 循环， 依次把可迭代对象中的每个元素迭代出来 ，可包含 else 子句。看例子： # 执行这段代码，会依次打印`names`的每一个元素 names = [ 'Michael' , 'Bob' , 'Tracy' ] for name in names : print ( name ) Michael Bob Tracy 所以 for x in ... 循环就是把每个元素代入变量 x ，然后执行缩进块的语句。","text_tokens":["元素","例子","一个","包含","子句","print","语句","for","缩进","变量","的","看","'","每个",")",",","所以","。","迭代","bob","tracy","代入","：","中","块","in","可","代码","每","`","依次","(","michael","]","段","会",":","[","就是","对象","出来","#","，","这","name","把","然后","执行","打印"," ","else","names","循环","=","x","..."],"title":"for语句","title_tokens":["语句","for"]},{"location":"Python基础/2.2.语句.html#while","text":"while 语句用于在指定条件为真时反复地执行（循环），条件不满足时退出循环， 比如我们要计算100以内所有奇数之和，可以用while循环实现： sum = 0 n = 99 # 在循环内部变量`n`不断自减，直到变为`-1`时，不再满足while条件，循环退出 while n > 0 : sum = sum + n n = n - 2 print ( sum ) 2500","text_tokens":["在","时","反复","满足","n","print","语句","可以","变量","地","-",")","变为","99","要","：","sum","while","2500","所有","（","`","以内","和","不","(","实现","直到","+","）","计算","条件","之","1",":","退出","内部","我们","用","真时","#","，","100","比如","不断","指定","不再",">","为","执行","用于","自减","2"," ","0","循环","奇数","="],"title":"while语句","title_tokens":["while","语句"]},{"location":"Python基础/2.2.语句.html#break","text":"在循环中， break 语句可以提前退出循环。例如 注意 break语句只能用于循环中。 i = 1 while i < 100 : i = i + 1 print ( \"结束循环\" ) break print ( i ) 结束循环 break 的作用是退出当前循环， print(i) 语句不会执行。","text_tokens":["在","\"","print","语句","可以","的",")","是","。","中","不会","while","(","结束","break","只能","+","<","注意","1",":","作用","退出","，","100","当前","i","执行","用于"," ","例如","循环","=","提前"],"title":"break","title_tokens":["break"]},{"location":"Python基础/2.2.语句.html#continue","text":"continue 语句：跳过当前的这次循环，直接开始下一次循环。 注意 continue 语句只能用于循环中。 n = 0 while n < 10 : n = n + 1 print ( n , end = \" \" ) 1 2 3 4 5 6 7 8 9 10 上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用 continue 语句跳过某些循环： n = 0 while n < 10 : n = n + 1 if n % 2 == 0 : # 如果n是偶数，执行continue语句 continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行 print ( n , end = \" \" ) 1 3 5 7 9 执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。","text_tokens":["6","n","\"","如果","8","一轮","print","4","语句","可以","偶数","%","后续","的","出",")",",","3","。","是","但是","10","：","中","～","跳过","不会","while","代码","继续","(","9","直接","只能","+","<","continue","会","只","5","上面","注意","下",":","1","7","而是","if","我们","用","一次","程序","#","，","不再","想","当前","这次","看到","2","打印","用于","执行"," ","end","0","循环","开始","奇数","=","某些"],"title":"continue","title_tokens":["continue"]},{"location":"Python基础/2.2.语句.html#else","text":"else 子句不仅可以用在 if 语句，还可以用在循环语句。循环语句中的 else 子句在循环迭代完成时、执行条件为 false （对于 while ）时执行，但循环被 break 中止的情况下不会执行。 # for循环 i = 1 for i in range ( 1 , 10 , 2 ): print ( i , end = \" \" ) else : print ( \"i=\" , i ) # while循环 i = 1 while i < 5 : print ( i , end = \" \" ) i = i + 1 else : print ( \"i=\" , i ) # break子句直接结束循环，循环语句一次也没有执行，此时else子句不会执行。 # 注意，这与while子句中条件为false，循环语句没有执行不同 i = 1 for i in range ( 1 , 10 , 2 ): break print ( i , end = \" \" ) else : print ( \"i=\" , i ) i = 1 while i < 5 : break print ( i , end = \" \" ) i = i + 1 else : print ( \"i=\" , i ) 1 3 5 7 9 i= 9 1 2 3 4 i= 5","text_tokens":["不仅","在","对于","时","\"","情况","子句","print","4","语句","可以","for","的","与",")",",","3","。","迭代","=","false","10","中","in","不会","while","（","被","(","结束","break","直接","9","+","、","<","）","条件","5","注意","下","1",":","7","if","用","不同","一次","#","，","这","range","完成","i","为","执行","2","也"," ","else","end","还","循环","没有","此时","中止","但"],"title":"循环中的else子句","title_tokens":["中","子句","else","的","循环"]},{"location":"Python基础/2.2.语句.html#_4","text":"break 、 continue 语句通常都配合 if 语句使用。 要特别注意，不要滥用 break 和 continue 语句。 break 和 continue 会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到 break 和 continue 语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉 break 和 continue 语句。","text_tokens":["例子","语句","可以","出错","的","或者","大多","。","使用","都","并不需要","要","通过","逻辑","配合","代码","修改","容易","和","break","、","continue","会","去掉","过多","上面","注意","改写","条件","多数","用到","if","需要","不要","通常","，","两个","造成","滥用","执行","特别"," ","分叉","大多数","循环","代码执行"],"title":"小结","title_tokens":["小结"]},{"location":"Python基础/2.2.语句.html#pass","text":"pass 语句什么也不做。它用于那些语法上必须要有什么语句，但程序什么也不做的场合，例如: # 死循环 while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) # 创建最小结构的类: class MyEmptyClass : pass","text_tokens":["interrupt","什么","做","语句","for","类","的","创建","-","上",")","。","要","最小","while","(","场合","wait","不","myemptyclass","pass","+","但","keyboard","那些","结构",":","它","busy","程序","语法","#","，","c","也","用于","有"," ","例如","class","循环","true","ctrl","必须","死循环"],"title":"pass 语句","title_tokens":["pass"," ","语句"]},{"location":"Python基础/2.2.语句.html#return","text":"return 语句结束函数的执行并返回一个值。如果没有指定值，将返回 None 。示例： 注意 return 语句只能用于函数中。 def func1 (): return 4 , 2 def func2 (): return print ( func1 ()) print ( func2 ()) (4, 2) None","text_tokens":["一个","如果","4","print","语句","func2","的","def",")",",","。","：","中","func1","函数","结束","(","只能","注意","值","将",":","返回","，","指定","none","并","2","执行","示例","用于"," ","没有","return"],"title":"return 语句","title_tokens":["return"," ","语句"]},{"location":"Python基础/2.3.List.html","text":"列表的方 法 描 述 aList.append(obj) 等同于aList[len(aList):len(aList)] = [obj] aList.clear() 删除aList的所有元素 aList.count(obj) 返回aList中与obj相等的元素个数 aList.copy() 返回aList的副本。请注意，这是浅复制，即不会复制元素 aList.extend(sequence) 等同于aList[len(aList):len(aList)] = sequence aList.index(obj) 返回aList中第一个与obj相等的元素的索引；如果没有这样的元素，就引发 ValueError异常 aList.insert(index, obj) 如果index >= 0，就等同于aList[index:index] = [obj]；如果index < 0，就 将指定的对象加入到列表开头 aList.pop([index]) 删除并返回指定索引（默认为-1 )处的元素 aList.remove(obj) 等同于del aList[aList.index(obj)] aList.reverse。 就地按相反的顺序排列列表的元素 aList.sort([cmp][,key][,reverse]) 就地对aList的元素进行排序（稳定排序）。可通过提供比较函数cmp、键函数 key (创建用户排序的键）和降序标志reverse (—个布尔值）进行定制 list的方法 创建一个list # 查看list的方法、属性 [ method for method in dir ( list ()) if not method . startswith ( \"_\" )] ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] 修改list元素的值 修改现有list的值，通过索引、切片来完成。 list_1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # 修改某个索引对应元素的值 list_1 [ 0 ] = 12 ; list_1 [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # 修改某个连续区域的值 # 切片的长度 和 用于赋值的列表长度 可以不同，如下： list_1 [ 0 : 5 ] = [ 11 , 12 , 13 , 14 , 15 , 16 , 17 ]; list_1 [11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 8, 9, 10] 添加一个新元素到末尾 append 方法每次只能添加一个新元素 list_1 = list ( range ( 4 )); print ( list_1 ) list_1 . append ( 12 ); print ( list_1 ) [0, 1, 2, 3] [0, 1, 2, 3, 12] 添加任意个新元素到末尾 extend 方法允许我们通过另一个list来扩充当前的list。实际上，这看起来像是用 + 拼接list，但 extend 方法会直接修改原列表，不返回副本。 list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] list_1 + list_2 # 此时list_1没有被修改 print ( \"使用+运算符：\" , list_1 ) list_1 . extend ( list_2 ) # 此时list_1被修改 print ( \"使用extend方法：\" , list_1 ) 使用+运算符： [0, 1, 2, 3] 使用extend方法： [0, 1, 2, 3, '0', '00', '000'] 可以看出，使用 + 拼接list会创建一个新对象，显然拼接的效率回比 extend 方法的效率低。 还可以借助切片来扩充list，像这样： list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] # 这样做可读性不高 list_1 [ len ( list_1 ):] = list_2 list_1 [0, 1, 2, 3, '0', '00', '000'] 在任意位置插入新元素 insert 方法将一个对象插入指定位置 list_1 = list ( range ( 4 )); print ( \"原列表：\" , list_1 ) list_1 . insert ( 0 , \"新元素\" ); print ( \"新列表：\" , list_1 ) 原列表： [0, 1, 2, 3] 新列表： ['新元素', 0, 1, 2, 3] 当然，也可以借助切片在任意位置插入元素。注意的是，对一个list使用切片，必定会得到一个list，这就需要用一个list对切片赋值。 # 这样虽然巧妙，但是可读性比不上insert。 list_1 = list ( range ( 4 )); print ( \"原列表：\" , list_1 ) list_1 [ 0 : 0 ] = [ \"新元素\" ]; print ( \"新列表：\" , list_1 ) 原列表： [0, 1, 2, 3] 新列表： ['新元素', 0, 1, 2, 3] 删除\\取出最后一个（任意位置的）元素 list_2 = [ '0' , '00' , '000' ] # 注意，pop是list中唯一一个修改原列表，并且有返回值的方法 list_2 . pop () '000' list_2 = [ '0' , '00' , '000' ] # pop默认删除最后一个元素，但是也可以输入索引值，指定删除元素的位置 list_2 . pop ( 0 ) list_2 ['00', '000'] 删除第一次出现的元素 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . remove ( 1 ) list_1 [2, 3, 1] 反序排序 list_1 = [ 1 , 2 , 3 ] list_1 . reverse () list_1 [3, 2, 1] 排序 方法 sort 接受两个可选参数： key 和 reverse 。将 key 设置为一个用于排序的**函数。然而，不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个键，再根据这些键对元素进行排序。对于另一个关键字参数 reverse ，只需将其指定为 True 或 False ，以指出是否要按相反的顺序对列表进行排序。 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 ['add', 'acme', 'aerate', 'abalone', 'aardvark'] # 按照长度降序排序 list_3 . sort ( key = len , reverse = True ) list_3 ['aardvark', 'abalone', 'aerate', 'acme', 'add'] 统计元素出现的次数 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . count ( 1 ) 2 得到某个值第一次出现时对应的索引值 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . index ( 1 ) 0 深拷贝列表 list_1 = [ 1 , 2 , 3 ] list_4 = list_1 list_1 [ 0 ] = \"修改了\" print ( \"list_1：\" , list_1 ) print ( \"list_4：\" , list_4 ) list_1： ['修改了', 2, 3] list_4： ['修改了', 2, 3] # 深拷贝 list_1 = [ 1 , 2 , 3 ] list_5 = list_1 . copy () list_1 [ 0 ] = \"修改了\" print ( \"list_1：\" , list_1 ) print ( \"list_5：\" , list_5 ) list_1： ['修改了', 2, 3] list_5： [1, 2, 3] 清空列表 list_1 . clear () list_1 []","text_tokens":["像是","一个","时","现有","4","000","的","与","描","排列","每个","copy","add","10","要","in","13","必定","不会","\\","连续","原","第一个","默认","布尔值","dir","修改","被","即","任意","9","只能","用户","会","虽然","只","pop","_","第一","sort","if","我们","用","需要","对象","查看","，","列表","赋值","range","拼接","稳定","比不上","可读","了","为","副本","2","用于","比较","判断","0","添加","个数","obj","没有","输入","某个","6","长度","末尾","实际","\"","当然","对于","8","方","到","—","print","'","-","定制",")","是","接受","使用","以","必定会","false","：","中","清空","排序","alist","来","巧妙","比","同于","再","根据","所有","关键字","拷贝","cmp","相反","del","唯一","+","是否","）","5","关键","；",":","acme","startswith","小",";","[","反序","一次","len","指定","看出","浅","当前","看起来","两个","也","选","然而","有","低","16","还","aardvark","count","请","顺序","新元","00","7","此时","显然","abalone","12","加入","如果","15","看起","删除","insert","remove","for","述","method","创建","可以","14","运算",",","3","效率","不高","但是","回比","降序","sequence","扩充","通过","每次","可","布尔","指出","插入","对应","得到","参数","这些","按照","(","函数","和","不","]","取出","<","值","提供","引发","将","开头","出现","而是","返回","如下","它","其","extend","并","需",">","键","新元素","17","等同","11","并且","算符","aerate","index","处","=","list","个","但","最后","元素","或","在","索引","法","就","对","区域","做","像","另","地","key","第一次","。","切片","起来","设置","append","深","valueerror","（","进行","允许","直接","新","这样","定会","、","属性","实际上","复制","注意","1","借助","这个","次数","按","不同","运算符","可读性","#","这","标志","not","完成","reverse",".","异常","方法"," ","返回值","统计","clear","相等","顺序排列","true","*","等同于","位置"],"title":"2.3.List","title_tokens":["list",".","2.3"]},{"location":"Python基础/2.3.List.html#list","text":"创建一个list # 查看list的方法、属性 [ method for method in dir ( list ()) if not method . startswith ( \"_\" )] ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']","text_tokens":["一个","\"","for","insert","remove","的","创建","method","'",")",",","copy","append","in","dir","(","]","、","属性","pop","_","sort","startswith","if","[","查看","#","not","extend","reverse",".","方法"," ","clear","count","index","list"],"title":"list的方法","title_tokens":["的","方法","list"]},{"location":"Python基础/2.3.List.html#list_1","text":"修改现有list的值，通过索引、切片来完成。 list_1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # 修改某个索引对应元素的值 list_1 [ 0 ] = 12 ; list_1 [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # 修改某个连续区域的值 # 切片的长度 和 用于赋值的列表长度 可以不同，如下： list_1 [ 0 : 5 ] = [ 11 , 12 , 13 , 14 , 15 , 16 , 17 ]; list_1 [11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 8, 9, 10]","text_tokens":["某个","6","元素","12","长度","15","索引","现有","8","4","区域","可以","的","14",",","3","。","切片","10","：","通过","13","来","连续","对应","修改","和","9","]","、","5","值","_","1","7",":",";","[","不同","如下","#","，","列表","赋值","完成","2","用于"," ","16","0","17","11","=","list"],"title":"修改list元素的值","title_tokens":["元素","值","修改","的","list"]},{"location":"Python基础/2.3.List.html#_1","text":"append 方法每次只能添加一个新元素 list_1 = list ( range ( 4 )); print ( list_1 ) list_1 . append ( 12 ); print ( list_1 ) [0, 1, 2, 3] [0, 1, 2, 3, 12]","text_tokens":["元素","12","一个","4","print",")",",","3","append","每次","(","只能","]","_","1",";","[","range",".","2","方法","新元素"," ","0","添加","新元","=","list"],"title":"添加一个新元素到末尾","title_tokens":["元素","一个","末尾","新元素","到","添加","新元"]},{"location":"Python基础/2.3.List.html#_2","text":"extend 方法允许我们通过另一个list来扩充当前的list。实际上，这看起来像是用 + 拼接list，但 extend 方法会直接修改原列表，不返回副本。 list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] list_1 + list_2 # 此时list_1没有被修改 print ( \"使用+运算符：\" , list_1 ) list_1 . extend ( list_2 ) # 此时list_1被修改 print ( \"使用extend方法：\" , list_1 ) 使用+运算符： [0, 1, 2, 3] 使用extend方法： [0, 1, 2, 3, '0', '00', '000'] 可以看出，使用 + 拼接list会创建一个新对象，显然拼接的效率回比 extend 方法的效率低。 还可以借助切片来扩充list，像这样： list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] # 这样做可读性不高 list_1 [ len ( list_1 ):] = list_2 list_1 [0, 1, 2, 3, '0', '00', '000']","text_tokens":["像是","一个","4","000","的","原","修改","被","会","_","我们","用","对象","，","拼接","列表","range","可读","2","副本","0","没有","实际","\"","print","'",")","使用","：","来","+",":","[","len","看出","当前","看起来","低","还","此时","显然","00","看起","可以","创建","运算","效率","不高",",","3","回比","扩充","通过","(","不","]","返回","extend","算符","=","但","list","做","像","另","。","起来","切片","允许","直接","新","这样","实际上","1","借助","运算符","可读性","#","这",".","方法"," "],"title":"添加任意个新元素到末尾","title_tokens":["元素","末尾","新元素","到","添加","新元","任意","个"]},{"location":"Python基础/2.3.List.html#_3","text":"insert 方法将一个对象插入指定位置 list_1 = list ( range ( 4 )); print ( \"原列表：\" , list_1 ) list_1 . insert ( 0 , \"新元素\" ); print ( \"新列表：\" , list_1 ) 原列表： [0, 1, 2, 3] 新列表： ['新元素', 0, 1, 2, 3] 当然，也可以借助切片在任意位置插入元素。注意的是，对一个list使用切片，必定会得到一个list，这就需要用一个list对切片赋值。 # 这样虽然巧妙，但是可读性比不上insert。 list_1 = list ( range ( 4 )); print ( \"原列表：\" , list_1 ) list_1 [ 0 : 0 ] = [ \"新元素\" ]; print ( \"新列表：\" , list_1 ) 原列表： [0, 1, 2, 3] 新列表： ['新元素', 0, 1, 2, 3]","text_tokens":["元素","当然","一个","在","\"","就","4","print","对","insert","可以","'","的",")",",","3","。","是","使用","但是","=","切片","必定会","：","必定","巧妙","插入","原","得到","(","任意","新","]","定会","这样","虽然","注意","_","将","1","借助",":",";","[","需要","用","对象","可读性","#","，","列表","这","range","赋值","指定","比不上","可读",".","2","也","方法","新元素"," ","0","新元","位置","list"],"title":"在任意位置插入新元素","title_tokens":["元素","在","新元素","插入","新元","任意","位置"]},{"location":"Python基础/2.3.List.html#_4","text":"list_2 = [ '0' , '00' , '000' ] # 注意，pop是list中唯一一个修改原列表，并且有返回值的方法 list_2 . pop () '000' list_2 = [ '0' , '00' , '000' ] # pop默认删除最后一个元素，但是也可以输入索引值，指定删除元素的位置 list_2 . pop ( 0 ) list_2 ['00', '000']","text_tokens":["元素","位置","一个","索引","000","删除","可以","'","的","是",",",")","但是","中","原","默认","修改","(","唯一","]","pop","注意","值","_","返回","[","#","，","列表","指定","2",".","也","有","返回值","方法"," ","0","并且","00","=","list","输入","最后"],"title":"删除\\取出最后一个（任意位置的）元素","title_tokens":["元素","）","一个","\\","删除","（","的","任意","位置","取出","最后"]},{"location":"Python基础/2.3.List.html#_5","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . remove ( 1 ) list_1 [2, 3, 1]","text_tokens":["3","2",".","_","1"," ","[","remove","(",")",",","]","=","list"],"title":"删除第一次出现的元素","title_tokens":["元素","出现","第一","删除","一次","的","第一次"]},{"location":"Python基础/2.3.List.html#_6","text":"list_1 = [ 1 , 2 , 3 ] list_1 . reverse () list_1 [3, 2, 1]","text_tokens":["3","reverse","2",".","_","1"," ","[","(",")",",","]","=","list"],"title":"反序排序","title_tokens":["排序","反序"]},{"location":"Python基础/2.3.List.html#_7","text":"方法 sort 接受两个可选参数： key 和 reverse 。将 key 设置为一个用于排序的**函数。然而，不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个键，再根据这些键对元素进行排序。对于另一个关键字参数 reverse ，只需将其指定为 True 或 False ，以指出是否要按相反的顺序对列表进行排序。 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 ['add', 'acme', 'aerate', 'abalone', 'aardvark'] # 按照长度降序排序 list_3 . sort ( key = len , reverse = True ) list_3 ['aardvark', 'abalone', 'aerate', 'acme', 'add']","text_tokens":["一个","的","每个","add","要","不会","只","_","sort","，","列表","为","用于","判断","对于","长度","'",")","接受","使用","以","false","：","排序","来","比","再","根据","关键字","相反","是否","关键","acme","小","[","两个","指定","len","选","然而","aardvark","顺序","abalone","其","创建","3",",","降序","可","指出","参数","按照","函数","(","和","]","将","而是","它","需","键","aerate","=","list","元素","或","对","另","key","。","设置","进行","直接","这个","按","#","reverse",".","方法"," ","true","*","这些"],"title":"排序","title_tokens":["排序"]},{"location":"Python基础/2.3.List.html#_8","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . count ( 1 ) 2","text_tokens":["3","2",".","_","1"," ","[","count","(",")",",","]","=","list"],"title":"统计元素出现的次数","title_tokens":["元素","出现","次数","统计","的"]},{"location":"Python基础/2.3.List.html#_9","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . index ( 1 ) 0","text_tokens":["3","2",".","_","1","index"," ","0","[","(",")",",","]","=","list"],"title":"得到某个值第一次出现时对应的索引值","title_tokens":["某个","时","值","出现","索引","第一","得到","对应","一次","的","第一次"]},{"location":"Python基础/2.3.List.html#_10","text":"list_1 = [ 1 , 2 , 3 ] list_4 = list_1 list_1 [ 0 ] = \"修改了\" print ( \"list_1：\" , list_1 ) print ( \"list_4：\" , list_4 ) list_1： ['修改了', 2, 3] list_4： ['修改了', 2, 3] # 深拷贝 list_1 = [ 1 , 2 , 3 ] list_5 = list_1 . copy () list_1 [ 0 ] = \"修改了\" print ( \"list_1：\" , list_1 ) print ( \"list_5：\" , list_5 ) list_1： ['修改了', 2, 3] list_5： [1, 2, 3]","text_tokens":["\"","4","print","'",")","3",",","copy","：","深","拷贝","修改","(","]","5","_","1","[","#","了","2","."," ","0","=","list"],"title":"深拷贝列表","title_tokens":["拷贝","列表","深"]},{"location":"Python基础/2.3.List.html#_11","text":"list_1 . clear () list_1 []","text_tokens":[".","_","1"," ","clear","[","(",")","]","list"],"title":"清空列表","title_tokens":["列表","清空"]},{"location":"Python基础/2.4.String.html","text":"多行字符串 str_1 = \"\"\" 这是一个多行字符串 这是第二行 \"\"\" print ( str_1 ) str_2 = \" \\n 这是一个多行字符串 \\n 这是第二行 \\n \" print ( str_2 ) str_1 == str_2 这是一个多行字符串 这是第二行 这是一个多行字符串 这是第二行 True 转义 如果要在字符串里面输入特殊字符，需要使用转义符\\，例如输入转义符本身： str_3 = \"12 \\\\ 14\" print ( str_3 ) 12\\14 前缀 在Python中，字符串可以添加前缀 r\\R 、 b 、 u\\U 、 f 。 r\\R ：表示非转义的原始字符串，常用于正则表达式。 b ：Python3里默认的str是(Python2里的)unicode，bytes是(Python2)的str， b前缀代表的就是bytes。Python2里, b前缀没什么具体意义，只是为了兼容Python3的这种写法 。 u\\U ：表示unicode字符串，代表是对字符串进行unicode编码。 一般英文字符在使用各种编码下, 基本都可以正常解析, 所以一般不带u；但是中文, 必须表明所需编码, 否则一旦编码转换就会出现乱码。建议所有编码方式采用UTF-8。 f ：表示 f 格式字符串。 字符编码 Python有两种不同的字符串，一种存储文本，一种存储字节。对于文本，Python内部采用Unicode存储，而字节字符串显示原始字节序列或者ASCII。在Python3当中，文本字符串类型（使用Unicode数据存储）被命名为 str , 字节字符串类型被命名为 bytes 。但在python2中，文本字符串类型叫做 unicode ，字节字符串类型叫做 str 。也就是说： $$ \\begin{array}{} Python\\ 3\\ \\mathbf{str} &\\Longleftrightarrow Python\\ 2\\ \\mathbf{unicode} \\\\ Python\\ 3\\ \\mathbf{bytes} &\\Longleftrightarrow Python\\ 2\\ \\mathbf{str} \\end{array} $$ 所以，如果想将以unicode形式储存的字符串转换为二进制类型的字符串，需要将unicode字符串编码，反之，则需要解码。 编码：在python中，编码指的是将Unicode字符按照编码规则（如UTF-8）编成二进制序列。 在python3中实例化一个字符串 str_1 = \"中国\" # 编码 str_1 . encode () b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd' # 创建一个二进制字符串 str_2 = b ' \\xe4\\xb8\\xad\\xe5\\x9b\\xbd ' # 解码 str_2 . decode () '中国' bytes字符 文本字符类型在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把 str 变为以字节为单位的 bytes 。 Python3对 bytes 类型的数据用带 b 前缀的单引号或双引号表示。 bytes_8 = b \"ABC\" bytes_8 b'ABC' 要注意的是：bytes字面值中只允许ASCII字符（无论源代码声明的编码为何）。任何超出127的二进制值必须使用相应的转义序列形式加入bytes字面值。 例如，可以对str（unicode类型）对象使用 encode() 方法，编码为bytes的形式（16进制表示）。 '中文' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' 要注意的是， encode 的对象不能超出指定编码的范围，例如不能对中文字符使用 .encode(\"ascii\") ，因为中文不在ascii码的范围内。 '中文' . encode ( 'ascii' ) ---------------------------------------------------------------------------UnicodeEncodeError Traceback (most recent call last)<ipython-input-1-76f41cd8dafa> in <module> ----> 1 '中文'.encode('ascii') UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) 纯英文的str可以用ASCII编码为bytes，内容是一样的，但无法显示为ASCII字符的字节，用 \\x 显示（16进制转义表示）。 'ABC' . encode ( 'ascii' ) b'ABC' '中文' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用 decode() 方法： b 'ABC' . decode ( 'ascii' ) 'ABC' b ' \\xe4\\xb8\\xad\\xe6\\x96\\x87 ' . decode ( 'utf-8' ) '中文' 如果bytes中包含无法解码的字节， decode() 方法会报错： b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' ) ---------------------------------------------------------------------------UnicodeDecodeError Traceback (most recent call last)<ipython-input-1-cd8de1b11dcd> in <module> ----> 1 b'\\xe4\\xb8\\xad\\xff'.decode('utf-8') UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte 但是，如果bytes中只有一小部分无效的字节，可以传入 errors = 'ignore' 忽略错误的字节： \"中\" . encode ( \"utf-8\" ) # 中 原来的编码 b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' , errors = 'ignore' ) '中' 在对str和bytes互相转换时，为了避免乱码问题，应该使用UTF-8编码对str和bytes进行转换。 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行： # !/usr/bin/env python3 # -*- coding: utf-8 -*- 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释。第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，在源代码中写的中文输出可能会有乱码。 但是申明了UTF-8编码只是让Python解释器按UTF-8的编码规则读取源代码，并不意味着源代码一定是使用UT8-8编码保存的，必须并且要确保文本编辑器正在使用UTF-8编码。 格式化 C printf 样式的格式化 字符串具有一种特殊的内置操作：使用 % (取模)运算符，可以格式化字符串，此时 % 也被称为字符串的格式化运算符或插值运算符。对于format % values(其中format为一个字符串)，在format中的 % 转换标记符将被替换为零个或多个values条目。 其效果类似于在C语言中使用sprintf()。 'Hello, %s ' % 'world' # 省略括号 'Hello, world' 'Hi, %s , you have $ %d ' % ( 'Michael' , 10000.58 ) 'Hi, Michael, you have $10000' 转换标记符 包含两个或更多字符，由以下元素组成，且必须遵循此处规定的顺序： % 字符，用于标记转换符的起始。 映射键（可选），由加圆括号的字符序列组成(例如(somename))。 转换标志（可选） - 表示左对齐 + 表示转换后的内容前方加上正负号 空格 表示正数前方保留一个空格 0 表示如果转换位置位数不够时，用0填充 最小字段宽度（可选），转换后字段的最小宽度，如果不足自动用空格补齐；如果最小字段宽度值为 * ，则从元组中读取。 精度（可选），在 . 之后加精度值的形式给出。如果指定为为 * ，则从元组中读取。 长度修饰符（可选）。 转换类型。 Conversion Meaning d 格式化整数 i 格式化整数 o 8 进制 u 格式化无符号整型(已过时) x 16 进制， 小写字母 X 16 进制， 大写字母 e 浮点指数格式， 小写字母 E 浮点指数格式， 大写字母 f 浮点数 F 浮点数 g 浮点数， 如果指数小于 -4 或小于精度， 则使用小写指数格式， 否则使用小数格式 G 浮点数， 类似 g , 使用大写指数 c 单个字符， 格式化字符及其 ASCII 码 r 字符串， 使用 repr() 转换任何 Python 对象 s 字符串， 使用 str() 转换任何 Python 对象 % % 字符 # 映射键 ## 如果值是一个字典，那么必须使用映射键. 如： print ( ' %(num)d ' % { \"num\" : 10 }) 10 # 最小字段宽度 print ( ' %2s ' % 123456 ) print ( ' %8s ' % 123456 ) print ( ' %*s ' % ( 10 , 123456 )) 123456 123456 123456 # 精度 print ( ' %.2f ' % 100.256 ) print ( ' %.*f ' % ( 2 , 100.256 )) 100.26 100.26 # 转换标志 print ( ' %-8d ' % 123456 ) print ( ' %+8d ' % 123456 ) print ( ' %08d ' % 123456 ) 123456 +123456 00123456 format方法 < 模板字符串 >. format ( < 逗号分隔的参数 > ) <模板字符串> 由一系列的槽 {} 组成，用来控制修改字符串中嵌入值出现的位置，其基本思想是将format()方法的 <逗号分隔的参数> 中的参数按照序号关系替换到 <模板字符串> 的槽中。如果大括号中没有序号，则按照出现顺序替换。该方法会创建新字符串对象，不会修改原值。 {}中指定顺序，按指定的顺序替换 print ( \" {2} : {1} : {0} \" . format ( \"1\" , \"2\" , \"3\" )) 3 : 2 : 1 没有指定顺序，按出现的顺序依次替换 print ( \" {} : {} : {} \" . format ( \"1\" , \"2\" , \"3\" )) 1 : 2 : 3 format()方法中 <模板字符串> 的槽除了包括参数序号，还可以包括格式控制信息。此时，槽的内部样式如下： 替换字段 - replacement_field ::= \"{\" [ field_name ] [ \"!\" conversion ] [ \":\" format_spec ] \"}\" 字段名 - field_name ::= arg_name ( \".\" attribute_name | \"[\" element_index \"]\" ) * 参数名 - arg_name ::= [ identifier | integer ] 属性名 - attribute_name ::= identifier 元素索引 - element_index ::= integer | index_string 索引字符串 - index_string ::= < any source character except \"]\" > + 转换字段 - conversion ::= \"r\" | \"s\" 格式规范说明符 - format_spec ::= < described in the next section > 注意事项： 参数名 可以为 整数 或 关键字 。整数为位置参数， 关键字为命名关键字参数。 如果整数类似于 {0}{1}{2}, 则可以省略， 即： {}{}{} 等价于 {0}{1}{2}。 如果参数存在属性， 可以通过 arg_name.attribute_name 的形式获取属性值。 如果参数为可迭代对象， 可以通过 arg_name[integer|index_string] 的形式获取索引位置的元素。 转换字段 由 ! 开始， r 代表调用 repr(), s 代表调用 str(). 格式规范说明符 由 : 开始。 其中， <格式控制标记> 用来控制参数显示时的格式，可以使用的参数如下： format_spec ::= [ [fill ] align ] [ sign ][ # ][ 0 ][ width ][ grouping_option ][ .precision ][ type ] fill ::= < any character > align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit + grouping_option ::= \"_\" | \",\" precision ::= digit + type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" 填充字符 ：如果指定了对齐选项，则可以使用填充字符。默认为空格. 对齐选项 ：默认右对齐，各种对齐选项的含义如下： 选项 意义 '<' 强制字段在可用空间内左对齐（这是大多数对象的默认值）。 '>' 强制字段在可用空间内右对齐（这是数字的默认值）。 '=' 强制将填充放置在符号（如果有）之后但在数字之前。这用于以“+000000120”形式打印字段。此对齐选项仅对数字类型有效。当'0'紧接在字段宽度之前时，它成为默认值。 '^' 强制字段在可用空间内居中。 sign ：仅对数字类型有效，可以是以下之一： 选项 意义 '+' 表示标志应该用于正数和负数。 '-' 表示标志应仅用于负数（这是默认行为）。 space 表示应在正数上使用前导空格，在负数上使用减号。 # ：仅适用于数字参数，同时仅适用于2、8、16进制的数字。会在输出的数字前添加 0b、0o、0x前缀。 宽度 ：指定最小字段宽度。 千位分隔符 ：只能使用 _ 或 , 作为千位分隔符。 精度 ： 类型 ：该选项决定了数据应该如何呈现。 可用的字符串表示类型： Type Meaning s 字符串格式， 字符串的默认类型， 可省略 None 同 s 可用的整数表示类型： Type Meaning b 输出为 2 进制整数 c 输出为为相应的 unicode 字符 d 输出为 10 进制整数 o 输出为 8 进制整数 x 输出为 16 进制整数， 使用小写字母 X 输出为 16 进制整数， 使用大写字母 n 类似 d , 会使用当前区域设置插入适当的数字分隔符 None 同 d 可用的浮点数和小数值表示类型： Type Meaning e 指数表示法， 使用字母 e 以科学记数法打印数字， 默认进度为 6 E 类似 e , 使用字母 E f 浮点数， 默认进度为 6 F 浮点数， 同 f g 一般形式， 受 precision 选项影响 G 类似 g , 当使用指数表示法时， 使用 E 而不是 e n 和 g 相同， 会使用当前区域设置插入适当的数字分隔符 % 百分数表示 None 同 g # 填充、对齐、符号、宽度、分组选项、精度 # 填充*号、居中、正号标记、2精度 \" {0:*^+20.2f} \" . format ( 120 ) '******+120.00*******' # 填充*号、居中、正号标记、_分隔符、2精度 \"{0:*^+20_.2f}\" . format ( 12000 ) '*****+12_000.00*****' # 填充*号、居中、正号标记、,分隔符、2精度 \" {0:*^+20,.2f} \" . format ( 12000 ) '*****+12,000.00*****' # 填充*号、左对齐、正号标记、2精度 \" {0:*<+20.2f} \" . format ( - 120 ) '-120.00*************' # 填充*号、左对齐、负号标记、2精度 \" {0:*>-20.2f} \" . format ( - 120 ) '*************-120.00' 方法 逻辑方法 方法 描述 .isalnum if all characters in the string are alpha-numeric and there is at least one character .isalpha if all characters in the string are alphabetic and there is at least one character .isnumeric if all characters in the string are numeric and there is at least one character .isascii ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too . .isdecimal if all characters in the string are decimal and there is at least one character .isdigit if all characters in the string are digits and there is at least one character .isidentifier Use keyword.iskeyword() to test for reserved identifiers such as \"def\" and \"class\". .islower if all cased characters in the string are lowercase and there is at least one cased character .isupper if all cased characters in the string are uppercase and there is at least one cased character .isprintable if all of its characters are considered printable in repr() or if it is empty. .isspace if all characters in the string are whitespace and there is at least one character .istitle In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones. 方法 描述 .startswith(prefix[, start[, end]]) 如果字符串以 prefix 开头 .endswith(suffix[, start[, end]]) 如果字符串以 suffix 结尾 大小字母转换 方法 描述 .lower 返回转换为小写的字符串的副本。 .upper 返回转换为大写的字符串的副本。 .capitalize 使第一个字符字母大写，其余字符字母小写，返回副本。 .swapcase 将大写字符转换为小写，将小写字符转换为大写，返回副本。 .title 每个单词都用大写字母开头，返回副本。 拆分字符串 方法 描述 .split(sep=None, maxsplit=-1) 从左到右以 sep 分割字符串 .rsplit(sep=None, maxsplit=-1) 从右到左以 sep 分割字符串 .splitlines(keepends=False) 以回车符或换行符分割字符串 .partition(sep, /) 从左到右以第一个出现的 sep 分割字符串，返回包括3个元素的元组 \"123#456#789\" . split ( sep = \"#\" , maxsplit = 1 ) ['123', '456#789'] \"123#456#789\" . rsplit ( sep = \"#\" , maxsplit = 1 ) ['123#456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = False ) ['123', '456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = True ) ['123\\r\\n', '456\\r\\n', '789'] \"123#456#789\" . partition ( \"#\" ) ('123', '#', '456#789') 合并字符串 \"_\" . join ([ \"a\" , \"b\" , \"c\" ]) 'a_b_c' 替换字符串 方法 描述 .replace(old, new, count=-1) 返回一个副本，其中所有出现的子字符串 old 都替换为 new 。 .strip(chars=None) 返回字符串的副本，其中前导和尾随空格删除。 .lstrip(chars=None) 返回删除前导空格的字符串副本。 .rstrip(chars=None) 返回删除尾随空格的字符串副本。 .expandtabs(tabsize=8) 返回一个副本，其中所有制表符都使用 tabsize 个空格代替。 \" \\n abc \\t\\n\\r \" . strip () 'abc' \" \\n abc \\t\\n\\r \" . lstrip () 'abc\\t\\n\\r ' \" \\n abc \\t\\n\\r \" . rstrip () ' \\nabc' \" \\n abc \\t\\n\\r \" . expandtabs ( tabsize = 8 ) ' \\nabc \\n\\r ' 格式化字符串 方法 描述 .format 格式化字符串。 .format_map 格式化字符串。 .ljust(width, fillchar=' ') 返回长度为 width 的左对齐字符串。使用 fillchar 填充。 .rjust(width, fillchar=' ') 返回长度为 width 的右对齐字符串。使用 fillchar 填充。 .center(width, fillchar=' ') 返回长度为 width 的居中字符串。使用 fillchar 填充。 .zfill(width) 返回长度为 width 的字符串，若长度不够，用零从左边填充。 .format_map 与 .format 在用法上大体一致，但有一个区别： # format_map 和 format 的区别 # 如果要使用关键字 format必须这样使用 \" {name} , {sex} \" . format ( name = \"Jack\" , sex = \"male\" ) # format_map 可以用dict \" {name} , {sex} \" . format_map ({ \"name\" : \"Jack\" , \"sex\" : \"male\" }) 'Jack, male' print ( \"abc\" . ljust ( 10 , \"#\" )) print ( \"abc\" . rjust ( 10 , \"#\" )) print ( \"abc\" . center ( 10 , \"#\" )) print ( \"123\" . zfill ( 10 )) # 非数字字符串也可以 print ( \"abc\" . zfill ( 10 )) abc####### #######abc ###abc#### 0000000123 0000000abc 统计子字符串出现次数 \"abcAbc\" . count ( \"c\" , 0 , 6 ) 2 查找子字符串第一次出现的位置 .index 与 .find 的功能是一样的，只不过 .index 方法若找不到子字符串会抛出ValueError，而 .find 会返回 -1 。 \"abcAbc\" . index ( \"bc\" , 0 , 6 ) \"abcAbc\" . find ( \"bc\" , 0 , 6 ) 1 \"abcAbc\" . index ( \"bc\" , 0 , 2 ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-f8cead4644a3> in <module> ----> 1 \"abcAbc\".index(\"bc\", 0, 2) ValueError: substring not found \"abcAbc\" . find ( \"bc\" , 0 , 2 ) -1","text_tokens":["右","n","ab","described","由加","相同","迭代","only","单位","xe6","10","同","遵循","f8cead4644a3","\\","不会","代码","第一个","jack","结尾","character","区别","被","attribute","即","10000","省略","r","修饰","补齐","说明符","its","声明","字","转换","123456","信息","分数","range","读到","范围","partition","制表","表达式","case","而","u","cased","也就是说","格式化","$","0","call","at","join","mathbf","解码","123","对于","0xff","8","精度","e","20","百分","零","以","无法","：","中","第二","从左到右","关键字","内右","系统","characters","sprintf","next","达式","一旦","符号","该","这是","小写","事项","[","most","new","多行","%.","浮点数","两个","too","16","identifiers","存储","若干","0x","等价","如果","决定","兼容","第一行","编码方式","for","uncased","任何","调用","大体","3","括号","have","通过","sex","编成","有效","对应","那么","和","转义序列","width","标记","之一","符","值","开头","&","sign","xad","程序","存在","放置","单词","replacement","制表符","需","正常","start","效果","fill","记数","非","数值","部分","包括","may","整数","个","查找","swapcase","any","test","网络","空格","变为","内存","加上","单个","受","istitle","valueerror","world","值为","双引号","不带","abc","zfill","新","can","tabsize","实例","左","起始","字母","就是","作为","化","为何","b","module","错误","decode","not",".","empty","0000000abc","option","统计","ignore","*","减号","正则","rsplit","时","时候","嵌入","keepends","更","正负号","左边","120","默认","修改","string","单引号","小字","只","此","alpha","第一","bc","windows","用","需要","我们","大括号","代替","，","分组","说明","器","endswith","为","执行","用于","打印","isascii","一般","field","unicode","ut8","内置","前方","as","对齐","there","\"","print","反过","12000","-","位数","isalpha","其中","nabc","之后","浮点","槽","两行","0000","逻辑","所","组成","所有","it","一定","过时","+","空间","操作","宽度","关键","x87","显示","本文","可执行程序","startswith","小写字母","一样","如","后","grouping","想","有","写","零个","正则表达式","其余","count","表示法","splitlines","获取","12","此处","指数","ordinal","字符","运算","上","source","中国","圆括号","大多","回车符","文本编辑","但是","编辑","are","过来","紧接","可","加","映射","参数","按照","内容","分割","keyword","python2","小部","position","center","begin","避免","之前","多数","hi","返回","字段名","注释","20.2","a","具有","让","纯","ipython","传输","并","0o","upper","76f41cd8dafa","大写","least","编码","尾随","仅","找","关系","8s","没什么","算符","##","num","%-","但","x","各种","ones","元素","在","意味","os","traceback","互相","xbd","isidentifier","def","chars","相应","array","两种","储存","无论","}","行程","rjust","conversion","中以","应该","传入","进行","整型","ascii","invalid","这样","、","里","解释器","属性","写法","紧接在","适用","保存","次数","字节","按","不同","456","务必","原值","取模","插值","记数法","当中","reserved","语言","原始"," ","789","100.256","位置","except","128","表示","正在","08d","一个","你","127","substring","4","%","类型","的","序号","用来","每个","从右到左","方式","多","前缀","源代码","为了","报错","及其","分隔","00123456","无","replace","element","保留","原来","只能","叫做","会","由","采用","_","expandtabs","当","呈现","if","中写","numeric","成为","行为","且","称为","了","2","副本","模板","例如","意义","影响","spec","bytes","没有","meaning","cd8de1b11dcd","6","子","xff","到","不到","byte","'","文本文件","section",")","是","使用","false","基本","linux","coding","{","小于","申明","_.","字符串","最","填充","用法",":","----","%+","python3","引号","含义","values","str","arg","指定","2s","当前","printable","也","recent","因为","大多数","如何","一种","还","000.00","顺序","本身","反过来","or","lstrip","从","超出","规范","加入","什么","maxsplit","换行符","回车","isprintable","可以","considered","命名","isspace","title",",","描述","space","用带","不是","type","格式","强制","split","(","若干个","longleftrightarrow","读取","to","isdecimal","里面","digit","x96","功能","解析","usr","出现","将","反之","c语言","the","如下","一行","sep","isupper","ljust",">","f","并且","负号","抛出","或","类似","元组","xe5","map","iskeyword","old","区域","转义","and","正","则","写字","换行","数字","find","这种","（","第二行","应","号","x9b","大写字母","意味着","下","接在","多个","python","env","这","c","all","name","就是说","一小","format","utf","0000000123","方法","只是","last","控制参数","printf","不过","流","true","系列","###","名","数据","规则","one","符将","与","所以","只不过","特殊","都","要","同时","digits","isnumeric","in","follow","文件","前","思想","”","d","uppercase","文本","控制","规定","100.26","somename","于","islower","xe4","字段","对象","后字","c#","特殊字符","进度","条目","小数","precision","2f","errors","问题","英文","添加","样式","0b","encode","输入","长度","代表","isalnum","除了","is","建议","input","面值","码","“","形式","use","unicodeencodeerror","最小","/","---------------------------------------------------------------------------","大体一致","michael","007f","可能","）","；","小","一次","乱码","具体","8d","科学","合并","表达","选","you","i","注意事项","解释","class","t","此时","字典","integer","应仅","abcabc","使","前导","删除","其","strip","capitalize","创建","14","替换","已","found","输出","给出","o","忽略","负数","点数","xb8","插入","不能","否则","磁盘","decimal","lower","不","prefix","]","<","告诉","bin","释器","进制","它","内部","不足","alphabetic","通常","分隔符","常用","修饰符","适当","120.00","000000120","二行","把","s","键","suffix","######","such","end","|","male","index","=","必须","默认值","一致","选项","包含","索引","dict","就","对","10000.58","whitespace","或者","align","内","unicodedecodeerror","可用","points","。","序列","大小","第一次","一系","设置","不够","#######","自动","逗号","lowercase","^","二进制","中文","允许","依次","拆分","正数","段","repr","正负","由于","百分数","注意","无效","1","这个","只有","code","一小部分","运算符","#","g","标志","指","of","确保","none","isdigit","千位","fillchar","一系列","codec","以下","hello","rstrip","表明","identifier","开始","若","!","居中"],"title":"2.4.String","title_tokens":["string","2.4","."]},{"location":"Python基础/2.4.String.html#_1","text":"str_1 = \"\"\" 这是一个多行字符串 这是第二行 \"\"\" print ( str_1 ) str_2 = \" \\n 这是一个多行字符串 \\n 这是第二行 \\n \" print ( str_2 ) str_1 == str_2 这是一个多行字符串 这是第二行 这是一个多行字符串 这是第二行 True","text_tokens":["一个","n","\"","字符","print",")","第二","\\","(","第二行","字符串","_","1","这是","多行","str","二行","2"," ","true","="],"title":"多行字符串","title_tokens":["多行","字符串","字符"]},{"location":"Python基础/2.4.String.html#_2","text":"如果要在字符串里面输入特殊字符，需要使用转义符\\，例如输入转义符本身： str_3 = \"12 \\\\ 14\" print ( str_3 ) 12\\14","text_tokens":["12","在","\"","如果","字符","print","转义","14",")","3","使用","特殊","要","：","\\","(","里面","字符串","符","_","需要","，","特殊字符","str","例如"," ","本身","=","输入"],"title":"转义","title_tokens":["转义"]},{"location":"Python基础/2.4.String.html#_3","text":"在Python中，字符串可以添加前缀 r\\R 、 b 、 u\\U 、 f 。 r\\R ：表示非转义的原始字符串，常用于正则表达式。 b ：Python3里默认的str是(Python2里的)unicode，bytes是(Python2)的str， b前缀代表的就是bytes。Python2里, b前缀没什么具体意义，只是为了兼容Python3的这种写法 。 u\\U ：表示unicode字符串，代表是对字符串进行unicode编码。 一般英文字符在使用各种编码下, 基本都可以正常解析, 所以一般不带u；但是中文, 必须表明所需编码, 否则一旦编码转换就会出现乱码。建议所有编码方式采用UTF-8。 f ：表示 f 格式字符串。","text_tokens":["的","所以","方式","都","前缀","为了","\\","默认","r","会","采用","于","转换","，","表达式","u","一般","意义","英文","添加","unicode","bytes","代表","8","建议","-","是",")","使用","：","中","基本","所","所有","达式","一旦","字符串","；","乱码","python3","str","具体","表达","正则表达式","什么","字符","兼容","编码方式","可以",",","但是","格式","否则","(","python2","解析","出现","常用","需","正常","f","编码","非","没什么","必须","各种","在","就","对","转义","。","这种","中文","进行","不带","、","里","写法","下","就是","python","b","原始","utf","只是"," ","表明","正则","表示"],"title":"前缀","title_tokens":["前缀"]},{"location":"Python基础/2.4.String.html#_4","text":"Python有两种不同的字符串，一种存储文本，一种存储字节。对于文本，Python内部采用Unicode存储，而字节字符串显示原始字节序列或者ASCII。在Python3当中，文本字符串类型（使用Unicode数据存储）被命名为 str , 字节字符串类型被命名为 bytes 。但在python2中，文本字符串类型叫做 unicode ，字节字符串类型叫做 str 。也就是说： $$ \\begin{array}{} Python\\ 3\\ \\mathbf{str} &\\Longleftrightarrow Python\\ 2\\ \\mathbf{unicode} \\\\ Python\\ 3\\ \\mathbf{bytes} &\\Longleftrightarrow Python\\ 2\\ \\mathbf{str} \\end{array} $$ 所以，如果想将以unicode形式储存的字符串转换为二进制类型的字符串，需要将unicode字符串编码，反之，则需要解码。 编码：在python中，编码指的是将Unicode字符按照编码规则（如UTF-8）编成二进制序列。 在python3中实例化一个字符串 str_1 = \"中国\" # 编码 str_1 . encode () b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd' # 创建一个二进制字符串 str_2 = b ' \\xe4\\xb8\\xad\\xe5\\x9b\\xbd ' # 解码 str_2 . decode () '中国'","text_tokens":["一个","数据","规则","类型","的","所以","\\","被","文本","叫做","采用","_","xe4","需要","转换","，","为","而","2","也就是说","$","unicode","bytes","encode","mathbf","解码","对于","\"","8","'","-","是",")","形式","使用","以","：","中","{","）","字符串","显示","python3","str","如","想","有","一种","存储","如果","字符","命名","创建",",","3","中国","编成","xb8","按照","(","longleftrightarrow","python2","begin","反之","将","&","进制","内部","xad","编码","end","=","但","在","xe5","或者","xbd","则","。","序列","array","两种","储存","}","（","二进制","ascii","x9b","实例","1","字节","就是","不同","python","#","化","指","b","就是说","decode","当中",".","原始","utf"," "],"title":"字符编码","title_tokens":["字符","编码"]},{"location":"Python基础/2.4.String.html#bytes","text":"文本字符类型在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把 str 变为以字节为单位的 bytes 。 Python3对 bytes 类型的数据用带 b 前缀的单引号或双引号表示。 bytes_8 = b \"ABC\" bytes_8 b'ABC' 要注意的是：bytes字面值中只允许ASCII字符（无论源代码声明的编码为何）。任何超出127的二进制值必须使用相应的转义序列形式加入bytes字面值。 例如，可以对str（unicode类型）对象使用 encode() 方法，编码为bytes的形式（16进制表示）。 '中文' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' 要注意的是， encode 的对象不能超出指定编码的范围，例如不能对中文字符使用 .encode(\"ascii\") ，因为中文不在ascii码的范围内。 '中文' . encode ( 'ascii' ) ---------------------------------------------------------------------------UnicodeEncodeError Traceback (most recent call last)<ipython-input-1-76f41cd8dafa> in <module> ----> 1 '中文'.encode('ascii') UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) 纯英文的str可以用ASCII编码为bytes，内容是一样的，但无法显示为ASCII字符的字节，用 \\x 显示（16进制转义表示）。 'ABC' . encode ( 'ascii' ) b'ABC' '中文' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用 decode() 方法： b 'ABC' . decode ( 'ascii' ) 'ABC' b ' \\xe4\\xb8\\xad\\xe6\\x96\\x87 ' . decode ( 'utf-8' ) '中文' 如果bytes中包含无法解码的字节， decode() 方法会报错： b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' ) ---------------------------------------------------------------------------UnicodeDecodeError Traceback (most recent call last)<ipython-input-1-cd8de1b11dcd> in <module> ----> 1 b'\\xe4\\xb8\\xad\\xff'.decode('utf-8') UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte 但是，如果bytes中只有一小部分无效的字节，可以传入 errors = 'ignore' 忽略错误的字节： \"中\" . encode ( \"utf-8\" ) # 中 原来的编码 b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' , errors = 'ignore' ) '中' 在对str和bytes互相转换时，为了避免乱码问题，应该使用UTF-8编码对str和bytes进行转换。 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行： # !/usr/bin/env python3 # -*- coding: utf-8 -*- 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释。第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，在源代码中写的中文输出可能会有乱码。 但是申明了UTF-8编码只是让Python解释器按UTF-8的编码规则读取源代码，并不意味着源代码一定是使用UT8-8编码保存的，必须并且要确保文本编辑器正在使用UTF-8编码。","text_tokens":["正在","一个","时","时候","你","127","数据","规则","类型","的","所以","单位","前缀","源代码","要","xe6","报错","为了","in","\\","代码","文件","单引号","文本","原来","会","只","_","当","第一","声明","字","需要","xe4","对象","用","我们","转换","windows","中写","，","range","读到","范围","器","了","为","errors","问题","执行","例如","0","call","英文","unicode","bytes","encode","解码","ut8","cd8de1b11dcd","0xff","\"","8","xff","到","input","byte","反过","'","面值","-","码","是",")","文本文件","形式","使用","以","无法","：","中","两行","unicodeencodeerror","第二","linux","/","---------------------------------------------------------------------------","coding","系统","characters","一定","可能","申明","）","x87",":","显示","本文","这是","可执行程序","----","most","乱码","python3","引号","一样","str","指定","也","recent","有","因为","写","16","解释","若干","t","反过来","从","超出","加入","如果","ordinal","字符","第一行","可以","任何","上","3",",","输出","文本编辑","但是","编辑","用带","过来","忽略","对应","xb8","不能","磁盘","内容","按照","否则","(","若干个","读取","不","那么","和","转义序列","position","<","小部","x96","避免","告诉","usr","值","释器","进制","开头","它","bin","xad","注释","程序","通常","让","纯","一行","ipython","传输","把","二行","并",">","start","76f41cd8dafa","编码","并且","第二行","=","必须","但","x","部分","或","在","意味","包含","os","就","对","网络","转义","traceback","或者","互相","内","unicodedecodeerror","变为","。","相应","序列","内存","无论","行程","中以","（","双引号","允许","二进制","abc","ascii","中文","invalid","传入","应该","进行","解释器","can","由于","注意","无效","1","意味着","这个","保存","只有","字节","就是","按","一小部分","务必","python","#","这","env","128","为何","b","module","not","decode","错误","一小",".","确保","utf","方法","只是"," ","last","codec","ignore","流","*","!","表示"],"title":"bytes字符","title_tokens":["bytes","字符"]},{"location":"Python基础/2.4.String.html#_5","text":"","text_tokens":[],"title":"格式化","title_tokens":["格式","格式化"]},{"location":"Python基础/2.4.String.html#c-printf","text":"字符串具有一种特殊的内置操作：使用 % (取模)运算符，可以格式化字符串，此时 % 也被称为字符串的格式化运算符或插值运算符。对于format % values(其中format为一个字符串)，在format中的 % 转换标记符将被替换为零个或多个values条目。 其效果类似于在C语言中使用sprintf()。 'Hello, %s ' % 'world' # 省略括号 'Hello, world' 'Hi, %s , you have $ %d ' % ( 'Michael' , 10000.58 ) 'Hi, Michael, you have $10000' 转换标记符 包含两个或更多字符，由以下元素组成，且必须遵循此处规定的顺序： % 字符，用于标记转换符的起始。 映射键（可选），由加圆括号的字符序列组成(例如(somename))。 转换标志（可选） - 表示左对齐 + 表示转换后的内容前方加上正负号 空格 表示正数前方保留一个空格 0 表示如果转换位置位数不够时，用0填充 最小字段宽度（可选），转换后字段的最小宽度，如果不足自动用空格补齐；如果最小字段宽度值为 * ，则从元组中读取。 精度（可选），在 . 之后加精度值的形式给出。如果指定为为 * ，则从元组中读取。 长度修饰符（可选）。 转换类型。 Conversion Meaning d 格式化整数 i 格式化整数 o 8 进制 u 格式化无符号整型(已过时) x 16 进制， 小写字母 X 16 进制， 大写字母 e 浮点指数格式， 小写字母 E 浮点指数格式， 大写字母 f 浮点数 F 浮点数 g 浮点数， 如果指数小于 -4 或小于精度， 则使用小写指数格式， 否则使用小数格式 G 浮点数， 类似 g , 使用大写指数 c 单个字符， 格式化字符及其 ASCII 码 r 字符串， 使用 repr() 转换任何 Python 对象 s 字符串， 使用 str() 转换任何 Python 对象 % % 字符 # 映射键 ## 如果值是一个字典，那么必须使用映射键. 如： print ( ' %(num)d ' % { \"num\" : 10 }) 10 # 最小字段宽度 print ( ' %2s ' % 123456 ) print ( ' %8s ' % 123456 ) print ( ' %*s ' % ( 10 , 123456 )) 123456 123456 123456 # 精度 print ( ' %.2f ' % 100.256 ) print ( ' %.*f ' % ( 2 , 100.256 )) 100.26 100.26 # 转换标志 print ( ' %-8d ' % 123456 ) print ( ' %+8d ' % 123456 ) print ( ' %08d ' % 123456 ) 123456 +123456 00123456","text_tokens":["08d","一个","时","4","%","由加","的","类型","符将","更","正负号","特殊","多","10","及其","遵循","00123456","无","被","d","10000","保留","省略","修饰","r","补齐","规定","小字","100.26","由","somename","于","用","转换","对象","后字","123456","，","且","称为","条目","小数","2f","为","2","用于","u","格式化","例如","$","0","内置","前方","对齐","meaning","对于","长度","\"","8","print","精度","e","'","码","-","位数",")","是","其中","使用","形式","之后","：","中","浮点","最小","组成","{","sprintf","michael","过时","+","小于","）","字符串","操作","最","填充","宽度","符号","；","小写",":","%+","小写字母","%.","values","后","浮点数","两个","指定","str","如","2s","8d","i","也","选","零个","16","一种","顺序","此时","从","字典","此处","指数","如果","字符","可以","其","任何","已","运算","替换",",","圆括号","括号","have","给出","o","格式","可","加","映射","点数","内容","否则","(","那么","读取","标记","符","值","进制","c语言","不足","hi","具有","修饰符","s","键","效果","大写","f","8s","负号","算符","##","num","100.256","%-","必须","x","整数","或","元素","在","类似","元组","包含","10000.58","空格","则","写字","。","序列","加上","不够","单个","自动","}","conversion","world","（","值为","整型","ascii","正数","段","repr","正负","大写字母","左","起始","字母","运算符","多个","python","#","g","c","取模","插值","标志","format","语言","."," ","以下","hello","*","位置","you","表示"],"title":"C printf 样式的格式化","title_tokens":["格式","格式化"," ","样式","printf","的","c"]},{"location":"Python基础/2.4.String.html#format","text":"< 模板字符串 >. format ( < 逗号分隔的参数 > ) <模板字符串> 由一系列的槽 {} 组成，用来控制修改字符串中嵌入值出现的位置，其基本思想是将format()方法的 <逗号分隔的参数> 中的参数按照序号关系替换到 <模板字符串> 的槽中。如果大括号中没有序号，则按照出现顺序替换。该方法会创建新字符串对象，不会修改原值。 {}中指定顺序，按指定的顺序替换 print ( \" {2} : {1} : {0} \" . format ( \"1\" , \"2\" , \"3\" )) 3 : 2 : 1 没有指定顺序，按出现的顺序依次替换 print ( \" {} : {} : {} \" . format ( \"1\" , \"2\" , \"3\" )) 1 : 2 : 3 format()方法中 <模板字符串> 的槽除了包括参数序号，还可以包括格式控制信息。此时，槽的内部样式如下： 替换字段 - replacement_field ::= \"{\" [ field_name ] [ \"!\" conversion ] [ \":\" format_spec ] \"}\" 字段名 - field_name ::= arg_name ( \".\" attribute_name | \"[\" element_index \"]\" ) * 参数名 - arg_name ::= [ identifier | integer ] 属性名 - attribute_name ::= identifier 元素索引 - element_index ::= integer | index_string 索引字符串 - index_string ::= < any source character except \"]\" > + 转换字段 - conversion ::= \"r\" | \"s\" 格式规范说明符 - format_spec ::= < described in the next section > 注意事项： 参数名 可以为 整数 或 关键字 。整数为位置参数， 关键字为命名关键字参数。 如果整数类似于 {0}{1}{2}, 则可以省略， 即： {}{}{} 等价于 {0}{1}{2}。 如果参数存在属性， 可以通过 arg_name.attribute_name 的形式获取属性值。 如果参数为可迭代对象， 可以通过 arg_name[integer|index_string] 的形式获取索引位置的元素。 转换字段 由 ! 开始， r 代表调用 repr(), s 代表调用 str(). 格式规范说明符 由 : 开始。 其中， <格式控制标记> 用来控制参数显示时的格式，可以使用的参数如下： format_spec ::= [ [fill ] align ] [ sign ][ # ][ 0 ][ width ][ grouping_option ][ .precision ][ type ] fill ::= < any character > align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit + grouping_option ::= \"_\" | \",\" precision ::= digit + type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" 填充字符 ：如果指定了对齐选项，则可以使用填充字符。默认为空格. 对齐选项 ：默认右对齐，各种对齐选项的含义如下： 选项 意义 '<' 强制字段在可用空间内左对齐（这是大多数对象的默认值）。 '>' 强制字段在可用空间内右对齐（这是数字的默认值）。 '=' 强制将填充放置在符号（如果有）之后但在数字之前。这用于以“+000000120”形式打印字段。此对齐选项仅对数字类型有效。当'0'紧接在字段宽度之前时，它成为默认值。 '^' 强制字段在可用空间内居中。 sign ：仅对数字类型有效，可以是以下之一： 选项 意义 '+' 表示标志应该用于正数和负数。 '-' 表示标志应仅用于负数（这是默认行为）。 space 表示应在正数上使用前导空格，在负数上使用减号。 # ：仅适用于数字参数，同时仅适用于2、8、16进制的数字。会在输出的数字前添加 0b、0o、0x前缀。 宽度 ：指定最小字段宽度。 千位分隔符 ：只能使用 _ 或 , 作为千位分隔符。 精度 ： 类型 ：该选项决定了数据应该如何呈现。 可用的字符串表示类型： Type Meaning s 字符串格式， 字符串的默认类型， 可省略 None 同 s 可用的整数表示类型： Type Meaning b 输出为 2 进制整数 c 输出为为相应的 unicode 字符 d 输出为 10 进制整数 o 输出为 8 进制整数 x 输出为 16 进制整数， 使用小写字母 X 输出为 16 进制整数， 使用大写字母 n 类似 d , 会使用当前区域设置插入适当的数字分隔符 None 同 d 可用的浮点数和小数值表示类型： Type Meaning e 指数表示法， 使用字母 e 以科学记数法打印数字， 默认进度为 6 E 类似 e , 使用字母 E f 浮点数， 默认进度为 6 F 浮点数， 同 f g 一般形式， 受 precision 选项影响 G 类似 g , 当使用指数表示法时， 使用 E 而不是 e n 和 g 相同， 会使用当前区域设置插入适当的数字分隔符 % 百分数表示 None 同 g # 填充、对齐、符号、宽度、分组选项、精度 # 填充*号、居中、正号标记、2精度 \" {0:*^+20.2f} \" . format ( 120 ) '******+120.00*******' # 填充*号、居中、正号标记、_分隔符、2精度 \"{0:*^+20_.2f}\" . format ( 12000 ) '*****+12_000.00*****' # 填充*号、居中、正号标记、,分隔符、2精度 \" {0:*^+20,.2f} \" . format ( 12000 ) '*****+12,000.00*****' # 填充*号、左对齐、正号标记、2精度 \" {0:*<+20.2f} \" . format ( - 120 ) '-120.00*************' # 填充*号、左对齐、负号标记、2精度 \" {0:*>-20.2f} \" . format ( - 120 ) '*************-120.00'","text_tokens":["右","n","described","相同","迭代","10","同","不会","character","attribute","即","省略","r","说明符","字","转换","信息","分数","而","0","8","精度","e","20","百分","以","：","中","关键字","内右","next","该","符号","这是","小写","事项","[","浮点数","16","0x","等价","如果","决定","调用","3","括号","通过","有效","和","width","标记","之一","值","sign","存在","放置","replacement","fill","记数","数值","包括","整数","any","空格","受","新","左","字母","作为","b",".","option","*","减号","嵌入","时","120","默认","修改","string","小字","此","大括号","，","分组","说明","为","打印","用于","field","一般","unicode","对齐","\"","print","12000","-","其中","之后","槽","浮点","组成","+","空间","关键","宽度","显示","小写字母","grouping","有","表示法","获取","指数","12","字符","source","大多","上","紧接","可","参数","按照","之前","多数","字段名","20.2","0o","大写","仅","关系","但","x","各种","元素","在","相应","}","conversion","应该","、","属性","紧接在","适用","按","原值","记数法"," ","位置","except","表示","序号","%","的","类型","用来","前缀","分隔","element","只能","会","由","_","当","呈现","成为","行为","了","2","模板","意义","影响","spec","没有","meaning","6","到","'","section",")","是","使用","基本","{","_.","字符串","最","填充",":","含义","arg","str","指定","当前","大多数","如何","还","000.00","顺序","规范","可以","命名",",","space","不是","type","格式","强制","(","digit","出现","将","the","如下",">","f","负号","或","类似","区域","正","则","写字","数字","（","应","号","大写字母","接在","这","c","name","format","方法","控制参数","系列","名","数据","同时","in","前","思想","”","d","控制","于","字段","对象","进度","precision","2f","样式","添加","0b","代表","除了","“","形式","）","小","科学","注意事项","此时","integer","应仅","前导","其","创建","替换","输出","o","负数","插入","点数","]","<","进制","它","内部","分隔符","适当","120.00","000000120","s","|","index","=","默认值","选项","索引","对","align","内","可用","。","一系","设置","逗号","^","依次","段","正数","repr","百分数","注意","1","#","g","标志","none","千位","一系列","以下","identifier","开始","!","居中"],"title":"format方法","title_tokens":["方法","format"]},{"location":"Python基础/2.4.String.html#_6","text":"","text_tokens":[],"title":"方法","title_tokens":["方法"]},{"location":"Python基础/2.4.String.html#_7","text":"方法 描述 .isalnum if all characters in the string are alpha-numeric and there is at least one character .isalpha if all characters in the string are alphabetic and there is at least one character .isnumeric if all characters in the string are numeric and there is at least one character .isascii ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too . .isdecimal if all characters in the string are decimal and there is at least one character .isdigit if all characters in the string are digits and there is at least one character .isidentifier Use keyword.iskeyword() to test for reserved identifiers such as \"def\" and \"class\". .islower if all cased characters in the string are lowercase and there is at least one cased character .isupper if all cased characters in the string are uppercase and there is at least one cased character .isprintable if all of its characters are considered printable in repr() or if it is empty. .isspace if all characters in the string are whitespace and there is at least one character .istitle In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones. 方法 描述 .startswith(prefix[, start[, end]]) 如果字符串以 prefix 开头 .endswith(suffix[, start[, end]]) 如果字符串以 suffix 结尾","text_tokens":["one","only","digits","isnumeric","in","follow","结尾","character","string","uppercase","alpha","islower","its","if","numeric","range","case","endswith","u","isascii","cased","at","as","there","isalnum","\"","is","-",")","isalpha","以","0000","use","it","characters","007f","+","字符串","startswith","[","printable","too","identifiers","class","or","如果","字符","isprintable","for","considered","uncased","isspace","title","描述",",","have","are","decimal","(","to","prefix","keyword","isdecimal","]","开头","the","alphabetic","a","isupper","suffix","upper","start","such","least","end","may","ones","iskeyword","test","and","whitespace","isidentifier","def","points","istitle","lowercase","ascii","repr","code","all","of","isdigit","reserved",".","empty","方法"," "],"title":"逻辑方法","title_tokens":["方法","逻辑"]},{"location":"Python基础/2.4.String.html#_8","text":"方法 描述 .lower 返回转换为小写的字符串的副本。 .upper 返回转换为大写的字符串的副本。 .capitalize 使第一个字符字母大写，其余字符字母小写，返回副本。 .swapcase 将大写字符转换为小写，将小写字符转换为大写，返回副本。 .title 每个单词都用大写字母开头，返回副本。","text_tokens":["一个","swapcase","字符","使","的","capitalize","每个","title","描述","写字","。","都","lower","第一个","字符串","大写字母","小写","将","开头","第一","返回","字母","用","转换","，","单词",".","为","副本","upper","方法","大写"," ","其余"],"title":"大小字母转换","title_tokens":["转换","字母","大小"]},{"location":"Python基础/2.4.String.html#_9","text":"方法 描述 .split(sep=None, maxsplit=-1) 从左到右以 sep 分割字符串 .rsplit(sep=None, maxsplit=-1) 从右到左以 sep 分割字符串 .splitlines(keepends=False) 以回车符或换行符分割字符串 .partition(sep, /) 从左到右以第一个出现的 sep 分割字符串，返回包括3个元素的元组 \"123#456#789\" . split ( sep = \"#\" , maxsplit = 1 ) ['123', '456#789'] \"123#456#789\" . rsplit ( sep = \"#\" , maxsplit = 1 ) ['123#456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = False ) ['123', '456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = True ) ['123\\r\\n', '456\\r\\n', '789'] \"123#456#789\" . partition ( \"#\" ) ('123', '#', '456#789')","text_tokens":["或","元素","一个","元组","\"","n","maxsplit","换行符","字符","回车","keepends","的","从右到左","-","'",")",",","描述","回车符","换行","3","以","false","\\","从左到右","split","第一个","/","(","分割","]","r","字符串","1","出现","第一","返回","[","456","#","，","sep","none","partition",".","方法"," ","123","789","true","包括","=","rsplit","个","splitlines"],"title":"拆分字符串","title_tokens":["字符串","字符","拆分"]},{"location":"Python基础/2.4.String.html#_10","text":"\"_\" . join ([ \"a\" , \"b\" , \"c\" ]) 'a_b_c'","text_tokens":["b","\"",".","_"," ","join","[","'","(",")","a",",","]","c"],"title":"合并字符串","title_tokens":["合并","字符","字符串"]},{"location":"Python基础/2.4.String.html#_11","text":"方法 描述 .replace(old, new, count=-1) 返回一个副本，其中所有出现的子字符串 old 都替换为 new 。 .strip(chars=None) 返回字符串的副本，其中前导和尾随空格删除。 .lstrip(chars=None) 返回删除前导空格的字符串副本。 .rstrip(chars=None) 返回删除尾随空格的字符串副本。 .expandtabs(tabsize=8) 返回一个副本，其中所有制表符都使用 tabsize 个空格代替。 \" \\n abc \\t\\n\\r \" . strip () 'abc' \" \\n abc \\t\\n\\r \" . lstrip () 'abc\\t\\n\\r ' \" \\n abc \\t\\n\\r \" . rstrip () ' \\nabc' \" \\n abc \\t\\n\\r \" . expandtabs ( tabsize = 8 ) ' \\nabc \\n\\r '","text_tokens":["一个","子","\"","n","8","old","字符","前导","删除","strip","的","'","-","替换",")",",","描述","其中","。","chars","都","空格","使用","nabc","\\","所有","replace","(","和","abc","r","字符串","tabsize","1","出现","expandtabs","返回","new","代替","，","none","制表","制表符",".","副本","为","方法"," ","尾随","rstrip","count","t","=","lstrip","个"],"title":"替换字符串","title_tokens":["字符串","字符","替换"]},{"location":"Python基础/2.4.String.html#_12","text":"方法 描述 .format 格式化字符串。 .format_map 格式化字符串。 .ljust(width, fillchar=' ') 返回长度为 width 的左对齐字符串。使用 fillchar 填充。 .rjust(width, fillchar=' ') 返回长度为 width 的右对齐字符串。使用 fillchar 填充。 .center(width, fillchar=' ') 返回长度为 width 的居中字符串。使用 fillchar 填充。 .zfill(width) 返回长度为 width 的字符串，若长度不够，用零从左边填充。 .format_map 与 .format 在用法上大体一致，但有一个区别： # format_map 和 format 的区别 # 如果要使用关键字 format必须这样使用 \" {name} , {sex} \" . format ( name = \"Jack\" , sex = \"male\" ) # format_map 可以用dict \" {name} , {sex} \" . format_map ({ \"name\" : \"Jack\" , \"sex\" : \"male\" }) 'Jack, male' print ( \"abc\" . ljust ( 10 , \"#\" )) print ( \"abc\" . rjust ( 10 , \"#\" )) print ( \"abc\" . center ( 10 , \"#\" )) print ( \"123\" . zfill ( 10 )) # 非数字字符串也可以 print ( \"abc\" . zfill ( 10 )) abc####### #######abc ###abc#### 0000000123 0000000abc","text_tokens":["右","一个","ab","的","与","左边","10","要","jack","区别","_","用","，","c#","为","格式化","123","对齐","长度","\"","print","'",")","使用","零","：","关键字","大体一致","{","字符串","关键","填充","用法",":","也","有","从","如果","字符","可以","上","大体",",","描述","格式","sex","(","和","width","center","返回","ljust","######","非","male","=","必须","但","一致","在","map","dict","。","数字","不够","#######","}","rjust","zfill","abc","这样","左","#","name",".","format","fillchar","0000000123","方法","0000000abc"," ","若","###","居中"],"title":"格式化字符串","title_tokens":["格式","字符串","字符","格式化"]},{"location":"Python基础/2.4.String.html#_13","text":"\"abcAbc\" . count ( \"c\" , 0 , 6 ) 2","text_tokens":["6","\"",".","abcabc","2"," ","0","count","(",")",",","c"],"title":"统计子字符串出现次数","title_tokens":["字符串","子","出现","字符","次数","统计"]},{"location":"Python基础/2.4.String.html#_14","text":".index 与 .find 的功能是一样的，只不过 .index 方法若找不到子字符串会抛出ValueError，而 .find 会返回 -1 。 \"abcAbc\" . index ( \"bc\" , 0 , 6 ) \"abcAbc\" . find ( \"bc\" , 0 , 6 ) 1 \"abcAbc\" . index ( \"bc\" , 0 , 2 ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-f8cead4644a3> in <module> ----> 1 \"abcAbc\".index(\"bc\", 0, 2) ValueError: substring not found \"abcAbc\" . find ( \"bc\" , 0 , 2 ) -1","text_tokens":["6","子","\"","abcabc","字符","不到","substring","traceback","input","的","与","-","只不过","是",",","。",")","found","find","f8cead4644a3","in","valueerror","---------------------------------------------------------------------------","(","<","会","功能","字符串","1",":","bc","返回","----","most","，","一样","若","ipython","module","not",">",".","而","2","recent","方法","找"," ","last","0","call","不过","index","抛出"],"title":"查找子字符串第一次出现的位置","title_tokens":["字符串","查找","子","出现","字符","第一","一次","的","第一次","位置"]},{"location":"Python基础/2.5.Tuple.html","text":"tuple是一种一维的，定长的、不可变的Python对象序列，元素写在小括号 () 里，元素之间用逗号隔开，元组中的元素类型可以不相同。 不可变的tuple有什么意义？ 因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。 Tuple的陷阱——1个元素的Tuple 定义个一个Tuple，需要传入一个iterable对象。 tuple ( \"123\" ) ('1', '2', '3') 如果需要定义一个空的Tuple，则可以这样定义： # 通过tuple类来定义 a = tuple () type ( a ) # 或者用 () 定义 a = () type ( a ) # 是的，通过()可以定义一个空tuple tuple 但是如果要定义一个只有一个元素的tuple，就得要注意了。如果我们这样定义，则是错误的： b = ( \"123\" ) type ( b ) str 定义只有一个元素的tuple，需要这样定义： b = ( \"123\" ,) type ( b ) tuple 或者这样定义： b = tuple ([ \"123\" ]) type ( b ) tuple 为什么会这样呢？因为 () 在python中可以表示运算符的 () ，也可以表示Tuple。这就不可避免地产生了歧义，为了消除歧义，Python规定括号里面只有一个元素时，按运算符的 () 进行解析。 Tuple的陷阱——“可变的”Tuple 前面说过，Tuple是一种不可变的对象。但是有时我们又会发现Tuple是“可变的”。 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"原始的Tuple：\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"修改后的Tuple：\" , c ) 原始的Tuple： ('a', 'b', ['A', 'B']) 修改后的Tuple： ('a', 'b', ['X', 'Y']) 前面说过tuple一旦定义后就不可变，那上面的c怎么就改变了呢？其实，c的元素并没有改变，改变的只是list中的元素，tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素的指向永远不变。即指向 a ，就不能改成指向 b ，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！ 所以要创建一个内容也不变的tuple，那就必须保证tuple的每一个元素本身也不能变。 Tuple的方法 因为Tuple是一个不可变的列表，没有用于修改列表的方法，所以Tuple对象的方法很少。 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) [ method for method in dir ( d ) if not method . startswith ( \"_\" )] ['count', 'index'] 统计元素出现的次数 d . count ( 4 ) 2 元素第一次出现时对应的索引值 d . index ( 4 ) 4","text_tokens":["一个","时","！","4","不可","陷阱","类型","的","每个","相同","所以","更","歧义","要","为了","很少","in","代码","为什么","dir","修改","”","即","d","规定","会","虽然","一维","_","之间","tuple","第一","if","iterable","用","需要","我们","对象","代替","不变","，","列表","怎么","其实","了","不可避免","2","用于","意义","得","发现","0","没有","123","\"","—","print","'","“","前面","是",")","可变","：","中","每","说","可能","一旦","上面","改成","startswith","[","一次","比如","str","后","也","有","因为","写","其他","定长","一种","count","本身","？","能用","呢","消除","有时","什么","如果","那","小括号","可以","for","method","创建","定义","运算","永远",",","3","括号","但是","通过","一","type","隔开","对应","不能","内容","(","不","]","里面","避免","解析","值","出现","它","类来","a","空","所谓","安全","并","算符","index","=","但","list","个","x","必须","元素","在","元组","包含","索引","就","指向","或者","地","则","第一次","y","序列","。","逗号","变","进行","传入","这样","、","里","改变","别的","又","注意","1","这个","次数","只有","按","保证","运算符","python","#","这","c","尽量","b","错误","not","产生","过","原始",".","方法","只是"," ","统计","开始","表示"],"title":"2.5.Tuple","title_tokens":["tuple",".","2.5"]},{"location":"Python基础/2.5.Tuple.html#tuple1tuple","text":"定义个一个Tuple，需要传入一个iterable对象。 tuple ( \"123\" ) ('1', '2', '3') 如果需要定义一个空的Tuple，则可以这样定义： # 通过tuple类来定义 a = tuple () type ( a ) # 或者用 () 定义 a = () type ( a ) # 是的，通过()可以定义一个空tuple tuple 但是如果要定义一个只有一个元素的tuple，就得要注意了。如果我们这样定义，则是错误的： b = ( \"123\" ) type ( b ) str 定义只有一个元素的tuple，需要这样定义： b = ( \"123\" ,) type ( b ) tuple 或者这样定义： b = tuple ([ \"123\" ]) type ( b ) tuple 为什么会这样呢？因为 () 在python中可以表示运算符的 () ，也可以表示Tuple。这就不可避免地产生了歧义，为了消除歧义，Python规定括号里面只有一个元素时，按运算符的 () 进行解析。","text_tokens":["一个","时","不可","的","歧义","要","为了","为什么","规定","会","tuple","iterable","用","需要","我们","对象","，","了","不可避免","2","得","123","\"","'",")","是","：","中","[","str","也","因为","？","呢","消除","如果","什么","可以","定义","运算",",","3","括号","但是","通过","type","(","]","里面","避免","解析","类来","a","空","算符","=","个","元素","在","就","或者","地","则","。","进行","传入","这样","注意","1","只有","按","运算符","python","#","这","b","错误","产生"," ","表示"],"title":"Tuple的陷阱——1个元素的Tuple","title_tokens":["元素","1","tuple","—","陷阱","的","个"]},{"location":"Python基础/2.5.Tuple.html#tupletuple","text":"前面说过，Tuple是一种不可变的对象。但是有时我们又会发现Tuple是“可变的”。 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"原始的Tuple：\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"修改后的Tuple：\" , c ) 原始的Tuple： ('a', 'b', ['A', 'B']) 修改后的Tuple： ('a', 'b', ['X', 'Y']) 前面说过tuple一旦定义后就不可变，那上面的c怎么就改变了呢？其实，c的元素并没有改变，改变的只是list中的元素，tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素的指向永远不变。即指向 a ，就不能改成指向 b ，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！ 所以要创建一个内容也不变的tuple，那就必须保证tuple的每一个元素本身也不能变。","text_tokens":["一个","！","不可","的","每个","所以","要","修改","”","即","会","tuple","我们","对象","不变","，","怎么","其实","了","2","0","发现","没有","\"","print","'","前面","“","是",")","可变","：","中","每","说","一旦","上面","改成","[","后","也","其他","一种","本身","？","呢","有时","那","创建","定义","永远",",","但是","一","不能","内容","(","]","a","所谓","并","=","但","list","x","必须","元素","就","指向","y","。","变","改变","别的","又","1","这个","保证","c","b","过","原始","只是"," ","开始"],"title":"Tuple的陷阱——“可变的”Tuple","title_tokens":["tuple","—","陷阱","的","“","”","可变"]},{"location":"Python基础/2.5.Tuple.html#tuple","text":"因为Tuple是一个不可变的列表，没有用于修改列表的方法，所以Tuple对象的方法很少。 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) [ method for method in dir ( d ) if not method . startswith ( \"_\" )] ['count', 'index']","text_tokens":["一个","\"","4","不可","for","的","method","'","所以","是",",","。","3",")","很少","in","dir","修改","变","(","d","]","1","_","tuple","startswith","if","[","对象","，","列表","not","2",".","用于","因为","方法"," ","0","count","没有","index","="],"title":"Tuple的方法","title_tokens":["的","方法","tuple"]},{"location":"Python基础/2.5.Tuple.html#_1","text":"d . count ( 4 ) 2","text_tokens":[".","2"," ","4","(","count","d",")"],"title":"统计元素出现的次数","title_tokens":["元素","出现","次数","统计","的"]},{"location":"Python基础/2.5.Tuple.html#_2","text":"d . index ( 4 ) 4","text_tokens":["."," ","4","(","d",")","index"],"title":"元素第一次出现时对应的索引值","title_tokens":["元素","时","索引","出现","值","第一","对应","一次","的","第一次"]},{"location":"Python基础/2.6.Dict.html","text":"映射（mapping）是通过名称来访问其各个值的数据结构。字典是Python中唯一的内置映射类型，其中的值不按顺序排列，而是存储在键下。键可能是数、字符串或元组。 创建dict 字典以类似于下面的方式表示： phonebook = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } 字典由键及其相应的值组成，这种键--值对称为项（item）。每个键与其值之间都用冒号 : 分隔，item之间用逗号分隔，而整个字典放在花括号内。空字典（没有任何项）用两个花括号 {} 表示。 注意 在字典（以及其他映射类型）中，键必须是独一无二的，而字典中的值无需如此。 可使用dict类从其他映射（如其他字典）或键–值对序列创建字典。 items = [( 'name' , 'Gumby' ), ( 'age' , 42 )] dict ( items ) {'name': 'Gumby', 'age': 42} 还可使用关键参数，如下所示： dict ( name = 'Gumby' , age = 42 ) {'name': 'Gumby', 'age': 42} Dict的方法 字典的基本行为在很多方面都类似于序列。 len(d)返回字典d包含的项（键--值对）数。 d[k]返回与键k相关联的值。 d[k] = v将值v关联到键k。 del d[k]删除键为k的项。 k in d检查字典d是否包含键为k的项。 虽然字典和列表有多个相同之处，但也有一些重要的不同之处。 自动添加。 dict可以给不存在的项赋值，即是字典中原本没有的键，也可以给它赋值。而如果不使用append或其他类似的方法，就不能给列表中没有的元素赋值。 成员资格。 表达式k in d (其中d是一个字典）査找的是键而不是值；而表达式v in 1 (其中1是一个列表）查找的是值而不是索引。这看似不太一致，但你习惯后就会觉得相当自然。毕竟如果字典包含指定的键，检查相应的值就很容易。 clear 删除所有的字典项 要注意的是，clear是清除了一个字典对象，而不是解除了名称与字典对象的绑定。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a a . clear () # 可以看到，a、b都变成了字典 print ( \"a的值:\" , a ) print ( \"b的值:\" , a ) a的值: {} b的值: {} copy 浅拷贝 a = { \"a\" : 1 , \"b\" : 2 , \"c\" :[ 1 , 2 ]} b = a . copy () b [ \"c\" ][ 0 ] = 10 print ( \"a的值:\" , a ) print ( \"b的值:\" , a ) a的值: {'a': 1, 'b': 2, 'c': [10, 2]} b的值: {'a': 1, 'b': 2, 'c': [10, 2]} fromkeys dict . fromkeys ( key , value ) 方法 fromkeys 创建一个新字典，其中包含指定的键，且每个键对应的值都是None，也可以指定值， dict . fromkeys ([ \"a\" , \"b\" ]) {'a': None, 'b': None} dict . fromkeys ([ \"a\" , \"b\" ], 10 ) {'a': 10, 'b': 10} get 方法 get 为访问字典项提供了宽松的环境。通常，如果你试图访问字典中没有的项，将引发错误。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a [ \"d\" ] ---------------------------------------------------------------------------KeyError Traceback (most recent call last)<ipython-input-1-b0ca58477f0c> in <module> 1 a = {\"a\":1,\"b\": 2,\"c\":3} ----> 2 a[\"d\"] KeyError: 'd' 而使用 get 不会这样 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . get ( \"d\" ) # 默认返回None，也可以指定返回值 a . get ( \"d\" , \"N/A\" ) 'N/A' items 方法 items 返回一个包含所有字典项的列表，其中每个元素都为 (key, value) 的形式。字典项在列表中的排列顺序不确定。返回值属于一种名为字典视图的特殊类型。字典视图可用于迭代。另外，你还可确定其长度以及对其执行成员资格检查。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . items () dict_items([('a', 1), ('b', 2), ('c', 3)]) # dict_items类型 type ( a . items ()) dict_items # 迭代 for i in a . items (): print ( i ) ('a', 1) ('b', 2) ('c', 3) # 迭代 for key , value in a . items (): print ( key , end = \" \" ) print ( value ) a 1 b 2 c 3 # 检查成员资格 ( \"a\" , 1 ) in a . items () True keys 和 values 方法 keys 返回一个字典视图，其中包含字典中的键。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . keys () dict_keys(['a', 'b', 'c']) 方法 values 返回一个字典视图，其中包含字典中的键。 a . values () dict_values([1, 2, 3]) pop 方法pop可用于获取与指定键相关联的值，并将该键-值对从字典中删除。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a . pop ( \"a\" ) print ( \"b的值\" , b ) print ( \"a的值\" , a ) b的值 1 a的值 {'b': 2, 'c': 3} popitem 方法 popitem 类似于 list.pop ，但 list.pop 弹出列表中的最后一个元素，而 popitem 随机地弹出一个字典项，因为字典项的顺序是不确定的，没有“最后一个元素”的概念。如果你要以高效地方式 逐个 删除并处理所有字典项，这可能很有用，因为这样无需先获取键列表。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . popitem () ('c', 3) a {'a': 1, 'b': 2} setdefault 方法 setdefault 有点像get，因为它也获取与指定键相关联的值，但除此之外，setdefault还在字典不包含指定的键时，在字典中添加指定的键-值对。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . setdefault ( \"a\" ) a a . setdefault ( \"d\" ) a {'a': 1, 'b': 2, 'c': 3, 'd': None} 如你所见，指定的键不存在时，setdefault返回指定的值并相应地更新字典。如果指定的键存在，就返回其值，并保持字典不变。与 get 一样，值是可选的，如果没有指定，默认为None。 update 方法update使用一个字典中的项来更新另一个字典。对于通过参数提供的字典，将其项添加到当前字典中。如果当前字典包含键相同的项，就替换它。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . update ({ \"d\" : 4 }) a {'a': 1, 'b': 2, 'c': 3, 'd': 4} 可像调用本章前面讨论的函数dict（类型构造函数）那样调用方法update。这意味着调用update时，可向它提供一个映射、一个由键-值对组成的序列（或其他可迭代对象）或关键字参数。 a . update ( zip ([ \"e\" , \"f\" ],[ 5 , 6 ])) a {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}","text_tokens":["n","类","排列","相同","copy","迭代","10","9102","不会","解除","即","下面","mapping","很多","冒号","可像","表达式","而","相当","0","call","处理","2341","对于","该键","数","–","e","以","：","中","毕竟","之处","关键字","唯一","达式","5","访问","[","most","两个","len","很","beth","存储","如果","for","任何","调用","3","括号","通过","对应","独一无二","和","随机","值","提供","而是","不太","存在","以及","逐个","list","查找","gumby","出","概念","setdefault","看似","新","那样","保持","b","module","错误","items","原本",".","项","时","keys","觉得","所见","默认","pop","可选","用","，","赋值","更新","为","执行","用于","内置","\"","关联","print","cecil","-","其中","与键","组成","所有","拷贝","关键","结构","变成","一样","b0ca58477f0c","如","后","成员","有","检查","无需","获取","字符","或键","方面","可","映射","参数","函数","可向","引发","返回","a","ipython","并","zip","找","名为","但","元素","在","意味","traceback","将值","地","相应","}","容易","这样","、","高效","按","不同","与其","有点"," ","重要","phonebook","表示","一个","你","4","类型","的","每个","方式","分隔","及其","会","项来","_","不变","行为","且","称为","了","2","地弹","没有","6","到","'","是",")","使用","基本","fromkeys","来","相关联","{","del","属于","字符串",":","所示","----","values","指定","名称","当前","一些","也","recent","因为","其他","还","v","一种","顺序","从","各个","绑定","可以",",","不是","type","(","将","如下","42",">","f","或","类似","元组","本章","其值","key","另","这种","除此之外","k","键为","（","alice","确定","弹","意味着","下","多个","python","这","c","name","3258","方法","返回值","last","true","构造","整个","数据","资格","清除","与","特殊","都","要","in","讨论","”","d","构造函数","虽然","之间","于","之外","到键","对象","列表","相关","popitem","添加","长度","环境","给","input","“","前面","形式","/","---------------------------------------------------------------------------","另外","可能","是否","）","；","value","浅","表达","i","字典","宽松","其项","删除","--","其","创建","替换","视图","独一","不能","习惯","放在","不","]","age","<","先","数据结构","它","通常","空","如此","键","end","item","get","=","必须","最后","一致","包含","dict","由键","索引","就","对","内","。","序列","append","有点像","自动","逗号","相同之处","査","update","花","注意","1","keyerror","自然","#","none","看到","试图","不同之处","clear","顺序排列","除此","有用"],"title":"2.6.Dict","title_tokens":["2.6",".","dict"]},{"location":"Python基础/2.6.Dict.html#dict","text":"字典以类似于下面的方式表示： phonebook = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } 字典由键及其相应的值组成，这种键--值对称为项（item）。每个键与其值之间都用冒号 : 分隔，item之间用逗号分隔，而整个字典放在花括号内。空字典（没有任何项）用两个花括号 {} 表示。 注意 在字典（以及其他映射类型）中，键必须是独一无二的，而字典中的值无需如此。 可使用dict类从其他映射（如其他字典）或键–值对序列创建字典。 items = [( 'name' , 'Gumby' ), ( 'age' , 42 )] dict ( items ) {'name': 'Gumby', 'age': 42} 还可使用关键参数，如下所示： dict ( name = 'Gumby' , age = 42 ) {'name': 'Gumby', 'age': 42}","text_tokens":["整个","类","类型","的","每个","方式","都","9102","分隔","及其","下面","之间","于","用","冒号","，","称为","而","没有","2341","–","'","cecil","是",")","使用","以","：","中","组成","{","）","关键",":","所示","[","如","两个","beth","其他","还","无需","从","字典","--","任何","创建",",","或键","括号","可","独一","映射","参数","独一无二","(","放在","]","age","值","如下","空","42","以及","如此","键","item","=","必须","在","类似","dict","由键","对","gumby","内","。","相应","序列","这种","}","逗号","（","花","alice","注意","与其","name","items","3258"," ","phonebook","项","表示"],"title":"创建dict","title_tokens":["创建","dict"]},{"location":"Python基础/2.6.Dict.html#dict_1","text":"字典的基本行为在很多方面都类似于序列。 len(d)返回字典d包含的项（键--值对）数。 d[k]返回与键k相关联的值。 d[k] = v将值v关联到键k。 del d[k]删除键为k的项。 k in d检查字典d是否包含键为k的项。 虽然字典和列表有多个相同之处，但也有一些重要的不同之处。 自动添加。 dict可以给不存在的项赋值，即是字典中原本没有的键，也可以给它赋值。而如果不使用append或其他类似的方法，就不能给列表中没有的元素赋值。 成员资格。 表达式k in d (其中d是一个字典）査找的是键而不是值；而表达式v in 1 (其中1是一个列表）查找的是值而不是索引。这看似不太一致，但你习惯后就会觉得相当自然。毕竟如果字典包含指定的键，检查相应的值就很容易。","text_tokens":["一个","你","资格","的","相同","都","in","觉得","d","即","会","虽然","于","很多","到键","，","列表","行为","赋值","表达式","而","相关","相当","添加","没有","数","关联","给",")","是","与键","使用","其中","基本","中","毕竟","之处","相关联","del","是否","达式","）","；","[","后","len","指定","很","一些","也","表达","成员","有","检查","其他","v","字典","如果","删除","--","可以","方面","不是","不能","习惯","(","和","不","]","值","它","返回","不太","存在","键","找","=","但","或","元素","在","类似","查找","包含","一致","dict","索引","就","对","将值","。","序列","相应","append","自动","相同之处","査","k","键为","（","看似","容易","1","不同","多个","自然","这","原本","不同之处","方法"," ","重要","项"],"title":"Dict的方法","title_tokens":["方法","的","dict"]},{"location":"Python基础/2.6.Dict.html#clear","text":"要注意的是，clear是清除了一个字典对象，而不是解除了名称与字典对象的绑定。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a a . clear () # 可以看到，a、b都变成了字典 print ( \"a的值:\" , a ) print ( \"b的值:\" , a ) a的值: {} b的值: {}","text_tokens":["一个","\"","print","绑定","可以","的","清除","与","是",",","3","。",")","都","要","不是","}","解除","(","{","、","注意","值","1",":","对象","变成","a","#","，","c","b","名称","看到","了","2","而","."," ","clear","=","字典"],"title":"clear删除所有的字典项","title_tokens":["删除","clear","所有","的","项","字典"]},{"location":"Python基础/2.6.Dict.html#copy","text":"a = { \"a\" : 1 , \"b\" : 2 , \"c\" :[ 1 , 2 ]} b = a . copy () b [ \"c\" ][ 0 ] = 10 print ( \"a的值:\" , a ) print ( \"b的值:\" , a ) a的值: {'a': 1, 'b': 2, 'c': [10, 2]} b的值: {'a': 1, 'b': 2, 'c': [10, 2]}","text_tokens":["\"","print","的","'",")",",","copy","10","}","(","{","]","值","1",":","[","a","c","b","2","."," ","0","="],"title":"copy浅拷贝","title_tokens":["拷贝","copy","浅"]},{"location":"Python基础/2.6.Dict.html#fromkeys","text":"dict . fromkeys ( key , value ) 方法 fromkeys 创建一个新字典，其中包含指定的键，且每个键对应的值都是None，也可以指定值， dict . fromkeys ([ \"a\" , \"b\" ]) {'a': None, 'b': None} dict . fromkeys ([ \"a\" , \"b\" ], 10 ) {'a': 10, 'b': 10}","text_tokens":["一个","包含","\"","dict","可以","的","创建","key","每个",")",",","是","其中","'","都","10","fromkeys","}","对应","(","{","新","]","值",":","[","a","，","指定","value","且","none","b","键",".","也","方法"," ","字典"],"title":"fromkeys","title_tokens":["fromkeys"]},{"location":"Python基础/2.6.Dict.html#get","text":"方法 get 为访问字典项提供了宽松的环境。通常，如果你试图访问字典中没有的项，将引发错误。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a [ \"d\" ] ---------------------------------------------------------------------------KeyError Traceback (most recent call last)<ipython-input-1-b0ca58477f0c> in <module> 1 a = {\"a\":1,\"b\": 2,\"c\":3} ----> 2 a[\"d\"] KeyError: 'd' 而使用 get 不会这样 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . get ( \"d\" ) # 默认返回None，也可以指定返回值 a . get ( \"d\" , \"N/A\" ) 'N/A'","text_tokens":["n","环境","如果","你","\"","宽松","traceback","可以","input","的","'","-",")",",","3","。","使用","中","in","不会","}","默认","/","---------------------------------------------------------------------------","(","{","d","]","这样","none","<","访问","也","提供","将","引发",":","1","----","keyerror","[","most","返回","通常","a","#","，","c","b0ca58477f0c","指定","b","ipython","错误","了","module",">","为","试图","2","recent","方法","而"," ","last",".","call","返回值","没有","get","项","=","字典"],"title":"get","title_tokens":["get"]},{"location":"Python基础/2.6.Dict.html#items","text":"方法 items 返回一个包含所有字典项的列表，其中每个元素都为 (key, value) 的形式。字典项在列表中的排列顺序不确定。返回值属于一种名为字典视图的特殊类型。字典视图可用于迭代。另外，你还可确定其长度以及对其执行成员资格检查。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . items () dict_items([('a', 1), ('b', 2), ('c', 3)]) # dict_items类型 type ( a . items ()) dict_items # 迭代 for i in a . items (): print ( i ) ('a', 1) ('b', 2) ('c', 3) # 迭代 for key , value in a . items (): print ( key , end = \" \" ) print ( value ) a 1 b 2 c 3 # 检查成员资格 ( \"a\" , 1 ) in a . items () True","text_tokens":["元素","3","在","一个","长度","包含","你","\"","dict","对","print","资格","其","for","类型","的","'","key","每个",")",",","排列","其中","形式","。","都","视图","特殊","迭代","=","中","in","type","可","}","所有","i","另外","(","{","不","]","属于","确定","1",":","_","返回",".","[","a","#","，","列表","c","value","b","以及","items","为","执行","用于","成员","方法","返回值"," ","检查","2","一种","还","end","顺序","true","项","名为","字典"],"title":"items","title_tokens":["items"]},{"location":"Python基础/2.6.Dict.html#keysvalues","text":"方法 keys 返回一个字典视图，其中包含字典中的键。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . keys () dict_keys(['a', 'b', 'c']) 方法 values 返回一个字典视图，其中包含字典中的键。 a . values () dict_values([1, 2, 3])","text_tokens":["一个","包含","\"","dict","的","'","视图",")",",","3","。","其中","keys","中","}","(","{","]","1",":","_","返回","[","a","，","c","values","b","键","2",".","方法"," ","=","字典"],"title":"keys和values","title_tokens":["values","keys","和"]},{"location":"Python基础/2.6.Dict.html#pop","text":"方法pop可用于获取与指定键相关联的值，并将该键-值对从字典中删除。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a . pop ( \"a\" ) print ( \"b的值\" , b ) print ( \"a的值\" , a ) b的值 1 a的值 {'b': 2, 'c': 3}","text_tokens":["\"","该键","关联","对","print","删除","的","'","与","-",")",",","3","。","中","可","}","(","相关联","{","pop","值","1","将",":","a","，","c","指定","b","并","键","2",".","用于","相关","方法"," ","字典","=","从","获取"],"title":"pop","title_tokens":["pop"]},{"location":"Python基础/2.6.Dict.html#popitem","text":"方法 popitem 类似于 list.pop ，但 list.pop 弹出列表中的最后一个元素，而 popitem 随机地弹出一个字典项，因为字典项的顺序是不确定的，没有“最后一个元素”的概念。如果你要以高效地方式 逐个 删除并处理所有字典项，这可能很有用，因为这样无需先获取键列表。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . popitem () ('c', 3) a {'a': 1, 'b': 2}","text_tokens":["元素","类似","一个","\"","如果","你","'","删除","的","出","“","地","是","获取",",","。","3","方式",")","以","要","中","概念","}","所有","”","(","{","不","可能","这样","先","pop","弹","随机","确定",":","于","高效","1","a","，","列表","这","c","b","并","很","键",".","而","2","方法","popitem"," ","因为","逐个","处理","地弹","list","无需","顺序","没有","项","=","但","有用","最后","字典"],"title":"popitem","title_tokens":["popitem"]},{"location":"Python基础/2.6.Dict.html#setdefault","text":"方法 setdefault 有点像get，因为它也获取与指定键相关联的值，但除此之外，setdefault还在字典不包含指定的键时，在字典中添加指定的键-值对。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . setdefault ( \"a\" ) a a . setdefault ( \"d\" ) a {'a': 1, 'b': 2, 'c': 3, 'd': None} 如你所见，指定的键不存在时，setdefault返回指定的值并相应地更新字典。如果指定的键存在，就返回其值，并保持字典不变。与 get 一样，值是可选的，如果没有指定，默认为None。","text_tokens":["在","时","包含","\"","你","如果","关联","就","对","的","'","与","-",")",",","3","。","相应","地","其值","是","中","除此之外","有点像","}","所见","默认","setdefault","(","相关联","{","不","d","可选","值","1",":","它","返回","之外","保持","存在","不变","a","，","c","有点","一样","如","指定","b","none","更新","并","键","也","2","相关",".","方法","因为"," ","为","还","添加","字典","没有","get","除此","=","但","获取"],"title":"setdefault","title_tokens":["setdefault"]},{"location":"Python基础/2.6.Dict.html#update","text":"方法update使用一个字典中的项来更新另一个字典。对于通过参数提供的字典，将其项添加到当前字典中。如果当前字典包含键相同的项，就替换它。 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . update ({ \"d\" : 4 }) a {'a': 1, 'b': 2, 'c': 3, 'd': 4} 可像调用本章前面讨论的函数dict（类型构造函数）那样调用方法update。这意味着调用update时，可向它提供一个映射、一个由键-值对组成的序列（或其他可迭代对象）或关键字参数。 a . update ( zip ([ \"e\" , \"f\" ],[ 5 , 6 ])) a {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}","text_tokens":["构造","一个","时","4","类型","的","相同","迭代","讨论","d","构造函数","项来","对象","，","更新","可像","2","添加","6","对于","\"","到","e","'","前面","-",")","使用","中","关键字","组成","{","）","关键","5",":","[","当前","其他","字典","如果","其项","调用","替换",",","3","通过","可","映射","参数","(","函数","]","可向","值","提供","将","它","a","zip","键","f","=","或","意味","包含","dict","由键","就","本章","对","另","。","序列","}","update","（","、","意味着","1","那样","这","c","b",".","方法"," ","项"],"title":"update","title_tokens":["update"]},{"location":"Python基础/2.7.推导式.html","text":"import pprint 列表推导式 列表推导式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的推导式。 运用列表推导式， 可以写出非常简洁的代码 。 举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 可以用 list(range(1, 11)) ： list ( range ( 1 , 11 )) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 但如果要生成 [1x1, 2x2, 3x3, ..., 10x10] 怎么做？方法一是循环： L = [] for x in range ( 1 , 11 ): L . append ( x * x ) pprint . pprint ( L ) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 但是循环太繁琐，而列表推导式则可以用一行语句代替循环生成上面的list： [ x * x for x in range ( 1 , 11 )] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 写列表推导式时，把 要生成的元素 x * x 放到前面 ，后面跟 for 循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。 for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方： [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [4, 16, 36, 64, 100] 还可以使用两层循环，可以生成全排列： [ m + n for m in 'ABC' for n in 'XYZ' ] ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] 三层和三层以上的循环就很少用到了。 for 循环其实可以同时使用两个甚至多个变量，比如 dict 的 items() 可以同时迭代key和value： d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } for k , v in d . items (): print ( k , '=' , v ) x = A y = B z = C 因此，列表推导式也可以使用两个变量来生成list： d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } [ k + '=' + v for k , v in d . items ()] ['x=A', 'y=B', 'z=C'] 最后把一个list中所有的字符串变成小写： L = [ 'Hello' , 'World' , 'IBM' , 'Apple' ] [ s . lower () for s in L ] ['hello', 'world', 'ibm', 'apple'] 字典推导式 字典推导式和列表推导式是类似的： { key : value for key , value in enumerate ( range ( 4 ))} {0: 0, 1: 1, 2: 2, 3: 3}","text_tokens":["例子","一个","时","n","4","%","pprint","的","繁琐","用来","排列","cx","三层","迭代","筛选","强大","10","要","bx","同时","in","很少","m","3x3","代码","即","d","简洁","9","bz","if","用","我们","代替","，","列表","怎么","range","其实","了","2","而","判断","写出","0","熟悉","内置","l","6","8","ay","一是","print","语句","偶数","变量","'","前面","是",")","推导","comprehensions","使用","几次","：","中","来","所有","{","却","放到","+","字符串","5","上面","运用",":","小写","[","变成","语法","100","比如","两个","value","xyz","也","写","16","还","v","很快","循环","7","？","十分","以上","...","简单","字典","cy","如果","字符","可以","for","64","by","创建",",","3","甚至","但是","cz","跟","lower","全","(","和","]","10x10","多写","az","apple","用到","a","一行","enumerate","36","1x1","把","s","出仅","import","11","=","但","list","x","太","z","元素","因此","最后","类似","非常简单","dict","就","做","后面","key","两层","则","y","。","加上","append","这种","}","k","world","平方","abc","ibm","这样","式","2x2","非常","举个","1","多个","出来","python","ax","c","b","items",".","方法"," ","49","hello","25","生成","81","*","有用"],"title":"2.7.推导式","title_tokens":["推导","2.7",".","式"]},{"location":"Python基础/2.7.推导式.html#_1","text":"列表推导式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的推导式。 运用列表推导式， 可以写出非常简洁的代码 。 举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 可以用 list(range(1, 11)) ： list ( range ( 1 , 11 )) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 但如果要生成 [1x1, 2x2, 3x3, ..., 10x10] 怎么做？方法一是循环： L = [] for x in range ( 1 , 11 ): L . append ( x * x ) pprint . pprint ( L ) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 但是循环太繁琐，而列表推导式则可以用一行语句代替循环生成上面的list： [ x * x for x in range ( 1 , 11 )] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 写列表推导式时，把 要生成的元素 x * x 放到前面 ，后面跟 for 循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。 for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方： [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [4, 16, 36, 64, 100] 还可以使用两层循环，可以生成全排列： [ m + n for m in 'ABC' for n in 'XYZ' ] ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] 三层和三层以上的循环就很少用到了。 for 循环其实可以同时使用两个甚至多个变量，比如 dict 的 items() 可以同时迭代key和value： d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } for k , v in d . items (): print ( k , '=' , v ) x = A y = B z = C 因此，列表推导式也可以使用两个变量来生成list： d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } [ k + '=' + v for k , v in d . items ()] ['x=A', 'y=B', 'z=C'] 最后把一个list中所有的字符串变成小写： L = [ 'Hello' , 'World' , 'IBM' , 'Apple' ] [ s . lower () for s in L ] ['hello', 'world', 'ibm', 'apple']","text_tokens":["例子","一个","时","n","4","%","pprint","的","繁琐","用来","排列","cx","三层","迭代","筛选","强大","10","要","bx","同时","in","很少","m","3x3","代码","即","d","简洁","9","bz","if","用","我们","代替","，","列表","怎么","range","其实","了","2","而","判断","写出","0","熟悉","内置","l","6","8","ay","一是","print","语句","偶数","变量","'","前面","是",")","推导","comprehensions","使用","几次","：","中","来","所有","{","却","放到","+","字符串","5","上面","运用",":","小写","[","变成","语法","100","比如","两个","value","xyz","也","写","16","还","v","很快","循环","7","？","十分","以上","...","简单","cy","如果","字符","可以","for","64","by","创建",",","3","甚至","但是","cz","跟","lower","全","(","和","]","10x10","多写","az","apple","用到","a","一行","36","1x1","把","s","出仅","11","=","但","list","x","太","z","元素","因此","最后","非常简单","dict","就","做","后面","key","两层","则","y","。","加上","append","这种","}","k","world","平方","abc","ibm","这样","式","2x2","非常","举个","1","多个","出来","python","ax","c","b","items",".","方法"," ","49","hello","25","生成","81","*","有用"],"title":"列表推导式","title_tokens":["列表","推导","式"]},{"location":"Python基础/2.7.推导式.html#_2","text":"字典推导式和列表推导式是类似的： { key : value for key , value in enumerate ( range ( 4 ))} {0: 0, 1: 1, 2: 2, 3: 3}","text_tokens":["类似","4","for","的","key","是",",",")","3","推导","：","in","}","(","和","{","式","1",":","列表","enumerate","range","value","2"," ","0","字典"],"title":"字典推导式","title_tokens":["式","推导","字典"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html","text":"赋值 引用（reference） ：一个可以让程式间接存取于电脑记忆体或其他储存装置中一特定资料的值。 一般而言，引用会是资料储存于记忆体或储存装置中的实体位址 。因此，引用亦常被称为该资料的指标或位址。 Python的赋值都是传引用，即name是value的引用。 在python里面，一个变量保存的值是某个对象的引用。Python赋值语句将左侧的符号名称与右侧的值 相关联 。在Python中，我们说名称引用值，或者名称是对值的引用。 下次我们使用这个名称时，便得到与名称相关联的值。 assignment永远不会复制数据，并且多个name可以引用同一个value。 当值具有多个名称时，很容易混淆并将其视为两个名称和两个值。： x = 23 y = x 但将已有的变量赋值给新变量时，Python永远不会复制值。分配只是使左侧的名称引用右侧的值。在这种情况下，我们只有一个23， x 和 y 都引用它，就像我们在上图中看到的那样。 名称是独立于其他名称重新分配的。 如果两个名称引用相同的值，则不会链接这两个名称。重新分配其中一个不会导致另一个也被重新分配： x = 23 y = x x = 12 如果上面嵌入的网页失效，可以参考以下动图： 值一直存在，直到没有名称引用它。 Python会跟踪每个值有多少引用，并自动清除没有引用的值。这被称为“垃圾收集”，意味着你不必清楚值，当它们不再需要时它们会自行消失。 mutable 和 immutable Python的数据类型可以分为原子类型和容器类器： 原子类型：string、number 容器类型：list、tuple、dict、set 原子类型只能保存一个值；容器类型则可以保存多个值。 虽然string可以包含多个字符，但Python中没有字符类型，因此字符串也属于原子类型。 Python对原子类型和容器类型的赋值方式都是一样的： 对于原子类型，name直接指向object 对于容器类器，name指向容器类型对象，容器的每一个元素指向各个元素对象 Python的数据类型还可以分为 immutable 和 mutable ： immutable object : string、tuple、number mutable object : list、dict、set 所谓的mutable、immutable是指name指向的object可不可以在原地址被修改。如果不可以在原地址修改，就只能在新地址创建新对象，name指向新对象（旧对象若没有引用，则会被内存回收机制销毁）： name = 10 print ( \"name的id：\" , id ( name )) name = 20 print ( \"name的id：\" , id ( name )) name的id： 140724285510752 name的id： 140724285511072 如果可以在原地址被修改，那么name的指向就不会改变（容器类型的对象实际上保存的是元素的引用）： name = [ 1 , 2 , 3 , 4 , 5 ] print ( \"name的值:\" , name , \" \" , \"name的id：\" , id ( name )) for num , i in enumerate ( name ): print ( f \"第 {num} 个元素的id\" , id ( i )) name [ 0 ] = 20 print ( \"name的值:\" , name , \" \" , \"name的id：\" , id ( name )) for num , i in enumerate ( name ): print ( f \"第 {num} 个元素的id\" , id ( i )) name的值: [1, 2, 3, 4, 5] name的id： 1441647216520 第0个元素的id 140724285510464 第1个元素的id 140724285510496 第2个元素的id 140724285510528 第3个元素的id 140724285510560 第4个元素的id 140724285510592 name的值: [20, 2, 3, 4, 5] name的id： 1441647216520 第0个元素的id 140724285511072 第1个元素的id 140724285510496 第2个元素的id 140724285510528 第3个元素的id 140724285510560 第4个元素的id 140724285510592 immutable的本质 神话：Python以不同的方式分配可变和不可变的值。 因为mutable对象是可变的，immutable对象不可变，人们可能会觉得mutable对象和immutable对象的值分配方式不一样。但事实上，mutable对象和immutable对象所有的赋值的方式都是一样的。 mutable、immutable只是python语言的一个规定。 从硬件角度说，硬件提供给用户的接口是按照规定设定好的。比如说，操作内存的方式是固定的，不存在可变和不可变。实现python的mutable、immutable就是调用了不同的底层API，或者是不同底层API相互组合来实现的。python将这些规定以python语法的形式提供给用户使用，最后还是编译成0、1去让计算机执行。对于用户来说，可变和不可变对象是语言提供的一个特性，可以完成一些功能，但是对于计算机其实是没区别的。 因此，mutable和immutable的本质区别是Python有没有提供修改值的方法。 不管是可变对象还是不可变对象，Python的赋值方式都是一样的，都是将对象绑定到名字（参见上面的图示和示例代码）。 赋值陷阱——浅拷贝和深拷贝 神话：值是有范围的。 在python中存在作用域这样的概念，人们可能会觉得作用域指的是值（对象）的作用范围，但事实上， 值是没有范围的，作用域指的是名称的作用范围。 我们可以定义一个简单的函数与验证这点。 def check_name_space_range ( x ): print ( \"x的内存地址是：\" + str ( id ( x ))) # 先在最外层的作用域赋值，并打印地址 a = 10 print ( \"a的内存地址是：\" + str ( id ( a ))) check_name_space_range ( a ) a的内存地址是：140724285510752 x的内存地址是：140724285510752 很明显，在内外层作用域的值都是同一个。 陷阱：因为值没有范围，并且赋值不会复制值，这就可能出现可变对象被意外地改变： def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] 可以看到， a 、 a_other 都被改变了，因为 a 、 a_other 都是同一个对象。 print ( \"a的内存地址是：\" + str ( id ( a ))) print ( \"a_other的内存地址是：\" + str ( id ( a_other ))) a的内存地址是：1441620592200 a_other的内存地址是：1441620592200 因此，如果要在函数里面更改可变对象参数的值，最好复制一个副本。 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a的内存地址是：\" + str ( id ( a ))) print ( \"a_other的内存地址是：\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a的内存地址是：1441623564040 a_other的内存地址是：1441647218056 a 的值并没有改变，上面的结果看似是没问题的，但还是会有新的”惊喜“。 我们来修改一下 variable_change_shallow 函数 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a的内存地址是：\" + str ( id ( a ))) print ( \"a_other的内存地址是：\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a的内存地址是：1441667197256 a_other的内存地址是：1441648401544 ”惊喜“就是 a 的值也改变了。因为 x.copy() 只是浅拷贝。 在python里面有三种方式去引用某个值： 引用另一个变量 浅拷贝 深拷贝 这三种方式是有区别的。 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) 变量 a 和 a_reference 都是同一个对象的名称。 浅拷贝得到变量 a_shallow ，它是一个新对象，但 a_shallow 的第三个元素 a_shallow[2] 却是一个已经存在的对象，这和 a 、 a_reference 一样。 深拷贝得到变量 a_deep_copy ，它是一个新对象，并且它的每一个元素也是新的对象。 如果浅拷贝的对象包含了mutable对象，则mutable对象不会拷贝；而深拷贝则会完整拷贝对象。 赋值陷阱——引用不仅仅限于名称 以上所有示例都使用名称作为值的引用，但引用也可以是其他东西。 Python有许多复合数据结构，每个结构都包含对值的引用：列表元素，字典键和值，对象属性等。 其中每一个都可以在赋值符号的左侧使用，以上所有细节都适用于它们。 任何可以出现在赋值语句左侧的内容都是引用 ，在本文中说“名称”的任何地方都可以用“引用”替换。 在上面的示意图中，数字被显示为元素，但实际上，每个元素都是对数字的引用，因此它应该像这样绘制： nums = [ 1 , 2 , 3 ] 但这很快变得复杂，所以上面的绘图用了视觉速记： 如果你有列表元素引用其他可变值，例如子列表，请务必记住列表元素只是对值的引用。 这是一些其他assignment的例子。这些左侧中的每一个都是引用（reference）： my_obj . attr = 23 # 类属性 my_dict [ key ] = 24 # 字典 my_list [ index ] = 25 # 列表 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" # 多个对象嵌套 i = x 指定了名称 i ，但 i[0] = x 并不是指定名称 i ，而是指定了 i 的值的第一个元素。 很多东西都是Assignment。 正如上面所说，许多东西都可以作为引用，python里面有很多东西可以作为assignments。 这些行中的每一行都是名称 X 的赋值： X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X 注意，我并不是说这些语句像assignments，我的意思是这些语句都是赋值。它们都使名称 X 引用某个值。上面所说的关于赋值的所有内容都适用于所有这些赋值。 在大多数情况下，这些语句将 X 定义在与语句相同的作用域内。Python 2和Python 3之间的细节略有不同。但它们都是真正的赋值，而且每个事实都是关于赋值适用于所有这些。 Python通过赋值来传递函数参数。 让我们来看看这些上面assignment列表中最有趣的一个：调用一个函数。当我定义一个函数时，我将其参数命名为： def my_func ( x , y ): return x + y 这里 x 和 y 是函数 my_func 的参数。当我调用 my_func 时，我提供了实际值作为函数的参数。这些值分配给 参数名称 ，就像使用了赋值语句一样： def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 调用 my_func 时，8被赋值给名称 x ，9被赋值给名称 y 。该赋值与我们一直在讨论的简单赋值语句完全相同。名称 x 和 y 是函数的本地名称（local），因此当函数返回时，这些名称就会消失。但是，如果它们引用的值仍然被其他名称引用，则值仍然存在。 就像所有其他赋值一样，可变值可以传递给函数，并且通过其所有名称可以看到对值的更改。这在<浅拷贝和深拷贝>中已经提到。 名称和值的一些细节 任何名称都可以随时引用任何值。 Python是动态类型的，这意味着名称没有类型。任何名称都可以随时引用任何值。名称可以引用整数，然后引用字符串，然后引用函数，然后引用模块。当然，这可能是一个非常混乱的程序，你不应该这样做，但Python语言不会介意。 名称没有类型，值没有范围。 正如名称没有类型一样，值也没有范围。当我们说一个函数有一个局部变量时，我们的意思是该名称的作用域是函数：你不能在函数外部使用该名称，当函数返回时，名称将被销毁。但是正如我们所看到的，如果名称的值具有其他引用，它将继续在函数调用之外。它是本地名称，而不是本地值。 值不能删除，只有名称可以删除。 Python的内存管理对其行为至关重要，你不仅不必删除值，而且无法删除值。 nums = [ 1 , 2 , 3 ] del nums 这不会删除值 nums ，它会删除名称 nums 。该名称将从其范围中删除，然后通常的引用计数开始执行：如果 nums 的值只有一个引用，则将回收该值。但如果它有其他引用，那么它不会被回收。 神话：Python没有变量。 有些人喜欢说，“Python没有变量，它有名字。”这个口号具有误导性。事实是Python有变量，它们的工作方式与C中的变量不同。 名称是Python的变量：它们引用值，并且这些值可以在程序的过程中发生变化（变化）。仅仅因为另一种语言（尽管是一种重要的语言）表现不同，没有理由将Python描述为没有变量。","text_tokens":["动态","键和值","右侧","variable","陷阱","类","相同","copy","10","我","混淆","不会","生变","代码","许多","第一个","区别","被","至关","导致","即","实现","仍然","计算","它们","很多","事实","range","范围","一般而言","自行","而","发生","0","obj","140724285510496","失效","对于","不仅仅","from","8","语句","变量","set","20","重新分配","以","无法","：","中","有没有","编译","人们","该","符号","5","这是","作用","内存地址","[","固定","旧","两个","很","复杂","存取","不仅","如果","for","任何","调用","定义","3","多少","通过","得到","下次","那么","和","可不可以","pass","行中","assignment","第","deep","值","提供","地方","而是","有些","存在","程序","神话","所说","还是","import","list","个","整数","140724285510752","做","变化","常","内存","概念","链接","看似","新","直到","对值","意图","表现","实际上","机制","那样","就是","作为","局部变量",".","中说","else","来说","跟踪","id","这些","number","时","嵌入","嵌套","发生变化","1441647218056","销毁","它会","外层","觉得","角度","原","修改","string","用户","第一","仅仅","我们","需要","用","绘制","，","赋值","然后","为","执行","打印","最好","一般","记住","资料","as","引用","实际","\"","图示","关联","print","其中","可变","已经","记忆","等","所","所有","拷贝","140724285510560","口号","说","+","细节","相互","操作","上面","结构","本文","显示","当值",";","一样","函数调用","比如说","有","左侧","以上","...","12","一直","混乱","字符","在内","永远","上","大多","这点","但是","示意","参数","第三个","按照","内容","my","函数","多数","返回","编译成","a","具有","让","本地","并","分配","类器","却是","num","但","x","元素","回收","在","意味","地","def","immutable","更改","储存","程式","深","}","过程","电脑","应该","容易","这样","、","属性","适用","略有","保存","亦","不同","务必","check","介意","提到","语言","并打印"," ","视为","参考","重要","中一","25","except","一个","你","容器","4","不可","类型","的","每个","模块","方式","fn","译成","other","视觉","限于","9","只能","会","设定","_","当","tuple","东西","地址","if","with","1441647216520","本质","行为","称为","了","2","副本","关于","硬件","例如","没有","local","reference","可不","子","真正","到","是",")","使用","接口","140724285511072","来","垃圾","相关联","{","完全相同","del","一下","属于","字符串","最",":","本质区别","传递","isinstance","外部","比如","str","指定","名称","算机","一些","也","deepcopy","因为","大多数","其他","object","还","一种","很快","请","从","简单","误导","各个","好","绑定","可以","第三","命名",",","描述","去","便","space","已有","不是","重新","传递函数","管理","(","而言","不管","里面","功能","原子","将","出现","参见","同一","一行",">","f","17","并且","这里","api","或","change","指向","mutable","喜欢","像","另","key","该值","则","正如","y","底层","数字","看看","图","理由","这种","组合","名字","实体","（","变","继续","直接","而且","网页","尽管","意外","复制","意味着","下","验证","attr","多个","func","python","这","c","传","name","完成","方法","只是","独立","例子","特性","位址","不必","数据","清除","与","所以","都","1441667197256","值有","要","in","shallow","动图","讨论","有趣","绘图","assignments","”","规定","虽然","计数","之间","于","之外","对象","工作","作用域","其实","列表","不再","问题","相关","变得复杂","误导性","某个","当然","1441620592200","—","给","“","速记","形式","完全","三种","复合","同一个","每","随时","140724285510464","可能","）","明显","；","特定","三个","语法","24","140724285510592","至关重要","value","浅","i","nums","结果","装置","class","消失","完整","字典","间接","使","删除","其","创建","替换","局部","示意图","惊喜","不能","人","变得","不","]","分为","<","先","数据结构","它","收集","略有不同","数据类型","通常","enumerate","所谓","没","index","=","最后","因此","包含","情况","dict","140724285510528","就","对","清楚","指标","或者","etc","内","。","自动","1441648401544","23","改变","非常","注意","1","这个","只有","意思","记忆体","#","指","看到","计算机","示例","以下","1441623564040","开始","若","return","事实上"],"title":"2.8.赋值、immutable、深拷贝","title_tokens":["深",".","拷贝","2.8","immutable","赋值","、"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html#_1","text":"引用（reference） ：一个可以让程式间接存取于电脑记忆体或其他储存装置中一特定资料的值。 一般而言，引用会是资料储存于记忆体或储存装置中的实体位址 。因此，引用亦常被称为该资料的指标或位址。 Python的赋值都是传引用，即name是value的引用。 在python里面，一个变量保存的值是某个对象的引用。Python赋值语句将左侧的符号名称与右侧的值 相关联 。在Python中，我们说名称引用值，或者名称是对值的引用。 下次我们使用这个名称时，便得到与名称相关联的值。 assignment永远不会复制数据，并且多个name可以引用同一个value。 当值具有多个名称时，很容易混淆并将其视为两个名称和两个值。： x = 23 y = x 但将已有的变量赋值给新变量时，Python永远不会复制值。分配只是使左侧的名称引用右侧的值。在这种情况下，我们只有一个23， x 和 y 都引用它，就像我们在上图中看到的那样。 名称是独立于其他名称重新分配的。 如果两个名称引用相同的值，则不会链接这两个名称。重新分配其中一个不会导致另一个也被重新分配： x = 23 y = x x = 12 如果上面嵌入的网页失效，可以参考以下动图： 值一直存在，直到没有名称引用它。 Python会跟踪每个值有多少引用，并自动清除没有引用的值。这被称为“垃圾收集”，意味着你不必清楚值，当它们不再需要时它们会自行消失。","text_tokens":["一个","右侧","位址","时","嵌入","你","不必","数据","的","清除","与","每个","相同","都","值有","混淆","不会","动图","被","”","导致","即","会","于","当","它们","我们","需要","对象","，","赋值","称为","不再","一般而言","自行","相关","一般","资料","没有","reference","某个","失效","引用","关联","给","语句","变量","“","是","其中","使用","重新分配","：","记忆","中","同一个","垃圾","相关联","说","）","该","符号","上面","特定","当值","value","两个","名称","很","也","其他","装置","存取","左侧","消失","12","一直","间接","如果","使","可以","其","永远","上","便","多少","已有","重新","得到","下次","和","而言","里面","assignment","值","将","它","收集","存在","同一","让","具有","并","分配","并且","=","但","x","因此","或","在","意味","情况","就","清楚","指标","或者","像","另","则","y","。","图","储存","常","这种","程式","自动","实体","电脑","（","链接","容易","23","新","直到","对值","网页","复制","意味着","下","这个","保存","亦","只有","那样","多个","记忆体","python","这","传","name","看到","只是"," ","视为","参考","以下","中一","跟踪","独立"],"title":"赋值","title_tokens":["赋值"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html#mutable-immutable","text":"Python的数据类型可以分为原子类型和容器类器： 原子类型：string、number 容器类型：list、tuple、dict、set 原子类型只能保存一个值；容器类型则可以保存多个值。 虽然string可以包含多个字符，但Python中没有字符类型，因此字符串也属于原子类型。 Python对原子类型和容器类型的赋值方式都是一样的： 对于原子类型，name直接指向object 对于容器类器，name指向容器类型对象，容器的每一个元素指向各个元素对象 Python的数据类型还可以分为 immutable 和 mutable ： immutable object : string、tuple、number mutable object : list、dict、set 所谓的mutable、immutable是指name指向的object可不可以在原地址被修改。如果不可以在原地址修改，就只能在新地址创建新对象，name指向新对象（旧对象若没有引用，则会被内存回收机制销毁）： name = 10 print ( \"name的id：\" , id ( name )) name = 20 print ( \"name的id：\" , id ( name )) name的id： 140724285510752 name的id： 140724285511072 如果可以在原地址被修改，那么name的指向就不会改变（容器类型的对象实际上保存的是元素的引用）： name = [ 1 , 2 , 3 , 4 , 5 ] print ( \"name的值:\" , name , \" \" , \"name的id：\" , id ( name )) for num , i in enumerate ( name ): print ( f \"第 {num} 个元素的id\" , id ( i )) name [ 0 ] = 20 print ( \"name的值:\" , name , \" \" , \"name的id：\" , id ( name )) for num , i in enumerate ( name ): print ( f \"第 {num} 个元素的id\" , id ( i )) name的值: [1, 2, 3, 4, 5] name的id： 1441647216520 第0个元素的id 140724285510464 第1个元素的id 140724285510496 第2个元素的id 140724285510528 第3个元素的id 140724285510560 第4个元素的id 140724285510592 name的值: [20, 2, 3, 4, 5] name的id： 1441647216520 第0个元素的id 140724285511072 第1个元素的id 140724285510496 第2个元素的id 140724285510528 第3个元素的id 140724285510560 第4个元素的id 140724285510592","text_tokens":["number","一个","容器","4","数据","不可","销毁","类型","的","方式","都","10","in","不会","原","修改","被","string","只能","会","虽然","tuple","地址","对象","，","1441647216520","赋值","2","0","没有","140724285510496","对于","引用","可不","\"","实际","print","set","是",")","20","：","中","140724285511072","每","140724285510560","{","140724285510464","属于","）","字符串","5","；",":","[","一样","旧","140724285510592","i","也","object","还","如果","各个","字符","可以","for","创建",",","3","(","那么","和","可不可以","不","]","分为","第","值","原子","数据类型","enumerate","所谓","f","类器","num","=","但","list","个","因此","元素","回收","在","140724285510752","包含","140724285510528","dict","就","对","指向","mutable","则","immutable","。","内存","}","（","直接","新","、","改变","实际上","1","保存","机制","多个","python","name","指"," ","id","若"],"title":"mutable 和 immutable","title_tokens":["mutable"," ","immutable","和"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html#immutable","text":"神话：Python以不同的方式分配可变和不可变的值。 因为mutable对象是可变的，immutable对象不可变，人们可能会觉得mutable对象和immutable对象的值分配方式不一样。但事实上，mutable对象和immutable对象所有的赋值的方式都是一样的。 mutable、immutable只是python语言的一个规定。 从硬件角度说，硬件提供给用户的接口是按照规定设定好的。比如说，操作内存的方式是固定的，不存在可变和不可变。实现python的mutable、immutable就是调用了不同的底层API，或者是不同底层API相互组合来实现的。python将这些规定以python语法的形式提供给用户使用，最后还是编译成0、1去让计算机执行。对于用户来说，可变和不可变对象是语言提供的一个特性，可以完成一些功能，但是对于计算机其实是没区别的。 因此，mutable和immutable的本质区别是Python有没有提供修改值的方法。 不管是可变对象还是不可变对象，Python的赋值方式都是一样的，都是将对象绑定到名字（参见上面的图示和示例代码）。","text_tokens":["一个","特性","不可","的","方式","都","觉得","角度","译成","代码","修改","区别","用户","实现","规定","会","设定","计算","对象","，","事实","赋值","其实","本质","了","执行","硬件","0","没有","对于","图示","到","给","是","形式","使用","可变","以","：","接口","有没有","编译","来","所有","说","人们","可能","相互","操作","）","上面","本质区别","固定","语法","一样","比如","比如说","算机","一些","因为","从","好","绑定","可以","调用","去","但是","按照","和","不","不管","功能","值","提供","将","参见","编译成","存在","让","神话","没","分配","还是","但","最后","api","因此","mutable","或者","immutable","底层","。","内存","组合","名字","（","变","、","1","就是","不同","python","完成","计算机","语言","示例","方法","只是"," ","来说","这些","事实上"],"title":"immutable的本质","title_tokens":["immutable","本质","的"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html#_2","text":"神话：值是有范围的。 在python中存在作用域这样的概念，人们可能会觉得作用域指的是值（对象）的作用范围，但事实上， 值是没有范围的，作用域指的是名称的作用范围。 我们可以定义一个简单的函数与验证这点。 def check_name_space_range ( x ): print ( \"x的内存地址是：\" + str ( id ( x ))) # 先在最外层的作用域赋值，并打印地址 a = 10 print ( \"a的内存地址是：\" + str ( id ( a ))) check_name_space_range ( a ) a的内存地址是：140724285510752 x的内存地址是：140724285510752 很明显，在内外层作用域的值都是同一个。 陷阱：因为值没有范围，并且赋值不会复制值，这就可能出现可变对象被意外地改变： def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] 可以看到， a 、 a_other 都被改变了，因为 a 、 a_other 都是同一个对象。 print ( \"a的内存地址是：\" + str ( id ( a ))) print ( \"a_other的内存地址是：\" + str ( id ( a_other ))) a的内存地址是：1441620592200 a_other的内存地址是：1441620592200 因此，如果要在函数里面更改可变对象参数的值，最好复制一个副本。 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a的内存地址是：\" + str ( id ( a ))) print ( \"a_other的内存地址是：\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a的内存地址是：1441623564040 a_other的内存地址是：1441647218056 a 的值并没有改变，上面的结果看似是没问题的，但还是会有新的”惊喜“。 我们来修改一下 variable_change_shallow 函数 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a的内存地址是：\" + str ( id ( a ))) print ( \"a_other的内存地址是：\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a的内存地址是：1441667197256 a_other的内存地址是：1441648401544 ”惊喜“就是 a 的值也改变了。因为 x.copy() 只是浅拷贝。 在python里面有三种方式去引用某个值： 引用另一个变量 浅拷贝 深拷贝 这三种方式是有区别的。 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) 变量 a 和 a_reference 都是同一个对象的名称。 浅拷贝得到变量 a_shallow ，它是一个新对象，但 a_shallow 的第三个元素 a_shallow[2] 却是一个已经存在的对象，这和 a 、 a_reference 一样。 深拷贝得到变量 a_deep_copy ，它是一个新对象，并且它的每一个元素也是新的对象。 如果浅拷贝的对象包含了mutable对象，则mutable对象不会拷贝；而深拷贝则会完整拷贝对象。","text_tokens":["一个","variable","1441647218056","陷阱","的","与","copy","方式","都","10","要","1441667197256","外层","shallow","觉得","不会","other","修改","被","”","区别","会","_","地址","if","我们","对象","作用域","，","事实","赋值","range","范围","了","2","打印","最好","副本","问题","而","0","没有","reference","某个","引用","1441620592200","\"","print","变量","“","是",")","可变","已经","：","中","三种","同一个","来","每","拷贝","人们","可能","+","一下","）","最","明显","上面","；",":","作用","三个","内存地址","[","isinstance","一样","str","名称","浅","很","deepcopy","也","有","因为","结果","简单","完整","如果","可以","在内","第三","定义",",","3","去","这点","space","惊喜","参数","得到","第三个","函数","(","和","]","里面","pass","先","deep","值","出现","它","存在","a","同一","神话","没","并","还是","import","并且","却是","=","但","list","x","140724285510752","因此","元素","在","包含","change","就","mutable","另","地","def","则","。","更改","内存","深","概念","（","看似","1441648401544","新","这样","、","意外","改变","复制","1","验证","就是","python","#","这","check","指","name","看到",".","并打印","只是"," ","else","1441623564040","id","return","事实上"],"title":"赋值陷阱——浅拷贝和深拷贝","title_tokens":["浅","深","—","陷阱","拷贝","和","赋值"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html#_3","text":"以上所有示例都使用名称作为值的引用，但引用也可以是其他东西。 Python有许多复合数据结构，每个结构都包含对值的引用：列表元素，字典键和值，对象属性等。 其中每一个都可以在赋值符号的左侧使用，以上所有细节都适用于它们。 任何可以出现在赋值语句左侧的内容都是引用 ，在本文中说“名称”的任何地方都可以用“引用”替换。 在上面的示意图中，数字被显示为元素，但实际上，每个元素都是对数字的引用，因此它应该像这样绘制： nums = [ 1 , 2 , 3 ] 但这很快变得复杂，所以上面的绘图用了视觉速记： 如果你有列表元素引用其他可变值，例如子列表，请务必记住列表元素只是对值的引用。 这是一些其他assignment的例子。这些左侧中的每一个都是引用（reference）： my_obj . attr = 23 # 类属性 my_dict [ key ] = 24 # 字典 my_list [ index ] = 25 # 列表 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" # 多个对象嵌套 i = x 指定了名称 i ，但 i[0] = x 并不是指定名称 i ，而是指定了 i 的值的第一个元素。 很多东西都是Assignment。 正如上面所说，许多东西都可以作为引用，python里面有很多东西可以作为assignments。 这些行中的每一行都是名称 X 的赋值： X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X 注意，我并不是说这些语句像assignments，我的意思是这些语句都是赋值。它们都使名称 X 引用某个值。上面所说的关于赋值的所有内容都适用于所有这些赋值。 在大多数情况下，这些语句将 X 定义在与语句相同的作用域内。Python 2和Python 3之间的细节略有不同。但它们都是真正的赋值，而且每个事实都是关于赋值适用于所有这些。 Python通过赋值来传递函数参数。 让我们来看看这些上面assignment列表中最有趣的一个：调用一个函数。当我定义一个函数时，我将其参数命名为： def my_func ( x , y ): return x + y 这里 x 和 y 是函数 my_func 的参数。当我调用 my_func 时，我提供了实际值作为函数的参数。这些值分配给 参数名称 ，就像使用了赋值语句一样： def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 调用 my_func 时，8被赋值给名称 x ，9被赋值给名称 y 。该赋值与我们一直在讨论的简单赋值语句完全相同。名称 x 和 y 是函数的本地名称（local），因此当函数返回时，这些名称就会消失。但是，如果它们引用的值仍然被其他名称引用，则值仍然存在。 就像所有其他赋值一样，可变值可以传递给函数，并且通过其所有名称可以看到对值的更改。这在<浅拷贝和深拷贝>中已经提到。","text_tokens":["例子","键和值","一个","时","你","嵌套","数据","类","的","与","每个","所以","相同","都","fn","in","我","讨论","许多","第一个","有趣","绘图","视觉","被","”","assignments","9","会","仍然","_","之间","于","东西","它们","第一","当","很多","用","with","绘制","对象","我们","作用域","，","列表","赋值","事实","了","为","2","关于","例如","记住","0","obj","local","变得复杂","reference","as","某个","引用","实际","子","\"","真正","from","8","print","给","语句","“","速记","是",")","其中","使用","完全","可变","已经","：","中","复合","等","来","每","所有","拷贝","完全相同","{","说","细节","+","）","最","符号","该","上面","结构","本文","显示","这是",":","作用","传递",";","[","24","一样","指定","名称","浅","复杂","也","nums","一些","有","i","大多数","其他","很快","请","class","左侧","以上","消失","字典","...","12","简单","一直","如果","使","可以","for","任何","调用","其","命名","替换","大多","定义",",","3","示意图","但是","通过","不是","示意","传递函数","参数","内容","my","变得","(","函数","和","]","里面","行中","<","assignment","数据结构","值","出现","将","地方","它","而是","多数","略有不同","提供","返回","存在","一行","让","本地","所说","并",">","分配","import","17","并且","index","=","但","list","x","这里","因此","元素","在","包含","情况","dict","就","对","像","key","etc","正如","def","内","。","数字","看看","y","则","更改","深","}","（","应该","23","而且","这样","对值","意图","属性","实际上","适用","略有","注意","1","下","attr","意思","不同","多个","作为","python","务必","#","这","func","提到","看到",".","示例","只是"," ","中说","25","这些","return","except"],"title":"赋值陷阱——引用不仅仅限于名称","title_tokens":["不仅","名称","引用","不仅仅","—","仅仅","陷阱","限于","赋值"]},{"location":"Python基础/2.8.赋值、immutable、深拷贝.html#_4","text":"任何名称都可以随时引用任何值。 Python是动态类型的，这意味着名称没有类型。任何名称都可以随时引用任何值。名称可以引用整数，然后引用字符串，然后引用函数，然后引用模块。当然，这可能是一个非常混乱的程序，你不应该这样做，但Python语言不会介意。 名称没有类型，值没有范围。 正如名称没有类型一样，值也没有范围。当我们说一个函数有一个局部变量时，我们的意思是该名称的作用域是函数：你不能在函数外部使用该名称，当函数返回时，名称将被销毁。但是正如我们所看到的，如果名称的值具有其他引用，它将继续在函数调用之外。它是本地名称，而不是本地值。 值不能删除，只有名称可以删除。 Python的内存管理对其行为至关重要，你不仅不必删除值，而且无法删除值。 nums = [ 1 , 2 , 3 ] del nums 这不会删除值 nums ，它会删除名称 nums 。该名称将从其范围中删除，然后通常的引用计数开始执行：如果 nums 的值只有一个引用，则将回收该值。但如果它有其他引用，那么它不会被回收。 神话：Python没有变量。 有些人喜欢说，“Python没有变量，它有名字。”这个口号具有误导性。事实是Python有变量，它们的工作方式与C中的变量不同。 名称是Python的变量：它们引用值，并且这些值可以在程序的过程中发生变化（变化）。仅仅因为另一种语言（尽管是一种重要的语言）表现不同，没有理由将Python描述为没有变量。","text_tokens":["动态","一个","时","不必","你","发生变化","销毁","类型","的","与","模块","它会","都","方式","不会","生变","至关","被","”","计数","当","它们","仅仅","我们","之外","工作","作用域","，","事实","行为","范围","然后","2","而","执行","发生","为","没有","误导性","当然","引用","变量","“","是","使用","无法","：","中","所","随时","del","口号","说","可能","）","字符串","该","作用","[","外部","一样","至关重要","函数调用","名称","也","nums","有","因为","其他","一种","从","不仅","误导","如果","混乱","字符","删除","可以","其","任何","调用","局部",",","3","描述","但是","不是","管理","不能","人","函数","那么","不","]","值","将","它","有些","返回","程序","通常","具有","神话","本地","并且","=","但","整数","回收","在","意味","对","做","喜欢","该值","另","正如","则","变化","。","理由","内存","名字","过程","继续","（","应该","而且","这样","尽管","表现","非常","意味着","1","这个","只有","意思","不同","python","这","c","局部变量","介意","看到","语言"," ","重要","开始","这些"],"title":"名称和值的一些细节","title_tokens":["名称","一些","值","的","和","细节"]},{"location":"Python基础/2.9.函数.html","text":"函数 关键字 def 引入了一个函数定义。后面必须跟上函数名和在圆括号里的参数序列。函数体从第一行开始，并且一定要缩进。 def func (): pass 函式体的第一个语句可以是字串。这个字串就是函式的文档字符串，或称为 docstring。有很多能将文档字串自动转换为在线或可打印文档的工具，或让用户在代码中交互地浏览它的工具。 执行函数会引入局部命名空间。所有在函数中被赋值的变量和值都将存储在局部命名空间中。 变量引用会首先在函数的局部命名空间里寻找，然后才是闭包函数的局部命名空间，再然后是全局命名空间，最后是内置命名空间。在函数中可以引用全局变量，但是不可直接赋值 (除非用 global 语句进行声明)。 具体细节参考 命名空间和作用域。 根据其它语言的经验，你可能会指出 fib 不是一个函数，而是一个程序，因为它不返回值。事实上，即使没有写 return 语句的函数也会返回一个值—— None 。如果要唯一输出的值是 None，那么解释器会正当的抑制这次返回。如你实在想看看这个值，可以使用 print() 函数。 return 语句从函式中返回一个值。没有表达式参数的 return 语句返回 None。直到函式结束也没有 return 语句也返回 。 函数传参 刚学Python的人可能会疑惑，Python函数传参，到底是传值，还是传引用？ 答案很直接，Python函数传参永远都是传引用。 实际上，Python函数传参就是赋值，所以传参的行为和赋值的行为是一样的。在对可变对象的参数进行操作前，最好先深拷贝参数的值，否则可能会影响全局变量。 参数 函数有四种参数概念：位置参数、默认参数、关键字参数、可变参数。 函数有三种合法调用形式： 仅给出强制参数 给出所有强制参数和部分可选参数 给出所有参数 位置参数 调用函数时可以省略形参名字，根据函数定义的参数位置来传递参数。传入的参数顺序必须和定义参数的顺序一致，且少一个参数都不可以。 def print_hello ( name , sex ): sex_dict = { 1 : u '先生' , 2 : u '女士' } print ( 'hello %s %s , welcome to python world!' % ( name , sex_dict . get ( sex , u '先生' ))) print_hello ( 'Jack' , 1 ) hello Jack 先生, welcome to python world! 关键字参数 函数调用时，可以通过“键=值”形式指定。这可以让函数更加清晰、容易使用，同时关键字参数不需要按顺序指定。 # 以下是用关键字参数正确调用函数的实例 print_hello ( 'tanggu' , sex = 1 ) print_hello ( name = 'tanggu' , sex = 1 ) print_hello ( sex = 1 , name = 'tanggu' ) hello tanggu 先生, welcome to python world! hello tanggu 先生, welcome to python world! hello tanggu 先生, welcome to python world! # 以下是错误的调用方式 print_hello ( 1 , name = 'tanggu' ) print_hello ( name = 'tanggu' , 1 ) print_hello ( sex = 1 , 'tanggu' ) 通过上面的代码可以发现： 有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序的 。 默认参数 用于定义函数，为参数提供默认值，调用函数时可传可不传该默认参数的值。 注意：所有位置参数必须出现在默认参数前，包括函数定义和调用。 # 正确的默认参数定义方式--> 位置参数在前，默认参数在后 def print_hello ( name , sex = 1 ): .... # 错误的定义方式 def print_hello ( sex = 1 , name ): .... # 调用时不传sex的值，则使用默认值1 # print_hello('tanggu') # 调用时传入sex的值，并指定为2 # print_hello('tanggu', 2) 可变参数 定义函数时，有时候我们不确定调用的时候会传递多少个参数（不传参也可以）。此时，可用包裹（packing）位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。 包裹位置传递 def func ( * args ): .... ↓ # func() # func(a) # func(a, b, c) 我们传进的所有参数都会被 args 变量收集，它会根据传进参数的位置合并为一个元组(tuple)， args 是元组类型，这就是包裹位置传递。 包裹关键字传递 def func ( ** kargs ): .... ↓ # func(a=1) # func(a=1, b=2, c=3) kargs是一个字典(dict)，收集所有关键字参数 解包裹参数 * 和 ** ，也可以在函数调用的时候使用，称之为解包裹(unpacking) 在传递元组时，让元组的每一个元素对应一个位置参数 def print_hello ( name , sex ): print name , sex # args = ('tanggu', '男') # print_hello(*args) # tanggu 男 在传递字典时，让字典的每个键值对作为一个关键字参数传递给函数 def print_hello ( kargs ): print kargs # kargs = {'name': 'tanggu', 'sex', u'男'} # print_hello(**kargs) # {'name': 'tanggu', 'sex', u'男'} 位置参数、默认参数、可变参数的混合使用 顺序是：位置参数、默认参数、包裹位置、包裹关键字，定义和调用都应遵循这个顺序。 def func ( name , age , sex = 1 , * args , ** kargs ): print name , age , sex , args , kargs # func('tanggu', 25, 2, 'music', 'sport', class=2) # tanggu 25 1 ('music', 'sport') {'class'=2}","text_tokens":["经验","遵循","代码","第一个","jack","被","省略","女士","很多","声明","转换","事实","表达式","u","语句","先生","变量","：","中","更加","关键字","唯一","达式","作用","很","先后顺序","存储","如果","合法","第一行","调用","定义","3","括号","多少","通过","sex","对应","那么","和","跟上","pass","docstring","值","提供","↓","而是","程序","调用函数","存在","还是","首先","部分","包括","个","传值","时不传","概念","称之为","四种","正确","world","在线","直到","实际上","实例","tanggu","就是","作为","b","错误",".","global","*","时","时候","它会","混合","默认","welcome","用户","第一","用","需要","我们","，","赋值","正当","浏览","交互","然后","为","打印","执行","最好","用于","....","发现","内置","除非","引用","实际","print","传进","函式体","形参","可变","所有","拷贝","一定","空间","细节","操作","关键","上面","闭包","一样","如","函数调用","后","想","有","写","才","字符","永远","圆括号","但是","可","可传","参数","永远都是","函数","全局变量","返回","a","让","并","仅","但","数传","元素","在","解","地","def","args","少","包裹","}","进行","传入","容易","解释器","里","、","按","先后","语言"," ","参考","25","体从","位置","一个","你","不可","%","类型","的","每个","方式","刚学","先深","packing","会","_","tuple","参","其它","行为","且","称为","了","这次","2","影响","字串","没有","可不","引入","'",")","是","使用","来","工具","结束","{","之为","字符串",":","传递","指定","也","因为","顺序","男","从","传参","到底","可以","命名",",","即使","能","不是","强制","实在","(","to","出现","将","疑惑","时可传","一行",">","不传","并且","或","元组","后面","则","看看","名字","（","直接","应","music","确定","fib","sport","func","python","这","c","传","name","键值","返回值","名","缩进","所以","答案","都","要","全局","同时","前","”","之间","对象","作用域","有时候","参数传递","抑制","操作前","清晰","—","给","“","前面","形式","三种","再","根据","每","可能","）","具体","合并","表达","选","解释","class","此时","？","有时","字典","kargs","--","文档","传该","局部","输出","给出","指出","人","否则","不","age","释器","它","收集","s","键","函式","方便","get","=","必须","寻找","最后","一致","默认值","dict","对","或者","显得","可用","。","序列","自动","非常","注意","1","这个","#","none","以下","hello","unpacking","开始","return","!","事实上"],"title":"2.9.函数","title_tokens":["2.9","函数","."]},{"location":"Python基础/2.9.函数.html#_1","text":"关键字 def 引入了一个函数定义。后面必须跟上函数名和在圆括号里的参数序列。函数体从第一行开始，并且一定要缩进。 def func (): pass 函式体的第一个语句可以是字串。这个字串就是函式的文档字符串，或称为 docstring。有很多能将文档字串自动转换为在线或可打印文档的工具，或让用户在代码中交互地浏览它的工具。 执行函数会引入局部命名空间。所有在函数中被赋值的变量和值都将存储在局部命名空间中。 变量引用会首先在函数的局部命名空间里寻找，然后才是闭包函数的局部命名空间，再然后是全局命名空间，最后是内置命名空间。在函数中可以引用全局变量，但是不可直接赋值 (除非用 global 语句进行声明)。 具体细节参考 命名空间和作用域。 根据其它语言的经验，你可能会指出 fib 不是一个函数，而是一个程序，因为它不返回值。事实上，即使没有写 return 语句的函数也会返回一个值—— None 。如果要唯一输出的值是 None，那么解释器会正当的抑制这次返回。如你实在想看看这个值，可以使用 print() 函数。 return 语句从函式中返回一个值。没有表达式参数的 return 语句返回 None。直到函式结束也没有 return 语句也返回 。","text_tokens":["名","一个","你","缩进","不可","的","经验","都","要","全局","代码","第一个","被","用户","会","第一","很多","用","声明","转换","其它","作用域","，","事实","赋值","正当","浏览","交互","称为","了","这次","然后","为","打印","执行","表达式","字串","没有","内置","抑制","除非","引用","引入","—","print","语句","变量","函式体",")","是","使用","中","工具","再","关键字","根据","所有","结束","一定","唯一","空间","细节","可能","达式","字符串","关键","闭包",":","作用","具体","如","想","表达","也","有","因为","写","解释","存储","才","从","如果","字符","第一行","可以","文档","命名","定义","局部","圆括号","括号","即使","输出","但是","能","不是","可","指出","参数","实在","函数","(","和","不","那么","跟上","pass","docstring","值","全局变量","将","而是","它","释器","返回","程序","一行","让","函式","并且","首先","必须","寻找","最后","或","在","后面","地","def","。","序列","看看","自动","在线","进行","直接","直到","解释器","里","这个","fib","就是","func","none","语言","返回值"," ","global","参考","开始","体从","return","事实上"],"title":"函数","title_tokens":["函数"]},{"location":"Python基础/2.9.函数.html#_2","text":"刚学Python的人可能会疑惑，Python函数传参，到底是传值，还是传引用？ 答案很直接，Python函数传参永远都是传引用。 实际上，Python函数传参就是赋值，所以传参的行为和赋值的行为是一样的。在对可变对象的参数进行操作前，最好先深拷贝参数的值，否则可能会影响全局变量。","text_tokens":["传参","在","引用","实际","到底","操作前","对","变量","的","永远","传值","答案","是","。","所以","可变","刚学","全局","先深","参数","永远都是","人","拷贝","否则","函数","进行","和","直接","可能","会","实际上","操作","值","全局变量","就是","对象","python","疑惑","，","一样","赋值","传","行为","很","最好","还是"," ","影响","？"],"title":"函数传参","title_tokens":["传参","函数"]},{"location":"Python基础/2.9.函数.html#_3","text":"函数有四种参数概念：位置参数、默认参数、关键字参数、可变参数。 函数有三种合法调用形式： 仅给出强制参数 给出所有强制参数和部分可选参数 给出所有参数","text_tokens":["合法","调用","形式","。","可变","：","三种","给出","概念","可","四种","强制","参数","默认","关键字","所有","函数","和","、","关键","选","有"," ","仅","部分","位置"],"title":"参数","title_tokens":["参数"]},{"location":"Python基础/2.9.函数.html#_4","text":"调用函数时可以省略形参名字，根据函数定义的参数位置来传递参数。传入的参数顺序必须和定义参数的顺序一致，且少一个参数都不可以。 def print_hello ( name , sex ): sex_dict = { 1 : u '先生' , 2 : u '女士' } print ( 'hello %s %s , welcome to python world!' % ( name , sex_dict . get ( sex , u '先生' ))) print_hello ( 'Jack' , 1 ) hello Jack 先生, welcome to python world!","text_tokens":["一致","一个","时","dict","print","可以","先生","%","调用","的","'","定义","def",")",",","形参","。","少","都","=","!","sex","来","}","名字","根据","参数","jack","world","函数","传入","和","不","(","省略","{","welcome","to","_",":","1","女士","传递","调用函数","python","，","name","且","s","2",".","u"," ","hello","顺序","get","位置","必须"],"title":"位置参数","title_tokens":["位置","参数"]},{"location":"Python基础/2.9.函数.html#_5","text":"函数调用时，可以通过“键=值”形式指定。这可以让函数更加清晰、容易使用，同时关键字参数不需要按顺序指定。 # 以下是用关键字参数正确调用函数的实例 print_hello ( 'tanggu' , sex = 1 ) print_hello ( name = 'tanggu' , sex = 1 ) print_hello ( sex = 1 , name = 'tanggu' ) hello tanggu 先生, welcome to python world! hello tanggu 先生, welcome to python world! hello tanggu 先生, welcome to python world! # 以下是错误的调用方式 print_hello ( 1 , name = 'tanggu' ) print_hello ( name = 'tanggu' , 1 ) print_hello ( sex = 1 , 'tanggu' ) 通过上面的代码可以发现： 有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序的 。","text_tokens":["位置","在","时","清晰","print","可以","先生","调用","的","“","'","前面","是",",",")","。","形式","使用","方式","同时","：","必须","通过","更加","sex","代码","参数","关键字","正确","world","函数","”","容易","不","(","welcome","to","、","但","关键","上面","值","实例","_","1","之间","tanggu","按","需要","用","调用函数","存在","python","#","这","让","，","先后","函数调用","指定","name","错误","键","先后顺序","有"," ","以下","发现","hello","顺序","=","!"],"title":"关键字参数","title_tokens":["关键","参数","关键字"]},{"location":"Python基础/2.9.函数.html#_6","text":"用于定义函数，为参数提供默认值，调用函数时可传可不传该默认参数的值。 注意：所有位置参数必须出现在默认参数前，包括函数定义和调用。 # 正确的默认参数定义方式--> 位置参数在前，默认参数在后 def print_hello ( name , sex = 1 ): .... # 错误的定义方式 def print_hello ( sex = 1 , name ): .... # 调用时不传sex的值，则使用默认值1 # print_hello('tanggu') # 调用时传入sex的值，并指定为2 # print_hello('tanggu', 2)","text_tokens":["在","可不","时","print","--","调用","的","'","定义","def","传该",",",")","。","则","方式","使用","=","：","时不传","sex","可传","参数","默认","正确","所有","前","函数","(","和","传入","注意","值","提供","出现","_","1",":","tanggu","调用函数","时可传","#","，","后","name","指定","错误","并",">","为","....","用于","2"," ","hello","位置","必须","包括","默认值"],"title":"默认参数","title_tokens":["参数","默认"]},{"location":"Python基础/2.9.函数.html#_7","text":"定义函数时，有时候我们不确定调用的时候会传递多少个参数（不传参也可以）。此时，可用包裹（packing）位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。","text_tokens":["时","时候","可以","调用","的","或者","定义","显得","可用","。","多少","包裹","来","参数","关键字","（","函数","进行","不","packing","会","）","非常","关键","确定","传递","数传","参","我们","，","有时候","参数传递","也","不传","方便","此时","位置","个","有时"],"title":"可变参数","title_tokens":["参数","可变"]},{"location":"Python基础/2.9.函数.html#_8","text":"def func ( * args ): .... ↓ # func() # func(a) # func(a, b, c) 我们传进的所有参数都会被 args 变量收集，它会根据传进参数的位置合并为一个元组(tuple)， args 是元组类型，这就是包裹位置传递。","text_tokens":["一个","元组","传进","变量","的","类型","args","def",")",",","是","。","它会","都","包裹","参数","根据","所有","被","(","会","↓",":","tuple","传递","收集","我们","就是","func","a","#","，","c","这","b","合并","为","...."," ","*","位置"],"title":"包裹位置传递","title_tokens":["包裹","位置","传递"]},{"location":"Python基础/2.9.函数.html#_9","text":"def func ( ** kargs ): .... ↓ # func(a=1) # func(a=1, b=2, c=3) kargs是一个字典(dict)，收集所有关键字参数","text_tokens":["kargs","一个","dict","def",")",",","3","是","参数","关键字","所有","(","关键","↓","1",":","收集","func","a","#","，","c","b","2","...."," ","*","=","字典"],"title":"包裹关键字传递","title_tokens":["包裹","传递","关键","关键字"]},{"location":"Python基础/2.9.函数.html#_10","text":"* 和 ** ，也可以在函数调用的时候使用，称之为解包裹(unpacking) 在传递元组时，让元组的每一个元素对应一个位置参数 def print_hello ( name , sex ): print name , sex # args = ('tanggu', '男') # print_hello(*args) # tanggu 男 在传递字典时，让字典的每个键值对作为一个关键字参数传递给函数 def print_hello ( kargs ): print kargs # kargs = {'name': 'tanggu', 'sex', u'男'} # print_hello(**kargs) # {'name': 'tanggu', 'sex', u'男'}","text_tokens":["元素","kargs","在","一个","时候","元组","解","时","print","对","给","可以","调用","的","'","args","def",")",",","每个","使用","=","包裹","称之为","sex","}","对应","每","参数","关键字","函数","(","和","{","之为","男","关键","_",":","传递","tanggu","作为","#","，","让","函数调用","name","键值","参数传递","也","u"," ","hello","unpacking","*","位置","数传","字典"],"title":"解包裹参数","title_tokens":["包裹","参数","解"]},{"location":"Python基础/2.9.函数.html#_11","text":"顺序是：位置参数、默认参数、包裹位置、包裹关键字，定义和调用都应遵循这个顺序。 def func ( name , age , sex = 1 , * args , ** kargs ): print name , age , sex , args , kargs # func('tanggu', 25, 2, 'music', 'sport', class=2) # tanggu 25 1 ('music', 'sport') {'class'=2}","text_tokens":["kargs","print","调用","'","定义","def","是",",","args","。",")","都","=","：","包裹","遵循","sex","}","参数","默认","关键字","(","和","{","应","age","、","music","关键","1",":","这个","tanggu","sport","func","#","，","name","2"," ","25","class","顺序","*","位置"],"title":"位置参数、默认参数、可变参数的混合使用","title_tokens":["混合","默认","参数","、","的","位置","使用","可变"]},{"location":"Python基础/3.1.异常.html","text":"异常处理机制 异常处理无外乎几件事: 断言（assert） 抛错（raise） 检查（try） 捕获（except） 处理（except, else, finally） 异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。当Python脚本发生异常时，异常会从发生异常的位置向程序上层传播。例如异常从函数向外传播到调用函数的地方，如果在这里没有被捕获，则继续向上传播，如果一直都没有被捕获，则传播到程序的最顶层，即主程序（全局作用域）。如果在主程序中也没有处理异常的程序，python将调用默认的异常处理程序，自动匹配异常的类型，然后中止程序并显示栈跟踪信息。 # 在cause_error函数中抛出异常 def cause_error (): raise Exception ( \"Somrthing is wrong\" ) # 在call_cause_error函数中调用cause_error函数 def call_cause_error (): cause_error () def deal_error (): try : cause_error () except : print ( \"Exception handled\" ) call_cause_error () ---------------------------------------------------------------------------Exception Traceback (most recent call last)<ipython-input-1-eb81f11bf5d9> in <module> ----> 1 call_cause_error() <ipython-input-1-ec5e029839e0> in call_cause_error() 1 def call_cause_error(): ----> 2 cause_error() 3 <ipython-input-1-11326a099618> in cause_error() 1 def cause_error(): ----> 2 raise Exception(\"Somrthing is wrong\") 3 Exception: Somrthing is wrong deal_error () Exception handled 如你所见，cause_error中引发的异常依次从cause_error和call_cause_error向外传播，最终导致显示一条栈跟踪信息。调用deal_error时，异常在传播到deal_error时被捕获，并被这里的try/except语句处理。 异常是Python对象，表示一个错误。异常可以作为类被定义, 也可以人为引发异常。 异常处理语句 try : #' try语句中代码首先被运行 < statement > except ： #' 捕获任何在try中引发的异常 < statement > except < name > ： #' 捕获在try中引发的<name>异常 < statement > except < name > ， < data > : #' 如果引发了'name'异常，获得附加的数据 < statement > except ( < name1 > , < name2 >... ): #' 捕获列出的多个异常 < statement > else : #' 如果没有异常发生 < statement > finally : #' 退出try时总会执行 < statement > raise #' 人为引发错误 assert < judgement > #' 断言,判断一定要返回True否则会引发AssertionError raise语句 使用raise...from...语句来提供自己的异常上下文，也可以使用None来禁止上下文。 # 默认输出异常上下文 try : 1 / 0 except ZeroDivisionError : raise ValueError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 1 try: ----> 2 1/0 3 except ZeroDivisionError: ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError 5 ValueError: # 自定义上下文 try : 1 / 0 except ZeroDivisionError : raise ValueError from ZeroDivisionError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)ZeroDivisionError: The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last)<ipython-input-1-00ed5b67ecd8> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from ZeroDivisionError 5 ValueError: # 禁止上下文 try : 1 / 0 except ZeroDivisionError : raise ValueError from None ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-d9388897f61c> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from None ValueError: 内置异常 异常名称 描述 BaseException 所有异常的基类 SystemExit 解释器请求退出 KeyboardInterrupt 用户中断执行(通常是输入^C) Exception 常规错误的基类 StopIteration 迭代器没有更多的值 GeneratorExit 生成器(generator)发生异常来通知退出 StandardError 所有的内建标准异常的基类 ArithmeticError 所有数值计算错误的基类 FloatingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDivisionError 除(或取模)零 (所有数据类型) AssertionError 断言语句失败 AttributeError 对象没有这个属性 EOFError 没有内建输入,到达EOF 标记 EnvironmentError 操作系统错误的基类 IOError 输入/输出操作失败 OSError 操作系统错误 WindowsError 系统调用失败 ImportError 导入模块/对象失败 LookupError 无效数据查询的基类 IndexError 序列中没有此索引(index) KeyError 映射中没有这个键 MemoryError 内存溢出错误(对于Python 解释器不是致命的) NameError 未声明/初始化对象 (没有属性) UnboundLocalError 访问未初始化的本地变量 ReferenceError 弱引用(Weak reference)试图访问已经垃圾回收了的对象 RuntimeError 一般的运行时错误 NotImplementedError 尚未实现的方法 SyntaxError Python 语法错误 IndentationError 缩进错误 TabError Tab 和空格混用 SystemError 一般的解释器系统错误 TypeError 对类型无效的操作 ValueError 传入无效的参数 UnicodeError Unicode 相关的错误 UnicodeDecodeError Unicode 解码时的错误 UnicodeEncodeError Unicode 编码时错误 UnicodeTranslateError Unicode 转换时错误 Warning 警告的基类 DeprecationWarning 关于被弃用的特征的警告 FutureWarning 关于构造将来语义会有改变的警告 OverflowWarning 旧的关于自动提升为长整型(long)的警告 PendingDeprecationWarning 关于特性将会被废弃的警告 RuntimeWarning 可疑的运行时行为(runtime behavior)的警告 SyntaxWarning 可疑的语法的警告 UserWarning 用户代码生成的警告 参考 Python异常处理 python在异常捕获里抛出异常 异常处理","text_tokens":["类","迭代","judgement","代码","taberror","被","导致","即","实现","ioerror","计算","警告","基类","最终","声明","转换","信息","发生","判断","floatingpointerror","following","0","call","处理","indexerror","解码","对于","from","代码生成","语句","变量","零","无法","：","中","捕获","系统","该","5","访问","作用","上层","most","旧","assert","无外乎","windowserror","runtime","handling","ec5e029839e0","如果","列出","任何","调用","运行","定义","3","失败","和","尚未","keyboardinterrupt","标记","常规","值","提供","地方","禁止","程序","调用函数","long","runtimeerror","正常","数值","首先","unboundlocalerror","下文","语义","空格","tab","内存","valueerror","data","typeerror","将会","syntaxerror","操作系统","几件","机制","作为","module","错误","unicodetranslateerror","else","跟踪","somrthing","向外","时","lookuperror","更","deprecationwarning","所见","计算错误","默认","environmenterror","用户","此","unicodeerror","indentationerror","用","，","器","附加","然后","执行","一般","unicode","内置","混用","引用","\"","匹配","print","-","人为","已经","浮点","d9388897f61c","所有","一定","warning","操作","显示","overflowerror","another","assertionerror","栈","deal","查询","如","standarderror","有","检查","传播","中止","算错","...","一直","statement","运算","将来","映射","参数","函数","自定","引发","返回","自己","内建","未声明","ipython","本地","并","behavior","编码","除","回收","在","traceback","初始","致命","def","过程","传入","一条","整型","解释器","里","属性","顶层","特征","成器","取模","handled","during","通知"," ","参考","位置","except","runtimewarning","表示","一个","自定义","你","4","baseexception","限制","类型","的","oserror","syntaxwarning","模块","division","多","name1","溢出","会","_","当","eoferror","arithmeticerror","提升","行为","了","2","关于","例如","影响","没有","reference","finally","到","'","是",")","使用","到达","建","来","垃圾","above","importerror","最",":","----","00ed5b67ecd8","名称","也","recent","eb81f11bf5d9","上下","从","为长","中断","超出","可以","by","eof",",","描述","导入","不是","(","zero","将","请求","the","获得","name2","stopiteration",">","这里","抛出","或","cause","则","程序执行","referenceerror","（","继续","总会","direct","脚本","下","多个","上下文","python","c","废弃","name","异常","56b5a2b441f0","向","last","方法","true","断言","构造","特性","数据","缩进","try","都","全局","要","in","zerodivisionerror","对象","弱","被弃","作用域","相关","wrong","输入","几件事","exception","occurred","is","input","pendingdeprecationwarning","unicodeencodeerror","/","---------------------------------------------------------------------------","）","退出","notimplementederror","抛错","语法","generatorexit","weak","解释","memoryerror","systemexit","未","输出","overflowwarning","否则","标准","<","attributeerror","释器","可疑","数据类型","通常","生成器","generator","键","事件","初始化","index","systemerror","情况","索引","就","对","raise","处理程序","内","unicodedecodeerror","。","was","序列","error","自动","^","最大","依次","11326a099618","futurewarning","nameerror","改变","userwarning","无效","1","主程序","这个","keyerror","#","向上","语法错误","of","none","试图","生成"],"title":"3.1.异常","title_tokens":["异常","3.1","."]},{"location":"Python基础/3.1.异常.html#_1","text":"异常处理无外乎几件事: 断言（assert） 抛错（raise） 检查（try） 捕获（except） 处理（except, else, finally） 异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。当Python脚本发生异常时，异常会从发生异常的位置向程序上层传播。例如异常从函数向外传播到调用函数的地方，如果在这里没有被捕获，则继续向上传播，如果一直都没有被捕获，则传播到程序的最顶层，即主程序（全局作用域）。如果在主程序中也没有处理异常的程序，python将调用默认的异常处理程序，自动匹配异常的类型，然后中止程序并显示栈跟踪信息。 # 在cause_error函数中抛出异常 def cause_error (): raise Exception ( \"Somrthing is wrong\" ) # 在call_cause_error函数中调用cause_error函数 def call_cause_error (): cause_error () def deal_error (): try : cause_error () except : print ( \"Exception handled\" ) call_cause_error () ---------------------------------------------------------------------------Exception Traceback (most recent call last)<ipython-input-1-eb81f11bf5d9> in <module> ----> 1 call_cause_error() <ipython-input-1-ec5e029839e0> in call_cause_error() 1 def call_cause_error(): ----> 2 cause_error() 3 <ipython-input-1-11326a099618> in cause_error() 1 def cause_error(): ----> 2 raise Exception(\"Somrthing is wrong\") 3 Exception: Somrthing is wrong deal_error () Exception handled 如你所见，cause_error中引发的异常依次从cause_error和call_cause_error向外传播，最终导致显示一条栈跟踪信息。调用deal_error时，异常在传播到deal_error时被捕获，并被这里的try/except语句处理。 异常是Python对象，表示一个错误。异常可以作为类被定义, 也可以人为引发异常。","text_tokens":["一个","时","向外","你","类","类型","的","try","都","全局","in","所见","默认","被","导致","即","会","_","当","最终","对象","作用域","，","信息","了","然后","2","执行","发生","一般","例如","影响","call","处理","wrong","没有","几件事","finally","exception","\"","匹配","is","到","print","语句","input","-","是",")","人为","无法","中","捕获","/","---------------------------------------------------------------------------","）","最","该",":","作用","上层","显示","----","most","栈","deal","抛错","如","也","assert","recent","eb81f11bf5d9","检查","无外乎","传播","中止","从","一直","如果","ec5e029839e0","可以","调用","定义",",","3","函数","(","和","<","将","地方","引发","程序","调用函数","ipython","并",">","正常","事件","这里","抛出","在","情况","就","cause","raise","处理程序","traceback","def","则","。","程序执行","error","自动","过程","（","继续","依次","一条","11326a099618","脚本","下","几件","顶层","主程序","1","作为","python","#","向上","handled","module","错误","异常"," ","else","向","last","跟踪","somrthing","位置","except","断言","表示"],"title":"异常处理机制","title_tokens":["处理","异常","机制"]},{"location":"Python基础/3.1.异常.html#_2","text":"try : #' try语句中代码首先被运行 < statement > except ： #' 捕获任何在try中引发的异常 < statement > except < name > ： #' 捕获在try中引发的<name>异常 < statement > except < name > ， < data > : #' 如果引发了'name'异常，获得附加的数据 < statement > except ( < name1 > , < name2 >... ): #' 捕获列出的多个异常 < statement > else : #' 如果没有异常发生 < statement > finally : #' 退出try时总会执行 < statement > raise #' 人为引发错误 assert < judgement > #' 断言,判断一定要返回True否则会引发AssertionError","text_tokens":["finally","在","时","如果","列出","raise","语句","statement","数据","任何","'","运行","的",")",",","try","judgement","人为","要","：","中","代码","捕获","data","否则","总会","被","(","一定","name1","<","会",":","引发","退出","获得","返回","多个","assertionerror","#","，","name","name2","错误","了","附加",">","assert","发生","执行","判断","异常"," ","else","没有","true","首先","except","断言","..."],"title":"异常处理语句","title_tokens":["处理","异常","语句"]},{"location":"Python基础/3.1.异常.html#raise","text":"使用raise...from...语句来提供自己的异常上下文，也可以使用None来禁止上下文。 # 默认输出异常上下文 try : 1 / 0 except ZeroDivisionError : raise ValueError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 1 try: ----> 2 1/0 3 except ZeroDivisionError: ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError 5 ValueError: # 自定义上下文 try : 1 / 0 except ZeroDivisionError : raise ValueError from ZeroDivisionError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)ZeroDivisionError: The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last)<ipython-input-1-00ed5b67ecd8> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from ZeroDivisionError 5 ValueError: # 禁止上下文 try : 1 / 0 except ZeroDivisionError : raise ValueError from None ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-d9388897f61c> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from None ValueError:","text_tokens":["exception","自定义","from","occurred","4","raise","语句","下文","可以","traceback","input","的","by","-","定义",")","3","division","。","使用","输出","try",",","was","zerodivisionerror","in","d9388897f61c","来","cause","valueerror","默认","/","---------------------------------------------------------------------------","(","direct","zero","<","above","自定","5","提供",":","1","the","----","禁止","another","most","自己","上下文","00ed5b67ecd8","#","，","of","none","ipython","module","during",">","也","2","recent","异常","56b5a2b441f0"," ","last","0","call","following","上下","handling","except","..."],"title":"raise语句","title_tokens":["raise","语句"]},{"location":"Python基础/3.1.异常.html#_3","text":"异常名称 描述 BaseException 所有异常的基类 SystemExit 解释器请求退出 KeyboardInterrupt 用户中断执行(通常是输入^C) Exception 常规错误的基类 StopIteration 迭代器没有更多的值 GeneratorExit 生成器(generator)发生异常来通知退出 StandardError 所有的内建标准异常的基类 ArithmeticError 所有数值计算错误的基类 FloatingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDivisionError 除(或取模)零 (所有数据类型) AssertionError 断言语句失败 AttributeError 对象没有这个属性 EOFError 没有内建输入,到达EOF 标记 EnvironmentError 操作系统错误的基类 IOError 输入/输出操作失败 OSError 操作系统错误 WindowsError 系统调用失败 ImportError 导入模块/对象失败 LookupError 无效数据查询的基类 IndexError 序列中没有此索引(index) KeyError 映射中没有这个键 MemoryError 内存溢出错误(对于Python 解释器不是致命的) NameError 未声明/初始化对象 (没有属性) UnboundLocalError 访问未初始化的本地变量 ReferenceError 弱引用(Weak reference)试图访问已经垃圾回收了的对象 RuntimeError 一般的运行时错误 NotImplementedError 尚未实现的方法 SyntaxError Python 语法错误 IndentationError 缩进错误 TabError Tab 和空格混用 SystemError 一般的解释器系统错误 TypeError 对类型无效的操作 ValueError 传入无效的参数 UnicodeError Unicode 相关的错误 UnicodeDecodeError Unicode 解码时的错误 UnicodeEncodeError Unicode 编码时错误 UnicodeTranslateError Unicode 转换时错误 Warning 警告的基类 DeprecationWarning 关于被弃用的特征的警告 FutureWarning 关于构造将来语义会有改变的警告 OverflowWarning 旧的关于自动提升为长整型(long)的警告 PendingDeprecationWarning 关于特性将会被废弃的警告 RuntimeWarning 可疑的运行时行为(runtime behavior)的警告 SyntaxWarning 可疑的语法的警告 UserWarning 用户代码生成的警告","text_tokens":["构造","时","特性","baseexception","限制","数据","缩进","类型","的","oserror","syntaxwarning","模块","lookuperror","更","迭代","多","deprecationwarning","zerodivisionerror","计算错误","environmenterror","代码","taberror","被","用户","实现","ioerror","溢出","会","计算","警告","此","unicodeerror","基类","indentationerror","声明","用","转换","对象","eoferror","弱","被弃","arithmeticerror","提升","行为","器","了","执行","发生","floatingpointerror","相关","关于","一般","indexerror","unicode","没有","解码","reference","输入","混用","对于","引用","exception","代码生成","语句","变量","pendingdeprecationwarning","是",")","零","到达","已经","浮点","中","建","unicodeencodeerror","来","垃圾","所有","/","系统","warning","importerror","操作","访问","overflowerror","退出","notimplementederror","assertionerror","查询","语法","generatorexit","旧","weak","名称","standarderror","有","解释","windowserror","runtime","算错","为长","中断","超出","memoryerror","systemexit","调用","eof","运行","运算","未","将来","描述",",","输出","overflowwarning","导入","不是","映射","失败","参数","标准","(","和","尚未","keyboardinterrupt","attributeerror","标记","常规","值","释器","请求","可疑","数据类型","long","通常","内建","生成器","未声明","stopiteration","runtimeerror","本地","generator","键","behavior","编码","初始化","除","数值","index","systemerror","或","回收","索引","对","unboundlocalerror","语义","初始","致命","空格","内","unicodedecodeerror","序列","tab","内存","自动","referenceerror","valueerror","^","typeerror","将会","syntaxerror","最大","传入","整型","futurewarning","解释器","属性","nameerror","改变","userwarning","操作系统","无效","这个","keyerror","python","c","成器","取模","语法错误","特征","废弃","通知","错误","试图","unicodetranslateerror","异常","方法"," ","生成","断言","runtimewarning"],"title":"内置异常","title_tokens":["内置","异常"]},{"location":"Python基础/3.1.异常.html#_4","text":"Python异常处理 python在异常捕获里抛出异常 异常处理","text_tokens":["在","异常"," ","捕获","处理","python","抛出","里"],"title":"参考","title_tokens":["参考"]},{"location":"Python基础/3.2.命名空间和作用域.html","text":"命名空间 Namespace : namespace 是一个从 name 到 object 的映射。现在大部分的 namespace 通过Python字典 1 实现，将来可能会改变实现方式。 namespace：中文称为命名空间，或者名字空间。 命名空间的最重要的作用是避免名字冲突，各个命名空间是独立的，因此不同的命名空间可以重名。 Namespace 的种类 一般而言，name 产生地点决定其所处的 namespace。例如，在函数内定义的 name 会位于（函数的）局部命名空间。但使用了 global 、 nonlocal 语句会改变这种情况，这个在后面会说到。 built-in namespace ：builtins 模块定义的所有名字存在内置命名空间，这些名字包括内置函数、内置异常、内置常量、内置类型。如果是Python 2，则是 __builtin__ 模块。 global namespace ：每个模块都有全局命名空间，包括所有在模块最外层的作用域中定义的名字，例如类、函数、常量、被导入的模块。 local namespace ：相对于全局命名空间，每一个局部作用域都有一个局部命名空间。例如，函数或类所定义的命名空间，记录了函数参数、函数内的变量、类属性、类方法等。 enclosing namespace ：闭包命名空间不仅记录了当前嵌套函数内定义的变量，还记录了嵌套函数引用的外部变量。 Namespace生命周期 不同类型的命名空间有不同的生命周期： built-in：在 Python 解释器启动时创建，解释器退出时销毁 global：在模块定义被解释器读入时创建，通常也会一直保存到解释器退出，除非使用 del 语句。 local：这里要区分 function 以及 class 定义： 函数的局部命名空间：在函数调用时创建，函数返回或者产生未被捕获的异常时销毁 - 类定义的局部命名空间：在解释器读到类定义创建，离开类定义时创建class object。这个类对象实际上就是这个局部命名空间的包装（见官方对类定义的 说明 ）。 查看Namespace 局部命名空间可以通过 locals() 来访问 全局 （模块级别）命名空间可以通过 globals() 来访问 虽然都是返回命名空间，但 globals() 和 locals() 有一点不一样。 locals() 返回的是局部命名空间的副本，所以修改 locals() 对象并不会影响局部名字空间。 globals 返回是全局命名空间，而不是副本，所以修改 globals() 对象会影响全局命名空间。 # 修改局部命名空间无效 def change_local (): x = 123 print ( \"当前的局部命名空间\" , locals (), sep = \"：\" ) locals ()[ \"x\" ] = 6789 print ( \"修改locals()，并不影响x的值\" , f \"x= {x} \" , sep = \"：\" ) change_local () 当前的局部命名空间：{'x': 123} 修改locals()，并不影响x的值：x=123 # 修改全局命名空间生效 y = 123 globals ()[ \"y\" ] = 456 print ( \"修改全局命名空间生效：\" , f \"y= {y} \" ) 修改全局命名空间生效： y=456 作用域 scope : scope 是Python程序的一块文本区域（即一个代码区域），在这个区域可以直接访问namespace 。 直接访问意味着无须特性的指明引用。在Python中，直接访问是指直接使用name访问对象，如 name ，这会在命名空间搜索名字 name ；而间接访问是指使用形如 objname.attrname 的方式，即引用对象的属性，这不会在命名空间搜索名字 attrname ，而是搜索名字 objname ，再访问其属性。 换而言之，作用域其实就是一个命名空间可以发生作用的代码区域，发生作用是指命名空间可以被作用域直接访问。 作用域与命名空间的关系 命名空间保存着名字到对象的映射，映射关系在作用域中被定义，同时作用域可以通过引用命名空间的名字访问对象。代码区域可以直接引用哪个命名空间中的名字，它也就是哪个命名空间的作用域。有些代码区域可以访问多个命名空间的名字，那么它同时是多个命名空间的作用域。 作用域是静态的（它只是代码文本），而命名空间是动态的，命名空间随着解释器的执行而产生。 有些文章认为动态的作用域就是命名空间。其实并不是，命名空间是一种映射，作用域是一块代码区域。 Python对象通过命名空间被访问，而作用域则限制了Python对象的使用范围。 名字搜索顺序（LEGB） 当一行代码需要使用名字 X 所对应的值， Python会从当前层级的Namespace开始 ，并根据以下顺序，去查找名字 X ： local namespace ：包含局部名字的最内层（innermost）作用域，如函数、方法、类的内部局部作用域。 Enclosing ：根据嵌套层次从内到外搜索，包含非局部（nonlocal）非全局（nonglobal）名字的任意封闭函数的作用域。如两个嵌套的函数，内层函数的作用域是局部作用域，外层函数作用域就是内层函数的 Enclosing 作用域。 global built-in NameError ：如果 Python 在以上4个namespace找不到 X ，将放弃搜索并抛出 NameError 异常： NameError: name 'a' is not defined 程序在运行时，local、global、built-in三个namespace一定存在，但Enclosing namespace不一定存在。 Namespace和scope总结 不能在名字未定义前引用该名字（命名空间不存在该映射关系）。 built-in、global两个命名空间的引入是不能够通过代码操作的，Python 解释器会自动引入它们。注意，这里说的是引入，而不是修改。built-in命名空间是不能被修改的（已经预定义好），但global命名空间可以被Python代码修改。 类定义、函数定义、推导式会引入local命名空间 ，闭包函数定义会引入enclosing命名空间。 会导致命名空间被修改的情况： 类定义、函数定义 2. 赋值语句 3. import 语句、 if 语句、 for 语句、 while 语句5. if 、 for 、 while 语句并不会引入新的命名空间。 作用范围最大的命名空间是global namespace，但global namespace也只是模块级别的。 a 模块不能直接引用在 b 模块定义的name，即使 a 模块已经导入了整个 b 模块： import b 。除非直接导入name： from b import name 。 导入 b 模块中其中一个name： from b import name ，整个 b 模块都会被执行。因为 Python 并不知道 name 在 b.py 文档的何处，为了能够找到 name ，Python 需要执行整个 b.py。 import 语句不一定会改变global namespace，例如 import 语句写在函数内。 根据LEGB搜索规则，外层作用域不能引用内层作用域的变量。 def try_to_define_name (): '''函数中定义了名字i，并绑定了一个整数对象1''' i = 1 # 引用名字i之前，先调用函数定义i try_to_define_name () # 在引用名字i之前，明明调用了函数，定义了名字i，可是还是找不到这个名字。 print ( i ) NameError : name 'i' is not defined 虽然定义了名字 i ，但是定义在了函数的局部作用域对应的局部命名空间中，按照 LEGB 搜索规则，在全局作用域中自然访问不到局部作用域的命名空间；再者，函数调用结束后，这个命名空间被销毁了。 global 和 nonlocal 根据LEGB搜索规则，任何时候，Python程序都可以直接读取全局变量，但是却不可以在内层作用域直接改写上层变量。 可以读取全部变量，这容易理解，因为任何时候，global namespace都可以被访问。但为什么在内层作用域全局变量可以被访问，却不能被修改呢？这看起来像是Python的一个规定，但其实是很自然的事情。在Python中修改变量意味着将一个名字绑定到另一个对象，这需要使用assignment运算符 = 。 这意味着 = 左边的名字会被加入当前的命名空间，名字对应着 = 右边的对象。 例如下面的代码： a = 1 def change_a (): a = 10 change_a () a # 1 1 a = 10 语句在函数作用域中，当它被Python执行时，Python会将 a 加入函数的局部命名空间，而不会将 a 视作全局命名空间的 a 。当我们在最外层作用域引用 a 时，按照LEGB搜索规则，Python会从 a 所在的作用域对应的命名空间（即全局命名空间）开始搜索 a 对应的对象，而不会搜索局部命名空间。再者，此时函数 change_a() 执行完之后，局部命名空间已经被销毁，即使想搜索也搜索不到。 相信你从上面的叙述已经意识到，如果想让Python在内层作用域修改外层作用域的变量，那就需要让Python知道这个变量来自外层作用域。 global 语句和 nonlocal 语句正是可以起到这样的作用。 global 语句声明列在其后的所有标识符将被解析为全局变量。 使用global时有以下两条限制： 在同一代码块中，列在global语句中的所有标识符不能在该global语句前出现。 列在global 语句后的标识符不能被定义成形参，不能出现在for循环控制的目标、类定义和函数定义，或者import语句中。 CPython实现细节：当前实现并未强制履行上面两条限制 2 ，但程序不应该滥用这种自由，因为未来的版本可能会强制履行它们或者不留痕迹的改变程序含义。 nonlocal 语句声明列在其后的所有标识符 关联 到 最近的 enclosing 作用域里定义过的同名变量（不包括全局变量，只是最近的 enclosing 作用域的变量）。 def scope_test (): def do_local (): spam = \"local spam of do_local\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam of do_nonlocal\" def do_global (): global spam spam = \"global spam of do_global\" spam = \"test spam of scope_test\" # do_local函数内部的赋值不影响scope_test作用域的spam do_local () print ( \"After local assignment:\" , spam ) # do_nonlocal函数内部的赋值影响scope_test作用域的spam，但是不影响全局的spam do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) # do_global 函数内声明的spam存在于全局作用域，而不影响scope_test作用域的 do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) After local assignment: test spam of scope_test After nonlocal assignment: nonlocal spam of do_nonlocal After global assignment: nonlocal spam of do_nonlocal In global scope: global spam of do_global nonlocal 语句和 global 语句有两个不同点： 其一， global 语句只是声明标识符来存在于全局命名空间，并不会在当前作用域创建该标识符； nonlocal 语句则会在子函数命名空间中创建与父函数变量同名的标识符： gv = 'a global var' def func (): global gv lv = 'a local var' print ( locals ()) def inn_func (): nonlocal lv global gv print ( locals ()) return inn_func a = func () a () {'lv': 'a local var'} {'lv': 'a local var'} 之所以 nonlocal 语句与 global 语句的处理不同，是因为全局变量的作用域生存期很长，在模块内随时都可以访问，而父函数的局部作用域在父函数执行完毕后便会直接释放，因此 nonlocal 语句必须将父函数的标识符和引用写入enclosing namespace。 其二， global 语句可以声明全局作用域还没存在的名字，而 nonlocal 语句只能将它声明的名字关联到enclosing作用域中已经存在的绑定： # nonlocal 语句之前的eclosing作用域不存在spam 则报错 def scope_test (): def do_nonlocal (): # 父函数作用域要先定义spam，否则报错 nonlocal spam spam = \"nonlocal spam of do_nonlocal\" scope_test () File \"<ipython-input-1-e77162de9535>\", line 5 nonlocal spam ^ SyntaxError: no binding for nonlocal 'spam' found nonlocal 语句只能声明的名字会绑定到离 nonlocal 语句最近的enclosing 作用域（如果enclosing 作用域存在 nonlocal 语句声明的名字）： def scope_test (): spam = \"local spam of scope_test\" def do_local (): spam = \"local spam of do_local\" print ( \"After local assignment:\" , spam ) def do_nonlocal (): # 通过nonlocal声明将spam和最近的enclosing作用域的spam关联 # 所以关联的是do_local函数的spam nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_local () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () After local assignment: local spam of do_local After nonlocal assignment: nonlocal spam of do_nonlocal After nonlocal assignment, scope_test's spam: local spam of scope_test 因此 nonlocal 语句重新绑定的name的真实作用域是不清楚的，这取决于已经存在的name本来位于那一层作用域。 nonlocal 语句和 global 语句有一个相同点： 当前作用域不能在 nonlocal 语句和 global 语句之前绑定两者声明的标识符： # global def scope_test (): spam = \"conflict\" global spam spam = \"nonlocal spam of do_nonlocal\" scope_test () # nonlocal def scope_test (): spam = \"local spam of scope_test\" def do_nonlocal (): spam = \"conflict\" nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () File \"<ipython-input-1-d9548726e53c>\", line 5 global spam ^ SyntaxError: name 'spam' is assigned to before global declaration 类的作用域和命名空间 类定义的作用域和函数定义的作用域都可以产生局部命名空间，但它们执行机制不一样，有不小的区别。 其一，函数初始化时不会被执行，类初始化时会被执行。 Python读入函数定义时，函数不会被执行： def func (): print ( \"executed\" ) Python读入类定义时，类作用域的代码会被执行： class A : print ( \"executed_A\" ) def A_func ( self ): print ( \"executed_A_func\" ) class B : print ( \"executed_B\" ) class C : print ( \"executed_C\" ) executed_A executed_B executed_C 这看起来感觉有点不可思议，大家都是定义，为什么类定义会被执行，难道不应该是定义被引用时才执行吗？ 其实这也是很自然的事情。Python解释器读入函数定义时，只需要在当前命名空间绑定函数名，不需要创建函数的局部命名空间，自然不需要执行函数作用域的代码。 命名空间的动态性：命名空间在作用域被执行时才产生。 而类定义实际上是类局部命名空间的包装，因此Python解释器读入类定义时，不仅需要在当前命名空间绑定类名，还需要创建类局部命名空间。而命名空间在作用域被执行时才会产生，因此类定义需要在读入的时候就被执行。注意：类方法内的作用域和函数一样，是不会被执行的。 为什么读入类定义就需要创建类局部命名空间？ 因为类具有属性和方法，创建类属性就必须执行代码（进行赋值）。那为什么在读入类定义就创建类属性呢？因为类是创建实例、生成其他类（涉及继承、重载等）的对象，必须在实例之前被创建，在代码加载时就被创建有助于提高效率和降低逻辑复杂度。 另外，类还有一个特点：类可以直接被调用，不一定要先创建实例。这个特点就要求类初始化时就创建类命名空间。例如，创建一个类用于统一管理某一类常量： class Math_Constant : pi = 3.1415926 e = 2.7182818 sqrt_2 = 1.4142135 rho = 1.3247195 如果 Math_Constant 的类属性需要创建一个实例才能被调用，那就太麻烦了，而且类方法、静态方法也就没了意义。 而方法本质是函数，不会在读入定义时被执行。 为什么读入函数定义时不需要创建函数局部命名空间？ 一般来说，函数的局部命名空间主要与参数有关，而参数在函数被调用时才传入，创建了命名空间也意义不大。另外函数不像类那么复杂，也就没必要读入定义时就创建局部命名空间。 其二，类的局部命名空间不在名字搜索路径中。 例如： class A : pi = 3.1415926 def print_pi ( self ): print ( pi ) A () . print_pi () NameError : name 'pi' is not defined 类 A 是 print_pi 方法的外层作用域，按照设想， print_pi 方法中找不到变量 pi ，应该会到上一层作用域中查找，但是 print_pi 方法并没有在类 A 的作用域中查找，而是直接抛出异常。 又例如： class A (): a = 1 b = [ a + i for i in range ( 3 )] #NameError: name 'a' is not defined 执行上段代码，我们可以发现在类 A 内列表推导式无法调取 a 的值。 列表推导式也会产生局部命名空间。 但在函数中，完全没问题： def func (): a = 1 b = [ a + i for i in range ( 3 )] print ( b ) func () # [ 1 , 2 , 3 ] 因此，类 A 中的 a 不同于函数 func 中的 a 在局部命名空间中可以被任意引用。之所以强调”不可以被任意读取”，原因在于在类 A 的局部空间内， a 在当前层级的作用域是可以被直接引用的： class A (): a = 1 c = a + 2 A . c # 3 3 因此，类内可以产生局部命名空间的代码（方法、推导式等）严格上不是作用域。 脚注 参考 python的嵌套函数中局部作用域问题? Python进阶 - 对象，名字以及绑定 即 {name:object} 。 ↩ 当前的CPython已经实现第一条限制，至少在0.29.14版本的CPython中已经实现。 ↩","text_tokens":["动态","nonlocal","不留","类","冲突","释放","相同","全部","10","相对","位于","不会","代码","思议","区别","被","导致","即","before","实现","下面","存期","其一","它们","声明","包装","读到","range","范围","一般而言","而","发生","处理","123","defined","正是","from","语句","变量","e","self","无法","：","中","scope","不同于","记录","捕获","大部","e77162de9535","并未","右边","静态方法","该","5","访问","1.4142135","作用","上层","[","objname","将父","两个","很","看起来","复杂","这会","?","完毕","进阶","executed","常量","能够","提高","循环","不仅","来自","如果","所在","决定","for","某","任何","调用","运行","定义","↩","3","所处","namespace","通过","对应","那么","和","高效率","assignment","改写","2.7182818","值","而是","有些","spam","存在","程序","调用函数","以及","还是","import","吗","非","部分","不小","包括","个","整数","查找","cpython","locals","test","innermost","同名","大部分","起到","binding","syntaxerror","主要","新","取决于","式","实际上","取决","感觉","实例","找到","机制","就是","b","not",".","global","特点","pi","来说","这些","时","文章","嵌套","时候","列","销毁","d9548726e53c","强调","见","未来","成形","左边","enclosing","外层","重名","目标","离","降低","修改","封闭","任意","子函数","在于","globals","搜索","严格","只","时会","换","第一","我们","需要","两者","指明","，","赋值","说明","为","执行","用于","一般","发现","重载","内置","现在","除非","一般来说","难道","引用","实际","\"","var","关联","print","放弃","脚注","math","-","assigned","conflict","认为","其中","推导","已经","之后","逻辑","等","所","built","所有","一定","说","空间","细节","+","地点","操作","上面","闭包","两条","静态","一样","如","函数调用","后","不同点","想","或类","有","写","declaration","涉及","以上","一直","必要","版本","将来","运算","路径","上","constant","但是","种类","映射","会到","参数","按照","函数","避免","全局变量","之前","返回","其二","a","其后","让","line","具有","ipython","并","有助于","找","哪个","关系","算符","太","但","3.1415926","x","在","意味","legb","完","初始","def","何处","起来","}","应该","容易","进行","要求","传入","一条","这样","、","解释器","属性","里","又","高效","保存","事情","不同","456","着","一点","nonglobal","有点","function","产生","类内"," ","而父","重要","一层","参考","大家","未定","复杂度","像是","一个","你","加载","4","限制","未定义","不可","类型","的","模块","每个","叙述","方式","为了","报错","不像","随着","为什么","大","原因","只能","会","视作","读入","_","当","if","参","本质","0.29","称为","了","2","副本","例如","意义","影响","很长","local","没有","引入","到","不到","builtins","__","'","相同点","是",")","使用","并不知道","形","来","while","不知","同于","结束","del","{","却","同点","最","写入",":","再者","履行","外部","含义","当前","也","因为","生命周期","其他","级别","object","还","一种","顺序","还有","从","呢","最近","加入","什么","各个","define","那","绑定","可以","命名","官方","预定",",","去","即使","便","导入","不是","块","重新","管理","强制","(","to","而言","读取","调取","不可思议","解析","意识","之所以","出现","将","标识符","相信","麻烦","同一","一行","提高效率","attrname","sep",">","f","rho","这里","抛出","change","区域","后面","义好","继承","另","第一条","则","y","统一","这种","无须","动态性","名字","（","直接","而且","才能","离开","生效","意味着","file","多个","func","python","这","c","而类","name","标识","一类","滥用","异常","方法","只是","生存","本来","类名","独立","名","builtin","特性","整个","知道","规则","与","所以","try","都","全局","要","同时","理解","in","前","外","”","文本","控制","规定","虽然","于","对象","查看","py","inn","作用域","其实","列表","问题","有关","其所处","6789","do","is","input","时有","改变程序","no","完全","可是","函数参数","再","根据","每","是因为","随时","另外","内层","可能","）","时才","至少","；","三个","退出","助于","i","eclosing","解释","class","此时","？","字典","间接","看起","after","其","文档","创建","found","未","效率","局部","14","一块","不能","否则","不","]","<","父","先","之","释器","它","内部","不能引用","通常","没","周期","s","区分","初始化","gv","1.3247195","层级","自由","=","必须","总结","有助","因此","包含","情况","就","层次","清楚","或者","生命","内","。","明明","自动","^","生存期","设想","中文","最大","lv","痕迹","段","nameerror","改变","注意","无效","1","这个","对类","自然","运算符","sqrt","启动","#","指","of","真实","过","以下","生成","开始","return"],"title":"3.2.命名空间和作用域","title_tokens":[".","作用","命名","3.2","和","作用域","空间"]},{"location":"Python基础/3.2.命名空间和作用域.html#_1","text":"Namespace : namespace 是一个从 name 到 object 的映射。现在大部分的 namespace 通过Python字典 1 实现，将来可能会改变实现方式。 namespace：中文称为命名空间，或者名字空间。 命名空间的最重要的作用是避免名字冲突，各个命名空间是独立的，因此不同的命名空间可以重名。","text_tokens":["一个","各个","到","可以","命名","的","或者","将来","冲突","是","从","。","方式","：","namespace","通过","重名","映射","名字","大部分","中文","大部","实现","可能","空间","会","改变","最","避免","1",":","作用","不同","python","，","name","称为","独立"," ","重要","object","因此","部分","现在","字典"],"title":"命名空间","title_tokens":["命名","空间"]},{"location":"Python基础/3.2.命名空间和作用域.html#namespace","text":"一般而言，name 产生地点决定其所处的 namespace。例如，在函数内定义的 name 会位于（函数的）局部命名空间。但使用了 global 、 nonlocal 语句会改变这种情况，这个在后面会说到。 built-in namespace ：builtins 模块定义的所有名字存在内置命名空间，这些名字包括内置函数、内置异常、内置常量、内置类型。如果是Python 2，则是 __builtin__ 模块。 global namespace ：每个模块都有全局命名空间，包括所有在模块最外层的作用域中定义的名字，例如类、函数、常量、被导入的模块。 local namespace ：相对于全局命名空间，每一个局部作用域都有一个局部命名空间。例如，函数或类所定义的命名空间，记录了函数参数、函数内的变量、类属性、类方法等。 enclosing namespace ：闭包命名空间不仅记录了当前嵌套函数内定义的变量，还记录了嵌套函数引用的外部变量。","text_tokens":["builtin","一个","嵌套","nonlocal","类","类型","的","模块","每个","都","全局","相对","enclosing","in","位于","外层","被","会","于","作用域","，","一般而言","了","2","一般","例如","其所处","local","内置","引用","到","语句","builtins","变量","__","-","是","使用","函数参数","：","中","记录","等","所","每","built","所有","说","空间","地点","）","最","闭包","作用","外部","当前","或类","有","常量","还","不仅","如果","决定","命名","定义","局部","所处","namespace","导入","参数","函数","而言","存在","但","包括","在","情况","后面","内","则","。","这种","名字","（","、","属性","改变","这个","python","name","产生","异常","方法"," ","global","这些"],"title":"Namespace 的种类","title_tokens":[" ","的","namespace","种类"]},{"location":"Python基础/3.2.命名空间和作用域.html#namespace_1","text":"不同类型的命名空间有不同的生命周期： built-in：在 Python 解释器启动时创建，解释器退出时销毁 global：在模块定义被解释器读入时创建，通常也会一直保存到解释器退出，除非使用 del 语句。 local：这里要区分 function 以及 class 定义： 函数的局部命名空间：在函数调用时创建，函数返回或者产生未被捕获的异常时销毁 - 类定义的局部命名空间：在解释器读到类定义创建，离开类定义时创建class object。这个类对象实际上就是这个局部命名空间的包装（见官方对类定义的 说明 ）。","text_tokens":["在","实际","时","一直","到","语句","销毁","命名","类型","的","生命","-","创建","模块","定义","局部","。","使用","或者","未","类","见","要","：","in","捕获","built","（","被","函数","del","空间","解释器","会","离开","实际上","）","读入","释器","这个","退出","保存","返回","就是","不同","对类","对象","通常","python","包装","启动","，","读到","说明","函数调用","周期","function","以及","调用","也","产生","有","异常","生命周期"," ","解释","global","区分","object","官方","class","local","这里","除非"],"title":"Namespace生命周期","title_tokens":["周期","生命","namespace","生命周期"]},{"location":"Python基础/3.2.命名空间和作用域.html#namespace_2","text":"局部命名空间可以通过 locals() 来访问 全局 （模块级别）命名空间可以通过 globals() 来访问 虽然都是返回命名空间，但 globals() 和 locals() 有一点不一样。 locals() 返回的是局部命名空间的副本，所以修改 locals() 对象并不会影响局部名字空间。 globals 返回是全局命名空间，而不是副本，所以修改 globals() 对象会影响全局命名空间。 # 修改局部命名空间无效 def change_local (): x = 123 print ( \"当前的局部命名空间\" , locals (), sep = \"：\" ) locals ()[ \"x\" ] = 6789 print ( \"修改locals()，并不影响x的值\" , f \"x= {x} \" , sep = \"：\" ) change_local () 当前的局部命名空间：{'x': 123} 修改locals()，并不影响x的值：x=123 # 修改全局命名空间生效 y = 123 globals ()[ \"y\" ] = 456 print ( \"修改全局命名空间生效：\" , f \"y= {y} \" ) 修改全局命名空间生效： y=456","text_tokens":["\"","change","locals","print","可以","命名","的","'","模块",")","局部","是","。","所以","def","都",",","y","全局","：","通过","不是","不会","来","}","名字","修改","（","(","和","不","{","]","空间","globals","）","虽然","会","生效","访问","无效","_",":","值","返回","[","对象","456","一点","，","一样","#","sep","并","当前","副本","而","有","f"," ","级别","影响","local","6789","=","但","123","x"],"title":"查看Namespace","title_tokens":["查看","namespace"]},{"location":"Python基础/3.2.命名空间和作用域.html#_2","text":"scope : scope 是Python程序的一块文本区域（即一个代码区域），在这个区域可以直接访问namespace 。 直接访问意味着无须特性的指明引用。在Python中，直接访问是指直接使用name访问对象，如 name ，这会在命名空间搜索名字 name ；而间接访问是指使用形如 objname.attrname 的方式，即引用对象的属性，这不会在命名空间搜索名字 attrname ，而是搜索名字 objname ，再访问其属性。 换而言之，作用域其实就是一个命名空间可以发生作用的代码区域，发生作用是指命名空间可以被作用域直接访问。","text_tokens":["在","一个","意味","特性","引用","间接","区域","可以","其","命名","的","是","。","使用","方式","形","中","scope","namespace","无须","不会","名字","代码","再","一块","（","被","即","而言","文本","直接","空间","属性","搜索","）","之","访问","意味着","；",":","这个","而是","换","作用","就是","objname","程序","对象","python","指明","，","这","attrname","作用域","如","指","name","其实","这会","而",".","发生"," "],"title":"作用域","title_tokens":["作用域","作用"]},{"location":"Python基础/3.2.命名空间和作用域.html#_3","text":"命名空间保存着名字到对象的映射，映射关系在作用域中被定义，同时作用域可以通过引用命名空间的名字访问对象。代码区域可以直接引用哪个命名空间中的名字，它也就是哪个命名空间的作用域。有些代码区域可以访问多个命名空间的名字，那么它同时是多个命名空间的作用域。 作用域是静态的（它只是代码文本），而命名空间是动态的，命名空间随着解释器的执行而产生。 有些文章认为动态的作用域就是命名空间。其实并不是，命名空间是一种映射，作用域是一块代码区域。 Python对象通过命名空间被访问，而作用域则限制了Python对象的使用范围。","text_tokens":["动态","在","引用","文章","到","区域","可以","限制","命名","的","定义","是","则","认为","。","使用","同时","中","通过","不是","随着","名字","映射","代码","一块","（","被","那么","文本","直接","空间","解释器","）","访问","释器","作用","保存","它","有些","静态","就是","着","对象","多个","python","作用域","，","其实","范围","并","了","也","而","执行","产生","只是"," ","解释","哪个","一种","关系"],"title":"作用域与命名空间的关系","title_tokens":["作用","命名","关系","的","与","作用域","空间"]},{"location":"Python基础/3.2.命名空间和作用域.html#legb","text":"当一行代码需要使用名字 X 所对应的值， Python会从当前层级的Namespace开始 ，并根据以下顺序，去查找名字 X ： local namespace ：包含局部名字的最内层（innermost）作用域，如函数、方法、类的内部局部作用域。 Enclosing ：根据嵌套层次从内到外搜索，包含非局部（nonlocal）非全局（nonglobal）名字的任意封闭函数的作用域。如两个嵌套的函数，内层函数的作用域是局部作用域，外层函数作用域就是内层函数的 Enclosing 作用域。 global built-in NameError ：如果 Python 在以上4个namespace找不到 X ，将放弃搜索并抛出 NameError 异常： NameError: name 'a' is not defined 程序在运行时，local、global、built-in三个namespace一定存在，但Enclosing namespace不一定存在。","text_tokens":["时","嵌套","4","nonlocal","类","的","全局","enclosing","外层","in","代码","封闭","外","任意","会","搜索","当","需要","作用域","，","local","defined","is","到","不到","放弃","'","-","是","使用","：","所","根据","built","内层","一定","）","最",":","作用","三个","如","两个","当前","顺序","以上","从","如果","运行","局部","去","namespace","对应","函数","不","值","将","内部","程序","存在","a","一行","并","找","非","层级","但","个","x","抛出","查找","在","包含","层次","内","。","innermost","名字","（","、","nameerror","就是","python","nonglobal","name","not","方法","异常"," ","以下","global","开始"],"title":"名字搜索顺序（LEGB）","title_tokens":["搜索","）","legb","名字","（","顺序"]},{"location":"Python基础/3.2.命名空间和作用域.html#namespacescope","text":"不能在名字未定义前引用该名字（命名空间不存在该映射关系）。 built-in、global两个命名空间的引入是不能够通过代码操作的，Python 解释器会自动引入它们。注意，这里说的是引入，而不是修改。built-in命名空间是不能被修改的（已经预定义好），但global命名空间可以被Python代码修改。 类定义、函数定义、推导式会引入local命名空间 ，闭包函数定义会引入enclosing命名空间。 会导致命名空间被修改的情况： 类定义、函数定义 2. 赋值语句 3. import 语句、 if 语句、 for 语句、 while 语句5. if 、 for 、 while 语句并不会引入新的命名空间。 作用范围最大的命名空间是global namespace，但global namespace也只是模块级别的。 a 模块不能直接引用在 b 模块定义的name，即使 a 模块已经导入了整个 b 模块： import b 。除非直接导入name： from b import name 。 导入 b 模块中其中一个name： from b import name ，整个 b 模块都会被执行。因为 Python 并不知道 name 在 b.py 文档的何处，为了能够找到 name ，Python 需要执行整个 b.py。 import 语句不一定会改变global namespace，例如 import 语句写在函数内。 根据LEGB搜索规则，外层作用域不能引用内层作用域的变量。 def try_to_define_name (): '''函数中定义了名字i，并绑定了一个整数对象1''' i = 1 # 引用名字i之前，先调用函数定义i try_to_define_name () # 在引用名字i之前，明明调用了函数，定义了名字i，可是还是找不到这个名字。 print ( i ) NameError : name 'i' is not defined 虽然定义了名字 i ，但是定义在了函数的局部作用域对应的局部命名空间中，按照 LEGB 搜索规则，在全局作用域中自然访问不到局部作用域的命名空间；再者，函数调用结束后，这个命名空间被销毁了。","text_tokens":["一个","整个","知道","销毁","未定义","类","规则","的","模块","try","都","全局","enclosing","为了","in","外层","不会","代码","前","修改","被","导致","会","搜索","虽然","_","它们","if","需要","对象","py","作用域","，","赋值","范围","了","2","而","执行","例如","local","除非","引用","defined","引入","from","is","不到","print","语句","变量","'","-","是",")","其中","推导","并不知道","已经","可是","：","中","while","不知","根据","built","结束","一定","内层","说","空间","）","操作","该","5","访问","闭包","；",":","作用","再者","后","函数调用","两个","i","也","因为","写","解释","级别","能够","define","绑定","可以","for","命名","文档","调用","定义","预定","3","局部","即使","但是","通过","不是","namespace","导入","映射","对应","不能","按照","函数","(","to","不","先","释器","之前","存在","不能引用","调用函数","a","并","找","还是","import","关系","=","这里","但","整数","在","情况","legb","义好","内","def","。","何处","明明","自动","名字","（","最大","新","直接","、","解释器","式","改变","nameerror","注意","1","这个","找到","自然","python","#","name","b","not",".","只是"," ","global","未定"],"title":"Namespace和scope总结","title_tokens":["scope","namespace","总结","和"]},{"location":"Python基础/3.2.命名空间和作用域.html#global-nonlocal","text":"根据LEGB搜索规则，任何时候，Python程序都可以直接读取全局变量，但是却不可以在内层作用域直接改写上层变量。 可以读取全部变量，这容易理解，因为任何时候，global namespace都可以被访问。但为什么在内层作用域全局变量可以被访问，却不能被修改呢？这看起来像是Python的一个规定，但其实是很自然的事情。在Python中修改变量意味着将一个名字绑定到另一个对象，这需要使用assignment运算符 = 。 这意味着 = 左边的名字会被加入当前的命名空间，名字对应着 = 右边的对象。 例如下面的代码： a = 1 def change_a (): a = 10 change_a () a # 1 1 a = 10 语句在函数作用域中，当它被Python执行时，Python会将 a 加入函数的局部命名空间，而不会将 a 视作全局命名空间的 a 。当我们在最外层作用域引用 a 时，按照LEGB搜索规则，Python会从 a 所在的作用域对应的命名空间（即全局命名空间）开始搜索 a 对应的对象，而不会搜索局部命名空间。再者，此时函数 change_a() 执行完之后，局部命名空间已经被销毁，即使想搜索也搜索不到。 相信你从上面的叙述已经意识到，如果想让Python在内层作用域修改外层作用域的变量，那就需要让Python知道这个变量来自外层作用域。 global 语句和 nonlocal 语句正是可以起到这样的作用。 global 语句声明列在其后的所有标识符将被解析为全局变量。 使用global时有以下两条限制： 在同一代码块中，列在global语句中的所有标识符不能在该global语句前出现。 列在global 语句后的标识符不能被定义成形参，不能出现在for循环控制的目标、类定义和函数定义，或者import语句中。 CPython实现细节：当前实现并未强制履行上面两条限制 2 ，但程序不应该滥用这种自由，因为未来的版本可能会强制履行它们或者不留痕迹的改变程序含义。 nonlocal 语句声明列在其后的所有标识符 关联 到 最近的 enclosing 作用域里定义过的同名变量（不包括全局变量，只是最近的 enclosing 作用域的变量）。 def scope_test (): def do_local (): spam = \"local spam of do_local\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam of do_nonlocal\" def do_global (): global spam spam = \"global spam of do_global\" spam = \"test spam of scope_test\" # do_local函数内部的赋值不影响scope_test作用域的spam do_local () print ( \"After local assignment:\" , spam ) # do_nonlocal函数内部的赋值影响scope_test作用域的spam，但是不影响全局的spam do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) # do_global 函数内声明的spam存在于全局作用域，而不影响scope_test作用域的 do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) After local assignment: test spam of scope_test After nonlocal assignment: nonlocal spam of do_nonlocal After global assignment: nonlocal spam of do_nonlocal In global scope: global spam of do_global nonlocal 语句和 global 语句有两个不同点： 其一， global 语句只是声明标识符来存在于全局命名空间，并不会在当前作用域创建该标识符； nonlocal 语句则会在子函数命名空间中创建与父函数变量同名的标识符： gv = 'a global var' def func (): global gv lv = 'a local var' print ( locals ()) def inn_func (): nonlocal lv global gv print ( locals ()) return inn_func a = func () a () {'lv': 'a local var'} {'lv': 'a local var'} 之所以 nonlocal 语句与 global 语句的处理不同，是因为全局变量的作用域生存期很长，在模块内随时都可以访问，而父函数的局部作用域在父函数执行完毕后便会直接释放，因此 nonlocal 语句必须将父函数的标识符和引用写入enclosing namespace。 其二， global 语句可以声明全局作用域还没存在的名字，而 nonlocal 语句只能将它声明的名字关联到enclosing作用域中已经存在的绑定： # nonlocal 语句之前的eclosing作用域不存在spam 则报错 def scope_test (): def do_nonlocal (): # 父函数作用域要先定义spam，否则报错 nonlocal spam spam = \"nonlocal spam of do_nonlocal\" scope_test () File \"<ipython-input-1-e77162de9535>\", line 5 nonlocal spam ^ SyntaxError: no binding for nonlocal 'spam' found nonlocal 语句只能声明的名字会绑定到离 nonlocal 语句最近的enclosing 作用域（如果enclosing 作用域存在 nonlocal 语句声明的名字）： def scope_test (): spam = \"local spam of scope_test\" def do_local (): spam = \"local spam of do_local\" print ( \"After local assignment:\" , spam ) def do_nonlocal (): # 通过nonlocal声明将spam和最近的enclosing作用域的spam关联 # 所以关联的是do_local函数的spam nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_local () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () After local assignment: local spam of do_local After nonlocal assignment: nonlocal spam of do_nonlocal After nonlocal assignment, scope_test's spam: local spam of scope_test 因此 nonlocal 语句重新绑定的name的真实作用域是不清楚的，这取决于已经存在的name本来位于那一层作用域。 nonlocal 语句和 global 语句有一个相同点： 当前作用域不能在 nonlocal 语句和 global 语句之前绑定两者声明的标识符： # global def scope_test (): spam = \"conflict\" global spam spam = \"nonlocal spam of do_nonlocal\" scope_test () # nonlocal def scope_test (): spam = \"local spam of scope_test\" def do_nonlocal (): spam = \"conflict\" nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () File \"<ipython-input-1-d9548726e53c>\", line 5 global spam ^ SyntaxError: name 'spam' is assigned to before global declaration","text_tokens":["像是","一个","时候","时","你","列","知道","nonlocal","销毁","规则","限制","类","的","不留","与","叙述","未来","所以","全部","成形","模块","释放","都","左边","10","全局","enclosing","报错","理解","要","外层","in","位于","不会","目标","为什么","代码","离","前","修改","被","before","即","控制","只能","实现","下面","子函数","规定","存期","搜索","会","其一","视作","_","当","它们","于","声明","我们","需要","参","对象","两者","inn","作用域","，","其实","赋值","为","执行","而","2","例如","影响","处理","d9548726e53c","很长","local","引用","\"","正是","do","var","关联","is","到","不到","print","语句","input","变量","'","-","相同点","是",")","时有","改变程序","使用","no","conflict","assigned","已经","之后","：","中","scope","来","根据","是因为","所有","随时","内层","却","并未","{","e77162de9535","空间","细节","右边","可能","）","最","该","同点","上面","访问","写入","；",":","作用","上层","两条","5","再者","履行","将父","含义","后","不同点","两个","想","很","看起来","当前","也","eclosing","完毕","有","因为","还","declaration","循环","此时","？","呢","从","来自","最近","加入","什么","如果","所在","版本","看起","那","after","绑定","可以","for","任何","命名","创建","运算","定义","found","局部",",","即使","便","但是","namespace","块","通过","重新","强制","对应","不能","按照","否则","(","函数","读取","不","和","to","<","assignment","父","先","解析","改写","意识","全局变量","出现","将","之所以","它","标识符","内部","相信","其二","spam","之前","程序","存在","a","其后","让","同一","line","没","ipython","s","并",">","import","gv","相同","算符","自由","=","但","包括","必须","因此","在","意味","change","legb","就","完","cpython","test","locals","清楚","或者","另","def","内","则","。","起来","这种","同名","}","名字","^","起到","生存期","（","syntaxerror","应该","容易","lv","binding","直接","痕迹","这样","取决于","、","里","改变","取决","意味着","1","这个","file","事情","不同","自然","运算符","着","python","func","#","这","name","of","标识","滥用","真实","过","只是"," ","生存","global","以下","而父","本来","一层","开始","return"],"title":"global和 nonlocal","title_tokens":["和"," ","nonlocal","global"]},{"location":"Python基础/3.2.命名空间和作用域.html#_4","text":"类定义的作用域和函数定义的作用域都可以产生局部命名空间，但它们执行机制不一样，有不小的区别。 其一，函数初始化时不会被执行，类初始化时会被执行。 Python读入函数定义时，函数不会被执行： def func (): print ( \"executed\" ) Python读入类定义时，类作用域的代码会被执行： class A : print ( \"executed_A\" ) def A_func ( self ): print ( \"executed_A_func\" ) class B : print ( \"executed_B\" ) class C : print ( \"executed_C\" ) executed_A executed_B executed_C 这看起来感觉有点不可思议，大家都是定义，为什么类定义会被执行，难道不应该是定义被引用时才执行吗？ 其实这也是很自然的事情。Python解释器读入函数定义时，只需要在当前命名空间绑定函数名，不需要创建函数的局部命名空间，自然不需要执行函数作用域的代码。 命名空间的动态性：命名空间在作用域被执行时才产生。 而类定义实际上是类局部命名空间的包装，因此Python解释器读入类定义时，不仅需要在当前命名空间绑定类名，还需要创建类局部命名空间。而命名空间在作用域被执行时才会产生，因此类定义需要在读入的时候就被执行。注意：类方法内的作用域和函数一样，是不会被执行的。 为什么读入类定义就需要创建类局部命名空间？ 因为类具有属性和方法，创建类属性就必须执行代码（进行赋值）。那为什么在读入类定义就创建类属性呢？因为类是创建实例、生成其他类（涉及继承、重载等）的对象，必须在实例之前被创建，在代码加载时就被创建有助于提高效率和降低逻辑复杂度。 另外，类还有一个特点：类可以直接被调用，不一定要先创建实例。这个特点就要求类初始化时就创建类命名空间。例如，创建一个类用于统一管理某一类常量： class Math_Constant : pi = 3.1415926 e = 2.7182818 sqrt_2 = 1.4142135 rho = 1.3247195 如果 Math_Constant 的类属性需要创建一个实例才能被调用，那就太麻烦了，而且类方法、静态方法也就没了意义。 而方法本质是函数，不会在读入定义时被执行。 为什么读入函数定义时不需要创建函数局部命名空间？ 一般来说，函数的局部命名空间主要与参数有关，而参数在函数被调用时才传入，创建了命名空间也意义不大。另外函数不像类那么复杂，也就没必要读入定义时就创建局部命名空间。 其二，类的局部命名空间不在名字搜索路径中。 例如： class A : pi = 3.1415926 def print_pi ( self ): print ( pi ) A () . print_pi () NameError : name 'pi' is not defined 类 A 是 print_pi 方法的外层作用域，按照设想， print_pi 方法中找不到变量 pi ，应该会到上一层作用域中查找，但是 print_pi 方法并没有在类 A 的作用域中查找，而是直接抛出异常。 又例如： class A (): a = 1 b = [ a + i for i in range ( 3 )] #NameError: name 'a' is not defined 执行上段代码，我们可以发现在类 A 内列表推导式无法调取 a 的值。 列表推导式也会产生局部命名空间。 但在函数中，完全没问题： def func (): a = 1 b = [ a + i for i in range ( 3 )] print ( b ) func () # [ 1 , 2 , 3 ] 因此，类 A 中的 a 不同于函数 func 中的 a 在局部命名空间中可以被任意引用。之所以强调”不可以被任意读取”，原因在于在类 A 的局部空间内， a 在当前层级的作用域是可以被直接引用的： class A (): a = 1 c = a + 2 A . c # 3 3 因此，类内可以产生局部命名空间的代码（方法、推导式等）严格上不是作用域。","text_tokens":["名","动态","一个","时","时候","加载","不可","类","的","强调","与","所以","都","要","外层","in","不像","不会","代码","为什么","大","降低","思议","区别","被","”","原因","任意","在于","会","搜索","严格","只","其一","读入","时会","_","它们","我们","需要","对象","包装","作用域","，","其实","赋值","本质","range","列表","了","2","执行","而","用于","有关","问题","例如","意义","一般","发现","重载","没有","一般来说","难道","引用","实际","\"","defined","is","不到","print","math","e","'","变量",")","是","self","推导","完全","无法","：","中","不同于","逻辑","等","同于","另外","一定","空间","+","静态方法","时才","）","1.4142135",":","作用","助于","静态","[","一样","很","看起来","当前","也","复杂","i","有","因为","executed","解释","其他","常量","还","提高","class","还有","涉及","？","呢","不仅","什么","如果","必要","看起","那","绑定","可以","某","命名","调用","for","创建","定义","效率","路径","局部","上","3",",","constant","但是","不是","管理","会到","参数","按照","函数","(","和","不","高效率","那么","]","调取","读取","不可思议","先","之所以","2.7182818","值","释器","之前","而是","其二","麻烦","a","具有","提高效率","没","并","有助于","找","初始化","吗","1.3247195","层级","rho","=","不小","但","必须","有助","因此","3.1415926","太","在","查找","抛出","就","初始","继承","def","内","。","起来","统一","动态性","名字","设想","（","应该","进行","要求","主要","传入","直接","而且","段","解释器","、","属性","才能","实际上","nameerror","又","式","感觉","注意","实例","1","高效","这个","机制","事情","不同","自然","func","python","sqrt","#","这","c","有点","而类","name","b","一类","not","产生",".","类内","方法","异常"," ","一层","特点","pi","生成","来说","大家","类名","复杂度"],"title":"类的作用域和命名空间","title_tokens":["作用","类","命名","的","和","作用域","空间"]},{"location":"Python基础/3.2.命名空间和作用域.html#_5","text":"","text_tokens":[],"title":"脚注","title_tokens":["脚注"]},{"location":"Python基础/3.2.命名空间和作用域.html#_6","text":"python的嵌套函数中局部作用域问题? Python进阶 - 对象，名字以及绑定 即 {name:object} 。 ↩ 当前的CPython已经实现第一条限制，至少在0.29.14版本的CPython中已经实现。 ↩","text_tokens":["在","嵌套","版本","cpython","绑定","限制","第一条","的","-","14","↩","局部","。","已经","中","}","名字","函数","即","{","一条","实现","至少",":","作用","第一","对象","python","作用域","，","0.29","name","以及","当前","进阶","问题","?","."," ","object"],"title":"参考","title_tokens":["参考"]},{"location":"Python基础/3.3.闭包.html","text":"闭包的概念 以下引用自维基百科中关于闭包的介绍： 在 计算机科学 中， 闭包 （英语：Closure），又称 词法闭包 （Lexical Closure）或 函数闭包 （function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。 闭包的概念出现于60年代，最早实现闭包的程序语言是 Scheme 。之后，闭包被广泛使用于 函数式编程 语言如 ML语言 和 LISP 。很多命令式程序语言也开始支持闭包。 在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作 上值 (upvalue)。 维基百科中对于闭包的介绍，应该还是比较直观的。简而言之：内嵌函数引用了外部函数的变量，这个内嵌函数被执行时，就形成一个闭包。例如： def outside ( a , b ): a = a b = b def inner (): y = a + b print ( locals ()) inner () # 调用outside函数 inner被执行 形成闭包 outside ( 1 , 2 ) {'y': 3, 'a': 1, 'b': 2} inner() 被执行时，创建的局部命名空间会包括其引用的外层函数的变量，这样的局部命名空间被称为闭包命名空间（enclosing namespace）。 注意，在Python中，内嵌函数可以被外层函数返回，也就是Python函数可以返回闭包。 理解什么是闭包不难，但问题在于闭包有什么作用呢？ 闭包的作用 闭包的独特之处在于它可以绑定外部函数的变量，即使生成闭包的环境（外层函数）已经释放，闭包仍然存在。 这个过程很像类生成实例，不同的是外部函数只在调用时生成命名空间，执行完毕后其命名空间就会释放，而类的命名空间在读入定义时创建，一般Python解释器退出才释放命名空间。因此对一些需要重用的功能且不足以定义为类的行为，使用闭包会比使用类占用更少的资源，且更轻巧灵活。 例如：假设我们仅仅想打印出各类动物的叫声，分别以类和闭包来实现： # 类实现 class Animal ( object ): def __init__ ( self , animal ): self . animal = animal def sound ( self , voice ): print ( self . animal , ':' , voice , \"...\" ) dog = Animal ( \"dog\" ) dog . sound ( \"wangwang\" ) dog . sound ( \"wowo\" ) dog : wangwang ... dog : wowo ... # 闭包实现 def voice ( animal ): def sound ( voc ): print ( animal , ':' , voc , \"...\" ) return sound dog = voice ( \"dog\" ) dog ( \"wangwang\" ) dog ( \"wowo\" ) dog : wangwang ... dog : wowo ... 输出结果是完全一样的，但显然类的实现相对繁琐，且这里只是想输出一下动物的叫声，定义一个 Animal 类未免小题大做，而且 voice 函数在执行完毕后，其命名空间就已经释放，但 Animal 类及其实例 dog 的相应属性却一直贮存在内存中。而这种内存占用是没有必要的。 除此之外，闭包还有其他作用。闭包可以减少函数参数的数目，因此可以用于封装。这对并行计算也非常有用，比如可以让每台电脑负责一个函数的计算。另外，闭包在Python中有一种重要的应用——装饰器。这个会在装饰器的文章讲述。 闭包作用域与命名空间 来看一个典型的 闭包 结构： gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv = [ 'gv' ] + gv # UnboundLocalError:local variable 'gv' referenced before assignment lv = [] def inn_func (): lv = lv + [ v ] # UnboundLocalError:local variable 'lv' referenced before assignment gv . insert ( 1 , lv [ 0 ]) return gv return inn_func 这段代码似乎没有问题，赋值操作从右到左执行，先从右边的 gv 、 lv 开始执行代码，此时局部作用域还没有 gv 变量，局部作用域也没有 lv 变量，Python应该会访问外层作用域的 gv 、 lv 变量。但实际调用 func() 函数时，上面两处对 gv 和 lv 进行赋值操作的地方都会触发 UnboundLocalError 。 这是因为 Python 在执行函数前，会首先生成各层命名空间和作用域 ，因此 Python 在执行赋值前会将 func 内的 'gv' 'lv' 写入局部命名空间和闭包命名空间： dict_局部命名空间.update({“gv”:['gv'] + gv}) dict_闭包命名空间.update({“lv”:['lv'] + lv}) 当 Python 执行赋值时，按照LEGB搜索规则，会先在局部作用域、闭包作用域内发现 gv 和 lv 标识符，但 gv 和 lv 在局部命名空间和闭包命名空间内都没有绑定对象，从而引发错误。 这段代码本意只是想让具有对象的全局变量 gv 和局部变量 lv 参与运算，而不是局部命名空间中的 gv 和闭包命名空间中的 lv 。为了避免类似的情况发生， Python 引入了 global 、 nonlocal 语句来说明所修饰的 gv 、 lv 分别来自全局命名空间和局部命名空间 ，声明之后，就可以在 func 和 inn_func 内直接改写上层命名空间内 gv 和 lv 的值： gv = [ 'a' , 'global' , 'var' ] print ( \"gv的内存地址\" , id ( gv )) def func ( v ): global gv print ( \"gv的内存地址\" , id ( gv )) gv = [ 'gv' ] + gv lv = [] print ( \"lv的内存地址\" , id ( lv )) def inn_func (): nonlocal lv print ( \"lv的内存地址\" , id ( lv )) lv = lv + [ v ] gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () gv的内存地址 1484188467336 gv的内存地址 1484188467336 lv的内存地址 1484188467336 lv的内存地址 1484188467336 ['gv', 'is', 'a', 'global', 'var'] 如上，全局变量 gv 值被函数改写了， inn_func 修改的也确实是父函数 lv 的值 （依据内存地址判断）。 借壳 那么是不是不使用 global 和 nonlocal 就不能达到上面的目的呢？来看看下面这段代码： gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv . insert ( 0 , 'gv' ) lv = [] print ( \"lv的内存地址\" , id ( lv )) def inn_func (): lv . append ( v ) print ( \"lv的内存地址\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv的内存地址 1484150018632 lv的内存地址 1484150018632 ['gv', 'is', 'a', 'global', 'var'] 可以发现，执行结果同上面完全一致，问题自然来了：“为什么不用 global nonlocal 也可以改写全局变量 gv 和父函数变量 lv 的值？ 为了看清楚这个过程，我们将上面的 gv.insert(0, 'gv') 和 lv.append(v) 改写为 gv[0:0] = ['gv'] 和 lv[:] = [v] ： gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv [ 0 : 0 ] = [ 'gv' ] lv = [] print ( \"lv的内存地址\" , id ( lv )) def inn_func (): lv [:] = [ v ] print ( \"lv的内存地址\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv的内存地址 1484192557512 lv的内存地址 1484192557512 ['gv', 'is', 'a', 'global', 'var'] 执行结果完全一致，事实上两者之间的本质也是完全一样的。 .insert() 、 .append() 方法并没有修改 gv 和 lv ，而是修改 gv 和 lv 的元素 gv[0:0] 和 lv[:] ，因此 gv 和 lv 并没有被加入局部命名空间。因此，不需要 global 和 nonlocal 修饰就可以直接改写， 这就是“借壳”。 另外，也是借助了list对象的mutable性质。 在 nonlocal 尚未引入 Python 中，比如 Python 2.x 若要在子函数中改写父函数变量的值就得通过这种方法。","text_tokens":["上值","variable","nonlocal","类","创造","繁琐","释放","各层","相同","相对","同","代码","被","before","修饰","实现","下面","仍然","计算","dog","1484188467336","很多","声明","事实","闭包会","而","发生","判断","比较","0","得","计算机科学","对于","语句","变量","ml","self","两者之间","：","中","触发","右边","一旦","inner","各类","访问","作用","上层","内存地址","[","前会","很","完毕","lexical","会先","来自","如果","简而言之","调用","运行","定义","3","贮存","假设","namespace","通过","那么","和","尚未","assignment","改写","值","地方","而是","未免","存在","程序","以及","需","还是","首先","处","list","包括","locals","装饰","unboundlocalerror","中有","广泛","出","维基","60","内存","应用","概念","式","实例","就是","局部变量","b","错误",".","例外","达到","global","id","灵活","时","文章","自","嵌套","更","enclosing","外层","参与","百科","修改","在于","子函数","搜索","只","仅仅","我们","需要","两者","，","赋值","说明","器","为类","分别","执行","打印","用于","为","英语","一般","发现","引用","实际","\"","var","print","看清","认为","其中","已经","之后","比","所","+","空间","维基百科","操作","上面","闭包","结构","不足以","一样","性质","如","后","wowo","想","voice","有","1484192557512","才","...","动物","一直","必要","运算","上","命令","称作","本意","资源","参数","按照","函数","最早","组合而成","避免","全局变量","引发","返回","说法","a","具有","让","并","但","两处","x","元素","在","legb","def","wangwang","相应","closures","}","典型","过程","电脑","应该","进行","这样","解释器","、","属性","封装","看清楚","不同","与其","function","产生","语言","voc"," ","重要","closure","一个","的","从右到左","lisp","scheme","为了","及其","依据","命令式","为什么","会","由","读入","_","当","地址","本质","来看","行为","且","称为","了","2","关于","例如","没有","local","引入","'","__","是",")","使用","维基百","目的","数目","讲述","来","介绍","{","却","足以","以类","一下","写入",":","程序语言","外部","比如","算机","一些","也","因为","其他","一种","object","v","还","显然","还有","呢","sound","从","加入","什么","绑定","可以","命名",",","即使","不是","(","而言","功能","出现","将","标识符","完全一致","一同","这里","或","包来","类似","支持","mutable","像","另","则","y","看看","1484150018632","这种","组合","除此之外","事实上","实体","（","而且","直接","离开","借助","多个","func","python","这","而类","标识","重用","小题大做","只是","方法","确实","是不是","直观","规则","与","所以","若要","都","全局","理解","前","”","编程","小题","之间","于","animal","独特","之外","并行","对象","inn","作用域","每台","问题","相关","outside","叫声","环境","减少","is","—","“","完全","函数参数","是因为","不难","另外","可能","轻巧","）","又称","退出","科学","负责","结果","解释","referenced","class","此时","？","insert","其","形成","创建","局部","输出","不能","占用","不","]","更少","父","先","之","释器","它","内部","不足","闭","gv","包被","自由","=","似乎","因此","一致","年代","包含","内嵌","dict","情况","就","对","清楚","内","。","并行计算","append","update","lv","段","非常","注意","1","这个","自然","不用","upvalue","#","词法","借壳","计算机","init","以下","生成","开始","从而","除此","return","有用"],"title":"3.3.闭包","title_tokens":["3.3",".","闭包"]},{"location":"Python基础/3.3.闭包.html#_1","text":"以下引用自维基百科中关于闭包的介绍： 在 计算机科学 中， 闭包 （英语：Closure），又称 词法闭包 （Lexical Closure）或 函数闭包 （function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。 闭包的概念出现于60年代，最早实现闭包的程序语言是 Scheme 。之后，闭包被广泛使用于 函数式编程 语言如 ML语言 和 LISP 。很多命令式程序语言也开始支持闭包。 在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作 上值 (upvalue)。 维基百科中对于闭包的介绍，应该还是比较直观的。简而言之：内嵌函数引用了外部函数的变量，这个内嵌函数被执行时，就形成一个闭包。例如： def outside ( a , b ): a = a b = b def inner (): y = a + b print ( locals ()) inner () # 调用outside函数 inner被执行 形成闭包 outside ( 1 , 2 ) {'y': 3, 'a': 1, 'b': 2} inner() 被执行时，创建的局部命名空间会包括其引用的外层函数的变量，这样的局部命名空间被称为闭包命名空间（enclosing namespace）。 注意，在Python中，内嵌函数可以被外层函数返回，也就是Python函数可以返回闭包。 理解什么是闭包不难，但问题在于闭包有什么作用呢？","text_tokens":["一个","时","上值","自","嵌套","直观","创造","的","lisp","所以","相同","scheme","enclosing","理解","外层","命令式","代码","百科","被","实现","在于","编程","会","由","计算","于","很多","，","称为","了","2","执行","相关","问题","关于","英语","比较","例如","outside","计算机科学","引用","对于","环境","print","变量","'","是",")","认为","ml","使用","其中","维基百","已经","：","中","之后","介绍","所","不难","{","可能","+","空间","）","维基百科","一旦","inner","闭包",":","又称","作用","程序语言","外部","如","科学","算机","一些","也","有","一种","lexical","？","呢","如果","什么","简而言之","可以","其","形成","调用","命名","运行","定义","创建","命令",",","3","局部","即使","称作","namespace","函数","最早","和","不","组合而成","(","而言","出现","将","它","内部","返回","说法","存在","程序","a","一同","闭","以及","需","还是","包被","自由","=","但","包括","或","在","年代","支持","包含","内嵌","就","locals","广泛","另","def","则","y","。","维基","60","closures","组合","概念","}","实体","（","应该","这样","式","离开","注意","实例","1","这个","就是","不同","多个","python","与其","upvalue","#","词法","b","function","计算机","产生","语言","例外"," ","以下","closure","开始"],"title":"闭包的概念","title_tokens":["概念","的","闭包"]},{"location":"Python基础/3.3.闭包.html#_2","text":"闭包的独特之处在于它可以绑定外部函数的变量，即使生成闭包的环境（外层函数）已经释放，闭包仍然存在。 这个过程很像类生成实例，不同的是外部函数只在调用时生成命名空间，执行完毕后其命名空间就会释放，而类的命名空间在读入定义时创建，一般Python解释器退出才释放命名空间。因此对一些需要重用的功能且不足以定义为类的行为，使用闭包会比使用类占用更少的资源，且更轻巧灵活。 例如：假设我们仅仅想打印出各类动物的叫声，分别以类和闭包来实现： # 类实现 class Animal ( object ): def __init__ ( self , animal ): self . animal = animal def sound ( self , voice ): print ( self . animal , ':' , voice , \"...\" ) dog = Animal ( \"dog\" ) dog . sound ( \"wangwang\" ) dog . sound ( \"wowo\" ) dog : wangwang ... dog : wowo ... # 闭包实现 def voice ( animal ): def sound ( voc ): print ( animal , ':' , voc , \"...\" ) return sound dog = voice ( \"dog\" ) dog ( \"wangwang\" ) dog ( \"wowo\" ) dog : wangwang ... dog : wowo ... 输出结果是完全一样的，但显然类的实现相对繁琐，且这里只是想输出一下动物的叫声，定义一个 Animal 类未免小题大做，而且 voice 函数在执行完毕后，其命名空间就已经释放，但 Animal 类及其实例 dog 的相应属性却一直贮存在内存中。而这种内存占用是没有必要的。 除此之外，闭包还有其他作用。闭包可以减少函数参数的数目，因此可以用于封装。这对并行计算也非常有用，比如可以让每台电脑负责一个函数的计算。另外，闭包在Python中有一种重要的应用——装饰器。这个会在装饰器的文章讲述。","text_tokens":["一个","时","文章","类","的","释放","繁琐","更","除此","相对","及其","外层","实现","在于","会","小题","仍然","只","dog","计算","读入","animal","独特","仅仅","我们","需要","之外","并行","，","行为","每台","器","且","闭包会","为类","分别","执行","打印","而","用于","一般","例如","没有","叫声","环境","\"","减少","—","print","变量","__","'","是",")","self","使用","完全","已经","函数参数","：","中","数目","讲述","比","另外","却","足以","空间","以类","一下","轻巧","）","各类","闭包",":","作用","退出","不足以","外部","一样","比如","后","负责","wowo","想","很","一些","voice","也","完毕","结果","解释","其他","object","一种","才","class","显然","还有","sound","...","动物","一直","必要","绑定","可以","其","命名","调用","创建","定义",",","即使","输出","假设","贮存","资源","参数","占用","函数","(","和","更少","功能","之","释器","它","不足","未免","存在","让","闭","处","=","但","这里","因此","包来","在","就","对","装饰","中有","像","出","def","wangwang","。","相应","并行计算","内存","这种","除此之外","应用","过程","电脑","（","而且","解释器","属性","非常","封装","实例","这个","不同","python","#","这","而类",".","重用","init","小题大做","voc"," ","只是","重要","生成","灵活","return","有用"],"title":"闭包的作用","title_tokens":["作用","的","闭包"]},{"location":"Python基础/3.3.闭包.html#_3","text":"来看一个典型的 闭包 结构： gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv = [ 'gv' ] + gv # UnboundLocalError:local variable 'gv' referenced before assignment lv = [] def inn_func (): lv = lv + [ v ] # UnboundLocalError:local variable 'lv' referenced before assignment gv . insert ( 1 , lv [ 0 ]) return gv return inn_func 这段代码似乎没有问题，赋值操作从右到左执行，先从右边的 gv 、 lv 开始执行代码，此时局部作用域还没有 gv 变量，局部作用域也没有 lv 变量，Python应该会访问外层作用域的 gv 、 lv 变量。但实际调用 func() 函数时，上面两处对 gv 和 lv 进行赋值操作的地方都会触发 UnboundLocalError 。 这是因为 Python 在执行函数前，会首先生成各层命名空间和作用域 ，因此 Python 在执行赋值前会将 func 内的 'gv' 'lv' 写入局部命名空间和闭包命名空间： dict_局部命名空间.update({“gv”:['gv'] + gv}) dict_闭包命名空间.update({“lv”:['lv'] + lv}) 当 Python 执行赋值时，按照LEGB搜索规则，会先在局部作用域、闭包作用域内发现 gv 和 lv 标识符，但 gv 和 lv 在局部命名空间和闭包命名空间内都没有绑定对象，从而引发错误。 这段代码本意只是想让具有对象的全局变量 gv 和局部变量 lv 参与运算，而不是局部命名空间中的 gv 和闭包命名空间中的 lv 。为了避免类似的情况发生， Python 引入了 global 、 nonlocal 语句来说明所修饰的 gv 、 lv 分别来自全局命名空间和局部命名空间 ，声明之后，就可以在 func 和 inn_func 内直接改写上层命名空间内 gv 和 lv 的值： gv = [ 'a' , 'global' , 'var' ] print ( \"gv的内存地址\" , id ( gv )) def func ( v ): global gv print ( \"gv的内存地址\" , id ( gv )) gv = [ 'gv' ] + gv lv = [] print ( \"lv的内存地址\" , id ( lv )) def inn_func (): nonlocal lv print ( \"lv的内存地址\" , id ( lv )) lv = lv + [ v ] gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () gv的内存地址 1484188467336 gv的内存地址 1484188467336 lv的内存地址 1484188467336 lv的内存地址 1484188467336 ['gv', 'is', 'a', 'global', 'var'] 如上，全局变量 gv 值被函数改写了， inn_func 修改的也确实是父函数 lv 的值 （依据内存地址判断）。","text_tokens":["一个","时","variable","nonlocal","规则","的","从右到左","各层","都","全局","为了","外层","依据","参与","代码","前","修改","被","”","before","修饰","会","搜索","1484188467336","_","当","地址","声明","对象","inn","作用域","，","来看","赋值","说明","了","问题","执行","而","发生","分别","判断","0","发现","local","没有","实际","\"","var","引入","is","print","语句","变量","'","“",")","是","之后","：","中","来","触发","是因为","所","{","+","空间","右边","）","操作","写入","上面","访问","闭包","结构",":","作用","上层","内存地址","[","前会","如","想","也","因为","v","还","referenced","此时","从","会先","来自","绑定","insert","可以","命名","调用","运算","上",",","局部","本意","不是","按照","(","函数","和","]","assignment","父","先","避免","改写","全局变量","值","将","地方","引发","标识符","a","具有","让","gv","首先","=","两处","但","似乎","因此","在","类似","情况","dict","legb","就","对","unboundlocalerror","def","内","。","内存","典型","}","update","（","应该","进行","lv","直接","段","、","1","func","python","#","这","局部变量","标识","错误",".","只是"," ","global","确实","生成","开始","id","从而","return"],"title":"闭包作用域与命名空间","title_tokens":["闭包","作用","命名","与","作用域","空间"]},{"location":"Python基础/3.3.闭包.html#_4","text":"那么是不是不使用 global 和 nonlocal 就不能达到上面的目的呢？来看看下面这段代码： gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv . insert ( 0 , 'gv' ) lv = [] print ( \"lv的内存地址\" , id ( lv )) def inn_func (): lv . append ( v ) print ( \"lv的内存地址\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv的内存地址 1484150018632 lv的内存地址 1484150018632 ['gv', 'is', 'a', 'global', 'var'] 可以发现，执行结果同上面完全一致，问题自然来了：“为什么不用 global nonlocal 也可以改写全局变量 gv 和父函数变量 lv 的值？ 为了看清楚这个过程，我们将上面的 gv.insert(0, 'gv') 和 lv.append(v) 改写为 gv[0:0] = ['gv'] 和 lv[:] = [v] ： gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv [ 0 : 0 ] = [ 'gv' ] lv = [] print ( \"lv的内存地址\" , id ( lv )) def inn_func (): lv [:] = [ v ] print ( \"lv的内存地址\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv的内存地址 1484192557512 lv的内存地址 1484192557512 ['gv', 'is', 'a', 'global', 'var'] 执行结果完全一致，事实上两者之间的本质也是完全一样的。 .insert() 、 .append() 方法并没有修改 gv 和 lv ，而是修改 gv 和 lv 的元素 gv[0:0] 和 lv[:] ，因此 gv 和 lv 并没有被加入局部命名空间。因此，不需要 global 和 nonlocal 修饰就可以直接改写， 这就是“借壳”。 另外，也是借助了list对象的mutable性质。 在 nonlocal 尚未引入 Python 中，比如 Python 2.x 若要在子函数中改写父函数变量的值就得通过这种方法。","text_tokens":["nonlocal","的","若要","全局","为了","同","代码","为什么","修改","被","”","修饰","下面","子函数","_","之间","地址","我们","需要","两者","对象","inn","，","事实","本质","了","问题","执行","为","2","0","发现","得","没有","\"","var","引入","is","print","看清","变量","'","“",")","是","完全","使用","两者之间","目的","：","中","来","另外","空间","上面",":","内存地址","[","一样","性质","比如","也","结果","v","1484192557512","？","呢","加入","什么","insert","可以","命名",",","局部","通过","不是","不能","那么","(","和","不","函数","]","尚未","父","改写","全局变量","值","将","而是","a","完全一致","并","gv","=","list","x","因此","一致","元素","在","就","清楚","mutable","def","。","看看","1484150018632","内存","append","这种","过程","lv","直接","段","、","1","借助","这个","看清楚","就是","自然","不用","func","python","这","借壳",".","达到","方法"," ","global","id","return","是不是","事实上"],"title":"借壳","title_tokens":["借壳"]},{"location":"Python基础/3.4.装饰器.html","text":"装饰器简述 有时候，我们需要给一个函数添加新功能。那么有一种做法就是修改原函数的代码，直接添加新功能。但这总做法有时未免太繁琐。在python中，直接给原函数套上装饰就可以实现这个需求。 假设有一个这样的函数： def hello (): return 'hello world' # hello函数的名字 print ( \"hello函数的名字：\" , hello . __name__ ) hello函数的名字： hello 现在我们想增强 hello() 函数的功能，希望给返回加上 HTML 标签，比如 <i>hello world</i> ，但有一个要求，不改变原来 hello() 函数的定义。 那么可以这样做： def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped 要注意的是，makeitalic函数的参数是一个函数，返回的结果是wrapped函数。 # 给hello函数套上makeitalic函数 # makeitalic函数返回wrapped函数 # 实际上此时hello变成了wrapped函数 hello = makeitalic ( hello ) 将 hello 函数作为参数传入 makeitalic 函数， makeitalic 函数返回wrapped函数，名字 hello 与 wrapped 函数绑定。此时名字 hello 代表了一个函数，也就是 wrapped 函数有了新的名字—— hello 。 # 可以看出hello函数的名字变了 print ( \"hello函数的名字：\" , hello . __name__ ) hello函数的名字： wrapped 总结一下：为了增强原函数 hello 的功能，我们定义了一个函数，它接收原函数作为参数，并返回一个新的函数。 事实上， makeitalic 就是一个装饰器（decorator），它『装饰』了函数 hello ，并返回一个函数，将其赋给 hello 。 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello ）为参数，并返回一个包装后的函数（比如上面的 wrapped ）给被装饰函数（ hello ）。 装饰器的一般使用形式 在python中，装饰器一般这样用： @decorator def func (): pass 等价于下面的形式 ： def func (): pass func = decorator ( func ) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如 @decorator_one @decorator_two def func (): pass 等价于： def func (): pass func = decorator_one ( decorator_two ( func )) 装饰器还可以带参数，比如： @decorator ( arg1 , arg2 ) def func (): pass 等价于： def func (): pass func = decorator ( arg1 , arg2 )( func ) 例子： def makeitalic2 ( func ): return \"<i>\" + func () + \"</i>\" @makeitalic def hello_2 (): return 'hello world' def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped hello_2 () ' <i> hello world </i> ' 如果返回的不是函数就会这样： @makeitalic def hello_3 (): return 'hello world' def makeitalic ( func ): return \"<i>\" + func () + \"</i>\" hello_3 <function __main__.makeitalic.<locals>.wrapped()> 对带参数的函数进行装饰 前面的例子中，被装饰的函数 hello() 是没有带参数的，我们看看被装饰函数带参数的情况。对前面例子中的 hello() 函数进行改写，使其带参数，如下： def makeitalic ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<i>' + ret + '</i>' return wrapped @makeitalic def hello ( name ): return 'hello %s ' % name @makeitalic def hello2 ( name1 , name2 ): return 'hello %s , %s ' % ( name1 , name2 ) hello ( 'Jack' ) hello2 ( 'Jack' , \"Lusis\" ) 由于函数 hello 带参数，因此内嵌包装函数 wrapped 需要改变。 带参数的装饰器 上面的例子，我们增强了函数 hello 的功能，给它的返回加上了标签 <i>...</i> ，现在，我们想改用标签 <b>...</b> 或 <p>...</p> 。是不是要像前面一样，再定义一个类似 makeitalic 的装饰器呢？其实，我们可以定义一个函数，将标签作为参数，返回一个装饰器，比如： def wrap_in_tag ( tag ): def decorator ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<' + tag + '>' + ret + '</' + tag + '>' return wrapped return decorator 生成想要的装饰器了： makebold = wrap_in_tag ( 'b' ) # 根据 'b' 返回 makebold 生成器 @makebold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) ' <b> hello world </b> ' 上面的形式也可以写得更加简洁： @wrap_in_tag ( 'b' ) def hello ( name ): return 'hello %s ' % name 多个装饰器 现在，让我们来看看多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。 def makebold ( func ): def wrapped (): return '<b>' + func () + '</b>' return wrapped def makeitalic ( func ): def wrapped (): return '<i>' + func () + '</i>' return wrapped @makebold @makeitalic def hello (): return 'hello world' 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于： def hello (): return 'hello world' hello = makebold ( makeitalic ( hello )) 调用函数 hello： hello () ' <b><i> hello world </i></b> ' 基于类的装饰器 前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子： class Bold ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self , * args , ** kwargs ): return '<b>' + self . func ( * args , ** kwargs ) + '</b>' @Bold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) 可以看到，类 Bold 有两个方法： __init__() ：它接收一个函数作为参数，也就是被装饰的函数 __call__() ：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用 还可以让类装饰器带参数： class Tag ( object ): def __init__ ( self , tag ): self . tag = tag def __call__ ( self , func ): def wrapped ( * args , ** kwargs ): return \"< {tag} > {res} </ {tag} >\" . format ( res = func ( * args , ** kwargs ), tag = self . tag ) return wrapped @Tag ( 'b' ) def hello ( name ): return 'hello %s ' % name 需要注意的是，如果类装饰器有参数， 则 __init__ 接收参数，而 __call__ 接收 func。 装饰器的副作用 前面提到，使用装饰器有一个瑕疵，就是被装饰的函数，它的函数名称已经不是原来的名称了，回到最开始的例子： def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' 函数 hello 被 makeitalic 装饰后，它的函数名称已经改变了： hello . __name__ 'wrapped' 为了消除这样的副作用，Python 中的 functools 包提供了一个 wraps 的装饰器： from functools import wraps def makeitalic ( func ): @wraps ( func ) # 加上 wraps 装饰器 def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' hello . __name__ 'hello' 事实上，装饰器就是闭包的一种应用，但它比较特别，接收被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。","text_tokens":["动态","例子","一个","时候","时","回到","限制","%","one","的","繁琐","与","见","类","都","要","为了","in","arg2","ret","代码","离","jack","修改","被","原来","name1","其带","实现","下面","简洁","会","functools","起","_","two","于","我们","需要","用","对象","包装","，","事实","本质","其实","器","有时候","了","标签","为","2","而","比较","相当","一般","特别","总","hello2","添加","器先","call","没有","现在","实际","代表","\"","from","增强","—","print","给","副作用","赋给","'","__","前面",")","是","形式","使用","self","以","已经","：","中","更加","来","再","根据","当于","/","对带","{","接收","+","一下","makeitalic","高阶","）","最","上面","未免太","闭包",":","作用","wraps","变成","写得","decorator","一样","比如","器带","后","函数调用","两个","看出","名称","想","i","也","或类","有","结果","makeitalic2","一种","还","object","class","此时","等价","？","做法","有时","...","呢","简单","瑕疵","最近","消除","如果","使","__.","绑定","器有","可以","调用","相当于","定义","上","包",",","3","改用","假设","bold","不是","可","@","参数","函数","那么","(","不","pass","<","功能","』","改写","提供","将","main","它","需求","返回","未免","如下","调用函数","生成器","让","name2","没","s","并","原函数",">","几行","简述","import","kwargs","其赋","makebold","基于","=","但","带","总结","最后","因此","或","在","类似","内嵌","情况","就","locals","装饰","做","对","像","看","args","def","则","。","看看","加上","这种","套上","应用","wrap","}","名字","world","变","要求","传入","（","进行","新","直接","这样","改变","实际上","由于","注意","arg1","这个","希望","『","p","就是","res","多个","wrapped","func","python","作为","#","这","html","lusis","tag","成器","name","想要","b","提到","看到","function",".","format","init","方法"," ","hello","生成","开始","*","return","是不是","事实上"],"title":"3.4.装饰器","title_tokens":["器","3.4","装饰","."]},{"location":"Python基础/3.4.装饰器.html#_1","text":"有时候，我们需要给一个函数添加新功能。那么有一种做法就是修改原函数的代码，直接添加新功能。但这总做法有时未免太繁琐。在python中，直接给原函数套上装饰就可以实现这个需求。 假设有一个这样的函数： def hello (): return 'hello world' # hello函数的名字 print ( \"hello函数的名字：\" , hello . __name__ ) hello函数的名字： hello 现在我们想增强 hello() 函数的功能，希望给返回加上 HTML 标签，比如 <i>hello world</i> ，但有一个要求，不改变原来 hello() 函数的定义。 那么可以这样做： def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped 要注意的是，makeitalic函数的参数是一个函数，返回的结果是wrapped函数。 # 给hello函数套上makeitalic函数 # makeitalic函数返回wrapped函数 # 实际上此时hello变成了wrapped函数 hello = makeitalic ( hello ) 将 hello 函数作为参数传入 makeitalic 函数， makeitalic 函数返回wrapped函数，名字 hello 与 wrapped 函数绑定。此时名字 hello 代表了一个函数，也就是 wrapped 函数有了新的名字—— hello 。 # 可以看出hello函数的名字变了 print ( \"hello函数的名字：\" , hello . __name__ ) hello函数的名字： wrapped 总结一下：为了增强原函数 hello 的功能，我们定义了一个函数，它接收原函数作为参数，并返回一个新的函数。 事实上， makeitalic 就是一个装饰器（decorator），它『装饰』了函数 hello ，并返回一个函数，将其赋给 hello 。 像上面的情况，可以动态修改函数（或类）功能的函数就是装饰器。本质上，它是一个高阶函数，以被装饰的函数（比如上面的 hello ）为参数，并返回一个包装后的函数（比如上面的 wrapped ）给被装饰函数（ hello ）。","text_tokens":["动态","一个","时候","的","繁琐","与","要","为了","代码","修改","被","原来","实现","我们","需要","包装","，","事实","本质","器","有时候","了","标签","为","总","添加","现在","实际","代表","\"","增强","—","print","给","'","__",")","是","以","：","中","/","接收","+","一下","makeitalic","高阶","）","上面","未免太",":","变成","decorator","比如","后","看出","想","i","也","或类","有","结果","一种","此时","做法","有时","绑定","可以","定义","上",",","假设","参数","函数","那么","(","不","<","功能","』","将","它","需求","返回","未免","并","原函数",">","其赋","=","但","总结","在","情况","就","装饰","做","像","def","。","加上","套上","名字","world","变","要求","传入","（","新","直接","这样","改变","实际上","注意","这个","希望","『","就是","wrapped","func","python","作为","#","这","html","name","."," ","hello","return","事实上"],"title":"装饰器简述","title_tokens":["装饰","器","简述"]},{"location":"Python基础/3.4.装饰器.html#_2","text":"在python中，装饰器一般这样用： @decorator def func (): pass 等价于下面的形式 ： def func (): pass func = decorator ( func ) 装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如 @decorator_one @decorator_two def func (): pass 等价于： def func (): pass func = decorator_one ( decorator_two ( func )) 装饰器还可以带参数，比如： @decorator ( arg1 , arg2 ) def func (): pass 等价于： def func (): pass func = decorator ( arg1 , arg2 )( func ) 例子： def makeitalic2 ( func ): return \"<i>\" + func () + \"</i>\" @makeitalic def hello_2 (): return 'hello world' def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped hello_2 () ' <i> hello world </i> ' 如果返回的不是函数就会这样： @makeitalic def hello_3 (): return 'hello world' def makeitalic ( func ): return \"<i>\" + func () + \"</i>\" hello_3 <function __main__.makeitalic.<locals>.wrapped()>","text_tokens":["例子","在","最近","\"","如果","就","__.","装饰","locals","可以","调用","的","one","定义","def",")",",","'","形式","3","__","=","：","中","return","不是","arg2","@","离","参数","/","world","被","(","函数","pass","这样","下面","<","+","makeitalic","会","arg1","_",":","于","two","main","返回","用","多个","wrapped","func","python","decorator","，","比如","器","function","i",">","2",".","makeitalic2","一般"," ","还","器先","hello","等价","带"],"title":"装饰器的一般使用形式","title_tokens":["一般","装饰","的","形式","使用","器"]},{"location":"Python基础/3.4.装饰器.html#_3","text":"前面的例子中，被装饰的函数 hello() 是没有带参数的，我们看看被装饰函数带参数的情况。对前面例子中的 hello() 函数进行改写，使其带参数，如下： def makeitalic ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<i>' + ret + '</i>' return wrapped @makeitalic def hello ( name ): return 'hello %s ' % name @makeitalic def hello2 ( name1 , name2 ): return 'hello %s , %s ' % ( name1 , name2 ) hello ( 'Jack' ) hello2 ( 'Jack' , \"Lusis\" ) 由于函数 hello 带参数，因此内嵌包装函数 wrapped 需要改变。","text_tokens":["例子","\"","情况","内嵌","使","对","装饰","%","的","前面","args","def","是",")",",","。","'","看看","：","中","return","ret","@","参数","jack","/","被","函数","(","进行","name1","其带","+","<","makeitalic","改变","由于","改写",":","如下","我们","需要","wrapped","func","lusis","包装","，","name","name2","s","i",">"," ","hello2","hello","kwargs","没有","*","=","带","因此"],"title":"对带参数的函数进行装饰","title_tokens":["参数","装饰","对带","的","进行","函数"]},{"location":"Python基础/3.4.装饰器.html#_4","text":"上面的例子，我们增强了函数 hello 的功能，给它的返回加上了标签 <i>...</i> ，现在，我们想改用标签 <b>...</b> 或 <p>...</p> 。是不是要像前面一样，再定义一个类似 makeitalic 的装饰器呢？其实，我们可以定义一个函数，将标签作为参数，返回一个装饰器，比如： def wrap_in_tag ( tag ): def decorator ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<' + tag + '>' + ret + '</' + tag + '>' return wrapped return decorator 生成想要的装饰器了： makebold = wrap_in_tag ( 'b' ) # 根据 'b' 返回 makebold 生成器 @makebold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) ' <b> hello world </b> ' 上面的形式也可以写得更加简洁： @wrap_in_tag ( 'b' ) def hello ( name ): return 'hello %s ' % name","text_tokens":["例子","一个","%","的","要","in","ret","简洁","_","我们","，","其实","器","了","标签","现在","增强","给","'","前面",")","形式","：","更加","再","根据","/","+","makeitalic","上面",":","写得","decorator","一样","比如","想","i","也","？","呢","...","可以","定义",",","改用","不是","@","参数","函数","(","<","功能","将","它","返回","生成器","s",">","kwargs","makebold","=","或","类似","装饰","像","args","def","。","加上","wrap","world","p","wrapped","作为","tag","func","#","成器","想要","name","b"," ","hello","生成","*","return","是不是"],"title":"带参数的装饰器","title_tokens":["参数","装饰","的","带","器"]},{"location":"Python基础/3.4.装饰器.html#_5","text":"现在，让我们来看看多个装饰器的例子，为了简单起见，下面的例子就不使用带参数的装饰器。 def makebold ( func ): def wrapped (): return '<b>' + func () + '</b>' return wrapped def makeitalic ( func ): def wrapped (): return '<i>' + func () + '</i>' return wrapped @makebold @makeitalic def hello (): return 'hello world' 上面定义了两个装饰器，对 hello 进行装饰，上面的最后几行代码相当于： def hello (): return 'hello world' hello = makebold ( makeitalic ( hello )) 调用函数 hello： hello () ' <b><i> hello world </i></b> '","text_tokens":["例子","就","对","装饰","调用","的","'","定义","见","def",")","相当于","。","使用","看看","=","为了","：","来","@","代码","参数","当于","/","world","(","进行","函数","不","+","下面","<","makeitalic","上面","起",":","我们","多个","wrapped","func","调用函数","，","让","器","两个","b","了",">","i","几行","相当"," ","hello","makebold","return","带","现在","最后","简单"],"title":"多个装饰器","title_tokens":["多个","装饰","器"]},{"location":"Python基础/3.4.装饰器.html#_6","text":"前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子： class Bold ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self , * args , ** kwargs ): return '<b>' + self . func ( * args , ** kwargs ) + '</b>' @Bold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) 可以看到，类 Bold 有两个方法： __init__() ：它接收一个函数作为参数，也就是被装饰的函数 __call__() ：让类对象可调用，就像函数调用一样，在调用被装饰函数时被调用 还可以让类装饰器带参数： class Tag ( object ): def __init__ ( self , tag ): self . tag = tag def __call__ ( self , func ): def wrapped ( * args , ** kwargs ): return \"< {tag} > {res} </ {tag} >\" . format ( res = func ( * args , ** kwargs ), tag = self . tag ) return wrapped @Tag ( 'b' ) def hello ( name ): return 'hello %s ' % name 需要注意的是，如果类装饰器有参数， 则 __init__ 接收参数，而 __call__ 接收 func。","text_tokens":["例子","一个","时","类","%","的","都","被","下面","需要","对象","其实","，","器","而","call","\"","'","前面","__","是",")","self","：","/","{","接收","+",":","一样","器带","函数调用","两个","也","有","object","还","class","如果","器有","可以","调用","定义",",","bold","可","@","参数","函数","(","<","它","让","s",">","基于","kwargs","=","在","就","装饰","像","看","args","def","则","。","}","world","注意","就是","res","wrapped","func","作为","tag","name","b","看到",".","format","init","方法"," ","hello","*","return"],"title":"基于类的装饰器","title_tokens":["装饰","类","的","基于","器"]},{"location":"Python基础/3.4.装饰器.html#_7","text":"前面提到，使用装饰器有一个瑕疵，就是被装饰的函数，它的函数名称已经不是原来的名称了，回到最开始的例子： def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' 函数 hello 被 makeitalic 装饰后，它的函数名称已经改变了： hello . __name__ 'wrapped' 为了消除这样的副作用，Python 中的 functools 包提供了一个 wraps 的装饰器： from functools import wraps def makeitalic ( func ): @wraps ( func ) # 加上 wraps 装饰器 def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' hello . __name__ 'hello' 事实上，装饰器就是闭包的一种应用，但它比较特别，接收被装饰函数为参数，并返回一个函数，赋给被装饰函数，闭包则没这种限制。","text_tokens":["例子","一个","回到","限制","的","为了","被","原来","functools","，","事实","器","了","为","特别","比较","\"","from","副作用","赋给","'","前面","__",")","使用","已经","：","中","/","接收","+","makeitalic","最","闭包",":","作用","wraps","后","名称","i","一种","消除","瑕疵","器有","包","不是","@","参数","函数","(","<","提供","它","返回","没","并",">","import","但","装饰","def","则","。","加上","这种","应用","world","这样","改变","就是","wrapped","func","python","#","name","提到","."," ","hello","开始","return","事实上"],"title":"装饰器的副作用","title_tokens":["作用","副作用","装饰","的","器"]},{"location":"Python基础/4.1.类.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) 类提供了一种组合数据和功能的方法。类通常是以下部分组成的集合： 函数（称为方法，method），包括特殊方法、私有方法、实例方法、类方法、静态方法 变量（称为类变量，class variable）， 类变量 是在类的所有实例之间共享的值，不是单独分配给每个实例的 计算出的属性（称为特性，property） 创建一个新类意味着创建一个新类型的对象，从而允许创建一个该类型的新实例。每个类的实例可以拥有保存自己状态的属性。对象可以包含任意数量和类型的数据。和模块一样，类也拥有 Python 天然的动态特性：它们在运行时创建，可以在创建后修改。 在Python中，约定使用单数单词表示类名，其首字母大写。 Python 的类提供了面向对象编程的所有标准特性： 多态：可对不同类型的对象执行相同的操作，而这些操作就像“被施了魔法”一样能够正常运行。 封装：对外部隐藏有关对象工作原理的细节。 继承：可基于通用类创建出专用类。允许派生类继承多个基类，派生类可以覆盖它基类的任何方法，一个方法可以调用基类中相同名称的的方法。 类实例 类的实例是以函数形式调用类对象来创建的。 __new__ 方法将创建一个新实例，然后将该实例传递给类的 __init__() 方法。 __init__() 方法的参数包括新创建的实例 self 和在调用类对象时提供的参数。 在 __init__() 内，通过将属性分配给 self 来将其保存到实例中。例如， self.name = name 表示将 name 属性保存在实例中。其中，点 . 运算符用于属性绑定。在新创建的实例返回到用户之后，使用点 . 运算符即可访问这些属性以及类的属性。 访问属性时，结果值可能来自多个不同的地方。可能来自实例独有的属性，也可能来自类的属性。访问属性时，Python 首先会检查实例，如果不知道该属性的任何信息，则会对实例的类进行搜索。这是类与其所有实例共享其属性的底层机制。 继承 继承是一种创建新类的机制，目的是使用或修改现有类的行为。原始类称为 基类 或 超类 。新类称为 派生类 或 子类 。 通过继承创建类时，所创建的类将“继承”其基类定义的属性。==但是，==派生类可以重新定义任何这些属性并添加自己的新属性。 在class语句中用以逗号分隔的基类名称列表来指定继承。如果没有有效的基类，类将继承object。object是所有Python对象的根类，提供了一些常见方法（如 __str__() ，它可创建供打印函数使用的字符串）的默认实现。 继承通常用于重新定义现有方法的行为。 继承是用功能稍微增强的点 . 运算符实现的。具体来讲，如果搜索一个属性时未在实例或实例的类中找到匹配项，将会继续搜索基类。这个过程会一直继续下去，直到没有更多的基类可供搜索为止。 派生类重定义 __init__() 时，不会自动调用基类的 __init__() 方法。因此，如果派生类想重定义 __init__() ，还想调用基类的 __init__() 方法，那么要由派生类调用基类的 __init__() 方法来对它们进行恰当的初始化。如果基类未定义 __init__() ，就可以忽略这一步。如果不知道基类是否定义了 __init__() ，可在不提供任何参数的情况下调用它，因为始终存在一个不执行任何操作的默认 __init__() 实现。 # 定义一个人类 class Person : def __init__ ( self , name , age ): self . name = name self . age = age def get_name ( self ): return self . name def get_age ( self ): return self . age # 定义一个美国人类 ## 现在想给美国人在初始化的时候加上 性别 的属性 class American ( Person ): # 重新定义__init__()会覆盖Person的__init__()方法 def __init__ ( self , name , age , gender ): Person . __init__ ( self , name , age ) self . gender = gender def get_gender ( self ): return self . gender jackson = American ( name = \"Cesar T. Mauck\" , age = 14 , gender = \"male\" ) jackson . get_age () 14 jackson . get_gender () 'male' # 有时，派生类将重新实现方法，但是还想调用原始的实现。 为此，有一种方法可以显式地调用基类中的原始方法，将实例 self 作为第一个参数传递即可，如下所示： # 定义一个华盛顿人类 class Washington ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # 显式地调用基类中的原始方法 age = American . get_age () age += 1 self . age = age print ( \"Washington people grow up one year old\" ) 这个例子的微妙之处在于，American这个类其实没有实现 get_age() 方法。该方法是在Person类中实现的。尽管这段代码能够运行，但它可能会引起一些混淆（例如，American是否应该实现 get_age() ? ）。因此，替代解决方案是用 super() 函数，如下所示： # 定义一个加利福尼亚人类 class California ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # 显式地调用基类中的原始方法 ## 实际上，因为get_age()方法在Person中定义 ## 这里可以传入Person的任何一个派生类 age = super ( California , self ) . get_age () age += 1 self . age = age print ( \"Californians grow up one year old\" ) Terri = California ( \"Terri H. Booth\" , 25 , \"female\" ) Terri . growing_up () Californians grow up one year old super(cls, instance) 会返回一个特殊对象，该对象支持在基类上执行属性查找。如果使用该函数，Python将使用本来应该在基类上使用的正常搜索规则来搜索属性。有了这种方式，就无需写死方法位置，并且能更清晰地陈述你的意图（即你希望调用以前的实现，无论它是哪个基类定义的）。然而， super() 的语法尚有不足之处。如果使用Python 3，可以使用简化的语句 super().get_age() 来执行上面示例中的计算。 多重继承 Python支持多重继承。通过让一个类列出多个基类即可指定多重继承。例如，下面给出了一个类集合： # 定义一个圣拉蒙人类 class San_Ramon ( American , California , Washington ): def growing_up ( self ): pass Edwin = San_Ramon ( \"Edwin A. Marcotte\" , 37 , \"male\" ) Edwin . get_age () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6c60ffbe4e5a> in <module> 1 # 定义一个圣拉蒙人类 ----> 2 class San_Ramon(American, California, Washington): 3 def growing_up(self): 4 pass 5 TypeError: Cannot create a consistent method resolution order (MRO) for bases American, California, Washington 使用多重继承时，属性的解析会变得非常复杂，因为可以使用很多搜索路径来绑定属性。 在查找使用了多重继承的属性时，会将所有基类按从“最特殊”的类到“最不特殊”的类这种顺序进行排列。然后在搜索属性时，就会按这个顺序搜索，直至找到该属性的第一个定义。对于任何给定的类，通过打印它的 mro 属性即可查看基类的顺序，例如： 在大多数情况下，这个列表基于“有意义”的规则排列得出。也就是说，始终先检查派生类，然后再检查其基类，如果一个类具有多个父类，那么始终按类定义中列出的父类顺序检查这些父类。但是，基类的准确顺序实际上非常复杂，不是基于任何“简单的”算法，如深度优先或广度优先搜索。实际上，基类的顺序由 C3 线性化算法确定，可以在论文“A Monotonic Superclass Linearization for Dylan”（K. Barrett 等，发表于 OOPSLA’96）中找到该算法的介绍。该算法的一个需要注意的地方是，某些类层次结构将被 Python 拒绝并会抛出 TypeError 错误，例如： 一般来说，在大多数程序中最好避免使用多重继承。但是，多重继承有时可用于定义所谓的混合（mixin）类。混合类通常定义了要“混合到”其他类中的一组方法，目的是添加更多的功能（这与宏很类似）。通常，混合类中的方法将假定其他方法存在，并将以这些方法为基础构建。 多态动态绑定和鸭子类型 动态绑定（在继承背景下使用时，有时也称为多态性）是指在不考虑实例类型的情况下使用实例只要以 obj.attr 的形式访问属性，就会按照一定的顺序搜索并定位 attr ： 首先是实例本身，接着是实例的类定义，然后是基类。 查找过程会返回第一个匹配项。 这种绑定过程的关键在于，它不受对象 obj 的类型影响。因此，如果执行像 obj.name 这样的查找，对所有拥有 name 属性的 obj 都是适用的。 polymorphism 源自希腊语，意思是“有多种形态”。这大致意味着即便你不知道变量指向的是哪种对象，也能够对其执行操作，且操作的行为将随对象所属的类型（类）而异。也就是同一种调用形式，但有不同的执行效果。 在Python中，多态也称为 鸭子类型 （duck typing）。这个术语源自 James Whitcomb Riley 在17世纪写下的一句诗： When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. 真不知道谁想出这个术语的，如果用数学语言来类比，鸭子类型相当于数学的公理化定义。 Python 程序员经常编写利用这种行为的程序。例如，如果想编写现有对象的自定义版本，可以继承该对象，也可以创建一个外观和行为像它但与它无任何关系的全新对象。后一种方法通常用于保持程序组件的松散耦合。例如，可以编写代码来处理任何种类的对象，只要该对象拥有特定的方法集。最常见的例子就是利用标准库中定义的各种“类似文件”的对象。尽管这些对象的工作方式像文件，但它们并不是继承自内置文件对象的。 实例方法 类中最常用的方法是实例方法，即 将实例作为第一个参数传递给该方法。 根据约定，这个参数名称为self，尽管所有合法的标识符都可以使用。 self 参数指向对象本身。 self 参数很有用，甚至必不可少。如果没有它，所有的方法都无法访问对象本身（要操作的属性所属的对象）。 下面是以是实例方法的例子： class Kls ( object ): def __init__ ( self , data ): self . data = data def printd ( self ): print ( self . data ) ik1 = Kls ( 'arun' ) ik2 = Kls ( 'seema' ) ik1 . printd () ik2 . printd () arun seema 然后看一下代码和示例图片: 在1、2中，参数传递给方法。 在3中， self参数指向当前实例。 在4中，我们不需要给方法提供实例， Python解释器自己会做这些操作 。 静态方法 Note 以下两个代码示例介绍了静态方法的两个应用场景： 不需要访问实例对象或类对象的方法和属性，但与类有关的功能 创建构造函数 经常有一些跟类有关系的功能，但在运行时又不需要实例和类参与（比如更改环境变量或者修改其他类的属性），当然可以在类定义之外写一个函数实现这些功能，但这样会扩散类内部的代码，不利于代码的维护。比如这样： IND = 'ON' def checkind (): return ( IND == 'ON' ) class Kls ( object ): def __init__ ( self , data ): self . data = data def do_reset ( self ): if checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if checkind (): self . db = 'new db connection' print ( 'DB connection made for:' , self . data ) ik1 = Kls ( 12 ) do_reset ( ik1 ) # Reset done for: 12 set_db ( ik1 ) # DB connection made for: 12 如果使用 @staticmethod 就能把相关的代码放到对应的位置了。 IND = 'ON' class Kls ( object ): def __init__ ( self , data ): self . data = data @staticmethod def checkind (): return ( IND == 'ON' ) def do_reset ( self ): if self . checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if self . checkind (): self . db = 'New db connection' print ( 'DB connection made for: ' , self . data ) ik1 = Kls ( 12 ) ik1 . do_reset () ik1 . set_db () Reset done for: 12 DB connection made for: 12 实际上，静态方法是一种普通函数，只不过它们正好位于类定义的命名空间中， 因为它不会对任何实例类型进行操作 。 如果在编写类时需要采用很多不同的方式来创建新实例，则常常使用静态方法。因为类中只能有一个 __init__() 函数，所以替代的创建函数通常按如下方式定义： import time class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @staticmethod def now (): t = time . localtime () return Date ( t . tm_year , t . tm_mon , t . tm_mday ) @staticmethod def tomorrow (): t = time . localtime ( time . time () + 86400 ) return Date ( t . tm_year , t . tm_mon , t . tm_mday ) # 创建日期的示例 a = Date ( 1967 , 4 , 9 ) b = Date . now () # 调用静态方法now() c = Date . tomorrow () # 调用静态方法tomorrow() 类方法 Note 以下两个代码示例介绍了类方法的两个应用场景： 创建构造函数 动态更新类 类方法是将类本身作为对象进行操作的方法。类方法使用 @classmethod 装饰器定义，与实例方法不同，Python解释器会将类本身传递给类方法的第一个参数（一般将该参数命名为 cls ）。例如： class Times ( object ): factor = 1 @classmethod def mul ( cls , x ): return cls . factor * x class TwoTimes ( Times ): factor = 2 x = TwoTimes . mul ( 4 ) # 调用Times.mul(TwoTimes, 4) -> 8 在这个例子中，请注意类 TwoTimes 是如何作为对象传递给 mul() 的。尽管这个例子有些深奥，但类方法还有一些实用且巧妙的用法。例如，你定义了一个类，它继承自前面给出的 Date 类并对其略加定制： class EuroDate ( Date ): # 修改字符串转换，以使用欧洲日期格式 def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) 由于该类继承自 Date，所以它拥有 Date 的所有特性。但是 now() 和 tomorrow() 方法稍微有点不同。例如，如果调用 EuroDate.now()，则会返回 Date 对象，而不是 EuroDate 对象。类方法可以解决该问题： class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @classmethod def now ( cls ): t = time . localtime () return cls ( t . tm_year , t . tm_mon , t . tm_mday ) @classmethod def tomorrow ( cls ): t = time . localtime ( time . time () + 86400 ) return cls ( t . tm_year , t . tm_mon , t . tm_mday ) class EuroDate ( Date ): # 修改字符串转换，以使用欧洲日期格式 def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) a = Date . now () # 调用Date.now(Date)并返回Date b = EuroDate . now () # 调用Date.now(EuroDate)并返回EuroDate print ( type ( a )) print ( type ( b )) <class '__main__.Date'> <class '__main__.EuroDate'> 类方法除了用于创建构造函数，另一个例子是动态更新类。例如我们想动态更新一个类属性： class Kls ( object ): models = {} def __init__ ( self , model_name ): # 加载模型 pass @classmethod def load_model ( cls , model_name ): cls . models [ model_name ] = cls ( model_name ) @classmethod def get_model ( cls , model_name ): return cls . models . get ( model_name , None ) def predict ( self ): return \"预测结果为1\" model_name = \"svm\" Kls . load_model ( model_name ) model = Kls . get_model ( model_name ) model . predict () '预测结果为1' Kls . models {'svm': <__main__.Kls at 0x21aaefe5908>} 当然，除了使用类方法，也可以在实例方法中显式调用类属性，达到动态更新类的效果，例如我们要获取实例数： class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 @classmethod def get_no_of_instance ( cls_obj ): return cls_obj . no_inst ik1 = Kls () ik2 = Kls () print ( ik1 . get_no_of_instance ()) print ( Kls . get_no_of_instance ()) 2 2 但是如果要用实例方法实现的话，就得创建一个实例对象，这意味着我们必须要给这个实例对象命名。在编程中，给过多的变量命名，有时是一个头疼的问题。 在类外面写一个函数也可以实现这样的效果，但不利于代码的维护。 def get_no_of_instances ( cls_obj ): return cls_obj . no_inst class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 ik1 = Kls () ik2 = Kls () print ( get_no_of_instances ( Kls )) 2 实例方法、静态方法、类方法对比 在实例方法和类方法中，Python默认将当前实例或者类对象传给方法的第一个参数（非指定默认值的参数），如果方法不设置参数，便会报错： class Kls ( object ): def __init__ ( self , data ): self . data = data def imethod1 (): print ( \"不接收实例\" ) def imethod2 ( * arg ): print ( 'Instance:' , arg ) @staticmethod def smethod ( * arg ): print ( 'Static:' , arg ) @classmethod def cmethod1 (): print ( \"不接收类对象\" ) @classmethod def cmethod2 ( * arg ): print ( 'Class:' , arg ) ik3 = Kls ( 'arun' ) ik3 . imethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-82fbcd62768a> in <module> 1 ik3 = Kls('arun') ----> 2 ik3.imethod1() TypeError: imethod1() takes 0 positional arguments but 1 was given ik3 . cmethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6055e1d64eee> in <module> ----> 1 ik3.cmethod1() TypeError: cmethod1() takes 0 positional arguments but 1 was given 实例方法、类方法必须设置参数接收类对象： ik3 . imethod2 () ik3 . cmethod2 () Instance: (<__main__.Kls object at 0x0000021AAEFF0390>,) Class: (<class '__main__.Kls'>,) 静态方法则不会传入实例或类对象： ik3 . smethod () Static: () 如果方法不设置参数，只能通过类去调用，应该避免这种用法，没参数的方法应该加上 @staticmethod 装饰器： Kls . imethod1 () 不接收实例 关于静态方法和类方法需要注意的一点是，Python 不会在与实例方法独立的命名空间中管理它们。因此，可以通过实例或类调用它们。例如： Kls . cmethod2 () Kls ( 'arun' ) . cmethod2 () Kls . smethod () Kls ( 'arun' ) . smethod () Class: (<class '__main__.Kls'>,) Class: (<class '__main__.Kls'>,) Static: () Static: () 这可能很容易引起混淆，因为对 Kls('arun').cmethod2() 的调用与实例 Kls('arun') 没有任何关系。 这种行为是 Python 对象系统与其他面向对象语言（如 Smalltalk 和 Ruby）对象系统的区别之一。在这些语言中，类方法与实例方法是严格分开的。 而实例方法必须通过实例调用，因为需要传入实例。 特性 @property ——把方法变为属性 通常，访问实例或类的属性时，返回的会是所存储的相关值。特性（property）是一种特殊的属性，访问它时会计算它的值。下面是一个简单的例子： import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius # Circle的一些附加特性 @property def area ( self ): return math . pi * self . radius ** 2 @property def preimeter ( self ): return 2 * math . pi * self . radius 得到的Circle对象的行为如下： c = Circle ( 4.0 ) c . radius 4.0 c . area 50.26548245743669 c . preimeter 25.132741228718345 c . area = 2 ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-0dac39a0c579> in <module> ----> 1 c.area = 2 AttributeError: can't set attribute 在这个例子中，Circle 实例存储了一个实例变量 c.radius 。 c.area 和 c.perimeter 是根据该值计算得来的。 @property 装饰器支持以简单属性的形式访问后面的方法，无需像平常一样添加额外的 () 来调用该方法。对象的使用者很难发现正在计算一个属性，除非在试图重新定义该属性时生成了错误消息（如上面的 AttributeError 异常所示）。 这种特性使用方式遵循所谓的统一访问原则。 实际上，如果定义一个类，尽可能保持编程接口的统一总是不错的。如果没有特性，将会以简单属性（如 c.radius ）的形式访问对象的某些属性，而其他属性将以方法（如 c.area() ）的形式访问。费力去了解何时添加额外的 () 会带来不必要的混淆。特性可以解决该问题。 Python 程序员很少认识到， 方法本身是被隐式地作为一类特性处理的。 考虑下面这个类： class Foo ( object ): def __init__ ( self , name ): self . name = name def spam ( self , x ): print ( \" %s , %s \" % ( self . name , x )) Foo ( \"d\" ) . spam <bound method Foo.spam of <__main__.Foo object at 0x0000021AAEFDC7B8>> 用户创建 f = Foo(\"Guido\") 这样的实例然后访问 f.spam 时，不会返回原始函数对象 spam ，而是会得到所谓的绑定方法（bound method），绑定方法是一个对象，代表将在对象上调用 () 运算符时执行的方法调用。绑定方法有点类似于已部分计算的函数，其中的self参数已经填入，但其他参数仍然需要在使用 () 调用该函数时提供。这种绑定方法对象是由在后台执行的特性函数静默地创建的。 使用 @staticmethod 和 @classmethod 定义静态方法和类方法时，实际上就指定了使用不同的特性函数，以不同的方式处理对这些方法的访问。 例如， @staticmethod 仅“按原样”返回方法函数，不会进行任何特殊的包装或处理。 特性还可以截获操作权，以设置和删除属性。这是通过向特性附加其他 setter 和 deleter 方法来实现的，如下所示： class Foo ( object ): def __init__ ( self , name ): self . __name = name @property def name ( self ): return self . __name @name . setter def name ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value @name . deleter def name ( self ): raise TypeError ( \"Can't delete name\" ) 在这个例子中，首先使用 @property 装饰器和相关方法将属性 name 定义为只读特性。后面的 @name.setter 和 @name.deleter 装饰器将其他方法与 name 属性上的设置和删除操作相关联。这些方法的名称必须与原始特性的名称完全匹配。在这些方法中，请注意实际的名称值存储在属性 __name 中。所存储属性的名称无需遵循任何约定，但它必须与特性名称不同，以便将它与特性的名称区分开。 在以前的代码中，通常会看到用 property(getf=None, setf=None, delf=None, doc=None) 函数来定义特性，往其中传入一组名称不同的方法，用于执行相关操作。例如： class Foo ( object ): def getname ( self ): return self . __name def setname ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value def delname ( self ): raise TypeError ( \"Can't delete name\" ) name = property ( getname , setname , delname ) 这种老方法仍然可以使用，但装饰器版本会让类看起来更整洁。 例如，如果使用装饰器，get、 set 和 delete 函数将不会显示为方法。 数据封装和私有属性 默认情况下，类的所有属性和方法都是“公共的”。这意味着对它们的访问没有任何限制。这还暗示着，在基类中定义的所有内容都会被派生类继承，并可从派生类内进行访问。在面向对象的应用程序中，通常我们不希望发生这种行为，因为它会暴露对象的内部实现，可能导致在派生类中定义的对象与在基类中定义的对象之间发生命名空间冲突。 Note 这意味着派生类可以覆盖基类的定义。 为了解决该问题， 类中所有以双下划线开头的名称（如 __Foo ）都会自动变形，形成具有 _Classname__Foo 形式的新名称。 这提供了一种在类中添加私有属性和方法的有效方式，因为派生类中使用的私有名称不会与基类中使用的相同私有名称发生冲突，如下所示： class A ( object ): def __init__ ( self ): self . __X = 3 # 变形为self._A__X def __spam ( self ): # 变形为_A__spam() print ( \"A\" ) def bar ( self ): self . __spam () # 只调用A.__spam() class B ( A ): def __init__ ( self ): A . __init__ ( self ) self . __X = 37 # 变形为self._B__X def __spam ( self ): # 变形为_B__spam() print ( \"B\" ) b = B () # 派生类的定义没有覆盖基类的定义 b . bar () A 尽管这种方案似乎隐藏了数据，但并没有严格的机制来实际阻止对类的“私有”属性进行访问。特别是如果已知类名称和相应私有属性的名称，则可以使用变形后的名称来访问它们。通过重定义 dir() 方法，类可以降低这些属性的可见性， dir() 方法提供了检查对象的 dir() 函数所返回的名称列表。 尽管这种名称变形似乎是一个额外的处理步骤，但变形过程实际上只在定义类时发生一次。它不会在方法执行期间发生，也不会为程序的执行添加额外的开销。而且要知道，名称变形不会在 getattr() 、 hasattr() 、 setattr() 或 delattr() 等函数中发生，在这些函数中，属性名被指定为字符串。对于这些函数，需要显式使用变形名称（如 __Classname__name ）来访问属性。 建议在定义可变属性时，通过特性来使用私有属性。这样，就可鼓励用户使用特性名称，而无需直接访问底层实例数据（如果你在实例开头添加了一个特性，可能不想采用这种访问方式）。 通过为方法提供私有名称，超类可以阻止派生类重新定义和更改方法的实现。 例如，示例中的 A.bar() 方法只调用 A.__spam() ，无论 self 具有何种类型，或者派生类中是否存在不同的 __spam() 方法都是如此。 最后，不要混淆私有类属性的命名和模块中“私有”定义的命名。一个常见的错误是，在定义类时，在属性名上使用单个前导下划线来隐藏属性值（如 _name ）。 在模块中，这种命名约定可以阻止通过 from module import * 语句导出名称。 这意味着单下划线开头的定义只能被类本身和其派生类访问。但是在类中，这种命名约定既不能隐藏属性，在某个类继承该类并使用相同名称定义一个新属性或方法时，也不能阻止出现名称冲突。 对象表示和属性绑定 从内部实现上看，实例是使用字典来实现的，可以通过实例的 __dict__ 属性访问该字典。这个字典包含的数据对每个实例而言都是唯一的，如下所示： class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance a = Account ( \"Guido\" , 1100.0 ) a . __dict__ {'name': 'Guido', 'balance': 1100.0} 可以在任何时候向实例添加新属性，例如： a . number = 123456 # 将属性'number'添加到 a.__dict__ 对实例的修改始终会反映到局部 __dict__ 属性中。同样，如果直接对 __dict__ 进行修改，所做的修改也会反映在实例的属性中。 实例通过特殊属性 __class__ 链接回它们的类。类本身也只是对字典的浅层包装，你可以在实例的 __dict__ 属性中找到这个字典。可以在类字典中找到各种方法。例如： a . __class__ __main__.Account Account . __dict__ . keys () dict_keys(['__module__', '__init__', '__dict__', '__weakref__', '__doc__']) 最后，通过特殊属性 __bases__ 中将类链接到它们的基类，该属性是一个基类元组。这种底层结构是获取、设置和删除对象属性的所有操作的基础。 只要使用 obj.name = value 设置了属性，特殊方法 obj.__setattr__(\"name\", value) 就会被调用。如果使用 del obj.name 删除了一个属性，就会调用特殊方法 obj.__delattr__(\"name\") 。 这些方法的默认行为是修改或删除 obj 的局部 __dict__ 的值，除非请求的属性正好是一个特性或描述符。在这种情况下，设置和删除操作将由与该特性相关联的设置和删除函数执行。 在查找属性（如 obj.name ）时，将调用特殊方法 obj.__getattrribute__(\"name\") 。该方法执行搜索来查找该属性，这通常涉及检查特性、查找局部 __dict__ 属性、检查类字典以及搜索基类。如果搜索过程失败，最终会尝试调用类的 __getattr__() 方法（如果已定义）来查找该属性。如果这也失败，就会抛出 AttributeError 异常。 如果有必要，用户定义的类可以实现其自己的属性访问函数。例如： import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius def __getattr__ ( self , name ): if name == 'area' : return math . pi * self . radius ** 2 elif name == 'perimeter' : return 2 * math . pi * self . radius else : return object . __getattr__ ( self , name ) def __setattr__ ( self , name , value ): if name in [ 'area' , 'perimeter' ]: raise TypeError ( \" %s is readonly\" % name ) from None object . __setattr__ ( self , name , value ) c = Circle ( 2 ) c . area 12.566370614359172 c . area = 10 ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-52599b4ddcfc> in <module> ----> 1 c.area = 10 <ipython-input-1-a1a0cdcb1eb3> in __setattr__(self, name, value) 13 def __setattr__(self,name,value): 14 if name in ['area','perimeter']: ---> 15 raise TypeError(\"%s is readonly\" % name) from None 16 object.__setattr__(self,name,value) TypeError: area is readonly 重新实现这些方法的类应该可以依靠 object 中的默认实现来执行实际的工作。这是因为默认实现能够处理类的更高级特性，如描述符和特性。 一般来讲，类很少重新定义属性访问运算符。但是，在编写通用的包装器和现有对象的代理时，通常会使用属性访问运算符。通过重新定义 __getattr__() 、 __setattr__() 和 __delattr__() ，代理可以捕获属性访问操作，并透明地将这些操作转发给另一个对象。 __slots__ 通过定义特殊变量 slots ，类可以限制对合法实例属性名称的设置，如下所示： class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance __slots__ = ( 'name' , 'balance' ) a = Account ( \"Guido\" , 1100.0 ) a . date = \"12-12\" ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-b978ca4ed4ad> in <module> 7 8 a = Account(\"Guido\", 1100.0) ----> 9 a.date = \"12-12\" AttributeError: 'Account' object has no attribute 'date' 定义 __slots__ 时，可以将实例上分配的属性名称限制为指定的名称，否则将引发 AttributeError 异常。这种限制可以阻止其他人向现有实例添加新属性，即便用户将属性名称写错，也不会创建出新的属性来。 在实际使用中， __slots__ 从未被当作一种安全的特性来实现。它实际上是对内存和执行速度的一种性能优化。 使用 __slots__ 的类的实例不再使用字典来存储实例数据，转而采用一种基于数组的更加紧凑的数据结构。在会创建大量对象的程序中，使用 __slots__ 可以显著减少减少内存占用和执行时间。 注意， __slots__ 与继承的配合使用需要一定的技巧。如果类继承自使用 __slots__ 的基类，那么它也需要定义 __slots__ 来存储自己的属性（即使它不会添加任何属性也是如此），这样才能利用 __slots__ 提供的优势。如果忘记了这一点，派生类的运行速度将更慢，占用的内存也更多，比完全不使用 __slots__ 时情况更糟。 __slots__ 的使用还会破坏期望实例具有底层 __dict__ 属性的代码。尽管这一点通常不适用于用户代码，但对于支持对象的实用库和其他工具，其代码可能要依靠 __dict__ 来调试、序列化对象以及执行其他操作。 最后，如果类中重新定义了 __getattribute__() 、 __getattr__() 和 __setattr__() 等方法， __slots__ 的存在不会对它们的调用产生任何影响。但是，这些方法的默认行为将考虑到 __slots__ 。此外应该强调一点，没有必要向 __slots__ 添加方法或特性名称，因为它们存储在类中，而不是存储在每个实例中。 参考 difference between staticmethod and classmethod in python","text_tokens":["动态","variable","中显式","共享","arun","类","create","冲突","02d","点","相同","排列","源自","层次结构","头疼","must","10","关键在于","诗","doc","鸭子","同","位于","混淆","不会","用者","遵循","代码","第一个","尝试","重","算法","被","区别","v.1915","即","attribute","bound","想重","实现","下面","getf","导致","划线","忘记","6c60ffbe4e5a","计算","仍然","edwin","它们","基类","swims","最终","很多","checkind","中将","转换","当作","包装","123456","信息","getattr","quacks","而","amd64","发生","也就是说","相当","新类","call","处理","at","0","得","obj","smalltalk","微妙","对于","大量","from","增强","8","数","语句","变量","总是","set","1967","self","宏","以","何时","无法","：","中","后台","predict","更加","之处","see","天然","真不","捕获","依靠","系统","单独","唯一","只要","放到","得来","静态方法","根类","该","5","访问","这是","guido","库","new","most","[","polymorphism","转发","that","seema","两个","隐式","很","radius","复杂","?","数学","看起来","直至","16","能够","存储","takes","来自","bird","如果","walks","合法","列出","__.","0x0000021aaeff0390","for","任何","调用","female","运行","定义","3","为此","面向对象","首字","通过","配合","解决方案","有效","对应","便会","得到","msc","失败","透明","消息","那么","和","发生冲突","pass","staticmethod","调试","’","之一","值","提供","开头","地方","而是","方案","有些","全新","耦合","spam","存在","程序","破坏","不足之处","riley","单词","setname","mauck","以及","正常","效果","import","非","预测","优势","首先","now","部分","处","包括","given","往","查找","classmethod","类时","做","装饰","编写","date","看","出","类比","形态","变为","按类","加上","内存","应用","单个","显式","person","san","基础","静默","data","typeerror","将会","链接","新","直到","意图","外面","实际上","can","50.26548245743669","真不知道","额外","实例","h","希望","找到","mday","字母","机制","就是","when","保持","作为","世纪","面向","typing","技巧","delname","场景","b","module","错误","经常","not","单数",".","期望","被施","达到","else","派生类","on","pi","来说","*","项","这些","暗示","魔法","96","希腊语","number","时","时候","自","优化","利于","setter","强调","更","bar","父类","非常复杂","它会","keys","但类","deleter","13","混合","参与","默认","库中","降低","不想","修改","string","任意","用户","在于","搜索","不利于","严格","只","不必要","模型","时会","第一","super","resolution","windows","用","为止","需要","优先","希腊","论文","我们","，","器","更新","附加","然后","为","执行","用于","打印","最好","一般","以便","发现","整洁","内置","ruby","现在","一般来说","顺序搜索","除非","认识","实际","\"","权","死","对比","匹配","arguments","关联","print","出新","还会","math","华盛顿","-","people","其中","加利","circle","可变","has","已经","之后","大致","深奥","等","比","linearization","所","当于","组成","所有","序列化","一定","接收","细节","+","空间","略加","操作","关键","上面","结构","显示","显著","静态","维护","一样","monotonic","后","如","inst","想","集","有","或类","检查","引起","写","无需","terri","涉及","获取","12","稍微","一直","必要","版本","15","字符","64","bases","相当于","运算","上","booth","路径","大多","甚至","但是","期间","种类","可","速度","ind","area","参数","model","按照","内容","hasattr","ik1","函数","拒绝","专用","mro","自定","子类","避免","给定","引发","main","多数","getname","返回","自己","a","具有","cls","让","约定","ipython","并","开","37","elif","大写","人类","分配","仅","哪个","鼓励","关系","算符","##","但","86400","数传","各种","某些","x","perimeter","在","意味","dylan","52599b4ddcfc","db","traceback","but","初始","名上","地","def","82fbcd62768a","相应","更改","起来","利用","无论","}","组件","对外","高级","过程","kls","写下","进行","应该","传入","connection","容易","12.566370614359172","这样","、","like","属性","解释器","日期","适用","封装","又","delete","同样","已知","保存","imethod2","按","不同","实用","与其","一点","有点","time","深度","下去","使用者","语言","原始","产生"," ","years","一般来讲","factor","参考","25","不利","washington","术语","imethod1","up","位置","未定","表示","正在","一个","自定义","你","0x0000021aaefdc7b8","现有","加载","4","圣","不可","未定义","%","类型","的","限制","每个","模块","集合","隐藏","多","方式","常常","报错","分隔","为了","性别","很少","delattr","balance","用以","无","0dac39a0c579","线性化","9","只能","smethod","setattr","会","由","必不可少","采用","_","if","尽可能","month","行为","且","称为","了","不错","费力","新创建","2","覆盖","尚有","关于","例如","意义","影响","程序员","25.132741228718345","c3","可见","没有","growing","ramon","不适","到","多态性","__","'","定制",")","是","4d","使用","解决","目的","即便","接口","grow","来","介绍","不知","工具","数组","相关联","{","拉蒙","day","松散","的话","del","一下","字符串","最","californians","用法",":","定位","传递","美国","所示","----","printd","公共","isinstance","而异","外部","常见","比如","str","arg","指定","名称","当前","一些","也","谁","recent","普通","因为","描述符","大多数","其他","如何","一种","object","还","1100.0","oopsla","顺序","done","本身","请","还有","导出","positional","截获","陈述","从","简单","7","私有","mul","写错","绑定","可以","命名","图片",",","多态","去","描述","b978ca4ed4ad","即使","华盛","对外部","替代","能","不是","type","重新","@","尼亚","barrett","格式","管理","紧凑","between","(","而言","功能","解析","4.0","新创","一句","将","出现","请求","标识符","既","如下","即可","property","来讲","广度","tomorrow","哪种",">","superclass",".__","f","具体来讲","load","填入","派生","恰当","year","并且","17","假定","这里","抛出","所属","models","或","性能","类似","支持","元组","american","twotimes","localtime","old","account","指向","转发给","考虑","and","后面","像","继承","背景","另","则","该值","底层","暗示着","difference","统一","这种","组合","发给","k","（","继续","consistent","而且","直接","理化","delf","尽管","加利福尼亚","无法访问","应用程序","才能","确定","意味着","下","attr","分开","多个","python","环境变量","以前","这","c","类去","name","ik3","标识","一类","就是说","阻止","getattrribute","方法","异常","last","向","只是","本来","不过","变形","一组","他人","环境变","类名","独立","james","构造","例子","名","特性","0x21aaefe5908","不必","原样","性","weakref","知道","eurodate","数据","规则","one","公理化","与","欧洲","只不过","所以","特殊","加利福","都","要","尽可","下划","---","in","首字母","setf","文件","dir","instances","”","单","d","正好","构造函数","编程","该类","之间","于","构建","独有","之外","对象","查看","工作","marcotte","其实","列表","超类","order","状态","不再","参数传递","类中","问题","有关","相关","._","特别","其他人","添加","始终","mon","拥有","外观","某个","当然","代表","环境","do","除了","减少","清晰","—","is","给","时未","继续下去","input","foo","一步","开销","“","前面","建议","no","形式","jackson","完全","何种","扩散","准确","再","根据","巧妙","是因为","/","---------------------------------------------------------------------------","很难","可能","是否","）","reset","made","暴露","以双","数量","特定","一次","cmethod1","语法","mixin","具体","下划线","value","原理","i","cannot","gender","然而","结果","解释","接着","class","t","有时","字典","多种","看起","删除","前导","其","形成","method","创建","面向对象编程","14","并会","已","局部","了解","更慢","preimeter","给出","代理","忽略","福尼亚","不能","人","标准","变得","否则","bit","slots","占用","不","]","从未","age","<","be","attributeerror","先","打印函数","之","多重","数据结构","释器","它","不足","内部","此外","通常","浅层","常用","所谓","没","把","s","如此","平常","回","安全","note","getattribute","原则","区分","初始化","cesar","instance","基于","简化","male","get","readonly","=","线性","必须","3.7","默认值","因此","classname","svm","static","似乎","最后","包含","情况","dict","得出","就","层次","对","传给","raise","反映","或者","随","内","步骤","。","was","序列","times","设置","california","转而","自动","逗号","ik2","6055e1d64eee","tm","允许","段","非常","由于","带来","注意","1","这个","供","意思","老","运算符","只读","whitcomb","对类","不要","#","duck","时间","更糟","cmethod2","a1a0cdcb1eb3","指","of","none","看到","公理","跟类","过","示例","init","不受","试图","以下","通用","生成","发表","从而","return","!","有用"],"title":"4.1.类","title_tokens":["类",".","4.1"]},{"location":"Python基础/4.1.类.html#_1","text":"类的实例是以函数形式调用类对象来创建的。 __new__ 方法将创建一个新实例，然后将该实例传递给类的 __init__() 方法。 __init__() 方法的参数包括新创建的实例 self 和在调用类对象时提供的参数。 在 __init__() 内，通过将属性分配给 self 来将其保存到实例中。例如， self.name = name 表示将 name 属性保存在实例中。其中，点 . 运算符用于属性绑定。在新创建的实例返回到用户之后，使用点 . 运算符即可访问这些属性以及类的属性。 访问属性时，结果值可能来自多个不同的地方。可能来自实例独有的属性，也可能来自类的属性。访问属性时，Python 首先会检查实例，如果不知道该属性的任何信息，则会对实例的类进行搜索。这是类与其所有实例共享其属性的底层机制。","text_tokens":["一个","时","知道","共享","类","的","点","用户","会","搜索","独有","对象","，","信息","然后","新创建","用于","例如","到","给","__","是",")","形式","self","其中","使用","以","之后","中","来","所有","可能","该","访问","传递","new","也","结果","检查","来自","如果","绑定","其","任何","调用","创建","运算","通过","参数","函数","(","和","不","新创","提供","将","值","地方","返回","即可","以及","分配","算符","首先","=","包括","在","对","内","则","底层","。","进行","新","属性","实例","保存","机制","不同","运算符","多个","python","与其","这","name",".","init","方法"," ","这些","表示"],"title":"类实例","title_tokens":["实例","类"]},{"location":"Python基础/4.1.类.html#_2","text":"继承是一种创建新类的机制，目的是使用或修改现有类的行为。原始类称为 基类 或 超类 。新类称为 派生类 或 子类 。 通过继承创建类时，所创建的类将“继承”其基类定义的属性。==但是，==派生类可以重新定义任何这些属性并添加自己的新属性。 在class语句中用以逗号分隔的基类名称列表来指定继承。如果没有有效的基类，类将继承object。object是所有Python对象的根类，提供了一些常见方法（如 __str__() ，它可创建供打印函数使用的字符串）的默认实现。 继承通常用于重新定义现有方法的行为。 继承是用功能稍微增强的点 . 运算符实现的。具体来讲，如果搜索一个属性时未在实例或实例的类中找到匹配项，将会继续搜索基类。这个过程会一直继续下去，直到没有更多的基类可供搜索为止。 派生类重定义 __init__() 时，不会自动调用基类的 __init__() 方法。因此，如果派生类想重定义 __init__() ，还想调用基类的 __init__() 方法，那么要由派生类调用基类的 __init__() 方法来对它们进行恰当的初始化。如果基类未定义 __init__() ，就可以忽略这一步。如果不知道基类是否定义了 __init__() ，可在不提供任何参数的情况下调用它，因为始终存在一个不执行任何操作的默认 __init__() 实现。 # 定义一个人类 class Person : def __init__ ( self , name , age ): self . name = name self . age = age def get_name ( self ): return self . name def get_age ( self ): return self . age # 定义一个美国人类 ## 现在想给美国人在初始化的时候加上 性别 的属性 class American ( Person ): # 重新定义__init__()会覆盖Person的__init__()方法 def __init__ ( self , name , age , gender ): Person . __init__ ( self , name , age ) self . gender = gender def get_gender ( self ): return self . gender jackson = American ( name = \"Cesar T. Mauck\" , age = 14 , gender = \"male\" ) jackson . get_age () 14 jackson . get_gender () 'male' # 有时，派生类将重新实现方法，但是还想调用原始的实现。 为此，有一种方法可以显式地调用基类中的原始方法，将实例 self 作为第一个参数传递即可，如下所示： # 定义一个华盛顿人类 class Washington ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # 显式地调用基类中的原始方法 age = American . get_age () age += 1 self . age = age print ( \"Washington people grow up one year old\" ) 这个例子的微妙之处在于，American这个类其实没有实现 get_age() 方法。该方法是在Person类中实现的。尽管这段代码能够运行，但它可能会引起一些混淆（例如，American是否应该实现 get_age() ? ）。因此，替代解决方案是用 super() 函数，如下所示： # 定义一个加利福尼亚人类 class California ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # 显式地调用基类中的原始方法 ## 实际上，因为get_age()方法在Person中定义 ## 这里可以传入Person的任何一个派生类 age = super ( California , self ) . get_age () age += 1 self . age = age print ( \"Californians grow up one year old\" ) Terri = California ( \"Terri H. Booth\" , 25 , \"female\" ) Terri . growing_up () Californians grow up one year old super(cls, instance) 会返回一个特殊对象，该对象支持在基类上执行属性查找。如果使用该函数，Python将使用本来应该在基类上使用的正常搜索规则来搜索属性。有了这种方式，就无需写死方法位置，并且能更清晰地陈述你的意图（即你希望调用以前的实现，无论它是哪个基类定义的）。然而， super() 的语法尚有不足之处。如果使用Python 3，可以使用简化的语句 super().get_age() 来执行上面示例中的计算。","text_tokens":["例子","一个","时","时候","你","现有","知道","未定义","类","one","的","规则","点","更","加利福","特殊","多","方式","要","分隔","性别","混淆","不会","用以","代码","默认","第一个","修改","重","”","即","想重","实现","up","在于","搜索","会","由","计算","_","基类","它们","第一","super","为止","用","对象","，","列表","行为","超类","其实","称为","了","参数传递","类中","打印","用于","执行","覆盖","尚有","例如","新类","添加","始终","没有","growing","现在","微妙","实际","\"","死","增强","匹配","清晰","print","时未","语句","继续下去","给","一步","__","“","'","华盛顿","是",")","people","self","使用","jackson","加利","解决","目的","：","中","grow","来","之处","所","项","所有","简化","{","+","可能","是否","）","根类","字符串","操作","该","californians","上面",":","美国","传递","所示","常见","语法","如","str","指定","具体","名称","想","一些","?","gender","有","因为","引起","写","然而","一种","object","还","能够","class","无需","terri","t","陈述","有时","稍微","一直","如果","字符","可以","其","任何","调用","female","创建","定义","运算","14",",","为此","运行","booth","上","但是","3","华盛","替代","能","通过","忽略","重新","可","解决方案","尼亚","有效","参数","福尼亚","人","(","函数","那么","不","age","功能","子类","打印函数","之","提供","将","它","方案","返回","如下","不足","自己","存在","通常","即可","不足之处","cls","来讲","mauck","并","正常","人类","f","具体来讲","哪个","派生","恰当","初始化","cesar","year","instance","算符","##","get","male","=","处","但","数传","这里","因此","或","在","查找","支持","位置","情况","american","就","类时","对","old","初始","继承","地","def","。","加上","california","这种","无论","自动","逗号","显式","person","}","过程","（","将会","继续","进行","应该","传入","新","段","直到","意图","属性","尽管","加利福尼亚","实际上","实例","下","这个","找到","1","h","机制","供","希望","运算符","作为","python","#","这","以前","name","下去",".","原始","init","方法","并且"," ","years","派生类","示例","25","本来","washington","这些","return","未定"],"title":"继承","title_tokens":["继承"]},{"location":"Python基础/4.1.类.html#_3","text":"Python支持多重继承。通过让一个类列出多个基类即可指定多重继承。例如，下面给出了一个类集合： # 定义一个圣拉蒙人类 class San_Ramon ( American , California , Washington ): def growing_up ( self ): pass Edwin = San_Ramon ( \"Edwin A. Marcotte\" , 37 , \"male\" ) Edwin . get_age () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6c60ffbe4e5a> in <module> 1 # 定义一个圣拉蒙人类 ----> 2 class San_Ramon(American, California, Washington): 3 def growing_up(self): 4 pass 5 TypeError: Cannot create a consistent method resolution order (MRO) for bases American, California, Washington 使用多重继承时，属性的解析会变得非常复杂，因为可以使用很多搜索路径来绑定属性。 在查找使用了多重继承的属性时，会将所有基类按从“最特殊”的类到“最不特殊”的类这种顺序进行排列。然后在搜索属性时，就会按这个顺序搜索，直至找到该属性的第一个定义。对于任何给定的类，通过打印它的 mro 属性即可查看基类的顺序，例如： 在大多数情况下，这个列表基于“有意义”的规则排列得出。也就是说，始终先检查派生类，然后再检查其基类，如果一个类具有多个父类，那么始终按类定义中列出的父类顺序检查这些父类。但是，基类的准确顺序实际上非常复杂，不是基于任何“简单的”算法，如深度优先或广度优先搜索。实际上，基类的顺序由 C3 线性化算法确定，可以在论文“A Monotonic Superclass Linearization for Dylan”（K. Barrett 等，发表于 OOPSLA’96）中找到该算法的介绍。该算法的一个需要注意的地方是，某些类层次结构将被 Python 拒绝并会抛出 TypeError 错误，例如： 一般来说，在大多数程序中最好避免使用多重继承。但是，多重继承有时可用于定义所谓的混合（mixin）类。混合类通常定义了要“混合到”其他类中的一组方法，目的是添加更多的功能（这与宏很类似）。通常，混合类中的方法将假定其他方法存在，并将以这些方法为基础构建。","text_tokens":["一个","时","4","圣","规则","类","create","的","与","排列","更","父类","特殊","集合","非常复杂","层次结构","多","要","in","混合","第一个","算法","被","”","线性化","下面","会","搜索","6c60ffbe4e5a","由","edwin","_","基类","于","第一","resolution","构建","很多","需要","优先","查看","论文","marcotte","，","列表","order","了","类中","然后","2","打印","最好","用于","也就是说","为","例如","意义","一般","call","添加","c3","始终","growing","一般来说","顺序搜索","对于","实际","\"","ramon","到","input","“","-",")","是","self","使用","宏","以","目的","：","中","等","来","介绍","准确","再","linearization","所有","---------------------------------------------------------------------------","拉蒙","）","最","该","5","结构",":","----","most","mixin","monotonic","如","指定","很","复杂","cannot","recent","有","因为","检查","直至","大多数","其他","class","顺序","oopsla","从","有时","简单","如果","列出","绑定","for","bases","可以","任何","method","其","定义","路径","大多",",","3","并会","但是","给出","通过","不是","barrett","可","这些","变得","(","那么","不","拒绝","pass","age","<","mro","先","功能","多重","解析","给定","’","避免","将","地方","它","多数","程序","即可","通常","存在","a","具有","让","广度","所谓","ipython","并",">","37","superclass","人类","派生","基于","male","get","假定","=","线性","抛出","某些","或","在","查找","支持","dylan","情况","american","类似","得出","就","层次","traceback","继承","def","。","按类","california","这种","san","基础","k","typeerror","（","consistent","进行","属性","非常","实际上","确定","注意","1","下","这个","找到","按","就是","多个","python","#","这","module","就是说","错误","深度",".","方法"," ","last","派生类","washington","来说","发表","一组","up","96"],"title":"多重继承","title_tokens":["继承","多重"]},{"location":"Python基础/4.1.类.html#_4","text":"动态绑定（在继承背景下使用时，有时也称为多态性）是指在不考虑实例类型的情况下使用实例只要以 obj.attr 的形式访问属性，就会按照一定的顺序搜索并定位 attr ： 首先是实例本身，接着是实例的类定义，然后是基类。 查找过程会返回第一个匹配项。 这种绑定过程的关键在于，它不受对象 obj 的类型影响。因此，如果执行像 obj.name 这样的查找，对所有拥有 name 属性的 obj 都是适用的。 polymorphism 源自希腊语，意思是“有多种形态”。这大致意味着即便你不知道变量指向的是哪种对象，也能够对其执行操作，且操作的行为将随对象所属的类型（类）而异。也就是同一种调用形式，但有不同的执行效果。 在Python中，多态也称为 鸭子类型 （duck typing）。这个术语源自 James Whitcomb Riley 在17世纪写下的一句诗： When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. 真不知道谁想出这个术语的，如果用数学语言来类比，鸭子类型相当于数学的公理化定义。 Python 程序员经常编写利用这种行为的程序。例如，如果想编写现有对象的自定义版本，可以继承该对象，也可以创建一个外观和行为像它但与它无任何关系的全新对象。后一种方法通常用于保持程序组件的松散耦合。例如，可以编写代码来处理任何种类的对象，只要该对象拥有特定的方法集。最常见的例子就是利用标准库中定义的各种“类似文件”的对象。尽管这些对象的工作方式像文件，但它们并不是继承自内置文件对象的。","text_tokens":["动态","例子","一个","时","自定义","你","自","现有","知道","类","类型","的","公理化","与","源自","方式","都","关键在于","诗","同","鸭子","无","第一个","代码","库中","文件","”","在于","会","搜索","基类","它们","第一","希腊","swims","用","对象","工作","，","行为","且","称为","然后","quacks","执行","用于","相当","例如","程序员","影响","call","处理","obj","内置","拥有","顺序搜索","外观","匹配","多态性","变量","“","是","形式","使用","以","：","中","大致","即便","see","不知","来","真不","当于","所有","一定","只要","松散","）","操作","该","关键","最","访问","特定","定位","polymorphism","而异","常见","后","that","想","i","也","谁","数学","有","集","能够","一种","接着","顺序","本身","有时","bird","多种","如果","walks","版本","绑定","可以","其","任何","调用","相当于","定义","创建",",","多态","不是","种类","这些","按照","标准","和","不","自定","一句","将","它","返回","全新","耦合","程序","通常","a","riley","并","哪种","效果","关系","17","首先","但","所属","各种","因此","在","查找","意味","类似","情况","就","对","指向","考虑","and","编写","继承","背景","像","随","形态","出","类比","。","这种","利用","组件","过程","写下","（","这样","理化","like","属性","尽管","适用","真不知道","意味着","下","实例","这个","attr","when","就是","意思","不同","保持","whitcomb","python","世纪","duck","这","typing","指","name","经常","公理",".","语言","不受","方法"," ","术语","项","james","希腊语"],"title":"多态动态绑定和鸭子类型","title_tokens":["动态","鸭子","绑定","类型","和","多态"]},{"location":"Python基础/4.1.类.html#_5","text":"类中最常用的方法是实例方法，即 将实例作为第一个参数传递给该方法。 根据约定，这个参数名称为self，尽管所有合法的标识符都可以使用。 self 参数指向对象本身。 self 参数很有用，甚至必不可少。如果没有它，所有的方法都无法访问对象本身（要操作的属性所属的对象）。 下面是以是实例方法的例子： class Kls ( object ): def __init__ ( self , data ): self . data = data def printd ( self ): print ( self . data ) ik1 = Kls ( 'arun' ) ik2 = Kls ( 'seema' ) ik1 . printd () ik2 . printd () arun seema 然后看一下代码和示例图片: 在1、2中，参数传递给方法。 在3中， self参数指向当前实例。 在4中，我们不需要给方法提供实例， Python解释器自己会做这些操作 。","text_tokens":["例子","一个","4","不可","arun","的","都","要","代码","第一个","即","下面","会","必不可少","第一","我们","需要","对象","，","类中","参数传递","为","然后","2","没有","print","给","__","'","是",")","self","使用","以","无法","：","中","根据","所有","一下","）","最","该","操作","访问",":","传递","printd","seema","名称","很","当前","解释","object","class","本身","如果","合法","可以","图片",",","3","甚至","参数","ik1","(","和","不","提供","将","释器","它","标识符","自己","常用","约定","=","所属","数传","在","指向","做","看","def","。","ik2","kls","data","（","、","解释器","尽管","属性","无法访问","实例","1","这个","作为","python","标识",".","示例","init","方法"," ","这些","有用"],"title":"实例方法","title_tokens":["实例","方法"]},{"location":"Python基础/4.1.类.html#_6","text":"Note 以下两个代码示例介绍了静态方法的两个应用场景： 不需要访问实例对象或类对象的方法和属性，但与类有关的功能 创建构造函数 经常有一些跟类有关系的功能，但在运行时又不需要实例和类参与（比如更改环境变量或者修改其他类的属性），当然可以在类定义之外写一个函数实现这些功能，但这样会扩散类内部的代码，不利于代码的维护。比如这样： IND = 'ON' def checkind (): return ( IND == 'ON' ) class Kls ( object ): def __init__ ( self , data ): self . data = data def do_reset ( self ): if checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if checkind (): self . db = 'new db connection' print ( 'DB connection made for:' , self . data ) ik1 = Kls ( 12 ) do_reset ( ik1 ) # Reset done for: 12 set_db ( ik1 ) # DB connection made for: 12 如果使用 @staticmethod 就能把相关的代码放到对应的位置了。 IND = 'ON' class Kls ( object ): def __init__ ( self , data ): self . data = data @staticmethod def checkind (): return ( IND == 'ON' ) def do_reset ( self ): if self . checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if self . checkind (): self . db = 'New db connection' print ( 'DB connection made for: ' , self . data ) ik1 = Kls ( 12 ) ik1 . do_reset () ik1 . set_db () Reset done for: 12 DB connection made for: 12 实际上，静态方法是一种普通函数，只不过它们正好位于类定义的命名空间中， 因为它不会对任何实例类型进行操作 。 如果在编写类时需要采用很多不同的方式来创建新实例，则常常使用静态方法。因为类中只能有一个 __init__() 函数，所以替代的创建函数通常按如下方式定义： import time class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @staticmethod def now (): t = time . localtime () return Date ( t . tm_year , t . tm_mon , t . tm_mday ) @staticmethod def tomorrow (): t = time . localtime ( time . time () + 86400 ) return Date ( t . tm_year , t . tm_mon , t . tm_mday ) # 创建日期的示例 a = Date ( 1967 , 4 , 9 ) b = Date . now () # 调用静态方法now() c = Date . tomorrow () # 调用静态方法tomorrow()","text_tokens":["构造","一个","时","4","利于","类","类型","的","与","只不过","所以","方式","常常","位于","参与","不会","代码","修改","9","只能","实现","正好","构造函数","会","不利于","采用","_","它们","if","很多","之外","需要","checkind","对象","，","month","了","类中","有关","相关","mon","当然","实际","环境","do","print","变量","'","__","set","1967",")","是","self","使用","：","中","扩散","来","介绍","day","放到","空间","+","静态方法","）","reset","操作","made","访问",":","静态","维护","new","比如","两个","一些","普通","或类","有","因为","写","其他","object","一种","class","done","t","12","如果","可以","for","命名","任何","调用","创建","运行","定义",",","替代","能","@","ind","对应","ik1","函数","(","和","不","staticmethod","功能","它","内部","如下","通常","a","tomorrow","把","note","import","关系","year","now","=","但","86400","在","位置","localtime","就","类时","db","对","编写","date","或者","def","则","。","更改","应用","kls","data","（","tm","connection","进行","新","这样","属性","日期","实际上","又","实例","mday","按","不同","环境变量","#","c","time","场景","b","经常","跟类",".","示例","init","方法"," ","以下","on","不利","不过","环境变","这些","return"],"title":"静态方法","title_tokens":["方法","静态方法","静态"]},{"location":"Python基础/4.1.类.html#_7","text":"Note 以下两个代码示例介绍了类方法的两个应用场景： 创建构造函数 动态更新类 类方法是将类本身作为对象进行操作的方法。类方法使用 @classmethod 装饰器定义，与实例方法不同，Python解释器会将类本身传递给类方法的第一个参数（一般将该参数命名为 cls ）。例如： class Times ( object ): factor = 1 @classmethod def mul ( cls , x ): return cls . factor * x class TwoTimes ( Times ): factor = 2 x = TwoTimes . mul ( 4 ) # 调用Times.mul(TwoTimes, 4) -> 8 在这个例子中，请注意类 TwoTimes 是如何作为对象传递给 mul() 的。尽管这个例子有些深奥，但类方法还有一些实用且巧妙的用法。例如，你定义了一个类，它继承自前面给出的 Date 类并对其略加定制： class EuroDate ( Date ): # 修改字符串转换，以使用欧洲日期格式 def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) 由于该类继承自 Date，所以它拥有 Date 的所有特性。但是 now() 和 tomorrow() 方法稍微有点不同。例如，如果调用 EuroDate.now()，则会返回 Date 对象，而不是 EuroDate 对象。类方法可以解决该问题： class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @classmethod def now ( cls ): t = time . localtime () return cls ( t . tm_year , t . tm_mon , t . tm_mday ) @classmethod def tomorrow ( cls ): t = time . localtime ( time . time () + 86400 ) return cls ( t . tm_year , t . tm_mon , t . tm_mday ) class EuroDate ( Date ): # 修改字符串转换，以使用欧洲日期格式 def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) a = Date . now () # 调用Date.now(Date)并返回Date b = EuroDate . now () # 调用Date.now(EuroDate)并返回EuroDate print ( type ( a )) print ( type ( b )) <class '__main__.Date'> <class '__main__.EuroDate'> 类方法除了用于创建构造函数，另一个例子是动态更新类。例如我们想动态更新一个类属性： class Kls ( object ): models = {} def __init__ ( self , model_name ): # 加载模型 pass @classmethod def load_model ( cls , model_name ): cls . models [ model_name ] = cls ( model_name ) @classmethod def get_model ( cls , model_name ): return cls . models . get ( model_name , None ) def predict ( self ): return \"预测结果为1\" model_name = \"svm\" Kls . load_model ( model_name ) model = Kls . get_model ( model_name ) model . predict () '预测结果为1' Kls . models {'svm': <__main__.Kls at 0x21aaefe5908>} 当然，除了使用类方法，也可以在实例方法中显式调用类属性，达到动态更新类的效果，例如我们要获取实例数： class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 @classmethod def get_no_of_instance ( cls_obj ): return cls_obj . no_inst ik1 = Kls () ik2 = Kls () print ( ik1 . get_no_of_instance ()) print ( Kls . get_no_of_instance ()) 2 2 但是如果要用实例方法实现的话，就得创建一个实例对象，这意味着我们必须要给这个实例对象命名。在编程中，给过多的变量命名，有时是一个头疼的问题。 在类外面写一个函数也可以实现这样的效果，但不利于代码的维护。 def get_no_of_instances ( cls_obj ): return cls_obj . no_inst class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 ik1 = Kls () ik2 = Kls () print ( get_no_of_instances ( Kls )) 2","text_tokens":["构造","动态","例子","一个","特性","0x21aaefe5908","你","自","加载","4","eurodate","中显式","利于","类","%","的","与","欧洲","02d","所以","头疼","多","但类","要","代码","第一个","修改","instances","实现","构造函数","编程","会","不利于","该类","模型","_","第一","我们","用","转换","对象","，","month","器","更新","且","了","为","2","而","问题","用于","一般","例如","at","0","得","mon","obj","拥有","当然","\"","除了","8","数","print","给","变量","__","前面","-","定制","是",")","4d","self","使用","'","no","以","解决","：","中","predict","深奥","介绍","巧妙","/","所有","{","day","的话","+","）","操作","该","略加","字符串","用法",":","传递","[","维护","str","两个","inst","想","一些","也","结果","解释","写","如何","object","class","请","本身","t","还有","有时","获取","稍微","如果","mul","字符","__.","可以","其","命名","调用","创建","定义",",","但是","给出","不是","type","格式","@","参数","model","ik1","函数","(","和","]","pass","<","释器","将","main","它","有些","返回","a","cls","tomorrow","并",">","note","效果","load","year","instance","预测","now","get","=","86400","必须","x","models","但","svm","classmethod","在","意味","twotimes","localtime","就","对","装饰","date","继承","另","def","则","。","times","应用","}","ik2","kls","（","tm","进行","这样","解释器","尽管","日期","属性","外面","由于","注意","意味着","实例","1","这个","mday","不同","作为","python","实用","#","这","有点","time","name","场景","b","none","of",".","过","示例","init","方法","达到"," ","以下","factor","不利","*","return"],"title":"类方法","title_tokens":["类","方法"]},{"location":"Python基础/4.1.类.html#_8","text":"在实例方法和类方法中，Python默认将当前实例或者类对象传给方法的第一个参数（非指定默认值的参数），如果方法不设置参数，便会报错： class Kls ( object ): def __init__ ( self , data ): self . data = data def imethod1 (): print ( \"不接收实例\" ) def imethod2 ( * arg ): print ( 'Instance:' , arg ) @staticmethod def smethod ( * arg ): print ( 'Static:' , arg ) @classmethod def cmethod1 (): print ( \"不接收类对象\" ) @classmethod def cmethod2 ( * arg ): print ( 'Class:' , arg ) ik3 = Kls ( 'arun' ) ik3 . imethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-82fbcd62768a> in <module> 1 ik3 = Kls('arun') ----> 2 ik3.imethod1() TypeError: imethod1() takes 0 positional arguments but 1 was given ik3 . cmethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6055e1d64eee> in <module> ----> 1 ik3.cmethod1() TypeError: cmethod1() takes 0 positional arguments but 1 was given 实例方法、类方法必须设置参数接收类对象： ik3 . imethod2 () ik3 . cmethod2 () Instance: (<__main__.Kls object at 0x0000021AAEFF0390>,) Class: (<class '__main__.Kls'>,) 静态方法则不会传入实例或类对象： ik3 . smethod () Static: () 如果方法不设置参数，只能通过类去调用，应该避免这种用法，没参数的方法应该加上 @staticmethod 装饰器： Kls . imethod1 () 不接收实例 关于静态方法和类方法需要注意的一点是，Python 不会在与实例方法独立的命名空间中管理它们。因此，可以通过实例或类调用它们。例如： Kls . cmethod2 () Kls ( 'arun' ) . cmethod2 () Kls . smethod () Kls ( 'arun' ) . smethod () Class: (<class '__main__.Kls'>,) Class: (<class '__main__.Kls'>,) Static: () Static: () 这可能很容易引起混淆，因为对 Kls('arun').cmethod2() 的调用与实例 Kls('arun') 没有任何关系。 这种行为是 Python 对象系统与其他面向对象语言（如 Smalltalk 和 Ruby）对象系统的区别之一。在这些语言中，类方法与实例方法是严格分开的。 而实例方法必须通过实例调用，因为需要传入实例。","text_tokens":["一个","arun","类","的","与","报错","in","混淆","不会","默认","第一个","区别","只能","smethod","严格","它们","第一","需要","对象","，","行为","器","2","而","关于","例如","0","call","at","没有","ruby","smalltalk","\"","arguments","print","input","__","'","-",")","是","self","：","中","---------------------------------------------------------------------------","系统","接收","空间","可能","静态方法","）","用法",":","----","静态","most","cmethod1","arg","如","指定","当前","很","recent","或类","因为","引起","其他","object","class","positional","takes","如果","__.","0x0000021aaeff0390","可以","命名","调用","任何",",","面向对象","通过","@","管理","参数","便会","(","和","不","<","staticmethod","避免","之一","将","main","没","ipython",">","关系","非","instance","=","必须","given","默认值","因此","static","在","classmethod","对","传给","traceback","but","装饰","或者","82fbcd62768a","def","则","was","。","设置","这种","加上","6055e1d64eee","kls","data","typeerror","（","应该","传入","容易","、","注意","实例","1","imethod2","分开","python","类去","一点","这","面向","cmethod2","ik3","module",".","语言","init","方法"," ","last","imethod1","*","这些","独立"],"title":"实例方法、静态方法、类方法对比","title_tokens":["对比","实例","方法","、","静态","类","静态方法"]},{"location":"Python基础/4.1.类.html#_9","text":"@property ——把方法变为属性 通常，访问实例或类的属性时，返回的会是所存储的相关值。特性（property）是一种特殊的属性，访问它时会计算它的值。下面是一个简单的例子： import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius # Circle的一些附加特性 @property def area ( self ): return math . pi * self . radius ** 2 @property def preimeter ( self ): return 2 * math . pi * self . radius 得到的Circle对象的行为如下： c = Circle ( 4.0 ) c . radius 4.0 c . area 50.26548245743669 c . preimeter 25.132741228718345 c . area = 2 ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-0dac39a0c579> in <module> ----> 1 c.area = 2 AttributeError: can't set attribute 在这个例子中，Circle 实例存储了一个实例变量 c.radius 。 c.area 和 c.perimeter 是根据该值计算得来的。 @property 装饰器支持以简单属性的形式访问后面的方法，无需像平常一样添加额外的 () 来调用该方法。对象的使用者很难发现正在计算一个属性，除非在试图重新定义该属性时生成了错误消息（如上面的 AttributeError 异常所示）。 这种特性使用方式遵循所谓的统一访问原则。 实际上，如果定义一个类，尽可能保持编程接口的统一总是不错的。如果没有特性，将会以简单属性（如 c.radius ）的形式访问对象的某些属性，而其他属性将以方法（如 c.area() ）的形式访问。费力去了解何时添加额外的 () 会带来不必要的混淆。特性可以解决该问题。 Python 程序员很少认识到， 方法本身是被隐式地作为一类特性处理的。 考虑下面这个类： class Foo ( object ): def __init__ ( self , name ): self . name = name def spam ( self , x ): print ( \" %s , %s \" % ( self . name , x )) Foo ( \"d\" ) . spam <bound method Foo.spam of <__main__.Foo object at 0x0000021AAEFDC7B8>> 用户创建 f = Foo(\"Guido\") 这样的实例然后访问 f.spam 时，不会返回原始函数对象 spam ，而是会得到所谓的绑定方法（bound method），绑定方法是一个对象，代表将在对象上调用 () 运算符时执行的方法调用。绑定方法有点类似于已部分计算的函数，其中的self参数已经填入，但其他参数仍然需要在使用 () 调用该函数时提供。这种绑定方法对象是由在后台执行的特性函数静默地创建的。 使用 @staticmethod 和 @classmethod 定义静态方法和类方法时，实际上就指定了使用不同的特性函数，以不同的方式处理对这些方法的访问。 例如， @staticmethod 仅“按原样”返回方法函数，不会进行任何特殊的包装或处理。 特性还可以截获操作权，以设置和删除属性。这是通过向特性附加其他 setter 和 deleter 方法来实现的，如下所示： class Foo ( object ): def __init__ ( self , name ): self . __name = name @property def name ( self ): return self . __name @name . setter def name ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value @name . deleter def name ( self ): raise TypeError ( \"Can't delete name\" ) 在这个例子中，首先使用 @property 装饰器和相关方法将属性 name 定义为只读特性。后面的 @name.setter 和 @name.deleter 装饰器将其他方法与 name 属性上的设置和删除操作相关联。这些方法的名称必须与原始特性的名称完全匹配。在这些方法中，请注意实际的名称值存储在属性 __name 中。所存储属性的名称无需遵循任何约定，但它必须与特性名称不同，以便将它与特性的名称区分开。 在以前的代码中，通常会看到用 property(getf=None, setf=None, delf=None, doc=None) 函数来定义特性，往其中传入一组名称不同的方法，用于执行相关操作。例如： class Foo ( object ): def getname ( self ): return self . __name def setname ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value def delname ( self ): raise TypeError ( \"Can't delete name\" ) name = property ( getname , setname , delname ) 这种老方法仍然可以使用，但装饰器版本会让类看起来更整洁。 例如，如果使用装饰器，get、 set 和 delete 函数将不会显示为方法。","text_tokens":["类","must","doc","遵循","混淆","不会","用者","代码","被","attribute","bound","getf","实现","下面","仍然","计算","包装","而","at","call","处理","变量","总是","set","self","何时","以","：","中","后台","得来","静态方法","该","访问","这是","guido","most","隐式","radius","看起来","存储","如果","__.","任何","调用","定义","通过","得到","消息","和","staticmethod","值","提供","而是","spam","程序","setname","import","首先","部分","往","classmethod","装饰","变为","静默","typeerror","将会","can","实际上","50.26548245743669","额外","实例","保持","作为","delname","module","错误","not",".","pi","*","这些","时","setter","更","deleter","string","用户","不必要","时会","用","需要","，","器","附加","然后","为","执行","用于","以便","发现","整洁","除非","认识","实际","\"","权","关联","匹配","print","math","-","其中","circle","已经","所","操作","上面","显示","静态","一样","如","或类","无需","必要","版本","运算","上","area","参数","函数","main","getname","返回","a","让","约定","ipython","开","仅","算符","但","perimeter","x","某些","在","traceback","地","def","起来","进行","传入","这样","、","delete","属性","按","不同","有点","使用者","原始"," ","正在","一个","0x0000021aaefdc7b8","%","的","方式","很少","0dac39a0c579","会","由","if","尽可能","行为","了","不错","费力","2","例如","程序员","25.132741228718345","没有","到","__","'","是",")","使用","解决","接口","来","相关联",":","所示","----","isinstance","str","指定","名称","一些","recent","其他","一种","object","还","请","本身","截获","简单","绑定","可以",",","去","重新","@","(","4.0","将","如下","property",">","f","填入","或","类似","支持","考虑","后面","该值","像","统一","这种","（","delf","python","以前","c","name","一类","方法","异常","last","向","一组","例子","特性","不必","原样","与","特殊","尽可","in","setf","”","d","编程","于","对象","问题","相关","添加","代表","—","input","foo","“","完全","形式","根据","---------------------------------------------------------------------------","很难","可能","）","value","class","t","看起","删除","method","创建","已","了解","preimeter","<","be","attributeerror","它","通常","所谓","把","s","平常","原则","区分","get","=","必须","就","对","raise","。","设置","带来","注意","1","这个","老","运算符","只读","#","of","none","看到","试图","init","生成","return","!"],"title":"特性","title_tokens":["特性"]},{"location":"Python基础/4.1.类.html#_10","text":"默认情况下，类的所有属性和方法都是“公共的”。这意味着对它们的访问没有任何限制。这还暗示着，在基类中定义的所有内容都会被派生类继承，并可从派生类内进行访问。在面向对象的应用程序中，通常我们不希望发生这种行为，因为它会暴露对象的内部实现，可能导致在派生类中定义的对象与在基类中定义的对象之间发生命名空间冲突。 Note 这意味着派生类可以覆盖基类的定义。 为了解决该问题， 类中所有以双下划线开头的名称（如 __Foo ）都会自动变形，形成具有 _Classname__Foo 形式的新名称。 这提供了一种在类中添加私有属性和方法的有效方式，因为派生类中使用的私有名称不会与基类中使用的相同私有名称发生冲突，如下所示： class A ( object ): def __init__ ( self ): self . __X = 3 # 变形为self._A__X def __spam ( self ): # 变形为_A__spam() print ( \"A\" ) def bar ( self ): self . __spam () # 只调用A.__spam() class B ( A ): def __init__ ( self ): A . __init__ ( self ) self . __X = 37 # 变形为self._B__X def __spam ( self ): # 变形为_B__spam() print ( \"B\" ) b = B () # 派生类的定义没有覆盖基类的定义 b . bar () A 尽管这种方案似乎隐藏了数据，但并没有严格的机制来实际阻止对类的“私有”属性进行访问。特别是如果已知类名称和相应私有属性的名称，则可以使用变形后的名称来访问它们。通过重定义 dir() 方法，类可以降低这些属性的可见性， dir() 方法提供了检查对象的 dir() 函数所返回的名称列表。 尽管这种名称变形似乎是一个额外的处理步骤，但变形过程实际上只在定义类时发生一次。它不会在方法执行期间发生，也不会为程序的执行添加额外的开销。而且要知道，名称变形不会在 getattr() 、 hasattr() 、 setattr() 或 delattr() 等函数中发生，在这些函数中，属性名被指定为字符串。对于这些函数，需要显式使用变形名称（如 __Classname__name ）来访问属性。 建议在定义可变属性时，通过特性来使用私有属性。这样，就可鼓励用户使用特性名称，而无需直接访问底层实例数据（如果你在实例开头添加了一个特性，可能不想采用这种访问方式）。 通过为方法提供私有名称，超类可以阻止派生类重新定义和更改方法的实现。 例如，示例中的 A.bar() 方法只调用 A.__spam() ，无论 self 具有何种类型，或者派生类中是否存在不同的 __spam() 方法都是如此。 最后，不要混淆私有类属性的命名和模块中“私有”定义的命名。一个常见的错误是，在定义类时，在属性名上使用单个前导下划线来隐藏属性值（如 _name ）。 在模块中，这种命名约定可以阻止通过 from module import * 语句导出名称。 这意味着单下划线开头的定义只能被类本身和其派生类访问。但是在类中，这种命名约定既不能隐藏属性，在某个类继承该类并使用相同名称定义一个新属性或方法时，也不能阻止出现名称冲突。","text_tokens":["名","一个","时","特性","你","性","知道","限制","数据","类","类型","的","冲突","与","模块","相同","bar","它会","都","方式","隐藏","要","为了","delattr","下划","混淆","不会","默认","不想","dir","降低","重","被","”","导致","以双","划线","单","只能","用户","实现","setattr","会","严格","只","该类","采用","_","之间","它们","基类","我们","需要","对象","，","列表","行为","getattr","超类","了","类中","问题","发生","覆盖","为","._","特别","执行","而","例如","添加","处理","可见","没有","某个","对于","实际","\"","from","print","建议","语句","开销","foo","__","“","是",")","形式","使用","self","可变","何种","解决","：","中","等","来","所","所有","可能","空间","是否","）","字符串","该","暴露","访问",":","所示","公共","一次","常见","如","下划线","后","指定","名称","也","因为","检查","还","一种","object","class","无需","导出","本身","从","私有","如果","字符","前导","可以","其","任何","命名","形成","调用","定义","3","面向对象","但是","期间","通过","可","重新","有效","内容","hasattr","不能","(","函数","和","不","发生冲突","名上","值","提供","开头","出现","它","内部","方案","如下","spam","返回","既","程序","存在","通常","a","具有","约定","并","如此",".__","37","note","派生","鼓励","import","=","classname","但","x","似乎","最后","或","在","意味","情况","就","类时","对","继承","暗示着","或者","内","def","则","步骤","。","相应","底层","更改","这种","无论","应用","单个","自动","显式","过程","（","进行","新","而且","这样","直接","、","属性","尽管","应用程序","实际上","意味着","额外","下","实例","希望","已知","机制","对类","不同","不要","面向","这","#","name","b","module","阻止","错误",".","示例","init","方法"," ","派生类","变形","*","这些","暗示"],"title":"数据封装和私有属性","title_tokens":["私有","封装","数据","和","属性"]},{"location":"Python基础/4.1.类.html#_11","text":"从内部实现上看，实例是使用字典来实现的，可以通过实例的 __dict__ 属性访问该字典。这个字典包含的数据对每个实例而言都是唯一的，如下所示： class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance a = Account ( \"Guido\" , 1100.0 ) a . __dict__ {'name': 'Guido', 'balance': 1100.0} 可以在任何时候向实例添加新属性，例如： a . number = 123456 # 将属性'number'添加到 a.__dict__ 对实例的修改始终会反映到局部 __dict__ 属性中。同样，如果直接对 __dict__ 进行修改，所做的修改也会反映在实例的属性中。 实例通过特殊属性 __class__ 链接回它们的类。类本身也只是对字典的浅层包装，你可以在实例的 __dict__ 属性中找到这个字典。可以在类字典中找到各种方法。例如： a . __class__ __main__.Account Account . __dict__ . keys () dict_keys(['__module__', '__init__', '__dict__', '__weakref__', '__doc__']) 最后，通过特殊属性 __bases__ 中将类链接到它们的基类，该属性是一个基类元组。这种底层结构是获取、设置和删除对象属性的所有操作的基础。 只要使用 obj.name = value 设置了属性，特殊方法 obj.__setattr__(\"name\", value) 就会被调用。如果使用 del obj.name 删除了一个属性，就会调用特殊方法 obj.__delattr__(\"name\") 。 这些方法的默认行为是修改或删除 obj 的局部 __dict__ 的值，除非请求的属性正好是一个特性或描述符。在这种情况下，设置和删除操作将由与该特性相关联的设置和删除函数执行。 在查找属性（如 obj.name ）时，将调用特殊方法 obj.__getattrribute__(\"name\") 。该方法执行搜索来查找该属性，这通常涉及检查特性、查找局部 __dict__ 属性、检查类字典以及搜索基类。如果搜索过程失败，最终会尝试调用类的 __getattr__() 方法（如果已定义）来查找该属性。如果这也失败，就会抛出 AttributeError 异常。 如果有必要，用户定义的类可以实现其自己的属性访问函数。例如： import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius def __getattr__ ( self , name ): if name == 'area' : return math . pi * self . radius ** 2 elif name == 'perimeter' : return 2 * math . pi * self . radius else : return object . __getattr__ ( self , name ) def __setattr__ ( self , name , value ): if name in [ 'area' , 'perimeter' ]: raise TypeError ( \" %s is readonly\" % name ) from None object . __setattr__ ( self , name , value ) c = Circle ( 2 ) c . area 12.566370614359172 c . area = 10 ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-52599b4ddcfc> in <module> ----> 1 c.area = 10 <ipython-input-1-a1a0cdcb1eb3> in __setattr__(self, name, value) 13 def __setattr__(self,name,value): 14 if name in ['area','perimeter']: ---> 15 raise TypeError(\"%s is readonly\" % name) from None 16 object.__setattr__(self,name,value) TypeError: area is readonly 重新实现这些方法的类应该可以依靠 object 中的默认实现来执行实际的工作。这是因为默认实现能够处理类的更高级特性，如描述符和特性。 一般来讲，类很少重新定义属性访问运算符。但是，在编写通用的包装器和现有对象的代理时，通常会使用属性访问运算符。通过重新定义 __getattr__() 、 __setattr__() 和 __delattr__() ，代理可以捕获属性访问操作，并透明地将这些操作转发给另一个对象。","text_tokens":["number","时候","一个","你","特性","weakref","时","现有","数据","类","%","的","与","每个","更","特殊","keys","都","delattr","balance","10","doc","---","in","13","很少","尝试","默认","修改","被","用户","实现","正好","setattr","会","搜索","由","_","它们","基类","最终","if","中将","对象","工作","123456","包装","，","行为","getattr","器","了","2","执行","相关","例如","一般","call","添加","处理","始终","obj","除非","实际","\"","from","关联","is","到","input","math","'","__","-","是",")","self","使用","circle","：","中","来","捕获","所","是因为","所有","依靠","---------------------------------------------------------------------------","相关联","{","唯一","只要","del","）","操作","该","访问","结构",":","guido","所示","----","[","most","转发","如","value","radius","描述符","也","recent","有","因为","检查","16","object","能够","1100.0","class","本身","涉及","从","字典","获取","15","如果","必要","__.","删除","可以","bases","任何","调用","其","已","定义","上","14",",","局部","描述","运算","但是","通过","代理","重新","area","失败","透明","(","函数","和","而言","]","<","attributeerror","值","将","main","请求","内部","如下","自己","浅层","通常","a","来讲","ipython","s","以及","并",">",".__","回","elif","import","算符","readonly","=","perimeter","抛出","各种","最后","或","在","查找","元组","包含","情况","dict","52599b4ddcfc","account","就","转发给","对","反映","做","raise","traceback","编写","看","另","地","def","底层","。","设置","这种","发给","}","高级","基础","过程","typeerror","链接","（","进行","应该","12.566370614359172","新","直接","同样","、","属性","实例","下","这个","找到","1","运算符","#","这","c","a1a0cdcb1eb3","name","getattrribute","none","module",".","init","方法","只是"," ","向","异常","else","last","pi","一般来讲","通用","*","这些","return"],"title":"对象表示和属性绑定","title_tokens":["绑定","对象","和","表示","属性"]},{"location":"Python基础/4.1.类.html#__slots__","text":"通过定义特殊变量 slots ，类可以限制对合法实例属性名称的设置，如下所示： class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance __slots__ = ( 'name' , 'balance' ) a = Account ( \"Guido\" , 1100.0 ) a . date = \"12-12\" ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-b978ca4ed4ad> in <module> 7 8 a = Account(\"Guido\", 1100.0) ----> 9 a.date = \"12-12\" AttributeError: 'Account' object has no attribute 'date' 定义 __slots__ 时，可以将实例上分配的属性名称限制为指定的名称，否则将引发 AttributeError 异常。这种限制可以阻止其他人向现有实例添加新属性，即便用户将属性名称写错，也不会创建出新的属性来。 在实际使用中， __slots__ 从未被当作一种安全的特性来实现。它实际上是对内存和执行速度的一种性能优化。 使用 __slots__ 的类的实例不再使用字典来存储实例数据，转而采用一种基于数组的更加紧凑的数据结构。在会创建大量对象的程序中，使用 __slots__ 可以显著减少减少内存占用和执行时间。 注意， __slots__ 与继承的配合使用需要一定的技巧。如果类继承自使用 __slots__ 的基类，那么它也需要定义 __slots__ 来存储自己的属性（即使它不会添加任何属性也是如此），这样才能利用 __slots__ 提供的优势。如果忘记了这一点，派生类的运行速度将更慢，占用的内存也更多，比完全不使用 __slots__ 时情况更糟。 __slots__ 的使用还会破坏期望实例具有底层 __dict__ 属性的代码。尽管这一点通常不适用于用户代码，但对于支持对象的实用库和其他工具，其代码可能要依靠 __dict__ 来调试、序列化对象以及执行其他操作。 最后，如果类中重新定义了 __getattribute__() 、 __getattr__() 和 __setattr__() 等方法， __slots__ 的存在不会对它们的调用产生任何影响。但是，这些方法的默认行为将考虑到 __slots__ 。此外应该强调一点，没有必要向 __slots__ 添加方法或特性名称，因为它们存储在类中，而不是存储在每个实例中。","text_tokens":["时","特性","自","现有","优化","限制","数据","类","的","强调","与","每个","更","特殊","多","balance","要","in","不会","代码","默认","被","attribute","9","用户","实现","忘记","setattr","会","采用","基类","它们","当作","需要","对象","，","getattr","行为","不再","了","其他人","类中","为","执行","用于","而","影响","call","添加","没有","大量","对于","实际","\"","不适","出新","8","减少","到","还会","input","变量","__","'","-",")","是","no","self","has","使用","完全","：","中","即便","更加","等","来","比","工具","数组","依靠","---------------------------------------------------------------------------","序列化","一定","可能","）","操作","结构",":","guido","显著","所示","----","库","most","指定","名称","也","recent","因为","其他","object","一种","存储","1100.0","class","7","字典","12","如果","写错","合法","必要","可以","其","任何","调用","创建","定义","上","运行",",","b978ca4ed4ad","即使","更慢","但是","通过","不是","配合","速度","重新","紧凑","否则","占用","slots","(","和","那么","不","从未","<","attributeerror","调试","数据结构","提供","将","引发","它","如下","此外","程序","自己","通常","破坏","a","具有","存在","ipython","安全","以及","如此",">","getattribute","分配","派生","优势","基于","=","但","性能","最后","或","在","支持","情况","dict","account","对","traceback","date","考虑","继承","def","底层","。","序列","设置","这种","内存","转而","利用","（","应该","新","这样","、","属性","才能","实际上","尽管","注意","实例","1","更糟","实用","一点","这","时间","技巧","name","module","阻止","期望",".","产生","init","异常","方法"," ","last","向","派生类","他人","这些"],"title":"__slots__","title_tokens":["__","slots"]},{"location":"Python基础/4.1.类.html#_12","text":"difference between staticmethod and classmethod in python","text_tokens":["classmethod","in"," ","and","between","python","difference","staticmethod"],"title":"参考","title_tokens":["参考"]},{"location":"Python基础/4.2.模块.html","text":"为什么需要模块 如果你想要编写一些更大的程序，肯定不想定义重复的函数、类，想让代码可以重复使用。随着程序变得越来越大，你可能想要将它分割成几个更易于维护的文件。为了满足这些需要，Python 提供了一个方法可以从文件中获取定义，在脚本或者解释器的一个交互式实例中使用。这样的文件被称为模块。 模块搜索路径 Python 怎样知道从何处找到模块文件？ 如果你熟悉命令行，那么这个问题对你来说就不难理解。在命令行中执行的任何命令，实际上背后都对应了一个可执行文件。命令行解释器（比如 cmd, bash）会从一个全局的环境变量 PATH 中读取一个有序的列表。这个列表包含了一系列的路径，而命令行解释器，会依次在这些路径里，搜索需要的可执行文件。 Python 搜寻模块文件，也遵循了类似的思路。比如，用户在 Python 中尝试导入 import foobar，那么 首先，Python 会在内建模块中搜寻 foobar； 若未找到，则 Python 会在当前工作路径（当前脚本所在路径，或者执行 Python 解释器的路径）中搜寻 foobar； 若仍未找到，则 Python 会在环境变量 PYTHONPATH 中指示的路径中搜寻 foobar； 若依旧未能找到，则 Python 会在安装时指定的路径中搜寻 foobar； 若仍旧失败，则 Python 会报错，提示找不到 foobar 这个模块。 添加搜索路径 当我们使用import加载自己编写的py代码时，必须放在python的默认路径下才可以import。 添加临时路径—— sys.path.append 在python中引入 sys ， sys 中的 path 是一个列表类型的对象，内容就是路径的列表，我们将sys引入后查看就可以清楚的知道了： import sys print ( type ( sys . path )) [ path for path in sys . path if \"Wiki\" not in path ] <class 'list'> ['C:\\\\Users\\\\Android\\\\Desktop', 'G:\\\\Installed\\\\Anaconda3\\\\python37.zip', 'G:\\\\Installed\\\\Anaconda3\\\\DLLs', 'G:\\\\Installed\\\\Anaconda3\\\\lib', 'G:\\\\Installed\\\\Anaconda3', 'C:\\\\Users\\\\Android\\\\AppData\\\\Roaming\\\\Python\\\\Python37\\\\site- packages', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\xgboost-1.0.0_snapshot-py3.7.egg', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop'] 既然是list对象，那么使用append可以向列表添加新的元素，假设我们要添加的路径是 \"C:\\Users\\Android\\Desktop\" ： import sys sys . path . append ( r \"C:\\Users\\Android\\Desktop\" ) 但这只是临时添加路径，如果重启编译器，添加的路径就会消失。 修改环境变量 在Windows10中，选择 ->控制面板\\系统和安全\\系统->高级系统设置->环境变量 ， # 找到path后选择编辑，添加新的路径。 但这种方法不能适用所有python的功能，因为这种方法并未将要查找的路径添加到python的Path系统环境中，在sys.path的列表中找不到相关路径的元素。也就是说这样做并没有将路径添加到python的搜索路径中。 添加永久搜索路径——增加.pth文件 在site-packages文件夹添加path文件，可以实现搜索路径的永久添加。方法如下： 先编辑一个扩展名为 .pth 的文本文件，在这个文本文件里面写上要添加的path就可以了，例如： 文本文件的文件名是：test.pth test.pth 文件的内容是： C:\\Users\\Android\\Desktop 接着获取python的site-packages文件夹的路径： import site site . getsitepackages () ['G:\\\\Installed\\\\Anaconda3', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages'] 然后将 test.pth 文件放进 G:\\Installed\\Anaconda3\\lib\\site-packages 里面即可。 模块的导入 在 python 用 import 或者 from...import 来导入相应的模块。 将整个模块(module)导入: 例如，我们要使用使用 sys 模块，那么首先要导入该模块： import sys 导入 sys 模块后，我们就有了 变量 sys 指向该模块，利用 sys 这个变量，就可以访问 sys 模块的所有功能。 也就是说导入整个模块的做法会导致命名空间的修改。 也可以一次性导入多个module： import os , sys , time 通过 as 关键字，可以在导入module的时候，给module定义别名： import sys as system 从某个模块中导入函数： 从某个模块中导入某个函数 from somemodule import somefunction 从某个模块中导入多个函数 from somemodule import firstfunc , secondfunc , thirdfunc 将某个模块中的全部函数导入 from somemodule import * 一般而言，除了实验、排查，不推荐导入模块内的所有公开符号（没有前缀 _ 的那些）。因为导入模块会修改namespace，而通常你不知道模块定义了哪些符号、是否与当前的namespace有重名的符号。一旦有重名，那么，就会覆盖掉当前namespace的值。从而造成难以排查的错误 模块重载 出于性能考虑， 每个模块在每个解释器会话中只导入一遍。 因此，如果修改了的模块，需要重启解释器；如果想交互式地测试一个模块，则需要使用以下方法重新导入模块： 注意 只能重载模块，不能单独重载模块中的某个函数、类、变量。 Python 2.x： reload ( modulename ) Python 2.x 至 Python3.3： import imp imp . reload ( modulename ) Python3.4+： import importlib importlib . reload ( modulename ) 另外，spyder 的UMR(user module reloader)提供了自动重载模块的功能。 模块的识别 和 Python 中的其它对象一样，Python 也为模块定义了一些形如 __foo__ 的变量。对于模块来说，最重要的就是它的名字 __name__ 了。每当 Python 执行脚本，它就会为该脚本赋予一个名字： 对于「主程序」来说，这一脚本的 __name__ 被定义为 \"__main__\" 对于被 import 进主程序的模块来说，这一脚本的 __name__ 被定义为脚本的文件名（base filename） 因此，我们可以用如下的形式，在模块代码中定义一些测试代码： if __name__ == \"__main__\" : ··· 当脚本被直接运行时，测试代码就会被运行；当脚本作为模块被导入，测试代码不会被运行。 以下是一个完整的代码示例： 参考：(Python 中的黑暗角落（三）：模块与包)[https://liam0205.me/2017/07/23/modules-and-packages-of-python/] #!/usr/bin/env python3 # -*- coding: utf-8 -*- ' a test module ' __author__ = 'Michael Liao' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () Hello, world! 作用域 在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用，在Python中，是通过 _ 前缀来实现的。 正常的函数和变量名是公开的（public），可以被直接引用，比如： abc ， x123 ， PI 等； 类似 __xxx__ 这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 __author__ ， __name__ 就是特殊变量， hello 模块定义的文档注释也可以用特殊变量 __doc__ 访问，我们自己的变量一般不要用这种变量名； 类似 _xxx 和 __xxx 这样的函数或变量就是非公开的（private），不应该被直接引用，比如 _abc ， __abc 等； 之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。 private函数或变量不应该被别人引用，那它们有什么用呢？请看例子 def _private_1 ( name ): return 'Hello, %s ' % name def _private_2 ( name ): return 'Hi, %s ' % name def greeting ( name ): if len ( name ) > 3 : return _private_1 ( name ) else : return _private_2 ( name ) 我们在模块里公开 greeting() 函数，而把内部逻辑用private函数隐藏起来了，这样，调用 greeting() 函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即： 外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。 作为脚本来执行模块 当你使用以下方式运行 Python 模块时，模块中的代码便会被执行: python fibo.py <arguments> 模块中的代码会被执行，就像导入它一样，不过 此时 __name__ 被设置为 \"__main__\" 。 这相当于，如果你在模块后加入如下代码: if __name__ == \"__main__\" : import sys fib ( int ( sys . argv [ 1 ])) 就可以让此文件像作为模块导入时一样作为脚本执行。此代码只有在模块作为 “main” 文件执行时才被调用: $ python fibo . py 50 1 1 2 3 5 8 13 21 34 如果模块被导入，不会执行这段代码: >>> import fibo >>> 这通常用来为模块提供一个便于测试的用户接口（将模块作为脚本执行测试需求）。 “编译的” Python 文件—— pyc 文件 和 LaTeX 中遇到的问题一样：装载大量文本文件（ .py 文件）是很慢的。因此 Python 也采用了类似 LaTeX 的解决方案：将模块编译成容易装载的文件，并在 __pycache__ 目录下以 module.*version*.pyc 名字缓存这些文件。（相当于 LaTeX 中的 dump 格式文件 .fmt ）。 这里的版本编制了编译后文件的格式。它通常会包含 Python 的版本号。例如，在 CPython 3.3 版中，spam.py 编译后的版本将缓存为 __pycache__/spam.cpython-33.pyc 。这种命名约定允许由不同发布和不同版本的 Python 编译的模块同时存在。 当 Python 编译好模块之后，下次载入时，Python 就会读取相应的 .pyc 文件，而不是 .py 文件。而装载 .pyc 文件会比装载 .py 文件更快。 Python 会检查源文件与编译版的修改日期以确定它是否过期并需要重新编译。 这是完全自动化的过程。同时，编译后的模块是跨平台的，所以同一个库可以在不同架构的系统之间共享。 Python 不检查在两个不同环境中的缓存。首先，它会永远重新编译而且不会存储直接从命令行加载的模块。其次，如果没有源模块它不会检查缓存。若要支持没有源文件（只有编译版）的发布，编译后的模块必须在源目录下，并且必须没有源文件的模块。 部分高级技巧: 为了减少一个编译模块的大小，你可以在 Python 命令行中使用 -O 或者 -OO 。 -O 参数删除了断言语句， -OO 参数删除了断言语句和 doc 字符串。 因为某些程序依赖于这些变量的可用性，你应该只在确定无误的场合使用这一选项。“优化的” 模块有一个 .pyo 后缀而不是 .pyc 后缀。未来的版本可能会改变优化的效果。 来自 .pyc 文件或 .pyo 文件中的程序不会比来自 .py 文件的运行更快； .pyc 或 .pyo 文件只是在它们加载的时候更快一些。 compileall 模块可以为指定目录中的所有模块创建 .pyc 文件（或者使用 -O 参数创建 .pyo 文件）。 在 PEP 3147 中有很多关这一部分内容的细节，并且包含了一个决策流程。","text_tokens":["共享","类","全部","doc","黑暗","遵循","\\","不会","更大","代码","尝试","被","int","导致","即","关心","r","实现","它们","很多","cmd","三","reloader","一般而言","而","也就是说","相当","扩展","0","$","21","大量","对于","from","8","语句","python37","pythonwin","变量","50","public","以","：","中","编译","将要","下以","关键字","过期","many","平台","系统","单独","并未","决策","wiki","一旦","该","符号","5","访问","架构","这是","作用","库","依赖","[","len","两个","很","载入","搜寻","too","site","当前工作","存储","somefunction","行文","来自","如果","所在","for","任何","调用","运行","定义","包","3","假设","通过","namespace","33","难以","解决方案","对应","失败","便会","下次","那么","和","3147","值","提供","每当","需求","方案","spam","程序","存在","fmt","正常","效果","自动化","import","测试","首先","部分","list","greeting","缓存","查找","临时","extensions","test","角落","做","cpython","编写","可用性","中有","看","实验","·","变量名","world","abc","新","实际上","面板","那些","实例","文件名","找到","希望","就是","作为","技巧","件夹","not","未找到","module","错误",".","modules","else","格式文件","pi","来说","*","这些","时","时候","便于","赖于","优化","me","未来","更","它会","仍旧","排查","13","foobar","重名","2017","不想","默认","修改","可执行文件","3.3","用户","别人","搜索","只","别名","此","增加","filename","仅仅","易于","需要","我们","用","secondfunc","，","交互","然后","为","执行","一般","重载","会话","推荐","as","实际","引用","\"","arguments","print","snapshot","-","之后","逻辑","pep","等","控制面板","比","当于","appdata","所有","指示","说","packages","空间","+","细节","关键","上面","本文","用途","维护","」","一样","后","如","想","有","写","检查","依旧","赋予","才","做法","获取","...","进","版本","字符","在内","path","路径","上","命令","相当于","永远","但是","编辑","跨平台","compileall","参数","内容","argv","函数","分割","未能","main","python3.3","hi","编译成","自己","注释","a","让","约定","ipython","并","zip","elif","thirdfunc","找","有序","遇到","名为","但","version","x","某些","元素","在","os","地","def","args","何处","相应","起来","利用","windows10","高级","过程","umr","应该","容易","这样","、","解释器","里","日期","适用","封装","不同","哪些","latex","time"," ","仍","重要","参考","fibo","提示","一个","34","x123","你","安装","关","加载","至","限制","%","类型","的","用来","模块","每个","方式","隐藏","前缀","为了","报错","译成","随着","system","为什么","大","只能","会","win32","由","采用","_","当","if","pyc","其它","一次性","称为","了","2","覆盖","例如","装载","永久","没有","somemodule","满足","几个","思路","引入","不到","到","https","'","文本文件","__","是",")","使用","命令行","解决","形","接口","建","来","放进","coding","场合","firstfunc","最","字符串","roaming",":","目录","python3","外部","比如","一部","指定","当前","一些","也","因为","一种","请","重复","从","呢","加入","什么","那","好","可以","越来","命名",",","author","pycache","导入","不是","type","其次","重新","格式","(","读取","而言","里面","anaconda3","功能","之所以","usr","将","dump","如下","流程","即可","同一","编制",">","并且","这里","性能","或","类似","支持","指向","考虑","and","编译器","像","既然","则","xgboost","这种","名字","（","直接","而且","脚本","1.0","怎样","确定","下","fib","多个","getsitepackages","python","环境变量","env","这","c","选择","想要","name","版本号","就是说","utf","方法","只是","向","desktop","不过","环境变","系列","断言","例子","整个","oo","liao","知道","与","所以","重启","特殊","都","全局","要","同时","理解","测试代码","in","lib","无误","越来越","reload","文件","出于","imp","”","pth","控制","文本","源","编程","重复使用","py3.7","之间","base","抽象","对象","py","查看","工作","作用域","列表","快","慢","不难理解","users","问题","相关","掉","添加","private","背后","熟悉","某个","环境","除了","减少","—","给","foo","“","形式","完全","android","同一个","xxx","肯定","是因为","不难","/","user","importlib","一遍","另外","后缀","michael","可能","是否","）","时才","；","一次","源目录","这一","从文件","解释","版","接着","class","dlls","此时","？","消失","完整","源文件","python3.4","制面","删除","识别","文档","installed","创建","文件夹","spyder","egg","一部分","o","不能","变得","习惯","依赖于","放在","不","07","]","是非","pyo","<","公开","先","bin","释器","它","pythonpath","内部","「","通常","安全","s","把","发布","=","必须","版中","因此","选项","包含","liam0205","下才","就","对","清楚","或者","内","大小","可用","。","一系","append","设置","自动","依次","23","允许","modulename","段","改变","非常","bash","注意","1","这个","主程序","只有","不要","不用","g","#","of","造成","成","交互式","示例","一系列","以下","hello","sys","从而","若","return","!","有用"],"title":"4.2.模块","title_tokens":["4.2",".","模块"]},{"location":"Python基础/4.2.模块.html#_1","text":"如果你想要编写一些更大的程序，肯定不想定义重复的函数、类，想让代码可以重复使用。随着程序变得越来越大，你可能想要将它分割成几个更易于维护的文件。为了满足这些需要，Python 提供了一个方法可以从文件中获取定义，在脚本或者解释器的一个交互式实例中使用。这样的文件被称为模块。","text_tokens":["在","一个","满足","如果","你","几个","编写","可以","类","越来","的","或者","定义","模块","更","。","使用","为了","中","随着","更大","肯定","不想","代码","越来越","大","文件","变得","被","函数","分割","可能","脚本","、","解释器","这样","重复使用","提供","将","释器","它","实例","易于","维护","需要","程序","python","让","，","想要","交互","称为","想","了","一些","成","从文件","交互式","方法"," ","解释","这些","重复","获取"],"title":"为什么需要模块","title_tokens":["需要","为什么","什么","模块"]},{"location":"Python基础/4.2.模块.html#_2","text":"Python 怎样知道从何处找到模块文件？ 如果你熟悉命令行，那么这个问题对你来说就不难理解。在命令行中执行的任何命令，实际上背后都对应了一个可执行文件。命令行解释器（比如 cmd, bash）会从一个全局的环境变量 PATH 中读取一个有序的列表。这个列表包含了一系列的路径，而命令行解释器，会依次在这些路径里，搜索需要的可执行文件。 Python 搜寻模块文件，也遵循了类似的思路。比如，用户在 Python 中尝试导入 import foobar，那么 首先，Python 会在内建模块中搜寻 foobar； 若未找到，则 Python 会在当前工作路径（当前脚本所在路径，或者执行 Python 解释器的路径）中搜寻 foobar； 若仍未找到，则 Python 会在环境变量 PYTHONPATH 中指示的路径中搜寻 foobar； 若依旧未能找到，则 Python 会在安装时指定的路径中搜寻 foobar； 若仍旧失败，则 Python 会报错，提示找不到 foobar 这个模块。","text_tokens":["一个","时","你","安装","知道","的","模块","都","全局","报错","仍旧","理解","遵循","foobar","尝试","文件","可执行文件","用户","会","搜索","需要","工作","，","列表","cmd","不难理解","了","问题","执行","而","背后","熟悉","实际","环境","思路","不到","变量","命令行","中","建","不难","指示","）","；","比如","若","指定","当前","也","搜寻","解释","当前工作","依旧","？","行文","从","如果","所在","在内","任何","path","路径","命令",",","导入","对应","失败","那么","读取","释器","未能","pythonpath","找","有序","import","首先","在","类似","包含","就","对","或者","则","何处","。","一系","（","依次","脚本","解释器","里","实际上","bash","怎样","这个","找到","python","环境变量","未找到"," ","一系列","仍","来说","提示","环境变","系列","这些"],"title":"模块搜索路径","title_tokens":["搜索","路径","模块"]},{"location":"Python基础/4.2.模块.html#_3","text":"当我们使用import加载自己编写的py代码时，必须放在python的默认路径下才可以import。","text_tokens":["时","下才","加载","编写","可以","的","路径","。","使用","代码","默认","放在","当","我们","自己","py","python","，","import","必须"],"title":"添加搜索路径","title_tokens":["添加","搜索","路径"]},{"location":"Python基础/4.2.模块.html#syspathappend","text":"在python中引入 sys ， sys 中的 path 是一个列表类型的对象，内容就是路径的列表，我们将sys引入后查看就可以清楚的知道了： import sys print ( type ( sys . path )) [ path for path in sys . path if \"Wiki\" not in path ] <class 'list'> ['C:\\\\Users\\\\Android\\\\Desktop', 'G:\\\\Installed\\\\Anaconda3\\\\python37.zip', 'G:\\\\Installed\\\\Anaconda3\\\\DLLs', 'G:\\\\Installed\\\\Anaconda3\\\\lib', 'G:\\\\Installed\\\\Anaconda3', 'C:\\\\Users\\\\Android\\\\AppData\\\\Roaming\\\\Python\\\\Python37\\\\site- packages', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\xgboost-1.0.0_snapshot-py3.7.egg', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop', 'C:\\\\Users\\\\Android\\\\Desktop'] 既然是list对象，那么使用append可以向列表添加新的元素，假设我们要添加的路径是 \"C:\\Users\\Android\\Desktop\" ： import sys sys . path . append ( r \"C:\\Users\\Android\\Desktop\" ) 但这只是临时添加路径，如果重启编译器，添加的路径就会消失。","text_tokens":["一个","知道","类型","的","重启","要","in","lib","\\","r","会","win32","py3.7","_","if","我们","对象","查看","，","列表","了","users","0","添加","\"","引入","print","python37","snapshot","pythonwin","'","-","是",")","使用","：","中","android","编译","appdata","packages","wiki","roaming",":","[","后","site","class","dlls","消失","如果","可以","for","installed","path","路径",",","egg","假设","type","内容","(","那么","]","<","anaconda3","将","ipython","zip",">","import","list","但","元素","在","extensions","临时","就","清楚","编译器","既然","。","xgboost","append","新","1.0","就是","python","g","这","c","not",".","只是"," ","向","desktop","sys"],"title":"添加临时路径——sys.path.append","title_tokens":["append",".","临时","—","添加","path","sys","路径"]},{"location":"Python基础/4.2.模块.html#_4","text":"在Windows10中，选择 ->控制面板\\系统和安全\\系统->高级系统设置->环境变量 ， # 找到path后选择编辑，添加新的路径。 但这种方法不能适用所有python的功能，因为这种方法并未将要查找的路径添加到python的Path系统环境中，在sys.path的列表中找不到相关路径的元素。也就是说这样做并没有将路径添加到python的搜索路径中。","text_tokens":["元素","在","查找","环境","到","不到","做","制面","变量","的","path","-","路径","。","编辑","设置","中","这种","\\","windows10","控制面板","高级","将要","不能","所有","系统","和","控制","新","并未","这样","搜索","功能","适用","面板","将","找到","就是","python","环境变量","#","，","选择","列表","后","安全","就是说","并",">",".","相关","方法","因为"," ","找","也就是说","添加","sys","没有","环境变","但"],"title":"修改环境变量","title_tokens":["环境变","环境","修改","变量","环境变量"]},{"location":"Python基础/4.2.模块.html#pth","text":"在site-packages文件夹添加path文件，可以实现搜索路径的永久添加。方法如下： 先编辑一个扩展名为 .pth 的文本文件，在这个文本文件里面写上要添加的path就可以了，例如： 文本文件的文件名是：test.pth test.pth 文件的内容是： C:\\Users\\Android\\Desktop 接着获取python的site-packages文件夹的路径： import site site . getsitepackages () ['G:\\\\Installed\\\\Anaconda3', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages'] 然后将 test.pth 文件放进 G:\\Installed\\Anaconda3\\lib\\site-packages 里面即可。","text_tokens":["在","一个","'","就","test","可以","的","path","-","路径","文件夹","文本文件","上","。","是",")","installed","编辑",",","要","：","lib","\\","android","文件","内容","放进","(","pth","文本","]","里面","实现","packages","anaconda3","搜索","先","本文","这个","文件名",":","将","如下","[","即可","getsitepackages","python","g","，","c","件夹","了","users","然后",".","方法","写","site"," ","扩展","例如","添加","desktop","import","永久","接着","名为","获取"],"title":"添加永久搜索路径——增加.pth文件","title_tokens":["搜索",".","增加","—","文件","添加","永久","路径","pth"]},{"location":"Python基础/4.2.模块.html#_5","text":"在 python 用 import 或者 from...import 来导入相应的模块。 将整个模块(module)导入: 例如，我们要使用使用 sys 模块，那么首先要导入该模块： import sys 导入 sys 模块后，我们就有了 变量 sys 指向该模块，利用 sys 这个变量，就可以访问 sys 模块的所有功能。 也就是说导入整个模块的做法会导致命名空间的修改。 也可以一次性导入多个module： import os , sys , time 通过 as 关键字，可以在导入module的时候，给module定义别名： import sys as system 从某个模块中导入函数： 从某个模块中导入某个函数 from somemodule import somefunction 从某个模块中导入多个函数 from somemodule import firstfunc , secondfunc , thirdfunc 将某个模块中的全部函数导入 from somemodule import * 一般而言，除了实验、排查，不推荐导入模块内的所有公开符号（没有前缀 _ 的那些）。因为导入模块会修改namespace，而通常你不知道模块定义了哪些符号、是否与当前的namespace有重名的符号。一旦有重名，那么，就会覆盖掉当前namespace的值。从而造成难以排查的错误","text_tokens":["整个","时候","你","知道","的","与","模块","全部","前缀","要","排查","重名","system","修改","导致","会","别名","_","用","我们","secondfunc","，","一次性","了","一般而言","而","覆盖","也就是说","例如","一般","掉","没有","推荐","as","某个","somemodule","from","除了","给","变量",")","从而","使用","：","中","来","关键字","所有","空间","是否","firstfunc","）","一旦","该","关键","符号","访问",":","一次","后","当前","也","有","因为","somefunction","从","做法","...","可以","命名","定义",",","导入","通过","namespace","难以","(","那么","函数","而言","不","公开","功能","值","将","通常","thirdfunc","import","首先","在","os","就","指向","或者","内","。","相应","实验","利用","（","、","那些","这个","就是","哪些","多个","python","time","module","就是说","造成","错误"," ","sys","*"],"title":"模块的导入","title_tokens":["的","导入","模块"]},{"location":"Python基础/4.2.模块.html#_6","text":"出于性能考虑， 每个模块在每个解释器会话中只导入一遍。 因此，如果修改了的模块，需要重启解释器；如果想交互式地测试一个模块，则需要使用以下方法重新导入模块： 注意 只能重载模块，不能单独重载模块中的某个函数、类、变量。 Python 2.x： reload ( modulename ) Python 2.x 至 Python3.3： import imp imp . reload ( modulename ) Python3.4+： import importlib importlib . reload ( modulename ) 另外，spyder 的UMR(user module reloader)提供了自动重载模块的功能。","text_tokens":["某个","在","一个","python3.4","如果","至","考虑","类","变量","的","地","每个","模块","则","重启","。","使用",")","spyder","：","中","导入","重新","自动","user","reload","出于","不能","修改","imp","一遍","函数","(","单独","importlib","modulename","只能","另外","+","umr","解释器","、","功能","只","注意","释器","；","提供","python3.3","需要","python","，","交互","module","想","了","reloader","2","交互式",".","方法"," ","解释","以下","import","重载","会话","测试","x","性能","因此"],"title":"模块重载","title_tokens":["重载","模块"]},{"location":"Python基础/4.2.模块.html#_7","text":"和 Python 中的其它对象一样，Python 也为模块定义了一些形如 __foo__ 的变量。对于模块来说，最重要的就是它的名字 __name__ 了。每当 Python 执行脚本，它就会为该脚本赋予一个名字： 对于「主程序」来说，这一脚本的 __name__ 被定义为 \"__main__\" 对于被 import 进主程序的模块来说，这一脚本的 __name__ 被定义为脚本的文件名（base filename） 因此，我们可以用如下的形式，在模块代码中定义一些测试代码： if __name__ == \"__main__\" : ··· 当脚本被直接运行时，测试代码就会被运行；当脚本作为模块被导入，测试代码不会被运行。 以下是一个完整的代码示例： 参考：(Python 中的黑暗角落（三）：模块与包)[https://liam0205.me/2017/07/23/modules-and-packages-of-python/] #!/usr/bin/env python3 # -*- coding: utf-8 -*- ' a test module ' __author__ = 'Michael Liao' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () Hello, world!","text_tokens":["一个","时","liao","%","me","的","与","模块","测试代码","黑暗","不会","2017","代码","文件","被","会","当","filename","base","if","我们","用","对象","其它","，","三","了","为","执行","2","对于","\"","arguments","8","https","print","foo","变量","__","'","-","是",")","形式","形","中","：","/","many","coding","michael","packages","）","最","该","；",":","[","python3","」","一样","这一","如","len","一些","也","too","赋予","完整","进","可以","运行","定义","包",",","author","导入","argv","(","和","07","]","usr","每当","bin","main","它","如下","「","程序","a","s","elif","import","测试","=","因此","在","liam0205","就","角落","test","and","args","def","。","·","名字","（","world","23","直接","脚本","1","主程序","文件名","就是","作为","python","#","env","name","of","module",".","modules","示例","utf"," ","else","重要","以下","参考","hello","来说","sys","*","!"],"title":"模块的识别","title_tokens":["识别","的","模块"]},{"location":"Python基础/4.2.模块.html#_8","text":"在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用，在Python中，是通过 _ 前缀来实现的。 正常的函数和变量名是公开的（public），可以被直接引用，比如： abc ， x123 ， PI 等； 类似 __xxx__ 这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 __author__ ， __name__ 就是特殊变量， hello 模块定义的文档注释也可以用特殊变量 __doc__ 访问，我们自己的变量一般不要用这种变量名； 类似 _xxx 和 __xxx 这样的函数或变量就是非公开的（private），不应该被直接引用，比如 _abc ， __abc 等； 之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。 private函数或变量不应该被别人引用，那它们有什么用呢？请看例子 def _private_1 ( name ): return 'Hello, %s ' % name def _private_2 ( name ): return 'Hi, %s ' % name def greeting ( name ): if len ( name ) > 3 : return _private_1 ( name ) else : return _private_2 ( name ) 我们在模块里公开 greeting() 函数，而把内部逻辑用private函数隐藏起来了，这样，调用 greeting() 函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即： 外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。","text_tokens":["例子","一个","x123","限制","%","的","模块","所以","全部","特殊","隐藏","前缀","doc","代码","被","”","即","关心","实现","别人","编程","会","_","它们","仅仅","if","很多","我们","用","抽象","需要","，","了","2","而","为","一般","private","没有","引用","给","变量","__","“","'","是",")","完全","使用","public","：","中","逻辑","等","来","xxx","是因为","说","可能","细节","）","上面","访问","；",":","用途","外部","比如","len","也","有","因为","一种","才","请","？","从","呢","什么","那","可以","文档","调用","定义","上",",","3","但是","author","通过","不是","不能","习惯","函数","(","和","不","是非","公开","之所以","内部","hi","注释","自己","s","并","把",">","正常","但","greeting","或","在","类似","就","看","def","。","起来","这种","变量名","（","应该","abc","直接","这样","里","非常","封装","1","希望","只有","就是","不要","不用","python","这","name","成","方法"," ","else","hello","pi","return","有用"],"title":"作用域","title_tokens":["作用域","作用"]},{"location":"Python基础/4.2.模块.html#_9","text":"当你使用以下方式运行 Python 模块时，模块中的代码便会被执行: python fibo.py <arguments> 模块中的代码会被执行，就像导入它一样，不过 此时 __name__ 被设置为 \"__main__\" 。 这相当于，如果你在模块后加入如下代码: if __name__ == \"__main__\" : import sys fib ( int ( sys . argv [ 1 ])) 就可以让此文件像作为模块导入时一样作为脚本执行。此代码只有在模块作为 “main” 文件执行时才被调用: $ python fibo . py 50 1 1 2 3 5 8 13 21 34 如果模块被导入，不会执行这段代码: >>> import fibo >>> 这通常用来为模块提供一个便于测试的用户接口（将模块作为脚本执行测试需求）。","text_tokens":["34","时","一个","你","便于","的","用来","模块","方式","13","不会","代码","文件","被","int","”","用户","会","此","当","if","py","，","为","执行","2","相当","$","21","\"","arguments","8","50","__","“",")","使用","中","接口","当于","时才","）","5",":","[","一样","后","此时","加入","如果","可以","调用","运行","相当于","3","导入","便会","argv","(","]","<","提供","将","main","它","需求","如下","通常","让",">","import","测试","=","在","就","像","。","设置","（","脚本","段","1","fib","只有","作为","python","这","name","."," ","以下","fibo","不过","sys"],"title":"作为脚本来执行模块","title_tokens":["执行","来","作为","模块","脚本"]},{"location":"Python基础/4.2.模块.html#python-pyc","text":"和 LaTeX 中遇到的问题一样：装载大量文本文件（ .py 文件）是很慢的。因此 Python 也采用了类似 LaTeX 的解决方案：将模块编译成容易装载的文件，并在 __pycache__ 目录下以 module.*version*.pyc 名字缓存这些文件。（相当于 LaTeX 中的 dump 格式文件 .fmt ）。 这里的版本编制了编译后文件的格式。它通常会包含 Python 的版本号。例如，在 CPython 3.3 版中，spam.py 编译后的版本将缓存为 __pycache__/spam.cpython-33.pyc 。这种命名约定允许由不同发布和不同版本的 Python 编译的模块同时存在。 当 Python 编译好模块之后，下次载入时，Python 就会读取相应的 .pyc 文件，而不是 .py 文件。而装载 .pyc 文件会比装载 .py 文件更快。 Python 会检查源文件与编译版的修改日期以确定它是否过期并需要重新编译。 这是完全自动化的过程。同时，编译后的模块是跨平台的，所以同一个库可以在不同架构的系统之间共享。 Python 不检查在两个不同环境中的缓存。首先，它会永远重新编译而且不会存储直接从命令行加载的模块。其次，如果没有源模块它不会检查缓存。若要支持没有源文件（只有编译版）的发布，编译后的模块必须在源目录下，并且必须没有源文件的模块。 部分高级技巧: 为了减少一个编译模块的大小，你可以在 Python 命令行中使用 -O 或者 -OO 。 -O 参数删除了断言语句， -OO 参数删除了断言语句和 doc 字符串。 因为某些程序依赖于这些变量的可用性，你应该只在确定无误的场合使用这一选项。“优化的” 模块有一个 .pyo 后缀而不是 .pyc 后缀。未来的版本可能会改变优化的效果。 来自 .pyc 文件或 .pyo 文件中的程序不会比来自 .py 文件的运行更快； .pyc 或 .pyo 文件只是在它们加载的时候更快一些。 compileall 模块可以为指定目录中的所有模块创建 .pyc 文件（或者使用 -O 参数创建 .pyo 文件）。 在 PEP 3147 中有很多关这一部分内容的细节，并且包含了一个决策流程。","text_tokens":["一个","时","时候","你","oo","赖于","关","加载","优化","共享","的","与","模块","所以","更","未来","它会","同时","要","为了","doc","无误","译成","不会","文件","修改","”","文本","3.3","源","会","由","只","采用","之间","当","它们","pyc","很多","需要","py","，","快","慢","了","问题","为","而","相当","装载","例如","没有","大量","环境","减少","语句","变量","文本文件","__","-","“","是","完全","命令行","使用","以","解决","之后","：","中","pep","编译","比","同一个","下以","当于","过期","/","平台","后缀","所有","系统","场合","可能","细节","是否","决策","）","字符串","架构","；","本文","这是",":","库","目录","依赖","源目录","一样","这一","后","若","两个","指定","一部","很","载入","也","一些","有","因为","检查","版","存储","从","来自","源文件","如果","版本","好","字符","删除","可以","命名","相当于","运行","永远","命令","创建","跨平台","一部分","pycache","o","不是","其次","33","解决方案","格式","重新","compileall","参数","内容","依赖于","下次","和","读取","不","pyo","3147","将","dump","它","方案","spam","流程","编译成","存在","程序","通常","同一","编制","fmt","约定","并","效果","自动化","遇到","并且","发布","首先","版中","这里","version","缓存","必须","因此","部分","某些","在","类似","支持","包含","选项","或","就","cpython","可用性","中有","或者","大小","可用","。","相应","这种","自动","高级","名字","过程","（","应该","容易","允许","而且","直接","日期","改变","确定","下","只有","不同","latex","python","这","技巧","module","版本号",".","只是"," ","格式文件","*","这些","断言"],"title":"“编译的” Python 文件——pyc 文件","title_tokens":["编译","—"," ","文件","pyc","的","“","”","python"]},{"location":"Python基础/4.3.魔术方法.html","text":"构造和初始化 每个人都知道一个最基本的魔术方法， __init__ 。通过此方法我们可以定义一个对象的初始操作。但很多博客和个别书籍中都把 __init__ 当作类似于C++的构造方法，其实是错误的。 __init__ 并不是第一个被调用的方法。实际上，还有一个叫做 __new__ 的方法，来构造这个实例。然后给在开始创建时候的初始化函数来传递参数。在对象生命周期的另一端，也有一个 __del__ 方法。 __new__(cls, [...) __new__ 是在一个对象实例化的时候所调用的第一个方法。它的第一个参数是这个类，其他的参数是用来直接传递给 __init__ 方法。 __new__ 方法相当不常用，也不是很有用处，但是它有自己的特性，特别是当继承一个不可变的类型（比如一个tuple或者string）： class inch ( float ): \"Convert from inch to meter\" def __new__ ( cls , arg = 0.0 ): return float . __new__ ( cls , arg * 0.0254 ) print ( inch ( 12 )) 0.30479999999999996 这个类可能不是很有用，但是它显示了如何扩展不可变类型的构造函数。如果我们尝试替代 __init__ 而不是 __new__ ，那么它将不起作用： class inch ( float ): \"THIS DOESN'T WORK!!!\" def __init__ ( self , arg = 0.0 ): float . __init__ ( self , arg * 0.0254 ) try : print ( inch ( 12 )) except TypeError as e : print ( e ) object.__init__() takes exactly one argument (the instance to initialize) 重写初始值的版本不起作用，因为浮点类型的初始值是一个不可变对象。另一个 __new__ 的例子是单例模式。 class A : pass new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA9651AC8> <__main__.A object at 0x0000021AA9651B00> class A ( object ): _singleton = None def __new__ ( cls , * args , ** kwargs ): if not cls . _singleton : cls . _singleton = object . __new__ ( cls , * args , ** kwargs ) return cls . _singleton new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA86752E8> <__main__.A object at 0x0000021AA86752E8> 关于 __new__ 的一些规则： __new__ 是一个静态方法，但在重定义 __new__ 时，不需要加上 @staticmethod ，因为它的名字已经暗示了这一点。 __new__ 的第一个参数必须是一个类；其余参数是构造函数调用所看到的参数。 __new__ 方法必须返回一个实例，如果返回None，则不会调用 __init__ 方法。 __init__(self, […) 此方法为类的初始化方法。当构造函数被调用的时候的任何参数都将会传给它。(比如如果我们调用 x = SomeClass(10, 'foo') )，那么 __init__ 将会得到两个参数10和foo。 __init__ 在Python的类定义中被广泛用到。 __del__(self) 如果 __new__ 和 __init__ 是对象的构造器的话，那么 __del__ 就是析构器。它不实现语句 del x (以上代码将不会翻译为 x.__del__() )。它定义的是当一个对象进行垃圾回收时候的行为。当一个对象在删除的时需要更多的清洁工作的时候此方法会很有用，比如套接字对象或者是文件对象。注意，如果解释器退出的时候对象还存存在，就不能保证 __del__ 能够被执行。 class A : def __del__ ( self ): print ( \"我被删除了\" ) a = A () del a 我被删除了 用于比较的魔术方法 魔术方法 调用方式 描述 __eq__(self, other) self == other __nq__(self, other) self != other __le__(self, other) self <= other __ge__(self, other) self >= other __lt__(self, other) self < other __gt__(self, other) self > other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __eq__ ( self , other ): return self . num == other def __ne__ ( self , other ): return self . num != other def __le__ ( self , other ): return self . num <= other def __ge__ ( self , other ): return self . num >= other def __lt__ ( self , other ): return self . num < other def __gt__ ( self , other ): return self . num > other a = A ( 5 ) print ( a == 5 ) print ( a != 5 ) print ( a > 4 ) print ( a < 6 ) print ( a >= 5 ) print ( a <= 6 ) True False True True True True 数值处理的魔术方法 一元运算符和内置函数 魔术方法 调用方式 描述 __pos__(self) +self __neg__(self) -self __abs__(self) abs(self) __invert__(self) ~self class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __pos__ ( self ): new_num = 0 + self . num return A ( new_num ) def __neg__ ( self ): new_num = 0 - self . num return A ( new_num ) def __abs__ ( self ): new_num = abs ( self . num ) return A ( new_num ) a = A ( - 5 ) print ( + a ) print ( - a ) print ( abs ( a )) -5 5 5 算术运算符 魔术方法 调用方式 描述 __add__(self, other) self + other __sub_(self, other) self - other __mul__(self, other) self * other __truediv__(self, other) self / other __pow__(self, other) self ** other __floordiv__(self, other) self // other __mod__(self, other) self % other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __add__ ( self , other ): new_num = self . num + other return A ( new_num ) def __sub__ ( self , other ): new_num = self . num - other return A ( new_num ) def __mul__ ( self , other ): new_num = self . num * other return A ( new_num ) def __truediv__ ( self , other ): new_num = self . num / other return A ( new_num ) def __pow__ ( self , other ): new_num = self . num ** other return A ( new_num ) def __floordiv__ ( self , other ): new_num = self . num // other return A ( new_num ) def __mod__ ( self , other ): new_num = self . num % other return A ( new_num ) a = A ( 5 ) print ( \"a + 2 =\" , a + 2 ) print ( \"a - 2 =\" , a - 2 ) print ( \"a * 2 =\" , a * 2 ) print ( \"a / 2 =\" , a / 2 ) print ( \"a ** 2 =\" , a ** 2 ) print ( \"a // 2 =\" , a // 2 ) print ( \"a % 2 =\" , a % 2 ) a + 2 = 7 a - 2 = 3 a * 2 = 10 a / 2 = 2.5 a ** 2 = 25 a // 2 = 2 a % 2 = 1 反运算 以下是一个普通的加法运算的例子: # __add__ some_object + other 反运算是相同的，只是把操作数调换了位置: # __radd__ other + some_object 所以，除了当与其他对象操作的时候自己会成为第二个操作数之外，所有的这些魔术方法都与普通的操作是相同的。大多数情况下，反运算的结果是与普通运算相同的。所以你可以你可以将 __radd__ 与 __add__ 等价。 魔术方法 调用方式 描述 __radd__(self, other) other + self __rsub_(self, other) other - self __rmul__(self, other) other * self __rtruediv__(self, other) other / self __rpow__(self, other) other ** self __rfloordiv__(self, other) other // self __rmod__(self, other) other % self 增强赋值 魔术方法 调用方式 描述 __iadd__(self, other) self += other __isub_(self, other) self -= other __imul__(self, other) self *= other __itruediv__(self, other) self /= other __ipow__(self, other) self **= other __ifloordiv__(self, other) self //= other __imod__(self, other) self %= other 表现你的类 如果有一个字符串来表示一个类将会非常有用，例如： a = [ 1 , 2 , 3 ] a [1, 2, 3] 在Python中，有很多方法可以实现类定义内置的一些函数的返回值。 __str__(self) 定义当 str() 调用的时候的返回值。 __repr__(self) 定义 repr() 被调用的时候的返回值。 str() 和 repr() 的主要区别在于 repr() 返回的是机器可读的输出，而 str() 返回的是人类可读的。 __unicode__(self) 定义当 unicode() 调用的时候的返回值。 unicode() 和 str() 很相似，但是返回的是unicode字符串。注意，如果对你的类调用 str() 然而你只定义了 __unicode__() ，那么将不会工作。你应该定义 __str__() 来确保调用时能返回正确的值。 __hash__(self) 定义当 hash() 调用的时候的返回值，它返回一个整数值，用来在字典中进行快速比较 __nonzero__(self) 定义当 bool() 调用的时候的返回值。本方法应该返回True或者False，取决于你想让它返回的值。 创建定制的序列 有很多方法让你的Python类行为可以像内置的序列(dict, tuple,list, string等等)。 现在我们开始讲如何在Python中创建定制的序列，这个时候该讲一讲协议。协议(Protocols)与其他语言中的接口很相似。它给你很多你必须定义的方法。然而在Python中的协议是很不正式的，不需要明确声明实现。事实上，他们更像一种指南。 我们为什么现在讨论协议？因为如果要定制容器类型的话需要用到这些协议： 实现不变容器的话有一个协议：实现不可变容器，你只能定义 __len__ 和 __getitem__ (一会会讲更多)。 可变容器协议则需要所有不可变容器的所有另外还需要 __setitem__ 和 __delitem__ 。 最终，如果你希望你的对象是可迭代的话，你需要定义 __iter__ 会返回一个迭代器。迭代器必须遵循迭代器协议，需要有 __iter__ (返回它本身) 和 next 。 容器的魔法 魔法方法 调用方法 描述 __len__(self) len(self) __index__(self) x[self] 对象被作为索引使用的时候 __getitem__(self, key) self[key] 使用索引访问元素时 __setitem__(self, key, val) self[key] = val 对某个索引值赋值时 __delitem__(self, key) del self[key] 删除某个索引值时 __iter__(self) for x in self 迭代时 __contains__(self, value) value in self, value not in self 使用 in 操作测试关系时 __concat__(self, value) self + other 连接两个对象时 __reversed__(self) reversed(self) 实现当 reversed() 被调用时的行为 可以调用的对象 在Python中，方法也是一种高等的对象。这意味着他们也可以被传递到方法中就像其他对象一样。这是一个非常惊人的特性。 在Python中，一个特殊的魔术方法可以让类的实例的行为表现的像函数一样，你可以调用他们，将一个函数当做一个参数传到另外一个函数中等等。这是一个非常强大的特性让Python编程更加舒适甜美。 __call__(self, [args...]) 允许一个类的实例像函数一样被调用。实质上说，这意味着 x() 与 x.__call__() 是相同的。注意 __call__ 参数可变。这意味着你可以定义 __call__ 为其他你想要的函数，无论有多少个参数。 __call__ 在那些类的实例经常改变状态的时候会非常有效。调用这个实例是一种改变这个对象状态的直接和优雅的做法。用一个实例来表达最好不过了。 会话管理 在Python 2.5中，为了代码利用定义了一个新的关键词 with 语句。会话控制在Python中不罕见(之前是作为库的一部分被实现)，直到 PEP343 被添加后。它被成为一级语言结构。你也许之前看到这样的语句: with open('foo.txt') as bar: # perform some action with bar 回话控制器通过包装一个 with 语句来设置和清理行为。回话控制器的行为通过两个魔术方法来定义: __enter__(self) 定义当使用 with 语句的时候会话管理器应该初始块被创建的时候的行为。注意 __enter__ 的返回值被 with 语句的目标或者 as 后的名字绑定。 __exit__(self, exception_type,exception_value, traceback) 定义当一个代码块被执行或者终止后会话管理器应该做什么。它可以被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作。如果代码块执行成功， exception_type , exception_value , 和 traceback 将会是 None 。否则的话你可以选择处理这个异常或者是直接交给用户处理。如果你想处理这个异常的话，确认 __exit__ 在所有结束之后会返回 True 。如果你想让异常被会话管理器处理的话，那么就这样处理。 __enter 和 __exit__ 对于明确有定义好的和日常行为的设置和清洁工作的类很有帮助。你也可以使用这些方法来创建一般的可以包装其他对象的会话管理器。以下是一个例子： class Closer : '''通过with语句和一个close方法来关闭一个对象的会话管理器''' def __init__ ( self , obj ): self . obj = obj def __enter__ ( self ): return self . obj # bound to target def __exit__ ( self , exception_type , exception_val , trace ): try : self . obj . close () except AttributeError : # obj isn't closable print ( 'Not closable.' ) return True # exception handled successfully with Closer ( int ( 5 )) as i : i += 1 Not closable. 参考 文章","text_tokens":["类","相同","迭代","强大","10","nonzero","遵循","我","不会","尝试","第一个","代码","快速","重","被","清洁","区别","bound","int","实现","open","最终","当作","很多","声明","包装","事实","他们","可读","而","比较","相当","扩展","at","0","处理","call","exit","obj","对于","from","增强","0.30479999999999996","语句","e","self","contains","：","中","meter","更加","txt","第二","nq","加法","next","静态方法","协议","该","5","rtruediv","访问","这是","作用","库","new","[","bool","两个","讲","len","很","完毕","能够","rsub","ipow","等价","一元","takes","如果","__.","for","任何","调用","定义","3","值时","多少","sub","doesn","通过","有效","得到","那么","和","reversed","pass","理器","staticmethod","protocols","值","回话","存在","反","也许","测试","数值","部分","list","一个整","个","imod","正式","实质","0x0000021aa9651ac8","一会","做","广泛","argument","truediv","加上","…","日常","ge","正确","typeerror","将会","终止","主要","新","取决于","直到","表现","实际上","取决","那些","实例","希望","就是","作为","化","not","错误","经常",".","*","这些","暗示","trace","魔法","时候","时","文章","传到","更","bar","算术","pep343","lt","目标","一级","string","机器","用户","在于","只","此","第一","我们","需要","用","，","赋值","this","器","neg","rfloordiv","为类","然后","为","执行","用于","最好","一般","initialize","unicode","会话","内置","魔术","as","等等","现在","action","实际","\"","print","-","可变","已经","浮点","abs","eq","itruediv","之后","所","所有","说","+","清理","操作","关键","closable","结构","显示","静态","一样","后","函数调用","想","指南","高等","有","其余","以上","做法","...","12","版本","字符","运算","大多","上","但是","可","参数","函数","之前","main","多数","话","返回","自己","a","cls","让","delitem","并","perform","人类","控制器","关系","singleton","算符","num","但","x","元素","回收","在","意味","另一端","traceback","初始","args","def","初始值","利用","无论","setitem","new1","new2","进行","应该","不起作用","rpow","这样","解释器","rmul","一点","handled","pos","语言","0x0000021aa86752e8"," ","some","参考","25","位置","except","表示","一个","你","容器","4","mod","不可","%","类型","的","用来","每个","add","方式","多","successfully","为了","closer","为什么","惊人","other","只能","套","叫做","会","帮助","_","当","tuple","if","with","不变","行为","成为","了","enter","2","关于","例如","6","到","用处","work","__","'","确认","定制","是",")","舒适","使用","日常行为","false","基本","接口","来","垃圾","第二个","结束","del","的话","行为表现","最","字符串",":","传递","比如","arg","str","一部","一些","也","普通","因为","生命周期","模式","其他","如何","object","大多数","一种","还","ne","本身","成功","还有","7","什么","mul","好","绑定","可以","调换",",","书籍","exactly","描述","二个","替代","块","不是","一","type","@","管理","(","isub","to","优雅","甜美","关闭","gt","将","the","用到","管理器","close","连接",">",".__","floordiv","~","inch","类似","操作数","明确","继承","另","像","key","则","个别","名字","事实上","（","变","直接","后会","radd","意味着","下","python","这","选择","pow","想要","方法","只是","返回值","异常","不过","true","构造","例子","特性","时能","知道","规则","one","清除","与","2.5","所以","0.0254","try","都","特殊","要","in","还存","讨论","构造方法","文件","关键词","交给","当做","控制","构造函数","编程","invert","于","之外","作数","对象","工作","其实","状态","特别","getitem","添加","iter","某个","iadd","构器","exception","imul","除了","给","isn","foo","float","/","另外","rmod","重写","可能","le","）","；","退出","单例","0.0","value","析","表达","i","然而","结果","解释","c++","接字","class","t","？","ifloordiv","字典","删除","concat","创建","输出","一部分","return","不能","人","否则","相似","不","]","<","attributeerror","释器","它","常用","target","周期","把","初始化","instance","kwargs","index","=","必须","后会话","罕见","hash","情况","dict","索引","就","对","传给","convert","生命","或者","。","序列","翻译","设置","博客","允许","repr","改变","非常","注意","1","这个","保证","运算符","#","本","val","一端","none","看到","确保","init","someclass","以下","开始","0x0000021aa9651b00","!","有用"],"title":"4.3.魔术方法","title_tokens":["4.3","方法","魔术","."]},{"location":"Python基础/4.3.魔术方法.html#_1","text":"每个人都知道一个最基本的魔术方法， __init__ 。通过此方法我们可以定义一个对象的初始操作。但很多博客和个别书籍中都把 __init__ 当作类似于C++的构造方法，其实是错误的。 __init__ 并不是第一个被调用的方法。实际上，还有一个叫做 __new__ 的方法，来构造这个实例。然后给在开始创建时候的初始化函数来传递参数。在对象生命周期的另一端，也有一个 __del__ 方法。 __new__(cls, [...) __new__ 是在一个对象实例化的时候所调用的第一个方法。它的第一个参数是这个类，其他的参数是用来直接传递给 __init__ 方法。 __new__ 方法相当不常用，也不是很有用处，但是它有自己的特性，特别是当继承一个不可变的类型（比如一个tuple或者string）： class inch ( float ): \"Convert from inch to meter\" def __new__ ( cls , arg = 0.0 ): return float . __new__ ( cls , arg * 0.0254 ) print ( inch ( 12 )) 0.30479999999999996 这个类可能不是很有用，但是它显示了如何扩展不可变类型的构造函数。如果我们尝试替代 __init__ 而不是 __new__ ，那么它将不起作用： class inch ( float ): \"THIS DOESN'T WORK!!!\" def __init__ ( self , arg = 0.0 ): float . __init__ ( self , arg * 0.0254 ) try : print ( inch ( 12 )) except TypeError as e : print ( e ) object.__init__() takes exactly one argument (the instance to initialize) 重写初始值的版本不起作用，因为浮点类型的初始值是一个不可变对象。另一个 __new__ 的例子是单例模式。 class A : pass new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA9651AC8> <__main__.A object at 0x0000021AA9651B00> class A ( object ): _singleton = None def __new__ ( cls , * args , ** kwargs ): if not cls . _singleton : cls . _singleton = object . __new__ ( cls , * args , ** kwargs ) return cls . _singleton new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA86752E8> <__main__.A object at 0x0000021AA86752E8> 关于 __new__ 的一些规则： __new__ 是一个静态方法，但在重定义 __new__ 时，不需要加上 @staticmethod ，因为它的名字已经暗示了这一点。 __new__ 的第一个参数必须是一个类；其余参数是构造函数调用所看到的参数。 __new__ 方法必须返回一个实例，如果返回None，则不会调用 __init__ 方法。 __init__(self, […) 此方法为类的初始化方法。当构造函数被调用的时候的任何参数都将会传给它。(比如如果我们调用 x = SomeClass(10, 'foo') )，那么 __init__ 将会得到两个参数10和foo。 __init__ 在Python的类定义中被广泛用到。 __del__(self) 如果 __new__ 和 __init__ 是对象的构造器的话，那么 __del__ 就是析构器。它不实现语句 del x (以上代码将不会翻译为 x.__del__() )。它定义的是当一个对象进行垃圾回收时候的行为。当一个对象在删除的时需要更多的清洁工作的时候此方法会很有用，比如套接字对象或者是文件对象。注意，如果解释器退出的时候对象还存存在，就不能保证 __del__ 能够被执行。 class A : def __del__ ( self ): print ( \"我被删除了\" ) a = A () del a 我被删除了","text_tokens":["构造","例子","一个","时候","特性","时","知道","不可","规则","类","类型","的","one","用来","每个","更","0.0254","try","都","多","10","我","不会","还存","尝试","构造方法","第一个","代码","文件","重","被","暗示","string","清洁","实现","构造函数","叫做","会","套","此","_","于","当","第一","tuple","当作","很多","我们","if","需要","对象","工作","，","其实","行为","this","器","了","为类","然后","为","而","特别","执行","关于","相当","扩展","at","initialize","魔术","as","实际","构器","\"","from","print","给","用处","0.30479999999999996","语句","work","e","__","'","foo","是",")","float","self","已经","浮点","基本","中","：","meter","0x0000021aa9651b00","来","所","垃圾","del","的话","重写","可能","静态方法","）","最","操作","；",":","显示","作用","传递","退出","单例","0.0","new","[","静态","比如","arg","函数调用","两个","很","析","一些","也","有","因为","生命周期","模式","其他","如何","object","解释","c++","其余","接字","class","能够","t","还有","以上","...","12","takes","如果","except","版本","__.","删除","可以","任何","调用","创建","定义",",","书籍","exactly","但是","替代","doesn","通过","不是","@","参数","得到","不能","人","函数","(","和","不","to","那么","pass","<","staticmethod","释器","将","main","它","the","返回","用到","自己","存在","a","常用","cls","周期","把","并",">",".__","初始化","instance","singleton","kwargs","inch","=","但","必须","x","回收","在","类似","0x0000021aa9651ac8","就","另一端","传给","初始","广泛","convert","生命","继承","或者","def","argument","初始值","另","。","args","则","翻译","加上","…","个别","名字","博客","typeerror","new1","（","变","new2","将会","进行","不起作用","直接","解释器","实际上","注意","实例","这个","就是","保证","python","一点","这","化","一端","none","错误","not","看到",".","init","方法","0x0000021aa86752e8"," ","someclass","开始","*","return","!","有用"],"title":"构造和初始化","title_tokens":["构造","初始化","初始","和"]},{"location":"Python基础/4.3.魔术方法.html#_2","text":"魔术方法 调用方式 描述 __eq__(self, other) self == other __nq__(self, other) self != other __le__(self, other) self <= other __ge__(self, other) self >= other __lt__(self, other) self < other __gt__(self, other) self > other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __eq__ ( self , other ): return self . num == other def __ne__ ( self , other ): return self . num != other def __le__ ( self , other ): return self . num <= other def __ge__ ( self , other ): return self . num >= other def __lt__ ( self , other ): return self . num < other def __gt__ ( self , other ): return self . num > other a = A ( 5 ) print ( a == 5 ) print ( a != 5 ) print ( a > 4 ) print ( a < 6 ) print ( a >= 5 ) print ( a <= 6 ) True False True True True True","text_tokens":["6","print","4","调用","__","def",")",",","描述","self","方式","false","eq","return","lt","ge","other","(","nq","le","<","repr","5","gt",":","a","str",">","2",".","init","方法"," ","魔术","class","ne","true","num","=","!"],"title":"用于比较的魔术方法","title_tokens":["用于","比较","方法","的","魔术"]},{"location":"Python基础/4.3.魔术方法.html#_3","text":"","text_tokens":[],"title":"数值处理的魔术方法","title_tokens":["方法","处理","的","数值","魔术"]},{"location":"Python基础/4.3.魔术方法.html#_4","text":"魔术方法 调用方式 描述 __pos__(self) +self __neg__(self) -self __abs__(self) abs(self) __invert__(self) ~self class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __pos__ ( self ): new_num = 0 + self . num return A ( new_num ) def __neg__ ( self ): new_num = 0 - self . num return A ( new_num ) def __abs__ ( self ): new_num = abs ( self . num ) return A ( new_num ) a = A ( - 5 ) print ( + a ) print ( - a ) print ( abs ( a )) -5 5 5","text_tokens":["print","调用","__","-","def",")","描述",",","self","方式","abs","return","(","+","repr","invert","5","_",":","new","a","str","neg","pos","2",".","init","方法"," ","0","~","class","num","=","魔术"],"title":"一元运算符和内置函数","title_tokens":["运算符","函数","运算","和","算符","内置","一元"]},{"location":"Python基础/4.3.魔术方法.html#_5","text":"魔术方法 调用方式 描述 __add__(self, other) self + other __sub_(self, other) self - other __mul__(self, other) self * other __truediv__(self, other) self / other __pow__(self, other) self ** other __floordiv__(self, other) self // other __mod__(self, other) self % other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __add__ ( self , other ): new_num = self . num + other return A ( new_num ) def __sub__ ( self , other ): new_num = self . num - other return A ( new_num ) def __mul__ ( self , other ): new_num = self . num * other return A ( new_num ) def __truediv__ ( self , other ): new_num = self . num / other return A ( new_num ) def __pow__ ( self , other ): new_num = self . num ** other return A ( new_num ) def __floordiv__ ( self , other ): new_num = self . num // other return A ( new_num ) def __mod__ ( self , other ): new_num = self . num % other return A ( new_num ) a = A ( 5 ) print ( \"a + 2 =\" , a + 2 ) print ( \"a - 2 =\" , a - 2 ) print ( \"a * 2 =\" , a * 2 ) print ( \"a / 2 =\" , a / 2 ) print ( \"a ** 2 =\" , a ** 2 ) print ( \"a // 2 =\" , a // 2 ) print ( \"a % 2 =\" , a % 2 ) a + 2 = 7 a - 2 = 3 a * 2 = 10 a / 2 = 2.5 a ** 2 = 25 a // 2 = 2 a % 2 = 1","text_tokens":["\"","mul","print","mod","%","调用","__","-","def",")",",","描述","self","add","方式","truediv","3","sub","10","2.5","return","/","other","(","num","+","repr","5","_",":","7","1","new","a","str","pow","2",".","init","方法","floordiv"," ","25","class","*","=","魔术"],"title":"算术运算符","title_tokens":["算符","运算符","运算","算术"]},{"location":"Python基础/4.3.魔术方法.html#_6","text":"以下是一个普通的加法运算的例子: # __add__ some_object + other 反运算是相同的，只是把操作数调换了位置: # __radd__ other + some_object 所以，除了当与其他对象操作的时候自己会成为第二个操作数之外，所有的这些魔术方法都与普通的操作是相同的。大多数情况下，反运算的结果是与普通运算相同的。所以你可以你可以将 __radd__ 与 __add__ 等价。 魔术方法 调用方式 描述 __radd__(self, other) other + self __rsub_(self, other) other - self __rmul__(self, other) other * self __rtruediv__(self, other) other / self __rpow__(self, other) other ** self __rfloordiv__(self, other) other // self __rmod__(self, other) other % self","text_tokens":["例子","一个","时候","你","%","的","与","相同","所以","add","方式","都","other","会","_","当","之外","作数","对象","，","成为","rfloordiv","了","魔术","除了","__","-","是",")","self","第二","所有","/","第二个","加法","rmod","+","操作","rtruediv",":","普通","结果","大多数","其他","object","rsub","等价","可以","调换","调用","运算","大多","描述",",","二个","(","将","多数","自己","把","反","情况","操作数","。","rpow","radd","下","rmul","#","方法","只是"," ","some","以下","*","这些","位置"],"title":"反运算","title_tokens":["运算","反"]},{"location":"Python基础/4.3.魔术方法.html#_7","text":"魔术方法 调用方式 描述 __iadd__(self, other) self += other __isub_(self, other) self -= other __imul__(self, other) self *= other __itruediv__(self, other) self /= other __ipow__(self, other) self **= other __ifloordiv__(self, other) self //= other __imod__(self, other) self %= other","text_tokens":["iadd","imul","%","调用","__","-",")",",","描述","self","方式","itruediv","/","other","(","isub","+","_","方法"," ","ipow","*","=","魔术","ifloordiv","imod"],"title":"增强赋值","title_tokens":["增强","赋值"]},{"location":"Python基础/4.3.魔术方法.html#_8","text":"如果有一个字符串来表示一个类将会非常有用，例如： a = [ 1 , 2 , 3 ] a [1, 2, 3] 在Python中，有很多方法可以实现类定义内置的一些函数的返回值。 __str__(self) 定义当 str() 调用的时候的返回值。 __repr__(self) 定义 repr() 被调用的时候的返回值。 str() 和 repr() 的主要区别在于 repr() 返回的是机器可读的输出，而 str() 返回的是人类可读的。 __unicode__(self) 定义当 unicode() 调用的时候的返回值。 unicode() 和 str() 很相似，但是返回的是unicode字符串。注意，如果对你的类调用 str() 然而你只定义了 __unicode__() ，那么将不会工作。你应该定义 __str__() 来确保调用时能返回正确的值。 __hash__(self) 定义当 hash() 调用的时候的返回值，它返回一个整数值，用来在字典中进行快速比较 __nonzero__(self) 定义当 bool() 调用的时候的返回值。本方法应该返回True或者False，取决于你想让它返回的值。","text_tokens":["一个","时候","你","时能","类","的","用来","nonzero","不会","快速","区别","被","机器","实现","在于","会","只","当","很多","工作","，","了","可读","2","而","比较","例如","unicode","内置","__",")","是","self","false","：","中","来","字符串","[","str","bool","想","很","一些","然而","有","字典","如果","字符","可以","调用","定义",",","3","输出","但是","函数","(","和","相似","那么","]","值","将","它","返回","a","让","人类","数值","=","一个整","在","hash","对","或者","。","正确","应该","进行","主要","取决于","repr","非常","取决","注意","1","python","本","确保","方法","返回值"," ","true","有用","表示"],"title":"表现你的类","title_tokens":["类","的","你","表现"]},{"location":"Python基础/4.3.魔术方法.html#_9","text":"有很多方法让你的Python类行为可以像内置的序列(dict, tuple,list, string等等)。 现在我们开始讲如何在Python中创建定制的序列，这个时候该讲一讲协议。协议(Protocols)与其他语言中的接口很相似。它给你很多你必须定义的方法。然而在Python中的协议是很不正式的，不需要明确声明实现。事实上，他们更像一种指南。 我们为什么现在讨论协议？因为如果要定制容器类型的话需要用到这些协议： 实现不变容器的话有一个协议：实现不可变容器，你只能定义 __len__ 和 __getitem__ (一会会讲更多)。 可变容器协议则需要所有不可变容器的所有另外还需要 __setitem__ 和 __delitem__ 。 最终，如果你希望你的对象是可迭代的话，你需要定义 __iter__ 会返回一个迭代器。迭代器必须遵循迭代器协议，需要有 __iter__ (返回它本身) 和 next 。","text_tokens":["一个","时候","你","容器","不可","类","类型","的","与","更","迭代","多","要","遵循","为什么","讨论","string","只能","实现","会","tuple","最终","很多","我们","需要","声明","对象","不变","，","事实","行为","他们","器","getitem","iter","内置","等等","现在","给","__","定制",")","是","可变","：","中","接口","所有","另外","的话","next","协议","该","讲","len","很","指南","然而","有","因为","其他","如何","一种","还","本身","？","什么","如果","可以","创建","定义",",","一","可","(","相似","不","和","protocols","它","用到","返回","让","delitem","必须","list","正式","在","一会","dict","明确","像","则","序列","。","setitem","变","这个","希望","python","语言","方法"," ","开始","这些","事实上"],"title":"创建定制的序列","title_tokens":["序列","的","创建","定制"]},{"location":"Python基础/4.3.魔术方法.html#_10","text":"魔法方法 调用方法 描述 __len__(self) len(self) __index__(self) x[self] 对象被作为索引使用的时候 __getitem__(self, key) self[key] 使用索引访问元素时 __setitem__(self, key, val) self[key] = val 对某个索引值赋值时 __delitem__(self, key) del self[key] 删除某个索引值时 __iter__(self) for x in self 迭代时 __contains__(self, value) value in self, value not in self 使用 in 操作测试关系时 __concat__(self, value) self + other 连接两个对象时 __reversed__(self) reversed(self) 实现当 reversed() 被调用时的行为","text_tokens":["元素","某个","时候","时","索引","对","删除","for","调用","__","的","key","concat",")","描述",",","self","使用","值时","迭代","contains","in","setitem","other","被","(","del","]","reversed","+","实现","魔法","操作","访问","值","当","[","对象","作为","赋值","行为","delitem","val","len","value","not","连接","两个","方法"," ","getitem","关系","测试","iter","index","=","x"],"title":"容器的魔法","title_tokens":["的","魔法","容器"]},{"location":"Python基础/4.3.魔术方法.html#_11","text":"在Python中，方法也是一种高等的对象。这意味着他们也可以被传递到方法中就像其他对象一样。这是一个非常惊人的特性。 在Python中，一个特殊的魔术方法可以让类的实例的行为表现的像函数一样，你可以调用他们，将一个函数当做一个参数传到另外一个函数中等等。这是一个非常强大的特性让Python编程更加舒适甜美。 __call__(self, [args...]) 允许一个类的实例像函数一样被调用。实质上说，这意味着 x() 与 x.__call__() 是相同的。注意 __call__ 参数可变。这意味着你可以定义 __call__ 为其他你想要的函数，无论有多少个参数。 __call__ 在那些类的实例经常改变状态的时候会非常有效。调用这个实例是一种改变这个对象状态的直接和优雅的做法。用一个实例来表达最好不过了。","text_tokens":["一个","特性","时候","你","传到","类","的","与","相同","特殊","强大","惊人","被","当做","编程","会","用","对象","，","行为","他们","状态","了","为","最好","call","魔术","等等","到","__","是","舒适",")","self","可变","中","更加","来","另外","说","行为表现","这是","传递","[","一样","高等","表达","也","有","其他","一种","做法","...","可以","调用","定义","上",",","多少","有效","参数","函数","(","和","优雅","]","甜美","将","让",".__","x","个","实质","在","意味","就","像","args","。","无论","允许","直接","表现","改变","非常","意味着","注意","实例","那些","这个","python","这","想要","经常","方法"," ","不过"],"title":"可以调用的对象","title_tokens":["调用","的","对象","可以"]},{"location":"Python基础/4.3.魔术方法.html#_12","text":"在Python 2.5中，为了代码利用定义了一个新的关键词 with 语句。会话控制在Python中不罕见(之前是作为库的一部分被实现)，直到 PEP343 被添加后。它被成为一级语言结构。你也许之前看到这样的语句: with open('foo.txt') as bar: # perform some action with bar 回话控制器通过包装一个 with 语句来设置和清理行为。回话控制器的行为通过两个魔术方法来定义: __enter__(self) 定义当使用 with 语句的时候会话管理器应该初始块被创建的时候的行为。注意 __enter__ 的返回值被 with 语句的目标或者 as 后的名字绑定。 __exit__(self, exception_type,exception_value, traceback) 定义当一个代码块被执行或者终止后会话管理器应该做什么。它可以被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作。如果代码块执行成功， exception_type , exception_value , 和 traceback 将会是 None 。否则的话你可以选择处理这个异常或者是直接交给用户处理。如果你想处理这个异常的话，确认 __exit__ 在所有结束之后会返回 True 。如果你想让异常被会话管理器处理的话，那么就这样处理。 __enter 和 __exit__ 对于明确有定义好的和日常行为的设置和清洁工作的类很有帮助。你也可以使用这些方法来创建一般的可以包装其他对象的会话管理器。以下是一个例子： class Closer : '''通过with语句和一个close方法来关闭一个对象的会话管理器''' def __init__ ( self , obj ): self . obj = obj def __enter__ ( self ): return self . obj # bound to target def __exit__ ( self , exception_type , exception_val , trace ): try : self . obj . close () except AttributeError : # obj isn't closable print ( 'Not closable.' ) return True # exception handled successfully with Closer ( int ( 5 )) as i : i += 1 Not closable.","text_tokens":["例子","一个","时候","你","类","的","清除","用来","2.5","bar","try","successfully","为了","closer","pep343","目标","交给","代码","一级","关键词","被","清洁","int","bound","控制","用户","实现","帮助","会","open","_","当","with","对象","工作","包装","，","成为","行为","了","enter","执行","一般","添加","exit","处理","会话","obj","魔术","as","action","对于","exception","print","语句","isn","foo","'","__","确认","是",")","self","使用","日常行为","之后","：","中","txt","来","所有","结束","的话","+","清理","关键","closable","5","结构",":","库","后","一部","两个","value","想","很","一些","也","i","完毕","有","其他","class","t","成功","什么","如果","好","绑定","可以","创建","定义",",","一部分","通过","块","type","管理","否则","(","那么","和","不","to","理器","关闭","attributeerror","之前","它","话","返回","管理器","回话","close","target","让","perform","控制器","trace","也许","部分","=","后会话","罕见","在","就","明确","做","traceback","初始","或者","def","。","设置","利用","日常","名字","将会","应该","终止","新","后会","这样","直到","直接","注意","1","这个","作为","python","#","选择","val","handled","none","not","看到",".","语言","init","方法","返回值"," ","some","异常","以下","true","这些","return","except"],"title":"会话管理","title_tokens":["管理","会话"]},{"location":"Python基础/4.3.魔术方法.html#_13","text":"文章","text_tokens":["文章"],"title":"参考","title_tokens":["参考"]},{"location":"numpy笔记/6.1.创建数组.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 共同的参数 这里有几个共同的参数： a ：一个 array-like 类型的实例，它不一定是数组，可以为 list 、 tuple 、 list of tuple 、 list of list 、 tuple of list 、 tuple of tuple 等等。 dtype ：数组的值类型，默认为 float 。你可以指定Python的标准数值类型，也可以使用 numpy 的数值类型如： numpy.int32 或者 numpy.float64 等等。 order ：指定存储多维数据的方式。 'C' ，表示按行优先存储（C风格）； - 'F' ，表示按列优先存储（Fortran风格）。 - 对于 **_like() 函数， order 可以为： 'C' ， 'F' ， 'A' （表示结果的order与a相同）， 'K' （表示结果的 order 与 a 尽可能相似） subok ： bool 值。如果为 True 则：如果 a 为 ndarray 的子类（如 matrix 类），则结果类型与 a 类型相同。如果为 False 则：结果类型始终为 ndarray 。默认为True。 从现有的数据创建 1 np.array(object[, dtype, copy, order, subok, ndmin]) :从 object 创建。 - object 可以是一个 ndarray ，也可以是一个 array_like 的对象，也可以是一个含有返回一个序列或者 ndarray 的 __array__ 方法的对象，或者一个序列。 - `copy` ：默认为 `True` ，表示拷贝对象 - `order` 可以为 `'C'、'F'、'A'` 。默认为 `'K'` 。 - `subok` 默认为 `False` - `ndmin` ：指定结果 `ndarray` 最少有多少个维度。 2 np.asarray(a[, dtype, order]) ：将 a 转换成一个 ndarray 。其中 a 是 array_like 的对象， 可以是 list 、 list of tuple 、 tuple 、 tuple of list 、 ndarray 类型。 order 默认为 C 。 3 np.asanyarray(a[, dtype, order]) ：将 a 转换成 ndarray 。 4 np.ascontiguousarray(a[, dtype]) ：返回C风格的连续 ndarray 。 5 np.copy(a[, order]) ：返回 ndarray 的一份深拷贝。 以上5个方法实际上都是调用了 array() 的接口。 np . asarray () # array(a, dtype, copy=False, order=order) np . asanyarray () # array(a, dtype, copy=False, order=order, subok=True) np . ascontiguousarray () # array(a, dtype, copy=False, order='C', ndmin=1) np . copy () # array(a, order=order, copy=True) 6 np.asmatrix(data[, dtype]) ：返回 matrix 。 7 np.frombuffer(buffer[, dtype, count, offset]) ：从输入数据中返回一维 ndarray 。 count 指定读取的数量， -1 表示全部读取； offset 指定从哪里开始读取，默认为0。 创建的数组与 buffer 共享内存。 buffer 是一个提供了 buffer 接口的对象（ 内置的 bytes/bytearray/array.array 类型提供了该接口 ）。 from array import array # array.array 提供了类似list对象的内存机制 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # 创建一个array数组 na = np . frombuffer ( a , dtype = np . float ) # 通过np.frombuffer()创建一个和a共享内存的NumPy数组 print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # 修改NumPy数组中的第一个元素 a # array数组中的第一个元素也同时改变 a : array ( 'd' , [ 1.0 , 2.0 , 3.0 , 4.0 ]) na : [ 1 . 2 . 3 . 4 .] array('d', [1.0, 20.0, 3.0, 4.0]) 8 np.fromfile(file[, dtype, count, sep]) ：从二进制文件或者文本文件中读取数据返回 ndarray 。 sep ：当从文本文件中读取时，数值之间的分隔字符串，如果 sep 是空字符串则表示文件应该作为二进制文件读取；如果 sep 为 \" \" 表示可以匹配0个或者多个空白字符。 9 np.fromfunction(function, shape, \\**kwargs) ：返回一个 ndarray 。function会获取每一个坐标点的数据，作为输入参数。假设 shape 的维度为N，那么 function 带有 N 个参数， fn(x1,x2,...x_N) ，其返回值就是该坐标点的值。 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array([[0., 1., 2.], [1., 2., 3.], [2., 3., 4.]]) 10 np.fromiter(iterable, dtype[, count]) ：从可迭代对象中迭代获取数据创建一维 ndarray 。 np . fromiter ( \"123\" , dtype = \"int64\" ) array([1, 2, 3], dtype=int64) 11 np.fromstring(string[, dtype, count, sep]) ：从字符串或者 raw binary 中创建一维 ndarray 。如果 sep 为空字符串则 string 将按照二进制数据解释（即每个字符作为 ASCII 码值对待）。创建的数组有自己的数据存储区。 a = \"abcdefg\" a = np . fromstring ( a , dtype = np . int8 ) # 将每个字符的ASCII编码解释为整数 print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] .\\setup_m.py:2: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead from datetime import datetime 12 np.loadtxt(fname[, dtype, comments, delimiter, ...]) :从文本文件中加载数据创建 ndarray ，要求文本文件每一行都有相同数量的数值。 comments ：指示注释行的起始字符，可以为单个字符或者字符列表（默认为 # ）。 delimiter :指定数值之间的分隔字符串，默认为空白符。 converters ：将指定列号(0,1,2...)的列数据执行转换，是一个 map ，如 {0:func1} 表示对第一列数据执行 func1(val_0) 。 skiprows ：指定跳过开头的多少行。 usecols ：指定读取那些列（0表示第一列）。 从数值区间创建 1 np.arange([start,] stop[, step,][, dtype]) :返回均匀间隔的值组成的一维 ndarray 。区间是半闭半开的 [start,stop) ，其采样行为类似Python的 range 函数。 start 为开始点， stop 为终止点， step 为步长，默认为1。这几个数可以为整数可以为浮点数。 注意如果 step 为浮点数，则结果可能有误差，因为浮点数相等比较不准确（计算机精度有限）。 2 np.linspace(start, stop[, num, endpoint, ...]) ：返回 num 个均匀采样的数值组成的一维 ndarray （默认为50）。区间是闭区间 [start,stop] 。 endpoint 为布尔值，如果为真则表示 stop 是最后采样的值（默认为 True ），否则结果不包含 stop 。 retstep 如果为 True 则返回结果包含采样步长 step ，默认为 True 。 3 np.logspace(start, stop[, num, endpoint, base, ...]) ：返回对数级别上均匀采样的数值组成的一维 ndarray 。采样点开始于 base^start ，结束于 base^stop 。 base 为对数的基，默认为 10。 它逻辑上相当于先执行 arange 获取数组 array ，然后再执行 base^array[i] 获取采样点 它没有 retstep 关键字参数 以填充的方式创建 1 np.empty(shape[,dtype,order]) ：返回一个新的 ndarray ，指定了 shape 和 dtype ，但是没有初始化元素。因此其内容是随机的。 2 np.empty_like(a[,dtype,order,subok]) ：返回一个新的 ndarray ， shape 与 a 相同，但是没有初始化元素。因此其内容是随机的。 # 内存未初始化 a = np . empty (( 3 , 2 ), order = \"C\" ) # 内存未初始化 np . empty_like ( a ) array([[2.56734753e-289, 2.56734753e-289], [5.97757174e-299, 5.38028306e-299], [5.97757178e-299, 3.97887030e+072]]) 3 np.eye(N[, M, k, dtype]) ：返回一个==二维数组==，对角线元素为1，其余元素为0。 M 默认等于 N 。 k 默认为0表示对角线元素为1，如为正数则表示对角线上方一格的元素为1，如为负数表示对角线下方一格的元素为1。 4 np.identity(n[, dtype]) ：返回一个单位矩阵。 np . eye ( N = 2 , M = 3 ) np . eye ( N = 2 , M = 3 , k = 0 ) # 参数k是可以超出范围的 np . eye ( N = 2 , M = 3 , k = 1 ) # 返回n阶单位矩阵 np . identity ( n = 4 ) array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) 5 np.ones(shape[, dtype, order]) ：返回一个新的 ndarray ，指定了 shape 和 type ，每个元素初始化为1. 6 np.ones_like(a[, dtype, order, subok]) ：返回一个新的 ndarray ， shape 与 a 相同，每个元素初始化为1。 7 np.zeros(shape[, dtype, order]) ：返回一个新的 ndarray ，指定了 shape 和 type ，每个元素初始化为0. 8 np.zeros_like(a[, dtype, order, subok]) ：返回一个新的 ndarray ， shape 与 a （另一个数组）相同，每个元素初始化为0。 9 np.full(shape, fill_value[, dtype, order]) ：返回一个新的 ndarray ，指定了 shape 和 type ，每个元素初始化为 fill_value 。 10 np.full_like(a, fill_value[, dtype, order, subok]) ：返回一个新的 ndarray ， shape 与 a 相同，每个元素初始化为 fill_value 。 np . full (( 2 , 3 ), fill_value = 2 ) array([[2, 2, 2], [2, 2, 2]])","text_tokens":["fortran","n","numpy","空白符","共享","类","一列","点","相同","copy","全部","迭代","单位","10","\\","连续","第一个","v.1915","即","计算","5.97757174","101","转换","offset","range","范围","amd64","比较","相当","0","123","下方","对于","转换成","from","8","数","3.97887030","精度","float64","50","e","20","以","：","中","comments","关键字","2.56734753","subok","采样","该","5","半闭","行","[","浮点数","bool","zeros","真则","299","对待","存储","如果","调用","linspace","3","第一列","多少","假设","通过","为空","多维","msc","surprisingly","那么","和","等于","ndmin","随机","值","提供","开头","build","x2","start","fill","import","带有","数值","matrix","list","个","整数","共同","abcdefg","date","asarray","内存","20.0","单个","data","converters","终止","na","新","实际上","那些","实例","机制","起始","就是","共享内存","作为","eye",".","empty","on","码值","*","布尔值","时","int64","列","behaves","按行","deprecationwarning","stop","默认","修改","string","间隔","第一","windows","iterable","优先","int8","，","换成","然后","为","执行","unicode","内置","as","等等","endpoint","实际","\"","asanyarray","匹配","print","-","其中","浮点","跳过","asmatrix","逻辑","loadtxt","当于","it","拷贝","组成","指示","一定","+","关键","latest","本文",";","mode","如","有","其余","count","bytearray","deprecated","均匀","以上","获取","...","12","字符","64","相当于","setup","上","072","但是","binary","维度","可","参数","按照","内容","函数","获取数据","子类","返回","自己","注释","a","阶","编码","对角线","num","version","x","ones","元素","初始","def","array","深","对角","}","fromiter","基","空白","应该","要求","1.18","ascii","shape","、","like","误差","坐标","function"," ","相等","instead","表示","一个","你","现有","加载","4","int32","类型","的","单位矩阵","每个","fromstring","方式","fn","分隔","如为","9","会","_","当","tuple","尽可能","行为","了","2","frombuffer","bytes","skiprows","没有","6","几个","'","__","文本文件",")","是","使用","false","接口","数组","结束","{","字符串","填充",":","半开","2.0","指定","算机","也","因为","级别","object","哪里","7","从","超出","dtype","步长","可以",",","type","@","step","103","(","读取","4.0","矩阵","将","一格","the","fun","一行","sep","fromfile","f","raw","这里","类似","读取数据","map","对数","另","则","y","identity","有限","k","（","`","列号","1.0","file","多个","python","这","c","np","方法","返回值","full","true","二维","风格","102","数据","arange","与","一份","区","区间","都","同时","尽可","m","超出范围","文件","d","文本","一维","之间","于","base","ascontiguousarray","对象","py","列表","order","始终","输入","is","含有","float","99","logspace","use","准确","再","每","/","2020.03","可能","）","；","数量","100","value","i","结果","解释","97","ndarray","usecols","其","创建","未","按列","5.97757178","布尔","负数","fname","点数","否则","标准","bit","相似","不","]","retstep","5.38028306","先","进制","它","inputs","空","闭","fromfunction","初始化","kwargs","x1","11","=","3.7","最后","因此","datetime","包含","buffer","对","或者","22","。","序列","delimiter","^","func1","二进制","上方","正数","改变","注意","1","#","val","of","计算机","最少","开始","3.0","return","98","289"],"title":"6.1.创建数组","title_tokens":["6.1","数组","创建","."]},{"location":"numpy笔记/6.1.创建数组.html#_1","text":"这里有几个共同的参数： a ：一个 array-like 类型的实例，它不一定是数组，可以为 list 、 tuple 、 list of tuple 、 list of list 、 tuple of list 、 tuple of tuple 等等。 dtype ：数组的值类型，默认为 float 。你可以指定Python的标准数值类型，也可以使用 numpy 的数值类型如： numpy.int32 或者 numpy.float64 等等。 order ：指定存储多维数据的方式。 'C' ，表示按行优先存储（C风格）； - 'F' ，表示按列优先存储（Fortran风格）。 - 对于 **_like() 函数， order 可以为： 'C' ， 'F' ， 'A' （表示结果的order与a相同）， 'K' （表示结果的 order 与 a 尽可能相似） subok ： bool 值。如果为 True 则：如果 a 为 ndarray 的子类（如 matrix 类），则结果类型与 a 类型相同。如果为 False 则：结果类型始终为 ndarray 。默认为True。","text_tokens":["一个","fortran","你","numpy","int32","数据","类","类型","的","按行","与","相同","方式","尽可","默认","_","tuple","尽可能","优先","，","order","为","始终","等等","对于","几个","float64","'","-","是","float",")","使用","false","：","数组","一定","可能","subok","）","；","如","bool","指定","也","有","结果","存储","如果","ndarray","dtype","可以","按列","参数","多维","标准","(","函数","相似","不","子类","值","它","a","f","数值","matrix","list","这里","共同","或者","则","。","array","k","（","、","like","实例","python","c","of","."," ","true","*","风格","表示"],"title":"共同的参数","title_tokens":["的","共同","参数"]},{"location":"numpy笔记/6.1.创建数组.html#_2","text":"1 np.array(object[, dtype, copy, order, subok, ndmin]) :从 object 创建。 - object 可以是一个 ndarray ，也可以是一个 array_like 的对象，也可以是一个含有返回一个序列或者 ndarray 的 __array__ 方法的对象，或者一个序列。 - `copy` ：默认为 `True` ，表示拷贝对象 - `order` 可以为 `'C'、'F'、'A'` 。默认为 `'K'` 。 - `subok` 默认为 `False` - `ndmin` ：指定结果 `ndarray` 最少有多少个维度。 2 np.asarray(a[, dtype, order]) ：将 a 转换成一个 ndarray 。其中 a 是 array_like 的对象， 可以是 list 、 list of tuple 、 tuple 、 tuple of list 、 ndarray 类型。 order 默认为 C 。 3 np.asanyarray(a[, dtype, order]) ：将 a 转换成 ndarray 。 4 np.ascontiguousarray(a[, dtype]) ：返回C风格的连续 ndarray 。 5 np.copy(a[, order]) ：返回 ndarray 的一份深拷贝。 以上5个方法实际上都是调用了 array() 的接口。 np . asarray () # array(a, dtype, copy=False, order=order) np . asanyarray () # array(a, dtype, copy=False, order=order, subok=True) np . ascontiguousarray () # array(a, dtype, copy=False, order='C', ndmin=1) np . copy () # array(a, order=order, copy=True) 6 np.asmatrix(data[, dtype]) ：返回 matrix 。 7 np.frombuffer(buffer[, dtype, count, offset]) ：从输入数据中返回一维 ndarray 。 count 指定读取的数量， -1 表示全部读取； offset 指定从哪里开始读取，默认为0。 创建的数组与 buffer 共享内存。 buffer 是一个提供了 buffer 接口的对象（ 内置的 bytes/bytearray/array.array 类型提供了该接口 ）。 from array import array # array.array 提供了类似list对象的内存机制 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # 创建一个array数组 na = np . frombuffer ( a , dtype = np . float ) # 通过np.frombuffer()创建一个和a共享内存的NumPy数组 print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # 修改NumPy数组中的第一个元素 a # array数组中的第一个元素也同时改变 a : array ( 'd' , [ 1.0 , 2.0 , 3.0 , 4.0 ]) na : [ 1 . 2 . 3 . 4 .] array('d', [1.0, 20.0, 3.0, 4.0]) 8 np.fromfile(file[, dtype, count, sep]) ：从二进制文件或者文本文件中读取数据返回 ndarray 。 sep ：当从文本文件中读取时，数值之间的分隔字符串，如果 sep 是空字符串则表示文件应该作为二进制文件读取；如果 sep 为 \" \" 表示可以匹配0个或者多个空白字符。 9 np.fromfunction(function, shape, \\**kwargs) ：返回一个 ndarray 。function会获取每一个坐标点的数据，作为输入参数。假设 shape 的维度为N，那么 function 带有 N 个参数， fn(x1,x2,...x_N) ，其返回值就是该坐标点的值。 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array([[0., 1., 2.], [1., 2., 3.], [2., 3., 4.]]) 10 np.fromiter(iterable, dtype[, count]) ：从可迭代对象中迭代获取数据创建一维 ndarray 。 np . fromiter ( \"123\" , dtype = \"int64\" ) array([1, 2, 3], dtype=int64) 11 np.fromstring(string[, dtype, count, sep]) ：从字符串或者 raw binary 中创建一维 ndarray 。如果 sep 为空字符串则 string 将按照二进制数据解释（即每个字符作为 ASCII 码值对待）。创建的数组有自己的数据存储区。 a = \"abcdefg\" a = np . fromstring ( a , dtype = np . int8 ) # 将每个字符的ASCII编码解释为整数 print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] .\\setup_m.py:2: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead from datetime import datetime 12 np.loadtxt(fname[, dtype, comments, delimiter, ...]) :从文本文件中加载数据创建 ndarray ，要求文本文件每一行都有相同数量的数值。 comments ：指示注释行的起始字符，可以为单个字符或者字符列表（默认为 # ）。 delimiter :指定数值之间的分隔字符串，默认为空白符。 converters ：将指定列号(0,1,2...)的列数据执行转换，是一个 map ，如 {0:func1} 表示对第一列数据执行 func1(val_0) 。 skiprows ：指定跳过开头的多少行。 usecols ：指定读取那些列（0表示第一列）。","text_tokens":["102","一个","时","n","int64","列","numpy","behaves","加载","4","空白符","共享","数据","一列","类型","的","与","点","一份","fromstring","copy","全部","迭代","每个","都","区","10","同时","fn","分隔","deprecationwarning","\\","m","连续","默认","第一个","文件","修改","string","d","即","文本","9","会","一维","_","之间","当","tuple","第一","101","iterable","ascontiguousarray","转换","对象","py","offset","int8","，","列表","换成","order","了","2","为","执行","frombuffer","0","bytes","unicode","skiprows","内置","as","123","输入","6","转换成","实际","\"","from","asanyarray","8","匹配","print","is","__","'","-","含有",")","是","float","其中","20","文本文件","99","false","：","中","接口","use","asmatrix","跳过","loadtxt","数组","每","拷贝","/","it","comments","指示","{","subok","+","）","字符串","该","5","数量",":","；","本文","行",";","[","mode","100","如","2.0","指定","也","有","结果","解释","对待","object","哪里","存储","count","bytearray","deprecated","97","7","以上","从","获取","...","12","如果","字符","ndarray","dtype","usecols","可以","其","调用","创建","setup","3",",","第一列","多少","假设","binary","通过","维度","可","为空","参数","103","按照","surprisingly","fname","(","那么","读取","和","获取数据","]","ndmin","4.0","值","提供","将","进制","开头","the","返回","fun","自己","注释","inputs","a","x2","空","一行","sep","fromfunction","fromfile","f","编码","import","带有","kwargs","x1","11","数值","matrix","raw","相同","=","list","个","x","整数","元素","类似","读取数据","abcdefg","datetime","map","buffer","对","或者","def","则","y","。","序列","array","delimiter","asarray","内存","深","20.0","单个","}","fromiter","k","data","func1","空白","（","二进制","`","应该","na","要求","ascii","shape","instead","converters","列号","、","like","1.0","改变","实际上","那些","坐标","1","file","机制","起始","就是","共享内存","多个","作为","#","c","val","of","function",".","np","方法","返回值"," ","最少","on","码值","开始","true","*","3.0","return","98","风格","表示"],"title":"从现有的数据创建","title_tokens":["现有","数据","的","创建","从"]},{"location":"numpy笔记/6.1.创建数组.html#_3","text":"1 np.arange([start,] stop[, step,][, dtype]) :返回均匀间隔的值组成的一维 ndarray 。区间是半闭半开的 [start,stop) ，其采样行为类似Python的 range 函数。 start 为开始点， stop 为终止点， step 为步长，默认为1。这几个数可以为整数可以为浮点数。 注意如果 step 为浮点数，则结果可能有误差，因为浮点数相等比较不准确（计算机精度有限）。 2 np.linspace(start, stop[, num, endpoint, ...]) ：返回 num 个均匀采样的数值组成的一维 ndarray （默认为50）。区间是闭区间 [start,stop] 。 endpoint 为布尔值，如果为真则表示 stop 是最后采样的值（默认为 True ），否则结果不包含 stop 。 retstep 如果为 True 则返回结果包含采样步长 step ，默认为 True 。 3 np.logspace(start, stop[, num, endpoint, base, ...]) ：返回对数级别上均匀采样的数值组成的一维 ndarray 。采样点开始于 base^start ，结束于 base^stop 。 base 为对数的基，默认为 10。 它逻辑上相当于先执行 arange 获取数组 array ，然后再执行 base^array[i] 获取采样点 它没有 retstep 关键字参数","text_tokens":["arange","的","点","区间","10","stop","默认","间隔","一维","计算","于","base","，","行为","range","然后","为","2","执行","比较","相当","没有","endpoint","几个","数","精度","50",")","是","浮点","：","logspace","逻辑","准确","再","当于","组成","数组","关键字","结束","采样","可能","）","关键","半闭",":","[","半开","浮点数","真则","算机","i","有","因为","结果","级别","均匀","...","获取","如果","ndarray","dtype","步长","可以","其","相当于","linspace","上",",","3","step","布尔","点数","参数","否则","(","函数","不","]","retstep","先","值","它","返回","闭","start","数值","num","个","整数","最后","类似","包含","对数","则","。","array","有限","基","^","（","终止","误差","注意","1","python","这","计算机",".","np"," ","相等","开始","true","布尔值","表示"],"title":"从数值区间创建","title_tokens":["区间","创建","从","数值"]},{"location":"numpy笔记/6.1.创建数组.html#_4","text":"1 np.empty(shape[,dtype,order]) ：返回一个新的 ndarray ，指定了 shape 和 dtype ，但是没有初始化元素。因此其内容是随机的。 2 np.empty_like(a[,dtype,order,subok]) ：返回一个新的 ndarray ， shape 与 a 相同，但是没有初始化元素。因此其内容是随机的。 # 内存未初始化 a = np . empty (( 3 , 2 ), order = \"C\" ) # 内存未初始化 np . empty_like ( a ) array([[2.56734753e-289, 2.56734753e-289], [5.97757174e-299, 5.38028306e-299], [5.97757178e-299, 3.97887030e+072]]) 3 np.eye(N[, M, k, dtype]) ：返回一个==二维数组==，对角线元素为1，其余元素为0。 M 默认等于 N 。 k 默认为0表示对角线元素为1，如为正数则表示对角线上方一格的元素为1，如为负数表示对角线下方一格的元素为1。 4 np.identity(n[, dtype]) ：返回一个单位矩阵。 np . eye ( N = 2 , M = 3 ) np . eye ( N = 2 , M = 3 , k = 0 ) # 参数k是可以超出范围的 np . eye ( N = 2 , M = 3 , k = 1 ) # 返回n阶单位矩阵 np . identity ( n = 4 ) array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) 5 np.ones(shape[, dtype, order]) ：返回一个新的 ndarray ，指定了 shape 和 type ，每个元素初始化为1. 6 np.ones_like(a[, dtype, order, subok]) ：返回一个新的 ndarray ， shape 与 a 相同，每个元素初始化为1。 7 np.zeros(shape[, dtype, order]) ：返回一个新的 ndarray ，指定了 shape 和 type ，每个元素初始化为0. 8 np.zeros_like(a[, dtype, order, subok]) ：返回一个新的 ndarray ， shape 与 a （另一个数组）相同，每个元素初始化为0。 9 np.full(shape, fill_value[, dtype, order]) ：返回一个新的 ndarray ，指定了 shape 和 type ，每个元素初始化为 fill_value 。 10 np.full_like(a, fill_value[, dtype, order, subok]) ：返回一个新的 ndarray ， shape 与 a 相同，每个元素初始化为 fill_value 。 np . full (( 2 , 3 ), fill_value = 2 ) array([[2, 2, 2], [2, 2, 2]])","text_tokens":["一个","n","4","的","单位矩阵","与","每个","相同","单位","10","如为","m","超出范围","默认","9","5.97757174","_","，","范围","order","了","2","为","0","没有","下方","6","\"","3.97887030","8","e","-",")","是","：","数组","2.56734753","subok","+","）","5","[","指定","zeros","value","299","其余","7","超出","ndarray","dtype","可以","其","未",",","3","072","但是","5.97757178","type","负数","参数","内容","(","和","]","5.38028306","等于","随机","矩阵","一格","返回","a","阶","fill","初始化","对角线","=","ones","因此","元素","初始","另","则","。","array","内存","对角","identity","k","（","上方","新","shape","正数","like","1","#","c","eye",".","empty","np"," ","full","二维","289","表示"],"title":"以填充的方式创建","title_tokens":["填充","的","创建","方式","以"]},{"location":"numpy笔记/6.10.函数库.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 随机数库 随机抽样 np.random.choice(a, size=None, replace=True, p=None) ：从一维数组 a 中随机抽取样本量为 size 的样本。 a 必须是一维的。 replace 控制是否重复抽样， p 是a的概率分 布， p 和 a 必须有相同的size。 a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] np . random . choice ( a , size = ( 2 , 2 ), replace = False , p = None ) array([[9, 6], [5, 1]])","text_tokens":["numpy","4","的","相同","10","机数","replace","v.1915","控制","9","样本","一维","windows","，","为","2","amd64","as","6","8","样本量",")","是","false","：","中","随机数","数组","随机抽样","2020.03","是否","抽样","5","latest",":","库","[","概率","有","抽取","重复","7","从","64","3",",","choice","@","msc","bit","(","和","]","随机","build","random","a","size","import","=","必须","version","3.7","date","布","22","。","array","1.18","1","p","python","分","none",".","np"," ","true"],"title":"6.10.函数库","title_tokens":["函数",".","6.10","函数库"]},{"location":"numpy笔记/6.10.函数库.html#_1","text":"","text_tokens":[],"title":"随机数库","title_tokens":["库","随机数","随机","机数"]},{"location":"numpy笔记/6.10.函数库.html#_2","text":"np.random.choice(a, size=None, replace=True, p=None) ：从一维数组 a 中随机抽取样本量为 size 的样本。 a 必须是一维的。 replace 控制是否重复抽样， p 是a的概率分 布， p 和 a 必须有相同的size。 a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] np . random . choice ( a , size = ( 2 , 2 ), replace = False , p = None ) array([[9, 6], [5, 1]])","text_tokens":["6","8","抽取","4","样本量","的","布",")",",","是","。","相同","3","array","false","：","中","choice","数组","(","replace","和","控制","9","]","是否","样本","抽样","一维","5","随机","1","重复","7","p","[","random","a","概率","，","分","none","size",".","为","2","np","有"," ","true","=","必须","从"],"title":"随机抽样","title_tokens":["抽样","随机","随机抽样"]},{"location":"numpy笔记/6.11.保存和加载.html","text":"import numpy as np import os Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 x = np . arange ( 20 ) x . resize ( 4 , 5 ) npy ny.save(file, arr, allow_pickle=True, fix_imports=True) ：将 一个 numpy数组储存为一个 .npy 格式的二进制文件。 file ：文件名或者文件对象。如果是个文件名，则会自动添加后缀 .npy 如果没有该后缀的话 arr ：被存储的数组 allow_pickle ：一个布尔值，如果为True，则使用Python pickle。有时候为了安全性和可移植性而不使用pickle fix_imports ：用于python3的数组import到python2的情形 save_path = \"array\" # 保存时会自动添加.npy后缀 np . save ( save_path , x ) # npy文件被保存在工作目录 [ i for i in os . listdir () if i . endswith ( \"npy\" )] ['array.npy'] 读入 .npy 文件 ny.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII') ：从二进制文件中读取数组。返回一个数组，元组，或者字典（当二进制文件是 savez 生成时） file ：一个文件名或者文件对象。 mmap_mode ：如果不是None，则memory-map该文件。此时对数组的修改会同步到文件上。当读取大文件的一小部分时很有用，因为它不必一次读取整个文件。可选值为None/'r+'/'r'/'w+'/'c' allow_pickle ：一个布尔值，如果为True，则使用Python pickle。有时候为了安全性和可移植性而不使用pickle fix_imports ：用于python3的数组import到python2的情形 encoding ：只用于python2，读取python2字符串。 np . load ( \"array.npy\" , allow_pickle = True ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]) npz ny.savez(file, *args, **kwds) ：将 多个numpy数组 储存为一个 .npz 格式的二进制文件。 file ：文件名或者文件对象。如果是个文件名，则会自动添加后缀 .npz ，如果没有该后缀的话 args ：被存储的数组。这些数组的名字将被自动命名为 arr_0/arr_1/... kwds ：将被存储的数组，这些关键字参数就是键的名字 np . savez ( save_path , x , x ) 读入 .npyz 文件 np . load ( \"array.npz\" , allow_pickle = True ) <numpy.lib.npyio.NpzFile at 0x1d934ea1be0> 另外， np.savez_compressed 将 多个numpy数组 储存为一个 .npz 格式的压缩文件。 文本文件 np.savetxt() 将一个numpy数组储存为一个文本文件： np . savetxt ( save_path , x ) 读入文本文件 np . loadtxt ( \"array\" ) array([[ 0., 1., 2., 3., 4.], [ 5., 6., 7., 8., 9.], [10., 11., 12., 13., 14.], [15., 16., 17., 18., 19.]]) 清除文件 try : os . remove ( \"array\" ) os . remove ( \"array.npy\" ) os . remove ( \"array.npz\" ) except : pass","text_tokens":["一个","时候","时","不必","整个","numpy","4","imports","arange","的","清除","可选值","try","10","为了","情形","in","13","fix","lib","大","文件","移植","修改","被","v.1915","9","文本","r","会","listdir","只","读入","memory","_","时会","当","可选","压缩","if","windows","对象","npz","工作","，","resize","mmap","有时候","endswith","为","而","amd64","用于","2","0","at","添加","没有","as","6","\"","8","到","移植性","'","文本文件","-",")","是","20","使用","：","中","compressed","loadtxt","数组","关键字","/","后缀","0x1d934ea1be0","19","另外","2020.03","的话","+","压缩文件","）","字符串","该","5","关键","pickle","latest",":","本文","目录","[","可移植性","savez","一次","python3","mode","allow","很","i","w","因为","16","存储","此时","7","从","有时","字典","12","...","15","如果","同步","字符","64","for","命名","remove","path","14","上","savetxt","3",",","不是","npyz","格式","@","布尔","这些","参数","msc","bit","(","ny","和","不","python2","]","读取","可移植","小部","<","pass","将","进制","它","返回","build","安全","键","安全性",">","load","import","npzfile","17","11","=","version","部分","个","x","3.7","在","元组","map","os","对","date","或者","22","save","args","则","。","array","储存","npy","自动","arr","名字","npyio","二进制","（","1.18","encoding","ascii","1","文件名","保存","file","就是","18","一小部分","多个","python","#","kwds","c","none","一小",".","np"," ","生成","true","*","布尔值","except","有用"],"title":"6.11.保存和加载","title_tokens":[".","保存","加载","6.11","和"]},{"location":"numpy笔记/6.11.保存和加载.html#npy","text":"ny.save(file, arr, allow_pickle=True, fix_imports=True) ：将 一个 numpy数组储存为一个 .npy 格式的二进制文件。 file ：文件名或者文件对象。如果是个文件名，则会自动添加后缀 .npy 如果没有该后缀的话 arr ：被存储的数组 allow_pickle ：一个布尔值，如果为True，则使用Python pickle。有时候为了安全性和可移植性而不使用pickle fix_imports ：用于python3的数组import到python2的情形 save_path = \"array\" # 保存时会自动添加.npy后缀 np . save ( save_path , x ) # npy文件被保存在工作目录 [ i for i in os . listdir () if i . endswith ( \"npy\" )] ['array.npy'] 读入 .npy 文件 ny.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII') ：从二进制文件中读取数组。返回一个数组，元组，或者字典（当二进制文件是 savez 生成时） file ：一个文件名或者文件对象。 mmap_mode ：如果不是None，则memory-map该文件。此时对数组的修改会同步到文件上。当读取大文件的一小部分时很有用，因为它不必一次读取整个文件。可选值为None/'r+'/'r'/'w+'/'c' allow_pickle ：一个布尔值，如果为True，则使用Python pickle。有时候为了安全性和可移植性而不使用pickle fix_imports ：用于python3的数组import到python2的情形 encoding ：只用于python2，读取python2字符串。 np . load ( \"array.npy\" , allow_pickle = True ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])","text_tokens":["一个","时候","时","不必","整个","numpy","imports","4","的","可选值","10","为了","情形","in","13","fix","大","文件","移植","修改","被","9","r","会","listdir","只","读入","memory","_","时会","当","可选","if","对象","工作","，","mmap","有时候","endswith","为","而","用于","2","0","添加","没有","6","\"","8","到","移植性","'","-",")","是","使用","：","中","数组","/","后缀","19","的话","+","）","字符串","该","5","pickle","目录","[","可移植性","savez","一次","python3","mode","allow","很","i","w","因为","16","存储","此时","7","从","有时","字典","12","15","如果","同步","字符","for","path","14","上",",","3","不是","格式","布尔","(","ny","和","不","读取","python2","]","小部","可移植","将","进制","它","返回","安全","安全性","load","import","17","11","=","部分","个","x","在","元组","map","os","对","或者","save","则","。","array","储存","npy","自动","arr","二进制","（","encoding","ascii","1","文件名","保存","file","18","一小部分","python","#","c","none","一小",".","np"," ","生成","true","布尔值","有用"],"title":"npy","title_tokens":["npy"]},{"location":"numpy笔记/6.11.保存和加载.html#npz","text":"ny.savez(file, *args, **kwds) ：将 多个numpy数组 储存为一个 .npz 格式的二进制文件。 file ：文件名或者文件对象。如果是个文件名，则会自动添加后缀 .npz ，如果没有该后缀的话 args ：被存储的数组。这些数组的名字将被自动命名为 arr_0/arr_1/... kwds ：将被存储的数组，这些关键字参数就是键的名字 np . savez ( save_path , x , x ) 读入 .npyz 文件 np . load ( \"array.npz\" , allow_pickle = True ) <numpy.lib.npyio.NpzFile at 0x1d934ea1be0> 另外， np.savez_compressed 将 多个numpy数组 储存为一个 .npz 格式的压缩文件。","text_tokens":["一个","numpy","的","lib","文件","被","会","读入","_","压缩","对象","npz","，","为","0","at","添加","没有","\"",")","是","：","compressed","数组","关键字","/","后缀","0x1d934ea1be0","另外","的话","压缩文件","该","关键","pickle","savez","allow","存储","...","如果","命名","path",",","npyz","格式","参数","(","ny","<","将","进制","键",">","load","npzfile","=","x","个","或者","save","args","则","。","array","储存","自动","arr","名字","npyio","二进制","1","文件名","file","就是","多个","kwds",".","np"," ","true","*","这些"],"title":"npz","title_tokens":["npz"]},{"location":"numpy笔记/6.11.保存和加载.html#_1","text":"np.savetxt() 将一个numpy数组储存为一个文本文件： np . savetxt ( save_path , x ) 读入文本文件 np . loadtxt ( \"array\" ) array([[ 0., 1., 2., 3., 4.], [ 5., 6., 7., 8., 9.], [10., 11., 12., 13., 14.], [15., 16., 17., 18., 19.]]) 清除文件 try : os . remove ( \"array\" ) os . remove ( \"array.npy\" ) os . remove ( \"array.npz\" ) except : pass","text_tokens":["12","6","一个","\"","15","os","numpy","8","4","remove","文本文件","save","path","savetxt",")",",","3","14","清除","array","try","10","储存","：","npy","13","loadtxt","数组","文件","19","(","文本","]","9","pass","5","读入","_","将","本文","1",":","[","18","npz",".","为","2","np"," ","16","0","17","11","7","except","x"],"title":"文本文件","title_tokens":["文本","本文","文本文件","文件"]},{"location":"numpy笔记/6.12.结构化数组.html","text":"import numpy as np import pprint Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 结构化数组常用操作 x = np . array ([( 'Rex' , 9 , 81.0 ), ( 'Fido' , 3 , 27.0 )], dtype = [( 'name' , 'U10' ), ( 'age' , 'i4' ), ( 'weight' , 'f4' )]) pprint . pprint ( x ) array([('Rex', 9, 81.), ('Fido', 3, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) 通过索引，可以获得一个结构 pprint . pprint ( x [ 0 ]) # 可以通过使用 字段名称 建立索引来访问和修改结构化数组的各个 字段： pprint . pprint ( x [ \"name\" ]) pprint . pprint ( x [[ \"age\" , \"name\" ]]) # 根据 字段名称 做过滤 pprint . pprint ( x [ x [ \"age\" ] > 5 ][ \"name\" ]) # 修改全部数组的age字段 x [ \"age\" ] = 20 pprint . pprint ( x ) ('Rex', 9, 81.) array(['Rex', 'Fido'], dtype='<U10') array([(9, 'Rex'), (3, 'Fido')], dtype={'names':['age','name'], 'formats':['<i4','<U10'], 'offsets':[40,0], 'itemsize':48}) array(['Rex'], dtype='<U10') array([('Rex', 20, 81.), ('Fido', 20, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) 创建结构化数组 可以通过 a list of tuple 的形式创建结构化数组。 \"\"\" # the tupe is (fieldname, datatype, Shape) # fieldname、Shape可以省略 # fieldname 是字符串，如果使用 title，则为元组 # 如果fieldname省略，则用 f# 的默认名称代替 # shape 如果省略，则默认为(1,) \"\"\" np . dtype ([( 'x' , 'f4' ), ( 'y' , np . float32 ), ( 'z' , 'f4' , ( 2 , 2 ))]) \"\"\" 如果 fieldname 是空字符串 '' ，则将为字段指定格式为 f# 的默认名称， 其中 # 是字段的整数索引，从左侧开始从0开始计数： \"\"\" np . dtype ([( 'x' , 'f4' ), ( '' , 'i4' ), ( 'z' , 'i8' )]) dtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')]) 可以通过“逗号分割的字符串”创建结构化数组。字符串要符合规范。 np . dtype ( 'i8, f4, S3' ) np . dtype ( '3int8, float32, (2, 3)float64' ) dtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))]) 通过“字段参数组字典”创建结构化数组。 这是最灵活的规范形式，因为它允许控制字段的字节偏移和结构的项目大小。 dict有两个必需键 names 和 format ，以及四个可选键 offsets 、 itemsize 、 Aligned 和 title ： names 和 format 的值应该分别是相同长度的字段名列表和dtype规范列表。 可选的 offsets 值应该是整数字节偏移量的列表，结构中的每个字段都有一个偏移量。如果未给出 offsets ，则自动确定偏移量。 可选的 itemsize 值应该是一个整数， 描述 dtype 的总大小（以字节为单位），它必须足够大以包含所有字段。 可选的 Aligned 值可以设置为True，以使自动偏移计算使用对齐的偏移量（ 请参阅自动字节偏移量和对齐 ）。 可选的 titles 值应该是长度与 names 相同的标题列表。 np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ]}) np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ], 'offsets' : [ 0 , 4 ], 'itemsize' : 12 }) dtype({'names':['col1','col2'], 'formats':['<i4','<f4'], 'offsets':[0,4], 'itemsize':12}) 通过 dict of fieldname 创建结构化数组。不鼓励使用这种形式，因为Python字典在Python 3.6之前的Python版本中不保留顺序，但结构化dtype中字段的顺序有意义。 字典的关键字是字段名称，值是指定类型和偏移量的元组： np . dtype ({ 'col1' : ( 'i1' , 0 ), 'col2' : ( 'f4' , 1 )}) dtype([('col1', 'i1'), ('col2', '<f4')]) 操作和显示结构化数据类型 d = np . dtype ([( 'x' , 'i8' ), ( 'y' , 'f4' )]) d . names d . fields mappingproxy({'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)}) 为什么需要结构化数组 numpy结构化数组中的用法好像类似于Python的dict of list，那为什么还要用numpy结构化数组呢？ 因为numpy的结构化数组底层是类似C语言的结构，占用一块连续的内存区域，并且numpy底层是C实现，numpy数组中的类型都是静态类型的，性能好于Python的的字典列表。 可以来做一下性能比较。 import time ### 定义计时器 def timer ( func ): def wrapper ( self , * args , ** kwargs ): start = time . process_time () something = func ( self , * args , ** kwargs ) end = time . process_time () type_str = func . __repr__ () print ( \"当前函数：\" , type_str , \" \\n \" , \"用时：\" , end - start , \"秒\" , sep = \"\" ) return something return wrapper # numpy版本长一岁 @timer def addage_numpy ( data , loop ): for i in range ( loop ): data [ 'age' ] += 1 # python循环长一岁 @timer def addage_python ( data , loop ): for j in range ( loop ): for i in range ( 4 ): data [ i ][ \"age\" ] += 1 # 创建结构化数组 names = [ 'Lin' , 'Pan' , 'Shen' , 'Zhou' ] ages = [ 28 , 33 , 34 , 29 ] grades = [ 25 , 26 , 27 , 24 ] data_np = np . zeros ( 4 , dtype = { 'names' :( 'name' , 'age' , 'grade' ), 'formats' :( 'U10' , 'i4' , 'i4' ) }) data_np [ 'name' ] = names data_np [ 'age' ] = ages data_np [ 'grade' ] = grades data_py = [] for i in range ( 4 ): person = { \"name\" : names [ i ], \"age\" : ages [ i ], \"grade\" : grades [ i ]} data_py . append ( person ) addage_numpy ( data_np , loop = 1000000 ) addage_python ( data_py , loop = 1000000 ) 当前函数：<function addage_numpy at 0x000001D931CB8E18> 用时：5.640625秒 当前函数：<function addage_python at 0x000001D931CA80D0> 用时：1.734375秒 记录数组 记录数组和结构数组没有太大区别，它们所使用的场景也是类似的，只不过记录数组可以通过属性的方式访问数据。 创建记录数组的最简单方法是 numpy.rec.array 。 recordarr = np . rec . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ),( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) print ( type ( recordarr )) # 通过属性访问数据 recordarr . foo <class 'numpy.recarray'> array([1, 2]) numpy.rec.array 可以将各种参数转换为记录数组，包括结构化数组： arr = np . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ), ( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) recordarr = np . rec . array ( arr ) pprint . pprint ( recordarr ) rec.array([(1, 2., b'Hello'), (2, 3., b'World')], dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]) numpy.rec 模块提供了多个便利的函数来创建记录数组，请参阅 记录数组创建方法列表 。 注意： numpy.rec 是 numpy.core.records 的首选别名。 core.records.array(obj[, dtype, shape, …]) ：从各种各样的对象构造一个记录数组。 core.records.fromarrays(arrayList[, dtype, …]) ：从一维的list或array创建记录数组。 core.records.fromrecords(recList[, dtype, …]) ：从文本格式的list创建一个记录数组。 core.records.fromstring(datastring[, dtype, …]) ：从二进制字符串数据创建（只读）记录数组。 core.records.fromfile(fd[, dtype, shape, …]) ：从二进制文件数据创建记录数组。 参考 一文彻底搞懂numpy的结构化数组——structured array Numpy的结构化数组 结构化数组","text_tokens":["n","0x000001d931cb8e18","numpy","col1","pprint","相同","全部","可选键","单位","10","\\","连续","区别","v.1915","省略","实现","计算","它们","字","转换","range","3int8","zhou","amd64","比较","0","at","obj","8","float64","20","self","长","以","：","中","记录","关键字","recarray","5","访问","中字","[","27","四个","两个","zeros","ages","formats","循环","如果","还要","for","81.0","arraylist","定义","3","通过","33","records","msc","和","值","提供","build","structured","建立","以及","start","import","list","包括","整数","符合规范","做","date","j","彻底","内存","…","person","data","world","baz","f8","场景","b",".","*","灵活","int64","bar","请参阅","用时","默认","修改","别名","可选","符合","秒","29","windows","用","需要","代替","，","文本格式","为","分别","各种各样","总","f2","as","对齐","\"","print","-","其中","40","所","所有","something","+","操作","offsets","关键","结构","latest","显示","静态","i4","有","左侧","12","版本","字符","64","recordarr","过滤","28","参数","函数","分割","之前","字段名","a","wrapper","鼓励","搞懂","version","但","太","x","各种","在","args","def","一岁","array","aligned","}","arr","应该","fieldname","1.18","shape","、","属性","字节","time","function","语言"," ","参考","25","timer","itemsize","一个","34","titles","4","类型","的","每个","模块","fromstring","f1","方式","为什么","大","保留","9","process","_","tuple","0x000001d931ca80d0","loop","s3","了","好于","datastring","2","core","意义","26","没有","必需","'","组","__",")","是","使用","来","数组","{","一下","字符串","最","计时器","用法",":","48","str","指定","标题","名称","当前","也","rec","因为","顺序","从","呢","简单","规范","什么","各个","那","f4","dtype","可以","首选","title",",","描述","grade","type","格式","@","27.0","(","将","各样","c语言","the","获得","sep","lin","pan","tupe",">","fromfile","f","并且","性能","或","类似","元组","区域","计时","则","y","底层","这种","（","f0","fromrecords","fd","确定","3.6","多个","func","python","这","c","name","项目","i1","format","np","方法","不过","fields","参阅","true","1.734375","###","构造","数据","addage","与","fromarrays","只不过","合规","都","reclist","要","in","i8","文件","”","d","控制","文本","一维","计数","于","shen","s10","字段","对象","py","列表","好像","names","长度","is","—","foo","“","形式","根据","足够","2020.03","u10","）","datatype","24","i","class","？","字典","mappingproxy","float32","使","1000000","创建","未","col2","给出","一块","占用","bit","不","]","age","<","进制","它","grades","数据类型","常用","空","5.640625","键","end","便利","kwargs","=","必须","3.7","z","包含","索引","dict","22","大小","偏移量","。","weight","设置","append","自动","逗号","rex","二进制","允许","段","repr","注意","1","大以","一文","只读","#","结构化","of","称","fido","偏移","hello","81","开始","return"],"title":"6.12.结构化数组","title_tokens":[".","结构","数组","6.12","结构化"]},{"location":"numpy笔记/6.12.结构化数组.html#_1","text":"x = np . array ([( 'Rex' , 9 , 81.0 ), ( 'Fido' , 3 , 27.0 )], dtype = [( 'name' , 'U10' ), ( 'age' , 'i4' ), ( 'weight' , 'f4' )]) pprint . pprint ( x ) array([('Rex', 9, 81.), ('Fido', 3, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) 通过索引，可以获得一个结构 pprint . pprint ( x [ 0 ]) # 可以通过使用 字段名称 建立索引来访问和修改结构化数组的各个 字段： pprint . pprint ( x [ \"name\" ]) pprint . pprint ( x [[ \"age\" , \"name\" ]]) # 根据 字段名称 做过滤 pprint . pprint ( x [ x [ \"age\" ] > 5 ][ \"name\" ]) # 修改全部数组的age字段 x [ \"age\" ] = 20 pprint . pprint ( x ) ('Rex', 9, 81.) array(['Rex', 'Fido'], dtype='<U10') array([(9, 'Rex'), (3, 'Fido')], dtype={'names':['age','name'], 'formats':['<i4','<U10'], 'offsets':[40,0], 'itemsize':48}) array(['Rex'], dtype='<U10') array([('Rex', 20, 81.), ('Fido', 20, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')])","text_tokens":["一个","\"","索引","各个","f4","dtype","做","可以","pprint","'","81.0","的",")","3",",","全部","使用","array","weight","20","过滤","：","40","通过","来","}","根据","27.0","rex","数组","修改","(","和","{","9","]","段","age","<","u10","5","offsets","访问","结构",":","获得","[","27","字段","字段名","字","#","，","i4","建立","48","name","结构化",">",".","np","formats"," ","称","fido","0","names","81","=","x","itemsize"],"title":"结构化数组常用操作","title_tokens":["操作","结构","数组","常用","结构化"]},{"location":"numpy笔记/6.12.结构化数组.html#_2","text":"可以通过 a list of tuple 的形式创建结构化数组。 \"\"\" # the tupe is (fieldname, datatype, Shape) # fieldname、Shape可以省略 # fieldname 是字符串，如果使用 title，则为元组 # 如果fieldname省略，则用 f# 的默认名称代替 # shape 如果省略，则默认为(1,) \"\"\" np . dtype ([( 'x' , 'f4' ), ( 'y' , np . float32 ), ( 'z' , 'f4' , ( 2 , 2 ))]) \"\"\" 如果 fieldname 是空字符串 '' ，则将为字段指定格式为 f# 的默认名称， 其中 # 是字段的整数索引，从左侧开始从0开始计数： \"\"\" np . dtype ([( 'x' , 'f4' ), ( '' , 'i4' ), ( 'z' , 'i8' )]) dtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')]) 可以通过“逗号分割的字符串”创建结构化数组。字符串要符合规范。 np . dtype ( 'i8, f4, S3' ) np . dtype ( '3int8, float32, (2, 3)float64' ) dtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))]) 通过“字段参数组字典”创建结构化数组。 这是最灵活的规范形式，因为它允许控制字段的字节偏移和结构的项目大小。 dict有两个必需键 names 和 format ，以及四个可选键 offsets 、 itemsize 、 Aligned 和 title ： names 和 format 的值应该分别是相同长度的字段名列表和dtype规范列表。 可选的 offsets 值应该是整数字节偏移量的列表，结构中的每个字段都有一个偏移量。如果未给出 offsets ，则自动确定偏移量。 可选的 itemsize 值应该是一个整数， 描述 dtype 的总大小（以字节为单位），它必须足够大以包含所有字段。 可选的 Aligned 值可以设置为True，以使自动偏移计算使用对齐的偏移量（ 请参阅自动字节偏移量和对齐 ）。 可选的 titles 值应该是长度与 names 相同的标题列表。 np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ]}) np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ], 'offsets' : [ 0 , 4 ], 'itemsize' : 12 }) dtype({'names':['col1','col2'], 'formats':['<i4','<f4'], 'offsets':[0,4], 'itemsize':12}) 通过 dict of fieldname 创建结构化数组。不鼓励使用这种形式，因为Python字典在Python 3.6之前的Python版本中不保留顺序，但结构化dtype中字段的顺序有意义。 字典的关键字是字段名称，值是指定类型和偏移量的元组： np . dtype ({ 'col1' : ( 'i1' , 0 ), 'col2' : ( 'f4' , 1 )}) dtype([('col1', 'i1'), ('col2', '<f4')])","text_tokens":["一个","titles","col1","4","类型","的","与","每个","相同","f1","合规","可选键","都","单位","请参阅","要","i8","默认","”","保留","控制","省略","计算","计数","可选","符合","tuple","用","字","字段","代替","，","列表","s3","3int8","为","2","分别","意义","0","f2","总","names","对齐","长度","\"","is","必需","float64","'","“","组",")","是","形式","使用","其中","以","：","中","数组","关键字","所有","足够","{","）","字符串","最","offsets","关键","结构",":","datatype","中字","[","四个","i4","指定","两个","名称","标题","有","因为","formats","顺序","左侧","从","字典","12","规范","如果","float32","版本","字符","使","f4","dtype","可以","创建","未","title",",","3","描述","给出","通过","格式","参数","(","分割","和","不","]","<","值","之前","将","它","the","字段名","a","空","以及","tupe","键","f","鼓励","list","必须","x","整数","z","符合规范","但","在","元组","包含","索引","dict","大小","则","偏移量","y","。","设置","这种","aligned","逗号","自动","}","（","应该","fieldname","f0","允许","shape","段","、","确定","1","大以","3.6","字节","f8","python","#","这","结构化","of","i1","项目",".","format","np"," ","偏移","称","参阅","开始","true","灵活","col2","itemsize"],"title":"创建结构化数组","title_tokens":["结构化","创建","数组","结构"]},{"location":"numpy笔记/6.12.结构化数组.html#_3","text":"d = np . dtype ([( 'x' , 'i8' ), ( 'y' , 'f4' )]) d . names d . fields mappingproxy({'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)})","text_tokens":["mappingproxy","int64","float32","8","f4","dtype","'",")",",","y","}","i8","(","d","{","]",":","[",".","np"," ","0","names","fields","=","x"],"title":"操作和显示结构化数据类型","title_tokens":["操作","结构","显示","数据","类型","数据类型","和","结构化"]},{"location":"numpy笔记/6.12.结构化数组.html#_4","text":"numpy结构化数组中的用法好像类似于Python的dict of list，那为什么还要用numpy结构化数组呢？ 因为numpy的结构化数组底层是类似C语言的结构，占用一块连续的内存区域，并且numpy底层是C实现，numpy数组中的类型都是静态类型的，性能好于Python的的字典列表。 可以来做一下性能比较。 import time ### 定义计时器 def timer ( func ): def wrapper ( self , * args , ** kwargs ): start = time . process_time () something = func ( self , * args , ** kwargs ) end = time . process_time () type_str = func . __repr__ () print ( \"当前函数：\" , type_str , \" \\n \" , \"用时：\" , end - start , \"秒\" , sep = \"\" ) return something return wrapper # numpy版本长一岁 @timer def addage_numpy ( data , loop ): for i in range ( loop ): data [ 'age' ] += 1 # python循环长一岁 @timer def addage_python ( data , loop ): for j in range ( loop ): for i in range ( 4 ): data [ i ][ \"age\" ] += 1 # 创建结构化数组 names = [ 'Lin' , 'Pan' , 'Shen' , 'Zhou' ] ages = [ 28 , 33 , 34 , 29 ] grades = [ 25 , 26 , 27 , 24 ] data_np = np . zeros ( 4 , dtype = { 'names' :( 'name' , 'age' , 'grade' ), 'formats' :( 'U10' , 'i4' , 'i4' ) }) data_np [ 'name' ] = names data_np [ 'age' ] = ages data_np [ 'grade' ] = grades data_py = [] for i in range ( 4 ): person = { \"name\" : names [ i ], \"age\" : ages [ i ], \"grade\" : grades [ i ]} data_py . append ( person ) addage_numpy ( data_np , loop = 1000000 ) addage_python ( data_py , loop = 1000000 ) 当前函数：<function addage_numpy at 0x000001D931CB8E18> 用时：5.640625秒 当前函数：<function addage_python at 0x000001D931CA80D0> 用时：1.734375秒","text_tokens":["34","n","0x000001d931cb8e18","numpy","4","类型","的","addage","都","用时","in","\\","连续","为什么","实现","process","_","于","shen","秒","29","0x000001d931ca80d0","用","py","loop","，","列表","range","zhou","好于","比较","好像","at","names","26","\"","print","__","'","-","是",")","self","长","：","中","来","数组","{","something","+","一下","u10","计时器","结构","用法",":","静态","[","27","1.734375","24","i4","str","zeros","ages","当前","i","formats","因为","循环","？","呢","字典","什么","还要","版本","那","dtype","1000000","可以","for","创建","定义",",","grade","28","type","33","@","一块","占用","(","函数","]","age","<","c语言","grades","sep","lin","pan","5.640625",">","wrapper","start","end","import","并且","kwargs","=","list","性能","类似","dict","区域","做","计时","args","def","j","一岁","底层","。","内存","append","}","person","data","repr","1","func","python","#","c","time","name","of","结构化","function",".","语言","np"," ","25","timer","*","return","###"],"title":"为什么需要结构化数组","title_tokens":["什么","结构","为什么","数组","需要","结构化"]},{"location":"numpy笔记/6.12.结构化数组.html#_5","text":"记录数组和结构数组没有太大区别，它们所使用的场景也是类似的，只不过记录数组可以通过属性的方式访问数据。 创建记录数组的最简单方法是 numpy.rec.array 。 recordarr = np . rec . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ),( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) print ( type ( recordarr )) # 通过属性访问数据 recordarr . foo <class 'numpy.recarray'> array([1, 2]) numpy.rec.array 可以将各种参数转换为记录数组，包括结构化数组： arr = np . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ), ( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) recordarr = np . rec . array ( arr ) pprint . pprint ( recordarr ) rec.array([(1, 2., b'Hello'), (2, 3., b'World')], dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]) numpy.rec 模块提供了多个便利的函数来创建记录数组，请参阅 记录数组创建方法列表 。 注意： numpy.rec 是 numpy.core.records 的首选别名。 core.records.array(obj[, dtype, shape, …]) ：从各种各样的对象构造一个记录数组。 core.records.fromarrays(arrayList[, dtype, …]) ：从一维的list或array创建记录数组。 core.records.fromrecords(recList[, dtype, …]) ：从文本格式的list创建一个记录数组。 core.records.fromstring(datastring[, dtype, …]) ：从二进制字符串数据创建（只读）记录数组。 core.records.fromfile(fd[, dtype, shape, …]) ：从二进制文件数据创建记录数组。","text_tokens":["构造","一个","numpy","数据","pprint","的","模块","只不过","bar","fromarrays","fromstring","方式","reclist","请参阅","大","文件","区别","文本","一维","别名","它们","s10","转换","对象","，","列表","文本格式","了","datastring","2","为","core","各种各样","obj","没有","\"","print","foo","'","是",")","使用","：","记录","来","所","数组","recarray","）","最","字符串","访问","结构","[","i4","也","rec","class","从","简单","字符","f4","dtype","可以","首选","recordarr","arraylist","创建",",","3","通过","type","格式","records","参数","(","函数","和","]","<","提供","将","各样","进制",">","fromfile","便利","=","太","包括","list","各种","或","类似","。","array","…","arr","world","二进制","（","baz","shape","fromrecords","属性","fd","注意","1","多个","只读","#","场景","结构化","b",".","np","方法"," ","hello","不过","参阅"],"title":"记录数组","title_tokens":["记录","数组"]},{"location":"numpy笔记/6.12.结构化数组.html#_6","text":"一文彻底搞懂numpy的结构化数组——structured array Numpy的结构化数组 结构化数组","text_tokens":["彻底","结构","一文","numpy","—"," ","数组","的","搞懂","structured","array","结构化"],"title":"参考","title_tokens":["参考"]},{"location":"numpy笔记/6.2.索引.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 ndarrays 可以使用标准 Python x[obj] 语法对其进行索引 ，其中 x 是数组， obj 是索引。有三种可用的索引：字段访问，基本切片，高级索引。哪一个发生取决于 obj 。 在 Python 中， x[(exp1，exp2，.，EXPN)] 等同于 x[exp1，exp2，.，EXPN] 。后者只是前者的语法糖。 # 创建一个一维数组 a = np . arange ( 100 ) # 创建一个二维数组 b = copy . deepcopy ( np . reshape ( a , ( 20 , 5 ))) # 创建一个三维数组 c = copy . deepcopy ( np . arange ( 90 ) . reshape (( 10 , 3 , 3 ))) 一维数组的索引 一维数组的索引和列表相同。假设 a1 是一维数组，那么有以下5种使用索引的情况： 可以指定一个 整数 i 作为索引下标，如 a1[i] 。 可以指定一个 切片 作为索引下标，如 a1[i:j] ，等价于 a1[slice(j,j)] 。 可以指定一个 整数list 对数组进行存取，如 a1[[i1,i2,i3]] 。此时会将列表中的每个整数作为下标 (i1/i2/i3) ，使用列表作为下标得到的数组为 np.array([a1[i1],a1[i2],a1[i3]]) ，它不和原始数组共享内存。 可以指定一个 整数数组 作为数组下标，如 a1[a2] 此时会得到一个形状和下标数组 a2 相同的新数组。新数组的每个元素都是下标数组中对应位置的值作为下标从原始数组中获得的值。新数组不和原始数组共享数据。 可以指定一个 布尔数组 作为数组下标，如a1[b]。此时将获得数组a1中与数组b中的True对应的元素。新数组不和原始数组共享数据。 # 指定一个整数 a [ 1 ] # OWNDATA : True ## 等价于 a [( 1 )] # OWNDATA : True # 指定切片 a [ 0 : 20 : 2 ] # 返回视图 a [ slice ( 0 , 20 , 2 )] # 返回视图 # 指定一个整数列表 a [[ 1 , 2 , 3 , 4 ]] # OWNDATA : True # 指定一个整数数组 ## index是一维数组 index = np . array ([ 0 , 1 , 2 , 3 , 4 ]) a [ index ] # OWNDATA : True ## index是二维数组 index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) a [ index ] # OWNDATA : True # 指定一个布尔数组 ## 布尔数组的ndim需要和原数组相同 bool_a = a > 50 bool_a = list ( bool_a ) 多维数组的索引 多维数组使用 元组 作为数组的下标，如 a[1,2] ，当然你也可以添加圆括号为 a[(1,2)] 。实际上，一维数组也是如此，只是一维数组只有第 0 轴。 下标元组 中每个元素和数组的每个轴对应。下标元组的第 0 个元素对应数组第 0 轴，第 1 个元素对应数组第 1 轴，第 2 个元素对应数组第 2 轴··· 多维数组的下标必须是一个长度和数组的维度ndim相等的元组。 如果下标元组的长度大于数组的维度ndim，则IndexError 如果下标元组的长度小于数组的维度ndim，则自动在元组的后面补 : ，使得下标元组的长度等于数组维度ndim。 如果下标对象不是元组，则Numpy会首先将其转换为元组。 有以下7种使用索引的情况： 整数元组 切片 整数元组搭配切片 整数list 整数数组 布尔数组 整数数组、切片、整数元组混搭 # 指定一个整数元组 b [( 1 , 2 )] # OWNDATA : Trues ## 等价于 b [ 1 , 2 ] # OWNDATA : Trues ## 元组的维度超过多维数组的维度:IndexError ''' b[(1,2,3)] ''' ## 元组的维度超少于维数组的维度 b [ 1 ] # 返回视图 等价于 b[1,:] # 切片 b [ 0 , 0 : 5 : 2 ] # 返回视图 b [ 0 , 0 :: 2 ] # 返回视图 b [ 0 , slice ( 0 , None , 2 )] # 返回视图 ## SyntaxError b[0,slice(0,,2)] b [ 0 : 10 : 2 , 0 : 5 : 2 ] # 返回视图 ## 第二列 b [:, 1 ] # 返回视图 b [ ... , 1 ] # 返回视图 ## IndexError: an index can only have a single ellipsis ('...') ''' b[...,...] IndexError ''' b [ ... ,:] # 返回视图 b [:,:] # 返回视图 # 整数数组 ## arrays used as indices must be of integer (or boolean) type index = np . array ([ 0 , 1 , 2 , 3 ]) b [ index ] # OWNDATA : True index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) b [ index ] # OWNDATA : True ## 如果下标整数数组的维度不一致，会进行广播 rows = np . array ([[ 0 , 1 , 2 ]]) columns = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 4 ]]) index = ( rows , columns ) b [ index ] array([[ 0, 6, 12], [ 3, 9, 14]]) 多维数组的下标是布尔数组或者下标元组中包含了布尔数组，则相当于将布尔数组通过 np.nonzero() 将布尔数组转换成一个整数数组的元组，然后使用整数数组进行下标运行。 np.nonzero(a) 返回数组 a 中，值非零的元素的 下标 。它返回值是一个长度为 a.ndim 的元组，元组的每个元素都是一个一维的整数数组，其值为非零元素的下标在对应轴上的值。如：第 0 个元素为a中的非零值元素在0轴的下标、第 1 个元素为a中的非零值元素在1轴的下标... np . nonzero ( bool_a ) (array([51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], dtype=int64),) 进阶说明 使用切片返回视图的原因： 当下标使用切片时，所取得的数据在数据存储区域中是等间隔分布的。因为只需要修改数组的ndim/shape/strides等属性以及指向数据存储区域的data指针就能够实现整数和切片下标的索引。所以新数组和原始数组能够共享数据存储区域。 当使用整数数组（整数元组，整数列表页转换成整数数组），布尔数组时，不能保证所取得的数据在数据存储区中是等间隔的，因此无法和原始数组共享数据，只能对数据进行复制。 通过整数元组获取的数组元素的类型为数组的dtype类型 。如果你想获取标准python类型，可以使用数组的item()方法。 索引的维度变换 索引的下标元组中： 如果下标元组都是切片，则索引结果的数组与原始数组的维度相同（轴的数量相等） 每多一个整数下标，则索引结果的数组就少一个维度（少一个轴） 如果所有的下标都是整数，则索引结果的维度为 0 如果下标元组中存在数组，则还需要考虑该下标数组广播后的维度 多维数组的下标必须是一个长度和数组的维度 ndim 相等的元组。但是如果下标中包含None，则可以突破这一限制。每多一个None，则索引结构维度升 1 。 当数组的下标元组的长度小于等于数组的维度ndim时，元组中出现的None等价于切片: 当数组的下标元组的长度大于数组的维度ndim时，元组中哪里出现None，索引结果就在哪里创建一个新轴，该轴长度为 1。 b [ 1 , 2 ] b [ 1 , 2 , None ] b [ 1 , 2 , np . newaxis ] array([7])","text_tokens":["numpy","共享","标","must","相同","copy","only","10","nonzero","v.1915","少于","实现","字","转换","使得","i2","发生","amd64","相当","indexerror","0","obj","超","single","79","转换成","indices","区中","50","20","零","无法","：","中","第二","指针","该","5","访问","[","bool","newaxis","进阶","后者","能够","存取","存储","等价","90","如果","值非","运行","70","3","括号","have","假设","通过","得到","形状","对应","msc","多维","an","那么","rows","和","第","等于","80","值","build","存在","以及","71","import","非","取得","糖","首先","list","个","整数","84","date","j","89","切片","·","60","内存","53","data","syntaxerror","新","取决于","实际上","can","取决","共享内存","作为","59","strides","b",".","ndim","当下","96","75","时","种","int64","51","93","原","修改","升","88","66","间隔","只","维","55","windows","需要","，","94","换成","说明","非零值","85","然后","为","as","实际","前者","其中","页","等","所","当于","第二列","所有","广播","结构","latest","62","如","后","想","有","...","12","67","获取","74","64","相当于","圆括号","但是","a1","维度","83","返回","73","a","大于","##","version","x","元素","在","54","77","91","二列","少","owndata","array","高级","进行","1.18","shape","、","属性","一个三维","原始"," ","相等","等同于","位置","搭配","轴","一个","每多","你","4","限制","类型","的","每个","变换","原因","9","只能","92","会","_","当","了","2","65","6","72","'",")","是","68","使用","基本","同于","数组","58","小于","下标",":","指定","deepcopy","一个二维","也","因为","还","哪里","7","or","从","dtype","可以",",","52","不是","type","@","(","columns","出现","将","获得","ellipsis","boolean",">","i3","trues","元组","补","指向","区域","考虑","后面","其值","则","61","57","exp1","（","突破","复制","超过","下","搭","标的","python","三维","c","i1","中是","np","返回值","只是","方法","exp2","true","二维","哪","87","arange","数据","与","所以","a2","都","82","95","arrays","一维","于","对象","列表","添加","当然","长度","78","99","86","三种","分布","/","2020.03","slice","轴上","expn","）","数量","语法","100","这一","i","结果","reshape","97","此时","69","used","integer","其","创建","14","视图","混","布尔","不能","标准","bit","ndarrays","不","]","56","be","它","如此","等同","item","index","=","必须","3.7","因此","一致","包含","情况","索引","就","对","或者","22","可用","。","76","自动","段","1","只有","63","保证","#","of","none","以下","81","新轴","98"],"title":"6.2.索引","title_tokens":[".","6.2","索引"]},{"location":"numpy笔记/6.2.索引.html#_1","text":"一维数组的索引和列表相同。假设 a1 是一维数组，那么有以下5种使用索引的情况： 可以指定一个 整数 i 作为索引下标，如 a1[i] 。 可以指定一个 切片 作为索引下标，如 a1[i:j] ，等价于 a1[slice(j,j)] 。 可以指定一个 整数list 对数组进行存取，如 a1[[i1,i2,i3]] 。此时会将列表中的每个整数作为下标 (i1/i2/i3) ，使用列表作为下标得到的数组为 np.array([a1[i1],a1[i2],a1[i3]]) ，它不和原始数组共享内存。 可以指定一个 整数数组 作为数组下标，如 a1[a2] 此时会得到一个形状和下标数组 a2 相同的新数组。新数组的每个元素都是下标数组中对应位置的值作为下标从原始数组中获得的值。新数组不和原始数组共享数据。 可以指定一个 布尔数组 作为数组下标，如a1[b]。此时将获得数组a1中与数组b中的True对应的元素。新数组不和原始数组共享数据。 # 指定一个整数 a [ 1 ] # OWNDATA : True ## 等价于 a [( 1 )] # OWNDATA : True # 指定切片 a [ 0 : 20 : 2 ] # 返回视图 a [ slice ( 0 , 20 , 2 )] # 返回视图 # 指定一个整数列表 a [[ 1 , 2 , 3 , 4 ]] # OWNDATA : True # 指定一个整数数组 ## index是一维数组 index = np . array ([ 0 , 1 , 2 , 3 , 4 ]) a [ index ] # OWNDATA : True ## index是二维数组 index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) a [ index ] # OWNDATA : True # 指定一个布尔数组 ## 布尔数组的ndim需要和原数组相同 bool_a = a > 50 bool_a = list ( bool_a )","text_tokens":["一个","种","4","共享","数据","的","与","每个","相同","a2","都","原","会","一维","_","于","需要","，","列表","i2","为","2","0","50","是",")","20","使用","：","中","数组","/","slice","下标","5",":","[","如","bool","指定","i","有","存取","此时","等价","从","可以","视图",",","3","假设","a1","布尔","得到","形状","对应","那么","(","和","不","]","值","将","它","获得","返回","a",">","i3","##","index","=","list","整数","元素","情况","索引","对","j","。","owndata","array","切片","内存","进行","新","1","共享内存","作为","#","b","i1",".","原始","np"," ","ndim","以下","true","位置","二维"],"title":"一维数组的索引","title_tokens":["的","一维","数组","索引"]},{"location":"numpy笔记/6.2.索引.html#_2","text":"多维数组使用 元组 作为数组的下标，如 a[1,2] ，当然你也可以添加圆括号为 a[(1,2)] 。实际上，一维数组也是如此，只是一维数组只有第 0 轴。 下标元组 中每个元素和数组的每个轴对应。下标元组的第 0 个元素对应数组第 0 轴，第 1 个元素对应数组第 1 轴，第 2 个元素对应数组第 2 轴··· 多维数组的下标必须是一个长度和数组的维度ndim相等的元组。 如果下标元组的长度大于数组的维度ndim，则IndexError 如果下标元组的长度小于数组的维度ndim，则自动在元组的后面补 : ，使得下标元组的长度等于数组维度ndim。 如果下标对象不是元组，则Numpy会首先将其转换为元组。 有以下7种使用索引的情况： 整数元组 切片 整数元组搭配切片 整数list 整数数组 布尔数组 整数数组、切片、整数元组混搭 # 指定一个整数元组 b [( 1 , 2 )] # OWNDATA : Trues ## 等价于 b [ 1 , 2 ] # OWNDATA : Trues ## 元组的维度超过多维数组的维度:IndexError ''' b[(1,2,3)] ''' ## 元组的维度超少于维数组的维度 b [ 1 ] # 返回视图 等价于 b[1,:] # 切片 b [ 0 , 0 : 5 : 2 ] # 返回视图 b [ 0 , 0 :: 2 ] # 返回视图 b [ 0 , slice ( 0 , None , 2 )] # 返回视图 ## SyntaxError b[0,slice(0,,2)] b [ 0 : 10 : 2 , 0 : 5 : 2 ] # 返回视图 ## 第二列 b [:, 1 ] # 返回视图 b [ ... , 1 ] # 返回视图 ## IndexError: an index can only have a single ellipsis ('...') ''' b[...,...] IndexError ''' b [ ... ,:] # 返回视图 b [:,:] # 返回视图 # 整数数组 ## arrays used as indices must be of integer (or boolean) type index = np . array ([ 0 , 1 , 2 , 3 ]) b [ index ] # OWNDATA : True index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) b [ index ] # OWNDATA : True ## 如果下标整数数组的维度不一致，会进行广播 rows = np . array ([[ 0 , 1 , 2 ]]) columns = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 4 ]]) index = ( rows , columns ) b [ index ] array([[ 0, 6, 12], [ 3, 9, 14]]) 多维数组的下标是布尔数组或者下标元组中包含了布尔数组，则相当于将布尔数组通过 np.nonzero() 将布尔数组转换成一个整数数组的元组，然后使用整数数组进行下标运行。 np.nonzero(a) 返回数组 a 中，值非零的元素的 下标 。它返回值是一个长度为 a.ndim 的元组，元组的每个元素都是一个一维的整数数组，其值为非零元素的下标在对应轴上的值。如：第 0 个元素为a中的非零值元素在0轴的下标、第 1 个元素为a中的非零值元素在1轴的下标... np . nonzero ( bool_a ) (array([51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], dtype=int64),)","text_tokens":["轴","一个","75","种","你","int64","numpy","87","51","4","的","每个","must","only","都","82","10","nonzero","95","93","9","少于","92","88","会","66","arrays","一维","_","维","于","55","转换","对象","使得","，","94","换成","非零值","85","了","然后","2","为","相当","indexerror","0","添加","超","single","as","65","79","6","当然","实际","长度","转换成","78","indices","72","'",")","是","68","使用","零","99","86","：","中","第二","数组","第二列","当于","58","slice","轴上","小于","下标","广播","5",":","62","[","如","bool","指定","也","有","97","7","等价","or","69","used","...","12","integer","67","90","如果","74","dtype","可以","其","值非","64","相当于","14","视图","运行",",","圆括号","括号","3","have","52","混","通过","不是","维度","type","布尔","对应","多维","an","(","rows","和","不","56","]","be","第","等于","80","columns","值","将","83","它","返回","ellipsis","boolean","73","a","如此","大于","71","70","非","##","首先","index","=","必须","list","个","整数","元素","一致","在","trues","元组","包含","补","索引","情况","84","54","77","后面","或者","其值","91","二列","则","89","。","owndata","array","切片","·","60","61","76","自动","53","57","syntaxerror","进行","、","实际上","can","超过","1","只有","搭","63","作为","59","#","of","b","none",".","np","返回值","只是"," ","ndim","以下","相等","81","true","98","搭配","96"],"title":"多维数组的索引","title_tokens":["索引","的","数组","多维"]},{"location":"numpy笔记/6.2.索引.html#_3","text":"使用切片返回视图的原因： 当下标使用切片时，所取得的数据在数据存储区域中是等间隔分布的。因为只需要修改数组的ndim/shape/strides等属性以及指向数据存储区域的data指针就能够实现整数和切片下标的索引。所以新数组和原始数组能够共享数据存储区域。 当使用整数数组（整数元组，整数列表页转换成整数数组），布尔数组时，不能保证所取得的数据在数据存储区中是等间隔的，因此无法和原始数组共享数据，只能对数据进行复制。 通过整数元组获取的数组元素的类型为数组的dtype类型 。如果你想获取标准python类型，可以使用数组的item()方法。","text_tokens":["时","你","共享","数据","类型","的","标","所以","修改","原因","只能","实现","间隔","只","当","需要","转换","，","列表","换成","为","转换成","区中","是",")","使用","页","：","无法","等","所","分布","数组","/","指针","）","想","因为","能够","存储","获取","如果","dtype","可以","视图","通过","布尔","不能","标准","(","和","返回","以及","取得","item","整数","因此","元素","在","元组","索引","就","指向","区域","对","。","切片","data","（","进行","shape","新","属性","复制","下","标的","保证","python","strides","中是","原始","方法"," ","ndim","当下"],"title":"进阶说明","title_tokens":["说明","进阶"]},{"location":"numpy笔记/6.2.索引.html#_4","text":"索引的下标元组中： 如果下标元组都是切片，则索引结果的数组与原始数组的维度相同（轴的数量相等） 每多一个整数下标，则索引结果的数组就少一个维度（少一个轴） 如果所有的下标都是整数，则索引结果的维度为 0 如果下标元组中存在数组，则还需要考虑该下标数组广播后的维度 多维数组的下标必须是一个长度和数组的维度 ndim 相等的元组。但是如果下标中包含None，则可以突破这一限制。每多一个None，则索引结构维度升 1 。 当数组的下标元组的长度小于等于数组的维度ndim时，元组中出现的None等价于切片: 当数组的下标元组的长度大于数组的维度ndim时，元组中哪里出现None，索引结果就在哪里创建一个新轴，该轴长度为 1。 b [ 1 , 2 ] b [ 1 , 2 , None ] b [ 1 , 2 , np . newaxis ] array([7])","text_tokens":["轴","一个","时","每多","限制","的","与","相同","都","升","当","于","需要","，","为","2","0","长度","是",")","：","中","数组","所有","小于","下标","）","该","广播","结构","数量",":","[","这一","后","newaxis","结果","还","哪里","等价","7","如果","可以","创建",",","但是","维度","多维","(","和","]","等于","出现","存在","大于","必须","整数","在","元组","包含","索引","就","考虑","则","少","。","array","切片","（","突破","1","none","b",".","原始","np"," ","ndim","相等","新轴"],"title":"索引的维度变换","title_tokens":["的","变换","维度","索引"]},{"location":"numpy笔记/6.3.内存布局.html","text":"import numpy as np import pprint import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 ndarray对象 NumPy提供了一个N维数组对象ndarray，它描述了同一类型的元素的集合。可以使用N个整数对元素进行索引。 ndarray中所有元素都是 同质的 ：每个元素占用相同大小的内存块，并且所有内存块的解释方式完全相同。数组中各元素的解释方式由一个的 data-type 对象（dtype）指定。 图中显示了用于描述数组中数据的三个基本对象之间的关系： ndarray本身 描述数组中单个固定大小元素的内存布局的data-type对象 访问数组的单个元素时返回的数组标量（Python对象） ndarray类的实例由一个 连续的 一维计算机内存块（由数组或其他对象拥有）和一个索引方案组合而成，该索引方案将N个整数分别映射到内存块中N个元素的位置。索引可以变化的范围被数组的shape限制。 ndarray看上去似乎可以是多维的，但在内存中，ndarray是一维储存的。有许多方案将N维数组以一维数组的形式储存在内存中。其中numpy有两种储存方式： 元素按行顺序储存（C语言风格） 或者按列顺序储存（Fortran语言风格） 因此，如果要对一个ndarray以行为单位进行操作，最好以C-type的方式创建ndarray；如果要对一个ndarray以列为单位进行操作，则用Fortran方式。 内存布局 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) pprint . pprint ( A ) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=int16) 属性（与数组内存布局有关） A的属性值 描述 A.dtype dtype('int16') 元素数据类型。A的每个元素是16bit大小的int型数据。 A.ndim 2 轴（维度）的个数。A有两个轴：0轴、1轴。 A.shape (3, 3) 各个轴的大小。0轴有3个元素，1轴有3个元素。 A.size 9 数组的大小，有多少个元素。 A.data <memory at 0x000001B17A238A68> 指向数组的数据的存储区。 A.itemsize 2 一个元素的长度，以字节为单位。16bit等于2字节。 A.nbytes 18 数组元素占据的总字节数。 A.base None 如果内存来自其他对象，则以此为基础对象。 A.flags 有关数组内存布局的信息。 A.strides (6, 2) 一个整数元组，每个元素保存着每个轴上相邻两个元素的地址差。 即当某个轴的下标增加1 时，数据存储区中的指针增加的字节数。 可以从不同的角度(即布局)观察该array： shape [ 1 ] ( = 3 ) ┌───────────┐ ┌ ┌───┬───┬───┐ ┐ │ │ 0 │ 1 │ 2 │ │ │ ├───┼───┼───┤ │ shape [ 0 ] │ │ 3 │ 4 │ 5 │ │ len ( Z ) ( = 3 ) │ ├───┼───┼───┤ │ ( = 3 ) │ │ 6 │ 7 │ 8 │ │ └ └───┴───┴───┘ ┘ 展开的item layout ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐ │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ └───┴───┴───┴───┴───┴───┴───┴───┴───┘ └───────────────────────────────────┘ A . size ( = 9 ) 内存布局(C顺序) strides [ 1 ] ( = 2 ) ┌─────────────────────┐ ┌ ┌──────────┬──────────┐ ┐ │ p + 00 : │ 00000000 │ 00000000 │ │ │ ├──────────┼──────────┤ │ │ p + 02 : │ 00000000 │ 00000001 │ │ strides [ 0 ] │ ├──────────┼──────────┤ │ ( = 2 x3 ) │ p + 04 │ 00000000 │ 00000010 │ │ │ ├──────────┼──────────┤ ┘ │ p + 06 │ 00000000 │ 00000011 │ │ ├──────────┼──────────┤ A . nbytes │ p + 08 : │ 00000000 │ 00000100 │ ( = 3 x3x2 ) │ ├──────────┼──────────┤ │ p + 10 : │ 00000000 │ 00000101 │ │ ├──────────┼──────────┤ │ p + 12 : │ 00000000 │ 00000110 │ │ ├──────────┼──────────┤ │ p + 14 : │ 00000000 │ 00000111 │ │ ├──────────┼──────────┤ │ p + 16 : │ 00000000 │ 00001000 │ └ └──────────┴──────────┘ └─────────────────────┘ A . itemsize A . dtype . itemsize ( = 2 ) 如果我们现在取一A的切片，结果是A的基本数组的一个视图： V = A[::2,::2] 这样的视图是由shape，dtype 和 strides 指定的，因为仅凭dtype和shape不能推断出strides: 如果我们现在取一A的切片，结果是A的基本数组的一个视图： V = A[::2,::2] 这样的视图是由shape，dtype 和 strides 指定的，因为仅凭dtype和shape不能推断出strides: Item layout shape [ 1 ] ( = 2 ) ┌───────────┐ ┌ ┌───┬───┬───┐ ┐ │ │ 0 │ │ 2 │ │ ┌───┬───┐ │ ├───┼───┼───┤ │ | 0 │ 2 │ shape [ 0 ] │ │ │ │ │ │ len ( A ) → ├───┼───┤ ( = 2 ) │ ├───┼───┼───┤ │ ( = 2 ) | 6 │ 8 │ │ │ 6 │ │ 8 │ │ └───┴───┘ └ └───┴───┴───┘ ┘ 展开的item layout ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┬───┐ │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ → │ 0 │ 2 │ 6 │ 8 │ └───┴───┴───┴───┴───┴───┴───┴───┴───┘ └───┴───┴───┴───┘ └─┬─┘ └─┬─┘ └─┬─┘ └─┬─┘ └───┬───┘ └───┬───┘ └───────────┬───────────┘ A.size (=4) 内存布局(C顺序，大端序) ┌ ┌──────────┬──────────┐ ┐ ┐ ┌─┤ p + 00 : │ 00000000 │ 00000000 │ │ │ │ └ ├──────────┼──────────┤ │ strides [ 1 ] │ ┌─┤ p + 02 : │ │ │ │ ( = 4 ) │ │ │ ┌ ├──────────┼──────────┤ ┘ │ │ └─┤ p + 04 │ 00000000 │ 00000010 │ │ │ └ ├──────────┼──────────┤ │ strides [ 0 ] │ p + 06 : │ │ │ │ ( = 12 ) │ ├──────────┼──────────┤ │ A . nbytes ─┤ p + 08 : │ │ │ │ ( = 8 ) │ ├──────────┼──────────┤ │ │ p + 10 : │ │ │ │ │ ┌ ├──────────┼──────────┤ ┘ │ ┌─┤ p + 12 : │ 00000000 │ 00000110 │ │ │ └ ├──────────┼──────────┤ └─┤ p + 14 : │ │ │ │ ┌ ├──────────┼──────────┤ └─┤ p + 16 : │ 00000000 │ 00001000 │ └ └──────────┴──────────┘ └─────────────────────┘ A . itemsize A . dtype . itemsize ( = 2 ) 可以直接修改 ndarray 对象的 strides 属性，改变 ndarray 的内存布局，但此时会修改原数组。 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) A . strides = ( 2 , 4 ) pprint . pprint ( A ) array([[0, 2, 4], [1, 3, 5], [2, 4, 6]], dtype=int16) 视图和副本 视图和副本是优化数值计算的重要概念。 在numpy中，可以用切片和 花式索引 （整数数组索引）来索引数据。切片将始终返回视图，而整数数组索引将返回一个副本。这种差异很重要，因为在切片情况下，修改视图会修改原数组，而在整数数组索引情况下则不是这样： Z = np . zeros ( 9 ) Z_view = Z [: 3 ] Z_view [ ... ] = 1 print ( Z ) [1. 1. 1. 0. 0. 0. 0. 0. 0.] Z = np . zeros ( 9 ) Z_copy = Z [[ 0 , 1 , 2 ]] Z_copy [ ... ] = 1 print ( Z ) [0. 0. 0. 0. 0. 0. 0. 0. 0.] 因此，如果你需要反复用到某个花式索引，最好保留它的副本（特别是如果计算它很复杂）。如果您不确定索引的结果是视图还是副本，则可以检查base的结果。如果是None，那么结果就是副本： Z = np . random . uniform ( 0 , 1 ,( 5 , 5 )) Z1 = Z [: 3 ,:] Z2 = Z [[ 0 , 1 , 2 ], :] print ( np . allclose ( Z1 , Z2 )) True print ( Z1 . base is Z ) True print ( Z2 . base is Z ) False print ( Z2 . base is None ) True 请注意，一些numpy函数在可能的情况下返回视图(例如， ravel )，而另一些函数总是返回副本(例如， flatten ): Z = np . zeros (( 5 , 5 )) print ( Z . ravel () . base is Z ) True print ( Z [:: 2 ,:: 2 ] . ravel () . base is Z ) False print ( Z . flatten () . base is Z ) False 可以通过 ndarray.view() 方法，从同一块内存区（储存着numpy数组的内存区）创建不同的dtype数组。即用不同的数值类型查看同一段内存中的二进制数据。 它们使用的是同一块内存。 实际上， ndarray.view() 方法是创建了一个视图。 A = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ],[ 6 , 7 , 8 ]]) A_view = A . view ( np . int32 ) # A_view 是视图 A_view . flags C_CONTIGUOUS : True F_CONTIGUOUS : False OWNDATA : False WRITEABLE : True ALIGNED : True WRITEBACKIFCOPY : False UPDATEIFCOPY : False 如果我们直接修改原始数组的 dtype ，会达到同样的效果， 但此时直接修改原始数组。 A . dtype = np . float32 Caution 通常应避免改变由切片、transposes、fortran排序等定义的数组的 dtype 的大小，可能会引发错误，如下： A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) try : A_view = A . view ( np . int32 ) except ValueError as e : print ( \"ValueError:\" , e ) ValueError : When changing to a larger dtype , its size must be a divisor of the total size in bytes of the last axis of the array .","text_tokens":["fortran","n","numpy","00000101","类","pprint","即用","must","相同","copy","上去","单位","10","同","差异","连续","flatten","许多","被","int","v.1915","即","计算","它们","its","view","信息","范围","而","amd64","0","at","x3","8","区中","e","nbytes","总是","以","：","中","00000110","列为","指针","该","5","访问","[","固定","两个","len","zeros","很","复杂","16","存储","00","来自","如果","花式","标量","定义","3","多少","00000100","通过","布局","多维","msc","那么","和","看上去","等于","值","提供","方案","build","16bit","效果","→","layout","还是","import","数值","个","整数","date","变化","切片","内存","单个","概念","基础","valueerror","data","实际上","实例","00000011","when","就是","strides","错误",".","推断","达到","ndim","changing","时","优化","按行","x3x2","角度","原","┌","仅凭","修改","04","divisor","维","增加","windows","用","我们","需要","一段","contiguous","，","分别","最好","用于","为","┼","总","as","现在","实际","反复","\"","print","writeable","-","其中","等","所有","└","+","allclose","00001000","操作","latest","显示","有","检查","00000001","...","12","64","看上","维度","映射","ravel","型","函数","组合而成","避免","┐","引发","返回","random","a","关系","version","但","元素","在","owndata","array","储存","两种","0x000001b17a238a68","aligned","08","进行","1.18","shape","这样","、","同样","属性","保存","p","字节","不同","18","着","语言","原始","轴有"," ","重要","位置","except","itemsize","轴","一个","你","4","int32","限制","类型","的","每个","集合","方式","字节数","┘","保留","9","会","由","_","地址","行为","以此","了","2","副本","caution","例如","bytes","占据","6","到","'",")","是","使用","00000111","00000000","false","基本","来","z2","数组","完全相同","下标",":","指定","算机","deepcopy","一些","因为","其他","06","v","顺序","请","本身","7","从","各个","推断出","dtype","大端","可以","描述",",","块","不是","type","@","(","to","将","c语言","用到","the","如下","同一",">","f","并且","┬","或","元组","larger","指向","您","另","则","┴","│","取一","这种","组合","（","直接","大端序","应","确定","差","下","python","c","np","方法","last","同质","true","风格","数据","arange","axis","与","区","try","都","要","in","├","一维","memory","之间","base","对象","查看","有关","特别","个数","始终","拥有","某个","长度","is","图中","完全","形式","块内存","排序","2020.03","轴上","观察","可能","）","┤","即当","；","uniform","三个","int16","相邻","结果","解释","reshape","此时","flags","各","float32","ndarray","创建","14","视图","按列","不能","占用","bit","total","不","]","writebackifcopy","<","be","进制","它","数据类型","通常","size","z1","|","下则","item","=","展开","3.7","似乎","因此","z","updateifcopy","情况","索引","对","─","transposes","或者","22","大小","。","02","二进制","改变","注意","1","00000010","#","of","节数","none","计算机"],"title":"6.3.内存布局","title_tokens":["内存","布局",".","6.3"]},{"location":"numpy笔记/6.3.内存布局.html#ndarray","text":"NumPy提供了一个N维数组对象ndarray，它描述了同一类型的元素的集合。可以使用N个整数对元素进行索引。 ndarray中所有元素都是 同质的 ：每个元素占用相同大小的内存块，并且所有内存块的解释方式完全相同。数组中各元素的解释方式由一个的 data-type 对象（dtype）指定。 图中显示了用于描述数组中数据的三个基本对象之间的关系： ndarray本身 描述数组中单个固定大小元素的内存布局的data-type对象 访问数组的单个元素时返回的数组标量（Python对象） ndarray类的实例由一个 连续的 一维计算机内存块（由数组或其他对象拥有）和一个索引方案组合而成，该索引方案将N个整数分别映射到内存块中N个元素的位置。索引可以变化的范围被数组的shape限制。 ndarray看上去似乎可以是多维的，但在内存中，ndarray是一维储存的。有许多方案将N维数组以一维数组的形式储存在内存中。其中numpy有两种储存方式： 元素按行顺序储存（C语言风格） 或者按列顺序储存（Fortran语言风格） 因此，如果要对一个ndarray以行为单位进行操作，最好以C-type的方式创建ndarray；如果要对一个ndarray以列为单位进行操作，则用Fortran方式。","text_tokens":["一个","n","时","fortran","numpy","数据","限制","类","类型","的","按行","每个","相同","上去","集合","都","方式","单位","要","连续","许多","被","由","一维","计算","维","之间","用","对象","，","行为","范围","了","分别","最好","用于","拥有","到","-","是","图中","完全","使用","形式","其中","以","：","中","基本","列为","数组","所有","完全相同","）","操作","该","访问","；","显示","三个","固定","指定","算机","有","解释","其他","顺序","本身","如果","各","ndarray","标量","dtype","可以","创建","描述","按列","看上","块","type","布局","映射","多维","占用","和","组合而成","看上去","提供","将","它","c语言","方案","返回","同一","关系","并且","但","个","整数","似乎","元素","或","在","因此","索引","对","或者","大小","则","变化","。","储存","内存","两种","组合","单个","data","（","进行","shape","实例","python","c","计算机","语言"," ","同质","位置","风格"],"title":"ndarray对象","title_tokens":["对象","ndarray"]},{"location":"numpy笔记/6.3.内存布局.html#_1","text":"A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) pprint . pprint ( A ) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=int16) 属性（与数组内存布局有关） A的属性值 描述 A.dtype dtype('int16') 元素数据类型。A的每个元素是16bit大小的int型数据。 A.ndim 2 轴（维度）的个数。A有两个轴：0轴、1轴。 A.shape (3, 3) 各个轴的大小。0轴有3个元素，1轴有3个元素。 A.size 9 数组的大小，有多少个元素。 A.data <memory at 0x000001B17A238A68> 指向数组的数据的存储区。 A.itemsize 2 一个元素的长度，以字节为单位。16bit等于2字节。 A.nbytes 18 数组元素占据的总字节数。 A.base None 如果内存来自其他对象，则以此为基础对象。 A.flags 有关数组内存布局的信息。 A.strides (6, 2) 一个整数元组，每个元素保存着每个轴上相邻两个元素的地址差。 即当某个轴的下标增加1 时，数据存储区中的指针增加的字节数。 可以从不同的角度(即布局)观察该array： shape [ 1 ] ( = 3 ) ┌───────────┐ ┌ ┌───┬───┬───┐ ┐ │ │ 0 │ 1 │ 2 │ │ │ ├───┼───┼───┤ │ shape [ 0 ] │ │ 3 │ 4 │ 5 │ │ len ( Z ) ( = 3 ) │ ├───┼───┼───┤ │ ( = 3 ) │ │ 6 │ 7 │ 8 │ │ └ └───┴───┴───┘ ┘ 展开的item layout ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐ │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ └───┴───┴───┴───┴───┴───┴───┴───┴───┘ └───────────────────────────────────┘ A . size ( = 9 ) 内存布局(C顺序) strides [ 1 ] ( = 2 ) ┌─────────────────────┐ ┌ ┌──────────┬──────────┐ ┐ │ p + 00 : │ 00000000 │ 00000000 │ │ │ ├──────────┼──────────┤ │ │ p + 02 : │ 00000000 │ 00000001 │ │ strides [ 0 ] │ ├──────────┼──────────┤ │ ( = 2 x3 ) │ p + 04 │ 00000000 │ 00000010 │ │ │ ├──────────┼──────────┤ ┘ │ p + 06 │ 00000000 │ 00000011 │ │ ├──────────┼──────────┤ A . nbytes │ p + 08 : │ 00000000 │ 00000100 │ ( = 3 x3x2 ) │ ├──────────┼──────────┤ │ p + 10 : │ 00000000 │ 00000101 │ │ ├──────────┼──────────┤ │ p + 12 : │ 00000000 │ 00000110 │ │ ├──────────┼──────────┤ │ p + 14 : │ 00000000 │ 00000111 │ │ ├──────────┼──────────┤ │ p + 16 : │ 00000000 │ 00001000 │ └ └──────────┴──────────┘ └─────────────────────┘ A . itemsize A . dtype . itemsize ( = 2 ) 如果我们现在取一A的切片，结果是A的基本数组的一个视图： V = A[::2,::2] 这样的视图是由shape，dtype 和 strides 指定的，因为仅凭dtype和shape不能推断出strides: 如果我们现在取一A的切片，结果是A的基本数组的一个视图： V = A[::2,::2] 这样的视图是由shape，dtype 和 strides 指定的，因为仅凭dtype和shape不能推断出strides: Item layout shape [ 1 ] ( = 2 ) ┌───────────┐ ┌ ┌───┬───┬───┐ ┐ │ │ 0 │ │ 2 │ │ ┌───┬───┐ │ ├───┼───┼───┤ │ | 0 │ 2 │ shape [ 0 ] │ │ │ │ │ │ len ( A ) → ├───┼───┤ ( = 2 ) │ ├───┼───┼───┤ │ ( = 2 ) | 6 │ 8 │ │ │ 6 │ │ 8 │ │ └───┴───┘ └ └───┴───┴───┘ ┘ 展开的item layout ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐ ┌───┬───┬───┬───┐ │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ → │ 0 │ 2 │ 6 │ 8 │ └───┴───┴───┴───┴───┴───┴───┴───┴───┘ └───┴───┴───┴───┘ └─┬─┘ └─┬─┘ └─┬─┘ └─┬─┘ └───┬───┘ └───┬───┘ └───────────┬───────────┘ A.size (=4) 内存布局(C顺序，大端序) ┌ ┌──────────┬──────────┐ ┐ ┐ ┌─┤ p + 00 : │ 00000000 │ 00000000 │ │ │ │ └ ├──────────┼──────────┤ │ strides [ 1 ] │ ┌─┤ p + 02 : │ │ │ │ ( = 4 ) │ │ │ ┌ ├──────────┼──────────┤ ┘ │ │ └─┤ p + 04 │ 00000000 │ 00000010 │ │ │ └ ├──────────┼──────────┤ │ strides [ 0 ] │ p + 06 : │ │ │ │ ( = 12 ) │ ├──────────┼──────────┤ │ A . nbytes ─┤ p + 08 : │ │ │ │ ( = 8 ) │ ├──────────┼──────────┤ │ │ p + 10 : │ │ │ │ │ ┌ ├──────────┼──────────┤ ┘ │ ┌─┤ p + 12 : │ 00000000 │ 00000110 │ │ │ └ ├──────────┼──────────┤ └─┤ p + 14 : │ │ │ │ ┌ ├──────────┼──────────┤ └─┤ p + 16 : │ 00000000 │ 00001000 │ └ └──────────┴──────────┘ └─────────────────────┘ A . itemsize A . dtype . itemsize ( = 2 ) 可以直接修改 ndarray 对象的 strides 属性，改变 ndarray 的内存布局，但此时会修改原数组。 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) A . strides = ( 2 , 4 ) pprint . pprint ( A ) array([[0, 2, 4], [1, 3, 5], [2, 4, 6]], dtype=int16)","text_tokens":["轴","一个","时","00000101","4","arange","数据","pprint","的","类型","与","每个","copy","区","x3x2","单位","字节数","┘","10","角度","原","┌","仅凭","修改","int","04","即","9","├","会","由","memory","增加","base","地址","我们","对象","，","信息","以此","2","有关","为","┼","0","at","总","个数","现在","占据","x3","某个","6","长度","8","区中","'","nbytes",")","是","以","00000000","00000111","：","基本","00000110","数组","└","指针","轴上","观察","+","下标","）","00001000","该","5","即当","┤",":","int16","[","相邻","两个","len","指定","deepcopy","有","因为","结果","16","其他","reshape","00000001","06","v","存储","顺序","00","7","此时","flags","从","12","来自","如果","各个","推断出","ndarray","dtype","大端","可以","14","视图",",","3","描述","多少","00000100","维度","布局","不能","型","(","和","]","<","等于","值","┐","数据类型","a","16bit","size",">","→","layout","|","item","┬","=","展开","但","个","整数","z","元素","元组","指向","─","大小","则","。","┴","array","切片","内存","│","02","0x000001b17a238a68","取一","基础","08","data","（","shape","直接","这样","大端序","、","属性","改变","差","1","保存","00000011","p","字节","不同","18","着","00000010","c","strides","节数","none",".","推断","np","轴有"," ","ndim","itemsize"],"title":"内存布局","title_tokens":["内存","布局"]},{"location":"numpy笔记/6.3.内存布局.html#_2","text":"视图和副本是优化数值计算的重要概念。 在numpy中，可以用切片和 花式索引 （整数数组索引）来索引数据。切片将始终返回视图，而整数数组索引将返回一个副本。这种差异很重要，因为在切片情况下，修改视图会修改原数组，而在整数数组索引情况下则不是这样： Z = np . zeros ( 9 ) Z_view = Z [: 3 ] Z_view [ ... ] = 1 print ( Z ) [1. 1. 1. 0. 0. 0. 0. 0. 0.] Z = np . zeros ( 9 ) Z_copy = Z [[ 0 , 1 , 2 ]] Z_copy [ ... ] = 1 print ( Z ) [0. 0. 0. 0. 0. 0. 0. 0. 0.] 因此，如果你需要反复用到某个花式索引，最好保留它的副本（特别是如果计算它很复杂）。如果您不确定索引的结果是视图还是副本，则可以检查base的结果。如果是None，那么结果就是副本： Z = np . random . uniform ( 0 , 1 ,( 5 , 5 )) Z1 = Z [: 3 ,:] Z2 = Z [[ 0 , 1 , 2 ], :] print ( np . allclose ( Z1 , Z2 )) True print ( Z1 . base is Z ) True print ( Z2 . base is Z ) False print ( Z2 . base is None ) True 请注意，一些numpy函数在可能的情况下返回视图(例如， ravel )，而另一些函数总是返回副本(例如， flatten ): Z = np . zeros (( 5 , 5 )) print ( Z . ravel () . base is Z ) True print ( Z [:: 2 ,:: 2 ] . ravel () . base is Z ) False print ( Z . flatten () . base is Z ) False 可以通过 ndarray.view() 方法，从同一块内存区（储存着numpy数组的内存区）创建不同的dtype数组。即用不同的数值类型查看同一段内存中的二进制数据。 它们使用的是同一块内存。 实际上， ndarray.view() 方法是创建了一个视图。 A = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ],[ 6 , 7 , 8 ]]) A_view = A . view ( np . int32 ) # A_view 是视图 A_view . flags C_CONTIGUOUS : True F_CONTIGUOUS : False OWNDATA : False WRITEABLE : True ALIGNED : True WRITEBACKIFCOPY : False UPDATEIFCOPY : False 如果我们直接修改原始数组的 dtype ，会达到同样的效果， 但此时直接修改原始数组。 A . dtype = np . float32 Caution 通常应避免改变由切片、transposes、fortran排序等定义的数组的 dtype 的大小，可能会引发错误，如下： A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) try : A_view = A . view ( np . int32 ) except ValueError as e : print ( \"ValueError:\" , e ) ValueError : When changing to a larger dtype , its size must be a divisor of the total size in bytes of the last axis of the array .","text_tokens":["一个","fortran","你","numpy","优化","4","int32","数据","arange","即用","的","类型","axis","must","copy","区","try","同","in","差异","flatten","原","修改","保留","9","会","由","计算","divisor","_","它们","its","base","一段","用","需要","contiguous","我们","查看","view","，","了","2","副本","而","最好","特别","caution","例如","0","bytes","始终","as","某个","6","实际","反复","\"","8","is","print","writeable","e","总是","是",")","使用","false","：","中","块内存","排序","等","来","z2","数组","可能","allclose","）","5","uniform",":","int16","[","zeros","很","复杂","一些","deepcopy","因为","结果","检查","reshape","请","此时","7","从","flags","...","花式","如果","float32","ndarray","dtype","可以","创建","定义","视图","3",",","通过","不是","ravel","(","那么","和","不","函数","]","writebackifcopy","to","total","be","避免","将","进制","它","引发","用到","返回","如下","the","random","通常","a","同一","size","效果","f","z1","还是","下则","数值","=","但","整数","因此","z","updateifcopy","在","larger","情况","索引","您","transposes","另","大小","则","。","owndata","array","切片","储存","内存","这种","概念","aligned","valueerror","（","二进制","直接","这样","应","同样","、","改变","实际上","确定","注意","下","1","when","就是","不同","着","#","c","of","none","错误",".","原始","np","方法","达到"," ","last","重要","changing","true","except"],"title":"视图和副本","title_tokens":["和","视图","副本"]},{"location":"numpy笔记/6.4.广播.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 广播规则 当使用ufunc函数对两个数组进行计算时，ufunc函数会对这两个数组的对应元素进行计算。这要求这两个数组的形状相同。如果这两个数组的形状不同，就通过广播broadcasting进行处理： 首先让所有输入数组都向其中维度最高的数组看齐。 看齐方式为：在shape属性的左侧插入数字1 最后输出数组的shape属性是输入数组的shape属性的各轴上的最大值 如果输入数组的某个轴的长度为 1，或者与输出数组的各对应轴的长度相同，该数组能正确广播。否则计算出错 当输入数组的某个轴的长度为 1时，沿着此轴运算时都用此轴上的第一组值。 广播规则示意图 The code to produce the figures is part of the AstroML book 与广播相关的函数 ny.broadcast_arrays() ：查看广播之后的数组 。 np.broadcast_to(array, shape, subok=False) ：将array广播为指定的shape，如果指定的shape不满足广播要求，则报错。 ndarray.repeat(repeats, axis=None) ：重复某个轴上的值。repeats为重复次数。axis指定被重复的轴，即沿着哪一轴重复。如果未指定，则将数组展平然后重复。返回的也是一个展平的数组 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = np . arange ( 5 ) c = b [:, None ] d = np . ones (( 5 , 3 )) a = [[ 0 1 ] b = [ 0 1 2 3 4 ] [ 2 3 ] [ 4 5 ] [ 6 7 ] [ 8 9 ]] c = [[ 0 ] d = [[ 1 . 1 . 1 .] [ 1 ] [ 1 . 1 . 1 .] [ 2 ] [ 1 . 1 . 1 .] [ 3 ] [ 1 . 1 . 1 .] [ 4 ]] [ 1 . 1 . 1 .]] np . broadcast_arrays ( d , c ) [array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]), array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])] np . broadcast_to ( b [:, None ], ( 5 , 2 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) a . repeat ( 3 , axis = 1 ) array([[0, 0, 0, 1, 1, 1], [2, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5, 5], [6, 6, 6, 7, 7, 7], [8, 8, 8, 9, 9, 9]])","text_tokens":["轴","一个","时","numpy","4","arange","规则","出错","的","axis","与","相同","broadcast","copy","方式","都","10","produce","报错","part","最高","看齐","被","v.1915","即","d","9","会","arrays","计算","_","当","第一","windows","用","查看","repeats","，","然后","为","2","amd64","相关","0","处理","哪一轴","as","输入","某个","6","长度","满足","8","is","展平",")","是","其中","使用","false","之后","：","此轴上","book","数组","所有","broadcasting","大值","2020.03","轴上","subok","广播","该","5","latest",":","最大值","[","各轴上","两个","指定","deepcopy","也","reshape","左侧","重复","7","如果","各","ndarray","64","运算","3","ufunc",",","输出","示意图","能","通过","维度","示意","@","插入","对应","形状","沿着","msc","否则","bit","(","函数","此轴","to","ny","不","]","值","将","the","返回","build","a","让","import","首先","version","=","3.7","最后","ones","元素","在","就","对","第一组","date","或者","22","则","。","数字","array","figures","正确","进行","要求","最大","1.18","shape","astroml","意图","属性","1","次数","code","不同","python","这","c","repeat","of","none","b",".","np","未指定"," ","向","一组"],"title":"6.4.广播","title_tokens":["6.4","广播","."]},{"location":"numpy笔记/6.4.广播.html#_1","text":"当使用ufunc函数对两个数组进行计算时，ufunc函数会对这两个数组的对应元素进行计算。这要求这两个数组的形状相同。如果这两个数组的形状不同，就通过广播broadcasting进行处理： 首先让所有输入数组都向其中维度最高的数组看齐。 看齐方式为：在shape属性的左侧插入数字1 最后输出数组的shape属性是输入数组的shape属性的各轴上的最大值 如果输入数组的某个轴的长度为 1，或者与输出数组的各对应轴的长度相同，该数组能正确广播。否则计算出错 当输入数组的某个轴的长度为 1时，沿着此轴运算时都用此轴上的第一组值。","text_tokens":["元素","某个","在","轴","时","长度","如果","各","就","对","第一组","出错","的","或者","与","运算","相同","是","ufunc","。","使用","其中","都","方式","数字","输出","：","能","通过","最高","维度","沿着","此轴上","插入","对应","数组","形状","所有","正确","broadcasting","看齐","函数","进行","要求","最大","大值","shape","此轴","属性","会","计算","广播","该","值","1","当","最大值","第一","用","不同","各轴上","这","，","让","两个","为","否则"," ","向","处理","一组","左侧","首先","输入","最后"],"title":"广播规则","title_tokens":["规则","广播"]},{"location":"numpy笔记/6.4.广播.html#_2","text":"The code to produce the figures is part of the AstroML book","text_tokens":["produce","part","figures","is"," ","the","book","code","to","astroml","of"],"title":"广播规则示意图","title_tokens":["广播","示意","规则","示意图","意图"]},{"location":"numpy笔记/6.4.广播.html#_3","text":"ny.broadcast_arrays() ：查看广播之后的数组 。 np.broadcast_to(array, shape, subok=False) ：将array广播为指定的shape，如果指定的shape不满足广播要求，则报错。 ndarray.repeat(repeats, axis=None) ：重复某个轴上的值。repeats为重复次数。axis指定被重复的轴，即沿着哪一轴重复。如果未指定，则将数组展平然后重复。返回的也是一个展平的数组 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = np . arange ( 5 ) c = b [:, None ] d = np . ones (( 5 , 3 )) a = [[ 0 1 ] b = [ 0 1 2 3 4 ] [ 2 3 ] [ 4 5 ] [ 6 7 ] [ 8 9 ]] c = [[ 0 ] d = [[ 1 . 1 . 1 .] [ 1 ] [ 1 . 1 . 1 .] [ 2 ] [ 1 . 1 . 1 .] [ 3 ] [ 1 . 1 . 1 .] [ 4 ]] [ 1 . 1 . 1 .]] np . broadcast_arrays ( d , c ) [array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]), array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])] np . broadcast_to ( b [:, None ], ( 5 , 2 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) a . repeat ( 3 , axis = 1 ) array([[0, 0, 0, 1, 1, 1], [2, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5, 5], [6, 6, 6, 7, 7, 7], [8, 8, 8, 9, 9, 9]])","text_tokens":["轴","一个","4","arange","的","axis","broadcast","copy","10","报错","被","即","d","9","arrays","_","查看","repeats","，","然后","为","2","0","哪一轴","某个","6","满足","8","展平",")","是","false","之后","：","数组","轴上","subok","广播","5",":","[","指定","deepcopy","也","reshape","重复","7","如果","ndarray","3",",","沿着","ny","(","to","不","]","值","将","返回","a","=","ones","则","。","array","要求","shape","1","次数","c","repeat","none","b",".","np","未指定"," "],"title":"与广播相关的函数","title_tokens":["广播","相关","的","函数","与"]},{"location":"numpy笔记/6.5.常量.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 NumPy定义了几个常量（都是IEEE 754 浮点表示）： （正）无穷大 # 使用`inf`是因为`Inf`、`Infinity`、`PINF`和`infty`是`inf`的别名。 np . inf np . Infinity np . PINF np . Inf np . infty inf 负无穷大 np . NINF -inf 非数字 NaN # `NaN`和`NAN`是`nan`的等价定义。请使用`nan而不是`NAN`。 np . nan np . NAN np . NaN nan 负零 np . NZERO -0.0 正零 np . PZERO 0.0 自然对数的基础，纳皮尔的常数 np . e 2.718281828459045 欧拉常数 γ = 0.5772156649015328606065120900824024310421... 参考 np . euler_gamma 0.5772156649015329 None的便捷别名 给数组增加轴，或索引数组时使用。 np . newaxis 圆周率 np . pi 3.141592653589793","text_tokens":["轴","infinity","时","负零","numpy","的","都","10","v.1915","ninf","正零","别名","_","增加","windows","，","了","nzero","而","amd64","0.5772156649015328606065120900824024310421","as","纳皮尔","几个","给","e","-",")","是","使用","浮点","：","0.5772156649015329","是因为","数组","2020.03","）","ieee","latest",":","pzero","0.0","inf","nan","欧拉","newaxis","因为","常量","请","等价","...","64","定义","3","不是","@","msc","bit","(","无穷大","和","build","754","import","负","非","version","=","gamma","3.7","便捷","或","pinf","对数","索引","2.718281828459045","date","正","22","。","infty","数字","常数","无穷","圆周","基础","（","自然对数","`","1.18","3.141592653589793","圆周率","、","1","euler","自然","python","#","γ","none",".","np"," ","参考","pi","表示"],"title":"6.5.常量","title_tokens":["6.5","常量","."]},{"location":"numpy笔记/6.6.打印数组.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 数组打印的规则 当打印ndarray时，numpy按照Python的嵌套list的格式打印输出，但是按照以下顺序打印： 最底层的axis按照从左到右的顺序输出 次底层的axis按照从上到下的顺序输出 其他层的axis也是按照从上到下的顺序输出，但是每个slice中间间隔一条空行 如： 一维的ndarray按行打印；二维的ndarray按照矩阵打印；三维的ndarray按照矩阵的list打印 如果ndarray太大，那么numpy默认跳过中间部分的数据而只是输出四个角落的数据。 要想任何时候都打印全部数据，可以在print(array)之前设置选项 np . set_printoptions ( threshold = None ) 这样后续的打印ndarray就不会省略中间数据。 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array([ 0, 1, 2, ..., 197, 198, 199])","text_tokens":["时","时候","嵌套","numpy","数据","规则","arange","的","axis","按行","每个","全部","都","10","要","不会","默认","printoptions","v.1915","省略","197","间隔","一维","_","当","windows","，","2","打印","amd64","而","0","as","print","set",")","是","：","跳过","层","从左到右","数组","2020.03","slice","200","5","；","latest",":","从上到下","[","四个","threshold","如","想","也","其他","顺序","...","如果","中间","ndarray","64","可以","任何","3",",","输出","但是","格式","@","按照","msc","bit","(","那么","太大","]","矩阵","之前","build","空行","import","部分","list","version","3.7","=","选项","在","就","角落","date","后续","22","底层","。","array","设置","次","198","一条","1.18","这样","最底层","199","1","python","打印输出","三维","none",".","np","只是"," ","以下","上到","二维"],"title":"6.6.打印数组","title_tokens":["打印","数组",".","6.6"]},{"location":"numpy笔记/6.6.打印数组.html#_1","text":"当打印ndarray时，numpy按照Python的嵌套list的格式打印输出，但是按照以下顺序打印： 最底层的axis按照从左到右的顺序输出 次底层的axis按照从上到下的顺序输出 其他层的axis也是按照从上到下的顺序输出，但是每个slice中间间隔一条空行 如： 一维的ndarray按行打印；二维的ndarray按照矩阵打印；三维的ndarray按照矩阵的list打印 如果ndarray太大，那么numpy默认跳过中间部分的数据而只是输出四个角落的数据。 要想任何时候都打印全部数据，可以在print(array)之前设置选项 np . set_printoptions ( threshold = None ) 这样后续的打印ndarray就不会省略中间数据。 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array([ 0, 1, 2, ..., 197, 198, 199])","text_tokens":["时","时候","嵌套","numpy","数据","arange","的","axis","按行","每个","全部","都","要","不会","默认","printoptions","省略","197","间隔","一维","_","当","，","2","打印","而","0","print","set","是",")","：","跳过","层","从左到右","slice","200","5","；","从上到下","[","四个","threshold","如","想","也","其他","顺序","...","如果","中间","ndarray","可以","任何",",","输出","但是","格式","按照","那么","(","太大","]","矩阵","之前","空行","=","部分","list","选项","在","就","角落","后续","底层","。","array","设置","次","198","一条","这样","最底层","199","1","python","打印输出","三维","none",".","np","只是"," ","以下","上到","二维"],"title":"数组打印的规则","title_tokens":["规则","的","数组","打印"]},{"location":"numpy笔记/6.7.添加和删除.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 添加和删除数组元素 方法 描述 delete (arr, obj[, axis]) 沿指定轴删除指定的元素，返回未删除的数组 insert (arr, obj, values[, axis]) 沿指定轴在指定索引之前插入值 append (arr, values[, axis]) 将值附加到数组的末尾 trim_zeros s(filt[, trim]) 修剪一维数组或序列中的前导、尾随的零 unique (ar[, return_index, return_inverse, …]) 返回没有重复元素的数组 # append a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . append ( a , [[ 1 , 2 ],[ 3 , 4 ]], axis = 0 ) array([[0, 1], [2, 3], [1, 2], [3, 4]]) # insert a = np . arange ( 4 ) . reshape (( 2 , 2 )) # obj 是索引 np . insert ( a , obj = 1 , values = [ 10 , 11 ], axis = 0 ) array([[ 0, 1], [10, 11], [ 2, 3]]) # delete 删除指定数据，返回未删除的数据 a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . delete ( a , 1 , axis = 0 ) array([[0, 1]]) # 默认返回一维数组 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = None ) array([1, 2, 3]) # 设置axis参数 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = 0 ) array([[1, 2], [2, 3]]) # 同时返回unique数组元素在原数组中的索引index a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = True , return_inverse = False , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 2], dtype=int64)) # 同时返回原数组元素在unique数组中的索引index # 可用于重建原数组 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = True , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 0, 1], dtype=int64)) # 同时返回 计数 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = True , axis = 0 ) (array([[1, 2], [2, 3]]), array([2, 1], dtype=int64)) a = np . array ([ 0 , 0 , 1 , 2 , 3 , 0 , 0 ]) # 删除一维数组开头和结尾的0元素 # trim='f' 从前面裁剪 # trim='b' 从后面裁剪 # 默认为 trim='fb' np . trim_zeros ( a , trim = 'fb' ) array([1, 2, 3])","text_tokens":["轴","int64","numpy","4","arange","数据","axis","的","10","同时","原","默认","结尾","v.1915","一维","计数","_","沿","windows","，","附加","2","为","amd64","用于","0","添加","obj","没有","as","末尾","到","'","filt","前面",")","是","零","false","中","counts","数组","2020.03","latest",":","[","values","指定","zeros","reshape","重复","从","unique","inverse","dtype","删除","64","insert","前导","未","3","描述",",","可","@","插入","参数","msc","修剪","bit","(","和","]","值","之前","开头","返回","build","a","fb","trim","s","f","尾随","import","11","index","version","=","3.7","元素","或","在","索引","date","将值","后面","22","序列","array","裁剪","设置","append","…","arr","1.18","、","delete","重建","1","python","#","ar","none","b",".","np","方法"," ","true","return"],"title":"6.7.添加和删除","title_tokens":[".","6.7","删除","添加","和"]},{"location":"numpy笔记/6.7.添加和删除.html#_1","text":"方法 描述 delete (arr, obj[, axis]) 沿指定轴删除指定的元素，返回未删除的数组 insert (arr, obj, values[, axis]) 沿指定轴在指定索引之前插入值 append (arr, values[, axis]) 将值附加到数组的末尾 trim_zeros s(filt[, trim]) 修剪一维数组或序列中的前导、尾随的零 unique (ar[, return_index, return_inverse, …]) 返回没有重复元素的数组 # append a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . append ( a , [[ 1 , 2 ],[ 3 , 4 ]], axis = 0 ) array([[0, 1], [2, 3], [1, 2], [3, 4]]) # insert a = np . arange ( 4 ) . reshape (( 2 , 2 )) # obj 是索引 np . insert ( a , obj = 1 , values = [ 10 , 11 ], axis = 0 ) array([[ 0, 1], [10, 11], [ 2, 3]]) # delete 删除指定数据，返回未删除的数据 a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . delete ( a , 1 , axis = 0 ) array([[0, 1]]) # 默认返回一维数组 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = None ) array([1, 2, 3]) # 设置axis参数 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = 0 ) array([[1, 2], [2, 3]]) # 同时返回unique数组元素在原数组中的索引index a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = True , return_inverse = False , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 2], dtype=int64)) # 同时返回原数组元素在unique数组中的索引index # 可用于重建原数组 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = True , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 0, 1], dtype=int64)) # 同时返回 计数 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = True , axis = 0 ) (array([[1, 2], [2, 3]]), array([2, 1], dtype=int64)) a = np . array ([ 0 , 0 , 1 , 2 , 3 , 0 , 0 ]) # 删除一维数组开头和结尾的0元素 # trim='f' 从前面裁剪 # trim='b' 从后面裁剪 # 默认为 trim='fb' np . trim_zeros ( a , trim = 'fb' ) array([1, 2, 3])","text_tokens":["轴","int64","4","arange","数据","axis","的","10","同时","原","默认","结尾","一维","计数","_","沿","，","附加","2","为","用于","0","obj","没有","末尾","到","'","filt","前面",")","是","零","false","中","counts","数组","[","values","指定","zeros","reshape","重复","从","unique","inverse","dtype","删除","insert","前导","未",",","描述","3","可","插入","参数","修剪","(","和","]","值","之前","开头","返回","a","fb","trim","s","f","尾随","11","index","=","元素","或","在","索引","将值","后面","序列","array","裁剪","设置","append","…","arr","、","delete","重建","1","#","ar","none","b",".","np","方法"," ","true","return"],"title":"添加和删除数组元素","title_tokens":["元素","数组","删除","添加","和"]},{"location":"numpy笔记/6.8.形状操纵.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 形状操作( shape ) .shape .reshape() .resize() reshape resize 区别： reshape不会修改原数据,返回视图 resize修改原数据，返回None # 创建示例数据 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # 会直接修改原始数组 a . shape = ( 5 , 10 ) a . flags # 可以在某个维度设置其长度为 -1，此时该维度的长度会被自动计算 a . shape = ( 25 , - 1 ) # 不会直接修改原始数组 a . reshape ( 5 , 10 ) # 可以在某个维度设置其长度为 -1，此时该维度的长度会被自动计算 a . reshape ( 5 , - 1 ) # 会直接修改原始数组 a . resize (( 25 , 2 )) 形状操作( ndim ) .flatten() ：多维数组转为一维数组 .reval() ：多维数组转为一维数组 .squeeze() ：将大小等于1的轴删除 .swapaxes(a, axis1, axis2)) ：交换指定的两个轴axis1/axis2。它获得是原数组的视图。 .transpose(a, axes=None) ：重置轴序。如果 axes=None ，则默认重置为逆序的轴序，如原来的 shape=(1,2,3) ，逆序之后为 (3,2,1） 如果 axes!=None ，则要给出重置后的轴序。它获得的是原数组的视图。 .atleast_1d(*arys) ：将输入转换为至少一维的数组 .atleast_2d(*arys) ：将输入转换为至少二维的数组 .atleast_3d(*arys) ：将输入转换为至少三维的数组 .expand_dims() ：在指定位置插入大小为1的新轴 .moveaxis(a, source, destination) ：将a中的source轴移动到位置destination，source、destination可以是int of list，一次性移动多个轴 # 多维数组转为一维数组 a . flatten () # 返回副本 a . ravel () # 一般返回视图 ## flatten ravel 区别 ## ravel()：如果没有必要，不会产生源数据的副本 ## flatten()：返回源数据的副本 b = np . arange ( 10 ) # 创建示例数据 b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # 对维数为1的维度降维,返回副本 b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array([[0], [1], [2], [3], [4], [5]]) b . squeeze ( 1 ) array([ 0, 1, 2, ..., 17, 18, 19]) # 返回数组的视图，其中axis1和axis2互换。 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # 视图 array([[ 0, 2, 4, ..., 14, 16, 18], [ 1, 3, 5, ..., 15, 17, 19]]) # 返回轴转置的数组视图。 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array ([[[ 0 , 20 , 40 ], [ 10 , 30 , 50 ]], [[ 1 , 21 , 41 ], [ 11 , 31 , 51 ]], [[ 2 , 22 , 42 ], [ 12 , 32 , 52 ]], ..., [[ 7 , 27 , 47 ], [ 17 , 37 , 57 ]], [[ 8 , 28 , 48 ], [ 18 , 38 , 58 ]], [[ 9 , 29 , 49 ], [ 19 , 39 , 59 ]]]) # atleast_nd np . atleast_1d ( 1 ) array([1]) np . atleast_2d ([ 1 , 2 , 3 , 4 ]) array([[1, 2, 3, 4]]) np . atleast_3d ([[ 1 , 2 ],[ 3 , 4 ]]) array ([[[ 1 ], [ 2 ]], [[ 3 ], [ 4 ]]]) a = np . arange ( 4 ) . reshape ( 2 , 2 ) np . expand_dims ( a , 1 ) . shape (2, 1, 2) x = np . zeros (( 3 , 4 , 5 )) print ( np . moveaxis ( x , 0 , - 1 ) . shape ) print ( np . moveaxis ( x , - 1 , 0 ) . shape ) (4, 5, 3) (5, 3, 4) \"以下代码的效果一样\" x = np . zeros (( 3 , 4 , 5 )) np . transpose ( x ) . shape np . swapaxes ( x , 0 , - 1 ) . shape np . moveaxis ( x , [ 0 , 2 ], [ - 1 , - 2 ]) . shape np . moveaxis ( x , [ 0 , 1 , 2 ], [ - 1 , - 2 , - 3 ]) . shape 数组拼接 .concatenate((a1, a2, ...), axis=0) ：连接多个数组。其中 (a1,a2,...) 为数组的序列，给出了待连接的数组，它们沿着 axis 指定的已存在的轴连接。所有的这些数组的形状，除了 axis 轴之外都相同。 .vstack(tup) ：沿0轴拼接（垂直拼接），增加行。 .hstack(tup) ：沿1轴拼接（水平拼接），增加列。 .dstack(tup) ： numpy.concatenate((a1, a2, ...), axis=3) 。沿着3轴堆叠数组。 .column_stack(tup) ：类似于 hstack ，但是如果被拼接的数组是一维的，则将其形状修改为二维的$(N,1)$。 .c_ ： .c_ 对象的 [] 方法也可以用于按列连接数组。但是如果被拼接的数组是一维的，则将其形状修改为二维的$(N,1)$。沿列方向拼接，增加列。 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # 横向拼接、拼接 1 轴（第二个轴，即列） np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array([[0, 1, 0, 1], [2, 3, 2, 3], [4, 5, 4, 5], [6, 7, 6, 7], [8, 9, 8, 9]]) # column_stack hstack np.c_区别 a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) np . hstack (( a1 , a1 )) array([0, 1, 2, ..., 2, 3, 4]) np . c_ [ a1 , a1 ] array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) 数组拆分 1. .split(ary, indices_or_sections, axis=0) ：用于沿着指定的轴拆分数组ary。indices_or_sections指定了拆分点： 如果为整数N，则表示平均拆分成N份。如果不能平均拆分，则报错 如果为序列，则该序列指定了划分区间（无需指定最开始的0起点和终点）。如 [1,3] 指定了区间： [0,1],[1,3],[3:] 2. .array_split(ary, indices_or_sections, axis=0) ：作用与 .split() 类似。唯一的区别在于：当indices_or_sections为整数，且无法平均拆分时，并不报错，而是尽可能的维持平均拆分。 3. .dsplit(ary, indices_or_sections) ：沿第3轴将数组拆分为多个子数组。 4. .hsplit(ary, indices_or_sections) ：水平（按列）将一个数组拆分为多个子数组。 5. .vsplit(ary, indices_or_sections) ：垂直（行）将数组拆分为多个子数组。 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]), array([[25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [array([[ 0], [ 5], [10], ..., [35], [40], [45]]), array([[ 1, 2], [ 6, 7], [11, 12], ..., [36, 37], [41, 42], [46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])] np . array_split ( a , 2 , axis = 1 ) [array([[ 0, 1, 2], [ 5, 6, 7], [10, 11, 12], ..., [35, 36, 37], [40, 41, 42], [45, 46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])]","text_tokens":["n","numpy","sections","点","相同","copy","10","不会","flatten","代码","区别","被","int","v.1915","计算","它们","dstack","转换","resize","amd64","21","0","$","atleast","8","indices","2d","50","20","水平","沿第","无法","：","中","第二","39","column","唯一","该","5","起点","行","作用","[","27","两个","zeros","16","如果","3","33","沿着","形状","多维","msc","和","等于","而是","build","存在","hstack","转置","效果","import","transpose","list","整数","date","30","60","46","新","59","b",".","ndim","终点","*","这些","时","列","51","axis2","axis1","13","原","默认","修改","在于","横向","增加","29","windows","，","分成","为","用于","沿列","一般","as","\"","print","-","其中","互换","之后","40","43","所有","expand","操作","latest","一样","如","后","35","无需","...","12","15","必要","64","source","dims","但是","28","a1","维度","stack","ravel","返回","a","reval","并","37","##","version","x","在","owndata","array","45","1.18","shape","、","18","产生","原始"," ","25","位置","moveaxis","表示","轴","一个","34","4","的","拆","报错","原来","9","移动","方向","会","_","当","垂直","尽可能","划分","一次性","堆叠","且","了","2","副本","26","没有","6","子","到","降维",")","是","false","concatenate","squeeze","vsplit","数组","58","第二个","最",":","31","48","tup","指定","转为","deepcopy","也","dsplit","7","or","可以",",","52","二个","@","split","(","将","获得","即列","arys","36","42","连接","f","17","类似","nd","轴序","则","57","（","直接","多个","python","三维","c","32","对维数","np","方法","destination","true","平均","二维","逆序","数据","arange","axis","与","区间","a2","都","要","尽可","axes","源","一维","44","于","沿","份","之外","重置","对象","拼接","order","待","输入","某个","长度","除了","交换","47","/","19","2020.03","3d","可能","）","至少","hsplit","一次","24","41","reshape","此时","flags","ndarray","删除","vstack","其","创建","14","视图","已","38","按列","给出","插入","不能","swapaxes","bit","不","]","分为","它","1d","11","=","3.7","22","大小","。","序列","设置","ary","自动","拆分","23","1","#","of","none","示例","49","以下","开始","!","维持"],"title":"6.8.形状操纵","title_tokens":["操纵","6.8","形状","."]},{"location":"numpy笔记/6.8.形状操纵.html#shape","text":".shape .reshape() .resize() reshape resize 区别： reshape不会修改原数据,返回视图 resize修改原数据，返回None # 创建示例数据 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # 会直接修改原始数组 a . shape = ( 5 , 10 ) a . flags # 可以在某个维度设置其长度为 -1，此时该维度的长度会被自动计算 a . shape = ( 25 , - 1 ) # 不会直接修改原始数组 a . reshape ( 5 , 10 ) # 可以在某个维度设置其长度为 -1，此时该维度的长度会被自动计算 a . reshape ( 5 , - 1 ) # 会直接修改原始数组 a . resize (( 25 , 2 ))","text_tokens":["某个","在","长度","数据","arange","可以","50","其","创建","-","视图",")",",","copy","的","10","：","设置","维度","不会","自动","原","数组","修改","区别","被","(","shape","直接","会","该","5","计算","1","返回","a","#","，","resize","none","deepcopy",".","为","示例","np","原始","2"," ","reshape","25","此时","=","flags"],"title":"形状操作(shape)","title_tokens":["操作","形状","(",")","shape"]},{"location":"numpy笔记/6.8.形状操纵.html#ndim","text":".flatten() ：多维数组转为一维数组 .reval() ：多维数组转为一维数组 .squeeze() ：将大小等于1的轴删除 .swapaxes(a, axis1, axis2)) ：交换指定的两个轴axis1/axis2。它获得是原数组的视图。 .transpose(a, axes=None) ：重置轴序。如果 axes=None ，则默认重置为逆序的轴序，如原来的 shape=(1,2,3) ，逆序之后为 (3,2,1） 如果 axes!=None ，则要给出重置后的轴序。它获得的是原数组的视图。 .atleast_1d(*arys) ：将输入转换为至少一维的数组 .atleast_2d(*arys) ：将输入转换为至少二维的数组 .atleast_3d(*arys) ：将输入转换为至少三维的数组 .expand_dims() ：在指定位置插入大小为1的新轴 .moveaxis(a, source, destination) ：将a中的source轴移动到位置destination，source、destination可以是int of list，一次性移动多个轴 # 多维数组转为一维数组 a . flatten () # 返回副本 a . ravel () # 一般返回视图 ## flatten ravel 区别 ## ravel()：如果没有必要，不会产生源数据的副本 ## flatten()：返回源数据的副本 b = np . arange ( 10 ) # 创建示例数据 b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # 对维数为1的维度降维,返回副本 b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array([[0], [1], [2], [3], [4], [5]]) b . squeeze ( 1 ) array([ 0, 1, 2, ..., 17, 18, 19]) # 返回数组的视图，其中axis1和axis2互换。 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # 视图 array([[ 0, 2, 4, ..., 14, 16, 18], [ 1, 3, 5, ..., 15, 17, 19]]) # 返回轴转置的数组视图。 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array ([[[ 0 , 20 , 40 ], [ 10 , 30 , 50 ]], [[ 1 , 21 , 41 ], [ 11 , 31 , 51 ]], [[ 2 , 22 , 42 ], [ 12 , 32 , 52 ]], ..., [[ 7 , 27 , 47 ], [ 17 , 37 , 57 ]], [[ 8 , 28 , 48 ], [ 18 , 38 , 58 ]], [[ 9 , 29 , 49 ], [ 19 , 39 , 59 ]]]) # atleast_nd np . atleast_1d ( 1 ) array([1]) np . atleast_2d ([ 1 , 2 , 3 , 4 ]) array([[1, 2, 3, 4]]) np . atleast_3d ([[ 1 , 2 ],[ 3 , 4 ]]) array ([[[ 1 ], [ 2 ]], [[ 3 ], [ 4 ]]]) a = np . arange ( 4 ) . reshape ( 2 , 2 ) np . expand_dims ( a , 1 ) . shape (2, 1, 2) x = np . zeros (( 3 , 4 , 5 )) print ( np . moveaxis ( x , 0 , - 1 ) . shape ) print ( np . moveaxis ( x , - 1 , 0 ) . shape ) (4, 5, 3) (5, 3, 4) \"以下代码的效果一样\" x = np . zeros (( 3 , 4 , 5 )) np . transpose ( x ) . shape np . swapaxes ( x , 0 , - 1 ) . shape np . moveaxis ( x , [ 0 , 2 ], [ - 1 , - 2 ]) . shape np . moveaxis ( x , [ 0 , 1 , 2 ], [ - 1 , - 2 , - 3 ]) . shape","text_tokens":["轴","逆序","51","4","数据","arange","的","copy","axis2","10","要","axis1","axes","不会","flatten","原","默认","代码","区别","int","原来","9","移动","源","一维","_","29","重置","转换","，","一次性","order","为","2","副本","一般","21","0","没有","atleast","输入","6","\"","8","到","print","2d","50","降维","-",")","是","20","其中","互换","false","之后","：","中","40","39","交换","squeeze","数组","47","/","58","expand","19","3d","）","5","至少",":","[","31","一次","27","一样","41","48","如","后","指定","转为","两个","zeros","deepcopy","16","reshape","7","flags","...","12","15","如果","必要","ndarray","删除","可以","创建","source","视图","14",",","3","38","52","dims","给出","28","维度","插入","ravel","多维","swapaxes","(","和","]","等于","将","它","获得","返回","arys","a","42","reval","转置","1d","37","效果","f","17","11","##","=","transpose","list","x","在","nd","轴序","30","22","大小","则","。","owndata","array","60","57","shape","新","、","1","18","多个","59","#","三维","二维","32","of","none","b","对维数",".","产生","示例","np"," ","49","以下","destination","true","*","位置","!","moveaxis"],"title":"形状操作(ndim)","title_tokens":["操作","ndim","形状","(",")"]},{"location":"numpy笔记/6.8.形状操纵.html#_1","text":".concatenate((a1, a2, ...), axis=0) ：连接多个数组。其中 (a1,a2,...) 为数组的序列，给出了待连接的数组，它们沿着 axis 指定的已存在的轴连接。所有的这些数组的形状，除了 axis 轴之外都相同。 .vstack(tup) ：沿0轴拼接（垂直拼接），增加行。 .hstack(tup) ：沿1轴拼接（水平拼接），增加列。 .dstack(tup) ： numpy.concatenate((a1, a2, ...), axis=3) 。沿着3轴堆叠数组。 .column_stack(tup) ：类似于 hstack ，但是如果被拼接的数组是一维的，则将其形状修改为二维的$(N,1)$。 .c_ ： .c_ 对象的 [] 方法也可以用于按列连接数组。但是如果被拼接的数组是一维的，则将其形状修改为二维的$(N,1)$。沿列方向拼接，增加列。 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # 横向拼接、拼接 1 轴（第二个轴，即列） np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array([[0, 1, 0, 1], [2, 3, 2, 3], [4, 5, 4, 5], [6, 7, 6, 7], [8, 9, 8, 9]]) # column_stack hstack np.c_区别 a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) np . hstack (( a1 , a1 )) array([0, 1, 2, ..., 2, 3, 4]) np . c_ [ a1 , a1 ] array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])","text_tokens":["轴","n","列","numpy","4","arange","axis","的","相同","copy","a2","都","10","修改","区别","被","9","方向","一维","横向","_","它们","沿","增加","dstack","于","之外","垂直","对象","，","拼接","堆叠","了","为","2","用于","沿列","$","0","待","6","除了","8",")","是","其中","水平","：","第二","column","concatenate","数组","所有","第二个","）","5","行","[","tup","指定","deepcopy","也","reshape","7","...","如果","vstack","其","可以","已",",","3","按列","但是","二个","给出","a1","stack","沿着","形状","(","]","将","即列","存在","a","hstack","连接","=","类似","则","。","序列","array","（","、","1","多个","#","c","b",".","np","方法"," ","这些","二维"],"title":"数组拼接","title_tokens":["拼接","数组"]},{"location":"numpy笔记/6.8.形状操纵.html#_2","text":"1. .split(ary, indices_or_sections, axis=0) ：用于沿着指定的轴拆分数组ary。indices_or_sections指定了拆分点： 如果为整数N，则表示平均拆分成N份。如果不能平均拆分，则报错 如果为序列，则该序列指定了划分区间（无需指定最开始的0起点和终点）。如 [1,3] 指定了区间： [0,1],[1,3],[3:] 2. .array_split(ary, indices_or_sections, axis=0) ：作用与 .split() 类似。唯一的区别在于：当indices_or_sections为整数，且无法平均拆分时，并不报错，而是尽可能的维持平均拆分。 3. .dsplit(ary, indices_or_sections) ：沿第3轴将数组拆分为多个子数组。 4. .hsplit(ary, indices_or_sections) ：水平（按列）将一个数组拆分为多个子数组。 5. .vsplit(ary, indices_or_sections) ：垂直（行）将数组拆分为多个子数组。 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]), array([[25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [array([[ 0], [ 5], [10], ..., [35], [40], [45]]), array([[ 1, 2], [ 6, 7], [11, 12], ..., [36, 37], [41, 42], [46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])] np . array_split ( a , 2 , axis = 1 ) [array([[ 0, 1, 2], [ 5, 6, 7], [10, 11, 12], ..., [35, 36, 37], [40, 41, 42], [45, 46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])]","text_tokens":["轴","一个","n","时","34","4","arange","sections","axis","的","与","点","拆","copy","区间","10","报错","尽可","13","区别","9","在于","44","_","当","份","29","垂直","尽可能","划分","，","分成","且","了","为","2","用于","21","0","26","6","子","8","indices","50",")","20","沿第","水平","无法","：","40","39","vsplit","数组","43","47","19","唯一","可能","）","最","该","起点","5","行",":","作用","hsplit","[","27","31","24","41","48","如","指定","deepcopy","16","dsplit","reshape","35","无需","or","7","...","12","15","如果","14",",","3","按列","38","28","33","沿着","split","不能","(","和","不","]","分为","将","而是","a","36","42","并","37","17","11","=","整数","类似","30","22","则","。","序列","array","46","ary","45","（","拆分","23","1","18","多个","#","32",".","np"," ","终点","49","25","开始","平均","维持","表示"],"title":"数组拆分","title_tokens":["拆分","数组"]},{"location":"numpy笔记/6.9.ufunc函数.html","text":"import numpy as np np . set_printoptions ( threshold = 40 ) Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 四则运算 a = np . arange ( 1 , 6 ) # 表达式形式 a + a a - a a * a a / a # ufunc函数形式 np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) np . true_divide ( a , a ) array([1., 1., 1., 1., 1.]) 比较运算 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # 表达式形式 a == b a != b a < b a <= b a > b a >= b # ufunc函数形式 np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array([[False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]]) 逻辑运算 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # 与 np . logical_and ( a , b ) # 或 np . logical_or ( a , b ) # 非 np . logical_not ( a , b ) # 异或 np . logical_xor ( a , b ) # 任意一个元素 np . any ( a ) # 全部元素 np . all ( a ) False 位运算 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # 按位与 np . bitwise_and ( a , b ) # 按位或 np . bitwise_or ( a , b ) # 按位取反 np . bitwise_not ( a ) # 按位异或 np . bitwise_xor ( a , b ) array([[10, 10, 14, 14, 10, 10, 22, 22, 26, 26], [30, 30, 26, 26, 22, 22, 10, 10, 14, 14]], dtype=int32) 自定义 ufunc 函数 可以通过 frompyfunc() 将计算单个元素的函数转换成ufunc函数。调用格式为如下： numpy . frompyfunc ( func , nin , nout ) # func：计算单个元素的函数 # nin：func的输入参数的个数 The number of input # nout：func返回值的个数 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array([6, 8, 10, 12, 14], dtype=object) 也可以通过 vectorize() 函数来实现 frompyfunc() 的功能。 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) 。 # func：计算单个元素的函数 # otypes：可以是一个表示结果数组元素类型的字符串，也可以是一个类型列表。如果使用类型列表，可以描述多个返回数组的元素类型 # doc：函数的描述字符串。若未给定，则使用func.__doc__ # excluded：指定func中哪些参数未被向量化。你可以指定一个字符串和整数的集合，其中字符串代表关键字参数，整数代表位置参数。 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"每一个元素加上一个指定的数\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) 每一个元素加上一个指定的数 array([1, 2, 3, 4, 5]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num 作为一个list，而不是向量化成一个个元素 array([11, 13, 15, 17, 19]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) (array([1., 2., 3., 4., 5.]), array([1, 2, 3, 4, 5])) ufunc 对象的方法 ufunc函数对象本身还有一些方法。 这些方法只对于两个输入、一个输出的ufunc函数函数有效。对于其他的ufunc函数对象调用这些方法时，会抛出 ValueError 异常。 ufunc.reduce() ufunc.reduce 方法：类似于Python的 reduce 函数，它==沿着== axis 参数指定的轴，对数组进行操作。经过一次reduce，结果数组的维度降低一维。 假设 <op> 是一个ufunc函数， ufunc.reduce 用法如下： < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # 沿着 列方向 array([ 6, 22, 38, 54, 70]) np . add . reduce ( a , axis = 0 ) # 沿着 行方向 array([40, 45, 50, 55]) 相当于将 运算符插入到沿着axis轴的所有元素之间： a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array([9, 25, 41, 57, 73], dtype=object) ufunc.accumulate() ufunc.accumulate 方法：它类似于reduce()的计算过程，但是它会保存所有的中间计算结果，从而使得返回数组的形状和输入数组的形状相同： a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38], [12, 25, 39, 54], [16, 33, 51, 70]], dtype=int32) ufunc.outer() ufunc.outer 方法：相当于将 运算符对输入数组A和输入数组B的每一对元素对(a,b)起作用。设A的shape=(4,5)，B的shape为(4,)，则结果数组的shape=(4,5,4) 一维数组和一维数组的outer操作为二维数组 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]) 多维数组的outer拆分成各自的一维操作 a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ]], [[ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ], [ 7 , 8 , 9 , 10 ]]]) 数学函数 下面是一元的数学函数： abs/fabs ：计算整数、浮点数或者复数的绝对值。对于非复数值，可以使用更快的fabs sqrt ：计算平方根，相当于$a^{0.5}$ square ：计算平方，相当于$a^2$ exp ：计算指数$e^x$ log/log10/log2/log1p ：分别为$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign ：计算$sign(a)$ ceil ：计算各元素的ceiling值：大于等于该值的最小整数 floor ：计算个元素的floor值：小于等于该值的最大整数 rint ：将各元素四舍五入到最接近的整数，保留 dtype modf ：将数组的小数和整数部分以两个独立数组的形式返回 cos/cosh/sin/sinh/tan/tanh ：普通和双曲型三角函数 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :反三角函数 isnan ：返回一个布尔数组，该数组指示那些是 NaN isfinite/isinf ：返回一个布尔数组，该数组指示哪些是有限的/无限数","text_tokens":["一个个","numpy","相同","全部","10","doc","三角","被","int","v.1915","实现","下面","计算","转换","使得","multiply","各自","表达式","而","amd64","比较","相当","$","0","转换成","对于","8","数","outer","50","e","set","20","cos","以","：","中","经过","39","关键字","达式","计算结果","该","5","行","作用","更快","[","reduce","27","nan","浮点数","两个","数学","accumulate","16","一元","如果","for","调用","70","定义","3","假设","通过","方根","33","有效","沿着","形状","多维","msc","和","等于","值","&","sign","build","arcsinh","逻辑运算","反","import","非","数值","部分","list","个","整数","any","date","30","加上","单个","arccos","valueerror","op","log2","那些","非复","作为","b","not",".","*","这些","sinh","number","时","列","51","它会","绝对值","13","降低","任意","log1p","tanh","只","起","55","windows","vectorize","，","分成","换成","为","分别","as","按位","\"","print","log10","-","nout","其中","abs","浮点","40","逻辑","当于","所有","指示","arcsosh","+","操作","关键","latest","exp","fun2","12","指数","15","字符","64","相当于","运算","量化","但是","维度","参数","my","型","函数","自定","给定","返回","73","a","双曲","大于","算符","num","version","x","元素","54","def","cosh","array","frompyfunc","}","45","过程","进行","平方","1.18","shape","、","保存","哪些","18","取反","arctan"," ","25","位置","表示","myufunc","轴","一个","自定义","你","平方根","4","int32","类型","的","tan","拆","add","集合","printoptions","保留","9","arcsin","方向","会","_","2","26","6","fabs","到","'","__",")","是","使用","绝对","false","less","来","数组","{","otypes","floor","小于","字符串","最","用法",":","四则运算","指定","一些","也","普通","square","其他","object","本身","还有","or","7","divide","中间","dtype","output","可以",",","描述","log","bitwise","不是","格式","@","(","功能","将","the","如下","fun",">",".__","~","17","抛出","或","类似","and","该值","subtract","则","y","四则","有限","57","多个","func","python","all","np","返回值","方法","向","异常","四舍五入","true","二维","独立","设","arange","axis","与","in","modf","个个","一维","之间","xor","于","对象","列表","小数","复数","无限","rint","个数","excluded","输入","代表","接近","input","arctanh","float","形式","位","最小","每","/","19","2020.03","nin","threshold","greater","一次","41","表达","i","结果","reshape","化成","isinf","各","14","未","ufunc","38","输出","equal","布尔","插入","点数","0.5","bit","]","<","logical","ceiling","一对","它","异或","isnan","|","11","isfinite","=","3.7","z","ceil","对","sin","或者","22","。","^","最大","三角函数","1","运算符","sqrt","#","of","none","向量","从而","若","return","!"],"title":"6.9.ufunc函数","title_tokens":["ufunc","6.9","函数","."]},{"location":"numpy笔记/6.9.ufunc函数.html#_1","text":"a = np . arange ( 1 , 6 ) # 表达式形式 a + a a - a a * a a / a # ufunc函数形式 np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) np . true_divide ( a , a ) array([1., 1., 1., 1., 1.])","text_tokens":["6","arange","-","subtract",")",",","ufunc","形式","add","array","/","(","函数","]","+","达式","1","_","[","a","#","multiply","表达",".","表达式","np"," ","true","*","=","divide"],"title":"四则运算","title_tokens":["四则运算","运算","四则"]},{"location":"numpy笔记/6.9.ufunc函数.html#_2","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # 表达式形式 a == b a != b a < b a <= b a > b a >= b # ufunc函数形式 np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array([[False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]])","text_tokens":["arange","30",")",",","20","形式","ufunc","array","10","false","equal","less","(","函数","]","<","达式","_","[","greater","a","#","b","not","表达",".","2","表达式","np",">"," ","reshape","=","!"],"title":"比较运算","title_tokens":["比较","运算"]},{"location":"numpy笔记/6.9.ufunc函数.html#_3","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # 与 np . logical_and ( a , b ) # 或 np . logical_or ( a , b ) # 非 np . logical_not ( a , b ) # 异或 np . logical_xor ( a , b ) # 任意一个元素 np . any ( a ) # 全部元素 np . all ( a ) False","text_tokens":["或","元素","一个","any","and","arange","30","与",")",",","20","全部","10","false","(","任意","logical","_","or","xor","a","#","异或","all","b","not",".","2","np"," ","reshape","非","="],"title":"逻辑运算","title_tokens":["逻辑运算","运算","逻辑"]},{"location":"numpy笔记/6.9.ufunc函数.html#_4","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # 按位与 np . bitwise_and ( a , b ) # 按位或 np . bitwise_or ( a , b ) # 按位取反 np . bitwise_not ( a ) # 按位异或 np . bitwise_xor ( a , b ) array([[10, 10, 14, 14, 10, 10, 22, 22, 26, 26], [30, 30, 26, 26, 22, 22, 10, 10, 14, 14]], dtype=int32)","text_tokens":["或","dtype","and","arange","int32","30","22","与","14",")",",","20","array","bitwise","10","^","(","]","_","&","or","xor","[","a","#","取反","异或","b","not",".","2","np"," ","reshape","|","~","26","=","按位"],"title":"位运算","title_tokens":["运算","位"]},{"location":"numpy笔记/6.9.ufunc函数.html#ufunc","text":"可以通过 frompyfunc() 将计算单个元素的函数转换成ufunc函数。调用格式为如下： numpy . frompyfunc ( func , nin , nout ) # func：计算单个元素的函数 # nin：func的输入参数的个数 The number of input # nout：func返回值的个数 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array([6, 8, 10, 12, 14], dtype=object) 也可以通过 vectorize() 函数来实现 frompyfunc() 的功能。 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) 。 # func：计算单个元素的函数 # otypes：可以是一个表示结果数组元素类型的字符串，也可以是一个类型列表。如果使用类型列表，可以描述多个返回数组的元素类型 # doc：函数的描述字符串。若未给定，则使用func.__doc__ # excluded：指定func中哪些参数未被向量化。你可以指定一个字符串和整数的集合，其中字符串代表关键字参数，整数代表位置参数。 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"每一个元素加上一个指定的数\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) 每一个元素加上一个指定的数 array([1, 2, 3, 4, 5]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num 作为一个list，而不是向量化成一个个元素 array([11, 13, 15, 17, 19]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) (array([1., 2., 3., 4., 5.]), array([1, 2, 3, 4, 5]))","text_tokens":["一个个","number","一个","你","numpy","4","arange","类型","的","add","集合","10","doc","in","13","个个","被","int","实现","计算","_","转换","vectorize","，","列表","换成","为","2","而","个数","excluded","输入","6","转换成","代表","\"","8","数","print","input","'","__",")","nout","是","其中","使用","float","：","中","来","数组","关键字","每","19","otypes","+","字符串","5","关键",":","nin","[","指定","i","也","结果","object","化成","12","15","如果","字符","output","dtype","可以","for","调用","14","未","量化",",","ufunc","描述","3","通过","不是","格式","参数","my","(","函数","和","]","功能","给定","将","the","返回","如下","a",".__","17","11","num","=","list","x","整数","z","元素","位置","def","则","y","。","array","加上","frompyfunc","单个","1","哪些","多个","func","作为","#","表示","of","b","none","向量",".","np","返回值"," ","向","若","return","myufunc"],"title":"自定义 ufunc 函数","title_tokens":["自定","自定义"," ","函数","定义","ufunc"]},{"location":"numpy笔记/6.9.ufunc函数.html#ufunc_1","text":"ufunc函数对象本身还有一些方法。 这些方法只对于两个输入、一个输出的ufunc函数函数有效。对于其他的ufunc函数对象调用这些方法时，会抛出 ValueError 异常。","text_tokens":["对于","一个","时","调用","的","ufunc","。","输出","有效","这些","valueerror","函数","、","会","只","对象","，","抛出","两个","一些","方法","异常"," ","其他","本身","还有","输入"],"title":"ufunc 对象的方法","title_tokens":["方法"," ","的","对象","ufunc"]},{"location":"numpy笔记/6.9.ufunc函数.html#ufuncreduce","text":"ufunc.reduce 方法：类似于Python的 reduce 函数，它==沿着== axis 参数指定的轴，对数组进行操作。经过一次reduce，结果数组的维度降低一维。 假设 <op> 是一个ufunc函数， ufunc.reduce 用法如下： < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # 沿着 列方向 array([ 6, 22, 38, 54, 70]) np . add . reduce ( a , axis = 0 ) # 沿着 行方向 array([40, 45, 50, 55]) 相当于将 运算符插入到沿着axis轴的所有元素之间： a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array([9, 25, 41, 57, 73], dtype=object)","text_tokens":["轴","一个","列","4","arange","的","axis","add","10","13","降低","9","方向","一维","之间","于","55","，","2","相当","0","6","8","到","print","50","是",")","20","：","经过","40","数组","当于","所有","19","+","操作","5","用法","行",":","[","reduce","一次","41","指定","fun2","结果","16","reshape","object","7","12","15","dtype","70","14","相当于","运算",",","ufunc","3","38","假设","维度","沿着","参数","插入","函数","(","]","<","将","它","如下","fun","73","a",">","17","11","算符","=","z","元素","类似","对","54","22","def","。","array","frompyfunc","45","57","进行","op","1","18","运算符","python","#","none","b",".","np","方法"," ","25","return"],"title":"ufunc.reduce()","title_tokens":[".","reduce","(",")","ufunc"]},{"location":"numpy笔记/6.9.ufunc函数.html#ufuncaccumulate","text":"ufunc.accumulate 方法：它类似于reduce()的计算过程，但是它会保存所有的中间计算结果，从而使得返回数组的形状和输入数组的形状相同： a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38], [12, 25, 39, 54], [16, 33, 51, 70]], dtype=int32)","text_tokens":["12","6","类似","15","8","中间","51","4","print","54","arange","dtype","int32","的","axis","14","22",")","相同","ufunc","20",",","它会","但是","3","10","add","：","array","13","33","39","过程","数组","形状","所有","19","(","和","38","9","]","计算结果","计算","5","1","于","它","保存","7","返回","[","reduce","18","27","使得","a","，",".","2","np","方法","accumulate"," ","结果","reshape","0","16","25","17","70","11","从而","=","输入"],"title":"ufunc.accumulate()","title_tokens":[".","accumulate","(",")","ufunc"]},{"location":"numpy笔记/6.9.ufunc函数.html#ufuncouter","text":"ufunc.outer 方法：相当于将 运算符对输入数组A和输入数组B的每一对元素对(a,b)起作用。设A的shape=(4,5)，B的shape为(4,)，则结果数组的shape=(4,5,4) 一维数组和一维数组的outer操作为二维数组 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]) 多维数组的outer拆分成各自的一维操作 a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ]], [[ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ], [ 7 , 8 , 9 , 10 ]]])","text_tokens":["元素","6","8","对","4","设","arange","outer","的","相当于","运算",")",",","ufunc","。","则","add","array","3","拆","10","：","当于","数组","每","多维","(","和","9","shape","]","操作","一维","5","一对","起","1","将","作用","7","[","运算符","a","各自","，","分成","b",".","为","2","np","方法","相当"," ","结果","reshape","算符","=","二维","输入"],"title":"ufunc.outer()","title_tokens":[".","outer","(",")","ufunc"]},{"location":"numpy笔记/6.9.ufunc函数.html#_5","text":"下面是一元的数学函数： abs/fabs ：计算整数、浮点数或者复数的绝对值。对于非复数值，可以使用更快的fabs sqrt ：计算平方根，相当于$a^{0.5}$ square ：计算平方，相当于$a^2$ exp ：计算指数$e^x$ log/log10/log2/log1p ：分别为$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign ：计算$sign(a)$ ceil ：计算各元素的ceiling值：大于等于该值的最小整数 floor ：计算个元素的floor值：小于等于该值的最大整数 rint ：将各元素四舍五入到最接近的整数，保留 dtype modf ：将数组的小数和整数部分以两个独立数组的形式返回 cos/cosh/sin/sinh/tan/tanh ：普通和双曲型三角函数 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :反三角函数 isnan ：返回一个布尔数组，该数组指示那些是 NaN isfinite/isinf ：返回一个布尔数组，该数组指示哪些是有限的/无限数","text_tokens":["sinh","一个","平方根","的","tan","10","绝对值","modf","三角","保留","arcsin","下面","log1p","tanh","计算","_","，","小数","2","分别","为","相当","$","复数","无限","rint","fabs","对于","接近","数","到","log10","arctanh","e","是",")","形式","使用","绝对","cos","以","abs","：","浮点","最小","当于","数组","/","指示","{","floor","小于","arcsosh","+","最","该",":","更快","exp","nan","浮点数","两个","普通","数学","square","isinf","一元","指数","各","dtype","可以","相当于",",","log","方根","布尔","点数","0.5","型","函数","(","和","ceiling","等于","值","将","sign","返回","a","arcsinh","双曲","isnan","大于","反","isfinite","数值","部分","个","x","整数","ceil","元素","sin","或者","该值","。","cosh","}","arccos","有限","^","最大","平方","三角函数","log2","、","那些","1","非复","哪些","sqrt","arctan"," ","四舍五入","独立"],"title":"数学函数","title_tokens":["函数","数学"]},{"location":"pandas笔记/7.1.Series.html","text":"import pandas as pd from pandas import Series Series是能够保存任何类型的数据的一维数组。 Series类似numpy的一维ndarray，但是和ndarray又不同，ndarray的所有元素的类型或结构必须相同 1 ，而Series能保存不同类型、结构的数据；另外Series的元素带有索引。Series像一个有序字典，因为它是索引值到数据值的一个映射。它可以用在许多原本需要字典参数的函数中。 可以通过以下方式创建Series数据结构： 字典 一维NumPy数组 单个标量：数值标量、字符串 list、tuple（可以是多层嵌套的list、tuple） Series类 class pandas.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False) 参数： data ： dict 、 array-like 、 list 、 scalar 。如果是序列或数组，则必须是一维的 如果是字典，则字典的键指定了 label 。如果同时使用了 index ，则以 index 为准。 如果是标量，则结果为：该标量扩充为 index 长度相同的列表。 index ：一个 array-like 或者一个 Index 对象。它指定了 label 。其值要求 hashable ，但不要求惟一，长度与 data 一致。如果未提供，则使用 RangeIndex (0, 1, 2, ..., n) 。 name ： str ， Series 的名字。 dtype ：指定数据类型。如果为 None ，则数据类型被自动推断 copy ：一个布尔值。如果为 True ，则拷贝输入数据 data 还可以通过类方法创建 Series ： Series.from_array(arr, index=None, name=None, dtype=None, copy=False, fastpath=False) 但 from_array 类方法会在未来的版本中被移除。 从 dict 来创建 如果只传入一个字典，则结果Series中的索引就是原字典的键： sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } # dict的key是无序的，但series的index是有序的 Series ( sdata ) Ohio 35000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 也可以指定原字典的key的排列顺序： 注意 如果传入dict和并指定index，index需要和dict的键匹配，若index不在dict的key中，对应的series值则为NaN。 sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } states = [ 'California' , 'Ohio' , 'Oregon' , 'Texas' ] Series ( sdata , index = states ) California NaN Ohio 35000.0 Oregon 16000.0 Texas 71000.0 dtype: float64 从NumPy数组来创建 数组必须是一维的： import numpy as np a = np . array ([ 1 , 2 , 3 ]) Series ( a ) 0 1 1 2 2 3 dtype: int32 从标量创建 如果提供索引，将重复标量值以匹配索引的长度。 Series ( 5 , index = [ 0 , 1 , 2 , 3 ]) 0 5 1 5 2 5 3 5 dtype: int64 实际上numpy可以定义储存不同类型数据的结构数组。 ↩","text_tokens":["一个","n","int64","嵌套","numpy","int32","数据","类","类型","的","label","与","相同","未来","copy","排列","方式","同时","16000.0","原","许多","被","值则","会","一维","只","惟一","_","tuple","71000.0","用","需要","对象","，","为准","列表","pd","了","为","而","pandas","2","0","fastpath","scalar","sdata","as","输入","长度","hashable","实际","from","匹配","float64","'","-","是",")","使用","以","false","：","中","texas","来","数组","所有","拷贝","另外","{","oregon","）","字符串","该","5","71000","结构","；",":","35000","ohio","[","nan","35000.0","str","若","指定","utah","也","因为","结果","能够","还","class","顺序","无序","多层","重复","16000","从","值以","字典","...","如果","版本","字符","ndarray","标量","dtype","可以","states","任何","创建","定义","未","↩",",","3","但是","扩充","能","通过","布尔","映射","参数","对应","函数","(","和","不","]","值到","数据结构","值","提供","将","它","数据类型","a","并","键","有序","import","带有","数值","index","=","必须","list","但","元素","或","在","类似","一致","索引","dict","5000","像","或者","其值","key","则","。","序列","array","储存","california","单个","自动","}","arr","名字","data","（","要求","传入","、","like","实际上","又","rangeindex","注意","1","保存","就是","不同","#","name","none","原本",".","推断","np","方法"," ","以下","series","移除","true","布尔值"],"title":"7.1.Series","title_tokens":["7.1","series","."]},{"location":"pandas笔记/7.1.Series.html#series","text":"class pandas.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False) 参数： data ： dict 、 array-like 、 list 、 scalar 。如果是序列或数组，则必须是一维的 如果是字典，则字典的键指定了 label 。如果同时使用了 index ，则以 index 为准。 如果是标量，则结果为：该标量扩充为 index 长度相同的列表。 index ：一个 array-like 或者一个 Index 对象。它指定了 label 。其值要求 hashable ，但不要求惟一，长度与 data 一致。如果未提供，则使用 RangeIndex (0, 1, 2, ..., n) 。 name ： str ， Series 的名字。 dtype ：指定数据类型。如果为 None ，则数据类型被自动推断 copy ：一个布尔值。如果为 True ，则拷贝输入数据 data 还可以通过类方法创建 Series ： Series.from_array(arr, index=None, name=None, dtype=None, copy=False, fastpath=False) 但 from_array 类方法会在未来的版本中被移除。","text_tokens":["一个","n","数据","类","类型","的","label","与","相同","未来","copy","同时","被","会","一维","惟一","_","对象","，","为准","列表","了","为","2","pandas","0","fastpath","scalar","输入","长度","hashable","from","-",")","是","使用","以","false","：","中","数组","拷贝","该","str","指定","结果","还","class","...","字典","如果","版本","标量","dtype","可以","创建","未",",","扩充","通过","布尔","参数","(","不","提供","它","数据类型","键","index","=","必须","但","list","或","一致","在","dict","或者","其值","则","。","序列","array","自动","arr","名字","data","要求","、","like","rangeindex","1","name","none",".","推断","方法"," ","series","移除","true","布尔值"],"title":"Series类","title_tokens":["类","series"]},{"location":"pandas笔记/7.1.Series.html#dict","text":"如果只传入一个字典，则结果Series中的索引就是原字典的键： sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } # dict的key是无序的，但series的index是有序的 Series ( sdata ) Ohio 35000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 也可以指定原字典的key的排列顺序： 注意 如果传入dict和并指定index，index需要和dict的键匹配，若index不在dict的key中，对应的series值则为NaN。 sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } states = [ 'California' , 'Ohio' , 'Oregon' , 'Texas' ] Series ( sdata , index = states ) California NaN Ohio 35000.0 Oregon 16000.0 Texas 71000.0 dtype: float64","text_tokens":["在","一个","int64","如果","索引","5000","dict","匹配","dtype","可以","states","float64","的","'","key","则",",","是",")","排列","。","=","：","中","california","16000.0","texas","}","原","对应","(","传入","{","和","不","值则","]","oregon","只","71000","注意",":","35000","71000.0","就是","ohio","需要","[","#","，","nan","35000.0","若","指定","utah","并","键","也","为","结果"," ","有序","series","顺序","无序","index","sdata","但","16000","字典"],"title":"从dict来创建","title_tokens":["来","创建","从","dict"]},{"location":"pandas笔记/7.1.Series.html#numpy","text":"数组必须是一维的： import numpy as np a = np . array ([ 1 , 2 , 3 ]) Series ( a ) 0 1 1 2 2 3 dtype: int32","text_tokens":["numpy","dtype","int32","的","是",",","3",")","array","：","必须","数组","(","]","一维","1",":","[","a",".","2","np"," ","0","import","series","=","as"],"title":"从NumPy数组来创建","title_tokens":["numpy","来","数组","创建","从"]},{"location":"pandas笔记/7.1.Series.html#_1","text":"如果提供索引，将重复标量值以匹配索引的长度。 Series ( 5 , index = [ 0 , 1 , 2 , 3 ]) 0 5 1 5 2 5 3 5 dtype: int64 实际上numpy可以定义储存不同类型数据的结构数组。 ↩","text_tokens":["长度","实际","int64","如果","索引","numpy","匹配","标量","dtype","可以","数据","类型","的","定义",")",",","3","。","↩","储存","数组","(","]","实际上","5","结构","提供","将","重复","1",":","[","不同","，","2"," ","0","series","index","=","值以"],"title":"从标量创建","title_tokens":["创建","标量","从"]},{"location":"pandas笔记/7.2.DataFrame.html","text":"from pandas import DataFrame from pandas import Series import numpy as np DataFrame类 DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型 1 （数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以被看做是Series的容器。 pandas中的 DataFrame 可以使用以下构造函数创建 - pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) data ：数据可以是各种形式，如: ndarray ， series ， map ， lists ， dict ， constant 和另一个 DataFrame 。 index ：行标签。默认为 np.arrange(n) 。 columns ：列标签。默认为 np.arrange(n) 。 dtype ：数据类型。 copy ：是否复制数据。 可以输入给DataFrame构造器的数据： 类型 说明 二维ndarray 由数组、列表或元组组成的字典 每个序列作为DataFrame的一列。 所有序列的长度必须相同 。 NumPy的结构化/记录数组 类似于“由数组组成的字典” 由Series组成的字典 每个Series会成为一列。如果没有显式指定index，则 各Series的index会被合并成结果的行索引。 每个Series的长度不要求必须相同 ，DataFrame会以NaN填充。 由字典组成的字典 各内层字典会成为一列。键会被合并成结果的行索 弓丨，跟由“Series组成的字典”的情况一样 字典或Series的列表 各项将会成为DataFrame的一行。字典键或Series索引 的并集将会成为DataFrame的列标 由list或tuple组成的list 类似于“二维ndarray” 另—个DataFrame 该DataFrame的索引将会被沿用，除非显式指定了其他索引 NumPy 的 Masked Array 类似于“二维ndarray”的情况，只是掩码值在结果 DataFrame会变成NA/缺失值 总的来说，支持输入的数据类型是： dict 、 list 、 ndarray 、 DataFrame 。 从列表创建 可以使用 单个列表 或 列表内嵌列表 来创建DataFrame。 单个列表的例子： data = [ 1 , 2 , 3 , 4 , 5 ] DataFrame ( data ) 0 0 1 1 2 2 3 3 4 4 5 列表内嵌列表的例子： data = [[ 'Alex' , 10 ],[ 'Bob' , 12 ],[ 'Clarke' , 13 ]] DataFrame ( data , columns = [ 'Name' , 'Age' ]) Name Age 0 Alex 10 1 Bob 12 2 Clarke 13 从包含ndarrays/Lists的字典创建 传入一个由等长list或ndarray组成的字典： 结果DataFrame会自动加上索引（跟Series一样），且全部列 会被有序排列。 data = { 'state' : [ 'Ohio' , 'Ohio' , 'Ohio' , 'Nevada' , 'Nevada' ], 'year' : [ 2000 , 2001 , 2002 , 2001 , 2002 ], 'pop' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 ]} DataFrame ( data ) state year pop 0 Ohio 2000 1.5 1 Ohio 2001 1.7 2 Ohio 2002 3.6 3 Nevada 2001 2.4 4 Nevada 2002 2.9 如果指定了列序列，则DataFrame的列就会按照指定顺序进行排列： DataFrame ( data , columns = [ 'year' , 'state' , 'pop' ]) year state pop 0 2000 Ohio 1.5 1 2001 Ohio 1.7 2 2002 Ohio 3.6 3 2001 Nevada 2.4 4 2002 Nevada 2.9 从字典列表创建 data = [{ 'a' : 1 , 'b' : 2 },{ 'a' : 5 , 'b' : 10 , 'c' : 20 }] DataFrame ( data , index = [ 'first' , 'second' ]) a b c first 1 2 NaN second 5 10 20.0 从Series的字典创建 d = { 'one' : Series ([ 1 , 2 , 3 ], index = [ 'a' , 'b' , 'c' ]), 'two' : Series ([ 1 , 2 , 3 , 4 ], index = [ 'a' , 'b' , 'c' , 'd' ])} df = DataFrame ( d ) df [[ \"two\" , \"two\" ]] two two a 1 1 b 2 2 c 3 3 d 4 4 替代构造函数 DataFrame.from_dict DataFrame.from_dict(data, orient=\"columns\", dtype=None, columns=None) DataFrame.from_dict 接受dict或类似数组的序列的dict并返回DataFrame。 DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])])) DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])]), orient = 'index' , columns = [ 'one' , 'two' , 'three' ]) one two three A 1 2 3 B 4 5 6 DataFrame.from_records DataFrame.from_records( data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None, ) DataFrame.from_records 接受具有结构化dtype的元组或ndarray的列表。它与普通的 DataFrame 构造函数相似，除了所得的DataFrame索引可能是结构化dtype的特定字段。例如： data = np . array ([( 1 , 2. , b 'Hello' ), ( 2 , 3. , b 'World' )], dtype = [( 'A' , '<i4' ), ( 'B' , '<f4' ), ( 'C' , 'S10' )]) DataFrame . from_records ( data , index = 'C' ) A B C b'Hello' 1 2.0 b'World' 2 3.0 DataFrame.from_items DataFrame . from_items ( items , columns = None , orient = 'columns' ) # items ：为元组序列，元组格式为： ( key , value ) # 当 orient = 'index' 时必须传入（此时 key 指定的是行的 label ），且长度不能大于 DataFrame的列数 。 # 当 orient = ' columns时 ， key就是列的label ，此时 columns关键字参数指定的列label必须等于某个key ；否则抛出异常。 从元组序列中创建 DataFrame 。 实际上，DataFrame每一个值都可以是不同的数据类型。 ↩","text_tokens":["构造","例子","一个","n","时","列","numpy","容器","4","列数","数据","类","类型","的","一列","one","每个","相同","排列","copy","全部","与","label","three","都","10","13","行索","默认","nevada","被","”","d","dataframe","构造函数","会","由","pop","two","_","于","tuple","s10","当","字","，","列表","成为","各项","说明","器","alex","且","orient","了","标签","为","pandas","2","例如","0","没有","as","输入","除非","某个","6","长度","实际","\"","from","除了","—","给","键会","'","“","含有","-","是",")","20","形式","使用","bob","长","接受","false","float","：","中","state","3.0","等","记录","来","数组","组成","所有","/","关键字","每","内层","{","可能","是否","）","字符串","该","5","填充","沿用","结构","行",":","second","特定","关键","；","[","ohio","coerce","变成","一样","nan","i4","如","2.0","指定","缺失","合并","value","普通","也","lists","集","结果","其他","顺序","此时","从","字典","12","first","如果","各","字符","ndarray","f4","dtype","可以","创建","↩",",","3","constant","掩码","会以","跟","2002","2.4","替代","格式","布尔","弓","表格","records","参数","按照","不能","否则","型","函数","(","和","不","ndarrays","]","df","相似","age","<","等于","columns","数据结构","值","将","它","丨","返回","所得","数据类型","nrows","a","具有","一行","总的来说","并","全部列","键","大于","既有","有序","import","masked","year","数值","index","=","必须","list","个","各种","抛出","或","在","类似","map","元组","情况","索引","dict","支持","内嵌","包含","2.9","就","另","key","则","列标","。","序列","array","加上","20.0","arrange","单个","自动","显式","}","data","1.5","（","将会","要求","传入","na","进行","world","段","、","实际上","复制","每列","1","看做","3.6","就是","不同","有列","作为","#","c","name","结构化","none","b","exclude","clarke","items",".","成","2000","np","异常","只是"," ","以下","hello","1.7","来说","一组","series","布尔值","2001","二维"],"title":"7.2.DataFrame","title_tokens":["7.2",".","dataframe"]},{"location":"pandas笔记/7.2.DataFrame.html#dataframe","text":"DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型 1 （数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以被看做是Series的容器。 pandas中的 DataFrame 可以使用以下构造函数创建 - pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) data ：数据可以是各种形式，如: ndarray ， series ， map ， lists ， dict ， constant 和另一个 DataFrame 。 index ：行标签。默认为 np.arrange(n) 。 columns ：列标签。默认为 np.arrange(n) 。 dtype ：数据类型。 copy ：是否复制数据。 可以输入给DataFrame构造器的数据： 类型 说明 二维ndarray 由数组、列表或元组组成的字典 每个序列作为DataFrame的一列。 所有序列的长度必须相同 。 NumPy的结构化/记录数组 类似于“由数组组成的字典” 由Series组成的字典 每个Series会成为一列。如果没有显式指定index，则 各Series的index会被合并成结果的行索引。 每个Series的长度不要求必须相同 ，DataFrame会以NaN填充。 由字典组成的字典 各内层字典会成为一列。键会被合并成结果的行索 弓丨，跟由“Series组成的字典”的情况一样 字典或Series的列表 各项将会成为DataFrame的一行。字典键或Series索引 的并集将会成为DataFrame的列标 由list或tuple组成的list 类似于“二维ndarray” 另—个DataFrame 该DataFrame的索引将会被沿用，除非显式指定了其他索引 NumPy 的 Masked Array 类似于“二维ndarray”的情况，只是掩码值在结果 DataFrame会变成NA/缺失值 总的来说，支持输入的数据类型是： dict 、 list 、 ndarray 、 DataFrame 。","text_tokens":["构造","一个","n","列","容器","numpy","数据","一列","类型","的","每个","相同","copy","行索","默认","被","”","dataframe","构造函数","会","由","于","tuple","，","列表","成为","各项","说明","器","了","标签","为","pandas","没有","输入","除非","长度","—","给","键会","“","含有","-","是",")","形式","使用","false","：","中","等","记录","数组","组成","所有","/","内层","是否","）","字符串","该","填充","沿用","结构","行",":","变成","一样","nan","如","指定","缺失","合并","也","lists","集","结果","其他","字典","如果","各","字符","ndarray","dtype","可以","创建",",","constant","掩码","会以","跟","布尔","弓","表格","型","函数","(","和","不","columns","数据结构","值","将","它","丨","数据类型","一行","总的来说","并","键","既有","有序","masked","数值","index","=","必须","list","个","各种","或","在","类似","map","元组","情况","索引","dict","支持","另","则","列标","。","序列","array","arrange","显式","data","（","将会","要求","na","、","复制","每列","1","看做","不同","有列","作为","结构化","none",".","成","np","只是"," ","以下","来说","一组","series","布尔值","二维"],"title":"DataFrame类","title_tokens":["类","dataframe"]},{"location":"pandas笔记/7.2.DataFrame.html#_1","text":"可以使用 单个列表 或 列表内嵌列表 来创建DataFrame。 单个列表的例子： data = [ 1 , 2 , 3 , 4 , 5 ] DataFrame ( data ) 0 0 1 1 2 2 3 3 4 4 5 列表内嵌列表的例子： data = [[ 'Alex' , 10 ],[ 'Bob' , 12 ],[ 'Clarke' , 13 ]] DataFrame ( data , columns = [ 'Name' , 'Age' ]) Name Age 0 Alex 10 1 Bob 12 2 Clarke 13","text_tokens":["或","例子","12","内嵌","4","可以","的","创建","'",")",",","3","。","使用","bob","10","：","13","单个","来","data","(","dataframe","]","age","5","columns","1","[","列表","alex","name","clarke","2"," ","0","="],"title":"从列表创建","title_tokens":["列表","创建","从"]},{"location":"pandas笔记/7.2.DataFrame.html#ndarrayslists","text":"传入一个由等长list或ndarray组成的字典： 结果DataFrame会自动加上索引（跟Series一样），且全部列 会被有序排列。 data = { 'state' : [ 'Ohio' , 'Ohio' , 'Ohio' , 'Nevada' , 'Nevada' ], 'year' : [ 2000 , 2001 , 2002 , 2001 , 2002 ], 'pop' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 ]} DataFrame ( data ) state year pop 0 Ohio 2000 1.5 1 Ohio 2001 1.7 2 Ohio 2002 3.6 3 Nevada 2001 2.4 4 Nevada 2002 2.9 如果指定了列序列，则DataFrame的列就会按照指定顺序进行排列： DataFrame ( data , columns = [ 'year' , 'state' , 'pop' ]) year state pop 0 2000 Ohio 1.5 1 2001 Ohio 1.7 2 2002 Ohio 3.6 3 2001 Nevada 2.4 4 2002 Nevada 2.9","text_tokens":["或","一个","如果","索引","列","就","ndarray","2.9","4","的","'","排列",",","全部","。",")","长","3","序列","则","：","加上","跟","state","2002","2.4","等","自动","}","nevada","组成","data","1.5","（","被","(","传入","{","dataframe","按照","]","进行","会","）","由","columns","pop","1",":","3.6","[","ohio","2001","一样","，","指定","且","了","全部列","2000","2","结果"," ","有序","0","year","1.7","series","顺序","=","list","字典"],"title":"从包含ndarrays/Lists的字典创建","title_tokens":["包含","lists","/","的","创建","ndarrays","从","字典"]},{"location":"pandas笔记/7.2.DataFrame.html#_2","text":"data = [{ 'a' : 1 , 'b' : 2 },{ 'a' : 5 , 'b' : 10 , 'c' : 20 }] DataFrame ( data , index = [ 'first' , 'second' ]) a b c first 1 2 NaN second 5 10 20.0","text_tokens":["first","'",")",",","20","10","20.0","}","data","(","{","dataframe","]","5","second","1",":","[","a","c","nan","b","2"," ","index","="],"title":"从字典列表创建","title_tokens":["列表","创建","从","字典"]},{"location":"pandas笔记/7.2.DataFrame.html#series","text":"d = { 'one' : Series ([ 1 , 2 , 3 ], index = [ 'a' , 'b' , 'c' ]), 'two' : Series ([ 1 , 2 , 3 , 4 ], index = [ 'a' , 'b' , 'c' , 'd' ])} df = DataFrame ( d ) df [[ \"two\" , \"two\" ]] two two a 1 1 b 2 2 c 3 3 d 4 4","text_tokens":["\"","4","one","'",")","3",",","}","(","{","d","df","]","dataframe","1",":","two","[","a","c","b","2"," ","series","index","="],"title":"从Series的字典创建","title_tokens":["的","创建","series","从","字典"]},{"location":"pandas笔记/7.2.DataFrame.html#_3","text":"","text_tokens":[],"title":"替代构造函数","title_tokens":["构造","替代","函数","构造函数"]},{"location":"pandas笔记/7.2.DataFrame.html#dataframefrom_dict","text":"DataFrame.from_dict(data, orient=\"columns\", dtype=None, columns=None) DataFrame.from_dict 接受dict或类似数组的序列的dict并返回DataFrame。 DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])])) DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])]), orient = 'index' , columns = [ 'one' , 'two' , 'three' ]) one two three A 1 2 3 B 4 5 6","text_tokens":["或","6","类似","\"","dict","from","4","dtype","one","的","'",")",",","接受","序列","。","3","three","数组","data","(","dataframe","]","columns","5","_","1","two","返回","[","a","orient","none","b","并",".","2"," ","index","="],"title":"DataFrame.from_dict","title_tokens":[".","dict","from","_","dataframe"]},{"location":"pandas笔记/7.2.DataFrame.html#dataframefrom_records","text":"DataFrame.from_records( data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None, ) DataFrame.from_records 接受具有结构化dtype的元组或ndarray的列表。它与普通的 DataFrame 构造函数相似，除了所得的DataFrame索引可能是结构化dtype的特定字段。例如： data = np . array ([( 1 , 2. , b 'Hello' ), ( 2 , 3. , b 'World' )], dtype = [( 'A' , '<i4' ), ( 'B' , '<f4' ), ( 'C' , 'S10' )]) DataFrame . from_records ( data , index = 'C' ) A B C b'Hello' 1 2.0 b'World' 2 3.0","text_tokens":["或","构造","元组","索引","from","除了","ndarray","f4","dtype","的","'","与","float",")",",","接受","。","是","array","3","false","3.0","：","records","data","world","(","函数","相似","dataframe","]","可能","段","<","构造函数","columns","结构","_","1","特定","它","s10","所得","字","[","coerce","nrows","a","具有","，","列表","i4","c","exclude","结构化","none","b","2.0","普通",".","2","np"," ","例如","hello","index","="],"title":"DataFrame.from_records","title_tokens":[".","from","_","records","dataframe"]},{"location":"pandas笔记/7.2.DataFrame.html#dataframefrom_items","text":"DataFrame . from_items ( items , columns = None , orient = 'columns' ) # items ：为元组序列，元组格式为： ( key , value ) # 当 orient = 'index' 时必须传入（此时 key 指定的是行的 label ），且长度不能大于 DataFrame的列数 。 # 当 orient = ' columns时 ， key就是列的label ，此时 columns关键字参数指定的列label必须等于某个key ；否则抛出异常。 从元组序列中创建 DataFrame 。 实际上，DataFrame每一个值都可以是不同的数据类型。 ↩","text_tokens":["某个","长度","实际","元组","时","一个","列","from","列数","可以","数据","类型","'","的","key","此时",")",",","是","序列","label","。","从","都","↩","：","中","格式","参数","关键字","不能","否则","每","（","(","传入","dataframe","等于","）","实际上","columns","关键","值","_","行","当","；","就是","不同","数据类型","#","，","orient","创建","value","none","指定","且","items",".","为","大于","异常"," ","index","=","必须","抛出"],"title":"DataFrame.from_items","title_tokens":["items",".","from","_","dataframe"]},{"location":"pandas笔记/7.3.索引.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) from tools import Help as H import numpy as np import pandas as pd Series和DataFrame的索引方式很相似： 都可以通过 .loc[] 使用 标签 选择行 都可以通过 .iloc[] 使用 整数 选择行 都可以通过 [] 使用 切片 选择行 但他们的索引方式也有一些不同点： Series可以通过 属性访问 的方式，使用 标签 选择行 .row_index ；DataFrame通过属性访问的方式选择列 .column_index Series可以通过 [] 使用 整数 、 标签 选择行 [row_index] ；DataFrame只能通过 [column_index] 使用 列标签 选择列 创建示例Series和DataFrame： ser = pd . Series ([ 4.5 , 7.2 , - 5.3 , 3.6 , 6.1 ], index = [ 'd' , 'b' , 'a' , 'c' , 'b' ]) print ( ser ) d 4.5 b 7.2 a -5.3 c 3.6 b 6.1 dtype: float64 d = { 'one' : pd . Series ([ 1 , 2 , 3 , 5 ], index = [ 'a' , 'b' , 'c' , 'e' ]), 'two' : pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ])} df = pd . DataFrame ( d ) print ( df ) one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 通过行标签选择行 # Series print ( ser . b ) print ( ser [ \"b\" ]) print ( ser . loc [ \"b\" ]) b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 # DataFrame df . loc [ \"a\" ] one 1.0 two 1.0 Name: a, dtype: float64 通过行标签选择多行 # Series ser [[ \"b\" , \"a\" ]] ser . loc [[ \"b\" , \"a\" ]] b 7.2 b 6.1 a -5.3 dtype: float64 # DataFrame df . loc [[ \"a\" , \"b\" ]] one two a 1.0 1 b 2.0 2 不能使用 () ser . loc [( \"b\" , \"a\" )] ---------------------------------------------------------------------------IndexingError Traceback (most recent call last)<ipython-input-1-36ce192f3c34> in <module> ----> 1 ser.loc[(\"b\", \"a\")] G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in __getitem__(self, key) 1416 except (KeyError, IndexError, AttributeError): 1417 pass -> 1418 return self._getitem_tuple(key) 1419 else: 1420 # we by definition only have the 0th axis G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _getitem_tuple(self, tup) 808 809 # no multi-index, so validate all of the indexers --> 810 self._has_valid_tuple(tup) 811 812 # ugly hack for GH #836 G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _has_valid_tuple(self, key) 231 for i, k in enumerate(key): 232 if i >= self.obj.ndim: --> 233 raise IndexingError(\"Too many indexers\") 234 try: 235 self._validate_key(k, i) IndexingError: Too many indexers 通过整数选择行 # Series ser [ 1 ] ser . iloc [ 1 ] 7.2 # DataFrame df . iloc [ 0 ] one 1.0 two 1.0 Name: a, dtype: float64 通过整数选择多行 # Series ser [[ 1 , 0 ]] ser . iloc [[ 1 , 0 ]] b 7.2 d 4.5 dtype: float64 # DataFrame df . iloc [[ 0 , 1 ]] one two a 1.0 1 b 2.0 2 通过切片选择多行 切片包括 整数切片 和 标签切片 。 # Series ser [ 1 : 3 ] ser . iloc [ 1 : 3 ] b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ 0 : 3 : 2 ]) print ( df [ 0 : 2 ]) one two a 1.0 1 c 3.0 3 one two a 1.0 1 b 2.0 2 切片有整数值的普通切片和标签切片。 利用标签的切片运算与普通的Python切片运算不同，其末端是包含的（inclusive），即封闭区间。 # Series print ( ser [ 0 : 2 ]) print ( ser [ \"d\" : \"a\" ]) d 4.5 b 7.2 dtype: float64 d 4.5 b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ \"a\" : \"c\" ]) print ( df . iloc [ 0 : 3 : 2 ]) one two a 1.0 1 b 2.0 2 c 3.0 3 one two a 1.0 1 c 3.0 3 通过列标签选择列 与Series不同的是，DataFrame还有列选择。但是DataFrame的列选择和行选择不同。 DataFrame的行可以同时有 整数索引 和 标签索引 ，如果没有给标签赋值，则只有整数值索引。 DataFrame的列在标签赋值后，只能使用标签索引。 选取DataFrame的列，实际上是获取了一个Series，返回的Series拥有原DataFrame相同的行索引。 print ( df . one ) print ( df [ \"one\" ]) a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 通过列标签选择多列 df [[ \"one\" , \"two\" ]] one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 注意： 通过索引方式返回的列只是相应数据的视图而已， 并不是副本。因此，对返回的Series所做的任何修改全都会反映到原DataFrame上。通过Series的copy方法即可显式地复制列。 df [ \"one\" ][ \"a\" ] = np . nan df . \\ setup_m . py : 1 : SettingWithCopyWarning : A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation : http : // pandas . pydata . org / pandas - docs / stable / user_guide / indexing . html #returning-a-view-versus-a-copy import os one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 行列同时索引 df . loc [ \"c\" , \"one\" ] df . iloc [ 2 , 0 ] df . loc [ \"c\" , [ \"one\" , \"two\" ]] df . iloc [ 2 , [ 0 , 1 ]] one 3.0 two 3.0 Name: c, dtype: float64 先选择列，在选择行 df [ \"one\" ][ \"c\" ] 3.0 关于索引的其它 对Series进行运算（布尔索引过滤、标量乘法、数学函数等），都会保留标签和值之间的链接。 Series的标签可以通过赋值的方式进行修改： s = pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ]) s . index = [ 'f' , 'b' , 'c' , 'd' , 'e' ] s f 1 b 2 c 3 d 4 e 5 dtype: int64 虽然很多时候都强调轴标签（索引值）要唯一，但这并不是强制性的。来看看下面这个简单的带有重复索引值的Series： obj = pd . Series ( range ( 5 ), index = [ 'a' , 'a' , 'b' , 'b' , 'c' ]) obj a 0 a 1 b 2 b 3 c 4 dtype: int64 索引的is_unique属性可以告诉你它的值是否是唯一的 obj . index . is_unique False 对于带有重复值的索引，数据选取的行为将会有些不同。如果某个索引对应多个值，则返回一个Series；而对应单个值的，则返回一个标量值。对DataFrame的行进行索引时也是如此。 get 方法 Series或DataFrame中的每一个都有一个 get 可以返回默认值的方法。 ser . get ( \"a\" ) -5.3 df . get ( \"onef\" , 5 ) 5 lookup 方法 给定一系列行标签和列标签的情况下提取一组值： # 返回 ('c','one') 和 ('b','two') df . lookup ([ \"c\" , \"b\" ], [ \"one\" , \"two\" ]) array([3., 2.]) 索引方式总结表 类型 df[val] 从DataFrame选取单列或一组列； 在特殊情况下比较便利：布尔型数组（过滤行）、切片（行切片）、或布尔型DataFrame (根据条件设置值） df.loc[val] 通过标签，选取DataFrame的单个行或一组行 df.loc[:, val] 通过标签，选取单列或列子集 df.loc[val1, val2] 通过标签，同时选取行和列 df.iloc[where] 通过整数位置，从DataFrame选取单个行或行子集 df.iloc[:, where] 通过整数位置，从DataFrame选取单个列或列子集 df.iloc[where_i, where_j] 通过整数位置，同时选取行和列 df.at [label_i, label_j] 通过行和列标签，选取单一的标量 df.iat[i, j] 通过行和列的位置（整数），选取单一的标量 reindex 通过标签选取行或列 get _value, set_value 通过行和列标签选取单一值","text_tokens":["numpy","4.5","相同","copy","only","pydata","10","7.2","\\","v.1915","即","下面","indexing","很多","view","他们","range","而","amd64","比较","indexerror","0","call","at","obj","对于","from","float64","e","set","self","：","中","column","see","many","唯一","ugly","5","访问","行","[","most","多行","末端","nan","很","数学","too","233","site","如果","标量","for","任何","stable","3","have","通过","对应","msc","和","pass","值","有些","import","带有","包括","整数","做","j","切片","caveats","单个","显式","链接","而已","将会","iloc","809","实际上","settingwithcopywarning","h","tools","multi","b","module",".","ndim","else","是否是","on","valid","loc","231","时候","int64","docs","列","时","强调","原","默认","封闭","修改","two","windows","，","子集","赋值","1418","pd","hack","标签","810","pandas","as","实际","\"","print","多列","-","has","等","所","和行","packages","不同点","后","有","获取","64","运算","上","setup","但是","单列","过滤","型","函数","df","给定","返回","iat","a","ipython","并","乘法","但","行或列","在","os","traceback","地","相应","array","help","利用","}","提取","进行","row","、","属性","条件","5.0","不同","36ce192f3c34"," ","234","val1","series","235","documentation","except","位置","轴","行或行","一个","你","5.3","4","类型","的","方式","保留","只能","会","_","1420","tuple","if","其它","行为","了","2","副本","core","关于","没有","到","行列","onef","'","__",")","是","使用","false","来","数组","6.1","{","同点",":","----","232","tup","2.0","returning","一些","也","普通","recent","还有","重复","从","简单","或列","guide","dtype","可以","by","we",",","836","不是","@","1417","0th","强制","1416","(","to","anaconda3","inclusive","the","so","即可","1419",">","f","全都","indexingerror","或","key","则","http","看看","行和列","k","（","单一","1.0","versus","复制","下","3.6","多个","python","html","选择","c","all","这","name","np","方法","只是","last","强制性","一组","系列","数据","选取","one","axis","与","label","org","区间","try","都","特殊","同时","要","表","in","lib","m","validate","d","dataframe","812","虽然","811","之间","py","._","getitem","lookup","808","拥有","某个","is","给","input","no","根据","每","/","user","---------------------------------------------------------------------------","slice","是否","）","；","reindex","value","i","unique","--","其","where","installed","创建","视图","布尔","不能","bit","相似","]","<","be","attributeerror","先","告诉","它","enumerate","s","indexers","如此","val2","definition","便利","get","index","=","3.7","默认值","因此","总结","包含","情况","索引","对","raise","反映","。","一系","设置","trying","ser","注意","1","这个","只有","keyerror","gh","#","g","val","of","示例","一系列","3.0","return"],"title":"7.3.索引","title_tokens":["7.3",".","索引"]},{"location":"pandas笔记/7.3.索引.html#_1","text":"# Series print ( ser . b ) print ( ser [ \"b\" ]) print ( ser . loc [ \"b\" ]) b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 # DataFrame df . loc [ \"a\" ] one 1.0 two 1.0 Name: a, dtype: float64","text_tokens":["\"","print","dtype","float64","one",")",",","7.2","6.1","ser","(","dataframe","df","]","1.0","two",":","[","a","#","name","b","."," ","series","loc"],"title":"通过行标签选择行","title_tokens":["行","选择","通过","标签"]},{"location":"pandas笔记/7.3.索引.html#_2","text":"# Series ser [[ \"b\" , \"a\" ]] ser . loc [[ \"b\" , \"a\" ]] b 7.2 b 6.1 a -5.3 dtype: float64 # DataFrame df . loc [[ \"a\" , \"b\" ]] one two a 1.0 1 b 2.0 2 不能使用 () ser . loc [( \"b\" , \"a\" )] ---------------------------------------------------------------------------IndexingError Traceback (most recent call last)<ipython-input-1-36ce192f3c34> in <module> ----> 1 ser.loc[(\"b\", \"a\")] G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in __getitem__(self, key) 1416 except (KeyError, IndexError, AttributeError): 1417 pass -> 1418 return self._getitem_tuple(key) 1419 else: 1420 # we by definition only have the 0th axis G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _getitem_tuple(self, tup) 808 809 # no multi-index, so validate all of the indexers --> 810 self._has_valid_tuple(tup) 811 812 # ugly hack for GH #836 G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _has_valid_tuple(self, key) 231 for i, k in enumerate(key): 232 if i >= self.obj.ndim: --> 233 raise IndexingError(\"Too many indexers\") 234 try: 235 self._validate_key(k, i) IndexingError: Too many indexers","text_tokens":["231","5.3","one","axis","only","try","7.2","in","lib","\\","validate","dataframe","812","indexing","two","_","1420","tuple","811","if","py","1418","hack","2","._","pandas","core","810","indexerror","getitem","call","808","obj","\"","input","float64","__","-",")","no","self","使用","has","many","6.1","---------------------------------------------------------------------------","ugly","packages",":","----","[","most","232","tup","2.0","i","recent","too","233","site","dtype","--","for","by","installed","we",",","have","836","0th","1417","1416","不能","(","df","]","pass","<","anaconda3","attributeerror","the","so","1419","a","enumerate","ipython","indexers",">","definition","index","=","indexingerror","raise","traceback","key","k","ser","1.0","809","1","multi","keyerror","gh","#","g","all","of","b","module",".","36ce192f3c34"," ","last","else","ndim","234","series","valid","235","loc","return","except"],"title":"通过行标签选择多行","title_tokens":["通过","标签","行","多行","选择"]},{"location":"pandas笔记/7.3.索引.html#_3","text":"# Series ser [ 1 ] ser . iloc [ 1 ] 7.2 # DataFrame df . iloc [ 0 ] one 1.0 two 1.0 Name: a, dtype: float64","text_tokens":["dtype","float64","one",",","7.2","ser","df","dataframe","]","iloc","1.0","1","two",":","[","a","#","name","."," ","0","series"],"title":"通过整数选择行","title_tokens":["行","选择","通过","整数"]},{"location":"pandas笔记/7.3.索引.html#_4","text":"# Series ser [[ 1 , 0 ]] ser . iloc [[ 1 , 0 ]] b 7.2 d 4.5 dtype: float64 # DataFrame df . iloc [[ 0 , 1 ]] one two a 1.0 1 b 2.0 2","text_tokens":["dtype","float64","one","4.5",",","7.2","ser","d","dataframe","df","]","iloc","1.0","1",":","two","[","a","#","2.0","b",".","2"," ","0","series"],"title":"通过整数选择多行","title_tokens":["多行","选择","通过","整数"]},{"location":"pandas笔记/7.3.索引.html#_5","text":"切片包括 整数切片 和 标签切片 。 # Series ser [ 1 : 3 ] ser . iloc [ 1 : 3 ] b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ 0 : 3 : 2 ]) print ( df [ 0 : 2 ]) one two a 1.0 1 c 3.0 3 one two a 1.0 1 b 2.0 2 切片有整数值的普通切片和标签切片。 利用标签的切片运算与普通的Python切片运算不同，其末端是包含的（inclusive），即封闭区间。 # Series print ( ser [ 0 : 2 ]) print ( ser [ \"d\" : \"a\" ]) d 4.5 b 7.2 dtype: float64 d 4.5 b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ \"a\" : \"c\" ]) print ( df . iloc [ 0 : 3 : 2 ]) one two a 1.0 1 b 2.0 2 c 3.0 3 one two a 1.0 1 c 3.0 3","text_tokens":["包含","\"","5.3","print","dtype","其","float64","one","的","-","运算",")","3","与","。","是","区间","4.5","切片","7.2","利用","封闭","（","ser","(","和","dataframe","df","]","即","d","iloc","1.0","）","inclusive","值","1",":","two","[","不同","python","a","#","，","c","末端","2.0","b","普通","标签",".","2","有"," ","0","series","3.0","包括","整数"],"title":"通过切片选择多行","title_tokens":["多行","选择","通过","切片"]},{"location":"pandas笔记/7.3.索引.html#_6","text":"与Series不同的是，DataFrame还有列选择。但是DataFrame的列选择和行选择不同。 DataFrame的行可以同时有 整数索引 和 标签索引 ，如果没有给标签赋值，则只有整数值索引。 DataFrame的列在标签赋值后，只能使用标签索引。 选取DataFrame的列，实际上是获取了一个Series，返回的Series拥有原DataFrame相同的行索引。 print ( df . one ) print ( df [ \"one\" ]) a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64","text_tokens":["在","实际","一个","\"","如果","列","索引","print","给","dtype","可以","选取","one","的","e","与","float64","是","则","相同","。","使用",")","但是","3.0",",","同时","原","和行","拥有","(","和","dataframe","df","只能","]","d","1.0","实际上","值","行",":","5.0","只有","返回","[","不同","a","，","选择","赋值","c","后","2.0","nan","b","name","了","标签",".","有"," ","series","没有","还有","整数","获取"],"title":"通过列标签选择列","title_tokens":["选择","通过","标签","列"]},{"location":"pandas笔记/7.3.索引.html#_7","text":"df [[ \"one\" , \"two\" ]] one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 注意： 通过索引方式返回的列只是相应数据的视图而已， 并不是副本。因此，对返回的Series所做的任何修改全都会反映到原DataFrame上。通过Series的copy方法即可显式地复制列。 df [ \"one\" ][ \"a\" ] = np . nan df . \\ setup_m . py : 1 : SettingWithCopyWarning : A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation : http : // pandas . pydata . org / pandas - docs / stable / user_guide / indexing . html #returning-a-view-versus-a-copy import os one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5","text_tokens":["docs","列","4","数据","one","的","org","copy","方式","pydata","in","\\","m","原","修改","d","dataframe","会","indexing","two","_","py","view","，","2","副本","pandas","\"","from","is","到","e","set","-","：","see","所","/","user","slice","5",":","[","nan","2.0","value","returning","guide","任何","视图","上","3",",","setup","stable","通过","不是","to","df","]","be","the","返回","即可","a","并","import","全都","=","因此","索引","os","对","做","反映","地","http","。","相应","caveats","显式","trying","而已","1.0","versus","复制","settingwithcopywarning","注意","1","5.0","#","html","c","of","b",".","np","方法","只是"," ","on","series","3.0","documentation"],"title":"通过列标签选择多列","title_tokens":["通过","标签","列","多列","选择"]},{"location":"pandas笔记/7.3.索引.html#_8","text":"df . loc [ \"c\" , \"one\" ] df . iloc [ 2 , 0 ] df . loc [ \"c\" , [ \"one\" , \"two\" ]] df . iloc [ 2 , [ 0 , 1 ]] one 3.0 two 3.0 Name: c, dtype: float64 先选择列，在选择行 df [ \"one\" ][ \"c\" ] 3.0","text_tokens":["在","\"","列","dtype","float64","one",",","df","]","iloc","先","two","1",":","行","[","，","c","选择","name",".","2"," ","0","loc","3.0"],"title":"行列同时索引","title_tokens":["同时","行列","索引"]},{"location":"pandas笔记/7.3.索引.html#_9","text":"对Series进行运算（布尔索引过滤、标量乘法、数学函数等），都会保留标签和值之间的链接。 Series的标签可以通过赋值的方式进行修改： s = pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ]) s . index = [ 'f' , 'b' , 'c' , 'd' , 'e' ] s f 1 b 2 c 3 d 4 e 5 dtype: int64 虽然很多时候都强调轴标签（索引值）要唯一，但这并不是强制性的。来看看下面这个简单的带有重复索引值的Series： obj = pd . Series ( range ( 5 ), index = [ 'a' , 'a' , 'b' , 'b' , 'c' ]) obj a 0 a 1 b 2 b 3 c 4 dtype: int64 索引的is_unique属性可以告诉你它的值是否是唯一的 obj . index . is_unique False 对于带有重复值的索引，数据选取的行为将会有些不同。如果某个索引对应多个值，则返回一个Series；而对应单个值的，则返回一个标量值。对DataFrame的行进行索引时也是如此。","text_tokens":["轴","一个","时候","int64","你","时","4","数据","选取","的","强调","方式","都","要","修改","d","保留","dataframe","下面","会","虽然","_","之间","很多","，","赋值","range","行为","pd","标签","2","而","0","obj","某个","对于","is","e","'",")","是","false","：","等","来","唯一","是否","）","5","；",":","行","[","数学","也","重复","简单","unique","如果","标量","dtype","可以","运算",",","3","过滤","通过","不是","布尔","强制","对应","函数","(","和","]","告诉","值","它","有些","返回","a","s","并","如此","f","带有","乘法","index","=","但","索引","对","则","。","看看","单个","（","链接","进行","将会","、","属性","1","这个","不同","多个","这","c","b","."," ","是否是","强制性","series"],"title":"关于索引的其它","title_tokens":["关于","的","其它","索引"]},{"location":"pandas笔记/7.3.索引.html#get","text":"Series或DataFrame中的每一个都有一个 get 可以返回默认值的方法。 ser . get ( \"a\" ) -5.3 df . get ( \"onef\" , 5 ) 5","text_tokens":["或","一个","\"","5.3","onef","可以","的","-",")",",","。","都","中","默认","每","ser","(","dataframe","df","5","返回","a",".","有","方法"," ","series","get","默认值"],"title":"get方法","title_tokens":["get","方法"]},{"location":"pandas笔记/7.3.索引.html#lookup","text":"给定一系列行标签和列标签的情况下提取一组值： # 返回 ('c','one') 和 ('b','two') df . lookup ([ \"c\" , \"b\" ], [ \"one\" , \"two\" ]) array([3., 2.])","text_tokens":["\"","情况","列","one","的","'",")",",","3","array","一系","：","提取","(","和","df","]","给定","值","行","下","two","返回","[","#","c","b","标签",".","2","一系列"," ","lookup","一组","系列"],"title":"lookup方法","title_tokens":["lookup","方法"]},{"location":"pandas笔记/7.3.索引.html#_10","text":"类型 df[val] 从DataFrame选取单列或一组列； 在特殊情况下比较便利：布尔型数组（过滤行）、切片（行切片）、或布尔型DataFrame (根据条件设置值） df.loc[val] 通过标签，选取DataFrame的单个行或一组行 df.loc[:, val] 通过标签，选取单列或列子集 df.loc[val1, val2] 通过标签，同时选取行和列 df.iloc[where] 通过整数位置，从DataFrame选取单个行或行子集 df.iloc[:, where] 通过整数位置，从DataFrame选取单个列或列子集 df.iloc[where_i, where_j] 通过整数位置，同时选取行和列 df.at [label_i, label_j] 通过行和列标签，选取单一的标量 df.iat[i, j] 通过行和列的位置（整数），选取单一的标量 reindex 通过标签选取行或列 get _value, set_value 通过行和列标签选取单一值","text_tokens":["或","行或行","在","或列","行或列","情况","列","标量","where","选取","类型","的","set","j","label",",","特殊","单列","切片","过滤","：","设置","同时","通过","行和列","单个","布尔","根据","数组","型","（","(","单一","dataframe","df","]","、","iloc","）","条件","值","；","下","行",":","_","[","iat","get","reindex","，","子集","val","value","i",".","标签","val2","比较"," ","val1","at","便利","一组","loc","位置","从","整数"],"title":"索引方式总结表","title_tokens":["表","方式","总结","索引"]},{"location":"pandas笔记/7.4.索引对象.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) from tools import Help as H import numpy as np import pandas as pd 索引对象 pandas的索引对象负责管理轴标签和其他元数据（比如轴名称等）。构建Series或DataFrame时，所用到的任何数组或其他序列的标签都会被转换成一个Index，而 index对象是不可变的 ，也就是index对象的元素不可修改（immutable）。如果要修改index内容，只能通过重新赋值的形式。 不可修改性非常重要，因为这样才能使Index对象在多个数据结构之间安全共享。 下表列出了pandas中主要的Index对象： 类 说明 Index 最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy 数组 Int64lndex 针对整数的特殊Index Multiindex “层次化”索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组 Datetimelndex 存储纳秒级时间截（用NumPy的datetime64类型表示） Periodlndex 针对Period数据（时间间隔）的特殊Index 以下是pandas中所有Index对象： [ 'CategoricalIndex' , 'DatetimeIndex' , 'Float64Index' , 'Index' , 'Int64Index' , 'IntervalIndex' , 'MultiIndex' , 'PeriodIndex' , 'RangeIndex' , 'TimedeltaIndex' , 'UInt64Index' ] class pandas.Index(data=None, dtype=None, copy=False, name=None, fastpath=False, tupleize_cols=True) ：创建 Index 对象。 参数： data ：一个 array-like ，必须是一维的 name ：一个字符串，为 Index 的名字。 dtype ：指定数据类型。如果为 None ，则默认为 object copy ：一个布尔值。如果为 True ，则拷贝输入数据 data tupleize_cols ：一个布尔值，如果可能则尽量创建 MultiIndex 对象 每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。下表列出了这些函数： 说明 方法 append 连接另一个index对象.产生一个新的Index diff 计算差集，并得到一个Index intersection 计算交集 union 计算并集 isin 计算一个指示各值是否都包含在参数集合中的布尔型数组 delete 删除索引i处的元素，并得到新的Index drop 删除传入的值.并得到新的Index insert 将元素插入到索引i处，并得到新的Index is_monotonic 当各元素均大于等于前一个元素时，返回TRUE is_unique 当Index没有重复值时，返回True unique 计算Index中唯一值的数组 多级索引 MultiIndex MultiIndex 代表的是多级索引对象。它继承自 Index ，其中的多级 label 采用元组对象来表示。在 MultiIndex 内部，并不直接保存元组对象，而是使用多个 Index 对象保存索引中每级的 label 。 class pandas.MultiIndex(levels=None, labels=None, sortorder=None, names=None, copy=False, verify_integrity=True, _set_identity=True, name=None, **kwargs) 参数： levels ：一个数组的列表，给出了每一级的 level 。 labels ：一个数组的列表，给出了每一级 level 的下标。第 i 级 label 是这样产生的： 首先获取 labels[i] ，它是一个下标序列，代表第 级。 - 假设第 k 位置为整数 3，在第 级第 位的 label 就是 levels[i][3] 。- sortorder ：一个整数，给出了已经排序好了的 level 级别。 names ：一个字符串序列，给出了每个 Index 的 name 。其中每个级别对应一个 Index copy ：一个布尔值。如果为 True ，则拷贝基础数据 verify_integrity ：一个布尔值。如果为 True ，则检测各级别的 label/level 都是连续的且有效的 name ：指定了本 MultiIndex 的名字 也可以通过下面的类方法来创建 MultiIndex ： MultiIndex.from_arrays(arrays[, sortorder, ...]) ：将二维序列转换为 MultiIndex 。其中 arrays 为 array-like 的序列，每个 array-like 按顺序的给出了一列 label （一个级别） MultiIndex.from_tuples(tuples[, sortorder, ...]) ：将元组序列转换为 MultiIndex 。其中 tuples 为 tuple-like 的序列，每个 array-like 按顺序的给出了一行 label 对（不同级别的一对） MultiIndex.from_product(iterables[, ...]) ：根据多个可迭代对象生成一个 MultiIndex ，其中使用笛卡尔积的算法。其中 iterables 为可迭代对象的序列 你也可以通过传递一个元组列表给 Index() ，并且将 tupleize_cols 设置为 True 来创建 MultiIndex 从tuple创建MultiIndex import pprint arrays = [ [ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]] tuples = list ( zip ( * arrays )) pprint . pprint ( tuples ) print ( \"\" ) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )], names = [ 'first' , 'second' ]) pd . Series ( np . random . randn ( 8 ), index = index ) first second bar one 0.546165 two 1.495862 baz one -0.786178 two 0.312848 foo one -0.473748 two 0.186548 qux one 0.836214 two -0.547680 dtype: float64 从iterables创建MultiIndex iterables = [[ 'bar' , 'baz' , 'foo' , 'qux' ], [ 'one' , 'two' ]] pprint . pprint ( iterables ) print ( \"\" ) index = pd . MultiIndex . from_product ( iterables , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [['bar', 'baz', 'foo', 'qux'], ['one', 'two']] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names = ['first', 'second']) 从DataFrame创建MultiIndex df = pd . DataFrame ([[ 'bar' , 'one' ], [ 'bar' , 'two' ], [ 'foo' , 'one' ], [ 'foo' , 'two' ]], columns = [ 'first' , 'second' ]) pprint . pprint ( df ) print ( \"\" ) index = pd . MultiIndex . from_frame ( df ) pprint . pprint ( index ) first second 0 bar one 1 bar two 2 foo one 3 foo two MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' )], names = [ 'first' , 'second' ]) 从list-like创建MultiIndex arrays = [ np . array ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ]), np . array ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ])] pprint . pprint ( arrays ) pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) [array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='<U3'), array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='<U3')] 0 1 2 3 bar one -0.089988 1.192690 -0.938933 0.821702 two -0.112540 0.587371 0.165956 0.050362 baz one -0.288737 0.709287 -0.479770 -0.007421 two 2.653461 1.258035 -0.837434 -1.306938 foo one 0.345492 0.311450 -0.008364 0.060572 two -0.304102 0.268357 0.680016 0.445016 qux one -0.809535 1.232934 -0.550252 -2.219605 two 0.729063 -0.992456 0.094162 -0.573775 # s = pd.Series(np.random.randn(8), index=arrays) # s 选择数据 列索引是多级索引 创建示例dataframe： tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 3 , 8 ), index = [ 'A' , 'B' , 'C' ], columns = index ) df first bar baz foo qux second one two one two one two one two A 0.137891 -0.288164 -0.236898 -1.201346 0.482293 0.197164 -0.080923 -0.190650 B 0.602663 -0.511166 -0.033371 -0.924746 -1.022346 -2.069830 2.562845 1.347849 C -0.758100 -0.662711 0.507510 0.828843 -0.514439 0.324422 -0.664171 -0.158560 dataframe的 [] 选择列： df [ \"bar\" ] second one two A 0.137891 -0.288164 B 0.602663 -0.511166 C -0.758100 -0.662711 [] 使用多级索引： # 实际上与 df[(\"bar\", \"one\")] 等价 df [ \"bar\" , \"one\" ] A 0.137891 B 0.602663 C -0.758100 Name: (bar, one), dtype: float64 [[]] 选择多列： df [[ \"bar\" , \"baz\" , \"foo\" ]] # list first bar baz foo second one two one two one two A 0.137891 -0.288164 -0.236898 -1.201346 0.482293 0.197164 B 0.602663 -0.511166 -0.033371 -0.924746 -1.022346 -2.069830 C -0.758100 -0.662711 0.507510 0.828843 -0.514439 0.324422 () 用于同一轴的多级索引： df [[( \"bar\" , \"one\" ), ( \"baz\" , \"one\" )]] # list of tuples first bar baz second one one A 0.137891 -0.236898 B 0.602663 -0.033371 C -0.758100 0.507510 # 行列索引 print ( df . loc [ \"A\" , \"bar\" ], \" \\n \" ) # () 用于同一轴的多级索引 print ( df . loc [ \"A\" , ( \"bar\" , \"one\" )], \" \\n \" ) # [] 用于增加轴 以下三行代码等价 print ( df . loc [ \"A\" , [( \"bar\" , \"one\" )]], \" \\n \" ) print ( df . loc [ \"A\" , ( \"bar\" , [ \"one\" ])], \" \\n \" ) print ( df . loc [ \"A\" , ([ \"bar\" ], \"one\" )], \" \\n \" ) # [] 用于增加轴 print ( df . loc [ \"A\" , [ \"bar\" ]], \" \\n \" ) second one 0 . 137891 two - 0 . 288164 Name : A , dtype : float64 0 . 13789062153880624 first second bar one 0 . 137891 Name : A , dtype : float64 first second bar one 0 . 137891 Name : A , dtype : float64 first second bar one 0 . 137891 Name : A , dtype : float64 first second bar one 0 . 137891 two - 0 . 288164 Name : A , dtype : float64 # tuple of lists print ( df . loc [ \"A\" , ([ \"bar\" , \"foo\" ], [ \"one\" , \"two\" ])], \" \\n \" ) # list of tuples print ( df . loc [ \"A\" , [( \"bar\" , \"one\" ), ( \"foo\" , \"two\" )]], \" \\n \" ) first second bar one 0 . 137891 two - 0 . 288164 foo one 0 . 482293 two 0 . 197164 Name : A , dtype : float64 first second bar one 0 . 137891 foo two 0 . 197164 Name : A , dtype : float64 行索引是多级索引 df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) df 0 1 2 3 bar one -0.354819 1.546802 -0.150356 -0.801590 two 0.288168 -1.177815 0.222434 -0.717976 baz one -1.585440 0.456956 0.275572 1.242805 two 1.102600 -1.314744 -1.171307 -2.322061 foo one 0.456528 0.922200 1.599342 1.136562 two 0.524887 -0.167836 -1.314889 0.639738 qux one -0.530839 -0.562265 -0.444301 1.227126 two -0.693254 2.555574 0.341882 -0.568909 df . loc [ 'bar' , [ 0 , 1 ]] 0 1 one -0.354819 1.546802 two 0.288168 -1.177815 df . loc [([ 'bar' ], \"one\" ), [ 0 , 1 ]] # df.loc[(['bar'], \"one\"), (0, 1)] 0 1 bar one -0.354819 1.546802 选择数据进阶 创建索引 def mklbl ( prefix , n ): return [ \" %s%s \" % ( prefix , i ) for i in range ( n )] miindex = pd . MultiIndex . from_product ([ mklbl ( 'A' , 4 ), mklbl ( 'B' , 2 ), mklbl ( 'C' , 4 ), mklbl ( 'D' , 2 )]) micolumns = pd . MultiIndex . from_tuples ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) print ( miindex , \" \\n \" ) print ( micolumns , \" \\n \" ) MultiIndex ([( 'A0' , 'B0' , 'C0' , 'D0' ), ( 'A0' , 'B0' , 'C0' , 'D1' ), ( 'A0' , 'B0' , 'C1' , 'D0' ), ( 'A0' , 'B0' , 'C1' , 'D1' ), ( 'A0' , 'B0' , 'C2' , 'D0' ), ( 'A0' , 'B0' , 'C2' , 'D1' ), ( 'A0' , 'B0' , 'C3' , 'D0' ), ( 'A0' , 'B0' , 'C3' , 'D1' ), ( 'A0' , 'B1' , 'C0' , 'D0' ), ( 'A0' , 'B1' , 'C0' , 'D1' ), ( 'A0' , 'B1' , 'C1' , 'D0' ), ( 'A0' , 'B1' , 'C1' , 'D1' ), ( 'A0' , 'B1' , 'C2' , 'D0' ), ( 'A0' , 'B1' , 'C2' , 'D1' ), ( 'A0' , 'B1' , 'C3' , 'D0' ), ( 'A0' , 'B1' , 'C3' , 'D1' ), ( 'A1' , 'B0' , 'C0' , 'D0' ), ( 'A1' , 'B0' , 'C0' , 'D1' ), ( 'A1' , 'B0' , 'C1' , 'D0' ), ( 'A1' , 'B0' , 'C1' , 'D1' ), ( 'A1' , 'B0' , 'C2' , 'D0' ), ( 'A1' , 'B0' , 'C2' , 'D1' ), ( 'A1' , 'B0' , 'C3' , 'D0' ), ( 'A1' , 'B0' , 'C3' , 'D1' ), ( 'A1' , 'B1' , 'C0' , 'D0' ), ( 'A1' , 'B1' , 'C0' , 'D1' ), ( 'A1' , 'B1' , 'C1' , 'D0' ), ( 'A1' , 'B1' , 'C1' , 'D1' ), ( 'A1' , 'B1' , 'C2' , 'D0' ), ( 'A1' , 'B1' , 'C2' , 'D1' ), ( 'A1' , 'B1' , 'C3' , 'D0' ), ( 'A1' , 'B1' , 'C3' , 'D1' ), ( 'A2' , 'B0' , 'C0' , 'D0' ), ( 'A2' , 'B0' , 'C0' , 'D1' ), ( 'A2' , 'B0' , 'C1' , 'D0' ), ( 'A2' , 'B0' , 'C1' , 'D1' ), ( 'A2' , 'B0' , 'C2' , 'D0' ), ( 'A2' , 'B0' , 'C2' , 'D1' ), ( 'A2' , 'B0' , 'C3' , 'D0' ), ( 'A2' , 'B0' , 'C3' , 'D1' ), ( 'A2' , 'B1' , 'C0' , 'D0' ), ( 'A2' , 'B1' , 'C0' , 'D1' ), ( 'A2' , 'B1' , 'C1' , 'D0' ), ( 'A2' , 'B1' , 'C1' , 'D1' ), ( 'A2' , 'B1' , 'C2' , 'D0' ), ( 'A2' , 'B1' , 'C2' , 'D1' ), ( 'A2' , 'B1' , 'C3' , 'D0' ), ( 'A2' , 'B1' , 'C3' , 'D1' ), ( 'A3' , 'B0' , 'C0' , 'D0' ), ( 'A3' , 'B0' , 'C0' , 'D1' ), ( 'A3' , 'B0' , 'C1' , 'D0' ), ( 'A3' , 'B0' , 'C1' , 'D1' ), ( 'A3' , 'B0' , 'C2' , 'D0' ), ( 'A3' , 'B0' , 'C2' , 'D1' ), ( 'A3' , 'B0' , 'C3' , 'D0' ), ( 'A3' , 'B0' , 'C3' , 'D1' ), ( 'A3' , 'B1' , 'C0' , 'D0' ), ( 'A3' , 'B1' , 'C0' , 'D1' ), ( 'A3' , 'B1' , 'C1' , 'D0' ), ( 'A3' , 'B1' , 'C1' , 'D1' ), ( 'A3' , 'B1' , 'C2' , 'D0' ), ( 'A3' , 'B1' , 'C2' , 'D1' ), ( 'A3' , 'B1' , 'C3' , 'D0' ), ( 'A3' , 'B1' , 'C3' , 'D1' )], ) MultiIndex ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) 创建示例数据 dfmi = pd . DataFrame ( np . arange ( len ( miindex ) * len ( micolumns )) . reshape (( len ( miindex ), len ( micolumns ))), index = miindex , columns = micolumns ) . sort_index () . sort_index ( axis = 1 ) dfmi lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237 236 239 238 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249 248 251 250 D1 253 252 255 254 [ 64 rows x 4 columns ] 使用切片 slice dfmi . loc [( slice ( 'A1' , 'A3' ), slice ( None ), [ 'C1' , 'C3' ]), :] dfmi . loc [ 'A1' , ( slice ( None ), 'foo' )] lvl0 a b lvl1 foo foo B0 C0 D0 64 66 D1 68 70 C1 D0 72 74 D1 76 78 C2 D0 80 82 D1 84 86 C3 D0 88 90 D1 92 94 B1 C0 D0 96 98 D1 100 102 C1 D0 104 106 D1 108 110 C2 D0 112 114 D1 116 118 C3 D0 120 122 D1 124 126 IndexSlice idx = pd . IndexSlice dfmi . loc [ idx [:, :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A0 B0 C1 D0 8 10 D1 12 14 C3 D0 24 26 D1 28 30 B1 C1 D0 40 42 D1 44 46 C3 D0 56 58 D1 60 62 A1 B0 C1 D0 72 74 D1 76 78 C3 D0 88 90 D1 92 94 B1 C1 D0 104 106 D1 108 110 C3 D0 120 122 D1 124 126 A2 B0 C1 D0 136 138 D1 140 142 C3 D0 152 154 D1 156 158 B1 C1 D0 168 170 D1 172 174 C3 D0 184 186 D1 188 190 A3 B0 C1 D0 200 202 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 使用 mask 索引 mask = dfmi [( 'a' , 'foo' )] > 200 dfmi . loc [ idx [ mask , :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A3 B0 C1 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 给 loc 或 iloc 指定轴参数 loc 默认对行进行索引： dfmi . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] lvl0 a b lvl1 bar foo bah foo A0 B0 C1 D0 9 8 11 10 D1 13 12 15 14 C3 D0 25 24 27 26 D1 29 28 31 30 B1 C1 D0 41 40 43 42 D1 45 44 47 46 C3 D0 57 56 59 58 D1 61 60 63 62 A1 B0 C1 D0 73 72 75 74 D1 77 76 79 78 C3 D0 89 88 91 90 D1 93 92 95 94 B1 C1 D0 105 104 107 106 D1 109 108 111 110 C3 D0 121 120 123 122 D1 125 124 127 126 A2 B0 C1 D0 137 136 139 138 D1 141 140 143 142 C3 D0 153 152 155 154 D1 157 156 159 158 B1 C1 D0 169 168 171 170 D1 173 172 175 174 C3 D0 185 184 187 186 D1 189 188 191 190 A3 B0 C1 D0 201 200 203 202 D1 205 204 207 206 C3 D0 217 216 219 218 D1 221 220 223 222 B1 C1 D0 233 232 235 234 D1 237 236 239 238 C3 D0 249 248 251 250 D1 253 252 255 254 可以指定 axis 参数，指定需要索引的轴： dfmi . loc ( axis = 1 )[ \"a\" ] lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 C2 D0 17 16 ... ... ... A3 B1 C1 D1 237 236 C2 D0 241 240 D1 245 244 C3 D0 249 248 D1 253 252 [ 64 rows x 2 columns ] 重新赋值 df2 = dfmi . copy () df2 . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] = - 10 df2 df2 = dfmi . copy () df2 . loc [ idx [:, :, [ 'C1' , 'C3' ]], :] = df2 * 1000 df2 lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9000 8000 11000 10000 D1 13000 12000 15000 14000 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237000 236000 239000 238000 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249000 248000 251000 250000 D1 253000 252000 255000 254000 [ 64 rows x 4 columns ] 交叉选择 DataFrame 的 xs() 方法接受一个额外的参数，从而可以简便地在某个特定的多级索引中的某一个层级进行数据的选取。 df = pd . DataFrame ( np . random . randn ( 6 , 3 ), index = index [: 6 ]) df = df . T df first bar baz foo second one two one two one two 0 1.939044 0.588276 1.146525 -0.188147 -0.720676 1.451303 1 -0.028778 -0.897224 -0.038871 -0.485770 -0.958363 -0.963243 2 -0.911336 0.031492 0.795475 0.234746 0.361175 0.659001 .xs 方法默认 axis=0 ： df . xs ( \"bar\" , level = 'first' , axis = 1 ) df . xs ( \"one\" , level = 'second' , axis = 1 ) first bar baz foo 0 1.939044 1.146525 -0.720676 1 -0.028778 -0.038871 -0.958363 2 -0.911336 0.795475 0.361175 df . xs (( 'one' , 'bar' ), level = ( 'second' , 'first' ), axis = 1 ) first bar second one 0 1.939044 1 -0.028778 2 -0.911336 .xs 方法默认 drop_level=False ： df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = False ) first bar baz foo second one one one 0 1.939044 1.146525 -0.720676 1 -0.028778 -0.038871 -0.958363 2 -0.911336 0.795475 0.361175 df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = True ) first bar baz foo 0 1.939044 1.146525 -0.720676 1 -0.028778 -0.038871 -0.958363 2 -0.911336 0.795475 0.361175 Take方法 与 NumPy 的 ndarrays 相似，pandas的 Index ， Series ，和 DataFrame 也提供 take() 方法。他可以沿着某个维度，按照给定的索引取回所有的元素。这个给定的索引必须要是一个由整数组成的列表或者ndarray，用以指明在索引中的位置。 take 也可以接受负整数，作为相对于结尾的相对位置。 index = pd . Index ( np . random . randint ( 0 , 1000 , 10 )) print ( index ) positions = [ 0 , 9 , 3 ] print ( index [ positions ]) print ( index . take ( positions )) Int64Index([495, 309, 722, 91, 889, 309, 148, 970, 329, 776], dtype='int64') Int64Index([495, 776, 91], dtype='int64') Int64Index([495, 776, 91], dtype='int64') ser = pd . Series ( np . random . randn ( 10 )) print ( ser . iloc [ positions ]) print ( ser . take ( positions )) 0 0.591030 9 -0.593299 3 0.021434 dtype: float64 0 0.591030 9 -0.593299 3 0.021434 dtype: float64 对于 DataFrames 来说，这个给定的索引应当是一个一维列表或者ndarray，用于指明行或者列的位置。 frm = pd . DataFrame ( np . random . randn ( 5 , 3 )) print ( frm ) print ( frm . take ([ 1 , 4 , 3 ])) print ( frm . take ([ 0 , 2 ], axis = 1 )) 0 1 2 0 -0.019443 0.710586 0.481252 1 -0.181836 0.772916 0.783044 2 -1.793119 0.445353 1.196131 3 -1.040532 0.333872 -0.010054 4 0.351876 1.118853 0.093517 0 1 2 1 -0.181836 0.772916 0.783044 4 0.351876 1.118853 0.093517 3 -1.040532 0.333872 -0.010054 0 2 0 -0.019443 0.481252 1 -0.181836 0.783044 2 -1.793119 1.196131 3 -1.040532 -0.010054 4 0.351876 0.093517 需要注意的是， pandas对象的 take 方法并不会正常地工作在布尔索引上，并且有可能会返回一切意外的结果。 arr = np . random . randn ( 10 ) print ( arr ) print ( arr . take ([ False , False , True , True ])) print ( arr [[ 0 , 1 ]]) [-0.53649475 0.13255386 0.04098733 0.82386728 0.08692377 0.30652204 0.24007645 0.22604287 -0.53147612 2.34366636] [-0.53649475 -0.53649475 0.13255386 0.13255386] [-0.53649475 0.13255386] ser = pd . Series ( np . random . randn ( 10 )) print ( ser ) print ( ser . take ([ False , False , True , True ])) print ( ser . iloc [[ 0 , 1 ]]) 0 -0.103801 1 -1.621499 2 -0.028563 3 0.407877 4 -0.266058 5 1.390450 6 -1.002601 7 -0.335144 8 -0.461811 9 0.997019 dtype: float64 0 -0.103801 0 -0.103801 1 -1.621499 1 -1.621499 dtype: float64 0 -0.103801 1 -1.621499 dtype: float64 最后，关于性能方面的一个小建议，因为 take 方法处理的是一个范围更窄的输入，因此会比话实索引（fancy indexing）的速度快很多。 arr = np . random . randn ( 10000 , 5 ) indexer = np . arange ( 10000 ) random . shuffle ( indexer ) % timeit arr [ indexer ] % timeit arr . take ( indexer , axis = 0 ) 373 µs ± 46.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 132 µs ± 12.3 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each) ser = pd . Series ( arr [:, 0 ]) % timeit ser . iloc [ indexer ] % timeit ser . take ( indexer ) 336 µs ± 49.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 355 µs ± 60.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 分类索引 CategoricalIndex 分类索引 这种索引类型非常适合有重复的索引。这是一个围绕 Categorical 而创建的容器。这可以非常高效地存储和索引的具有大量重复元素的索引。 from pandas.api.types import CategoricalDtype df = pd . DataFrame ({ 'A' : np . arange ( 6 ), 'B' : list ( 'aabbca' )}) df [ 'B' ] = df [ 'B' ] . astype ( CategoricalDtype ( list ( 'cab' ))) print ( df , \" \\n \" ) print ( df . dtypes , \" \\n \" ) print ( df . B . cat . categories , \" \\n \" ) A B 0 0 a 1 1 a 2 2 b 3 3 b 4 4 c 5 5 a A int32 B category dtype : object Index ([ 'c' , 'a' , 'b' ], dtype = 'object' ) 通过设置索引将会建立一个 CategoricalIndex 分类索引. df2 = df . set_index ( 'B' ) print ( df2 . index ) CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') 使用 __getitem__/.iloc/.loc 进行索引，在含有重复值的 索引 上的工作原理相似。索引值 必须 在一个分类中，否者将会引发 KeyError 错误。 df2 . loc [ 'a' ] A B a 0 a 1 a 5 CategoricalIndex 在索引之后也会被 保留 : df2 . loc [ 'a' ] . index CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') 索引排序将会按照类别清单中的顺序进行（我们已经基于 CategoricalDtype(list('cab')) 建立了一个索引，因此排序的顺序是 cab ） df2 . sort_index () A B c 4 a 0 a 1 a 5 b 2 b 3 分组操作（Groupby）也会保留索引的全部信息。 df2 . groupby ( level = 0 ) . sum () df2 . groupby ( level = 0 ) . sum () . index CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') 重设索引的操作将会根据输入的索引值返回一个索引。传入一个列表，将会返回一个最普通的 Index ；如果使用类别对象 Categorical ，则会返回一个分类索引 CategoricalIndex ，按照其中 传入的 的类别值 Categorical dtype来进行索引。正如同你可以对 任意 pandas的索引进行重新索引一样，这将允许你随意索引任意的索引值，即便它们并 不存在 在你的类别对象中。 df2 . reindex ([ 'a' , 'e' ]) df2 . reindex ([ 'a' , 'e' ]) . index Index(['a', 'a', 'a', 'e'], dtype='object', name='B') df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) . index CategoricalIndex(['a', 'a', 'a', 'e'], categories=['a', 'b', 'c', 'd', 'e'], ordered=False, name='B', dtype='category') 间隔索引 0.20.0中新加入 IntervalIndex 和它自己特有的 IntervalDtype 以及 Interval 标量类型，在pandas中，间隔数据是获得头等支持的。 IntervalIndex 间隔索引允许一些唯一的索引，并且也是 cut() 和 qcut() 的返回类型 使用 间隔索引 来进行数据索引 df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 , 4 ]}, index = pd . IntervalIndex . from_breaks ([ 0 , 1 , 2 , 3 , 4 ])) df A (0, 1] 1 (1, 2] 2 (2, 3] 3 (3, 4] 4 在间隔序列上使用基于标签的索引 .loc ，正如你所预料到的，将会选择那个特定的间隔 df . loc [ 2 ] A 2 Name: (1, 2], dtype: int64 df . loc [[ 2 , 3 ]] A (1, 2] 2 (2, 3] 3 如果你选取了一个标签，被 包含 在间隔当中，这个间隔也将会被选择 df . loc [ 2.5 ] A 3 Name: (2, 3], dtype: int64 df . loc [[ 2.5 , 3.5 ]] A (2, 3] 3 (3, 4] 4 使用 Interval 来选择，将只返回严格匹配（从pandas0.25.0开始）。 df . loc [ pd . Interval ( 1 , 2 )] A 2 Name: (1, 2], dtype: int64 试图选择一个没有被严格包含在 IntervalIndex 内的区间 Interval ，将会出发 KeyError 错误。 try : df . loc [ pd . Interval ( 0.5 , 2.5 )] except KeyError as e : print ( \"KeyError:\" , e ) KeyError : Interval ( 0.5 , 2.5 , closed = 'right' ) 可以使用 overlaps() 来创建一个布尔选择器，来选中所有与 给定区间 ( Interval )重复的所有区间。 idxr = df . index . overlaps ( pd . Interval ( 0.5 , 2.5 )) print ( idxr ) print ( df [ idxr ]) [ True True True False] A (0, 1] 1 (1, 2] 2 (2, 3] 3 使用-cut-和-qcut来为数据分块使用 cut 和 qcut 来为数据分块 cut() 和 qcut() 都将返回一个分类 Categorical 对象，并且每个分块区域都会以 分类索引 IntervalIndex 的方式被创建并保存在它的 .categories 属性中。 c = pd . cut ( range ( 4 ), bins = 2 ) print ( c ) print ( c . categories ) [(-0.003, 1.5], (-0.003, 1.5], (1.5, 3.0], (1.5, 3.0]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] IntervalIndex([(-0.003, 1.5], (1.5, 3.0]], closed = 'right', dtype='interval[float64]') cut() 也可以接受一个 IntervalIndex 作为他的 bins 参数，这样可以使用一个非常有用的pandas的写法。 首先，我们调用 cut() 在一些数据上面，并且将 bins 设置为某一个固定的数 ，从而生成bins。 随后，我们可以在其他的数据上调用 cut() ，并传入 .categories 的值，作为 bins 参数。这样新的数据就也将会被分配到同样的bins里面 pd . cut ([ 0 , 3 , 5 , 1 ], bins = c . categories ) [(-0.003, 1.5], (1.5, 3.0], NaN, (-0.003, 1.5]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] 任何落在bins之外的数据都将会被设为 NaN 生成一定区间内的间隔 如果我们需要经常地使用步进区间，我们可以使用 interval_range() 函数，结合 start , end , 和 periods 来建立一个 IntervalIndex 对于数值型的间隔，默认的 interval_range 间隔频率是1，对于datetime类型的间隔则是日历日。 pd . interval_range ( start = 0 , end = 5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 ) pd . interval_range ( end = pd . Timedelta ( '3 days' ), periods = 3 ) IntervalIndex ( [ (0 days 00:00:00, 1 days 00:00:00 ] , ( 1 days 00 : 00 : 00 , 2 days 00 : 00 : 00 ] , ( 2 days 00 : 00 : 00 , 3 days 00 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) freq 参数可以被用来明确非默认的频率，并且可以充分地利用各种各样的 frequency aliases datetime类型的时间间隔。 pd . interval_range ( start = 0 , periods = 5 , freq = 1.5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 , freq = 'W' ) pd . interval_range ( start = pd . Timedelta ( '0 days' ), periods = 3 , freq = '9H' ) IntervalIndex ( [ (0 days 00:00:00, 0 days 09:00:00 ] , ( 0 days 09 : 00 : 00 , 0 days 18 : 00 : 00 ] , ( 0 days 18 : 00 : 00 , 1 days 03 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) 此外， closed 参数可以用来声明哪个边界是包含的。默认情况下，间隔的右界是包含的。 pd . interval_range ( start = 0 , end = 4 , closed = 'both' ) pd . interval_range ( start = 0 , end = 4 , closed = 'neither' ) IntervalIndex ( [ (0, 1), (1, 2), (2, 3), (3, 4) ] , closed = 'neither' , dtype = 'interval[int64]' ) v0.23.0新加入 使用 start , end , 和 periods 可以从 start 到 end （包含）生成一个平均分配的间隔，在返回 IntervalIndex 中生成 periods 这么多的元素（译者：区间）。 pd . interval_range ( start = 0 , end = 6 , periods = 4 ) pd . interval_range ( pd . Timestamp ( '2018-01-01' ), pd . Timestamp ( '2018-02-28' ), periods = 3 ) IntervalIndex ( [ (2018-01-01, 2018-01-20 08:00:00 ] , ( 2018 - 01 - 20 08 : 00 : 00 , 2018 - 02 - 08 16 : 00 : 00 ] , ( 2018 - 02 - 08 16 : 00 : 00 , 2018 - 02 - 28 ]] , closed = 'right' , dtype = 'interval[datetime64[ns]]' )","text_tokens":["0.341882","n","简便","numpy","251000","245","共享","类","一列","pprint","copy","全部","迭代","10","相对","\\","不会","连续","代码","152","结尾","算法","被","v.1915","10000","下面","218","计算","indexing","int64lndex","它们","要是","0.266058","很多","声明","转换","1.201346","156","所用","172","信息","freq","range","范围","0.112540","0.288168","频率","而","amd64","11000","0","处理","overlaps","frequency","1.146525","cat","intervaldtype","79","123","大量","转换成","对于","from","8","数","float64","e","0.345492","set","levels","改性","0.304102","截","0.324422","从而","0.897224","positions","breaks","以","20","：","中","timedelta64","0.445353","1.495862","0.53649475","料到","唯一","253000","2.653461","174","191","0.53147612","头等","该","5","行","这是","252000","0.588276","indexer","249","per","[","27","0.547680","185","固定","平均分","nan","len","进阶","日历","lists","w","233","16","8000","223","步进","存储","0.103801","比话实","适合","00","等价","01","90","如果","列出","负责管理","201","for","某","任何","60.5","标量","70","0.019443","调用","3","值时","136","表列出","1.939044","假设","通过","元","intersection","46.5","有效","得到","对应","243","msc","沿着","0.089988","rows","和","笛卡尔","第","等于","80","值","提供","而是","可修改性","139","存在","中新","建立","日","以及","正常","tuples","start","d0","import","非","充分","数值","首先","处","list","c1","整数","241","9h","482293","0.186548","84","neither","30","categorical","0.482293","dataframes","0.729063","89","0.82386728","切片","60","173","46","248","单个","基础","239000","09","periodindex","data","0.783044","将会","109","baz","主要","新","如同","那个","iloc","实际上","额外","h","看做","tools","就是","59","作为","155","astype","micolumns","970","b","错误","经常",".","0.197164","一切","0.530839","168","qcut","来说","*","这些","布尔值","loc","交叉","96","0.550252","75","时","int64","自","列","0.021434","datetime64","3.5","0.236898","142","0.795475","108","bar","251","132","xs","120","93","13","1.585440","0.275572","卡尔","围绕","2017","级","默认","一级","0.922200","修改","239","0.22604287","216","0.593299","任意","1.136562","288164","88","66","严格","间隔","只","two","增加","29","windows","用","需要","我们","0.837434","积","，","94","换成","赋值","说明","248000","指明","0.997019","更窄","pd","1.621499","dtypes","标签","为","pandas","用于","drop","0.456528","各种各样","03","138","fastpath","lvl1","as","0.093517","实际","237","\"","1.227126","0.801590","255000","匹配","240","print","多列","randn","1.040532","12000","-","否者","其中","miindex","已经","之后","40","15000","逻辑","等","所","43","组成","所有","拷贝","ns","指示","一定","0.137891","level","2.562845","float64index","操作","154","125","second","结构","fancy","mklbl","上面","均","62","std","一样","monotonic","254000","multiindex","差集","有","period","纳秒","112","获取","...","qux","12","both","15","0.809535","右界","字符","74","64","0.591030","上","197164","各值","0.167836","方面","2.34366636","a1","28","维度","0.445016","可","0.639738","0.481252","速度","参数","内容","按照","49.5","型","0.04098733","函数","df","dfmi","选中","给定","引发","返回","73","random","0.992456","each","自己","a","具有","1.258035","并","zip","datetimelndex","大于","250000","分配","ordered","落","哪个","13789062153880624","0.312848","表列","x","各种","元素","在","77","153","mean","91","def","地","immutable","categoricalindex","array","137891","help","0.033371","利用","255","}","45","arr","groupby","08","0.717976","1.232934","进行","传入","0.028778","这样","244","同样","like","属性","delete","写法","1.347849","0.562265","2.069830","取回","保存","高效","0.08692377","按","不同","18","这么","140","0.288737","并集","0.003","尽量","当中","产生","0.709287"," ","234","重要","对行","cab","25","series","235","位置","except","表示","0.038871","轴","0.050362","一个","你","容器","127","0.821702","4","int32","不可","%","类型","的","union","9000","每个","0.031492","用来","集合","方式","多","0.659001","355","0.456956","用以","take","runs","1.192690","保留","9","只能","92","143","会","2.555574","由","0.511166","122","205","采用","236","_","当","tuple","0.222434","interval","loop","106","0.602663","应当","且","了","2","设为","针对","0.485770","关于","选择器","26","idxr","c3","没有","平均分配","每级","237000","6","各级","到","行列","1.177815","72","0.080923","'","__","246",")","是","68","接受","使用","false","三行","closed","即便","来","lvl0","数组","58","187","{","12.3","边界","0.924746","v0.23","下标","200","最","字符串","0.828843","b0","timeit",":","a0","传递","0.268357","31","检测","常见","categories","157","比如","integrity","232","0.24007645","指定","名称","一些","也","普通","因为","u3","其他","级别","object","495","顺序","timestamp","多层","重复","0.507510","从","0.514439","7","right","219","14000","加入","104","好","±","dtype","0.351876","可以","aabbca","206",",","randint","0.094162","0.361175","重新","@","管理","泛化","loops","sum","159","0.664171","indexslice","(","0.568909","0.150356","里面","242","114","124","columns","将","各样","aliases","1000","获得","107","同一","一行","42","0.335144","2.219605","0.008364","连接",">","timedelta","category","17","并且","重设","iterables","性能","intervalindex","或","1.314889","186","api","元组","支持","722","0.963243","cols","明确","1.002601","区域","正","继承","另","则","正如","均分","s%","188","61","days","这种","identity","名字","0.836214","k","0.710586","（","变","170","57","1.196131","直接","sortorder","0.354819","1.171307","0.311450","0.30652204","才能","意外","rangeindex","0.693254","148","下","pandas0.25","多个","220","python","250","这","选择","c","name","层次化","373","0.20","shuffle","np","方法","0.165956","202","true","0.234746","平均","二维","102","出发","bins","数据","arange","选取","one","axis","label","与","2.5","特殊","区间","都","a2","82","要","95","try","in","1.022346","126","889","a3","前","periodlndex","329","”","frm","d","dataframe","309","dev","0.188147","0.479770","arrays","一维","44","分类索引","之间","于","tupleize","构建","sort","之外","对象","工作","0.587371","列表","222","0.958363","快","labels","204","13000","1.451303","问题","有关","b1","categoricaldtype","getitem","names","105","他","0.911336","交集","1.599342","输入","0.007421","分块","某个","µ","78","代表","247","175","is","预料","1.793119","给","建议","foo","“","常见问题","含有","回答","形式","c0","86","periods","位","排序","1.118853","根据","每","47","/","776","19","bah","slice","轴上","1.102600","0.473748","可能","是否","0.060572","）","；","特定","小","types","datetimeindex","多级","171","0.461811","110","0.407877","reindex","24","100","0.288164","41","137","负责","0.720676","原理","特有","timedeltaindex","i","253","169","结果","类别","reshape","class","分类","t","111","first","118","unique","0.546165","各","0.524887","使","121","238000","删除","insert","ndarray","分组","2.322061","随意","创建","14","0.772916","给出","158","布尔","插入","0.028563","1.314744","184","1.546802","bit","0.5","相似","不","prefix","]","56","0.680016","df2","<","249000","ndarrays","结合","非常适合","一对","数据结构","c2","0.662711","它","2018","内部","此外","数据类型","0.938933","1.242805","336","207","安全","s","end","mask","负","kwargs","11","0.13255386","层级","frame","基于","index","=","必须","idx","3.7","141","最后","因此","int64index","包含","datetime","索引","189","cut","就","层次","对","情况","221","或者","清单","内","。","序列","verify","190","0.573775","设置","append","76","02","d1","116","217","0.010054","product","1.5","ser","允许","abcde","1.306938","1.390450","0.333872","别的","非常","isin","236000","238","1","252","这个","diff","203","0.181836","注意","keyerror","63","0.758100","#","时间","0.786178","本","0.190650","预料到","of","none","随后","0.158560","uint64index","试图","示例","以下","译者","生成","0.444301","开始","254","3.0","return","98","有用"],"title":"7.4.索引对象","title_tokens":["对象","7.4",".","索引"]},{"location":"pandas笔记/7.4.索引对象.html#_1","text":"pandas的索引对象负责管理轴标签和其他元数据（比如轴名称等）。构建Series或DataFrame时，所用到的任何数组或其他序列的标签都会被转换成一个Index，而 index对象是不可变的 ，也就是index对象的元素不可修改（immutable）。如果要修改index内容，只能通过重新赋值的形式。 不可修改性非常重要，因为这样才能使Index对象在多个数据结构之间安全共享。 下表列出了pandas中主要的Index对象： 类 说明 Index 最泛化的Index对象，将轴标签表示为一个由Python对象组成的NumPy 数组 Int64lndex 针对整数的特殊Index Multiindex “层次化”索引对象，表示单个轴上的多层索引。可以看做由元组组成的数组 Datetimelndex 存储纳秒级时间截（用NumPy的datetime64类型表示） Periodlndex 针对Period数据（时间间隔）的特殊Index 以下是pandas中所有Index对象： [ 'CategoricalIndex' , 'DatetimeIndex' , 'Float64Index' , 'Index' , 'Int64Index' , 'IntervalIndex' , 'MultiIndex' , 'PeriodIndex' , 'RangeIndex' , 'TimedeltaIndex' , 'UInt64Index' ] class pandas.Index(data=None, dtype=None, copy=False, name=None, fastpath=False, tupleize_cols=True) ：创建 Index 对象。 参数： data ：一个 array-like ，必须是一维的 name ：一个字符串，为 Index 的名字。 dtype ：指定数据类型。如果为 None ，则默认为 object copy ：一个布尔值。如果为 True ，则拷贝输入数据 data tupleize_cols ：一个布尔值，如果可能则尽量创建 MultiIndex 对象 每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。下表列出了这些函数： 说明 方法 append 连接另一个index对象.产生一个新的Index diff 计算差集，并得到一个Index intersection 计算交集 union 计算并集 isin 计算一个指示各值是否都包含在参数集合中的布尔型数组 delete 删除索引i处的元素，并得到新的Index drop 删除传入的值.并得到新的Index insert 将元素插入到索引i处，并得到新的Index is_monotonic 当各元素均大于等于前一个元素时，返回TRUE is_unique 当Index没有重复值时，返回True unique 计算Index中唯一值的数组","text_tokens":["轴","一个","时","numpy","共享","数据","不可","类","datetime64","的","类型","union","每个","copy","特殊","集合","都","要","级","默认","前","修改","periodlndex","被","”","dataframe","只能","会","由","间隔","一维","int64lndex","计算","_","之间","它们","tupleize","构建","当","用","转换","对象","所用","，","换成","赋值","说明","了","标签","而","pandas","为","针对","用于","有关","问题","drop","fastpath","没有","交集","输入","转换成","is","到","'","“","改性","-","是","截",")","形式","回答","常见问题","false","：","中","逻辑","等","所","数组","组成","所有","拷贝","指示","唯一","轴上","可能","float64index","是否","）","最","字符串","该","结构","均","[","datetimeindex","常见","比如","monotonic","负责","指定","名称","multiindex","timedeltaindex","一些","也","差集","i","有","因为","period","其他","object","存储","class","多层","纳秒","重复","unique","如果","各","字符","使","列出","负责管理","dtype","可以","删除","任何","insert","创建",",","值时","各值","表列出","通过","元","重新","泛化","管理","布尔","可","参数","这些","内容","得到","intersection","型","插入","(","函数","和","不","]","等于","数据结构","值","将","可修改性","返回","数据类型","连接","安全","并","datetimelndex","大于","index","=","表列","必须","处","整数","intervalindex","或","元素","在","int64index","元组","包含","索引","层次","cols","另","则","immutable","categoricalindex","。","序列","array","设置","append","单个","名字","periodindex","data","（","变","传入","主要","新","这样","like","才能","属性","非常","isin","rangeindex","delete","下","看做","diff","就是","多个","python","时间","并集","name","层次化","none","尽量","uint64index",".","产生","方法"," ","重要","以下","series","true","布尔值","表示"],"title":"索引对象","title_tokens":["对象","索引"]},{"location":"pandas笔记/7.4.索引对象.html#multiindex","text":"MultiIndex 代表的是多级索引对象。它继承自 Index ，其中的多级 label 采用元组对象来表示。在 MultiIndex 内部，并不直接保存元组对象，而是使用多个 Index 对象保存索引中每级的 label 。 class pandas.MultiIndex(levels=None, labels=None, sortorder=None, names=None, copy=False, verify_integrity=True, _set_identity=True, name=None, **kwargs) 参数： levels ：一个数组的列表，给出了每一级的 level 。 labels ：一个数组的列表，给出了每一级 level 的下标。第 i 级 label 是这样产生的： 首先获取 labels[i] ，它是一个下标序列，代表第 级。 - 假设第 k 位置为整数 3，在第 级第 位的 label 就是 levels[i][3] 。- sortorder ：一个整数，给出了已经排序好了的 level 级别。 names ：一个字符串序列，给出了每个 Index 的 name 。其中每个级别对应一个 Index copy ：一个布尔值。如果为 True ，则拷贝基础数据 verify_integrity ：一个布尔值。如果为 True ，则检测各级别的 label/level 都是连续的且有效的 name ：指定了本 MultiIndex 的名字 也可以通过下面的类方法来创建 MultiIndex ： MultiIndex.from_arrays(arrays[, sortorder, ...]) ：将二维序列转换为 MultiIndex 。其中 arrays 为 array-like 的序列，每个 array-like 按顺序的给出了一列 label （一个级别） MultiIndex.from_tuples(tuples[, sortorder, ...]) ：将元组序列转换为 MultiIndex 。其中 tuples 为 tuple-like 的序列，每个 array-like 按顺序的给出了一行 label 对（不同级别的一对） MultiIndex.from_product(iterables[, ...]) ：根据多个可迭代对象生成一个 MultiIndex ，其中使用笛卡尔积的算法。其中 iterables 为可迭代对象的序列 你也可以通过传递一个元组列表给 Index() ，并且将 tupleize_cols 设置为 True 来创建 MultiIndex","text_tokens":["一个","自","你","数据","类","一列","的","label","每个","copy","迭代","都","卡尔","连续","一级","级","算法","下面","arrays","采用","_","tuple","tupleize","转换","对象","积","，","列表","且","labels","了","为","pandas","names","每级","代表","各级","from","给","set","levels","-","是",")","其中","使用","false","已经","：","中","位","排序","来","根据","数组","每","拷贝","/","level","下标","）","字符串","传递","[","多级","检测","integrity","指定","multiindex","i","也","级别","class","顺序","获取","...","如果","好","字符","可以","创建",",","3","假设","给出","通过","可","布尔","有效","参数","对应","(","不","]","笛卡尔","第","一对","将","而是","它","内部","一行","并","tuples","kwargs","并且","首先","index","=","iterables","整数","在","元组","索引","cols","对","继承","则","。","序列","verify","array","设置","identity","名字","基础","k","product","（","直接","sortorder","这样","like","别的","保存","就是","按","不同","多个","本","name","none",".","产生","方法"," ","生成","true","*","布尔值","位置","二维","表示"],"title":"多级索引 MultiIndex","title_tokens":["多级"," ","multiindex","索引"]},{"location":"pandas笔记/7.4.索引对象.html#tuplemultiindex","text":"import pprint arrays = [ [ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]] tuples = list ( zip ( * arrays )) pprint . pprint ( tuples ) print ( \"\" ) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )], names = [ 'first' , 'second' ]) pd . Series ( np . random . randn ( 8 ), index = index ) first second bar one 0.546165 two 1.495862 baz one -0.786178 two 0.312848 foo one -0.473748 two 0.186548 qux one 0.836214 two -0.547680 dtype: float64","text_tokens":["first","0.186548","\"","0.546165","from","8","print","dtype","randn","foo","pprint","'","one","-","float64",")",",","bar","0.836214","(","baz","1.495862","]","0.473748","arrays","second","two","_",":","[","random","0.547680","0.786178","multiindex","pd","zip",".","tuples","np"," ","import","names","series","0.312848","*","index","=","list","qux"],"title":"从tuple创建MultiIndex","title_tokens":["multiindex","tuple","创建","从"]},{"location":"pandas笔记/7.4.索引对象.html#iterablesmultiindex","text":"iterables = [[ 'bar' , 'baz' , 'foo' , 'qux' ], [ 'one' , 'two' ]] pprint . pprint ( iterables ) print ( \"\" ) index = pd . MultiIndex . from_product ( iterables , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [['bar', 'baz', 'foo', 'qux'], ['one', 'two']] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names = ['first', 'second'])","text_tokens":["first","\"","from","print","foo","one","'","pprint",")",",","bar","product","(","baz","]","second","two","_","[","multiindex","pd","."," ","names","iterables","index","=","qux"],"title":"从iterables创建MultiIndex","title_tokens":["iterables","multiindex","创建","从"]},{"location":"pandas笔记/7.4.索引对象.html#dataframemultiindex","text":"df = pd . DataFrame ([[ 'bar' , 'one' ], [ 'bar' , 'two' ], [ 'foo' , 'one' ], [ 'foo' , 'two' ]], columns = [ 'first' , 'second' ]) pprint . pprint ( df ) print ( \"\" ) index = pd . MultiIndex . from_frame ( df ) pprint . pprint ( index ) first second 0 bar one 1 bar two 2 foo one 3 foo two MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' )], names = [ 'first' , 'second' ])","text_tokens":["first","\"","from","print","foo","one","'","pprint",")",",","bar","3","(","dataframe","df","]","columns","second","two","_","1","[","multiindex","pd",".","2"," ","0","names","frame","index","="],"title":"从DataFrame创建MultiIndex","title_tokens":["multiindex","创建","从","dataframe"]},{"location":"pandas笔记/7.4.索引对象.html#list-likemultiindex","text":"arrays = [ np . array ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ]), np . array ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ])] pprint . pprint ( arrays ) pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) [array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='<U3'), array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='<U3')] 0 1 2 3 bar one -0.089988 1.192690 -0.938933 0.821702 two -0.112540 0.587371 0.165956 0.050362 baz one -0.288737 0.709287 -0.479770 -0.007421 two 2.653461 1.258035 -0.837434 -1.306938 foo one 0.345492 0.311450 -0.008364 0.060572 two -0.304102 0.268357 0.680016 0.445016 qux one -0.809535 1.232934 -0.550252 -2.219605 two 0.729063 -0.992456 0.094162 -0.573775 # s = pd.Series(np.random.randn(8), index=arrays) # s","text_tokens":["0.050362","0.809535","8","0.821702","4","dtype","randn","foo","one","'","pprint","-","0.345492",")",",","bar","3","0.304102","array","0.729063","0.573775","0.094162","0.445016","1.232934","0.089988","1.192690","(","baz","dataframe","]","2.653461","1.306938","0.680016","<","0.311450","0.060572","0.479770","arrays","two","1","0.550252","0.268357","[","random","0.938933","0.992456","0.837434","0.587371","0.288737","#","1.258035","0.112540","0.008364","2.219605","pd","s",".","2","np","0.709287","u3"," ","0.165956","0","series","index","=","0.007421","qux"],"title":"从list-like创建MultiIndex","title_tokens":["multiindex","创建","-","list","从","like"]},{"location":"pandas笔记/7.4.索引对象.html#_2","text":"","text_tokens":[],"title":"选择数据","title_tokens":["选择","数据"]},{"location":"pandas笔记/7.4.索引对象.html#_3","text":"创建示例dataframe： tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 3 , 8 ), index = [ 'A' , 'B' , 'C' ], columns = index ) df first bar baz foo qux second one two one two one two one two A 0.137891 -0.288164 -0.236898 -1.201346 0.482293 0.197164 -0.080923 -0.190650 B 0.602663 -0.511166 -0.033371 -0.924746 -1.022346 -2.069830 2.562845 1.347849 C -0.758100 -0.662711 0.507510 0.828843 -0.514439 0.324422 -0.664171 -0.158560 dataframe的 [] 选择列： df [ \"bar\" ] second one two A 0.137891 -0.288164 B 0.602663 -0.511166 C -0.758100 -0.662711 [] 使用多级索引： # 实际上与 df[(\"bar\", \"one\")] 等价 df [ \"bar\" , \"one\" ] A 0.137891 B 0.602663 C -0.758100 Name: (bar, one), dtype: float64 [[]] 选择多列： df [[ \"bar\" , \"baz\" , \"foo\" ]] # list first bar baz foo second one two one two one two A 0.137891 -0.288164 -0.236898 -1.201346 0.482293 0.197164 B 0.602663 -0.511166 -0.033371 -0.924746 -1.022346 -2.069830 C -0.758100 -0.662711 0.507510 0.828843 -0.514439 0.324422 () 用于同一轴的多级索引： df [[( \"bar\" , \"one\" ), ( \"baz\" , \"one\" )]] # list of tuples first bar baz second one one A 0.137891 -0.236898 B 0.602663 -0.033371 C -0.758100 0.507510 # 行列索引 print ( df . loc [ \"A\" , \"bar\" ], \" \\n \" ) # () 用于同一轴的多级索引 print ( df . loc [ \"A\" , ( \"bar\" , \"one\" )], \" \\n \" ) # [] 用于增加轴 以下三行代码等价 print ( df . loc [ \"A\" , [( \"bar\" , \"one\" )]], \" \\n \" ) print ( df . loc [ \"A\" , ( \"bar\" , [ \"one\" ])], \" \\n \" ) print ( df . loc [ \"A\" , ([ \"bar\" ], \"one\" )], \" \\n \" ) # [] 用于增加轴 print ( df . loc [ \"A\" , [ \"bar\" ]], \" \\n \" ) second one 0 . 137891 two - 0 . 288164 Name : A , dtype : float64 0 . 13789062153880624 first second bar one 0 . 137891 Name : A , dtype : float64 first second bar one 0 . 137891 Name : A , dtype : float64 first second bar one 0 . 137891 Name : A , dtype : float64 first second bar one 0 . 137891 two - 0 . 288164 Name : A , dtype : float64 # tuple of lists print ( df . loc [ \"A\" , ([ \"bar\" , \"foo\" ], [ \"one\" , \"two\" ])], \" \\n \" ) # list of tuples print ( df . loc [ \"A\" , [( \"bar\" , \"one\" ), ( \"foo\" , \"two\" )]], \" \\n \" ) first second bar one 0 . 137891 two - 0 . 288164 foo one 0 . 482293 two 0 . 197164 Name : A , dtype : float64 first second bar one 0 . 137891 foo two 0 . 197164 Name : A , dtype : float64","text_tokens":["轴","n","列","one","的","0.236898","与","bar","1.022346","\\","代码","dataframe","288164","0.511166","two","_","增加","tuple","1.201346","0.602663","pd","用于","0","names","实际","\"","from","8","行列","多列","print","randn","0.080923","foo","float64","'","-",")","0.324422","使用","三行","：","0.137891","0.924746","2.562845","0.828843","second",":","[","多级","0.288164","multiindex","lists","0.507510","等价","0.514439","qux","first","dtype","创建",",","3","197164","0.664171","(","df","]","columns","0.662711","random","a","同一","tuples","13789062153880624","index","=","list","482293","索引","0.482293","137891","0.033371","baz","实际上","1.347849","2.069830","0.758100","#","c","选择","0.190650","name","of","b","0.158560",".","示例","np","0.197164"," ","以下","loc"],"title":"列索引是多级索引","title_tokens":["索引","多级","是","列"]},{"location":"pandas笔记/7.4.索引对象.html#_4","text":"df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) df 0 1 2 3 bar one -0.354819 1.546802 -0.150356 -0.801590 two 0.288168 -1.177815 0.222434 -0.717976 baz one -1.585440 0.456956 0.275572 1.242805 two 1.102600 -1.314744 -1.171307 -2.322061 foo one 0.456528 0.922200 1.599342 1.136562 two 0.524887 -0.167836 -1.314889 0.639738 qux one -0.530839 -0.562265 -0.444301 1.227126 two -0.693254 2.555574 0.341882 -0.568909 df . loc [ 'bar' , [ 0 , 1 ]] 0 1 one -0.354819 1.546802 two 0.288168 -1.177815 df . loc [([ 'bar' ], \"one\" ), [ 0 , 1 ]] # df.loc[(['bar'], \"one\"), (0, 1)] 0 1 bar one -0.354819 1.546802","text_tokens":["1.314889","0.341882","1.227126","\"","0.801590","8","0.524887","1.177815","4","randn","foo","one","2.322061","'","-",")",",","3","bar","0.167836","1.585440","0.275572","0.639738","0.456956","0.922200","0.717976","1.314744","1.546802","(","baz","0.150356","dataframe","df","1.102600","0.354819","1.171307","1.136562","0.568909","]","2.555574","arrays","0.693254","0.562265","1","two","0.222434","[","random","1.242805","#","0.288168","pd",".","2","np","0.456528"," ","0","0.530839","0.444301","loc","index","=","1.599342","qux"],"title":"行索引是多级索引","title_tokens":["行","多级","是","索引"]},{"location":"pandas笔记/7.4.索引对象.html#_5","text":"","text_tokens":[],"title":"选择数据进阶","title_tokens":["选择","进阶","数据"]},{"location":"pandas笔记/7.4.索引对象.html#_6","text":"def mklbl ( prefix , n ): return [ \" %s%s \" % ( prefix , i ) for i in range ( n )] miindex = pd . MultiIndex . from_product ([ mklbl ( 'A' , 4 ), mklbl ( 'B' , 2 ), mklbl ( 'C' , 4 ), mklbl ( 'D' , 2 )]) micolumns = pd . MultiIndex . from_tuples ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) print ( miindex , \" \\n \" ) print ( micolumns , \" \\n \" ) MultiIndex ([( 'A0' , 'B0' , 'C0' , 'D0' ), ( 'A0' , 'B0' , 'C0' , 'D1' ), ( 'A0' , 'B0' , 'C1' , 'D0' ), ( 'A0' , 'B0' , 'C1' , 'D1' ), ( 'A0' , 'B0' , 'C2' , 'D0' ), ( 'A0' , 'B0' , 'C2' , 'D1' ), ( 'A0' , 'B0' , 'C3' , 'D0' ), ( 'A0' , 'B0' , 'C3' , 'D1' ), ( 'A0' , 'B1' , 'C0' , 'D0' ), ( 'A0' , 'B1' , 'C0' , 'D1' ), ( 'A0' , 'B1' , 'C1' , 'D0' ), ( 'A0' , 'B1' , 'C1' , 'D1' ), ( 'A0' , 'B1' , 'C2' , 'D0' ), ( 'A0' , 'B1' , 'C2' , 'D1' ), ( 'A0' , 'B1' , 'C3' , 'D0' ), ( 'A0' , 'B1' , 'C3' , 'D1' ), ( 'A1' , 'B0' , 'C0' , 'D0' ), ( 'A1' , 'B0' , 'C0' , 'D1' ), ( 'A1' , 'B0' , 'C1' , 'D0' ), ( 'A1' , 'B0' , 'C1' , 'D1' ), ( 'A1' , 'B0' , 'C2' , 'D0' ), ( 'A1' , 'B0' , 'C2' , 'D1' ), ( 'A1' , 'B0' , 'C3' , 'D0' ), ( 'A1' , 'B0' , 'C3' , 'D1' ), ( 'A1' , 'B1' , 'C0' , 'D0' ), ( 'A1' , 'B1' , 'C0' , 'D1' ), ( 'A1' , 'B1' , 'C1' , 'D0' ), ( 'A1' , 'B1' , 'C1' , 'D1' ), ( 'A1' , 'B1' , 'C2' , 'D0' ), ( 'A1' , 'B1' , 'C2' , 'D1' ), ( 'A1' , 'B1' , 'C3' , 'D0' ), ( 'A1' , 'B1' , 'C3' , 'D1' ), ( 'A2' , 'B0' , 'C0' , 'D0' ), ( 'A2' , 'B0' , 'C0' , 'D1' ), ( 'A2' , 'B0' , 'C1' , 'D0' ), ( 'A2' , 'B0' , 'C1' , 'D1' ), ( 'A2' , 'B0' , 'C2' , 'D0' ), ( 'A2' , 'B0' , 'C2' , 'D1' ), ( 'A2' , 'B0' , 'C3' , 'D0' ), ( 'A2' , 'B0' , 'C3' , 'D1' ), ( 'A2' , 'B1' , 'C0' , 'D0' ), ( 'A2' , 'B1' , 'C0' , 'D1' ), ( 'A2' , 'B1' , 'C1' , 'D0' ), ( 'A2' , 'B1' , 'C1' , 'D1' ), ( 'A2' , 'B1' , 'C2' , 'D0' ), ( 'A2' , 'B1' , 'C2' , 'D1' ), ( 'A2' , 'B1' , 'C3' , 'D0' ), ( 'A2' , 'B1' , 'C3' , 'D1' ), ( 'A3' , 'B0' , 'C0' , 'D0' ), ( 'A3' , 'B0' , 'C0' , 'D1' ), ( 'A3' , 'B0' , 'C1' , 'D0' ), ( 'A3' , 'B0' , 'C1' , 'D1' ), ( 'A3' , 'B0' , 'C2' , 'D0' ), ( 'A3' , 'B0' , 'C2' , 'D1' ), ( 'A3' , 'B0' , 'C3' , 'D0' ), ( 'A3' , 'B0' , 'C3' , 'D1' ), ( 'A3' , 'B1' , 'C0' , 'D0' ), ( 'A3' , 'B1' , 'C0' , 'D1' ), ( 'A3' , 'B1' , 'C1' , 'D0' ), ( 'A3' , 'B1' , 'C1' , 'D1' ), ( 'A3' , 'B1' , 'C2' , 'D0' ), ( 'A3' , 'B1' , 'C2' , 'D1' ), ( 'A3' , 'B1' , 'C3' , 'D0' ), ( 'A3' , 'B1' , 'C3' , 'D1' )], ) MultiIndex ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ])","text_tokens":["n","\"","from","4","print","for","%","foo","'","def",")",",","bar","c0","a2","s%","miindex","=","a1","in","d1","\\","lvl0","a3","product","(","d","prefix","bah","]","b0","c2","_","mklbl",":","a0","[","a","c","micolumns","range","b","multiindex","s","pd","i",".","2","b1","tuples"," ","d0","names","lvl1","c3","return","c1"],"title":"创建索引","title_tokens":["创建","索引"]},{"location":"pandas笔记/7.4.索引对象.html#_7","text":"dfmi = pd . DataFrame ( np . arange ( len ( miindex ) * len ( micolumns )) . reshape (( len ( miindex ), len ( micolumns ))), index = miindex , columns = micolumns ) . sort_index () . sort_index ( axis = 1 ) dfmi lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237 236 239 238 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249 248 251 250 D1 253 252 255 254 [ 64 rows x 4 columns ]","text_tokens":["245","4","arange","axis","bar","251","10","13","a3","239","dataframe","9","236","_","sort","254","pd","2","b1","0","lvl1","c3","6","247","237","8","240","foo","246",")","c0","miindex","lvl0","19","bah","b0","5","a0","249","[","len","253","16","reshape","7","...","12","15","64","14",",","3","243","(","rows","]","242","dfmi","columns","c2","a","d0","17","11","index","=","c1","241","x","255","d1","248","244","238","1","252","18","250","micolumns","b",".","np"," ","*"],"title":"创建示例数据","title_tokens":["示例","创建","数据"]},{"location":"pandas笔记/7.4.索引对象.html#_8","text":"","text_tokens":[],"title":"使用切片","title_tokens":["使用","切片"]},{"location":"pandas笔记/7.4.索引对象.html#slice","text":"dfmi . loc [( slice ( 'A1' , 'A3' ), slice ( None ), [ 'C1' , 'C3' ]), :] dfmi . loc [ 'A1' , ( slice ( None ), 'foo' )] lvl0 a b lvl1 foo foo B0 C0 D0 64 66 D1 68 70 C1 D0 72 74 D1 76 78 C2 D0 80 82 D1 84 86 C3 D0 88 90 D1 92 94 B1 C0 D0 96 98 D1 100 102 C1 D0 104 106 D1 108 110 C2 D0 112 114 D1 116 118 C3 D0 120 122 D1 124 126","text_tokens":["90","102","78","118","84","104","74","72","64","foo","'","70",")",",","68","108","c0","82","86","120","76","a1","d1","126","lvl0","116","a3","(","slice","]","92","dfmi","114","88","66","122","b0","80","124","c2",":","112","[","110","a","106","94","100","none","b",".","b1"," ","d0","lvl1","c3","loc","98","c1","96"],"title":"slice","title_tokens":["slice"]},{"location":"pandas笔记/7.4.索引对象.html#indexslice","text":"idx = pd . IndexSlice dfmi . loc [ idx [:, :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A0 B0 C1 D0 8 10 D1 12 14 C3 D0 24 26 D1 28 30 B1 C1 D0 40 42 D1 44 46 C3 D0 56 58 D1 60 62 A1 B0 C1 D0 72 74 D1 76 78 C3 D0 88 90 D1 92 94 B1 C1 D0 104 106 D1 108 110 C3 D0 120 122 D1 124 126 A2 B0 C1 D0 136 138 D1 140 142 C3 D0 152 154 D1 156 158 B1 C1 D0 168 170 D1 172 174 C3 D0 184 186 D1 188 190 A3 B0 C1 D0 200 202 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254","text_tokens":["142","108","a2","10","120","126","a3","152","216","92","218","88","122","44","236","106","156","94","172","222","254","pd","204","b1","138","26","lvl1","c3","78","8","72","foo","'","40","lvl0","58","174","200","b0","154",":","a0","62","[","110","24","232","12","90","104","74","206","14",",","136","28","a1","158","indexslice","184","56","]","dfmi","124","a","42","d0","=","idx","c1","186","30","190","188","60","76","46","d1","248","170","238","252","220","140","250","b","."," ","234","168","202","loc"],"title":"IndexSlice","title_tokens":["indexslice"]},{"location":"pandas笔记/7.4.索引对象.html#mask","text":"mask = dfmi [( 'a' , 'foo' )] > 200 dfmi . loc [ idx [ mask , :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A3 B0 C1 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254","text_tokens":["foo","'","206",")",",","d1","248","lvl0","a3","(","216","]","218","dfmi","200","b0","236","238",":","252","[","220","a","250","254","222","232","b","204",">",".","b1"," ","234","d0","mask","lvl1","c3","loc","=","idx","c1"],"title":"使用 mask 索引","title_tokens":["mask","使用"," ","索引"]},{"location":"pandas笔记/7.4.索引对象.html#lociloc","text":"loc 默认对行进行索引： dfmi . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] lvl0 a b lvl1 bar foo bah foo A0 B0 C1 D0 9 8 11 10 D1 13 12 15 14 C3 D0 25 24 27 26 D1 29 28 31 30 B1 C1 D0 41 40 43 42 D1 45 44 47 46 C3 D0 57 56 59 58 D1 61 60 63 62 A1 B0 C1 D0 73 72 75 74 D1 77 76 79 78 C3 D0 89 88 91 90 D1 93 92 95 94 B1 C1 D0 105 104 107 106 D1 109 108 111 110 C3 D0 121 120 123 122 D1 125 124 127 126 A2 B0 C1 D0 137 136 139 138 D1 141 140 143 142 C3 D0 153 152 155 154 D1 157 156 159 158 B1 C1 D0 169 168 171 170 D1 173 172 175 174 C3 D0 185 184 187 186 D1 189 188 191 190 A3 B0 C1 D0 201 200 203 202 D1 205 204 207 206 C3 D0 217 216 219 218 D1 221 220 223 222 B1 C1 D0 233 232 235 234 D1 237 236 239 238 C3 D0 249 248 251 250 D1 253 252 255 254 可以指定 axis 参数，指定需要索引的轴： dfmi . loc ( axis = 1 )[ \"a\" ] lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 C2 D0 17 16 ... ... ... A3 B1 C1 D1 237 236 C2 D0 241 240 D1 245 244 C3 D0 249 248 D1 253 252 [ 64 rows x 2 columns ]","text_tokens":["轴","75","127","245","4","axis","142","的","108","bar","251","a2","10","95","120","93","13","126","a3","默认","152","239","216","9","143","92","218","88","205","122","44","236","29","需要","106","156","94","172","222","254","，","204","2","b1","0","138","105","26","lvl1","c3","79","123","78","175","237","\"","8","240","72","foo","'",")","c0","：","40","lvl0","43","47","58","187","bah","174","191","200","b0","125","154","5",":","a0","249","62","[","27","31","171","110","185","24","41","137","157","232","指定","253","169","233","16","223","111","...","12","90","219","15","104","121","74","201","可以","64","206","14",",","136","28","a1","158","参数","159","184","(","rows","56","]","dfmi","124","columns","c2","139","73","107","a","42","207","d0","17","11","141","=","c1","241","x","186","索引","189","77","30","153","221","91","89","190","188","60","61","173","76","46","d1","248","255","45","217","57","170","进行","109","244","238","1","252","203","63","220","59","140","155","250","b","."," ","234","对行","168","25","235","202","loc"],"title":"给 loc或iloc 指定轴参数","title_tokens":["或","轴"," ","给","参数","loc","iloc","指定"]},{"location":"pandas笔记/7.4.索引对象.html#_9","text":"df2 = dfmi . copy () df2 . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] = - 10 df2 df2 = dfmi . copy () df2 . loc [ idx [:, :, [ 'C1' , 'C3' ]], :] = df2 * 1000 df2 lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9000 8000 11000 10000 D1 13000 12000 15000 14000 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237000 236000 239000 238000 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249000 248000 251000 250000 D1 253000 252000 255000 254000 [ 64 rows x 4 columns ]","text_tokens":["251000","245","4","axis","9000","bar","copy","10","a3","10000","248000","13000","2","b1","11000","0","lvl1","c3","237000","6","247","255000","240","foo","'","12000","-","246",")","c0","15000","lvl0","19","bah","253000","b0","5",":","a0","252000","[","254000","16","8000","7","...","14000","238000","64",",","3","loc","243","(","rows","]","df2","242","249000","dfmi","columns","c2","1000","a","250000","d0","17","=","idx","c1","241","x","d1","239000","244","236000","1","18","b","."," ","*"],"title":"重新赋值","title_tokens":["重新","赋值"]},{"location":"pandas笔记/7.4.索引对象.html#_10","text":"DataFrame 的 xs() 方法接受一个额外的参数，从而可以简便地在某个特定的多级索引中的某一个层级进行数据的选取。 df = pd . DataFrame ( np . random . randn ( 6 , 3 ), index = index [: 6 ]) df = df . T df first bar baz foo second one two one two one two 0 1.939044 0.588276 1.146525 -0.188147 -0.720676 1.451303 1 -0.028778 -0.897224 -0.038871 -0.485770 -0.958363 -0.963243 2 -0.911336 0.031492 0.795475 0.234746 0.361175 0.659001 .xs 方法默认 axis=0 ： df . xs ( \"bar\" , level = 'first' , axis = 1 ) df . xs ( \"one\" , level = 'second' , axis = 1 ) first bar baz foo 0 1.939044 1.146525 -0.720676 1 -0.028778 -0.038871 -0.958363 2 -0.911336 0.795475 0.361175 df . xs (( 'one' , 'bar' ), level = ( 'second' , 'first' ), axis = 1 ) first bar second one 0 1.939044 1 -0.028778 2 -0.911336 .xs 方法默认 drop_level=False ： df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = False ) first bar baz foo second one one one 0 1.939044 1.146525 -0.720676 1 -0.028778 -0.038871 -0.958363 2 -0.911336 0.795475 0.361175 df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = True ) first bar baz foo 0 1.939044 1.146525 -0.720676 1 -0.028778 -0.038871 -0.958363 2 -0.911336 0.795475 0.361175","text_tokens":["一个","简便","数据","选取","one","的","axis","0.031492","0.795475","bar","xs","0.659001","默认","dataframe","0.188147","two","_","，","0.958363","pd","1.451303","2","drop","0.485770","0","0.911336","1.146525","某个","6","\"","randn","foo","'","-",")","接受","0.897224","false","：","中","level","second",":","特定","0.588276","[","多级","0.720676","t","first","可以","某",",","3","1.939044","0.361175","参数","(","df","]","random","层级","index","=","在","索引","0.963243","地","。","进行","baz","0.028778","额外","1",".","np","方法"," ","true","从而","0.234746","0.038871"],"title":"交叉选择","title_tokens":["交叉","选择"]},{"location":"pandas笔记/7.4.索引对象.html#take","text":"与 NumPy 的 ndarrays 相似，pandas的 Index ， Series ，和 DataFrame 也提供 take() 方法。他可以沿着某个维度，按照给定的索引取回所有的元素。这个给定的索引必须要是一个由整数组成的列表或者ndarray，用以指明在索引中的位置。 take 也可以接受负整数，作为相对于结尾的相对位置。 index = pd . Index ( np . random . randint ( 0 , 1000 , 10 )) print ( index ) positions = [ 0 , 9 , 3 ] print ( index [ positions ]) print ( index . take ( positions )) Int64Index([495, 309, 722, 91, 889, 309, 148, 970, 329, 776], dtype='int64') Int64Index([495, 776, 91], dtype='int64') Int64Index([495, 776, 91], dtype='int64') ser = pd . Series ( np . random . randn ( 10 )) print ( ser . iloc [ positions ]) print ( ser . take ( positions )) 0 0.591030 9 -0.593299 3 0.021434 dtype: float64 0 0.591030 9 -0.593299 3 0.021434 dtype: float64 对于 DataFrames 来说，这个给定的索引应当是一个一维列表或者ndarray，用于指明行或者列的位置。 frm = pd . DataFrame ( np . random . randn ( 5 , 3 )) print ( frm ) print ( frm . take ([ 1 , 4 , 3 ])) print ( frm . take ([ 0 , 2 ], axis = 1 )) 0 1 2 0 -0.019443 0.710586 0.481252 1 -0.181836 0.772916 0.783044 2 -1.793119 0.445353 1.196131 3 -1.040532 0.333872 -0.010054 4 0.351876 1.118853 0.093517 0 1 2 1 -0.181836 0.772916 0.783044 4 0.351876 1.118853 0.093517 3 -1.040532 0.333872 -0.010054 0 2 0 -0.019443 0.481252 1 -0.181836 0.783044 2 -1.793119 1.196131 3 -1.040532 -0.010054 4 0.351876 0.093517 需要注意的是， pandas对象的 take 方法并不会正常地工作在布尔索引上，并且有可能会返回一切意外的结果。 arr = np . random . randn ( 10 ) print ( arr ) print ( arr . take ([ False , False , True , True ])) print ( arr [[ 0 , 1 ]]) [-0.53649475 0.13255386 0.04098733 0.82386728 0.08692377 0.30652204 0.24007645 0.22604287 -0.53147612 2.34366636] [-0.53649475 -0.53649475 0.13255386 0.13255386] [-0.53649475 0.13255386] ser = pd . Series ( np . random . randn ( 10 )) print ( ser ) print ( ser . take ([ False , False , True , True ])) print ( ser . iloc [[ 0 , 1 ]]) 0 -0.103801 1 -1.621499 2 -0.028563 3 0.407877 4 -0.266058 5 1.390450 6 -1.002601 7 -0.335144 8 -0.461811 9 0.997019 dtype: float64 0 -0.103801 0 -0.103801 1 -1.621499 1 -1.621499 dtype: float64 0 -0.103801 1 -1.621499 dtype: float64 最后，关于性能方面的一个小建议，因为 take 方法处理的是一个范围更窄的输入，因此会比话实索引（fancy indexing）的速度快很多。 arr = np . random . randn ( 10000 , 5 ) indexer = np . arange ( 10000 ) random . shuffle ( indexer ) % timeit arr [ indexer ] % timeit arr . take ( indexer , axis = 0 ) 373 µs ± 46.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 132 µs ± 12.3 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each) ser = pd . Series ( arr [:, 0 ]) % timeit ser . iloc [ indexer ] % timeit ser . take ( indexer ) 336 µs ± 49.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 355 µs ± 60.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)","text_tokens":["一个","0.021434","int64","列","numpy","4","arange","%","的","axis","与","132","10","相对","355","不会","889","用以","take","结尾","329","runs","0.22604287","dev","frm","309","dataframe","9","0.593299","10000","会","由","一维","indexing","于","要是","0.266058","很多","需要","对象","loop","工作","指明","，","列表","0.997019","快","更窄","范围","应当","pd","1.621499","2","pandas","用于","关于","0","处理","他","输入","某个","0.093517","对于","6","µ","8","print","1.793119","randn","建议","1.040532","float64","positions","'","-",")","接受","是","false","中","1.118853","0.445353","776","组成","所有","0.53649475","12.3","可能","0.53147612","）","5","timeit","行",":","fancy","indexer","小","per","[","std","0.461811","0.407877","0.24007645","也","有","因为","结果","495","0.103801","比话实","7","ndarray","±","dtype","0.351876","可以","60.5","0.591030","0.019443","上",",","3","方面","0.772916","2.34366636","randint","维度","0.481252","速度","loops","布尔","46.5","沿着","按照","0.028563","49.5","0.04098733","(","相似","ndarrays","和","]","给定","提供","1000","返回","random","each","336","0.335144","s","并","正常","0.13255386","负","并且","index","=","必须","整数","最后","元素","性能","在","int64index","因此","722","索引","1.002601","或者","mean","91","dataframes","地","。","0.82386728","arr","0.010054","0.710586","0.783044","（","ser","1.196131","1.390450","iloc","0.333872","0.30652204","意外","148","注意","1","0.181836","取回","这个","0.08692377","作为","970","of","373","shuffle",".","np","方法"," ","一切","来说","series","true","位置"],"title":"Take方法","title_tokens":["方法","take"]},{"location":"pandas笔记/7.4.索引对象.html#_11","text":"CategoricalIndex 分类索引 这种索引类型非常适合有重复的索引。这是一个围绕 Categorical 而创建的容器。这可以非常高效地存储和索引的具有大量重复元素的索引。 from pandas.api.types import CategoricalDtype df = pd . DataFrame ({ 'A' : np . arange ( 6 ), 'B' : list ( 'aabbca' )}) df [ 'B' ] = df [ 'B' ] . astype ( CategoricalDtype ( list ( 'cab' ))) print ( df , \" \\n \" ) print ( df . dtypes , \" \\n \" ) print ( df . B . cat . categories , \" \\n \" ) A B 0 0 a 1 1 a 2 2 b 3 3 b 4 4 c 5 5 a A int32 B category dtype : object Index ([ 'c' , 'a' , 'b' ], dtype = 'object' ) 通过设置索引将会建立一个 CategoricalIndex 分类索引. df2 = df . set_index ( 'B' ) print ( df2 . index ) CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') 使用 __getitem__/.iloc/.loc 进行索引，在含有重复值的 索引 上的工作原理相似。索引值 必须 在一个分类中，否者将会引发 KeyError 错误。 df2 . loc [ 'a' ] A B a 0 a 1 a 5 CategoricalIndex 在索引之后也会被 保留 : df2 . loc [ 'a' ] . index CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') 索引排序将会按照类别清单中的顺序进行（我们已经基于 CategoricalDtype(list('cab')) 建立了一个索引，因此排序的顺序是 cab ） df2 . sort_index () A B c 4 a 0 a 1 a 5 b 2 b 3 分组操作（Groupby）也会保留索引的全部信息。 df2 . groupby ( level = 0 ) . sum () df2 . groupby ( level = 0 ) . sum () . index CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') 重设索引的操作将会根据输入的索引值返回一个索引。传入一个列表，将会返回一个最普通的 Index ；如果使用类别对象 Categorical ，则会返回一个分类索引 CategoricalIndex ，按照其中 传入的 的类别值 Categorical dtype来进行索引。正如同你可以对 任意 pandas的索引进行重新索引一样，这将允许你随意索引任意的索引值，即便它们并 不存在 在你的类别对象中。 df2 . reindex ([ 'a' , 'e' ]) df2 . reindex ([ 'a' , 'e' ]) . index Index(['a', 'a', 'a', 'e'], dtype='object', name='B') df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) . index CategoricalIndex(['a', 'a', 'a', 'e'], categories=['a', 'b', 'c', 'd', 'e'], ordered=False, name='B', dtype='category')","text_tokens":["一个","n","你","容器","4","int32","arange","类型","的","全部","围绕","\\","被","d","dataframe","保留","任意","会","分类索引","_","它们","sort","我们","对象","工作","，","分组","dtypes","信息","列表","pd","了","2","而","pandas","categoricaldtype","0","getitem","cat","输入","大量","6","\"","from","print","e","'","set","__","含有",")","否者","是","其中","使用","false","之后","已经","中","即便","排序","来","根据","/","{","level","）","操作","最","5","；","这是",":","types","[","categories","reindex","一样","原理","普通","也","有","类别","object","存储","分类","顺序","适合","重复","如果","aabbca","dtype","可以","随意","创建","上",",","3","通过","sum","重新","按照","(","和","df","相似","]","df2","不","非常适合","值","将","引发","返回","存在","a","具有","建立","并","ordered","category","import","基于","重设","index","=","list","必须","api","元素","因此","在","索引","对","正","categorical","清单","地","则","categoricalindex","。","设置","这种","}","groupby","将会","（","进行","传入","允许","abcde","如同","iloc","非常","1","高效","keyerror","astype","这","c","name","b","错误",".","np"," ","cab","loc"],"title":"分类索引","title_tokens":["分类索引","分类","索引"]},{"location":"pandas笔记/7.4.索引对象.html#_12","text":"0.20.0中新加入 IntervalIndex 和它自己特有的 IntervalDtype 以及 Interval 标量类型，在pandas中，间隔数据是获得头等支持的。 IntervalIndex 间隔索引允许一些唯一的索引，并且也是 cut() 和 qcut() 的返回类型","text_tokens":["在","支持","加入","索引","cut","标量","数据","类型","的","是",")","。","中","(","允许","和","唯一","头等","间隔","它","获得","返回","interval","自己","中新","，","特有","以及","0.20","一些",".","也","pandas"," ","0","qcut","并且","intervaldtype","intervalindex"],"title":"间隔索引","title_tokens":["间隔","索引"]},{"location":"pandas笔记/7.4.索引对象.html#_13","text":"df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 , 4 ]}, index = pd . IntervalIndex . from_breaks ([ 0 , 1 , 2 , 3 , 4 ])) df A (0, 1] 1 (1, 2] 2 (2, 3] 3 (3, 4] 4 在间隔序列上使用基于标签的索引 .loc ，正如你所预料到的，将会选择那个特定的间隔 df . loc [ 2 ] A 2 Name: (1, 2], dtype: int64 df . loc [[ 2 , 3 ]] A (1, 2] 2 (2, 3] 3 如果你选取了一个标签，被 包含 在间隔当中，这个间隔也将会被选择 df . loc [ 2.5 ] A 3 Name: (2, 3], dtype: int64 df . loc [[ 2.5 , 3.5 ]] A (2, 3] 3 (3, 4] 4 使用 Interval 来选择，将只返回严格匹配（从pandas0.25.0开始）。 df . loc [ pd . Interval ( 1 , 2 )] A 2 Name: (1, 2], dtype: int64 试图选择一个没有被严格包含在 IntervalIndex 内的区间 Interval ，将会出发 KeyError 错误。 try : df . loc [ pd . Interval ( 0.5 , 2.5 )] except KeyError as e : print ( \"KeyError:\" , e ) KeyError : Interval ( 0.5 , 2.5 , closed = 'right' ) 可以使用 overlaps() 来创建一个布尔选择器，来选中所有与 给定区间 ( Interval )重复的所有区间。 idxr = df . index . overlaps ( pd . Interval ( 0.5 , 2.5 )) print ( idxr ) print ( df [ idxr ]) [ True True True False] A (0, 1] 1 (1, 2] 2 (2, 3] 3","text_tokens":["一个","int64","你","出发","4","选取","3.5","的","与","2.5","区间","try","被","dataframe","会","严格","间隔","只","_","interval","pandas0.25","，","pd","了","2","标签","选择器","0","overlaps","idxr","没有","as","\"","from","匹配","预料","print","e","'",")","breaks","使用","false","closed","来","所","所有","{","料到","）",":","特定","[","也","重复","从","如果","dtype","可以","创建","上","3",",","布尔","0.5","(","选中","df","]","给定","将","返回","a","基于","right","index","=","intervalindex","在","包含","索引","内","正如","序列","。","}","将会","（","那个","1","这个","keyerror","选择","预料到","name","错误","当中",".","试图"," ","开始","true","loc","except"],"title":"使用 间隔索引 来进行数据索引","title_tokens":["间隔","索引","来"," ","数据","进行","使用"]},{"location":"pandas笔记/7.4.索引对象.html#-cut-qcut-cut-qcut","text":"cut() 和 qcut() 都将返回一个分类 Categorical 对象，并且每个分块区域都会以 分类索引 IntervalIndex 的方式被创建并保存在它的 .categories 属性中。 c = pd . cut ( range ( 4 ), bins = 2 ) print ( c ) print ( c . categories ) [(-0.003, 1.5], (-0.003, 1.5], (1.5, 3.0], (1.5, 3.0]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] IntervalIndex([(-0.003, 1.5], (1.5, 3.0]], closed = 'right', dtype='interval[float64]') cut() 也可以接受一个 IntervalIndex 作为他的 bins 参数，这样可以使用一个非常有用的pandas的写法。 首先，我们调用 cut() 在一些数据上面，并且将 bins 设置为某一个固定的数 ，从而生成bins。 随后，我们可以在其他的数据上调用 cut() ，并传入 .categories 的值，作为 bins 参数。这样新的数据就也将会被分配到同样的bins里面 pd . cut ([ 0 , 3 , 5 , 1 ], bins = c . categories ) [(-0.003, 1.5], (1.5, 3.0], NaN, (-0.003, 1.5]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] 任何落在bins之外的数据都将会被设为 NaN","text_tokens":["一个","bins","4","数据","的","每个","方式","都","被","会","分类索引","我们","interval","之外","对象","，","range","pd","2","为","pandas","设为","0","他","分块","数","到","print","float64","'","-",")","接受","使用","以","closed","中","5","上面",":","[","固定","categories","nan","一些","也","其他","分类","dtype","可以","某","任何","调用","创建","上",",","3","参数","(","和","]","里面","<","值","将","它","返回","并","分配","落","并且","right","首先","=","intervalindex","在","索引","cut","就","区域","categorical","。","设置","1.5","传入","新","这样","同样","属性","非常","写法","1","保存","作为","c","随后","0.003","."," ","qcut","生成","从而","3.0","有用"],"title":"使用-cut-和-qcut来为数据分块使用 cut 和 qcut来为数据分块","title_tokens":["为","cut","来"," ","数据","qcut","-","和","使用","分块"]},{"location":"pandas笔记/7.4.索引对象.html#_14","text":"如果我们需要经常地使用步进区间，我们可以使用 interval_range() 函数，结合 start , end , 和 periods 来建立一个 IntervalIndex 对于数值型的间隔，默认的 interval_range 间隔频率是1，对于datetime类型的间隔则是日历日。 pd . interval_range ( start = 0 , end = 5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 ) pd . interval_range ( end = pd . Timedelta ( '3 days' ), periods = 3 ) IntervalIndex ( [ (0 days 00:00:00, 1 days 00:00:00 ] , ( 1 days 00 : 00 : 00 , 2 days 00 : 00 : 00 ] , ( 2 days 00 : 00 : 00 , 3 days 00 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) freq 参数可以被用来明确非默认的频率，并且可以充分地利用各种各样的 frequency aliases datetime类型的时间间隔。 pd . interval_range ( start = 0 , periods = 5 , freq = 1.5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 , freq = 'W' ) pd . interval_range ( start = pd . Timedelta ( '0 days' ), periods = 3 , freq = '9H' ) IntervalIndex ( [ (0 days 00:00:00, 0 days 09:00:00 ] , ( 0 days 09 : 00 : 00 , 0 days 18 : 00 : 00 ] , ( 0 days 18 : 00 : 00 , 1 days 03 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) 此外， closed 参数可以用来声明哪个边界是包含的。默认情况下，间隔的右界是包含的。 pd . interval_range ( start = 0 , end = 4 , closed = 'both' ) pd . interval_range ( start = 0 , end = 4 , closed = 'neither' ) IntervalIndex ( [ (0, 1), (1, 2), (2, 3), (3, 4) ] , closed = 'neither' , dtype = 'interval[int64]' ) v0.23.0新加入 使用 start , end , 和 periods 可以从 start 到 end （包含）生成一个平均分配的间隔，在返回 IntervalIndex 中生成 periods 这么多的元素（译者：区间）。 pd . interval_range ( start = 0 , end = 6 , periods = 4 ) pd . interval_range ( pd . Timestamp ( '2018-01-01' ), pd . Timestamp ( '2018-02-28' ), periods = 3 ) IntervalIndex ( [ (2018-01-01, 2018-01-20 08:00:00 ] , ( 2018 - 01 - 20 08 : 00 : 00 , 2018 - 02 - 08 16 : 00 : 00 ] , ( 2018 - 02 - 08 16 : 00 : 00 , 2018 - 02 - 28 ]] , closed = 'right' , dtype = 'interval[datetime64[ns]]' )","text_tokens":["一个","int64","4","datetime64","类型","的","用来","区间","多","2017","默认","被","间隔","_","声明","我们","需要","interval","freq","，","range","频率","pd","2","各种各样","03","0","frequency","平均分配","6","对于","到","'","-",")","是","20","使用","periods","closed","中","：","来","timedelta64","ns","边界","v0.23","）","5",":","[","平均分","日历","w","16","步进","timestamp","00","从","01","both","右界","如果","加入","dtype","可以",",","3","28","参数","型","(","函数","和","]","结合","各样","aliases","2018","返回","此外","建立","日","start","timedelta","分配","end","哪个","非","right","并且","充分","数值","9h","=","各种","intervalindex","元素","在","datetime","包含","情况","明确","neither","地","则","。","均分","days","02","利用","09","1.5","08","（","新","1","下","18","这么","时间","经常","."," ","译者","生成","平均"],"title":"生成一定区间内的间隔","title_tokens":["间隔","生成","的","内","一定","区间"]},{"location":"pandas笔记/7.5.索引的基本操作.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) from tools import Help as H import pandas as pd from pandas import DataFrame , Series import numpy as np h = H ( pd ) d = h . dicts module 索引对象的方法 tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) index MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) .levels 为 property 属性，它返回一个 FrozenList （不可变列表），列表中存储每一级的 label （也就是创建 MultiIndex 时传入的 levels 参数）。 index . levels FrozenList([['bar', 'baz', 'foo', 'qux'], ['one', 'two']]) .get_level_values(level) ：返回指定 level 的 Index ，用于 MultiIndex 。 print ( index . get_level_values ( 0 ), \" \\n \" ) print ( index . get_level_values ( 1 ), \" \\n \" ) print ( index . get_level_values ( 'second' )) Index ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], dtype = 'object' , name = 'first' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) df = pd . DataFrame ( np . random . randn ( 6 , 6 ), index = index [: 6 ], columns = index [: 6 ]) df . columns . levels # original MultiIndex df [[ 'foo' , 'qux' ]] . columns . levels # sliced df [[ 'foo' , 'qux' ]] . columns . to_numpy () # for a specific level df [[ 'foo' , 'qux' ]] . columns . get_level_values ( 0 ) Index(['foo', 'foo'], dtype='object', name='first') new_mi = df [[ 'foo' , 'qux' ]] . columns . remove_unused_levels () new_mi . levels FrozenList([['foo'], ['one', 'two']]) 索引重赋值、索引对齐 level 参数已经被加入到pandas对象中的 reindex() 和 align() 方法中。这将有助于沿着一个层级来广播值（broadcast values）。例如： 创建示例 df ： midx = pd . MultiIndex ( levels = [[ 'zero' , 'one' ], [ 'x' , 'y' ]], codes = [[ 1 , 1 , 0 , 0 ], [ 1 , 0 , 1 , 0 ]]) df = pd . DataFrame ( np . random . randn ( 4 , 2 ), index = midx ) df 0 1 one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 创建示例 df2 ： df2 = df . mean ( level = 0 ) df2 0 1 one 1.083938 0.645847 zero -0.032103 -0.038310 df2 . reindex ( df . index , level = 0 ) 0 1 one y 1.083938 0.645847 x 1.083938 0.645847 zero y -0.032103 -0.038310 x -0.032103 -0.038310 # aligning df_aligned , df2_aligned = df . align ( df2 , level = 0 ) print ( df_aligned , \" \\n \" ) print ( df2_aligned ) 0 1 one y 1 . 821732 0 . 913649 x 0 . 346144 0 . 378045 zero y 1 . 329143 - 0 . 694748 x - 1 . 393348 0 . 618127 0 1 one y 1 . 083938 0 . 645847 x 1 . 083938 0 . 645847 zero y - 0 . 032103 - 0 . 038310 x - 0 . 032103 - 0 . 038310 reindex 方法参数 重新索引： Series/DataFrame.reindex(index=None, **kwargs) ： index ：一个 array-like 对象，给出了新的 index 的 label columns ：一个 array-like 对象，给出了新的 columns 的 label method ：当新的 label 的值缺失时，如何处理。参数值可以为： None ：不做任何处理，缺失地方填充 NaN - 'backfill'/'bfill' ：用下一个可用的值填充该空缺（后向填充） - 'pad'/'ffill' ：用上一个可用的值填充该空缺（前向填充） - 'nearest' ：用最近的可用值填充该空缺- copy ：一个布尔值，如果为 True ，则返回一个新的 Series 对象（即使传入的 index 与原来的 index 相同） level ：一个整数或者 name ，在 MultiIndex 的指定级别上匹配简单索引 fill_value ：一个标量。指定缺失值的填充数据，默认为 NaN （如果该参数与 method 同时出现，则以 method 为主） limit ：一个整数，指定前向/后向填充时：如果有连续的 k 个 NaN ，则只填充其中 limit 个。它与 method 配合 tolerance ：一个整数，用于给出在不匹配时，连续采用前向/后向/最近邻匹配的跨度的最大值。它与 method 配合 交换索引层级： swaplevel 方法 swaplevel() 函数可以用来交换两个层级 print ( df , \" \\n \" ) print ( df . swaplevel ( 0 , 1 , axis = 0 )) 0 1 one y 1 . 821732 0 . 913649 x 0 . 346144 0 . 378045 zero y 1 . 329143 - 0 . 694748 x - 1 . 393348 0 . 618127 0 1 y one 1 . 821732 0 . 913649 x one 0 . 346144 0 . 378045 y zero 1 . 329143 - 0 . 694748 x zero - 1 . 393348 0 . 618127 交换索引层级： reorder_levels 方法 reorder_levels() 是一个更一般化的 swaplevel 方法，允许您用简单的一步来重排列索引的层级： print ( df , \" \\n \" ) print ( df . reorder_levels ([ 1 , 0 ], axis = 0 )) 0 1 one y 1 . 821732 0 . 913649 x 0 . 346144 0 . 378045 zero y 1 . 329143 - 0 . 694748 x - 1 . 393348 0 . 618127 0 1 y one 1 . 821732 0 . 913649 x one 0 . 346144 0 . 378045 y zero 1 . 329143 - 0 . 694748 x zero - 1 . 393348 0 . 618127 重命名索引 - `` File \"<ipython-input-1-2af17b23912b>\", line 1 - `` ^ SyntaxError: invalid syntax rename() 方法可以用来重命名多层索引，也可以用来重命名列。 renames 的 columns 参数可以接受一个字典，从而仅仅重命名你希望更改名字的列： df . rename ( columns = { 0 : \"col0\" , 1 : \"col1\" }) col0 col1 one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 用于重命名索引： df . rename ( index = { \"one\" : \"two\" , \"y\" : \"z\" }) 0 1 two z 1.821732 0.913649 x 0.346144 0.378045 zero z 1.329143 -0.694748 x -1.393348 0.618127 rename_axis() 方法可以用于对 Index 或者 MultiIndex 进行重命名。尤其的，你可以明确 MultiIndex 中的不同层级的名称，这可以被用于在之后使用 reset_index() ，把多层级索引的值转换为一个列 df . rename_axis ( index = [ 'abc' , 'def' ]) 0 1 abc def one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 注意， DataFrame 的列也是一个索引，因此在 rename_axis 中使用 columns 参数，将会改变那个索引的名称 df . rename_axis ( columns = \"Cols\" ) . columns RangeIndex(start=0, stop=2, step=1, name='Cols') rename 和 rename_axis 都支持一个明确的字典， Series 或者一个映射函数，将标签，名称映射为新的值。 df . rename_axis ( index = [ 'abc' , 'def' ], inplace = True ) print ( df ) 0 1 abc def one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 对 多索引 进行排序 对于拥有多层级索引的对象来说，使用 sort_index 方法来排序。 创建示例 s ： import random tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] random . shuffle ( tuples ) s = pd . Series ( np . random . randn ( 8 ), index = pd . MultiIndex . from_tuples ( tuples )) s qux two -0.805656 one 0.404373 baz one 0.597193 bar two -0.280613 one -0.581470 baz two 1.072317 foo one 0.244656 two -0.071497 dtype: float64 # 两者等价 s . sort_index () s . sort_index ( level = 0 ) bar one -0.581470 two -0.280613 baz one 0.597193 two 1.072317 foo one 0.244656 two -0.071497 qux one 0.404373 two -0.805656 dtype: float64 s . sort_index ( level = 1 ) bar one -0.581470 baz one 0.597193 foo one 0.244656 qux one 0.404373 bar two -0.280613 baz two 1.072317 foo two -0.071497 qux two -0.805656 dtype: float64 如果“多层级索引”都被命名了的话，你也可以向 sort_index 传入一个层级名称。 s . index . set_names ([ 'L1' , 'L2' ], inplace = True ) print ( s . sort_index ( level = 'L1' ), \" \\n \" ) print ( s . sort_index ( level = 'L2' )) L1 L2 bar one - 0 . 581470 two - 0 . 280613 baz one 0 . 597193 two 1 . 072317 foo one 0 . 244656 two - 0 . 071497 qux one 0 . 404373 two - 0 . 805656 dtype : float64 L1 L2 bar one - 0 . 581470 baz one 0 . 597193 foo one 0 . 244656 qux one 0 . 404373 bar two - 0 . 280613 baz two 1 . 072317 foo two - 0 . 071497 qux two - 0 . 805656 dtype : float64 对于多维度的对象来说，你也可以对任意的的维度来进行索引，只要他们是具有 多层级索引 的： df . T . sort_index ( level = 1 , axis = 1 ) abc one zero one zero def x x y y 0 0.346144 -1.393348 1.821732 1.329143 1 0.378045 0.618127 0.913649 -0.694748 即便数据没有排序，你仍然可以对他们进行索引，但是索引的效率会极大降低，并且也会抛出 PerformanceWarning 警告。而且，这将返回一个数据的副本而非一个数据的视图： dfm = pd . DataFrame ({ 'jim' : [ 0 , 0 , 1 , 1 ], 'joe' : [ 'x' , 'x' , 'z' , 'y' ], 'jolie' : np . random . rand ( 4 )}) dfm = dfm . set_index ([ 'jim' , 'joe' ]) dfm dfm . loc [( 1 , 'z' )] .\\setup_m.py:9: PerformanceWarning: indexing past lexsort depth may impact performance. jolie jim joe 1 z 0.646365 另外，如果你试图索引一个没有完全lexsorted的对象，你将会碰到如下的错误： try : dfm . loc [( 0 , 'y' ):( 1 , 'z' )] except Exception as e : print ( f \"UnsortedIndexError: {e} \" ) UnsortedIndexError: 'Key length (2) was greater than MultiIndex lexsort depth (1)' 排序之后则不会报错 dfm . sort_index () . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.041386 z 0.646365 在 MultiIndex 上使用 is_lexsorted() 方法，你可以查看这个索引是否已经被排序。而使用 lexsort_depth 属性则可以返回排序的深度 dfm . index . is_lexsorted () False dfm . index . lexsort_depth 1 dfm = dfm . sort_index () dfm jolie jim joe 0 x 0.785068 x 0.473428 1 y 0.041386 z 0.646365 dfm . index . is_lexsorted () True dfm . index . lexsort_depth 2 现在，你的选择就可以正常工作了。 dfm . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.041386 z 0.646365 将列转换为索引 将列数据变成行索引（只对 DataFrame 有效，因为 Series 没有列索引），其中： col label 变成 index name ，列数据变成行 label ： DataFrame . set_index ( keys , drop = True , append = False , inplace = False , verify_integrity = False ) keys ： 指定了一个或者一列的 column label 。这些列将会转换为行 index drop ：一个布尔值。如果为 True ，则 keys 对应的列会被删除；否则这些列仍然被保留 append ：一个布尔值。如果为 True ，则原有的行索引将保留（此时一定是个多级索引）；否则抛弃原来的行索引。 inplace ：一个布尔值。如果为 True ，则原地修改并且返回 None verify_integrity ：一个布尔值。如果为 True ，则检查新的 index 是否有重复值。否则会推迟到检测过程到必须检测的时候。 df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 ))) df [ \"key\" ] = [ \"A\" , \"B\" , \"C\" , \"D\" ] print ( df ) df . set_index ( keys = \"key\" , append = True ) 0 1 2 key 0 6 9 6 A 1 9 8 1 B 2 5 6 8 C 3 8 4 0 D 0 1 2 key 0 A 6 9 6 1 B 9 8 1 2 C 5 6 8 3 D 8 4 0 将索引转换为列： reset_index reset_index 会将层次化的行 index 转移到列中，成为新的一列。同时 index 变成一个整数型的，从0开始编号： DataFrame . reset_index ( level = None , drop = False , inplace = False , col_level = 0 , col_fill = '' ) Series . reset_index ( level = None , drop = False , name = None , inplace = False ) level ：一个整数、 str 、元组或者列表。它指定了将从层次化的 index 中移除的 level 。如果为 None ，则移除所有的 level 。 drop ： drop=True ，丢弃指定level，不加入列中。 drop=False ，则将指定的level转换为列。 inplace ：一个布尔值。如果为 True ，则原地修改并且返回 None 。 col_level ：索引转换为列后，指定该列的列标签位于列索引的哪个level。 col_fill ：指定除 col_level 之外的列level的名字。默认为空字符串。当存在多级列索引时生效。 对于 Series ， name 就是插入后，对应的列 label columns = [[ \"a\" , \"a\" , \"b\" ],[ \"1\" , \"2\" , \"3\" ]] df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 )), columns = columns ) print ( df ) df . reset_index ( drop = False , col_level = 0 ) a b 1 2 3 0 6 9 9 1 1 1 4 2 4 8 3 3 2 8 6 index a b 1 2 3 0 0 6 9 9 1 1 1 1 4 2 2 4 8 3 3 3 2 8 6 按label删除行、列 丢弃某条轴上的一个或者多个 label ： Series/DataFrame.drop(labels[, axis, level, inplace, errors]) : labels ：单个 label 或者一个 label 序列，代表要被丢弃的 label axis ：一个整数，或者轴的名字。默认为 0 轴 level ：一个整数或者 level 名字，用于 MultiIndex 。因为可能在多个 level 上都有同名的 label 。 inplace ：一个布尔值。如果为 True ，则原地修改并且返回 None errors ：可以为 'ignore'/'raise' a = df . reset_index ( drop = False , col_level = 0 ) a . drop ( labels = \"a\" , axis = 1 ) a idx = a . index def fun ( x ): return x + 10 idx . map ( fun ) import gensim from gensim.models import Word2Vec Word2Vec . wv File \"<ipython-input-1-5cbf7b740fd7>\", line 19 Word2Vec.wv ^ IndentationError: unexpected indent","text_tokens":["列将会","n","numpy","col1","0.244656","l2","一列","相同","排列","copy","10","位于","\\","不会","连续","renames","重","被","v.1915","rename","仍然","indexing","警告","转换","他们","393348","而","amd64","0","处理","为主","对于","from","1.821732","8","float64","e","set","levels","以","：","中","wv","column","只要","0.913649","该","5","行","[","new","nan","original","缺失","两个","存储","等价","1.072317","如果","0.646365","标量","for","任何","整数型","3","极大","配合","high","沿着","有效","对应","多维","msc","为列","为空","和","specific","0.785068","值","地方","存在","mi","start","tuples","fill","正常","import","非","将列","数值","may","个","整数","1.083938","做","0.805656","597193","inplace","0.071497","同名","单个","将会","syntaxerror","baz","abc","dicts","新","那个","h","希望","tools","sliced","就是","b","module","错误","unused",".","ignore","来说","*","布尔值","loc","这些","032103","bfill","1.329143","时","时候","performancewarning","列","lexsorted","bar","更","keys","碰到","列后","stop","列中","一级","默认","降低","0.581470","修改","任意","329143","只","two","indentationerror","仅仅","windows","backfill","用","两者","1.393348","，","赋值","pd","impact","为","标签","pandas","用于","2af17b23912b","drop","一般","as","对齐","现在","\"","匹配","print","randn","-","其中","已经","之后","转移","所有","大值","rand","一定","level","+","广播","second","重命名","变成","后","原有","multiindex","用下","有","检查","为行","qux","aligning","字符","64","remove","来重","上","setup","但是","unexpected","维度","映射","参数","函数","df","jim","返回","low","random","a","具有","line","0.404373","word2vec","ipython","有助于","哪个","除","depth","x","在","mean","def","array","更改","help","aligned","}","过程","limit","进行","传入","invalid","、","like","属性","col","丢弃","不同","按","0.473428","深度"," ","dfm","5cbf7b740fd7","unsortedindexerror","series","空缺","移除","except","轴","一个","你","4","不可","的","用来","broadcast","0.694748","071497","多","报错","083938","原来","9","694748","保留","会","采用","_","当","成为","了","2","副本","例如","581470","0.346144","没有","jolie","tolerance","6","lexsort","到","'",")","是","接受","使用","false","即便","来","该列","{","的话","913649","than","映射函数","字符串","填充",":","检测","integrity","values","str","指定","名称","也","因为","如何","object","级别","l1","多层","重复","从","某条","简单","最近","加入","编号","dtype","可以","命名",",","即使","randint","重新","@","step","(","to","378045","zero","columns","出现","将","280613","如下","fun","property","跨度","前向",">","gensim","f","并且","抛出","models","列会","支持","346144","元组","map","明确","cols","0.645847","您","0.041386","key","则","y","ffill","frozenlist","0.618127","名字","k","swaplevel","（","变","`","而且","nearest","midx","rangeindex","生效","file","多个","python","这","选择","c","name","层次化","shuffle","0.597193","np","方法","向","true","072317","数据","one","axis","label","与","indent","try","都","同时","0.280613","要","m","821732","”","d","dataframe","当新","一般化","sort","645847","之外","对象","py","查看","joe","工作","列表","0.378045","038310","labels","errors","参数值","names","0.038310","拥有","代表","exception","is","performance","input","foo","一步","“","完全","邻","排序","col0","交换","每","/","另外","19","可能","是否","）","reset","；","最大值","助于","多级","greater","reindex","value","404373","推迟","t","此时","字典","first","删除","method","创建","原地","效率","视图","length","给出","布尔","插入","否则","bit","618127","不","]","df2","<","reorder","它","codes","把","s","size","抛弃","kwargs","层级","get","index","=","必须","多维度","3.7","有助","z","因此","idx","索引","就","层次","对","raise","pad","或者","align","尤其","可用","。","was","verify","序列","append","^","最大","允许","改变","syntax","注意","1","这个","#","none","805656","past","试图","示例","244656","0.032103","开始","从而","return"],"title":"7.5.索引的基本操作","title_tokens":["基本","操作",".","索引","基本操作","的","7.5"]},{"location":"pandas笔记/7.5.索引的基本操作.html#_1","text":"tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) index MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) .levels 为 property 属性，它返回一个 FrozenList （不可变列表），列表中存储每一级的 label （也就是创建 MultiIndex 时传入的 levels 参数）。 index . levels FrozenList([['bar', 'baz', 'foo', 'qux'], ['one', 'two']]) .get_level_values(level) ：返回指定 level 的 Index ，用于 MultiIndex 。 print ( index . get_level_values ( 0 ), \" \\n \" ) print ( index . get_level_values ( 1 ), \" \\n \" ) print ( index . get_level_values ( 'second' )) Index ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], dtype = 'object' , name = 'first' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) df = pd . DataFrame ( np . random . randn ( 6 , 6 ), index = index [: 6 ], columns = index [: 6 ]) df . columns . levels # original MultiIndex df [[ 'foo' , 'qux' ]] . columns . levels # sliced df [[ 'foo' , 'qux' ]] . columns . to_numpy () # for a specific level df [[ 'foo' , 'qux' ]] . columns . get_level_values ( 0 ) Index(['foo', 'foo'], dtype='object', name='first') new_mi = df [[ 'foo' , 'qux' ]] . columns . remove_unused_levels () new_mi . levels FrozenList([['foo'], ['one', 'two']])","text_tokens":["一个","时","n","numpy","不可","one","的","label","bar","\\","一级","dataframe","two","_","，","列表","pd","为","用于","0","names","6","\"","from","print","randn","foo","'","levels",")","：","中","每","level","）","second",":","[","new","values","original","指定","multiindex","也","object","存储","qux","first","dtype","for","remove","创建",",","参数","(","to","df","]","columns","specific","它","返回","random","a","property","mi","tuples","get","index","=","。","frozenlist","（","变","baz","传入","属性","1","sliced","就是","#","name","unused",".","np"," "],"title":"索引对象的方法","title_tokens":["的","方法","对象","索引"]},{"location":"pandas笔记/7.5.索引的基本操作.html#_2","text":"level 参数已经被加入到pandas对象中的 reindex() 和 align() 方法中。这将有助于沿着一个层级来广播值（broadcast values）。例如： 创建示例 df ： midx = pd . MultiIndex ( levels = [[ 'zero' , 'one' ], [ 'x' , 'y' ]], codes = [[ 1 , 1 , 0 , 0 ], [ 1 , 0 , 1 , 0 ]]) df = pd . DataFrame ( np . random . randn ( 4 , 2 ), index = midx ) df 0 1 one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 创建示例 df2 ： df2 = df . mean ( level = 0 ) df2 0 1 one 1.083938 0.645847 zero -0.032103 -0.038310 df2 . reindex ( df . index , level = 0 ) 0 1 one y 1.083938 0.645847 x 1.083938 0.645847 zero y -0.032103 -0.038310 x -0.032103 -0.038310 # aligning df_aligned , df2_aligned = df . align ( df2 , level = 0 ) print ( df_aligned , \" \\n \" ) print ( df2_aligned ) 0 1 one y 1 . 821732 0 . 913649 x 0 . 346144 0 . 378045 zero y 1 . 329143 - 0 . 694748 x - 1 . 393348 0 . 618127 0 1 one y 1 . 083938 0 . 645847 x 1 . 083938 0 . 645847 zero y - 0 . 032103 - 0 . 038310 x - 0 . 032103 - 0 . 038310","text_tokens":["032103","一个","1.329143","n","4","one","的","broadcast","0.694748","\\","821732","被","dataframe","083938","694748","329143","_","645847","对象","1.393348","0.378045","038310","393348","pd","2","pandas","例如","0","0.346144","0.038310","\"","1.821732","到","print","randn","'","levels","-",")","已经","：","中","来","level","913649","0.913649","）","广播","助于","[","reindex","values","multiindex","aligning","加入","创建",",","沿着","参数","(","618127","和","df","378045","]","df2","zero","值","将","random","codes","有助于","层级","index","=","x","有助","346144","1.083938","0.645847","mean","align","y","。","0.618127","aligned","（","midx","1","#","这",".","示例","np","方法"," ","0.032103"],"title":"索引重赋值、索引对齐","title_tokens":["索引","重","赋值","对齐","、"]},{"location":"pandas笔记/7.5.索引的基本操作.html#reindex","text":"重新索引： Series/DataFrame.reindex(index=None, **kwargs) ： index ：一个 array-like 对象，给出了新的 index 的 label columns ：一个 array-like 对象，给出了新的 columns 的 label method ：当新的 label 的值缺失时，如何处理。参数值可以为： None ：不做任何处理，缺失地方填充 NaN - 'backfill'/'bfill' ：用下一个可用的值填充该空缺（后向填充） - 'pad'/'ffill' ：用上一个可用的值填充该空缺（前向填充） - 'nearest' ：用最近的可用值填充该空缺- copy ：一个布尔值，如果为 True ，则返回一个新的 Series 对象（即使传入的 index 与原来的 index 相同） level ：一个整数或者 name ，在 MultiIndex 的指定级别上匹配简单索引 fill_value ：一个标量。指定缺失值的填充数据，默认为 NaN （如果该参数与 method 同时出现，则以 method 为主） limit ：一个整数，指定前向/后向填充时：如果有连续的 k 个 NaN ，则只填充其中 limit 个。它与 method 配合 tolerance ：一个整数，用于给出在不匹配时，连续采用前向/后向/最近邻匹配的跨度的最大值。它与 method 配合","text_tokens":["bfill","一个","时","数据","的","label","与","相同","copy","同时","连续","默认","dataframe","原来","只","当新","采用","_","backfill","用","对象","，","了","为","用于","参数值","处理","tolerance","为主","匹配","'","-",")","其中","以","邻","：","/","大值","level","）","该","填充","最大值","reindex","nan","后","缺失","指定","multiindex","value","用下","有","如何","级别","简单","最近","如果","标量","可以","任何","method","上",",","即使","给出","配合","重新","布尔","参数","(","不","columns","值","出现","地方","它","返回","跨度","前向","fill","kwargs","数值","index","=","个","整数","在","索引","做","pad","或者","可用","则","。","ffill","array","k","limit","（","最大","传入","新","nearest","like","name","none","."," ","向","series","空缺","true","*","布尔值"],"title":"reindex方法参数","title_tokens":["reindex","方法","参数"]},{"location":"pandas笔记/7.5.索引的基本操作.html#swaplevel","text":"swaplevel() 函数可以用来交换两个层级 print ( df , \" \\n \" ) print ( df . swaplevel ( 0 , 1 , axis = 0 )) 0 1 one y 1 . 821732 0 . 913649 x 0 . 346144 0 . 378045 zero y 1 . 329143 - 0 . 694748 x - 1 . 393348 0 . 618127 0 1 y one 1 . 821732 0 . 913649 x one 0 . 346144 0 . 378045 y zero 1 . 329143 - 0 . 694748 x zero - 1 . 393348 0 . 618127","text_tokens":["n","\"","346144","print","可以","one","axis","用来","-",")",",","y","\\","交换","821732","swaplevel","(","函数","618127","df","913649","378045","694748","zero","329143","1","393348","两个","."," ","0","层级","=","x"],"title":"交换索引层级：swaplevel方法","title_tokens":["：","索引","方法","交换","swaplevel","层级"]},{"location":"pandas笔记/7.5.索引的基本操作.html#reorder_levels","text":"reorder_levels() 是一个更一般化的 swaplevel 方法，允许您用简单的一步来重排列索引的层级： print ( df , \" \\n \" ) print ( df . reorder_levels ([ 1 , 0 ], axis = 0 )) 0 1 one y 1 . 821732 0 . 913649 x 0 . 346144 0 . 378045 zero y 1 . 329143 - 0 . 694748 x - 1 . 393348 0 . 618127 0 1 y one 1 . 821732 0 . 913649 x one 0 . 346144 0 . 378045 y zero 1 . 329143 - 0 . 694748 x zero - 1 . 393348 0 . 618127","text_tokens":["一个","n","\"","346144","索引","one","print","您","一步","的","来重","levels","axis",")","更","是","排列",",","y","-","：","\\","821732","swaplevel","(","允许","618127","df","913649","]","378045","zero","694748","329143","reorder","一般化","_","1","用","[","，","393348",".","方法"," ","一般","0","层级","=","x","简单"],"title":"交换索引层级：reorder_levels方法","title_tokens":["：","reorder","索引","_","方法","交换","levels","层级"]},{"location":"pandas笔记/7.5.索引的基本操作.html#_3","text":"- `` File \"<ipython-input-1-2af17b23912b>\", line 1 - `` ^ SyntaxError: invalid syntax rename() 方法可以用来重命名多层索引，也可以用来重命名列。 renames 的 columns 参数可以接受一个字典，从而仅仅重命名你希望更改名字的列： df . rename ( columns = { 0 : \"col0\" , 1 : \"col1\" }) col0 col1 one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 用于重命名索引： df . rename ( index = { \"one\" : \"two\" , \"y\" : \"z\" }) 0 1 two z 1.821732 0.913649 x 0.346144 0.378045 zero z 1.329143 -0.694748 x -1.393348 0.618127 rename_axis() 方法可以用于对 Index 或者 MultiIndex 进行重命名。尤其的，你可以明确 MultiIndex 中的不同层级的名称，这可以被用于在之后使用 reset_index() ，把多层级索引的值转换为一个列 df . rename_axis ( index = [ 'abc' , 'def' ]) 0 1 abc def one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127 注意， DataFrame 的列也是一个索引，因此在 rename_axis 中使用 columns 参数，将会改变那个索引的名称 df . rename_axis ( columns = \"Cols\" ) . columns RangeIndex(start=0, stop=2, step=1, name='Cols') rename 和 rename_axis 都支持一个明确的字典， Series 或者一个映射函数，将标签，名称映射为新的值。 df . rename_axis ( index = [ 'abc' , 'def' ], inplace = True ) print ( df ) 0 1 abc def one y 1.821732 0.913649 x 0.346144 0.378045 zero y 1.329143 -0.694748 x -1.393348 0.618127","text_tokens":["一个","1.329143","你","列","col1","one","的","axis","用来","0.694748","多","都","stop","renames","被","dataframe","rename","two","_","仅仅","转换","1.393348","，","0.378045","为","2","用于","2af17b23912b","标签","0","0.346144","\"","1.821732","print","input","'","-",")","接受","是","使用","之后","：","中","col0","{","0.913649","reset","映射函数",":","重命名","[","multiindex","名称","也","多层","字典","可以","命名",",","step","映射","参数","(","函数","和","df","]","zero","<","columns","值","将","line","ipython","把",">","start","层级","index","=","x","z","因此","在","支持","索引","明确","对","cols","或者","尤其","def","y","。","更改","inplace","0.618127","}","名字","^","将会","syntaxerror","进行","`","abc","invalid","那个","新","改变","rangeindex","syntax","注意","1","希望","file","不同","这","name",".","方法"," ","series","true","从而"],"title":"重命名索引","title_tokens":["命名","重命名","索引"]},{"location":"pandas笔记/7.5.索引的基本操作.html#_4","text":"对于拥有多层级索引的对象来说，使用 sort_index 方法来排序。 创建示例 s ： import random tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] random . shuffle ( tuples ) s = pd . Series ( np . random . randn ( 8 ), index = pd . MultiIndex . from_tuples ( tuples )) s qux two -0.805656 one 0.404373 baz one 0.597193 bar two -0.280613 one -0.581470 baz two 1.072317 foo one 0.244656 two -0.071497 dtype: float64 # 两者等价 s . sort_index () s . sort_index ( level = 0 ) bar one -0.581470 two -0.280613 baz one 0.597193 two 1.072317 foo one 0.244656 two -0.071497 qux one 0.404373 two -0.805656 dtype: float64 s . sort_index ( level = 1 ) bar one -0.581470 baz one 0.597193 foo one 0.244656 qux one 0.404373 bar two -0.280613 baz two 1.072317 foo two -0.071497 qux two -0.805656 dtype: float64 如果“多层级索引”都被命名了的话，你也可以向 sort_index 传入一个层级名称。 s . index . set_names ([ 'L1' , 'L2' ], inplace = True ) print ( s . sort_index ( level = 'L1' ), \" \\n \" ) print ( s . sort_index ( level = 'L2' )) L1 L2 bar one - 0 . 581470 two - 0 . 280613 baz one 0 . 597193 two 1 . 072317 foo one 0 . 244656 two - 0 . 071497 qux one 0 . 404373 two - 0 . 805656 dtype : float64 L1 L2 bar one - 0 . 581470 baz one 0 . 597193 foo one 0 . 244656 qux one 0 . 404373 bar two - 0 . 280613 baz two 1 . 072317 foo two - 0 . 071497 qux two - 0 . 805656 dtype : float64 对于多维度的对象来说，你也可以对任意的的维度来进行索引，只要他们是具有 多层级索引 的： df . T . sort_index ( level = 1 , axis = 1 ) abc one zero one zero def x x y y 0 0.346144 -1.393348 1.821732 1.329143 1 0.378045 0.618127 0.913649 -0.694748 即便数据没有排序，你仍然可以对他们进行索引，但是索引的效率会极大降低，并且也会抛出 PerformanceWarning 警告。而且，这将返回一个数据的副本而非一个数据的视图： dfm = pd . DataFrame ({ 'jim' : [ 0 , 0 , 1 , 1 ], 'joe' : [ 'x' , 'x' , 'z' , 'y' ], 'jolie' : np . random . rand ( 4 )}) dfm = dfm . set_index ([ 'jim' , 'joe' ]) dfm dfm . loc [( 1 , 'z' )] .\\setup_m.py:9: PerformanceWarning: indexing past lexsort depth may impact performance. jolie jim joe 1 z 0.646365 另外，如果你试图索引一个没有完全lexsorted的对象，你将会碰到如下的错误： try : dfm . loc [( 0 , 'y' ):( 1 , 'z' )] except Exception as e : print ( f \"UnsortedIndexError: {e} \" ) UnsortedIndexError: 'Key length (2) was greater than MultiIndex lexsort depth (1)' 排序之后则不会报错 dfm . sort_index () . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.041386 z 0.646365 在 MultiIndex 上使用 is_lexsorted() 方法，你可以查看这个索引是否已经被排序。而使用 lexsort_depth 属性则可以返回排序的深度 dfm . index . is_lexsorted () False dfm . index . lexsort_depth 1 dfm = dfm . sort_index () dfm jolie jim joe 0 x 0.785068 x 0.473428 1 y 0.041386 z 0.646365 dfm . index . is_lexsorted () True dfm . index . lexsort_depth 2 现在，你的选择就可以正常工作了。 dfm . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.041386 z 0.646365","text_tokens":["一个","n","1.329143","你","performancewarning","072317","0.244656","l2","4","数据","one","的","axis","lexsorted","bar","0.694748","071497","try","多","都","碰到","0.280613","报错","\\","m","不会","降低","0.581470","被","”","任意","dataframe","9","会","仍然","indexing","警告","_","two","sort","两者","对象","py","查看","1.393348","joe","工作","，","0.378045","他们","pd","了","impact","2","副本","而","581470","0","names","0.346144","没有","jolie","as","现在","拥有","对于","lexsort","exception","\"","from","8","1.821732","is","print","performance","randn","foo","float64","'","“","-","set",")","是","e","完全","使用","已经","之后","：","false","即便","排序","来","另外","rand","{","的话","level","只要","0.913649","than","是否",":","[","greater","404373","multiindex","名称","也","l1","t","等价","1.072317","qux","如果","0.646365","dtype","可以","命名","创建","效率","视图",",","setup","上","极大","但是","length","维度","多维","(","df","]","zero","jim","0.785068","将","280613","返回","如下","random","具有","0.404373","s","正常","tuples","f","import","非","并且","层级","index","=","depth","多维度","x","抛出","z","may","在","索引","就","对","0.041386","0.805656","key","def","则","y","。","was","597193","inplace","0.071497","0.618127","}","进行","baz","传入","abc","而且","属性","1","这个","#","这","选择","0.473428","805656","错误","past","深度","shuffle",".","0.597193","示例","np","方法","244656"," ","向","dfm","试图","unsortedindexerror","来说","series","true","loc","except"],"title":"对多索引进行排序","title_tokens":["排序","索引","对","进行","多"]},{"location":"pandas笔记/7.5.索引的基本操作.html#_5","text":"将列数据变成行索引（只对 DataFrame 有效，因为 Series 没有列索引），其中： col label 变成 index name ，列数据变成行 label ： DataFrame . set_index ( keys , drop = True , append = False , inplace = False , verify_integrity = False ) keys ： 指定了一个或者一列的 column label 。这些列将会转换为行 index drop ：一个布尔值。如果为 True ，则 keys 对应的列会被删除；否则这些列仍然被保留 append ：一个布尔值。如果为 True ，则原有的行索引将保留（此时一定是个多级索引）；否则抛弃原来的行索引。 inplace ：一个布尔值。如果为 True ，则原地修改并且返回 None verify_integrity ：一个布尔值。如果为 True ，则检查新的 index 是否有重复值。否则会推迟到检测过程到必须检测的时候。 df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 ))) df [ \"key\" ] = [ \"A\" , \"B\" , \"C\" , \"D\" ] print ( df ) df . set_index ( keys = \"key\" , append = True ) 0 1 2 key 0 6 9 6 A 1 9 8 1 B 2 5 6 8 C 3 8 4 0 D 0 1 2 key 0 A 6 9 6 1 B 9 8 1 2 C 5 6 8 3 D 8 4 0","text_tokens":["列将会","一个","时候","列","4","数据","一列","的","label","keys","10","布尔值","修改","被","d","dataframe","保留","原来","9","会","仍然","只","_","转换","，","了","为","drop","2","0","没有","6","\"","8","到","print","set",")","是","其中","false","：","column","一定","是否","）","5","行","；","[","多级","变成","检测","integrity","指定","原有","有","因为","检查","为行","推迟","此时","重复","如果","删除","原地",",","3","randint","布尔","high","有效","对应","否则","(","df","]","值","将","返回","low","random","a","size","抛弃","将列","并且","index","=","必须","个","列会","索引","对","或者","key","则","。","verify","inplace","append","过程","（","新","1","col","c","name","none","b",".","np"," ","series","true","这些"],"title":"将列转换为索引","title_tokens":["将列","转换","为","索引"]},{"location":"pandas笔记/7.5.索引的基本操作.html#reset_index","text":"reset_index 会将层次化的行 index 转移到列中，成为新的一列。同时 index 变成一个整数型的，从0开始编号： DataFrame . reset_index ( level = None , drop = False , inplace = False , col_level = 0 , col_fill = '' ) Series . reset_index ( level = None , drop = False , name = None , inplace = False ) level ：一个整数、 str 、元组或者列表。它指定了将从层次化的 index 中移除的 level 。如果为 None ，则移除所有的 level 。 drop ： drop=True ，丢弃指定level，不加入列中。 drop=False ，则将指定的level转换为列。 inplace ：一个布尔值。如果为 True ，则原地修改并且返回 None 。 col_level ：索引转换为列后，指定该列的列标签位于列索引的哪个level。 col_fill ：指定除 col_level 之外的列level的名字。默认为空字符串。当存在多级列索引时生效。 对于 Series ， name 就是插入后，对应的列 label columns = [[ \"a\" , \"a\" , \"b\" ],[ \"1\" , \"2\" , \"3\" ]] df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 )), columns = columns ) print ( df ) df . reset_index ( drop = False , col_level = 0 ) a b 1 2 3 0 6 9 9 1 1 1 4 2 4 8 3 3 2 8 6 index a b 1 2 3 0 0 6 9 9 1 1 1 1 4 2 2 4 8 3 3 3 2 8 6","text_tokens":["一个","时","列","4","一列","的","label","10","同时","列后","列中","位于","默认","修改","dataframe","9","会","_","当","之外","转换","，","列表","成为","了","为","drop","标签","2","0","6","对于","\"","8","到","print","'",")","false","转移","：","中","所有","该列","level","reset","字符串","行","[","多级","变成","str","后","指定","从","加入","如果","编号","字符","整数型","原地",",","3","randint","布尔","high","为列","为空","插入","对应","(","不","df","]","columns","将","它","返回","low","random","存在","a","size","fill","哪个","并且","除","index","=","整数","元组","索引","层次","或者","则","。","inplace","名字","新","、","生效","1","col","丢弃","就是","name","层次化","none","b",".","np"," ","开始","series","true","移除","布尔值"],"title":"将索引转换为列：reset_index","title_tokens":["：","reset","索引","_","将","为列","转换","index"]},{"location":"pandas笔记/7.5.索引的基本操作.html#label","text":"丢弃某条轴上的一个或者多个 label ： Series/DataFrame.drop(labels[, axis, level, inplace, errors]) : labels ：单个 label 或者一个 label 序列，代表要被丢弃的 label axis ：一个整数，或者轴的名字。默认为 0 轴 level ：一个整数或者 level 名字，用于 MultiIndex 。因为可能在多个 level 上都有同名的 label 。 inplace ：一个布尔值。如果为 True ，则原地修改并且返回 None errors ：可以为 'ignore'/'raise' a = df . reset_index ( drop = False , col_level = 0 ) a . drop ( labels = \"a\" , axis = 1 ) a idx = a . index def fun ( x ): return x + 10 idx . map ( fun ) import gensim from gensim.models import Word2Vec Word2Vec . wv File \"<ipython-input-1-5cbf7b740fd7>\", line 19 Word2Vec.wv ^ IndentationError: unexpected indent","text_tokens":["轴","一个","的","axis","label","indent","都","10","要","默认","修改","被","dataframe","_","indentationerror","，","labels","errors","drop","为","用于","0","代表","\"","from","input","'","-",")","false","：","wv","/","19","level","可能","+","reset",":","[","multiindex","有","因为","某条","如果","可以","原地","上",",","unexpected","布尔","(","df","]","<","返回","fun","a","line","word2vec","ipython","gensim",">","import","并且","index","=","idx","x","整数","models","在","map","raise","或者","def","则","序列","。","inplace","同名","单个","名字","^","1","col","file","丢弃","多个","none","."," ","5cbf7b740fd7","ignore","series","true","布尔值","return"],"title":"按label删除行、列","title_tokens":["列","行","删除","按","label","、"]},{"location":"pandas笔记/7.6.拼接.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) from tools import Help as H import numpy as np import pandas as pd concat 函数 在深入研究 concat 函数的细节及其作用之前，这里有一个简单的示例： df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) frames = [ df1 , df2 , df3 ] result = pd . concat ( frames ) 与其在ndarrays上的同级函数一样 numpy.concatenate ，， pandas.concat 获取同类类型对象的列表或字典，并将它们与“对其他轴的操作”的一些可配置处理进行连接： pd . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , copy = True ) objs ：Series或DataFrame对象的序列或映射。如果传递了dict ，则除非传递了排序的键，否则将使用排序后的键作为keys参数，在这种情况下，将选择值（请参见下文）。除非它们都为None，否则所有None对象都将被静默删除，在这种情况下将引发ValueError。 axis ：{0，1，…}，默认值为0。沿着该轴进行拼接。 join ：{'inner'，'outer'}，默认为 'outer' 。如何处理其他轴上的索引。 'outer' 为并集， 'inner' 为交集。 ignore_index ：布尔值，默认为False。如果为True，则用0, …, n-1代替串联轴的原索引。注意，拼接时仍会考虑其他轴上的索引值。 keys ：序列，默认为无。使用传递的键作为最外层级别来构造层次结构索引。如果通过了多个级别，则应包含元组。 levels ：序列列表，默认为无。用于构造MultiIndex的特定级别（唯一值）。否则，将从按键推断出它们。 names ：列表，默认为None。生成层次结构索引中的级别的名称。 verify_integrity ：布尔值，默认为False。检查新的串联轴是否包含重复项。相对于实际数据串联而言，这可能非常昂贵。 copy ：布尔值，默认为True。如果为False，在非必要的情况下不会复制数据。 没有一点上下文，这些论点中的许多就没有多大意义。让我们回顾一下上面的例子。假设我们想将特定的键与切碎的DataFrame的每个片段相关联。我们可以使用 keys 参数来做到这一点 ： result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) 如您所见（如果您已经阅读了文档的其余部分），结果对象的索引具有 层次结构索引 。这意味着我们现在可以通过键选择每个块： result . loc [ 'y' ] A B C D 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 看到这如何非常有用并不是一件容易的事。有关此功能的详细信息，请参见下文。 注意 值得注意的是 concat() （并因此 append() ）制作了数据的完整副本，并且不断重复使用此功能可能会严重影响性能。如果需要对多个数据集使用该操作，请使用列表推导。 frames = [ process_your_file ( f ) for f in files ] result = pd . concat ( frames ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-442ff6d9e7b9> in <module> ----> 1 frames = [ process_your_file(f) for f in files ] 2 result = pd.concat(frames) NameError: name 'files' is not defined 处理其他轴的逻辑：join参数 将多个DataFrame粘合在一起时，可以选择如何处理其他轴（而不是串联的轴）。这可以通过以下两种方式完成： 把它们全部结合起来 join='outer' 。这是默认选项，这不会丢失信息。 只保留交集 join='inner' 。 默认 join='outer' ： df4 = pd . DataFrame ({ 'B' : [ 'B2' , 'B3' , 'B6' , 'B7' ], 'D' : [ 'D2' , 'D3' , 'D6' , 'D7' ], 'F' : [ 'F2' , 'F3' , 'F6' , 'F7' ]}, index = [ 2 , 3 , 7 , 6 ]) result = pd . concat ([ df1 , df4 ], axis = 1 , sort = True , join = \"outer\" ) 只保留交集 join='inner' ： result = pd . concat ([ df1 , df4 ], axis = 1 , join = 'inner' ) 如果只想用其中一个DataFrame的索引： result = pd . concat ([ df1 , df4 ], axis = 1 ) . reindex ( df1 . index ) 也可以在连接之前建立索引： pd . concat ([ df1 , df4 . reindex ( df1 . index )], axis = 1 ) A B C D B D F 0 A0 B0 C0 D0 NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN 2 A2 B2 C2 D2 B2 D2 F2 3 A3 B3 C3 D3 B3 D3 F3 使用 append 拼接 concat() 的一个快捷方式是 append() ，这是Series和DataFrame的 append() 实例方法 。这些方法实际上早于 concat 。 append() 方法让Series和DataFrame沿着行（ axis=0 ）拼接在一起： append ( self , other , ignore_index = False , verify_integrity = False , sort = None ) 实际上，不要求两个DataFrame的行索引交集为空，列索引也是这样： result = df1 . append ( df4 , sort = False , ignore_index = True ) append 可以拼接多个对象： result = df1 . append ([ df2 , df3 ]) 与list对象的 append() 方法不同，DataFrame对象的 append() 方法会返回副本， 不会修改 df1 。 忽略串联轴上的索引：ignore_index 如果 DataFrame 的索引没有意义，可以使用 ignore_index 参数： result = pd . concat ([ df1 , df4 ], ignore_index = True , sort = False ) DataFrame.append() 方法也有这个参数： result = df1 . append ( df4 , ignore_index = True , sort = False ) 混合串联 Series 和 DataFrame 可以拼接 Series 和 DataFrame 。该 Series 会转化为 DataFrame 的一列，列名是 Series 的 name 。 s1 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], name = 'X' ) result = pd . concat ([ df1 , s1 ], axis = 1 ) 如果 Series 未命名，则将连续编号。 s2 = pd . Series ([ '_0' , '_1' , '_2' , '_3' ]) result = pd . concat ([ df1 , s2 , s2 , s2 ], axis = 1 ) 通过 ignore_index=True 删除原有索引标签。 result = pd . concat ([ df1 , s1 ], axis = 1 , ignore_index = True ) key 参数 keys 参数的一个相当普遍的用法是重新指定原DataFrame或Series的名字，可以作为拼接后的DataFrame的列索引： s3 = pd . Series ([ 0 , 1 , 2 , 3 ], name = 'foo' ) s4 = pd . Series ([ 0 , 1 , 2 , 3 ]) s5 = pd . Series ([ 0 , 1 , 4 , 5 ]) pd . concat ([ s3 , s4 , s5 ], axis = 1 ) foo 0 1 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 通过 keys 参数，可以覆盖现有的列名。 pd . concat ([ s3 , s4 , s5 ], axis = 1 , keys = [ 'red' , 'blue' , 'yellow' ]) red blue yellow 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 让我们考虑第一个示例的变体： result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) 还可以将需要拼接的DataFrame以dict形式传递给 concat 函数，在这种情况下，dict键将用作 keys 参数（除非指定了其他键）： pieces = { 'x' : df1 , 'y' : df2 , 'z' : df3 } result = pd . concat ( pieces ) result = pd . concat ( pieces , keys = [ 'z' , 'y' ]) 创建的MultiIndex具有根据传递的键和 DataFrame 片段索引构造的级别： result . index . levels FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) 如果想指定其他级别（偶尔会这样），则可以使用以下 levels 参数： result = pd . concat ( pieces , keys = [ 'x' , 'y' , 'z' ], levels = [[ 'z' , 'y' , 'x' , 'w' ]], names = [ 'group_key' ]) result . index . levels FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]) 行追加到 DataFrame 尽管效率不是很高（因为必须创建一个新的对象），但是可以向 append 传递一个 Series 或dict来将一行附加到 DataFrame ： s2 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], index = [ 'A' , 'B' , 'C' , 'D' ]) result = df1 . append ( s2 , ignore_index = True ) 还可以传递字典或系列的列表： dicts = [{ 'A' : 1 , 'B' : 2 , 'C' : 3 , 'X' : 4 }, { 'A' : 5 , 'B' : 6 , 'C' : 7 , 'Y' : 8 }] result = df1 . append ( dicts , ignore_index = True , sort = False ) 数据库形式的拼接 pandas具有全功能、高性能的内存连接操作，与SQL等关系数据库非常相似。这些方法的性能比其他开源实现（如R中的base：：merge.data.frame）要好得多（在某些情况下甚至超过一个数量级）。原因是仔细的算法设计和DataFrame的数据的内部布局。 pandas提供函数 merge() ，作为DataFrame或Series对象之间所有标准数据库拼接操作的入口点： pd . merge ( left , right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = True , suffixes = ( '_x' , '_y' ), copy = True , indicator = False , validate = None ) left ：一个DataFrame或Series的对象。 right ：另一个DataFrame或Series的对象。 on ：一个 label 或者 label list 。它指定用作连接键的列的 label 。并且必须在两个 DataFrame 中这些 label 都存在。如果它为 None ，则默认使用两个 DataFrame 的列 label 的交集。你可以通过 left_on/right_on 分别指定两侧 DataFrame 对齐的连接键。 left_on ：一个 label 或者 label list 。指定左边 DataFrame 用作连接键的列，参考 on 。 right_on ：一个 label 或者 label list 。指定右边 DataFrame 用作连接键的列，参考 on 。 left_index ：一个布尔值。如果为 True ，则使用左边的 DataFrame 的行的 index value 来作为连接键来合并。 right_index ：一个布尔值。如果为 True ，则使用右边的 DataFrame 的行的 index value 来作为连接键来合并。 how ：其一 'left' ， 'right' ， 'outer' ， 'inner' 。默认为 inner 。有关每种方法的详细说明，请参见下文。 sort ：一个布尔值。如果为 True ，则在结果中，对合并采用的连接键进行排序。 suffixes ：一个二元序列。对于结果中同名的列，它会添加前缀来指示它们来自哪个 DataFrame 。 copy ：一个布尔值。如果为 True ，则拷贝基础数据。否则不拷贝数据。 indicator ：一个字符串或者布尔值。 如果为 True ，则结果中多了一列称作 _merge ，该列给出了每一行来自于那个 DataFrame 。 如果为字符串，则结果中多了一列（该列名字由 indicator 字符串给出），该列给出了每一行来自于那个 DataFrame 。 validate ：字符串，默认为无。如果指定，则检查合并是否为指定的类型。 'one_to_one'或'1:1'：检查合并键在左右数据集中是否唯一。 'one_to_many'或'1:m'：检查合并键在左数据集中是否唯一。 'many_to_one'或'm:1'：检查合并键在正确的数据集中是否唯一。 'many_to_many'或'm:m'：允许，但不进行检查。 新功能： 0.23.0版本中添加了指定索引级别的 on 、 left_on 、 right_on 参数的支持。在0.24.0版中添加了合并命名的Series的支持。 merge 是pandas命名空间中的一个函数，它也可以作为DataFrame实例方法 merge() 使用，调用 DataFrame.merge 时， DataFrame 被视为拼接中的左侧对象。 相关 join() 方法在 merge 内部用于索引索引连接（默认情况下）和索引列连接。如果仅加入索引，则可能希望使用 DataFrame.join 来节省一些输入。 合并方法简介（关系代数） 有经验的关系数据库（如SQL）用户将熟悉用于描述两个SQL类表结构（DataFrame对象）之间的连接操作的术语。有几个案例需要考虑，这些案例非常重要： one-to-one 联接：两个DataFrame对象的组合键都是唯一值。 many-to-one 联接：其中一个DataFrame对象的组合键是唯一值，另一个有重复值。 many-to-many 联接：两个DataFrame对象的组合键都有重复值。 注意 在列上连接列时（可能是多对多连接），传递的 DataFrame 对象上的所有索引 都将被丢弃 。 值得花些时间了解多对多连接案例的结果。 在SQL/标准关系代数中，如果键组合在两个表中出现不止一次，则生成的表将具有关联数据的笛卡尔积。 下面是一个非常基本的例子，使用一个组合键，并且组合键的值都是唯一的： left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = 'key' ) 多个组合键的示例（默认 how='inner' ）： left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = [ 'key1' , 'key2' ]) 当左右两边的组合键不一致时，处理行为由 how 参数指定。以下是 how 选项及其SQL等效名称的摘要： 合并方式 SQL连接名称 描述 left LEFT OUTER JOIN 仅保留left出现的组合键 right RIGHT OUTER JOIN 仅保留right出现的组合键 outer FULL OUTER JOIN 保留left和right组合键的并集 inner INNER JOIN 保留left和right组合键的交集 result = pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'inner' , on = [ 'key1' , 'key2' ]) 这是组合键具有重复值的示例： left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 2 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) result = pd . merge ( left , right , on = 'B' , how = 'outer' ) 警告 在重复键上进行拼接，会导致返回的DataFrame的函数是原来两个DataFrame行数的乘积，这可能导致内存溢出。如果DataFrame很大，应该对重复键进行管理。 检查重复键：validate 0.21.0版中的新功能。 可以使用 validate 参数自动检查组合键中是否有意外的重复项。在合并操作之前检查键的唯一性，可以防止内存溢出。检查组合键的唯一性也是确保数据结构符合预期的一种好方法。 在以下示例中，right中的 B 存在重复的值。由于这不是 validate 参数中指定的一对一合并，因此将引发异常。 left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 1 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) try : result = pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_one\" ) except Exception as e : print ( \"MergeError:\" , e ) MergeError : Merge keys are not unique in right dataset ; not a one - to - one merge 如果用户知道右边的重复项， DataFrame 但要确保左边的DataFrame中没有重复项，则可以改用该 validate='one_to_many' 参数，这不会引发异常。 pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_many\" ) A_x B A_y 0 1 1 NaN 1 2 2 4.0 2 2 2 5.0 3 2 2 6.0 指示符：indicator merge() 接受指示符参数 indicator 。如果 indicator=True ，则将一个名为 _merge ，dtype为Categorical的列添加到输出DataFrame的末尾： indicator _merge 值 仅出现在 'left' 组合键 left_only 仅出现在 'right' 组合键 right_only 同时出现在 'left' 和 'right' 组合键 both df1 = pd . DataFrame ({ 'col1' : [ 0 , 1 ], 'col_left' : [ 'a' , 'b' ]}) df2 = pd . DataFrame ({ 'col1' : [ 1 , 2 , 2 ], 'col_right' : [ 2 , 2 , 2 ]}) pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = True ) col1 col_left col_right _merge 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only indicator 参数还可以接受字符串参数，在这种情况下，指标函数将使用传递的字符串的值作为 指标列 的名称。 pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = 'indicator_column' ) col1 col_left col_right indicator_column 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only 合并时数据类型的转换 合并将保留组合键的数据类型 left = pd . DataFrame ({ 'key' : [ 1 ], 'v1' : [ 10 ]}) print ( left , \" \\n \" ) right = pd . DataFrame ({ 'key' : [ 1 , 2 ], 'v1' : [ 20 , 30 ]}) print ( right ) key v1 0 1 10 key v1 0 1 20 1 2 30 我们可以保留组合键： print ( pd . merge ( left , right , how = 'outer' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' ) . dtypes ) key v1 0 1 10 1 1 20 2 2 30 key int64 v1 int64 dtype : object 如果缺少引入的值，则生成的dtype将被转换： print ( pd . merge ( left , right , how = 'outer' , on = 'key' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' , on = 'key' ) . dtypes ) key v1_x v1_y 0 1 10 . 0 20 1 2 NaN 30 key int64 v1_x float64 v1_y int64 dtype : object 合并将保留mergands的category类型。另请参阅关于 categoricals 的部分。 left： from pandas.api.types import CategoricalDtype X = pd . Series ( np . random . choice ([ 'foo' , 'bar' ], size = ( 10 ,))) X = X . astype ( CategoricalDtype ( categories = [ 'foo' , 'bar' ])) left = pd . DataFrame ({ 'X' : X , 'Y' : np . random . choice ([ 'one' , 'two' , 'three' ], size = ( 10 ,))}) print ( left , \" \\n \" ) print ( left . dtypes ) X Y 0 foo three 1 foo two 2 bar three 3 bar three 4 bar two 5 foo two 6 bar two 7 bar one 8 bar two 9 bar two X category Y object dtype : object right： right = pd . DataFrame ({ 'X' : pd . Series ([ 'foo' , 'bar' ], dtype = CategoricalDtype ([ 'foo' , 'bar' ])), 'Z' : [ 1 , 2 ]}) print ( right , \" \\n \" ) print ( right . dtypes ) X Z 0 foo 1 1 bar 2 X category Z int64 dtype : object 合并结果： result = pd . merge ( left , right , how = 'outer' ) print ( result , \" \\n \" ) print ( result . dtypes ) X Y Z 0 foo three 1 1 foo two 1 2 foo two 1 3 bar three 2 4 bar three 2 5 bar two 2 6 bar two 2 7 bar one 2 8 bar two 2 9 bar two 2 X category Y object Z int64 dtype : object 注意 category 类型必须 完全相同 ，这意味着category对象有相同的类别和有序属性。否则，category类型将被转换成object类型。 注意 与object数据类型合并相比，在相同的category数据类型上进行合并可以获得更好的性能。 DataFrame.join() 这是一个非常基本的示例： left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) result = left . join ( right ) result = left . join ( right , how = 'outer' ) 与上述相同，但带有 how='inner' ： result = left . join ( right , how = 'inner' ) 此处的数据对齐在索引（行标签）上。使用 merge 指示其使用索引的附加参数可以实现相同的行为： result = pd . merge ( left , right , left_index = True , right_index = True , how = 'outer' ) result = pd . merge ( left , right , left_index = True , right_index = True , how = 'inner' ) 按 组合键列 和 索引 拼接：join join() 接受一个可选的 on 参数，该参数可以是一个列或多个列名，它指定传递的DataFrame将在原DataFrame中的该列上对齐。即这两个函数调用完全等价： left . join ( right , on = key_or_keys ) pd . merge ( left , right , left_on = key_or_keys , right_index = True , how = 'left' , sort = False ) 显然，您可以选择任何一种更方便的形式。对于many-to-one拼接（其中一个DataFrame的索引是组合键），使用 join 可能会更方便。这是一个简单的示例： left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' ], 'D' : [ 'D0' , 'D1' ]}, index = [ 'K0' , 'K1' ]) result = left . join ( right , on = 'key' ) result = pd . merge ( left , right , left_on = 'key' , right_index = True , how = 'left' , sort = False ); 如果组合键有多个，传递的DataFrame必须具有 MultiIndex ： left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) index = pd . MultiIndex . from_tuples ([( 'K0' , 'K0' ), ( 'K1' , 'K0' ), ( 'K2' , 'K0' ), ( 'K2' , 'K1' )]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) 现在，可以通过传递两个组合键来进行拼接： result = left . join ( right , on = [ 'key1' , 'key2' ]) 默认的 DataFrame.join 是执行左联接（对于Excel用户，本质上是“ VLOOKUP”操作），该联接仅使用在调用DataFrame中找到的键。其他联接类型（例如内部联接）也可以轻松执行： result = left . join ( right , on = [ 'key1' , 'key2' ], how = 'inner' ) 如您所见，这将删除所有不匹配的行。 按 单层索引 和 多层索引 拼接：join 可以将单层索引DataFrame与多层索引DataFrame的 一个级别 连接起来。该级别将与单索引DataFrame的索引名称和多索引DataFrame的级别名称相匹配 left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = pd . Index ([ 'K0' , 'K1' , 'K2' ], name = 'key' )) index = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) result = left . join ( right , how = 'inner' ) 下面的函数和上面的方法是等效的，但 pd.merge 的信息更详细，存储效率更高/更快。 result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'Y' ]) 按MultiIndexes拼接：join 只要在连接中完全使用了右参数的索引，并且该参数是左参数中索引的子集，就可以用有限的方式来支持它，如下例所示： leftindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' ), [ 1 , 2 ]], names = [ 'abc' , 'xy' , 'num' ]) left = pd . DataFrame ({ 'v1' : range ( 12 )}, index = leftindex ) print ( left , \" \\n \" ) rightindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' )], names = [ 'abc' , 'xy' ]) right = pd . DataFrame ({ 'v2' : [ 100 * i for i in range ( 1 , 7 )]}, index = rightindex ) print ( right , \" \\n \" ) left . join ( right , on = [ 'abc' , 'xy' ], how = 'inner' ) v1 abc xy num a x 1 0 2 1 y 1 2 2 3 b x 1 4 2 5 y 1 6 2 7 c x 1 8 2 9 y 1 10 2 11 v2 abc xy a x 100 y 200 b x 300 y 400 c x 500 y 600 v1 v2 abc xy num a x 1 0 100 2 1 100 y 1 2 200 2 3 200 b x 1 4 300 2 5 300 y 1 6 400 2 7 400 c x 1 8 500 2 9 500 y 1 10 600 2 11 600 如果不满足该条件，则可以使用以下代码完成具有两个多索引的联接。 leftindex = pd . MultiIndex . from_tuples ([( 'K0' , 'X0' ), ( 'K0' , 'X1' ), ( 'K1' , 'X2' )], names = [ 'key' , 'X' ]) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = leftindex ) rightindex = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = rightindex ) result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'X' , 'Y' ]) 按照列和索引合并 0.23版中的新功能。 on 、 left_on 和 right_on 参数可以引用列名或索引级名称。这允许在索引和列的组合上合并DataFrame实例，而不必重置索引： left_index = pd . Index ([ 'K0' , 'K0' , 'K1' , 'K2' ], name = 'key1' ) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}, index = left_index ) right_index = pd . Index ([ 'K0' , 'K1' , 'K2' , 'K2' ], name = 'key1' ) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K1' ]}, index = right_index ) result = left . merge ( right , on = [ 'key1' , 'key2' ]) 值列重叠 merge 函数的 suffixes 参数接受字符串列表的元组，以附加到输入DataFrame中重叠的列名以消除结果列的歧义： left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K2' ], 'v' : [ 1 , 2 , 3 ]}) right = pd . DataFrame ({ 'k' : [ 'K0' , 'K0' , 'K3' ], 'v' : [ 4 , 5 , 6 ]}) result = pd . merge ( left , right , on = 'k' ) result = pd . merge ( left , right , on = 'k' , suffixes = [ '_l' , '_r' ]) DataFrame.join() 具有 lsuffix 和 rsuffix 行为类似的参数。 left = left . set_index ( 'k' ) right = right . set_index ( 'k' ) result = left . join ( right , lsuffix = '_l' , rsuffix = '_r' ) 拼接多个DataFrames DataFrames 也可以传递的列表或元组以 join() 将它们连接到它们的索引上。 right2 = pd . DataFrame ({ 'v' : [ 7 , 8 , 9 ]}, index = [ 'K1' , 'K1' , 'K2' ]) result = left . join ([ right , right2 ]) 按索引填补缺失值 另一个相当常见的情况是有两个索引存在交集的对象，其中一个存在缺失值，想通过另一个对象填补缺失值。这是一个例子： df1 = pd . DataFrame ([[ np . nan , 3. , 5. ], [ - 4.6 , np . nan , np . nan ], [ np . nan , 7. , np . nan ]]) df2 = pd . DataFrame ([[ - 42.6 , np . nan , - 8.2 ], [ - 5. , 1.6 , 4 ]], index = [ 1 , 2 ]) combine_first() 方法可以达到这个效果： result = df1 . combine_first ( df2 ) 请注意， combine_first 返回副本，而 update() 则会修改原对象： df1 . update ( df2 ) 合并时间序列 合并有序数据 merge_ordered() 函数允许组合时间序列和其他有序数据。 merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ( \"_x\" , \"_y\" ), how = \"outer\" , ) left_by : Group left DataFrame by group columns and merge piece by piece with right DataFrame left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'lv' : [ 1 , 2 , 3 , 4 ], 's' : [ 'a' , 'b' , 'c' , 'd' ]}) right = pd . DataFrame ({ 'k' : [ 'K1' , 'K2' , 'K4' ], 'rv' : [ 1 , 2 , 3 ]}) print ( left , \" \\n \" ) print ( right ) pd . merge_ordered ( left , right , fill_method = None , left_by = 's' ) k lv s 0 K0 1 a 1 K1 2 b 2 K1 3 c 3 K2 4 d k rv 0 K1 1 1 K2 2 2 K4 3 k lv s rv 0 K0 1.0 a NaN 1 K1 NaN a 1.0 2 K2 NaN a 2.0 3 K4 NaN a 3.0 4 K1 2.0 b 1.0 5 K2 NaN b 2.0 6 K4 NaN b 3.0 7 K1 3.0 c 1.0 8 K2 NaN c 2.0 9 K4 NaN c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 NaN d 3.0 它具有一个可选 fill_method 关键字来填充丢失的数据： # 前向填充：后面的缺失值用前面的数字填充 pd . merge_ordered ( left , right , fill_method = \"ffill\" , left_by = 's' ) k lv s rv 0 K0 1.0 a NaN 1 K1 1.0 a 1.0 2 K2 1.0 a 2.0 3 K4 1.0 a 3.0 4 K1 2.0 b 1.0 5 K2 2.0 b 2.0 6 K4 2.0 b 3.0 7 K1 3.0 c 1.0 8 K2 3.0 c 2.0 9 K4 3.0 c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 4.0 d 3.0 合并ASOF merge_asof() 类似于有序左联接，只是我们匹配最近的键而不是相等的键。对于左数据框中的每一行，我们选择右数据框中的最后一行，该行的on键小于lefs键。两个数据帧都必须按键排序。 可选地，asof合并可以执行逐组合并。除了on键上最接近的匹配之外，它与by键的匹配相同 merge_asof ( left , right , on = None , left_on = None , right_on = None , left_index = False , right_index = False , by = None , left_by = None , right_by = None , suffixes = ( \"_x\" , \"_y\" ), tolerance = None , allow_exact_matches = True , direction = \"backward\" , ) 例如，我们可能有 trades 和 quotes ，我们想合并它们 trades = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.038' , '20160525 13:30:00.048' , '20160525 13:30:00.048' , '20160525 13:30:00.048' ]), 'ticker' : [ 'MSFT' , 'MSFT' , 'GOOG' , 'GOOG' , 'AAPL' ], 'price' : [ 51.95 , 51.95 , 720.77 , 720.92 , 98.00 ], 'quantity' : [ 75 , 155 , 100 , 100 , 100 ]}, columns = [ 'time' , 'ticker' , 'price' , 'quantity' ]) quotes = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.023' , '20160525 13:30:00.030' , '20160525 13:30:00.041' , '20160525 13:30:00.048' , '20160525 13:30:00.049' , '20160525 13:30:00.072' , '20160525 13:30:00.075' ]), 'ticker' : [ 'GOOG' , 'MSFT' , 'MSFT' , 'MSFT' , 'GOOG' , 'AAPL' , 'GOOG' , 'MSFT' ], 'bid' : [ 720.50 , 51.95 , 51.97 , 51.99 , 720.50 , 97.99 , 720.50 , 52.01 ], 'ask' : [ 720.93 , 51.96 , 51.98 , 52.00 , 720.93 , 98.01 , 720.88 , 52.03 ]}, columns = [ 'time' , 'ticker' , 'bid' , 'ask' ]) print ( trades , \" \\n \" ) print ( quotes ) time ticker price quantity 0 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 75 1 2016 - 05 - 25 13 : 30 : 00 . 038 MSFT 51 . 95 155 2 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 77 100 3 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 92 100 4 2016 - 05 - 25 13 : 30 : 00 . 048 AAPL 98 . 00 100 time ticker bid ask 0 2016 - 05 - 25 13 : 30 : 00 . 023 GOOG 720 . 50 720 . 93 1 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 51 . 96 2 2016 - 05 - 25 13 : 30 : 00 . 030 MSFT 51 . 97 51 . 98 3 2016 - 05 - 25 13 : 30 : 00 . 041 MSFT 51 . 99 52 . 00 4 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 50 720 . 93 5 2016 - 05 - 25 13 : 30 : 00 . 049 AAPL 97 . 99 98 . 01 6 2016 - 05 - 25 13 : 30 : 00 . 072 GOOG 720 . 50 720 . 88 7 2016 - 05 - 25 13 : 30 : 00 . 075 MSFT 52 . 01 52 . 03 默认情况下，我们采用的是quotes。 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN 我们只在quote 时间和trade 时间之间的2毫秒内合并： pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '2ms' )) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 NaN NaN 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN 我们只在quote 时间和trade 时间之间的10毫秒内合并，并且不包括精确匹配。注意，尽管我们排除了（quotes的）完全匹配项，但以前的quotes确实会传播到那个时间点。 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '10ms' ), allow_exact_matches = False ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 NaN NaN 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 NaN NaN 3 2016-05-25 13:30:00.048 GOOG 720.92 100 NaN NaN 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN","text_tokens":["右","n","值得","numpy","col1","一列","点","经验","相同","copy","层次结构","全部","only","three","s5","10","相对","用作","05","\\","不会","075","连续","代码","许多","深入研究","第一个","算法","被","导致","v.1915","即","r","实现","下面","变体","lsuffix","其一","警告","它们","key2","s2","转换","摘要","信息","range","数量级","简介","041","而","amd64","其余部分","相当","720.92","0","join","处理","call","2ms","x3","对于","转换成","defined","from","8","outer","性能比","e","float64","f6","levels","不止一次","set","50","20","self","连接起来","以","量级","：","中","入口","更好","column","防止","关键字","many","该行","唯一","只要","右边","1.6","inner","该","5","行","这是","作用","制作","[","most","仍会","偶尔","不断","nan","两个","缺失","很","w","普遍","回顾","720.88","存储","00","等价","消除","例","01","来自","如果","2016","for","深入","调用","任何","3","研究","假设","改用","通过","布局","沿着","为空","表中","msc","51.99","和","笛卡尔","符","值","提供","键来","leftindex","400","存在","每种","piece","y3","x2","建立","your","x0","tuples","效果","fill","d0","import","带有","s4","部分","list","帧","c1","包括","键上","00.049","下文","categorical","30","result","dataframes","内存","…","据库","同名","valueerror","静默","基础","data","正确","非必要","dicts","新","那个","abc","实际上","h","objs","实例","suffixes","希望","左","tools","找到","可选地","作为","astype","轻松","155","b","b8","module","not",".","推断","indicator","达到","昂贵","重叠","on","ignore","loc","项","这些","布尔值","*","96","k3","matches","时","int64","75","列","bid","51","rsuffix","bar","更","d5","keys","严重","左边","它会","一起","请参阅","歧义","98.00","93","外层","13","混合","卡尔","所见","原","默认","级","修改","v1","余部","精确","用户","049","4.6","88","k0","00.023","设计","只","毫秒","可选","此","two","符合","merge","第一","a5","windows","用","我们","需要","代替","mergands","积","，","子集","dtypes","换成","说明","trades","pd","附加","为","标签","pandas","用于","分别","执行","03","切碎","f2","720.77","as","对齐","现在","除非","l","a6","实际","\"","引用","关联","匹配","print","51.97","-","asof","其中","推导","已经","逻辑","等","b5","df3","所有","拷贝","指示","组合键","节省","细节","空间","操作","关键","上面","结构","how","阅读",";","单层","98.01","y1","一样","d6","后","如","原有","multiindex","想","df1","b6","函数调用","allow","集","有","lefs","检查","其余","传播","左侧","获取","c4","此处","12","both","a8","必要","版本","字符","64","上","y2","值用","072","称作","甚至","但是","are","a1","a7","可","choice","映射","参数","c10","按照","函数","一对一","之前","引发","全功能","trade","返回","上述","quotes","random","a","具有","b9","让","a9","填补","ipython","b2","并","b7","ordered","仅","哪个","有序","关系","num","名为","但","x","某些","在","意味","group","快捷方式","traceback","77","8.2","起来","help","两种","c8","}","进行","容易","要求","a10","应该","excel","这样","、","系数","属性","详细","b10","条件","col","5.0","c6","丢失","不同","丢弃","按","s1","中多","与其","一点","逐","time","ticker"," ","视为","参考","重要","25","相等","术语","series","42.6","except","720","轴","接起","一个","ask","你","现有","direction","4","00.048","00.072","类型","的","xy","类表","每个","方式","列名","f7","前缀","多","及其","无","两边","a11","详细信息","other","原因","保留","9","原来","92","溢出","process","会","0.23","由","排除","d3","采用","_","当","with","51.96","本质","d7","行为","s3","backward","了","2","副本","覆盖","开源","关于","例如","意义","影响","frames","multiindexes","c3","没有","b11","tolerance","6","blue","满足","几个","引入","好得多","到","v2","'",")","是","接受","使用","52.00","false","基本","dataset","来","concatenate","唯一性","高性能","相关联","{","该列","完全相同","小于","442ff6d9e7b9","一下","相匹配","200","b0","最","字符串","高性","代数","用法","花些",":","a0","填充","传递","所示","----","720.93","categories","常见","goog","00.075","integrity","00.030","2.0","指定","名称","一些","也","recent","因为","其他","如何","级别","还","一种","object","v","请","上下","显然","7","重复","or","从","多层","简单","最近","加入","编号","好","推断出","不止","dtype","可以","命名","by",",","描述","51.95","52","0.24","能比","块","不是","重新","@","管理","mergeerror","files","左右","k4","(","to","而言","功能","更高","数据库","4.0","columns","出现","将","关系数据库","获得","如下","参见","pieces","048","一行","缺少","连接","前向",">","f","timedelta","category","并且","行数","d11","高","这里","性能","api","或","97.99","类似","元组","支持","k2","未命名","您","考虑","and","51.98","后面","另","key","则","y","数字","ffill","frozenlist","00.041","相比","这种","组合","aapl","msft","有限","名字","52.03","k","（","乘积","52.01","应","尽管","意外","1.0","复制","意味着","超过","下","file","粘合","多个","上下文","python","c11","以前","d10","c","选择","这","一件","name","一个二元","完成","同级","np","方法","sql","last","向","异常","full","只是","确实","参阅","true","系列","c7","b3","构造","例子","不必","知道","数据","0.21","one","axis","与","label","categoricals","try","a2","都","95","串联","多大","要","left","同时","in","m","a3","validate","等效","500","720.50","单","”","d","dataframe","df4","重复使用","right2","之间","于","值得注意","sort","早","base","之外","重置","对象","事","列表","拼接","快","值列","联接","案例","b1","相关","有关","categoricaldtype","00.038","预期","同类","添加","names","熟悉","交集","rightindex","转化","输入","末尾","exception","接近","除了","is","给","k1","input","foo","“","前面","形式","c0","完全","99","框中","排序","根据","两侧","每","/","---------------------------------------------------------------------------","轴上","600","可能","列上","是否","red","）","reset","yellow","d9","快捷","数量","d2","特定","6.0","types","一次","c9","reindex","100","想用","value","合并","做到","y0","i","选","a4","结果","类别","追加","97","按键","字典","完整","first","unique","20160525","删除","配置","文档","其","concat","创建","method","效率","quantity","038","了解","输出","023","给出","忽略","布尔","f3","只想用","否则","标准","exact","bit","quote","相似","ndarrays","不","]","df2","结合","key1","<","仔细","vlookup","一对","c2","数据结构","它","内部","数据类型","300","把","size","s","键","二元","方便","d4","x1","11","right","集中","frame","10ms","index","=","必须","版中","3.7","默认值","z","因此","选项","一致","最后","包含","情况","dict","索引","datetime","就","层次","对","combine","指标","或者","内","序列","。","verify","append","d1","自动","product","update","030","允许","lv","片段","d8","nameerror","非常","由于","b4","注意","1","这个","列时","rv","#","时间","c5","论点","none","确保","看到","表将","price","示例","以下","很大","生成","3.0","98","有用"],"title":"7.6.拼接","title_tokens":["7.6","拼接","."]},{"location":"pandas笔记/7.6.拼接.html#concat","text":"在深入研究 concat 函数的细节及其作用之前，这里有一个简单的示例： df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) frames = [ df1 , df2 , df3 ] result = pd . concat ( frames ) 与其在ndarrays上的同级函数一样 numpy.concatenate ，， pandas.concat 获取同类类型对象的列表或字典，并将它们与“对其他轴的操作”的一些可配置处理进行连接： pd . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , copy = True ) objs ：Series或DataFrame对象的序列或映射。如果传递了dict ，则除非传递了排序的键，否则将使用排序后的键作为keys参数，在这种情况下，将选择值（请参见下文）。除非它们都为None，否则所有None对象都将被静默删除，在这种情况下将引发ValueError。 axis ：{0，1，…}，默认值为0。沿着该轴进行拼接。 join ：{'inner'，'outer'}，默认为 'outer' 。如何处理其他轴上的索引。 'outer' 为并集， 'inner' 为交集。 ignore_index ：布尔值，默认为False。如果为True，则用0, …, n-1代替串联轴的原索引。注意，拼接时仍会考虑其他轴上的索引值。 keys ：序列，默认为无。使用传递的键作为最外层级别来构造层次结构索引。如果通过了多个级别，则应包含元组。 levels ：序列列表，默认为无。用于构造MultiIndex的特定级别（唯一值）。否则，将从按键推断出它们。 names ：列表，默认为None。生成层次结构索引中的级别的名称。 verify_integrity ：布尔值，默认为False。检查新的串联轴是否包含重复项。相对于实际数据串联而言，这可能非常昂贵。 copy ：布尔值，默认为True。如果为False，在非必要的情况下不会复制数据。 没有一点上下文，这些论点中的许多就没有多大意义。让我们回顾一下上面的例子。假设我们想将特定的键与切碎的DataFrame的每个片段相关联。我们可以使用 keys 参数来做到这一点 ： result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) 如您所见（如果您已经阅读了文档的其余部分），结果对象的索引具有 层次结构索引 。这意味着我们现在可以通过键选择每个块： result . loc [ 'y' ] A B C D 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 看到这如何非常有用并不是一件容易的事。有关此功能的详细信息，请参见下文。 注意 值得注意的是 concat() （并因此 append() ）制作了数据的完整副本，并且不断重复使用此功能可能会严重影响性能。如果需要对多个数据集使用该操作，请使用列表推导。 frames = [ process_your_file ( f ) for f in files ] result = pd . concat ( frames ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-442ff6d9e7b9> in <module> ----> 1 frames = [ process_your_file(f) for f in files ] 2 result = pd.concat(frames) NameError: name 'files' is not defined","text_tokens":["n","值得","numpy","copy","层次结构","10","相对","不会","许多","深入研究","被","它们","信息","其余部分","0","join","处理","call","defined","8","outer","levels","：","中","唯一","inner","该","5","作用","制作","[","most","仍会","不断","回顾","如果","for","深入","3","研究","假设","通过","沿着","值","your","d0","部分","c1","下文","result","…","valueerror","静默","非必要","新","objs","作为","b","b8","module","not",".","推断","昂贵","ignore","loc","项","这些","布尔值","时","d5","keys","严重","外层","所见","原","默认","余部","此","a5","用","我们","需要","代替","，","pd","为","pandas","用于","切碎","现在","除非","a6","实际","关联","-","推导","已经","b5","df3","所有","细节","操作","上面","结构","阅读","一样","d6","后","如","multiindex","想","df1","b6","集","有","检查","其余","获取","c4","a8","必要","上","a1","a7","可","映射","参数","c10","函数","之前","引发","a","具有","b9","让","a9","ipython","b2","并","b7","x","在","意味","traceback","c8","}","进行","容易","a10","详细","b10","c6","与其","一点"," ","series","轴","一个","4","类型","的","每个","及其","无","a11","详细信息","9","process","会","d3","_","d7","了","2","副本","意义","影响","frames","c3","没有","b11","6","'",")","是","使用","false","来","concatenate","相关联","{","442ff6d9e7b9","一下","b0","最",":","a0","传递","----","integrity","名称","一些","recent","其他","如何","级别","请","上下","7","重复","从","简单","推断出","可以",",","块","不是","files","(","而言","功能","将","参见","连接",">","f","并且","d11","这里","性能","或","元组","您","考虑","则","y","这种","（","应","复制","意味着","下","file","多个","上下文","c11","d10","c","选择","这","一件","name","同级","last","true","c7","b3","构造","例子","数据","axis","与","a2","都","串联","多大","in","a3","”","d","dataframe","重复使用","于","值得注意","对象","事","列表","拼接","b1","相关","有关","同类","names","交集","is","input","“","c0","排序","---------------------------------------------------------------------------","轴上","可能","是否","）","d9","d2","特定","c9","做到","a4","结果","按键","字典","完整","删除","配置","文档","concat","布尔","否则","ndarrays","]","df2","<","c2","键","d4","11","index","=","默认值","z","因此","包含","情况","dict","索引","就","层次","对","序列","。","verify","append","d1","片段","d8","nameerror","非常","b4","注意","1","c5","论点","none","看到","示例","生成","有用"],"title":"concat函数","title_tokens":["concat","函数"]},{"location":"pandas笔记/7.6.拼接.html#join","text":"将多个DataFrame粘合在一起时，可以选择如何处理其他轴（而不是串联的轴）。这可以通过以下两种方式完成： 把它们全部结合起来 join='outer' 。这是默认选项，这不会丢失信息。 只保留交集 join='inner' 。 默认 join='outer' ： df4 = pd . DataFrame ({ 'B' : [ 'B2' , 'B3' , 'B6' , 'B7' ], 'D' : [ 'D2' , 'D3' , 'D6' , 'D7' ], 'F' : [ 'F2' , 'F3' , 'F6' , 'F7' ]}, index = [ 2 , 3 , 7 , 6 ]) result = pd . concat ([ df1 , df4 ], axis = 1 , sort = True , join = \"outer\" ) 只保留交集 join='inner' ： result = pd . concat ([ df1 , df4 ], axis = 1 , join = 'inner' ) 如果只想用其中一个DataFrame的索引： result = pd . concat ([ df1 , df4 ], axis = 1 ) . reindex ( df1 . index ) 也可以在连接之前建立索引： pd . concat ([ df1 , df4 . reindex ( df1 . index )], axis = 1 ) A B C D B D F 0 A0 B0 C0 D0 NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN 2 A2 B2 C2 D2 B2 D2 F2 3 A3 B3 C3 D3 B3 D3 F3","text_tokens":["轴","一个","时","的","axis","全部","方式","a2","f7","一起","串联","不会","a3","默认","d","dataframe","保留","df4","只","d3","它们","sort","，","信息","d7","pd","2","而","b1","0","join","处理","f2","c3","交集","6","\"","outer","'","f6",")","其中","c0","：","{","）","inner","b0","这是",":","d2","a0","[","reindex","nan","想用","d6","b6","df1","也","其他","如何","7","如果","可以","concat",",","3","通过","不是","a1","f3","只想用","(","]","结合","c2","之前","将","a","建立","b2","把","连接","b7","f","d0","index","=","c1","选项","在","索引","result","。","起来","两种","d1","}","（","1","丢失","粘合","多个","这","选择","c","b","完成","."," ","以下","true","b3"],"title":"处理其他轴的逻辑：join参数","title_tokens":["轴","：","逻辑","其他","参数","join","处理","的"]},{"location":"pandas笔记/7.6.拼接.html#append","text":"concat() 的一个快捷方式是 append() ，这是Series和DataFrame的 append() 实例方法 。这些方法实际上早于 concat 。 append() 方法让Series和DataFrame沿着行（ axis=0 ）拼接在一起： append ( self , other , ignore_index = False , verify_integrity = False , sort = None ) 实际上，不要求两个DataFrame的行索引交集为空，列索引也是这样： result = df1 . append ( df4 , sort = False , ignore_index = True ) append 可以拼接多个对象： result = df1 . append ([ df2 , df3 ]) 与list对象的 append() 方法不同，DataFrame对象的 append() 方法会返回副本， 不会修改 df1 。","text_tokens":["在","一个","实际","快捷方式","索引","列","可以","的","concat","axis","result",")","是",",","。","self","方式","index","verify","false","一起","：","append","与","不会","df3","沿着","为空","other","（","修改","(","要求","和","dataframe","不","df4","df2","这样","]","会","实际上","）","快捷","实例","这是","于","行","早","_","sort","返回","[","不同","多个","对象","，","让","拼接","integrity","两个","none","df1","也",".","副本","方法"," ","0","ignore","list","series","true","这些","=","交集"],"title":"使用append拼接","title_tokens":["append","使用","拼接"]},{"location":"pandas笔记/7.6.拼接.html#ignore_index","text":"如果 DataFrame 的索引没有意义，可以使用 ignore_index 参数： result = pd . concat ([ df1 , df4 ], ignore_index = True , sort = False ) DataFrame.append() 方法也有这个参数： result = df1 . append ( df4 , ignore_index = True , sort = False )","text_tokens":["如果","索引","可以","的","concat","result",")",",","使用","false","：","append","参数","(","dataframe","df4","]","_","这个","sort","[","，","pd","df1",".","也","有","方法"," ","意义","ignore","没有","true","index","="],"title":"忽略串联轴上的索引：ignore_index","title_tokens":["串联","：","忽略","索引","_","ignore","的","轴上","index"]},{"location":"pandas笔记/7.6.拼接.html#seriesdataframe","text":"可以拼接 Series 和 DataFrame 。该 Series 会转化为 DataFrame 的一列，列名是 Series 的 name 。 s1 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], name = 'X' ) result = pd . concat ([ df1 , s1 ], axis = 1 ) 如果 Series 未命名，则将连续编号。 s2 = pd . Series ([ '_0' , '_1' , '_2' , '_3' ]) result = pd . concat ([ df1 , s2 , s2 , s2 ], axis = 1 ) 通过 ignore_index=True 删除原有索引标签。 result = pd . concat ([ df1 , s1 ], axis = 1 , ignore_index = True )","text_tokens":["如果","索引","编号","未命名","删除","可以","一列","命名","的","'","result","concat","是",",",")","。","axis","列名","则","3","通过","连续","(","和","dataframe","]","会","该","1","将","_","x","[","s2","s1","x2","，","拼接","name","原有","pd","x0","df1","为",".","2","标签"," ","0","ignore","x1","series","true","index","=","转化","x3"],"title":"混合串联Series和DataFrame","title_tokens":["串联","混合","series","和","dataframe"]},{"location":"pandas笔记/7.6.拼接.html#key","text":"keys 参数的一个相当普遍的用法是重新指定原DataFrame或Series的名字，可以作为拼接后的DataFrame的列索引： s3 = pd . Series ([ 0 , 1 , 2 , 3 ], name = 'foo' ) s4 = pd . Series ([ 0 , 1 , 2 , 3 ]) s5 = pd . Series ([ 0 , 1 , 4 , 5 ]) pd . concat ([ s3 , s4 , s5 ], axis = 1 ) foo 0 1 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 通过 keys 参数，可以覆盖现有的列名。 pd . concat ([ s3 , s4 , s5 ], axis = 1 , keys = [ 'red' , 'blue' , 'yellow' ]) red blue yellow 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 让我们考虑第一个示例的变体： result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) 还可以将需要拼接的DataFrame以dict形式传递给 concat 函数，在这种情况下，dict键将用作 keys 参数（除非指定了其他键）： pieces = { 'x' : df1 , 'y' : df2 , 'z' : df3 } result = pd . concat ( pieces ) result = pd . concat ( pieces , keys = [ 'z' , 'y' ]) 创建的MultiIndex具有根据传递的键和 DataFrame 片段索引构造的级别： result . index . levels FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) 如果想指定其他级别（偶尔会这样），则可以使用以下 levels 参数： result = pd . concat ( pieces , keys = [ 'x' , 'y' , 'z' ], levels = [[ 'z' , 'y' , 'x' , 'w' ]], names = [ 'group_key' ]) result . index . levels FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]])","text_tokens":["构造","一个","列","现有","4","的","axis","keys","列名","s5","10","用作","原","第一个","dataframe","9","变体","会","_","第一","我们","需要","，","拼接","s3","pd","了","2","覆盖","相当","0","frames","names","除非","blue","6","8","给","foo","'","levels","是",")","形式","使用","以","：","df3","根据","{","red","）","5","yellow","用法",":","传递","[","偶尔","后","指定","multiindex","想","df1","w","普遍","其他","级别","还","7","如果","可以","concat","创建",",","3","通过","重新","参数","(","函数","和","]","df2","将","pieces","具有","让","键","11","s4","index","=","x","z","或","在","group","情况","索引","dict","考虑","result","key","则","y","。","frozenlist","这种","}","名字","（","片段","这样","1","下","作为","name",".","示例"," ","以下","series"],"title":"key参数","title_tokens":["参数","key"]},{"location":"pandas笔记/7.6.拼接.html#dataframe","text":"尽管效率不是很高（因为必须创建一个新的对象），但是可以向 append 传递一个 Series 或dict来将一行附加到 DataFrame ： s2 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], index = [ 'A' , 'B' , 'C' , 'D' ]) result = df1 . append ( s2 , ignore_index = True ) 还可以传递字典或系列的列表： dicts = [{ 'A' : 1 , 'B' : 2 , 'C' : 3 , 'X' : 4 }, { 'A' : 5 , 'B' : 6 , 'C' : 7 , 'Y' : 8 }] result = df1 . append ( dicts , ignore_index = True , sort = False )","text_tokens":["或","6","一个","dict","8","到","4","可以","的","创建","'","效率",")",",","index","result","3","y","但是","false","：","append","不是","来","}","（","(","d","dataframe","dicts","新","]","{","尽管","）","5","_","将",":","1","传递","7","sort","[","s2","对象","a","x2","，","一行","c","列表","b","pd","很","附加","x0",".","df1","2","因为","向"," ","还","ignore","x1","字典","series","true","系列","高","=","必须","x","x3"],"title":"行追加到 DataFrame","title_tokens":["行","到"," ","追加","dataframe"]},{"location":"pandas笔记/7.6.拼接.html#_1","text":"pandas具有全功能、高性能的内存连接操作，与SQL等关系数据库非常相似。这些方法的性能比其他开源实现（如R中的base：：merge.data.frame）要好得多（在某些情况下甚至超过一个数量级）。原因是仔细的算法设计和DataFrame的数据的内部布局。 pandas提供函数 merge() ，作为DataFrame或Series对象之间所有标准数据库拼接操作的入口点： pd . merge ( left , right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = True , suffixes = ( '_x' , '_y' ), copy = True , indicator = False , validate = None ) left ：一个DataFrame或Series的对象。 right ：另一个DataFrame或Series的对象。 on ：一个 label 或者 label list 。它指定用作连接键的列的 label 。并且必须在两个 DataFrame 中这些 label 都存在。如果它为 None ，则默认使用两个 DataFrame 的列 label 的交集。你可以通过 left_on/right_on 分别指定两侧 DataFrame 对齐的连接键。 left_on ：一个 label 或者 label list 。指定左边 DataFrame 用作连接键的列，参考 on 。 right_on ：一个 label 或者 label list 。指定右边 DataFrame 用作连接键的列，参考 on 。 left_index ：一个布尔值。如果为 True ，则使用左边的 DataFrame 的行的 index value 来作为连接键来合并。 right_index ：一个布尔值。如果为 True ，则使用右边的 DataFrame 的行的 index value 来作为连接键来合并。 how ：其一 'left' ， 'right' ， 'outer' ， 'inner' 。默认为 inner 。有关每种方法的详细说明，请参见下文。 sort ：一个布尔值。如果为 True ，则在结果中，对合并采用的连接键进行排序。 suffixes ：一个二元序列。对于结果中同名的列，它会添加前缀来指示它们来自哪个 DataFrame 。 copy ：一个布尔值。如果为 True ，则拷贝基础数据。否则不拷贝数据。 indicator ：一个字符串或者布尔值。 如果为 True ，则结果中多了一列称作 _merge ，该列给出了每一行来自于那个 DataFrame 。 如果为字符串，则结果中多了一列（该列名字由 indicator 字符串给出），该列给出了每一行来自于那个 DataFrame 。 validate ：字符串，默认为无。如果指定，则检查合并是否为指定的类型。 'one_to_one'或'1:1'：检查合并键在左右数据集中是否唯一。 'one_to_many'或'1:m'：检查合并键在左数据集中是否唯一。 'many_to_one'或'm:1'：检查合并键在正确的数据集中是否唯一。 'many_to_many'或'm:m'：允许，但不进行检查。 新功能： 0.23.0版本中添加了指定索引级别的 on 、 left_on 、 right_on 参数的支持。在0.24.0版中添加了合并命名的Series的支持。 merge 是pandas命名空间中的一个函数，它也可以作为DataFrame实例方法 merge() 使用，调用 DataFrame.merge 时， DataFrame 被视为拼接中的左侧对象。 相关 join() 方法在 merge 内部用于索引索引连接（默认情况下）和索引列连接。如果仅加入索引，则可能希望使用 DataFrame.join 来节省一些输入。","text_tokens":["一个","时","你","列","数据","一列","类型","的","one","与","点","label","copy","它会","都","左边","前缀","要","left","用作","m","无","validate","默认","布尔值","算法","被","原因","dataframe","r","实现","0.23","设计","由","其一","采用","_","之间","它们","merge","sort","于","base","对象","，","拼接","说明","数量级","pd","了","为","开源","pandas","分别","有关","相关","用于","0","join","添加","交集","对齐","输入","对于","好得多","outer","性能比","'","是",")","使用","false","量级","：","中","入口","排序","等","来","两侧","每","所有","/","高性能","拷贝","指示","该列","many","唯一","节省","空间","可能","右边","是否","）","操作","inner","字符串","高性","数量","行","how",":","如","指定","两个","value","合并","一些","也","结果","检查","其他","级别","请","左侧","来自","加入","如果","版本","字符","可以","命名","调用",",","称作","甚至","0.24","能比","通过","给出","布尔","布局","参数","否则","标准","左右","函数","(","相似","和","不","to","仔细","功能","数据库","提供","全功能","它","关系数据库","内部","键来","参见","存在","每种","具有","一行","连接","键","二元","仅","哪个","关系","right","并且","集中","frame","index","=","list","必须","x","性能","某些","或","但","在","版中","支持","情况","索引","对","下文","或者","另","则","y","。","序列","内存","据库","同名","名字","基础","正确","data","（","进行","允许","那个","新","、","系数","非常","详细","超过","下","suffixes","1","实例","希望","左","作为","中多","一个二元","none",".","indicator","sql","方法"," ","视为","参考","on","series","true","这些"],"title":"数据库形式的拼接","title_tokens":["据库","数据库","数据","的","拼接","形式"]},{"location":"pandas笔记/7.6.拼接.html#_2","text":"有经验的关系数据库（如SQL）用户将熟悉用于描述两个SQL类表结构（DataFrame对象）之间的连接操作的术语。有几个案例需要考虑，这些案例非常重要： one-to-one 联接：两个DataFrame对象的组合键都是唯一值。 many-to-one 联接：其中一个DataFrame对象的组合键是唯一值，另一个有重复值。 many-to-many 联接：两个DataFrame对象的组合键都有重复值。 注意 在列上连接列时（可能是多对多连接），传递的 DataFrame 对象上的所有索引 都将被丢弃 。 值得花些时间了解多对多连接案例的结果。 在SQL/标准关系代数中，如果键组合在两个表中出现不止一次，则生成的表将具有关联数据的笛卡尔积。 下面是一个非常基本的例子，使用一个组合键，并且组合键的值都是唯一的： left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = 'key' ) 多个组合键的示例（默认 how='inner' ）： left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = [ 'key1' , 'key2' ]) 当左右两边的组合键不一致时，处理行为由 how 参数指定。以下是 how 选项及其SQL等效名称的摘要： 合并方式 SQL连接名称 描述 left LEFT OUTER JOIN 仅保留left出现的组合键 right RIGHT OUTER JOIN 仅保留right出现的组合键 outer FULL OUTER JOIN 保留left和right组合键的并集 inner INNER JOIN 保留left和right组合键的交集 result = pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'inner' , on = [ 'key1' , 'key2' ]) 这是组合键具有重复值的示例： left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 2 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) result = pd . merge ( left , right , on = 'B' , how = 'outer' ) 警告 在重复键上进行拼接，会导致返回的DataFrame的函数是原来两个DataFrame行数的乘积，这可能导致内存溢出。如果DataFrame很大，应该对重复键进行管理。","text_tokens":["例子","k3","一个","时","值得","4","数据","one","的","类表","经验","方式","都","多","a2","left","及其","卡尔","a3","默认","两边","等效","被","导致","d","dataframe","保留","原来","用户","下面","溢出","k0","会","由","d3","警告","之间","当","merge","key2","需要","对象","摘要","积","，","拼接","行为","联接","pd","案例","2","b1","用于","join","处理","c3","熟悉","交集","6","几个","关联","k1","outer","'","不止一次","-","是",")","其中","使用","c0","：","中","基本","many","所有","/","组合键","{","唯一","可能","列上","）","操作","代数","b0","inner","5","结构","花些",":","a0","d2","传递","how","这是","[","一次","如","两个","指定","名称","合并","集","有","结果","重复","如果","不止","上","描述",",","了解","a1","管理","参数","表中","标准","左右","(","函数","to","不","和","笛卡尔","]","key1","数据库","c2","值","出现","将","关系数据库","返回","a","具有","连接","b2","并","键","仅","d0","关系","并且","right","行数","=","c1","键上","一致","选项","在","k2","索引","对","考虑","另","key","result","则","。","内存","据库","组合","d1","}","（","乘积","进行","应该","系数","非常","注意","1","丢弃","列时","多个","这","时间","c","b","表将",".","示例","sql"," ","重要","on","以下","full","很大","术语","生成","这些","b3"],"title":"合并方法简介（关系代数）","title_tokens":["合并","代数","简介","）","方法","关系","（"]},{"location":"pandas笔记/7.6.拼接.html#validate","text":"0.21.0版中的新功能。 可以使用 validate 参数自动检查组合键中是否有意外的重复项。在合并操作之前检查键的唯一性，可以防止内存溢出。检查组合键的唯一性也是确保数据结构符合预期的一种好方法。 在以下示例中，right中的 B 存在重复的值。由于这不是 validate 参数中指定的一对一合并，因此将引发异常。 left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 1 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) try : result = pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_one\" ) except Exception as e : print ( \"MergeError:\" , e ) MergeError : Merge keys are not unique in right dataset ; not a one - to - one merge 如果用户知道右边的重复项， DataFrame 但要确保左边的DataFrame中没有重复项，则可以改用该 validate='one_to_many' 参数，这不会引发异常。 pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_many\" ) A_x B A_y 0 1 1 NaN 1 2 2 4.0 2 2 2 5.0 3 2 2 6.0","text_tokens":["4","知道","数据","0.21","one","的","try","keys","左边","left","要","in","不会","validate","dataframe","用户","溢出","_","符合","merge","，","pd","2","预期","0","没有","as","6","exception","\"","print","outer","e","'","-","是",")","使用","中","dataset","防止","唯一性","many","组合键","{","唯一","右边","是否","操作","该","5","结构",":","how","6.0",";","[","nan","指定","合并","也","有","检查","一种","重复","unique","如果","好","可以",",","3","改用","are","不是","mergeerror","参数","(","to","]","功能","一对一","一对","数据结构","值","之前","将","引发","4.0","存在","a","键","right","=","版中","但","x","因此","在","result","则","y","。","内存","组合","自动","}","新","意外","由于","1","5.0","这","确保","b","not",".","示例","方法","异常"," ","以下","on","项","except"],"title":"检查重复键：validate","title_tokens":["：","键","检查","validate","重复"]},{"location":"pandas笔记/7.6.拼接.html#indicator","text":"merge() 接受指示符参数 indicator 。如果 indicator=True ，则将一个名为 _merge ，dtype为Categorical的列添加到输出DataFrame的末尾： indicator _merge 值 仅出现在 'left' 组合键 left_only 仅出现在 'right' 组合键 right_only 同时出现在 'left' 和 'right' 组合键 both df1 = pd . DataFrame ({ 'col1' : [ 0 , 1 ], 'col_left' : [ 'a' , 'b' ]}) df2 = pd . DataFrame ({ 'col1' : [ 1 , 2 , 2 ], 'col_right' : [ 2 , 2 , 2 ]}) pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = True ) col1 col_left col_right _merge 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only indicator 参数还可以接受字符串参数，在这种情况下，指标函数将使用传递的字符串的值作为 指标列 的名称。 pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = 'indicator_column' ) col1 col_left col_right indicator_column 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only","text_tokens":["一个","列","col1","的","only","left","同时","dataframe","_","merge","，","pd","为","2","0","添加","末尾","到","outer","'",")","接受","使用","：","column","指示","组合键","{","字符串",":","how","传递","[","nan","2.0","名称","df1","还","both","如果","字符","dtype","可以",",","3","输出","参数","(","函数","和","]","df2","符","值","出现","将","a","仅","right","=","名为","在","情况","categorical","指标","则","。","这种","组合","}","1","下","col","作为","b",".","indicator"," ","on","true"],"title":"指示符：indicator","title_tokens":["indicator","：","指示","符"]},{"location":"pandas笔记/7.6.拼接.html#_3","text":"合并将保留组合键的数据类型 left = pd . DataFrame ({ 'key' : [ 1 ], 'v1' : [ 10 ]}) print ( left , \" \\n \" ) right = pd . DataFrame ({ 'key' : [ 1 , 2 ], 'v1' : [ 20 , 30 ]}) print ( right ) key v1 0 1 10 key v1 0 1 20 1 2 30 我们可以保留组合键： print ( pd . merge ( left , right , how = 'outer' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' ) . dtypes ) key v1 0 1 10 1 1 20 2 2 30 key int64 v1 int64 dtype : object 如果缺少引入的值，则生成的dtype将被转换： print ( pd . merge ( left , right , how = 'outer' , on = 'key' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' , on = 'key' ) . dtypes ) key v1_x v1_y 0 1 10 . 0 20 1 2 NaN 30 key int64 v1_x float64 v1_y int64 dtype : object 合并将保留mergands的category类型。另请参阅关于 categoricals 的部分。 left： from pandas.api.types import CategoricalDtype X = pd . Series ( np . random . choice ([ 'foo' , 'bar' ], size = ( 10 ,))) X = X . astype ( CategoricalDtype ( categories = [ 'foo' , 'bar' ])) left = pd . DataFrame ({ 'X' : X , 'Y' : np . random . choice ([ 'one' , 'two' , 'three' ], size = ( 10 ,))}) print ( left , \" \\n \" ) print ( left . dtypes ) X Y 0 foo three 1 foo two 2 bar three 3 bar three 4 bar two 5 foo two 6 bar two 7 bar one 8 bar two 9 bar two X category Y object dtype : object right： right = pd . DataFrame ({ 'X' : pd . Series ([ 'foo' , 'bar' ], dtype = CategoricalDtype ([ 'foo' , 'bar' ])), 'Z' : [ 1 , 2 ]}) print ( right , \" \\n \" ) print ( right . dtypes ) X Z 0 foo 1 1 bar 2 X category Z int64 dtype : object 合并结果： result = pd . merge ( left , right , how = 'outer' ) print ( result , \" \\n \" ) print ( result . dtypes ) X Y Z 0 foo three 1 1 foo two 1 2 foo two 1 3 bar three 2 4 bar three 2 5 bar two 2 6 bar two 2 7 bar one 2 8 bar two 2 9 bar two 2 X category Y object Z int64 dtype : object 注意 category 类型必须 完全相同 ，这意味着category对象有相同的类别和有序属性。否则，category类型将被转换成object类型。 注意 与object数据类型合并相比，在相同的category数据类型上进行合并可以获得更好的性能。","text_tokens":["n","int64","4","数据","类型","的","one","与","categoricals","bar","相同","three","请参阅","10","left","\\","v1","被","dataframe","保留","9","_","two","merge","我们","转换","对象","mergands","，","dtypes","换成","pd","2","pandas","categoricaldtype","关于","0","6","转换成","\"","引入","from","8","print","outer","float64","foo","'",")","20","完全","：","更好","组合键","{","完全相同","5",":","how","[","types","categories","nan","合并","有","结果","类别","object","7","如果","dtype","可以","上",",","3","choice","否则","(","和","]","值","将","获得","数据类型","random","缺少","size","有序","category","import","right","部分","=","必须","x","性能","api","z","在","意味","30","另","key","result","则","y","。","相比","组合","}","进行","属性","注意","意味着","1","astype","这",".","np"," ","on","生成","参阅","series"],"title":"合并时数据类型的转换","title_tokens":["合并","时","数据","类型","数据类型","的","转换"]},{"location":"pandas笔记/7.6.拼接.html#dataframejoin","text":"这是一个非常基本的示例： left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) result = left . join ( right ) result = left . join ( right , how = 'outer' ) 与上述相同，但带有 how='inner' ： result = left . join ( right , how = 'inner' ) 此处的数据对齐在索引（行标签）上。使用 merge 指示其使用索引的附加参数可以实现相同的行为： result = pd . merge ( left , right , left_index = True , right_index = True , how = 'outer' ) result = pd . merge ( left , right , left_index = True , right_index = True , how = 'inner' )","text_tokens":["k3","一个","数据","的","与","相同","a2","left","d","dataframe","实现","k0","d3","_","merge","，","行为","pd","附加","标签","b1","join","c3","对齐","k1","outer","'",")","c0","使用","基本","：","指示","{","inner","b0","）","行","这是",":","a0","d2","how","[","此处","可以","其","上",",","a1","参数","(","]","c2","上述","a","b2","d0","带有","right","index","=","但","在","k2","索引","result","。","}","（","非常","c","b",".","示例"," ","true"],"title":"DataFrame.join()","title_tokens":["dataframe",".","join","(",")"]},{"location":"pandas笔记/7.6.拼接.html#join_1","text":"join() 接受一个可选的 on 参数，该参数可以是一个列或多个列名，它指定传递的DataFrame将在原DataFrame中的该列上对齐。即这两个函数调用完全等价： left . join ( right , on = key_or_keys ) pd . merge ( left , right , left_on = key_or_keys , right_index = True , how = 'left' , sort = False ) 显然，您可以选择任何一种更方便的形式。对于many-to-one拼接（其中一个DataFrame的索引是组合键），使用 join 可能会更方便。这是一个简单的示例： left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' ], 'D' : [ 'D0' , 'D1' ]}, index = [ 'K0' , 'K1' ]) result = left . join ( right , on = 'key' ) result = pd . merge ( left , right , left_on = 'key' , right_index = True , how = 'left' , sort = False ); 如果组合键有多个，传递的DataFrame必须具有 MultiIndex ： left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) index = pd . MultiIndex . from_tuples ([( 'K0' , 'K0' ), ( 'K1' , 'K0' ), ( 'K2' , 'K0' ), ( 'K2' , 'K1' )]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) 现在，可以通过传递两个组合键来进行拼接： result = left . join ( right , on = [ 'key1' , 'key2' ]) 默认的 DataFrame.join 是执行左联接（对于Excel用户，本质上是“ VLOOKUP”操作），该联接仅使用在调用DataFrame中找到的键。其他联接类型（例如内部联接）也可以轻松执行： result = left . join ( right , on = [ 'key1' , 'key2' ], how = 'inner' ) 如您所见，这将删除所有不匹配的行。","text_tokens":["一个","列","one","的","类型","更","列名","keys","a2","left","所见","原","a3","默认","”","即","dataframe","d","用户","会","k0","可选","d3","_","merge","sort","key2","，","拼接","本质","联接","pd","b1","执行","例如","join","c3","对齐","现在","对于","from","匹配","k1","'","“","-","是",")","接受","其中","完全","形式","使用","c0","false","：","中","来","many","所有","组合键","{","可能","列上","）","b0","该","操作","inner","行","这是","how",":","传递","a0","d2",";","[","如","函数调用","指定","两个","multiindex","也","有","其他","一种","显然","or","等价","简单","如果","删除","可以","任何","调用","上",",","a1","通过","参数","(","函数","to","不","]","key1","vlookup","c2","将","它","内部","a","具有","b2","键","tuples","方便","仅","d0","right","index","=","必须","c1","或","在","k2","索引","您","key","result","。","组合","d1","}","（","进行","excel","找到","左","多个","轻松","这","选择","c","b",".","示例"," ","on","true","b3"],"title":"按组合键列和索引拼接：join","title_tokens":["：","组合","列","索引","join","按","组合键","和","拼接"]},{"location":"pandas笔记/7.6.拼接.html#join_2","text":"可以将单层索引DataFrame与多层索引DataFrame的 一个级别 连接起来。该级别将与单索引DataFrame的索引名称和多索引DataFrame的级别名称相匹配 left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = pd . Index ([ 'K0' , 'K1' , 'K2' ], name = 'key' )) index = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) result = left . join ( right , how = 'inner' ) 下面的函数和上面的方法是等效的，但 pd.merge 的信息更详细，存储效率更高/更快。 result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'Y' ])","text_tokens":["接起","一个","的","与","更","多","a2","left","等效","单","d","dataframe","下面","k0","d3","_","merge","，","信息","快","pd","b1","join","names","c3","from","匹配","k1","'","set",")","是","连接起来","c0","/","{","相匹配","inner","b0","该","reset","上面",":","a0","d2","how","单层","[","y1","名称","multiindex","y0","级别","存储","多层","可以","效率",",","y2","a1","(","函数","和","]","更高","c2","将","a","y3","连接","b2","tuples","d0","right","index","=","但","c1","k2","索引","key","result","y","。","起来","d1","}","详细","c","name","b",".","方法"," ","on"],"title":"按单层索引和多层索引拼接：join","title_tokens":["：","索引","单层","按","join","拼接","和","多层"]},{"location":"pandas笔记/7.6.拼接.html#multiindexesjoin","text":"只要在连接中完全使用了右参数的索引，并且该参数是左参数中索引的子集，就可以用有限的方式来支持它，如下例所示： leftindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' ), [ 1 , 2 ]], names = [ 'abc' , 'xy' , 'num' ]) left = pd . DataFrame ({ 'v1' : range ( 12 )}, index = leftindex ) print ( left , \" \\n \" ) rightindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' )], names = [ 'abc' , 'xy' ]) right = pd . DataFrame ({ 'v2' : [ 100 * i for i in range ( 1 , 7 )]}, index = rightindex ) print ( right , \" \\n \" ) left . join ( right , on = [ 'abc' , 'xy' ], how = 'inner' ) v1 abc xy num a x 1 0 2 1 y 1 2 2 3 b x 1 4 2 5 y 1 6 2 7 c x 1 8 2 9 y 1 10 2 11 v2 abc xy a x 100 y 200 b x 300 y 400 c x 500 y 600 v1 v2 abc xy num a x 1 0 100 2 1 100 y 1 2 200 2 3 200 b x 1 4 300 2 5 300 y 1 6 400 2 7 400 c x 1 8 500 2 9 500 y 1 10 600 2 11 600 如果不满足该条件，则可以使用以下代码完成具有两个多索引的联接。 leftindex = pd . MultiIndex . from_tuples ([( 'K0' , 'X0' ), ( 'K0' , 'X1' ), ( 'K1' , 'X2' )], names = [ 'key' , 'X' ]) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = leftindex ) rightindex = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = rightindex ) result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'X' , 'Y' ])","text_tokens":["右","n","4","的","xy","方式","多","a2","10","left","in","\\","代码","500","v1","d","dataframe","9","k0","d3","_","merge","用","，","子集","range","联接","pd","了","2","b1","0","join","names","c3","rightindex","6","\"","满足","from","8","print","v2","k1","'","set","是",")","完全","使用","c0","：","中","来","{","只要","600","inner","200","该","5","b0","reset",":","how","a0","d2","所示","[","y1","100","两个","multiindex","y0","i","7","例","12","如果","可以","for",",","3","y2","a1","参数","(","不","]","c2","leftindex","它","400","如下","a","具有","x2","y3","300","连接","b2","x0","tuples","d0","并且","right","11","x1","num","index","=","list","x","c1","在","支持","k2","索引","就","key","result","则","y","。","d1","}","有限","product","abc","条件","1","左","c","b","完成","."," ","以下","on","*"],"title":"按MultiIndexes拼接：join","title_tokens":["：","join","按","multiindexes","拼接"]},{"location":"pandas笔记/7.6.拼接.html#_4","text":"0.23版中的新功能。 on 、 left_on 和 right_on 参数可以引用列名或索引级名称。这允许在索引和列的组合上合并DataFrame实例，而不必重置索引： left_index = pd . Index ([ 'K0' , 'K0' , 'K1' , 'K2' ], name = 'key1' ) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}, index = left_index ) right_index = pd . Index ([ 'K0' , 'K1' , 'K2' , 'K2' ], name = 'key1' ) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K1' ]}, index = right_index ) result = left . merge ( right , on = [ 'key1' , 'key2' ])","text_tokens":["或","在","引用","k2","不必","索引","列","k1","可以","的","'","result","上",")",",","。","c0","列名","a2","=","left","：","组合","a1","d1","}","a3","参数","级","(","允许","和","dataframe","{","新","]","key1","d","、","k0","功能","0.23","b0","c2","d3","_","实例",":","a0","key2","d2","merge","[","重置","a","这","，","c","name","b","名称","合并","pd","b2",".","而","b1"," ","on","d0","right","c3","index","版中","c1","b3"],"title":"按照列和索引合并","title_tokens":["合并","索引","列","按照","和"]},{"location":"pandas笔记/7.6.拼接.html#_5","text":"merge 函数的 suffixes 参数接受字符串列表的元组，以附加到输入DataFrame中重叠的列名以消除结果列的歧义： left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K2' ], 'v' : [ 1 , 2 , 3 ]}) right = pd . DataFrame ({ 'k' : [ 'K0' , 'K0' , 'K3' ], 'v' : [ 4 , 5 , 6 ]}) result = pd . merge ( left , right , on = 'k' ) result = pd . merge ( left , right , on = 'k' , suffixes = [ '_l' , '_r' ]) DataFrame.join() 具有 lsuffix 和 rsuffix 行为类似的参数。 left = left . set_index ( 'k' ) right = right . set_index ( 'k' ) result = left . join ( right , lsuffix = '_l' , rsuffix = '_r' )","text_tokens":["6","k3","类似","元组","k2","列","字符","到","4","k1","rsuffix","的","'","result","set",")","接受",",","3","。","列名","歧义","以","left","：","中","}","参数","k","函数","(","{","dataframe","和","]","r","lsuffix","k0","字符串","5","suffixes",":","1","merge","_","[","具有","，","列表","行为","pd","附加",".","2","结果"," ","重叠","v","on","join","right","index","=","l","输入","消除"],"title":"值列重叠","title_tokens":["值列","重叠"]},{"location":"pandas笔记/7.6.拼接.html#dataframes","text":"DataFrames 也可以传递的列表或元组以 join() 将它们连接到它们的索引上。 right2 = pd . DataFrame ({ 'v' : [ 7 , 8 , 9 ]}, index = [ 'K1' , 'K1' , 'K2' ]) result = left . join ([ right , right2 ])","text_tokens":["或","元组","k2","索引","8","到","k1","可以","的","'","dataframes","上",")",",","result","。","以","left","}","(","{","dataframe","9","]","right2","将","它们",":","传递","7","[","列表","连接","pd","也","."," ","join","v","right","index","="],"title":"拼接多个DataFrames","title_tokens":["拼接","多个","dataframes"]},{"location":"pandas笔记/7.6.拼接.html#_6","text":"另一个相当常见的情况是有两个索引存在交集的对象，其中一个存在缺失值，想通过另一个对象填补缺失值。这是一个例子： df1 = pd . DataFrame ([[ np . nan , 3. , 5. ], [ - 4.6 , np . nan , np . nan ], [ np . nan , 7. , np . nan ]]) df2 = pd . DataFrame ([[ - 42.6 , np . nan , - 8.2 ], [ - 5. , 1.6 , 4 ]], index = [ 1 , 2 ]) combine_first() 方法可以达到这个效果： result = df1 . combine_first ( df2 ) 请注意， combine_first 返回副本，而 update() 则会修改原对象： df1 . update ( df2 )","text_tokens":["例子","first","一个","情况","索引","4","combine","可以","8.2","的","另","-","result","是",",","3","其中","。",")","则","：","通过","原","update","修改","(","dataframe","]","df2","1.6","4.6","会","5","注意","值","1","这是","7","_","这个","返回","[","存在","对象","常见","，","nan","缺失","两个","填补","想","df1","pd",".","2","副本","有","np","相当"," ","方法","达到","效果","而","请","42.6","index","=","交集"],"title":"按索引填补缺失值","title_tokens":["值","索引","按","填补","缺失"]},{"location":"pandas笔记/7.6.拼接.html#_7","text":"","text_tokens":[],"title":"合并时间序列","title_tokens":["合并","时间","序列"]},{"location":"pandas笔记/7.6.拼接.html#_8","text":"merge_ordered() 函数允许组合时间序列和其他有序数据。 merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ( \"_x\" , \"_y\" ), how = \"outer\" , ) left_by : Group left DataFrame by group columns and merge piece by piece with right DataFrame left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'lv' : [ 1 , 2 , 3 , 4 ], 's' : [ 'a' , 'b' , 'c' , 'd' ]}) right = pd . DataFrame ({ 'k' : [ 'K1' , 'K2' , 'K4' ], 'rv' : [ 1 , 2 , 3 ]}) print ( left , \" \\n \" ) print ( right ) pd . merge_ordered ( left , right , fill_method = None , left_by = 's' ) k lv s 0 K0 1 a 1 K1 2 b 2 K1 3 c 3 K2 4 d k rv 0 K1 1 1 K2 2 2 K4 3 k lv s rv 0 K0 1.0 a NaN 1 K1 NaN a 1.0 2 K2 NaN a 2.0 3 K4 NaN a 3.0 4 K1 2.0 b 1.0 5 K2 NaN b 2.0 6 K4 NaN b 3.0 7 K1 3.0 c 1.0 8 K2 NaN c 2.0 9 K4 NaN c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 NaN d 3.0 它具有一个可选 fill_method 关键字来填充丢失的数据： # 前向填充：后面的缺失值用前面的数字填充 pd . merge_ordered ( left , right , fill_method = \"ffill\" , left_by = 's' ) k lv s rv 0 K0 1.0 a NaN 1 K1 1.0 a 1.0 2 K2 1.0 a 2.0 3 K4 1.0 a 3.0 4 K1 2.0 b 1.0 5 K2 2.0 b 2.0 6 K4 2.0 b 3.0 7 K1 3.0 c 1.0 8 K2 3.0 c 2.0 9 K4 3.0 c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 4.0 d 3.0","text_tokens":["一个","n","4","数据","的","10","left","\\","d","dataframe","9","k0","_","merge","with","pd","2","0","6","\"","8","print","k1","outer","'","前面",")","：","来","关键字","{","5","关键","填充",":","how","[","nan","2.0","缺失","选","其他","7","12","by","method",",","3","值用","可","k4","(","函数","和","]","columns","4.0","它","piece","a","具有","s","前向","fill","ordered","有序","right","11","=","x","k2","group","and","后面","y","。","序列","数字","ffill","组合","}","k","允许","lv","1.0","suffixes","1","丢失","rv","#","时间","c","none","b","."," ","on","3.0"],"title":"合并有序数据","title_tokens":["合并","有序","数据"]},{"location":"pandas笔记/7.6.拼接.html#asof","text":"merge_asof() 类似于有序左联接，只是我们匹配最近的键而不是相等的键。对于左数据框中的每一行，我们选择右数据框中的最后一行，该行的on键小于lefs键。两个数据帧都必须按键排序。 可选地，asof合并可以执行逐组合并。除了on键上最接近的匹配之外，它与by键的匹配相同 merge_asof ( left , right , on = None , left_on = None , right_on = None , left_index = False , right_index = False , by = None , left_by = None , right_by = None , suffixes = ( \"_x\" , \"_y\" ), tolerance = None , allow_exact_matches = True , direction = \"backward\" , ) 例如，我们可能有 trades 和 quotes ，我们想合并它们 trades = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.038' , '20160525 13:30:00.048' , '20160525 13:30:00.048' , '20160525 13:30:00.048' ]), 'ticker' : [ 'MSFT' , 'MSFT' , 'GOOG' , 'GOOG' , 'AAPL' ], 'price' : [ 51.95 , 51.95 , 720.77 , 720.92 , 98.00 ], 'quantity' : [ 75 , 155 , 100 , 100 , 100 ]}, columns = [ 'time' , 'ticker' , 'price' , 'quantity' ]) quotes = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.023' , '20160525 13:30:00.030' , '20160525 13:30:00.041' , '20160525 13:30:00.048' , '20160525 13:30:00.049' , '20160525 13:30:00.072' , '20160525 13:30:00.075' ]), 'ticker' : [ 'GOOG' , 'MSFT' , 'MSFT' , 'MSFT' , 'GOOG' , 'AAPL' , 'GOOG' , 'MSFT' ], 'bid' : [ 720.50 , 51.95 , 51.97 , 51.99 , 720.50 , 97.99 , 720.50 , 52.01 ], 'ask' : [ 720.93 , 51.96 , 51.98 , 52.00 , 720.93 , 98.01 , 720.88 , 52.03 ]}, columns = [ 'time' , 'ticker' , 'bid' , 'ask' ]) print ( trades , \" \\n \" ) print ( quotes ) time ticker price quantity 0 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 75 1 2016 - 05 - 25 13 : 30 : 00 . 038 MSFT 51 . 95 155 2 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 77 100 3 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 92 100 4 2016 - 05 - 25 13 : 30 : 00 . 048 AAPL 98 . 00 100 time ticker bid ask 0 2016 - 05 - 25 13 : 30 : 00 . 023 GOOG 720 . 50 720 . 93 1 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 51 . 96 2 2016 - 05 - 25 13 : 30 : 00 . 030 MSFT 51 . 97 51 . 98 3 2016 - 05 - 25 13 : 30 : 00 . 041 MSFT 51 . 99 52 . 00 4 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 50 720 . 93 5 2016 - 05 - 25 13 : 30 : 00 . 049 AAPL 97 . 99 98 . 01 6 2016 - 05 - 25 13 : 30 : 00 . 072 GOOG 720 . 50 720 . 88 7 2016 - 05 - 25 13 : 30 : 00 . 075 MSFT 52 . 01 52 . 03 默认情况下，我们采用的是quotes。 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN 我们只在quote 时间和trade 时间之间的2毫秒内合并： pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '2ms' )) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 NaN NaN 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN 我们只在quote 时间和trade 时间之间的10毫秒内合并，并且不包括精确匹配。注意，尽管我们排除了（quotes的）完全匹配项，但以前的quotes确实会传播到那个时间点。 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '10ms' ), allow_exact_matches = False ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 NaN NaN 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 NaN NaN 3 2016-05-25 13:30:00.048 GOOG 720.92 100 NaN NaN 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN","text_tokens":["右","ask","matches","75","bid","n","direction","51","4","数据","00.048","00.072","的","与","点","相同","都","95","left","10","98.00","93","13","05","\\","075","默认","720.50","精确","dataframe","92","049","88","会","00.023","排除","只","毫秒","可选","采用","_","之间","于","merge","它们","我们","之外","51.96","trades","，","联接","backward","pd","041","了","2","而","执行","00.038","720.92","例如","03","0","2ms","720.77","tolerance","6","对于","接近","\"","除了","匹配","到","print","51.97","50","'","asof","-",")","是","完全","52.00","99","false","：","框中","排序","每","该行","{","小于","可能","）","最","5",":","[","720.93","98.01","00.075","goog","100","00.030","nan","allow","两个","合并","想","lefs","有","720.88","传播","97","00","7","按键","01","最近","20160525","2016","可以","038","by","quantity","上",",","3","51.95","52","072","023","不是","exact","(","51.99","和","to","quote","]","不","columns","它","trade","quotes","048","一行","并","键","timedelta","有序","right","并且","10ms","index","=","必须","帧","x","最后","97.99","包括","但","在","类似","00.049","datetime","情况","51.98","77","30","内","y","。","00.041","组合","aapl","msft","}","52.03","030","（","那个","52.01","尽管","注意","suffixes","1","下","左","可选地","155","以前","选择","时间","逐","time","price","none",".","ticker","只是"," ","on","确实","25","相等","true","项","98","720","96"],"title":"合并ASOF","title_tokens":["合并","asof"]},{"location":"pandas笔记/7.7.变换索引.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) from tools import Help as H import numpy as np import pandas as pd 重塑和数据透视表 pivot DataFrame.pivot() 方法重排数据。它是一个快捷方式，它使用 set_index 将列数据变成行索引，然后使用 unstack 将行索引转为列索引。 DataFrame . pivot ( index = None , columns = None , values = None ) index ：一个字符串。指定了一个 column name ，用该列数据来 set_index （将该列数据变成行索引，删除了原来的旧的行索引）。如果为 None ，则不执行 set_index columns ：一个字符串，指定了哪个列数据作为结果的 columns labels 。 实际上对 index,clumns 指定的列数据均 set_index，然后仅对 columns 对应的列数据 unstack values ：一个字符串，指定了哪个列数据作为结果的数据。如果未提供，则剩余的所有列都将作为结果的数据。 创建示例DataFrame： import pandas.util.testing as tm tm . N = 3 def unpivot ( frame ): N , K = frame . shape data = { 'value' : frame . to_numpy () . ravel ( 'F' ), 'variable' : np . asarray ( frame . columns ) . repeat ( N ), 'date' : np . tile ( np . asarray ( frame . index ), K )} return pd . DataFrame ( data , columns = [ 'date' , 'variable' , 'value' ]) df = unpivot ( tm . makeTimeDataFrame ()) df date variable value 0 2000-01-03 A -0.794700 1 2000-01-04 A 0.080430 2 2000-01-05 A -0.573297 3 2000-01-03 B 0.739518 4 2000-01-04 B 0.967577 5 2000-01-05 B 1.744425 6 2000-01-03 C 0.656323 7 2000-01-04 C 0.691297 8 2000-01-05 C 0.377455 9 2000-01-03 D 0.488279 10 2000-01-04 D 0.016629 11 2000-01-05 D 0.516103 要选择所有 variable=A 的值，可以这样做： df [ df [ 'variable' ] == 'A' ] date variable value 0 2000-01-03 A -0.794700 1 2000-01-04 A 0.080430 2 2000-01-05 A -0.573297 但是假设我们希望对变量进行时间序列运算，更好的表示方法是列是唯一的变量，行索引作为日期。为了将数据重塑为这种形式，我们使用 DataFrame.pivot() 方法（也实现为顶级函数 pivot() ）： df . pivot ( index = 'date' , columns = 'variable' , values = 'value' ) variable A B C D date 2000-01-03 -0.794700 0.739518 0.656323 0.488279 2000-01-04 0.080430 0.967577 0.691297 0.016629 2000-01-05 -0.573297 1.744425 0.377455 0.516103 如果省略 values 参数，并且输入 DataFrame 具有多于一列的值，则结果DataFrame将具有多层次列索引： df [ 'value2' ] = df [ 'value' ] * 2 print ( df ) pivoted = df . pivot ( index = 'date' , columns = 'variable' ) pivoted date variable value value2 0 2000-01-03 A -0.794700 -1.589400 1 2000-01-04 A 0.080430 0.160860 2 2000-01-05 A -0.573297 -1.146593 3 2000-01-03 B 0.739518 1.479037 4 2000-01-04 B 0.967577 1.935153 5 2000-01-05 B 1.744425 3.488850 6 2000-01-03 C 0.656323 1.312645 7 2000-01-04 C 0.691297 1.382595 8 2000-01-05 C 0.377455 0.754910 9 2000-01-03 D 0.488279 0.976557 10 2000-01-04 D 0.016629 0.033257 11 2000-01-05 D 0.516103 1.032207 value value2 variable A B C D A B C D date 2000-01-03 -0.794700 0.739518 0.656323 0.488279 -1.589400 1.479037 1.312645 0.976557 2000-01-04 0.080430 0.967577 0.691297 0.016629 0.160860 1.935153 1.382595 0.033257 2000-01-05 -0.573297 1.744425 0.377455 0.516103 -1.146593 3.488850 0.754910 1.032207 注意 如果索引包含重复项， pivot() 将出错，无法重塑。在这种情况下，请考虑使用 pivot_table() ，它是pivot的泛化，可以处理一个索引/列对的重复值。 stack DataFrame.stack() 方法将数据的列索引旋转为行索引。 注意：它跟转置不同，转置会同时旋转数据。 DataFrame.stack(level=-1, dropna=True) level ：一个整数、字符串或者整数字符串的列表。如果列索引为多级索引，它指定了将哪个级别的索引旋转为行索引 dropna ：一个布尔值。如果为 True ，则如果结果中某行全为 NaN ，则抛弃该行 旋转时，列索引旋转为行索引，新的行索引是多级索引，最内层的行索引就是原来的列索引。 最清晰的解释方式是通过示例。先创建一个示例数据： tuples = list ( zip ( * [[ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ 'A' , 'B' ]) df2 = df [: 4 ] df2 A B first second bar one -0.057986 0.355058 two 0.575360 1.254999 baz one 0.105935 -0.669381 two -0.273632 2.168700 stacked = df2 . stack () stacked first second bar one A -0.057986 B 0.355058 two A 0.575360 B 1.254999 baz one A 0.105935 B -0.669381 two A -0.273632 B 2.168700 dtype: float64 unstack 与 DataFrame.stack() 对应的就是 DataFrame.unstack() 方法。 它将数据的行索引转换为列索引。 注意：它跟转置不同，转置会同时旋转数据。 DataFrame.unstack(level=-1, fill_value=None) level ：一个整数、字符串或者整数字符串的列表。如果行索引为多级索引，它指定了将哪个级别的索引旋转为列索引 fill_value ：一个标量。如果结果中有 NaN ，则使用 fill_value 替换。 unstack 默认情况下将最后一级行索引转换成列索引： print ( stacked ) first second bar one A -0.057986 B 0.355058 two A 0.575360 B 1.254999 baz one A 0.105935 B -0.669381 two A -0.273632 B 2.168700 dtype: float64 stacked . unstack () A B first second bar one -0.057986 0.355058 two 0.575360 1.254999 baz one 0.105935 -0.669381 two -0.273632 2.168700 stacked . unstack ( 1 ) second one two first bar A -0.057986 0.575360 B 0.355058 1.254999 baz A 0.105935 -0.273632 B -0.669381 2.168700 stacked . unstack ( 0 ) first bar baz second one A -0.057986 0.105935 B 0.355058 -0.669381 two A 0.575360 -0.273632 B 1.254999 2.168700 如果索引具有名称，则可以使用级别名称而不是指定级别编号： stacked . unstack ( 'second' ) second one two first bar A -0.057986 0.575360 B 0.355058 1.254999 baz A 0.105935 -0.273632 B -0.669381 2.168700 注意， stack 和 unstack 方法会隐式地对索引进行排序： index = pd . MultiIndex . from_product ([[ 2 , 1 ], [ 'a' , 'b' ]]) df = pd . DataFrame ( np . random . randn ( 4 ), index = index , columns = [ 'A' ]) print ( df , \" \\n \" ) print ( df . unstack () . stack ()) all ( df . unstack () . stack () == df . sort_index ()) A 2 a - 0 . 775482 b - 0 . 358023 1 a 0 . 150078 b - 1 . 990797 A 1 a 0 . 150078 b - 1 . 990797 2 a - 0 . 775482 b - 0 . 358023 True 多级别索引 还可以通过传递一个索引名字列表来一次堆栈或取消堆栈多个级别的索引，在这种情况下，最终结果就好像列表中的每个级别的索引都是单独处理的： columns = pd . MultiIndex . from_tuples ([ ( 'A' , 'cat' , 'long' ), ( 'B' , 'cat' , 'long' ), ( 'A' , 'dog' , 'short' ), ( 'B' , 'dog' , 'short' )], names = [ 'exp' , 'animal' , 'hair_length' ]) df = pd . DataFrame ( np . random . randn ( 4 , 4 ), columns = columns ) print ( df ) df . stack ( level = [ 'animal' , 'hair_length' ]) exp A B A B animal cat cat dog dog hair_length long long short short 0 -0.590259 0.643611 -0.253519 -0.723468 1 0.316200 1.340781 1.300858 0.531254 2 -0.666685 1.021562 0.119488 1.266647 3 0.161535 -1.919107 -1.652191 -0.134814 exp A B animal hair_length 0 cat long -0.590259 0.643611 dog short -0.253519 -0.723468 1 cat long 0.316200 1.340781 dog short 1.300858 0.531254 2 cat long -0.666685 1.021562 dog short 0.119488 1.266647 3 cat long 0.161535 -1.919107 dog short -1.652191 -0.134814 索引列表可以包含索引名称或索引级别的编号（但不能同时包含两者）： # df.stack(level=['animal', 'hair_length']) # from above is equivalent to: df . stack ( level = [ 1 , 2 ]) exp A B animal hair_length 0 cat long -0.590259 0.643611 dog short -0.253519 -0.723468 1 cat long 0.316200 1.340781 dog short 1.300858 0.531254 2 cat long -0.666685 1.021562 dog short 0.119488 1.266647 3 cat long 0.161535 -1.919107 dog short -1.652191 -0.134814 缺失数据 这些函数对于处理丢失的数据非常智能，并且不希望层次索引中的每个子组都具有相同的标签集。它们还可以处理未排序的索引（当然，您可以通过调用sort_index对其进行排序）。下面是一个更复杂的例子： columns = pd . MultiIndex . from_tuples ([( 'A' , 'cat' ), ( 'B' , 'dog' ), ( 'B' , 'cat' ), ( 'A' , 'dog' )], names = [ 'exp' , 'animal' ]) index = pd . MultiIndex . from_product ([( 'bar' , 'baz' , 'foo' , 'qux' ), ( 'one' , 'two' )], names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = index , columns = columns ) df2 = df . iloc [[ 0 , 1 , 2 , 4 , 5 , 7 ]] print ( df2 ) exp A B A animal cat dog cat dog first second bar one -0.170026 -0.849601 -0.731394 0.221731 two 1.343975 2.249542 0.092470 0.565612 baz one -0.783770 0.689877 0.406778 -1.099836 foo one 1.291947 -1.701371 0.101385 0.200045 two 3.026423 -0.763562 -0.189664 0.091951 qux two -0.621108 -1.022019 -1.033913 0.404069 如上所述， stack 可以使用 level 参数来调用以选择要堆叠的列中的级别： df2 . stack ( 'exp' ) animal cat dog first second exp bar one A -0.170026 0.221731 B -0.731394 -0.849601 two A 1.343975 0.565612 B 0.092470 2.249542 baz one A -0.783770 -1.099836 B 0.406778 0.689877 foo one A 1.291947 0.200045 B 0.101385 -1.701371 two A 3.026423 0.091951 B -0.189664 -0.763562 qux two A -0.621108 0.404069 B -1.033913 -1.022019 df2 . stack ( 'animal' ) exp A B first second animal bar one cat -0.170026 -0.731394 dog 0.221731 -0.849601 two cat 1.343975 0.092470 dog 0.565612 2.249542 baz one cat -0.783770 0.406778 dog -1.099836 0.689877 foo one cat 1.291947 0.101385 dog 0.200045 -1.701371 two cat 3.026423 -0.189664 dog 0.091951 -0.763562 qux two cat -0.621108 -1.033913 dog 0.404069 -1.022019 如果子组没有相同的标签集，则取消堆叠可能会导致缺少值。默认情况下，缺少的值将替换为该数据类型的默认填充值，NaN表示浮点，NaT表示datetimelike，等等。对于整数类型，默认情况下，数据将转换为浮点，缺少的值将设置为NaN： df3 = df . iloc [[ 0 , 1 , 4 , 7 ], [ 1 , 2 ]] print ( df3 ) df3 . unstack () exp B animal dog cat first second bar one -0.849601 -0.731394 two 2.249542 0.092470 foo one -1.701371 0.101385 qux two -1.022019 -1.033913 exp B animal dog cat second one two one two first bar -0.849601 2.249542 -0.731394 0.092470 foo -1.701371 NaN 0.101385 NaN qux NaN -1.022019 NaN -1.033913 或者设置 fill_value 参数，用于指定缺失数据的值。 df3 . unstack ( fill_value =- 1e9 ) exp B animal dog cat second one two one two first bar -8.496012e-01 2.249542e+00 -7.313939e-01 9.246967e-02 foo -1.701371e+00 -1.000000e+09 1.013849e-01 -1.000000e+09 qux -1.000000e+09 -1.022019e+00 -1.000000e+09 -1.033913e+00 多级索引 当列是多索引时，取消堆栈也会小心地执行正确的操作： df [: 3 ] . unstack ( 0 ) exp A B A animal cat dog cat dog first bar baz bar baz bar baz bar baz second one -0.170026 -0.78377 -0.849601 0.689877 -0.731394 0.406778 0.221731 -1.099836 two 1.343975 NaN 2.249542 NaN 0.092470 NaN 0.565612 NaN df2 . unstack ( 1 ) exp A B A animal cat dog cat dog second one two one two one two one two first bar -0.170026 1.343975 -0.849601 2.249542 -0.731394 0.092470 0.221731 0.565612 baz -0.783770 NaN 0.689877 NaN 0.406778 NaN -1.099836 NaN foo 1.291947 3.026423 -1.701371 -0.763562 0.101385 -0.189664 0.200045 0.091951 qux NaN -0.621108 NaN -1.022019 NaN -1.033913 NaN 0.404069 通过Melt重塑 阿斯蒂芬 cheese = pd . DataFrame ({ 'first' : [ 'John' , 'Mary' ], 'last' : [ 'Doe' , 'Bo' ], 'height' : [ 5.5 , 6.0 ], 'weight' : [ 130 , 150 ]}) print ( cheese ) first last height weight 0 John Doe 5.5 130 1 Mary Bo 6.0 150 cheese . melt ( id_vars = [ 'first' , 'last' ]) first last variable value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 cheese . melt ( id_vars = [ 'first' , 'last' ], var_name = 'quantity' ) first last quantity value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 另一种转换方法是使用 wide_to_long() 面板数据便利功能。它不如灵活 melt() ，但更易于使用。 dft = pd . DataFrame ({ \"A1970\" : { 0 : \"a\" , 1 : \"b\" , 2 : \"c\" }, \"A1980\" : { 0 : \"d\" , 1 : \"e\" , 2 : \"f\" }, \"B1970\" : { 0 : 2.5 , 1 : 1.2 , 2 : . 7 }, \"B1980\" : { 0 : 3.2 , 1 : 1.3 , 2 : . 1 }, \"X\" : dict ( zip ( range ( 3 ), np . random . randn ( 3 )))}) dft [ \"id\" ] = dft . index print ( dft ) pd . wide_to_long ( dft , [ \"A\" , \"B\" ], i = \"id\" , j = \"year\" ) A1970 A1980 B1970 B1980 X id 0 a d 2.5 3.2 -0.468296 0 1 b e 1.2 1.3 0.739891 1 2 c f 0.7 0.1 0.146285 2 X A B id year 0 1970 -0.468296 a 2.5 1 1970 0.739891 b 1.2 2 1970 0.146285 c 0.7 0 1980 -0.468296 d 3.2 1 1980 0.739891 e 1.3 2 1980 0.146285 f 0.1","text_tokens":["0.160860","如上所述","130.0","n","numpy","variable","一列","列对","0.377455","相同","10","05","\\","导致","v.1915","省略","实现","下面","重塑","dog","vars","它们","最终","0.161535","转换","a1980","range","而","amd64","0","处理","datetimelike","cat","转换成","0.669381","对于","0.531254","from","8","0.057986","float64","变量","e","set","clumns","以","无法","：","中","更好","所述","column","该行","单独","唯一","该","5","行","[","旧","nan","缺失","隐式","复杂","1.919107","00","0.590259","01","堆栈","john","如果","标量","0.783770","调用","0.146285","3","假设","通过","为列","对应","msc","和","0.573297","值","提供","小心","long","转置","tuples","fill","import","将列","list","整数","阿","做","2.168700","date","0.105935","中有","0.763562","j","asarray","0.967577","正确","透视","data","09","1.266647","baz","新","全为","iloc","实际上","面板","h","希望","tools","就是","作为","0.355058","b","1.2",".","2000","0.656323","id","*","布尔值","0.691297","项","这些","灵活","时","列","value2","util","bar","更","doe","130","1.291947","列中","默认","一级","04","two","不如","windows","我们","易于","两者","，","换成","990797","pd","0.101385","然后","为","执行","pandas","剩余","标签","03","1.701371","1.021562","用于","0.516103","maketimedataframe","as","等等","实际","\"","var","print","randn","nat","-","智能","1.382595","1.022019","浮点","df3","所有","顶级","level","当列","+","melt","操作","second","均","0.1","变成","exp","multiindex","1.099836","为行","0.565612","5.5","qux","字符","64","运算","但是","stack","ravel","参数","函数","df","9.246967","1.146593","0.7","wide","random","a","具有","1.300858","zip","1.033913","仅","哪个","0.221731","1.340781","3.026423","但","x","在","pivoted","快捷方式","0.739891","地","def","unpivot","1.589400","help","}","0.754910","进行","shape","这样","、","0.080430","日期","丢失","不同","取消"," ","多于","0.78377","表示","一个","150.0","4","3.488850","出错","的","类型","1.479037","每个","方式","多","0.689877","为了","tile","子组","标签集","0.404069","原来","9","斯蒂芬","如上","会","_","1970","150078","1.013849","堆叠","了","0.092470","2","mary","没有","6","0.253519","0.723468","'",")","是","使用","来","dft","0.575360","0.033257","该列","{","0.621108","0.091951","above","字符串","最","填充",":","stacked","传递","0.976557","values","指定","转为","名称","0.134814","0.731394","也","级别","还","一种","请","equivalent","7","多层","重复","0.316200","编号","dtype","可以","0.666685",",","0.468296","跟","不是","旋转","@","泛化","(","to","功能","columns","将","缺少","0.119488","f","year","并且","height","358023","或","0.643611","您","考虑","另","则","1.312645","这种","名字","1980","k","（","table","下","多个","python","c","选择","all","repeat","name","1.652191","1.3","np","方法","last","true","0.739518","例子","数据","one","与","2.5","都","表","要","同时","0.170026","1.000000","dropna","1.343975","d","dataframe","转换方法","animal","1e9","sort","列表","labels","testing","好像","names","775482","输入","当然","清晰","is","7.313939","foo","用该","形式","cheese","排序","某行","/","内层","1.744425","可能","hair","）","快捷","6.0","多级","一次","0.200045","value","i","结果","解释","1.032207","first","0.488279","删除","1.935153","其","quantity","创建","替换","未","length","将行","布尔","不能","bit","不","]","df2","先","0.189664","它","150","数据类型","0.016629","重排","unstack","抛弃","1.254999","便利","11","frame","index","=","3.7","最后","0.794700","包含","情况","索引","dict","就","层次","对","0.849601","或者","2.249542","多层次","bo","。","序列","weight","设置","02","b1970","product","tm","3.2","short","非常","注意","1","0.406778","#","时间","0.273632","none","pivot","a1970","示例","8.496012","b1980","return"],"title":"7.7.变换索引","title_tokens":["索引","7.7",".","变换"]},{"location":"pandas笔记/7.7.变换索引.html#_1","text":"","text_tokens":[],"title":"重塑和数据透视表","title_tokens":["表","透视","数据","和","重塑"]},{"location":"pandas笔记/7.7.变换索引.html#pivot","text":"DataFrame.pivot() 方法重排数据。它是一个快捷方式，它使用 set_index 将列数据变成行索引，然后使用 unstack 将行索引转为列索引。 DataFrame . pivot ( index = None , columns = None , values = None ) index ：一个字符串。指定了一个 column name ，用该列数据来 set_index （将该列数据变成行索引，删除了原来的旧的行索引）。如果为 None ，则不执行 set_index columns ：一个字符串，指定了哪个列数据作为结果的 columns labels 。 实际上对 index,clumns 指定的列数据均 set_index，然后仅对 columns 对应的列数据 unstack values ：一个字符串，指定了哪个列数据作为结果的数据。如果未提供，则剩余的所有列都将作为结果的数据。 创建示例DataFrame： import pandas.util.testing as tm tm . N = 3 def unpivot ( frame ): N , K = frame . shape data = { 'value' : frame . to_numpy () . ravel ( 'F' ), 'variable' : np . asarray ( frame . columns ) . repeat ( N ), 'date' : np . tile ( np . asarray ( frame . index ), K )} return pd . DataFrame ( data , columns = [ 'date' , 'variable' , 'value' ]) df = unpivot ( tm . makeTimeDataFrame ()) df date variable value 0 2000-01-03 A -0.794700 1 2000-01-04 A 0.080430 2 2000-01-05 A -0.573297 3 2000-01-03 B 0.739518 4 2000-01-04 B 0.967577 5 2000-01-05 B 1.744425 6 2000-01-03 C 0.656323 7 2000-01-04 C 0.691297 8 2000-01-05 C 0.377455 9 2000-01-03 D 0.488279 10 2000-01-04 D 0.016629 11 2000-01-05 D 0.516103 要选择所有 variable=A 的值，可以这样做： df [ df [ 'variable' ] == 'A' ] date variable value 0 2000-01-03 A -0.794700 1 2000-01-04 A 0.080430 2 2000-01-05 A -0.573297 但是假设我们希望对变量进行时间序列运算，更好的表示方法是列是唯一的变量，行索引作为日期。为了将数据重塑为这种形式，我们使用 DataFrame.pivot() 方法（也实现为顶级函数 pivot() ）： df . pivot ( index = 'date' , columns = 'variable' , values = 'value' ) variable A B C D date 2000-01-03 -0.794700 0.739518 0.656323 0.488279 2000-01-04 0.080430 0.967577 0.691297 0.016629 2000-01-05 -0.573297 1.744425 0.377455 0.516103 如果省略 values 参数，并且输入 DataFrame 具有多于一列的值，则结果DataFrame将具有多层次列索引： df [ 'value2' ] = df [ 'value' ] * 2 print ( df ) pivoted = df . pivot ( index = 'date' , columns = 'variable' ) pivoted date variable value value2 0 2000-01-03 A -0.794700 -1.589400 1 2000-01-04 A 0.080430 0.160860 2 2000-01-05 A -0.573297 -1.146593 3 2000-01-03 B 0.739518 1.479037 4 2000-01-04 B 0.967577 1.935153 5 2000-01-05 B 1.744425 3.488850 6 2000-01-03 C 0.656323 1.312645 7 2000-01-04 C 0.691297 1.382595 8 2000-01-05 C 0.377455 0.754910 9 2000-01-03 D 0.488279 0.976557 10 2000-01-04 D 0.016629 0.033257 11 2000-01-05 D 0.516103 1.032207 value value2 variable A B C D A B C D date 2000-01-03 -0.794700 0.739518 0.656323 0.488279 -1.589400 1.479037 1.312645 0.976557 2000-01-04 0.080430 0.967577 0.691297 0.016629 0.160860 1.935153 1.382595 0.033257 2000-01-05 -0.573297 1.744425 0.377455 0.516103 -1.146593 3.488850 0.754910 1.032207 注意 如果索引包含重复项， pivot() 将出错，无法重塑。在这种情况下，请考虑使用 pivot_table() ，它是pivot的泛化，可以处理一个索引/列对的重复值。","text_tokens":["0.160860","一个","n","列","numpy","variable","value2","4","3.488850","数据","一列","出错","的","util","0.377455","1.479037","列对","方式","都","10","要","为了","05","04","d","dataframe","原来","9","省略","实现","重塑","_","我们","，","labels","了","testing","然后","为","执行","pandas","剩余","pd","03","2","0","处理","0.516103","maketimedataframe","as","输入","6","实际","8","print","用该","'","set","-","变量",")","是","clumns","形式","使用","1.382595","无法","：","更好","column","来","所有","/","顶级","0.033257","该列","{","唯一","1.744425","）","字符串","5","快捷","行",":","均","[","变成","0.976557","旧","values","指定","转为","value","也","结果","1.032207","请","7","多层","重复","01","如果","0.488279","字符","删除","可以","1.935153","创建","运算","未",",","3","但是","假设","return","将行","泛化","ravel","对应","参数","0.691297","(","函数","to","不","df","]","1.146593","columns","0.573297","值","提供","将","它","a","具有","0.016629","重排","unstack","f","仅","哪个","import","将列","并且","11","frame","index","=","0.794700","在","pivoted","快捷方式","索引","包含","情况","层次","对","做","考虑","date","def","则","多层次","。","序列","unpivot","1.589400","1.312645","asarray","这种","0.967577","}","k","data","0.754910","（","tm","进行","table","shape","这样","0.080430","日期","实际上","注意","1","下","希望","作为","c","选择","时间","repeat","name","none","b","pivot",".","示例","np","方法","2000"," ","0.656323","多于","0.739518","*","项","tile","表示"],"title":"pivot","title_tokens":["pivot"]},{"location":"pandas笔记/7.7.变换索引.html#stack","text":"DataFrame.stack() 方法将数据的列索引旋转为行索引。 注意：它跟转置不同，转置会同时旋转数据。 DataFrame.stack(level=-1, dropna=True) level ：一个整数、字符串或者整数字符串的列表。如果列索引为多级索引，它指定了将哪个级别的索引旋转为行索引 dropna ：一个布尔值。如果为 True ，则如果结果中某行全为 NaN ，则抛弃该行 旋转时，列索引旋转为行索引，新的行索引是多级索引，最内层的行索引就是原来的列索引。 最清晰的解释方式是通过示例。先创建一个示例数据： tuples = list ( zip ( * [[ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ 'A' , 'B' ]) df2 = df [: 4 ] df2 A B first second bar one -0.057986 0.355058 two 0.575360 1.254999 baz one 0.105935 -0.669381 two -0.273632 2.168700 stacked = df2 . stack () stacked first second bar one A -0.057986 B 0.355058 two A 0.575360 B 1.254999 baz one A 0.105935 B -0.669381 two A -0.273632 B 2.168700 dtype: float64","text_tokens":["一个","时","列","4","数据","one","的","bar","方式","同时","dropna","dataframe","原来","会","two","_","，","列表","pd","了","为","2","names","0.669381","from","8","清晰","0.057986","randn","foo","float64","'","-",")","是","：","中","0.575360","某行","该行","内层","level","字符串","最","second","行",":","stacked","[","多级","nan","指定","multiindex","结果","解释","级别","为行","qux","first","如果","字符","dtype","创建",",","跟","通过","stack","旋转","布尔","(","df","]","df2","先","columns","将","它","random","a","转置","zip","tuples","抛弃","1.254999","哪个","index","=","list","整数","索引","2.168700","0.105935","或者","则","。","baz","新","、","全为","注意","1","就是","不同","0.355058","0.273632","b",".","示例","np","方法"," ","true","*","布尔值"],"title":"stack","title_tokens":["stack"]},{"location":"pandas笔记/7.7.变换索引.html#unstack","text":"与 DataFrame.stack() 对应的就是 DataFrame.unstack() 方法。 它将数据的行索引转换为列索引。 注意：它跟转置不同，转置会同时旋转数据。 DataFrame.unstack(level=-1, fill_value=None) level ：一个整数、字符串或者整数字符串的列表。如果行索引为多级索引，它指定了将哪个级别的索引旋转为列索引 fill_value ：一个标量。如果结果中有 NaN ，则使用 fill_value 替换。 unstack 默认情况下将最后一级行索引转换成列索引： print ( stacked ) first second bar one A -0.057986 B 0.355058 two A 0.575360 B 1.254999 baz one A 0.105935 B -0.669381 two A -0.273632 B 2.168700 dtype: float64 stacked . unstack () A B first second bar one -0.057986 0.355058 two 0.575360 1.254999 baz one 0.105935 -0.669381 two -0.273632 2.168700 stacked . unstack ( 1 ) second one two first bar A -0.057986 0.575360 B 0.355058 1.254999 baz A 0.105935 -0.273632 B -0.669381 2.168700 stacked . unstack ( 0 ) first bar baz second one A -0.057986 0.105935 B 0.355058 -0.669381 two A 0.575360 -0.273632 B 1.254999 2.168700 如果索引具有名称，则可以使用级别名称而不是指定级别编号： stacked . unstack ( 'second' ) second one two first bar A -0.057986 0.575360 B 0.355058 1.254999 baz A 0.105935 -0.273632 B -0.669381 2.168700 注意， stack 和 unstack 方法会隐式地对索引进行排序： index = pd . MultiIndex . from_product ([[ 2 , 1 ], [ 'a' , 'b' ]]) df = pd . DataFrame ( np . random . randn ( 4 ), index = index , columns = [ 'A' ]) print ( df , \" \\n \" ) print ( df . unstack () . stack ()) all ( df . unstack () . stack () == df . sort_index ()) A 2 a - 0 . 775482 b - 0 . 358023 1 a 0 . 150078 b - 1 . 990797 A 1 a 0 . 150078 b - 1 . 990797 2 a - 0 . 775482 b - 0 . 358023 True","text_tokens":["一个","n","列","4","数据","one","的","与","bar","同时","\\","默认","一级","dataframe","会","_","two","sort","150078","转换","，","列表","换成","990797","pd","了","为","而","2","0","775482","转换成","0.669381","\"","from","print","0.057986","randn","float64","'","-",")","使用","：","排序","0.575360","level","字符串","second","行",":","stacked","[","多级","nan","value","指定","名称","隐式","multiindex","结果","级别","first","如果","编号","字符","标量","dtype","可以","替换",",","跟","不是","stack","旋转","为列","对应","(","和","df","]","columns","将","它","random","a","具有","转置","unstack","fill","1.254999","哪个","index","=","358023","最后","整数","情况","索引","对","2.168700","中有","0.105935","或者","地","则","。","product","进行","baz","、","注意","1","下","就是","不同","0.355058","0.273632","all","none","b",".","np","方法"," ","true"],"title":"unstack","title_tokens":["unstack"]},{"location":"pandas笔记/7.7.变换索引.html#_2","text":"还可以通过传递一个索引名字列表来一次堆栈或取消堆栈多个级别的索引，在这种情况下，最终结果就好像列表中的每个级别的索引都是单独处理的： columns = pd . MultiIndex . from_tuples ([ ( 'A' , 'cat' , 'long' ), ( 'B' , 'cat' , 'long' ), ( 'A' , 'dog' , 'short' ), ( 'B' , 'dog' , 'short' )], names = [ 'exp' , 'animal' , 'hair_length' ]) df = pd . DataFrame ( np . random . randn ( 4 , 4 ), columns = columns ) print ( df ) df . stack ( level = [ 'animal' , 'hair_length' ]) exp A B A B animal cat cat dog dog hair_length long long short short 0 -0.590259 0.643611 -0.253519 -0.723468 1 0.316200 1.340781 1.300858 0.531254 2 -0.666685 1.021562 0.119488 1.266647 3 0.161535 -1.919107 -1.652191 -0.134814 exp A B animal hair_length 0 cat long -0.590259 0.643611 dog short -0.253519 -0.723468 1 cat long 0.316200 1.340781 dog short 1.300858 0.531254 2 cat long -0.666685 1.021562 dog short 0.119488 1.266647 3 cat long 0.161535 -1.919107 dog short -1.652191 -0.134814 索引列表可以包含索引名称或索引级别的编号（但不能同时包含两者）： # df.stack(level=['animal', 'hair_length']) # from above is equivalent to: df . stack ( level = [ 1 , 2 ]) exp A B animal hair_length 0 cat long -0.590259 0.643611 dog short -0.253519 -0.723468 1 cat long 0.316200 1.340781 dog short 1.300858 0.531254 2 cat long -0.666685 1.021562 dog short 0.119488 1.266647 3 cat long 0.161535 -1.919107 dog short -1.652191 -0.134814","text_tokens":["一个","4","的","每个","都","同时","dataframe","dog","_","animal","最终","0.161535","两者","，","列表","pd","2","好像","0","1.021562","处理","names","cat","0.531254","from","0.253519","is","print","0.723468","randn","'","-","是",")","：","中","来","单独","level","above","hair","）",":","传递","[","一次","exp","multiindex","0.134814","名称","结果","级别","还","1.919107","equivalent","0.316200","0.590259","堆栈","编号","可以","0.666685",",","3","length","通过","stack","不能","(","to","df","]","columns","random","long","a","1.300858","0.119488","tuples","1.340781","=","但","或","在","包含","情况","索引","0.643611","就","这种","名字","（","1.266647","short","下","1","多个","#","1.652191","b","取消",".","np"," "],"title":"多级别索引","title_tokens":["多","级别","索引"]},{"location":"pandas笔记/7.7.变换索引.html#_3","text":"这些函数对于处理丢失的数据非常智能，并且不希望层次索引中的每个子组都具有相同的标签集。它们还可以处理未排序的索引（当然，您可以通过调用sort_index对其进行排序）。下面是一个更复杂的例子： columns = pd . MultiIndex . from_tuples ([( 'A' , 'cat' ), ( 'B' , 'dog' ), ( 'B' , 'cat' ), ( 'A' , 'dog' )], names = [ 'exp' , 'animal' ]) index = pd . MultiIndex . from_product ([( 'bar' , 'baz' , 'foo' , 'qux' ), ( 'one' , 'two' )], names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = index , columns = columns ) df2 = df . iloc [[ 0 , 1 , 2 , 4 , 5 , 7 ]] print ( df2 ) exp A B A animal cat dog cat dog first second bar one -0.170026 -0.849601 -0.731394 0.221731 two 1.343975 2.249542 0.092470 0.565612 baz one -0.783770 0.689877 0.406778 -1.099836 foo one 1.291947 -1.701371 0.101385 0.200045 two 3.026423 -0.763562 -0.189664 0.091951 qux two -0.621108 -1.022019 -1.033913 0.404069 如上所述， stack 可以使用 level 参数来调用以选择要堆叠的列中的级别： df2 . stack ( 'exp' ) animal cat dog first second exp bar one A -0.170026 0.221731 B -0.731394 -0.849601 two A 1.343975 0.565612 B 0.092470 2.249542 baz one A -0.783770 -1.099836 B 0.406778 0.689877 foo one A 1.291947 0.200045 B 0.101385 -1.701371 two A 3.026423 0.091951 B -0.189664 -0.763562 qux two A -0.621108 0.404069 B -1.033913 -1.022019 df2 . stack ( 'animal' ) exp A B first second animal bar one cat -0.170026 -0.731394 dog 0.221731 -0.849601 two cat 1.343975 0.092470 dog 0.565612 2.249542 baz one cat -0.783770 0.406778 dog -1.099836 0.689877 foo one cat 1.291947 0.101385 dog 0.200045 -1.701371 two cat 3.026423 -0.189664 dog 0.091951 -0.763562 qux two cat -0.621108 -1.033913 dog 0.404069 -1.022019 如果子组没有相同的标签集，则取消堆叠可能会导致缺少值。默认情况下，缺少的值将替换为该数据类型的默认填充值，NaN表示浮点，NaT表示datetimelike，等等。对于整数类型，默认情况下，数据将转换为浮点，缺少的值将设置为NaN： df3 = df . iloc [[ 0 , 1 , 4 , 7 ], [ 1 , 2 ]] print ( df3 ) df3 . unstack () exp B animal dog cat first second bar one -0.849601 -0.731394 two 2.249542 0.092470 foo one -1.701371 0.101385 qux two -1.022019 -1.033913 exp B animal dog cat second one two one two first bar -0.849601 2.249542 -0.731394 0.092470 foo -1.701371 NaN 0.101385 NaN qux NaN -1.022019 NaN -1.033913 或者设置 fill_value 参数，用于指定缺失数据的值。 df3 . unstack ( fill_value =- 1e9 ) exp B animal dog cat second one two one two first bar -8.496012e-01 2.249542e+00 -7.313939e-01 9.246967e-02 foo -1.701371e+00 -1.000000e+09 1.013849e-01 -1.000000e+09 qux -1.000000e+09 -1.022019e+00 -1.000000e+09 -1.033913e+00","text_tokens":["例子","如上所述","一个","4","数据","one","的","类型","每个","相同","bar","更","都","0.689877","要","1.000000","0.170026","1.291947","列中","子组","默认","标签集","1.343975","0.404069","导致","dataframe","下面","如上","会","dog","_","two","它们","animal","sort","1e9","转换","，","1.013849","堆叠","pd","0.101385","0.092470","标签","2","1.701371","为","用于","0","处理","names","没有","datetimelike","cat","等等","对于","当然","from","8","print","7.313939","randn","foo","nat","'","e","-","是",")","智能","使用","1.022019","以","浮点","：","中","排序","所述","来","df3","0.621108","level","0.091951","可能","+","）","该","5","填充","second","[","exp","0.200045","nan","0.731394","value","multiindex","1.099836","指定","缺失","复杂","级别","还","0.565612","00","7","qux","01","first","如果","0.783770","可以","其","调用","替换","未",",","通过","stack","参数","函数","(","不","df","]","df2","9.246967","columns","值","0.189664","将","random","数据类型","a","具有","缺少","unstack","tuples","1.033913","fill","0.221731","并且","3.026423","index","=","整数","情况","索引","层次","对","您","0.849601","或者","0.763562","2.249542","则","。","设置","02","09","product","（","进行","baz","iloc","非常","1","下","希望","丢失","0.406778","选择","b","取消",".","np","8.496012"," ","这些","表示"],"title":"缺失数据","title_tokens":["数据","缺失"]},{"location":"pandas笔记/7.7.变换索引.html#_4","text":"当列是多索引时，取消堆栈也会小心地执行正确的操作： df [: 3 ] . unstack ( 0 ) exp A B A animal cat dog cat dog first bar baz bar baz bar baz bar baz second one -0.170026 -0.78377 -0.849601 0.689877 -0.731394 0.406778 0.221731 -1.099836 two 1.343975 NaN 2.249542 NaN 0.092470 NaN 0.565612 NaN df2 . unstack ( 1 ) exp A B A animal cat dog cat dog second one two one two one two one two first bar -0.170026 1.343975 -0.849601 2.249542 -0.731394 0.092470 0.221731 0.565612 baz -0.783770 NaN 0.689877 NaN 0.406778 NaN -1.099836 NaN foo 1.291947 3.026423 -1.701371 -0.763562 0.101385 -0.189664 0.200045 0.091951 qux NaN -0.621108 NaN -1.022019 NaN -1.033913 NaN 0.404069","text_tokens":["堆栈","first","时","索引","0.849601","0.783770","foo","one","的","0.763562","地","-","是","3",")","bar","2.249542","多","1.022019","0.689877","：","0.170026","1.291947","正确","1.343975","0.404069","(","baz","0.621108","df","]","当列","df2","0.091951","会","操作","dog","second","two",":","小心","animal","1","0.189664","[","0.406778","exp","a","，","nan","0.200045","0.731394","b","1.099836","取消","0.092470","0.101385","也","执行",".","unstack","1.701371","1.033913"," ","0","0.221731","0.78377","0.565612","3.026423","cat","qux"],"title":"多级索引","title_tokens":["多级","索引"]},{"location":"pandas笔记/7.7.变换索引.html#melt","text":"阿斯蒂芬 cheese = pd . DataFrame ({ 'first' : [ 'John' , 'Mary' ], 'last' : [ 'Doe' , 'Bo' ], 'height' : [ 5.5 , 6.0 ], 'weight' : [ 130 , 150 ]}) print ( cheese ) first last height weight 0 John Doe 5.5 130 1 Mary Bo 6.0 150 cheese . melt ( id_vars = [ 'first' , 'last' ]) first last variable value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 cheese . melt ( id_vars = [ 'first' , 'last' ], var_name = 'quantity' ) first last quantity value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 另一种转换方法是使用 wide_to_long() 面板数据便利功能。它不如灵活 melt() ，但更易于使用。 dft = pd . DataFrame ({ \"A1970\" : { 0 : \"a\" , 1 : \"b\" , 2 : \"c\" }, \"A1980\" : { 0 : \"d\" , 1 : \"e\" , 2 : \"f\" }, \"B1970\" : { 0 : 2.5 , 1 : 1.2 , 2 : . 7 }, \"B1980\" : { 0 : 3.2 , 1 : 1.3 , 2 : . 1 }, \"X\" : dict ( zip ( range ( 3 ), np . random . randn ( 3 )))}) dft [ \"id\" ] = dft . index print ( dft ) pd . wide_to_long ( dft , [ \"A\" , \"B\" ], i = \"id\" , j = \"year\" ) A1970 A1980 B1970 B1980 X id 0 a d 2.5 3.2 -0.468296 0 1 b e 1.2 1.3 0.739891 1 2 c f 0.7 0.1 0.146285 2 X A B id year 0 1970 -0.468296 a 2.5 1 1970 0.739891 b 1.2 2 1970 0.146285 c 0.7 0 1980 -0.468296 d 3.2 1 1980 0.739891 e 1.3 2 1980 0.146285 f 0.1","text_tokens":["130.0","variable","150.0","数据","2.5","更","doe","130","d","dataframe","斯蒂芬","转换方法","vars","_","不如","1970","易于","转换","a1980","，","range","pd","2","mary","0","\"","var","print","randn","e","'","-",")","是","使用","cheese","dft","{","melt",":","6.0","0.1","[","value","i","一种","5.5","7","first","john","quantity","0.146285",",","3","0.468296","(","to","]","功能","0.7","wide","150","它","random","long","a","zip","f","year","便利","height","index","=","但","x","dict","阿","0.739891","另","j","bo","。","weight","}","b1970","1980","3.2","面板","1","c","name","b","1.2","1.3",".","a1970","np","方法"," ","last","id","b1980","灵活"],"title":"通过Melt重塑","title_tokens":["重塑","通过","melt"]},{"location":"tensorflowb笔记/12.1.keras数据集.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.09 tensorflow version: 2.1.0 from tensorflow import keras from tensorflow.keras.datasets import boston_housing from tensorflow.keras.datasets import imdb from tensorflow.keras.datasets import reuters from tensorflow.keras.datasets import mnist from tensorflow.keras.datasets import cifar10 from tensorflow.keras.datasets import cifar100 from tensorflow.keras.datasets import fashion_mnist import matplotlib.pyplot as plt tensorflow 中可以快速调用的数据集（还是要先下载的）： ['cifar10', 'cifar100', 'imdb', 'mnist', 'reuters'] boston_housing 回归数据集 数据集来自卡内基梅隆大学维护的 StatLib 库。样本包含 1970 年代的在波士顿郊区不同位置的房屋信息，总共有 13 种房屋属性。目标值是一个位置的房屋价格的中值（单位：k$）。 ( x_train , y_train ), ( x_test , y_test ) = boston_housing . load_data () 参数： path: 缓存本地数据集的位置 (相对路径 ~/.keras/datasets)。 seed: 在计算测试分割之前对数据进行混洗的随机种子。 test_split: 需要保留作为测试数据的比例。 x_train.shape: (404, 13) y_train.shape: (404,) x_test.shape : (102, 13) y_test.shape : (102,) imdb 情感分类数据集 数据集来自 IMDB 的 25,000 条电影评论，以情绪（正面/负面）标记。评论已经过预处理，并编码为词索引（整数）的序列表示。为了方便起见，将词按数据集中出现的频率进行索引，例如整数 3 编码数据中第三个最频繁的词。这允许快速筛选操作，例如：「只考虑前 10,000 个最常用的词，但排除前 20 个最常见的词」。 作为惯例，0 不代表特定的单词，而是被用于编码任何未知单词。 ( x_train , y_train ), ( x_test , y_test ) = imdb . load_data ( path = \"imdb.npz\" , num_words = None , skip_top = 0 , maxlen = None , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) x_train.shape: (25000,) y_train.shape: (25000,) x_test.shape : (25000,) y_test.shape : (25000,) x_train 是不等长的list组成的array，所以只显示了第一个维度的大小。 y_train 是分类标签，只有一个维度，所以也只显示了第一个维度的大小。 同时，也可以获取词库： word_index = imdb . get_word_index () print ( len ( word_index )) 88584 i = 0 for k , v in word_index . items (): print ( f \" {k} : {v} \" ) i += 1 if i > 5 : break fawn : 34701 tsukino : 52006 nunnery : 52007 sonja : 16816 vani : 63951 woods : 1408 mnist 手写数字分类数据集 ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train, x_test: uint8 数组表示的灰度图像，尺寸为 (num_samples, 28, 28) 。 y_train, y_test: uint8 数组表示的数字标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28) y_test.shape : (10000,) def mnist_plot_img ( img ): plt . figure () plt . gray () plt . imshow ( img ) plt . show () mnist_plot_img ( x_train [ 0 ]) cifar10 图像分类数据集 50,000 张 32x32 彩色训练图像数据，以及 10,000 张测试图像数据，总共分为 10 个类别。 ( x_train , y_train ), ( x_test , y_test ) = cifar10 . load_data () x_train, x_test: uint8 数组表示的 RGB 图像数据，尺寸为 (num_samples, 3, 32, 32) 或 (num_samples, 32, 32, 3) ，基于 image_data_format 后端设定的 channels_first 或 channels_last。 y_train, y_test: uint8 数组表示的类别标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ]) cifar100 图像分类数据集 50,000 张 32x32 彩色训练图像数据，以及 10,000 张测试图像数据，总共分为 100 个类别。 ( x_train , y_train ), ( x_test , y_test ) = cifar100 . load_data () x_train, x_test: uint8 数组表示的 RGB 图像数据，尺寸为 (num_samples, 3, 32, 32) 或 (num_samples, 32, 32, 3) ，基于 image_data_format 后端设定的 channels_first 或 channels_last。 y_train, y_test: uint8 数组表示的类别标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ]) fashion_mnist 图像分类数据集 Fashion-MNIST是Zalando文章图片的数据集，包含60,000个示例的训练集和10,000个示例的测试集。每个示例都是一个28x28灰度图像，与来自10个类别的标签相关联。类别标签是： 类别 描述 中文 0 T-shirt/top T恤/上衣 1 Trouser 裤子 2 Pullover 套头衫 3 Dress 连衣裙 4 Coat 外套 5 Sandal 凉鞋 6 Shirt 衬衫 7 Sneaker 运动鞋 8 Bag 背包 9 Ankle boot 短靴 ( x_train , y_train ), ( x_test , y_test ) = fashion_mnist . load_data () x_train, x_test: uint8 数组表示的灰度图像，尺寸为 (num_samples, 28, 28) 。 y_train, y_test: uint8 数组表示的数字标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 print ( \"x_train.shape: ( %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d ,)\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d \" % x_test . shape ) print ( \"y_test.shape : ( %d ,)\" % y_test . shape ) x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28 y_test.shape : (10000,) mnist_plot_img ( x_train [ 100 ]) reuters 路透社新闻主题分类数据集 数据集来源于路透社的 11,228 条新闻文本，总共分为 46 个主题。与 IMDB 数据集一样，每条新闻都被编码为一个词索引的序列。 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data ( path = \"reuters.npz\" , num_words = None , skip_top = 0 , maxlen = None , test_split = 0.2 , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) 规格与 IMDB 数据集的规格相同，但增加了 test_split 参数。 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data () x_train.shape: (8982,) y_train.shape: (8982,) x_test.shape : (2246,) y_test.shape : (2246,) word_index = reuters . get_word_index","text_tokens":["相同","筛选","单位","10","相对","第一个","快速","被","v.1915","10000","statlib","words","计算","t恤","plot","npz","信息","范围","频率","amd64","梅隆","0","$","处理","228","词","from","8","标值","50","20","长","以","：","中","image","编码数据","5","库","50000","[","88584","负面","len","34701","运动","回归","连衣裙","手写","dress","imshow","来自","tensorflow","for","来源于","任何","调用","3","张","目标值","运动鞋","msc","和","标记","随机","而是","build","fashion","coat","单词","衬衫","以及","start","还是","import","测试","缓存","list","个","整数","skip","test","date","60","46","09","data","预处理","正面","作为","未知","items",".","彩色","种","文章","shirt","见","show","samples","13","目标","figure","32x32","break","样本","只","起","tsukino","增加","第一","价格","windows","需要","nunnery","，","图像","相对路径","为","标签","用于","as","\"","关联","训练","print","-","pyplot","已经","等","组成","+","连衣","操作","latest","显示","60000","sandal","维护","」","一样","后","集","有","大学","gray","404","获取","64","path","路径","train","波士顿","28","维度","参数","第三个","63951","分割","boot","之前","情感","本地","并","中值","编码","种子","seed","num","灰度","version","但","x","在","套头","def","尺寸","matplotlib","array","woods","源于","}","进行","sonja","shape","属性","2246","按","不同","trouser"," ","25","路透","位置","表示","一个","4","000","25000","%","的","datasets","端","每个","为了","52007","凉鞋","img","保留","9","惯例","vani","排除","设定","_","if","1970","了","8982","2","例如","路透社","外套","6","housing","'",")","是","规格","电影","imdb","数组","相关联","{","最",":","常见","郊区","也","v","频繁","7","cifar100","可以","第三","图片",",","描述","比例","下载","情绪","@","split","(","波士","每条","出现","将","channels",">","f","load","新闻","~","或","考虑","boston","y","数字","k","（","套头衫","uint8","房屋","113","python","混洗","这","32","format","last","sneaker","rgb","zalando","102","总共","pullover","数据","2.1","top","与","所以","word","都","要","同时","1408","in","16816","卡内","测试数据","前","d","文本","短靴","之间","相关","来源","plt","上衣","卡内基","代表","bag","fawn","主题","词库","char","/","2020.03","条","）","码数","三个","特定","100","52006","i","ankle","类别","分类","t","first","bit","评论","不","]","分为","keras","先","裤子","0.2","「","常用","衣裙","方便","基于","11","集中","get","index","=","3.7","年代","包含","索引","对","大小","。","序列","房屋信息","中文","允许","cifar10","maxlen","mnist","1","reuters","只有","none","背包","oov","过","示例","28x28"],"title":"12.1.keras数据集","title_tokens":["keras",".","集","数据","12.1"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#boston_housing","text":"数据集来自卡内基梅隆大学维护的 StatLib 库。样本包含 1970 年代的在波士顿郊区不同位置的房屋信息，总共有 13 种房屋属性。目标值是一个位置的房屋价格的中值（单位：k$）。 ( x_train , y_train ), ( x_test , y_test ) = boston_housing . load_data () 参数： path: 缓存本地数据集的位置 (相对路径 ~/.keras/datasets)。 seed: 在计算测试分割之前对数据进行混洗的随机种子。 test_split: 需要保留作为测试数据的比例。 x_train.shape: (404, 13) y_train.shape: (404,) x_test.shape : (102, 13) y_test.shape : (102,)","text_tokens":["102","总共","一个","种","数据","的","datasets","单位","相对","13","目标","卡内","测试数据","保留","statlib","样本","计算","_","价格","1970","需要","信息","，","相对路径","梅隆","$","卡内基","housing","标值","是",")","：","/","）",":","库","维护","郊区","集","有","大学","404","来自","path","路径","train",",","比例","波士顿","目标值","参数","split","(","分割","波士","keras","随机","之前","本地","中值","load","种子","~","测试","seed","=","缓存","x","在","年代","包含","test","对","y","。","boston","房屋信息","k","data","（","进行","shape","属性","不同","房屋","作为","混洗","."," ","位置"],"title":"boston_housing 回归数据集","title_tokens":["housing","_","集","回归"," ","数据","boston"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#imdb","text":"数据集来自 IMDB 的 25,000 条电影评论，以情绪（正面/负面）标记。评论已经过预处理，并编码为词索引（整数）的序列表示。为了方便起见，将词按数据集中出现的频率进行索引，例如整数 3 编码数据中第三个最频繁的词。这允许快速筛选操作，例如：「只考虑前 10,000 个最常用的词，但排除前 20 个最常见的词」。 作为惯例，0 不代表特定的单词，而是被用于编码任何未知单词。 ( x_train , y_train ), ( x_test , y_test ) = imdb . load_data ( path = \"imdb.npz\" , num_words = None , skip_top = 0 , maxlen = None , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) x_train.shape: (25000,) y_train.shape: (25000,) x_test.shape : (25000,) y_test.shape : (25000,) x_train 是不等长的list组成的array，所以只显示了第一个维度的大小。 y_train 是分类标签，只有一个维度，所以也只显示了第一个维度的大小。 同时，也可以获取词库： word_index = imdb . get_word_index () print ( len ( word_index )) 88584 i = 0 for k , v in word_index . items (): print ( f \" {k} : {v} \" ) i += 1 if i > 5 : break fawn : 34701 tsukino : 52006 nunnery : 52007 sonja : 16816 vani : 63951 woods : 1408","text_tokens":["一个","000","数据","25000","的","top","见","所以","word","筛选","10","同时","为了","52007","1408","in","16816","第一个","快速","前","被","break","惯例","words","vani","排除","只","起","_","tsukino","第一","if","npz","nunnery","，","频率","了","为","2","用于","标签","例如","0","处理","代表","\"","词","from","fawn","print",")","是","20","词库","长","以","已经","电影","：","中","imdb","char","等","组成","/","{","条","+","）","最","编码数据","操作","码数","5",":","三个","特定","显示","88584","负面","常见","」","len","34701","52006","i","也","集","v","频繁","分类","获取","来自","可以","for","第三","任何","path",",","3","train","情绪","维度","第三个","63951","评论","(","不","标记","出现","将","而是","「","常用","单词","并",">","start","f","方便","编码","load","集中","seed","num","index","=","但","list","个","整数","x","get","skip","索引","test","考虑","大小","y","。","序列","array","woods","}","k","data","（","进行","允许","sonja","预处理","shape","maxlen","正面","1","只有","按","113","作为","未知","这","none","items",".","过","oov"," ","25","表示"],"title":"imdb 情感分类数据集","title_tokens":["imdb","集"," ","数据","分类","情感"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#mnist","text":"( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train, x_test: uint8 数组表示的灰度图像，尺寸为 (num_samples, 28, 28) 。 y_train, y_test: uint8 数组表示的数字标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28) y_test.shape : (10000,) def mnist_plot_img ( img ): plt . figure () plt . gray () plt . imshow ( img ) plt . show () mnist_plot_img ( x_train [ 0 ])","text_tokens":["在","test","的","-","def",")",",","train","y","尺寸","。","数字","samples","show","28","img","数组","data","figure","（","(","10000","9","shape","]","mnist","）","整数","_",":","之间","uint8","60000","plot","[","plt","图像","，","范围",".","为","标签"," ","load","0","gray","num","=","imshow","x","灰度","表示"],"title":"mnist 手写数字分类数据集","title_tokens":["集"," ","数据","分类","手写","数字","mnist"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#cifar10","text":"50,000 张 32x32 彩色训练图像数据，以及 10,000 张测试图像数据，总共分为 10 个类别。 ( x_train , y_train ), ( x_test , y_test ) = cifar10 . load_data () x_train, x_test: uint8 数组表示的 RGB 图像数据，尺寸为 (num_samples, 3, 32, 32) 或 (num_samples, 32, 32, 3) ，基于 image_data_format 后端设定的 channels_first 或 channels_last。 y_train, y_test: uint8 数组表示的类别标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ])","text_tokens":["或","first","在","总共","\"","训练","test","print","000","数据","%","50","的","rgb","端","-",")",",","train","。","y","尺寸","3","张","10","samples","img","数组","data","32x32","（","(","d","10000","9","shape","分为","image","cifar10","]","mnist","）","设定","_",":","之间","1","x","uint8","50000","plot","[","，","图像","32","后","范围","channels","以及",".","为","format","标签"," ","类别","load","last","0","基于","彩色","测试","num","=","个","整数","表示"],"title":"cifar10 图像分类数据集","title_tokens":["集"," ","数据","分类","图像","cifar10"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#cifar100","text":"50,000 张 32x32 彩色训练图像数据，以及 10,000 张测试图像数据，总共分为 100 个类别。 ( x_train , y_train ), ( x_test , y_test ) = cifar100 . load_data () x_train, x_test: uint8 数组表示的 RGB 图像数据，尺寸为 (num_samples, 3, 32, 32) 或 (num_samples, 32, 32, 3) ，基于 image_data_format 后端设定的 channels_first 或 channels_last。 y_train, y_test: uint8 数组表示的类别标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ])","text_tokens":["总共","000","数据","%","的","端","samples","10","img","32x32","d","10000","9","设定","_","之间","plot","，","图像","范围","为","标签","0","\"","训练","print","50","-",")","数组","image","）",":","50000","[","100","后","类别","cifar100","first",",","train","3","张","(","]","分为","channels","以及","load","基于","测试","num","=","x","个","整数","或","在","test","尺寸","y","。","data","（","shape","mnist","1","uint8","32",".","format"," ","last","彩色","rgb","表示"],"title":"cifar100 图像分类数据集","title_tokens":["集"," ","数据","分类","图像","cifar100"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#fashion_mnist","text":"Fashion-MNIST是Zalando文章图片的数据集，包含60,000个示例的训练集和10,000个示例的测试集。每个示例都是一个28x28灰度图像，与来自10个类别的标签相关联。类别标签是： 类别 描述 中文 0 T-shirt/top T恤/上衣 1 Trouser 裤子 2 Pullover 套头衫 3 Dress 连衣裙 4 Coat 外套 5 Sandal 凉鞋 6 Shirt 衬衫 7 Sneaker 运动鞋 8 Bag 背包 9 Ankle boot 短靴 ( x_train , y_train ), ( x_test , y_test ) = fashion_mnist . load_data () x_train, x_test: uint8 数组表示的灰度图像，尺寸为 (num_samples, 28, 28) 。 y_train, y_test: uint8 数组表示的数字标签（范围在 0-9 之间的整数），尺寸为 (num_samples,) 。 print ( \"x_train.shape: ( %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d ,)\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d \" % x_test . shape ) print ( \"y_test.shape : ( %d ,)\" % y_test . shape ) x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28 y_test.shape : (10000,) mnist_plot_img ( x_train [ 100 ])","text_tokens":["一个","文章","shirt","pullover","4","000","数据","%","的","top","与","每个","都","samples","10","凉鞋","img","d","10000","9","短靴","_","之间","t恤","plot","，","图像","范围","标签","2","相关","为","0","外套","上衣","6","bag","\"","关联","训练","8","print","-","是",")","：","数组","/","相关联","连衣","）","5",":","sandal","60000","[","100","集","运动","ankle","类别","连衣裙","t","7","dress","来自","图片","3",",","描述","train","28","运动鞋","(","和","]","boot","裤子","fashion","coat","衬衫","衣裙","load","测试","num","灰度","=","个","x","整数","在","包含","test","套头","尺寸","y","。","数字","60","data","（","中文","shape","mnist","套头衫","1","uint8","背包",".","示例","trouser"," ","sneaker","28x28","zalando","表示"],"title":"fashion_mnist 图像分类数据集","title_tokens":["_","集"," ","数据","分类","fashion","图像","mnist"]},{"location":"tensorflowb笔记/12.1.keras数据集.html#reuters","text":"数据集来源于路透社的 11,228 条新闻文本，总共分为 46 个主题。与 IMDB 数据集一样，每条新闻都被编码为一个词索引的序列。 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data ( path = \"reuters.npz\" , num_words = None , skip_top = 0 , maxlen = None , test_split = 0.2 , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) 规格与 IMDB 数据集的规格相同，但增加了 test_split 参数。 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data () x_train.shape: (8982,) y_train.shape: (8982,) x_test.shape : (2246,) y_test.shape : (2246,) word_index = reuters . get_word_index","text_tokens":["总共","一个","数据","的","top","与","相同","word","都","被","文本","words","_","增加","npz","，","了","8982","为","2","路透社","0","228","来源","\"","词","from","主题",")","规格","imdb","char","条",":","一样","集","来源于","path",",","train","3","split","参数","(","分为","每条","0.2","start","编码","load","新闻","11","seed","num","index","=","但","get","x","个","skip","索引","test","y","。","序列","46","源于","data","shape","maxlen","2246","1","reuters","113","none",".","oov"," ","路透"],"title":"reuters 路透社新闻主题分类数据集","title_tokens":["集"," ","reuters","路透社","新闻","数据","主题","分类","路透"]},{"location":"开发环境管理/5.1.conda笔记.html","text":"conda usage : conda - script . py [ - h ] [ - V ] command ... conda is a tool for managing and deploying applications , environments and packages . Options : positional arguments : command clean 删除未使用的包和缓存 。 config 修改 . condarc中的配置值 。 create Create a new conda environment from a list of specified packages . help Displays a list of available conda commands and their help strings . info 显示有关当前安装的conda的信息 。 init Initialize conda for shell interaction . [ Experimental ] install 把一个列表中包含的包安装到指定的conda环境 。 list 列出链接到某个conda环境的所有包名 。 remove 从指定的conda环境移除列表中包含的包 。 uninstall conda remove的别名 。 run 在 conda 环境中运行可执行文件 。 [ 实验 ] search Search for packages and display associated information . The input is a MatchSpec , a query language for conda packages . See examples below . update 将 conda 包更新为最新的兼容版本 。 upgrade conda update的别名 optional arguments : - h , -- help Show this help message and exit . - V , -- version Show the conda version number and exit . conda命令 conda info 该命令可以查看当前安装的 conda 的详细信息，包括 conda 版本、python 版本、软件包仓库地址、新建环境的存放路径等。 usage: conda-script.py info [ -h ] [ --json ] [ -v ] [ -q ] [ -a ] [ --base ] [ -e ] [ -s ] [ --unsafe-channels ] Display information about current conda install. Options: optional arguments: -h, --help Show this help message and exit. -a, --all 显示所有信息。 --base 基本显示 base 环境路径。 -e, --envs 列出所有已知的Conda环境。 -s, --system 列出环境变量。 --unsafe-channels Display list of channels with tokens exposed. Output, Prompt, and Flow Control Options: --json Report all output as json. Suitable for using conda programmatically. -v, --verbose Use once for info, twice for debug, three times for trace. -q, --quiet Do not display progress bar. conda create usage: conda-script.py create [ -h ] [ --clone ENV ] [ -n ENVIRONMENT | -p PATH ] [ -c CHANNEL ] [ --use-local ] [ --override-channels ] [ --repodata-fn REPODATA_FNS ] [ --strict-channel-priority ] [ --no-channel-priority ] [ --no-deps | --only-deps ] [ --no-pin ] [ --copy ] [ --no-shortcuts ] [ -C ] [ -k ] [ --offline ] [ -d ] [ --json ] [ -q ] [ -v ] [ -y ] [ --download-only ] [ --show-channel-urls ] [ --file FILE ] [ --no-default-packages ] [ --dev ] [ package_spec [ package_spec ... ]] Create a new conda environment from a list of specified packages. To use the created environment, use 'source activate envname' look in that directory first. This command requires either the -n NAME or -p PREFIX option. Options: positional arguments: package_spec Packages to install or update in the conda environment. optional arguments: -h, --help Show this help message and exit. --clone ENV 通过克隆其他环境来创建一个新环境， 'ENV' 可以是现有本地环境的路径（或名 称）。 --file FILE 从文件创建环境 ( 从给定的文件读入指定版本的包 ) 。可以传递重复的文件规范（例 如--file = file1 --file = file2）。 --dev Use ` sys.executable -m conda ` in wrapper scripts instead of CONDA_EXE This is mainly for use during tests where we test new conda source against old Python versions. Target Environment Specification: -n ENVIRONMENT, --name ENVIRONMENT Name of environment. -p PATH, --prefix PATH Full path to environment location ( i.e. prefix ) . Channel Customization: -c CHANNEL, --channel CHANNEL 用于搜索包的其他通道。这些 URL 按给定顺序搜索 ( 包括本地目录file:// ) 。然 后,搜索 .condarc 中的默认值或通道 ( 除非提供 --override-channels ) 。 您可以使用 \"defaults\" 获取 conda 的默认包。您还可以使用任何名称, .condarc的channel_alias值将预置。默认的channel_alias是 http://conda.anaconda.org/。 --use-local 使用本地构建的包。等同于 \"-c local\" 。 --override-channels 不在 default 或者 .condarc channels 中搜索. Requires --channel. --repodata-fn REPODATA_FNS Specify name of repodata on remote server. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is reduced in time scope. You may pass this flagmore than once. Leftmost entries are tried first, and the fallback torepodata.json is added for you automatically. Solver Mode Modifiers: --strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel. --no-channel-priority Package version takes precedence over channel priority. Overrides the value given by ` conda config --show channel_priority ` . --no-deps Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk. --only-deps Only install dependencies. --no-pin Ignore pinned file. --no-default-packages Ignore create_default_packages in the .condarc file. Package Linking and Install-time Options: --copy Install all packages using copies instead of hard- or soft-linking. --no-shortcuts Don 't install start menu shortcuts Networking Options: -C, --use-index-cache Use cache of channel index files, even if it has expired. -k, --insecure Allow conda to perform \"insecure\" SSL connections and transfers. Equivalent to setting ' ssl_verify ' to ' false '. --offline Offline mode. Don' t connect to the Internet. Output, Prompt, and Flow Control Options: -d, --dry-run Only display what would have been done . --json Report all output as json. Suitable for using conda programmatically. -q, --quiet Do not display progress bar. -v, --verbose Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE. -y, --yes Do not ask for confirmation. --download-only Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix. --show-channel-urls Show channel urls. Overrides the value given by ` conda config --show show_channel_urls ` . conda常用命令 查看信息 # 查看conda的信息 ## 该命令可以查看当前安装的 conda 的详细信息，包括 conda 版本、python 版本、软件包仓库地址、新建环境的存放路径等。 conda info # 查看conda版本信息 conda -V conda --version 环境管理 # 查看环境信息 ## 查看系统中安装的所有环境： ### 这两个命令都可以查看当前 conda 中已经创建的环境列表，处于激活状态的环境旁边会有一个*的字样。 conda env list conda info –-envs conda info -e ## 查看 Conda 环境系统信息： conda info –-system conda info –s ## 查看环境系统更加详细的信息： conda info –-all conda info –a # 进入指定环境 conda activate <env> # 推出环境 conda deactivate # 导出环境 ## 导出环境之前首先要进入该环境 conda list -e > package-list.txt conda list -e > package-list.yml ## 或者这样 ### 这会将当前环境中由 conda 管理的包和由 pip 安装的包同时导出到文件中，所以当根据文件创建环境时，无需重新安装 pip 的包。 conda env export –-name base –-file base_bunnies.yml # 创建环境 ## 新建一个名为 newenv 的环境，并指定新环境中的 python 版本为 3.6 创建出来的环境中只带有最基本的包 conda create --name newenv python = 3 .6 ## 也可以在创建环境时候，包含某些程序或者包 conda create --name newenv python = 3 .6 biopython ipython ## 通过克隆创建一个新环境 conda create –-name newenv –clone base ## 从文件创建环境 ### 如果是用 conda env export --name 导出的文件，则可用下列命令创建： conda env create -f package-list.yml ### 如果是用 conda list -e 导出的文件，则用如下方式创建： conda create –-name <env> –-file <deps file> # 更新环境 conda env update –-name <env> –file = <deps file> # 删除环境 ## 删除环境中指定的包： conda remove –-name <env> ipython biopython ## 彻底删除环境： conda env remove –name <env> 从指定路径安装环境 conda 创建出来的环境默认放在 /User/<yourname>/anaconda/env 目录下，你可以将其中的某个环境文件夹整体拷贝走，复制到另一台机器上，然后基于此文件夹创建环境。 包管理 conda list # 查看已经安装的包 conda update conda # 升级conda自身 conda search requests # 查询某个包 conda install requests # 安装新包 conda install -n base requests # 将包安装到指定环境 conda update --all # 更新所有包 conda update requests # 升级包 conda remove requests # 移除包 conda remove -n base requests # 从指定环境中移除包 conda 不提供检查可更新的包的命令，update 所有包时会有提示，列出所有可更新的包，并让用户确认是否全部更新。 为 anaconda 指定国内镜像源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes 使用 conda config --show channels 命令可以查看当前的源仓库地址。","text_tokens":["specs","n","scripts","克隆","create","alias","copy","全部","only","three","versions","higher","prior","通道","their","prompt","envs","信息","against","环境中运行","at","exit","from","solver","shortcuts","–","e","变量","set","字样","script","multiple","或名","：","中","scope","更加","txt","language","see","系统","该","would","[","new","usage","created","that","两个","这会","populated","行文","lead","message","例","takes","自身","新安","如果","兼容","列出","for","任何","运行","flagmore","suitable","包","3","have","quiet","applications","通过","upgrade","软件","an","solve","soft","和","pass","deps","fns","值","download","提供","pip","程序","tuna","back","your","start","带有","conda","一台","首先","缓存","list","包括","may","given","test","employ","实验","彻底","exe","deploying","链接","新","same","can","query","h","offline","件夹","not","q",".","option","on","ignore","*","这些","trace","number","时","新建","时候","run","torepodata","bar","show","旁边","information","matchspec","copies","默认","pinned","insecure","修改","可执行文件","机器","用户","搜索","只","别名","此","时会","用","，","this","更新","然后","为","执行","用于","whatever","customization","initialize","activate","location","as","into","除非","顺序搜索","requires","\"","arguments","ensure","下列","fallback","-","has","其中","已经","等","associated","it","所有","拷贝","存放","either","packages","interaction","progress","显示","verbose","repodata","mode","查询","如","后","allow","unlinking","复制到","有","检查","appears","pin","here","无需","biopython","environments","...","获取","tried","版本","remove","path","路径","install","命令","source","上","are","可","pkgs","deactivate","expired","处于","cn","给定","reduced","connections","之前","main","进入","will","a","below","url","让","本地","ipython","并","perform","override","behavior","wrapper","control","##","version","名为","某些","在","but","走","directory","report","help","programmatically","leftmost","broken","这样","cache","、","详细","ssl","已知","p","按","file2","出来","entries","environment","time","during"," ","strings","移除","提示","instead","等同于","shell","ask","一个","你","安装","现有","的","managing","export","方式","add","fn","system","tests","详细信息","会","flow","由","precedence","读入","_","当","地址","if","with","displays","文件创建","over","command","file1","default","bunnies","spec","envname","own","local","fall","6","specification","到","config","https","仓库","'","确认","是",")","使用","false","基本","internet","来","yml","同于","connect","commands","版本信息","optional","than","最","debug",":","json","传递","预置","目录","mainly","defaults","executable","指定","名称","当前","然","也","其他","v","还","done","顺序","confirmation","导出","equivalent","free","or","positional","重复","从","规范","output","可以","considered","by","we","look",",","caches","menu","升级包","tokens","重新","管理","files","(","to","yourname","tsinghua","dependencies","strict","unsafe","将","the","如下","setting","channels",">","current","f","整体","或","specified","change","old","您","and","常用命令","则","y","http","networking","ultimately","k","（","`","重新安装","推出","复制","下","file","3.6","python","环境变量","env","这","c","all","name","available","full","环境变","###","hard","condarc","info","所以","org","try","都","要","同时","in","m","transfers","文件","uninstall","dev","d","源","镜像","构建","base","py","查看","列表","状态","有关","twice","automatically","examples","been","某个","环境","do","is","激活状态","don","input","remote","anaconda","no","use","根据","tool","/","激活","user","升级","what","是否","using","）","priority","value","yes","i","specify","新包","t","used","first","satisfiable","once","删除","where","配置","--","创建","未","文件夹","options","urls","newenv","channel","even","lower","放在","display","prefix","]","不","另一台","be","<","clean","inconsistent","added","target","常用","最新","experimental","把","s","包名","|","等同","基于","index","=","about","默认值","risk","包含","或者","可用","。","exposed","verify","times","server","edu","软件包","update","modifiers","package","requests","linking","mirrors","overrides","search","#","dry","clone","of","init","称","sys","国内","you"],"title":"5.1.conda笔记","title_tokens":["笔记","conda",".","5.1"]},{"location":"开发环境管理/5.1.conda笔记.html#conda","text":"usage : conda - script . py [ - h ] [ - V ] command ... conda is a tool for managing and deploying applications , environments and packages . Options : positional arguments : command clean 删除未使用的包和缓存 。 config 修改 . condarc中的配置值 。 create Create a new conda environment from a list of specified packages . help Displays a list of available conda commands and their help strings . info 显示有关当前安装的conda的信息 。 init Initialize conda for shell interaction . [ Experimental ] install 把一个列表中包含的包安装到指定的conda环境 。 list 列出链接到某个conda环境的所有包名 。 remove 从指定的conda环境移除列表中包含的包 。 uninstall conda remove的别名 。 run 在 conda 环境中运行可执行文件 。 [ 实验 ] search Search for packages and display associated information . The input is a MatchSpec , a query language for conda packages . See examples below . update 将 conda 包更新为最新的兼容版本 。 upgrade conda update的别名 optional arguments : - h , -- help Show this help message and exit . - V , -- version Show the conda version number and exit .","text_tokens":["一个","number","安装","run","condarc","create","的","info","managing","show","information","matchspec","文件","修改","uninstall","可执行文件","their","别名","displays","py","command","信息","列表","this","更新","为","有关","环境中运行","执行","initialize","examples","exit","某个","环境","arguments","from","is","到","config","input","-","script","使用","中","language","see","associated","tool","所有","commands","packages","optional","interaction",":","显示","[","new","usage","指定","当前","v","environments","positional","行文","从","message","...","版本","兼容","列出","删除","for","配置","remove","--","运行","未","包",",","install","options","applications","upgrade","和","display","]","clean","值","将","the","a","below","最新","experimental","把","包名","conda","version","缓存","list","specified","在","包含","and","。","实验","help","deploying","update","链接","query","h","search","environment","of","available",".","init"," ","strings","移除","shell"],"title":"conda","title_tokens":["conda"]},{"location":"开发环境管理/5.1.conda笔记.html#conda_1","text":"","text_tokens":[],"title":"conda命令","title_tokens":["conda","命令"]},{"location":"开发环境管理/5.1.conda笔记.html#conda-info","text":"该命令可以查看当前安装的 conda 的详细信息，包括 conda 版本、python 版本、软件包仓库地址、新建环境的存放路径等。 usage: conda-script.py info [ -h ] [ --json ] [ -v ] [ -q ] [ -a ] [ --base ] [ -e ] [ -s ] [ --unsafe-channels ] Display information about current conda install. Options: optional arguments: -h, --help Show this help message and exit. -a, --all 显示所有信息。 --base 基本显示 base 环境路径。 -e, --envs 列出所有已知的Conda环境。 -s, --system 列出环境变量。 --unsafe-channels Display list of channels with tokens exposed. Output, Prompt, and Flow Control Options: --json Report all output as json. Suitable for using conda programmatically. -v, --verbose Use once for info, twice for debug, three times for trace. -q, --quiet Do not display progress bar.","text_tokens":["新建","安装","的","info","bar","show","three","information","system","详细信息","prompt","flow","地址","base","with","envs","查看","py","，","信息","this","twice","exit","as","环境","do","arguments","仓库","e","变量","-","script","基本","use","等","所有","存放","optional","using","该","debug","progress",":","显示","verbose","json","[","usage","当前","v","message","版本","once","列出","output","可以","--","for","路径","install","命令",",","suitable","options","quiet","tokens","软件","display","]","unsafe","a","channels","s","current","conda","control","list","about","包括","and","。","exposed","report","times","help","programmatically","软件包","、","详细","h","已知","python","环境变量","all","of","not","q","."," ","环境变","trace"],"title":"conda info","title_tokens":["conda"," ","info"]},{"location":"开发环境管理/5.1.conda笔记.html#conda-create","text":"usage: conda-script.py create [ -h ] [ --clone ENV ] [ -n ENVIRONMENT | -p PATH ] [ -c CHANNEL ] [ --use-local ] [ --override-channels ] [ --repodata-fn REPODATA_FNS ] [ --strict-channel-priority ] [ --no-channel-priority ] [ --no-deps | --only-deps ] [ --no-pin ] [ --copy ] [ --no-shortcuts ] [ -C ] [ -k ] [ --offline ] [ -d ] [ --json ] [ -q ] [ -v ] [ -y ] [ --download-only ] [ --show-channel-urls ] [ --file FILE ] [ --no-default-packages ] [ --dev ] [ package_spec [ package_spec ... ]] Create a new conda environment from a list of specified packages. To use the created environment, use 'source activate envname' look in that directory first. This command requires either the -n NAME or -p PREFIX option. Options: positional arguments: package_spec Packages to install or update in the conda environment. optional arguments: -h, --help Show this help message and exit. --clone ENV 通过克隆其他环境来创建一个新环境， 'ENV' 可以是现有本地环境的路径（或名 称）。 --file FILE 从文件创建环境 ( 从给定的文件读入指定版本的包 ) 。可以传递重复的文件规范（例 如--file = file1 --file = file2）。 --dev Use ` sys.executable -m conda ` in wrapper scripts instead of CONDA_EXE This is mainly for use during tests where we test new conda source against old Python versions. Target Environment Specification: -n ENVIRONMENT, --name ENVIRONMENT Name of environment. -p PATH, --prefix PATH Full path to environment location ( i.e. prefix ) . Channel Customization: -c CHANNEL, --channel CHANNEL 用于搜索包的其他通道。这些 URL 按给定顺序搜索 ( 包括本地目录file:// ) 。然 后,搜索 .condarc 中的默认值或通道 ( 除非提供 --override-channels ) 。 您可以使用 \"defaults\" 获取 conda 的默认包。您还可以使用任何名称, .condarc的channel_alias值将预置。默认的channel_alias是 http://conda.anaconda.org/。 --use-local 使用本地构建的包。等同于 \"-c local\" 。 --override-channels 不在 default 或者 .condarc channels 中搜索. Requires --channel. --repodata-fn REPODATA_FNS Specify name of repodata on remote server. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is reduced in time scope. You may pass this flagmore than once. Leftmost entries are tried first, and the fallback torepodata.json is added for you automatically. Solver Mode Modifiers: --strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel. --no-channel-priority Package version takes precedence over channel priority. Overrides the value given by ` conda config --show channel_priority ` . --no-deps Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk. --only-deps Only install dependencies. --no-pin Ignore pinned file. --no-default-packages Ignore create_default_packages in the .condarc file. Package Linking and Install-time Options: --copy Install all packages using copies instead of hard- or soft-linking. --no-shortcuts Don 't install start menu shortcuts Networking Options: -C, --use-index-cache Use cache of channel index files, even if it has expired. -k, --insecure Allow conda to perform \"insecure\" SSL connections and transfers. Equivalent to setting ' ssl_verify ' to ' false '. --offline Offline mode. Don' t connect to the Internet. Output, Prompt, and Flow Control Options: -d, --dry-run Only display what would have been done . --json Report all output as json. Suitable for using conda programmatically. -q, --quiet Do not display progress bar. -v, --verbose Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE. -y, --yes Do not ask for confirmation. --download-only Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix. --show-channel-urls Show channel urls. Overrides the value given by ` conda config --show show_channel_urls ` .","text_tokens":["specs","n","scripts","克隆","create","alias","copy","only","three","versions","higher","prior","通道","prompt","against","at","exit","from","solver","shortcuts","e","script","multiple","或名","中","scope","would","[","new","usage","created","that","populated","lead","message","例","takes","for","任何","flagmore","suitable","包","have","通过","quiet","an","solve","soft","pass","deps","fns","download","提供","值","back","your","start","conda","list","包括","may","given","test","employ","exe","新","same","can","h","offline","not","q",".","option","on","ignore","这些","trace","run","torepodata","bar","show","copies","默认","pinned","insecure","搜索","，","this","用于","whatever","customization","activate","location","as","into","除非","顺序搜索","requires","\"","arguments","ensure","fallback","-","has","it","either","packages","repodata","progress","verbose","mode","如","后","allow","unlinking","appears","pin","here","environments","...","获取","tried","版本","remove","path","source","install","路径","are","expired","给定","reduced","connections","will","a","url","本地","perform","override","behavior","wrapper","control","version","在","but","directory","report","help","programmatically","leftmost","broken","cache","ssl","p","按","file2","entries","environment","time","during"," ","instead","等同于","ask","一个","现有","的","fn","tests","flow","precedence","读入","_","if","with","文件创建","over","command","file1","default","spec","envname","own","local","fall","specification","config","'","是",")","使用","false","internet","来","同于","connect","optional","than","debug",":","json","传递","预置","目录","mainly","defaults","executable","指定","名称","然","其他","v","还","done","顺序","confirmation","equivalent","or","positional","重复","从","规范","output","considered","可以","by","we","look",",","caches","menu","files","(","to","dependencies","strict","将","the","setting","channels","或","specified","change","old","您","and","y","http","networking","ultimately","k","（","`","file","python","env","c","all","name","full","hard","condarc","info","org","try","in","m","transfers","文件","dev","d","构建","py","twice","automatically","been","环境","do","is","don","remote","anaconda","no","use","/","what","）","using","priority","value","yes","i","specify","t","used","first","satisfiable","once","--","where","创建","options","urls","channel","even","lower","prefix","不","]","display","be","inconsistent","added","target","|","等同","index","=","默认值","risk","或者","。","verify","server","times","update","modifiers","package","linking","overrides","dry","clone","of","称","sys","you"],"title":"conda create","title_tokens":["create","conda"," "]},{"location":"开发环境管理/5.1.conda笔记.html#conda_2","text":"","text_tokens":[],"title":"conda常用命令","title_tokens":["常用","conda","常用命令","命令"]},{"location":"开发环境管理/5.1.conda笔记.html#_1","text":"# 查看conda的信息 ## 该命令可以查看当前安装的 conda 的详细信息，包括 conda 版本、python 版本、软件包仓库地址、新建环境的存放路径等。 conda info # 查看conda版本信息 conda -V conda --version","text_tokens":["新建","环境","安装","版本","仓库","可以","--","的","info","路径","-","命令","。","等","软件","软件包","详细信息","版本信息","存放","、","详细","该","地址","查看","python","#","，","信息","当前"," ","v","conda","##","version","包括"],"title":"查看信息","title_tokens":["信息","查看"]},{"location":"开发环境管理/5.1.conda笔记.html#_2","text":"# 查看环境信息 ## 查看系统中安装的所有环境： ### 这两个命令都可以查看当前 conda 中已经创建的环境列表，处于激活状态的环境旁边会有一个*的字样。 conda env list conda info –-envs conda info -e ## 查看 Conda 环境系统信息： conda info –-system conda info –s ## 查看环境系统更加详细的信息： conda info –-all conda info –a # 进入指定环境 conda activate <env> # 推出环境 conda deactivate # 导出环境 ## 导出环境之前首先要进入该环境 conda list -e > package-list.txt conda list -e > package-list.yml ## 或者这样 ### 这会将当前环境中由 conda 管理的包和由 pip 安装的包同时导出到文件中，所以当根据文件创建环境时，无需重新安装 pip 的包。 conda env export –-name base –-file base_bunnies.yml # 创建环境 ## 新建一个名为 newenv 的环境，并指定新环境中的 python 版本为 3.6 创建出来的环境中只带有最基本的包 conda create --name newenv python = 3 .6 ## 也可以在创建环境时候，包含某些程序或者包 conda create --name newenv python = 3 .6 biopython ipython ## 通过克隆创建一个新环境 conda create –-name newenv –clone base ## 从文件创建环境 ### 如果是用 conda env export --name 导出的文件，则可用下列命令创建： conda env create -f package-list.yml ### 如果是用 conda list -e 导出的文件，则用如下方式创建： conda create –-name <env> –-file <deps file> # 更新环境 conda env update –-name <env> –file = <deps file> # 删除环境 ## 删除环境中指定的包： conda remove –-name <env> ipython biopython ## 彻底删除环境： conda env remove –name <env>","text_tokens":["一个","时","新建","时候","安装","克隆","create","的","info","所以","旁边","export","方式","都","要","同时","system","文件","会","由","只","_","当","base","用","envs","文件创建","查看","信息","列表","，","更新","状态","为","bunnies","activate","6","环境","激活状态","到","下列","–","e","-","是","字样","已经","：","中","txt","更加","基本","yml","根据","所有","激活","系统","最","该","两个","指定","当前","这会","也","有","导出","无需","biopython","从","新安","如果","版本","删除","可以","--","remove","创建","命令","包","3","newenv","通过","重新","管理","和","deactivate","<","deps","处于","之前","将","进入","如下","pip","程序","a","ipython","s","并",">","f","带有","conda","##","首先","名为","list","=","某些","在","包含","或者","则","可用","。","彻底","update","重新安装","package","新","这样","推出","详细","file","3.6","出来","python","#","这","env","clone","all","name","."," ","*","###"],"title":"环境管理","title_tokens":["管理","环境"]},{"location":"开发环境管理/5.1.conda笔记.html#_3","text":"conda 创建出来的环境默认放在 /User/<yourname>/anaconda/env 目录下，你可以将其中的某个环境文件夹整体拷贝走，复制到另一台机器上，然后基于此文件夹创建环境。","text_tokens":["某个","环境","你","可以","走","的","创建","anaconda","上","文件夹","其中","。","默认","文件","/","user","拷贝","放在","yourname","机器","另一台","<","复制","此","下","将","目录","出来","env","，","件夹",">","然后","复制到"," ","conda","整体","基于","一台"],"title":"从指定路径安装环境","title_tokens":["环境","安装","路径","从","指定"]},{"location":"开发环境管理/5.1.conda笔记.html#_4","text":"conda list # 查看已经安装的包 conda update conda # 升级conda自身 conda search requests # 查询某个包 conda install requests # 安装新包 conda install -n base requests # 将包安装到指定环境 conda update --all # 更新所有包 conda update requests # 升级包 conda remove requests # 移除包 conda remove -n base requests # 从指定环境中移除包 conda 不提供检查可更新的包的命令，update 所有包时会有提示，列出所有可更新的包，并让用户确认是否全部更新。","text_tokens":["某个","n","环境","安装","到","列出","--","remove","的","确认","-","install","包","命令","从","全部","。","已经","中","升级包","可","所有","update","升级","不","用户","requests","是否","提供","将","时会","base","查看","查询","search","#","，","让","all","指定","更新","并","有","检查"," ","新包","conda","移除","提示","list","自身"],"title":"包管理","title_tokens":["管理","包"]},{"location":"开发环境管理/5.1.conda笔记.html#anaconda","text":"conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes 使用 conda config --show channels 命令可以查看当前的源仓库地址。","text_tokens":["https","config","仓库","--","可以","的","set","anaconda","命令","add","show","使用","。","urls","edu","channel","/","pkgs","tsinghua","源","cn","mirrors","_",":","main","地址","查看","tuna","channels","当前","yes","."," ","conda","free"],"title":"为 anaconda 指定国内镜像源","title_tokens":["为","镜像"," ","国内","anaconda","源","指定"]},{"location":"开发环境管理/5.3.pip对比conda.html","text":"了解conda and pip的异同 本文翻译自 Understanding Conda and Pip ( Jonathan Helmus )。 Conda和pip这两个工具有一些重叠的功能，因此它们常常被认为是没什么区别的，但实际上它们被设计用于不同的目的。 pip 是Python Packaging Authority 推荐的从 Python Package Index (PyPI)安装包的工具。 pip可以安装打包为wheels格式的包，或者直接从源代码编译安装。从源代码文件安装可能需要系统安装兼容的编译器和相应的库 1 。 Conda 是跨平台的包和环境管理器，可以安装和管理来自 Anaconda repository 和 Anaconda Cloud 的conda包。Conda包是二进制文件，不需要使用编译器来安装。另外，conda包不限于Python包，还可以包含C或C++ 库、R包或任何其他软件。 这是conda和pip的关键区别。pip只能安装Python包，而conda安装的包可以是用任何语言编写的。例如，在使用pip之前，必须通过”系统程序管理器“或”下载并运行安装程序“来安装Python解释器，而Conda可以直接安装Python包和Python解释器。 这两个工具的另一个显著区别是conda可以为不同版本的python或package创建隔离的环境。这在使用数据科学工具时非常有用，因为不同的工具可能包含冲突的依赖，这可能会导致它们不适合安装到相同的环境中。pip没有内置的环境管理功能，而是依赖于 virtualenv 或 venv 等其他工具来创建隔离环境。 pipenv、poetry、hatch wrap pip、virtualenv等工具提供了统一的方法来创建单独的环境。 pip和conda在如何实现环境中的依赖关系方面也有所不同。安装包时，pip会在递归的串行循环中安装依赖项，没有努力确保同时满足所有包的依赖性。如果较早安装的包与稍后安装的包具有不兼容的依赖，环境就会被破坏。相反的，conda使用一个satisfiability (SAT)的处理程序去检查环境中的所有包的依赖是否都得到满足。此检查可能需要额外的时间，但可以防止创建一个被破坏的环境。只要包含依赖关系的package metadata是正确的，conda就可以创建有效的环境。 考虑到conda和pip之间的相似性，有些人试图将这些工具结合起来创建数据科学环境也就不足为奇了。将pip与conda结合的主要原因是有些包只能通过pip安装。在Anaconda repository中有1500多个包可用，其中涵盖了最流行的数据科学、机器学习和AI框架。另外，在conda-forge和bioconda的channel还有数以千计的包可以使用conda安装。尽管Anaconda cloud有大量的包，但与PyPI上可提供的150,000多个包相比，数量仍然很少。有时候需要的包没有相应的conda包，但在PyPI上有安装文件，则可以用pip安装。 补充 conda 安装包路径是 \\Anaconda3\\pkgs pip 安装包路径在虚拟环境下是 \\Anaconda3\\envs\\Lib\\site-packages pip可能会生成存在冲突的环境，而conda不会 pip与conda不会重复安装已经安装的依赖 pip安装的包不会显示在anaconda navigation的环境中 conda 为多个环境安装包时，对于同一个包只安装一次，由conda集中管理 pip 为多个环境安装包时，因为每个环境安装包使用的pip在不同的路径下，因此会重复安装 关于Python包管理工具的发展历史可以参考 Python's New Package Landscape (andrew)，其中文翻译版本 在这 。插图来自https://www.xkcd.com/1987/。 编译器和库用于编译源代码。 ↩","text_tokens":["一个","时","时候","自","安装","赖于","pypi","cloud","000","数据","的","冲突","与","每个","understanding","相同","www","常常","源代码","都","同时","很少","隔离","\\","lib","不会","jonathan","代码","文件","有所不同","区别","被","”","限于","导致","原因","机器","只能","r","实现","会","设计","仍然","由","稍后","此","之间","它们","venv","早","包是","用","需要","metadata","虚拟环境","envs","1500","forge","，","打包","历史","有时候","了","为","repository","用于","而","pipenv","努力","例如","关于","xkcd","处理","没有","推荐","内置","大量","packaging","实际","对于","环境","满足","1987","到","https","'","“","anaconda","-",")","是","认为","其中","使用","流行","已经","目的","中","编译","来","helmus","等","工具","防止","同一个","andrew","平台","所有","/","另外","系统","单独","相反","只要","可能","packages","涵盖","是否","虚拟","最","路径","关键","数量","本文","这是","显示","库","显著",":","依赖","new","插图","一次","包只","较","科学","两个","其他软件","一些","也","有","因为","检查","解释","其他","如何","还","site","c++","循环","适合","还有","sat","重复","从","有时","中文翻译","来自","什么","版本","如果","兼容","可以","其","任何","运行","创建","上","包","安装包",",","去","了解","方面","下载","安装文件","跨平台","发展","authority","依赖性","通过","集中管理","channel","格式","可","管理","软件","有效","得到","这些","框架","人","相似性","依赖于","(","和","不","相似","pkgs","结合","理器","↩","anaconda3","功能","之前","进制","释器","而是","提供","有些","将","wheels","不足","pip","管理器","程序","不足为奇","存在","破坏","com","具有","同一","hatch","s","并","关系","conda","没什么","集中","递归","index","navigation","但","必须","因此","或","在","包含","管理工具","就","处理程序","and","编写","编译器","考虑","中有","或者","另","可用","则","landscape","。","相应","有所","virtualenv","翻译","统一","起来","相比","异同","wrap","学习","poetry","包不","正确","ai","二进制","中文","主要","package","直接","、","安装程序","解释器","尽管","实际上","非常","satisfiability","串行","额外","1","下","不同","理工","多个","数以千计","python","这","c","时间","bioconda","确保","补充",".","语言","试图","方法"," ","重叠","参考","150","生成","项","有用"],"title":"5.3.pip对比conda","title_tokens":[".","对比","5.3","pip","conda"]},{"location":"开发环境管理/5.3.pip对比conda.html#conda-and-pip","text":"本文翻译自 Understanding Conda and Pip ( Jonathan Helmus )。 Conda和pip这两个工具有一些重叠的功能，因此它们常常被认为是没什么区别的，但实际上它们被设计用于不同的目的。 pip 是Python Packaging Authority 推荐的从 Python Package Index (PyPI)安装包的工具。 pip可以安装打包为wheels格式的包，或者直接从源代码编译安装。从源代码文件安装可能需要系统安装兼容的编译器和相应的库 1 。 Conda 是跨平台的包和环境管理器，可以安装和管理来自 Anaconda repository 和 Anaconda Cloud 的conda包。Conda包是二进制文件，不需要使用编译器来安装。另外，conda包不限于Python包，还可以包含C或C++ 库、R包或任何其他软件。 这是conda和pip的关键区别。pip只能安装Python包，而conda安装的包可以是用任何语言编写的。例如，在使用pip之前，必须通过”系统程序管理器“或”下载并运行安装程序“来安装Python解释器，而Conda可以直接安装Python包和Python解释器。 这两个工具的另一个显著区别是conda可以为不同版本的python或package创建隔离的环境。这在使用数据科学工具时非常有用，因为不同的工具可能包含冲突的依赖，这可能会导致它们不适合安装到相同的环境中。pip没有内置的环境管理功能，而是依赖于 virtualenv 或 venv 等其他工具来创建隔离环境。 pipenv、poetry、hatch wrap pip、virtualenv等工具提供了统一的方法来创建单独的环境。 pip和conda在如何实现环境中的依赖关系方面也有所不同。安装包时，pip会在递归的串行循环中安装依赖项，没有努力确保同时满足所有包的依赖性。如果较早安装的包与稍后安装的包具有不兼容的依赖，环境就会被破坏。相反的，conda使用一个satisfiability (SAT)的处理程序去检查环境中的所有包的依赖是否都得到满足。此检查可能需要额外的时间，但可以防止创建一个被破坏的环境。只要包含依赖关系的package metadata是正确的，conda就可以创建有效的环境。 考虑到conda和pip之间的相似性，有些人试图将这些工具结合起来创建数据科学环境也就不足为奇了。将pip与conda结合的主要原因是有些包只能通过pip安装。在Anaconda repository中有1500多个包可用，其中涵盖了最流行的数据科学、机器学习和AI框架。另外，在conda-forge和bioconda的channel还有数以千计的包可以使用conda安装。尽管Anaconda cloud有大量的包，但与PyPI上可提供的150,000多个包相比，数量仍然很少。有时候需要的包没有相应的conda包，但在PyPI上有安装文件，则可以用pip安装。","text_tokens":["一个","时","时候","自","安装","赖于","pypi","cloud","000","数据","的","冲突","与","understanding","相同","常常","源代码","都","同时","很少","隔离","jonathan","代码","文件","有所不同","区别","被","”","限于","导致","原因","机器","只能","r","实现","会","设计","仍然","稍后","此","之间","它们","venv","早","包是","用","需要","metadata","1500","forge","，","打包","有时候","了","为","repository","用于","而","pipenv","努力","例如","处理","没有","推荐","内置","大量","packaging","实际","环境","满足","到","“","anaconda","-",")","是","认为","其中","使用","流行","目的","中","编译","来","helmus","等","工具","防止","平台","所有","另外","系统","单独","相反","只要","可能","涵盖","是否","最","关键","数量","本文","这是","库","显著","依赖","较","科学","两个","其他软件","一些","也","有","因为","检查","解释","其他","如何","还","c++","循环","适合","还有","sat","从","有时","来自","什么","版本","如果","兼容","可以","任何","运行","创建","上","包","安装包",",","去","安装文件","方面","下载","跨平台","authority","依赖性","通过","channel","格式","可","管理","软件","有效","得到","这些","框架","人","相似性","依赖于","(","和","不","相似","结合","理器","功能","之前","进制","释器","而是","提供","有些","将","wheels","不足","pip","管理器","程序","不足为奇","破坏","具有","hatch","并","关系","conda","没什么","递归","index","但","必须","因此","或","在","包含","就","处理程序","and","编写","编译器","考虑","中有","或者","另","可用","则","。","相应","有所","virtualenv","翻译","统一","起来","相比","wrap","学习","poetry","包不","正确","ai","二进制","主要","package","直接","、","安装程序","解释器","尽管","实际上","非常","satisfiability","串行","额外","1","不同","多个","数以千计","python","这","c","时间","bioconda","确保","语言","试图","方法"," ","重叠","150","项","有用"],"title":"了解conda and pip的异同","title_tokens":["异同"," ","and","pip","conda","的","了解"]},{"location":"开发环境管理/5.3.pip对比conda.html#_1","text":"conda 安装包路径是 \\Anaconda3\\pkgs pip 安装包路径在虚拟环境下是 \\Anaconda3\\envs\\Lib\\site-packages pip可能会生成存在冲突的环境，而conda不会 pip与conda不会重复安装已经安装的依赖 pip安装的包不会显示在anaconda navigation的环境中 conda 为多个环境安装包时，对于同一个包只安装一次，由conda集中管理 pip 为多个环境安装包时，因为每个环境安装包使用的pip在不同的路径下，因此会重复安装 关于Python包管理工具的发展历史可以参考 Python's New Package Landscape (andrew)，其中文翻译版本 在这 。插图来自https://www.xkcd.com/1987/。 编译器和库用于编译源代码。 ↩","text_tokens":["一个","时","安装","的","冲突","与","每个","www","源代码","lib","\\","不会","代码","会","由","虚拟环境","envs","，","历史","为","而","xkcd","用于","关于","对于","环境","1987","https","'","-","anaconda","是",")","使用","已经","中","andrew","同一个","编译","工具","/","packages","可能","虚拟","显示",":","库","依赖","new","插图","一次","包只","因为","site","重复","中文翻译","来自","版本","可以","其","路径","包","安装包","↩","发展","集中管理","管理","(","和","pkgs","anaconda3","com","pip","存在","同一","s","conda","集中","navigation","因此","在","管理工具","编译器","landscape","。","翻译","中文","package","下","不同","理工","多个","python","这","."," ","参考","生成"],"title":"补充","title_tokens":["补充"]},{"location":"开发环境管理/5.4.anaconda.html","text":"Anaconda下各个文件夹作用 anacoda3/conda-meta/history ：记录用户使用conda命令安装、卸载、升级包的操作 anaconda3/pkgs/urls.txt ：记录用户使用conda命令下载包的地址，直接复制地址到浏览器中也可以下载 anaconda3/conda-meta/ ：文件夹里保存着与各个包同名的.json文件（有些包会有多个.json文件），这些json文件会记录对应的包的版本、存放位置、md5值等信息 anaconda3/pkgs/ ：这个文件夹里存放了每个包刚下载来的文件，格式是.tar.gz2，另外也会自动解压到这个文件夹里。比如你下载了six这个包，anaconda3/pkgs/这个文件夹里会多出如下2个文件。另外，当你卸载包的时候，这里的2个文件是不会被删除的 anaconda3/lib/python3.6/site-packages/ ：包的存放目录 anaconda3/bin ：安装一些包的时候会往里添加一些可执行文件 anaconda3/lib ：安装一些包的时候会往里添加一些.so文件 anaconda3/include ：安装一些包的时候会往里添加了一些文件 anaconda3/man ：安装一些包的时候会往里里添加了一些文件 anaconda3/share ：安装一些包的时候会往里里添加了一些文件","text_tokens":["时候","你","安装","会往","的","与","每个","lib","不会","文件","被","可执行文件","用户","包会","会","当","地址","anacoda3","，","信息","浏览","了","2","执行","里会","添加","到","anaconda","-","是","使用","：","txt","中","gz2","记录","等","来","/","另外","升级","存放","packages","）","操作","作用","json","目录","比如","share","md5","也","一些","有","site","解压","行文","版本","各个","删除","可以","浏览器","命令","文件夹","包","下载","urls","包刚","升级包","格式","对应","pkgs","anaconda3","meta","bin","值","tar","有些","如下","so","conda","这里","个","include","man","python3.6","。","多出","同名","自动","（","直接","、","里","复制","卸载","下","这个","保存","six","着","多个","history","件夹","."," ","这些","位置"],"title":"5.4.anaconda","title_tokens":["5.4","anaconda","."]},{"location":"开发环境管理/5.4.anaconda.html#anaconda","text":"anacoda3/conda-meta/history ：记录用户使用conda命令安装、卸载、升级包的操作 anaconda3/pkgs/urls.txt ：记录用户使用conda命令下载包的地址，直接复制地址到浏览器中也可以下载 anaconda3/conda-meta/ ：文件夹里保存着与各个包同名的.json文件（有些包会有多个.json文件），这些json文件会记录对应的包的版本、存放位置、md5值等信息 anaconda3/pkgs/ ：这个文件夹里存放了每个包刚下载来的文件，格式是.tar.gz2，另外也会自动解压到这个文件夹里。比如你下载了six这个包，anaconda3/pkgs/这个文件夹里会多出如下2个文件。另外，当你卸载包的时候，这里的2个文件是不会被删除的 anaconda3/lib/python3.6/site-packages/ ：包的存放目录 anaconda3/bin ：安装一些包的时候会往里添加一些可执行文件 anaconda3/lib ：安装一些包的时候会往里添加一些.so文件 anaconda3/include ：安装一些包的时候会往里添加了一些文件 anaconda3/man ：安装一些包的时候会往里里添加了一些文件 anaconda3/share ：安装一些包的时候会往里里添加了一些文件","text_tokens":["时候","你","安装","会往","的","与","每个","lib","不会","文件","被","可执行文件","用户","包会","会","当","地址","anacoda3","，","信息","浏览","了","2","执行","里会","添加","到","-","是","使用","：","txt","中","gz2","记录","等","来","/","另外","升级","存放","packages","）","操作","json","目录","比如","share","md5","也","一些","有","site","解压","行文","版本","各个","删除","可以","浏览器","命令","包","文件夹","下载","urls","包刚","升级包","格式","对应","pkgs","anaconda3","meta","bin","值","tar","有些","如下","so","conda","这里","个","include","man","python3.6","。","多出","同名","自动","（","直接","、","里","复制","卸载","这个","保存","six","着","多个","history","件夹","."," ","这些","位置"],"title":"Anaconda下各个文件夹作用","title_tokens":["件夹","下","各个","作用","文件","anaconda","文件夹"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html","text":"让代码窗口输出全部结果 将此代码放置在jupyter单元中： from IPython.core.interactiveshell import InteractiveShell InteractiveShell . ast_node_interactivity = \"all\" 修改全局设置 在Windows中，以下步骤会使更改永久生效。应该适用于其他操作系统。您可能必须更改路径。 C:\\Users\\your_profile\\\\.ipython\\profile_default 做一个ipython_config.py文件与下面的代码profile_defaults： c = get_config () c . InteractiveShell . ast_node_interactivity = \"all\" 使用 print 函数 快捷键使用指南 Jupyter Notebook 有两种键盘输入模式。即命令模式和编辑模式，这与 Vim 有些类似。在编辑模式下，可以往cell中键入代码或文本，此时命令模式下的快捷键不生效。在命令模式下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，此时编辑模式下的快捷键不生效。 从命令模式进入编辑模式需按 Enter 键，从编辑模式切换到命令模式需按 Esc 键。 以下两表分别是对命令和编辑两种模式下快捷键的简单说明： 命令模式快捷键（按 Esc 键开启）: 快捷键 作用 说明 Enter 转入编辑模式 Shift-Enter 运行本单元，选中下个单元 新单元默认为命令模式 Ctrl-Enter 运行本单元 Alt-Enter 运行本单元，在其下插入新单元 新单元默认为编辑模式 Y 单元转入代码状态 M 单元转入 markdown 状态 R 单元转入 raw 状态 1 设定 1 级标题 仅在 markdown 状态下时建议使用标题相关快捷键，如果单元处于其他状态，则会强制切换到 markdown 状态 2 设定 2 级标题 3 设定 3 级标题 4 设定 4 级标题 5 设定 5 级标题 6 设定 6 级标题 Up 选中上方单元 K 选中上方单元 Down 选中下方单元 J 选中下方单元 Shift-K 连续选择上方单元 Shift-J 连续选择下方单元 A 在上方插入新单元 B 在下方插入新单元 X 剪切选中的单元 C 复制选中的单元 Shift-V 粘贴到上方单元 V 粘贴到下方单元 Z 恢复删除的最后一个单元 D,D 删除选中的单元 连续按两个 D 键 Shift-M 合并选中的单元 Ctrl-S 保存当前 NoteBook S 保存当前 NoteBook L 开关行号 编辑框的行号是可以开启和关闭的 O 转换输出 Shift-O 转换输出滚动 Esc 关闭页面 Q 关闭页面 H 显示快捷键帮助 I,I 中断 NoteBook 内核 0,0 重启 NoteBook 内核 Shift 忽略 Shift-Space 向上滚动 Space 向下滚动 编辑模式快捷键（ 按 Enter 键启动）: 快捷键 作用 说明 Tab 代码补全或缩进 Shift-Tab 提示 输出帮助信息，部分函数、类、方法等会显示其定义原型，如果在其后加 ? 再运行会显示更加详细的帮助 Ctrl-] 缩进 向右缩进 Ctrl-[ 解除缩进 向左缩进 Ctrl-A 全选 Ctrl-Z 撤销 Ctrl-Shift-Z 重做 Ctrl-Y 重做 Ctrl-Home 跳到单元开头 Ctrl-Up 跳到单元开头 Ctrl-End 跳到单元末尾 Ctrl-Down 跳到单元末尾 Ctrl-Left 跳到左边一个字首 Ctrl-Right 跳到右边一个字首 Ctrl-Backspace 删除前面一个字 Ctrl-Delete 删除后面一个字 Esc 切换到命令模式 Ctrl-M 切换到命令模式 Shift-Enter 运行本单元，选中下一单元 新单元默认为命令模式 Ctrl-Enter 运行本单元 Alt-Enter 运行本单元，在下面插入一单元 新单元默认为编辑模式 Ctrl-Shift-- 分割单元 按光标所在行进行分割 Ctrl-Shift-Subtract 分割单元 Ctrl-S 保存当前 NoteBook Shift 忽略 Up 光标上移或转入上一单元 Down 光标下移或转入下一单元 Ctrl-/ 注释整行/撤销注释 仅代码状态有效 注： 如果快捷键被系统中的其它应用占用，则可能会失效 在任意目录下打开notebook 在该目录下：shift + 右键 👉 打开powershell，输入jupter notebook 自定义主题 通过 pip 安装 jupyterthemes package： # 安装 pip install jupyterthemes # 更新jupyterthemes pip install --upgrade jupyterthemes 安装好 jupyterthemes package之后，就可以在命令行输入 jupyterthemes 的命令： # 列出所有安装好的主题 jt -l # 使用帮助 jt -h 具体使用方法参见： jupyterthemes官方说明 安装扩展 安装 jupyter_contrib_nbextensions 包。该插件并不是jupyter notebook官方的插件。具体参考 Unofficial Jupyter Notebook Extensions 和 为Jupyter Notebook安装扩展并启用Configurator 。 # 安装 pip install jupyter_contrib_nbextensions # 或者通过conda安装 conda install -c conda-forge jupyter_contrib_nbextensions # 激活 jupyter contrib nbextension install --user # 启用 jupyter nbextensions_configurator enable --user 输出带有中文的pdf jupyter notebook本身不能输出pdf，输出pdf依赖于$\\LaTeX$引擎。目前，带有中文的ipynb文件输出为pdf会报错，主要原因是jupyter的$\\LaTeX$模板设置了$\\text{pdf}\\LaTeX$引擎，但是Pdf$\\LaTeX$不可以直接编译中文文档的。因此，需要把jupyter的$\\LaTeX$引擎改为$\\text{Xe}\\LaTeX$引擎。 修改模板，模板位置为：...\\site-packages\\nbconvert\\templates\\latex\\article.tplx，将latex模板类由article改为ctexart。 原来的代码： ((* block docclass *)) \\documentclass [11pt] { article } ((* endblock docclass *)) 修改后的代码： ((* block docclass *)) \\documentclass [13pt] { ctexart } ((* endblock docclass *)) 或者，依然使用PdfLatex引擎，但引入xeCJK宏包： \\documentclass [11pt] { article } \\usepackage { xeCJK } % 如果设置mainfont，必须设置为已安装的中文字体，例如微软雅黑。 %\\setCJKmainfont{SourceHanSansCN-Light} 想要修改输出pdf的排版，则需要修改其预定义的latex排版模板，即base.tplx文件。例如可以在base.tplx加入如下代码控制输出的pdf的页边距。 \\geometry { a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm } 但是，可能改了jupyter的latex模板，jupyter notebook输出pdf依然报错。例如下面的报错信息： nbconvert failed: PDF creating failed, captured latex output: This is XeTeX, Version 3.14159265-2.6-0.99999 (TeX Live 2018/W32TeX) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode ! Undefined control sequence. <*> .\\notebook .tex ? ! Emergency stop. <*> .\\notebook .tex No pages of output. Transcript written on ?. 这是jupyter中控制调用latex引擎的脚本pdf.py有bug，位于66行。 原来的代码： writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '.' }) 正确的代码： writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '' }) 原来的代码给xelatex引擎发送了错误的文件路径： 错误的路径： xelatex .\\notebook.tex 正确的路径： xelatex notebook.tex 详细内容参考这里 Problem in Converting Jupyter notebook to pdf #144 。 版本控制 Save and CheckPoint 和 Revert to CheckPoint。","text_tokens":["右","0.99999","类","全部","位于","\\","连续","代码","解除","被","即","13pt","r","下面","converting","esc","字","转换","信息","creating","扩展","0","$","144","下方","失效","xetex","from","restricted","geometry","：","中","更加","编译","系统","markdown","右边","剪切","setcjkmainfont","该","5","行","这是","作用","mainfont","依赖","[","微软","两个","重做","?","site","如果","nbconvert","所在","列出","调用","运行","定义","包","3","通过","jupyterthemes","upgrade","有效","和","开头","有些","pip","docclass","build","放置","your","alt","需","import","带有","conda","bug","部分","往","extensions","做","启用","j","ctexart","xecjk","text","目前","tab","preloaded","应用","正确","主要","新","操作系统","h","左","b","错误","q",".","on","*","赖于","down","shift","home","article","pages","jupter","光标","左边","stop","默认","级","修改","任意","66","转入","emergency","此","编辑框","windows","用","切换","需要","，","补全","this","说明","更新","分别","为","单元","等等","l","距","插件","\"","开启","print","-","jt","之后","页","等","所有","sourcehansanscn","w32tex","+","packages","xelatex","操作","显示","mode","下个","后","tex","指南","jupyter","有","ipynb","改了","writer","revert","整行","其下","...","版本","undefined","路径","上","命令","install","enable","但是","编辑","sequence","加","内容","函数","分割","向下","撤销","窗口","处于","pdf","自定","2cm","键入","进入","注释","a","其后","让","ipython","👉","并","文字","仅","control","version","但","x","在","args","更改","directory","两种","checkpoint","}","应该","进行","、","delete","详细","适用","全选","保存","按","tplx","latex","下移","行号","页面"," ","参考","提示","up","位置","一个","自定义","安装","4","恢复","%","的","报错","extended","2.6","原因","原来","移动","帮助","会","设定","由","_","其它","注","default","enter","了","2","entering","core","跳","模板","例如","永久","内核","原型","6","引入","到","config","'",")","是","captured","使用","命令行","nbextensions","{","键盘","上移","使用指南","ast","templates",":","fileswriter","目录","light","defaults","标题","排版","3.14159265","当前","模式","其他","v","本身","从","profile","简单","右键","interactivity","中断","加入","好","output","write18","可以","官方","预定",",","space","bottom","written","一","不是","vim","强制","(","to","关闭","将","node","block","参见","如下","unofficial",">","宏包","backspace","nbextension","raw","这里","或","类似","您","and","后面","pdflatex","subtract","则","y","k","引擎","（","live","直接","下时","脚本","复制","生效","下","两表","这","c","选择","all","想要","format","方法","依然","向","粘贴","缩进","top","与","重启","全局","left","notebook","in","1cm","m","改为","文件","d","文本","控制","版本控制","于","base","py","forge","字首","documentclass","configurator","状态","users","中文字体","相关","failed","输入","末尾","is","建议","给","kw","主题","前面","no","enabled","再","/","激活","user","writers","endblock","可能","）","快捷","transcript","雅黑","具体","快捷键","合并","打开","i","结果","usepackage","此时","字体","使","删除","--","其","文档","已","cell","contrib","输出","11pt","o","忽略","插入","不能","占用","interactiveshell","依赖于","选中","义","不","单元格","]","<","开关","a4paper","2018","problem","s","把","键","end","instance","right","键盘输入","get","ctrl","=","必须","最后","z","因此","就","对","或者","save","步骤","。","设置","powershell","中文","上方","package","xe","1","边","启动","#","本","向上","of","发送","滚动","以下","!"],"title":"5.5.jupyter使用笔记","title_tokens":[".","jupyter","5.5","笔记","使用"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#_1","text":"将此代码放置在jupyter单元中： from IPython.core.interactiveshell import InteractiveShell InteractiveShell . ast_node_interactivity = \"all\" 修改全局设置 在Windows中，以下步骤会使更改永久生效。应该适用于其他操作系统。您可能必须更改路径。 C:\\Users\\your_profile\\\\.ipython\\profile_default 做一个ipython_config.py文件与下面的代码profile_defaults： c = get_config () c . InteractiveShell . ast_node_interactivity = \"all\" 使用 print 函数","text_tokens":["interactivity","在","一个","\"","from","使","config","您","做","print","的","路径","与",")","步骤","。","使用","更改","全局","：","中","设置","\\","代码","文件","修改","interactiveshell","应该","系统","(","函数","可能","下面","会","适用","生效","操作","操作系统","ast","此","_","将","于",":","node","windows","py","defaults","放置","，","c","all","ipython","your","default","users",".","jupyter","core"," ","其他","以下","import","单元","永久","get","=","必须","profile"],"title":"让代码窗口输出全部结果","title_tokens":["结果","代码","让","输出","窗口","全部"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#_2","text":"Jupyter Notebook 有两种键盘输入模式。即命令模式和编辑模式，这与 Vim 有些类似。在编辑模式下，可以往cell中键入代码或文本，此时命令模式下的快捷键不生效。在命令模式下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，此时编辑模式下的快捷键不生效。 从命令模式进入编辑模式需按 Enter 键，从编辑模式切换到命令模式需按 Esc 键。 以下两表分别是对命令和编辑两种模式下快捷键的简单说明：","text_tokens":["往","或","在","类似","到","对","可以","的","运行","与","cell","命令","是","从","。","编辑","两种","：","中","notebook","vim","代码","即","和","文本","不","键盘","单元格","移动","生效","快捷","下","键入","进入","有些","切换","用","按","esc","两表","这","，","说明","快捷键","状态","需","enter","键","分别","jupyter","有","模式"," ","以下","单元","键盘输入","此时","等等","输入","简单"],"title":"快捷键使用指南","title_tokens":["快捷键","指南","快捷","使用","使用指南"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#esc","text":"快捷键 作用 说明 Enter 转入编辑模式 Shift-Enter 运行本单元，选中下个单元 新单元默认为命令模式 Ctrl-Enter 运行本单元 Alt-Enter 运行本单元，在其下插入新单元 新单元默认为编辑模式 Y 单元转入代码状态 M 单元转入 markdown 状态 R 单元转入 raw 状态 1 设定 1 级标题 仅在 markdown 状态下时建议使用标题相关快捷键，如果单元处于其他状态，则会强制切换到 markdown 状态 2 设定 2 级标题 3 设定 3 级标题 4 设定 4 级标题 5 设定 5 级标题 6 设定 6 级标题 Up 选中上方单元 K 选中上方单元 Down 选中下方单元 J 选中下方单元 Shift-K 连续选择上方单元 Shift-J 连续选择下方单元 A 在上方插入新单元 B 在下方插入新单元 X 剪切选中的单元 C 复制选中的单元 Shift-V 粘贴到上方单元 V 粘贴到下方单元 Z 恢复删除的最后一个单元 D,D 删除选中的单元 连续按两个 D 键 Shift-M 合并选中的单元 Ctrl-S 保存当前 NoteBook S 保存当前 NoteBook L 开关行号 编辑框的行号是可以开启和关闭的 O 转换输出 Shift-O 转换输出滚动 Esc 关闭页面 Q 关闭页面 H 显示快捷键帮助 I,I 中断 NoteBook 内核 0,0 重启 NoteBook 内核 Shift 忽略 Shift-Space 向上滚动 Space 向下滚动","text_tokens":["一个","4","down","恢复","的","shift","重启","notebook","m","连续","代码","默认","级","d","r","帮助","会","设定","转入","编辑框","切换","esc","转换","，","说明","状态","enter","为","2","相关","0","单元","内核","下方","l","6","开启","到","建议","-","是","使用","markdown","剪切","5","快捷","显示","作用","下个","标题","两个","快捷键","合并","当前","i","模式","其他","v","其下","中断","如果","删除","可以","运行","命令","3",",","输出","space","编辑","o","忽略","插入","强制","选中","和","向下","关闭","处于","开关","a","alt","s","键","仅","raw","ctrl","x","最后","z","在","j","则","y","k","上方","新","下时","复制","1","h","保存","按","选择","c","本","向上","b","q","行号","滚动"," ","页面","粘贴","up"],"title":"命令模式快捷键（按 Esc 键开启）:","title_tokens":["快捷键","）","键","快捷","开启",":","模式"," ","esc","按","（","命令"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#enter","text":"快捷键 作用 说明 Tab 代码补全或缩进 Shift-Tab 提示 输出帮助信息，部分函数、类、方法等会显示其定义原型，如果在其后加 ? 再运行会显示更加详细的帮助 Ctrl-] 缩进 向右缩进 Ctrl-[ 解除缩进 向左缩进 Ctrl-A 全选 Ctrl-Z 撤销 Ctrl-Shift-Z 重做 Ctrl-Y 重做 Ctrl-Home 跳到单元开头 Ctrl-Up 跳到单元开头 Ctrl-End 跳到单元末尾 Ctrl-Down 跳到单元末尾 Ctrl-Left 跳到左边一个字首 Ctrl-Right 跳到右边一个字首 Ctrl-Backspace 删除前面一个字 Ctrl-Delete 删除后面一个字 Esc 切换到命令模式 Ctrl-M 切换到命令模式 Shift-Enter 运行本单元，选中下一单元 新单元默认为命令模式 Ctrl-Enter 运行本单元 Alt-Enter 运行本单元，在下面插入一单元 新单元默认为编辑模式 Ctrl-Shift-- 分割单元 按光标所在行进行分割 Ctrl-Shift-Subtract 分割单元 Ctrl-S 保存当前 NoteBook Shift 忽略 Up 光标上移或转入上一单元 Down 光标下移或转入下一单元 Ctrl-/ 注释整行/撤销注释 仅代码状态有效 注： 如果快捷键被系统中的其它应用占用，则可能会失效","text_tokens":["右","一个","缩进","down","类","的","shift","home","光标","左边","left","notebook","m","代码","默认","解除","被","下面","帮助","会","转入","esc","字","切换","其它","信息","，","补全","字首","说明","注","状态","enter","为","跳","单元","原型","失效","末尾","到","前面","-","：","中","更加","等","再","/","系统","可能","右边","上移","快捷","行","显示","作用","[","快捷键","重做","当前","?","模式","整行","如果","所在","删除","--","其","运行","定义","上","命令","输出","编辑","一","忽略","加","插入","有效","占用","函数","选中","撤销","分割","]","开头","注释","a","其后","alt","s","backspace","end","仅","right","ctrl","部分","z","或","在","后面","subtract","则","y","tab","应用","进行","新","、","delete","详细","全选","下","保存","左","按","本","下移","方法"," ","向","提示","up"],"title":"编辑模式快捷键（ 按 Enter 键启动）:","title_tokens":["快捷键","）","enter","键","快捷",":","模式"," ","按","（","启动","编辑"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#notebook","text":"在该目录下：shift + 右键 👉 打开powershell，输入jupter notebook","text_tokens":["：","在","该","👉","打开","notebook","下","powershell"," ","目录","shift","jupter","，","+","输入","右键"],"title":"在任意目录下打开notebook","title_tokens":["在","打开","notebook","下","目录","任意"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#_3","text":"通过 pip 安装 jupyterthemes package： # 安装 pip install jupyterthemes # 更新jupyterthemes pip install --upgrade jupyterthemes 安装好 jupyterthemes package之后，就可以在命令行输入 jupyterthemes 的命令： # 列出所有安装好的主题 jt -l # 使用帮助 jt -h 具体使用方法参见： jupyterthemes官方说明","text_tokens":["在","安装","好","就","列出","--","可以","主题","的","-","install","命令","官方","jt","命令行","使用","之后","：","通过","jupyterthemes","upgrade","所有","package","帮助","h","pip","参见","#","，","具体","说明","更新","方法"," ","l","输入"],"title":"自定义主题","title_tokens":["主题","自定","自定义","定义"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#_4","text":"安装 jupyter_contrib_nbextensions 包。该插件并不是jupyter notebook官方的插件。具体参考 Unofficial Jupyter Notebook Extensions 和 为Jupyter Notebook安装扩展并启用Configurator 。 # 安装 pip install jupyter_contrib_nbextensions # 或者通过conda安装 conda install -c conda-forge jupyter_contrib_nbextensions # 激活 jupyter contrib nbextension install --user # 启用 jupyter nbextensions_configurator enable --user","text_tokens":["插件","安装","extensions","--","启用","的","或者","官方","install","包","-","enable","contrib","。","notebook","通过","nbextensions","不是","激活","user","和","该","_","pip","forge","#","c","具体","unofficial","configurator","并","为","jupyter"," ","扩展","参考","nbextension","conda"],"title":"安装扩展","title_tokens":["扩展","安装"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#pdf","text":"jupyter notebook本身不能输出pdf，输出pdf依赖于$\\LaTeX$引擎。目前，带有中文的ipynb文件输出为pdf会报错，主要原因是jupyter的$\\LaTeX$模板设置了$\\text{pdf}\\LaTeX$引擎，但是Pdf$\\LaTeX$不可以直接编译中文文档的。因此，需要把jupyter的$\\LaTeX$引擎改为$\\text{Xe}\\LaTeX$引擎。 修改模板，模板位置为：...\\site-packages\\nbconvert\\templates\\latex\\article.tplx，将latex模板类由article改为ctexart。 原来的代码： ((* block docclass *)) \\documentclass [11pt] { article } ((* endblock docclass *)) 修改后的代码： ((* block docclass *)) \\documentclass [13pt] { ctexart } ((* endblock docclass *)) 或者，依然使用PdfLatex引擎，但引入xeCJK宏包： \\documentclass [11pt] { article } \\usepackage { xeCJK } % 如果设置mainfont，必须设置为已安装的中文字体，例如微软雅黑。 %\\setCJKmainfont{SourceHanSansCN-Light} 想要修改输出pdf的排版，则需要修改其预定义的latex排版模板，即base.tplx文件。例如可以在base.tplx加入如下代码控制输出的pdf的页边距。 \\geometry { a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm } 但是，可能改了jupyter的latex模板，jupyter notebook输出pdf依然报错。例如下面的报错信息： nbconvert failed: PDF creating failed, captured latex output: This is XeTeX, Version 3.14159265-2.6-0.99999 (TeX Live 2018/W32TeX) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode ! Undefined control sequence. <*> .\\notebook .tex ? ! Emergency stop. <*> .\\notebook .tex No pages of output. Transcript written on ?. 这是jupyter中控制调用latex引擎的脚本pdf.py有bug，位于66行。 原来的代码： writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '.' }) 正确的代码： writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '' }) 原来的代码给xelatex引擎发送了错误的文件路径： 错误的路径： xelatex .\\notebook.tex 正确的路径： xelatex notebook.tex 详细内容参考这里 Problem in Converting Jupyter notebook to pdf #144 。","text_tokens":["0.99999","安装","赖于","类","%","的","top","article","pages","left","报错","extended","notebook","stop","in","1cm","\\","位于","改为","代码","文件","修改","2.6","原因","即","原来","13pt","控制","下面","会","66","由","converting","emergency","_","base","需要","py","，","信息","this","documentclass","了","中文字体","为","entering","模板","例如","$","creating","failed","144","距","xetex","\"","引入","is","给","kw","'","-","是",")","geometry","captured","使用","restricted","no","页","：","中","enabled","编译","/","writers","sourcehansanscn","endblock","{","w32tex","packages","可能","xelatex","setcjkmainfont","templates",":","transcript","mainfont","这是","行","fileswriter","依赖","[","light","mode","微软","雅黑","后","3.14159265","排版","tex","?","jupyter","有","ipynb","site","usepackage","改了","writer","本身","...","字体","加入","如果","nbconvert","output","write18","可以","其","文档","undefined","调用","已","预定","路径",",","输出","11pt","但是","bottom","sequence","written","不能","内容","依赖于","(","义","to","不","]","<","pdf","2cm","a4paper","将","2018","如下","block","build","docclass","problem","把",">","文字","宏包","带有","instance","right","bug","control","=","但","必须","version","这里","因此","在","或者","pdflatex","args","ctexart","xecjk","text","。","则","directory","目前","preloaded","设置","}","正确","引擎","中文","live","主要","直接","脚本","详细","xe","tplx","latex","边","#","想要","of","错误",".","format","发送","依然"," ","参考","on","*","位置","!"],"title":"输出带有中文的pdf","title_tokens":["带有","的","中文","输出","pdf"]},{"location":"开发环境管理/5.5.jupyter使用笔记.html#_5","text":"Save and CheckPoint 和 Revert to CheckPoint。","text_tokens":["checkpoint"," ","and","revert","save","和","to","。"],"title":"版本控制","title_tokens":["控制","版本控制","版本"]},{"location":"标准库/8.1.string.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Template 在 string.Template 中，通过前置 $ 来识别变量（例如， $var ）。另外， 如果有需要，可以通过大括号将它们从周围的文本中分开（例如， ${var} ）。 通过例子来对比下： values = { 'var' : 'foo' } t = string . Template ( \"\"\" Variable : $var Escape : $$ Variable in text: $ {var} iable \"\"\" ) print ( 'TEMPLATE:' , t . substitute ( values )) s = \"\"\" Variable : %(var)s Escape : %% Variable in text: %(var)s iable \"\"\" print ( 'INTERPOLATION:' , s % values ) s = \"\"\" Variable : {var} Escape : {{}} Variable in text: {var} iable \"\"\" print ( 'FORMAT:' , s . format ( ** values )) TEMPLATE : Variable : foo Escape : $ Variable in text : fooiable INTERPOLATION : Variable : foo Escape : % Variable in text : fooiable FORMAT : Variable : foo Escape : {} Variable in text : fooiable 前两种情况，触发字符（ $ 和 % ）需要重复两次来转义。对于第三种格式化语法， { 和 } 都需要重复才能转义。 Template 没有可用的格式化选项。例如，无法控制用来表示浮点数的数字的个数。 使用 safe_substitute() 方法可以带来一个好处，那就是如果模板需要的值没有全部作为参数提供给模板的话可以避免发生异常。 values = { 'var' : 'foo' } t = string . Template ( \"$var is here but $missing is not provided\" ) try : print ( 'substitute() :' , t . substitute ( values )) except KeyError as err : print ( 'ERROR:' , str ( err )) print ( 'safe_substitute():' , t . safe_substitute ( values )) ERROR: 'missing' safe_substitute(): foo is here but $missing is not provided 因为在 values 字典中没有值提供给 missing , 所以 substitute() 会抛出一个 KeyError 异常。而 safe_substitute() 将捕捉这个异常并将变量表达式单独留在文本中而不是抛出异常。 string.Template 缺省语法可以通过改变正则表达式模式来调整，这个正则表达式一般是用来寻找模板内容内变量名字的。 简单的方法是通过改变 delimiter 和 idpattern 的类属性来做调整。 class MyTemplate ( string . Template ): delimiter = '%' idpattern = '[a-z]+_[a-z]+' template_text = ''' Delimiter : %% Replaced : %with_underscore Ignored : %notunderscored ''' d = { 'with_underscore' : 'replaced' , 'notunderscored' : 'not replaced' , } t = MyTemplate ( template_text ) print ( 'Modified ID pattern:' ) print ( t . safe_substitute ( d )) Modified ID pattern : Delimiter : % Replaced : replaced Ignored : % notunderscored 在这个示例里，替换规则进行了变更，分隔符用 % 来替代了 $ 并且变量名字中必须包含下划线。 %notunderscored 模式并没有被替换，因为它不包括下划线字符。 对于更复杂的改变，可以通过覆写 pattern 属性和定义一个全新的正则表达式来实现。覆写的模式必须提供四个命名组来获取未识别的分隔符、命名的变量、大括号模式的变量名称、和无效的分隔符模式。 t.pattern 的值是编译好的正则表达式，但是原始字符串可以通过它的 pattern 属性来获取 t = string . Template ( '$var' ) print ( t . pattern . pattern ) \\$(?: (?P<escaped>\\$) | # Escape sequence of two delimiters (?P<named>(?a:[_a-z][_a-z0-9]*)) | # delimiter and a Python identifier {(?P<braced>(?a:[_a-z][_a-z0-9]*))} | # delimiter and a braced identifier (?P<invalid>) # Other ill-formed delimiter exprs ) 下面的示例定义了一个新的模式来生成一种新的模板，使用 {{var}} 作为变量语法。 import re import string class MyTemplate ( string . Template ): delimiter = '{{' pattern = r ''' \\{\\{(?: (?P<escaped>\\{\\{)| (?P<named>[_a-z][_a-z0-9]*)\\}\\}| (?P<braced>[_a-z][_a-z0-9]*)\\}\\}| (?P<invalid>) ) ''' t = MyTemplate ( ''' {{{{ {{var}} ''' ) print ( 'MATCHES:' , t . pattern . findall ( t . template )) print ( 'SUBSTITUTED:' , t . safe_substitute ( var = 'replacement' )) MATCHES: [('{{', '', '', ''), ('', 'var', '', '')] SUBSTITUTED: {{ replacement named 和 braced 两个模式都必须单独提供，虽然它们都是一样的。 Formatter Formatter 类的执行效果与 str 的 format() 方法一致，它的特征包括型态转换，排列，属性以及字段引用，已命名特定位置的模板参数， 以及特定类型的格式化选项。通常 format() 方法对于这些特征是最便捷的接口，但 Formatter 提供了建立子类的方法，在需要多态情况下使用。 常量 string 模块包含了与 ASCII 、数字字符相关的一系列常量。这些常量在处理 ASCII 数据时是非常有效的，但是现在大家会越来越多的遇到 Unicode 类型的非 ASCII 文本，在这个情况下的这些常量的作用就很有限了。 import inspect import string def is_str ( value ): return isinstance ( value , str ) for name , value in inspect . getmembers ( string , is_str ): if name . startswith ( '_' ): continue print ( ' %s = %r \\n ' % ( name , value )) ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz' ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' digits = '0123456789' hexdigits = '0123456789abcdefABCDEF' octdigits = '01234567' printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\' () *+ , - . / :; <=>?@ [ \\\\ ] ^ _ ` { | } ~ \\ t \\ n \\ r \\ x0b \\ x0c ' punctuation=' ! \" # $ %& \\ '()*+,-./:;<=>?@[\\\\]^_`{|}~' whitespace = ' \\t\\n\\r\\x0b\\x0c'","text_tokens":["n","variable","类","排列","变更","全部","10","\\","octdigits","exprs","被","前置","v.1915","idpattern","划线","r","实现","下面","它们","err","字","转换","abcdefghijklmnopqrstuvwxyz","abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz","表达式","发生","amd64","而","格式化","$","处理","对于","modified","变量","x0c","无法","：","中","letters","编译","触发","单独","达式","作用","[","四个","浮点数","两个","很","复杂","?","常量","好处","如果","for","-.","定义","3","括号","通过","有效","msc","和","0123456789","值","提供","全新","捕捉","建立","replacement","以及","效果","import","非","包括","做","provided","mytemplate","text","新","substitute","就是","作为","not",".","id","*","这些","正则","matches","时","更","named","string","re","two","windows","用","需要","braced","大括号","，","01234567","执行","一般","ill","unicode","as","现在","引用","\"","对比","var","print","-","浮点","escape","+","startswith",";","一样","x0b","有","正则表达式","here","获取","字符","64","但是","sequence","参数","内容","子类","避免","a","并","遇到","%&","但","iable","便捷","在","but","def","两种","}","进行","ascii","invalid","、","里","属性","p","两次","特征","原始","getmembers"," ","大家","位置","except","表示","一个","formed","%","类型","的","用来","模块","多","分隔","覆写","ignored","other","hexdigits","9","会","_","if","with","了","delimiters","模板","例如","没有","组来","'",")","是","0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz","使用","接口","来","{","的话","punctuation","字符串","最",":","型态","周围","isinstance","values","str","名称","printable","因为","模式","一种","重复","从","简单","interpolation","那","好","越来","可以","第三","命名",",","多态","替代","不是","格式","@","(","将","inspect","缺省",">","~","并且","抛出","调整","formatter","转义","and","数字","有限","名字","substituted","（","`","才能","下","分开","python","name","format","方法","异常","系列","例子","findall","数据","规则","与","所以","try","都","下划","digits","in","越来越","前","d","uppercase","文本","控制","虽然","相关","个数","is","给","foo","replaced","%%","三种","/","另外","continue","）","特定","语法","下划线","value","safe","表达","escaped","pattern","class","t","字典","notunderscored","识别","已","替换","未","第三种","点数","bit","z0","不","0123456789abcdefabcdef","]","<","fooiable","它","通常","分隔符","s","|","=","必须","3.7","寻找","z","一致","选项","包含","情况","就","whitespace","内","可用","。","delimiter","error","一系","留在","underscore","lowercase","^","段","改变","非常","带来","无效","无法控制","这个","keyerror","#","of","template","示例","一系列","missing","+_","identifier","生成","return","!"],"title":"8.1.string","title_tokens":["string","8.1","."]},{"location":"标准库/8.1.string.html#template","text":"在 string.Template 中，通过前置 $ 来识别变量（例如， $var ）。另外， 如果有需要，可以通过大括号将它们从周围的文本中分开（例如， ${var} ）。 通过例子来对比下： values = { 'var' : 'foo' } t = string . Template ( \"\"\" Variable : $var Escape : $$ Variable in text: $ {var} iable \"\"\" ) print ( 'TEMPLATE:' , t . substitute ( values )) s = \"\"\" Variable : %(var)s Escape : %% Variable in text: %(var)s iable \"\"\" print ( 'INTERPOLATION:' , s % values ) s = \"\"\" Variable : {var} Escape : {{}} Variable in text: {var} iable \"\"\" print ( 'FORMAT:' , s . format ( ** values )) TEMPLATE : Variable : foo Escape : $ Variable in text : fooiable INTERPOLATION : Variable : foo Escape : % Variable in text : fooiable FORMAT : Variable : foo Escape : {} Variable in text : fooiable 前两种情况，触发字符（ $ 和 % ）需要重复两次来转义。对于第三种格式化语法， { 和 } 都需要重复才能转义。 Template 没有可用的格式化选项。例如，无法控制用来表示浮点数的数字的个数。 使用 safe_substitute() 方法可以带来一个好处，那就是如果模板需要的值没有全部作为参数提供给模板的话可以避免发生异常。 values = { 'var' : 'foo' } t = string . Template ( \"$var is here but $missing is not provided\" ) try : print ( 'substitute() :' , t . substitute ( values )) except KeyError as err : print ( 'ERROR:' , str ( err )) print ( 'safe_substitute():' , t . safe_substitute ( values )) ERROR: 'missing' safe_substitute(): foo is here but $missing is not provided 因为在 values 字典中没有值提供给 missing , 所以 substitute() 会抛出一个 KeyError 异常。而 safe_substitute() 将捕捉这个异常并将变量表达式单独留在文本中而不是抛出异常。 string.Template 缺省语法可以通过改变正则表达式模式来调整，这个正则表达式一般是用来寻找模板内容内变量名字的。 简单的方法是通过改变 delimiter 和 idpattern 的类属性来做调整。 class MyTemplate ( string . Template ): delimiter = '%' idpattern = '[a-z]+_[a-z]+' template_text = ''' Delimiter : %% Replaced : %with_underscore Ignored : %notunderscored ''' d = { 'with_underscore' : 'replaced' , 'notunderscored' : 'not replaced' , } t = MyTemplate ( template_text ) print ( 'Modified ID pattern:' ) print ( t . safe_substitute ( d )) Modified ID pattern : Delimiter : % Replaced : replaced Ignored : % notunderscored 在这个示例里，替换规则进行了变更，分隔符用 % 来替代了 $ 并且变量名字中必须包含下划线。 %notunderscored 模式并没有被替换，因为它不包括下划线字符。 对于更复杂的改变，可以通过覆写 pattern 属性和定义一个全新的正则表达式来实现。覆写的模式必须提供四个命名组来获取未识别的分隔符、命名的变量、大括号模式的变量名称、和无效的分隔符模式。 t.pattern 的值是编译好的正则表达式，但是原始字符串可以通过它的 pattern 属性来获取 t = string . Template ( '$var' ) print ( t . pattern . pattern ) \\$(?: (?P<escaped>\\$) | # Escape sequence of two delimiters (?P<named>(?a:[_a-z][_a-z0-9]*)) | # delimiter and a Python identifier {(?P<braced>(?a:[_a-z][_a-z0-9]*))} | # delimiter and a braced identifier (?P<invalid>) # Other ill-formed delimiter exprs ) 下面的示例定义了一个新的模式来生成一种新的模板，使用 {{var}} 作为变量语法。 import re import string class MyTemplate ( string . Template ): delimiter = '{{' pattern = r ''' \\{\\{(?: (?P<escaped>\\{\\{)| (?P<named>[_a-z][_a-z0-9]*)\\}\\}| (?P<braced>[_a-z][_a-z0-9]*)\\}\\}| (?P<invalid>) ) ''' t = MyTemplate ( ''' {{{{ {{var}} ''' ) print ( 'MATCHES:' , t . pattern . findall ( t . template )) print ( 'SUBSTITUTED:' , t . safe_substitute ( var = 'replacement' )) MATCHES: [('{{', '', '', ''), ('', 'var', '', '')] SUBSTITUTED: {{ replacement named 和 braced 两个模式都必须单独提供，虽然它们都是一样的。","text_tokens":["例子","一个","matches","findall","formed","variable","规则","%","类","的","用来","所以","变更","全部","更","try","都","分隔","下划","in","\\","覆写","exprs","named","前","ignored","other","被","前置","string","idpattern","正则","文本","控制","d","划线","实现","9","下面","r","会","虽然","re","_","two","它们","err","需要","with","用","大括号","braced","，","了","delimiters","表达式","发生","而","模板","格式化","例如","$","一般","ill","个数","没有","组来","as","对于","\"","对比","var","modified","is","print","给","foo","变量","'","-",")","是","replaced","%%","使用","无法","：","中","三种","浮点","编译","来","触发","escape","另外","{","的话","单独","+","达式","）","字符串",":","[","四个","周围","语法","一样","values","浮点数","str","下划线","两个","名称","safe","表达","复杂","?","有","因为","模式","escaped","pattern","一种","正则表达式","here","class","t","重复","从","字典","简单","获取","好处","如果","interpolation","字符","那","notunderscored","好","可以","识别","第三","命名","替换","定义","未",",","括号","但是","第三种","替代","sequence","通过","不是","格式","点数","参数","内容","(","z0","和","不","]","<","fooiable","避免","值","提供","将","它","全新","捕捉","缺省","a","分隔符","replacement","s","并",">","|","import","并且","=","必须","iable","抛出","调整","寻找","z","选项","在","包括","包含","情况","做","转义","but","provided","mytemplate","and","内","可用","text","。","数字","delimiter","error","两种","留在","}","underscore","名字","substituted","（","进行","invalid","新","、","里","才能","改变","属性","带来","无效","下","substitute","无法控制","这个","p","分开","两次","就是","keyerror","作为","python","#","of","not","template",".","format","示例","原始","方法","异常"," ","missing","+_","identifier","生成","id","*","except","表示"],"title":"Template","title_tokens":["template"]},{"location":"标准库/8.1.string.html#formatter","text":"Formatter 类的执行效果与 str 的 format() 方法一致，它的特征包括型态转换，排列，属性以及字段引用，已命名特定位置的模板参数， 以及特定类型的格式化选项。通常 format() 方法对于这些特征是最便捷的接口，但 Formatter 提供了建立子类的方法，在需要多态情况下使用。","text_tokens":["一致","选项","对于","引用","在","情况","formatter","类","命名","的","已","与","类型",")","排列","是","。","多态","使用","接口","格式","参数","(","段","属性","最","子类","提供","下","特定","它","型态","字","需要","转换","通常","，","特征","建立","str","以及","了","format","执行","效果","方法","模板"," ","格式化","这些","位置","但","包括","便捷"],"title":"Formatter","title_tokens":["formatter"]},{"location":"标准库/8.1.string.html#_1","text":"string 模块包含了与 ASCII 、数字字符相关的一系列常量。这些常量在处理 ASCII 数据时是非常有效的，但是现在大家会越来越多的遇到 Unicode 类型的非 ASCII 文本，在这个情况下的这些常量的作用就很有限了。 import inspect import string def is_str ( value ): return isinstance ( value , str ) for name , value in inspect . getmembers ( string , is_str ): if name . startswith ( '_' ): continue print ( ' %s = %r \\n ' % ( name , value )) ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz' ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' digits = '0123456789' hexdigits = '0123456789abcdefABCDEF' octdigits = '01234567' printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\' () *+ , - . / :; <=>?@ [ \\\\ ] ^ _ ` { | } ~ \\ t \\ n \\ r \\ x0b \\ x0c ' punctuation=' ! \" # $ %& \\ '()*+,-./:;<=>?@[\\\\]^_`{|}~' whitespace = ' \\t\\n\\r\\x0b\\x0c'","text_tokens":["时","n","数据","%","类型","的","与","模块","多","digits","in","\\","octdigits","越来越","hexdigits","string","uppercase","文本","r","会","_","if","，","01234567","abcdefghijklmnopqrstuvwxyz","了","abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz","相关","$","处理","unicode","现在","\"","is","print","'","-","是",")","0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz","x0c","letters","/","{","+","punctuation","continue",":","作用","startswith",";","[","isinstance","str","x0b","value","很","printable","?","常量","t","字符","越来","for","-.",",","但是","*","@","有效","(","0123456789abcdefabcdef","]","<","0123456789","inspect","s",">","import","遇到","非","|","~","%&","=","在","包含","情况","就","whitespace","def","。","数字","一系","}","有限","lowercase","^","`","ascii","、","非常","大家","下","这个","#","name",".","getmembers"," ","一系列","系列","这些","return","!"],"title":"常量","title_tokens":["常量"]},{"location":"标准库/8.2.textwrap.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import textwrap from tools import Help as H 删除前导空格和后缀空格 删除第一行的前导空格和最后一行的后缀空格， width 参数控制每一行的宽度： sample_text = ''' The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. ''' print ( sample_text ) print ( textwrap . fill ( sample_text , width = 50 )) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . 结果并不尽如人意。文本现在是左对齐的，只有第一行保留了缩进，但是原来的每一行的末尾和下一行的开头之间仍有空格。 移除所有空格 使用 dedent() 函数可以移去所有行中的空格前缀和后缀： dedented_text = textwrap . dedent ( sample_text ) print ( dedented_text ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. 因为 dedent 是 indent 的反义词， 所以输出结果是一段删除了每一行中都存在的缩进空白的文字。如果某一行比其他行缩进的更多，多出的部分将不会被移除。 print ( textwrap . dedent ( \"\"\" Line one. Line two. Line three. \"\"\" )) Line one. Line two. Line three. 添加前缀 用 indent() 函数在字符串每一行开头加入前缀文本。这个例子非常类似电子邮件回复中被引用的部分，使用 > 符号来做每行文字的前缀。 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) wrapped += ' \\n\\n Second paragraph after a blank line.' print ( wrapped ) final = textwrap . indent ( wrapped , '> ' ) print ( 'Quoted block: \\n ' ) print ( final ) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Second paragraph after a blank line . Quoted block : > The textwrap module can be used to format text > for output in situations where pretty - printing is > desired . It offers programmatic functionality > similar to the paragraph wrapping or filling > features found in many text editors . > Second paragraph after a blank line . 一段文字被分成了几行，每一行文字前都加了前缀，然后每行文字重新组成整个文字段落并返回。 要控制特定的一行接受新前缀，给 indent() 的 predicate 参数赋值。该操作会轮流遍历每行的文本，当值为真时将在该行加上前缀。 def should_indent ( line ): print ( 'Indent {!r} ?' . format ( line )) return len ( line . strip ()) % 2 == 0 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) final = textwrap . indent ( wrapped , 'EVEN ' , predicate = should_indent ) print ( ' \\n Quoted block: \\n ' ) print ( final ) Indent ' The textwrap module can be used to format text\\n' ? Indent 'for output in situations where pretty-printing is\\n' ? Indent 'desired. It offers programmatic functionality\\n' ? Indent 'similar to the paragraph wrapping or filling\\n' ? Indent 'features found in many text editors.' ? Quoted block : EVEN The textwrap module can be used to format text for output in situations where pretty - printing is EVEN desired . It offers programmatic functionality EVEN similar to the paragraph wrapping or filling EVEN features found in many text editors . 悬挂缩进 同时也可以设置输出段落的宽度，可以单独控制首行的缩进。 dedented_text = textwrap . dedent ( sample_text ) . strip () print ( textwrap . fill ( dedented_text , initial_indent = '' , subsequent_indent = ' ' * 4 , width = 50 , )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. 减短长文本 为了查看长文本的摘要或预览，可以使用 shorten() 。所有的空格，比如制表符、换行符以及一系列的空格都将标准化为单个空格。然后此文本将减短为要求的长度来显示，在字词边界之间，将不包括不完整的词。 dedented_text = textwrap . dedent ( sample_text ) original = textwrap . fill ( dedented_text , width = 50 ) print ( 'Original: \\n ' ) print ( original ) shortened = textwrap . shorten ( original , 100 ) shortened_wrapped = textwrap . fill ( shortened , width = 50 ) print ( ' \\n Shortened: \\n ' ) print ( shortened_wrapped ) Original : The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Shortened : The textwrap module can be used to format text for output in situations where pretty - printing [...] 如果非空字元在原文本中被当作减短的部分被移除，他将替换为占位符。默认值 [...] 可以被替换，在 shorten() 中加入 placeholder 参数。 强制换行 每一行超过20个字符就强制换行（可能会导致单词被拆分）： textwrap . wrap ( sample_text , width = 20 ) [' The textwrap', 'module can be used', 'to format text for', 'output in', 'situations where', 'pretty-printing is', 'desired. It offers', 'programmatic', 'functionality', 'similar to the', 'paragraph wrapping', 'or filling features', 'found in many text', 'editors.']","text_tokens":["例子","n","整个","predicate","占位","4","缩进","%","one","的","本中","indent","所以","更","offers","都","前缀","10","多","three","要","同时","为了","in","邮件","\\","不会","减短","默认","前","被","导致","v.1915","保留","控制","文本","原来","r","会","此","_","之间","two","第一","当作","windows","一段","用","查看","摘要","尽如","，","分成","赋值","制表","了","然后","为","2","amd64","0","paragraph","添加","他","subsequent","遍历","as","对齐","现在","长度","末尾","引用","\"","quoted","from","词","is","print","给","shortened","50","'","-",")","是","接受","20","使用","长","：","wrapping","中","段落","比","来","每","it","many","后缀","所有","组成","该行","{","单独","边界","+","可能","）","字符串","similar","宽度","符号","second","该","行",":","特定","操作","系列","显示","functionality","当值","[","should","悬挂","预览","100","比如","original","len","programmatic","?","也","textwrap","有","结果","因为","其他","initial","sample","situations","or","字词","used","完整","...","非空字","加入","如果","个字符","换行符","字符","after","第一行","output","删除","64","前导","for","where","尽如人意","可以","found","某","strip","3",",","去","输出","替换","但是","减","printing","元","重新","@","加","even","标准化","参数","强制","msc","标准","原文","bit","(","和","to","不","函数","轮流","]","行中","width","be","符","开头","将","电子邮件","短长","the","返回","block","人意","存在","移","a","一行","line","单词","blank","制表符","并","以及",">","文字","几行","fill","import","反义","电子","placeholder","pretty","=","部分","包括","3.7","最后","dedent","final","或","在","类似","默认值","就","desired","做","features","shorten","空格","def","每行","换行","text","。","help","多出","加上","设置","一系","filling","单个","wrap","}","editors","反义词","空白","（","要求","拆分","首行","新","dedented","、","can","非常","超过","h","下","这个","左","tools","只有","回复","wrapped","真时","python","module",".","format"," ","仍","一系列","移除","*","return","!"],"title":"8.2.textwrap","title_tokens":["textwrap","8.2","."]},{"location":"标准库/8.2.textwrap.html#_1","text":"删除第一行的前导空格和最后一行的后缀空格， width 参数控制每一行的宽度： sample_text = ''' The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. ''' print ( sample_text ) print ( textwrap . fill ( sample_text , width = 50 )) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . 结果并不尽如人意。文本现在是左对齐的，只有第一行保留了缩进，但是原来的每一行的末尾和下一行的开头之间仍有空格。","text_tokens":["缩进","的","offers","in","保留","控制","文本","原来","_","之间","第一","尽如","，","了","paragraph","对齐","现在","末尾","is","print","50","'","-",")","是","：","wrapping","每","it","many","后缀","similar","宽度","functionality","programmatic","textwrap","有","结果","sample","situations","or","used","第一行","output","删除","前导","for","where","尽如人意","found",",","但是","printing","参数","(","和","to","不","width","be","开头","the","人意","一行","并","fill","pretty","=","最后","desired","features","空格","text","。","filling","editors","can","下","左","只有","module","format","."," ","仍"],"title":"删除前导空格和后缀空格","title_tokens":["删除","前导","后缀","空格","和"]},{"location":"标准库/8.2.textwrap.html#_2","text":"使用 dedent() 函数可以移去所有行中的空格前缀和后缀： dedented_text = textwrap . dedent ( sample_text ) print ( dedented_text ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. 因为 dedent 是 indent 的反义词， 所以输出结果是一段删除了每一行中都存在的缩进空白的文字。如果某一行比其他行缩进的更多，多出的部分将不会被移除。 print ( textwrap . dedent ( \"\"\" Line one. Line two. Line three. \"\"\" )) Line one. Line two. Line three.","text_tokens":["缩进","one","的","indent","所以","更","offers","都","前缀","多","three","in","不会","被","_","two","一段","，","了","paragraph","\"","is","print","-",")","是","使用","：","wrapping","中","比","每","it","所有","后缀","many","similar","行","functionality","programmatic","textwrap","因为","结果","其他","sample","situations","or","used","如果","output","删除","可以","for","where","某","found","去","输出","printing","(","函数","和","to","行中","be","将","the","存在","移","一行","line","文字","反义","pretty","=","部分","dedent","desired","features","空格","text","。","多出","filling","editors","反义词","空白","dedented","can","module",".","format"," ","移除"],"title":"移除所有空格","title_tokens":["所有","移除","空格"]},{"location":"标准库/8.2.textwrap.html#_3","text":"用 indent() 函数在字符串每一行开头加入前缀文本。这个例子非常类似电子邮件回复中被引用的部分，使用 > 符号来做每行文字的前缀。 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) wrapped += ' \\n\\n Second paragraph after a blank line.' print ( wrapped ) final = textwrap . indent ( wrapped , '> ' ) print ( 'Quoted block: \\n ' ) print ( final ) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Second paragraph after a blank line . Quoted block : > The textwrap module can be used to format text > for output in situations where pretty - printing is > desired . It offers programmatic functionality > similar to the paragraph wrapping or filling > features found in many text editors . > Second paragraph after a blank line . 一段文字被分成了几行，每一行文字前都加了前缀，然后每行文字重新组成整个文字段落并返回。 要控制特定的一行接受新前缀，给 indent() 的 predicate 参数赋值。该操作会轮流遍历每行的文本，当值为真时将在该行加上前缀。 def should_indent ( line ): print ( 'Indent {!r} ?' . format ( line )) return len ( line . strip ()) % 2 == 0 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) final = textwrap . indent ( wrapped , 'EVEN ' , predicate = should_indent ) print ( ' \\n Quoted block: \\n ' ) print ( final ) Indent ' The textwrap module can be used to format text\\n' ? Indent 'for output in situations where pretty-printing is\\n' ? Indent 'desired. It offers programmatic functionality\\n' ? Indent 'similar to the paragraph wrapping or filling\\n' ? Indent 'features found in many text editors.' ? Quoted block : EVEN The textwrap module can be used to format text for output in situations where pretty - printing is EVEN desired . It offers programmatic functionality EVEN similar to the paragraph wrapping or filling EVEN features found in many text editors .","text_tokens":["例子","n","整个","predicate","%","的","indent","offers","都","前缀","要","in","邮件","\\","前","被","文本","控制","r","会","_","一段","用","，","分成","赋值","了","然后","为","2","0","paragraph","遍历","引用","quoted","is","print","给","50","'","-",")","接受","使用","wrapping","中","段落","来","每","it","many","组成","该行","{","+","字符串","符号","similar","该","second","操作",":","特定","functionality","当值","should","len","programmatic","?","textwrap","sample","situations","or","used","加入","字符","after","output","for","where","strip","found",",","printing","重新","加","even","参数","(","函数","to","轮流","width","be","开头","将","电子邮件","the","返回","block","a","一行","line","blank","并",">","文字","几行","fill","电子","pretty","=","部分","dedent","final","在","类似","做","desired","features","def","每行","text","。","加上","filling","}","editors","新","dedented","非常","can","这个","回复","wrapped","真时","module",".","format"," ","return","!"],"title":"添加前缀","title_tokens":["添加","前缀"]},{"location":"标准库/8.2.textwrap.html#_4","text":"同时也可以设置输出段落的宽度，可以单独控制首行的缩进。 dedented_text = textwrap . dedent ( sample_text ) . strip () print ( textwrap . fill ( dedented_text , initial_indent = '' , subsequent_indent = ' ' * 4 , width = 50 , )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors.","text_tokens":["where","situations","is","print","4","output","可以","缩进","for","strip","的","'","50","indent",")",",","text","。","输出","-","offers","found","同时","设置","wrapping","段落","printing","in","filling","*","it","many","editors","(","单独","首行","控制","to","dedented","width","be","desired","can","features","similar","宽度","_","or","the","functionality","，","module","programmatic","也",".","format","textwrap","fill","initial"," ","paragraph","sample","pretty","subsequent","=","dedent","used"],"title":"悬挂缩进","title_tokens":["悬挂","缩进"]},{"location":"标准库/8.2.textwrap.html#_5","text":"为了查看长文本的摘要或预览，可以使用 shorten() 。所有的空格，比如制表符、换行符以及一系列的空格都将标准化为单个空格。然后此文本将减短为要求的长度来显示，在字词边界之间，将不包括不完整的词。 dedented_text = textwrap . dedent ( sample_text ) original = textwrap . fill ( dedented_text , width = 50 ) print ( 'Original: \\n ' ) print ( original ) shortened = textwrap . shorten ( original , 100 ) shortened_wrapped = textwrap . fill ( shortened , width = 50 ) print ( ' \\n Shortened: \\n ' ) print ( shortened_wrapped ) Original : The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Shortened : The textwrap module can be used to format text for output in situations where pretty - printing [...] 如果非空字元在原文本中被当作减短的部分被移除，他将替换为占位符。默认值 [...] 可以被替换，在 shorten() 中加入 placeholder 参数。","text_tokens":["n","占位","本中","的","offers","都","为了","in","\\","减短","默认","被","文本","此","_","之间","当作","查看","摘要","，","制表","然后","为","paragraph","他","长度","词","is","print","shortened","50","'","-",")","使用","长","wrapping","中","来","it","所有","many","边界","similar","显示",":","functionality","[","预览","100","比如","original","programmatic","textwrap","sample","situations","字词","or","used","完整","...","非空字","加入","如果","换行符","output","可以","for","where","found","替换",",","printing","元","标准化","参数","标准","原文","(","to","不","]","width","be","符","将","the","制表符","以及","fill","placeholder","pretty","=","部分","包括","dedent","默认值","或","在","desired","shorten","features","空格","换行","text","。","一系","filling","单个","editors","要求","、","dedented","can","wrapped","module",".","format"," ","一系列","移除","系列"],"title":"减短长文本","title_tokens":["文本","短长","减"]},{"location":"标准库/8.2.textwrap.html#_6","text":"每一行超过20个字符就强制换行（可能会导致单词被拆分）： textwrap . wrap ( sample_text , width = 20 ) [' The textwrap', 'module can be used', 'to format text for', 'output in', 'situations where', 'pretty-printing is', 'desired. It offers', 'programmatic', 'functionality', 'similar to the', 'paragraph wrapping', 'or filling features', 'found in many text', 'editors.']","text_tokens":["个字符","字符","就","situations","output","is","for","where","desired","features","'","-","found","换行",",","20","text",")","offers","：","wrapping","printing","in","filling","wrap","强制","每","it","many","editors","（","被","(","导致","拆分","to","]","可能","width","be","会","）","can","similar","超过","_","or","the","functionality","[","单词","一行","module","programmatic",".","format","textwrap"," ","paragraph","sample","pretty","=","used"],"title":"强制换行","title_tokens":["强制","换行"]},{"location":"标准库/8.3.time.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import time import textwrap import warnings # from tools import Help as H warnings . filterwarnings ( \"ignore\" ) 时间模块 time 提供了几种不同类型时间的方法，每一种对不同目的都有用。 标准系统通过调用 time() （模块）报告系统挂钟时间（\"wall clock\" 一般指程序执行时间）。 单调时钟模块 monotonic() 用于估算长时间运行的程序的运行时间，因为即使系统时间发生了变化，它也保证不会后退。 对于程序测试， perf_counter() （模块） 提供了高分辨率的时钟访问方式，使短时间的测试更准确。 CPU 时间可以通过 clock() 获得，而 process_time() 则会返回处理器时间和系统时间的组合。 各个时钟 时钟的实现细节因平台而异。使用 “get_clock_info ()” 来访问关于当前方式的基本信息，包括时钟的分辨率。 当前Python版本所有可用的时钟如下： available_clocks = [ ( 'clock' , time . clock ), ( 'monotonic' , time . monotonic ), ( 'perf_counter' , time . perf_counter ), ( 'process_time' , time . process_time ), ( 'time' , time . time ), ( 'thread_time' , time . thread_time ), ] for clock_name , func in available_clocks : print ( textwrap . dedent ( ''' \\ {name} : adjustable : {info.adjustable} implementation: {info.implementation} monotonic : {info.monotonic} resolution : {info.resolution} current : {current} ''' ) . format ( name = clock_name , info = time . get_clock_info ( clock_name ), current = func ()) ) clock : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6853218 monotonic : adjustable : False implementation : GetTickCount64 () monotonic : True resolution : 0.015625 current : 1123921.625 perf_counter : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6890105 process_time : adjustable : False implementation : GetProcessTimes () monotonic : True resolution : 1 e - 07 current : 565.125 time : adjustable : True implementation : GetSystemTimeAsFileTime () monotonic : False resolution : 0.015625 current : 1580735857.8439054 thread_time : adjustable : False implementation : GetThreadTimes () monotonic : True resolution : 1 e - 07 current : 528.671875 Windows 10 的输出显示其 perf_counter 和 clocks 模块调用相同的底层。clocks 在Python 3.8会被移除。 挂钟时间——time time 模块的核心函数之一是 time() ，它可以把从 「epoch」 开始之后的秒数以浮点数的格式返回。 print ( 'The time is:' , time . time ()) print ( 'The time is:' , time . time_ns ()) The time is: 1580735857.8729014 The time is: 1580735857877901000 时元 (epoch) 是测量时间的开始，对于 Unix 系统来说，时元是 1970 年 1 月 1 日 0 点。 虽然该数值一直是一个浮点数，但是它的实际精度是依赖于平台的。 虽然浮点表示在存储或者比较日期时非常有效，但是，在生成人类可读的表示时就显得有点力不从心。对于记录或者打印时间， ctime() 可能会更有效。 ctime() 将自epoch以来的时间（以秒为单位）转换为本地时间的字符串。这等效于 asctime(localtime(seconds)) 。如果时间元组不存在，则使用localtime()返回的当前时间。 print ( 'The time is:' , time . ctime ()) The time is: Mon Feb 3 21:17:37 2020 单调时钟——monotonic 因为 time() 函数返回的时间值是系统时钟，并且，为了在多台计算机之间同步时钟，系统时钟可以被用户或者是系统服务更改；所以，在重复调用 time() 函数时产生的时间值可能会有前后波动。在测量持续时间或者使用这些时间进行计算的时候，这可能会导致意料之外的行为。通过使用 monotonic() 函数就可以避免这些情况，因为 monotonic() 函数总是返回前向的时间值。 start = time . monotonic () time . sleep ( 0.1 ) end = time . monotonic () print ( 'start : {:>9.2f} ' . format ( start )) print ( 'end : {:>9.2f} ' . format ( end )) print ( 'span : {:>9.2f} ' . format ( end - start )) start : 1123921.73 end : 1123921.84 span : 0.11 我们并没有定义单调时钟的起始点。因此， 只有在使用其它时钟值进行计算时，单调时钟的返回值才会有用。 在这个例子中，睡眠的持续时间就是用 monotonic() 函数测量的。 处理器时钟时间 time() 函数返回的是挂钟时间， perf_counter() 函数返回的是处理器时钟时间。 perf_counter() 函数的返回值反映了程序运行时使用的实际时间。 for i in range ( 4 ): time . sleep ( 1 ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . perf_counter ())) Mon Feb 3 21:17:39 2020 : 1580735859.086 516161.933 Mon Feb 3 21:17:40 2020 : 1580735860.087 516162.934 Mon Feb 3 21:17:41 2020 : 1580735861.088 516163.935 Mon Feb 3 21:17:42 2020 : 1580735862.089 516164.936 如果你想要在自己的系统上运行这个例子，需要想办法增加单次内循环的循环周期或者显著地增加循环的总次数，才可以真正地看到时间差异。（如果循环周期太短，循环次数太少的话，返回的时间值可能还没有来得及变化，整个程序就结束了。） 通常情况下，如果程序什么事情没有做，处理器时钟就不会滴答计时，或者计时量很小。 print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) for i in range ( 4 ): print ( 'Sleeping' ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) Mon Feb 3 21:17:42 2020 : 1580735862.112 516164.959 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.960 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 性能计数器 有一个高分辨率的单调时钟来衡量性能是非常重要的。要想确定最佳时钟数据源，需要一些特定于平台的知识，这些知识由 Python 中的 perf_counter() 提供。 和 monotonic() 函数一样， perf_counter() 函数的时元（epoch）是未定义的。并且，函数的这些返回值用于比较和计算，而不是用作绝对时间。 struct_time 按秒计数，把秒作为单位来存储时间在某些场合很适用，但有时候程序需要访问的（或者说程序感兴趣的）是日期的不同单位所对应的各个部分（比如，某年、某月等）。为了让日期的各个部分便于访问， time 模块定义了 struct_time ，它以各个部分分离的格式来存储日期和时间值。 有些函数以 struct_time 类型的数值作为参数，而不是浮点型的数值。 gmtime() 函数返回当前 UTC 1 时间（世界标准时间）。 localtime() 函数返回的是与当前时区的当前时间 。 mktime() 接收一个 struct_time 型数值并将其转换为浮点型数值。 print ( time . gmtime ()) print ( \"\" ) print ( time . localtime ()) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 13 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 ) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 21 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 ) 与时区相关的工作 确定当前时间的函数依赖于时区设置，时区可以由程序设置，也可以使用系统的默认时区设置。改变时区并不会改变实际的时间，只是改变它的表现方式。 time 模块有4个属性记录了时区的信息： import os def show_zone_info (): print ( ' TZ :' , os . environ . get ( 'TZ' , '(not set)' )) print ( ' tzname:' , str ( time . tzname ) . encode ( 'latin-1' ) . decode ( 'gbk' )) print ( ' Zone : {} ( {} )' . format ( time . timezone , ( time . timezone / 3600 ))) print ( ' DST :' , time . daylight ) print ( ' ALZone : {} ( {} )' . format ( time . altzone , ( time . altzone / 3600 ))) print ( ' Time :' , time . ctime ()) print () show_zone_info () TZ : (not set) tzname: ('中国标准时间', '中国夏令时') Zone : -28800 (-8.0) DST : 0 ALZone : -32400 (-9.0) Time : Mon Feb 3 21:17:42 2020 解析和格式化时间 有两个函数 —— strptime() 和 strftime() —— 可以使时间值在 struct_time 表示和字符串表示之间相互转换。有一个很长的格式说明列表可以用来支持不同格式的输入和输出。完整的列表记录在 time 模块的库文件中。 这个例子将当前时间从字符串格式转换成 struct_time 实例，然后又将其转换为字符串格式。 struct_time → 浮点数时间（秒） struct_time = time . localtime () print ( struct_time ) seconds = time . mktime ( struct_time ) print ( seconds ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 1580735862.0 浮点数时间 → struct_time 浮点数时间 → 字符串时间 print ( time . time ()) time . ctime ( time . time ()) 1580735862.2027004 'Mon Feb 3 21:17:42 2020' 字符串时间 → struct_time print ( time . ctime ( time . time ())) time . strptime ( time . ctime ( time . time ())) Mon Feb 3 21:17:42 2020 time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=-1) struct_time → 字符串时间 print ( time . localtime ()) time . strftime ( \" %a %b %d %H:%M:%S %Y\" , time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 'Mon Feb 03 21:17:42 2020' time . asctime ( time . localtime ()) 'Mon Feb 3 21:17:42 2020' 0时区的时间是UTC时间，UTC时间和格林威治标准时间（GMT）很接近，大多数情况下两者相互替代不会出问题，但严格来说UTC和GMT并不相等。 ↩","text_tokens":["1580735862.112","点","相同","clock","持续","单位","10","utc","516163.935","差异","\\","不会","用作","wall","感兴","被","导致","v.1915","很小","实现","计算","516164.959","意料","wday","转换","感兴趣","信息","range","可读","发生","amd64","而","比较","格式化","21","0","处理","格林","对于","世界","转换成","strptime","seconds","from","struct","精度","e","总是","set","以","：","中","mktime","记录","39","平台","系统","0.3","该","访问","库","hour","依赖","[","浮点数","两个","很","gmt","量","存储","循环","如果","短时间","warnings","for","queryperformancecounter","调用","运行","定义","↩","3","兴趣","通过","有效","对应","msc","gmtime","和","理器","之一","值","提供","clocks","asctime","有些","程序","存在","日","getsystemtimeasfiletime","意料之外","start","→","import","测试","数值","部分","包括","个","做","出","1580735862.113","变化","等效于","sec","核心","来得","表现","持续时间","h","实例","mday","tools","起始","就是","作为","某年","b","not","decode",".","前后","32400","ignore","来说","太短","这些","报告","时","自","时候","赖于","便于","yday","更","565.125","show","13","默认","用户","严格","增加","resolution","秒","windows","我们","用","需要","1580735862.0","两者","，","换成","说明","知识","然后","为","执行","用于","打印","1580735862.2027004","03","一般","总","altzone","cpu","getthreadtimes","as","实际","\"","print","environ","单调","-","perf","之后","浮点","40","等","所","ns","所有","latin","接收","细节","分离","相互","显示","显著","0.1","挂钟","」","一样","monotonic","2020","想","时元","有","来得及","才","1123921.625","一直","版本","字符","衡量","64","1123921.73","516160.6890105","上","516162.934","中国","大多","但是","9.2","参数","型","函数","数据源","避免","implementation","多数","返回","自己","a","几种","unix","让","本地","并","37","处理器","人类","计数器","太","但","dedent","某些","feb","在","os","0.015625","min","516164.936","地","def","估算","少","更改","1580735857.8439054","help","}","进行","sleeping","、","日期","属性","适用","又","516164.960","次数","1580735862.089","事情","不同","按","或者说","1580735862.114","有点","time","产生"," ","重要","相等","移除","1580735857.8729014","未定","表示","一个","34","你","4","dst","未定义","%","类型","的","用来","模块","某月","方式","3.8","为了","process","会","测量","由","_","1970","高分","其它","ctime","1580735860.087","行为","了","2","关于","1580735861.088","很长","没有","真正","epoch","'",")","是","使用","绝对","false","目的","基本","长时间","来","timezone","3600","1123921.84","结束","{","的话","场合","28800","字符串","多台计算机","516164.961",":","短时","而异","比如","str","当前","算机","一些","也","textwrap","因为","大多数","一种","还","tz","重复","gettickcount64","从","getprocesstimes","alzone","什么","各个","同步","可以","高分辨率",",","即使","替代","不是","时区","格式","@","(","最佳","解析","将","the","获得","如下","办法","42","daylight",">","current","f","year","后退","17","并且","性能","元组","波动","支持","localtime","计时","则","底层","y","528.671875","程序执行","counter","组合","（","夏令","确定","thread","下","func","python","这","服务","name","available","想要","format","方法","516160.6853218","年","向","返回值","只是","true","例子","整个","数据","sleep","info","与","所以","区","格林威治","都","程序运行","滴答","要","in","m","等效","文件","前","”","d","月","虽然","多台","计数","之间","于","之外","adjustable","工作","列表","有时候","分辨率","问题","相关","strftime","encode","mon","输入","接近","is","—","tzname","“","isdst","准确","516161.933","每","/","span","可能","）","单次","；","秒数","特定","41","9.0","i","有时","完整","以来","0.11","使","其","输出","点数","分辨","标准","依赖于","bit","07","不","]","1580735859.086","它","zone","辨率","因","「","通常","周期","把","s","end","8.0","严格来说","力不从心","get","=","gbk","时钟","3.7","因此","情况","就","对","反映","或者","显得","内","可用","。","1580735857877901000","设置","tm","改变","非常","1","这个","只有","保证","#","时间","指","看到","计算机","睡眠","夏令时","filterwarnings","生成","开始","有用"],"title":"8.3.time","title_tokens":["8.3","time","."]},{"location":"标准库/8.3.time.html#_1","text":"时钟的实现细节因平台而异。使用 “get_clock_info ()” 来访问关于当前方式的基本信息，包括时钟的分辨率。 当前Python版本所有可用的时钟如下： available_clocks = [ ( 'clock' , time . clock ), ( 'monotonic' , time . monotonic ), ( 'perf_counter' , time . perf_counter ), ( 'process_time' , time . process_time ), ( 'time' , time . time ), ( 'thread_time' , time . thread_time ), ] for clock_name , func in available_clocks : print ( textwrap . dedent ( ''' \\ {name} : adjustable : {info.adjustable} implementation: {info.implementation} monotonic : {info.monotonic} resolution : {info.resolution} current : {current} ''' ) . format ( name = clock_name , info = time . get_clock_info ( clock_name ), current = func ()) ) clock : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6853218 monotonic : adjustable : False implementation : GetTickCount64 () monotonic : True resolution : 0.015625 current : 1123921.625 perf_counter : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6890105 process_time : adjustable : False implementation : GetProcessTimes () monotonic : True resolution : 1 e - 07 current : 565.125 time : adjustable : True implementation : GetSystemTimeAsFileTime () monotonic : False resolution : 0.015625 current : 1580735857.8439054 thread_time : adjustable : False implementation : GetThreadTimes () monotonic : True resolution : 1 e - 07 current : 528.671875 Windows 10 的输出显示其 perf_counter 和 clocks 模块调用相同的底层。clocks 在Python 3.8会被移除。","text_tokens":["的","info","模块","相同","clock","565.125","方式","10","3.8","in","\\","被","”","实现","process","会","_","resolution","windows","adjustable","信息","，","分辨率","关于","getthreadtimes","print","e","'","“","-","perf",")","使用","false","基本","：","来","平台","所有","{","细节","访问",":","显示","[","而异","monotonic","当前","textwrap","1123921.625","gettickcount64","getprocesstimes","版本","for","其","queryperformancecounter","调用","516160.6890105",",","输出","分辨","(","和","07","]","implementation","clocks","如下","辨率","因","current","getsystemtimeasfiletime","get","=","包括","dedent","时钟","在","0.015625","可用","底层","。","528.671875","1580735857.8439054","counter","}","thread","1","func","python","time","name","available",".","format","516160.6853218"," ","移除","true"],"title":"各个时钟","title_tokens":["各个","时钟"]},{"location":"标准库/8.3.time.html#time","text":"time 模块的核心函数之一是 time() ，它可以把从 「epoch」 开始之后的秒数以浮点数的格式返回。 print ( 'The time is:' , time . time ()) print ( 'The time is:' , time . time_ns ()) The time is: 1580735857.8729014 The time is: 1580735857877901000 时元 (epoch) 是测量时间的开始，对于 Unix 系统来说，时元是 1970 年 1 月 1 日 0 点。 虽然该数值一直是一个浮点数，但是它的实际精度是依赖于平台的。 虽然浮点表示在存储或者比较日期时非常有效，但是，在生成人类可读的表示时就显得有点力不从心。对于记录或者打印时间， ctime() 可能会更有效。 ctime() 将自epoch以来的时间（以秒为单位）转换为本地时间的字符串。这等效于 asctime(localtime(seconds)) 。如果时间元组不存在，则使用localtime()返回的当前时间。 print ( 'The time is:' , time . ctime ()) The time is: Mon Feb 3 21:17:37 2020","text_tokens":["一个","时","自","赖于","的","模块","点","更","单位","等效","月","会","测量","虽然","_","秒","1970","转换","，","ctime","可读","为","打印","比较","21","0","mon","对于","实际","epoch","seconds","is","print","精度","'","是",")","使用","以","之后","浮点","记录","ns","平台","系统","可能","）","字符串","该",":","秒数","依赖","」","浮点数","2020","当前","时元","存储","从","以来","一直","如果","字符","可以",",","3","但是","格式","点数","有效","依赖于","函数","(","不","之一","将","它","the","返回","asctime","「","存在","unix","日","本地","把","37","人类","17","数值","力不从心","feb","在","元组","localtime","就","或者","显得","则","。","1580735857877901000","等效于","（","核心","日期","非常","1","这","时间","有点","time",".","年"," ","来说","生成","开始","1580735857.8729014","表示"],"title":"挂钟时间——time","title_tokens":["时间","—","time","挂钟"]},{"location":"标准库/8.3.time.html#monotonic","text":"因为 time() 函数返回的时间值是系统时钟，并且，为了在多台计算机之间同步时钟，系统时钟可以被用户或者是系统服务更改；所以，在重复调用 time() 函数时产生的时间值可能会有前后波动。在测量持续时间或者使用这些时间进行计算的时候，这可能会导致意料之外的行为。通过使用 monotonic() 函数就可以避免这些情况，因为 monotonic() 函数总是返回前向的时间值。 start = time . monotonic () time . sleep ( 0.1 ) end = time . monotonic () print ( 'start : {:>9.2f} ' . format ( start )) print ( 'end : {:>9.2f} ' . format ( end )) print ( 'span : {:>9.2f} ' . format ( end - start )) start : 1123921.73 end : 1123921.84 span : 0.11 我们并没有定义单调时钟的起始点。因此， 只有在使用其它时钟值进行计算时，单调时钟的返回值才会有用。 在这个例子中，睡眠的持续时间就是用 monotonic() 函数测量的。","text_tokens":["例子","时","时候","sleep","的","持续","所以","点","为了","前","被","导致","用户","会","多台","计算","测量","之间","意料","之外","我们","用","其它","，","行为","没有","print","总是","'","-","单调",")","是","使用","中","1123921.84","系统","{","span","可能","多台计算机","；",":","0.1","monotonic","算机","有","因为","才","重复","0.11","同步","可以","调用","1123921.73","定义","通过","9.2","(","函数","避免","值","返回","并",">","意料之外","start","f","end","并且","=","时钟","因此","在","波动","情况","就","或者","。","更改","}","进行","持续时间","这个","起始","只有","就是","这","时间","服务","time","计算机","睡眠","产生","前后",".","format","返回值"," ","向","这些","有用"],"title":"单调时钟——monotonic","title_tokens":["—","单调","时钟","monotonic"]},{"location":"标准库/8.3.time.html#_2","text":"time() 函数返回的是挂钟时间， perf_counter() 函数返回的是处理器时钟时间。 perf_counter() 函数的返回值反映了程序运行时使用的实际时间。 for i in range ( 4 ): time . sleep ( 1 ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . perf_counter ())) Mon Feb 3 21:17:39 2020 : 1580735859.086 516161.933 Mon Feb 3 21:17:40 2020 : 1580735860.087 516162.934 Mon Feb 3 21:17:41 2020 : 1580735861.088 516163.935 Mon Feb 3 21:17:42 2020 : 1580735862.089 516164.936 如果你想要在自己的系统上运行这个例子，需要想办法增加单次内循环的循环周期或者显著地增加循环的总次数，才可以真正地看到时间差异。（如果循环周期太短，循环次数太少的话，返回的时间值可能还没有来得及变化，整个程序就结束了。） 通常情况下，如果程序什么事情没有做，处理器时钟就不会滴答计时，或者计时量很小。 print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) for i in range ( 4 ): print ( 'Sleeping' ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) Mon Feb 3 21:17:42 2020 : 1580735862.112 516164.959 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.960 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961","text_tokens":["例子","时","整个","你","4","sleep","的","1580735862.112","clock","程序运行","滴答","in","516163.935","差异","不会","很小","516164.959","_","增加","需要","，","ctime","1580735860.087","range","了","21","1580735861.088","总","处理","mon","没有","实际","真正","print","'","perf",")","是","使用","40","39","516161.933","系统","{","的话","结束","可能","0.3","单次","）","516164.961",":","显著","挂钟","41","2020","想","i","来得及","还","量","才","循环","如果","什么","for","可以","运行","上",",","3","516162.934","函数","(","理器","1580735859.086","值","返回","程序","自己","通常","办法","42","周期","处理器","f","17","太","时钟","feb","在","情况","就","反映","做","计时","516164.936","或者","地","内","1580735862.113","少","。","变化","counter","}","（","sleeping","来得","516164.960","1","下","这个","次数","1580735862.089","事情","时间","1580735862.114","time","想要","看到",".","format","返回值"," ","太短"],"title":"处理器时钟时间","title_tokens":["处理器","处理","时间","理器","时钟"]},{"location":"标准库/8.3.time.html#_3","text":"有一个高分辨率的单调时钟来衡量性能是非常重要的。要想确定最佳时钟数据源，需要一些特定于平台的知识，这些知识由 Python 中的 perf_counter() 提供。 和 monotonic() 函数一样， perf_counter() 函数的时元（epoch）是未定义的。并且，函数的这些返回值用于比较和计算，而不是用作绝对时间。","text_tokens":["一个","epoch","衡量","数据","未定义","的","单调","高分辨率","perf","是",")","定义","。","绝对","要","counter","中","不是","用作","来","分辨","平台","（","(","函数","和","数据源","非常","由","）","最佳","确定","计算","_","提供","特定","于","返回","辨率","需要","高分","python","，","一样","monotonic","时间","知识","想","时元","分辨率","一些","而","用于","有","返回值","比较"," ","重要","并且","这些","未定","时钟","性能"],"title":"性能计数器","title_tokens":["计数","计数器","性能"]},{"location":"标准库/8.3.time.html#struct_time","text":"按秒计数，把秒作为单位来存储时间在某些场合很适用，但有时候程序需要访问的（或者说程序感兴趣的）是日期的不同单位所对应的各个部分（比如，某年、某月等）。为了让日期的各个部分便于访问， time 模块定义了 struct_time ，它以各个部分分离的格式来存储日期和时间值。 有些函数以 struct_time 类型的数值作为参数，而不是浮点型的数值。 gmtime() 函数返回当前 UTC 1 时间（世界标准时间）。 localtime() 函数返回的是与当前时区的当前时间 。 mktime() 接收一个 struct_time 型数值并将其转换为浮点型数值。 print ( time . gmtime ()) print ( \"\" ) print ( time . localtime ()) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 13 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 ) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 21 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 )","text_tokens":["一个","时候","便于","34","yday","类型","的","与","模块","某月","单位","为了","utc","13","感兴","计数","_","wday","秒","需要","转换","感兴趣","，","有时候","了","为","而","2","21","0","mon","世界","\"","struct","print","是",")","以","浮点","mktime","isdst","等","来","所","场合","接收","分离","）","访问","hour","比如","2020","很","当前","存储","有时","各个","其","定义",",","3","兴趣","不是","时区","格式","对应","参数","标准","型","函数","gmtime","和","(","值","将","它","有些","返回","程序","让","42","把","并","year","17","数值","部分","但","=","某些","在","localtime","min","或者","。","（","tm","sec","、","日期","适用","1","mday","按","不同","或者说","作为","时间","time","某年","."," "],"title":"struct_time","title_tokens":["_","time","struct"]},{"location":"标准库/8.3.time.html#_4","text":"确定当前时间的函数依赖于时区设置，时区可以由程序设置，也可以使用系统的默认时区设置。改变时区并不会改变实际的时间，只是改变它的表现方式。 time 模块有4个属性记录了时区的信息： import os def show_zone_info (): print ( ' TZ :' , os . environ . get ( 'TZ' , '(not set)' )) print ( ' tzname:' , str ( time . tzname ) . encode ( 'latin-1' ) . decode ( 'gbk' )) print ( ' Zone : {} ( {} )' . format ( time . timezone , ( time . timezone / 3600 ))) print ( ' DST :' , time . daylight ) print ( ' ALZone : {} ( {} )' . format ( time . altzone , ( time . altzone / 3600 ))) print ( ' Time :' , time . ctime ()) print () show_zone_info () TZ : (not set) tzname: ('中国标准时间', '中国夏令时') Zone : -28800 (-8.0) DST : 0 ALZone : -32400 (-9.0) Time : Mon Feb 3 21:17:42 2020","text_tokens":["时","赖于","4","dst","的","info","模块","区","show","方式","不会","默认","由","_","，","信息","ctime","了","21","0","altzone","encode","mon","实际","print","environ","'","tzname","set","-",")","使用","：","记录","timezone","3600","latin","/","系统","{","28800",":","依赖","str","9.0","2020","当前","也","有","tz","alzone","可以",",","中国","3","时区","标准","依赖于","函数","(","它","zone","程序","42","daylight","并","8.0","import","17","get","gbk","个","feb","os","def","。","设置","}","夏令","表现","改变","属性","确定","1","时间","time","not","decode",".","format","夏令时","只是"," ","32400"],"title":"与时区相关的工作","title_tokens":["时区","相关","的","与","工作"]},{"location":"标准库/8.3.time.html#_5","text":"有两个函数 —— strptime() 和 strftime() —— 可以使时间值在 struct_time 表示和字符串表示之间相互转换。有一个很长的格式说明列表可以用来支持不同格式的输入和输出。完整的列表记录在 time 模块的库文件中。 这个例子将当前时间从字符串格式转换成 struct_time 实例，然后又将其转换为字符串格式。","text_tokens":["例子","在","一个","支持","strptime","转换成","字符","—","使","struct","可以","其","的","用来","模块",")","从","。","输出","中","格式","记录","文件","完整","函数","(","和","相互","字符串","又","值","_","之间","这个","将","库","实例","不同","转换","，","时间","列表","time","说明","换成","两个","当前","然后","为","有"," ","strftime","很长","输入","表示"],"title":"解析和格式化时间","title_tokens":["解析","格式","格式化","和","时间"]},{"location":"标准库/8.3.time.html#struct_time_1","text":"struct_time = time . localtime () print ( struct_time ) seconds = time . mktime ( struct_time ) print ( seconds ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 1580735862.0","text_tokens":["34","seconds","localtime","yday","struct","print","min",")",",","3","mktime","isdst","tm","(","sec","_","mday","wday","1580735862.0","hour","time","42","2020",".","2"," ","21","0","year","17","mon","="],"title":"struct_time → 浮点数时间（秒）","title_tokens":["浮点","）","_","→"," ","struct","点数","秒","（","时间","time","浮点数"]},{"location":"标准库/8.3.time.html#struct_time_2","text":"","text_tokens":[],"title":"浮点数时间 → struct_time","title_tokens":["浮点","_","→"," ","点数","struct","时间","time","浮点数"]},{"location":"标准库/8.3.time.html#_6","text":"print ( time . time ()) time . ctime ( time . time ()) 1580735862.2027004 'Mon Feb 3 21:17:42 2020'","text_tokens":["feb","2020",".","42","1580735862.2027004",":"," ","print","21","17","'","(","mon",")","3","ctime","time"],"title":"浮点数时间 → 字符串时间","title_tokens":["浮点","字符串","→","字符"," ","点数","时间","浮点数"]},{"location":"标准库/8.3.time.html#struct_time_3","text":"print ( time . ctime ( time . time ())) time . strptime ( time . ctime ( time . time ())) Mon Feb 3 21:17:42 2020 time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=-1)","text_tokens":["feb","34","strptime","yday","print","struct","min","-",")","3",",","isdst","tm","(","sec","_",":","1","mday","wday","hour","ctime","42","time","2020",".","2"," ","21","0","year","17","mon","="],"title":"字符串时间 → struct_time","title_tokens":["字符串","_","字符","→"," ","struct","时间","time"]},{"location":"标准库/8.3.time.html#struct_time_4","text":"print ( time . localtime ()) time . strftime ( \" %a %b %d %H:%M:%S %Y\" , time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 'Mon Feb 03 21:17:42 2020' time . asctime ( time . localtime ()) 'Mon Feb 3 21:17:42 2020' 0时区的时间是UTC时间，UTC时间和格林威治标准时间（GMT）很接近，大多数情况下两者相互替代不会出问题，但严格来说UTC和GMT并不相等。 ↩","text_tokens":["34","yday","%","的","格林威治","utc","m","不会","d","严格","_","wday","两者","，","2","问题","03","21","0","strftime","mon","格林","接近","\"","print","struct","'",")","是","isdst","）","相互",":","hour","2020","很","gmt","大多数","大多","↩",",","3","替代","时区","标准","(","和","不","多数","asctime","a","42","s","并","严格来说","year","17","=","但","feb","情况","localtime","min","出","y","。","（","tm","sec","h","下","mday","时间","time","b","."," ","相等","来说"],"title":"struct_time → 字符串时间","title_tokens":["字符串","_","→","字符"," ","struct","时间","time"]},{"location":"标准库/8.4.datetime.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) # from tools import Help as H import datetime time：时间 time 实例只保存时间值，而不保存与时间相关的日期值。 t = datetime . time ( hour = 1 , minute = 2 , second = 3 , microsecond = 4 , tzinfo = None ) print ( t ) print ( 'hour :' , t . hour ) print ( 'minute :' , t . minute ) print ( 'second :' , t . second ) print ( 'microsecond:' , t . microsecond ) print ( 'tzinfo :' , t . tzinfo ) 01 : 02 : 03.000004 hour : 1 minute : 2 second : 3 microsecond : 4 tzinfo : None min 和 max 类的属性代表一天内的有效时间范围。 time 的精度（即 time 能够有效表示的最小时间间隔）被限制为1微秒。 print ( \"最小时间\" ) print ( 'min:' , datetime . time . min ) print ( \"最大时间\" ) print ( 'min:' , datetime . time . max ) print ( \"最小刻度单位\" ) print ( 'Resolution:' , datetime . time . resolution ) 最小时间 min: 00:00:00 最大时间 min: 23:59:59.999999 最小刻度单位 Resolution: 0:00:00.000001 其他构造器： datetime.date.today() ： datetime . date . today () datetime.date(2020, 2, 3) date：日期 日历日期可以用 date 类来描述。 date 类实例化后有属性 year ， month ，和 day 。 # 如果参数超出限制范围，抛出ValueError异常 MYdate = datetime . date ( year = 2019 , month = 3 , day = 22 ) print ( MYdate ) print ( 'year :' , MYdate . year ) print ( 'month :' , MYdate . month ) print ( 'day :' , MYdate . day ) print ( \"最小时间\" ) print ( 'min:' , datetime . date . min ) print ( \"最大时间\" ) print ( 'min:' , datetime . date . max ) print ( \"最小刻度单位\" ) print ( 'Resolution:' , datetime . date . resolution ) 2019-03-22 year : 2019 month : 3 day : 22 最小时间 min: 0001-01-01 最大时间 min: 9999-12-31 最小刻度单位 Resolution: 1 day, 0:00:00 其他构造函数 import time t = time . time () 从timestamp构造date datetime . date . fromtimestamp ( t ) datetime.date(2020, 2, 3) 从proleptic Gregorian ordinal构造date datetime . date . fromordinal ( 737140 ) datetime.date(2019, 3, 22) 从ISO格式的日期构造date datetime . date . fromisoformat ( '2019-03-22' ) datetime.date(2019, 3, 22) date → 字符串时间 print ( datetime . date . ctime ( MYdate )) print ( datetime . date . strftime ( MYdate , \" %a %b %d %H:%M:%S %Y\" )) Fri Mar 22 00:00:00 2019 Fri Mar 22 00:00:00 2019 date → struct_time datetime . date . timetuple ( MYdate ) time.struct_time(tm_year=2019, tm_mon=3, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=81, tm_isdst=-1) 日期函数 Return a 3-tuple containing ISO year, week number, and weekday. datetime . date . isocalendar ( MYdate ) (2019, 12, 5) Return the date formatted according to ISO.This is 'YYYY-MM-DD'. datetime . date . isoformat ( MYdate ) '2019-03-22' \"Return day of the week, where Monday == 1 ... Sunday == 7.\" datetime . date . isoweekday ( MYdate ) 5 \"Return day of the week, where Monday == 0 ... Sunday == 6.\" datetime . date . weekday ( MYdate ) 4 Return proleptic Gregorian ordinal for the year, month and day. datetime . date . toordinal ( MYdate ) 737140 datetime：日期和时间 date_time = datetime . datetime ( year = 2020 , month = 3 , day = 23 , hour = 10 , minute = 15 , second = 30 , microsecond = 4 , tzinfo = None ) 其他构造函数 datetime . datetime . utcnow () datetime . datetime . now () datetime . datetime . today () datetime . datetime . fromisoformat ( '2019-03-22-10:15:30' ) datetime . datetime . fromordinal ( 737140 ) datetime . datetime . fromtimestamp ( time . time ()) datetime . datetime . utcfromtimestamp ( time . time ()) datetime.datetime(2020, 2, 3, 13, 11, 31, 149891) datetime → date date_time = datetime . datetime . now () datetime . datetime . date ( date_time ) datetime.date(2020, 2, 3) datetime → time datetime . datetime . time ( date_time ) datetime.time(21, 11, 31, 172888) date and time → datetime t1 = datetime . date . today () t2 = datetime . time ( hour = 10 , minute = 15 , second = 30 ) datetime . datetime . combine ( t1 , t2 ) datetime.datetime(2020, 2, 3, 10, 15, 30) datetime → time string datetime . datetime . ctime ( date_time ) print ( datetime . datetime . strftime ( date_time , \" %a %b %d %H:%M:%S %Y\" )) Mon Feb 03 21:11:31 2020 time string → datetime datetime . datetime . strptime ( 'Mon Feb 3 19:56:21 2020' , \" %a %b %d %H:%M:%S %Y\" ) datetime.datetime(2020, 2, 3, 19, 56, 21) datetime → timestamp datetime . datetime . timestamp ( date_time ) 1580735491.172888 datetime → timetuple datetime . datetime . timetuple ( date_time ) datetime . datetime . utctimetuple ( date_time ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=11, tm_sec=31, tm_wday=0, tm_yday=34, tm_isdst=0) 其他函数 datetime . datetime . toordinal ( date_time ) datetime . datetime . isocalendar ( date_time ) datetime . datetime . isoformat ( date_time ) datetime . datetime . isoweekday ( date_time ) datetime . datetime . weekday ( date_time ) datetime . datetime . astimezone ( date_time , tz = None ) datetime . datetime . dst ( date_time ) date_time . astimezone ( tz = None ) datetime.datetime(2020, 2, 3, 21, 11, 31, 172888, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), '?D1¨²¡À¨º¡Á?¨º¡À??')) ['astimezone', 'dst', 'replace', 'timetz', 'tzname', 'utcoffset'] timedelta 可以使用两个 datetime 对象的基本运算来计算未来和过去的日期，或者是通过将一个 datetime 对象和一个 timedelta 对象相结合的方法来计算。不同的日期相减会产生一个 timedelta ，一个日期加上或者减去一个 timedelta 会产生另一个日期。 timedelta 的内部值以天、秒和微秒的形式存储。 print ( 'microseconds:' , datetime . timedelta ( microseconds = 1 )) print ( 'milliseconds:' , datetime . timedelta ( milliseconds = 1 )) print ( 'seconds :' , datetime . timedelta ( seconds = 1 )) print ( 'minutes :' , datetime . timedelta ( minutes = 1 )) print ( 'hours :' , datetime . timedelta ( hours = 1 )) print ( 'days :' , datetime . timedelta ( days = 1 )) print ( 'weeks :' , datetime . timedelta ( weeks = 1 )) microseconds : 0 : 00 : 00.000001 milliseconds : 0 : 00 : 00.001000 seconds : 0 : 00 : 01 minutes : 0 : 01 : 00 hours : 1 : 00 : 00 days : 1 day , 0 : 00 : 00 weeks : 7 days , 0 : 00 : 00 可以使用 total_seconds() 将 timedelta 的整个持续时间检索为秒数。 for delta in [ datetime . timedelta ( microseconds = 1 ), datetime . timedelta ( milliseconds = 1 ), datetime . timedelta ( seconds = 1 ), datetime . timedelta ( minutes = 1 ), datetime . timedelta ( hours = 1 ), datetime . timedelta ( days = 1 ), datetime . timedelta ( weeks = 1 ), ]: print ( ' {:15} = {:8} seconds' . format ( str ( delta ), delta . total_seconds ()) ) 0 : 00 : 00.000001 = 1 e - 06 seconds 0 : 00 : 00.001000 = 0.001 seconds 0 : 00 : 01 = 1.0 seconds 0 : 01 : 00 = 60.0 seconds 1 : 00 : 00 = 3600.0 seconds 1 day , 0 : 00 : 00 = 86400.0 seconds 7 days , 0 : 00 : 00 = 604800.0 seconds 日期算术运算 one_day = datetime . timedelta ( days = 1 ) today = datetime . date . today () yesterday = today - one_day tomorrow = today + one_day print ( type ( today )) type ( yesterday ) == type ( today ) == type ( tomorrow ) <class 'datetime.date'> True timedelta 对象还支持与整型数、浮点数和其它 timedelta 实例的算术运算。 one_day = datetime . timedelta ( days = 1 ) print ( '1 day :' , one_day ) print ( '5 days :' , one_day * 5 ) print ( '1.5 days :' , one_day * 1.5 ) print ( '1/4 day :' , one_day / 4 ) # 假设午饭时间为 1 小时 work_day = datetime . timedelta ( hours = 7 ) meeting_length = datetime . timedelta ( hours = 1 ) print ( 'meetings per day :' , work_day / meeting_length ) 1 day : 1 day, 0:00:00 5 days : 5 days, 0:00:00 1.5 days : 1 day, 12:00:00 1/4 day : 6:00:00 meetings per day : 7.0 比较数值 print ( 'Times:' ) t1 = datetime . time ( 12 , 55 , 0 ) print ( ' t1:' , t1 ) t2 = datetime . time ( 13 , 5 , 0 ) print ( ' t2:' , t2 ) print ( ' t1 < t2:' , t1 < t2 ) print () print ( 'Dates:' ) d1 = datetime . date . today () print ( ' d1:' , d1 ) d2 = datetime . date . today () + datetime . timedelta ( days = 1 ) print ( ' d2:' , d2 ) print ( ' d1 > d2:' , d1 > d2 ) Times : t1 : 12 : 55 : 00 t2 : 13 : 05 : 00 t1 < t2 : True Dates : d1 : 2020 - 02 - 03 d2 : 2020 - 02 - 04 d1 > d2 : False 格式化和解析 datetime 对象默认的字符串表示法采用的是 ISO-8601 格式 ( YYYY-MM-DDTHH:MM:SS.mmmmmm )。当然也可以使用 strftime() 函数生成其它的格式。 format = \" %a %b %d %H:%M:%S %Y\" today = datetime . datetime . today () print ( 'ISO :' , today ) s = today . strftime ( format ) print ( 'strftime:' , s ) d = datetime . datetime . strptime ( s , format ) print ( 'strptime:' , d . strftime ( format )) ISO : 2020 - 02 - 03 21 : 11 : 31.684806 strftime : Mon Feb 03 21 : 11 : 31 2020 strptime : Mon Feb 03 21 : 11 : 31 2020 相同的格式化代码可以与 Python 的 string formatting mini-language 一起使用，方法是将它们放在格式字符串的字段规范中的 : 后面。 today = datetime . datetime . today () print ( 'ISO :' , today ) print ( 'format(): {: %a %b %d %H:%M:%S %Y}' . format ( today )) ISO : 2020 - 02 - 03 21 : 11 : 31.729803 format (): Mon Feb 03 21 : 11 : 31 2020 每一个 datetime 格式代码均以 % 为前缀，并且后面的冒号被当作是要输出的字符。 符号 含义 例子 %a 星期的简写 'Wed' %A 星期的完整写法 'Wednesday' %w 星期代号 -- 从 0 (周日) 到 6 (周六) '3' %d 月的第几日 (个位数时，十位补 0) '13' %b 月份的简写 'Jan' %B 月份的完整写法 'January' %m 月份 '01' %y 年份的缩写 '16' %Y 年份的完整写法 '2016' %H 小时（ 24 小时制） '17' %I 小时（ 12 小时制） '05' %p AM/PM 'PM' %M 分钟 '00' %S 秒 '00' %f 微秒 '000000' %z 设置时区（适用于对时区敏感的类） '-0500' %Z 时区名 'EST' %j 一年的第几天 '013' %W 一年的第几周 '02' %c 当地当前日期和时间 'Wed Jan 13 17:00:00 2016' %x 当地当前日期 '01/13/16' %X 当地当前时间 '17:00:00' %% 一个 % '%' 时区 在 datetime 中，时区由 tzinfo 的子类表示。由于 tzinfo 是一个抽象基类，因此应用程序需要定义一个子类。为了让这个类能用，应用程序还要为一些方法提供适当的实现。 在 timezone 类中， datetime 确实包含了一个略为简单的实现。它使用 UTC 的固定偏移量，并且不支持一年中不同日期的不同偏移量。比如，使用夏令时的地方或者 UTC 的偏移量会随时间变化的地方。 min6 = datetime . timezone ( datetime . timedelta ( hours =- 6 )) plus6 = datetime . timezone ( datetime . timedelta ( hours = 6 )) d = datetime . datetime . now ( min6 ) print ( min6 , ':' , d ) print ( datetime . timezone . utc , ':' , d . astimezone ( datetime . timezone . utc )) print ( plus6 , ':' , d . astimezone ( plus6 )) # 转换为当前系统时间 d_system = d . astimezone () print ( d_system . tzinfo , ' :' , d_system ) UTC-06:00 : 2020-02-03 07:11:31.756794-06:00 UTC : 2020-02-03 13:11:31.756794+00:00 UTC+06:00 : 2020-02-03 19:11:31.756794+06:00 ?D1¨²¡À¨º¡Á?¨º¡À?? : 2020-02-03 21:11:31.756794+08:00 要想将 datetime 值从一个时区转换到另一个时区，可以使用 astimezone() 函数。在上面的例子中，在 UTC 的两边分别显示了 6 小时的时区，并且还使用 datetime.timezone 中的 utc 实例作为参考。最后的输出行显示系统时区中的值，该值可以通过调用 astimezone() 函数获得，调用时不需要参数。","text_tokens":["wed","类","持续","相同","制","单位","10","utc","05","dd","代码","被","v.1915","即","实现","计算","它们","wday","基类","当作","字","转换","冒号","utctimetuple","范围","而","amd64","比较","格式化","21","0","formatting","strptime","seconds","from","8","数","struct","精度","e","以","：","中","est","language","meetings","according","系统","microseconds","符号","5","行","hour","per","[","固定","浮点数","两个","日历","?","00.000001","w","16","能够","存储","00","过去","01","如果","2016","还要","for","调用","定义","3","假设","通过","minutes","有效","msc","和","分钟","第","值","提供","地方","mini","程序","astimezone","ddthh","→","午饭","import","数值","formatted","now","date","30","j","mmmmmm","变化","mydate","加上","月份","应用","valueerror","fri","sec","持续时间","h","实例","mday","tools","第几","03.000004","59","作为","b",".","tzinfo","*","number","时","t1","yday","未来","当地","算术","一起","60.0","delta","13","wednesday","sunday","默认","04","string","一天","间隔","只","55","resolution","秒","windows","用","需要","31.729803","，","this","器","为","分别","03","604800.0","as","\"","print","-","¨","位数","一年","浮点","week","+","fromordinal","年份","上面","second","显示","均","meeting","timetz","午饭时间","十位","2020","想","有","表示法","...","12","0500","min6","15","ordinal","字符","64","检索","运算","参数","函数","am","子类","类来","a","让","mar","00.001000","x","feb","在","类能","min","微秒","2019","help","plus6","}","08","整型","、","日期","属性","写法","适用","保存","p","不同","几天","time","产生"," ","参考","表示","34","一个","max","4","dst","限制","ss","%","dates","的","前缀","为了","system","两边","replace","²","会","简写","由","采用","_","tuple","其它","month","ctime","了","2","几周","6","到","小时","work","'",")","是","使用","false","基本","来","timezone","28800","{","day","fromtimestamp","字符串","172888",":","个位","31","相结合","含义","比如","str","当前","一些","也","其他","06","还","tz","timestamp","7","从","containing","简单","超出","规范","可以","31.756794","microsecond","fromisoformat",",","描述","时区","type","格式","@","pm","á","minute","(","to","解析","将","个位数","the","获得","59.999999","tomorrow","toordinal",">","timedelta","f","敏感","year","17","并且","抛出","7.0","支持","补","isocalendar","and","timetuple","后面","该值","另","hours","y","days","（","夏令","1.0","应用程序","相减","000000","python","monday","c","9999","format","today","异常","方法","确实","true","weekday","构造","例子","名","整个","0.001","t2","星期","one","与","区","要","in","刻度","m","yesterday","d","utcoffset","0001","构造函数","月","于","weeks","抽象","对象","几日","proleptic","类中","相关","周日","strftime","缩写","mon","当然","代表","8601","isoformat","yyyy","is","tzname","形式","%%","isdst","最小","减去","每","à","/","19","3600.0","º","iso","）","d2","秒数","24","utcnow","737140","i","化后","gregorian","31.684806","class","t","1580735491.172888","完整","where","--","mm","86400.0","饭时","略为","输出","length","以天","点数","milliseconds","bit","utcfromtimestamp","不","56","]","结合","total","放在","<","周六","07","isoweekday","它","内部","适当","013","s","代号","11","=","3.7","最后","z","因此","datetime","包含","对","combine","或者","22","第几天","内","¡","偏移量","随","。","times","02","设置","d1","1.5","tm","最大","january","23","段","由于","1","这个","#","149891","时间","of","none","夏令时","偏移","生成","81","return","jan"],"title":"8.4.datetime","title_tokens":["8.4","datetime","."]},{"location":"标准库/8.4.datetime.html#time","text":"time 实例只保存时间值，而不保存与时间相关的日期值。 t = datetime . time ( hour = 1 , minute = 2 , second = 3 , microsecond = 4 , tzinfo = None ) print ( t ) print ( 'hour :' , t . hour ) print ( 'minute :' , t . minute ) print ( 'second :' , t . second ) print ( 'microsecond:' , t . microsecond ) print ( 'tzinfo :' , t . tzinfo ) 01 : 02 : 03.000004 hour : 1 minute : 2 second : 3 microsecond : 4 tzinfo : None min 和 max 类的属性代表一天内的有效时间范围。 time 的精度（即 time 能够有效表示的最小时间间隔）被限制为1微秒。 print ( \"最小时间\" ) print ( 'min:' , datetime . time . min ) print ( \"最大时间\" ) print ( 'min:' , datetime . time . max ) print ( \"最小刻度单位\" ) print ( 'Resolution:' , datetime . time . resolution ) 最小时间 min: 00:00:00 最大时间 min: 23:59:59.999999 最小刻度单位 Resolution: 0:00:00.000001 其他构造器： datetime.date.today() ： datetime . date . today () datetime.date(2020, 2, 3)","text_tokens":["构造","max","4","限制","类","的","与","单位","刻度","被","即","一天","间隔","只","resolution","，","范围","器","2","而","相关","为","0","代表","\"","print","精度","'",")","：","最小","）","second",":","hour","2020","00.000001","其他","能够","t","00","01","microsecond",",","3","有效","minute","(","和","不","值","59.999999","=","datetime","min","date","微秒","内","。","02","（","最大","23","日期","属性","实例","1","保存","03.000004","59","时间","time","none",".","today"," ","tzinfo","表示"],"title":"time：时间","title_tokens":["：","时间","time"]},{"location":"标准库/8.4.datetime.html#date","text":"日历日期可以用 date 类来描述。 date 类实例化后有属性 year ， month ，和 day 。 # 如果参数超出限制范围，抛出ValueError异常 MYdate = datetime . date ( year = 2019 , month = 3 , day = 22 ) print ( MYdate ) print ( 'year :' , MYdate . year ) print ( 'month :' , MYdate . month ) print ( 'day :' , MYdate . day ) print ( \"最小时间\" ) print ( 'min:' , datetime . date . min ) print ( \"最大时间\" ) print ( 'min:' , datetime . date . max ) print ( \"最小刻度单位\" ) print ( 'Resolution:' , datetime . date . resolution ) 2019-03-22 year : 2019 month : 3 day : 22 最小时间 min: 0001-01-01 最大时间 min: 9999-12-31 最小刻度单位 Resolution: 1 day, 0:00:00","text_tokens":["12","超出","datetime","如果","\"","max","print","min","可以","date","类","限制","'","2019","22","-",")","描述",",","。","3","单位","mydate","最小","刻度","valueerror","参数","(","最大","和","day","0001","属性","日期","实例",":","1","类来","resolution","用","31","#","month","，","时间","范围","9999","日历",".","化后","有","异常","03"," ","0","year","00","=","抛出","01"],"title":"date：日期","title_tokens":["：","日期","date"]},{"location":"标准库/8.4.datetime.html#_1","text":"import time t = time . time () 从timestamp构造date datetime . date . fromtimestamp ( t ) datetime.date(2020, 2, 3) 从proleptic Gregorian ordinal构造date datetime . date . fromordinal ( 737140 ) datetime.date(2019, 3, 22) 从ISO格式的日期构造date datetime . date . fromisoformat ( '2019-03-22' ) datetime.date(2019, 3, 22)","text_tokens":["构造","datetime","ordinal","date","的","2019","22","'",")",",","3","fromisoformat","-","格式","(","fromordinal","日期","iso","fromtimestamp","time","2020","proleptic","737140",".","2","gregorian","03"," ","import","t","=","timestamp","从"],"title":"其他构造函数","title_tokens":["构造","函数","其他","构造函数"]},{"location":"标准库/8.4.datetime.html#date_1","text":"print ( datetime . date . ctime ( MYdate )) print ( datetime . date . strftime ( MYdate , \" %a %b %d %H:%M:%S %Y\" )) Fri Mar 22 00:00:00 2019 Fri Mar 22 00:00:00 2019","text_tokens":["datetime","\"","print","date","%","22","2019",")",",","y","mydate","m","(","fri","d","h",":","a","ctime","mar","b","s","."," ","strftime","00"],"title":"date → 字符串时间","title_tokens":["字符串","→","字符"," ","date","时间"]},{"location":"标准库/8.4.datetime.html#date-struct_time","text":"datetime . date . timetuple ( MYdate ) time.struct_time(tm_year=2019, tm_mon=3, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=81, tm_isdst=-1)","text_tokens":["datetime","yday","struct","min","4","date","timetuple","2019","22","-",")","3",",","mydate","isdst","tm","(","sec","_","1","mday","wday","hour","time","."," ","0","year","81","mon","="],"title":"date → struct_time","title_tokens":["_","→","struct"," ","date","time"]},{"location":"标准库/8.4.datetime.html#_2","text":"Return a 3-tuple containing ISO year, week number, and weekday. datetime . date . isocalendar ( MYdate ) (2019, 12, 5) Return the date formatted according to ISO.This is 'YYYY-MM-DD'. datetime . date . isoformat ( MYdate ) '2019-03-22' \"Return day of the week, where Monday == 1 ... Sunday == 7.\" datetime . date . isoweekday ( MYdate ) 5 \"Return day of the week, where Monday == 0 ... Sunday == 6.\" datetime . date . weekday ( MYdate ) 4 Return proleptic Gregorian ordinal for the year, month and day. datetime . date . toordinal ( MYdate ) 737140","text_tokens":["12","6","number","datetime","\"","ordinal","isoformat","isocalendar","is","yyyy","4","and","date","where","mm","for","'","2019","-","22",")",",","3","=","mydate","week","dd","sunday","according","(","to","day","iso","isoweekday","5","1","7","tuple","the","a","monday","containing","month","this","of","proleptic","737140","toordinal",".","gregorian","03"," ","0","year","formatted","return","weekday","..."],"title":"日期函数","title_tokens":["函数","日期"]},{"location":"标准库/8.4.datetime.html#datetime","text":"date_time = datetime . datetime ( year = 2020 , month = 3 , day = 23 , hour = 10 , minute = 15 , second = 30 , microsecond = 4 , tzinfo = None )","text_tokens":["datetime","15","4","date","30","microsecond",")","3",",","10","minute","(","23","day","second","_","hour","month","time","none","2020","."," ","year","tzinfo","="],"title":"datetime：日期和时间","title_tokens":["：","datetime","和","时间","日期"]},{"location":"标准库/8.4.datetime.html#_3","text":"datetime . datetime . utcnow () datetime . datetime . now () datetime . datetime . today () datetime . datetime . fromisoformat ( '2019-03-22-10:15:30' ) datetime . datetime . fromordinal ( 737140 ) datetime . datetime . fromtimestamp ( time . time ()) datetime . datetime . utcfromtimestamp ( time . time ()) datetime.datetime(2020, 2, 3, 13, 11, 31, 149891)","text_tokens":["datetime","15","30","'","2019","-","22",")","fromisoformat",",","3","10","13","(","utcfromtimestamp","fromordinal","fromtimestamp",":","31","149891","time","2020","utcnow","737140",".","2","today","03"," ","11","now"],"title":"其他构造函数","title_tokens":["构造","函数","其他","构造函数"]},{"location":"标准库/8.4.datetime.html#datetime-date","text":"date_time = datetime . datetime . now () datetime . datetime . date ( date_time ) datetime.date(2020, 2, 3)","text_tokens":["2020",",","3","datetime",".","2","_"," ","date","(",")","now","=","time"],"title":"datetime → date","title_tokens":["→"," ","datetime","date"]},{"location":"标准库/8.4.datetime.html#datetime-time","text":"datetime . datetime . time ( date_time ) datetime.time(21, 11, 31, 172888)","text_tokens":["datetime",".","172888","_"," ","21","date","31","(","11",")",",","time"],"title":"datetime → time","title_tokens":["→","time"," ","datetime"]},{"location":"标准库/8.4.datetime.html#date-and-time-datetime","text":"t1 = datetime . date . today () t2 = datetime . time ( hour = 10 , minute = 15 , second = 30 ) datetime . datetime . combine ( t1 , t2 ) datetime.datetime(2020, 2, 3, 10, 15, 30)","text_tokens":["datetime","15","t1","t2","combine","date","30",")",",","3","10","minute","(","second","hour","time","2020",".","2","today"," ","="],"title":"date and time → datetime","title_tokens":["datetime","→"," ","and","date","time"]},{"location":"标准库/8.4.datetime.html#datetime-time-string","text":"datetime . datetime . ctime ( date_time ) print ( datetime . datetime . strftime ( date_time , \" %a %b %d %H:%M:%S %Y\" )) Mon Feb 03 21:11:31 2020","text_tokens":["feb","datetime","\"","print","date","%",")",",","y","m","(","d","_","h",":","31","a","ctime","time","b","2020","s",".","03"," ","21","strftime","11","mon"],"title":"datetime → time string","title_tokens":["datetime","→"," ","string","time"]},{"location":"标准库/8.4.datetime.html#time-string-datetime","text":"datetime . datetime . strptime ( 'Mon Feb 3 19:56:21 2020' , \" %a %b %d %H:%M:%S %Y\" ) datetime.datetime(2020, 2, 3, 19, 56, 21)","text_tokens":["feb","strptime","datetime","\"","%","'",")",",","3","y","m","19","(","d","56","h",":","a","b","2020","s",".","2"," ","21","mon"],"title":"time string → datetime","title_tokens":["datetime","→"," ","string","time"]},{"location":"标准库/8.4.datetime.html#datetime-timestamp","text":"datetime . datetime . timestamp ( date_time ) 1580735491.172888","text_tokens":["datetime",".","_","1580735491.172888"," ","date","(","timestamp",")","time"],"title":"datetime → timestamp","title_tokens":["→"," ","datetime","timestamp"]},{"location":"标准库/8.4.datetime.html#datetime-timetuple","text":"datetime . datetime . timetuple ( date_time ) datetime . datetime . utctimetuple ( date_time ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=11, tm_sec=31, tm_wday=0, tm_yday=34, tm_isdst=0)","text_tokens":["34","datetime","yday","struct","min","date","timetuple",")",",","3","isdst","tm","(","sec","_","mday","wday","hour","31","utctimetuple","time","2020",".","2"," ","21","0","year","11","mon","="],"title":"datetime → timetuple","title_tokens":["timetuple","→"," ","datetime"]},{"location":"标准库/8.4.datetime.html#_4","text":"datetime . datetime . toordinal ( date_time ) datetime . datetime . isocalendar ( date_time ) datetime . datetime . isoformat ( date_time ) datetime . datetime . isoweekday ( date_time ) datetime . datetime . weekday ( date_time ) datetime . datetime . astimezone ( date_time , tz = None ) datetime . datetime . dst ( date_time ) date_time . astimezone ( tz = None ) datetime.datetime(2020, 2, 3, 21, 11, 31, 172888, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), '?D1¨²¡À¨º¡Á?¨º¡À??')) ['astimezone', 'dst', 'replace', 'timetz', 'tzname', 'utcoffset']","text_tokens":["datetime","seconds","isoformat","isocalendar","dst","date","'","tzname","¨",")",",","3","¡","d1","timezone","á","à","(","28800","replace","]","²","utcoffset","º","isoweekday","172888","_","[","31","timetz","time","none","2020","toordinal",".","astimezone","2","?","timedelta"," ","21","tzinfo","tz","11","=","weekday"],"title":"其他函数","title_tokens":["函数","其他"]},{"location":"标准库/8.4.datetime.html#timedelta","text":"可以使用两个 datetime 对象的基本运算来计算未来和过去的日期，或者是通过将一个 datetime 对象和一个 timedelta 对象相结合的方法来计算。不同的日期相减会产生一个 timedelta ，一个日期加上或者减去一个 timedelta 会产生另一个日期。 timedelta 的内部值以天、秒和微秒的形式存储。 print ( 'microseconds:' , datetime . timedelta ( microseconds = 1 )) print ( 'milliseconds:' , datetime . timedelta ( milliseconds = 1 )) print ( 'seconds :' , datetime . timedelta ( seconds = 1 )) print ( 'minutes :' , datetime . timedelta ( minutes = 1 )) print ( 'hours :' , datetime . timedelta ( hours = 1 )) print ( 'days :' , datetime . timedelta ( days = 1 )) print ( 'weeks :' , datetime . timedelta ( weeks = 1 )) microseconds : 0 : 00 : 00.000001 milliseconds : 0 : 00 : 00.001000 seconds : 0 : 00 : 01 minutes : 0 : 01 : 00 hours : 1 : 00 : 00 days : 1 day , 0 : 00 : 00 weeks : 7 days , 0 : 00 : 00 可以使用 total_seconds() 将 timedelta 的整个持续时间检索为秒数。 for delta in [ datetime . timedelta ( microseconds = 1 ), datetime . timedelta ( milliseconds = 1 ), datetime . timedelta ( seconds = 1 ), datetime . timedelta ( minutes = 1 ), datetime . timedelta ( hours = 1 ), datetime . timedelta ( days = 1 ), datetime . timedelta ( weeks = 1 ), ]: print ( ' {:15} = {:8} seconds' . format ( str ( delta ), delta . total_seconds ()) ) 0 : 00 : 00.000001 = 1 e - 06 seconds 0 : 00 : 00.001000 = 0.001 seconds 0 : 00 : 01 = 1.0 seconds 0 : 01 : 00 = 60.0 seconds 1 : 00 : 00 = 3600.0 seconds 1 day , 0 : 00 : 00 = 86400.0 seconds 7 days , 0 : 00 : 00 = 604800.0 seconds","text_tokens":["一个","整个","0.001","的","未来","持续","60.0","delta","in","会","计算","_","weeks","秒","对象","，","为","0","604800.0","seconds","8","print","e","'","-","是",")","形式","使用","基本","来","减去","3600.0","{","day","microseconds",":","秒数","[","相结合","str","两个","00.000001","06","存储","00","7","过去","01","15","可以","检索","for","86400.0","运算",",","以天","通过","minutes","(","milliseconds","和","total","]","结合","值","将","内部","timedelta","=","00.001000","datetime","微秒","或者","另","hours","。","days","加上","}","、","日期","1.0","持续时间","相减","1","不同","时间","产生",".","format","方法"," "],"title":"timedelta","title_tokens":["timedelta"]},{"location":"标准库/8.4.datetime.html#_5","text":"one_day = datetime . timedelta ( days = 1 ) today = datetime . date . today () yesterday = today - one_day tomorrow = today + one_day print ( type ( today )) type ( yesterday ) == type ( today ) == type ( tomorrow ) <class 'datetime.date'> True timedelta 对象还支持与整型数、浮点数和其它 timedelta 实例的算术运算。 one_day = datetime . timedelta ( days = 1 ) print ( '1 day :' , one_day ) print ( '5 days :' , one_day * 5 ) print ( '1.5 days :' , one_day * 1.5 ) print ( '1/4 day :' , one_day / 4 ) # 假设午饭时间为 1 小时 work_day = datetime . timedelta ( hours = 7 ) meeting_length = datetime . timedelta ( hours = 1 ) print ( 'meetings per day :' , work_day / meeting_length ) 1 day : 1 day, 0:00:00 5 days : 5 days, 0:00:00 1.5 days : 1 day, 12:00:00 1/4 day : 6:00:00 meetings per day : 7.0","text_tokens":["12","6","支持","datetime","数","print","4","date","小时","work","one","'","的","-","与",")","运算",",","。","饭时","hours","假设","days","算术","浮点","length","type","点数","meetings","yesterday","1.5","/","(","整型","和","day","+","<","、","5","_","1","实例",":","7","per","meeting","对象","其它","#","午饭时间","时间","tomorrow","浮点数",">",".","为","timedelta","today"," ","0","还","午饭","class","true","*","00","=","7.0"],"title":"日期算术运算","title_tokens":["运算","算术","日期"]},{"location":"标准库/8.4.datetime.html#_6","text":"print ( 'Times:' ) t1 = datetime . time ( 12 , 55 , 0 ) print ( ' t1:' , t1 ) t2 = datetime . time ( 13 , 5 , 0 ) print ( ' t2:' , t2 ) print ( ' t1 < t2:' , t1 < t2 ) print () print ( 'Dates:' ) d1 = datetime . date . today () print ( ' d1:' , d1 ) d2 = datetime . date . today () + datetime . timedelta ( days = 1 ) print ( ' d2:' , d2 ) print ( ' d1 > d2:' , d1 > d2 ) Times : t1 : 12 : 55 : 00 t2 : 13 : 05 : 00 t1 < t2 : True Dates : d1 : 2020 - 02 - 03 d2 : 2020 - 02 - 04 d1 > d2 : False","text_tokens":["12","datetime","t1","t2","print","date","dates","'","-",")",",","days","times","false","02","13","d1","05","(","04","+","<","5","1",":","d2","55","time","2020",">",".","today","timedelta"," ","03","0","true","00","="],"title":"比较数值","title_tokens":["比较","数值"]},{"location":"标准库/8.4.datetime.html#_7","text":"datetime 对象默认的字符串表示法采用的是 ISO-8601 格式 ( YYYY-MM-DDTHH:MM:SS.mmmmmm )。当然也可以使用 strftime() 函数生成其它的格式。 format = \" %a %b %d %H:%M:%S %Y\" today = datetime . datetime . today () print ( 'ISO :' , today ) s = today . strftime ( format ) print ( 'strftime:' , s ) d = datetime . datetime . strptime ( s , format ) print ( 'strptime:' , d . strftime ( format )) ISO : 2020 - 02 - 03 21 : 11 : 31.684806 strftime : Mon Feb 03 21 : 11 : 31 2020 strptime : Mon Feb 03 21 : 11 : 31 2020 相同的格式化代码可以与 Python 的 string formatting mini-language 一起使用，方法是将它们放在格式字符串的字段规范中的 : 后面。 today = datetime . datetime . today () print ( 'ISO :' , today ) print ( 'format(): {: %a %b %d %H:%M:%S %Y}' . format ( today )) ISO : 2020 - 02 - 03 21 : 11 : 31.729803 format (): Mon Feb 03 21 : 11 : 31 2020 每一个 datetime 格式代码均以 % 为前缀，并且后面的冒号被当作是要输出的字符。 符号 含义 例子 %a 星期的简写 'Wed' %A 星期的完整写法 'Wednesday' %w 星期代号 -- 从 0 (周日) 到 6 (周六) '3' %d 月的第几日 (个位数时，十位补 0) '13' %b 月份的简写 'Jan' %B 月份的完整写法 'January' %m 月份 '01' %y 年份的缩写 '16' %Y 年份的完整写法 '2016' %H 小时（ 24 小时制） '17' %I 小时（ 12 小时制） '05' %p AM/PM 'PM' %M 分钟 '00' %S 秒 '00' %f 微秒 '000000' %z 设置时区（适用于对时区敏感的类） '-0500' %Z 时区名 'EST' %j 一年的第几天 '013' %W 一年的第几周 '02' %c 当地当前日期和时间 'Wed Jan 13 17:00:00 2016' %x 当地当前日期 '01/13/16' %X 当地当前时间 '17:00:00' %% 一个 % '%'","text_tokens":["例子","wed","一个","时","名","星期","ss","%","类","的","与","相同","制","区","当地","前缀","一起","要","wednesday","13","05","m","代码","默认","被","string","d","月","简写","采用","它们","于","秒","当作","字","对象","其它","31.729803","冒号","，","几日","为","03","格式化","21","formatting","strftime","0","周日","缩写","mon","几周","6","当然","8601","\"","strptime","yyyy","到","print","小时","'","-","位数","是",")","使用","%%","以","一年","中","est","language","每","/","{","年份","iso","）","字符串","符号",":","均","个位","31","含义","24","十位","2020","当前","i","也","w","16","31.684806","表示法","00","从","完整","01","12","规范","0500","2016","字符","可以","--","mm",",","3","输出","时区","格式","pm","(","函数","放在","和","am","周六","分钟","第","将","个位数","mini","a","013","s","代号","ddthh","f","敏感","17","并且","11","=","x","z","feb","datetime","补","对","后面","微秒","j","第几天","mmmmmm","y","。","02","设置","月份","}","（","january","段","日期","写法","适用","h","000000","p","第几","python","几天","c","时间","b",".","format","today","方法"," ","生成","jan","表示"],"title":"格式化和解析","title_tokens":["格式","格式化","解析","和"]},{"location":"标准库/8.4.datetime.html#_8","text":"在 datetime 中，时区由 tzinfo 的子类表示。由于 tzinfo 是一个抽象基类，因此应用程序需要定义一个子类。为了让这个类能用，应用程序还要为一些方法提供适当的实现。 在 timezone 类中， datetime 确实包含了一个略为简单的实现。它使用 UTC 的固定偏移量，并且不支持一年中不同日期的不同偏移量。比如，使用夏令时的地方或者 UTC 的偏移量会随时间变化的地方。 min6 = datetime . timezone ( datetime . timedelta ( hours =- 6 )) plus6 = datetime . timezone ( datetime . timedelta ( hours = 6 )) d = datetime . datetime . now ( min6 ) print ( min6 , ':' , d ) print ( datetime . timezone . utc , ':' , d . astimezone ( datetime . timezone . utc )) print ( plus6 , ':' , d . astimezone ( plus6 )) # 转换为当前系统时间 d_system = d . astimezone () print ( d_system . tzinfo , ' :' , d_system ) UTC-06:00 : 2020-02-03 07:11:31.756794-06:00 UTC : 2020-02-03 13:11:31.756794+00:00 UTC+06:00 : 2020-02-03 19:11:31.756794+06:00 ?D1¨²¡À¨º¡Á?¨º¡À?? : 2020-02-03 21:11:31.756794+08:00 要想将 datetime 值从一个时区转换到另一个时区，可以使用 astimezone() 函数。在上面的例子中，在 UTC 的两边分别显示了 6 小时的时区，并且还使用 datetime.timezone 中的 utc 实例作为参考。最后的输出行显示系统时区中的值，该值可以通过调用 astimezone() 函数获得，调用时不需要参数。","text_tokens":["例子","一个","时","的","区","要","为了","utc","13","system","两边","d","实现","²","会","由","_","基类","抽象","用","需要","转换","，","了","类中","为","分别","03","21","6","到","print","小时","'","-","¨","是",")","使用","一年","中","timezone","à","19","系统","+","º","上面","行",":","显示","固定","比如","2020","想","当前","一些","?","06","还","00","从","简单","min6","还要","可以","调用","31.756794","定义","略为",",","输出","通过","时区","参数","á","(","函数","不","07","子类","值","提供","将","地方","它","获得","程序","让","适当","astimezone","timedelta","并且","11","now","=","最后","因此","在","支持","datetime","包含","类能","或者","另","随","该值","hours","偏移量","变化","。","¡","02","plus6","应用","d1","08","夏令","日期","应用程序","由于","实例","这个","不同","作为","#","时间","夏令时",".","方法"," ","偏移","参考","确实","tzinfo","表示"],"title":"时区","title_tokens":["区","时"]},{"location":"标准库/8.5.calendar.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import calendar from tools import Help as H h = H ( calendar ) d = h . dicts c = calendar . TextCalendar ( calendar . SUNDAY ) c . prmonth ( 2017 , 7 ) H ( calendar . TextCalendar ) . param d = h . dicts module July 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class","text_tokens":["12","fr","6","mo","15","from","8","4","64","30","we","14","22",")","3",",","20","sa","th","tu","10","help","textcalendar","param","13","28","sunday","@","2017","msc","calendar","su","bit","(","v.1915","d","dicts","9","19","23","5","h","1","7","29","tools","windows","july","27","18","31","python","24","c","prmonth","module",".","2","amd64"," ","16","21","import","25","17","26","11","class","=","as","3.7"],"title":"8.5.calendar","title_tokens":["calendar","8.5","."]},{"location":"计算机基础/1.1.计算机与程序结构.html","text":"CPU 计算机的工作过程就是计算机执行程序的过程。程序是一个指令序列，这个序列明确告诉计算机应该执行什么操作，在什么地方能够找到用来操作的数据。 一旦把程序装入主存储器，计算机就可以自动执行取出指令和执行指令的任务。 专门用来完成此项工作的计算机部件称为中央处理器（Central Processing Unit，CPU） ，做成单片集成电路的CPU通常又称为微处理器（Microprocessor），在一个集成电路中集成了两个 CPU 芯片，称之为双核（dual core）微处理器。现代的个人计算机一般都是使用微处理器作为CPU。 注意：CPU不是指一个特定的某一类东西，而是具有某种功能的部件的总称。所以，不管是何种形态、设计、原理的部件，只要它能具有取出指令、执行指令的功能，它就是CPU。 简而言之， CPU 是用来表示计算机内部元件功能的术语。 下图为陶瓷PGA封装的Intel 80486 DX2 CPU： 计算机工业从1960年代早期开始使用CPU这个术语。迄今为止，CPU从形态、设计到实现都已发生了巨大的变化，但是其基本工作原理却一直没有大的变化。 早期的CPU通常是为大型、特定的应用而定制的。目前，这种为特定应用而设计定制CPU的昂贵方法，在很大程度上已经让位于可大规模生产的通用处理器。这种标准化趋势，诞生于分立晶体管大型计算机（Mainframe）和小型计算机（Minicomputer）年代，并且随着集成电路（IC）的普及而大大加速。 现代的CPU使用集成电路制作，集成电路可以把日益复杂的CPU设计制造在很小的空间里。CPU的小型化和标准化，大大增加了这些数字器件在现代生活中的应用范围，远远超出了专用运算机器这一有限的应用。现代微处理器已经随处可见，从汽车到手机，甚至儿童玩具。 ​ ——参考于 英特尔文档：CPU的功能和组成 CPU和内存由数字集成电路（数字芯片）构成，集成电路通常称为IC（Integrated Circuit），它由晶体管组成，每一个晶体管具有ON/OFF两个状态。 从功能方面来看 ，CPU的内部由寄存器、控制器、运算器和时钟四个部分构成，各部分之间由电流信号相互连通。 寄存器可用来暂存指令、数据等处理对象，可以将其看作是内存的一种。根据种类的不同，一个 CPU 内部会有20～100 个寄存器。 控制器负责把内存上的指令、数据等读入寄存器，并根据指令的执行结果来控制整个计算机。 运算器负责运算从内存读入寄存器的数据。 时钟负责发出 CPU 开始计时的时钟信号。不过，也有些计算机的时钟位于 CPU 的外部。 寄存器的主要种类和功能 根据功能的不同，我们可以将寄存器大致划分为八类。可以看出，==寄存器中存储的内容既可以是指令也可以是数据。其中，数据分为“用于运算的数值”和“表示内存地址的数值”两种。==数据种类不同，存储该数值的寄存器也不同。CPU 中每个寄存器的功能都是不同的。 种类 功能 累加寄存器 accumulator 存储执行运算的数据和运算后的数据 标志寄存器 flag register 存储运算处理后的 CPU 的状态 程序计数器 program counter 存储下一条指令所在内存的地址 基址寄存器 base register 存储数据内存的起始地址 变址寄存器 index register 存储基址寄存器的相对地址 通用寄存器 general purpose register 存储任意数据 指令寄存器 instruction register 存储指令。CPU 内部使用，程序员无法通过程序对该寄存器进行读写操作 栈寄存器 stack register 存储栈区域的起始地址 寄存器对程序员来说比较特殊，因为寄存器是编程中的一个对象，例如在汇编语言中： # 汇编语言编写的程序示例 mov eax, dword ptr [ebp-8] …把数值从内存复制到 eax add eax, dword ptr [ebp-0Ch] …exa 的数值和内存的数值相加 mov dword ptr [ebp-4], eax …把 exa 的数值（上一步的相加结果）存储在内存中 eax 和 ebp 是 CPU 内部的寄存器的名称。内存的存储场所通过地址编号来区分，而寄存器的种类则通过名字来区分。 main memory 通常所说的内存指的是计算机的主存储器（main memory），简称主存。 主存通过控制芯片等与 CPU 相连， 主要负责存储指令和数据。 主存由可读写的元素构成，每个字节（1 Byte = 8 bit ）都带有一个地址编号。 CPU 可以通过该地址读取主存中的指令和数据，以及写入数据。 如何通过内存索引数据？ 内存的构成单位是一个字节（8位），每一个字节都有一个地址编号，这个地址编号是它的逻辑地址。 CPU中的寄存器（基址寄存器、变址寄存器）会储存中被运算的数据的编号地址。CPU寄存器的空间大小决定了CPU能识别多大的内存。 比如说，一个32位的寄存器，它能表示的最大数为$2^{32}-1=4294967295$（十进制数，从0开始；换成16进制数就是FFFFFFFF）。也就是说它能表示$2^{32}=4294967296$种状态。而4g的内存一共有$4\\times1024\\times1024\\times1024=4294967296$个byte，也就是说一个具有32位的寄存器的CPU最多能识别4g的内存。 通过基址寄存器和变址寄存器，我们可以对主内存上特定的内存区域进行划分。首先，我们用十六进制数 将计算机内存上 00000000～FFFFFFFF的地址划分出来。那么，凡是该范围的内存区域，只要有一个 32 位的 寄存器，即可查看全部的内存地址。 CPU所生成的地址通常称为逻辑地址(logical address)，而内存单元所看到的地址（即加载到内存地址寄存器(memory-address register)中的地址）通常称为物理地址(physical address) 。 逻辑地址与物理地址的对应关系并不是固定不变的，这取决于执行的地址绑定方案。因此，逻辑地址又称为虚拟地址。虚拟地址通过 映射 与物理地址对应起来。完成这种映射的硬件设备是 内存管理单元 (memory-management unit, MMU)，完成映射的方法有多种，也就是地址绑定方案有多种。程序无法访问物理地址，只能基于虚拟地址进行操作。","text_tokens":["mainframe","生产","dx2","基址","大数","全部","单位","processing","相对","位于","\\","集成电路","被","即","很小","实现","下图","80486","计算","八类","对主","范围","发生","而","比较","也就是说","$","0","处理","flag","8","数","20","无法","：","中","4294967296","双核","只要","一旦","mov","该","访问","制作","内存地址","[","四个","固定","装入","两个","看出","复杂","16","能够","某种","总称","存储","大规","times1024","存储器","所在","决定","简而言之","某","通过","普及","对应","那么","和","4294967295","理器","指令和数据","连通","地方","而是","有些","方案","程序","unit","purpose","所说","以及","带有","数值","首先","部分","随处可见","现代","个","大增","编写","信号","形态","ebp","变化","目前","内存","…","应用","称之为","主要","取决于","1960","十六进制","取决","找到","此项工作","起始","就是","作为","十六","昂贵","on","来说","这些","器件","种","小型","发出","英特尔","机器","任意","大大","设计","增加","为止","我们","用","，","换成","构成","为","执行","用于","一般","巨大","单元","物理","cpu","central","-","其中","已经","大致","逻辑","等","所","组成","空间","相互","操作","栈","英特","后","pga","比如说","中央","存储栈","复制到","有","晶体","趋势","mmu","一直","远远","运算","上","甚至","但是","方面","～","种类","可","stack","映射","内容","迄今","读写操作","专用","main","off","具有","让","简称","并","一共","处理器","诞生","控制器","关系","计数器","accumulator","元素","在","特尔","最多","主存储器","起来","两种","储存","}","生活","过程","行程","应该","进行","一条","、","里","又","封装","字节","规模","不同","出来","大规模","部件","成电","语言","寄存器"," ","中央处理器","参考","读写","术语","物理地址","表示","一个","address","加载","4","程度","的","通用寄存器","用来","每个","指令寄存器","add","general","management","随着","大","只能","会","由","读入","早期","东西","地址","累加","不变","划分","来看","称为","了","2","core","硬件","例如","instruction","程序员","可见","没有","主存","最大数","到","byte","算器","4g","定制","是",")","使用","00000000","基本","来","设备","{","却","之为","晶体管","场所","虚拟","写入","physical","外部","比如","小型化","名称","算机","也","因为","变址","一种","如何","从","超出","什么","编号","绑定","可以",",","迄今为止","能","不是","汇编","手机","管理","register","exa","(","读取","而言","不管","功能","将","电流","既","即可","元件","intel","汇编语言","并且","儿童","eax","明确","做成","区域","计时","则","数字","counter","这种","有限","名字","（","此项","相加","无法访问","复制","下","这","32","完成","一类","就是说","方法","陶瓷","不过","大型","integrated","看作","整个","日益","虚拟地址","凡是","数据","任务","minicomputer","与","所以","特殊","都","多大","制造","dword","ffffffff","”","控制","编程","计数","memory","之间","于","汽车","base","对象","查看","工作","状态","玩具","大大增加","ptr","dual","—","一步","“","何种","工业","microprocessor","位","根据","每","暂存","/","十进制","）","个人","；","特定","微处理器","100","这一","负责","原理","分立","寄存","结果","？","单片","多种","各","​","随处","其","文档","识别","已","加速","集成","标准化","program","标准","bit","]","分为","取出","logical","circuit","告诉","进制","它","内部","通常","芯片","最多能","把","ic","区分","基于","index","=","时钟","因此","年代","索引","就","对","相连","大小","儿童玩具","可用","。","序列","自动","电路","^","最大","专门","指令","运算器","注意","1","这个","0ch","#","标志","指","看到","计算机","示例","通用","很大","生成","开始","执行程序"],"title":"1.1.计算机与程序结构","title_tokens":["计算","计算机","算机",".","结构","程序","与","1.1","程序结构"]},{"location":"计算机基础/1.1.计算机与程序结构.html#cpu","text":"计算机的工作过程就是计算机执行程序的过程。程序是一个指令序列，这个序列明确告诉计算机应该执行什么操作，在什么地方能够找到用来操作的数据。 一旦把程序装入主存储器，计算机就可以自动执行取出指令和执行指令的任务。 专门用来完成此项工作的计算机部件称为中央处理器（Central Processing Unit，CPU） ，做成单片集成电路的CPU通常又称为微处理器（Microprocessor），在一个集成电路中集成了两个 CPU 芯片，称之为双核（dual core）微处理器。现代的个人计算机一般都是使用微处理器作为CPU。 注意：CPU不是指一个特定的某一类东西，而是具有某种功能的部件的总称。所以，不管是何种形态、设计、原理的部件，只要它能具有取出指令、执行指令的功能，它就是CPU。 简而言之， CPU 是用来表示计算机内部元件功能的术语。 下图为陶瓷PGA封装的Intel 80486 DX2 CPU： 计算机工业从1960年代早期开始使用CPU这个术语。迄今为止，CPU从形态、设计到实现都已发生了巨大的变化，但是其基本工作原理却一直没有大的变化。 早期的CPU通常是为大型、特定的应用而定制的。目前，这种为特定应用而设计定制CPU的昂贵方法，在很大程度上已经让位于可大规模生产的通用处理器。这种标准化趋势，诞生于分立晶体管大型计算机（Mainframe）和小型计算机（Minicomputer）年代，并且随着集成电路（IC）的普及而大大加速。 现代的CPU使用集成电路制作，集成电路可以把日益复杂的CPU设计制造在很小的空间里。CPU的小型化和标准化，大大增加了这些数字器件在现代生活中的应用范围，远远超出了专用运算机器这一有限的应用。现代微处理器已经随处可见，从汽车到手机，甚至儿童玩具。 ​ ——参考于 英特尔文档：CPU的功能和组成 CPU和内存由数字集成电路（数字芯片）构成，集成电路通常称为IC（Integrated Circuit），它由晶体管组成，每一个晶体管具有ON/OFF两个状态。 从功能方面来看 ，CPU的内部由寄存器、控制器、运算器和时钟四个部分构成，各部分之间由电流信号相互连通。 寄存器可用来暂存指令、数据等处理对象，可以将其看作是内存的一种。根据种类的不同，一个 CPU 内部会有20～100 个寄存器。 控制器负责把内存上的指令、数据等读入寄存器，并根据指令的执行结果来控制整个计算机。 运算器负责运算从内存读入寄存器的数据。 时钟负责发出 CPU 开始计时的时钟信号。不过，也有些计算机的时钟位于 CPU 的外部。","text_tokens":["一个","生产","dx2","mainframe","看作","日益","整个","数据","任务","程度","的","用来","minicomputer","所以","都","小型","processing","发出","制造","英特尔","位于","随着","大","集成电路","机器","控制","很小","实现","下图","大大","80486","会","设计","计算","由","读入","之间","早期","东西","于","增加","汽车","为止","对象","工作","，","来看","范围","构成","称为","状态","了","为","执行","core","发生","而","玩具","一般","巨大","大大增加","处理","可见","没有","cpu","central","主存","dual","到","—","算器","定制","是","20","何种","使用","已经","：","中","工业","microprocessor","基本","等","来","根据","每","组成","/","暂存","双核","却","只要","空间","之为","晶体管","一旦","操作","）","相互","个人","特定","制作","四个","微处理器","外部","100","这一","英特","装入","小型化","两个","原理","pga","分立","中央","算机","复杂","负责","寄存","也","有","晶体","结果","能够","某种","总称","存储","大规","趋势","一种","从","存储器","单片","超出","一直","什么","各","远远","​","简而言之","随处","可以","某","其","文档","已","运算","上","甚至","但是","加速","迄今为止","方面","集成","能","不是","～","普及","可","标准化","手机","种类","标准","迄今","和","而言","不管","取出","理器","专用","circuit","功能","告诉","连通","地方","而是","它","内部","电流","将","有些","程序","通常","芯片","off","具有","让","unit","元件","把","并","intel","处理器","诞生","控制器","ic","并且","儿童","随处可见","现代","时钟","部分","大增","个","在","年代","特尔","就","明确","做成","计时","信号","主存储器","形态","儿童玩具","变化","。","序列","数字","可用","目前","内存","这种","应用","称之为","自动","有限","生活","过程","行程","电路","（","应该","专门","、","指令","此项","里","运算器","又","封装","1960","注意","这个","找到","此项工作","就是","规模","不同","作为","大规模","指","完成","一类","计算机","部件","成电","方法","寄存器"," ","中央处理器","陶瓷","昂贵","通用","参考","很大","术语","on","开始","大型","不过","这些","器件","执行程序","integrated","表示"],"title":"CPU","title_tokens":["cpu"]},{"location":"计算机基础/1.1.计算机与程序结构.html#_1","text":"根据功能的不同，我们可以将寄存器大致划分为八类。可以看出，==寄存器中存储的内容既可以是指令也可以是数据。其中，数据分为“用于运算的数值”和“表示内存地址的数值”两种。==数据种类不同，存储该数值的寄存器也不同。CPU 中每个寄存器的功能都是不同的。 种类 功能 累加寄存器 accumulator 存储执行运算的数据和运算后的数据 标志寄存器 flag register 存储运算处理后的 CPU 的状态 程序计数器 program counter 存储下一条指令所在内存的地址 基址寄存器 base register 存储数据内存的起始地址 变址寄存器 index register 存储基址寄存器的相对地址 通用寄存器 general purpose register 存储任意数据 指令寄存器 instruction register 存储指令。CPU 内部使用，程序员无法通过程序对该寄存器进行读写操作 栈寄存器 stack register 存储栈区域的起始地址 寄存器对程序员来说比较特殊，因为寄存器是编程中的一个对象，例如在汇编语言中： # 汇编语言编写的程序示例 mov eax, dword ptr [ebp-8] …把数值从内存复制到 eax add eax, dword ptr [ebp-0Ch] …exa 的数值和内存的数值相加 mov dword ptr [ebp-4], eax …把 exa 的数值（上一步的相加结果）存储在内存中 eax 和 ebp 是 CPU 内部的寄存器的名称。内存的存储场所通过地址编号来区分，而寄存器的种类则通过名字来区分。","text_tokens":["一个","基址","4","数据","的","通用寄存器","指令寄存器","每个","add","特殊","都","相对","general","dword","”","任意","编程","计数","地址","base","我们","累加","对象","划分","八类","，","状态","为","执行","用于","而","比较","例如","instruction","程序员","处理","cpu","ptr","flag","8","一步","“","-","是","其中","使用","无法","：","中","大致","来","根据","场所","）","操作","该","mov","内存地址","[","栈","后","看出","名称","存储栈","也","寄存","复制到","因为","结果","变址","存储","从","所在","编号","可以","运算","上",",","通过","汇编","种类","stack","register","program","内容","exa","读写操作","和","]","分为","功能","将","既","内部","程序","purpose","把","汇编语言","区分","计数器","数值","index","=","accumulator","eax","在","对","区域","编写","则","ebp","。","两种","内存","counter","…","名字","（","进行","一条","指令","相加","复制","下","起始","不同","0ch","#","标志","语言","示例","寄存器"," ","通用","读写","来说","表示"],"title":"寄存器的主要种类和功能","title_tokens":["功能","种类","寄存","寄存器","的","主要","和"]},{"location":"计算机基础/1.1.计算机与程序结构.html#main-memory","text":"通常所说的内存指的是计算机的主存储器（main memory），简称主存。 主存通过控制芯片等与 CPU 相连， 主要负责存储指令和数据。 主存由可读写的元素构成，每个字节（1 Byte = 8 bit ）都带有一个地址编号。 CPU 可以通过该地址读取主存中的指令和数据，以及写入数据。","text_tokens":["元素","一个","8","编号","数据","byte","可以","的","相连","与","主存储器","是","每个","。","都","=","内存","中","通过","等","可","（","bit","主要","读取","控制","指令","）","指令和数据","计算","由","该","memory","写入","1","main","地址","字节","通常","芯片","简称","，","指","负责","构成","所说","以及","算机","计算机"," ","读写","带有","存储","cpu","主存","存储器"],"title":"main memory","title_tokens":["main"," ","memory"]},{"location":"计算机基础/1.1.计算机与程序结构.html#_2","text":"内存的构成单位是一个字节（8位），每一个字节都有一个地址编号，这个地址编号是它的逻辑地址。 CPU中的寄存器（基址寄存器、变址寄存器）会储存中被运算的数据的编号地址。CPU寄存器的空间大小决定了CPU能识别多大的内存。 比如说，一个32位的寄存器，它能表示的最大数为$2^{32}-1=4294967295$（十进制数，从0开始；换成16进制数就是FFFFFFFF）。也就是说它能表示$2^{32}=4294967296$种状态。而4g的内存一共有$4\\times1024\\times1024\\times1024=4294967296$个byte，也就是说一个具有32位的寄存器的CPU最多能识别4g的内存。 通过基址寄存器和变址寄存器，我们可以对主内存上特定的内存区域进行划分。首先，我们用十六进制数 将计算机内存上 00000000～FFFFFFFF的地址划分出来。那么，凡是该范围的内存区域，只要有一个 32 位的 寄存器，即可查看全部的内存地址。 CPU所生成的地址通常称为逻辑地址(logical address)，而内存单元所看到的地址（即加载到内存地址寄存器(memory-address register)中的地址）通常称为物理地址(physical address) 。 逻辑地址与物理地址的对应关系并不是固定不变的，这取决于执行的地址绑定方案。因此，逻辑地址又称为虚拟地址。虚拟地址通过 映射 与物理地址对应起来。完成这种映射的硬件设备是 内存管理单元 (memory-management unit, MMU)，完成映射的方法有多种，也就是地址绑定方案有多种。程序无法访问物理地址，只能基于虚拟地址进行操作。","text_tokens":["一个","种","address","虚拟地址","基址","加载","4","凡是","数据","的","与","大数","全部","都","单位","多大","\\","management","ffffffff","被","即","只能","会","计算","memory","地址","我们","用","查看","不变","划分","，","对主","换成","范围","构成","状态","称为","了","为","而","2","执行","也就是说","硬件","$","0","单元","物理","cpu","最大数","8","数","到","byte","4g","-","是",")","00000000","无法","中","位","逻辑","所","每","十进制","4294967296","设备","{","只要","空间","虚拟","）","操作","该","访问","physical","；","特定","内存地址","固定","比如","比如说","算机","也","寄存","有","16","变址","times1024","mmu","从","多种","编号","决定","绑定","可以","识别","运算","上",",","能","通过","～","不是","管理","映射","register","对应","那么","(","4294967295","和","logical","进制","将","它","方案","程序","即可","通常","具有","最多能","unit","一共","并","关系","基于","首先","=","个","因此","区域","最多","大小","。","起来","储存","内存","这种","}","^","（","最大","进行","取决于","、","无法访问","又","十六进制","取决","1","这个","字节","就是","出来","这","32","完成","就是说","看到","计算机","十六","寄存器","方法"," ","生成","开始","物理地址","表示"],"title":"如何通过内存索引数据？","title_tokens":["内存","通过","索引","如何","数据","？"]},{"location":"计算机基础/1.2.基本概念.html","text":"程序和编程语言 程序（Program） 告诉计算机应如何完成一个计算任务，这里的计算可以是数学运算，比如解方程，也可以是符号运算，比如查找和替换文档中的某个单词。从根本上说，==计算机是由数字电路组成的运算机器，只能对数字做运算，程序之所以能做符号运算，是因为符号在计算机内部也是用数字表示的。==此外，程序还可以处理声音和图像，声音和图像在计算机内部必然也是用数字表示的，这些数字经过专门的硬件设备转换成人可以听到、看到的声音和图像。 程序由一系列 指令（Instruction） 组成，指令是指示计算机做某种运算的命令，通常包括以下几类： 输入（Input）：从键盘、文件或者其它设备获取数据。 输出（Output）：把数据显示到屏幕，或者存入一个文件，或者发送到其它设备。 基本运算：执行最基本的数学运算（加减乘除）和数据存取。 测试和分支：测试某个条件，然后根据不同的测试结果执行不同的后续指令。 循环：重复执行一系列操作。 对于程序来说，有上面这几类指令就足够了。你曾用过的任何一个程序，不管它有多么复杂，都是由这几类指令组成的。程序是那么的复杂，而编写程序可以用的指令却只有这么简单的几种，这中间巨大的落差就要由程序员去填了，所以编写程序理应是一件相当复杂的工作。 编写程序可以说就是这样一个过程：把复杂的任务分解成子任务，把子任务再分解成更简单的任务，层层分解，直到最后简单得可以用以上指令来完成。 编程语言 ：编程语言（Programming Language）分为低级语言（Low-level Language）和高级语言（High-level Language）。 机器语言（Machine Language）和汇编语言（Assembly Language）属于低级语言，直接用计算机指令编写程序。而C、C++、Java、Python等属于高级语言，用语句（Statement）编写程序，==语句是计算机指令的抽象表示。==举个例子，同样一个语句用C语言、汇编语言和机器语言分别表示如下： 低级编程语言使用计算机指令编写程序； 高级编程语言使用语句编写程序。 计算机只能对数字做运算，符号、声音、图像在计算机内部都要用数字表示，指令也不例外，上表中的机器语言完全由十六进制数字组成。最早的程序员都是直接用机器语言编程，但是很麻烦，需要查大量的表格来确定每个数字表示什么意思，编写出来的程序很不直观，而且容易出错，于是有了==汇编语言，把机器语言中一组一组的数字用助记符（Mnemonic）表示，直接用这些助记符写出汇编程序，然后让汇编器（Assembler）去查表把助记符替换成数字，也就把汇编语言翻译成了机器语言。 从上面的例子可以看出，==汇编语言和机器语言的指令是一一对应的，汇编语言有三条指令，机器语言也有三条指令，汇编器就是做一个简单的替换工作 ，例如在第一条指令中，把 movl ?,%eax 这种格式的指令替换成机器码 a1 ? ，?表示一个地址，在汇编指令中是 0x804a01c ，转换成机器码之后是 1c a0 04 08 （这是指令中的十六进制数的小端表示，小端表示将在 第 5.1 节 “目标文件” 介绍）。 从上面的例子还可以看出，==高级语言的语句和低级语言的指令之间不是简单的一一对应关系，==一条 a=b+1; 语句要翻译成三条汇编或机器指令，这个过程称为 编译（Compile） ，由编译器（Compiler）来完成，显然编译器的功能比汇编器要复杂得多。用高级语言编写的程序必须经过编译转成机器指令才能被计算机执行，编译需要花一些时间，这是用高级语言编程的一个缺点，然而更多的是优点。首先，用高级语言编程更容易，写出来的代码更紧凑，可读性更强，出了错也更容易改正。其次，高级语言是可移植的（Portable）或者称为平台无关的（Platform Independent）。 平台 这个词有很多种解释，可以指计算机体系结构（Architecture），也可以指操作系统（Operating System），也可以指开发平台（编译器、链接器等）。不同的计算机体系结构有不同的指令集（Instruction Set），可以识别的机器指令格式是不同的，直接用某种体系结构的汇编或机器指令写出来的程序只能在这种体系结构的计算机上运行，然而各种体系结构的计算机都有各自的C编译器，可以把C程序编译成各种不同体系结构的机器指令，这意味着用C语言写的程序只需稍加修改甚至不用修改就可以在各种不同的计算机上编译运行。各种高级语言都具有C语言的这些优点，所以绝大部分程序是用高级语言编写的，只有和硬件关系密切的少数程序（例如驱动程序）才会用到低级语言。还要注意一点，即使在相同的体系结构和操作系统下，用不同的C编译器（或者同一个C编译器的不同版本）编译同一个程序得到的结果也有可能不同，C语言有些语法特性在C标准中并没有明确规定，各编译器有不同的实现，编译出来的指令的行为特性也会不同，应该尽量避免使用不可移植的语法特性。 总结一下编译执行的过程，首先你用文本编辑器写一个C程序，然后保存成一个文件，例如 program.c （通常C程序的文件名后缀是 .c ），这称为源代码（Source Code）或源文件，然后运行编译器对它进行编译，编译的过程并不执行程序，而是把源代码全部翻译成机器指令，再加上一些描述信息，生成一个新的文件，例如 a.out ，这称为可执行文件，可执行文件可以被操作系统加载运行，计算机执行该文件中由编译器生成的指令，如下图所示： 有些高级语言以解释（Interpret）的方式执行，解释执行过程和C语言的编译执行过程很不一样。例如编写一个Shell脚本 script.sh ，内容如下： #! /bin/sh VAR = 1 VAR = $(( $VAR + 1 )) echo $VAR 定义Shell变量 VAR 的初始值是1，然后自增1，然后打印 VAR 的值。用Shell程序 /bin/sh 解释执行这个脚本，结果如下： $ / bin / sh script . sh 2 这里的 /bin/sh 称为解释器（Interpreter），它把脚本中的每一行当作一条命令解释执行，而不需要先生成包含机器指令的可执行文件再执行。如果把脚本中的这三行当作三条命令直接敲到Shell提示符下，也能得到同样的结果： $ VAR = 1 $ VAR = $ (( $ VAR + 1 )) $ echo $ VAR 2 编程语言仍在发展演化。以上介绍的机器语言称为第一代语言（1GL，1st Generation Programming Language），汇编语言称为第二代语言（2GL，2nd Generation Programming Language），C、C++、Java、Python等可以称为第三代语言（3GL，3rd Generation Programming Language）。目前已经有了4GL（4th Generation Programming Language）和5GL（5th Generation Programming Language）的概念。3GL的编程语言虽然是用语句编程而不直接用指令编程，但语句也分为输入、输出、基本运算、测试分支和循环等几种，和指令有直接的对应关系。而4GL以后的编程语言更多是描述要做什么（Declarative）而不描述具体一步一步怎么做（Imperative），具体一步一步怎么做完全由编译器或解释器决定，例如SQL语言（SQL，Structured Query Language，结构化查询语言）就是这样的例子。 解释执行的语言相比编译执行的语言有什么优缺点？ 这是我们的第一个思考题。本书的思考题通常要求读者系统地总结当前小节的知识，结合以前的知识，并经过一定的推理，然后作答。本书强调的是基本概念，读者应该抓住概念的定义和概念之间的关系来总结，比如本节介绍了很多概念：程序由语句或指令组成，计算机只能执行 低级语言 中的指令（汇编语言的指令要先转成机器码才能执行），高级语言要执行就必须先翻译成低级语言，翻译的方法有两种：编译和解释，虽然有这样的不便，但高级语言有一个好处是平台无关性。什么是平台？一种平台，就是一种体系结构，就是一种指令集，就是一种机器语言，这些都可看作是一一对应的，上文并没有用“一一对应”这个词，但读者应该能推理出这个结论，而高级语言和它们不是一一对应的，因此高级语言是平台无关的，概念之间像这样的数量对应关系尤其重要。那么编译和解释的过程有哪些不同？主要的不同在于什么时候翻译和什么时候执行。 现在回答这个思考题，根据编译和解释的不同原理，你能否在执行效率和平台无关性等方面做一下比较？ 程序的调试 编程是一件复杂的工作，因为是人做的事情，所以难免经常出错。据说有这样一个典故：早期的计算机体积都很大，有一次一台计算机不能正常工作，工程师们找了半天原因最后发现是一只臭虫钻进计算机中造成的。从此以后，程序中的错误被叫做臭虫（Bug），而找到这些Bug并加以纠正的过程就叫做调试（Debug）。有时候调试是一件非常复杂的工作，要求程序员概念明确、逻辑清晰、性格沉稳，还需要一点运气。调试的技能我们在后续的学习中慢慢培养，但首先我们要区分清楚程序中的Bug分为哪几类。 编译时错误 编译器只能翻译语法正确的程序，否则将导致编译失败，无法生成可执行文件。对于自然语言来说，一点语法错误不是很严重的问题，因为我们仍然可以读懂句子。而编译器就没那么宽容了，只要有哪怕一个很小的语法错误，编译器就会输出一条错误提示信息然后罢工，你就得不到你想要的结果。虽然大部分情况下编译器给出的错误提示信息就是你出错的代码行，但也有个别时候编译器给出的错误提示信息帮助不大，甚至会误导你。在开始学习编程的前几个星期，你可能会花大量的时间来纠正语法错误。等到有了一些经验之后，还是会犯这样的错误，不过会少得多，而且你能更快地发现错误原因。等到经验更丰富之后你就会觉得，语法错误是最简单最低级的错误，编译器的错误提示也就那么几种，即使错误提示是有误导的也能够立刻找出真正的错误原因是什么。相比下面两种错误，语法错误解决起来要容易得多。 运行时错误 编译器检查不出这类错误，仍然可以生成可执行文件，但在运行时会出错而导致程序崩溃。对于我们接下来的几章将编写的简单程序来说，运行时错误很少见，到了后面的章节你会遇到越来越多的运行时错误。读者在以后的学习中要时刻 注意区分编译时和运行时（Run-time）这两个概念 ，不仅在调试时需要区分这两个概念，在学习C语言的很多语法时都需要区分这两个概念，有些事情在编译时做，有些事情则在运行时做。 逻辑错误和语义错误 第三类错误是逻辑错误和语义错误。如果程序里有逻辑错误，编译和运行都会很顺利，看上去也不产生任何错误信息，但是程序没有干它该干的事情，而是干了别的事情。当然不管怎么样，计算机只会按你写的程序去做，问题在于你写的程序不是你真正想要的，这意味着程序的意思（即语义）是错的。找到逻辑错误在哪需要十分清醒的头脑，要通过观察程序的输出回过头来判断它到底在做什么。 调试的过程可能会让你感到一些沮丧，但调试也是编程中最需要动脑的、最有挑战和乐趣的部分。从某种角度看调试就像侦探工作，根据掌握的线索来推断是什么原因和过程导致了你所看到的结果。调试也像是一门实验科学，每次想到哪里可能有错，就修改程序然后再试一次。如果假设是对的，就能得到预期的正确结果，就可以接着调试下一个Bug，一步一步逼近正确的程序；如果假设错误，只好另外再找思路再做假设。“当你把不可能的全部剔除，剩下的——即使看起来再怎么不可能——就一定是事实。”（即使你没看过福尔摩斯也该看过柯南吧）。 也有一种观点认为，编程和调试是一回事，编程的过程就是逐步调试直到获得期望的结果为止。你应该总是从一个能正确运行的小规模程序开始，每做一步小的改动就立刻进行调试，这样的好处是总有一个正确的程序做参考：如果正确就继续编程，如果不正确，那么一定是刚才的小改动出了问题。例如，Linux操作系统包含了成千上万行代码，但它也不是一开始就规划好了内存管理、设备管理、文件系统、网络等等大的模块，一开始它仅仅是Linus Torvalds用来琢磨Intel 80386芯片而写的小程序。据Larry Greenfield 说，“Linus的早期工程之一是编写一个交替打印AAAA和BBBB的程序，这玩意儿后来进化成了Linux。”（引自The Linux User's Guide Beta1版）在后面的章节中会给出更多关于调试和编程实践的建议。 变量及其行为 变量（Variable）是编程语言最重要的概念之一。 变量是计算机存储器中的一块命名的空间，可以在里面存储一个值（Value），存储的值是可以随时变的，比如这次存个字符 'a' 下次存个字符 'b' ，正因为变量的值可以随时变所以才叫变量。 也就是说，变量有一个储存地址，该地址储存的值是可以改变的。或者说，变量是一种使用方便的占位符，用于引用计算机内存地址，变量创建后会占用一定的内存空间。 不要弄混变量和变量名，变量名是标识符的一种。 占位符 ：先占住一个固定的位置，等待值添加到该位置的符号。 变量的类型决定了它所占的存储空间的大小。 变量的行为一共有四种：声明、定义、初始化、赋值。 声明 ：告诉编译器/解析器有这个变量的存在，这个行为不分配内存空间。 定义 ：为变量分配内存空间。 实际上，从广义的角度来说，声明有两种： 引用性声明（defining declaration）：不需要建立储存空间的声明，例如 extern in a 中的变量 a 已经在别的文件中被定义。 定义性声明（referencing declaration）：需要建立储存空间的声明，例如 int a 在声明时就建立了 a 的储存空间。 可见从广义的角度来说，声明包含了定义，而并非所有的声明都是定义。一般的情况下我们常常这样叙述，把建立空间的声明称之为\"定义\"，而把不需要建立存储空间称之为\"声明\"。 定义和声明的本质区别就是：定义会给变量分配内存空间，而声明则不会。 初始化 ：在定义变量之后，系统为变量分配的内存空间内并没有值，此时值是不确定的。为保证程序的安全性和确定性，需要对这个内存空间进行初始化。初始化一般伴随着定义而产生。初始化是从无到有的过程。 如果变量的定义没有初始化，那这个最初分配的空间的值是随机的（空间上原来存储的值）。不经过初始化的变量可能会为程序带来不安全与不确定性。 赋值 ：赋值是变量值得刷新操作。赋值是从旧到新的过程。 基本术语解释 assignment ：Assignments do not copy data — they just bind names to objects. assignment操作不会拷贝，只是把名字和对象做一个绑定。也就是assignment语句是起一个绑定或重绑定的作用（bind or rebind）。函数调用的参数传递是传引用，不是拷贝。 引用（reference ） ：一个可以让程式间接存取于电脑记忆体或其他储存装置中一特定资料的值。一般而言，引用会是资料储存于记忆体或储存装置中的实体位址 。因此，引用亦常被称为==该资料==的 指标 或 位址 。 标识符（identifier，缩写为ID） ：又称为识别码，是一个用来识别不同对象的名称。 在编程语言中，标识符就是程序员自己规定的具有特定含义的词，比如函数名、方法名、类名，变量名、常量名等。 对象（object） ：是一个记忆体位址，其中拥有值，这个位址可能有标识符指向此处。台湾译作物件。对象是某个类的实例。我们将数据和对数据的操作融为一体，形成具有静态信息和动态行为的对象。 每个对象都具有一个ID、一个类型、一个值。对象一旦建立，ID便不会改变。这里所说的ID是是对象在内存中的地址，而不是identifier。 对象可以视为广义的数据，因此和普通数据一样属于某种数据类型。 标识符并不是对象的属性，一个对象可以指向不同的标识符。而管理这些名字（标识符）的事物就是“命名空间”。 命名空间（Namespace） ：名字（标识符）到对象的==映射==。 A namespace is a mapping from names to objects. 各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。 现今 Python 的大部分命名空间是通过字典来实现的，也即一个命名空间就是名字到对象的映射，标识符是键，对象则是值。 与命名空间相对的一个概念就是“作用域” 。 作用域（Scope） ：本质是一块文本区域，Python 通过该文本区域可以 直接访问 相应的命名空间。 直接访问 ：Python 中不加 . 的访问为直接访问，反之为属性访问。 命名空间与作用域的联系 ：作用域是 Python 的一块文本区域，即一块代码区域，需要代码区域引用名字（标识符）来访问变量，那么作用域与命名空间之间就有了联系。 名字作用域 ：名字可以影响到的代码文本区域。 命名空间的作用域 ：就是这个命名空间可以影响到的代码文本区域。 显然可以存在这样的一个代码文本区域，它可以被多个命名空间影响。 面向对象编程 ：基于对象概念来分析问题和设计解法，这就是面向对象编程（object-orientation programming，简称OOP）。通过OOP所得到的程序是一个由很多对象组成的系统，可以向对象发送消息来实现对数据的处理，全体对象通过相互协作来完成程序的数据处理功能。 面向过程编程 ：得到的程序是一组对数据进行操作的过程，通过按顺序执行这些过程来实现程序功能。 类的概念 类是类型概念的发展。 对象可以视为广义的数据，因此和普通数据一样属于某种数据类型。 用计算机解决问题时，首先需要明确问题中涉及哪些数据，并在程序中将这些数据用编程语言提供的数据类型表示出来，然后再去考虑需要对这些数据执行何种操作。 为了表示数据，编程语言一般提供若干 基本数据类型 （如Python的int、float、str和list等类型） ，并为这些基本类型提供相应的基本操作（如Python中对int、float、str和list都提供了+运算，尽管含义不同）。 然而，实际问题中往往涉及很复杂的数据，不能用基本数据类型直接表示。为了表示复杂数据，大体有两种办法： 一种是将复杂数据分解成若干个简单数据项，以便每个数据项可以用基本类型表示 另一种是由用户自定义新的数据类型，以便对复杂数据进行直接的、整体的表示。 例如，如果要表示一个学生的姓名，可以简单地用一个字符串数据表示；如果要表示一个学生的年龄，可以简单地用一个整数数据表示。但如果要整体表示一个“学生”，包括该学生的姓名、年龄、地址等信息，就没法用基本数据类型直接表示了。 一种解决办法是将整体的“学生”分解成姓名、年龄、地址等简单数据，并通过分别处理这些简单数据而达到处理“学生”数据的目的。但这不是好办法，因为这种表示法丢失了数据的整体性，在维护姓名、年龄、地址等数据间的联系时很麻烦。 另一种解决办法是将学生整体视为一个数据值，并为这种数据值定义新的数据类型（因为编程语言中没有现成的类型能够表示该数据）。 假设我们要为“学生“数据定义一个新的数据类型S，那么S应该是由若干更简单的数据项构成的（如学号、姓名等），我们称这些构成S的成员数据为S的属性。除了定义S类型数据的属性，还需要定义能对S数据执行什么操作（如修改姓名或年龄、读取地址等）。可以利用编程语言提供的基本类型和新类型定义机制来实现S，例如用str类型表示姓名和学号，用int类型表示年龄之类，用函数实现对S数据的操作。定义了S，就好像为编程语言添加了一个新的数据类型，应用程序就可以像使用整数、字符串等基本类型一样去使用S。 由此，我们从传统的数据类型概念发展出了“类”的概念。类（class）是广义的数据类型，能够定义复杂数据的特性，包括静态特性（即数据）和动态特性（即对数据的操作方法）。 类的值就是“对象”，也称为类的实例。 对象 vs 变量 python的入门者可能很容易把变量和对象混为一谈。在Python中，变量的准确说法应该name（名字）。 在python中，对象属于某一个类型，而名字是没有类型的。所有的名字都是内存中一个对象的“引用”，也就是说名字对应着对象的地址，而不是储存了对象本身。 例如： nfoo = 1 #一个指向int数据类型的nfoo（再次提醒，nfoo没有类型），在这里，具有类型的是1 lstFoo = [ 1 ] #一个指向list类型的lstFoo，这个list中包含一个整数1","text_tokens":["动态","值得","1c","variable","改正","几类","福尔摩斯","类","经验","相同","全部","copy","上去","just","相对","assembler","加减乘除","典故","不会","顺利","代码","第一个","移植","作答","误信","nfoo","区别","被","int","导致","即","很小","定性","实现","下面","一一","会少","助记符","计算","仍然","引自","它们","mapping","当作","很多","自增","技能","转换","占住","声明","中将","各自","信息","事实","可读","一般而言","而","判断","比较","相当","也就是说","$","得","写出","处理","就要","演化","成千上万","填","大量","对于","转换成","vs","词","out","数","from","语句","先生","变量","总是","set","script","4gl","greenfield","能否","以","无法","经过","中","：","加以","scope","第二","编译","language","据","平台","小规模","系统","大部","敲到","只要","现成","以后","考题","整体性","一旦","符号","该","访问","中不加","行","这是","作用","内存地址","[","independent","固定","两个","看出","很","看起来","复杂","数学","?","更强","echo","分解成","常量","能够","某种","存取","存储","解决问题","若干","循环","福尔","十分","行文","存储器","不仅","低级","好处","如果","还要","决定","某","任何","立刻","调用","运行","定义","大体","declarative","发展","假设","通过","namespace","high","对应","得到","失败","确定性","密切","那么","下次","和","看上去","extern","会为","消息","可移植","assignment","第","调试","工程师","之一","符","值","工程","随机","而是","这类","提供","有些","半天","程序","structured","存在","单词","建立","混为一谈","所说","需","正常","还是","只好","再试一次","测试","bug","一台","首先","难免","部分","得不到","包括","list","整数","查找","从无到有","动脑","基本概念","做","语义","编写","网络","入门者","出","2nd","实验","目前","机器指令","常","加上","内存","应用","概念","变量名","称之为","四种","一体","大部分","正确","data","链接","主要","新","5th","直到","慢慢","过头","改动","实际上","query","十六进制","操作系统","驱动","小节","柯南","实例","文件名","找到","机制","就是","可读性","面向","查","b","not","经常","错误","期望","十六",".","例外","推断","时刻","达到","开发","5.1","来说","多么","id","这些","优缺点","programming","时候","时","占位","run","编写程序","machine","一只","aaaa","机器语言","强调","稍加","见","更","上文","通过观察","文件系统","非常复杂","严重","使用方便","重名","觉得","角度","声音","目标","错","修改","platform","04","可执行文件","机器","compiler","汇编程序","用户","发现错误","在于","设计","只","成人","起","听到","时会","怎么样","第一代","第一","仅仅","为止","用","需要","我们","旧到","中要","，","图像","换成","性格","赋值","器","汇编器","知识","构成","然后","分别","执行","打印","用于","为","一般","以便","巨大","movl","发现","资料","提示符","一门","刚才","数据项","想到","等等","现在","编程语言","下来","引用","实际","\"","var","替换成","进化","节","-","认为","其中","回过头来","已经","之后","记忆","逻辑","等","比","所","组成","所有","拷贝","指示","一定","level","说","+","空间","相互","操作","会花","上面","结构","显示",";","转","静态","线索","维护","查询","2gl","一样","剩下","portable","挑战","后","函数调用","如","清醒","融为一体","上万","成员","有","写","检查","declaration","才","再次","表示法","内存空间","涉及","以上","由此","获取","sh","此处","不确定性","版本","字符","statement","指令集","运算","上","命令","source","看上","甚至","但是","编辑","文本编辑","方面","larry","a1","等到","lstfoo","可","映射","参数","内容","最早","4th","函数","获取数据","思考","自定","避免","吧","抓住","low","或重","感到","推理","编译成","generation","自己","说法","a","具有","几种","让","简称","defining","并","一共","interpret","叫","找","分配","关系","层层","遇到","广义","orientation","architecture","但","千上万","数传","各种","数据表示","在","意味","错误信息","几章","数字电","初始","不加","沮丧","地","初始值","相应","起来","两种","储存","操作方法","程式","利用","学习","高级","1st","过程","08","行程","落差","电脑","应该","容易","一条","进行","要求","句子","这样","逐步","、","同样","解释器","里","从此","丰富","又","条件","属性","保存","亦","丢失","事情","不同","哪些","这么","出来","发送到","按","摩斯","一点","规模","或者说","着","time","协作","尽量","产生","语言","方程","观点"," ","根本","仍","重要","5gl","参考","中一","无关","术语","视为","提示","位置","shell","找出","表示","像是","间","一个","第二代","你","自定义","加载","送到","不可","读者","%","出错","的","侦探","用来","每个","模块","80386","类型","叙述","词有","方式","低级语言","多","源代码","常常","为了","学生","及其","很少","存入","译成","解方程","bind","system","钻进","大","原因","原来","只能","帮助","叫做","会","一一对应","由","早期","当","地址","加减","beta1","其它","怎么","本质","行为","查询语言","称为","了","这次","并非","2","纠正","伴随","关于","硬件","例如","instruction","程序员","影响","可见","没有","类型定义","reference","先占住","子","明确规定","imperative","几个","真正","思路","存","到","不到","事物","没法","torvalds","干","'","转成","是",")","使用","交替","解决","三行","基本","linus","目的","沉稳","来","介绍","compile","linux","乘除","设备","混为","却","相互协作","键盘","一下","属于","之为","最","debug","字符串","a0","本质区别","传递","所示","宽容","含义","比如","str","名称","当前","算机","一些","也","普通","因为","编程序","小端","其他","如何","还","一种","第三类","哪里","object","顺序","oop","本身","从根本上","显然","重复","or","从","简单","误导","到底","什么","guide","会犯","个字符","中间","好","那","output","规划","可以","越来","第三","interpreter","命名","最初","绑定","融为","理应",",","上表","去","即使","描述","rebind","便","现今","能","每次","不是","汇编","一一对","格式","其次","一","管理","表格","紧凑","不便","据说","(","尽量避免","结论","to","3rd","不管","里面","而言","若干个","读取","查表","从此以后","传统","功能","提示信息","提醒","解析","之所以","反之","将","c语言","用到","系统地","如下","乐趣","获得","the","标识符","麻烦","办法","分支","同一","一行","全体","台湾","intel","汇编语言","实践","等待","识别码","整体","they","这里","eax","物件","或","明确","指向","区域","总有","考虑","编译器","后面","第一条","像","回过","正","另","则","三代","数字","图","本书","相比","数字电路","这种","是从","个别","名字","实体","（","继续","变","直接","而且","应","脚本","哪怕","objects","才能","看过","分析","尽管","举个","号","确定","意味着","各个","下","曾","应用程序","剔除","三条","多个","python","以前","这","把子","c","一件","传","想要","name","标识","完成","就是说","往往","中是","sql","方法","只是","向","不过","一组","系列","类名","独立","地用","例子","名","看作","特性","哪","思考题","性","直观","星期","位址","数据表","数据","任务","读懂","mnemonic","与","所以","接下","都","要","解法","in","越来越","分配内存","机器码","文件","前","器写","assignments","”","文本","bbbb","成千","培养","规定","编程","定义新","虽然","之间","于","抽象","基本操作","对象","工作","翻译成","一代","作用域","快","有时候","们","参数传递","问题","自然语言","预期","没法用","好像","添加","names","缩写","入门","输入","拥有","某个","少数","崩溃","当然","必然","缺点","体性","do","除了","清晰","角度看","—","建议","给","operating","input","is","一步","“","体积","回答","体系","译作","完全","何种","float","刷新","同一个","准确","再","是因为","根据","每","/","后缀","足够","章节","另外","user","助记","随时","观察","玩意","数据处理","优点","可能","）","；","数量","特定","头脑","小","绝大","掌握","一次","语法","具体","科学","value","原理","不出","然而","结果","解释","逼近","玩意儿","装置","版","c++","referencing","接着","class","关系密切","此时","？","于是","有时","后来","字典","源文件","多种","间接","各","三类","看起","接下来","文档","识别","形成","创建","替换","效率","面向对象编程","输出","琢磨","回事","最有","给出","年龄","二代","联系","program","不能","人","标准","否则","一块","占用","不","]","分为","体系结构","结合","先","告诉","一对","bin","释器","进制","它","臭虫","内部","只会","此外","数据类型","存储空间","通常","芯片","没","把","s","安全","键","弄混","安全性","方便","区分","初始化","基于","学号","分解","=","必须","总结","最后","因此","绝大部分","屏幕","java","包含","情况","就","对","清楚","驱动程序","后续","指标","或者","尤其","大小","内","解决办法","。","占","翻译","一系","姓名","如学","电路","之类","1gl","0x804a01c","花","专门","指令","别的","非常","改变","运气","带来","注意","1","这个","只有","code","意思","不要","自然","不用","保证","记忆体","#","时间","本","语法错误","指","结构化","罢工","解析器","看到","造成","计算机","成","过","发送","一系列","称","以下","assembly","很大","生成","3gl","开始","identifier","第三代","!","执行程序"],"title":"1.2.基本概念","title_tokens":["基本","1.2",".","概念","基本概念"]},{"location":"计算机基础/1.2.基本概念.html#_1","text":"程序（Program） 告诉计算机应如何完成一个计算任务，这里的计算可以是数学运算，比如解方程，也可以是符号运算，比如查找和替换文档中的某个单词。从根本上说，==计算机是由数字电路组成的运算机器，只能对数字做运算，程序之所以能做符号运算，是因为符号在计算机内部也是用数字表示的。==此外，程序还可以处理声音和图像，声音和图像在计算机内部必然也是用数字表示的，这些数字经过专门的硬件设备转换成人可以听到、看到的声音和图像。 程序由一系列 指令（Instruction） 组成，指令是指示计算机做某种运算的命令，通常包括以下几类： 输入（Input）：从键盘、文件或者其它设备获取数据。 输出（Output）：把数据显示到屏幕，或者存入一个文件，或者发送到其它设备。 基本运算：执行最基本的数学运算（加减乘除）和数据存取。 测试和分支：测试某个条件，然后根据不同的测试结果执行不同的后续指令。 循环：重复执行一系列操作。 对于程序来说，有上面这几类指令就足够了。你曾用过的任何一个程序，不管它有多么复杂，都是由这几类指令组成的。程序是那么的复杂，而编写程序可以用的指令却只有这么简单的几种，这中间巨大的落差就要由程序员去填了，所以编写程序理应是一件相当复杂的工作。 编写程序可以说就是这样一个过程：把复杂的任务分解成子任务，把子任务再分解成更简单的任务，层层分解，直到最后简单得可以用以上指令来完成。 编程语言 ：编程语言（Programming Language）分为低级语言（Low-level Language）和高级语言（High-level Language）。 机器语言（Machine Language）和汇编语言（Assembly Language）属于低级语言，直接用计算机指令编写程序。而C、C++、Java、Python等属于高级语言，用语句（Statement）编写程序，==语句是计算机指令的抽象表示。==举个例子，同样一个语句用C语言、汇编语言和机器语言分别表示如下： 低级编程语言使用计算机指令编写程序； 高级编程语言使用语句编写程序。 计算机只能对数字做运算，符号、声音、图像在计算机内部都要用数字表示，指令也不例外，上表中的机器语言完全由十六进制数字组成。最早的程序员都是直接用机器语言编程，但是很麻烦，需要查大量的表格来确定每个数字表示什么意思，编写出来的程序很不直观，而且容易出错，于是有了==汇编语言，把机器语言中一组一组的数字用助记符（Mnemonic）表示，直接用这些助记符写出汇编程序，然后让汇编器（Assembler）去查表把助记符替换成数字，也就把汇编语言翻译成了机器语言。 从上面的例子可以看出，==汇编语言和机器语言的指令是一一对应的，汇编语言有三条指令，机器语言也有三条指令，汇编器就是做一个简单的替换工作 ，例如在第一条指令中，把 movl ?,%eax 这种格式的指令替换成机器码 a1 ? ，?表示一个地址，在汇编指令中是 0x804a01c ，转换成机器码之后是 1c a0 04 08 （这是指令中的十六进制数的小端表示，小端表示将在 第 5.1 节 “目标文件” 介绍）。 从上面的例子还可以看出，==高级语言的语句和低级语言的指令之间不是简单的一一对应关系，==一条 a=b+1; 语句要翻译成三条汇编或机器指令，这个过程称为 编译（Compile） ，由编译器（Compiler）来完成，显然编译器的功能比汇编器要复杂得多。用高级语言编写的程序必须经过编译转成机器指令才能被计算机执行，编译需要花一些时间，这是用高级语言编程的一个缺点，然而更多的是优点。首先，用高级语言编程更容易，写出来的代码更紧凑，可读性更强，出了错也更容易改正。其次，高级语言是可移植的（Portable）或者称为平台无关的（Platform Independent）。 平台 这个词有很多种解释，可以指计算机体系结构（Architecture），也可以指操作系统（Operating System），也可以指开发平台（编译器、链接器等）。不同的计算机体系结构有不同的指令集（Instruction Set），可以识别的机器指令格式是不同的，直接用某种体系结构的汇编或机器指令写出来的程序只能在这种体系结构的计算机上运行，然而各种体系结构的计算机都有各自的C编译器，可以把C程序编译成各种不同体系结构的机器指令，这意味着用C语言写的程序只需稍加修改甚至不用修改就可以在各种不同的计算机上编译运行。各种高级语言都具有C语言的这些优点，所以绝大部分程序是用高级语言编写的，只有和硬件关系密切的少数程序（例如驱动程序）才会用到低级语言。还要注意一点，即使在相同的体系结构和操作系统下，用不同的C编译器（或者同一个C编译器的不同版本）编译同一个程序得到的结果也有可能不同，C语言有些语法特性在C标准中并没有明确规定，各编译器有不同的实现，编译出来的指令的行为特性也会不同，应该尽量避免使用不可移植的语法特性。 总结一下编译执行的过程，首先你用文本编辑器写一个C程序，然后保存成一个文件，例如 program.c （通常C程序的文件名后缀是 .c ），这称为源代码（Source Code）或源文件，然后运行编译器对它进行编译，编译的过程并不执行程序，而是把源代码全部翻译成机器指令，再加上一些描述信息，生成一个新的文件，例如 a.out ，这称为可执行文件，可执行文件可以被操作系统加载运行，计算机执行该文件中由编译器生成的指令，如下图所示： 有些高级语言以解释（Interpret）的方式执行，解释执行过程和C语言的编译执行过程很不一样。例如编写一个Shell脚本 script.sh ，内容如下： #! /bin/sh VAR = 1 VAR = $(( $VAR + 1 )) echo $VAR 定义Shell变量 VAR 的初始值是1，然后自增1，然后打印 VAR 的值。用Shell程序 /bin/sh 解释执行这个脚本，结果如下： $ / bin / sh script . sh 2 这里的 /bin/sh 称为解释器（Interpreter），它把脚本中的每一行当作一条命令解释执行，而不需要先生成包含机器指令的可执行文件再执行。如果把脚本中的这三行当作三条命令直接敲到Shell提示符下，也能得到同样的结果： $ VAR = 1 $ VAR = $ (( $ VAR + 1 )) $ echo $ VAR 2 编程语言仍在发展演化。以上介绍的机器语言称为第一代语言（1GL，1st Generation Programming Language），汇编语言称为第二代语言（2GL，2nd Generation Programming Language），C、C++、Java、Python等可以称为第三代语言（3GL，3rd Generation Programming Language）。目前已经有了4GL（4th Generation Programming Language）和5GL（5th Generation Programming Language）的概念。3GL的编程语言虽然是用语句编程而不直接用指令编程，但语句也分为输入、输出、基本运算、测试分支和循环等几种，和指令有直接的对应关系。而4GL以后的编程语言更多是描述要做什么（Declarative）而不描述具体一步一步怎么做（Imperative），具体一步一步怎么做完全由编译器或解释器决定，例如SQL语言（SQL，Structured Query Language，结构化查询语言）就是这样的例子。","text_tokens":["1c","改正","几类","相同","全部","assembler","加减乘除","代码","移植","被","实现","一一","助记符","计算","当作","自增","转换","各自","信息","可读","而","相当","$","得","写出","处理","就要","演化","填","大量","对于","转换成","out","数","语句","先生","变量","set","script","4gl","以","经过","中","：","第二","编译","language","平台","系统","大部","敲到","以后","符号","该","这是","independent","看出","很","复杂","数学","?","更强","echo","分解成","某种","存取","循环","行文","低级","如果","还要","决定","任何","运行","定义","declarative","发展","high","对应","得到","密切","那么","和","可移植","第","值","而是","有些","程序","structured","单词","需","测试","首先","部分","包括","查找","做","编写","出","2nd","目前","机器指令","加上","概念","大部分","链接","新","5th","直到","query","十六进制","操作系统","驱动","文件名","就是","可读性","查","b","十六",".","例外","开发","5.1","来说","多么","这些","programming","编写程序","machine","机器语言","稍加","更","声音","目标","错","修改","platform","04","可执行文件","机器","compiler","汇编程序","只","成人","听到","第一代","第一","用","需要","，","图像","换成","器","汇编器","然后","分别","执行","打印","巨大","movl","提示符","编程语言","var","替换成","节","-","已经","之后","等","比","组成","指示","level","说","+","操作","上面","结构","显示",";","转","查询","2gl","一样","portable","有","写","才","以上","获取","sh","版本","statement","指令集","运算","上","命令","source","甚至","但是","编辑","文本编辑","a1","内容","最早","4th","获取数据","避免","low","编译成","generation","a","具有","几种","让","并","interpret","关系","层层","architecture","但","各种","在","意味","数字电","初始","初始值","高级","1st","过程","08","行程","落差","应该","容易","一条","进行","这样","、","同样","解释器","条件","保存","不同","这么","出来","发送到","一点","尽量","语言","方程"," ","根本","仍","5gl","无关","提示","shell","表示","一个","第二代","你","加载","送到","不可","%","出错","的","每个","词有","方式","低级语言","多","源代码","存入","译成","解方程","system","只能","会","一一对应","由","地址","加减","其它","怎么","行为","查询语言","称为","了","2","硬件","例如","instruction","程序员","没有","子","明确规定","imperative","到","是",")","使用","三行","基本","来","介绍","compile","乘除","设备","却","键盘","一下","属于","最","a0","所示","比如","算机","一些","也","因为","编程序","小端","如何","还","从根本上","显然","重复","从","简单","什么","中间","output","可以","第三","interpreter","理应",",","上表","去","即使","描述","能","不是","汇编","一一对","格式","其次","表格","紧凑","(","尽量避免","3rd","不管","查表","功能","之所以","将","c语言","用到","如下","麻烦","分支","同一","一行","汇编语言","这里","eax","或","明确","编译器","第一条","三代","数字","图","数字电路","这种","（","直接","而且","应","脚本","才能","举个","确定","意味着","下","曾","三条","python","这","把子","c","一件","完成","中是","sql","一组","系列","例子","特性","直观","数据","任务","mnemonic","所以","都","要","机器码","文件","器写","”","文本","规定","编程","虽然","之间","抽象","工作","翻译成","一代","输入","某个","少数","必然","缺点","operating","input","一步","“","体系","完全","同一个","再","是因为","根据","每","/","后缀","足够","助记","优点","可能","）","；","绝大","语法","具体","然而","结果","解释","c++","关系密切","于是","源文件","多种","各","文档","识别","替换","输出","二代","program","标准","不","分为","体系结构","告诉","一对","bin","释器","进制","它","内部","此外","通常","把","分解","=","必须","总结","最后","绝大部分","屏幕","java","包含","就","对","驱动程序","后续","或者","。","翻译","一系","电路","1gl","0x804a01c","花","专门","指令","注意","1","这个","只有","code","意思","不用","#","时间","指","结构化","看到","计算机","成","过","发送","一系列","以下","assembly","生成","3gl","第三代","!","执行程序"],"title":"程序和编程语言","title_tokens":["编程语言","语言","程序","和","编程"]},{"location":"计算机基础/1.2.基本概念.html#_2","text":"这是我们的第一个思考题。本书的思考题通常要求读者系统地总结当前小节的知识，结合以前的知识，并经过一定的推理，然后作答。本书强调的是基本概念，读者应该抓住概念的定义和概念之间的关系来总结，比如本节介绍了很多概念：程序由语句或指令组成，计算机只能执行 低级语言 中的指令（汇编语言的指令要先转成机器码才能执行），高级语言要执行就必须先翻译成低级语言，翻译的方法有两种：编译和解释，虽然有这样的不便，但高级语言有一个好处是平台无关性。什么是平台？一种平台，就是一种体系结构，就是一种指令集，就是一种机器语言，这些都可看作是一一对应的，上文并没有用“一一对应”这个词，但读者应该能推理出这个结论，而高级语言和它们不是一一对应的，因此高级语言是平台无关的，概念之间像这样的数量对应关系尤其重要。那么编译和解释的过程有哪些不同？主要的不同在于什么时候翻译和什么时候执行。 现在回答这个思考题，根据编译和解释的不同原理，你能否在执行效率和平台无关性等方面做一下比较？","text_tokens":["一个","看作","时候","思考题","性","你","读者","机器语言","的","强调","上文","低级语言","都","要","译成","第一个","作答","机器码","”","机器","只能","在于","一一","一一对应","由","计算","虽然","之间","它们","第一","很多","我们","用","翻译成","，","知识","了","然后","执行","而","比较","没有","现在","词","语句","节","转成","“","是","体系","回答","能否","经过","基本","：","中","编译","来","介绍","等","根据","组成","平台","系统","一定","一下","考题","）","结构","数量","这是","比如","原理","当前","算机","有","解释","一种","？","低级","好处","什么","指令集","定义","效率","方面","能","不是","汇编","一一对","可","对应","不便","那么","结论","和","思考","结合","体系结构","先","一对","抓住","系统地","推理","程序","通常","并","汇编语言","关系","必须","但","总结","因此","或","在","基本概念","就","做","像","出","尤其","。","本书","翻译","两种","概念","高级","过程","（","要求","应该","主要","这样","指令","才能","小节","这个","就是","不同","哪些","以前","本","计算机","语言","方法"," ","重要","无关","这些"],"title":"解释执行的语言相比编译执行的语言有什么优缺点？","title_tokens":["相比","缺点","什么","语言","执行","编译","有","解释","的","优缺点","？"]},{"location":"计算机基础/1.2.基本概念.html#_3","text":"编程是一件复杂的工作，因为是人做的事情，所以难免经常出错。据说有这样一个典故：早期的计算机体积都很大，有一次一台计算机不能正常工作，工程师们找了半天原因最后发现是一只臭虫钻进计算机中造成的。从此以后，程序中的错误被叫做臭虫（Bug），而找到这些Bug并加以纠正的过程就叫做调试（Debug）。有时候调试是一件非常复杂的工作，要求程序员概念明确、逻辑清晰、性格沉稳，还需要一点运气。调试的技能我们在后续的学习中慢慢培养，但首先我们要区分清楚程序中的Bug分为哪几类。 编译时错误 编译器只能翻译语法正确的程序，否则将导致编译失败，无法生成可执行文件。对于自然语言来说，一点语法错误不是很严重的问题，因为我们仍然可以读懂句子。而编译器就没那么宽容了，只要有哪怕一个很小的语法错误，编译器就会输出一条错误提示信息然后罢工，你就得不到你想要的结果。虽然大部分情况下编译器给出的错误提示信息就是你出错的代码行，但也有个别时候编译器给出的错误提示信息帮助不大，甚至会误导你。在开始学习编程的前几个星期，你可能会花大量的时间来纠正语法错误。等到有了一些经验之后，还是会犯这样的错误，不过会少得多，而且你能更快地发现错误原因。等到经验更丰富之后你就会觉得，语法错误是最简单最低级的错误，编译器的错误提示也就那么几种，即使错误提示是有误导的也能够立刻找出真正的错误原因是什么。相比下面两种错误，语法错误解决起来要容易得多。 运行时错误 编译器检查不出这类错误，仍然可以生成可执行文件，但在运行时会出错而导致程序崩溃。对于我们接下来的几章将编写的简单程序来说，运行时错误很少见，到了后面的章节你会遇到越来越多的运行时错误。读者在以后的学习中要时刻 注意区分编译时和运行时（Run-time）这两个概念 ，不仅在调试时需要区分这两个概念，在学习C语言的很多语法时都需要区分这两个概念，有些事情在编译时做，有些事情则在运行时做。 逻辑错误和语义错误 第三类错误是逻辑错误和语义错误。如果程序里有逻辑错误，编译和运行都会很顺利，看上去也不产生任何错误信息，但是程序没有干它该干的事情，而是干了别的事情。当然不管怎么样，计算机只会按你写的程序去做，问题在于你写的程序不是你真正想要的，这意味着程序的意思（即语义）是错的。找到逻辑错误在哪需要十分清醒的头脑，要通过观察程序的输出回过头来判断它到底在做什么。 调试的过程可能会让你感到一些沮丧，但调试也是编程中最需要动脑的、最有挑战和乐趣的部分。从某种角度看调试就像侦探工作，根据掌握的线索来推断是什么原因和过程导致了你所看到的结果。调试也像是一门实验科学，每次想到哪里可能有错，就修改程序然后再试一次。如果假设是对的，就能得到预期的正确结果，就可以接着调试下一个Bug，一步一步逼近正确的程序；如果假设错误，只好另外再找思路再做假设。“当你把不可能的全部剔除，剩下的——即使看起来再怎么不可能——就一定是事实。”（即使你没看过福尔摩斯也该看过柯南吧）。 也有一种观点认为，编程和调试是一回事，编程的过程就是逐步调试直到获得期望的结果为止。你应该总是从一个能正确运行的小规模程序开始，每做一步小的改动就立刻进行调试，这样的好处是总有一个正确的程序做参考：如果正确就继续编程，如果不正确，那么一定是刚才的小改动出了问题。例如，Linux操作系统包含了成千上万行代码，但它也不是一开始就规划好了内存管理、设备管理、文件系统、网络等等大的模块，一开始它仅仅是Linus Torvalds用来琢磨Intel 80386芯片而写的小程序。据Larry Greenfield 说，“Linus的早期工程之一是编写一个交替打印AAAA和BBBB的程序，这玩意儿后来进化成了Linux。”（引自The Linux User's Guide Beta1版）在后面的章节中会给出更多关于调试和编程实践的建议。","text_tokens":["几类","福尔摩斯","经验","全部","上去","典故","顺利","代码","误信","被","导致","即","很小","下面","会少","仍然","计算","引自","技能","很多","信息","事实","而","判断","得","成千上万","大量","对于","总是","greenfield","无法","：","中","加以","编译","据","小规模","大部","系统","只要","以后","该","行","两个","很","看起来","复杂","能够","某种","福尔","十分","行文","不仅","低级","好处","如果","立刻","任何","运行","假设","通过","失败","得到","那么","和","看上去","调试","工程师","之一","工程","这类","而是","有些","半天","程序","正常","还是","只好","再试一次","bug","一台","难免","首先","得不到","部分","动脑","做","语义","编写","网络","出","实验","内存","概念","正确","大部分","直到","慢慢","过头","改动","操作系统","柯南","找到","就是","错误","经常","期望","推断","时刻","来说","这些","时候","时","run","一只","aaaa","见","通过观察","更","文件系统","非常复杂","严重","觉得","角度","错","修改","可执行文件","发现错误","在于","怎么样","时会","仅仅","为止","我们","需要","中要","，","性格","然后","执行","打印","发现","一门","刚才","想到","等等","下来","进化","-","认为","回过头来","之后","逻辑","所","一定","说","操作","会花","线索","剩下","挑战","清醒","上万","有","检查","写","看上","甚至","但是","larry","等到","吧","感到","几种","让","并","找","遇到","但","千上万","在","意味","错误信息","几章","沮丧","地","起来","两种","学习","过程","要求","容易","一条","应该","进行","句子","这样","逐步","、","里","从此","丰富","事情","按","摩斯","规模","一点","time","产生","语言","观点"," ","参考","提示","找出","像是","一个","你","读者","出错","的","侦探","用来","模块","80386","多","很少","钻进","大","原因","只能","帮助","叫做","会","早期","当","beta1","怎么","了","纠正","关于","例如","程序员","没有","真正","几个","思路","不到","到","torvalds","干","'","是","交替","解决","linus","沉稳","来","linux","设备","最","debug","宽容","算机","一些","也","因为","还","第三类","一种","哪里","从","简单","误导","到底","什么","guide","会犯","好","规划","可以","越来","第三","去","即使","能","每次","不是","一","管理","据说","不管","从此以后","提示信息","将","c语言","乐趣","获得","the","intel","实践","明确","总有","编译器","后面","回过","像","则","相比","个别","（","继续","而且","哪怕","看过","意味着","下","剔除","这","一件","想要","不过","哪","星期","读懂","所以","接下","都","要","越来越","文件","前","”","bbbb","成千","培养","编程","虽然","工作","快","有时候","们","问题","自然语言","预期","崩溃","当然","清晰","角度看","—","建议","一步","“","体积","章节","根据","再","每","user","另外","观察","玩意","可能","）","；","头脑","小","掌握","一次","语法","科学","不出","结果","逼近","玩意儿","版","接着","有时","后来","三类","看起","接下来","输出","琢磨","回事","最有","给出","不能","人","否则","不","分为","臭虫","它","只会","芯片","没","把","s","区分","最后","包含","情况","就","对","清楚","后续","。","翻译","别的","非常","运气","注意","意思","自然","时间","语法错误","罢工","看到","造成","计算机","成","很大","生成","开始"],"title":"程序的调试","title_tokens":["的","程序","调试"]},{"location":"计算机基础/1.2.基本概念.html#_4","text":"变量（Variable）是编程语言最重要的概念之一。 变量是计算机存储器中的一块命名的空间，可以在里面存储一个值（Value），存储的值是可以随时变的，比如这次存个字符 'a' 下次存个字符 'b' ，正因为变量的值可以随时变所以才叫变量。 也就是说，变量有一个储存地址，该地址储存的值是可以改变的。或者说，变量是一种使用方便的占位符，用于引用计算机内存地址，变量创建后会占用一定的内存空间。 不要弄混变量和变量名，变量名是标识符的一种。 占位符 ：先占住一个固定的位置，等待值添加到该位置的符号。 变量的类型决定了它所占的存储空间的大小。 变量的行为一共有四种：声明、定义、初始化、赋值。 声明 ：告诉编译器/解析器有这个变量的存在，这个行为不分配内存空间。 定义 ：为变量分配内存空间。 实际上，从广义的角度来说，声明有两种： 引用性声明（defining declaration）：不需要建立储存空间的声明，例如 extern in a 中的变量 a 已经在别的文件中被定义。 定义性声明（referencing declaration）：需要建立储存空间的声明，例如 int a 在声明时就建立了 a 的储存空间。 可见从广义的角度来说，声明包含了定义，而并非所有的声明都是定义。一般的情况下我们常常这样叙述，把建立空间的声明称之为\"定义\"，而把不需要建立存储空间称之为\"声明\"。 定义和声明的本质区别就是：定义会给变量分配内存空间，而声明则不会。 初始化 ：在定义变量之后，系统为变量分配的内存空间内并没有值，此时值是不确定的。为保证程序的安全性和确定性，需要对这个内存空间进行初始化。初始化一般伴随着定义而产生。初始化是从无到有的过程。 如果变量的定义没有初始化，那这个最初分配的空间的值是随机的（空间上原来存储的值）。不经过初始化的变量可能会为程序带来不安全与不确定性。 赋值 ：赋值是变量值得刷新操作。赋值是从旧到新的过程。","text_tokens":["一个","时","占位","值得","性","variable","类型","的","与","叙述","所以","都","常常","使用方便","in","角度","不会","分配内存","文件","区别","被","int","原来","定性","编程","会","计算","地址","声明","我们","占住","需要","旧到","，","本质","行为","赋值","了","这次","并非","为","而","用于","伴随","也就是说","例如","一般","添加","可见","没有","编程语言","存","引用","先占住","实际","\"","到","给","变量","'","是","使用","已经","之后","：","中","经过","刷新","编译","所","/","随时","所有","系统","一定","空间","可能","之为","）","最","该","符号","操作","本质区别","内存地址","固定","比如","后","value","算机","有","因为","一种","declaration","存储","才","referencing","此时","内存空间","从","存储器","不确定性","如果","个字符","决定","字符","那","可以","命名","最初","创建","定义","上","一块","确定性","占用","下次","会为","和","不","extern","里面","解析","之一","符","值","告诉","随机","它","标识符","存储空间","存在","程序","a","建立","defining","把","一共","并","安全","弄混","安全性","叫","方便","分配","等待","初始化","广义","在","从无到有","包含","情况","就","对","正","初始","编译器","或者","大小","则","内","。","占","储存","内存","两种","是从","概念","变量名","称之为","四种","过程","（","变","进行","新","这样","、","改变","实际上","别的","确定","带来","下","这个","就是","保证","不要","或者说","着","解析器","b","标识","就是说","计算机","产生","语言"," ","重要","来说","位置"],"title":"变量及其行为","title_tokens":["变量","及其","行为"]},{"location":"计算机基础/1.2.基本概念.html#_5","text":"assignment ：Assignments do not copy data — they just bind names to objects. assignment操作不会拷贝，只是把名字和对象做一个绑定。也就是assignment语句是起一个绑定或重绑定的作用（bind or rebind）。函数调用的参数传递是传引用，不是拷贝。 引用（reference ） ：一个可以让程式间接存取于电脑记忆体或其他储存装置中一特定资料的值。一般而言，引用会是资料储存于记忆体或储存装置中的实体位址 。因此，引用亦常被称为==该资料==的 指标 或 位址 。 标识符（identifier，缩写为ID） ：又称为识别码，是一个用来识别不同对象的名称。 在编程语言中，标识符就是程序员自己规定的具有特定含义的词，比如函数名、方法名、类名，变量名、常量名等。 对象（object） ：是一个记忆体位址，其中拥有值，这个位址可能有标识符指向此处。台湾译作物件。对象是某个类的实例。我们将数据和对数据的操作融为一体，形成具有静态信息和动态行为的对象。 每个对象都具有一个ID、一个类型、一个值。对象一旦建立，ID便不会改变。这里所说的ID是是对象在内存中的地址，而不是identifier。 对象可以视为广义的数据，因此和普通数据一样属于某种数据类型。 标识符并不是对象的属性，一个对象可以指向不同的标识符。而管理这些名字（标识符）的事物就是“命名空间”。 命名空间（Namespace） ：名字（标识符）到对象的==映射==。 A namespace is a mapping from names to objects. 各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。 现今 Python 的大部分命名空间是通过字典来实现的，也即一个命名空间就是名字到对象的映射，标识符是键，对象则是值。 与命名空间相对的一个概念就是“作用域” 。 作用域（Scope） ：本质是一块文本区域，Python 通过该文本区域可以 直接访问 相应的命名空间。 直接访问 ：Python 中不加 . 的访问为直接访问，反之为属性访问。 命名空间与作用域的联系 ：作用域是 Python 的一块文本区域，即一块代码区域，需要代码区域引用名字（标识符）来访问变量，那么作用域与命名空间之间就有了联系。 名字作用域 ：名字可以影响到的代码文本区域。 命名空间的作用域 ：就是这个命名空间可以影响到的代码文本区域。 显然可以存在这样的一个代码文本区域，它可以被多个命名空间影响。 面向对象编程 ：基于对象概念来分析问题和设计解法，这就是面向对象编程（object-orientation programming，简称OOP）。通过OOP所得到的程序是一个由很多对象组成的系统，可以向对象发送消息来实现对数据的处理，全体对象通过相互协作来完成程序的数据处理功能。 面向过程编程 ：得到的程序是一组对数据进行操作的过程，通过按顺序执行这些过程来实现程序功能。","text_tokens":["名","动态","一个","位址","数据","类","类型","的","用来","每个","所以","与","just","copy","都","相对","解法","重名","不会","bind","代码","assignments","被","”","即","文本","实现","规定","编程","会","programming","设计","由","起","之间","于","mapping","地址","很多","我们","需要","对象","作用域","，","信息","行为","本质","称为","一般而言","参数传递","了","为","而","问题","执行","一般","程序员","资料","影响","缩写","names","处理","没有","reference","拥有","某个","引用","编程语言","do","词","from","is","—","事物","到","语句","变量","“","-","是","译作","其中","：","记忆","中","scope","等","来","所","组成","拷贝","数据处理","大部","系统","相互协作","可能","空间","属于","）","操作","该","一旦","相互","访问","中不加","作用","特定","传递","静态","含义","一样","比如","函数调用","名称","融为一体","普通","也","有","其他","装置","常量","存取","object","某种","顺序","oop","显然","or","字典","此处","间接","各个","绑定","可以","融为","识别","调用","形成","命名","任何","面向对象编程","rebind","便","现今","namespace","不是","通过","管理","映射","联系","参数","得到","不能","一块","消息","函数","那么","to","和","而言","assignment","功能","值","反之","将","它","标识符","或重","数据类型","程序","自己","存在","a","具有","让","建立","简称","全体","台湾","把","所说","并","键","识别码","关系","基于","广义","orientation","they","=","这里","但","数传","物件","因此","或","部分","在","就","指向","做","对","区域","指标","不加","则","。","相应","储存","常","内存","程式","概念","变量名","名字","一体","大部分","实体","data","电脑","过程","（","进行","objects","直接","这样","、","分析","属性","改变","又","实例","这个","亦","就是","不同","按","多个","记忆体","python","面向","这","协作","传","标识","not","完成",".","语言","发送","方法","只是"," ","视为","向","中一","identifier","一组","id","这些","类名","独立"],"title":"基本术语解释","title_tokens":["基本","术语","解释"]},{"location":"计算机基础/1.2.基本概念.html#_6","text":"类是类型概念的发展。 对象可以视为广义的数据，因此和普通数据一样属于某种数据类型。 用计算机解决问题时，首先需要明确问题中涉及哪些数据，并在程序中将这些数据用编程语言提供的数据类型表示出来，然后再去考虑需要对这些数据执行何种操作。 为了表示数据，编程语言一般提供若干 基本数据类型 （如Python的int、float、str和list等类型） ，并为这些基本类型提供相应的基本操作（如Python中对int、float、str和list都提供了+运算，尽管含义不同）。 然而，实际问题中往往涉及很复杂的数据，不能用基本数据类型直接表示。为了表示复杂数据，大体有两种办法： 一种是将复杂数据分解成若干个简单数据项，以便每个数据项可以用基本类型表示 另一种是由用户自定义新的数据类型，以便对复杂数据进行直接的、整体的表示。 例如，如果要表示一个学生的姓名，可以简单地用一个字符串数据表示；如果要表示一个学生的年龄，可以简单地用一个整数数据表示。但如果要整体表示一个“学生”，包括该学生的姓名、年龄、地址等信息，就没法用基本数据类型直接表示了。 一种解决办法是将整体的“学生”分解成姓名、年龄、地址等简单数据，并通过分别处理这些简单数据而达到处理“学生”数据的目的。但这不是好办法，因为这种表示法丢失了数据的整体性，在维护姓名、年龄、地址等数据间的联系时很麻烦。 另一种解决办法是将学生整体视为一个数据值，并为这种数据值定义新的数据类型（因为编程语言中没有现成的类型能够表示该数据）。 假设我们要为“学生“数据定义一个新的数据类型S，那么S应该是由若干更简单的数据项构成的（如学号、姓名等），我们称这些构成S的成员数据为S的属性。除了定义S类型数据的属性，还需要定义能对S数据执行什么操作（如修改姓名或年龄、读取地址等）。可以利用编程语言提供的基本类型和新类型定义机制来实现S，例如用str类型表示姓名和学号，用int类型表示年龄之类，用函数实现对S数据的操作。定义了S，就好像为编程语言添加了一个新的数据类型，应用程序就可以像使用整数、字符串等基本类型一样去使用S。 由此，我们从传统的数据类型概念发展出了“类”的概念。类（class）是广义的数据类型，能够定义复杂数据的特性，包括静态特性（即数据）和动态特性（即对数据的操作方法）。 类的值就是“对象”，也称为类的实例。","text_tokens":["间","动态","一个","时","自定义","特性","数据表","数据","没法用","类","类型","的","每个","更","都","学生","要","为了","修改","int","”","即","用户","实现","编程","定义新","由","计算","地址","用","基本操作","需要","对象","中将","我们","，","信息","构成","称为","了","然后","问题","执行","为","分别","而","一般","以便","例如","好像","处理","添加","没有","类型定义","体性","编程语言","实际","除了","没法","“","是","float","何种","使用","解决","目的","基本","中","：","等","来","再","现成","+","属于","整体性","）","操作","字符串","该","；","静态","维护","一样","含义","如","str","很","算机","普通","复杂","也","然而","有","数据项","分解成","因为","成员","解决问题","某种","一种","能够","若干","还","表示法","class","涉及","从","由此","简单","如果","什么","字符","好","可以","运算","大体","定义","去","发展","假设","能","通过","不是","年龄","联系","不能","那么","若干个","和","读取","函数","传统","自定","值","提供","将","数据类型","程序","麻烦","办法","s","并","整体","广义","学号","首先","分解","list","但","包括","数据表示","因此","整数","或","在","就","明确","对","考虑","像","另","出","解决办法","。","相应","两种","姓名","这种","如学","利用","应用","概念","操作方法","之类","（","进行","应该","直接","新","、","尽管","号","属性","应用程序","实例","机制","丢失","就是","不同","哪些","出来","python","这","计算机","往往","语言","达到","方法"," ","视为","称","这些","地用","表示"],"title":"类的概念","title_tokens":["类","的","概念"]},{"location":"计算机基础/1.2.基本概念.html#vs","text":"python的入门者可能很容易把变量和对象混为一谈。在Python中，变量的准确说法应该name（名字）。 在python中，对象属于某一个类型，而名字是没有类型的。所有的名字都是内存中一个对象的“引用”，也就是说名字对应着对象的地址，而不是储存了对象本身。 例如： nfoo = 1 #一个指向int数据类型的nfoo（再次提醒，nfoo没有类型），在这里，具有类型的是1 lstFoo = [ 1 ] #一个指向list类型的lstFoo，这个list中包含一个整数1","text_tokens":["在","一个","引用","包含","指向","入门者","某","数据","变量","的","类型","“","是","。","都","储存","内存","中","：","不是","lstfoo","准确","名字","对应","所有","nfoo","（","混为","应该","容易","和","”","int","]","可能","提醒","属于","）","1","这个","地址","就是","[","说法","对象","着","数据类型","python","#","，","具有","混为一谈","name","把","很","就是说","了","而","也就是说"," ","例如","再次","入门","list","没有","本身","=","这里","整数"],"title":"对象  vs  变量","title_tokens":["vs","变量","对象"," "]},{"location":"计算机基础/1.3.编译型语言和解释型语言的优缺点对比.html","text":"编译型语言和解释型语言的优缺点对比 编程语言可以分为：完全的编译型，纯粹的解释型或者两者相互混合的编程语言。实际上，大部分现有的编程语言都同时拥有其编译型和解释型版本。 编译型语言和解释型语言分别有其各自的优势和不足。下面从编译型语言开始介绍。 编译型语言： 编译型语言最大的优势之一就是其执行速度。用C/C++编写的程序运行速度要比用Java编写的相同程序快30%-70%。 编译型程序比解释型程序消耗的内存更少。 不利的一面——编译器比解释器要难写得多。 编译器在调试程序时提供不了多少帮助——有多少次在你的C语言代码中遇到一个“空指针异常”时，需要花费好几个小时来明确错误到底在代码中的什么位置。 可执行的编译型代码要比相同的解释型代码大许多。例如，C/C++的.exe文件要比同样功能的Java的.class文件大很多。 编译型程序是面向特定平台的因而是平台依赖的。 编译型程序不支持代码中实现安全性——例如，一个编译型的程序可以访问内存的任何区域，并且可以对你的PC做它想做的任何事情（大部分病毒是使用编译型语言编写的） 由于松散的安全性和平台依赖性，编译型语言不太适合开发因特网或者基于Web的应用。 解释型语言： 解释型语言提供了极佳的调试支持。一名Java程序员只需要几分钟就可以定位并修复一个“空指针异常”，因为Java运行环境不仅指明了异常的性质，而且给出了异常发生位置具体的行号和函数调用顺序（著名的堆栈跟踪信息）。这样的便利是编译型语言所无法提供的。 另一个优势是解释器比编译器容易实现 解释型语言最大的优势之一是其平台独立性 解释型语言也可以保证高度的安全性——这是互联网应用迫切需要的 中间语言代码的大小比编译型可执行代码小很多 平台独立性，以及严密的安全性是使解释型语言成为适合互联网和Web应用的理想语言的2个最重要的因素。 解释型语言存在一些严重的缺点。解释型应用占用更多的内存和CPU资源。这是由于，为了运行解释型语言编写的程序，相关的解释器必须首先运行。解释器是复杂的，智能的，大量消耗资源的程序并且它们会占用很多CPU周期和内存。 由于解释型应用的decode-fetch-execute（解码-抓取-执行）的周期，它们比编译型程序慢很多。 解释器也会做很多代码优化，运行时安全性检查；这些额外的步骤占用了更多的资源并进一步降低了应用的运行速度。 原文链接： http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E Pros and cons of compiled and interpreted languages Languages can be developed either as fully-compiled, pure-interpreted, or hybrid compiled-interpreted. As a matter of fact, most of the current programming languages have both a compiled and interpreted versions available. Both compiled and interpreted approaches have their advantages and disadvantages. I will start with the compiled languages. Compiled languages One of the biggest advantages of Compiled languages is their execution speed. A program written in C/C++ runs 30-70 % faster then an equivalent program written in Java. Compiled code also takes less memory as compared to an interpreted program. On the down side - a compiler is much more difficult to write than an interpreter. A compiler does not provide much help in debugging a program - how many times have you received a \"Null pointer exception\" in your C code and have spent hours trying to figure out where in your source code did the exception occurred. The executable Compiled code is much bigger in size than an equivalent interpreted code e.g. a C/C++ .exe file is much bigger than an equivalent Java .class file Compiled programs are targeted towards a particular platform and hence are platform dependent. Compiled programs do not allow security to be implemented with in the code - e.g. a compiled program can access any area of the memory, and can do whatever it wants with your PC (most of the viruses are made in compiled languages). Due to loose security and platform dependence - a compiled language is not particularly suited to be used to develop Internet or web-based applications. Interpreted languages Interpreted language provides excellent debugging support. A Java programmer only spends a few minutes fixing a \"Null pointer exception\", because Java runtime not only specifies the nature of exception but also gives the exact line number and function call sequence (the famous stack trace information) where the exception occurred. This facility is something that a compiled language can never provide. Another advantage is that Interpreters are much easier to build then a compiler. One of the biggest advantages of Interpreters is that they make platform-independence possible. Interpreted language also allow high degree of security - something badly needed for an Internet application. An intermediate language code size is much smaller than a compiled executable code. Platform independence, and tight security are the two most important factors that make an interpreted language ideally suited for Internet and web-based applications. Interpreted languages have some serious drawbacks. The interpreted applications take up more memory and CPU resources. This is because in order to run a program written in interpreted language; the corresponding interpreter must be run first. Interpreters are sophisticated, intelligent and resource hungry programs and they take up lot of CPU cycles and RAM. Due to interpreted application's decode-fetch-execute cycle; they are much slower than compiled programs. Interpreters also do lot of code-optimization, security violation checking at run-time; these extra steps take up even more resources and further slows the application down.","text_tokens":["不了","因而","must","相同","only","versions","steps","代码","许多","hence","suited","严密","smaller","their","实现","下面","pc","它们","few","很多","各自","信息","发生","difficult","得","call","at","解码","tight","大量","independence","biggest","极佳","pointer","out","e","much","无法","：","中","编译","理想","language","further","平台","many","大部","指针","hungry","访问","这是","依赖","most","targeted","codeproject","that","复杂","runtime","适合","side","provide","takes","不仅","堆栈","slower","for","任何","调用","运行","pure","70","多少","have","依赖性","factors","applications","high","minutes","an","和","分钟","调试","faster","之一","提供","而是","com","不太","build","程序","存在","your","security","以及","spends","start","优势","著名","首先","部分","个","any","因特网","做","编写","30","纯粹","内存","exe","应用","大部分","独立性","因而是","链接","execution","compiled","实际上","can","then","额外","advantages","就是","面向","not","错误","decode",".","开发","on","跟踪","resource","这些","trace","优缺点","corresponding","programming","number","时","run","修复","fetch","优化","down","更","www","严重","information","一名","混合","figure","降低","ram","platform","compiler","programmer","degree","只","two","用","需要","两者","指明","，","this","support","分别","执行","serious","these","花费","whatever","cpu","as","advantage","编程语言","实际","\"","对比","-","智能","联网","比","interpreted","it","spent","either","something","相互","common","how","another",";","web","compared","性质","allow","函数调用","optimization","想","received","towards","有","写","检查","viruses","approaches","fact","both","版本","cycles","fully","source","好几个","are","excellent","sequence","资源","wants","stack","速度","可","needed","area","型","函数","互联","hybrid","调试程序","一面","will","resources","dependent","a","line","badly","more","并","facility","遇到","在","but","loose","少","help","speed","容易","possible","好几","cons","这样","解释器","同样","never","pros","事情","time","function","行号","语言","ideally"," ","some","重要","不利","up","位置","一个","迫切","你","现有","clr","particular","%","的","多","为了","does","大","take","runs","帮助","几分","会","easier","with","成为","1825","了","2","例如","程序员","语言所","几个","gives","因特","小时","'","是",")","使用","internet","less","来","介绍","松散","than","最",":","定位","programs","execute","executable","intelligent","一些","也","因为","顺序","equivalent","or","从","进一步","到底","什么","30%","中间","可以","interpreter",",","written","bigger","原文","(","to","功能","famous","c语言","the","write","did","also","current","drawbacks","并且","they","支持","developed","明确","区域","and","编译器","另","hours","http","比用","代码优化","cycle","（","高度","病毒","而且","file","c","available","异常","独立","violation","sophisticated","because","one","都","程序运行","debugging","同时","要","in","文件","checking","”","important","编程","memory","slows","消耗","快","慢","order","develop","相关","因素","抓取","fixing","拥有","缺点","环境","exception","do","access","occurred","is","—","based","一步","“","完全","languages","implemented","/","）","made","；","特定","互联网","小","lot","具体","i","make","due","解释","c++","class","extra","used","interpreters","first","使","where","其","给出","even","application","program","占用","exact","不","分为","be","释器","70%","它","不足","specifies","空","周期","安全","size","particularly","s","安全性","disadvantages","便利","基于","dependence","必须","null","java","迫切需要","难","就","对","或者","大小","步骤","。","times","provides","trying","次","最大","articles","由于","code","保证","matter","g","intermediate","of","nature","开始","几分钟","you"],"title":"1.3.编译型语言和解释型语言的优缺点对比","title_tokens":["1.3","缺点",".","语言","编译","对比","解释","型","的","和","优缺点"]},{"location":"计算机基础/1.3.编译型语言和解释型语言的优缺点对比.html#_1","text":"编程语言可以分为：完全的编译型，纯粹的解释型或者两者相互混合的编程语言。实际上，大部分现有的编程语言都同时拥有其编译型和解释型版本。 编译型语言和解释型语言分别有其各自的优势和不足。下面从编译型语言开始介绍。","text_tokens":["编程语言","实际","版本","现有","可以","其","的","或者","。","完全","纯粹","都","同时","：","编译","混合","介绍","大部分","型","大部","和","分为","下面","编程","相互","实际上","不足","两者","各自","，","分别","语言","有","解释"," ","优势","开始","部分","从","拥有"],"title":"编译型语言和解释型语言的优缺点对比","title_tokens":["缺点","语言","编译","对比","解释","型","的","和","优缺点"]},{"location":"计算机基础/1.3.编译型语言和解释型语言的优缺点对比.html#_2","text":"编译型语言最大的优势之一就是其执行速度。用C/C++编写的程序运行速度要比用Java编写的相同程序快30%-70%。 编译型程序比解释型程序消耗的内存更少。 不利的一面——编译器比解释器要难写得多。 编译器在调试程序时提供不了多少帮助——有多少次在你的C语言代码中遇到一个“空指针异常”时，需要花费好几个小时来明确错误到底在代码中的什么位置。 可执行的编译型代码要比相同的解释型代码大许多。例如，C/C++的.exe文件要比同样功能的Java的.class文件大很多。 编译型程序是面向特定平台的因而是平台依赖的。 编译型程序不支持代码中实现安全性——例如，一个编译型的程序可以访问内存的任何区域，并且可以对你的PC做它想做的任何事情（大部分病毒是使用编译型语言编写的） 由于松散的安全性和平台依赖性，编译型语言不太适合开发因特网或者基于Web的应用。","text_tokens":["不了","一个","时","你","因而","的","相同","更","多","程序运行","要","代码","大","许多","文件","”","实现","pc","帮助","很多","用","消耗","需要","，","快","执行","花费","例如","得","几个","因特","—","小时","“","-","是","使用","中","编译","比","来","/","平台","大部","指针","松散","）","访问","特定","依赖","web","想","有","写","解释","c++","class","适合","到底","什么","30%","可以","其","任何","运行","多少","好几个","依赖性","速度","可","型","和","不","调试","功能","调试程序","之一","一面","释器","提供","70%","而是","c语言","它","不太","程序","空","安全","安全性","遇到","优势","并且","基于","部分","在","java","支持","难","明确","对","区域","做","编写","编译器","因特网","或者","少","。","比用","内存","exe","应用","大部分","次","因而是","（","最大","好几","病毒","解释器","同样","由于","就是","事情","面向","c","错误",".","语言","异常"," ","开发","不利","位置"],"title":"编译型语言：","title_tokens":["编译","：","型","语言"]},{"location":"计算机基础/1.3.编译型语言和解释型语言的优缺点对比.html#_3","text":"解释型语言提供了极佳的调试支持。一名Java程序员只需要几分钟就可以定位并修复一个“空指针异常”，因为Java运行环境不仅指明了异常的性质，而且给出了异常发生位置具体的行号和函数调用顺序（著名的堆栈跟踪信息）。这样的便利是编译型语言所无法提供的。 另一个优势是解释器比编译器容易实现 解释型语言最大的优势之一是其平台独立性 解释型语言也可以保证高度的安全性——这是互联网应用迫切需要的 中间语言代码的大小比编译型可执行代码小很多 平台独立性，以及严密的安全性是使解释型语言成为适合互联网和Web应用的理想语言的2个最重要的因素。 解释型语言存在一些严重的缺点。解释型应用占用更多的内存和CPU资源。这是由于，为了运行解释型语言编写的程序，相关的解释器必须首先运行。解释器是复杂的，智能的，大量消耗资源的程序并且它们会占用很多CPU周期和内存。 由于解释型应用的decode-fetch-execute（解码-抓取-执行）的周期，它们比编译型程序慢很多。 解释器也会做很多代码优化，运行时安全性检查；这些额外的步骤占用了更多的资源并进一步降低了应用的运行速度。 原文链接： http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E","text_tokens":["一个","迫切","时","clr","修复","fetch","优化","的","更","www","严重","多","为了","一名","代码","降低","严密","”","实现","几分","会","只","它们","很多","消耗","需要","指明","，","信息","成为","慢","1825","了","2","发生","执行","相关","程序员","因素","抓取","cpu","解码","大量","语言所","缺点","环境","极佳","—","一步","e","“","-","是","智能","联网","无法","：","编译","比","理想","language","平台","/","指针","）","最","common","；","这是",":","定位","互联网","小","web","execute","性质","codeproject","具体","函数调用","一些","也","复杂","因为","检查","解释","顺序","runtime","适合","进一步","不仅","堆栈","中间","使","可以","其","调用","运行","给出","资源","可","速度","这些","原文","型","占用","函数","和","互联","分钟","调试","之一","提供","释器","the","com","程序","存在","空","周期","安全","并","以及","安全性","便利","优势","并且","著名","首先","必须","个","支持","java","迫切需要","就","做","and","编写","编译器","另","大小","步骤","http","。","代码优化","内存","应用","独立性","（","高度","最大","容易","链接","而且","这样","articles","解释器","由于","额外","保证","decode","行号",".","语言","异常"," ","重要","跟踪","几分钟","位置","独立"],"title":"解释型语言：","title_tokens":["：","型","解释","语言"]},{"location":"计算机基础/1.3.编译型语言和解释型语言的优缺点对比.html#pros-and-cons-of-compiled-and-interpreted-languages","text":"Languages can be developed either as fully-compiled, pure-interpreted, or hybrid compiled-interpreted. As a matter of fact, most of the current programming languages have both a compiled and interpreted versions available. Both compiled and interpreted approaches have their advantages and disadvantages. I will start with the compiled languages. Compiled languages One of the biggest advantages of Compiled languages is their execution speed. A program written in C/C++ runs 30-70 % faster then an equivalent program written in Java. Compiled code also takes less memory as compared to an interpreted program. On the down side - a compiler is much more difficult to write than an interpreter. A compiler does not provide much help in debugging a program - how many times have you received a \"Null pointer exception\" in your C code and have spent hours trying to figure out where in your source code did the exception occurred. The executable Compiled code is much bigger in size than an equivalent interpreted code e.g. a C/C++ .exe file is much bigger than an equivalent Java .class file Compiled programs are targeted towards a particular platform and hence are platform dependent. Compiled programs do not allow security to be implemented with in the code - e.g. a compiled program can access any area of the memory, and can do whatever it wants with your PC (most of the viruses are made in compiled languages). Due to loose security and platform dependence - a compiled language is not particularly suited to be used to develop Internet or web-based applications. Interpreted languages Interpreted language provides excellent debugging support. A Java programmer only spends a few minutes fixing a \"Null pointer exception\", because Java runtime not only specifies the nature of exception but also gives the exact line number and function call sequence (the famous stack trace information) where the exception occurred. This facility is something that a compiled language can never provide. Another advantage is that Interpreters are much easier to build then a compiler. One of the biggest advantages of Interpreters is that they make platform-independence possible. Interpreted language also allow high degree of security - something badly needed for an Internet application. An intermediate language code size is much smaller than a compiled executable code. Platform independence, and tight security are the two most important factors that make an interpreted language ideally suited for Internet and web-based applications. Interpreted languages have some serious drawbacks. The interpreted applications take up more memory and CPU resources. This is because in order to run a program written in interpreted language; the corresponding interpreter must be run first. Interpreters are sophisticated, intelligent and resource hungry programs and they take up lot of CPU cycles and RAM. Due to interpreted application's decode-fetch-execute cycle; they are much slower than compiled programs. Interpreters also do lot of code-optimization, security violation checking at run-time; these extra steps take up even more resources and further slows the application down.","text_tokens":["number","violation","sophisticated","particular","run","fetch","down","%","one","because","must","only","debugging","information","versions","in","steps","does","take","figure","hence","suited","runs","smaller","platform","important","corresponding","compiler","ram","their","checking","pc","programmer","degree","memory","slows","two","few","easier","with","this","support","order","develop","serious","difficult","these","whatever","at","call","cpu","as","fixing","tight","advantage","independence","exception","biggest","\"","do","pointer","out","is","occurred","access","based","gives","e","much","'","-",")","languages","implemented","internet","less","language","further","interpreted","it","/","many","spent","hungry","either","something","than","made","how","programs","another",";","most","web","lot","targeted","compared","execute","executable","allow","that","optimization","intelligent","received","i","make","towards","due","viruses","c++","approaches","class","runtime","equivalent","side","or","extra","provide","used","takes","interpreters","first","fact","both","cycles","slower","where","for","interpreter","70","fully","pure","source",",","have","are","excellent","written","sequence","factors","wants","applications","stack","bigger","needed","high","area","minutes","program","application","an","even","exact","(","to","hybrid","be","faster","famous","the","specifies","will","build","resources","dependent","a","line","write","more","badly","your","did","size","also","security","particularly","current","disadvantages","start","spends","s","facility","drawbacks","they","dependence","null","java","any","developed","and","but","30","loose","hours","times","help","exe","speed","provides","trying","cycle","execution","possible","compiled","can","then","advantages","file","never","code","matter","g","intermediate","c","time","of","available","not","nature","function","decode",".","ideally"," ","some","on","resource","up","trace","you","programming"],"title":"Pros and cons of compiled and interpreted languages","title_tokens":[" ","pros","and","interpreted","languages","cons","compiled","of"]},{"location":"计算机基础/1.4.字符编码.html","text":"相对于数字，字符串比较特殊的是还有一个编码问题。 一般，计算机的系统结构是基于数字信号来搭建的，计算机中的计算基于数字电路。在计算机内部，所有信息最终都是一个二进制值。计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。 每一个二进制位（bit）有 0 和 1 两种状态，最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），因此一个字节可以表示256种状态（$2^8=256$），每一个状态对应一个符号，就是256个符号，从 00000000 到 11111111 。一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是 65535 ，4个字节可以表示的最大整数是 4294967295 。 ASCII码 因为计算机是美国人发明的，所以在上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。ASCII 码一共规定了128个字符的编码，比如空格 SPACE 是32（二进制 00100000 ），大写的字母 A 是65（二进制 01000001 ）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为 0 。 非ASCII码 英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的 é 的编码为130（二进制 10000010 ）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。 但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了 é ，在希伯来语编码中却代表了字母 Gimel ( ג )，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0--127表示的符号是一样的，不一样的只是128--255的这一段。 GB2312码 汉字多达10万左右，要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了 GB2312 编码，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 = 65536 个符号。 虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的 Unicode 和 UTF-8 是毫无关系的。 可以想得到的是，全世界有上百种语言，日本把日文编到 Shift_JIS 里，韩国把韩文编到 Euc-kr 里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。 Unicode 正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。 因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。 Unicode就像它的名字都表示的，这是一种所有符号的编码。 Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。 Unicode 是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，可以查询 unicode.org ，或者专门的 汉字对应表 。 Unicode 的问题 需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。（ 这里说的储存是储存在 ROM 中，比如说硬盘。 ） 比如，汉字 严 的 Unicode 是十六进制数 4E25 ，转换成二进制数足足有15位（ 100111000100101 ），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。 这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0 ，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。 因此不能用Unicode码直接储存文件。 它们造成的结果是： 出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。 Unicode 在很长一段时间内无法推广，直到互联网的出现。 UTF-8 互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用。 ==强调一下Unicode和UTF-8的区别：UTF-8是Unicode的一种储存形式，但计算机只能读取二进制的内容，因此计算机读取UTF-8编码的文件，需要将文件转码为Unicode（Unicode是完全二进制的形式）。也就是说，文件以UTF-8的形式储存在硬盘上，以Unicode的形式储存在内存（Ram）中。==例如： 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。 用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。 浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。很多网页的源码上会有类似 <meta charset=\"UTF-8\" /> 的信息，表示该网页正是用的UTF-8编码。 UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。 UTF-8 的编码规则很简单，只有二条： 1）对于单字节的符号，字节的第一位设为 0 ，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。 2）对于 n 字节的符号（ n > 1 ），第一个字节的前 n 位都设为 1 ，第 n + 1 位设为 0 ，后面字节的前两位一律设为 10 。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。 下表总结了编码规则，字母 x 表示可用编码的位。 Unicode符号范围 | UTF-8编码方式 (十六进制) | （二进制） --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是 0 ，则这个字节单独就是一个字符；如果第一位是 1 ，则连续有多少个 1 ，就表示当前字符占用多少个字节。 下面，还是以汉字 严 为例，演示如何实现 UTF-8 编码。 严 的 Unicode 是 4E25 （ 100111000100101 ），根据上表，可以发现 4E25 处在第三行的范围内（ 0000 0800 - 0000 FFFF ），因此 严 的 UTF-8 编码需要三个字节，即格式是 1110xxxx 10xxxxxx 10xxxxxx 。然后，从 严 的最后一个二进制位开始，依次从后向前填入格式中的 x ，多出的位补 0 。这样就得到了， 严 的 UTF-8 编码是 11100100 10111000 10100101 ，转换成十六进制就是 E4B8A5 。 UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。 参考 字符编码笔记：ASCII，Unicode 和 UTF-8","text_tokens":["动态","n","类","系统结构","冲突","相同","全部","偏僻","10","相对","不会","更大","代码","第一个","许多","连续","区别","被","位为","即","实现","0800","下面","gb2312","跟据","计算","它们","最终","提及","很多","转换","信息","记事","范围","01000001","而","比较","也就是说","$","0","处理","大量","世界","转换成","对于","正是","8","数","1110xxxx","源码","汉字编码","上会","以","无法","：","中","第二","第三行","系统","单独","希伯来语","0080","符号","该","这是","容纳","四个","不断","编","两个","charset","很","16","存储","65535","笔记","好处","如果","决定","编码方式","音符","3","多少","发展","kr","极大","码是","普及","软件","对应","得到","发明","严","那么","和","4294967295","第","值","务器","存在","所说","至今","三倍","还是","非","100111000100101","部分","推广","包括","个","整数","现代","沿用至今","做","看成","信号","空格","变化","60","多出","内存","é","gimel","理论","新","直到","实际上","十六进制","操作系统","额外","发信","字母","就是","一位","作为","世纪","一节","错误",".","十六","特点","来说","这些","时","比特","种","时候","全世界","韩文","强调","shift","段时间","处在","更","130","严重","邮件","混合","收信","ram","设计","只","第一","一段","用","需要","我们","汉字","，","gb","换成","浏览","然后","为","打印","毫无关系","分别","英语","一般","发现","11111111","unicode","现在","10111000","编程语言","实际","\"","-","联网","制定","已经","0000","一律","所有","俄语","说","+","操作","沿用","结构","显示","本文","--------------------+---------------------------------------------","两位","查询","一样","剩下","后","比如说","想","集","有","闲置","想得到","0010","一直","15","英文字母","字符","浏览器","上","大多","中国","注音","甚至","但是","英文字","编辑","下表","07ff","内容","最早","互联","百种","避免","多数","足足","a","传输","就够","一共","文字","韩国","大写","编码","关系","ג","但","x","在","数字电","最多","地","收信人","注音符号","不管怎样","二条","两种","储存","利用","255","一套","国家","向前","应该","要求","ascii","这样","里","又","保存","字节","不同","规模","着","出来","演示","应运而生","二进制位","语言"," ","搭建","参考","无关","128","表示","服务器","一个","127","4","不可","的","用来","每个","浪费","方式","多","常常","集合","上个世纪","为什么","4e25","变长","只能","会","采用","_","当","最广","怎么","历史","称为","了","2","设为","例如","位补","很长","没有","euc","65","到","byte","希伯来","文本文件","是",")","接受","使用","00000000","日文","基本","三行","来","上个","第二个","单字节","却","一下","字符串","00100000","最","65536","美国","各国","比如","一部","当前","算机","一些","也","ffff","因为","大多数","其他","如何","还","一种","还有","7","显然","从","呢","简单","什么","个字符","可以","第三","上表","space","二个","能","不是","格式","左右","(","强烈","读取","不管","meta","11110xxx","10xxxxxx","二三","出现","将","用到","毫无","rom","同一","后文","位设",">","填入","万左右","~","电子","这里","或","类似","支持","非常简单","为例","110xxxxx","万个","一段时间","后面","像","另","正如","则","数字","统一","数字电路","解读","名字","（","日本","继续","而且","哪怕","直接","网页","才能","怎样","下","再有","单字","多个","这","10100101","服务","32","完成","就是说","utf","只是","不过","知道","设","规则","第一位","与","欧洲","所以","org","特殊","都","要","表","最高","文件","足足有","前","文本","控制","0001","规定","编程","虽然","之间","于","一来","工作","多万","状态","不可避免","问题","强烈要求","英文","硬盘","多万个","256","长度","代表","必然","许多种","码","前面","发信人","体系","形式","完全","位","这样一来","同一个","再","根据","每","十进制","/","007f","可能","）","至少","；","三个","互联网","记事本","乱码","100","打开","从文件","结果","多达","解释","？","于是","从后","多种","法语","--","一部分","有二到","不能","否则","人","占用","标准","bit","不","10000010","<","先","jis","转码","进制","它","电子邮件","内部","常用","把","e4b8a5","|","基于","二三倍","=","必须","总结","最后","因此","大出","年代","就","对","或者","大小","内","可用","11100100","。","不够","只用","电路","^","二进制","编入","最大","中文","上方","依次","专门","非常","注意","1","这个","只有","数字信号","不用","时间","0xxxxxxx","造成","计算机","成","很大","生成","开始","遗留","应运"],"title":"1.4.字符编码","title_tokens":["1.4","字符","编码","."]},{"location":"计算机基础/1.4.字符编码.html#ascii","text":"因为计算机是美国人发明的，所以在上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。ASCII 码一共规定了128个字符的编码，比如空格 SPACE 是32（二进制 00100000 ），大写的字母 A 是65（二进制 01000001 ）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为 0 。","text_tokens":["一个","的","与","所以","上个世纪","被","控制","规定","计算","只","之间","，","01000001","称为","了","为","打印","英语","0","65","码","前面","是","制定","位","上个","）","00100000","符号","最","沿用","美国","比如","算机","因为","7","一直","个字符","字符","space","不能","人","发明","占用","进制","a","一共","至今","大写","编码","关系","包括","个","在","年代","对","做","沿用至今","后面","空格","。","60","统一","一套","二进制","（","ascii","字母","字节","出来","一位","世纪","这","32","二进制位","计算机"," ","128"],"title":"ASCII码","title_tokens":["ascii","码"]},{"location":"计算机基础/1.4.字符编码.html#ascii_1","text":"英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的 é 的编码为130（二进制 10000010 ）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。 但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了 é ，在希伯来语编码中却代表了字母 Gimel ( ג )，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0--127表示的符号是一样的，不一样的只是128--255的这一段。","text_tokens":["一个","127","的","用来","欧洲","130","方式","都","最高","会","它们","一段","用","一来","，","了","为","问题","英语","0","256","代表","希伯来","码","是","体系",")","使用","无法","中","位","这样一来","所有","俄语","却","希伯来语","）","符号","一样","比如","一些","有","其他","闲置","于是","决定","编码方式","法语","可以","--","音符","注音","但是","(","不","不管","10000010","出现","进制","它","就够","编码","ג","这里","个","因此","在","就","最多","另","注音符号","。","不管怎样","利用","不够","255","国家","é","编入","（","二进制","gimel","上方","ascii","新","哪怕","这样","又","怎样","字母","字节","不同","这","表示","语言","只是"," ","这些","128"],"title":"非ASCII码","title_tokens":["ascii","非","码"]},{"location":"计算机基础/1.4.字符编码.html#gb2312","text":"汉字多达10万左右，要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了 GB2312 编码，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 = 65536 个符号。 虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的 Unicode 和 UTF-8 是毫无关系的。 可以想得到的是，全世界有上百种语言，日本把日文编到 Shift_JIS 里，韩国把韩文编到 Euc-kr 里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。","text_tokens":["一个","全世界","韩文","不可","类","的","冲突","与","shift","所以","多","都","10","要","混合","文本","会","gb2312","虽然","_","用","需要","汉字","，","gb","了","不可避免","毫无关系","处理","unicode","euc","256","世界","8","到","-","汉字编码","是","使用","制定","日文","中","最","符号","至少","显示","65536","各国","乱码","编","两个","有","结果","多达","还","显然","想得到","可以","上","中国","但是","kr","得到","不能","左右","标准","和","百种","避免","jis","出现","毫无","后文","把","韩国","编码","万左右","关系","=","个","x","在","就","地","。","不够","日本","中文","ascii","而且","理论","里","字节","就是","多个","出来","语言","utf"," ","无关","表示"],"title":"GB2312码","title_tokens":["gb2312","码"]},{"location":"计算机基础/1.4.字符编码.html#unicode","text":"正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。 因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。 Unicode就像它的名字都表示的，这是一种所有符号的编码。 Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。 Unicode 是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，可以查询 unicode.org ，或者专门的 汉字对应表 。","text_tokens":["一个","4","知道","的","每个","org","偏僻","方式","常常","都","集合","要","表","邮件","不会","为什么","文件","收信","被","文本","编程","会","用","需要","汉字","，","多万","了","问题","unicode","多万个","现在","世界","编程语言","到","文本文件","发信人","是","使用","同一个","所有","系统","）","最","符号","操作","本文","这是","容纳","乱码","查询","一样","不断","100","两个","想","打开","也","因为","解释","大多数","一种","？","多种","什么","如果","字符","编码方式","可以","上","大多","发展","对应","否则","标准","和","不","出现","进制","它","电子邮件","用到","多数","存在","同一","常用","所说","把","编码","电子","必须","但","个","现代","因此","在","支持","万个","就","像","或者","收信人","正如","。","数字","统一","一套","解读","名字","二进制","（","专门","直接","这样","里","非常","操作系统","再有","发信","字节","就是","不同","规模","着","一节","应运而生","错误","成","语言","."," ","很大","应运","表示"],"title":"Unicode","title_tokens":["unicode"]},{"location":"计算机基础/1.4.字符编码.html#unicode_1","text":"需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。（ 这里说的储存是储存在 ROM 中，比如说硬盘。 ） 比如，汉字 严 的 Unicode 是十六进制数 4E25 ，转换成二进制数足足有15位（ 100111000100101 ），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。 这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0 ，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。 因此不能用Unicode码直接储存文件。 它们造成的结果是： 出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。 Unicode 在很长一段时间内无法推广，直到互联网的出现。","text_tokens":["一个","4","知道","的","段时间","用来","每个","更","浪费","严重","多","都","方式","更大","代码","4e25","足足有","第一个","前","文件","区别","许多","文本","规定","会","只","计算","它们","第一","一段","我们","需要","转换","用","汉字","，","怎么","换成","了","2","问题","而","分别","也就是说","0","英文","unicode","硬盘","很长","没有","转换成","对于","必然","数","许多种","文本文件","码","是","接受","联网","已经","无法","：","中","位","第二","第二个","却","说","可能","）","符号","至少","本文","三个","这是","互联网","四个","比如","比如说","两个","算机","集","有","结果","其他","如何","存储","？","呢","多种","15","英文字母","如果","可以","3","甚至","英文字","极大","二个","不是","格式","有二到","不能","严","那么","和","互联","二三","出现","进制","它","足足","rom","就够","文字","三倍","二三倍","100111000100101","这里","推广","个","因此","或","在","大出","一段时间","就","或者","大小","内","。","统一","储存","只用","二进制","（","应该","ascii","直接","直到","才能","十六进制","注意","这个","字母","字节","就是","不同","这","时间","就是说","造成","计算机","十六","只是"," ","来说","表示"],"title":"Unicode 的问题","title_tokens":["unicode","的"," ","问题"]},{"location":"计算机基础/1.4.字符编码.html#utf-8","text":"互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用。 ==强调一下Unicode和UTF-8的区别：UTF-8是Unicode的一种储存形式，但计算机只能读取二进制的内容，因此计算机读取UTF-8编码的文件，需要将文件转码为Unicode（Unicode是完全二进制的形式）。也就是说，文件以UTF-8的形式储存在硬盘上，以Unicode的形式储存在内存（Ram）中。==例如： 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。 用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。 浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。很多网页的源码上会有类似 <meta charset=\"UTF-8\" /> 的信息，表示该网页正是用的UTF-8编码。 UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。 UTF-8 的编码规则很简单，只有二条： 1）对于单字节的符号，字节的第一位设为 0 ，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。 2）对于 n 字节的符号（ n > 1 ），第一个字节的前 n 位都设为 1 ，第 n + 1 位设为 0 ，后面字节的前两位一律设为 10 。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。 下表总结了编码规则，字母 x 表示可用编码的位。 Unicode符号范围 | UTF-8编码方式 (十六进制) | （二进制） --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是 0 ，则这个字节单独就是一个字符；如果第一位是 1 ，则连续有多少个 1 ，就表示当前字符占用多少个字节。 下面，还是以汉字 严 为例，演示如何实现 UTF-8 编码。 严 的 Unicode 是 4E25 （ 100111000100101 ），根据上表，可以发现 4E25 处在第三行的范围内（ 0000 0800 - 0000 FFFF ），因此 严 的 UTF-8 编码需要三个字节，即格式是 1110xxxx 10xxxxxx 10xxxxxx 。然后，从 严 的最后一个二进制位开始，依次从后向前填入格式中的 x ，多出的位补 0 。这样就得到了， 严 的 UTF-8 编码是 11100100 10111000 10100101 ，转换成十六进制就是 E4B8A5 。 UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。","text_tokens":["服务器","动态","一个","时候","n","4","设","规则","第一位","的","强调","处在","相同","所以","全部","方式","都","10","连续","第一个","文件","ram","前","4e25","区别","被","位为","即","变长","只能","实现","0800","0001","下面","会","跟据","计算","只","当","第一","提及","很多","用","需要","转换","最广","汉字","工作","，","信息","换成","记事","浏览","范围","历史","了","然后","为","而","2","设为","强烈要求","也就是说","例如","英语","0","发现","位补","部分","unicode","硬盘","没有","大量","长度","对于","10111000","\"","正是","转换成","实际","8","1110xxxx","到","源码","码","-","是",")","上会","形式","使用","联网","完全","以","三行","基本","：","中","0000","位","一律","再","根据","第三行","/","单字节","单独","0080","007f","+","一下","）","该","符号","；","三个","互联网","记事本","--------------------+---------------------------------------------","四个","两位","剩下","后","charset","两个","一部","很","算机","从文件","当前","ffff","有","16","其他","如何","一种","还","7","从","从后","简单","0010","好处","如果","字符","编码方式","可以","第三","浏览器","上","上表","多少","编辑","下表","码是","一部分","07ff","普及","格式","软件","得到","内容","占用","(","严","强烈","和","读取","互联","<","第","meta","11110xxx","10xxxxxx","转码","出现","进制","将","它","务器","位设","传输","把",">","e4b8a5","编码","还是","填入","|","~","100111000100101","=","但","包括","个","总结","因此","或","x","在","类似","最后","非常简单","为例","110xxxxx","支持","就","后面","看成","或者","内","可用","则","变化","。","11100100","统一","储存","内存","二条","多出","解读","（","二进制","要求","最大","依次","向前","ascii","继续","这样","里","网页","非常","实际上","十六进制","额外","1","下","这个","保存","只有","字节","就是","不同","单字","字母","不用","一位","演示","10100101","服务","32","0xxxxxxx","完成","就是说","二进制位","计算机","十六","utf"," ","不过","特点","生成","开始","遗留","表示"],"title":"UTF-8","title_tokens":["utf","8","-"]},{"location":"计算机基础/1.4.字符编码.html#_1","text":"字符编码笔记：ASCII，Unicode 和 UTF-8","text_tokens":["：","utf","8","字符","编码"," ","unicode","-","ascii","和","笔记","，"],"title":"参考","title_tokens":["参考"]}]}