{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u6570\u5b66\u7b14\u8bb0 \u7ebf\u6027\u4ee3\u6570 \u6570\u7406\u7edf\u8ba1 \u673a\u5668\u5b66\u4e60 Python\u8d44\u6e90 \u7ebf\u4e0aIDE repl.it Python\u7684\u7ebf\u4e0aIDE\u6709\u4e0d\u5c11\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u4e0d\u652f\u6301\u4f7f\u7528\u4e00\u4e9b\u5f88\u5e38\u89c1\u7684\u7b2c\u4e09\u65b9\u5e93\u3002\u800c repl.it \u5c31\u53ef\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u5e93\uff0c\u4f8b\u5982Numpy\u3001Pandas\u7b49\u7b49\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5982\u679c\u6682\u65f6\u4e0d\u60f3\u5728\u672c\u5730\u5b89\u88c5Python\u73af\u5883\uff0c\u6216\u8005\u89c9\u5f97\u5b89\u88c5Python\u73af\u5883\u592a\u9ebb\u70e6\uff0c\u53ef\u4ee5\u5728 repl.it \u4e0a\u9762\u5b66\u4e60Python\u8bed\u6cd5\u3002 \u4e66\u7c4d \u300a \u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790 2th \u300b \u300a Python Cookbook 3 rd Edition \u300b \u300a Python 3 Module of the Week \u300b \u300a\u7b28\u65b9\u6cd5\u5b66Python\u300b #1 #2 \u53c2\u8003\u624b\u518c python\u901f\u67e5\u8bcd\u5178 scikit learn\u901f\u67e5\u8bcd\u5178","title":"Home"},{"location":"index.html#_1","text":"\u7ebf\u6027\u4ee3\u6570 \u6570\u7406\u7edf\u8ba1 \u673a\u5668\u5b66\u4e60","title":"\u6570\u5b66\u7b14\u8bb0"},{"location":"index.html#python","text":"","title":"Python\u8d44\u6e90"},{"location":"index.html#ide","text":"repl.it Python\u7684\u7ebf\u4e0aIDE\u6709\u4e0d\u5c11\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u4e0d\u652f\u6301\u4f7f\u7528\u4e00\u4e9b\u5f88\u5e38\u89c1\u7684\u7b2c\u4e09\u65b9\u5e93\u3002\u800c repl.it \u5c31\u53ef\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u5e93\uff0c\u4f8b\u5982Numpy\u3001Pandas\u7b49\u7b49\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5982\u679c\u6682\u65f6\u4e0d\u60f3\u5728\u672c\u5730\u5b89\u88c5Python\u73af\u5883\uff0c\u6216\u8005\u89c9\u5f97\u5b89\u88c5Python\u73af\u5883\u592a\u9ebb\u70e6\uff0c\u53ef\u4ee5\u5728 repl.it \u4e0a\u9762\u5b66\u4e60Python\u8bed\u6cd5\u3002","title":"\u7ebf\u4e0aIDE"},{"location":"index.html#_2","text":"\u300a \u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790 2th \u300b \u300a Python Cookbook 3 rd Edition \u300b \u300a Python 3 Module of the Week \u300b \u300a\u7b28\u65b9\u6cd5\u5b66Python\u300b #1 #2","title":"\u4e66\u7c4d"},{"location":"index.html#_3","text":"python\u901f\u67e5\u8bcd\u5178 scikit learn\u901f\u67e5\u8bcd\u5178","title":"\u53c2\u8003\u624b\u518c"},{"location":"Docker/17.2.Dockerfile.html","text":"Dockerfile \u547d\u4ee4 FROM \u6307\u5b9a\u57fa\u7840\u955c\u50cf FROM \u6307\u4ee4\u7528\u4e8e\u6307\u5b9a\u5176\u540e\u6784\u5efa\u65b0\u955c\u50cf\u6240\u4f7f\u7528\u7684\u57fa\u7840\u955c\u50cf\u3002 Dockerfile \u6587\u4ef6\u4e2d\u7684\u7b2c\u4e00\u6761\u547d\u4ee4\u5fc5\u987b\u662fFROM \u6307\u4ee4 \uff0c\u542f\u52a8\u6784\u5efa\u6d41\u7a0b\u540e\uff0cDocker \u5c06\u4f1a\u57fa\u4e8e\u8be5\u955c\u50cf\u6784\u5efa\u65b0\u955c\u50cf\uff0cFROM \u540e\u7684\u547d\u4ee4\u4e5f\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u57fa\u7840\u955c\u50cf\u3002 FROM\u8bed\u6cd5\u683c\u5f0f\u4e3a\uff1a FROM <image> # \u6216\u8005 FROM <image>:<tag> # \u6216\u8005 FROM <image>:<digest> \u5728\u4e00\u4e2a Dockerfile \u6587\u4ef6\u4e2d\u521b\u5efa\u591a\u4e2a\u955c\u50cf\u65f6\uff0cFROM \u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u3002\u53ea\u9700\u5728\u6bcf\u4e2a\u65b0\u547d\u4ee4 FROM \u4e4b\u524d\uff0c\u8bb0\u5f55\u63d0\u4ea4\u4e0a\u6b21\u7684\u955c\u50cf ID\u3002tag \u6216 digest \u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u8fd9\u4e24\u4e2a\u503c\u65f6\uff0c\u4f1a\u4f7f\u7528 latest \u7248\u672c\u7684\u57fa\u7840\u955c\u50cf\u3002 LABEL LABEL\u7528\u4e8e\u4e3a\u955c\u50cf\u6dfb\u52a0\u5143\u6570\u636e\uff0c\u5143\u6570\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u6307\u5b9a\uff1a LABEL <key> = <value> <key> = <value> <key> = <value> ... \u4f7f\u7528LABEL\u6307\u5b9a\u5143\u6570\u636e\u65f6\uff0c\u4e00\u6761LABEL\u6307\u5b9a\u53ef\u4ee5\u6307\u5b9a\u4e00\u6216\u591a\u6761\u5143\u6570\u636e\uff0c\u6307\u5b9a\u591a\u6761\u5143\u6570\u636e\u65f6\u4e0d\u540c\u5143\u6570\u636e\u4e4b\u95f4\u901a\u8fc7\u7a7a\u683c\u5206\u9694\u3002\u63a8\u8350\u5c06\u6240\u6709\u7684\u5143\u6570\u636e\u901a\u8fc7\u4e00\u6761LABEL\u6307\u4ee4\u6307\u5b9a\uff0c\u4ee5\u514d\u751f\u6210\u8fc7\u591a\u7684\u4e2d\u95f4\u955c\u50cf\u3002 \u5982\uff0c\u901a\u8fc7LABEL\u6307\u5b9a\u4e00\u4e9b\u5143\u6570\u636e\uff1a LABEL version=\"1.0\" description=\"\u8fd9\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\" by=\"IT\u7b14\u5f55\" \u6307\u5b9a\u540e\u53ef\u4ee5\u901a\u8fc7docker inspect\u67e5\u770b\uff1a docker inspect itbilu/test \"Labels\": { \"version\": \"1.0\", \"description\": \"\u8fd9\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\", \"by\": \"IT\u7b14\u5f55\" }, MAINTAINER \u8bbe\u7f6e\u7ef4\u62a4\u8005\u4fe1\u606f MAINTAINR <name> RUN \u6267\u884c\u547d\u4ee4 \u5728\u955c\u50cf\u4e2d\u6267\u884c\u7279\u5b9a\u7684\u547d\u4ee4\uff0c\u53e6\u5916\uff0c RUN\u547d\u4ee4\u4f1a\u751f\u6210\u4e2d\u95f4\u955c\u50cf\u3002 # shell\u683c\u5f0f RUN <command> # exec\u683c\u5f0f RUN [ \"executable\" , \"param1\" , \"param2\" ] RUN \u547d\u4ee4\u5c06\u5728\u5f53\u524d image \u4e2d\u6267\u884c\u4efb\u610f\u5408\u6cd5\u547d\u4ee4\u5e76\u63d0\u4ea4\u6267\u884c\u7ed3\u679c\u3002\u547d\u4ee4\u6267\u884c\u63d0\u4ea4\u540e\uff0c\u5c31\u4f1a\u81ea\u52a8\u6267\u884c Dockerfile \u4e2d\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u3002 \u5c42\u7ea7 RUN \u6307\u4ee4\u548c\u751f\u6210\u63d0\u4ea4\u662f\u7b26\u5408 Docker \u6838\u5fc3\u7406\u5ff5\u7684\u505a\u6cd5\u3002\u5b83\u5141\u8bb8\u50cf\u7248\u672c\u63a7\u5236\u90a3\u6837\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u5bf9 image \u955c\u50cf\u8fdb\u884c\u5b9a\u5236\u5316\u6784\u5efa\u3002 RUN \u6307\u4ee4\u521b\u5efa\u7684\u4e2d\u95f4\u955c\u50cf\u4f1a\u88ab\u7f13\u5b58\uff0c\u5e76\u4f1a\u5728\u4e0b\u6b21\u6784\u5efa\u4e2d\u4f7f\u7528\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u8fd9\u4e9b\u7f13\u5b58\u955c\u50cf\uff0c\u53ef\u4ee5\u5728\u6784\u5efa\u65f6\u6307\u5b9a --no-cache \u53c2\u6570\uff0c\u5982\uff1a docker build --no-cache \u3002 RUN apk add --update nginx && \\ rm -rf /var/cache/apk/* && \\ # \u5220\u9664\u4e34\u65f6\u6587\u4ef6\u6765\u8ba9\u955c\u50cf\u4fdd\u6301\u6700\u5c0f\u5c3a\u5bf8 mkdir -p /tmp/nginx/ \u4ee5\u4e0b\u547d\u4ee4\u548c\u4e0a\u8ff0\u547d\u4ee4\u6709\u540c\u6837\u7684\u6548\u679c\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u4e0d\u597d\u7684\u505a\u6cd5\uff0c\u4f1a\u589e\u52a0\u6700\u7ec8\u955c\u50cf\u7684\u5927\u5c0f\u3002 RUN apk add --update nginx RUN rm -rf /var/cache/apk/* RUN mkdir -p /tmp/nginx/ COPY \u590d\u5236\u6587\u4ef6 COPY <\u6e90\u8def\u5f84>... <\u76ee\u6807\u8def\u5f84> COPY [ \"<\u6e90\u8def\u5f841>\" ,... \"<\u76ee\u6807\u8def\u5f84>\" ] \u548c RUN \u6307\u4ee4\u4e00\u6837\uff0c\u4e5f\u6709\u4e24\u79cd\u683c\u5f0f\uff0c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u884c\uff0c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u51fd\u6570\u8c03\u7528\u3002COPY \u6307\u4ee4\u5c06\u4ece\u6784\u5efa\u4e0a\u4e0b\u6587\u76ee\u5f55\u4e2d <\u6e90\u8def\u5f84> \u7684\u6587\u4ef6/\u76ee\u5f55\u590d\u5236\u5230\u65b0\u7684\u4e00\u5c42\u7684\u955c\u50cf\u5185\u7684 <\u76ee\u6807\u8def\u5f84> \u4f4d\u7f6e\u3002\u6bd4\u5982\uff1a COPY package.json /usr/src/app/ <\u6e90\u8def\u5f84> \u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u751a\u81f3\u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26\uff0c\u5176\u901a\u914d\u7b26\u89c4\u5219\u8981\u6ee1\u8db3 Go \u7684 filepath.Match \u89c4\u5219\uff0c\u5982\uff1a COPY hom* /mydir/ COPY hom?.txt /mydir/ <\u76ee\u6807\u8def\u5f84> \u53ef\u4ee5\u662f\u5bb9\u5668\u5185\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e\u5de5\u4f5c\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84\uff08\u5de5\u4f5c\u76ee\u5f55\u53ef\u4ee5\u7528 WORKDIR \u6307\u4ee4\u6765\u6307\u5b9a\uff09\u3002\u76ee\u6807\u8def\u5f84\u4e0d\u9700\u8981\u4e8b\u5148\u521b\u5efa\uff0c\u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u4f1a\u5728\u590d\u5236\u6587\u4ef6\u524d\u5148\u884c\u521b\u5efa\u7f3a\u5931\u76ee\u5f55\u3002 \u4f7f\u7528 COPY \u6307\u4ee4\uff0c\u6e90\u6587\u4ef6\u7684\u5404\u79cd\u5143\u6570\u636e\u90fd\u4f1a\u4fdd\u7559\uff0c\u6bd4\u5982\u8bfb\u3001\u5199\u3001\u6267\u884c\u6743\u9650\u3001\u6587\u4ef6\u53d8\u66f4\u65f6\u95f4\u7b49\u3002 \u8fd9\u4e2a\u7279\u6027\u5bf9\u4e8e\u955c\u50cf\u5b9a\u5236\u5f88\u6709\u7528\u3002\u7279\u522b\u662f\u6784\u5efa\u76f8\u5173\u6587\u4ef6\u90fd\u5728\u4f7f\u7528 Git \u8fdb\u884c\u7ba1\u7406\u7684\u65f6\u5019\u3002 ADD \u66f4\u9ad8\u7ea7\u7684\u590d\u5236\u6587\u4ef6 ADD <\u6e90\u8def\u5f84>... <\u76ee\u6807\u8def\u5f84> ADD [ \"<\u6e90\u8def\u5f84>\" ,... \"<\u76ee\u6807\u8def\u5f84>\" ] ADD \u6307\u4ee4\u548c COPY \u7684\u683c\u5f0f\u548c\u6027\u8d28\u57fa\u672c\u4e00\u81f4\u3002\u4f46\u662f\u5728 COPY \u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e9b\u529f\u80fd\u3002\u6bd4\u5982 <\u6e90\u8def\u5f84> \u53ef\u4ee5\u662f\u4e00\u4e2a URL\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cDocker \u5f15\u64ce\u4f1a\u8bd5\u56fe\u53bb\u4e0b\u8f7d\u8fd9\u4e2a\u94fe\u63a5\u7684\u6587\u4ef6\u653e\u5230 <\u76ee\u6807\u8def\u5f84> \u53bb\u3002 \u5982\u679c Docker \u53d1\u73b0\u6587\u4ef6\u5185\u5bb9\u88ab\u6539\u53d8\uff0c\u5219\u63a5\u4e0b\u6765\u7684\u6307\u4ee4\u90fd\u4e0d\u4f1a\u518d\u4f7f\u7528\u7f13\u5b58\u3002\u5173\u4e8e\u590d\u5236\u6587\u4ef6\u65f6\u9700\u8981\u5904\u7406\u7684/\uff0c\u57fa\u672c\u8ddf\u6b63\u5e38\u7684 copy \u4e00\u81f4\u3002 ENV \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf \u683c\u5f0f\u6709\u4e24\u79cd\uff1a ENV <key> <value> ENV <key1> = <value1> <key2> = <value2>... \u8fd9\u4e2a\u6307\u4ee4\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u800c\u5df2\uff0c\u65e0\u8bba\u662f\u540e\u9762\u7684\u5176\u5b83\u6307\u4ee4 (\u5982 RUN)\uff0c\u8fd8\u662f\u8fd0\u884c\u65f6\u7684\u5e94\u7528\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u91cc\u5b9a\u4e49\u7684\u73af\u5883\u53d8\u91cf\u3002 ENV VERSION = 1 .0 DEBUG = on NAME = \"Happy Feet\" ARG \u8bbe\u7f6e\u6784\u5efa\u65f6\u53d8\u91cf ARG\u7528\u4e8e\u6307\u5b9a\u6784\u5efa\u955c\u50cf\u65f6\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u540e\u7eed\u6307\u4ee4\u4f7f\u7528\u3002 ARG <name> [= <default value> ] \u4e0eENV\u4e0d\u540c\u7684\u662f\uff0cARG\u8bbe\u7f6e\u7684\u53d8\u91cf\u4ec5\u5728Dockerfile\u5185\u6709\u6548\uff0c\u5373\u53ea\u5728 docker build \u7684\u8fc7\u7a0b\u4e2d\u6709\u6548\uff0c\u800c\u6784\u5efa\u597d\u7684\u955c\u50cf\u5185\u4e0d\u5b58\u5728\u6b64\u73af\u5883\u53d8\u91cf\u3002 \u5982\uff0c\u901a\u8fc7ARG\u6307\u5b9a\u4e24\u4e2a\u53d8\u91cf\uff1a ARG site ARG build_user = Mike \u4ee5\u4e0a\u6307\u5b9a\u4e86 site \u548c build_user \u4e24\u4e2a\u53d8\u91cf\uff0c\u5176\u4e2d build_user \u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\u3002\u5728\u4f7f\u7528 docker build \u6784\u5efa\u955c\u50cf\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 --build-arg = \u53c2\u6570\u6765\u6307\u5b9a\u6216\u91cd\u8bbe\u7f6e\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\u3002 docker build --build-arg site = mike.com -t site/test . \u4ee5\u4e0a\u547d\u4ee4\u6784\u5efa\u4e86 site/test \u955c\u50cf\uff0c\u5176\u4e2d site \u4f1a\u88ab\u8bbe\u7f6e\u4e3a mike.com \uff0c\u800c build_user \u53d8\u91cf\u5c06\u4f7f\u7528\u9ed8\u8ba4\u503c Mike \u3002 EXPOSE \u4e3a\u6784\u5efa\u7684\u955c\u50cf\u8bbe\u7f6e\u76d1\u542c\u7aef\u53e3\uff0c\u4f7f\u5bb9\u5668\u5728\u8fd0\u884c\u65f6\u76d1\u542c\u3002\u683c\u5f0f\uff1a EXPOSE <port> [<port>...] EXPOSE \u6307\u4ee4\u5e76\u4e0d\u4f1a\u8ba9\u5bb9\u5668\u76d1\u542c host \u7684\u7aef\u53e3\uff0c\u5982\u679c\u9700\u8981\uff0c\u9700\u8981\u5728 docker run \u65f6\u4f7f\u7528 -p \u3001 -P \u53c2\u6570\u6765\u53d1\u5e03\u5bb9\u5668\u7aef\u53e3\u5230 host \u7684\u67d0\u4e2a\u7aef\u53e3\u4e0a\u3002 VOLUME \u5b9a\u4e49\u533f\u540d\u6570\u636e\u5377 VOLUME\u7528\u4e8e\u521b\u5efa\u6302\u8f7d\u70b9\uff0c\u5373\u5411\u57fa\u4e8e\u6240\u6784\u5efa\u955c\u50cf\u521b\u59cb\u7684\u5bb9\u5668\u6dfb\u52a0\u5377\uff1a VOLUME [ \"/data\" ] \u4e00\u4e2a\u5377\u53ef\u4ee5\u5b58\u5728\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u7684\u6307\u5b9a\u76ee\u5f55\uff0c\u8be5\u76ee\u5f55\u53ef\u4ee5\u7ed5\u8fc7\u8054\u5408\u6587\u4ef6\u7cfb\u7edf\uff0c\u5e76\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\uff1a \u5377\u53ef\u5728\u4ee5\u5bb9\u5668\u95f4\u5171\u4eab\u548c\u91cd\u7528 \u4fee\u6539\u5377\u540e\u4f1a\u7acb\u5373\u751f\u6548 \u5bf9\u5377\u7684\u4fee\u6539\u4e0d\u4f1a\u5bf9\u955c\u50cf\u4ea7\u751f\u5f71\u54cd \u5377\u4f1a\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u5bb9\u5668\u5728\u4f7f\u7528\u5b83 VOLUME \u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u4ee3\u7801\u3001\u6570\u636e\u6216\u5176\u5b83\u5185\u5bb9\u6dfb\u52a0\u5230\u955c\u50cf\u4e2d\uff0c\u800c\u53c8\u4e0d\u5e76\u63d0\u4ea4\u5230\u955c\u50cf\u4e2d\uff0c\u5e76\u4f7f\u6211\u4eec\u53ef\u4ee5\u591a\u4e2a\u5bb9\u5668\u95f4\u5171\u4eab\u8fd9\u4e9b\u5185\u5bb9\u3002 WORKDIR \u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55 WORKDIR\u7528\u4e8e\u5728\u5bb9\u5668\u5185\u8bbe\u7f6e\u4e00\u4e2a\u5de5\u4f5c\u76ee\u5f55\uff1a WORKDIR /path/to/workdir \u901a\u8fc7WORKDIR\u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\u540e\uff0cDockerfile \u4e2d\u5176\u540e\u7684\u547d\u4ee4 RUN\u3001CMD\u3001ENTRYPOINT\u3001ADD\u3001COPY \u7b49\u547d\u4ee4\u90fd\u4f1a\u5728\u8be5\u76ee\u5f55\u4e0b\u6267\u884c\u3002 \u5982\uff0c\u4f7f\u7528WORKDIR\u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\uff1a WORKDIR /a WORKDIR b WORKDIR c RUN pwd \u5728\u4ee5\u4e0a\u793a\u4f8b\u4e2d\uff0cpwd \u6700\u7ec8\u5c06\u4f1a\u5728 /a/b/c \u76ee\u5f55\u4e2d\u6267\u884c\u3002\u5728\u4f7f\u7528 docker run \u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 -w \u53c2\u6570\u8986\u76d6\u6784\u5efa\u65f6\u6240\u8bbe\u7f6e\u7684\u5de5\u4f5c\u76ee\u5f55\u3002 USER \u6307\u5b9a\u5f53\u524d\u7528\u6237 USER \u7528\u4e8e\u6307\u5b9a\u8fd0\u884c\u955c\u50cf\u6240\u4f7f\u7528\u7684\u7528\u6237\uff1a USER daemon \u4f7f\u7528USER\u6307\u5b9a\u7528\u6237\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u540d\u3001UID \u6216 GID\uff0c\u6216\u662f\u4e24\u8005\u7684\u7ec4\u5408\u3002\u4ee5\u4e0b\u90fd\u662f\u5408\u6cd5\u7684\u6307\u5b9a\u8bd5\uff1a USER user USER user:group USER uid USER uid:gid USER user:gid USER uid:group \u4f7f\u7528USER\u6307\u5b9a\u7528\u6237\u540e\uff0cDockerfile \u4e2d\u5176\u540e\u7684\u547d\u4ee4 RUN\u3001CMD\u3001ENTRYPOINT \u90fd\u5c06\u4f7f\u7528\u8be5\u7528\u6237\u3002\u955c\u50cf\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u901a\u8fc7 docker run \u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 -u \u53c2\u6570\u6765\u8986\u76d6\u6240\u6307\u5b9a\u7684\u7528\u6237\u3002 CMD CMD\u7528\u4e8e\u6307\u5b9a\u5728\u5bb9\u5668\u542f\u52a8\u65f6\u6240\u8981\u6267\u884c\u7684\u547d\u4ee4\u3002CMD \u6709\u4ee5\u4e0b\u4e24\u79cd\u683c\u5f0f\uff1a CMD [ \"executable\" , \"param1\" , \"param2\" ] CMD command param1 param2 Dockerfile\u53ea\u80fd\u6709\u4e00\u6761\u6709\u6548\u7684CMD\u547d\u4ee4\uff0c\u5982\u679c\u5b58\u5728\u591a\u6761CMD\u547d\u4ee4\uff0c\u6700\u540e\u9762\u7684CMD\u547d\u4ee4\u4f1a\u8986\u76d6\u524d\u9762\u7684CMD\u547d\u4ee4\u3002 \u53e6\u5916\uff0cCMD\u547d\u4ee4\u8fd8\u53ef\u4ee5\u7528\u4e8e\u7ed9ENTRYPOINT\u547d\u4ee4\u4f20\u9012\u53c2\u6570\u3002\u6b64\u65f6\uff0cCMD\u662f\u7701\u7565\u53ef\u6267\u884c\u6587\u4ef6\u7684 exec \u683c\u5f0f\uff0cENTRYPOINT\u4e5f\u5e94\u8be5\u662f exec \u683c\u5f0f \uff1a CMD [ \"param1\" , \"param2\" ] ENTRYPOINT [ \"executable\" ] \u8fd9\u79cd\u5199\u6cd5\u4f7f CMD \u4e2d\u7684\u53c2\u6570\u4f5c\u4e3a ENTRYPOINT \u7684\u9ed8\u8ba4\u53c2\u6570\u3002 CMD\u547d\u4ee4\u4e0eRUN\u547d\u4ee4\u4e0d\u540c\uff0cRUN \u5728\u6784\u5efa\u955c\u50cf\u7684\u65f6\u5019\u6267\u884c\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u955c\u50cf\u5c42\uff0cCMD \u5728\u5bb9\u5668\u8fd0\u884c\u7684\u65f6\u5019\u6267\u884c\uff0c\u5728\u6784\u5efa\u65f6\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 ENTRYPOINT ENTRYPOINT \u7528\u4e8e\u7ed9\u5bb9\u5668\u914d\u7f6e\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c \u6bcf\u6b21\u4f7f\u7528\u955c\u50cf\u521b\u5efa\u5bb9\u5668\u65f6\uff0c\u901a\u8fc7 ENTRYPOINT \u6307\u5b9a\u7684\u7a0b\u5e8f\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u7a0b\u5e8f\u3002 ENTRYPOINT \u6709\u4ee5\u4e0b\u4e24\u79cd\u5f62\u5f0f\uff1a ENTRYPOINT [ \"executable\" , \"param1\" , \"param2\" ] ENTRYPOINT command param1 param2 Dockerfile\u53ea\u80fd\u6709\u4e00\u6761\u6709\u6548\u7684ENTRYPOINT\u547d\u4ee4\uff0c\u5982\u679c\u5b58\u5728\u591a\u6761ENTRYPOINT\u547d\u4ee4\uff0c\u6700\u540e\u9762\u7684ENTRYPOINT\u547d\u4ee4\u4f1a\u8986\u76d6\u524d\u9762\u7684ENTRYPOINT\u547d\u4ee4\u3002 ENTRYPOINT \u4e0e CMD \u975e\u5e38\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\u901a\u8fc7 docker run \u6267\u884c\u7684\u547d\u4ee4\u4f1a\u8986\u76d6CMD\u547d\u4ee4\uff0c\u4f46\u4e0d\u4f1a\u8986\u76d6 ENTRYPOINT\uff0c\u800c docker run \u547d\u4ee4\u4e2d\u6307\u5b9a\u7684\u4efb\u4f55\u53c2\u6570\uff0c\u90fd\u4f1a\u88ab\u5f53\u505a\u53c2\u6570\u518d\u6b21\u4f20\u9012ENTRYPOINT\uff0c\u4e14\u4f1a\u8986\u76d6 CMD \u547d\u4ee4\u6307\u5b9a\u7684\u53c2\u6570\u3002\u5982\uff0c\u6267\u884c docker run -d \u65f6\uff0c-d \u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9\u5165\u53e3\u70b9\u3002 \u53ef\u4ee5\u901a\u8fc7 docker run --entrypoint \u8986\u76d6Dockerfile\u4e2d\u7684ENTRYPOINT\u3002 ONBUILD ONBUILD \u547d\u4ee4\u53ef\u4ee5\u8ba9\u955c\u50cf\u5b9e\u73b0\u52a8\u6001\u6784\u5efa\uff0c\u5373\u5728\u955c\u50cf\u88ab\u4f7f\u7528\u65f6\uff0c\u6267\u884c\u4e00\u4e9b\u6784\u5efa\u547d\u4ee4\uff0c\u66f4\u65b0\u955c\u50cf\u3002\u5728\u955c\u50cf\u4f5c\u4e3a\u5176\u4ed6\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\u65f6\uff0cONBUILD \u547d\u4ee4\u5f88\u6709\u7528\u3002 ONBUILD [ INSTRUCTION ] \u5f53\u6240\u6784\u5efa\u7684\u955c\u50cf\u88ab\u7528\u505a\u5176\u5b83\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\uff0c\u8be5\u955c\u50cf\u4e2d\u7684ONBUILD\u6240\u6307\u5b9a\u7684\u547d\u4ee4\u5c06\u4f1a\u89e6\u53d1\u3002\u5982\uff0c\u5f53\u955c\u50cf\u88ab\u4f7f\u7528\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u505a\u4e00\u4e9b\u5904\u7406\uff1a [ ... ] ONBUILD ADD . /app/src ONBUILD RUN /usr/local/bin/python-build --dir /app/src [ ... ] ONBUILD\u6307\u4ee4\u8ba9\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u4e00\u7cfb\u5217\u8981\u4f7f\u7528\u7684\u547d\u4ee4\uff0c\u6765\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5bb9\u5668\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\u5728\u4e4b\u540e\u4f7f\u7528\u955c\u50cf\u65f6\u8fdb\u884c\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u6211\u4eec\u8981\u7ed9\u5f00\u53d1\u8005\u4e00\u4e2a\u955c\u50cf\uff0c\u4f46\u4ed6\u60f3\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u57fa\u7840\u4e0d\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ONBUILD\u6307\u4ee4\u6765\u5b9e\u9645\u7528\u5230\u4ee3\u7801\u524d\u5efa\u7acb\u4e00\u4e2a\u57fa\u7840\u3002\u7136\u540e\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u53ea\u9700\u5728\u4f60\u6240\u544a\u8bc9\u4ed6\u4eec\u7684\u76ee\u5f55\u4e2d\u6dfb\u52a0\u4ee3\u7801\uff0c\u8fd9\u6837\u5728\u4ed6\u4eec\u8fd0\u884c\u4e00\u4e2a\u65b0\u7684Docker\u6784\u5efa\u547d\u4ee4\u65f6\uff0c\u5c31\u4f1a\u5c06\u8fd9\u4e9b\u4ee3\u7801\u52a0\u5230\u8fd0\u884c\u7684\u955c\u50cf\u4e2d\u3002 ONBUILD\u6307\u4ee4\u53ef\u4ee5\u4e0eADD\u548cRUN\u6307\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a ONBUILD RUN apk update && apk upgrade && rm -rf /var/cache/apk/* \u8fd9\u6837\u5728\u6bcf\u6b21\u5c06\u6211\u4eec\u7684\u955c\u50cf\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5bb9\u5668\u955c\u50cf\u7684\u57fa\u7840\u65f6\uff0c\u5c31\u4f1a\u8fd0\u884c\u4e00\u6b21\u66f4\u65b0\u4ee5\u53ca\u5305\u7684\u5347\u7ea7\u3002 STOPSIGNAL STOPSIGNAL\u7528\u4e8e\u8bbe\u7f6e\u505c\u6b62\u5bb9\u5668\u6240\u8981\u53d1\u9001\u7684\u7cfb\u7edf\u8c03\u7528\u4fe1\u53f7\uff1a STOPSIGNAL signal \u6240\u4f7f\u7528\u7684\u4fe1\u53f7\u5fc5\u987b\u662f\u5185\u6838\u7cfb\u7edf\u8c03\u7528\u8868\u4e2d\u7684\u5408\u6cd5\u7684\u503c\uff0c\u5982\uff1aSIGKILL\u3002 SHELL SHELL\u7528\u4e8e\u8bbe\u7f6e\u6267\u884c\u547d\u4ee4\uff08shell\u547d\u4ee4\u683c\u5f0f\uff09\u6240\u4f7f\u7528\u7684\u7684\u9ed8\u8ba4 shell \u7c7b\u578b\uff1a SHELL [ \"executable\" , \"parameters\" ] SHELL\u5728Windows\u73af\u5883\u4e0b\u6bd4\u8f83\u6709\u7528\uff0cWindows \u4e0b\u901a\u5e38\u4f1a\u6709 cmd \u548c powershell \u4e24\u79cd shell\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709 sh\u3002\u8fd9\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7 SHELL \u6765\u6307\u5b9a\u6240\u4f7f\u7528\u7684 shell \u7c7b\u578b\u3002 SHELL\u6307\u4ee4\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002\u6bcf\u4e2aSHELL\u6307\u4ee4\u5c06\u8986\u76d6\u6240\u6709\u5148\u524d\u7684SHELL\u6307\u4ee4\uff0c\u5e76\u5f71\u54cd\u6240\u6709\u540e\u7eed\u7684\u6307\u4ee4\u3002\u4f8b\u5982\uff1a FROM microsoft/windowsservercore # Executed as cmd /S /C echo default RUN echo default # Executed as cmd /S /C powershell -command Write-Host default RUN powershell -command Write-Host default # Executed as powershell -command Write-Host hello SHELL [ \"powershell\" , \"-command\" ] RUN Write-Host hello # Executed as cmd /S /C echo hello SHELL [ \"cmd\" , \"/S\"\", \" /C\"] RUN echo hello Dockerfile \u6700\u4f73\u5b9e\u8df5 \u4f7f\u7528 .dockerignore \u6587\u4ef6\u3002 .dockerignore \u6587\u4ef6\u548c .gitignore \u6587\u4ef6\u975e\u5e38\u7684\u7c7b\u4f3c\u3002\u5b83\u4f1a\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u5ffd\u7565\u4f60\u6240\u5728\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u5185\u5bb9\u3002 \u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u5185\u4ec5\u4f7f\u7528\u4e00\u4e2aDockerfile\u6765\u7ec4\u7ec7\u5bb9\u5668\u3002 \u5bf9Dockerfile\u4f7f\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u5982Git\u3002\u548c\u5176\u5b83\u6587\u672c\u7c7b\u6587\u4ef6\u4e00\u6837\uff0c\u7248\u672c\u63a7\u5236\u6709\u52a9\u4e8e\u5411\u524d\u5f00\u53d1\u4ee5\u53ca\u5728\u5fc5\u8981\u65f6\u5411\u540e\u56de\u9000\u3002 \u5c3d\u53ef\u80fd\u51cf\u5c0f\u955c\u50cf\u7684\u5927\u5c0f\uff0c\u51cf\u5c11\u4f9d\u8d56\uff0c\u4ec5\u5b89\u88c5\u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff0c\u4ee5\u53ca\u51cf\u5c11\u955c\u50cf\u7684\u56fe\u5c42\u6570\u91cf\u3002 \u6bcf\u4e2a\u5bb9\u5668\u4ec5\u6709\u4e00\u4e2a\u5e94\u7528\u8fdb\u7a0b\uff0c\u5373\u4e00\u4e2a\u5bb9\u5668\u53ea\u505a\u4e00\u4ef6\u4e8b\u3002\u6bcf\u5f53\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u8fdb\u7a0b\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u6765\u8fd0\u884c\u8be5\u5e94\u7528\u3002 \u4fdd\u6301\u7b80\u6d01\uff0c\u8fc7\u5ea6\u590d\u6742\u7684Dockerfile\u4f1a\u5bfc\u81f4\u81c3\u80bf\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728\u4e0d\u65ad\u4f7f\u7528\u4e2d\u5e26\u6765\u4e00\u4e9b\u6f5c\u5728\u7684\u95ee\u9898\u3002 \u5bf9\u7eed\u884c\u7684\u53c2\u6570\u6309\u7167\u5b57\u6bcd\u8868\u6392\u5e8f\uff0c\u7279\u522b\u662f\u4f7f\u7528 apt-get install -y \u5b89\u88c5\u5305\u7684\u65f6\u5019\u3002 \u4f7f\u7528\u6784\u5efa\u7f13\u5b58\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u7f13\u5b58\uff0c\u53ef\u4ee5\u5728\u6784\u5efa\u7684\u65f6\u5019\u4f7f\u7528\u53c2\u6570 --no-cache=true \u6765\u5f3a\u5236\u91cd\u65b0\u751f\u6210\u4e2d\u95f4\u955c\u50cf\u3002 Dockerfile \u793a\u4f8b \u6784\u5efaNginx\u8fd0\u884c\u73af\u5883 # \u6307\u5b9a\u57fa\u7840\u955c\u50cf FROM sameersbn/ubuntu:14.04.20161014 # \u7ef4\u62a4\u8005\u4fe1\u606f MAINTAINER sameer@damagehead.com # \u8bbe\u7f6e\u73af\u5883 ENV RTMP_VERSION = 1 .1.10 \\ NPS_VERSION = 1 .11.33.4 \\ LIBAV_VERSION = 11 .8 \\ NGINX_VERSION = 1 .10.1 \\ NGINX_USER = www-data \\ NGINX_SITECONF_DIR = /etc/nginx/sites-enabled \\ NGINX_LOG_DIR = /var/log/nginx \\ NGINX_TEMP_DIR = /var/lib/nginx \\ NGINX_SETUP_DIR = /var/cache/nginx # \u8bbe\u7f6e\u6784\u5efa\u65f6\u53d8\u91cf\uff0c\u955c\u50cf\u5efa\u7acb\u5b8c\u6210\u540e\u5c31\u5931\u6548 ARG BUILD_LIBAV = false ARG WITH_DEBUG = false ARG WITH_PAGESPEED = true ARG WITH_RTMP = true # \u590d\u5236\u672c\u5730\u6587\u4ef6\u5230\u5bb9\u5668\u76ee\u5f55\u4e2d COPY setup/ ${ NGINX_SETUP_DIR } / RUN bash ${ NGINX_SETUP_DIR } /install.sh # \u590d\u5236\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u5230\u5bb9\u5668\u76ee\u5f55\u4e2d COPY nginx.conf /etc/nginx/nginx.conf COPY entrypoint.sh /sbin/entrypoint.sh # \u8fd0\u884c\u6307\u4ee4 RUN chmod 755 /sbin/entrypoint.sh # \u5141\u8bb8\u6307\u5b9a\u7684\u7aef\u53e3 EXPOSE 80/tcp 443/tcp 1935/tcp # \u6307\u5b9a\u7f51\u7ad9\u76ee\u5f55\u6302\u8f7d\u70b9 VOLUME [ \"${NGINX_SITECONF_DIR}\" ] ENTRYPOINT [ \"/sbin/entrypoint.sh\" ] CMD [ \"/usr/sbin/nginx\" ]","title":"17.2.Dockerfile"},{"location":"Docker/17.2.Dockerfile.html#dockerfile","text":"","title":"Dockerfile \u547d\u4ee4"},{"location":"Docker/17.2.Dockerfile.html#from","text":"FROM \u6307\u4ee4\u7528\u4e8e\u6307\u5b9a\u5176\u540e\u6784\u5efa\u65b0\u955c\u50cf\u6240\u4f7f\u7528\u7684\u57fa\u7840\u955c\u50cf\u3002 Dockerfile \u6587\u4ef6\u4e2d\u7684\u7b2c\u4e00\u6761\u547d\u4ee4\u5fc5\u987b\u662fFROM \u6307\u4ee4 \uff0c\u542f\u52a8\u6784\u5efa\u6d41\u7a0b\u540e\uff0cDocker \u5c06\u4f1a\u57fa\u4e8e\u8be5\u955c\u50cf\u6784\u5efa\u65b0\u955c\u50cf\uff0cFROM \u540e\u7684\u547d\u4ee4\u4e5f\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u57fa\u7840\u955c\u50cf\u3002 FROM\u8bed\u6cd5\u683c\u5f0f\u4e3a\uff1a FROM <image> # \u6216\u8005 FROM <image>:<tag> # \u6216\u8005 FROM <image>:<digest> \u5728\u4e00\u4e2a Dockerfile \u6587\u4ef6\u4e2d\u521b\u5efa\u591a\u4e2a\u955c\u50cf\u65f6\uff0cFROM \u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u3002\u53ea\u9700\u5728\u6bcf\u4e2a\u65b0\u547d\u4ee4 FROM \u4e4b\u524d\uff0c\u8bb0\u5f55\u63d0\u4ea4\u4e0a\u6b21\u7684\u955c\u50cf ID\u3002tag \u6216 digest \u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u8fd9\u4e24\u4e2a\u503c\u65f6\uff0c\u4f1a\u4f7f\u7528 latest \u7248\u672c\u7684\u57fa\u7840\u955c\u50cf\u3002","title":"FROM \u6307\u5b9a\u57fa\u7840\u955c\u50cf"},{"location":"Docker/17.2.Dockerfile.html#label","text":"LABEL\u7528\u4e8e\u4e3a\u955c\u50cf\u6dfb\u52a0\u5143\u6570\u636e\uff0c\u5143\u6570\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u6307\u5b9a\uff1a LABEL <key> = <value> <key> = <value> <key> = <value> ... \u4f7f\u7528LABEL\u6307\u5b9a\u5143\u6570\u636e\u65f6\uff0c\u4e00\u6761LABEL\u6307\u5b9a\u53ef\u4ee5\u6307\u5b9a\u4e00\u6216\u591a\u6761\u5143\u6570\u636e\uff0c\u6307\u5b9a\u591a\u6761\u5143\u6570\u636e\u65f6\u4e0d\u540c\u5143\u6570\u636e\u4e4b\u95f4\u901a\u8fc7\u7a7a\u683c\u5206\u9694\u3002\u63a8\u8350\u5c06\u6240\u6709\u7684\u5143\u6570\u636e\u901a\u8fc7\u4e00\u6761LABEL\u6307\u4ee4\u6307\u5b9a\uff0c\u4ee5\u514d\u751f\u6210\u8fc7\u591a\u7684\u4e2d\u95f4\u955c\u50cf\u3002 \u5982\uff0c\u901a\u8fc7LABEL\u6307\u5b9a\u4e00\u4e9b\u5143\u6570\u636e\uff1a LABEL version=\"1.0\" description=\"\u8fd9\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\" by=\"IT\u7b14\u5f55\" \u6307\u5b9a\u540e\u53ef\u4ee5\u901a\u8fc7docker inspect\u67e5\u770b\uff1a docker inspect itbilu/test \"Labels\": { \"version\": \"1.0\", \"description\": \"\u8fd9\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\", \"by\": \"IT\u7b14\u5f55\" },","title":"LABEL"},{"location":"Docker/17.2.Dockerfile.html#maintainer","text":"MAINTAINR <name>","title":"MAINTAINER \u8bbe\u7f6e\u7ef4\u62a4\u8005\u4fe1\u606f"},{"location":"Docker/17.2.Dockerfile.html#run","text":"\u5728\u955c\u50cf\u4e2d\u6267\u884c\u7279\u5b9a\u7684\u547d\u4ee4\uff0c\u53e6\u5916\uff0c RUN\u547d\u4ee4\u4f1a\u751f\u6210\u4e2d\u95f4\u955c\u50cf\u3002 # shell\u683c\u5f0f RUN <command> # exec\u683c\u5f0f RUN [ \"executable\" , \"param1\" , \"param2\" ] RUN \u547d\u4ee4\u5c06\u5728\u5f53\u524d image \u4e2d\u6267\u884c\u4efb\u610f\u5408\u6cd5\u547d\u4ee4\u5e76\u63d0\u4ea4\u6267\u884c\u7ed3\u679c\u3002\u547d\u4ee4\u6267\u884c\u63d0\u4ea4\u540e\uff0c\u5c31\u4f1a\u81ea\u52a8\u6267\u884c Dockerfile \u4e2d\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u3002 \u5c42\u7ea7 RUN \u6307\u4ee4\u548c\u751f\u6210\u63d0\u4ea4\u662f\u7b26\u5408 Docker \u6838\u5fc3\u7406\u5ff5\u7684\u505a\u6cd5\u3002\u5b83\u5141\u8bb8\u50cf\u7248\u672c\u63a7\u5236\u90a3\u6837\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u5bf9 image \u955c\u50cf\u8fdb\u884c\u5b9a\u5236\u5316\u6784\u5efa\u3002 RUN \u6307\u4ee4\u521b\u5efa\u7684\u4e2d\u95f4\u955c\u50cf\u4f1a\u88ab\u7f13\u5b58\uff0c\u5e76\u4f1a\u5728\u4e0b\u6b21\u6784\u5efa\u4e2d\u4f7f\u7528\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u8fd9\u4e9b\u7f13\u5b58\u955c\u50cf\uff0c\u53ef\u4ee5\u5728\u6784\u5efa\u65f6\u6307\u5b9a --no-cache \u53c2\u6570\uff0c\u5982\uff1a docker build --no-cache \u3002 RUN apk add --update nginx && \\ rm -rf /var/cache/apk/* && \\ # \u5220\u9664\u4e34\u65f6\u6587\u4ef6\u6765\u8ba9\u955c\u50cf\u4fdd\u6301\u6700\u5c0f\u5c3a\u5bf8 mkdir -p /tmp/nginx/ \u4ee5\u4e0b\u547d\u4ee4\u548c\u4e0a\u8ff0\u547d\u4ee4\u6709\u540c\u6837\u7684\u6548\u679c\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u4e0d\u597d\u7684\u505a\u6cd5\uff0c\u4f1a\u589e\u52a0\u6700\u7ec8\u955c\u50cf\u7684\u5927\u5c0f\u3002 RUN apk add --update nginx RUN rm -rf /var/cache/apk/* RUN mkdir -p /tmp/nginx/","title":"RUN \u6267\u884c\u547d\u4ee4"},{"location":"Docker/17.2.Dockerfile.html#copy","text":"COPY <\u6e90\u8def\u5f84>... <\u76ee\u6807\u8def\u5f84> COPY [ \"<\u6e90\u8def\u5f841>\" ,... \"<\u76ee\u6807\u8def\u5f84>\" ] \u548c RUN \u6307\u4ee4\u4e00\u6837\uff0c\u4e5f\u6709\u4e24\u79cd\u683c\u5f0f\uff0c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u884c\uff0c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u51fd\u6570\u8c03\u7528\u3002COPY \u6307\u4ee4\u5c06\u4ece\u6784\u5efa\u4e0a\u4e0b\u6587\u76ee\u5f55\u4e2d <\u6e90\u8def\u5f84> \u7684\u6587\u4ef6/\u76ee\u5f55\u590d\u5236\u5230\u65b0\u7684\u4e00\u5c42\u7684\u955c\u50cf\u5185\u7684 <\u76ee\u6807\u8def\u5f84> \u4f4d\u7f6e\u3002\u6bd4\u5982\uff1a COPY package.json /usr/src/app/ <\u6e90\u8def\u5f84> \u53ef\u4ee5\u662f\u591a\u4e2a\uff0c\u751a\u81f3\u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26\uff0c\u5176\u901a\u914d\u7b26\u89c4\u5219\u8981\u6ee1\u8db3 Go \u7684 filepath.Match \u89c4\u5219\uff0c\u5982\uff1a COPY hom* /mydir/ COPY hom?.txt /mydir/ <\u76ee\u6807\u8def\u5f84> \u53ef\u4ee5\u662f\u5bb9\u5668\u5185\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e\u5de5\u4f5c\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84\uff08\u5de5\u4f5c\u76ee\u5f55\u53ef\u4ee5\u7528 WORKDIR \u6307\u4ee4\u6765\u6307\u5b9a\uff09\u3002\u76ee\u6807\u8def\u5f84\u4e0d\u9700\u8981\u4e8b\u5148\u521b\u5efa\uff0c\u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u4f1a\u5728\u590d\u5236\u6587\u4ef6\u524d\u5148\u884c\u521b\u5efa\u7f3a\u5931\u76ee\u5f55\u3002 \u4f7f\u7528 COPY \u6307\u4ee4\uff0c\u6e90\u6587\u4ef6\u7684\u5404\u79cd\u5143\u6570\u636e\u90fd\u4f1a\u4fdd\u7559\uff0c\u6bd4\u5982\u8bfb\u3001\u5199\u3001\u6267\u884c\u6743\u9650\u3001\u6587\u4ef6\u53d8\u66f4\u65f6\u95f4\u7b49\u3002 \u8fd9\u4e2a\u7279\u6027\u5bf9\u4e8e\u955c\u50cf\u5b9a\u5236\u5f88\u6709\u7528\u3002\u7279\u522b\u662f\u6784\u5efa\u76f8\u5173\u6587\u4ef6\u90fd\u5728\u4f7f\u7528 Git \u8fdb\u884c\u7ba1\u7406\u7684\u65f6\u5019\u3002","title":"COPY \u590d\u5236\u6587\u4ef6"},{"location":"Docker/17.2.Dockerfile.html#add","text":"ADD <\u6e90\u8def\u5f84>... <\u76ee\u6807\u8def\u5f84> ADD [ \"<\u6e90\u8def\u5f84>\" ,... \"<\u76ee\u6807\u8def\u5f84>\" ] ADD \u6307\u4ee4\u548c COPY \u7684\u683c\u5f0f\u548c\u6027\u8d28\u57fa\u672c\u4e00\u81f4\u3002\u4f46\u662f\u5728 COPY \u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e9b\u529f\u80fd\u3002\u6bd4\u5982 <\u6e90\u8def\u5f84> \u53ef\u4ee5\u662f\u4e00\u4e2a URL\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cDocker \u5f15\u64ce\u4f1a\u8bd5\u56fe\u53bb\u4e0b\u8f7d\u8fd9\u4e2a\u94fe\u63a5\u7684\u6587\u4ef6\u653e\u5230 <\u76ee\u6807\u8def\u5f84> \u53bb\u3002 \u5982\u679c Docker \u53d1\u73b0\u6587\u4ef6\u5185\u5bb9\u88ab\u6539\u53d8\uff0c\u5219\u63a5\u4e0b\u6765\u7684\u6307\u4ee4\u90fd\u4e0d\u4f1a\u518d\u4f7f\u7528\u7f13\u5b58\u3002\u5173\u4e8e\u590d\u5236\u6587\u4ef6\u65f6\u9700\u8981\u5904\u7406\u7684/\uff0c\u57fa\u672c\u8ddf\u6b63\u5e38\u7684 copy \u4e00\u81f4\u3002","title":"ADD \u66f4\u9ad8\u7ea7\u7684\u590d\u5236\u6587\u4ef6"},{"location":"Docker/17.2.Dockerfile.html#env","text":"\u683c\u5f0f\u6709\u4e24\u79cd\uff1a ENV <key> <value> ENV <key1> = <value1> <key2> = <value2>... \u8fd9\u4e2a\u6307\u4ee4\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u800c\u5df2\uff0c\u65e0\u8bba\u662f\u540e\u9762\u7684\u5176\u5b83\u6307\u4ee4 (\u5982 RUN)\uff0c\u8fd8\u662f\u8fd0\u884c\u65f6\u7684\u5e94\u7528\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u91cc\u5b9a\u4e49\u7684\u73af\u5883\u53d8\u91cf\u3002 ENV VERSION = 1 .0 DEBUG = on NAME = \"Happy Feet\"","title":"ENV \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf"},{"location":"Docker/17.2.Dockerfile.html#arg","text":"ARG\u7528\u4e8e\u6307\u5b9a\u6784\u5efa\u955c\u50cf\u65f6\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u540e\u7eed\u6307\u4ee4\u4f7f\u7528\u3002 ARG <name> [= <default value> ] \u4e0eENV\u4e0d\u540c\u7684\u662f\uff0cARG\u8bbe\u7f6e\u7684\u53d8\u91cf\u4ec5\u5728Dockerfile\u5185\u6709\u6548\uff0c\u5373\u53ea\u5728 docker build \u7684\u8fc7\u7a0b\u4e2d\u6709\u6548\uff0c\u800c\u6784\u5efa\u597d\u7684\u955c\u50cf\u5185\u4e0d\u5b58\u5728\u6b64\u73af\u5883\u53d8\u91cf\u3002 \u5982\uff0c\u901a\u8fc7ARG\u6307\u5b9a\u4e24\u4e2a\u53d8\u91cf\uff1a ARG site ARG build_user = Mike \u4ee5\u4e0a\u6307\u5b9a\u4e86 site \u548c build_user \u4e24\u4e2a\u53d8\u91cf\uff0c\u5176\u4e2d build_user \u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\u3002\u5728\u4f7f\u7528 docker build \u6784\u5efa\u955c\u50cf\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 --build-arg = \u53c2\u6570\u6765\u6307\u5b9a\u6216\u91cd\u8bbe\u7f6e\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\u3002 docker build --build-arg site = mike.com -t site/test . \u4ee5\u4e0a\u547d\u4ee4\u6784\u5efa\u4e86 site/test \u955c\u50cf\uff0c\u5176\u4e2d site \u4f1a\u88ab\u8bbe\u7f6e\u4e3a mike.com \uff0c\u800c build_user \u53d8\u91cf\u5c06\u4f7f\u7528\u9ed8\u8ba4\u503c Mike \u3002","title":"ARG \u8bbe\u7f6e\u6784\u5efa\u65f6\u53d8\u91cf"},{"location":"Docker/17.2.Dockerfile.html#expose","text":"\u4e3a\u6784\u5efa\u7684\u955c\u50cf\u8bbe\u7f6e\u76d1\u542c\u7aef\u53e3\uff0c\u4f7f\u5bb9\u5668\u5728\u8fd0\u884c\u65f6\u76d1\u542c\u3002\u683c\u5f0f\uff1a EXPOSE <port> [<port>...] EXPOSE \u6307\u4ee4\u5e76\u4e0d\u4f1a\u8ba9\u5bb9\u5668\u76d1\u542c host \u7684\u7aef\u53e3\uff0c\u5982\u679c\u9700\u8981\uff0c\u9700\u8981\u5728 docker run \u65f6\u4f7f\u7528 -p \u3001 -P \u53c2\u6570\u6765\u53d1\u5e03\u5bb9\u5668\u7aef\u53e3\u5230 host \u7684\u67d0\u4e2a\u7aef\u53e3\u4e0a\u3002","title":"EXPOSE"},{"location":"Docker/17.2.Dockerfile.html#volume","text":"VOLUME\u7528\u4e8e\u521b\u5efa\u6302\u8f7d\u70b9\uff0c\u5373\u5411\u57fa\u4e8e\u6240\u6784\u5efa\u955c\u50cf\u521b\u59cb\u7684\u5bb9\u5668\u6dfb\u52a0\u5377\uff1a VOLUME [ \"/data\" ] \u4e00\u4e2a\u5377\u53ef\u4ee5\u5b58\u5728\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u7684\u6307\u5b9a\u76ee\u5f55\uff0c\u8be5\u76ee\u5f55\u53ef\u4ee5\u7ed5\u8fc7\u8054\u5408\u6587\u4ef6\u7cfb\u7edf\uff0c\u5e76\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\uff1a \u5377\u53ef\u5728\u4ee5\u5bb9\u5668\u95f4\u5171\u4eab\u548c\u91cd\u7528 \u4fee\u6539\u5377\u540e\u4f1a\u7acb\u5373\u751f\u6548 \u5bf9\u5377\u7684\u4fee\u6539\u4e0d\u4f1a\u5bf9\u955c\u50cf\u4ea7\u751f\u5f71\u54cd \u5377\u4f1a\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u5bb9\u5668\u5728\u4f7f\u7528\u5b83 VOLUME \u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u4ee3\u7801\u3001\u6570\u636e\u6216\u5176\u5b83\u5185\u5bb9\u6dfb\u52a0\u5230\u955c\u50cf\u4e2d\uff0c\u800c\u53c8\u4e0d\u5e76\u63d0\u4ea4\u5230\u955c\u50cf\u4e2d\uff0c\u5e76\u4f7f\u6211\u4eec\u53ef\u4ee5\u591a\u4e2a\u5bb9\u5668\u95f4\u5171\u4eab\u8fd9\u4e9b\u5185\u5bb9\u3002","title":"VOLUME \u5b9a\u4e49\u533f\u540d\u6570\u636e\u5377"},{"location":"Docker/17.2.Dockerfile.html#workdir","text":"WORKDIR\u7528\u4e8e\u5728\u5bb9\u5668\u5185\u8bbe\u7f6e\u4e00\u4e2a\u5de5\u4f5c\u76ee\u5f55\uff1a WORKDIR /path/to/workdir \u901a\u8fc7WORKDIR\u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\u540e\uff0cDockerfile \u4e2d\u5176\u540e\u7684\u547d\u4ee4 RUN\u3001CMD\u3001ENTRYPOINT\u3001ADD\u3001COPY \u7b49\u547d\u4ee4\u90fd\u4f1a\u5728\u8be5\u76ee\u5f55\u4e0b\u6267\u884c\u3002 \u5982\uff0c\u4f7f\u7528WORKDIR\u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55\uff1a WORKDIR /a WORKDIR b WORKDIR c RUN pwd \u5728\u4ee5\u4e0a\u793a\u4f8b\u4e2d\uff0cpwd \u6700\u7ec8\u5c06\u4f1a\u5728 /a/b/c \u76ee\u5f55\u4e2d\u6267\u884c\u3002\u5728\u4f7f\u7528 docker run \u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 -w \u53c2\u6570\u8986\u76d6\u6784\u5efa\u65f6\u6240\u8bbe\u7f6e\u7684\u5de5\u4f5c\u76ee\u5f55\u3002","title":"WORKDIR \u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55"},{"location":"Docker/17.2.Dockerfile.html#user","text":"USER \u7528\u4e8e\u6307\u5b9a\u8fd0\u884c\u955c\u50cf\u6240\u4f7f\u7528\u7684\u7528\u6237\uff1a USER daemon \u4f7f\u7528USER\u6307\u5b9a\u7528\u6237\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u540d\u3001UID \u6216 GID\uff0c\u6216\u662f\u4e24\u8005\u7684\u7ec4\u5408\u3002\u4ee5\u4e0b\u90fd\u662f\u5408\u6cd5\u7684\u6307\u5b9a\u8bd5\uff1a USER user USER user:group USER uid USER uid:gid USER user:gid USER uid:group \u4f7f\u7528USER\u6307\u5b9a\u7528\u6237\u540e\uff0cDockerfile \u4e2d\u5176\u540e\u7684\u547d\u4ee4 RUN\u3001CMD\u3001ENTRYPOINT \u90fd\u5c06\u4f7f\u7528\u8be5\u7528\u6237\u3002\u955c\u50cf\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u901a\u8fc7 docker run \u8fd0\u884c\u5bb9\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 -u \u53c2\u6570\u6765\u8986\u76d6\u6240\u6307\u5b9a\u7684\u7528\u6237\u3002","title":"USER \u6307\u5b9a\u5f53\u524d\u7528\u6237"},{"location":"Docker/17.2.Dockerfile.html#cmd","text":"CMD\u7528\u4e8e\u6307\u5b9a\u5728\u5bb9\u5668\u542f\u52a8\u65f6\u6240\u8981\u6267\u884c\u7684\u547d\u4ee4\u3002CMD \u6709\u4ee5\u4e0b\u4e24\u79cd\u683c\u5f0f\uff1a CMD [ \"executable\" , \"param1\" , \"param2\" ] CMD command param1 param2 Dockerfile\u53ea\u80fd\u6709\u4e00\u6761\u6709\u6548\u7684CMD\u547d\u4ee4\uff0c\u5982\u679c\u5b58\u5728\u591a\u6761CMD\u547d\u4ee4\uff0c\u6700\u540e\u9762\u7684CMD\u547d\u4ee4\u4f1a\u8986\u76d6\u524d\u9762\u7684CMD\u547d\u4ee4\u3002 \u53e6\u5916\uff0cCMD\u547d\u4ee4\u8fd8\u53ef\u4ee5\u7528\u4e8e\u7ed9ENTRYPOINT\u547d\u4ee4\u4f20\u9012\u53c2\u6570\u3002\u6b64\u65f6\uff0cCMD\u662f\u7701\u7565\u53ef\u6267\u884c\u6587\u4ef6\u7684 exec \u683c\u5f0f\uff0cENTRYPOINT\u4e5f\u5e94\u8be5\u662f exec \u683c\u5f0f \uff1a CMD [ \"param1\" , \"param2\" ] ENTRYPOINT [ \"executable\" ] \u8fd9\u79cd\u5199\u6cd5\u4f7f CMD \u4e2d\u7684\u53c2\u6570\u4f5c\u4e3a ENTRYPOINT \u7684\u9ed8\u8ba4\u53c2\u6570\u3002 CMD\u547d\u4ee4\u4e0eRUN\u547d\u4ee4\u4e0d\u540c\uff0cRUN \u5728\u6784\u5efa\u955c\u50cf\u7684\u65f6\u5019\u6267\u884c\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u955c\u50cf\u5c42\uff0cCMD \u5728\u5bb9\u5668\u8fd0\u884c\u7684\u65f6\u5019\u6267\u884c\uff0c\u5728\u6784\u5efa\u65f6\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002","title":"CMD"},{"location":"Docker/17.2.Dockerfile.html#entrypoint","text":"ENTRYPOINT \u7528\u4e8e\u7ed9\u5bb9\u5668\u914d\u7f6e\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c \u6bcf\u6b21\u4f7f\u7528\u955c\u50cf\u521b\u5efa\u5bb9\u5668\u65f6\uff0c\u901a\u8fc7 ENTRYPOINT \u6307\u5b9a\u7684\u7a0b\u5e8f\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u7a0b\u5e8f\u3002 ENTRYPOINT \u6709\u4ee5\u4e0b\u4e24\u79cd\u5f62\u5f0f\uff1a ENTRYPOINT [ \"executable\" , \"param1\" , \"param2\" ] ENTRYPOINT command param1 param2 Dockerfile\u53ea\u80fd\u6709\u4e00\u6761\u6709\u6548\u7684ENTRYPOINT\u547d\u4ee4\uff0c\u5982\u679c\u5b58\u5728\u591a\u6761ENTRYPOINT\u547d\u4ee4\uff0c\u6700\u540e\u9762\u7684ENTRYPOINT\u547d\u4ee4\u4f1a\u8986\u76d6\u524d\u9762\u7684ENTRYPOINT\u547d\u4ee4\u3002 ENTRYPOINT \u4e0e CMD \u975e\u5e38\u7c7b\u4f3c\uff0c\u4e0d\u540c\u7684\u662f\u901a\u8fc7 docker run \u6267\u884c\u7684\u547d\u4ee4\u4f1a\u8986\u76d6CMD\u547d\u4ee4\uff0c\u4f46\u4e0d\u4f1a\u8986\u76d6 ENTRYPOINT\uff0c\u800c docker run \u547d\u4ee4\u4e2d\u6307\u5b9a\u7684\u4efb\u4f55\u53c2\u6570\uff0c\u90fd\u4f1a\u88ab\u5f53\u505a\u53c2\u6570\u518d\u6b21\u4f20\u9012ENTRYPOINT\uff0c\u4e14\u4f1a\u8986\u76d6 CMD \u547d\u4ee4\u6307\u5b9a\u7684\u53c2\u6570\u3002\u5982\uff0c\u6267\u884c docker run -d \u65f6\uff0c-d \u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9\u5165\u53e3\u70b9\u3002 \u53ef\u4ee5\u901a\u8fc7 docker run --entrypoint \u8986\u76d6Dockerfile\u4e2d\u7684ENTRYPOINT\u3002","title":"ENTRYPOINT"},{"location":"Docker/17.2.Dockerfile.html#onbuild","text":"ONBUILD \u547d\u4ee4\u53ef\u4ee5\u8ba9\u955c\u50cf\u5b9e\u73b0\u52a8\u6001\u6784\u5efa\uff0c\u5373\u5728\u955c\u50cf\u88ab\u4f7f\u7528\u65f6\uff0c\u6267\u884c\u4e00\u4e9b\u6784\u5efa\u547d\u4ee4\uff0c\u66f4\u65b0\u955c\u50cf\u3002\u5728\u955c\u50cf\u4f5c\u4e3a\u5176\u4ed6\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\u65f6\uff0cONBUILD \u547d\u4ee4\u5f88\u6709\u7528\u3002 ONBUILD [ INSTRUCTION ] \u5f53\u6240\u6784\u5efa\u7684\u955c\u50cf\u88ab\u7528\u505a\u5176\u5b83\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\uff0c\u8be5\u955c\u50cf\u4e2d\u7684ONBUILD\u6240\u6307\u5b9a\u7684\u547d\u4ee4\u5c06\u4f1a\u89e6\u53d1\u3002\u5982\uff0c\u5f53\u955c\u50cf\u88ab\u4f7f\u7528\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u505a\u4e00\u4e9b\u5904\u7406\uff1a [ ... ] ONBUILD ADD . /app/src ONBUILD RUN /usr/local/bin/python-build --dir /app/src [ ... ] ONBUILD\u6307\u4ee4\u8ba9\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u4e00\u7cfb\u5217\u8981\u4f7f\u7528\u7684\u547d\u4ee4\uff0c\u6765\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5bb9\u5668\u955c\u50cf\u7684\u57fa\u7840\u955c\u50cf\u5728\u4e4b\u540e\u4f7f\u7528\u955c\u50cf\u65f6\u8fdb\u884c\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u6211\u4eec\u8981\u7ed9\u5f00\u53d1\u8005\u4e00\u4e2a\u955c\u50cf\uff0c\u4f46\u4ed6\u60f3\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u57fa\u7840\u4e0d\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ONBUILD\u6307\u4ee4\u6765\u5b9e\u9645\u7528\u5230\u4ee3\u7801\u524d\u5efa\u7acb\u4e00\u4e2a\u57fa\u7840\u3002\u7136\u540e\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u53ea\u9700\u5728\u4f60\u6240\u544a\u8bc9\u4ed6\u4eec\u7684\u76ee\u5f55\u4e2d\u6dfb\u52a0\u4ee3\u7801\uff0c\u8fd9\u6837\u5728\u4ed6\u4eec\u8fd0\u884c\u4e00\u4e2a\u65b0\u7684Docker\u6784\u5efa\u547d\u4ee4\u65f6\uff0c\u5c31\u4f1a\u5c06\u8fd9\u4e9b\u4ee3\u7801\u52a0\u5230\u8fd0\u884c\u7684\u955c\u50cf\u4e2d\u3002 ONBUILD\u6307\u4ee4\u53ef\u4ee5\u4e0eADD\u548cRUN\u6307\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a ONBUILD RUN apk update && apk upgrade && rm -rf /var/cache/apk/* \u8fd9\u6837\u5728\u6bcf\u6b21\u5c06\u6211\u4eec\u7684\u955c\u50cf\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u5bb9\u5668\u955c\u50cf\u7684\u57fa\u7840\u65f6\uff0c\u5c31\u4f1a\u8fd0\u884c\u4e00\u6b21\u66f4\u65b0\u4ee5\u53ca\u5305\u7684\u5347\u7ea7\u3002","title":"ONBUILD"},{"location":"Docker/17.2.Dockerfile.html#stopsignal","text":"STOPSIGNAL\u7528\u4e8e\u8bbe\u7f6e\u505c\u6b62\u5bb9\u5668\u6240\u8981\u53d1\u9001\u7684\u7cfb\u7edf\u8c03\u7528\u4fe1\u53f7\uff1a STOPSIGNAL signal \u6240\u4f7f\u7528\u7684\u4fe1\u53f7\u5fc5\u987b\u662f\u5185\u6838\u7cfb\u7edf\u8c03\u7528\u8868\u4e2d\u7684\u5408\u6cd5\u7684\u503c\uff0c\u5982\uff1aSIGKILL\u3002","title":"STOPSIGNAL"},{"location":"Docker/17.2.Dockerfile.html#shell","text":"SHELL\u7528\u4e8e\u8bbe\u7f6e\u6267\u884c\u547d\u4ee4\uff08shell\u547d\u4ee4\u683c\u5f0f\uff09\u6240\u4f7f\u7528\u7684\u7684\u9ed8\u8ba4 shell \u7c7b\u578b\uff1a SHELL [ \"executable\" , \"parameters\" ] SHELL\u5728Windows\u73af\u5883\u4e0b\u6bd4\u8f83\u6709\u7528\uff0cWindows \u4e0b\u901a\u5e38\u4f1a\u6709 cmd \u548c powershell \u4e24\u79cd shell\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709 sh\u3002\u8fd9\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7 SHELL \u6765\u6307\u5b9a\u6240\u4f7f\u7528\u7684 shell \u7c7b\u578b\u3002 SHELL\u6307\u4ee4\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002\u6bcf\u4e2aSHELL\u6307\u4ee4\u5c06\u8986\u76d6\u6240\u6709\u5148\u524d\u7684SHELL\u6307\u4ee4\uff0c\u5e76\u5f71\u54cd\u6240\u6709\u540e\u7eed\u7684\u6307\u4ee4\u3002\u4f8b\u5982\uff1a FROM microsoft/windowsservercore # Executed as cmd /S /C echo default RUN echo default # Executed as cmd /S /C powershell -command Write-Host default RUN powershell -command Write-Host default # Executed as powershell -command Write-Host hello SHELL [ \"powershell\" , \"-command\" ] RUN Write-Host hello # Executed as cmd /S /C echo hello SHELL [ \"cmd\" , \"/S\"\", \" /C\"] RUN echo hello","title":"SHELL"},{"location":"Docker/17.2.Dockerfile.html#dockerfile_1","text":"\u4f7f\u7528 .dockerignore \u6587\u4ef6\u3002 .dockerignore \u6587\u4ef6\u548c .gitignore \u6587\u4ef6\u975e\u5e38\u7684\u7c7b\u4f3c\u3002\u5b83\u4f1a\u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\u5ffd\u7565\u4f60\u6240\u5728\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u5185\u5bb9\u3002 \u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u5185\u4ec5\u4f7f\u7528\u4e00\u4e2aDockerfile\u6765\u7ec4\u7ec7\u5bb9\u5668\u3002 \u5bf9Dockerfile\u4f7f\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u5982Git\u3002\u548c\u5176\u5b83\u6587\u672c\u7c7b\u6587\u4ef6\u4e00\u6837\uff0c\u7248\u672c\u63a7\u5236\u6709\u52a9\u4e8e\u5411\u524d\u5f00\u53d1\u4ee5\u53ca\u5728\u5fc5\u8981\u65f6\u5411\u540e\u56de\u9000\u3002 \u5c3d\u53ef\u80fd\u51cf\u5c0f\u955c\u50cf\u7684\u5927\u5c0f\uff0c\u51cf\u5c11\u4f9d\u8d56\uff0c\u4ec5\u5b89\u88c5\u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff0c\u4ee5\u53ca\u51cf\u5c11\u955c\u50cf\u7684\u56fe\u5c42\u6570\u91cf\u3002 \u6bcf\u4e2a\u5bb9\u5668\u4ec5\u6709\u4e00\u4e2a\u5e94\u7528\u8fdb\u7a0b\uff0c\u5373\u4e00\u4e2a\u5bb9\u5668\u53ea\u505a\u4e00\u4ef6\u4e8b\u3002\u6bcf\u5f53\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u8fdb\u7a0b\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u6765\u8fd0\u884c\u8be5\u5e94\u7528\u3002 \u4fdd\u6301\u7b80\u6d01\uff0c\u8fc7\u5ea6\u590d\u6742\u7684Dockerfile\u4f1a\u5bfc\u81f4\u81c3\u80bf\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728\u4e0d\u65ad\u4f7f\u7528\u4e2d\u5e26\u6765\u4e00\u4e9b\u6f5c\u5728\u7684\u95ee\u9898\u3002 \u5bf9\u7eed\u884c\u7684\u53c2\u6570\u6309\u7167\u5b57\u6bcd\u8868\u6392\u5e8f\uff0c\u7279\u522b\u662f\u4f7f\u7528 apt-get install -y \u5b89\u88c5\u5305\u7684\u65f6\u5019\u3002 \u4f7f\u7528\u6784\u5efa\u7f13\u5b58\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u7f13\u5b58\uff0c\u53ef\u4ee5\u5728\u6784\u5efa\u7684\u65f6\u5019\u4f7f\u7528\u53c2\u6570 --no-cache=true \u6765\u5f3a\u5236\u91cd\u65b0\u751f\u6210\u4e2d\u95f4\u955c\u50cf\u3002","title":"Dockerfile \u6700\u4f73\u5b9e\u8df5"},{"location":"Docker/17.2.Dockerfile.html#dockerfile_2","text":"\u6784\u5efaNginx\u8fd0\u884c\u73af\u5883 # \u6307\u5b9a\u57fa\u7840\u955c\u50cf FROM sameersbn/ubuntu:14.04.20161014 # \u7ef4\u62a4\u8005\u4fe1\u606f MAINTAINER sameer@damagehead.com # \u8bbe\u7f6e\u73af\u5883 ENV RTMP_VERSION = 1 .1.10 \\ NPS_VERSION = 1 .11.33.4 \\ LIBAV_VERSION = 11 .8 \\ NGINX_VERSION = 1 .10.1 \\ NGINX_USER = www-data \\ NGINX_SITECONF_DIR = /etc/nginx/sites-enabled \\ NGINX_LOG_DIR = /var/log/nginx \\ NGINX_TEMP_DIR = /var/lib/nginx \\ NGINX_SETUP_DIR = /var/cache/nginx # \u8bbe\u7f6e\u6784\u5efa\u65f6\u53d8\u91cf\uff0c\u955c\u50cf\u5efa\u7acb\u5b8c\u6210\u540e\u5c31\u5931\u6548 ARG BUILD_LIBAV = false ARG WITH_DEBUG = false ARG WITH_PAGESPEED = true ARG WITH_RTMP = true # \u590d\u5236\u672c\u5730\u6587\u4ef6\u5230\u5bb9\u5668\u76ee\u5f55\u4e2d COPY setup/ ${ NGINX_SETUP_DIR } / RUN bash ${ NGINX_SETUP_DIR } /install.sh # \u590d\u5236\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u5230\u5bb9\u5668\u76ee\u5f55\u4e2d COPY nginx.conf /etc/nginx/nginx.conf COPY entrypoint.sh /sbin/entrypoint.sh # \u8fd0\u884c\u6307\u4ee4 RUN chmod 755 /sbin/entrypoint.sh # \u5141\u8bb8\u6307\u5b9a\u7684\u7aef\u53e3 EXPOSE 80/tcp 443/tcp 1935/tcp # \u6307\u5b9a\u7f51\u7ad9\u76ee\u5f55\u6302\u8f7d\u70b9 VOLUME [ \"${NGINX_SITECONF_DIR}\" ] ENTRYPOINT [ \"/sbin/entrypoint.sh\" ] CMD [ \"/usr/sbin/nginx\" ]","title":"Dockerfile \u793a\u4f8b"},{"location":"Docker/17.3.Image.html","text":"\u5b8c\u6574\u7684\u955c\u50cf\u8868\u793a\u5206\u4e09\u90e8\u5206\uff0c\u7528 / \u5206\u9694\uff1a hub/namespace/name:tag hub\uff1aDocker Hub\u5730\u5740 namespace\uff1a\u547d\u540d\u7a7a\u95f4\uff0c\u8868\u793a\u4e00\u4e2a\u7528\u6237\u6216\u7ec4\u7ec7\u4e0b\u7684\u6240\u6709\u955c\u50cf name\uff1a\u955c\u50cf\u540d\u79f0 tag\uff1a\u955c\u50cf\u6807\u7b7e \u5982\u679c\u4eceDocker\u5b98\u65b9\u4ed3\u5e93\u62c9\u53d6\u955c\u50cf\uff0c\u53ef\u4ee5\u7701\u7565 hub/namespace \u3002 \u83b7\u53d6\u955c\u50cf \u4f7f\u7528 docker pull \u547d\u4ee4\u4e0b\u8f7d\u955c\u50cf\u3002\u5982\u679c\u4e0d\u6307\u5b9a tag \uff0c\u9ed8\u8ba4\u9009\u62e9latest\u6807\u7b7e\u3002 docker pull python:3.7-slim docker image pull python:3.7-slim pull \u547d\u4ee4\u5b8c\u6574\u7528\u6cd5\u5982\u4e0b\uff1a Usage: docker pull [ OPTIONS ] NAME [ :TAG | @DIGEST ] Pull an image or a repository from a registry Options: -a, --all-tags Download all tagged images in the repository --disable-content-trust Skip image verification ( default true ) --platform string Set platform if server is multi-platform capable -q, --quiet Suppress verbose output \u67e5\u770b\u672c\u5730\u955c\u50cf docker images docker image ls # \u5217\u51fa\u5168\u90e8\u955c\u50cf\uff0c\u5305\u62ec\u9690\u85cf\u7684\u955c\u50cf docker images -a docker image ls -a \u7ed9\u955c\u50cf\u6253\u6807\u7b7e \u4f7f\u7528 docker tag \u547d\u4ee4\u6765\u7ed9\u672c\u5730\u955c\u50cf\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e\u3002 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] \u4e5f\u53ef\u4ee5\u7528image ID\u4ee3\u66ffsource image name\u3002 \u641c\u7d22Hub\u955c\u50cf \u4f7f\u7528 docker search \u547d\u4ee4\u6765\u641c\u7d22Hub\u7684\u955c\u50cf\u3002 docker search python \u521b\u5efa\u955c\u50cf \u521b\u5efa\u955c\u50cf\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a \u5c06\u5df2\u6709\u7684container\u4fdd\u5b58\u4e3aimage \u57fa\u4e8e Dockerfile \u521b\u5efa \u57fa\u4e8e\u672c\u5730\u6a21\u677f\u5bfc\u5165 # \u5c06\u5df2\u6709\u7684container\u4fdd\u5b58\u4e3aimage docker commit -a 'Author' -m 'Commit message' container_ID image_name:tag # \u57fa\u4e8e\u672c\u5730\u6a21\u677f\u5bfc\u5165 docker import # docker image build -t image_name:tag . \u5220\u9664\u955c\u50cf \u4f7f\u7528 docker rmi \u547d\u4ee4\u6765\u5220\u9664\u955c\u50cf\uff0c\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a\u4e00\u79cd\u662f\u901a\u8fc7\u955c\u50cf\u540d\u548c\u6807\u7b7e\u6765\u5220\u9664\uff1b\u4e00\u79cd\u662f\u901a\u8fc7\u955c\u50cf ID \u6765\u5220\u9664\u3002\u5e73\u65f6\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u5927\u90e8\u5206\u90fd\u662f\u901a\u8fc7\u955c\u50cf ID \u6765\u5220\u9664\u3002 docker rmi image_name:tag docker rmi image_id docker image rmi # \u5f3a\u5236\u5220\u9664 docker --force rmi \u6e05\u7406\u955c\u50cf # \u5220\u9664\u6ca1\u6709\u4f7f\u7528\u7684\u955c\u50cf docker image prune \u5bfc\u51fa\u955c\u50cf docker save -o python.tar python:3.7-slim docker image save \u5bfc\u5165\u955c\u50cf docker load -i python.tar docker load < python.tar docker image load \u4e0a\u4f20\u955c\u50cf # \u9ed8\u8ba4\u4e0a\u4f20\u81f3Docker Hub\u5b98\u65b9\u4ed3\u5e93 docker push image_name:tag docker image push image:tag # \u4e0a\u4f20\u81f3\u6307\u5b9a\u7684hub\u4ed3\u5e93 ## \u9700\u8981\u5148\u5c06 hub/image_name:tag \u4f5c\u4e3a\u955c\u50cf\u7684\u6807\u7b7e ## \u800c\u4e14\u8fd8\u8981\u4f7f\u7528docker login\u547d\u4ee4\u767b\u5f55 hub docker push hub/image_name:tag \u67e5\u770b\u955c\u50cf\u7684\u8be6\u7ec6\u4fe1\u606f docker history docker inspect docker image history docker image inspect","title":"17.3.Image"},{"location":"Docker/17.3.Image.html#_1","text":"\u4f7f\u7528 docker pull \u547d\u4ee4\u4e0b\u8f7d\u955c\u50cf\u3002\u5982\u679c\u4e0d\u6307\u5b9a tag \uff0c\u9ed8\u8ba4\u9009\u62e9latest\u6807\u7b7e\u3002 docker pull python:3.7-slim docker image pull python:3.7-slim pull \u547d\u4ee4\u5b8c\u6574\u7528\u6cd5\u5982\u4e0b\uff1a Usage: docker pull [ OPTIONS ] NAME [ :TAG | @DIGEST ] Pull an image or a repository from a registry Options: -a, --all-tags Download all tagged images in the repository --disable-content-trust Skip image verification ( default true ) --platform string Set platform if server is multi-platform capable -q, --quiet Suppress verbose output","title":"\u83b7\u53d6\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_2","text":"docker images docker image ls # \u5217\u51fa\u5168\u90e8\u955c\u50cf\uff0c\u5305\u62ec\u9690\u85cf\u7684\u955c\u50cf docker images -a docker image ls -a","title":"\u67e5\u770b\u672c\u5730\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_3","text":"\u4f7f\u7528 docker tag \u547d\u4ee4\u6765\u7ed9\u672c\u5730\u955c\u50cf\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e\u3002 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] \u4e5f\u53ef\u4ee5\u7528image ID\u4ee3\u66ffsource image name\u3002","title":"\u7ed9\u955c\u50cf\u6253\u6807\u7b7e"},{"location":"Docker/17.3.Image.html#hub","text":"\u4f7f\u7528 docker search \u547d\u4ee4\u6765\u641c\u7d22Hub\u7684\u955c\u50cf\u3002 docker search python","title":"\u641c\u7d22Hub\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_4","text":"\u521b\u5efa\u955c\u50cf\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a \u5c06\u5df2\u6709\u7684container\u4fdd\u5b58\u4e3aimage \u57fa\u4e8e Dockerfile \u521b\u5efa \u57fa\u4e8e\u672c\u5730\u6a21\u677f\u5bfc\u5165 # \u5c06\u5df2\u6709\u7684container\u4fdd\u5b58\u4e3aimage docker commit -a 'Author' -m 'Commit message' container_ID image_name:tag # \u57fa\u4e8e\u672c\u5730\u6a21\u677f\u5bfc\u5165 docker import # docker image build -t image_name:tag .","title":"\u521b\u5efa\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_5","text":"\u4f7f\u7528 docker rmi \u547d\u4ee4\u6765\u5220\u9664\u955c\u50cf\uff0c\u5206\u4e24\u79cd\u65b9\u5f0f\uff1a\u4e00\u79cd\u662f\u901a\u8fc7\u955c\u50cf\u540d\u548c\u6807\u7b7e\u6765\u5220\u9664\uff1b\u4e00\u79cd\u662f\u901a\u8fc7\u955c\u50cf ID \u6765\u5220\u9664\u3002\u5e73\u65f6\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u5927\u90e8\u5206\u90fd\u662f\u901a\u8fc7\u955c\u50cf ID \u6765\u5220\u9664\u3002 docker rmi image_name:tag docker rmi image_id docker image rmi # \u5f3a\u5236\u5220\u9664 docker --force rmi","title":"\u5220\u9664\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_6","text":"# \u5220\u9664\u6ca1\u6709\u4f7f\u7528\u7684\u955c\u50cf docker image prune","title":"\u6e05\u7406\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_7","text":"docker save -o python.tar python:3.7-slim docker image save","title":"\u5bfc\u51fa\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_8","text":"docker load -i python.tar docker load < python.tar docker image load","title":"\u5bfc\u5165\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_9","text":"# \u9ed8\u8ba4\u4e0a\u4f20\u81f3Docker Hub\u5b98\u65b9\u4ed3\u5e93 docker push image_name:tag docker image push image:tag # \u4e0a\u4f20\u81f3\u6307\u5b9a\u7684hub\u4ed3\u5e93 ## \u9700\u8981\u5148\u5c06 hub/image_name:tag \u4f5c\u4e3a\u955c\u50cf\u7684\u6807\u7b7e ## \u800c\u4e14\u8fd8\u8981\u4f7f\u7528docker login\u547d\u4ee4\u767b\u5f55 hub docker push hub/image_name:tag","title":"\u4e0a\u4f20\u955c\u50cf"},{"location":"Docker/17.3.Image.html#_10","text":"docker history docker inspect docker image history docker image inspect","title":"\u67e5\u770b\u955c\u50cf\u7684\u8be6\u7ec6\u4fe1\u606f"},{"location":"Linux/18.1.%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83.html","text":"\u76ee\u5f55 \u63cf\u8ff0 / \u6839\u76ee\u5f55\u3002 /bin \u5b58\u653e\u7cfb\u7edf\u547d\u4ee4\u7684\u76ee\u5f55\u3002\u666e\u901a\u7528\u6237\u548c\u8d85\u7ea7\u7528\u6237\u90fd\u53ef\u4ee5\u6267\u884c\uff0c\u5355\u7528\u6237\u6a21\u5f0f\u4e0b\u4e5f\u53ef\u4ee5\u6267\u884c\u3002 /sbin \u5b58\u653e\u7528\u4e8e\u7cfb\u7edf\u7ba1\u7406\u7684\u7a0b\u5e8f\uff0c\u53ea\u6709\u8d85\u7ea7\u7528\u6237\u53ef\u4ee5\u6267\u884c\uff0c\u4f46\u6709\u4e9b\u547d\u4ee4\u5141\u8bb8\u666e\u901a\u7528\u6237\u67e5\u770b\u3002 /usr/bin \u5b58\u653e\u7cfb\u7edf\u547d\u4ee4\u7684\u76ee\u5f55\uff0c\u8fd9\u4e9b\u547d\u4ee4\u548c\u7cfb\u7edf\u542f\u52a8\u65e0\u5173\u3002\u666e\u901a\u7528\u6237\u548c\u8d85\u7ea7\u7528\u6237\u90fd\u53ef\u4ee5\u6267\u884c\uff0c\u5355\u7528\u6237\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u6267\u884c\u3002 /usr/sbin \u5b58\u653e\u975e\u5fc5\u9700\u7684\u7cfb\u7edf\u7ba1\u7406\u547d\u4ee4\uff0c\u53ea\u6709\u8d85\u7ea7\u7528\u6237\u53ef\u4ee5\u6267\u884c\u3002 /dev \u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5b58\u653e\u7684\u76ee\u5f55\u3002 /etc \u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55\uff0c\u8be5\u76ee\u5f55\u5305\u542b\u914d\u7f6e\u6587\u4ef6\u3001\u6709\u6548\u7528\u6237\u5217\u8868\u3001\u7528\u6237\u7684\u7fa4\u7ec4\u3001\u4ee5\u592a\u7f51\u3001\u4e3b\u673a\u7b49\u914d\u7f6e\u3002 /lib \u4fdd\u5b58\u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u5e93\u3002 /boot \u4fdd\u5b58\u4e0e\u7cfb\u7edf\u542f\u52a8\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u5982\u5f15\u5bfc\u7a0b\u5e8f\u3001\u5185\u6838\u7b49\u3002 /home \u666e\u901a\u7528\u6237\u7684\u5bb6\u76ee\u5f55\u3002 /root \u8d85\u7ea7\u7528\u6237\u7684\u5bb6\u76ee\u5f55\u3002 /mnt \u7528\u4e8e\u6302\u8f7d\u5176\u4ed6\u4e34\u65f6\u6587\u4ef6\u7cfb\u7edf\u3002\u65e9\u671fLinux\u53ea\u6709\u8fd9\u4e2a\u6302\u8f7d\u76ee\u5f55\uff0c\u6ca1\u6709\u7ec6\u5206\uff0c\u73b0\u5728\u8fd9\u4e2a\u6302\u8f7d\u76ee\u5f55\u5efa\u8bae\u6302\u8f7d\u989d\u5916\u8bbe\u5907\uff0c\u5982U\u76d8\u3001\u79fb\u52a8\u786c\u76d8\u3001\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u7684\u5206\u533a\u3002 /media \u6302\u8f7d\u76ee\u5f55\u3002\u5efa\u8bae\u6302\u8f7d\u5a92\u4f53\u8bbe\u5907\uff0c\u4f8b\u5982\u8f6f\u76d8\u548c\u5149\u76d8\u3002 /misc \u6302\u8f7d\u76ee\u5f55\u3002\u5efa\u8bae\u7528\u6765\u6302\u8f7d NFS \u670d\u52a1\u7684\u5171\u4eab\u76ee\u5f55\u3002 /opt \u7b2c\u4e09\u65b9\u8f6f\u4ef6\u7684\u4fdd\u5b58\u4f4d\u7f6e\u3002 /proc \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u8be5\u76ee\u5f55\u7684\u6570\u636e\u5e76\u4e0d\u4fdd\u5b58\u5728\u786c\u76d8\u4e2d\uff0c\u800c\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u3002\u4e3b\u8981\u4fdd\u5b58\u7cfb\u7edf\u7684\u5185\u6838\u3001\u8fdb\u7a0b\u3001\u5916\u90e8\u8bbe\u5907\u7684\u72b6\u6001\u3001\u7f51\u7edc\u72b6\u6001\u7b49\u7b49 /sys \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u8be5\u76ee\u5f55\u7684\u6570\u636e\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u4e3b\u8981\u4fdd\u5b58\u4e0e\u5185\u6838\u76f8\u5173\u7684\u4fe1\u606f /tmp \u4e34\u65f6\u76ee\u5f55\u3002\u4fdd\u5b58\u7f13\u5b58\u6587\u4ef6\u7b49\u3002 /usr \u4fdd\u5b58\u64cd\u4f5c\u7cfb\u7edf\u8f6f\u4ef6\u8d44\u6e90\u7684\u76ee\u5f55\uff0cusr \u662f Unix Software Resource \u7684\u7f29\u5199\u3002\u53ef\u4ee5\u88ab\u591a\u4e2a\u7528\u6237\u4f7f\u7528\u3002\u7cfb\u7edf\u81ea\u5e26\u7684\u8f6f\u4ef6\u5927\u591a\u6570\u4fdd\u5b58\u5728\u8fd9\u91cc\uff0c\u8fd8\u6709\u5171\u4eab\u6587\u4ef6\u3001\u5e93\u6587\u4ef6\u7b49\u7b49\u3002 /var \u4fdd\u5b58\u5185\u5bb9\u7ecf\u5e38\u53d8\u5316\u7684\u6587\u4ef6\uff0c\u5982\u7f13\u5b58\u3001\u65e5\u5fd7\u3001\u8f6f\u4ef6\u8fd0\u884c\u6240\u4ea7\u751f\u7684\u6587\u4ef6\u7b49\u3002 /lost+found \u5b58\u653e\u56e0\u7cfb\u7edf\u610f\u5916\u5d29\u6e83\u6216\u673a\u5668\u610f\u5916\u5173\u673a\u800c\u4ea7\u751f\u7684\u6587\u4ef6\u788e\u7247\u3002\u7cfb\u7edf\u542f\u52a8\u65f6\uff0cfsck \u5de5\u5177\u4f1a\u68c0\u67e5\u8fd9\u91cc\uff0c\u5e76\u4fee\u590d\u5df2\u7ecf\u635f\u574f\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u8fd9\u4e2a\u76ee\u5f55\u5728\u6bcf\u4e2a\u5206\u533a\u51fa\u73b0\uff0c\u4f8b\u5982 /1ost+ found \u662f\u6839\u5206\u533a\u7684\u5907\u4efd\u6062\u590d\u76ee\u5f55\uff0c/boot/lost+ found \u662f boot \u5206\u533a\u7684\u5907\u4efd\u6062\u590d\u76ee\u5f55\u3002 /kernel \u5b58\u653e\u7cfb\u7edf\u7684\u5185\u6838\u6587\u4ef6\u3002","title":"18.1.\u76ee\u5f55\u89c4\u8303"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","text":"\u7cfb\u7edf\u7ba1\u7406 shutdown - \u5173\u673a\u3001\u91cd\u542f shutdown - \u5173\u95ed\u6216\u91cd\u542f\u3002 shutdown [ OPTIONS... ] [ TIME ] [ WALL... ] Shut down the system. -H --halt \u505c\u673a -P --poweroff \u5173\u673a -r --reboot \u91cd\u542f -h \u7b49\u6548\u4e8e--poweroff, \u4f1a\u88ab--halt\u8986\u76d6 -k \u4e0d\u505c\u673a/\u5173\u673a/\u91cd\u542f, \u53ea\u53d1\u9001\u8b66\u544a --no-wall \u5728\u505c\u6b62/\u5173\u673a/\u91cd\u65b0\u542f\u52a8\u4e4b\u524d\u4e0d\u53d1\u9001\u8b66\u544a\u6d88\u606f -c \u53d6\u6d88\u5173\u673a\u4efb\u52a1 shutdown [options] when [message] shutdown -h now shutdown -h 21:30 shutdown -h +10 shutdown -h +10 \"will reboot\" shutdown -r shutdown -c \u547d\u4ee4\u5e2e\u52a9 man - \u67e5\u770b\u5728\u7ebf\u5e2e\u52a9 man - manual - \u67e5\u770b\u547d\u4ee4\u7684\u5728\u7ebf\u5e2e\u52a9\u3002 man wc whatis - \u547d\u4ee4\u7b80\u8ff0 whatis - \u67e5\u8be2\u4e00\u4e2a\u547d\u4ee4\u7684\u7b80\u77ed\u63cf\u8ff0\uff08\u5355\u884c\u63cf\u8ff0\uff09\u3002 whatis \u547d\u4ee4\u5728\u7528 catman -w \u547d\u4ee4\u521b\u5efa\u7684\u6570\u636e\u5e93\u4e2d\u67e5\u627e command \u53c2\u6570\u6307\u5b9a\u7684\u547d\u4ee4\u3001\u7cfb\u7edf\u8c03\u7528\u3001\u5e93\u51fd\u6570\u6216\u7279\u6b8a\u6587\u4ef6\u540d\u3002whatis\u547d\u4ee4\u663e\u793a\u624b\u518c\u90e8\u5206\u7684\u9875\u7709\u884c\u3002whatis\u547d\u4ee4\u7b49\u540c\u4e8e\u4f7f\u7528 man -f \u547d\u4ee4\u3002 whatis wc apropos - \u67e5\u627e\u547d\u4ee4 apropos - \u5728whatis\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5b57\u7b26\u4e32\u3002 \u4f7f\u7528man -k\u547d\u4ee4\uff0c\u53ef\u4ee5\u5f97\u5230\u548capropos\u547d\u4ee4\u76f8\u540c\u7684\u7ed3\u679c\uff08\u5b9e\u9645\u4e0a\u662f\u76f8\u540c\u7684\u547d\u4ee4\uff09\u3002 -r, -- regex # \u5c06\u6bcf\u4e2akeyword\u4f5c\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u89e3\u91ca, \u9ed8\u8ba4\u884c\u4e3a -w, --wildcard # \u5c06\u6bcf\u4e2akeyword\u4f5c\u4e3ashell\u6837\u5f0f\u7684\u901a\u914d\u7b26\u89e3\u91ca -e, --exact # \u7cbe\u786e\u5339\u914d -a, --and # \u6240\u6709keyword\u662f\u201c\u5e76\u201d\u7684\u5173\u7cfb -s section, # \u53ea\u67e5\u627e\u6307\u5b9a\u7684\u624b\u518csection --section section apropos pip \u6587\u4ef6\u7ba1\u7406 ls - \u5217\u51fa\u6587\u4ef6 ls - list - \u5217\u51fa\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u3002 \u5176\u4ed6\u53c2\u6570 -F, --classify # \u6bcf\u4e2a\u6761\u76ee\u540e\u9762\u9644\u52a0\u4e00\u4e2a\u6307\u793a\u7b26\uff0c\u7528\u6765\u8bf4\u660e\u6587\u4ef6\u7684\u7c7b\u578b\u3002 # \u5168\u90e8\u6307\u793a\u7b26\u6709 */=>@| # /\u76ee\u5f55\uff0c*\u53ef\u6267\u884c\u6587\u4ef6\uff0c@\u7b26\u53f7\u94fe\u63a5\uff0c|FIFO\u6587\u4ef6\uff0c=\u5957\u63a5\u5b57 # \u6ca1\u6709\u6307\u793a\u7b26\u8868\u793a\u666e\u901a\u6587\u4ef6 --file-type # \u540c\u4e0a\uff0c\u4f46\u4e0d\u9644\u52a0 '*' -p, --indicator-style = slash # \u5c06 / \u6307\u793a\u7b26\u9644\u52a0\u5230\u76ee\u5f55 --indicator-style = WORD # \u6307\u793a\u7b26\u98ce\u683c: none (default), slash (-p), # file-type (--file-type), classify (-F) -R, --recursive # \u9012\u5f52\u5217\u51fa -a, --all # \u5217\u51fa\u5168\u90e8\u6587\u4ef6\uff0c\u5305\u62ec\u4ee5'.'\u5f00\u5934\u7684\u9690\u85cf\u6587\u4ef6 -A, --almost-all # \u540c\u4e0a\uff0c\u4f46\u4e0d\u5217\u51fa . \u548c .. -B, --ignore-backups # \u4e0d\u5217\u51fa\u4ee5 ~ \u7ed3\u5c3e\u7684\u9690\u85cf\u6587\u4ef6 -d, --directory # \u5217\u51fa\u76ee\u5f55\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5217\u51fa\u5176\u5185\u5bb9 --hide = PATTERN # \u4e0d\u5217\u51fa\u4e0eshell PATTERN\u5339\u914d\u7684\u9690\u5f0f\u6761\u76ee\uff0c # \u4f1a\u88ab-a\u6216-A\u53c2\u6570\u8986\u76d6 -I, --ignore = PATTERN # \u4e0d\u5217\u51fa\u4e0eshell PATTERN\u5339\u914d\u7684\u9690\u5f0f\u6761\u76ee\uff0c # \u4e0d\u4f1a\u88ab-a\u6216-A\u53c2\u6570\u8986\u76d6 \u683c\u5f0f\u53c2\u6570 # \u6392\u5217\u683c\u5f0f -C, --format = vertical # \u591a\u5217\u7eb5\u5411\u6392\u5217 -x, --format = across, # \u591a\u5217\u6a2a\u5411\u6392\u5217 --format = horizontal -l, --format = long, # \u5355\u5217\u8f93\u51fa\uff0c\u5e76\u663e\u793a\u8be6\u7ec6\u4fe1\u606f --format = verbose -1, --format = single-column # \u5355\u5217\u8f93\u51fa\uff0c\u5982\u679c\u4e0d\u662f\u8f93\u51fa\u5230\u7ec8\u7aef\uff0c\u6b64\u9009\u9879\u5c31\u662f\u9ed8\u8ba4\u9009\u9879 -m, --format = commas # \u6c34\u5e73\u8f93\u51fa\uff0c\u4ee5\u9017\u53f7\u5206\u5272 -o # \u957f\u683c\u5f0f\u5355\u5217\u8f93\u51fa\uff0c\u7b49\u4ef7\u4e8e\"--format-long --no-group\" -w, --width = COLS # \u5c06\u8f93\u51fa\u5bbd\u5ea6\u8bbe\u7f6e\u4e3aCOLS\u4e2a\u5b57\u7b26\uff0c0\u8868\u793a\u6ca1\u6709\u9650\u5236 # \u5b57\u9762\u503c\u683c\u5f0f -b, --escape # \u4f7f\u7528C\u98ce\u683c\u7684\u8f6c\u4e49\u5e8f\u5217\u8868\u793a\u975e\u53ef\u6253\u5370\u5b57\u7b26 -Q, --quote-name # \u6761\u76ee\u540d\u79f0\u4f7f\u7528\u53cc\u5f15\u53f7 --quoting-style = WORD # \u4f7f\u7528WORD\u5c06\u6761\u76ee\u540d\u5b57\u62ec\u8d77\u6765 # WORD \u7684\u6709\u6548\u503c\u4e3a: # literal,locale,shell,shell-always, # shell-escape, shell-escape-always, c, escape -q, --hide-control-chars # \u4e0d\u53ef\u6253\u5370\u5b57\u7b26\u7528\u95ee\u53f7\u4ee3\u66ff --show-control-chars # \u539f\u6837\u663e\u793a\u4e0d\u53ef\u6253\u5370\u5b57\u7b26\uff0c # \u9ed8\u8ba4\u503c\uff0c\u9664\u975e\u7a0b\u5e8f\u4e3a\"ls\"\uff0c\u5e76\u8f93\u51fa\u5230\u7ec8\u7aef -N, --literal # \u6253\u5370\u6587\u4ef6\u7684\u539f\u59cb\u540d\u79f0\uff0c\u4e0d\u7279\u522b\u5904\u7406\u63a7\u5236\u7b26 # \u65f6\u95f4\u683c\u5f0f --full-time # \u7c7b\u4f3c -l --time-style=full-iso --time-style = STYLE # \u548c-l\u4e00\u8d77\u4f7f\u7528\uff0c\u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f # STYLE: full-iso,long-iso,iso,locale,+FORMAT # FORMAT\u7684\u89e3\u91ca\u65b9\u5f0f\u7c7b\u4f3c\u4e8e'date'\uff1b # \u5982\u679cFORMAT\u662f FORMAT1 <newline> FORMAT2\uff0c # \u5219FORMAT1\u9002\u7528\u4e8e\u975e\u6700\u65b0\u6587\u4ef6\uff0cFORMAT2\u9002\u7528\u4e8e\u6700\u65b0\u6587\u4ef6\uff1b # \u5982\u679cSTYLE\u5e26\u6709'posix-'\u524d\u7f00\uff0c # \u5219STYLE\u4ec5\u5728POSIX\u8bed\u8a00\u73af\u5883\u5916\u751f\u6548 \u4fe1\u606f\u53c2\u6570 -i, --inode # \u4e3a\u6bcf\u4e2a\u6761\u76ee\u5217\u51fa inode -s, --size # \u5728\u5f00\u5934\u4ee5\u5757\u4e3a\u5355\u4f4d\u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f --author # \u548c-l\u5171\u7528\uff0c\u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u6240\u6709\u8005 -G, --no-group # \u548c-l\u5171\u7528\uff0c\u4e0d\u6253\u5370\u7ec4\u540d -g # \u7c7b\u4f3c-l\uff0c\u4f46\u4e0d\u6253\u5370\u6240\u6709\u8005 --block-size = SIZE # \u4ee5 SIZE \u4e3a\u5355\u4f4d\u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\uff0c # \u4f8b\u5982'--block-size=M'\uff0c\u5219\u4ee5 1024*1024 bytes \u4e3a\u5355\u4f4d -k, --kilobytes # \u6587\u4ef6\u7684\u5927\u5c0f\u4ee5 1024-byte blocks \u4e3a\u5355\u4f4d -h, --human-readable # \u548c-l\u6216-s\u4e00\u8d77\u4f7f\u7528\uff0c\u6587\u4ef6\u7684\u5927\u5c0f\u4ee5\u53ef\u8bfb\u7684\u65b9\u5f0f\u8f93\u51fa --si # \u7c7b\u4f3c-h\uff0c\u4f46\u4f7f\u75281000\u4f5c\u4e3a\u5e95\u6570\uff0c\u800c\u4e0d\u662f1024 -n, --numeric-uid-gid # \u7c7b\u4f3c-l, \u4f46\u7528\u6570\u5b57\u8868\u793aUID\u548cGID\uff0c\u800c\u4e0d\u662f\u7528\u6237\u540d\u548c\u7ec4\u540d -L, --dereference # \u663e\u793a\u7b26\u53f7\u94fe\u63a5\u5f15\u7528\u7684\u6587\u4ef6\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u94fe\u63a5\u672c\u8eab -Z, --context # \u6253\u5370\u6587\u4ef6\u7684 security context \u6392\u5e8f\u53c2\u6570 -U, --sort = none # \u4e0d\u6392\u5e8f\uff0c\u6309\u5b83\u4eec\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u7684\u987a\u5e8f\u5217\u51fa # \u56e0\u4e3a\u4e0d\u52a0\u6392\u5e8f\uff0c\u76ee\u5f55\u5185\u5bb9\u5f88\u591a\u65f6\uff0c\u80fd\u663e\u8457\u5730\u52a0\u5feb\u901f\u5ea6 -f # \u4e0d\u6392\u5e8f\uff0c\u542f\u7528\"-aU\"\uff0c\u7981\u7528\"-ls --color\" -r, --reverse # \u9006\u5e8f\u6392\u5e8f -t, --sort = time # \u6309 mtime \u6392\u5e8f -c, --time = ctime, --time = status # \u548c-lt\u4e00\u8d77\u4f7f\u7528\uff0c\u6309 ctime \u6392\u5e8f\uff0c\u5e76\u663e\u793a ctime # \u548c-l\u4e00\u8d77\u4f7f\u7528\uff0c\u6309\u6587\u4ef6\u540d\u6392\u5e8f\uff0c\u663e\u793a ctime # \u5355\u72ec\u4f7f\u7528\uff0c\u6309 ctime \u7eb5\u5411\u6392\u5e8f\uff0c\u65f6\u95f4\u6700\u65b0\u7684\u5728\u6700\u524d\u9762 -u # \u548c-lt\u5171\u7528: \u663e\u793a\u5e76\u4ee5access time\u6392\u5e8f # \u548c-l\u5171\u7528: \u663e\u793aaccess time\uff0c\u4ee5\u6587\u4ef6\u540d\u6392\u5e8f # \u5426\u5219\u4ee5access time\u6392\u5e8f\uff0c\u6700\u65b0\u7684\u4f18\u5148 -S, --sort = size # \u6309\u6587\u4ef6\u5927\u5c0f\u6392\u5e8f\uff0c\u5927\u6587\u4ef6\u9760\u524d -X, --sort = extension # \u6309\u6587\u4ef6\u6269\u5c55\u540d\u6392\u5e8f\uff0c\u6ca1\u6709\u6269\u5c55\u540d\u7684\u5148\u5217\u51fa --sort = WORD # \u6309 WORD \u6392\u5e8f: none (-U), size (-S), # time (-t), version (-v), extension (-X) --time = WORD # \u548c-l\u5171\u7528\uff0c\u663e\u793aWORD\u65f6\u95f4\uff0c\u800c\u4e0d\u662fmodification\u65f6\u95f4 # WORD: atime or access or use (-u); # ctime or status (-c); # \u5f53\u4e0e --sort=time \u5171\u7528\u65f6\uff0cWORD\u662f\u7528\u4e8e\u6392\u5e8f\u7684\u65f6\u95f4 --group-directories-first # \u5c06\u76ee\u5f55\u6392\u5728\u6587\u4ef6\u524d\u9762 cd - \u8fdb\u5165\u76ee\u5f55 cd - change working directory - \u8fdb\u5165\u6307\u5b9a\u76ee\u5f55\u3002 pwd - \u6253\u5370\u5f53\u524d\u76ee\u5f55 pwd - print working directory - \u6253\u5370\u5f53\u524d\u76ee\u5f55\u7684\u7edd\u5bf9\u8def\u5f84\u3002 mkdir - \u521b\u5efa\u76ee\u5f55 mkdir - make directory - \u521b\u5efa\u76ee\u5f55\uff0c\u82e5\u76ee\u5f55\u5df2\u5b58\u5728\uff0c\u9ed8\u8ba4\u62a5\u9519\u3002 -m, --mode = MODE # \u8bbe\u7f6e\u6587\u4ef6\u6743\u9650\uff08\u7c7b\u4f3cchmod\uff09\uff0c\u4e0d\u4f1a\u51cf\u53bbumask -p, --parents # \u5982\u679c\u76ee\u5f55\u5df2\u5b58\u5728\u4e0d\u4f1a\u62a5\u9519\uff1b\u6839\u636e\u9700\u8981\u521b\u5efa\u7236\u76ee\u5f55 -v, --verbose # \u4e3a\u521b\u5efa\u7684\u6bcf\u4e2a\u76ee\u5f55\u663e\u793a\u4e00\u6761\u6d88\u606f rm - \u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55 rm - remove - \u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55\u3002 -f, --force # \u5ffd\u7565\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u548c\u53c2\u6570\uff0c\u4ece\u4e0d\u63d0\u793a -i # \u5728\u6bcf\u6b21\u5220\u9664\u4e4b\u524d\u63d0\u793a\uff0c\u9ed8\u8ba4\u884c\u4e3a -1 # \u5728\u5220\u9664\u4e09\u4e2a\u4ee5\u4e0a\u7684\u6587\u4ef6\u4e4b\u524d\u6216\u9012\u5f52\u5220\u9664\u65f6\uff0c\u63d0\u793a1\u6b21 --interactive [= WHEN ] # \u6839\u636eWHEN\u8fdb\u884c\u63d0\u793a: never, once (-I), or always (-i) --one-file-system # \u9012\u5f52\u5220\u9664\u65f6\uff0c\u8df3\u8fc7\u4efb\u4f55\u4e0e\u6307\u5b9a\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\u7684\u76ee\u5f55 --no-preserve-root # \u4e0d\u4fdd\u62a4'/'\u76ee\u5f55 --preserve-root # \u4e0d\u5220\u9664'/' (\u9ed8\u8ba4) -r, -R, -recursive # \u9012\u5f52\u5220\u9664\u76ee\u5f55\u53ca\u5176\u5185\u5bb9 -d, --dir # \u5220\u9664\u7a7a\u76ee\u5f55 rmdir - \u5220\u9664\u7a7a\u76ee\u5f55 rmdir - remove directory - \u5220\u9664\u7a7a\u76ee\u5f55\u3002 --ignore-fail-on-non-empty # \u5ffd\u7565\u76ee\u5f55\u975e\u7a7a\u5bfc\u81f4\u7684\u5931\u8d25 -p, --parents # \u5220\u9664\u76ee\u5f55\u53ca\u5176\u7236\u76ee\u5f55 mv - \u91cd\u547d\u540d / \u79fb\u52a8\u6587\u4ef6\u6216\u76ee\u5f55 mv - \u79fb\u52a8\u6587\u4ef6\u6216\u76ee\u5f55\uff1b\u91cd\u547d\u540d\u3002 --backup [= CONTROL ] # \u5907\u4efd\u6bcf\u4e2a\u73b0\u6709\u76ee\u6807\u6587\u4ef6 -b # \u7c7b\u4f3c--backup\uff0c\u4f46\u4e0d\u63a5\u53d7\u53c2\u6570 -f, --force # \u8986\u76d6\u524d\u4e0d\u63d0\u793a -i, --interactive # \u8986\u76d6\u524d\u63d0\u793a -n, --no-clobber # \u4e0d\u8986\u76d6\u73b0\u6709\u6587\u4ef6 --strip-trailing-slashes # \u4ece\u6bcf\u4e2aSOURCE\u53c2\u6570\u4e2d\u5220\u9664\u6240\u6709\u5c3e\u968f\u659c\u6760 -S, --suffix = SUFFIX # \u8986\u76d6\u901a\u5e38\u7684\u5907\u4efd\u540e\u7f00 -t, --target-directory = DIRECTORY # \u5c06\u6240\u6709\u7684SOURCE\u79fb\u81f3DIRECTORY -T, --no-target-directory # \u5c06DEST\u89c6\u4e3a\u666e\u901a\u6587\u4ef6 -u, --update # \u4ec5\u5728SOURCE\u6bd4DEST\u66f4\u65b0\u65f6\uff0c\u6216DEST\u4e0d\u5b58\u5728\u65f6\u79fb\u52a8 cp - \u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\u3002 cp\uff1a\u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\u3002 -a, --archive # \u7b49\u6548\u4e8e-dR --preserve=all --attributes-only # \u4e0d\u590d\u5236\u6587\u4ef6\u6570\u636e\uff0c\u4ec5\u590d\u5236\u5c5e\u6027 --backup [= CONTROL ] # \u5bf9\u6bcf\u4e2a\u5b58\u5728\u7684\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u5907\u4efd -b # \u7c7b\u4f3c--backup\uff0c\u4f46\u4e0d\u63a5\u53d7\u53c2\u6570 --copy-contents # copy contents of special files when recursive -d # \u7b49\u6548\u4e8e--no-dereference --preserve=links -f, --force # \u5982\u679c\u5df2\u5b58\u5728\u7684\u76ee\u6807\u6587\u4ef6\u4e0d\u80fd\u6253\u5f00\uff0c\u5220\u9664\u5b83\u5e76\u91cd\u8bd5 # \u5f53-n\u9009\u9879\u4e5f\u88ab\u4f7f\u7528\u65f6\uff0c\u8be5\u9009\u9879\u5c06\u88ab\u5ffd\u7565 -i, --interactive # \u8986\u76d6\u524d\u63d0\u793a\uff0c\u8be5\u9009\u9879\u4f1a\u88ab-n\u8986\u76d6 -H # follow command-line symbolic links in SOURCE -l, --link # \u521b\u5efa\u786c\u94fe\u63a5\uff0c\u800c\u4e0d\u662f\u590d\u5236 -L, --dereference # always follow symbolic links in SOURCE -n, --no-clobber # \u4e0d\u8981\u8986\u76d6\u5df2\u6709\u7684\u6587\u4ef6 -P, --no-dereference # never follow symbolic links in SOURCE -p # \u7b49\u6548\u4e8e--preserve=mode,ownership,timestamps --preserve [= ATTR_LIST ] # \u5c3d\u53ef\u80fd\u4fdd\u7559\u6307\u5b9a\u7684\u5c5e\u6027(default:mode,ownership,timestamps) # additional attributes: context, links, xattr,all --no-preserve = ATTR_LIST # \u4e0d\u4fdd\u7559\u6307\u5b9a\u7684\u5c5e\u6027 --parents # \u5728\u76ee\u6807\u76ee\u5f55\u4e0b\u4f7f\u7528\u5b8c\u6574\u7684\u6e90\u6587\u4ef6\u540d -R, -r, --recursive # \u9012\u5f52\u590d\u5236\u76ee\u5f55 --reflink [= WHEN ] # control clone/CoW copies. See below --remove-destination # \u590d\u5236\u524d\uff0c\u76f4\u63a5\u79fb\u9664\u5df2\u5b58\u5728\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u548c--force\u51b2\u7a81 --sparse = WHEN # control creation of sparse files. See below --strip-trailing-slashes # \u79fb\u9664\u6e90\u6587\u4ef6\u7684\u5c3e\u968f\u659c\u6760 -s, --symbolic-link # \u521b\u5efa\u7b26\u53f7\u94fe\u63a5\uff0c\u800c\u4e0d\u662f\u590d\u5236 -S, --suffix = SUFFIX # override the usual backup suffix -t, --target-directory = DIRECTORY # \u590d\u5236\u6240\u6709\u6307\u5b9a\u7684SOURCE\u5230DIRECTORY -T, --no-target-directory # \u5c06DEST\u89c6\u4e3a\u666e\u901a\u6587\u4ef6 -u, --update # \u53ea\u6709SOURCE\u6587\u4ef6\u6bd4\u76ee\u6807\u6587\u4ef6\u66f4\u65b0\uff0c\u6216\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u624d\u590d\u5236 gzip - \u538b\u7f29\u6587\u4ef6 zcat - \u8bfb\u53d6gzip\u6587\u4ef6 zcat\uff1a\u8bfb\u53d6gzip\u6587\u4ef6\uff0c\u800c\u65e0\u9700\u5148\u89e3\u538b\u7f29\u5b83\u4eec\u3002 \u6587\u4ef6\u7f16\u8f91 head - \u67e5\u770b\u6587\u4ef6\u5934\u90e8 -c, --bytes =[ - ] NUM # \u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u524dNUM\u4e2a\u5b57\u8282 # \u4ee5'-'\u5f00\u5934, \u6253\u5370\u6240\u6709\u5185\u5bb9\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2aNUM bytes -n, --lines =[ - ] NUM # \u6253\u5370\u524dNUM\u884c\uff0c\u9ed8\u8ba4\u4e3a\u524d10\u884c # \u4ee5'-'\u5f00\u5934, \u6253\u5370\u6240\u6709\u5185\u5bb9\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2aNUM lines -q, --quiet, --silent # \u4e0d\u6253\u5370\u6807\u9898 -v, --verbose # \u603b\u662f\u6253\u5370\u6807\u9898 -z, --zero-terminated # \u884c\u7ec8\u6b62\u7b26\u4e3aNUL\uff0c\u800c\u4e0d\u662f\u6362\u884c\u7b26 tail - \u67e5\u770b\u6587\u4ef6\u5c3e\u90e8 -c, --bytes =[ + ] NUM # \u8f93\u51fa\u6700\u540eNUM\u4e2a\u5b57\u8282\uff1b # \u6216\u4f7f\u7528-c +NUM\u8f93\u51fa\u4eceNUM\u5b57\u8282\u5f00\u59cb\u7684\u5185\u5bb9 -f, # \u663e\u793a\u6587\u4ef6\u65b0\u8ffd\u52a0\u7684\u5185\u5bb9\uff0c\u67e5\u770b\u65e5\u5fd7\u6587\u4ef6\u6bd4\u8f83\u6709\u7528 --follow [={ name | descriptor }] -F # \u4e0e--follow=name --retry\u76f8\u540c -n, --lines =[ + ] NUM # \u8f93\u51fa\u6700\u540eNUM\u884c\uff0c\u9ed8\u8ba4\u4e3a\u6700\u540e10\u884c\uff1b # \u6216\u4f7f\u7528-n +NUM\u4eceNUM\u884c\u5f00\u59cb\u8f93\u51fa --max-unchanged-stats = N # \u548c--follow=name\u5171\u7528 # \u91cd\u65b0\u6253\u5f00\u5728N\u6b21\uff08\u9ed8\u8ba45\u6b21\uff09\u8fed\u4ee3\u540e\u672a\u66f4\u6539\u5927\u5c0f\u7684FILE\uff0c # \u4ee5\u67e5\u770b\u5176\u662f\u5426\u5df2\u53d6\u6d88\u94fe\u63a5\u6216\u91cd\u547d\u540d #\uff08\u8fd9\u662f\u5faa\u73af\u65e5\u5fd7\u6587\u4ef6\u7684\u5e38\u89c1\u60c5\u51b5\uff09\uff1b # \u4f7f\u7528inotify\u65f6\uff0c\u6b64\u9009\u9879\u5f88\u5c11\u6709\u7528 --pid = PID # \u548c-f\u5171\u7528\uff0c\u5728\u8fdb\u7a0bPID\u7ec8\u6b62\u4e4b\u540e\uff0c\u505c\u6b62\u6253\u5370 --retry # \u5982\u679c\u65e0\u6cd5\u8bbf\u95ee\u6587\u4ef6\uff0c\u4e0d\u65ad\u5c1d\u8bd5 -s, --sleep-interval = N # \u548c-f\u5171\u7528\uff0c\u7761\u7720\u5927\u7ea6N\u79d2\uff0c\u9ed8\u8ba4\u503c\u4e3a1.0\uff1b # \u548cinotify\u6216--pid=P\u5171\u7528\uff0c\u6bcfN\u79d2\u68c0\u67e5\u8fdb\u7a0bPID\u81f3\u5c11\u4e00\u6b21 -z, --zero-terminated # \u884c\u5b9a\u754c\u7b26\u4e3aNUL\uff0c\u800c\u4e0d\u662f\u6362\u884c\u7b26 cat - \u663e\u793a\u6587\u4ef6\u5185\u5bb9 cat\uff1a\u5728\u7ec8\u7aef\u663e\u793a\u6587\u4ef6\u5185\u5bb9\u3001\u5c06\u8f93\u5165\u7ec8\u7aef\u7684\u6587\u672c\u4fdd\u5b58\u8fdb\u6587\u4ef6\u3001\u5c06\u591a\u4e2a\u6587\u672c\u6587\u4ef6\u4fdd\u5b58\u5230\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u3002 > \uff1a\u8868\u793a\u8986\u76d6\u539f\u5185\u5bb9 >> \uff1a\u8868\u793a\u8ffd\u52a0 -A, --show-all # \u7b49\u6548\u4e8e-vET -b, --number-nonblank # \u7ed9\u975e\u7a7a\u884c\u7f16\u53f7 -e # \u7b49\u6548\u4e8e-vE -E, --show-ends # \u6bcf\u884c\u672b\u5c3e\u663e\u793a$ -n, --number # \u7ed9\u6bcf\u884c\u7f16\u53f7 -s, --squeeze-blank # \u591a\u4e2a\u8fde\u7eed\u7684\u7a7a\u884c\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u884c -t # equivalent to -vT -T, --show-tabs # \u5c06TAB characters\u663e\u793a\u4e3a^I -v, --show-nonprinting # \u4f7f\u7528^\u548cM-\u8868\u793a\u6cd5, LFD\u548cTAB\u9664\u5916 less - \u6d4f\u89c8\u6587\u4ef6\u5185\u5bb9 less\uff1a\u5206\u5c4f\u4e0a\u4e0b\u7ffb\u9875\u6d4f\u89c8\u6587\u4ef6\u5185\u5bb9\u3002\u7528PageUp\u952e\u5411\u4e0a\u7ffb\u9875\uff0c\u7528PageDown\u952e\u5411\u4e0b\u7ffb\u9875\u3002\u6309Q\u952e\u9000\u51faless\u7a0b\u5e8f\u3002 wc - \u7edf\u8ba1\u6587\u4ef6\u5b57\u6570 wc\uff1a\u7edf\u8ba1\u6587\u4ef6\u7684\u5b57\u8282\u6570\u3001\u5b57\u6570\u3001\u884c\u6570\u3002 grep - \u641c\u7d22\u6587\u672c grep\uff1a\u5728\u6587\u4ef6\u4e2d\u641c\u7d22\u6587\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 sort - \u6392\u5e8f\u6587\u672c sort\uff1a\u6392\u5e8f\u6587\u672c\uff08\u6587\u672c\u53ef\u4ee5\u6765\u81ea\u7ec8\u7aef\u8f93\u5165\u3001\u4e5f\u53ef\u4ee5\u6765\u81ea\u6587\u4ef6\uff09\u3002 \u7528\u6237\u7ba1\u7406 who - \u5f53\u524d\u6240\u6709\u767b\u9646\u7528\u6237\u7684\u4fe1\u606f -a, --all # \u7b49\u4ef7\u4e8e\u8c03\u7528 '-b -d --login -p -r -t -T -u' -b, --boot # \u4e0a\u6b21\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u95f4 -d, --dead # \u6253\u5370 dead \u72b6\u6001\u7684\u8fdb\u7a0b -H, --heading # \u6253\u5370\u5217\u6807\u9898\u884c -l, --login # \u6253\u5370\u7cfb\u7edf\u767b\u5f55\u8fdb\u7a0b --lookup # \u5c1d\u8bd5\u901a\u8fc7 DNS \u89c4\u8303\u4e3b\u673a\u540d -m # \u4ec5\u663e\u793a\u548c\u6807\u51c6\u8f93\u5165\u5173\u8054\u7684\u4e3b\u673a\u540d\u548c\u7528\u6237 -p, --process # \u6253\u5370\u7531 init \u751f\u6210\u7684\u6d3b\u52a8\u8fdb\u7a0b -q, --count # \u5217\u51fa\u6240\u6709\u5df2\u767b\u5f55\u7528\u6237\u7684\u540d\u79f0\u548c\u6570\u91cf -r, --runlevel # \u6253\u5370\u5f53\u524d\u8fd0\u884c\u7ea7\u522b -s, --short # \u4ec5\u6253\u5370\u540d\u79f0\u3001\u884c\u548c\u65f6\u95f4\uff08\u9ed8\u8ba4\uff09 -t, --time # \u6253\u5370\u4e0a\u6b21\u7cfb\u7edf\u65f6\u949f\u66f4\u6539 -u, --users # \u5217\u51fa\u767b\u5f55\u7684\u7528\u6237 -T, -w, --mesg, --message, --writable # \u5c06\"+\u3001-\u3001?\"\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7528\u6237\u7684\u6d88\u606f\u72b6\u6001\u6dfb\u52a0\u5230\u7528\u6237\u540d\u79f0\u540e\u9762 # '+' \u5141\u8bb8\u5199\u5165\u4fe1\u606f # '-' \u7981\u6b62\u5199\u5165\u4fe1\u606f # '?' \u4e0d\u80fd\u67e5\u627e\u5230\u7ec8\u7aef\u8bbe\u5907 whoami - \u6253\u5370\u4e0e\u5f53\u524d\u6709\u6548\u7528\u6237ID\u5173\u8054\u7684\u7528\u6237\u540d\u3002 chmod - \u66f4\u6539\u6743\u9650 change the permissions mode of a file. \u901a\u8fc7\u7b26\u53f7\u7ec4\u5408\u7684\u65b9\u5f0f\u66f4\u6539\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650\u3002 \u901a\u8fc7\u516b\u8fdb\u5236\u6570\u7684\u65b9\u5f0f\u66f4\u6539\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650\u3002 \u901a\u8fc7\u53c2\u8003\u6587\u4ef6\u7684\u6743\u9650\u6765\u66f4\u6539\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650\u3002 \u6743\u9650 \u6570\u5b57\u8868\u793a \u6587\u4ef6 \u76ee\u5f55 r 4 - $2^2$ \u53ef\u8bfb\u53d6\u3001\u590d\u5236\u6587\u4ef6 \u53ef\u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9 w 2 - $2^1$ \u53ef\u5199\u5165\u3001\u4fee\u6539\u6587\u4ef6 \u53ef\u5728\u76ee\u5f55\u4e2d\u521b\u5efa\u3001\u5220\u9664\u6587\u4ef6 x 1- $2^0$ \u53ef\u6267\u884c\u6587\u4ef6 \u53ef\u8fdb\u5165\u76ee\u5f55 Symbol Meaning u user g group o other a all r read w write (and delete) x execute (and access directory) + add permission - take away permission Usage: chmod [{ ugoa }{ +- =}{ rwx }] [ \u6587\u4ef6\u6216\u76ee\u5f55 ] [ mode = 421 ] [ \u6587\u4ef6\u6216\u76ee\u5f55 ] -c, --changes # \u5f53\u6587\u4ef6\u7684\u6743\u9650\u66f4\u6539\u65f6\u8f93\u51fa\u64cd\u4f5c\u4fe1\u606f --no-preserve-root # \u4e0d\u4fdd\u62a4\u6839\u76ee\u5f55\uff0c\u9ed8\u8ba4\u9009\u9879 --preserve-root # \u4e0d\u80fd\u5728\u6839\u76ee\u5f55\u4e0b\u9012\u5f52\u64cd\u4f5c -f, --silent, # \u6291\u5236\u591a\u6570\u9519\u8bef\u6d88\u606f\u7684\u8f93\u51fa --quiet -v, --verbose # \u65e0\u8bba\u6587\u4ef6\u662f\u5426\u66f4\u6539\u4e86\u6743\u9650\uff0c\u4e00\u5f8b\u8f93\u51fa\u64cd\u4f5c\u4fe1\u606f --reference = RFILE # \u4f7f\u7528\u53c2\u8003\u6587\u4ef6\u6216\u53c2\u8003\u76ee\u5f55RFILE\u7684\u6743\u9650\u6765\u8bbe\u7f6e\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650 -R, --recursive # \u9012\u5f52\u66f4\u6539\u6743\u9650 \u7a0b\u5e8f\u7ba1\u7406 ps sleep 10 & & \u5728\u540e\u53f0\u8fd0\u884c\u4f5c\u4e1a\u5e76\u7acb\u5373\u8fd4\u56de\u63d0\u793a\uff0c\u5141\u8bb8\u60a8\u5728\u7b49\u5f85\u8be5\u4f5c\u4e1a\u5b8c\u6210\u65f6\u8fd0\u884c\u5176\u4ed6\u7a0b\u5e8f\u3002 bg - \u540e\u53f0\u6267\u884c bg\uff1a\u5c06\u4efb\u52a1\u653e\u5230\u540e\u53f0\u6267\u884c\u3002 fg - \u524d\u53f0\u6267\u884c fg\uff1a\u5c06\u540e\u53f0\u4efb\u52a1\u653e\u5230\u524d\u53f0\u7ec8\u7aef\u6267\u884c\u3002 jobs - \u663e\u793a\u4efb\u52a1\u5217\u8868 jobs\uff1a\u663e\u793a\u4efb\u52a1\u5217\u8868\u53ca\u4efb\u52a1\u72b6\u6001 kill - \u7ec8\u6b62\u7a0b\u5e8f kill\uff1a\u5220\u9664\u6267\u884c\u4e2d\u7684\u7a0b\u5e8f\u6216\u5de5\u4f5c\u3002 \u78c1\u76d8\u7ba1\u7406 df - \u663e\u793a\u78c1\u76d8\u76f8\u5173\u4fe1\u606f df . % \u663e\u793a\u5f53\u524d\u76ee\u5f55\u78c1\u76d8\u76f8\u5173\u4fe1\u606f\uff08\u6587\u4ef6\u7cfb\u7edf\u3001\u6302\u8f7d\u70b9\u7b49\u7b49\uff09 du - \u663e\u793a\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4f7f\u7528\u7684\u5343\u5b57\u8282\u6570 du\uff1adu \u547d\u4ee4\u8f93\u51fa\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4f7f\u7528\u7684\u5343\u5b57\u8282\u6570\u3002\u5982\u679c\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\uff0c\u5e0c\u671b\u627e\u51fa\u54ea\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u6700\u591a\uff0c\u5219\u6b64\u9009\u9879\u975e\u5e38\u6709\u7528\u3002 du -s * file - \u6587\u4ef6\u5206\u7c7b file\uff1a\u6839\u636e\u547d\u540d\u6587\u4ef6\u5305\u542b\u7684\u6570\u636e\u7c7b\u578b\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\uff0c\u4f8b\u5982 ascii\uff08\u6587\u672c\uff09\u3001\u56fe\u7247\u3001\u538b\u7f29\u6570\u636e\u7b49\u3002 file * \uff05\u3000\u62a5\u544a\u4e3b\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6 find - \u67e5\u627e\u6587\u4ef6 find\uff1a\u8fd9\u5c06\u5728\u76ee\u5f55\u4e2d\u641c\u7d22\u5177\u6709\u7ed9\u5b9a\u540d\u79f0\u3001\u65e5\u671f\u3001\u5927\u5c0f\u6216\u4efb\u4f55\u5176\u4ed6\u8981\u6307\u5b9a\u7684\u5c5e\u6027\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\uff0c\u4f46\u6709\u8bb8\u591a\u9009\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7\u952e\u5165man find\u6765\u9605\u8bfb\u624b\u518c\u3002 \u4f8b\u5982\uff1a\u8981\u641c\u7d22\u6269\u5c55\u540d\u4e3a .txt \u7684\u6240\u6709\u6587\u4ef6\uff0c\u4ece\u5f53\u524d\u76ee\u5f55\uff08.\uff09\u5f00\u59cb\uff0c\u904d\u5386\u6240\u6709\u5b50\u76ee\u5f55\uff0c\u7136\u540e\u5c06\u6587\u4ef6\u540d\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff1a find . -name \"*.txt\" -print \u641c\u7d22\u5f53\u524d\u76ee\u5f55\u4e2d\u5927\u4e8e\uff11\u5146\u7684\u6587\u4ef6\uff1a find . -size +1M -ls \u53c2\u8003\u7f51\u5740 https://www.linuxcool.com/ http://www.ee.surrey.ac.uk/Teaching/Unix/ https://www.runoob.com/linux/linux-command-manual.html http://c.biancheng.net/linux_tutorial/10/","title":"18.2.\u5e38\u7528\u547d\u4ee4"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_1","text":"","title":"\u7cfb\u7edf\u7ba1\u7406"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#shutdown-","text":"shutdown - \u5173\u95ed\u6216\u91cd\u542f\u3002 shutdown [ OPTIONS... ] [ TIME ] [ WALL... ] Shut down the system. -H --halt \u505c\u673a -P --poweroff \u5173\u673a -r --reboot \u91cd\u542f -h \u7b49\u6548\u4e8e--poweroff, \u4f1a\u88ab--halt\u8986\u76d6 -k \u4e0d\u505c\u673a/\u5173\u673a/\u91cd\u542f, \u53ea\u53d1\u9001\u8b66\u544a --no-wall \u5728\u505c\u6b62/\u5173\u673a/\u91cd\u65b0\u542f\u52a8\u4e4b\u524d\u4e0d\u53d1\u9001\u8b66\u544a\u6d88\u606f -c \u53d6\u6d88\u5173\u673a\u4efb\u52a1 shutdown [options] when [message] shutdown -h now shutdown -h 21:30 shutdown -h +10 shutdown -h +10 \"will reboot\" shutdown -r shutdown -c","title":"shutdown - \u5173\u673a\u3001\u91cd\u542f"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_2","text":"","title":"\u547d\u4ee4\u5e2e\u52a9"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#man-","text":"man - manual - \u67e5\u770b\u547d\u4ee4\u7684\u5728\u7ebf\u5e2e\u52a9\u3002 man wc","title":"man - \u67e5\u770b\u5728\u7ebf\u5e2e\u52a9"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#whatis-","text":"whatis - \u67e5\u8be2\u4e00\u4e2a\u547d\u4ee4\u7684\u7b80\u77ed\u63cf\u8ff0\uff08\u5355\u884c\u63cf\u8ff0\uff09\u3002 whatis \u547d\u4ee4\u5728\u7528 catman -w \u547d\u4ee4\u521b\u5efa\u7684\u6570\u636e\u5e93\u4e2d\u67e5\u627e command \u53c2\u6570\u6307\u5b9a\u7684\u547d\u4ee4\u3001\u7cfb\u7edf\u8c03\u7528\u3001\u5e93\u51fd\u6570\u6216\u7279\u6b8a\u6587\u4ef6\u540d\u3002whatis\u547d\u4ee4\u663e\u793a\u624b\u518c\u90e8\u5206\u7684\u9875\u7709\u884c\u3002whatis\u547d\u4ee4\u7b49\u540c\u4e8e\u4f7f\u7528 man -f \u547d\u4ee4\u3002 whatis wc","title":"whatis - \u547d\u4ee4\u7b80\u8ff0"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#apropos-","text":"apropos - \u5728whatis\u6570\u636e\u5e93\u4e2d\u67e5\u627e\u5b57\u7b26\u4e32\u3002 \u4f7f\u7528man -k\u547d\u4ee4\uff0c\u53ef\u4ee5\u5f97\u5230\u548capropos\u547d\u4ee4\u76f8\u540c\u7684\u7ed3\u679c\uff08\u5b9e\u9645\u4e0a\u662f\u76f8\u540c\u7684\u547d\u4ee4\uff09\u3002 -r, -- regex # \u5c06\u6bcf\u4e2akeyword\u4f5c\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u89e3\u91ca, \u9ed8\u8ba4\u884c\u4e3a -w, --wildcard # \u5c06\u6bcf\u4e2akeyword\u4f5c\u4e3ashell\u6837\u5f0f\u7684\u901a\u914d\u7b26\u89e3\u91ca -e, --exact # \u7cbe\u786e\u5339\u914d -a, --and # \u6240\u6709keyword\u662f\u201c\u5e76\u201d\u7684\u5173\u7cfb -s section, # \u53ea\u67e5\u627e\u6307\u5b9a\u7684\u624b\u518csection --section section apropos pip","title":"apropos - \u67e5\u627e\u547d\u4ee4"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_3","text":"","title":"\u6587\u4ef6\u7ba1\u7406"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#ls-","text":"ls - list - \u5217\u51fa\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u3002 \u5176\u4ed6\u53c2\u6570 -F, --classify # \u6bcf\u4e2a\u6761\u76ee\u540e\u9762\u9644\u52a0\u4e00\u4e2a\u6307\u793a\u7b26\uff0c\u7528\u6765\u8bf4\u660e\u6587\u4ef6\u7684\u7c7b\u578b\u3002 # \u5168\u90e8\u6307\u793a\u7b26\u6709 */=>@| # /\u76ee\u5f55\uff0c*\u53ef\u6267\u884c\u6587\u4ef6\uff0c@\u7b26\u53f7\u94fe\u63a5\uff0c|FIFO\u6587\u4ef6\uff0c=\u5957\u63a5\u5b57 # \u6ca1\u6709\u6307\u793a\u7b26\u8868\u793a\u666e\u901a\u6587\u4ef6 --file-type # \u540c\u4e0a\uff0c\u4f46\u4e0d\u9644\u52a0 '*' -p, --indicator-style = slash # \u5c06 / \u6307\u793a\u7b26\u9644\u52a0\u5230\u76ee\u5f55 --indicator-style = WORD # \u6307\u793a\u7b26\u98ce\u683c: none (default), slash (-p), # file-type (--file-type), classify (-F) -R, --recursive # \u9012\u5f52\u5217\u51fa -a, --all # \u5217\u51fa\u5168\u90e8\u6587\u4ef6\uff0c\u5305\u62ec\u4ee5'.'\u5f00\u5934\u7684\u9690\u85cf\u6587\u4ef6 -A, --almost-all # \u540c\u4e0a\uff0c\u4f46\u4e0d\u5217\u51fa . \u548c .. -B, --ignore-backups # \u4e0d\u5217\u51fa\u4ee5 ~ \u7ed3\u5c3e\u7684\u9690\u85cf\u6587\u4ef6 -d, --directory # \u5217\u51fa\u76ee\u5f55\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5217\u51fa\u5176\u5185\u5bb9 --hide = PATTERN # \u4e0d\u5217\u51fa\u4e0eshell PATTERN\u5339\u914d\u7684\u9690\u5f0f\u6761\u76ee\uff0c # \u4f1a\u88ab-a\u6216-A\u53c2\u6570\u8986\u76d6 -I, --ignore = PATTERN # \u4e0d\u5217\u51fa\u4e0eshell PATTERN\u5339\u914d\u7684\u9690\u5f0f\u6761\u76ee\uff0c # \u4e0d\u4f1a\u88ab-a\u6216-A\u53c2\u6570\u8986\u76d6 \u683c\u5f0f\u53c2\u6570 # \u6392\u5217\u683c\u5f0f -C, --format = vertical # \u591a\u5217\u7eb5\u5411\u6392\u5217 -x, --format = across, # \u591a\u5217\u6a2a\u5411\u6392\u5217 --format = horizontal -l, --format = long, # \u5355\u5217\u8f93\u51fa\uff0c\u5e76\u663e\u793a\u8be6\u7ec6\u4fe1\u606f --format = verbose -1, --format = single-column # \u5355\u5217\u8f93\u51fa\uff0c\u5982\u679c\u4e0d\u662f\u8f93\u51fa\u5230\u7ec8\u7aef\uff0c\u6b64\u9009\u9879\u5c31\u662f\u9ed8\u8ba4\u9009\u9879 -m, --format = commas # \u6c34\u5e73\u8f93\u51fa\uff0c\u4ee5\u9017\u53f7\u5206\u5272 -o # \u957f\u683c\u5f0f\u5355\u5217\u8f93\u51fa\uff0c\u7b49\u4ef7\u4e8e\"--format-long --no-group\" -w, --width = COLS # \u5c06\u8f93\u51fa\u5bbd\u5ea6\u8bbe\u7f6e\u4e3aCOLS\u4e2a\u5b57\u7b26\uff0c0\u8868\u793a\u6ca1\u6709\u9650\u5236 # \u5b57\u9762\u503c\u683c\u5f0f -b, --escape # \u4f7f\u7528C\u98ce\u683c\u7684\u8f6c\u4e49\u5e8f\u5217\u8868\u793a\u975e\u53ef\u6253\u5370\u5b57\u7b26 -Q, --quote-name # \u6761\u76ee\u540d\u79f0\u4f7f\u7528\u53cc\u5f15\u53f7 --quoting-style = WORD # \u4f7f\u7528WORD\u5c06\u6761\u76ee\u540d\u5b57\u62ec\u8d77\u6765 # WORD \u7684\u6709\u6548\u503c\u4e3a: # literal,locale,shell,shell-always, # shell-escape, shell-escape-always, c, escape -q, --hide-control-chars # \u4e0d\u53ef\u6253\u5370\u5b57\u7b26\u7528\u95ee\u53f7\u4ee3\u66ff --show-control-chars # \u539f\u6837\u663e\u793a\u4e0d\u53ef\u6253\u5370\u5b57\u7b26\uff0c # \u9ed8\u8ba4\u503c\uff0c\u9664\u975e\u7a0b\u5e8f\u4e3a\"ls\"\uff0c\u5e76\u8f93\u51fa\u5230\u7ec8\u7aef -N, --literal # \u6253\u5370\u6587\u4ef6\u7684\u539f\u59cb\u540d\u79f0\uff0c\u4e0d\u7279\u522b\u5904\u7406\u63a7\u5236\u7b26 # \u65f6\u95f4\u683c\u5f0f --full-time # \u7c7b\u4f3c -l --time-style=full-iso --time-style = STYLE # \u548c-l\u4e00\u8d77\u4f7f\u7528\uff0c\u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f # STYLE: full-iso,long-iso,iso,locale,+FORMAT # FORMAT\u7684\u89e3\u91ca\u65b9\u5f0f\u7c7b\u4f3c\u4e8e'date'\uff1b # \u5982\u679cFORMAT\u662f FORMAT1 <newline> FORMAT2\uff0c # \u5219FORMAT1\u9002\u7528\u4e8e\u975e\u6700\u65b0\u6587\u4ef6\uff0cFORMAT2\u9002\u7528\u4e8e\u6700\u65b0\u6587\u4ef6\uff1b # \u5982\u679cSTYLE\u5e26\u6709'posix-'\u524d\u7f00\uff0c # \u5219STYLE\u4ec5\u5728POSIX\u8bed\u8a00\u73af\u5883\u5916\u751f\u6548 \u4fe1\u606f\u53c2\u6570 -i, --inode # \u4e3a\u6bcf\u4e2a\u6761\u76ee\u5217\u51fa inode -s, --size # \u5728\u5f00\u5934\u4ee5\u5757\u4e3a\u5355\u4f4d\u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f --author # \u548c-l\u5171\u7528\uff0c\u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u6240\u6709\u8005 -G, --no-group # \u548c-l\u5171\u7528\uff0c\u4e0d\u6253\u5370\u7ec4\u540d -g # \u7c7b\u4f3c-l\uff0c\u4f46\u4e0d\u6253\u5370\u6240\u6709\u8005 --block-size = SIZE # \u4ee5 SIZE \u4e3a\u5355\u4f4d\u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\uff0c # \u4f8b\u5982'--block-size=M'\uff0c\u5219\u4ee5 1024*1024 bytes \u4e3a\u5355\u4f4d -k, --kilobytes # \u6587\u4ef6\u7684\u5927\u5c0f\u4ee5 1024-byte blocks \u4e3a\u5355\u4f4d -h, --human-readable # \u548c-l\u6216-s\u4e00\u8d77\u4f7f\u7528\uff0c\u6587\u4ef6\u7684\u5927\u5c0f\u4ee5\u53ef\u8bfb\u7684\u65b9\u5f0f\u8f93\u51fa --si # \u7c7b\u4f3c-h\uff0c\u4f46\u4f7f\u75281000\u4f5c\u4e3a\u5e95\u6570\uff0c\u800c\u4e0d\u662f1024 -n, --numeric-uid-gid # \u7c7b\u4f3c-l, \u4f46\u7528\u6570\u5b57\u8868\u793aUID\u548cGID\uff0c\u800c\u4e0d\u662f\u7528\u6237\u540d\u548c\u7ec4\u540d -L, --dereference # \u663e\u793a\u7b26\u53f7\u94fe\u63a5\u5f15\u7528\u7684\u6587\u4ef6\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u94fe\u63a5\u672c\u8eab -Z, --context # \u6253\u5370\u6587\u4ef6\u7684 security context \u6392\u5e8f\u53c2\u6570 -U, --sort = none # \u4e0d\u6392\u5e8f\uff0c\u6309\u5b83\u4eec\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u7684\u987a\u5e8f\u5217\u51fa # \u56e0\u4e3a\u4e0d\u52a0\u6392\u5e8f\uff0c\u76ee\u5f55\u5185\u5bb9\u5f88\u591a\u65f6\uff0c\u80fd\u663e\u8457\u5730\u52a0\u5feb\u901f\u5ea6 -f # \u4e0d\u6392\u5e8f\uff0c\u542f\u7528\"-aU\"\uff0c\u7981\u7528\"-ls --color\" -r, --reverse # \u9006\u5e8f\u6392\u5e8f -t, --sort = time # \u6309 mtime \u6392\u5e8f -c, --time = ctime, --time = status # \u548c-lt\u4e00\u8d77\u4f7f\u7528\uff0c\u6309 ctime \u6392\u5e8f\uff0c\u5e76\u663e\u793a ctime # \u548c-l\u4e00\u8d77\u4f7f\u7528\uff0c\u6309\u6587\u4ef6\u540d\u6392\u5e8f\uff0c\u663e\u793a ctime # \u5355\u72ec\u4f7f\u7528\uff0c\u6309 ctime \u7eb5\u5411\u6392\u5e8f\uff0c\u65f6\u95f4\u6700\u65b0\u7684\u5728\u6700\u524d\u9762 -u # \u548c-lt\u5171\u7528: \u663e\u793a\u5e76\u4ee5access time\u6392\u5e8f # \u548c-l\u5171\u7528: \u663e\u793aaccess time\uff0c\u4ee5\u6587\u4ef6\u540d\u6392\u5e8f # \u5426\u5219\u4ee5access time\u6392\u5e8f\uff0c\u6700\u65b0\u7684\u4f18\u5148 -S, --sort = size # \u6309\u6587\u4ef6\u5927\u5c0f\u6392\u5e8f\uff0c\u5927\u6587\u4ef6\u9760\u524d -X, --sort = extension # \u6309\u6587\u4ef6\u6269\u5c55\u540d\u6392\u5e8f\uff0c\u6ca1\u6709\u6269\u5c55\u540d\u7684\u5148\u5217\u51fa --sort = WORD # \u6309 WORD \u6392\u5e8f: none (-U), size (-S), # time (-t), version (-v), extension (-X) --time = WORD # \u548c-l\u5171\u7528\uff0c\u663e\u793aWORD\u65f6\u95f4\uff0c\u800c\u4e0d\u662fmodification\u65f6\u95f4 # WORD: atime or access or use (-u); # ctime or status (-c); # \u5f53\u4e0e --sort=time \u5171\u7528\u65f6\uff0cWORD\u662f\u7528\u4e8e\u6392\u5e8f\u7684\u65f6\u95f4 --group-directories-first # \u5c06\u76ee\u5f55\u6392\u5728\u6587\u4ef6\u524d\u9762","title":"ls - \u5217\u51fa\u6587\u4ef6"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#cd-","text":"cd - change working directory - \u8fdb\u5165\u6307\u5b9a\u76ee\u5f55\u3002","title":"cd - \u8fdb\u5165\u76ee\u5f55"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#pwd-","text":"pwd - print working directory - \u6253\u5370\u5f53\u524d\u76ee\u5f55\u7684\u7edd\u5bf9\u8def\u5f84\u3002","title":"pwd - \u6253\u5370\u5f53\u524d\u76ee\u5f55"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#mkdir-","text":"mkdir - make directory - \u521b\u5efa\u76ee\u5f55\uff0c\u82e5\u76ee\u5f55\u5df2\u5b58\u5728\uff0c\u9ed8\u8ba4\u62a5\u9519\u3002 -m, --mode = MODE # \u8bbe\u7f6e\u6587\u4ef6\u6743\u9650\uff08\u7c7b\u4f3cchmod\uff09\uff0c\u4e0d\u4f1a\u51cf\u53bbumask -p, --parents # \u5982\u679c\u76ee\u5f55\u5df2\u5b58\u5728\u4e0d\u4f1a\u62a5\u9519\uff1b\u6839\u636e\u9700\u8981\u521b\u5efa\u7236\u76ee\u5f55 -v, --verbose # \u4e3a\u521b\u5efa\u7684\u6bcf\u4e2a\u76ee\u5f55\u663e\u793a\u4e00\u6761\u6d88\u606f","title":"mkdir - \u521b\u5efa\u76ee\u5f55"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#rm-","text":"rm - remove - \u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55\u3002 -f, --force # \u5ffd\u7565\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u548c\u53c2\u6570\uff0c\u4ece\u4e0d\u63d0\u793a -i # \u5728\u6bcf\u6b21\u5220\u9664\u4e4b\u524d\u63d0\u793a\uff0c\u9ed8\u8ba4\u884c\u4e3a -1 # \u5728\u5220\u9664\u4e09\u4e2a\u4ee5\u4e0a\u7684\u6587\u4ef6\u4e4b\u524d\u6216\u9012\u5f52\u5220\u9664\u65f6\uff0c\u63d0\u793a1\u6b21 --interactive [= WHEN ] # \u6839\u636eWHEN\u8fdb\u884c\u63d0\u793a: never, once (-I), or always (-i) --one-file-system # \u9012\u5f52\u5220\u9664\u65f6\uff0c\u8df3\u8fc7\u4efb\u4f55\u4e0e\u6307\u5b9a\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\u7684\u76ee\u5f55 --no-preserve-root # \u4e0d\u4fdd\u62a4'/'\u76ee\u5f55 --preserve-root # \u4e0d\u5220\u9664'/' (\u9ed8\u8ba4) -r, -R, -recursive # \u9012\u5f52\u5220\u9664\u76ee\u5f55\u53ca\u5176\u5185\u5bb9 -d, --dir # \u5220\u9664\u7a7a\u76ee\u5f55","title":"rm - \u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#rmdir-","text":"rmdir - remove directory - \u5220\u9664\u7a7a\u76ee\u5f55\u3002 --ignore-fail-on-non-empty # \u5ffd\u7565\u76ee\u5f55\u975e\u7a7a\u5bfc\u81f4\u7684\u5931\u8d25 -p, --parents # \u5220\u9664\u76ee\u5f55\u53ca\u5176\u7236\u76ee\u5f55","title":"rmdir - \u5220\u9664\u7a7a\u76ee\u5f55"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#mv-","text":"mv - \u79fb\u52a8\u6587\u4ef6\u6216\u76ee\u5f55\uff1b\u91cd\u547d\u540d\u3002 --backup [= CONTROL ] # \u5907\u4efd\u6bcf\u4e2a\u73b0\u6709\u76ee\u6807\u6587\u4ef6 -b # \u7c7b\u4f3c--backup\uff0c\u4f46\u4e0d\u63a5\u53d7\u53c2\u6570 -f, --force # \u8986\u76d6\u524d\u4e0d\u63d0\u793a -i, --interactive # \u8986\u76d6\u524d\u63d0\u793a -n, --no-clobber # \u4e0d\u8986\u76d6\u73b0\u6709\u6587\u4ef6 --strip-trailing-slashes # \u4ece\u6bcf\u4e2aSOURCE\u53c2\u6570\u4e2d\u5220\u9664\u6240\u6709\u5c3e\u968f\u659c\u6760 -S, --suffix = SUFFIX # \u8986\u76d6\u901a\u5e38\u7684\u5907\u4efd\u540e\u7f00 -t, --target-directory = DIRECTORY # \u5c06\u6240\u6709\u7684SOURCE\u79fb\u81f3DIRECTORY -T, --no-target-directory # \u5c06DEST\u89c6\u4e3a\u666e\u901a\u6587\u4ef6 -u, --update # \u4ec5\u5728SOURCE\u6bd4DEST\u66f4\u65b0\u65f6\uff0c\u6216DEST\u4e0d\u5b58\u5728\u65f6\u79fb\u52a8","title":"mv - \u91cd\u547d\u540d / \u79fb\u52a8\u6587\u4ef6\u6216\u76ee\u5f55"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#cp-","text":"cp\uff1a\u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\u3002 -a, --archive # \u7b49\u6548\u4e8e-dR --preserve=all --attributes-only # \u4e0d\u590d\u5236\u6587\u4ef6\u6570\u636e\uff0c\u4ec5\u590d\u5236\u5c5e\u6027 --backup [= CONTROL ] # \u5bf9\u6bcf\u4e2a\u5b58\u5728\u7684\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u5907\u4efd -b # \u7c7b\u4f3c--backup\uff0c\u4f46\u4e0d\u63a5\u53d7\u53c2\u6570 --copy-contents # copy contents of special files when recursive -d # \u7b49\u6548\u4e8e--no-dereference --preserve=links -f, --force # \u5982\u679c\u5df2\u5b58\u5728\u7684\u76ee\u6807\u6587\u4ef6\u4e0d\u80fd\u6253\u5f00\uff0c\u5220\u9664\u5b83\u5e76\u91cd\u8bd5 # \u5f53-n\u9009\u9879\u4e5f\u88ab\u4f7f\u7528\u65f6\uff0c\u8be5\u9009\u9879\u5c06\u88ab\u5ffd\u7565 -i, --interactive # \u8986\u76d6\u524d\u63d0\u793a\uff0c\u8be5\u9009\u9879\u4f1a\u88ab-n\u8986\u76d6 -H # follow command-line symbolic links in SOURCE -l, --link # \u521b\u5efa\u786c\u94fe\u63a5\uff0c\u800c\u4e0d\u662f\u590d\u5236 -L, --dereference # always follow symbolic links in SOURCE -n, --no-clobber # \u4e0d\u8981\u8986\u76d6\u5df2\u6709\u7684\u6587\u4ef6 -P, --no-dereference # never follow symbolic links in SOURCE -p # \u7b49\u6548\u4e8e--preserve=mode,ownership,timestamps --preserve [= ATTR_LIST ] # \u5c3d\u53ef\u80fd\u4fdd\u7559\u6307\u5b9a\u7684\u5c5e\u6027(default:mode,ownership,timestamps) # additional attributes: context, links, xattr,all --no-preserve = ATTR_LIST # \u4e0d\u4fdd\u7559\u6307\u5b9a\u7684\u5c5e\u6027 --parents # \u5728\u76ee\u6807\u76ee\u5f55\u4e0b\u4f7f\u7528\u5b8c\u6574\u7684\u6e90\u6587\u4ef6\u540d -R, -r, --recursive # \u9012\u5f52\u590d\u5236\u76ee\u5f55 --reflink [= WHEN ] # control clone/CoW copies. See below --remove-destination # \u590d\u5236\u524d\uff0c\u76f4\u63a5\u79fb\u9664\u5df2\u5b58\u5728\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u548c--force\u51b2\u7a81 --sparse = WHEN # control creation of sparse files. See below --strip-trailing-slashes # \u79fb\u9664\u6e90\u6587\u4ef6\u7684\u5c3e\u968f\u659c\u6760 -s, --symbolic-link # \u521b\u5efa\u7b26\u53f7\u94fe\u63a5\uff0c\u800c\u4e0d\u662f\u590d\u5236 -S, --suffix = SUFFIX # override the usual backup suffix -t, --target-directory = DIRECTORY # \u590d\u5236\u6240\u6709\u6307\u5b9a\u7684SOURCE\u5230DIRECTORY -T, --no-target-directory # \u5c06DEST\u89c6\u4e3a\u666e\u901a\u6587\u4ef6 -u, --update # \u53ea\u6709SOURCE\u6587\u4ef6\u6bd4\u76ee\u6807\u6587\u4ef6\u66f4\u65b0\uff0c\u6216\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u624d\u590d\u5236","title":"cp - \u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\u3002"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#gzip-","text":"","title":"gzip  - \u538b\u7f29\u6587\u4ef6"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#zcat-gzip","text":"zcat\uff1a\u8bfb\u53d6gzip\u6587\u4ef6\uff0c\u800c\u65e0\u9700\u5148\u89e3\u538b\u7f29\u5b83\u4eec\u3002","title":"zcat - \u8bfb\u53d6gzip\u6587\u4ef6"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_4","text":"","title":"\u6587\u4ef6\u7f16\u8f91"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#head-","text":"-c, --bytes =[ - ] NUM # \u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u524dNUM\u4e2a\u5b57\u8282 # \u4ee5'-'\u5f00\u5934, \u6253\u5370\u6240\u6709\u5185\u5bb9\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2aNUM bytes -n, --lines =[ - ] NUM # \u6253\u5370\u524dNUM\u884c\uff0c\u9ed8\u8ba4\u4e3a\u524d10\u884c # \u4ee5'-'\u5f00\u5934, \u6253\u5370\u6240\u6709\u5185\u5bb9\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2aNUM lines -q, --quiet, --silent # \u4e0d\u6253\u5370\u6807\u9898 -v, --verbose # \u603b\u662f\u6253\u5370\u6807\u9898 -z, --zero-terminated # \u884c\u7ec8\u6b62\u7b26\u4e3aNUL\uff0c\u800c\u4e0d\u662f\u6362\u884c\u7b26","title":"head - \u67e5\u770b\u6587\u4ef6\u5934\u90e8"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#tail-","text":"-c, --bytes =[ + ] NUM # \u8f93\u51fa\u6700\u540eNUM\u4e2a\u5b57\u8282\uff1b # \u6216\u4f7f\u7528-c +NUM\u8f93\u51fa\u4eceNUM\u5b57\u8282\u5f00\u59cb\u7684\u5185\u5bb9 -f, # \u663e\u793a\u6587\u4ef6\u65b0\u8ffd\u52a0\u7684\u5185\u5bb9\uff0c\u67e5\u770b\u65e5\u5fd7\u6587\u4ef6\u6bd4\u8f83\u6709\u7528 --follow [={ name | descriptor }] -F # \u4e0e--follow=name --retry\u76f8\u540c -n, --lines =[ + ] NUM # \u8f93\u51fa\u6700\u540eNUM\u884c\uff0c\u9ed8\u8ba4\u4e3a\u6700\u540e10\u884c\uff1b # \u6216\u4f7f\u7528-n +NUM\u4eceNUM\u884c\u5f00\u59cb\u8f93\u51fa --max-unchanged-stats = N # \u548c--follow=name\u5171\u7528 # \u91cd\u65b0\u6253\u5f00\u5728N\u6b21\uff08\u9ed8\u8ba45\u6b21\uff09\u8fed\u4ee3\u540e\u672a\u66f4\u6539\u5927\u5c0f\u7684FILE\uff0c # \u4ee5\u67e5\u770b\u5176\u662f\u5426\u5df2\u53d6\u6d88\u94fe\u63a5\u6216\u91cd\u547d\u540d #\uff08\u8fd9\u662f\u5faa\u73af\u65e5\u5fd7\u6587\u4ef6\u7684\u5e38\u89c1\u60c5\u51b5\uff09\uff1b # \u4f7f\u7528inotify\u65f6\uff0c\u6b64\u9009\u9879\u5f88\u5c11\u6709\u7528 --pid = PID # \u548c-f\u5171\u7528\uff0c\u5728\u8fdb\u7a0bPID\u7ec8\u6b62\u4e4b\u540e\uff0c\u505c\u6b62\u6253\u5370 --retry # \u5982\u679c\u65e0\u6cd5\u8bbf\u95ee\u6587\u4ef6\uff0c\u4e0d\u65ad\u5c1d\u8bd5 -s, --sleep-interval = N # \u548c-f\u5171\u7528\uff0c\u7761\u7720\u5927\u7ea6N\u79d2\uff0c\u9ed8\u8ba4\u503c\u4e3a1.0\uff1b # \u548cinotify\u6216--pid=P\u5171\u7528\uff0c\u6bcfN\u79d2\u68c0\u67e5\u8fdb\u7a0bPID\u81f3\u5c11\u4e00\u6b21 -z, --zero-terminated # \u884c\u5b9a\u754c\u7b26\u4e3aNUL\uff0c\u800c\u4e0d\u662f\u6362\u884c\u7b26","title":"tail - \u67e5\u770b\u6587\u4ef6\u5c3e\u90e8"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#cat-","text":"cat\uff1a\u5728\u7ec8\u7aef\u663e\u793a\u6587\u4ef6\u5185\u5bb9\u3001\u5c06\u8f93\u5165\u7ec8\u7aef\u7684\u6587\u672c\u4fdd\u5b58\u8fdb\u6587\u4ef6\u3001\u5c06\u591a\u4e2a\u6587\u672c\u6587\u4ef6\u4fdd\u5b58\u5230\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u3002 > \uff1a\u8868\u793a\u8986\u76d6\u539f\u5185\u5bb9 >> \uff1a\u8868\u793a\u8ffd\u52a0 -A, --show-all # \u7b49\u6548\u4e8e-vET -b, --number-nonblank # \u7ed9\u975e\u7a7a\u884c\u7f16\u53f7 -e # \u7b49\u6548\u4e8e-vE -E, --show-ends # \u6bcf\u884c\u672b\u5c3e\u663e\u793a$ -n, --number # \u7ed9\u6bcf\u884c\u7f16\u53f7 -s, --squeeze-blank # \u591a\u4e2a\u8fde\u7eed\u7684\u7a7a\u884c\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u884c -t # equivalent to -vT -T, --show-tabs # \u5c06TAB characters\u663e\u793a\u4e3a^I -v, --show-nonprinting # \u4f7f\u7528^\u548cM-\u8868\u793a\u6cd5, LFD\u548cTAB\u9664\u5916","title":"cat - \u663e\u793a\u6587\u4ef6\u5185\u5bb9"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#less-","text":"less\uff1a\u5206\u5c4f\u4e0a\u4e0b\u7ffb\u9875\u6d4f\u89c8\u6587\u4ef6\u5185\u5bb9\u3002\u7528PageUp\u952e\u5411\u4e0a\u7ffb\u9875\uff0c\u7528PageDown\u952e\u5411\u4e0b\u7ffb\u9875\u3002\u6309Q\u952e\u9000\u51faless\u7a0b\u5e8f\u3002","title":"less - \u6d4f\u89c8\u6587\u4ef6\u5185\u5bb9"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#wc-","text":"wc\uff1a\u7edf\u8ba1\u6587\u4ef6\u7684\u5b57\u8282\u6570\u3001\u5b57\u6570\u3001\u884c\u6570\u3002","title":"wc - \u7edf\u8ba1\u6587\u4ef6\u5b57\u6570"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#grep-","text":"grep\uff1a\u5728\u6587\u4ef6\u4e2d\u641c\u7d22\u6587\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u3002","title":"grep - \u641c\u7d22\u6587\u672c"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#sort-","text":"sort\uff1a\u6392\u5e8f\u6587\u672c\uff08\u6587\u672c\u53ef\u4ee5\u6765\u81ea\u7ec8\u7aef\u8f93\u5165\u3001\u4e5f\u53ef\u4ee5\u6765\u81ea\u6587\u4ef6\uff09\u3002","title":"sort - \u6392\u5e8f\u6587\u672c"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_5","text":"","title":"\u7528\u6237\u7ba1\u7406"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#who-","text":"-a, --all # \u7b49\u4ef7\u4e8e\u8c03\u7528 '-b -d --login -p -r -t -T -u' -b, --boot # \u4e0a\u6b21\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u95f4 -d, --dead # \u6253\u5370 dead \u72b6\u6001\u7684\u8fdb\u7a0b -H, --heading # \u6253\u5370\u5217\u6807\u9898\u884c -l, --login # \u6253\u5370\u7cfb\u7edf\u767b\u5f55\u8fdb\u7a0b --lookup # \u5c1d\u8bd5\u901a\u8fc7 DNS \u89c4\u8303\u4e3b\u673a\u540d -m # \u4ec5\u663e\u793a\u548c\u6807\u51c6\u8f93\u5165\u5173\u8054\u7684\u4e3b\u673a\u540d\u548c\u7528\u6237 -p, --process # \u6253\u5370\u7531 init \u751f\u6210\u7684\u6d3b\u52a8\u8fdb\u7a0b -q, --count # \u5217\u51fa\u6240\u6709\u5df2\u767b\u5f55\u7528\u6237\u7684\u540d\u79f0\u548c\u6570\u91cf -r, --runlevel # \u6253\u5370\u5f53\u524d\u8fd0\u884c\u7ea7\u522b -s, --short # \u4ec5\u6253\u5370\u540d\u79f0\u3001\u884c\u548c\u65f6\u95f4\uff08\u9ed8\u8ba4\uff09 -t, --time # \u6253\u5370\u4e0a\u6b21\u7cfb\u7edf\u65f6\u949f\u66f4\u6539 -u, --users # \u5217\u51fa\u767b\u5f55\u7684\u7528\u6237 -T, -w, --mesg, --message, --writable # \u5c06\"+\u3001-\u3001?\"\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7528\u6237\u7684\u6d88\u606f\u72b6\u6001\u6dfb\u52a0\u5230\u7528\u6237\u540d\u79f0\u540e\u9762 # '+' \u5141\u8bb8\u5199\u5165\u4fe1\u606f # '-' \u7981\u6b62\u5199\u5165\u4fe1\u606f # '?' \u4e0d\u80fd\u67e5\u627e\u5230\u7ec8\u7aef\u8bbe\u5907","title":"who - \u5f53\u524d\u6240\u6709\u767b\u9646\u7528\u6237\u7684\u4fe1\u606f"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#whoami-id","text":"","title":"whoami - \u6253\u5370\u4e0e\u5f53\u524d\u6709\u6548\u7528\u6237ID\u5173\u8054\u7684\u7528\u6237\u540d\u3002"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#chmod-","text":"change the permissions mode of a file. \u901a\u8fc7\u7b26\u53f7\u7ec4\u5408\u7684\u65b9\u5f0f\u66f4\u6539\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650\u3002 \u901a\u8fc7\u516b\u8fdb\u5236\u6570\u7684\u65b9\u5f0f\u66f4\u6539\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650\u3002 \u901a\u8fc7\u53c2\u8003\u6587\u4ef6\u7684\u6743\u9650\u6765\u66f4\u6539\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650\u3002 \u6743\u9650 \u6570\u5b57\u8868\u793a \u6587\u4ef6 \u76ee\u5f55 r 4 - $2^2$ \u53ef\u8bfb\u53d6\u3001\u590d\u5236\u6587\u4ef6 \u53ef\u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9 w 2 - $2^1$ \u53ef\u5199\u5165\u3001\u4fee\u6539\u6587\u4ef6 \u53ef\u5728\u76ee\u5f55\u4e2d\u521b\u5efa\u3001\u5220\u9664\u6587\u4ef6 x 1- $2^0$ \u53ef\u6267\u884c\u6587\u4ef6 \u53ef\u8fdb\u5165\u76ee\u5f55 Symbol Meaning u user g group o other a all r read w write (and delete) x execute (and access directory) + add permission - take away permission Usage: chmod [{ ugoa }{ +- =}{ rwx }] [ \u6587\u4ef6\u6216\u76ee\u5f55 ] [ mode = 421 ] [ \u6587\u4ef6\u6216\u76ee\u5f55 ] -c, --changes # \u5f53\u6587\u4ef6\u7684\u6743\u9650\u66f4\u6539\u65f6\u8f93\u51fa\u64cd\u4f5c\u4fe1\u606f --no-preserve-root # \u4e0d\u4fdd\u62a4\u6839\u76ee\u5f55\uff0c\u9ed8\u8ba4\u9009\u9879 --preserve-root # \u4e0d\u80fd\u5728\u6839\u76ee\u5f55\u4e0b\u9012\u5f52\u64cd\u4f5c -f, --silent, # \u6291\u5236\u591a\u6570\u9519\u8bef\u6d88\u606f\u7684\u8f93\u51fa --quiet -v, --verbose # \u65e0\u8bba\u6587\u4ef6\u662f\u5426\u66f4\u6539\u4e86\u6743\u9650\uff0c\u4e00\u5f8b\u8f93\u51fa\u64cd\u4f5c\u4fe1\u606f --reference = RFILE # \u4f7f\u7528\u53c2\u8003\u6587\u4ef6\u6216\u53c2\u8003\u76ee\u5f55RFILE\u7684\u6743\u9650\u6765\u8bbe\u7f6e\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u6743\u9650 -R, --recursive # \u9012\u5f52\u66f4\u6539\u6743\u9650","title":"chmod - \u66f4\u6539\u6743\u9650"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_6","text":"ps sleep 10 & & \u5728\u540e\u53f0\u8fd0\u884c\u4f5c\u4e1a\u5e76\u7acb\u5373\u8fd4\u56de\u63d0\u793a\uff0c\u5141\u8bb8\u60a8\u5728\u7b49\u5f85\u8be5\u4f5c\u4e1a\u5b8c\u6210\u65f6\u8fd0\u884c\u5176\u4ed6\u7a0b\u5e8f\u3002","title":"\u7a0b\u5e8f\u7ba1\u7406"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#bg-","text":"bg\uff1a\u5c06\u4efb\u52a1\u653e\u5230\u540e\u53f0\u6267\u884c\u3002","title":"bg - \u540e\u53f0\u6267\u884c"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#fg-","text":"fg\uff1a\u5c06\u540e\u53f0\u4efb\u52a1\u653e\u5230\u524d\u53f0\u7ec8\u7aef\u6267\u884c\u3002","title":"fg - \u524d\u53f0\u6267\u884c"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#jobs-","text":"jobs\uff1a\u663e\u793a\u4efb\u52a1\u5217\u8868\u53ca\u4efb\u52a1\u72b6\u6001","title":"jobs - \u663e\u793a\u4efb\u52a1\u5217\u8868"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#kill-","text":"kill\uff1a\u5220\u9664\u6267\u884c\u4e2d\u7684\u7a0b\u5e8f\u6216\u5de5\u4f5c\u3002","title":"kill - \u7ec8\u6b62\u7a0b\u5e8f"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_7","text":"","title":"\u78c1\u76d8\u7ba1\u7406"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#df-","text":"df . % \u663e\u793a\u5f53\u524d\u76ee\u5f55\u78c1\u76d8\u76f8\u5173\u4fe1\u606f\uff08\u6587\u4ef6\u7cfb\u7edf\u3001\u6302\u8f7d\u70b9\u7b49\u7b49\uff09","title":"df  - \u663e\u793a\u78c1\u76d8\u76f8\u5173\u4fe1\u606f"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#du-","text":"du\uff1adu \u547d\u4ee4\u8f93\u51fa\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4f7f\u7528\u7684\u5343\u5b57\u8282\u6570\u3002\u5982\u679c\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\uff0c\u5e0c\u671b\u627e\u51fa\u54ea\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u6700\u591a\uff0c\u5219\u6b64\u9009\u9879\u975e\u5e38\u6709\u7528\u3002 du -s *","title":"du - \u663e\u793a\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4f7f\u7528\u7684\u5343\u5b57\u8282\u6570"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#file-","text":"file\uff1a\u6839\u636e\u547d\u540d\u6587\u4ef6\u5305\u542b\u7684\u6570\u636e\u7c7b\u578b\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\uff0c\u4f8b\u5982 ascii\uff08\u6587\u672c\uff09\u3001\u56fe\u7247\u3001\u538b\u7f29\u6570\u636e\u7b49\u3002 file * \uff05\u3000\u62a5\u544a\u4e3b\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6","title":"file - \u6587\u4ef6\u5206\u7c7b"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#find-","text":"find\uff1a\u8fd9\u5c06\u5728\u76ee\u5f55\u4e2d\u641c\u7d22\u5177\u6709\u7ed9\u5b9a\u540d\u79f0\u3001\u65e5\u671f\u3001\u5927\u5c0f\u6216\u4efb\u4f55\u5176\u4ed6\u8981\u6307\u5b9a\u7684\u5c5e\u6027\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\uff0c\u4f46\u6709\u8bb8\u591a\u9009\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7\u952e\u5165man find\u6765\u9605\u8bfb\u624b\u518c\u3002 \u4f8b\u5982\uff1a\u8981\u641c\u7d22\u6269\u5c55\u540d\u4e3a .txt \u7684\u6240\u6709\u6587\u4ef6\uff0c\u4ece\u5f53\u524d\u76ee\u5f55\uff08.\uff09\u5f00\u59cb\uff0c\u904d\u5386\u6240\u6709\u5b50\u76ee\u5f55\uff0c\u7136\u540e\u5c06\u6587\u4ef6\u540d\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff1a find . -name \"*.txt\" -print \u641c\u7d22\u5f53\u524d\u76ee\u5f55\u4e2d\u5927\u4e8e\uff11\u5146\u7684\u6587\u4ef6\uff1a find . -size +1M -ls","title":"find - \u67e5\u627e\u6587\u4ef6"},{"location":"Linux/18.2.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html#_8","text":"https://www.linuxcool.com/ http://www.ee.surrey.ac.uk/Teaching/Unix/ https://www.runoob.com/linux/linux-command-manual.html http://c.biancheng.net/linux_tutorial/10/","title":"\u53c2\u8003\u7f51\u5740"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html","text":"Introduction Matplotlib \u662f\u4e00\u4e2a Python 2D\u7ed8\u56fe\u5e93\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5f97\u5230 Python \u79d1\u5b66\u8ba1\u7b97\u793e\u533a\u7684\u5168\u529b\u652f\u6301\u3002\u8be5\u9879\u76ee\u7531\u751f\u7269\u5b66\u5bb6 John Hunter \u4e8e2003\u5e74\u53d1\u8d77\uff0c\u6700\u521d\u7684\u4f5c\u8005\u5927\u90e8\u5206\u90fd\u662f\u5728\u7f16\u7a0b\u9886\u57df\u81ea\u5b66\u6210\u624d\u7684\u79d1\u5b66\u5bb6\uff0c\u73b0\u5728\u9879\u76ee\u7531\u5f00\u6e90\u793e\u533a\u5f00\u53d1\u3002 Matplotlib \u73b0\u5728\u5df2\u7ecf\u88ab\u5f88\u591a\u4eba\u7528\u4e8e\u5206\u6790\u548c\u7814\u7a76\u76ee\u7684\uff0c\u751a\u81f3\u88ab NASA \u7528\u4e8e\u51e4\u51f0\u53f7\u706b\u661f\u63a2\u6d4b\u5668\u7684\u6570\u636e\u53ef\u89c6\u5316\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4eba\u7c7b\u6355\u6349\u7684\u7b2c\u4e00\u5f20 \u9ed1\u6d1e\u7167\u7247 \u5b8c\u5168\u4f7f\u7528 Python \u5408\u6210\uff0c\u5176\u4e2d\u5c31\u7528\u5230\u4e86 Matplotlib\u3002 Origin of matplotlib Matplotlib \u7684\u8d77\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230 John Hunter \u8bd5\u56fe\u628a\u4ed6\u81ea\u5df1\u548c\u7814\u7a76\u766b\u75eb\u7684\u540c\u4e8b\u4ece\u5206\u6790\u76ae\u8d28\u8111\u7535\u56fe(ECoG)\u7684\u4e13\u6709\u8f6f\u4ef6 (Proprietary software) \u4e2d\u89e3\u653e\u51fa\u6765\u3002\u5728\u5f53\u65f6\uff0c\u4e13\u6709\u7684\u6570\u636e\u53ef\u89c6\u5316\u8f6f\u4ef6\u662f\u4e00\u79cd\u6709\u9650\u7684\u8d44\u6e90\u3002John Hunter \u5de5\u4f5c\u7684\u5b9e\u9a8c\u5ba4\u53ea\u6709\u4e00\u4e2a\u8f6f\u4ef6\u8bb8\u53ef\u8bc1\uff0c\u5404\u79cd\u5404\u6837\u7684\u7814\u7a76\u751f\u3001\u533b\u5b66\u751f\u3001\u535a\u58eb\u540e\u3001\u5b9e\u4e60\u751f\u548c\u8c03\u67e5\u4eba\u5458\u8f6e\u6d41\u5206\u4eab\u786c\u4ef6\u5bc6\u94a5\u3002John Hunter \u60f3\u627e\u5230\u4e00\u4e2a\u53ef\u4f9b\u6574\u4e2a\u56e2\u961f\u4f7f\u7528\u7684\u66ff\u4ee3\u5de5\u5177\u3002\u5728\u5f53\u65f6\uff0cMATLAB \u5df2\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5728\u751f\u7269\u533b\u5b66\u754c\u7684\u6570\u636e\u5206\u6790\u548c\u53ef\u89c6\u5316\uff0c\u56e0\u6b64 Hunter \u5f00\u59cb\u7740\u624b\u57fa\u4e8e MATLAB \u5f00\u53d1\u4e00\u4e2a\u5de5\u5177\u7528\u6765\u53d6\u4ee3\u4e13\u7528\u8f6f\u4ef6\uff0c\u5e76\u53d6\u5f97\u4e86\u4e00\u4e9b\u6210\u529f\u3002\u8fd9\u4e2a\u7248\u672c\u53ef\u4ee5\u88ab\u591a\u4e2a\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u548c\u6269\u5c55\u3002\u7136\u800c\uff0c\u766b\u75eb\u624b\u672f\u60a3\u8005\u7684\u771f\u5b9e\u533b\u7597\u6570\u636e\u5177\u6709\u591a\u79cd\u6570\u636e\u6a21\u5f0f (CT\u3001MRI\u3001ECoG\u3001EEG)\uff0c\u5176\u590d\u6742\u6027\u8ba9 MATLAB \u5728\u6570\u636e\u7ba1\u7406\u65b9\u9762\u53d7\u5230\u6311\u6218\u3002\u7531\u4e8e\u4e0d\u6ee1\u610f MATLAB \u5bf9\u8fd9\u9879\u4efb\u52a1\u7684\u9002\u7528\u6027\uff0cHunter \u5f00\u59cb\u5728\u7528\u6237\u754c\u9762\u5de5\u5177\u5305 GTK + \u7684\u57fa\u7840\u4e0a\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684 Python \u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u5f53\u65f6 GTK + \u662f\u9886\u5148\u7684 Linux \u684c\u9762\u89c6\u7a97\u7cfb\u7edf\u3002 GTK\uff08\u539f\u540dGTK+\uff09\u6700\u521d\u662fGIMP\u7684\u4e13\u7528\u5f00\u53d1\u5e93\uff08GIMP Toolkit\uff09\uff0c\u540e\u6765\u53d1\u5c55\u4e3aUnix-like\u7cfb\u7edf\u4e0b\u5f00\u53d1\u56fe\u5f62\u754c\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u6d41\u5f00\u53d1\u5de5\u5177\u4e4b\u4e00\u3002GTK\u662f\u81ea\u7531\u8f6f\u4ef6\uff0c\u5e76\u4e14\u662fGNU\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002\u81ea2019\u5e742\u67086\u65e5\u8d77\uff0cGTK+\u6539\u540d\u4e3aGTK\u3002GTK\u4f7f\u7528C\u8bed\u8a00\u5f00\u53d1\uff0c\u4f46\u662f\u5176\u8bbe\u8ba1\u8005\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u6280\u672f\uff0c\u4e5f\u63d0\u4f9b\u4e86\u5176\u4ed6\u8bed\u8a00\uff08\u5982Python\uff09\u7684\u63a5\u53e3\u3002 Matplotlib \u6700\u521d\u662f\u4e3a\u8fd9\u4e2a GTK+ \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684 EEG/ECoG \u53ef\u89c6\u5316\u5de5\u5177\uff0c\u8fd9\u4e2a\u7528\u4f8b\u6307\u5bfc\u4e86\u5b83\u7684\u539f\u59cb\u67b6\u6784\u3002Matplotlib \u6700\u521d\u7684\u8bbe\u8ba1\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u76ee\u7684\uff1a\u4f5c\u4e3a\u4ea4\u4e92\u5f0f\u547d\u4ee4\u9a71\u52a8\u7684\u56fe\u5f62\u751f\u6210\u5de5\u5177\u7684\u66ff\u4ee3\u54c1\uff0cMATLAB \u5728\u8fd9\u4e00\u70b9\u4e0a\u505a\u5f97\u975e\u5e38\u597d\u3002MATLAB \u7684\u8bbe\u8ba1\u4f7f\u52a0\u8f7d\u6570\u636e\u6587\u4ef6\u548c\u7ed8\u56fe\u7684\u4efb\u52a1\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u76f4\u63a5\uff0c\u7136\u800c\u5b8c\u6574\u7684\u9762\u5411\u5bf9\u8c61 API \u5728\u8bed\u6cd5\u4e0a\u8fc7\u4e8e\u7e41\u91cd\u3002\u56e0\u6b64 matplotlib \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u72b6\u6001\u7684\u811a\u672c\u63a5\u53e3\uff0c\u7528\u4e8e\u5feb\u901f\u7b80\u5355\u5730\u751f\u6210\u7c7b\u4f3c\u4e8e MATLAB \u7684\u56fe\u5f62\u3002 Overview of matplotlib Architecture Matplotlib \u4e2d\uff0c\u5305\u542b\u548c\u7ba1\u7406\u7ed9\u5b9a\u56fe\u5f62\u4e2d\u6240\u6709\u5143\u7d20\u7684\u9876\u7ea7 matplotlib \u5bf9\u8c61\u79f0\u4e3a Figure \u3002\u5f53\u524d Matplotlib \u4f53\u7cfb\u7ed3\u6784\u56f4\u7ed5\u7740\u7528\u6237\u521b\u5efa\u3001\u8868\u793a\uff08\u6e32\u67d3\uff09\u548c\u66f4\u65b0 Figure \u5bf9\u8c61\u6240\u9700\u7684\u64cd\u4f5c\u5c55\u5f00\u3002\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u5b8c\u6210\u8fd9\u4e00\u7cfb\u5217\u64cd\u4f5c\u7684\u4f53\u7cfb\u7ed3\u6784\u5206\u4e3a\u4e09\u5c42\uff0c\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5806\u6808\u3002\u8fd9\u4e09\u5c42\u4ece\u4e0b\u5230\u4e0a\u5206\u522b\u662f\uff1abackend\u3001artist \u548cscripting\u3002\u4e0a\u5c42\u77e5\u9053\u5982\u4f55\u4e0e\u4e0b\u9762\u7684\u5c42\u8fdb\u884c\u901a\u4fe1\uff0c\u4f46\u4e0b\u5c42\u5374\u4e0d\u77e5\u9053\u4e0a\u5c42\u3002 Fig 1 Matplotlib \u662f\u4e00\u4e2a\u7ed8\u56fe\u5e93\uff0c\u5b83\u4f9d\u8d56\u4e8e\u67d0\u4e9b\u540e\u7aef\u6765\u6e32\u67d3\u56fe\u7247\u3002backend \u5c42\u53ef\u4ee5\u4e0e\u4e0d\u540c\u7684\u8fd0\u884c\u73af\u5883 (backend) \u76f4\u63a5\u4ea4\u4e92\uff0c\u4e3a\u4e0a\u5c42\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u4e00\u4e2a\u56fe\u5f62\u9700\u8981\u7531\u591a\u4e2a\u5bf9\u8c61\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5e94\u8be5\u88ab\u5355\u72ec\u4fee\u6539\uff0c\u5e76\u4e14\u4fee\u6539\u7684\u884c\u4e3a\u5bf9\u6574\u4e2a\u56fe\u7247\u7684\u5f71\u54cd\u662f\u6b63\u9762\u7684\u3001\u53ef\u9884\u6d4b\u7684\u3002artist \u5c42\u5305\u542b\u4e86\u4e00\u5f20\u56fe\u4e2d\u6bcf\u4e2a\u53ef\u89c6\u7ec4\u4ef6\u7684\u62bd\u8c61\u3002\u7531\u4e8e\u8fd9\u5c42\u4e0e\u53ef\u89c6\u5316\u9ad8\u5ea6\u76f8\u5173\uff0c\u8be5\u5c42\u88ab\u8ba4\u4e3a\u662f\u521b\u5efa\u89c6\u89c9\u827a\u672f\u7684\u4e00\u822c\u6027\u6982\u5ff5\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3aartist layer\u3002 \u6700\u540e\uff0c\u8fd8\u9700\u8981\u652f\u6301\u4ee5\u7f16\u7a0b\u7684\u65b9\u5f0f\u4e0e\u56fe\u7247\u4ea4\u4e92\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u5c3d\u53ef\u80fd\u5e72\u51c0\u3001\u76f4\u89c2\u7684\u8bed\u6cd5\u53bb\u64cd\u4f5c\u56fe\u5f62\u3002\u8fd9\u5c42\u88ab\u79f0\u4e3a\u811a\u672c\u5c42\u3002 Backend layer matplotlib \u7684\u540e\u7aef\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a User interface backends (interactive) Hardcopy backends (non-interactive) \u4f7f\u7528User interface\u540e\u7aef\u65f6\uff0c Figure \u4f1a\u88ab\u6e32\u67d3\u5230\u7528\u6237\u754c\u9762\u7a97\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 User interface backend \u7684 GUI \u4e8b\u4ef6\uff08\u5982\u952e\u76d8\u548c\u9f20\u6807\u8f93\u5165\uff09 \u4ea4\u4e92\u5730\u4fee\u6539\u56fe\u7247\u3002\u4f7f\u7528Hardcopy backend\u65f6\uff0c Figure \u4f1a\u88ab\u4fdd\u5b58\u4e3a\u56fe\u7247\u6587\u4ef6\u3002\u5206\u522b\u6709\u5982\u4e0b\u7684User interface backend \u548c Hardcopy backend\uff1a User interface backend Hardcopy backend GTK 2.x and GTK 3.x PS wxWidgets PDF Tk SVG Qt4 and Qt5 PNG Mac OS X Cocoa \u6839\u636e\u662f\u5426\u652f\u6301raster graphics\u548cvector graphics\uff0cHardcopy backend \u53c8\u53ef\u4ee5\u5206\u4e3a\uff1a \u4ec5\u652f\u6301raster graphics \u4ec5\u652f\u6301vector graphics \u652f\u6301\u4ee5\u4e0a\u4e24\u8005 \u4ea4\u4e92\u5f0f\u540e\u7aef\u548c\u975e\u4ea4\u4e92\u540e\u7aef\u5efa\u7acb\u5728\u4e00\u4e9b\u6838\u5fc3\u7684\u62bd\u8c61\u4e4b\u4e0a\uff0c\u8fd9\u4e9b\u57fa\u7c7b\u5982\u4e0b\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u540e\u7aef\uff0c\u8fd9\u4e9b\u57fa\u7c7b\u6709\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\u3002 FigureCanvasBase and FigureManagerBase RendererBase and GraphicsContextBase Event , ShowBase , and Timer FigureCanvas FigureCanvasBase \u662f User interface backend \u548c Hardcopy backend \u90fd\u4f7f\u7528\u7684\u57fa\u7c7b\uff0c\u5b83\u8868\u793a\u7528\u4e8e\u5448\u73b0\u56fe\u5f62\u7684\u753b\u5e03\u3002\u5176\u804c\u8d23\u5305\u62ec\uff1a \u6301\u6709Figure\u7684\u5f15\u7528 \u4f7f\u7528Figure\u66f4\u65b0\u753b\u5e03 \u5b9a\u4e49\u8fd0\u884c\u65f6\u5c06\u88ab\u6ce8\u518c\u7684\u4e8b\u4ef6\u65b9\u6cd5 \u5c06\u539f\u751fbackend\u7684\u4e8b\u4ef6\u8f6c\u6362\u4e3a matplotlib \u4e8b\u4ef6\u62bd\u8c61\u6846\u67b6 \u5b9a\u4e49\u7ed8\u5236\u65b9\u6cd5\u7528\u4e8e\u6e32\u67d3\u56fe\u5f62 \u542f\u52a8\u548c\u505c\u6b62\u975e GUI \u4e8b\u4ef6\u5faa\u73af\u7684\u65b9\u6cd5 \u4f7f\u7528 Hardcopy backend \u65f6\uff0c FigureCanvasBase \u53ef\u4ee5\u6ce8\u518c\u540e\u7aef\u652f\u6301\u7684\u56fe\u7247\u6587\u4ef6\u7c7b\u578b\u3002\u5f53\u4f7f\u7528interface backends\u65f6\uff0c FigureCanvasBase \u63d0\u4f9b\u5c06\u753b\u5e03\u63d2\u5165backend \u7a97\u53e3\u7684\u65b9\u6cd5\u3002 \u5728 pyplot \u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0cmatplotlib \u4f1a\u4f7f\u7528 FigureManagerBase \u7c7b\u3002\u8be5\u7c7b\u5305\u88c5\u4e86 FigureCanvasBase \u7c7b\u4ee5\u53ca\u5404\u79cd GUI backend \u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u66f4\u8f7b\u677e\u5730\u5448\u73b0\u56fe\u5f62\u548c\u63a5\u53e3\u3002 Renderer \u5728 matplotlib \u4e2d\uff0crenderer \u7684\u5de5\u4f5c\u662f\u63d0\u4f9b\u4e00\u4e2a\u5e95\u5c42\u7684\u7ed8\u56fe\u63a5\u53e3\uff0c\u7528\u4e8e\u5728\u753b\u5e03\u4e0a\u6dfb\u52a0\u58a8\u6c34\u3002 \u5982\u4e0a\u6240\u8ff0\uff0c\u539f\u59cb matplotlib \u5e94\u7528\u7a0b\u5e8f\u662f GTK+ \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684 ECoG \u67e5\u770b\u5668\uff0c\u56e0\u6b64\uff0c\u539f\u59cb\u8bbe\u8ba1\u7684\u5927\u90e8\u5206\u7075\u611f\u6765\u81ea\u5f53\u65f6\u53ef\u7528\u7684 gdk/GTK+ API\u3002\u539f\u59cb\u7684 renderer API \u662f\u53d7 GDK Drawable \u63a5\u53e3\u7684\u542f\u53d1\uff0c\u5b83\u5b9e\u73b0\u4e86\u7ed8\u5236\u70b9\u3001\u7ed8\u5236\u7ebf\u3001\u7ed8\u5236\u77e9\u5f62\u3001\u7ed8\u5236\u56fe\u50cf\u3001\u7ed8\u5236\u591a\u8fb9\u5f62\u548c\u7ed8\u5236\u5b57\u5f62\u7b49\u57fa\u672c\u65b9\u6cd5\u3002\u4e00\u5f00\u59cb\uff0cMatplotlib \u4e3a\u6bcf\u4e2a\u989d\u5916\u7684\u540e\u7aef (\u6700\u65e9\u7684\u662f PostScript \u540e\u7aef\u548c GD \u540e\u7aef) \u90fd\u5b9e\u73b0\u4e86 GDK Drawable API\uff0c\u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u4e0e\u540e\u7aef\u76f8\u5173\u7684\u672c\u5730\u7ed8\u56fe\u547d\u4ee4\u3002\u8fd9\u590d\u6742\u5316\u4e86\u65b0\u540e\u7aef\u7684\u5b9e\u73b0\uff0c\u540e\u9762\u8fd9\u4e2a API \u968f\u540e\u88ab\u7b80\u5316\u4e86\uff0c\u8fd9\u4f7f\u5f97\u5c06 matplotlib \u79fb\u690d\u5230\u4e00\u4e2a\u65b0\u7684\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u6216\u6587\u4ef6\u89c4\u8303\u7684\u8fc7\u7a0b\u66f4\u52a0\u7b80\u5355\u3002\u901a\u8fc7\u8fd9\u79cd\u62bd\u8c61\uff0cMatplotlib \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u6e32\u67d3\u56fe\u50cf\u6216\u8f93\u51fa\u56fe\u50cf\u6587\u4ef6\u3002 \u6b64\u5916\uff0c\u8bb8\u591a\u6e32\u67d3\u64cd\u4f5c\u90fd\u4ea4\u7ed9\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u62bd\u8c61\u2014\u2014 GraphicsContextBase \u3002\u6b64\u62bd\u8c61\u4e3a\u5904\u7406\u989c\u8272\u3001\u7ebf\u6761\u6837\u5f0f\u3001\u5256\u9762\u7ebf\u6837\u5f0f\u3001\u6df7\u5408\u5c5e\u6027\u548c\u53cd\u952f\u8272\u9009\u9879\u7b49\u7684\u4ee3\u7801\u63d0\u4f9b\u4e86\u5e72\u51c0\u7684\u5206\u9694\u3002 Matplotlib \u7684\u4e00\u4e2a\u5f88\u597d\u7684\u8bbe\u8ba1\u51b3\u7b56\u662f\u4f7f\u7528C++ \u6a21\u677f\u5e93 Anti Grain Geometry \u6216 agg \u7684\u57fa\u4e8e\u6838\u5fc3\u50cf\u7d20\u7684 renderer\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0d\u540c\u5e73\u53f0\u4e4b\u95f4\u56fe\u50cf\u7684\u4e00\u81f4\u6027\u3002\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u6e32\u67d3\u6297\u952f\u9f7f\u76842D \u56fe\u5f62\u7684\u9ad8\u6027\u80fd\u5e93\uff0c\u53ef\u4ee5\u751f\u6210\u6709\u5438\u5f15\u529b\u7684\u56fe\u50cf\u3002Matplotlib \u652f\u6301\u5c06 agg \u540e\u7aef\u5448\u73b0\u7684\u50cf\u7d20\u7f13\u51b2\u63d2\u5165\u5230\u5176\u6240\u652f\u6301\u7684\u6bcf\u4e2a\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8de8 UI \u548c\u64cd\u4f5c\u7cfb\u7edf\u83b7\u5f97\u50cf\u7d20\u7cbe\u786e\u7684\u56fe\u5f62\u3002\u56e0\u4e3a\u8f93\u51faPNG\u65f6\uff0cMatplotlib \u4e5f\u4f7f\u7528 agg \u6e32\u67d3\u5668\uff0c\u6240\u4ee5\u786c\u62f7\u8d1d\u548c\u5c4f\u5e55\u663e\u793a\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u4f60\u6240\u770b\u5230\u7684\u5c31\u662f\u4ece\u7528\u6237\u754c\u9762\u3001\u64cd\u4f5c\u7cfb\u7edf\u548c PNG \u8f93\u51fa\u4e2d\u83b7\u5f97\u7684\u56fe\u50cf\u3002 Event Matplotlib \u540e\u7aef\u8fd8\u6709\u4e00\u4e9b\u903b\u8f91\u4e0e\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u5faa\u73af\u548c\u8ba1\u65f6\u6709\u5173\u3002\u8fd9\u4e9b\u903b\u8f91\u5206\u522b\u901a\u8fc7\u4e09\u4e2a\u57fa\u7c7b\uff08\u53ca\u5176\u6d3e\u751f\u7c7b\uff09\u5b9e\u73b0\uff1a Event \uff1a\u8fd9\u662f DrawEvent \u3001 MouseEvent \u548c KeyEvent \u7b49\u7684\u57fa\u7c7b ShowBase \uff1a\u8fd9\u662f GUI \u540e\u7aef\u7684\u6a21\u5757\u7ea7\u522b\u7684\u5b50\u7c7b TimerBase \uff1a\u8fd9\u662f TimerQT \u3001 TimerGTK3 \u548c TimerWx \u7684\u57fa\u7c7b Matplotlib Event \u6846\u67b6\u5c06\u8bf8\u5982 key-press-Event \u6216 mouse-motion-Event \u4e4b\u7c7b\u7684 UI \u4e8b\u4ef6\u6620\u5c04\u5230 matplotlib \u7c7b KeyEvent \u6216 MouseEvent \u3002\u7528\u6237\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4e8b\u4ef6\u8fde\u63a5\u5230\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u4e0e\u56fe\u5f62\u548c\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\uff08\u4f8b\u5982\uff0c\u5728Event\u53d1\u751f\u540e\uff0c\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a\u6570\u636e\u70b9\u6216\u4e00\u7ec4\u70b9\uff0c\u6216\u64cd\u4f5c\u56fe\u5f62\u67d0\u90e8\u5206\uff09\u3002 Matplotlib Event\u6846\u67b6\u5bf9\u5404\u4e2d\u5e95\u5c42 UI \u5de5\u5177\u5305\u7684\u4e8b\u4ef6\u6846\u67b6\u8fdb\u884c\u4e86\u62bd\u8c61\uff0c\u8fd9\u5141\u8bb8 matplotlib \u5f00\u53d1\u4eba\u5458\u548c\u6700\u7ec8\u7528\u6237\u4ee5 \u201cwrite once run everywhere\u201d \u7684\u65b9\u5f0f\u7f16\u5199 UI \u4e8b\u4ef6\u5904\u7406\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u56fe\u5f62\u5728\u6240\u6709\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u4e2d\u7684\u4ea4\u4e92\u5f0f\u5e73\u79fb\u548c\u7f29\u653e\uff0c\u90fd\u53ef\u4ee5\u5728 matplotlib \u4e8b\u4ef6\u6846\u67b6\u4e2d\u5b9e\u73b0\u3002 Fig 2 Artist layer matplotlib \u5927\u90e8\u5206\u4ee3\u7801\u90fd\u4f4d\u4e8eartist layer\u4e4b\u4e2d\uff0c\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570\u7e41\u7410\u7684\u5de5\u4f5c\u90fd\u5728\u6b64\u5c42\u5b8c\u6210\u3002 \u4f4d\u4e8e artist layer \u7684 Artist \u5bf9\u8c61\u77e5\u9053\u5982\u4f55\u4f7f\u7528 renderer \u5728\u753b\u5e03 FigureCanvas \u4e0a\u7ed8\u5236\u56fe\u5f62\u3002 Artist \u5bf9\u8c61\u548c backend layer \u4e4b\u95f4\u7684\u8026\u5408\u53d1\u751f\u5728 draw \u65b9\u6cd5\u4e2d\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u521b\u5efa\u4e86\u4e00\u4e2a\u6a21\u62df\u7c7b SomeArtist \uff0c\u5b83\u662f Artist \u7684\u5b50\u7c7b\uff0c SomeArtist \u5fc5\u987b\u5b9e\u73b0\u7684\u57fa\u672c\u65b9\u6cd5\u662f draw \uff0c draw \u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u53c2\u6570 renderer \uff0c\u8be5\u53c2\u6570\u7531 backend layer \u4f20\u8fc7\u6765\u3002 SomeArtist \u4e0d\u77e5\u9053\u6e32\u67d3\u5668\u5c06\u5728\u540e\u7aef (PDF\u3001 SVG\u3001 GTK+ DrawingArea, etc.) \u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u5b83\u77e5\u9053\u6e32\u67d3\u5668\u7684 API\uff0c\u5e76\u4f1a\u8c03\u7528\u9002\u5f53\u7684API ( draw_text \u6216 draw_path )\u3002\u7531\u4e8e\u6e32\u67d3\u5668\u6709\u4e00\u4e2a\u6307\u5411\u753b\u5e03\u7684\u6307\u9488\uff0c\u5e76\u4e14\u77e5\u9053\u5982\u4f55\u5728\u753b\u5e03\u4e0a\u7ed8\u5236\uff0c\u6240\u4ee5 draw \u65b9\u6cd5\u5c06 Artist \u7684\u62bd\u8c61\u8868\u793a\u8f6c\u6362\u4e3a\u50cf\u7d20\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u3001 SVG \u6587\u4ef6\u4e2d\u7684\u8def\u5f84\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u5177\u4f53\u8868\u793a\u3002 class SomeArtist ( Artist ): 'An example Artist that implements the draw method' def draw ( self , renderer ): \"\"\"Call the appropriate renderer methods to paint self onto canvas\"\"\" if not self . get_visible (): return # create some objects and use renderer to draw self here renderer . draw_path ( graphics_context , path , transform ) Figure \u4e2d\u6240\u6709\u53ef\u89c6\u7684\u7ec4\u4ef6\uff08\u4f8b\u5982 lines\u3001shapes\u3001axes\u3001text\u7b49\u7b49\uff09\u90fd\u662f Artist \u6d3e\u751f\u7c7b\u7684\u5b9e\u4f8b\u3002\u56fe3\u662f\u4e00\u4e2a Figure \u7684\u793a\u610f\u56fe\u3002 Artist \u57fa\u7c7b\u5305\u542b\u4e86\u6240\u6709 artist \u5171\u4eab\u7684\u5c5e\u6027\uff1a canvas \u548c artist \u5750\u6807\u7cfb\u7edf\u4e4b\u95f4\u7684\u8f6c\u6362 \u53ef\u89c6\u5316 \u5b9a\u4e49 artist \u53ef\u7ed8\u5236\u533a\u57df\u7684\u526a\u8f91\u6846 \u6807\u7b7e (Labels) \u7528\u4e8e\u5904\u7406\u7528\u6237\u4ea4\u4e92\u4e8b\u4ef6\u7684\u56de\u8c03\u6ce8\u518c\u5b9e\u4f8b\uff08\u6bd4\u5982\uff0c\u9f20\u6807\u5728 artist \u4e0a\u70b9\u51fb\u3001\u6311\u9009\u67d0\u4e9b artist \u7b49\u7b49\uff09 Primitives & Containers Artist \u5b50\u7c7b\u53ef\u5206\u4e3a\u4e24\u79cd\uff1aPrimitives \u548c Containers\u3002 Primitives \u662f\u57fa\u672c\u7684\u56fe\u5f62\u5bf9\u8c61\uff0cContainers \u7531\u591a\u4e2a Primitives \u5bf9\u8c61\u7ec4\u6210\u3002\u5b83\u4eec\u5206\u522b\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a Primitives Containers (Composite artists) Line2D Figure Shape (patch) class\uff0ce.g. Rectangle , Polygon , Ellipse , Circle , ArcText , Annotation , TextPath XAxis and YAxis AxesImage and FigureImage Axes , PolarAxes , HammerAxes , MollweideAxes , and LambertAxes Subplot Fig 3: A Figure \u5404\u4e2a Aritist \u5bf9\u8c61\u4ece\u5c5e\u5173\u7cfb Fig 4: The hierarchy of artist instances used to draw \u901a\u5e38\u6765\u8bf4\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a Figure \u5bf9\u8c61\u5e76\u5c06\u5176\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a Axes \u6216 Subplot \u5b9e\u4f8b\u3002 Axe \u548c Subplot \u5c06\u6839\u636e\u9700\u8981\u521b\u5efa Primitive \u5bf9\u8c61\uff0c\u56e0\u6b64\u7528\u6237\u4e0d\u5fc5\u624b\u52a8\u8ddf\u8e2a Primitive \u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u5e76\u5c06\u5176\u50a8\u5b58\u5230\u76f8\u5e94\u7684\u5bb9\u5668\u4e2d\u3002 \u5728\u6240\u6709 Containers \u4e2d\uff0c Axes \u7c7b\u662f\u6700\u91cd\u8981\u7684\u7c7b\u4e4b\u4e00\uff0c\u56e0\u4e3a Axes \u5b9e\u4f8b\u662f\u5927\u591a\u6570 matplotlib \u5bf9\u8c61\u7684\u76ee\u7684\u5730\uff08Primitives \u548c\u5176\u4ed6 Containers\uff09\uff0c\u5e76\u4e14\u5305\u542b\u8bb8\u591a\u8f85\u52a9\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa Primitive Artist \u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 Axes \u5b9e\u4f8b\u4e4b\u4e2d\u3002 \u9664\u4e86\u521b\u5efa Primitive \u4e4b\u5916\uff0c Axes \u548c Subplot \u8fd8\u5305\u542b\u4e86\u51c6\u5907 Primitive \u6240\u9700\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u6570\u636e\u5728\u521b\u5efaPrimitive\u65f6\u4f7f\u7528\u3002 Axes \u548c Subplot \u4f1a\u5c06\u8fd9\u4e9b\u6570\u636e\u50a8\u5b58\u5230\u5bf9\u5e94\u7684\u5bb9\u5668\u4e2d\u3002\u6b64\u5916\uff0c Axes \u5bf9\u8c61\u4e3a Figure \u8bbe\u7f6e\u4e86\u5750\u6807\u7cfb\uff0c\u5e76\u8ddf\u8e2a\u53ef\u4ee5\u8fde\u63a5\u5230 xlim_changed \u548c ylim_changed \u4e8b\u4ef6\u7684\u56de\u8c03\u3002\u56de\u8c03\u5728\u8c03\u7528\u65f6\u5c06 Axes \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002 Collections artist layer \u7684\u53e6\u4e00\u4e2a\u7ec4\u4ef6\u662f Collections \u3002\u4f7f\u7528 Collections \u7c7b\u53ef\u4ee5\u9ad8\u6548\u5730\u7ed8\u5236\u5927\u91cf\u7c7b\u4f3c\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u9700\u8981\u521b\u5efa\u6570\u4e07\u7684 circles , polygons , lines \u7b49\u5bf9\u8c61\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5c06\u8fd9\u4e9b\u5706\u5708\u3001\u591a\u8fb9\u5f62\u3001\u7ebf\u7b49\u653e\u5165 Collections \u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u53ef\u7528\u7684\u7c7b\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e PathCollection \uff0c CircleCollection \uff0c PolyCollection \uff0c EllipseCollection \uff0c LineCollection \u548c EventCollection \u3002 Fig 5 \u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u57fa\u7c7b\u53ef\u80fd\u81ea\u76f8\u77db\u76fe\u5730\u5305\u542b\u7236\u7c7b\u3002\u8fd9\u771f\u7684\u53ea\u662f\u5bf9\u5728\u521b\u5efa\u57fa\u7c7b\u65f6\u901a\u5e38\u521b\u5efa\u7684\u7236\u7c7b\u7684\u5f15\u7528\u3002\u5728\u8c03\u67e5 matplotlib \u5185\u90e8\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u975e\u5e38\u6709\u7528\u3002 \u4e0e\u903b\u8f91\u540e\u7aef\u56fe\u4e00\u6837\uff0cmatplotlib \u5185\u90e8\u4e0d\u662f\u8981\u5168\u9762\u7684\u3002\u7136\u800c\uff0c\u5b83\u7684\u76ee\u7684\u662f\u4e3a\u89c6\u89c9\u5bfc\u5411\u7684\u89c6\u89c9\u5bfc\u5411\uff0c\u5f53\u601d\u8003\u5982\u4f55\u7ed3\u5408\u4f4d\u5728\u4e00\u8d77\u7684\u6982\u5ff5\u5e2e\u52a9\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u88ab\u5e26\u5230\u4e86 matplotlib \u67b6\u6784\u7684\u6700\u540e\u4e00\u5c42\u3002 Scripting layer \u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u5728\u7f16\u5199 web \u5e94\u7528\u670d\u52a1\u5668\u3001UI \u5e94\u7528\u7a0b\u5e8f\u6216\u8005\u4e0e\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5171\u4eab\u7684\u811a\u672c\u65f6\uff0cbackend layer \u548c artist layer \u7684 API \u662f\u5408\u9002\u7f16\u7a0b\u8303\u578b\u3002\u4f46\u5bf9\u4e8e\u65e5\u5e38\u7528\u9014\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u5b9e\u9a8c\u5ba4\u79d1\u5b66\u5bb6\u3001\u6570\u636e\u79d1\u5b66\u5bb6\uff08\u975e\u4e13\u4e1a\u7a0b\u5e8f\u5458\uff09\u7684\u4ea4\u4e92\u5f0f\u63a2\u7d22\u6027\u5de5\u4f5c\u6765\u8bf4\uff0c\u8fd9\u4e9b API \u5728\u8bed\u6cd5\u4e0a\u6709\u70b9\u7e41\u91cd\u3002\u5927\u591a\u6570\u7528\u4e8e\u6570\u636e\u5206\u6790\u548c\u53ef\u89c6\u5316\u7684\u7279\u6b8a\u7528\u9014\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u8f7b\u4fbf\u7684\u811a\u672c\u63a5\u53e3\uff0c\u4ee5\u7b80\u5316\u5e38\u89c1\u4efb\u52a1\u3002Matplotlib \u5728\u5176 matplotlib.pyplot \u63a5\u53e3\u4e2d\u4e5f\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002 pyplot \u662f\u4e00\u4e2a\u6709\u72b6\u6001\u7684\u63a5\u53e3\uff0c\u5b83\u5904\u7406\u5927\u90e8\u5206\u6837\u677f\u6587\u4ef6\uff0c\u7528\u4e8e\u521b\u5efa\u56fe\u5f62\u548c\u8f74\uff0c\u5e76\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u60a8\u9009\u62e9\u7684\u540e\u7aef\uff0c\u5e76\u7ef4\u62a4\u8868\u793a\u5f53\u524d\u56fe\u5f62\u548c\u8f74\u7684\u6a21\u5757\u7ea7\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u6307\u5bfc\u7ed8\u56fe\u547d\u4ee4\u3002 pyplot \u6a21\u5757\u88ab\u5bfc\u5165\u65f6\uff0c\u5b83\u5c06\u89e3\u6790\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u3002\u7528\u6237\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\u9ed8\u8ba4\u7684\u540e\u7aef\u4ee5\u53ca\u5176\u4ed6\u8bbe\u7f6e\u3002\u5982\u679c\u662f\u50cf QtAgg \u8fd9\u6837\u7684\u7528\u6237\u754c\u9762\u540e\u7aef\uff0c pyplot \u811a\u672c\u5c06\u5bfc\u5165 GUI \u6846\u67b6\u5e76\u542f\u52a8\u4e00\u4e2a\u53ef\u5d4c\u5165\u7ed8\u56fe\u7684 Qt \u7a97\u53e3\u3002\u5982\u679c\u662f\u50cf Agg \u7684\u7eaf\u56fe\u50cf\u540e\u7aef\uff0c pyplot \u811a\u672c\u5c06\u751f\u6210 hard-copy \u7136\u540e\u9000\u51fa\u3002 \u9009\u62e9\u540e\u7aef\u540e\uff0c pyplot \u8c03\u7528\u4e00\u4e2a setup \u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u521b\u5efa figure \u7ba1\u7406\u5de5\u5382\u51fd\u6570\uff0c\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u5c06\u521b\u5efa\u9002\u5408\u6240\u9009\u540e\u7aef\u7684\u65b0 figure \u7ba1\u7406\u5668 \u51c6\u5907\u4e0e\u6240\u9009\u540e\u7aef\u5339\u914d\u7684\u7ed8\u56fe\u51fd\u6570 e.g. plot , gca , savefig , etc. \u8fd9\u4e9b\u662f\u901a\u8fc7 pyploy \u63a5\u53e3\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u4ee5\u8c03\u7528\u4ec0\u4e48\u51fd\u6570\u9700\u8981\u8003\u8651\u662f\u4ea4\u4e92\u5f0f\u540e\u7aef\u8fd8\u662f\u975e\u4ea4\u4e92\u540e\u7aef\uff0c\u8fd9\u53d6\u51b3\u4e8e setup \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u6807\u8bc6\u4e0e\u540e\u7aef mainloop \u51fd\u6570\u96c6\u6210\u7684\u53ef\u8c03\u7528\u51fd\u6570 \u4e3a\u6240\u9009\u540e\u7aef\u63d0\u4f9b\u6a21\u5757 \u5f53\u6267\u884c\u7ed8\u56fe\u547d\u4ee4\u65f6\uff08e.g. plot.plot() , plt.hist() , plt.title() , etc.\uff09\uff0c pyplot \u5c06\u68c0\u67e5\u5176\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u67e5\u770b\u5f53\u524d\u662f\u5426\u5b58\u5728 Figure \u5b9e\u4f8b\u3002\u5982\u679c\u5b58\u5728\uff0c\u5b83\u5c06\u63d0\u53d6\u5f53\u524d\u7684 Axes \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528 Axes.plot \u6216 Axes.hist \u4e4b\u7c7b\u7684API\u8fdb\u884c\u7ed8\u56fe\u3002\u5982\u679c\u5f53\u524d\u4e0d\u5b58\u5728 Figure \u5b9e\u4f8b\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a Figure \u5b9e\u4f8b \u548c Axes \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3a current\uff0c\u7136\u540e\u8c03\u7528 Axes \u7684API\u3002 \u5f53\u6267\u884c plt.show() \u547d\u4ee4\u65f6\uff0c\u8fd9\u5c06\u5f3a\u5236\u6e32\u67d3 Figure \uff0c\u5982\u679c\u7528\u6237\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u9ed8\u8ba4\u7684 GUI \u540e\u7aef\uff0c\u5c06\u542f\u52a8 GUI mainloop\uff0c\u5e76\u5c06\u6240\u6709\u56fe\u5f62\u521b\u5efa\u5230\u5c4f\u5e55\u3002 \u4e0b\u9762\u663e\u793a\u4e86 pyplot \u7ecf\u5e38\u4f7f\u7528\u7684 Line \u7ed8\u5236\u51fd\u6570 matplotlib.pyplot.plot \u7684\u7b80\u5316\u7248\u672c\uff0c\u8fd9\u76f4\u89c2\u5730\u8bf4\u660e matplotlib.pyplot.plot \u51fd\u6570\u5982\u4f55\u5728 matplotlib \u4e2d\u5c01\u88c5\u5bf9\u8c61\u548c\u529f\u80fd\u3002\u6240\u6709\u5176\u4ed6 pyplot \u811a\u672c\u63a5\u53e3\u529f\u80fd\u90fd\u9075\u5faa\u76f8\u540c\u7684\u8bbe\u8ba1\u3002 @autogen_docstring ( Axes . plot ) def plot ( * args , ** kwargs ): ax = gca () ret = ax . plot ( * args , ** kwargs ) draw_if_interactive () return ret Fig 6 Math Text \u7531\u4e8e Matplotlib \u7684\u7528\u6237\u901a\u5e38\u5177\u6709\u79d1\u5b66\u80cc\u666f\uff0c\u6240\u4ee5\u76f4\u63a5\u5728\u56fe\u4e0a\u653e\u7f6e\u683c\u5f0f\u4e30\u5bcc\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u662f\u5f88\u6709\u7528\u7684\u3002\u6765\u81ea\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Donald Knuth \u6559\u6388\u7684 $\\TeX$ \u6392\u7248\u7cfb\u7edf\u53ef\u80fd\u662f\u6700\u6d41\u884c\u7684\u6570\u5b66\u6392\u7248\u7cfb\u7edf\uff0c\u56e0\u6b64 Matplotlib \u4e5f\u4f7f\u7528 $\\TeX$ \u8bed\u6cd5\u6765\u8f93\u5165\u516c\u5f0f\u3002 Matplotlib \u63d0\u4f9b\u4e86\u4e24\u79cd\u6e32\u67d3\u6570\u5b66\u516c\u5f0f\u7684\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u662f usetex \uff0c\u5b83\u4f7f\u7528\u7528\u6237\u8ba1\u7b97\u673a\u4e2d\u7684\u5b8c\u6574 TeX \u5f15\u64ce\u6765\u6e32\u67d3\u6570\u5b66\u516c\u5f0f\u3002TeX \u4ee5\u5176\u539f\u59cb\u7684 DVI \uff08\u4e0e\u8bbe\u5907\u65e0\u5173\uff09\u683c\u5f0f\u8f93\u51fa\u516c\u5f0f\u4e2d\u5b57\u7b26\u548c\u884c\u7684\u4f4d\u7f6e\u3002\u7136\u540e Matplotlib \u89e3\u6790 DVI \u6587\u4ef6\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\uff08\u7528\u4e8e\u8f93\u51fa\u7684\uff09\u540e\u7aef\u7684\u4e00\u7ec4\u7ed8\u56fe\u547d\u4ee4\uff0c\u7136\u540e\u76f4\u63a5\u6e32\u67d3\u5728\u56fe\u7247\u4e0a\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u6666\u6da9\u7684\u6570\u5b66\u516c\u5f0f\u8bed\u6cd5\u3002\u4f46\u662f\uff0c\u5b83\u8981\u6c42\u7528\u6237\u5b8c\u6574\u5b89\u88c5\u4e00\u4e2a\u53ef\u7528\u7684 Tex \u7cfb\u7edf\u3002\u56e0\u6b64\uff0cMatplotlib \u4e5f\u63d0\u4f9b\u5b83\u5185\u90e8\u7684\u6570\u5b66\u6e32\u67d3\u5f15\u64ce\uff0c\u79f0\u4e3a mathtext \u3002 mathtext \u662f TeX \u6570\u5b66\u6e32\u67d3\u5f15\u64ce\u7684\u76f4\u63a5\u63a5\u53e3\uff0c\u7531\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u89e3\u6790\u5668\u63d0\u4f9b\u3002\u8be5\u89e3\u6790\u5668\u4f7f\u7528 pyparsing [ McG07 ] \u89e3\u6790\u6846\u67b6\u7f16\u5199\u3002 \u8fd9\u4e2a\u63a5\u53e3\u662f\u57fa\u4e8e TeX \u6e90\u4ee3\u7801 [ Knu86 ] \u7f16\u5199\u7684\u3002\u8fd9\u4e2a\u7b80\u5355\u7684\u89e3\u6790\u5668\u6784\u5efa\u4e00\u4e2a box \u548c glue\uff0c\u7136\u540e\u7531\u5e03\u5c40\u5f15\u64ce\u5e03\u5c40\u3002\u867d\u7136\u5305\u542b\u4e86\u5b8c\u6574\u7684 TeX \u6570\u5b66\u6e32\u67d3\u5f15\u64ce\uff0c\u4f46\u662f\u6ca1\u6709\u5305\u542b\u5927\u91cf\u7684\u7b2c\u4e09\u65b9 TeX \u548c LaTeX \u6570\u5b66\u5e93\u3002 mathtext \u6839\u636e\u9700\u8981\u79fb\u690d\u8fd9\u4e9b\u6570\u5b66\u5e93\u7684\u7279\u6027\uff0c\u9996\u8981\u76ee\u6807\u662f\u79fb\u690d\u7ecf\u5e38\u4f7f\u7528\u7684\uff0c\u4f46\u975e\u7279\u5b9a\u5b66\u79d1\u7684\u7279\u6027\u3002\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u3001\u8f7b\u91cf\u7ea7\u7684\u65b9\u6cd5\u7528\u6765\u5448\u73b0\u5927\u90e8\u5206\u6570\u5b66\u516c\u5f0f\u3002 References Matplotlib - The Python 2D Plotting Library The Architecture of Open Source Applications Volume Il. Structure Scale and a Few More Fearless Hacks Hello Matplotlib\uff01 Matplotlib 3-tiered architecture ( Class Diagram (UML)) Convert Markdown to HTML \u8111\u79d1\u5b66\u535a\u58eb\u7533\u8bf7\u6307\u5357 REST IN PEACE: JOHN HUNTER, MATPLOTLIB AUTHOR, FATHER HAS PASSED AWAY. History eht-imaging CASE STUDY: THE FIRST IMAGE OF A BLACK HOLE Matplotlib Tutorial","title":"10.1.\u67b6\u6784"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#introduction","text":"Matplotlib \u662f\u4e00\u4e2a Python 2D\u7ed8\u56fe\u5e93\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5f97\u5230 Python \u79d1\u5b66\u8ba1\u7b97\u793e\u533a\u7684\u5168\u529b\u652f\u6301\u3002\u8be5\u9879\u76ee\u7531\u751f\u7269\u5b66\u5bb6 John Hunter \u4e8e2003\u5e74\u53d1\u8d77\uff0c\u6700\u521d\u7684\u4f5c\u8005\u5927\u90e8\u5206\u90fd\u662f\u5728\u7f16\u7a0b\u9886\u57df\u81ea\u5b66\u6210\u624d\u7684\u79d1\u5b66\u5bb6\uff0c\u73b0\u5728\u9879\u76ee\u7531\u5f00\u6e90\u793e\u533a\u5f00\u53d1\u3002 Matplotlib \u73b0\u5728\u5df2\u7ecf\u88ab\u5f88\u591a\u4eba\u7528\u4e8e\u5206\u6790\u548c\u7814\u7a76\u76ee\u7684\uff0c\u751a\u81f3\u88ab NASA \u7528\u4e8e\u51e4\u51f0\u53f7\u706b\u661f\u63a2\u6d4b\u5668\u7684\u6570\u636e\u53ef\u89c6\u5316\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4eba\u7c7b\u6355\u6349\u7684\u7b2c\u4e00\u5f20 \u9ed1\u6d1e\u7167\u7247 \u5b8c\u5168\u4f7f\u7528 Python \u5408\u6210\uff0c\u5176\u4e2d\u5c31\u7528\u5230\u4e86 Matplotlib\u3002","title":"Introduction"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#origin-of-matplotlib","text":"Matplotlib \u7684\u8d77\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230 John Hunter \u8bd5\u56fe\u628a\u4ed6\u81ea\u5df1\u548c\u7814\u7a76\u766b\u75eb\u7684\u540c\u4e8b\u4ece\u5206\u6790\u76ae\u8d28\u8111\u7535\u56fe(ECoG)\u7684\u4e13\u6709\u8f6f\u4ef6 (Proprietary software) \u4e2d\u89e3\u653e\u51fa\u6765\u3002\u5728\u5f53\u65f6\uff0c\u4e13\u6709\u7684\u6570\u636e\u53ef\u89c6\u5316\u8f6f\u4ef6\u662f\u4e00\u79cd\u6709\u9650\u7684\u8d44\u6e90\u3002John Hunter \u5de5\u4f5c\u7684\u5b9e\u9a8c\u5ba4\u53ea\u6709\u4e00\u4e2a\u8f6f\u4ef6\u8bb8\u53ef\u8bc1\uff0c\u5404\u79cd\u5404\u6837\u7684\u7814\u7a76\u751f\u3001\u533b\u5b66\u751f\u3001\u535a\u58eb\u540e\u3001\u5b9e\u4e60\u751f\u548c\u8c03\u67e5\u4eba\u5458\u8f6e\u6d41\u5206\u4eab\u786c\u4ef6\u5bc6\u94a5\u3002John Hunter \u60f3\u627e\u5230\u4e00\u4e2a\u53ef\u4f9b\u6574\u4e2a\u56e2\u961f\u4f7f\u7528\u7684\u66ff\u4ee3\u5de5\u5177\u3002\u5728\u5f53\u65f6\uff0cMATLAB \u5df2\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5728\u751f\u7269\u533b\u5b66\u754c\u7684\u6570\u636e\u5206\u6790\u548c\u53ef\u89c6\u5316\uff0c\u56e0\u6b64 Hunter \u5f00\u59cb\u7740\u624b\u57fa\u4e8e MATLAB \u5f00\u53d1\u4e00\u4e2a\u5de5\u5177\u7528\u6765\u53d6\u4ee3\u4e13\u7528\u8f6f\u4ef6\uff0c\u5e76\u53d6\u5f97\u4e86\u4e00\u4e9b\u6210\u529f\u3002\u8fd9\u4e2a\u7248\u672c\u53ef\u4ee5\u88ab\u591a\u4e2a\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u548c\u6269\u5c55\u3002\u7136\u800c\uff0c\u766b\u75eb\u624b\u672f\u60a3\u8005\u7684\u771f\u5b9e\u533b\u7597\u6570\u636e\u5177\u6709\u591a\u79cd\u6570\u636e\u6a21\u5f0f (CT\u3001MRI\u3001ECoG\u3001EEG)\uff0c\u5176\u590d\u6742\u6027\u8ba9 MATLAB \u5728\u6570\u636e\u7ba1\u7406\u65b9\u9762\u53d7\u5230\u6311\u6218\u3002\u7531\u4e8e\u4e0d\u6ee1\u610f MATLAB \u5bf9\u8fd9\u9879\u4efb\u52a1\u7684\u9002\u7528\u6027\uff0cHunter \u5f00\u59cb\u5728\u7528\u6237\u754c\u9762\u5de5\u5177\u5305 GTK + \u7684\u57fa\u7840\u4e0a\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684 Python \u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u5f53\u65f6 GTK + \u662f\u9886\u5148\u7684 Linux \u684c\u9762\u89c6\u7a97\u7cfb\u7edf\u3002 GTK\uff08\u539f\u540dGTK+\uff09\u6700\u521d\u662fGIMP\u7684\u4e13\u7528\u5f00\u53d1\u5e93\uff08GIMP Toolkit\uff09\uff0c\u540e\u6765\u53d1\u5c55\u4e3aUnix-like\u7cfb\u7edf\u4e0b\u5f00\u53d1\u56fe\u5f62\u754c\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u6d41\u5f00\u53d1\u5de5\u5177\u4e4b\u4e00\u3002GTK\u662f\u81ea\u7531\u8f6f\u4ef6\uff0c\u5e76\u4e14\u662fGNU\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002\u81ea2019\u5e742\u67086\u65e5\u8d77\uff0cGTK+\u6539\u540d\u4e3aGTK\u3002GTK\u4f7f\u7528C\u8bed\u8a00\u5f00\u53d1\uff0c\u4f46\u662f\u5176\u8bbe\u8ba1\u8005\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u6280\u672f\uff0c\u4e5f\u63d0\u4f9b\u4e86\u5176\u4ed6\u8bed\u8a00\uff08\u5982Python\uff09\u7684\u63a5\u53e3\u3002 Matplotlib \u6700\u521d\u662f\u4e3a\u8fd9\u4e2a GTK+ \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684 EEG/ECoG \u53ef\u89c6\u5316\u5de5\u5177\uff0c\u8fd9\u4e2a\u7528\u4f8b\u6307\u5bfc\u4e86\u5b83\u7684\u539f\u59cb\u67b6\u6784\u3002Matplotlib \u6700\u521d\u7684\u8bbe\u8ba1\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u76ee\u7684\uff1a\u4f5c\u4e3a\u4ea4\u4e92\u5f0f\u547d\u4ee4\u9a71\u52a8\u7684\u56fe\u5f62\u751f\u6210\u5de5\u5177\u7684\u66ff\u4ee3\u54c1\uff0cMATLAB \u5728\u8fd9\u4e00\u70b9\u4e0a\u505a\u5f97\u975e\u5e38\u597d\u3002MATLAB \u7684\u8bbe\u8ba1\u4f7f\u52a0\u8f7d\u6570\u636e\u6587\u4ef6\u548c\u7ed8\u56fe\u7684\u4efb\u52a1\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u76f4\u63a5\uff0c\u7136\u800c\u5b8c\u6574\u7684\u9762\u5411\u5bf9\u8c61 API \u5728\u8bed\u6cd5\u4e0a\u8fc7\u4e8e\u7e41\u91cd\u3002\u56e0\u6b64 matplotlib \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u72b6\u6001\u7684\u811a\u672c\u63a5\u53e3\uff0c\u7528\u4e8e\u5feb\u901f\u7b80\u5355\u5730\u751f\u6210\u7c7b\u4f3c\u4e8e MATLAB \u7684\u56fe\u5f62\u3002","title":"Origin of matplotlib"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#overview-of-matplotlib-architecture","text":"Matplotlib \u4e2d\uff0c\u5305\u542b\u548c\u7ba1\u7406\u7ed9\u5b9a\u56fe\u5f62\u4e2d\u6240\u6709\u5143\u7d20\u7684\u9876\u7ea7 matplotlib \u5bf9\u8c61\u79f0\u4e3a Figure \u3002\u5f53\u524d Matplotlib \u4f53\u7cfb\u7ed3\u6784\u56f4\u7ed5\u7740\u7528\u6237\u521b\u5efa\u3001\u8868\u793a\uff08\u6e32\u67d3\uff09\u548c\u66f4\u65b0 Figure \u5bf9\u8c61\u6240\u9700\u7684\u64cd\u4f5c\u5c55\u5f00\u3002\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u5b8c\u6210\u8fd9\u4e00\u7cfb\u5217\u64cd\u4f5c\u7684\u4f53\u7cfb\u7ed3\u6784\u5206\u4e3a\u4e09\u5c42\uff0c\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5806\u6808\u3002\u8fd9\u4e09\u5c42\u4ece\u4e0b\u5230\u4e0a\u5206\u522b\u662f\uff1abackend\u3001artist \u548cscripting\u3002\u4e0a\u5c42\u77e5\u9053\u5982\u4f55\u4e0e\u4e0b\u9762\u7684\u5c42\u8fdb\u884c\u901a\u4fe1\uff0c\u4f46\u4e0b\u5c42\u5374\u4e0d\u77e5\u9053\u4e0a\u5c42\u3002 Fig 1 Matplotlib \u662f\u4e00\u4e2a\u7ed8\u56fe\u5e93\uff0c\u5b83\u4f9d\u8d56\u4e8e\u67d0\u4e9b\u540e\u7aef\u6765\u6e32\u67d3\u56fe\u7247\u3002backend \u5c42\u53ef\u4ee5\u4e0e\u4e0d\u540c\u7684\u8fd0\u884c\u73af\u5883 (backend) \u76f4\u63a5\u4ea4\u4e92\uff0c\u4e3a\u4e0a\u5c42\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u4e00\u4e2a\u56fe\u5f62\u9700\u8981\u7531\u591a\u4e2a\u5bf9\u8c61\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5e94\u8be5\u88ab\u5355\u72ec\u4fee\u6539\uff0c\u5e76\u4e14\u4fee\u6539\u7684\u884c\u4e3a\u5bf9\u6574\u4e2a\u56fe\u7247\u7684\u5f71\u54cd\u662f\u6b63\u9762\u7684\u3001\u53ef\u9884\u6d4b\u7684\u3002artist \u5c42\u5305\u542b\u4e86\u4e00\u5f20\u56fe\u4e2d\u6bcf\u4e2a\u53ef\u89c6\u7ec4\u4ef6\u7684\u62bd\u8c61\u3002\u7531\u4e8e\u8fd9\u5c42\u4e0e\u53ef\u89c6\u5316\u9ad8\u5ea6\u76f8\u5173\uff0c\u8be5\u5c42\u88ab\u8ba4\u4e3a\u662f\u521b\u5efa\u89c6\u89c9\u827a\u672f\u7684\u4e00\u822c\u6027\u6982\u5ff5\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3aartist layer\u3002 \u6700\u540e\uff0c\u8fd8\u9700\u8981\u652f\u6301\u4ee5\u7f16\u7a0b\u7684\u65b9\u5f0f\u4e0e\u56fe\u7247\u4ea4\u4e92\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u5c3d\u53ef\u80fd\u5e72\u51c0\u3001\u76f4\u89c2\u7684\u8bed\u6cd5\u53bb\u64cd\u4f5c\u56fe\u5f62\u3002\u8fd9\u5c42\u88ab\u79f0\u4e3a\u811a\u672c\u5c42\u3002","title":"Overview of matplotlib Architecture"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#backend-layer","text":"matplotlib \u7684\u540e\u7aef\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a User interface backends (interactive) Hardcopy backends (non-interactive) \u4f7f\u7528User interface\u540e\u7aef\u65f6\uff0c Figure \u4f1a\u88ab\u6e32\u67d3\u5230\u7528\u6237\u754c\u9762\u7a97\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 User interface backend \u7684 GUI \u4e8b\u4ef6\uff08\u5982\u952e\u76d8\u548c\u9f20\u6807\u8f93\u5165\uff09 \u4ea4\u4e92\u5730\u4fee\u6539\u56fe\u7247\u3002\u4f7f\u7528Hardcopy backend\u65f6\uff0c Figure \u4f1a\u88ab\u4fdd\u5b58\u4e3a\u56fe\u7247\u6587\u4ef6\u3002\u5206\u522b\u6709\u5982\u4e0b\u7684User interface backend \u548c Hardcopy backend\uff1a User interface backend Hardcopy backend GTK 2.x and GTK 3.x PS wxWidgets PDF Tk SVG Qt4 and Qt5 PNG Mac OS X Cocoa \u6839\u636e\u662f\u5426\u652f\u6301raster graphics\u548cvector graphics\uff0cHardcopy backend \u53c8\u53ef\u4ee5\u5206\u4e3a\uff1a \u4ec5\u652f\u6301raster graphics \u4ec5\u652f\u6301vector graphics \u652f\u6301\u4ee5\u4e0a\u4e24\u8005 \u4ea4\u4e92\u5f0f\u540e\u7aef\u548c\u975e\u4ea4\u4e92\u540e\u7aef\u5efa\u7acb\u5728\u4e00\u4e9b\u6838\u5fc3\u7684\u62bd\u8c61\u4e4b\u4e0a\uff0c\u8fd9\u4e9b\u57fa\u7c7b\u5982\u4e0b\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u540e\u7aef\uff0c\u8fd9\u4e9b\u57fa\u7c7b\u6709\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\u3002 FigureCanvasBase and FigureManagerBase RendererBase and GraphicsContextBase Event , ShowBase , and Timer","title":"Backend layer"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#figurecanvas","text":"FigureCanvasBase \u662f User interface backend \u548c Hardcopy backend \u90fd\u4f7f\u7528\u7684\u57fa\u7c7b\uff0c\u5b83\u8868\u793a\u7528\u4e8e\u5448\u73b0\u56fe\u5f62\u7684\u753b\u5e03\u3002\u5176\u804c\u8d23\u5305\u62ec\uff1a \u6301\u6709Figure\u7684\u5f15\u7528 \u4f7f\u7528Figure\u66f4\u65b0\u753b\u5e03 \u5b9a\u4e49\u8fd0\u884c\u65f6\u5c06\u88ab\u6ce8\u518c\u7684\u4e8b\u4ef6\u65b9\u6cd5 \u5c06\u539f\u751fbackend\u7684\u4e8b\u4ef6\u8f6c\u6362\u4e3a matplotlib \u4e8b\u4ef6\u62bd\u8c61\u6846\u67b6 \u5b9a\u4e49\u7ed8\u5236\u65b9\u6cd5\u7528\u4e8e\u6e32\u67d3\u56fe\u5f62 \u542f\u52a8\u548c\u505c\u6b62\u975e GUI \u4e8b\u4ef6\u5faa\u73af\u7684\u65b9\u6cd5 \u4f7f\u7528 Hardcopy backend \u65f6\uff0c FigureCanvasBase \u53ef\u4ee5\u6ce8\u518c\u540e\u7aef\u652f\u6301\u7684\u56fe\u7247\u6587\u4ef6\u7c7b\u578b\u3002\u5f53\u4f7f\u7528interface backends\u65f6\uff0c FigureCanvasBase \u63d0\u4f9b\u5c06\u753b\u5e03\u63d2\u5165backend \u7a97\u53e3\u7684\u65b9\u6cd5\u3002 \u5728 pyplot \u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0cmatplotlib \u4f1a\u4f7f\u7528 FigureManagerBase \u7c7b\u3002\u8be5\u7c7b\u5305\u88c5\u4e86 FigureCanvasBase \u7c7b\u4ee5\u53ca\u5404\u79cd GUI backend \u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u66f4\u8f7b\u677e\u5730\u5448\u73b0\u56fe\u5f62\u548c\u63a5\u53e3\u3002","title":"FigureCanvas"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#renderer","text":"\u5728 matplotlib \u4e2d\uff0crenderer \u7684\u5de5\u4f5c\u662f\u63d0\u4f9b\u4e00\u4e2a\u5e95\u5c42\u7684\u7ed8\u56fe\u63a5\u53e3\uff0c\u7528\u4e8e\u5728\u753b\u5e03\u4e0a\u6dfb\u52a0\u58a8\u6c34\u3002 \u5982\u4e0a\u6240\u8ff0\uff0c\u539f\u59cb matplotlib \u5e94\u7528\u7a0b\u5e8f\u662f GTK+ \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684 ECoG \u67e5\u770b\u5668\uff0c\u56e0\u6b64\uff0c\u539f\u59cb\u8bbe\u8ba1\u7684\u5927\u90e8\u5206\u7075\u611f\u6765\u81ea\u5f53\u65f6\u53ef\u7528\u7684 gdk/GTK+ API\u3002\u539f\u59cb\u7684 renderer API \u662f\u53d7 GDK Drawable \u63a5\u53e3\u7684\u542f\u53d1\uff0c\u5b83\u5b9e\u73b0\u4e86\u7ed8\u5236\u70b9\u3001\u7ed8\u5236\u7ebf\u3001\u7ed8\u5236\u77e9\u5f62\u3001\u7ed8\u5236\u56fe\u50cf\u3001\u7ed8\u5236\u591a\u8fb9\u5f62\u548c\u7ed8\u5236\u5b57\u5f62\u7b49\u57fa\u672c\u65b9\u6cd5\u3002\u4e00\u5f00\u59cb\uff0cMatplotlib \u4e3a\u6bcf\u4e2a\u989d\u5916\u7684\u540e\u7aef (\u6700\u65e9\u7684\u662f PostScript \u540e\u7aef\u548c GD \u540e\u7aef) \u90fd\u5b9e\u73b0\u4e86 GDK Drawable API\uff0c\u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u4e0e\u540e\u7aef\u76f8\u5173\u7684\u672c\u5730\u7ed8\u56fe\u547d\u4ee4\u3002\u8fd9\u590d\u6742\u5316\u4e86\u65b0\u540e\u7aef\u7684\u5b9e\u73b0\uff0c\u540e\u9762\u8fd9\u4e2a API \u968f\u540e\u88ab\u7b80\u5316\u4e86\uff0c\u8fd9\u4f7f\u5f97\u5c06 matplotlib \u79fb\u690d\u5230\u4e00\u4e2a\u65b0\u7684\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u6216\u6587\u4ef6\u89c4\u8303\u7684\u8fc7\u7a0b\u66f4\u52a0\u7b80\u5355\u3002\u901a\u8fc7\u8fd9\u79cd\u62bd\u8c61\uff0cMatplotlib \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u6e32\u67d3\u56fe\u50cf\u6216\u8f93\u51fa\u56fe\u50cf\u6587\u4ef6\u3002 \u6b64\u5916\uff0c\u8bb8\u591a\u6e32\u67d3\u64cd\u4f5c\u90fd\u4ea4\u7ed9\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u62bd\u8c61\u2014\u2014 GraphicsContextBase \u3002\u6b64\u62bd\u8c61\u4e3a\u5904\u7406\u989c\u8272\u3001\u7ebf\u6761\u6837\u5f0f\u3001\u5256\u9762\u7ebf\u6837\u5f0f\u3001\u6df7\u5408\u5c5e\u6027\u548c\u53cd\u952f\u8272\u9009\u9879\u7b49\u7684\u4ee3\u7801\u63d0\u4f9b\u4e86\u5e72\u51c0\u7684\u5206\u9694\u3002 Matplotlib \u7684\u4e00\u4e2a\u5f88\u597d\u7684\u8bbe\u8ba1\u51b3\u7b56\u662f\u4f7f\u7528C++ \u6a21\u677f\u5e93 Anti Grain Geometry \u6216 agg \u7684\u57fa\u4e8e\u6838\u5fc3\u50cf\u7d20\u7684 renderer\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0d\u540c\u5e73\u53f0\u4e4b\u95f4\u56fe\u50cf\u7684\u4e00\u81f4\u6027\u3002\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u6e32\u67d3\u6297\u952f\u9f7f\u76842D \u56fe\u5f62\u7684\u9ad8\u6027\u80fd\u5e93\uff0c\u53ef\u4ee5\u751f\u6210\u6709\u5438\u5f15\u529b\u7684\u56fe\u50cf\u3002Matplotlib \u652f\u6301\u5c06 agg \u540e\u7aef\u5448\u73b0\u7684\u50cf\u7d20\u7f13\u51b2\u63d2\u5165\u5230\u5176\u6240\u652f\u6301\u7684\u6bcf\u4e2a\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8de8 UI \u548c\u64cd\u4f5c\u7cfb\u7edf\u83b7\u5f97\u50cf\u7d20\u7cbe\u786e\u7684\u56fe\u5f62\u3002\u56e0\u4e3a\u8f93\u51faPNG\u65f6\uff0cMatplotlib \u4e5f\u4f7f\u7528 agg \u6e32\u67d3\u5668\uff0c\u6240\u4ee5\u786c\u62f7\u8d1d\u548c\u5c4f\u5e55\u663e\u793a\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u4f60\u6240\u770b\u5230\u7684\u5c31\u662f\u4ece\u7528\u6237\u754c\u9762\u3001\u64cd\u4f5c\u7cfb\u7edf\u548c PNG \u8f93\u51fa\u4e2d\u83b7\u5f97\u7684\u56fe\u50cf\u3002","title":"Renderer"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#event","text":"Matplotlib \u540e\u7aef\u8fd8\u6709\u4e00\u4e9b\u903b\u8f91\u4e0e\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u5faa\u73af\u548c\u8ba1\u65f6\u6709\u5173\u3002\u8fd9\u4e9b\u903b\u8f91\u5206\u522b\u901a\u8fc7\u4e09\u4e2a\u57fa\u7c7b\uff08\u53ca\u5176\u6d3e\u751f\u7c7b\uff09\u5b9e\u73b0\uff1a Event \uff1a\u8fd9\u662f DrawEvent \u3001 MouseEvent \u548c KeyEvent \u7b49\u7684\u57fa\u7c7b ShowBase \uff1a\u8fd9\u662f GUI \u540e\u7aef\u7684\u6a21\u5757\u7ea7\u522b\u7684\u5b50\u7c7b TimerBase \uff1a\u8fd9\u662f TimerQT \u3001 TimerGTK3 \u548c TimerWx \u7684\u57fa\u7c7b Matplotlib Event \u6846\u67b6\u5c06\u8bf8\u5982 key-press-Event \u6216 mouse-motion-Event \u4e4b\u7c7b\u7684 UI \u4e8b\u4ef6\u6620\u5c04\u5230 matplotlib \u7c7b KeyEvent \u6216 MouseEvent \u3002\u7528\u6237\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4e8b\u4ef6\u8fde\u63a5\u5230\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u4e0e\u56fe\u5f62\u548c\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\uff08\u4f8b\u5982\uff0c\u5728Event\u53d1\u751f\u540e\uff0c\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a\u6570\u636e\u70b9\u6216\u4e00\u7ec4\u70b9\uff0c\u6216\u64cd\u4f5c\u56fe\u5f62\u67d0\u90e8\u5206\uff09\u3002 Matplotlib Event\u6846\u67b6\u5bf9\u5404\u4e2d\u5e95\u5c42 UI \u5de5\u5177\u5305\u7684\u4e8b\u4ef6\u6846\u67b6\u8fdb\u884c\u4e86\u62bd\u8c61\uff0c\u8fd9\u5141\u8bb8 matplotlib \u5f00\u53d1\u4eba\u5458\u548c\u6700\u7ec8\u7528\u6237\u4ee5 \u201cwrite once run everywhere\u201d \u7684\u65b9\u5f0f\u7f16\u5199 UI \u4e8b\u4ef6\u5904\u7406\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u56fe\u5f62\u5728\u6240\u6709\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u4e2d\u7684\u4ea4\u4e92\u5f0f\u5e73\u79fb\u548c\u7f29\u653e\uff0c\u90fd\u53ef\u4ee5\u5728 matplotlib \u4e8b\u4ef6\u6846\u67b6\u4e2d\u5b9e\u73b0\u3002 Fig 2","title":"Event"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#artist-layer","text":"matplotlib \u5927\u90e8\u5206\u4ee3\u7801\u90fd\u4f4d\u4e8eartist layer\u4e4b\u4e2d\uff0c\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570\u7e41\u7410\u7684\u5de5\u4f5c\u90fd\u5728\u6b64\u5c42\u5b8c\u6210\u3002 \u4f4d\u4e8e artist layer \u7684 Artist \u5bf9\u8c61\u77e5\u9053\u5982\u4f55\u4f7f\u7528 renderer \u5728\u753b\u5e03 FigureCanvas \u4e0a\u7ed8\u5236\u56fe\u5f62\u3002 Artist \u5bf9\u8c61\u548c backend layer \u4e4b\u95f4\u7684\u8026\u5408\u53d1\u751f\u5728 draw \u65b9\u6cd5\u4e2d\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u521b\u5efa\u4e86\u4e00\u4e2a\u6a21\u62df\u7c7b SomeArtist \uff0c\u5b83\u662f Artist \u7684\u5b50\u7c7b\uff0c SomeArtist \u5fc5\u987b\u5b9e\u73b0\u7684\u57fa\u672c\u65b9\u6cd5\u662f draw \uff0c draw \u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u53c2\u6570 renderer \uff0c\u8be5\u53c2\u6570\u7531 backend layer \u4f20\u8fc7\u6765\u3002 SomeArtist \u4e0d\u77e5\u9053\u6e32\u67d3\u5668\u5c06\u5728\u540e\u7aef (PDF\u3001 SVG\u3001 GTK+ DrawingArea, etc.) \u7ed8\u5236\u56fe\u50cf\uff0c\u4f46\u5b83\u77e5\u9053\u6e32\u67d3\u5668\u7684 API\uff0c\u5e76\u4f1a\u8c03\u7528\u9002\u5f53\u7684API ( draw_text \u6216 draw_path )\u3002\u7531\u4e8e\u6e32\u67d3\u5668\u6709\u4e00\u4e2a\u6307\u5411\u753b\u5e03\u7684\u6307\u9488\uff0c\u5e76\u4e14\u77e5\u9053\u5982\u4f55\u5728\u753b\u5e03\u4e0a\u7ed8\u5236\uff0c\u6240\u4ee5 draw \u65b9\u6cd5\u5c06 Artist \u7684\u62bd\u8c61\u8868\u793a\u8f6c\u6362\u4e3a\u50cf\u7d20\u7f13\u51b2\u533a\u4e2d\u7684\u989c\u8272\u3001 SVG \u6587\u4ef6\u4e2d\u7684\u8def\u5f84\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u5177\u4f53\u8868\u793a\u3002 class SomeArtist ( Artist ): 'An example Artist that implements the draw method' def draw ( self , renderer ): \"\"\"Call the appropriate renderer methods to paint self onto canvas\"\"\" if not self . get_visible (): return # create some objects and use renderer to draw self here renderer . draw_path ( graphics_context , path , transform ) Figure \u4e2d\u6240\u6709\u53ef\u89c6\u7684\u7ec4\u4ef6\uff08\u4f8b\u5982 lines\u3001shapes\u3001axes\u3001text\u7b49\u7b49\uff09\u90fd\u662f Artist \u6d3e\u751f\u7c7b\u7684\u5b9e\u4f8b\u3002\u56fe3\u662f\u4e00\u4e2a Figure \u7684\u793a\u610f\u56fe\u3002 Artist \u57fa\u7c7b\u5305\u542b\u4e86\u6240\u6709 artist \u5171\u4eab\u7684\u5c5e\u6027\uff1a canvas \u548c artist \u5750\u6807\u7cfb\u7edf\u4e4b\u95f4\u7684\u8f6c\u6362 \u53ef\u89c6\u5316 \u5b9a\u4e49 artist \u53ef\u7ed8\u5236\u533a\u57df\u7684\u526a\u8f91\u6846 \u6807\u7b7e (Labels) \u7528\u4e8e\u5904\u7406\u7528\u6237\u4ea4\u4e92\u4e8b\u4ef6\u7684\u56de\u8c03\u6ce8\u518c\u5b9e\u4f8b\uff08\u6bd4\u5982\uff0c\u9f20\u6807\u5728 artist \u4e0a\u70b9\u51fb\u3001\u6311\u9009\u67d0\u4e9b artist \u7b49\u7b49\uff09","title":"Artist layer"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#primitives-containers","text":"Artist \u5b50\u7c7b\u53ef\u5206\u4e3a\u4e24\u79cd\uff1aPrimitives \u548c Containers\u3002 Primitives \u662f\u57fa\u672c\u7684\u56fe\u5f62\u5bf9\u8c61\uff0cContainers \u7531\u591a\u4e2a Primitives \u5bf9\u8c61\u7ec4\u6210\u3002\u5b83\u4eec\u5206\u522b\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a Primitives Containers (Composite artists) Line2D Figure Shape (patch) class\uff0ce.g. Rectangle , Polygon , Ellipse , Circle , ArcText , Annotation , TextPath XAxis and YAxis AxesImage and FigureImage Axes , PolarAxes , HammerAxes , MollweideAxes , and LambertAxes Subplot Fig 3: A Figure \u5404\u4e2a Aritist \u5bf9\u8c61\u4ece\u5c5e\u5173\u7cfb Fig 4: The hierarchy of artist instances used to draw \u901a\u5e38\u6765\u8bf4\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a Figure \u5bf9\u8c61\u5e76\u5c06\u5176\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a Axes \u6216 Subplot \u5b9e\u4f8b\u3002 Axe \u548c Subplot \u5c06\u6839\u636e\u9700\u8981\u521b\u5efa Primitive \u5bf9\u8c61\uff0c\u56e0\u6b64\u7528\u6237\u4e0d\u5fc5\u624b\u52a8\u8ddf\u8e2a Primitive \u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u5e76\u5c06\u5176\u50a8\u5b58\u5230\u76f8\u5e94\u7684\u5bb9\u5668\u4e2d\u3002 \u5728\u6240\u6709 Containers \u4e2d\uff0c Axes \u7c7b\u662f\u6700\u91cd\u8981\u7684\u7c7b\u4e4b\u4e00\uff0c\u56e0\u4e3a Axes \u5b9e\u4f8b\u662f\u5927\u591a\u6570 matplotlib \u5bf9\u8c61\u7684\u76ee\u7684\u5730\uff08Primitives \u548c\u5176\u4ed6 Containers\uff09\uff0c\u5e76\u4e14\u5305\u542b\u8bb8\u591a\u8f85\u52a9\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa Primitive Artist \u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 Axes \u5b9e\u4f8b\u4e4b\u4e2d\u3002 \u9664\u4e86\u521b\u5efa Primitive \u4e4b\u5916\uff0c Axes \u548c Subplot \u8fd8\u5305\u542b\u4e86\u51c6\u5907 Primitive \u6240\u9700\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u6570\u636e\u5728\u521b\u5efaPrimitive\u65f6\u4f7f\u7528\u3002 Axes \u548c Subplot \u4f1a\u5c06\u8fd9\u4e9b\u6570\u636e\u50a8\u5b58\u5230\u5bf9\u5e94\u7684\u5bb9\u5668\u4e2d\u3002\u6b64\u5916\uff0c Axes \u5bf9\u8c61\u4e3a Figure \u8bbe\u7f6e\u4e86\u5750\u6807\u7cfb\uff0c\u5e76\u8ddf\u8e2a\u53ef\u4ee5\u8fde\u63a5\u5230 xlim_changed \u548c ylim_changed \u4e8b\u4ef6\u7684\u56de\u8c03\u3002\u56de\u8c03\u5728\u8c03\u7528\u65f6\u5c06 Axes \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002","title":"Primitives &amp; Containers"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#collections","text":"artist layer \u7684\u53e6\u4e00\u4e2a\u7ec4\u4ef6\u662f Collections \u3002\u4f7f\u7528 Collections \u7c7b\u53ef\u4ee5\u9ad8\u6548\u5730\u7ed8\u5236\u5927\u91cf\u7c7b\u4f3c\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u9700\u8981\u521b\u5efa\u6570\u4e07\u7684 circles , polygons , lines \u7b49\u5bf9\u8c61\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5c06\u8fd9\u4e9b\u5706\u5708\u3001\u591a\u8fb9\u5f62\u3001\u7ebf\u7b49\u653e\u5165 Collections \u4e2d\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u53ef\u7528\u7684\u7c7b\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e PathCollection \uff0c CircleCollection \uff0c PolyCollection \uff0c EllipseCollection \uff0c LineCollection \u548c EventCollection \u3002 Fig 5 \u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u57fa\u7c7b\u53ef\u80fd\u81ea\u76f8\u77db\u76fe\u5730\u5305\u542b\u7236\u7c7b\u3002\u8fd9\u771f\u7684\u53ea\u662f\u5bf9\u5728\u521b\u5efa\u57fa\u7c7b\u65f6\u901a\u5e38\u521b\u5efa\u7684\u7236\u7c7b\u7684\u5f15\u7528\u3002\u5728\u8c03\u67e5 matplotlib \u5185\u90e8\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u975e\u5e38\u6709\u7528\u3002 \u4e0e\u903b\u8f91\u540e\u7aef\u56fe\u4e00\u6837\uff0cmatplotlib \u5185\u90e8\u4e0d\u662f\u8981\u5168\u9762\u7684\u3002\u7136\u800c\uff0c\u5b83\u7684\u76ee\u7684\u662f\u4e3a\u89c6\u89c9\u5bfc\u5411\u7684\u89c6\u89c9\u5bfc\u5411\uff0c\u5f53\u601d\u8003\u5982\u4f55\u7ed3\u5408\u4f4d\u5728\u4e00\u8d77\u7684\u6982\u5ff5\u5e2e\u52a9\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u88ab\u5e26\u5230\u4e86 matplotlib \u67b6\u6784\u7684\u6700\u540e\u4e00\u5c42\u3002","title":"Collections"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#scripting-layer","text":"\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u5728\u7f16\u5199 web \u5e94\u7528\u670d\u52a1\u5668\u3001UI \u5e94\u7528\u7a0b\u5e8f\u6216\u8005\u4e0e\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5171\u4eab\u7684\u811a\u672c\u65f6\uff0cbackend layer \u548c artist layer \u7684 API \u662f\u5408\u9002\u7f16\u7a0b\u8303\u578b\u3002\u4f46\u5bf9\u4e8e\u65e5\u5e38\u7528\u9014\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u5b9e\u9a8c\u5ba4\u79d1\u5b66\u5bb6\u3001\u6570\u636e\u79d1\u5b66\u5bb6\uff08\u975e\u4e13\u4e1a\u7a0b\u5e8f\u5458\uff09\u7684\u4ea4\u4e92\u5f0f\u63a2\u7d22\u6027\u5de5\u4f5c\u6765\u8bf4\uff0c\u8fd9\u4e9b API \u5728\u8bed\u6cd5\u4e0a\u6709\u70b9\u7e41\u91cd\u3002\u5927\u591a\u6570\u7528\u4e8e\u6570\u636e\u5206\u6790\u548c\u53ef\u89c6\u5316\u7684\u7279\u6b8a\u7528\u9014\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u8f7b\u4fbf\u7684\u811a\u672c\u63a5\u53e3\uff0c\u4ee5\u7b80\u5316\u5e38\u89c1\u4efb\u52a1\u3002Matplotlib \u5728\u5176 matplotlib.pyplot \u63a5\u53e3\u4e2d\u4e5f\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002 pyplot \u662f\u4e00\u4e2a\u6709\u72b6\u6001\u7684\u63a5\u53e3\uff0c\u5b83\u5904\u7406\u5927\u90e8\u5206\u6837\u677f\u6587\u4ef6\uff0c\u7528\u4e8e\u521b\u5efa\u56fe\u5f62\u548c\u8f74\uff0c\u5e76\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u60a8\u9009\u62e9\u7684\u540e\u7aef\uff0c\u5e76\u7ef4\u62a4\u8868\u793a\u5f53\u524d\u56fe\u5f62\u548c\u8f74\u7684\u6a21\u5757\u7ea7\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u6307\u5bfc\u7ed8\u56fe\u547d\u4ee4\u3002 pyplot \u6a21\u5757\u88ab\u5bfc\u5165\u65f6\uff0c\u5b83\u5c06\u89e3\u6790\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u3002\u7528\u6237\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\u9ed8\u8ba4\u7684\u540e\u7aef\u4ee5\u53ca\u5176\u4ed6\u8bbe\u7f6e\u3002\u5982\u679c\u662f\u50cf QtAgg \u8fd9\u6837\u7684\u7528\u6237\u754c\u9762\u540e\u7aef\uff0c pyplot \u811a\u672c\u5c06\u5bfc\u5165 GUI \u6846\u67b6\u5e76\u542f\u52a8\u4e00\u4e2a\u53ef\u5d4c\u5165\u7ed8\u56fe\u7684 Qt \u7a97\u53e3\u3002\u5982\u679c\u662f\u50cf Agg \u7684\u7eaf\u56fe\u50cf\u540e\u7aef\uff0c pyplot \u811a\u672c\u5c06\u751f\u6210 hard-copy \u7136\u540e\u9000\u51fa\u3002 \u9009\u62e9\u540e\u7aef\u540e\uff0c pyplot \u8c03\u7528\u4e00\u4e2a setup \u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u521b\u5efa figure \u7ba1\u7406\u5de5\u5382\u51fd\u6570\uff0c\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u5c06\u521b\u5efa\u9002\u5408\u6240\u9009\u540e\u7aef\u7684\u65b0 figure \u7ba1\u7406\u5668 \u51c6\u5907\u4e0e\u6240\u9009\u540e\u7aef\u5339\u914d\u7684\u7ed8\u56fe\u51fd\u6570 e.g. plot , gca , savefig , etc. \u8fd9\u4e9b\u662f\u901a\u8fc7 pyploy \u63a5\u53e3\u76f4\u63a5\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u4ee5\u8c03\u7528\u4ec0\u4e48\u51fd\u6570\u9700\u8981\u8003\u8651\u662f\u4ea4\u4e92\u5f0f\u540e\u7aef\u8fd8\u662f\u975e\u4ea4\u4e92\u540e\u7aef\uff0c\u8fd9\u53d6\u51b3\u4e8e setup \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u6807\u8bc6\u4e0e\u540e\u7aef mainloop \u51fd\u6570\u96c6\u6210\u7684\u53ef\u8c03\u7528\u51fd\u6570 \u4e3a\u6240\u9009\u540e\u7aef\u63d0\u4f9b\u6a21\u5757 \u5f53\u6267\u884c\u7ed8\u56fe\u547d\u4ee4\u65f6\uff08e.g. plot.plot() , plt.hist() , plt.title() , etc.\uff09\uff0c pyplot \u5c06\u68c0\u67e5\u5176\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u67e5\u770b\u5f53\u524d\u662f\u5426\u5b58\u5728 Figure \u5b9e\u4f8b\u3002\u5982\u679c\u5b58\u5728\uff0c\u5b83\u5c06\u63d0\u53d6\u5f53\u524d\u7684 Axes \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528 Axes.plot \u6216 Axes.hist \u4e4b\u7c7b\u7684API\u8fdb\u884c\u7ed8\u56fe\u3002\u5982\u679c\u5f53\u524d\u4e0d\u5b58\u5728 Figure \u5b9e\u4f8b\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a Figure \u5b9e\u4f8b \u548c Axes \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3a current\uff0c\u7136\u540e\u8c03\u7528 Axes \u7684API\u3002 \u5f53\u6267\u884c plt.show() \u547d\u4ee4\u65f6\uff0c\u8fd9\u5c06\u5f3a\u5236\u6e32\u67d3 Figure \uff0c\u5982\u679c\u7528\u6237\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u9ed8\u8ba4\u7684 GUI \u540e\u7aef\uff0c\u5c06\u542f\u52a8 GUI mainloop\uff0c\u5e76\u5c06\u6240\u6709\u56fe\u5f62\u521b\u5efa\u5230\u5c4f\u5e55\u3002 \u4e0b\u9762\u663e\u793a\u4e86 pyplot \u7ecf\u5e38\u4f7f\u7528\u7684 Line \u7ed8\u5236\u51fd\u6570 matplotlib.pyplot.plot \u7684\u7b80\u5316\u7248\u672c\uff0c\u8fd9\u76f4\u89c2\u5730\u8bf4\u660e matplotlib.pyplot.plot \u51fd\u6570\u5982\u4f55\u5728 matplotlib \u4e2d\u5c01\u88c5\u5bf9\u8c61\u548c\u529f\u80fd\u3002\u6240\u6709\u5176\u4ed6 pyplot \u811a\u672c\u63a5\u53e3\u529f\u80fd\u90fd\u9075\u5faa\u76f8\u540c\u7684\u8bbe\u8ba1\u3002 @autogen_docstring ( Axes . plot ) def plot ( * args , ** kwargs ): ax = gca () ret = ax . plot ( * args , ** kwargs ) draw_if_interactive () return ret Fig 6","title":"Scripting layer"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#math-text","text":"\u7531\u4e8e Matplotlib \u7684\u7528\u6237\u901a\u5e38\u5177\u6709\u79d1\u5b66\u80cc\u666f\uff0c\u6240\u4ee5\u76f4\u63a5\u5728\u56fe\u4e0a\u653e\u7f6e\u683c\u5f0f\u4e30\u5bcc\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u662f\u5f88\u6709\u7528\u7684\u3002\u6765\u81ea\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Donald Knuth \u6559\u6388\u7684 $\\TeX$ \u6392\u7248\u7cfb\u7edf\u53ef\u80fd\u662f\u6700\u6d41\u884c\u7684\u6570\u5b66\u6392\u7248\u7cfb\u7edf\uff0c\u56e0\u6b64 Matplotlib \u4e5f\u4f7f\u7528 $\\TeX$ \u8bed\u6cd5\u6765\u8f93\u5165\u516c\u5f0f\u3002 Matplotlib \u63d0\u4f9b\u4e86\u4e24\u79cd\u6e32\u67d3\u6570\u5b66\u516c\u5f0f\u7684\u65b9\u6cd5\u3002\u7b2c\u4e00\u4e2a\u662f usetex \uff0c\u5b83\u4f7f\u7528\u7528\u6237\u8ba1\u7b97\u673a\u4e2d\u7684\u5b8c\u6574 TeX \u5f15\u64ce\u6765\u6e32\u67d3\u6570\u5b66\u516c\u5f0f\u3002TeX \u4ee5\u5176\u539f\u59cb\u7684 DVI \uff08\u4e0e\u8bbe\u5907\u65e0\u5173\uff09\u683c\u5f0f\u8f93\u51fa\u516c\u5f0f\u4e2d\u5b57\u7b26\u548c\u884c\u7684\u4f4d\u7f6e\u3002\u7136\u540e Matplotlib \u89e3\u6790 DVI \u6587\u4ef6\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\uff08\u7528\u4e8e\u8f93\u51fa\u7684\uff09\u540e\u7aef\u7684\u4e00\u7ec4\u7ed8\u56fe\u547d\u4ee4\uff0c\u7136\u540e\u76f4\u63a5\u6e32\u67d3\u5728\u56fe\u7247\u4e0a\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u6666\u6da9\u7684\u6570\u5b66\u516c\u5f0f\u8bed\u6cd5\u3002\u4f46\u662f\uff0c\u5b83\u8981\u6c42\u7528\u6237\u5b8c\u6574\u5b89\u88c5\u4e00\u4e2a\u53ef\u7528\u7684 Tex \u7cfb\u7edf\u3002\u56e0\u6b64\uff0cMatplotlib \u4e5f\u63d0\u4f9b\u5b83\u5185\u90e8\u7684\u6570\u5b66\u6e32\u67d3\u5f15\u64ce\uff0c\u79f0\u4e3a mathtext \u3002 mathtext \u662f TeX \u6570\u5b66\u6e32\u67d3\u5f15\u64ce\u7684\u76f4\u63a5\u63a5\u53e3\uff0c\u7531\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u89e3\u6790\u5668\u63d0\u4f9b\u3002\u8be5\u89e3\u6790\u5668\u4f7f\u7528 pyparsing [ McG07 ] \u89e3\u6790\u6846\u67b6\u7f16\u5199\u3002 \u8fd9\u4e2a\u63a5\u53e3\u662f\u57fa\u4e8e TeX \u6e90\u4ee3\u7801 [ Knu86 ] \u7f16\u5199\u7684\u3002\u8fd9\u4e2a\u7b80\u5355\u7684\u89e3\u6790\u5668\u6784\u5efa\u4e00\u4e2a box \u548c glue\uff0c\u7136\u540e\u7531\u5e03\u5c40\u5f15\u64ce\u5e03\u5c40\u3002\u867d\u7136\u5305\u542b\u4e86\u5b8c\u6574\u7684 TeX \u6570\u5b66\u6e32\u67d3\u5f15\u64ce\uff0c\u4f46\u662f\u6ca1\u6709\u5305\u542b\u5927\u91cf\u7684\u7b2c\u4e09\u65b9 TeX \u548c LaTeX \u6570\u5b66\u5e93\u3002 mathtext \u6839\u636e\u9700\u8981\u79fb\u690d\u8fd9\u4e9b\u6570\u5b66\u5e93\u7684\u7279\u6027\uff0c\u9996\u8981\u76ee\u6807\u662f\u79fb\u690d\u7ecf\u5e38\u4f7f\u7528\u7684\uff0c\u4f46\u975e\u7279\u5b9a\u5b66\u79d1\u7684\u7279\u6027\u3002\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u3001\u8f7b\u91cf\u7ea7\u7684\u65b9\u6cd5\u7528\u6765\u5448\u73b0\u5927\u90e8\u5206\u6570\u5b66\u516c\u5f0f\u3002","title":"Math Text"},{"location":"Matplotlib/10.1.%E6%9E%B6%E6%9E%84.html#references","text":"Matplotlib - The Python 2D Plotting Library The Architecture of Open Source Applications Volume Il. Structure Scale and a Few More Fearless Hacks Hello Matplotlib\uff01 Matplotlib 3-tiered architecture ( Class Diagram (UML)) Convert Markdown to HTML \u8111\u79d1\u5b66\u535a\u58eb\u7533\u8bf7\u6307\u5357 REST IN PEACE: JOHN HUNTER, MATPLOTLIB AUTHOR, FATHER HAS PASSED AWAY. History eht-imaging CASE STUDY: THE FIRST IMAGE OF A BLACK HOLE Matplotlib Tutorial","title":"References"},{"location":"Matplotlib/10.2.plot.html","text":"plot plot plt.plot - \u7ed8\u5236\u6298\u7ebf\u56fe\u6216\u6563\u70b9\u56fe plt . plot ( args , scalex = True , scaley = True , data = None , kwargs ) Plot y versus x as lines and/or markers. \u4f7f\u7528\u683c\u5f0f\u5982\u4e0b\uff0c\u70b9\u6216\u7ebf\u6761\u7684\u5750\u6807\u7cfb\u7531 x \u3001 y \u7ed9\u51fa\u3002\uff1a plot ([ x ], y , [ fmt ], data = None , ** kwargs ) plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) fmt \uff1a\u8be5\u53c2\u6570\u662f\u5b9a\u4e49 color\u3001marker\u3001linestyle \u7684\u4fbf\u6377\u65b9\u5f0f\uff0c\u5b83\u4f7f\u7528\u5b57\u7b26\u4e32\u4f5c\u4e3a\u503c\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a plot ( x , y , 'bo' ) # plot x and y using blue circle markers plot ( y , 'r+' ) # ditto, but with red plusses \u4e5f\u53ef\u4ee5\u4f7f\u7528 .Line2D \u5c5e\u6027\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u6765\u66f4\u597d\u5730\u63a7\u5236\u5916\u89c2\u3002Line properties \u548c fmt \u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff1a plot ( x , y , 'go--' , linewidth = 2 , markersize = 12 ) plot ( x , y , color = 'green' , marker = 'o' , linestyle = 'dashed' , linewidth = 2 , markersize = 12 ) Line properties \u4e0e fmt \u51b2\u7a81\u65f6\uff0c\u5173\u952e\u5b57\u53c2\u6570\u4f18\u5148\u3002 color / c \uff1astr\uff1b\u7ebf\u6761\u989c\u8272\u3002 linestyle / ls \uff1astr\uff1b\u7ebf\u6761\u6837\u5f0f\u3002 linewidth / lw \uff1afloat\uff1b\u7ebf\u6761\u5bbd\u5ea6\u3002 alpha \uff1afloat\uff1b0-1\u6bd4\u4f8b\u7684\u900f\u660e\u5ea6\u3002 label \uff1astr\uff1b\u56fe\u4f8b\u3002 dash_capstyle \uff1astr\uff1b['butt' | 'round' | 'projecting']\u3002\u865a\u7ebf\u7684\u7aef\u70b9\u6837\u5f0f\u3002 dash_joinstyle \uff1astr\uff1b['miter' | 'round' | 'bevel']\u3002\u865a\u7ebf\u7684\u8fde\u63a5\u6837\u5f0f\u3002 solid_capstyle \uff1astr\uff1b['butt' | 'round' | 'projecting']\u3002\u5b9e\u7ebf\u7684\u7aef\u70b9\u6837\u5f0f\u3002 solid_joinstyle \uff1astr\uff1b['miter' | 'round' | 'bevel']\u3002\u5b9e\u7ebf\u7684\u8fde\u63a5\u6837\u5f0f\u3002 marker \uff1astr\uff1bmarker\u7684\u6837\u5f0f\u3002 markersize / ms \uff1amarker\u7684\u5927\u5c0f\u3002 fillstyle \uff1astr\uff1b['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']\u3002marker\u80cc\u666f\u8272\u7684\u586b\u5145\u4f4d\u7f6e\u3002 markeredgecolor / mec \uff1amarker\u7684\u80cc\u666f\u8fb9\u7f18\u989c\u8272\u3002 markeredgewidth / mew \uff1afloat\uff1bmarker\u7684\u5bbd\u5ea6\u3002 markerfacecolor / mfc \uff1amarker\u7684\u80cc\u666f\u586b\u5145\u533a\u57df\u7684\u989c\u8272\u3002 markerfacecoloralt / mfcalt \uff1amarker\u7684\u80cc\u666f\u975e\u586b\u5145\u533a\u57df\u7684\u989c\u8272\uff0c\u586b\u5145\u533a\u57df\u7531 fillstyle \u51b3\u5b9a\u3002 visible \uff1abool\uff1bLine2D\u662f\u5426\u53ef\u89c1\u3002 plt.scatter - \u7ed8\u5236\u6563\u70b9\u56fe plt . scatter ( x , y , s = None , c = None , marker = None , cmap = None , norm = None , vmin = None , vmax = None , alpha = None , linewidths = None , verts =< deprecated parameter > , edgecolors = None , plotnonfinite = False , data = None , kwargs ) plt.xlabel - \u8bbe\u7f6e X \u8f74\u6807\u7b7e plt . xlabel ( xlabel , fontdict = None , labelpad = None , loc = None , kwargs ) loc : {'left', 'center', 'right'}, default::rc: xaxis.labellocation plt.ylabel - \u8bbe\u7f6e Y \u8f74\u6807\u7b7e plt . ylabel ( ylabel , fontdict = None , labelpad = None , loc = None , kwargs ) loc : {'left', 'center', 'right'}, default::rc: yaxis.labellocation plt.xlim - \u8bbe\u7f6e/\u83b7\u53d6 X \u8f74\u8303\u56f4 plt . xlim ( * args , ** kwargs ) xlim(left, right) : set the xlim to left, right left, right = xlim() : return the current xlim plt.ylim - \u8bbe\u7f6e/\u83b7\u53d6 Y \u8f74\u8303\u56f4 plt . ylim ( * args , ** kwargs ) ylim(bottom, top) : set the ylim to bottom, top bottom, top = ylim() : return the current ylim plt.xticks - \u8bbe\u7f6e/\u83b7\u53d6 X \u8f74\u523b\u5ea6\u7684\u6807\u7b7e plt . xticks ( ticks = None , labels = None , kwargs ) xticks(np.arange(3), ['Tom', 'Dick', 'Sue'], rotation=20) : Set text labels and properties. xticks([]) : Disable xticks. locs, labels = xticks() : Get the current locations and labels. plt.yticks - \u8bbe\u7f6e/\u83b7\u53d6 Y \u8f74\u523b\u5ea6\u7684\u6807\u7b7e plt . yticks ( ticks = None , labels = None , kwargs ) plt.legend - \u8bbe\u7f6e\u56fe\u4f8b plt . legend ( args , kwargs ) \u6240\u6709 Artist \u7c7b\u7684 label \u9ed8\u8ba4\u503c\u4e3a None\uff0c\u56e0\u6b64\u5728\u6ca1\u6709 label \u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528 \u201cAxes.legend\u201d \u4e0d\u7ed8\u5236\u4efb\u4f55\u56fe\u4f8b\u3002 \u4f7f\u7528 legend( ) \u6dfb\u52a0\u56fe\u4f8b\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a \u5982\u679c artist \u5bf9\u8c61\u5df2\u7ecf\u8bbe\u7f6e\u4e86 label \u5c5e\u6027\uff0c\u5219\u4f7f\u7528\u5df2\u6709\u7684 label\u3002\u53ef\u4ee5\u5728\u521b\u5efa artist \u5bf9\u8c61\u65f6\u5c31\u6307\u5b9a label\uff0c\u6216\u8005\u8c03\u7528 artist \u5bf9\u8c61\u7684\u65b9\u6cd5 Artist.set_label ine , = ax . plot ([ 1 , 2 , 3 ], label = 'Inline label' ) ax . legend () # Or line . set_label ( 'Label via method' ) line , = ax . plot ([ 1 , 2 , 3 ]) ax . legend () \u53ea\u5728 legend API \u6807\u8bb0\u73b0\u6709\u7684\u7ed8\u56fe\u5bf9\u8c61\uff0c\u53ea\u4f20\u5165 label\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff08\u53ef\u80fd\u5bb9\u6613\u5f04\u9519\u56fe\u4f8b\u7684\u987a\u5e8f\uff09\uff0c ax . plot ([ 1 , 2 , 3 ]) ax . legend ([ 'A simple line' ]) # Or plt . plot ( x1 , y1 , \"g1\" , x2 , y2 , 'r1' , x3 , y3 , \"k1\" ) plt . legend ([ \"1\" , \"2\" , \"3\" ]) \u53ea\u5728 legend API \u6807\u8bb0\u73b0\u6709\u7684\u7ed8\u56fe\u5bf9\u8c61\uff0c\u540c\u65f6\u4f20\u5165 iterable of artists \u548c iterable of labels\u3002 plt . legend (( line1 , line2 , line3 ), ( 'label1' , 'label2' , 'label3' )) plt . legend ( handles = ( line1 , line2 , line3 ), labels = ( 'label1' , 'label2' , 'label3' )) \u4e3b\u8981\u53c2\u6570\u6709\u4e09\u4e2a\uff1a loc \u3001 handles \u3001 label \u3002 loc \uff1aint or string or pair of floats;default: 'upper right'. legeng\u7684\u4f4d\u7f6e\uff1b\u53ef\u7528\u503c\u5982\u4e0b\uff1a Location String Location Code Note ================================================ 'best' 0 \u81ea\u52a8\u5206\u914d\u6700\u4f73\u4f4d\u7f6e 'upper right' 1 'upper left' 2 'lower left' 3 'lower right' 4 'right' 5 'center left' 6 'center right' 7 'lower center' 8 'upper center' 9 'center' 10 handles \uff1a\u5305\u542b.Artist\u7c7b\u7684\u5bf9\u8c61\u7684\u5e8f\u5217\uff0c\u8be5\u53c2\u6570\u548c labels \u53c2\u6570\u4e00\u8d77\u4f7f\u7528\u6765\u63a7\u5236\u56fe\u4f8b handle \u7684\u957f\u5ea6\u548c labels \u7684\u957f\u5ea6\u5fc5\u987b\u4e00\u81f4\uff0c\u82e5\u4e0d\u4e00\u81f4\uff0c\u4f1a\u88ab\u622a\u4e3a\u8f83\u77ed\u7684\u3002 label \uff1a\u5b57\u7b26\u4e32\u7684\u5e8f\u5217\u3002 \u5176\u4ed6\u53c2\u6570\uff08\u4e0d\u662f\u6240\u6709\u7684 artist \u5bf9\u8c61\u90fd\u53ef\u4ee5\u7528 legend \u7684\u6240\u6709\u53c2\u6570\uff09 bbox_to_anchor \uff1a .BboxBase or pair of floats. \u5728 bbox_transform \u5750\u6807\u7cfb\uff08\u9ed8\u8ba4\u4e3aAxes coordinates\uff09\u4e2d\u6307\u5b9a\u56fe\u4f8b\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u5c06\u539f\u672c\u653e\u5728\u53f3\u4e0a\u89d2\u7684\u56fe\u4f8b\u5c45\u4e2d\u4e8eaxes\uff1a loc='upper right', bbox_to_anchor=(0.5, 0.5) bbox_transform \uff1aNone or :class: matplotlib.transforms.Transform . \u8fb9\u754c\u6846\u7684\u53d8\u6362\uff08\u4e5f\u5c31\u662f bbox_to_anchor \u7684\u5750\u6807\u7cfb\uff09\u3002 ncol \uff1ainteger. legend\u7684\u5217\u6570\uff0c\u9ed8\u8ba4\u4e3a1\u3002 columnspacing \uff1afloat or None. \u5217\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002Measured in font-size units. \u5f53\u53c2\u6570 nol \u4e0d\u7b49\u4e8e1\u65f6\u8d77\u4f5c\u7528\u3002 prop \uff1aNone or :class: matplotlib.font_manager.FontProperties or dict. legend\u7684\u5b57\u4f53\u5c5e\u6027\uff0c\u5982\u679c\u4e3aNone\uff08\u9ed8\u8ba4\uff09\uff0c\u5f53\u524d:data: matplotlib.rcParams \u4f1a\u88ab\u4f7f\u7528\u3002 fontsize \uff1aint or float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}. \u63a7\u5236legend\u7684\u5b57\u4f53\u5927\u5c0f\u3002\u82e5\u4f7f\u7528\u6570\u503c\uff0c\u5219\u662f\u4ee5 point\u4e3a\u5355\u4f4d\u7684\u7edd\u5bf9\u5927\u5c0f\uff1b\u82e5\u4f7f\u7528 string\uff0c\u5219\u5b57\u4f53\u5927\u5c0f\u76f8\u5bf9\u4e8e\u5f53\u524d\u9ed8\u8ba4\u5b57\u4f53\u3002\u8be5\u53c2\u6570\u5728 prop \u53c2\u6570\u4e0d\u6307\u5b9a\u65f6\u8d77\u4f5c\u7528\u3002 markerscale \uff1aNone or int or float. legend \u56fe\u6807\u7684\u76f8\u5bf9\u5927\u5c0f\uff0c\u4e0e\u539f\u59cb\u7684\u56fe\u6807\u4f5c\u6bd4\u8f83\uff0c\u9ed8\u8ba4\u4e3a None\u3002 markerfirst \uff1abool. \u82e5\u4e3a True\uff0c\u5219 legend marker \u4f4d\u4e8e legend label \u7684\u5de6\u8fb9\uff0c\u9ed8\u8ba4\u4e3a True\u3002 numpoints \uff1aNone or int. legend marker\u7684\u6570\u91cf\u3002 title \uff1a\u56fe\u4f8b\u7684\u6807\u9898\u3002 shadow \uff1aNone or bool. \u63a7\u5236\u662f\u5426\u5728\u56fe\u4f8b\u540e\u9762\u7ed8\u5236\u9634\u5f71\u3002Default is None , which will take the value from:rc: legend.shadow . framealpha \uff1aNone or float. \u56fe\u4f8b\u80cc\u666f\u7684\u900f\u660e\u5ea6\uff08\u5305\u62ec\u56fe\u4f8b\u7684\u8fb9\u6846\uff09Default is None \u3002 edgecolor \uff1aNone or \"inherit\" or a color spec. \u63a7\u5236\u56fe\u4f8b\u80cc\u666f\u8fb9\u7f18\uff08\u4e5f\u5c31\u662f\u8fb9\u6846\uff09\u7684\u989c\u8272\u3002 facecolor \uff1aNone or \"inherit\" or a color spec. \u63a7\u5236\u56fe\u4f8b\u7684\u80cc\u666f\u989c\u8272\u3002 labelspacing \uff1afloat or None. \u56fe\u4f8b\u6761\u76ee\u4e4b\u95f4\u7684\u5782\u76f4\u7a7a\u95f4\uff08vertical space\uff09\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 borderpad \uff1afloat or None. \u56fe\u4f8b\u8fb9\u6846\u5185\u7684\u5c0f\u6570\u7a7a\u767d\uff08\u4e5f\u5c31\u662f\u56fe\u4f8b\u8ddd\u79bb\u8fb9\u6846\u7684\u8ddd\u79bb\uff09\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 handletextpad \uff1afloat or None. legend handle\u548clegend label\u4e4b\u95f4\u7684\u7a7a\u767d\u586b\u5145\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 handlelength \uff1afloat or None. legend handles\u7684\u957f\u5ea6\uff08\u4e5f\u5c31\u662f\uff09\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 borderaxespad \uff1afloat or None. The pad between the axes and legend border.Measured in font-size units. plt.text - \u6dfb\u52a0\u6587\u672c\u5230 axes plt . text ( x , y , s , fontdict = None , kwargs ) plt.annotate - \u5728\u6307\u5b9a\u70b9\u6dfb\u52a0\u6ce8\u89e3 plt . annotate ( text , xy , args , kwargs ) text \uff1a\u6ce8\u89e3\u7684\u6587\u5b57\uff0c s \u662f\u8be5\u53c2\u6570\u5df2\u5f03\u7528\u7684\u540c\u4e49\u8bcd\u3002 xy \uff1a(float, float). \u6807\u6ce8\u70b9\u7684\u5750\u6807\uff0c\u5750\u6807\u7cfb\u53d6\u51b3\u4e8e xycoords \u53c2\u6570\u3002 xytext \uff1a(float, float). \u6ce8\u89e3\u6587\u5b57\u7684\u5750\u6807\uff0c\u5750\u6807\u7cfb\u53d6\u51b3\u4e8e textcoords \u53c2\u6570\u3002 xycoords \uff1astr or .Artist or .Transform or callable or (float, float), default: 'data'. \u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u53c2\u6570\u503c\uff1a ================= ============================================= Value Description ================= ============================================= 'figure points' \u4ee5 figure \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 point \u4e3a\u5355\u4f4d 'figure pixels' \u4ee5 figure \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 pixel \u4e3a\u5355\u4f4d 'figure fraction' \u4ee5 figure \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 fraction \u4e3a\u5355\u4f4d, 0,0 \u5de6\u4e0b\u89d2; 1,1 \u53f3\u4e0a\u89d2 'axes points' \u4ee5 axes \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 point \u4e3a\u5355\u4f4d 'axes pixels' \u4ee5 axes \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 pixel \u4e3a\u5355\u4f4d 'axes fraction' \u4ee5 axes \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 fraction \u4e3a\u5355\u4f4d\uff1b0,0 \u5de6\u4e0b\u89d2; 1,1 \u53f3\u4e0a\u89d2 'data' \u4f7f\u7528\u6570\u636e\u7684\u5750\u6807\u7cfb, \u4ee5\u6570\u636e\u5750\u6807\u7cfb\u7684\u5355\u4f4d\u4e3a\u5355\u4f4d. \u9ed8\u8ba4\u503c 'polar' *(theta, r)* \u6781\u5750\u6807\u7cfb, \u4f8b\u5982 (np.pi/2,3) ================= ============================================= textcoords \uff1astr or .Artist or .Transform or callable or (float, float), default: value of xycoords . \u6ce8\u89e3\u6587\u672c\u7684\u5750\u6807\u7cfb\u3002 xycoords \u7684\u53ef\u9009\u503c\u90fd\u53ef\u4ee5\u7528\u5728 textcoords \u4e2d\u3002\u53e6\u5916 textcoords \u8fd8\u591a\u51fa\u4ee5\u4e0b\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 textcoords \u9ed8\u8ba4\u4f7f\u7528 xycoords \u7684\u5750\u6807\u7cfb\u65f6\u751f\u6548\u3002 ================= ========================================= Value Description ================= ========================================= 'offset points' \u504f\u79fb *xy* \u7684\u91cf, \u4ee5 point \u4e3a\u5355\u4f4d 'offset pixels' \u504f\u79fb *xy* \u7684\u91cf, \u4ee5 pixels \u4e3a\u5355\u4f4d ================= ========================================= annotation_clip \uff1abool. \u5f53\u6ce8\u91ca\u8d85\u51fa\u8f74\u533a\u57df\u65f6\uff0c\u63a7\u5236\u6ce8\u91ca\u7684\u53ef\u89c1\u6027\u3002\u82e5\u4e3a True\uff0c\u5219\u53ea\u6709\u5f53 xy \u4f4d\u4e8e\u8f74\u5185\u65f6\u624d\u4f1a\u7ed8\u5236\u6ce8\u91ca\u3002\u82e5\u4e3a False\uff0c\u5c06\u59cb\u7ec8\u7ed8\u5236\u6ce8\u91ca\u3002\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u4ec5\u5f53 xycoords='data' \u65f6\u624d True\u3002 arrowprops \uff1adict, optional. \u8bbe\u7f6e xy \u4e0e xytext \u4e4b\u95f4\u7684\u7bad\u5934\u5f62\u72b6\u3002\u7bad\u5934\u7684\u7c7b\u578b\u662f ~matplotlib.patches.FancyArrowPatch \u3002\u4e0d\u540c\u7684\u7bad\u5934\u5f62\u72b6\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u3002 \u82e5 arrowwprops=None \uff0c\u5219\u4e0d\u7ed8\u5236\u7bad\u5934\u3002 \u5982\u679c arrowprops \u4e0d\u5305\u542b 'arrowstyle' \u8fd9\u4e2akey\uff0c\u90a3\u4e48 arrowprops \u4e2d\u5141\u8bb8\u5b58\u5728\u7684key\u5305\u62ec\uff1a ========== ====================================================== Key Description ========== ====================================================== width \u7bad\u5934\uff08\u7bad\u5934\u7ebf\uff09\u7684\u5bbd\u5ea6, \u4ee5 point \u4e3a\u5355\u4f4d headwidth \u7bad\u5934\u7aef\u5e95\u90e8\u7684\u5bbd\u5ea6, \u4ee5 point \u4e3a\u5355\u4f4d headlength \u7bad\u5934\u7aef\u7684\u957f\u5ea6, \u4ee5 point \u4e3a\u5355\u4f4d shrink \u4ece\u7bad\u5934\u7aef\u5230\u975e\u7bad\u5934\u7aef\u6536\u7f29\u7684\u6bd4\u7387 (fraction), \u6536\u7f29\u7684\u90e8\u5206\u4e0d\u663e\u793a ? Any key to :class:`matplotlib.patches.FancyArrowPatch` ========== ====================================================== \u5982\u679c arrowprops \u5305\u542b 'arrowstyle' \u8fd9\u4e2akey\uff0c\u90a3\u4e48\u4ee5\u4e0a\u7684 key \u4f1a\u88ab\u7981\u6b62\uff0c\u5141\u8bb8\u5b58\u5728\u7684 key \u5305\u62ec\uff1a =============== ================================================== Key Description =============== ================================================== arrowstyle \u7bad\u5934\u7684\u6837\u5f0f connectionstyle \u4e24\u7aef\u8fde\u63a5\u8def\u5f84\u7684\u6837\u5f0f relpos default is (0.5, 0.5) patchA default is bounding box of the text patchB default is None shrinkA default is 2 points shrinkB default is 2 points mutation_scale default is text size (in points) mutation_aspect default is 1. ? any key for :class:`matplotlib.patches.PathPatch` =============== ================================================== 'arrowstyle' \u5141\u8bb8\u7684\u503c\u5982\u4e0b\uff08\u5176\u4e2d name \u4e3a\u98ce\u683c\u540d\u79f0\uff0cattrs \u4e3a\u53ef\u8bbe\u7f6e\u7684\u5c5e\u6027\uff09\uff1a ============ ============================================= Name Attrs ============ ============================================= '-' None '->' head_length = 0.4 , head_width = 0.2 '-[' widthB = 1.0 , lengthB = 0.2 , angleB = None '|-|' widthA = 1.0 , widthB = 1.0 '-|>' head_length = 0.4 , head_width = 0.2 '<-' head_length = 0.4 , head_width = 0.2 '<->' head_length = 0.4 , head_width = 0.2 '<|-' head_length = 0.4 , head_width = 0.2 '<|-|>' head_length = 0.4 , head_width = 0.2 'fancy' head_length = 0.4 , head_width = 0.4 , tail_width = 0.4 'simple' head_length = 0.5 , head_width = 0.5 , tail_width = 0.2 'wedge' tail_width = 0.3 , shrink_factor = 0.5 ============ ============================================= fancy\u3001simple\u3001wedge \u4ec5\u9002\u7528\u4e8e\u751f\u6210\u4e8c\u6b21\u6837\u6761\u7ebf\u6bb5\u7684\u8fde\u63a5\u6837\u5f0f\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7bad\u5934\u6837\u5f0f\uff0c\u5fc5\u987b\u4f7f\u7528 angle3 \u6216 arc3 \u8fde\u63a5\u6837\u5f0f\u3002 'connectionstyle' \u5141\u8bb8\u7684\u503c\u5982\u4e0b\uff1a ============ ============================================= Name Attrs ============ ============================================= 'angle' angleA = 90 , angleB = 0 , rad = 0.0 'angle3' angleA = 90 , angleB = 0 'arc' angleA = 0 , angleB = 0 , armA = None , armB = None , rad = 0.0 'arc3' rad = 0.0 ============ ============================================= \u6ce8\u610f\uff0c angle3 \u548c arc3 \u4e2d\u7684 3 \u610f\u5473\u7740\u6240\u5f97\u5230\u7684\u8def\u5f84\u662f\u4e8c\u6b21\u6837\u6761\u6bb5\uff08\u4e09\u4e2a\u63a7\u5236\u70b9\uff09\u3002 \u5982\u4e0b\u9762\u5c06\u8ba8\u8bba\u7684\uff0c\u5f53\u8fde\u63a5\u8def\u5f84\u662f\u4e8c\u6b21\u6837\u6761\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7bad\u5934\u6837\u5f0f\u9009\u9879\u3002 # help(plt.plot) # help(plt.annotate)","title":"10.2.plot"},{"location":"Matplotlib/10.2.plot.html#plot","text":"","title":"plot"},{"location":"Matplotlib/10.2.plot.html#plot_1","text":"plt.plot - \u7ed8\u5236\u6298\u7ebf\u56fe\u6216\u6563\u70b9\u56fe plt . plot ( args , scalex = True , scaley = True , data = None , kwargs ) Plot y versus x as lines and/or markers. \u4f7f\u7528\u683c\u5f0f\u5982\u4e0b\uff0c\u70b9\u6216\u7ebf\u6761\u7684\u5750\u6807\u7cfb\u7531 x \u3001 y \u7ed9\u51fa\u3002\uff1a plot ([ x ], y , [ fmt ], data = None , ** kwargs ) plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) fmt \uff1a\u8be5\u53c2\u6570\u662f\u5b9a\u4e49 color\u3001marker\u3001linestyle \u7684\u4fbf\u6377\u65b9\u5f0f\uff0c\u5b83\u4f7f\u7528\u5b57\u7b26\u4e32\u4f5c\u4e3a\u503c\u3002\u4f8b\u5b50\u5982\u4e0b\uff1a plot ( x , y , 'bo' ) # plot x and y using blue circle markers plot ( y , 'r+' ) # ditto, but with red plusses \u4e5f\u53ef\u4ee5\u4f7f\u7528 .Line2D \u5c5e\u6027\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u6765\u66f4\u597d\u5730\u63a7\u5236\u5916\u89c2\u3002Line properties \u548c fmt \u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff1a plot ( x , y , 'go--' , linewidth = 2 , markersize = 12 ) plot ( x , y , color = 'green' , marker = 'o' , linestyle = 'dashed' , linewidth = 2 , markersize = 12 ) Line properties \u4e0e fmt \u51b2\u7a81\u65f6\uff0c\u5173\u952e\u5b57\u53c2\u6570\u4f18\u5148\u3002 color / c \uff1astr\uff1b\u7ebf\u6761\u989c\u8272\u3002 linestyle / ls \uff1astr\uff1b\u7ebf\u6761\u6837\u5f0f\u3002 linewidth / lw \uff1afloat\uff1b\u7ebf\u6761\u5bbd\u5ea6\u3002 alpha \uff1afloat\uff1b0-1\u6bd4\u4f8b\u7684\u900f\u660e\u5ea6\u3002 label \uff1astr\uff1b\u56fe\u4f8b\u3002 dash_capstyle \uff1astr\uff1b['butt' | 'round' | 'projecting']\u3002\u865a\u7ebf\u7684\u7aef\u70b9\u6837\u5f0f\u3002 dash_joinstyle \uff1astr\uff1b['miter' | 'round' | 'bevel']\u3002\u865a\u7ebf\u7684\u8fde\u63a5\u6837\u5f0f\u3002 solid_capstyle \uff1astr\uff1b['butt' | 'round' | 'projecting']\u3002\u5b9e\u7ebf\u7684\u7aef\u70b9\u6837\u5f0f\u3002 solid_joinstyle \uff1astr\uff1b['miter' | 'round' | 'bevel']\u3002\u5b9e\u7ebf\u7684\u8fde\u63a5\u6837\u5f0f\u3002 marker \uff1astr\uff1bmarker\u7684\u6837\u5f0f\u3002 markersize / ms \uff1amarker\u7684\u5927\u5c0f\u3002 fillstyle \uff1astr\uff1b['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']\u3002marker\u80cc\u666f\u8272\u7684\u586b\u5145\u4f4d\u7f6e\u3002 markeredgecolor / mec \uff1amarker\u7684\u80cc\u666f\u8fb9\u7f18\u989c\u8272\u3002 markeredgewidth / mew \uff1afloat\uff1bmarker\u7684\u5bbd\u5ea6\u3002 markerfacecolor / mfc \uff1amarker\u7684\u80cc\u666f\u586b\u5145\u533a\u57df\u7684\u989c\u8272\u3002 markerfacecoloralt / mfcalt \uff1amarker\u7684\u80cc\u666f\u975e\u586b\u5145\u533a\u57df\u7684\u989c\u8272\uff0c\u586b\u5145\u533a\u57df\u7531 fillstyle \u51b3\u5b9a\u3002 visible \uff1abool\uff1bLine2D\u662f\u5426\u53ef\u89c1\u3002 plt.scatter - \u7ed8\u5236\u6563\u70b9\u56fe plt . scatter ( x , y , s = None , c = None , marker = None , cmap = None , norm = None , vmin = None , vmax = None , alpha = None , linewidths = None , verts =< deprecated parameter > , edgecolors = None , plotnonfinite = False , data = None , kwargs ) plt.xlabel - \u8bbe\u7f6e X \u8f74\u6807\u7b7e plt . xlabel ( xlabel , fontdict = None , labelpad = None , loc = None , kwargs ) loc : {'left', 'center', 'right'}, default::rc: xaxis.labellocation plt.ylabel - \u8bbe\u7f6e Y \u8f74\u6807\u7b7e plt . ylabel ( ylabel , fontdict = None , labelpad = None , loc = None , kwargs ) loc : {'left', 'center', 'right'}, default::rc: yaxis.labellocation plt.xlim - \u8bbe\u7f6e/\u83b7\u53d6 X \u8f74\u8303\u56f4 plt . xlim ( * args , ** kwargs ) xlim(left, right) : set the xlim to left, right left, right = xlim() : return the current xlim plt.ylim - \u8bbe\u7f6e/\u83b7\u53d6 Y \u8f74\u8303\u56f4 plt . ylim ( * args , ** kwargs ) ylim(bottom, top) : set the ylim to bottom, top bottom, top = ylim() : return the current ylim plt.xticks - \u8bbe\u7f6e/\u83b7\u53d6 X \u8f74\u523b\u5ea6\u7684\u6807\u7b7e plt . xticks ( ticks = None , labels = None , kwargs ) xticks(np.arange(3), ['Tom', 'Dick', 'Sue'], rotation=20) : Set text labels and properties. xticks([]) : Disable xticks. locs, labels = xticks() : Get the current locations and labels. plt.yticks - \u8bbe\u7f6e/\u83b7\u53d6 Y \u8f74\u523b\u5ea6\u7684\u6807\u7b7e plt . yticks ( ticks = None , labels = None , kwargs ) plt.legend - \u8bbe\u7f6e\u56fe\u4f8b plt . legend ( args , kwargs ) \u6240\u6709 Artist \u7c7b\u7684 label \u9ed8\u8ba4\u503c\u4e3a None\uff0c\u56e0\u6b64\u5728\u6ca1\u6709 label \u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528 \u201cAxes.legend\u201d \u4e0d\u7ed8\u5236\u4efb\u4f55\u56fe\u4f8b\u3002 \u4f7f\u7528 legend( ) \u6dfb\u52a0\u56fe\u4f8b\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a \u5982\u679c artist \u5bf9\u8c61\u5df2\u7ecf\u8bbe\u7f6e\u4e86 label \u5c5e\u6027\uff0c\u5219\u4f7f\u7528\u5df2\u6709\u7684 label\u3002\u53ef\u4ee5\u5728\u521b\u5efa artist \u5bf9\u8c61\u65f6\u5c31\u6307\u5b9a label\uff0c\u6216\u8005\u8c03\u7528 artist \u5bf9\u8c61\u7684\u65b9\u6cd5 Artist.set_label ine , = ax . plot ([ 1 , 2 , 3 ], label = 'Inline label' ) ax . legend () # Or line . set_label ( 'Label via method' ) line , = ax . plot ([ 1 , 2 , 3 ]) ax . legend () \u53ea\u5728 legend API \u6807\u8bb0\u73b0\u6709\u7684\u7ed8\u56fe\u5bf9\u8c61\uff0c\u53ea\u4f20\u5165 label\uff0c\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff08\u53ef\u80fd\u5bb9\u6613\u5f04\u9519\u56fe\u4f8b\u7684\u987a\u5e8f\uff09\uff0c ax . plot ([ 1 , 2 , 3 ]) ax . legend ([ 'A simple line' ]) # Or plt . plot ( x1 , y1 , \"g1\" , x2 , y2 , 'r1' , x3 , y3 , \"k1\" ) plt . legend ([ \"1\" , \"2\" , \"3\" ]) \u53ea\u5728 legend API \u6807\u8bb0\u73b0\u6709\u7684\u7ed8\u56fe\u5bf9\u8c61\uff0c\u540c\u65f6\u4f20\u5165 iterable of artists \u548c iterable of labels\u3002 plt . legend (( line1 , line2 , line3 ), ( 'label1' , 'label2' , 'label3' )) plt . legend ( handles = ( line1 , line2 , line3 ), labels = ( 'label1' , 'label2' , 'label3' )) \u4e3b\u8981\u53c2\u6570\u6709\u4e09\u4e2a\uff1a loc \u3001 handles \u3001 label \u3002 loc \uff1aint or string or pair of floats;default: 'upper right'. legeng\u7684\u4f4d\u7f6e\uff1b\u53ef\u7528\u503c\u5982\u4e0b\uff1a Location String Location Code Note ================================================ 'best' 0 \u81ea\u52a8\u5206\u914d\u6700\u4f73\u4f4d\u7f6e 'upper right' 1 'upper left' 2 'lower left' 3 'lower right' 4 'right' 5 'center left' 6 'center right' 7 'lower center' 8 'upper center' 9 'center' 10 handles \uff1a\u5305\u542b.Artist\u7c7b\u7684\u5bf9\u8c61\u7684\u5e8f\u5217\uff0c\u8be5\u53c2\u6570\u548c labels \u53c2\u6570\u4e00\u8d77\u4f7f\u7528\u6765\u63a7\u5236\u56fe\u4f8b handle \u7684\u957f\u5ea6\u548c labels \u7684\u957f\u5ea6\u5fc5\u987b\u4e00\u81f4\uff0c\u82e5\u4e0d\u4e00\u81f4\uff0c\u4f1a\u88ab\u622a\u4e3a\u8f83\u77ed\u7684\u3002 label \uff1a\u5b57\u7b26\u4e32\u7684\u5e8f\u5217\u3002 \u5176\u4ed6\u53c2\u6570\uff08\u4e0d\u662f\u6240\u6709\u7684 artist \u5bf9\u8c61\u90fd\u53ef\u4ee5\u7528 legend \u7684\u6240\u6709\u53c2\u6570\uff09 bbox_to_anchor \uff1a .BboxBase or pair of floats. \u5728 bbox_transform \u5750\u6807\u7cfb\uff08\u9ed8\u8ba4\u4e3aAxes coordinates\uff09\u4e2d\u6307\u5b9a\u56fe\u4f8b\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u5c06\u539f\u672c\u653e\u5728\u53f3\u4e0a\u89d2\u7684\u56fe\u4f8b\u5c45\u4e2d\u4e8eaxes\uff1a loc='upper right', bbox_to_anchor=(0.5, 0.5) bbox_transform \uff1aNone or :class: matplotlib.transforms.Transform . \u8fb9\u754c\u6846\u7684\u53d8\u6362\uff08\u4e5f\u5c31\u662f bbox_to_anchor \u7684\u5750\u6807\u7cfb\uff09\u3002 ncol \uff1ainteger. legend\u7684\u5217\u6570\uff0c\u9ed8\u8ba4\u4e3a1\u3002 columnspacing \uff1afloat or None. \u5217\u4e4b\u95f4\u7684\u95f4\u8ddd\u3002Measured in font-size units. \u5f53\u53c2\u6570 nol \u4e0d\u7b49\u4e8e1\u65f6\u8d77\u4f5c\u7528\u3002 prop \uff1aNone or :class: matplotlib.font_manager.FontProperties or dict. legend\u7684\u5b57\u4f53\u5c5e\u6027\uff0c\u5982\u679c\u4e3aNone\uff08\u9ed8\u8ba4\uff09\uff0c\u5f53\u524d:data: matplotlib.rcParams \u4f1a\u88ab\u4f7f\u7528\u3002 fontsize \uff1aint or float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}. \u63a7\u5236legend\u7684\u5b57\u4f53\u5927\u5c0f\u3002\u82e5\u4f7f\u7528\u6570\u503c\uff0c\u5219\u662f\u4ee5 point\u4e3a\u5355\u4f4d\u7684\u7edd\u5bf9\u5927\u5c0f\uff1b\u82e5\u4f7f\u7528 string\uff0c\u5219\u5b57\u4f53\u5927\u5c0f\u76f8\u5bf9\u4e8e\u5f53\u524d\u9ed8\u8ba4\u5b57\u4f53\u3002\u8be5\u53c2\u6570\u5728 prop \u53c2\u6570\u4e0d\u6307\u5b9a\u65f6\u8d77\u4f5c\u7528\u3002 markerscale \uff1aNone or int or float. legend \u56fe\u6807\u7684\u76f8\u5bf9\u5927\u5c0f\uff0c\u4e0e\u539f\u59cb\u7684\u56fe\u6807\u4f5c\u6bd4\u8f83\uff0c\u9ed8\u8ba4\u4e3a None\u3002 markerfirst \uff1abool. \u82e5\u4e3a True\uff0c\u5219 legend marker \u4f4d\u4e8e legend label \u7684\u5de6\u8fb9\uff0c\u9ed8\u8ba4\u4e3a True\u3002 numpoints \uff1aNone or int. legend marker\u7684\u6570\u91cf\u3002 title \uff1a\u56fe\u4f8b\u7684\u6807\u9898\u3002 shadow \uff1aNone or bool. \u63a7\u5236\u662f\u5426\u5728\u56fe\u4f8b\u540e\u9762\u7ed8\u5236\u9634\u5f71\u3002Default is None , which will take the value from:rc: legend.shadow . framealpha \uff1aNone or float. \u56fe\u4f8b\u80cc\u666f\u7684\u900f\u660e\u5ea6\uff08\u5305\u62ec\u56fe\u4f8b\u7684\u8fb9\u6846\uff09Default is None \u3002 edgecolor \uff1aNone or \"inherit\" or a color spec. \u63a7\u5236\u56fe\u4f8b\u80cc\u666f\u8fb9\u7f18\uff08\u4e5f\u5c31\u662f\u8fb9\u6846\uff09\u7684\u989c\u8272\u3002 facecolor \uff1aNone or \"inherit\" or a color spec. \u63a7\u5236\u56fe\u4f8b\u7684\u80cc\u666f\u989c\u8272\u3002 labelspacing \uff1afloat or None. \u56fe\u4f8b\u6761\u76ee\u4e4b\u95f4\u7684\u5782\u76f4\u7a7a\u95f4\uff08vertical space\uff09\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 borderpad \uff1afloat or None. \u56fe\u4f8b\u8fb9\u6846\u5185\u7684\u5c0f\u6570\u7a7a\u767d\uff08\u4e5f\u5c31\u662f\u56fe\u4f8b\u8ddd\u79bb\u8fb9\u6846\u7684\u8ddd\u79bb\uff09\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 handletextpad \uff1afloat or None. legend handle\u548clegend label\u4e4b\u95f4\u7684\u7a7a\u767d\u586b\u5145\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 handlelength \uff1afloat or None. legend handles\u7684\u957f\u5ea6\uff08\u4e5f\u5c31\u662f\uff09\u3002\u4ee5\u5b57\u4f53\u5927\u5c0f\u5355\u4f4d\u6d4b\u91cf\u3002 borderaxespad \uff1afloat or None. The pad between the axes and legend border.Measured in font-size units. plt.text - \u6dfb\u52a0\u6587\u672c\u5230 axes plt . text ( x , y , s , fontdict = None , kwargs ) plt.annotate - \u5728\u6307\u5b9a\u70b9\u6dfb\u52a0\u6ce8\u89e3 plt . annotate ( text , xy , args , kwargs ) text \uff1a\u6ce8\u89e3\u7684\u6587\u5b57\uff0c s \u662f\u8be5\u53c2\u6570\u5df2\u5f03\u7528\u7684\u540c\u4e49\u8bcd\u3002 xy \uff1a(float, float). \u6807\u6ce8\u70b9\u7684\u5750\u6807\uff0c\u5750\u6807\u7cfb\u53d6\u51b3\u4e8e xycoords \u53c2\u6570\u3002 xytext \uff1a(float, float). \u6ce8\u89e3\u6587\u5b57\u7684\u5750\u6807\uff0c\u5750\u6807\u7cfb\u53d6\u51b3\u4e8e textcoords \u53c2\u6570\u3002 xycoords \uff1astr or .Artist or .Transform or callable or (float, float), default: 'data'. \u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u53c2\u6570\u503c\uff1a ================= ============================================= Value Description ================= ============================================= 'figure points' \u4ee5 figure \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 point \u4e3a\u5355\u4f4d 'figure pixels' \u4ee5 figure \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 pixel \u4e3a\u5355\u4f4d 'figure fraction' \u4ee5 figure \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 fraction \u4e3a\u5355\u4f4d, 0,0 \u5de6\u4e0b\u89d2; 1,1 \u53f3\u4e0a\u89d2 'axes points' \u4ee5 axes \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 point \u4e3a\u5355\u4f4d 'axes pixels' \u4ee5 axes \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 pixel \u4e3a\u5355\u4f4d 'axes fraction' \u4ee5 axes \u5de6\u4e0b\u89d2\u4e3a\u539f\u70b9, \u4ee5 fraction \u4e3a\u5355\u4f4d\uff1b0,0 \u5de6\u4e0b\u89d2; 1,1 \u53f3\u4e0a\u89d2 'data' \u4f7f\u7528\u6570\u636e\u7684\u5750\u6807\u7cfb, \u4ee5\u6570\u636e\u5750\u6807\u7cfb\u7684\u5355\u4f4d\u4e3a\u5355\u4f4d. \u9ed8\u8ba4\u503c 'polar' *(theta, r)* \u6781\u5750\u6807\u7cfb, \u4f8b\u5982 (np.pi/2,3) ================= ============================================= textcoords \uff1astr or .Artist or .Transform or callable or (float, float), default: value of xycoords . \u6ce8\u89e3\u6587\u672c\u7684\u5750\u6807\u7cfb\u3002 xycoords \u7684\u53ef\u9009\u503c\u90fd\u53ef\u4ee5\u7528\u5728 textcoords \u4e2d\u3002\u53e6\u5916 textcoords \u8fd8\u591a\u51fa\u4ee5\u4e0b\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 textcoords \u9ed8\u8ba4\u4f7f\u7528 xycoords \u7684\u5750\u6807\u7cfb\u65f6\u751f\u6548\u3002 ================= ========================================= Value Description ================= ========================================= 'offset points' \u504f\u79fb *xy* \u7684\u91cf, \u4ee5 point \u4e3a\u5355\u4f4d 'offset pixels' \u504f\u79fb *xy* \u7684\u91cf, \u4ee5 pixels \u4e3a\u5355\u4f4d ================= ========================================= annotation_clip \uff1abool. \u5f53\u6ce8\u91ca\u8d85\u51fa\u8f74\u533a\u57df\u65f6\uff0c\u63a7\u5236\u6ce8\u91ca\u7684\u53ef\u89c1\u6027\u3002\u82e5\u4e3a True\uff0c\u5219\u53ea\u6709\u5f53 xy \u4f4d\u4e8e\u8f74\u5185\u65f6\u624d\u4f1a\u7ed8\u5236\u6ce8\u91ca\u3002\u82e5\u4e3a False\uff0c\u5c06\u59cb\u7ec8\u7ed8\u5236\u6ce8\u91ca\u3002\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u4ec5\u5f53 xycoords='data' \u65f6\u624d True\u3002 arrowprops \uff1adict, optional. \u8bbe\u7f6e xy \u4e0e xytext \u4e4b\u95f4\u7684\u7bad\u5934\u5f62\u72b6\u3002\u7bad\u5934\u7684\u7c7b\u578b\u662f ~matplotlib.patches.FancyArrowPatch \u3002\u4e0d\u540c\u7684\u7bad\u5934\u5f62\u72b6\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u3002 \u82e5 arrowwprops=None \uff0c\u5219\u4e0d\u7ed8\u5236\u7bad\u5934\u3002 \u5982\u679c arrowprops \u4e0d\u5305\u542b 'arrowstyle' \u8fd9\u4e2akey\uff0c\u90a3\u4e48 arrowprops \u4e2d\u5141\u8bb8\u5b58\u5728\u7684key\u5305\u62ec\uff1a ========== ====================================================== Key Description ========== ====================================================== width \u7bad\u5934\uff08\u7bad\u5934\u7ebf\uff09\u7684\u5bbd\u5ea6, \u4ee5 point \u4e3a\u5355\u4f4d headwidth \u7bad\u5934\u7aef\u5e95\u90e8\u7684\u5bbd\u5ea6, \u4ee5 point \u4e3a\u5355\u4f4d headlength \u7bad\u5934\u7aef\u7684\u957f\u5ea6, \u4ee5 point \u4e3a\u5355\u4f4d shrink \u4ece\u7bad\u5934\u7aef\u5230\u975e\u7bad\u5934\u7aef\u6536\u7f29\u7684\u6bd4\u7387 (fraction), \u6536\u7f29\u7684\u90e8\u5206\u4e0d\u663e\u793a ? Any key to :class:`matplotlib.patches.FancyArrowPatch` ========== ====================================================== \u5982\u679c arrowprops \u5305\u542b 'arrowstyle' \u8fd9\u4e2akey\uff0c\u90a3\u4e48\u4ee5\u4e0a\u7684 key \u4f1a\u88ab\u7981\u6b62\uff0c\u5141\u8bb8\u5b58\u5728\u7684 key \u5305\u62ec\uff1a =============== ================================================== Key Description =============== ================================================== arrowstyle \u7bad\u5934\u7684\u6837\u5f0f connectionstyle \u4e24\u7aef\u8fde\u63a5\u8def\u5f84\u7684\u6837\u5f0f relpos default is (0.5, 0.5) patchA default is bounding box of the text patchB default is None shrinkA default is 2 points shrinkB default is 2 points mutation_scale default is text size (in points) mutation_aspect default is 1. ? any key for :class:`matplotlib.patches.PathPatch` =============== ================================================== 'arrowstyle' \u5141\u8bb8\u7684\u503c\u5982\u4e0b\uff08\u5176\u4e2d name \u4e3a\u98ce\u683c\u540d\u79f0\uff0cattrs \u4e3a\u53ef\u8bbe\u7f6e\u7684\u5c5e\u6027\uff09\uff1a ============ ============================================= Name Attrs ============ ============================================= '-' None '->' head_length = 0.4 , head_width = 0.2 '-[' widthB = 1.0 , lengthB = 0.2 , angleB = None '|-|' widthA = 1.0 , widthB = 1.0 '-|>' head_length = 0.4 , head_width = 0.2 '<-' head_length = 0.4 , head_width = 0.2 '<->' head_length = 0.4 , head_width = 0.2 '<|-' head_length = 0.4 , head_width = 0.2 '<|-|>' head_length = 0.4 , head_width = 0.2 'fancy' head_length = 0.4 , head_width = 0.4 , tail_width = 0.4 'simple' head_length = 0.5 , head_width = 0.5 , tail_width = 0.2 'wedge' tail_width = 0.3 , shrink_factor = 0.5 ============ ============================================= fancy\u3001simple\u3001wedge \u4ec5\u9002\u7528\u4e8e\u751f\u6210\u4e8c\u6b21\u6837\u6761\u7ebf\u6bb5\u7684\u8fde\u63a5\u6837\u5f0f\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7bad\u5934\u6837\u5f0f\uff0c\u5fc5\u987b\u4f7f\u7528 angle3 \u6216 arc3 \u8fde\u63a5\u6837\u5f0f\u3002 'connectionstyle' \u5141\u8bb8\u7684\u503c\u5982\u4e0b\uff1a ============ ============================================= Name Attrs ============ ============================================= 'angle' angleA = 90 , angleB = 0 , rad = 0.0 'angle3' angleA = 90 , angleB = 0 'arc' angleA = 0 , angleB = 0 , armA = None , armB = None , rad = 0.0 'arc3' rad = 0.0 ============ ============================================= \u6ce8\u610f\uff0c angle3 \u548c arc3 \u4e2d\u7684 3 \u610f\u5473\u7740\u6240\u5f97\u5230\u7684\u8def\u5f84\u662f\u4e8c\u6b21\u6837\u6761\u6bb5\uff08\u4e09\u4e2a\u63a7\u5236\u70b9\uff09\u3002 \u5982\u4e0b\u9762\u5c06\u8ba8\u8bba\u7684\uff0c\u5f53\u8fde\u63a5\u8def\u5f84\u662f\u4e8c\u6b21\u6837\u6761\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7bad\u5934\u6837\u5f0f\u9009\u9879\u3002 # help(plt.plot) # help(plt.annotate)","title":"plot"},{"location":"NumPy/8.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html","text":"import numpy as np import pprint from toolkit import H Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.24 numpy version: 1.19.1 \u5171\u540c\u7684\u53c2\u6570 \u8fd9\u91cc\u6709\u51e0\u4e2a\u5171\u540c\u7684\u53c2\u6570\uff1a a \uff1a\u4e00\u4e2a array-like \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u6570\u7ec4\uff0c\u53ef\u4ee5\u4e3a list \u3001 tuple \u3001 list of tuple \u3001 list of list \u3001 tuple of list \u3001 tuple of tuple \u7b49\u7b49\u3002 dtype \uff1a\u6570\u7ec4\u7684\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a float \u3002\u53ef\u4ee5\u6307\u5b9a\u4e3a Python \u7684\u5185\u7f6e\u7684\u503c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 numpy \u7684\u6570\u503c\u7c7b\u578b\uff0c\u5982 numpy.int32 \u3001 numpy.float64 \u7b49\u7b49\u3002 order \uff1a\u6307\u5b9a\u6570\u7ec4\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u5982\u679c object \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219 'C' \u3001 'F' \u53c2\u6570\u53ef\u7528\uff0c\u5982\u679c object \u4e0d\u662f\u6570\u7ec4\uff0c\u5219\u4ee5\u4e0b\u56db\u4e2a\u53c2\u6570\u90fd\u53ef\u7528\uff0c\u9ed8\u8ba4\u503c\u4e3a 'C' \u3002 'C' \uff1a\u6309\u884c\u5b58\u50a8\uff08C\u98ce\u683c\uff09 'F' \uff1a\u6309\u5217\u5b58\u50a8\uff08Fortran\u98ce\u683c\uff09 'A' \uff1a\u5185\u5b58\u5e03\u5c40\u4e0e object \u76f8\u540c 'K' \uff1a\u5185\u5b58\u5e03\u5c40\u4e0e object \u5c3d\u53ef\u80fd\u76f8\u4f3c subok \uff1a bool . \u5f53 subok=True \uff0c\u5982\u679c a \u4e3a ndarray \u7684\u5b50\u7c7b\uff08\u5982 matrix \u7c7b\uff09\uff0c\u5219\u65b0\u521b\u5efa\u7684\u6570\u7ec4\u4e0e a \u7c7b\u578b\u76f8\u540c\u3002\u5f53 subok=False \uff0c\u65b0\u521b\u5efa\u7684\u6570\u7ec4\u7684\u7c7b\u578b\u59cb\u7ec8\u4e3a ndarray \u3002\u9ed8\u8ba4\u4e3a False \u3002 \u4ece\u73b0\u6709\u7684\u6570\u636e\u521b\u5efa np.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0) \u4ece object \u521b\u5efa array\u3002 object \uff1a\u53ef\u4ee5\u662f\u6570\u7ec4\u5bf9\u8c61\u3001\u5d4c\u5957\u5e8f\u5217\u3001\u4e00\u4e2a\u6709 __array__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de array \u6216\u8005 array-like \u5bf9\u8c61\u3002 copy \uff1a\u9ed8\u8ba4\u4e3a True \uff0c\u8868\u793a\u62f7\u8d1d\u5bf9\u8c61\uff0c\u82e5\u4e3a False \uff0c\u5219\u4ec5\u5f53\u4f20\u5165\u975e array \u5bf9\u8c61\u3001 __array__ \u65b9\u6cd5\u8fd4\u56de\u526f\u672c\u3001\u9700\u8981\u6ee1\u8db3 dtype \u3001 order \u53c2\u6570\u65f6\u624d\u4f1a\u62f7\u8d1d\u3002 ndmin \uff1a\u6307\u5b9a\u7ed3\u679c ndarray \u6700\u5c11\u6709\u591a\u5c11\u4e2a\u7ef4\u5ea6\u3002 np.asarray(a, dtype=None, order=None) - \u5c06 a \u8f6c\u6362\u4e3a ndarray return array ( a , dtype , copy = False , order = order ) np.asanyarray(a, dtype=None, order=None) - \u5c06 a \u8f6c\u6362\u4e3a ndarray return array ( a , dtype , copy = False , order = order , subok = True ) np.asanyarray \u4e0e np.asarray \u7684\u533a\u522b\u5728\u4e8e subok \u53c2\u6570\u3002 np.ascontiguousarray(a, dtype=None) - \u8fd4\u56de C \u98ce\u683c\u7684\u8fde\u7eed ndarray return array ( a , dtype , copy = False , order = 'C' , ndmin = 1 ) \u8fd4\u56de\u7684\u6570\u7ec4\u7684 ndim \u81f3\u5c11\u662f1\u7ef4\u7684\uff0c\u5373\u5bf9\u4e8e\u6807\u91cf\uff0c\u4e0d\u4fdd\u7559 0-d \u6570\u7ec4\u3002 np.copy(a, order='K', subok=False) - \u8fd4\u56de a \u7684\u6df1\u62f7\u8d1d return array ( a , order = order , copy = True ) np.asmatrix(data, dtype=None) - \u8fd4\u56de matrix \u7b49\u4ef7\u4e8e\u4ee5\u4e0b\u4ee3\u7801 matrix ( data , copy = False ) np.frombuffer(buffer, dtype=float, count=-1, offset=0) \u4ece buffer \u4e2d\u8fd4\u56de\u4e00\u7ef4\u7684 ndarray \uff0c\u521b\u5efa\u7684\u6570\u7ec4\u4e0e buffer \u5bf9\u8c61\u5171\u4eab\u5185\u5b58\u3002 buffer \uff1a\u4e00\u4e2a\u6709 buffer \u63a5\u53e3\u7684\u5bf9\u8c61\u3002\u5185\u7f6e\u7684 bytes/bytearray/array.array \u7c7b\u578b\u63d0\u4f9b\u4e86\u8be5\u63a5\u53e3\u3002 count \uff1a\u6307\u5b9a\u8bfb\u53d6\u7684\u6570\u91cf\uff0c -1 \u8868\u793a\u8bfb\u53d6 buffer \u7684\u5168\u90e8\u6570\u636e\u3002 offset \uff1a\u6307\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u8bfb\u53d6\uff0c\u4ee5 bytes \u4e3a\u5355\u4f4d\uff0c\u9ed8\u8ba4\u4e3a 0\u3002 from array import array # array.array \u63d0\u4f9b\u4e86\u7c7b\u4f3clist\u5bf9\u8c61\u7684\u5185\u5b58\u673a\u5236 # \u521b\u5efa\u4e00\u4e2aarray\u6570\u7ec4 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # \u901a\u8fc7 np.frombuffer \u521b\u5efa\u4e00\u4e2a\u548c a \u5171\u4eab\u5185\u5b58\u7684 NumPy \u6570\u7ec4 na = np . frombuffer ( a , dtype = np . float ) print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # \u4fee\u6539NumPy\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 print ( \"a:\" , a ) # array\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e5f\u540c\u65f6\u6539\u53d8 a: array('d', [1.0, 2.0, 3.0, 4.0]) na: [1. 2. 3. 4.] a: array('d', [1.0, 20.0, 3.0, 4.0]) np.fromfile(file, dtype=float, count=-1, sep='', offset=0) \u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8005\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6784\u9020 ndarray \u3002 sep \uff1a\u5f53\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65f6\uff0c\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u3002 \u5982\u679c sep \u662f\u7a7a\u5b57\u7b26\u4e32\u5219\u8868\u793a\u6587\u4ef6\u5e94\u8be5\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\uff1b\u5982\u679c sep \u4e3a \" \" \u8868\u793a\u53ef\u4ee5\u5339\u914d0\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u3002 np.fromfunction(function, shape, *, dtype=float, **kwargs) function \u4f1a\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5750\u6807\u70b9\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002\u5047\u8bbe shape \u7684\u7ef4\u5ea6\u4e3a N \uff0c\u90a3\u4e48 function \u5c06\u6709 N \u4e2a\u53c2\u6570\uff0c function(x1,x2,...x_N) \u4f5c\u4e3a\u8be5\u5750\u6807\u70b9\u7684\u503c\u3002 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array([[0., 1., 2.], [1., 2., 3.], [2., 3., 4.]]) np.fromiter(iterable, dtype, count=-1) - \u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa 1-d \u7684\u6570\u7ec4 np . fromiter ( \"123\" , dtype = \"int64\" ) array([1, 2, 3], dtype=int64) np.fromstring(string, dtype=float, count=-1, sep='') - \u4ece\u5b57\u7b26\u4e32\u6216\u8005 raw binary \u4e2d\u521b\u5efa 1-d \u6570\u7ec4 sep \uff1a\u5982\u679c sep=\"\" \uff0c\u5219 string \u5c06\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u91ca\uff08\u5373\u6bcf\u4e2a\u5b57\u7b26\u4f5c\u4e3a ASCII \u7801\u503c\u5bf9\u5f85\uff09\uff0c \u4e0d\u5efa\u8bae \u89e6\u53d1\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002\u521b\u5efa\u7684\u6570\u7ec4\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u533a\u3002 a = \"abcdefg\" # \u89e6\u53d1\u4e8c\u8fdb\u5236\u6a21\u5f0f, \u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7f16\u7801\u88ab\u89e3\u91ca\u4e3a\u6574\u6570 a = np . fromstring ( a , dtype = np . int8 ) print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] setup_m.py:6: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead try: np.loadtxt - \u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u7ec4 np . loadtxt ( fname , dtype =< class ' float '>, comments=' #', delimiter=None, converters = None , skiprows = 0 , usecols = None , unpack = False , ndmin = 0 , encoding = 'bytes' , max_rows = None ) \u8981\u6c42\u6587\u672c\u6587\u4ef6\u6bcf\u4e00\u884c\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u503c comments \uff1a\u6307\u793a\u6ce8\u91ca\u884c\u7684\u8d77\u59cb\u5b57\u7b26\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u5217\u8868\uff08\u9ed8\u8ba4\u4e3a # \uff09\u3002 delimiter \uff1a\u6307\u5b9a\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u767d\u7b26\u3002 converters \uff1a\u5c06\u6307\u5b9a\u5217\u53f7 (0,1,2...) \u7684\u5217\u6570\u636e\u6267\u884c\u8f6c\u6362\uff0c\u662f\u4e00\u4e2a map \uff0c\u5982 {0:func1} \u8868\u793a\u5bf9\u7b2c\u4e00\u5217\u6570\u636e\u6267\u884c func1(val_0) \u3002 skiprows \uff1a\u6307\u5b9a\u8df3\u8fc7\u5f00\u5934\u7684\u591a\u5c11\u884c\u3002 usecols \uff1a\u6307\u5b9a\u8bfb\u53d6\u90a3\u4e9b\u5217\uff080\u8868\u793a\u7b2c\u4e00\u5217\u3002 \u4ece\u6570\u503c\u533a\u95f4\u521b\u5efa np.arange([start,] stop[, step,], dtype=None) - \u8fd4\u56de\u5747\u5300\u95f4\u9694\u7684\u503c\u7ec4\u6210\u7684 1-d \u6570\u7ec4 \u533a\u95f4\u662f\u534a\u95ed\u534a\u5f00\u7684 [start,stop) \uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c range \u51fd\u6570\u3002 start \u4e3a\u5f00\u59cb\u70b9\uff0c stop \u4e3a\u7ec8\u6b62\u70b9\uff0c step \u4e3a\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u8fd9\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002 \u5982\u679c step \u4e3a\u6d6e\u70b9\u6570\uff0c\u7ed3\u679c\u53ef\u80fd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u76f8\u7b49\u6bd4\u8f83\u4e0d\u51c6\u786e\uff08\u8ba1\u7b97\u673a\u7cbe\u5ea6\u6709\u9650\uff09\u3002 np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0) \u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684 1-d \u6570\u7ec4 \uff0c\u533a\u95f4\u662f\u95ed\u533a\u95f4 [start,stop] \u3002 endpoint \uff1a\u662f\u5426\u5305\u542b stop \u3002 retstep \uff1a\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de\u7684\u7ed3\u679c\u5305\u542b\u91c7\u6837\u6b65\u957f step \u3002 axis \uff1a\u7528\u4e8e\u50a8\u5b58\u91c7\u6837\u70b9\u7684 axis\uff0c\u9ed8\u8ba4\u4e3a 0\uff0c\u4ec5\u5f53 start \u548c stop \u662f array-like \u65f6\u751f\u6548\u3002\u4e8e 1.16.0 \u7248\u672c\u52a0\u5165\u3002 np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0) \u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u5bf9\u6570\u6570\u503c\u7ec4\u6210\u7684 1-d \u6570\u7ec4 \uff0c\u91c7\u6837\u70b9\u5f00\u59cb\u4e8e base^start \uff0c\u7ed3\u675f\u4e8e base^stop \u3002\u8f91\u4e0a\u76f8\u5f53\u4e8e\u5148\u6267\u884c arange \u83b7\u53d6\u6570\u7ec4 array \uff0c\u7136\u540e\u518d\u6267\u884c base^array[i] \u83b7\u53d6\u91c7\u6837\u70b9\u3002 base \uff1a\u5bf9\u6570\u7684\u5e95\u6570\u3002 axis \uff1a\u7528\u4e8e\u50a8\u5b58\u91c7\u6837\u70b9\u7684 axis\uff0c\u9ed8\u8ba4\u4e3a 0\uff0c\u4ec5\u5f53 start \u548c stop \u662f array-like \u65f6\u751f\u6548\u3002 \u4ee5\u586b\u5145\u7684\u65b9\u5f0f\u521b\u5efa np.empty(shape, dtype=numpy.float64, order='C') \u6839\u636e\u6307\u5b9a\u7684 shape \u548c dtype \u521b\u5efa array\uff0c\u4f46\u4e0d\u521d\u59cb\u5316\uff0c\u5176\u5143\u7d20\u7684\u503c\u662f\u968f\u673a\u7684\u3002 np.empty_like(a, dtype=None, order='K', subok=True, shape=None) \u6839\u636e a \u7684 shape \u548c dtype \u521b\u5efa array\uff0c\u4f46\u4e0d\u521d\u59cb\u5316\uff0c\u5176\u5143\u7d20\u7684\u503c\u662f\u968f\u673a\u7684\u3002 np.zeros(shape, ...) - \u7c7b\u4f3c np.empty \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 0 np.ones(shape, ...) - \u7c7b\u4f3c np.empty \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 1 np.full(shape, fill_value, ...) - \u7c7b\u4f3c np.empty \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a fill_value np.zeros_like(a, ...) - \u7c7b\u4f3c np.empty_like \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 0 np.ones_like(a, ...) - \u7c7b\u4f3c np.empty_like \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 1 np.full_like(a, fill_value, ...) - \u7c7b\u4f3c np.empty_like \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a fill_value # \u5185\u5b58\u672a\u521d\u59cb\u5316 a = np . empty (( 3 , 2 ), order = \"C\" ) # \u5185\u5b58\u672a\u521d\u59cb\u5316 np . empty_like ( a ) array([[ 0. , 3. ], [ 0. , 3. ], [-2.12132034, 2.12132034]]) np.eye(N, M=None, k=0, dtype=float, order='C') - \u8fd4\u56de\u4e00\u4e2a 2-D \u6570\u7ec4\uff0c\u5bf9\u89d2\u7ebf\u5143\u7d201\uff0c\u5176\u4f59\u5143\u7d20\u4e3a0 N \uff1a\u884c\u6570 M \uff1a\u5217\u6570\uff0c\u82e5\u4e0d\u4f20\u5165 M \uff0c\u5219 N=M k \uff1a k=0 \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff1b k \u4e3a\u6b63\u6574\u6570\uff0c\u5bf9\u5e94\u7684\u4e0a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff1b k \u4e3a\u8d1f\u6574\u6570\uff0c\u5bf9\u5e94\u7684\u4e0b\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1 pprint . pprint ( np . eye ( N = 2 , M = 3 )) print () # \u53c2\u6570 k \u662f\u53ef\u4ee5\u8d85\u51fa\u8303\u56f4\u7684 pprint . pprint ( np . eye ( N = 2 , M = 3 , k = 1 )) array([[1., 0., 0.], [0., 1., 0.]]) array([[0., 1., 0.], [0., 0., 1.]]) np.identity(n, dtype=None) - \u8fd4\u56de\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635","title":"8.1.\u521b\u5efa\u6570\u7ec4"},{"location":"NumPy/8.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_1","text":"\u8fd9\u91cc\u6709\u51e0\u4e2a\u5171\u540c\u7684\u53c2\u6570\uff1a a \uff1a\u4e00\u4e2a array-like \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u6570\u7ec4\uff0c\u53ef\u4ee5\u4e3a list \u3001 tuple \u3001 list of tuple \u3001 list of list \u3001 tuple of list \u3001 tuple of tuple \u7b49\u7b49\u3002 dtype \uff1a\u6570\u7ec4\u7684\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a float \u3002\u53ef\u4ee5\u6307\u5b9a\u4e3a Python \u7684\u5185\u7f6e\u7684\u503c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 numpy \u7684\u6570\u503c\u7c7b\u578b\uff0c\u5982 numpy.int32 \u3001 numpy.float64 \u7b49\u7b49\u3002 order \uff1a\u6307\u5b9a\u6570\u7ec4\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u5982\u679c object \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219 'C' \u3001 'F' \u53c2\u6570\u53ef\u7528\uff0c\u5982\u679c object \u4e0d\u662f\u6570\u7ec4\uff0c\u5219\u4ee5\u4e0b\u56db\u4e2a\u53c2\u6570\u90fd\u53ef\u7528\uff0c\u9ed8\u8ba4\u503c\u4e3a 'C' \u3002 'C' \uff1a\u6309\u884c\u5b58\u50a8\uff08C\u98ce\u683c\uff09 'F' \uff1a\u6309\u5217\u5b58\u50a8\uff08Fortran\u98ce\u683c\uff09 'A' \uff1a\u5185\u5b58\u5e03\u5c40\u4e0e object \u76f8\u540c 'K' \uff1a\u5185\u5b58\u5e03\u5c40\u4e0e object \u5c3d\u53ef\u80fd\u76f8\u4f3c subok \uff1a bool . \u5f53 subok=True \uff0c\u5982\u679c a \u4e3a ndarray \u7684\u5b50\u7c7b\uff08\u5982 matrix \u7c7b\uff09\uff0c\u5219\u65b0\u521b\u5efa\u7684\u6570\u7ec4\u4e0e a \u7c7b\u578b\u76f8\u540c\u3002\u5f53 subok=False \uff0c\u65b0\u521b\u5efa\u7684\u6570\u7ec4\u7684\u7c7b\u578b\u59cb\u7ec8\u4e3a ndarray \u3002\u9ed8\u8ba4\u4e3a False \u3002","title":"\u5171\u540c\u7684\u53c2\u6570"},{"location":"NumPy/8.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_2","text":"np.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0) \u4ece object \u521b\u5efa array\u3002 object \uff1a\u53ef\u4ee5\u662f\u6570\u7ec4\u5bf9\u8c61\u3001\u5d4c\u5957\u5e8f\u5217\u3001\u4e00\u4e2a\u6709 __array__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de array \u6216\u8005 array-like \u5bf9\u8c61\u3002 copy \uff1a\u9ed8\u8ba4\u4e3a True \uff0c\u8868\u793a\u62f7\u8d1d\u5bf9\u8c61\uff0c\u82e5\u4e3a False \uff0c\u5219\u4ec5\u5f53\u4f20\u5165\u975e array \u5bf9\u8c61\u3001 __array__ \u65b9\u6cd5\u8fd4\u56de\u526f\u672c\u3001\u9700\u8981\u6ee1\u8db3 dtype \u3001 order \u53c2\u6570\u65f6\u624d\u4f1a\u62f7\u8d1d\u3002 ndmin \uff1a\u6307\u5b9a\u7ed3\u679c ndarray \u6700\u5c11\u6709\u591a\u5c11\u4e2a\u7ef4\u5ea6\u3002 np.asarray(a, dtype=None, order=None) - \u5c06 a \u8f6c\u6362\u4e3a ndarray return array ( a , dtype , copy = False , order = order ) np.asanyarray(a, dtype=None, order=None) - \u5c06 a \u8f6c\u6362\u4e3a ndarray return array ( a , dtype , copy = False , order = order , subok = True ) np.asanyarray \u4e0e np.asarray \u7684\u533a\u522b\u5728\u4e8e subok \u53c2\u6570\u3002 np.ascontiguousarray(a, dtype=None) - \u8fd4\u56de C \u98ce\u683c\u7684\u8fde\u7eed ndarray return array ( a , dtype , copy = False , order = 'C' , ndmin = 1 ) \u8fd4\u56de\u7684\u6570\u7ec4\u7684 ndim \u81f3\u5c11\u662f1\u7ef4\u7684\uff0c\u5373\u5bf9\u4e8e\u6807\u91cf\uff0c\u4e0d\u4fdd\u7559 0-d \u6570\u7ec4\u3002 np.copy(a, order='K', subok=False) - \u8fd4\u56de a \u7684\u6df1\u62f7\u8d1d return array ( a , order = order , copy = True ) np.asmatrix(data, dtype=None) - \u8fd4\u56de matrix \u7b49\u4ef7\u4e8e\u4ee5\u4e0b\u4ee3\u7801 matrix ( data , copy = False ) np.frombuffer(buffer, dtype=float, count=-1, offset=0) \u4ece buffer \u4e2d\u8fd4\u56de\u4e00\u7ef4\u7684 ndarray \uff0c\u521b\u5efa\u7684\u6570\u7ec4\u4e0e buffer \u5bf9\u8c61\u5171\u4eab\u5185\u5b58\u3002 buffer \uff1a\u4e00\u4e2a\u6709 buffer \u63a5\u53e3\u7684\u5bf9\u8c61\u3002\u5185\u7f6e\u7684 bytes/bytearray/array.array \u7c7b\u578b\u63d0\u4f9b\u4e86\u8be5\u63a5\u53e3\u3002 count \uff1a\u6307\u5b9a\u8bfb\u53d6\u7684\u6570\u91cf\uff0c -1 \u8868\u793a\u8bfb\u53d6 buffer \u7684\u5168\u90e8\u6570\u636e\u3002 offset \uff1a\u6307\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u8bfb\u53d6\uff0c\u4ee5 bytes \u4e3a\u5355\u4f4d\uff0c\u9ed8\u8ba4\u4e3a 0\u3002 from array import array # array.array \u63d0\u4f9b\u4e86\u7c7b\u4f3clist\u5bf9\u8c61\u7684\u5185\u5b58\u673a\u5236 # \u521b\u5efa\u4e00\u4e2aarray\u6570\u7ec4 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # \u901a\u8fc7 np.frombuffer \u521b\u5efa\u4e00\u4e2a\u548c a \u5171\u4eab\u5185\u5b58\u7684 NumPy \u6570\u7ec4 na = np . frombuffer ( a , dtype = np . float ) print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # \u4fee\u6539NumPy\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 print ( \"a:\" , a ) # array\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e5f\u540c\u65f6\u6539\u53d8 a: array('d', [1.0, 2.0, 3.0, 4.0]) na: [1. 2. 3. 4.] a: array('d', [1.0, 20.0, 3.0, 4.0]) np.fromfile(file, dtype=float, count=-1, sep='', offset=0) \u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8005\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6784\u9020 ndarray \u3002 sep \uff1a\u5f53\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65f6\uff0c\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u3002 \u5982\u679c sep \u662f\u7a7a\u5b57\u7b26\u4e32\u5219\u8868\u793a\u6587\u4ef6\u5e94\u8be5\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\uff1b\u5982\u679c sep \u4e3a \" \" \u8868\u793a\u53ef\u4ee5\u5339\u914d0\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u3002 np.fromfunction(function, shape, *, dtype=float, **kwargs) function \u4f1a\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5750\u6807\u70b9\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002\u5047\u8bbe shape \u7684\u7ef4\u5ea6\u4e3a N \uff0c\u90a3\u4e48 function \u5c06\u6709 N \u4e2a\u53c2\u6570\uff0c function(x1,x2,...x_N) \u4f5c\u4e3a\u8be5\u5750\u6807\u70b9\u7684\u503c\u3002 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array([[0., 1., 2.], [1., 2., 3.], [2., 3., 4.]]) np.fromiter(iterable, dtype, count=-1) - \u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa 1-d \u7684\u6570\u7ec4 np . fromiter ( \"123\" , dtype = \"int64\" ) array([1, 2, 3], dtype=int64) np.fromstring(string, dtype=float, count=-1, sep='') - \u4ece\u5b57\u7b26\u4e32\u6216\u8005 raw binary \u4e2d\u521b\u5efa 1-d \u6570\u7ec4 sep \uff1a\u5982\u679c sep=\"\" \uff0c\u5219 string \u5c06\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u91ca\uff08\u5373\u6bcf\u4e2a\u5b57\u7b26\u4f5c\u4e3a ASCII \u7801\u503c\u5bf9\u5f85\uff09\uff0c \u4e0d\u5efa\u8bae \u89e6\u53d1\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002\u521b\u5efa\u7684\u6570\u7ec4\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u533a\u3002 a = \"abcdefg\" # \u89e6\u53d1\u4e8c\u8fdb\u5236\u6a21\u5f0f, \u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7f16\u7801\u88ab\u89e3\u91ca\u4e3a\u6574\u6570 a = np . fromstring ( a , dtype = np . int8 ) print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] setup_m.py:6: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead try: np.loadtxt - \u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u7ec4 np . loadtxt ( fname , dtype =< class ' float '>, comments=' #', delimiter=None, converters = None , skiprows = 0 , usecols = None , unpack = False , ndmin = 0 , encoding = 'bytes' , max_rows = None ) \u8981\u6c42\u6587\u672c\u6587\u4ef6\u6bcf\u4e00\u884c\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u503c comments \uff1a\u6307\u793a\u6ce8\u91ca\u884c\u7684\u8d77\u59cb\u5b57\u7b26\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u5217\u8868\uff08\u9ed8\u8ba4\u4e3a # \uff09\u3002 delimiter \uff1a\u6307\u5b9a\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u767d\u7b26\u3002 converters \uff1a\u5c06\u6307\u5b9a\u5217\u53f7 (0,1,2...) \u7684\u5217\u6570\u636e\u6267\u884c\u8f6c\u6362\uff0c\u662f\u4e00\u4e2a map \uff0c\u5982 {0:func1} \u8868\u793a\u5bf9\u7b2c\u4e00\u5217\u6570\u636e\u6267\u884c func1(val_0) \u3002 skiprows \uff1a\u6307\u5b9a\u8df3\u8fc7\u5f00\u5934\u7684\u591a\u5c11\u884c\u3002 usecols \uff1a\u6307\u5b9a\u8bfb\u53d6\u90a3\u4e9b\u5217\uff080\u8868\u793a\u7b2c\u4e00\u5217\u3002","title":"\u4ece\u73b0\u6709\u7684\u6570\u636e\u521b\u5efa"},{"location":"NumPy/8.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_3","text":"np.arange([start,] stop[, step,], dtype=None) - \u8fd4\u56de\u5747\u5300\u95f4\u9694\u7684\u503c\u7ec4\u6210\u7684 1-d \u6570\u7ec4 \u533a\u95f4\u662f\u534a\u95ed\u534a\u5f00\u7684 [start,stop) \uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c range \u51fd\u6570\u3002 start \u4e3a\u5f00\u59cb\u70b9\uff0c stop \u4e3a\u7ec8\u6b62\u70b9\uff0c step \u4e3a\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u8fd9\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002 \u5982\u679c step \u4e3a\u6d6e\u70b9\u6570\uff0c\u7ed3\u679c\u53ef\u80fd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u76f8\u7b49\u6bd4\u8f83\u4e0d\u51c6\u786e\uff08\u8ba1\u7b97\u673a\u7cbe\u5ea6\u6709\u9650\uff09\u3002 np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0) \u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684 1-d \u6570\u7ec4 \uff0c\u533a\u95f4\u662f\u95ed\u533a\u95f4 [start,stop] \u3002 endpoint \uff1a\u662f\u5426\u5305\u542b stop \u3002 retstep \uff1a\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de\u7684\u7ed3\u679c\u5305\u542b\u91c7\u6837\u6b65\u957f step \u3002 axis \uff1a\u7528\u4e8e\u50a8\u5b58\u91c7\u6837\u70b9\u7684 axis\uff0c\u9ed8\u8ba4\u4e3a 0\uff0c\u4ec5\u5f53 start \u548c stop \u662f array-like \u65f6\u751f\u6548\u3002\u4e8e 1.16.0 \u7248\u672c\u52a0\u5165\u3002 np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0) \u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u5bf9\u6570\u6570\u503c\u7ec4\u6210\u7684 1-d \u6570\u7ec4 \uff0c\u91c7\u6837\u70b9\u5f00\u59cb\u4e8e base^start \uff0c\u7ed3\u675f\u4e8e base^stop \u3002\u8f91\u4e0a\u76f8\u5f53\u4e8e\u5148\u6267\u884c arange \u83b7\u53d6\u6570\u7ec4 array \uff0c\u7136\u540e\u518d\u6267\u884c base^array[i] \u83b7\u53d6\u91c7\u6837\u70b9\u3002 base \uff1a\u5bf9\u6570\u7684\u5e95\u6570\u3002 axis \uff1a\u7528\u4e8e\u50a8\u5b58\u91c7\u6837\u70b9\u7684 axis\uff0c\u9ed8\u8ba4\u4e3a 0\uff0c\u4ec5\u5f53 start \u548c stop \u662f array-like \u65f6\u751f\u6548\u3002","title":"\u4ece\u6570\u503c\u533a\u95f4\u521b\u5efa"},{"location":"NumPy/8.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_4","text":"np.empty(shape, dtype=numpy.float64, order='C') \u6839\u636e\u6307\u5b9a\u7684 shape \u548c dtype \u521b\u5efa array\uff0c\u4f46\u4e0d\u521d\u59cb\u5316\uff0c\u5176\u5143\u7d20\u7684\u503c\u662f\u968f\u673a\u7684\u3002 np.empty_like(a, dtype=None, order='K', subok=True, shape=None) \u6839\u636e a \u7684 shape \u548c dtype \u521b\u5efa array\uff0c\u4f46\u4e0d\u521d\u59cb\u5316\uff0c\u5176\u5143\u7d20\u7684\u503c\u662f\u968f\u673a\u7684\u3002 np.zeros(shape, ...) - \u7c7b\u4f3c np.empty \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 0 np.ones(shape, ...) - \u7c7b\u4f3c np.empty \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 1 np.full(shape, fill_value, ...) - \u7c7b\u4f3c np.empty \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a fill_value np.zeros_like(a, ...) - \u7c7b\u4f3c np.empty_like \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 0 np.ones_like(a, ...) - \u7c7b\u4f3c np.empty_like \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a 1 np.full_like(a, fill_value, ...) - \u7c7b\u4f3c np.empty_like \uff0c\u4f46\u5143\u7d20\u7684\u521d\u59cb\u503c\u4e3a fill_value # \u5185\u5b58\u672a\u521d\u59cb\u5316 a = np . empty (( 3 , 2 ), order = \"C\" ) # \u5185\u5b58\u672a\u521d\u59cb\u5316 np . empty_like ( a ) array([[ 0. , 3. ], [ 0. , 3. ], [-2.12132034, 2.12132034]]) np.eye(N, M=None, k=0, dtype=float, order='C') - \u8fd4\u56de\u4e00\u4e2a 2-D \u6570\u7ec4\uff0c\u5bf9\u89d2\u7ebf\u5143\u7d201\uff0c\u5176\u4f59\u5143\u7d20\u4e3a0 N \uff1a\u884c\u6570 M \uff1a\u5217\u6570\uff0c\u82e5\u4e0d\u4f20\u5165 M \uff0c\u5219 N=M k \uff1a k=0 \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff1b k \u4e3a\u6b63\u6574\u6570\uff0c\u5bf9\u5e94\u7684\u4e0a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff1b k \u4e3a\u8d1f\u6574\u6570\uff0c\u5bf9\u5e94\u7684\u4e0b\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1 pprint . pprint ( np . eye ( N = 2 , M = 3 )) print () # \u53c2\u6570 k \u662f\u53ef\u4ee5\u8d85\u51fa\u8303\u56f4\u7684 pprint . pprint ( np . eye ( N = 2 , M = 3 , k = 1 )) array([[1., 0., 0.], [0., 1., 0.]]) array([[0., 1., 0.], [0., 0., 1.]]) np.identity(n, dtype=None) - \u8fd4\u56de\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635","title":"\u4ee5\u586b\u5145\u7684\u65b9\u5f0f\u521b\u5efa"},{"location":"NumPy/8.10.%E5%87%BD%E6%95%B0%E5%BA%93.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 numpy version: 1.18.1 \u968f\u673a\u6570\u5e93 \u51fd\u6570 \u8bf4\u660e seed \u786e\u5b9a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50 permutation \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u7684\u968f\u673a\u6392\u5217\u6216\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u6392\u5217\u7684\u8303\u56f4 shuffle \u5bf9\u4e00\u4e2a\u5e8f\u5217\u5c31\u5730\u968f\u673a\u6392\u5217 rand \u4ea7\u751f\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c randint \u4ece\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u9650\u8303\u56f4\u5185\u968f\u673a\u9009\u53d6\u6574\u6570 randn \u4ea7\u751f\u6b63\u6001\u5206\u5e03\uff08\u5e73\u5747\u503c\u4e3a0,\u6807\u51c6\u5dee\u4e3a1)\u7684\u6837\u672c\u503c\uff0c\u7c7b\u4f3c\u4e8eMATLAB\u63a5\u53e3 binomial \u4ea7\u751f_\u9879\u5206\u5e03\u7684\u6837\u672c\u503c normal \u4ea7\u751f\u6b63\u6001\uff08\u9ad8\u65af\uff09\u5206\u5e03\u7684\u6837\u672c\u503c beta \u4ea7\u751fBeta\u5206\u5e03\u7684\u6837\u672c\u503c chisquare \u4ea7\u751f\u5361\u65b9\u5206\u5e03\u7684\u6837\u672c\u503c gamma \u4ea7\u751fGamma\u5206\u5e03\u7684\u6837\u672c\u503c uniform \u4ea7\u751f\u5728[0,1)\u4e2d\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c \u968f\u673a\u62bd\u6837 np.random.choice(a, size=None, replace=True, p=None) \uff1a\u4ece\u4e00\u7ef4\u6570\u7ec4 a \u4e2d\u968f\u673a\u62bd\u53d6\u6837\u672c\u91cf\u4e3a size \u7684\u6837\u672c\u3002 a \u5fc5\u987b\u662f\u4e00\u7ef4\u7684\u3002 replace \u63a7\u5236\u662f\u5426\u91cd\u590d\u62bd\u6837\uff0c p \u662fa\u7684\u6982\u7387\u5206 \u5e03\uff0c p \u548c a \u5fc5\u987b\u6709\u76f8\u540c\u7684size\u3002 a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] np . random . choice ( a , size = ( 2 , 2 ), replace = False , p = None ) array([[1, 8], [3, 7]]) \u7ebf\u6027\u4ee3\u6570 \u5e38\u7528\u7684 numpy.linalg \u51fd\u6570\uff1a \u51fd\u6570 \u8bf4\u660e diag \u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u65b9\u9635\u7684\u5bf9\u89d2\u7ebf\uff08\u6216\u975e\u5bf9\u89d2\u7ebf\uff09\u5143\u7d20\uff0c\u6216\u5c06\u4e00\u7ef4\u6570\u7ec4 \u8f6c\u6362\u4e3a\u65b9\u9635\uff08\u975e\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a0) dot \u77e9\u9635\u4e58\u6cd5 trace \u8ba1\u7b97\u5bf9\u89d2\u7ebf\u5143\u7d20\u7684\u548c det \u8ba1\u7b97\u77e9\u9635\u884c\u5217\u5f0f eig \u8ba1\u7b97\u65b9\u9635\u7684\u672c\u5f81\u503c\u548c\u672c\u5f81\u5411\u91cf inv \u8ba1\u7b97\u65b9\u9635\u7684\u9006 pinv \u8ba1\u7b97\u77e9\u9635\u7684Moore-Penrose\u4f2a\u9006 qr \u8ba1\u7b97QR\u5206\u89e3 svd \u8ba1\u7b97\u5947\u5f02\u503c\u5206\u89e3\uff08SVD) solve \u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4$Ax = b$\uff0c\u5176\u4e2d$A$\u4e3a\u4e00\u4e2a\u65b9\u9635 Istsq \u8ba1\u7b97$Ax = b$\u7684\u6700\u5c0f\u4e8c\u4e58\u89e3","title":"8.10.\u51fd\u6570\u5e93"},{"location":"NumPy/8.10.%E5%87%BD%E6%95%B0%E5%BA%93.html#_1","text":"\u51fd\u6570 \u8bf4\u660e seed \u786e\u5b9a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50 permutation \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u7684\u968f\u673a\u6392\u5217\u6216\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u6392\u5217\u7684\u8303\u56f4 shuffle \u5bf9\u4e00\u4e2a\u5e8f\u5217\u5c31\u5730\u968f\u673a\u6392\u5217 rand \u4ea7\u751f\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c randint \u4ece\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u9650\u8303\u56f4\u5185\u968f\u673a\u9009\u53d6\u6574\u6570 randn \u4ea7\u751f\u6b63\u6001\u5206\u5e03\uff08\u5e73\u5747\u503c\u4e3a0,\u6807\u51c6\u5dee\u4e3a1)\u7684\u6837\u672c\u503c\uff0c\u7c7b\u4f3c\u4e8eMATLAB\u63a5\u53e3 binomial \u4ea7\u751f_\u9879\u5206\u5e03\u7684\u6837\u672c\u503c normal \u4ea7\u751f\u6b63\u6001\uff08\u9ad8\u65af\uff09\u5206\u5e03\u7684\u6837\u672c\u503c beta \u4ea7\u751fBeta\u5206\u5e03\u7684\u6837\u672c\u503c chisquare \u4ea7\u751f\u5361\u65b9\u5206\u5e03\u7684\u6837\u672c\u503c gamma \u4ea7\u751fGamma\u5206\u5e03\u7684\u6837\u672c\u503c uniform \u4ea7\u751f\u5728[0,1)\u4e2d\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c","title":"\u968f\u673a\u6570\u5e93"},{"location":"NumPy/8.10.%E5%87%BD%E6%95%B0%E5%BA%93.html#_2","text":"np.random.choice(a, size=None, replace=True, p=None) \uff1a\u4ece\u4e00\u7ef4\u6570\u7ec4 a \u4e2d\u968f\u673a\u62bd\u53d6\u6837\u672c\u91cf\u4e3a size \u7684\u6837\u672c\u3002 a \u5fc5\u987b\u662f\u4e00\u7ef4\u7684\u3002 replace \u63a7\u5236\u662f\u5426\u91cd\u590d\u62bd\u6837\uff0c p \u662fa\u7684\u6982\u7387\u5206 \u5e03\uff0c p \u548c a \u5fc5\u987b\u6709\u76f8\u540c\u7684size\u3002 a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] np . random . choice ( a , size = ( 2 , 2 ), replace = False , p = None ) array([[1, 8], [3, 7]])","title":"\u968f\u673a\u62bd\u6837"},{"location":"NumPy/8.10.%E5%87%BD%E6%95%B0%E5%BA%93.html#_3","text":"\u5e38\u7528\u7684 numpy.linalg \u51fd\u6570\uff1a \u51fd\u6570 \u8bf4\u660e diag \u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u65b9\u9635\u7684\u5bf9\u89d2\u7ebf\uff08\u6216\u975e\u5bf9\u89d2\u7ebf\uff09\u5143\u7d20\uff0c\u6216\u5c06\u4e00\u7ef4\u6570\u7ec4 \u8f6c\u6362\u4e3a\u65b9\u9635\uff08\u975e\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a0) dot \u77e9\u9635\u4e58\u6cd5 trace \u8ba1\u7b97\u5bf9\u89d2\u7ebf\u5143\u7d20\u7684\u548c det \u8ba1\u7b97\u77e9\u9635\u884c\u5217\u5f0f eig \u8ba1\u7b97\u65b9\u9635\u7684\u672c\u5f81\u503c\u548c\u672c\u5f81\u5411\u91cf inv \u8ba1\u7b97\u65b9\u9635\u7684\u9006 pinv \u8ba1\u7b97\u77e9\u9635\u7684Moore-Penrose\u4f2a\u9006 qr \u8ba1\u7b97QR\u5206\u89e3 svd \u8ba1\u7b97\u5947\u5f02\u503c\u5206\u89e3\uff08SVD) solve \u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4$Ax = b$\uff0c\u5176\u4e2d$A$\u4e3a\u4e00\u4e2a\u65b9\u9635 Istsq \u8ba1\u7b97$Ax = b$\u7684\u6700\u5c0f\u4e8c\u4e58\u89e3","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"NumPy/8.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html","text":"import numpy as np import os Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 x = np . arange ( 20 ) x . resize ( 4 , 5 ) npy ny.save(file, arr, allow_pickle=True, fix_imports=True) \uff1a\u5c06 \u4e00\u4e2a numpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a .npy \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npy \u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd arr \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4 allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 save_path = \"array\" # \u4fdd\u5b58\u65f6\u4f1a\u81ea\u52a8\u6dfb\u52a0.npy\u540e\u7f00 np . save ( save_path , x ) # npy\u6587\u4ef6\u88ab\u4fdd\u5b58\u5728\u5de5\u4f5c\u76ee\u5f55 [ i for i in os . listdir () if i . endswith ( \"npy\" )] ['array.npy'] \u8bfb\u5165 .npy \u6587\u4ef6 ny.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII') \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u7ec4\u3002\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7ec4\uff0c\u6216\u8005\u5b57\u5178\uff08\u5f53\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f savez \u751f\u6210\u65f6\uff09 file \uff1a\u4e00\u4e2a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002 mmap_mode \uff1a\u5982\u679c\u4e0d\u662fNone\uff0c\u5219memory-map\u8be5\u6587\u4ef6\u3002\u6b64\u65f6\u5bf9\u6570\u7ec4\u7684\u4fee\u6539\u4f1a\u540c\u6b65\u5230\u6587\u4ef6\u4e0a\u3002\u5f53\u8bfb\u53d6\u5927\u6587\u4ef6\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5fc5\u4e00\u6b21\u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\u3002\u53ef\u9009\u503c\u4e3aNone/'r+'/'r'/'w+'/'c' allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 encoding \uff1a\u53ea\u7528\u4e8epython2\uff0c\u8bfb\u53d6python2\u5b57\u7b26\u4e32\u3002 np . load ( \"array.npy\" , allow_pickle = True ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]) npz ny.savez(file, *args, **kwds) \uff1a\u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npz \uff0c\u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd args \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\u3002\u8fd9\u4e9b\u6570\u7ec4\u7684\u540d\u5b57\u5c06\u88ab\u81ea\u52a8\u547d\u540d\u4e3a arr_0/arr_1/... kwds \uff1a\u5c06\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u5c31\u662f\u952e\u7684\u540d\u5b57 np . savez ( save_path , x , x ) \u8bfb\u5165 .npyz \u6587\u4ef6 np . load ( \"array.npz\" , allow_pickle = True ) <numpy.lib.npyio.NpzFile at 0x1d934ea1be0> \u53e6\u5916\uff0c np.savez_compressed \u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u538b\u7f29\u6587\u4ef6\u3002 \u6587\u672c\u6587\u4ef6 np.savetxt() \u5c06\u4e00\u4e2anumpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff1a np . savetxt ( save_path , x ) \u8bfb\u5165\u6587\u672c\u6587\u4ef6 np . loadtxt ( \"array\" ) array([[ 0., 1., 2., 3., 4.], [ 5., 6., 7., 8., 9.], [10., 11., 12., 13., 14.], [15., 16., 17., 18., 19.]]) \u6e05\u9664\u6587\u4ef6 try : os . remove ( \"array\" ) os . remove ( \"array.npy\" ) os . remove ( \"array.npz\" ) except : pass","title":"8.11.\u4fdd\u5b58\u548c\u52a0\u8f7d"},{"location":"NumPy/8.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html#npy","text":"ny.save(file, arr, allow_pickle=True, fix_imports=True) \uff1a\u5c06 \u4e00\u4e2a numpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a .npy \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npy \u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd arr \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4 allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 save_path = \"array\" # \u4fdd\u5b58\u65f6\u4f1a\u81ea\u52a8\u6dfb\u52a0.npy\u540e\u7f00 np . save ( save_path , x ) # npy\u6587\u4ef6\u88ab\u4fdd\u5b58\u5728\u5de5\u4f5c\u76ee\u5f55 [ i for i in os . listdir () if i . endswith ( \"npy\" )] ['array.npy'] \u8bfb\u5165 .npy \u6587\u4ef6 ny.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII') \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u7ec4\u3002\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7ec4\uff0c\u6216\u8005\u5b57\u5178\uff08\u5f53\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f savez \u751f\u6210\u65f6\uff09 file \uff1a\u4e00\u4e2a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002 mmap_mode \uff1a\u5982\u679c\u4e0d\u662fNone\uff0c\u5219memory-map\u8be5\u6587\u4ef6\u3002\u6b64\u65f6\u5bf9\u6570\u7ec4\u7684\u4fee\u6539\u4f1a\u540c\u6b65\u5230\u6587\u4ef6\u4e0a\u3002\u5f53\u8bfb\u53d6\u5927\u6587\u4ef6\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5fc5\u4e00\u6b21\u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\u3002\u53ef\u9009\u503c\u4e3aNone/'r+'/'r'/'w+'/'c' allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 encoding \uff1a\u53ea\u7528\u4e8epython2\uff0c\u8bfb\u53d6python2\u5b57\u7b26\u4e32\u3002 np . load ( \"array.npy\" , allow_pickle = True ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])","title":"npy"},{"location":"NumPy/8.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html#npz","text":"ny.savez(file, *args, **kwds) \uff1a\u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npz \uff0c\u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd args \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\u3002\u8fd9\u4e9b\u6570\u7ec4\u7684\u540d\u5b57\u5c06\u88ab\u81ea\u52a8\u547d\u540d\u4e3a arr_0/arr_1/... kwds \uff1a\u5c06\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u5c31\u662f\u952e\u7684\u540d\u5b57 np . savez ( save_path , x , x ) \u8bfb\u5165 .npyz \u6587\u4ef6 np . load ( \"array.npz\" , allow_pickle = True ) <numpy.lib.npyio.NpzFile at 0x1d934ea1be0> \u53e6\u5916\uff0c np.savez_compressed \u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u538b\u7f29\u6587\u4ef6\u3002","title":"npz"},{"location":"NumPy/8.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html#_1","text":"np.savetxt() \u5c06\u4e00\u4e2anumpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff1a np . savetxt ( save_path , x ) \u8bfb\u5165\u6587\u672c\u6587\u4ef6 np . loadtxt ( \"array\" ) array([[ 0., 1., 2., 3., 4.], [ 5., 6., 7., 8., 9.], [10., 11., 12., 13., 14.], [15., 16., 17., 18., 19.]]) \u6e05\u9664\u6587\u4ef6 try : os . remove ( \"array\" ) os . remove ( \"array.npy\" ) os . remove ( \"array.npz\" ) except : pass","title":"\u6587\u672c\u6587\u4ef6"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html","text":"import numpy as np import pprint Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.28 numpy version: 1.18.1 \u7ed3\u6784\u5316\u6570\u7ec4\u5e38\u7528\u64cd\u4f5c x = np . array ([( 'Rex' , 9 , 81.0 ), ( 'Fido' , 3 , 27.0 )], dtype = [( 'name' , 'U10' ), ( 'age' , 'i4' ), ( 'weight' , 'f4' )]) pprint . pprint ( x ) array([('Rex', 9, 81.), ('Fido', 3, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) \u901a\u8fc7\u7d22\u5f15\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u7ed3\u6784 pprint . pprint ( x [ 0 ]) # \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \u5b57\u6bb5\u540d\u79f0 \u5efa\u7acb\u7d22\u5f15\u6765\u8bbf\u95ee\u548c\u4fee\u6539\u7ed3\u6784\u5316\u6570\u7ec4\u7684\u5404\u4e2a \u5b57\u6bb5\uff1a pprint . pprint ( x [ \"name\" ]) pprint . pprint ( x [[ \"age\" , \"name\" ]]) # \u6839\u636e \u5b57\u6bb5\u540d\u79f0 \u505a\u8fc7\u6ee4 pprint . pprint ( x [ x [ \"age\" ] > 5 ][ \"name\" ]) # \u4fee\u6539\u5168\u90e8\u6570\u7ec4\u7684age\u5b57\u6bb5 x [ \"age\" ] = 20 pprint . pprint ( x ) ('Rex', 9, 81.) array(['Rex', 'Fido'], dtype='<U10') array([(9, 'Rex'), (3, 'Fido')], dtype={'names':['age','name'], 'formats':['<i4','<U10'], 'offsets':[40,0], 'itemsize':48}) array(['Rex'], dtype='<U10') array([('Rex', 20, 81.), ('Fido', 20, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4 list of tuple \u53ef\u4ee5\u901a\u8fc7 a list of tuple \u7684\u5f62\u5f0f\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002 Tuple\u7684\u5f62\u5f0f\u662f (fieldname, datatype, Shape) \u3002 fieldname \u662f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4f7f\u7528title\uff0c\u5219\u4e3a\u5143\u7ec4\u3002 fieldname \u3001 Shape \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c fieldname \u7701\u7565\uff0c\u5219\u7528 f# \u7684\u9ed8\u8ba4\u540d\u79f0\u4ee3\u66ff\uff0c shape \u5982\u679c\u7701\u7565\uff0c\u5219\u9ed8\u8ba4\u4e3a (1,) \u3002 np . dtype ([( 'x' , 'f4' ), ( 'y' , np . float32 ), ( 'z' , 'f4' , ( 2 , 2 ))]) dtype([('x', '<f4'), ('y', '<f4'), ('z', '<f4', (2, 2))]) \u5982\u679c fieldname \u662f\u7a7a\u5b57\u7b26\u4e32 '' \uff0c\u5219\u5c06\u4e3a\u5b57\u6bb5\u6307\u5b9a\u683c\u5f0f\u4e3a f# \u7684\u9ed8\u8ba4\u540d\u79f0\uff0c\u5176\u4e2d # \u662f\u5b57\u6bb5\u7684\u6574\u6570\u7d22\u5f15\uff0c\u4ece\u5de6\u4fa7\u5f00\u59cb\u4ece0\u5f00\u59cb\u8ba1\u6570\uff1a np . dtype ([( 'x' , 'f4' ), ( '' , 'i4' ), ( 'z' , 'i8' )]) dtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')]) \u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\u4e32 \u53ef\u4ee5\u901a\u8fc7\u201cA string of comma-separated dtype specifications\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u5b57\u7b26\u4e32\u8981\u7b26\u5408\u89c4\u8303\u3002 np . dtype ( 'i8, f4, S3' ) np . dtype ( '3int8, float32, (2, 3)float64' ) dtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))]) dict of field parameter arrays \u901a\u8fc7\u201c\u5173\u952e\u5b57\u53c2\u6570\u7ec4\u6210\u7684\u5b57\u5178\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u8fd9\u662f\u6700\u7075\u6d3b\u7684\u89c4\u8303\u5f62\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u63a7\u5236\u5b57\u6bb5\u7684\u5b57\u8282\u504f\u79fb\u548c\u7ed3\u6784\u7684\u9879\u76ee\u5927\u5c0f\u3002 dict\u6709\u4e24\u4e2a\u5fc5\u9700\u952e names \u548c format \uff0c\u4ee5\u53ca\u56db\u4e2a\u53ef\u9009\u952e offsets \u3001 itemsize \u3001 Aligned \u548c title \uff1a names \u548c format \u7684\u503c\u5e94\u8be5\u5206\u522b\u662f\u76f8\u540c\u957f\u5ea6\u7684\u5b57\u6bb5\u540d\u5217\u8868\u548cdtype\u89c4\u8303\u5217\u8868\u3002 \u53ef\u9009\u7684 offsets \u503c\u5e94\u8be5\u662f\u6574\u6570\u5b57\u8282\u504f\u79fb\u91cf\u7684\u5217\u8868\uff0c\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u5982\u679c\u672a\u7ed9\u51fa offsets \uff0c\u5219\u81ea\u52a8\u786e\u5b9a\u504f\u79fb\u91cf\u3002 \u53ef\u9009\u7684 itemsize \u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u6574\u6570\uff0c \u63cf\u8ff0 dtype \u7684\u603b\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u5b83\u5fc5\u987b\u8db3\u591f\u5927\u4ee5\u5305\u542b\u6240\u6709\u5b57\u6bb5\u3002 \u53ef\u9009\u7684 Aligned \u503c\u53ef\u4ee5\u8bbe\u7f6e\u4e3aTrue\uff0c\u4ee5\u4f7f\u81ea\u52a8\u504f\u79fb\u8ba1\u7b97\u4f7f\u7528\u5bf9\u9f50\u7684\u504f\u79fb\u91cf\uff08 \u8bf7\u53c2\u9605\u81ea\u52a8\u5b57\u8282\u504f\u79fb\u91cf\u548c\u5bf9\u9f50 \uff09\u3002 \u53ef\u9009\u7684 titles \u503c\u5e94\u8be5\u662f\u957f\u5ea6\u4e0e names \u76f8\u540c\u7684\u6807\u9898\u5217\u8868\u3002 np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ]}) np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ], 'offsets' : [ 0 , 4 ], 'itemsize' : 12 }) dtype({'names':['col1','col2'], 'formats':['<i4','<f4'], 'offsets':[0,4], 'itemsize':12}) dict of fieldnam \u901a\u8fc7 dict of fieldname \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u4e0d\u9f13\u52b1\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u56e0\u4e3aPython\u5b57\u5178\u5728Python 3.6\u4e4b\u524d\u7684Python\u7248\u672c\u4e2d\u4e0d\u4fdd\u7559\u987a\u5e8f\uff0c\u4f46\u7ed3\u6784\u5316dtype\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u6709\u610f\u4e49\u3002 \u5b57\u5178\u7684\u5173\u952e\u5b57\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u6307\u5b9a\u7c7b\u578b\u548c\u504f\u79fb\u91cf\u7684\u5143\u7ec4\uff1a np . dtype ({ 'col1' : ( 'i1' , 0 ), 'col2' : ( 'f4' , 1 )}) dtype([('col1', 'i1'), ('col2', '<f4')]) \u64cd\u4f5c\u548c\u663e\u793a\u7ed3\u6784\u5316\u6570\u636e\u7c7b\u578b d = np . dtype ([( 'x' , 'i8' ), ( 'y' , 'f4' )]) print ( d . names ) print ( d . fields ) ('x', 'y') {'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)} \u4e3a\u4ec0\u4e48\u9700\u8981\u7ed3\u6784\u5316\u6570\u7ec4 numpy\u7ed3\u6784\u5316\u6570\u7ec4\u4e2d\u7684\u7528\u6cd5\u597d\u50cf\u7c7b\u4f3c\u4e8ePython\u7684dict of list\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528numpy\u7ed3\u6784\u5316\u6570\u7ec4\u5462\uff1f \u56e0\u4e3anumpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u5e95\u5c42\u662f\u7c7b\u4f3cC\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5360\u7528\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\uff0c\u5e76\u4e14numpy\u5e95\u5c42\u662fC\u5b9e\u73b0\uff0cnumpy\u6570\u7ec4\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u6027\u80fd\u597d\u4e8ePython\u7684\u7684\u5b57\u5178\u5217\u8868\u3002 \u53ef\u4ee5\u6765\u505a\u4e00\u4e0b\u6027\u80fd\u6bd4\u8f83\u3002 import time ### \u5b9a\u4e49\u8ba1\u65f6\u5668 def timer ( func ): def wrapper ( self , * args , ** kwargs ): start = time . process_time () something = func ( self , * args , ** kwargs ) end = time . process_time () type_str = func . __repr__ () print ( \"\u5f53\u524d\u51fd\u6570\uff1a\" , type_str , \" \\n \" , \"\u7528\u65f6\uff1a\" , end - start , \"\u79d2\" , sep = \"\" ) return something return wrapper # numpy\u7248\u672c\u957f\u4e00\u5c81 @timer def addage_numpy ( data , loop ): for i in range ( loop ): data [ 'age' ] += 1 # python\u5faa\u73af\u957f\u4e00\u5c81 @timer def addage_python ( data , loop ): for j in range ( loop ): for i in range ( 4 ): data [ i ][ \"age\" ] += 1 # \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4 names = [ 'Lin' , 'Pan' , 'Shen' , 'Zhou' ] ages = [ 28 , 33 , 34 , 29 ] grades = [ 25 , 26 , 27 , 24 ] data_np = np . zeros ( 4 , dtype = { 'names' :( 'name' , 'age' , 'grade' ), 'formats' :( 'U10' , 'i4' , 'i4' ) }) data_np [ 'name' ] = names data_np [ 'age' ] = ages data_np [ 'grade' ] = grades data_py = [] for i in range ( 4 ): person = { \"name\" : names [ i ], \"age\" : ages [ i ], \"grade\" : grades [ i ]} data_py . append ( person ) addage_numpy ( data_np , loop = 1000000 ) addage_python ( data_py , loop = 1000000 ) \u5f53\u524d\u51fd\u6570\uff1a<function addage_numpy at 0x0000021944ECBA60> \u7528\u65f6\uff1a4.453125\u79d2 \u5f53\u524d\u51fd\u6570\uff1a<function addage_python at 0x0000021944ECB9D8> \u7528\u65f6\uff1a1.421875\u79d2 \u8bb0\u5f55\u6570\u7ec4 \u8bb0\u5f55\u6570\u7ec4\u548c\u7ed3\u6784\u6570\u7ec4\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u573a\u666f\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bb0\u5f55\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u6570\u636e\u3002 \u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f numpy.rec.array \u3002 recordarr = np . rec . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ),( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) print ( type ( recordarr )) # \u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u6570\u636e recordarr . foo <class 'numpy.recarray'> array([1, 2]) numpy.rec.array \u53ef\u4ee5\u5c06\u5404\u79cd\u53c2\u6570\u8f6c\u6362\u4e3a\u8bb0\u5f55\u6570\u7ec4\uff0c\u5305\u62ec\u7ed3\u6784\u5316\u6570\u7ec4\uff1a arr = np . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ), ( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) recordarr = np . rec . array ( arr ) pprint . pprint ( recordarr ) rec.array([(1, 2., b'Hello'), (2, 3., b'World')], dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]) numpy.rec \u6a21\u5757\u63d0\u4f9b\u4e86\u591a\u4e2a\u4fbf\u5229\u7684\u51fd\u6570\u6765\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\uff0c\u8bf7\u53c2\u9605 \u8bb0\u5f55\u6570\u7ec4\u521b\u5efa\u65b9\u6cd5\u5217\u8868 \u3002 \u6ce8\u610f\uff1a numpy.rec \u662f numpy.core.records \u7684\u9996\u9009\u522b\u540d\u3002 core.records.array(obj[, dtype, shape, \u2026]) \uff1a\u4ece\u5404\u79cd\u5404\u6837\u7684\u5bf9\u8c61\u6784\u9020\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromarrays(arrayList[, dtype, \u2026]) \uff1a\u4ece\u4e00\u7ef4\u7684list\u6216array\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromrecords(recList[, dtype, \u2026]) \uff1a\u4ece\u6587\u672c\u683c\u5f0f\u7684list\u521b\u5efa\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromstring(datastring[, dtype, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u6570\u636e\u521b\u5efa\uff08\u53ea\u8bfb\uff09\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromfile(fd[, dtype, shape, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6570\u636e\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002 \u53c2\u8003 \u4e00\u6587\u5f7b\u5e95\u641e\u61c2numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u2014\u2014structured array Numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4","title":"8.12.\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_1","text":"x = np . array ([( 'Rex' , 9 , 81.0 ), ( 'Fido' , 3 , 27.0 )], dtype = [( 'name' , 'U10' ), ( 'age' , 'i4' ), ( 'weight' , 'f4' )]) pprint . pprint ( x ) array([('Rex', 9, 81.), ('Fido', 3, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) \u901a\u8fc7\u7d22\u5f15\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u7ed3\u6784 pprint . pprint ( x [ 0 ]) # \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \u5b57\u6bb5\u540d\u79f0 \u5efa\u7acb\u7d22\u5f15\u6765\u8bbf\u95ee\u548c\u4fee\u6539\u7ed3\u6784\u5316\u6570\u7ec4\u7684\u5404\u4e2a \u5b57\u6bb5\uff1a pprint . pprint ( x [ \"name\" ]) pprint . pprint ( x [[ \"age\" , \"name\" ]]) # \u6839\u636e \u5b57\u6bb5\u540d\u79f0 \u505a\u8fc7\u6ee4 pprint . pprint ( x [ x [ \"age\" ] > 5 ][ \"name\" ]) # \u4fee\u6539\u5168\u90e8\u6570\u7ec4\u7684age\u5b57\u6bb5 x [ \"age\" ] = 20 pprint . pprint ( x ) ('Rex', 9, 81.) array(['Rex', 'Fido'], dtype='<U10') array([(9, 'Rex'), (3, 'Fido')], dtype={'names':['age','name'], 'formats':['<i4','<U10'], 'offsets':[40,0], 'itemsize':48}) array(['Rex'], dtype='<U10') array([('Rex', 20, 81.), ('Fido', 20, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')])","title":"\u7ed3\u6784\u5316\u6570\u7ec4\u5e38\u7528\u64cd\u4f5c"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_2","text":"","title":"\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#list-of-tuple","text":"\u53ef\u4ee5\u901a\u8fc7 a list of tuple \u7684\u5f62\u5f0f\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002 Tuple\u7684\u5f62\u5f0f\u662f (fieldname, datatype, Shape) \u3002 fieldname \u662f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4f7f\u7528title\uff0c\u5219\u4e3a\u5143\u7ec4\u3002 fieldname \u3001 Shape \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c fieldname \u7701\u7565\uff0c\u5219\u7528 f# \u7684\u9ed8\u8ba4\u540d\u79f0\u4ee3\u66ff\uff0c shape \u5982\u679c\u7701\u7565\uff0c\u5219\u9ed8\u8ba4\u4e3a (1,) \u3002 np . dtype ([( 'x' , 'f4' ), ( 'y' , np . float32 ), ( 'z' , 'f4' , ( 2 , 2 ))]) dtype([('x', '<f4'), ('y', '<f4'), ('z', '<f4', (2, 2))]) \u5982\u679c fieldname \u662f\u7a7a\u5b57\u7b26\u4e32 '' \uff0c\u5219\u5c06\u4e3a\u5b57\u6bb5\u6307\u5b9a\u683c\u5f0f\u4e3a f# \u7684\u9ed8\u8ba4\u540d\u79f0\uff0c\u5176\u4e2d # \u662f\u5b57\u6bb5\u7684\u6574\u6570\u7d22\u5f15\uff0c\u4ece\u5de6\u4fa7\u5f00\u59cb\u4ece0\u5f00\u59cb\u8ba1\u6570\uff1a np . dtype ([( 'x' , 'f4' ), ( '' , 'i4' ), ( 'z' , 'i8' )]) dtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')])","title":"list of tuple"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_3","text":"\u53ef\u4ee5\u901a\u8fc7\u201cA string of comma-separated dtype specifications\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u5b57\u7b26\u4e32\u8981\u7b26\u5408\u89c4\u8303\u3002 np . dtype ( 'i8, f4, S3' ) np . dtype ( '3int8, float32, (2, 3)float64' ) dtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))])","title":"\u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\u4e32"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#dict-of-field-parameter-arrays","text":"\u901a\u8fc7\u201c\u5173\u952e\u5b57\u53c2\u6570\u7ec4\u6210\u7684\u5b57\u5178\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u8fd9\u662f\u6700\u7075\u6d3b\u7684\u89c4\u8303\u5f62\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u63a7\u5236\u5b57\u6bb5\u7684\u5b57\u8282\u504f\u79fb\u548c\u7ed3\u6784\u7684\u9879\u76ee\u5927\u5c0f\u3002 dict\u6709\u4e24\u4e2a\u5fc5\u9700\u952e names \u548c format \uff0c\u4ee5\u53ca\u56db\u4e2a\u53ef\u9009\u952e offsets \u3001 itemsize \u3001 Aligned \u548c title \uff1a names \u548c format \u7684\u503c\u5e94\u8be5\u5206\u522b\u662f\u76f8\u540c\u957f\u5ea6\u7684\u5b57\u6bb5\u540d\u5217\u8868\u548cdtype\u89c4\u8303\u5217\u8868\u3002 \u53ef\u9009\u7684 offsets \u503c\u5e94\u8be5\u662f\u6574\u6570\u5b57\u8282\u504f\u79fb\u91cf\u7684\u5217\u8868\uff0c\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u5982\u679c\u672a\u7ed9\u51fa offsets \uff0c\u5219\u81ea\u52a8\u786e\u5b9a\u504f\u79fb\u91cf\u3002 \u53ef\u9009\u7684 itemsize \u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u6574\u6570\uff0c \u63cf\u8ff0 dtype \u7684\u603b\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u5b83\u5fc5\u987b\u8db3\u591f\u5927\u4ee5\u5305\u542b\u6240\u6709\u5b57\u6bb5\u3002 \u53ef\u9009\u7684 Aligned \u503c\u53ef\u4ee5\u8bbe\u7f6e\u4e3aTrue\uff0c\u4ee5\u4f7f\u81ea\u52a8\u504f\u79fb\u8ba1\u7b97\u4f7f\u7528\u5bf9\u9f50\u7684\u504f\u79fb\u91cf\uff08 \u8bf7\u53c2\u9605\u81ea\u52a8\u5b57\u8282\u504f\u79fb\u91cf\u548c\u5bf9\u9f50 \uff09\u3002 \u53ef\u9009\u7684 titles \u503c\u5e94\u8be5\u662f\u957f\u5ea6\u4e0e names \u76f8\u540c\u7684\u6807\u9898\u5217\u8868\u3002 np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ]}) np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ], 'offsets' : [ 0 , 4 ], 'itemsize' : 12 }) dtype({'names':['col1','col2'], 'formats':['<i4','<f4'], 'offsets':[0,4], 'itemsize':12})","title":"dict of field parameter arrays"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#dict-of-fieldnam","text":"\u901a\u8fc7 dict of fieldname \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u4e0d\u9f13\u52b1\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u56e0\u4e3aPython\u5b57\u5178\u5728Python 3.6\u4e4b\u524d\u7684Python\u7248\u672c\u4e2d\u4e0d\u4fdd\u7559\u987a\u5e8f\uff0c\u4f46\u7ed3\u6784\u5316dtype\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u6709\u610f\u4e49\u3002 \u5b57\u5178\u7684\u5173\u952e\u5b57\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u6307\u5b9a\u7c7b\u578b\u548c\u504f\u79fb\u91cf\u7684\u5143\u7ec4\uff1a np . dtype ({ 'col1' : ( 'i1' , 0 ), 'col2' : ( 'f4' , 1 )}) dtype([('col1', 'i1'), ('col2', '<f4')])","title":"dict of fieldnam"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_4","text":"d = np . dtype ([( 'x' , 'i8' ), ( 'y' , 'f4' )]) print ( d . names ) print ( d . fields ) ('x', 'y') {'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)}","title":"\u64cd\u4f5c\u548c\u663e\u793a\u7ed3\u6784\u5316\u6570\u636e\u7c7b\u578b"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_5","text":"numpy\u7ed3\u6784\u5316\u6570\u7ec4\u4e2d\u7684\u7528\u6cd5\u597d\u50cf\u7c7b\u4f3c\u4e8ePython\u7684dict of list\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528numpy\u7ed3\u6784\u5316\u6570\u7ec4\u5462\uff1f \u56e0\u4e3anumpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u5e95\u5c42\u662f\u7c7b\u4f3cC\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5360\u7528\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\uff0c\u5e76\u4e14numpy\u5e95\u5c42\u662fC\u5b9e\u73b0\uff0cnumpy\u6570\u7ec4\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u6027\u80fd\u597d\u4e8ePython\u7684\u7684\u5b57\u5178\u5217\u8868\u3002 \u53ef\u4ee5\u6765\u505a\u4e00\u4e0b\u6027\u80fd\u6bd4\u8f83\u3002 import time ### \u5b9a\u4e49\u8ba1\u65f6\u5668 def timer ( func ): def wrapper ( self , * args , ** kwargs ): start = time . process_time () something = func ( self , * args , ** kwargs ) end = time . process_time () type_str = func . __repr__ () print ( \"\u5f53\u524d\u51fd\u6570\uff1a\" , type_str , \" \\n \" , \"\u7528\u65f6\uff1a\" , end - start , \"\u79d2\" , sep = \"\" ) return something return wrapper # numpy\u7248\u672c\u957f\u4e00\u5c81 @timer def addage_numpy ( data , loop ): for i in range ( loop ): data [ 'age' ] += 1 # python\u5faa\u73af\u957f\u4e00\u5c81 @timer def addage_python ( data , loop ): for j in range ( loop ): for i in range ( 4 ): data [ i ][ \"age\" ] += 1 # \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4 names = [ 'Lin' , 'Pan' , 'Shen' , 'Zhou' ] ages = [ 28 , 33 , 34 , 29 ] grades = [ 25 , 26 , 27 , 24 ] data_np = np . zeros ( 4 , dtype = { 'names' :( 'name' , 'age' , 'grade' ), 'formats' :( 'U10' , 'i4' , 'i4' ) }) data_np [ 'name' ] = names data_np [ 'age' ] = ages data_np [ 'grade' ] = grades data_py = [] for i in range ( 4 ): person = { \"name\" : names [ i ], \"age\" : ages [ i ], \"grade\" : grades [ i ]} data_py . append ( person ) addage_numpy ( data_np , loop = 1000000 ) addage_python ( data_py , loop = 1000000 ) \u5f53\u524d\u51fd\u6570\uff1a<function addage_numpy at 0x0000021944ECBA60> \u7528\u65f6\uff1a4.453125\u79d2 \u5f53\u524d\u51fd\u6570\uff1a<function addage_python at 0x0000021944ECB9D8> \u7528\u65f6\uff1a1.421875\u79d2","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_6","text":"\u8bb0\u5f55\u6570\u7ec4\u548c\u7ed3\u6784\u6570\u7ec4\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u573a\u666f\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bb0\u5f55\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u6570\u636e\u3002 \u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f numpy.rec.array \u3002 recordarr = np . rec . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ),( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) print ( type ( recordarr )) # \u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u6570\u636e recordarr . foo <class 'numpy.recarray'> array([1, 2]) numpy.rec.array \u53ef\u4ee5\u5c06\u5404\u79cd\u53c2\u6570\u8f6c\u6362\u4e3a\u8bb0\u5f55\u6570\u7ec4\uff0c\u5305\u62ec\u7ed3\u6784\u5316\u6570\u7ec4\uff1a arr = np . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ), ( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) recordarr = np . rec . array ( arr ) pprint . pprint ( recordarr ) rec.array([(1, 2., b'Hello'), (2, 3., b'World')], dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]) numpy.rec \u6a21\u5757\u63d0\u4f9b\u4e86\u591a\u4e2a\u4fbf\u5229\u7684\u51fd\u6570\u6765\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\uff0c\u8bf7\u53c2\u9605 \u8bb0\u5f55\u6570\u7ec4\u521b\u5efa\u65b9\u6cd5\u5217\u8868 \u3002 \u6ce8\u610f\uff1a numpy.rec \u662f numpy.core.records \u7684\u9996\u9009\u522b\u540d\u3002 core.records.array(obj[, dtype, shape, \u2026]) \uff1a\u4ece\u5404\u79cd\u5404\u6837\u7684\u5bf9\u8c61\u6784\u9020\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromarrays(arrayList[, dtype, \u2026]) \uff1a\u4ece\u4e00\u7ef4\u7684list\u6216array\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromrecords(recList[, dtype, \u2026]) \uff1a\u4ece\u6587\u672c\u683c\u5f0f\u7684list\u521b\u5efa\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromstring(datastring[, dtype, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u6570\u636e\u521b\u5efa\uff08\u53ea\u8bfb\uff09\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromfile(fd[, dtype, shape, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6570\u636e\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002","title":"\u8bb0\u5f55\u6570\u7ec4"},{"location":"NumPy/8.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_7","text":"\u4e00\u6587\u5f7b\u5e95\u641e\u61c2numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u2014\u2014structured array Numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4","title":"\u53c2\u8003"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.12 numpy version: 1.18.1 ary = copy . deepcopy ( np . arange ( 16 ) . reshape ( 4 , 4 )) ary array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15]]) \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u7684\u7d22\u5f15 \u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15 print ( np . argmax ( ary )) print ( np . argmax ( ary , axis = 1 )) print ( ary . argmax ( axis = 1 )) 15 [3 3 3 3] [3 3 3 3] \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5927\u503c\uff1a print ( np . amax ( ary )) # np.max\u662fnp.amax\u7684\u522b\u540d print ( np . max ( ary , axis = 0 )) print ( ary . max ()) print ( ary . max ( axis = 0 )) 15 [12 13 14 15] 15 [12 13 14 15] \u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15 np . argmin ( ary ) 0 \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5c0f\u503c\uff1a np . amin ( ary ) 0 \u6309\u5927\u5c0f\u6392\u5e8f\u7684\u7d22\u5f15 np . argsort ( a , axis =- 1 , kind = None , order = None ) kind \uff1a 'quicksort', 'mergesort', 'heapsort', 'stable' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'quicksort' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # \u7531\u5c0f\u5230\u5927\u6392\u5e8f ary2 . argsort () ary2 [ ary2 . argsort ()] array([0, 1, 2, ..., 7, 8, 9]) np . argpartition ( a , kth , axis =- 1 , kind = 'introselect' , order = None ) kth \uff1a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u524d kth \u4e2a\u5143\u7d20\u3002\u56e0\u4e3a\u662f\u4e0d\u5b8c\u5168\u6392\u5e8f\uff0c\u56e0\u6b64\u6bd4 argsort \u7684\u6548\u679c\u66f4\u9ad8\u3002 kind \uff1a 'introselect' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'introselect' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # kth \u4e3a\u975e\u8d1f\u6570: \u4ece\u5c0f\u5230\u5927\u6392\u5e8f print ( ary2 . argpartition ( 2 )) print ( ary2 [ ary2 . argpartition ( 2 )]) # kth \u4e3a\u8d1f\u6570: \u4ece\u5927\u5230\u5c0f\u6392\u5e8f print ( ary2 [ ary2 . argpartition ( - 2 )]) [4 0 3 ... 6 7 8] [0 1 2 ... 8 5 7] [0 1 5 ... 7 8 9] \u975e\u96f6\u6570\u7684\u7d22\u5f15 np.nonzero \u4f1a\u8fd4\u56de\u975e\u96f6\u5143\u7d20\u7684\u7d22\u5f15\uff08\u8fd9\u610f\u5473\u7740 nan \u7684\u7d22\u5f15\u4e5f\u4f1a\u88ab\u8fd4\u56de\uff09\u3002 print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . nonzero ( ary )) # ary.nonzero() ary [ np . nonzero ( ary )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([0, 0, 0, ..., 3, 3, 3], dtype=int64), array([1, 2, 3, ..., 1, 2, 3], dtype=int64)) array([ 1, 2, 3, ..., 13, 14, 15]) \u6307\u5b9a\u6761\u4ef6 np.where(condition) \uff0c\u5f53condition\u4e3a\u771f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u7684\u7d22\u5f15\uff1a print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . where ( ary > 5 )) ary [ np . where ( ary > 5 )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([1, 1, 2, ..., 3, 3, 3], dtype=int64), array([2, 3, 0, ..., 1, 2, 3], dtype=int64)) array([ 6, 7, 8, ..., 13, 14, 15]) np.where(condition) \u5b9e\u9645\u4e0a\u662f np.asarray(condition).nonzero() \u7684\u5feb\u6377\u65b9\u5f0f\u3002 ary [ np . asarray ( ary > 5 ) . nonzero ()] array([ 6, 7, 8, ..., 13, 14, 15]) \u5982\u679c\u53ea\u662f\u60f3\u5f97\u5230\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u4e0d\u9700\u8981\u7d22\u5f15\uff0c\u4f7f\u7528mask\u6570\u7ec4\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1a pprint . pprint ( ary > 5 ) ary [ ary > 5 ] # np.nanargmax(ary) array([[False, False, False, False], [False, False, True, True], [ True, True, True, True], [ True, True, True, True]]) array([ 6, 7, 8, ..., 13, 14, 15]) \u7f3a\u5931\u503c\u5904\u7406 nan_ary = np . arange ( 16 , dtype = np . float32 ) . reshape ( 4 , 4 ) nan_ary [ 3 , 2 ] = np . NAN nan_ary [ 1 , 1 ] = np . nan nan_ary array([[ 0., 1., 2., 3.], [ 4., nan, 6., 7.], [ 8., 9., 10., 11.], [12., 13., nan, 15.]], dtype=float32) \u4f7f\u7528 np.isnan ufunc \u51fd\u6570\u5f97\u5230mask\u6570\u7ec4\uff1a np . isnan ( nan_ary ) array([[False, False, False, False], [False, True, False, False], [False, False, False, False], [False, False, True, False]]) \u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 nan \u586b\u5145\u4e3a\u5e38\u91cf\uff1a nan_ary [ np . isnan ( nan_ary )] # nan_ary[np.isnan(nan_ary)] = 2 array([nan, nan], dtype=float32) \u5982\u679c\u60f3\u5f97\u5230 nan \u503c\u7684\u7d22\u5f15\uff1a np . where ( np . isnan ( nan_ary )) (array([1, 3], dtype=int64), array([1, 2], dtype=int64)) \u5982\u679c\u60f3\u4e22\u5f03\u5b58\u5728 nan \u503c\u7684\u884c\uff1a np . delete ( nan_ary , np . where ( np . isnan ( nan_ary ))[ 0 ], axis = 0 ) array([[ 0., 1., 2., 3.], [ 8., 9., 10., 11.]], dtype=float32) \u7edf\u8ba1\u5b58\u5728 nan \u503c\u7684\u884c\uff08\u6837\u672c\uff09\u6240\u5360\u7684\u6bd4\u5217\u4e5f\u5f88\u7b80\u5355\uff1a len ( np . where ( np . isnan ( nan_ary ))[ 0 ]) / nan_ary . shape [ 0 ] 0.5 \u5982\u679c\u60f3\u5c06 nan \u503c\u586b\u5145\u4e3a\u975e\u5e38\u91cf\uff08\u6bd4\u5982\u5e73\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u7b49\uff09\uff0c\u8fd9\u5c31\u8981\u5148\u8ba1\u7b97\u51fa\u5e73\u5747\u503c,\u518d\u5bf9 nan \u6570\u636e\u9010\u4e2a\u8fdb\u884c\u586b\u5145\u3002 \u586b\u5145\u8fb9\u7f18 np . pad ( nan_ary , pad_width = 1 , mode = \"mean\" ) array([[ nan, 6. , nan, nan, 9. , nan], [ 1.5, 0. , 1. , 2. , 3. , 1.5], [ nan, 4. , nan, 6. , 7. , nan], [ 9.5, 8. , 9. , 10. , 11. , 9.5], [ nan, 12. , 13. , nan, 15. , nan], [ nan, 6. , nan, nan, 9. , nan]], dtype=float32)","title":"8.13.\u6570\u636e\u5904\u7406"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_1","text":"","title":"\u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_2","text":"print ( np . argmax ( ary )) print ( np . argmax ( ary , axis = 1 )) print ( ary . argmax ( axis = 1 )) 15 [3 3 3 3] [3 3 3 3] \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5927\u503c\uff1a print ( np . amax ( ary )) # np.max\u662fnp.amax\u7684\u522b\u540d print ( np . max ( ary , axis = 0 )) print ( ary . max ()) print ( ary . max ( axis = 0 )) 15 [12 13 14 15] 15 [12 13 14 15]","title":"\u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_3","text":"np . argmin ( ary ) 0 \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5c0f\u503c\uff1a np . amin ( ary ) 0","title":"\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_4","text":"np . argsort ( a , axis =- 1 , kind = None , order = None ) kind \uff1a 'quicksort', 'mergesort', 'heapsort', 'stable' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'quicksort' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # \u7531\u5c0f\u5230\u5927\u6392\u5e8f ary2 . argsort () ary2 [ ary2 . argsort ()] array([0, 1, 2, ..., 7, 8, 9]) np . argpartition ( a , kth , axis =- 1 , kind = 'introselect' , order = None ) kth \uff1a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u524d kth \u4e2a\u5143\u7d20\u3002\u56e0\u4e3a\u662f\u4e0d\u5b8c\u5168\u6392\u5e8f\uff0c\u56e0\u6b64\u6bd4 argsort \u7684\u6548\u679c\u66f4\u9ad8\u3002 kind \uff1a 'introselect' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'introselect' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # kth \u4e3a\u975e\u8d1f\u6570: \u4ece\u5c0f\u5230\u5927\u6392\u5e8f print ( ary2 . argpartition ( 2 )) print ( ary2 [ ary2 . argpartition ( 2 )]) # kth \u4e3a\u8d1f\u6570: \u4ece\u5927\u5230\u5c0f\u6392\u5e8f print ( ary2 [ ary2 . argpartition ( - 2 )]) [4 0 3 ... 6 7 8] [0 1 2 ... 8 5 7] [0 1 5 ... 7 8 9]","title":"\u6309\u5927\u5c0f\u6392\u5e8f\u7684\u7d22\u5f15"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_5","text":"np.nonzero \u4f1a\u8fd4\u56de\u975e\u96f6\u5143\u7d20\u7684\u7d22\u5f15\uff08\u8fd9\u610f\u5473\u7740 nan \u7684\u7d22\u5f15\u4e5f\u4f1a\u88ab\u8fd4\u56de\uff09\u3002 print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . nonzero ( ary )) # ary.nonzero() ary [ np . nonzero ( ary )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([0, 0, 0, ..., 3, 3, 3], dtype=int64), array([1, 2, 3, ..., 1, 2, 3], dtype=int64)) array([ 1, 2, 3, ..., 13, 14, 15])","title":"\u975e\u96f6\u6570\u7684\u7d22\u5f15"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_6","text":"np.where(condition) \uff0c\u5f53condition\u4e3a\u771f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u7684\u7d22\u5f15\uff1a print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . where ( ary > 5 )) ary [ np . where ( ary > 5 )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([1, 1, 2, ..., 3, 3, 3], dtype=int64), array([2, 3, 0, ..., 1, 2, 3], dtype=int64)) array([ 6, 7, 8, ..., 13, 14, 15]) np.where(condition) \u5b9e\u9645\u4e0a\u662f np.asarray(condition).nonzero() \u7684\u5feb\u6377\u65b9\u5f0f\u3002 ary [ np . asarray ( ary > 5 ) . nonzero ()] array([ 6, 7, 8, ..., 13, 14, 15]) \u5982\u679c\u53ea\u662f\u60f3\u5f97\u5230\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u4e0d\u9700\u8981\u7d22\u5f15\uff0c\u4f7f\u7528mask\u6570\u7ec4\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1a pprint . pprint ( ary > 5 ) ary [ ary > 5 ] # np.nanargmax(ary) array([[False, False, False, False], [False, False, True, True], [ True, True, True, True], [ True, True, True, True]]) array([ 6, 7, 8, ..., 13, 14, 15])","title":"\u6307\u5b9a\u6761\u4ef6"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_7","text":"nan_ary = np . arange ( 16 , dtype = np . float32 ) . reshape ( 4 , 4 ) nan_ary [ 3 , 2 ] = np . NAN nan_ary [ 1 , 1 ] = np . nan nan_ary array([[ 0., 1., 2., 3.], [ 4., nan, 6., 7.], [ 8., 9., 10., 11.], [12., 13., nan, 15.]], dtype=float32) \u4f7f\u7528 np.isnan ufunc \u51fd\u6570\u5f97\u5230mask\u6570\u7ec4\uff1a np . isnan ( nan_ary ) array([[False, False, False, False], [False, True, False, False], [False, False, False, False], [False, False, True, False]]) \u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 nan \u586b\u5145\u4e3a\u5e38\u91cf\uff1a nan_ary [ np . isnan ( nan_ary )] # nan_ary[np.isnan(nan_ary)] = 2 array([nan, nan], dtype=float32) \u5982\u679c\u60f3\u5f97\u5230 nan \u503c\u7684\u7d22\u5f15\uff1a np . where ( np . isnan ( nan_ary )) (array([1, 3], dtype=int64), array([1, 2], dtype=int64)) \u5982\u679c\u60f3\u4e22\u5f03\u5b58\u5728 nan \u503c\u7684\u884c\uff1a np . delete ( nan_ary , np . where ( np . isnan ( nan_ary ))[ 0 ], axis = 0 ) array([[ 0., 1., 2., 3.], [ 8., 9., 10., 11.]], dtype=float32) \u7edf\u8ba1\u5b58\u5728 nan \u503c\u7684\u884c\uff08\u6837\u672c\uff09\u6240\u5360\u7684\u6bd4\u5217\u4e5f\u5f88\u7b80\u5355\uff1a len ( np . where ( np . isnan ( nan_ary ))[ 0 ]) / nan_ary . shape [ 0 ] 0.5 \u5982\u679c\u60f3\u5c06 nan \u503c\u586b\u5145\u4e3a\u975e\u5e38\u91cf\uff08\u6bd4\u5982\u5e73\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u7b49\uff09\uff0c\u8fd9\u5c31\u8981\u5148\u8ba1\u7b97\u51fa\u5e73\u5747\u503c,\u518d\u5bf9 nan \u6570\u636e\u9010\u4e2a\u8fdb\u884c\u586b\u5145\u3002","title":"\u7f3a\u5931\u503c\u5904\u7406"},{"location":"NumPy/8.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_8","text":"np . pad ( nan_ary , pad_width = 1 , mode = \"mean\" ) array([[ nan, 6. , nan, nan, 9. , nan], [ 1.5, 0. , 1. , 2. , 3. , 1.5], [ nan, 4. , nan, 6. , 7. , nan], [ 9.5, 8. , 9. , 10. , 11. , 9.5], [ nan, 12. , 13. , nan, 15. , nan], [ nan, 6. , nan, nan, 9. , nan]], dtype=float32)","title":"\u586b\u5145\u8fb9\u7f18"},{"location":"NumPy/8.2.%E7%B4%A2%E5%BC%95.html","text":"import numpy as np import copy import pprint Windows 10 Python 3.8.5 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.28 numpy version: 1.18.5 \u7d22\u5f15\u89c4\u5219 NumPy \u6570\u7ec4\u7684\u7d22\u5f15\u529f\u80fd\u5f88\u5f3a\u5927\uff0c\u4f46\u591a\u6837\u7684\u7d22\u5f15\u4e5f\u5e26\u6765\u4e86\u590d\u6742\u6027\u548c\u6df7\u4e71\u6027\u3002\u65b0\u624b\u53ef\u4ee5\u5f88\u5feb\u5730\u5f00\u59cb\u4f7f\u7528 NumPy \u7d22\u5f15\uff0c\u4f46\u53ef\u80fd\u96be\u4ee5\u533a\u5206\u5404\u79cd\u7d22\u5f15\u7684\u60c5\u51b5\u3002\u867d\u7136\uff0c\u7f51\u4e0a\u6709\u5f88\u591a\u5173\u4e8e NumPy \u6570\u7ec4\u7d22\u7684\u8d44\u6599\uff0c\u4e5f\u6709\u5f88\u591a\u4ee3\u7801\u793a\u4f8b\uff0c\u4f46\u51e0\u4e4e\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u8bf4\u660e\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u793a\u4f8b\u53ea\u4f1a\u8ba9\u4eba\u5728\u7b80\u5355\u4e0e\u6df7\u4e71\u4e4b\u95f4\u5f98\u5f8a\u3002NumPy \u7d22\u5f15\u7684\u5b98\u65b9\u7528\u6237\u6307\u5357\u5f53\u7136\u662f\u5f88\u597d\u7684\u8d44\u6599\uff0c\u4f46\u5927\u591a\u90fd\u662f\u5fc5\u8981\u6216\u7ec6\u8282\u6027\u7684\u8bf4\u660e\u3002\u8fd9\u91cc\u5c1d\u8bd5\u5bf9\u6240\u6709\u60c5\u51b5\u505a\u4e00\u4e2a\u7b80\u5355\u4f46\u4e0d\u5931\u5168\u9762\u6027\u7684\u603b\u7ed3\u3002 \u53ef\u4ee5\u4f7f\u7528 Python \u7684 array[index] \u8bed\u6cd5\u5bf9 ndarray \u8fdb\u884c\u7d22\u5f15\u3002\u5047\u8bbe ndarray \u662f N \u7ef4\u6570\u7ec4\uff0c\u5176\u7d22\u5f15\u7684\u5f62\u5f0f\u4e3a array[idx1, idx2, ..., idxN] \uff0c\u5373\u6bcf\u4e2a\u8f74\u90fd\u6709\u4e00\u4e2a\u7d22\u5f15\u3002 \u5728 Python \u4e2d\uff0c x[(exp1, exp2, ..., EXPN)] \u7b49\u540c\u4e8e x[exp1, exp2, ..., EXPN] \u3002\u540e\u8005\u53ea\u662f\u524d\u8005\u7684\u8bed\u6cd5\u7cd6\u3002 \u8fd9\u91cc\u5c06 (idx1\uff0cidx2\uff0c.\uff0cidxN) \u79f0\u4e3a\u7d22\u5f15\u5143\u7ec4\uff0c idxN \u76f4\u63a5\u79f0\u4e3a\u7d22\u5f15\u6216\u7d22\u5f15\u5bf9\u8c61\u3002NumPy \u6570\u7ec4\u7684\u7d22\u5f15 idxN \u53ef\u4ee5\u662f\u4ee5\u4e0b 7 \u79cd\u5bf9\u8c61\uff08\u5f62\u5f0f\uff09\uff1a \u6574\u6570 \u5207\u7247\uff08 slice \u3001 : \uff09 \u6574\u6570\u5e8f\u5217 \u6574\u6570\u6570\u7ec4 \u5e03\u5c14\u6570\u7ec4 None \u3001 np.newaxis Ellipsis\uff08 ... \uff09 \u5e8f\u5217\u7d22\u5f15\u548c\u6570\u7ec4\u7d22\u5f15\u7684\u6807\u91cf\u5143\u7d20\u53ea\u80fd\u4e3a\u6574\u6570\uff0c\u56e0\u6b64\u4e0b\u9762\u5c06\u5b83\u4eec\u7b80\u79f0\u4e3a\u5e8f\u5217\u7d22\u5f15\u548c\u6570\u7ec4\u7d22\u5f15\u3002 \u5047\u8bbe A \u662f\u4e00\u4e2a N \u7ef4\u6570\u7ec4\uff0c\u4e0d\u540c\u7684\u7d22\u5f15\u5bf9\u8c61\u5177\u6709\u4e0d\u540c\u7684\u89c4\u5219\uff1a \u6574\u6570\u7d22\u5f15\u610f\u5473\u7740\u4ece\u5bf9\u5e94\u7684\u8f74\u53d6\u51fa 1 \u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\uff0c\u6bcf\u591a 1 \u4e2a\u6574\u6570\u7d22\u5f15\uff0c\u7d22\u5f15\u7ed3\u679c\u5c31\u51cf\u5c11 1 \u4e2a\u7ef4\u5ea6\u3002 N \u7ef4\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u6307\u5b9a N \u4e2a\u7d22\u5f15\u5bf9\u8c61\uff0c\u4f46 None \u53ef\u4ee5\u7a81\u7834\u8fd9\u4e2a\u9650\u5236\uff1b\u5141\u8bb8\u6700\u591a\u7701\u7565 N-1 \u4e2a\u7d22\u5f15\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6307\u5b9a 1 \u4e2a\u7d22\u5f15\uff0c\u7701\u7565\u7684\u7d22\u5f15\u9ed8\u8ba4\u8865\u5145\u4e3a\u5207\u7247 : \u3002 \u7d22\u5f15\u5143\u7ec4\u6700\u591a\u53ea\u80fd\u5305\u542b\u4e00\u4e2a ... \uff0c ... \u4ee3\u8868\u5176\u4f59\u8f74\u7684\u7d22\u5f15\u90fd\u4e3a\u5207\u7247 : \uff0c\u5982 A[1,...,2] \u3002\u8fd9\u662f NumPy \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\u3002 np.newaxis \u662f None \u7684\u522b\u540d\uff0c\u7d22\u5f15\u7ed3\u679c\u4f1a\u5728\u7d22\u5f15\u5143\u7ec4\u4e2d\u51fa\u73b0 None \u7684\u5730\u65b9\u521b\u5efa\u4e00\u4e2a\u65b0\u8f74\uff0c\u8be5\u8f74\u957f\u5ea6\u4e3a 1\u3002 None \u7684\u6570\u91cf\u4e0d\u53d7 N \u7684\u9650\u5236\uff0c\u4f46\u4e0d\u80fd\u65e0\u9650\u591a\uff0c\u56e0\u4e3a NumPy \u6570\u7ec4\u6700\u591a\u53ea\u80fd\u6709 32 \u4e2a\u7ef4\u5ea6\u3002 \u5e8f\u5217\u7d22\u5f15\u57fa\u4e8e\u6574\u6570\u7d22\u5f15\uff1a \u7ed9 A \u6307\u5b9a 1 \u4e2a\u6574\u6570\u5e8f\u5217\u7d22\u5f15\uff0c\u5373 A[[i, j, z]] \uff0c\u8fd9\u76f8\u5f53\u4e8e np.array([A[i], A[j], A[z]]) \uff1b \u7ed9 A \u6307\u5b9a 2 \u4e2a\u6574\u6570\u5e8f\u5217\u7d22\u5f15\uff0c\u5373\u4f7f A[[a, b, c], [i, j, z]] \uff0c\u8fd9\u76f8\u5f53\u4e8e np.array([A[a, i], A[b, j], A[c, z]]) \uff1b \u4ee5\u6b64\u7c7b\u63a8 n \u4e2a\u5e8f\u5217\u7d22\u5f15\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6307\u5b9a n \u4e2a\u5e8f\u5217\u7d22\u5f15\u4f1a\u5bfc\u81f4\u7d22\u5f15\u7ed3\u679c\u51cf\u5c11 n-1 \u4e2a\u7ef4\u5ea6\u3002 \u5207\u7247\u7c7b\u4f3c\u4e8e\u5e8f\u5217\u7d22\u5f15\uff0c\u4f46\u5207\u7247\u4e0d\u4f1a\u6539\u53d8\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u591a\u4e2a\u5e8f\u5217\u7d22\u5f15\u4e4b\u95f4\u662f\u5185\u79ef\uff0c\u800c\u591a\u4e2a\u5207\u7247\u4e4b\u95f4\u662f\u7b1b\u5361\u513f\u79ef\u3002 A[0:2:1] \u76f8\u5f53\u4e8e A[[0, 1]] \uff1b A[0:2:1, 0:2:1] \u76f8\u5f53\u4e8e np.array([[A[0, 0], A[0, 1]], [A[1, 0], A[1, 1]]]) \u3002 \u6570\u7ec4\u7d22\u5f15\u57fa\u4e8e\u5e8f\u5217\u7d22\u5f15\uff0c\u5047\u8bbe A.shape=(s1, s2, ..., sN) \uff1a \u7ed9 A \u6307\u5b9a 1 \u4e2a\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff0c\u5373 A[I] \uff0c\u5e76\u4e14 I.shape=(a, b) \uff0c \u8fd9\u76f8\u5f53\u4e8e A[I.flatten()].reshape(a, b, s2, ..., sN) \uff0c I.flatten() \u662f\u6574\u6570\u5e8f\u5217\uff1b \u7ed9 A \u6307\u5b9a 2 \u4e2a\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff0c\u5373 A[I, J] \uff0c \u5982\u679c I.shape=J.shape=(a, b) \uff0c\u8fd9\u76f8\u5f53\u4e8e A[I.flatten(), J.flatten()].reshape(a, b, s3, ..., sN) \uff0c\u4e24\u4e2a\u5e8f\u5217\u7d22\u5f15\u5bfc\u81f4\u539f\u6570\u7ec4\u51cf\u5c11 1 \u4e2a\u7ef4\u5ea6\uff1b \u5982\u679c I.shape=(a, b) \u3001 J.shape=(c, d) \uff0c\u90a3\u4e48 I \u548c J \u4f1a\u8fdb\u884c\u5e7f\u64ad\uff0c\u5f97\u5230 shape=(e, f) \u65b0\u7684\u6570\u7ec4\u7d22\u5f15 I2 \u548c J2 \uff0c \u8fd9\u76f8\u5f53\u4e8e A[I2.flatten(), J2.flatten()].reshape(e, f, s3, ..., sN) \uff1b \u4ee5\u6b64\u7c7b\u63a8 n \u4e2a\u6570\u7ec4\u7d22\u5f15\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6570\u7ec4\u7d22\u5f15\u9996\u5148\u4f1a\u5f97\u5230\u548c\u5e8f\u5217\u7d22\u5f15\u4e00\u81f4\u7684\u7ed3\u679c\uff0c\u4f46\u7ed3\u679c\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u4f1a\u88ab\u66ff\u6362\u4e3a\u7d22\u5f15\u6570\u7ec4\u7684 shape \u3002 \u5e03\u5c14\u6570\u7ec4\u7d22\u5f15\u7684\u7ef4\u5ea6\u4e0d\u5fc5\u548c\u539f\u6570\u7ec4\u7684\u7ef4\u5ea6\u4e00\u81f4\uff0c\u4f46\u4e0d\u80fd\u8d85\u51fa\u539f\u6570\u7ec4\u7684\u7ef4\u5ea6\uff0c\u5e76\u4e14\u5bf9\u5e94\u7ef4\u5ea6\u7684\u5927\u5c0f\u5fc5\u987b\u548c\u539f\u6570\u7ec4\u4e00\u81f4\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5e03\u5c14\u6570\u7ec4\u4e2d True \u5bf9\u5e94\u7684\u5143\u7d20\u3002 \u521b\u5efa\u793a\u4f8b\u6570\u7ec4 A = copy . deepcopy ( np . arange ( 90 ) . reshape (( 10 , 3 , 3 ))) print ( f \"A shape = { A . shape } \" ) pprint . pprint ( A ) A shape = (10, 3, 3) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]], [[18, 19, 20], [21, 22, 23], [24, 25, 26]], [[27, 28, 29], [30, 31, 32], [33, 34, 35]], [[36, 37, 38], [39, 40, 41], [42, 43, 44]], [[45, 46, 47], [48, 49, 50], [51, 52, 53]], [[54, 55, 56], [57, 58, 59], [60, 61, 62]], [[63, 64, 65], [66, 67, 68], [69, 70, 71]], [[72, 73, 74], [75, 76, 77], [78, 79, 80]], [[81, 82, 83], [84, 85, 86], [87, 88, 89]]]) \u6574\u6570\u7d22\u5f15 print ( A [ 0 , 1 , 2 ]) print ( A [( 0 , 1 , 2 )]) print ( A [ 0 ][ 1 ][ 2 ]) pprint . pprint ( A [ 0 ]) pprint . pprint ( A [ 0 , ... ]) 5 5 5 array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) \u5e8f\u5217\u7d22\u5f15 pprint . pprint ( A [[ 0 , 1 ]]) pprint . pprint ( np . array ([ A [ 0 ], A [ 1 ]])) print () pprint . pprint ( A [[ 0 , 1 ], [ 0 , 1 ]]) pprint . pprint ( np . array ([ A [ 0 , 0 ], A [ 1 , 1 ]])) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]]) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]]) array([[ 0, 1, 2], [12, 13, 14]]) array([[ 0, 1, 2], [12, 13, 14]]) \u5207\u7247 pprint . pprint ( A [ 1 , :]) print () pprint . pprint ( A [ slice ( 0 , 3 , 2 ), 0 : 3 : 2 ]) pprint . pp ( np . array ([[ A [ 0 , 0 ], A [ 0 , 2 ]], [ A [ 2 , 0 ], A [ 2 , 2 ]]])) # \u4e0e\u5e8f\u5217\u7d22\u5f15\u7684\u533a\u522b print () pprint . pprint ( A [[ 0 , 2 ], [ 0 , 2 ]]) array([[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]) array([[[ 0, 1, 2], [ 6, 7, 8]], [[18, 19, 20], [24, 25, 26]]]) array([[[ 0, 1, 2], [ 6, 7, 8]], [[18, 19, 20], [24, 25, 26]]]) array([[ 0, 1, 2], [24, 25, 26]]) \u6570\u7ec4\u7d22\u5f15 print ( f \"A shape = { A . shape } \" ) index = np . array ([ 0 , 1 , 2 ]) print ( f \"index shape = { index . shape } \" ) pprint . pprint ( A [ index ]) print ( f \"result shape = { A [ index ] . shape } \" ) print () print ( f \"A shape = { A . shape } \" ) index = np . array ([[[ 0 , 1 ], [ 0 , 1 ], [ 0 , 1 ]]]) print ( f \"index shape = { index . shape } \" ) pprint . pprint ( A [ index ]) print ( f \"result shape = { A [ index ] . shape } \" ) A shape = (10, 3, 3) index shape = (3,) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]], [[18, 19, 20], [21, 22, 23], [24, 25, 26]]]) result shape = (3, 3, 3) A shape = (10, 3, 3) index shape = (1, 3, 2) array([[[[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]], [[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]], [[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]]]]) result shape = (1, 3, 2, 3, 3) \u5e03\u5c14\u6570\u7ec4 B = A [ 0 : 2 ] bool_index = B > 10 print ( f \"B shape = { B . shape } \" ) print ( f \"bool index shape = { bool_index . shape } \" ) pprint . pprint ( bool_index ) pprint . pprint ( B [ bool_index ]) print () print ( f \"A shape = { A . shape } \" ) bool_index = np . array ([ True , False , False , False , False , False , False , False , True , False ]) print ( f \"bool index shape = { bool_index . shape } \" ) pprint . pprint ( A [ bool_index ]) B shape = (2, 3, 3) bool index shape = (2, 3, 3) array([[[False, False, False], [False, False, False], [False, False, False]], [[False, False, True], [ True, True, True], [ True, True, True]]]) array([11, 12, 13, 14, 15, 16, 17]) A shape = (10, 3, 3) bool index shape = (10,) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[72, 73, 74], [75, 76, 77], [78, 79, 80]]]) \u7d22\u5f15\u7ed3\u679c\u4e0e\u89c6\u56fe \u6574\u6570\u7d22\u5f15\u548c\u5207\u7247\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u662f\u89c6\u56fe\uff0c\u800c\u5176\u4ed6\u7d22\u5f15\u5bf9\u8c61\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u90fd\u62e5\u6709\u81ea\u5df1\u7684\u6570\u636e\u3002 \u4f7f\u7528\u6574\u6570\u7d22\u5f15\u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5355\u4e2a\u5143\u7d20\uff0c\u81ea\u7136\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u539f\u6570\u7ec4\u7684\u6570\u636e\uff0c\u800c\u65e0\u9700\u590d\u5236\u6570\u636e\u3002\u4f7f\u7528\u5207\u7247\u65f6\uff0c\u5f97\u5230\u7684\u6570\u636e\u5728\u539f\u6570\u7ec4\u5b58\u50a8\u533a\u57df\u4e2d\u662f\u7b49\u95f4\u9694\u5206\u5e03\u7684\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u4fee\u6539\u6570\u7ec4\u7684 ndim/shape/strides \u7b49\u5c5e\u6027\u4ee5\u53ca\u6307\u5411\u6570\u636e\u5b58\u50a8\u533a\u57df\u7684 data \u6307\u9488\u5c31\u80fd\u591f\u5b9e\u73b0\u5207\u7247\u7d22\u5f15\u3002\u89c6\u56fe\u548c\u539f\u6570\u7ec4\u5171\u4eab\u6570\u636e\u5b58\u50a8\u533a\u57df\u3002 \u4f7f\u7528\u5e8f\u5217\u7d22\u5f15\u3001\u6570\u7ec4\u7d22\u5f15\u548c\u5e03\u5c14\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u539f\u6570\u7ec4\u5b58\u50a8\u533a\u4e2d\u662f\u7b49\u95f4\u9694\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u548c\u539f\u6570\u7ec4\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u62f7\u8d1d\u3002 print ( \"\u6574\u6570\u7d22\u5f15\" , A [ 1 ] . flags [ \"OWNDATA\" ]) print ( \"\u5207\u7247\u7d22\u5f15\" , A [ 0 : 2 ] . flags [ \"OWNDATA\" ]) print ( \"\u5e8f\u5217\u7d22\u5f15\" , A [[ 0 , 1 ]] . flags [ \"OWNDATA\" ]) print ( \"\u6570\u7ec4\u7d22\u5f15\" , A [ np . array ([[ 0 , 1 ], [ 0 , 1 ]])] . flags [ \"OWNDATA\" ]) print ( \"\u5e03\u5c14\u6570\u7ec4\" , A [ A > 50 ] . flags [ \"OWNDATA\" ]) \u6574\u6570\u7d22\u5f15 False \u5207\u7247\u7d22\u5f15 False \u5e8f\u5217\u7d22\u5f15 True \u6570\u7ec4\u7d22\u5f15 True \u5e03\u5c14\u6570\u7ec4 True","title":"8.2.\u7d22\u5f15"},{"location":"NumPy/8.2.%E7%B4%A2%E5%BC%95.html#_1","text":"NumPy \u6570\u7ec4\u7684\u7d22\u5f15\u529f\u80fd\u5f88\u5f3a\u5927\uff0c\u4f46\u591a\u6837\u7684\u7d22\u5f15\u4e5f\u5e26\u6765\u4e86\u590d\u6742\u6027\u548c\u6df7\u4e71\u6027\u3002\u65b0\u624b\u53ef\u4ee5\u5f88\u5feb\u5730\u5f00\u59cb\u4f7f\u7528 NumPy \u7d22\u5f15\uff0c\u4f46\u53ef\u80fd\u96be\u4ee5\u533a\u5206\u5404\u79cd\u7d22\u5f15\u7684\u60c5\u51b5\u3002\u867d\u7136\uff0c\u7f51\u4e0a\u6709\u5f88\u591a\u5173\u4e8e NumPy \u6570\u7ec4\u7d22\u7684\u8d44\u6599\uff0c\u4e5f\u6709\u5f88\u591a\u4ee3\u7801\u793a\u4f8b\uff0c\u4f46\u51e0\u4e4e\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u8bf4\u660e\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u793a\u4f8b\u53ea\u4f1a\u8ba9\u4eba\u5728\u7b80\u5355\u4e0e\u6df7\u4e71\u4e4b\u95f4\u5f98\u5f8a\u3002NumPy \u7d22\u5f15\u7684\u5b98\u65b9\u7528\u6237\u6307\u5357\u5f53\u7136\u662f\u5f88\u597d\u7684\u8d44\u6599\uff0c\u4f46\u5927\u591a\u90fd\u662f\u5fc5\u8981\u6216\u7ec6\u8282\u6027\u7684\u8bf4\u660e\u3002\u8fd9\u91cc\u5c1d\u8bd5\u5bf9\u6240\u6709\u60c5\u51b5\u505a\u4e00\u4e2a\u7b80\u5355\u4f46\u4e0d\u5931\u5168\u9762\u6027\u7684\u603b\u7ed3\u3002 \u53ef\u4ee5\u4f7f\u7528 Python \u7684 array[index] \u8bed\u6cd5\u5bf9 ndarray \u8fdb\u884c\u7d22\u5f15\u3002\u5047\u8bbe ndarray \u662f N \u7ef4\u6570\u7ec4\uff0c\u5176\u7d22\u5f15\u7684\u5f62\u5f0f\u4e3a array[idx1, idx2, ..., idxN] \uff0c\u5373\u6bcf\u4e2a\u8f74\u90fd\u6709\u4e00\u4e2a\u7d22\u5f15\u3002 \u5728 Python \u4e2d\uff0c x[(exp1, exp2, ..., EXPN)] \u7b49\u540c\u4e8e x[exp1, exp2, ..., EXPN] \u3002\u540e\u8005\u53ea\u662f\u524d\u8005\u7684\u8bed\u6cd5\u7cd6\u3002 \u8fd9\u91cc\u5c06 (idx1\uff0cidx2\uff0c.\uff0cidxN) \u79f0\u4e3a\u7d22\u5f15\u5143\u7ec4\uff0c idxN \u76f4\u63a5\u79f0\u4e3a\u7d22\u5f15\u6216\u7d22\u5f15\u5bf9\u8c61\u3002NumPy \u6570\u7ec4\u7684\u7d22\u5f15 idxN \u53ef\u4ee5\u662f\u4ee5\u4e0b 7 \u79cd\u5bf9\u8c61\uff08\u5f62\u5f0f\uff09\uff1a \u6574\u6570 \u5207\u7247\uff08 slice \u3001 : \uff09 \u6574\u6570\u5e8f\u5217 \u6574\u6570\u6570\u7ec4 \u5e03\u5c14\u6570\u7ec4 None \u3001 np.newaxis Ellipsis\uff08 ... \uff09 \u5e8f\u5217\u7d22\u5f15\u548c\u6570\u7ec4\u7d22\u5f15\u7684\u6807\u91cf\u5143\u7d20\u53ea\u80fd\u4e3a\u6574\u6570\uff0c\u56e0\u6b64\u4e0b\u9762\u5c06\u5b83\u4eec\u7b80\u79f0\u4e3a\u5e8f\u5217\u7d22\u5f15\u548c\u6570\u7ec4\u7d22\u5f15\u3002 \u5047\u8bbe A \u662f\u4e00\u4e2a N \u7ef4\u6570\u7ec4\uff0c\u4e0d\u540c\u7684\u7d22\u5f15\u5bf9\u8c61\u5177\u6709\u4e0d\u540c\u7684\u89c4\u5219\uff1a \u6574\u6570\u7d22\u5f15\u610f\u5473\u7740\u4ece\u5bf9\u5e94\u7684\u8f74\u53d6\u51fa 1 \u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\uff0c\u6bcf\u591a 1 \u4e2a\u6574\u6570\u7d22\u5f15\uff0c\u7d22\u5f15\u7ed3\u679c\u5c31\u51cf\u5c11 1 \u4e2a\u7ef4\u5ea6\u3002 N \u7ef4\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u6307\u5b9a N \u4e2a\u7d22\u5f15\u5bf9\u8c61\uff0c\u4f46 None \u53ef\u4ee5\u7a81\u7834\u8fd9\u4e2a\u9650\u5236\uff1b\u5141\u8bb8\u6700\u591a\u7701\u7565 N-1 \u4e2a\u7d22\u5f15\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6307\u5b9a 1 \u4e2a\u7d22\u5f15\uff0c\u7701\u7565\u7684\u7d22\u5f15\u9ed8\u8ba4\u8865\u5145\u4e3a\u5207\u7247 : \u3002 \u7d22\u5f15\u5143\u7ec4\u6700\u591a\u53ea\u80fd\u5305\u542b\u4e00\u4e2a ... \uff0c ... \u4ee3\u8868\u5176\u4f59\u8f74\u7684\u7d22\u5f15\u90fd\u4e3a\u5207\u7247 : \uff0c\u5982 A[1,...,2] \u3002\u8fd9\u662f NumPy \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\u3002 np.newaxis \u662f None \u7684\u522b\u540d\uff0c\u7d22\u5f15\u7ed3\u679c\u4f1a\u5728\u7d22\u5f15\u5143\u7ec4\u4e2d\u51fa\u73b0 None \u7684\u5730\u65b9\u521b\u5efa\u4e00\u4e2a\u65b0\u8f74\uff0c\u8be5\u8f74\u957f\u5ea6\u4e3a 1\u3002 None \u7684\u6570\u91cf\u4e0d\u53d7 N \u7684\u9650\u5236\uff0c\u4f46\u4e0d\u80fd\u65e0\u9650\u591a\uff0c\u56e0\u4e3a NumPy \u6570\u7ec4\u6700\u591a\u53ea\u80fd\u6709 32 \u4e2a\u7ef4\u5ea6\u3002 \u5e8f\u5217\u7d22\u5f15\u57fa\u4e8e\u6574\u6570\u7d22\u5f15\uff1a \u7ed9 A \u6307\u5b9a 1 \u4e2a\u6574\u6570\u5e8f\u5217\u7d22\u5f15\uff0c\u5373 A[[i, j, z]] \uff0c\u8fd9\u76f8\u5f53\u4e8e np.array([A[i], A[j], A[z]]) \uff1b \u7ed9 A \u6307\u5b9a 2 \u4e2a\u6574\u6570\u5e8f\u5217\u7d22\u5f15\uff0c\u5373\u4f7f A[[a, b, c], [i, j, z]] \uff0c\u8fd9\u76f8\u5f53\u4e8e np.array([A[a, i], A[b, j], A[c, z]]) \uff1b \u4ee5\u6b64\u7c7b\u63a8 n \u4e2a\u5e8f\u5217\u7d22\u5f15\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6307\u5b9a n \u4e2a\u5e8f\u5217\u7d22\u5f15\u4f1a\u5bfc\u81f4\u7d22\u5f15\u7ed3\u679c\u51cf\u5c11 n-1 \u4e2a\u7ef4\u5ea6\u3002 \u5207\u7247\u7c7b\u4f3c\u4e8e\u5e8f\u5217\u7d22\u5f15\uff0c\u4f46\u5207\u7247\u4e0d\u4f1a\u6539\u53d8\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u591a\u4e2a\u5e8f\u5217\u7d22\u5f15\u4e4b\u95f4\u662f\u5185\u79ef\uff0c\u800c\u591a\u4e2a\u5207\u7247\u4e4b\u95f4\u662f\u7b1b\u5361\u513f\u79ef\u3002 A[0:2:1] \u76f8\u5f53\u4e8e A[[0, 1]] \uff1b A[0:2:1, 0:2:1] \u76f8\u5f53\u4e8e np.array([[A[0, 0], A[0, 1]], [A[1, 0], A[1, 1]]]) \u3002 \u6570\u7ec4\u7d22\u5f15\u57fa\u4e8e\u5e8f\u5217\u7d22\u5f15\uff0c\u5047\u8bbe A.shape=(s1, s2, ..., sN) \uff1a \u7ed9 A \u6307\u5b9a 1 \u4e2a\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff0c\u5373 A[I] \uff0c\u5e76\u4e14 I.shape=(a, b) \uff0c \u8fd9\u76f8\u5f53\u4e8e A[I.flatten()].reshape(a, b, s2, ..., sN) \uff0c I.flatten() \u662f\u6574\u6570\u5e8f\u5217\uff1b \u7ed9 A \u6307\u5b9a 2 \u4e2a\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff0c\u5373 A[I, J] \uff0c \u5982\u679c I.shape=J.shape=(a, b) \uff0c\u8fd9\u76f8\u5f53\u4e8e A[I.flatten(), J.flatten()].reshape(a, b, s3, ..., sN) \uff0c\u4e24\u4e2a\u5e8f\u5217\u7d22\u5f15\u5bfc\u81f4\u539f\u6570\u7ec4\u51cf\u5c11 1 \u4e2a\u7ef4\u5ea6\uff1b \u5982\u679c I.shape=(a, b) \u3001 J.shape=(c, d) \uff0c\u90a3\u4e48 I \u548c J \u4f1a\u8fdb\u884c\u5e7f\u64ad\uff0c\u5f97\u5230 shape=(e, f) \u65b0\u7684\u6570\u7ec4\u7d22\u5f15 I2 \u548c J2 \uff0c \u8fd9\u76f8\u5f53\u4e8e A[I2.flatten(), J2.flatten()].reshape(e, f, s3, ..., sN) \uff1b \u4ee5\u6b64\u7c7b\u63a8 n \u4e2a\u6570\u7ec4\u7d22\u5f15\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6570\u7ec4\u7d22\u5f15\u9996\u5148\u4f1a\u5f97\u5230\u548c\u5e8f\u5217\u7d22\u5f15\u4e00\u81f4\u7684\u7ed3\u679c\uff0c\u4f46\u7ed3\u679c\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u4f1a\u88ab\u66ff\u6362\u4e3a\u7d22\u5f15\u6570\u7ec4\u7684 shape \u3002 \u5e03\u5c14\u6570\u7ec4\u7d22\u5f15\u7684\u7ef4\u5ea6\u4e0d\u5fc5\u548c\u539f\u6570\u7ec4\u7684\u7ef4\u5ea6\u4e00\u81f4\uff0c\u4f46\u4e0d\u80fd\u8d85\u51fa\u539f\u6570\u7ec4\u7684\u7ef4\u5ea6\uff0c\u5e76\u4e14\u5bf9\u5e94\u7ef4\u5ea6\u7684\u5927\u5c0f\u5fc5\u987b\u548c\u539f\u6570\u7ec4\u4e00\u81f4\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5e03\u5c14\u6570\u7ec4\u4e2d True \u5bf9\u5e94\u7684\u5143\u7d20\u3002 \u521b\u5efa\u793a\u4f8b\u6570\u7ec4 A = copy . deepcopy ( np . arange ( 90 ) . reshape (( 10 , 3 , 3 ))) print ( f \"A shape = { A . shape } \" ) pprint . pprint ( A ) A shape = (10, 3, 3) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]], [[18, 19, 20], [21, 22, 23], [24, 25, 26]], [[27, 28, 29], [30, 31, 32], [33, 34, 35]], [[36, 37, 38], [39, 40, 41], [42, 43, 44]], [[45, 46, 47], [48, 49, 50], [51, 52, 53]], [[54, 55, 56], [57, 58, 59], [60, 61, 62]], [[63, 64, 65], [66, 67, 68], [69, 70, 71]], [[72, 73, 74], [75, 76, 77], [78, 79, 80]], [[81, 82, 83], [84, 85, 86], [87, 88, 89]]]) \u6574\u6570\u7d22\u5f15 print ( A [ 0 , 1 , 2 ]) print ( A [( 0 , 1 , 2 )]) print ( A [ 0 ][ 1 ][ 2 ]) pprint . pprint ( A [ 0 ]) pprint . pprint ( A [ 0 , ... ]) 5 5 5 array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) \u5e8f\u5217\u7d22\u5f15 pprint . pprint ( A [[ 0 , 1 ]]) pprint . pprint ( np . array ([ A [ 0 ], A [ 1 ]])) print () pprint . pprint ( A [[ 0 , 1 ], [ 0 , 1 ]]) pprint . pprint ( np . array ([ A [ 0 , 0 ], A [ 1 , 1 ]])) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]]) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]]) array([[ 0, 1, 2], [12, 13, 14]]) array([[ 0, 1, 2], [12, 13, 14]]) \u5207\u7247 pprint . pprint ( A [ 1 , :]) print () pprint . pprint ( A [ slice ( 0 , 3 , 2 ), 0 : 3 : 2 ]) pprint . pp ( np . array ([[ A [ 0 , 0 ], A [ 0 , 2 ]], [ A [ 2 , 0 ], A [ 2 , 2 ]]])) # \u4e0e\u5e8f\u5217\u7d22\u5f15\u7684\u533a\u522b print () pprint . pprint ( A [[ 0 , 2 ], [ 0 , 2 ]]) array([[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]) array([[[ 0, 1, 2], [ 6, 7, 8]], [[18, 19, 20], [24, 25, 26]]]) array([[[ 0, 1, 2], [ 6, 7, 8]], [[18, 19, 20], [24, 25, 26]]]) array([[ 0, 1, 2], [24, 25, 26]]) \u6570\u7ec4\u7d22\u5f15 print ( f \"A shape = { A . shape } \" ) index = np . array ([ 0 , 1 , 2 ]) print ( f \"index shape = { index . shape } \" ) pprint . pprint ( A [ index ]) print ( f \"result shape = { A [ index ] . shape } \" ) print () print ( f \"A shape = { A . shape } \" ) index = np . array ([[[ 0 , 1 ], [ 0 , 1 ], [ 0 , 1 ]]]) print ( f \"index shape = { index . shape } \" ) pprint . pprint ( A [ index ]) print ( f \"result shape = { A [ index ] . shape } \" ) A shape = (10, 3, 3) index shape = (3,) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]], [[18, 19, 20], [21, 22, 23], [24, 25, 26]]]) result shape = (3, 3, 3) A shape = (10, 3, 3) index shape = (1, 3, 2) array([[[[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]], [[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]], [[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[ 9, 10, 11], [12, 13, 14], [15, 16, 17]]]]]) result shape = (1, 3, 2, 3, 3) \u5e03\u5c14\u6570\u7ec4 B = A [ 0 : 2 ] bool_index = B > 10 print ( f \"B shape = { B . shape } \" ) print ( f \"bool index shape = { bool_index . shape } \" ) pprint . pprint ( bool_index ) pprint . pprint ( B [ bool_index ]) print () print ( f \"A shape = { A . shape } \" ) bool_index = np . array ([ True , False , False , False , False , False , False , False , True , False ]) print ( f \"bool index shape = { bool_index . shape } \" ) pprint . pprint ( A [ bool_index ]) B shape = (2, 3, 3) bool index shape = (2, 3, 3) array([[[False, False, False], [False, False, False], [False, False, False]], [[False, False, True], [ True, True, True], [ True, True, True]]]) array([11, 12, 13, 14, 15, 16, 17]) A shape = (10, 3, 3) bool index shape = (10,) array([[[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8]], [[72, 73, 74], [75, 76, 77], [78, 79, 80]]])","title":"\u7d22\u5f15\u89c4\u5219"},{"location":"NumPy/8.2.%E7%B4%A2%E5%BC%95.html#_2","text":"\u6574\u6570\u7d22\u5f15\u548c\u5207\u7247\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u662f\u89c6\u56fe\uff0c\u800c\u5176\u4ed6\u7d22\u5f15\u5bf9\u8c61\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u90fd\u62e5\u6709\u81ea\u5df1\u7684\u6570\u636e\u3002 \u4f7f\u7528\u6574\u6570\u7d22\u5f15\u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5355\u4e2a\u5143\u7d20\uff0c\u81ea\u7136\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u539f\u6570\u7ec4\u7684\u6570\u636e\uff0c\u800c\u65e0\u9700\u590d\u5236\u6570\u636e\u3002\u4f7f\u7528\u5207\u7247\u65f6\uff0c\u5f97\u5230\u7684\u6570\u636e\u5728\u539f\u6570\u7ec4\u5b58\u50a8\u533a\u57df\u4e2d\u662f\u7b49\u95f4\u9694\u5206\u5e03\u7684\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u4fee\u6539\u6570\u7ec4\u7684 ndim/shape/strides \u7b49\u5c5e\u6027\u4ee5\u53ca\u6307\u5411\u6570\u636e\u5b58\u50a8\u533a\u57df\u7684 data \u6307\u9488\u5c31\u80fd\u591f\u5b9e\u73b0\u5207\u7247\u7d22\u5f15\u3002\u89c6\u56fe\u548c\u539f\u6570\u7ec4\u5171\u4eab\u6570\u636e\u5b58\u50a8\u533a\u57df\u3002 \u4f7f\u7528\u5e8f\u5217\u7d22\u5f15\u3001\u6570\u7ec4\u7d22\u5f15\u548c\u5e03\u5c14\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u539f\u6570\u7ec4\u5b58\u50a8\u533a\u4e2d\u662f\u7b49\u95f4\u9694\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u548c\u539f\u6570\u7ec4\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u62f7\u8d1d\u3002 print ( \"\u6574\u6570\u7d22\u5f15\" , A [ 1 ] . flags [ \"OWNDATA\" ]) print ( \"\u5207\u7247\u7d22\u5f15\" , A [ 0 : 2 ] . flags [ \"OWNDATA\" ]) print ( \"\u5e8f\u5217\u7d22\u5f15\" , A [[ 0 , 1 ]] . flags [ \"OWNDATA\" ]) print ( \"\u6570\u7ec4\u7d22\u5f15\" , A [ np . array ([[ 0 , 1 ], [ 0 , 1 ]])] . flags [ \"OWNDATA\" ]) print ( \"\u5e03\u5c14\u6570\u7ec4\" , A [ A > 50 ] . flags [ \"OWNDATA\" ]) \u6574\u6570\u7d22\u5f15 False \u5207\u7247\u7d22\u5f15 False \u5e8f\u5217\u7d22\u5f15 True \u6570\u7ec4\u7d22\u5f15 True \u5e03\u5c14\u6570\u7ec4 True","title":"\u7d22\u5f15\u7ed3\u679c\u4e0e\u89c6\u56fe"},{"location":"NumPy/8.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html","text":"import numpy as np import pprint import copy Windows 10 Python 3.8.5 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.28 numpy version: 1.18.5 ndarray \u5bf9\u8c61 NumPy \u63d0\u4f9b\u4e86\u4e00\u4e2a N \u7ef4\u6570\u7ec4\u5bf9\u8c61 ndarray\uff0c\u5b83\u63cf\u8ff0\u4e86\u540c\u4e00\u7c7b\u578b\u7684\u5143\u7d20\u7684\u96c6\u5408\u3002 ndarray \u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f \u540c\u8d28\u7684 1 \uff1a\u6bcf\u4e2a\u5143\u7d20\u5360\u7528\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u5e76\u4e14\u6240\u6709\u5185\u5b58\u5757\u7684\u89e3\u91ca\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002ndarray \u5185\u5b58\u5757\uff08\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\uff09\u89e3\u91ca\u4e3a\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u4fe1\u606f\u5305\u542b\u5728 data-type \u5bf9\u8c61\uff08 dtype \uff09\u4e4b\u4e2d\u3002 \u56fe\u4e2d\u663e\u793a\u4e86\u7528\u4e8e\u63cf\u8ff0\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u4e09\u4e2a\u57fa\u672c\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a ndarray \u672c\u8eab \u63cf\u8ff0\u6570\u7ec4\u4e2d\u5355\u4e2a\u56fa\u5b9a\u5927\u5c0f\u5143\u7d20\u7684\u5185\u5b58\u5e03\u5c40\u7684 data-type \u5bf9\u8c61 \u8bbf\u95ee\u6570\u7ec4\u7684\u5355\u4e2a\u5143\u7d20\u65f6\u8fd4\u56de\u7684\u6570\u7ec4\u6807\u91cf Python \u5bf9\u8c61 Numpy \u6587\u6863\u5bf9 ndarray \u7684\u63cf\u8ff0 ndarray \u7c7b\u7684\u5b9e\u4f8b\u7531\u4e00\u4e2a \u8fde\u7eed\u7684 \u4e00\u7ef4\u8ba1\u7b97\u673a\u5185\u5b58\u5757\uff08\u7531\u6570\u7ec4\u6216\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\uff09\u548c\u4e00\u4e2a\u7d22\u5f15\u65b9\u6848\u7ec4\u5408\u800c\u6210\uff0c\u8be5\u7d22\u5f15\u65b9\u6848\u5c06N\u4e2a\u6574\u6570\u5206\u522b\u6620\u5c04\u5230\u5185\u5b58\u5757\u4e2dN\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u3002\u8fd9\u79cd\u7d22\u5f15\u65b9\u6848\u7531\u6570\u7ec4\u7684 shape \u548c data type \u5b9a\u4e49\uff0c\u7d22\u5f15\u7684\u8303\u56f4\u53d7\u5230 shape \u7684\u9650\u5236\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 NumPy \u6570\u7ec4 \u6570\u636e\u7c7b\u578b Python \u7684 list \u6216 tuple \u5e8f\u5217\u53ef\u4ee5\u50a8\u5b58\u540c\u8d28\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u50a8\u5b58\u5f02\u6784\u7684\u5143\u7d20\uff0c\u4f46\u5982\u300e\u6570\u636e\u7c7b\u578b\u300f\u4e2d\u6240\u8bf4\uff0c\u8fd9\u79cd\u7075\u6d3b\u6027\u662f\u6709\u4ee3\u4ef7\u7684\u3002 list \u5e8f\u5217\u5305\u542b\u7684\u5143\u7d20\u90fd\u662f\u5b8c\u6574\u7684 Python \u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0d\u4ec5\u5305\u542b\u4e86\u201c\u539f\u59cb\u7684\u201d\u503c\uff0c\u8fd8\u5305\u542b\u4e86\u5404\u81ea\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a\u5f15\u7528\u8ba1\u6570 ob_refcnt \u3001\u503c\u7684\u8303\u56f4 ob_size \u3001\u503c\u7684\u7c7b\u578b ob_type \u7b49\u3002\u989d\u5916\u4fe1\u606f\u5e26\u6765\u4e86\u66f4\u591a\u7684\u5f00\u9500\uff0c\u8fd9\u5728\u5305\u542b\u4e86\u8bb8\u591a\u5143\u7d20\u7684 Python \u5bb9\u5668\u5bf9\u8c61\u4e2d\u5c24\u5176\u660e\u663e\u3002\u5728\u6240\u6709\u53d8\u91cf\u90fd\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5927\u90e8\u5206\u662f\u5197\u4f59\u7684\uff0c\u6b64\u65f6\uff0c\u5c06\u6570\u636e\u5b58\u50a8\u5728\u56fa\u5b9a\u7c7b\u578b\u7684\u6570\u7ec4\u4e2d\u66f4\u6709\u6548\u3002 Python \u5217\u8868\u548c\u56fa\u5b9a\u7c7b\u578b\u7684 NumPy \u6570\u7ec4\u7684\u533a\u522b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u5177\u4f53\u5b9e\u73b0\u65b9\u9762\uff0c\u6570\u7ec4\u5b9e\u9645\u4e0a\u5305\u542b\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a\u8fde\u7eed\u6570\u636e\u5757\u7684\u6307\u9488\uff1b\u800c Python \u5217\u8868\u5305\u542b\u4e00\u4e2a\u6307\u5411\u6307\u9488\u5757\u7684\u6307\u9488\uff0c\u6bcf\u4e2a\u6307\u9488\u53c8\u6307\u5411\u4e00\u4e2a\u5b8c\u6574\u7684 Python \u5bf9\u8c61\u3002 \u5217\u8868\u7684\u4f18\u70b9\u662f\u7075\u6d3b\u6027\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u90fd\u662f\u5305\u542b\u6570\u636e\u548c\u7c7b\u578b\u4fe1\u606f\u7684\u5b8c\u6574\u7ed3\u6784\uff0c\u6240\u4ee5\u5217\u8868\u53ef\u4ee5\u586b\u5145\u4efb\u4f55\u6240\u9700\u7c7b\u578b\u7684\u6570\u636e\u3002\u56fa\u5b9a\u7c7b\u578b\u7684 NumPy \u6570\u7ec4\u7f3a\u4e4f\u8fd9\u79cd\u7075\u6d3b\u6027\uff0c\u4f46\u5728\u5b58\u50a8\u548c\u64cd\u4f5c\u6570\u636e\u65b9\u9762\u8981\u9ad8\u6548\u5f97\u591a\u3002 Python \u63d0\u4f9b\u4e86\u51e0\u79cd\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u7528\u4e8e\u5728 \u9ad8\u6548\u7684\u56fa\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7f13\u51b2\u533a \u4e2d\u5b58\u50a8\u6570\u636e\u3002\u4f8b\u5982\uff0c\u5185\u7f6e\u7684 array \u6a21\u5757\uff08Python 3.3+\uff09\u53ef\u7528\u4e8e\u521b\u5efa\u7edf\u4e00\u7c7b\u578b\u7684\u5bc6\u96c6\u6570\u7ec4\u3002 import array L = list ( range ( 10 )) A = array . array ( 'i' , L ) A array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \u8fd9\u91cc\u7684 'i' \u662f\u4e00\u4e2a\u7c7b\u578b\u4ee3\u7801\uff0c\u6307\u793a\u5185\u5bb9\u662f\u6574\u6570\u3002 \u4f46\u66f4\u6709\u7528\u7684\u8fd8\u662f NumPy \u6570\u7ec4\u3002\u867d\u7136 Python \u7684 array \u5bf9\u8c61\u63d0\u4f9b\u4e86\u57fa\u4e8e\u6570\u7ec4\u6570\u636e\u7684\u9ad8\u6548\u5b58\u50a8\uff0c\u4f46 NumPy \u8fd8\u63d0\u4f9b\u4e86\u5bf9\u6570\u7ec4\u6570\u636e\u7684\u9ad8\u6548\u64cd\u4f5c\u3002 \u5185\u5b58\u5e03\u5c40 ndarray \u770b\u4e0a\u53bb\u4f3c\u4e4e\u53ef\u4ee5\u662f\u591a\u7ef4\u7684\uff0c\u4f46\u5728\u5185\u5b58\u4e2d\uff0cndarray \u662f\u4e00\u7ef4\u50a8\u5b58\u7684\u3002\u6709\u8bb8\u591a\u65b9\u6848\u5c06N\u7ef4\u6570\u7ec4\u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u4e2d Numpy \u6709\u4e24\u79cd\u50a8\u5b58\u65b9\u5f0f\uff1a \u5143\u7d20\u6309\u884c\u987a\u5e8f\u50a8\u5b58\uff08C\u8bed\u8a00\u98ce\u683c\uff09 \u6216\u8005\u6309\u5217\u987a\u5e8f\u50a8\u5b58\uff08Fortran\u8bed\u8a00\u98ce\u683c\uff09 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5bf9\u4e00\u4e2a ndarray \u4ee5\u884c\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u597d\u4ee5 C \u7684\u65b9\u5f0f\u521b\u5efa ndarray\uff1b\u5982\u679c\u8981\u5bf9\u4e00\u4e2a ndarray \u4ee5\u5217\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u5219\u7528 Fortran \u65b9\u5f0f\u3002 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) pprint . pprint ( A ) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=int16) \u6570\u7ec4 A \u4e0e\u5185\u5b58\u5e03\u5c40\u76f8\u5173\u7684\u5c5e\u6027\u5982\u4e0b\uff1a \u5c5e\u6027 A\u7684\u5c5e\u6027\u503c \u63cf\u8ff0 A.dtype dtype('int16') \u5143\u7d20\u6570\u636e\u7c7b\u578b\u3002A\u7684\u6bcf\u4e2a\u5143\u7d20\u662f16bit\u5927\u5c0f\u7684int\u578b\u6570\u636e\u3002 A.ndim 2 \u8f74\uff08\u7ef4\u5ea6\uff09\u7684\u4e2a\u6570\u3002A\u6709\u4e24\u4e2a\u8f74\uff1a0\u8f74\u30011\u8f74\u3002 A.shape (3, 3) \u5404\u4e2a\u8f74\u7684\u5927\u5c0f\u30020\u8f74\u67093\u4e2a\u5143\u7d20\uff0c1\u8f74\u67093\u4e2a\u5143\u7d20\u3002 A.size 9 \u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002 A.data <memory address> \u6307\u5411\u6570\u7ec4\u7684\u6570\u636e\u7684\u5b58\u50a8\u533a\u3002 A.itemsize 2 \u4e00\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u300216bit\u7b49\u4e8e2\u5b57\u8282\u3002 A.nbytes 18 \u6570\u7ec4\u5143\u7d20\u5360\u636e\u7684\u603b\u5b57\u8282\u6570\u3002 A.base None \u5982\u679c\u5185\u5b58\u6765\u81ea\u5176\u4ed6\u5bf9\u8c61\uff0c\u5219\u4ee5\u6b64\u4e3a\u57fa\u7840\u5bf9\u8c61\u3002 A.flags \u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\u3002 A.strides (6, 2) \u4e00\u4e2a\u6574\u6570\u5143\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fdd\u5b58\u7740\u6bcf\u4e2a\u8f74\u4e0a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5dee\u3002 \u5373\u5f53\u67d0\u4e2a\u8f74\u7684\u4e0b\u6807\u589e\u52a01 \u65f6\uff0c\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u7684\u6307\u9488\u589e\u52a0\u7684\u5b57\u8282\u6570\u3002 \u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6\u89c2\u5bdf\u8be5 array\uff1a shape[1] (=3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c---\u252c---\u252c---\u2510 \u2510 \u2502 \u2502 0 \u2502 1 \u2502 2 \u2502 \u2502 \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 shape[0] \u2502 \u2502 3 \u2502 4 \u2502 5 \u2502 \u2502 len(Z) (=3) \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 (=3) \u2502 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2502 \u2514 \u2514---\u2534---\u2534---\u2518 \u2518 \u5c55\u5f00\u7684 item layout \u250c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2514---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A.size (=9) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f) strides[1] (=2) \u250c---------------------\u2510 \u250c \u250c----------\u252c----------\u2510 \u2510 \u2502 p+00: \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 \u2502 p+02: \u2502 00000000 \u2502 00000001 \u2502 \u2502 strides[0] \u2502 \u251c----------\u253c----------\u2524 \u2502 (=2x3) \u2502 p+04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2518 \u2502 p+06 \u2502 00000000 \u2502 00000011 \u2502 \u2502 \u251c----------\u253c----------\u2524 A.nbytes \u2502 p+08: \u2502 00000000 \u2502 00000100 \u2502 (=3x3x2) \u2502 \u251c----------\u253c----------\u2524 \u2502 p+10: \u2502 00000000 \u2502 00000101 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 p+12: \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 p+14: \u2502 00000000 \u2502 00000111 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 p+16: \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514----------\u2534----------\u2518 \u2514---------------------\u2518 A.itemsize A.dtype.itemsize (=2) \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: Item layout shape[1] (=2) \u250c-----------\u2510 \u250c \u250c---\u252c---\u252c---\u2510 \u2510 \u2502 \u2502 0 \u2502 \u2502 2 \u2502 \u2502 \u250c---\u252c---\u2510 \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 | 0 \u2502 2 \u2502 shape[0] \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 len(A) --> \u251c---\u253c---\u2524 (=2) \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 (=2) | 6 \u2502 8 \u2502 \u2502 \u2502 6 \u2502 \u2502 8 \u2502 \u2502 \u2514---\u2534---\u2518 \u2514 \u2514---\u2534---\u2534---\u2518 \u2518 \u5c55\u5f00\u7684item layout \u250c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u2510 \u250c---\u252c---\u252c---\u252c---\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2192 \u2502 0 \u2502 2 \u2502 6 \u2502 8 \u2502 \u2514---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2518 \u2514---\u2534---\u2534---\u2534---\u2518 \u2514-\u252c-\u2518 \u2514-\u252c-\u2518 \u2514-\u252c-\u2518 \u2514-\u252c-\u2518 \u2514---\u252c---\u2518 \u2514---\u252c---\u2518 \u2514-----------\u252c-----------\u2518 A.size (=4) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f\uff0c\u5927\u7aef\u5e8f) \u250c \u250c----------\u252c----------\u2510 \u2510 \u2510 \u250c-\u2524 p+00: \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u2502 \u2514 \u251c----------\u253c----------\u2524 \u2502 strides[1] \u2502 \u250c-\u2524 p+02: \u2502 \u2502 \u2502 \u2502 (=4) \u2502 \u2502 \u2502 \u250c \u251c----------\u253c----------\u2524 \u2518 \u2502 \u2502 \u2514-\u2524 p+04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u2514 \u251c----------\u253c----------\u2524 \u2502 strides[0] \u2502 p+06: \u2502 \u2502 \u2502 \u2502 (=12) \u2502 \u251c----------\u253c----------\u2524 \u2502 A.nbytes -\u2524 p+08: \u2502 \u2502 \u2502 \u2502 (=8) \u2502 \u251c----------\u253c----------\u2524 \u2502 \u2502 p+10: \u2502 \u2502 \u2502 \u2502 \u2502 \u250c \u251c----------\u253c----------\u2524 \u2518 \u2502 \u250c-\u2524 p+12: \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u2502 \u2514 \u251c----------\u253c----------\u2524 \u2514-\u2524 p+14: \u2502 \u2502 \u2502 \u2502 \u250c \u251c----------\u253c----------\u2524 \u2514-\u2524 p+16: \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514----------\u2534----------\u2518 \u2514---------------------\u2518 A.itemsize A.dtype.itemsize (=2) \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 ndarray \u5bf9\u8c61\u7684 strides \u5c5e\u6027\uff0c\u6539\u53d8 ndarray \u7684\u5185\u5b58\u5e03\u5c40\uff0c\u4f46\u6b64\u65f6\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\u3002 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) A . strides = ( 2 , 4 ) pprint . pprint ( A ) array([[0, 2, 4], [1, 3, 5], [2, 4, 6]], dtype=int16) \u89c6\u56fe\u548c\u526f\u672c \u89c6\u56fe\u548c\u526f\u672c\u662f\u4f18\u5316\u6570\u503c\u8ba1\u7b97\u7684\u91cd\u8981\u6982\u5ff5\u3002 \u5728 NumPy \u4e2d\uff0c\u53ef\u4ee5\u7528\u5207\u7247\u548c\u82b1\u5f0f\u7d22\u5f15\uff08\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff09\u6765\u7d22\u5f15\u6570\u636e\u3002\u5207\u7247\u5c06\u59cb\u7ec8\u8fd4\u56de\u89c6\u56fe\uff0c\u800c\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u5c06\u8fd4\u56de\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u5207\u7247\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u89c6\u56fe\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u800c\u5728\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u60c5\u51b5\u4e0b\u5219\u4e0d\u662f\u8fd9\u6837\uff1a Z = np . zeros ( 9 ) Z_view = Z [: 3 ] Z_view [ ... ] = 1 print ( Z ) [1. 1. 1. 0. 0. 0. 0. 0. 0.] Z = np . zeros ( 9 ) Z_copy = Z [[ 0 , 1 , 2 ]] Z_copy [ ... ] = 1 print ( Z ) [0. 0. 0. 0. 0. 0. 0. 0. 0.] \u56e0\u6b64\uff0c\u5982\u679c\u9700\u8981\u53cd\u590d\u7528\u5230\u67d0\u4e2a\u82b1\u5f0f\u7d22\u5f15\uff0c\u6700\u597d\u4fdd\u7559\u5b83\u7684\u526f\u672c\uff08\u7279\u522b\u662f\u5982\u679c\u8ba1\u7b97\u5b83\u5f88\u590d\u6742\uff09\u3002\u5982\u679c\u4e0d\u786e\u5b9a\u7d22\u5f15\u7684\u7ed3\u679c\u662f\u89c6\u56fe\u8fd8\u662f\u526f\u672c\uff0c\u5219\u53ef\u4ee5\u68c0\u67e5base\u7684\u7ed3\u679c\u3002\u5982\u679c\u662fNone\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f\u526f\u672c\uff1a Z = np . random . uniform ( 0 , 1 , ( 5 , 5 )) Z1 = Z [: 3 , :] Z2 = Z [[ 0 , 1 , 2 ], :] print ( \"Z1 is equal to Z2:\" , np . allclose ( Z1 , Z2 )) print ( \"Z1's view is Z:\" , Z1 . base is Z ) print ( \"Z2's view is Z:\" , Z2 . base is Z ) print ( \"Z2 has no view:\" , Z2 . base is None ) Z1 is equal to Z2: True Z1's view is Z: True Z2's view is Z: False Z2 has no view: True \u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b Numpy \u51fd\u6570\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u89c6\u56fe (\u4f8b\u5982\uff0cravel)\uff0c\u800c\u53e6\u4e00\u4e9b\u51fd\u6570\u603b\u662f\u8fd4\u56de\u526f\u672c (\u4f8b\u5982\uff0cflatten): Z = np . zeros (( 5 , 5 )) print ( Z . ravel () . base is Z ) True print ( Z [:: 2 , :: 2 ] . ravel () . base is Z ) False print ( Z . flatten () . base is Z ) False \u53ef\u4ee5\u901a\u8fc7 ndarray.view() \u65b9\u6cd5\uff0c\u4ece\u540c\u4e00\u5757\u5185\u5b58\u533a\uff08\u50a8\u5b58\u7740numpy\u6570\u7ec4\u7684\u5185\u5b58\u533a\uff09\u521b\u5efa\u4e0d\u540c\u7684dtype\u6570\u7ec4\u3002\u5373\u7528\u4e0d\u540c\u7684\u6570\u503c\u7c7b\u578b\u67e5\u770b\u540c\u4e00\u6bb5\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5b83\u4eec\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5757\u5185\u5b58\u3002 \u5b9e\u9645\u4e0a\uff0c ndarray.view() \u65b9\u6cd5\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u89c6\u56fe\u3002 A = np . array ([[ 0 , 1 , 2 ], [ 3 , 4 , 5 ], [ 6 , 7 , 8 ]]) A_view = A . view ( np . int32 ) # A_view \u662f\u89c6\u56fe A_view . flags C_CONTIGUOUS : True F_CONTIGUOUS : False OWNDATA : False WRITEABLE : True ALIGNED : True WRITEBACKIFCOPY : False UPDATEIFCOPY : False \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u7684 dtype \uff0c\u4f1a\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c \u4f46\u6b64\u65f6\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u3002 A . dtype = np . float32 Caution \u901a\u5e38\u5e94\u907f\u514d\u6539\u53d8\u7531\u5207\u7247\u3001transposes\u3001fortran\u6392\u5e8f\u7b49\u5b9a\u4e49\u7684\u6570\u7ec4\u7684 dtype \u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u5982\u4e0b\uff1a A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) try : A_view = A . view ( np . int32 ) except ValueError as e : print ( \"ValueError:\" , e ) ValueError: When changing to a larger dtype, its size must be a divisor of the total size in bytes of the last axis of the array. ndarray \u6570\u636e\u7c7b\u578b \u56e0\u4e3a NumPy \u662f\u7528 C \u8bed\u8a00\u6784\u5efa\u7684\uff0c\u6240\u4ee5 C\u3001Fortran \u548c\u5176\u4ed6\u76f8\u5173\u8bed\u8a00\u7684\u7528\u6237\u90fd\u5f88\u719f\u6089\u8fd9\u4e9b\u7c7b\u578b\u3002\u4f46\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u8bb0\u4e0d\u4f4f\u8fd9\u4e9b NumPy \u7684 dtype \u4e5f\u6ca1\u5173\u7cfb\u3002\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u6240\u5904\u7406\u7684\u6570\u636e\u7684\u5927\u81f4\u7c7b\u578b\u662f\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u4e32\uff0c\u8fd8\u662f\u666e\u901a\u7684Python\u5bf9\u8c61\u5373\u53ef\u3002\u5982\u679c\u9700\u8981\u63a7\u5236\u6570\u636e\u5728\u5185\u5b58\u548c\u78c1\u76d8\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\uff08\u5c24\u5176\u662f\u5bf9\u5927\u6570\u636e\u96c6\uff09\uff0c\u90a3\u5c31\u5f97\u4e86\u89e3\u5982\u4f55\u63a7\u5236\u5b58\u50a8\u7c7b\u578b\u3002\u8be6\u7ec6\u4fe1\u606f\u53c2\u8003 Data types \u3002 \u7c7b\u578b \u7c7b\u578b\u4ee3\u7801 \u8bf4\u660e int8\u3001 uint8 i1\u3001u1 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u76848\u4f4d\uff081\u4e2a\u5b57\u8282\uff09\u6574\u578b int16\u3001uint16 i2\u3001u2 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768416\u4f4d\uff082\u4e2a\u5b57\u8282\uff09\u6574\u578b int32\u3001uint32 i4\u3001u4 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768432\u4f4d\uff084\u4e2a\u5b57\u8282\uff09\u6574\u578b int64\u3001uint64 i8\u3001u8 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768464\u4f4d\uff088\u4e2a\u5b57\u8282\uff09\u6574\u578b float16 f2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570 float32 f4\u6216f \u6807\u51c6\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684float\u517c\u5bb9 float64 f8\u6216d \u6807\u51c6\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684double\u548cPython \u7684float\u5bf9\u8c61\u517c\u5bb9 float128 f16 \u6216 g \u6269\u5c55\u7cbe\u5ea6\u6d6e\u70b9\u6570 complex64\u3001complex128\u3001 c8\u3001 c16\u3001 \u5206\u522b\u7528\u4e24\u4e2a32\u4f4d\u300164\u4f4d\u6216128\u4f4d\u6d6e\u70b9\u6570\u8868\u793a\u7684 complex256 c32 \u590d\u6570 bool ? \u5b58\u50a8True\u548cFalse\u503c\u7684\u5e03\u5c14\u7c7b\u578b object O Python\u5bf9\u8c61\u7c7b\u578b string_ S \u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff08\u6bcf\u4e2a\u5b57\u7b261\u4e2a\u5b57\u8282\uff09\u3002 \u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5b57\u7b26\u4e32\uff0c\u5e94\u4f7f\u7528 S10 unicode_ U \u56fa\u5b9a\u957f\u5ea6\u7684Unicode\u7c7b\u578b\uff08\u5b57\u8282\u6570\u7531\u5e73\u53f0\u51b3\u5b9a\uff09\u3002 \u8ddf\u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u65b9\u5f0f\u4e00\u6837\uff08\u5982U10) \u4f8b\u5916\uff1aNumpy\u7684\u7ed3\u6784\u6570\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u8d28\u3002 \u21a9","title":"8.3.\u5185\u5b58\u5e03\u5c40"},{"location":"NumPy/8.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#ndarray","text":"NumPy \u63d0\u4f9b\u4e86\u4e00\u4e2a N \u7ef4\u6570\u7ec4\u5bf9\u8c61 ndarray\uff0c\u5b83\u63cf\u8ff0\u4e86\u540c\u4e00\u7c7b\u578b\u7684\u5143\u7d20\u7684\u96c6\u5408\u3002 ndarray \u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f \u540c\u8d28\u7684 1 \uff1a\u6bcf\u4e2a\u5143\u7d20\u5360\u7528\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u5e76\u4e14\u6240\u6709\u5185\u5b58\u5757\u7684\u89e3\u91ca\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002ndarray \u5185\u5b58\u5757\uff08\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\uff09\u89e3\u91ca\u4e3a\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u4fe1\u606f\u5305\u542b\u5728 data-type \u5bf9\u8c61\uff08 dtype \uff09\u4e4b\u4e2d\u3002 \u56fe\u4e2d\u663e\u793a\u4e86\u7528\u4e8e\u63cf\u8ff0\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u4e09\u4e2a\u57fa\u672c\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a ndarray \u672c\u8eab \u63cf\u8ff0\u6570\u7ec4\u4e2d\u5355\u4e2a\u56fa\u5b9a\u5927\u5c0f\u5143\u7d20\u7684\u5185\u5b58\u5e03\u5c40\u7684 data-type \u5bf9\u8c61 \u8bbf\u95ee\u6570\u7ec4\u7684\u5355\u4e2a\u5143\u7d20\u65f6\u8fd4\u56de\u7684\u6570\u7ec4\u6807\u91cf Python \u5bf9\u8c61 Numpy \u6587\u6863\u5bf9 ndarray \u7684\u63cf\u8ff0 ndarray \u7c7b\u7684\u5b9e\u4f8b\u7531\u4e00\u4e2a \u8fde\u7eed\u7684 \u4e00\u7ef4\u8ba1\u7b97\u673a\u5185\u5b58\u5757\uff08\u7531\u6570\u7ec4\u6216\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\uff09\u548c\u4e00\u4e2a\u7d22\u5f15\u65b9\u6848\u7ec4\u5408\u800c\u6210\uff0c\u8be5\u7d22\u5f15\u65b9\u6848\u5c06N\u4e2a\u6574\u6570\u5206\u522b\u6620\u5c04\u5230\u5185\u5b58\u5757\u4e2dN\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u3002\u8fd9\u79cd\u7d22\u5f15\u65b9\u6848\u7531\u6570\u7ec4\u7684 shape \u548c data type \u5b9a\u4e49\uff0c\u7d22\u5f15\u7684\u8303\u56f4\u53d7\u5230 shape \u7684\u9650\u5236\u3002","title":"ndarray \u5bf9\u8c61"},{"location":"NumPy/8.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#numpy","text":"\u6570\u636e\u7c7b\u578b Python \u7684 list \u6216 tuple \u5e8f\u5217\u53ef\u4ee5\u50a8\u5b58\u540c\u8d28\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u50a8\u5b58\u5f02\u6784\u7684\u5143\u7d20\uff0c\u4f46\u5982\u300e\u6570\u636e\u7c7b\u578b\u300f\u4e2d\u6240\u8bf4\uff0c\u8fd9\u79cd\u7075\u6d3b\u6027\u662f\u6709\u4ee3\u4ef7\u7684\u3002 list \u5e8f\u5217\u5305\u542b\u7684\u5143\u7d20\u90fd\u662f\u5b8c\u6574\u7684 Python \u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0d\u4ec5\u5305\u542b\u4e86\u201c\u539f\u59cb\u7684\u201d\u503c\uff0c\u8fd8\u5305\u542b\u4e86\u5404\u81ea\u7684\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a\u5f15\u7528\u8ba1\u6570 ob_refcnt \u3001\u503c\u7684\u8303\u56f4 ob_size \u3001\u503c\u7684\u7c7b\u578b ob_type \u7b49\u3002\u989d\u5916\u4fe1\u606f\u5e26\u6765\u4e86\u66f4\u591a\u7684\u5f00\u9500\uff0c\u8fd9\u5728\u5305\u542b\u4e86\u8bb8\u591a\u5143\u7d20\u7684 Python \u5bb9\u5668\u5bf9\u8c61\u4e2d\u5c24\u5176\u660e\u663e\u3002\u5728\u6240\u6709\u53d8\u91cf\u90fd\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5927\u90e8\u5206\u662f\u5197\u4f59\u7684\uff0c\u6b64\u65f6\uff0c\u5c06\u6570\u636e\u5b58\u50a8\u5728\u56fa\u5b9a\u7c7b\u578b\u7684\u6570\u7ec4\u4e2d\u66f4\u6709\u6548\u3002 Python \u5217\u8868\u548c\u56fa\u5b9a\u7c7b\u578b\u7684 NumPy \u6570\u7ec4\u7684\u533a\u522b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u5177\u4f53\u5b9e\u73b0\u65b9\u9762\uff0c\u6570\u7ec4\u5b9e\u9645\u4e0a\u5305\u542b\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a\u8fde\u7eed\u6570\u636e\u5757\u7684\u6307\u9488\uff1b\u800c Python \u5217\u8868\u5305\u542b\u4e00\u4e2a\u6307\u5411\u6307\u9488\u5757\u7684\u6307\u9488\uff0c\u6bcf\u4e2a\u6307\u9488\u53c8\u6307\u5411\u4e00\u4e2a\u5b8c\u6574\u7684 Python \u5bf9\u8c61\u3002 \u5217\u8868\u7684\u4f18\u70b9\u662f\u7075\u6d3b\u6027\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u90fd\u662f\u5305\u542b\u6570\u636e\u548c\u7c7b\u578b\u4fe1\u606f\u7684\u5b8c\u6574\u7ed3\u6784\uff0c\u6240\u4ee5\u5217\u8868\u53ef\u4ee5\u586b\u5145\u4efb\u4f55\u6240\u9700\u7c7b\u578b\u7684\u6570\u636e\u3002\u56fa\u5b9a\u7c7b\u578b\u7684 NumPy \u6570\u7ec4\u7f3a\u4e4f\u8fd9\u79cd\u7075\u6d3b\u6027\uff0c\u4f46\u5728\u5b58\u50a8\u548c\u64cd\u4f5c\u6570\u636e\u65b9\u9762\u8981\u9ad8\u6548\u5f97\u591a\u3002 Python \u63d0\u4f9b\u4e86\u51e0\u79cd\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u7528\u4e8e\u5728 \u9ad8\u6548\u7684\u56fa\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7f13\u51b2\u533a \u4e2d\u5b58\u50a8\u6570\u636e\u3002\u4f8b\u5982\uff0c\u5185\u7f6e\u7684 array \u6a21\u5757\uff08Python 3.3+\uff09\u53ef\u7528\u4e8e\u521b\u5efa\u7edf\u4e00\u7c7b\u578b\u7684\u5bc6\u96c6\u6570\u7ec4\u3002 import array L = list ( range ( 10 )) A = array . array ( 'i' , L ) A array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \u8fd9\u91cc\u7684 'i' \u662f\u4e00\u4e2a\u7c7b\u578b\u4ee3\u7801\uff0c\u6307\u793a\u5185\u5bb9\u662f\u6574\u6570\u3002 \u4f46\u66f4\u6709\u7528\u7684\u8fd8\u662f NumPy \u6570\u7ec4\u3002\u867d\u7136 Python \u7684 array \u5bf9\u8c61\u63d0\u4f9b\u4e86\u57fa\u4e8e\u6570\u7ec4\u6570\u636e\u7684\u9ad8\u6548\u5b58\u50a8\uff0c\u4f46 NumPy \u8fd8\u63d0\u4f9b\u4e86\u5bf9\u6570\u7ec4\u6570\u636e\u7684\u9ad8\u6548\u64cd\u4f5c\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981 NumPy \u6570\u7ec4"},{"location":"NumPy/8.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#_1","text":"ndarray \u770b\u4e0a\u53bb\u4f3c\u4e4e\u53ef\u4ee5\u662f\u591a\u7ef4\u7684\uff0c\u4f46\u5728\u5185\u5b58\u4e2d\uff0cndarray \u662f\u4e00\u7ef4\u50a8\u5b58\u7684\u3002\u6709\u8bb8\u591a\u65b9\u6848\u5c06N\u7ef4\u6570\u7ec4\u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u4e2d Numpy \u6709\u4e24\u79cd\u50a8\u5b58\u65b9\u5f0f\uff1a \u5143\u7d20\u6309\u884c\u987a\u5e8f\u50a8\u5b58\uff08C\u8bed\u8a00\u98ce\u683c\uff09 \u6216\u8005\u6309\u5217\u987a\u5e8f\u50a8\u5b58\uff08Fortran\u8bed\u8a00\u98ce\u683c\uff09 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5bf9\u4e00\u4e2a ndarray \u4ee5\u884c\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u597d\u4ee5 C \u7684\u65b9\u5f0f\u521b\u5efa ndarray\uff1b\u5982\u679c\u8981\u5bf9\u4e00\u4e2a ndarray \u4ee5\u5217\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u5219\u7528 Fortran \u65b9\u5f0f\u3002 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) pprint . pprint ( A ) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=int16) \u6570\u7ec4 A \u4e0e\u5185\u5b58\u5e03\u5c40\u76f8\u5173\u7684\u5c5e\u6027\u5982\u4e0b\uff1a \u5c5e\u6027 A\u7684\u5c5e\u6027\u503c \u63cf\u8ff0 A.dtype dtype('int16') \u5143\u7d20\u6570\u636e\u7c7b\u578b\u3002A\u7684\u6bcf\u4e2a\u5143\u7d20\u662f16bit\u5927\u5c0f\u7684int\u578b\u6570\u636e\u3002 A.ndim 2 \u8f74\uff08\u7ef4\u5ea6\uff09\u7684\u4e2a\u6570\u3002A\u6709\u4e24\u4e2a\u8f74\uff1a0\u8f74\u30011\u8f74\u3002 A.shape (3, 3) \u5404\u4e2a\u8f74\u7684\u5927\u5c0f\u30020\u8f74\u67093\u4e2a\u5143\u7d20\uff0c1\u8f74\u67093\u4e2a\u5143\u7d20\u3002 A.size 9 \u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002 A.data <memory address> \u6307\u5411\u6570\u7ec4\u7684\u6570\u636e\u7684\u5b58\u50a8\u533a\u3002 A.itemsize 2 \u4e00\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u300216bit\u7b49\u4e8e2\u5b57\u8282\u3002 A.nbytes 18 \u6570\u7ec4\u5143\u7d20\u5360\u636e\u7684\u603b\u5b57\u8282\u6570\u3002 A.base None \u5982\u679c\u5185\u5b58\u6765\u81ea\u5176\u4ed6\u5bf9\u8c61\uff0c\u5219\u4ee5\u6b64\u4e3a\u57fa\u7840\u5bf9\u8c61\u3002 A.flags \u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\u3002 A.strides (6, 2) \u4e00\u4e2a\u6574\u6570\u5143\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fdd\u5b58\u7740\u6bcf\u4e2a\u8f74\u4e0a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5dee\u3002 \u5373\u5f53\u67d0\u4e2a\u8f74\u7684\u4e0b\u6807\u589e\u52a01 \u65f6\uff0c\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u7684\u6307\u9488\u589e\u52a0\u7684\u5b57\u8282\u6570\u3002 \u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6\u89c2\u5bdf\u8be5 array\uff1a shape[1] (=3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c---\u252c---\u252c---\u2510 \u2510 \u2502 \u2502 0 \u2502 1 \u2502 2 \u2502 \u2502 \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 shape[0] \u2502 \u2502 3 \u2502 4 \u2502 5 \u2502 \u2502 len(Z) (=3) \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 (=3) \u2502 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2502 \u2514 \u2514---\u2534---\u2534---\u2518 \u2518 \u5c55\u5f00\u7684 item layout \u250c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2514---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A.size (=9) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f) strides[1] (=2) \u250c---------------------\u2510 \u250c \u250c----------\u252c----------\u2510 \u2510 \u2502 p+00: \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 \u2502 p+02: \u2502 00000000 \u2502 00000001 \u2502 \u2502 strides[0] \u2502 \u251c----------\u253c----------\u2524 \u2502 (=2x3) \u2502 p+04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2518 \u2502 p+06 \u2502 00000000 \u2502 00000011 \u2502 \u2502 \u251c----------\u253c----------\u2524 A.nbytes \u2502 p+08: \u2502 00000000 \u2502 00000100 \u2502 (=3x3x2) \u2502 \u251c----------\u253c----------\u2524 \u2502 p+10: \u2502 00000000 \u2502 00000101 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 p+12: \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 p+14: \u2502 00000000 \u2502 00000111 \u2502 \u2502 \u251c----------\u253c----------\u2524 \u2502 p+16: \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514----------\u2534----------\u2518 \u2514---------------------\u2518 A.itemsize A.dtype.itemsize (=2) \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: Item layout shape[1] (=2) \u250c-----------\u2510 \u250c \u250c---\u252c---\u252c---\u2510 \u2510 \u2502 \u2502 0 \u2502 \u2502 2 \u2502 \u2502 \u250c---\u252c---\u2510 \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 | 0 \u2502 2 \u2502 shape[0] \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 len(A) --> \u251c---\u253c---\u2524 (=2) \u2502 \u251c---\u253c---\u253c---\u2524 \u2502 (=2) | 6 \u2502 8 \u2502 \u2502 \u2502 6 \u2502 \u2502 8 \u2502 \u2502 \u2514---\u2534---\u2518 \u2514 \u2514---\u2534---\u2534---\u2518 \u2518 \u5c55\u5f00\u7684item layout \u250c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u252c---\u2510 \u250c---\u252c---\u252c---\u252c---\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2192 \u2502 0 \u2502 2 \u2502 6 \u2502 8 \u2502 \u2514---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2534---\u2518 \u2514---\u2534---\u2534---\u2534---\u2518 \u2514-\u252c-\u2518 \u2514-\u252c-\u2518 \u2514-\u252c-\u2518 \u2514-\u252c-\u2518 \u2514---\u252c---\u2518 \u2514---\u252c---\u2518 \u2514-----------\u252c-----------\u2518 A.size (=4) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f\uff0c\u5927\u7aef\u5e8f) \u250c \u250c----------\u252c----------\u2510 \u2510 \u2510 \u250c-\u2524 p+00: \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u2502 \u2514 \u251c----------\u253c----------\u2524 \u2502 strides[1] \u2502 \u250c-\u2524 p+02: \u2502 \u2502 \u2502 \u2502 (=4) \u2502 \u2502 \u2502 \u250c \u251c----------\u253c----------\u2524 \u2518 \u2502 \u2502 \u2514-\u2524 p+04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u2514 \u251c----------\u253c----------\u2524 \u2502 strides[0] \u2502 p+06: \u2502 \u2502 \u2502 \u2502 (=12) \u2502 \u251c----------\u253c----------\u2524 \u2502 A.nbytes -\u2524 p+08: \u2502 \u2502 \u2502 \u2502 (=8) \u2502 \u251c----------\u253c----------\u2524 \u2502 \u2502 p+10: \u2502 \u2502 \u2502 \u2502 \u2502 \u250c \u251c----------\u253c----------\u2524 \u2518 \u2502 \u250c-\u2524 p+12: \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u2502 \u2514 \u251c----------\u253c----------\u2524 \u2514-\u2524 p+14: \u2502 \u2502 \u2502 \u2502 \u250c \u251c----------\u253c----------\u2524 \u2514-\u2524 p+16: \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514----------\u2534----------\u2518 \u2514---------------------\u2518 A.itemsize A.dtype.itemsize (=2) \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 ndarray \u5bf9\u8c61\u7684 strides \u5c5e\u6027\uff0c\u6539\u53d8 ndarray \u7684\u5185\u5b58\u5e03\u5c40\uff0c\u4f46\u6b64\u65f6\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\u3002 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) A . strides = ( 2 , 4 ) pprint . pprint ( A ) array([[0, 2, 4], [1, 3, 5], [2, 4, 6]], dtype=int16)","title":"\u5185\u5b58\u5e03\u5c40"},{"location":"NumPy/8.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#_2","text":"\u89c6\u56fe\u548c\u526f\u672c\u662f\u4f18\u5316\u6570\u503c\u8ba1\u7b97\u7684\u91cd\u8981\u6982\u5ff5\u3002 \u5728 NumPy \u4e2d\uff0c\u53ef\u4ee5\u7528\u5207\u7247\u548c\u82b1\u5f0f\u7d22\u5f15\uff08\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff09\u6765\u7d22\u5f15\u6570\u636e\u3002\u5207\u7247\u5c06\u59cb\u7ec8\u8fd4\u56de\u89c6\u56fe\uff0c\u800c\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u5c06\u8fd4\u56de\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u5207\u7247\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u89c6\u56fe\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u800c\u5728\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u60c5\u51b5\u4e0b\u5219\u4e0d\u662f\u8fd9\u6837\uff1a Z = np . zeros ( 9 ) Z_view = Z [: 3 ] Z_view [ ... ] = 1 print ( Z ) [1. 1. 1. 0. 0. 0. 0. 0. 0.] Z = np . zeros ( 9 ) Z_copy = Z [[ 0 , 1 , 2 ]] Z_copy [ ... ] = 1 print ( Z ) [0. 0. 0. 0. 0. 0. 0. 0. 0.] \u56e0\u6b64\uff0c\u5982\u679c\u9700\u8981\u53cd\u590d\u7528\u5230\u67d0\u4e2a\u82b1\u5f0f\u7d22\u5f15\uff0c\u6700\u597d\u4fdd\u7559\u5b83\u7684\u526f\u672c\uff08\u7279\u522b\u662f\u5982\u679c\u8ba1\u7b97\u5b83\u5f88\u590d\u6742\uff09\u3002\u5982\u679c\u4e0d\u786e\u5b9a\u7d22\u5f15\u7684\u7ed3\u679c\u662f\u89c6\u56fe\u8fd8\u662f\u526f\u672c\uff0c\u5219\u53ef\u4ee5\u68c0\u67e5base\u7684\u7ed3\u679c\u3002\u5982\u679c\u662fNone\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f\u526f\u672c\uff1a Z = np . random . uniform ( 0 , 1 , ( 5 , 5 )) Z1 = Z [: 3 , :] Z2 = Z [[ 0 , 1 , 2 ], :] print ( \"Z1 is equal to Z2:\" , np . allclose ( Z1 , Z2 )) print ( \"Z1's view is Z:\" , Z1 . base is Z ) print ( \"Z2's view is Z:\" , Z2 . base is Z ) print ( \"Z2 has no view:\" , Z2 . base is None ) Z1 is equal to Z2: True Z1's view is Z: True Z2's view is Z: False Z2 has no view: True \u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b Numpy \u51fd\u6570\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u89c6\u56fe (\u4f8b\u5982\uff0cravel)\uff0c\u800c\u53e6\u4e00\u4e9b\u51fd\u6570\u603b\u662f\u8fd4\u56de\u526f\u672c (\u4f8b\u5982\uff0cflatten): Z = np . zeros (( 5 , 5 )) print ( Z . ravel () . base is Z ) True print ( Z [:: 2 , :: 2 ] . ravel () . base is Z ) False print ( Z . flatten () . base is Z ) False \u53ef\u4ee5\u901a\u8fc7 ndarray.view() \u65b9\u6cd5\uff0c\u4ece\u540c\u4e00\u5757\u5185\u5b58\u533a\uff08\u50a8\u5b58\u7740numpy\u6570\u7ec4\u7684\u5185\u5b58\u533a\uff09\u521b\u5efa\u4e0d\u540c\u7684dtype\u6570\u7ec4\u3002\u5373\u7528\u4e0d\u540c\u7684\u6570\u503c\u7c7b\u578b\u67e5\u770b\u540c\u4e00\u6bb5\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5b83\u4eec\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5757\u5185\u5b58\u3002 \u5b9e\u9645\u4e0a\uff0c ndarray.view() \u65b9\u6cd5\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u89c6\u56fe\u3002 A = np . array ([[ 0 , 1 , 2 ], [ 3 , 4 , 5 ], [ 6 , 7 , 8 ]]) A_view = A . view ( np . int32 ) # A_view \u662f\u89c6\u56fe A_view . flags C_CONTIGUOUS : True F_CONTIGUOUS : False OWNDATA : False WRITEABLE : True ALIGNED : True WRITEBACKIFCOPY : False UPDATEIFCOPY : False \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u7684 dtype \uff0c\u4f1a\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c \u4f46\u6b64\u65f6\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u3002 A . dtype = np . float32 Caution \u901a\u5e38\u5e94\u907f\u514d\u6539\u53d8\u7531\u5207\u7247\u3001transposes\u3001fortran\u6392\u5e8f\u7b49\u5b9a\u4e49\u7684\u6570\u7ec4\u7684 dtype \u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u5982\u4e0b\uff1a A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) try : A_view = A . view ( np . int32 ) except ValueError as e : print ( \"ValueError:\" , e ) ValueError: When changing to a larger dtype, its size must be a divisor of the total size in bytes of the last axis of the array.","title":"\u89c6\u56fe\u548c\u526f\u672c"},{"location":"NumPy/8.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#ndarray_1","text":"\u56e0\u4e3a NumPy \u662f\u7528 C \u8bed\u8a00\u6784\u5efa\u7684\uff0c\u6240\u4ee5 C\u3001Fortran \u548c\u5176\u4ed6\u76f8\u5173\u8bed\u8a00\u7684\u7528\u6237\u90fd\u5f88\u719f\u6089\u8fd9\u4e9b\u7c7b\u578b\u3002\u4f46\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u8bb0\u4e0d\u4f4f\u8fd9\u4e9b NumPy \u7684 dtype \u4e5f\u6ca1\u5173\u7cfb\u3002\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u6240\u5904\u7406\u7684\u6570\u636e\u7684\u5927\u81f4\u7c7b\u578b\u662f\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u4e32\uff0c\u8fd8\u662f\u666e\u901a\u7684Python\u5bf9\u8c61\u5373\u53ef\u3002\u5982\u679c\u9700\u8981\u63a7\u5236\u6570\u636e\u5728\u5185\u5b58\u548c\u78c1\u76d8\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\uff08\u5c24\u5176\u662f\u5bf9\u5927\u6570\u636e\u96c6\uff09\uff0c\u90a3\u5c31\u5f97\u4e86\u89e3\u5982\u4f55\u63a7\u5236\u5b58\u50a8\u7c7b\u578b\u3002\u8be6\u7ec6\u4fe1\u606f\u53c2\u8003 Data types \u3002 \u7c7b\u578b \u7c7b\u578b\u4ee3\u7801 \u8bf4\u660e int8\u3001 uint8 i1\u3001u1 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u76848\u4f4d\uff081\u4e2a\u5b57\u8282\uff09\u6574\u578b int16\u3001uint16 i2\u3001u2 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768416\u4f4d\uff082\u4e2a\u5b57\u8282\uff09\u6574\u578b int32\u3001uint32 i4\u3001u4 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768432\u4f4d\uff084\u4e2a\u5b57\u8282\uff09\u6574\u578b int64\u3001uint64 i8\u3001u8 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768464\u4f4d\uff088\u4e2a\u5b57\u8282\uff09\u6574\u578b float16 f2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570 float32 f4\u6216f \u6807\u51c6\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684float\u517c\u5bb9 float64 f8\u6216d \u6807\u51c6\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684double\u548cPython \u7684float\u5bf9\u8c61\u517c\u5bb9 float128 f16 \u6216 g \u6269\u5c55\u7cbe\u5ea6\u6d6e\u70b9\u6570 complex64\u3001complex128\u3001 c8\u3001 c16\u3001 \u5206\u522b\u7528\u4e24\u4e2a32\u4f4d\u300164\u4f4d\u6216128\u4f4d\u6d6e\u70b9\u6570\u8868\u793a\u7684 complex256 c32 \u590d\u6570 bool ? \u5b58\u50a8True\u548cFalse\u503c\u7684\u5e03\u5c14\u7c7b\u578b object O Python\u5bf9\u8c61\u7c7b\u578b string_ S \u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff08\u6bcf\u4e2a\u5b57\u7b261\u4e2a\u5b57\u8282\uff09\u3002 \u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5b57\u7b26\u4e32\uff0c\u5e94\u4f7f\u7528 S10 unicode_ U \u56fa\u5b9a\u957f\u5ea6\u7684Unicode\u7c7b\u578b\uff08\u5b57\u8282\u6570\u7531\u5e73\u53f0\u51b3\u5b9a\uff09\u3002 \u8ddf\u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u65b9\u5f0f\u4e00\u6837\uff08\u5982U10) \u4f8b\u5916\uff1aNumpy\u7684\u7ed3\u6784\u6570\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u8d28\u3002 \u21a9","title":"ndarray \u6570\u636e\u7c7b\u578b"},{"location":"NumPy/8.4.%E5%B9%BF%E6%92%AD.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 \u5e7f\u64ad\u89c4\u5219 \u5f53\u4f7f\u7528ufunc\u51fd\u6570\u5bf9\u4e24\u4e2a\u6570\u7ec4\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0cufunc\u51fd\u6570\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u8981\u6c42\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u4e0d\u540c\uff0c\u5c31\u901a\u8fc7\u5e7f\u64adbroadcasting\u8fdb\u884c\u5904\u7406\uff1a \u9996\u5148\u8ba9\u6240\u6709\u8f93\u5165\u6570\u7ec4\u90fd\u5411\u5176\u4e2d\u7ef4\u5ea6\u6700\u9ad8\u7684\u6570\u7ec4\u770b\u9f50\u3002 \u770b\u9f50\u65b9\u5f0f\u4e3a\uff1a\u5728shape\u5c5e\u6027\u7684\u5de6\u4fa7\u63d2\u5165\u6570\u5b571 \u6700\u540e\u8f93\u51fa\u6570\u7ec4\u7684shape\u5c5e\u6027\u662f\u8f93\u5165\u6570\u7ec4\u7684shape\u5c5e\u6027\u7684\u5404\u8f74\u4e0a\u7684\u6700\u5927\u503c \u5982\u679c\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\uff0c\u6216\u8005\u4e0e\u8f93\u51fa\u6570\u7ec4\u7684\u5404\u5bf9\u5e94\u8f74\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u8be5\u6570\u7ec4\u80fd\u6b63\u786e\u5e7f\u64ad\u3002\u5426\u5219\u8ba1\u7b97\u51fa\u9519 \u5f53\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\u65f6\uff0c\u6cbf\u7740\u6b64\u8f74\u8fd0\u7b97\u65f6\u90fd\u7528\u6b64\u8f74\u4e0a\u7684\u7b2c\u4e00\u7ec4\u503c\u3002 \u5e7f\u64ad\u89c4\u5219\u793a\u610f\u56fe The code to produce the figures is part of the AstroML book \u4e0e\u5e7f\u64ad\u76f8\u5173\u7684\u51fd\u6570 ny.broadcast_arrays() \uff1a\u67e5\u770b\u5e7f\u64ad\u4e4b\u540e\u7684\u6570\u7ec4 \u3002 np.broadcast_to(array, shape, subok=False) \uff1a\u5c06array\u5e7f\u64ad\u4e3a\u6307\u5b9a\u7684shape\uff0c\u5982\u679c\u6307\u5b9a\u7684shape\u4e0d\u6ee1\u8db3\u5e7f\u64ad\u8981\u6c42\uff0c\u5219\u62a5\u9519\u3002 ndarray.repeat(repeats, axis=None) \uff1a\u91cd\u590d\u67d0\u4e2a\u8f74\u4e0a\u7684\u503c\u3002repeats\u4e3a\u91cd\u590d\u6b21\u6570\u3002axis\u6307\u5b9a\u88ab\u91cd\u590d\u7684\u8f74\uff0c\u5373\u6cbf\u7740\u54ea\u4e00\u8f74\u91cd\u590d\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u6570\u7ec4\u5c55\u5e73\u7136\u540e\u91cd\u590d\u3002\u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u5c55\u5e73\u7684\u6570\u7ec4 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = np . arange ( 5 ) c = b [:, None ] d = np . ones (( 5 , 3 )) a = [[0 1] b = [0 1 2 3 4] [2 3] [4 5] [6 7] [8 9]] c = [[0] d = [[1. 1. 1.] [1] [1. 1. 1.] [2] [1. 1. 1.] [3] [1. 1. 1.] [4]] [1. 1. 1.]] np . broadcast_arrays ( d , c ) [array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]), array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])] np . broadcast_to ( b [:, None ], ( 5 , 2 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) a . repeat ( 3 , axis = 1 ) array([[0, 0, 0, 1, 1, 1], [2, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5, 5], [6, 6, 6, 7, 7, 7], [8, 8, 8, 9, 9, 9]])","title":"8.4.\u5e7f\u64ad"},{"location":"NumPy/8.4.%E5%B9%BF%E6%92%AD.html#_1","text":"\u5f53\u4f7f\u7528ufunc\u51fd\u6570\u5bf9\u4e24\u4e2a\u6570\u7ec4\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0cufunc\u51fd\u6570\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u8981\u6c42\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u4e0d\u540c\uff0c\u5c31\u901a\u8fc7\u5e7f\u64adbroadcasting\u8fdb\u884c\u5904\u7406\uff1a \u9996\u5148\u8ba9\u6240\u6709\u8f93\u5165\u6570\u7ec4\u90fd\u5411\u5176\u4e2d\u7ef4\u5ea6\u6700\u9ad8\u7684\u6570\u7ec4\u770b\u9f50\u3002 \u770b\u9f50\u65b9\u5f0f\u4e3a\uff1a\u5728shape\u5c5e\u6027\u7684\u5de6\u4fa7\u63d2\u5165\u6570\u5b571 \u6700\u540e\u8f93\u51fa\u6570\u7ec4\u7684shape\u5c5e\u6027\u662f\u8f93\u5165\u6570\u7ec4\u7684shape\u5c5e\u6027\u7684\u5404\u8f74\u4e0a\u7684\u6700\u5927\u503c \u5982\u679c\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\uff0c\u6216\u8005\u4e0e\u8f93\u51fa\u6570\u7ec4\u7684\u5404\u5bf9\u5e94\u8f74\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u8be5\u6570\u7ec4\u80fd\u6b63\u786e\u5e7f\u64ad\u3002\u5426\u5219\u8ba1\u7b97\u51fa\u9519 \u5f53\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\u65f6\uff0c\u6cbf\u7740\u6b64\u8f74\u8fd0\u7b97\u65f6\u90fd\u7528\u6b64\u8f74\u4e0a\u7684\u7b2c\u4e00\u7ec4\u503c\u3002","title":"\u5e7f\u64ad\u89c4\u5219"},{"location":"NumPy/8.4.%E5%B9%BF%E6%92%AD.html#_2","text":"The code to produce the figures is part of the AstroML book","title":"\u5e7f\u64ad\u89c4\u5219\u793a\u610f\u56fe"},{"location":"NumPy/8.4.%E5%B9%BF%E6%92%AD.html#_3","text":"ny.broadcast_arrays() \uff1a\u67e5\u770b\u5e7f\u64ad\u4e4b\u540e\u7684\u6570\u7ec4 \u3002 np.broadcast_to(array, shape, subok=False) \uff1a\u5c06array\u5e7f\u64ad\u4e3a\u6307\u5b9a\u7684shape\uff0c\u5982\u679c\u6307\u5b9a\u7684shape\u4e0d\u6ee1\u8db3\u5e7f\u64ad\u8981\u6c42\uff0c\u5219\u62a5\u9519\u3002 ndarray.repeat(repeats, axis=None) \uff1a\u91cd\u590d\u67d0\u4e2a\u8f74\u4e0a\u7684\u503c\u3002repeats\u4e3a\u91cd\u590d\u6b21\u6570\u3002axis\u6307\u5b9a\u88ab\u91cd\u590d\u7684\u8f74\uff0c\u5373\u6cbf\u7740\u54ea\u4e00\u8f74\u91cd\u590d\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u6570\u7ec4\u5c55\u5e73\u7136\u540e\u91cd\u590d\u3002\u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u5c55\u5e73\u7684\u6570\u7ec4 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = np . arange ( 5 ) c = b [:, None ] d = np . ones (( 5 , 3 )) a = [[0 1] b = [0 1 2 3 4] [2 3] [4 5] [6 7] [8 9]] c = [[0] d = [[1. 1. 1.] [1] [1. 1. 1.] [2] [1. 1. 1.] [3] [1. 1. 1.] [4]] [1. 1. 1.]] np . broadcast_arrays ( d , c ) [array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]), array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])] np . broadcast_to ( b [:, None ], ( 5 , 2 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) a . repeat ( 3 , axis = 1 ) array([[0, 0, 0, 1, 1, 1], [2, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5, 5], [6, 6, 6, 7, 7, 7], [8, 8, 8, 9, 9, 9]])","title":"\u4e0e\u5e7f\u64ad\u76f8\u5173\u7684\u51fd\u6570"},{"location":"NumPy/8.5.%E5%B8%B8%E9%87%8F.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 NumPy\u5b9a\u4e49\u4e86\u51e0\u4e2a\u5e38\u91cf\uff08\u90fd\u662fIEEE 754 \u6d6e\u70b9\u8868\u793a\uff09\uff1a \uff08\u6b63\uff09\u65e0\u7a77\u5927 # \u4f7f\u7528`inf`\u662f\u56e0\u4e3a`Inf`\u3001`Infinity`\u3001`PINF`\u548c`infty`\u662f`inf`\u7684\u522b\u540d\u3002 np . inf np . Infinity np . PINF np . Inf np . infty inf \u8d1f\u65e0\u7a77\u5927 np . NINF -inf \u975e\u6570\u5b57 NaN # `NaN`\u548c`NAN`\u662f`nan`\u7684\u7b49\u4ef7\u5b9a\u4e49\u3002\u8bf7\u4f7f\u7528`nan\u800c\u4e0d\u662f`NAN`\u3002 np . nan np . NAN np . NaN nan \u8d1f\u96f6 np . NZERO -0.0 \u6b63\u96f6 np . PZERO 0.0 \u81ea\u7136\u5bf9\u6570\u7684\u57fa\u7840\uff0c\u7eb3\u76ae\u5c14\u7684\u5e38\u6570 np . e 2.718281828459045 \u6b27\u62c9\u5e38\u6570 \u03b3 = 0.5772156649015328606065120900824024310421... \u53c2\u8003 np . euler_gamma 0.5772156649015329 None\u7684\u4fbf\u6377\u522b\u540d \u7ed9\u6570\u7ec4\u589e\u52a0\u8f74\uff0c\u6216\u7d22\u5f15\u6570\u7ec4\u65f6\u4f7f\u7528\u3002 np . newaxis \u5706\u5468\u7387 np . pi 3.141592653589793","title":"8.5.\u5e38\u91cf"},{"location":"NumPy/8.6.%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 numpy version: 1.18.1 \u6570\u7ec4\u6253\u5370\u7684\u89c4\u5219 \u5f53\u6253\u5370ndarray\u65f6\uff0cnumpy\u6309\u7167Python\u7684\u5d4c\u5957list\u7684\u683c\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u4f46\u662f\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6253\u5370\uff1a \u6700\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8f93\u51fa \u6b21\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa \u5176\u4ed6\u5c42\u7684axis\u4e5f\u662f\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u662f\u6bcf\u4e2aslice\u4e2d\u95f4\u95f4\u9694\u4e00\u6761\u7a7a\u884c \u5982\uff1a \u4e00\u7ef4\u7684ndarray\u6309\u884c\u6253\u5370\uff1b\u4e8c\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u6253\u5370\uff1b\u4e09\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u7684list\u6253\u5370 \u5982\u679cndarray\u592a\u5927\uff0c\u90a3\u4e48numpy\u9ed8\u8ba4\u8df3\u8fc7\u4e2d\u95f4\u90e8\u5206\u7684\u6570\u636e\u800c\u53ea\u662f\u8f93\u51fa\u56db\u4e2a\u89d2\u843d\u7684\u6570\u636e\u3002 \u8981\u60f3\u4efb\u4f55\u65f6\u5019\u90fd\u6253\u5370\u5168\u90e8\u6570\u636e\uff0c\u53ef\u4ee5\u5728print(array)\u4e4b\u524d\u8bbe\u7f6e\u9009\u9879 np . set_printoptions ( threshold = None ) \u8fd9\u6837\u540e\u7eed\u7684\u6253\u5370ndarray\u5c31\u4e0d\u4f1a\u7701\u7565\u4e2d\u95f4\u6570\u636e\u3002 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array([ 0, 1, 2, ..., 197, 198, 199])","title":"8.6.\u6253\u5370\u6570\u7ec4"},{"location":"NumPy/8.6.%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84.html#_1","text":"\u5f53\u6253\u5370ndarray\u65f6\uff0cnumpy\u6309\u7167Python\u7684\u5d4c\u5957list\u7684\u683c\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u4f46\u662f\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6253\u5370\uff1a \u6700\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8f93\u51fa \u6b21\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa \u5176\u4ed6\u5c42\u7684axis\u4e5f\u662f\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u662f\u6bcf\u4e2aslice\u4e2d\u95f4\u95f4\u9694\u4e00\u6761\u7a7a\u884c \u5982\uff1a \u4e00\u7ef4\u7684ndarray\u6309\u884c\u6253\u5370\uff1b\u4e8c\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u6253\u5370\uff1b\u4e09\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u7684list\u6253\u5370 \u5982\u679cndarray\u592a\u5927\uff0c\u90a3\u4e48numpy\u9ed8\u8ba4\u8df3\u8fc7\u4e2d\u95f4\u90e8\u5206\u7684\u6570\u636e\u800c\u53ea\u662f\u8f93\u51fa\u56db\u4e2a\u89d2\u843d\u7684\u6570\u636e\u3002 \u8981\u60f3\u4efb\u4f55\u65f6\u5019\u90fd\u6253\u5370\u5168\u90e8\u6570\u636e\uff0c\u53ef\u4ee5\u5728print(array)\u4e4b\u524d\u8bbe\u7f6e\u9009\u9879 np . set_printoptions ( threshold = None ) \u8fd9\u6837\u540e\u7eed\u7684\u6253\u5370ndarray\u5c31\u4e0d\u4f1a\u7701\u7565\u4e2d\u95f4\u6570\u636e\u3002 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array([ 0, 1, 2, ..., 197, 198, 199])","title":"\u6570\u7ec4\u6253\u5370\u7684\u89c4\u5219"},{"location":"NumPy/8.7.%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 \u6dfb\u52a0\u548c\u5220\u9664\u6570\u7ec4\u5143\u7d20 \u65b9\u6cd5 \u63cf\u8ff0 delete (arr, obj[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5220\u9664\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u7ec4 insert (arr, obj, values[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5728\u6307\u5b9a\u7d22\u5f15\u4e4b\u524d\u63d2\u5165\u503c append (arr, values[, axis]) \u5c06\u503c\u9644\u52a0\u5230\u6570\u7ec4\u7684\u672b\u5c3e trim_zeros s(filt[, trim]) \u4fee\u526a\u4e00\u7ef4\u6570\u7ec4\u6216\u5e8f\u5217\u4e2d\u7684\u524d\u5bfc\u3001\u5c3e\u968f\u7684\u96f6 unique (ar[, return_index, return_inverse, \u2026]) \u8fd4\u56de\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 # append a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . append ( a , [[ 1 , 2 ],[ 3 , 4 ]], axis = 0 ) array([[0, 1], [2, 3], [1, 2], [3, 4]]) # insert a = np . arange ( 4 ) . reshape (( 2 , 2 )) # obj \u662f\u7d22\u5f15 np . insert ( a , obj = 1 , values = [ 10 , 11 ], axis = 0 ) array([[ 0, 1], [10, 11], [ 2, 3]]) # delete \u5220\u9664\u6307\u5b9a\u6570\u636e\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u636e a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . delete ( a , 1 , axis = 0 ) array([[0, 1]]) # \u9ed8\u8ba4\u8fd4\u56de\u4e00\u7ef4\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = None ) array([1, 2, 3]) # \u8bbe\u7f6eaxis\u53c2\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = 0 ) array([[1, 2], [2, 3]]) # \u540c\u65f6\u8fd4\u56deunique\u6570\u7ec4\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = True , return_inverse = False , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 2], dtype=int64)) # \u540c\u65f6\u8fd4\u56de\u539f\u6570\u7ec4\u5143\u7d20\u5728unique\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index # \u53ef\u7528\u4e8e\u91cd\u5efa\u539f\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = True , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 0, 1], dtype=int64)) # \u540c\u65f6\u8fd4\u56de \u8ba1\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = True , axis = 0 ) (array([[1, 2], [2, 3]]), array([2, 1], dtype=int64)) a = np . array ([ 0 , 0 , 1 , 2 , 3 , 0 , 0 ]) # \u5220\u9664\u4e00\u7ef4\u6570\u7ec4\u5f00\u5934\u548c\u7ed3\u5c3e\u76840\u5143\u7d20 # trim='f' \u4ece\u524d\u9762\u88c1\u526a # trim='b' \u4ece\u540e\u9762\u88c1\u526a # \u9ed8\u8ba4\u4e3a trim='fb' np . trim_zeros ( a , trim = 'fb' ) array([1, 2, 3])","title":"8.7.\u6dfb\u52a0\u548c\u5220\u9664"},{"location":"NumPy/8.7.%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4.html#_1","text":"\u65b9\u6cd5 \u63cf\u8ff0 delete (arr, obj[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5220\u9664\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u7ec4 insert (arr, obj, values[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5728\u6307\u5b9a\u7d22\u5f15\u4e4b\u524d\u63d2\u5165\u503c append (arr, values[, axis]) \u5c06\u503c\u9644\u52a0\u5230\u6570\u7ec4\u7684\u672b\u5c3e trim_zeros s(filt[, trim]) \u4fee\u526a\u4e00\u7ef4\u6570\u7ec4\u6216\u5e8f\u5217\u4e2d\u7684\u524d\u5bfc\u3001\u5c3e\u968f\u7684\u96f6 unique (ar[, return_index, return_inverse, \u2026]) \u8fd4\u56de\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 # append a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . append ( a , [[ 1 , 2 ],[ 3 , 4 ]], axis = 0 ) array([[0, 1], [2, 3], [1, 2], [3, 4]]) # insert a = np . arange ( 4 ) . reshape (( 2 , 2 )) # obj \u662f\u7d22\u5f15 np . insert ( a , obj = 1 , values = [ 10 , 11 ], axis = 0 ) array([[ 0, 1], [10, 11], [ 2, 3]]) # delete \u5220\u9664\u6307\u5b9a\u6570\u636e\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u636e a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . delete ( a , 1 , axis = 0 ) array([[0, 1]]) # \u9ed8\u8ba4\u8fd4\u56de\u4e00\u7ef4\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = None ) array([1, 2, 3]) # \u8bbe\u7f6eaxis\u53c2\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = 0 ) array([[1, 2], [2, 3]]) # \u540c\u65f6\u8fd4\u56deunique\u6570\u7ec4\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = True , return_inverse = False , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 2], dtype=int64)) # \u540c\u65f6\u8fd4\u56de\u539f\u6570\u7ec4\u5143\u7d20\u5728unique\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index # \u53ef\u7528\u4e8e\u91cd\u5efa\u539f\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = True , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 0, 1], dtype=int64)) # \u540c\u65f6\u8fd4\u56de \u8ba1\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = True , axis = 0 ) (array([[1, 2], [2, 3]]), array([2, 1], dtype=int64)) a = np . array ([ 0 , 0 , 1 , 2 , 3 , 0 , 0 ]) # \u5220\u9664\u4e00\u7ef4\u6570\u7ec4\u5f00\u5934\u548c\u7ed3\u5c3e\u76840\u5143\u7d20 # trim='f' \u4ece\u524d\u9762\u88c1\u526a # trim='b' \u4ece\u540e\u9762\u88c1\u526a # \u9ed8\u8ba4\u4e3a trim='fb' np . trim_zeros ( a , trim = 'fb' ) array([1, 2, 3])","title":"\u6dfb\u52a0\u548c\u5220\u9664\u6570\u7ec4\u5143\u7d20"},{"location":"NumPy/8.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 \u5f62\u72b6\u64cd\u4f5c( shape ) .shape .reshape() .resize() reshape resize \u533a\u522b\uff1a reshape\u4e0d\u4f1a\u4fee\u6539\u539f\u6570\u636e,\u8fd4\u56de\u89c6\u56fe resize\u4fee\u6539\u539f\u6570\u636e\uff0c\u8fd4\u56deNone # \u521b\u5efa\u793a\u4f8b\u6570\u636e a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . shape = ( 5 , 10 ) a . flags # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . shape = ( 25 , - 1 ) # \u4e0d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . reshape ( 5 , 10 ) # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . reshape ( 5 , - 1 ) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . resize (( 25 , 2 )) \u5f62\u72b6\u64cd\u4f5c( ndim ) .flatten() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .reval() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .squeeze() \uff1a\u5c06\u5927\u5c0f\u7b49\u4e8e1\u7684\u8f74\u5220\u9664 .swapaxes(a, axis1, axis2)) \uff1a\u4ea4\u6362\u6307\u5b9a\u7684\u4e24\u4e2a\u8f74axis1/axis2\u3002\u5b83\u83b7\u5f97\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .transpose(a, axes=None) \uff1a\u91cd\u7f6e\u8f74\u5e8f\u3002\u5982\u679c axes=None \uff0c\u5219\u9ed8\u8ba4\u91cd\u7f6e\u4e3a\u9006\u5e8f\u7684\u8f74\u5e8f\uff0c\u5982\u539f\u6765\u7684 shape=(1,2,3) \uff0c\u9006\u5e8f\u4e4b\u540e\u4e3a (3,2,1\uff09 \u5982\u679c axes!=None \uff0c\u5219\u8981\u7ed9\u51fa\u91cd\u7f6e\u540e\u7684\u8f74\u5e8f\u3002\u5b83\u83b7\u5f97\u7684\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .atleast_1d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e00\u7ef4\u7684\u6570\u7ec4 .atleast_2d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e8c\u7ef4\u7684\u6570\u7ec4 .atleast_3d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e09\u7ef4\u7684\u6570\u7ec4 .expand_dims() \uff1a\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5927\u5c0f\u4e3a1\u7684\u65b0\u8f74 .moveaxis(a, source, destination) \uff1a\u5c06a\u4e2d\u7684source\u8f74\u79fb\u52a8\u5230\u4f4d\u7f6edestination\uff0csource\u3001destination\u53ef\u4ee5\u662fint of list\uff0c\u4e00\u6b21\u6027\u79fb\u52a8\u591a\u4e2a\u8f74 # \u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 a . flatten () # \u8fd4\u56de\u526f\u672c a . ravel () # \u4e00\u822c\u8fd4\u56de\u89c6\u56fe ## flatten ravel \u533a\u522b ## ravel()\uff1a\u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6e90\u6570\u636e\u7684\u526f\u672c ## flatten()\uff1a\u8fd4\u56de\u6e90\u6570\u636e\u7684\u526f\u672c b = np . arange ( 10 ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # \u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4,\u8fd4\u56de\u526f\u672c b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array([[0], [1], [2], [3], [4], [5]]) b . squeeze ( 1 ) array([ 0, 1, 2, ..., 17, 18, 19]) # \u8fd4\u56de\u6570\u7ec4\u7684\u89c6\u56fe\uff0c\u5176\u4e2daxis1\u548caxis2\u4e92\u6362\u3002 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # \u89c6\u56fe array([[ 0, 2, 4, ..., 14, 16, 18], [ 1, 3, 5, ..., 15, 17, 19]]) # \u8fd4\u56de\u8f74\u8f6c\u7f6e\u7684\u6570\u7ec4\u89c6\u56fe\u3002 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array([[[ 0, 20, 40], [10, 30, 50]], [[ 1, 21, 41], [11, 31, 51]], [[ 2, 22, 42], [12, 32, 52]], ..., [[ 7, 27, 47], [17, 37, 57]], [[ 8, 28, 48], [18, 38, 58]], [[ 9, 29, 49], [19, 39, 59]]]) # atleast_nd np . atleast_1d ( 1 ) array([1]) np . atleast_2d ([ 1 , 2 , 3 , 4 ]) array([[1, 2, 3, 4]]) np . atleast_3d ([[ 1 , 2 ],[ 3 , 4 ]]) array([[[1], [2]], [[3], [4]]]) a = np . arange ( 4 ) . reshape ( 2 , 2 ) np . expand_dims ( a , 1 ) . shape (2, 1, 2) x = np . zeros (( 3 , 4 , 5 )) print ( np . moveaxis ( x , 0 , - 1 ) . shape ) print ( np . moveaxis ( x , - 1 , 0 ) . shape ) (4, 5, 3) (5, 3, 4) \"\u4ee5\u4e0b\u4ee3\u7801\u7684\u6548\u679c\u4e00\u6837\" x = np . zeros (( 3 , 4 , 5 )) np . transpose ( x ) . shape np . swapaxes ( x , 0 , - 1 ) . shape np . moveaxis ( x , [ 0 , 2 ], [ - 1 , - 2 ]) . shape np . moveaxis ( x , [ 0 , 1 , 2 ], [ - 1 , - 2 , - 3 ]) . shape \u6570\u7ec4\u62fc\u63a5 .concatenate((a1, a2, ...), axis=0) \uff1a\u8fde\u63a5\u591a\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d (a1,a2,...) \u4e3a\u6570\u7ec4\u7684\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u5f85\u8fde\u63a5\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u6cbf\u7740 axis \u6307\u5b9a\u7684\u5df2\u5b58\u5728\u7684\u8f74\u8fde\u63a5\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u6570\u7ec4\u7684\u5f62\u72b6\uff0c\u9664\u4e86 axis \u8f74\u4e4b\u5916\u90fd\u76f8\u540c\u3002 .vstack(tup) \uff1a\u6cbf0\u8f74\u62fc\u63a5\uff08\u5782\u76f4\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u884c\u3002 .hstack(tup) \uff1a\u6cbf1\u8f74\u62fc\u63a5\uff08\u6c34\u5e73\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u5217\u3002 .dstack(tup) \uff1a numpy.concatenate((a1, a2, ...), axis=3) \u3002\u6cbf\u77403\u8f74\u5806\u53e0\u6570\u7ec4\u3002 .column_stack(tup) \uff1a\u7c7b\u4f3c\u4e8e hstack \uff0c\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002 .c_ \uff1a .c_ \u5bf9\u8c61\u7684 [] \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6309\u5217\u8fde\u63a5\u6570\u7ec4\u3002\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002\u6cbf\u5217\u65b9\u5411\u62fc\u63a5\uff0c\u589e\u52a0\u5217\u3002 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # \u6a2a\u5411\u62fc\u63a5\u3001\u62fc\u63a5 1 \u8f74\uff08\u7b2c\u4e8c\u4e2a\u8f74\uff0c\u5373\u5217\uff09 np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array([[0, 1, 0, 1], [2, 3, 2, 3], [4, 5, 4, 5], [6, 7, 6, 7], [8, 9, 8, 9]]) # column_stack hstack np.c_\u533a\u522b a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) np . hstack (( a1 , a1 )) array([0, 1, 2, ..., 2, 3, 4]) np . c_ [ a1 , a1 ] array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) \u6570\u7ec4\u62c6\u5206 1. .split(ary, indices_or_sections, axis=0) \uff1a\u7528\u4e8e\u6cbf\u7740\u6307\u5b9a\u7684\u8f74\u62c6\u5206\u6570\u7ec4ary\u3002indices_or_sections\u6307\u5b9a\u4e86\u62c6\u5206\u70b9\uff1a \u5982\u679c\u4e3a\u6574\u6570N\uff0c\u5219\u8868\u793a\u5e73\u5747\u62c6\u5206\u6210N\u4efd\u3002\u5982\u679c\u4e0d\u80fd\u5e73\u5747\u62c6\u5206\uff0c\u5219\u62a5\u9519 \u5982\u679c\u4e3a\u5e8f\u5217\uff0c\u5219\u8be5\u5e8f\u5217\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\uff08\u65e0\u9700\u6307\u5b9a\u6700\u5f00\u59cb\u76840\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\u5982 [1,3] \u6307\u5b9a\u4e86\u533a\u95f4\uff1a [0,1],[1,3],[3:] 2. .array_split(ary, indices_or_sections, axis=0) \uff1a\u4f5c\u7528\u4e0e .split() \u7c7b\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff1a\u5f53indices_or_sections\u4e3a\u6574\u6570\uff0c\u4e14\u65e0\u6cd5\u5e73\u5747\u62c6\u5206\u65f6\uff0c\u5e76\u4e0d\u62a5\u9519\uff0c\u800c\u662f\u5c3d\u53ef\u80fd\u7684\u7ef4\u6301\u5e73\u5747\u62c6\u5206\u3002 3. .dsplit(ary, indices_or_sections) \uff1a\u6cbf\u7b2c3\u8f74\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 4. .hsplit(ary, indices_or_sections) \uff1a\u6c34\u5e73\uff08\u6309\u5217\uff09\u5c06\u4e00\u4e2a\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 5. .vsplit(ary, indices_or_sections) \uff1a\u5782\u76f4\uff08\u884c\uff09\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]), array([[25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [array([[ 0], [ 5], [10], ..., [35], [40], [45]]), array([[ 1, 2], [ 6, 7], [11, 12], ..., [36, 37], [41, 42], [46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])] np . array_split ( a , 2 , axis = 1 ) [array([[ 0, 1, 2], [ 5, 6, 7], [10, 11, 12], ..., [35, 36, 37], [40, 41, 42], [45, 46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])]","title":"8.8.\u5f62\u72b6\u64cd\u7eb5"},{"location":"NumPy/8.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#shape","text":".shape .reshape() .resize() reshape resize \u533a\u522b\uff1a reshape\u4e0d\u4f1a\u4fee\u6539\u539f\u6570\u636e,\u8fd4\u56de\u89c6\u56fe resize\u4fee\u6539\u539f\u6570\u636e\uff0c\u8fd4\u56deNone # \u521b\u5efa\u793a\u4f8b\u6570\u636e a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . shape = ( 5 , 10 ) a . flags # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . shape = ( 25 , - 1 ) # \u4e0d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . reshape ( 5 , 10 ) # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . reshape ( 5 , - 1 ) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . resize (( 25 , 2 ))","title":"\u5f62\u72b6\u64cd\u4f5c(shape)"},{"location":"NumPy/8.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#ndim","text":".flatten() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .reval() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .squeeze() \uff1a\u5c06\u5927\u5c0f\u7b49\u4e8e1\u7684\u8f74\u5220\u9664 .swapaxes(a, axis1, axis2)) \uff1a\u4ea4\u6362\u6307\u5b9a\u7684\u4e24\u4e2a\u8f74axis1/axis2\u3002\u5b83\u83b7\u5f97\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .transpose(a, axes=None) \uff1a\u91cd\u7f6e\u8f74\u5e8f\u3002\u5982\u679c axes=None \uff0c\u5219\u9ed8\u8ba4\u91cd\u7f6e\u4e3a\u9006\u5e8f\u7684\u8f74\u5e8f\uff0c\u5982\u539f\u6765\u7684 shape=(1,2,3) \uff0c\u9006\u5e8f\u4e4b\u540e\u4e3a (3,2,1\uff09 \u5982\u679c axes!=None \uff0c\u5219\u8981\u7ed9\u51fa\u91cd\u7f6e\u540e\u7684\u8f74\u5e8f\u3002\u5b83\u83b7\u5f97\u7684\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .atleast_1d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e00\u7ef4\u7684\u6570\u7ec4 .atleast_2d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e8c\u7ef4\u7684\u6570\u7ec4 .atleast_3d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e09\u7ef4\u7684\u6570\u7ec4 .expand_dims() \uff1a\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5927\u5c0f\u4e3a1\u7684\u65b0\u8f74 .moveaxis(a, source, destination) \uff1a\u5c06a\u4e2d\u7684source\u8f74\u79fb\u52a8\u5230\u4f4d\u7f6edestination\uff0csource\u3001destination\u53ef\u4ee5\u662fint of list\uff0c\u4e00\u6b21\u6027\u79fb\u52a8\u591a\u4e2a\u8f74 # \u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 a . flatten () # \u8fd4\u56de\u526f\u672c a . ravel () # \u4e00\u822c\u8fd4\u56de\u89c6\u56fe ## flatten ravel \u533a\u522b ## ravel()\uff1a\u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6e90\u6570\u636e\u7684\u526f\u672c ## flatten()\uff1a\u8fd4\u56de\u6e90\u6570\u636e\u7684\u526f\u672c b = np . arange ( 10 ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # \u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4,\u8fd4\u56de\u526f\u672c b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array([[0], [1], [2], [3], [4], [5]]) b . squeeze ( 1 ) array([ 0, 1, 2, ..., 17, 18, 19]) # \u8fd4\u56de\u6570\u7ec4\u7684\u89c6\u56fe\uff0c\u5176\u4e2daxis1\u548caxis2\u4e92\u6362\u3002 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # \u89c6\u56fe array([[ 0, 2, 4, ..., 14, 16, 18], [ 1, 3, 5, ..., 15, 17, 19]]) # \u8fd4\u56de\u8f74\u8f6c\u7f6e\u7684\u6570\u7ec4\u89c6\u56fe\u3002 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array([[[ 0, 20, 40], [10, 30, 50]], [[ 1, 21, 41], [11, 31, 51]], [[ 2, 22, 42], [12, 32, 52]], ..., [[ 7, 27, 47], [17, 37, 57]], [[ 8, 28, 48], [18, 38, 58]], [[ 9, 29, 49], [19, 39, 59]]]) # atleast_nd np . atleast_1d ( 1 ) array([1]) np . atleast_2d ([ 1 , 2 , 3 , 4 ]) array([[1, 2, 3, 4]]) np . atleast_3d ([[ 1 , 2 ],[ 3 , 4 ]]) array([[[1], [2]], [[3], [4]]]) a = np . arange ( 4 ) . reshape ( 2 , 2 ) np . expand_dims ( a , 1 ) . shape (2, 1, 2) x = np . zeros (( 3 , 4 , 5 )) print ( np . moveaxis ( x , 0 , - 1 ) . shape ) print ( np . moveaxis ( x , - 1 , 0 ) . shape ) (4, 5, 3) (5, 3, 4) \"\u4ee5\u4e0b\u4ee3\u7801\u7684\u6548\u679c\u4e00\u6837\" x = np . zeros (( 3 , 4 , 5 )) np . transpose ( x ) . shape np . swapaxes ( x , 0 , - 1 ) . shape np . moveaxis ( x , [ 0 , 2 ], [ - 1 , - 2 ]) . shape np . moveaxis ( x , [ 0 , 1 , 2 ], [ - 1 , - 2 , - 3 ]) . shape","title":"\u5f62\u72b6\u64cd\u4f5c(ndim)"},{"location":"NumPy/8.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#_1","text":".concatenate((a1, a2, ...), axis=0) \uff1a\u8fde\u63a5\u591a\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d (a1,a2,...) \u4e3a\u6570\u7ec4\u7684\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u5f85\u8fde\u63a5\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u6cbf\u7740 axis \u6307\u5b9a\u7684\u5df2\u5b58\u5728\u7684\u8f74\u8fde\u63a5\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u6570\u7ec4\u7684\u5f62\u72b6\uff0c\u9664\u4e86 axis \u8f74\u4e4b\u5916\u90fd\u76f8\u540c\u3002 .vstack(tup) \uff1a\u6cbf0\u8f74\u62fc\u63a5\uff08\u5782\u76f4\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u884c\u3002 .hstack(tup) \uff1a\u6cbf1\u8f74\u62fc\u63a5\uff08\u6c34\u5e73\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u5217\u3002 .dstack(tup) \uff1a numpy.concatenate((a1, a2, ...), axis=3) \u3002\u6cbf\u77403\u8f74\u5806\u53e0\u6570\u7ec4\u3002 .column_stack(tup) \uff1a\u7c7b\u4f3c\u4e8e hstack \uff0c\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002 .c_ \uff1a .c_ \u5bf9\u8c61\u7684 [] \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6309\u5217\u8fde\u63a5\u6570\u7ec4\u3002\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002\u6cbf\u5217\u65b9\u5411\u62fc\u63a5\uff0c\u589e\u52a0\u5217\u3002 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # \u6a2a\u5411\u62fc\u63a5\u3001\u62fc\u63a5 1 \u8f74\uff08\u7b2c\u4e8c\u4e2a\u8f74\uff0c\u5373\u5217\uff09 np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array([[0, 1, 0, 1], [2, 3, 2, 3], [4, 5, 4, 5], [6, 7, 6, 7], [8, 9, 8, 9]]) # column_stack hstack np.c_\u533a\u522b a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) np . hstack (( a1 , a1 )) array([0, 1, 2, ..., 2, 3, 4]) np . c_ [ a1 , a1 ] array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])","title":"\u6570\u7ec4\u62fc\u63a5"},{"location":"NumPy/8.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#_2","text":"1. .split(ary, indices_or_sections, axis=0) \uff1a\u7528\u4e8e\u6cbf\u7740\u6307\u5b9a\u7684\u8f74\u62c6\u5206\u6570\u7ec4ary\u3002indices_or_sections\u6307\u5b9a\u4e86\u62c6\u5206\u70b9\uff1a \u5982\u679c\u4e3a\u6574\u6570N\uff0c\u5219\u8868\u793a\u5e73\u5747\u62c6\u5206\u6210N\u4efd\u3002\u5982\u679c\u4e0d\u80fd\u5e73\u5747\u62c6\u5206\uff0c\u5219\u62a5\u9519 \u5982\u679c\u4e3a\u5e8f\u5217\uff0c\u5219\u8be5\u5e8f\u5217\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\uff08\u65e0\u9700\u6307\u5b9a\u6700\u5f00\u59cb\u76840\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\u5982 [1,3] \u6307\u5b9a\u4e86\u533a\u95f4\uff1a [0,1],[1,3],[3:] 2. .array_split(ary, indices_or_sections, axis=0) \uff1a\u4f5c\u7528\u4e0e .split() \u7c7b\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff1a\u5f53indices_or_sections\u4e3a\u6574\u6570\uff0c\u4e14\u65e0\u6cd5\u5e73\u5747\u62c6\u5206\u65f6\uff0c\u5e76\u4e0d\u62a5\u9519\uff0c\u800c\u662f\u5c3d\u53ef\u80fd\u7684\u7ef4\u6301\u5e73\u5747\u62c6\u5206\u3002 3. .dsplit(ary, indices_or_sections) \uff1a\u6cbf\u7b2c3\u8f74\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 4. .hsplit(ary, indices_or_sections) \uff1a\u6c34\u5e73\uff08\u6309\u5217\uff09\u5c06\u4e00\u4e2a\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 5. .vsplit(ary, indices_or_sections) \uff1a\u5782\u76f4\uff08\u884c\uff09\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]), array([[25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [array([[ 0], [ 5], [10], ..., [35], [40], [45]]), array([[ 1, 2], [ 6, 7], [11, 12], ..., [36, 37], [41, 42], [46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])] np . array_split ( a , 2 , axis = 1 ) [array([[ 0, 1, 2], [ 5, 6, 7], [10, 11, 12], ..., [35, 36, 37], [40, 41, 42], [45, 46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])]","title":"\u6570\u7ec4\u62c6\u5206"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html","text":"import numpy as np np . set_printoptions ( threshold = 40 ) Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.28 numpy version: 1.18.1 \u901a\u7528\u51fd\u6570\uff08\u5373ufunc\uff09\u662f\u4e00\u79cd\u5bf9ndarray\u4e2d\u7684\u6570\u636e\u6267\u884c\u5143\u7d20\u7ea7\u8fd0\u7b97\u7684\u51fd\u6570\u3002\u53ef\u4ee5\u5c06\u5176\u770b\u505a\u7b80\u5355\u51fd\u6570\uff08\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff09\u7684\u77e2\u91cf\u5316\u5305\u88c5\u5668\u3002 \u4e00\u5143\uff08unary\uff09ufunc\uff1a\u63a5\u53d71\u4e2a\u6570\u7ec4\u7684\u8f93\u5165\u3002 \u4e8c\u5143\uff08binary\uff09ufunc\uff1a\u63a5\u53d72\u4e2a\u6570\u7ec4\u7684\u8f93\u5165\u3002 \u56db\u5219\u8fd0\u7b97 a = np . arange ( 1 , 6 ) b = np . arange ( 5 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a + a a - a a * a # \u5143\u7d20\u76f8\u4e58 a / a b // a # \u53d6\u6574\u9664\u6cd5 b % a # \u53d6\u6a21 # ufunc\u51fd\u6570\u5f62\u5f0f np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) # \u5143\u7d20\u76f8\u4e58 ## \u5728python3 divide\u3001true_divide\u6ca1\u6709\u5dee\u522b np . true_divide ( b , a ) np . divide ( b , a ) ## \u76f8\u5f53\u4e8e\u5148\u8c03\u7528divide\u51fd\u6570 \u518d\u8c03\u7528floor\u51fd\u6570 np . floor_divide ( b , a ) # \u53d6\u6574\u9664\u6cd5 np . mod ( b , a ) # \u5143\u7d20\u7ea7\u6c42\u6a21 array([0, 0, 1, 0, 4], dtype=int32) \u6bd4\u8f83\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a == b a != b a < b a <= b a > b a >= b # ufunc\u51fd\u6570\u5f62\u5f0f np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array([[False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]]) \u903b\u8f91\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u4e0e np . logical_and ( a , b ) # \u6216 np . logical_or ( a , b ) # \u975e np . logical_not ( b ) # \u5f02\u6216 np . logical_xor ( a , b ) # \u4efb\u610f\u4e00\u4e2a\u5143\u7d20 np . any ( a ) # \u5168\u90e8\u5143\u7d20 np . all ( a ) False \u4f4d\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # \u6309\u4f4d\u4e0e np . bitwise_and ( a , b ) # \u6309\u4f4d\u6216 np . bitwise_or ( a , b ) # \u6309\u4f4d\u53d6\u53cd np . bitwise_not ( a ) # \u6309\u4f4d\u5f02\u6216 np . bitwise_xor ( a , b ) array([[10, 10, 14, 14, 10, 10, 22, 22, 26, 26], [30, 30, 26, 26, 22, 22, 10, 10, 14, 14]], dtype=int32) \u81ea\u5b9a\u4e49 ufunc \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7 frompyfunc() \u5c06\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u8f6c\u6362\u6210ufunc\u51fd\u6570\u3002\u8c03\u7528\u683c\u5f0f\u4e3a\u5982\u4e0b\uff1a numpy . frompyfunc ( func , nin , nout ) # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # nin\uff1afunc\u7684\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570 The number of input # nout\uff1afunc\u8fd4\u56de\u503c\u7684\u4e2a\u6570 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array([6, 8, 10, 12, 14], dtype=object) \u4e5f\u53ef\u4ee5\u901a\u8fc7 vectorize() \u51fd\u6570\u6765\u5b9e\u73b0 frompyfunc() \u7684\u529f\u80fd\u3002 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) \u3002 # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # otypes\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7ed3\u679c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\u578b\u5217\u8868\u3002\u5982\u679c\u4f7f\u7528\u7c7b\u578b\u5217\u8868\uff0c\u53ef\u4ee5\u63cf\u8ff0\u591a\u4e2a\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b # doc\uff1a\u51fd\u6570\u7684\u63cf\u8ff0\u5b57\u7b26\u4e32\u3002\u82e5\u672a\u7ed9\u5b9a\uff0c\u5219\u4f7f\u7528func.__doc__ # excluded\uff1a\u6307\u5b9afunc\u4e2d\u54ea\u4e9b\u53c2\u6570\u672a\u88ab\u5411\u91cf\u5316\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u4ee3\u8868\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6574\u6570\u4ee3\u8868\u4f4d\u7f6e\u53c2\u6570\u3002 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"\u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) \u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570 array([1, 2, 3, 4, 5]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num \u4f5c\u4e3a\u4e00\u4e2alist\uff0c\u800c\u4e0d\u662f\u5411\u91cf\u5316\u6210\u4e00\u4e2a\u4e2a\u5143\u7d20 array([11, 13, 15, 17, 19]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) (array([1., 2., 3., 4., 5.]), array([1, 2, 3, 4, 5])) ufunc \u5bf9\u8c61\u7684\u65b9\u6cd5 ufunc\u51fd\u6570\u5bf9\u8c61\u672c\u8eab\u8fd8\u6709\u4e00\u4e9b\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u53ea\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u3001\u4e00\u4e2a\u8f93\u51fa\u7684ufunc\u51fd\u6570\u51fd\u6570\u6709\u6548\u3002\u5bf9\u4e8e\u5176\u4ed6\u7684ufunc\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u4f1a\u629b\u51fa ValueError \u5f02\u5e38\u3002 ufunc.reduce() ufunc.reduce \u65b9\u6cd5\uff1a\u7c7b\u4f3c\u4e8ePython\u7684 reduce \u51fd\u6570\uff0c\u5b83==\u6cbf\u7740== axis \u53c2\u6570\u6307\u5b9a\u7684\u8f74\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u7ecf\u8fc7\u4e00\u6b21reduce\uff0c\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\u964d\u4f4e\u4e00\u7ef4\u3002 \u5047\u8bbe <op> \u662f\u4e00\u4e2aufunc\u51fd\u6570\uff0c ufunc.reduce \u7528\u6cd5\u5982\u4e0b\uff1a < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # \u6cbf\u7740 \u5217\u65b9\u5411 array([ 6, 22, 38, 54, 70]) np . add . reduce ( a , axis = 0 ) # \u6cbf\u7740 \u884c\u65b9\u5411 array([40, 45, 50, 55]) \u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u63d2\u5165\u5230\u6cbf\u7740axis\u8f74\u7684\u6240\u6709\u5143\u7d20\u4e4b\u95f4\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array([9, 25, 41, 57, 73], dtype=object) ufunc.accumulate() ufunc.accumulate \u65b9\u6cd5\uff1a\u5b83\u7c7b\u4f3c\u4e8ereduce()\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd4\u56de\u6570\u7ec4\u7684\u5f62\u72b6\u548c\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38], [12, 25, 39, 54], [16, 33, 51, 70]], dtype=int32) ufunc.outer() ufunc.outer \u65b9\u6cd5\uff1a\u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u5bf9\u8f93\u5165\u6570\u7ec4A\u548c\u8f93\u5165\u6570\u7ec4B\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u5bf9(a,b)\u8d77\u4f5c\u7528\u3002\u8bbeA\u7684shape=(4,5)\uff0cB\u7684shape\u4e3a(4,)\uff0c\u5219\u7ed3\u679c\u6570\u7ec4\u7684shape=(4,5,4) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7684outer\u64cd\u4f5c\u4e3a\u4e8c\u7ef4\u6570\u7ec4 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]) \u591a\u7ef4\u6570\u7ec4\u7684outer\u62c6\u5206\u6210\u5404\u81ea\u7684\u4e00\u7ef4\u64cd\u4f5c a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[[ 2, 3, 4, 5], [ 3, 4, 5, 6], [ 4, 5, 6, 7]], [[ 5, 6, 7, 8], [ 6, 7, 8, 9], [ 7, 8, 9, 10]]]) \u6570\u5b66\u51fd\u6570 \u4e0b\u9762\u662f\u4e00\u5143\u7684\u6570\u5b66\u51fd\u6570\uff1a abs/fabs \uff1a\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u7684\u7edd\u5bf9\u503c\u3002\u5bf9\u4e8e\u975e\u590d\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684fabs sqrt \uff1a\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u76f8\u5f53\u4e8e$a^{0.5}$ square \uff1a\u8ba1\u7b97\u5e73\u65b9\uff0c\u76f8\u5f53\u4e8e$a^2$ exp \uff1a\u8ba1\u7b97\u6307\u6570$e^x$ log/log10/log2/log1p \uff1a\u5206\u522b\u4e3a$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign \uff1a\u8ba1\u7b97$sign(a)$ ceil \uff1a\u8ba1\u7b97\u5404\u5143\u7d20\u7684ceiling\u503c\uff1a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u6574\u6570 floor \uff1a\u8ba1\u7b97\u4e2a\u5143\u7d20\u7684floor\u503c\uff1a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5927\u6574\u6570 rint \uff1a\u5c06\u5404\u5143\u7d20\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4fdd\u7559 dtype modf \uff1a\u5c06\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\u4ee5\u4e24\u4e2a\u72ec\u7acb\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de cos/cosh/sin/sinh/tan/tanh \uff1a\u666e\u901a\u548c\u53cc\u66f2\u578b\u4e09\u89d2\u51fd\u6570 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :\u53cd\u4e09\u89d2\u51fd\u6570 isnan \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u90a3\u4e9b\u662f NaN isfinite/isinf \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u662f\u6709\u9650\u7684/\u65e0\u9650\u6570 \u7edf\u8ba1\u51fd\u6570 \u65b9\u6cd5 \u8bf4\u660e sum \u5bf9\u6570\u7ec4\u4e2d\u5168\u90e8\u6216\u67d0\u8f74\u5411\u7684\u5143\u7d20\u6c42\u548c\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684sum\u4e3a0 mean \u7b97\u672f\u5e73\u5747\u6570\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684mean\u4e3a NaN std \u3001 var \u5206\u522b\u4e3a\u6807\u51c6\u5dee\u548c\u65b9\u5dee\uff0c\u81ea\u7531\u5ea6\u53ef\u8c03\uff08\u9ed8\u8ba4\u4e3an\uff09 min \u3001 max \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c argmin \u3001 argmax \u5206\u522b\u4e3a\u6700\u5927\u548c\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15 cumsum \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u548c cumprod \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u79ef \u4ee5\u4e0a\u51fd\u6570\u6709\u4e00\u4e9b\u5171\u540c\u7684\u53c2\u6570\uff1a (a, axis=None, dtype=None, out=None) axis \uff1a None \u3001\u6574\u6570\u3001\u6574\u6570\u5143\u7ec4\u3002\u6309\u987a\u5e8f\u5bf9 axis \u6307\u5b9a\u7684\u8f74\u8fdb\u884c\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u6240\u6709\u7684\u8f74\uff0c\u6700\u540e\u5219\u8f93\u51fa\u4e00\u4e2a\u6807\u91cf\u3002 out \uff1andarray\u3002\u5c06\u7ed3\u679c\u8f93\u51fa\u5230\u8be5\u6570\u7ec4\u3002\u5b83\u5fc5\u987b\u6709\u4e0e\u9884\u671f\u8f93\u51fa\u5f62\u72b6\u76f8\u540c\uff0c\u4f46\u8f93\u51fa\u7c7b\u578b\u5fc5\u8981\u65f6\u5c06\u5f3a\u5236\u8f6c\u6362\u503c\u3002 \u96c6\u5408\u8fd0\u7b97 \u65b9\u6cd5 \u8bf4\u660e unique(x) \u8ba1\u7b97x\u4e2d\u7684\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c intersect1d(x, y) \u8ba1\u7b97X\u548cy\u4e2d\u7684\u516c\u5171\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c union1d(x, y) \u8ba1\u7b97X\u548cy\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c in1d(x,y) \u5f97\u5230\u4e00\u4e2a\u8868\u793a\u201cX\u7684\u5143\u7d20\u662f\u5426\u5305\u542b\u4e8ey\u201d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 setdiff1d(x, y) \u96c6\u5408\u7684\u5dee\uff0c\u5373\u5143\u7d20\u5728x\u4e2d\u4e14\u4e0d\u5728y\u4e2d setxor1d(x, y) \u96c6\u5408\u7684\u5bf9\u79f0\u5dee\uff0c\u5373\u5b58\u5728\u4e8e\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4f46\u4e0d\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 a = np . arange ( 0 , 5 ) b = np . arange ( 3 , 8 ) print ( np . unique ( a )) print ( np . intersect1d ( a , b )) print ( np . union1d ( a , b )) print ( np . in1d ( a , b )) print ( np . setdiff1d ( a , b )) print ( np . setxor1d ( a , b )) [0 1 2 3 4] [3 4] [0 1 2 3 4 5 6 7] [False False False True True] [0 1 2] [0 1 2 5 6 7]","title":"8.9.ufunc\u51fd\u6570"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_1","text":"a = np . arange ( 1 , 6 ) b = np . arange ( 5 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a + a a - a a * a # \u5143\u7d20\u76f8\u4e58 a / a b // a # \u53d6\u6574\u9664\u6cd5 b % a # \u53d6\u6a21 # ufunc\u51fd\u6570\u5f62\u5f0f np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) # \u5143\u7d20\u76f8\u4e58 ## \u5728python3 divide\u3001true_divide\u6ca1\u6709\u5dee\u522b np . true_divide ( b , a ) np . divide ( b , a ) ## \u76f8\u5f53\u4e8e\u5148\u8c03\u7528divide\u51fd\u6570 \u518d\u8c03\u7528floor\u51fd\u6570 np . floor_divide ( b , a ) # \u53d6\u6574\u9664\u6cd5 np . mod ( b , a ) # \u5143\u7d20\u7ea7\u6c42\u6a21 array([0, 0, 1, 0, 4], dtype=int32)","title":"\u56db\u5219\u8fd0\u7b97"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_2","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a == b a != b a < b a <= b a > b a >= b # ufunc\u51fd\u6570\u5f62\u5f0f np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array([[False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]])","title":"\u6bd4\u8f83\u8fd0\u7b97"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_3","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u4e0e np . logical_and ( a , b ) # \u6216 np . logical_or ( a , b ) # \u975e np . logical_not ( b ) # \u5f02\u6216 np . logical_xor ( a , b ) # \u4efb\u610f\u4e00\u4e2a\u5143\u7d20 np . any ( a ) # \u5168\u90e8\u5143\u7d20 np . all ( a ) False","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_4","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # \u6309\u4f4d\u4e0e np . bitwise_and ( a , b ) # \u6309\u4f4d\u6216 np . bitwise_or ( a , b ) # \u6309\u4f4d\u53d6\u53cd np . bitwise_not ( a ) # \u6309\u4f4d\u5f02\u6216 np . bitwise_xor ( a , b ) array([[10, 10, 14, 14, 10, 10, 22, 22, 26, 26], [30, 30, 26, 26, 22, 22, 10, 10, 14, 14]], dtype=int32)","title":"\u4f4d\u8fd0\u7b97"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#ufunc","text":"\u53ef\u4ee5\u901a\u8fc7 frompyfunc() \u5c06\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u8f6c\u6362\u6210ufunc\u51fd\u6570\u3002\u8c03\u7528\u683c\u5f0f\u4e3a\u5982\u4e0b\uff1a numpy . frompyfunc ( func , nin , nout ) # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # nin\uff1afunc\u7684\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570 The number of input # nout\uff1afunc\u8fd4\u56de\u503c\u7684\u4e2a\u6570 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array([6, 8, 10, 12, 14], dtype=object) \u4e5f\u53ef\u4ee5\u901a\u8fc7 vectorize() \u51fd\u6570\u6765\u5b9e\u73b0 frompyfunc() \u7684\u529f\u80fd\u3002 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) \u3002 # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # otypes\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7ed3\u679c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\u578b\u5217\u8868\u3002\u5982\u679c\u4f7f\u7528\u7c7b\u578b\u5217\u8868\uff0c\u53ef\u4ee5\u63cf\u8ff0\u591a\u4e2a\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b # doc\uff1a\u51fd\u6570\u7684\u63cf\u8ff0\u5b57\u7b26\u4e32\u3002\u82e5\u672a\u7ed9\u5b9a\uff0c\u5219\u4f7f\u7528func.__doc__ # excluded\uff1a\u6307\u5b9afunc\u4e2d\u54ea\u4e9b\u53c2\u6570\u672a\u88ab\u5411\u91cf\u5316\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u4ee3\u8868\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6574\u6570\u4ee3\u8868\u4f4d\u7f6e\u53c2\u6570\u3002 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"\u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) \u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570 array([1, 2, 3, 4, 5]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num \u4f5c\u4e3a\u4e00\u4e2alist\uff0c\u800c\u4e0d\u662f\u5411\u91cf\u5316\u6210\u4e00\u4e2a\u4e2a\u5143\u7d20 array([11, 13, 15, 17, 19]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) (array([1., 2., 3., 4., 5.]), array([1, 2, 3, 4, 5]))","title":"\u81ea\u5b9a\u4e49 ufunc \u51fd\u6570"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#ufunc_1","text":"ufunc\u51fd\u6570\u5bf9\u8c61\u672c\u8eab\u8fd8\u6709\u4e00\u4e9b\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u53ea\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u3001\u4e00\u4e2a\u8f93\u51fa\u7684ufunc\u51fd\u6570\u51fd\u6570\u6709\u6548\u3002\u5bf9\u4e8e\u5176\u4ed6\u7684ufunc\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u4f1a\u629b\u51fa ValueError \u5f02\u5e38\u3002","title":"ufunc \u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#ufuncreduce","text":"ufunc.reduce \u65b9\u6cd5\uff1a\u7c7b\u4f3c\u4e8ePython\u7684 reduce \u51fd\u6570\uff0c\u5b83==\u6cbf\u7740== axis \u53c2\u6570\u6307\u5b9a\u7684\u8f74\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u7ecf\u8fc7\u4e00\u6b21reduce\uff0c\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\u964d\u4f4e\u4e00\u7ef4\u3002 \u5047\u8bbe <op> \u662f\u4e00\u4e2aufunc\u51fd\u6570\uff0c ufunc.reduce \u7528\u6cd5\u5982\u4e0b\uff1a < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # \u6cbf\u7740 \u5217\u65b9\u5411 array([ 6, 22, 38, 54, 70]) np . add . reduce ( a , axis = 0 ) # \u6cbf\u7740 \u884c\u65b9\u5411 array([40, 45, 50, 55]) \u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u63d2\u5165\u5230\u6cbf\u7740axis\u8f74\u7684\u6240\u6709\u5143\u7d20\u4e4b\u95f4\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array([9, 25, 41, 57, 73], dtype=object)","title":"ufunc.reduce()"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#ufuncaccumulate","text":"ufunc.accumulate \u65b9\u6cd5\uff1a\u5b83\u7c7b\u4f3c\u4e8ereduce()\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd4\u56de\u6570\u7ec4\u7684\u5f62\u72b6\u548c\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38], [12, 25, 39, 54], [16, 33, 51, 70]], dtype=int32)","title":"ufunc.accumulate()"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#ufuncouter","text":"ufunc.outer \u65b9\u6cd5\uff1a\u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u5bf9\u8f93\u5165\u6570\u7ec4A\u548c\u8f93\u5165\u6570\u7ec4B\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u5bf9(a,b)\u8d77\u4f5c\u7528\u3002\u8bbeA\u7684shape=(4,5)\uff0cB\u7684shape\u4e3a(4,)\uff0c\u5219\u7ed3\u679c\u6570\u7ec4\u7684shape=(4,5,4) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7684outer\u64cd\u4f5c\u4e3a\u4e8c\u7ef4\u6570\u7ec4 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]) \u591a\u7ef4\u6570\u7ec4\u7684outer\u62c6\u5206\u6210\u5404\u81ea\u7684\u4e00\u7ef4\u64cd\u4f5c a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[[ 2, 3, 4, 5], [ 3, 4, 5, 6], [ 4, 5, 6, 7]], [[ 5, 6, 7, 8], [ 6, 7, 8, 9], [ 7, 8, 9, 10]]])","title":"ufunc.outer()"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_5","text":"\u4e0b\u9762\u662f\u4e00\u5143\u7684\u6570\u5b66\u51fd\u6570\uff1a abs/fabs \uff1a\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u7684\u7edd\u5bf9\u503c\u3002\u5bf9\u4e8e\u975e\u590d\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684fabs sqrt \uff1a\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u76f8\u5f53\u4e8e$a^{0.5}$ square \uff1a\u8ba1\u7b97\u5e73\u65b9\uff0c\u76f8\u5f53\u4e8e$a^2$ exp \uff1a\u8ba1\u7b97\u6307\u6570$e^x$ log/log10/log2/log1p \uff1a\u5206\u522b\u4e3a$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign \uff1a\u8ba1\u7b97$sign(a)$ ceil \uff1a\u8ba1\u7b97\u5404\u5143\u7d20\u7684ceiling\u503c\uff1a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u6574\u6570 floor \uff1a\u8ba1\u7b97\u4e2a\u5143\u7d20\u7684floor\u503c\uff1a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5927\u6574\u6570 rint \uff1a\u5c06\u5404\u5143\u7d20\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4fdd\u7559 dtype modf \uff1a\u5c06\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\u4ee5\u4e24\u4e2a\u72ec\u7acb\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de cos/cosh/sin/sinh/tan/tanh \uff1a\u666e\u901a\u548c\u53cc\u66f2\u578b\u4e09\u89d2\u51fd\u6570 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :\u53cd\u4e09\u89d2\u51fd\u6570 isnan \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u90a3\u4e9b\u662f NaN isfinite/isinf \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u662f\u6709\u9650\u7684/\u65e0\u9650\u6570","title":"\u6570\u5b66\u51fd\u6570"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_6","text":"\u65b9\u6cd5 \u8bf4\u660e sum \u5bf9\u6570\u7ec4\u4e2d\u5168\u90e8\u6216\u67d0\u8f74\u5411\u7684\u5143\u7d20\u6c42\u548c\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684sum\u4e3a0 mean \u7b97\u672f\u5e73\u5747\u6570\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684mean\u4e3a NaN std \u3001 var \u5206\u522b\u4e3a\u6807\u51c6\u5dee\u548c\u65b9\u5dee\uff0c\u81ea\u7531\u5ea6\u53ef\u8c03\uff08\u9ed8\u8ba4\u4e3an\uff09 min \u3001 max \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c argmin \u3001 argmax \u5206\u522b\u4e3a\u6700\u5927\u548c\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15 cumsum \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u548c cumprod \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u79ef \u4ee5\u4e0a\u51fd\u6570\u6709\u4e00\u4e9b\u5171\u540c\u7684\u53c2\u6570\uff1a (a, axis=None, dtype=None, out=None) axis \uff1a None \u3001\u6574\u6570\u3001\u6574\u6570\u5143\u7ec4\u3002\u6309\u987a\u5e8f\u5bf9 axis \u6307\u5b9a\u7684\u8f74\u8fdb\u884c\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u6240\u6709\u7684\u8f74\uff0c\u6700\u540e\u5219\u8f93\u51fa\u4e00\u4e2a\u6807\u91cf\u3002 out \uff1andarray\u3002\u5c06\u7ed3\u679c\u8f93\u51fa\u5230\u8be5\u6570\u7ec4\u3002\u5b83\u5fc5\u987b\u6709\u4e0e\u9884\u671f\u8f93\u51fa\u5f62\u72b6\u76f8\u540c\uff0c\u4f46\u8f93\u51fa\u7c7b\u578b\u5fc5\u8981\u65f6\u5c06\u5f3a\u5236\u8f6c\u6362\u503c\u3002","title":"\u7edf\u8ba1\u51fd\u6570"},{"location":"NumPy/8.9.ufunc%E5%87%BD%E6%95%B0.html#_7","text":"\u65b9\u6cd5 \u8bf4\u660e unique(x) \u8ba1\u7b97x\u4e2d\u7684\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c intersect1d(x, y) \u8ba1\u7b97X\u548cy\u4e2d\u7684\u516c\u5171\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c union1d(x, y) \u8ba1\u7b97X\u548cy\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c in1d(x,y) \u5f97\u5230\u4e00\u4e2a\u8868\u793a\u201cX\u7684\u5143\u7d20\u662f\u5426\u5305\u542b\u4e8ey\u201d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 setdiff1d(x, y) \u96c6\u5408\u7684\u5dee\uff0c\u5373\u5143\u7d20\u5728x\u4e2d\u4e14\u4e0d\u5728y\u4e2d setxor1d(x, y) \u96c6\u5408\u7684\u5bf9\u79f0\u5dee\uff0c\u5373\u5b58\u5728\u4e8e\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4f46\u4e0d\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 a = np . arange ( 0 , 5 ) b = np . arange ( 3 , 8 ) print ( np . unique ( a )) print ( np . intersect1d ( a , b )) print ( np . union1d ( a , b )) print ( np . in1d ( a , b )) print ( np . setdiff1d ( a , b )) print ( np . setxor1d ( a , b )) [0 1 2 3 4] [3 4] [0 1 2 3 4 5 6 7] [False False False True True] [0 1 2] [0 1 2 5 6 7]","title":"\u96c6\u5408\u8fd0\u7b97"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html","text":"Windows 10 Python 3.8.5 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.22 Python\u7b80\u53f2 1982\u5e74\uff0cGuido \u4ece\u963f\u59c6\u65af\u7279\u4e39\u5927\u5b66 (University of Amsterdam) \u83b7\u5f97\u4e86\u6570\u5b66\u548c\u8ba1\u7b97\u673a\u7855\u58eb\u5b66\u4f4d\u3002\u90a3\u65f6\uff0c\u4ed6\u5c31\u5df2\u7ecf\u63a5\u89e6\u5e76\u4f7f\u7528\u8fc7 Fortran\u3001Pascal\u3001C \u7b49\u9ad8\u7ea7\u8bed\u8a00\uff0c\u4f46 Guido \u8fd8\u6ca1\u627e\u5230\u4e00\u95e8\u6613\u7528\u6027\u5f3a\u3001\u751f\u4ea7\u6548\u7387\u9ad8\u7684\u8bed\u8a00\u3002\u4e2a\u4eba\u8ba1\u7b97\u673a\u5728\u90a3\u65f6\u624d\u521a\u5f00\u59cb\u53d1\u5c55\uff0c\u76f8\u8f83\u4e8e\u73b0\u5728\uff0c\u5f53\u65f6\u4e2a\u4eba\u8ba1\u7b97\u673a\u7684\u914d\u7f6e\u8fd8\u5f88\u4f4e\u3002\u4e8e1981\u5e74\u95ee\u4e16\u7684\u7b2c\u4e00\u53f0\u4e2a\u4eba\u8ba1\u7b97\u673a IBM5150 \u5c31\u53ea\u5177\u6709 4.77MHz \u4e3b\u9891\u7684 CPU \u548c 16KB \u7684 RAM\u3002\u800c\u5f53\u65f6\u61c2\u5f97\u7f16\u7a0b\u7684\u4eba\u5f80\u5f80\u90fd\u7cbe\u901a\u8ba1\u7b97\u673a\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e00\u822c\u66f4\u5173\u5fc3\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u800c\u4e0d\u662f\u7f16\u7a0b\u7684\u6548\u7387\u548c\u8bed\u8a00\u7684\u6613\u7528\u6027\u3002\u4e3a\u4e86\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u8bed\u8a00\u4e0d\u5f97\u4e0d\u903c\u8feb\u7a0b\u5e8f\u5458\u50cf\u8ba1\u7b97\u673a\u4e00\u6837\u601d\u8003\uff0c\u8fd9\u8ba9 Guido \u611f\u5230\u82e6\u607c\uff0c\u5373\u4f7f\u4ed6\u5df2\u7ecf\u51c6\u786e\u77e5\u9053\u5982\u4f55\u7528 C \u8bed\u8a00\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\uff0c\u4f46\u4ed6\u4ecd\u7136\u4e0d\u5f97\u4e0d\u82b1\u5927\u91cf\u65f6\u95f4\u53bb\u7f16\u5199\u4ee3\u7801\u3002 \u5f53\u65f6\u4e00\u4e2a\u53ef\u7528\u7684\u9009\u62e9\u662f shell\uff0cBourne shell \u4f5c\u4e3a Unix \u7cfb\u7edf\u7684\u547d\u4ee4\u89e3\u91ca\u5668\u5728 1978 \u5e74\u5c31\u5df2\u7ecf\u53d1\u5e03\u3002shell \u53ef\u4ee5\u50cf\u80f6\u6c34\u4e00\u6837\uff0c\u5c06 Unix \u7684\u8bb8\u591a\u529f\u80fd\u8fde\u63a5\u5728\u4e00\u8d77\u3002\u8bb8\u591a\u9700\u8981 C \u8bed\u8a00\u5199\u4e0a\u767e\u884c\u4ee3\u7801\u624d\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u5728 shell \u4e2d\u8f93\u5165\u51e0\u884c\u547d\u4ee4\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002\u4f46 shell \u672c\u8d28\u4e0a\u662f\u8c03\u7528\u5176\u4ed6\u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\uff0c\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u56e0\u6b64\uff0cshell \u5e76\u4e0d\u80fd\u5168\u9762\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a5\u53e3\u3002 Guido \u5e0c\u671b\u6709\u4e00\u79cd\u8bed\u8a00\uff0c\u8fd9\u79cd\u8bed\u8a00\u80fd\u591f\u50cf C \u8bed\u8a00\u90a3\u6837\uff0c\u80fd\u591f\u5168\u9762\u8c03\u7528\u8ba1\u7b97\u673a\u7684\u8d44\u6e90\uff0c\u53c8\u53ef\u4ee5\u50cf shell \u4e00\u6837\u8f7b\u677e\u5730\u7f16\u7a0b\u3002\u5f53\u65f6\u7684 ABC \u8bed\u8a00\u8ba9 Guido \u770b\u5230\u5e0c\u671b\u3002ABC \u7531\u8377\u5170\u7684 CWI (Centrum Wiskunde & Informatica, \u6570\u5b66\u548c\u8ba1\u7b97\u673a\u7814\u7a76\u6240) \u5f00\u53d1\uff0c\u4e8e 1987 \u5e74\u53d1\u5e03\u7b2c\u4e00\u4e2a\u7248\u672c\u300280\u5e74\u4ee3\u4e2d\u671f\uff0cGuido \u66fe\u5728 CWI \u5de5\u4f5c\uff0c\u5e76\u53c2\u4e0e\u4e86 ABC \u8bed\u8a00\u7684\u5f00\u53d1\u3002 \u4e0e\u5f53\u65f6\u7684\u5927\u90e8\u5206\u8bed\u8a00\u4e0d\u540c\uff0cABC\u662f\u4ea4\u4e92\u5f0f\u7684\uff0c\u5176\u91cd\u70b9\u662f\u8bed\u8a00\u7684\u53cb\u597d\u6027\u3002\u5b83\u7684\u4e00\u4e9b\u4e3b\u8981\u8bbe\u8ba1\u8ba9\u8bed\u8a00\u53d8\u5f97\u5bb9\u6613\u9605\u8bfb\u3001\u5bb9\u6613\u4f7f\u7528\uff1a \u8bed\u53e5\u6309\u7f29\u8fdb\u5206\u7ec4\u3002 \u53ea\u6709\u4e94\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002 \u5f3a\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\u3002 \u62e5\u6709\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\uff08\u4f7f\u7528 >>> \u63d0\u793a\uff09\u3002 \u8bed\u6cd5\u793a\u4f8b\uff1a >>> WRITE 2**1000 1071.... >>> PUT 1/(2*1000) in x >>> WRITE 1 + 1/x \u7136\u800c ABC \u4e3b\u8981\u76ee\u7684\u662f\u7528\u4e8e\u6559\u5b66\u6216\u8bed\u8a00\u7814\u7a76\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u3002\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0cABC \u8fc7\u4e8e\u4e25\u683c\u3001\u7eaf\u51c0\uff0c\u5b58\u5728\u4e00\u4e9b\u4e25\u91cd\u7684\u8bbe\u8ba1\u7f3a\u9677\uff1a \u53ea\u80fd\u901a\u8fc7 STDIN/STDOUT \u8f93\u51fa\u6587\u672c\uff0c\u6ca1\u6709\u4e0e\u5916\u754c\u7684\u63a5\u53e3\uff0c\u5373\u6ca1\u6709\u6587\u4ef6 I/O\uff0c\u8fd9\u662f\u81f4\u547d\u7684\u3002 \u4e0d\u80fd\u4e0e\u5916\u90e8\u8bbe\u5907\u4ea4\u4e92\u3002 \u53ef\u62d3\u5c55\u6027\u5dee\u3002ABC\u4e0d\u662f\u6a21\u5757\u5316\u7684\u8bed\u8a00\uff0c\u5982\u679c\u60f3\u5728ABC\u4e2d\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u5219\u9700\u8981\u6539\u52a8\u5f88\u591a\u5730\u65b9\u3002 \u53ea\u5177\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u51fd\u6570\u6216\u6a21\u5757\u53ef\u4ee5\u5177\u6709\u5355\u72ec\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u8fc7\u5ea6\u521b\u65b0\u3002ABC \u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u8868\u8fbe\u7a0b\u5e8f\u7684\u542b\u4e49\uff0c\u4f8b\u5982\u4f7f\u7528 HOW TO \u5b9a\u4e49\u51fd\u6570\uff0c\u4f7f\u7528 PUT \u4e3a\u53d8\u91cf\u8d4b\u503c\u3002\u4f46\u56e0\u4e3a Fortran \u548c C \u8bed\u8a00\u7684\u6d41\u884c\uff0c\u5927\u5bb6\u66f4\u4e60\u60ef\u4e8e\u4f7f\u7528 function \u6216 define \u5b9a\u4e49\u51fd\u6570\uff0c\u4f7f\u7528\u7b49\u53f7\u8d4b\u503c\u3002\u5c3d\u7ba1\u8fd9\u8ba9ABC\u53d8\u5f97\u7279\u522b\uff0c\u4f46\u5b9e\u9645\u4e0a\u589e\u52a0\u4e86\u7a0b\u5e8f\u5458\u7684\u5b66\u4e60\u96be\u5ea6\u3002 \u867d\u7136 ABC \u5e76\u4e0d\u662f\u4e00\u95e8\u6210\u529f\u7684\u8bed\u8a00\uff0c\u4f46\u8fd9\u7ed9\u4e86 Guido \u8bbe\u8ba1 Python \u7684\u7075\u611f\u30021989 \u5e74\u5de6\u53f3\uff0cGuido \u53c2\u52a0\u4e86 CWI \u4e00\u9879\u5f00\u53d1\u65b0\u64cd\u4f5c\u7cfb\u7edf\u7684\u5de5\u4f5c\u3002Guido \u4ed6\u4eec\u9700\u8981\u4e3a\u7528\u6237\u5199\u5f88\u591a\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u4e00\u822c\u53ea\u662f\u5076\u5c14\u8fd0\u884c\u4e00\u5c0f\u6bb5\u65f6\u95f4\uff0c\u4f46\u53ef\u80fd\u4f7f\u7528\u590d\u6742\u7684\u903b\u8f91\uff0c\u7528 C \u8bed\u8a00\u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u6548\u7387\u6781\u4f4e\u3002\u8fd9\u8ba9 Guido \u60f3\u4f7f\u7528 ABC \u4e4b\u7c7b\u7684\u8bed\u8a00\u3002ABC \u7684\u751f\u4ea7\u529b\u8981\u6bd4 C \u9ad8\u5f97\u591a\uff0c\u4f46\u4ee3\u4ef7\u662f\u8fd0\u884c\u65f6\u7684\u6027\u80fd\u635f\u5931\u3002\u867d\u7136\uff0cABC \u8bed\u8a00\u9762\u4e16\u65f6\uff0c\u4e2a\u4eba\u8ba1\u7b97\u673a\u7684\u6027\u80fd\u8fd8\u5f88\u4f4e\uff0c\u4f46\u8ba1\u7b97\u673a\u884c\u4e1a\u4ee5\u60ca\u4eba\u7684\u901f\u5ea6\u53d1\u5c55\u300290 \u5e74\u4ee3\u521d\uff0c\u4e2a\u4eba\u8ba1\u7b97\u673a\u5f00\u59cb\u8d70\u8fdb\u666e\u901a\u5bb6\u5ead\uff0c\u4e2a\u4eba\u8ba1\u7b97\u673a\u7684\u6027\u80fd\u8d8a\u6765\u8d8a\u9ad8\u3002\u56e0\u6b64\uff0cGuido \u8ba4\u4e3a\u4ee5\u6027\u80fd\u6362\u6548\u7387\u5df2\u7ecf\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u6298\u8877\u65b9\u6848\u3002Guido \u8ba4\u4e3a\u4ed6\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u79cd\u7c7b\u4f3c ABC\uff0c\u4f46\u4e0e\u4e4b\u53c8\u4e0d\u4e00\u6837\u7684\u8bed\u8a00\uff0c\u8fd9\u79cd\u8bed\u8a00\u53ef\u4ee5\u4fdd\u7559 ABC \u9ad8\u6548\u7684\u751f\u4ea7\u529b\uff0c\u5e76\u4e14\u514b\u670d ABC \u7684\u7f3a\u9677\u3002 \u4e8e\u662f\uff0c\u5728 1989 \u5e74\u7684\u5723\u8bde\u8282\u524d\u540e\uff0cGuido \u5f00\u59cb\u4f7f\u7528 C \u8bed\u8a00\u5f00\u53d1 Python \u8bed\u8a00\u7684\u7f16\u8bd1\u5668/\u89e3\u91ca\u5668\uff0c\u5e76\u5728 1991 \u5e74\u521d\u53d1\u5e03\u4e86\u7b2c\u4e00\u4e2a\u5f00\u6e90\u7248\u672c\u3002Python \u7684\u540d\u5b57\u6765\u6e90\u4e8e Guido \u6240\u631a\u7231\u7684\u7535\u89c6\u5267 Monty Python's Flying Circus\uff0cPython \u7684\u6587\u732e\u8d44\u6599\u4e2d\u4e5f\u7ecf\u5e38\u5f15\u7528\u8be5\u7535\u89c6\u5267\u7684\u53f0\u8bcd\u3002\u800c Python \u4e0e\u5de8\u87d2\u7684\u5173\u8054\u5219\u662f\u51fa\u7248\u5546\u5f3a\u52a0\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u60f3\u4e3a\u4e66\u7c4d\u5c01\u9762\u8d2d\u4e70 Monty-Python \u63d2\u753b\u7684\u8bb8\u53ef\u3002 Python \u53d7\u5230 ABC \u7684\u5f3a\u70c8\u5f71\u54cd\uff0c\u4e0e ABC \u5177\u6709\u4e00\u4e9b\u76f8\u4f3c\u4e4b\u5904\uff1a \u4f7f\u7528\u5192\u53f7 : \u4f5c\u4e3a\u4ee3\u7801\u5757\u7684\u8d77\u70b9 \u4f7f\u7528\u7f29\u8fdb\u5212\u5206\u4ee3\u7801\u5757 \u65e0\u9700\u58f0\u660e\u53d8\u91cf\u7c7b\u578b \u652f\u6301\u4ea4\u4e92\u5f0f\u7f16\u7a0b\uff0c\u4e5f\u4f7f\u7528 >>> \u4f5c\u4e3a\u63d0\u793a\u7b26 \u63d0\u4f9b\u53ef\u4ee5\u7ec4\u5408\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff08list\u3001dictionary\uff09 \u81ea\u52a8\u5783\u573e\u6536\u96c6\uff08GC\uff09 \u91cd\u89c6\u53ef\u8bfb\u6027\uff0c\u4f7f\u7528\u7b80\u6d01\u7684\u8bed\u6cd5 \u7531 C \u8bed\u8a00\u5b9e\u73b0\u5b57\u8282\u7801\u7684\u7f16\u8bd1\uff0c\u5b57\u8282\u7801\u7531\u66f4\u9ad8\u7ea7\u7684VM\u8fdb\u884c\u89e3\u91ca\u3002 \u53e6\u4e00\u65b9\u9762\uff0cPython\u629b\u5f03\u4e86 ABC \u7684\u539f\u6559\u65e8\u4e3b\u4e49\uff1a \u4f7f\u7528\u7c7b\u4f3c C \u8bed\u8a00\u7684\u672f\u8bed\u548c\u7b26\u53f7\u3002\u4f8b\u5982\u4f7f\u7528 = \u8868\u793a\u8d4b\u503c\uff0c\u4f7f\u7528 def \u5b9a\u4e49\u51fd\u6570\u3002Guido \u8ba4\u4e3a\u5982\u679c\u4e00\u4e9b\u4e1c\u897f\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u5e38\u8bc6\uff0c\u5219\u6ca1\u6709\u5fc5\u8981\u8fc7\u5ea6\u7ea0\u6b63 1 \u3002 \u4ee5\u6a21\u5757\u4e3a\u57fa\u7840\u7684\u62d3\u5c55\u673a\u5236\u3002Guido \u8ba4\u4e3a ABC \u8bed\u8a00\u6ca1\u6709\u6210\u529f\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u56e0\u662f\u7f3a\u4e4f\u6269\u5c55\u6027\uff0c\u56e0\u6b64 Python \u4ece\u4e00\u5f00\u59cb\u5c31\u7279\u522b\u5728\u610f\u53ef\u62d3\u5c55\u6027\u3002Python \u53ef\u4ee5\u5728\u591a\u4e2a\u5c42\u6b21\u4e0a\u62d3\u5c55\u3002\u5728\u9ad8\u5c42\uff0c\u53ef\u4ee5\u5bfc\u5165 .py \u6587\u4ef6\uff08\u5373 import \u6a21\u5757\uff0c\u8fd9\u4e2a\u7075\u611f\u6765\u81ea Modula-3 \u8bed\u8a00\uff09\u3002\u5728\u5e95\u5c42\uff0c\u53ef\u4ee5\u5bfc\u5165C\u8bed\u8a00\u7684\u5e93\u3002\u56e0\u6b64\uff0c\u5f53\u9700\u8981\u6ce8\u91cd\u6027\u80fd\u65f6\uff0cPython \u7a0b\u5e8f\u5458\u53ef\u4ee5\u7f16\u5199 C \u7a0b\u5e8f\uff0c\u5e76\u7f16\u8bd1\u4e3a .so \u6587\u4ef6\uff0c\u5c06\u5176\u5bfc\u5165 Python \u4e2d\u4f7f\u7528\u3002 \u4f7f\u7528\u7c7b\u4f3c Modula-3 \u8bed\u8a00\u7684\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u53ea\u662f\u6dfb\u52a0\u4e86 else \u5b50\u53e5\u3002 \u652f\u6301 OO\uff08Smalltalk\uff09 \u652f\u6301\u6587\u4ef6 I/O Python \u6210\u529f\u5730\u4ece\u5176\u4ed6\u8bed\u8a00\u4e2d\u501f\u9274\u4e86\u5f88\u591a\u4e1c\u897f\uff0c\u9664\u4e86\u4ee5\u5df2\u5217\u51fa\u7684 ABC\u3001C\u7b49\uff0c\u8fd8\u5305\u62ec\u4e86\u8bb8\u591a\u672a\u5217\u51fa\u7684\u8bed\u8a00\u3002\u6b63\u5982 Tim Peters \u5728Python \u6240\u8bf4\uff1a \u201c\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u5b83\u662f\u4e00\u79cd\u67af\u71e5\u7684\u8bed\u8a00\uff0c\u5b83\u4ece\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u548c\u6837\u5f0f\u4e2d\u501f\u9274\u4e86\u56fa\u6709\u7684\u6982\u5ff5\uff1a \u65e0\u804a\u7684\u8bed\u6cd5\uff0c\u6beb\u4e0d\u5947\u602a\u7684\u8bed\u4e49\uff0c\u5f88\u5c11\u7684\u9690\u5f0f\u8f6c\u6362\u7b49\uff0c\u4f46\u8fd9\u5c31\u662f\u6211\u559c\u6b22\u5b83\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u201d \u53ef\u4ee5\u8bf4 Python \u7684\u6210\u529f\u4ee3\u8868\u4e86\u5b83\u501f\u7528\u7684\u6240\u6709\u8bed\u8a00\u7684\u6210\u529f\u3002\u540c\u6837\uff0cRuby \u501f\u9274\u4e86 Python\uff0c\u5b83\u7684\u6210\u529f\u4e5f\u4ee3\u8868\u4e86 Python \u67d0\u4e9b\u65b9\u9762\u7684\u6210\u529f\u3002\u6bcf\u79cd\u8bed\u8a00\u90fd\u662f\u6df7\u5408\u8bed\u8a00\uff0c\u5b83\u4eec\u5177\u6709\u4e00\u4e9b\u4f18\u8d8a\u7684\u65b9\u9762\uff0c\u4f46\u662f\u4e5f\u5b58\u5728\u5404\u79cd\u7f3a\u9677\u3002\u5bf9\u8bed\u8a00 \u201c\u597d\u4e0e\u574f\u201d \u7684\u5224\u65ad\u901a\u5e38\u53d7\u5e73\u53f0\u3001\u786c\u4ef6\u548c\u65f6\u95f4\u7b49\u5916\u90e8\u56e0\u7d20\u7684\u5f71\u54cd\u3002\u7a0b\u5e8f\u5458\u9047\u5230\u4e86\u8bb8\u591a\u5173\u4e8e\u8bed\u8a00\u7684\u4e89\u8bae\uff0c\u4f46\u5b9e\u9645\u4e0a\u5f88\u591a\u4e89\u8bba\u90fd\u5728\u6d6a\u8d39\u65f6\u95f4\uff0c\u4f7f\u7528\u5f00\u653e\u7684\u601d\u60f3\u548c\u5ba2\u89c2\u7684\u5206\u6790\u6765\u533a\u5206\u6bcf\u79cd\u8bed\u8a00\u7684\u7279\u5b9a\u4f18\u7f3a\u70b9\uff0c\u4ee5\u533a\u5206\u5185\u90e8\u548c\u5916\u90e8\u56e0\u7d20\uff0c\u80fd\u66f4\u597d\u5730\u5e2e\u6211\u4eec\u770b\u6e05\u672c\u8d28\u3002 \u7531\u4e8e\u6570\u636e\u79d1\u5b66\u7684\u5174\u8d77\uff0cPython\u53d8\u5f97\u66f4\u52a0\u6d41\u884c\uff0c\u53ef\u80fd\u60a8\u521a\u542c\u8bf4Python\u8fd9\u79cd\u8bed\u8a00\uff0c\u4f46\u5b9e\u9645\u4e0aPython\u5e76\u4e0d\u662f\u4e00\u4e2a\u5e74\u8f7b\u7684\u8bed\u8a00\uff0cPython\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u53d1\u5e03\u4e8e1991\u5e74\uff0c\u7531Guido von Rossum\u8bbe\u8ba1\u3002 1990\u5e74\u4ee3\u521d\uff0c\u4e2a\u4eba\u8ba1\u7b97\u673a\u5f00\u59cb\u8fdb\u5165\u666e\u901a\u5bb6\u5ead\uff0c\u8ba1\u7b97\u673a\u7684\u6027\u80fd\u5927\u5927\u63d0\u9ad8\u3002\u7a0b\u5e8f\u5458\u5f00\u59cb\u5173\u6ce8\u8ba1\u7b97\u673a\u7684\u6613\u7528\u6027\u3002\u8bde\u751f\u4e8e\u8be5\u65f6\u4ee3\u80cc\u666f\u4e0b\u7684 Python \u6b63\u662f\u4e00\u95e8\u6781\u5177\u6613\u7528\u6027\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 \u5728\u8bed\u6cd5\u65b9\u9762\uff0cPython\u6cbf\u7528\u4e86C\u8bed\u8a00\u7684\u5f88\u591a\u60ef\u4f8b\uff0c\u4f8b\u5982\u4f7f\u7528\u7b49\u53f7\u8d4b\u503c\uff0c\u4f7f\u7528 def \u5b9a\u4e49\u51fd\u6570\uff0c\u540c\u65f6\u53c8\u53d7\u5230\u4e86ABC \u8bed\u8a00\u7684\u5f3a\u70c8\u5f71\u54cd\u3002\u6765\u81ea ABC \u8bed\u8a00\u7684\u4e00\u4e9b\u89c4\u5b9a\u65f6\u81f3\u4eca\u65e5\u8fd8\u5bcc\u6709\u4e89\u8bae\uff0c\u4f8b\u5982\u5f3a\u5236\u7f29\u8fdb\u3002\u4f46\u8fd9\u4e9b\u8bed\u6cd5\u89c4\u5b9a\u786e\u5b9e\u8ba9 Python \u5bb9\u6613\u8bfb\u3002 Python\u7684\u6838\u5fc3\u7406\u5ff5\u5728 Zen of Python \uff08PEP 20\uff09\u6587\u6863\u4e2d\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u5176\u4e2d\u5305\u62ec\u5982\u4e0b\u683c\u8a00\uff1a \u7f8e\u4e3d\u80dc\u4e8e\u4e11\u964b \u663e\u5f0f\u80dc\u4e8e\u9690\u5f0f \u7b80\u5355\u80dc\u4e8e\u7e41\u591a \u7e41\u591a\u80dc\u4e8e\u6666\u6da9 \u53ef\u8bfb\u6027\u5f88\u91cd\u8981 \u4ea4\u4e92\u6a21\u5f0f Python\u662f\u4e00\u79cd\u89e3\u91ca\u578b\u8bed\u8a00\uff0cPython\u89e3\u91ca\u5668\u901a\u8fc7\u4e00\u6b21\u6267\u884c\u4e00\u6761\u8bed\u53e5\u7684\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u3002\u4ece tty\uff08\u7ec8\u7aef\uff09 \u8bfb\u53d6\u547d\u4ee4\u65f6, \u6211\u4eec\u79f0\u89e3\u91ca\u5668\u5de5\u4f5c\u4e8e\u4ea4\u4e92\u6a21\u5f0f (interactive mode)\u3002\u6240\u8c13\u7684\u4ea4\u4e92\u6a21\u5f0f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u5728\u7ec8\u7aef\u8f93\u5165\u7684Python\u8bed\u53e5\u4f1a\u7acb\u5373\u88ab\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u7ec8\u7aef\u663e\u793a\u63d0\u793a\u7b26\u3002\u7b49\u5f85\u4e0b\u4e00\u6b21\u547d\u4ee4\u7684\u8f93\u5165\u3002\u53ef\u4ee5\u5728cmd\u7a97\u53e3\u901a\u8fc7 python \u547d\u4ee4\u542f\u52a8CPython\u89e3\u91ca\u5668\u7684\u4ea4\u4e92\u6a21\u5f0f\uff0c\u4ea4\u4e92\u6a21\u5f0f\u4e0bCPython\u901a\u8fc7\u4e3b\u63d0\u793a\u7b26 (primary prompt) >>> \u63d0\u793a\u4e0b\u4e00\u6761\u547d\u4ee4\uff0c\u800c\u4ece\u63d0\u793a\u7b26 \u00b7\u00b7\u00b7 \u63d0\u793a\u4e00\u6761\u547d\u4ee4\u7684\u7eed\u884c\u3002 \u52a0\u5f3a\u7684\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668(IPython)\u7684\u63d0\u793a\u7b26\u662f\u4e00\u79cd\u5e26\u7f16\u53f7\u7684\u98ce\u683c\uff0c\u5982 In[2] \uff0c\u800c\u4e0d\u662f\u6807\u51c6\u7684 >>> \u3002 \u4fdd\u7559\u5b57 \u4fdd\u7559\u5b57\uff08\u53c8\u79f0\u4e3a\u5173\u952e\u5b57\uff09\uff0c \u4e0d\u80fd\u628a\u5b83\u4eec\u7528\u4f5c\u4efb\u4f55\u6807\u8bc6\u7b26\u540d\u79f0 \u3002Python\u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2akeyword\u6a21\u5757\uff0c\u53ef\u4ee5\u8f93\u51fa\u5f53\u524d\u7248\u672c\u7684\u6240\u6709\u5173\u952e\u5b57\uff1a import keyword print ( keyword . kwlist ) ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] \u53d8\u91cf\u547d\u540d\u89c4\u5219 Python \u7684\u6807\u8bc6\u7b26\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\uff0c\u7531\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u548c\u6570\u5b57\u7ec4\u6210\uff0c\u4e14\u5f00\u5934\u4e0d\u80fd\u662f\u6570\u5b57\u3002 \u54ea\u4e9b\u5b57\u6bcd\u53ef\u7528\u4f5c\u6807\u8bc6\u7b26\uff1f \u5bf9\u4e8e Python 3 \u6765\u8bf4\uff0c\u8fd9\u91cc\u7684\u5b57\u6bcd\u5b9e\u9645\u4e0a\u4e0d\u9650\u4e8e\u82f1\u6587\u5b57\u6bcd\uff0c\u4e5f\u53ef\u4ee5\u662f\u975eASCII\u7801\u7684\u5b57\u6bcd\uff0c\u4f8b\u5982\u5e0c\u814a\u5b57\u6bcd\u3001\u897f\u91cc\u5c14\u5b57\u6bcd\u3001\u6c49\u5b57\u7b49\u7b49\uff0c\u53c2\u89c1 PEP 3131\u3002\u4f46 Python 2 \u53ea\u652f\u6301\u82f1\u6587\u5b57\u6bcd\uff0c\u81f3\u5c11 Python 2 \u7684 CPython \u5b9e\u73b0\u662f\u8fd9\u6837\u3002\u5176\u4ed6\u7684 Python 2 \u5b9e\u73b0\u6709\u53ef\u80fd\u4e5f\u652f\u6301\u975eASCII\u5b57\u7b26\u4f5c\u4e3a\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982 IronPython\u3002 \u4e3a\u4ec0\u4e48\u6807\u8bc6\u7b26\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff1f \u5982\u679c\u6807\u8bc6\u7b26\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u90a3\u4e48\u50cf\"0o10\"\u3001\"1e5\"\u8fd9\u6837\u7684\u4ee3\u7801\u5c31\u4f1a\u5e26\u6765\u6b67\u4e49\uff0c\u751a\u81f3\u5bf9\u4e8e\"123\"\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u673a\u5668\u4e5f\u65e0\u6cd5\u786e\u5b9a\u8fd9\u5230\u5e95\u662f\u6570\u5b57\u8fd8\u662f\u6807\u8bc6\u7b26\u3002\u5f53\u7136\u53ef\u4ee5\u901a\u8fc7\u8ffd\u52a0\u89c4\u5219\u6765\u6d88\u9664\u6b67\u4e49\uff0c\u4f8b\u5982\u89c4\u5b9a\u53d8\u91cf\u8d4b\u503c\u65f6\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u662f\u6807\u5fd7\u7b26\u3002\u4f46\u5982\u679c\u771f\u7684\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u4ee3\u7801\u5fc5\u5b9a\u4f1a\u5b58\u5728\u5b89\u5168\u6027\u95ee\u9898\uff0c\u4f8b\u5982\"1e5\"\u5728\u524d\u9762\u5df2\u7ecf\u7528\u4f5c\u53d8\u91cf\u540d\u4e86\uff0c\u5728\u540e\u9762\u53c8\u60f3\u4f7f\u7528\"1e5\"\u8fd9\u4e2a\u6570\u5b57\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u65e2\u7136\u9700\u8981\u901a\u8fc7\u8ffd\u52a0\u89c4\u5219\u6765\u6d88\u9664\u6b67\u4e49\uff0c\u90a3\u76f4\u63a5\u89c4\u5b9a\u6570\u5b57\u4e0d\u80fd\u7528\u4e8e\u5f00\u5934\u4e0d\u5c31\u597d\u4e86\uff0c\u6bd5\u7adf\u6570\u5b57\u4f5c\u4e3a\u6807\u8bc6\u7b26\u7684\u5f00\u5934\u597d\u50cf\u6ca1\u4ec0\u4e48\u5fc5\u8981\u3002 \u8fd9\u4f1a\u8ba9\u7f16\u8bd1\u5668\u7684\u8bcd\u6cd5\u5206\u6790\u66f4\u52a0\u590d\u6742\uff0c\u4ece\u800c\u964d\u4f4e\u7f16\u8bd1\u5668\u7684\u6027\u80fd\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u90a3\u4e48\u8bcd\u6cd5\u5206\u6790\u5668\u5c31\u5fc5\u987b\u5728\u9047\u5230\u7b2c\u4e00\u4e2a\u6216\u7b2c\u4e8c\u4e2a\u82f1\u6587\u5b57\u7b26\u7684\u65f6\u5019\u8fdb\u884c\u56de\u6eaf\uff0c\u4ee5\u786e\u5b9a\u662f\u5426\u4e3a\u6570\u5b57\u3002 \u5b9e\u9645\u4e0a\uff0c\u6709\u4e9b\u8bed\u8a00\u5141\u8bb8\u6807\u8bc6\u7b26\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u4f46\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u4f8b\u5982 Common Lisp\u3002 Python \u4e60\u60ef\u4e8e\u4f7f\u7528 \u86c7\u5f62\u547d\u540d\u6cd5 \uff08snake case\uff09\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u7c7b\u540d\u63a8\u8350\u4f7f\u7528\u9a7c\u5cf0\u547d\u540d\u6cd5\uff0c\u800c\u5bf9\u4e8e\u666e\u901a\u53d8\u91cf\u540d\u3001\u51fd\u6570\u540d\u3001\u6a21\u5757\u540d\u3001\u5305\u540d\uff0c\u5219\u63a8\u8350\u4f7f\u7528\u86c7\u5f62\u547d\u540d\u6cd5\u3002 \u81f3\u4e8e Python \u4e3a\u4ec0\u4e48\u504f\u7231\u86c7\u5f62\u547d\u540d\u6cd5\uff0c\u6700\u53ef\u80fd\u7684\u539f\u56e0\u662f\u501f\u9274\u4e86 C \u8bed\u8a00\u7684\u89c4\u8303\u3002\u86c7\u5f62\u547d\u540d\u6cd5\u8d77\u6e90\u4e8e 1960 \u5e74\u4ee3\u540e\u671f\uff0c\u5b83\u4e0e C \u8bed\u8a00\u5173\u7cfb\u5bc6\u5207\uff0c The C Programming Language \u7684 2.1 \u8282\u4e2d\u5c31\u6709\u63d0\u5230\u4f7f\u7528\u4e0b\u5212\u7ebf\u53ef\u4ee5\u63d0\u9ad8\u957f\u53d8\u91cf\u540d\u7684\u53ef\u8bfb\u6027\u3002\u4e00\u5f00\u59cb\uff0c\u86c7\u5f62\u547d\u540d\u6cd5\u5e76\u6ca1\u6709\u5982\u4eca\u7279\u5b9a\u7684\u540d\u79f0\u3002Python \u4ece C \u8bed\u8a00\u4e2d\u501f\u9274\u8fc7\u6765\u540e\uff0c\u5728 PEP 8 \u4e2d\u5c06\u5176\u7b80\u79f0\u4e3a \"lower_case_with_underscores\"\u3002\u76f4\u5230 21 \u4e16\u7eaa\u521d\uff0c\u5728 Intel \u548c Ruby \u793e\u533a\u4e2d\uff0c\u624d\u6709\u4eba\u5f00\u59cb\u4ee5 \"snake case\" \u6765\u79f0\u547c\u5b83\u3002 \u73b0\u4eca\u6709\u4e0d\u5c11\u7f16\u7a0b\u8bed\u8a00\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4f1a\u63a8\u8350\u4f7f\u7528\u86c7\u5f62\u547d\u540d\u6cd5\uff0c\u5305\u62ecR\u8bed\u8a00\uff0c\u800c Python \u5219\u662f\u6700\u65e9\u8fd9\u4e48\u505a\u7684\u5176\u4e2d\u4e4b\u4e00\uff0c\u5e76\u4e14\u662f\u4f7f\u7528 snake case \u573a\u666f\u6700\u591a\u7684\u8bed\u8a00\u4e4b\u4e00\u3002 \u6ce8\u91ca \u7f16\u7a0b\u8bed\u8a00\u7684\u6ce8\u91ca\u7b26\u4e00\u822c\u6709\u4e24\u79cd\uff1a\u884c\u6ce8\u91ca\u4e0e\u5757\u6ce8\u91ca\uff08inline/block\uff09\u3002\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cC\u8bed\u8a00\u5bb6\u65cf\u9009\u62e9 \\\\ \u4f5c\u4e3a\u884c\u6ce8\u91ca\u7b26\uff0c\u800c\u811a\u672c\u8bed\u8a00\uff08\u5982shell\uff09\u5927\u591a\u4f7f\u7528 # \u4f5c\u4e3a\u884c\u6ce8\u91ca\u7b26\u3002Python \u6cbf\u7528\u4e86\u811a\u672c\u8bed\u8a00\u7684\u4f20\u7edf\uff0c\u5355\u884c\u6ce8\u91ca\u4ee5 # \u5f00\u5934\uff0c\u5e76\u4ee5\u7269\u7406\u884c\u7684\u672b\u5c3e\u7ed3\u675f\u3002 # \u8fd9\u662f\u5355\u884c\u6ce8\u91ca Python \u5e76\u6ca1\u6709\u5757\u6ce8\u91ca\u7b26\uff0c\u56e0\u6b64\uff0c\u6709\u65f6\u591a\u884c\u5b57\u7b26\u4e32\u4f1a\u88ab\u7528\u4f5c\u5757\u6ce8\u91ca\u3002 \"\"\" \u8fd9\u662f\u591a\u884c\u6ce8\u91ca \u8fd9\u662f\u591a\u884c\u6ce8\u91ca \"\"\" \u867d\u7136\u591a\u884c\u5b57\u7b26\u4e32\u7528\u4e8e\u591a\u884c\u6ce8\u91ca\u65f6\uff0cPython \u89e3\u91ca\u5668\u5e76\u4e0d\u4f1a\u4e3a\u6b64\u751f\u6210\u4ee3\u7801\uff08\u591a\u884c\u6ce8\u91ca\u4f5c\u4e3a\u6587\u6863\u5b57\u7b26\u4e32\u65f6\u9664\u5916\uff09\uff0c\u4e5f\u6ca1\u6709\u8d1f\u4f5c\u7528\uff08negative effects\uff09\uff0c\u4f46\u8fd9\u5374\u662f\u4e00\u79cd\u526f\u4f5c\u7528\uff08side effects\uff09\u3002\u57fa\u4e8e\u6b64\uff0cPEP-8 \u5efa\u8bae\u591a\u884c\u6ce8\u91ca\u5747\u4ee5 # \u53f7\u548c\u7a7a\u683c\u5f00\u5934\uff1a Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment). \u7f29\u8fdb \u4f4d\u4e8e\u903b\u8f91\u884c\u5f00\u59cb\u524d\u7684\u7a7a\u767d\uff08\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff09\u7528\u4e8e\u8ba1\u7b97\u884c\u7684\u7f29\u8fdb\u5c42\u6b21\uff0c\u8be5\u5c42\u6b21\u7528\u4e8e\u8bed\u53e5\u7684\u5206\u7ec4\u3002\u4e0d\u80fd\u4f7f\u7528 \\ \u8fde\u63a5\u4e24\u4e2a\u7269\u7406\u884c\u7684\u7f29\u8fdb\u3002 \u76f8\u540c\u5c42\u6b21\u7684\u4ee3\u7801\u5fc5\u987b\u4fdd\u6301\u76f8\u540c\u7684\u7f29\u8fdb\u91cf\uff0c\u7f29\u8fdb\u91cf\u5219\u53ef\u4ee5\u968f\u610f\u3002 \u5f53\u6e90\u7801\u6587\u4ef6\u6df7\u7528\u5236\u8868\u7b26\u548c\u7a7a\u683c\u65f6\uff0c\u8fd0\u884c\u65f6\u4f1a\u89e6\u53d1 TabError \u3002 \u7531\u4e8e\u975eUnix\u5e73\u53f0\u7684\u6587\u672c\u7f16\u8f91\u5668\u7684\u7279\u6027\uff0c\u6700\u597d \u4e0d\u8981\u7528\u5236\u8868\u7b26\u8868\u793a\u7f29\u8fdb \u3002 \u4e00\u822c\u7ea6\u5b9a\u4fd7\u6210\u4f7f\u75284\u4e2a\u7a7a\u683c\u7684\u7f29\u8fdb\u3002 input if True : print ( \"True\" ) else : print ( \"False\" ) output True \u4f7f\u7528\u7f29\u8fdb\u5212\u5206\u4ee3\u7801\u5757\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5927\u62ec\u53f7 {} \uff0c\u662f Python \u6700\u5177\u7279\u8272\u7684\u5730\u65b9\uff0c\u4f46\u8fd9\u4e5f\u662f Python \u65f6\u5e38\u88ab\u8bdf\u75c5\u7684\u5730\u65b9\u3002 \u4e00\u65b9\u9762\uff0c\u5f53\u4ee3\u7801\u5f88\u957f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u4e0d\u5c0f\u5fc3\u5f04\u9519\u90e8\u5206\u884c\u7684\u7f29\u8fdb\u5c42\u7ea7\u3002\u4f46\u5f88\u957f\u7684\u4ee3\u7801\u5757\u672c\u8eab\u5c31\u6709\u574f\u4ee3\u7801\u7684\u5473\u9053\uff0c\u8fd9\u964d\u4f4e\u4e86\u53ef\u8bfb\u6027\uff0c\u5e76\u6697\u793a\u4e86\u4ee3\u7801\u53ef\u80fd\u5b58\u5728\u8fc7\u5ea6\u7684\u8026\u5408\uff0c\u8fd9\u662f\u8981\u5c3d\u91cf\u907f\u514d\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4ee3\u7801\u662f\u4ece\u7f51\u4e0a\u590d\u5236\u7684\uff0c\u7c98\u8d34\u5230\u6e90\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5236\u8868\u7b26\u548c\u7a7a\u683c\u6df7\u7528\uff0c\u6216\u8005\u4e22\u5931\u7f29\u8fdb\u683c\u5f0f\u3002\u5982\u679c\u5927\u5bb6\u90fd\u4e0d\u9002\u7528\u5236\u8868\u7b26\u8868\u793a\u7f29\u8fdb\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u4e22\u5931\u7f29\u8fdb\u683c\u5f0f\u786e\u5b9e\u65e0\u6cd5\u81ea\u52a8\u8fd8\u539f\u4ee3\u7801\u3002 \u8bed\u53e5\u5206\u9694\u7b26 \u975e\u6b63\u5f0f\u5730\uff0c\u7b80\u5355\u8bed\u53e5\u5fc5\u987b\u5728\u5355\u4e2a\u903b\u8f91\u884c\u4e0a\u5b8c\u6210\u3002\u591a\u6761\u7b80\u5355\u8bed\u53e5\u53ef\u4ee5\u5b58\u5728\u540c\u4e00\u903b\u8f91\u884c\u5185\uff0c\u5e76\u4ee5\u534a\u89d2\u5206\u53f7 ; \u5206\u9694\u3002\u4e00\u822c\u4e0d\u63a8\u8350\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u964d\u4f4e\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 \u7eed\u884c\u7b26 \u867d\u7136 Python \u5c06 ; \u4f5c\u4e3a\u8bed\u53e5\u5206\u9694\u7b26\uff0c\u4f46\u4f7f\u7528 \\newline token \u4f5c\u4e3a\u8bed\u53e5\u7ec8\u6b62\u7b26\u3002 \\newline token \u53ef\u4ee5\u7406\u89e3\u4e3a\u5404\u4e2a\u7cfb\u7edf\u5408\u6cd5\u7684\u5e8f\u5217\u7ec8\u6b62\u7b26\uff08\u4f8b\u5982 \\n \u3001 \\r\\n \u7b49\uff09\uff0c\u4e25\u683c\u6765\u8bf4\uff0c\u8fd8\u5305\u62ec\u7ec8\u6b62\u7b26\u524d\u9762\u7684\u7a7a\u683c\u3002\u53e6\u5916\uff0c\u6ce8\u91ca\u4e5f\u8868\u793a\u903b\u8f91\u884c\u7684\u7ed3\u675f\u3002\u56e0\u6b64\uff0c\u6362\u884c\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 \u53e6\u5916\uff0c \\newline \u4e5f\u662f\u903b\u8f91\u884c\u7684\u7ed3\u5c3e\u6807\u8bb0\uff0c\u7b80\u5355\u8bed\u53e5\u4e0d\u80fd\u8d8a\u8fc7\u903b\u8f91\u884c\u7684\u8fb9\u754c\uff0c\u5373\u4e0d\u80fd\u5c06 \\newline \u5305\u542b\u5176\u4e2d\u3002\u56e0\u6b64\uff0c\u5f53\u7b80\u5355\u8bed\u53e5\u9700\u8981\u8de8\u8d8a\u591a\u4e2a\u7269\u7406\u884c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26 \\ \u5bf9\u5176\u4e2d\u7684 \\newline \u8fdb\u884c\u8f6c\u4e49\uff0c\u8fd9\u79f0\u4e3a \u663e\u5f0f\u884c\u8fde\u63a5\uff08Explicit line joining\uff09 \uff1a a = 3 + \\ 4 + \\ 5 a 12 \u5f53 \\ \u7528\u4e8e\u7eed\u884c\u65f6\uff0c\u53ef\u80fd\u4f1a\u88ab\u79f0\u4e3a\u7eed\u884c\u7b26\uff0c\u4f46\u5982\u4e0a\u6240\u8ff0\uff0c \\ \u672c\u8d28\u4e0a\u662f\u8f6c\u4e49\u7b26\u3002\u56e0\u6b64\uff0c \\ \u7528\u4e8e\u4ee3\u7801\u7eed\u884c\u65f6\uff0c\u53cd\u659c\u6760\u540e\u9762\u4e0d\u80fd\u5e26\u6709\u6ce8\u91ca\uff0c\u6216\u5176\u4ed6\u5b57\u7b26\uff08\u9664\u975e \\ \u4f4d\u4e8estring literal\u4e4b\u4e2d\uff09\u3002 [] , {} , \u6216 () 2 \u4e4b\u4e2d\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a\u7269\u7406\u884c\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26 \\ \uff0c\u8fd9\u79f0\u4e3a \u9690\u5f0f\u884c\u8fde\u63a5\uff08Implicit line joining\uff09 \u3002\u4f8b\u5982\uff1a total = [ 'item_one' , 'item_two' , 'item_three' , # comment 'item_four' , 'item_five' ] total ['item_one', 'item_two', 'item_three', 'item_four', 'item_five'] \u9690\u5f0f\u7684\u8fde\u7eed\u884c\u53ef\u4ee5\u5e26\u6709\u5e26\u6709\u6ce8\u91ca\uff0c\u4ee3\u7801\u7684\u7f29\u8fdb\u4e5f\u4e0d\u662f\u8bed\u6cd5\u4e0a\u5fc5\u987b\u7684\uff0c\u8fd8\u5141\u8bb8\u5176\u4e2d\u5305\u62ec\u7a7a\u884c\u3002\u867d\u7136\u9690\u5f0f\u8fde\u7eed\u884c\u5b58\u5728\u6362\u884c\uff0c\u4f46\u5176\u4e2d\u5e76\u4e0d\u5305\u62ec \\newline token\u3002\u53e6\u5916\uff0c\u9690\u5f0f\u884c\u8fde\u63a5\u4e5f\u53ef\u4ee5\u51fa\u73b0\u5728\u591a\u884c\u5b57\u7b26\u4e32\u4e4b\u4e2d\uff0c\u6b64\u65f6\u4e0d\u80fd\u5e26\u6709\u6ce8\u91ca\u3002 \u7a7a\u884c \u7a7a\u884c\u4e0e\u7f29\u8fdb\u4e0d\u540c\uff0c \u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 \u4ec5\u5305\u542b\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u9875\u7b26\u548c\u6ce8\u91ca\u7684\u903b\u8f91\u884c\u5c06\u88ab\u5ffd\u7565\uff0c\u5373\u4e0d\u751f\u6210 \\newline token\u3002\u4ee3\u7801\u6587\u4ef6\u4e2d\u4e0d\u5b58\u5728\u7a7a\u884c\uff0c\u8fd0\u884c\u65f6\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u4f46\u7a7a\u884c\u53ef\u7528\u4e8e\u5206\u9694\u4e24\u6bb5\u4e0d\u540c\u529f\u80fd\u6216\u542b\u4e49\u7684\u4ee3\u7801\uff0c\u8ba9\u4ee3\u7801\u7ed3\u6784\u770b\u8d77\u6765\u66f4\u6e05\u6670\uff0c\u4fbf\u4e8e\u7ef4\u62a4\u6216\u91cd\u6784\u3002\u6839\u636e PEP8 \u89c4\u8303\uff0c\u7c7b\u65b9\u6cd5\u4e4b\u95f4\u7528 1 \u884c\u7a7a\u884c\u5206\u9694\uff0c\u9876\u7ea7\u51fd\u6570\u3001\u7c7b\u4e4b\u95f4\u7528 2 \u884c\u7a7a\u884c\u5206\u9694\u3002 \u5728\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u4e2d\uff0c\u7531\u4e8e\u9700\u8981\u5b9e\u73b0 read-eval-print loop\uff0c\u7a7a\u884c\u7684\u5904\u7406\u53ef\u80fd\u6709\u6240\u4e0d\u540c\u3002\u5728\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u8f93\u5165\u4ee3\u7801\u5757\u65f6\uff0c\u4e00\u4e2a\u5b8c\u5168\u7a7a\u767d\u7684\u7a7a\u884c\u7528\u4e8e\u7ec8\u6b62\u591a\u884c\u8bed\u53e5\u3002 In [ 1 ]: for i in range ( 2 ): ... : print ( i ) ... : 0 1 Print \u8f93\u51fa print \u51fd\u6570\u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u8f93\u51fa\u5230 STDOUT\uff0c\u5e76\u4e14\u9ed8\u8ba4\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u6dfb\u52a0\u6362\u884c\u7b26\u3002\u5982\u679c\u4e0d\u60f3\u6362\u884c\u6253\u5370\uff0c\u9700\u8981\u66f4\u6539 print \u51fd\u6570\u7684 end \u53c2\u6570\uff1a \u6362\u884c\u6253\u5370 print ( \"a\" ) print ( \"b\" ) a b \u4e0d\u6362\u884c\u6253\u5370 print ( \"a\" , end = \" \" ) print ( \"b\" , end = \" \" ) a b \u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4ea7\u751f\u591a\u79cd\u8f93\u51fa\u3002\u867d\u7136 print \u51fd\u6570\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u5f0f\uff0c\u4f46\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u6280\u672f\u6765\u4ee3\u66ff\u5b83\uff1a \u57fa\u4e8e\u6587\u672c\u683c\u5f0f\u7684\u6587\u4ef6\u3002\u901a\u5e38\u4f7f\u7528 print \u51fd\u6570\u4e5f\u53ef\u4ee5\u5b8c\u6210\u3002 PDF \u6216\u5176\u4ed6\u683c\u5f0f\u7684\u8f93\u51fa\u6587\u4ef6\u3002\u8fd9\u5c06\u9700\u8981\u4f7f\u7528\u5176\u4ed6 Python \u5e93\u6765\u751f\u6210\u8fd9\u4e9b\u683c\u5f0f\u3002 \u9519\u8bef\u6d88\u606f\u3001\u8c03\u5f0f\u6d88\u606f\u548c\u65e5\u5fd7\u6587\u4ef6\u3002\u901a\u5e38\u4f7f\u7528 logging \u6a21\u5757\uff0c\u5076\u5c14\u4f7f\u7528 print \u51fd\u6570\u3002 \u5bfc\u5165\u6a21\u5757 Python \u4f7f\u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\uff08module\uff09\u3002 import somemodule \u5bfc\u5165\u6574\u4e2a\u6a21\u5757 from somemodule import somefunction \u5bfc\u5165\u67d0\u4e2a\u6a21\u5757\u7684\u67d0\u4e2a\u51fd\u6570 from somemodule import func_1, func_2, class_1 \u5bfc\u5165\u67d0\u4e2a\u6a21\u5757\u7684\u591a\u4e2a\u51fd\u6570\u6216\u7c7b from somemodule import * \u5bfc\u5165\u67d0\u4e2a\u6a21\u5757\u7684\u5168\u90e8\u5b9a\u4e49 \u5b57\u7b26\u8f6c\u4e49 \u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\uff08\u8fd9\u4e9b\u5b57\u7b26\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u4e0d\u80fd\u901a\u8fc7\u952e\u76d8\u76f4\u63a5\u8f93\u5165\uff09\uff0c\u8fd9\u5c31\u9700\u8981\u201c\u8f6c\u4e49\u7b26\u201d\u3002\u6240\u8c13\u8f6c\u4e49\uff0c\u5c31\u662f\u4e0d\u91c7\u7528\u7b26\u53f7\u539f\u5148\u7684\u542b\u4e49\uff08\u5b57\u9762\u542b\u4e49\uff09\uff0c\u800c\u91c7\u7528\u53e6\u5916\u4e00\u542b\u4e49\u3002\u5728Pyhton\u4e2d\uff0c \\ \u4ee3\u8868\u8f6c\u4e49\u7b26\u3002 \u9664\u975e\u5b58\u5728 r \u524d\u7f00\uff0c\u5426\u5219\u5c06\u6839\u636e\u7c7b\u4f3c\u4e8e\u6807\u51c6C\u7684\u89c4\u5219\u6765\u89e3\u91ca string literals \u548c bytes literals \u4e2d\u7684\u8f6c\u4e49\u5e8f\u5217\u3002\u4ee5\u4e0b\u662fPython\u53ef\u8bc6\u522b\u7684\u8f6c\u4e49\u5e8f\u5217\uff1a \u8f6c\u4e49\u5e8f\u5217 \u63cf\u8ff0 \u8f6c\u4e49\u5e8f\u5217 \u63cf\u8ff0 \\newline \u53cd\u659c\u6760\u548c\u6362\u884c\u7b26\u5c06\u88ab\u5ffd\u7565 \\v \u7eb5\u5411\u5236\u8868\u7b26 \\\\ \u53cd\u659c\u6760 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\' \u5355\u5f15\u53f7 \\r \u56de\u8f66\u7b26 \\\" \u53cc\u5f15\u53f7 \\f \u6362\u9875\u7b26 \\a \u8702\u9e23\u5668\u54cd\u94c3 4 \\ooo \u516b\u8fdb\u5236\u503c\u4e3a ooo \u7684\u5b57\u7b26\uff0c\u5982 \\012 \u8868\u793a\u6362\u884c\uff0c \\000 \u4e3a\u7a7a\u5b57\u7b26 \\b \u9000\u683c \\xhh \u5341\u516d\u8fdb\u5236\u503c\u4e3a hh \u5b57\u7b26\uff0c\u5982 \\x0a \u8868\u793a\u6362\u884c \\n \u6362\u884c\u7b26 \u4ec5\u5728 string literals \u4e2d\u624d\u80fd\u88ab\u8bc6\u522b\u7684\u8f6c\u4e49\u5e8f\u5217\u4e3a\uff1a \u8f6c\u4e49\u5e8f\u5217 \u63cf\u8ff0 \\N{name} Character named name in the Unicode database \\uxxxx Character with 16-bit hex value xxxx \\Uxxxxxxxx Character with 32-bit hex value xxxxxxxx Python\u9ed8\u8ba4\u5c06 \\ \u4f5c\u4e3a\u8f6c\u4e49\u7b26\u5904\u7406\uff0c\u4f46\u6709\u65f6\u5019\u6211\u4eec\u60f3\u8f93\u5165\u7684\u662f\u53cd\u659c\u6760\u7b26\u53f7 \\ \uff0c\u4f8b\u5982\u8f93\u5165 windows \u7cfb\u7edf\u7684\u6587\u4ef6\u8def\u5f84\u3002\u6b64\u65f6\uff0c\u53ef\u4ee5\u5728\u53cd\u659c\u6760\u524d\u52a0\u4e0a\u8f6c\u4e49\u7b26 \\ \uff0c\u5373 \\\\ \u8868\u793a\u4e00\u4e2a\u53cd\u659c\u6760\u7b26\u53f7\u3002\u5982\u679c\u5b57\u7b26\u4e32\u5305\u542b\u4e86\u5f88\u591a\u53cd\u659c\u6760 \\ \uff0c\u8fd9\u6837\u505a\u5c31\u6bd4\u8f83\u9ebb\u70e6\u3002Python\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5316\u7684\u64cd\u4f5c\uff0cPyhon\u5141\u8bb8\u7528 r\"\u5b57\u7b26\u4e32\u5185\u5bb9\" \u8868\u793a \"\u5b57\u7b26\u4e32\u5185\u5bb9\" \u5185\u90e8\u7684\u5b57\u7b26\u9ed8\u8ba4\u4e0d\u8f6c\u4e49\uff1a Normal String Literal print ( ' \\\\\\t\\\\ ' ) \\ \\ Raw String Literal print ( r ' \\\\ \\t \\\\ ' ) \\\\\\t\\\\ \u53d8\u91cf\u4e0e\u5bf9\u8c61 \u4e0d\u6b63\u5f0f\u5730\uff0c\u7f16\u7a0b\u7684\u672c\u8d28\u5728\u4e8e\u64cd\u7eb5\u8ba1\u7b97\u673a\u7684 CPU \u548c RAM\u3002\u7f16\u7a0b\u8bed\u8a00\u672c\u8eab\u5c31\u662f CPU \u6307\u4ee4\u96c6\u7684\u62bd\u8c61\uff0c\u5b83\u4eec\u90fd\u63d0\u4f9b\u4e86\u5404\u81ea\u64cd\u4f5c\u5185\u5b58\u4e2d\u5143\u7d20\u7684\u65b9\u5f0f\u3002\u4e00\u822c\uff0c\u5728\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7\u64cd\u7eb5 \u53d8\u91cf \u53bb\u64cd\u7eb5\u5185\u5b58\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u64cd\u7eb5\u5185\u5b58\u5730\u5740\uff0c\u56e0\u4e3a\u53d8\u91cf\u5c31\u4ee3\u8868\u4e86\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\u3002\u5982\u679c\u662f OOP \u8303\u5f0f\u7684\u8bed\u8a00\uff0c\u53d8\u91cf\u5173\u8054\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c31\u662f\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u5373\u5bf9\u8c61\u4f5c\u4e3a\u5185\u5b58\u7a7a\u95f4\u7684\u62bd\u8c61\u3002\u5bf9\u8c61\u57fa\u4e8e\u7c7b\u521b\u5efa\uff0c\u7c7b\u5b9a\u4e49\u4e86\u8be5\u7c7b\u578b\u7684\u5bf9\u8c61\u9700\u8981\u5360\u7528\u591a\u5c11\u5185\u5b58\u7a7a\u95f4\uff0c\u50a8\u5b58\u5728\u5bf9\u8c61\u4e2d\u7684\u503c\u8be5\u5982\u4f55\u89e3\u91ca\uff0c\u4ee5\u53ca\u6709\u54ea\u4e9b\u65b9\u6cd5 5 \u53ef\u4ee5\u7528\u6765\u64cd\u7eb5\u8be5\u5bf9\u8c61\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u7c7b\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6a21\u677f\uff0c\u5177\u6709\u76f8\u540c\u7ed3\u6784\u4ee5\u53ca\u76f8\u4f3c\u5904\u7406\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u677f\u3002 Python \u5b98\u65b9\u6587\u6863\u4f3c\u4e4e\u66f4\u559c\u6b22\u628a\u53d8\u91cf\u79f0\u4e3a name\uff08\u540d\u5b57\uff09\u3002\u540c\u65f6\uff0c\u53c8\u56e0\u4e3a Python \u4e2d\u7684\u53d8\u91cf\u540d\u5bf9\u5e94\u7684\u53d8\u91cf\u7c7b\u578b\u662f\u53ef\u4ee5\u968f\u65f6\u6539\u53d8\u7684\uff0c\u56e0\u6b64\u6709\u89c2\u70b9\u8ba4\u4e3a Python \u4e0d\u5b58\u5728\u53d8\u91cf\u8fd9\u4e2a\u6982\u5ff5\u3002\u4f46\u8fd9\u6837\u7684\u89c2\u70b9\u662f\u8352\u8c2c\u7684\uff0c\u5c31\u50cf\u5728\u8bf4\u56e0\u4e3a\u718a\u732b\u53eb\u505a\u718a\u732b\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u718a\uff0c\u56e0\u4e3a\u9e35\u9e1f\u4e0d\u4f1a\u98de\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u9e1f\u3002Python \u7684 name \u5c31\u662f\u53d8\u91cf\uff0c\u53ea\u4e0d\u8fc7 Python \u53d8\u91cf\u7684\u884c\u4e3a\u548c C\u3001C++\u3001Java \u8fd9\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6709\u6240\u533a\u522b\u800c\u5df2\u3002\u5bf9\u4e8e\u6b64\u95ee\u9898\u7684\u5177\u4f53\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003\u300a 1.3.\u57fa\u672c\u6982\u5ff5 \u300b\u7684 \u7b2c3\u8282 \u3002\u5728\u672c\u7cfb\u5217\u7684\u6587\u7ae0\u4e2d\uff0c \u53d8\u91cf \u548c \u540d\u5b57\uff08name\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\uff1b \u53d8\u91cf\u503c\uff08\u53d8\u91cf\u7684\u503c\uff09 \u548c \u5bf9\u8c61\uff08object\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\u3002 Python\u7684\u53d8\u91cf\u4e0d\u9700\u8981\u58f0\u660e\u3001\u5b9a\u4e49\u548c\u521d\u59cb\u5316\uff0c\u53d8\u91cf\u4f1a\u5728\u8d4b\u503c\u65f6\u88ab\u521b\u5efa\u3002\u7f16\u8bd1\u5668\u6216\u89e3\u6790\u5668\u4e0d\u4f1a\u9759\u6001\u68c0\u67e5\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u53d8\u91cf\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\uff0c\u4f8b\u5982\u4f7f\u7528 isinstance \u51fd\u6570\u3002 Objects \u6240\u6709 Python \u5bf9\u8c61\u90fd\u6709\uff1a \u4e00\u4e2a\u60df\u4e00\u7684 identity \uff08\u7531 id(x) \u8fd4\u56de\u7684\u4e00\u4e2a\u6574\u6570\uff0c\u6ce8\u610f\uff1a identity \u4e0d\u662f identifier\uff09 \u4e00\u4e2a\u7c7b\u578b\uff08\u7531 type(x) \u8fd4\u56de\uff09 \u4e00\u4e9b\u503c \u5bf9\u8c61\u7684 identity \u65e0\u6cd5\u6539\u53d8\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 Note CPython2.2\u53ca\u66f4\u65b0\u7684\u7248\u672c\u5141\u8bb8\u5728\u76f8\u5f53\u6709\u9650\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u5728 Python \u4e2d\u3002\u4e00\u4e9b\u5bf9\u8c61\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff08\u5728\u4e0d\u6539\u53d8 identity \u548c type \u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u8fd9\u79cd\u5bf9\u8c61\u88ab\u79f0\u4e3a mutable object \uff1b\u800c\u53e6\u4e00\u4e9b\u5bf9\u8c61\u4e0d\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a immutable object \u3002 \u7c7b\u578b\u7531 \u7c7b\u5bf9\u8c61 \u8868\u793a\uff08\u7c7b\u5bf9\u8c61\u5f80\u5f80\u77e5\u9053\u7c7b\u7684\u5bf9\u8c61\u8981\u5360\u591a\u5c11\u5185\u5b58\uff0c\u6709\u4ec0\u4e48\u65b9\u6cd5\u7b49\u7b49\uff09\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6709\uff1a \u96f6\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff08\u7531\u7c7b\u5bf9\u8c61\u63d0\u4f9b\uff09 \u96f6\u4e2a\u6216\u591a\u4e2a \u540d\u5b57 \u67d0\u4e9b\u5bf9\u8c61\u5177\u6709\u5141\u8bb8\u4f60\u66f4\u6539\u5bf9\u8c61\u5185\u5bb9\uff08\u5373\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff09\u7684\u65b9\u6cd5\u3002\u67d0\u4e9b\u5bf9\u8c61\u5177\u6709\u4ec5\u5177\u6709\u8bbf\u95ee\u5185\u5bb9\u800c\u4e0d\u66f4\u6539\u5185\u5bb9\u7684\u65b9\u6cd5\u3002\u4e00\u4e9b\u5bf9\u8c61\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u3002\u5373\u4f7f\u5bf9\u8c61\u5177\u6709\u65b9\u6cd5\uff0c\u4f60\u4e5f\u4e0d\u80fd\u6539\u53d8\u5b83\u4eec\u7684\u7c7b\u578b\u6216\u8005\u5185\u5b58\u5730\u5740\u3002 Names name \u4e0d\u662f object \u7684\u5c5e\u6027\uff0cobject \u5e76\u4e0d\u77e5\u9053\u5b83\u4eec\u7684 name\u3002 \u6240\u6709 name \u5728\u521b\u5efa\u65f6\u5fc5\u987b\u5173\u8054\uff08bind\uff09\u5230\u4e00\u4e2a object\uff0c\u5426\u5219\u5728\u9700\u8981\u5f15\u7528\u8be5 name \u65f6\u4f1a\u62a5\u9519\u3002 name \u53ef\u4ee5\u5728\u521b\u5efa\u4ee5\u540e\u6307\u5411\u4efb\u4f55\u4e00\u4e2a object\uff08\u5305\u62ec\u4e0d\u540c\u7c7b\u578b\uff09\uff0c\u6240\u4ee5 name \u672c\u8eab\u6ca1\u6709\u7c7b\u522b\uff0c\u4f46 name \u5173\u8054\u7684 object \u662f\u6709\u7c7b\u522b\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528 type(name) \u6765\u67e5\u770b name \u5173\u8054\u7684 object \u7684\u7c7b\u578b\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5173\u8054\uff08bind\uff09\u591a\u4e2a\u540d\u5b57\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u540d\u5b57\u3002 name \u5b58\u5728\u4e8e namespace\uff08\u547d\u540d\u7a7a\u95f4\uff09\uff0c\u4f8b\u5982\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u3001\u5b9e\u4f8b\u547d\u540d\u7a7a\u95f4\u3001\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7b49\u7b49\u3002 Assignment Python \u4e5f\u6709 assignment \u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u5b83\u7684\u4e2d\u6587\u6216\u8bb8\u8bd1\u4e3a \u5206\u914d \u6216\u8005 \u547d\u540d \u66f4\u4e3a\u6070\u5f53\uff0c\u56e0\u4e3a\u5728 Python\u4e2d\uff0cassignment \u8bed\u53e5\u4f1a\u6539\u52a8 namespace\uff0c\u800c\u4e0d\u662f\u6539\u52a8\u4e86 object\u3002 Attention \u8fd9\u4e2a\u8bf4\u6cd5\u4e0d\u592a\u4e25\u8c28\uff0c\u56e0\u4e3a assignment \u53ef\u4ee5\u6539\u53d8 Python \u4e2d\u53ef\u53d8\u5bf9\u8c61\u7684\u503c\u3002 assignment : assignments do not copy data \u2014 they just bind names to objects. \u6362\u800c\u8a00\u4e4b\uff0c\u4ee5\u4e0b assignment \u8bed\u53e5\u8868\u793a\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4e14namespace\u7684 a \u952e 3 \u6240\u5bf9\u5e94\u7684value\u4e3a10\u3002 a = 10 \u5982\u679c\u540d\u79f0\u5df2\u7ecf\u5b58\u5728\uff0cassignment\u8bed\u53e5\u5c06\u66ff\u6362\u539f\u59cb\u540d\u79f0\uff1a a = 10 a = 20 \u8fd9\u610f\u5473\u7740\u9996\u5148\u8981\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4f7f\u5176\u6307\u5411\u5305\u542b\u503c10\u7684\u6574\u6570\u5bf9\u8c61\u3002\u7136\u540e\u518d\u4f7f a \u5176\u6307\u5411\u5305\u542b\u503c20\u7684\u6574\u6570\u5bf9\u8c61\u3002\u539f\u6765\u7684\u6574\u6570\u5bf9\u8c6110\u4e0d\u53d7\u6b64\u64cd\u4f5c\u7684\u5f71\u54cd\u3002 \u5982\u679c\u8fd9\u6837\u505a\uff1a a = [] a . append \uff08 1 \uff09 \u7b2c\u4e00\u6761\u8bed\u53e5\u5c06 a \u5173\u8054\u5230\u4e00\u4e2a\u7a7a\u5217\u8868\u5bf9\u8c61\uff0c\u8fd9\u4f1a\u4fee\u6539\u547d\u540d\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u6761\u8bed\u53e5\u4fee\u6539\u4e86\u8be5\u5217\u8868\u7684\u5185\u5bb9\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u89e6\u53canamespace\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0cassignment statement \u5728 Python \u4e2d\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a \u7528\u4e8e\uff08\u91cd\u65b0\uff09\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5bf9\u8c61 \u4fee\u6539\u53ef\u53d8\u5bf9\u8c61\u7684\u5c5e\u6027\uff08\u5185\u5bb9\uff09 \u5355\u5f15\u53f7\u4e0e\u53cc\u5f15\u53f7 Python \u6ca1\u6709 char \u7c7b\u578b\uff0c\u53ea\u6709 str \u7c7b\u578b\uff0c\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a str1 = 'Python' str2 = \"Python\" str1 \u548c str2 \u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684\u3002Python \u4ee5\u7b80\u6d01\u548c\u6613\u7528\u6027\u8457\u79f0\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u591a\u4f59\u7684\u8bbe\u8ba1\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5e26\u6709\u5355\u5f15\u53f7\uff0c\u4f8b\u5982\uff1a We all know that 'A' and 'B' are two capital letters. \u82e5\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4e3a\u4e86\u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u5f15\u53f7\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u8f6c\u4e49\uff1a string = 'We all know that \\' A \\' and \\' B \\' are two capital letters.' \u663e\u7136\u592a\u591a\u7684\u8f6c\u4e49\u7b26\u770b\u8d77\u6765\u5e76\u4e0d\u597d\u770b\uff0c\u6b64\u65f6\u4f7f\u7528\u53cc\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u5219\u7f8e\u89c2\u5f97\u591a\uff1a string = \"We all know that 'A' and 'B' are two capital letters.\" \u540c\u7406\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u4e86\u53cc\u5f15\u53f7\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u800c\u907f\u514d\u4f7f\u7528\u8f6c\u4e49\u7b26\uff1a \"There was a storm last night,\" Paul said. string = '\"There was a storm last night,\" Paul said.' \u8fd9\u5c31\u662fPython\u6613\u7528\u6027\u548c\u4eba\u6027\u5316\u7684\u4e00\u4e2a\u4f53\u73b0\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 ' ' \u5b9a\u4e49\u5b57\u7b26\u4e32\u65f6\uff0c\u5b83\u4f1a\u8ba4\u4e3a\u5b57\u7b26\u4e32\u4e2d\u7684\u53cc\u5f15\u53f7 \" \" \u662f\u666e\u901a\u5b57\u7b26\uff0c\u4ece\u800c\u4e0d\u9700\u8981\u8f6c\u4e49\u3002\u53cd\u4e4b\u4ea6\u7136\u3002 \u8fdb\u5236\u6570\u8868\u793a 0b \u5f00\u5934\u8868\u793a\u4e8c\u8fdb\u5236\u6570\uff1a 0b10 2 0o \u5f00\u5934\u8868\u793a\u516b\u8fdb\u5236\u6570\uff1a 0o10 8 0x \u5f00\u5934\u8868\u793a\u5341\u516d\u8fdb\u5236\u6570\uff1a 0x10 16 Lambdas \u6b63\u5e38\u521b\u5efa\u51fd\u6570\uff08\u4f7f\u7528 def \uff09\u4f1a\u81ea\u52a8\u5c06\u51fd\u6570\u5bf9\u8c61\u4e0e def \u540e\u9762\u7684\u540d\u5b57\u8fdb\u884c\u7ed1\u5b9a\uff0c\u8fd9\u4e0e\u521b\u5efa\u5176\u4ed6\u5bf9\u8c61\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u548c\u6574\u6570\uff09\u4e0d\u540c\uff0c\u540e\u8005\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\uff0c\u800c\u65e0\u9700\u5c06\u5b83\u4eec\u5206\u914d\u7ed9\u540d\u5b57\u3002\u4f46\u53ea\u8981\u4f7f\u7528lambda\u8bed\u6cd5\u521b\u5efa\u51fd\u6570\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\u51fd\u6570\u79f0\u4e3a\u533f\u540d\uff08anonymous\uff09\u51fd\u6570\u3002\u5c06\u7b80\u5355\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6700\u5e38\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a # my_func\u662f\u6b63\u5e38\u521b\u5efa\u7684\u51fd\u6570\uff08named function\uff09 def my_func ( f , arg ): return f ( arg ) my_func ( lambda x : 2 * x * x , 5 ) 50 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u52a8\u6001\u521b\u5efa\u4e86\u4e00\u4e2a\u533f\u540d\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u53c2\u6570\u8c03\u7528\u5b83\u3002Lambda\u51fd\u6570\u6ca1\u6709\u547d\u540d\u51fd\u6570\uff08named function\uff09\u90a3\u4e48\u5f3a\u5927\u3002Lambda\u51fd\u6570\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u901a\u5e38\u76f8\u5f53\u4e8e\u4e00\u884c\u4ee3\u7801\u3002\u5b9e\u9645\u4e0a\uff0cLambda\u51fd\u6570\u53ef\u4ee5\u5206\u914d\u7ed9\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u4f7f\u7528\u3002\u4f46\u662f\uff0c\u5f88\u5c11\u6709\u5145\u5206\u7684\u7406\u7531\u8fd9\u6837\u505a\u3002\u901a\u5e38\u4f7f\u7528 def \u6765\u5b9a\u4e49\u51fd\u6570\u66f4\u597d\u3002 double = lambda x : x * 2 print ( double ( 7 )) 14 \u8fd0\u7b97\u7b26 \u7b97\u672f\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 + \u52a0 - \u51cf * \u4e58 / \u9664 % \u53d6\u6a21 ** \u5e42 // \u53d6\u6574\u9664 \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e < \u5c0f\u4e8e >= \u5927\u4e8e\u7b49\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e \u8d4b\u503c\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 << \u5de6\u79fb\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u7531 << \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb\u8fd0\u7b97\u7b26\uff1a\u628a > \u5de6\u8fb9\u7684\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c >> \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570 & \u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1\uff0c\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1\uff0c\u5426\u5219\u4e3a0 | \u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1 ^ \u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 ~ \u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\uff0c\u5373\u628a1\u53d8\u4e3a0\uff0c\u628a0\u53d8\u4e3a1\u3002 ~x \u7c7b\u4f3c\u4e8e -x-1 \u5de6\u79fb\u548c\u53f3\u79fb\u7684\u610f\u601d\u5c31\u662f\u628a\u4f4d\u6570\u6574\u4f53\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u82e5\u5e72\u4f4d\u3002\u6bd4\u59821111\u5411\u53f3\u79fb\u4e00\u4f4d\u5c31\u53d8\u6210\u4e860111\uff0c\u539f\u6765\u6ca1\u6709\u7684\u4f4d\u81ea\u52a8\u586b0\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u4f4d\u820d\u5f03\u6389\u3002\u770b\u51e0\u4e2a\u4f8b\u5b50\uff1a bin ( 0b1111 >> 1 ) '0b111' bin ( 0b1010 << 2 ) '0b101000' \u5bf9\u4e8e\u5168\u90e8\u7684\u6309\u4f4d\u8fd0\u7b97\u7b26\uff0c\u5982\u679c\u4f7f\u7528\u5341\u8fdb\u5236\uff08\u6216\u8005\u5176\u4ed6\u8fdb\u5236\u6570\uff09\uff0c\u4e5f\u662f\u5bf9\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8fdb\u884c\u79fb\u4f4d\uff1a print ( 0b1111 is 15 ) bin ( 15 >> 1 ) True <>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? <>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? <ipython-input-1-fec78c7dc2ab>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? print(0b1111 is 15) '0b111' \u5176\u4ed6\u6309\u4f4d\u8fd0\u7b97\u7b26\u7684\u4f8b\u5b50\uff1a print ( bin ( 0b1111 & 0b1010 )) print ( bin ( 0b1111 | 0b1010 )) print ( bin ( 0b1111 ^ 0b1010 )) print ( bin ( ~ 0b1010 ), bin ( - 0b1010 - 1 )) 0b1010 0b1111 0b101 -0b1011 -0b1011 \u903b\u8f91\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u903b\u8f91\u8868\u8fbe\u5f0f \u63cf\u8ff0 and x and y x\u3001y\u540c\u65f6\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 or x or y x\u3001y\u4e24\u8005\u6709\u4e00\u4e2a\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 not not x x\u4e3a\u771f\uff0c\u7ed3\u679c\u4e3a\u5047\uff1bx\u4e3a\u5047\uff0c\u7ed3\u679c\u4e3a\u771f \u5e03\u5c14\u8fd0\u7b97\u7b26\u6709\u4e2a\u6709\u8da3\u7684\u7279\u5f81\uff1a\u53ea\u505a\u5fc5\u8981\u7684\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u4ec5\u5f53 x \u548c y \u90fd\u4e3a\u771f\u65f6\uff0c\u8868\u8fbe\u5f0f x and y \u30aa\u4e3a\u771f\u3002\u56e0\u6b64\u5982\u679c x \u4e3a\u5047\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u7acb\u5373\u8fd4\u56de\u5047\uff0c\u800c\u4e0d\u5173\u5fc3 y \u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c x \u4e3a\u5047\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u8fd4\u56de x \uff0c\u5426\u5219\u8fd4\u56de y \u3002 \u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a \u77ed\u8def\u903b\u8f91 \uff08\u6216\u8005\u5ef6\u8fdf\u6c42\u503c\uff09\uff1a\u5e03\u5c14\u8fd0\u7b97\u7b26\u5e38\u88ab\u79f0\u4e3a\u903b\u8f91\u8fd0\u7b97\u7b26\u3002 \u5bf9\u4e8e\u8fd0\u7b97\u7b26 or \uff0c\u60c5\u51b5\u4ea6\u5982\u6b64\u3002\u5728\u8868\u8fbe\u5f0f x or y \u4e2d\uff0c\u5982\u679c x \u4e3a\u771f\uff0c\u5c31\u8fd4\u56de x \uff0c\u5426\u5219\u8fd4\u56de y \u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740\u4f4d\u4e8e\u5e03\u5c14\u8fd0\u7b97\u7b26\u540e\u9762\u7684\u4ee3\u7801\uff08\u5982\u51fd\u6570\u8c03\u7528\uff09\u53ef\u80fd\u6839\u672c\u4e0d\u4f1a\u6267\u884c\u3002\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u5c31\u5229\u7528\u4e86\u8fd9\u79cd\u884c\u4e3a name = input ( 'Please enter your name:' ) or '<unknown>' \u5982\u679c\u6ca1\u6709\u8f93\u5165\u540d\u5b57\uff0c\u4e0a\u8ff0 or \u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u5c06\u4e3a '< unknown>' \u3002 \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5b81\u613f\u4f7f\u7528\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u800d\u8fd9\u6837\u7684\u77ed\u8def\u82b1\u6837\uff0c\u56e0\u4e3a\u8fc7\u591a\u7684\u77ed\u8def\u903b\u8f91\u53ef\u80fd\u4f1a\u8ba9\u4ee3\u7801\u903b\u8f91\u53d8\u5f97\u9690\u6666\uff0c\u66f4\u5bb9\u6613\u51fa\u9519\u3002 \u4e0d\u8fc7\u524d\u9762\u8fd9\u6837\u7684\u8bed\u53e5\u786e\u5b9e\u6709\u5176\u7528\u6b66\u4e4b\u5730\u3002 \u6210\u5458\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False \u8eab\u4efd\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b) \u3002\u5982\u679c\u5f15\u7528\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u6570\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u5177\u6709\u76f8\u540c\u4f18\u5148\u7ea7\u7684\u8fd0\u7b97\u7b26\u5c06\u4ece\u5de6\u81f3\u53f3\u7684\u65b9\u5f0f\u4f9d\u6b21\u8fdb\u884c\u3002\u7528\u5c0f\u62ec\u53f7 () \u53ef\u4ee5\u6539\u53d8\u8fd0\u7b97\u987a\u5e8f\u3002 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u4f18\u5148\u7ea7 {key:value, ...} \u5b57\u5178\u663e\u793a 16 [...] \u5217\u8868\u663e\u793a 16 (...) \u5c06\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6216\u5143\u7ec4\u663e\u793a 16 x[index]\u3001x[index1:index2]\u3001f(args...)\u3001x.attribute \u5143\u7d20\u8bbf\u95ee\u3001\u5207\u7247\u3001\u51fd\u6570\u8c03\u7528\u3001\u5c5e\u6027\u5f15\u7528 15 ** \u5e42\u8fd0\u7b97 14 ~ \u6309\u4f4d\u6c42\u8865 13 *\u3001/\u3001//\u3001%\u3001@ \u4e58\u3001\u9664\u3001\u53d6\u6574\u3001\u53d6\u6a21 12 +\u3001- \u52a0\u3001\u51cf 11 <<\u3001>> \u5de6\u79fb\u4f4d\u3001\u53f3\u79fb\u4f4d 10 & \u6309\u4f4d\u4e0e 9 ^ \u6309\u4f4d\u5f02\u6216 8 | \u6309\u4f4d\u6216 7 <\u3001<=\u3001>\u3001>=\u3001==\u3001!= \u6bd4\u8f83\u8fd0\u7b97\u7b26 6 is\u3001is not \u8eab\u4efd\u8fd0\u7b97\u7b26 6 in\u3001not in \u6210\u5458\u8fd0\u7b97\u7b26 6 not \u903b\u8f91\u8fd0\u7b97\u7b26 5 and \u903b\u8f91\u8fd0\u7b97\u7b26 4 or \u903b\u8f91\u8fd0\u7b97\u7b26 3 if - else \u6761\u4ef6\u8868\u8fbe\u5f0f 2 lambda Lambda \u8868\u8fbe\u5f0f 1 If something is established on \" common sense ,\" there is no need to over - entangle . \u21a9 \u5305\u62ec\u51fd\u6570\u3001\u7c7b\u7684\u5b9a\u4e49\u3002 \u21a9 \u76ee\u524dPython\u7684\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u5b57\u5178\u5b9e\u73b0\uff0c\u4f46\u65e5\u540e\u53ef\u80fd\u4f1a\u6539\u53d8\u3002 \u21a9 \u73b0\u5728\u7684\u8ba1\u7b97\u673a\u5f88\u591a\u90fd\u4e0d\u5e26\u8702\u9e23\u5668\u4e86\uff0c\u6240\u4ee5\u54cd\u94c3\u4e0d\u4e00\u5b9a\u6709\u6548\u3002 \u21a9 \u8fd9\u4e9b\u65b9\u6cd5\u53ef\u89c6\u4e3a CPU \u7684\u62bd\u8c61\u3002 \u21a9","title":"2.1.Python\u57fa\u672c\u8bed\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_1","text":"Python\u662f\u4e00\u79cd\u89e3\u91ca\u578b\u8bed\u8a00\uff0cPython\u89e3\u91ca\u5668\u901a\u8fc7\u4e00\u6b21\u6267\u884c\u4e00\u6761\u8bed\u53e5\u7684\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u3002\u4ece tty\uff08\u7ec8\u7aef\uff09 \u8bfb\u53d6\u547d\u4ee4\u65f6, \u6211\u4eec\u79f0\u89e3\u91ca\u5668\u5de5\u4f5c\u4e8e\u4ea4\u4e92\u6a21\u5f0f (interactive mode)\u3002\u6240\u8c13\u7684\u4ea4\u4e92\u6a21\u5f0f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u5728\u7ec8\u7aef\u8f93\u5165\u7684Python\u8bed\u53e5\u4f1a\u7acb\u5373\u88ab\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u7ec8\u7aef\u663e\u793a\u63d0\u793a\u7b26\u3002\u7b49\u5f85\u4e0b\u4e00\u6b21\u547d\u4ee4\u7684\u8f93\u5165\u3002\u53ef\u4ee5\u5728cmd\u7a97\u53e3\u901a\u8fc7 python \u547d\u4ee4\u542f\u52a8CPython\u89e3\u91ca\u5668\u7684\u4ea4\u4e92\u6a21\u5f0f\uff0c\u4ea4\u4e92\u6a21\u5f0f\u4e0bCPython\u901a\u8fc7\u4e3b\u63d0\u793a\u7b26 (primary prompt) >>> \u63d0\u793a\u4e0b\u4e00\u6761\u547d\u4ee4\uff0c\u800c\u4ece\u63d0\u793a\u7b26 \u00b7\u00b7\u00b7 \u63d0\u793a\u4e00\u6761\u547d\u4ee4\u7684\u7eed\u884c\u3002 \u52a0\u5f3a\u7684\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668(IPython)\u7684\u63d0\u793a\u7b26\u662f\u4e00\u79cd\u5e26\u7f16\u53f7\u7684\u98ce\u683c\uff0c\u5982 In[2] \uff0c\u800c\u4e0d\u662f\u6807\u51c6\u7684 >>> \u3002","title":"\u4ea4\u4e92\u6a21\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_2","text":"\u4fdd\u7559\u5b57\uff08\u53c8\u79f0\u4e3a\u5173\u952e\u5b57\uff09\uff0c \u4e0d\u80fd\u628a\u5b83\u4eec\u7528\u4f5c\u4efb\u4f55\u6807\u8bc6\u7b26\u540d\u79f0 \u3002Python\u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2akeyword\u6a21\u5757\uff0c\u53ef\u4ee5\u8f93\u51fa\u5f53\u524d\u7248\u672c\u7684\u6240\u6709\u5173\u952e\u5b57\uff1a import keyword print ( keyword . kwlist ) ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']","title":"\u4fdd\u7559\u5b57"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_3","text":"Python \u7684\u6807\u8bc6\u7b26\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\uff0c\u7531\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u548c\u6570\u5b57\u7ec4\u6210\uff0c\u4e14\u5f00\u5934\u4e0d\u80fd\u662f\u6570\u5b57\u3002 \u54ea\u4e9b\u5b57\u6bcd\u53ef\u7528\u4f5c\u6807\u8bc6\u7b26\uff1f \u5bf9\u4e8e Python 3 \u6765\u8bf4\uff0c\u8fd9\u91cc\u7684\u5b57\u6bcd\u5b9e\u9645\u4e0a\u4e0d\u9650\u4e8e\u82f1\u6587\u5b57\u6bcd\uff0c\u4e5f\u53ef\u4ee5\u662f\u975eASCII\u7801\u7684\u5b57\u6bcd\uff0c\u4f8b\u5982\u5e0c\u814a\u5b57\u6bcd\u3001\u897f\u91cc\u5c14\u5b57\u6bcd\u3001\u6c49\u5b57\u7b49\u7b49\uff0c\u53c2\u89c1 PEP 3131\u3002\u4f46 Python 2 \u53ea\u652f\u6301\u82f1\u6587\u5b57\u6bcd\uff0c\u81f3\u5c11 Python 2 \u7684 CPython \u5b9e\u73b0\u662f\u8fd9\u6837\u3002\u5176\u4ed6\u7684 Python 2 \u5b9e\u73b0\u6709\u53ef\u80fd\u4e5f\u652f\u6301\u975eASCII\u5b57\u7b26\u4f5c\u4e3a\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982 IronPython\u3002 \u4e3a\u4ec0\u4e48\u6807\u8bc6\u7b26\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff1f \u5982\u679c\u6807\u8bc6\u7b26\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u90a3\u4e48\u50cf\"0o10\"\u3001\"1e5\"\u8fd9\u6837\u7684\u4ee3\u7801\u5c31\u4f1a\u5e26\u6765\u6b67\u4e49\uff0c\u751a\u81f3\u5bf9\u4e8e\"123\"\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u673a\u5668\u4e5f\u65e0\u6cd5\u786e\u5b9a\u8fd9\u5230\u5e95\u662f\u6570\u5b57\u8fd8\u662f\u6807\u8bc6\u7b26\u3002\u5f53\u7136\u53ef\u4ee5\u901a\u8fc7\u8ffd\u52a0\u89c4\u5219\u6765\u6d88\u9664\u6b67\u4e49\uff0c\u4f8b\u5982\u89c4\u5b9a\u53d8\u91cf\u8d4b\u503c\u65f6\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\u662f\u6807\u5fd7\u7b26\u3002\u4f46\u5982\u679c\u771f\u7684\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u4ee3\u7801\u5fc5\u5b9a\u4f1a\u5b58\u5728\u5b89\u5168\u6027\u95ee\u9898\uff0c\u4f8b\u5982\"1e5\"\u5728\u524d\u9762\u5df2\u7ecf\u7528\u4f5c\u53d8\u91cf\u540d\u4e86\uff0c\u5728\u540e\u9762\u53c8\u60f3\u4f7f\u7528\"1e5\"\u8fd9\u4e2a\u6570\u5b57\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u65e2\u7136\u9700\u8981\u901a\u8fc7\u8ffd\u52a0\u89c4\u5219\u6765\u6d88\u9664\u6b67\u4e49\uff0c\u90a3\u76f4\u63a5\u89c4\u5b9a\u6570\u5b57\u4e0d\u80fd\u7528\u4e8e\u5f00\u5934\u4e0d\u5c31\u597d\u4e86\uff0c\u6bd5\u7adf\u6570\u5b57\u4f5c\u4e3a\u6807\u8bc6\u7b26\u7684\u5f00\u5934\u597d\u50cf\u6ca1\u4ec0\u4e48\u5fc5\u8981\u3002 \u8fd9\u4f1a\u8ba9\u7f16\u8bd1\u5668\u7684\u8bcd\u6cd5\u5206\u6790\u66f4\u52a0\u590d\u6742\uff0c\u4ece\u800c\u964d\u4f4e\u7f16\u8bd1\u5668\u7684\u6027\u80fd\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u90a3\u4e48\u8bcd\u6cd5\u5206\u6790\u5668\u5c31\u5fc5\u987b\u5728\u9047\u5230\u7b2c\u4e00\u4e2a\u6216\u7b2c\u4e8c\u4e2a\u82f1\u6587\u5b57\u7b26\u7684\u65f6\u5019\u8fdb\u884c\u56de\u6eaf\uff0c\u4ee5\u786e\u5b9a\u662f\u5426\u4e3a\u6570\u5b57\u3002 \u5b9e\u9645\u4e0a\uff0c\u6709\u4e9b\u8bed\u8a00\u5141\u8bb8\u6807\u8bc6\u7b26\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u4f46\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u4f8b\u5982 Common Lisp\u3002 Python \u4e60\u60ef\u4e8e\u4f7f\u7528 \u86c7\u5f62\u547d\u540d\u6cd5 \uff08snake case\uff09\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u7c7b\u540d\u63a8\u8350\u4f7f\u7528\u9a7c\u5cf0\u547d\u540d\u6cd5\uff0c\u800c\u5bf9\u4e8e\u666e\u901a\u53d8\u91cf\u540d\u3001\u51fd\u6570\u540d\u3001\u6a21\u5757\u540d\u3001\u5305\u540d\uff0c\u5219\u63a8\u8350\u4f7f\u7528\u86c7\u5f62\u547d\u540d\u6cd5\u3002 \u81f3\u4e8e Python \u4e3a\u4ec0\u4e48\u504f\u7231\u86c7\u5f62\u547d\u540d\u6cd5\uff0c\u6700\u53ef\u80fd\u7684\u539f\u56e0\u662f\u501f\u9274\u4e86 C \u8bed\u8a00\u7684\u89c4\u8303\u3002\u86c7\u5f62\u547d\u540d\u6cd5\u8d77\u6e90\u4e8e 1960 \u5e74\u4ee3\u540e\u671f\uff0c\u5b83\u4e0e C \u8bed\u8a00\u5173\u7cfb\u5bc6\u5207\uff0c The C Programming Language \u7684 2.1 \u8282\u4e2d\u5c31\u6709\u63d0\u5230\u4f7f\u7528\u4e0b\u5212\u7ebf\u53ef\u4ee5\u63d0\u9ad8\u957f\u53d8\u91cf\u540d\u7684\u53ef\u8bfb\u6027\u3002\u4e00\u5f00\u59cb\uff0c\u86c7\u5f62\u547d\u540d\u6cd5\u5e76\u6ca1\u6709\u5982\u4eca\u7279\u5b9a\u7684\u540d\u79f0\u3002Python \u4ece C \u8bed\u8a00\u4e2d\u501f\u9274\u8fc7\u6765\u540e\uff0c\u5728 PEP 8 \u4e2d\u5c06\u5176\u7b80\u79f0\u4e3a \"lower_case_with_underscores\"\u3002\u76f4\u5230 21 \u4e16\u7eaa\u521d\uff0c\u5728 Intel \u548c Ruby \u793e\u533a\u4e2d\uff0c\u624d\u6709\u4eba\u5f00\u59cb\u4ee5 \"snake case\" \u6765\u79f0\u547c\u5b83\u3002 \u73b0\u4eca\u6709\u4e0d\u5c11\u7f16\u7a0b\u8bed\u8a00\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4f1a\u63a8\u8350\u4f7f\u7528\u86c7\u5f62\u547d\u540d\u6cd5\uff0c\u5305\u62ecR\u8bed\u8a00\uff0c\u800c Python \u5219\u662f\u6700\u65e9\u8fd9\u4e48\u505a\u7684\u5176\u4e2d\u4e4b\u4e00\uff0c\u5e76\u4e14\u662f\u4f7f\u7528 snake case \u573a\u666f\u6700\u591a\u7684\u8bed\u8a00\u4e4b\u4e00\u3002","title":"\u53d8\u91cf\u547d\u540d\u89c4\u5219"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_4","text":"\u7f16\u7a0b\u8bed\u8a00\u7684\u6ce8\u91ca\u7b26\u4e00\u822c\u6709\u4e24\u79cd\uff1a\u884c\u6ce8\u91ca\u4e0e\u5757\u6ce8\u91ca\uff08inline/block\uff09\u3002\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cC\u8bed\u8a00\u5bb6\u65cf\u9009\u62e9 \\\\ \u4f5c\u4e3a\u884c\u6ce8\u91ca\u7b26\uff0c\u800c\u811a\u672c\u8bed\u8a00\uff08\u5982shell\uff09\u5927\u591a\u4f7f\u7528 # \u4f5c\u4e3a\u884c\u6ce8\u91ca\u7b26\u3002Python \u6cbf\u7528\u4e86\u811a\u672c\u8bed\u8a00\u7684\u4f20\u7edf\uff0c\u5355\u884c\u6ce8\u91ca\u4ee5 # \u5f00\u5934\uff0c\u5e76\u4ee5\u7269\u7406\u884c\u7684\u672b\u5c3e\u7ed3\u675f\u3002 # \u8fd9\u662f\u5355\u884c\u6ce8\u91ca Python \u5e76\u6ca1\u6709\u5757\u6ce8\u91ca\u7b26\uff0c\u56e0\u6b64\uff0c\u6709\u65f6\u591a\u884c\u5b57\u7b26\u4e32\u4f1a\u88ab\u7528\u4f5c\u5757\u6ce8\u91ca\u3002 \"\"\" \u8fd9\u662f\u591a\u884c\u6ce8\u91ca \u8fd9\u662f\u591a\u884c\u6ce8\u91ca \"\"\" \u867d\u7136\u591a\u884c\u5b57\u7b26\u4e32\u7528\u4e8e\u591a\u884c\u6ce8\u91ca\u65f6\uff0cPython \u89e3\u91ca\u5668\u5e76\u4e0d\u4f1a\u4e3a\u6b64\u751f\u6210\u4ee3\u7801\uff08\u591a\u884c\u6ce8\u91ca\u4f5c\u4e3a\u6587\u6863\u5b57\u7b26\u4e32\u65f6\u9664\u5916\uff09\uff0c\u4e5f\u6ca1\u6709\u8d1f\u4f5c\u7528\uff08negative effects\uff09\uff0c\u4f46\u8fd9\u5374\u662f\u4e00\u79cd\u526f\u4f5c\u7528\uff08side effects\uff09\u3002\u57fa\u4e8e\u6b64\uff0cPEP-8 \u5efa\u8bae\u591a\u884c\u6ce8\u91ca\u5747\u4ee5 # \u53f7\u548c\u7a7a\u683c\u5f00\u5934\uff1a Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment).","title":"\u6ce8\u91ca"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_5","text":"\u4f4d\u4e8e\u903b\u8f91\u884c\u5f00\u59cb\u524d\u7684\u7a7a\u767d\uff08\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff09\u7528\u4e8e\u8ba1\u7b97\u884c\u7684\u7f29\u8fdb\u5c42\u6b21\uff0c\u8be5\u5c42\u6b21\u7528\u4e8e\u8bed\u53e5\u7684\u5206\u7ec4\u3002\u4e0d\u80fd\u4f7f\u7528 \\ \u8fde\u63a5\u4e24\u4e2a\u7269\u7406\u884c\u7684\u7f29\u8fdb\u3002 \u76f8\u540c\u5c42\u6b21\u7684\u4ee3\u7801\u5fc5\u987b\u4fdd\u6301\u76f8\u540c\u7684\u7f29\u8fdb\u91cf\uff0c\u7f29\u8fdb\u91cf\u5219\u53ef\u4ee5\u968f\u610f\u3002 \u5f53\u6e90\u7801\u6587\u4ef6\u6df7\u7528\u5236\u8868\u7b26\u548c\u7a7a\u683c\u65f6\uff0c\u8fd0\u884c\u65f6\u4f1a\u89e6\u53d1 TabError \u3002 \u7531\u4e8e\u975eUnix\u5e73\u53f0\u7684\u6587\u672c\u7f16\u8f91\u5668\u7684\u7279\u6027\uff0c\u6700\u597d \u4e0d\u8981\u7528\u5236\u8868\u7b26\u8868\u793a\u7f29\u8fdb \u3002 \u4e00\u822c\u7ea6\u5b9a\u4fd7\u6210\u4f7f\u75284\u4e2a\u7a7a\u683c\u7684\u7f29\u8fdb\u3002 input if True : print ( \"True\" ) else : print ( \"False\" ) output True \u4f7f\u7528\u7f29\u8fdb\u5212\u5206\u4ee3\u7801\u5757\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5927\u62ec\u53f7 {} \uff0c\u662f Python \u6700\u5177\u7279\u8272\u7684\u5730\u65b9\uff0c\u4f46\u8fd9\u4e5f\u662f Python \u65f6\u5e38\u88ab\u8bdf\u75c5\u7684\u5730\u65b9\u3002 \u4e00\u65b9\u9762\uff0c\u5f53\u4ee3\u7801\u5f88\u957f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u4e0d\u5c0f\u5fc3\u5f04\u9519\u90e8\u5206\u884c\u7684\u7f29\u8fdb\u5c42\u7ea7\u3002\u4f46\u5f88\u957f\u7684\u4ee3\u7801\u5757\u672c\u8eab\u5c31\u6709\u574f\u4ee3\u7801\u7684\u5473\u9053\uff0c\u8fd9\u964d\u4f4e\u4e86\u53ef\u8bfb\u6027\uff0c\u5e76\u6697\u793a\u4e86\u4ee3\u7801\u53ef\u80fd\u5b58\u5728\u8fc7\u5ea6\u7684\u8026\u5408\uff0c\u8fd9\u662f\u8981\u5c3d\u91cf\u907f\u514d\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4ee3\u7801\u662f\u4ece\u7f51\u4e0a\u590d\u5236\u7684\uff0c\u7c98\u8d34\u5230\u6e90\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5236\u8868\u7b26\u548c\u7a7a\u683c\u6df7\u7528\uff0c\u6216\u8005\u4e22\u5931\u7f29\u8fdb\u683c\u5f0f\u3002\u5982\u679c\u5927\u5bb6\u90fd\u4e0d\u9002\u7528\u5236\u8868\u7b26\u8868\u793a\u7f29\u8fdb\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u4e22\u5931\u7f29\u8fdb\u683c\u5f0f\u786e\u5b9e\u65e0\u6cd5\u81ea\u52a8\u8fd8\u539f\u4ee3\u7801\u3002","title":"\u7f29\u8fdb"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_6","text":"\u975e\u6b63\u5f0f\u5730\uff0c\u7b80\u5355\u8bed\u53e5\u5fc5\u987b\u5728\u5355\u4e2a\u903b\u8f91\u884c\u4e0a\u5b8c\u6210\u3002\u591a\u6761\u7b80\u5355\u8bed\u53e5\u53ef\u4ee5\u5b58\u5728\u540c\u4e00\u903b\u8f91\u884c\u5185\uff0c\u5e76\u4ee5\u534a\u89d2\u5206\u53f7 ; \u5206\u9694\u3002\u4e00\u822c\u4e0d\u63a8\u8350\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u964d\u4f4e\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002","title":"\u8bed\u53e5\u5206\u9694\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_7","text":"\u867d\u7136 Python \u5c06 ; \u4f5c\u4e3a\u8bed\u53e5\u5206\u9694\u7b26\uff0c\u4f46\u4f7f\u7528 \\newline token \u4f5c\u4e3a\u8bed\u53e5\u7ec8\u6b62\u7b26\u3002 \\newline token \u53ef\u4ee5\u7406\u89e3\u4e3a\u5404\u4e2a\u7cfb\u7edf\u5408\u6cd5\u7684\u5e8f\u5217\u7ec8\u6b62\u7b26\uff08\u4f8b\u5982 \\n \u3001 \\r\\n \u7b49\uff09\uff0c\u4e25\u683c\u6765\u8bf4\uff0c\u8fd8\u5305\u62ec\u7ec8\u6b62\u7b26\u524d\u9762\u7684\u7a7a\u683c\u3002\u53e6\u5916\uff0c\u6ce8\u91ca\u4e5f\u8868\u793a\u903b\u8f91\u884c\u7684\u7ed3\u675f\u3002\u56e0\u6b64\uff0c\u6362\u884c\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 \u53e6\u5916\uff0c \\newline \u4e5f\u662f\u903b\u8f91\u884c\u7684\u7ed3\u5c3e\u6807\u8bb0\uff0c\u7b80\u5355\u8bed\u53e5\u4e0d\u80fd\u8d8a\u8fc7\u903b\u8f91\u884c\u7684\u8fb9\u754c\uff0c\u5373\u4e0d\u80fd\u5c06 \\newline \u5305\u542b\u5176\u4e2d\u3002\u56e0\u6b64\uff0c\u5f53\u7b80\u5355\u8bed\u53e5\u9700\u8981\u8de8\u8d8a\u591a\u4e2a\u7269\u7406\u884c\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26 \\ \u5bf9\u5176\u4e2d\u7684 \\newline \u8fdb\u884c\u8f6c\u4e49\uff0c\u8fd9\u79f0\u4e3a \u663e\u5f0f\u884c\u8fde\u63a5\uff08Explicit line joining\uff09 \uff1a a = 3 + \\ 4 + \\ 5 a 12 \u5f53 \\ \u7528\u4e8e\u7eed\u884c\u65f6\uff0c\u53ef\u80fd\u4f1a\u88ab\u79f0\u4e3a\u7eed\u884c\u7b26\uff0c\u4f46\u5982\u4e0a\u6240\u8ff0\uff0c \\ \u672c\u8d28\u4e0a\u662f\u8f6c\u4e49\u7b26\u3002\u56e0\u6b64\uff0c \\ \u7528\u4e8e\u4ee3\u7801\u7eed\u884c\u65f6\uff0c\u53cd\u659c\u6760\u540e\u9762\u4e0d\u80fd\u5e26\u6709\u6ce8\u91ca\uff0c\u6216\u5176\u4ed6\u5b57\u7b26\uff08\u9664\u975e \\ \u4f4d\u4e8estring literal\u4e4b\u4e2d\uff09\u3002 [] , {} , \u6216 () 2 \u4e4b\u4e2d\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a\u7269\u7406\u884c\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26 \\ \uff0c\u8fd9\u79f0\u4e3a \u9690\u5f0f\u884c\u8fde\u63a5\uff08Implicit line joining\uff09 \u3002\u4f8b\u5982\uff1a total = [ 'item_one' , 'item_two' , 'item_three' , # comment 'item_four' , 'item_five' ] total ['item_one', 'item_two', 'item_three', 'item_four', 'item_five'] \u9690\u5f0f\u7684\u8fde\u7eed\u884c\u53ef\u4ee5\u5e26\u6709\u5e26\u6709\u6ce8\u91ca\uff0c\u4ee3\u7801\u7684\u7f29\u8fdb\u4e5f\u4e0d\u662f\u8bed\u6cd5\u4e0a\u5fc5\u987b\u7684\uff0c\u8fd8\u5141\u8bb8\u5176\u4e2d\u5305\u62ec\u7a7a\u884c\u3002\u867d\u7136\u9690\u5f0f\u8fde\u7eed\u884c\u5b58\u5728\u6362\u884c\uff0c\u4f46\u5176\u4e2d\u5e76\u4e0d\u5305\u62ec \\newline token\u3002\u53e6\u5916\uff0c\u9690\u5f0f\u884c\u8fde\u63a5\u4e5f\u53ef\u4ee5\u51fa\u73b0\u5728\u591a\u884c\u5b57\u7b26\u4e32\u4e4b\u4e2d\uff0c\u6b64\u65f6\u4e0d\u80fd\u5e26\u6709\u6ce8\u91ca\u3002","title":"\u7eed\u884c\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_8","text":"\u7a7a\u884c\u4e0e\u7f29\u8fdb\u4e0d\u540c\uff0c \u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 \u4ec5\u5305\u542b\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u9875\u7b26\u548c\u6ce8\u91ca\u7684\u903b\u8f91\u884c\u5c06\u88ab\u5ffd\u7565\uff0c\u5373\u4e0d\u751f\u6210 \\newline token\u3002\u4ee3\u7801\u6587\u4ef6\u4e2d\u4e0d\u5b58\u5728\u7a7a\u884c\uff0c\u8fd0\u884c\u65f6\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u4f46\u7a7a\u884c\u53ef\u7528\u4e8e\u5206\u9694\u4e24\u6bb5\u4e0d\u540c\u529f\u80fd\u6216\u542b\u4e49\u7684\u4ee3\u7801\uff0c\u8ba9\u4ee3\u7801\u7ed3\u6784\u770b\u8d77\u6765\u66f4\u6e05\u6670\uff0c\u4fbf\u4e8e\u7ef4\u62a4\u6216\u91cd\u6784\u3002\u6839\u636e PEP8 \u89c4\u8303\uff0c\u7c7b\u65b9\u6cd5\u4e4b\u95f4\u7528 1 \u884c\u7a7a\u884c\u5206\u9694\uff0c\u9876\u7ea7\u51fd\u6570\u3001\u7c7b\u4e4b\u95f4\u7528 2 \u884c\u7a7a\u884c\u5206\u9694\u3002 \u5728\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u4e2d\uff0c\u7531\u4e8e\u9700\u8981\u5b9e\u73b0 read-eval-print loop\uff0c\u7a7a\u884c\u7684\u5904\u7406\u53ef\u80fd\u6709\u6240\u4e0d\u540c\u3002\u5728\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u8f93\u5165\u4ee3\u7801\u5757\u65f6\uff0c\u4e00\u4e2a\u5b8c\u5168\u7a7a\u767d\u7684\u7a7a\u884c\u7528\u4e8e\u7ec8\u6b62\u591a\u884c\u8bed\u53e5\u3002 In [ 1 ]: for i in range ( 2 ): ... : print ( i ) ... : 0 1","title":"\u7a7a\u884c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#print","text":"print \u51fd\u6570\u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u8f93\u51fa\u5230 STDOUT\uff0c\u5e76\u4e14\u9ed8\u8ba4\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u6dfb\u52a0\u6362\u884c\u7b26\u3002\u5982\u679c\u4e0d\u60f3\u6362\u884c\u6253\u5370\uff0c\u9700\u8981\u66f4\u6539 print \u51fd\u6570\u7684 end \u53c2\u6570\uff1a \u6362\u884c\u6253\u5370 print ( \"a\" ) print ( \"b\" ) a b \u4e0d\u6362\u884c\u6253\u5370 print ( \"a\" , end = \" \" ) print ( \"b\" , end = \" \" ) a b \u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4ea7\u751f\u591a\u79cd\u8f93\u51fa\u3002\u867d\u7136 print \u51fd\u6570\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u5f0f\uff0c\u4f46\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u6280\u672f\u6765\u4ee3\u66ff\u5b83\uff1a \u57fa\u4e8e\u6587\u672c\u683c\u5f0f\u7684\u6587\u4ef6\u3002\u901a\u5e38\u4f7f\u7528 print \u51fd\u6570\u4e5f\u53ef\u4ee5\u5b8c\u6210\u3002 PDF \u6216\u5176\u4ed6\u683c\u5f0f\u7684\u8f93\u51fa\u6587\u4ef6\u3002\u8fd9\u5c06\u9700\u8981\u4f7f\u7528\u5176\u4ed6 Python \u5e93\u6765\u751f\u6210\u8fd9\u4e9b\u683c\u5f0f\u3002 \u9519\u8bef\u6d88\u606f\u3001\u8c03\u5f0f\u6d88\u606f\u548c\u65e5\u5fd7\u6587\u4ef6\u3002\u901a\u5e38\u4f7f\u7528 logging \u6a21\u5757\uff0c\u5076\u5c14\u4f7f\u7528 print \u51fd\u6570\u3002","title":"Print \u8f93\u51fa"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_9","text":"Python \u4f7f\u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\uff08module\uff09\u3002 import somemodule \u5bfc\u5165\u6574\u4e2a\u6a21\u5757 from somemodule import somefunction \u5bfc\u5165\u67d0\u4e2a\u6a21\u5757\u7684\u67d0\u4e2a\u51fd\u6570 from somemodule import func_1, func_2, class_1 \u5bfc\u5165\u67d0\u4e2a\u6a21\u5757\u7684\u591a\u4e2a\u51fd\u6570\u6216\u7c7b from somemodule import * \u5bfc\u5165\u67d0\u4e2a\u6a21\u5757\u7684\u5168\u90e8\u5b9a\u4e49","title":"\u5bfc\u5165\u6a21\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_10","text":"\u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\uff08\u8fd9\u4e9b\u5b57\u7b26\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u4e0d\u80fd\u901a\u8fc7\u952e\u76d8\u76f4\u63a5\u8f93\u5165\uff09\uff0c\u8fd9\u5c31\u9700\u8981\u201c\u8f6c\u4e49\u7b26\u201d\u3002\u6240\u8c13\u8f6c\u4e49\uff0c\u5c31\u662f\u4e0d\u91c7\u7528\u7b26\u53f7\u539f\u5148\u7684\u542b\u4e49\uff08\u5b57\u9762\u542b\u4e49\uff09\uff0c\u800c\u91c7\u7528\u53e6\u5916\u4e00\u542b\u4e49\u3002\u5728Pyhton\u4e2d\uff0c \\ \u4ee3\u8868\u8f6c\u4e49\u7b26\u3002 \u9664\u975e\u5b58\u5728 r \u524d\u7f00\uff0c\u5426\u5219\u5c06\u6839\u636e\u7c7b\u4f3c\u4e8e\u6807\u51c6C\u7684\u89c4\u5219\u6765\u89e3\u91ca string literals \u548c bytes literals \u4e2d\u7684\u8f6c\u4e49\u5e8f\u5217\u3002\u4ee5\u4e0b\u662fPython\u53ef\u8bc6\u522b\u7684\u8f6c\u4e49\u5e8f\u5217\uff1a \u8f6c\u4e49\u5e8f\u5217 \u63cf\u8ff0 \u8f6c\u4e49\u5e8f\u5217 \u63cf\u8ff0 \\newline \u53cd\u659c\u6760\u548c\u6362\u884c\u7b26\u5c06\u88ab\u5ffd\u7565 \\v \u7eb5\u5411\u5236\u8868\u7b26 \\\\ \u53cd\u659c\u6760 \\t \u6a2a\u5411\u5236\u8868\u7b26 \\' \u5355\u5f15\u53f7 \\r \u56de\u8f66\u7b26 \\\" \u53cc\u5f15\u53f7 \\f \u6362\u9875\u7b26 \\a \u8702\u9e23\u5668\u54cd\u94c3 4 \\ooo \u516b\u8fdb\u5236\u503c\u4e3a ooo \u7684\u5b57\u7b26\uff0c\u5982 \\012 \u8868\u793a\u6362\u884c\uff0c \\000 \u4e3a\u7a7a\u5b57\u7b26 \\b \u9000\u683c \\xhh \u5341\u516d\u8fdb\u5236\u503c\u4e3a hh \u5b57\u7b26\uff0c\u5982 \\x0a \u8868\u793a\u6362\u884c \\n \u6362\u884c\u7b26 \u4ec5\u5728 string literals \u4e2d\u624d\u80fd\u88ab\u8bc6\u522b\u7684\u8f6c\u4e49\u5e8f\u5217\u4e3a\uff1a \u8f6c\u4e49\u5e8f\u5217 \u63cf\u8ff0 \\N{name} Character named name in the Unicode database \\uxxxx Character with 16-bit hex value xxxx \\Uxxxxxxxx Character with 32-bit hex value xxxxxxxx Python\u9ed8\u8ba4\u5c06 \\ \u4f5c\u4e3a\u8f6c\u4e49\u7b26\u5904\u7406\uff0c\u4f46\u6709\u65f6\u5019\u6211\u4eec\u60f3\u8f93\u5165\u7684\u662f\u53cd\u659c\u6760\u7b26\u53f7 \\ \uff0c\u4f8b\u5982\u8f93\u5165 windows \u7cfb\u7edf\u7684\u6587\u4ef6\u8def\u5f84\u3002\u6b64\u65f6\uff0c\u53ef\u4ee5\u5728\u53cd\u659c\u6760\u524d\u52a0\u4e0a\u8f6c\u4e49\u7b26 \\ \uff0c\u5373 \\\\ \u8868\u793a\u4e00\u4e2a\u53cd\u659c\u6760\u7b26\u53f7\u3002\u5982\u679c\u5b57\u7b26\u4e32\u5305\u542b\u4e86\u5f88\u591a\u53cd\u659c\u6760 \\ \uff0c\u8fd9\u6837\u505a\u5c31\u6bd4\u8f83\u9ebb\u70e6\u3002Python\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5316\u7684\u64cd\u4f5c\uff0cPyhon\u5141\u8bb8\u7528 r\"\u5b57\u7b26\u4e32\u5185\u5bb9\" \u8868\u793a \"\u5b57\u7b26\u4e32\u5185\u5bb9\" \u5185\u90e8\u7684\u5b57\u7b26\u9ed8\u8ba4\u4e0d\u8f6c\u4e49\uff1a Normal String Literal print ( ' \\\\\\t\\\\ ' ) \\ \\ Raw String Literal print ( r ' \\\\ \\t \\\\ ' ) \\\\\\t\\\\","title":"\u5b57\u7b26\u8f6c\u4e49"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_11","text":"\u4e0d\u6b63\u5f0f\u5730\uff0c\u7f16\u7a0b\u7684\u672c\u8d28\u5728\u4e8e\u64cd\u7eb5\u8ba1\u7b97\u673a\u7684 CPU \u548c RAM\u3002\u7f16\u7a0b\u8bed\u8a00\u672c\u8eab\u5c31\u662f CPU \u6307\u4ee4\u96c6\u7684\u62bd\u8c61\uff0c\u5b83\u4eec\u90fd\u63d0\u4f9b\u4e86\u5404\u81ea\u64cd\u4f5c\u5185\u5b58\u4e2d\u5143\u7d20\u7684\u65b9\u5f0f\u3002\u4e00\u822c\uff0c\u5728\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7\u64cd\u7eb5 \u53d8\u91cf \u53bb\u64cd\u7eb5\u5185\u5b58\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u64cd\u7eb5\u5185\u5b58\u5730\u5740\uff0c\u56e0\u4e3a\u53d8\u91cf\u5c31\u4ee3\u8868\u4e86\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\u3002\u5982\u679c\u662f OOP \u8303\u5f0f\u7684\u8bed\u8a00\uff0c\u53d8\u91cf\u5173\u8054\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c31\u662f\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u5373\u5bf9\u8c61\u4f5c\u4e3a\u5185\u5b58\u7a7a\u95f4\u7684\u62bd\u8c61\u3002\u5bf9\u8c61\u57fa\u4e8e\u7c7b\u521b\u5efa\uff0c\u7c7b\u5b9a\u4e49\u4e86\u8be5\u7c7b\u578b\u7684\u5bf9\u8c61\u9700\u8981\u5360\u7528\u591a\u5c11\u5185\u5b58\u7a7a\u95f4\uff0c\u50a8\u5b58\u5728\u5bf9\u8c61\u4e2d\u7684\u503c\u8be5\u5982\u4f55\u89e3\u91ca\uff0c\u4ee5\u53ca\u6709\u54ea\u4e9b\u65b9\u6cd5 5 \u53ef\u4ee5\u7528\u6765\u64cd\u7eb5\u8be5\u5bf9\u8c61\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u7c7b\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6a21\u677f\uff0c\u5177\u6709\u76f8\u540c\u7ed3\u6784\u4ee5\u53ca\u76f8\u4f3c\u5904\u7406\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u677f\u3002 Python \u5b98\u65b9\u6587\u6863\u4f3c\u4e4e\u66f4\u559c\u6b22\u628a\u53d8\u91cf\u79f0\u4e3a name\uff08\u540d\u5b57\uff09\u3002\u540c\u65f6\uff0c\u53c8\u56e0\u4e3a Python \u4e2d\u7684\u53d8\u91cf\u540d\u5bf9\u5e94\u7684\u53d8\u91cf\u7c7b\u578b\u662f\u53ef\u4ee5\u968f\u65f6\u6539\u53d8\u7684\uff0c\u56e0\u6b64\u6709\u89c2\u70b9\u8ba4\u4e3a Python \u4e0d\u5b58\u5728\u53d8\u91cf\u8fd9\u4e2a\u6982\u5ff5\u3002\u4f46\u8fd9\u6837\u7684\u89c2\u70b9\u662f\u8352\u8c2c\u7684\uff0c\u5c31\u50cf\u5728\u8bf4\u56e0\u4e3a\u718a\u732b\u53eb\u505a\u718a\u732b\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u718a\uff0c\u56e0\u4e3a\u9e35\u9e1f\u4e0d\u4f1a\u98de\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u9e1f\u3002Python \u7684 name \u5c31\u662f\u53d8\u91cf\uff0c\u53ea\u4e0d\u8fc7 Python \u53d8\u91cf\u7684\u884c\u4e3a\u548c C\u3001C++\u3001Java \u8fd9\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6709\u6240\u533a\u522b\u800c\u5df2\u3002\u5bf9\u4e8e\u6b64\u95ee\u9898\u7684\u5177\u4f53\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003\u300a 1.3.\u57fa\u672c\u6982\u5ff5 \u300b\u7684 \u7b2c3\u8282 \u3002\u5728\u672c\u7cfb\u5217\u7684\u6587\u7ae0\u4e2d\uff0c \u53d8\u91cf \u548c \u540d\u5b57\uff08name\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\uff1b \u53d8\u91cf\u503c\uff08\u53d8\u91cf\u7684\u503c\uff09 \u548c \u5bf9\u8c61\uff08object\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\u3002 Python\u7684\u53d8\u91cf\u4e0d\u9700\u8981\u58f0\u660e\u3001\u5b9a\u4e49\u548c\u521d\u59cb\u5316\uff0c\u53d8\u91cf\u4f1a\u5728\u8d4b\u503c\u65f6\u88ab\u521b\u5efa\u3002\u7f16\u8bd1\u5668\u6216\u89e3\u6790\u5668\u4e0d\u4f1a\u9759\u6001\u68c0\u67e5\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u53d8\u91cf\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\uff0c\u4f8b\u5982\u4f7f\u7528 isinstance \u51fd\u6570\u3002","title":"\u53d8\u91cf\u4e0e\u5bf9\u8c61"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#objects","text":"\u6240\u6709 Python \u5bf9\u8c61\u90fd\u6709\uff1a \u4e00\u4e2a\u60df\u4e00\u7684 identity \uff08\u7531 id(x) \u8fd4\u56de\u7684\u4e00\u4e2a\u6574\u6570\uff0c\u6ce8\u610f\uff1a identity \u4e0d\u662f identifier\uff09 \u4e00\u4e2a\u7c7b\u578b\uff08\u7531 type(x) \u8fd4\u56de\uff09 \u4e00\u4e9b\u503c \u5bf9\u8c61\u7684 identity \u65e0\u6cd5\u6539\u53d8\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 Note CPython2.2\u53ca\u66f4\u65b0\u7684\u7248\u672c\u5141\u8bb8\u5728\u76f8\u5f53\u6709\u9650\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u5728 Python \u4e2d\u3002\u4e00\u4e9b\u5bf9\u8c61\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff08\u5728\u4e0d\u6539\u53d8 identity \u548c type \u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u8fd9\u79cd\u5bf9\u8c61\u88ab\u79f0\u4e3a mutable object \uff1b\u800c\u53e6\u4e00\u4e9b\u5bf9\u8c61\u4e0d\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a immutable object \u3002 \u7c7b\u578b\u7531 \u7c7b\u5bf9\u8c61 \u8868\u793a\uff08\u7c7b\u5bf9\u8c61\u5f80\u5f80\u77e5\u9053\u7c7b\u7684\u5bf9\u8c61\u8981\u5360\u591a\u5c11\u5185\u5b58\uff0c\u6709\u4ec0\u4e48\u65b9\u6cd5\u7b49\u7b49\uff09\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6709\uff1a \u96f6\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff08\u7531\u7c7b\u5bf9\u8c61\u63d0\u4f9b\uff09 \u96f6\u4e2a\u6216\u591a\u4e2a \u540d\u5b57 \u67d0\u4e9b\u5bf9\u8c61\u5177\u6709\u5141\u8bb8\u4f60\u66f4\u6539\u5bf9\u8c61\u5185\u5bb9\uff08\u5373\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff09\u7684\u65b9\u6cd5\u3002\u67d0\u4e9b\u5bf9\u8c61\u5177\u6709\u4ec5\u5177\u6709\u8bbf\u95ee\u5185\u5bb9\u800c\u4e0d\u66f4\u6539\u5185\u5bb9\u7684\u65b9\u6cd5\u3002\u4e00\u4e9b\u5bf9\u8c61\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u3002\u5373\u4f7f\u5bf9\u8c61\u5177\u6709\u65b9\u6cd5\uff0c\u4f60\u4e5f\u4e0d\u80fd\u6539\u53d8\u5b83\u4eec\u7684\u7c7b\u578b\u6216\u8005\u5185\u5b58\u5730\u5740\u3002","title":"Objects"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#names","text":"name \u4e0d\u662f object \u7684\u5c5e\u6027\uff0cobject \u5e76\u4e0d\u77e5\u9053\u5b83\u4eec\u7684 name\u3002 \u6240\u6709 name \u5728\u521b\u5efa\u65f6\u5fc5\u987b\u5173\u8054\uff08bind\uff09\u5230\u4e00\u4e2a object\uff0c\u5426\u5219\u5728\u9700\u8981\u5f15\u7528\u8be5 name \u65f6\u4f1a\u62a5\u9519\u3002 name \u53ef\u4ee5\u5728\u521b\u5efa\u4ee5\u540e\u6307\u5411\u4efb\u4f55\u4e00\u4e2a object\uff08\u5305\u62ec\u4e0d\u540c\u7c7b\u578b\uff09\uff0c\u6240\u4ee5 name \u672c\u8eab\u6ca1\u6709\u7c7b\u522b\uff0c\u4f46 name \u5173\u8054\u7684 object \u662f\u6709\u7c7b\u522b\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528 type(name) \u6765\u67e5\u770b name \u5173\u8054\u7684 object \u7684\u7c7b\u578b\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5173\u8054\uff08bind\uff09\u591a\u4e2a\u540d\u5b57\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u540d\u5b57\u3002 name \u5b58\u5728\u4e8e namespace\uff08\u547d\u540d\u7a7a\u95f4\uff09\uff0c\u4f8b\u5982\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u3001\u5b9e\u4f8b\u547d\u540d\u7a7a\u95f4\u3001\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7b49\u7b49\u3002","title":"Names"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#assignment","text":"Python \u4e5f\u6709 assignment \u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u5b83\u7684\u4e2d\u6587\u6216\u8bb8\u8bd1\u4e3a \u5206\u914d \u6216\u8005 \u547d\u540d \u66f4\u4e3a\u6070\u5f53\uff0c\u56e0\u4e3a\u5728 Python\u4e2d\uff0cassignment \u8bed\u53e5\u4f1a\u6539\u52a8 namespace\uff0c\u800c\u4e0d\u662f\u6539\u52a8\u4e86 object\u3002 Attention \u8fd9\u4e2a\u8bf4\u6cd5\u4e0d\u592a\u4e25\u8c28\uff0c\u56e0\u4e3a assignment \u53ef\u4ee5\u6539\u53d8 Python \u4e2d\u53ef\u53d8\u5bf9\u8c61\u7684\u503c\u3002 assignment : assignments do not copy data \u2014 they just bind names to objects. \u6362\u800c\u8a00\u4e4b\uff0c\u4ee5\u4e0b assignment \u8bed\u53e5\u8868\u793a\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4e14namespace\u7684 a \u952e 3 \u6240\u5bf9\u5e94\u7684value\u4e3a10\u3002 a = 10 \u5982\u679c\u540d\u79f0\u5df2\u7ecf\u5b58\u5728\uff0cassignment\u8bed\u53e5\u5c06\u66ff\u6362\u539f\u59cb\u540d\u79f0\uff1a a = 10 a = 20 \u8fd9\u610f\u5473\u7740\u9996\u5148\u8981\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4f7f\u5176\u6307\u5411\u5305\u542b\u503c10\u7684\u6574\u6570\u5bf9\u8c61\u3002\u7136\u540e\u518d\u4f7f a \u5176\u6307\u5411\u5305\u542b\u503c20\u7684\u6574\u6570\u5bf9\u8c61\u3002\u539f\u6765\u7684\u6574\u6570\u5bf9\u8c6110\u4e0d\u53d7\u6b64\u64cd\u4f5c\u7684\u5f71\u54cd\u3002 \u5982\u679c\u8fd9\u6837\u505a\uff1a a = [] a . append \uff08 1 \uff09 \u7b2c\u4e00\u6761\u8bed\u53e5\u5c06 a \u5173\u8054\u5230\u4e00\u4e2a\u7a7a\u5217\u8868\u5bf9\u8c61\uff0c\u8fd9\u4f1a\u4fee\u6539\u547d\u540d\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u6761\u8bed\u53e5\u4fee\u6539\u4e86\u8be5\u5217\u8868\u7684\u5185\u5bb9\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u89e6\u53canamespace\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0cassignment statement \u5728 Python \u4e2d\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a \u7528\u4e8e\uff08\u91cd\u65b0\uff09\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5bf9\u8c61 \u4fee\u6539\u53ef\u53d8\u5bf9\u8c61\u7684\u5c5e\u6027\uff08\u5185\u5bb9\uff09","title":"Assignment"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_12","text":"Python \u6ca1\u6709 char \u7c7b\u578b\uff0c\u53ea\u6709 str \u7c7b\u578b\uff0c\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a str1 = 'Python' str2 = \"Python\" str1 \u548c str2 \u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684\u3002Python \u4ee5\u7b80\u6d01\u548c\u6613\u7528\u6027\u8457\u79f0\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u591a\u4f59\u7684\u8bbe\u8ba1\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5e26\u6709\u5355\u5f15\u53f7\uff0c\u4f8b\u5982\uff1a We all know that 'A' and 'B' are two capital letters. \u82e5\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4e3a\u4e86\u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u5f15\u53f7\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u8f6c\u4e49\uff1a string = 'We all know that \\' A \\' and \\' B \\' are two capital letters.' \u663e\u7136\u592a\u591a\u7684\u8f6c\u4e49\u7b26\u770b\u8d77\u6765\u5e76\u4e0d\u597d\u770b\uff0c\u6b64\u65f6\u4f7f\u7528\u53cc\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u5219\u7f8e\u89c2\u5f97\u591a\uff1a string = \"We all know that 'A' and 'B' are two capital letters.\" \u540c\u7406\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u4e86\u53cc\u5f15\u53f7\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u800c\u907f\u514d\u4f7f\u7528\u8f6c\u4e49\u7b26\uff1a \"There was a storm last night,\" Paul said. string = '\"There was a storm last night,\" Paul said.' \u8fd9\u5c31\u662fPython\u6613\u7528\u6027\u548c\u4eba\u6027\u5316\u7684\u4e00\u4e2a\u4f53\u73b0\uff0c\u4f7f\u7528\u5355\u5f15\u53f7 ' ' \u5b9a\u4e49\u5b57\u7b26\u4e32\u65f6\uff0c\u5b83\u4f1a\u8ba4\u4e3a\u5b57\u7b26\u4e32\u4e2d\u7684\u53cc\u5f15\u53f7 \" \" \u662f\u666e\u901a\u5b57\u7b26\uff0c\u4ece\u800c\u4e0d\u9700\u8981\u8f6c\u4e49\u3002\u53cd\u4e4b\u4ea6\u7136\u3002","title":"\u5355\u5f15\u53f7\u4e0e\u53cc\u5f15\u53f7"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_13","text":"0b \u5f00\u5934\u8868\u793a\u4e8c\u8fdb\u5236\u6570\uff1a 0b10 2 0o \u5f00\u5934\u8868\u793a\u516b\u8fdb\u5236\u6570\uff1a 0o10 8 0x \u5f00\u5934\u8868\u793a\u5341\u516d\u8fdb\u5236\u6570\uff1a 0x10 16","title":"\u8fdb\u5236\u6570\u8868\u793a"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#lambdas","text":"\u6b63\u5e38\u521b\u5efa\u51fd\u6570\uff08\u4f7f\u7528 def \uff09\u4f1a\u81ea\u52a8\u5c06\u51fd\u6570\u5bf9\u8c61\u4e0e def \u540e\u9762\u7684\u540d\u5b57\u8fdb\u884c\u7ed1\u5b9a\uff0c\u8fd9\u4e0e\u521b\u5efa\u5176\u4ed6\u5bf9\u8c61\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u548c\u6574\u6570\uff09\u4e0d\u540c\uff0c\u540e\u8005\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\uff0c\u800c\u65e0\u9700\u5c06\u5b83\u4eec\u5206\u914d\u7ed9\u540d\u5b57\u3002\u4f46\u53ea\u8981\u4f7f\u7528lambda\u8bed\u6cd5\u521b\u5efa\u51fd\u6570\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\u51fd\u6570\u79f0\u4e3a\u533f\u540d\uff08anonymous\uff09\u51fd\u6570\u3002\u5c06\u7b80\u5355\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6700\u5e38\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a # my_func\u662f\u6b63\u5e38\u521b\u5efa\u7684\u51fd\u6570\uff08named function\uff09 def my_func ( f , arg ): return f ( arg ) my_func ( lambda x : 2 * x * x , 5 ) 50 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u52a8\u6001\u521b\u5efa\u4e86\u4e00\u4e2a\u533f\u540d\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u53c2\u6570\u8c03\u7528\u5b83\u3002Lambda\u51fd\u6570\u6ca1\u6709\u547d\u540d\u51fd\u6570\uff08named function\uff09\u90a3\u4e48\u5f3a\u5927\u3002Lambda\u51fd\u6570\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u901a\u5e38\u76f8\u5f53\u4e8e\u4e00\u884c\u4ee3\u7801\u3002\u5b9e\u9645\u4e0a\uff0cLambda\u51fd\u6570\u53ef\u4ee5\u5206\u914d\u7ed9\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u4f7f\u7528\u3002\u4f46\u662f\uff0c\u5f88\u5c11\u6709\u5145\u5206\u7684\u7406\u7531\u8fd9\u6837\u505a\u3002\u901a\u5e38\u4f7f\u7528 def \u6765\u5b9a\u4e49\u51fd\u6570\u66f4\u597d\u3002 double = lambda x : x * 2 print ( double ( 7 )) 14","title":"Lambdas"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_14","text":"\u7b97\u672f\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 + \u52a0 - \u51cf * \u4e58 / \u9664 % \u53d6\u6a21 ** \u5e42 // \u53d6\u6574\u9664 \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e < \u5c0f\u4e8e >= \u5927\u4e8e\u7b49\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e \u8d4b\u503c\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 << \u5de6\u79fb\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u7531 << \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb\u8fd0\u7b97\u7b26\uff1a\u628a > \u5de6\u8fb9\u7684\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c >> \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570 & \u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1\uff0c\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1\uff0c\u5426\u5219\u4e3a0 | \u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1 ^ \u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 ~ \u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\uff0c\u5373\u628a1\u53d8\u4e3a0\uff0c\u628a0\u53d8\u4e3a1\u3002 ~x \u7c7b\u4f3c\u4e8e -x-1 \u5de6\u79fb\u548c\u53f3\u79fb\u7684\u610f\u601d\u5c31\u662f\u628a\u4f4d\u6570\u6574\u4f53\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u82e5\u5e72\u4f4d\u3002\u6bd4\u59821111\u5411\u53f3\u79fb\u4e00\u4f4d\u5c31\u53d8\u6210\u4e860111\uff0c\u539f\u6765\u6ca1\u6709\u7684\u4f4d\u81ea\u52a8\u586b0\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u4f4d\u820d\u5f03\u6389\u3002\u770b\u51e0\u4e2a\u4f8b\u5b50\uff1a bin ( 0b1111 >> 1 ) '0b111' bin ( 0b1010 << 2 ) '0b101000' \u5bf9\u4e8e\u5168\u90e8\u7684\u6309\u4f4d\u8fd0\u7b97\u7b26\uff0c\u5982\u679c\u4f7f\u7528\u5341\u8fdb\u5236\uff08\u6216\u8005\u5176\u4ed6\u8fdb\u5236\u6570\uff09\uff0c\u4e5f\u662f\u5bf9\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8fdb\u884c\u79fb\u4f4d\uff1a print ( 0b1111 is 15 ) bin ( 15 >> 1 ) True <>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? <>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? <ipython-input-1-fec78c7dc2ab>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"? print(0b1111 is 15) '0b111' \u5176\u4ed6\u6309\u4f4d\u8fd0\u7b97\u7b26\u7684\u4f8b\u5b50\uff1a print ( bin ( 0b1111 & 0b1010 )) print ( bin ( 0b1111 | 0b1010 )) print ( bin ( 0b1111 ^ 0b1010 )) print ( bin ( ~ 0b1010 ), bin ( - 0b1010 - 1 )) 0b1010 0b1111 0b101 -0b1011 -0b1011 \u903b\u8f91\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u903b\u8f91\u8868\u8fbe\u5f0f \u63cf\u8ff0 and x and y x\u3001y\u540c\u65f6\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 or x or y x\u3001y\u4e24\u8005\u6709\u4e00\u4e2a\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 not not x x\u4e3a\u771f\uff0c\u7ed3\u679c\u4e3a\u5047\uff1bx\u4e3a\u5047\uff0c\u7ed3\u679c\u4e3a\u771f \u5e03\u5c14\u8fd0\u7b97\u7b26\u6709\u4e2a\u6709\u8da3\u7684\u7279\u5f81\uff1a\u53ea\u505a\u5fc5\u8981\u7684\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u4ec5\u5f53 x \u548c y \u90fd\u4e3a\u771f\u65f6\uff0c\u8868\u8fbe\u5f0f x and y \u30aa\u4e3a\u771f\u3002\u56e0\u6b64\u5982\u679c x \u4e3a\u5047\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u7acb\u5373\u8fd4\u56de\u5047\uff0c\u800c\u4e0d\u5173\u5fc3 y \u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c x \u4e3a\u5047\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u8fd4\u56de x \uff0c\u5426\u5219\u8fd4\u56de y \u3002 \u8fd9\u79cd\u884c\u4e3a\u79f0\u4e3a \u77ed\u8def\u903b\u8f91 \uff08\u6216\u8005\u5ef6\u8fdf\u6c42\u503c\uff09\uff1a\u5e03\u5c14\u8fd0\u7b97\u7b26\u5e38\u88ab\u79f0\u4e3a\u903b\u8f91\u8fd0\u7b97\u7b26\u3002 \u5bf9\u4e8e\u8fd0\u7b97\u7b26 or \uff0c\u60c5\u51b5\u4ea6\u5982\u6b64\u3002\u5728\u8868\u8fbe\u5f0f x or y \u4e2d\uff0c\u5982\u679c x \u4e3a\u771f\uff0c\u5c31\u8fd4\u56de x \uff0c\u5426\u5219\u8fd4\u56de y \u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740\u4f4d\u4e8e\u5e03\u5c14\u8fd0\u7b97\u7b26\u540e\u9762\u7684\u4ee3\u7801\uff08\u5982\u51fd\u6570\u8c03\u7528\uff09\u53ef\u80fd\u6839\u672c\u4e0d\u4f1a\u6267\u884c\u3002\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u5c31\u5229\u7528\u4e86\u8fd9\u79cd\u884c\u4e3a name = input ( 'Please enter your name:' ) or '<unknown>' \u5982\u679c\u6ca1\u6709\u8f93\u5165\u540d\u5b57\uff0c\u4e0a\u8ff0 or \u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u5c06\u4e3a '< unknown>' \u3002 \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5b81\u613f\u4f7f\u7528\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u800d\u8fd9\u6837\u7684\u77ed\u8def\u82b1\u6837\uff0c\u56e0\u4e3a\u8fc7\u591a\u7684\u77ed\u8def\u903b\u8f91\u53ef\u80fd\u4f1a\u8ba9\u4ee3\u7801\u903b\u8f91\u53d8\u5f97\u9690\u6666\uff0c\u66f4\u5bb9\u6613\u51fa\u9519\u3002 \u4e0d\u8fc7\u524d\u9762\u8fd9\u6837\u7684\u8bed\u53e5\u786e\u5b9e\u6709\u5176\u7528\u6b66\u4e4b\u5730\u3002 \u6210\u5458\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False \u8eab\u4efd\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b) \u3002\u5982\u679c\u5f15\u7528\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False","title":"\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_15","text":"\u6570\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u5177\u6709\u76f8\u540c\u4f18\u5148\u7ea7\u7684\u8fd0\u7b97\u7b26\u5c06\u4ece\u5de6\u81f3\u53f3\u7684\u65b9\u5f0f\u4f9d\u6b21\u8fdb\u884c\u3002\u7528\u5c0f\u62ec\u53f7 () \u53ef\u4ee5\u6539\u53d8\u8fd0\u7b97\u987a\u5e8f\u3002 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u4f18\u5148\u7ea7 {key:value, ...} \u5b57\u5178\u663e\u793a 16 [...] \u5217\u8868\u663e\u793a 16 (...) \u5c06\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6216\u5143\u7ec4\u663e\u793a 16 x[index]\u3001x[index1:index2]\u3001f(args...)\u3001x.attribute \u5143\u7d20\u8bbf\u95ee\u3001\u5207\u7247\u3001\u51fd\u6570\u8c03\u7528\u3001\u5c5e\u6027\u5f15\u7528 15 ** \u5e42\u8fd0\u7b97 14 ~ \u6309\u4f4d\u6c42\u8865 13 *\u3001/\u3001//\u3001%\u3001@ \u4e58\u3001\u9664\u3001\u53d6\u6574\u3001\u53d6\u6a21 12 +\u3001- \u52a0\u3001\u51cf 11 <<\u3001>> \u5de6\u79fb\u4f4d\u3001\u53f3\u79fb\u4f4d 10 & \u6309\u4f4d\u4e0e 9 ^ \u6309\u4f4d\u5f02\u6216 8 | \u6309\u4f4d\u6216 7 <\u3001<=\u3001>\u3001>=\u3001==\u3001!= \u6bd4\u8f83\u8fd0\u7b97\u7b26 6 is\u3001is not \u8eab\u4efd\u8fd0\u7b97\u7b26 6 in\u3001not in \u6210\u5458\u8fd0\u7b97\u7b26 6 not \u903b\u8f91\u8fd0\u7b97\u7b26 5 and \u903b\u8f91\u8fd0\u7b97\u7b26 4 or \u903b\u8f91\u8fd0\u7b97\u7b26 3 if - else \u6761\u4ef6\u8868\u8fbe\u5f0f 2 lambda Lambda \u8868\u8fbe\u5f0f 1 If something is established on \" common sense ,\" there is no need to over - entangle . \u21a9 \u5305\u62ec\u51fd\u6570\u3001\u7c7b\u7684\u5b9a\u4e49\u3002 \u21a9 \u76ee\u524dPython\u7684\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u5b57\u5178\u5b9e\u73b0\uff0c\u4f46\u65e5\u540e\u53ef\u80fd\u4f1a\u6539\u53d8\u3002 \u21a9 \u73b0\u5728\u7684\u8ba1\u7b97\u673a\u5f88\u591a\u90fd\u4e0d\u5e26\u8702\u9e23\u5668\u4e86\uff0c\u6240\u4ee5\u54cd\u94c3\u4e0d\u4e00\u5b9a\u6709\u6548\u3002 \u21a9 \u8fd9\u4e9b\u65b9\u6cd5\u53ef\u89c6\u4e3a CPU \u7684\u62bd\u8c61\u3002 \u21a9","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html","text":"\u8d4b\u503c \u5f15\u7528\uff08reference\uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a\u8be5\u8d44\u6599\u7684\u6307\u6807\u6216\u4f4d\u5740\u3002 Python\u7684\u8d4b\u503c\u90fd\u662f\u4f20\u5f15\u7528\uff0c\u5373name\u662fvalue\u7684\u5f15\u7528\u3002 \u5728python\u91cc\u9762\uff0c\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7684\u503c\u662f\u67d0\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002Python\u8d4b\u503c\u8bed\u53e5\u5c06\u5de6\u4fa7\u7684\u7b26\u53f7\u540d\u79f0\u4e0e\u53f3\u4fa7\u7684\u503c \u76f8\u5173\u8054 \u3002\u5728Python\u4e2d\uff0c\u6211\u4eec\u8bf4\u540d\u79f0\u5f15\u7528\u503c\uff0c\u6216\u8005\u540d\u79f0\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u4e0b\u6b21\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u65f6\uff0c\u4fbf\u5f97\u5230\u4e0e\u540d\u79f0\u76f8\u5173\u8054\u7684\u503c\u3002 assignment\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u5e76\u4e14\u591a\u4e2aname\u53ef\u4ee5\u5f15\u7528\u540c\u4e00\u4e2avalue\u3002 \u5f53\u503c\u5177\u6709\u591a\u4e2a\u540d\u79f0\u65f6\uff0c\u5f88\u5bb9\u6613\u6df7\u6dc6\u5e76\u5c06\u5176\u89c6\u4e3a\u4e24\u4e2a\u540d\u79f0\u548c\u4e24\u4e2a\u503c\u3002\uff1a x = 23 y = x \u5b9e\u9645\u4e0a\uff0c\u5c06\u5df2\u6709\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u65b0\u53d8\u91cf\u65f6\uff0cPython\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u503c\u3002\u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a23\uff0c x \u548c y \u90fd\u5f15\u7528\u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002 \u540d\u79f0\u662f\u72ec\u7acb\u4e8e\u5176\u4ed6\u540d\u79f0\u91cd\u65b0\u5206\u914d\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u76f8\u540c\u7684\u503c\uff0c\u5219\u4e0d\u4f1a\u94fe\u63a5\u8fd9\u4e24\u4e2a\u540d\u79f0\u3002\u91cd\u65b0\u5206\u914d\u5176\u4e2d\u4e00\u4e2a\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4e5f\u88ab\u91cd\u65b0\u5206\u914d\uff1a x = 23 y = x x = 12 \u5982\u679c\u4e0a\u9762\u5d4c\u5165\u7684\u7f51\u9875\u5931\u6548\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u52a8\u56fe\uff1a \u503c\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u540d\u79f0\u5f15\u7528\u5b83\u3002 Python\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u503c\u6709\u591a\u5c11\u5f15\u7528\uff0c\u5e76\u81ea\u52a8\u6e05\u9664\u6ca1\u6709\u5f15\u7528\u7684\u503c\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u5783\u573e\u6536\u96c6\u201d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u5fc5\u6e05\u695a\u503c\uff0c\u5f53\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u65f6\u5b83\u4eec\u4f1a\u81ea\u884c\u6d88\u5931\u3002 mutable \u548c immutable Python\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u5668\uff1a \u539f\u5b50\u7c7b\u578b\uff1astring\u3001number \u5bb9\u5668\u7c7b\u578b\uff1alist\u3001tuple\u3001dict\u3001set \u539f\u5b50\u7c7b\u578b\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u503c\uff1b\u5bb9\u5668\u7c7b\u578b\u5219\u53ef\u4ee5\u4fdd\u5b58\u591a\u4e2a\u503c\u3002 \u867d\u7136string\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u7b26\uff0c\u4f46Python\u4e2d\u6ca1\u6709\u5b57\u7b26\u7c7b\u578b\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u4e5f\u5c5e\u4e8e\u539f\u5b50\u7c7b\u578b\u3002 Python\u5bf9\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u578b\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff1a \u5bf9\u4e8e\u539f\u5b50\u7c7b\u578b\uff0cname\u76f4\u63a5\u6307\u5411object \u5bf9\u4e8e\u5bb9\u5668\u7c7b\u5668\uff0cname\u6307\u5411\u5bb9\u5668\u7c7b\u578b\u5bf9\u8c61\uff0c\u5bb9\u5668\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u6307\u5411\u5404\u4e2a\u5143\u7d20\u5bf9\u8c61 Python\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u53ef\u4ee5\u5206\u4e3a immutable \u548c mutable \uff1a immutable object : string\u3001tuple\u3001number mutable object : list\u3001dict\u3001set \u6240\u8c13\u7684mutable\u3001immutable\u662f\u6307name\u6307\u5411\u7684object\u53ef\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\u3002\u5982\u679c\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u4fee\u6539\uff0c\u5c31\u53ea\u80fd\u5728\u65b0\u5730\u5740\u521b\u5efa\u65b0\u5bf9\u8c61\uff0cname\u6307\u5411\u65b0\u5bf9\u8c61\uff08\u65e7\u5bf9\u8c61\u82e5\u6ca1\u6709\u5f15\u7528\uff0c\u5219\u4f1a\u88ab\u5185\u5b58\u56de\u6536\u673a\u5236\u9500\u6bc1\uff09\uff1a name = 10 print ( \"name\u7684id\uff1a\" , id ( name )) name = 20 print ( \"name\u7684id\uff1a\" , id ( name )) name\u7684id\uff1a 140728401826912 name\u7684id\uff1a 140728401827232 \u5982\u679c\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\uff0c\u90a3\u4e48name\u7684\u6307\u5411\u5c31\u4e0d\u4f1a\u6539\u53d8\uff08\u5bb9\u5668\u7c7b\u578b\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u4fdd\u5b58\u7684\u662f\u5143\u7d20\u7684\u5f15\u7528\uff09\uff1a name = [ 1 , 2 , 3 , 4 , 5 ] print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c { num } \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name [ 0 ] = 20 print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c { num } \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name\u7684\u503c: [1, 2, 3, 4, 5] name\u7684id\uff1a 1694876445512 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140728401826624 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140728401826656 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140728401826688 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140728401826720 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140728401826752 name\u7684\u503c: [20, 2, 3, 4, 5] name\u7684id\uff1a 1694876445512 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140728401827232 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140728401826656 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140728401826688 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140728401826720 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140728401826752 immutable\u7684\u672c\u8d28 \u795e\u8bdd\uff1aPython\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u914d\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u503c\u3002 \u56e0\u4e3amutable\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0cimmutable\u5bf9\u8c61\u4e0d\u53ef\u53d8\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97mutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u7684\u503c\u5206\u914d\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cmutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u6240\u6709\u7684\u8d4b\u503c\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 mutable\u3001immutable\u53ea\u662fpython\u8bed\u8a00\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u4ece\u786c\u4ef6\u89d2\u5ea6\u8bf4\uff0c\u786c\u4ef6\u63d0\u4f9b\u7ed9\u7528\u6237\u7684\u63a5\u53e3\u662f\u6309\u7167\u89c4\u5b9a\u8bbe\u5b9a\u597d\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u64cd\u4f5c\u5185\u5b58\u7684\u65b9\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u3002\u5b9e\u73b0python\u7684mutable\u3001immutable\u5c31\u662f\u8c03\u7528\u4e86\u4e0d\u540c\u7684\u5e95\u5c42API\uff0c\u6216\u8005\u662f\u4e0d\u540c\u5e95\u5c42API\u76f8\u4e92\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\u3002python\u5c06\u8fd9\u4e9b\u89c4\u5b9a\u4ee5python\u8bed\u6cd5\u7684\u5f62\u5f0f\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u6700\u540e\u8fd8\u662f\u7f16\u8bd1\u62100\u30011\u53bb\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5bf9\u8c61\u662f\u8bed\u8a00\u63d0\u4f9b\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e9b\u529f\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u5176\u5b9e\u662f\u6ca1\u533a\u522b\u7684\u3002 \u56e0\u6b64\uff0cmutable\u548cimmutable\u7684\u672c\u8d28\u533a\u522b\u662fPython\u6709\u6ca1\u6709\u63d0\u4f9b\u4fee\u6539\u503c\u7684\u65b9\u6cd5\u3002 \u4e0d\u7ba1\u662f\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0cPython\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5c06\u5bf9\u8c61\u7ed1\u5b9a\u5230\u540d\u5b57\uff08\u53c2\u89c1\u4e0a\u9762\u7684\u56fe\u793a\u548c\u793a\u4f8b\u4ee3\u7801\uff09\u3002 \u8d4b\u503c\u9677\u9631\u2014\u2014\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d \u795e\u8bdd\uff1a\u503c\u662f\u6709\u8303\u56f4\u7684\u3002 \u5728python\u4e2d\u5b58\u5728\u4f5c\u7528\u57df\u8fd9\u6837\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u4f5c\u7528\u57df\u6307\u7684\u662f\u503c\uff08\u5bf9\u8c61\uff09\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c \u503c\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff0c\u4f5c\u7528\u57df\u6307\u7684\u662f\u540d\u79f0\u7684\u4f5c\u7528\u8303\u56f4\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e0e\u9a8c\u8bc1\u8fd9\u70b9\u3002 def check_name_space_range ( x ): print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) # \u5148\u5728\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u8d4b\u503c\uff0c\u5e76\u6253\u5370\u5730\u5740 a = 10 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) check_name_space_range ( a ) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140728401826912 x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140728401826912 \u5f88\u660e\u663e\uff0c\u5728\u5185\u5916\u5c42\u4f5c\u7528\u57df\u7684\u503c\u90fd\u662f\u540c\u4e00\u4e2a\u3002 \u9677\u9631\uff1a\u56e0\u4e3a\u503c\u6ca1\u6709\u8303\u56f4\uff0c\u5e76\u4e14\u8d4b\u503c\u4e0d\u4f1a\u590d\u5236\u503c\uff0c\u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u53ef\u53d8\u5bf9\u8c61\u88ab\u610f\u5916\u5730\u6539\u53d8\uff1a def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] \u53ef\u4ee5\u770b\u5230\uff0c a \u3001 a_other \u90fd\u88ab\u6539\u53d8\u4e86\uff0c\u56e0\u4e3a a \u3001 a_other \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694877001032 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694877001032 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5728\u51fd\u6570\u91cc\u9762\u66f4\u6539\u53ef\u53d8\u5bf9\u8c61\u53c2\u6570\u7684\u503c\uff0c\u6700\u597d\u590d\u5236\u4e00\u4e2a\u526f\u672c\u3002 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694876642120 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694876641288 a \u7684\u503c\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u770b\u4f3c\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u8fd8\u662f\u4f1a\u6709\u65b0\u7684\u201d\u60ca\u559c\u201c\u3002 \u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0b variable_change_shallow \u51fd\u6570 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694877003720 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694876445576 \u201d\u60ca\u559c\u201c\u5c31\u662f a \u7684\u503c\u4e5f\u6539\u53d8\u4e86\u3002\u56e0\u4e3a x.copy() \u53ea\u662f\u6d45\u62f7\u8d1d\u3002 \u5728python\u91cc\u9762\u6709\u4e09\u79cd\u65b9\u5f0f\u53bb\u5f15\u7528\u67d0\u4e2a\u503c\uff1a \u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf \u6d45\u62f7\u8d1d \u6df1\u62f7\u8d1d \u8fd9\u4e09\u79cd\u65b9\u5f0f\u662f\u6709\u533a\u522b\u7684\u3002 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) \u53d8\u91cf a \u548c a_reference \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u6d45\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_shallow \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46 a_shallow \u7684\u7b2c\u4e09\u4e2a\u5143\u7d20 a_shallow[2] \u5374\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u8fd9\u548c a \u3001 a_reference \u4e00\u6837\u3002 \u6df1\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_deep_copy \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e5f\u662f\u65b0\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u6d45\u62f7\u8d1d\u7684\u5bf9\u8c61\u5305\u542b\u4e86mutable\u5bf9\u8c61\uff0c\u5219mutable\u5bf9\u8c61\u4e0d\u4f1a\u62f7\u8d1d\uff1b\u800c\u6df1\u62f7\u8d1d\u5219\u4f1a\u5b8c\u6574\u62f7\u8d1d\u5bf9\u8c61\u3002 \u8d4b\u503c\u9677\u9631\u2014\u2014\u5f15\u7528\u4e0d\u4ec5\u4ec5\u9650\u4e8e\u540d\u79f0 \u4ee5\u4e0a\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528\u540d\u79f0\u4f5c\u4e3a\u503c\u7684\u5f15\u7528\uff0c\u4f46\u5f15\u7528\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e1c\u897f\u3002 Python\u6709\u8bb8\u591a\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7ed3\u6784\u90fd\u5305\u542b\u5bf9\u503c\u7684\u5f15\u7528\uff1a\u5217\u8868\u5143\u7d20\uff0c\u5b57\u5178\u952e\u548c\u503c\uff0c\u5bf9\u8c61\u5c5e\u6027\u7b49\u3002 \u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5728\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u4fa7\u4f7f\u7528\uff0c\u4ee5\u4e0a\u6240\u6709\u7ec6\u8282\u90fd\u9002\u7528\u4e8e\u5b83\u4eec\u3002 \u4efb\u4f55\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u5de6\u4fa7\u7684\u5185\u5bb9\u90fd\u662f\u5f15\u7528 \uff0c\u5728\u672c\u6587\u4e2d\u8bf4\u201c\u540d\u79f0\u201d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u7528\u201c\u5f15\u7528\u201d\u66ff\u6362\u3002 \u5728\u4e0a\u9762\u7684\u793a\u610f\u56fe\u4e2d\uff0c\u6570\u5b57\u88ab\u663e\u793a\u4e3a\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5bf9\u6570\u5b57\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\u7ed8\u5236\uff1a nums = [ 1 , 2 , 3 ] \u4f46\u8fd9\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ed8\u56fe\u7528\u4e86\u89c6\u89c9\u901f\u8bb0\uff1a \u5982\u679c\u4f60\u6709\u5217\u8868\u5143\u7d20\u5f15\u7528\u5176\u4ed6\u53ef\u53d8\u503c\uff0c\u4f8b\u5982\u5b50\u5217\u8868\uff0c\u8bf7\u52a1\u5fc5\u8bb0\u4f4f\u5217\u8868\u5143\u7d20\u53ea\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u8fd9\u662f\u4e00\u4e9b\u5176\u4ed6assignment\u7684\u4f8b\u5b50\u3002\u8fd9\u4e9b\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5f15\u7528\uff08reference\uff09\uff1a my_obj . attr = 23 # \u7c7b\u5c5e\u6027 my_dict [ key ] = 24 # \u5b57\u5178 my_list [ index ] = 25 # \u5217\u8868 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" # \u591a\u4e2a\u5bf9\u8c61\u5d4c\u5957 i = x \u6307\u5b9a\u4e86\u540d\u79f0 i \uff0c\u4f46 i[0] = x \u5e76\u4e0d\u662f\u6307\u5b9a\u540d\u79f0 i \uff0c\u800c\u662f\u6307\u5b9a\u4e86 i \u7684\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5f88\u591a\u4e1c\u897f\u90fd\u662fAssignment\u3002 \u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c\u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f15\u7528\uff0cpython\u91cc\u9762\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f5c\u4e3aassignments\u3002 \u8fd9\u4e9b\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u540d\u79f0 X \u7684\u8d4b\u503c\uff1a X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X \u6ce8\u610f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u8bed\u53e5\u50cfassignments\uff0c\u6211\u7684\u610f\u601d\u662f\u8fd9\u4e9b\u8bed\u53e5\u90fd\u662f\u8d4b\u503c\u3002\u5b83\u4eec\u90fd\u4f7f\u540d\u79f0 X \u5f15\u7528\u67d0\u4e2a\u503c\u3002\u4e0a\u9762\u6240\u8bf4\u7684\u5173\u4e8e\u8d4b\u503c\u7684\u6240\u6709\u5185\u5bb9\u90fd\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u8d4b\u503c\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bed\u53e5\u5c06 X \u5b9a\u4e49\u5728\u4e0e\u8bed\u53e5\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002Python 2\u548cPython 3\u4e4b\u95f4\u7684\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002\u4f46\u5b83\u4eec\u90fd\u662f\u771f\u6b63\u7684\u8d4b\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4e8b\u5b9e\u90fd\u662f\u5173\u4e8e\u8d4b\u503c\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u3002 Python\u901a\u8fc7\u8d4b\u503c\u6765\u4f20\u9012\u51fd\u6570\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e9b\u4e0a\u9762assignment\u5217\u8868\u4e2d\u6700\u6709\u8da3\u7684\u4e00\u4e2a\uff1a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6211\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u5c06\u5176\u53c2\u6570\u547d\u540d\u4e3a\uff1a def my_func ( x , y ): return x + y \u8fd9\u91cc x \u548c y \u662f\u51fd\u6570 my_func \u7684\u53c2\u6570\u3002\u5f53\u6211\u8c03\u7528 my_func \u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u5b9e\u9645\u503c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u503c\u5206\u914d\u7ed9 \u53c2\u6570\u540d\u79f0 \uff0c\u5c31\u50cf\u4f7f\u7528\u4e86\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\uff1a def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 \u8c03\u7528 my_func \u65f6\uff0c8\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 x \uff0c9\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 y \u3002\u8be5\u8d4b\u503c\u4e0e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u7b80\u5355\u8d4b\u503c\u8bed\u53e5\u5b8c\u5168\u76f8\u540c\u3002\u540d\u79f0 x \u548c y \u662f\u51fd\u6570\u7684\u672c\u5730\u540d\u79f0\uff08local\uff09\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c31\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u503c\u4ecd\u7136\u88ab\u5176\u4ed6\u540d\u79f0\u5f15\u7528\uff0c\u5219\u503c\u4ecd\u7136\u5b58\u5728\u3002 \u5c31\u50cf\u6240\u6709\u5176\u4ed6\u8d4b\u503c\u4e00\u6837\uff0c\u53ef\u53d8\u503c\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5e76\u4e14\u901a\u8fc7\u5176\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u5bf9\u503c\u7684\u66f4\u6539\u3002 \u540d\u79f0\u548c\u503c\u7684\u4e00\u4e9b\u7ec6\u8282 \u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u3002\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002\u540d\u79f0\u53ef\u4ee5\u5f15\u7528\u6574\u6570\uff0c\u7136\u540e\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5f15\u7528\u51fd\u6570\uff0c\u7136\u540e\u5f15\u7528\u6a21\u5757\u3002\u5f53\u7136\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6df7\u4e71\u7684\u7a0b\u5e8f\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46Python\u8bed\u8a00\u4e0d\u4f1a\u4ecb\u610f\u3002 \u540d\u79f0\u6ca1\u6709\u7c7b\u578b\uff0c\u503c\u6ca1\u6709\u8303\u56f4\u3002 \u6b63\u5982\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u503c\u4e5f\u6ca1\u6709\u8303\u56f4\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u8be5\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\uff1a\u4f60\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u8be5\u540d\u79f0\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u540d\u79f0\u5c06\u88ab\u9500\u6bc1\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5982\u679c\u540d\u79f0\u7684\u503c\u5177\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u5916\u3002\u5b83\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u672c\u5730\u503c\u3002 \u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u6709\u540d\u79f0\u53ef\u4ee5\u5220\u9664\u3002 Python\u7684\u5185\u5b58\u7ba1\u7406\u5bf9\u5176\u884c\u4e3a\u81f3\u5173\u91cd\u8981\uff0c\u4f60\u4e0d\u4ec5\u4e0d\u5fc5\u5220\u9664\u503c\uff0c\u800c\u4e14\u65e0\u6cd5\u5220\u9664\u503c\u3002 nums = [ 1 , 2 , 3 ] del nums \u8fd9\u4e0d\u4f1a\u5220\u9664\u503c nums \uff0c\u5b83\u4f1a\u5220\u9664\u540d\u79f0 nums \u3002\u8be5\u540d\u79f0\u5c06\u4ece\u5176\u8303\u56f4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u5e38\u7684\u5f15\u7528\u8ba1\u6570\u5f00\u59cb\u6267\u884c\uff1a\u5982\u679c nums \u7684\u503c\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u5c06\u56de\u6536\u8be5\u503c\u3002\u4f46\u5982\u679c\u5b83\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 \u795e\u8bdd\uff1aPython\u6ca1\u6709\u53d8\u91cf\u3002 \u6709\u4e9b\u4eba\u559c\u6b22\u8bf4\uff0c\u201cPython\u6ca1\u6709\u53d8\u91cf\uff0c\u5b83\u6709\u540d\u5b57\u3002\u201d\u8fd9\u4e2a\u53e3\u53f7\u5177\u6709\u8bef\u5bfc\u6027\u3002\u4e8b\u5b9e\u662fPython\u6709\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eC\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\u3002 \u540d\u79f0\u662fPython\u7684\u53d8\u91cf\uff1a\u5b83\u4eec\u5f15\u7528\u503c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u503c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u53d8\u5316\uff08\u53d8\u5316\uff09\u3002\u4ec5\u4ec5\u56e0\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u5c3d\u7ba1\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8bed\u8a00\uff09\u8868\u73b0\u4e0d\u540c\uff0c\u6ca1\u6709\u7406\u7531\u5c06Python\u63cf\u8ff0\u4e3a\u6ca1\u6709\u53d8\u91cf\u3002","title":"2.10.\u8d4b\u503c\u3001immutable\u3001\u6df1\u62f7\u8d1d"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_1","text":"\u5f15\u7528\uff08reference\uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a\u8be5\u8d44\u6599\u7684\u6307\u6807\u6216\u4f4d\u5740\u3002 Python\u7684\u8d4b\u503c\u90fd\u662f\u4f20\u5f15\u7528\uff0c\u5373name\u662fvalue\u7684\u5f15\u7528\u3002 \u5728python\u91cc\u9762\uff0c\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7684\u503c\u662f\u67d0\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002Python\u8d4b\u503c\u8bed\u53e5\u5c06\u5de6\u4fa7\u7684\u7b26\u53f7\u540d\u79f0\u4e0e\u53f3\u4fa7\u7684\u503c \u76f8\u5173\u8054 \u3002\u5728Python\u4e2d\uff0c\u6211\u4eec\u8bf4\u540d\u79f0\u5f15\u7528\u503c\uff0c\u6216\u8005\u540d\u79f0\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u4e0b\u6b21\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u65f6\uff0c\u4fbf\u5f97\u5230\u4e0e\u540d\u79f0\u76f8\u5173\u8054\u7684\u503c\u3002 assignment\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u5e76\u4e14\u591a\u4e2aname\u53ef\u4ee5\u5f15\u7528\u540c\u4e00\u4e2avalue\u3002 \u5f53\u503c\u5177\u6709\u591a\u4e2a\u540d\u79f0\u65f6\uff0c\u5f88\u5bb9\u6613\u6df7\u6dc6\u5e76\u5c06\u5176\u89c6\u4e3a\u4e24\u4e2a\u540d\u79f0\u548c\u4e24\u4e2a\u503c\u3002\uff1a x = 23 y = x \u5b9e\u9645\u4e0a\uff0c\u5c06\u5df2\u6709\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u65b0\u53d8\u91cf\u65f6\uff0cPython\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u503c\u3002\u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a23\uff0c x \u548c y \u90fd\u5f15\u7528\u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002 \u540d\u79f0\u662f\u72ec\u7acb\u4e8e\u5176\u4ed6\u540d\u79f0\u91cd\u65b0\u5206\u914d\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u76f8\u540c\u7684\u503c\uff0c\u5219\u4e0d\u4f1a\u94fe\u63a5\u8fd9\u4e24\u4e2a\u540d\u79f0\u3002\u91cd\u65b0\u5206\u914d\u5176\u4e2d\u4e00\u4e2a\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4e5f\u88ab\u91cd\u65b0\u5206\u914d\uff1a x = 23 y = x x = 12 \u5982\u679c\u4e0a\u9762\u5d4c\u5165\u7684\u7f51\u9875\u5931\u6548\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u52a8\u56fe\uff1a \u503c\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u540d\u79f0\u5f15\u7528\u5b83\u3002 Python\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u503c\u6709\u591a\u5c11\u5f15\u7528\uff0c\u5e76\u81ea\u52a8\u6e05\u9664\u6ca1\u6709\u5f15\u7528\u7684\u503c\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u5783\u573e\u6536\u96c6\u201d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u5fc5\u6e05\u695a\u503c\uff0c\u5f53\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u65f6\u5b83\u4eec\u4f1a\u81ea\u884c\u6d88\u5931\u3002","title":"\u8d4b\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#mutable-immutable","text":"Python\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u5668\uff1a \u539f\u5b50\u7c7b\u578b\uff1astring\u3001number \u5bb9\u5668\u7c7b\u578b\uff1alist\u3001tuple\u3001dict\u3001set \u539f\u5b50\u7c7b\u578b\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u503c\uff1b\u5bb9\u5668\u7c7b\u578b\u5219\u53ef\u4ee5\u4fdd\u5b58\u591a\u4e2a\u503c\u3002 \u867d\u7136string\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u7b26\uff0c\u4f46Python\u4e2d\u6ca1\u6709\u5b57\u7b26\u7c7b\u578b\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u4e5f\u5c5e\u4e8e\u539f\u5b50\u7c7b\u578b\u3002 Python\u5bf9\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u578b\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff1a \u5bf9\u4e8e\u539f\u5b50\u7c7b\u578b\uff0cname\u76f4\u63a5\u6307\u5411object \u5bf9\u4e8e\u5bb9\u5668\u7c7b\u5668\uff0cname\u6307\u5411\u5bb9\u5668\u7c7b\u578b\u5bf9\u8c61\uff0c\u5bb9\u5668\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u6307\u5411\u5404\u4e2a\u5143\u7d20\u5bf9\u8c61 Python\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u53ef\u4ee5\u5206\u4e3a immutable \u548c mutable \uff1a immutable object : string\u3001tuple\u3001number mutable object : list\u3001dict\u3001set \u6240\u8c13\u7684mutable\u3001immutable\u662f\u6307name\u6307\u5411\u7684object\u53ef\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\u3002\u5982\u679c\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u4fee\u6539\uff0c\u5c31\u53ea\u80fd\u5728\u65b0\u5730\u5740\u521b\u5efa\u65b0\u5bf9\u8c61\uff0cname\u6307\u5411\u65b0\u5bf9\u8c61\uff08\u65e7\u5bf9\u8c61\u82e5\u6ca1\u6709\u5f15\u7528\uff0c\u5219\u4f1a\u88ab\u5185\u5b58\u56de\u6536\u673a\u5236\u9500\u6bc1\uff09\uff1a name = 10 print ( \"name\u7684id\uff1a\" , id ( name )) name = 20 print ( \"name\u7684id\uff1a\" , id ( name )) name\u7684id\uff1a 140728401826912 name\u7684id\uff1a 140728401827232 \u5982\u679c\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\uff0c\u90a3\u4e48name\u7684\u6307\u5411\u5c31\u4e0d\u4f1a\u6539\u53d8\uff08\u5bb9\u5668\u7c7b\u578b\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u4fdd\u5b58\u7684\u662f\u5143\u7d20\u7684\u5f15\u7528\uff09\uff1a name = [ 1 , 2 , 3 , 4 , 5 ] print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c { num } \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name [ 0 ] = 20 print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c { num } \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name\u7684\u503c: [1, 2, 3, 4, 5] name\u7684id\uff1a 1694876445512 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140728401826624 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140728401826656 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140728401826688 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140728401826720 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140728401826752 name\u7684\u503c: [20, 2, 3, 4, 5] name\u7684id\uff1a 1694876445512 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140728401827232 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140728401826656 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140728401826688 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140728401826720 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140728401826752","title":"mutable \u548c immutable"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#immutable","text":"\u795e\u8bdd\uff1aPython\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u914d\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u503c\u3002 \u56e0\u4e3amutable\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0cimmutable\u5bf9\u8c61\u4e0d\u53ef\u53d8\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97mutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u7684\u503c\u5206\u914d\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cmutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u6240\u6709\u7684\u8d4b\u503c\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 mutable\u3001immutable\u53ea\u662fpython\u8bed\u8a00\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u4ece\u786c\u4ef6\u89d2\u5ea6\u8bf4\uff0c\u786c\u4ef6\u63d0\u4f9b\u7ed9\u7528\u6237\u7684\u63a5\u53e3\u662f\u6309\u7167\u89c4\u5b9a\u8bbe\u5b9a\u597d\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u64cd\u4f5c\u5185\u5b58\u7684\u65b9\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u3002\u5b9e\u73b0python\u7684mutable\u3001immutable\u5c31\u662f\u8c03\u7528\u4e86\u4e0d\u540c\u7684\u5e95\u5c42API\uff0c\u6216\u8005\u662f\u4e0d\u540c\u5e95\u5c42API\u76f8\u4e92\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\u3002python\u5c06\u8fd9\u4e9b\u89c4\u5b9a\u4ee5python\u8bed\u6cd5\u7684\u5f62\u5f0f\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u6700\u540e\u8fd8\u662f\u7f16\u8bd1\u62100\u30011\u53bb\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5bf9\u8c61\u662f\u8bed\u8a00\u63d0\u4f9b\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e9b\u529f\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u5176\u5b9e\u662f\u6ca1\u533a\u522b\u7684\u3002 \u56e0\u6b64\uff0cmutable\u548cimmutable\u7684\u672c\u8d28\u533a\u522b\u662fPython\u6709\u6ca1\u6709\u63d0\u4f9b\u4fee\u6539\u503c\u7684\u65b9\u6cd5\u3002 \u4e0d\u7ba1\u662f\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0cPython\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5c06\u5bf9\u8c61\u7ed1\u5b9a\u5230\u540d\u5b57\uff08\u53c2\u89c1\u4e0a\u9762\u7684\u56fe\u793a\u548c\u793a\u4f8b\u4ee3\u7801\uff09\u3002","title":"immutable\u7684\u672c\u8d28"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_2","text":"\u795e\u8bdd\uff1a\u503c\u662f\u6709\u8303\u56f4\u7684\u3002 \u5728python\u4e2d\u5b58\u5728\u4f5c\u7528\u57df\u8fd9\u6837\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u4f5c\u7528\u57df\u6307\u7684\u662f\u503c\uff08\u5bf9\u8c61\uff09\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c \u503c\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff0c\u4f5c\u7528\u57df\u6307\u7684\u662f\u540d\u79f0\u7684\u4f5c\u7528\u8303\u56f4\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e0e\u9a8c\u8bc1\u8fd9\u70b9\u3002 def check_name_space_range ( x ): print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) # \u5148\u5728\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u8d4b\u503c\uff0c\u5e76\u6253\u5370\u5730\u5740 a = 10 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) check_name_space_range ( a ) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140728401826912 x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140728401826912 \u5f88\u660e\u663e\uff0c\u5728\u5185\u5916\u5c42\u4f5c\u7528\u57df\u7684\u503c\u90fd\u662f\u540c\u4e00\u4e2a\u3002 \u9677\u9631\uff1a\u56e0\u4e3a\u503c\u6ca1\u6709\u8303\u56f4\uff0c\u5e76\u4e14\u8d4b\u503c\u4e0d\u4f1a\u590d\u5236\u503c\uff0c\u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u53ef\u53d8\u5bf9\u8c61\u88ab\u610f\u5916\u5730\u6539\u53d8\uff1a def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] \u53ef\u4ee5\u770b\u5230\uff0c a \u3001 a_other \u90fd\u88ab\u6539\u53d8\u4e86\uff0c\u56e0\u4e3a a \u3001 a_other \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694877001032 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694877001032 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5728\u51fd\u6570\u91cc\u9762\u66f4\u6539\u53ef\u53d8\u5bf9\u8c61\u53c2\u6570\u7684\u503c\uff0c\u6700\u597d\u590d\u5236\u4e00\u4e2a\u526f\u672c\u3002 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694876642120 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694876641288 a \u7684\u503c\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u770b\u4f3c\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u8fd8\u662f\u4f1a\u6709\u65b0\u7684\u201d\u60ca\u559c\u201c\u3002 \u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0b variable_change_shallow \u51fd\u6570 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694877003720 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1694876445576 \u201d\u60ca\u559c\u201c\u5c31\u662f a \u7684\u503c\u4e5f\u6539\u53d8\u4e86\u3002\u56e0\u4e3a x.copy() \u53ea\u662f\u6d45\u62f7\u8d1d\u3002 \u5728python\u91cc\u9762\u6709\u4e09\u79cd\u65b9\u5f0f\u53bb\u5f15\u7528\u67d0\u4e2a\u503c\uff1a \u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf \u6d45\u62f7\u8d1d \u6df1\u62f7\u8d1d \u8fd9\u4e09\u79cd\u65b9\u5f0f\u662f\u6709\u533a\u522b\u7684\u3002 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) \u53d8\u91cf a \u548c a_reference \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u6d45\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_shallow \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46 a_shallow \u7684\u7b2c\u4e09\u4e2a\u5143\u7d20 a_shallow[2] \u5374\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u8fd9\u548c a \u3001 a_reference \u4e00\u6837\u3002 \u6df1\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_deep_copy \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e5f\u662f\u65b0\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u6d45\u62f7\u8d1d\u7684\u5bf9\u8c61\u5305\u542b\u4e86mutable\u5bf9\u8c61\uff0c\u5219mutable\u5bf9\u8c61\u4e0d\u4f1a\u62f7\u8d1d\uff1b\u800c\u6df1\u62f7\u8d1d\u5219\u4f1a\u5b8c\u6574\u62f7\u8d1d\u5bf9\u8c61\u3002","title":"\u8d4b\u503c\u9677\u9631\u2014\u2014\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_3","text":"\u4ee5\u4e0a\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528\u540d\u79f0\u4f5c\u4e3a\u503c\u7684\u5f15\u7528\uff0c\u4f46\u5f15\u7528\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e1c\u897f\u3002 Python\u6709\u8bb8\u591a\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7ed3\u6784\u90fd\u5305\u542b\u5bf9\u503c\u7684\u5f15\u7528\uff1a\u5217\u8868\u5143\u7d20\uff0c\u5b57\u5178\u952e\u548c\u503c\uff0c\u5bf9\u8c61\u5c5e\u6027\u7b49\u3002 \u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5728\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u4fa7\u4f7f\u7528\uff0c\u4ee5\u4e0a\u6240\u6709\u7ec6\u8282\u90fd\u9002\u7528\u4e8e\u5b83\u4eec\u3002 \u4efb\u4f55\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u5de6\u4fa7\u7684\u5185\u5bb9\u90fd\u662f\u5f15\u7528 \uff0c\u5728\u672c\u6587\u4e2d\u8bf4\u201c\u540d\u79f0\u201d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u7528\u201c\u5f15\u7528\u201d\u66ff\u6362\u3002 \u5728\u4e0a\u9762\u7684\u793a\u610f\u56fe\u4e2d\uff0c\u6570\u5b57\u88ab\u663e\u793a\u4e3a\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5bf9\u6570\u5b57\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\u7ed8\u5236\uff1a nums = [ 1 , 2 , 3 ] \u4f46\u8fd9\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ed8\u56fe\u7528\u4e86\u89c6\u89c9\u901f\u8bb0\uff1a \u5982\u679c\u4f60\u6709\u5217\u8868\u5143\u7d20\u5f15\u7528\u5176\u4ed6\u53ef\u53d8\u503c\uff0c\u4f8b\u5982\u5b50\u5217\u8868\uff0c\u8bf7\u52a1\u5fc5\u8bb0\u4f4f\u5217\u8868\u5143\u7d20\u53ea\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u8fd9\u662f\u4e00\u4e9b\u5176\u4ed6assignment\u7684\u4f8b\u5b50\u3002\u8fd9\u4e9b\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5f15\u7528\uff08reference\uff09\uff1a my_obj . attr = 23 # \u7c7b\u5c5e\u6027 my_dict [ key ] = 24 # \u5b57\u5178 my_list [ index ] = 25 # \u5217\u8868 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" # \u591a\u4e2a\u5bf9\u8c61\u5d4c\u5957 i = x \u6307\u5b9a\u4e86\u540d\u79f0 i \uff0c\u4f46 i[0] = x \u5e76\u4e0d\u662f\u6307\u5b9a\u540d\u79f0 i \uff0c\u800c\u662f\u6307\u5b9a\u4e86 i \u7684\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5f88\u591a\u4e1c\u897f\u90fd\u662fAssignment\u3002 \u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c\u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f15\u7528\uff0cpython\u91cc\u9762\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f5c\u4e3aassignments\u3002 \u8fd9\u4e9b\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u540d\u79f0 X \u7684\u8d4b\u503c\uff1a X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X \u6ce8\u610f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u8bed\u53e5\u50cfassignments\uff0c\u6211\u7684\u610f\u601d\u662f\u8fd9\u4e9b\u8bed\u53e5\u90fd\u662f\u8d4b\u503c\u3002\u5b83\u4eec\u90fd\u4f7f\u540d\u79f0 X \u5f15\u7528\u67d0\u4e2a\u503c\u3002\u4e0a\u9762\u6240\u8bf4\u7684\u5173\u4e8e\u8d4b\u503c\u7684\u6240\u6709\u5185\u5bb9\u90fd\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u8d4b\u503c\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bed\u53e5\u5c06 X \u5b9a\u4e49\u5728\u4e0e\u8bed\u53e5\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002Python 2\u548cPython 3\u4e4b\u95f4\u7684\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002\u4f46\u5b83\u4eec\u90fd\u662f\u771f\u6b63\u7684\u8d4b\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4e8b\u5b9e\u90fd\u662f\u5173\u4e8e\u8d4b\u503c\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u3002 Python\u901a\u8fc7\u8d4b\u503c\u6765\u4f20\u9012\u51fd\u6570\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e9b\u4e0a\u9762assignment\u5217\u8868\u4e2d\u6700\u6709\u8da3\u7684\u4e00\u4e2a\uff1a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6211\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u5c06\u5176\u53c2\u6570\u547d\u540d\u4e3a\uff1a def my_func ( x , y ): return x + y \u8fd9\u91cc x \u548c y \u662f\u51fd\u6570 my_func \u7684\u53c2\u6570\u3002\u5f53\u6211\u8c03\u7528 my_func \u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u5b9e\u9645\u503c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u503c\u5206\u914d\u7ed9 \u53c2\u6570\u540d\u79f0 \uff0c\u5c31\u50cf\u4f7f\u7528\u4e86\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\uff1a def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 \u8c03\u7528 my_func \u65f6\uff0c8\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 x \uff0c9\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 y \u3002\u8be5\u8d4b\u503c\u4e0e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u7b80\u5355\u8d4b\u503c\u8bed\u53e5\u5b8c\u5168\u76f8\u540c\u3002\u540d\u79f0 x \u548c y \u662f\u51fd\u6570\u7684\u672c\u5730\u540d\u79f0\uff08local\uff09\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c31\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u503c\u4ecd\u7136\u88ab\u5176\u4ed6\u540d\u79f0\u5f15\u7528\uff0c\u5219\u503c\u4ecd\u7136\u5b58\u5728\u3002 \u5c31\u50cf\u6240\u6709\u5176\u4ed6\u8d4b\u503c\u4e00\u6837\uff0c\u53ef\u53d8\u503c\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5e76\u4e14\u901a\u8fc7\u5176\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u5bf9\u503c\u7684\u66f4\u6539\u3002","title":"\u8d4b\u503c\u9677\u9631\u2014\u2014\u5f15\u7528\u4e0d\u4ec5\u4ec5\u9650\u4e8e\u540d\u79f0"},{"location":"Python%E5%9F%BA%E7%A1%80/2.10.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_4","text":"\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u3002\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002\u540d\u79f0\u53ef\u4ee5\u5f15\u7528\u6574\u6570\uff0c\u7136\u540e\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5f15\u7528\u51fd\u6570\uff0c\u7136\u540e\u5f15\u7528\u6a21\u5757\u3002\u5f53\u7136\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6df7\u4e71\u7684\u7a0b\u5e8f\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46Python\u8bed\u8a00\u4e0d\u4f1a\u4ecb\u610f\u3002 \u540d\u79f0\u6ca1\u6709\u7c7b\u578b\uff0c\u503c\u6ca1\u6709\u8303\u56f4\u3002 \u6b63\u5982\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u503c\u4e5f\u6ca1\u6709\u8303\u56f4\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u8be5\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\uff1a\u4f60\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u8be5\u540d\u79f0\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u540d\u79f0\u5c06\u88ab\u9500\u6bc1\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5982\u679c\u540d\u79f0\u7684\u503c\u5177\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u5916\u3002\u5b83\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u672c\u5730\u503c\u3002 \u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u6709\u540d\u79f0\u53ef\u4ee5\u5220\u9664\u3002 Python\u7684\u5185\u5b58\u7ba1\u7406\u5bf9\u5176\u884c\u4e3a\u81f3\u5173\u91cd\u8981\uff0c\u4f60\u4e0d\u4ec5\u4e0d\u5fc5\u5220\u9664\u503c\uff0c\u800c\u4e14\u65e0\u6cd5\u5220\u9664\u503c\u3002 nums = [ 1 , 2 , 3 ] del nums \u8fd9\u4e0d\u4f1a\u5220\u9664\u503c nums \uff0c\u5b83\u4f1a\u5220\u9664\u540d\u79f0 nums \u3002\u8be5\u540d\u79f0\u5c06\u4ece\u5176\u8303\u56f4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u5e38\u7684\u5f15\u7528\u8ba1\u6570\u5f00\u59cb\u6267\u884c\uff1a\u5982\u679c nums \u7684\u503c\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u5c06\u56de\u6536\u8be5\u503c\u3002\u4f46\u5982\u679c\u5b83\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 \u795e\u8bdd\uff1aPython\u6ca1\u6709\u53d8\u91cf\u3002 \u6709\u4e9b\u4eba\u559c\u6b22\u8bf4\uff0c\u201cPython\u6ca1\u6709\u53d8\u91cf\uff0c\u5b83\u6709\u540d\u5b57\u3002\u201d\u8fd9\u4e2a\u53e3\u53f7\u5177\u6709\u8bef\u5bfc\u6027\u3002\u4e8b\u5b9e\u662fPython\u6709\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eC\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\u3002 \u540d\u79f0\u662fPython\u7684\u53d8\u91cf\uff1a\u5b83\u4eec\u5f15\u7528\u503c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u503c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u53d8\u5316\uff08\u53d8\u5316\uff09\u3002\u4ec5\u4ec5\u56e0\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u5c3d\u7ba1\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8bed\u8a00\uff09\u8868\u73b0\u4e0d\u540c\uff0c\u6ca1\u6709\u7406\u7531\u5c06Python\u63cf\u8ff0\u4e3a\u6ca1\u6709\u53d8\u91cf\u3002","title":"\u540d\u79f0\u548c\u503c\u7684\u4e00\u4e9b\u7ec6\u8282"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html","text":"\u51fd\u6570 \u5173\u952e\u5b57 def \u5f15\u5165\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u3002\u540e\u9762\u5fc5\u987b\u8ddf\u4e0a\u51fd\u6570\u540d\u548c\u5728\u5706\u62ec\u53f7\u91cc\u7684\u53c2\u6570\u5e8f\u5217\u3002\u51fd\u6570\u4f53\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u7f29\u8fdb\u3002 def func (): pass \u51fd\u5f0f\u4f53\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3002\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff08docstring\uff09\u3002\u6709\u5f88\u591a\u80fd\u5c06\u6587\u6863\u5b57\u4e32\u81ea\u52a8\u8f6c\u6362\u4e3a\u5728\u7ebf\u6216\u53ef\u6253\u5370\u6587\u6863\u7684\u5de5\u5177\uff0c\u6216\u8ba9\u7528\u6237\u5728\u4ee3\u7801\u4e2d\u4ea4\u4e92\u5730\u6d4f\u89c8\u5b83\u7684\u5de5\u5177\u3002 \u6267\u884c\u51fd\u6570\u4f1a\u5f15\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u6240\u6709\u5728\u51fd\u6570\u4e2d\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u548c\u503c\u90fd\u5c06\u5b58\u50a8\u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u53d8\u91cf\u5f15\u7528\u4f1a\u9996\u5148\u5728\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u5bfb\u627e\uff0c\u7136\u540e\u624d\u662f\u95ed\u5305\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u518d\u7136\u540e\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6700\u540e\u662f\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u3002\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\u5f15\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u53ef\u76f4\u63a5\u8d4b\u503c (\u9664\u975e\u7528 global \u8bed\u53e5\u8fdb\u884c\u58f0\u660e)\u3002 \u5177\u4f53\u7ec6\u8282\u53c2\u8003 \u300a3.2\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u300b \u3002 \u6839\u636e\u5176\u5b83\u8bed\u8a00\u7684\u7ecf\u9a8c\uff0c\u4f60\u53ef\u80fd\u4f1a\u6307\u51fa func \u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u8fd4\u56de\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u6ca1\u6709\u5199 return \u8bed\u53e5\u7684\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u2014\u2014 None \u3002\u5982\u679c\u8981\u552f\u4e00\u8f93\u51fa\u7684\u503c\u662f None\uff0c\u90a3\u4e48\u89e3\u91ca\u5668\u4f1a\u6b63\u5f53\u7684\u6291\u5236\u8fd9\u6b21\u8fd4\u56de\u3002\u5982\u4f60\u5b9e\u5728\u60f3\u770b\u770b\u8fd9\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 print() \u51fd\u6570\u3002 \u51fd\u6570\u4f20\u53c2 \u521a\u5b66Python\u7684\u4eba\u53ef\u80fd\u4f1a\u7591\u60d1\uff0cPython\u51fd\u6570\u4f20\u53c2\uff0c\u5230\u5e95\u662f\u4f20\u503c\uff0c\u8fd8\u662f\u4f20\u5f15\u7528\uff0c\u751a\u81f3\u662f\u4f20\u6307\u9488\uff1f\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6700\u540e\u4e00\u79cd\u60c5\u51b5\uff08\u5373\u4f20\u6307\u9488\uff09\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3aPython\u6ca1\u6709\u660e\u663e\u4f7f\u7528\u6307\u9488\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u8bf4Python\u672c\u8eab\u4e0d\u652f\u6301\u4f7f\u7528\u6307\u9488\uff08\u9664\u975e\u901a\u8fc7\u5bfc\u5165ctypes\u6a21\u5757\u6765\u4f7f\u7528\u6307\u9488\uff09\u3002 \u6392\u9664\u4e86\u4f20\u6307\u9488\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u95ee\u9898\u4f9d\u7136\u6709\u5f88\u591a\u4e89\u8bba\uff0c\u6709\u4eba\u8ba4\u4e3a\u662f\u4f20\u503c\uff0c\u6709\u4eba\u8ba4\u4e3a\u662f\u4f20\u5f15\u7528\uff0c\u6709\u4eba\u8ba4\u4e3a\u662f\u4e24\u8005\u90fd\u6709\uff0c\u4e5f\u6709\u4eba\u8ba4\u4e3a\u4e24\u8005\u90fd\u4e0d\u662f\uff0c\u800c\u662f\u4f20\u8d4b\u503c\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u4f20\u503c\u548c\u4f20\u5f15\u7528\u7684\u5b9a\u4e49\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u5bf9\u6b64\u7684\u4e89\u8bba\u5f52\u7ed3\u4e3a\u5bf9\u5b9a\u4e49\u7684\u5206\u6b67\u3002\u5728\u8ba1\u7b97\u673a\u9886\u57df\u4e2d\uff0c\u4eba\u4eec\u4e89\u8bba\u67d0\u79cd\u4e1c\u897f\u5f80\u5f80\u662f\u56e0\u4e3a\u4ed6\u4eec\u5bf9\u672f\u8bed\u7684\u542b\u4e49\u6709\u4e0d\u540c\u7684\u770b\u6cd5\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u4f7f\u7528\u6a21\u7cca\u4e14\u4e0d\u4e00\u81f4\u7684\u672f\u8bed\u6765\u5b9a\u4e49\u4e00\u4e2a\u6982\u5ff5\u3002 \u5982\u679c\u6839\u636eC++\u4e2d\u57fa\u4e8e\u8bed\u4e49\u7684\u5b9a\u4e49\uff1a \u5982\u679c\u5c06\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5219 = \u5bf9\u51fd\u6570\u5185\u90e8\u7684\u53c2\u6570\u8fdb\u884c\u7b80\u5355\u8d4b\u503c\u7684\u6548\u679c\u4e0e\u5bf9\u51fd\u6570\u5916\u90e8\u7684\u4f20\u9012\u53d8\u91cf\u8fdb\u884c\u7b80\u5355\u8d4b\u503c\u7684\u6548\u679c\u76f8\u540c\uff0c\u5373\u4e3a \u6309\u5f15\u7528\u4f20\u53c2 \u3002 \u5982\u679c\u5c06\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\uff0c = \u5bf9\u51fd\u6570\u5185\u90e8\u7684\u53c2\u6570\u8fdb\u884c\u7b80\u5355\u8d4b\u503c\u5bf9\u51fd\u6570\u5916\u90e8\u7684\u4f20\u9012\u53d8\u91cf\u6ca1\u6709\u5f71\u54cd\uff0c\u5219\u4e3a \u6309\u503c\u4f20\u53c2 \u3002 \u90a3\u4e48\uff0cPython\u7684\u51fd\u6570\u4f20\u53c2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4f20\u5f15\u7528\u548c\u4f20\u503c\u90fd\u6709\u3002 \u5982\u679c\u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u5e76\u4e14\u5bf9Python\u7684\u5185\u7f6e\u7c7b\u578b\u6309\u539f\u5b50\u7c7b\u578b\uff08\u503c\u7c7b\u578b\uff09\u548c\u5f15\u7528\u7c7b\u578b\u5206\u7c7b\u7684\u8bdd\uff0c\u90a3\u4e48Python\u7684\u51fd\u6570\u4f20\u53c2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4f20\u503c\u3002 \u5982\u679c\u57fa\u4e8e\u4ee5\u4e0b\u4e8b\u5b9e\uff1a Python\u8d4b\u503c\u7684\u672c\u8d28\u662f\u521b\u5efa\u522b\u540d \u5f15\u7528\u5373\u662f\u522b\u540d \u5219\u53ef\u4ee5\u8ba4\u4e3a\uff0cPython\u7684\u51fd\u6570\u4f20\u53c2\u662f\u4f20\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3aPython\u7684\u51fd\u6570\u4f20\u53c2\u662f\u4f20\u8d4b\u503c\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u5173\u5fc3\u4f7f\u7528\u54ea\u4e2a\u4f20\u53c2\u672f\u8bed\uff0c \u53ea\u9700\u8981\u77e5\u9053Python\u4f20\u53c2\u7684\u672c\u8d28\u662fassignment\u5373\u53ef\u3002 \u4f20\u53c2\u7684\u884c\u4e3a\u548c\u8d4b\u503c\u7684\u884c\u4e3a\u662f\u4e00\u6837\u7684\uff0c\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u300a 2.8.\u8d4b\u503c\u3001immutable\u3001\u6df1\u62f7\u8d1d \u300b\u3002 \u5728\u5bf9\u53ef\u53d8\u5bf9\u8c61\u7684\u53c2\u6570\u8fdb\u884c\u64cd\u4f5c\u524d\uff0c\u6700\u597d\u5148\u6df1\u62f7\u8d1d\u53c2\u6570\u7684\u503c\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f71\u54cd\u5168\u5c40\u53d8\u91cf\u3002 \u53c2\u8003 Are arguments passed by value or by reference in Python? In Python, if I type a=1 b=2 c=a c=b, what is the value of c? What does c point to? \u4ece\u7b26\u53f7\u8868\u6765\u7406\u89e3\u6307\u9488\u548c\u5f15\u7528 C\u4ee5\u53caPython\u4e2d\u7684\u5f15\u7528\uff0c\u6307\u9488\u7684\u533a\u522b Pointers in Python: What's the Point? \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 \u5728Python\u4e2d\uff0c\u51fd\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u3002\u8fd9\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff0c\u5982\u679c\u60a8\u5728\u5b66\u4e60C\u3001C++\u3001Python\u7b49\u8fd9\u4e9b\u8bed\u8a00\u4e4b\u524d\uff0c\u5c31\u5df2\u7ecf\u5728\u4f7f\u7528R\u8bed\u8a00\uff0c\u60a8\u53ef\u80fd\u66f4\u4f1a\u89c9\u5f97\u8fd9\u662f\u5f88\u7b26\u5408\u76f4\u89c9\u7684\u4e8b\u60c5\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u6709\u4e00\u4e9b\u8bed\u8a00\u662f\u4e0d\u652f\u6301\u76f4\u63a5\u5c06\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\uff0c\u4f8b\u5982C\u3001C++\u3001C#\u7b49\u3002 Python\u4e4b\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u662f\u56e0\u4e3a\u5728Python\u4e2d\uff0c\u51fd\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61 \u3002\u5982\u679c\u5728\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u8fd9\u4e2a\u8bed\u8a00\u5b83\u5177\u6709 first-class function \u3002\u8fd9\u610f\u5473\u7740\uff0c\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00\u5c06\u51fd\u6570\u89c6\u4f5c first-class citizen \u3002first-class citizen \u8fd9\u4e2a\u6982\u5ff5\u6700\u65e9\u7531\u82f1\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Christopher Strachey \u572820\u4e16\u7eaa60\u5e74\u4ee3\u63d0\u51fa\u3002\u548c\u5927\u591a\u8ba1\u7b97\u673a\u672f\u8bed\u4e00\u6837\uff0cfirst-class citizen \u5e76\u4e0d\u662f\u4e00\u4e2a\u660e\u786e\u7684\u6982\u5ff5\u3002first-class citizen\u6700\u8457\u540d\u7684\u5b9a\u4e49\u53ef\u80fd\u662fGerald Jay Sussman \u548c Harry Abelson \u5728\u300a Structure and Interpretation of Computer Programs \u300b\u4e2d\u63d0\u51fa\u7684\uff1a \u5982\u679c\u4e00\u4e2a\u7f16\u7a0b\u5143\u7d20\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff0c\u79f0\u4e4b\u4e3a first-class citizen \u5b83\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u3002 \u5b83\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u7a0b\u5e8f\u3002 \u5b83\u53ef\u4ee5\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u8fd4\u56de\u503c\u3002 \u5b83\u53ef\u4ee5\u88ab\u5305\u542b\u5728\u6570\u636e\u7ed3\u6784\u4e4b\u4e2d\u3002 \u57fa\u672c\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u7f16\u7a0b\u8bed\u8a00\u5143\u7d20\u6765\u5b8c\u6210\u60a8\u53ef\u4ee5\u4f7f\u7528\u8be5\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u5143\u7d20\u6765\u8fdb\u884c\u7684\u6240\u6709\u64cd\u4f5c\u3002 \u53c2\u8003 What are first-class objects in Java and C#? What is first class function in Python Are functions first class objects in python? \u5934\u7b49\u516c\u6c11 First-class Everything \u4e3a\u4ec0\u4e48\u5728\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u4e0d\u662f\u5bf9\u8c61\u5462\uff1f\u672c\u6587\u65e0\u6cd5\u5bf9\u6b64\u95ee\u9898\u8fdb\u884c\u6df1\u5165\u7684\u63a2\u7a76\uff0c\u4f46\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u7b80\u77ed\u7684\u89e3\u91ca\u3002\u51fd\u6570\u4e0e\u5bf9\u8c61\u7684\u533a\u522b\u5f52\u7ed3\u4e8e\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\u548c\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u662f\u4e25\u683c\u533a\u5206\u7684\uff0c\u8fd9\u4e0e\u8ba1\u7b97\u673a\u7684\u8bbe\u8ba1\u65b9\u5f0f\u6709\u5173\u3002 \u53c2\u8003 Why is a function not an object? \u53c2\u6570 \u51fd\u6570\u6709\u56db\u79cd\u53c2\u6570\u6982\u5ff5\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u3002 \u5176\u4e2d\uff0c\u4f4d\u7f6e\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u662f\u4f20\u5165\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\uff1b\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u662f\u5b9a\u4e49\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\u3002 \u51fd\u6570\u6709\u4e09\u79cd\u5408\u6cd5\u8c03\u7528\u5f62\u5f0f\uff1a \u4ec5\u7ed9\u51fa\u5f3a\u5236\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u5f3a\u5236\u53c2\u6570\u548c\u90e8\u5206\u53ef\u9009\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u53c2\u6570 \u4f4d\u7f6e\u53c2\u6570 \u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4ee5\u7701\u7565\u5f62\u53c2\u540d\u5b57\uff0c\u6839\u636e\u51fd\u6570\u5b9a\u4e49\u7684\u53c2\u6570\u4f4d\u7f6e\u6765\u4f20\u9012\u53c2\u6570\u3002\u4f20\u5165\u7684\u53c2\u6570\u987a\u5e8f\u5fc5\u987b\u548c\u5b9a\u4e49\u53c2\u6570\u7684\u987a\u5e8f\u4e00\u81f4\uff0c\u4e14\u5c11\u4e00\u4e2a\u53c2\u6570\u90fd\u4e0d\u53ef\u4ee5\u3002 def print_hello ( name , sex ): sex_dict = { 1 : u '\u5148\u751f' , 2 : u '\u5973\u58eb' } print ( 'hello %s %s , welcome to python world!' \\ % ( name , sex_dict . get ( sex , '\u5148\u751f' ))) print_hello ( 'Jack' , 1 ) hello Jack \u5148\u751f, welcome to python world! \u5173\u952e\u5b57\u53c2\u6570 \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u201c\u952e=\u503c\u201d\u5f62\u5f0f\u6307\u5b9a\u3002\u8fd9\u53ef\u4ee5\u8ba9\u51fd\u6570\u66f4\u52a0\u6e05\u6670\u3001\u5bb9\u6613\u4f7f\u7528\uff0c\u540c\u65f6\u5173\u952e\u5b57\u53c2\u6570\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u6307\u5b9a\u3002 # \u4ee5\u4e0b\u662f\u7528\u5173\u952e\u5b57\u53c2\u6570\u6b63\u786e\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u4f8b print_hello ( 'tanggu' , sex = 1 ) print_hello ( name = 'tanggu' , sex = 1 ) print_hello ( sex = 1 , name = 'tanggu' ) hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! # \u4ee5\u4e0b\u662f\u9519\u8bef\u7684\u8c03\u7528\u65b9\u5f0f print_hello ( 1 , name = 'tanggu' ) print_hello ( name = 'tanggu' , 1 ) print_hello ( sex = 1 , 'tanggu' ) \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff1a \u6709\u4f4d\u7f6e\u53c2\u6570\u65f6\uff0c\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u5728\u5173\u952e\u5b57\u53c2\u6570\u7684\u524d\u9762\uff0c\u4f46\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u95f4\u4e0d\u5b58\u5728\u5148\u540e\u987a\u5e8f\u7684 \u3002 \u9ed8\u8ba4\u53c2\u6570 \u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\uff0c\u4e3a\u53c2\u6570\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4f20\u53ef\u4e0d\u4f20\u8be5\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u51fa\u73b0\u5728\u9ed8\u8ba4\u53c2\u6570\u524d\uff0c\u5305\u62ec\u51fd\u6570\u5b9a\u4e49\u548c\u8c03\u7528\u3002 # \u6b63\u786e\u7684\u9ed8\u8ba4\u53c2\u6570\u5b9a\u4e49\u65b9\u5f0f--> \u4f4d\u7f6e\u53c2\u6570\u5728\u524d\uff0c\u9ed8\u8ba4\u53c2\u6570\u5728\u540e def print_hello ( name , sex = 1 ): .... # \u9519\u8bef\u7684\u5b9a\u4e49\u65b9\u5f0f def print_hello ( sex = 1 , name ): .... # \u8c03\u7528\u65f6\u4e0d\u4f20sex\u7684\u503c\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c1 # print_hello('tanggu') # \u8c03\u7528\u65f6\u4f20\u5165sex\u7684\u503c\uff0c\u5e76\u6307\u5b9a\u4e3a2 # print_hello('tanggu', 2) \u53ef\u53d8\u53c2\u6570 \u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u786e\u5b9a\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u4f20\u9012\u591a\u5c11\u4e2a\u53c2\u6570\uff08\u4e0d\u4f20\u53c2\u4e5f\u53ef\u4ee5\uff09\u3002\u6b64\u65f6\uff0c\u53ef\u7528\u5305\u88f9\uff08packing\uff09\u4f4d\u7f6e\u53c2\u6570\uff0c\u6216\u8005\u5305\u88f9\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6765\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u4f1a\u663e\u5f97\u975e\u5e38\u65b9\u4fbf\u3002 \u5305\u88f9\u4f4d\u7f6e\u4f20\u9012 def func ( * args ): .... \u2193 # func() # func(a) # func(a, b, c) \u6211\u4eec\u4f20\u8fdb\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab args \u53d8\u91cf\u6536\u96c6\uff0c\u5b83\u4f1a\u6839\u636e\u4f20\u8fdb\u53c2\u6570\u7684\u4f4d\u7f6e\u5408\u5e76\u4e3a\u4e00\u4e2a\u5143\u7ec4(tuple)\uff0c args \u662f\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u5305\u88f9\u4f4d\u7f6e\u4f20\u9012\u3002 \u5305\u88f9\u5173\u952e\u5b57\u4f20\u9012 def func ( ** kargs ): .... \u2193 # func(a=1) # func(a=1, b=2, c=3) kargs\u662f\u4e00\u4e2a\u5b57\u5178(dict)\uff0c\u6536\u96c6\u6240\u6709\u5173\u952e\u5b57\u53c2\u6570 \u89e3\u5305\u88f9\u53c2\u6570 * \u548c ** \uff0c\u4e5f\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u79f0\u4e4b\u4e3a\u89e3\u5305\u88f9(unpacking) \u5728\u4f20\u9012\u5143\u7ec4\u65f6\uff0c\u8ba9\u5143\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 def print_hello ( name , sex ): print name , sex # args = ('tanggu', '\u7537') # print_hello(*args) # tanggu \u7537 \u5728\u4f20\u9012\u5b57\u5178\u65f6\uff0c\u8ba9\u5b57\u5178\u7684\u6bcf\u4e2a\u952e\u503c\u5bf9\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 def print_hello ( kargs ): print kargs # kargs = {'name': 'tanggu', 'sex', u'\u7537'} # print_hello(**kargs) # {'name': 'tanggu', 'sex', u'\u7537'} \u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u7684\u6df7\u5408\u4f7f\u7528 \u987a\u5e8f\u662f\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5305\u88f9\u4f4d\u7f6e\u3001\u5305\u88f9\u5173\u952e\u5b57\uff0c\u5b9a\u4e49\u548c\u8c03\u7528\u90fd\u5e94\u9075\u5faa\u8fd9\u4e2a\u987a\u5e8f\u3002 def func ( name , age , sex = 1 , * args , ** kargs ): print name , age , sex , args , kargs # func('tanggu', 25, 2, 'music', 'sport', class=2) # tanggu 25 1 ('music', 'sport') {'class'=2}","title":"2.11.\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_1","text":"\u5173\u952e\u5b57 def \u5f15\u5165\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u3002\u540e\u9762\u5fc5\u987b\u8ddf\u4e0a\u51fd\u6570\u540d\u548c\u5728\u5706\u62ec\u53f7\u91cc\u7684\u53c2\u6570\u5e8f\u5217\u3002\u51fd\u6570\u4f53\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u7f29\u8fdb\u3002 def func (): pass \u51fd\u5f0f\u4f53\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3002\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff08docstring\uff09\u3002\u6709\u5f88\u591a\u80fd\u5c06\u6587\u6863\u5b57\u4e32\u81ea\u52a8\u8f6c\u6362\u4e3a\u5728\u7ebf\u6216\u53ef\u6253\u5370\u6587\u6863\u7684\u5de5\u5177\uff0c\u6216\u8ba9\u7528\u6237\u5728\u4ee3\u7801\u4e2d\u4ea4\u4e92\u5730\u6d4f\u89c8\u5b83\u7684\u5de5\u5177\u3002 \u6267\u884c\u51fd\u6570\u4f1a\u5f15\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u6240\u6709\u5728\u51fd\u6570\u4e2d\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u548c\u503c\u90fd\u5c06\u5b58\u50a8\u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u53d8\u91cf\u5f15\u7528\u4f1a\u9996\u5148\u5728\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u5bfb\u627e\uff0c\u7136\u540e\u624d\u662f\u95ed\u5305\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u518d\u7136\u540e\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6700\u540e\u662f\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u3002\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\u5f15\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u53ef\u76f4\u63a5\u8d4b\u503c (\u9664\u975e\u7528 global \u8bed\u53e5\u8fdb\u884c\u58f0\u660e)\u3002 \u5177\u4f53\u7ec6\u8282\u53c2\u8003 \u300a3.2\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u300b \u3002 \u6839\u636e\u5176\u5b83\u8bed\u8a00\u7684\u7ecf\u9a8c\uff0c\u4f60\u53ef\u80fd\u4f1a\u6307\u51fa func \u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u8fd4\u56de\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u6ca1\u6709\u5199 return \u8bed\u53e5\u7684\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u2014\u2014 None \u3002\u5982\u679c\u8981\u552f\u4e00\u8f93\u51fa\u7684\u503c\u662f None\uff0c\u90a3\u4e48\u89e3\u91ca\u5668\u4f1a\u6b63\u5f53\u7684\u6291\u5236\u8fd9\u6b21\u8fd4\u56de\u3002\u5982\u4f60\u5b9e\u5728\u60f3\u770b\u770b\u8fd9\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 print() \u51fd\u6570\u3002","title":"\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_2","text":"\u521a\u5b66Python\u7684\u4eba\u53ef\u80fd\u4f1a\u7591\u60d1\uff0cPython\u51fd\u6570\u4f20\u53c2\uff0c\u5230\u5e95\u662f\u4f20\u503c\uff0c\u8fd8\u662f\u4f20\u5f15\u7528\uff0c\u751a\u81f3\u662f\u4f20\u6307\u9488\uff1f\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6700\u540e\u4e00\u79cd\u60c5\u51b5\uff08\u5373\u4f20\u6307\u9488\uff09\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3aPython\u6ca1\u6709\u660e\u663e\u4f7f\u7528\u6307\u9488\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u8bf4Python\u672c\u8eab\u4e0d\u652f\u6301\u4f7f\u7528\u6307\u9488\uff08\u9664\u975e\u901a\u8fc7\u5bfc\u5165ctypes\u6a21\u5757\u6765\u4f7f\u7528\u6307\u9488\uff09\u3002 \u6392\u9664\u4e86\u4f20\u6307\u9488\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u95ee\u9898\u4f9d\u7136\u6709\u5f88\u591a\u4e89\u8bba\uff0c\u6709\u4eba\u8ba4\u4e3a\u662f\u4f20\u503c\uff0c\u6709\u4eba\u8ba4\u4e3a\u662f\u4f20\u5f15\u7528\uff0c\u6709\u4eba\u8ba4\u4e3a\u662f\u4e24\u8005\u90fd\u6709\uff0c\u4e5f\u6709\u4eba\u8ba4\u4e3a\u4e24\u8005\u90fd\u4e0d\u662f\uff0c\u800c\u662f\u4f20\u8d4b\u503c\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u4f20\u503c\u548c\u4f20\u5f15\u7528\u7684\u5b9a\u4e49\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u5bf9\u6b64\u7684\u4e89\u8bba\u5f52\u7ed3\u4e3a\u5bf9\u5b9a\u4e49\u7684\u5206\u6b67\u3002\u5728\u8ba1\u7b97\u673a\u9886\u57df\u4e2d\uff0c\u4eba\u4eec\u4e89\u8bba\u67d0\u79cd\u4e1c\u897f\u5f80\u5f80\u662f\u56e0\u4e3a\u4ed6\u4eec\u5bf9\u672f\u8bed\u7684\u542b\u4e49\u6709\u4e0d\u540c\u7684\u770b\u6cd5\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u4f7f\u7528\u6a21\u7cca\u4e14\u4e0d\u4e00\u81f4\u7684\u672f\u8bed\u6765\u5b9a\u4e49\u4e00\u4e2a\u6982\u5ff5\u3002 \u5982\u679c\u6839\u636eC++\u4e2d\u57fa\u4e8e\u8bed\u4e49\u7684\u5b9a\u4e49\uff1a \u5982\u679c\u5c06\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5219 = \u5bf9\u51fd\u6570\u5185\u90e8\u7684\u53c2\u6570\u8fdb\u884c\u7b80\u5355\u8d4b\u503c\u7684\u6548\u679c\u4e0e\u5bf9\u51fd\u6570\u5916\u90e8\u7684\u4f20\u9012\u53d8\u91cf\u8fdb\u884c\u7b80\u5355\u8d4b\u503c\u7684\u6548\u679c\u76f8\u540c\uff0c\u5373\u4e3a \u6309\u5f15\u7528\u4f20\u53c2 \u3002 \u5982\u679c\u5c06\u53d8\u91cf\u4f20\u9012\u7ed9\u51fd\u6570\uff0c = \u5bf9\u51fd\u6570\u5185\u90e8\u7684\u53c2\u6570\u8fdb\u884c\u7b80\u5355\u8d4b\u503c\u5bf9\u51fd\u6570\u5916\u90e8\u7684\u4f20\u9012\u53d8\u91cf\u6ca1\u6709\u5f71\u54cd\uff0c\u5219\u4e3a \u6309\u503c\u4f20\u53c2 \u3002 \u90a3\u4e48\uff0cPython\u7684\u51fd\u6570\u4f20\u53c2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4f20\u5f15\u7528\u548c\u4f20\u503c\u90fd\u6709\u3002 \u5982\u679c\u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u5e76\u4e14\u5bf9Python\u7684\u5185\u7f6e\u7c7b\u578b\u6309\u539f\u5b50\u7c7b\u578b\uff08\u503c\u7c7b\u578b\uff09\u548c\u5f15\u7528\u7c7b\u578b\u5206\u7c7b\u7684\u8bdd\uff0c\u90a3\u4e48Python\u7684\u51fd\u6570\u4f20\u53c2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4f20\u503c\u3002 \u5982\u679c\u57fa\u4e8e\u4ee5\u4e0b\u4e8b\u5b9e\uff1a Python\u8d4b\u503c\u7684\u672c\u8d28\u662f\u521b\u5efa\u522b\u540d \u5f15\u7528\u5373\u662f\u522b\u540d \u5219\u53ef\u4ee5\u8ba4\u4e3a\uff0cPython\u7684\u51fd\u6570\u4f20\u53c2\u662f\u4f20\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3aPython\u7684\u51fd\u6570\u4f20\u53c2\u662f\u4f20\u8d4b\u503c\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u5173\u5fc3\u4f7f\u7528\u54ea\u4e2a\u4f20\u53c2\u672f\u8bed\uff0c \u53ea\u9700\u8981\u77e5\u9053Python\u4f20\u53c2\u7684\u672c\u8d28\u662fassignment\u5373\u53ef\u3002 \u4f20\u53c2\u7684\u884c\u4e3a\u548c\u8d4b\u503c\u7684\u884c\u4e3a\u662f\u4e00\u6837\u7684\uff0c\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u300a 2.8.\u8d4b\u503c\u3001immutable\u3001\u6df1\u62f7\u8d1d \u300b\u3002 \u5728\u5bf9\u53ef\u53d8\u5bf9\u8c61\u7684\u53c2\u6570\u8fdb\u884c\u64cd\u4f5c\u524d\uff0c\u6700\u597d\u5148\u6df1\u62f7\u8d1d\u53c2\u6570\u7684\u503c\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f71\u54cd\u5168\u5c40\u53d8\u91cf\u3002 \u53c2\u8003 Are arguments passed by value or by reference in Python? In Python, if I type a=1 b=2 c=a c=b, what is the value of c? What does c point to? \u4ece\u7b26\u53f7\u8868\u6765\u7406\u89e3\u6307\u9488\u548c\u5f15\u7528 C\u4ee5\u53caPython\u4e2d\u7684\u5f15\u7528\uff0c\u6307\u9488\u7684\u533a\u522b Pointers in Python: What's the Point?","title":"\u51fd\u6570\u4f20\u53c2"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_3","text":"\u5728Python\u4e2d\uff0c\u51fd\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u3002\u8fd9\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff0c\u5982\u679c\u60a8\u5728\u5b66\u4e60C\u3001C++\u3001Python\u7b49\u8fd9\u4e9b\u8bed\u8a00\u4e4b\u524d\uff0c\u5c31\u5df2\u7ecf\u5728\u4f7f\u7528R\u8bed\u8a00\uff0c\u60a8\u53ef\u80fd\u66f4\u4f1a\u89c9\u5f97\u8fd9\u662f\u5f88\u7b26\u5408\u76f4\u89c9\u7684\u4e8b\u60c5\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u6709\u4e00\u4e9b\u8bed\u8a00\u662f\u4e0d\u652f\u6301\u76f4\u63a5\u5c06\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\uff0c\u4f8b\u5982C\u3001C++\u3001C#\u7b49\u3002 Python\u4e4b\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u662f\u56e0\u4e3a\u5728Python\u4e2d\uff0c\u51fd\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61 \u3002\u5982\u679c\u5728\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u8fd9\u4e2a\u8bed\u8a00\u5b83\u5177\u6709 first-class function \u3002\u8fd9\u610f\u5473\u7740\uff0c\u8fd9\u95e8\u7f16\u7a0b\u8bed\u8a00\u5c06\u51fd\u6570\u89c6\u4f5c first-class citizen \u3002first-class citizen \u8fd9\u4e2a\u6982\u5ff5\u6700\u65e9\u7531\u82f1\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Christopher Strachey \u572820\u4e16\u7eaa60\u5e74\u4ee3\u63d0\u51fa\u3002\u548c\u5927\u591a\u8ba1\u7b97\u673a\u672f\u8bed\u4e00\u6837\uff0cfirst-class citizen \u5e76\u4e0d\u662f\u4e00\u4e2a\u660e\u786e\u7684\u6982\u5ff5\u3002first-class citizen\u6700\u8457\u540d\u7684\u5b9a\u4e49\u53ef\u80fd\u662fGerald Jay Sussman \u548c Harry Abelson \u5728\u300a Structure and Interpretation of Computer Programs \u300b\u4e2d\u63d0\u51fa\u7684\uff1a \u5982\u679c\u4e00\u4e2a\u7f16\u7a0b\u5143\u7d20\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff0c\u79f0\u4e4b\u4e3a first-class citizen \u5b83\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u3002 \u5b83\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u7a0b\u5e8f\u3002 \u5b83\u53ef\u4ee5\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u8fd4\u56de\u503c\u3002 \u5b83\u53ef\u4ee5\u88ab\u5305\u542b\u5728\u6570\u636e\u7ed3\u6784\u4e4b\u4e2d\u3002 \u57fa\u672c\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u7f16\u7a0b\u8bed\u8a00\u5143\u7d20\u6765\u5b8c\u6210\u60a8\u53ef\u4ee5\u4f7f\u7528\u8be5\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u5143\u7d20\u6765\u8fdb\u884c\u7684\u6240\u6709\u64cd\u4f5c\u3002 \u53c2\u8003 What are first-class objects in Java and C#? What is first class function in Python Are functions first class objects in python? \u5934\u7b49\u516c\u6c11 First-class Everything \u4e3a\u4ec0\u4e48\u5728\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u4e0d\u662f\u5bf9\u8c61\u5462\uff1f\u672c\u6587\u65e0\u6cd5\u5bf9\u6b64\u95ee\u9898\u8fdb\u884c\u6df1\u5165\u7684\u63a2\u7a76\uff0c\u4f46\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u7b80\u77ed\u7684\u89e3\u91ca\u3002\u51fd\u6570\u4e0e\u5bf9\u8c61\u7684\u533a\u522b\u5f52\u7ed3\u4e8e\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\u548c\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u662f\u4e25\u683c\u533a\u5206\u7684\uff0c\u8fd9\u4e0e\u8ba1\u7b97\u673a\u7684\u8bbe\u8ba1\u65b9\u5f0f\u6709\u5173\u3002 \u53c2\u8003 Why is a function not an object?","title":"\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_4","text":"\u51fd\u6570\u6709\u56db\u79cd\u53c2\u6570\u6982\u5ff5\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u3002 \u5176\u4e2d\uff0c\u4f4d\u7f6e\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u662f\u4f20\u5165\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\uff1b\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u662f\u5b9a\u4e49\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\u3002 \u51fd\u6570\u6709\u4e09\u79cd\u5408\u6cd5\u8c03\u7528\u5f62\u5f0f\uff1a \u4ec5\u7ed9\u51fa\u5f3a\u5236\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u5f3a\u5236\u53c2\u6570\u548c\u90e8\u5206\u53ef\u9009\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u53c2\u6570","title":"\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_5","text":"\u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4ee5\u7701\u7565\u5f62\u53c2\u540d\u5b57\uff0c\u6839\u636e\u51fd\u6570\u5b9a\u4e49\u7684\u53c2\u6570\u4f4d\u7f6e\u6765\u4f20\u9012\u53c2\u6570\u3002\u4f20\u5165\u7684\u53c2\u6570\u987a\u5e8f\u5fc5\u987b\u548c\u5b9a\u4e49\u53c2\u6570\u7684\u987a\u5e8f\u4e00\u81f4\uff0c\u4e14\u5c11\u4e00\u4e2a\u53c2\u6570\u90fd\u4e0d\u53ef\u4ee5\u3002 def print_hello ( name , sex ): sex_dict = { 1 : u '\u5148\u751f' , 2 : u '\u5973\u58eb' } print ( 'hello %s %s , welcome to python world!' \\ % ( name , sex_dict . get ( sex , '\u5148\u751f' ))) print_hello ( 'Jack' , 1 ) hello Jack \u5148\u751f, welcome to python world!","title":"\u4f4d\u7f6e\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_6","text":"\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u201c\u952e=\u503c\u201d\u5f62\u5f0f\u6307\u5b9a\u3002\u8fd9\u53ef\u4ee5\u8ba9\u51fd\u6570\u66f4\u52a0\u6e05\u6670\u3001\u5bb9\u6613\u4f7f\u7528\uff0c\u540c\u65f6\u5173\u952e\u5b57\u53c2\u6570\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u6307\u5b9a\u3002 # \u4ee5\u4e0b\u662f\u7528\u5173\u952e\u5b57\u53c2\u6570\u6b63\u786e\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u4f8b print_hello ( 'tanggu' , sex = 1 ) print_hello ( name = 'tanggu' , sex = 1 ) print_hello ( sex = 1 , name = 'tanggu' ) hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! # \u4ee5\u4e0b\u662f\u9519\u8bef\u7684\u8c03\u7528\u65b9\u5f0f print_hello ( 1 , name = 'tanggu' ) print_hello ( name = 'tanggu' , 1 ) print_hello ( sex = 1 , 'tanggu' ) \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff1a \u6709\u4f4d\u7f6e\u53c2\u6570\u65f6\uff0c\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u5728\u5173\u952e\u5b57\u53c2\u6570\u7684\u524d\u9762\uff0c\u4f46\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u95f4\u4e0d\u5b58\u5728\u5148\u540e\u987a\u5e8f\u7684 \u3002","title":"\u5173\u952e\u5b57\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_7","text":"\u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\uff0c\u4e3a\u53c2\u6570\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4f20\u53ef\u4e0d\u4f20\u8be5\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u51fa\u73b0\u5728\u9ed8\u8ba4\u53c2\u6570\u524d\uff0c\u5305\u62ec\u51fd\u6570\u5b9a\u4e49\u548c\u8c03\u7528\u3002 # \u6b63\u786e\u7684\u9ed8\u8ba4\u53c2\u6570\u5b9a\u4e49\u65b9\u5f0f--> \u4f4d\u7f6e\u53c2\u6570\u5728\u524d\uff0c\u9ed8\u8ba4\u53c2\u6570\u5728\u540e def print_hello ( name , sex = 1 ): .... # \u9519\u8bef\u7684\u5b9a\u4e49\u65b9\u5f0f def print_hello ( sex = 1 , name ): .... # \u8c03\u7528\u65f6\u4e0d\u4f20sex\u7684\u503c\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c1 # print_hello('tanggu') # \u8c03\u7528\u65f6\u4f20\u5165sex\u7684\u503c\uff0c\u5e76\u6307\u5b9a\u4e3a2 # print_hello('tanggu', 2)","title":"\u9ed8\u8ba4\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_8","text":"\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u786e\u5b9a\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u4f20\u9012\u591a\u5c11\u4e2a\u53c2\u6570\uff08\u4e0d\u4f20\u53c2\u4e5f\u53ef\u4ee5\uff09\u3002\u6b64\u65f6\uff0c\u53ef\u7528\u5305\u88f9\uff08packing\uff09\u4f4d\u7f6e\u53c2\u6570\uff0c\u6216\u8005\u5305\u88f9\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6765\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u4f1a\u663e\u5f97\u975e\u5e38\u65b9\u4fbf\u3002","title":"\u53ef\u53d8\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_9","text":"def func ( * args ): .... \u2193 # func() # func(a) # func(a, b, c) \u6211\u4eec\u4f20\u8fdb\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab args \u53d8\u91cf\u6536\u96c6\uff0c\u5b83\u4f1a\u6839\u636e\u4f20\u8fdb\u53c2\u6570\u7684\u4f4d\u7f6e\u5408\u5e76\u4e3a\u4e00\u4e2a\u5143\u7ec4(tuple)\uff0c args \u662f\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u5305\u88f9\u4f4d\u7f6e\u4f20\u9012\u3002","title":"\u5305\u88f9\u4f4d\u7f6e\u4f20\u9012"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_10","text":"def func ( ** kargs ): .... \u2193 # func(a=1) # func(a=1, b=2, c=3) kargs\u662f\u4e00\u4e2a\u5b57\u5178(dict)\uff0c\u6536\u96c6\u6240\u6709\u5173\u952e\u5b57\u53c2\u6570","title":"\u5305\u88f9\u5173\u952e\u5b57\u4f20\u9012"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_11","text":"* \u548c ** \uff0c\u4e5f\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u79f0\u4e4b\u4e3a\u89e3\u5305\u88f9(unpacking) \u5728\u4f20\u9012\u5143\u7ec4\u65f6\uff0c\u8ba9\u5143\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 def print_hello ( name , sex ): print name , sex # args = ('tanggu', '\u7537') # print_hello(*args) # tanggu \u7537 \u5728\u4f20\u9012\u5b57\u5178\u65f6\uff0c\u8ba9\u5b57\u5178\u7684\u6bcf\u4e2a\u952e\u503c\u5bf9\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 def print_hello ( kargs ): print kargs # kargs = {'name': 'tanggu', 'sex', u'\u7537'} # print_hello(**kargs) # {'name': 'tanggu', 'sex', u'\u7537'}","title":"\u89e3\u5305\u88f9\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.11.%E5%87%BD%E6%95%B0.html#_12","text":"\u987a\u5e8f\u662f\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5305\u88f9\u4f4d\u7f6e\u3001\u5305\u88f9\u5173\u952e\u5b57\uff0c\u5b9a\u4e49\u548c\u8c03\u7528\u90fd\u5e94\u9075\u5faa\u8fd9\u4e2a\u987a\u5e8f\u3002 def func ( name , age , sex = 1 , * args , ** kargs ): print name , age , sex , args , kargs # func('tanggu', 25, 2, 'music', 'sport', class=2) # tanggu 25 1 ('music', 'sport') {'class'=2}","title":"\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u7684\u6df7\u5408\u4f7f\u7528"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.06.24 Python \u89e3\u91ca\u5668\u5185\u7f6e\u4e86\u5f88\u591a\u51fd\u6570\u548c\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u5b83\u4eec\u3002\u4ee5\u4e0b\u6309\u5b57\u6bcd\u8868\u987a\u5e8f\u5217\u51fa\u5b83\u4eec\u3002 \u5185\u7f6e\u51fd\u6570 abs() delattr() hash() memoryview() set() all() dict() help() min() setattr() any() dir() hex() next() slice() ascii() divmod() id() object() sorted() bin() enumerate() input() oct() staticmethod() bool() eval() int() open() str() breakpoint() exec() isinstance() ord() sum() bytearray() filter() issubclass() pow() super() bytes() float() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() A abs(x) \uff1a\u8fd4\u56de\u4e00\u4e2a\u6570\u7684\u7edd\u5bf9\u503c\u3002 \u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002 \u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u590d\u6570\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u6a21\u3002\u5982\u679c x \u5b9a\u4e49\u4e86 __abs__() \uff0c\u5219 abs(x) \u5c06\u8fd4\u56de x.__abs__() \u3002 class A : def __abs__ ( self ): return 10 abs ( A ()) 10 all(iterable) \uff1a\u5982\u679c iterable \u7684\u6240\u6709\u5143\u7d20\u5747\u4e3a\u771f\u503c\uff08\u6216\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\uff09\u5219\u8fd4\u56de True \u3002 \u7b49\u4ef7\u4e8e: def all ( iterable ): for element in iterable : if not element : return False return True any(iterable) \uff1a\u5982\u679c iterable \u7684\u4efb\u4e00\u5143\u7d20\u4e3a\u771f\u503c\u5219\u8fd4\u56de True \u3002 \u5982\u679c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u8fd4\u56de False \u3002 \u7b49\u4ef7\u4e8e: def any ( iterable ): for element in iterable : if element : return True return False ascii (object) \uff1a\u8fd4\u56de\u5bf9\u8c61\u7684ASCII\u8868\u793a\u5f62\u5f0f\u3002\u5c31\u50cf\u51fd\u6570 repr() \uff0c\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u53ef\u6253\u5370\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u662f repr() \u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d\u975e ASCII \u7f16\u7801\u7684\u5b57\u7b26\uff0c\u4f1a\u4f7f\u7528 \\x \u3001 \\u \u548c \\U \u6765\u8f6c\u4e49\u3002\u751f\u6210\u7684\u5b57\u7b26\u4e32\u548c Python 2 \u7684 repr() \u8fd4\u56de\u7684\u7ed3\u679c\u76f8\u4f3c\u3002 print ( ascii ( \"\u7f16\u7801\" )) print ( repr ( \"\u7f16\u7801\" )) '\\u7f16\\u7801' '\u7f16\u7801' B bin(x) \uff1a\u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u524d\u7f00\u4e3a\u201c0b\u201d\u7684==\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32== \u3002\u5982\u679c x \u4e0d\u662f Python \u7684 int \u5bf9\u8c61\uff0c\u90a3\u5b83\u9700\u8981\u5b9a\u4e49 __index__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002 print ( bin ( 2 )) print ( type ( bin ( 2 ))) eval ( bin ( 2 )) == 2 0b10 <class 'str'> True class B : def __index__ ( self ): return 10 bin ( B ()) '0b1010' class bool([x]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c True \u6216\u8005 False \u3002 bool \u7c7b\u662f int \u7684\u5b50\u7c7b\u3002\u5176\u4ed6\u7c7b\u4e0d\u80fd\u7ee7\u627f\u81ea\u5b83\u3002\u5b83\u53ea\u6709 False \u548c True \u4e24\u4e2a\u5b9e\u4f8b\uff08\u53c2\u89c1 \u5e03\u5c14\u503c \uff09\u3002 breakpoint(*args, \\**kws) \uff1a\u6b64\u51fd\u6570\u4f1a\u5728\u8c03\u7528\u65f6\u8fdb\u5165\u8c03\u8bd5\u5668\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u8c03\u7528 sys.breakpointhook() \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c sys.breakpointhook() \u8c03\u7528 pdb.set_trace() \u4e14\u6ca1\u6709\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u7eaf\u7cb9\u662f\u4e00\u4e2a\u4fbf\u5229\u51fd\u6570\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u663e\u5f0f\u5bfc\u5165 pdb \u4e14\u952e\u5165\u5c3d\u53ef\u80fd\u5c11\u7684\u4ee3\u7801\u5373\u53ef\u8fdb\u5165\u8c03\u8bd5\u5668\u3002\u4f46\u662f\uff0c sys.breakpointhook() \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u5176\u4ed6\u4e00\u4e9b\u51fd\u6570\u5e76\u88ab breakpoint() \u81ea\u52a8\u8c03\u7528\uff0c\u4ee5\u5141\u8bb8\u8fdb\u5165\u4f60\u60f3\u7528\u7684\u8c03\u8bd5\u5668\u3002 C callable(object) \uff1a\u5982\u679c\u53c2\u6570 object \u662f\u53ef\u8c03\u7528\u7684\u5c31\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u5982\u679c\u8fd4\u56de True \uff0c\u8c03\u7528\u4ecd\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u5982\u679c\u8fd4\u56de False \uff0c\u5219\u8c03\u7528 object \u5c06\u80af\u5b9a\u4e0d\u4f1a\u6210\u529f\u3002 def test (): raise Exception callable ( test ) True chr(i) \uff1a\u8fd4\u56de Unicode \u7801\u4f4d\u4e3a\u6574\u6570 i \u7684\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u8fd9\u662f ord() \u7684\u9006\u51fd\u6570\u3002\u5b9e\u53c2\u7684\u5408\u6cd5\u8303\u56f4\u662f 0 \u5230 1114111\uff0816 \u8fdb\u5236\u8868\u793a\u662f 0x10FFFF\uff09\u3002\u5982\u679c i \u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u4f1a\u89e6\u53d1 ValueError \u5f02\u5e38\u3002 print ( chr ( 97 )) print ( chr ( 8364 )) a \u20ac D delattr(object, name) \uff1a\u5982\u679c\u5bf9\u8c61\u5141\u8bb8\uff0c\u8be5\u51fd\u6570\u5c06\u5220\u9664\u6307\u5b9a\u7684\u5c5e\u6027\u3002\u4f8b\u5982 delattr(x, 'foobar') \u7b49\u4ef7\u4e8e del x.foobar \u3002 divmod(a, b) \uff1a\u5b83\u5c06\u4e24\u4e2a\uff08\u975e\u590d\u6570\uff09\u6570\u5b57\u4f5c\u4e3a\u5b9e\u53c2\uff0c\u5e76\u5728\u6267\u884c\u6574\u6570\u9664\u6cd5\u65f6\u8fd4\u56de\u4e00\u5bf9\u5546\u548c\u4f59\u6570\u3002\u5bf9\u4e8e\u6574\u6570\uff0c\u7ed3\u679c\u548c (a // b, a % b) \u4e00\u81f4\u3002\u5bf9\u4e8e\u6d6e\u70b9\u6570\uff0c\u7ed3\u679c\u662f (q, a % b) \uff0c q \u901a\u5e38\u662f math.floor(a / b) \uff0c\u4f46\u53ef\u80fd\u4f1a\u6bd4 1 \u5c0f\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c q * b + a % b \u548c a \u57fa\u672c\u76f8\u7b49\uff1b\u5982\u679c a % b \u975e\u96f6\uff0c\u5b83\u7684\u7b26\u53f7\u548c b \u4e00\u6837\uff0c\u5e76\u4e14 0 <= abs(a % b) < abs(b) \u3002 # \u6574\u6570 divmod ( 10 , 5 ) ( 10 // 5 , 10 % 5 ) # \u6d6e\u70b9\u6570 import math divmod ( 8.5 , 5 ) ( math . floor ( 8.5 / 5 ), 8.5 % 5 ) (1, 3.5) E enumerate(iterable, start=0) \uff1a\u8fd4\u56de\u4e00\u4e2a\u679a\u4e3e\u5bf9\u8c61\u3002 F filter(function, iterable) \uff1a\u7528 iterable \u4e2d\u51fd\u6570 function \u8fd4\u56de\u771f\u7684\u90a3\u4e9b\u5143\u7d20\uff0c\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u3002 filter(function, iterable) \u76f8\u5f53\u4e8e\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u5f53 function \u4e0d\u662f None \u7684\u65f6\u5019\u4e3a (item for item in iterable if function(item)) \uff1bfunction \u662f None \u7684\u65f6\u5019\u4e3a (item for item in iterable if item) \u3002\u8bf7\u53c2\u9605 itertools.filterfalse() \u4e86\u89e3\uff0c\u53ea\u6709 function \u8fd4\u56de false \u65f6\u624d\u9009\u53d6 iterable \u4e2d\u5143\u7d20\u7684\u8865\u5145\u51fd\u6570\u3002 class float([x]) \uff1a\u8fd4\u56de\u4ece\u6570\u5b57\u6216\u5b57\u7b26\u4e32 x \u751f\u6210\u7684\u6d6e\u70b9\u6570\u3002\u5982\u679c\u5b9e\u53c2\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u5b83\u5fc5\u987b\u662f\u5305\u542b\u5341\u8fdb\u5236\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u524d\u9762\u53ef\u4ee5\u6709\u7b26\u53f7\uff0c\u4e4b\u524d\u4e5f\u53ef\u4ee5\u6709\u7a7a\u683c\u3002\u53ef\u9009\u7684\u7b26\u53f7\u6709 '+' \u548c '-' \u3002 float ( \"+5\" ) float ( \" +5\" ) float ( \"NaN\" ) float ( \"Infinity\" ) float ( \"inf\" ) float ( '+1E6' ) class frozenset ([iterable]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 frozenset \u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u53ef\u9009\u53c2\u6570 iterable \u4e2d\u7684\u5143\u7d20\u3002 frozenset \u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u7c7b\u3002\u6709\u5173\u6b64\u7c7b\u7684\u6587\u6863\uff0c\u8bf7\u53c2\u9605 frozenset \u548c \u96c6\u5408\u7c7b\u578b --- set, frozenset \u3002\u8bf7\u53c2\u9605\u5185\u5efa\u7684 set \u3001 list \u3001 tuple \u548c dict \u7c7b\uff0c\u4ee5\u53ca collections \u6a21\u5757\u6765\u4e86\u89e3\u5176\u5b83\u7684\u5bb9\u5668\u3002 G getattr(object, name[, default]) \uff1a\u8fd4\u56de\u5bf9\u8c61\u547d\u540d\u5c5e\u6027\u7684\u503c\u3002\u5982\u679c\u6307\u5b9a\u7684\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u4e14\u63d0\u4f9b\u4e86 default \u503c\uff0c\u5219\u8fd4\u56de\u5b83\uff0c\u5426\u5219\u89e6\u53d1 AttributeError \u3002 H hasattr(object, name) \uff1a\u8be5\u5b9e\u53c2\u662f\u4e00\u4e2a\u5bf9\u8c61\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5982\u679c\u5b57\u7b26\u4e32\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\u4e4b\u4e00\u7684\u540d\u79f0\uff0c\u5219\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002\uff08\u6b64\u529f\u80fd\u662f\u901a\u8fc7\u8c03\u7528 getattr(object, name) \u770b\u662f\u5426\u6709 AttributeError \u5f02\u5e38\u6765\u5b9e\u73b0\u7684\u3002\uff09 hash(object) \uff1a\u8fd4\u56de\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\uff08\u5982\u679c\u5b83\u6709\u7684\u8bdd\uff09\u3002\u54c8\u5e0c\u503c\u662f\u6574\u6570\u3002 hex(x) \uff1a\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4ee5\u201c0x\u201d\u4e3a\u524d\u7f00\u7684\u5c0f\u5199\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 I id(object) \uff1a\u8fd4\u56de\u5bf9\u8c61\u7684\u201c\u6807\u8bc6\u503c\u201d\u3002\u8be5\u503c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5728\u6b64\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4e2d\u4fdd\u8bc1\u662f\u552f\u4e00\u4e14\u6052\u5b9a\u7684\u3002\u4e24\u4e2a\u751f\u547d\u671f\u4e0d\u91cd\u53e0\u7684\u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684 id() \u503c\u3002 CPython implementation detail: This is the address of the object in memory. input([prompt]) \uff1a\u5982\u679c\u5b58\u5728 prompt \u5b9e\u53c2\uff0c\u5219\u5c06\u5176\u5199\u5165\u6807\u51c6\u8f93\u51fa\uff0c\u672b\u5c3e\u4e0d\u5e26\u6362\u884c\u7b26\u3002\u63a5\u4e0b\u6765\uff0c\u8be5\u51fd\u6570\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u4e00\u884c\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff08\u9664\u4e86\u672b\u5c3e\u7684\u6362\u884c\u7b26\uff09\u5e76\u8fd4\u56de\u3002\u5f53\u8bfb\u53d6\u5230 EOF \u65f6\uff0c\u5219\u89e6\u53d1 EOFError \u3002 class int(x, base=10) \uff1a\u8fd4\u56de\u4e00\u4e2a\u57fa\u4e8e\u6570\u5b57\u6216\u5b57\u7b26\u4e32 x \u6784\u9020\u7684\u6574\u6570\u5bf9\u8c61\uff0c\u6216\u8005\u5728\u672a\u7ed9\u51fa\u53c2\u6570\u65f6\u8fd4\u56de 0 \u3002 base \u8868\u793a\u8fdb\u5236\uff0c\u5141\u8bb8\u7684\u8fdb\u5236\u6709 0\u30012-36\u3002\u8fdb\u5236\u4e3a 0 \u5c06\u5b89\u7167\u4ee3\u7801\u7684\u5b57\u9762\u91cf\u6765\u7cbe\u786e\u89e3\u91ca\uff0c\u6700\u540e\u7684\u7ed3\u679c\u4f1a\u662f 2\u30018\u300110\u300116 \u8fdb\u5236\u4e2d\u7684\u4e00\u4e2a\u3002 \u5982\u679c x \u4e0d\u662f\u6570\u5b57\u7c7b\u578b\uff0c\u5219\u4f1a\u6309\u4ee5\u4e0b\u8c03\u7528\u987a\u5e8f\u8fd4\u56de\u503c\uff08Python3.8\uff09\uff1a \u5982\u679c x \u5b9a\u4e49\u4e86 __int__() \uff0c int(x) \u5c06\u8fd4\u56de x.__int__() \u5982\u679c x \u5b9a\u4e49\u4e86 __index__() \uff0c\u5b83\u5c06\u8fd4\u56de x.__index__() \u5982\u679c x \u5b9a\u4e49\u4e86 __trunc__() \uff0c\u5b83\u5c06\u8fd4\u56de x.__trunc__() \u5982\u679c x \u4e0d\u662f\u6570\u5b57\uff0c\u6216\u8005\u6709 base \u53c2\u6570\uff0c x \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3001 bytes \u3001\u8868\u793a\u8fdb\u5236\u4e3a base \u7684 \u6574\u6570\u5b57\u9762\u503c \u7684 bytearray \u5b9e\u4f8b\u3002 isinstance(object, classinfo) \uff1a\u5982\u679c\u53c2\u6570 object \u662f\u53c2\u6570 classinfo \u7684\u5b9e\u4f8b\u6216\u8005\u662f\u5176 (\u76f4\u63a5\u3001\u95f4\u63a5\u6216 \u865a\u62df ) \u5b50\u7c7b\u5219\u8fd4\u56de True \u3002 \u5982\u679c object \u4e0d\u662f\u7ed9\u5b9a\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u51fd\u6570\u5c06\u603b\u662f\u8fd4\u56de False \u3002 \u5982\u679c classinfo \u662f\u7c7b\u578b\u5bf9\u8c61\u5143\u7ec4\uff08\u6216\u7531\u5176\u4ed6\u6b64\u7c7b\u5143\u7ec4\u9012\u5f52\u7ec4\u6210\u7684\u5143\u7ec4\uff09\uff0c\u90a3\u4e48\u5982\u679c object \u662f\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7c7b\u578b\u7684\u5b9e\u4f8b\u5c31\u8fd4\u56de True \u3002 \u5982\u679c classinfo \u65e2\u4e0d\u662f\u7c7b\u578b\uff0c\u4e5f\u4e0d\u662f\u7c7b\u578b\u5143\u7ec4\u6216\u7c7b\u578b\u5143\u7ec4\u7684\u5143\u7ec4\uff0c\u5219\u5c06\u5f15\u53d1 TypeError \u5f02\u5e38\u3002 class A : pass class B ( A ): pass c = B () isinstance ( c , A ) isinstance ( c ,( B , str )) True try : isinstance ( c , \"C\" ) except TypeError as e : print ( e ) isinstance() arg 2 must be a type or tuple of types issubclass(class, classinfo) \uff1a\u5982\u679c class \u662f classinfo \u7684 (\u76f4\u63a5\u3001\u95f4\u63a5\u6216 \u865a\u62df ) \u5b50\u7c7b\u5219\u8fd4\u56de True \u3002 \u7c7b\u4f1a\u88ab\u89c6\u4f5c\u5176\u81ea\u8eab\u7684\u5b50\u7c7b\u3002 classinfo \u4e5f\u4ee5\u662f\u7c7b\u5bf9\u8c61\u7684\u5143\u7ec4\uff0c\u5728\u6b64\u60c5\u51b5\u4e0b classinfo \u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u90fd\u5c06\u88ab\u68c0\u67e5\u3002 \u5728\u4efb\u4f55\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u90fd\u5c06\u5f15\u53d1 TypeError \u5f02\u5e38\u3002 iter(object[, sentinel]) \uff1a\u8fd4\u56de\u4e00\u4e2aiterator\u5bf9\u8c61\u3002 \u5f53\u53ea\u4f20\u5165\u5b9e\u53c2 object \u65f6\uff0c object \u5fc5\u987b\u662f\u652f\u6301\u8fed\u4ee3\u534f\u8bae\uff08\u6709 __iter__() \u65b9\u6cd5\uff09\u7684\u96c6\u5408\u5bf9\u8c61\uff0c\u6216\u5fc5\u987b\u652f\u6301\u5e8f\u5217\u534f\u8bae\uff08\u6709 __getitem__() \u65b9\u6cd5\uff0c\u4e14\u6570\u5b57\u53c2\u6570\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c\u5b83\u4e0d\u652f\u6301\u8fd9\u4e9b\u534f\u8bae\uff0c\u4f1a\u89e6\u53d1 TypeError \u3002 \u5982\u679c\u4f20\u5165\u5b9e\u53c2 object \u548c\u7b2c\u4e8c\u4e2a\u5b9e\u53c2 sentinel \uff0c\u90a3\u4e48 object \u5fc5\u987b\u662f\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u751f\u6210\u7684\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u8fed\u4ee3\u8c03\u7528\u5b83\u7684 __next__() \u65b9\u6cd5\u65f6\u90fd\u4f1a\u4e0d\u5e26\u53c2\u6570\u8c03\u7528 object \uff1b\u5982\u679c\u8fd4\u56de\u7684\u7ed3\u679c\u662f sentinel \u5219\u89e6\u53d1 StopIteration \uff0c\u5426\u5219\u8fd4\u56de\u8c03\u7528\u7ed3\u679c\u3002 \u53e6\u8bf7\u53c2\u9605 \u8fed\u4ee3\u5668\u7c7b\u578b \u3002\u9002\u5408 iter() \u7684\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u7684\u5e94\u7528\u4e4b\u4e00\u662f\u6784\u5efa\u5757\u8bfb\u53d6\u5668\u3002 \u4f8b\u5982\uff0c\u4ece\u4e8c\u8fdb\u5236\u6570\u636e\u5e93\u6587\u4ef6\u4e2d\u8bfb\u53d6\u56fa\u5b9a\u5bbd\u5ea6\u7684\u5757\uff0c\u76f4\u81f3\u5230\u8fbe\u6587\u4ef6\u7684\u672b\u5c3e\u3002 L len(s) M map(function, iterable, ...) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5c06 function \u5e94\u7528\u4e8e iterable \u4e2d\u6bcf\u4e00\u9879\u5e76\u8f93\u51fa\u5176\u7ed3\u679c\u7684\u8fed\u4ee3\u5668\u3002 \u5982\u679c\u4f20\u5165\u4e86\u989d\u5916\u7684 iterable \u53c2\u6570\uff0c function \u5fc5\u987b\u63a5\u53d7\u76f8\u540c\u4e2a\u6570\u7684\u5b9e\u53c2\u5e76\u88ab\u5e94\u7528\u4e8e\u4ece\u6240\u6709\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u5e76\u884c\u83b7\u53d6\u7684\u9879\u3002 \u5f53\u6709\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u65f6\uff0c\u6700\u77ed\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8017\u5c3d\u5219\u6574\u4e2a\u8fed\u4ee3\u5c31\u5c06\u7ed3\u675f\u3002 \u5bf9\u4e8e\u51fd\u6570\u7684\u8f93\u5165\u5df2\u7ecf\u662f\u53c2\u6570\u5143\u7ec4\u7684\u60c5\u51b5\uff0c\u8bf7\u53c2\u9605 itertools.starmap() \u3002 max() \uff1a\u8fd4\u56de\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u6700\u5927\u7684\u5143\u7d20\uff0c\u6216\u8005\u8fd4\u56de\u591a\u4e2a\u5b9e\u53c2\u4e2d\u6700\u5927\u7684\u5143\u7d20\u3002 max(iterable, [, key, default]) max(arg1, arg2, args[, key]) \u5982\u679c\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\uff0c\u5b83\u5fc5\u987b\u662f\u975e\u7a7a iterable \uff0c iterable \u6700\u5927\u7684\u5143\u7d20\u4f1a\u88ab\u8fd4\u56de\u3002 \u5982\u679c\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u5219\u8fd4\u56de\u6700\u5927\u7684\u4f4d\u7f6e\u53c2\u6570\u3002 \u6709\u4e24\u4e2a\u53ef\u9009\u53ea\u80fd\u7528\u5173\u952e\u5b57\u7684\u5b9e\u53c2\u3002 key \u5b9e\u53c2\u6307\u5b9a\u6392\u5e8f\u51fd\u6570\u7528\u7684\u53c2\u6570\uff0c\u5982\u4f20\u7ed9 list.sort() \u7684\u3002 default \u5b9e\u53c2\u662f\u5f53\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\u65f6\u8fd4\u56de\u7684\u503c\u3002\u5982\u679c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u5e76\u4e14\u6ca1\u6709\u7ed9 default \uff0c\u5219\u4f1a\u89e6\u53d1 ValueError \u3002 \u5982\u679c\u6709\u591a\u4e2a\u6700\u5927\u5143\u7d20\uff0c\u5219\u6b64\u51fd\u6570\u5c06\u8fd4\u56de\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u3002\u8fd9\u548c\u5176\u4ed6\u7a33\u5b9a\u6392\u5e8f\u5de5\u5177\u5982 sorted(iterable, key=keyfunc, reverse=True)[0] \u548c heapq.nlargest(1, iterable, key=keyfunc) \u4fdd\u6301\u4e00\u81f4\u3002 class* memoryview(obj*) \uff1a\u8fd4\u56de\u7531\u7ed9\u5b9a\u5b9e\u53c2\u521b\u5efa\u7684\u201c\u5185\u5b58\u89c6\u56fe\u201d\u5bf9\u8c61\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u5185\u5b58\u89c6\u56fe \u3002 min() \uff1a\u7c7b\u4f3c\u4e8e max() min ( iterable , [, key , default ]) min ( arg1 , arg2 , args [, key ]) N next(iterator[, default]) \uff1a\u901a\u8fc7\u8c03\u7528 iterator \u7684 __next__() \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u8fed\u4ee3\u5668\u8017\u5c3d\uff0c\u5219\u8fd4\u56de\u7ed9\u5b9a\u7684 default \uff0c\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u503c\u5219\u89e6\u53d1 StopIteration \u3002 O oct(x) \uff1a\u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u524d\u7f00\u4e3a\u201c0o\u201d\u7684\u516b\u8fdb\u5236\u5b57\u7b26\u4e32\u3002\u7ed3\u679c\u662f\u4e00\u4e2a\u5408\u6cd5\u7684 Python \u8868\u8fbe\u5f0f\u3002\u5982\u679c x \u4e0d\u662f Python \u7684 int \u5bf9\u8c61\uff0c\u90a3\u5b83\u9700\u8981\u5b9a\u4e49 __index__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002 ord(c) \uff1a\u5bf9\u8868\u793a\u5355\u4e2a Unicode \u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ee3\u8868\u5b83 Unicode \u7801\u70b9\u7684\u6574\u6570\u3002\u4f8b\u5982 ord('a') \u8fd4\u56de\u6574\u6570 97 \uff0c ord('\u20ac') \uff08\u6b27\u5143\u7b26\u53f7\uff09\u8fd4\u56de 8364 \u3002\u8fd9\u662f chr() \u7684\u9006\u51fd\u6570\u3002 P pow(base, exp[, mod]) print(objects, sep=' ', end='\\n', file=sys.stdout, flush=False) \uff1a\u5c06 objects \u6253\u5370\u5230 file \u6307\u5b9a\u7684\u6587\u672c\u6d41\uff0c\u4ee5 sep \u5206\u9694\u5e76\u5728\u672b\u5c3e\u52a0\u4e0a end \u3002 sep , end , file \u548c flush \u5982\u679c\u5b58\u5728\uff0c\u5b83\u4eec\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002 sep \u548c end \u90fd\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff1b\u5b83\u4eec\u4e5f\u53ef\u4ee5\u4e3a None \uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 \u5982\u679c\u6ca1\u6709\u7ed9\u51fa objects \uff0c\u5219 print() \u5c06\u53ea\u5199\u5165 end \u3002 file \u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5177\u6709 write(string) \u65b9\u6cd5\u7684\u5bf9\u8c61\uff1b\u5982\u679c\u53c2\u6570\u4e0d\u5b58\u5728\u6216\u4e3a None \uff0c\u5219\u5c06\u4f7f\u7528 sys.stdout \u3002 \u7531\u4e8e\u8981\u6253\u5370\u7684\u53c2\u6570\u4f1a\u88ab\u8f6c\u6362\u4e3a\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64 print() \u4e0d\u80fd\u7528\u4e8e\u4e8c\u8fdb\u5236\u6a21\u5f0f\u7684\u6587\u4ef6\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5e94\u6539\u7528 file.write(...) \u3002\u8f93\u51fa\u662f\u5426\u88ab\u7f13\u5b58\u901a\u5e38\u51b3\u5b9a\u4e8e file \uff0c\u4f46\u5982\u679c flush \u5173\u952e\u5b57\u53c2\u6570\u4e3a\u771f\u503c\uff0c\u6d41\u4f1a\u88ab\u5f3a\u5236\u5237\u65b0\u3002 \u5728 3.3 \u7248\u66f4\u6539: \u589e\u52a0\u4e86 flush \u5173\u952e\u5b57\u53c2\u6570\u3002 Q range() class range ( stop ) class range ( start , stop [, step ]) R repr(object) \uff1a\u8fd4\u56de\u5305\u542b\u4e00\u4e2a object \u7684\u53ef\u6253\u5370\u8868\u793a\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8e\u8bb8\u591a\u7c7b\u578b\u6765\u8bf4\uff0c\u8be5\u51fd\u6570\u5c1d\u8bd5\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5c06\u4f1a\u4e0e\u8be5\u5bf9\u8c61\u88ab\u4f20\u9012\u7ed9 eval() \u65f6\u6240\u751f\u6210\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u7c7b\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 __repr__() \u65b9\u6cd5\u6765\u63a7\u5236\u6b64\u51fd\u6570\u4e3a\u5b83\u7684\u5b9e\u4f8b\u6240\u8fd4\u56de\u7684\u5185\u5bb9\u3002 reversed(seq) \uff1a\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u7684 iterator \u3002 seq \u5fc5\u987b\u662f\u4e00\u4e2a\u5177\u6709 __reversed__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u6216\u8005\u662f\u652f\u6301\u8be5\u5e8f\u5217\u534f\u8bae\uff08\u5177\u6709\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u7c7b\u578b\u53c2\u6570\u7684 __len__() \u65b9\u6cd5\u548c __getitem__() \u65b9\u6cd5\uff09\u3002 round(number[, ndigits]) \uff1a\u8fd4\u56de number \u820d\u5165\u5230\u5c0f\u6570\u70b9\u540e ndigits \u4f4d\u7cbe\u5ea6\u7684\u503c\u3002\u5982\u679c ndigits \u88ab\u7701\u7565\u6216\u4e3a None \uff0c\u5219\u8fd4\u56de\u6700\u63a5\u8fd1\u8f93\u5165\u503c\u7684\u6574\u6570\u3002\u4efb\u4f55\u6574\u6570\u503c\u90fd\u53ef\u4f5c\u4e3a\u6709\u6548\u7684 ndigits (\u6b63\u6570\u3001\u96f6\u6216\u8d1f\u6570)\u3002\u5bf9\u4e8e\u652f\u6301 round() \u7684\u5185\u7f6e\u7c7b\u578b\uff0c\u503c\u4f1a\u88ab\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684 10 \u7684\u8d1f ndigits \u6b21\u5e42\u7684\u500d\u6570\uff1b\u5982\u679c\u4e0e\u4e24\u4e2a\u500d\u6570\u7684\u8ddd\u79bb\u76f8\u7b49\uff0c\u5219\u9009\u62e9\u5076\u6570 (\u56e0\u6b64\uff0c round(0.5) \u548c round(-0.5) \u5747\u4e3a 0 \u800c round(1.5) \u4e3a 2 )\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684 Python \u5bf9\u8c61 number , round \u5c06\u59d4\u6258\u7ed9 number.__round__ \u3002 \u5bf9\u6d6e\u70b9\u6570\u6267\u884c round() \u7684\u884c\u4e3a\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\uff1a\u4f8b\u5982\uff0c round(2.675, 2) \u5c06\u7ed9\u51fa 2.67 \u800c\u4e0d\u662f\u671f\u671b\u7684 2.68 \u3002 \u8fd9\u4e0d\u7b97\u662f\u7a0b\u5e8f\u9519\u8bef\uff1a\u8fd9\u4e00\u7ed3\u679c\u662f\u7531\u4e8e\u5927\u591a\u6570\u5341\u8fdb\u5236\u5c0f\u6570\u5b9e\u9645\u4e0a\u90fd\u4e0d\u80fd\u4ee5\u6d6e\u70b9\u6570\u7cbe\u786e\u5730\u8868\u793a\u3002 \u8bf7\u53c2\u9605 \u6d6e\u70b9\u7b97\u672f\uff1a\u4e89\u8bae\u548c\u9650\u5236 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 round ( 2.675 , 2 ) 2.67 S setattr(object, name, value) \uff1a\u6b64\u51fd\u6570\u4e0e getattr() \u4e24\u76f8\u5bf9\u5e94\u3002 \u5176\u53c2\u6570\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3001\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u4efb\u610f\u503c\u3002 \u5b57\u7b26\u4e32\u6307\u5b9a\u4e00\u4e2a\u73b0\u6709\u5c5e\u6027\u6216\u8005\u65b0\u589e\u5c5e\u6027\u3002 \u51fd\u6570\u4f1a\u5c06\u503c\u8d4b\u7ed9\u8be5\u5c5e\u6027\uff0c\u53ea\u8981\u5bf9\u8c61\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c setattr(x, 'foobar', 123) \u7b49\u4ef7\u4e8e x.foobar = 123 \u3002 class slice() class slice(stop) class slice(start, stop[, step]) sorted(iterable, key=None, reverse=False) \uff1a\u6839\u636e iterable \u4e2d\u7684\u9879\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5df2\u6392\u5e8f\u5217\u8868\u3002\u5177\u6709\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u4eec\u90fd\u5fc5\u987b\u6307\u5b9a\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u3002 key \u6307\u5b9a\u5e26\u6709\u5355\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u4ece iterable \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\u63d0\u53d6\u7528\u4e8e\u6bd4\u8f83\u7684\u952e (\u4f8b\u5982 key=str.lower )\u3002 \u9ed8\u8ba4\u503c\u4e3a None (\u76f4\u63a5\u6bd4\u8f83\u5143\u7d20)\u3002 reverse \u4e3a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002 \u5982\u679c\u8bbe\u4e3a True \uff0c\u5219\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u5c06\u6309\u53cd\u5411\u987a\u5e8f\u6bd4\u8f83\u8fdb\u884c\u6392\u5e8f\u3002\u4f7f\u7528 functools.cmp_to_key() \u53ef\u5c06\u8001\u5f0f\u7684 cmp \u51fd\u6570\u8f6c\u6362\u4e3a key \u51fd\u6570\u3002\u5185\u7f6e\u7684 sorted() \u786e\u4fdd\u662f\u7a33\u5b9a\u7684\u3002 \u5982\u679c\u4e00\u4e2a\u6392\u5e8f\u786e\u4fdd\u4e0d\u4f1a\u6539\u53d8\u6bd4\u8f83\u7ed3\u679c\u76f8\u7b49\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5c31\u79f0\u5176\u4e3a\u7a33\u5b9a\u7684 --- \u8fd9\u6709\u5229\u4e8e\u8fdb\u884c\u591a\u91cd\u6392\u5e8f\uff08\u4f8b\u5982\u5148\u6309\u90e8\u95e8\u3001\u518d\u6309\u85aa\u7ea7\u6392\u5e8f\uff09\u3002\u6709\u5173\u6392\u5e8f\u793a\u4f8b\u548c\u7b80\u8981\u6392\u5e8f\u6559\u7a0b\uff0c\u8bf7\u53c2\u9605 \u6392\u5e8f\u6307\u5357 \u3002 a = [ \"a\" , \"aa\" , \"aaa\" ] print ( sorted ( a , key = len )) print ( sorted ( a , key = len , reverse = True )) ['a', 'aa', 'aaa'] ['aaa', 'aa', 'a'] sum(iterable, start=0) T class type() class type(object) class type(name, bases, dict) \u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u65f6\uff0c\u8fd4\u56de object \u7684\u7c7b\u578b\u3002 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a type \u5bf9\u8c61\uff0c\u901a\u5e38\u4e0e object.__class__ \u6240\u8fd4\u56de\u7684\u5bf9\u8c61\u76f8\u540c\u3002\u63a8\u8350\u4f7f\u7528 isinstance() \u5185\u7f6e\u51fd\u6570\u6765\u68c0\u6d4b\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u4f1a\u8003\u8651\u5b50\u7c7b\u7684\u60c5\u51b5\u3002\u4f20\u5165\u4e09\u4e2a\u53c2\u6570\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 type \u5bf9\u8c61\u3002 \u8fd9\u5728\u672c\u8d28\u4e0a\u662f class \u8bed\u53e5\u7684\u4e00\u79cd\u52a8\u6001\u5f62\u5f0f\u3002 name \u5b57\u7b26\u4e32\u5373\u7c7b\u540d\u5e76\u4e14\u4f1a\u6210\u4e3a __name__ \u5c5e\u6027\uff1b bases \u5143\u7ec4\u5217\u51fa\u57fa\u7c7b\u5e76\u4e14\u4f1a\u6210\u4e3a __bases__ \u5c5e\u6027\uff1b\u800c dict \u5b57\u5178\u4e3a\u5305\u542b\u7c7b\u4e3b\u4f53\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\u5e76\u4e14\u4f1a\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\u6210\u4e3a __dict__ \u5c5e\u6027\u3002 \u53e6\u8bf7\u53c2\u9605 \u7c7b\u578b\u5bf9\u8c61 \u3002 \u5728 3.6 \u7248\u66f4\u6539: type \u7684\u5b50\u7c7b\u5982\u679c\u672a\u91cd\u8f7d type.__new__ \uff0c\u5c06\u4e0d\u518d\u80fd\u4f7f\u7528\u4e00\u4e2a\u53c2\u6570\u7684\u5f62\u5f0f\u6765\u83b7\u53d6\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 class T : pass print ( T . __class__ ) print ( type ( T )) <class 'type'> <class 'type'> X = type ( 'X' , ( object ,), dict ( a = 1 )) class X : a = 1 V vars([object]) \uff1a\u8fd4\u56de\u6a21\u5757\u3001\u7c7b\u3001\u5b9e\u4f8b\u6216\u4efb\u4f55\u5176\u5b83\u5177\u6709 __dict__ \u5c5e\u6027\u7684\u5bf9\u8c61\u7684 __dict__ \u5c5e\u6027\u3002\u6a21\u5757\u548c\u5b9e\u4f8b\u8fd9\u6837\u7684\u5bf9\u8c61\u5177\u6709\u53ef\u66f4\u65b0\u7684 __dict__ \u5c5e\u6027\uff1b\u4f46\u662f\uff0c\u5176\u5b83\u5bf9\u8c61\u7684 __dict__ \u5c5e\u6027\u53ef\u80fd\u4f1a\u8bbe\u4e3a\u9650\u5236\u5199\u5165\uff08\u4f8b\u5982\uff0c\u7c7b\u4f1a\u4f7f\u7528 types.MappingProxyType \u6765\u9632\u6b62\u76f4\u63a5\u66f4\u65b0\u5b57\u5178\uff09\u3002\u4e0d\u5e26\u53c2\u6570\u65f6\uff0c vars() \u7684\u884c\u4e3a\u7c7b\u4f3c locals() \u3002 \u8bf7\u6ce8\u610f\uff0clocals \u5b57\u5178\u4ec5\u5bf9\u4e8e\u8bfb\u53d6\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u5bf9 locals \u5b57\u5178\u7684\u66f4\u65b0\u4f1a\u88ab\u5ffd\u7565\u3002 Z zip(iterables) \uff1a\u521b\u5efa\u4e00\u4e2a\u805a\u5408\u4e86\u6765\u81ea\u6bcf\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 a = [ 1 , 2 , 3 ] b = [ \"a\" , \"b\" , \"c\" , \"d\" ] for i , j in zip ( a , b ): print ( i , j ) 1 a 2 b 3 c","title":"2.12.\u5185\u7f6e\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#a","text":"abs(x) \uff1a\u8fd4\u56de\u4e00\u4e2a\u6570\u7684\u7edd\u5bf9\u503c\u3002 \u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\u6216\u6d6e\u70b9\u6570\u3002 \u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u590d\u6570\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u6a21\u3002\u5982\u679c x \u5b9a\u4e49\u4e86 __abs__() \uff0c\u5219 abs(x) \u5c06\u8fd4\u56de x.__abs__() \u3002 class A : def __abs__ ( self ): return 10 abs ( A ()) 10 all(iterable) \uff1a\u5982\u679c iterable \u7684\u6240\u6709\u5143\u7d20\u5747\u4e3a\u771f\u503c\uff08\u6216\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\uff09\u5219\u8fd4\u56de True \u3002 \u7b49\u4ef7\u4e8e: def all ( iterable ): for element in iterable : if not element : return False return True any(iterable) \uff1a\u5982\u679c iterable \u7684\u4efb\u4e00\u5143\u7d20\u4e3a\u771f\u503c\u5219\u8fd4\u56de True \u3002 \u5982\u679c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u8fd4\u56de False \u3002 \u7b49\u4ef7\u4e8e: def any ( iterable ): for element in iterable : if element : return True return False ascii (object) \uff1a\u8fd4\u56de\u5bf9\u8c61\u7684ASCII\u8868\u793a\u5f62\u5f0f\u3002\u5c31\u50cf\u51fd\u6570 repr() \uff0c\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u53ef\u6253\u5370\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u662f repr() \u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d\u975e ASCII \u7f16\u7801\u7684\u5b57\u7b26\uff0c\u4f1a\u4f7f\u7528 \\x \u3001 \\u \u548c \\U \u6765\u8f6c\u4e49\u3002\u751f\u6210\u7684\u5b57\u7b26\u4e32\u548c Python 2 \u7684 repr() \u8fd4\u56de\u7684\u7ed3\u679c\u76f8\u4f3c\u3002 print ( ascii ( \"\u7f16\u7801\" )) print ( repr ( \"\u7f16\u7801\" )) '\\u7f16\\u7801' '\u7f16\u7801'","title":"A"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#b","text":"bin(x) \uff1a\u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u524d\u7f00\u4e3a\u201c0b\u201d\u7684==\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32== \u3002\u5982\u679c x \u4e0d\u662f Python \u7684 int \u5bf9\u8c61\uff0c\u90a3\u5b83\u9700\u8981\u5b9a\u4e49 __index__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002 print ( bin ( 2 )) print ( type ( bin ( 2 ))) eval ( bin ( 2 )) == 2 0b10 <class 'str'> True class B : def __index__ ( self ): return 10 bin ( B ()) '0b1010' class bool([x]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c True \u6216\u8005 False \u3002 bool \u7c7b\u662f int \u7684\u5b50\u7c7b\u3002\u5176\u4ed6\u7c7b\u4e0d\u80fd\u7ee7\u627f\u81ea\u5b83\u3002\u5b83\u53ea\u6709 False \u548c True \u4e24\u4e2a\u5b9e\u4f8b\uff08\u53c2\u89c1 \u5e03\u5c14\u503c \uff09\u3002 breakpoint(*args, \\**kws) \uff1a\u6b64\u51fd\u6570\u4f1a\u5728\u8c03\u7528\u65f6\u8fdb\u5165\u8c03\u8bd5\u5668\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u8c03\u7528 sys.breakpointhook() \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c sys.breakpointhook() \u8c03\u7528 pdb.set_trace() \u4e14\u6ca1\u6709\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u7eaf\u7cb9\u662f\u4e00\u4e2a\u4fbf\u5229\u51fd\u6570\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u663e\u5f0f\u5bfc\u5165 pdb \u4e14\u952e\u5165\u5c3d\u53ef\u80fd\u5c11\u7684\u4ee3\u7801\u5373\u53ef\u8fdb\u5165\u8c03\u8bd5\u5668\u3002\u4f46\u662f\uff0c sys.breakpointhook() \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u5176\u4ed6\u4e00\u4e9b\u51fd\u6570\u5e76\u88ab breakpoint() \u81ea\u52a8\u8c03\u7528\uff0c\u4ee5\u5141\u8bb8\u8fdb\u5165\u4f60\u60f3\u7528\u7684\u8c03\u8bd5\u5668\u3002","title":"B"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#c","text":"callable(object) \uff1a\u5982\u679c\u53c2\u6570 object \u662f\u53ef\u8c03\u7528\u7684\u5c31\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u5982\u679c\u8fd4\u56de True \uff0c\u8c03\u7528\u4ecd\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u5982\u679c\u8fd4\u56de False \uff0c\u5219\u8c03\u7528 object \u5c06\u80af\u5b9a\u4e0d\u4f1a\u6210\u529f\u3002 def test (): raise Exception callable ( test ) True chr(i) \uff1a\u8fd4\u56de Unicode \u7801\u4f4d\u4e3a\u6574\u6570 i \u7684\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u8fd9\u662f ord() \u7684\u9006\u51fd\u6570\u3002\u5b9e\u53c2\u7684\u5408\u6cd5\u8303\u56f4\u662f 0 \u5230 1114111\uff0816 \u8fdb\u5236\u8868\u793a\u662f 0x10FFFF\uff09\u3002\u5982\u679c i \u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u4f1a\u89e6\u53d1 ValueError \u5f02\u5e38\u3002 print ( chr ( 97 )) print ( chr ( 8364 )) a \u20ac","title":"C"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#d","text":"delattr(object, name) \uff1a\u5982\u679c\u5bf9\u8c61\u5141\u8bb8\uff0c\u8be5\u51fd\u6570\u5c06\u5220\u9664\u6307\u5b9a\u7684\u5c5e\u6027\u3002\u4f8b\u5982 delattr(x, 'foobar') \u7b49\u4ef7\u4e8e del x.foobar \u3002 divmod(a, b) \uff1a\u5b83\u5c06\u4e24\u4e2a\uff08\u975e\u590d\u6570\uff09\u6570\u5b57\u4f5c\u4e3a\u5b9e\u53c2\uff0c\u5e76\u5728\u6267\u884c\u6574\u6570\u9664\u6cd5\u65f6\u8fd4\u56de\u4e00\u5bf9\u5546\u548c\u4f59\u6570\u3002\u5bf9\u4e8e\u6574\u6570\uff0c\u7ed3\u679c\u548c (a // b, a % b) \u4e00\u81f4\u3002\u5bf9\u4e8e\u6d6e\u70b9\u6570\uff0c\u7ed3\u679c\u662f (q, a % b) \uff0c q \u901a\u5e38\u662f math.floor(a / b) \uff0c\u4f46\u53ef\u80fd\u4f1a\u6bd4 1 \u5c0f\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c q * b + a % b \u548c a \u57fa\u672c\u76f8\u7b49\uff1b\u5982\u679c a % b \u975e\u96f6\uff0c\u5b83\u7684\u7b26\u53f7\u548c b \u4e00\u6837\uff0c\u5e76\u4e14 0 <= abs(a % b) < abs(b) \u3002 # \u6574\u6570 divmod ( 10 , 5 ) ( 10 // 5 , 10 % 5 ) # \u6d6e\u70b9\u6570 import math divmod ( 8.5 , 5 ) ( math . floor ( 8.5 / 5 ), 8.5 % 5 ) (1, 3.5)","title":"D"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#e","text":"enumerate(iterable, start=0) \uff1a\u8fd4\u56de\u4e00\u4e2a\u679a\u4e3e\u5bf9\u8c61\u3002","title":"E"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#f","text":"filter(function, iterable) \uff1a\u7528 iterable \u4e2d\u51fd\u6570 function \u8fd4\u56de\u771f\u7684\u90a3\u4e9b\u5143\u7d20\uff0c\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u3002 filter(function, iterable) \u76f8\u5f53\u4e8e\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u5f53 function \u4e0d\u662f None \u7684\u65f6\u5019\u4e3a (item for item in iterable if function(item)) \uff1bfunction \u662f None \u7684\u65f6\u5019\u4e3a (item for item in iterable if item) \u3002\u8bf7\u53c2\u9605 itertools.filterfalse() \u4e86\u89e3\uff0c\u53ea\u6709 function \u8fd4\u56de false \u65f6\u624d\u9009\u53d6 iterable \u4e2d\u5143\u7d20\u7684\u8865\u5145\u51fd\u6570\u3002 class float([x]) \uff1a\u8fd4\u56de\u4ece\u6570\u5b57\u6216\u5b57\u7b26\u4e32 x \u751f\u6210\u7684\u6d6e\u70b9\u6570\u3002\u5982\u679c\u5b9e\u53c2\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u5b83\u5fc5\u987b\u662f\u5305\u542b\u5341\u8fdb\u5236\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u524d\u9762\u53ef\u4ee5\u6709\u7b26\u53f7\uff0c\u4e4b\u524d\u4e5f\u53ef\u4ee5\u6709\u7a7a\u683c\u3002\u53ef\u9009\u7684\u7b26\u53f7\u6709 '+' \u548c '-' \u3002 float ( \"+5\" ) float ( \" +5\" ) float ( \"NaN\" ) float ( \"Infinity\" ) float ( \"inf\" ) float ( '+1E6' ) class frozenset ([iterable]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 frozenset \u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u53ef\u9009\u53c2\u6570 iterable \u4e2d\u7684\u5143\u7d20\u3002 frozenset \u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u7c7b\u3002\u6709\u5173\u6b64\u7c7b\u7684\u6587\u6863\uff0c\u8bf7\u53c2\u9605 frozenset \u548c \u96c6\u5408\u7c7b\u578b --- set, frozenset \u3002\u8bf7\u53c2\u9605\u5185\u5efa\u7684 set \u3001 list \u3001 tuple \u548c dict \u7c7b\uff0c\u4ee5\u53ca collections \u6a21\u5757\u6765\u4e86\u89e3\u5176\u5b83\u7684\u5bb9\u5668\u3002","title":"F"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#g","text":"getattr(object, name[, default]) \uff1a\u8fd4\u56de\u5bf9\u8c61\u547d\u540d\u5c5e\u6027\u7684\u503c\u3002\u5982\u679c\u6307\u5b9a\u7684\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u4e14\u63d0\u4f9b\u4e86 default \u503c\uff0c\u5219\u8fd4\u56de\u5b83\uff0c\u5426\u5219\u89e6\u53d1 AttributeError \u3002","title":"G"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#h","text":"hasattr(object, name) \uff1a\u8be5\u5b9e\u53c2\u662f\u4e00\u4e2a\u5bf9\u8c61\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5982\u679c\u5b57\u7b26\u4e32\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\u4e4b\u4e00\u7684\u540d\u79f0\uff0c\u5219\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002\uff08\u6b64\u529f\u80fd\u662f\u901a\u8fc7\u8c03\u7528 getattr(object, name) \u770b\u662f\u5426\u6709 AttributeError \u5f02\u5e38\u6765\u5b9e\u73b0\u7684\u3002\uff09 hash(object) \uff1a\u8fd4\u56de\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\uff08\u5982\u679c\u5b83\u6709\u7684\u8bdd\uff09\u3002\u54c8\u5e0c\u503c\u662f\u6574\u6570\u3002 hex(x) \uff1a\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4ee5\u201c0x\u201d\u4e3a\u524d\u7f00\u7684\u5c0f\u5199\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u3002","title":"H"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#i","text":"id(object) \uff1a\u8fd4\u56de\u5bf9\u8c61\u7684\u201c\u6807\u8bc6\u503c\u201d\u3002\u8be5\u503c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5728\u6b64\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u4e2d\u4fdd\u8bc1\u662f\u552f\u4e00\u4e14\u6052\u5b9a\u7684\u3002\u4e24\u4e2a\u751f\u547d\u671f\u4e0d\u91cd\u53e0\u7684\u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684 id() \u503c\u3002 CPython implementation detail: This is the address of the object in memory. input([prompt]) \uff1a\u5982\u679c\u5b58\u5728 prompt \u5b9e\u53c2\uff0c\u5219\u5c06\u5176\u5199\u5165\u6807\u51c6\u8f93\u51fa\uff0c\u672b\u5c3e\u4e0d\u5e26\u6362\u884c\u7b26\u3002\u63a5\u4e0b\u6765\uff0c\u8be5\u51fd\u6570\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u4e00\u884c\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff08\u9664\u4e86\u672b\u5c3e\u7684\u6362\u884c\u7b26\uff09\u5e76\u8fd4\u56de\u3002\u5f53\u8bfb\u53d6\u5230 EOF \u65f6\uff0c\u5219\u89e6\u53d1 EOFError \u3002 class int(x, base=10) \uff1a\u8fd4\u56de\u4e00\u4e2a\u57fa\u4e8e\u6570\u5b57\u6216\u5b57\u7b26\u4e32 x \u6784\u9020\u7684\u6574\u6570\u5bf9\u8c61\uff0c\u6216\u8005\u5728\u672a\u7ed9\u51fa\u53c2\u6570\u65f6\u8fd4\u56de 0 \u3002 base \u8868\u793a\u8fdb\u5236\uff0c\u5141\u8bb8\u7684\u8fdb\u5236\u6709 0\u30012-36\u3002\u8fdb\u5236\u4e3a 0 \u5c06\u5b89\u7167\u4ee3\u7801\u7684\u5b57\u9762\u91cf\u6765\u7cbe\u786e\u89e3\u91ca\uff0c\u6700\u540e\u7684\u7ed3\u679c\u4f1a\u662f 2\u30018\u300110\u300116 \u8fdb\u5236\u4e2d\u7684\u4e00\u4e2a\u3002 \u5982\u679c x \u4e0d\u662f\u6570\u5b57\u7c7b\u578b\uff0c\u5219\u4f1a\u6309\u4ee5\u4e0b\u8c03\u7528\u987a\u5e8f\u8fd4\u56de\u503c\uff08Python3.8\uff09\uff1a \u5982\u679c x \u5b9a\u4e49\u4e86 __int__() \uff0c int(x) \u5c06\u8fd4\u56de x.__int__() \u5982\u679c x \u5b9a\u4e49\u4e86 __index__() \uff0c\u5b83\u5c06\u8fd4\u56de x.__index__() \u5982\u679c x \u5b9a\u4e49\u4e86 __trunc__() \uff0c\u5b83\u5c06\u8fd4\u56de x.__trunc__() \u5982\u679c x \u4e0d\u662f\u6570\u5b57\uff0c\u6216\u8005\u6709 base \u53c2\u6570\uff0c x \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3001 bytes \u3001\u8868\u793a\u8fdb\u5236\u4e3a base \u7684 \u6574\u6570\u5b57\u9762\u503c \u7684 bytearray \u5b9e\u4f8b\u3002 isinstance(object, classinfo) \uff1a\u5982\u679c\u53c2\u6570 object \u662f\u53c2\u6570 classinfo \u7684\u5b9e\u4f8b\u6216\u8005\u662f\u5176 (\u76f4\u63a5\u3001\u95f4\u63a5\u6216 \u865a\u62df ) \u5b50\u7c7b\u5219\u8fd4\u56de True \u3002 \u5982\u679c object \u4e0d\u662f\u7ed9\u5b9a\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u51fd\u6570\u5c06\u603b\u662f\u8fd4\u56de False \u3002 \u5982\u679c classinfo \u662f\u7c7b\u578b\u5bf9\u8c61\u5143\u7ec4\uff08\u6216\u7531\u5176\u4ed6\u6b64\u7c7b\u5143\u7ec4\u9012\u5f52\u7ec4\u6210\u7684\u5143\u7ec4\uff09\uff0c\u90a3\u4e48\u5982\u679c object \u662f\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7c7b\u578b\u7684\u5b9e\u4f8b\u5c31\u8fd4\u56de True \u3002 \u5982\u679c classinfo \u65e2\u4e0d\u662f\u7c7b\u578b\uff0c\u4e5f\u4e0d\u662f\u7c7b\u578b\u5143\u7ec4\u6216\u7c7b\u578b\u5143\u7ec4\u7684\u5143\u7ec4\uff0c\u5219\u5c06\u5f15\u53d1 TypeError \u5f02\u5e38\u3002 class A : pass class B ( A ): pass c = B () isinstance ( c , A ) isinstance ( c ,( B , str )) True try : isinstance ( c , \"C\" ) except TypeError as e : print ( e ) isinstance() arg 2 must be a type or tuple of types issubclass(class, classinfo) \uff1a\u5982\u679c class \u662f classinfo \u7684 (\u76f4\u63a5\u3001\u95f4\u63a5\u6216 \u865a\u62df ) \u5b50\u7c7b\u5219\u8fd4\u56de True \u3002 \u7c7b\u4f1a\u88ab\u89c6\u4f5c\u5176\u81ea\u8eab\u7684\u5b50\u7c7b\u3002 classinfo \u4e5f\u4ee5\u662f\u7c7b\u5bf9\u8c61\u7684\u5143\u7ec4\uff0c\u5728\u6b64\u60c5\u51b5\u4e0b classinfo \u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u90fd\u5c06\u88ab\u68c0\u67e5\u3002 \u5728\u4efb\u4f55\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u90fd\u5c06\u5f15\u53d1 TypeError \u5f02\u5e38\u3002 iter(object[, sentinel]) \uff1a\u8fd4\u56de\u4e00\u4e2aiterator\u5bf9\u8c61\u3002 \u5f53\u53ea\u4f20\u5165\u5b9e\u53c2 object \u65f6\uff0c object \u5fc5\u987b\u662f\u652f\u6301\u8fed\u4ee3\u534f\u8bae\uff08\u6709 __iter__() \u65b9\u6cd5\uff09\u7684\u96c6\u5408\u5bf9\u8c61\uff0c\u6216\u5fc5\u987b\u652f\u6301\u5e8f\u5217\u534f\u8bae\uff08\u6709 __getitem__() \u65b9\u6cd5\uff0c\u4e14\u6570\u5b57\u53c2\u6570\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c\u5b83\u4e0d\u652f\u6301\u8fd9\u4e9b\u534f\u8bae\uff0c\u4f1a\u89e6\u53d1 TypeError \u3002 \u5982\u679c\u4f20\u5165\u5b9e\u53c2 object \u548c\u7b2c\u4e8c\u4e2a\u5b9e\u53c2 sentinel \uff0c\u90a3\u4e48 object \u5fc5\u987b\u662f\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u751f\u6210\u7684\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u8fed\u4ee3\u8c03\u7528\u5b83\u7684 __next__() \u65b9\u6cd5\u65f6\u90fd\u4f1a\u4e0d\u5e26\u53c2\u6570\u8c03\u7528 object \uff1b\u5982\u679c\u8fd4\u56de\u7684\u7ed3\u679c\u662f sentinel \u5219\u89e6\u53d1 StopIteration \uff0c\u5426\u5219\u8fd4\u56de\u8c03\u7528\u7ed3\u679c\u3002 \u53e6\u8bf7\u53c2\u9605 \u8fed\u4ee3\u5668\u7c7b\u578b \u3002\u9002\u5408 iter() \u7684\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u7684\u5e94\u7528\u4e4b\u4e00\u662f\u6784\u5efa\u5757\u8bfb\u53d6\u5668\u3002 \u4f8b\u5982\uff0c\u4ece\u4e8c\u8fdb\u5236\u6570\u636e\u5e93\u6587\u4ef6\u4e2d\u8bfb\u53d6\u56fa\u5b9a\u5bbd\u5ea6\u7684\u5757\uff0c\u76f4\u81f3\u5230\u8fbe\u6587\u4ef6\u7684\u672b\u5c3e\u3002","title":"I"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#l","text":"len(s)","title":"L"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#m","text":"map(function, iterable, ...) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5c06 function \u5e94\u7528\u4e8e iterable \u4e2d\u6bcf\u4e00\u9879\u5e76\u8f93\u51fa\u5176\u7ed3\u679c\u7684\u8fed\u4ee3\u5668\u3002 \u5982\u679c\u4f20\u5165\u4e86\u989d\u5916\u7684 iterable \u53c2\u6570\uff0c function \u5fc5\u987b\u63a5\u53d7\u76f8\u540c\u4e2a\u6570\u7684\u5b9e\u53c2\u5e76\u88ab\u5e94\u7528\u4e8e\u4ece\u6240\u6709\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u5e76\u884c\u83b7\u53d6\u7684\u9879\u3002 \u5f53\u6709\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u65f6\uff0c\u6700\u77ed\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8017\u5c3d\u5219\u6574\u4e2a\u8fed\u4ee3\u5c31\u5c06\u7ed3\u675f\u3002 \u5bf9\u4e8e\u51fd\u6570\u7684\u8f93\u5165\u5df2\u7ecf\u662f\u53c2\u6570\u5143\u7ec4\u7684\u60c5\u51b5\uff0c\u8bf7\u53c2\u9605 itertools.starmap() \u3002 max() \uff1a\u8fd4\u56de\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u6700\u5927\u7684\u5143\u7d20\uff0c\u6216\u8005\u8fd4\u56de\u591a\u4e2a\u5b9e\u53c2\u4e2d\u6700\u5927\u7684\u5143\u7d20\u3002 max(iterable, [, key, default]) max(arg1, arg2, args[, key]) \u5982\u679c\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\uff0c\u5b83\u5fc5\u987b\u662f\u975e\u7a7a iterable \uff0c iterable \u6700\u5927\u7684\u5143\u7d20\u4f1a\u88ab\u8fd4\u56de\u3002 \u5982\u679c\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u4f4d\u7f6e\u53c2\u6570\uff0c\u5219\u8fd4\u56de\u6700\u5927\u7684\u4f4d\u7f6e\u53c2\u6570\u3002 \u6709\u4e24\u4e2a\u53ef\u9009\u53ea\u80fd\u7528\u5173\u952e\u5b57\u7684\u5b9e\u53c2\u3002 key \u5b9e\u53c2\u6307\u5b9a\u6392\u5e8f\u51fd\u6570\u7528\u7684\u53c2\u6570\uff0c\u5982\u4f20\u7ed9 list.sort() \u7684\u3002 default \u5b9e\u53c2\u662f\u5f53\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\u65f6\u8fd4\u56de\u7684\u503c\u3002\u5982\u679c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u5e76\u4e14\u6ca1\u6709\u7ed9 default \uff0c\u5219\u4f1a\u89e6\u53d1 ValueError \u3002 \u5982\u679c\u6709\u591a\u4e2a\u6700\u5927\u5143\u7d20\uff0c\u5219\u6b64\u51fd\u6570\u5c06\u8fd4\u56de\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u3002\u8fd9\u548c\u5176\u4ed6\u7a33\u5b9a\u6392\u5e8f\u5de5\u5177\u5982 sorted(iterable, key=keyfunc, reverse=True)[0] \u548c heapq.nlargest(1, iterable, key=keyfunc) \u4fdd\u6301\u4e00\u81f4\u3002 class* memoryview(obj*) \uff1a\u8fd4\u56de\u7531\u7ed9\u5b9a\u5b9e\u53c2\u521b\u5efa\u7684\u201c\u5185\u5b58\u89c6\u56fe\u201d\u5bf9\u8c61\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u5185\u5b58\u89c6\u56fe \u3002 min() \uff1a\u7c7b\u4f3c\u4e8e max() min ( iterable , [, key , default ]) min ( arg1 , arg2 , args [, key ])","title":"M"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#n","text":"next(iterator[, default]) \uff1a\u901a\u8fc7\u8c03\u7528 iterator \u7684 __next__() \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u8fed\u4ee3\u5668\u8017\u5c3d\uff0c\u5219\u8fd4\u56de\u7ed9\u5b9a\u7684 default \uff0c\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u503c\u5219\u89e6\u53d1 StopIteration \u3002","title":"N"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#o","text":"oct(x) \uff1a\u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u524d\u7f00\u4e3a\u201c0o\u201d\u7684\u516b\u8fdb\u5236\u5b57\u7b26\u4e32\u3002\u7ed3\u679c\u662f\u4e00\u4e2a\u5408\u6cd5\u7684 Python \u8868\u8fbe\u5f0f\u3002\u5982\u679c x \u4e0d\u662f Python \u7684 int \u5bf9\u8c61\uff0c\u90a3\u5b83\u9700\u8981\u5b9a\u4e49 __index__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002 ord(c) \uff1a\u5bf9\u8868\u793a\u5355\u4e2a Unicode \u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ee3\u8868\u5b83 Unicode \u7801\u70b9\u7684\u6574\u6570\u3002\u4f8b\u5982 ord('a') \u8fd4\u56de\u6574\u6570 97 \uff0c ord('\u20ac') \uff08\u6b27\u5143\u7b26\u53f7\uff09\u8fd4\u56de 8364 \u3002\u8fd9\u662f chr() \u7684\u9006\u51fd\u6570\u3002","title":"O"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#p","text":"pow(base, exp[, mod]) print(objects, sep=' ', end='\\n', file=sys.stdout, flush=False) \uff1a\u5c06 objects \u6253\u5370\u5230 file \u6307\u5b9a\u7684\u6587\u672c\u6d41\uff0c\u4ee5 sep \u5206\u9694\u5e76\u5728\u672b\u5c3e\u52a0\u4e0a end \u3002 sep , end , file \u548c flush \u5982\u679c\u5b58\u5728\uff0c\u5b83\u4eec\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002 sep \u548c end \u90fd\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff1b\u5b83\u4eec\u4e5f\u53ef\u4ee5\u4e3a None \uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 \u5982\u679c\u6ca1\u6709\u7ed9\u51fa objects \uff0c\u5219 print() \u5c06\u53ea\u5199\u5165 end \u3002 file \u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5177\u6709 write(string) \u65b9\u6cd5\u7684\u5bf9\u8c61\uff1b\u5982\u679c\u53c2\u6570\u4e0d\u5b58\u5728\u6216\u4e3a None \uff0c\u5219\u5c06\u4f7f\u7528 sys.stdout \u3002 \u7531\u4e8e\u8981\u6253\u5370\u7684\u53c2\u6570\u4f1a\u88ab\u8f6c\u6362\u4e3a\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64 print() \u4e0d\u80fd\u7528\u4e8e\u4e8c\u8fdb\u5236\u6a21\u5f0f\u7684\u6587\u4ef6\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5e94\u6539\u7528 file.write(...) \u3002\u8f93\u51fa\u662f\u5426\u88ab\u7f13\u5b58\u901a\u5e38\u51b3\u5b9a\u4e8e file \uff0c\u4f46\u5982\u679c flush \u5173\u952e\u5b57\u53c2\u6570\u4e3a\u771f\u503c\uff0c\u6d41\u4f1a\u88ab\u5f3a\u5236\u5237\u65b0\u3002 \u5728 3.3 \u7248\u66f4\u6539: \u589e\u52a0\u4e86 flush \u5173\u952e\u5b57\u53c2\u6570\u3002","title":"P"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#q","text":"range() class range ( stop ) class range ( start , stop [, step ])","title":"Q"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#r","text":"repr(object) \uff1a\u8fd4\u56de\u5305\u542b\u4e00\u4e2a object \u7684\u53ef\u6253\u5370\u8868\u793a\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8e\u8bb8\u591a\u7c7b\u578b\u6765\u8bf4\uff0c\u8be5\u51fd\u6570\u5c1d\u8bd5\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5c06\u4f1a\u4e0e\u8be5\u5bf9\u8c61\u88ab\u4f20\u9012\u7ed9 eval() \u65f6\u6240\u751f\u6210\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u7c7b\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 __repr__() \u65b9\u6cd5\u6765\u63a7\u5236\u6b64\u51fd\u6570\u4e3a\u5b83\u7684\u5b9e\u4f8b\u6240\u8fd4\u56de\u7684\u5185\u5bb9\u3002 reversed(seq) \uff1a\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u7684 iterator \u3002 seq \u5fc5\u987b\u662f\u4e00\u4e2a\u5177\u6709 __reversed__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u6216\u8005\u662f\u652f\u6301\u8be5\u5e8f\u5217\u534f\u8bae\uff08\u5177\u6709\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u7c7b\u578b\u53c2\u6570\u7684 __len__() \u65b9\u6cd5\u548c __getitem__() \u65b9\u6cd5\uff09\u3002 round(number[, ndigits]) \uff1a\u8fd4\u56de number \u820d\u5165\u5230\u5c0f\u6570\u70b9\u540e ndigits \u4f4d\u7cbe\u5ea6\u7684\u503c\u3002\u5982\u679c ndigits \u88ab\u7701\u7565\u6216\u4e3a None \uff0c\u5219\u8fd4\u56de\u6700\u63a5\u8fd1\u8f93\u5165\u503c\u7684\u6574\u6570\u3002\u4efb\u4f55\u6574\u6570\u503c\u90fd\u53ef\u4f5c\u4e3a\u6709\u6548\u7684 ndigits (\u6b63\u6570\u3001\u96f6\u6216\u8d1f\u6570)\u3002\u5bf9\u4e8e\u652f\u6301 round() \u7684\u5185\u7f6e\u7c7b\u578b\uff0c\u503c\u4f1a\u88ab\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684 10 \u7684\u8d1f ndigits \u6b21\u5e42\u7684\u500d\u6570\uff1b\u5982\u679c\u4e0e\u4e24\u4e2a\u500d\u6570\u7684\u8ddd\u79bb\u76f8\u7b49\uff0c\u5219\u9009\u62e9\u5076\u6570 (\u56e0\u6b64\uff0c round(0.5) \u548c round(-0.5) \u5747\u4e3a 0 \u800c round(1.5) \u4e3a 2 )\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684 Python \u5bf9\u8c61 number , round \u5c06\u59d4\u6258\u7ed9 number.__round__ \u3002 \u5bf9\u6d6e\u70b9\u6570\u6267\u884c round() \u7684\u884c\u4e3a\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\uff1a\u4f8b\u5982\uff0c round(2.675, 2) \u5c06\u7ed9\u51fa 2.67 \u800c\u4e0d\u662f\u671f\u671b\u7684 2.68 \u3002 \u8fd9\u4e0d\u7b97\u662f\u7a0b\u5e8f\u9519\u8bef\uff1a\u8fd9\u4e00\u7ed3\u679c\u662f\u7531\u4e8e\u5927\u591a\u6570\u5341\u8fdb\u5236\u5c0f\u6570\u5b9e\u9645\u4e0a\u90fd\u4e0d\u80fd\u4ee5\u6d6e\u70b9\u6570\u7cbe\u786e\u5730\u8868\u793a\u3002 \u8bf7\u53c2\u9605 \u6d6e\u70b9\u7b97\u672f\uff1a\u4e89\u8bae\u548c\u9650\u5236 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 round ( 2.675 , 2 ) 2.67","title":"R"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#s","text":"setattr(object, name, value) \uff1a\u6b64\u51fd\u6570\u4e0e getattr() \u4e24\u76f8\u5bf9\u5e94\u3002 \u5176\u53c2\u6570\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3001\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u4efb\u610f\u503c\u3002 \u5b57\u7b26\u4e32\u6307\u5b9a\u4e00\u4e2a\u73b0\u6709\u5c5e\u6027\u6216\u8005\u65b0\u589e\u5c5e\u6027\u3002 \u51fd\u6570\u4f1a\u5c06\u503c\u8d4b\u7ed9\u8be5\u5c5e\u6027\uff0c\u53ea\u8981\u5bf9\u8c61\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c setattr(x, 'foobar', 123) \u7b49\u4ef7\u4e8e x.foobar = 123 \u3002 class slice() class slice(stop) class slice(start, stop[, step]) sorted(iterable, key=None, reverse=False) \uff1a\u6839\u636e iterable \u4e2d\u7684\u9879\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5df2\u6392\u5e8f\u5217\u8868\u3002\u5177\u6709\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u4eec\u90fd\u5fc5\u987b\u6307\u5b9a\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u3002 key \u6307\u5b9a\u5e26\u6709\u5355\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u4ece iterable \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\u63d0\u53d6\u7528\u4e8e\u6bd4\u8f83\u7684\u952e (\u4f8b\u5982 key=str.lower )\u3002 \u9ed8\u8ba4\u503c\u4e3a None (\u76f4\u63a5\u6bd4\u8f83\u5143\u7d20)\u3002 reverse \u4e3a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002 \u5982\u679c\u8bbe\u4e3a True \uff0c\u5219\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u5c06\u6309\u53cd\u5411\u987a\u5e8f\u6bd4\u8f83\u8fdb\u884c\u6392\u5e8f\u3002\u4f7f\u7528 functools.cmp_to_key() \u53ef\u5c06\u8001\u5f0f\u7684 cmp \u51fd\u6570\u8f6c\u6362\u4e3a key \u51fd\u6570\u3002\u5185\u7f6e\u7684 sorted() \u786e\u4fdd\u662f\u7a33\u5b9a\u7684\u3002 \u5982\u679c\u4e00\u4e2a\u6392\u5e8f\u786e\u4fdd\u4e0d\u4f1a\u6539\u53d8\u6bd4\u8f83\u7ed3\u679c\u76f8\u7b49\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5c31\u79f0\u5176\u4e3a\u7a33\u5b9a\u7684 --- \u8fd9\u6709\u5229\u4e8e\u8fdb\u884c\u591a\u91cd\u6392\u5e8f\uff08\u4f8b\u5982\u5148\u6309\u90e8\u95e8\u3001\u518d\u6309\u85aa\u7ea7\u6392\u5e8f\uff09\u3002\u6709\u5173\u6392\u5e8f\u793a\u4f8b\u548c\u7b80\u8981\u6392\u5e8f\u6559\u7a0b\uff0c\u8bf7\u53c2\u9605 \u6392\u5e8f\u6307\u5357 \u3002 a = [ \"a\" , \"aa\" , \"aaa\" ] print ( sorted ( a , key = len )) print ( sorted ( a , key = len , reverse = True )) ['a', 'aa', 'aaa'] ['aaa', 'aa', 'a'] sum(iterable, start=0)","title":"S"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#t","text":"class type() class type(object) class type(name, bases, dict) \u4f20\u5165\u4e00\u4e2a\u53c2\u6570\u65f6\uff0c\u8fd4\u56de object \u7684\u7c7b\u578b\u3002 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a type \u5bf9\u8c61\uff0c\u901a\u5e38\u4e0e object.__class__ \u6240\u8fd4\u56de\u7684\u5bf9\u8c61\u76f8\u540c\u3002\u63a8\u8350\u4f7f\u7528 isinstance() \u5185\u7f6e\u51fd\u6570\u6765\u68c0\u6d4b\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u4f1a\u8003\u8651\u5b50\u7c7b\u7684\u60c5\u51b5\u3002\u4f20\u5165\u4e09\u4e2a\u53c2\u6570\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 type \u5bf9\u8c61\u3002 \u8fd9\u5728\u672c\u8d28\u4e0a\u662f class \u8bed\u53e5\u7684\u4e00\u79cd\u52a8\u6001\u5f62\u5f0f\u3002 name \u5b57\u7b26\u4e32\u5373\u7c7b\u540d\u5e76\u4e14\u4f1a\u6210\u4e3a __name__ \u5c5e\u6027\uff1b bases \u5143\u7ec4\u5217\u51fa\u57fa\u7c7b\u5e76\u4e14\u4f1a\u6210\u4e3a __bases__ \u5c5e\u6027\uff1b\u800c dict \u5b57\u5178\u4e3a\u5305\u542b\u7c7b\u4e3b\u4f53\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\u5e76\u4e14\u4f1a\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\u6210\u4e3a __dict__ \u5c5e\u6027\u3002 \u53e6\u8bf7\u53c2\u9605 \u7c7b\u578b\u5bf9\u8c61 \u3002 \u5728 3.6 \u7248\u66f4\u6539: type \u7684\u5b50\u7c7b\u5982\u679c\u672a\u91cd\u8f7d type.__new__ \uff0c\u5c06\u4e0d\u518d\u80fd\u4f7f\u7528\u4e00\u4e2a\u53c2\u6570\u7684\u5f62\u5f0f\u6765\u83b7\u53d6\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 class T : pass print ( T . __class__ ) print ( type ( T )) <class 'type'> <class 'type'> X = type ( 'X' , ( object ,), dict ( a = 1 )) class X : a = 1","title":"T"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#v","text":"vars([object]) \uff1a\u8fd4\u56de\u6a21\u5757\u3001\u7c7b\u3001\u5b9e\u4f8b\u6216\u4efb\u4f55\u5176\u5b83\u5177\u6709 __dict__ \u5c5e\u6027\u7684\u5bf9\u8c61\u7684 __dict__ \u5c5e\u6027\u3002\u6a21\u5757\u548c\u5b9e\u4f8b\u8fd9\u6837\u7684\u5bf9\u8c61\u5177\u6709\u53ef\u66f4\u65b0\u7684 __dict__ \u5c5e\u6027\uff1b\u4f46\u662f\uff0c\u5176\u5b83\u5bf9\u8c61\u7684 __dict__ \u5c5e\u6027\u53ef\u80fd\u4f1a\u8bbe\u4e3a\u9650\u5236\u5199\u5165\uff08\u4f8b\u5982\uff0c\u7c7b\u4f1a\u4f7f\u7528 types.MappingProxyType \u6765\u9632\u6b62\u76f4\u63a5\u66f4\u65b0\u5b57\u5178\uff09\u3002\u4e0d\u5e26\u53c2\u6570\u65f6\uff0c vars() \u7684\u884c\u4e3a\u7c7b\u4f3c locals() \u3002 \u8bf7\u6ce8\u610f\uff0clocals \u5b57\u5178\u4ec5\u5bf9\u4e8e\u8bfb\u53d6\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u5bf9 locals \u5b57\u5178\u7684\u66f4\u65b0\u4f1a\u88ab\u5ffd\u7565\u3002","title":"V"},{"location":"Python%E5%9F%BA%E7%A1%80/2.12.%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html#z","text":"zip(iterables) \uff1a\u521b\u5efa\u4e00\u4e2a\u805a\u5408\u4e86\u6765\u81ea\u6bcf\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 a = [ 1 , 2 , 3 ] b = [ \"a\" , \"b\" , \"c\" , \"d\" ] for i , j in zip ( a , b ): print ( i , j ) 1 a 2 b 3 c","title":"Z"},{"location":"Python%E5%9F%BA%E7%A1%80/2.13.%E7%AE%80%E6%B4%81%E7%9A%84Python.html","text":"Windows 10 Python 3.6.9 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.06.23 \u5e8f\u5217\u89e3\u5305 x , y , z = ( 1 , 2 , 3 ) print ( x , y , z ) x , y = y , x print ( x , y ) 1 2 3 2 1 \u8981\u89e3\u5305\u7684\u5e8f\u5217\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u4e0e\u4f60\u5728\u7b49\u53f7\u5de6\u8fb9\u5217\u51fa\u7684\u76ee\u6807\u4e2a\u6570\u76f8\u540c\uff0c\u5426\u5219Python\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 try : x , y = ( 1 , 2 , 3 ) except ValueError as e : print ( e ) try : x , y , z = ( 1 , 2 ) except ValueError as e : print ( e ) too many values to unpack (expected 2) not enough values to unpack (expected 3, got 2) \u53ef\u4f7f\u7528\u661f\u53f7\u8fd0\u7b97\u7b26\uff08 * \uff09\u6765\u6536\u96c6\u591a\u4f59\u7684\u503c\uff0c\u8fd9\u6837\u65e0\u9700\u786e\u4fdd\u503c\u548c\u53d8\u91cf\u7684\u4e2a\u6570\u76f8\u540c\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a x , * y = ( 1 , 2 , 3 ) print ( x , y ) x , * y , z = ( 1 , 2 , 3 , 4 ) print ( x , z ) 1 [2, 3] 1 4 \u94fe\u5f0f\u8d4b\u503c \u94fe\u5f0f\u8d4b\u503c\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u4e8e\u5c06\u591a\u4e2a\u53d8\u91cf\u5173\u8054\u5230\u540c\u4e00\u4e2a\u503c\u3002 x = y = 1 print ( x , y ) 1 1 \u4e0a\u8ff0\u4ee3\u7801\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\uff1a y = 1 x = y \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e24\u6761\u8bed\u53e5\u53ef\u80fd\u4e0e\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u7b49\u4ef7\uff1a x = somefunction () y = somefunction () if/else\u4e09\u5143\u8868\u8fbe\u5f0f a = 2 a if a > 0 else 1 2","title":"2.13.\u7b80\u6d01\u7684Python"},{"location":"Python%E5%9F%BA%E7%A1%80/2.13.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_1","text":"x , y , z = ( 1 , 2 , 3 ) print ( x , y , z ) x , y = y , x print ( x , y ) 1 2 3 2 1 \u8981\u89e3\u5305\u7684\u5e8f\u5217\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u4e0e\u4f60\u5728\u7b49\u53f7\u5de6\u8fb9\u5217\u51fa\u7684\u76ee\u6807\u4e2a\u6570\u76f8\u540c\uff0c\u5426\u5219Python\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 try : x , y = ( 1 , 2 , 3 ) except ValueError as e : print ( e ) try : x , y , z = ( 1 , 2 ) except ValueError as e : print ( e ) too many values to unpack (expected 2) not enough values to unpack (expected 3, got 2) \u53ef\u4f7f\u7528\u661f\u53f7\u8fd0\u7b97\u7b26\uff08 * \uff09\u6765\u6536\u96c6\u591a\u4f59\u7684\u503c\uff0c\u8fd9\u6837\u65e0\u9700\u786e\u4fdd\u503c\u548c\u53d8\u91cf\u7684\u4e2a\u6570\u76f8\u540c\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a x , * y = ( 1 , 2 , 3 ) print ( x , y ) x , * y , z = ( 1 , 2 , 3 , 4 ) print ( x , z ) 1 [2, 3] 1 4","title":"\u5e8f\u5217\u89e3\u5305"},{"location":"Python%E5%9F%BA%E7%A1%80/2.13.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_2","text":"\u94fe\u5f0f\u8d4b\u503c\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u4e8e\u5c06\u591a\u4e2a\u53d8\u91cf\u5173\u8054\u5230\u540c\u4e00\u4e2a\u503c\u3002 x = y = 1 print ( x , y ) 1 1 \u4e0a\u8ff0\u4ee3\u7801\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\uff1a y = 1 x = y \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e24\u6761\u8bed\u53e5\u53ef\u80fd\u4e0e\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u7b49\u4ef7\uff1a x = somefunction () y = somefunction ()","title":"\u94fe\u5f0f\u8d4b\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.13.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#ifelse","text":"a = 2 a if a > 0 else 1 2","title":"if/else\u4e09\u5143\u8868\u8fbe\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.20 \u8bed\u53e5 \u8bed\u53e5\uff08statement\uff09\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a\u7b80\u5355\u8bed\u53e5\u548c\u590d\u5408\u8bed\u53e5\u3002\u7b80\u5355\u8bed\u53e5\u53ea\u80fd\u5728\u4e00\u4e2a\u903b\u8f91\u884c\u5185\u5b8c\u6210\uff0c\u800c\u590d\u5408\u8bed\u53e5\u7531\u7b80\u5355\u8bed\u53e5\u548c\u590d\u5408\u8bed\u53e5\u6784\u6210\uff0c\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a\u903b\u8f91\u884c\u3002 \u8bed\u53e5\u5206\u7c7b \u7b80\u5355\u8bed\u53e5 \u590d\u5408\u8bed\u53e5 \u8868\u8fbe\u5f0f if \u8bed\u53e5 \u8d4b\u503c\u8bed\u53e5 while \u8bed\u53e5 \u589e\u5f3a\u8d4b\u503c\u8bed\u53e5 for \u8bed\u53e5 assert \u8bed\u53e5 try \u8bed\u53e5 pass \u8bed\u53e5 with \u8bed\u53e5 del \u8bed\u53e5 def \u51fd\u6570\u5b9a\u4e49 (\u4e0d\u5305\u62ec\u51fd\u6570\u4f53) return \u8bed\u53e5 class \u7c7b\u5b9a\u4e49 (\u4e0d\u5305\u62ec\u7c7b\u4f53) yield \u8bed\u53e5 async def \u534f\u7a0b\u51fd\u6570\u5b9a\u4e49 raise \u8bed\u53e5 async for \u8bed\u53e5 break \u8bed\u53e5 async with \u8bed\u53e5 continue \u8bed\u53e5 simple_stmt; \u7b80\u5355\u8bed\u53e5\u5e8f\u5217 import \u8bed\u53e5 \u590d\u5408\u8bed\u53e5\uff08\u5373\u590d\u5408\u8bed\u53e5\u5d4c\u5957\u590d\u5408\u8bed\u53e5\uff09 global \u8bed\u53e5 nonlocal \u8bed\u53e5 if \u8bed\u53e5 if \u8bed\u53e5\u7684\u5b8c\u6574\u5f62\u5f0f\u5982\u4e0b\uff08\u6ce8\u610f\u4e0d\u8981\u5c11\u5199\u4e86\u5192\u53f7 : \uff09\uff1a if condition_1 : statement_1 elif condition_2 : statement_2 else : statement_3 elif \u662f else if \u7684\u7f29\u5199\uff0c \u4f7f\u7528\u7f29\u5199\u662f\u4e3a\u4e86\u907f\u514d\u8fc7\u5ea6\u7f29\u8fdb\u3002 \u53ef\u4ee5\u6709\u591a\u4e2a elif \u3002 # example age = 3 if age >= 18 : print ( 'adult' ) elif age >= 6 : print ( 'teenager' ) else : print ( 'kid' ) kid if \u5224\u65ad\u6761\u4ef6\u8fd8\u53ef\u4ee5\u7b80\u5199\uff0c\u4f8b\u5982\uff1a age = 3 if age : print ( 'True' ) True \u5728Python\u4e2d\uff0c False \u3001 0 \u3001 '' \u3001 [] \u3001 () \u3001 {} \u90fd\u89c6\u4f5cFalse\uff0c\u5426\u5219\u4e3aTrue\u3002 \u6ce8\u610f\uff0c\u8d1f\u503c\u4e5f\u662f\u88ab\u5224\u65ad\u4e3a\u771f\u3002 assert \u65ad\u8a00 \u65ad\u8a00\u8bed\u53e5\u7528\u6765\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u5f15\u53d1 AssertionError \u5f02\u5e38\uff08\u5e76\u53ef\u63d0\u4f9b\u9519\u8bef\u6d88\u606f\uff09\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a assert condition \u7b49\u4ef7\u4e8e if not condition : crash program \u4f8b\u5b50\uff1a age = 3 assert age >= 12 , 'Children under the age of 12 are not allowed' ---------------------------------------------------------------------------AssertionError Traceback (most recent call last)<ipython-input-1-6fe548f20b1c> in <module> 1 age = 3 ----> 2 assert age >= 12, 'Children under the age of 12 are not allowed' AssertionError: Children under the age of 12 are not allowed \u5faa\u73af Python\u7684\u5faa\u73af\u6709\u4e24\u79cd: for \u5faa\u73af while \u5faa\u73af for \u8bed\u53e5 for \u5faa\u73af\uff0c \u4f9d\u6b21\u8fed\u4ee3 \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 \uff0c\u53ef\u5305\u542b else \u5b50\u53e5\uff0celse \u5b50\u53e5\u5728\u8fed\u4ee3\u7ed3\u675f\u65f6\u6267\u884c\u3002 # \u4f9d\u6b21\u8fed\u4ee3 names \u5e8f\u5217\u7684\u6bcf\u4e2a\u5143\u7d20, \u5c06\u5143\u7d20\u8d4b\u503c\u7ed9\u53d8\u91cf name # \u7136\u540e\u6267\u884c\u4ee3\u7801\u5757\u4e2d\u7684\u8bed\u53e5 names = [ 'Michael' , 'Bob' , 'Tracy' ] for name in names : print ( name ) Michael Bob Tracy \u6709\u4e9b\u8bed\u8a00\u8fed\u4ee3\u5e8f\u5217\u4e4b\u53ea\u80fd\u901a\u8fc7\u7d22\u5f15\u5b8c\u6210\uff0c\u4f8b\u5982\u4ee5\u4e0bjava\u4ee3\u7801\uff1a for ( i = 0 ; i < list . length ; i ++ ) { n = list [ i ] ; } \u53ef\u4ee5\u770b\u51fa\uff0cPython\u7684 for \u5faa\u73af\u62bd\u8c61\u7a0b\u5ea6\u8981\u9ad8\u4e8eJava\u7684 for \u5faa\u73af\uff0c\u56e0\u4e3aPython\u7684 for \u5faa\u73af\u4e0d\u5173\u5fc3\u591a\u8fed\u4ee3\u7684\u5bf9\u8c61\u662f\u5426\u652f\u6301\u7d22\u5f15\uff0c\u53ea\u8981\u8be5\u5bf9\u8c61\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5373\u53ef\u3002 \u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a from collections import Iterable isinstance ( 'abc' , Iterable ) True \u5982\u679c\u5728\u8fed\u4ee3\u5bf9\u8c61\u7684\u540c\u65f6\u4e5f\u60f3\u8fed\u4ee3\u5bf9\u8c61\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 enumerate \u51fd\u6570\uff1a for i , value in enumerate ([ 'A' , 'B' , 'C' ]): print ( i , value ) 0 A 1 B 2 C while \u8bed\u53e5 while \u8bed\u53e5\u7528\u4e8e \u5728\u6307\u5b9a\u6761\u4ef6\u4e3a\u771f\u65f6\u53cd\u590d\u5730\u6267\u884c\uff08\u5faa\u73af\uff09\uff0c\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u9000\u51fa\u5faa\u73af\u3002 \u53ef\u5305\u542b else \u5b50\u53e5\uff0celse \u5b50\u53e5\u5728\u6267\u884c\u6761\u4ef6\u4e3a false \u65f6\u6267\u884c\u3002 \u6bd4\u5982\u8981\u8ba1\u7b97100\u4ee5\u5185\u6240\u6709\u5947\u6570\u4e4b\u548c\uff0c\u53ef\u4ee5\u7528while\u5faa\u73af\u5b9e\u73b0\uff1a sum = 0 n = 99 # \u5728\u5faa\u73af\u5185\u90e8\u53d8\u91cf n \u4e0d\u65ad\u81ea\u51cf # \u76f4\u5230\u53d8\u4e3a n=0 \u65f6\uff0c\u4e0d\u518d\u6ee1\u8db3while\u6761\u4ef6\uff0c\u5faa\u73af\u9000\u51fa while n > 0 : sum = sum + n n = n - 2 print ( sum ) 2500 break \u5728\u5faa\u73af\u4e2d\uff0c break \u8bed\u53e5\u53ef\u4ee5\u63d0\u524d\u9000\u51fa\u5faa\u73af\u3002\u4f8b\u5982 \u6ce8\u610f break\u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 i = 1 while i < 100 : i = i + 1 print ( \"\u7ed3\u675f\u5faa\u73af\" ) break print ( i ) \u7ed3\u675f\u5faa\u73af break \u7684\u4f5c\u7528\u662f\u9000\u51fa\u5f53\u524d\u5faa\u73af\uff0c print(i) \u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c break \u53ea\u662f\u4e2d\u65ad\u5f53\u524d\u5c42\u7684\u5faa\u73af\uff0c\u4e0d\u4f1a\u4e2d\u65ad\u4e0a\u4e00\u5c42\u7684\u5faa\u73af\u3002 for i in range ( 3 ): for j in [ \"a\" , \"b\" , \"c\" ]: print ( j ) break a a a \u5185\u5c42\u5faa\u73af\u6253\u5370\u51fa\u4e00\u4e2a j \u503c\u4e4b\u540e\uff0c\u88ab break \u8bed\u53e5\u4e2d\u65ad\uff0c\u4f46\u5916\u5c42\u5faa\u73af\u5e76\u6ca1\u6709\u4e2d\u65ad\uff0c\u6240\u4ee5\u4ee3\u7801\u6267\u884c\u7684\u7ed3\u679c\u662f\u6253\u5370\u4e86\u4e09\u6b21 a \u3002 continue continue \u8bed\u53e5\uff1a\u8df3\u8fc7\u5f53\u524d\u5c42\u7684\u5f53\u524d\u5faa\u73af\uff0c\u76f4\u63a5\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\u3002 \u6ce8\u610f continue \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 n = 0 while n < 10 : n = n + 1 print ( n , end = \" \" ) 1 2 3 4 5 6 7 8 9 10 \u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u6253\u5370\u51fa1\uff5e10\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u53ea\u6253\u5370\u5947\u6570\uff0c\u53ef\u4ee5\u7528 continue \u8bed\u53e5\u8df3\u8fc7\u67d0\u4e9b\u5faa\u73af\uff1a n = 0 while n < 10 : n += 1 if n % 2 == 0 : # \u5982\u679cn\u662f\u5076\u6570\uff0c\u6267\u884ccontinue\u8bed\u53e5 continue # continue\u8bed\u53e5\u4f1a\u76f4\u63a5\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u540e\u7eed\u7684print()\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c print ( n , end = \" \" ) 1 3 5 7 9 \u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6253\u5370\u7684\u4e0d\u518d\u662f1\uff5e10\uff0c\u800c\u662f1\uff0c3\uff0c5\uff0c7\uff0c9\u3002 \u5faa\u73af\u4e2d\u7684 else \u5b50\u53e5 else \u5b50\u53e5\u4e0d\u4ec5\u53ef\u4ee5\u7528\u5728 if \u8bed\u53e5\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5faa\u73af\u8bed\u53e5\u3002\u5faa\u73af\u8bed\u53e5\u4e2d\u7684 else \u5b50\u53e5\u5728 for \u5faa\u73af\u8fed\u4ee3\u5b8c\u6210\u65f6\uff0c\u6216\u8005while\u5faa\u73af\u6267\u884c\u6761\u4ef6\u4e3a false \u65f6\u6267\u884c\uff0c\u4f46\u5faa\u73af\u88ab break \u4e2d\u6b62\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6267\u884c\u3002 # for\u5faa\u73af i = 1 for i in range ( 1 , 10 , 2 ): print ( i , end = \" \" ) else : print ( \"i =\" , i ) 1 3 5 7 9 i = 9 # while\u5faa\u73af i = 1 while i < 5 : print ( i , end = \" \" ) i += 1 else : print ( \"i =\" , i ) 1 2 3 4 i = 5 \u5f53\u5faa\u73af\u88abbreak\u8bed\u53e5\u4e2d\u65ad\uff0c\u6b64\u65f6else\u5b50\u53e5\u4e0d\u4f1a\u6267\u884c\uff1a i = 1 for i in range ( 1 , 10 , 2 ): break print ( i , end = \" \" ) else : print ( \"i =\" , i ) i = 1 while i < 5 : break print ( i , end = \" \" ) i += 1 else : print ( \"i =\" , i ) \u603b\u7ed3 break \u3001 continue \u8bed\u53e5\u901a\u5e38\u90fd\u914d\u5408 if \u8bed\u53e5\u4f7f\u7528\u3002 \u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e0d\u8981\u6ee5\u7528 break \u548c continue \u8bed\u53e5\u3002 break \u548c continue \u4f1a\u9020\u6210\u4ee3\u7801\u6267\u884c\u903b\u8f91\u5206\u53c9\u8fc7\u591a\uff0c\u5bb9\u6613\u51fa\u9519\u3002\u5927\u591a\u6570\u5faa\u73af\u5e76\u4e0d\u9700\u8981\u7528\u5230 break \u548c continue \u8bed\u53e5\uff0c\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u5faa\u73af\u6761\u4ef6\u6216\u8005\u4fee\u6539\u5faa\u73af\u903b\u8f91\uff0c\u53bb\u6389 break \u548c continue \u8bed\u53e5\u3002 pass \u8bed\u53e5 pass \u8bed\u53e5\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5b83\u7528\u4e8e\u90a3\u4e9b\u8bed\u6cd5\u4e0a\u5fc5\u987b\u8981\u6709\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7684\u573a\u5408\uff0c\u4f8b\u5982: # \u6b7b\u5faa\u73af while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) # \u521b\u5efa\u6700\u5c0f\u7ed3\u6784\u7684\u7c7b: class MyEmptyClass : pass # \u7a7a\u51fd\u6570 def fun : pass \u5982\u679c\u4f60\u6709\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u57fa\u7840\uff0c\u4f60\u53ef\u80fd\u4f1a\u7591\u60d1Python\u4e3a\u4ec0\u4e48\u8981\u6709pass\u8bed\u53e5\u3002 \u4e00\u65b9\u9762\uff0c\u8fd9\u662f\u4e3a\u4e86\u8bed\u6cd5\u7684\u5b8c\u5907\u6027\u3002\u4f8b\u5982\uff0c\u8981\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u51fd\u6570\u662f\u4e0d\u884c\u7684\uff1a def fun (): fun () IndentationError: expected an indented block def fun (): # TODO fun IndentationError: expected an indented block \u4e5f\u5c31\u662f\u8bf4\uff0c\u7f29\u8fdb\u4ee3\u7801\u5757\u4e2d\u5fc5\u987b\u5305\u542b\u6709\u8bed\u6cd5\u610f\u4e49\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a Python \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u5305\u542b\u51fd\u6570\u4f53\uff0c\u5373\u540c\u65f6\u5305\u542b \u58f0\u660e \u548c \u5b9a\u4e49 \u4e24\u79cd\u8bed\u4e49\uff0c\u4e0d\u50cfC\u8bed\u8a00\u53ef\u4ee5\u53ea\u4f7f\u7528\u58f0\u660e\u7684\u8bed\u4e49\uff0c\u5373\u5199\u6210 void fun(); \u3002\u540c\u65f6\uff0c\u53c8\u56e0\u4e3aPython\u901a\u8fc7\u7f29\u8fdb\u6765\u5212\u5206\u4ee3\u7801\u5757\uff0c\u6240\u4ee5Python\u65e0\u6cd5\u50cfC\u8bed\u8a00\u4e00\u6837\u4f7f\u7528 {} \u5b9a\u4e49\u51fa\u7a7a\u51fd\u6570\uff0c\u5373\u5199\u6210 void fun(){} \u3002 \u4e0a\u9762\u4e24\u79cd\u5b9a\u4e49\u7a7a\u51fd\u6570\u7684\u65b9\u5f0f\u90fd\u4f1a\u62a5 IndentationError: expected an indented block \u9519\u8bef\u3002\u56e0\u4e3a\u4ec0\u4e48\u90fd\u4e0d\u5199\uff08\u5373\u4f7f\u6709\u7f29\u8fdb\uff09\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7a7a\u884c\uff0c\u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002\u540c\u7406\uff0c\u6ce8\u91ca\u4e5f\u4e0d\u662f\u6709\u6548\u7684\u8bed\u6cd5\u3002 \u56e0\u6b64\uff0c\u4ece\u8bed\u6cd5\u5b8c\u6574\u6027\u7684\u89d2\u5ea6\u6765\u770b\uff0c pass \u8bed\u53e5\u662f\u5fc5\u987b\u7684\u8bbe\u8ba1\u8981\u7d20\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8ePython\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u53ef\u4ee5\u5229\u7528 pass \u8bed\u53e5\u4f5c\u4e3a\u4e00\u79cd\u5360\u4f4d\u7b26\uff0c\u7b49\u4e8e\u662f\u8bf4\u201d \u8fd9\u91cc\u5148\u9884\u7559\u4f4d\u7f6e\uff0c\u56de\u5934\u518d\u8865\u4e0a\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0 \u201d\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u529f\u80fd\u4e5f\u901a\u8fc7 # TODO \u6765\u5b9e\u73b0\uff0c\u56e0\u6b64\u5b9e\u73b0\u8bed\u6cd5\u5b8c\u5907\u6027\u662f pass \u8bed\u53e5\u7684\u4e3b\u8981\u4f5c\u7528\u3002 return \u8bed\u53e5 return \u8bed\u53e5\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u503c\uff0c\u5c06\u8fd4\u56de None \u3002\u793a\u4f8b\uff1a \u6ce8\u610f return \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u51fd\u6570\u4e2d\u3002 def func1 (): return 4 , 2 def func2 (): return print ( func1 ()) print ( func2 ()) (4, 2) None del \u8bed\u53e5 del \u8bed\u53e5\u7528\u4e8e\u89e3\u9664\u540d\u5b57\u548c\u5bf9\u8c61\u7684\u5173\u8054\u4ee5\u53ca\u5c06\u6570\u636e\u7ed3\u6784\uff08\u6620\u5c04\u6216\u5e8f\u5217\uff09\u7684\u4e00\u90e8\u5206\uff08\u5982\uff08\u4f4d\u7f6e\u3001\u5207\u7247\u6216\u5b58\u50a8\u69fd\uff09\u5220\u9664\u3002 \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5b83\u6765\u5220\u9664\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5bf9\u8c61\u53ea\u80fd\u901a\u8fc7\u5783\u573e\u6536\u96c6\u6765\u5220\u9664\u3002 del x # \u89e3\u9664\u53d8\u91cf\u4e0e\u503c\u7684\u5173\u8054 del seq [ 42 ] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 del seq [ 42 :] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5207\u7247 del map [ 'foo' ] # \u5220\u9664\u6620\u5c04\u4e2d\u7684\u4e00\u9879 \u6682\u672a\u63d0\u5230\u7684\u8bed\u53e5 \u8fd8\u6709\u4e00\u4e9bPython\u8bed\u53e5\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u63d0\u5230\uff1a yield \u8bed\u53e5\uff1a\u6682\u505c\u6267\u884c\u751f\u6210\u5668\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 raise \u8bed\u53e5\uff1a\u5f15\u53d1\u5f02\u5e38\u3002 try \u8bed\u53e5\uff1a\u7528\u4e8e\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u6bb5\uff0c\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\u5e76\u6267\u884c\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u3002 global \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u5168\u5c40\u7684\u3002 nonlocal \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u95ed\u5305\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 with \u8bed\u53e5\uff1a\u7528\u4e8e\u5305\u88c5\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4ee3\u7801\u5757\uff0c\u8ba9\u7ba1\u7406\u5668\u80fd\u591f\u6267\u884c\u4e00\u4e9b\u8bbe\u7f6e\u548c\u6e05\u7406\u64cd\u4f5c\u3002 import \u8bed\u53e5\uff1a\u4ece\u5916\u90e8\u6a21\u5757\u5bfc\u5165\u540d\u79f0\u3002","title":"2.2.\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_1","text":"\u8bed\u53e5\uff08statement\uff09\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a\u7b80\u5355\u8bed\u53e5\u548c\u590d\u5408\u8bed\u53e5\u3002\u7b80\u5355\u8bed\u53e5\u53ea\u80fd\u5728\u4e00\u4e2a\u903b\u8f91\u884c\u5185\u5b8c\u6210\uff0c\u800c\u590d\u5408\u8bed\u53e5\u7531\u7b80\u5355\u8bed\u53e5\u548c\u590d\u5408\u8bed\u53e5\u6784\u6210\uff0c\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a\u903b\u8f91\u884c\u3002 \u8bed\u53e5\u5206\u7c7b \u7b80\u5355\u8bed\u53e5 \u590d\u5408\u8bed\u53e5 \u8868\u8fbe\u5f0f if \u8bed\u53e5 \u8d4b\u503c\u8bed\u53e5 while \u8bed\u53e5 \u589e\u5f3a\u8d4b\u503c\u8bed\u53e5 for \u8bed\u53e5 assert \u8bed\u53e5 try \u8bed\u53e5 pass \u8bed\u53e5 with \u8bed\u53e5 del \u8bed\u53e5 def \u51fd\u6570\u5b9a\u4e49 (\u4e0d\u5305\u62ec\u51fd\u6570\u4f53) return \u8bed\u53e5 class \u7c7b\u5b9a\u4e49 (\u4e0d\u5305\u62ec\u7c7b\u4f53) yield \u8bed\u53e5 async def \u534f\u7a0b\u51fd\u6570\u5b9a\u4e49 raise \u8bed\u53e5 async for \u8bed\u53e5 break \u8bed\u53e5 async with \u8bed\u53e5 continue \u8bed\u53e5 simple_stmt; \u7b80\u5355\u8bed\u53e5\u5e8f\u5217 import \u8bed\u53e5 \u590d\u5408\u8bed\u53e5\uff08\u5373\u590d\u5408\u8bed\u53e5\u5d4c\u5957\u590d\u5408\u8bed\u53e5\uff09 global \u8bed\u53e5 nonlocal \u8bed\u53e5","title":"\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#if","text":"if \u8bed\u53e5\u7684\u5b8c\u6574\u5f62\u5f0f\u5982\u4e0b\uff08\u6ce8\u610f\u4e0d\u8981\u5c11\u5199\u4e86\u5192\u53f7 : \uff09\uff1a if condition_1 : statement_1 elif condition_2 : statement_2 else : statement_3 elif \u662f else if \u7684\u7f29\u5199\uff0c \u4f7f\u7528\u7f29\u5199\u662f\u4e3a\u4e86\u907f\u514d\u8fc7\u5ea6\u7f29\u8fdb\u3002 \u53ef\u4ee5\u6709\u591a\u4e2a elif \u3002 # example age = 3 if age >= 18 : print ( 'adult' ) elif age >= 6 : print ( 'teenager' ) else : print ( 'kid' ) kid if \u5224\u65ad\u6761\u4ef6\u8fd8\u53ef\u4ee5\u7b80\u5199\uff0c\u4f8b\u5982\uff1a age = 3 if age : print ( 'True' ) True \u5728Python\u4e2d\uff0c False \u3001 0 \u3001 '' \u3001 [] \u3001 () \u3001 {} \u90fd\u89c6\u4f5cFalse\uff0c\u5426\u5219\u4e3aTrue\u3002 \u6ce8\u610f\uff0c\u8d1f\u503c\u4e5f\u662f\u88ab\u5224\u65ad\u4e3a\u771f\u3002","title":"if \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#assert","text":"\u65ad\u8a00\u8bed\u53e5\u7528\u6765\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u5f15\u53d1 AssertionError \u5f02\u5e38\uff08\u5e76\u53ef\u63d0\u4f9b\u9519\u8bef\u6d88\u606f\uff09\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a assert condition \u7b49\u4ef7\u4e8e if not condition : crash program \u4f8b\u5b50\uff1a age = 3 assert age >= 12 , 'Children under the age of 12 are not allowed' ---------------------------------------------------------------------------AssertionError Traceback (most recent call last)<ipython-input-1-6fe548f20b1c> in <module> 1 age = 3 ----> 2 assert age >= 12, 'Children under the age of 12 are not allowed' AssertionError: Children under the age of 12 are not allowed","title":"assert \u65ad\u8a00"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_2","text":"Python\u7684\u5faa\u73af\u6709\u4e24\u79cd: for \u5faa\u73af while \u5faa\u73af","title":"\u5faa\u73af"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#for","text":"for \u5faa\u73af\uff0c \u4f9d\u6b21\u8fed\u4ee3 \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 \uff0c\u53ef\u5305\u542b else \u5b50\u53e5\uff0celse \u5b50\u53e5\u5728\u8fed\u4ee3\u7ed3\u675f\u65f6\u6267\u884c\u3002 # \u4f9d\u6b21\u8fed\u4ee3 names \u5e8f\u5217\u7684\u6bcf\u4e2a\u5143\u7d20, \u5c06\u5143\u7d20\u8d4b\u503c\u7ed9\u53d8\u91cf name # \u7136\u540e\u6267\u884c\u4ee3\u7801\u5757\u4e2d\u7684\u8bed\u53e5 names = [ 'Michael' , 'Bob' , 'Tracy' ] for name in names : print ( name ) Michael Bob Tracy \u6709\u4e9b\u8bed\u8a00\u8fed\u4ee3\u5e8f\u5217\u4e4b\u53ea\u80fd\u901a\u8fc7\u7d22\u5f15\u5b8c\u6210\uff0c\u4f8b\u5982\u4ee5\u4e0bjava\u4ee3\u7801\uff1a for ( i = 0 ; i < list . length ; i ++ ) { n = list [ i ] ; } \u53ef\u4ee5\u770b\u51fa\uff0cPython\u7684 for \u5faa\u73af\u62bd\u8c61\u7a0b\u5ea6\u8981\u9ad8\u4e8eJava\u7684 for \u5faa\u73af\uff0c\u56e0\u4e3aPython\u7684 for \u5faa\u73af\u4e0d\u5173\u5fc3\u591a\u8fed\u4ee3\u7684\u5bf9\u8c61\u662f\u5426\u652f\u6301\u7d22\u5f15\uff0c\u53ea\u8981\u8be5\u5bf9\u8c61\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5373\u53ef\u3002 \u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a from collections import Iterable isinstance ( 'abc' , Iterable ) True \u5982\u679c\u5728\u8fed\u4ee3\u5bf9\u8c61\u7684\u540c\u65f6\u4e5f\u60f3\u8fed\u4ee3\u5bf9\u8c61\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 enumerate \u51fd\u6570\uff1a for i , value in enumerate ([ 'A' , 'B' , 'C' ]): print ( i , value ) 0 A 1 B 2 C","title":"for \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#while","text":"while \u8bed\u53e5\u7528\u4e8e \u5728\u6307\u5b9a\u6761\u4ef6\u4e3a\u771f\u65f6\u53cd\u590d\u5730\u6267\u884c\uff08\u5faa\u73af\uff09\uff0c\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u9000\u51fa\u5faa\u73af\u3002 \u53ef\u5305\u542b else \u5b50\u53e5\uff0celse \u5b50\u53e5\u5728\u6267\u884c\u6761\u4ef6\u4e3a false \u65f6\u6267\u884c\u3002 \u6bd4\u5982\u8981\u8ba1\u7b97100\u4ee5\u5185\u6240\u6709\u5947\u6570\u4e4b\u548c\uff0c\u53ef\u4ee5\u7528while\u5faa\u73af\u5b9e\u73b0\uff1a sum = 0 n = 99 # \u5728\u5faa\u73af\u5185\u90e8\u53d8\u91cf n \u4e0d\u65ad\u81ea\u51cf # \u76f4\u5230\u53d8\u4e3a n=0 \u65f6\uff0c\u4e0d\u518d\u6ee1\u8db3while\u6761\u4ef6\uff0c\u5faa\u73af\u9000\u51fa while n > 0 : sum = sum + n n = n - 2 print ( sum ) 2500","title":"while \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#break","text":"\u5728\u5faa\u73af\u4e2d\uff0c break \u8bed\u53e5\u53ef\u4ee5\u63d0\u524d\u9000\u51fa\u5faa\u73af\u3002\u4f8b\u5982 \u6ce8\u610f break\u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 i = 1 while i < 100 : i = i + 1 print ( \"\u7ed3\u675f\u5faa\u73af\" ) break print ( i ) \u7ed3\u675f\u5faa\u73af break \u7684\u4f5c\u7528\u662f\u9000\u51fa\u5f53\u524d\u5faa\u73af\uff0c print(i) \u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c break \u53ea\u662f\u4e2d\u65ad\u5f53\u524d\u5c42\u7684\u5faa\u73af\uff0c\u4e0d\u4f1a\u4e2d\u65ad\u4e0a\u4e00\u5c42\u7684\u5faa\u73af\u3002 for i in range ( 3 ): for j in [ \"a\" , \"b\" , \"c\" ]: print ( j ) break a a a \u5185\u5c42\u5faa\u73af\u6253\u5370\u51fa\u4e00\u4e2a j \u503c\u4e4b\u540e\uff0c\u88ab break \u8bed\u53e5\u4e2d\u65ad\uff0c\u4f46\u5916\u5c42\u5faa\u73af\u5e76\u6ca1\u6709\u4e2d\u65ad\uff0c\u6240\u4ee5\u4ee3\u7801\u6267\u884c\u7684\u7ed3\u679c\u662f\u6253\u5370\u4e86\u4e09\u6b21 a \u3002","title":"break"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#continue","text":"continue \u8bed\u53e5\uff1a\u8df3\u8fc7\u5f53\u524d\u5c42\u7684\u5f53\u524d\u5faa\u73af\uff0c\u76f4\u63a5\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\u3002 \u6ce8\u610f continue \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 n = 0 while n < 10 : n = n + 1 print ( n , end = \" \" ) 1 2 3 4 5 6 7 8 9 10 \u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u6253\u5370\u51fa1\uff5e10\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u53ea\u6253\u5370\u5947\u6570\uff0c\u53ef\u4ee5\u7528 continue \u8bed\u53e5\u8df3\u8fc7\u67d0\u4e9b\u5faa\u73af\uff1a n = 0 while n < 10 : n += 1 if n % 2 == 0 : # \u5982\u679cn\u662f\u5076\u6570\uff0c\u6267\u884ccontinue\u8bed\u53e5 continue # continue\u8bed\u53e5\u4f1a\u76f4\u63a5\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u540e\u7eed\u7684print()\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c print ( n , end = \" \" ) 1 3 5 7 9 \u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6253\u5370\u7684\u4e0d\u518d\u662f1\uff5e10\uff0c\u800c\u662f1\uff0c3\uff0c5\uff0c7\uff0c9\u3002","title":"continue"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#else","text":"else \u5b50\u53e5\u4e0d\u4ec5\u53ef\u4ee5\u7528\u5728 if \u8bed\u53e5\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5faa\u73af\u8bed\u53e5\u3002\u5faa\u73af\u8bed\u53e5\u4e2d\u7684 else \u5b50\u53e5\u5728 for \u5faa\u73af\u8fed\u4ee3\u5b8c\u6210\u65f6\uff0c\u6216\u8005while\u5faa\u73af\u6267\u884c\u6761\u4ef6\u4e3a false \u65f6\u6267\u884c\uff0c\u4f46\u5faa\u73af\u88ab break \u4e2d\u6b62\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6267\u884c\u3002 # for\u5faa\u73af i = 1 for i in range ( 1 , 10 , 2 ): print ( i , end = \" \" ) else : print ( \"i =\" , i ) 1 3 5 7 9 i = 9 # while\u5faa\u73af i = 1 while i < 5 : print ( i , end = \" \" ) i += 1 else : print ( \"i =\" , i ) 1 2 3 4 i = 5 \u5f53\u5faa\u73af\u88abbreak\u8bed\u53e5\u4e2d\u65ad\uff0c\u6b64\u65f6else\u5b50\u53e5\u4e0d\u4f1a\u6267\u884c\uff1a i = 1 for i in range ( 1 , 10 , 2 ): break print ( i , end = \" \" ) else : print ( \"i =\" , i ) i = 1 while i < 5 : break print ( i , end = \" \" ) i += 1 else : print ( \"i =\" , i ) \u603b\u7ed3 break \u3001 continue \u8bed\u53e5\u901a\u5e38\u90fd\u914d\u5408 if \u8bed\u53e5\u4f7f\u7528\u3002 \u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e0d\u8981\u6ee5\u7528 break \u548c continue \u8bed\u53e5\u3002 break \u548c continue \u4f1a\u9020\u6210\u4ee3\u7801\u6267\u884c\u903b\u8f91\u5206\u53c9\u8fc7\u591a\uff0c\u5bb9\u6613\u51fa\u9519\u3002\u5927\u591a\u6570\u5faa\u73af\u5e76\u4e0d\u9700\u8981\u7528\u5230 break \u548c continue \u8bed\u53e5\uff0c\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u5faa\u73af\u6761\u4ef6\u6216\u8005\u4fee\u6539\u5faa\u73af\u903b\u8f91\uff0c\u53bb\u6389 break \u548c continue \u8bed\u53e5\u3002","title":"\u5faa\u73af\u4e2d\u7684else\u5b50\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#pass","text":"pass \u8bed\u53e5\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5b83\u7528\u4e8e\u90a3\u4e9b\u8bed\u6cd5\u4e0a\u5fc5\u987b\u8981\u6709\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7684\u573a\u5408\uff0c\u4f8b\u5982: # \u6b7b\u5faa\u73af while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) # \u521b\u5efa\u6700\u5c0f\u7ed3\u6784\u7684\u7c7b: class MyEmptyClass : pass # \u7a7a\u51fd\u6570 def fun : pass \u5982\u679c\u4f60\u6709\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u57fa\u7840\uff0c\u4f60\u53ef\u80fd\u4f1a\u7591\u60d1Python\u4e3a\u4ec0\u4e48\u8981\u6709pass\u8bed\u53e5\u3002 \u4e00\u65b9\u9762\uff0c\u8fd9\u662f\u4e3a\u4e86\u8bed\u6cd5\u7684\u5b8c\u5907\u6027\u3002\u4f8b\u5982\uff0c\u8981\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u51fd\u6570\u662f\u4e0d\u884c\u7684\uff1a def fun (): fun () IndentationError: expected an indented block def fun (): # TODO fun IndentationError: expected an indented block \u4e5f\u5c31\u662f\u8bf4\uff0c\u7f29\u8fdb\u4ee3\u7801\u5757\u4e2d\u5fc5\u987b\u5305\u542b\u6709\u8bed\u6cd5\u610f\u4e49\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a Python \u5728\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u5305\u542b\u51fd\u6570\u4f53\uff0c\u5373\u540c\u65f6\u5305\u542b \u58f0\u660e \u548c \u5b9a\u4e49 \u4e24\u79cd\u8bed\u4e49\uff0c\u4e0d\u50cfC\u8bed\u8a00\u53ef\u4ee5\u53ea\u4f7f\u7528\u58f0\u660e\u7684\u8bed\u4e49\uff0c\u5373\u5199\u6210 void fun(); \u3002\u540c\u65f6\uff0c\u53c8\u56e0\u4e3aPython\u901a\u8fc7\u7f29\u8fdb\u6765\u5212\u5206\u4ee3\u7801\u5757\uff0c\u6240\u4ee5Python\u65e0\u6cd5\u50cfC\u8bed\u8a00\u4e00\u6837\u4f7f\u7528 {} \u5b9a\u4e49\u51fa\u7a7a\u51fd\u6570\uff0c\u5373\u5199\u6210 void fun(){} \u3002 \u4e0a\u9762\u4e24\u79cd\u5b9a\u4e49\u7a7a\u51fd\u6570\u7684\u65b9\u5f0f\u90fd\u4f1a\u62a5 IndentationError: expected an indented block \u9519\u8bef\u3002\u56e0\u4e3a\u4ec0\u4e48\u90fd\u4e0d\u5199\uff08\u5373\u4f7f\u6709\u7f29\u8fdb\uff09\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7a7a\u884c\uff0c\u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002\u540c\u7406\uff0c\u6ce8\u91ca\u4e5f\u4e0d\u662f\u6709\u6548\u7684\u8bed\u6cd5\u3002 \u56e0\u6b64\uff0c\u4ece\u8bed\u6cd5\u5b8c\u6574\u6027\u7684\u89d2\u5ea6\u6765\u770b\uff0c pass \u8bed\u53e5\u662f\u5fc5\u987b\u7684\u8bbe\u8ba1\u8981\u7d20\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8ePython\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u53ef\u4ee5\u5229\u7528 pass \u8bed\u53e5\u4f5c\u4e3a\u4e00\u79cd\u5360\u4f4d\u7b26\uff0c\u7b49\u4e8e\u662f\u8bf4\u201d \u8fd9\u91cc\u5148\u9884\u7559\u4f4d\u7f6e\uff0c\u56de\u5934\u518d\u8865\u4e0a\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0 \u201d\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u529f\u80fd\u4e5f\u901a\u8fc7 # TODO \u6765\u5b9e\u73b0\uff0c\u56e0\u6b64\u5b9e\u73b0\u8bed\u6cd5\u5b8c\u5907\u6027\u662f pass \u8bed\u53e5\u7684\u4e3b\u8981\u4f5c\u7528\u3002","title":"pass \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#return","text":"return \u8bed\u53e5\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u503c\uff0c\u5c06\u8fd4\u56de None \u3002\u793a\u4f8b\uff1a \u6ce8\u610f return \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u51fd\u6570\u4e2d\u3002 def func1 (): return 4 , 2 def func2 (): return print ( func1 ()) print ( func2 ()) (4, 2) None","title":"return \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#del","text":"del \u8bed\u53e5\u7528\u4e8e\u89e3\u9664\u540d\u5b57\u548c\u5bf9\u8c61\u7684\u5173\u8054\u4ee5\u53ca\u5c06\u6570\u636e\u7ed3\u6784\uff08\u6620\u5c04\u6216\u5e8f\u5217\uff09\u7684\u4e00\u90e8\u5206\uff08\u5982\uff08\u4f4d\u7f6e\u3001\u5207\u7247\u6216\u5b58\u50a8\u69fd\uff09\u5220\u9664\u3002 \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5b83\u6765\u5220\u9664\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5bf9\u8c61\u53ea\u80fd\u901a\u8fc7\u5783\u573e\u6536\u96c6\u6765\u5220\u9664\u3002 del x # \u89e3\u9664\u53d8\u91cf\u4e0e\u503c\u7684\u5173\u8054 del seq [ 42 ] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 del seq [ 42 :] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5207\u7247 del map [ 'foo' ] # \u5220\u9664\u6620\u5c04\u4e2d\u7684\u4e00\u9879","title":"del \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_3","text":"\u8fd8\u6709\u4e00\u4e9bPython\u8bed\u53e5\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u63d0\u5230\uff1a yield \u8bed\u53e5\uff1a\u6682\u505c\u6267\u884c\u751f\u6210\u5668\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 raise \u8bed\u53e5\uff1a\u5f15\u53d1\u5f02\u5e38\u3002 try \u8bed\u53e5\uff1a\u7528\u4e8e\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u6bb5\uff0c\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\u5e76\u6267\u884c\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u3002 global \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u5168\u5c40\u7684\u3002 nonlocal \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u95ed\u5305\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 with \u8bed\u53e5\uff1a\u7528\u4e8e\u5305\u88c5\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4ee3\u7801\u5757\uff0c\u8ba9\u7ba1\u7406\u5668\u80fd\u591f\u6267\u884c\u4e00\u4e9b\u8bbe\u7f6e\u548c\u6e05\u7406\u64cd\u4f5c\u3002 import \u8bed\u53e5\uff1a\u4ece\u5916\u90e8\u6a21\u5757\u5bfc\u5165\u540d\u79f0\u3002","title":"\u6682\u672a\u63d0\u5230\u7684\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","text":"Windows 10 Python 3.8.5 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.28 Python 3 \u5185\u7f6e\u4e86\u4e00\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5176\u5206\u7c7b\u548c\u5c42\u6b21\u5173\u7cfb\u5982\u4e0b\uff1a \u539f\u5b50\u7c7b\u578b None NotImplemented ellipsis ( ... and Ellipsis ) Number int bool float complex \u5bb9\u5668\u7c7b\u578b \u5e8f\u5217 list tuple str bytes (byte array) \u6620\u5c04 dict set constant Python \u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u91cf\u7c7b\u578b\uff0c\u5305\u62ec None \u3001 NotImplemented \u3001 ellipsis \uff0c\u8fd9\u4e9b\u7c7b\u578b\u53ea\u6709\u5355\u4e00\u503c\uff0c\u4e5f\u53ea\u6709\u4e00\u4e2a\u5bf9\u8c61\u6709\u8fd9\u4e2a\u503c\uff08\u5355\u4f8b\uff09\u3002 ellipsis \u6709\u4e24\u4e2a\u5b57\u9762\u503c\uff1a ... \u548c Ellipsis \u3002 sequence \u5e8f\u5217 \u662f\u6309\u987a\u5e8f\u4fdd\u5b58\u5bf9\u8c61\u7684\u5bb9\u5668 (containers)\u3002\u53ef\u4ee5\u901a\u8fc7\u6574\u6570\u7d22\u5f15\u8bbf\u95ee\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u3002\u5c06\u5176\u79f0\u4e3a\u5bb9\u5668\u662f\u56e0\u4e3a\u5b83\u4eec\u662f\u4e00\u79cd\u5305\u542b\u4efb\u610f\u6570\u91cf\u5bf9\u8c61\u7684\u5bf9\u8c61\u3002\u4efb\u610f\u6570\u91cf\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u5305\u542b 0 \u4e2a\u5143\u7d20\u3002 \u67d0\u4e9b\u7f16\u7a0b\u8bed\u8a00\u53ef\u80fd\u4f7f\u7528\u8bf8\u5982\u201d\u5411\u91cf\u201c\u6216\u201c\u6570\u7ec4\u201d\u4e4b\u7c7b\u7684\u8bcd\u6765\u6307\u4ee3\u987a\u5e8f\u5bb9\u5668\u3002\u867d\u7136\u5e8f\u5217\u548c\u6570\u7ec4\u90fd\u662f\u987a\u5e8f\u5bb9\u5668\uff0c\u903b\u8f91\u4e0a\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u53ef\u80fd\u5e76\u4e0d\u662f\u8fde\u7eed\u7684\u3002\u4f8b\u5982\uff0c\u6570\u7ec4\u7684\u5143\u7d20\u5f80\u5f80\u90fd\u662f\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u8fde\u7eed\u533a\u57df\uff08\u7269\u7406\u610f\u4e49\u4e0a\uff09\uff1b\u800c\u5e8f\u5217\u5143\u7d20\u7684\u771f\u5b9e\u50a8\u5b58\u4f4d\u7f6e\u53ef\u80fd\u662f\u5206\u6563\u7684\u3002 \u5728 C \u6216 Java \u4e2d\uff0c\u5176\u6570\u7ec4\u5177\u6709\u9759\u6001\u5206\u914d\u7684\u5927\u5c0f\u3002\u5728 Java \u4e2d\uff0c\u6570\u7ec4\u7684\u7d22\u5f15\u51fa\u754c\u5c06\u5f15\u53d1\u5f02\u5e38\uff0c\u4f46\u5728 C \u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u7d22\u5f15\u51fa\u754c\u53ef\u80fd\u4e0d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002Python \u5219\u63d0\u4f9b\u4e86\u4e24\u79cd\u5e8f\u5217\uff0c\u53ef\u53d8\u7684\u5e8f\u5217 list \u548c \u4e0d\u53ef\u53d8\u7684\u5e8f\u5217 tuple \u3002\u53ef\u53d8\u610f\u5473\u7740\u5e8f\u5217\u7684\u5143\u7d20\u53ef\u4ee5\u88ab\u4fee\u6539\u3001\u5220\u9664\u3001\u6dfb\u52a0\u3002 str \u662f Python 3 \u7684\u5b57\u7b26\u4e32\uff0c\u672c\u8d28\u662f Unicode \u5b57\u7b26\u7684\u4e0d\u53ef\u53d8\u5e8f\u5217\u3002Python \u6ca1\u6709 char \u7c7b\u578b\uff0c\u5373\u5b57\u7b26\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b57\u7b26\u53ef\u4ee5\u7528\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 bytes \u662f Python 3 \u7684\u4e0d\u53ef\u53d8 bytes \uff08\u5b57\u8282\uff09\u5e8f\u5217\uff0c\u5373\u6587\u672c\u5b57\u7b26\u4e32\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002 \u5b9e\u9645\u4e0a\uff0c Python \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4efb\u610f\u5927\u5c0f\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u8fd9\u662f\u901a\u8fc7\u52a8\u6001\u521b\u5efa\u65b0\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u4fee\u6539\u73b0\u6709\u5b57\u7b26\u4e32\u6765\u5b9e\u73b0\u7684\u3002 \u5728\u5176\u4ed6\u8bed\u8a00\u4e0a\u6709\u4e30\u5bcc\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u95ee\uff0c\u901a\u8fc7\u4fee\u6539\u539f\u59cb\u5b57\u7b26\u4e32\u6765\u5f97\u5230\u65b0\u5b57\u7b26\u4e32\u662f\u5426\u662f\u5b9e\u73b0\u6b64\u76ee\u7684\u7684\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5\u3002\u6216\u8005\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u8ba9\u53ef\u53d8\u5b57\u7b26\u4e32\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u7b80\u77ed\u7684\u7b54\u6848\u662f\uff0cPython\u7684\u5b58\u50a8\u7ba1\u7406\u4f7f\u5bf9\u4e0d\u53ef\u53d8\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u53d8\u5f97\u6700\u7b80\u5355\u3001\u6700\u6709\u6548\u7387\u3002 \u6548\u7387\u4f53\u73b0\u5728\u591a\u4e2a\u65b9\u9762\uff0c\u6700\u5e38\u89c1\u7684\u662f\u65f6\u95f4\u548c\u5185\u5b58\u4f7f\u7528\u91cf\u3002\u53ef\u53d8\u5b57\u7b26\u4e32\u5360\u7528\u8f83\u5c11\u7684\u5185\u5b58\u3002\u4f46\u662f\uff0c\u8fd9\u4ec5\u5728\u826f\u6027\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u662f\u6b63\u786e\u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ec5\u5728\u56fa\u5b9a\u5927\u5c0f\u7684\u7f13\u51b2\u533a\u4e2d\u66ff\u6362\u6216\u7f29\u5c0f\u539f\u5b57\u7b26\u4e32\u3002\u5982\u679c\u5b57\u7b26\u4e32\u6269\u5c55\u540e\u8d85\u51fa\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u5219\u7a0b\u5e8f\u5fc5\u987b\u5d29\u6e83\u6216\u51fa\u73b0\u5f02\u5e38\uff0c\u6216\u8005\u5fc5\u987b\u5207\u6362\u5230\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002 Python \u4ece\u4e00\u5f00\u59cb\u5c31\u53ea\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002\u901a\u8fc7\u5c1d\u8bd5\u8bbf\u95ee\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u4e4b\u5916\u7684\u5185\u5b58\uff0cC \u7a0b\u5e8f\u901a\u5e38\u4f1a\u9047\u5230\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\u3002Python \u5219\u901a\u8fc7\u4f7f\u7528\u4e0d\u53ef\u53d8\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u52a8\u6001\u5206\u914d\u907f\u514d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u5904\u7406\u53ef\u53d8\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528\u66f4\u5c11\u7684\u65f6\u95f4\uff1b\u66f4\u6539\u5b57\u7b26\u4e32\u6216\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u5b57\u7b26\u65f6\uff0c\u56fa\u5b9a\u957f\u5ea6\u7684\u7f13\u51b2\u533a\u5c06\u9700\u8981\u8f83\u5c11\u7684\u5185\u5b58\u5f00\u9500\u3002\u57fa\u4e8e\u8fd9\u4e24\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u601d\u8003\u5982\u4f55\u6709\u6548\u5730\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u62b1\u6028 Python \u63d0\u4f9b\u4e0d\u53ef\u53d8\u7684\u5b57\u7b26\u4e32\u3002 \u5728\u6587\u672c\u5bc6\u96c6\u578b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u8981\u907f\u514d\u521b\u5efa\u5355\u72ec\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u7f13\u51b2\u533a\uff08input buffer\uff09\u3002\u6211\u4eec\u521b\u5efa slice \u5bf9\u8c61\uff08\u6765\u5f15\u7528\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\uff09\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c slice \u5bf9\u8c61\u63cf\u8ff0\u4e86\u552f\u4e00\u7684\u8f93\u5165\u7f13\u51b2\u533a\u4e2d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\u5982\u679c\u968f\u540e\u9700\u8981\u64cd\u7eb5\u8f93\u5165\u7f13\u51b2\u533a\u7684\u8fd9\u4e9b\u7247\u6bb5\uff0c\u53ea\u8981\u6309\u9700\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u65e8\u5728\u63d0\u9ad8\u6548\u7387\u3002\u5f53\u6211\u4eec\u60f3\u8981\u7075\u6d3b\u6027\u548c\u7b80\u5355\u6027\u65f6\uff0c\u5219\u4f7f\u7528 Python \u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 dictionary Python \u63d0\u4f9b\u4e86\u521b\u5efa\u5404\u79cd\u4e0d\u540c\u6620\u5c04\u7c7b\u578b\u7684\u89c4\u5b9a\uff0c\u4f46\u5185\u7f6e\u53ea\u6709\u4e00\u79cd\u6620\u5c04\u7c7b\u578b\uff0c\u5373\u5b57\u5178\u3002 dict \u5c06\u952e (key) \u6620\u5c04\u5230\u503c\u3002key \u53ef\u4ee5\u662f\u5177\u6709\u4e00\u81f4\u54c8\u5e0c\u503c\u7684\u4efb\u4f55 Python \u5bf9\u8c61\uff0ckey \u5f15\u7528\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684Python\u5bf9\u8c61\u3002 \u5b57\u5178\u4e0d\u4fdd\u7559\u5143\u7d20\u7684\u63d2\u5165\u987a\u5e8f\uff0c\u800c\u662f\u901a\u8fc7\u5feb\u901f\u8ba1\u7b97 key \u7684\u54c8\u5e0c\u503c\u6765\u83b7\u53d6\u6bcf\u4e2a\u5143\u7d20\u5728\u5b57\u5178\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5176\u5143\u7d20\u88ab\u63d2\u5165\u5230\u4e0e key \u7684\u54c8\u5e0c\u503c\u76f8\u5173\u7684\u4f4d\u7f6e\u3002\u56e0\u6b64 key \u5bf9\u8c61\u5fc5\u987b\u5177\u6709\u4e00\u4e2a\u4e0d\u53d8\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u610f\u5473\u7740 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u7f16\u7a0b\u9700\u6c42\u662f\u5c06\u547d\u540d\u7684\u5f02\u6784\u6570\u636e\u4fdd\u5b58\u5230\u5bb9\u5668\u3002\u6570\u636e\u5e93\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6570\u636e\u5e93\u7684\u4e0d\u540c\u8bb0\u5f55\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u3002C \u6216 C++ \u7684 struct \u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u79cd\u547d\u540d\u7684\u6570\u636e\u96c6\u5408\u53ef\u80fd\u6700\u597d\u7528\u4e00\u4e2a\u7c7b\u6216\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\u6765\u5904\u7406\uff0c\u4f46\u6620\u5c04\u7c7b\u578b\u4e5f\u9002\u7528\u4e8e\u5177\u6709\u547d\u540d\u5b57\u6bb5\u7684\u5f02\u6784\u6570\u636e\u3002 \u8bb8\u591a\u8bed\u8a00\u4f7f\u7528\u9759\u6001\u5b9a\u4e49\u7684\u5177\u6709\u547d\u540d\u5b57\u6bb5\u7684\u5bb9\u5668\u6765\u4fdd\u5b58\u8fd9\u4e9b\u6570\u636e\uff0c\u4f46 Python \u7684\u5b57\u5178\u662f\u52a8\u6001\u7684\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0\u5b57\u6bb5\u540d\u79f0\u3002 \u6709\u4e00\u4e9b\u672f\u8bed\u5c06\u5b57\u5178\u89c6\u4e3a\uff08key: value\uff09\u5bf9\u7684\u5bb9\u5668\u3002\u5b57\u5178\u4e5f\u53ef\u4ee5\u79f0\u4e3a associative array\uff08\u5173\u8054\u6570\u7ec4\uff09\u3002 \u4ee5\u5e8f\u5217\u4e3a\u4ee3\u8868\u7684\u666e\u901a\u6570\u7ec4\u4f7f\u7528\u6570\u5b57\u7d22\u5f15\uff0c\u4f46\u662f\u5b57\u5178\u7684\u7d22\u5f15\u662f key \u5bf9\u8c61\uff0c\u6bcf\u4e2a\u952e\u90fd\u5173\u8054\uff08\u6620\u5c04\uff09\u5230\u5bf9\u5e94\u7684\u503c\u3002 \u54c8\u5e0c\u7684\u4e00\u79cd\u5e38\u89c1\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528\u67d0\u79cd\u6709\u5e8f\u7ed3\u6784\u6765\u7ef4\u62a4 key\u3002\u8fd9\u53ef\u80fd\u662f\u6811\u6216\u5217\u8868\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5176\u4ed6\u7c7b\u578b\u7684\u6620\u5c04\u3002\u4f8b\u5982\uff0cPython collections \u6a21\u5757\u4e2d\u6709\u4e00\u79cd\u6709\u5e8f\u5b57\u5178\u3002 set set\uff08\u96c6\u5408\uff09\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u5bb9\u5668\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4fdd\u5b58\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u5143\u7d20\u4e5f\u6ca1\u6709\u7279\u5b9a\u7684\u6807\u8bc6\u3002\u5143\u7d20\u672c\u8eab\u4f5c\u4e3a\u81ea\u5df1\u7684\u6807\u8bc6\uff0c\u56e0\u6b64\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e0d\u80fd\u91cd\u590d\u3002 Python data type and C structure \u6807\u51c6\u7684 Python \u5b9e\u73b0\u662f\u7528 C \u7f16\u5199\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a Python \u5bf9\u8c61\u53ea\u662f\u4e00\u4e2a\u5de7\u5999\u4f2a\u88c5\u7684 C \u7ed3\u6784\u3002Python \u5bf9\u8c61\u4e0d\u4ec5\u5305\u542b\u5b83\u7684\u503c\uff0c\u8fd8\u5305\u542b\u5176\u4ed6\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u5728 Python \u4e2d\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u65f6\uff0c\u6bd4\u5982 x=100 \uff0c x \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u6574\u6570\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u5411\u590d\u5408 C \u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u51e0\u4e2a\u503c\u3002 \u901a\u8fc7\u67e5\u770b Python 3.4 \u7684\u6e90\u4ee3\u7801\uff0c\u6574\u6570\u7c7b\u578b\u7684\u5b9a\u4e49\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\uff1a struct _longobject { long ob_refcnt ; PyTypeObject * ob_type ; size_t ob_size ; long ob_digit [ 1 ]; }; Python 3.4 \u4e2d\u7684\u4e00\u4e2a\u6574\u6570\u5b9e\u9645\u4e0a\u5305\u542b\u56db\u4e2a\u90e8\u5206\uff1a ob_refcnt \uff1a\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\uff0c\u5e2e\u52a9 Python \u81ea\u52a8\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 ob_type \uff1a\u7528\u4e8e\u7f16\u7801\u53d8\u91cf\u7684\u7c7b\u578b\u3002 ob_size \uff1a\u6307\u5b9a\u4ee5\u4e0b\u6570\u503c\u6210\u5458\u7684\u5927\u5c0f\u3002 ob_digit \uff1a\u5305\u542b\u5b9e\u9645\u7684\u6574\u6570\u503c\u3002 \u8fd9\u610f\u5473\u7740\u4e0e C \u4e4b\u7c7b\u7684\u7f16\u8bd1\u578b\u8bed\u8a00\u76f8\u6bd4\uff0c\u5728 Python \u4e2d\u50a8\u5b58\u4e00\u4e2a\u6574\u6570\u9700\u8981\u66f4\u591a\u7684\u5f00\u9500\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u5176\u4e2d\uff0c PyObject_HEAD \u662f\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0c\u5305\u542b ob_refcnt \u3001 ob_type \u7b49\u3002 C \u7684\u6574\u6570\u53d8\u91cf\u672c\u8d28\u4e0a\u662f\u5b57\u8282\u7f16\u7801\u4e3a\u6574\u6570\u503c\u7684\u5185\u5b58\u5757\u4f4d\u7f6e\u7684\u6807\u7b7e\uff0c\u800c Python \u6574\u6570\u53d8\u91cf\u662f\u6307\u5411 Python \u5bf9\u8c61\u5185\u5b58\u4f4d\u7f6e\u7684\u6307\u9488\uff0c\u8be5 Python \u5bf9\u8c61\u5305\u542b\u4e86\u6574\u6570\u503c\u548c\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\u3002\u50a8\u5b58\u8fd9\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u9700\u8981\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u4ee3\u4ef7\uff0c\u4f46\u8fd9\u80fd\u591f\u8ba9 Python \u81ea\u7531\u3001\u52a8\u6001\u5730\u7f16\u7a0b\u3002 Python \u7684\u6807\u51c6\u53ef\u53d8\u5bb9\u5668\u662f list \u3002\u5217\u8868\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u540c\u8d28\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u6574\u6570\u5217\u8868\uff1a list ( range ( 0 , 6 )) [0, 1, 2, 3, 4, 5] Python \u7684 list \u975e\u5e38\u7075\u6d3b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u521b\u5efa\u5f02\u6784\u5217\u8868\uff1a lst = [ True , \"2\" , 3.0 , 4 ] [ type ( item ) for item in lst ] [bool, str, float, int] \u4e3a\u4e86\u8ba9\u5217\u8868\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5217\u8868\u4e0d\u80fd\u76f4\u63a5\u50a8\u5b58\u5bf9\u8c61\uff0c\u800c\u662f\u50a8\u5b58\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u5305\u542b\u81ea\u5df1\u7684\u7c7b\u578b\u4fe1\u606f\u3001\u5f15\u7528\u8ba1\u6570\u548c\u5176\u4ed6\u4fe1\u606f\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Python \u5bf9\u8c61\u3002","title":"2.3.\u6570\u636e\u7c7b\u578b"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html#constant","text":"Python \u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u91cf\u7c7b\u578b\uff0c\u5305\u62ec None \u3001 NotImplemented \u3001 ellipsis \uff0c\u8fd9\u4e9b\u7c7b\u578b\u53ea\u6709\u5355\u4e00\u503c\uff0c\u4e5f\u53ea\u6709\u4e00\u4e2a\u5bf9\u8c61\u6709\u8fd9\u4e2a\u503c\uff08\u5355\u4f8b\uff09\u3002 ellipsis \u6709\u4e24\u4e2a\u5b57\u9762\u503c\uff1a ... \u548c Ellipsis \u3002","title":"constant"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html#sequence","text":"\u5e8f\u5217 \u662f\u6309\u987a\u5e8f\u4fdd\u5b58\u5bf9\u8c61\u7684\u5bb9\u5668 (containers)\u3002\u53ef\u4ee5\u901a\u8fc7\u6574\u6570\u7d22\u5f15\u8bbf\u95ee\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u3002\u5c06\u5176\u79f0\u4e3a\u5bb9\u5668\u662f\u56e0\u4e3a\u5b83\u4eec\u662f\u4e00\u79cd\u5305\u542b\u4efb\u610f\u6570\u91cf\u5bf9\u8c61\u7684\u5bf9\u8c61\u3002\u4efb\u610f\u6570\u91cf\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u5305\u542b 0 \u4e2a\u5143\u7d20\u3002 \u67d0\u4e9b\u7f16\u7a0b\u8bed\u8a00\u53ef\u80fd\u4f7f\u7528\u8bf8\u5982\u201d\u5411\u91cf\u201c\u6216\u201c\u6570\u7ec4\u201d\u4e4b\u7c7b\u7684\u8bcd\u6765\u6307\u4ee3\u987a\u5e8f\u5bb9\u5668\u3002\u867d\u7136\u5e8f\u5217\u548c\u6570\u7ec4\u90fd\u662f\u987a\u5e8f\u5bb9\u5668\uff0c\u903b\u8f91\u4e0a\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u53ef\u80fd\u5e76\u4e0d\u662f\u8fde\u7eed\u7684\u3002\u4f8b\u5982\uff0c\u6570\u7ec4\u7684\u5143\u7d20\u5f80\u5f80\u90fd\u662f\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u8fde\u7eed\u533a\u57df\uff08\u7269\u7406\u610f\u4e49\u4e0a\uff09\uff1b\u800c\u5e8f\u5217\u5143\u7d20\u7684\u771f\u5b9e\u50a8\u5b58\u4f4d\u7f6e\u53ef\u80fd\u662f\u5206\u6563\u7684\u3002 \u5728 C \u6216 Java \u4e2d\uff0c\u5176\u6570\u7ec4\u5177\u6709\u9759\u6001\u5206\u914d\u7684\u5927\u5c0f\u3002\u5728 Java \u4e2d\uff0c\u6570\u7ec4\u7684\u7d22\u5f15\u51fa\u754c\u5c06\u5f15\u53d1\u5f02\u5e38\uff0c\u4f46\u5728 C \u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u7d22\u5f15\u51fa\u754c\u53ef\u80fd\u4e0d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002Python \u5219\u63d0\u4f9b\u4e86\u4e24\u79cd\u5e8f\u5217\uff0c\u53ef\u53d8\u7684\u5e8f\u5217 list \u548c \u4e0d\u53ef\u53d8\u7684\u5e8f\u5217 tuple \u3002\u53ef\u53d8\u610f\u5473\u7740\u5e8f\u5217\u7684\u5143\u7d20\u53ef\u4ee5\u88ab\u4fee\u6539\u3001\u5220\u9664\u3001\u6dfb\u52a0\u3002 str \u662f Python 3 \u7684\u5b57\u7b26\u4e32\uff0c\u672c\u8d28\u662f Unicode \u5b57\u7b26\u7684\u4e0d\u53ef\u53d8\u5e8f\u5217\u3002Python \u6ca1\u6709 char \u7c7b\u578b\uff0c\u5373\u5b57\u7b26\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b57\u7b26\u53ef\u4ee5\u7528\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 bytes \u662f Python 3 \u7684\u4e0d\u53ef\u53d8 bytes \uff08\u5b57\u8282\uff09\u5e8f\u5217\uff0c\u5373\u6587\u672c\u5b57\u7b26\u4e32\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002 \u5b9e\u9645\u4e0a\uff0c Python \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4efb\u610f\u5927\u5c0f\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u8fd9\u662f\u901a\u8fc7\u52a8\u6001\u521b\u5efa\u65b0\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u4fee\u6539\u73b0\u6709\u5b57\u7b26\u4e32\u6765\u5b9e\u73b0\u7684\u3002 \u5728\u5176\u4ed6\u8bed\u8a00\u4e0a\u6709\u4e30\u5bcc\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u95ee\uff0c\u901a\u8fc7\u4fee\u6539\u539f\u59cb\u5b57\u7b26\u4e32\u6765\u5f97\u5230\u65b0\u5b57\u7b26\u4e32\u662f\u5426\u662f\u5b9e\u73b0\u6b64\u76ee\u7684\u7684\u6700\u6709\u6548\u7387\u7684\u65b9\u6cd5\u3002\u6216\u8005\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u8ba9\u53ef\u53d8\u5b57\u7b26\u4e32\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u7b80\u77ed\u7684\u7b54\u6848\u662f\uff0cPython\u7684\u5b58\u50a8\u7ba1\u7406\u4f7f\u5bf9\u4e0d\u53ef\u53d8\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u53d8\u5f97\u6700\u7b80\u5355\u3001\u6700\u6709\u6548\u7387\u3002 \u6548\u7387\u4f53\u73b0\u5728\u591a\u4e2a\u65b9\u9762\uff0c\u6700\u5e38\u89c1\u7684\u662f\u65f6\u95f4\u548c\u5185\u5b58\u4f7f\u7528\u91cf\u3002\u53ef\u53d8\u5b57\u7b26\u4e32\u5360\u7528\u8f83\u5c11\u7684\u5185\u5b58\u3002\u4f46\u662f\uff0c\u8fd9\u4ec5\u5728\u826f\u6027\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u662f\u6b63\u786e\u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ec5\u5728\u56fa\u5b9a\u5927\u5c0f\u7684\u7f13\u51b2\u533a\u4e2d\u66ff\u6362\u6216\u7f29\u5c0f\u539f\u5b57\u7b26\u4e32\u3002\u5982\u679c\u5b57\u7b26\u4e32\u6269\u5c55\u540e\u8d85\u51fa\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u5219\u7a0b\u5e8f\u5fc5\u987b\u5d29\u6e83\u6216\u51fa\u73b0\u5f02\u5e38\uff0c\u6216\u8005\u5fc5\u987b\u5207\u6362\u5230\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002 Python \u4ece\u4e00\u5f00\u59cb\u5c31\u53ea\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002\u901a\u8fc7\u5c1d\u8bd5\u8bbf\u95ee\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u4e4b\u5916\u7684\u5185\u5b58\uff0cC \u7a0b\u5e8f\u901a\u5e38\u4f1a\u9047\u5230\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\u3002Python \u5219\u901a\u8fc7\u4f7f\u7528\u4e0d\u53ef\u53d8\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u52a8\u6001\u5206\u914d\u907f\u514d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u5904\u7406\u53ef\u53d8\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528\u66f4\u5c11\u7684\u65f6\u95f4\uff1b\u66f4\u6539\u5b57\u7b26\u4e32\u6216\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u5b57\u7b26\u65f6\uff0c\u56fa\u5b9a\u957f\u5ea6\u7684\u7f13\u51b2\u533a\u5c06\u9700\u8981\u8f83\u5c11\u7684\u5185\u5b58\u5f00\u9500\u3002\u57fa\u4e8e\u8fd9\u4e24\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u601d\u8003\u5982\u4f55\u6709\u6548\u5730\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u62b1\u6028 Python \u63d0\u4f9b\u4e0d\u53ef\u53d8\u7684\u5b57\u7b26\u4e32\u3002 \u5728\u6587\u672c\u5bc6\u96c6\u578b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u8981\u907f\u514d\u521b\u5efa\u5355\u72ec\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u7f13\u51b2\u533a\uff08input buffer\uff09\u3002\u6211\u4eec\u521b\u5efa slice \u5bf9\u8c61\uff08\u6765\u5f15\u7528\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\uff09\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c slice \u5bf9\u8c61\u63cf\u8ff0\u4e86\u552f\u4e00\u7684\u8f93\u5165\u7f13\u51b2\u533a\u4e2d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\u5982\u679c\u968f\u540e\u9700\u8981\u64cd\u7eb5\u8f93\u5165\u7f13\u51b2\u533a\u7684\u8fd9\u4e9b\u7247\u6bb5\uff0c\u53ea\u8981\u6309\u9700\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u65e8\u5728\u63d0\u9ad8\u6548\u7387\u3002\u5f53\u6211\u4eec\u60f3\u8981\u7075\u6d3b\u6027\u548c\u7b80\u5355\u6027\u65f6\uff0c\u5219\u4f7f\u7528 Python \u5b57\u7b26\u4e32\u5bf9\u8c61\u3002","title":"sequence"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html#dictionary","text":"Python \u63d0\u4f9b\u4e86\u521b\u5efa\u5404\u79cd\u4e0d\u540c\u6620\u5c04\u7c7b\u578b\u7684\u89c4\u5b9a\uff0c\u4f46\u5185\u7f6e\u53ea\u6709\u4e00\u79cd\u6620\u5c04\u7c7b\u578b\uff0c\u5373\u5b57\u5178\u3002 dict \u5c06\u952e (key) \u6620\u5c04\u5230\u503c\u3002key \u53ef\u4ee5\u662f\u5177\u6709\u4e00\u81f4\u54c8\u5e0c\u503c\u7684\u4efb\u4f55 Python \u5bf9\u8c61\uff0ckey \u5f15\u7528\u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684Python\u5bf9\u8c61\u3002 \u5b57\u5178\u4e0d\u4fdd\u7559\u5143\u7d20\u7684\u63d2\u5165\u987a\u5e8f\uff0c\u800c\u662f\u901a\u8fc7\u5feb\u901f\u8ba1\u7b97 key \u7684\u54c8\u5e0c\u503c\u6765\u83b7\u53d6\u6bcf\u4e2a\u5143\u7d20\u5728\u5b57\u5178\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5176\u5143\u7d20\u88ab\u63d2\u5165\u5230\u4e0e key \u7684\u54c8\u5e0c\u503c\u76f8\u5173\u7684\u4f4d\u7f6e\u3002\u56e0\u6b64 key \u5bf9\u8c61\u5fc5\u987b\u5177\u6709\u4e00\u4e2a\u4e0d\u53d8\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u610f\u5473\u7740 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u7f16\u7a0b\u9700\u6c42\u662f\u5c06\u547d\u540d\u7684\u5f02\u6784\u6570\u636e\u4fdd\u5b58\u5230\u5bb9\u5668\u3002\u6570\u636e\u5e93\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6570\u636e\u5e93\u7684\u4e0d\u540c\u8bb0\u5f55\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u3002C \u6216 C++ \u7684 struct \u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u79cd\u547d\u540d\u7684\u6570\u636e\u96c6\u5408\u53ef\u80fd\u6700\u597d\u7528\u4e00\u4e2a\u7c7b\u6216\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\u6765\u5904\u7406\uff0c\u4f46\u6620\u5c04\u7c7b\u578b\u4e5f\u9002\u7528\u4e8e\u5177\u6709\u547d\u540d\u5b57\u6bb5\u7684\u5f02\u6784\u6570\u636e\u3002 \u8bb8\u591a\u8bed\u8a00\u4f7f\u7528\u9759\u6001\u5b9a\u4e49\u7684\u5177\u6709\u547d\u540d\u5b57\u6bb5\u7684\u5bb9\u5668\u6765\u4fdd\u5b58\u8fd9\u4e9b\u6570\u636e\uff0c\u4f46 Python \u7684\u5b57\u5178\u662f\u52a8\u6001\u7684\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0\u5b57\u6bb5\u540d\u79f0\u3002 \u6709\u4e00\u4e9b\u672f\u8bed\u5c06\u5b57\u5178\u89c6\u4e3a\uff08key: value\uff09\u5bf9\u7684\u5bb9\u5668\u3002\u5b57\u5178\u4e5f\u53ef\u4ee5\u79f0\u4e3a associative array\uff08\u5173\u8054\u6570\u7ec4\uff09\u3002 \u4ee5\u5e8f\u5217\u4e3a\u4ee3\u8868\u7684\u666e\u901a\u6570\u7ec4\u4f7f\u7528\u6570\u5b57\u7d22\u5f15\uff0c\u4f46\u662f\u5b57\u5178\u7684\u7d22\u5f15\u662f key \u5bf9\u8c61\uff0c\u6bcf\u4e2a\u952e\u90fd\u5173\u8054\uff08\u6620\u5c04\uff09\u5230\u5bf9\u5e94\u7684\u503c\u3002 \u54c8\u5e0c\u7684\u4e00\u79cd\u5e38\u89c1\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528\u67d0\u79cd\u6709\u5e8f\u7ed3\u6784\u6765\u7ef4\u62a4 key\u3002\u8fd9\u53ef\u80fd\u662f\u6811\u6216\u5217\u8868\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5176\u4ed6\u7c7b\u578b\u7684\u6620\u5c04\u3002\u4f8b\u5982\uff0cPython collections \u6a21\u5757\u4e2d\u6709\u4e00\u79cd\u6709\u5e8f\u5b57\u5178\u3002","title":"dictionary"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html#set","text":"set\uff08\u96c6\u5408\uff09\u53ef\u80fd\u662f\u6700\u7b80\u5355\u7684\u5bb9\u5668\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4fdd\u5b58\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u5143\u7d20\u4e5f\u6ca1\u6709\u7279\u5b9a\u7684\u6807\u8bc6\u3002\u5143\u7d20\u672c\u8eab\u4f5c\u4e3a\u81ea\u5df1\u7684\u6807\u8bc6\uff0c\u56e0\u6b64\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e0d\u80fd\u91cd\u590d\u3002","title":"set"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html#python-data-type-and-c-structure","text":"\u6807\u51c6\u7684 Python \u5b9e\u73b0\u662f\u7528 C \u7f16\u5199\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a Python \u5bf9\u8c61\u53ea\u662f\u4e00\u4e2a\u5de7\u5999\u4f2a\u88c5\u7684 C \u7ed3\u6784\u3002Python \u5bf9\u8c61\u4e0d\u4ec5\u5305\u542b\u5b83\u7684\u503c\uff0c\u8fd8\u5305\u542b\u5176\u4ed6\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u5728 Python \u4e2d\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u65f6\uff0c\u6bd4\u5982 x=100 \uff0c x \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u6574\u6570\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u5411\u590d\u5408 C \u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u51e0\u4e2a\u503c\u3002 \u901a\u8fc7\u67e5\u770b Python 3.4 \u7684\u6e90\u4ee3\u7801\uff0c\u6574\u6570\u7c7b\u578b\u7684\u5b9a\u4e49\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\uff1a struct _longobject { long ob_refcnt ; PyTypeObject * ob_type ; size_t ob_size ; long ob_digit [ 1 ]; }; Python 3.4 \u4e2d\u7684\u4e00\u4e2a\u6574\u6570\u5b9e\u9645\u4e0a\u5305\u542b\u56db\u4e2a\u90e8\u5206\uff1a ob_refcnt \uff1a\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\uff0c\u5e2e\u52a9 Python \u81ea\u52a8\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 ob_type \uff1a\u7528\u4e8e\u7f16\u7801\u53d8\u91cf\u7684\u7c7b\u578b\u3002 ob_size \uff1a\u6307\u5b9a\u4ee5\u4e0b\u6570\u503c\u6210\u5458\u7684\u5927\u5c0f\u3002 ob_digit \uff1a\u5305\u542b\u5b9e\u9645\u7684\u6574\u6570\u503c\u3002 \u8fd9\u610f\u5473\u7740\u4e0e C \u4e4b\u7c7b\u7684\u7f16\u8bd1\u578b\u8bed\u8a00\u76f8\u6bd4\uff0c\u5728 Python \u4e2d\u50a8\u5b58\u4e00\u4e2a\u6574\u6570\u9700\u8981\u66f4\u591a\u7684\u5f00\u9500\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u5176\u4e2d\uff0c PyObject_HEAD \u662f\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff0c\u5305\u542b ob_refcnt \u3001 ob_type \u7b49\u3002 C \u7684\u6574\u6570\u53d8\u91cf\u672c\u8d28\u4e0a\u662f\u5b57\u8282\u7f16\u7801\u4e3a\u6574\u6570\u503c\u7684\u5185\u5b58\u5757\u4f4d\u7f6e\u7684\u6807\u7b7e\uff0c\u800c Python \u6574\u6570\u53d8\u91cf\u662f\u6307\u5411 Python \u5bf9\u8c61\u5185\u5b58\u4f4d\u7f6e\u7684\u6307\u9488\uff0c\u8be5 Python \u5bf9\u8c61\u5305\u542b\u4e86\u6574\u6570\u503c\u548c\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\u3002\u50a8\u5b58\u8fd9\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u9700\u8981\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u4ee3\u4ef7\uff0c\u4f46\u8fd9\u80fd\u591f\u8ba9 Python \u81ea\u7531\u3001\u52a8\u6001\u5730\u7f16\u7a0b\u3002 Python \u7684\u6807\u51c6\u53ef\u53d8\u5bb9\u5668\u662f list \u3002\u5217\u8868\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u540c\u8d28\u7684\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u6574\u6570\u5217\u8868\uff1a list ( range ( 0 , 6 )) [0, 1, 2, 3, 4, 5] Python \u7684 list \u975e\u5e38\u7075\u6d3b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u521b\u5efa\u5f02\u6784\u5217\u8868\uff1a lst = [ True , \"2\" , 3.0 , 4 ] [ type ( item ) for item in lst ] [bool, str, float, int] \u4e3a\u4e86\u8ba9\u5217\u8868\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5217\u8868\u4e0d\u80fd\u76f4\u63a5\u50a8\u5b58\u5bf9\u8c61\uff0c\u800c\u662f\u50a8\u5b58\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u5305\u542b\u81ea\u5df1\u7684\u7c7b\u578b\u4fe1\u606f\u3001\u5f15\u7528\u8ba1\u6570\u548c\u5176\u4ed6\u4fe1\u606f\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Python \u5bf9\u8c61\u3002","title":"Python data type and C structure"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.21 Python \u53ea\u6709\u4e09\u79cd\u6570\u503c\u7c7b\u578b\uff1a\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3002 \u6574\u6570 numbers.Integral \u63cf\u8ff0\u4e86\u6570\u5b66\u4e0a\u7684\u6574\u6570\u96c6\uff08\u6b63\u6570\u548c\u8d1f\u6570\uff09\u3002 Python \u6709 2 \u79cd\u6574\u6570\u7c7b\u578b\uff1a \u6570\u503c\u578b\u6574\u6570 numbers.Integral \uff0c int \u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5\u62bd\u8c61\u63a5\u53e3\u3002\u6570\u503c\u578b\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u5728\u8bed\u8a00\u4e0a\u662f\u65e0\u9650\u5236\u7684\uff0c\u53ea\u53d7\u9650\u4e8e\u8ba1\u7b97\u673a\u7684\u5185\u5b58\uff08\u865a\u62df\u5185\u5b58\uff09\u3002\u5bf9\u4e8e\u4ee5\u79fb\u4f4d\u548c\u5c4f\u853d\u8fd0\u7b97\uff0c\u6570\u503c\u578b\u6b63\u6570\u88ab\u8ba4\u4e3a\u662f\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u90a3\u4e48\u5c31\u88ab\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u8865\u7801\u5f62\u5f0f\uff0c\u7b26\u53f7\u4f4d\u5411\u5de6\u6269\u5c55\u3002 \u5e03\u5c14\u578b\u6574\u6570 bool \u3002\u5e03\u5c14\u7c7b\u578b\u662f int \u7684\u5b50\u7c7b\u578b\uff0c\u5206\u522b\u7528\u6570\u503c 0 \u548c 1 \u6765\u8868\u793a\u5047\u548c\u771f\uff0c\u4f46\u662f\u5f53\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f\u5b57\u7b26\u65f6\uff0c\u5176\u5206\u522b\u7528 \"False\" \u6216\u8005 \u201cTrue\u201d \u8868\u793a\u3002 \u8fd4\u56de\u8be5\u6574\u6570\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u6240\u9700\u8981\u7684\u4f4d\u6570 int_num = 10 int_num . bit_length <function int.bit_length()> \u6d6e\u70b9\u6570 \u6d6e\u70b9\u6570 numbers.Real \u8868\u793a\u673a\u5668\u7ea7\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c float \u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5\u62bd\u8c61\u63a5\u53e3\u3002\u5176\u8868\u793a\u8303\u56f4\u548c\u6ea2\u51fa\u5904\u7406\u53d7\u9650\u4e8e \u673a\u5668\u4f53\u7cfb\u7ed3\u6784 \u548c \u7f16\u8bd1\u5668/\u89e3\u91ca\u5668 \u7684\u5177\u4f53\u5b9e\u73b0\u3002 Python \u4e0d\u652f\u6301\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u4f7f\u7528\u5b83\u7684\u539f\u56e0\u901a\u5e38\u662f\u51cf\u5c11CPU\u8d1f\u8377\u548c\u8282\u7701\u5185\u5b58\uff0c\u4f46\u8fd9\u4e9b\u8282\u7701\u7684\u5f00\u9500\u4e0e\u5728 Python \u4e2d\u4f7f\u7528\u5bf9\u8c61\u7684\u5f00\u9500\u76f8\u6bd4\u8981\u5c0f\u5f97\u591a\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u652f\u6301\u4e24\u79cd\u6d6e\u70b9\u6570\u4f7f\u8bed\u8a00\u53d8\u5f97\u590d\u6742\u3002 \u5173\u4e8e\u8fd0\u884c\u7a0b\u5e8f\u7684\u673a\u5668\u7684\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\u548c\u5185\u90e8\u8868\u793a\u7684\u4fe1\u606f\u53ef\u4ee5\u5728 sys.float_info \u4e2d\u627e\u5230\u3002 float_num = 10.5 \u83b7\u53d6\u6d6e\u70b9\u6570\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u3002 float_num . hex () '0x1.5000000000000p+3' \u8be5\u6d6e\u70b9\u6570\u662f\u5426\u4e3a\u6574\u6570\u3002 float_num . is_integer () float_num . as_integer_ratio () (21, 2) \u4ece\u5341\u516d\u8fdb\u5236\u5c0f\u6570\u7684\u5b57\u7b26\u4e32\u521b\u5efa\u6d6e\u70b9\u6570\u3002 float . fromhex ( '0x1.ffffp10' ) 2047.984375 \u8fd4\u56de\u4e00\u5bf9\u6574\u6570\uff0c\u5176\u6bd4\u7387\u7b49\u4e8e\u8be5\u6d6e\u70b9\u6570\uff0c\u5206\u5b50\u6c38\u8fdc\u4e3a\u6b63\u6574\u6570\uff0c\u5982\u679c\u539f\u6d6e\u70b9\u6570\u4e3a NaN\uff0c\u5c06\u5f15\u53d1 OverflowError \u3002 float_num = - 10.5 float_num . as_integer_ratio () (-21, 2) \u590d\u6570 \u590d\u6570 numbers.Complex \u63cf\u8ff0\u4e86\u4e00\u5bf9\u673a\u5668\u7ea7\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c complex \u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5\u62bd\u8c61\u63a5\u53e3\u3002\u590d\u6570 z \u7684\u5b9e\u90e8\u548c\u865a\u90e8\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027 z.real \u548c z.imag \u83b7\u5f97\u3002 Python \u5b8c\u5168\u652f\u6301\u6570\u503c\u7c7b\u578b\u7684\u6df7\u5408\u8ba1\u7b97\u3002\u5f53\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u64cd\u4f5c\u6570\u88ab\u7528\u4e8e\u8ba1\u7b97\u65f6\uff0c\u8868\u793a\u8303\u56f4\u5c0f\u7684\u64cd\u4f5c\u6570\u5c06\u88ab\u6269\u5927\u5230\u53e6\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u3002\u5176\u4e2d\uff0c\u6574\u6570\u6bd4\u6d6e\u70b9\u6570\u8303\u56f4\u7a84\uff0c\u6d6e\u70b9\u6570\u6bd4\u590d\u6570\u7a84\u3002 complex_num = 10 + 5 j \u83b7\u53d6\u5171\u8f6d\u590d\u6570 complex_num . conjugate () (10-5j) \u83b7\u53d6 \u5b9e\u90e8 \u548c \u865a\u90e8 # tag = \"input\" print ( complex_num . real ) print ( complex_num . imag ) 10.0 5.0 \u8fdb\u5236\u6570\u8868\u793a \u5728 Python \u4e2d\uff0c\u6574\u6570\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5341\u8fdb\u5236\u5f62\u5f0f\u3002\u6d6e\u70b9\u6570\u7684\u6574\u6570\u90e8\u5206\u53ca\u5c0f\u6570\u90e8\u5206\u90fd\u53ea\u80fd\u4f7f\u7528\u5341\u8fdb\u5236\u8868\u793a\u3002 0b \u6216 0B \u5f00\u5934\u8868\u793a\u4e8c\u8fdb\u5236\u6570\uff1a 0b10 2 \u53ef\u4ee5\u4f7f\u7528 bin \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a10\u8fdb\u5236\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002 bin \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u6570\u5b57\u3002 bin ( 2 ) '0b10' 0o \u6216 0O \u5f00\u5934\u8868\u793a\u516b\u8fdb\u5236\u6570\uff1a 0o10 8 \u53ef\u4ee5\u4f7f\u7528 oct \u51fd\u6570\u83b7\u53d610\u8fdb\u5236\u6574\u6570\u76848\u8fdb\u5236\u6574\u6570\u5f62\u5f0f\uff1a oct ( 8 ) '0o10' 0x \u6216 0X \u5f00\u5934\u8868\u793a\u5341\u516d\u8fdb\u5236\u6570\uff1a 0x10 16 \u79d1\u5b66\u8bb0\u6570\u6cd5 e \u6216 E \u8868\u793a exponent\uff08\u6307\u6570\uff09\u3002 0e0 == 0.0 1.23e2 == 123 1.23e-2 == 0.0123 True \u6570\u4f4d\u5206\u9694\u7b26 \u6570\u503c\u7684\u5b57\u9762\u503c\u5305\u542b _ \u7b26\u53f7\u662f\u5408\u6cd5\u7684\uff0c _ \u53ef\u4ee5\u7528\u6765\u5206\u9694\u6570\u4f4d\uff0c\u4f46 _ \u4e0d\u80fd\u653e\u5728\u6570\u5b57\u7684\u5f00\u5934\u3002 1000_000 123.456_789 0b101_010 0x_101_010 1052688 \u8fdb\u5236\u8f6c\u6362 int \u9664\u4e86\u7528\u6765\u521b\u5efa\u6574\u6570\uff0c\u8fd8\u53ef\u4ee5\u5c06\u975e\u5341\u8fdb\u5236\u7684\u6570\u503c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570\u503c\u3002 16 \u8fdb\u5236\u8f6c\u6362\u4e3a 10 \u8fdb\u5236 int ( \"0x10\" , base = 16 ) 16 10 \u8fdb\u5236\u8f6c\u6362\u4e3a 16 \u8fdb\u5236\u5b57\u7b26\u4e32 hex ( 16 ) '0x10'","title":"2.4.Number"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_1","text":"numbers.Integral \u63cf\u8ff0\u4e86\u6570\u5b66\u4e0a\u7684\u6574\u6570\u96c6\uff08\u6b63\u6570\u548c\u8d1f\u6570\uff09\u3002 Python \u6709 2 \u79cd\u6574\u6570\u7c7b\u578b\uff1a \u6570\u503c\u578b\u6574\u6570 numbers.Integral \uff0c int \u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5\u62bd\u8c61\u63a5\u53e3\u3002\u6570\u503c\u578b\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u5728\u8bed\u8a00\u4e0a\u662f\u65e0\u9650\u5236\u7684\uff0c\u53ea\u53d7\u9650\u4e8e\u8ba1\u7b97\u673a\u7684\u5185\u5b58\uff08\u865a\u62df\u5185\u5b58\uff09\u3002\u5bf9\u4e8e\u4ee5\u79fb\u4f4d\u548c\u5c4f\u853d\u8fd0\u7b97\uff0c\u6570\u503c\u578b\u6b63\u6570\u88ab\u8ba4\u4e3a\u662f\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u90a3\u4e48\u5c31\u88ab\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u8865\u7801\u5f62\u5f0f\uff0c\u7b26\u53f7\u4f4d\u5411\u5de6\u6269\u5c55\u3002 \u5e03\u5c14\u578b\u6574\u6570 bool \u3002\u5e03\u5c14\u7c7b\u578b\u662f int \u7684\u5b50\u7c7b\u578b\uff0c\u5206\u522b\u7528\u6570\u503c 0 \u548c 1 \u6765\u8868\u793a\u5047\u548c\u771f\uff0c\u4f46\u662f\u5f53\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f\u5b57\u7b26\u65f6\uff0c\u5176\u5206\u522b\u7528 \"False\" \u6216\u8005 \u201cTrue\u201d \u8868\u793a\u3002 \u8fd4\u56de\u8be5\u6574\u6570\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u6240\u9700\u8981\u7684\u4f4d\u6570 int_num = 10 int_num . bit_length <function int.bit_length()>","title":"\u6574\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_2","text":"\u6d6e\u70b9\u6570 numbers.Real \u8868\u793a\u673a\u5668\u7ea7\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c float \u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5\u62bd\u8c61\u63a5\u53e3\u3002\u5176\u8868\u793a\u8303\u56f4\u548c\u6ea2\u51fa\u5904\u7406\u53d7\u9650\u4e8e \u673a\u5668\u4f53\u7cfb\u7ed3\u6784 \u548c \u7f16\u8bd1\u5668/\u89e3\u91ca\u5668 \u7684\u5177\u4f53\u5b9e\u73b0\u3002 Python \u4e0d\u652f\u6301\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u4f7f\u7528\u5b83\u7684\u539f\u56e0\u901a\u5e38\u662f\u51cf\u5c11CPU\u8d1f\u8377\u548c\u8282\u7701\u5185\u5b58\uff0c\u4f46\u8fd9\u4e9b\u8282\u7701\u7684\u5f00\u9500\u4e0e\u5728 Python \u4e2d\u4f7f\u7528\u5bf9\u8c61\u7684\u5f00\u9500\u76f8\u6bd4\u8981\u5c0f\u5f97\u591a\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u652f\u6301\u4e24\u79cd\u6d6e\u70b9\u6570\u4f7f\u8bed\u8a00\u53d8\u5f97\u590d\u6742\u3002 \u5173\u4e8e\u8fd0\u884c\u7a0b\u5e8f\u7684\u673a\u5668\u7684\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\u548c\u5185\u90e8\u8868\u793a\u7684\u4fe1\u606f\u53ef\u4ee5\u5728 sys.float_info \u4e2d\u627e\u5230\u3002 float_num = 10.5 \u83b7\u53d6\u6d6e\u70b9\u6570\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u3002 float_num . hex () '0x1.5000000000000p+3' \u8be5\u6d6e\u70b9\u6570\u662f\u5426\u4e3a\u6574\u6570\u3002 float_num . is_integer () float_num . as_integer_ratio () (21, 2) \u4ece\u5341\u516d\u8fdb\u5236\u5c0f\u6570\u7684\u5b57\u7b26\u4e32\u521b\u5efa\u6d6e\u70b9\u6570\u3002 float . fromhex ( '0x1.ffffp10' ) 2047.984375 \u8fd4\u56de\u4e00\u5bf9\u6574\u6570\uff0c\u5176\u6bd4\u7387\u7b49\u4e8e\u8be5\u6d6e\u70b9\u6570\uff0c\u5206\u5b50\u6c38\u8fdc\u4e3a\u6b63\u6574\u6570\uff0c\u5982\u679c\u539f\u6d6e\u70b9\u6570\u4e3a NaN\uff0c\u5c06\u5f15\u53d1 OverflowError \u3002 float_num = - 10.5 float_num . as_integer_ratio () (-21, 2)","title":"\u6d6e\u70b9\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_3","text":"\u590d\u6570 numbers.Complex \u63cf\u8ff0\u4e86\u4e00\u5bf9\u673a\u5668\u7ea7\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c complex \u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5\u62bd\u8c61\u63a5\u53e3\u3002\u590d\u6570 z \u7684\u5b9e\u90e8\u548c\u865a\u90e8\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027 z.real \u548c z.imag \u83b7\u5f97\u3002 Python \u5b8c\u5168\u652f\u6301\u6570\u503c\u7c7b\u578b\u7684\u6df7\u5408\u8ba1\u7b97\u3002\u5f53\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u64cd\u4f5c\u6570\u88ab\u7528\u4e8e\u8ba1\u7b97\u65f6\uff0c\u8868\u793a\u8303\u56f4\u5c0f\u7684\u64cd\u4f5c\u6570\u5c06\u88ab\u6269\u5927\u5230\u53e6\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u3002\u5176\u4e2d\uff0c\u6574\u6570\u6bd4\u6d6e\u70b9\u6570\u8303\u56f4\u7a84\uff0c\u6d6e\u70b9\u6570\u6bd4\u590d\u6570\u7a84\u3002 complex_num = 10 + 5 j \u83b7\u53d6\u5171\u8f6d\u590d\u6570 complex_num . conjugate () (10-5j) \u83b7\u53d6 \u5b9e\u90e8 \u548c \u865a\u90e8 # tag = \"input\" print ( complex_num . real ) print ( complex_num . imag ) 10.0 5.0","title":"\u590d\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_4","text":"\u5728 Python \u4e2d\uff0c\u6574\u6570\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u3001\u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5341\u8fdb\u5236\u5f62\u5f0f\u3002\u6d6e\u70b9\u6570\u7684\u6574\u6570\u90e8\u5206\u53ca\u5c0f\u6570\u90e8\u5206\u90fd\u53ea\u80fd\u4f7f\u7528\u5341\u8fdb\u5236\u8868\u793a\u3002 0b \u6216 0B \u5f00\u5934\u8868\u793a\u4e8c\u8fdb\u5236\u6570\uff1a 0b10 2 \u53ef\u4ee5\u4f7f\u7528 bin \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a10\u8fdb\u5236\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002 bin \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6570\u503c\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u6570\u5b57\u3002 bin ( 2 ) '0b10' 0o \u6216 0O \u5f00\u5934\u8868\u793a\u516b\u8fdb\u5236\u6570\uff1a 0o10 8 \u53ef\u4ee5\u4f7f\u7528 oct \u51fd\u6570\u83b7\u53d610\u8fdb\u5236\u6574\u6570\u76848\u8fdb\u5236\u6574\u6570\u5f62\u5f0f\uff1a oct ( 8 ) '0o10' 0x \u6216 0X \u5f00\u5934\u8868\u793a\u5341\u516d\u8fdb\u5236\u6570\uff1a 0x10 16","title":"\u8fdb\u5236\u6570\u8868\u793a"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_5","text":"e \u6216 E \u8868\u793a exponent\uff08\u6307\u6570\uff09\u3002 0e0 == 0.0 1.23e2 == 123 1.23e-2 == 0.0123 True","title":"\u79d1\u5b66\u8bb0\u6570\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_6","text":"\u6570\u503c\u7684\u5b57\u9762\u503c\u5305\u542b _ \u7b26\u53f7\u662f\u5408\u6cd5\u7684\uff0c _ \u53ef\u4ee5\u7528\u6765\u5206\u9694\u6570\u4f4d\uff0c\u4f46 _ \u4e0d\u80fd\u653e\u5728\u6570\u5b57\u7684\u5f00\u5934\u3002 1000_000 123.456_789 0b101_010 0x_101_010 1052688","title":"\u6570\u4f4d\u5206\u9694\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.Number.html#_7","text":"int \u9664\u4e86\u7528\u6765\u521b\u5efa\u6574\u6570\uff0c\u8fd8\u53ef\u4ee5\u5c06\u975e\u5341\u8fdb\u5236\u7684\u6570\u503c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570\u503c\u3002 16 \u8fdb\u5236\u8f6c\u6362\u4e3a 10 \u8fdb\u5236 int ( \"0x10\" , base = 16 ) 16 10 \u8fdb\u5236\u8f6c\u6362\u4e3a 16 \u8fdb\u5236\u5b57\u7b26\u4e32 hex ( 16 ) '0x10'","title":"\u8fdb\u5236\u8f6c\u6362"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.20 \u591a\u884c\u5b57\u7b26\u4e32 input str_1 = \"\"\" This is a multi-line string This is the second line \"\"\" print ( str_1 ) str_2 = \" \\n This is a multi-line string \\n This is the second line \\n \" print ( str_2 ) print ( str_1 == str_2 ) output This is a multi-line string This is the second line This is a multi-line string This is the second line True \u8f6c\u4e49 \u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u91cc\u9762\u8f93\u5165\u7279\u6b8a\u5b57\u7b26\uff0c\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26 \\ \uff0c\u4f8b\u5982\u8f93\u5165\u8f6c\u4e49\u7b26\u672c\u8eab\uff1a str_3 = \"12 \\\\ 14\" print ( str_3 ) 12\\14 \u524d\u7f00 \u5728 Python \u4e2d\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u524d\u7f00\uff1a r / R \uff1a\u8868\u793a\u975e\u8f6c\u4e49\u7684\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u5e38\u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u8def\u5f84\u5b57\u7b26\u4e32\u3002 b / B \uff1a\u8868\u793aPython3\u7684bytes\uff0cPython2\u7684\u5b57\u7b26\u4e32\u9ed8\u8ba4\u5c31\u662fbytes\u3002Python2\u7684b\u524d\u7f00\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9Python3\u7684\u8fd9\u79cd\u5199\u6cd5\u3002 u / U \uff1a\u8868\u793aPython2\u7684unicode\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cunicode\u7f16\u7801\u3002Python3\u91cc\u9ed8\u8ba4\u7684str\u5c31\u662f(Python2\u7684)unicode\u3002Python3\u7684u\u524d\u7f00\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9Python2\u7684\u8fd9\u79cd\u5199\u6cd5\u3002\u5efa\u8bae\u7edf\u4e00\u91c7\u7528UTF-8\u7f16\u7801\u3002 f / F \uff1a\u8868\u793a f \u683c\u5f0f\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u7f16\u7801 Python 3\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff1a str\uff1a\u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f7f\u7528Unicode\u7801\u50a8\u5b58\u5b57\u7b26\u4e32\u7684\u6587\u672c\u3002\u76f8\u5f53\u4e8ePython 2\u7684 unicode \u7c7b\u578b\u3002str\u53ef\u4ee5\u901a\u8fc7\u7f16\u7801\uff0c\u8f6c\u6362\u4e3abytes\u3002 bytes\uff1a\u5b57\u8282\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u76f4\u63a5\u50a8\u5b58\u5b57\u7b26\u4e32\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u5b57\u9762\u503c\u752816\u8fdb\u5236\u6216\u8005ASCII\u7801\u663e\u793a\u3002\u76f8\u5f53\u4e8ePython 2\u7684 str \u7c7b\u578b\u3002bytes\u53ef\u4ee5\u901a\u8fc7\u89e3\u7801\uff0c\u8f6c\u6362\u4e3astr\u3002 $$ \\begin{array}{} \\text{Python 3} \\mathbf{str} &\\Longleftrightarrow \\text{Python 2} \\mathbf{unicode} \\\\ \\text{Python 3} \\mathbf{bytes} &\\Longleftrightarrow \\text{Python 2} \\mathbf{str} \\end{array} $$ \u5728python3\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32 str_1 = \"\u4e2d\u56fd\" # \u7f16\u7801 str_1 . encode () b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd' # \u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 str_2 = b ' \\xe4\\xb8\\xad\\xe5\\x9b\\xbd ' # \u89e3\u7801 str_2 . decode () '\u4e2d\u56fd' \u5982\u679c\u5bf9\u5b57\u7b26\u7f16\u7801\u4e0d\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 1.4\u5b57\u7b26\u7f16\u7801 \u3002 bytes\u5b57\u7b26 \u6587\u672c\u5b57\u7b26\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u8868\u793a\uff0c\u9ed8\u8ba4\u4e3aUnicode\u7801\uff0c\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u82e5\u5e72\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8981\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\uff0c\u6216\u8005\u4fdd\u5b58\u5230\u78c1\u76d8\u4e0a\uff0c\u5c31\u9700\u8981\u628a str \u53d8\u4e3a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684 bytes \u3002 Python3\u5bf9 bytes \u7c7b\u578b\u7684\u6570\u636e\u7528\u5e26 b \u524d\u7f00\u7684\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u8868\u793a\u3002 bytes_8 = b \"ABC\" bytes_8 b'ABC' \u8981\u6ce8\u610f\u7684\u662f\uff1abytes\u5b57\u9762\u503c\u4e2d\u53ea\u5141\u8bb8ASCII\u5b57\u7b26\uff08\u65e0\u8bba\u6e90\u4ee3\u7801\u58f0\u660e\u7684\u7f16\u7801\u4e3a\u4f55\uff09\u3002\u4efb\u4f55\u8d85\u51fa127\u7684\u4e8c\u8fdb\u5236\u503c\u4ee516\u8fdb\u5236\u7684\u5f62\u5f0f\u663e\u793a\u3002 \u53ef\u4ee5\u5bf9str\uff08unicode\u7c7b\u578b\uff09\u5bf9\u8c61\u4f7f\u7528 encode() \u65b9\u6cd5\uff0c\u7f16\u7801\u4e3abytes\u7684\u5f62\u5f0f\u3002 '\u4e2d\u6587' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' \u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528 encode \u65b9\u6cd5\u65f6\uff0c\u4e0d\u80fd\u8d85\u51fa\u6307\u5b9a\u7f16\u7801\u7684\u8303\u56f4\uff0c\u4f8b\u5982\u4e0d\u80fd\u5bf9\u4e2d\u6587\u5b57\u7b26\u4f7f\u7528 .encode(\"ascii\") \uff0c\u56e0\u4e3a\u4e2d\u6587\u4e0d\u5728ascii\u7801\u7684\u8303\u56f4\u5185\u3002 try : '\u4e2d\u6587' . encode ( 'ascii' ) except UnicodeEncodeError as e : print ( e ) 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) \u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6211\u4eec\u4ece\u7f51\u7edc\u6216\u78c1\u76d8\u4e0a\u8bfb\u53d6\u4e86\u5b57\u8282\u6d41\uff0c\u90a3\u4e48\u8bfb\u5230\u7684\u6570\u636e\u5c31\u662fbytes\u3002\u8981\u628abytes\u53d8\u4e3astr\uff0c\u5c31\u9700\u8981\u7528 decode() \u65b9\u6cd5\uff1a b 'ABC' . decode ( 'ascii' ) 'ABC' b ' \\xe4\\xb8\\xad\\xe6\\x96\\x87 ' . decode ( 'utf-8' ) '\u4e2d\u6587' \u5982\u679cbytes\u4e2d\u5305\u542b\u65e0\u6cd5\u89e3\u7801\u7684\u5b57\u8282\uff0c decode() \u65b9\u6cd5\u4f1a\u62a5\u9519\uff1a try : b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' ) except UnicodeDecodeError as e : print ( e ) 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte \u4f46\u662f\uff0c\u5982\u679cbytes\u4e2d\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u65e0\u6548\u7684\u5b57\u8282\uff0c\u53ef\u4ee5\u4f20\u5165 errors = 'ignore' \u5ffd\u7565\u9519\u8bef\u7684\u5b57\u8282\uff1a \"\u4e2d\" . encode ( \"utf-8\" ) # \u4e2d \u539f\u6765\u7684\u7f16\u7801 b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' , errors = 'ignore' ) '\u4e2d' \u5728\u5bf9str\u548cbytes\u4e92\u76f8\u8f6c\u6362\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c\u5e94\u8be5\u4f7f\u7528UTF-8\u7f16\u7801\u5bf9str\u548cbytes\u8fdb\u884c\u8f6c\u6362\u3002 \u7531\u4e8ePython\u6e90\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u6240\u4ee5\uff0c\u5f53\u4f60\u7684\u6e90\u4ee3\u7801\u4e2d\u5305\u542b\u4e2d\u6587\u7684\u65f6\u5019\uff0c\u5728\u4fdd\u5b58\u6e90\u4ee3\u7801\u65f6\uff0c\u5c31\u9700\u8981\u52a1\u5fc5\u6307\u5b9a\u4fdd\u5b58\u4e3aUTF-8 \u7f16\u7801\u3002\u5f53Python\u89e3\u91ca\u5668\u8bfb\u53d6\u6e90\u4ee3\u7801\u65f6\uff0c\u4e3a\u4e86\u8ba9\u5b83\u6309UTF-8\u7f16\u7801\u8bfb\u53d6\uff0c\u6211\u4eec\u901a\u5e38\u5728\u6587\u4ef6\u5f00\u5934\u5199\u4e0a\u8fd9\u4e24\u884c\uff1a # !/usr/bin/env python3 # -*- coding: utf-8 -*- \u7b2c\u4e00\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Linux/OS X\u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2aPython\u53ef\u6267\u884c\u7a0b\u5e8f\uff0cWindows\u7cfb\u7edf\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u6ce8\u91ca\u3002\u7b2c\u4e8c\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Python\u89e3\u91ca\u5668\uff0c\u6309\u7167UTF-8\u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5426\u5219\uff0c\u5728\u6e90\u4ee3\u7801\u4e2d\u5199\u7684\u4e2d\u6587\u8f93\u51fa\u53ef\u80fd\u4f1a\u6709\u4e71\u7801\u3002 UTF-8\u7f16\u7801\u6ce8\u91ca\u53ea\u662f\u8ba9Python\u89e3\u91ca\u5668\u6309UTF-8\u7684\u7f16\u7801\u89c4\u5219\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u6e90\u4ee3\u7801\u4e00\u5b9a\u662f\u4f7f\u7528UT8-8\u7f16\u7801\u4fdd\u5b58\u7684\uff0c\u5fc5\u987b\u5e76\u4e14\u8981\u786e\u4fdd\u6587\u672c\u7f16\u8f91\u5668\u6b63\u5728\u4f7f\u7528UTF-8\u7f16\u7801\u3002 \u683c\u5f0f\u5316 C printf \u6837\u5f0f\u7684\u683c\u5f0f\u5316 \u5b57\u7b26\u4e32\u5177\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u5185\u7f6e\u64cd\u4f5c\uff1a\u4f7f\u7528 % (\u53d6\u6a21)\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6 % \u4e5f\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u8fd0\u7b97\u7b26\u6216\u63d2\u503c\u8fd0\u7b97\u7b26\u3002\u5bf9\u4e8eformat % values(\u5176\u4e2dformat\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32)\uff0c\u5728format\u4e2d\u7684 % \u8f6c\u6362\u6807\u8bb0\u7b26\u5c06\u88ab\u66ff\u6362\u4e3a\u96f6\u4e2a\u6216\u591a\u4e2avalues\u6761\u76ee\u3002 \u5176\u6548\u679c\u7c7b\u4f3c\u4e8e\u5728C\u8bed\u8a00\u4e2d\u4f7f\u7528 sprintf() \u3002 input print ( 'Hello, %s ' % 'world' ) # \u7701\u7565\u62ec\u53f7 print ( 'Hi, %s , you have $ %d ' % ( 'Michael' , 10000.58 )) output Hello, world Hi, Michael, you have $10000 \u8f6c\u6362\u6807\u8bb0\u7b26 \u5305\u542b\u4e24\u4e2a\u6216\u66f4\u591a\u5b57\u7b26\uff0c\u7531\u4ee5\u4e0b\u5143\u7d20\u7ec4\u6210\uff0c\u4e14\u5fc5\u987b\u9075\u5faa\u6b64\u5904\u89c4\u5b9a\u7684\u987a\u5e8f\uff1a % \u5b57\u7b26\uff0c\u7528\u4e8e\u6807\u8bb0\u8f6c\u6362\u7b26\u7684\u8d77\u59cb\u3002 \u6620\u5c04\u952e\uff08\u53ef\u9009\uff09\uff0c\u7531\u52a0\u5706\u62ec\u53f7\u7684\u5b57\u7b26\u5e8f\u5217\u7ec4\u6210(\u4f8b\u5982(somename))\u3002 \u8f6c\u6362\u6807\u5fd7\uff08\u53ef\u9009\uff09 - \u8868\u793a\u5de6\u5bf9\u9f50 + \u8868\u793a\u8f6c\u6362\u540e\u7684\u5185\u5bb9\u524d\u65b9\u52a0\u4e0a\u6b63\u8d1f\u53f7 \u7a7a\u683c \u8868\u793a\u6b63\u6570\u524d\u65b9\u4fdd\u7559\u4e00\u4e2a\u7a7a\u683c 0 \u8868\u793a\u5982\u679c\u8f6c\u6362\u4f4d\u7f6e\u4f4d\u6570\u4e0d\u591f\u65f6\uff0c\u75280\u586b\u5145 \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u8f6c\u6362\u540e\u5b57\u6bb5\u7684\u6700\u5c0f\u5bbd\u5ea6\uff0c\u5982\u679c\u4e0d\u8db3\u81ea\u52a8\u7528\u7a7a\u683c\u8865\u9f50\uff1b\u5982\u679c\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u503c\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u7cbe\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u5728 . \u4e4b\u540e\u52a0\u7cbe\u5ea6\u503c\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\u5982\u679c\u6307\u5b9a\u4e3a\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u957f\u5ea6\u4fee\u9970\u7b26\uff08\u53ef\u9009\uff09\u3002 \u8f6c\u6362\u7c7b\u578b\u3002 Conversion Meaning d \u683c\u5f0f\u5316\u6574\u6570 i \u683c\u5f0f\u5316\u6574\u6570 o 8 \u8fdb\u5236 u \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u6574\u578b(\u5df2\u8fc7\u65f6) x 16 \u8fdb\u5236\uff0c \u5c0f\u5199\u5b57\u6bcd X 16 \u8fdb\u5236\uff0c \u5927\u5199\u5b57\u6bcd e \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5c0f\u5199\u5b57\u6bcd E \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5927\u5199\u5b57\u6bcd f \u6d6e\u70b9\u6570 F \u6d6e\u70b9\u6570 g \u6d6e\u70b9\u6570\uff0c \u5982\u679c\u6307\u6570\u5c0f\u4e8e -4 \u6216\u5c0f\u4e8e\u7cbe\u5ea6\uff0c \u5219\u4f7f\u7528\u5c0f\u5199\u6307\u6570\u683c\u5f0f\uff0c \u5426\u5219\u4f7f\u7528\u5c0f\u6570\u683c\u5f0f G \u6d6e\u70b9\u6570\uff0c \u7c7b\u4f3c g , \u4f7f\u7528\u5927\u5199\u6307\u6570 c \u5355\u4e2a\u5b57\u7b26\uff0c \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176 ASCII \u7801 r \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 repr() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 s \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 str() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 % % \u5b57\u7b26 # \u6620\u5c04\u952e ## \u5982\u679c\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u90a3\u4e48\u5fc5\u987b\u4f7f\u7528\u6620\u5c04\u952e. \u5982\uff1a print ( ' %(num)d ' % { \"num\" : 10 }) 10 # \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6 print ( ' %2s ' % 123456 ) print ( ' %8s ' % 123456 ) print ( ' %*s ' % ( 10 , 123456 )) 123456 123456 123456 # \u7cbe\u5ea6 print ( ' %.2f ' % 100.256 ) print ( ' %.*f ' % ( 2 , 100.256 )) 100.26 100.26 # \u8f6c\u6362\u6807\u5fd7 print ( ' %-8d ' % 123456 ) print ( ' %+8d ' % 123456 ) print ( ' %08d ' % 123456 ) 123456 +123456 00123456 format\u65b9\u6cd5 < \u6a21\u677f\u5b57\u7b26\u4e32 >. format ( < \u9017\u53f7\u5206\u9694\u7684\u53c2\u6570 > ) <\u6a21\u677f\u5b57\u7b26\u4e32> \u7531\u4e00\u7cfb\u5217\u7684\u69fd {} \u7ec4\u6210\uff0c\u7528\u6765\u63a7\u5236\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u503c\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u5c06format()\u65b9\u6cd5\u7684 <\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570> \u4e2d\u7684\u53c2\u6570\u6309\u7167\u5e8f\u53f7\u5173\u7cfb\u66ff\u6362\u5230 <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u4e2d\u3002\u5982\u679c\u5927\u62ec\u53f7\u4e2d\u6ca1\u6709\u5e8f\u53f7\uff0c\u5219\u6309\u7167\u51fa\u73b0\u987a\u5e8f\u66ff\u6362\u3002\u8be5\u65b9\u6cd5\u4f1a\u521b\u5efa\u65b0\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u4fee\u6539\u539f\u503c\u3002 {}\u4e2d\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u6307\u5b9a\u7684\u987a\u5e8f\u66ff\u6362 print ( \" {2} : {1} : {0} \" . format ( \"1\" , \"2\" , \"3\" )) 3:2:1 \u6ca1\u6709\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u51fa\u73b0\u7684\u987a\u5e8f\u4f9d\u6b21\u66ff\u6362 print ( \" {} : {} : {} \" . format ( \"1\" , \"2\" , \"3\" )) # \u7b49\u4ef7\u4e8e # \"{1}:{2}:{3}\".format(\"1\", \"2\", \"3\") 1:2:3 format()\u65b9\u6cd5\u4e2d <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u9664\u4e86\u5305\u62ec\u53c2\u6570\u5e8f\u53f7\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u683c\u5f0f\u63a7\u5236\u4fe1\u606f\u3002\u69fd\u5185\u90e8\u7684\u5b8c\u6574\u6837\u5f0f\u5982\u4e0b\uff1a \u66ff\u6362\u5b57\u6bb5 - replacement_field ::= \"{\" [field_name] [\"!\" conversion] [\":\" format_spec] \"}\" \u5b57\u6bb5\u540d - field_name ::= arg_name (\".\" attribute_name | \"[\" element_index \"]\")* \u53c2\u6570\u540d - arg_name ::= [identifier | integer] \u5c5e\u6027\u540d - attribute_name ::= identifier \u5143\u7d20\u7d22\u5f15 - element_index ::= integer | index_string \u7d22\u5f15\u5b57\u7b26\u4e32 - index_string ::= <any source character except \"]\"> + \u8f6c\u6362\u5b57\u6bb5 - conversion ::= \"r\" | \"s\" \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26 - format_spec ::= <described in the next section> \u4e00\u4e2a\u69fd {} \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a field_name : \u5b57\u6bb5\u540d\u53ef\u4ee5\u662f arg_name\u3001attribute_name\u3001element_index\u4e4b\u4e2d\u7684\u4e00\u4e2a\u3002 arg_name \u53ef\u4ee5\u662f \u6574\u6570 \u6216 \u5173\u952e\u5b57 \u3002\u6574\u6570\u4e3a .format() \u7684\u4f4d\u7f6e\u53c2\u6570\uff0c \u5173\u952e\u5b57\u4e3a .format() \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5982\u679c .format() \u7684\u53c2\u6570\u5b58\u5728\u5c5e\u6027\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name.attribute_name \u7684\u5f62\u5f0f\u83b7\u53d6\u5c5e\u6027\u503c\u3002 \u5982\u679c .format() \u53c2\u6570\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name[integer|index_string] \u7684\u5f62\u5f0f\u83b7\u53d6\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u3002 conversion : \u8f6c\u6362\u5b57\u6bb5\u7531 ! \u5f00\u59cb\uff0c r \u4ee3\u8868\u8c03\u7528 repr() , s \u4ee3\u8868\u8c03\u7528 str() \u3002 format_spec : \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26\u7531 : \u5f00\u59cb\u3002 # field_name \u662f \u5173\u952e\u5b57 print ( \" {name!r} \" . format ( name = \"\u5c0f\u660e\" )) # field_name \u662f \u6574\u6570 print ( \" {0!s} \" . format ( \"\u5c0f\u660e\" )) # field_name \u662f \u5c5e\u6027\u540d class Person : name = \"\u5c0f\u660e\" print ( \"{.name!s}\" . format ( Person )) # field_name \u662f \u6574\u6570\u7d22\u5f15 names = [ \"\u5c0f\u7ea2\" , \"\u5c0f\u660e\" ] print ( \"{[1]!s}\" . format ( names )) # field_name \u662f \u5b57\u7b26\u4e32\u7d22\u5f15 from pandas import Series names = Series ({ \"name\" : \"\u5c0f\u660e\" }) print ( \"{[name]!s}\" . format ( names )) '\u5c0f\u660e' \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5176\u4e2d\uff0c <\u683c\u5f0f\u63a7\u5236\u6807\u8bb0> \u7528\u6765\u63a7\u5236\u53c2\u6570\u663e\u793a\u65f6\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u5982\u4e0b\uff1a format_spec ::= [[fill]align][sign][#][0][width][grouping_option][.precision][type] fill ::= <any character> align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit+ grouping_option ::= \"_\" | \",\" precision ::= digit+ type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\"| \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" \u586b\u5145\u5b57\u7b26 \uff1a\u5982\u679c\u6307\u5b9a\u4e86\u5bf9\u9f50\u9009\u9879\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u586b\u5145\u5b57\u7b26\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u683c. \u5bf9\u9f50\u9009\u9879 \uff1a\u9ed8\u8ba4\u53f3\u5bf9\u9f50\uff0c\u5404\u79cd\u5bf9\u9f50\u9009\u9879\u7684\u542b\u4e49\u5982\u4e0b\uff1a \u9009\u9879 \u610f\u4e49 '<' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5de6\u5bf9\u9f50\uff08\u8fd9\u662f\u5927\u591a\u6570\u5bf9\u8c61\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '>' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u53f3\u5bf9\u9f50\uff08\u8fd9\u662f\u6570\u5b57\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '=' \u5f3a\u5236\u5c06\u586b\u5145\u653e\u7f6e\u5728\u7b26\u53f7\uff08\u5982\u679c\u6709\uff09\u4e4b\u540e\u4f46\u5728\u6570\u5b57\u4e4b\u524d\u3002\u8fd9\u7528\u4e8e\u4ee5\u201c+000000120\u201d\u5f62\u5f0f\u6253\u5370\u5b57\u6bb5\u3002\u6b64\u5bf9\u9f50\u9009\u9879\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\u3002\u5f53'0'\u7d27\u63a5\u5728\u5b57\u6bb5\u5bbd\u5ea6\u4e4b\u524d\u65f6\uff0c\u5b83\u6210\u4e3a\u9ed8\u8ba4\u503c\u3002 '^' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5c45\u4e2d\u3002 sign \uff1a\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a \u9009\u9879 \u610f\u4e49 '+' \u8868\u793a\u6807\u5fd7\u5e94\u8be5\u7528\u4e8e\u6b63\u6570\u548c\u8d1f\u6570\u3002 '-' \u8868\u793a\u6807\u5fd7\u5e94\u4ec5\u7528\u4e8e\u8d1f\u6570\uff08\u8fd9\u662f\u9ed8\u8ba4\u884c\u4e3a\uff09\u3002 space \u8868\u793a\u5e94\u5728\u6b63\u6570\u4e0a\u4f7f\u7528\u524d\u5bfc\u7a7a\u683c\uff0c\u5728\u8d1f\u6570\u4e0a\u4f7f\u7528\u51cf\u53f7\u3002 # \uff1a\u4ec5\u9002\u7528\u4e8e\u6570\u5b57\u53c2\u6570\uff0c\u540c\u65f6\u4ec5\u9002\u7528\u4e8e2\u30018\u300116\u8fdb\u5236\u7684\u6570\u5b57\u3002\u4f1a\u5728\u8f93\u51fa\u7684\u6570\u5b57\u524d\u6dfb\u52a0 0b\u30010o\u30010x\u524d\u7f00\u3002 \u5bbd\u5ea6 \uff1a\u6307\u5b9a\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u3002 \u5343\u4f4d\u5206\u9694\u7b26 \uff1a\u53ea\u80fd\u4f7f\u7528 _ \u6216 , \u4f5c\u4e3a\u5343\u4f4d\u5206\u9694\u7b26\u3002 \u7cbe\u5ea6 \uff1a \u7c7b\u578b \uff1a\u8be5\u9009\u9879\u51b3\u5b9a\u4e86\u6570\u636e\u5e94\u8be5\u5982\u4f55\u5448\u73b0\u3002 \u53ef\u7528\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7c7b\u578b\uff1a Type Meaning s \u5b57\u7b26\u4e32\u683c\u5f0f\uff0c \u5b57\u7b26\u4e32\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c \u53ef\u7701\u7565 None \u540c s \u53ef\u7528\u7684\u6574\u6570\u8868\u793a\u7c7b\u578b\uff1a Type Meaning b \u8f93\u51fa\u4e3a 2 \u8fdb\u5236\u6574\u6570 c \u8f93\u51fa\u4e3a\u4e3a\u76f8\u5e94\u7684 unicode \u5b57\u7b26 d \u8f93\u51fa\u4e3a 10 \u8fdb\u5236\u6574\u6570 o \u8f93\u51fa\u4e3a 8 \u8fdb\u5236\u6574\u6570 x \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd X \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5927\u5199\u5b57\u6bcd n \u7c7b\u4f3c d , \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 None \u540c d \u53ef\u7528\u7684\u6d6e\u70b9\u6570\u548c\u5c0f\u6570\u503c\u8868\u793a\u7c7b\u578b\uff1a Type Meaning e \u6307\u6570\u8868\u793a\u6cd5\uff0c \u4f7f\u7528\u5b57\u6bcd e \u4ee5\u79d1\u5b66\u8bb0\u6570\u6cd5\u6253\u5370\u6570\u5b57\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 E \u7c7b\u4f3c e , \u4f7f\u7528\u5b57\u6bcd E f \u6d6e\u70b9\u6570\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 F \u6d6e\u70b9\u6570\uff0c \u540c f g \u4e00\u822c\u5f62\u5f0f\uff0c \u53d7 precision \u9009\u9879\u5f71\u54cd G \u7c7b\u4f3c g , \u5f53\u4f7f\u7528\u6307\u6570\u8868\u793a\u6cd5\u65f6\uff0c \u4f7f\u7528 E \u800c\u4e0d\u662f e n \u548c g \u76f8\u540c\uff0c \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 % \u767e\u5206\u6570\u8868\u793a None \u540c g # \u586b\u5145\u3001\u5bf9\u9f50\u3001\u7b26\u53f7\u3001\u5bbd\u5ea6\u3001\u5206\u7ec4\u9009\u9879\u3001\u7cbe\u5ea6 # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*^+20.2f} \" . format ( 120 ) '******+120.00*******' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001_\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \"{0:*^+20_.2f}\" . format ( 12000 ) '*****+12_000.00*****' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001,\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \" {0:*^+20,.2f} \" . format ( 12000 ) '*****+12,000.00*****' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*<+20.2f} \" . format ( - 120 ) '-120.00*************' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u8d1f\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*>-20.2f} \" . format ( - 120 ) '*************-120.00' \u65b9\u6cd5 \u903b\u8f91\u65b9\u6cd5 \u65b9\u6cd5 \u63cf\u8ff0 .isalnum if all characters in the string are alpha-numeric and there is at least one character .isalpha if all characters in the string are alphabetic and there is at least one character .isnumeric if all characters in the string are numeric and there is at least one character .isascii ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too . .isdecimal if all characters in the string are decimal and there is at least one character .isdigit if all characters in the string are digits and there is at least one character .isidentifier Use keyword.iskeyword() to test for reserved identifiers such as \"def\" and \"class\". .islower if all cased characters in the string are lowercase and there is at least one cased character .isupper if all cased characters in the string are uppercase and there is at least one cased character .isprintable if all of its characters are considered printable in repr() or if it is empty. .isspace if all characters in the string are whitespace and there is at least one character .istitle In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones. \u65b9\u6cd5 \u63cf\u8ff0 .startswith(prefix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 prefix \u5f00\u5934 .endswith(suffix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 suffix \u7ed3\u5c3e \u5927\u5c0f\u5b57\u6bcd\u8f6c\u6362 \u65b9\u6cd5 \u63cf\u8ff0 .lower \u8fd4\u56de\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .upper \u8fd4\u56de\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .capitalize \u4f7f\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4f59\u5b57\u7b26\u5b57\u6bcd\u5c0f\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .swapcase \u5c06\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5c06\u5c0f\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5927\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .title \u6bcf\u4e2a\u5355\u8bcd\u90fd\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u8fd4\u56de\u526f\u672c\u3002 \u62c6\u5206\u5b57\u7b26\u4e32 \u65b9\u6cd5 \u63cf\u8ff0 .split(sep=None, maxsplit=-1) \u4ece\u5de6\u5230\u53f3\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .rsplit(sep=None, maxsplit=-1) \u4ece\u53f3\u5230\u5de6\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .splitlines(keepends=False) \u4ee5\u56de\u8f66\u7b26\u6216\u6362\u884c\u7b26\u5206\u5272\u5b57\u7b26\u4e32 .partition(sep, /) \u4ece\u5de6\u5230\u53f3\u4ee5\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684 sep \u5206\u5272\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5305\u62ec3\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 \"123#456#789\" . split ( sep = \"#\" , maxsplit = 1 ) ['123', '456#789'] \"123#456#789\" . rsplit ( sep = \"#\" , maxsplit = 1 ) ['123#456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = False ) ['123', '456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = True ) ['123\\r\\n', '456\\r\\n', '789'] \"123#456#789\" . partition ( \"#\" ) ('123', '#', '456#789') \u5408\u5e76\u5b57\u7b26\u4e32 \"_\" . join ([ \"a\" , \"b\" , \"c\" ]) 'a_b_c' \u66ff\u6362\u5b57\u7b26\u4e32 \u65b9\u6cd5 \u63cf\u8ff0 .replace(old, new, count=-1) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32 old \u90fd\u66ff\u6362\u4e3a new \u3002 .strip(chars=None) \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\u5220\u9664\u3002 .lstrip(chars=None) \u8fd4\u56de\u5220\u9664\u524d\u5bfc\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .rstrip(chars=None) \u8fd4\u56de\u5220\u9664\u5c3e\u968f\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .expandtabs(tabsize=8) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5236\u8868\u7b26\u90fd\u4f7f\u7528 tabsize \u4e2a\u7a7a\u683c\u4ee3\u66ff\u3002 \" \\n abc \\t\\n\\r \" . strip () 'abc' \" \\n abc \\t\\n\\r \" . lstrip () 'abc\\t\\n\\r ' \" \\n abc \\t\\n\\r \" . rstrip () ' \\nabc' \" \\n abc \\t\\n\\r \" . expandtabs ( tabsize = 8 ) ' \\nabc \\n\\r ' \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u65b9\u6cd5 \u63cf\u8ff0 .format \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .format_map \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .ljust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5de6\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .rjust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u53f3\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .center(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5c45\u4e2d\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .zfill(width) \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u957f\u5ea6\u4e0d\u591f\uff0c\u7528\u96f6\u4ece\u5de6\u8fb9\u586b\u5145\u3002 .format_map \u4e0e .format \u5728\u7528\u6cd5\u4e0a\u5927\u4f53\u4e00\u81f4\uff0c\u4f46\u6709\u4e00\u4e2a\u533a\u522b\uff1a # format_map \u548c format \u7684\u533a\u522b # \u5982\u679c\u8981\u4f7f\u7528\u5173\u952e\u5b57 format\u5fc5\u987b\u8fd9\u6837\u4f7f\u7528 \" {name} , {sex} \" . format ( name = \"Jack\" , sex = \"male\" ) # format_map \u53ef\u4ee5\u7528dict \" {name} , {sex} \" . format_map ({ \"name\" : \"Jack\" , \"sex\" : \"male\" }) 'Jack, male' print ( \"abc\" . ljust ( 10 , \"#\" )) print ( \"abc\" . rjust ( 10 , \"#\" )) print ( \"abc\" . center ( 10 , \"#\" )) print ( \"123\" . zfill ( 10 )) # \u975e\u6570\u5b57\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5 print ( \"abc\" . zfill ( 10 )) abc####### #######abc ###abc#### 0000000123 0000000abc \u7edf\u8ba1\u5b50\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570 \"abcAbc\" . count ( \"c\" , 0 , 6 ) 2 \u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e .index \u4e0e .find \u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7 .index \u65b9\u6cd5\u82e5\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u4f1a\u629b\u51faValueError\uff0c\u800c .find \u4f1a\u8fd4\u56de -1 \u3002 \"abcAbc\" . index ( \"bc\" , 0 , 6 ) \"abcAbc\" . find ( \"bc\" , 0 , 6 ) 1 \"abcAbc\" . index ( \"bc\" , 0 , 2 ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-f8cead4644a3> in <module> ----> 1 \"abcAbc\".index(\"bc\", 0, 2) ValueError: substring not found \"abcAbc\" . find ( \"bc\" , 0 , 2 ) -1","title":"2.5.String"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_1","text":"input str_1 = \"\"\" This is a multi-line string This is the second line \"\"\" print ( str_1 ) str_2 = \" \\n This is a multi-line string \\n This is the second line \\n \" print ( str_2 ) print ( str_1 == str_2 ) output This is a multi-line string This is the second line This is a multi-line string This is the second line True","title":"\u591a\u884c\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_2","text":"\u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u91cc\u9762\u8f93\u5165\u7279\u6b8a\u5b57\u7b26\uff0c\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26 \\ \uff0c\u4f8b\u5982\u8f93\u5165\u8f6c\u4e49\u7b26\u672c\u8eab\uff1a str_3 = \"12 \\\\ 14\" print ( str_3 ) 12\\14","title":"\u8f6c\u4e49"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_3","text":"\u5728 Python \u4e2d\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u524d\u7f00\uff1a r / R \uff1a\u8868\u793a\u975e\u8f6c\u4e49\u7684\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u5e38\u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u8def\u5f84\u5b57\u7b26\u4e32\u3002 b / B \uff1a\u8868\u793aPython3\u7684bytes\uff0cPython2\u7684\u5b57\u7b26\u4e32\u9ed8\u8ba4\u5c31\u662fbytes\u3002Python2\u7684b\u524d\u7f00\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9Python3\u7684\u8fd9\u79cd\u5199\u6cd5\u3002 u / U \uff1a\u8868\u793aPython2\u7684unicode\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cunicode\u7f16\u7801\u3002Python3\u91cc\u9ed8\u8ba4\u7684str\u5c31\u662f(Python2\u7684)unicode\u3002Python3\u7684u\u524d\u7f00\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9Python2\u7684\u8fd9\u79cd\u5199\u6cd5\u3002\u5efa\u8bae\u7edf\u4e00\u91c7\u7528UTF-8\u7f16\u7801\u3002 f / F \uff1a\u8868\u793a f \u683c\u5f0f\u5b57\u7b26\u4e32\u3002","title":"\u524d\u7f00"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_4","text":"Python 3\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff1a str\uff1a\u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f7f\u7528Unicode\u7801\u50a8\u5b58\u5b57\u7b26\u4e32\u7684\u6587\u672c\u3002\u76f8\u5f53\u4e8ePython 2\u7684 unicode \u7c7b\u578b\u3002str\u53ef\u4ee5\u901a\u8fc7\u7f16\u7801\uff0c\u8f6c\u6362\u4e3abytes\u3002 bytes\uff1a\u5b57\u8282\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u76f4\u63a5\u50a8\u5b58\u5b57\u7b26\u4e32\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u5b57\u9762\u503c\u752816\u8fdb\u5236\u6216\u8005ASCII\u7801\u663e\u793a\u3002\u76f8\u5f53\u4e8ePython 2\u7684 str \u7c7b\u578b\u3002bytes\u53ef\u4ee5\u901a\u8fc7\u89e3\u7801\uff0c\u8f6c\u6362\u4e3astr\u3002 $$ \\begin{array}{} \\text{Python 3} \\mathbf{str} &\\Longleftrightarrow \\text{Python 2} \\mathbf{unicode} \\\\ \\text{Python 3} \\mathbf{bytes} &\\Longleftrightarrow \\text{Python 2} \\mathbf{str} \\end{array} $$ \u5728python3\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32 str_1 = \"\u4e2d\u56fd\" # \u7f16\u7801 str_1 . encode () b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd' # \u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 str_2 = b ' \\xe4\\xb8\\xad\\xe5\\x9b\\xbd ' # \u89e3\u7801 str_2 . decode () '\u4e2d\u56fd' \u5982\u679c\u5bf9\u5b57\u7b26\u7f16\u7801\u4e0d\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 1.4\u5b57\u7b26\u7f16\u7801 \u3002","title":"\u5b57\u7b26\u7f16\u7801"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#bytes","text":"\u6587\u672c\u5b57\u7b26\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u8868\u793a\uff0c\u9ed8\u8ba4\u4e3aUnicode\u7801\uff0c\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u82e5\u5e72\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8981\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\uff0c\u6216\u8005\u4fdd\u5b58\u5230\u78c1\u76d8\u4e0a\uff0c\u5c31\u9700\u8981\u628a str \u53d8\u4e3a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684 bytes \u3002 Python3\u5bf9 bytes \u7c7b\u578b\u7684\u6570\u636e\u7528\u5e26 b \u524d\u7f00\u7684\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u8868\u793a\u3002 bytes_8 = b \"ABC\" bytes_8 b'ABC' \u8981\u6ce8\u610f\u7684\u662f\uff1abytes\u5b57\u9762\u503c\u4e2d\u53ea\u5141\u8bb8ASCII\u5b57\u7b26\uff08\u65e0\u8bba\u6e90\u4ee3\u7801\u58f0\u660e\u7684\u7f16\u7801\u4e3a\u4f55\uff09\u3002\u4efb\u4f55\u8d85\u51fa127\u7684\u4e8c\u8fdb\u5236\u503c\u4ee516\u8fdb\u5236\u7684\u5f62\u5f0f\u663e\u793a\u3002 \u53ef\u4ee5\u5bf9str\uff08unicode\u7c7b\u578b\uff09\u5bf9\u8c61\u4f7f\u7528 encode() \u65b9\u6cd5\uff0c\u7f16\u7801\u4e3abytes\u7684\u5f62\u5f0f\u3002 '\u4e2d\u6587' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' \u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528 encode \u65b9\u6cd5\u65f6\uff0c\u4e0d\u80fd\u8d85\u51fa\u6307\u5b9a\u7f16\u7801\u7684\u8303\u56f4\uff0c\u4f8b\u5982\u4e0d\u80fd\u5bf9\u4e2d\u6587\u5b57\u7b26\u4f7f\u7528 .encode(\"ascii\") \uff0c\u56e0\u4e3a\u4e2d\u6587\u4e0d\u5728ascii\u7801\u7684\u8303\u56f4\u5185\u3002 try : '\u4e2d\u6587' . encode ( 'ascii' ) except UnicodeEncodeError as e : print ( e ) 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) \u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6211\u4eec\u4ece\u7f51\u7edc\u6216\u78c1\u76d8\u4e0a\u8bfb\u53d6\u4e86\u5b57\u8282\u6d41\uff0c\u90a3\u4e48\u8bfb\u5230\u7684\u6570\u636e\u5c31\u662fbytes\u3002\u8981\u628abytes\u53d8\u4e3astr\uff0c\u5c31\u9700\u8981\u7528 decode() \u65b9\u6cd5\uff1a b 'ABC' . decode ( 'ascii' ) 'ABC' b ' \\xe4\\xb8\\xad\\xe6\\x96\\x87 ' . decode ( 'utf-8' ) '\u4e2d\u6587' \u5982\u679cbytes\u4e2d\u5305\u542b\u65e0\u6cd5\u89e3\u7801\u7684\u5b57\u8282\uff0c decode() \u65b9\u6cd5\u4f1a\u62a5\u9519\uff1a try : b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' ) except UnicodeDecodeError as e : print ( e ) 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte \u4f46\u662f\uff0c\u5982\u679cbytes\u4e2d\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u65e0\u6548\u7684\u5b57\u8282\uff0c\u53ef\u4ee5\u4f20\u5165 errors = 'ignore' \u5ffd\u7565\u9519\u8bef\u7684\u5b57\u8282\uff1a \"\u4e2d\" . encode ( \"utf-8\" ) # \u4e2d \u539f\u6765\u7684\u7f16\u7801 b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' , errors = 'ignore' ) '\u4e2d' \u5728\u5bf9str\u548cbytes\u4e92\u76f8\u8f6c\u6362\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c\u5e94\u8be5\u4f7f\u7528UTF-8\u7f16\u7801\u5bf9str\u548cbytes\u8fdb\u884c\u8f6c\u6362\u3002 \u7531\u4e8ePython\u6e90\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u6240\u4ee5\uff0c\u5f53\u4f60\u7684\u6e90\u4ee3\u7801\u4e2d\u5305\u542b\u4e2d\u6587\u7684\u65f6\u5019\uff0c\u5728\u4fdd\u5b58\u6e90\u4ee3\u7801\u65f6\uff0c\u5c31\u9700\u8981\u52a1\u5fc5\u6307\u5b9a\u4fdd\u5b58\u4e3aUTF-8 \u7f16\u7801\u3002\u5f53Python\u89e3\u91ca\u5668\u8bfb\u53d6\u6e90\u4ee3\u7801\u65f6\uff0c\u4e3a\u4e86\u8ba9\u5b83\u6309UTF-8\u7f16\u7801\u8bfb\u53d6\uff0c\u6211\u4eec\u901a\u5e38\u5728\u6587\u4ef6\u5f00\u5934\u5199\u4e0a\u8fd9\u4e24\u884c\uff1a # !/usr/bin/env python3 # -*- coding: utf-8 -*- \u7b2c\u4e00\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Linux/OS X\u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2aPython\u53ef\u6267\u884c\u7a0b\u5e8f\uff0cWindows\u7cfb\u7edf\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u6ce8\u91ca\u3002\u7b2c\u4e8c\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Python\u89e3\u91ca\u5668\uff0c\u6309\u7167UTF-8\u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5426\u5219\uff0c\u5728\u6e90\u4ee3\u7801\u4e2d\u5199\u7684\u4e2d\u6587\u8f93\u51fa\u53ef\u80fd\u4f1a\u6709\u4e71\u7801\u3002 UTF-8\u7f16\u7801\u6ce8\u91ca\u53ea\u662f\u8ba9Python\u89e3\u91ca\u5668\u6309UTF-8\u7684\u7f16\u7801\u89c4\u5219\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u6e90\u4ee3\u7801\u4e00\u5b9a\u662f\u4f7f\u7528UT8-8\u7f16\u7801\u4fdd\u5b58\u7684\uff0c\u5fc5\u987b\u5e76\u4e14\u8981\u786e\u4fdd\u6587\u672c\u7f16\u8f91\u5668\u6b63\u5728\u4f7f\u7528UTF-8\u7f16\u7801\u3002","title":"bytes\u5b57\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_5","text":"","title":"\u683c\u5f0f\u5316"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#c-printf","text":"\u5b57\u7b26\u4e32\u5177\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u5185\u7f6e\u64cd\u4f5c\uff1a\u4f7f\u7528 % (\u53d6\u6a21)\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6 % \u4e5f\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u8fd0\u7b97\u7b26\u6216\u63d2\u503c\u8fd0\u7b97\u7b26\u3002\u5bf9\u4e8eformat % values(\u5176\u4e2dformat\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32)\uff0c\u5728format\u4e2d\u7684 % \u8f6c\u6362\u6807\u8bb0\u7b26\u5c06\u88ab\u66ff\u6362\u4e3a\u96f6\u4e2a\u6216\u591a\u4e2avalues\u6761\u76ee\u3002 \u5176\u6548\u679c\u7c7b\u4f3c\u4e8e\u5728C\u8bed\u8a00\u4e2d\u4f7f\u7528 sprintf() \u3002 input print ( 'Hello, %s ' % 'world' ) # \u7701\u7565\u62ec\u53f7 print ( 'Hi, %s , you have $ %d ' % ( 'Michael' , 10000.58 )) output Hello, world Hi, Michael, you have $10000 \u8f6c\u6362\u6807\u8bb0\u7b26 \u5305\u542b\u4e24\u4e2a\u6216\u66f4\u591a\u5b57\u7b26\uff0c\u7531\u4ee5\u4e0b\u5143\u7d20\u7ec4\u6210\uff0c\u4e14\u5fc5\u987b\u9075\u5faa\u6b64\u5904\u89c4\u5b9a\u7684\u987a\u5e8f\uff1a % \u5b57\u7b26\uff0c\u7528\u4e8e\u6807\u8bb0\u8f6c\u6362\u7b26\u7684\u8d77\u59cb\u3002 \u6620\u5c04\u952e\uff08\u53ef\u9009\uff09\uff0c\u7531\u52a0\u5706\u62ec\u53f7\u7684\u5b57\u7b26\u5e8f\u5217\u7ec4\u6210(\u4f8b\u5982(somename))\u3002 \u8f6c\u6362\u6807\u5fd7\uff08\u53ef\u9009\uff09 - \u8868\u793a\u5de6\u5bf9\u9f50 + \u8868\u793a\u8f6c\u6362\u540e\u7684\u5185\u5bb9\u524d\u65b9\u52a0\u4e0a\u6b63\u8d1f\u53f7 \u7a7a\u683c \u8868\u793a\u6b63\u6570\u524d\u65b9\u4fdd\u7559\u4e00\u4e2a\u7a7a\u683c 0 \u8868\u793a\u5982\u679c\u8f6c\u6362\u4f4d\u7f6e\u4f4d\u6570\u4e0d\u591f\u65f6\uff0c\u75280\u586b\u5145 \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u8f6c\u6362\u540e\u5b57\u6bb5\u7684\u6700\u5c0f\u5bbd\u5ea6\uff0c\u5982\u679c\u4e0d\u8db3\u81ea\u52a8\u7528\u7a7a\u683c\u8865\u9f50\uff1b\u5982\u679c\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u503c\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u7cbe\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u5728 . \u4e4b\u540e\u52a0\u7cbe\u5ea6\u503c\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\u5982\u679c\u6307\u5b9a\u4e3a\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u957f\u5ea6\u4fee\u9970\u7b26\uff08\u53ef\u9009\uff09\u3002 \u8f6c\u6362\u7c7b\u578b\u3002 Conversion Meaning d \u683c\u5f0f\u5316\u6574\u6570 i \u683c\u5f0f\u5316\u6574\u6570 o 8 \u8fdb\u5236 u \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u6574\u578b(\u5df2\u8fc7\u65f6) x 16 \u8fdb\u5236\uff0c \u5c0f\u5199\u5b57\u6bcd X 16 \u8fdb\u5236\uff0c \u5927\u5199\u5b57\u6bcd e \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5c0f\u5199\u5b57\u6bcd E \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5927\u5199\u5b57\u6bcd f \u6d6e\u70b9\u6570 F \u6d6e\u70b9\u6570 g \u6d6e\u70b9\u6570\uff0c \u5982\u679c\u6307\u6570\u5c0f\u4e8e -4 \u6216\u5c0f\u4e8e\u7cbe\u5ea6\uff0c \u5219\u4f7f\u7528\u5c0f\u5199\u6307\u6570\u683c\u5f0f\uff0c \u5426\u5219\u4f7f\u7528\u5c0f\u6570\u683c\u5f0f G \u6d6e\u70b9\u6570\uff0c \u7c7b\u4f3c g , \u4f7f\u7528\u5927\u5199\u6307\u6570 c \u5355\u4e2a\u5b57\u7b26\uff0c \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176 ASCII \u7801 r \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 repr() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 s \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 str() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 % % \u5b57\u7b26 # \u6620\u5c04\u952e ## \u5982\u679c\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u90a3\u4e48\u5fc5\u987b\u4f7f\u7528\u6620\u5c04\u952e. \u5982\uff1a print ( ' %(num)d ' % { \"num\" : 10 }) 10 # \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6 print ( ' %2s ' % 123456 ) print ( ' %8s ' % 123456 ) print ( ' %*s ' % ( 10 , 123456 )) 123456 123456 123456 # \u7cbe\u5ea6 print ( ' %.2f ' % 100.256 ) print ( ' %.*f ' % ( 2 , 100.256 )) 100.26 100.26 # \u8f6c\u6362\u6807\u5fd7 print ( ' %-8d ' % 123456 ) print ( ' %+8d ' % 123456 ) print ( ' %08d ' % 123456 ) 123456 +123456 00123456","title":"C printf \u6837\u5f0f\u7684\u683c\u5f0f\u5316"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#format","text":"< \u6a21\u677f\u5b57\u7b26\u4e32 >. format ( < \u9017\u53f7\u5206\u9694\u7684\u53c2\u6570 > ) <\u6a21\u677f\u5b57\u7b26\u4e32> \u7531\u4e00\u7cfb\u5217\u7684\u69fd {} \u7ec4\u6210\uff0c\u7528\u6765\u63a7\u5236\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u503c\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u5c06format()\u65b9\u6cd5\u7684 <\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570> \u4e2d\u7684\u53c2\u6570\u6309\u7167\u5e8f\u53f7\u5173\u7cfb\u66ff\u6362\u5230 <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u4e2d\u3002\u5982\u679c\u5927\u62ec\u53f7\u4e2d\u6ca1\u6709\u5e8f\u53f7\uff0c\u5219\u6309\u7167\u51fa\u73b0\u987a\u5e8f\u66ff\u6362\u3002\u8be5\u65b9\u6cd5\u4f1a\u521b\u5efa\u65b0\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u4fee\u6539\u539f\u503c\u3002 {}\u4e2d\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u6307\u5b9a\u7684\u987a\u5e8f\u66ff\u6362 print ( \" {2} : {1} : {0} \" . format ( \"1\" , \"2\" , \"3\" )) 3:2:1 \u6ca1\u6709\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u51fa\u73b0\u7684\u987a\u5e8f\u4f9d\u6b21\u66ff\u6362 print ( \" {} : {} : {} \" . format ( \"1\" , \"2\" , \"3\" )) # \u7b49\u4ef7\u4e8e # \"{1}:{2}:{3}\".format(\"1\", \"2\", \"3\") 1:2:3 format()\u65b9\u6cd5\u4e2d <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u9664\u4e86\u5305\u62ec\u53c2\u6570\u5e8f\u53f7\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u683c\u5f0f\u63a7\u5236\u4fe1\u606f\u3002\u69fd\u5185\u90e8\u7684\u5b8c\u6574\u6837\u5f0f\u5982\u4e0b\uff1a \u66ff\u6362\u5b57\u6bb5 - replacement_field ::= \"{\" [field_name] [\"!\" conversion] [\":\" format_spec] \"}\" \u5b57\u6bb5\u540d - field_name ::= arg_name (\".\" attribute_name | \"[\" element_index \"]\")* \u53c2\u6570\u540d - arg_name ::= [identifier | integer] \u5c5e\u6027\u540d - attribute_name ::= identifier \u5143\u7d20\u7d22\u5f15 - element_index ::= integer | index_string \u7d22\u5f15\u5b57\u7b26\u4e32 - index_string ::= <any source character except \"]\"> + \u8f6c\u6362\u5b57\u6bb5 - conversion ::= \"r\" | \"s\" \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26 - format_spec ::= <described in the next section> \u4e00\u4e2a\u69fd {} \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a field_name : \u5b57\u6bb5\u540d\u53ef\u4ee5\u662f arg_name\u3001attribute_name\u3001element_index\u4e4b\u4e2d\u7684\u4e00\u4e2a\u3002 arg_name \u53ef\u4ee5\u662f \u6574\u6570 \u6216 \u5173\u952e\u5b57 \u3002\u6574\u6570\u4e3a .format() \u7684\u4f4d\u7f6e\u53c2\u6570\uff0c \u5173\u952e\u5b57\u4e3a .format() \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5982\u679c .format() \u7684\u53c2\u6570\u5b58\u5728\u5c5e\u6027\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name.attribute_name \u7684\u5f62\u5f0f\u83b7\u53d6\u5c5e\u6027\u503c\u3002 \u5982\u679c .format() \u53c2\u6570\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name[integer|index_string] \u7684\u5f62\u5f0f\u83b7\u53d6\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u3002 conversion : \u8f6c\u6362\u5b57\u6bb5\u7531 ! \u5f00\u59cb\uff0c r \u4ee3\u8868\u8c03\u7528 repr() , s \u4ee3\u8868\u8c03\u7528 str() \u3002 format_spec : \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26\u7531 : \u5f00\u59cb\u3002 # field_name \u662f \u5173\u952e\u5b57 print ( \" {name!r} \" . format ( name = \"\u5c0f\u660e\" )) # field_name \u662f \u6574\u6570 print ( \" {0!s} \" . format ( \"\u5c0f\u660e\" )) # field_name \u662f \u5c5e\u6027\u540d class Person : name = \"\u5c0f\u660e\" print ( \"{.name!s}\" . format ( Person )) # field_name \u662f \u6574\u6570\u7d22\u5f15 names = [ \"\u5c0f\u7ea2\" , \"\u5c0f\u660e\" ] print ( \"{[1]!s}\" . format ( names )) # field_name \u662f \u5b57\u7b26\u4e32\u7d22\u5f15 from pandas import Series names = Series ({ \"name\" : \"\u5c0f\u660e\" }) print ( \"{[name]!s}\" . format ( names )) '\u5c0f\u660e' \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5176\u4e2d\uff0c <\u683c\u5f0f\u63a7\u5236\u6807\u8bb0> \u7528\u6765\u63a7\u5236\u53c2\u6570\u663e\u793a\u65f6\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u5982\u4e0b\uff1a format_spec ::= [[fill]align][sign][#][0][width][grouping_option][.precision][type] fill ::= <any character> align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit+ grouping_option ::= \"_\" | \",\" precision ::= digit+ type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\"| \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" \u586b\u5145\u5b57\u7b26 \uff1a\u5982\u679c\u6307\u5b9a\u4e86\u5bf9\u9f50\u9009\u9879\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u586b\u5145\u5b57\u7b26\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u683c. \u5bf9\u9f50\u9009\u9879 \uff1a\u9ed8\u8ba4\u53f3\u5bf9\u9f50\uff0c\u5404\u79cd\u5bf9\u9f50\u9009\u9879\u7684\u542b\u4e49\u5982\u4e0b\uff1a \u9009\u9879 \u610f\u4e49 '<' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5de6\u5bf9\u9f50\uff08\u8fd9\u662f\u5927\u591a\u6570\u5bf9\u8c61\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '>' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u53f3\u5bf9\u9f50\uff08\u8fd9\u662f\u6570\u5b57\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '=' \u5f3a\u5236\u5c06\u586b\u5145\u653e\u7f6e\u5728\u7b26\u53f7\uff08\u5982\u679c\u6709\uff09\u4e4b\u540e\u4f46\u5728\u6570\u5b57\u4e4b\u524d\u3002\u8fd9\u7528\u4e8e\u4ee5\u201c+000000120\u201d\u5f62\u5f0f\u6253\u5370\u5b57\u6bb5\u3002\u6b64\u5bf9\u9f50\u9009\u9879\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\u3002\u5f53'0'\u7d27\u63a5\u5728\u5b57\u6bb5\u5bbd\u5ea6\u4e4b\u524d\u65f6\uff0c\u5b83\u6210\u4e3a\u9ed8\u8ba4\u503c\u3002 '^' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5c45\u4e2d\u3002 sign \uff1a\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a \u9009\u9879 \u610f\u4e49 '+' \u8868\u793a\u6807\u5fd7\u5e94\u8be5\u7528\u4e8e\u6b63\u6570\u548c\u8d1f\u6570\u3002 '-' \u8868\u793a\u6807\u5fd7\u5e94\u4ec5\u7528\u4e8e\u8d1f\u6570\uff08\u8fd9\u662f\u9ed8\u8ba4\u884c\u4e3a\uff09\u3002 space \u8868\u793a\u5e94\u5728\u6b63\u6570\u4e0a\u4f7f\u7528\u524d\u5bfc\u7a7a\u683c\uff0c\u5728\u8d1f\u6570\u4e0a\u4f7f\u7528\u51cf\u53f7\u3002 # \uff1a\u4ec5\u9002\u7528\u4e8e\u6570\u5b57\u53c2\u6570\uff0c\u540c\u65f6\u4ec5\u9002\u7528\u4e8e2\u30018\u300116\u8fdb\u5236\u7684\u6570\u5b57\u3002\u4f1a\u5728\u8f93\u51fa\u7684\u6570\u5b57\u524d\u6dfb\u52a0 0b\u30010o\u30010x\u524d\u7f00\u3002 \u5bbd\u5ea6 \uff1a\u6307\u5b9a\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u3002 \u5343\u4f4d\u5206\u9694\u7b26 \uff1a\u53ea\u80fd\u4f7f\u7528 _ \u6216 , \u4f5c\u4e3a\u5343\u4f4d\u5206\u9694\u7b26\u3002 \u7cbe\u5ea6 \uff1a \u7c7b\u578b \uff1a\u8be5\u9009\u9879\u51b3\u5b9a\u4e86\u6570\u636e\u5e94\u8be5\u5982\u4f55\u5448\u73b0\u3002 \u53ef\u7528\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7c7b\u578b\uff1a Type Meaning s \u5b57\u7b26\u4e32\u683c\u5f0f\uff0c \u5b57\u7b26\u4e32\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c \u53ef\u7701\u7565 None \u540c s \u53ef\u7528\u7684\u6574\u6570\u8868\u793a\u7c7b\u578b\uff1a Type Meaning b \u8f93\u51fa\u4e3a 2 \u8fdb\u5236\u6574\u6570 c \u8f93\u51fa\u4e3a\u4e3a\u76f8\u5e94\u7684 unicode \u5b57\u7b26 d \u8f93\u51fa\u4e3a 10 \u8fdb\u5236\u6574\u6570 o \u8f93\u51fa\u4e3a 8 \u8fdb\u5236\u6574\u6570 x \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd X \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5927\u5199\u5b57\u6bcd n \u7c7b\u4f3c d , \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 None \u540c d \u53ef\u7528\u7684\u6d6e\u70b9\u6570\u548c\u5c0f\u6570\u503c\u8868\u793a\u7c7b\u578b\uff1a Type Meaning e \u6307\u6570\u8868\u793a\u6cd5\uff0c \u4f7f\u7528\u5b57\u6bcd e \u4ee5\u79d1\u5b66\u8bb0\u6570\u6cd5\u6253\u5370\u6570\u5b57\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 E \u7c7b\u4f3c e , \u4f7f\u7528\u5b57\u6bcd E f \u6d6e\u70b9\u6570\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 F \u6d6e\u70b9\u6570\uff0c \u540c f g \u4e00\u822c\u5f62\u5f0f\uff0c \u53d7 precision \u9009\u9879\u5f71\u54cd G \u7c7b\u4f3c g , \u5f53\u4f7f\u7528\u6307\u6570\u8868\u793a\u6cd5\u65f6\uff0c \u4f7f\u7528 E \u800c\u4e0d\u662f e n \u548c g \u76f8\u540c\uff0c \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 % \u767e\u5206\u6570\u8868\u793a None \u540c g # \u586b\u5145\u3001\u5bf9\u9f50\u3001\u7b26\u53f7\u3001\u5bbd\u5ea6\u3001\u5206\u7ec4\u9009\u9879\u3001\u7cbe\u5ea6 # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*^+20.2f} \" . format ( 120 ) '******+120.00*******' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001_\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \"{0:*^+20_.2f}\" . format ( 12000 ) '*****+12_000.00*****' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001,\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \" {0:*^+20,.2f} \" . format ( 12000 ) '*****+12,000.00*****' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*<+20.2f} \" . format ( - 120 ) '-120.00*************' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u8d1f\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*>-20.2f} \" . format ( - 120 ) '*************-120.00'","title":"format\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_6","text":"","title":"\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_7","text":"\u65b9\u6cd5 \u63cf\u8ff0 .isalnum if all characters in the string are alpha-numeric and there is at least one character .isalpha if all characters in the string are alphabetic and there is at least one character .isnumeric if all characters in the string are numeric and there is at least one character .isascii ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too . .isdecimal if all characters in the string are decimal and there is at least one character .isdigit if all characters in the string are digits and there is at least one character .isidentifier Use keyword.iskeyword() to test for reserved identifiers such as \"def\" and \"class\". .islower if all cased characters in the string are lowercase and there is at least one cased character .isupper if all cased characters in the string are uppercase and there is at least one cased character .isprintable if all of its characters are considered printable in repr() or if it is empty. .isspace if all characters in the string are whitespace and there is at least one character .istitle In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones. \u65b9\u6cd5 \u63cf\u8ff0 .startswith(prefix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 prefix \u5f00\u5934 .endswith(suffix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 suffix \u7ed3\u5c3e","title":"\u903b\u8f91\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_8","text":"\u65b9\u6cd5 \u63cf\u8ff0 .lower \u8fd4\u56de\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .upper \u8fd4\u56de\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .capitalize \u4f7f\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4f59\u5b57\u7b26\u5b57\u6bcd\u5c0f\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .swapcase \u5c06\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5c06\u5c0f\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5927\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .title \u6bcf\u4e2a\u5355\u8bcd\u90fd\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u8fd4\u56de\u526f\u672c\u3002","title":"\u5927\u5c0f\u5b57\u6bcd\u8f6c\u6362"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_9","text":"\u65b9\u6cd5 \u63cf\u8ff0 .split(sep=None, maxsplit=-1) \u4ece\u5de6\u5230\u53f3\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .rsplit(sep=None, maxsplit=-1) \u4ece\u53f3\u5230\u5de6\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .splitlines(keepends=False) \u4ee5\u56de\u8f66\u7b26\u6216\u6362\u884c\u7b26\u5206\u5272\u5b57\u7b26\u4e32 .partition(sep, /) \u4ece\u5de6\u5230\u53f3\u4ee5\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684 sep \u5206\u5272\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5305\u62ec3\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 \"123#456#789\" . split ( sep = \"#\" , maxsplit = 1 ) ['123', '456#789'] \"123#456#789\" . rsplit ( sep = \"#\" , maxsplit = 1 ) ['123#456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = False ) ['123', '456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = True ) ['123\\r\\n', '456\\r\\n', '789'] \"123#456#789\" . partition ( \"#\" ) ('123', '#', '456#789')","title":"\u62c6\u5206\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_10","text":"\"_\" . join ([ \"a\" , \"b\" , \"c\" ]) 'a_b_c'","title":"\u5408\u5e76\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_11","text":"\u65b9\u6cd5 \u63cf\u8ff0 .replace(old, new, count=-1) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32 old \u90fd\u66ff\u6362\u4e3a new \u3002 .strip(chars=None) \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\u5220\u9664\u3002 .lstrip(chars=None) \u8fd4\u56de\u5220\u9664\u524d\u5bfc\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .rstrip(chars=None) \u8fd4\u56de\u5220\u9664\u5c3e\u968f\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .expandtabs(tabsize=8) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5236\u8868\u7b26\u90fd\u4f7f\u7528 tabsize \u4e2a\u7a7a\u683c\u4ee3\u66ff\u3002 \" \\n abc \\t\\n\\r \" . strip () 'abc' \" \\n abc \\t\\n\\r \" . lstrip () 'abc\\t\\n\\r ' \" \\n abc \\t\\n\\r \" . rstrip () ' \\nabc' \" \\n abc \\t\\n\\r \" . expandtabs ( tabsize = 8 ) ' \\nabc \\n\\r '","title":"\u66ff\u6362\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_12","text":"\u65b9\u6cd5 \u63cf\u8ff0 .format \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .format_map \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .ljust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5de6\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .rjust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u53f3\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .center(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5c45\u4e2d\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .zfill(width) \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u957f\u5ea6\u4e0d\u591f\uff0c\u7528\u96f6\u4ece\u5de6\u8fb9\u586b\u5145\u3002 .format_map \u4e0e .format \u5728\u7528\u6cd5\u4e0a\u5927\u4f53\u4e00\u81f4\uff0c\u4f46\u6709\u4e00\u4e2a\u533a\u522b\uff1a # format_map \u548c format \u7684\u533a\u522b # \u5982\u679c\u8981\u4f7f\u7528\u5173\u952e\u5b57 format\u5fc5\u987b\u8fd9\u6837\u4f7f\u7528 \" {name} , {sex} \" . format ( name = \"Jack\" , sex = \"male\" ) # format_map \u53ef\u4ee5\u7528dict \" {name} , {sex} \" . format_map ({ \"name\" : \"Jack\" , \"sex\" : \"male\" }) 'Jack, male' print ( \"abc\" . ljust ( 10 , \"#\" )) print ( \"abc\" . rjust ( 10 , \"#\" )) print ( \"abc\" . center ( 10 , \"#\" )) print ( \"123\" . zfill ( 10 )) # \u975e\u6570\u5b57\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5 print ( \"abc\" . zfill ( 10 )) abc####### #######abc ###abc#### 0000000123 0000000abc","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_13","text":"\"abcAbc\" . count ( \"c\" , 0 , 6 ) 2","title":"\u7edf\u8ba1\u5b50\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.String.html#_14","text":".index \u4e0e .find \u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7 .index \u65b9\u6cd5\u82e5\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u4f1a\u629b\u51faValueError\uff0c\u800c .find \u4f1a\u8fd4\u56de -1 \u3002 \"abcAbc\" . index ( \"bc\" , 0 , 6 ) \"abcAbc\" . find ( \"bc\" , 0 , 6 ) 1 \"abcAbc\" . index ( \"bc\" , 0 , 2 ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-f8cead4644a3> in <module> ----> 1 \"abcAbc\".index(\"bc\", 0, 2) ValueError: substring not found \"abcAbc\" . find ( \"bc\" , 0 , 2 ) -1","title":"\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.22 \u5217\u8868\u7684\u65b9 \u6cd5 \u63cf \u8ff0 aList.append(obj) \u7b49\u540c\u4e8eaList[len(aList):len(aList)] = [obj] aList.clear() \u5220\u9664aList\u7684\u6240\u6709\u5143\u7d20 aList.count(obj) \u8fd4\u56deaList\u4e2d\u4e0eobj\u76f8\u7b49\u7684\u5143\u7d20\u4e2a\u6570 aList.copy() \u8fd4\u56deaList\u7684\u526f\u672c\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u662f\u6d45\u590d\u5236\uff0c\u5373\u4e0d\u4f1a\u590d\u5236\u5143\u7d20 aList.extend(sequence) \u7b49\u540c\u4e8eaList[len(aList):len(aList)] = sequence aList.index(obj) \u8fd4\u56deaList\u4e2d\u7b2c\u4e00\u4e2a\u4e0eobj\u76f8\u7b49\u7684\u5143\u7d20\u7684\u7d22\u5f15\uff1b\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5c31\u5f15\u53d1 ValueError\u5f02\u5e38 aList.insert(index, obj) \u5982\u679cindex >= 0\uff0c\u5c31\u7b49\u540c\u4e8eaList[index:index] = [obj]\uff1b\u5982\u679cindex < 0\uff0c\u5c31 \u5c06\u6307\u5b9a\u7684\u5bf9\u8c61\u52a0\u5165\u5230\u5217\u8868\u5f00\u5934 aList.pop([index]) \u5220\u9664\u5e76\u8fd4\u56de\u6307\u5b9a\u7d22\u5f15\uff08\u9ed8\u8ba4\u4e3a-1 )\u5904\u7684\u5143\u7d20 aList.remove(obj) \u7b49\u540c\u4e8edel aList[aList.index(obj)] aList.reverse \u5c31\u5730\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u6392\u5217\u5217\u8868\u7684\u5143\u7d20 aList.sort([cmp][,key][,reverse]) \u5c31\u5730\u5bf9aList\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff08\u7a33\u5b9a\u6392\u5e8f\uff09\u3002\u53ef\u901a\u8fc7\u63d0\u4f9b\u6bd4\u8f83\u51fd\u6570cmp\u3001\u952e\u51fd\u6570 key (\u521b\u5efa\u7528\u6237\u6392\u5e8f\u7684\u952e\uff09\u548c\u964d\u5e8f\u6807\u5fd7reverse (\u2014\u4e2a\u5e03\u5c14\u503c\uff09\u8fdb\u884c\u5b9a\u5236 list\u7684\u65b9\u6cd5 \u521b\u5efa\u4e00\u4e2alist # \u67e5\u770blist\u7684\u65b9\u6cd5\u3001\u5c5e\u6027 [ method for method in dir ( list ()) if not method . startswith ( \"_\" )] ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] \u4fee\u6539\u5143\u7d20\u7684\u503c \u4fee\u6539\u73b0\u6709list\u7684\u503c\uff0c\u901a\u8fc7\u7d22\u5f15\u3001\u5207\u7247\u6765\u5b8c\u6210\u3002 list_1 = [ 0 , 1 , 2 , 3 ] # \u4fee\u6539\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u7684\u503c list_1 [ 0 ] = \"item\" print ( list_1 ) ['item', 1, 2, 3] \u901a\u8fc7\u5207\u7247\u4fee\u6539\u67d0\u4e2a\u8fde\u7eed\u533a\u57df\u7684\u503c\uff0c\u5207\u7247\u7684\u957f\u5ea6\u548c\u7528\u4e8e\u8d4b\u503c\u7684\u5e8f\u5217\u957f\u5ea6\u53ef\u4ee5\u4e0d\u540c\u3002 list_1 = [ 0 , 1 , 2 , 3 ] list_1 [ 0 : 2 ] = [ \"item_1\" , \"item_2\" , \"item_3\" ] print ( list_1 ) ['item_1', 'item_2', 'item_3', 2, 3] \u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e append \u65b9\u6cd5\u6bcf\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 list_1 = [ 0 , 1 , 2 , 3 ] list_1 . append ( \"item\" ) print ( list_1 ) [0, 1, 2, 3, 'item'] \u6dfb\u52a0\u4efb\u610f\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e extend \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u4e2alist\u6765\u6269\u5145\u5f53\u524d\u7684list\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u7528 + \u62fc\u63a5list\uff0c\u4f46 extend \u65b9\u6cd5\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u5217\u8868\uff0c\u4e0d\u8fd4\u56de\u526f\u672c\u3002 list_1 = [ 0 , 1 , 2 , 3 ] list_2 = [ \"item_1\" , \"item_2\" , \"item_3\" ] list_1 + list_2 # \u6b64\u65f6 list_1 \u6ca1\u6709\u88ab\u4fee\u6539 print ( f \"Use + operator: { list_1 } \" ) list_1 . extend ( list_2 ) # \u6b64\u65f6list_1\u88ab\u4fee\u6539 print ( f \"Use extend method: { list_1 } \" ) Use + operator: [0, 1, 2, 3] Use extend method: [0, 1, 2, 3, 'item_1', 'item_2', 'item_3'] \u53ef\u4ee5\u770b\u51fa\uff0c\u4f7f\u7528 + \u62fc\u63a5list\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u663e\u7136\u62fc\u63a5\u7684\u6548\u7387\u56de\u6bd4 extend \u65b9\u6cd5\u7684\u6548\u7387\u4f4e\u3002 \u8fd8\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u6765\u6269\u5145list\uff0c\u50cf\u8fd9\u6837\uff1a list_1 = list ( range ( 4 )) list_2 = [ \"item_1\" , \"item_2\" , \"item_3\" ] # \u8fd9\u6837\u505a\u53ef\u8bfb\u6027\u4e0d\u9ad8 list_1 [ len ( list_1 ):] = list_2 print ( list_1 ) [0, 1, 2, 3, 'item_1', 'item_2', 'item_3'] \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20 insert \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5bf9\u8c61\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e list_1 = list ( range ( 4 )) print ( f \"Original list: { list_1 } \" ) list_1 . insert ( 0 , \"item\" ) print ( f \"New list: { list_1 } \" ) Original list: [0, 1, 2, 3] New list: ['item', 0, 1, 2, 3] \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e00\u4e2alist\u4f7f\u7528\u5207\u7247\uff0c\u5fc5\u5b9a\u4f1a\u5f97\u5230\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u4e00\u4e2alist\u5bf9\u5207\u7247\u8d4b\u503c\u3002 # \u8fd9\u6837\u867d\u7136\u5de7\u5999\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u6bd4\u4e0d\u4e0ainsert\u3002 list_1 = list ( range ( 4 )) print ( f \"Original list: { list_1 } \" ) list_1 [ 0 : 0 ] = [ \"item\" ] print ( f \"New list: { list_1 } \" ) Original list: [0, 1, 2, 3] New list: ['item', 0, 1, 2, 3] \u5220\u9664\\\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\uff08\u4efb\u610f\u4f4d\u7f6e\u7684\uff09\u5143\u7d20 \u6ce8\u610f\uff0cpop\u662flist\u4e2d\u552f\u4e00\u4e00\u4e2a\u4fee\u6539\u539f\u5217\u8868\uff0c\u5e76\u4e14\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5 list_2 = [ '0' , '00' , '000' ] list_2 . pop () '000' pop\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u8f93\u5165\u7d22\u5f15\u503c\uff0c\u6307\u5b9a\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e list_2 = [ '0' , '00' , '000' ] list_2 . pop ( 0 ) list_2 ['00', '000'] \u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5143\u7d20 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . remove ( 1 ) list_1 [2, 3, 1] \u53cd\u5e8f\u6392\u5e8f list_1 = [ 0 , 1 , 2 , 3 ] list_1 . reverse () list_1 [3, 2, 1, 0] \u6392\u5e8f \u65b9\u6cd5 sort \u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff1a key \u548c reverse \u3002\u5c06 key \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684**\u51fd\u6570\u3002\u7136\u800c\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u662f\u4f7f\u7528\u5b83\u6765\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u518d\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 reverse \uff0c\u53ea\u9700\u5c06\u5176\u6307\u5b9a\u4e3a True \u6216 False \uff0c\u4ee5\u6307\u51fa\u662f\u5426\u8981\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 ['add', 'acme', 'aerate', 'abalone', 'aardvark'] # \u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f list_3 . sort ( key = len , reverse = True ) list_3 ['aardvark', 'abalone', 'aerate', 'acme', 'add'] \u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . count ( 1 ) 2 \u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c list_1 = [ 1 , 2 , 3 , 1 ] list_1 . index ( 1 ) 0 \u6d45\u62f7\u8d1d\u5217\u8868 list_1 = [ 1 , 2 , 3 ] list_4 = list_1 list_1 [ 0 ] = \"modified\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_4\uff1a\" , list_4 ) list_1\uff1a ['modified', 2, 3] list_4\uff1a ['modified', 2, 3] # \u6d45\u62f7\u8d1d list_1 = [ 1 , 2 , [ 3 , 4 ]] list_5 = list_1 . copy () list_1 [ 0 ] = \"modified\" list_1 [ 2 ][ 0 ] = \"modified\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_5\uff1a\" , list_5 ) list_1\uff1a ['modified', 2, ['modified', 4]] list_5\uff1a [1, 2, ['modified', 4]] \u6e05\u7a7a\u5217\u8868 list_1 . clear () list_1 [] \u903b\u8f91\u8fd0\u7b97 print ([ 1 , 2 , 3 ] > [ 0 , 2 , 3 ]) print ([ 1 , 2 , 3 ] >= [ 1 , 2 , 3 ]) print ([ 1 , 2 , 3 ] == [ 1 , 2 , 3 ]) print ( any ([ 0 , 2 , 3 ])) print ( all ([ 0 , 2 , 3 ])) True True True True False","title":"2.6.List"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#list","text":"\u521b\u5efa\u4e00\u4e2alist # \u67e5\u770blist\u7684\u65b9\u6cd5\u3001\u5c5e\u6027 [ method for method in dir ( list ()) if not method . startswith ( \"_\" )] ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']","title":"list\u7684\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_1","text":"\u4fee\u6539\u73b0\u6709list\u7684\u503c\uff0c\u901a\u8fc7\u7d22\u5f15\u3001\u5207\u7247\u6765\u5b8c\u6210\u3002 list_1 = [ 0 , 1 , 2 , 3 ] # \u4fee\u6539\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u7684\u503c list_1 [ 0 ] = \"item\" print ( list_1 ) ['item', 1, 2, 3] \u901a\u8fc7\u5207\u7247\u4fee\u6539\u67d0\u4e2a\u8fde\u7eed\u533a\u57df\u7684\u503c\uff0c\u5207\u7247\u7684\u957f\u5ea6\u548c\u7528\u4e8e\u8d4b\u503c\u7684\u5e8f\u5217\u957f\u5ea6\u53ef\u4ee5\u4e0d\u540c\u3002 list_1 = [ 0 , 1 , 2 , 3 ] list_1 [ 0 : 2 ] = [ \"item_1\" , \"item_2\" , \"item_3\" ] print ( list_1 ) ['item_1', 'item_2', 'item_3', 2, 3]","title":"\u4fee\u6539\u5143\u7d20\u7684\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_2","text":"append \u65b9\u6cd5\u6bcf\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 list_1 = [ 0 , 1 , 2 , 3 ] list_1 . append ( \"item\" ) print ( list_1 ) [0, 1, 2, 3, 'item']","title":"\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_3","text":"extend \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u4e2alist\u6765\u6269\u5145\u5f53\u524d\u7684list\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u7528 + \u62fc\u63a5list\uff0c\u4f46 extend \u65b9\u6cd5\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u5217\u8868\uff0c\u4e0d\u8fd4\u56de\u526f\u672c\u3002 list_1 = [ 0 , 1 , 2 , 3 ] list_2 = [ \"item_1\" , \"item_2\" , \"item_3\" ] list_1 + list_2 # \u6b64\u65f6 list_1 \u6ca1\u6709\u88ab\u4fee\u6539 print ( f \"Use + operator: { list_1 } \" ) list_1 . extend ( list_2 ) # \u6b64\u65f6list_1\u88ab\u4fee\u6539 print ( f \"Use extend method: { list_1 } \" ) Use + operator: [0, 1, 2, 3] Use extend method: [0, 1, 2, 3, 'item_1', 'item_2', 'item_3'] \u53ef\u4ee5\u770b\u51fa\uff0c\u4f7f\u7528 + \u62fc\u63a5list\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u663e\u7136\u62fc\u63a5\u7684\u6548\u7387\u56de\u6bd4 extend \u65b9\u6cd5\u7684\u6548\u7387\u4f4e\u3002 \u8fd8\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u6765\u6269\u5145list\uff0c\u50cf\u8fd9\u6837\uff1a list_1 = list ( range ( 4 )) list_2 = [ \"item_1\" , \"item_2\" , \"item_3\" ] # \u8fd9\u6837\u505a\u53ef\u8bfb\u6027\u4e0d\u9ad8 list_1 [ len ( list_1 ):] = list_2 print ( list_1 ) [0, 1, 2, 3, 'item_1', 'item_2', 'item_3']","title":"\u6dfb\u52a0\u4efb\u610f\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_4","text":"insert \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5bf9\u8c61\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e list_1 = list ( range ( 4 )) print ( f \"Original list: { list_1 } \" ) list_1 . insert ( 0 , \"item\" ) print ( f \"New list: { list_1 } \" ) Original list: [0, 1, 2, 3] New list: ['item', 0, 1, 2, 3] \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e00\u4e2alist\u4f7f\u7528\u5207\u7247\uff0c\u5fc5\u5b9a\u4f1a\u5f97\u5230\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u4e00\u4e2alist\u5bf9\u5207\u7247\u8d4b\u503c\u3002 # \u8fd9\u6837\u867d\u7136\u5de7\u5999\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u6bd4\u4e0d\u4e0ainsert\u3002 list_1 = list ( range ( 4 )) print ( f \"Original list: { list_1 } \" ) list_1 [ 0 : 0 ] = [ \"item\" ] print ( f \"New list: { list_1 } \" ) Original list: [0, 1, 2, 3] New list: ['item', 0, 1, 2, 3]","title":"\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_5","text":"\u6ce8\u610f\uff0cpop\u662flist\u4e2d\u552f\u4e00\u4e00\u4e2a\u4fee\u6539\u539f\u5217\u8868\uff0c\u5e76\u4e14\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5 list_2 = [ '0' , '00' , '000' ] list_2 . pop () '000' pop\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u8f93\u5165\u7d22\u5f15\u503c\uff0c\u6307\u5b9a\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e list_2 = [ '0' , '00' , '000' ] list_2 . pop ( 0 ) list_2 ['00', '000']","title":"\u5220\u9664\\\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\uff08\u4efb\u610f\u4f4d\u7f6e\u7684\uff09\u5143\u7d20"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_6","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . remove ( 1 ) list_1 [2, 3, 1]","title":"\u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5143\u7d20"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_7","text":"list_1 = [ 0 , 1 , 2 , 3 ] list_1 . reverse () list_1 [3, 2, 1, 0]","title":"\u53cd\u5e8f\u6392\u5e8f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_8","text":"\u65b9\u6cd5 sort \u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff1a key \u548c reverse \u3002\u5c06 key \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684**\u51fd\u6570\u3002\u7136\u800c\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u662f\u4f7f\u7528\u5b83\u6765\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u518d\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 reverse \uff0c\u53ea\u9700\u5c06\u5176\u6307\u5b9a\u4e3a True \u6216 False \uff0c\u4ee5\u6307\u51fa\u662f\u5426\u8981\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 ['add', 'acme', 'aerate', 'abalone', 'aardvark'] # \u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f list_3 . sort ( key = len , reverse = True ) list_3 ['aardvark', 'abalone', 'aerate', 'acme', 'add']","title":"\u6392\u5e8f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_9","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . count ( 1 ) 2","title":"\u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_10","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . index ( 1 ) 0","title":"\u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_11","text":"list_1 = [ 1 , 2 , 3 ] list_4 = list_1 list_1 [ 0 ] = \"modified\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_4\uff1a\" , list_4 ) list_1\uff1a ['modified', 2, 3] list_4\uff1a ['modified', 2, 3] # \u6d45\u62f7\u8d1d list_1 = [ 1 , 2 , [ 3 , 4 ]] list_5 = list_1 . copy () list_1 [ 0 ] = \"modified\" list_1 [ 2 ][ 0 ] = \"modified\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_5\uff1a\" , list_5 ) list_1\uff1a ['modified', 2, ['modified', 4]] list_5\uff1a [1, 2, ['modified', 4]]","title":"\u6d45\u62f7\u8d1d\u5217\u8868"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_12","text":"list_1 . clear () list_1 []","title":"\u6e05\u7a7a\u5217\u8868"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.List.html#_13","text":"print ([ 1 , 2 , 3 ] > [ 0 , 2 , 3 ]) print ([ 1 , 2 , 3 ] >= [ 1 , 2 , 3 ]) print ([ 1 , 2 , 3 ] == [ 1 , 2 , 3 ]) print ( any ([ 0 , 2 , 3 ])) print ( all ([ 0 , 2 , 3 ])) True True True True False","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.Tuple.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.22 tuple \u662f\u4e00\u79cd\u4e00\u7ef4\u7684\u3001\u4e0d\u53ef\u53d8\u7684 Python \u5bf9\u8c61\u5e8f\u5217\uff0c\u5143\u7d20\u5199\u5728\u5c0f\u62ec\u53f7 () \u91cc\uff0c\u5143\u7d20\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u5176\u540d\u79f0\u6765\u81ea\u62c9\u4e01\u8bed\u4e2d\u4e0e\u500d\u6570\u6709\u5173\u7684\u5355\u8bcd\u7684\u540e\u7f00\uff1adouble, triple, quadpleple, quinpleple\u3002 \u4e0d\u53ef\u53d8\u662f\u6307 tuple \u5bf9\u8c61\u521b\u5efa\u4e4b\u540e\uff0c\u8be5 tuple \u5bf9\u8c61\u5df2\u5305\u542b\u7684\u5143\u7d20\u4e0d\u80fd\u88ab\u4fee\u6539\u6216\u5220\u9664\uff0c\u4e5f\u4e0d\u80fd\u6dfb\u52a0\u65b0\u5143\u7d20\u3002\u867d\u7136 tuple \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4f46\u5b83\u53ef\u4ee5\u5305\u542b\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e00\u4e2a tuple \u5bf9\u8c61\u5305\u542b\u4e00\u4e2a list \u5bf9\u8c61\u3002 \u4e0d\u53ef\u53d8\u7684 tuple \u6709\u4ec0\u4e48\u610f\u4e49\uff1f \u5bf9\u4e8e\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4e0d\u53ef\u53d8\u7684\u5143\u7ec4\u5bf9\u8c61\u6bd4\u53ef\u53d8\u5217\u8868\u5bf9\u8c61\u66f4\u6709\u6548\u6216\u66f4\u5b89\u5168\u3002\u521b\u5efa\u5143\u7ec4\u540e\uff0c\u53ea\u80fd\u5bf9\u5176\u8fdb\u884c\u8bbf\u95ee\uff0c\u4e0d\u5fc5\u62c5\u5fc3\u5176\u4e2d\u7684\u5143\u7d20\u88ab\u610f\u5916\u5730\u4fee\u6539\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u5143\u7ec4\u53ef\u4ee5\u53ef\u9760\u5730\u54c8\u5e0c\u4e3a\u67d0\u4e2a\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f5c\u4e3a\u6620\u5c04\u7c7b\u578b\u7684\u952e\u3002 \u9677\u9631\u2014\u20141\u4e2a\u5143\u7d20\u7684Tuple \u5b9a\u4e49\u4e2a\u4e00\u4e2aTuple\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aiterable\u5bf9\u8c61\u3002 tuple ( \"123\" ) ('1', '2', '3') \u5982\u679c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684Tuple\uff0c\u53ef\u4ee5\u901a\u8fc7tuple\u7c7b\u6765\u5b9a\u4e49\uff1a a = tuple () type ( a ) tuple \u6216\u8005\u7528 () \u5b9a\u4e49\uff1a a = () type ( a ) tuple \u4f46\u662f\u5982\u679c\u8981\u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u5c31\u8981\u6ce8\u610f\u4e86\u3002\u5982\u679c\u8fd9\u6837\u5b9a\u4e49\uff0c\u5219\u662f\u9519\u8bef\u7684\uff1a b = ( \"123\" ) type ( b ) str \u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\uff1a b = ( \"123\" ,) type ( b ) tuple \u6216\u8005\u8fd9\u6837\u5b9a\u4e49\uff1a b = tuple ([ \"123\" ]) type ( b ) tuple \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u56e0\u4e3a () \u5728 Python \u4e2d\u53ef\u4ee5\u8868\u793a\u8fd0\u7b97\u7b26\u7684 () \uff0c\u4e5f\u53ef\u4ee5\u8868\u793aTuple\u3002\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u6b67\u4e49\uff0c\u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0cPython\u89c4\u5b9a\u62ec\u53f7\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6309\u8fd0\u7b97\u7b26\u7684 () \u8fdb\u884c\u89e3\u6790\u3002 \u9677\u9631\u2014\u2014\u201c\u53ef\u53d8\u7684\u201dTuple \u524d\u9762\u8bf4\u8fc7\uff0cTuple\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6709\u65f6\u6211\u4eec\u53c8\u4f1a\u53d1\u73b0Tuple\u662f\u201c\u53ef\u53d8\u7684\u201d\u3002 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"\u539f\u59cb\u7684Tuple\uff1a\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"\u4fee\u6539\u540e\u7684Tuple\uff1a\" , c ) \u539f\u59cb\u7684Tuple\uff1a ('a', 'b', ['A', 'B']) \u4fee\u6539\u540e\u7684Tuple\uff1a ('a', 'b', ['X', 'Y']) \u524d\u9762\u8bf4\u8fc7tuple\u4e00\u65e6\u5b9a\u4e49\u540e\u5c31\u4e0d\u53ef\u53d8\uff0c\u90a3\u4e0a\u9762\u7684c\u600e\u4e48\u5c31\u6539\u53d8\u4e86\u5462\uff1f\u5176\u5b9e\uff0cc\u7684\u5143\u7d20\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662flist\u4e2d\u7684\u5143\u7d20\uff0ctuple\u4e00\u5f00\u59cb\u6307\u5411\u7684list\u5e76\u6ca1\u6709\u6539\u6210\u522b\u7684list\uff0c\u6240\u4ee5\uff0ctuple\u6240\u8c13\u7684\u201c\u4e0d\u53d8\u201d\u662f\u8bf4\uff0ctuple\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u6307\u5411\u6c38\u8fdc\u4e0d\u53d8\u3002\u5373\u6307\u5411 a \uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411 b \uff0c\u6307\u5411\u4e00\u4e2alist\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6307\u5411\u7684\u8fd9\u4e2alist\u672c\u8eab\u662f\u53ef\u53d8\u7684\uff01 \u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u7684tuple\uff0c\u90a3\u5c31\u5fc5\u987b\u4fdd\u8bc1tuple\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u4e5f\u4e0d\u80fd\u53d8\u3002 \u65b9\u6cd5 \u56e0\u4e3aTuple\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u6ca1\u6709\u7528\u4e8e\u4fee\u6539\u5217\u8868\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5Tuple\u5bf9\u8c61\u7684\u65b9\u6cd5\u5f88\u5c11\u3002 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) [ method for method in dir ( d ) if not method . startswith ( \"_\" )] ['count', 'index'] \u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 d . count ( 4 ) 2 \u5143\u7d20\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c d . index ( 4 ) 4","title":"2.7.Tuple"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.Tuple.html#1tuple","text":"\u5b9a\u4e49\u4e2a\u4e00\u4e2aTuple\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aiterable\u5bf9\u8c61\u3002 tuple ( \"123\" ) ('1', '2', '3') \u5982\u679c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684Tuple\uff0c\u53ef\u4ee5\u901a\u8fc7tuple\u7c7b\u6765\u5b9a\u4e49\uff1a a = tuple () type ( a ) tuple \u6216\u8005\u7528 () \u5b9a\u4e49\uff1a a = () type ( a ) tuple \u4f46\u662f\u5982\u679c\u8981\u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u5c31\u8981\u6ce8\u610f\u4e86\u3002\u5982\u679c\u8fd9\u6837\u5b9a\u4e49\uff0c\u5219\u662f\u9519\u8bef\u7684\uff1a b = ( \"123\" ) type ( b ) str \u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\uff1a b = ( \"123\" ,) type ( b ) tuple \u6216\u8005\u8fd9\u6837\u5b9a\u4e49\uff1a b = tuple ([ \"123\" ]) type ( b ) tuple \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u56e0\u4e3a () \u5728 Python \u4e2d\u53ef\u4ee5\u8868\u793a\u8fd0\u7b97\u7b26\u7684 () \uff0c\u4e5f\u53ef\u4ee5\u8868\u793aTuple\u3002\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u6b67\u4e49\uff0c\u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0cPython\u89c4\u5b9a\u62ec\u53f7\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6309\u8fd0\u7b97\u7b26\u7684 () \u8fdb\u884c\u89e3\u6790\u3002","title":"\u9677\u9631\u2014\u20141\u4e2a\u5143\u7d20\u7684Tuple"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.Tuple.html#tuple","text":"\u524d\u9762\u8bf4\u8fc7\uff0cTuple\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6709\u65f6\u6211\u4eec\u53c8\u4f1a\u53d1\u73b0Tuple\u662f\u201c\u53ef\u53d8\u7684\u201d\u3002 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"\u539f\u59cb\u7684Tuple\uff1a\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"\u4fee\u6539\u540e\u7684Tuple\uff1a\" , c ) \u539f\u59cb\u7684Tuple\uff1a ('a', 'b', ['A', 'B']) \u4fee\u6539\u540e\u7684Tuple\uff1a ('a', 'b', ['X', 'Y']) \u524d\u9762\u8bf4\u8fc7tuple\u4e00\u65e6\u5b9a\u4e49\u540e\u5c31\u4e0d\u53ef\u53d8\uff0c\u90a3\u4e0a\u9762\u7684c\u600e\u4e48\u5c31\u6539\u53d8\u4e86\u5462\uff1f\u5176\u5b9e\uff0cc\u7684\u5143\u7d20\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662flist\u4e2d\u7684\u5143\u7d20\uff0ctuple\u4e00\u5f00\u59cb\u6307\u5411\u7684list\u5e76\u6ca1\u6709\u6539\u6210\u522b\u7684list\uff0c\u6240\u4ee5\uff0ctuple\u6240\u8c13\u7684\u201c\u4e0d\u53d8\u201d\u662f\u8bf4\uff0ctuple\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u6307\u5411\u6c38\u8fdc\u4e0d\u53d8\u3002\u5373\u6307\u5411 a \uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411 b \uff0c\u6307\u5411\u4e00\u4e2alist\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6307\u5411\u7684\u8fd9\u4e2alist\u672c\u8eab\u662f\u53ef\u53d8\u7684\uff01 \u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u7684tuple\uff0c\u90a3\u5c31\u5fc5\u987b\u4fdd\u8bc1tuple\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u4e5f\u4e0d\u80fd\u53d8\u3002","title":"\u9677\u9631\u2014\u2014\u201c\u53ef\u53d8\u7684\u201dTuple"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.Tuple.html#_1","text":"\u56e0\u4e3aTuple\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u6ca1\u6709\u7528\u4e8e\u4fee\u6539\u5217\u8868\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5Tuple\u5bf9\u8c61\u7684\u65b9\u6cd5\u5f88\u5c11\u3002 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) [ method for method in dir ( d ) if not method . startswith ( \"_\" )] ['count', 'index']","title":"\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.Tuple.html#_2","text":"d . count ( 4 ) 2","title":"\u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.Tuple.html#_3","text":"d . index ( 4 ) 4","title":"\u5143\u7d20\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.06.21 \u6620\u5c04\uff08mapping\uff09\u662f\u901a\u8fc7\u540d\u79f0\u6765\u8bbf\u95ee\u5176\u5404\u4e2a\u503c\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b57\u5178\u662fPython\u4e2d\u552f\u4e00\u7684\u5185\u7f6e\u6620\u5c04\u7c7b\u578b\uff0c\u5176\u4e2d\u7684\u503c\u4e0d\u6309\u987a\u5e8f\u6392\u5217\uff0c\u800c\u662f\u5b58\u50a8\u5728\u952e\u4e0b\u3002\u952e\u53ef\u80fd\u662f\u6570\u3001\u5b57\u7b26\u4e32\u6216\u5143\u7ec4\u3002 \u521b\u5efadict \u5b57\u5178\u4ee5\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u65b9\u5f0f\u8868\u793a\uff1a phonebook = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } \u5b57\u5178\u7531\u952e\u53ca\u5176\u76f8\u5e94\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u79cd\u952e--\u503c\u5bf9\u79f0\u4e3a\u9879\uff08item\uff09\u3002\u6bcf\u4e2a\u952e\u4e0e\u5176\u503c\u4e4b\u95f4\u90fd\u7528\u5192\u53f7 : \u5206\u9694\uff0citem\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u800c\u6574\u4e2a\u5b57\u5178\u653e\u5728\u82b1\u62ec\u53f7\u5185\u3002\u7a7a\u5b57\u5178\uff08\u6ca1\u6709\u4efb\u4f55\u9879\uff09\u7528\u4e24\u4e2a\u82b1\u62ec\u53f7 {} \u8868\u793a\u3002 \u6ce8\u610f \u5728\u5b57\u5178\uff08\u4ee5\u53ca\u5176\u4ed6\u6620\u5c04\u7c7b\u578b\uff09\u4e2d\uff0c\u952e\u5fc5\u987b\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u800c\u5b57\u5178\u4e2d\u7684\u503c\u65e0\u9700\u5982\u6b64\u3002 \u53ef\u4f7f\u7528dict\u7c7b\u4ece\u5176\u4ed6\u6620\u5c04\uff08\u5982\u5176\u4ed6\u5b57\u5178\uff09\u6216\u952e\u2013\u503c\u5bf9\u5e8f\u5217\u521b\u5efa\u5b57\u5178\u3002 items = [( 'name' , 'Gumby' ), ( 'age' , 42 )] dict ( items ) {'name': 'Gumby', 'age': 42} \u8fd8\u53ef\u4f7f\u7528\u5173\u952e\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a dict ( name = 'Gumby' , age = 42 ) {'name': 'Gumby', 'age': 42} Dict\u7684\u65b9\u6cd5 \u5b57\u5178\u7684\u57fa\u672c\u884c\u4e3a\u5728\u5f88\u591a\u65b9\u9762\u90fd\u7c7b\u4f3c\u4e8e\u5e8f\u5217\u3002 len(d)\u8fd4\u56de\u5b57\u5178d\u5305\u542b\u7684\u9879\uff08\u952e--\u503c\u5bf9\uff09\u6570\u3002 d[k]\u8fd4\u56de\u4e0e\u952ek\u76f8\u5173\u8054\u7684\u503c\u3002 d[k] = v\u5c06\u503cv\u5173\u8054\u5230\u952ek\u3002 del d[k]\u5220\u9664\u952e\u4e3ak\u7684\u9879\u3002 k in d\u68c0\u67e5\u5b57\u5178d\u662f\u5426\u5305\u542b\u952e\u4e3ak\u7684\u9879\u3002 \u867d\u7136\u5b57\u5178\u548c\u5217\u8868\u6709\u591a\u4e2a\u76f8\u540c\u4e4b\u5904\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u4e0d\u540c\u4e4b\u5904\u3002 \u81ea\u52a8\u6dfb\u52a0\u3002 dict\u53ef\u4ee5\u7ed9\u4e0d\u5b58\u5728\u7684\u9879\u8d4b\u503c\uff0c\u5373\u662f\u5b57\u5178\u4e2d\u539f\u672c\u6ca1\u6709\u7684\u952e\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u8d4b\u503c\u3002\u800c\u5982\u679c\u4e0d\u4f7f\u7528append\u6216\u5176\u4ed6\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5c31\u4e0d\u80fd\u7ed9\u5217\u8868\u4e2d\u6ca1\u6709\u7684\u5143\u7d20\u8d4b\u503c\u3002 \u6210\u5458\u8d44\u683c\u3002 \u8868\u8fbe\u5f0fk in d (\u5176\u4e2dd\u662f\u4e00\u4e2a\u5b57\u5178\uff09\u67fb\u627e\u7684\u662f\u952e\u800c\u4e0d\u662f\u503c\uff1b\u800c\u8868\u8fbe\u5f0fv in 1 (\u5176\u4e2d1\u662f\u4e00\u4e2a\u5217\u8868\uff09\u67e5\u627e\u7684\u662f\u503c\u800c\u4e0d\u662f\u7d22\u5f15\u3002\u8fd9\u770b\u4f3c\u4e0d\u592a\u4e00\u81f4\uff0c\u4f46\u4f60\u4e60\u60ef\u540e\u5c31\u4f1a\u89c9\u5f97\u76f8\u5f53\u81ea\u7136\u3002\u6bd5\u7adf\u5982\u679c\u5b57\u5178\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u68c0\u67e5\u76f8\u5e94\u7684\u503c\u5c31\u5f88\u5bb9\u6613\u3002 clear \u5220\u9664\u6240\u6709\u7684\u5b57\u5178\u9879 \u8981\u6ce8\u610f\u7684\u662f\uff0cclear\u662f\u6e05\u9664\u4e86\u4e00\u4e2a\u5b57\u5178\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u89e3\u9664\u4e86\u540d\u79f0\u4e0e\u5b57\u5178\u5bf9\u8c61\u7684\u7ed1\u5b9a\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a a . clear () # \u53ef\u4ee5\u770b\u5230\uff0ca\u3001b\u90fd\u53d8\u6210\u4e86\u5b57\u5178 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {} b\u7684\u503c: {} copy \u6d45\u62f7\u8d1d a = { \"a\" : 1 , \"b\" : 2 , \"c\" :[ 1 , 2 ]} b = a . copy () b [ \"c\" ][ 0 ] = 10 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]} b\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]} fromkeys dict . fromkeys ( key , value ) \u65b9\u6cd5 fromkeys \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u5176\u4e2d\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u4e14\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u90fd\u662fNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u503c\uff0c dict . fromkeys ([ \"a\" , \"b\" ]) {'a': None, 'b': None} dict . fromkeys ([ \"a\" , \"b\" ], 10 ) {'a': 10, 'b': 10} get \u65b9\u6cd5 get \u4e3a\u8bbf\u95ee\u5b57\u5178\u9879\u63d0\u4f9b\u4e86\u5bbd\u677e\u7684\u73af\u5883\u3002\u901a\u5e38\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u8bbf\u95ee\u5b57\u5178\u4e2d\u6ca1\u6709\u7684\u9879\uff0c\u5c06\u5f15\u53d1\u9519\u8bef\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } try : a [ \"d\" ] except KeyError as e : print ( \"KeyError: \" , e ) KeyError: 'd' \u800c\u4f7f\u7528 get \u4e0d\u4f1a\u8fd9\u6837 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . get ( \"d\" ) # \u9ed8\u8ba4\u8fd4\u56deNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u503c a . get ( \"d\" , \"N/A\" ) 'N/A' items \u65b9\u6cd5 items \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5b57\u5178\u9879\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a (key, value) \u7684\u5f62\u5f0f\u3002\u5b57\u5178\u9879\u5728\u5217\u8868\u4e2d\u7684\u6392\u5217\u987a\u5e8f\u4e0d\u786e\u5b9a\u3002\u8fd4\u56de\u503c\u5c5e\u4e8e\u4e00\u79cd\u540d\u4e3a\u5b57\u5178\u89c6\u56fe\u7684\u7279\u6b8a\u7c7b\u578b\u3002\u5b57\u5178\u89c6\u56fe\u53ef\u7528\u4e8e\u8fed\u4ee3\u3002\u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u786e\u5b9a\u5176\u957f\u5ea6\u4ee5\u53ca\u5bf9\u5176\u6267\u884c\u6210\u5458\u8d44\u683c\u68c0\u67e5\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . items () dict_items([('a', 1), ('b', 2), ('c', 3)]) # dict_items\u7c7b\u578b type ( a . items ()) dict_items # \u8fed\u4ee3 for i in a . items (): print ( i ) ('a', 1) ('b', 2) ('c', 3) # \u8fed\u4ee3 for key , value in a . items (): print ( key , end = \" \" ) print ( value ) a 1 b 2 c 3 # \u68c0\u67e5\u6210\u5458\u8d44\u683c ( \"a\" , 1 ) in a . items () True keys \u548c values \u65b9\u6cd5 keys \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . keys () dict_keys(['a', 'b', 'c']) \u65b9\u6cd5 values \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a . values () dict_values([1, 2, 3]) pop \u65b9\u6cd5pop\u53ef\u7528\u4e8e\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e-\u503c\u5bf9\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a . pop ( \"a\" ) print ( \"b\u7684\u503c\" , b ) print ( \"a\u7684\u503c\" , a ) b\u7684\u503c 1 a\u7684\u503c {'b': 2, 'c': 3} popitem \u65b9\u6cd5 popitem \u7c7b\u4f3c\u4e8e list.pop \uff0c\u4f46 list.pop \u5f39\u51fa\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u800c popitem \u968f\u673a\u5730\u5f39\u51fa\u4e00\u4e2a\u5b57\u5178\u9879\uff0c\u56e0\u4e3a\u5b57\u5178\u9879\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6ca1\u6709\u201c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u201d\u7684\u6982\u5ff5\u3002\u5982\u679c\u4f60\u8981\u4ee5\u9ad8\u6548\u5730\u65b9\u5f0f \u9010\u4e2a \u5220\u9664\u5e76\u5904\u7406\u6240\u6709\u5b57\u5178\u9879\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u65e0\u9700\u5148\u83b7\u53d6\u952e\u5217\u8868\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . popitem () ('c', 3) a {'a': 1, 'b': 2} setdefault \u65b9\u6cd5 setdefault \u6709\u70b9\u50cfget\uff0c\u56e0\u4e3a\u5b83\u4e5f\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0csetdefault\u8fd8\u5728\u5b57\u5178\u4e0d\u5305\u542b\u6307\u5b9a\u7684\u952e\u65f6\uff0c\u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u6307\u5b9a\u7684\u952e-\u503c\u5bf9\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . setdefault ( \"a\" ) a a . setdefault ( \"d\" ) a {'a': 1, 'b': 2, 'c': 3, 'd': None} \u5982\u4f60\u6240\u89c1\uff0c\u6307\u5b9a\u7684\u952e\u4e0d\u5b58\u5728\u65f6\uff0csetdefault\u8fd4\u56de\u6307\u5b9a\u7684\u503c\u5e76\u76f8\u5e94\u5730\u66f4\u65b0\u5b57\u5178\u3002\u5982\u679c\u6307\u5b9a\u7684\u952e\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u5176\u503c\uff0c\u5e76\u4fdd\u6301\u5b57\u5178\u4e0d\u53d8\u3002\u4e0e get \u4e00\u6837\uff0c\u503c\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3aNone\u3002 update \u65b9\u6cd5update\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u9879\u6765\u66f4\u65b0\u53e6\u4e00\u4e2a\u5b57\u5178\u3002\u5bf9\u4e8e\u901a\u8fc7\u53c2\u6570\u63d0\u4f9b\u7684\u5b57\u5178\uff0c\u5c06\u5176\u9879\u6dfb\u52a0\u5230\u5f53\u524d\u5b57\u5178\u4e2d\u3002\u5982\u679c\u5f53\u524d\u5b57\u5178\u5305\u542b\u952e\u76f8\u540c\u7684\u9879\uff0c\u5c31\u66ff\u6362\u5b83\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . update ({ \"d\" : 4 }) a {'a': 1, 'b': 2, 'c': 3, 'd': 4} \u53ef\u50cf\u8c03\u7528\u672c\u7ae0\u524d\u9762\u8ba8\u8bba\u7684\u51fd\u6570dict\uff08\u7c7b\u578b\u6784\u9020\u51fd\u6570\uff09\u90a3\u6837\u8c03\u7528\u65b9\u6cd5update\u3002\u8fd9\u610f\u5473\u7740\u8c03\u7528update\u65f6\uff0c\u53ef\u5411\u5b83\u63d0\u4f9b\u4e00\u4e2a\u6620\u5c04\u3001\u4e00\u4e2a\u7531\u952e-\u503c\u5bf9\u7ec4\u6210\u7684\u5e8f\u5217\uff08\u6216\u5176\u4ed6\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 a . update ( zip ([ \"e\" , \"f\" ],[ 5 , 6 ])) a {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}","title":"2.8.Dict"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#dict","text":"\u5b57\u5178\u4ee5\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u65b9\u5f0f\u8868\u793a\uff1a phonebook = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } \u5b57\u5178\u7531\u952e\u53ca\u5176\u76f8\u5e94\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u79cd\u952e--\u503c\u5bf9\u79f0\u4e3a\u9879\uff08item\uff09\u3002\u6bcf\u4e2a\u952e\u4e0e\u5176\u503c\u4e4b\u95f4\u90fd\u7528\u5192\u53f7 : \u5206\u9694\uff0citem\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u800c\u6574\u4e2a\u5b57\u5178\u653e\u5728\u82b1\u62ec\u53f7\u5185\u3002\u7a7a\u5b57\u5178\uff08\u6ca1\u6709\u4efb\u4f55\u9879\uff09\u7528\u4e24\u4e2a\u82b1\u62ec\u53f7 {} \u8868\u793a\u3002 \u6ce8\u610f \u5728\u5b57\u5178\uff08\u4ee5\u53ca\u5176\u4ed6\u6620\u5c04\u7c7b\u578b\uff09\u4e2d\uff0c\u952e\u5fc5\u987b\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u800c\u5b57\u5178\u4e2d\u7684\u503c\u65e0\u9700\u5982\u6b64\u3002 \u53ef\u4f7f\u7528dict\u7c7b\u4ece\u5176\u4ed6\u6620\u5c04\uff08\u5982\u5176\u4ed6\u5b57\u5178\uff09\u6216\u952e\u2013\u503c\u5bf9\u5e8f\u5217\u521b\u5efa\u5b57\u5178\u3002 items = [( 'name' , 'Gumby' ), ( 'age' , 42 )] dict ( items ) {'name': 'Gumby', 'age': 42} \u8fd8\u53ef\u4f7f\u7528\u5173\u952e\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a dict ( name = 'Gumby' , age = 42 ) {'name': 'Gumby', 'age': 42}","title":"\u521b\u5efadict"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#dict_1","text":"\u5b57\u5178\u7684\u57fa\u672c\u884c\u4e3a\u5728\u5f88\u591a\u65b9\u9762\u90fd\u7c7b\u4f3c\u4e8e\u5e8f\u5217\u3002 len(d)\u8fd4\u56de\u5b57\u5178d\u5305\u542b\u7684\u9879\uff08\u952e--\u503c\u5bf9\uff09\u6570\u3002 d[k]\u8fd4\u56de\u4e0e\u952ek\u76f8\u5173\u8054\u7684\u503c\u3002 d[k] = v\u5c06\u503cv\u5173\u8054\u5230\u952ek\u3002 del d[k]\u5220\u9664\u952e\u4e3ak\u7684\u9879\u3002 k in d\u68c0\u67e5\u5b57\u5178d\u662f\u5426\u5305\u542b\u952e\u4e3ak\u7684\u9879\u3002 \u867d\u7136\u5b57\u5178\u548c\u5217\u8868\u6709\u591a\u4e2a\u76f8\u540c\u4e4b\u5904\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u4e0d\u540c\u4e4b\u5904\u3002 \u81ea\u52a8\u6dfb\u52a0\u3002 dict\u53ef\u4ee5\u7ed9\u4e0d\u5b58\u5728\u7684\u9879\u8d4b\u503c\uff0c\u5373\u662f\u5b57\u5178\u4e2d\u539f\u672c\u6ca1\u6709\u7684\u952e\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u8d4b\u503c\u3002\u800c\u5982\u679c\u4e0d\u4f7f\u7528append\u6216\u5176\u4ed6\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5c31\u4e0d\u80fd\u7ed9\u5217\u8868\u4e2d\u6ca1\u6709\u7684\u5143\u7d20\u8d4b\u503c\u3002 \u6210\u5458\u8d44\u683c\u3002 \u8868\u8fbe\u5f0fk in d (\u5176\u4e2dd\u662f\u4e00\u4e2a\u5b57\u5178\uff09\u67fb\u627e\u7684\u662f\u952e\u800c\u4e0d\u662f\u503c\uff1b\u800c\u8868\u8fbe\u5f0fv in 1 (\u5176\u4e2d1\u662f\u4e00\u4e2a\u5217\u8868\uff09\u67e5\u627e\u7684\u662f\u503c\u800c\u4e0d\u662f\u7d22\u5f15\u3002\u8fd9\u770b\u4f3c\u4e0d\u592a\u4e00\u81f4\uff0c\u4f46\u4f60\u4e60\u60ef\u540e\u5c31\u4f1a\u89c9\u5f97\u76f8\u5f53\u81ea\u7136\u3002\u6bd5\u7adf\u5982\u679c\u5b57\u5178\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u68c0\u67e5\u76f8\u5e94\u7684\u503c\u5c31\u5f88\u5bb9\u6613\u3002","title":"Dict\u7684\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#clear","text":"\u8981\u6ce8\u610f\u7684\u662f\uff0cclear\u662f\u6e05\u9664\u4e86\u4e00\u4e2a\u5b57\u5178\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u89e3\u9664\u4e86\u540d\u79f0\u4e0e\u5b57\u5178\u5bf9\u8c61\u7684\u7ed1\u5b9a\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a a . clear () # \u53ef\u4ee5\u770b\u5230\uff0ca\u3001b\u90fd\u53d8\u6210\u4e86\u5b57\u5178 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {} b\u7684\u503c: {}","title":"clear\u5220\u9664\u6240\u6709\u7684\u5b57\u5178\u9879"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#copy","text":"a = { \"a\" : 1 , \"b\" : 2 , \"c\" :[ 1 , 2 ]} b = a . copy () b [ \"c\" ][ 0 ] = 10 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]} b\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]}","title":"copy\u6d45\u62f7\u8d1d"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#fromkeys","text":"dict . fromkeys ( key , value ) \u65b9\u6cd5 fromkeys \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u5176\u4e2d\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u4e14\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u90fd\u662fNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u503c\uff0c dict . fromkeys ([ \"a\" , \"b\" ]) {'a': None, 'b': None} dict . fromkeys ([ \"a\" , \"b\" ], 10 ) {'a': 10, 'b': 10}","title":"fromkeys"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#get","text":"\u65b9\u6cd5 get \u4e3a\u8bbf\u95ee\u5b57\u5178\u9879\u63d0\u4f9b\u4e86\u5bbd\u677e\u7684\u73af\u5883\u3002\u901a\u5e38\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u8bbf\u95ee\u5b57\u5178\u4e2d\u6ca1\u6709\u7684\u9879\uff0c\u5c06\u5f15\u53d1\u9519\u8bef\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } try : a [ \"d\" ] except KeyError as e : print ( \"KeyError: \" , e ) KeyError: 'd' \u800c\u4f7f\u7528 get \u4e0d\u4f1a\u8fd9\u6837 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . get ( \"d\" ) # \u9ed8\u8ba4\u8fd4\u56deNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u503c a . get ( \"d\" , \"N/A\" ) 'N/A'","title":"get"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#items","text":"\u65b9\u6cd5 items \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5b57\u5178\u9879\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a (key, value) \u7684\u5f62\u5f0f\u3002\u5b57\u5178\u9879\u5728\u5217\u8868\u4e2d\u7684\u6392\u5217\u987a\u5e8f\u4e0d\u786e\u5b9a\u3002\u8fd4\u56de\u503c\u5c5e\u4e8e\u4e00\u79cd\u540d\u4e3a\u5b57\u5178\u89c6\u56fe\u7684\u7279\u6b8a\u7c7b\u578b\u3002\u5b57\u5178\u89c6\u56fe\u53ef\u7528\u4e8e\u8fed\u4ee3\u3002\u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u786e\u5b9a\u5176\u957f\u5ea6\u4ee5\u53ca\u5bf9\u5176\u6267\u884c\u6210\u5458\u8d44\u683c\u68c0\u67e5\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . items () dict_items([('a', 1), ('b', 2), ('c', 3)]) # dict_items\u7c7b\u578b type ( a . items ()) dict_items # \u8fed\u4ee3 for i in a . items (): print ( i ) ('a', 1) ('b', 2) ('c', 3) # \u8fed\u4ee3 for key , value in a . items (): print ( key , end = \" \" ) print ( value ) a 1 b 2 c 3 # \u68c0\u67e5\u6210\u5458\u8d44\u683c ( \"a\" , 1 ) in a . items () True","title":"items"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#keysvalues","text":"\u65b9\u6cd5 keys \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . keys () dict_keys(['a', 'b', 'c']) \u65b9\u6cd5 values \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a . values () dict_values([1, 2, 3])","title":"keys\u548cvalues"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#pop","text":"\u65b9\u6cd5pop\u53ef\u7528\u4e8e\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e-\u503c\u5bf9\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a . pop ( \"a\" ) print ( \"b\u7684\u503c\" , b ) print ( \"a\u7684\u503c\" , a ) b\u7684\u503c 1 a\u7684\u503c {'b': 2, 'c': 3}","title":"pop"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#popitem","text":"\u65b9\u6cd5 popitem \u7c7b\u4f3c\u4e8e list.pop \uff0c\u4f46 list.pop \u5f39\u51fa\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u800c popitem \u968f\u673a\u5730\u5f39\u51fa\u4e00\u4e2a\u5b57\u5178\u9879\uff0c\u56e0\u4e3a\u5b57\u5178\u9879\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6ca1\u6709\u201c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u201d\u7684\u6982\u5ff5\u3002\u5982\u679c\u4f60\u8981\u4ee5\u9ad8\u6548\u5730\u65b9\u5f0f \u9010\u4e2a \u5220\u9664\u5e76\u5904\u7406\u6240\u6709\u5b57\u5178\u9879\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u65e0\u9700\u5148\u83b7\u53d6\u952e\u5217\u8868\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . popitem () ('c', 3) a {'a': 1, 'b': 2}","title":"popitem"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#setdefault","text":"\u65b9\u6cd5 setdefault \u6709\u70b9\u50cfget\uff0c\u56e0\u4e3a\u5b83\u4e5f\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0csetdefault\u8fd8\u5728\u5b57\u5178\u4e0d\u5305\u542b\u6307\u5b9a\u7684\u952e\u65f6\uff0c\u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u6307\u5b9a\u7684\u952e-\u503c\u5bf9\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . setdefault ( \"a\" ) a a . setdefault ( \"d\" ) a {'a': 1, 'b': 2, 'c': 3, 'd': None} \u5982\u4f60\u6240\u89c1\uff0c\u6307\u5b9a\u7684\u952e\u4e0d\u5b58\u5728\u65f6\uff0csetdefault\u8fd4\u56de\u6307\u5b9a\u7684\u503c\u5e76\u76f8\u5e94\u5730\u66f4\u65b0\u5b57\u5178\u3002\u5982\u679c\u6307\u5b9a\u7684\u952e\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u5176\u503c\uff0c\u5e76\u4fdd\u6301\u5b57\u5178\u4e0d\u53d8\u3002\u4e0e get \u4e00\u6837\uff0c\u503c\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3aNone\u3002","title":"setdefault"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.Dict.html#update","text":"\u65b9\u6cd5update\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u9879\u6765\u66f4\u65b0\u53e6\u4e00\u4e2a\u5b57\u5178\u3002\u5bf9\u4e8e\u901a\u8fc7\u53c2\u6570\u63d0\u4f9b\u7684\u5b57\u5178\uff0c\u5c06\u5176\u9879\u6dfb\u52a0\u5230\u5f53\u524d\u5b57\u5178\u4e2d\u3002\u5982\u679c\u5f53\u524d\u5b57\u5178\u5305\u542b\u952e\u76f8\u540c\u7684\u9879\uff0c\u5c31\u66ff\u6362\u5b83\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . update ({ \"d\" : 4 }) a {'a': 1, 'b': 2, 'c': 3, 'd': 4} \u53ef\u50cf\u8c03\u7528\u672c\u7ae0\u524d\u9762\u8ba8\u8bba\u7684\u51fd\u6570dict\uff08\u7c7b\u578b\u6784\u9020\u51fd\u6570\uff09\u90a3\u6837\u8c03\u7528\u65b9\u6cd5update\u3002\u8fd9\u610f\u5473\u7740\u8c03\u7528update\u65f6\uff0c\u53ef\u5411\u5b83\u63d0\u4f9b\u4e00\u4e2a\u6620\u5c04\u3001\u4e00\u4e2a\u7531\u952e-\u503c\u5bf9\u7ec4\u6210\u7684\u5e8f\u5217\uff08\u6216\u5176\u4ed6\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 a . update ( zip ([ \"e\" , \"f\" ],[ 5 , 6 ])) a {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}","title":"update"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.06.24 import pprint Python\u4ee5\u7b80\u6d01\u8457\u79f0\uff0cPython\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53ef\u4ee5\u8ba9\u6211\u4eec\u5f88\u5bb9\u6613\u5199\u51fa\u7b80\u6d01\u4ee3\u7801\u7684\u8bed\u6cd5\u3002 \u63a8\u5bfc\u5f0f Comprehensions\u8bd1\u4e3a\u63a8\u5bfc\u5f0f\uff0c\u6216\u8005\u751f\u6210\u5f0f\uff0c\u8fd9\u662fPython\u72ec\u6709\u7684\u7279\u6027\u3002\u63a8\u5bfc\u5f0f\u662f\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\u6784\u5efa\u53e6\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u7684\u7ed3\u6784\u4f53\u3002Python\u5171\u6709\u4e09\u79cd\u63a8\u5bfc\u5f0f\uff1a List Comprehensions Dict Comprehensions Set Comprehensions \u5217\u8868\u63a8\u5bfc\u5f0f List Comprehensions \u662f\u7528\u6765\u521b\u5efalist\u7684\u63a8\u5bfc\u5f0f\u3002 \u8fd0\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c \u53ef\u4ee5\u5199\u51fa\u975e\u5e38\u7b80\u6d01\u7684\u4ee3\u7801 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8981\u751f\u6210list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u53ef\u4ee5\u7528 list(range(1, 11)) \uff1a list ( range ( 1 , 11 )) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u4f46\u5982\u679c\u8981\u751f\u6210 [1x1, 2x2, 3x3, ..., 10x10] \u600e\u4e48\u505a\uff1f\u65b9\u6cd5\u4e00\u662f\u5faa\u73af\uff1a L = [] for x in range ( 1 , 11 ): L . append ( x * x ) pprint . pprint ( L ) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u4f46\u662f\u5faa\u73af\u592a\u7e41\u7410\uff0c\u800c\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u53ef\u4ee5\u7528\u4e00\u884c\u4ee3\u7801\u4ee3\u66ff\u5faa\u73af\u751f\u6210\u4e0a\u9762\u7684list\uff1a [ x * x for x in range ( 1 , 11 )] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u5199\u5217\u8868\u63a8\u5bfc\u5f0f\u65f6\uff0c\u628a \u8981\u751f\u6210\u7684\u5143\u7d20 x * x \u653e\u5230\u524d\u9762 \uff0c\u540e\u9762\u8ddf for \u5faa\u73af\uff0c\u5c31\u53ef\u4ee5\u628alist\u521b\u5efa\u51fa\u6765\u3002 for\u5faa\u73af\u540e\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e0aif\u5224\u65ad\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7b5b\u9009\u51fa\u4ec5\u5076\u6570\u7684\u5e73\u65b9\uff1a [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [4, 16, 36, 64, 100] \u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e24\u5c42\u5faa\u73af\uff0c\u53ef\u4ee5\u751f\u6210\u5168\u6392\u5217\uff1a [ m + n for m in 'ABC' for n in 'XYZ' ] ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] \u4e09\u5c42\u548c\u4e09\u5c42\u4ee5\u4e0a\u7684\u5faa\u73af\u5c31\u5f88\u5c11\u7528\u5230\u4e86\u3002 for \u5faa\u73af\u5176\u5b9e\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u4e2a\u751a\u81f3\u591a\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982 dict \u7684 items() \u53ef\u4ee5\u540c\u65f6\u8fed\u4ee3key\u548cvalue\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } for k , v in d . items (): print ( k , '=' , v ) x = A y = B z = C \u56e0\u6b64\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u6765\u751f\u6210list\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } [ k + '=' + v for k , v in d . items ()] ['x=A', 'y=B', 'z=C'] \u5b57\u5178\u63a8\u5bfc\u5f0f \u5b57\u5178\u63a8\u5bfc\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u7c7b\u4f3c\u7684\uff1a { key : value for key , value in enumerate ( range ( 4 ))} {0: 0, 1: 1, 2: 2, 3: 3} \u96c6\u5408\u63a8\u5bfc\u5f0f { value for value in range ( 4 )} {0, 1, 2, 3} \u5e8f\u5217\u89e3\u5305 x , y , z = ( 1 , 2 , 3 ) print ( x , y , z ) x , y = y , x print ( x , y ) 1 2 3 2 1 \u8981\u89e3\u5305\u7684\u5e8f\u5217\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u4e0e\u4f60\u5728\u7b49\u53f7\u5de6\u8fb9\u5217\u51fa\u7684\u76ee\u6807\u4e2a\u6570\u76f8\u540c\uff0c\u5426\u5219Python\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 try : x , y = ( 1 , 2 , 3 ) except ValueError as e : print ( e ) try : x , y , z = ( 1 , 2 ) except ValueError as e : print ( e ) too many values to unpack (expected 2) not enough values to unpack (expected 3, got 2) \u53ef\u4f7f\u7528\u661f\u53f7\u8fd0\u7b97\u7b26\uff08 * \uff09\u6765\u6536\u96c6\u591a\u4f59\u7684\u503c\uff0c\u8fd9\u6837\u65e0\u9700\u786e\u4fdd\u503c\u548c\u53d8\u91cf\u7684\u4e2a\u6570\u76f8\u540c\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a x , * y = ( 1 , 2 , 3 ) print ( x , y ) x , * y , z = ( 1 , 2 , 3 , 4 ) print ( x , z ) 1 [2, 3] 1 4 \u94fe\u5f0f\u8d4b\u503c \u94fe\u5f0f\u8d4b\u503c\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u4e8e\u5c06\u591a\u4e2a\u53d8\u91cf\u5173\u8054\u5230\u540c\u4e00\u4e2a\u503c\u3002 x = y = 1 print ( x , y ) 1 1 \u4e0a\u8ff0\u4ee3\u7801\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\uff1a y = 1 x = y \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e24\u6761\u8bed\u53e5\u53ef\u80fd\u4e0e\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u7b49\u4ef7\uff1a x = somefunction () y = somefunction () if/else\u4e09\u5143\u8868\u8fbe\u5f0f a = 2 a if a > 0 else 1 2","title":"2.9.\u7b80\u6d01\u7684Python"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_1","text":"Comprehensions\u8bd1\u4e3a\u63a8\u5bfc\u5f0f\uff0c\u6216\u8005\u751f\u6210\u5f0f\uff0c\u8fd9\u662fPython\u72ec\u6709\u7684\u7279\u6027\u3002\u63a8\u5bfc\u5f0f\u662f\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\u6784\u5efa\u53e6\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u7684\u7ed3\u6784\u4f53\u3002Python\u5171\u6709\u4e09\u79cd\u63a8\u5bfc\u5f0f\uff1a List Comprehensions Dict Comprehensions Set Comprehensions","title":"\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_2","text":"List Comprehensions \u662f\u7528\u6765\u521b\u5efalist\u7684\u63a8\u5bfc\u5f0f\u3002 \u8fd0\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c \u53ef\u4ee5\u5199\u51fa\u975e\u5e38\u7b80\u6d01\u7684\u4ee3\u7801 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8981\u751f\u6210list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u53ef\u4ee5\u7528 list(range(1, 11)) \uff1a list ( range ( 1 , 11 )) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u4f46\u5982\u679c\u8981\u751f\u6210 [1x1, 2x2, 3x3, ..., 10x10] \u600e\u4e48\u505a\uff1f\u65b9\u6cd5\u4e00\u662f\u5faa\u73af\uff1a L = [] for x in range ( 1 , 11 ): L . append ( x * x ) pprint . pprint ( L ) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u4f46\u662f\u5faa\u73af\u592a\u7e41\u7410\uff0c\u800c\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u53ef\u4ee5\u7528\u4e00\u884c\u4ee3\u7801\u4ee3\u66ff\u5faa\u73af\u751f\u6210\u4e0a\u9762\u7684list\uff1a [ x * x for x in range ( 1 , 11 )] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u5199\u5217\u8868\u63a8\u5bfc\u5f0f\u65f6\uff0c\u628a \u8981\u751f\u6210\u7684\u5143\u7d20 x * x \u653e\u5230\u524d\u9762 \uff0c\u540e\u9762\u8ddf for \u5faa\u73af\uff0c\u5c31\u53ef\u4ee5\u628alist\u521b\u5efa\u51fa\u6765\u3002 for\u5faa\u73af\u540e\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e0aif\u5224\u65ad\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7b5b\u9009\u51fa\u4ec5\u5076\u6570\u7684\u5e73\u65b9\uff1a [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [4, 16, 36, 64, 100] \u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e24\u5c42\u5faa\u73af\uff0c\u53ef\u4ee5\u751f\u6210\u5168\u6392\u5217\uff1a [ m + n for m in 'ABC' for n in 'XYZ' ] ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] \u4e09\u5c42\u548c\u4e09\u5c42\u4ee5\u4e0a\u7684\u5faa\u73af\u5c31\u5f88\u5c11\u7528\u5230\u4e86\u3002 for \u5faa\u73af\u5176\u5b9e\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u4e2a\u751a\u81f3\u591a\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982 dict \u7684 items() \u53ef\u4ee5\u540c\u65f6\u8fed\u4ee3key\u548cvalue\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } for k , v in d . items (): print ( k , '=' , v ) x = A y = B z = C \u56e0\u6b64\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u6765\u751f\u6210list\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } [ k + '=' + v for k , v in d . items ()] ['x=A', 'y=B', 'z=C']","title":"\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_3","text":"\u5b57\u5178\u63a8\u5bfc\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u7c7b\u4f3c\u7684\uff1a { key : value for key , value in enumerate ( range ( 4 ))} {0: 0, 1: 1, 2: 2, 3: 3}","title":"\u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_4","text":"{ value for value in range ( 4 )} {0, 1, 2, 3}","title":"\u96c6\u5408\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_5","text":"x , y , z = ( 1 , 2 , 3 ) print ( x , y , z ) x , y = y , x print ( x , y ) 1 2 3 2 1 \u8981\u89e3\u5305\u7684\u5e8f\u5217\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u4e0e\u4f60\u5728\u7b49\u53f7\u5de6\u8fb9\u5217\u51fa\u7684\u76ee\u6807\u4e2a\u6570\u76f8\u540c\uff0c\u5426\u5219Python\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 try : x , y = ( 1 , 2 , 3 ) except ValueError as e : print ( e ) try : x , y , z = ( 1 , 2 ) except ValueError as e : print ( e ) too many values to unpack (expected 2) not enough values to unpack (expected 3, got 2) \u53ef\u4f7f\u7528\u661f\u53f7\u8fd0\u7b97\u7b26\uff08 * \uff09\u6765\u6536\u96c6\u591a\u4f59\u7684\u503c\uff0c\u8fd9\u6837\u65e0\u9700\u786e\u4fdd\u503c\u548c\u53d8\u91cf\u7684\u4e2a\u6570\u76f8\u540c\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a x , * y = ( 1 , 2 , 3 ) print ( x , y ) x , * y , z = ( 1 , 2 , 3 , 4 ) print ( x , z ) 1 [2, 3] 1 4","title":"\u5e8f\u5217\u89e3\u5305"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#_6","text":"\u94fe\u5f0f\u8d4b\u503c\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u4e8e\u5c06\u591a\u4e2a\u53d8\u91cf\u5173\u8054\u5230\u540c\u4e00\u4e2a\u503c\u3002 x = y = 1 print ( x , y ) 1 1 \u4e0a\u8ff0\u4ee3\u7801\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\uff1a y = 1 x = y \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e24\u6761\u8bed\u53e5\u53ef\u80fd\u4e0e\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u7b49\u4ef7\uff1a x = somefunction () y = somefunction ()","title":"\u94fe\u5f0f\u8d4b\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E7%AE%80%E6%B4%81%E7%9A%84Python.html#ifelse","text":"a = 2 a if a > 0 else 1 2","title":"if/else\u4e09\u5143\u8868\u8fbe\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html","text":"\u5f02\u5e38\u5904\u7406\u673a\u5236 \u5f02\u5e38\u5904\u7406\u65e0\u5916\u4e4e\u51e0\u4ef6\u4e8b: \u65ad\u8a00\uff08assert\uff09 \u629b\u9519\uff08raise\uff09 \u68c0\u67e5\uff08try\uff09 \u6355\u83b7\uff08except\uff09 \u5904\u7406\uff08except, else, finally\uff09 \u5f02\u5e38\u5373\u662f\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u4f1a\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\uff0c\u5f71\u54cd\u4e86\u7a0b\u5e8f\u7684\u6b63\u5e38\u6267\u884c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728Python\u65e0\u6cd5\u6b63\u5e38\u5904\u7406\u7a0b\u5e8f\u65f6\u5c31\u4f1a\u53d1\u751f\u4e00\u4e2a\u5f02\u5e38\u3002\u5f53Python\u811a\u672c\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u5f02\u5e38\u4f1a\u4ece\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e\u5411\u7a0b\u5e8f\u4e0a\u5c42\u4f20\u64ad\u3002\u4f8b\u5982\u5f02\u5e38\u4ece\u51fd\u6570\u5411\u5916\u4f20\u64ad\u5230\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\uff0c\u5982\u679c\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u7ee7\u7eed\u5411\u4e0a\u4f20\u64ad\uff0c\u5982\u679c\u4e00\u76f4\u90fd\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u4f20\u64ad\u5230\u7a0b\u5e8f\u7684\u6700\u9876\u5c42\uff0c\u5373\u4e3b\u7a0b\u5e8f\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\u3002\u5982\u679c\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u4e5f\u6ca1\u6709\u5904\u7406\u5f02\u5e38\u7684\u7a0b\u5e8f\uff0cpython\u5c06\u8c03\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u81ea\u52a8\u5339\u914d\u5f02\u5e38\u7684\u7c7b\u578b\uff0c\u7136\u540e\u4e2d\u6b62\u7a0b\u5e8f\u5e76\u663e\u793a\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002 # \u5728cause_error\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38 def cause_error (): raise Exception ( \"Somrthing is wrong\" ) # \u5728call_cause_error\u51fd\u6570\u4e2d\u8c03\u7528cause_error\u51fd\u6570 def call_cause_error (): cause_error () def deal_error (): try : cause_error () except : print ( \"Exception handled\" ) call_cause_error () ---------------------------------------------------------------------------Exception Traceback (most recent call last)<ipython-input-1-eb81f11bf5d9> in <module> ----> 1 call_cause_error() <ipython-input-1-ec5e029839e0> in call_cause_error() 1 def call_cause_error(): ----> 2 cause_error() 3 <ipython-input-1-11326a099618> in cause_error() 1 def cause_error(): ----> 2 raise Exception(\"Somrthing is wrong\") 3 Exception: Somrthing is wrong deal_error () Exception handled \u5982\u4f60\u6240\u89c1\uff0ccause_error\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u4f9d\u6b21\u4ececause_error\u548ccall_cause_error\u5411\u5916\u4f20\u64ad\uff0c\u6700\u7ec8\u5bfc\u81f4\u663e\u793a\u4e00\u6761\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002\u8c03\u7528deal_error\u65f6\uff0c\u5f02\u5e38\u5728\u4f20\u64ad\u5230deal_error\u65f6\u88ab\u6355\u83b7\uff0c\u5e76\u88ab\u8fd9\u91cc\u7684try/except\u8bed\u53e5\u5904\u7406\u3002 \u5f02\u5e38\u662fPython\u5bf9\u8c61\uff0c\u8868\u793a\u4e00\u4e2a\u9519\u8bef\u3002\u5f02\u5e38\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u88ab\u5b9a\u4e49, \u4e5f\u53ef\u4ee5\u4eba\u4e3a\u5f15\u53d1\u5f02\u5e38\u3002 \u5f02\u5e38\u5904\u7406\u8bed\u53e5 try : # try\u8bed\u53e5\u4e2d\u4ee3\u7801\u9996\u5148\u88ab\u8fd0\u884c < statement > except \uff1a # \u6355\u83b7\u4efb\u4f55\u5728try\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38 < statement > except < name > \uff1a # \u6355\u83b7\u5728try\u4e2d\u5f15\u53d1\u7684<name>\u5f02\u5e38 < statement > except < name > \uff0c < data > : # \u5982\u679c\u5f15\u53d1\u4e86'name'\u5f02\u5e38\uff0c\u83b7\u5f97\u9644\u52a0\u7684\u6570\u636e < statement > except ( < name1 > , < name2 >... ): # \u6355\u83b7\u5217\u51fa\u7684\u591a\u4e2a\u5f02\u5e38 < statement > else : # \u5982\u679c\u6ca1\u6709\u5f02\u5e38\u53d1\u751f < statement > finally : # \u9000\u51fatry\u65f6\u603b\u4f1a\u6267\u884c < statement > raise # \u4eba\u4e3a\u5f15\u53d1\u9519\u8bef assert < judgement > # \u65ad\u8a00 \u5224\u65ad\u4e3a\u5047\u7684\u8bdd\u4f1a\u5f15\u53d1AssertionError raise\u8bed\u53e5 \u4f7f\u7528raise...from...\u8bed\u53e5\u6765\u63d0\u4f9b\u81ea\u5df1\u7684\u5f02\u5e38\u4e0a\u4e0b\u6587\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528None\u6765\u7981\u6b62\u4e0a\u4e0b\u6587\u3002 # \u9ed8\u8ba4\u8f93\u51fa\u5f02\u5e38\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 1 try: ----> 2 1/0 3 except ZeroDivisionError: ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError 5 ValueError: # \u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from ZeroDivisionError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)ZeroDivisionError: The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last)<ipython-input-1-00ed5b67ecd8> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from ZeroDivisionError 5 ValueError: # \u7981\u6b62\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from None ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-d9388897f61c> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from None ValueError: \u5185\u7f6e\u5f02\u5e38 \u5f02\u5e38\u540d\u79f0 \u63cf\u8ff0 BaseException \u6240\u6709\u5f02\u5e38\u7684\u57fa\u7c7b SystemExit \u89e3\u91ca\u5668\u8bf7\u6c42\u9000\u51fa KeyboardInterrupt \u7528\u6237\u4e2d\u65ad\u6267\u884c(\u901a\u5e38\u662f\u8f93\u5165^C) Exception \u5e38\u89c4\u9519\u8bef\u7684\u57fa\u7c7b StopIteration \u8fed\u4ee3\u5668\u6ca1\u6709\u66f4\u591a\u7684\u503c GeneratorExit \u751f\u6210\u5668(generator)\u53d1\u751f\u5f02\u5e38\u6765\u901a\u77e5\u9000\u51fa StandardError \u6240\u6709\u7684\u5185\u5efa\u6807\u51c6\u5f02\u5e38\u7684\u57fa\u7c7b ArithmeticError \u6240\u6709\u6570\u503c\u8ba1\u7b97\u9519\u8bef\u7684\u57fa\u7c7b FloatingPointError \u6d6e\u70b9\u8ba1\u7b97\u9519\u8bef OverflowError \u6570\u503c\u8fd0\u7b97\u8d85\u51fa\u6700\u5927\u9650\u5236 ZeroDivisionError \u9664(\u6216\u53d6\u6a21)\u96f6 (\u6240\u6709\u6570\u636e\u7c7b\u578b) AssertionError \u65ad\u8a00\u8bed\u53e5\u5931\u8d25 AttributeError \u5bf9\u8c61\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027 EOFError \u6ca1\u6709\u5185\u5efa\u8f93\u5165,\u5230\u8fbeEOF \u6807\u8bb0 EnvironmentError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u57fa\u7c7b IOError \u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u5931\u8d25 OSError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef WindowsError \u7cfb\u7edf\u8c03\u7528\u5931\u8d25 ImportError \u5bfc\u5165\u6a21\u5757/\u5bf9\u8c61\u5931\u8d25 LookupError \u65e0\u6548\u6570\u636e\u67e5\u8be2\u7684\u57fa\u7c7b IndexError \u5e8f\u5217\u4e2d\u6ca1\u6709\u6b64\u7d22\u5f15(index) KeyError \u6620\u5c04\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u952e MemoryError \u5185\u5b58\u6ea2\u51fa\u9519\u8bef(\u5bf9\u4e8ePython \u89e3\u91ca\u5668\u4e0d\u662f\u81f4\u547d\u7684) NameError \u672a\u58f0\u660e/\u521d\u59cb\u5316\u5bf9\u8c61 (\u6ca1\u6709\u5c5e\u6027) UnboundLocalError \u8bbf\u95ee\u672a\u521d\u59cb\u5316\u7684\u672c\u5730\u53d8\u91cf ReferenceError \u5f31\u5f15\u7528(Weak reference)\u8bd5\u56fe\u8bbf\u95ee\u5df2\u7ecf\u5783\u573e\u56de\u6536\u4e86\u7684\u5bf9\u8c61 RuntimeError \u4e00\u822c\u7684\u8fd0\u884c\u65f6\u9519\u8bef NotImplementedError \u5c1a\u672a\u5b9e\u73b0\u7684\u65b9\u6cd5 SyntaxError Python \u8bed\u6cd5\u9519\u8bef IndentationError \u7f29\u8fdb\u9519\u8bef TabError Tab \u548c\u7a7a\u683c\u6df7\u7528 SystemError \u4e00\u822c\u7684\u89e3\u91ca\u5668\u7cfb\u7edf\u9519\u8bef TypeError \u5bf9\u7c7b\u578b\u65e0\u6548\u7684\u64cd\u4f5c ValueError \u4f20\u5165\u65e0\u6548\u7684\u53c2\u6570 UnicodeError Unicode \u76f8\u5173\u7684\u9519\u8bef UnicodeDecodeError Unicode \u89e3\u7801\u65f6\u7684\u9519\u8bef UnicodeEncodeError Unicode \u7f16\u7801\u65f6\u9519\u8bef UnicodeTranslateError Unicode \u8f6c\u6362\u65f6\u9519\u8bef Warning \u8b66\u544a\u7684\u57fa\u7c7b DeprecationWarning \u5173\u4e8e\u88ab\u5f03\u7528\u7684\u7279\u5f81\u7684\u8b66\u544a FutureWarning \u5173\u4e8e\u6784\u9020\u5c06\u6765\u8bed\u4e49\u4f1a\u6709\u6539\u53d8\u7684\u8b66\u544a OverflowWarning \u65e7\u7684\u5173\u4e8e\u81ea\u52a8\u63d0\u5347\u4e3a\u957f\u6574\u578b(long)\u7684\u8b66\u544a PendingDeprecationWarning \u5173\u4e8e\u7279\u6027\u5c06\u4f1a\u88ab\u5e9f\u5f03\u7684\u8b66\u544a RuntimeWarning \u53ef\u7591\u7684\u8fd0\u884c\u65f6\u884c\u4e3a(runtime behavior)\u7684\u8b66\u544a SyntaxWarning \u53ef\u7591\u7684\u8bed\u6cd5\u7684\u8b66\u544a UserWarning \u7528\u6237\u4ee3\u7801\u751f\u6210\u7684\u8b66\u544a \u53c2\u8003 Python\u5f02\u5e38\u5904\u7406 python\u5728\u5f02\u5e38\u6355\u83b7\u91cc\u629b\u51fa\u5f02\u5e38 \u5f02\u5e38\u5904\u7406","title":"3.1.\u5f02\u5e38"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_1","text":"\u5f02\u5e38\u5904\u7406\u65e0\u5916\u4e4e\u51e0\u4ef6\u4e8b: \u65ad\u8a00\uff08assert\uff09 \u629b\u9519\uff08raise\uff09 \u68c0\u67e5\uff08try\uff09 \u6355\u83b7\uff08except\uff09 \u5904\u7406\uff08except, else, finally\uff09 \u5f02\u5e38\u5373\u662f\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u4f1a\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\uff0c\u5f71\u54cd\u4e86\u7a0b\u5e8f\u7684\u6b63\u5e38\u6267\u884c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728Python\u65e0\u6cd5\u6b63\u5e38\u5904\u7406\u7a0b\u5e8f\u65f6\u5c31\u4f1a\u53d1\u751f\u4e00\u4e2a\u5f02\u5e38\u3002\u5f53Python\u811a\u672c\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u5f02\u5e38\u4f1a\u4ece\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e\u5411\u7a0b\u5e8f\u4e0a\u5c42\u4f20\u64ad\u3002\u4f8b\u5982\u5f02\u5e38\u4ece\u51fd\u6570\u5411\u5916\u4f20\u64ad\u5230\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\uff0c\u5982\u679c\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u7ee7\u7eed\u5411\u4e0a\u4f20\u64ad\uff0c\u5982\u679c\u4e00\u76f4\u90fd\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u4f20\u64ad\u5230\u7a0b\u5e8f\u7684\u6700\u9876\u5c42\uff0c\u5373\u4e3b\u7a0b\u5e8f\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\u3002\u5982\u679c\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u4e5f\u6ca1\u6709\u5904\u7406\u5f02\u5e38\u7684\u7a0b\u5e8f\uff0cpython\u5c06\u8c03\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u81ea\u52a8\u5339\u914d\u5f02\u5e38\u7684\u7c7b\u578b\uff0c\u7136\u540e\u4e2d\u6b62\u7a0b\u5e8f\u5e76\u663e\u793a\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002 # \u5728cause_error\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38 def cause_error (): raise Exception ( \"Somrthing is wrong\" ) # \u5728call_cause_error\u51fd\u6570\u4e2d\u8c03\u7528cause_error\u51fd\u6570 def call_cause_error (): cause_error () def deal_error (): try : cause_error () except : print ( \"Exception handled\" ) call_cause_error () ---------------------------------------------------------------------------Exception Traceback (most recent call last)<ipython-input-1-eb81f11bf5d9> in <module> ----> 1 call_cause_error() <ipython-input-1-ec5e029839e0> in call_cause_error() 1 def call_cause_error(): ----> 2 cause_error() 3 <ipython-input-1-11326a099618> in cause_error() 1 def cause_error(): ----> 2 raise Exception(\"Somrthing is wrong\") 3 Exception: Somrthing is wrong deal_error () Exception handled \u5982\u4f60\u6240\u89c1\uff0ccause_error\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u4f9d\u6b21\u4ececause_error\u548ccall_cause_error\u5411\u5916\u4f20\u64ad\uff0c\u6700\u7ec8\u5bfc\u81f4\u663e\u793a\u4e00\u6761\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002\u8c03\u7528deal_error\u65f6\uff0c\u5f02\u5e38\u5728\u4f20\u64ad\u5230deal_error\u65f6\u88ab\u6355\u83b7\uff0c\u5e76\u88ab\u8fd9\u91cc\u7684try/except\u8bed\u53e5\u5904\u7406\u3002 \u5f02\u5e38\u662fPython\u5bf9\u8c61\uff0c\u8868\u793a\u4e00\u4e2a\u9519\u8bef\u3002\u5f02\u5e38\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u88ab\u5b9a\u4e49, \u4e5f\u53ef\u4ee5\u4eba\u4e3a\u5f15\u53d1\u5f02\u5e38\u3002","title":"\u5f02\u5e38\u5904\u7406\u673a\u5236"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_2","text":"try : # try\u8bed\u53e5\u4e2d\u4ee3\u7801\u9996\u5148\u88ab\u8fd0\u884c < statement > except \uff1a # \u6355\u83b7\u4efb\u4f55\u5728try\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38 < statement > except < name > \uff1a # \u6355\u83b7\u5728try\u4e2d\u5f15\u53d1\u7684<name>\u5f02\u5e38 < statement > except < name > \uff0c < data > : # \u5982\u679c\u5f15\u53d1\u4e86'name'\u5f02\u5e38\uff0c\u83b7\u5f97\u9644\u52a0\u7684\u6570\u636e < statement > except ( < name1 > , < name2 >... ): # \u6355\u83b7\u5217\u51fa\u7684\u591a\u4e2a\u5f02\u5e38 < statement > else : # \u5982\u679c\u6ca1\u6709\u5f02\u5e38\u53d1\u751f < statement > finally : # \u9000\u51fatry\u65f6\u603b\u4f1a\u6267\u884c < statement > raise # \u4eba\u4e3a\u5f15\u53d1\u9519\u8bef assert < judgement > # \u65ad\u8a00 \u5224\u65ad\u4e3a\u5047\u7684\u8bdd\u4f1a\u5f15\u53d1AssertionError","title":"\u5f02\u5e38\u5904\u7406\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#raise","text":"\u4f7f\u7528raise...from...\u8bed\u53e5\u6765\u63d0\u4f9b\u81ea\u5df1\u7684\u5f02\u5e38\u4e0a\u4e0b\u6587\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528None\u6765\u7981\u6b62\u4e0a\u4e0b\u6587\u3002 # \u9ed8\u8ba4\u8f93\u51fa\u5f02\u5e38\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 1 try: ----> 2 1/0 3 except ZeroDivisionError: ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError 5 ValueError: # \u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from ZeroDivisionError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)ZeroDivisionError: The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last)<ipython-input-1-00ed5b67ecd8> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from ZeroDivisionError 5 ValueError: # \u7981\u6b62\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from None ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-d9388897f61c> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from None ValueError:","title":"raise\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_3","text":"\u5f02\u5e38\u540d\u79f0 \u63cf\u8ff0 BaseException \u6240\u6709\u5f02\u5e38\u7684\u57fa\u7c7b SystemExit \u89e3\u91ca\u5668\u8bf7\u6c42\u9000\u51fa KeyboardInterrupt \u7528\u6237\u4e2d\u65ad\u6267\u884c(\u901a\u5e38\u662f\u8f93\u5165^C) Exception \u5e38\u89c4\u9519\u8bef\u7684\u57fa\u7c7b StopIteration \u8fed\u4ee3\u5668\u6ca1\u6709\u66f4\u591a\u7684\u503c GeneratorExit \u751f\u6210\u5668(generator)\u53d1\u751f\u5f02\u5e38\u6765\u901a\u77e5\u9000\u51fa StandardError \u6240\u6709\u7684\u5185\u5efa\u6807\u51c6\u5f02\u5e38\u7684\u57fa\u7c7b ArithmeticError \u6240\u6709\u6570\u503c\u8ba1\u7b97\u9519\u8bef\u7684\u57fa\u7c7b FloatingPointError \u6d6e\u70b9\u8ba1\u7b97\u9519\u8bef OverflowError \u6570\u503c\u8fd0\u7b97\u8d85\u51fa\u6700\u5927\u9650\u5236 ZeroDivisionError \u9664(\u6216\u53d6\u6a21)\u96f6 (\u6240\u6709\u6570\u636e\u7c7b\u578b) AssertionError \u65ad\u8a00\u8bed\u53e5\u5931\u8d25 AttributeError \u5bf9\u8c61\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027 EOFError \u6ca1\u6709\u5185\u5efa\u8f93\u5165,\u5230\u8fbeEOF \u6807\u8bb0 EnvironmentError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u57fa\u7c7b IOError \u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u5931\u8d25 OSError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef WindowsError \u7cfb\u7edf\u8c03\u7528\u5931\u8d25 ImportError \u5bfc\u5165\u6a21\u5757/\u5bf9\u8c61\u5931\u8d25 LookupError \u65e0\u6548\u6570\u636e\u67e5\u8be2\u7684\u57fa\u7c7b IndexError \u5e8f\u5217\u4e2d\u6ca1\u6709\u6b64\u7d22\u5f15(index) KeyError \u6620\u5c04\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u952e MemoryError \u5185\u5b58\u6ea2\u51fa\u9519\u8bef(\u5bf9\u4e8ePython \u89e3\u91ca\u5668\u4e0d\u662f\u81f4\u547d\u7684) NameError \u672a\u58f0\u660e/\u521d\u59cb\u5316\u5bf9\u8c61 (\u6ca1\u6709\u5c5e\u6027) UnboundLocalError \u8bbf\u95ee\u672a\u521d\u59cb\u5316\u7684\u672c\u5730\u53d8\u91cf ReferenceError \u5f31\u5f15\u7528(Weak reference)\u8bd5\u56fe\u8bbf\u95ee\u5df2\u7ecf\u5783\u573e\u56de\u6536\u4e86\u7684\u5bf9\u8c61 RuntimeError \u4e00\u822c\u7684\u8fd0\u884c\u65f6\u9519\u8bef NotImplementedError \u5c1a\u672a\u5b9e\u73b0\u7684\u65b9\u6cd5 SyntaxError Python \u8bed\u6cd5\u9519\u8bef IndentationError \u7f29\u8fdb\u9519\u8bef TabError Tab \u548c\u7a7a\u683c\u6df7\u7528 SystemError \u4e00\u822c\u7684\u89e3\u91ca\u5668\u7cfb\u7edf\u9519\u8bef TypeError \u5bf9\u7c7b\u578b\u65e0\u6548\u7684\u64cd\u4f5c ValueError \u4f20\u5165\u65e0\u6548\u7684\u53c2\u6570 UnicodeError Unicode \u76f8\u5173\u7684\u9519\u8bef UnicodeDecodeError Unicode \u89e3\u7801\u65f6\u7684\u9519\u8bef UnicodeEncodeError Unicode \u7f16\u7801\u65f6\u9519\u8bef UnicodeTranslateError Unicode \u8f6c\u6362\u65f6\u9519\u8bef Warning \u8b66\u544a\u7684\u57fa\u7c7b DeprecationWarning \u5173\u4e8e\u88ab\u5f03\u7528\u7684\u7279\u5f81\u7684\u8b66\u544a FutureWarning \u5173\u4e8e\u6784\u9020\u5c06\u6765\u8bed\u4e49\u4f1a\u6709\u6539\u53d8\u7684\u8b66\u544a OverflowWarning \u65e7\u7684\u5173\u4e8e\u81ea\u52a8\u63d0\u5347\u4e3a\u957f\u6574\u578b(long)\u7684\u8b66\u544a PendingDeprecationWarning \u5173\u4e8e\u7279\u6027\u5c06\u4f1a\u88ab\u5e9f\u5f03\u7684\u8b66\u544a RuntimeWarning \u53ef\u7591\u7684\u8fd0\u884c\u65f6\u884c\u4e3a(runtime behavior)\u7684\u8b66\u544a SyntaxWarning \u53ef\u7591\u7684\u8bed\u6cd5\u7684\u8b66\u544a UserWarning \u7528\u6237\u4ee3\u7801\u751f\u6210\u7684\u8b66\u544a","title":"\u5185\u7f6e\u5f02\u5e38"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_4","text":"Python\u5f02\u5e38\u5904\u7406 python\u5728\u5f02\u5e38\u6355\u83b7\u91cc\u629b\u51fa\u5f02\u5e38 \u5f02\u5e38\u5904\u7406","title":"\u53c2\u8003"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html","text":"\u547d\u540d\u7a7a\u95f4 Namespace : namespace \u662f\u4e00\u4e2a\u4ece name \u5230 object \u7684\u6620\u5c04\u3002\u73b0\u5728\u5927\u90e8\u5206\u7684 namespace \u901a\u8fc7Python\u5b57\u5178 1 \u5b9e\u73b0\uff0c\u5c06\u6765\u53ef\u80fd\u4f1a\u6539\u53d8\u5b9e\u73b0\u65b9\u5f0f\u3002 namespace\uff1a\u4e2d\u6587\u79f0\u4e3a\u547d\u540d\u7a7a\u95f4\uff0c\u6216\u8005\u540d\u5b57\u7a7a\u95f4\u3002 \u547d\u540d\u7a7a\u95f4\u6700\u91cd\u8981\u7684\u4f5c\u7528\u662f\u907f\u514d\u540d\u5b57\u51b2\u7a81\uff0c\u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5b58\u5728\u540c\u540d\u53d8\u91cf\u3002 Namespace \u7684\u79cd\u7c7b \u4e00\u822c\u800c\u8a00\uff0cname \u4ea7\u751f\u5730\u70b9\u51b3\u5b9a\u5176\u6240\u5904\u7684 namespace\u3002\u4f8b\u5982\uff0c\u5728\u51fd\u6570\u5185\u5b9a\u4e49\u7684 name \u4f1a\u4f4d\u4e8e\uff08\u51fd\u6570\u7684\uff09\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f46\u4f7f\u7528\u4e86 global \u3001 nonlocal \u8bed\u53e5\u4f1a\u6539\u53d8\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e2a\u5728\u540e\u9762\u4f1a\u8bf4\u5230\u3002 built-in namespace \uff1abuiltins \u6a21\u5757\u5b9a\u4e49\u7684\u6240\u6709\u540d\u5b57\u5b58\u5728\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u540d\u5b57\u5305\u62ec\u5185\u7f6e\u51fd\u6570\u3001\u5185\u7f6e\u5f02\u5e38\u3001\u5185\u7f6e\u5e38\u91cf\u3001\u5185\u7f6e\u7c7b\u578b\u3002\u5982\u679c\u662fPython 2\uff0c\u5219\u662f __builtin__ \u6a21\u5757\u3002 global namespace \uff1a\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5305\u62ec\u6240\u6709\u5728\u6a21\u5757\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u7c7b\u3001\u51fd\u6570\u3001\u5e38\u91cf\u3001\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u3002 local namespace \uff1a\u76f8\u5bf9\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6bcf\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u90fd\u6709\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u6216\u7c7b\u6240\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u53c2\u6570\u3001\u51fd\u6570\u5185\u7684\u53d8\u91cf\u3001\u7c7b\u5c5e\u6027\u3001\u7c7b\u65b9\u6cd5\u7b49\u3002 enclosing namespace \uff1a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e0d\u4ec5\u8bb0\u5f55\u4e86\u5f53\u524d\u5d4c\u5957\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u8fd8\u8bb0\u5f55\u4e86\u5d4c\u5957\u51fd\u6570\u5f15\u7528\u7684\u5916\u90e8\u53d8\u91cf\u3002 Namespace\u751f\u547d\u5468\u671f \u4e0d\u540c\u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\u6709\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\uff1a built-in\uff1a\u5728 Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\uff0c\u89e3\u91ca\u5668\u9000\u51fa\u65f6\u9500\u6bc1 global\uff1a\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u89e3\u91ca\u5668\u8bfb\u5165\u65f6\u521b\u5efa\uff0c\u901a\u5e38\u4e5f\u4f1a\u4e00\u76f4\u4fdd\u5b58\u5230\u89e3\u91ca\u5668\u9000\u51fa\uff0c\u9664\u975e\u4f7f\u7528 del \u8bed\u53e5\u3002 local\uff1a\u8fd9\u91cc\u8981\u533a\u5206 function \u4ee5\u53ca class \u5b9a\u4e49\uff1a \u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u51fd\u6570\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u51fd\u6570\u8fd4\u56de\u6216\u8005\u4ea7\u751f\u672a\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u65f6\u9500\u6bc1\u3002 \u7c7b\u5b9a\u4e49\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u89e3\u91ca\u5668\u8bfb\u5230\u7c7b\u5b9a\u4e49\u521b\u5efa\uff0c\u79bb\u5f00\u7c7b\u5b9a\u4e49\u65f6\u521b\u5efaclass object\u3002\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff08\u89c1\u5b98\u65b9\u5bf9\u7c7b\u5b9a\u4e49\u7684 \u8bf4\u660e \uff09\u3002 \u67e5\u770bNamespace \u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 locals() \u6765\u8bbf\u95ee \u5168\u5c40 \uff08\u6a21\u5757\u7ea7\u522b\uff09\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 globals() \u6765\u8bbf\u95ee \u867d\u7136\u90fd\u662f\u8fd4\u56de\u547d\u540d\u7a7a\u95f4\uff0c\u4f46 globals() \u548c locals() \u6709\u4e00\u70b9\u4e0d\u4e00\u6837\u3002 locals() \u8fd4\u56de\u7684\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 locals() \u5bf9\u8c61\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5c40\u90e8\u540d\u5b57\u7a7a\u95f4\u3002 globals \u8fd4\u56de\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 globals() \u5bf9\u8c61\u4f1a\u5f71\u54cd\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 # \u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u65e0\u6548 def change_local (): x = 123 print ( \"\u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\" , locals (), sep = \"\uff1a\" ) locals ()[ \"x\" ] = 6789 print ( \"\u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\" , f \"x= { x } \" , sep = \"\uff1a\" ) change_local () \u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a{'x': 123} \u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\uff1ax=123 # \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548 y = 123 globals ()[ \"y\" ] = 456 print ( \"\u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a\" , f \"y= { y } \" ) \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a y=456 \u4f5c\u7528\u57df scope : scope \u662fPython\u7a0b\u5e8f\u7684\u4e00\u5757\u6587\u672c\u533a\u57df\uff08\u5373\u4e00\u4e2a\u4ee3\u7801\u533a\u57df\uff09\uff0c\u5728\u8fd9\u4e2a\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95eenamespace \u3002 \u76f4\u63a5\u8bbf\u95ee\u610f\u5473\u7740\u65e0\u987b\u7279\u6027\u7684\u6307\u660e\u5f15\u7528\u3002\u5728Python\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u662f\u6307\u76f4\u63a5\u4f7f\u7528name\u8bbf\u95ee\u5bf9\u8c61\uff0c\u5982 name \uff0c\u8fd9\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 name \uff1b\u800c\u95f4\u63a5\u8bbf\u95ee\u662f\u6307\u4f7f\u7528\u5f62\u5982 objname.attrname \u7684\u65b9\u5f0f\uff0c\u5373\u5f15\u7528\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u8fd9\u4e0d\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 attrname \uff0c\u800c\u662f\u641c\u7d22\u540d\u5b57 objname \uff0c\u518d\u8bbf\u95ee\u5176\u5c5e\u6027\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u4f5c\u7528\u57df\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u53d1\u751f\u4f5c\u7528\u7684\u4ee3\u7801\u533a\u57df\uff0c\u53d1\u751f\u4f5c\u7528\u662f\u6307\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88ab\u4f5c\u7528\u57df\u76f4\u63a5\u8bbf\u95ee\u3002 \u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u7684\u5173\u7cfb \u547d\u540d\u7a7a\u95f4\u4fdd\u5b58\u7740\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff0c\u6620\u5c04\u5173\u7cfb\u5728\u4f5c\u7528\u57df\u4e2d\u88ab\u5b9a\u4e49\uff0c\u540c\u65f6\u4f5c\u7528\u57df\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\u8bbf\u95ee\u5bf9\u8c61\u3002\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\uff0c\u5b83\u4e5f\u5c31\u662f\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002\u6709\u4e9b\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u8bbf\u95ee\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u662f\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002 \u4f5c\u7528\u57df\u662f\u9759\u6001\u7684\uff08\u5b83\u53ea\u662f\u4ee3\u7801\u6587\u672c\uff09\uff0c\u800c\u547d\u540d\u7a7a\u95f4\u662f\u52a8\u6001\u7684\uff0c\u547d\u540d\u7a7a\u95f4\u968f\u7740\u89e3\u91ca\u5668\u7684\u6267\u884c\u800c\u4ea7\u751f\u3002 \u6709\u4e9b\u6587\u7ae0\u8ba4\u4e3a\u52a8\u6001\u7684\u4f5c\u7528\u57df\u5c31\u662f\u547d\u540d\u7a7a\u95f4\u3002\u5176\u5b9e\u5e76\u4e0d\u662f\uff0c\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u6620\u5c04\uff0c\u4f5c\u7528\u57df\u662f\u4e00\u5757\u4ee3\u7801\u533a\u57df\u3002 Python\u5bf9\u8c61\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u88ab\u8bbf\u95ee\uff0c\u800c\u4f5c\u7528\u57df\u5219\u9650\u5236\u4e86Python\u5bf9\u8c61\u7684\u4f7f\u7528\u8303\u56f4\u3002 \u540d\u5b57\u641c\u7d22\u987a\u5e8f\uff08LEGB\uff09 \u5f53\u4e00\u884c\u4ee3\u7801\u9700\u8981\u4f7f\u7528\u540d\u5b57 X \u6240\u5bf9\u5e94\u7684\u503c\uff0c Python\u4f1a\u4ece\u5f53\u524d\u5c42\u7ea7\u7684Namespace\u5f00\u59cb \uff0c\u5e76\u6839\u636e\u4ee5\u4e0b\u987a\u5e8f\uff0c\u53bb\u67e5\u627e\u540d\u5b57 X \uff1a local namespace \uff1a\u5305\u542b\u5c40\u90e8\u540d\u5b57\u7684\u6700\u5185\u5c42\uff08innermost\uff09\u4f5c\u7528\u57df\uff0c\u5982\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7c7b\u7684\u5185\u90e8\u5c40\u90e8\u4f5c\u7528\u57df\u3002 Enclosing \uff1a\u6839\u636e\u5d4c\u5957\u5c42\u6b21\u4ece\u5185\u5230\u5916\u641c\u7d22\uff0c\u5305\u542b\u975e\u5c40\u90e8\uff08nonlocal\uff09\u975e\u5168\u5c40\uff08nonglobal\uff09\u540d\u5b57\u7684\u4efb\u610f\u5c01\u95ed\u51fd\u6570\u7684\u4f5c\u7528\u57df\u3002\u5982\u4e24\u4e2a\u5d4c\u5957\u7684\u51fd\u6570\uff0c\u5185\u5c42\u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5916\u5c42\u51fd\u6570\u4f5c\u7528\u57df\u5c31\u662f\u5185\u5c42\u51fd\u6570\u7684 Enclosing \u4f5c\u7528\u57df\u3002 global built-in NameError \uff1a\u5982\u679c Python \u5728\u4ee5\u4e0a4\u4e2anamespace\u627e\u4e0d\u5230 X \uff0c\u5c06\u653e\u5f03\u641c\u7d22\u5e76\u629b\u51fa NameError \u5f02\u5e38\uff1a NameError: name 'a' is not defined \u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\uff0clocal\u3001global\u3001built-in\u4e09\u4e2anamespace\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46Enclosing namespace\u4e0d\u4e00\u5b9a\u5b58\u5728\u3002 Namespace\u548cscope\u603b\u7ed3 \u4e0d\u80fd\u5728\u540d\u5b57\u672a\u5b9a\u4e49\u524d\u5f15\u7528\u8be5\u540d\u5b57\uff08\u547d\u540d\u7a7a\u95f4\u4e0d\u5b58\u5728\u8be5\u6620\u5c04\u5173\u7cfb\uff09\u3002 built-in\u3001global\u4e24\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u5165\u662f\u4e0d\u80fd\u591f\u901a\u8fc7\u4ee3\u7801\u64cd\u4f5c\u7684\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5f15\u5165\u5b83\u4eec\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u5f15\u5165\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u3002built-in\u547d\u540d\u7a7a\u95f4\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff08\u5df2\u7ecf\u9884\u5b9a\u4e49\u597d\uff09\uff0c\u4f46global\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88abPython\u4ee3\u7801\u4fee\u6539\u3002 \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49\u3001\u63a8\u5bfc\u5f0f\u4f1a\u5f15\u5165local\u547d\u540d\u7a7a\u95f4 \uff0c\u95ed\u5305\u51fd\u6570\u5b9a\u4e49\u4f1a\u5f15\u5165enclosing\u547d\u540d\u7a7a\u95f4\u3002 \u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u88ab\u4fee\u6539\u7684\u60c5\u51b5\uff1a \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49 \u8d4b\u503c\u8bed\u53e5 import \u8bed\u53e5\u3001 if \u8bed\u53e5\u3001 for \u8bed\u53e5\u3001 while \u8bed\u53e5 if \u3001 for \u3001 while \u8bed\u53e5\u5e76\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f5c\u7528\u8303\u56f4\u6700\u5927\u7684\u547d\u540d\u7a7a\u95f4\u662fglobal namespace\uff0c\u4f46global namespace\u4e5f\u53ea\u662f\u6a21\u5757\u7ea7\u522b\u7684\u3002 a \u6a21\u5757\u4e0d\u80fd\u76f4\u63a5\u5f15\u7528\u5728 b \u6a21\u5757\u5b9a\u4e49\u7684name\uff0c\u5373\u4f7f a \u6a21\u5757\u5df2\u7ecf\u5bfc\u5165\u4e86\u6574\u4e2a b \u6a21\u5757\uff1a import b \u3002\u9664\u975e\u76f4\u63a5\u5bfc\u5165name\uff1a from b import name \u3002 \u5bfc\u5165 b \u6a21\u5757\u4e2d\u5176\u4e2d\u4e00\u4e2aname\uff1a from b import name \uff0c\u6574\u4e2a b \u6a21\u5757\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u4e3a Python \u5e76\u4e0d\u77e5\u9053 name \u5728 b.py \u6587\u6863\u7684\u4f55\u5904\uff0c\u4e3a\u4e86\u80fd\u591f\u627e\u5230 name \uff0cPython \u9700\u8981\u6267\u884c\u6574\u4e2a b.py\u3002 import \u8bed\u53e5\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8global namespace\uff0c\u4f8b\u5982 import \u8bed\u53e5\u5199\u5728\u51fd\u6570\u5185\u3002 \u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u5916\u5c42\u4f5c\u7528\u57df\u4e0d\u80fd\u5f15\u7528\u5185\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 def try_to_define_name (): '''\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u5e76\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u6574\u6570\u5bf9\u8c611''' i = 1 # \u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u5148\u8c03\u7528\u51fd\u6570\u5b9a\u4e49i try_to_define_name () # \u5728\u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u660e\u660e\u8c03\u7528\u4e86\u51fd\u6570\uff0c\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u53ef\u662f\u8fd8\u662f\u627e\u4e0d\u5230\u8fd9\u4e2a\u540d\u5b57\u3002 print ( i ) NameError: name 'i' is not defined \u867d\u7136\u5b9a\u4e49\u4e86\u540d\u5b57 i \uff0c\u4f46\u662f\u5b9a\u4e49\u5728\u4e86\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u6309\u7167 LEGB \u641c\u7d22\u89c4\u5219\uff0c\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u81ea\u7136\u8bbf\u95ee\u4e0d\u5230\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u547d\u540d\u7a7a\u95f4\uff1b\u518d\u8005\uff0c\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u88ab\u9500\u6bc1\u4e86\u3002 global \u548c nonlocal \u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u4efb\u4f55\u65f6\u5019\uff0cPython\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u5374\u4e0d\u53ef\u4ee5\u5728\u5185\u5c42\u4f5c\u7528\u57df\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u53d8\u91cf\u3002 \u53ef\u4ee5\u8bfb\u53d6\u5168\u90e8\u53d8\u91cf\uff0c\u8fd9\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a\u4efb\u4f55\u65f6\u5019\uff0cglobal namespace\u90fd\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002\u4f46\u4e3a\u4ec0\u4e48\u5728\u5185\u5c42\u4f5c\u7528\u57df\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u5374\u4e0d\u80fd\u88ab\u4fee\u6539\u5462\uff1f\u8fd9\u770b\u8d77\u6765\u50cf\u662fPython\u7684\u4e00\u4e2a\u89c4\u5b9a\uff0c\u4f46\u5176\u5b9e\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002\u5728Python\u4e2d\u4fee\u6539\u53d8\u91cf\u610f\u5473\u7740\u5c06\u4e00\u4e2a\u540d\u5b57\u7ed1\u5b9a\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u9700\u8981\u4f7f\u7528assignment\u8fd0\u7b97\u7b26 = \u3002 \u8fd9\u610f\u5473\u7740 = \u5de6\u8fb9\u7684\u540d\u5b57\u4f1a\u88ab\u52a0\u5165\u5f53\u524d\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u540d\u5b57\u5bf9\u5e94\u7740 = \u53f3\u8fb9\u7684\u5bf9\u8c61\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a a = 1 def change_a (): a = 10 change_a () a # 1 1 a = 10 \u8bed\u53e5\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\uff0c\u5f53\u5b83\u88abPython\u6267\u884c\u65f6\uff0cPython\u4f1a\u5c06 a \u52a0\u5165\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u4f1a\u5c06 a \u89c6\u4f5c\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684 a \u3002\u5f53\u6211\u4eec\u5728\u6700\u5916\u5c42\u4f5c\u7528\u57df\u5f15\u7528 a \u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0cPython\u4f1a\u4ece a \u6240\u5728\u7684\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4\uff08\u5373\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff09\u5f00\u59cb\u641c\u7d22 a \u5bf9\u5e94\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u641c\u7d22\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u518d\u8005\uff0c\u6b64\u65f6\u51fd\u6570 change_a() \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5df2\u7ecf\u88ab\u9500\u6bc1\uff0c\u5373\u4f7f\u60f3\u641c\u7d22\u4e5f\u641c\u7d22\u4e0d\u5230\u3002 \u76f8\u4fe1\u4f60\u4ece\u4e0a\u9762\u7684\u53d9\u8ff0\u5df2\u7ecf\u610f\u8bc6\u5230\uff0c\u5982\u679c\u60f3\u8ba9Python\u5728\u5185\u5c42\u4f5c\u7528\u57df\u4fee\u6539\u5916\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u9700\u8981\u8ba9Python\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u6765\u81ea\u5916\u5c42\u4f5c\u7528\u57df\u3002 global \u8bed\u53e5\u548c nonlocal \u8bed\u53e5\u6b63\u662f\u53ef\u4ee5\u8d77\u5230\u8fd9\u6837\u7684\u4f5c\u7528\u3002 global \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26\u5c06\u88ab\u89e3\u6790\u4e3a\u5168\u5c40\u53d8\u91cf\u3002 \u4f7f\u7528global\u65f6\u6709\u4ee5\u4e0b\u4e24\u6761\u9650\u5236\uff1a \u5728\u540c\u4e00\u4ee3\u7801\u5757\u4e2d\uff0c\u5217\u5728global\u8bed\u53e5\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\u4e0d\u80fd\u5728\u8be5global\u8bed\u53e5\u524d\u51fa\u73b0\u3002 \u5217\u5728global \u8bed\u53e5\u540e\u7684\u6807\u8bc6\u7b26\u4e0d\u80fd\u88ab\u5b9a\u4e49\u6210\u5f62\u53c2\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728for\u5faa\u73af\u63a7\u5236\u7684\u76ee\u6807\u3001\u7c7b\u5b9a\u4e49\u548c\u51fd\u6570\u5b9a\u4e49\uff0c\u6216\u8005import\u8bed\u53e5\u4e2d\u3002 CPython\u5b9e\u73b0\u7ec6\u8282 \u5f53\u524d\u5b9e\u73b0\u5e76\u672a\u5f3a\u5236\u5c65\u884c\u4e0a\u9762\u4e24\u6761\u9650\u5236 2 \uff0c\u4f46\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u6ee5\u7528\u8fd9\u79cd\u81ea\u7531\uff0c\u56e0\u4e3a\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u5f3a\u5236\u5c65\u884c\u5b83\u4eec\u6216\u8005\u4e0d\u7559\u75d5\u8ff9\u7684\u6539\u53d8\u7a0b\u5e8f\u542b\u4e49\u3002 nonlocal \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26 \u5173\u8054 \u5230 \u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u91cc\u5b9a\u4e49\u8fc7\u7684\u540c\u540d\u53d8\u91cf\uff08\u4e0d\u5305\u62ec\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u662f\u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff09\u3002 def scope_test (): def do_local (): spam = \"local spam of do_local\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam of do_nonlocal\" def do_global (): global spam spam = \"global spam of do_global\" spam = \"test spam of scope_test\" # do_local\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam do_local () print ( \"After local assignment:\" , spam ) # do_nonlocal\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u5168\u5c40\u7684spam do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) # do_global \u51fd\u6570\u5185\u58f0\u660e\u7684spam\u5b58\u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u800c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684 do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) After local assignment: test spam of scope_test After nonlocal assignment: nonlocal spam of do_nonlocal After global assignment: nonlocal spam of do_nonlocal In global scope: global spam of do_global nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e24\u4e2a\u4e0d\u540c\u70b9\uff1a \u5176\u4e00\uff0c global \u8bed\u53e5\u53ea\u662f\u58f0\u660e\u6807\u8bc6\u7b26\u6765\u5b58\u5728\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u521b\u5efa\u8be5\u6807\u8bc6\u7b26\uff1b nonlocal \u8bed\u53e5\u5219\u4f1a\u5728\u5b50\u51fd\u6570\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u4e0e\u7236\u51fd\u6570\u53d8\u91cf\u540c\u540d\u7684\u6807\u8bc6\u7b26\uff1a gv = 'a global var' def func (): global gv lv = 'a local var' print ( locals ()) def inn_func (): nonlocal lv global gv print ( locals ()) return inn_func a = func () a () {'lv': 'a local var'} {'lv': 'a local var'} \u4e4b\u6240\u4ee5 nonlocal \u8bed\u53e5\u4e0e global \u8bed\u53e5\u7684\u5904\u7406\u4e0d\u540c\uff0c\u662f\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u751f\u5b58\u671f\u5f88\u957f\uff0c\u5728\u6a21\u5757\u5185\u968f\u65f6\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u800c\u7236\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5728\u7236\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4fbf\u4f1a\u76f4\u63a5\u91ca\u653e\uff0c\u56e0\u6b64 nonlocal \u8bed\u53e5\u5fc5\u987b\u5c06\u7236\u51fd\u6570\u7684\u6807\u8bc6\u7b26\u548c\u5f15\u7528\u5199\u5165enclosing namespace\u3002 \u5176\u4e8c\uff0c global \u8bed\u53e5\u53ef\u4ee5\u58f0\u660e\u5168\u5c40\u4f5c\u7528\u57df\u8fd8\u6ca1\u5b58\u5728\u7684\u540d\u5b57\uff0c\u800c nonlocal \u8bed\u53e5\u53ea\u80fd\u5c06\u5b83\u58f0\u660e\u7684\u540d\u5b57\u5173\u8054\u5230enclosing\u4f5c\u7528\u57df\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u7ed1\u5b9a\uff1a # nonlocal \u8bed\u53e5\u4e4b\u524d\u7684eclosing\u4f5c\u7528\u57df\u4e0d\u5b58\u5728spam \u5219\u62a5\u9519 def scope_test (): def do_nonlocal (): # \u7236\u51fd\u6570\u4f5c\u7528\u57df\u8981\u5148\u5b9a\u4e49spam\uff0c\u5426\u5219\u62a5\u9519 nonlocal spam spam = \"nonlocal spam of do_nonlocal\" scope_test () File \"<ipython-input-1-e77162de9535>\", line 5 nonlocal spam ^ SyntaxError: no binding for nonlocal 'spam' found nonlocal \u8bed\u53e5\u53ea\u80fd\u58f0\u660e\u7684\u540d\u5b57\u4f1a\u7ed1\u5b9a\u5230\u79bb nonlocal \u8bed\u53e5\u6700\u8fd1\u7684enclosing \u4f5c\u7528\u57df\uff08\u5982\u679cenclosing \u4f5c\u7528\u57df\u5b58\u5728 nonlocal \u8bed\u53e5\u58f0\u660e\u7684\u540d\u5b57\uff09\uff1a def scope_test (): spam = \"local spam of scope_test\" def do_local (): spam = \"local spam of do_local\" print ( \"After local assignment:\" , spam ) def do_nonlocal (): # \u901a\u8fc7nonlocal\u58f0\u660e\u5c06spam\u548c\u6700\u8fd1\u7684enclosing\u4f5c\u7528\u57df\u7684spam\u5173\u8054 # \u6240\u4ee5\u5173\u8054\u7684\u662fdo_local\u51fd\u6570\u7684spam nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_local () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () After local assignment: local spam of do_local After nonlocal assignment: nonlocal spam of do_nonlocal After nonlocal assignment, scope_test's spam: local spam of scope_test \u56e0\u6b64 nonlocal \u8bed\u53e5\u91cd\u65b0\u7ed1\u5b9a\u7684name\u7684\u771f\u5b9e\u4f5c\u7528\u57df\u662f\u4e0d\u6e05\u695a\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5df2\u7ecf\u5b58\u5728\u7684name\u672c\u6765\u4f4d\u4e8e\u90a3\u4e00\u5c42\u4f5c\u7528\u57df\u3002 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e00\u4e2a\u76f8\u540c\u70b9\uff1a \u5f53\u524d\u4f5c\u7528\u57df\u4e0d\u80fd\u5728 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u4e4b\u524d\u7ed1\u5b9a\u4e24\u8005\u58f0\u660e\u7684\u6807\u8bc6\u7b26\uff1a # global def scope_test (): spam = \"conflict\" global spam spam = \"nonlocal spam of do_nonlocal\" scope_test () # nonlocal def scope_test (): spam = \"local spam of scope_test\" def do_nonlocal (): spam = \"conflict\" nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () File \"<ipython-input-1-d9548726e53c>\", line 5 global spam ^ SyntaxError: name 'spam' is assigned to before global declaration \u7c7b\u7684\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u95f4 \u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u90fd\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u5b83\u4eec\u6267\u884c\u673a\u5236\u4e0d\u4e00\u6837\uff0c\u6709\u4e0d\u5c0f\u7684\u533a\u522b\u3002 \u5176\u4e00\uff0c\u51fd\u6570\u521d\u59cb\u5316\u65f6\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u7c7b\u521d\u59cb\u5316\u65f6\u4f1a\u88ab\u6267\u884c\u3002 Python\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c\uff1a def func (): print ( \"executed\" ) Python\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u7c7b\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff1a class A : print ( \"executed_A\" ) def A_func ( self ): print ( \"executed_A_func\" ) class B : print ( \"executed_B\" ) class C : print ( \"executed_C\" ) executed_A executed_B executed_C \u8fd9\u770b\u8d77\u6765\u611f\u89c9\u6709\u70b9\u4e0d\u53ef\u601d\u8bae\uff0c\u5927\u5bb6\u90fd\u662f\u5b9a\u4e49\uff0c\u4e3a\u4ec0\u4e48\u7c7b\u5b9a\u4e49\u4f1a\u88ab\u6267\u884c\uff0c\u96be\u9053\u4e0d\u5e94\u8be5\u662f\u5b9a\u4e49\u88ab\u5f15\u7528\u65f6\u624d\u6267\u884c\u5417\uff1f \u5176\u5b9e\u8fd9\u4e5f\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002Python\u89e3\u91ca\u5668\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u53ea\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u51fd\u6570\u540d\uff0c\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u81ea\u7136\u4e0d\u9700\u8981\u6267\u884c\u51fd\u6570\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u52a8\u6001\u6027\uff1a\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4ea7\u751f\u3002 \u800c\u7c7b\u5b9a\u4e49\u5b9e\u9645\u4e0a\u662f\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff0c\u56e0\u6b64Python\u89e3\u91ca\u5668\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u4e0d\u4ec5\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u7c7b\u540d\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u800c\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4f1a\u4ea7\u751f\uff0c\u56e0\u6b64\u7c7b\u5b9a\u4e49\u9700\u8981\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5c31\u88ab\u6267\u884c\u3002\u6ce8\u610f\uff1a\u7c7b\u65b9\u6cd5\u5185\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u4e00\u6837\uff0c\u662f\u4e0d\u4f1a\u88ab\u6267\u884c\u7684\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u56e0\u4e3a\u7c7b\u5177\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u521b\u5efa\u7c7b\u5c5e\u6027\u5c31\u5fc5\u987b\u6267\u884c\u4ee3\u7801\uff08\u8fdb\u884c\u8d4b\u503c\uff09\u3002\u90a3\u4e3a\u4ec0\u4e48\u5728\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u521b\u5efa\u7c7b\u5c5e\u6027\u5462\uff1f\u56e0\u4e3a\u7c7b\u662f\u521b\u5efa\u5b9e\u4f8b\u3001\u751f\u6210\u5176\u4ed6\u7c7b\uff08\u6d89\u53ca\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49\uff09\u7684\u5bf9\u8c61\uff0c\u5fc5\u987b\u5728\u5b9e\u4f8b\u4e4b\u524d\u88ab\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u52a0\u8f7d\u65f6\u5c31\u88ab\u521b\u5efa\u6709\u52a9\u4e8e\u63d0\u9ad8\u6548\u7387\u548c\u964d\u4f4e\u903b\u8f91\u590d\u6742\u5ea6\u3002 \u53e6\u5916\uff0c\u7c7b\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u7c7b\u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u5148\u521b\u5efa\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7279\u70b9\u5c31\u8981\u6c42\u7c7b\u521d\u59cb\u5316\u65f6\u5c31\u521b\u5efa\u7c7b\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u7528\u4e8e\u7edf\u4e00\u7ba1\u7406\u67d0\u4e00\u7c7b\u5e38\u91cf\uff1a class Math_Constant : pi = 3.1415926 e = 2.7182818 sqrt_2 = 1.4142135 rho = 1.3247195 \u5982\u679c Math_Constant \u7684\u7c7b\u5c5e\u6027\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u624d\u80fd\u88ab\u8c03\u7528\uff0c\u90a3\u5c31\u592a\u9ebb\u70e6\u4e86\uff0c\u800c\u4e14\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u4e5f\u5c31\u6ca1\u4e86\u610f\u4e49\u3002 \u800c\u65b9\u6cd5\u672c\u8d28\u662f\u51fd\u6570\uff0c\u4e0d\u4f1a\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u88ab\u6267\u884c\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u4e00\u822c\u6765\u8bf4\uff0c\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e3b\u8981\u4e0e\u53c2\u6570\u6709\u5173\uff0c\u800c\u53c2\u6570\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u624d\u4f20\u5165\uff0c\u521b\u5efa\u4e86\u547d\u540d\u7a7a\u95f4\u4e5f\u610f\u4e49\u4e0d\u5927\u3002\u53e6\u5916\u51fd\u6570\u4e0d\u50cf\u7c7b\u90a3\u4e48\u590d\u6742\uff0c\u4e5f\u5c31\u6ca1\u5fc5\u8981\u8bfb\u5165\u5b9a\u4e49\u65f6\u5c31\u521b\u5efa\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u5176\u4e8c\uff0c\u7c7b\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e0d\u5728\u540d\u5b57\u641c\u7d22\u8def\u5f84\u4e2d\u3002 \u4f8b\u5982\uff1a class A : pi = 3.1415926 def print_pi ( self ): print ( pi ) A () . print_pi () NameError: name 'pi' is not defined \u7c7b A \u662f print_pi \u65b9\u6cd5\u7684\u5916\u5c42\u4f5c\u7528\u57df\uff0c\u6309\u7167\u8bbe\u60f3\uff0c print_pi \u65b9\u6cd5\u4e2d\u627e\u4e0d\u5230\u53d8\u91cf pi \uff0c\u5e94\u8be5\u4f1a\u5230\u4e0a\u4e00\u5c42\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u4f46\u662f print_pi \u65b9\u6cd5\u5e76\u6ca1\u6709\u5728\u7c7b A \u7684\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u800c\u662f\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u3002 \u53c8\u4f8b\u5982\uff1a class A (): a = 1 b = [ a + i for i in range ( 3 )] #NameError: name 'a' is not defined \u6267\u884c\u4e0a\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7c7b A \u5185\u5217\u8868\u63a8\u5bfc\u5f0f\u65e0\u6cd5\u8c03\u53d6 a \u7684\u503c\u3002 Python3\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u4f1a\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u4f46\u5728\u51fd\u6570\u4e2d\uff0c\u5b8c\u5168\u6ca1\u95ee\u9898\uff1a def func(): a = 1 b = [a + i for i in range(3)] print(b) func() #[1, 2, 3] \u56e0\u6b64\uff0c\u7c7b A \u4e2d\u7684 a \u4e0d\u540c\u4e8e\u51fd\u6570 func \u4e2d\u7684 a \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u88ab\u4efb\u610f\u5f15\u7528\u3002\u4e4b\u6240\u4ee5\u5f3a\u8c03\u201d\u4e0d\u53ef\u4ee5\u88ab\u4efb\u610f\u8bfb\u53d6\u201d\uff0c\u539f\u56e0\u5728\u4e8e\u5728\u7c7b A \u7684\u5c40\u90e8\u7a7a\u95f4\u5185\uff0c a \u5728\u5f53\u524d\u5c42\u7ea7\u7684\u4f5c\u7528\u57df\u662f\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\u7684\uff1a class A (): a = 1 c = a + 2 A . c # 3 3 \u56e0\u6b64\uff0c\u7c7b\u5185\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u4ee3\u7801\uff08\u65b9\u6cd5\u3001\u63a8\u5bfc\u5f0f\u7b49\uff09\u4e25\u683c\u4e0a\u4e0d\u662f\u4f5c\u7528\u57df\u3002 \u811a\u6ce8 \u53c2\u8003 python\u7684\u5d4c\u5957\u51fd\u6570\u4e2d\u5c40\u90e8\u4f5c\u7528\u57df\u95ee\u9898? Python\u8fdb\u9636 - \u5bf9\u8c61\uff0c\u540d\u5b57\u4ee5\u53ca\u7ed1\u5b9a \u5373 {name:object} \u3002 \u21a9 \u5f53\u524d\u7684CPython\u5df2\u7ecf\u5b9e\u73b0\u7b2c\u4e00\u6761\u9650\u5236\uff0c\u81f3\u5c11\u57280.29.14\u7248\u672c\u7684CPython\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u3002 \u21a9","title":"3.2.\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_1","text":"Namespace : namespace \u662f\u4e00\u4e2a\u4ece name \u5230 object \u7684\u6620\u5c04\u3002\u73b0\u5728\u5927\u90e8\u5206\u7684 namespace \u901a\u8fc7Python\u5b57\u5178 1 \u5b9e\u73b0\uff0c\u5c06\u6765\u53ef\u80fd\u4f1a\u6539\u53d8\u5b9e\u73b0\u65b9\u5f0f\u3002 namespace\uff1a\u4e2d\u6587\u79f0\u4e3a\u547d\u540d\u7a7a\u95f4\uff0c\u6216\u8005\u540d\u5b57\u7a7a\u95f4\u3002 \u547d\u540d\u7a7a\u95f4\u6700\u91cd\u8981\u7684\u4f5c\u7528\u662f\u907f\u514d\u540d\u5b57\u51b2\u7a81\uff0c\u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5b58\u5728\u540c\u540d\u53d8\u91cf\u3002","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespace","text":"\u4e00\u822c\u800c\u8a00\uff0cname \u4ea7\u751f\u5730\u70b9\u51b3\u5b9a\u5176\u6240\u5904\u7684 namespace\u3002\u4f8b\u5982\uff0c\u5728\u51fd\u6570\u5185\u5b9a\u4e49\u7684 name \u4f1a\u4f4d\u4e8e\uff08\u51fd\u6570\u7684\uff09\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f46\u4f7f\u7528\u4e86 global \u3001 nonlocal \u8bed\u53e5\u4f1a\u6539\u53d8\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e2a\u5728\u540e\u9762\u4f1a\u8bf4\u5230\u3002 built-in namespace \uff1abuiltins \u6a21\u5757\u5b9a\u4e49\u7684\u6240\u6709\u540d\u5b57\u5b58\u5728\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u540d\u5b57\u5305\u62ec\u5185\u7f6e\u51fd\u6570\u3001\u5185\u7f6e\u5f02\u5e38\u3001\u5185\u7f6e\u5e38\u91cf\u3001\u5185\u7f6e\u7c7b\u578b\u3002\u5982\u679c\u662fPython 2\uff0c\u5219\u662f __builtin__ \u6a21\u5757\u3002 global namespace \uff1a\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5305\u62ec\u6240\u6709\u5728\u6a21\u5757\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u7c7b\u3001\u51fd\u6570\u3001\u5e38\u91cf\u3001\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u3002 local namespace \uff1a\u76f8\u5bf9\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6bcf\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u90fd\u6709\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u6216\u7c7b\u6240\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u53c2\u6570\u3001\u51fd\u6570\u5185\u7684\u53d8\u91cf\u3001\u7c7b\u5c5e\u6027\u3001\u7c7b\u65b9\u6cd5\u7b49\u3002 enclosing namespace \uff1a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e0d\u4ec5\u8bb0\u5f55\u4e86\u5f53\u524d\u5d4c\u5957\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u8fd8\u8bb0\u5f55\u4e86\u5d4c\u5957\u51fd\u6570\u5f15\u7528\u7684\u5916\u90e8\u53d8\u91cf\u3002","title":"Namespace \u7684\u79cd\u7c7b"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespace_1","text":"\u4e0d\u540c\u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\u6709\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\uff1a built-in\uff1a\u5728 Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\uff0c\u89e3\u91ca\u5668\u9000\u51fa\u65f6\u9500\u6bc1 global\uff1a\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u89e3\u91ca\u5668\u8bfb\u5165\u65f6\u521b\u5efa\uff0c\u901a\u5e38\u4e5f\u4f1a\u4e00\u76f4\u4fdd\u5b58\u5230\u89e3\u91ca\u5668\u9000\u51fa\uff0c\u9664\u975e\u4f7f\u7528 del \u8bed\u53e5\u3002 local\uff1a\u8fd9\u91cc\u8981\u533a\u5206 function \u4ee5\u53ca class \u5b9a\u4e49\uff1a \u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u51fd\u6570\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u51fd\u6570\u8fd4\u56de\u6216\u8005\u4ea7\u751f\u672a\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u65f6\u9500\u6bc1\u3002 \u7c7b\u5b9a\u4e49\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u89e3\u91ca\u5668\u8bfb\u5230\u7c7b\u5b9a\u4e49\u521b\u5efa\uff0c\u79bb\u5f00\u7c7b\u5b9a\u4e49\u65f6\u521b\u5efaclass object\u3002\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff08\u89c1\u5b98\u65b9\u5bf9\u7c7b\u5b9a\u4e49\u7684 \u8bf4\u660e \uff09\u3002","title":"Namespace\u751f\u547d\u5468\u671f"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespace_2","text":"\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 locals() \u6765\u8bbf\u95ee \u5168\u5c40 \uff08\u6a21\u5757\u7ea7\u522b\uff09\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 globals() \u6765\u8bbf\u95ee \u867d\u7136\u90fd\u662f\u8fd4\u56de\u547d\u540d\u7a7a\u95f4\uff0c\u4f46 globals() \u548c locals() \u6709\u4e00\u70b9\u4e0d\u4e00\u6837\u3002 locals() \u8fd4\u56de\u7684\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 locals() \u5bf9\u8c61\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5c40\u90e8\u540d\u5b57\u7a7a\u95f4\u3002 globals \u8fd4\u56de\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 globals() \u5bf9\u8c61\u4f1a\u5f71\u54cd\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 # \u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u65e0\u6548 def change_local (): x = 123 print ( \"\u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\" , locals (), sep = \"\uff1a\" ) locals ()[ \"x\" ] = 6789 print ( \"\u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\" , f \"x= { x } \" , sep = \"\uff1a\" ) change_local () \u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a{'x': 123} \u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\uff1ax=123 # \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548 y = 123 globals ()[ \"y\" ] = 456 print ( \"\u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a\" , f \"y= { y } \" ) \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a y=456","title":"\u67e5\u770bNamespace"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_2","text":"scope : scope \u662fPython\u7a0b\u5e8f\u7684\u4e00\u5757\u6587\u672c\u533a\u57df\uff08\u5373\u4e00\u4e2a\u4ee3\u7801\u533a\u57df\uff09\uff0c\u5728\u8fd9\u4e2a\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95eenamespace \u3002 \u76f4\u63a5\u8bbf\u95ee\u610f\u5473\u7740\u65e0\u987b\u7279\u6027\u7684\u6307\u660e\u5f15\u7528\u3002\u5728Python\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u662f\u6307\u76f4\u63a5\u4f7f\u7528name\u8bbf\u95ee\u5bf9\u8c61\uff0c\u5982 name \uff0c\u8fd9\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 name \uff1b\u800c\u95f4\u63a5\u8bbf\u95ee\u662f\u6307\u4f7f\u7528\u5f62\u5982 objname.attrname \u7684\u65b9\u5f0f\uff0c\u5373\u5f15\u7528\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u8fd9\u4e0d\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 attrname \uff0c\u800c\u662f\u641c\u7d22\u540d\u5b57 objname \uff0c\u518d\u8bbf\u95ee\u5176\u5c5e\u6027\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u4f5c\u7528\u57df\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u53d1\u751f\u4f5c\u7528\u7684\u4ee3\u7801\u533a\u57df\uff0c\u53d1\u751f\u4f5c\u7528\u662f\u6307\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88ab\u4f5c\u7528\u57df\u76f4\u63a5\u8bbf\u95ee\u3002","title":"\u4f5c\u7528\u57df"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_3","text":"\u547d\u540d\u7a7a\u95f4\u4fdd\u5b58\u7740\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff0c\u6620\u5c04\u5173\u7cfb\u5728\u4f5c\u7528\u57df\u4e2d\u88ab\u5b9a\u4e49\uff0c\u540c\u65f6\u4f5c\u7528\u57df\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\u8bbf\u95ee\u5bf9\u8c61\u3002\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\uff0c\u5b83\u4e5f\u5c31\u662f\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002\u6709\u4e9b\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u8bbf\u95ee\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u662f\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002 \u4f5c\u7528\u57df\u662f\u9759\u6001\u7684\uff08\u5b83\u53ea\u662f\u4ee3\u7801\u6587\u672c\uff09\uff0c\u800c\u547d\u540d\u7a7a\u95f4\u662f\u52a8\u6001\u7684\uff0c\u547d\u540d\u7a7a\u95f4\u968f\u7740\u89e3\u91ca\u5668\u7684\u6267\u884c\u800c\u4ea7\u751f\u3002 \u6709\u4e9b\u6587\u7ae0\u8ba4\u4e3a\u52a8\u6001\u7684\u4f5c\u7528\u57df\u5c31\u662f\u547d\u540d\u7a7a\u95f4\u3002\u5176\u5b9e\u5e76\u4e0d\u662f\uff0c\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u6620\u5c04\uff0c\u4f5c\u7528\u57df\u662f\u4e00\u5757\u4ee3\u7801\u533a\u57df\u3002 Python\u5bf9\u8c61\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u88ab\u8bbf\u95ee\uff0c\u800c\u4f5c\u7528\u57df\u5219\u9650\u5236\u4e86Python\u5bf9\u8c61\u7684\u4f7f\u7528\u8303\u56f4\u3002","title":"\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u7684\u5173\u7cfb"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#legb","text":"\u5f53\u4e00\u884c\u4ee3\u7801\u9700\u8981\u4f7f\u7528\u540d\u5b57 X \u6240\u5bf9\u5e94\u7684\u503c\uff0c Python\u4f1a\u4ece\u5f53\u524d\u5c42\u7ea7\u7684Namespace\u5f00\u59cb \uff0c\u5e76\u6839\u636e\u4ee5\u4e0b\u987a\u5e8f\uff0c\u53bb\u67e5\u627e\u540d\u5b57 X \uff1a local namespace \uff1a\u5305\u542b\u5c40\u90e8\u540d\u5b57\u7684\u6700\u5185\u5c42\uff08innermost\uff09\u4f5c\u7528\u57df\uff0c\u5982\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7c7b\u7684\u5185\u90e8\u5c40\u90e8\u4f5c\u7528\u57df\u3002 Enclosing \uff1a\u6839\u636e\u5d4c\u5957\u5c42\u6b21\u4ece\u5185\u5230\u5916\u641c\u7d22\uff0c\u5305\u542b\u975e\u5c40\u90e8\uff08nonlocal\uff09\u975e\u5168\u5c40\uff08nonglobal\uff09\u540d\u5b57\u7684\u4efb\u610f\u5c01\u95ed\u51fd\u6570\u7684\u4f5c\u7528\u57df\u3002\u5982\u4e24\u4e2a\u5d4c\u5957\u7684\u51fd\u6570\uff0c\u5185\u5c42\u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5916\u5c42\u51fd\u6570\u4f5c\u7528\u57df\u5c31\u662f\u5185\u5c42\u51fd\u6570\u7684 Enclosing \u4f5c\u7528\u57df\u3002 global built-in NameError \uff1a\u5982\u679c Python \u5728\u4ee5\u4e0a4\u4e2anamespace\u627e\u4e0d\u5230 X \uff0c\u5c06\u653e\u5f03\u641c\u7d22\u5e76\u629b\u51fa NameError \u5f02\u5e38\uff1a NameError: name 'a' is not defined \u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\uff0clocal\u3001global\u3001built-in\u4e09\u4e2anamespace\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46Enclosing namespace\u4e0d\u4e00\u5b9a\u5b58\u5728\u3002","title":"\u540d\u5b57\u641c\u7d22\u987a\u5e8f\uff08LEGB\uff09"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespacescope","text":"\u4e0d\u80fd\u5728\u540d\u5b57\u672a\u5b9a\u4e49\u524d\u5f15\u7528\u8be5\u540d\u5b57\uff08\u547d\u540d\u7a7a\u95f4\u4e0d\u5b58\u5728\u8be5\u6620\u5c04\u5173\u7cfb\uff09\u3002 built-in\u3001global\u4e24\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u5165\u662f\u4e0d\u80fd\u591f\u901a\u8fc7\u4ee3\u7801\u64cd\u4f5c\u7684\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5f15\u5165\u5b83\u4eec\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u5f15\u5165\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u3002built-in\u547d\u540d\u7a7a\u95f4\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff08\u5df2\u7ecf\u9884\u5b9a\u4e49\u597d\uff09\uff0c\u4f46global\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88abPython\u4ee3\u7801\u4fee\u6539\u3002 \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49\u3001\u63a8\u5bfc\u5f0f\u4f1a\u5f15\u5165local\u547d\u540d\u7a7a\u95f4 \uff0c\u95ed\u5305\u51fd\u6570\u5b9a\u4e49\u4f1a\u5f15\u5165enclosing\u547d\u540d\u7a7a\u95f4\u3002 \u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u88ab\u4fee\u6539\u7684\u60c5\u51b5\uff1a \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49 \u8d4b\u503c\u8bed\u53e5 import \u8bed\u53e5\u3001 if \u8bed\u53e5\u3001 for \u8bed\u53e5\u3001 while \u8bed\u53e5 if \u3001 for \u3001 while \u8bed\u53e5\u5e76\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f5c\u7528\u8303\u56f4\u6700\u5927\u7684\u547d\u540d\u7a7a\u95f4\u662fglobal namespace\uff0c\u4f46global namespace\u4e5f\u53ea\u662f\u6a21\u5757\u7ea7\u522b\u7684\u3002 a \u6a21\u5757\u4e0d\u80fd\u76f4\u63a5\u5f15\u7528\u5728 b \u6a21\u5757\u5b9a\u4e49\u7684name\uff0c\u5373\u4f7f a \u6a21\u5757\u5df2\u7ecf\u5bfc\u5165\u4e86\u6574\u4e2a b \u6a21\u5757\uff1a import b \u3002\u9664\u975e\u76f4\u63a5\u5bfc\u5165name\uff1a from b import name \u3002 \u5bfc\u5165 b \u6a21\u5757\u4e2d\u5176\u4e2d\u4e00\u4e2aname\uff1a from b import name \uff0c\u6574\u4e2a b \u6a21\u5757\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u4e3a Python \u5e76\u4e0d\u77e5\u9053 name \u5728 b.py \u6587\u6863\u7684\u4f55\u5904\uff0c\u4e3a\u4e86\u80fd\u591f\u627e\u5230 name \uff0cPython \u9700\u8981\u6267\u884c\u6574\u4e2a b.py\u3002 import \u8bed\u53e5\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8global namespace\uff0c\u4f8b\u5982 import \u8bed\u53e5\u5199\u5728\u51fd\u6570\u5185\u3002 \u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u5916\u5c42\u4f5c\u7528\u57df\u4e0d\u80fd\u5f15\u7528\u5185\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 def try_to_define_name (): '''\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u5e76\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u6574\u6570\u5bf9\u8c611''' i = 1 # \u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u5148\u8c03\u7528\u51fd\u6570\u5b9a\u4e49i try_to_define_name () # \u5728\u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u660e\u660e\u8c03\u7528\u4e86\u51fd\u6570\uff0c\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u53ef\u662f\u8fd8\u662f\u627e\u4e0d\u5230\u8fd9\u4e2a\u540d\u5b57\u3002 print ( i ) NameError: name 'i' is not defined \u867d\u7136\u5b9a\u4e49\u4e86\u540d\u5b57 i \uff0c\u4f46\u662f\u5b9a\u4e49\u5728\u4e86\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u6309\u7167 LEGB \u641c\u7d22\u89c4\u5219\uff0c\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u81ea\u7136\u8bbf\u95ee\u4e0d\u5230\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u547d\u540d\u7a7a\u95f4\uff1b\u518d\u8005\uff0c\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u88ab\u9500\u6bc1\u4e86\u3002","title":"Namespace\u548cscope\u603b\u7ed3"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#global-nonlocal","text":"\u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u4efb\u4f55\u65f6\u5019\uff0cPython\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u5374\u4e0d\u53ef\u4ee5\u5728\u5185\u5c42\u4f5c\u7528\u57df\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u53d8\u91cf\u3002 \u53ef\u4ee5\u8bfb\u53d6\u5168\u90e8\u53d8\u91cf\uff0c\u8fd9\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a\u4efb\u4f55\u65f6\u5019\uff0cglobal namespace\u90fd\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002\u4f46\u4e3a\u4ec0\u4e48\u5728\u5185\u5c42\u4f5c\u7528\u57df\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u5374\u4e0d\u80fd\u88ab\u4fee\u6539\u5462\uff1f\u8fd9\u770b\u8d77\u6765\u50cf\u662fPython\u7684\u4e00\u4e2a\u89c4\u5b9a\uff0c\u4f46\u5176\u5b9e\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002\u5728Python\u4e2d\u4fee\u6539\u53d8\u91cf\u610f\u5473\u7740\u5c06\u4e00\u4e2a\u540d\u5b57\u7ed1\u5b9a\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u9700\u8981\u4f7f\u7528assignment\u8fd0\u7b97\u7b26 = \u3002 \u8fd9\u610f\u5473\u7740 = \u5de6\u8fb9\u7684\u540d\u5b57\u4f1a\u88ab\u52a0\u5165\u5f53\u524d\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u540d\u5b57\u5bf9\u5e94\u7740 = \u53f3\u8fb9\u7684\u5bf9\u8c61\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a a = 1 def change_a (): a = 10 change_a () a # 1 1 a = 10 \u8bed\u53e5\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\uff0c\u5f53\u5b83\u88abPython\u6267\u884c\u65f6\uff0cPython\u4f1a\u5c06 a \u52a0\u5165\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u4f1a\u5c06 a \u89c6\u4f5c\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684 a \u3002\u5f53\u6211\u4eec\u5728\u6700\u5916\u5c42\u4f5c\u7528\u57df\u5f15\u7528 a \u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0cPython\u4f1a\u4ece a \u6240\u5728\u7684\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4\uff08\u5373\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff09\u5f00\u59cb\u641c\u7d22 a \u5bf9\u5e94\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u641c\u7d22\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u518d\u8005\uff0c\u6b64\u65f6\u51fd\u6570 change_a() \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5df2\u7ecf\u88ab\u9500\u6bc1\uff0c\u5373\u4f7f\u60f3\u641c\u7d22\u4e5f\u641c\u7d22\u4e0d\u5230\u3002 \u76f8\u4fe1\u4f60\u4ece\u4e0a\u9762\u7684\u53d9\u8ff0\u5df2\u7ecf\u610f\u8bc6\u5230\uff0c\u5982\u679c\u60f3\u8ba9Python\u5728\u5185\u5c42\u4f5c\u7528\u57df\u4fee\u6539\u5916\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u9700\u8981\u8ba9Python\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u6765\u81ea\u5916\u5c42\u4f5c\u7528\u57df\u3002 global \u8bed\u53e5\u548c nonlocal \u8bed\u53e5\u6b63\u662f\u53ef\u4ee5\u8d77\u5230\u8fd9\u6837\u7684\u4f5c\u7528\u3002 global \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26\u5c06\u88ab\u89e3\u6790\u4e3a\u5168\u5c40\u53d8\u91cf\u3002 \u4f7f\u7528global\u65f6\u6709\u4ee5\u4e0b\u4e24\u6761\u9650\u5236\uff1a \u5728\u540c\u4e00\u4ee3\u7801\u5757\u4e2d\uff0c\u5217\u5728global\u8bed\u53e5\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\u4e0d\u80fd\u5728\u8be5global\u8bed\u53e5\u524d\u51fa\u73b0\u3002 \u5217\u5728global \u8bed\u53e5\u540e\u7684\u6807\u8bc6\u7b26\u4e0d\u80fd\u88ab\u5b9a\u4e49\u6210\u5f62\u53c2\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728for\u5faa\u73af\u63a7\u5236\u7684\u76ee\u6807\u3001\u7c7b\u5b9a\u4e49\u548c\u51fd\u6570\u5b9a\u4e49\uff0c\u6216\u8005import\u8bed\u53e5\u4e2d\u3002 CPython\u5b9e\u73b0\u7ec6\u8282 \u5f53\u524d\u5b9e\u73b0\u5e76\u672a\u5f3a\u5236\u5c65\u884c\u4e0a\u9762\u4e24\u6761\u9650\u5236 2 \uff0c\u4f46\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u6ee5\u7528\u8fd9\u79cd\u81ea\u7531\uff0c\u56e0\u4e3a\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u5f3a\u5236\u5c65\u884c\u5b83\u4eec\u6216\u8005\u4e0d\u7559\u75d5\u8ff9\u7684\u6539\u53d8\u7a0b\u5e8f\u542b\u4e49\u3002 nonlocal \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26 \u5173\u8054 \u5230 \u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u91cc\u5b9a\u4e49\u8fc7\u7684\u540c\u540d\u53d8\u91cf\uff08\u4e0d\u5305\u62ec\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u662f\u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff09\u3002 def scope_test (): def do_local (): spam = \"local spam of do_local\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam of do_nonlocal\" def do_global (): global spam spam = \"global spam of do_global\" spam = \"test spam of scope_test\" # do_local\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam do_local () print ( \"After local assignment:\" , spam ) # do_nonlocal\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u5168\u5c40\u7684spam do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) # do_global \u51fd\u6570\u5185\u58f0\u660e\u7684spam\u5b58\u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u800c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684 do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) After local assignment: test spam of scope_test After nonlocal assignment: nonlocal spam of do_nonlocal After global assignment: nonlocal spam of do_nonlocal In global scope: global spam of do_global nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e24\u4e2a\u4e0d\u540c\u70b9\uff1a \u5176\u4e00\uff0c global \u8bed\u53e5\u53ea\u662f\u58f0\u660e\u6807\u8bc6\u7b26\u6765\u5b58\u5728\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u521b\u5efa\u8be5\u6807\u8bc6\u7b26\uff1b nonlocal \u8bed\u53e5\u5219\u4f1a\u5728\u5b50\u51fd\u6570\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u4e0e\u7236\u51fd\u6570\u53d8\u91cf\u540c\u540d\u7684\u6807\u8bc6\u7b26\uff1a gv = 'a global var' def func (): global gv lv = 'a local var' print ( locals ()) def inn_func (): nonlocal lv global gv print ( locals ()) return inn_func a = func () a () {'lv': 'a local var'} {'lv': 'a local var'} \u4e4b\u6240\u4ee5 nonlocal \u8bed\u53e5\u4e0e global \u8bed\u53e5\u7684\u5904\u7406\u4e0d\u540c\uff0c\u662f\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u751f\u5b58\u671f\u5f88\u957f\uff0c\u5728\u6a21\u5757\u5185\u968f\u65f6\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u800c\u7236\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5728\u7236\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4fbf\u4f1a\u76f4\u63a5\u91ca\u653e\uff0c\u56e0\u6b64 nonlocal \u8bed\u53e5\u5fc5\u987b\u5c06\u7236\u51fd\u6570\u7684\u6807\u8bc6\u7b26\u548c\u5f15\u7528\u5199\u5165enclosing namespace\u3002 \u5176\u4e8c\uff0c global \u8bed\u53e5\u53ef\u4ee5\u58f0\u660e\u5168\u5c40\u4f5c\u7528\u57df\u8fd8\u6ca1\u5b58\u5728\u7684\u540d\u5b57\uff0c\u800c nonlocal \u8bed\u53e5\u53ea\u80fd\u5c06\u5b83\u58f0\u660e\u7684\u540d\u5b57\u5173\u8054\u5230enclosing\u4f5c\u7528\u57df\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u7ed1\u5b9a\uff1a # nonlocal \u8bed\u53e5\u4e4b\u524d\u7684eclosing\u4f5c\u7528\u57df\u4e0d\u5b58\u5728spam \u5219\u62a5\u9519 def scope_test (): def do_nonlocal (): # \u7236\u51fd\u6570\u4f5c\u7528\u57df\u8981\u5148\u5b9a\u4e49spam\uff0c\u5426\u5219\u62a5\u9519 nonlocal spam spam = \"nonlocal spam of do_nonlocal\" scope_test () File \"<ipython-input-1-e77162de9535>\", line 5 nonlocal spam ^ SyntaxError: no binding for nonlocal 'spam' found nonlocal \u8bed\u53e5\u53ea\u80fd\u58f0\u660e\u7684\u540d\u5b57\u4f1a\u7ed1\u5b9a\u5230\u79bb nonlocal \u8bed\u53e5\u6700\u8fd1\u7684enclosing \u4f5c\u7528\u57df\uff08\u5982\u679cenclosing \u4f5c\u7528\u57df\u5b58\u5728 nonlocal \u8bed\u53e5\u58f0\u660e\u7684\u540d\u5b57\uff09\uff1a def scope_test (): spam = \"local spam of scope_test\" def do_local (): spam = \"local spam of do_local\" print ( \"After local assignment:\" , spam ) def do_nonlocal (): # \u901a\u8fc7nonlocal\u58f0\u660e\u5c06spam\u548c\u6700\u8fd1\u7684enclosing\u4f5c\u7528\u57df\u7684spam\u5173\u8054 # \u6240\u4ee5\u5173\u8054\u7684\u662fdo_local\u51fd\u6570\u7684spam nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_local () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () After local assignment: local spam of do_local After nonlocal assignment: nonlocal spam of do_nonlocal After nonlocal assignment, scope_test's spam: local spam of scope_test \u56e0\u6b64 nonlocal \u8bed\u53e5\u91cd\u65b0\u7ed1\u5b9a\u7684name\u7684\u771f\u5b9e\u4f5c\u7528\u57df\u662f\u4e0d\u6e05\u695a\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5df2\u7ecf\u5b58\u5728\u7684name\u672c\u6765\u4f4d\u4e8e\u90a3\u4e00\u5c42\u4f5c\u7528\u57df\u3002 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e00\u4e2a\u76f8\u540c\u70b9\uff1a \u5f53\u524d\u4f5c\u7528\u57df\u4e0d\u80fd\u5728 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u4e4b\u524d\u7ed1\u5b9a\u4e24\u8005\u58f0\u660e\u7684\u6807\u8bc6\u7b26\uff1a # global def scope_test (): spam = \"conflict\" global spam spam = \"nonlocal spam of do_nonlocal\" scope_test () # nonlocal def scope_test (): spam = \"local spam of scope_test\" def do_nonlocal (): spam = \"conflict\" nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () File \"<ipython-input-1-d9548726e53c>\", line 5 global spam ^ SyntaxError: name 'spam' is assigned to before global declaration","title":"global\u548c nonlocal"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_4","text":"\u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u90fd\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u5b83\u4eec\u6267\u884c\u673a\u5236\u4e0d\u4e00\u6837\uff0c\u6709\u4e0d\u5c0f\u7684\u533a\u522b\u3002 \u5176\u4e00\uff0c\u51fd\u6570\u521d\u59cb\u5316\u65f6\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u7c7b\u521d\u59cb\u5316\u65f6\u4f1a\u88ab\u6267\u884c\u3002 Python\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c\uff1a def func (): print ( \"executed\" ) Python\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u7c7b\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff1a class A : print ( \"executed_A\" ) def A_func ( self ): print ( \"executed_A_func\" ) class B : print ( \"executed_B\" ) class C : print ( \"executed_C\" ) executed_A executed_B executed_C \u8fd9\u770b\u8d77\u6765\u611f\u89c9\u6709\u70b9\u4e0d\u53ef\u601d\u8bae\uff0c\u5927\u5bb6\u90fd\u662f\u5b9a\u4e49\uff0c\u4e3a\u4ec0\u4e48\u7c7b\u5b9a\u4e49\u4f1a\u88ab\u6267\u884c\uff0c\u96be\u9053\u4e0d\u5e94\u8be5\u662f\u5b9a\u4e49\u88ab\u5f15\u7528\u65f6\u624d\u6267\u884c\u5417\uff1f \u5176\u5b9e\u8fd9\u4e5f\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002Python\u89e3\u91ca\u5668\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u53ea\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u51fd\u6570\u540d\uff0c\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u81ea\u7136\u4e0d\u9700\u8981\u6267\u884c\u51fd\u6570\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u52a8\u6001\u6027\uff1a\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4ea7\u751f\u3002 \u800c\u7c7b\u5b9a\u4e49\u5b9e\u9645\u4e0a\u662f\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff0c\u56e0\u6b64Python\u89e3\u91ca\u5668\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u4e0d\u4ec5\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u7c7b\u540d\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u800c\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4f1a\u4ea7\u751f\uff0c\u56e0\u6b64\u7c7b\u5b9a\u4e49\u9700\u8981\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5c31\u88ab\u6267\u884c\u3002\u6ce8\u610f\uff1a\u7c7b\u65b9\u6cd5\u5185\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u4e00\u6837\uff0c\u662f\u4e0d\u4f1a\u88ab\u6267\u884c\u7684\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u56e0\u4e3a\u7c7b\u5177\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u521b\u5efa\u7c7b\u5c5e\u6027\u5c31\u5fc5\u987b\u6267\u884c\u4ee3\u7801\uff08\u8fdb\u884c\u8d4b\u503c\uff09\u3002\u90a3\u4e3a\u4ec0\u4e48\u5728\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u521b\u5efa\u7c7b\u5c5e\u6027\u5462\uff1f\u56e0\u4e3a\u7c7b\u662f\u521b\u5efa\u5b9e\u4f8b\u3001\u751f\u6210\u5176\u4ed6\u7c7b\uff08\u6d89\u53ca\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49\uff09\u7684\u5bf9\u8c61\uff0c\u5fc5\u987b\u5728\u5b9e\u4f8b\u4e4b\u524d\u88ab\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u52a0\u8f7d\u65f6\u5c31\u88ab\u521b\u5efa\u6709\u52a9\u4e8e\u63d0\u9ad8\u6548\u7387\u548c\u964d\u4f4e\u903b\u8f91\u590d\u6742\u5ea6\u3002 \u53e6\u5916\uff0c\u7c7b\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u7c7b\u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u5148\u521b\u5efa\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7279\u70b9\u5c31\u8981\u6c42\u7c7b\u521d\u59cb\u5316\u65f6\u5c31\u521b\u5efa\u7c7b\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u7528\u4e8e\u7edf\u4e00\u7ba1\u7406\u67d0\u4e00\u7c7b\u5e38\u91cf\uff1a class Math_Constant : pi = 3.1415926 e = 2.7182818 sqrt_2 = 1.4142135 rho = 1.3247195 \u5982\u679c Math_Constant \u7684\u7c7b\u5c5e\u6027\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u624d\u80fd\u88ab\u8c03\u7528\uff0c\u90a3\u5c31\u592a\u9ebb\u70e6\u4e86\uff0c\u800c\u4e14\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u4e5f\u5c31\u6ca1\u4e86\u610f\u4e49\u3002 \u800c\u65b9\u6cd5\u672c\u8d28\u662f\u51fd\u6570\uff0c\u4e0d\u4f1a\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u88ab\u6267\u884c\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u4e00\u822c\u6765\u8bf4\uff0c\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e3b\u8981\u4e0e\u53c2\u6570\u6709\u5173\uff0c\u800c\u53c2\u6570\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u624d\u4f20\u5165\uff0c\u521b\u5efa\u4e86\u547d\u540d\u7a7a\u95f4\u4e5f\u610f\u4e49\u4e0d\u5927\u3002\u53e6\u5916\u51fd\u6570\u4e0d\u50cf\u7c7b\u90a3\u4e48\u590d\u6742\uff0c\u4e5f\u5c31\u6ca1\u5fc5\u8981\u8bfb\u5165\u5b9a\u4e49\u65f6\u5c31\u521b\u5efa\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u5176\u4e8c\uff0c\u7c7b\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e0d\u5728\u540d\u5b57\u641c\u7d22\u8def\u5f84\u4e2d\u3002 \u4f8b\u5982\uff1a class A : pi = 3.1415926 def print_pi ( self ): print ( pi ) A () . print_pi () NameError: name 'pi' is not defined \u7c7b A \u662f print_pi \u65b9\u6cd5\u7684\u5916\u5c42\u4f5c\u7528\u57df\uff0c\u6309\u7167\u8bbe\u60f3\uff0c print_pi \u65b9\u6cd5\u4e2d\u627e\u4e0d\u5230\u53d8\u91cf pi \uff0c\u5e94\u8be5\u4f1a\u5230\u4e0a\u4e00\u5c42\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u4f46\u662f print_pi \u65b9\u6cd5\u5e76\u6ca1\u6709\u5728\u7c7b A \u7684\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u800c\u662f\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u3002 \u53c8\u4f8b\u5982\uff1a class A (): a = 1 b = [ a + i for i in range ( 3 )] #NameError: name 'a' is not defined \u6267\u884c\u4e0a\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7c7b A \u5185\u5217\u8868\u63a8\u5bfc\u5f0f\u65e0\u6cd5\u8c03\u53d6 a \u7684\u503c\u3002 Python3\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u4f1a\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u4f46\u5728\u51fd\u6570\u4e2d\uff0c\u5b8c\u5168\u6ca1\u95ee\u9898\uff1a def func(): a = 1 b = [a + i for i in range(3)] print(b) func() #[1, 2, 3] \u56e0\u6b64\uff0c\u7c7b A \u4e2d\u7684 a \u4e0d\u540c\u4e8e\u51fd\u6570 func \u4e2d\u7684 a \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u88ab\u4efb\u610f\u5f15\u7528\u3002\u4e4b\u6240\u4ee5\u5f3a\u8c03\u201d\u4e0d\u53ef\u4ee5\u88ab\u4efb\u610f\u8bfb\u53d6\u201d\uff0c\u539f\u56e0\u5728\u4e8e\u5728\u7c7b A \u7684\u5c40\u90e8\u7a7a\u95f4\u5185\uff0c a \u5728\u5f53\u524d\u5c42\u7ea7\u7684\u4f5c\u7528\u57df\u662f\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\u7684\uff1a class A (): a = 1 c = a + 2 A . c # 3 3 \u56e0\u6b64\uff0c\u7c7b\u5185\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u4ee3\u7801\uff08\u65b9\u6cd5\u3001\u63a8\u5bfc\u5f0f\u7b49\uff09\u4e25\u683c\u4e0a\u4e0d\u662f\u4f5c\u7528\u57df\u3002","title":"\u7c7b\u7684\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_5","text":"","title":"\u811a\u6ce8"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_6","text":"python\u7684\u5d4c\u5957\u51fd\u6570\u4e2d\u5c40\u90e8\u4f5c\u7528\u57df\u95ee\u9898? Python\u8fdb\u9636 - \u5bf9\u8c61\uff0c\u540d\u5b57\u4ee5\u53ca\u7ed1\u5b9a \u5373 {name:object} \u3002 \u21a9 \u5f53\u524d\u7684CPython\u5df2\u7ecf\u5b9e\u73b0\u7b2c\u4e00\u6761\u9650\u5236\uff0c\u81f3\u5c11\u57280.29.14\u7248\u672c\u7684CPython\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u3002 \u21a9","title":"\u53c2\u8003"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html","text":"\u95ed\u5305\u7684\u6982\u5ff5 \u4ee5\u4e0b\u5f15\u7528\u81ea\u7ef4\u57fa\u767e\u79d1\u4e2d\u5173\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff1a \u5728 \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e2d\uff0c \u95ed\u5305 \uff08\u82f1\u8bed\uff1aClosure\uff09\uff0c\u53c8\u79f0 \u8bcd\u6cd5\u95ed\u5305 \uff08Lexical Closure\uff09\u6216 \u51fd\u6570\u95ed\u5305 \uff08function closures\uff09\uff0c\u662f\u5f15\u7528\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u88ab\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u5c06\u548c\u8fd9\u4e2a\u51fd\u6570\u4e00\u540c\u5b58\u5728\uff0c\u5373\u4f7f\u5df2\u7ecf\u79bb\u5f00\u4e86\u521b\u9020\u5b83\u7684\u73af\u5883\u4e5f\u4e0d\u4f8b\u5916\u3002\u6240\u4ee5\uff0c\u6709\u53e6\u4e00\u79cd\u8bf4\u6cd5\u8ba4\u4e3a\u95ed\u5305\u662f\u7531\u51fd\u6570\u548c\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u73af\u5883\u7ec4\u5408\u800c\u6210\u7684\u5b9e\u4f53\u3002\u95ed\u5305\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u5f15\u7528\u73af\u5883\u548c\u76f8\u540c\u7684\u51fd\u6570\u7ec4\u5408\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002 \u95ed\u5305\u7684\u6982\u5ff5\u51fa\u73b0\u4e8e60\u5e74\u4ee3\uff0c\u6700\u65e9\u5b9e\u73b0\u95ed\u5305\u7684\u7a0b\u5e8f\u8bed\u8a00\u662f Scheme \u3002\u4e4b\u540e\uff0c\u95ed\u5305\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e8e \u51fd\u6570\u5f0f\u7f16\u7a0b \u8bed\u8a00\u5982 ML\u8bed\u8a00 \u548c LISP \u3002\u5f88\u591a\u547d\u4ee4\u5f0f\u7a0b\u5e8f\u8bed\u8a00\u4e5f\u5f00\u59cb\u652f\u6301\u95ed\u5305\u3002 \u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\uff08\u5d4c\u5957\uff09\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u5185\u90e8\u7684\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u7684\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5219\u53ef\u80fd\u4ea7\u751f\u95ed\u5305\u3002\u8fd0\u884c\u65f6\uff0c\u4e00\u65e6\u5916\u90e8\u7684\u51fd\u6570\u88ab\u6267\u884c\uff0c\u4e00\u4e2a\u95ed\u5305\u5c31\u5f62\u6210\u4e86\uff0c\u95ed\u5305\u4e2d\u5305\u542b\u4e86\u5185\u90e8\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u6240\u9700\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\u7684\u5f15\u7528\u3002\u5176\u4e2d\u6240\u5f15\u7528\u7684\u53d8\u91cf\u79f0\u4f5c \u4e0a\u503c (upvalue)\u3002 \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff0c\u5e94\u8be5\u8fd8\u662f\u6bd4\u8f83\u76f4\u89c2\u7684\u3002\u7b80\u800c\u8a00\u4e4b\uff1a\u5185\u5d4c\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u5185\u5d4c\u51fd\u6570\u88ab\u6267\u884c\u65f6\uff0c\u5c31\u5f62\u6210\u4e00\u4e2a\u95ed\u5305\u3002\u4f8b\u5982\uff1a def outside ( a , b ): a = a b = b def inner (): y = a + b print ( locals ()) inner () # \u8c03\u7528outside\u51fd\u6570 inner\u88ab\u6267\u884c \u5f62\u6210\u95ed\u5305 outside ( 1 , 2 ) {'y': 3, 'a': 1, 'b': 2} inner() \u88ab\u6267\u884c\u65f6\uff0c\u521b\u5efa\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4f1a\u5305\u62ec\u5176\u5f15\u7528\u7684\u5916\u5c42\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u88ab\u79f0\u4e3a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff08enclosing namespace\uff09\u3002 \u6ce8\u610f\uff0c\u5728Python\u4e2d\uff0c\u5185\u5d4c\u51fd\u6570\u53ef\u4ee5\u88ab\u5916\u5c42\u51fd\u6570\u8fd4\u56de\uff0c\u4e5f\u5c31\u662fPython\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u95ed\u5305\u3002 \u7406\u89e3\u4ec0\u4e48\u662f\u95ed\u5305\u4e0d\u96be\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\u95ed\u5305\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u95ed\u5305\u7684\u4f5c\u7528 \u95ed\u5305\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u5b83\u53ef\u4ee5\u7ed1\u5b9a\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u751f\u6210\u95ed\u5305\u7684\u73af\u5883\uff08\u5916\u5c42\u51fd\u6570\uff09\u5df2\u7ecf\u91ca\u653e\uff0c\u95ed\u5305\u4ecd\u7136\u5b58\u5728\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u50cf\u7c7b\u751f\u6210\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u662f\u5916\u90e8\u51fd\u6570\u53ea\u5728\u8c03\u7528\u65f6\u751f\u6210\u547d\u540d\u7a7a\u95f4\uff0c\u6267\u884c\u5b8c\u6bd5\u540e\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u4f1a\u91ca\u653e\uff0c\u800c\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u521b\u5efa\uff0c\u4e00\u822cPython\u89e3\u91ca\u5668\u9000\u51fa\u624d\u91ca\u653e\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\u5bf9\u4e00\u4e9b\u9700\u8981\u91cd\u7528\u7684\u529f\u80fd\u4e14\u4e0d\u8db3\u4ee5\u5b9a\u4e49\u4e3a\u7c7b\u7684\u884c\u4e3a\uff0c\u4f7f\u7528\u95ed\u5305\u4f1a\u6bd4\u4f7f\u7528\u7c7b\u5360\u7528\u66f4\u5c11\u7684\u8d44\u6e90\uff0c\u4e14\u66f4\u8f7b\u5de7\u7075\u6d3b\u3002 \u4f8b\u5982\uff1a\u5047\u8bbe\u6211\u4eec\u4ec5\u4ec5\u60f3\u6253\u5370\u51fa\u5404\u7c7b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5206\u522b\u4ee5\u7c7b\u548c\u95ed\u5305\u6765\u5b9e\u73b0\uff1a # \u7c7b\u5b9e\u73b0 class Animal ( object ): def __init__ ( self , animal ): self . animal = animal def sound ( self , voice ): print ( self . animal , ':' , voice , \"...\" ) dog = Animal ( \"dog\" ) dog . sound ( \"wangwang\" ) dog . sound ( \"wowo\" ) dog : wangwang ... dog : wowo ... # \u95ed\u5305\u5b9e\u73b0 def voice ( animal ): def sound ( voc ): print ( animal , ':' , voc , \"...\" ) return sound dog = voice ( \"dog\" ) dog ( \"wangwang\" ) dog ( \"wowo\" ) dog : wangwang ... dog : wowo ... \u8f93\u51fa\u7ed3\u679c\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u663e\u7136\u7c7b\u7684\u5b9e\u73b0\u76f8\u5bf9\u7e41\u7410\uff0c\u4e14\u8fd9\u91cc\u53ea\u662f\u60f3\u8f93\u51fa\u4e00\u4e0b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5b9a\u4e49\u4e00\u4e2a Animal \u7c7b\u672a\u514d\u5c0f\u9898\u5927\u505a\uff0c\u800c\u4e14 voice \u51fd\u6570\u5728\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u5df2\u7ecf\u91ca\u653e\uff0c\u4f46 Animal \u7c7b\u53ca\u5176\u5b9e\u4f8b dog \u7684\u76f8\u5e94\u5c5e\u6027\u5374\u4e00\u76f4\u8d2e\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u800c\u8fd9\u79cd\u5185\u5b58\u5360\u7528\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u95ed\u5305\u8fd8\u6709\u5176\u4ed6\u4f5c\u7528\u3002\u95ed\u5305\u53ef\u4ee5\u51cf\u5c11\u51fd\u6570\u53c2\u6570\u7684\u6570\u76ee\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u5c01\u88c5\u3002\u8fd9\u5bf9\u5e76\u884c\u8ba1\u7b97\u4e5f\u975e\u5e38\u6709\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u6bcf\u53f0\u7535\u8111\u8d1f\u8d23\u4e00\u4e2a\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u53e6\u5916\uff0c\u95ed\u5305\u5728Python\u4e2d\u6709\u4e00\u79cd\u91cd\u8981\u7684\u5e94\u7528\u2014\u2014\u88c5\u9970\u5668\u3002\u8fd9\u4e2a\u4f1a\u5728\u88c5\u9970\u5668\u7684\u6587\u7ae0\u8bb2\u8ff0\u3002 \u95ed\u5305\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4 \u6765\u770b\u4e00\u4e2a\u5178\u578b\u7684 \u95ed\u5305 \u7ed3\u6784\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv = [ 'gv' ] + gv # UnboundLocalError:local variable 'gv' referenced before assignment lv = [] def inn_func (): lv = lv + [ v ] # UnboundLocalError:local variable 'lv' referenced before assignment gv . insert ( 1 , lv [ 0 ]) return gv return inn_func \u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u6ca1\u6709\u95ee\u9898\uff0c\u8d4b\u503c\u64cd\u4f5c\u4ece\u53f3\u5230\u5de6\u6267\u884c\uff0c\u5148\u4ece\u53f3\u8fb9\u7684 gv \u3001 lv \u5f00\u59cb\u6267\u884c\u4ee3\u7801\uff0c\u6b64\u65f6\u5c40\u90e8\u4f5c\u7528\u57df\u8fd8\u6ca1\u6709 gv \u53d8\u91cf\uff0c\u5c40\u90e8\u4f5c\u7528\u57df\u4e5f\u6ca1\u6709 lv \u53d8\u91cf\uff0cPython\u5e94\u8be5\u4f1a\u8bbf\u95ee\u5916\u5c42\u4f5c\u7528\u57df\u7684 gv \u3001 lv \u53d8\u91cf\u3002\u4f46\u5b9e\u9645\u8c03\u7528 func() \u51fd\u6570\u65f6\uff0c\u4e0a\u9762\u4e24\u5904\u5bf9 gv \u548c lv \u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u7684\u5730\u65b9\u90fd\u4f1a\u89e6\u53d1 UnboundLocalError \u3002 \u8fd9\u662f\u56e0\u4e3a Python \u5728\u6267\u884c\u51fd\u6570\u524d\uff0c\u4f1a\u9996\u5148\u751f\u6210\u5404\u5c42\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df \uff0c\u56e0\u6b64 Python \u5728\u6267\u884c\u8d4b\u503c\u524d\u4f1a\u5c06 func \u5185\u7684 'gv' 'lv' \u5199\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff1a dict_\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.update({\u201cgv\u201d:['gv'] + gv}) dict_\u95ed\u5305\u547d\u540d\u7a7a\u95f4.update({\u201clv\u201d:['lv'] + lv}) \u5f53 Python \u6267\u884c\u8d4b\u503c\u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0c\u4f1a\u5148\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u3001\u95ed\u5305\u4f5c\u7528\u57df\u5185\u53d1\u73b0 gv \u548c lv \u6807\u8bc6\u7b26\uff0c\u4f46 gv \u548c lv \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u5185\u90fd\u6ca1\u6709\u7ed1\u5b9a\u5bf9\u8c61\uff0c\u4ece\u800c\u5f15\u53d1\u9519\u8bef\u3002 \u8fd9\u6bb5\u4ee3\u7801\u672c\u610f\u53ea\u662f\u60f3\u8ba9\u5177\u6709\u5bf9\u8c61\u7684\u5168\u5c40\u53d8\u91cf gv \u548c\u5c40\u90e8\u53d8\u91cf lv \u53c2\u4e0e\u8fd0\u7b97\uff0c\u800c\u4e0d\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 gv \u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 lv \u3002\u4e3a\u4e86\u907f\u514d\u7c7b\u4f3c\u7684\u60c5\u51b5\u53d1\u751f\uff0c Python \u5f15\u5165\u4e86 global \u3001 nonlocal \u8bed\u53e5\u6765\u8bf4\u660e\u6240\u4fee\u9970\u7684 gv \u3001 lv \u5206\u522b\u6765\u81ea\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 \uff0c\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728 func \u548c inn_func \u5185\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u547d\u540d\u7a7a\u95f4\u5185 gv \u548c lv \u7684\u503c\uff1a gv = [ 'a' , 'global' , 'var' ] print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) def func ( v ): global gv print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) gv = [ 'gv' ] + gv lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): nonlocal lv print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) lv = lv + [ v ] gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 ['gv', 'is', 'a', 'global', 'var'] \u5982\u4e0a\uff0c\u5168\u5c40\u53d8\u91cf gv \u503c\u88ab\u51fd\u6570\u6539\u5199\u4e86\uff0c inn_func \u4fee\u6539\u7684\u4e5f\u786e\u5b9e\u662f\u7236\u51fd\u6570 lv \u7684\u503c \uff08\u4f9d\u636e\u5185\u5b58\u5730\u5740\u5224\u65ad\uff09\u3002 \u501f\u58f3 \u90a3\u4e48\u662f\u4e0d\u662f\u4e0d\u4f7f\u7528 global \u548c nonlocal \u5c31\u4e0d\u80fd\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u7684\u5462\uff1f\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv . insert ( 0 , 'gv' ) lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv . append ( v ) print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 ['gv', 'is', 'a', 'global', 'var'] \u53ef\u4ee5\u53d1\u73b0\uff0c\u6267\u884c\u7ed3\u679c\u540c\u4e0a\u9762\u5b8c\u5168\u4e00\u81f4\uff0c\u95ee\u9898\u81ea\u7136\u6765\u4e86\uff1a\u201c\u4e3a\u4ec0\u4e48\u4e0d\u7528 global nonlocal \u4e5f\u53ef\u4ee5\u6539\u5199\u5168\u5c40\u53d8\u91cf gv \u548c\u7236\u51fd\u6570\u53d8\u91cf lv \u7684\u503c\uff1f \u4e3a\u4e86\u770b\u6e05\u695a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u4e0a\u9762\u7684 gv.insert(0, 'gv') \u548c lv.append(v) \u6539\u5199\u4e3a gv[0:0] = ['gv'] \u548c lv[:] = [v] \uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv [ 0 : 0 ] = [ 'gv' ] lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv [:] = [ v ] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 ['gv', 'is', 'a', 'global', 'var'] \u6267\u884c\u7ed3\u679c\u5b8c\u5168\u4e00\u81f4\uff0c\u4e8b\u5b9e\u4e0a\u4e24\u8005\u4e4b\u95f4\u7684\u672c\u8d28\u4e5f\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 .insert() \u3001 .append() \u65b9\u6cd5\u5e76\u6ca1\u6709\u4fee\u6539 gv \u548c lv \uff0c\u800c\u662f\u4fee\u6539 gv \u548c lv \u7684\u5143\u7d20 gv[0:0] \u548c lv[:] \uff0c\u56e0\u6b64 gv \u548c lv \u5e76\u6ca1\u6709\u88ab\u52a0\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981 global \u548c nonlocal \u4fee\u9970\u5c31\u53ef\u4ee5\u76f4\u63a5\u6539\u5199\uff0c \u8fd9\u5c31\u662f\u201c\u501f\u58f3\u201d\u3002 \u53e6\u5916\uff0c\u4e5f\u662f\u501f\u52a9\u4e86list\u5bf9\u8c61\u7684mutable\u6027\u8d28\u3002 \u5728 nonlocal \u5c1a\u672a\u5f15\u5165 Python \u4e2d\uff0c\u6bd4\u5982 Python 2.x \u82e5\u8981\u5728\u5b50\u51fd\u6570\u4e2d\u6539\u5199\u7236\u51fd\u6570\u53d8\u91cf\u7684\u503c\u5c31\u5f97\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u3002","title":"3.3.\u95ed\u5305"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_1","text":"\u4ee5\u4e0b\u5f15\u7528\u81ea\u7ef4\u57fa\u767e\u79d1\u4e2d\u5173\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff1a \u5728 \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e2d\uff0c \u95ed\u5305 \uff08\u82f1\u8bed\uff1aClosure\uff09\uff0c\u53c8\u79f0 \u8bcd\u6cd5\u95ed\u5305 \uff08Lexical Closure\uff09\u6216 \u51fd\u6570\u95ed\u5305 \uff08function closures\uff09\uff0c\u662f\u5f15\u7528\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u88ab\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u5c06\u548c\u8fd9\u4e2a\u51fd\u6570\u4e00\u540c\u5b58\u5728\uff0c\u5373\u4f7f\u5df2\u7ecf\u79bb\u5f00\u4e86\u521b\u9020\u5b83\u7684\u73af\u5883\u4e5f\u4e0d\u4f8b\u5916\u3002\u6240\u4ee5\uff0c\u6709\u53e6\u4e00\u79cd\u8bf4\u6cd5\u8ba4\u4e3a\u95ed\u5305\u662f\u7531\u51fd\u6570\u548c\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u73af\u5883\u7ec4\u5408\u800c\u6210\u7684\u5b9e\u4f53\u3002\u95ed\u5305\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u5f15\u7528\u73af\u5883\u548c\u76f8\u540c\u7684\u51fd\u6570\u7ec4\u5408\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002 \u95ed\u5305\u7684\u6982\u5ff5\u51fa\u73b0\u4e8e60\u5e74\u4ee3\uff0c\u6700\u65e9\u5b9e\u73b0\u95ed\u5305\u7684\u7a0b\u5e8f\u8bed\u8a00\u662f Scheme \u3002\u4e4b\u540e\uff0c\u95ed\u5305\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e8e \u51fd\u6570\u5f0f\u7f16\u7a0b \u8bed\u8a00\u5982 ML\u8bed\u8a00 \u548c LISP \u3002\u5f88\u591a\u547d\u4ee4\u5f0f\u7a0b\u5e8f\u8bed\u8a00\u4e5f\u5f00\u59cb\u652f\u6301\u95ed\u5305\u3002 \u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\uff08\u5d4c\u5957\uff09\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u5185\u90e8\u7684\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u7684\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5219\u53ef\u80fd\u4ea7\u751f\u95ed\u5305\u3002\u8fd0\u884c\u65f6\uff0c\u4e00\u65e6\u5916\u90e8\u7684\u51fd\u6570\u88ab\u6267\u884c\uff0c\u4e00\u4e2a\u95ed\u5305\u5c31\u5f62\u6210\u4e86\uff0c\u95ed\u5305\u4e2d\u5305\u542b\u4e86\u5185\u90e8\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u6240\u9700\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\u7684\u5f15\u7528\u3002\u5176\u4e2d\u6240\u5f15\u7528\u7684\u53d8\u91cf\u79f0\u4f5c \u4e0a\u503c (upvalue)\u3002 \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff0c\u5e94\u8be5\u8fd8\u662f\u6bd4\u8f83\u76f4\u89c2\u7684\u3002\u7b80\u800c\u8a00\u4e4b\uff1a\u5185\u5d4c\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u5185\u5d4c\u51fd\u6570\u88ab\u6267\u884c\u65f6\uff0c\u5c31\u5f62\u6210\u4e00\u4e2a\u95ed\u5305\u3002\u4f8b\u5982\uff1a def outside ( a , b ): a = a b = b def inner (): y = a + b print ( locals ()) inner () # \u8c03\u7528outside\u51fd\u6570 inner\u88ab\u6267\u884c \u5f62\u6210\u95ed\u5305 outside ( 1 , 2 ) {'y': 3, 'a': 1, 'b': 2} inner() \u88ab\u6267\u884c\u65f6\uff0c\u521b\u5efa\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4f1a\u5305\u62ec\u5176\u5f15\u7528\u7684\u5916\u5c42\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u88ab\u79f0\u4e3a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff08enclosing namespace\uff09\u3002 \u6ce8\u610f\uff0c\u5728Python\u4e2d\uff0c\u5185\u5d4c\u51fd\u6570\u53ef\u4ee5\u88ab\u5916\u5c42\u51fd\u6570\u8fd4\u56de\uff0c\u4e5f\u5c31\u662fPython\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u95ed\u5305\u3002 \u7406\u89e3\u4ec0\u4e48\u662f\u95ed\u5305\u4e0d\u96be\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\u95ed\u5305\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f","title":"\u95ed\u5305\u7684\u6982\u5ff5"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_2","text":"\u95ed\u5305\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u5b83\u53ef\u4ee5\u7ed1\u5b9a\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u751f\u6210\u95ed\u5305\u7684\u73af\u5883\uff08\u5916\u5c42\u51fd\u6570\uff09\u5df2\u7ecf\u91ca\u653e\uff0c\u95ed\u5305\u4ecd\u7136\u5b58\u5728\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u50cf\u7c7b\u751f\u6210\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u662f\u5916\u90e8\u51fd\u6570\u53ea\u5728\u8c03\u7528\u65f6\u751f\u6210\u547d\u540d\u7a7a\u95f4\uff0c\u6267\u884c\u5b8c\u6bd5\u540e\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u4f1a\u91ca\u653e\uff0c\u800c\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u521b\u5efa\uff0c\u4e00\u822cPython\u89e3\u91ca\u5668\u9000\u51fa\u624d\u91ca\u653e\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\u5bf9\u4e00\u4e9b\u9700\u8981\u91cd\u7528\u7684\u529f\u80fd\u4e14\u4e0d\u8db3\u4ee5\u5b9a\u4e49\u4e3a\u7c7b\u7684\u884c\u4e3a\uff0c\u4f7f\u7528\u95ed\u5305\u4f1a\u6bd4\u4f7f\u7528\u7c7b\u5360\u7528\u66f4\u5c11\u7684\u8d44\u6e90\uff0c\u4e14\u66f4\u8f7b\u5de7\u7075\u6d3b\u3002 \u4f8b\u5982\uff1a\u5047\u8bbe\u6211\u4eec\u4ec5\u4ec5\u60f3\u6253\u5370\u51fa\u5404\u7c7b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5206\u522b\u4ee5\u7c7b\u548c\u95ed\u5305\u6765\u5b9e\u73b0\uff1a # \u7c7b\u5b9e\u73b0 class Animal ( object ): def __init__ ( self , animal ): self . animal = animal def sound ( self , voice ): print ( self . animal , ':' , voice , \"...\" ) dog = Animal ( \"dog\" ) dog . sound ( \"wangwang\" ) dog . sound ( \"wowo\" ) dog : wangwang ... dog : wowo ... # \u95ed\u5305\u5b9e\u73b0 def voice ( animal ): def sound ( voc ): print ( animal , ':' , voc , \"...\" ) return sound dog = voice ( \"dog\" ) dog ( \"wangwang\" ) dog ( \"wowo\" ) dog : wangwang ... dog : wowo ... \u8f93\u51fa\u7ed3\u679c\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u663e\u7136\u7c7b\u7684\u5b9e\u73b0\u76f8\u5bf9\u7e41\u7410\uff0c\u4e14\u8fd9\u91cc\u53ea\u662f\u60f3\u8f93\u51fa\u4e00\u4e0b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5b9a\u4e49\u4e00\u4e2a Animal \u7c7b\u672a\u514d\u5c0f\u9898\u5927\u505a\uff0c\u800c\u4e14 voice \u51fd\u6570\u5728\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u5df2\u7ecf\u91ca\u653e\uff0c\u4f46 Animal \u7c7b\u53ca\u5176\u5b9e\u4f8b dog \u7684\u76f8\u5e94\u5c5e\u6027\u5374\u4e00\u76f4\u8d2e\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u800c\u8fd9\u79cd\u5185\u5b58\u5360\u7528\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u95ed\u5305\u8fd8\u6709\u5176\u4ed6\u4f5c\u7528\u3002\u95ed\u5305\u53ef\u4ee5\u51cf\u5c11\u51fd\u6570\u53c2\u6570\u7684\u6570\u76ee\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u5c01\u88c5\u3002\u8fd9\u5bf9\u5e76\u884c\u8ba1\u7b97\u4e5f\u975e\u5e38\u6709\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u6bcf\u53f0\u7535\u8111\u8d1f\u8d23\u4e00\u4e2a\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u53e6\u5916\uff0c\u95ed\u5305\u5728Python\u4e2d\u6709\u4e00\u79cd\u91cd\u8981\u7684\u5e94\u7528\u2014\u2014\u88c5\u9970\u5668\u3002\u8fd9\u4e2a\u4f1a\u5728\u88c5\u9970\u5668\u7684\u6587\u7ae0\u8bb2\u8ff0\u3002","title":"\u95ed\u5305\u7684\u4f5c\u7528"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_3","text":"\u6765\u770b\u4e00\u4e2a\u5178\u578b\u7684 \u95ed\u5305 \u7ed3\u6784\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv = [ 'gv' ] + gv # UnboundLocalError:local variable 'gv' referenced before assignment lv = [] def inn_func (): lv = lv + [ v ] # UnboundLocalError:local variable 'lv' referenced before assignment gv . insert ( 1 , lv [ 0 ]) return gv return inn_func \u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u6ca1\u6709\u95ee\u9898\uff0c\u8d4b\u503c\u64cd\u4f5c\u4ece\u53f3\u5230\u5de6\u6267\u884c\uff0c\u5148\u4ece\u53f3\u8fb9\u7684 gv \u3001 lv \u5f00\u59cb\u6267\u884c\u4ee3\u7801\uff0c\u6b64\u65f6\u5c40\u90e8\u4f5c\u7528\u57df\u8fd8\u6ca1\u6709 gv \u53d8\u91cf\uff0c\u5c40\u90e8\u4f5c\u7528\u57df\u4e5f\u6ca1\u6709 lv \u53d8\u91cf\uff0cPython\u5e94\u8be5\u4f1a\u8bbf\u95ee\u5916\u5c42\u4f5c\u7528\u57df\u7684 gv \u3001 lv \u53d8\u91cf\u3002\u4f46\u5b9e\u9645\u8c03\u7528 func() \u51fd\u6570\u65f6\uff0c\u4e0a\u9762\u4e24\u5904\u5bf9 gv \u548c lv \u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u7684\u5730\u65b9\u90fd\u4f1a\u89e6\u53d1 UnboundLocalError \u3002 \u8fd9\u662f\u56e0\u4e3a Python \u5728\u6267\u884c\u51fd\u6570\u524d\uff0c\u4f1a\u9996\u5148\u751f\u6210\u5404\u5c42\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df \uff0c\u56e0\u6b64 Python \u5728\u6267\u884c\u8d4b\u503c\u524d\u4f1a\u5c06 func \u5185\u7684 'gv' 'lv' \u5199\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff1a dict_\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.update({\u201cgv\u201d:['gv'] + gv}) dict_\u95ed\u5305\u547d\u540d\u7a7a\u95f4.update({\u201clv\u201d:['lv'] + lv}) \u5f53 Python \u6267\u884c\u8d4b\u503c\u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0c\u4f1a\u5148\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u3001\u95ed\u5305\u4f5c\u7528\u57df\u5185\u53d1\u73b0 gv \u548c lv \u6807\u8bc6\u7b26\uff0c\u4f46 gv \u548c lv \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u5185\u90fd\u6ca1\u6709\u7ed1\u5b9a\u5bf9\u8c61\uff0c\u4ece\u800c\u5f15\u53d1\u9519\u8bef\u3002 \u8fd9\u6bb5\u4ee3\u7801\u672c\u610f\u53ea\u662f\u60f3\u8ba9\u5177\u6709\u5bf9\u8c61\u7684\u5168\u5c40\u53d8\u91cf gv \u548c\u5c40\u90e8\u53d8\u91cf lv \u53c2\u4e0e\u8fd0\u7b97\uff0c\u800c\u4e0d\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 gv \u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 lv \u3002\u4e3a\u4e86\u907f\u514d\u7c7b\u4f3c\u7684\u60c5\u51b5\u53d1\u751f\uff0c Python \u5f15\u5165\u4e86 global \u3001 nonlocal \u8bed\u53e5\u6765\u8bf4\u660e\u6240\u4fee\u9970\u7684 gv \u3001 lv \u5206\u522b\u6765\u81ea\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 \uff0c\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728 func \u548c inn_func \u5185\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u547d\u540d\u7a7a\u95f4\u5185 gv \u548c lv \u7684\u503c\uff1a gv = [ 'a' , 'global' , 'var' ] print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) def func ( v ): global gv print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) gv = [ 'gv' ] + gv lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): nonlocal lv print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) lv = lv + [ v ] gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 ['gv', 'is', 'a', 'global', 'var'] \u5982\u4e0a\uff0c\u5168\u5c40\u53d8\u91cf gv \u503c\u88ab\u51fd\u6570\u6539\u5199\u4e86\uff0c inn_func \u4fee\u6539\u7684\u4e5f\u786e\u5b9e\u662f\u7236\u51fd\u6570 lv \u7684\u503c \uff08\u4f9d\u636e\u5185\u5b58\u5730\u5740\u5224\u65ad\uff09\u3002","title":"\u95ed\u5305\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_4","text":"\u90a3\u4e48\u662f\u4e0d\u662f\u4e0d\u4f7f\u7528 global \u548c nonlocal \u5c31\u4e0d\u80fd\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u7684\u5462\uff1f\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv . insert ( 0 , 'gv' ) lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv . append ( v ) print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 ['gv', 'is', 'a', 'global', 'var'] \u53ef\u4ee5\u53d1\u73b0\uff0c\u6267\u884c\u7ed3\u679c\u540c\u4e0a\u9762\u5b8c\u5168\u4e00\u81f4\uff0c\u95ee\u9898\u81ea\u7136\u6765\u4e86\uff1a\u201c\u4e3a\u4ec0\u4e48\u4e0d\u7528 global nonlocal \u4e5f\u53ef\u4ee5\u6539\u5199\u5168\u5c40\u53d8\u91cf gv \u548c\u7236\u51fd\u6570\u53d8\u91cf lv \u7684\u503c\uff1f \u4e3a\u4e86\u770b\u6e05\u695a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u4e0a\u9762\u7684 gv.insert(0, 'gv') \u548c lv.append(v) \u6539\u5199\u4e3a gv[0:0] = ['gv'] \u548c lv[:] = [v] \uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv [ 0 : 0 ] = [ 'gv' ] lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv [:] = [ v ] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 ['gv', 'is', 'a', 'global', 'var'] \u6267\u884c\u7ed3\u679c\u5b8c\u5168\u4e00\u81f4\uff0c\u4e8b\u5b9e\u4e0a\u4e24\u8005\u4e4b\u95f4\u7684\u672c\u8d28\u4e5f\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 .insert() \u3001 .append() \u65b9\u6cd5\u5e76\u6ca1\u6709\u4fee\u6539 gv \u548c lv \uff0c\u800c\u662f\u4fee\u6539 gv \u548c lv \u7684\u5143\u7d20 gv[0:0] \u548c lv[:] \uff0c\u56e0\u6b64 gv \u548c lv \u5e76\u6ca1\u6709\u88ab\u52a0\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981 global \u548c nonlocal \u4fee\u9970\u5c31\u53ef\u4ee5\u76f4\u63a5\u6539\u5199\uff0c \u8fd9\u5c31\u662f\u201c\u501f\u58f3\u201d\u3002 \u53e6\u5916\uff0c\u4e5f\u662f\u501f\u52a9\u4e86list\u5bf9\u8c61\u7684mutable\u6027\u8d28\u3002 \u5728 nonlocal \u5c1a\u672a\u5f15\u5165 Python \u4e2d\uff0c\u6bd4\u5982 Python 2.x \u82e5\u8981\u5728\u5b50\u51fd\u6570\u4e2d\u6539\u5199\u7236\u51fd\u6570\u53d8\u91cf\u7684\u503c\u5c31\u5f97\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u3002","title":"\u501f\u58f3"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html","text":"\u88c5\u9970\u5668\u7b80\u8ff0 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u4e00\u4e2a\u51fd\u6570\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u90a3\u4e48\u6709\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u4fee\u6539\u539f\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u4f46\u8fd9\u603b\u505a\u6cd5\u6709\u65f6\u672a\u514d\u592a\u7e41\u7410\u3002\u5728python\u4e2d\uff0c\u76f4\u63a5\u7ed9\u539f\u51fd\u6570\u5957\u4e0a\u88c5\u9970\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a def hello (): return 'hello world' # hello\u51fd\u6570\u7684\u540d\u5b57 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a hello \u73b0\u5728\u6211\u4eec\u60f3\u589e\u5f3a hello() \u51fd\u6570\u7684\u529f\u80fd\uff0c\u5e0c\u671b\u7ed9\u8fd4\u56de\u52a0\u4e0a HTML \u6807\u7b7e\uff0c\u6bd4\u5982 <i>hello world</i> \uff0c\u4f46\u6709\u4e00\u4e2a\u8981\u6c42\uff0c\u4e0d\u6539\u53d8\u539f\u6765 hello() \u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped \u8981\u6ce8\u610f\u7684\u662f\uff0cmakeitalic\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662fwrapped\u51fd\u6570\u3002 # \u7ed9hello\u51fd\u6570\u5957\u4e0amakeitalic\u51fd\u6570 # makeitalic\u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570 # \u5b9e\u9645\u4e0a\u6b64\u65f6hello\u53d8\u6210\u4e86wrapped\u51fd\u6570 hello = makeitalic ( hello ) \u5c06 hello \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 makeitalic \u51fd\u6570\uff0c makeitalic \u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570\uff0c\u540d\u5b57 hello \u4e0e wrapped \u51fd\u6570\u7ed1\u5b9a\u3002\u6b64\u65f6\u540d\u5b57 hello \u4ee3\u8868\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u5c31\u662f wrapped \u51fd\u6570\u6709\u4e86\u65b0\u7684\u540d\u5b57\u2014\u2014 hello \u3002 # \u53ef\u4ee5\u770b\u51fahello\u51fd\u6570\u7684\u540d\u5b57\u53d8\u4e86 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a wrapped \u603b\u7ed3\u4e00\u4e0b\uff1a\u4e3a\u4e86\u589e\u5f3a\u539f\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u539f\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c makeitalic \u5c31\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff08decorator\uff09\uff0c\u5b83\u300e\u88c5\u9970\u300f\u4e86\u51fd\u6570 hello \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u5176\u8d4b\u7ed9 hello \u3002 \u50cf\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u51fd\u6570\uff08\u6216\u7c7b\uff09\u529f\u80fd\u7684\u51fd\u6570\u5c31\u662f\u88c5\u9970\u5668\u3002\u672c\u8d28\u4e0a\uff0c\u5b83\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u4ee5\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 hello \uff09\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u88c5\u540e\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 wrapped \uff09\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff08 hello \uff09\u3002 \u88c5\u9970\u5668\u7684\u4e00\u822c\u4f7f\u7528\u5f62\u5f0f \u5728python\u4e2d\uff0c\u88c5\u9970\u5668\u4e00\u822c\u8fd9\u6837\u7528\uff1a @decorator def func (): pass \u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u5f62\u5f0f \uff1a def func (): pass func = decorator ( func ) \u88c5\u9970\u5668\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\uff0c\u79bb\u51fd\u6570\u5b9a\u4e49\u6700\u8fd1\u7684\u88c5\u9970\u5668\u5148\u88ab\u8c03\u7528\uff0c\u6bd4\u5982 @decorator_one @decorator_two def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator_one ( decorator_two ( func )) \u88c5\u9970\u5668\u8fd8\u53ef\u4ee5\u5e26\u53c2\u6570\uff0c\u6bd4\u5982\uff1a @decorator ( arg1 , arg2 ) def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator ( arg1 , arg2 )( func ) \u4f8b\u5b50\uff1a def makeitalic2 ( func ): return \"<i>\" + func () + \"</i>\" @makeitalic def hello_2 (): return 'hello world' def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped hello_2 () '<i>hello world</i>' \u5982\u679c\u8fd4\u56de\u7684\u4e0d\u662f\u51fd\u6570\u5c31\u4f1a\u8fd9\u6837\uff1a @makeitalic def hello_3 (): return 'hello world' def makeitalic ( func ): return \"<i>\" + func () + \"</i>\" hello_3 <function __main__.makeitalic.<locals>.wrapped()> \u5bf9\u5e26\u53c2\u6570\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970 \u524d\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u88ab\u88c5\u9970\u7684\u51fd\u6570 hello() \u662f\u6ca1\u6709\u5e26\u53c2\u6570\u7684\uff0c\u6211\u4eec\u770b\u770b\u88ab\u88c5\u9970\u51fd\u6570\u5e26\u53c2\u6570\u7684\u60c5\u51b5\u3002\u5bf9\u524d\u9762\u4f8b\u5b50\u4e2d\u7684 hello() \u51fd\u6570\u8fdb\u884c\u6539\u5199\uff0c\u4f7f\u5176\u5e26\u53c2\u6570\uff0c\u5982\u4e0b\uff1a def makeitalic ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<i>' + ret + '</i>' return wrapped @makeitalic def hello ( name ): return 'hello %s ' % name @makeitalic def hello2 ( name1 , name2 ): return 'hello %s , %s ' % ( name1 , name2 ) hello ( 'Jack' ) hello2 ( 'Jack' , \"Lusis\" ) \u7531\u4e8e\u51fd\u6570 hello \u5e26\u53c2\u6570\uff0c\u56e0\u6b64\u5185\u5d4c\u5305\u88c5\u51fd\u6570 wrapped \u9700\u8981\u6539\u53d8\u3002 \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u589e\u5f3a\u4e86\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u7ed9\u5b83\u7684\u8fd4\u56de\u52a0\u4e0a\u4e86\u6807\u7b7e <i>...</i> \uff0c\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u6539\u7528\u6807\u7b7e <b>...</b> \u6216 <p>...</p> \u3002\u662f\u4e0d\u662f\u8981\u50cf\u524d\u9762\u4e00\u6837\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f3c makeitalic \u7684\u88c5\u9970\u5668\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bd4\u5982\uff1a def wrap_in_tag ( tag ): def decorator ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<' + tag + '>' + ret + '</' + tag + '>' return wrapped return decorator \u751f\u6210\u60f3\u8981\u7684\u88c5\u9970\u5668\u4e86\uff1a makebold = wrap_in_tag ( 'b' ) # \u6839\u636e 'b' \u8fd4\u56de makebold \u751f\u6210\u5668 @makebold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) '<b>hello world</b>' \u4e0a\u9762\u7684\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u5199\u5f97\u66f4\u52a0\u7b80\u6d01\uff1a @wrap_in_tag ( 'b' ) def hello ( name ): return 'hello %s ' % name \u591a\u4e2a\u88c5\u9970\u5668 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u591a\u4e2a\u88c5\u9970\u5668\u7684\u4f8b\u5b50\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u4e0d\u4f7f\u7528\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\u3002 def makebold ( func ): def wrapped (): return '<b>' + func () + '</b>' return wrapped def makeitalic ( func ): def wrapped (): return '<i>' + func () + '</i>' return wrapped @makebold @makeitalic def hello (): return 'hello world' \u4e0a\u9762\u5b9a\u4e49\u4e86\u4e24\u4e2a\u88c5\u9970\u5668\uff0c\u5bf9 hello \u8fdb\u884c\u88c5\u9970\uff0c\u4e0a\u9762\u7684\u6700\u540e\u51e0\u884c\u4ee3\u7801\u76f8\u5f53\u4e8e\uff1a def hello (): return 'hello world' hello = makebold ( makeitalic ( hello )) \u8c03\u7528\u51fd\u6570 hello\uff1a hello () '<b><i>hello world</i></b>' \u57fa\u4e8e\u7c7b\u7684\u88c5\u9970\u5668 \u524d\u9762\u7684\u88c5\u9970\u5668\u90fd\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u7c7b\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a class Bold ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self , * args , ** kwargs ): return '<b>' + self . func ( * args , ** kwargs ) + '</b>' @Bold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) \u53ef\u4ee5\u770b\u5230\uff0c\u7c7b Bold \u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a __init__() \uff1a\u5b83\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 __call__() \uff1a\u8ba9\u7c7b\u5bf9\u8c61\u53ef\u8c03\u7528\uff0c\u5c31\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u5728\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\u88ab\u8c03\u7528 \u8fd8\u53ef\u4ee5\u8ba9\u7c7b\u88c5\u9970\u5668\u5e26\u53c2\u6570\uff1a class Tag ( object ): def __init__ ( self , tag ): self . tag = tag def __call__ ( self , func ): def wrapped ( * args , ** kwargs ): return \"< {tag} > {res} </ {tag} >\" . format ( res = func ( * args , ** kwargs ), tag = self . tag ) return wrapped @Tag ( 'b' ) def hello ( name ): return 'hello %s ' % name \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7c7b\u88c5\u9970\u5668\u6709\u53c2\u6570\uff0c \u5219 __init__ \u63a5\u6536\u53c2\u6570\uff0c\u800c __call__ \u63a5\u6536 func\u3002 \u88c5\u9970\u5668\u7684\u526f\u4f5c\u7528 \u524d\u9762\u63d0\u5230\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u6709\u4e00\u4e2a\u7455\u75b5\uff0c\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u540d\u79f0\u4e86\uff0c\u56de\u5230\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' \u51fd\u6570 hello \u88ab makeitalic \u88c5\u9970\u540e\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u6539\u53d8\u4e86\uff1a hello . __name__ 'wrapped' \u4e3a\u4e86\u6d88\u9664\u8fd9\u6837\u7684\u526f\u4f5c\u7528\uff0cPython \u4e2d\u7684 functools \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a wraps \u7684\u88c5\u9970\u5668\uff1a from functools import wraps def makeitalic ( func ): @wraps ( func ) # \u52a0\u4e0a wraps \u88c5\u9970\u5668 def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' hello . __name__ 'hello' \u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u5c31\u662f\u95ed\u5305\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u4f46\u5b83\u6bd4\u8f83\u7279\u522b\uff0c\u63a5\u6536\u88ab\u88c5\u9970\u51fd\u6570\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u8d4b\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff0c\u95ed\u5305\u5219\u6ca1\u8fd9\u79cd\u9650\u5236\u3002","title":"3.4.\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_1","text":"\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u4e00\u4e2a\u51fd\u6570\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u90a3\u4e48\u6709\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u4fee\u6539\u539f\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u4f46\u8fd9\u603b\u505a\u6cd5\u6709\u65f6\u672a\u514d\u592a\u7e41\u7410\u3002\u5728python\u4e2d\uff0c\u76f4\u63a5\u7ed9\u539f\u51fd\u6570\u5957\u4e0a\u88c5\u9970\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a def hello (): return 'hello world' # hello\u51fd\u6570\u7684\u540d\u5b57 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a hello \u73b0\u5728\u6211\u4eec\u60f3\u589e\u5f3a hello() \u51fd\u6570\u7684\u529f\u80fd\uff0c\u5e0c\u671b\u7ed9\u8fd4\u56de\u52a0\u4e0a HTML \u6807\u7b7e\uff0c\u6bd4\u5982 <i>hello world</i> \uff0c\u4f46\u6709\u4e00\u4e2a\u8981\u6c42\uff0c\u4e0d\u6539\u53d8\u539f\u6765 hello() \u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped \u8981\u6ce8\u610f\u7684\u662f\uff0cmakeitalic\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662fwrapped\u51fd\u6570\u3002 # \u7ed9hello\u51fd\u6570\u5957\u4e0amakeitalic\u51fd\u6570 # makeitalic\u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570 # \u5b9e\u9645\u4e0a\u6b64\u65f6hello\u53d8\u6210\u4e86wrapped\u51fd\u6570 hello = makeitalic ( hello ) \u5c06 hello \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 makeitalic \u51fd\u6570\uff0c makeitalic \u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570\uff0c\u540d\u5b57 hello \u4e0e wrapped \u51fd\u6570\u7ed1\u5b9a\u3002\u6b64\u65f6\u540d\u5b57 hello \u4ee3\u8868\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u5c31\u662f wrapped \u51fd\u6570\u6709\u4e86\u65b0\u7684\u540d\u5b57\u2014\u2014 hello \u3002 # \u53ef\u4ee5\u770b\u51fahello\u51fd\u6570\u7684\u540d\u5b57\u53d8\u4e86 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a wrapped \u603b\u7ed3\u4e00\u4e0b\uff1a\u4e3a\u4e86\u589e\u5f3a\u539f\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u539f\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c makeitalic \u5c31\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff08decorator\uff09\uff0c\u5b83\u300e\u88c5\u9970\u300f\u4e86\u51fd\u6570 hello \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u5176\u8d4b\u7ed9 hello \u3002 \u50cf\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u51fd\u6570\uff08\u6216\u7c7b\uff09\u529f\u80fd\u7684\u51fd\u6570\u5c31\u662f\u88c5\u9970\u5668\u3002\u672c\u8d28\u4e0a\uff0c\u5b83\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u4ee5\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 hello \uff09\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u88c5\u540e\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 wrapped \uff09\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff08 hello \uff09\u3002","title":"\u88c5\u9970\u5668\u7b80\u8ff0"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_2","text":"\u5728python\u4e2d\uff0c\u88c5\u9970\u5668\u4e00\u822c\u8fd9\u6837\u7528\uff1a @decorator def func (): pass \u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u5f62\u5f0f \uff1a def func (): pass func = decorator ( func ) \u88c5\u9970\u5668\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\uff0c\u79bb\u51fd\u6570\u5b9a\u4e49\u6700\u8fd1\u7684\u88c5\u9970\u5668\u5148\u88ab\u8c03\u7528\uff0c\u6bd4\u5982 @decorator_one @decorator_two def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator_one ( decorator_two ( func )) \u88c5\u9970\u5668\u8fd8\u53ef\u4ee5\u5e26\u53c2\u6570\uff0c\u6bd4\u5982\uff1a @decorator ( arg1 , arg2 ) def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator ( arg1 , arg2 )( func ) \u4f8b\u5b50\uff1a def makeitalic2 ( func ): return \"<i>\" + func () + \"</i>\" @makeitalic def hello_2 (): return 'hello world' def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped hello_2 () '<i>hello world</i>' \u5982\u679c\u8fd4\u56de\u7684\u4e0d\u662f\u51fd\u6570\u5c31\u4f1a\u8fd9\u6837\uff1a @makeitalic def hello_3 (): return 'hello world' def makeitalic ( func ): return \"<i>\" + func () + \"</i>\" hello_3 <function __main__.makeitalic.<locals>.wrapped()>","title":"\u88c5\u9970\u5668\u7684\u4e00\u822c\u4f7f\u7528\u5f62\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_3","text":"\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u88ab\u88c5\u9970\u7684\u51fd\u6570 hello() \u662f\u6ca1\u6709\u5e26\u53c2\u6570\u7684\uff0c\u6211\u4eec\u770b\u770b\u88ab\u88c5\u9970\u51fd\u6570\u5e26\u53c2\u6570\u7684\u60c5\u51b5\u3002\u5bf9\u524d\u9762\u4f8b\u5b50\u4e2d\u7684 hello() \u51fd\u6570\u8fdb\u884c\u6539\u5199\uff0c\u4f7f\u5176\u5e26\u53c2\u6570\uff0c\u5982\u4e0b\uff1a def makeitalic ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<i>' + ret + '</i>' return wrapped @makeitalic def hello ( name ): return 'hello %s ' % name @makeitalic def hello2 ( name1 , name2 ): return 'hello %s , %s ' % ( name1 , name2 ) hello ( 'Jack' ) hello2 ( 'Jack' , \"Lusis\" ) \u7531\u4e8e\u51fd\u6570 hello \u5e26\u53c2\u6570\uff0c\u56e0\u6b64\u5185\u5d4c\u5305\u88c5\u51fd\u6570 wrapped \u9700\u8981\u6539\u53d8\u3002","title":"\u5bf9\u5e26\u53c2\u6570\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_4","text":"\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u589e\u5f3a\u4e86\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u7ed9\u5b83\u7684\u8fd4\u56de\u52a0\u4e0a\u4e86\u6807\u7b7e <i>...</i> \uff0c\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u6539\u7528\u6807\u7b7e <b>...</b> \u6216 <p>...</p> \u3002\u662f\u4e0d\u662f\u8981\u50cf\u524d\u9762\u4e00\u6837\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f3c makeitalic \u7684\u88c5\u9970\u5668\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bd4\u5982\uff1a def wrap_in_tag ( tag ): def decorator ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<' + tag + '>' + ret + '</' + tag + '>' return wrapped return decorator \u751f\u6210\u60f3\u8981\u7684\u88c5\u9970\u5668\u4e86\uff1a makebold = wrap_in_tag ( 'b' ) # \u6839\u636e 'b' \u8fd4\u56de makebold \u751f\u6210\u5668 @makebold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) '<b>hello world</b>' \u4e0a\u9762\u7684\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u5199\u5f97\u66f4\u52a0\u7b80\u6d01\uff1a @wrap_in_tag ( 'b' ) def hello ( name ): return 'hello %s ' % name","title":"\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_5","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u591a\u4e2a\u88c5\u9970\u5668\u7684\u4f8b\u5b50\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u4e0d\u4f7f\u7528\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\u3002 def makebold ( func ): def wrapped (): return '<b>' + func () + '</b>' return wrapped def makeitalic ( func ): def wrapped (): return '<i>' + func () + '</i>' return wrapped @makebold @makeitalic def hello (): return 'hello world' \u4e0a\u9762\u5b9a\u4e49\u4e86\u4e24\u4e2a\u88c5\u9970\u5668\uff0c\u5bf9 hello \u8fdb\u884c\u88c5\u9970\uff0c\u4e0a\u9762\u7684\u6700\u540e\u51e0\u884c\u4ee3\u7801\u76f8\u5f53\u4e8e\uff1a def hello (): return 'hello world' hello = makebold ( makeitalic ( hello )) \u8c03\u7528\u51fd\u6570 hello\uff1a hello () '<b><i>hello world</i></b>'","title":"\u591a\u4e2a\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_6","text":"\u524d\u9762\u7684\u88c5\u9970\u5668\u90fd\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u7c7b\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a class Bold ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self , * args , ** kwargs ): return '<b>' + self . func ( * args , ** kwargs ) + '</b>' @Bold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) \u53ef\u4ee5\u770b\u5230\uff0c\u7c7b Bold \u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a __init__() \uff1a\u5b83\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 __call__() \uff1a\u8ba9\u7c7b\u5bf9\u8c61\u53ef\u8c03\u7528\uff0c\u5c31\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u5728\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\u88ab\u8c03\u7528 \u8fd8\u53ef\u4ee5\u8ba9\u7c7b\u88c5\u9970\u5668\u5e26\u53c2\u6570\uff1a class Tag ( object ): def __init__ ( self , tag ): self . tag = tag def __call__ ( self , func ): def wrapped ( * args , ** kwargs ): return \"< {tag} > {res} </ {tag} >\" . format ( res = func ( * args , ** kwargs ), tag = self . tag ) return wrapped @Tag ( 'b' ) def hello ( name ): return 'hello %s ' % name \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7c7b\u88c5\u9970\u5668\u6709\u53c2\u6570\uff0c \u5219 __init__ \u63a5\u6536\u53c2\u6570\uff0c\u800c __call__ \u63a5\u6536 func\u3002","title":"\u57fa\u4e8e\u7c7b\u7684\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_7","text":"\u524d\u9762\u63d0\u5230\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u6709\u4e00\u4e2a\u7455\u75b5\uff0c\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u540d\u79f0\u4e86\uff0c\u56de\u5230\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' \u51fd\u6570 hello \u88ab makeitalic \u88c5\u9970\u540e\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u6539\u53d8\u4e86\uff1a hello . __name__ 'wrapped' \u4e3a\u4e86\u6d88\u9664\u8fd9\u6837\u7684\u526f\u4f5c\u7528\uff0cPython \u4e2d\u7684 functools \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a wraps \u7684\u88c5\u9970\u5668\uff1a from functools import wraps def makeitalic ( func ): @wraps ( func ) # \u52a0\u4e0a wraps \u88c5\u9970\u5668 def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' hello . __name__ 'hello' \u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u5c31\u662f\u95ed\u5305\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u4f46\u5b83\u6bd4\u8f83\u7279\u522b\uff0c\u63a5\u6536\u88ab\u88c5\u9970\u51fd\u6570\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u8d4b\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff0c\u95ed\u5305\u5219\u6ca1\u8fd9\u79cd\u9650\u5236\u3002","title":"\u88c5\u9970\u5668\u7684\u526f\u4f5c\u7528"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.08.06 \u7c7b\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ec4\u5408\u6570\u636e\u548c\u529f\u80fd\u7684\u65b9\u6cd5\u3002\u7c7b\u901a\u5e38\u662f\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210\u7684\u96c6\u5408\uff1a \u51fd\u6570\uff08\u79f0\u4e3a\u65b9\u6cd5\uff0cmethod\uff09\uff0c\u5305\u62ec\u7279\u6b8a\u65b9\u6cd5\u3001\u79c1\u6709\u65b9\u6cd5\u3001\u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 \u53d8\u91cf\uff08\u79f0\u4e3a\u7c7b\u53d8\u91cf\uff0cclass variable\uff09\uff0c \u7c7b\u53d8\u91cf \u662f\u5728\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u7684\u503c\uff0c\u4e0d\u662f\u5355\u72ec\u5206\u914d\u7ed9\u6bcf\u4e2a\u5b9e\u4f8b\u7684 \u8ba1\u7b97\u51fa\u7684\u5c5e\u6027\uff08\u79f0\u4e3a\u7279\u6027\uff0cproperty\uff09 \u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u610f\u5473\u7740\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4ece\u800c\u5141\u8bb8\u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u65b0\u5b9e\u4f8b\u3002\u6bcf\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u62e5\u6709\u4fdd\u5b58\u81ea\u5df1\u72b6\u6001\u7684\u5c5e\u6027\u3002\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u548c\u7c7b\u578b\u7684\u6570\u636e\u3002\u548c\u6a21\u5757\u4e00\u6837\uff0c\u7c7b\u4e5f\u62e5\u6709 Python \u5929\u7136\u7684\u52a8\u6001\u7279\u6027\uff1a\u5b83\u4eec\u5728\u8fd0\u884c\u65f6\u521b\u5efa\uff0c\u53ef\u4ee5\u5728\u521b\u5efa\u540e\u4fee\u6539\u3002 \u5728Python\u4e2d\uff0c\u7ea6\u5b9a\u4f7f\u7528\u5355\u6570\u5355\u8bcd\u8868\u793a\u7c7b\u540d\uff0c\u5176\u9996\u5b57\u6bcd\u5927\u5199\u3002 Python \u7684\u7c7b\u63d0\u4f9b\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u6240\u6709\u6807\u51c6\u7279\u6027\uff1a \u591a\u6001\uff1a\u53ef\u4ee5\u5728\u5f53\u524d\u4e0a\u4e0b\u6587\u4e0d\u77e5\u9053\u5bf9\u8c61\u771f\u5b9e\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u5bf9\u8c61\u7684\u5b9e\u73b0\uff0c\u4ece\u800c\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u5c01\u88c5\uff1a\u4e00\u4e2a\u5bf9\u8c61\u5bf9\u5916\u90e8\u9690\u85cf\u5176\u90e8\u5206\u72b6\u6001\u548c\u884c\u4e3a\uff08\u4e3a\u4e86\u9690\u85cf\u76f8\u5173\u5de5\u4f5c\u539f\u7406\u7684\u7ec6\u8282\uff09\uff0c\u4ec5\u5bf9\u5916\u90e8\u66b4\u9732\u6709\u9650\u7684\u63a5\u53e3\u3002 \u7ee7\u627f\uff1a\u6839\u636e\u5df2\u6709\u7c7b\u521b\u5efa\u65b0\u7684\u7c7b\u3002\u5141\u8bb8\u6d3e\u751f\u7c7b\u7ee7\u627f\u591a\u4e2a\u57fa\u7c7b\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\uff0c\u6d3e\u751f\u7c7b\u7684\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u57fa\u7c7b\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u7684\u65b9\u6cd5\u3002 \u7c7b\u5b9e\u4f8b \u7c7b\u7684\u5b9e\u4f8b\u662f\u4ee5\u51fd\u6570\u5f62\u5f0f\u8c03\u7528\u7c7b\u5bf9\u8c61\u6765\u521b\u5efa\u7684\u3002 __new__ \u65b9\u6cd5\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u7136\u540e\u5c06\u8be5\u5b9e\u4f8b\u4f20\u9012\u7ed9\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002 __init__() \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u62ec\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b self \u548c\u5728\u8c03\u7528\u7c7b\u5bf9\u8c61\u65f6\u63d0\u4f9b\u7684\u53c2\u6570\u3002 \u5728 __init__() \u5185\uff0c\u901a\u8fc7\u5c06\u5c5e\u6027\u5206\u914d\u7ed9 self \u6765\u5c06\u5176\u4fdd\u5b58\u5230\u5b9e\u4f8b\u4e2d\u3002\u4f8b\u5982\uff0c self.name = name \u8868\u793a\u5c06 name \u5c5e\u6027\u4fdd\u5b58\u5728\u5b9e\u4f8b\u4e2d\u3002\u5176\u4e2d\uff0c\u70b9 . \u8fd0\u7b97\u7b26\u7528\u4e8e\u5c5e\u6027\u7ed1\u5b9a\u3002jackson.get_age()\u5728\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u8fd4\u56de\u5230\u7528\u6237\u4e4b\u540e\uff0c\u4f7f\u7528\u70b9 . \u8fd0\u7b97\u7b26\u5373\u53ef\u8bbf\u95ee\u8fd9\u4e9b\u5c5e\u6027\u4ee5\u53ca\u7c7b\u7684\u5c5e\u6027\u3002 \u8bbf\u95ee\u5c5e\u6027\u65f6\uff0c\u7ed3\u679c\u503c\u53ef\u80fd\u6765\u81ea\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u3002\u53ef\u80fd\u6765\u81ea\u5b9e\u4f8b\u72ec\u6709\u7684\u5c5e\u6027\uff0c\u4e5f\u53ef\u80fd\u6765\u81ea\u7c7b\u7684\u5c5e\u6027\u3002\u8bbf\u95ee\u5c5e\u6027\u65f6\uff0cPython \u9996\u5148\u4f1a\u68c0\u67e5\u5b9e\u4f8b\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u8be5\u5c5e\u6027\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u5219\u4f1a\u5bf9\u5b9e\u4f8b\u7684\u7c7b\u8fdb\u884c\u641c\u7d22\u3002\u8fd9\u662f\u7c7b\u4e0e\u5176\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u5176\u5c5e\u6027\u7684\u5e95\u5c42\u673a\u5236\u3002 \u7ee7\u627f \u7ee7\u627f\u662f\u4e00\u79cd\u521b\u5efa\u65b0\u7c7b\u7684\u673a\u5236\uff0c\u76ee\u7684\u662f\u4f7f\u7528\u6216\u4fee\u6539\u73b0\u6709\u7c7b\u7684\u884c\u4e3a\u3002\u88ab\u7ee7\u627f\u7684\u7c7b\u79f0\u4e3a \u57fa\u7c7b \u6216 \u8d85\u7c7b \u3002\u65b0\u7c7b\u79f0\u4e3a \u6d3e\u751f\u7c7b \u6216 \u5b50\u7c7b \u3002 \u901a\u8fc7\u7ee7\u627f\u521b\u5efa\u7c7b\u65f6\uff0c\u6240\u521b\u5efa\u7684\u7c7b\u5c06\u201c\u7ee7\u627f\u201d\u5176\u57fa\u7c7b\u5b9a\u4e49\u7684\u5c5e\u6027\u3002 \u4f46\u662f\uff0c \u6d3e\u751f\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4efb\u4f55\u8fd9\u4e9b\u5c5e\u6027\u5e76\u6dfb\u52a0\u81ea\u5df1\u7684\u65b0\u5c5e\u6027\u3002 \u5728class\u8bed\u53e5\u4e2d\u7528\u4ee5\u9017\u53f7\u5206\u9694\u7684\u57fa\u7c7b\u540d\u79f0\u5217\u8868\u6765\u6307\u5b9a\u7ee7\u627f\uff0c\u4f8b\u5982\uff1a # A\u7c7b\u7ee7\u627f\u4e8eB\u3001C\u7c7b class A ( B , C ): pass \u5728 Python 2 \u4e2d\uff0c\u4e00\u4e2a\u7c7b\u9ed8\u8ba4\u4e0d\u4ece\u4efb\u4f55\u57fa\u7c7b\u4e2d\u7ee7\u627f\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u7ee7\u627f\u7684\u57fa\u7c7b\uff0c\u8fd9\u79cd\u7c7b\u79f0\u4e3a old-style class \uff08\u65e7\u5f0f\u7c7b\uff09 # \u7c7b A \u4e0d\u7ee7\u627f\u4efb\u4f55\u57fa\u7c7b class A : def __init__ ( self ): pass Python 2.2 \u5f15\u5165\u4e86 new-style class \uff08\u65b0\u5f0f\u7c7b\uff09\uff0c\u5176\u5efa\u8bae\u65b0\u7684\u7c7b\u578b\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a # \u7c7b A \u7ee7\u627f\u81ea object class A ( object ): def __init__ ( self ): pass Python 2.3 \u53ca\u540e\u7eed\u7248\u672c\u4e3a\u4e86\u4fdd\u6301\u5411\u4e0b\u517c\u5bb9\uff0c\u540c\u65f6\u63d0\u4f9b\u4ee5\u4e0a\u4e24\u79cd\u7c7b\u5b9a\u4e49\u7528\u4ee5\u533a\u5206 old-style class \u548c new-style class\u3002Python 3 \u5219\u5b8c\u5168\u5e9f\u5f03\u4e86 old-style class \u7684\u6982\u5ff5\uff0c \u5728Python3\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u6709\u6548\u7684\u57fa\u7c7b\uff0c\u7c7b\u5c06\u7ee7\u627fobject \u3002object\u662f\u6240\u6709Python3\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u65b9\u6cd5\uff08\u5982 __str__() \uff0c\u5b83\u53ef\u521b\u5efa\u4f9b\u6253\u5370\u51fd\u6570\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\uff09\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u7ee7\u627f\u901a\u5e38\u7528\u4e8e\u91cd\u65b0\u5b9a\u4e49\u73b0\u6709\u65b9\u6cd5\u7684\u884c\u4e3a\u3002 \u7ee7\u627f\u662f\u7528\u529f\u80fd\u7a0d\u5fae\u589e\u5f3a\u7684\u70b9 . \u8fd0\u7b97\u7b26\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5982\u679c\u641c\u7d22\u4e00\u4e2a\u5c5e\u6027\u65f6\u672a\u5728\u5b9e\u4f8b\u6216\u5b9e\u4f8b\u7684\u7c7b\u4e2d\u627e\u5230\u5339\u914d\u9879\uff0c\u5c06\u4f1a\u7ee7\u7eed\u641c\u7d22\u57fa\u7c7b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u57fa\u7c7b\u53ef\u4f9b\u641c\u7d22\u4e3a\u6b62\u3002 \u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49\u57fa\u7c7b\u7684\u65b9\u6cd5\u65f6\uff0c\u4e0d\u4f1a\u518d\u81ea\u52a8\u8c03\u7528\u57fa\u7c7b\u7684\u540c\u540d\u65b9\u6cd5\u3002\u4f8b\u5982\u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49\u4e86 __init__() \uff0c\u6b64\u65f6\u4fbf\u4e0d\u4f1a\u81ea\u52a8\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002\u4f46\u6709\u65f6\u5019\uff0c\u867d\u7136\u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49\u4e86 __init__() \uff0c\u4f46\u662f\u6d3e\u751f\u7c7b\u8fd8\u60f3\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u6765\u8fdb\u884c\u6070\u5f53\u7684\u521d\u59cb\u5316\u3002 \u6b64\u65f6\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u7684\u65b9\u6cd5 \u3002\u5982\u679c\u57fa\u7c7b\u672a\u5b9a\u4e49 __init__() \uff0c\u5c31\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e00\u6b65\u3002\u5982\u679c\u4e0d\u77e5\u9053\u57fa\u7c7b\u662f\u5426\u5b9a\u4e49\u4e86 __init__() \uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e0d\u63d0\u4f9b\u4efb\u4f55\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u5b83\uff0c\u56e0\u4e3a\u59cb\u7ec8\u5b58\u5728\u4e00\u4e2a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u7684\u9ed8\u8ba4 __init__() \u5b9e\u73b0\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u4eba\u7c7b class Person : def __init__ ( self , name , age ): self . name = name self . age = age def get_name ( self ): return self . name def get_age ( self ): return self . age # \u5b9a\u4e49\u4e00\u4e2a\u7f8e\u56fd\u4eba\u7c7b ## \u73b0\u5728\u60f3\u7ed9\u7f8e\u56fd\u4eba\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u52a0\u4e0a \u6027\u522b \u7684\u5c5e\u6027 class American ( Person ): # \u91cd\u65b0\u5b9a\u4e49__init__()\u4f1a\u8986\u76d6Person\u7684__init__()\u65b9\u6cd5 def __init__ ( self , name , age , gender ): # \u663e\u5f0f\u8c03\u7528\u57fa\u7c7b\u7684__init__()\u65b9\u6cd5 Person . __init__ ( self , name , age ) self . gender = gender def get_gender ( self ): return self . gender jackson = American ( name = \"Cesar T. Mauck\" , age = 14 , gender = \"male\" ) print ( jackson . get_age ()) print ( jackson . get_gender ()) 14 male \u6d3e\u751f\u7c7b\u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u7684\u65b9\u6cd5\u5e76\u4e0d\u603b\u662f\u597d\u7684\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u534e\u76db\u987f\u4eba\u7c7b class Washington ( American ): def get_age ( self ): return f \" { self . age } years old\" def growing_up ( self ): # \u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5 age = American . get_age ( self ) age += 1 self . age = age print ( \"Washington people grow up one year old\" ) \u8fd9\u4e2a\u4f8b\u5b50\u7684\u5fae\u5999\u4e4b\u5904\u5728\u4e8e\uff0cAmerican\u8fd9\u4e2a\u7c7b\u5176\u5b9e\u6ca1\u6709\u5b9e\u73b0 get_age() \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u662f\u5728Person\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002\u5c3d\u7ba1\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u6df7\u6dc6\uff08\u4f8b\u5982\uff0cAmerican\u662f\u5426\u5e94\u8be5\u5b9e\u73b0 get_age() ? \uff09\u3002\u56e0\u6b64\uff0c\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u662f\u7528 super() \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7c7b class California ( American ): def get_age ( self ): return f \" { self . age } years old\" def growing_up ( self ): ## \u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3aget_age()\u65b9\u6cd5\u5728Person\u4e2d\u5b9a\u4e49 ## \u8fd9\u91cc\u53ef\u4ee5\u4f20\u5165Person\u7684\u4efb\u4f55\u4e00\u4e2a\u6d3e\u751f\u7c7b age = super ( California , self ) . get_age () age += 1 self . age = age print ( \"Californians grow up one year old\" ) Terri = California ( \"Terri H. Booth\" , 25 , \"female\" ) Terri . growing_up () Californians grow up one year old super(cls, instance) \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u652f\u6301\u5728\u57fa\u7c7b\u4e0a\u6267\u884c\u5c5e\u6027\u67e5\u627e\u3002\u5982\u679c\u4f7f\u7528\u8be5\u51fd\u6570\uff0cPython\u5c06\u4f7f\u7528\u672c\u6765\u5e94\u8be5\u5728\u57fa\u7c7b\u4e0a\u4f7f\u7528\u7684\u6b63\u5e38\u641c\u7d22\u89c4\u5219\u6765\u641c\u7d22\u5c5e\u6027\u3002\u6709\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5c31\u65e0\u9700\u5199\u6b7b\u65b9\u6cd5\u4f4d\u7f6e\uff0c\u5e76\u4e14\u80fd\u66f4\u6e05\u6670\u5730\u9648\u8ff0\u4f60\u7684\u610f\u56fe\uff08\u5373\u4f60\u5e0c\u671b\u8c03\u7528\u4ee5\u524d\u7684\u5b9e\u73b0\uff0c\u65e0\u8bba\u5b83\u662f\u54ea\u4e2a\u57fa\u7c7b\u5b9a\u4e49\u7684\uff09\u3002\u7136\u800c\uff0c super() \u7684\u8bed\u6cd5\u5c1a\u6709\u4e0d\u8db3\u4e4b\u5904\u3002\u5982\u679c\u4f7f\u7528Python 3\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5316\u7684\u8bed\u53e5 super().get_age() \u6765\u6267\u884c\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u8ba1\u7b97\u3002 \u591a\u91cd\u7ee7\u627f Python\u652f\u6301\u591a\u91cd\u7ee7\u627f\u3002\u901a\u8fc7\u8ba9\u4e00\u4e2a\u7c7b\u5217\u51fa\u591a\u4e2a\u57fa\u7c7b\u5373\u53ef\u6307\u5b9a\u591a\u91cd\u7ee7\u627f\u3002\u4f8b\u5982\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u5723\u62c9\u8499\u4eba\u7c7b class SanRamon ( California , Washington , American ): def growing_up ( self ): pass Edwin = SanRamon ( \"Edwin A. Marcotte\" , 37 , \"male\" ) Edwin . get_age () '37 years old' \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u65f6\uff0c\u5c5e\u6027\u7684\u89e3\u6790\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u641c\u7d22\u8def\u5f84\u6765\u7ed1\u5b9a\u5c5e\u6027\u3002 \u5728\u67e5\u627e\u4f7f\u7528\u4e86\u591a\u91cd\u7ee7\u627f\u7684\u5c5e\u6027\u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u57fa\u7c7b\u6309\u4ece\u201c\u6700\u7279\u6b8a\u201d\u7684\u7c7b\u5230\u201c\u6700\u4e0d\u7279\u6b8a\u201d\u7684\u7c7b\u8fd9\u79cd\u987a\u5e8f\u8fdb\u884c\u6392\u5217\u3002\u7136\u540e\u5728\u641c\u7d22\u5c5e\u6027\u65f6\uff0c\u5c31\u4f1a\u6309\u8fd9\u4e2a\u987a\u5e8f\u641c\u7d22\uff0c\u76f4\u81f3\u627e\u5230\u8be5\u5c5e\u6027\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7c7b\uff0c\u901a\u8fc7\u6253\u5370\u5b83\u7684 __mro__ \u5c5e\u6027\u5373\u53ef\u67e5\u770b\u57fa\u7c7b\u7684\u987a\u5e8f\uff08\u6216\u8005\u8c03\u7528 mro() \u65b9\u6cd5\uff09\uff0c\u4f8b\u5982\uff1a SanRamon . __mro__ (__main__.SanRamon, __main__.California, __main__.Washington, __main__.American, __main__.Person, object) SanRamon . mro () [__main__.SanRamon, __main__.California, __main__.Washington, __main__.American, __main__.Person, object] \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5217\u8868\u57fa\u4e8e\u201c\u6709\u610f\u4e49\u201d\u7684\u89c4\u5219\u6392\u5217\u5f97\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u59cb\u7ec8\u5148\u68c0\u67e5\u6d3e\u751f\u7c7b\uff0c\u7136\u540e\u518d\u68c0\u67e5\u5176\u57fa\u7c7b\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u5177\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u90a3\u4e48\u59cb\u7ec8\u6309\u7c7b\u5b9a\u4e49\u4e2d\u5217\u51fa\u7684\u7236\u7c7b\u987a\u5e8f\u68c0\u67e5\u8fd9\u4e9b\u7236\u7c7b\u3002\u4f46\u662f\uff0c\u57fa\u7c7b\u7684\u51c6\u786e\u987a\u5e8f\u5b9e\u9645\u4e0a\u975e\u5e38\u590d\u6742\uff0c\u4e0d\u662f\u57fa\u4e8e\u4efb\u4f55\u201c\u7b80\u5355\u7684\u201d\u7b97\u6cd5\uff0c\u5982\u6df1\u5ea6\u4f18\u5148\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u5b9e\u9645\u4e0a\uff0c\u57fa\u7c7b\u7684\u987a\u5e8f\u7531 C3 \u7ebf\u6027\u5316\u7b97\u6cd5\u786e\u5b9a\uff0c\u53ef\u4ee5\u5728\u8bba\u6587\u201cA Monotonic Superclass Linearization for Dylan\u201d\uff08K. Barrett \u7b49\uff0c\u53d1\u8868\u4e8e OOPSLA\u201996\uff09\u4e2d\u627e\u5230\u8be5\u7b97\u6cd5\u7684\u4ecb\u7ecd\u3002\u8be5\u7b97\u6cd5\u7684\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u67d0\u4e9b\u7c7b\u5c42\u6b21\u7ed3\u6784\u5c06\u88ab Python \u62d2\u7edd\u5e76\u4f1a\u629b\u51fa TypeError \u9519\u8bef\uff0c\u4f8b\u5982\uff1a try : class SanRamon ( American , California , Washington ): def growing_up ( self ): pass except TypeError as e : print ( \"TypeError\" , e ) TypeError Cannot create a consistent method resolution order (MRO) for bases American, California, Washington \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c SanRamon \u7c7b\u7684\u7ee7\u627f\u5217\u8868\u662f\u4ece\u6700\u4e0d\u7279\u6b8a\u5230\u7279\u6b8a\u7684\uff0c\u56e0\u4e3a American \u662f California \u548c Washington \u7684\u57fa\u7c7b\u3002\u8fd9\u4e5f\u6b63\u662f\u8be5\u7c7b\u5c42\u6b21\u7ed3\u6784\u4f1a\u51fa\u9519\u7684\u539f\u56e0\u3002\u5177\u4f53\u7684\u539f\u56e0\u6d89\u53caC3\u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u9650\u4e8e\u7bc7\u5e45\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u53d9\u8ff0\u3002\u5173\u4e8ePython MRO\u7b97\u6cd5\u7684\u8be6\u7ec6\u4ecb\u7ecd\u53c2\u8003 \u300a4.2.\u591a\u91cd\u7ee7\u627f\u548cMRO\u300b \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5927\u591a\u6570\u7a0b\u5e8f\u4e2d\u6700\u597d\u907f\u514d\u4f7f\u7528\u591a\u91cd\u7ee7\u627f \u3002\u4f46\u662f\uff0c\u591a\u91cd\u7ee7\u627f\u6709\u65f6\u53ef\u7528\u4e8e\u5b9a\u4e49\u6240\u8c13\u7684\u6df7\u5408\uff08mixin\uff09\u7c7b\u3002\u6df7\u5408\u7c7b\u901a\u5e38\u5b9a\u4e49\u4e86\u8981\u201c\u6df7\u5408\u5230\u201d\u5176\u4ed6\u7c7b\u4e2d\u7684\u4e00\u7ec4\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\uff08\u8fd9\u4e0e\u5b8f\u5f88\u7c7b\u4f3c\uff09\u3002\u901a\u5e38\uff0c\u6df7\u5408\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5c06\u5047\u5b9a\u5176\u4ed6\u65b9\u6cd5\u5b58\u5728\uff0c\u5e76\u5c06\u4ee5\u8fd9\u4e9b\u65b9\u6cd5\u4e3a\u57fa\u7840\u6784\u5efa\u3002 \u591a\u6001\u52a8\u6001\u7ed1\u5b9a\u548c\u9e2d\u5b50\u7c7b\u578b \u52a8\u6001\u7ed1\u5b9a\uff08\u5728\u7ee7\u627f\u80cc\u666f\u4e0b\u4f7f\u7528\u65f6\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a\u591a\u6001\u6027\uff09\u662f\u6307\u5728\u4e0d\u8003\u8651\u5b9e\u4f8b\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b9e\u4f8b\u53ea\u8981\u4ee5 obj.attr \u7684\u5f62\u5f0f\u8bbf\u95ee\u5c5e\u6027\uff0c\u5c31\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u641c\u7d22\u5e76\u5b9a\u4f4d attr \uff1a \u9996\u5148\u662f\u5b9e\u4f8b\u672c\u8eab\uff0c\u63a5\u7740\u662f\u5b9e\u4f8b\u7684\u7c7b\u5b9a\u4e49\uff0c\u7136\u540e\u662f\u57fa\u7c7b\u3002 \u67e5\u627e\u8fc7\u7a0b\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002 \u8fd9\u79cd\u7ed1\u5b9a\u8fc7\u7a0b\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5b83\u4e0d\u53d7\u5bf9\u8c61 obj \u7684\u7c7b\u578b\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6267\u884c\u50cf obj.name \u8fd9\u6837\u7684\u67e5\u627e\uff0c\u5bf9\u6240\u6709\u62e5\u6709 name \u5c5e\u6027\u7684 obj \u90fd\u662f\u9002\u7528\u7684\u3002 polymorphism \u6e90\u81ea\u5e0c\u814a\u8bed\uff0c\u610f\u601d\u662f\u201c\u6709\u591a\u79cd\u5f62\u6001\u201d\u3002\u8fd9\u5927\u81f4\u610f\u5473\u7740\u5373\u4fbf\u4f60\u4e0d\u77e5\u9053\u53d8\u91cf\u6307\u5411\u7684\u662f\u54ea\u79cd\u5bf9\u8c61\uff0c\u4e5f\u80fd\u591f\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\uff0c\u4e14\u64cd\u4f5c\u7684\u884c\u4e3a\u5c06\u968f\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u578b\uff08\u7c7b\uff09\u800c\u5f02\u3002\u4e5f\u5c31\u662f\u540c\u4e00\u79cd\u8c03\u7528\u5f62\u5f0f\uff0c\u4f46\u6709\u4e0d\u540c\u7684\u6267\u884c\u6548\u679c\u3002 \u5728Python\u4e2d\uff0c\u591a\u6001\u4e5f\u79f0\u4e3a \u9e2d\u5b50\u7c7b\u578b \uff08duck typing\uff09\u3002\u8fd9\u4e2a\u672f\u8bed\u6e90\u81ea James Whitcomb Riley \u572817\u4e16\u7eaa\u5199\u4e0b\u7684\u4e00\u53e5\u8bd7\uff1a When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. \u771f\u4e0d\u77e5\u9053\u8c01\u60f3\u51fa\u8fd9\u4e2a\u672f\u8bed\u7684\uff0c\u5982\u679c\u7528\u6570\u5b66\u672f\u8bed\u6765\u7c7b\u6bd4\uff0c\u9e2d\u5b50\u7c7b\u578b\u76f8\u5f53\u4e8e\u6570\u5b66\u7684\u516c\u7406\u5316\u5b9a\u4e49\uff0c\u4e0d\u5173\u5fc3\u662f\u4ec0\u4e48\uff0c\u53ea\u5173\u5fc3\u6709\u4ec0\u4e48\u7279\u6027\u3002 Python \u7a0b\u5e8f\u5458\u7ecf\u5e38\u7f16\u5199\u5229\u7528\u8fd9\u79cd\u884c\u4e3a\u7684\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60f3\u7f16\u5199\u73b0\u6709\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u7248\u672c\uff0c\u53ef\u4ee5\u7ee7\u627f\u8be5\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5916\u89c2\u548c\u884c\u4e3a\u50cf\u5b83\u4f46\u4e0e\u5b83\u65e0\u4efb\u4f55\u5173\u7cfb\u7684\u5168\u65b0\u5bf9\u8c61\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u4fdd\u6301\u7a0b\u5e8f\u7ec4\u4ef6\u7684\u677e\u6563\u8026\u5408\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u7f16\u5199\u4ee3\u7801\u6765\u5904\u7406\u4efb\u4f55\u79cd\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ea\u8981\u8be5\u5bf9\u8c61\u62e5\u6709\u7279\u5b9a\u7684\u65b9\u6cd5\u96c6\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5229\u7528\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u5404\u79cd\u201c\u7c7b\u4f3c\u6587\u4ef6\u201d\u7684\u5bf9\u8c61\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5de5\u4f5c\u65b9\u5f0f\u50cf\u6587\u4ef6\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u7ee7\u627f\u81ea\u5185\u7f6e\u6587\u4ef6\u5bf9\u8c61\u7684\u3002 \u5b9e\u4f8b\u65b9\u6cd5 \u7c7b\u4e2d\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5373 \u5c06\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u3002 \u6839\u636e\u7ea6\u5b9a\uff0c\u8fd9\u4e2a\u53c2\u6570\u540d\u79f0\u4e3aself\uff0c\u5c3d\u7ba1\u6240\u6709\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 self \u53c2\u6570\u6307\u5411\u5bf9\u8c61\u672c\u8eab\u3002 self \u53c2\u6570\u5f88\u6709\u7528\uff0c\u751a\u81f3\u5fc5\u4e0d\u53ef\u5c11\u3002\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u65e0\u6cd5\u8bbf\u95ee\u5bf9\u8c61\u672c\u8eab\uff08\u8981\u64cd\u4f5c\u7684\u5c5e\u6027\u6240\u5c5e\u7684\u5bf9\u8c61\uff09\u3002 \u4e0b\u9762\u662f\u4ee5\u662f\u5b9e\u4f8b\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def printd ( self ): print ( self . data ) ik1 = Kls ( 'arun' ) ik2 = Kls ( 'seema' ) ik1 . printd () ik2 . printd () arun seema \u7136\u540e\u770b\u4e00\u4e0b\u4ee3\u7801\u548c\u793a\u4f8b\u56fe\u7247: \u57281\u30012\u4e2d\uff0c\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002 \u57283\u4e2d\uff0c self\u53c2\u6570\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u3002 \u57284\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u7ed9\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u4f8b\uff0c Python\u89e3\u91ca\u5668\u81ea\u5df1\u4f1a\u505a\u8fd9\u4e9b\u64cd\u4f5c \u3002 \u9759\u6001\u65b9\u6cd5 Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u9759\u6001\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u4e0d\u9700\u8981\u8bbf\u95ee\u5b9e\u4f8b\u5bf9\u8c61\u6216\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u4f46\u4e0e\u7c7b\u6709\u5173\u7684\u529f\u80fd \u521b\u5efa\u6784\u9020\u51fd\u6570 \u7ecf\u5e38\u6709\u4e00\u4e9b\u8ddf\u7c7b\u6709\u5173\u7cfb\u7684\u529f\u80fd\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u53c8\u4e0d\u9700\u8981\u5b9e\u4f8b\u548c\u7c7b\u53c2\u4e0e\uff08\u6bd4\u5982\u66f4\u6539\u73af\u5883\u53d8\u91cf\u6216\u8005\u4fee\u6539\u5176\u4ed6\u7c7b\u7684\u5c5e\u6027\uff09\uff0c\u5f53\u7136\u53ef\u4ee5\u5728\u7c7b\u5b9a\u4e49\u4e4b\u5916\u5199\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u4f46\u8fd9\u6837\u4f1a\u6269\u6563\u7c7b\u5185\u90e8\u7684\u4ee3\u7801\uff0c\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002\u6bd4\u5982\u8fd9\u6837\uff1a IND = 'ON' def checkind (): return ( IND == 'ON' ) class Kls ( object ): def __init__ ( self , data ): self . data = data def do_reset ( self ): if checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if checkind (): self . db = 'new db connection' print ( 'DB connection made for:' , self . data ) ik1 = Kls ( 12 ) do_reset ( ik1 ) # Reset done for: 12 set_db ( ik1 ) # DB connection made for: 12 \u5982\u679c\u4f7f\u7528 @staticmethod \u5c31\u80fd\u628a\u76f8\u5173\u7684\u4ee3\u7801\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e86\u3002 IND = 'ON' class Kls ( object ): def __init__ ( self , data ): self . data = data @staticmethod def checkind (): return ( IND == 'ON' ) def do_reset ( self ): if self . checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if self . checkind (): self . db = 'New db connection' print ( 'DB connection made for: ' , self . data ) ik1 = Kls ( 12 ) ik1 . do_reset () ik1 . set_db () Reset done for: 12 DB connection made for: 12 \u5b9e\u9645\u4e0a\uff0c\u9759\u6001\u65b9\u6cd5\u662f\u4e00\u79cd\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4eec\u6b63\u597d\u4f4d\u4e8e\u7c7b\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c \u56e0\u4e3a\u5b83\u4e0d\u4f1a\u5bf9\u4efb\u4f55\u5b9e\u4f8b\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c \u3002 \u5982\u679c\u5728\u7f16\u5199\u7c7b\u65f6\u9700\u8981\u91c7\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u5219\u5e38\u5e38\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\u3002\u56e0\u4e3a\u7c7b\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a __init__() \u51fd\u6570\uff0c\u6240\u4ee5\u66ff\u4ee3\u7684\u521b\u5efa\u51fd\u6570\u901a\u5e38\u6309\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a import time class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @staticmethod def now (): t = time . localtime () return Date ( t . tm_year , t . tm_mon , t . tm_mday ) @staticmethod def tomorrow (): t = time . localtime ( time . time () + 86400 ) return Date ( t . tm_year , t . tm_mon , t . tm_mday ) # \u521b\u5efa\u65e5\u671f\u7684\u793a\u4f8b a = Date ( 1967 , 4 , 9 ) b = Date . now () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5now() c = Date . tomorrow () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5tomorrow() \u7c7b\u65b9\u6cd5 Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u7c7b\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u521b\u5efa\u6784\u9020\u51fd\u6570 \u52a8\u6001\u66f4\u65b0\u7c7b \u7c7b\u65b9\u6cd5\u662f\u5c06\u7c7b\u672c\u8eab\u4f5c\u4e3a\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\u7c7b\u65b9\u6cd5\u4f7f\u7528 @classmethod \u88c5\u9970\u5668\u5b9a\u4e49\uff0c\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u540c\uff0cPython\u89e3\u91ca\u5668\u4f1a\u5c06\u7c7b\u672c\u8eab\u4f20\u9012\u7ed9\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u4e00\u822c\u5c06\u8be5\u53c2\u6570\u547d\u540d\u4e3a cls \uff09\u3002\u4f8b\u5982\uff1a class Times ( object ): factor = 1 @classmethod def mul ( cls , x ): return cls . factor * x class TwoTimes ( Times ): factor = 2 x = TwoTimes . mul ( 4 ) # \u8c03\u7528Times.mul(TwoTimes, 4) -> 8 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8bf7\u6ce8\u610f\u7c7b TwoTimes \u662f\u5982\u4f55\u4f5c\u4e3a\u5bf9\u8c61\u4f20\u9012\u7ed9 mul() \u7684\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u4f8b\u5b50\u6709\u4e9b\u6df1\u5965\uff0c\u4f46\u7c7b\u65b9\u6cd5\u8fd8\u6709\u4e00\u4e9b\u5b9e\u7528\u4e14\u5de7\u5999\u7684\u7528\u6cd5\u3002\u4f8b\u5982\uff0c\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7ee7\u627f\u81ea\u524d\u9762\u7ed9\u51fa\u7684 Date \u7c7b\u5e76\u5bf9\u5176\u7565\u52a0\u5b9a\u5236\uff1a class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) \u7531\u4e8e\u8be5\u7c7b\u7ee7\u627f\u81ea Date\uff0c\u6240\u4ee5\u5b83\u62e5\u6709 Date \u7684\u6240\u6709\u7279\u6027\u3002\u4f46\u662f now() \u548c tomorrow() \u65b9\u6cd5\u7a0d\u5fae\u6709\u70b9\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8c03\u7528 EuroDate.now()\uff0c\u5219\u4f1a\u8fd4\u56de Date \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f EuroDate \u5bf9\u8c61\u3002\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\uff1a class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @classmethod def now ( cls ): t = time . localtime () return cls ( t . tm_year , t . tm_mon , t . tm_mday ) @classmethod def tomorrow ( cls ): t = time . localtime ( time . time () + 86400 ) return cls ( t . tm_year , t . tm_mon , t . tm_mday ) class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) a = Date . now () # \u8c03\u7528Date.now(Date)\u5e76\u8fd4\u56deDate b = EuroDate . now () # \u8c03\u7528Date.now(EuroDate)\u5e76\u8fd4\u56deEuroDate print ( type ( a )) print ( type ( b )) <class '__main__.Date'> <class '__main__.EuroDate'> \u7c7b\u65b9\u6cd5\u9664\u4e86\u7528\u4e8e\u521b\u5efa\u6784\u9020\u51fd\u6570\uff0c\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u52a8\u6001\u66f4\u65b0\u7c7b\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u52a8\u6001\u66f4\u65b0\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a class Kls ( object ): models = {} def __init__ ( self , model_name ): # \u52a0\u8f7d\u6a21\u578b pass @classmethod def load_model ( cls , model_name ): cls . models [ model_name ] = cls ( model_name ) @classmethod def get_model ( cls , model_name ): return cls . models . get ( model_name , None ) def predict ( self ): return \"\u9884\u6d4b\u7ed3\u679c\u4e3a1\" model_name = \"svm\" Kls . load_model ( model_name ) model = Kls . get_model ( model_name ) model . predict () '\u9884\u6d4b\u7ed3\u679c\u4e3a1' Kls . models {'svm': <__main__.Kls at 0x17346dcc508>} \u5f53\u7136\uff0c\u9664\u4e86\u4f7f\u7528\u7c7b\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u663e\u5f0f\u8c03\u7528\u7c7b\u5c5e\u6027\uff0c\u8fbe\u5230\u52a8\u6001\u66f4\u65b0\u7c7b\u7684\u6548\u679c\uff0c\u4f8b\u5982\u6211\u4eec\u8981\u83b7\u53d6\u5b9e\u4f8b\u6570\uff1a class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 @classmethod def get_no_of_instance ( cls_obj ): return cls_obj . no_inst ik1 = Kls () ik2 = Kls () print ( ik1 . get_no_of_instance ()) print ( Kls . get_no_of_instance ()) 2 2 \u4f46\u662f\u5982\u679c\u8981\u7528\u5b9e\u4f8b\u65b9\u6cd5\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u5f97\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8981\u7ed9\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u547d\u540d\u3002\u5728\u7f16\u7a0b\u4e2d\uff0c\u7ed9\u8fc7\u591a\u7684\u53d8\u91cf\u547d\u540d\uff0c\u6709\u65f6\u662f\u4e00\u4e2a\u5934\u75bc\u7684\u95ee\u9898\u3002 \u5728\u7c7b\u5916\u9762\u5199\u4e00\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c\uff0c\u4f46\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002 def get_no_of_instances ( cls_obj ): return cls_obj . no_inst class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 ik1 = Kls () ik2 = Kls () print ( get_no_of_instances ( Kls )) 2 \u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5bf9\u6bd4 \u5728\u5b9e\u4f8b\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u4e2d\uff0cPython\u9ed8\u8ba4\u5c06\u5f53\u524d\u5b9e\u4f8b\u6216\u8005\u7c7b\u5bf9\u8c61\u4f20\u7ed9\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u975e\u6307\u5b9a\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\uff09\uff0c\u5982\u679c\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u4fbf\u4f1a\u62a5\u9519\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def instance_method_no_self (): print ( \"\u4e0d\u63a5\u6536\u5b9e\u4f8b\" ) def instance_method ( * arg ): print ( 'Instance:' , arg ) @staticmethod def static_method ( * arg ): print ( 'Static:' , arg ) @classmethod def class_method_no_cls (): print ( \"\u4e0d\u63a5\u6536\u7c7b\u5bf9\u8c61\" ) @classmethod def class_method ( * arg ): print ( 'Class:' , arg ) ik3 = Kls ( 'arun' ) try : ik3 . instance_method_no_self () except TypeError as e : print ( \"TypeError:\" , e ) try : ik3 . class_method_no_cls () except TypeError as e : print ( \"TypeError:\" , e ) TypeError: instance_method_no_self() takes 0 positional arguments but 1 was given TypeError: class_method_no_cls() takes 0 positional arguments but 1 was given \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5fc5\u987b\u8bbe\u7f6e\u53c2\u6570\u63a5\u6536\u7c7b\u5bf9\u8c61\uff1a ik3 . instance_method () ik3 . class_method () Instance: (<__main__.Kls object at 0x0000017346E17588>,) Class: (<class '__main__.Kls'>,) \u9759\u6001\u65b9\u6cd5\u5219\u4e0d\u4f1a\u4f20\u5165\u5b9e\u4f8b\u6216\u7c7b\u5bf9\u8c61\uff1a ik3 . static_method () Static: () \u5982\u679c\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u53ea\u80fd\u901a\u8fc7\u7c7b\u53bb\u8c03\u7528\uff0c \u56e0\u4e3a\u7c7b\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\u65f6\uff0c\u4e0d\u4f1a\u4f20\u5165\u7c7b\u6216\u8005\u5b9e\u4f8b\u3002 \u5e94\u8be5\u907f\u514d\u8fd9\u79cd\u7528\u6cd5\uff0c\u6ca1\u53c2\u6570\u7684\u65b9\u6cd5\u5e94\u8be5\u52a0\u4e0a @staticmethod \u88c5\u9970\u5668\uff1a Kls . instance_method_no_self () \u4e0d\u63a5\u6536\u5b9e\u4f8b \u5173\u4e8e\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0cPython \u4e0d\u4f1a\u5728\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u72ec\u7acb\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7ba1\u7406\u5b83\u4eec\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u6216\u7c7b\u8c03\u7528\u5b83\u4eec\u3002\u4f8b\u5982\uff1a Kls . class_method () Kls ( 'arun' ) . class_method () Kls . static_method () Kls ( 'arun' ) . static_method () Class: (<class '__main__.Kls'>,) Class: (<class '__main__.Kls'>,) Static: () Static: () \u8fd9\u53ef\u80fd\u5f88\u5bb9\u6613\u5f15\u8d77\u6df7\u6dc6\uff0c\u56e0\u4e3a\u5bf9 Kls('arun').cmethod2() \u7684\u8c03\u7528\u4e0e\u5b9e\u4f8b Kls('arun') \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u8fd9\u79cd\u884c\u4e3a\u662f Python \u5bf9\u8c61\u7cfb\u7edf\u4e0e\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff08\u5982 Smalltalk \u548c Ruby\uff09\u5bf9\u8c61\u7cfb\u7edf\u7684\u533a\u522b\u4e4b\u4e00\u3002\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7c7b\u65b9\u6cd5\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u662f\u4e25\u683c\u5206\u5f00\u7684\u3002 \u800c\u5b9e\u4f8b\u65b9\u6cd5\u5fc5\u987b\u901a\u8fc7\u5b9e\u4f8b\u8c03\u7528\uff0c\u56e0\u4e3a\u9700\u8981\u4f20\u5165\u5b9e\u4f8b \u3002 \u603b\u7ed3 \u5b9e\u4f8b\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e09\u79cd\u65b9\u6cd5 \u7c7b\u53ea\u80fd\u8c03\u7528\u7c7b\u65b9\u6cd5\u548c\u9759\u6001\u65b9\u6cd5 \u7279\u6027 @property \u2014\u2014\u628a\u65b9\u6cd5\u53d8\u4e3a\u5c5e\u6027 \u901a\u5e38\uff0c\u8bbf\u95ee\u5b9e\u4f8b\u6216\u7c7b\u7684\u5c5e\u6027\u65f6\uff0c\u8fd4\u56de\u7684\u4f1a\u662f\u6240\u5b58\u50a8\u7684\u76f8\u5173\u503c\u3002\u7279\u6027\uff08property\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5c5e\u6027\uff0c\u8bbf\u95ee\u5b83\u65f6\u4f1a\u8ba1\u7b97\u5b83\u7684\u503c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius # Circle\u7684\u4e00\u4e9b\u9644\u52a0\u7279\u6027 @property def area ( self ): return math . pi * self . radius ** 2 @property def preimeter ( self ): return 2 * math . pi * self . radius \u5f97\u5230\u7684Circle\u5bf9\u8c61\u7684\u884c\u4e3a\u5982\u4e0b\uff1a c = Circle ( 4.0 ) print ( c . radius ) print ( c . area ) print ( c . preimeter ) try : c . area = 2 except AttributeError as e : print ( \"AttributeError:\" , e ) 4.0 50.26548245743669 25.132741228718345 AttributeError: can't set attribute \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cCircle \u5b9e\u4f8b\u5b58\u50a8\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf c.radius \u3002 c.area \u548c c.perimeter \u662f\u6839\u636e\u8be5\u503c\u8ba1\u7b97\u5f97\u6765\u7684\u3002 @property \u88c5\u9970\u5668\u652f\u6301\u4ee5\u7b80\u5355\u5c5e\u6027\u7684\u5f62\u5f0f\u8bbf\u95ee\u540e\u9762\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u50cf\u5e73\u5e38\u4e00\u6837\u6dfb\u52a0\u989d\u5916\u7684 () \u6765\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\u5bf9\u8c61\u7684\u4f7f\u7528\u8005\u5f88\u96be\u53d1\u73b0\u6b63\u5728\u8ba1\u7b97\u4e00\u4e2a\u5c5e\u6027\uff0c\u9664\u975e\u5728\u8bd5\u56fe\u91cd\u65b0\u5b9a\u4e49\u8be5\u5c5e\u6027\u65f6\u751f\u6210\u4e86\u9519\u8bef\u6d88\u606f\uff08\u5982\u4e0a\u9762\u7684 AttributeError \u5f02\u5e38\u6240\u793a\uff09\u3002 \u8fd9\u79cd\u7279\u6027\u4f7f\u7528\u65b9\u5f0f\u9075\u5faa\u6240\u8c13\u7684\u7edf\u4e00\u8bbf\u95ee\u539f\u5219\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5c3d\u53ef\u80fd\u4fdd\u6301\u7f16\u7a0b\u63a5\u53e3\u7684\u7edf\u4e00\u603b\u662f\u4e0d\u9519\u7684\u3002\u5982\u679c\u6ca1\u6709\u7279\u6027\uff0c\u5c06\u4f1a\u4ee5\u7b80\u5355\u5c5e\u6027\uff08\u5982 c.radius \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u800c\u5176\u4ed6\u5c5e\u6027\u5c06\u4ee5\u65b9\u6cd5\uff08\u5982 c.area() \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u3002\u8d39\u529b\u53bb\u4e86\u89e3\u4f55\u65f6\u6dfb\u52a0\u989d\u5916\u7684 () \u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u6df7\u6dc6\u3002\u7279\u6027\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 Python \u7a0b\u5e8f\u5458\u5f88\u5c11\u8ba4\u8bc6\u5230\uff0c \u65b9\u6cd5\u672c\u8eab\u662f\u88ab\u9690\u5f0f\u5730\u4f5c\u4e3a\u4e00\u7c7b\u7279\u6027\u5904\u7406\u7684\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7c7b\uff1a class Foo ( object ): def __init__ ( self , name ): self . name = name def spam ( self , x ): print ( \" %s , %s \" % ( self . name , x )) Foo ( \"d\" ) . spam <bound method Foo.spam of <__main__.Foo object at 0x0000017346E39948>> \u7528\u6237\u521b\u5efa f = Foo(\"Guido\") \u8fd9\u6837\u7684\u5b9e\u4f8b\u7136\u540e\u8bbf\u95ee f.spam \u65f6\uff0c\u4e0d\u4f1a\u8fd4\u56de\u539f\u59cb\u51fd\u6570\u5bf9\u8c61 spam \uff0c\u800c\u662f\u4f1a\u5f97\u5230\u6240\u8c13\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff08bound method\uff09\uff0c\u7ed1\u5b9a\u65b9\u6cd5\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ee3\u8868\u5c06\u5728\u5bf9\u8c61\u4e0a\u8c03\u7528 () \u8fd0\u7b97\u7b26\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u7ed1\u5b9a\u65b9\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5df2\u90e8\u5206\u8ba1\u7b97\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u7684self\u53c2\u6570\u5df2\u7ecf\u586b\u5165\uff0c\u4f46\u5176\u4ed6\u53c2\u6570\u4ecd\u7136\u9700\u8981\u5728\u4f7f\u7528 () \u8c03\u7528\u8be5\u51fd\u6570\u65f6\u63d0\u4f9b\u3002\u8fd9\u79cd\u7ed1\u5b9a\u65b9\u6cd5\u5bf9\u8c61\u662f\u7531\u5728\u540e\u53f0\u6267\u884c\u7684\u7279\u6027\u51fd\u6570\u9759\u9ed8\u5730\u521b\u5efa\u7684\u3002 \u4f7f\u7528 @staticmethod \u548c @classmethod \u5b9a\u4e49\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u6307\u5b9a\u4e86\u4f7f\u7528\u4e0d\u540c\u7684\u7279\u6027\u51fd\u6570\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5bf9\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bbf\u95ee\u3002 \u4f8b\u5982\uff0c @staticmethod \u4ec5\u201c\u6309\u539f\u6837\u201d\u8fd4\u56de\u65b9\u6cd5\u51fd\u6570\uff0c\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u7279\u6b8a\u7684\u5305\u88c5\u6216\u5904\u7406\u3002 \u7279\u6027\u8fd8\u53ef\u4ee5\u622a\u83b7\u64cd\u4f5c\u6743\uff0c\u4ee5\u8bbe\u7f6e\u548c\u5220\u9664\u5c5e\u6027\u3002\u8fd9\u662f\u901a\u8fc7\u5411\u7279\u6027\u9644\u52a0\u5176\u4ed6 setter \u548c deleter \u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Foo ( object ): def __init__ ( self , name ): self . __name = name @property def name ( self ): return self . __name @name . setter def name ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value @name . deleter def name ( self ): raise TypeError ( \"Can't delete name\" ) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u4f7f\u7528 @property \u88c5\u9970\u5668\u548c\u76f8\u5173\u65b9\u6cd5\u5c06\u5c5e\u6027 name \u5b9a\u4e49\u4e3a\u53ea\u8bfb\u7279\u6027\u3002\u540e\u9762\u7684 @name.setter \u548c @name.deleter \u88c5\u9970\u5668\u5c06\u5176\u4ed6\u65b9\u6cd5\u4e0e name \u5c5e\u6027\u4e0a\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u540d\u79f0\u5fc5\u987b\u4e0e\u539f\u59cb\u7279\u6027\u7684\u540d\u79f0\u5b8c\u5168\u5339\u914d\u3002\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u8bf7\u6ce8\u610f\u5b9e\u9645\u7684\u540d\u79f0\u503c\u5b58\u50a8\u5728\u5c5e\u6027 __name \u4e2d\u3002\u6240\u5b58\u50a8\u5c5e\u6027\u7684\u540d\u79f0\u65e0\u9700\u9075\u5faa\u4efb\u4f55\u7ea6\u5b9a\uff0c\u4f46\u5b83\u5fc5\u987b\u4e0e\u7279\u6027\u540d\u79f0\u4e0d\u540c\uff0c\u4ee5\u4fbf\u5c06\u5b83\u4e0e\u7279\u6027\u7684\u540d\u79f0\u533a\u5206\u5f00\u3002 \u5728\u4ee5\u524d\u7684\u4ee3\u7801\u4e2d\uff0c\u901a\u5e38\u4f1a\u770b\u5230\u7528 property(getf=None, setf=None, delf=None, doc=None) \u51fd\u6570\u6765\u5b9a\u4e49\u7279\u6027\uff0c\u5f80\u5176\u4e2d\u4f20\u5165\u4e00\u7ec4\u540d\u79f0\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a class Foo ( object ): def getname ( self ): return self . __name def setname ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value def delname ( self ): raise TypeError ( \"Can't delete name\" ) name = property ( getname , setname , delname ) \u8fd9\u79cd\u8001\u65b9\u6cd5\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u88c5\u9970\u5668\u7248\u672c\u4f1a\u8ba9\u7c7b\u770b\u8d77\u6765\u66f4\u6574\u6d01\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u88c5\u9970\u5668\uff0cget\u3001 set \u548c delete \u51fd\u6570\u5c06\u4e0d\u4f1a\u663e\u793a\u4e3a\u65b9\u6cd5\u3002 \u6570\u636e\u5c01\u88c5\u548c\u79c1\u6709\u5c5e\u6027 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u201c\u516c\u5171\u7684\u201d\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u8fd9\u8fd8\u6697\u793a\u7740\uff0c\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u88ab\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u5e76\u53ef\u4ece\u6d3e\u751f\u7c7b\u5185\u8fdb\u884c\u8bbf\u95ee\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u4e0d\u5e0c\u671b\u53d1\u751f\u8fd9\u79cd\u884c\u4e3a\uff0c\u56e0\u4e3a\u5b83\u4f1a\u66b4\u9732\u5bf9\u8c61\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u53ef\u80fd\u5bfc\u81f4\u5728\u6d3e\u751f\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e0e\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u53d1\u751f\u547d\u540d\u7a7a\u95f4\u51b2\u7a81\u3002 Note \u8fd9\u610f\u5473\u7740\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49\u3002 \u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c \u7c7b\u4e2d\u6240\u6709\u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\uff08\u5982 __Foo \uff09\u90fd\u4f1a\u81ea\u52a8\u53d8\u5f62\uff0c\u5f62\u6210\u5177\u6709 _Classname__Foo \u5f62\u5f0f\u7684\u65b0\u540d\u79f0\u3002 \u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7c7b\u4e2d\u6dfb\u52a0\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u6709\u6548\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528\u7684\u79c1\u6709\u540d\u79f0\u4e0d\u4f1a\u4e0e\u57fa\u7c7b\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u79c1\u6709\u540d\u79f0\u53d1\u751f\u51b2\u7a81\uff0c\u5982\u4e0b\u6240\u793a\uff1a class A ( object ): def __init__ ( self ): self . __X = 3 # \u53d8\u5f62\u4e3aself._A__X def __spam ( self ): # \u53d8\u5f62\u4e3a_A__spam() print ( \"A\" ) def bar ( self ): self . __spam () # \u53ea\u8c03\u7528A.__spam() class B ( A ): def __init__ ( self ): A . __init__ ( self ) self . __X = 37 # \u53d8\u5f62\u4e3aself._B__X def __spam ( self ): # \u53d8\u5f62\u4e3a_B__spam() print ( \"B\" ) b = B () # \u6d3e\u751f\u7c7b\u7684\u5b9a\u4e49\u6ca1\u6709\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49 b . bar () A \u5c3d\u7ba1\u8fd9\u79cd\u65b9\u6848\u4f3c\u4e4e\u9690\u85cf\u4e86\u6570\u636e\uff0c\u4f46\u5e76\u6ca1\u6709\u4e25\u683c\u7684\u673a\u5236\u6765\u5b9e\u9645\u963b\u6b62\u5bf9\u7c7b\u7684\u201c\u79c1\u6709\u201d\u5c5e\u6027\u8fdb\u884c\u8bbf\u95ee\u3002\u7279\u522b\u662f\u5982\u679c\u5df2\u77e5\u7c7b\u540d\u79f0\u548c\u76f8\u5e94\u79c1\u6709\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53d8\u5f62\u540e\u7684\u540d\u79f0\u6765\u8bbf\u95ee\u5b83\u4eec\u3002\u901a\u8fc7\u91cd\u5b9a\u4e49 dir() \u65b9\u6cd5\uff0c\u7c7b\u53ef\u4ee5\u964d\u4f4e\u8fd9\u4e9b\u5c5e\u6027\u7684\u53ef\u89c1\u6027\uff0c dir() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u68c0\u67e5\u5bf9\u8c61\u7684 dir() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u540d\u79f0\u5217\u8868\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u540d\u79f0\u53d8\u5f62\u4f3c\u4e4e\u662f\u4e00\u4e2a\u989d\u5916\u7684\u5904\u7406\u6b65\u9aa4\uff0c\u4f46\u53d8\u5f62\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u53ea\u5728\u5b9a\u4e49\u7c7b\u65f6\u53d1\u751f\u4e00\u6b21\u3002\u5b83\u4e0d\u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u53d1\u751f\uff0c\u4e5f\u4e0d\u4f1a\u4e3a\u7a0b\u5e8f\u7684\u6267\u884c\u6dfb\u52a0\u989d\u5916\u7684\u5f00\u9500\u3002\u800c\u4e14\u8981\u77e5\u9053\uff0c\u540d\u79f0\u53d8\u5f62\u4e0d\u4f1a\u5728 getattr() \u3001 hasattr() \u3001 setattr() \u6216 delattr() \u7b49\u51fd\u6570\u4e2d\u53d1\u751f\uff0c\u5728\u8fd9\u4e9b\u51fd\u6570\u4e2d\uff0c\u5c5e\u6027\u540d\u88ab\u6307\u5b9a\u4e3a\u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u51fd\u6570\uff0c\u9700\u8981\u663e\u5f0f\u4f7f\u7528\u53d8\u5f62\u540d\u79f0\uff08\u5982 _Classname__name \uff09\u6765\u8bbf\u95ee\u5c5e\u6027\u3002 \u5efa\u8bae\u5728\u5b9a\u4e49\u53ef\u53d8\u5c5e\u6027\u65f6\uff0c\u901a\u8fc7\u7279\u6027\u6765\u4f7f\u7528\u79c1\u6709\u5c5e\u6027\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u9f13\u52b1\u7528\u6237\u4f7f\u7528\u7279\u6027\u540d\u79f0\uff0c\u800c\u65e0\u9700\u76f4\u63a5\u8bbf\u95ee\u5e95\u5c42\u5b9e\u4f8b\u6570\u636e\uff08\u5982\u679c\u4f60\u5728\u5b9e\u4f8b\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u80fd\u4e0d\u60f3\u91c7\u7528\u8fd9\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff09\u3002 \u901a\u8fc7\u4e3a\u65b9\u6cd5\u63d0\u4f9b\u79c1\u6709\u540d\u79f0\uff0c\u8d85\u7c7b\u53ef\u4ee5\u963b\u6b62\u6d3e\u751f\u7c7b\u91cd\u65b0\u5b9a\u4e49\u548c\u66f4\u6539\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u7684 A.bar() \u65b9\u6cd5\u53ea\u8c03\u7528 A.__spam() \uff0c\u65e0\u8bba self \u5177\u6709\u4f55\u79cd\u7c7b\u578b\uff0c\u6216\u8005\u6d3e\u751f\u7c7b\u4e2d\u662f\u5426\u5b58\u5728\u4e0d\u540c\u7684 __spam() \u65b9\u6cd5\u90fd\u662f\u5982\u6b64\u3002 \u6700\u540e\uff0c\u4e0d\u8981\u6df7\u6dc6\u79c1\u6709\u7c7b\u5c5e\u6027\u7684\u547d\u540d\u548c\u6a21\u5757\u4e2d\u201c\u79c1\u6709\u201d\u5b9a\u4e49\u7684\u547d\u540d\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\uff0c\u5728\u5c5e\u6027\u540d\u4e0a\u4f7f\u7528\u5355\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\u6765\u9690\u85cf\u5c5e\u6027\u503c\uff08\u5982 _name \uff09\u3002 \u5728\u6a21\u5757\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u53ef\u4ee5\u963b\u6b62\u901a\u8fc7 from module import * \u8bed\u53e5\u5bfc\u51fa\u540d\u79f0\u3002 \u8fd9\u610f\u5473\u7740\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b9a\u4e49\u53ea\u80fd\u88ab\u7c7b\u672c\u8eab\u548c\u5176\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002\u4f46\u662f\u5728\u7c7b\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u65e2\u4e0d\u80fd\u9690\u85cf\u5c5e\u6027\uff0c\u5728\u67d0\u4e2a\u7c7b\u7ee7\u627f\u8be5\u7c7b\u5e76\u4f7f\u7528\u76f8\u540c\u540d\u79f0\u5b9a\u4e49\u4e00\u4e2a\u65b0\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6\uff0c\u4e5f\u4e0d\u80fd\u963b\u6b62\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u3002 \u5bf9\u8c61\u8868\u793a\u548c\u5c5e\u6027\u7ed1\u5b9a \u4ece\u5185\u90e8\u5b9e\u73b0\u4e0a\u770b\uff0c\u5b9e\u4f8b\u662f\u4f7f\u7528\u5b57\u5178\u6765\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u8bbf\u95ee\u8be5\u5b57\u5178\u3002\u8fd9\u4e2a\u5b57\u5178\u5305\u542b\u7684\u6570\u636e\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u800c\u8a00\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance a = Account ( \"Guido\" , 1100.0 ) a . __dict__ {'name': 'Guido', 'balance': 1100.0} \u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u5411\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u4f8b\u5982\uff1a a . number = 123456 # \u5c06\u5c5e\u6027'number'\u6dfb\u52a0\u5230 a.__dict__ \u5bf9\u5b9e\u4f8b\u7684\u4fee\u6539\u59cb\u7ec8\u4f1a\u53cd\u6620\u5230\u5c40\u90e8 __dict__ \u5c5e\u6027\u4e2d\u3002\u540c\u6837\uff0c\u5982\u679c\u76f4\u63a5\u5bf9 __dict__ \u8fdb\u884c\u4fee\u6539\uff0c\u6240\u505a\u7684\u4fee\u6539\u4e5f\u4f1a\u53cd\u6620\u5728\u5b9e\u4f8b\u7684\u5c5e\u6027\u4e2d\u3002 \u5b9e\u4f8b\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __class__ \u94fe\u63a5\u56de\u5b83\u4eec\u7684\u7c7b\u3002\u7c7b\u672c\u8eab\u4e5f\u53ea\u662f\u5bf9\u5b57\u5178\u7684\u6d45\u5c42\u5305\u88c5\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u4e2d\u627e\u5230\u8fd9\u4e2a\u5b57\u5178\u3002\u53ef\u4ee5\u5728\u7c7b\u5b57\u5178\u4e2d\u627e\u5230\u5404\u79cd\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a a . __class__ __main__.Account Account . __dict__ . keys () dict_keys(['__module__', '__init__', '__dict__', '__weakref__', '__doc__']) \u6700\u540e\uff0c\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __bases__ \u4e2d\u5c06\u7c7b\u94fe\u63a5\u5230\u5b83\u4eec\u7684\u57fa\u7c7b\uff0c\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u57fa\u7c7b\u5143\u7ec4\u3002\u8fd9\u79cd\u5e95\u5c42\u7ed3\u6784\u662f\u83b7\u53d6\u3001\u8bbe\u7f6e\u548c\u5220\u9664\u5bf9\u8c61\u5c5e\u6027\u7684\u6240\u6709\u64cd\u4f5c\u7684\u57fa\u7840\u3002 \u53ea\u8981\u4f7f\u7528 obj.name = value \u8bbe\u7f6e\u4e86\u5c5e\u6027\uff0c\u7279\u6b8a\u65b9\u6cd5 obj.__setattr__(\"name\", value) \u5c31\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u4f7f\u7528 del obj.name \u5220\u9664\u4e86\u4e00\u4e2a\u5c5e\u6027\uff0c\u5c31\u4f1a\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__delattr__(\"name\") \u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u4fee\u6539\u6216\u5220\u9664 obj \u7684\u5c40\u90e8 __dict__ \u7684\u503c\uff0c\u9664\u975e\u8bf7\u6c42\u7684\u5c5e\u6027\u6b63\u597d\u662f\u4e00\u4e2a\u7279\u6027\u6216\u63cf\u8ff0\u7b26\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u5c06\u7531\u4e0e\u8be5\u7279\u6027\u76f8\u5173\u8054\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u51fd\u6570\u6267\u884c\u3002 \u5728\u67e5\u627e\u5c5e\u6027\uff08\u5982 obj.name \uff09\u65f6\uff0c\u5c06\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__getattrribute__(\"name\") \u3002\u8be5\u65b9\u6cd5\u6267\u884c\u641c\u7d22\u6765\u67e5\u627e\u8be5\u5c5e\u6027\uff0c\u8fd9\u901a\u5e38\u6d89\u53ca\u68c0\u67e5\u7279\u6027\u3001\u67e5\u627e\u5c40\u90e8 __dict__ \u5c5e\u6027\u3001\u68c0\u67e5\u7c7b\u5b57\u5178\u4ee5\u53ca\u641c\u7d22\u57fa\u7c7b\u3002\u5982\u679c\u641c\u7d22\u8fc7\u7a0b\u5931\u8d25\uff0c\u6700\u7ec8\u4f1a\u5c1d\u8bd5\u8c03\u7528\u7c7b\u7684 __getattr__() \u65b9\u6cd5\uff08\u5982\u679c\u5df2\u5b9a\u4e49\uff09\u6765\u67e5\u627e\u8be5\u5c5e\u6027\u3002\u5982\u679c\u8fd9\u4e5f\u5931\u8d25\uff0c\u5c31\u4f1a\u629b\u51fa AttributeError \u5f02\u5e38\u3002 \u5982\u679c\u6709\u5fc5\u8981\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u5176\u81ea\u5df1\u7684\u5c5e\u6027\u8bbf\u95ee\u51fd\u6570\u3002\u4f8b\u5982\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius def __getattr__ ( self , name ): if name == 'area' : return math . pi * self . radius ** 2 elif name == 'perimeter' : return 2 * math . pi * self . radius else : return object . __getattr__ ( self , name ) def __setattr__ ( self , name , value ): if name in [ 'area' , 'perimeter' ]: raise TypeError ( \" %s is readonly\" % name ) from None object . __setattr__ ( self , name , value ) c = Circle ( 2 ) print ( c . area ) try : c . area = 10 except TypeError as e : print ( \"TypeError:\" , e ) 12.566370614359172 TypeError: area is readonly \u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7c7b\u5e94\u8be5\u53ef\u4ee5\u4f9d\u9760 object \u4e2d\u7684\u9ed8\u8ba4\u5b9e\u73b0\u6765\u6267\u884c\u5b9e\u9645\u7684\u5de5\u4f5c\u3002\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u5b9e\u73b0\u80fd\u591f\u5904\u7406\u7c7b\u7684\u66f4\u9ad8\u7ea7\u7279\u6027\uff0c\u5982\u63cf\u8ff0\u7b26\u548c\u7279\u6027\u3002 \u4e00\u822c\u6765\u8bb2\uff0c\u7c7b\u5f88\u5c11\u91cd\u65b0\u5b9a\u4e49\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u4f46\u662f\uff0c\u5728\u7f16\u5199\u901a\u7528\u7684\u5305\u88c5\u5668\u548c\u73b0\u6709\u5bf9\u8c61\u7684\u4ee3\u7406\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u901a\u8fc7\u91cd\u65b0\u5b9a\u4e49 __getattr__() \u3001 __setattr__() \u548c __delattr__() \uff0c\u4ee3\u7406\u53ef\u4ee5\u6355\u83b7\u5c5e\u6027\u8bbf\u95ee\u64cd\u4f5c\uff0c\u5e76\u900f\u660e\u5730\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u8f6c\u53d1\u7ed9\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002 __slots__ \u901a\u8fc7\u5b9a\u4e49\u7279\u6b8a\u53d8\u91cf slots \uff0c\u7c7b\u53ef\u4ee5\u9650\u5236\u5bf9\u5408\u6cd5\u5b9e\u4f8b\u5c5e\u6027\u540d\u79f0\u7684\u8bbe\u7f6e\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance __slots__ = ( 'name' , 'balance' ) a = Account ( \"Guido\" , 1100.0 ) try : a . date = \"12-12\" except AttributeError as e : print ( \"AttributeError:\" , e ) AttributeError: 'Account' object has no attribute 'date' \u5b9a\u4e49 __slots__ \u65f6\uff0c\u53ef\u4ee5\u5c06\u5b9e\u4f8b\u4e0a\u5206\u914d\u7684\u5c5e\u6027\u540d\u79f0\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u540d\u79f0\uff0c\u5426\u5219\u5c06\u5f15\u53d1 AttributeError \u5f02\u5e38\u3002\u8fd9\u79cd\u9650\u5236\u53ef\u4ee5\u963b\u6b62\u5176\u4ed6\u4eba\u5411\u73b0\u6709\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u5373\u4fbf\u7528\u6237\u5c06\u5c5e\u6027\u540d\u79f0\u5199\u9519\uff0c\u4e5f\u4e0d\u4f1a\u521b\u5efa\u51fa\u65b0\u7684\u5c5e\u6027\u6765\u3002 \u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c __slots__ \u4ece\u672a\u88ab\u5f53\u4f5c\u4e00\u79cd\u5b89\u5168\u7684\u7279\u6027\u6765\u5b9e\u73b0\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u5bf9\u5185\u5b58\u548c\u6267\u884c\u901f\u5ea6\u7684\u4e00\u79cd\u6027\u80fd\u4f18\u5316\u3002 \u4f7f\u7528 __slots__ \u7684\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u518d\u4f7f\u7528\u5b57\u5178\u6765\u5b58\u50a8\u5b9e\u4f8b\u6570\u636e\uff0c\u8f6c\u800c\u91c7\u7528\u4e00\u79cd\u57fa\u4e8e\u6570\u7ec4\u7684\u66f4\u52a0\u7d27\u51d1\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728\u4f1a\u521b\u5efa\u5927\u91cf\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528 __slots__ \u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u6267\u884c\u65f6\u95f4\u3002 \u6ce8\u610f\uff0c __slots__ \u4e0e\u7ee7\u627f\u7684\u914d\u5408\u4f7f\u7528\u9700\u8981\u4e00\u5b9a\u7684\u6280\u5de7\u3002\u5982\u679c\u7c7b\u7ee7\u627f\u81ea\u4f7f\u7528 __slots__ \u7684\u57fa\u7c7b\uff0c\u90a3\u4e48\u5b83\u4e5f\u9700\u8981\u5b9a\u4e49 __slots__ \u6765\u5b58\u50a8\u81ea\u5df1\u7684\u5c5e\u6027\uff08\u5373\u4f7f\u5b83\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u5c5e\u6027\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u8fd9\u6837\u624d\u80fd\u5229\u7528 __slots__ \u63d0\u4f9b\u7684\u4f18\u52bf\u3002\u5982\u679c\u5fd8\u8bb0\u4e86\u8fd9\u4e00\u70b9\uff0c\u6d3e\u751f\u7c7b\u7684\u8fd0\u884c\u901f\u5ea6\u5c06\u66f4\u6162\uff0c\u5360\u7528\u7684\u5185\u5b58\u4e5f\u66f4\u591a\uff0c\u6bd4\u5b8c\u5168\u4e0d\u4f7f\u7528 __slots__ \u65f6\u60c5\u51b5\u66f4\u7cdf\u3002 __slots__ \u7684\u4f7f\u7528\u8fd8\u4f1a\u7834\u574f\u671f\u671b\u5b9e\u4f8b\u5177\u6709\u5e95\u5c42 __dict__ \u5c5e\u6027\u7684\u4ee3\u7801\u3002\u5c3d\u7ba1\u8fd9\u4e00\u70b9\u901a\u5e38\u4e0d\u9002\u7528\u4e8e\u7528\u6237\u4ee3\u7801\uff0c\u4f46\u5bf9\u4e8e\u652f\u6301\u5bf9\u8c61\u7684\u5b9e\u7528\u5e93\u548c\u5176\u4ed6\u5de5\u5177\uff0c\u5176\u4ee3\u7801\u53ef\u80fd\u8981\u4f9d\u9760 __dict__ \u6765\u8c03\u8bd5\u3001\u5e8f\u5217\u5316\u5bf9\u8c61\u4ee5\u53ca\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u6700\u540e\uff0c\u5982\u679c\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u4e86 __getattribute__() \u3001 __getattr__() \u548c __setattr__() \u7b49\u65b9\u6cd5\uff0c __slots__ \u7684\u5b58\u5728\u4e0d\u4f1a\u5bf9\u5b83\u4eec\u7684\u8c03\u7528\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u5c06\u8003\u8651\u5230 __slots__ \u3002\u6b64\u5916\u5e94\u8be5\u5f3a\u8c03\u4e00\u70b9\uff0c\u6ca1\u6709\u5fc5\u8981\u5411 __slots__ \u6dfb\u52a0\u65b9\u6cd5\u6216\u7279\u6027\u540d\u79f0\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b58\u50a8\u5728\u7c7b\u4e2d\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u3002 \u53c2\u8003 difference between staticmethod and classmethod in python","title":"4.1.\u7c7b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_1","text":"\u7c7b\u7684\u5b9e\u4f8b\u662f\u4ee5\u51fd\u6570\u5f62\u5f0f\u8c03\u7528\u7c7b\u5bf9\u8c61\u6765\u521b\u5efa\u7684\u3002 __new__ \u65b9\u6cd5\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u7136\u540e\u5c06\u8be5\u5b9e\u4f8b\u4f20\u9012\u7ed9\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002 __init__() \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u62ec\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b self \u548c\u5728\u8c03\u7528\u7c7b\u5bf9\u8c61\u65f6\u63d0\u4f9b\u7684\u53c2\u6570\u3002 \u5728 __init__() \u5185\uff0c\u901a\u8fc7\u5c06\u5c5e\u6027\u5206\u914d\u7ed9 self \u6765\u5c06\u5176\u4fdd\u5b58\u5230\u5b9e\u4f8b\u4e2d\u3002\u4f8b\u5982\uff0c self.name = name \u8868\u793a\u5c06 name \u5c5e\u6027\u4fdd\u5b58\u5728\u5b9e\u4f8b\u4e2d\u3002\u5176\u4e2d\uff0c\u70b9 . \u8fd0\u7b97\u7b26\u7528\u4e8e\u5c5e\u6027\u7ed1\u5b9a\u3002jackson.get_age()\u5728\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u8fd4\u56de\u5230\u7528\u6237\u4e4b\u540e\uff0c\u4f7f\u7528\u70b9 . \u8fd0\u7b97\u7b26\u5373\u53ef\u8bbf\u95ee\u8fd9\u4e9b\u5c5e\u6027\u4ee5\u53ca\u7c7b\u7684\u5c5e\u6027\u3002 \u8bbf\u95ee\u5c5e\u6027\u65f6\uff0c\u7ed3\u679c\u503c\u53ef\u80fd\u6765\u81ea\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u3002\u53ef\u80fd\u6765\u81ea\u5b9e\u4f8b\u72ec\u6709\u7684\u5c5e\u6027\uff0c\u4e5f\u53ef\u80fd\u6765\u81ea\u7c7b\u7684\u5c5e\u6027\u3002\u8bbf\u95ee\u5c5e\u6027\u65f6\uff0cPython \u9996\u5148\u4f1a\u68c0\u67e5\u5b9e\u4f8b\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u8be5\u5c5e\u6027\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u5219\u4f1a\u5bf9\u5b9e\u4f8b\u7684\u7c7b\u8fdb\u884c\u641c\u7d22\u3002\u8fd9\u662f\u7c7b\u4e0e\u5176\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u5176\u5c5e\u6027\u7684\u5e95\u5c42\u673a\u5236\u3002","title":"\u7c7b\u5b9e\u4f8b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_2","text":"\u7ee7\u627f\u662f\u4e00\u79cd\u521b\u5efa\u65b0\u7c7b\u7684\u673a\u5236\uff0c\u76ee\u7684\u662f\u4f7f\u7528\u6216\u4fee\u6539\u73b0\u6709\u7c7b\u7684\u884c\u4e3a\u3002\u88ab\u7ee7\u627f\u7684\u7c7b\u79f0\u4e3a \u57fa\u7c7b \u6216 \u8d85\u7c7b \u3002\u65b0\u7c7b\u79f0\u4e3a \u6d3e\u751f\u7c7b \u6216 \u5b50\u7c7b \u3002 \u901a\u8fc7\u7ee7\u627f\u521b\u5efa\u7c7b\u65f6\uff0c\u6240\u521b\u5efa\u7684\u7c7b\u5c06\u201c\u7ee7\u627f\u201d\u5176\u57fa\u7c7b\u5b9a\u4e49\u7684\u5c5e\u6027\u3002 \u4f46\u662f\uff0c \u6d3e\u751f\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4efb\u4f55\u8fd9\u4e9b\u5c5e\u6027\u5e76\u6dfb\u52a0\u81ea\u5df1\u7684\u65b0\u5c5e\u6027\u3002 \u5728class\u8bed\u53e5\u4e2d\u7528\u4ee5\u9017\u53f7\u5206\u9694\u7684\u57fa\u7c7b\u540d\u79f0\u5217\u8868\u6765\u6307\u5b9a\u7ee7\u627f\uff0c\u4f8b\u5982\uff1a # A\u7c7b\u7ee7\u627f\u4e8eB\u3001C\u7c7b class A ( B , C ): pass \u5728 Python 2 \u4e2d\uff0c\u4e00\u4e2a\u7c7b\u9ed8\u8ba4\u4e0d\u4ece\u4efb\u4f55\u57fa\u7c7b\u4e2d\u7ee7\u627f\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u7ee7\u627f\u7684\u57fa\u7c7b\uff0c\u8fd9\u79cd\u7c7b\u79f0\u4e3a old-style class \uff08\u65e7\u5f0f\u7c7b\uff09 # \u7c7b A \u4e0d\u7ee7\u627f\u4efb\u4f55\u57fa\u7c7b class A : def __init__ ( self ): pass Python 2.2 \u5f15\u5165\u4e86 new-style class \uff08\u65b0\u5f0f\u7c7b\uff09\uff0c\u5176\u5efa\u8bae\u65b0\u7684\u7c7b\u578b\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a # \u7c7b A \u7ee7\u627f\u81ea object class A ( object ): def __init__ ( self ): pass Python 2.3 \u53ca\u540e\u7eed\u7248\u672c\u4e3a\u4e86\u4fdd\u6301\u5411\u4e0b\u517c\u5bb9\uff0c\u540c\u65f6\u63d0\u4f9b\u4ee5\u4e0a\u4e24\u79cd\u7c7b\u5b9a\u4e49\u7528\u4ee5\u533a\u5206 old-style class \u548c new-style class\u3002Python 3 \u5219\u5b8c\u5168\u5e9f\u5f03\u4e86 old-style class \u7684\u6982\u5ff5\uff0c \u5728Python3\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u6709\u6548\u7684\u57fa\u7c7b\uff0c\u7c7b\u5c06\u7ee7\u627fobject \u3002object\u662f\u6240\u6709Python3\u5bf9\u8c61\u7684\u57fa\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u65b9\u6cd5\uff08\u5982 __str__() \uff0c\u5b83\u53ef\u521b\u5efa\u4f9b\u6253\u5370\u51fd\u6570\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\uff09\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u7ee7\u627f\u901a\u5e38\u7528\u4e8e\u91cd\u65b0\u5b9a\u4e49\u73b0\u6709\u65b9\u6cd5\u7684\u884c\u4e3a\u3002 \u7ee7\u627f\u662f\u7528\u529f\u80fd\u7a0d\u5fae\u589e\u5f3a\u7684\u70b9 . \u8fd0\u7b97\u7b26\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5982\u679c\u641c\u7d22\u4e00\u4e2a\u5c5e\u6027\u65f6\u672a\u5728\u5b9e\u4f8b\u6216\u5b9e\u4f8b\u7684\u7c7b\u4e2d\u627e\u5230\u5339\u914d\u9879\uff0c\u5c06\u4f1a\u7ee7\u7eed\u641c\u7d22\u57fa\u7c7b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u57fa\u7c7b\u53ef\u4f9b\u641c\u7d22\u4e3a\u6b62\u3002 \u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49\u57fa\u7c7b\u7684\u65b9\u6cd5\u65f6\uff0c\u4e0d\u4f1a\u518d\u81ea\u52a8\u8c03\u7528\u57fa\u7c7b\u7684\u540c\u540d\u65b9\u6cd5\u3002\u4f8b\u5982\u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49\u4e86 __init__() \uff0c\u6b64\u65f6\u4fbf\u4e0d\u4f1a\u81ea\u52a8\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002\u4f46\u6709\u65f6\u5019\uff0c\u867d\u7136\u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49\u4e86 __init__() \uff0c\u4f46\u662f\u6d3e\u751f\u7c7b\u8fd8\u60f3\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u6765\u8fdb\u884c\u6070\u5f53\u7684\u521d\u59cb\u5316\u3002 \u6b64\u65f6\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u7684\u65b9\u6cd5 \u3002\u5982\u679c\u57fa\u7c7b\u672a\u5b9a\u4e49 __init__() \uff0c\u5c31\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e00\u6b65\u3002\u5982\u679c\u4e0d\u77e5\u9053\u57fa\u7c7b\u662f\u5426\u5b9a\u4e49\u4e86 __init__() \uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e0d\u63d0\u4f9b\u4efb\u4f55\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u5b83\uff0c\u56e0\u4e3a\u59cb\u7ec8\u5b58\u5728\u4e00\u4e2a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u7684\u9ed8\u8ba4 __init__() \u5b9e\u73b0\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u4eba\u7c7b class Person : def __init__ ( self , name , age ): self . name = name self . age = age def get_name ( self ): return self . name def get_age ( self ): return self . age # \u5b9a\u4e49\u4e00\u4e2a\u7f8e\u56fd\u4eba\u7c7b ## \u73b0\u5728\u60f3\u7ed9\u7f8e\u56fd\u4eba\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u52a0\u4e0a \u6027\u522b \u7684\u5c5e\u6027 class American ( Person ): # \u91cd\u65b0\u5b9a\u4e49__init__()\u4f1a\u8986\u76d6Person\u7684__init__()\u65b9\u6cd5 def __init__ ( self , name , age , gender ): # \u663e\u5f0f\u8c03\u7528\u57fa\u7c7b\u7684__init__()\u65b9\u6cd5 Person . __init__ ( self , name , age ) self . gender = gender def get_gender ( self ): return self . gender jackson = American ( name = \"Cesar T. Mauck\" , age = 14 , gender = \"male\" ) print ( jackson . get_age ()) print ( jackson . get_gender ()) 14 male \u6d3e\u751f\u7c7b\u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u7684\u65b9\u6cd5\u5e76\u4e0d\u603b\u662f\u597d\u7684\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u534e\u76db\u987f\u4eba\u7c7b class Washington ( American ): def get_age ( self ): return f \" { self . age } years old\" def growing_up ( self ): # \u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5 age = American . get_age ( self ) age += 1 self . age = age print ( \"Washington people grow up one year old\" ) \u8fd9\u4e2a\u4f8b\u5b50\u7684\u5fae\u5999\u4e4b\u5904\u5728\u4e8e\uff0cAmerican\u8fd9\u4e2a\u7c7b\u5176\u5b9e\u6ca1\u6709\u5b9e\u73b0 get_age() \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u662f\u5728Person\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002\u5c3d\u7ba1\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u6df7\u6dc6\uff08\u4f8b\u5982\uff0cAmerican\u662f\u5426\u5e94\u8be5\u5b9e\u73b0 get_age() ? \uff09\u3002\u56e0\u6b64\uff0c\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u662f\u7528 super() \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7c7b class California ( American ): def get_age ( self ): return f \" { self . age } years old\" def growing_up ( self ): ## \u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3aget_age()\u65b9\u6cd5\u5728Person\u4e2d\u5b9a\u4e49 ## \u8fd9\u91cc\u53ef\u4ee5\u4f20\u5165Person\u7684\u4efb\u4f55\u4e00\u4e2a\u6d3e\u751f\u7c7b age = super ( California , self ) . get_age () age += 1 self . age = age print ( \"Californians grow up one year old\" ) Terri = California ( \"Terri H. Booth\" , 25 , \"female\" ) Terri . growing_up () Californians grow up one year old super(cls, instance) \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u652f\u6301\u5728\u57fa\u7c7b\u4e0a\u6267\u884c\u5c5e\u6027\u67e5\u627e\u3002\u5982\u679c\u4f7f\u7528\u8be5\u51fd\u6570\uff0cPython\u5c06\u4f7f\u7528\u672c\u6765\u5e94\u8be5\u5728\u57fa\u7c7b\u4e0a\u4f7f\u7528\u7684\u6b63\u5e38\u641c\u7d22\u89c4\u5219\u6765\u641c\u7d22\u5c5e\u6027\u3002\u6709\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5c31\u65e0\u9700\u5199\u6b7b\u65b9\u6cd5\u4f4d\u7f6e\uff0c\u5e76\u4e14\u80fd\u66f4\u6e05\u6670\u5730\u9648\u8ff0\u4f60\u7684\u610f\u56fe\uff08\u5373\u4f60\u5e0c\u671b\u8c03\u7528\u4ee5\u524d\u7684\u5b9e\u73b0\uff0c\u65e0\u8bba\u5b83\u662f\u54ea\u4e2a\u57fa\u7c7b\u5b9a\u4e49\u7684\uff09\u3002\u7136\u800c\uff0c super() \u7684\u8bed\u6cd5\u5c1a\u6709\u4e0d\u8db3\u4e4b\u5904\u3002\u5982\u679c\u4f7f\u7528Python 3\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5316\u7684\u8bed\u53e5 super().get_age() \u6765\u6267\u884c\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u8ba1\u7b97\u3002","title":"\u7ee7\u627f"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_3","text":"Python\u652f\u6301\u591a\u91cd\u7ee7\u627f\u3002\u901a\u8fc7\u8ba9\u4e00\u4e2a\u7c7b\u5217\u51fa\u591a\u4e2a\u57fa\u7c7b\u5373\u53ef\u6307\u5b9a\u591a\u91cd\u7ee7\u627f\u3002\u4f8b\u5982\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u5723\u62c9\u8499\u4eba\u7c7b class SanRamon ( California , Washington , American ): def growing_up ( self ): pass Edwin = SanRamon ( \"Edwin A. Marcotte\" , 37 , \"male\" ) Edwin . get_age () '37 years old' \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u65f6\uff0c\u5c5e\u6027\u7684\u89e3\u6790\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u641c\u7d22\u8def\u5f84\u6765\u7ed1\u5b9a\u5c5e\u6027\u3002 \u5728\u67e5\u627e\u4f7f\u7528\u4e86\u591a\u91cd\u7ee7\u627f\u7684\u5c5e\u6027\u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u57fa\u7c7b\u6309\u4ece\u201c\u6700\u7279\u6b8a\u201d\u7684\u7c7b\u5230\u201c\u6700\u4e0d\u7279\u6b8a\u201d\u7684\u7c7b\u8fd9\u79cd\u987a\u5e8f\u8fdb\u884c\u6392\u5217\u3002\u7136\u540e\u5728\u641c\u7d22\u5c5e\u6027\u65f6\uff0c\u5c31\u4f1a\u6309\u8fd9\u4e2a\u987a\u5e8f\u641c\u7d22\uff0c\u76f4\u81f3\u627e\u5230\u8be5\u5c5e\u6027\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7c7b\uff0c\u901a\u8fc7\u6253\u5370\u5b83\u7684 __mro__ \u5c5e\u6027\u5373\u53ef\u67e5\u770b\u57fa\u7c7b\u7684\u987a\u5e8f\uff08\u6216\u8005\u8c03\u7528 mro() \u65b9\u6cd5\uff09\uff0c\u4f8b\u5982\uff1a SanRamon . __mro__ (__main__.SanRamon, __main__.California, __main__.Washington, __main__.American, __main__.Person, object) SanRamon . mro () [__main__.SanRamon, __main__.California, __main__.Washington, __main__.American, __main__.Person, object] \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5217\u8868\u57fa\u4e8e\u201c\u6709\u610f\u4e49\u201d\u7684\u89c4\u5219\u6392\u5217\u5f97\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u59cb\u7ec8\u5148\u68c0\u67e5\u6d3e\u751f\u7c7b\uff0c\u7136\u540e\u518d\u68c0\u67e5\u5176\u57fa\u7c7b\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u5177\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u90a3\u4e48\u59cb\u7ec8\u6309\u7c7b\u5b9a\u4e49\u4e2d\u5217\u51fa\u7684\u7236\u7c7b\u987a\u5e8f\u68c0\u67e5\u8fd9\u4e9b\u7236\u7c7b\u3002\u4f46\u662f\uff0c\u57fa\u7c7b\u7684\u51c6\u786e\u987a\u5e8f\u5b9e\u9645\u4e0a\u975e\u5e38\u590d\u6742\uff0c\u4e0d\u662f\u57fa\u4e8e\u4efb\u4f55\u201c\u7b80\u5355\u7684\u201d\u7b97\u6cd5\uff0c\u5982\u6df1\u5ea6\u4f18\u5148\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u5b9e\u9645\u4e0a\uff0c\u57fa\u7c7b\u7684\u987a\u5e8f\u7531 C3 \u7ebf\u6027\u5316\u7b97\u6cd5\u786e\u5b9a\uff0c\u53ef\u4ee5\u5728\u8bba\u6587\u201cA Monotonic Superclass Linearization for Dylan\u201d\uff08K. Barrett \u7b49\uff0c\u53d1\u8868\u4e8e OOPSLA\u201996\uff09\u4e2d\u627e\u5230\u8be5\u7b97\u6cd5\u7684\u4ecb\u7ecd\u3002\u8be5\u7b97\u6cd5\u7684\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u67d0\u4e9b\u7c7b\u5c42\u6b21\u7ed3\u6784\u5c06\u88ab Python \u62d2\u7edd\u5e76\u4f1a\u629b\u51fa TypeError \u9519\u8bef\uff0c\u4f8b\u5982\uff1a try : class SanRamon ( American , California , Washington ): def growing_up ( self ): pass except TypeError as e : print ( \"TypeError\" , e ) TypeError Cannot create a consistent method resolution order (MRO) for bases American, California, Washington \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c SanRamon \u7c7b\u7684\u7ee7\u627f\u5217\u8868\u662f\u4ece\u6700\u4e0d\u7279\u6b8a\u5230\u7279\u6b8a\u7684\uff0c\u56e0\u4e3a American \u662f California \u548c Washington \u7684\u57fa\u7c7b\u3002\u8fd9\u4e5f\u6b63\u662f\u8be5\u7c7b\u5c42\u6b21\u7ed3\u6784\u4f1a\u51fa\u9519\u7684\u539f\u56e0\u3002\u5177\u4f53\u7684\u539f\u56e0\u6d89\u53caC3\u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u9650\u4e8e\u7bc7\u5e45\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u53d9\u8ff0\u3002\u5173\u4e8ePython MRO\u7b97\u6cd5\u7684\u8be6\u7ec6\u4ecb\u7ecd\u53c2\u8003 \u300a4.2.\u591a\u91cd\u7ee7\u627f\u548cMRO\u300b \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5927\u591a\u6570\u7a0b\u5e8f\u4e2d\u6700\u597d\u907f\u514d\u4f7f\u7528\u591a\u91cd\u7ee7\u627f \u3002\u4f46\u662f\uff0c\u591a\u91cd\u7ee7\u627f\u6709\u65f6\u53ef\u7528\u4e8e\u5b9a\u4e49\u6240\u8c13\u7684\u6df7\u5408\uff08mixin\uff09\u7c7b\u3002\u6df7\u5408\u7c7b\u901a\u5e38\u5b9a\u4e49\u4e86\u8981\u201c\u6df7\u5408\u5230\u201d\u5176\u4ed6\u7c7b\u4e2d\u7684\u4e00\u7ec4\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\uff08\u8fd9\u4e0e\u5b8f\u5f88\u7c7b\u4f3c\uff09\u3002\u901a\u5e38\uff0c\u6df7\u5408\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5c06\u5047\u5b9a\u5176\u4ed6\u65b9\u6cd5\u5b58\u5728\uff0c\u5e76\u5c06\u4ee5\u8fd9\u4e9b\u65b9\u6cd5\u4e3a\u57fa\u7840\u6784\u5efa\u3002","title":"\u591a\u91cd\u7ee7\u627f"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_4","text":"\u52a8\u6001\u7ed1\u5b9a\uff08\u5728\u7ee7\u627f\u80cc\u666f\u4e0b\u4f7f\u7528\u65f6\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a\u591a\u6001\u6027\uff09\u662f\u6307\u5728\u4e0d\u8003\u8651\u5b9e\u4f8b\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b9e\u4f8b\u53ea\u8981\u4ee5 obj.attr \u7684\u5f62\u5f0f\u8bbf\u95ee\u5c5e\u6027\uff0c\u5c31\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u641c\u7d22\u5e76\u5b9a\u4f4d attr \uff1a \u9996\u5148\u662f\u5b9e\u4f8b\u672c\u8eab\uff0c\u63a5\u7740\u662f\u5b9e\u4f8b\u7684\u7c7b\u5b9a\u4e49\uff0c\u7136\u540e\u662f\u57fa\u7c7b\u3002 \u67e5\u627e\u8fc7\u7a0b\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002 \u8fd9\u79cd\u7ed1\u5b9a\u8fc7\u7a0b\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5b83\u4e0d\u53d7\u5bf9\u8c61 obj \u7684\u7c7b\u578b\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6267\u884c\u50cf obj.name \u8fd9\u6837\u7684\u67e5\u627e\uff0c\u5bf9\u6240\u6709\u62e5\u6709 name \u5c5e\u6027\u7684 obj \u90fd\u662f\u9002\u7528\u7684\u3002 polymorphism \u6e90\u81ea\u5e0c\u814a\u8bed\uff0c\u610f\u601d\u662f\u201c\u6709\u591a\u79cd\u5f62\u6001\u201d\u3002\u8fd9\u5927\u81f4\u610f\u5473\u7740\u5373\u4fbf\u4f60\u4e0d\u77e5\u9053\u53d8\u91cf\u6307\u5411\u7684\u662f\u54ea\u79cd\u5bf9\u8c61\uff0c\u4e5f\u80fd\u591f\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\uff0c\u4e14\u64cd\u4f5c\u7684\u884c\u4e3a\u5c06\u968f\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u578b\uff08\u7c7b\uff09\u800c\u5f02\u3002\u4e5f\u5c31\u662f\u540c\u4e00\u79cd\u8c03\u7528\u5f62\u5f0f\uff0c\u4f46\u6709\u4e0d\u540c\u7684\u6267\u884c\u6548\u679c\u3002 \u5728Python\u4e2d\uff0c\u591a\u6001\u4e5f\u79f0\u4e3a \u9e2d\u5b50\u7c7b\u578b \uff08duck typing\uff09\u3002\u8fd9\u4e2a\u672f\u8bed\u6e90\u81ea James Whitcomb Riley \u572817\u4e16\u7eaa\u5199\u4e0b\u7684\u4e00\u53e5\u8bd7\uff1a When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. \u771f\u4e0d\u77e5\u9053\u8c01\u60f3\u51fa\u8fd9\u4e2a\u672f\u8bed\u7684\uff0c\u5982\u679c\u7528\u6570\u5b66\u672f\u8bed\u6765\u7c7b\u6bd4\uff0c\u9e2d\u5b50\u7c7b\u578b\u76f8\u5f53\u4e8e\u6570\u5b66\u7684\u516c\u7406\u5316\u5b9a\u4e49\uff0c\u4e0d\u5173\u5fc3\u662f\u4ec0\u4e48\uff0c\u53ea\u5173\u5fc3\u6709\u4ec0\u4e48\u7279\u6027\u3002 Python \u7a0b\u5e8f\u5458\u7ecf\u5e38\u7f16\u5199\u5229\u7528\u8fd9\u79cd\u884c\u4e3a\u7684\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60f3\u7f16\u5199\u73b0\u6709\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u7248\u672c\uff0c\u53ef\u4ee5\u7ee7\u627f\u8be5\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5916\u89c2\u548c\u884c\u4e3a\u50cf\u5b83\u4f46\u4e0e\u5b83\u65e0\u4efb\u4f55\u5173\u7cfb\u7684\u5168\u65b0\u5bf9\u8c61\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u4fdd\u6301\u7a0b\u5e8f\u7ec4\u4ef6\u7684\u677e\u6563\u8026\u5408\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u7f16\u5199\u4ee3\u7801\u6765\u5904\u7406\u4efb\u4f55\u79cd\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ea\u8981\u8be5\u5bf9\u8c61\u62e5\u6709\u7279\u5b9a\u7684\u65b9\u6cd5\u96c6\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5229\u7528\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u5404\u79cd\u201c\u7c7b\u4f3c\u6587\u4ef6\u201d\u7684\u5bf9\u8c61\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5de5\u4f5c\u65b9\u5f0f\u50cf\u6587\u4ef6\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u7ee7\u627f\u81ea\u5185\u7f6e\u6587\u4ef6\u5bf9\u8c61\u7684\u3002","title":"\u591a\u6001\u52a8\u6001\u7ed1\u5b9a\u548c\u9e2d\u5b50\u7c7b\u578b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_5","text":"\u7c7b\u4e2d\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5373 \u5c06\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u3002 \u6839\u636e\u7ea6\u5b9a\uff0c\u8fd9\u4e2a\u53c2\u6570\u540d\u79f0\u4e3aself\uff0c\u5c3d\u7ba1\u6240\u6709\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 self \u53c2\u6570\u6307\u5411\u5bf9\u8c61\u672c\u8eab\u3002 self \u53c2\u6570\u5f88\u6709\u7528\uff0c\u751a\u81f3\u5fc5\u4e0d\u53ef\u5c11\u3002\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u65e0\u6cd5\u8bbf\u95ee\u5bf9\u8c61\u672c\u8eab\uff08\u8981\u64cd\u4f5c\u7684\u5c5e\u6027\u6240\u5c5e\u7684\u5bf9\u8c61\uff09\u3002 \u4e0b\u9762\u662f\u4ee5\u662f\u5b9e\u4f8b\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def printd ( self ): print ( self . data ) ik1 = Kls ( 'arun' ) ik2 = Kls ( 'seema' ) ik1 . printd () ik2 . printd () arun seema \u7136\u540e\u770b\u4e00\u4e0b\u4ee3\u7801\u548c\u793a\u4f8b\u56fe\u7247: \u57281\u30012\u4e2d\uff0c\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002 \u57283\u4e2d\uff0c self\u53c2\u6570\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u3002 \u57284\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u7ed9\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u4f8b\uff0c Python\u89e3\u91ca\u5668\u81ea\u5df1\u4f1a\u505a\u8fd9\u4e9b\u64cd\u4f5c \u3002","title":"\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_6","text":"Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u9759\u6001\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u4e0d\u9700\u8981\u8bbf\u95ee\u5b9e\u4f8b\u5bf9\u8c61\u6216\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u4f46\u4e0e\u7c7b\u6709\u5173\u7684\u529f\u80fd \u521b\u5efa\u6784\u9020\u51fd\u6570 \u7ecf\u5e38\u6709\u4e00\u4e9b\u8ddf\u7c7b\u6709\u5173\u7cfb\u7684\u529f\u80fd\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u53c8\u4e0d\u9700\u8981\u5b9e\u4f8b\u548c\u7c7b\u53c2\u4e0e\uff08\u6bd4\u5982\u66f4\u6539\u73af\u5883\u53d8\u91cf\u6216\u8005\u4fee\u6539\u5176\u4ed6\u7c7b\u7684\u5c5e\u6027\uff09\uff0c\u5f53\u7136\u53ef\u4ee5\u5728\u7c7b\u5b9a\u4e49\u4e4b\u5916\u5199\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u4f46\u8fd9\u6837\u4f1a\u6269\u6563\u7c7b\u5185\u90e8\u7684\u4ee3\u7801\uff0c\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002\u6bd4\u5982\u8fd9\u6837\uff1a IND = 'ON' def checkind (): return ( IND == 'ON' ) class Kls ( object ): def __init__ ( self , data ): self . data = data def do_reset ( self ): if checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if checkind (): self . db = 'new db connection' print ( 'DB connection made for:' , self . data ) ik1 = Kls ( 12 ) do_reset ( ik1 ) # Reset done for: 12 set_db ( ik1 ) # DB connection made for: 12 \u5982\u679c\u4f7f\u7528 @staticmethod \u5c31\u80fd\u628a\u76f8\u5173\u7684\u4ee3\u7801\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e86\u3002 IND = 'ON' class Kls ( object ): def __init__ ( self , data ): self . data = data @staticmethod def checkind (): return ( IND == 'ON' ) def do_reset ( self ): if self . checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if self . checkind (): self . db = 'New db connection' print ( 'DB connection made for: ' , self . data ) ik1 = Kls ( 12 ) ik1 . do_reset () ik1 . set_db () Reset done for: 12 DB connection made for: 12 \u5b9e\u9645\u4e0a\uff0c\u9759\u6001\u65b9\u6cd5\u662f\u4e00\u79cd\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4eec\u6b63\u597d\u4f4d\u4e8e\u7c7b\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c \u56e0\u4e3a\u5b83\u4e0d\u4f1a\u5bf9\u4efb\u4f55\u5b9e\u4f8b\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c \u3002 \u5982\u679c\u5728\u7f16\u5199\u7c7b\u65f6\u9700\u8981\u91c7\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u5219\u5e38\u5e38\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\u3002\u56e0\u4e3a\u7c7b\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a __init__() \u51fd\u6570\uff0c\u6240\u4ee5\u66ff\u4ee3\u7684\u521b\u5efa\u51fd\u6570\u901a\u5e38\u6309\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a import time class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @staticmethod def now (): t = time . localtime () return Date ( t . tm_year , t . tm_mon , t . tm_mday ) @staticmethod def tomorrow (): t = time . localtime ( time . time () + 86400 ) return Date ( t . tm_year , t . tm_mon , t . tm_mday ) # \u521b\u5efa\u65e5\u671f\u7684\u793a\u4f8b a = Date ( 1967 , 4 , 9 ) b = Date . now () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5now() c = Date . tomorrow () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5tomorrow()","title":"\u9759\u6001\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_7","text":"Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u7c7b\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u521b\u5efa\u6784\u9020\u51fd\u6570 \u52a8\u6001\u66f4\u65b0\u7c7b \u7c7b\u65b9\u6cd5\u662f\u5c06\u7c7b\u672c\u8eab\u4f5c\u4e3a\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\u7c7b\u65b9\u6cd5\u4f7f\u7528 @classmethod \u88c5\u9970\u5668\u5b9a\u4e49\uff0c\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u540c\uff0cPython\u89e3\u91ca\u5668\u4f1a\u5c06\u7c7b\u672c\u8eab\u4f20\u9012\u7ed9\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u4e00\u822c\u5c06\u8be5\u53c2\u6570\u547d\u540d\u4e3a cls \uff09\u3002\u4f8b\u5982\uff1a class Times ( object ): factor = 1 @classmethod def mul ( cls , x ): return cls . factor * x class TwoTimes ( Times ): factor = 2 x = TwoTimes . mul ( 4 ) # \u8c03\u7528Times.mul(TwoTimes, 4) -> 8 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8bf7\u6ce8\u610f\u7c7b TwoTimes \u662f\u5982\u4f55\u4f5c\u4e3a\u5bf9\u8c61\u4f20\u9012\u7ed9 mul() \u7684\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u4f8b\u5b50\u6709\u4e9b\u6df1\u5965\uff0c\u4f46\u7c7b\u65b9\u6cd5\u8fd8\u6709\u4e00\u4e9b\u5b9e\u7528\u4e14\u5de7\u5999\u7684\u7528\u6cd5\u3002\u4f8b\u5982\uff0c\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7ee7\u627f\u81ea\u524d\u9762\u7ed9\u51fa\u7684 Date \u7c7b\u5e76\u5bf9\u5176\u7565\u52a0\u5b9a\u5236\uff1a class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) \u7531\u4e8e\u8be5\u7c7b\u7ee7\u627f\u81ea Date\uff0c\u6240\u4ee5\u5b83\u62e5\u6709 Date \u7684\u6240\u6709\u7279\u6027\u3002\u4f46\u662f now() \u548c tomorrow() \u65b9\u6cd5\u7a0d\u5fae\u6709\u70b9\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8c03\u7528 EuroDate.now()\uff0c\u5219\u4f1a\u8fd4\u56de Date \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f EuroDate \u5bf9\u8c61\u3002\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\uff1a class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @classmethod def now ( cls ): t = time . localtime () return cls ( t . tm_year , t . tm_mon , t . tm_mday ) @classmethod def tomorrow ( cls ): t = time . localtime ( time . time () + 86400 ) return cls ( t . tm_year , t . tm_mon , t . tm_mday ) class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) a = Date . now () # \u8c03\u7528Date.now(Date)\u5e76\u8fd4\u56deDate b = EuroDate . now () # \u8c03\u7528Date.now(EuroDate)\u5e76\u8fd4\u56deEuroDate print ( type ( a )) print ( type ( b )) <class '__main__.Date'> <class '__main__.EuroDate'> \u7c7b\u65b9\u6cd5\u9664\u4e86\u7528\u4e8e\u521b\u5efa\u6784\u9020\u51fd\u6570\uff0c\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u52a8\u6001\u66f4\u65b0\u7c7b\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u52a8\u6001\u66f4\u65b0\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a class Kls ( object ): models = {} def __init__ ( self , model_name ): # \u52a0\u8f7d\u6a21\u578b pass @classmethod def load_model ( cls , model_name ): cls . models [ model_name ] = cls ( model_name ) @classmethod def get_model ( cls , model_name ): return cls . models . get ( model_name , None ) def predict ( self ): return \"\u9884\u6d4b\u7ed3\u679c\u4e3a1\" model_name = \"svm\" Kls . load_model ( model_name ) model = Kls . get_model ( model_name ) model . predict () '\u9884\u6d4b\u7ed3\u679c\u4e3a1' Kls . models {'svm': <__main__.Kls at 0x17346dcc508>} \u5f53\u7136\uff0c\u9664\u4e86\u4f7f\u7528\u7c7b\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u663e\u5f0f\u8c03\u7528\u7c7b\u5c5e\u6027\uff0c\u8fbe\u5230\u52a8\u6001\u66f4\u65b0\u7c7b\u7684\u6548\u679c\uff0c\u4f8b\u5982\u6211\u4eec\u8981\u83b7\u53d6\u5b9e\u4f8b\u6570\uff1a class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 @classmethod def get_no_of_instance ( cls_obj ): return cls_obj . no_inst ik1 = Kls () ik2 = Kls () print ( ik1 . get_no_of_instance ()) print ( Kls . get_no_of_instance ()) 2 2 \u4f46\u662f\u5982\u679c\u8981\u7528\u5b9e\u4f8b\u65b9\u6cd5\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u5f97\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8981\u7ed9\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u547d\u540d\u3002\u5728\u7f16\u7a0b\u4e2d\uff0c\u7ed9\u8fc7\u591a\u7684\u53d8\u91cf\u547d\u540d\uff0c\u6709\u65f6\u662f\u4e00\u4e2a\u5934\u75bc\u7684\u95ee\u9898\u3002 \u5728\u7c7b\u5916\u9762\u5199\u4e00\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c\uff0c\u4f46\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002 def get_no_of_instances ( cls_obj ): return cls_obj . no_inst class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 ik1 = Kls () ik2 = Kls () print ( get_no_of_instances ( Kls )) 2","title":"\u7c7b\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_8","text":"\u5728\u5b9e\u4f8b\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u4e2d\uff0cPython\u9ed8\u8ba4\u5c06\u5f53\u524d\u5b9e\u4f8b\u6216\u8005\u7c7b\u5bf9\u8c61\u4f20\u7ed9\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u975e\u6307\u5b9a\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\uff09\uff0c\u5982\u679c\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u4fbf\u4f1a\u62a5\u9519\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def instance_method_no_self (): print ( \"\u4e0d\u63a5\u6536\u5b9e\u4f8b\" ) def instance_method ( * arg ): print ( 'Instance:' , arg ) @staticmethod def static_method ( * arg ): print ( 'Static:' , arg ) @classmethod def class_method_no_cls (): print ( \"\u4e0d\u63a5\u6536\u7c7b\u5bf9\u8c61\" ) @classmethod def class_method ( * arg ): print ( 'Class:' , arg ) ik3 = Kls ( 'arun' ) try : ik3 . instance_method_no_self () except TypeError as e : print ( \"TypeError:\" , e ) try : ik3 . class_method_no_cls () except TypeError as e : print ( \"TypeError:\" , e ) TypeError: instance_method_no_self() takes 0 positional arguments but 1 was given TypeError: class_method_no_cls() takes 0 positional arguments but 1 was given \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5fc5\u987b\u8bbe\u7f6e\u53c2\u6570\u63a5\u6536\u7c7b\u5bf9\u8c61\uff1a ik3 . instance_method () ik3 . class_method () Instance: (<__main__.Kls object at 0x0000017346E17588>,) Class: (<class '__main__.Kls'>,) \u9759\u6001\u65b9\u6cd5\u5219\u4e0d\u4f1a\u4f20\u5165\u5b9e\u4f8b\u6216\u7c7b\u5bf9\u8c61\uff1a ik3 . static_method () Static: () \u5982\u679c\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u53ea\u80fd\u901a\u8fc7\u7c7b\u53bb\u8c03\u7528\uff0c \u56e0\u4e3a\u7c7b\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5\u65f6\uff0c\u4e0d\u4f1a\u4f20\u5165\u7c7b\u6216\u8005\u5b9e\u4f8b\u3002 \u5e94\u8be5\u907f\u514d\u8fd9\u79cd\u7528\u6cd5\uff0c\u6ca1\u53c2\u6570\u7684\u65b9\u6cd5\u5e94\u8be5\u52a0\u4e0a @staticmethod \u88c5\u9970\u5668\uff1a Kls . instance_method_no_self () \u4e0d\u63a5\u6536\u5b9e\u4f8b \u5173\u4e8e\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0cPython \u4e0d\u4f1a\u5728\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u72ec\u7acb\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7ba1\u7406\u5b83\u4eec\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u6216\u7c7b\u8c03\u7528\u5b83\u4eec\u3002\u4f8b\u5982\uff1a Kls . class_method () Kls ( 'arun' ) . class_method () Kls . static_method () Kls ( 'arun' ) . static_method () Class: (<class '__main__.Kls'>,) Class: (<class '__main__.Kls'>,) Static: () Static: () \u8fd9\u53ef\u80fd\u5f88\u5bb9\u6613\u5f15\u8d77\u6df7\u6dc6\uff0c\u56e0\u4e3a\u5bf9 Kls('arun').cmethod2() \u7684\u8c03\u7528\u4e0e\u5b9e\u4f8b Kls('arun') \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u8fd9\u79cd\u884c\u4e3a\u662f Python \u5bf9\u8c61\u7cfb\u7edf\u4e0e\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff08\u5982 Smalltalk \u548c Ruby\uff09\u5bf9\u8c61\u7cfb\u7edf\u7684\u533a\u522b\u4e4b\u4e00\u3002\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7c7b\u65b9\u6cd5\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u662f\u4e25\u683c\u5206\u5f00\u7684\u3002 \u800c\u5b9e\u4f8b\u65b9\u6cd5\u5fc5\u987b\u901a\u8fc7\u5b9e\u4f8b\u8c03\u7528\uff0c\u56e0\u4e3a\u9700\u8981\u4f20\u5165\u5b9e\u4f8b \u3002","title":"\u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5bf9\u6bd4"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_9","text":"\u5b9e\u4f8b\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e09\u79cd\u65b9\u6cd5 \u7c7b\u53ea\u80fd\u8c03\u7528\u7c7b\u65b9\u6cd5\u548c\u9759\u6001\u65b9\u6cd5","title":"\u603b\u7ed3"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_10","text":"@property \u2014\u2014\u628a\u65b9\u6cd5\u53d8\u4e3a\u5c5e\u6027 \u901a\u5e38\uff0c\u8bbf\u95ee\u5b9e\u4f8b\u6216\u7c7b\u7684\u5c5e\u6027\u65f6\uff0c\u8fd4\u56de\u7684\u4f1a\u662f\u6240\u5b58\u50a8\u7684\u76f8\u5173\u503c\u3002\u7279\u6027\uff08property\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5c5e\u6027\uff0c\u8bbf\u95ee\u5b83\u65f6\u4f1a\u8ba1\u7b97\u5b83\u7684\u503c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius # Circle\u7684\u4e00\u4e9b\u9644\u52a0\u7279\u6027 @property def area ( self ): return math . pi * self . radius ** 2 @property def preimeter ( self ): return 2 * math . pi * self . radius \u5f97\u5230\u7684Circle\u5bf9\u8c61\u7684\u884c\u4e3a\u5982\u4e0b\uff1a c = Circle ( 4.0 ) print ( c . radius ) print ( c . area ) print ( c . preimeter ) try : c . area = 2 except AttributeError as e : print ( \"AttributeError:\" , e ) 4.0 50.26548245743669 25.132741228718345 AttributeError: can't set attribute \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cCircle \u5b9e\u4f8b\u5b58\u50a8\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf c.radius \u3002 c.area \u548c c.perimeter \u662f\u6839\u636e\u8be5\u503c\u8ba1\u7b97\u5f97\u6765\u7684\u3002 @property \u88c5\u9970\u5668\u652f\u6301\u4ee5\u7b80\u5355\u5c5e\u6027\u7684\u5f62\u5f0f\u8bbf\u95ee\u540e\u9762\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u50cf\u5e73\u5e38\u4e00\u6837\u6dfb\u52a0\u989d\u5916\u7684 () \u6765\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\u5bf9\u8c61\u7684\u4f7f\u7528\u8005\u5f88\u96be\u53d1\u73b0\u6b63\u5728\u8ba1\u7b97\u4e00\u4e2a\u5c5e\u6027\uff0c\u9664\u975e\u5728\u8bd5\u56fe\u91cd\u65b0\u5b9a\u4e49\u8be5\u5c5e\u6027\u65f6\u751f\u6210\u4e86\u9519\u8bef\u6d88\u606f\uff08\u5982\u4e0a\u9762\u7684 AttributeError \u5f02\u5e38\u6240\u793a\uff09\u3002 \u8fd9\u79cd\u7279\u6027\u4f7f\u7528\u65b9\u5f0f\u9075\u5faa\u6240\u8c13\u7684\u7edf\u4e00\u8bbf\u95ee\u539f\u5219\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5c3d\u53ef\u80fd\u4fdd\u6301\u7f16\u7a0b\u63a5\u53e3\u7684\u7edf\u4e00\u603b\u662f\u4e0d\u9519\u7684\u3002\u5982\u679c\u6ca1\u6709\u7279\u6027\uff0c\u5c06\u4f1a\u4ee5\u7b80\u5355\u5c5e\u6027\uff08\u5982 c.radius \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u800c\u5176\u4ed6\u5c5e\u6027\u5c06\u4ee5\u65b9\u6cd5\uff08\u5982 c.area() \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u3002\u8d39\u529b\u53bb\u4e86\u89e3\u4f55\u65f6\u6dfb\u52a0\u989d\u5916\u7684 () \u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u6df7\u6dc6\u3002\u7279\u6027\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 Python \u7a0b\u5e8f\u5458\u5f88\u5c11\u8ba4\u8bc6\u5230\uff0c \u65b9\u6cd5\u672c\u8eab\u662f\u88ab\u9690\u5f0f\u5730\u4f5c\u4e3a\u4e00\u7c7b\u7279\u6027\u5904\u7406\u7684\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7c7b\uff1a class Foo ( object ): def __init__ ( self , name ): self . name = name def spam ( self , x ): print ( \" %s , %s \" % ( self . name , x )) Foo ( \"d\" ) . spam <bound method Foo.spam of <__main__.Foo object at 0x0000017346E39948>> \u7528\u6237\u521b\u5efa f = Foo(\"Guido\") \u8fd9\u6837\u7684\u5b9e\u4f8b\u7136\u540e\u8bbf\u95ee f.spam \u65f6\uff0c\u4e0d\u4f1a\u8fd4\u56de\u539f\u59cb\u51fd\u6570\u5bf9\u8c61 spam \uff0c\u800c\u662f\u4f1a\u5f97\u5230\u6240\u8c13\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff08bound method\uff09\uff0c\u7ed1\u5b9a\u65b9\u6cd5\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ee3\u8868\u5c06\u5728\u5bf9\u8c61\u4e0a\u8c03\u7528 () \u8fd0\u7b97\u7b26\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u7ed1\u5b9a\u65b9\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5df2\u90e8\u5206\u8ba1\u7b97\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u7684self\u53c2\u6570\u5df2\u7ecf\u586b\u5165\uff0c\u4f46\u5176\u4ed6\u53c2\u6570\u4ecd\u7136\u9700\u8981\u5728\u4f7f\u7528 () \u8c03\u7528\u8be5\u51fd\u6570\u65f6\u63d0\u4f9b\u3002\u8fd9\u79cd\u7ed1\u5b9a\u65b9\u6cd5\u5bf9\u8c61\u662f\u7531\u5728\u540e\u53f0\u6267\u884c\u7684\u7279\u6027\u51fd\u6570\u9759\u9ed8\u5730\u521b\u5efa\u7684\u3002 \u4f7f\u7528 @staticmethod \u548c @classmethod \u5b9a\u4e49\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u6307\u5b9a\u4e86\u4f7f\u7528\u4e0d\u540c\u7684\u7279\u6027\u51fd\u6570\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5bf9\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bbf\u95ee\u3002 \u4f8b\u5982\uff0c @staticmethod \u4ec5\u201c\u6309\u539f\u6837\u201d\u8fd4\u56de\u65b9\u6cd5\u51fd\u6570\uff0c\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u7279\u6b8a\u7684\u5305\u88c5\u6216\u5904\u7406\u3002 \u7279\u6027\u8fd8\u53ef\u4ee5\u622a\u83b7\u64cd\u4f5c\u6743\uff0c\u4ee5\u8bbe\u7f6e\u548c\u5220\u9664\u5c5e\u6027\u3002\u8fd9\u662f\u901a\u8fc7\u5411\u7279\u6027\u9644\u52a0\u5176\u4ed6 setter \u548c deleter \u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Foo ( object ): def __init__ ( self , name ): self . __name = name @property def name ( self ): return self . __name @name . setter def name ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value @name . deleter def name ( self ): raise TypeError ( \"Can't delete name\" ) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u4f7f\u7528 @property \u88c5\u9970\u5668\u548c\u76f8\u5173\u65b9\u6cd5\u5c06\u5c5e\u6027 name \u5b9a\u4e49\u4e3a\u53ea\u8bfb\u7279\u6027\u3002\u540e\u9762\u7684 @name.setter \u548c @name.deleter \u88c5\u9970\u5668\u5c06\u5176\u4ed6\u65b9\u6cd5\u4e0e name \u5c5e\u6027\u4e0a\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u540d\u79f0\u5fc5\u987b\u4e0e\u539f\u59cb\u7279\u6027\u7684\u540d\u79f0\u5b8c\u5168\u5339\u914d\u3002\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u8bf7\u6ce8\u610f\u5b9e\u9645\u7684\u540d\u79f0\u503c\u5b58\u50a8\u5728\u5c5e\u6027 __name \u4e2d\u3002\u6240\u5b58\u50a8\u5c5e\u6027\u7684\u540d\u79f0\u65e0\u9700\u9075\u5faa\u4efb\u4f55\u7ea6\u5b9a\uff0c\u4f46\u5b83\u5fc5\u987b\u4e0e\u7279\u6027\u540d\u79f0\u4e0d\u540c\uff0c\u4ee5\u4fbf\u5c06\u5b83\u4e0e\u7279\u6027\u7684\u540d\u79f0\u533a\u5206\u5f00\u3002 \u5728\u4ee5\u524d\u7684\u4ee3\u7801\u4e2d\uff0c\u901a\u5e38\u4f1a\u770b\u5230\u7528 property(getf=None, setf=None, delf=None, doc=None) \u51fd\u6570\u6765\u5b9a\u4e49\u7279\u6027\uff0c\u5f80\u5176\u4e2d\u4f20\u5165\u4e00\u7ec4\u540d\u79f0\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a class Foo ( object ): def getname ( self ): return self . __name def setname ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value def delname ( self ): raise TypeError ( \"Can't delete name\" ) name = property ( getname , setname , delname ) \u8fd9\u79cd\u8001\u65b9\u6cd5\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u88c5\u9970\u5668\u7248\u672c\u4f1a\u8ba9\u7c7b\u770b\u8d77\u6765\u66f4\u6574\u6d01\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u88c5\u9970\u5668\uff0cget\u3001 set \u548c delete \u51fd\u6570\u5c06\u4e0d\u4f1a\u663e\u793a\u4e3a\u65b9\u6cd5\u3002","title":"\u7279\u6027"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_11","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u201c\u516c\u5171\u7684\u201d\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u8fd9\u8fd8\u6697\u793a\u7740\uff0c\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u88ab\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u5e76\u53ef\u4ece\u6d3e\u751f\u7c7b\u5185\u8fdb\u884c\u8bbf\u95ee\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u4e0d\u5e0c\u671b\u53d1\u751f\u8fd9\u79cd\u884c\u4e3a\uff0c\u56e0\u4e3a\u5b83\u4f1a\u66b4\u9732\u5bf9\u8c61\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u53ef\u80fd\u5bfc\u81f4\u5728\u6d3e\u751f\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e0e\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u53d1\u751f\u547d\u540d\u7a7a\u95f4\u51b2\u7a81\u3002 Note \u8fd9\u610f\u5473\u7740\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49\u3002 \u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c \u7c7b\u4e2d\u6240\u6709\u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\uff08\u5982 __Foo \uff09\u90fd\u4f1a\u81ea\u52a8\u53d8\u5f62\uff0c\u5f62\u6210\u5177\u6709 _Classname__Foo \u5f62\u5f0f\u7684\u65b0\u540d\u79f0\u3002 \u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7c7b\u4e2d\u6dfb\u52a0\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u6709\u6548\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528\u7684\u79c1\u6709\u540d\u79f0\u4e0d\u4f1a\u4e0e\u57fa\u7c7b\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u79c1\u6709\u540d\u79f0\u53d1\u751f\u51b2\u7a81\uff0c\u5982\u4e0b\u6240\u793a\uff1a class A ( object ): def __init__ ( self ): self . __X = 3 # \u53d8\u5f62\u4e3aself._A__X def __spam ( self ): # \u53d8\u5f62\u4e3a_A__spam() print ( \"A\" ) def bar ( self ): self . __spam () # \u53ea\u8c03\u7528A.__spam() class B ( A ): def __init__ ( self ): A . __init__ ( self ) self . __X = 37 # \u53d8\u5f62\u4e3aself._B__X def __spam ( self ): # \u53d8\u5f62\u4e3a_B__spam() print ( \"B\" ) b = B () # \u6d3e\u751f\u7c7b\u7684\u5b9a\u4e49\u6ca1\u6709\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49 b . bar () A \u5c3d\u7ba1\u8fd9\u79cd\u65b9\u6848\u4f3c\u4e4e\u9690\u85cf\u4e86\u6570\u636e\uff0c\u4f46\u5e76\u6ca1\u6709\u4e25\u683c\u7684\u673a\u5236\u6765\u5b9e\u9645\u963b\u6b62\u5bf9\u7c7b\u7684\u201c\u79c1\u6709\u201d\u5c5e\u6027\u8fdb\u884c\u8bbf\u95ee\u3002\u7279\u522b\u662f\u5982\u679c\u5df2\u77e5\u7c7b\u540d\u79f0\u548c\u76f8\u5e94\u79c1\u6709\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53d8\u5f62\u540e\u7684\u540d\u79f0\u6765\u8bbf\u95ee\u5b83\u4eec\u3002\u901a\u8fc7\u91cd\u5b9a\u4e49 dir() \u65b9\u6cd5\uff0c\u7c7b\u53ef\u4ee5\u964d\u4f4e\u8fd9\u4e9b\u5c5e\u6027\u7684\u53ef\u89c1\u6027\uff0c dir() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u68c0\u67e5\u5bf9\u8c61\u7684 dir() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u540d\u79f0\u5217\u8868\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u540d\u79f0\u53d8\u5f62\u4f3c\u4e4e\u662f\u4e00\u4e2a\u989d\u5916\u7684\u5904\u7406\u6b65\u9aa4\uff0c\u4f46\u53d8\u5f62\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u53ea\u5728\u5b9a\u4e49\u7c7b\u65f6\u53d1\u751f\u4e00\u6b21\u3002\u5b83\u4e0d\u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u53d1\u751f\uff0c\u4e5f\u4e0d\u4f1a\u4e3a\u7a0b\u5e8f\u7684\u6267\u884c\u6dfb\u52a0\u989d\u5916\u7684\u5f00\u9500\u3002\u800c\u4e14\u8981\u77e5\u9053\uff0c\u540d\u79f0\u53d8\u5f62\u4e0d\u4f1a\u5728 getattr() \u3001 hasattr() \u3001 setattr() \u6216 delattr() \u7b49\u51fd\u6570\u4e2d\u53d1\u751f\uff0c\u5728\u8fd9\u4e9b\u51fd\u6570\u4e2d\uff0c\u5c5e\u6027\u540d\u88ab\u6307\u5b9a\u4e3a\u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u51fd\u6570\uff0c\u9700\u8981\u663e\u5f0f\u4f7f\u7528\u53d8\u5f62\u540d\u79f0\uff08\u5982 _Classname__name \uff09\u6765\u8bbf\u95ee\u5c5e\u6027\u3002 \u5efa\u8bae\u5728\u5b9a\u4e49\u53ef\u53d8\u5c5e\u6027\u65f6\uff0c\u901a\u8fc7\u7279\u6027\u6765\u4f7f\u7528\u79c1\u6709\u5c5e\u6027\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u9f13\u52b1\u7528\u6237\u4f7f\u7528\u7279\u6027\u540d\u79f0\uff0c\u800c\u65e0\u9700\u76f4\u63a5\u8bbf\u95ee\u5e95\u5c42\u5b9e\u4f8b\u6570\u636e\uff08\u5982\u679c\u4f60\u5728\u5b9e\u4f8b\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u80fd\u4e0d\u60f3\u91c7\u7528\u8fd9\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff09\u3002 \u901a\u8fc7\u4e3a\u65b9\u6cd5\u63d0\u4f9b\u79c1\u6709\u540d\u79f0\uff0c\u8d85\u7c7b\u53ef\u4ee5\u963b\u6b62\u6d3e\u751f\u7c7b\u91cd\u65b0\u5b9a\u4e49\u548c\u66f4\u6539\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u7684 A.bar() \u65b9\u6cd5\u53ea\u8c03\u7528 A.__spam() \uff0c\u65e0\u8bba self \u5177\u6709\u4f55\u79cd\u7c7b\u578b\uff0c\u6216\u8005\u6d3e\u751f\u7c7b\u4e2d\u662f\u5426\u5b58\u5728\u4e0d\u540c\u7684 __spam() \u65b9\u6cd5\u90fd\u662f\u5982\u6b64\u3002 \u6700\u540e\uff0c\u4e0d\u8981\u6df7\u6dc6\u79c1\u6709\u7c7b\u5c5e\u6027\u7684\u547d\u540d\u548c\u6a21\u5757\u4e2d\u201c\u79c1\u6709\u201d\u5b9a\u4e49\u7684\u547d\u540d\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\uff0c\u5728\u5c5e\u6027\u540d\u4e0a\u4f7f\u7528\u5355\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\u6765\u9690\u85cf\u5c5e\u6027\u503c\uff08\u5982 _name \uff09\u3002 \u5728\u6a21\u5757\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u53ef\u4ee5\u963b\u6b62\u901a\u8fc7 from module import * \u8bed\u53e5\u5bfc\u51fa\u540d\u79f0\u3002 \u8fd9\u610f\u5473\u7740\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b9a\u4e49\u53ea\u80fd\u88ab\u7c7b\u672c\u8eab\u548c\u5176\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002\u4f46\u662f\u5728\u7c7b\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u65e2\u4e0d\u80fd\u9690\u85cf\u5c5e\u6027\uff0c\u5728\u67d0\u4e2a\u7c7b\u7ee7\u627f\u8be5\u7c7b\u5e76\u4f7f\u7528\u76f8\u540c\u540d\u79f0\u5b9a\u4e49\u4e00\u4e2a\u65b0\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6\uff0c\u4e5f\u4e0d\u80fd\u963b\u6b62\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u3002","title":"\u6570\u636e\u5c01\u88c5\u548c\u79c1\u6709\u5c5e\u6027"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_12","text":"\u4ece\u5185\u90e8\u5b9e\u73b0\u4e0a\u770b\uff0c\u5b9e\u4f8b\u662f\u4f7f\u7528\u5b57\u5178\u6765\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u8bbf\u95ee\u8be5\u5b57\u5178\u3002\u8fd9\u4e2a\u5b57\u5178\u5305\u542b\u7684\u6570\u636e\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u800c\u8a00\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance a = Account ( \"Guido\" , 1100.0 ) a . __dict__ {'name': 'Guido', 'balance': 1100.0} \u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u5411\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u4f8b\u5982\uff1a a . number = 123456 # \u5c06\u5c5e\u6027'number'\u6dfb\u52a0\u5230 a.__dict__ \u5bf9\u5b9e\u4f8b\u7684\u4fee\u6539\u59cb\u7ec8\u4f1a\u53cd\u6620\u5230\u5c40\u90e8 __dict__ \u5c5e\u6027\u4e2d\u3002\u540c\u6837\uff0c\u5982\u679c\u76f4\u63a5\u5bf9 __dict__ \u8fdb\u884c\u4fee\u6539\uff0c\u6240\u505a\u7684\u4fee\u6539\u4e5f\u4f1a\u53cd\u6620\u5728\u5b9e\u4f8b\u7684\u5c5e\u6027\u4e2d\u3002 \u5b9e\u4f8b\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __class__ \u94fe\u63a5\u56de\u5b83\u4eec\u7684\u7c7b\u3002\u7c7b\u672c\u8eab\u4e5f\u53ea\u662f\u5bf9\u5b57\u5178\u7684\u6d45\u5c42\u5305\u88c5\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u4e2d\u627e\u5230\u8fd9\u4e2a\u5b57\u5178\u3002\u53ef\u4ee5\u5728\u7c7b\u5b57\u5178\u4e2d\u627e\u5230\u5404\u79cd\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a a . __class__ __main__.Account Account . __dict__ . keys () dict_keys(['__module__', '__init__', '__dict__', '__weakref__', '__doc__']) \u6700\u540e\uff0c\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __bases__ \u4e2d\u5c06\u7c7b\u94fe\u63a5\u5230\u5b83\u4eec\u7684\u57fa\u7c7b\uff0c\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u57fa\u7c7b\u5143\u7ec4\u3002\u8fd9\u79cd\u5e95\u5c42\u7ed3\u6784\u662f\u83b7\u53d6\u3001\u8bbe\u7f6e\u548c\u5220\u9664\u5bf9\u8c61\u5c5e\u6027\u7684\u6240\u6709\u64cd\u4f5c\u7684\u57fa\u7840\u3002 \u53ea\u8981\u4f7f\u7528 obj.name = value \u8bbe\u7f6e\u4e86\u5c5e\u6027\uff0c\u7279\u6b8a\u65b9\u6cd5 obj.__setattr__(\"name\", value) \u5c31\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u4f7f\u7528 del obj.name \u5220\u9664\u4e86\u4e00\u4e2a\u5c5e\u6027\uff0c\u5c31\u4f1a\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__delattr__(\"name\") \u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u4fee\u6539\u6216\u5220\u9664 obj \u7684\u5c40\u90e8 __dict__ \u7684\u503c\uff0c\u9664\u975e\u8bf7\u6c42\u7684\u5c5e\u6027\u6b63\u597d\u662f\u4e00\u4e2a\u7279\u6027\u6216\u63cf\u8ff0\u7b26\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u5c06\u7531\u4e0e\u8be5\u7279\u6027\u76f8\u5173\u8054\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u51fd\u6570\u6267\u884c\u3002 \u5728\u67e5\u627e\u5c5e\u6027\uff08\u5982 obj.name \uff09\u65f6\uff0c\u5c06\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__getattrribute__(\"name\") \u3002\u8be5\u65b9\u6cd5\u6267\u884c\u641c\u7d22\u6765\u67e5\u627e\u8be5\u5c5e\u6027\uff0c\u8fd9\u901a\u5e38\u6d89\u53ca\u68c0\u67e5\u7279\u6027\u3001\u67e5\u627e\u5c40\u90e8 __dict__ \u5c5e\u6027\u3001\u68c0\u67e5\u7c7b\u5b57\u5178\u4ee5\u53ca\u641c\u7d22\u57fa\u7c7b\u3002\u5982\u679c\u641c\u7d22\u8fc7\u7a0b\u5931\u8d25\uff0c\u6700\u7ec8\u4f1a\u5c1d\u8bd5\u8c03\u7528\u7c7b\u7684 __getattr__() \u65b9\u6cd5\uff08\u5982\u679c\u5df2\u5b9a\u4e49\uff09\u6765\u67e5\u627e\u8be5\u5c5e\u6027\u3002\u5982\u679c\u8fd9\u4e5f\u5931\u8d25\uff0c\u5c31\u4f1a\u629b\u51fa AttributeError \u5f02\u5e38\u3002 \u5982\u679c\u6709\u5fc5\u8981\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u5176\u81ea\u5df1\u7684\u5c5e\u6027\u8bbf\u95ee\u51fd\u6570\u3002\u4f8b\u5982\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius def __getattr__ ( self , name ): if name == 'area' : return math . pi * self . radius ** 2 elif name == 'perimeter' : return 2 * math . pi * self . radius else : return object . __getattr__ ( self , name ) def __setattr__ ( self , name , value ): if name in [ 'area' , 'perimeter' ]: raise TypeError ( \" %s is readonly\" % name ) from None object . __setattr__ ( self , name , value ) c = Circle ( 2 ) print ( c . area ) try : c . area = 10 except TypeError as e : print ( \"TypeError:\" , e ) 12.566370614359172 TypeError: area is readonly \u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7c7b\u5e94\u8be5\u53ef\u4ee5\u4f9d\u9760 object \u4e2d\u7684\u9ed8\u8ba4\u5b9e\u73b0\u6765\u6267\u884c\u5b9e\u9645\u7684\u5de5\u4f5c\u3002\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u5b9e\u73b0\u80fd\u591f\u5904\u7406\u7c7b\u7684\u66f4\u9ad8\u7ea7\u7279\u6027\uff0c\u5982\u63cf\u8ff0\u7b26\u548c\u7279\u6027\u3002 \u4e00\u822c\u6765\u8bb2\uff0c\u7c7b\u5f88\u5c11\u91cd\u65b0\u5b9a\u4e49\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u4f46\u662f\uff0c\u5728\u7f16\u5199\u901a\u7528\u7684\u5305\u88c5\u5668\u548c\u73b0\u6709\u5bf9\u8c61\u7684\u4ee3\u7406\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u901a\u8fc7\u91cd\u65b0\u5b9a\u4e49 __getattr__() \u3001 __setattr__() \u548c __delattr__() \uff0c\u4ee3\u7406\u53ef\u4ee5\u6355\u83b7\u5c5e\u6027\u8bbf\u95ee\u64cd\u4f5c\uff0c\u5e76\u900f\u660e\u5730\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u8f6c\u53d1\u7ed9\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002","title":"\u5bf9\u8c61\u8868\u793a\u548c\u5c5e\u6027\u7ed1\u5b9a"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#__slots__","text":"\u901a\u8fc7\u5b9a\u4e49\u7279\u6b8a\u53d8\u91cf slots \uff0c\u7c7b\u53ef\u4ee5\u9650\u5236\u5bf9\u5408\u6cd5\u5b9e\u4f8b\u5c5e\u6027\u540d\u79f0\u7684\u8bbe\u7f6e\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance __slots__ = ( 'name' , 'balance' ) a = Account ( \"Guido\" , 1100.0 ) try : a . date = \"12-12\" except AttributeError as e : print ( \"AttributeError:\" , e ) AttributeError: 'Account' object has no attribute 'date' \u5b9a\u4e49 __slots__ \u65f6\uff0c\u53ef\u4ee5\u5c06\u5b9e\u4f8b\u4e0a\u5206\u914d\u7684\u5c5e\u6027\u540d\u79f0\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u540d\u79f0\uff0c\u5426\u5219\u5c06\u5f15\u53d1 AttributeError \u5f02\u5e38\u3002\u8fd9\u79cd\u9650\u5236\u53ef\u4ee5\u963b\u6b62\u5176\u4ed6\u4eba\u5411\u73b0\u6709\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u5373\u4fbf\u7528\u6237\u5c06\u5c5e\u6027\u540d\u79f0\u5199\u9519\uff0c\u4e5f\u4e0d\u4f1a\u521b\u5efa\u51fa\u65b0\u7684\u5c5e\u6027\u6765\u3002 \u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c __slots__ \u4ece\u672a\u88ab\u5f53\u4f5c\u4e00\u79cd\u5b89\u5168\u7684\u7279\u6027\u6765\u5b9e\u73b0\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u5bf9\u5185\u5b58\u548c\u6267\u884c\u901f\u5ea6\u7684\u4e00\u79cd\u6027\u80fd\u4f18\u5316\u3002 \u4f7f\u7528 __slots__ \u7684\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u518d\u4f7f\u7528\u5b57\u5178\u6765\u5b58\u50a8\u5b9e\u4f8b\u6570\u636e\uff0c\u8f6c\u800c\u91c7\u7528\u4e00\u79cd\u57fa\u4e8e\u6570\u7ec4\u7684\u66f4\u52a0\u7d27\u51d1\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728\u4f1a\u521b\u5efa\u5927\u91cf\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528 __slots__ \u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u6267\u884c\u65f6\u95f4\u3002 \u6ce8\u610f\uff0c __slots__ \u4e0e\u7ee7\u627f\u7684\u914d\u5408\u4f7f\u7528\u9700\u8981\u4e00\u5b9a\u7684\u6280\u5de7\u3002\u5982\u679c\u7c7b\u7ee7\u627f\u81ea\u4f7f\u7528 __slots__ \u7684\u57fa\u7c7b\uff0c\u90a3\u4e48\u5b83\u4e5f\u9700\u8981\u5b9a\u4e49 __slots__ \u6765\u5b58\u50a8\u81ea\u5df1\u7684\u5c5e\u6027\uff08\u5373\u4f7f\u5b83\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u5c5e\u6027\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u8fd9\u6837\u624d\u80fd\u5229\u7528 __slots__ \u63d0\u4f9b\u7684\u4f18\u52bf\u3002\u5982\u679c\u5fd8\u8bb0\u4e86\u8fd9\u4e00\u70b9\uff0c\u6d3e\u751f\u7c7b\u7684\u8fd0\u884c\u901f\u5ea6\u5c06\u66f4\u6162\uff0c\u5360\u7528\u7684\u5185\u5b58\u4e5f\u66f4\u591a\uff0c\u6bd4\u5b8c\u5168\u4e0d\u4f7f\u7528 __slots__ \u65f6\u60c5\u51b5\u66f4\u7cdf\u3002 __slots__ \u7684\u4f7f\u7528\u8fd8\u4f1a\u7834\u574f\u671f\u671b\u5b9e\u4f8b\u5177\u6709\u5e95\u5c42 __dict__ \u5c5e\u6027\u7684\u4ee3\u7801\u3002\u5c3d\u7ba1\u8fd9\u4e00\u70b9\u901a\u5e38\u4e0d\u9002\u7528\u4e8e\u7528\u6237\u4ee3\u7801\uff0c\u4f46\u5bf9\u4e8e\u652f\u6301\u5bf9\u8c61\u7684\u5b9e\u7528\u5e93\u548c\u5176\u4ed6\u5de5\u5177\uff0c\u5176\u4ee3\u7801\u53ef\u80fd\u8981\u4f9d\u9760 __dict__ \u6765\u8c03\u8bd5\u3001\u5e8f\u5217\u5316\u5bf9\u8c61\u4ee5\u53ca\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u6700\u540e\uff0c\u5982\u679c\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u4e86 __getattribute__() \u3001 __getattr__() \u548c __setattr__() \u7b49\u65b9\u6cd5\uff0c __slots__ \u7684\u5b58\u5728\u4e0d\u4f1a\u5bf9\u5b83\u4eec\u7684\u8c03\u7528\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u5c06\u8003\u8651\u5230 __slots__ \u3002\u6b64\u5916\u5e94\u8be5\u5f3a\u8c03\u4e00\u70b9\uff0c\u6ca1\u6709\u5fc5\u8981\u5411 __slots__ \u6dfb\u52a0\u65b9\u6cd5\u6216\u7279\u6027\u540d\u79f0\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b58\u50a8\u5728\u7c7b\u4e2d\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u3002","title":"__slots__"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_13","text":"difference between staticmethod and classmethod in python","title":"\u53c2\u8003"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8CMRO.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.06.26 \u5728\u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u7684\u8bed\u8a00\u4e2d\uff0c\u67e5\u627e\u65b9\u6cd5\u65f6\u641c\u7d22\u57fa\u7c7b\u7684\u987a\u5e8f\u901a\u5e38\u79f0\u4e3a\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\uff08Method Resolution Order, MRO\uff09\u3002 MRO\u5b9a\u4e49\u4e86\u591a\u4e2a\u7ee7\u627f\u5b58\u5728\u65f6\uff0cPython \u89e3\u91ca\u5668\u67e5\u627e\u51fd\u6570\u89e3\u6790\u7684\u5177\u4f53\u987a\u5e8f \u3002 \u5bf9\u4e8e\u53ea\u652f\u6301\u5355\u7ee7\u627f\u7684\u8bed\u8a00\u6765\u8bf4\uff0cMRO \u662f\u65e0\u8da3\u7684; \u4f46\u662f\u5f53\u591a\u91cd\u7ee7\u627f\u5f00\u59cb\u4f7f\u7528\u65f6\uff0cMRO \u7b97\u6cd5\u7684\u9009\u62e9\u53ef\u80fd\u662f\u975e\u5e38\u5fae\u5999\u7684\u3002Python \u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684 MRO \u7b97\u6cd5: classic\u3001Python 2.2 new-style \u548c Python 2.3 new-style (\u53c8\u540d C3)\u3002\u5728 Python 3\u4e2d\uff0c\u53ea\u6709C3\u7b97\u6cd5\u5e78\u5b58\u4e0b\u6765\u3002 classic MCO \u4ec0\u4e48\u662f\u51fd\u6570\u89e3\u6790\u987a\u5e8f\uff1f\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff1a # example 1 class A : def save ( self ): pass class B ( A ): pass class C : def save ( self ): pass class D ( B , C ): pass D () . save () Python 2.1 \u53ca\u4e4b\u524d\uff0cold-style class \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 MRO \u65b9\u6848\uff1a\u5728\u67e5\u627e\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 \u6df1\u5ea6\u4f18\u5148 \u7684\u4ece\u5de6\u5230\u53f3\u65b9\u6848\u641c\u7d22\u57fa\u7c7b\uff0c\u5c06\u8fd4\u56de\u5728\u6b64\u641c\u7d22\u8fc7\u7a0b\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u5bf9\u8c61\u3002\u8be5\u79cdMRO\u65b9\u6848\u53ef\u4ee5\u88ab\u79f0\u4e3aclassic\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5177\u4f53\u5982\u4e0b\uff1a \u68c0\u67e5\u5f53\u524d\u7684\u7c7b\u91cc\u9762\u662f\u5426\u6709\u8be5\u51fd\u6570\uff0c\u5982\u679c\u6709\u5219\u76f4\u63a5\u8c03\u7528\u3002 \u68c0\u67e5\u5f53\u524d\u7c7b\u7684\u7b2c\u4e00\u4e2a\u7236\u7c7b\u91cc\u9762\u662f\u5426\u6709\u8be5\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u5219\u68c0\u67e5\u7236\u7c7b\u7684\u7b2c\u4e00\u4e2a\u7236\u7c7b\u662f\u5426\u6709\u8be5\u51fd\u6570\uff0c\u4ee5\u6b64\u9012\u5f52\u6df1\u5ea6\u904d\u5386\u3002 \u5982\u679c\u6ca1\u6709\u5219\u56de\u6eaf\u4e00\u5c42\uff0c\u68c0\u67e5\u4e0b\u4e00\u4e2a\u7236\u7c7b\u91cc\u9762\u662f\u5426\u6709\u8be5\u51fd\u6570\u5e76\u6309\u7167 2 \u4e2d\u7684\u65b9\u5f0f\u9012\u5f52\u3002 \u6b65\u9aa4 2 \u603b\u662f\u6309\u7167\u7ee7\u627f\u5217\u8868\u4e2d\u7c7b\u7684\u5148\u540e\u987a\u5e8f\u6765\u9009\u62e9\u5206\u652f\u7684\u904d\u5386\u987a\u5e8f \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u662fold-style class\uff0c\u90a3\u4e48 save \u65b9\u6cd5\u7684\u641c\u7d22\u987a\u5e8f\u5982\u4e0b\uff1a D B A C \u6240\u4ee5\uff0c D().save() \u4f1a\u8c03\u7528 A \u7684 save \u65b9\u6cd5\u3002 old-style class \u7684MRO\u65b9\u6848\u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u5982\u679c\u662fdiamond inheritance\uff08\u83f1\u5f62\u7ee7\u627f\uff09\uff0c\u95ee\u9898\u5c31\u4f1a\u51fa\u73b0\u3002 # example 2 class A : def save ( self ): pass class B ( A ): pass class C ( A ): def save ( self ): pass class D ( B , C ): pass D () . save () \u6309\u7167\u6df1\u5ea6\u4f18\u5148\u7684MRO\u65b9\u6848\uff0c save \u65b9\u6cd5\u7684\u641c\u7d22\u987a\u5e8f\u5982\u4e0b\uff1a D B A C A \u56e0\u6b64\uff0c D().save() \u8fd8\u662f\u4f1a\u8c03\u7528 A \u7684 save \u65b9\u6cd5\u3002\u7136\u800c\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u65e2\u7136 B \u548c C \u90fd\u7ee7\u627f\u81ea A \uff0c\u4e3a\u4ec0\u4e48 D \u4e0d\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b C \u7684 save \u65b9\u6cd5\u5462\uff1f\u53ef\u4ee5\u8bf4\u91cd\u65b0\u5b9a\u4e49\u7684\u65b9\u6cd5 C.save () \u662f\u66f4\u53ef\u80fd\u60f3\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a C.save () \u53ef\u4ee5\u770b\u6210\u662f\u6bd4 A.save () \u66f4\u5177\u4f53\u5316\u7684\u65b9\u6cd5\u3002 MRO for Python 2.2 new-style class \u5c3d\u7ba1\u8fd9\u79cd\u7c7b\u578b\u7684\u591a\u91cd\u7ee7\u627f\u5728Python2\u7684\u4ee3\u7801\u4e2d\u5f88\u5c11\u89c1\uff0c\u4f46\u662fnew-style class\u7684\u51fa\u73b0\u5c06\u4f7f\u5b83\u53d8\u5f97\u53f8\u7a7a\u89c1\u60ef\u3002 \u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u65b0\u5f0f\u7c7b\u90fd\u662f\u901a\u8fc7\u7ee7\u627f object \u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\u3002 \u56e0\u6b64\uff0c\u5728\u4efb\u4f55\u65b0\u5f0f\u7c7b\u4e2d\u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u90fd\u4f1a\u521b\u5efa\u4e0a\u9762\u63cf\u8ff0\u7684\u83f1\u5f62\u5173\u7cfb\u3002 \u4f8b\u5982: # example 3 class B ( object ): pass class C ( object ): def __setattr__ ( self , name , value ): pass class D ( B , C ): pass \u56e0\u6b64\uff0c\u5982\u679c\u57fa\u7c7b\u5bf9\u8c61\u91cd\u5b9a\u4e49\u4e86\u9b54\u672f\u65b9\u6cd5\uff08\u5982\u4e0a\u4f8b\u4e2d\u7684 __setattr__() \uff09\uff0c\u89e3\u6790\u987a\u5e8f\u5c31\u4f1a\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u65b9\u6cd5 c.__setattr__() \u5e94\u8be5\u88ab\u7c7b D \u7ee7\u627f\u3002 \u4e3a\u4e86\u4fee\u6b63 Python 2.2 \u4e2d\u65b0\u6837\u5f0f\u7c7b\u7684\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\uff0c Guido van Rossum \u91c7\u7528\u4e86\u4e00\u4e2a\u65b0\u7684MRO\u65b9\u6848\uff0c \u9996\u5148\u6309\u7167 old-style class \u7684MRO\u65b9\u6848\u9884\u5148\u8ba1\u7b97\uff1a D B O C O \u5982\u679c\u524d\u9762\u7684\u7c7b\u5728\u540e\u9762\u4e5f\u51fa\u73b0\u4e86\uff0c\u5219\u5220\u9664\u524d\u9762\u91cd\u590d\u7684\u7c7b\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u641c\u7d22\u987a\u5e8f\uff1a D B C O \u5b9e\u9645\u4e0a\uff0cPython 2.2 \u7684new-style class\u7684MRO\u7b97\u6cd5\u6bd4\u8fd9\u8fd8\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u56e0\u4e3a\u6709\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528\u4e0a\u9762\u7b80\u5355\u7684MRO\u7b97\u6cd5\u5e76\u4e0d\u8d77\u4f5c\u7528\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u60c5\u51b5\uff1a # example 4 class A ( object ): pass class B ( object ): pass class X ( A , B ): pass class Y ( B , A ): pass class Z ( X , Y ): pass \u5982\u679c\u4f7f\u7528\u7b80\u5355\u7684MRO\u7b97\u6cd5\uff0c\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a result of the first step: Z X A B O Y B A O final result: Z X Y B A O Guido van Rossum\u4e0d\u559c\u6b22 B \u548c A \u7684\u987a\u5e8f\u98a0\u5012\u3002 \u56e0\u6b64\uff0c\u771f\u6b63\u7684 new-style class MRO \u4fdd\u6301\u641c\u7d22\u8fc7\u7a0b\u4e2d\u6700\u5148\u51fa\u73b0\u7684\u57fa\u7c7b\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6700\u7ec8\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a Z X Y A B O \u8fd9\u662fGuido van Rossum\u4e3a Python 2.2 new-style class \u5b9e\u73b0\u7684MRO\u3002 C3 for Python 2.3 + \u7136\u800c\uff0c\u5728 Python 2.2 \u4e2d\u5f15\u5165\u65b0\u5f0f\u7c7b\u4e4b\u540e\u4e0d\u4e45\uff0cSamuele Pedroni \u53d1\u73b0\u6587\u6863\u4e2d\u7684 MRO \u7b97\u6cd5\u4e0e\u5b9e\u9645\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\u89c2\u5bdf\u5230\u7684\u7ed3\u679c\u4e0d\u4e00\u81f4\u3002 \u6b64\u5916\uff0c\u5373\u4f7f\u5728\u4e0d\u5c5e\u4e8e\u4e0a\u8ff0\u7279\u6b8a\u60c5\u51b5\u7684\u4ee3\u7801\u4e2d\u4e5f\u4f1a\u51fa\u73b0\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002\u7ecf\u8fc7\u5927\u91cf\u8ba8\u8bba\uff0c\u4ed6\u4eec\u51b3\u5b9a\u653e\u5f03 Python 2.2 \u91c7\u7528\u7684 MRO\uff0c\u8ba9 Python2.3 \u53ca\u4e4b\u540e\u7684\u7248\u672c\u4f7f\u7528C3 Linearization algorithm\uff08 A Monotonic Superclass Linearization for Dylan , K. Barrett, et al, presented at OOPSLA'96\uff09\u3002 \u5728\u4ecb\u7ecdC3\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u7ea6\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u7b26\u53f7\u3002\u6211\u4eec\u7528 $C_{1}C_{2} \\cdots C_{N}$\u8868\u793a\u5305\u542b N \u4e2a\u7c7b\u7684\u5217\u8868\uff0c\u5e76\u4ee4 $$ \\begin{array}{c}\\operatorname{head}\\left(C_{1} C_{2} \\cdots C_{N}\\right)=C_{1} \\ \\operatorname{tail}\\left(C_{1} C_{2} \\cdots C_{N}\\right)=C_{2} C_{3} \\cdots C_{N}\\end{array} $$ \u4e3a\u4e86\u65b9\u4fbf\u505a\u5217\u8868\u8fde\u63a5\u64cd\u4f5c\uff0c\u6211\u4eec\u8bb0\uff1a $$ C_{1}+\\left(C_{2} C_{3} \\cdots C_{N}\\right)=C_{1} C_{2} \\cdots C_{N} $$ \u5047\u8bbe\u7c7b $C$ \u7ee7\u627f\u81ea\u7236\u7c7b $B_{1}, \\cdots, B_{N}$\uff0c\u90a3\u4e48\u6839\u636e C3 \u7ebf\u6027\u5316\uff0c\u7c7b $C$ \u7684\u65b9\u6cd5\u89e3\u6790\u5217\u8868\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u786e\u5b9a\uff1a $$ L[C(B_{1} \\cdots B_{N})] = C + merge(L[B_{1}], \\cdots, L[B_{N}], B_{1} \\cdots B_{N}) $$ \u8fd9\u4e2a\u516c\u5f0f\u8868\u660e $C$ \u7684\u89e3\u6790\u5217\u8868\u662f\u901a\u8fc7\u5bf9\u5176\u6240\u6709\u7236\u7c7b\u7684\u89e3\u6790\u5217\u8868\u53ca\u5176\u7236\u7c7b\u4e00\u8d77\u505a merge \u64cd\u4f5c\u6240\u5f97\u5230\u3002 merge\u662f C3 \u7ebf\u6027\u5316\u4e2d\u6700\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u9009\u53d6 merge\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5217\u8868\u8bb0\u4e3a\u5f53\u524d\u5217\u8868 $K$\u3002 \u4ee4 $h = head(K)$\uff0c\u5982\u679c $h$ \u6ca1\u6709\u51fa\u73b0\u5728\u5176\u4ed6\u4efb\u4f55\u5217\u8868\u7684 $\\text{tail}$ \u5f53\u4e2d\uff0c\u90a3\u4e48\u5c06\u5176\u52a0\u5165\u5230\u7c7b $C$ \u7684\u7ebf\u6027\u5316\u5217\u8868\u4e2d\uff0c\u5e76\u5c06\u5176\u4ece merge \u4e2d\u6240\u6709\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u4e4b\u540e\u91cd\u590d\u6b65\u9aa4 2\u3002 \u5426\u5219\uff0c\u8bbe\u7f6e $K$ \u4e3a merge \u4e2d\u7684\u4e0b\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u91cd\u590d 2 \u4e2d\u7684\u64cd\u4f5c\u3002 \u5982\u679c merge\u4e2d\u6240\u6709\u7684\u7c7b\u90fd\u88ab\u79fb\u9664\uff0c\u5219\u8f93\u51fa\u7c7b\u521b\u5efa\u6210\u529f\uff1b\u5982\u679c\u4e0d\u80fd\u627e\u5230\u4e0b\u4e00\u4e2a $h$\uff0c\u5219\u8f93\u51fa\u62d2\u7edd\u521b\u5efa\u7c7b $C$ \u5e76\u629b\u51fa\u5f02\u5e38\u3002 \u4f7f\u7528 example 4 \u7684\u4f8b\u5b50\u6765\u6267\u884cC3\u7b97\u6cd5\uff1a class A ( object ): pass class B ( object ): pass class X ( A , B ): pass class Y ( B , A ): pass class Z ( X , Y ): pass \u9996\u5148\u6211\u4eec\u6709\uff1a $$ L[A] = [A, O] \\tag{1} $$ $$ L[B] = [B, O] \\tag{2} $$ \u6839\u636e(1)\u548c(2)\uff0c\u6709\uff1a $$ \\begin{aligned} L[X] &= X + merge\\left[ L[A], L[B], A, B \\right] \\\\ &= X + [[A, O], [B,O], A, B] \\\\ &= [X, A] + [[O], [B,O], B] \\\\ &= [X, A, B] + [[O], [O]] \\\\ &= [X, A, B, O] + [ ] \\\\ &= [X, A, B, O] \\end{aligned} \\tag{3} $$ \u540c\u7406\u53ef\u5f97\uff1a $$ L[Y] = [Y, B, A, O] \\tag{4} $$ \u6839\u636e(3)\u548c(4)\uff0c\u6709\uff1a $$ \\begin{aligned} L[Z] &= Z + merge\\left[ L[X], L[Y], X, Y \\right] \\\\ &= Z + [[X, A, B, O], [Y, B,A, O], X, Y] \\\\ &= [Z,X] + [[A, B, O], [Y, B,A, O], Y] \\\\ &= [Z,X,Y] + [[A, B, O], [B,A, O]] \\end{aligned} \\tag{5} $$ \u6700\u540e\u4ea7\u751f\u51b2\u7a81\uff0cPython\u4f1a\u629b\u51fa TypeError \u5f02\u5e38\u3002","title":"4.2.\u591a\u91cd\u7ee7\u627f\u548cMRO"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8CMRO.html#classic-mco","text":"\u4ec0\u4e48\u662f\u51fd\u6570\u89e3\u6790\u987a\u5e8f\uff1f\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff1a # example 1 class A : def save ( self ): pass class B ( A ): pass class C : def save ( self ): pass class D ( B , C ): pass D () . save () Python 2.1 \u53ca\u4e4b\u524d\uff0cold-style class \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 MRO \u65b9\u6848\uff1a\u5728\u67e5\u627e\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 \u6df1\u5ea6\u4f18\u5148 \u7684\u4ece\u5de6\u5230\u53f3\u65b9\u6848\u641c\u7d22\u57fa\u7c7b\uff0c\u5c06\u8fd4\u56de\u5728\u6b64\u641c\u7d22\u8fc7\u7a0b\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u5bf9\u8c61\u3002\u8be5\u79cdMRO\u65b9\u6848\u53ef\u4ee5\u88ab\u79f0\u4e3aclassic\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5177\u4f53\u5982\u4e0b\uff1a \u68c0\u67e5\u5f53\u524d\u7684\u7c7b\u91cc\u9762\u662f\u5426\u6709\u8be5\u51fd\u6570\uff0c\u5982\u679c\u6709\u5219\u76f4\u63a5\u8c03\u7528\u3002 \u68c0\u67e5\u5f53\u524d\u7c7b\u7684\u7b2c\u4e00\u4e2a\u7236\u7c7b\u91cc\u9762\u662f\u5426\u6709\u8be5\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u5219\u68c0\u67e5\u7236\u7c7b\u7684\u7b2c\u4e00\u4e2a\u7236\u7c7b\u662f\u5426\u6709\u8be5\u51fd\u6570\uff0c\u4ee5\u6b64\u9012\u5f52\u6df1\u5ea6\u904d\u5386\u3002 \u5982\u679c\u6ca1\u6709\u5219\u56de\u6eaf\u4e00\u5c42\uff0c\u68c0\u67e5\u4e0b\u4e00\u4e2a\u7236\u7c7b\u91cc\u9762\u662f\u5426\u6709\u8be5\u51fd\u6570\u5e76\u6309\u7167 2 \u4e2d\u7684\u65b9\u5f0f\u9012\u5f52\u3002 \u6b65\u9aa4 2 \u603b\u662f\u6309\u7167\u7ee7\u627f\u5217\u8868\u4e2d\u7c7b\u7684\u5148\u540e\u987a\u5e8f\u6765\u9009\u62e9\u5206\u652f\u7684\u904d\u5386\u987a\u5e8f \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u662fold-style class\uff0c\u90a3\u4e48 save \u65b9\u6cd5\u7684\u641c\u7d22\u987a\u5e8f\u5982\u4e0b\uff1a D B A C \u6240\u4ee5\uff0c D().save() \u4f1a\u8c03\u7528 A \u7684 save \u65b9\u6cd5\u3002 old-style class \u7684MRO\u65b9\u6848\u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u5982\u679c\u662fdiamond inheritance\uff08\u83f1\u5f62\u7ee7\u627f\uff09\uff0c\u95ee\u9898\u5c31\u4f1a\u51fa\u73b0\u3002 # example 2 class A : def save ( self ): pass class B ( A ): pass class C ( A ): def save ( self ): pass class D ( B , C ): pass D () . save () \u6309\u7167\u6df1\u5ea6\u4f18\u5148\u7684MRO\u65b9\u6848\uff0c save \u65b9\u6cd5\u7684\u641c\u7d22\u987a\u5e8f\u5982\u4e0b\uff1a D B A C A \u56e0\u6b64\uff0c D().save() \u8fd8\u662f\u4f1a\u8c03\u7528 A \u7684 save \u65b9\u6cd5\u3002\u7136\u800c\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u65e2\u7136 B \u548c C \u90fd\u7ee7\u627f\u81ea A \uff0c\u4e3a\u4ec0\u4e48 D \u4e0d\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b C \u7684 save \u65b9\u6cd5\u5462\uff1f\u53ef\u4ee5\u8bf4\u91cd\u65b0\u5b9a\u4e49\u7684\u65b9\u6cd5 C.save () \u662f\u66f4\u53ef\u80fd\u60f3\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a C.save () \u53ef\u4ee5\u770b\u6210\u662f\u6bd4 A.save () \u66f4\u5177\u4f53\u5316\u7684\u65b9\u6cd5\u3002","title":"classic MCO"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8CMRO.html#mro-for-python-22-new-style-class","text":"\u5c3d\u7ba1\u8fd9\u79cd\u7c7b\u578b\u7684\u591a\u91cd\u7ee7\u627f\u5728Python2\u7684\u4ee3\u7801\u4e2d\u5f88\u5c11\u89c1\uff0c\u4f46\u662fnew-style class\u7684\u51fa\u73b0\u5c06\u4f7f\u5b83\u53d8\u5f97\u53f8\u7a7a\u89c1\u60ef\u3002 \u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u65b0\u5f0f\u7c7b\u90fd\u662f\u901a\u8fc7\u7ee7\u627f object \u5bf9\u8c61\u6765\u5b9a\u4e49\u7684\u3002 \u56e0\u6b64\uff0c\u5728\u4efb\u4f55\u65b0\u5f0f\u7c7b\u4e2d\u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u90fd\u4f1a\u521b\u5efa\u4e0a\u9762\u63cf\u8ff0\u7684\u83f1\u5f62\u5173\u7cfb\u3002 \u4f8b\u5982: # example 3 class B ( object ): pass class C ( object ): def __setattr__ ( self , name , value ): pass class D ( B , C ): pass \u56e0\u6b64\uff0c\u5982\u679c\u57fa\u7c7b\u5bf9\u8c61\u91cd\u5b9a\u4e49\u4e86\u9b54\u672f\u65b9\u6cd5\uff08\u5982\u4e0a\u4f8b\u4e2d\u7684 __setattr__() \uff09\uff0c\u89e3\u6790\u987a\u5e8f\u5c31\u4f1a\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u65b9\u6cd5 c.__setattr__() \u5e94\u8be5\u88ab\u7c7b D \u7ee7\u627f\u3002 \u4e3a\u4e86\u4fee\u6b63 Python 2.2 \u4e2d\u65b0\u6837\u5f0f\u7c7b\u7684\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\uff0c Guido van Rossum \u91c7\u7528\u4e86\u4e00\u4e2a\u65b0\u7684MRO\u65b9\u6848\uff0c \u9996\u5148\u6309\u7167 old-style class \u7684MRO\u65b9\u6848\u9884\u5148\u8ba1\u7b97\uff1a D B O C O \u5982\u679c\u524d\u9762\u7684\u7c7b\u5728\u540e\u9762\u4e5f\u51fa\u73b0\u4e86\uff0c\u5219\u5220\u9664\u524d\u9762\u91cd\u590d\u7684\u7c7b\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u641c\u7d22\u987a\u5e8f\uff1a D B C O \u5b9e\u9645\u4e0a\uff0cPython 2.2 \u7684new-style class\u7684MRO\u7b97\u6cd5\u6bd4\u8fd9\u8fd8\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u56e0\u4e3a\u6709\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528\u4e0a\u9762\u7b80\u5355\u7684MRO\u7b97\u6cd5\u5e76\u4e0d\u8d77\u4f5c\u7528\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u60c5\u51b5\uff1a # example 4 class A ( object ): pass class B ( object ): pass class X ( A , B ): pass class Y ( B , A ): pass class Z ( X , Y ): pass \u5982\u679c\u4f7f\u7528\u7b80\u5355\u7684MRO\u7b97\u6cd5\uff0c\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a result of the first step: Z X A B O Y B A O final result: Z X Y B A O Guido van Rossum\u4e0d\u559c\u6b22 B \u548c A \u7684\u987a\u5e8f\u98a0\u5012\u3002 \u56e0\u6b64\uff0c\u771f\u6b63\u7684 new-style class MRO \u4fdd\u6301\u641c\u7d22\u8fc7\u7a0b\u4e2d\u6700\u5148\u51fa\u73b0\u7684\u57fa\u7c7b\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6700\u7ec8\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a Z X Y A B O \u8fd9\u662fGuido van Rossum\u4e3a Python 2.2 new-style class \u5b9e\u73b0\u7684MRO\u3002","title":"MRO for Python 2.2 new-style class"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8CMRO.html#c3-for-python-23","text":"\u7136\u800c\uff0c\u5728 Python 2.2 \u4e2d\u5f15\u5165\u65b0\u5f0f\u7c7b\u4e4b\u540e\u4e0d\u4e45\uff0cSamuele Pedroni \u53d1\u73b0\u6587\u6863\u4e2d\u7684 MRO \u7b97\u6cd5\u4e0e\u5b9e\u9645\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\u89c2\u5bdf\u5230\u7684\u7ed3\u679c\u4e0d\u4e00\u81f4\u3002 \u6b64\u5916\uff0c\u5373\u4f7f\u5728\u4e0d\u5c5e\u4e8e\u4e0a\u8ff0\u7279\u6b8a\u60c5\u51b5\u7684\u4ee3\u7801\u4e2d\u4e5f\u4f1a\u51fa\u73b0\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002\u7ecf\u8fc7\u5927\u91cf\u8ba8\u8bba\uff0c\u4ed6\u4eec\u51b3\u5b9a\u653e\u5f03 Python 2.2 \u91c7\u7528\u7684 MRO\uff0c\u8ba9 Python2.3 \u53ca\u4e4b\u540e\u7684\u7248\u672c\u4f7f\u7528C3 Linearization algorithm\uff08 A Monotonic Superclass Linearization for Dylan , K. Barrett, et al, presented at OOPSLA'96\uff09\u3002 \u5728\u4ecb\u7ecdC3\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u7ea6\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u7b26\u53f7\u3002\u6211\u4eec\u7528 $C_{1}C_{2} \\cdots C_{N}$\u8868\u793a\u5305\u542b N \u4e2a\u7c7b\u7684\u5217\u8868\uff0c\u5e76\u4ee4 $$ \\begin{array}{c}\\operatorname{head}\\left(C_{1} C_{2} \\cdots C_{N}\\right)=C_{1} \\ \\operatorname{tail}\\left(C_{1} C_{2} \\cdots C_{N}\\right)=C_{2} C_{3} \\cdots C_{N}\\end{array} $$ \u4e3a\u4e86\u65b9\u4fbf\u505a\u5217\u8868\u8fde\u63a5\u64cd\u4f5c\uff0c\u6211\u4eec\u8bb0\uff1a $$ C_{1}+\\left(C_{2} C_{3} \\cdots C_{N}\\right)=C_{1} C_{2} \\cdots C_{N} $$ \u5047\u8bbe\u7c7b $C$ \u7ee7\u627f\u81ea\u7236\u7c7b $B_{1}, \\cdots, B_{N}$\uff0c\u90a3\u4e48\u6839\u636e C3 \u7ebf\u6027\u5316\uff0c\u7c7b $C$ \u7684\u65b9\u6cd5\u89e3\u6790\u5217\u8868\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u786e\u5b9a\uff1a $$ L[C(B_{1} \\cdots B_{N})] = C + merge(L[B_{1}], \\cdots, L[B_{N}], B_{1} \\cdots B_{N}) $$ \u8fd9\u4e2a\u516c\u5f0f\u8868\u660e $C$ \u7684\u89e3\u6790\u5217\u8868\u662f\u901a\u8fc7\u5bf9\u5176\u6240\u6709\u7236\u7c7b\u7684\u89e3\u6790\u5217\u8868\u53ca\u5176\u7236\u7c7b\u4e00\u8d77\u505a merge \u64cd\u4f5c\u6240\u5f97\u5230\u3002 merge\u662f C3 \u7ebf\u6027\u5316\u4e2d\u6700\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u9009\u53d6 merge\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5217\u8868\u8bb0\u4e3a\u5f53\u524d\u5217\u8868 $K$\u3002 \u4ee4 $h = head(K)$\uff0c\u5982\u679c $h$ \u6ca1\u6709\u51fa\u73b0\u5728\u5176\u4ed6\u4efb\u4f55\u5217\u8868\u7684 $\\text{tail}$ \u5f53\u4e2d\uff0c\u90a3\u4e48\u5c06\u5176\u52a0\u5165\u5230\u7c7b $C$ \u7684\u7ebf\u6027\u5316\u5217\u8868\u4e2d\uff0c\u5e76\u5c06\u5176\u4ece merge \u4e2d\u6240\u6709\u5217\u8868\u4e2d\u79fb\u9664\uff0c\u4e4b\u540e\u91cd\u590d\u6b65\u9aa4 2\u3002 \u5426\u5219\uff0c\u8bbe\u7f6e $K$ \u4e3a merge \u4e2d\u7684\u4e0b\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u91cd\u590d 2 \u4e2d\u7684\u64cd\u4f5c\u3002 \u5982\u679c merge\u4e2d\u6240\u6709\u7684\u7c7b\u90fd\u88ab\u79fb\u9664\uff0c\u5219\u8f93\u51fa\u7c7b\u521b\u5efa\u6210\u529f\uff1b\u5982\u679c\u4e0d\u80fd\u627e\u5230\u4e0b\u4e00\u4e2a $h$\uff0c\u5219\u8f93\u51fa\u62d2\u7edd\u521b\u5efa\u7c7b $C$ \u5e76\u629b\u51fa\u5f02\u5e38\u3002 \u4f7f\u7528 example 4 \u7684\u4f8b\u5b50\u6765\u6267\u884cC3\u7b97\u6cd5\uff1a class A ( object ): pass class B ( object ): pass class X ( A , B ): pass class Y ( B , A ): pass class Z ( X , Y ): pass \u9996\u5148\u6211\u4eec\u6709\uff1a $$ L[A] = [A, O] \\tag{1} $$ $$ L[B] = [B, O] \\tag{2} $$ \u6839\u636e(1)\u548c(2)\uff0c\u6709\uff1a $$ \\begin{aligned} L[X] &= X + merge\\left[ L[A], L[B], A, B \\right] \\\\ &= X + [[A, O], [B,O], A, B] \\\\ &= [X, A] + [[O], [B,O], B] \\\\ &= [X, A, B] + [[O], [O]] \\\\ &= [X, A, B, O] + [ ] \\\\ &= [X, A, B, O] \\end{aligned} \\tag{3} $$ \u540c\u7406\u53ef\u5f97\uff1a $$ L[Y] = [Y, B, A, O] \\tag{4} $$ \u6839\u636e(3)\u548c(4)\uff0c\u6709\uff1a $$ \\begin{aligned} L[Z] &= Z + merge\\left[ L[X], L[Y], X, Y \\right] \\\\ &= Z + [[X, A, B, O], [Y, B,A, O], X, Y] \\\\ &= [Z,X] + [[A, B, O], [Y, B,A, O], Y] \\\\ &= [Z,X,Y] + [[A, B, O], [B,A, O]] \\end{aligned} \\tag{5} $$ \u6700\u540e\u4ea7\u751f\u51b2\u7a81\uff0cPython\u4f1a\u629b\u51fa TypeError \u5f02\u5e38\u3002","title":"C3 for Python 2.3 +"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html","text":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u5757 \u5982\u679c\u4f60\u60f3\u8981\u7f16\u5199\u4e00\u4e9b\u66f4\u5927\u7684\u7a0b\u5e8f\uff0c\u80af\u5b9a\u4e0d\u60f3\u5b9a\u4e49\u91cd\u590d\u7684\u51fd\u6570\u3001\u7c7b\uff0c\u60f3\u8ba9\u4ee3\u7801\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002\u968f\u7740\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u5206\u5272\u6210\u51e0\u4e2a\u66f4\u6613\u4e8e\u7ef4\u62a4\u7684\u6587\u4ef6\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u9700\u8981\uff0cPython \u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u5b9a\u4e49\uff0c\u5728\u811a\u672c\u6216\u8005\u89e3\u91ca\u5668\u7684\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u3002\u8fd9\u6837\u7684\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757\u3002\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u6a21\u5757\u5c31\u662f\u4e00\u4e2a.py\u6587\u4ef6\u3002 \u6a21\u5757\u641c\u7d22\u8def\u5f84 Python \u600e\u6837\u77e5\u9053\u4ece\u4f55\u5904\u627e\u5230\u6a21\u5757\u6587\u4ef6\uff1f \u5982\u679c\u4f60\u719f\u6089\u547d\u4ee4\u884c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5bf9\u4f60\u6765\u8bf4\u5c31\u4e0d\u96be\u7406\u89e3\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u7684\u4efb\u4f55\u547d\u4ee4\uff0c\u5b9e\u9645\u4e0a\u80cc\u540e\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff08\u6bd4\u5982 cmd, bash\uff09\u4f1a\u4ece\u4e00\u4e2a\u5168\u5c40\u7684\u73af\u5883\u53d8\u91cf PATH \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u6709\u5e8f\u7684\u5217\u8868\u3002\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u8def\u5f84\uff0c\u800c\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff0c\u4f1a\u4f9d\u6b21\u5728\u8fd9\u4e9b\u8def\u5f84\u91cc\uff0c\u641c\u7d22\u9700\u8981\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 Python \u641c\u5bfb\u6a21\u5757\u6587\u4ef6\uff0c\u4e5f\u9075\u5faa\u4e86\u7c7b\u4f3c\u7684\u601d\u8def\u3002\u6bd4\u5982\uff0c\u7528\u6237\u5728 Python \u4e2d\u5c1d\u8bd5\u5bfc\u5165 import foobar\uff0c\u90a3\u4e48 \u9996\u5148\uff0cPython \u4f1a\u5728\u5185\u5efa\u6a21\u5757\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\uff08\u5f53\u524d\u811a\u672c\u6240\u5728\u8def\u5f84\uff0c\u6216\u8005\u6267\u884c Python \u89e3\u91ca\u5668\u7684\u8def\u5f84\uff09\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u73af\u5883\u53d8\u91cf PYTHONPATH \u4e2d\u6307\u793a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4f9d\u65e7\u672a\u80fd\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5b89\u88c5\u65f6\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u65e7\u5931\u8d25\uff0c\u5219 Python \u4f1a\u62a5\u9519\uff0c\u63d0\u793a\u627e\u4e0d\u5230 foobar \u8fd9\u4e2a\u6a21\u5757\u3002 \u6dfb\u52a0\u641c\u7d22\u8def\u5f84 \u5f53\u6211\u4eec\u4f7f\u7528import\u52a0\u8f7d\u81ea\u5df1\u7f16\u5199\u7684py\u4ee3\u7801\u65f6\uff0c\u5fc5\u987b\u653e\u5728python\u7684\u641c\u7d22\u8def\u5f84\u4e0b\u624d\u53ef\u4ee5import\u3002 \u6dfb\u52a0\u4e34\u65f6\u8def\u5f84\u2014\u2014 sys.path.append \u5728python\u4e2d\u5f15\u5165 sys \uff0c sys \u4e2d\u7684 path \u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5185\u5bb9\u5c31\u662f\u8def\u5f84\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06sys\u5f15\u5165\u540e\u67e5\u770b\u5c31\u53ef\u4ee5\u6e05\u695a\u7684\u77e5\u9053\u4e86\uff1a import sys print ( type ( sys . path )) sys . path <class 'list'> ['...\\\\Anaconda3\\\\python37.zip', '...\\\\Anaconda3\\\\DLLs', '...\\\\Anaconda3\\\\lib', '...\\\\Anaconda3', '...\\\\Anaconda3\\\\lib\\\\site-packages', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\xgboost-1.0.0_snapshot-py3.7.egg', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions'] \u65e2\u7136\u662flist\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f7f\u7528append\u53ef\u4ee5\u5411\u5217\u8868\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u8def\u5f84\u662f \"C:\\Users\\Android\\Desktop\" \uff1a import sys sys . path . append ( r \"C:\\Users\\Android\\Desktop\" ) \u4f46\u8fd9\u53ea\u662f\u4e34\u65f6\u6dfb\u52a0\u8def\u5f84\uff0c\u5982\u679c\u91cd\u542f\u7f16\u8bd1\u5668\uff0c\u6dfb\u52a0\u7684\u8def\u5f84\u5c31\u4f1a\u6d88\u5931\u3002 \u4fee\u6539\u73af\u5883\u53d8\u91cf \u5728Windows10\u4e2d\uff0c\u9009\u62e9 ->\u63a7\u5236\u9762\u677f\\\u7cfb\u7edf\u548c\u5b89\u5168\\\u7cfb\u7edf->\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e->\u73af\u5883\u53d8\u91cf \uff0c # \u627e\u5230path\u540e\u9009\u62e9\u7f16\u8f91\uff0c\u6dfb\u52a0\u65b0\u7684\u8def\u5f84\u3002 \u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u9002\u7528\u6240\u6709python\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u5e76\u672a\u5c06\u8981\u67e5\u627e\u7684\u8def\u5f84\u6dfb\u52a0\u5230python\u7684Path\u7cfb\u7edf\u73af\u5883\u4e2d\uff0c\u5728sys.path\u7684\u5217\u8868\u4e2d\u627e\u4e0d\u5230\u76f8\u5173\u8def\u5f84\u7684\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u5c06\u8def\u5f84\u6dfb\u52a0\u5230python\u7684\u641c\u7d22\u8def\u5f84\u4e2d\u3002 \u6dfb\u52a0\u6c38\u4e45\u641c\u7d22\u8def\u5f84\u2014\u2014\u589e\u52a0.pth\u6587\u4ef6 \u5728site-packages\u6587\u4ef6\u5939\u6dfb\u52a0path\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u641c\u7d22\u8def\u5f84\u7684\u6c38\u4e45\u6dfb\u52a0\u3002\u65b9\u6cd5\u5982\u4e0b\uff1a \u5148\u7f16\u8f91\u4e00\u4e2a\u6269\u5c55\u540d\u4e3a .pth \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5728\u8fd9\u4e2a\u6587\u672c\u6587\u4ef6\u91cc\u9762\u5199\u4e0a\u8981\u6dfb\u52a0\u7684path\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f8b\u5982\uff1a \u6587\u672c\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u662f\uff1atest.pth test.pth \u6587\u4ef6\u7684\u5185\u5bb9\u662f\uff1a C:\\Users\\Android\\Desktop \u63a5\u7740\u83b7\u53d6python\u7684site-packages\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff1a import site site . getsitepackages () ['G:\\\\Installed\\\\Anaconda3', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages'] \u7136\u540e\u5c06 test.pth \u6587\u4ef6\u653e\u8fdb G:\\Installed\\Anaconda3\\lib\\site-packages \u91cc\u9762\u5373\u53ef\u3002 \u6a21\u5757\u7684\u5bfc\u5165 \u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757(module)\u5bfc\u5165: \u4f8b\u5982\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u4f7f\u7528 sys \u6a21\u5757\uff0c\u90a3\u4e48\u9996\u5148\u8981\u5bfc\u5165\u8be5\u6a21\u5757\uff1a import sys \u5bfc\u5165 sys \u6a21\u5757\u540e\uff0c\u6211\u4eec\u5c31\u6709\u4e86 \u53d8\u91cf sys \u6307\u5411\u8be5\u6a21\u5757\uff0c\u5229\u7528 sys \u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee sys \u6a21\u5757\u7684\u6240\u6709\u529f\u80fd\u3002 \u4e5f\u5c31\u662f\u8bf4\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u3002 \u4e5f\u53ef\u4ee5\u4e00\u6b21\u6027\u5bfc\u5165\u591a\u4e2amodule\uff1a import os , sys , time \u901a\u8fc7 as \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u5728\u5bfc\u5165module\u7684\u65f6\u5019\uff0c\u7ed9module\u5b9a\u4e49\u522b\u540d\uff1a import sys as system \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u51fd\u6570\uff1a \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570 from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570 from somemodule import firstfunc , secondfunc , thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165 from somemodule import * \u4e00\u822c\u800c\u8a00\uff0c\u9664\u4e86\u5b9e\u9a8c\u3001\u6392\u67e5\uff0c\u4e0d\u63a8\u8350\u5bfc\u5165\u6a21\u5757\u5185\u7684\u6240\u6709\u516c\u5f00\u7b26\u53f7\uff08\u6ca1\u6709\u524d\u7f00 _ \u7684\u90a3\u4e9b\uff09\u3002\u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u4f1a\u4fee\u6539namespace\uff0c\u800c\u901a\u5e38\u4f60\u4e0d\u77e5\u9053\u6a21\u5757\u5b9a\u4e49\u4e86\u54ea\u4e9b\u7b26\u53f7\u3001\u662f\u5426\u4e0e\u5f53\u524d\u7684namespace\u6709\u91cd\u540d\u7684\u7b26\u53f7\u3002\u4e00\u65e6\u6709\u91cd\u540d\uff0c\u90a3\u4e48\uff0c\u5c31\u4f1a\u8986\u76d6\u6389\u5f53\u524dnamespace\u7684\u503c\u3002\u4ece\u800c\u9020\u6210\u96be\u4ee5\u6392\u67e5\u7684\u9519\u8bef \u6a21\u5757\u91cd\u8f7d \u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c \u6bcf\u4e2a\u6a21\u5757\u5728\u6bcf\u4e2a\u89e3\u91ca\u5668\u4f1a\u8bdd\u4e2d\u53ea\u5bfc\u5165\u4e00\u904d\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4fee\u6539\u4e86\u7684\u6a21\u5757\uff0c\u9700\u8981\u91cd\u542f\u89e3\u91ca\u5668\uff1b\u5982\u679c\u60f3\u4ea4\u4e92\u5f0f\u5730\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff1a \u6ce8\u610f \u53ea\u80fd\u91cd\u8f7d\u6a21\u5757\uff0c\u4e0d\u80fd\u5355\u72ec\u91cd\u8f7d\u6a21\u5757\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u3002 Python 2.x\uff1a reload ( modulename ) Python 2.x \u81f3 Python3.3\uff1a import imp imp . reload ( modulename ) Python3.4+\uff1a import importlib importlib . reload ( modulename ) \u53e6\u5916\uff0cspyder \u7684UMR(user module reloader)\u63d0\u4f9b\u4e86\u81ea\u52a8\u91cd\u8f7d\u6a21\u5757\u7684\u529f\u80fd\u3002 __name__ \u548c Python \u4e2d\u7684\u5176\u5b83\u5bf9\u8c61\u4e00\u6837\uff0cPython \u4e5f\u4e3a\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5f62\u5982 __foo__ \u7684\u53d8\u91cf\u3002\u5bf9\u4e8e\u6a21\u5757\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u5b83\u7684\u540d\u5b57 __name__ \u4e86\u3002\u6bcf\u5f53 Python \u6267\u884c\u811a\u672c\uff0c\u5b83\u5c31\u4f1a\u4e3a\u8be5\u811a\u672c\u8d4b\u4e88\u4e00\u4e2a\u540d\u5b57\uff1a \u5bf9\u4e8e\u300c\u4e3b\u7a0b\u5e8f\u300d\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a \"__main__\" \u5bf9\u4e8e\u88ab import \u8fdb\u4e3b\u7a0b\u5e8f\u7684\u6a21\u5757\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a\u811a\u672c\u7684\u6587\u4ef6\u540d\uff08base filename\uff09 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u5f62\u5f0f\uff0c\u5728\u6a21\u5757\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e9b\u6d4b\u8bd5\u4ee3\u7801\uff1a if __name__ == \"__main__\" : ... \u5f53\u811a\u672c\u88ab\u76f4\u63a5\u8fd0\u884c\u65f6\uff0c\u6d4b\u8bd5\u4ee3\u7801\u5c31\u4f1a\u88ab\u8fd0\u884c\uff1b\u5f53\u811a\u672c\u4f5c\u4e3a\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u4f1a\u88ab\u8fd0\u884c\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\uff1a \u53c2\u8003\uff1a Python \u4e2d\u7684\u9ed1\u6697\u89d2\u843d\uff08\u4e09\uff09\uff1a\u6a21\u5757\u4e0e\u5305 #!/usr/bin/env python3 # -*- coding: utf-8 -*- ' a test module ' __author__ = 'Michael Liao' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () Hello, world! \u4f5c\u7528\u57df \u5728\u4e00\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5b9a\u4e49\u5f88\u591a\u51fd\u6570\u548c\u53d8\u91cf\uff0c\u4f46\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u7ed9\u522b\u4eba\u4f7f\u7528\uff0c\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u4ec5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u4f7f\u7528\uff08\u9690\u85cf\u4ee3\u7801\u5185\u90e8\u903b\u8f91\uff09\uff0c\u5728Python\u4e2d\uff0c\u662f\u901a\u8fc7 _ \u524d\u7f00\u6765\u5b9e\u73b0\u7684\u3002 \u6b63\u5e38\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u662f\u516c\u5f00\u7684\uff08public\uff09\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982\uff1a abc \uff0c x123 \uff0c PI \u7b49\uff1b \u7c7b\u4f3c __xxx__ \u8fd9\u6837\u7684\u53d8\u91cf\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u4f46\u662f\u6709\u7279\u6b8a\u7528\u9014\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 __author__ \uff0c __name__ \u5c31\u662f\u7279\u6b8a\u53d8\u91cf\uff0c hello \u6a21\u5757\u5b9a\u4e49\u7684\u6587\u6863\u6ce8\u91ca\u4e5f\u53ef\u4ee5\u7528\u7279\u6b8a\u53d8\u91cf __doc__ \u8bbf\u95ee\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u53d8\u91cf\u4e00\u822c\u4e0d\u8981\u7528\u8fd9\u79cd\u53d8\u91cf\u540d\uff1b \u7c7b\u4f3c _xxx \u548c __xxx \u8fd9\u6837\u7684\u51fd\u6570\u6216\u53d8\u91cf\u5c31\u662f\u975e\u516c\u5f00\u7684\uff08private\uff09\uff0c\u4e0d\u5e94\u8be5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982 _abc \uff0c __abc \u7b49\uff1b \u4e4b\u6240\u4ee5\u6211\u4eec\u8bf4\uff0cprivate\u51fd\u6570\u548c\u53d8\u91cf\u201c\u4e0d\u5e94\u8be5\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u201c\u4e0d\u80fd\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u662f\u56e0\u4e3aPython\u5e76\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u5168\u9650\u5236\u8bbf\u95eeprivate\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u4ece\u7f16\u7a0b\u4e60\u60ef\u4e0a\u4e0d\u5e94\u8be5\u5f15\u7528private\u51fd\u6570\u6216\u53d8\u91cf\u3002 \u201c\u7f16\u8bd1\u7684\u201d Python \u6587\u4ef6\u2014\u2014 pyc \u6587\u4ef6 \u548c LaTeX \u4e2d\u9047\u5230\u7684\u95ee\u9898\u4e00\u6837\uff1a\u88c5\u8f7d\u5927\u91cf\u6587\u672c\u6587\u4ef6\uff08 .py \u6587\u4ef6\uff09\u662f\u5f88\u6162\u7684\u3002\u56e0\u6b64 Python \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c LaTeX \u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5c06\u6a21\u5757\u7f16\u8bd1\u6210\u5bb9\u6613\u88c5\u8f7d\u7684\u6587\u4ef6\uff0c\u5e76\u5728 __pycache__ \u76ee\u5f55\u4e0b\u4ee5 module.*version*.pyc \u540d\u5b57\u7f13\u5b58\u8fd9\u4e9b\u6587\u4ef6\u3002\uff08\u76f8\u5f53\u4e8e LaTeX \u4e2d\u7684 dump \u683c\u5f0f\u6587\u4ef6 .fmt \uff09\u3002 \u8fd9\u91cc\u7684\u7248\u672c\u7f16\u5236\u4e86\u7f16\u8bd1\u540e\u6587\u4ef6\u7684\u683c\u5f0f\u3002\u5b83\u901a\u5e38\u4f1a\u5305\u542b Python \u7684\u7248\u672c\u53f7\u3002\u4f8b\u5982\uff0c\u5728 CPython 3.3 \u7248\u4e2d\uff0cspam.py \u7f16\u8bd1\u540e\u7684\u7248\u672c\u5c06\u7f13\u5b58\u4e3a __pycache__/spam.cpython-33.pyc \u3002\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u5141\u8bb8\u7531\u4e0d\u540c\u53d1\u5e03\u548c\u4e0d\u540c\u7248\u672c\u7684 Python \u7f16\u8bd1\u7684\u6a21\u5757\u540c\u65f6\u5b58\u5728\u3002 \u5f53 Python \u7f16\u8bd1\u597d\u6a21\u5757\u4e4b\u540e\uff0c\u4e0b\u6b21\u8f7d\u5165\u65f6\uff0cPython \u5c31\u4f1a\u8bfb\u53d6\u76f8\u5e94\u7684 .pyc \u6587\u4ef6\uff0c\u800c\u4e0d\u662f .py \u6587\u4ef6\u3002\u800c\u88c5\u8f7d .pyc \u6587\u4ef6\u4f1a\u6bd4\u88c5\u8f7d .py \u6587\u4ef6\u66f4\u5feb\u3002 Python \u4f1a\u68c0\u67e5\u6e90\u6587\u4ef6\u4e0e\u7f16\u8bd1\u7248\u7684\u4fee\u6539\u65e5\u671f\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u8fc7\u671f\u5e76\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3002 \u8fd9\u662f\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u8fc7\u7a0b\u3002\u540c\u65f6\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u5e93\u53ef\u4ee5\u5728\u4e0d\u540c\u67b6\u6784\u7684\u7cfb\u7edf\u4e4b\u95f4\u5171\u4eab\u3002 Python \u4e0d\u68c0\u67e5\u5728\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\u7684\u7f13\u5b58\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6c38\u8fdc\u91cd\u65b0\u7f16\u8bd1\u800c\u4e14\u4e0d\u4f1a\u5b58\u50a8\u76f4\u63a5\u4ece\u547d\u4ee4\u884c\u52a0\u8f7d\u7684\u6a21\u5757\u3002\u5176\u6b21\uff0c\u5982\u679c\u6ca1\u6709\u6e90\u6a21\u5757\u5b83\u4e0d\u4f1a\u68c0\u67e5\u7f13\u5b58\u3002\u82e5\u8981\u652f\u6301\u6ca1\u6709\u6e90\u6587\u4ef6\uff08\u53ea\u6709\u7f16\u8bd1\u7248\uff09\u7684\u53d1\u5e03\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u5fc5\u987b\u5728\u6e90\u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u5fc5\u987b\u6ca1\u6709\u6e90\u6587\u4ef6\u7684\u6a21\u5757\u3002 \u90e8\u5206\u9ad8\u7ea7\u6280\u5de7: \u4e3a\u4e86\u51cf\u5c11\u4e00\u4e2a\u7f16\u8bd1\u6a21\u5757\u7684\u5927\u5c0f\uff0c\u4f60\u53ef\u4ee5\u5728 Python \u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -O \u6216\u8005 -OO \u3002 -O \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\uff0c -OO \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\u548c doc \u5b57\u7b26\u4e32\u3002 \u56e0\u4e3a\u67d0\u4e9b\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u53d8\u91cf\u7684\u53ef\u7528\u6027\uff0c\u4f60\u5e94\u8be5\u53ea\u5728\u786e\u5b9a\u65e0\u8bef\u7684\u573a\u5408\u4f7f\u7528\u8fd9\u4e00\u9009\u9879\u3002\u201c\u4f18\u5316\u7684\u201d \u6a21\u5757\u6709\u4e00\u4e2a .pyo \u540e\u7f00\u800c\u4e0d\u662f .pyc \u540e\u7f00\u3002\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u6539\u53d8\u4f18\u5316\u7684\u6548\u679c\u3002 \u6765\u81ea .pyc \u6587\u4ef6\u6216 .pyo \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u6bd4\u6765\u81ea .py \u6587\u4ef6\u7684\u8fd0\u884c\u66f4\u5feb\uff1b .pyc \u6216 .pyo \u6587\u4ef6\u53ea\u662f\u5728\u5b83\u4eec\u52a0\u8f7d\u7684\u65f6\u5019\u66f4\u5feb\u4e00\u4e9b\u3002 compileall \u6a21\u5757\u53ef\u4ee5\u4e3a\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6a21\u5757\u521b\u5efa .pyc \u6587\u4ef6\uff08\u6216\u8005\u4f7f\u7528 -O \u53c2\u6570\u521b\u5efa .pyo \u6587\u4ef6\uff09\u3002 \u5728 PEP 3147 \u4e2d\u6709\u5f88\u591a\u5173\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u7684\u7ec6\u8282\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u4e00\u4e2a\u51b3\u7b56\u6d41\u7a0b\u3002","title":"4.3.\u6a21\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_1","text":"\u5982\u679c\u4f60\u60f3\u8981\u7f16\u5199\u4e00\u4e9b\u66f4\u5927\u7684\u7a0b\u5e8f\uff0c\u80af\u5b9a\u4e0d\u60f3\u5b9a\u4e49\u91cd\u590d\u7684\u51fd\u6570\u3001\u7c7b\uff0c\u60f3\u8ba9\u4ee3\u7801\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002\u968f\u7740\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u5206\u5272\u6210\u51e0\u4e2a\u66f4\u6613\u4e8e\u7ef4\u62a4\u7684\u6587\u4ef6\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u9700\u8981\uff0cPython \u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u5b9a\u4e49\uff0c\u5728\u811a\u672c\u6216\u8005\u89e3\u91ca\u5668\u7684\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u3002\u8fd9\u6837\u7684\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757\u3002\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u6a21\u5757\u5c31\u662f\u4e00\u4e2a.py\u6587\u4ef6\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_2","text":"Python \u600e\u6837\u77e5\u9053\u4ece\u4f55\u5904\u627e\u5230\u6a21\u5757\u6587\u4ef6\uff1f \u5982\u679c\u4f60\u719f\u6089\u547d\u4ee4\u884c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5bf9\u4f60\u6765\u8bf4\u5c31\u4e0d\u96be\u7406\u89e3\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u7684\u4efb\u4f55\u547d\u4ee4\uff0c\u5b9e\u9645\u4e0a\u80cc\u540e\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff08\u6bd4\u5982 cmd, bash\uff09\u4f1a\u4ece\u4e00\u4e2a\u5168\u5c40\u7684\u73af\u5883\u53d8\u91cf PATH \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u6709\u5e8f\u7684\u5217\u8868\u3002\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u8def\u5f84\uff0c\u800c\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff0c\u4f1a\u4f9d\u6b21\u5728\u8fd9\u4e9b\u8def\u5f84\u91cc\uff0c\u641c\u7d22\u9700\u8981\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 Python \u641c\u5bfb\u6a21\u5757\u6587\u4ef6\uff0c\u4e5f\u9075\u5faa\u4e86\u7c7b\u4f3c\u7684\u601d\u8def\u3002\u6bd4\u5982\uff0c\u7528\u6237\u5728 Python \u4e2d\u5c1d\u8bd5\u5bfc\u5165 import foobar\uff0c\u90a3\u4e48 \u9996\u5148\uff0cPython \u4f1a\u5728\u5185\u5efa\u6a21\u5757\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\uff08\u5f53\u524d\u811a\u672c\u6240\u5728\u8def\u5f84\uff0c\u6216\u8005\u6267\u884c Python \u89e3\u91ca\u5668\u7684\u8def\u5f84\uff09\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u73af\u5883\u53d8\u91cf PYTHONPATH \u4e2d\u6307\u793a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4f9d\u65e7\u672a\u80fd\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5b89\u88c5\u65f6\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u65e7\u5931\u8d25\uff0c\u5219 Python \u4f1a\u62a5\u9519\uff0c\u63d0\u793a\u627e\u4e0d\u5230 foobar \u8fd9\u4e2a\u6a21\u5757\u3002","title":"\u6a21\u5757\u641c\u7d22\u8def\u5f84"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_3","text":"\u5f53\u6211\u4eec\u4f7f\u7528import\u52a0\u8f7d\u81ea\u5df1\u7f16\u5199\u7684py\u4ee3\u7801\u65f6\uff0c\u5fc5\u987b\u653e\u5728python\u7684\u641c\u7d22\u8def\u5f84\u4e0b\u624d\u53ef\u4ee5import\u3002","title":"\u6dfb\u52a0\u641c\u7d22\u8def\u5f84"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#syspathappend","text":"\u5728python\u4e2d\u5f15\u5165 sys \uff0c sys \u4e2d\u7684 path \u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5185\u5bb9\u5c31\u662f\u8def\u5f84\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06sys\u5f15\u5165\u540e\u67e5\u770b\u5c31\u53ef\u4ee5\u6e05\u695a\u7684\u77e5\u9053\u4e86\uff1a import sys print ( type ( sys . path )) sys . path <class 'list'> ['...\\\\Anaconda3\\\\python37.zip', '...\\\\Anaconda3\\\\DLLs', '...\\\\Anaconda3\\\\lib', '...\\\\Anaconda3', '...\\\\Anaconda3\\\\lib\\\\site-packages', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\xgboost-1.0.0_snapshot-py3.7.egg', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions'] \u65e2\u7136\u662flist\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f7f\u7528append\u53ef\u4ee5\u5411\u5217\u8868\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u8def\u5f84\u662f \"C:\\Users\\Android\\Desktop\" \uff1a import sys sys . path . append ( r \"C:\\Users\\Android\\Desktop\" ) \u4f46\u8fd9\u53ea\u662f\u4e34\u65f6\u6dfb\u52a0\u8def\u5f84\uff0c\u5982\u679c\u91cd\u542f\u7f16\u8bd1\u5668\uff0c\u6dfb\u52a0\u7684\u8def\u5f84\u5c31\u4f1a\u6d88\u5931\u3002","title":"\u6dfb\u52a0\u4e34\u65f6\u8def\u5f84\u2014\u2014sys.path.append"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_4","text":"\u5728Windows10\u4e2d\uff0c\u9009\u62e9 ->\u63a7\u5236\u9762\u677f\\\u7cfb\u7edf\u548c\u5b89\u5168\\\u7cfb\u7edf->\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e->\u73af\u5883\u53d8\u91cf \uff0c # \u627e\u5230path\u540e\u9009\u62e9\u7f16\u8f91\uff0c\u6dfb\u52a0\u65b0\u7684\u8def\u5f84\u3002 \u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u9002\u7528\u6240\u6709python\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u5e76\u672a\u5c06\u8981\u67e5\u627e\u7684\u8def\u5f84\u6dfb\u52a0\u5230python\u7684Path\u7cfb\u7edf\u73af\u5883\u4e2d\uff0c\u5728sys.path\u7684\u5217\u8868\u4e2d\u627e\u4e0d\u5230\u76f8\u5173\u8def\u5f84\u7684\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u5c06\u8def\u5f84\u6dfb\u52a0\u5230python\u7684\u641c\u7d22\u8def\u5f84\u4e2d\u3002","title":"\u4fee\u6539\u73af\u5883\u53d8\u91cf"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#pth","text":"\u5728site-packages\u6587\u4ef6\u5939\u6dfb\u52a0path\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u641c\u7d22\u8def\u5f84\u7684\u6c38\u4e45\u6dfb\u52a0\u3002\u65b9\u6cd5\u5982\u4e0b\uff1a \u5148\u7f16\u8f91\u4e00\u4e2a\u6269\u5c55\u540d\u4e3a .pth \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5728\u8fd9\u4e2a\u6587\u672c\u6587\u4ef6\u91cc\u9762\u5199\u4e0a\u8981\u6dfb\u52a0\u7684path\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f8b\u5982\uff1a \u6587\u672c\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u662f\uff1atest.pth test.pth \u6587\u4ef6\u7684\u5185\u5bb9\u662f\uff1a C:\\Users\\Android\\Desktop \u63a5\u7740\u83b7\u53d6python\u7684site-packages\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff1a import site site . getsitepackages () ['G:\\\\Installed\\\\Anaconda3', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages'] \u7136\u540e\u5c06 test.pth \u6587\u4ef6\u653e\u8fdb G:\\Installed\\Anaconda3\\lib\\site-packages \u91cc\u9762\u5373\u53ef\u3002","title":"\u6dfb\u52a0\u6c38\u4e45\u641c\u7d22\u8def\u5f84\u2014\u2014\u589e\u52a0.pth\u6587\u4ef6"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_5","text":"\u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757(module)\u5bfc\u5165: \u4f8b\u5982\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u4f7f\u7528 sys \u6a21\u5757\uff0c\u90a3\u4e48\u9996\u5148\u8981\u5bfc\u5165\u8be5\u6a21\u5757\uff1a import sys \u5bfc\u5165 sys \u6a21\u5757\u540e\uff0c\u6211\u4eec\u5c31\u6709\u4e86 \u53d8\u91cf sys \u6307\u5411\u8be5\u6a21\u5757\uff0c\u5229\u7528 sys \u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee sys \u6a21\u5757\u7684\u6240\u6709\u529f\u80fd\u3002 \u4e5f\u5c31\u662f\u8bf4\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u3002 \u4e5f\u53ef\u4ee5\u4e00\u6b21\u6027\u5bfc\u5165\u591a\u4e2amodule\uff1a import os , sys , time \u901a\u8fc7 as \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u5728\u5bfc\u5165module\u7684\u65f6\u5019\uff0c\u7ed9module\u5b9a\u4e49\u522b\u540d\uff1a import sys as system \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u51fd\u6570\uff1a \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570 from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570 from somemodule import firstfunc , secondfunc , thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165 from somemodule import * \u4e00\u822c\u800c\u8a00\uff0c\u9664\u4e86\u5b9e\u9a8c\u3001\u6392\u67e5\uff0c\u4e0d\u63a8\u8350\u5bfc\u5165\u6a21\u5757\u5185\u7684\u6240\u6709\u516c\u5f00\u7b26\u53f7\uff08\u6ca1\u6709\u524d\u7f00 _ \u7684\u90a3\u4e9b\uff09\u3002\u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u4f1a\u4fee\u6539namespace\uff0c\u800c\u901a\u5e38\u4f60\u4e0d\u77e5\u9053\u6a21\u5757\u5b9a\u4e49\u4e86\u54ea\u4e9b\u7b26\u53f7\u3001\u662f\u5426\u4e0e\u5f53\u524d\u7684namespace\u6709\u91cd\u540d\u7684\u7b26\u53f7\u3002\u4e00\u65e6\u6709\u91cd\u540d\uff0c\u90a3\u4e48\uff0c\u5c31\u4f1a\u8986\u76d6\u6389\u5f53\u524dnamespace\u7684\u503c\u3002\u4ece\u800c\u9020\u6210\u96be\u4ee5\u6392\u67e5\u7684\u9519\u8bef","title":"\u6a21\u5757\u7684\u5bfc\u5165"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_6","text":"\u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c \u6bcf\u4e2a\u6a21\u5757\u5728\u6bcf\u4e2a\u89e3\u91ca\u5668\u4f1a\u8bdd\u4e2d\u53ea\u5bfc\u5165\u4e00\u904d\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4fee\u6539\u4e86\u7684\u6a21\u5757\uff0c\u9700\u8981\u91cd\u542f\u89e3\u91ca\u5668\uff1b\u5982\u679c\u60f3\u4ea4\u4e92\u5f0f\u5730\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff1a \u6ce8\u610f \u53ea\u80fd\u91cd\u8f7d\u6a21\u5757\uff0c\u4e0d\u80fd\u5355\u72ec\u91cd\u8f7d\u6a21\u5757\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u3002 Python 2.x\uff1a reload ( modulename ) Python 2.x \u81f3 Python3.3\uff1a import imp imp . reload ( modulename ) Python3.4+\uff1a import importlib importlib . reload ( modulename ) \u53e6\u5916\uff0cspyder \u7684UMR(user module reloader)\u63d0\u4f9b\u4e86\u81ea\u52a8\u91cd\u8f7d\u6a21\u5757\u7684\u529f\u80fd\u3002","title":"\u6a21\u5757\u91cd\u8f7d"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#__name__","text":"\u548c Python \u4e2d\u7684\u5176\u5b83\u5bf9\u8c61\u4e00\u6837\uff0cPython \u4e5f\u4e3a\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5f62\u5982 __foo__ \u7684\u53d8\u91cf\u3002\u5bf9\u4e8e\u6a21\u5757\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u5b83\u7684\u540d\u5b57 __name__ \u4e86\u3002\u6bcf\u5f53 Python \u6267\u884c\u811a\u672c\uff0c\u5b83\u5c31\u4f1a\u4e3a\u8be5\u811a\u672c\u8d4b\u4e88\u4e00\u4e2a\u540d\u5b57\uff1a \u5bf9\u4e8e\u300c\u4e3b\u7a0b\u5e8f\u300d\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a \"__main__\" \u5bf9\u4e8e\u88ab import \u8fdb\u4e3b\u7a0b\u5e8f\u7684\u6a21\u5757\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a\u811a\u672c\u7684\u6587\u4ef6\u540d\uff08base filename\uff09 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u5f62\u5f0f\uff0c\u5728\u6a21\u5757\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e9b\u6d4b\u8bd5\u4ee3\u7801\uff1a if __name__ == \"__main__\" : ... \u5f53\u811a\u672c\u88ab\u76f4\u63a5\u8fd0\u884c\u65f6\uff0c\u6d4b\u8bd5\u4ee3\u7801\u5c31\u4f1a\u88ab\u8fd0\u884c\uff1b\u5f53\u811a\u672c\u4f5c\u4e3a\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u4f1a\u88ab\u8fd0\u884c\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\uff1a \u53c2\u8003\uff1a Python \u4e2d\u7684\u9ed1\u6697\u89d2\u843d\uff08\u4e09\uff09\uff1a\u6a21\u5757\u4e0e\u5305 #!/usr/bin/env python3 # -*- coding: utf-8 -*- ' a test module ' __author__ = 'Michael Liao' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () Hello, world!","title":"__name__"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#_7","text":"\u5728\u4e00\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5b9a\u4e49\u5f88\u591a\u51fd\u6570\u548c\u53d8\u91cf\uff0c\u4f46\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u7ed9\u522b\u4eba\u4f7f\u7528\uff0c\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u4ec5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u4f7f\u7528\uff08\u9690\u85cf\u4ee3\u7801\u5185\u90e8\u903b\u8f91\uff09\uff0c\u5728Python\u4e2d\uff0c\u662f\u901a\u8fc7 _ \u524d\u7f00\u6765\u5b9e\u73b0\u7684\u3002 \u6b63\u5e38\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u662f\u516c\u5f00\u7684\uff08public\uff09\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982\uff1a abc \uff0c x123 \uff0c PI \u7b49\uff1b \u7c7b\u4f3c __xxx__ \u8fd9\u6837\u7684\u53d8\u91cf\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u4f46\u662f\u6709\u7279\u6b8a\u7528\u9014\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 __author__ \uff0c __name__ \u5c31\u662f\u7279\u6b8a\u53d8\u91cf\uff0c hello \u6a21\u5757\u5b9a\u4e49\u7684\u6587\u6863\u6ce8\u91ca\u4e5f\u53ef\u4ee5\u7528\u7279\u6b8a\u53d8\u91cf __doc__ \u8bbf\u95ee\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u53d8\u91cf\u4e00\u822c\u4e0d\u8981\u7528\u8fd9\u79cd\u53d8\u91cf\u540d\uff1b \u7c7b\u4f3c _xxx \u548c __xxx \u8fd9\u6837\u7684\u51fd\u6570\u6216\u53d8\u91cf\u5c31\u662f\u975e\u516c\u5f00\u7684\uff08private\uff09\uff0c\u4e0d\u5e94\u8be5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982 _abc \uff0c __abc \u7b49\uff1b \u4e4b\u6240\u4ee5\u6211\u4eec\u8bf4\uff0cprivate\u51fd\u6570\u548c\u53d8\u91cf\u201c\u4e0d\u5e94\u8be5\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u201c\u4e0d\u80fd\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u662f\u56e0\u4e3aPython\u5e76\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u5168\u9650\u5236\u8bbf\u95eeprivate\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u4ece\u7f16\u7a0b\u4e60\u60ef\u4e0a\u4e0d\u5e94\u8be5\u5f15\u7528private\u51fd\u6570\u6216\u53d8\u91cf\u3002","title":"\u4f5c\u7528\u57df"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E6%A8%A1%E5%9D%97.html#python-pyc","text":"\u548c LaTeX \u4e2d\u9047\u5230\u7684\u95ee\u9898\u4e00\u6837\uff1a\u88c5\u8f7d\u5927\u91cf\u6587\u672c\u6587\u4ef6\uff08 .py \u6587\u4ef6\uff09\u662f\u5f88\u6162\u7684\u3002\u56e0\u6b64 Python \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c LaTeX \u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5c06\u6a21\u5757\u7f16\u8bd1\u6210\u5bb9\u6613\u88c5\u8f7d\u7684\u6587\u4ef6\uff0c\u5e76\u5728 __pycache__ \u76ee\u5f55\u4e0b\u4ee5 module.*version*.pyc \u540d\u5b57\u7f13\u5b58\u8fd9\u4e9b\u6587\u4ef6\u3002\uff08\u76f8\u5f53\u4e8e LaTeX \u4e2d\u7684 dump \u683c\u5f0f\u6587\u4ef6 .fmt \uff09\u3002 \u8fd9\u91cc\u7684\u7248\u672c\u7f16\u5236\u4e86\u7f16\u8bd1\u540e\u6587\u4ef6\u7684\u683c\u5f0f\u3002\u5b83\u901a\u5e38\u4f1a\u5305\u542b Python \u7684\u7248\u672c\u53f7\u3002\u4f8b\u5982\uff0c\u5728 CPython 3.3 \u7248\u4e2d\uff0cspam.py \u7f16\u8bd1\u540e\u7684\u7248\u672c\u5c06\u7f13\u5b58\u4e3a __pycache__/spam.cpython-33.pyc \u3002\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u5141\u8bb8\u7531\u4e0d\u540c\u53d1\u5e03\u548c\u4e0d\u540c\u7248\u672c\u7684 Python \u7f16\u8bd1\u7684\u6a21\u5757\u540c\u65f6\u5b58\u5728\u3002 \u5f53 Python \u7f16\u8bd1\u597d\u6a21\u5757\u4e4b\u540e\uff0c\u4e0b\u6b21\u8f7d\u5165\u65f6\uff0cPython \u5c31\u4f1a\u8bfb\u53d6\u76f8\u5e94\u7684 .pyc \u6587\u4ef6\uff0c\u800c\u4e0d\u662f .py \u6587\u4ef6\u3002\u800c\u88c5\u8f7d .pyc \u6587\u4ef6\u4f1a\u6bd4\u88c5\u8f7d .py \u6587\u4ef6\u66f4\u5feb\u3002 Python \u4f1a\u68c0\u67e5\u6e90\u6587\u4ef6\u4e0e\u7f16\u8bd1\u7248\u7684\u4fee\u6539\u65e5\u671f\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u8fc7\u671f\u5e76\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3002 \u8fd9\u662f\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u8fc7\u7a0b\u3002\u540c\u65f6\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u5e93\u53ef\u4ee5\u5728\u4e0d\u540c\u67b6\u6784\u7684\u7cfb\u7edf\u4e4b\u95f4\u5171\u4eab\u3002 Python \u4e0d\u68c0\u67e5\u5728\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\u7684\u7f13\u5b58\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6c38\u8fdc\u91cd\u65b0\u7f16\u8bd1\u800c\u4e14\u4e0d\u4f1a\u5b58\u50a8\u76f4\u63a5\u4ece\u547d\u4ee4\u884c\u52a0\u8f7d\u7684\u6a21\u5757\u3002\u5176\u6b21\uff0c\u5982\u679c\u6ca1\u6709\u6e90\u6a21\u5757\u5b83\u4e0d\u4f1a\u68c0\u67e5\u7f13\u5b58\u3002\u82e5\u8981\u652f\u6301\u6ca1\u6709\u6e90\u6587\u4ef6\uff08\u53ea\u6709\u7f16\u8bd1\u7248\uff09\u7684\u53d1\u5e03\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u5fc5\u987b\u5728\u6e90\u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u5fc5\u987b\u6ca1\u6709\u6e90\u6587\u4ef6\u7684\u6a21\u5757\u3002 \u90e8\u5206\u9ad8\u7ea7\u6280\u5de7: \u4e3a\u4e86\u51cf\u5c11\u4e00\u4e2a\u7f16\u8bd1\u6a21\u5757\u7684\u5927\u5c0f\uff0c\u4f60\u53ef\u4ee5\u5728 Python \u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -O \u6216\u8005 -OO \u3002 -O \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\uff0c -OO \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\u548c doc \u5b57\u7b26\u4e32\u3002 \u56e0\u4e3a\u67d0\u4e9b\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u53d8\u91cf\u7684\u53ef\u7528\u6027\uff0c\u4f60\u5e94\u8be5\u53ea\u5728\u786e\u5b9a\u65e0\u8bef\u7684\u573a\u5408\u4f7f\u7528\u8fd9\u4e00\u9009\u9879\u3002\u201c\u4f18\u5316\u7684\u201d \u6a21\u5757\u6709\u4e00\u4e2a .pyo \u540e\u7f00\u800c\u4e0d\u662f .pyc \u540e\u7f00\u3002\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u6539\u53d8\u4f18\u5316\u7684\u6548\u679c\u3002 \u6765\u81ea .pyc \u6587\u4ef6\u6216 .pyo \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u6bd4\u6765\u81ea .py \u6587\u4ef6\u7684\u8fd0\u884c\u66f4\u5feb\uff1b .pyc \u6216 .pyo \u6587\u4ef6\u53ea\u662f\u5728\u5b83\u4eec\u52a0\u8f7d\u7684\u65f6\u5019\u66f4\u5feb\u4e00\u4e9b\u3002 compileall \u6a21\u5757\u53ef\u4ee5\u4e3a\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6a21\u5757\u521b\u5efa .pyc \u6587\u4ef6\uff08\u6216\u8005\u4f7f\u7528 -O \u53c2\u6570\u521b\u5efa .pyo \u6587\u4ef6\uff09\u3002 \u5728 PEP 3147 \u4e2d\u6709\u5f88\u591a\u5173\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u7684\u7ec6\u8282\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u4e00\u4e2a\u51b3\u7b56\u6d41\u7a0b\u3002","title":"\u201c\u7f16\u8bd1\u7684\u201d Python \u6587\u4ef6\u2014\u2014pyc \u6587\u4ef6"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html","text":"\u6784\u9020\u548c\u521d\u59cb\u5316 \u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u9b54\u672f\u65b9\u6cd5\uff0c __init__ \u3002\u901a\u8fc7\u6b64\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u7684\u521d\u59cb\u64cd\u4f5c\u3002\u4f46\u5f88\u591a\u535a\u5ba2\u548c\u4e2a\u522b\u4e66\u7c4d\u4e2d\u90fd\u628a __init__ \u5f53\u4f5c\u7c7b\u4f3c\u4e8eC++\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5176\u5b9e\u662f\u9519\u8bef\u7684\u3002 __init__ \u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb\u505a __new__ \u7684\u65b9\u6cd5\uff0c\u6765\u6784\u9020\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u7136\u540e\u7ed9\u5728\u5f00\u59cb\u521b\u5efa\u65f6\u5019\u7684\u521d\u59cb\u5316\u51fd\u6570\u6765\u4f20\u9012\u53c2\u6570\u3002\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7684\u53e6\u4e00\u7aef\uff0c\u4e5f\u6709\u4e00\u4e2a __del__ \u65b9\u6cd5\u3002 __new__(cls, [...) __new__ \u662f\u5728\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u6240\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u3002\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8fd9\u4e2a\u7c7b\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u662f\u7528\u6765\u76f4\u63a5\u4f20\u9012\u7ed9 __init__ \u65b9\u6cd5\u3002 __new__ \u65b9\u6cd5\u76f8\u5f53\u4e0d\u5e38\u7528\uff0c\u4e5f\u4e0d\u662f\u5f88\u6709\u7528\u5904\uff0c\u4f46\u662f\u5b83\u6709\u81ea\u5df1\u7684\u7279\u6027\uff0c\u7279\u522b\u662f\u5f53\u7ee7\u627f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u7c7b\u578b\uff08\u6bd4\u5982\u4e00\u4e2atuple\u6216\u8005string\uff09\uff1a class inch ( float ): \"Convert from inch to meter\" def __new__ ( cls , arg = 0.0 ): return float . __new__ ( cls , arg * 0.0254 ) print ( inch ( 12 )) 0.30479999999999996 \u8fd9\u4e2a\u7c7b\u53ef\u80fd\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u4f46\u662f\u5b83\u663e\u793a\u4e86\u5982\u4f55\u6269\u5c55\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u66ff\u4ee3 __init__ \u800c\u4e0d\u662f __new__ \uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u8d77\u4f5c\u7528\uff1a class inch ( float ): \"THIS DOESN'T WORK!!!\" def __init__ ( self , arg = 0.0 ): float . __init__ ( self , arg * 0.0254 ) try : print ( inch ( 12 )) except TypeError as e : print ( e ) object.__init__() takes exactly one argument (the instance to initialize) \u91cd\u5199\u521d\u59cb\u503c\u7684\u7248\u672c\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u6d6e\u70b9\u7c7b\u578b\u7684\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002\u53e6\u4e00\u4e2a __new__ \u7684\u4f8b\u5b50\u662f\u5355\u4f8b\u6a21\u5f0f\u3002 class A : pass new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA9651AC8> <__main__.A object at 0x0000021AA9651B00> class A ( object ): _singleton = None def __new__ ( cls , * args , ** kwargs ): if not cls . _singleton : cls . _singleton = object . __new__ ( cls , * args , ** kwargs ) return cls . _singleton new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA86752E8> <__main__.A object at 0x0000021AA86752E8> \u5173\u4e8e __new__ \u7684\u4e00\u4e9b\u89c4\u5219\uff1a __new__ \u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4f46\u5728\u91cd\u5b9a\u4e49 __new__ \u65f6\uff0c\u4e0d\u9700\u8981\u52a0\u4e0a @staticmethod \uff0c\u56e0\u4e3a\u5b83\u7684\u540d\u5b57\u5df2\u7ecf\u6697\u793a\u4e86\u8fd9\u4e00\u70b9\u3002 __new__ \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u7c7b\uff1b\u5176\u4f59\u53c2\u6570\u662f\u6784\u9020\u51fd\u6570\u8c03\u7528\u6240\u770b\u5230\u7684\u53c2\u6570\u3002 __new__ \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u8fd4\u56deNone\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528 __init__ \u65b9\u6cd5\u3002 __init__(self, [\u2026) \u6b64\u65b9\u6cd5\u4e3a\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u3002\u5f53\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5c06\u4f1a\u4f20\u7ed9\u5b83\u3002(\u6bd4\u5982\u5982\u679c\u6211\u4eec\u8c03\u7528 x = SomeClass(10, 'foo') )\uff0c\u90a3\u4e48 __init__ \u5c06\u4f1a\u5f97\u5230\u4e24\u4e2a\u53c2\u657010\u548cfoo\u3002 __init__ \u5728Python\u7684\u7c7b\u5b9a\u4e49\u4e2d\u88ab\u5e7f\u6cdb\u7528\u5230\u3002 __del__(self) \u5982\u679c __new__ \u548c __init__ \u662f\u5bf9\u8c61\u7684\u6784\u9020\u5668\u7684\u8bdd\uff0c\u90a3\u4e48 __del__ \u5c31\u662f\u6790\u6784\u5668\u3002\u5b83\u4e0d\u5b9e\u73b0\u8bed\u53e5 del x (\u4ee5\u4e0a\u4ee3\u7801\u5c06\u4e0d\u4f1a\u7ffb\u8bd1\u4e3a x.__del__() )\u3002\u5b83\u5b9a\u4e49\u7684\u662f\u5f53\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u5019\u7684\u884c\u4e3a\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5728\u5220\u9664\u7684\u65f6\u9700\u8981\u66f4\u591a\u7684\u6e05\u6d01\u5de5\u4f5c\u7684\u65f6\u5019\u6b64\u65b9\u6cd5\u4f1a\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u5957\u63a5\u5b57\u5bf9\u8c61\u6216\u8005\u662f\u6587\u4ef6\u5bf9\u8c61\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89e3\u91ca\u5668\u9000\u51fa\u7684\u65f6\u5019\u5bf9\u8c61\u8fd8\u5b58\u5b58\u5728\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1 __del__ \u80fd\u591f\u88ab\u6267\u884c\u3002 class A : def __del__ ( self ): print ( \"\u6211\u88ab\u5220\u9664\u4e86\" ) a = A () del a \u6211\u88ab\u5220\u9664\u4e86 \u7528\u4e8e\u6bd4\u8f83\u7684\u9b54\u672f\u65b9\u6cd5 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __eq__(self, other) self == other __nq__(self, other) self != other __le__(self, other) self <= other __ge__(self, other) self >= other __lt__(self, other) self < other __gt__(self, other) self > other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __eq__ ( self , other ): return self . num == other def __ne__ ( self , other ): return self . num != other def __le__ ( self , other ): return self . num <= other def __ge__ ( self , other ): return self . num >= other def __lt__ ( self , other ): return self . num < other def __gt__ ( self , other ): return self . num > other a = A ( 5 ) print ( a == 5 ) print ( a != 5 ) print ( a > 4 ) print ( a < 6 ) print ( a >= 5 ) print ( a <= 6 ) True False True True True True \u6570\u503c\u5904\u7406\u7684\u9b54\u672f\u65b9\u6cd5 \u4e00\u5143\u8fd0\u7b97\u7b26\u548c\u5185\u7f6e\u51fd\u6570 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __pos__(self) +self __neg__(self) -self __abs__(self) abs(self) __invert__(self) ~self class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __pos__ ( self ): new_num = 0 + self . num return A ( new_num ) def __neg__ ( self ): new_num = 0 - self . num return A ( new_num ) def __abs__ ( self ): new_num = abs ( self . num ) return A ( new_num ) a = A ( - 5 ) print ( + a ) print ( - a ) print ( abs ( a )) -5 5 5 \u7b97\u672f\u8fd0\u7b97\u7b26 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __add__(self, other) self + other __sub_(self, other) self - other __mul__(self, other) self * other __truediv__(self, other) self / other __pow__(self, other) self ** other __floordiv__(self, other) self // other __mod__(self, other) self % other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __add__ ( self , other ): new_num = self . num + other return A ( new_num ) def __sub__ ( self , other ): new_num = self . num - other return A ( new_num ) def __mul__ ( self , other ): new_num = self . num * other return A ( new_num ) def __truediv__ ( self , other ): new_num = self . num / other return A ( new_num ) def __pow__ ( self , other ): new_num = self . num ** other return A ( new_num ) def __floordiv__ ( self , other ): new_num = self . num // other return A ( new_num ) def __mod__ ( self , other ): new_num = self . num % other return A ( new_num ) a = A ( 5 ) print ( \"a + 2 =\" , a + 2 ) print ( \"a - 2 =\" , a - 2 ) print ( \"a * 2 =\" , a * 2 ) print ( \"a / 2 =\" , a / 2 ) print ( \"a ** 2 =\" , a ** 2 ) print ( \"a // 2 =\" , a // 2 ) print ( \"a % 2 =\" , a % 2 ) a + 2 = 7 a - 2 = 3 a * 2 = 10 a / 2 = 2.5 a ** 2 = 25 a // 2 = 2 a % 2 = 1 \u53cd\u8fd0\u7b97 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u666e\u901a\u7684\u52a0\u6cd5\u8fd0\u7b97\u7684\u4f8b\u5b50: # __add__ some_object + other \u53cd\u8fd0\u7b97\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u628a\u64cd\u4f5c\u6570\u8c03\u6362\u4e86\u4f4d\u7f6e: # __radd__ other + some_object \u6240\u4ee5\uff0c\u9664\u4e86\u5f53\u4e0e\u5176\u4ed6\u5bf9\u8c61\u64cd\u4f5c\u7684\u65f6\u5019\u81ea\u5df1\u4f1a\u6210\u4e3a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e4b\u5916\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u9b54\u672f\u65b9\u6cd5\u90fd\u4e0e\u666e\u901a\u7684\u64cd\u4f5c\u662f\u76f8\u540c\u7684\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53cd\u8fd0\u7b97\u7684\u7ed3\u679c\u662f\u4e0e\u666e\u901a\u8fd0\u7b97\u76f8\u540c\u7684\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f60\u53ef\u4ee5\u5c06 __radd__ \u4e0e __add__ \u7b49\u4ef7\u3002 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __radd__(self, other) other + self __rsub_(self, other) other - self __rmul__(self, other) other * self __rtruediv__(self, other) other / self __rpow__(self, other) other ** self __rfloordiv__(self, other) other // self __rmod__(self, other) other % self \u589e\u5f3a\u8d4b\u503c \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __iadd__(self, other) self += other __isub_(self, other) self -= other __imul__(self, other) self *= other __itruediv__(self, other) self /= other __ipow__(self, other) self **= other __ifloordiv__(self, other) self //= other __imod__(self, other) self %= other \u8868\u73b0\u4f60\u7684\u7c7b \u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u4e00\u4e2a\u7c7b\u5c06\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\uff1a a = [ 1 , 2 , 3 ] a [1, 2, 3] \u5728Python\u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u5b9a\u4e49\u5185\u7f6e\u7684\u4e00\u4e9b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 __str__(self) \u5b9a\u4e49\u5f53 str() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 __repr__(self) \u5b9a\u4e49 repr() \u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 str() \u548c repr() \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e repr() \u8fd4\u56de\u7684\u662f\u673a\u5668\u53ef\u8bfb\u7684\u8f93\u51fa\uff0c\u800c str() \u8fd4\u56de\u7684\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u3002 __unicode__(self) \u5b9a\u4e49\u5f53 unicode() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 unicode() \u548c str() \u5f88\u76f8\u4f3c\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u662funicode\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u4f60\u7684\u7c7b\u8c03\u7528 str() \u7136\u800c\u4f60\u53ea\u5b9a\u4e49\u4e86 __unicode__() \uff0c\u90a3\u4e48\u5c06\u4e0d\u4f1a\u5de5\u4f5c\u3002\u4f60\u5e94\u8be5\u5b9a\u4e49 __str__() \u6765\u786e\u4fdd\u8c03\u7528\u65f6\u80fd\u8fd4\u56de\u6b63\u786e\u7684\u503c\u3002 __hash__(self) \u5b9a\u4e49\u5f53 hash() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u7528\u6765\u5728\u5b57\u5178\u4e2d\u8fdb\u884c\u5feb\u901f\u6bd4\u8f83 __nonzero__(self) \u5b9a\u4e49\u5f53 bool() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002\u672c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56deTrue\u6216\u8005False\uff0c\u53d6\u51b3\u4e8e\u4f60\u60f3\u8ba9\u5b83\u8fd4\u56de\u7684\u503c\u3002 \u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217 \u6709\u5f88\u591a\u65b9\u6cd5\u8ba9\u4f60\u7684Python\u7c7b\u884c\u4e3a\u53ef\u4ee5\u50cf\u5185\u7f6e\u7684\u5e8f\u5217(dict, tuple,list, string\u7b49\u7b49)\u3002 \u73b0\u5728\u6211\u4eec\u5f00\u59cb\u8bb2\u5982\u4f55\u5728Python\u4e2d\u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217\uff0c\u8fd9\u4e2a\u65f6\u5019\u8be5\u8bb2\u4e00\u8bb2\u534f\u8bae\u3002\u534f\u8bae(Protocols)\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u5f88\u76f8\u4f3c\u3002\u5b83\u7ed9\u4f60\u5f88\u591a\u4f60\u5fc5\u987b\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u7136\u800c\u5728Python\u4e2d\u7684\u534f\u8bae\u662f\u5f88\u4e0d\u6b63\u5f0f\u7684\uff0c\u4e0d\u9700\u8981\u660e\u786e\u58f0\u660e\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u66f4\u50cf\u4e00\u79cd\u6307\u5357\u3002 \u6211\u4eec\u4e3a\u4ec0\u4e48\u73b0\u5728\u8ba8\u8bba\u534f\u8bae\uff1f\u56e0\u4e3a\u5982\u679c\u8981\u5b9a\u5236\u5bb9\u5668\u7c7b\u578b\u7684\u8bdd\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u534f\u8bae\uff1a \u5b9e\u73b0\u4e0d\u53d8\u5bb9\u5668\u7684\u8bdd\u6709\u4e00\u4e2a\u534f\u8bae\uff1a\u5b9e\u73b0\u4e0d\u53ef\u53d8\u5bb9\u5668\uff0c\u4f60\u53ea\u80fd\u5b9a\u4e49 __len__ \u548c __getitem__ (\u4e00\u4f1a\u4f1a\u8bb2\u66f4\u591a)\u3002 \u53ef\u53d8\u5bb9\u5668\u534f\u8bae\u5219\u9700\u8981\u6240\u6709\u4e0d\u53ef\u53d8\u5bb9\u5668\u7684\u6240\u6709\u53e6\u5916\u8fd8\u9700\u8981 __setitem__ \u548c __delitem__ \u3002 \u6700\u7ec8\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5b9a\u4e49 __iter__ \u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u8fed\u4ee3\u5668\u5fc5\u987b\u9075\u5faa\u8fed\u4ee3\u5668\u534f\u8bae\uff0c\u9700\u8981\u6709 __iter__ (\u8fd4\u56de\u5b83\u672c\u8eab) \u548c next \u3002 \u5bb9\u5668\u7684\u9b54\u6cd5 \u9b54\u6cd5\u65b9\u6cd5 \u8c03\u7528\u65b9\u6cd5 \u63cf\u8ff0 __len__(self) len(self) __index__(self) x[self] \u5bf9\u8c61\u88ab\u4f5c\u4e3a\u7d22\u5f15\u4f7f\u7528\u7684\u65f6\u5019 __getitem__(self, key) self[key] \u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\u65f6 __setitem__(self, key, val) self[key] = val \u5bf9\u67d0\u4e2a\u7d22\u5f15\u503c\u8d4b\u503c\u65f6 __delitem__(self, key) del self[key] \u5220\u9664\u67d0\u4e2a\u7d22\u5f15\u503c\u65f6 __iter__(self) for x in self \u8fed\u4ee3\u65f6 __contains__(self, value) value in self, value not in self \u4f7f\u7528 in \u64cd\u4f5c\u6d4b\u8bd5\u5173\u7cfb\u65f6 __concat__(self, value) self + other \u8fde\u63a5\u4e24\u4e2a\u5bf9\u8c61\u65f6 __reversed__(self) reversed(self) \u5b9e\u73b0\u5f53 reversed() \u88ab\u8c03\u7528\u65f6\u7684\u884c\u4e3a \u53ef\u4ee5\u8c03\u7528\u7684\u5bf9\u8c61 \u5728Python\u4e2d\uff0c\u65b9\u6cd5\u4e5f\u662f\u4e00\u79cd\u9ad8\u7b49\u7684\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u88ab\u4f20\u9012\u5230\u65b9\u6cd5\u4e2d\u5c31\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u60ca\u4eba\u7684\u7279\u6027\u3002 \u5728Python\u4e2d\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u9b54\u672f\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u7c7b\u7684\u5b9e\u4f8b\u7684\u884c\u4e3a\u8868\u73b0\u7684\u50cf\u51fd\u6570\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528\u4ed6\u4eec\uff0c\u5c06\u4e00\u4e2a\u51fd\u6570\u5f53\u505a\u4e00\u4e2a\u53c2\u6570\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\u7b49\u7b49\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u7279\u6027\u8ba9Python\u7f16\u7a0b\u66f4\u52a0\u8212\u9002\u751c\u7f8e\u3002 __call__(self, [args...]) \u5141\u8bb8\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\u3002\u5b9e\u8d28\u4e0a\u8bf4\uff0c\u8fd9\u610f\u5473\u7740 x() \u4e0e x.__call__() \u662f\u76f8\u540c\u7684\u3002\u6ce8\u610f __call__ \u53c2\u6570\u53ef\u53d8\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5b9a\u4e49 __call__ \u4e3a\u5176\u4ed6\u4f60\u60f3\u8981\u7684\u51fd\u6570\uff0c\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u53c2\u6570\u3002 __call__ \u5728\u90a3\u4e9b\u7c7b\u7684\u5b9e\u4f8b\u7ecf\u5e38\u6539\u53d8\u72b6\u6001\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u6709\u6548\u3002\u8c03\u7528\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u4e00\u79cd\u6539\u53d8\u8fd9\u4e2a\u5bf9\u8c61\u72b6\u6001\u7684\u76f4\u63a5\u548c\u4f18\u96c5\u7684\u505a\u6cd5\u3002\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u8868\u8fbe\u6700\u597d\u4e0d\u8fc7\u4e86\u3002 \u4f1a\u8bdd\u7ba1\u7406 \u5728Python 2.5\u4e2d\uff0c\u4e3a\u4e86\u4ee3\u7801\u5229\u7528\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u8bcd with \u8bed\u53e5\u3002\u4f1a\u8bdd\u63a7\u5236\u5728Python\u4e2d\u4e0d\u7f55\u89c1(\u4e4b\u524d\u662f\u4f5c\u4e3a\u5e93\u7684\u4e00\u90e8\u5206\u88ab\u5b9e\u73b0)\uff0c\u76f4\u5230 PEP343 \u88ab\u6dfb\u52a0\u540e\u3002\u5b83\u88ab\u6210\u4e3a\u4e00\u7ea7\u8bed\u8a00\u7ed3\u6784\u3002\u4f60\u4e5f\u8bb8\u4e4b\u524d\u770b\u5230\u8fd9\u6837\u7684\u8bed\u53e5: with open('foo.txt') as bar: # perform some action with bar \u56de\u8bdd\u63a7\u5236\u5668\u901a\u8fc7\u5305\u88c5\u4e00\u4e2a with \u8bed\u53e5\u6765\u8bbe\u7f6e\u548c\u6e05\u7406\u884c\u4e3a\u3002\u56de\u8bdd\u63a7\u5236\u5668\u7684\u884c\u4e3a\u901a\u8fc7\u4e24\u4e2a\u9b54\u672f\u65b9\u6cd5\u6765\u5b9a\u4e49: __enter__(self) \u5b9a\u4e49\u5f53\u4f7f\u7528 with \u8bed\u53e5\u7684\u65f6\u5019\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u521d\u59cb\u5757\u88ab\u521b\u5efa\u7684\u65f6\u5019\u7684\u884c\u4e3a\u3002\u6ce8\u610f __enter__ \u7684\u8fd4\u56de\u503c\u88ab with \u8bed\u53e5\u7684\u76ee\u6807\u6216\u8005 as \u540e\u7684\u540d\u5b57\u7ed1\u5b9a\u3002 __exit__(self, exception_type,exception_value, traceback) \u5b9a\u4e49\u5f53\u4e00\u4e2a\u4ee3\u7801\u5757\u88ab\u6267\u884c\u6216\u8005\u7ec8\u6b62\u540e\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u5b83\u53ef\u4ee5\u88ab\u7528\u6765\u5904\u7406\u5f02\u5e38\uff0c\u6e05\u9664\u5de5\u4f5c\u6216\u8005\u505a\u4e00\u4e9b\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\u7684\u65e5\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u4ee3\u7801\u5757\u6267\u884c\u6210\u529f\uff0c exception_type , exception_value , \u548c traceback \u5c06\u4f1a\u662f None \u3002\u5426\u5219\u7684\u8bdd\u4f60\u53ef\u4ee5\u9009\u62e9\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u6216\u8005\u662f\u76f4\u63a5\u4ea4\u7ed9\u7528\u6237\u5904\u7406\u3002\u5982\u679c\u4f60\u60f3\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u7684\u8bdd\uff0c\u786e\u8ba4 __exit__ \u5728\u6240\u6709\u7ed3\u675f\u4e4b\u540e\u4f1a\u8fd4\u56de True \u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5f02\u5e38\u88ab\u4f1a\u8bdd\u7ba1\u7406\u5668\u5904\u7406\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8fd9\u6837\u5904\u7406\u3002 __enter \u548c __exit__ \u5bf9\u4e8e\u660e\u786e\u6709\u5b9a\u4e49\u597d\u7684\u548c\u65e5\u5e38\u884c\u4e3a\u7684\u8bbe\u7f6e\u548c\u6e05\u6d01\u5de5\u4f5c\u7684\u7c7b\u5f88\u6709\u5e2e\u52a9\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u822c\u7684\u53ef\u4ee5\u5305\u88c5\u5176\u4ed6\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a class Closer : '''\u901a\u8fc7with\u8bed\u53e5\u548c\u4e00\u4e2aclose\u65b9\u6cd5\u6765\u5173\u95ed\u4e00\u4e2a\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668''' def __init__ ( self , obj ): self . obj = obj def __enter__ ( self ): return self . obj # bound to target def __exit__ ( self , exception_type , exception_val , trace ): try : self . obj . close () except AttributeError : # obj isn't closable print ( 'Not closable.' ) return True # exception handled successfully with Closer ( int ( 5 )) as i : i += 1 Not closable. \u53c2\u8003 \u6587\u7ae0","title":"4.4.\u9b54\u672f\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_1","text":"\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u9b54\u672f\u65b9\u6cd5\uff0c __init__ \u3002\u901a\u8fc7\u6b64\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u7684\u521d\u59cb\u64cd\u4f5c\u3002\u4f46\u5f88\u591a\u535a\u5ba2\u548c\u4e2a\u522b\u4e66\u7c4d\u4e2d\u90fd\u628a __init__ \u5f53\u4f5c\u7c7b\u4f3c\u4e8eC++\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5176\u5b9e\u662f\u9519\u8bef\u7684\u3002 __init__ \u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb\u505a __new__ \u7684\u65b9\u6cd5\uff0c\u6765\u6784\u9020\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u7136\u540e\u7ed9\u5728\u5f00\u59cb\u521b\u5efa\u65f6\u5019\u7684\u521d\u59cb\u5316\u51fd\u6570\u6765\u4f20\u9012\u53c2\u6570\u3002\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7684\u53e6\u4e00\u7aef\uff0c\u4e5f\u6709\u4e00\u4e2a __del__ \u65b9\u6cd5\u3002 __new__(cls, [...) __new__ \u662f\u5728\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u6240\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u3002\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8fd9\u4e2a\u7c7b\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u662f\u7528\u6765\u76f4\u63a5\u4f20\u9012\u7ed9 __init__ \u65b9\u6cd5\u3002 __new__ \u65b9\u6cd5\u76f8\u5f53\u4e0d\u5e38\u7528\uff0c\u4e5f\u4e0d\u662f\u5f88\u6709\u7528\u5904\uff0c\u4f46\u662f\u5b83\u6709\u81ea\u5df1\u7684\u7279\u6027\uff0c\u7279\u522b\u662f\u5f53\u7ee7\u627f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u7c7b\u578b\uff08\u6bd4\u5982\u4e00\u4e2atuple\u6216\u8005string\uff09\uff1a class inch ( float ): \"Convert from inch to meter\" def __new__ ( cls , arg = 0.0 ): return float . __new__ ( cls , arg * 0.0254 ) print ( inch ( 12 )) 0.30479999999999996 \u8fd9\u4e2a\u7c7b\u53ef\u80fd\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u4f46\u662f\u5b83\u663e\u793a\u4e86\u5982\u4f55\u6269\u5c55\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u66ff\u4ee3 __init__ \u800c\u4e0d\u662f __new__ \uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u8d77\u4f5c\u7528\uff1a class inch ( float ): \"THIS DOESN'T WORK!!!\" def __init__ ( self , arg = 0.0 ): float . __init__ ( self , arg * 0.0254 ) try : print ( inch ( 12 )) except TypeError as e : print ( e ) object.__init__() takes exactly one argument (the instance to initialize) \u91cd\u5199\u521d\u59cb\u503c\u7684\u7248\u672c\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u6d6e\u70b9\u7c7b\u578b\u7684\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002\u53e6\u4e00\u4e2a __new__ \u7684\u4f8b\u5b50\u662f\u5355\u4f8b\u6a21\u5f0f\u3002 class A : pass new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA9651AC8> <__main__.A object at 0x0000021AA9651B00> class A ( object ): _singleton = None def __new__ ( cls , * args , ** kwargs ): if not cls . _singleton : cls . _singleton = object . __new__ ( cls , * args , ** kwargs ) return cls . _singleton new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA86752E8> <__main__.A object at 0x0000021AA86752E8> \u5173\u4e8e __new__ \u7684\u4e00\u4e9b\u89c4\u5219\uff1a __new__ \u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4f46\u5728\u91cd\u5b9a\u4e49 __new__ \u65f6\uff0c\u4e0d\u9700\u8981\u52a0\u4e0a @staticmethod \uff0c\u56e0\u4e3a\u5b83\u7684\u540d\u5b57\u5df2\u7ecf\u6697\u793a\u4e86\u8fd9\u4e00\u70b9\u3002 __new__ \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u7c7b\uff1b\u5176\u4f59\u53c2\u6570\u662f\u6784\u9020\u51fd\u6570\u8c03\u7528\u6240\u770b\u5230\u7684\u53c2\u6570\u3002 __new__ \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u8fd4\u56deNone\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528 __init__ \u65b9\u6cd5\u3002 __init__(self, [\u2026) \u6b64\u65b9\u6cd5\u4e3a\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u3002\u5f53\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5c06\u4f1a\u4f20\u7ed9\u5b83\u3002(\u6bd4\u5982\u5982\u679c\u6211\u4eec\u8c03\u7528 x = SomeClass(10, 'foo') )\uff0c\u90a3\u4e48 __init__ \u5c06\u4f1a\u5f97\u5230\u4e24\u4e2a\u53c2\u657010\u548cfoo\u3002 __init__ \u5728Python\u7684\u7c7b\u5b9a\u4e49\u4e2d\u88ab\u5e7f\u6cdb\u7528\u5230\u3002 __del__(self) \u5982\u679c __new__ \u548c __init__ \u662f\u5bf9\u8c61\u7684\u6784\u9020\u5668\u7684\u8bdd\uff0c\u90a3\u4e48 __del__ \u5c31\u662f\u6790\u6784\u5668\u3002\u5b83\u4e0d\u5b9e\u73b0\u8bed\u53e5 del x (\u4ee5\u4e0a\u4ee3\u7801\u5c06\u4e0d\u4f1a\u7ffb\u8bd1\u4e3a x.__del__() )\u3002\u5b83\u5b9a\u4e49\u7684\u662f\u5f53\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u5019\u7684\u884c\u4e3a\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5728\u5220\u9664\u7684\u65f6\u9700\u8981\u66f4\u591a\u7684\u6e05\u6d01\u5de5\u4f5c\u7684\u65f6\u5019\u6b64\u65b9\u6cd5\u4f1a\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u5957\u63a5\u5b57\u5bf9\u8c61\u6216\u8005\u662f\u6587\u4ef6\u5bf9\u8c61\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89e3\u91ca\u5668\u9000\u51fa\u7684\u65f6\u5019\u5bf9\u8c61\u8fd8\u5b58\u5b58\u5728\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1 __del__ \u80fd\u591f\u88ab\u6267\u884c\u3002 class A : def __del__ ( self ): print ( \"\u6211\u88ab\u5220\u9664\u4e86\" ) a = A () del a \u6211\u88ab\u5220\u9664\u4e86","title":"\u6784\u9020\u548c\u521d\u59cb\u5316"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_2","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __eq__(self, other) self == other __nq__(self, other) self != other __le__(self, other) self <= other __ge__(self, other) self >= other __lt__(self, other) self < other __gt__(self, other) self > other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __eq__ ( self , other ): return self . num == other def __ne__ ( self , other ): return self . num != other def __le__ ( self , other ): return self . num <= other def __ge__ ( self , other ): return self . num >= other def __lt__ ( self , other ): return self . num < other def __gt__ ( self , other ): return self . num > other a = A ( 5 ) print ( a == 5 ) print ( a != 5 ) print ( a > 4 ) print ( a < 6 ) print ( a >= 5 ) print ( a <= 6 ) True False True True True True","title":"\u7528\u4e8e\u6bd4\u8f83\u7684\u9b54\u672f\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_3","text":"","title":"\u6570\u503c\u5904\u7406\u7684\u9b54\u672f\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_4","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __pos__(self) +self __neg__(self) -self __abs__(self) abs(self) __invert__(self) ~self class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __pos__ ( self ): new_num = 0 + self . num return A ( new_num ) def __neg__ ( self ): new_num = 0 - self . num return A ( new_num ) def __abs__ ( self ): new_num = abs ( self . num ) return A ( new_num ) a = A ( - 5 ) print ( + a ) print ( - a ) print ( abs ( a )) -5 5 5","title":"\u4e00\u5143\u8fd0\u7b97\u7b26\u548c\u5185\u7f6e\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_5","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __add__(self, other) self + other __sub_(self, other) self - other __mul__(self, other) self * other __truediv__(self, other) self / other __pow__(self, other) self ** other __floordiv__(self, other) self // other __mod__(self, other) self % other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __add__ ( self , other ): new_num = self . num + other return A ( new_num ) def __sub__ ( self , other ): new_num = self . num - other return A ( new_num ) def __mul__ ( self , other ): new_num = self . num * other return A ( new_num ) def __truediv__ ( self , other ): new_num = self . num / other return A ( new_num ) def __pow__ ( self , other ): new_num = self . num ** other return A ( new_num ) def __floordiv__ ( self , other ): new_num = self . num // other return A ( new_num ) def __mod__ ( self , other ): new_num = self . num % other return A ( new_num ) a = A ( 5 ) print ( \"a + 2 =\" , a + 2 ) print ( \"a - 2 =\" , a - 2 ) print ( \"a * 2 =\" , a * 2 ) print ( \"a / 2 =\" , a / 2 ) print ( \"a ** 2 =\" , a ** 2 ) print ( \"a // 2 =\" , a // 2 ) print ( \"a % 2 =\" , a % 2 ) a + 2 = 7 a - 2 = 3 a * 2 = 10 a / 2 = 2.5 a ** 2 = 25 a // 2 = 2 a % 2 = 1","title":"\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_6","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u666e\u901a\u7684\u52a0\u6cd5\u8fd0\u7b97\u7684\u4f8b\u5b50: # __add__ some_object + other \u53cd\u8fd0\u7b97\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u628a\u64cd\u4f5c\u6570\u8c03\u6362\u4e86\u4f4d\u7f6e: # __radd__ other + some_object \u6240\u4ee5\uff0c\u9664\u4e86\u5f53\u4e0e\u5176\u4ed6\u5bf9\u8c61\u64cd\u4f5c\u7684\u65f6\u5019\u81ea\u5df1\u4f1a\u6210\u4e3a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e4b\u5916\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u9b54\u672f\u65b9\u6cd5\u90fd\u4e0e\u666e\u901a\u7684\u64cd\u4f5c\u662f\u76f8\u540c\u7684\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53cd\u8fd0\u7b97\u7684\u7ed3\u679c\u662f\u4e0e\u666e\u901a\u8fd0\u7b97\u76f8\u540c\u7684\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f60\u53ef\u4ee5\u5c06 __radd__ \u4e0e __add__ \u7b49\u4ef7\u3002 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __radd__(self, other) other + self __rsub_(self, other) other - self __rmul__(self, other) other * self __rtruediv__(self, other) other / self __rpow__(self, other) other ** self __rfloordiv__(self, other) other // self __rmod__(self, other) other % self","title":"\u53cd\u8fd0\u7b97"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_7","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __iadd__(self, other) self += other __isub_(self, other) self -= other __imul__(self, other) self *= other __itruediv__(self, other) self /= other __ipow__(self, other) self **= other __ifloordiv__(self, other) self //= other __imod__(self, other) self %= other","title":"\u589e\u5f3a\u8d4b\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_8","text":"\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u4e00\u4e2a\u7c7b\u5c06\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\uff1a a = [ 1 , 2 , 3 ] a [1, 2, 3] \u5728Python\u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u5b9a\u4e49\u5185\u7f6e\u7684\u4e00\u4e9b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 __str__(self) \u5b9a\u4e49\u5f53 str() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 __repr__(self) \u5b9a\u4e49 repr() \u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 str() \u548c repr() \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e repr() \u8fd4\u56de\u7684\u662f\u673a\u5668\u53ef\u8bfb\u7684\u8f93\u51fa\uff0c\u800c str() \u8fd4\u56de\u7684\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u3002 __unicode__(self) \u5b9a\u4e49\u5f53 unicode() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 unicode() \u548c str() \u5f88\u76f8\u4f3c\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u662funicode\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u4f60\u7684\u7c7b\u8c03\u7528 str() \u7136\u800c\u4f60\u53ea\u5b9a\u4e49\u4e86 __unicode__() \uff0c\u90a3\u4e48\u5c06\u4e0d\u4f1a\u5de5\u4f5c\u3002\u4f60\u5e94\u8be5\u5b9a\u4e49 __str__() \u6765\u786e\u4fdd\u8c03\u7528\u65f6\u80fd\u8fd4\u56de\u6b63\u786e\u7684\u503c\u3002 __hash__(self) \u5b9a\u4e49\u5f53 hash() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u7528\u6765\u5728\u5b57\u5178\u4e2d\u8fdb\u884c\u5feb\u901f\u6bd4\u8f83 __nonzero__(self) \u5b9a\u4e49\u5f53 bool() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002\u672c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56deTrue\u6216\u8005False\uff0c\u53d6\u51b3\u4e8e\u4f60\u60f3\u8ba9\u5b83\u8fd4\u56de\u7684\u503c\u3002","title":"\u8868\u73b0\u4f60\u7684\u7c7b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_9","text":"\u6709\u5f88\u591a\u65b9\u6cd5\u8ba9\u4f60\u7684Python\u7c7b\u884c\u4e3a\u53ef\u4ee5\u50cf\u5185\u7f6e\u7684\u5e8f\u5217(dict, tuple,list, string\u7b49\u7b49)\u3002 \u73b0\u5728\u6211\u4eec\u5f00\u59cb\u8bb2\u5982\u4f55\u5728Python\u4e2d\u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217\uff0c\u8fd9\u4e2a\u65f6\u5019\u8be5\u8bb2\u4e00\u8bb2\u534f\u8bae\u3002\u534f\u8bae(Protocols)\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u5f88\u76f8\u4f3c\u3002\u5b83\u7ed9\u4f60\u5f88\u591a\u4f60\u5fc5\u987b\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u7136\u800c\u5728Python\u4e2d\u7684\u534f\u8bae\u662f\u5f88\u4e0d\u6b63\u5f0f\u7684\uff0c\u4e0d\u9700\u8981\u660e\u786e\u58f0\u660e\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u66f4\u50cf\u4e00\u79cd\u6307\u5357\u3002 \u6211\u4eec\u4e3a\u4ec0\u4e48\u73b0\u5728\u8ba8\u8bba\u534f\u8bae\uff1f\u56e0\u4e3a\u5982\u679c\u8981\u5b9a\u5236\u5bb9\u5668\u7c7b\u578b\u7684\u8bdd\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u534f\u8bae\uff1a \u5b9e\u73b0\u4e0d\u53d8\u5bb9\u5668\u7684\u8bdd\u6709\u4e00\u4e2a\u534f\u8bae\uff1a\u5b9e\u73b0\u4e0d\u53ef\u53d8\u5bb9\u5668\uff0c\u4f60\u53ea\u80fd\u5b9a\u4e49 __len__ \u548c __getitem__ (\u4e00\u4f1a\u4f1a\u8bb2\u66f4\u591a)\u3002 \u53ef\u53d8\u5bb9\u5668\u534f\u8bae\u5219\u9700\u8981\u6240\u6709\u4e0d\u53ef\u53d8\u5bb9\u5668\u7684\u6240\u6709\u53e6\u5916\u8fd8\u9700\u8981 __setitem__ \u548c __delitem__ \u3002 \u6700\u7ec8\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5b9a\u4e49 __iter__ \u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u8fed\u4ee3\u5668\u5fc5\u987b\u9075\u5faa\u8fed\u4ee3\u5668\u534f\u8bae\uff0c\u9700\u8981\u6709 __iter__ (\u8fd4\u56de\u5b83\u672c\u8eab) \u548c next \u3002","title":"\u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_10","text":"\u9b54\u6cd5\u65b9\u6cd5 \u8c03\u7528\u65b9\u6cd5 \u63cf\u8ff0 __len__(self) len(self) __index__(self) x[self] \u5bf9\u8c61\u88ab\u4f5c\u4e3a\u7d22\u5f15\u4f7f\u7528\u7684\u65f6\u5019 __getitem__(self, key) self[key] \u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\u65f6 __setitem__(self, key, val) self[key] = val \u5bf9\u67d0\u4e2a\u7d22\u5f15\u503c\u8d4b\u503c\u65f6 __delitem__(self, key) del self[key] \u5220\u9664\u67d0\u4e2a\u7d22\u5f15\u503c\u65f6 __iter__(self) for x in self \u8fed\u4ee3\u65f6 __contains__(self, value) value in self, value not in self \u4f7f\u7528 in \u64cd\u4f5c\u6d4b\u8bd5\u5173\u7cfb\u65f6 __concat__(self, value) self + other \u8fde\u63a5\u4e24\u4e2a\u5bf9\u8c61\u65f6 __reversed__(self) reversed(self) \u5b9e\u73b0\u5f53 reversed() \u88ab\u8c03\u7528\u65f6\u7684\u884c\u4e3a","title":"\u5bb9\u5668\u7684\u9b54\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_11","text":"\u5728Python\u4e2d\uff0c\u65b9\u6cd5\u4e5f\u662f\u4e00\u79cd\u9ad8\u7b49\u7684\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u88ab\u4f20\u9012\u5230\u65b9\u6cd5\u4e2d\u5c31\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u60ca\u4eba\u7684\u7279\u6027\u3002 \u5728Python\u4e2d\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u9b54\u672f\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u7c7b\u7684\u5b9e\u4f8b\u7684\u884c\u4e3a\u8868\u73b0\u7684\u50cf\u51fd\u6570\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528\u4ed6\u4eec\uff0c\u5c06\u4e00\u4e2a\u51fd\u6570\u5f53\u505a\u4e00\u4e2a\u53c2\u6570\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\u7b49\u7b49\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u7279\u6027\u8ba9Python\u7f16\u7a0b\u66f4\u52a0\u8212\u9002\u751c\u7f8e\u3002 __call__(self, [args...]) \u5141\u8bb8\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\u3002\u5b9e\u8d28\u4e0a\u8bf4\uff0c\u8fd9\u610f\u5473\u7740 x() \u4e0e x.__call__() \u662f\u76f8\u540c\u7684\u3002\u6ce8\u610f __call__ \u53c2\u6570\u53ef\u53d8\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5b9a\u4e49 __call__ \u4e3a\u5176\u4ed6\u4f60\u60f3\u8981\u7684\u51fd\u6570\uff0c\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u53c2\u6570\u3002 __call__ \u5728\u90a3\u4e9b\u7c7b\u7684\u5b9e\u4f8b\u7ecf\u5e38\u6539\u53d8\u72b6\u6001\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u6709\u6548\u3002\u8c03\u7528\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u4e00\u79cd\u6539\u53d8\u8fd9\u4e2a\u5bf9\u8c61\u72b6\u6001\u7684\u76f4\u63a5\u548c\u4f18\u96c5\u7684\u505a\u6cd5\u3002\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u8868\u8fbe\u6700\u597d\u4e0d\u8fc7\u4e86\u3002","title":"\u53ef\u4ee5\u8c03\u7528\u7684\u5bf9\u8c61"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_12","text":"\u5728Python 2.5\u4e2d\uff0c\u4e3a\u4e86\u4ee3\u7801\u5229\u7528\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u8bcd with \u8bed\u53e5\u3002\u4f1a\u8bdd\u63a7\u5236\u5728Python\u4e2d\u4e0d\u7f55\u89c1(\u4e4b\u524d\u662f\u4f5c\u4e3a\u5e93\u7684\u4e00\u90e8\u5206\u88ab\u5b9e\u73b0)\uff0c\u76f4\u5230 PEP343 \u88ab\u6dfb\u52a0\u540e\u3002\u5b83\u88ab\u6210\u4e3a\u4e00\u7ea7\u8bed\u8a00\u7ed3\u6784\u3002\u4f60\u4e5f\u8bb8\u4e4b\u524d\u770b\u5230\u8fd9\u6837\u7684\u8bed\u53e5: with open('foo.txt') as bar: # perform some action with bar \u56de\u8bdd\u63a7\u5236\u5668\u901a\u8fc7\u5305\u88c5\u4e00\u4e2a with \u8bed\u53e5\u6765\u8bbe\u7f6e\u548c\u6e05\u7406\u884c\u4e3a\u3002\u56de\u8bdd\u63a7\u5236\u5668\u7684\u884c\u4e3a\u901a\u8fc7\u4e24\u4e2a\u9b54\u672f\u65b9\u6cd5\u6765\u5b9a\u4e49: __enter__(self) \u5b9a\u4e49\u5f53\u4f7f\u7528 with \u8bed\u53e5\u7684\u65f6\u5019\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u521d\u59cb\u5757\u88ab\u521b\u5efa\u7684\u65f6\u5019\u7684\u884c\u4e3a\u3002\u6ce8\u610f __enter__ \u7684\u8fd4\u56de\u503c\u88ab with \u8bed\u53e5\u7684\u76ee\u6807\u6216\u8005 as \u540e\u7684\u540d\u5b57\u7ed1\u5b9a\u3002 __exit__(self, exception_type,exception_value, traceback) \u5b9a\u4e49\u5f53\u4e00\u4e2a\u4ee3\u7801\u5757\u88ab\u6267\u884c\u6216\u8005\u7ec8\u6b62\u540e\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u5b83\u53ef\u4ee5\u88ab\u7528\u6765\u5904\u7406\u5f02\u5e38\uff0c\u6e05\u9664\u5de5\u4f5c\u6216\u8005\u505a\u4e00\u4e9b\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\u7684\u65e5\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u4ee3\u7801\u5757\u6267\u884c\u6210\u529f\uff0c exception_type , exception_value , \u548c traceback \u5c06\u4f1a\u662f None \u3002\u5426\u5219\u7684\u8bdd\u4f60\u53ef\u4ee5\u9009\u62e9\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u6216\u8005\u662f\u76f4\u63a5\u4ea4\u7ed9\u7528\u6237\u5904\u7406\u3002\u5982\u679c\u4f60\u60f3\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u7684\u8bdd\uff0c\u786e\u8ba4 __exit__ \u5728\u6240\u6709\u7ed3\u675f\u4e4b\u540e\u4f1a\u8fd4\u56de True \u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5f02\u5e38\u88ab\u4f1a\u8bdd\u7ba1\u7406\u5668\u5904\u7406\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8fd9\u6837\u5904\u7406\u3002 __enter \u548c __exit__ \u5bf9\u4e8e\u660e\u786e\u6709\u5b9a\u4e49\u597d\u7684\u548c\u65e5\u5e38\u884c\u4e3a\u7684\u8bbe\u7f6e\u548c\u6e05\u6d01\u5de5\u4f5c\u7684\u7c7b\u5f88\u6709\u5e2e\u52a9\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u822c\u7684\u53ef\u4ee5\u5305\u88c5\u5176\u4ed6\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a class Closer : '''\u901a\u8fc7with\u8bed\u53e5\u548c\u4e00\u4e2aclose\u65b9\u6cd5\u6765\u5173\u95ed\u4e00\u4e2a\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668''' def __init__ ( self , obj ): self . obj = obj def __enter__ ( self ): return self . obj # bound to target def __exit__ ( self , exception_type , exception_val , trace ): try : self . obj . close () except AttributeError : # obj isn't closable print ( 'Not closable.' ) return True # exception handled successfully with Closer ( int ( 5 )) as i : i += 1 Not closable.","title":"\u4f1a\u8bdd\u7ba1\u7406"},{"location":"Python%E5%9F%BA%E7%A1%80/4.4.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_13","text":"\u6587\u7ae0","title":"\u53c2\u8003"},{"location":"gensim/14.1.word2vec%20model.html","text":"import pprint % matplotlib inline Word2Vec \u6a21\u578b \u672c\u6587\u4ecb\u7ecdGensim\u7684Word2Vec\u6a21\u578b\uff0c\u5e76\u5728Lee Corpus\u4e0a\u6f14\u793a\u5176\u7528\u6cd5\u3002 import logging logging . basicConfig ( format = ' %(asctime)s : %(levelname)s : %(message)s ' , level = logging . INFO ) \u5982\u679c\u4f60\u4e4b\u524d\u9519\u8fc7\u4e86\u4ee4\u4eba\u632f\u594b\u7684\u7b97\u6cd5\uff0c\u90a3\u4e48word2vec\u73b0\u5728\u662f\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u65b0\u661f\u4e4b\u4e00\uff0c\u56e0\u6b64\u53d7\u5230\u5e7f\u6cdb\u7684\u63a8\u8350\uff0c\u5c3d\u7ba1\u5b83\u672c\u8eab\u7684\u7f51\u7edc\u5c42\u5f88\u6d45\u3002word2vec\u53ef\u4ee5\u4ece\u5927\u91cf\u672a\u6ce8\u91ca\u7684\u7eaf\u6587\u672c\u4e2d\u81ea\u52a8\u5b66\u4e60\u5355\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 word2vec\u7684\u8f93\u51fa\u662f\u5177\u6709\u663e\u8457\u7ebf\u6027\u5173\u7cfb\u7684\u5411\u91cf\uff08\u6bcf\u4e2a\u5355\u8bcd\u5c31\u662f\u4e00\u4e2a\u5411\u91cf\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a vec(\"king\") - vec(\"man\") + vec(\"woman\") =~ vec(\"queen\") vec(\"Montreal Canadiens\") \u2013 vec(\"Montreal\") + vec(\"Toronto\") =~ vec(\"Toronto Maple Leafs\") Word2vec\u5728 \u81ea\u52a8\u6587\u672c\u6807\u8bb0 \u3001\u63a8\u8350\u7cfb\u7edf\u548c\u673a\u5668\u7ffb\u8bd1\u4e2d\u975e\u5e38\u6709\u7528\u3002 \u672c\u6559\u7a0b\u5c06: \u5f15\u5165\u201c Word2Vec\u201d\u4f5c\u4e3a\u5bf9\u4f20\u7edf bag-of-words \u6a21\u578b\u7684\u6539\u8fdb \u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u7684\u6a21\u578b\u5c55\u793a\u201c Word2Vec\u201d\u7684\u529f\u80fd \u6f14\u793a\u6839\u636e\u60a8\u81ea\u5df1\u7684\u6570\u636e\u8bad\u7ec3\u65b0\u6a21\u578b \u6f14\u793a\u52a0\u8f7d\u548c\u4fdd\u5b58\u6a21\u578b \u4ecb\u7ecd\u51e0\u4e2a\u8bad\u7ec3\u53c2\u6570\u5e76\u6f14\u793a\u5176\u6548\u679c \u8ba8\u8bba\u5185\u5b58\u9700\u6c42 \u901a\u8fc7\u5e94\u7528\u964d\u7ef4\u6765\u53ef\u89c6\u5316Word2Vec\u5d4c\u5165 \u56de\u987eBag-of-words\u6a21\u578b \u6ce8\u610f\uff1a \u5982\u679c\u60a8\u5df2\u7ecf\u719f\u6089\u6a21\u578b\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6a21\u578b\u56de\u987e\u3002 \u60a8\u53ef\u80fd\u4ece core_concepts_vector \u90e8\u5206\u719f\u6089\u4e86\u8bcd\u888b\u6a21\u578b https://en.wikipedia.org/wiki/Bag-of-words_model \u3002\u8be5\u6a21\u578b\u5c06\u6bcf\u4e2a\u6587\u6863\u8f6c\u6362\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u6574\u6570\u77e2\u91cf\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u53e5\u5b50\uff1a John likes to watch movies. Mary likes movies too. John also likes to watch football games. Mary hates football. \u6a21\u578b\u8f93\u51fa\u5411\u91cf\uff1a [1, 2, 1, 1, 2, 1, 1, 0, 0, 0, 0] [1, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1] \u6bcf\u4e2a\u5411\u91cf\u670910\u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8ba1\u7b97\u6587\u6863\u4e2d\u7279\u5b9a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5143\u7d20\u7684\u987a\u5e8f\u662f\u4efb\u610f\u7684\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5143\u7d20\u7684\u987a\u5e8f\u5bf9\u5e94\u4e8e\u4ee5\u4e0b\u5355\u8bcd\uff1a [\"John\", \"likes\", \"to\", \"watch\", \"movies\", \"Mary\", \"too\", \"also\", \"football\", \"games\", \"hates\"] . \u8bcd\u888b\u6a21\u578b\u51fa\u5947\u5730\u6709\u6548\uff0c\u4f46\u6709\u51e0\u4e2a\u7f3a\u70b9\u3002 \u9996\u5148\uff0c\u4ed6\u4eec\u4f1a\u4e22\u5931\u6240\u6709\u6709\u5173\u5355\u8bcd\u987a\u5e8f\u7684\u4fe1\u606f\uff1a\"John likes Mary\"\u548c\"Mary likes John\"\u5bf9\u5e94\u4e8e\u76f8\u540c\u7684\u5411\u91cf\u3002\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff1an-grams\u6a21\u578b\u8003\u8651\u957f\u5ea6\u4e3an\u7684\u5355\u8bcd\u77ed\u8bed\uff0c\u5c06\u6587\u6863\u8868\u793a\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u5411\u91cf\uff0c\u4ee5\u6355\u83b7\u5355\u8bcd\u987a\u5e8f\uff0c\u4f46\u906d\u53d7\u6570\u636e\u7a00\u758f\u548c\u9ad8\u7ef4\u5ea6\u7684\u56f0\u6270\u3002 \u5176\u6b21\uff0c\u8be5\u6a21\u578b\u4e0d\u4f1a\u5c1d\u8bd5\u5b66\u4e60\u5355\u8bcd\u7684\u542b\u4e49\uff0c\u56e0\u6b64\uff0c\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e76\u4e0d\u603b\u662f\u53cd\u6620\u51fa\u542b\u4e49\u4e0a\u7684\u5dee\u5f02\u3002 Word2Vec\u6a21\u578b\u89e3\u51b3\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\u3002 Word2Vec\u6a21\u578b\u7b80\u4ecb Word2Vec\u662f\u4e00\u79cd\u8f83\u65b0\u7684\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u6d45\u5c42\u795e\u7ecf\u7f51\u7edc\u5c06\u5355\u8bcd\u5d4c\u5165\u5230\u4f4e\u7ef4\u5411\u91cf\u7a7a\u95f4\u4e2d\u3002 \u7ed3\u679c\u662f\u4e00\u7ec4\u8bcd\u5411\u91cf\uff0c\u5728\u5411\u91cf\u7a7a\u95f4\u4e2d\u9760\u5728\u4e00\u8d77\u7684\u8bcd\u5411\u91cf\u6839\u636e\u4e0a\u4e0b\u6587\u5177\u6709\u76f8\u4f3c\u7684\u542b\u4e49\uff0c\u800c\u5f7c\u6b64\u8fdc\u79bb\u7684\u8bcd\u5411\u91cf\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 \u4f8b\u5982\uff0c\u201c strong\u201d\u548c\u201c powerful\u201d\u5c06\u5f7c\u6b64\u9760\u8fd1\uff0c\u800c\u201c strong\u201d\u548c\u201c Paris\u201d\u5219\u76f8\u5bf9\u8f83\u8fdc\u3002 \u8be5\u6a21\u578b\u6709\u4e24\u4e2a\u7248\u672c\uff0c ~gensim.models.word2vec.Word2Vec \u7c7b\u5b9e\u73b0\u4e86\u4e24\u4e2a\u7248\u672c\uff1a Skip-grams (SG) Continuous-bag-of-words (CBOW) \u6ce8\u610f\uff1a \u4e0d\u8981\u8ba9\u4e0b\u9762\u7684\u5b9e\u73b0\u7ec6\u8282\u5413\u5230\u60a8\u3002\u5b83\u4eec\u662f\u9ad8\u7ea7\u6750\u6599\uff0c\u5982\u679c\u592a\u591a\uff0c\u5219\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u90e8\u5206\u3002 \u4f8b\u5982\uff0c\u201cWord2Vec Skip-gram\u201d \u6a21\u578b\u5c06\u901a\u8fc7\u5728\u6587\u672c\u6570\u636e\u4e4b\u95f4\u8fdb\u884c\u7a97\u53e3\u79fb\u52a8\uff0c\u751f\u6210\u7684\u6210\u5bf9\u7684(word1\uff0cword2)\uff0c\u5e76\u6839\u636e\u8f93\u5165\u7684\u591a\u4e2a\u5355\u8bcd\u5bf9(word,word)\u8bad\u7ec3\u4e00\u4e2a1\u5c42\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\uff0c \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8f93\u5165\u9644\u8fd1\u5355\u8bcd\u7684\u9884\u6d4b\u6982\u7387\u5206\u5e03\u3002 \u5355\u8bcd\u7684one-hot \u7f16\u7801\u901a\u8fc7\u6295\u5f71\u5c42\uff08projection layer\uff09\u8fdb\u5165\u9690\u85cf\u5c42\uff1b\u8fd9\u4e9b\u6295\u5f71\u7684\u6743\u91cd\u88ab\u89e3\u91ca\u6210word embeddings\u3002\u56e0\u6b64\uff0c\u5982\u679c\u9690\u85cf\u5c42\u5177\u6709300\u4e2a\u795e\u7ecf\u5143\uff0c\u5219\u6b64\u7f51\u7edc\u5c06\u4e3a\u6211\u4eec\u63d0\u4f9b300\u7ef4\u7684word embeddings\u3002 Continuous-bag-of-words Word2vec\u4e0eskip-gram model\u975e\u5e38\u76f8\u4f3c\u3002 \u5b83\u4e5f\u662f\u4e00\u4e2a\u542b\u67091\u5c42\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u3002 \u5408\u6210\u8bad\u7ec3\u4efb\u52a1\u73b0\u5728\u4f7f\u7528\u591a\u4e2a\u8f93\u5165\u4e0a\u4e0b\u6587\u5355\u8bcd\u7684\u5e73\u5747\u503c\u6765\u9884\u6d4b\u76ee\u6807\u5355\u8bcd\uff0c\u800c\u4e0d\u662f\u50cfskip-gram model\u4e2d\u4f7f\u7528\u5355\u4e2a\u5355\u8bcd\u7684\u503c\u3002 \u540c\u6837\uff0c\u5c06one-hot\u7f16\u7801\u8f6c\u6362\u4e3a\u548c\u9690\u85cf\u5c42\u76f8\u540c\u7ef4\u5ea6\u7684\u5e73\u5747\u503c\u5411\u91cf\u7684\u6295\u5f71\u6743\u91cd\uff0c\u4e5f\u88ab\u89e3\u91ca\u4e3aword embeddings\u3002 Word2Vec \u6f14\u793a \u8ba9\u6211\u4eec\u4e0b\u8f7d\u4e00\u4e2a\u9884\u5148\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5e76\u8fdb\u884c\u8bd5\u7528\uff0c\u770b\u770bWord2Vec\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002\u6211\u4eec\u5c06\u83b7\u53d6\u7684Word2Vec\u6a21\u578b\u4f7f\u7528Google\u65b0\u95fb\u6570\u636e\u8bad\u7ec3\uff0c\u8be5\u6a21\u578b\u6db5\u76d6\u5927\u7ea6300\u4e07\u4e2a\u5355\u8bcd\u548c\u77ed\u8bed\u3002\u8fd9\u6837\u7684\u6a21\u578b\u53ef\u80fd\u9700\u8981\u82b1\u8d39\u6570\u5c0f\u65f6\u6765\u8bad\u7ec3\uff0c\u4f46\u662f\u7531\u4e8e\u5df2\u7ecf\u53ef\u7528\uff0c\u56e0\u6b64\u4f7f\u7528Gensim\u8fdb\u884c\u4e0b\u8f7d\u548c\u52a0\u8f7d\u9700\u8981\u51e0\u5206\u949f\u3002 \u6ce8\u610f \uff1a\u8be5\u6a21\u578b\u5927\u7ea6\u4e3a2GB\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u4e00\u4e2a\u4e0d\u9519\u7684\u7f51\u7edc\u8fde\u63a5\u624d\u80fd\u7ee7\u7eed\u3002 \u5426\u5219\uff0c\u8bf7\u8df3\u81f3\u4e0b\u9762\u7684\u201c\u8bad\u7ec3\u81ea\u5df1\u7684\u6a21\u578b\u201d\u90e8\u5206\u3002 \u60a8\u4e5f\u53ef\u4ee5\u67e5\u770b\u201c \u5728\u7ebfword2vec\u6f14\u793a \u201d\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u4f7f\u7528\u5411\u91cf\u4ee3\u6570\u3002\u8be5\u6f14\u793a\u5728\u6574\u4e2aGoogle\u65b0\u95fb\u6570\u636e\u96c6 ( \u7ea61000\u4ebf\u4e2a\u5355\u8bcd ) \u4e0a\u8fd0\u884cword2vec\u3002 import gensim.downloader as api wv = api . load ( 'word2vec-google-news-300' ) \u5982\u679c\u4f60\u672c\u5730\u5df2\u7ecf\u4e0b\u8f7d\u597d\u4e86 GoogleNews-vectors-negative300.bin \u6a21\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u5bfc\u5165\u6a21\u578b\uff1a import gensim model_path = r \"C:\\Users\\two\\Desktop\\GoogleNews-vectors-negative300.bin\" wv = gensim . models . KeyedVectors . load_word2vec_format ( model_path , binary = True ) C : \\ Users \\ two \\ AppData \\ Roaming \\ Python \\ Python36 \\ site - packages \\ gensim \\ utils . py : 1209 : UserWarning : detected Windows ; aliasing chunkize to chunkize_serial warnings . warn ( \"detected Windows; aliasing chunkize to chunkize_serial\" ) 2020 - 01 - 21 15 : 28 : 51 , 172 : INFO : 'pattern' package not found ; tag filters are not available for English 2020 - 01 - 21 15 : 28 : 51 , 179 : INFO : loading projection weights from C : \\ Users \\ two \\ Desktop \\ GoogleNews - vectors - negative300 . bin C : \\ Users \\ two \\ AppData \\ Roaming \\ Python \\ Python36 \\ site - packages \\ smart_open \\ smart_open_lib . py : 402 : UserWarning : This function is deprecated , use smart_open . open instead . See the migration notes for details : https : // github . com / RaRe - Technologies / smart_open / blob / master / README . rst #migrating-to-the-new-open-function 'See the migration notes for details: %s ' % _MIGRATION_NOTES_URL 2020 - 01 - 21 15 : 29 : 25 , 376 : INFO : loaded ( 3000000 , 300 ) matrix from C : \\ Users \\ two \\ Desktop \\ GoogleNews - vectors - negative300 . bin \u5982\u679c\u52a0\u8f7d\u5165\u5b8c\u6574\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u770b\u5230\u63d0\u793a\uff1a INFO : loaded (3000000, 300) matrix from GoogleNews-vectors-negative300.bin \u8be5word2vec\u6a21\u578b\u7684\u8bcd\u5e93\u5305\u542b3000000\u4e2a\u5355\u8bcd\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u8bcd\u5411\u91cf\u6709300\u7ef4\u3002 \u83b7\u53d6\u8bcd\u5e93 \u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u68c0\u7d22\u6a21\u578b\u7684\u8bcd\u6c47\u8868\u3002 \u8fd9\u5f88\u7b80\u5355\uff1a # .vocab return dict {word:class gensim.models.keyedvectors.Vocab} # gensim.models.keyedvectors.Vocab: A single vocabulary item, used internally for collecting per-word frequency/sampling info, # and for constructing binary trees (incl. both word leaves and inner nodes). for i , word in enumerate ( wv . vocab ): if i == 10 : break print ( word ) print ( \"\u5f53\u524d\u8bcd\u5e93\u6709\" , len ( wv . vocab ), \"\u4e2a\u5355\u8bcd\" ) </ s > in for that is on ## The with said \u5f53\u524d\u8bcd\u5e93\u6709 3000000 \u4e2a\u5355\u8bcd # property # list of all words wv . index2word print ( \"\u5f53\u524d\u8bcd\u5e93\u6709\" , len ( wv . index2word ), \"\u4e2a\u5355\u8bcd\" ) \u5f53\u524d\u8bcd\u5e93\u6709 3000000 \u4e2a\u5355\u8bcd # property # list of all entities (words) wv . index2entity print ( \"\u5f53\u524d\u8bcd\u5e93\u6709\" , len ( wv . index2entity ), \"\u4e2a\u5355\u8bcd\" ) \u5f53\u524d\u8bcd\u5e93\u6709 3000000 \u4e2a\u5355\u8bcd \u83b7\u53d6\u8bcd\u5411\u91cf \u83b7\u53d6\u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a wv . vector_size 300 \u8be5 word2vec \u6a21\u578b\u7684\u8bcd\u5411\u91cf\u6709300\u7ef4\u3002 \u53ef\u4ee5\u8f7b\u677e\u5730\u83b7\u53d6\u5168\u90e8\u8bcd\u5411\u91cf\uff1a # property # \u5168\u90e8\u7684\u8bcd\u5411\u91cf print ( \"\u5b8c\u6574\u8bcd\u5411\u91cf\u77e9\u9635\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a\" , wv . vectors . shape ) wv . vectors # \u4e5f\u53ef\u4ee5\u4f7f\u7528 .syn0 \u5c5e\u6027\u83b7\u53d6\u5b8c\u6574\u7684\u8bcd\u5411\u91cf # \u4f46 .syn0 \u5c5e\u6027\u5728gensim4.0.0\u7248\u672c\u5c06\u4f1a\u88ab\u79fb\u9664\uff0c\u5efa\u8bae\u4f7f\u7528 .vectors \u5b8c\u6574\u8bcd\u5411\u91cf\u77e9\u9635\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a (3000000, 300) array([[ 1.1291504e-03, -8.9645386e-04, 3.1852722e-04, ..., -1.5640259e-03, -1.2302399e-04, -8.6307526e-05], [ 7.0312500e-02, 8.6914062e-02, 8.7890625e-02, ..., -4.7607422e-02, 1.4465332e-02, -6.2500000e-02], [-1.1779785e-02, -4.7363281e-02, 4.4677734e-02, ..., 7.1289062e-02, -3.4912109e-02, 2.4169922e-02], ..., [-1.9653320e-02, -9.0820312e-02, -1.9409180e-02, ..., -1.6357422e-02, -1.3427734e-02, 4.6630859e-02], [ 3.2714844e-02, -3.2226562e-02, 3.6132812e-02, ..., -8.8500977e-03, 2.6977539e-02, 1.9042969e-02], [ 4.5166016e-02, -4.5166016e-02, -3.9367676e-03, ..., 7.9589844e-02, 7.2265625e-02, 1.3000488e-02]], dtype=float32) \u83b7\u53d6\u6807\u51c6\u5316\u4e4b\u540e\u7684\u8bcd\u5411\u91cf\u77e9\u9635\uff08\u4f46\u9884\u8bad\u7ec3\u6a21\u578b\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027\uff0c\u56e0\u6b64\u4f1a\u629b\u51fa\u9519\u8bef\uff09\uff1a # wv.vector_size # property # \u5168\u90e8\u7684\u8bcd\u5411\u91cf print ( \"\u5b8c\u6574\u8bcd\u5411\u91cf\u77e9\u9635\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a\" , wv . vectors_norm . shape ) wv . vectors_norm # \u4e5f\u53ef\u4ee5\u4f7f\u7528 .syn0norm \u5c5e\u6027\u83b7\u53d6\u5b8c\u6574\u7684\u8bcd\u5411\u91cf # \u4f46 .syn0norm \u5c5e\u6027\u5728gensim4.0.0\u7248\u672c\u5c06\u4f1a\u88ab\u79fb\u9664\uff0c\u5efa\u8bae\u4f7f\u7528 .vectors_norm AttributeError: 'NoneType' object has no attribute 'shape' \u5bf9\u4e8e\u51fa\u73b0\u5728\u6a21\u578b\u8bcd\u5e93\u4e2d\u7684\u8bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u83b7\u5f97\u5b83\u7684\u5411\u91cf\u8868\u793a\uff1a vec_king = wv [ 'king' ] print ( \"\u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\uff1a\" , vec_king . shape ) pprint . pprint ( vec_king ) # \u53ef\u4ee5\u8fd9\u6837\u83b7\u53d6\u591a\u4e2a\u5355\u8bcd\u7684\u8bcd\u5411\u91cf # wv[['king','car']] \u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\uff1a (300,) array([ 1.25976562e-01, 2.97851562e-02, 8.60595703e-03, 1.39648438e-01, -2.56347656e-02, -3.61328125e-02, 1.11816406e-01, -1.98242188e-01, 5.12695312e-02, 3.63281250e-01, -2.42187500e-01, -3.02734375e-01, -1.77734375e-01, -2.49023438e-02, -1.67968750e-01, -1.69921875e-01, 3.46679688e-02, 5.21850586e-03, 4.63867188e-02, 1.28906250e-01, 1.36718750e-01, 1.12792969e-01, 5.95703125e-02, 1.36718750e-01, 1.01074219e-01, -1.76757812e-01, -2.51953125e-01, 5.98144531e-02, 3.41796875e-01, -3.11279297e-02, 1.04492188e-01, 6.17675781e-02, 1.24511719e-01, 4.00390625e-01, -3.22265625e-01, 8.39843750e-02, 3.90625000e-02, 5.85937500e-03, 7.03125000e-02, 1.72851562e-01, 1.38671875e-01, -2.31445312e-01, 2.83203125e-01, 1.42578125e-01, 3.41796875e-01, -2.39257812e-02, -1.09863281e-01, 3.32031250e-02, -5.46875000e-02, 1.53198242e-02, -1.62109375e-01, 1.58203125e-01, -2.59765625e-01, 2.01416016e-02, -1.63085938e-01, 1.35803223e-03, -1.44531250e-01, -5.68847656e-02, 4.29687500e-02, -2.46582031e-02, 1.85546875e-01, 4.47265625e-01, 9.58251953e-03, 1.31835938e-01, 9.86328125e-02, -1.85546875e-01, -1.00097656e-01, -1.33789062e-01, -1.25000000e-01, 2.83203125e-01, 1.23046875e-01, 5.32226562e-02, -1.77734375e-01, 8.59375000e-02, -2.18505859e-02, 2.05078125e-02, -1.39648438e-01, 2.51464844e-02, 1.38671875e-01, -1.05468750e-01, 1.38671875e-01, 8.88671875e-02, -7.51953125e-02, -2.13623047e-02, 1.72851562e-01, 4.63867188e-02, -2.65625000e-01, 8.91113281e-03, 1.49414062e-01, 3.78417969e-02, 2.38281250e-01, -1.24511719e-01, -2.17773438e-01, -1.81640625e-01, 2.97851562e-02, 5.71289062e-02, -2.89306641e-02, 1.24511719e-02, 9.66796875e-02, -2.31445312e-01, 5.81054688e-02, 6.68945312e-02, 7.08007812e-02, -3.08593750e-01, -2.14843750e-01, 1.45507812e-01, -4.27734375e-01, -9.39941406e-03, 1.54296875e-01, -7.66601562e-02, 2.89062500e-01, 2.77343750e-01, -4.86373901e-04, -1.36718750e-01, 3.24218750e-01, -2.46093750e-01, -3.03649902e-03, -2.11914062e-01, 1.25000000e-01, 2.69531250e-01, 2.04101562e-01, 8.25195312e-02, -2.01171875e-01, -1.60156250e-01, -3.78417969e-02, -1.20117188e-01, 1.15234375e-01, -4.10156250e-02, -3.95507812e-02, -8.98437500e-02, 6.34765625e-03, 2.03125000e-01, 1.86523438e-01, 2.73437500e-01, 6.29882812e-02, 1.41601562e-01, -9.81445312e-02, 1.38671875e-01, 1.82617188e-01, 1.73828125e-01, 1.73828125e-01, -2.37304688e-01, 1.78710938e-01, 6.34765625e-02, 2.36328125e-01, -2.08984375e-01, 8.74023438e-02, -1.66015625e-01, -7.91015625e-02, 2.43164062e-01, -8.88671875e-02, 1.26953125e-01, -2.16796875e-01, -1.73828125e-01, -3.59375000e-01, -8.25195312e-02, -6.49414062e-02, 5.07812500e-02, 1.35742188e-01, -7.47070312e-02, -1.64062500e-01, 1.15356445e-02, 4.45312500e-01, -2.15820312e-01, -1.11328125e-01, -1.92382812e-01, 1.70898438e-01, -1.25000000e-01, 2.65502930e-03, 1.92382812e-01, -1.74804688e-01, 1.39648438e-01, 2.92968750e-01, 1.13281250e-01, 5.95703125e-02, -6.39648438e-02, 9.96093750e-02, -2.72216797e-02, 1.96533203e-02, 4.27246094e-02, -2.46093750e-01, 6.39648438e-02, -2.25585938e-01, -1.68945312e-01, 2.89916992e-03, 8.20312500e-02, 3.41796875e-01, 4.32128906e-02, 1.32812500e-01, 1.42578125e-01, 7.61718750e-02, 5.98144531e-02, -1.19140625e-01, 2.74658203e-03, -6.29882812e-02, -2.72216797e-02, -4.82177734e-03, -8.20312500e-02, -2.49023438e-02, -4.00390625e-01, -1.06933594e-01, 4.24804688e-02, 7.76367188e-02, -1.16699219e-01, 7.37304688e-02, -9.22851562e-02, 1.07910156e-01, 1.58203125e-01, 4.24804688e-02, 1.26953125e-01, 3.61328125e-02, 2.67578125e-01, -1.01074219e-01, -3.02734375e-01, -5.76171875e-02, 5.05371094e-02, 5.26428223e-04, -2.07031250e-01, -1.38671875e-01, -8.97216797e-03, -2.78320312e-02, -1.41601562e-01, 2.07031250e-01, -1.58203125e-01, 1.27929688e-01, 1.49414062e-01, -2.24609375e-02, -8.44726562e-02, 1.22558594e-01, 2.15820312e-01, -2.13867188e-01, -3.12500000e-01, -3.73046875e-01, 4.08935547e-03, 1.07421875e-01, 1.06933594e-01, 7.32421875e-02, 8.97216797e-03, -3.88183594e-02, -1.29882812e-01, 1.49414062e-01, -2.14843750e-01, -1.83868408e-03, 9.91210938e-02, 1.57226562e-01, -1.14257812e-01, -2.05078125e-01, 9.91210938e-02, 3.69140625e-01, -1.97265625e-01, 3.54003906e-02, 1.09375000e-01, 1.31835938e-01, 1.66992188e-01, 2.35351562e-01, 1.04980469e-01, -4.96093750e-01, -1.64062500e-01, -1.56250000e-01, -5.22460938e-02, 1.03027344e-01, 2.43164062e-01, -1.88476562e-01, 5.07812500e-02, -9.37500000e-02, -6.68945312e-02, 2.27050781e-02, 7.61718750e-02, 2.89062500e-01, 3.10546875e-01, -5.37109375e-02, 2.28515625e-01, 2.51464844e-02, 6.78710938e-02, -1.21093750e-01, -2.15820312e-01, -2.73437500e-01, -3.07617188e-02, -3.37890625e-01, 1.53320312e-01, 2.33398438e-01, -2.08007812e-01, 3.73046875e-01, 8.20312500e-02, 2.51953125e-01, -7.61718750e-02, -4.66308594e-02, -2.23388672e-02, 2.99072266e-02, -5.93261719e-02, -4.66918945e-03, -2.44140625e-01, -2.09960938e-01, -2.87109375e-01, -4.54101562e-02, -1.77734375e-01, -2.79296875e-01, -8.59375000e-02, 9.13085938e-02, 2.51953125e-01], dtype=float32) \u4e5f\u53ef\u4ee5\u4f7f\u7528 .get_vector() \u65b9\u6cd5\u83b7\u53d6\u8bcd\u5411\u91cf\uff0c\u4f46 .get_vector() \u65b9\u6cd5\u6bcf\u4e00\u6b21\u53ea\u80fd\u83b7\u53d6\u4e00\u4e2a\u8bcd\u5411\u91cf\uff1a wv . get_vector ( \"king\" ) array([ 1.25976562e-01, 2.97851562e-02, 8.60595703e-03, 1.39648438e-01, -2.56347656e-02, -3.61328125e-02, 1.11816406e-01, -1.98242188e-01, 5.12695312e-02, 3.63281250e-01, -2.42187500e-01, -3.02734375e-01, -1.77734375e-01, -2.49023438e-02, -1.67968750e-01, -1.69921875e-01, 3.46679688e-02, 5.21850586e-03, 4.63867188e-02, 1.28906250e-01, 1.36718750e-01, 1.12792969e-01, 5.95703125e-02, 1.36718750e-01, 1.01074219e-01, -1.76757812e-01, -2.51953125e-01, 5.98144531e-02, 3.41796875e-01, -3.11279297e-02, 1.04492188e-01, 6.17675781e-02, 1.24511719e-01, 4.00390625e-01, -3.22265625e-01, 8.39843750e-02, 3.90625000e-02, 5.85937500e-03, 7.03125000e-02, 1.72851562e-01, 1.38671875e-01, -2.31445312e-01, 2.83203125e-01, 1.42578125e-01, 3.41796875e-01, -2.39257812e-02, -1.09863281e-01, 3.32031250e-02, -5.46875000e-02, 1.53198242e-02, -1.62109375e-01, 1.58203125e-01, -2.59765625e-01, 2.01416016e-02, -1.63085938e-01, 1.35803223e-03, -1.44531250e-01, -5.68847656e-02, 4.29687500e-02, -2.46582031e-02, 1.85546875e-01, 4.47265625e-01, 9.58251953e-03, 1.31835938e-01, 9.86328125e-02, -1.85546875e-01, -1.00097656e-01, -1.33789062e-01, -1.25000000e-01, 2.83203125e-01, 1.23046875e-01, 5.32226562e-02, -1.77734375e-01, 8.59375000e-02, -2.18505859e-02, 2.05078125e-02, -1.39648438e-01, 2.51464844e-02, 1.38671875e-01, -1.05468750e-01, 1.38671875e-01, 8.88671875e-02, -7.51953125e-02, -2.13623047e-02, 1.72851562e-01, 4.63867188e-02, -2.65625000e-01, 8.91113281e-03, 1.49414062e-01, 3.78417969e-02, 2.38281250e-01, -1.24511719e-01, -2.17773438e-01, -1.81640625e-01, 2.97851562e-02, 5.71289062e-02, -2.89306641e-02, 1.24511719e-02, 9.66796875e-02, -2.31445312e-01, 5.81054688e-02, 6.68945312e-02, 7.08007812e-02, -3.08593750e-01, -2.14843750e-01, 1.45507812e-01, -4.27734375e-01, -9.39941406e-03, 1.54296875e-01, -7.66601562e-02, 2.89062500e-01, 2.77343750e-01, -4.86373901e-04, -1.36718750e-01, 3.24218750e-01, -2.46093750e-01, -3.03649902e-03, -2.11914062e-01, 1.25000000e-01, 2.69531250e-01, 2.04101562e-01, 8.25195312e-02, -2.01171875e-01, -1.60156250e-01, -3.78417969e-02, -1.20117188e-01, 1.15234375e-01, -4.10156250e-02, -3.95507812e-02, -8.98437500e-02, 6.34765625e-03, 2.03125000e-01, 1.86523438e-01, 2.73437500e-01, 6.29882812e-02, 1.41601562e-01, -9.81445312e-02, 1.38671875e-01, 1.82617188e-01, 1.73828125e-01, 1.73828125e-01, -2.37304688e-01, 1.78710938e-01, 6.34765625e-02, 2.36328125e-01, -2.08984375e-01, 8.74023438e-02, -1.66015625e-01, -7.91015625e-02, 2.43164062e-01, -8.88671875e-02, 1.26953125e-01, -2.16796875e-01, -1.73828125e-01, -3.59375000e-01, -8.25195312e-02, -6.49414062e-02, 5.07812500e-02, 1.35742188e-01, -7.47070312e-02, -1.64062500e-01, 1.15356445e-02, 4.45312500e-01, -2.15820312e-01, -1.11328125e-01, -1.92382812e-01, 1.70898438e-01, -1.25000000e-01, 2.65502930e-03, 1.92382812e-01, -1.74804688e-01, 1.39648438e-01, 2.92968750e-01, 1.13281250e-01, 5.95703125e-02, -6.39648438e-02, 9.96093750e-02, -2.72216797e-02, 1.96533203e-02, 4.27246094e-02, -2.46093750e-01, 6.39648438e-02, -2.25585938e-01, -1.68945312e-01, 2.89916992e-03, 8.20312500e-02, 3.41796875e-01, 4.32128906e-02, 1.32812500e-01, 1.42578125e-01, 7.61718750e-02, 5.98144531e-02, -1.19140625e-01, 2.74658203e-03, -6.29882812e-02, -2.72216797e-02, -4.82177734e-03, -8.20312500e-02, -2.49023438e-02, -4.00390625e-01, -1.06933594e-01, 4.24804688e-02, 7.76367188e-02, -1.16699219e-01, 7.37304688e-02, -9.22851562e-02, 1.07910156e-01, 1.58203125e-01, 4.24804688e-02, 1.26953125e-01, 3.61328125e-02, 2.67578125e-01, -1.01074219e-01, -3.02734375e-01, -5.76171875e-02, 5.05371094e-02, 5.26428223e-04, -2.07031250e-01, -1.38671875e-01, -8.97216797e-03, -2.78320312e-02, -1.41601562e-01, 2.07031250e-01, -1.58203125e-01, 1.27929688e-01, 1.49414062e-01, -2.24609375e-02, -8.44726562e-02, 1.22558594e-01, 2.15820312e-01, -2.13867188e-01, -3.12500000e-01, -3.73046875e-01, 4.08935547e-03, 1.07421875e-01, 1.06933594e-01, 7.32421875e-02, 8.97216797e-03, -3.88183594e-02, -1.29882812e-01, 1.49414062e-01, -2.14843750e-01, -1.83868408e-03, 9.91210938e-02, 1.57226562e-01, -1.14257812e-01, -2.05078125e-01, 9.91210938e-02, 3.69140625e-01, -1.97265625e-01, 3.54003906e-02, 1.09375000e-01, 1.31835938e-01, 1.66992188e-01, 2.35351562e-01, 1.04980469e-01, -4.96093750e-01, -1.64062500e-01, -1.56250000e-01, -5.22460938e-02, 1.03027344e-01, 2.43164062e-01, -1.88476562e-01, 5.07812500e-02, -9.37500000e-02, -6.68945312e-02, 2.27050781e-02, 7.61718750e-02, 2.89062500e-01, 3.10546875e-01, -5.37109375e-02, 2.28515625e-01, 2.51464844e-02, 6.78710938e-02, -1.21093750e-01, -2.15820312e-01, -2.73437500e-01, -3.07617188e-02, -3.37890625e-01, 1.53320312e-01, 2.33398438e-01, -2.08007812e-01, 3.73046875e-01, 8.20312500e-02, 2.51953125e-01, -7.61718750e-02, -4.66308594e-02, -2.23388672e-02, 2.99072266e-02, -5.93261719e-02, -4.66918945e-03, -2.44140625e-01, -2.09960938e-01, -2.87109375e-01, -4.54101562e-02, -1.77734375e-01, -2.79296875e-01, -8.59375000e-02, 9.13085938e-02, 2.51953125e-01], dtype=float32) .get_vector() \u65b9\u6cd5\u7b49\u6548\u4e8e .word_vec(word, use_norm=False) \uff0c\u4f46 .word_vec(word, use_norm=False) \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7 use_norm \u53c2\u6570\u63a7\u5236\u662f\u5426\u8fd4\u56deL2\u5f52\u4e00\u5316\u540e\u7684\u8bcd\u5411\u91cf\uff1a \"\"\" use_norm (bool, optional) \u2013 If True - resulting vector will be L2-normalized (unit euclidean length). \"\"\" wv . word_vec ( 'king' , use_norm = False ) array([ 1.25976562e-01, 2.97851562e-02, 8.60595703e-03, 1.39648438e-01, -2.56347656e-02, -3.61328125e-02, 1.11816406e-01, -1.98242188e-01, 5.12695312e-02, 3.63281250e-01, -2.42187500e-01, -3.02734375e-01, -1.77734375e-01, -2.49023438e-02, -1.67968750e-01, -1.69921875e-01, 3.46679688e-02, 5.21850586e-03, 4.63867188e-02, 1.28906250e-01, 1.36718750e-01, 1.12792969e-01, 5.95703125e-02, 1.36718750e-01, 1.01074219e-01, -1.76757812e-01, -2.51953125e-01, 5.98144531e-02, 3.41796875e-01, -3.11279297e-02, 1.04492188e-01, 6.17675781e-02, 1.24511719e-01, 4.00390625e-01, -3.22265625e-01, 8.39843750e-02, 3.90625000e-02, 5.85937500e-03, 7.03125000e-02, 1.72851562e-01, 1.38671875e-01, -2.31445312e-01, 2.83203125e-01, 1.42578125e-01, 3.41796875e-01, -2.39257812e-02, -1.09863281e-01, 3.32031250e-02, -5.46875000e-02, 1.53198242e-02, -1.62109375e-01, 1.58203125e-01, -2.59765625e-01, 2.01416016e-02, -1.63085938e-01, 1.35803223e-03, -1.44531250e-01, -5.68847656e-02, 4.29687500e-02, -2.46582031e-02, 1.85546875e-01, 4.47265625e-01, 9.58251953e-03, 1.31835938e-01, 9.86328125e-02, -1.85546875e-01, -1.00097656e-01, -1.33789062e-01, -1.25000000e-01, 2.83203125e-01, 1.23046875e-01, 5.32226562e-02, -1.77734375e-01, 8.59375000e-02, -2.18505859e-02, 2.05078125e-02, -1.39648438e-01, 2.51464844e-02, 1.38671875e-01, -1.05468750e-01, 1.38671875e-01, 8.88671875e-02, -7.51953125e-02, -2.13623047e-02, 1.72851562e-01, 4.63867188e-02, -2.65625000e-01, 8.91113281e-03, 1.49414062e-01, 3.78417969e-02, 2.38281250e-01, -1.24511719e-01, -2.17773438e-01, -1.81640625e-01, 2.97851562e-02, 5.71289062e-02, -2.89306641e-02, 1.24511719e-02, 9.66796875e-02, -2.31445312e-01, 5.81054688e-02, 6.68945312e-02, 7.08007812e-02, -3.08593750e-01, -2.14843750e-01, 1.45507812e-01, -4.27734375e-01, -9.39941406e-03, 1.54296875e-01, -7.66601562e-02, 2.89062500e-01, 2.77343750e-01, -4.86373901e-04, -1.36718750e-01, 3.24218750e-01, -2.46093750e-01, -3.03649902e-03, -2.11914062e-01, 1.25000000e-01, 2.69531250e-01, 2.04101562e-01, 8.25195312e-02, -2.01171875e-01, -1.60156250e-01, -3.78417969e-02, -1.20117188e-01, 1.15234375e-01, -4.10156250e-02, -3.95507812e-02, -8.98437500e-02, 6.34765625e-03, 2.03125000e-01, 1.86523438e-01, 2.73437500e-01, 6.29882812e-02, 1.41601562e-01, -9.81445312e-02, 1.38671875e-01, 1.82617188e-01, 1.73828125e-01, 1.73828125e-01, -2.37304688e-01, 1.78710938e-01, 6.34765625e-02, 2.36328125e-01, -2.08984375e-01, 8.74023438e-02, -1.66015625e-01, -7.91015625e-02, 2.43164062e-01, -8.88671875e-02, 1.26953125e-01, -2.16796875e-01, -1.73828125e-01, -3.59375000e-01, -8.25195312e-02, -6.49414062e-02, 5.07812500e-02, 1.35742188e-01, -7.47070312e-02, -1.64062500e-01, 1.15356445e-02, 4.45312500e-01, -2.15820312e-01, -1.11328125e-01, -1.92382812e-01, 1.70898438e-01, -1.25000000e-01, 2.65502930e-03, 1.92382812e-01, -1.74804688e-01, 1.39648438e-01, 2.92968750e-01, 1.13281250e-01, 5.95703125e-02, -6.39648438e-02, 9.96093750e-02, -2.72216797e-02, 1.96533203e-02, 4.27246094e-02, -2.46093750e-01, 6.39648438e-02, -2.25585938e-01, -1.68945312e-01, 2.89916992e-03, 8.20312500e-02, 3.41796875e-01, 4.32128906e-02, 1.32812500e-01, 1.42578125e-01, 7.61718750e-02, 5.98144531e-02, -1.19140625e-01, 2.74658203e-03, -6.29882812e-02, -2.72216797e-02, -4.82177734e-03, -8.20312500e-02, -2.49023438e-02, -4.00390625e-01, -1.06933594e-01, 4.24804688e-02, 7.76367188e-02, -1.16699219e-01, 7.37304688e-02, -9.22851562e-02, 1.07910156e-01, 1.58203125e-01, 4.24804688e-02, 1.26953125e-01, 3.61328125e-02, 2.67578125e-01, -1.01074219e-01, -3.02734375e-01, -5.76171875e-02, 5.05371094e-02, 5.26428223e-04, -2.07031250e-01, -1.38671875e-01, -8.97216797e-03, -2.78320312e-02, -1.41601562e-01, 2.07031250e-01, -1.58203125e-01, 1.27929688e-01, 1.49414062e-01, -2.24609375e-02, -8.44726562e-02, 1.22558594e-01, 2.15820312e-01, -2.13867188e-01, -3.12500000e-01, -3.73046875e-01, 4.08935547e-03, 1.07421875e-01, 1.06933594e-01, 7.32421875e-02, 8.97216797e-03, -3.88183594e-02, -1.29882812e-01, 1.49414062e-01, -2.14843750e-01, -1.83868408e-03, 9.91210938e-02, 1.57226562e-01, -1.14257812e-01, -2.05078125e-01, 9.91210938e-02, 3.69140625e-01, -1.97265625e-01, 3.54003906e-02, 1.09375000e-01, 1.31835938e-01, 1.66992188e-01, 2.35351562e-01, 1.04980469e-01, -4.96093750e-01, -1.64062500e-01, -1.56250000e-01, -5.22460938e-02, 1.03027344e-01, 2.43164062e-01, -1.88476562e-01, 5.07812500e-02, -9.37500000e-02, -6.68945312e-02, 2.27050781e-02, 7.61718750e-02, 2.89062500e-01, 3.10546875e-01, -5.37109375e-02, 2.28515625e-01, 2.51464844e-02, 6.78710938e-02, -1.21093750e-01, -2.15820312e-01, -2.73437500e-01, -3.07617188e-02, -3.37890625e-01, 1.53320312e-01, 2.33398438e-01, -2.08007812e-01, 3.73046875e-01, 8.20312500e-02, 2.51953125e-01, -7.61718750e-02, -4.66308594e-02, -2.23388672e-02, 2.99072266e-02, -5.93261719e-02, -4.66918945e-03, -2.44140625e-01, -2.09960938e-01, -2.87109375e-01, -4.54101562e-02, -1.77734375e-01, -2.79296875e-01, -8.59375000e-02, 9.13085938e-02, 2.51953125e-01], dtype=float32) \u4e0d\u5e78\u7684\u662f\uff0c\u8be5word2vec\u6a21\u578b\u65e0\u6cd5\u63a8\u65ad\u51fa\u964c\u751f\u5355\u8bcd\u7684\u5411\u91cf\u3002\u8fd9\u662fWord2Vec\u7684\u4e00\u4e2a\u5c40\u9650\uff1a\u5982\u679c\u4f60\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\uff0c\u8bf7\u67e5\u770bFastText\u6a21\u578b\u3002 try : vec_cameroon = wv [ 'cameroon' ] except KeyError : print ( \"The word 'cameroon' does not appear in this model\" ) The word 'cameroon' does not appear in this model \u76f8\u4f3c\u6027\u4efb\u52a1 Word2Vec\u652f\u6301\u591a\u4e2a\u5355\u8bcd\u76f8\u4f3c\u6027\u4efb\u52a1\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u76f8\u4f3c\u5ea6\u5982\u4f55\u968f\u7740\u5355\u8bcd\u53d8\u5f97\u8d8a\u6765\u8d8a\u5c11\u800c\u76f4\u89c2\u5730\u964d\u4f4e\u3002 pairs = [ ( 'car' , 'minivan' ), # a minivan is a kind of car ( 'car' , 'bicycle' ), # still a wheeled vehicle ( 'car' , 'airplane' ), # ok, no wheels, but still a vehicle ( 'car' , 'cereal' ), # ... and so on ( 'car' , 'communism' ), ] for w1 , w2 in pairs : print ( ' %r \\t %r \\t %.2f ' % ( w1 , w2 , wv . similarity ( w1 , w2 ))) 'car' 'minivan' 0.69 'car' 'bicycle' 0.54 'car' 'airplane' 0.42 'car' 'cereal' 0.14 'car' 'communism' 0.06 \u627e\u51fa5\u4e2a\u4e0ecar\u6216minivan\u6700\u76f8\u4f3c\u7684\u8bcd\uff1a \"\"\" most_similar(positive=None, negative=None, topn=10, restrict_vocab=None, indexer=None) restrict_vocab: int \u7528\u4e8e\u9650\u5236\u641c\u7d22\u6700\u76f8\u4f3c\u5355\u8bcd\u7684\u5411\u91cf\u8303\u56f4\u3002 \u4f8b\u5982\uff0crestrict_vocab=10000\u5c06\u53ea\u68c0\u67e5\u8bcd\u5e93\u987a\u5e8f\u4e2d\u7684\u524d10000\u4e2a\u8bcd\u5411\u91cf\u3002 \u5982\u679c\u8bcd\u5e93\u7684\u6392\u5e8f\u662f\u6309\u987a\u5e8f\u7684\uff0c\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\u53ef\u80fd\u4f1a\u6709\u610f\u4e49\u3002 \u627e\u51fa\u6700\u76f8\u4f3c\uff08\u6216\u6700\u4e0d\u76f8\u4f3c\uff09\u7684\u524dtopn\u4e2a\u5355\u8bcd\u3002 \"\"\" wv . most_similar ( positive = [ 'car' , 'minivan' ], topn = 5 ) [('SUV', 0.8532191514968872), ('vehicle', 0.8175784349441528), ('pickup_truck', 0.7763689160346985), ('Jeep', 0.7567334175109863), ('Ford_Explorer', 0.7565719485282898)] \u627e\u51fa5\u4e2a\u4e0ecar\u6216minivan\u6700\u4e0d\u76f8\u4f3c\u7684\u8bcd\uff1a wv . most_similar ( negative = [ 'car' , 'minivan' ], topn = 5 ) [('Philippe_Giaro_P.Geol', 0.31101420521736145), ('K.Kahne_###-###', 0.3042159676551819), ('C.Bowyer_###-###', 0.278561532497406), ('M.Truex_Jr._###-###', 0.27755749225616455), ('By_SEAN_BARRON', 0.27275702357292175)] .most_similar_cosmul() \u65b9\u6cd5\u4e0e .most_similar() \u65b9\u6cd5\u76f8\u4f3c\uff0c\u4f46\u662f .most_similar_cosmul() \u65b9\u6cd5\u4f7f\u7528multiplicative combination objective\u65b9\u6cd5\u53bb\u8ba1\u7b97\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 .most_similar_cosmul() \u8fd4\u56de\u7684\u6392\u540d\u4e0e .most_similar() \u76f8\u540c\u3002 multiplicative combination objective\u8ba1\u7b97\u65b9\u6cd5\u51fa\u81ea Omer Levy and Yoav Goldberg \u201cLinguistic Regularities in Sparse and Explicit Word Representations\u201d \"\"\" most_similar_cosmul(positive=None, negative=None, topn=10) \u627e\u6700\u76f8\u4f3c\u7684\u524dn\u4e2a\u5355\u8bcd \"\"\" wv . most_similar_cosmul ( positive = [ 'car' , 'minivan' ], topn = 5 ) [('SUV', 0.7949184775352478), ('vehicle', 0.7668868899345398), ('pickup_truck', 0.733077883720398), ('Jeep', 0.7184048891067505), ('Ford_Explorer', 0.7173909544944763)] \u5355\u8bcdwater\u4e0e\u5217\u8868\u4e2d\u54ea\u4e2a\u5355\u8bcd\u6700\u76f8\u4f3c\uff1f \"\"\" most_similar_to_given(entity1, entities_list) \u4eceentities_list\u83b7\u53d6\u4e0eentity1\u6700\u76f8\u4f3c\u7684entity\u3002 \"\"\" wv . most_similar_to_given ( entity1 = 'air' , entities_list = [ 'car' , 'minivan' , 'fire' , 'water' , 'land' , 'sea' ]) 'water' \u4ee5\u4e0b\u54ea\u4e2a\u4e0d\u5c5e\u4e8e\u8be5\u5e8f\u5217\uff1f wv . doesnt_match ([ 'fire' , 'water' , 'land' , 'sea' , 'air' , 'car' ]) C :\\ Users \\ two \\ AppData \\ Roaming \\ Python \\ Python36 \\ site - packages \\ gensim \\ models \\ keyedvectors . py : 893 : FutureWarning : arrays to stack must be passed as a \" sequence \" type such as list or tuple . Support for non - sequence iterables such as generators is deprecated as of NumPy 1 . 16 and will raise an error in the future . vectors = vstack ( self . word_vec ( word , use_norm = True ) for word in used_words ) . astype ( REAL ) ' car ' \u5728\u8bcd\u5e93\u4e2d\uff0c\u54ea\u4e9b\u5355\u8bcd\u6bd4SUV\u66f4\u63a5\u8fd1car\uff1f \"\"\" words_closer_than(w1, w2) w1 (str) \u2013 Input word. w2 (str) \u2013 Input word. \u5728\u8bcd\u5e93\u4e2d\u83b7\u53d6\u6240\u6709\u6bd4w2\u66f4\u63a5\u8fd1w1\u7684\u5355\u8bcd\u3002 \"\"\" wv . words_closer_than ( 'car' , 'SUV' ) ['vehicle', 'cars'] \"\"\" closer_than(entity1, entity2) \u83b7\u53d6\u6240\u6709\u6bd4entity2\u66f4\u63a5\u8fd1entity1\u7684entities\u3002 \"\"\" wv . closer_than ( 'car' , 'SUV' ) ['vehicle', 'cars'] wv . get_keras_embedding () Using TensorFlow backend. 2020-01-03 11:23:01,818 : WARNING : From C:\\Users\\two\\Anaconda3\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead. <keras.layers.embeddings.Embedding at 0x2663d025eb8> # wv.wmdistance(['car','minivan'], ['car']) errror:No module named 'pyemd' # \u67e5\u770b word2vec model\u7684\u5168\u90e8\u5c5e\u6027 [ i for i in dir ( wv ) if not i . startswith ( \"_\" )] \u83b7\u53d6\u4f59\u5f26\u8ddd\u79bb \"\"\" distance(w1, w2) w1: str \u2013 Input word w2: str \u2013 Input word \u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u4f59\u5f26\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u5c0f\u8d8a\u76f8\u4f3c\u3002 \"\"\" wv . distance ( \"car\" , \"vehicle\" ) 0.21789032220840454 \"\"\" distances(word_or_vector, other_words=()) word_or_vector: str, numpy.ndarray \u2013 Word or vector from which distances are to be computed. other_words: iterable of str \u2013 \u5982\u679cother_words\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deword_or_vectors\u548cvocab\u4e2d\u6240\u6709\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u8ba1\u7b97\u5355\u8bcdword_or_vector\u548cother_words\u4e2d\u6240\u6709\u5355\u8bcd\u7684\u4f59\u5f26\u8ddd\u79bb\u3002 \"\"\" wv . distances ( word_or_vector = \"car\" , other_words = ( \"vehicle\" , 'SUV' , 'truck' , 'minivan' , 'car' )) array([0.21789044, 0.28390366, 0.32642102, 0.30929637, 0. ], dtype=float32) \u83b7\u53d6\u4f59\u5f26\u76f8\u4f3c\u5ea6 \"\"\" similarity(w1, w2) w1 (str) \u2013 Input word. w2 (str) \u2013 Input word. \u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . similarity ( \"car\" , \"car\" ) 1.0 \"\"\" n_similarity(ws1, ws2) ws1 (list of str) \u2013 Sequence of words. ws2 (list of str) \u2013 Sequence of words. \u8ba1\u7b97\u4e24\u7ec4\u5355\u8bcd\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . n_similarity ([ 'car' , 'minivan' ], [ 'car' ]) 0.89490217 \"\"\" # \u9759\u6001\u65b9\u6cd5 cosine_similarities(vector_1, vectors_all) vector_1 (numpy.ndarray) shape (dim,). vectors_all (numpy.ndarray) shape (num_vectors, dim). \u8ba1\u7b97\u4e00\u4e2a\u5411\u91cf\u548c\u4e00\u7ec4\u5176\u4ed6\u5411\u91cf\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . cosine_similarities ([ 1 , 2 , 3 ], [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]) array([1. , 0.97463185]) \u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff1a \u8ba1\u7b97\u65b9\u6cd5\u51fa\u81ea Artuur Leeuwenberga, Mihaela Velab , Jon Dehdaribc, Josef van Genabithbc \u201cA Minimally Supervised Approach for Synonym Extraction with Word Embeddings\u201d \u7684\u516c\u5f0f(1)\u3002 \"\"\" relative_cosine_similarity(wa, wb, topn=10) \u7ed9\u5b9a\u524dn\u4e2a\u76f8\u4f3c\u7684\u5355\u8bcd\uff0c\u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . relative_cosine_similarity ( wa = 'car' , wb = 'minivan' , topn = 10 ) 0.1001322352889656 \u83b7\u53d6\u8ddd\u79bb\u6392\u540d \"\"\" rank(entity1, entity2) \u76f8\u5bf9\u4e8e\u6240\u6709entitie\u5230entity1\u7684\u8ddd\u79bb\uff0centity2\u5230entity1\u7684\u8ddd\u79bb\u7684\u6392\u540d\u3002 \"\"\" print ( wv . rank ( entity1 = 'car' , entity2 = 'cars' )) print ( wv . rank ( entity1 = 'car' , entity2 = 'car' )) 2 1 \u8bad\u7ec3\u81ea\u5df1\u7684\u6a21\u578b \u9996\u5148\uff0c\u4f60\u9700\u8981\u4e00\u4e9b\u6570\u636e\u6765\u8bad\u7ec3\u6a21\u578b\u3002 \u5bf9\u4e8e\u4ee5\u4e0b\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Lee Corpus \u6570\u636e \uff0cgensim\u5e93\u5df2\u5e26\u6709\u8be5\u6570\u636e\u96c6\u3002 \u8fd9\u4e2a\u8bed\u6599\u5e93\u8db3\u591f\u5c0f\uff0c\u53ef\u4ee5\u5b8c\u5168\u52a0\u8f7d\u5165\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u5bf9\u5185\u5b58\u53cb\u597d\u7684\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u9010\u884c\u8bfb\u53d6\u5b83\uff0c\u7528\u6765\u6f14\u793agensim\u5982\u4f55\u5904\u7406\u66f4\u5927\u7684\u8bed\u6599\u5e93\u3002 from gensim.test.utils import datapath from gensim import utils class MyCorpus ( object ): \"\"\"\u4ea7\u751f\u53e5\u5b50\uff08lists of str\uff09\u7684\u8fed\u4ee3\u5668\u3002\"\"\" def __iter__ ( self ): corpus_path = datapath ( 'lee_background.cor' ) for line in open ( corpus_path ): # \u5047\u8bbe\u6bcf\u884c\u6709\u4e00\u4e2a\u6587\u6863\uff0ctokens\u88ab\u7a7a\u683c\u5206\u5f00 yield utils . simple_preprocess ( line ) 2020 - 01 - 02 21 : 16 : 01 , 714 : INFO : adding document # 0 to Dictionary ( 0 unique to kens : [] ) 2020 - 01 - 02 21 : 16 : 01 , 716 : INFO : built Dictionary ( 12 unique to kens : [' computer ' , ' human ' , ' int erface ' , ' response ' , ' survey '] ... ) from 9 documents ( to tal 29 corpus pos itions ) \u5982\u679c\u6211\u4eec\u60f3\u8fdb\u884c\u4efb\u4f55\u81ea\u5b9a\u4e49\u7684\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff1a\u89e3\u7801\u975e\u6807\u51c6\u7f16\u7801\u6570\u636e\u3001\u5b57\u6bcd\u5c0f\u5199\u5316\u3001\u5220\u9664\u6570\u5b57\u3001\u63d0\u53d6\u547d\u540d\u5b9e\u4f53\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u5728 MyCorpus \u8fed\u4ee3\u5668\u5185\u5b8c\u6210\uff0c\u800c word2vec \u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e9b\u5904\u7406\u3002 word2vec \u53ea\u9700\u8f93\u5165\u7684\u8fed\u4ee3\u5668\u4ea7\u751f\u4e00\u4e2a\u53c8\u4e00\u4e2a\u53e5\u5b50(list of utf-8 words) \u3002 \u8ba9\u6211\u4eec\u7ee7\u7eed\uff0c\u5728\u6211\u4eec\u7684\u8bed\u6599\u5e93\u4e0a\u8bad\u7ec3\u6a21\u578b\u3002 \u6682\u65f6\u4e0d\u5fc5\u62c5\u5fc3\u8bad\u7ec3\u53c2\u6570\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u5bf9\u5176\u8fdb\u884c\u8ba8\u8bba\u3002 import gensim.models sentences = MyCorpus () model = gensim . models . Word2Vec ( sentences = sentences ) 2020 - 01 - 02 21 : 16 : 05 , 695 : INFO : collecting all words and their counts 2020 - 01 - 02 21 : 16 : 05 , 698 : INFO : PROGRESS : at sentence # 0 , processed 0 words , keeping 0 word types 2020 - 01 - 02 21 : 16 : 06 , 042 : INFO : collected 6981 word types from a corpus of 58152 raw words and 300 sentences 2020 - 01 - 02 21 : 16 : 06 , 047 : INFO : Load ing a fre sh vocabulary 2020 - 01 - 02 21 : 16 : 06 , 126 : INFO : effective_min_count = 5 retains 1750 unique words ( 25 % of or iginal 6981 , drops 5231 ) 2020 - 01 - 02 21 : 16 : 06 , 128 : INFO : effective_min_count = 5 leaves 49335 word corpus ( 84 % of or iginal 58152 , drops 8817 ) 2020 - 01 - 02 21 : 16 : 06 , 140 : INFO : deleting the raw counts dictionary of 6981 items 2020 - 01 - 02 21 : 16 : 06 , 142 : INFO : sample = 0.001 downsamples 51 most - common words 2020 - 01 - 02 21 : 16 : 06 , 145 : INFO : downsampling leaves estimated 35935 word corpus ( 72.8 % of prior 49335 ) 2020 - 01 - 02 21 : 16 : 06 , 156 : INFO : estimated required memory for 1750 words and 100 dim ensions : 2275000 bytes 2020 - 01 - 02 21 : 16 : 06 , 157 : INFO : resetting layer weights 2020 - 01 - 02 21 : 16 : 06 , 683 : INFO : training model with 3 workers on 1750 vocabulary and 100 features , using sg = 0 hs = 0 sample = 0.001 negative = 5 window = 5 2020 - 01 - 02 21 : 16 : 06 , 863 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 06 , 877 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 06 , 884 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 06 , 886 : INFO : EPOCH - 1 : training on 58152 raw words ( 35883 effective words ) to ok 0.2 s , 180122 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 060 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 062 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 075 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 077 : INFO : EPOCH - 2 : training on 58152 raw words ( 35909 effective words ) to ok 0.2 s , 192286 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 249 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 251 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 268 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 269 : INFO : EPOCH - 3 : training on 58152 raw words ( 36011 effective words ) to ok 0.2 s , 190390 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 485 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 490 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 504 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 506 : INFO : EPOCH - 4 : training on 58152 raw words ( 35955 effective words ) to ok 0.2 s , 154656 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 709 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 711 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 723 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 724 : INFO : EPOCH - 5 : training on 58152 raw words ( 35937 effective words ) to ok 0.2 s , 167155 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 726 : INFO : training on a 290760 raw words ( 179695 effective words ) to ok 1.0 s , 172497 effective words / s \u5efa\u7acb\u6a21\u578b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e\u4e0a\u9762\u6f14\u793a\u76f8\u540c\u7684\u65b9\u6cd5\u3002 \u6a21\u578b\u7684\u4e3b\u8981\u90e8\u5206\u662f model.wv \uff0c\u5176\u4e2d wv \u4ee3\u8868word vector\u3002 vec_king = model . wv [ 'king' ]; vec_king array([-0.00835394, -0.0045849 , 0.02337644, 0.06137834, 0.03927568, 0.0771808 , -0.00613491, 0.04881869, -0.01778515, -0.05783534, 0.05000733, 0.04546838, -0.04622583, 0.02119355, -0.08289969, 0.06297314, 0.00819165, -0.04722812, -0.01712785, -0.06220391, -0.01792748, -0.01274053, 0.03496742, -0.0297276 , -0.06460014, 0.04213679, -0.02229733, 0.07136393, 0.00484056, -0.00886152, -0.00471885, -0.00707228, 0.00073703, 0.00370342, -0.0162351 , 0.01090373, 0.02818023, -0.04841179, 0.04993173, 0.04033299, -0.0018242 , -0.00435686, 0.08839191, -0.06075187, -0.00611064, 0.00549908, -0.00981818, 0.0147628 , -0.03261513, 0.00605273, 0.03322693, 0.03558705, 0.03365535, -0.01211257, -0.05132781, 0.00949616, -0.00190306, 0.03689624, -0.01641419, -0.00697564, 0.03875671, 0.01708069, 0.00355519, 0.01152966, 0.04929205, 0.02247121, -0.01232615, 0.0412309 , 0.00039095, -0.01177677, -0.03727527, 0.07211189, -0.02746879, 0.01342012, -0.03975392, 0.01483131, 0.02386127, 0.01227524, -0.01146569, -0.00367378, 0.00885449, -0.01065395, 0.01139999, -0.03370672, -0.00587148, 0.02534425, 0.01000963, -0.04751983, -0.01368179, -0.0111518 , 0.03696112, 0.02186877, -0.03961398, -0.00126779, 0.02945407, -0.01498374, 0.00616166, -0.01830531, -0.0072393 , -0.01315761], dtype=float32) \u68c0\u7d22\u8bcd\u6c47\u7684\u65b9\u6cd5\u76f8\u540c\uff1a for i , word in enumerate ( model . wv . vocab ): if i == 10 : break print ( word ) hundreds of people have been forced to their homes in \u5b58\u50a8\u548c\u52a0\u8f7d\u6a21\u578b \u5982\u679c\u8bed\u6599\u5e93\u8f83\u5927\uff0c\u8bad\u7ec3\u6a21\u578b\u4f1a\u82b1\u8d39\u4e0d\u5c11\u65f6\u95f4\u3002\u5982\u679c\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5c06\u5176\u4fdd\u5b58\u5230\u78c1\u76d8\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u4e0d\u5fc5\u5728\u4ee5\u540e\u518d\u82b1\u65f6\u95f4\u8fdb\u884c\u8bad\u7ec3\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 gensim \u7684\u6807\u51c6\u65b9\u6cd5\u533a\u50a8\u5b58\u548c\u52a0\u8f7d\u6a21\u578b\uff1a import tempfile with tempfile . NamedTemporaryFile ( prefix = 'gensim-model-' , delete = False ) as tmp : temporary_filepath = tmp . name model . save ( temporary_filepath ) # # The model is now safely stored in the filepath. # You can copy it to other machines, share it with others, etc. # # To load a saved model: # new_model = gensim . models . Word2Vec . load ( temporary_filepath ) \u8fd9\u79cd\u505a\u6cd5\u5c06\u4fdd\u5b58\u6a21\u578b\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u5b83\u5728\u5185\u90e8\u4f7f\u7528pickle\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u6a21\u578b\u7684\u5185\u90e8\u5927\u578bNumPy\u77e9\u9635\u76f4\u63a5\u4ece\u78c1\u76d8\u6587\u4ef6\u8f6c\u6362\u5230\u865a\u62df\u5185\u5b58\u4e2d\uff0c\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u5185\u5b58\u5171\u4eab\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u53ea\u4fdd\u5b58\u6a21\u578b\u7684\u8bcd\u5d4c\u5165\u5c42\u6743\u91cd\uff1a \u8bd1\u8005\u6ce8\uff1a\u8fd9\u79cd\u4fdd\u5b58\u683c\u5f0f\u5e94\u8be5\u4e0e\u539f\u59cbC\u5de5\u5177\u7684\u4fdd\u5b58\u683c\u5f0f\u76f8\u540c model . wv . save_word2vec_format () \u60a8\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u6216\u4e8c\u8fdb\u5236\u683c\u5f0f\u52a0\u8f7d\u7531\u539f\u59cbC\u5de5\u5177\u521b\u5efa\u7684\u6a21\u578b\uff1a model = gensim . models . KeyedVectors . load_word2vec_format ( '/tmp/vectors.txt' , binary = False ) \u4e5f\u53ef\u4ee5\u8f93\u5165gzipped/bz2\u6587\u4ef6\uff0c\u65e0\u9700\u89e3\u538b\u7f29 model = gensim . models . KeyedVectors . load_word2vec_format ( '/tmp/vectors.bin.gz' , binary = True ) \u8bad\u7ec3\u53c2\u6570 Word2Vec \u63a5\u53d7\u51e0\u4e2a\u540c\u65f6\u5f71\u54cd\u8bad\u7ec3\u901f\u5ea6\u548c\u8d28\u91cf\u7684\u53c2\u6570\u3002 min_count min_count \u7528\u4e8e\u4fee\u526a\u5185\u90e8\u8bcd\u6c47\u8868\u3002\u5728\u5341\u4ebf\u4e2a\u5355\u8bcd\u7684\u8bed\u6599\u5e93\u4e2d\u4ec5\u51fa\u73b0\u4e00\u4e24\u6b21\u7684\u5355\u8bcd\u53ef\u80fd\u662f\u65e0\u8da3\u7684\u9519\u522b\u5b57\u548c\u5783\u573e\u3002\u6b64\u5916\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u6570\u636e\u6765\u5bf9\u8fd9\u4e9b\u5355\u8bcd\u8fdb\u884c\u4efb\u4f55\u6709\u610f\u4e49\u7684\u8bad\u7ec3\uff0c\u56e0\u6b64\u6700\u597d\u5ffd\u7565\u5b83\u4eec\uff1a # default value of min_count=5 model = gensim . models . Word2Vec ( sentences , min_count = 10 ) size size \u662fgensim Word2Vec\u5c06\u5355\u8bcd\u6620\u5c04\u5230\u7684N\u7ef4\u7a7a\u95f4\u7684\u7ef4\u6570\uff08N\uff09\u3002\u8f83\u5927\u7684\u503c\u9700\u8981\u66f4\u591a\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u4f46\u53ef\u4ee5\u4ea7\u751f\u66f4\u597d\uff08\u66f4\u51c6\u786e\uff09\u7684\u6a21\u578b\u3002\u5408\u7406\u7684\u503c\u5728\u6570\u5341\u5230\u6570\u767e\u4e4b\u95f4\u3002 # default value of size=100 model = gensim . models . Word2Vec ( sentences , size = 200 ) workers workers \u662f\u6700\u540e\u4e00\u4e2a\u4e3b\u8981\u7684\u53c2\u6570\uff08\u5168\u90e8\u53c2\u6570\u5217\u8868\u89c1 \u8fd9\u91cc \uff0c\u5b83\u7528\u4e8e\u5e76\u884c\u5316\u8bad\u7ec3\uff0c\u52a0\u5feb\u8bad\u7ec3\u901f\u5ea6\uff1a # default value of workers=3 (tutorial says 1...) model = gensim . models . Word2Vec ( sentences , workers = 4 ) workers \u53ea\u6709\u5728\u4f7f\u7528 Cython \u89e3\u6790\u5668 \u7684\u65f6\u5019\u624d\u751f\u6548\uff0c\u5982\u679c\u6ca1\u6709Cython\uff0c\u56e0\u4e3a\u5b58\u5728 GIL \uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u4e00\u4e2acpu\u6838\u5fc3\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c word2vec\u7684\u8bad\u7ec3\u901f\u5ea6 \u4f1a\u53d8\u5f97\u5f88\u6162\u5f88\u6162\u3002 Memory Word2vec \u6a21\u578b\u53c2\u6570\u7684\u6838\u5fc3\u662f\u5b58\u50a8\u4e3a\u77e9\u9635(NumPy \u6570\u7ec4)\u3002 \u6bcf\u4e2a\u6570\u7ec4\u5927\u5c0f\u90fd\u662f\u8bcd\u6c47\u8868\u7684\u957f\u5ea6\u4e58\u4ee5 size \u53c2\u6570\u6d6e\u70b9\u6570\uff084\u5b57\u8282\u7684\u5355\u7cbe\u5ea6\uff09\u3002 \u5728RAM\u4e2d\u4fdd\u5b58\u4e86\u4e09\u4e2a\u8fd9\u6837\u7684\u77e9\u9635\uff08\u6b63\u5728\u52aa\u529b\u5c06\u8be5\u6570\u76ee\u51cf\u5c11\u5230\u4e24\u4e2a\uff0c\u751a\u81f3\u4e00\u4e2a\uff09\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u8f93\u5165\u7684\u8bcd\u6c47\u8868\u6709100,000\u552f\u4e00\u7684\u5355\u8bcd\uff0c\u5e76\u4e14\u60a8\u8981\u6c42\u7684\u9690\u85cf\u5c42\u5927\u5c0f\u4e3a200\uff0c\u5219\u8be5\u6a21\u578b\u5c06\u9700\u8981\u5927\u7ea6 $$ 100000 \\times 200 \\times 4 \\times 3\u5b57\u8282 \\approx 229 MB $$ \u5b58\u50a8 vocabulary tree \u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u5185\u5b58\uff08100,000\u4e2a\u5355\u8bcd\u5c06\u82b1\u8d39\u51e0MB\u7684\u50a8\u5b58\uff09\u3002\u56e0\u6b64\uff0c\u5185\u5b58\u5360\u7528\u91cf\u7531\u4e0a\u8ff0\u4e09\u4e2a\u77e9\u9635\u51b3\u5b9a\uff0c\u9664\u975e\u60a8\u7684\u5355\u8bcd\u662f\u5f88\u957f\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u3002 Evaluating Word2Vec training is an unsupervised task, there\u2019s no good way to objectively evaluate the result. Evaluation depends on your end application. Google has released their testing set of about 20,000 syntactic and semantic test examples, following the \u201cA is to B as C is to D\u201d task. It is provided in the 'datasets' folder. For example a syntactic analogy of comparative type is bad:worse;good:?. There are total of 9 types of syntactic comparisons in the dataset like plural nouns and nouns of opposite meaning. The semantic questions contain five types of semantic analogies, such as capital cities (Paris:France;Tokyo:?) or family members (brother:sister;dad:?). Gensim supports the same evaluation set, in exactly the same format: model . accuracy ( './datasets/questions-words.txt' ) This accuracy takes an optional parameter <http://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec.accuracy> _ restrict_vocab which limits which test examples are to be considered. In the December 2016 release of Gensim we added a better way to evaluate semantic similarity. By default it uses an academic dataset WS-353 but one can create a dataset specific to your business based on it. It contains word pairs together with human-assigned similarity judgments. It measures the relatedness or co-occurrence of two words. For example, 'coast' and 'shore' are very similar as they appear in the same context. At the same time 'clothes' and 'closet' are less similar because they are related but not interchangeable. model . evaluate_word_pairs ( datapath ( 'wordsim353.tsv' )) .. Important:: Good performance on Google's or WS-353 test set doesn\u2019t mean word2vec will work well in your application, or vice versa. It\u2019s always best to evaluate directly on your intended task. For an example of how to use word2vec in a classifier pipeline, see this tutorial <https://github.com/RaRe-Technologies/movie-plots-by-genre> _. \u5728\u7ebf\u8bad\u7ec3/\u589e\u91cf\u8bad\u7ec3 \u9ad8\u7ea7\u7528\u6237\u53ef\u4ee5\u52a0\u8f7d\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u901a\u8fc7\u66f4\u591a\u7684\u53e5\u5b50\u6765\u7ee7\u7eed\u8bad\u7ec3\u6a21\u578b\uff1a model = gensim . models . Word2Vec . load ( temporary_filepath ) more_sentences = [ [ 'Advanced' , 'users' , 'can' , 'load' , 'a' , 'model' , 'and' , 'continue' , 'training' , 'it' , 'with' , 'more' , 'sentences' ] ] model . build_vocab ( more_sentences , update = True ) model . train ( more_sentences , total_examples = model . corpus_count , epochs = model . iter ) # cleaning up temporary file import os os . remove ( temporary_filepath ) \u60a8\u53ef\u80fd\u9700\u8981\u5c06 total_words \u53c2\u6570\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u7684\u5b66\u4e60\u901f\u7387\u8870\u51cf\u3002 \u8bf7\u6ce8\u610f\uff0c\u65e0\u6cd5\u589e\u91cf\u8bad\u7ec3\u4f7f\u7528C\u5de5\u5177 KeyedVectors.load_word2vec_format() \u751f\u6210\u7684\u6a21\u578b\uff0c\u4f46\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u67e5\u8be2/\u76f8\u4f3c\u6027\uff0c\u56e0\u4e3a\u6a21\u578b\u4e22\u5931\u4e86\u5bf9\u8bad\u7ec3\u81f3\u5173\u91cd\u8981\u7684\u4fe1\u606f\uff08vocab tree\uff09\u3002 Training Loss Computation The parameter compute_loss can be used to toggle computation of loss while training the Word2Vec model. The computed loss is stored in the model attribute running_training_loss and can be retrieved using the function get_latest_training_loss as follows : # instantiating and training the Word2Vec model model_with_loss = gensim . models . Word2Vec ( sentences , min_count = 1 , compute_loss = True , hs = 0 , sg = 1 , seed = 42 ) # getting the training loss value training_loss = model_with_loss . get_latest_training_loss () print ( training_loss ) Benchmarks Let's run some benchmarks to see effect of the training loss computation code on training time. We'll use the following data for the benchmarks: . Lee Background corpus: included in gensim's test data . Text8 corpus. To demonstrate the effect of corpus size, we'll look at the first 1MB, 10MB, 50MB of the corpus, as well as the entire thing. import io import os import gensim.models.word2vec import gensim.downloader as api import smart_open def head ( path , size ): with smart_open . open ( path ) as fin : return io . StringIO ( fin . read ( size )) def generate_input_data (): lee_path = datapath ( 'lee_background.cor' ) ls = gensim . models . word2vec . LineSentence ( lee_path ) ls . name = '25kB' yield ls text8_path = api . load ( 'text8' ) . fn labels = ( '1MB' , '10MB' , '50MB' , '100MB' ) sizes = ( 1024 ** 2 , 10 * 1024 ** 2 , 50 * 1024 ** 2 , 100 * 1024 ** 2 ) for l , s in zip ( labels , sizes ): ls = gensim . models . word2vec . LineSentence ( head ( text8_path , s )) ls . name = l yield ls input_data = list ( generate_input_data ()) We now compare the training time taken for different combinations of input data and model training parameters like hs and sg . For each combination, we repeat the test several times to obtain the mean and standard deviation of the test duration. # Temporarily reduce logging verbosity logging . root . level = logging . ERROR import time import numpy as np import pandas as pd train_time_values = [] seed_val = 42 sg_values = [ 0 , 1 ] hs_values = [ 0 , 1 ] fast = True if fast : input_data_subset = input_data [: 3 ] else : input_data_subset = input_data for data in input_data_subset : for sg_val in sg_values : for hs_val in hs_values : for loss_flag in [ True , False ]: time_taken_list = [] for i in range ( 3 ): start_time = time . time () w2v_model = gensim . models . Word2Vec ( data , compute_loss = loss_flag , sg = sg_val , hs = hs_val , seed = seed_val , ) time_taken_list . append ( time . time () - start_time ) time_taken_list = np . array ( time_taken_list ) time_mean = np . mean ( time_taken_list ) time_std = np . std ( time_taken_list ) model_result = { 'train_data' : data . name , 'compute_loss' : loss_flag , 'sg' : sg_val , 'hs' : hs_val , 'train_time_mean' : time_mean , 'train_time_std' : time_std , } print ( \"Word2vec model # %i : %s \" % ( len ( train_time_values ), model_result )) train_time_values . append ( model_result ) train_times_table = pd . DataFrame ( train_time_values ) train_times_table = train_times_table . sort_values ( by = [ 'train_data' , 'sg' , 'hs' , 'compute_loss' ], ascending = [ False , False , True , False ], ) print ( train_times_table ) Adding Word2Vec \"model to dict\" method to production pipeline Suppose, we still want more performance improvement in production. One good way is to cache all the similar words in a dictionary. So that next time when we get the similar query word, we'll search it first in the dict. And if it's a hit then we will show the result directly from the dictionary. otherwise we will query the word and then cache it so that it doesn't miss next time. # re-enable logging logging . root . level = logging . INFO most_similars_precalc = { word : model . wv . most_similar ( word ) for word in model . wv . index2word } for i , ( key , value ) in enumerate ( most_similars_precalc . items ()): if i == 3 : break print ( key , value ) Comparison with and without caching for time being lets take 4 words randomly import time words = [ 'voted' , 'few' , 'their' , 'around' ] Without caching start = time . time () for word in words : result = model . wv . most_similar ( word ) print ( result ) end = time . time () print ( end - start ) Now with caching start = time . time () for word in words : if 'voted' in most_similars_precalc : result = most_similars_precalc [ word ] print ( result ) else : result = model . wv . most_similar ( word ) most_similars_precalc [ word ] = result print ( result ) end = time . time () print ( end - start ) Clearly you can see the improvement but this difference will be even larger when we take more words in the consideration. Visualising the Word Embeddings The word embeddings made by the model can be visualised by reducing dimensionality of the words to 2 dimensions using tSNE. Visualisations can be used to notice semantic and syntactic trends in the data. Example: Semantic: words like cat, dog, cow, etc. have a tendency to lie close by Syntactic: words like run, running or cut, cutting lie close together. Vector relations like vKing - vMan = vQueen - vWoman can also be noticed. .. Important:: The model used for the visualisation is trained on a small corpus. Thus some of the relations might not be so clear. from sklearn.decomposition import IncrementalPCA # inital reduction from sklearn.manifold import TSNE # final reduction import numpy as np # array handling def reduce_dimensions ( model ): num_dimensions = 2 # final num dimensions (2D, 3D, etc) vectors = [] # positions in vector space labels = [] # keep track of words to label our data again later for word in model . wv . vocab : vectors . append ( model . wv [ word ]) labels . append ( word ) # convert both lists into numpy vectors for reduction vectors = np . asarray ( vectors ) labels = np . asarray ( labels ) # reduce using t-SNE vectors = np . asarray ( vectors ) tsne = TSNE ( n_components = num_dimensions , random_state = 0 ) vectors = tsne . fit_transform ( vectors ) x_vals = [ v [ 0 ] for v in vectors ] y_vals = [ v [ 1 ] for v in vectors ] return x_vals , y_vals , labels x_vals , y_vals , labels = reduce_dimensions ( model ) def plot_with_plotly ( x_vals , y_vals , labels , plot_in_notebook = True ): from plotly.offline import init_notebook_mode , iplot , plot import plotly.graph_objs as go trace = go . Scatter ( x = x_vals , y = y_vals , mode = 'text' , text = labels ) data = [ trace ] if plot_in_notebook : init_notebook_mode ( connected = True ) iplot ( data , filename = 'word-embedding-plot' ) else : plot ( data , filename = 'word-embedding-plot.html' ) def plot_with_matplotlib ( x_vals , y_vals , labels ): import matplotlib.pyplot as plt import random random . seed ( 0 ) plt . figure ( figsize = ( 12 , 12 )) plt . scatter ( x_vals , y_vals ) # # Label randomly subsampled 25 data points # indices = list ( range ( len ( labels ))) selected_indices = random . sample ( indices , 25 ) for i in selected_indices : plt . annotate ( labels [ i ], ( x_vals [ i ], y_vals [ i ])) try : get_ipython () except Exception : plot_function = plot_with_matplotlib else : plot_function = plot_with_plotly plot_function ( x_vals , y_vals , labels ) \u603b\u7ed3 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u4e0a\u8bad\u7ec3word2vec\u6a21\u578b\u4ee5\u53ca\u5982\u4f55\u5bf9\u5176\u8fdb\u884c\u8bc4\u4f30\u3002\u5e0c\u671b\u60a8\u4e5f\u80fd\u5728\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4f7f\u7528\u8fd9\u4e2a\u53d7\u6b22\u8fce\u7684\u5de5\u5177\uff01 Links API docs: gensim.models.word2vec Original C toolkit and word2vec papers by Google .","title":"14.1.word2vec model"},{"location":"gensim/14.1.word2vec%20model.html#word2vec","text":"\u672c\u6587\u4ecb\u7ecdGensim\u7684Word2Vec\u6a21\u578b\uff0c\u5e76\u5728Lee Corpus\u4e0a\u6f14\u793a\u5176\u7528\u6cd5\u3002 import logging logging . basicConfig ( format = ' %(asctime)s : %(levelname)s : %(message)s ' , level = logging . INFO ) \u5982\u679c\u4f60\u4e4b\u524d\u9519\u8fc7\u4e86\u4ee4\u4eba\u632f\u594b\u7684\u7b97\u6cd5\uff0c\u90a3\u4e48word2vec\u73b0\u5728\u662f\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u65b0\u661f\u4e4b\u4e00\uff0c\u56e0\u6b64\u53d7\u5230\u5e7f\u6cdb\u7684\u63a8\u8350\uff0c\u5c3d\u7ba1\u5b83\u672c\u8eab\u7684\u7f51\u7edc\u5c42\u5f88\u6d45\u3002word2vec\u53ef\u4ee5\u4ece\u5927\u91cf\u672a\u6ce8\u91ca\u7684\u7eaf\u6587\u672c\u4e2d\u81ea\u52a8\u5b66\u4e60\u5355\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 word2vec\u7684\u8f93\u51fa\u662f\u5177\u6709\u663e\u8457\u7ebf\u6027\u5173\u7cfb\u7684\u5411\u91cf\uff08\u6bcf\u4e2a\u5355\u8bcd\u5c31\u662f\u4e00\u4e2a\u5411\u91cf\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a vec(\"king\") - vec(\"man\") + vec(\"woman\") =~ vec(\"queen\") vec(\"Montreal Canadiens\") \u2013 vec(\"Montreal\") + vec(\"Toronto\") =~ vec(\"Toronto Maple Leafs\") Word2vec\u5728 \u81ea\u52a8\u6587\u672c\u6807\u8bb0 \u3001\u63a8\u8350\u7cfb\u7edf\u548c\u673a\u5668\u7ffb\u8bd1\u4e2d\u975e\u5e38\u6709\u7528\u3002 \u672c\u6559\u7a0b\u5c06: \u5f15\u5165\u201c Word2Vec\u201d\u4f5c\u4e3a\u5bf9\u4f20\u7edf bag-of-words \u6a21\u578b\u7684\u6539\u8fdb \u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u7684\u6a21\u578b\u5c55\u793a\u201c Word2Vec\u201d\u7684\u529f\u80fd \u6f14\u793a\u6839\u636e\u60a8\u81ea\u5df1\u7684\u6570\u636e\u8bad\u7ec3\u65b0\u6a21\u578b \u6f14\u793a\u52a0\u8f7d\u548c\u4fdd\u5b58\u6a21\u578b \u4ecb\u7ecd\u51e0\u4e2a\u8bad\u7ec3\u53c2\u6570\u5e76\u6f14\u793a\u5176\u6548\u679c \u8ba8\u8bba\u5185\u5b58\u9700\u6c42 \u901a\u8fc7\u5e94\u7528\u964d\u7ef4\u6765\u53ef\u89c6\u5316Word2Vec\u5d4c\u5165","title":"Word2Vec \u6a21\u578b"},{"location":"gensim/14.1.word2vec%20model.html#bag-of-words","text":"\u6ce8\u610f\uff1a \u5982\u679c\u60a8\u5df2\u7ecf\u719f\u6089\u6a21\u578b\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6a21\u578b\u56de\u987e\u3002 \u60a8\u53ef\u80fd\u4ece core_concepts_vector \u90e8\u5206\u719f\u6089\u4e86\u8bcd\u888b\u6a21\u578b https://en.wikipedia.org/wiki/Bag-of-words_model \u3002\u8be5\u6a21\u578b\u5c06\u6bcf\u4e2a\u6587\u6863\u8f6c\u6362\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u6574\u6570\u77e2\u91cf\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u53e5\u5b50\uff1a John likes to watch movies. Mary likes movies too. John also likes to watch football games. Mary hates football. \u6a21\u578b\u8f93\u51fa\u5411\u91cf\uff1a [1, 2, 1, 1, 2, 1, 1, 0, 0, 0, 0] [1, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1] \u6bcf\u4e2a\u5411\u91cf\u670910\u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8ba1\u7b97\u6587\u6863\u4e2d\u7279\u5b9a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5143\u7d20\u7684\u987a\u5e8f\u662f\u4efb\u610f\u7684\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5143\u7d20\u7684\u987a\u5e8f\u5bf9\u5e94\u4e8e\u4ee5\u4e0b\u5355\u8bcd\uff1a [\"John\", \"likes\", \"to\", \"watch\", \"movies\", \"Mary\", \"too\", \"also\", \"football\", \"games\", \"hates\"] . \u8bcd\u888b\u6a21\u578b\u51fa\u5947\u5730\u6709\u6548\uff0c\u4f46\u6709\u51e0\u4e2a\u7f3a\u70b9\u3002 \u9996\u5148\uff0c\u4ed6\u4eec\u4f1a\u4e22\u5931\u6240\u6709\u6709\u5173\u5355\u8bcd\u987a\u5e8f\u7684\u4fe1\u606f\uff1a\"John likes Mary\"\u548c\"Mary likes John\"\u5bf9\u5e94\u4e8e\u76f8\u540c\u7684\u5411\u91cf\u3002\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff1an-grams\u6a21\u578b\u8003\u8651\u957f\u5ea6\u4e3an\u7684\u5355\u8bcd\u77ed\u8bed\uff0c\u5c06\u6587\u6863\u8868\u793a\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u5411\u91cf\uff0c\u4ee5\u6355\u83b7\u5355\u8bcd\u987a\u5e8f\uff0c\u4f46\u906d\u53d7\u6570\u636e\u7a00\u758f\u548c\u9ad8\u7ef4\u5ea6\u7684\u56f0\u6270\u3002 \u5176\u6b21\uff0c\u8be5\u6a21\u578b\u4e0d\u4f1a\u5c1d\u8bd5\u5b66\u4e60\u5355\u8bcd\u7684\u542b\u4e49\uff0c\u56e0\u6b64\uff0c\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e76\u4e0d\u603b\u662f\u53cd\u6620\u51fa\u542b\u4e49\u4e0a\u7684\u5dee\u5f02\u3002 Word2Vec\u6a21\u578b\u89e3\u51b3\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\u3002","title":"\u56de\u987eBag-of-words\u6a21\u578b"},{"location":"gensim/14.1.word2vec%20model.html#word2vec_1","text":"Word2Vec\u662f\u4e00\u79cd\u8f83\u65b0\u7684\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u6d45\u5c42\u795e\u7ecf\u7f51\u7edc\u5c06\u5355\u8bcd\u5d4c\u5165\u5230\u4f4e\u7ef4\u5411\u91cf\u7a7a\u95f4\u4e2d\u3002 \u7ed3\u679c\u662f\u4e00\u7ec4\u8bcd\u5411\u91cf\uff0c\u5728\u5411\u91cf\u7a7a\u95f4\u4e2d\u9760\u5728\u4e00\u8d77\u7684\u8bcd\u5411\u91cf\u6839\u636e\u4e0a\u4e0b\u6587\u5177\u6709\u76f8\u4f3c\u7684\u542b\u4e49\uff0c\u800c\u5f7c\u6b64\u8fdc\u79bb\u7684\u8bcd\u5411\u91cf\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 \u4f8b\u5982\uff0c\u201c strong\u201d\u548c\u201c powerful\u201d\u5c06\u5f7c\u6b64\u9760\u8fd1\uff0c\u800c\u201c strong\u201d\u548c\u201c Paris\u201d\u5219\u76f8\u5bf9\u8f83\u8fdc\u3002 \u8be5\u6a21\u578b\u6709\u4e24\u4e2a\u7248\u672c\uff0c ~gensim.models.word2vec.Word2Vec \u7c7b\u5b9e\u73b0\u4e86\u4e24\u4e2a\u7248\u672c\uff1a Skip-grams (SG) Continuous-bag-of-words (CBOW) \u6ce8\u610f\uff1a \u4e0d\u8981\u8ba9\u4e0b\u9762\u7684\u5b9e\u73b0\u7ec6\u8282\u5413\u5230\u60a8\u3002\u5b83\u4eec\u662f\u9ad8\u7ea7\u6750\u6599\uff0c\u5982\u679c\u592a\u591a\uff0c\u5219\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u90e8\u5206\u3002 \u4f8b\u5982\uff0c\u201cWord2Vec Skip-gram\u201d \u6a21\u578b\u5c06\u901a\u8fc7\u5728\u6587\u672c\u6570\u636e\u4e4b\u95f4\u8fdb\u884c\u7a97\u53e3\u79fb\u52a8\uff0c\u751f\u6210\u7684\u6210\u5bf9\u7684(word1\uff0cword2)\uff0c\u5e76\u6839\u636e\u8f93\u5165\u7684\u591a\u4e2a\u5355\u8bcd\u5bf9(word,word)\u8bad\u7ec3\u4e00\u4e2a1\u5c42\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\uff0c \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8f93\u5165\u9644\u8fd1\u5355\u8bcd\u7684\u9884\u6d4b\u6982\u7387\u5206\u5e03\u3002 \u5355\u8bcd\u7684one-hot \u7f16\u7801\u901a\u8fc7\u6295\u5f71\u5c42\uff08projection layer\uff09\u8fdb\u5165\u9690\u85cf\u5c42\uff1b\u8fd9\u4e9b\u6295\u5f71\u7684\u6743\u91cd\u88ab\u89e3\u91ca\u6210word embeddings\u3002\u56e0\u6b64\uff0c\u5982\u679c\u9690\u85cf\u5c42\u5177\u6709300\u4e2a\u795e\u7ecf\u5143\uff0c\u5219\u6b64\u7f51\u7edc\u5c06\u4e3a\u6211\u4eec\u63d0\u4f9b300\u7ef4\u7684word embeddings\u3002 Continuous-bag-of-words Word2vec\u4e0eskip-gram model\u975e\u5e38\u76f8\u4f3c\u3002 \u5b83\u4e5f\u662f\u4e00\u4e2a\u542b\u67091\u5c42\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u3002 \u5408\u6210\u8bad\u7ec3\u4efb\u52a1\u73b0\u5728\u4f7f\u7528\u591a\u4e2a\u8f93\u5165\u4e0a\u4e0b\u6587\u5355\u8bcd\u7684\u5e73\u5747\u503c\u6765\u9884\u6d4b\u76ee\u6807\u5355\u8bcd\uff0c\u800c\u4e0d\u662f\u50cfskip-gram model\u4e2d\u4f7f\u7528\u5355\u4e2a\u5355\u8bcd\u7684\u503c\u3002 \u540c\u6837\uff0c\u5c06one-hot\u7f16\u7801\u8f6c\u6362\u4e3a\u548c\u9690\u85cf\u5c42\u76f8\u540c\u7ef4\u5ea6\u7684\u5e73\u5747\u503c\u5411\u91cf\u7684\u6295\u5f71\u6743\u91cd\uff0c\u4e5f\u88ab\u89e3\u91ca\u4e3aword embeddings\u3002","title":"Word2Vec\u6a21\u578b\u7b80\u4ecb"},{"location":"gensim/14.1.word2vec%20model.html#word2vec_2","text":"\u8ba9\u6211\u4eec\u4e0b\u8f7d\u4e00\u4e2a\u9884\u5148\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5e76\u8fdb\u884c\u8bd5\u7528\uff0c\u770b\u770bWord2Vec\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002\u6211\u4eec\u5c06\u83b7\u53d6\u7684Word2Vec\u6a21\u578b\u4f7f\u7528Google\u65b0\u95fb\u6570\u636e\u8bad\u7ec3\uff0c\u8be5\u6a21\u578b\u6db5\u76d6\u5927\u7ea6300\u4e07\u4e2a\u5355\u8bcd\u548c\u77ed\u8bed\u3002\u8fd9\u6837\u7684\u6a21\u578b\u53ef\u80fd\u9700\u8981\u82b1\u8d39\u6570\u5c0f\u65f6\u6765\u8bad\u7ec3\uff0c\u4f46\u662f\u7531\u4e8e\u5df2\u7ecf\u53ef\u7528\uff0c\u56e0\u6b64\u4f7f\u7528Gensim\u8fdb\u884c\u4e0b\u8f7d\u548c\u52a0\u8f7d\u9700\u8981\u51e0\u5206\u949f\u3002 \u6ce8\u610f \uff1a\u8be5\u6a21\u578b\u5927\u7ea6\u4e3a2GB\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u4e00\u4e2a\u4e0d\u9519\u7684\u7f51\u7edc\u8fde\u63a5\u624d\u80fd\u7ee7\u7eed\u3002 \u5426\u5219\uff0c\u8bf7\u8df3\u81f3\u4e0b\u9762\u7684\u201c\u8bad\u7ec3\u81ea\u5df1\u7684\u6a21\u578b\u201d\u90e8\u5206\u3002 \u60a8\u4e5f\u53ef\u4ee5\u67e5\u770b\u201c \u5728\u7ebfword2vec\u6f14\u793a \u201d\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u4f7f\u7528\u5411\u91cf\u4ee3\u6570\u3002\u8be5\u6f14\u793a\u5728\u6574\u4e2aGoogle\u65b0\u95fb\u6570\u636e\u96c6 ( \u7ea61000\u4ebf\u4e2a\u5355\u8bcd ) \u4e0a\u8fd0\u884cword2vec\u3002 import gensim.downloader as api wv = api . load ( 'word2vec-google-news-300' ) \u5982\u679c\u4f60\u672c\u5730\u5df2\u7ecf\u4e0b\u8f7d\u597d\u4e86 GoogleNews-vectors-negative300.bin \u6a21\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u5bfc\u5165\u6a21\u578b\uff1a import gensim model_path = r \"C:\\Users\\two\\Desktop\\GoogleNews-vectors-negative300.bin\" wv = gensim . models . KeyedVectors . load_word2vec_format ( model_path , binary = True ) C : \\ Users \\ two \\ AppData \\ Roaming \\ Python \\ Python36 \\ site - packages \\ gensim \\ utils . py : 1209 : UserWarning : detected Windows ; aliasing chunkize to chunkize_serial warnings . warn ( \"detected Windows; aliasing chunkize to chunkize_serial\" ) 2020 - 01 - 21 15 : 28 : 51 , 172 : INFO : 'pattern' package not found ; tag filters are not available for English 2020 - 01 - 21 15 : 28 : 51 , 179 : INFO : loading projection weights from C : \\ Users \\ two \\ Desktop \\ GoogleNews - vectors - negative300 . bin C : \\ Users \\ two \\ AppData \\ Roaming \\ Python \\ Python36 \\ site - packages \\ smart_open \\ smart_open_lib . py : 402 : UserWarning : This function is deprecated , use smart_open . open instead . See the migration notes for details : https : // github . com / RaRe - Technologies / smart_open / blob / master / README . rst #migrating-to-the-new-open-function 'See the migration notes for details: %s ' % _MIGRATION_NOTES_URL 2020 - 01 - 21 15 : 29 : 25 , 376 : INFO : loaded ( 3000000 , 300 ) matrix from C : \\ Users \\ two \\ Desktop \\ GoogleNews - vectors - negative300 . bin \u5982\u679c\u52a0\u8f7d\u5165\u5b8c\u6574\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u770b\u5230\u63d0\u793a\uff1a INFO : loaded (3000000, 300) matrix from GoogleNews-vectors-negative300.bin \u8be5word2vec\u6a21\u578b\u7684\u8bcd\u5e93\u5305\u542b3000000\u4e2a\u5355\u8bcd\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u8bcd\u5411\u91cf\u6709300\u7ef4\u3002","title":"Word2Vec \u6f14\u793a"},{"location":"gensim/14.1.word2vec%20model.html#_1","text":"\u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u68c0\u7d22\u6a21\u578b\u7684\u8bcd\u6c47\u8868\u3002 \u8fd9\u5f88\u7b80\u5355\uff1a # .vocab return dict {word:class gensim.models.keyedvectors.Vocab} # gensim.models.keyedvectors.Vocab: A single vocabulary item, used internally for collecting per-word frequency/sampling info, # and for constructing binary trees (incl. both word leaves and inner nodes). for i , word in enumerate ( wv . vocab ): if i == 10 : break print ( word ) print ( \"\u5f53\u524d\u8bcd\u5e93\u6709\" , len ( wv . vocab ), \"\u4e2a\u5355\u8bcd\" ) </ s > in for that is on ## The with said \u5f53\u524d\u8bcd\u5e93\u6709 3000000 \u4e2a\u5355\u8bcd # property # list of all words wv . index2word print ( \"\u5f53\u524d\u8bcd\u5e93\u6709\" , len ( wv . index2word ), \"\u4e2a\u5355\u8bcd\" ) \u5f53\u524d\u8bcd\u5e93\u6709 3000000 \u4e2a\u5355\u8bcd # property # list of all entities (words) wv . index2entity print ( \"\u5f53\u524d\u8bcd\u5e93\u6709\" , len ( wv . index2entity ), \"\u4e2a\u5355\u8bcd\" ) \u5f53\u524d\u8bcd\u5e93\u6709 3000000 \u4e2a\u5355\u8bcd","title":"\u83b7\u53d6\u8bcd\u5e93"},{"location":"gensim/14.1.word2vec%20model.html#_2","text":"\u83b7\u53d6\u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a wv . vector_size 300 \u8be5 word2vec \u6a21\u578b\u7684\u8bcd\u5411\u91cf\u6709300\u7ef4\u3002 \u53ef\u4ee5\u8f7b\u677e\u5730\u83b7\u53d6\u5168\u90e8\u8bcd\u5411\u91cf\uff1a # property # \u5168\u90e8\u7684\u8bcd\u5411\u91cf print ( \"\u5b8c\u6574\u8bcd\u5411\u91cf\u77e9\u9635\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a\" , wv . vectors . shape ) wv . vectors # \u4e5f\u53ef\u4ee5\u4f7f\u7528 .syn0 \u5c5e\u6027\u83b7\u53d6\u5b8c\u6574\u7684\u8bcd\u5411\u91cf # \u4f46 .syn0 \u5c5e\u6027\u5728gensim4.0.0\u7248\u672c\u5c06\u4f1a\u88ab\u79fb\u9664\uff0c\u5efa\u8bae\u4f7f\u7528 .vectors \u5b8c\u6574\u8bcd\u5411\u91cf\u77e9\u9635\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a (3000000, 300) array([[ 1.1291504e-03, -8.9645386e-04, 3.1852722e-04, ..., -1.5640259e-03, -1.2302399e-04, -8.6307526e-05], [ 7.0312500e-02, 8.6914062e-02, 8.7890625e-02, ..., -4.7607422e-02, 1.4465332e-02, -6.2500000e-02], [-1.1779785e-02, -4.7363281e-02, 4.4677734e-02, ..., 7.1289062e-02, -3.4912109e-02, 2.4169922e-02], ..., [-1.9653320e-02, -9.0820312e-02, -1.9409180e-02, ..., -1.6357422e-02, -1.3427734e-02, 4.6630859e-02], [ 3.2714844e-02, -3.2226562e-02, 3.6132812e-02, ..., -8.8500977e-03, 2.6977539e-02, 1.9042969e-02], [ 4.5166016e-02, -4.5166016e-02, -3.9367676e-03, ..., 7.9589844e-02, 7.2265625e-02, 1.3000488e-02]], dtype=float32) \u83b7\u53d6\u6807\u51c6\u5316\u4e4b\u540e\u7684\u8bcd\u5411\u91cf\u77e9\u9635\uff08\u4f46\u9884\u8bad\u7ec3\u6a21\u578b\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027\uff0c\u56e0\u6b64\u4f1a\u629b\u51fa\u9519\u8bef\uff09\uff1a # wv.vector_size # property # \u5168\u90e8\u7684\u8bcd\u5411\u91cf print ( \"\u5b8c\u6574\u8bcd\u5411\u91cf\u77e9\u9635\u7684\u7ef4\u5ea6\u4fe1\u606f\uff1a\" , wv . vectors_norm . shape ) wv . vectors_norm # \u4e5f\u53ef\u4ee5\u4f7f\u7528 .syn0norm \u5c5e\u6027\u83b7\u53d6\u5b8c\u6574\u7684\u8bcd\u5411\u91cf # \u4f46 .syn0norm \u5c5e\u6027\u5728gensim4.0.0\u7248\u672c\u5c06\u4f1a\u88ab\u79fb\u9664\uff0c\u5efa\u8bae\u4f7f\u7528 .vectors_norm AttributeError: 'NoneType' object has no attribute 'shape' \u5bf9\u4e8e\u51fa\u73b0\u5728\u6a21\u578b\u8bcd\u5e93\u4e2d\u7684\u8bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u83b7\u5f97\u5b83\u7684\u5411\u91cf\u8868\u793a\uff1a vec_king = wv [ 'king' ] print ( \"\u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\uff1a\" , vec_king . shape ) pprint . pprint ( vec_king ) # \u53ef\u4ee5\u8fd9\u6837\u83b7\u53d6\u591a\u4e2a\u5355\u8bcd\u7684\u8bcd\u5411\u91cf # wv[['king','car']] \u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\uff1a (300,) array([ 1.25976562e-01, 2.97851562e-02, 8.60595703e-03, 1.39648438e-01, -2.56347656e-02, -3.61328125e-02, 1.11816406e-01, -1.98242188e-01, 5.12695312e-02, 3.63281250e-01, -2.42187500e-01, -3.02734375e-01, -1.77734375e-01, -2.49023438e-02, -1.67968750e-01, -1.69921875e-01, 3.46679688e-02, 5.21850586e-03, 4.63867188e-02, 1.28906250e-01, 1.36718750e-01, 1.12792969e-01, 5.95703125e-02, 1.36718750e-01, 1.01074219e-01, -1.76757812e-01, -2.51953125e-01, 5.98144531e-02, 3.41796875e-01, -3.11279297e-02, 1.04492188e-01, 6.17675781e-02, 1.24511719e-01, 4.00390625e-01, -3.22265625e-01, 8.39843750e-02, 3.90625000e-02, 5.85937500e-03, 7.03125000e-02, 1.72851562e-01, 1.38671875e-01, -2.31445312e-01, 2.83203125e-01, 1.42578125e-01, 3.41796875e-01, -2.39257812e-02, -1.09863281e-01, 3.32031250e-02, -5.46875000e-02, 1.53198242e-02, -1.62109375e-01, 1.58203125e-01, -2.59765625e-01, 2.01416016e-02, -1.63085938e-01, 1.35803223e-03, -1.44531250e-01, -5.68847656e-02, 4.29687500e-02, -2.46582031e-02, 1.85546875e-01, 4.47265625e-01, 9.58251953e-03, 1.31835938e-01, 9.86328125e-02, -1.85546875e-01, -1.00097656e-01, -1.33789062e-01, -1.25000000e-01, 2.83203125e-01, 1.23046875e-01, 5.32226562e-02, -1.77734375e-01, 8.59375000e-02, -2.18505859e-02, 2.05078125e-02, -1.39648438e-01, 2.51464844e-02, 1.38671875e-01, -1.05468750e-01, 1.38671875e-01, 8.88671875e-02, -7.51953125e-02, -2.13623047e-02, 1.72851562e-01, 4.63867188e-02, -2.65625000e-01, 8.91113281e-03, 1.49414062e-01, 3.78417969e-02, 2.38281250e-01, -1.24511719e-01, -2.17773438e-01, -1.81640625e-01, 2.97851562e-02, 5.71289062e-02, -2.89306641e-02, 1.24511719e-02, 9.66796875e-02, -2.31445312e-01, 5.81054688e-02, 6.68945312e-02, 7.08007812e-02, -3.08593750e-01, -2.14843750e-01, 1.45507812e-01, -4.27734375e-01, -9.39941406e-03, 1.54296875e-01, -7.66601562e-02, 2.89062500e-01, 2.77343750e-01, -4.86373901e-04, -1.36718750e-01, 3.24218750e-01, -2.46093750e-01, -3.03649902e-03, -2.11914062e-01, 1.25000000e-01, 2.69531250e-01, 2.04101562e-01, 8.25195312e-02, -2.01171875e-01, -1.60156250e-01, -3.78417969e-02, -1.20117188e-01, 1.15234375e-01, -4.10156250e-02, -3.95507812e-02, -8.98437500e-02, 6.34765625e-03, 2.03125000e-01, 1.86523438e-01, 2.73437500e-01, 6.29882812e-02, 1.41601562e-01, -9.81445312e-02, 1.38671875e-01, 1.82617188e-01, 1.73828125e-01, 1.73828125e-01, -2.37304688e-01, 1.78710938e-01, 6.34765625e-02, 2.36328125e-01, -2.08984375e-01, 8.74023438e-02, -1.66015625e-01, -7.91015625e-02, 2.43164062e-01, -8.88671875e-02, 1.26953125e-01, -2.16796875e-01, -1.73828125e-01, -3.59375000e-01, -8.25195312e-02, -6.49414062e-02, 5.07812500e-02, 1.35742188e-01, -7.47070312e-02, -1.64062500e-01, 1.15356445e-02, 4.45312500e-01, -2.15820312e-01, -1.11328125e-01, -1.92382812e-01, 1.70898438e-01, -1.25000000e-01, 2.65502930e-03, 1.92382812e-01, -1.74804688e-01, 1.39648438e-01, 2.92968750e-01, 1.13281250e-01, 5.95703125e-02, -6.39648438e-02, 9.96093750e-02, -2.72216797e-02, 1.96533203e-02, 4.27246094e-02, -2.46093750e-01, 6.39648438e-02, -2.25585938e-01, -1.68945312e-01, 2.89916992e-03, 8.20312500e-02, 3.41796875e-01, 4.32128906e-02, 1.32812500e-01, 1.42578125e-01, 7.61718750e-02, 5.98144531e-02, -1.19140625e-01, 2.74658203e-03, -6.29882812e-02, -2.72216797e-02, -4.82177734e-03, -8.20312500e-02, -2.49023438e-02, -4.00390625e-01, -1.06933594e-01, 4.24804688e-02, 7.76367188e-02, -1.16699219e-01, 7.37304688e-02, -9.22851562e-02, 1.07910156e-01, 1.58203125e-01, 4.24804688e-02, 1.26953125e-01, 3.61328125e-02, 2.67578125e-01, -1.01074219e-01, -3.02734375e-01, -5.76171875e-02, 5.05371094e-02, 5.26428223e-04, -2.07031250e-01, -1.38671875e-01, -8.97216797e-03, -2.78320312e-02, -1.41601562e-01, 2.07031250e-01, -1.58203125e-01, 1.27929688e-01, 1.49414062e-01, -2.24609375e-02, -8.44726562e-02, 1.22558594e-01, 2.15820312e-01, -2.13867188e-01, -3.12500000e-01, -3.73046875e-01, 4.08935547e-03, 1.07421875e-01, 1.06933594e-01, 7.32421875e-02, 8.97216797e-03, -3.88183594e-02, -1.29882812e-01, 1.49414062e-01, -2.14843750e-01, -1.83868408e-03, 9.91210938e-02, 1.57226562e-01, -1.14257812e-01, -2.05078125e-01, 9.91210938e-02, 3.69140625e-01, -1.97265625e-01, 3.54003906e-02, 1.09375000e-01, 1.31835938e-01, 1.66992188e-01, 2.35351562e-01, 1.04980469e-01, -4.96093750e-01, -1.64062500e-01, -1.56250000e-01, -5.22460938e-02, 1.03027344e-01, 2.43164062e-01, -1.88476562e-01, 5.07812500e-02, -9.37500000e-02, -6.68945312e-02, 2.27050781e-02, 7.61718750e-02, 2.89062500e-01, 3.10546875e-01, -5.37109375e-02, 2.28515625e-01, 2.51464844e-02, 6.78710938e-02, -1.21093750e-01, -2.15820312e-01, -2.73437500e-01, -3.07617188e-02, -3.37890625e-01, 1.53320312e-01, 2.33398438e-01, -2.08007812e-01, 3.73046875e-01, 8.20312500e-02, 2.51953125e-01, -7.61718750e-02, -4.66308594e-02, -2.23388672e-02, 2.99072266e-02, -5.93261719e-02, -4.66918945e-03, -2.44140625e-01, -2.09960938e-01, -2.87109375e-01, -4.54101562e-02, -1.77734375e-01, -2.79296875e-01, -8.59375000e-02, 9.13085938e-02, 2.51953125e-01], dtype=float32) \u4e5f\u53ef\u4ee5\u4f7f\u7528 .get_vector() \u65b9\u6cd5\u83b7\u53d6\u8bcd\u5411\u91cf\uff0c\u4f46 .get_vector() \u65b9\u6cd5\u6bcf\u4e00\u6b21\u53ea\u80fd\u83b7\u53d6\u4e00\u4e2a\u8bcd\u5411\u91cf\uff1a wv . get_vector ( \"king\" ) array([ 1.25976562e-01, 2.97851562e-02, 8.60595703e-03, 1.39648438e-01, -2.56347656e-02, -3.61328125e-02, 1.11816406e-01, -1.98242188e-01, 5.12695312e-02, 3.63281250e-01, -2.42187500e-01, -3.02734375e-01, -1.77734375e-01, -2.49023438e-02, -1.67968750e-01, -1.69921875e-01, 3.46679688e-02, 5.21850586e-03, 4.63867188e-02, 1.28906250e-01, 1.36718750e-01, 1.12792969e-01, 5.95703125e-02, 1.36718750e-01, 1.01074219e-01, -1.76757812e-01, -2.51953125e-01, 5.98144531e-02, 3.41796875e-01, -3.11279297e-02, 1.04492188e-01, 6.17675781e-02, 1.24511719e-01, 4.00390625e-01, -3.22265625e-01, 8.39843750e-02, 3.90625000e-02, 5.85937500e-03, 7.03125000e-02, 1.72851562e-01, 1.38671875e-01, -2.31445312e-01, 2.83203125e-01, 1.42578125e-01, 3.41796875e-01, -2.39257812e-02, -1.09863281e-01, 3.32031250e-02, -5.46875000e-02, 1.53198242e-02, -1.62109375e-01, 1.58203125e-01, -2.59765625e-01, 2.01416016e-02, -1.63085938e-01, 1.35803223e-03, -1.44531250e-01, -5.68847656e-02, 4.29687500e-02, -2.46582031e-02, 1.85546875e-01, 4.47265625e-01, 9.58251953e-03, 1.31835938e-01, 9.86328125e-02, -1.85546875e-01, -1.00097656e-01, -1.33789062e-01, -1.25000000e-01, 2.83203125e-01, 1.23046875e-01, 5.32226562e-02, -1.77734375e-01, 8.59375000e-02, -2.18505859e-02, 2.05078125e-02, -1.39648438e-01, 2.51464844e-02, 1.38671875e-01, -1.05468750e-01, 1.38671875e-01, 8.88671875e-02, -7.51953125e-02, -2.13623047e-02, 1.72851562e-01, 4.63867188e-02, -2.65625000e-01, 8.91113281e-03, 1.49414062e-01, 3.78417969e-02, 2.38281250e-01, -1.24511719e-01, -2.17773438e-01, -1.81640625e-01, 2.97851562e-02, 5.71289062e-02, -2.89306641e-02, 1.24511719e-02, 9.66796875e-02, -2.31445312e-01, 5.81054688e-02, 6.68945312e-02, 7.08007812e-02, -3.08593750e-01, -2.14843750e-01, 1.45507812e-01, -4.27734375e-01, -9.39941406e-03, 1.54296875e-01, -7.66601562e-02, 2.89062500e-01, 2.77343750e-01, -4.86373901e-04, -1.36718750e-01, 3.24218750e-01, -2.46093750e-01, -3.03649902e-03, -2.11914062e-01, 1.25000000e-01, 2.69531250e-01, 2.04101562e-01, 8.25195312e-02, -2.01171875e-01, -1.60156250e-01, -3.78417969e-02, -1.20117188e-01, 1.15234375e-01, -4.10156250e-02, -3.95507812e-02, -8.98437500e-02, 6.34765625e-03, 2.03125000e-01, 1.86523438e-01, 2.73437500e-01, 6.29882812e-02, 1.41601562e-01, -9.81445312e-02, 1.38671875e-01, 1.82617188e-01, 1.73828125e-01, 1.73828125e-01, -2.37304688e-01, 1.78710938e-01, 6.34765625e-02, 2.36328125e-01, -2.08984375e-01, 8.74023438e-02, -1.66015625e-01, -7.91015625e-02, 2.43164062e-01, -8.88671875e-02, 1.26953125e-01, -2.16796875e-01, -1.73828125e-01, -3.59375000e-01, -8.25195312e-02, -6.49414062e-02, 5.07812500e-02, 1.35742188e-01, -7.47070312e-02, -1.64062500e-01, 1.15356445e-02, 4.45312500e-01, -2.15820312e-01, -1.11328125e-01, -1.92382812e-01, 1.70898438e-01, -1.25000000e-01, 2.65502930e-03, 1.92382812e-01, -1.74804688e-01, 1.39648438e-01, 2.92968750e-01, 1.13281250e-01, 5.95703125e-02, -6.39648438e-02, 9.96093750e-02, -2.72216797e-02, 1.96533203e-02, 4.27246094e-02, -2.46093750e-01, 6.39648438e-02, -2.25585938e-01, -1.68945312e-01, 2.89916992e-03, 8.20312500e-02, 3.41796875e-01, 4.32128906e-02, 1.32812500e-01, 1.42578125e-01, 7.61718750e-02, 5.98144531e-02, -1.19140625e-01, 2.74658203e-03, -6.29882812e-02, -2.72216797e-02, -4.82177734e-03, -8.20312500e-02, -2.49023438e-02, -4.00390625e-01, -1.06933594e-01, 4.24804688e-02, 7.76367188e-02, -1.16699219e-01, 7.37304688e-02, -9.22851562e-02, 1.07910156e-01, 1.58203125e-01, 4.24804688e-02, 1.26953125e-01, 3.61328125e-02, 2.67578125e-01, -1.01074219e-01, -3.02734375e-01, -5.76171875e-02, 5.05371094e-02, 5.26428223e-04, -2.07031250e-01, -1.38671875e-01, -8.97216797e-03, -2.78320312e-02, -1.41601562e-01, 2.07031250e-01, -1.58203125e-01, 1.27929688e-01, 1.49414062e-01, -2.24609375e-02, -8.44726562e-02, 1.22558594e-01, 2.15820312e-01, -2.13867188e-01, -3.12500000e-01, -3.73046875e-01, 4.08935547e-03, 1.07421875e-01, 1.06933594e-01, 7.32421875e-02, 8.97216797e-03, -3.88183594e-02, -1.29882812e-01, 1.49414062e-01, -2.14843750e-01, -1.83868408e-03, 9.91210938e-02, 1.57226562e-01, -1.14257812e-01, -2.05078125e-01, 9.91210938e-02, 3.69140625e-01, -1.97265625e-01, 3.54003906e-02, 1.09375000e-01, 1.31835938e-01, 1.66992188e-01, 2.35351562e-01, 1.04980469e-01, -4.96093750e-01, -1.64062500e-01, -1.56250000e-01, -5.22460938e-02, 1.03027344e-01, 2.43164062e-01, -1.88476562e-01, 5.07812500e-02, -9.37500000e-02, -6.68945312e-02, 2.27050781e-02, 7.61718750e-02, 2.89062500e-01, 3.10546875e-01, -5.37109375e-02, 2.28515625e-01, 2.51464844e-02, 6.78710938e-02, -1.21093750e-01, -2.15820312e-01, -2.73437500e-01, -3.07617188e-02, -3.37890625e-01, 1.53320312e-01, 2.33398438e-01, -2.08007812e-01, 3.73046875e-01, 8.20312500e-02, 2.51953125e-01, -7.61718750e-02, -4.66308594e-02, -2.23388672e-02, 2.99072266e-02, -5.93261719e-02, -4.66918945e-03, -2.44140625e-01, -2.09960938e-01, -2.87109375e-01, -4.54101562e-02, -1.77734375e-01, -2.79296875e-01, -8.59375000e-02, 9.13085938e-02, 2.51953125e-01], dtype=float32) .get_vector() \u65b9\u6cd5\u7b49\u6548\u4e8e .word_vec(word, use_norm=False) \uff0c\u4f46 .word_vec(word, use_norm=False) \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7 use_norm \u53c2\u6570\u63a7\u5236\u662f\u5426\u8fd4\u56deL2\u5f52\u4e00\u5316\u540e\u7684\u8bcd\u5411\u91cf\uff1a \"\"\" use_norm (bool, optional) \u2013 If True - resulting vector will be L2-normalized (unit euclidean length). \"\"\" wv . word_vec ( 'king' , use_norm = False ) array([ 1.25976562e-01, 2.97851562e-02, 8.60595703e-03, 1.39648438e-01, -2.56347656e-02, -3.61328125e-02, 1.11816406e-01, -1.98242188e-01, 5.12695312e-02, 3.63281250e-01, -2.42187500e-01, -3.02734375e-01, -1.77734375e-01, -2.49023438e-02, -1.67968750e-01, -1.69921875e-01, 3.46679688e-02, 5.21850586e-03, 4.63867188e-02, 1.28906250e-01, 1.36718750e-01, 1.12792969e-01, 5.95703125e-02, 1.36718750e-01, 1.01074219e-01, -1.76757812e-01, -2.51953125e-01, 5.98144531e-02, 3.41796875e-01, -3.11279297e-02, 1.04492188e-01, 6.17675781e-02, 1.24511719e-01, 4.00390625e-01, -3.22265625e-01, 8.39843750e-02, 3.90625000e-02, 5.85937500e-03, 7.03125000e-02, 1.72851562e-01, 1.38671875e-01, -2.31445312e-01, 2.83203125e-01, 1.42578125e-01, 3.41796875e-01, -2.39257812e-02, -1.09863281e-01, 3.32031250e-02, -5.46875000e-02, 1.53198242e-02, -1.62109375e-01, 1.58203125e-01, -2.59765625e-01, 2.01416016e-02, -1.63085938e-01, 1.35803223e-03, -1.44531250e-01, -5.68847656e-02, 4.29687500e-02, -2.46582031e-02, 1.85546875e-01, 4.47265625e-01, 9.58251953e-03, 1.31835938e-01, 9.86328125e-02, -1.85546875e-01, -1.00097656e-01, -1.33789062e-01, -1.25000000e-01, 2.83203125e-01, 1.23046875e-01, 5.32226562e-02, -1.77734375e-01, 8.59375000e-02, -2.18505859e-02, 2.05078125e-02, -1.39648438e-01, 2.51464844e-02, 1.38671875e-01, -1.05468750e-01, 1.38671875e-01, 8.88671875e-02, -7.51953125e-02, -2.13623047e-02, 1.72851562e-01, 4.63867188e-02, -2.65625000e-01, 8.91113281e-03, 1.49414062e-01, 3.78417969e-02, 2.38281250e-01, -1.24511719e-01, -2.17773438e-01, -1.81640625e-01, 2.97851562e-02, 5.71289062e-02, -2.89306641e-02, 1.24511719e-02, 9.66796875e-02, -2.31445312e-01, 5.81054688e-02, 6.68945312e-02, 7.08007812e-02, -3.08593750e-01, -2.14843750e-01, 1.45507812e-01, -4.27734375e-01, -9.39941406e-03, 1.54296875e-01, -7.66601562e-02, 2.89062500e-01, 2.77343750e-01, -4.86373901e-04, -1.36718750e-01, 3.24218750e-01, -2.46093750e-01, -3.03649902e-03, -2.11914062e-01, 1.25000000e-01, 2.69531250e-01, 2.04101562e-01, 8.25195312e-02, -2.01171875e-01, -1.60156250e-01, -3.78417969e-02, -1.20117188e-01, 1.15234375e-01, -4.10156250e-02, -3.95507812e-02, -8.98437500e-02, 6.34765625e-03, 2.03125000e-01, 1.86523438e-01, 2.73437500e-01, 6.29882812e-02, 1.41601562e-01, -9.81445312e-02, 1.38671875e-01, 1.82617188e-01, 1.73828125e-01, 1.73828125e-01, -2.37304688e-01, 1.78710938e-01, 6.34765625e-02, 2.36328125e-01, -2.08984375e-01, 8.74023438e-02, -1.66015625e-01, -7.91015625e-02, 2.43164062e-01, -8.88671875e-02, 1.26953125e-01, -2.16796875e-01, -1.73828125e-01, -3.59375000e-01, -8.25195312e-02, -6.49414062e-02, 5.07812500e-02, 1.35742188e-01, -7.47070312e-02, -1.64062500e-01, 1.15356445e-02, 4.45312500e-01, -2.15820312e-01, -1.11328125e-01, -1.92382812e-01, 1.70898438e-01, -1.25000000e-01, 2.65502930e-03, 1.92382812e-01, -1.74804688e-01, 1.39648438e-01, 2.92968750e-01, 1.13281250e-01, 5.95703125e-02, -6.39648438e-02, 9.96093750e-02, -2.72216797e-02, 1.96533203e-02, 4.27246094e-02, -2.46093750e-01, 6.39648438e-02, -2.25585938e-01, -1.68945312e-01, 2.89916992e-03, 8.20312500e-02, 3.41796875e-01, 4.32128906e-02, 1.32812500e-01, 1.42578125e-01, 7.61718750e-02, 5.98144531e-02, -1.19140625e-01, 2.74658203e-03, -6.29882812e-02, -2.72216797e-02, -4.82177734e-03, -8.20312500e-02, -2.49023438e-02, -4.00390625e-01, -1.06933594e-01, 4.24804688e-02, 7.76367188e-02, -1.16699219e-01, 7.37304688e-02, -9.22851562e-02, 1.07910156e-01, 1.58203125e-01, 4.24804688e-02, 1.26953125e-01, 3.61328125e-02, 2.67578125e-01, -1.01074219e-01, -3.02734375e-01, -5.76171875e-02, 5.05371094e-02, 5.26428223e-04, -2.07031250e-01, -1.38671875e-01, -8.97216797e-03, -2.78320312e-02, -1.41601562e-01, 2.07031250e-01, -1.58203125e-01, 1.27929688e-01, 1.49414062e-01, -2.24609375e-02, -8.44726562e-02, 1.22558594e-01, 2.15820312e-01, -2.13867188e-01, -3.12500000e-01, -3.73046875e-01, 4.08935547e-03, 1.07421875e-01, 1.06933594e-01, 7.32421875e-02, 8.97216797e-03, -3.88183594e-02, -1.29882812e-01, 1.49414062e-01, -2.14843750e-01, -1.83868408e-03, 9.91210938e-02, 1.57226562e-01, -1.14257812e-01, -2.05078125e-01, 9.91210938e-02, 3.69140625e-01, -1.97265625e-01, 3.54003906e-02, 1.09375000e-01, 1.31835938e-01, 1.66992188e-01, 2.35351562e-01, 1.04980469e-01, -4.96093750e-01, -1.64062500e-01, -1.56250000e-01, -5.22460938e-02, 1.03027344e-01, 2.43164062e-01, -1.88476562e-01, 5.07812500e-02, -9.37500000e-02, -6.68945312e-02, 2.27050781e-02, 7.61718750e-02, 2.89062500e-01, 3.10546875e-01, -5.37109375e-02, 2.28515625e-01, 2.51464844e-02, 6.78710938e-02, -1.21093750e-01, -2.15820312e-01, -2.73437500e-01, -3.07617188e-02, -3.37890625e-01, 1.53320312e-01, 2.33398438e-01, -2.08007812e-01, 3.73046875e-01, 8.20312500e-02, 2.51953125e-01, -7.61718750e-02, -4.66308594e-02, -2.23388672e-02, 2.99072266e-02, -5.93261719e-02, -4.66918945e-03, -2.44140625e-01, -2.09960938e-01, -2.87109375e-01, -4.54101562e-02, -1.77734375e-01, -2.79296875e-01, -8.59375000e-02, 9.13085938e-02, 2.51953125e-01], dtype=float32) \u4e0d\u5e78\u7684\u662f\uff0c\u8be5word2vec\u6a21\u578b\u65e0\u6cd5\u63a8\u65ad\u51fa\u964c\u751f\u5355\u8bcd\u7684\u5411\u91cf\u3002\u8fd9\u662fWord2Vec\u7684\u4e00\u4e2a\u5c40\u9650\uff1a\u5982\u679c\u4f60\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\uff0c\u8bf7\u67e5\u770bFastText\u6a21\u578b\u3002 try : vec_cameroon = wv [ 'cameroon' ] except KeyError : print ( \"The word 'cameroon' does not appear in this model\" ) The word 'cameroon' does not appear in this model","title":"\u83b7\u53d6\u8bcd\u5411\u91cf"},{"location":"gensim/14.1.word2vec%20model.html#_3","text":"Word2Vec\u652f\u6301\u591a\u4e2a\u5355\u8bcd\u76f8\u4f3c\u6027\u4efb\u52a1\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u76f8\u4f3c\u5ea6\u5982\u4f55\u968f\u7740\u5355\u8bcd\u53d8\u5f97\u8d8a\u6765\u8d8a\u5c11\u800c\u76f4\u89c2\u5730\u964d\u4f4e\u3002 pairs = [ ( 'car' , 'minivan' ), # a minivan is a kind of car ( 'car' , 'bicycle' ), # still a wheeled vehicle ( 'car' , 'airplane' ), # ok, no wheels, but still a vehicle ( 'car' , 'cereal' ), # ... and so on ( 'car' , 'communism' ), ] for w1 , w2 in pairs : print ( ' %r \\t %r \\t %.2f ' % ( w1 , w2 , wv . similarity ( w1 , w2 ))) 'car' 'minivan' 0.69 'car' 'bicycle' 0.54 'car' 'airplane' 0.42 'car' 'cereal' 0.14 'car' 'communism' 0.06 \u627e\u51fa5\u4e2a\u4e0ecar\u6216minivan\u6700\u76f8\u4f3c\u7684\u8bcd\uff1a \"\"\" most_similar(positive=None, negative=None, topn=10, restrict_vocab=None, indexer=None) restrict_vocab: int \u7528\u4e8e\u9650\u5236\u641c\u7d22\u6700\u76f8\u4f3c\u5355\u8bcd\u7684\u5411\u91cf\u8303\u56f4\u3002 \u4f8b\u5982\uff0crestrict_vocab=10000\u5c06\u53ea\u68c0\u67e5\u8bcd\u5e93\u987a\u5e8f\u4e2d\u7684\u524d10000\u4e2a\u8bcd\u5411\u91cf\u3002 \u5982\u679c\u8bcd\u5e93\u7684\u6392\u5e8f\u662f\u6309\u987a\u5e8f\u7684\uff0c\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\u53ef\u80fd\u4f1a\u6709\u610f\u4e49\u3002 \u627e\u51fa\u6700\u76f8\u4f3c\uff08\u6216\u6700\u4e0d\u76f8\u4f3c\uff09\u7684\u524dtopn\u4e2a\u5355\u8bcd\u3002 \"\"\" wv . most_similar ( positive = [ 'car' , 'minivan' ], topn = 5 ) [('SUV', 0.8532191514968872), ('vehicle', 0.8175784349441528), ('pickup_truck', 0.7763689160346985), ('Jeep', 0.7567334175109863), ('Ford_Explorer', 0.7565719485282898)] \u627e\u51fa5\u4e2a\u4e0ecar\u6216minivan\u6700\u4e0d\u76f8\u4f3c\u7684\u8bcd\uff1a wv . most_similar ( negative = [ 'car' , 'minivan' ], topn = 5 ) [('Philippe_Giaro_P.Geol', 0.31101420521736145), ('K.Kahne_###-###', 0.3042159676551819), ('C.Bowyer_###-###', 0.278561532497406), ('M.Truex_Jr._###-###', 0.27755749225616455), ('By_SEAN_BARRON', 0.27275702357292175)] .most_similar_cosmul() \u65b9\u6cd5\u4e0e .most_similar() \u65b9\u6cd5\u76f8\u4f3c\uff0c\u4f46\u662f .most_similar_cosmul() \u65b9\u6cd5\u4f7f\u7528multiplicative combination objective\u65b9\u6cd5\u53bb\u8ba1\u7b97\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 .most_similar_cosmul() \u8fd4\u56de\u7684\u6392\u540d\u4e0e .most_similar() \u76f8\u540c\u3002 multiplicative combination objective\u8ba1\u7b97\u65b9\u6cd5\u51fa\u81ea Omer Levy and Yoav Goldberg \u201cLinguistic Regularities in Sparse and Explicit Word Representations\u201d \"\"\" most_similar_cosmul(positive=None, negative=None, topn=10) \u627e\u6700\u76f8\u4f3c\u7684\u524dn\u4e2a\u5355\u8bcd \"\"\" wv . most_similar_cosmul ( positive = [ 'car' , 'minivan' ], topn = 5 ) [('SUV', 0.7949184775352478), ('vehicle', 0.7668868899345398), ('pickup_truck', 0.733077883720398), ('Jeep', 0.7184048891067505), ('Ford_Explorer', 0.7173909544944763)] \u5355\u8bcdwater\u4e0e\u5217\u8868\u4e2d\u54ea\u4e2a\u5355\u8bcd\u6700\u76f8\u4f3c\uff1f \"\"\" most_similar_to_given(entity1, entities_list) \u4eceentities_list\u83b7\u53d6\u4e0eentity1\u6700\u76f8\u4f3c\u7684entity\u3002 \"\"\" wv . most_similar_to_given ( entity1 = 'air' , entities_list = [ 'car' , 'minivan' , 'fire' , 'water' , 'land' , 'sea' ]) 'water' \u4ee5\u4e0b\u54ea\u4e2a\u4e0d\u5c5e\u4e8e\u8be5\u5e8f\u5217\uff1f wv . doesnt_match ([ 'fire' , 'water' , 'land' , 'sea' , 'air' , 'car' ]) C :\\ Users \\ two \\ AppData \\ Roaming \\ Python \\ Python36 \\ site - packages \\ gensim \\ models \\ keyedvectors . py : 893 : FutureWarning : arrays to stack must be passed as a \" sequence \" type such as list or tuple . Support for non - sequence iterables such as generators is deprecated as of NumPy 1 . 16 and will raise an error in the future . vectors = vstack ( self . word_vec ( word , use_norm = True ) for word in used_words ) . astype ( REAL ) ' car ' \u5728\u8bcd\u5e93\u4e2d\uff0c\u54ea\u4e9b\u5355\u8bcd\u6bd4SUV\u66f4\u63a5\u8fd1car\uff1f \"\"\" words_closer_than(w1, w2) w1 (str) \u2013 Input word. w2 (str) \u2013 Input word. \u5728\u8bcd\u5e93\u4e2d\u83b7\u53d6\u6240\u6709\u6bd4w2\u66f4\u63a5\u8fd1w1\u7684\u5355\u8bcd\u3002 \"\"\" wv . words_closer_than ( 'car' , 'SUV' ) ['vehicle', 'cars'] \"\"\" closer_than(entity1, entity2) \u83b7\u53d6\u6240\u6709\u6bd4entity2\u66f4\u63a5\u8fd1entity1\u7684entities\u3002 \"\"\" wv . closer_than ( 'car' , 'SUV' ) ['vehicle', 'cars'] wv . get_keras_embedding () Using TensorFlow backend. 2020-01-03 11:23:01,818 : WARNING : From C:\\Users\\two\\Anaconda3\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead. <keras.layers.embeddings.Embedding at 0x2663d025eb8> # wv.wmdistance(['car','minivan'], ['car']) errror:No module named 'pyemd' # \u67e5\u770b word2vec model\u7684\u5168\u90e8\u5c5e\u6027 [ i for i in dir ( wv ) if not i . startswith ( \"_\" )]","title":"\u76f8\u4f3c\u6027\u4efb\u52a1"},{"location":"gensim/14.1.word2vec%20model.html#_4","text":"\"\"\" distance(w1, w2) w1: str \u2013 Input word w2: str \u2013 Input word \u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u4f59\u5f26\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u5c0f\u8d8a\u76f8\u4f3c\u3002 \"\"\" wv . distance ( \"car\" , \"vehicle\" ) 0.21789032220840454 \"\"\" distances(word_or_vector, other_words=()) word_or_vector: str, numpy.ndarray \u2013 Word or vector from which distances are to be computed. other_words: iterable of str \u2013 \u5982\u679cother_words\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deword_or_vectors\u548cvocab\u4e2d\u6240\u6709\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u8ba1\u7b97\u5355\u8bcdword_or_vector\u548cother_words\u4e2d\u6240\u6709\u5355\u8bcd\u7684\u4f59\u5f26\u8ddd\u79bb\u3002 \"\"\" wv . distances ( word_or_vector = \"car\" , other_words = ( \"vehicle\" , 'SUV' , 'truck' , 'minivan' , 'car' )) array([0.21789044, 0.28390366, 0.32642102, 0.30929637, 0. ], dtype=float32)","title":"\u83b7\u53d6\u4f59\u5f26\u8ddd\u79bb"},{"location":"gensim/14.1.word2vec%20model.html#_5","text":"\"\"\" similarity(w1, w2) w1 (str) \u2013 Input word. w2 (str) \u2013 Input word. \u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . similarity ( \"car\" , \"car\" ) 1.0 \"\"\" n_similarity(ws1, ws2) ws1 (list of str) \u2013 Sequence of words. ws2 (list of str) \u2013 Sequence of words. \u8ba1\u7b97\u4e24\u7ec4\u5355\u8bcd\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . n_similarity ([ 'car' , 'minivan' ], [ 'car' ]) 0.89490217 \"\"\" # \u9759\u6001\u65b9\u6cd5 cosine_similarities(vector_1, vectors_all) vector_1 (numpy.ndarray) shape (dim,). vectors_all (numpy.ndarray) shape (num_vectors, dim). \u8ba1\u7b97\u4e00\u4e2a\u5411\u91cf\u548c\u4e00\u7ec4\u5176\u4ed6\u5411\u91cf\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . cosine_similarities ([ 1 , 2 , 3 ], [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]) array([1. , 0.97463185]) \u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff1a \u8ba1\u7b97\u65b9\u6cd5\u51fa\u81ea Artuur Leeuwenberga, Mihaela Velab , Jon Dehdaribc, Josef van Genabithbc \u201cA Minimally Supervised Approach for Synonym Extraction with Word Embeddings\u201d \u7684\u516c\u5f0f(1)\u3002 \"\"\" relative_cosine_similarity(wa, wb, topn=10) \u7ed9\u5b9a\u524dn\u4e2a\u76f8\u4f3c\u7684\u5355\u8bcd\uff0c\u8ba1\u7b97\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 \"\"\" wv . relative_cosine_similarity ( wa = 'car' , wb = 'minivan' , topn = 10 ) 0.1001322352889656","title":"\u83b7\u53d6\u4f59\u5f26\u76f8\u4f3c\u5ea6"},{"location":"gensim/14.1.word2vec%20model.html#_6","text":"\"\"\" rank(entity1, entity2) \u76f8\u5bf9\u4e8e\u6240\u6709entitie\u5230entity1\u7684\u8ddd\u79bb\uff0centity2\u5230entity1\u7684\u8ddd\u79bb\u7684\u6392\u540d\u3002 \"\"\" print ( wv . rank ( entity1 = 'car' , entity2 = 'cars' )) print ( wv . rank ( entity1 = 'car' , entity2 = 'car' )) 2 1","title":"\u83b7\u53d6\u8ddd\u79bb\u6392\u540d"},{"location":"gensim/14.1.word2vec%20model.html#_7","text":"\u9996\u5148\uff0c\u4f60\u9700\u8981\u4e00\u4e9b\u6570\u636e\u6765\u8bad\u7ec3\u6a21\u578b\u3002 \u5bf9\u4e8e\u4ee5\u4e0b\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Lee Corpus \u6570\u636e \uff0cgensim\u5e93\u5df2\u5e26\u6709\u8be5\u6570\u636e\u96c6\u3002 \u8fd9\u4e2a\u8bed\u6599\u5e93\u8db3\u591f\u5c0f\uff0c\u53ef\u4ee5\u5b8c\u5168\u52a0\u8f7d\u5165\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u5bf9\u5185\u5b58\u53cb\u597d\u7684\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u9010\u884c\u8bfb\u53d6\u5b83\uff0c\u7528\u6765\u6f14\u793agensim\u5982\u4f55\u5904\u7406\u66f4\u5927\u7684\u8bed\u6599\u5e93\u3002 from gensim.test.utils import datapath from gensim import utils class MyCorpus ( object ): \"\"\"\u4ea7\u751f\u53e5\u5b50\uff08lists of str\uff09\u7684\u8fed\u4ee3\u5668\u3002\"\"\" def __iter__ ( self ): corpus_path = datapath ( 'lee_background.cor' ) for line in open ( corpus_path ): # \u5047\u8bbe\u6bcf\u884c\u6709\u4e00\u4e2a\u6587\u6863\uff0ctokens\u88ab\u7a7a\u683c\u5206\u5f00 yield utils . simple_preprocess ( line ) 2020 - 01 - 02 21 : 16 : 01 , 714 : INFO : adding document # 0 to Dictionary ( 0 unique to kens : [] ) 2020 - 01 - 02 21 : 16 : 01 , 716 : INFO : built Dictionary ( 12 unique to kens : [' computer ' , ' human ' , ' int erface ' , ' response ' , ' survey '] ... ) from 9 documents ( to tal 29 corpus pos itions ) \u5982\u679c\u6211\u4eec\u60f3\u8fdb\u884c\u4efb\u4f55\u81ea\u5b9a\u4e49\u7684\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff1a\u89e3\u7801\u975e\u6807\u51c6\u7f16\u7801\u6570\u636e\u3001\u5b57\u6bcd\u5c0f\u5199\u5316\u3001\u5220\u9664\u6570\u5b57\u3001\u63d0\u53d6\u547d\u540d\u5b9e\u4f53\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u5728 MyCorpus \u8fed\u4ee3\u5668\u5185\u5b8c\u6210\uff0c\u800c word2vec \u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e9b\u5904\u7406\u3002 word2vec \u53ea\u9700\u8f93\u5165\u7684\u8fed\u4ee3\u5668\u4ea7\u751f\u4e00\u4e2a\u53c8\u4e00\u4e2a\u53e5\u5b50(list of utf-8 words) \u3002 \u8ba9\u6211\u4eec\u7ee7\u7eed\uff0c\u5728\u6211\u4eec\u7684\u8bed\u6599\u5e93\u4e0a\u8bad\u7ec3\u6a21\u578b\u3002 \u6682\u65f6\u4e0d\u5fc5\u62c5\u5fc3\u8bad\u7ec3\u53c2\u6570\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u5bf9\u5176\u8fdb\u884c\u8ba8\u8bba\u3002 import gensim.models sentences = MyCorpus () model = gensim . models . Word2Vec ( sentences = sentences ) 2020 - 01 - 02 21 : 16 : 05 , 695 : INFO : collecting all words and their counts 2020 - 01 - 02 21 : 16 : 05 , 698 : INFO : PROGRESS : at sentence # 0 , processed 0 words , keeping 0 word types 2020 - 01 - 02 21 : 16 : 06 , 042 : INFO : collected 6981 word types from a corpus of 58152 raw words and 300 sentences 2020 - 01 - 02 21 : 16 : 06 , 047 : INFO : Load ing a fre sh vocabulary 2020 - 01 - 02 21 : 16 : 06 , 126 : INFO : effective_min_count = 5 retains 1750 unique words ( 25 % of or iginal 6981 , drops 5231 ) 2020 - 01 - 02 21 : 16 : 06 , 128 : INFO : effective_min_count = 5 leaves 49335 word corpus ( 84 % of or iginal 58152 , drops 8817 ) 2020 - 01 - 02 21 : 16 : 06 , 140 : INFO : deleting the raw counts dictionary of 6981 items 2020 - 01 - 02 21 : 16 : 06 , 142 : INFO : sample = 0.001 downsamples 51 most - common words 2020 - 01 - 02 21 : 16 : 06 , 145 : INFO : downsampling leaves estimated 35935 word corpus ( 72.8 % of prior 49335 ) 2020 - 01 - 02 21 : 16 : 06 , 156 : INFO : estimated required memory for 1750 words and 100 dim ensions : 2275000 bytes 2020 - 01 - 02 21 : 16 : 06 , 157 : INFO : resetting layer weights 2020 - 01 - 02 21 : 16 : 06 , 683 : INFO : training model with 3 workers on 1750 vocabulary and 100 features , using sg = 0 hs = 0 sample = 0.001 negative = 5 window = 5 2020 - 01 - 02 21 : 16 : 06 , 863 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 06 , 877 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 06 , 884 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 06 , 886 : INFO : EPOCH - 1 : training on 58152 raw words ( 35883 effective words ) to ok 0.2 s , 180122 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 060 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 062 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 075 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 077 : INFO : EPOCH - 2 : training on 58152 raw words ( 35909 effective words ) to ok 0.2 s , 192286 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 249 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 251 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 268 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 269 : INFO : EPOCH - 3 : training on 58152 raw words ( 36011 effective words ) to ok 0.2 s , 190390 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 485 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 490 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 504 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 506 : INFO : EPOCH - 4 : training on 58152 raw words ( 35955 effective words ) to ok 0.2 s , 154656 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 709 : INFO : worker thread finished ; awaiting finish of 2 more threads 2020 - 01 - 02 21 : 16 : 07 , 711 : INFO : worker thread finished ; awaiting finish of 1 more threads 2020 - 01 - 02 21 : 16 : 07 , 723 : INFO : worker thread finished ; awaiting finish of 0 more threads 2020 - 01 - 02 21 : 16 : 07 , 724 : INFO : EPOCH - 5 : training on 58152 raw words ( 35937 effective words ) to ok 0.2 s , 167155 effective words / s 2020 - 01 - 02 21 : 16 : 07 , 726 : INFO : training on a 290760 raw words ( 179695 effective words ) to ok 1.0 s , 172497 effective words / s \u5efa\u7acb\u6a21\u578b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e\u4e0a\u9762\u6f14\u793a\u76f8\u540c\u7684\u65b9\u6cd5\u3002 \u6a21\u578b\u7684\u4e3b\u8981\u90e8\u5206\u662f model.wv \uff0c\u5176\u4e2d wv \u4ee3\u8868word vector\u3002 vec_king = model . wv [ 'king' ]; vec_king array([-0.00835394, -0.0045849 , 0.02337644, 0.06137834, 0.03927568, 0.0771808 , -0.00613491, 0.04881869, -0.01778515, -0.05783534, 0.05000733, 0.04546838, -0.04622583, 0.02119355, -0.08289969, 0.06297314, 0.00819165, -0.04722812, -0.01712785, -0.06220391, -0.01792748, -0.01274053, 0.03496742, -0.0297276 , -0.06460014, 0.04213679, -0.02229733, 0.07136393, 0.00484056, -0.00886152, -0.00471885, -0.00707228, 0.00073703, 0.00370342, -0.0162351 , 0.01090373, 0.02818023, -0.04841179, 0.04993173, 0.04033299, -0.0018242 , -0.00435686, 0.08839191, -0.06075187, -0.00611064, 0.00549908, -0.00981818, 0.0147628 , -0.03261513, 0.00605273, 0.03322693, 0.03558705, 0.03365535, -0.01211257, -0.05132781, 0.00949616, -0.00190306, 0.03689624, -0.01641419, -0.00697564, 0.03875671, 0.01708069, 0.00355519, 0.01152966, 0.04929205, 0.02247121, -0.01232615, 0.0412309 , 0.00039095, -0.01177677, -0.03727527, 0.07211189, -0.02746879, 0.01342012, -0.03975392, 0.01483131, 0.02386127, 0.01227524, -0.01146569, -0.00367378, 0.00885449, -0.01065395, 0.01139999, -0.03370672, -0.00587148, 0.02534425, 0.01000963, -0.04751983, -0.01368179, -0.0111518 , 0.03696112, 0.02186877, -0.03961398, -0.00126779, 0.02945407, -0.01498374, 0.00616166, -0.01830531, -0.0072393 , -0.01315761], dtype=float32) \u68c0\u7d22\u8bcd\u6c47\u7684\u65b9\u6cd5\u76f8\u540c\uff1a for i , word in enumerate ( model . wv . vocab ): if i == 10 : break print ( word ) hundreds of people have been forced to their homes in","title":"\u8bad\u7ec3\u81ea\u5df1\u7684\u6a21\u578b"},{"location":"gensim/14.1.word2vec%20model.html#_8","text":"\u5982\u679c\u8bed\u6599\u5e93\u8f83\u5927\uff0c\u8bad\u7ec3\u6a21\u578b\u4f1a\u82b1\u8d39\u4e0d\u5c11\u65f6\u95f4\u3002\u5982\u679c\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5c06\u5176\u4fdd\u5b58\u5230\u78c1\u76d8\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u4e0d\u5fc5\u5728\u4ee5\u540e\u518d\u82b1\u65f6\u95f4\u8fdb\u884c\u8bad\u7ec3\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 gensim \u7684\u6807\u51c6\u65b9\u6cd5\u533a\u50a8\u5b58\u548c\u52a0\u8f7d\u6a21\u578b\uff1a import tempfile with tempfile . NamedTemporaryFile ( prefix = 'gensim-model-' , delete = False ) as tmp : temporary_filepath = tmp . name model . save ( temporary_filepath ) # # The model is now safely stored in the filepath. # You can copy it to other machines, share it with others, etc. # # To load a saved model: # new_model = gensim . models . Word2Vec . load ( temporary_filepath ) \u8fd9\u79cd\u505a\u6cd5\u5c06\u4fdd\u5b58\u6a21\u578b\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u5b83\u5728\u5185\u90e8\u4f7f\u7528pickle\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u6a21\u578b\u7684\u5185\u90e8\u5927\u578bNumPy\u77e9\u9635\u76f4\u63a5\u4ece\u78c1\u76d8\u6587\u4ef6\u8f6c\u6362\u5230\u865a\u62df\u5185\u5b58\u4e2d\uff0c\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u5185\u5b58\u5171\u4eab\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u53ea\u4fdd\u5b58\u6a21\u578b\u7684\u8bcd\u5d4c\u5165\u5c42\u6743\u91cd\uff1a \u8bd1\u8005\u6ce8\uff1a\u8fd9\u79cd\u4fdd\u5b58\u683c\u5f0f\u5e94\u8be5\u4e0e\u539f\u59cbC\u5de5\u5177\u7684\u4fdd\u5b58\u683c\u5f0f\u76f8\u540c model . wv . save_word2vec_format () \u60a8\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u6216\u4e8c\u8fdb\u5236\u683c\u5f0f\u52a0\u8f7d\u7531\u539f\u59cbC\u5de5\u5177\u521b\u5efa\u7684\u6a21\u578b\uff1a model = gensim . models . KeyedVectors . load_word2vec_format ( '/tmp/vectors.txt' , binary = False )","title":"\u5b58\u50a8\u548c\u52a0\u8f7d\u6a21\u578b"},{"location":"gensim/14.1.word2vec%20model.html#gzippedbz2","text":"model = gensim . models . KeyedVectors . load_word2vec_format ( '/tmp/vectors.bin.gz' , binary = True )","title":"\u4e5f\u53ef\u4ee5\u8f93\u5165gzipped/bz2\u6587\u4ef6\uff0c\u65e0\u9700\u89e3\u538b\u7f29"},{"location":"gensim/14.1.word2vec%20model.html#_9","text":"Word2Vec \u63a5\u53d7\u51e0\u4e2a\u540c\u65f6\u5f71\u54cd\u8bad\u7ec3\u901f\u5ea6\u548c\u8d28\u91cf\u7684\u53c2\u6570\u3002","title":"\u8bad\u7ec3\u53c2\u6570"},{"location":"gensim/14.1.word2vec%20model.html#min_count","text":"min_count \u7528\u4e8e\u4fee\u526a\u5185\u90e8\u8bcd\u6c47\u8868\u3002\u5728\u5341\u4ebf\u4e2a\u5355\u8bcd\u7684\u8bed\u6599\u5e93\u4e2d\u4ec5\u51fa\u73b0\u4e00\u4e24\u6b21\u7684\u5355\u8bcd\u53ef\u80fd\u662f\u65e0\u8da3\u7684\u9519\u522b\u5b57\u548c\u5783\u573e\u3002\u6b64\u5916\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u6570\u636e\u6765\u5bf9\u8fd9\u4e9b\u5355\u8bcd\u8fdb\u884c\u4efb\u4f55\u6709\u610f\u4e49\u7684\u8bad\u7ec3\uff0c\u56e0\u6b64\u6700\u597d\u5ffd\u7565\u5b83\u4eec\uff1a # default value of min_count=5 model = gensim . models . Word2Vec ( sentences , min_count = 10 )","title":"min_count"},{"location":"gensim/14.1.word2vec%20model.html#size","text":"size \u662fgensim Word2Vec\u5c06\u5355\u8bcd\u6620\u5c04\u5230\u7684N\u7ef4\u7a7a\u95f4\u7684\u7ef4\u6570\uff08N\uff09\u3002\u8f83\u5927\u7684\u503c\u9700\u8981\u66f4\u591a\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u4f46\u53ef\u4ee5\u4ea7\u751f\u66f4\u597d\uff08\u66f4\u51c6\u786e\uff09\u7684\u6a21\u578b\u3002\u5408\u7406\u7684\u503c\u5728\u6570\u5341\u5230\u6570\u767e\u4e4b\u95f4\u3002 # default value of size=100 model = gensim . models . Word2Vec ( sentences , size = 200 )","title":"size"},{"location":"gensim/14.1.word2vec%20model.html#workers","text":"workers \u662f\u6700\u540e\u4e00\u4e2a\u4e3b\u8981\u7684\u53c2\u6570\uff08\u5168\u90e8\u53c2\u6570\u5217\u8868\u89c1 \u8fd9\u91cc \uff0c\u5b83\u7528\u4e8e\u5e76\u884c\u5316\u8bad\u7ec3\uff0c\u52a0\u5feb\u8bad\u7ec3\u901f\u5ea6\uff1a # default value of workers=3 (tutorial says 1...) model = gensim . models . Word2Vec ( sentences , workers = 4 ) workers \u53ea\u6709\u5728\u4f7f\u7528 Cython \u89e3\u6790\u5668 \u7684\u65f6\u5019\u624d\u751f\u6548\uff0c\u5982\u679c\u6ca1\u6709Cython\uff0c\u56e0\u4e3a\u5b58\u5728 GIL \uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u4e00\u4e2acpu\u6838\u5fc3\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c word2vec\u7684\u8bad\u7ec3\u901f\u5ea6 \u4f1a\u53d8\u5f97\u5f88\u6162\u5f88\u6162\u3002","title":"workers"},{"location":"gensim/14.1.word2vec%20model.html#memory","text":"Word2vec \u6a21\u578b\u53c2\u6570\u7684\u6838\u5fc3\u662f\u5b58\u50a8\u4e3a\u77e9\u9635(NumPy \u6570\u7ec4)\u3002 \u6bcf\u4e2a\u6570\u7ec4\u5927\u5c0f\u90fd\u662f\u8bcd\u6c47\u8868\u7684\u957f\u5ea6\u4e58\u4ee5 size \u53c2\u6570\u6d6e\u70b9\u6570\uff084\u5b57\u8282\u7684\u5355\u7cbe\u5ea6\uff09\u3002 \u5728RAM\u4e2d\u4fdd\u5b58\u4e86\u4e09\u4e2a\u8fd9\u6837\u7684\u77e9\u9635\uff08\u6b63\u5728\u52aa\u529b\u5c06\u8be5\u6570\u76ee\u51cf\u5c11\u5230\u4e24\u4e2a\uff0c\u751a\u81f3\u4e00\u4e2a\uff09\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u8f93\u5165\u7684\u8bcd\u6c47\u8868\u6709100,000\u552f\u4e00\u7684\u5355\u8bcd\uff0c\u5e76\u4e14\u60a8\u8981\u6c42\u7684\u9690\u85cf\u5c42\u5927\u5c0f\u4e3a200\uff0c\u5219\u8be5\u6a21\u578b\u5c06\u9700\u8981\u5927\u7ea6 $$ 100000 \\times 200 \\times 4 \\times 3\u5b57\u8282 \\approx 229 MB $$ \u5b58\u50a8 vocabulary tree \u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u5185\u5b58\uff08100,000\u4e2a\u5355\u8bcd\u5c06\u82b1\u8d39\u51e0MB\u7684\u50a8\u5b58\uff09\u3002\u56e0\u6b64\uff0c\u5185\u5b58\u5360\u7528\u91cf\u7531\u4e0a\u8ff0\u4e09\u4e2a\u77e9\u9635\u51b3\u5b9a\uff0c\u9664\u975e\u60a8\u7684\u5355\u8bcd\u662f\u5f88\u957f\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u3002","title":"Memory"},{"location":"gensim/14.1.word2vec%20model.html#evaluating","text":"Word2Vec training is an unsupervised task, there\u2019s no good way to objectively evaluate the result. Evaluation depends on your end application. Google has released their testing set of about 20,000 syntactic and semantic test examples, following the \u201cA is to B as C is to D\u201d task. It is provided in the 'datasets' folder. For example a syntactic analogy of comparative type is bad:worse;good:?. There are total of 9 types of syntactic comparisons in the dataset like plural nouns and nouns of opposite meaning. The semantic questions contain five types of semantic analogies, such as capital cities (Paris:France;Tokyo:?) or family members (brother:sister;dad:?). Gensim supports the same evaluation set, in exactly the same format: model . accuracy ( './datasets/questions-words.txt' ) This accuracy takes an optional parameter <http://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec.accuracy> _ restrict_vocab which limits which test examples are to be considered. In the December 2016 release of Gensim we added a better way to evaluate semantic similarity. By default it uses an academic dataset WS-353 but one can create a dataset specific to your business based on it. It contains word pairs together with human-assigned similarity judgments. It measures the relatedness or co-occurrence of two words. For example, 'coast' and 'shore' are very similar as they appear in the same context. At the same time 'clothes' and 'closet' are less similar because they are related but not interchangeable. model . evaluate_word_pairs ( datapath ( 'wordsim353.tsv' )) .. Important:: Good performance on Google's or WS-353 test set doesn\u2019t mean word2vec will work well in your application, or vice versa. It\u2019s always best to evaluate directly on your intended task. For an example of how to use word2vec in a classifier pipeline, see this tutorial <https://github.com/RaRe-Technologies/movie-plots-by-genre> _.","title":"Evaluating"},{"location":"gensim/14.1.word2vec%20model.html#_10","text":"\u9ad8\u7ea7\u7528\u6237\u53ef\u4ee5\u52a0\u8f7d\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u901a\u8fc7\u66f4\u591a\u7684\u53e5\u5b50\u6765\u7ee7\u7eed\u8bad\u7ec3\u6a21\u578b\uff1a model = gensim . models . Word2Vec . load ( temporary_filepath ) more_sentences = [ [ 'Advanced' , 'users' , 'can' , 'load' , 'a' , 'model' , 'and' , 'continue' , 'training' , 'it' , 'with' , 'more' , 'sentences' ] ] model . build_vocab ( more_sentences , update = True ) model . train ( more_sentences , total_examples = model . corpus_count , epochs = model . iter ) # cleaning up temporary file import os os . remove ( temporary_filepath ) \u60a8\u53ef\u80fd\u9700\u8981\u5c06 total_words \u53c2\u6570\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u7684\u5b66\u4e60\u901f\u7387\u8870\u51cf\u3002 \u8bf7\u6ce8\u610f\uff0c\u65e0\u6cd5\u589e\u91cf\u8bad\u7ec3\u4f7f\u7528C\u5de5\u5177 KeyedVectors.load_word2vec_format() \u751f\u6210\u7684\u6a21\u578b\uff0c\u4f46\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u67e5\u8be2/\u76f8\u4f3c\u6027\uff0c\u56e0\u4e3a\u6a21\u578b\u4e22\u5931\u4e86\u5bf9\u8bad\u7ec3\u81f3\u5173\u91cd\u8981\u7684\u4fe1\u606f\uff08vocab tree\uff09\u3002","title":"\u5728\u7ebf\u8bad\u7ec3/\u589e\u91cf\u8bad\u7ec3"},{"location":"gensim/14.1.word2vec%20model.html#training-loss-computation","text":"The parameter compute_loss can be used to toggle computation of loss while training the Word2Vec model. The computed loss is stored in the model attribute running_training_loss and can be retrieved using the function get_latest_training_loss as follows : # instantiating and training the Word2Vec model model_with_loss = gensim . models . Word2Vec ( sentences , min_count = 1 , compute_loss = True , hs = 0 , sg = 1 , seed = 42 ) # getting the training loss value training_loss = model_with_loss . get_latest_training_loss () print ( training_loss )","title":"Training Loss Computation"},{"location":"gensim/14.1.word2vec%20model.html#benchmarks","text":"Let's run some benchmarks to see effect of the training loss computation code on training time. We'll use the following data for the benchmarks:","title":"Benchmarks"},{"location":"gensim/14.1.word2vec%20model.html#lee-background-corpus-included-in-gensims-test-data","text":"","title":". Lee Background corpus: included in gensim's test data"},{"location":"gensim/14.1.word2vec%20model.html#text8-corpus-to-demonstrate-the-effect-of-corpus-size-well-look-at-the","text":"first 1MB, 10MB, 50MB of the corpus, as well as the entire thing. import io import os import gensim.models.word2vec import gensim.downloader as api import smart_open def head ( path , size ): with smart_open . open ( path ) as fin : return io . StringIO ( fin . read ( size )) def generate_input_data (): lee_path = datapath ( 'lee_background.cor' ) ls = gensim . models . word2vec . LineSentence ( lee_path ) ls . name = '25kB' yield ls text8_path = api . load ( 'text8' ) . fn labels = ( '1MB' , '10MB' , '50MB' , '100MB' ) sizes = ( 1024 ** 2 , 10 * 1024 ** 2 , 50 * 1024 ** 2 , 100 * 1024 ** 2 ) for l , s in zip ( labels , sizes ): ls = gensim . models . word2vec . LineSentence ( head ( text8_path , s )) ls . name = l yield ls input_data = list ( generate_input_data ()) We now compare the training time taken for different combinations of input data and model training parameters like hs and sg . For each combination, we repeat the test several times to obtain the mean and standard deviation of the test duration. # Temporarily reduce logging verbosity logging . root . level = logging . ERROR import time import numpy as np import pandas as pd train_time_values = [] seed_val = 42 sg_values = [ 0 , 1 ] hs_values = [ 0 , 1 ] fast = True if fast : input_data_subset = input_data [: 3 ] else : input_data_subset = input_data for data in input_data_subset : for sg_val in sg_values : for hs_val in hs_values : for loss_flag in [ True , False ]: time_taken_list = [] for i in range ( 3 ): start_time = time . time () w2v_model = gensim . models . Word2Vec ( data , compute_loss = loss_flag , sg = sg_val , hs = hs_val , seed = seed_val , ) time_taken_list . append ( time . time () - start_time ) time_taken_list = np . array ( time_taken_list ) time_mean = np . mean ( time_taken_list ) time_std = np . std ( time_taken_list ) model_result = { 'train_data' : data . name , 'compute_loss' : loss_flag , 'sg' : sg_val , 'hs' : hs_val , 'train_time_mean' : time_mean , 'train_time_std' : time_std , } print ( \"Word2vec model # %i : %s \" % ( len ( train_time_values ), model_result )) train_time_values . append ( model_result ) train_times_table = pd . DataFrame ( train_time_values ) train_times_table = train_times_table . sort_values ( by = [ 'train_data' , 'sg' , 'hs' , 'compute_loss' ], ascending = [ False , False , True , False ], ) print ( train_times_table )","title":". Text8 corpus.  To demonstrate the effect of corpus size, we'll look at the"},{"location":"gensim/14.1.word2vec%20model.html#adding-word2vec-model-to-dict-method-to-production-pipeline","text":"Suppose, we still want more performance improvement in production. One good way is to cache all the similar words in a dictionary. So that next time when we get the similar query word, we'll search it first in the dict. And if it's a hit then we will show the result directly from the dictionary. otherwise we will query the word and then cache it so that it doesn't miss next time. # re-enable logging logging . root . level = logging . INFO most_similars_precalc = { word : model . wv . most_similar ( word ) for word in model . wv . index2word } for i , ( key , value ) in enumerate ( most_similars_precalc . items ()): if i == 3 : break print ( key , value )","title":"Adding Word2Vec \"model to dict\" method to production pipeline"},{"location":"gensim/14.1.word2vec%20model.html#comparison-with-and-without-caching","text":"for time being lets take 4 words randomly import time words = [ 'voted' , 'few' , 'their' , 'around' ] Without caching start = time . time () for word in words : result = model . wv . most_similar ( word ) print ( result ) end = time . time () print ( end - start ) Now with caching start = time . time () for word in words : if 'voted' in most_similars_precalc : result = most_similars_precalc [ word ] print ( result ) else : result = model . wv . most_similar ( word ) most_similars_precalc [ word ] = result print ( result ) end = time . time () print ( end - start ) Clearly you can see the improvement but this difference will be even larger when we take more words in the consideration.","title":"Comparison with and without caching"},{"location":"gensim/14.1.word2vec%20model.html#visualising-the-word-embeddings","text":"The word embeddings made by the model can be visualised by reducing dimensionality of the words to 2 dimensions using tSNE. Visualisations can be used to notice semantic and syntactic trends in the data. Example: Semantic: words like cat, dog, cow, etc. have a tendency to lie close by Syntactic: words like run, running or cut, cutting lie close together. Vector relations like vKing - vMan = vQueen - vWoman can also be noticed. .. Important:: The model used for the visualisation is trained on a small corpus. Thus some of the relations might not be so clear. from sklearn.decomposition import IncrementalPCA # inital reduction from sklearn.manifold import TSNE # final reduction import numpy as np # array handling def reduce_dimensions ( model ): num_dimensions = 2 # final num dimensions (2D, 3D, etc) vectors = [] # positions in vector space labels = [] # keep track of words to label our data again later for word in model . wv . vocab : vectors . append ( model . wv [ word ]) labels . append ( word ) # convert both lists into numpy vectors for reduction vectors = np . asarray ( vectors ) labels = np . asarray ( labels ) # reduce using t-SNE vectors = np . asarray ( vectors ) tsne = TSNE ( n_components = num_dimensions , random_state = 0 ) vectors = tsne . fit_transform ( vectors ) x_vals = [ v [ 0 ] for v in vectors ] y_vals = [ v [ 1 ] for v in vectors ] return x_vals , y_vals , labels x_vals , y_vals , labels = reduce_dimensions ( model ) def plot_with_plotly ( x_vals , y_vals , labels , plot_in_notebook = True ): from plotly.offline import init_notebook_mode , iplot , plot import plotly.graph_objs as go trace = go . Scatter ( x = x_vals , y = y_vals , mode = 'text' , text = labels ) data = [ trace ] if plot_in_notebook : init_notebook_mode ( connected = True ) iplot ( data , filename = 'word-embedding-plot' ) else : plot ( data , filename = 'word-embedding-plot.html' ) def plot_with_matplotlib ( x_vals , y_vals , labels ): import matplotlib.pyplot as plt import random random . seed ( 0 ) plt . figure ( figsize = ( 12 , 12 )) plt . scatter ( x_vals , y_vals ) # # Label randomly subsampled 25 data points # indices = list ( range ( len ( labels ))) selected_indices = random . sample ( indices , 25 ) for i in selected_indices : plt . annotate ( labels [ i ], ( x_vals [ i ], y_vals [ i ])) try : get_ipython () except Exception : plot_function = plot_with_matplotlib else : plot_function = plot_with_plotly plot_function ( x_vals , y_vals , labels )","title":"Visualising the Word Embeddings"},{"location":"gensim/14.1.word2vec%20model.html#_11","text":"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u4e0a\u8bad\u7ec3word2vec\u6a21\u578b\u4ee5\u53ca\u5982\u4f55\u5bf9\u5176\u8fdb\u884c\u8bc4\u4f30\u3002\u5e0c\u671b\u60a8\u4e5f\u80fd\u5728\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4f7f\u7528\u8fd9\u4e2a\u53d7\u6b22\u8fce\u7684\u5de5\u5177\uff01","title":"\u603b\u7ed3"},{"location":"gensim/14.1.word2vec%20model.html#links","text":"API docs: gensim.models.word2vec Original C toolkit and word2vec papers by Google .","title":"Links"},{"location":"gensim/14.2.word2vec%E5%8F%82%E6%95%B0.html","text":"sentences (iterable of iterables, optional)\uff1a\u53ef\u8fed\u4ee3\u7684sentences\u53ef\u4ee5\u53ea\u662ftoken\u7684\u5217\u8868\uff0c\u4f46\u662f\u5bf9\u4e8e\u8f83\u5927\u7684\u8bed\u6599\u5e93\uff0c\u8003\u8651\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u4ece\u78c1\u76d8/\u7f51\u7edc\u751f\u6210sentence\u7684\u8fed\u4ee3\u5668\u3002 \u53c2\u8003\u5728 word2vec \u6a21\u5757\u4e2d\u7684 BrownCorpus \u3001 Text8Corpus \u3001 LineSentence \u7c7b\u4e2d\u7684\u4f8b\u5b50\u3002\u53c2\u8003 tutorial on data streaming in Python \u3002 \u5982\u679c\u4f60\u4e0d\u63d0\u4f9bsentences\u53c2\u6570\uff0c\u6a21\u578b\u5c31\u4e0d\u4f1a\u88ab\u521d\u59cb\u5316\u3002\u5982\u679c\u4f60\u6253\u7b97\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u521d\u59cb\u5316\u6a21\u578b\uff0c\u53ef\u4ee5\u4e0d\u63d0\u4f9b\u53c2\u6570\u3002 corpus_file ( str , optional)\uff1a LineSentence \u683c\u5f0f\u7684 corpus\u6587\u4ef6\u8def\u5f84\u3002\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53c2\u6570\u4ee3\u66ffsentences \u53c2\u6570\u6765\u52a0\u901f\u8bad\u7ec3\u3002 size ( int , optional)\uff1a\u8bcd\u5411\u91cf\u7684\u7ef4\u5ea6\u6570\u3002\u7ef4\u5ea6\u592a\u5c0f\u4f1a\u65e0\u6cd5\u6709\u6548\u8868\u8fbe\u8bcd\u4e0e\u8bcd\u7684\u5173\u7cfb\uff0c\u7ef4\u5ea6\u592a\u5927\u4f1a\u4f7f\u5173\u7cfb\u592a\u7a00\u758f\u800c\u96be\u4ee5\u627e\u51fa\u89c4\u5219\u3002 window ( int , optional)\uff1a\u53e5\u5b50\u4e2d\u5f53\u524d\u5355\u8bcd\u548c\u9884\u6d4b\u5355\u8bcd\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb\u3002CBOW\u4e0b\u51b3\u5b9aWord2Vec\u4e00\u6b21\u53d6\u591a\u5c11\u8bcd\u6765\u9884\u6d4b\u4e2d\u95f4\u8bcd\uff08Skip-gram\u7684\u72b6\u51b5\u662f\u53cd\u8fc7\u6765\u7684\uff09 min_count ( int , optional)\uff1a\u5ffd\u7565\u6240\u6709\u4f4e\u4e8e\u8fd9\u4e2a\u9891\u7387\u7684\u5355\u8bcd\u3002 workers ( int , optional)\uff1a\u8bad\u7ec3\u4f7f\u7528\u7684\u7ebf\u7a0b\u6570\u3002 sg ( {0, 1} , optional)\uff1a\u9009\u62e9\u8bad\u7ec3\u7b97\u6cd5\uff1a1\u4ee3\u8868skip-gram\uff0c\u5426\u5219\u4e3a CBOW\u3002 hs ( {0, 1} , optional)\uff1ahs = 0\u65f6\u91c7\u7528Negative Sampling\uff0chs = 1\u65f6\u91c7\u7528 Hierarchical Softmax\u3002 negative ( int , optional)\uff1a\u5982\u679c\u5927\u4e8e0\uff0c\u5c06\u4f7f\u7528Negative Sampling\uff0c\u6574\u6570\u503c\u6307\u5b9a\u5e94\u8be5\u7ed8\u5236\u591a\u5c11\u201c\u566a\u97f3\u5b57\u201d(\u901a\u5e38\u57285-20\u4e4b\u95f4)\u3002 \u5982\u679c\u4e3a0\uff0c\u5219\u4e0d\u4f7f\u7528Negative Sampling\u30025~20\u9002\u5408\u5c0f\u6570\u636e\uff0c2~5\u9002\u5408\u5927\u6570\u636e\u3002 ns_exponent ( float , optional)\uff1aexponent\u7528\u6765\u5f62\u6210negative sampling\u7684\u5206\u5e03.A value of 1.0 samples exactly in proportion to the frequencies, 0.0 samples all words equally, while a negative value samples low-frequency words more than high-frequency words. \u9ed8\u8ba4\u503c0.75\u662f\u7531\u539f\u59cbWord2Vec\u8bba\u6587\u9009\u62e9\u7684\u3002\u800c\u6700\u8fd1\u7684 \u8bba\u6587 \u6307\u51fa\u5728\u63a8\u8350\u7cfb\u7edf\u7684\u5e94\u7528\u4e2d\uff0c\u8bbe\u7f6e\u5176\u4ed6\u503c\u4e5f\u8bb8\u4f1a\u5f97\u5230\u66f4\u597d\u7684\u6027\u80fd\u3002 cbow_mean ( {0, 1} , optional)\uff1acbow_mean=0\uff1a\u4f7f\u7528\u4e0a\u4e0b\u6587\u5355\u8bcd\u5411\u91cf\u4e4b\u548c\u3002cbow_mean=1\uff1a\u4f7f\u7528\u5e73\u5747\u503c\u3002\u53ea\u6709\u5f53\u4f7f\u7528 cbow \u65f6\u624d\u9002\u7528\u3002 alpha ( float , optional)\uff1a\u521d\u59cb\u5b66\u4e60\u7387\u3002 min_alpha ( float , optional) \u2013\u968f\u7740\u8bad\u7ec3\u7684\u8fdb\u884c\uff0c\u5b66\u4e60\u7387\u5c06\u7ebf\u6027\u4e0b\u964d\u5230 min alpha\u3002 seed ( int , optional)\uff1aSeed for the random number generator. Initial vectors for each word are seeded with a hash of the concatenation of word + str(seed). Note that for a fully deterministically-reproducible run, you must also limit the model to a single worker thread (workers=1), to eliminate ordering jitter from OS thread scheduling. (In Python 3, reproducibility between interpreter launches also requires use of the PYTHONHASHSEED environment variable to control hash randomization). max_vocab_size ( int , optional)\uff1a\u5728\u8bcd\u6c47\u8868\u6784\u5efa\u8fc7\u7a0b\u4e2d\u9650\u5236\u5185\u5b58\u7684\u4f7f\u7528\uff0cWord2Vec\u7684\u8bcd\u5178\u5bb9\u7eb3\u4e0a\u9650\u3002\u5982\u679c\u8bcd\u5e93\u7684\u5355\u8bcd\u6570\u6bd4max_vocab_size\u5927\uff0c\u90a3\u4e48\u51fa\u73b0\u6b21\u6570\u6700\u4f4e\u7684\u8bcd\u4f1a\u4f18\u5148\u88ab\u5254\u9664\u3002\u6bcf1000\u4e07\u4e2a\u5355\u8bcd\u9700\u8981\u5927\u7ea61gb \u7684\u5185\u5b58\u3002\u8bbe\u7f6e\u4e3aNone\uff0c\u5219\u6ca1\u6709\u9650\u5236\u3002 max_final_vocab ( int , optional)\uff1a\u901a\u8fc7\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a\u5339\u914d\u7684min_count\u6765\u9650\u5236vocab\u7684\u5927\u5c0f\u3002\u5982\u679c\u6307\u5b9a\u7684min_count\u5927\u4e8e\u8ba1\u7b97\u7684min_count\uff0c\u5219\u4f7f\u7528\u6307\u5b9a\u7684min_count\u3002\u5982\u679c\u4e0d\u9700\u8981\u5219\u8bbe\u7f6e\u4e3aNone\u3002 sample ( float , optional)\uff1aThe threshold for configuring which higher-frequency words are randomly downsampled, useful range is (0, 1e-5). hashfxn ( function , optional)\uff1a\u7528Hash function\u6765\u968f\u673a\u521d\u59cb\u5316\u6743\u91cd\uff0c\u4ee5\u589e\u52a0\u8bad\u7ec3\u7684\u91cd\u590d\u6027\u3002 iter ( int , optional)\uff1a\u8bed\u6599\u5e93\u4e0a\u7684\u8fed\u4ee3\u6b21\u6570(epochs)\u3002 trim_rule ( function , optional)\uff1a\u8bcd\u6c47\u4fee\u526a\u89c4\u5219\uff0c\u6307\u5b9a\u54ea\u4e9b\u5355\u8bcd\u5e94\u4fdd\u7559\u5728\u8bcd\u6c47\u4e2d\u3001\u88ab\u4fee\u526a\u6389\u8fd8\u662f\u4f7f\u7528\u9ed8\u8ba4\u503c\u5904\u7406\uff08\u5982\u679c\u8bcd\u9891\u8ba1\u6570<min_count\u5219\u4e22\u5f03\uff09\u3002\u5982\u679c\u4e3aNone\uff0c min_count \u53c2\u6570\u5c06\u88ab\u4f7f\u7528\u3002\u5982\u679c\u7ed9\u51fa\u89c4\u5219\uff0c\u5219\u8be5\u89c4\u5219\u4ec5\u7528\u4e8e\u5728 build_vocab() \u671f\u95f4\u4fee\u526a\u8bcd\u6c47\uff0c\u800c\u4e0d\u4f1a\u5b58\u50a8\u4e3a\u6a21\u578b\u7684\u4e00\u90e8\u5206\u3002 sorted_vocab ( {0, 1} , optional)\uff1asorted_vocab=1\uff0c\u5728\u7ed9\u8bcd\u5e93\u7684\u5355\u8bcd\u7f16\u53f7\uff08\u7ed9word\u6307\u5b9aindex\uff09\u4e4b\u524d\u5148\u6309\u8bcd\u9891\u964d\u5e8f\u6392\u5217\u5355\u8bcd\u3002\u8bf7\u53c2\u9605 sort_vocab() \u3002 batch_words ( int , optional)\uff1aTarget size (in words) for batches of examples passed to worker threads (and thus cython routines).(Larger batches will be passed if individual texts are longer than 10000 words, but the standard cython code truncates to that maximum.) compute_loss ( bool , optional)\uff1aIf True, computes and stores loss value which can be retrieved using get_latest_training_loss() . callbacks (iterable of CallbackAny2Vec , optional)\uff1aSequence of callbacks to be executed at specific stages during training.","title":"14.2.word2vec\u53c2\u6570"},{"location":"pandas/9.1.Series.html","text":"import pandas as pd from pandas import Series from toolkit import H Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.27 pandas version: 1.2.2 Series\u662f\u80fd\u591f\u4fdd\u5b58\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u7684\u4e00\u7ef4\u6570\u7ec4\u3002 Series\u7c7b\u4f3cnumpy\u7684\u4e00\u7ef4ndarray\uff0c\u4f46\u662f\u548cndarray\u53c8\u4e0d\u540c\uff0cndarray\u7684\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\u6216\u7ed3\u6784\u5fc5\u987b\u76f8\u540c 1 \uff0c\u800cSeries\u80fd\u4fdd\u5b58\u4e0d\u540c\u7c7b\u578b\u3001\u7ed3\u6784\u7684\u6570\u636e\uff1b\u53e6\u5916Series\u7684\u5143\u7d20\u5e26\u6709\u7d22\u5f15\u3002Series\u50cf\u4e00\u4e2a\u6709\u5e8f\u5b57\u5178\uff0c\u56e0\u4e3a\u5b83\u662f\u7d22\u5f15\u503c\u5230\u6570\u636e\u503c\u7684\u4e00\u4e2a\u6620\u5c04\u3002\u5b83\u53ef\u4ee5\u7528\u5728\u8bb8\u591a\u539f\u672c\u9700\u8981\u5b57\u5178\u53c2\u6570\u7684\u51fd\u6570\u4e2d\u3002 \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efaSeries\u6570\u636e\u7ed3\u6784\uff1a \u5b57\u5178 \u4e00\u7ef4NumPy\u6570\u7ec4 \u5355\u4e2a\u6807\u91cf\uff1a\u6570\u503c\u6807\u91cf\u3001\u5b57\u7b26\u4e32 list\u3001tuple\uff08\u53ef\u4ee5\u662f\u591a\u5c42\u5d4c\u5957\u7684list\u3001tuple\uff09 Series\u7c7b Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False) \u53c2\u6570\uff1a data \uff1a dict \u3001 array-like \u3001 list \u3001 scalar \u3002\u5982\u679c\u662f\u5e8f\u5217\u6216\u6570\u7ec4\uff0c\u5219\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 \u5982\u679c\u662f\u5b57\u5178\uff0c\u5219\u5b57\u5178\u7684\u952e\u6307\u5b9a\u4e86 label \u3002\u5982\u679c\u540c\u65f6\u4f7f\u7528\u4e86 index \uff0c\u5219\u4ee5 index \u4e3a\u51c6\u3002 \u5982\u679c\u662f\u6807\u91cf\uff0c\u5219\u7ed3\u679c\u4e3a\uff1a\u8be5\u6807\u91cf\u6269\u5145\u4e3a index \u957f\u5ea6\u76f8\u540c\u7684\u5217\u8868\u3002 index \uff1a\u4e00\u4e2a array-like \u6216\u8005\u4e00\u4e2a Index \u5bf9\u8c61\u3002\u5b83\u6307\u5b9a\u4e86 label \u3002\u5176\u503c\u8981\u6c42 hashable \uff0c\u4f46\u4e0d\u8981\u6c42\u60df\u4e00\uff0c\u957f\u5ea6\u4e0e data \u4e00\u81f4\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u4f7f\u7528 RangeIndex (0, 1, 2, ..., n) \u3002 name \uff1a str \uff0c Series \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u6570\u636e\u7c7b\u578b\u88ab\u81ea\u52a8\u63a8\u65ad copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data \u8fd8\u53ef\u4ee5\u901a\u8fc7\u7c7b\u65b9\u6cd5\u521b\u5efa Series \uff1a Series . from_array ( arr , index = None , name = None , dtype = None , copy = False , fastpath = False ) \u4f46 from_array \u7c7b\u65b9\u6cd5\u4ecepandas 0.23\u7248\u672c\u8d77\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u4f1a\u88ab\u79fb\u9664\u3002 print ( \"pandas version:\" , pd . __version__ ) print ( \"Has 'from_array' attr?\" , hasattr ( Series , \"from_array\" )) pandas version: 1.2.2 Has 'from_array' attr? False \u4ece dict \u6765\u521b\u5efa \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2a\u5b57\u5178\uff0c\u5219\u7ed3\u679cSeries\u4e2d\u7684\u7d22\u5f15\u5c31\u662f\u539f\u5b57\u5178\u7684\u952e\uff1a sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } # dict\u7684key\u662f\u65e0\u5e8f\u7684\uff0c\u4f46series\u7684index\u662f\u6709\u5e8f\u7684 Series ( sdata ) Ohio 35000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u539f\u5b57\u5178\u7684key\u7684\u6392\u5217\u987a\u5e8f\uff1a \u6ce8\u610f \u5982\u679c\u4f20\u5165dict\u548c\u5e76\u6307\u5b9aindex\uff0cindex\u9700\u8981\u548cdict\u7684\u952e\u5339\u914d\uff0c\u82e5index\u4e0d\u5728dict\u7684key\u4e2d\uff0c\u5bf9\u5e94\u7684series\u503c\u5219\u4e3aNaN\u3002 sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } states = [ 'California' , 'Ohio' , 'Oregon' , 'Texas' ] Series ( sdata , index = states ) California NaN Ohio 35000.0 Oregon 16000.0 Texas 71000.0 dtype: float64 \u4eceNumPy\u6570\u7ec4\u6765\u521b\u5efa \u6570\u7ec4\u5fc5\u987b\u662f\u4e00\u7ef4\u7684\uff1a import numpy as np a = np . array ([ 1 , 2 , 3 ]) Series ( a ) 0 1 1 2 2 3 dtype: int32 \u4ece\u6807\u91cf\u521b\u5efa \u5982\u679c\u63d0\u4f9b\u7d22\u5f15\uff0c\u5c06\u91cd\u590d\u6807\u91cf\u503c\u4ee5\u5339\u914d\u7d22\u5f15\u7684\u957f\u5ea6\u3002 Series ( 5 , index = [ 0 , 1 , 2 , 3 ]) 0 5 1 5 2 5 3 5 dtype: int64 \u5b9e\u9645\u4e0anumpy\u53ef\u4ee5\u5b9a\u4e49\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684\u7ed3\u6784\u6570\u7ec4\u3002 \u21a9","title":"9.1.Series"},{"location":"pandas/9.1.Series.html#series","text":"Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False) \u53c2\u6570\uff1a data \uff1a dict \u3001 array-like \u3001 list \u3001 scalar \u3002\u5982\u679c\u662f\u5e8f\u5217\u6216\u6570\u7ec4\uff0c\u5219\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 \u5982\u679c\u662f\u5b57\u5178\uff0c\u5219\u5b57\u5178\u7684\u952e\u6307\u5b9a\u4e86 label \u3002\u5982\u679c\u540c\u65f6\u4f7f\u7528\u4e86 index \uff0c\u5219\u4ee5 index \u4e3a\u51c6\u3002 \u5982\u679c\u662f\u6807\u91cf\uff0c\u5219\u7ed3\u679c\u4e3a\uff1a\u8be5\u6807\u91cf\u6269\u5145\u4e3a index \u957f\u5ea6\u76f8\u540c\u7684\u5217\u8868\u3002 index \uff1a\u4e00\u4e2a array-like \u6216\u8005\u4e00\u4e2a Index \u5bf9\u8c61\u3002\u5b83\u6307\u5b9a\u4e86 label \u3002\u5176\u503c\u8981\u6c42 hashable \uff0c\u4f46\u4e0d\u8981\u6c42\u60df\u4e00\uff0c\u957f\u5ea6\u4e0e data \u4e00\u81f4\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u4f7f\u7528 RangeIndex (0, 1, 2, ..., n) \u3002 name \uff1a str \uff0c Series \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u6570\u636e\u7c7b\u578b\u88ab\u81ea\u52a8\u63a8\u65ad copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data \u8fd8\u53ef\u4ee5\u901a\u8fc7\u7c7b\u65b9\u6cd5\u521b\u5efa Series \uff1a Series . from_array ( arr , index = None , name = None , dtype = None , copy = False , fastpath = False ) \u4f46 from_array \u7c7b\u65b9\u6cd5\u4ecepandas 0.23\u7248\u672c\u8d77\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u4f1a\u88ab\u79fb\u9664\u3002 print ( \"pandas version:\" , pd . __version__ ) print ( \"Has 'from_array' attr?\" , hasattr ( Series , \"from_array\" )) pandas version: 1.2.2 Has 'from_array' attr? False","title":"Series\u7c7b"},{"location":"pandas/9.1.Series.html#dict","text":"\u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2a\u5b57\u5178\uff0c\u5219\u7ed3\u679cSeries\u4e2d\u7684\u7d22\u5f15\u5c31\u662f\u539f\u5b57\u5178\u7684\u952e\uff1a sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } # dict\u7684key\u662f\u65e0\u5e8f\u7684\uff0c\u4f46series\u7684index\u662f\u6709\u5e8f\u7684 Series ( sdata ) Ohio 35000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u539f\u5b57\u5178\u7684key\u7684\u6392\u5217\u987a\u5e8f\uff1a \u6ce8\u610f \u5982\u679c\u4f20\u5165dict\u548c\u5e76\u6307\u5b9aindex\uff0cindex\u9700\u8981\u548cdict\u7684\u952e\u5339\u914d\uff0c\u82e5index\u4e0d\u5728dict\u7684key\u4e2d\uff0c\u5bf9\u5e94\u7684series\u503c\u5219\u4e3aNaN\u3002 sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } states = [ 'California' , 'Ohio' , 'Oregon' , 'Texas' ] Series ( sdata , index = states ) California NaN Ohio 35000.0 Oregon 16000.0 Texas 71000.0 dtype: float64","title":"\u4ecedict\u6765\u521b\u5efa"},{"location":"pandas/9.1.Series.html#numpy","text":"\u6570\u7ec4\u5fc5\u987b\u662f\u4e00\u7ef4\u7684\uff1a import numpy as np a = np . array ([ 1 , 2 , 3 ]) Series ( a ) 0 1 1 2 2 3 dtype: int32","title":"\u4eceNumPy\u6570\u7ec4\u6765\u521b\u5efa"},{"location":"pandas/9.1.Series.html#_1","text":"\u5982\u679c\u63d0\u4f9b\u7d22\u5f15\uff0c\u5c06\u91cd\u590d\u6807\u91cf\u503c\u4ee5\u5339\u914d\u7d22\u5f15\u7684\u957f\u5ea6\u3002 Series ( 5 , index = [ 0 , 1 , 2 , 3 ]) 0 5 1 5 2 5 3 5 dtype: int64 \u5b9e\u9645\u4e0anumpy\u53ef\u4ee5\u5b9a\u4e49\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684\u7ed3\u6784\u6570\u7ec4\u3002 \u21a9","title":"\u4ece\u6807\u91cf\u521b\u5efa"},{"location":"pandas/9.10.%E7%BB%98%E5%9B%BE.html","text":"from toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 module","title":"9.10.\u7ed8\u56fe"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html","text":"Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 df = DataFrame ( np . arange ( 24 ) . reshape ( 6 , 4 ), columns = [ \"a\" , \"b\" , \"c\" , \"d\" ]) df . iloc [ 3 ] = np . nan df . loc [ 2 , \"a\" ] = np . nan df . loc [ 4 , \"a\" ] = np . nan df . loc [ 1 , \"b\" ] = np . nan df . loc [ 5 , \"c\" ] = np . nan df a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u5904\u7406\u7f3a\u5931\u503c pandas\u7684 DataFrame \u8bd5\u56fe\u6a21\u4effR\u8bed\u8a00\u4e2d\u7684 data.frame \u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5728Python\u4e2d\uff0cpandas\u5efa\u7acb\u5728numpy\u4e4b\u4e0a\uff0c\u800c numpy \u53ea\u6709 nan \u503c\uff08Not a Number\uff09\uff0c\u56e0\u6b64pandas\u7528 nan \u503c\u8868\u793a \u7f3a\u5931\u6570\u636e \uff0cPython\u5185\u7f6e\u7684None\u503c\u5728 DataFrame \u4e2d\u4e5f\u4f5c\u4e3a nan \u503c\u3002\u4f46\u5728R\u8bed\u8a00\u4e2d\uff0c NA \u3001 NaN \u3001 Null \u6709\u4e0d\u540c\u7684\u610f\u4e49\uff1a NA \uff1a\u8868\u793a\u7f3a\u5931\u503c(Missing value)\uff0c\u662f\u201cNot Available\u201d\u7684\u7f29\u5199 NaN \uff1a\u8868\u793a\u975e\u6570\u503c\uff0c\u662f\u201cNot a Number\u201d\u7684\u7f29\u5199 NULL \uff1a\u8868\u793a\u7a7a\u503c\uff0c\u5373\u6ca1\u6709\u5185\u5bb9 \u56e0\u6b64\u5728pandas\u4e2d\uff0c\u5224\u65ad\u7f3a\u5931\u503c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a .isna \u548c isnull \uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u76f8\u540c\u7684\u3002\u867d\u7136\u7f3a\u5931\u6570\u636e\u5728pandas\u4e2d\u5448\u73b0\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u53ef\u4ee5\u4fdd\u8bc1\u529f\u80fd\u6b63\u5e38\u3002 \u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u7f3a\u5931\u6570\u636e\u5904\u7406\u7684\u51fd\u6570\uff1a \u65b9\u6cd5 \u8bf4\u660e isnull \u3001 isna \u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u5e03\u5c14\u503c\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5e03\u5c14\u503c\u8868\u793a\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c/NA\uff0c\u8be5\u5bf9\u8c61\u7684\u7c7b\u578b\u4e0e\u6e90\u7c7b\u578b\u4e00\u6837 fillna \u7528\u6307\u5b9a\u503c\u6216\u63d2\u503c\u65b9\u6cd5\uff08\u5982 ffill \u6216 bfill \uff09\u586b\u5145\u7f3a\u5931\u6570\u636e dropna \u6839\u636e\u5404\u6807\u7b7e\u7684\u503c\u4e2d\u662f\u5426\u5b58\u5728\u7f3a\u5931\u6570\u636e\u5bf9\u8f74\u6807\u7b7e\u8fdb\u884c\u8fc7\u6ee4\uff0c\u53ef\u901a\u8fc7\u9608\u503c\u8c03\u8282\u5bf9\u7f3a\u5931\u503c\u7684\u5bb9\u5fcd\u5ea6 notnull isnull \u7684\u5426\u5b9a\u5f0f \u7b5b\u9009\u51fa\u7f3a\u5931\u6570\u636e df . isna () a b c d 0 False False False False 1 False True False False 2 True False False False 3 True True True True 4 True False False False 5 False False True False \u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c df [ np . array ( df . isna ())] a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 print ( df . isna () . any ( axis = 1 )) df [ df . isna () . any ( axis = 1 )] 0 False 1 True 2 True 3 True 4 True 5 True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\u6570 df . isna () . any ( axis = 1 ) . sum () 5 \u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u5217 print ( df . isna () . any ( axis = 0 )) df [ np . array ( df . isna ())] a True b True c True d True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u5217\u6570 df . isna () . any ( axis = 0 ) . sum () 4 \u5220\u9664\u7f3a\u5931\u6570\u636e dropna ( axis = 0 , how = \"any\" , thresh = None , subset = None , inplace = False ) how \uff1a how=any \uff0c\u5220\u9664\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1b how=all \uff0c\u5220\u9664\u6240\u6709\u6570\u636e\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\u3002 thresh \uff1a\u5982\u679c\u67d0\u4e00\u884c\uff08\u5217\uff09\u6709 thresh \u4e2a\u975e NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\u8be5\u884c\uff08\u5217\uff09\u3002 subset \uff1a\u5220\u9664 NA \u6570\u636e\u65f6\uff0c\u8981\u8003\u8651\u7684\u5176\u4ed6\u8f74\u4e0a\u7684\u6807\u7b7e\u3002\u5373\u53ea\u8981\u8be5\u6807\u7b7e\u4e0d\u662f NA \u503c\uff0c\u5219\u65e0\u9700\u5220\u9664\u3002 \u5220\u9664\u6240\u6709\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a df . dropna ( how = \"any\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 \u5220\u9664\u6240\u6709\u503c\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a # \u56e0\u4e3a\u6ca1\u6709\u4e00\u884c\u6216\u5217\u90fd\u662fNA\u503c \u6240\u4ee5\u4e0d\u5220\u9664\u6570\u636e df . dropna ( how = \"all\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u6bcf\u4e00\u884c\u53ea\u8981\u67093\u4e2a\u503c\u4e0d\u662f NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , thresh = 3 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u53ea\u8981\u5217 a \u7684\u503c\u4e0d\u662f NA \u503c\uff0c\u5c31\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , subset = [ \"a\" ]) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 5 20.0 21.0 NaN 23.0 \u586b\u5145\u7f3a\u5931\u6570\u636e fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) value \uff1a scalar, dict, Series, or DataFrame \u3002\u7528\u4e8e\u586b\u5145\u7684\u503c\u3002\u5982\u679c\u4f20\u5165 dict \u3001 Series \u3001 DataFrame \uff0c\u5219\u6307\u5b9a\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2aindex\uff08\u5bf9\u4e8e Series \uff09\u6216\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2a\u5217\uff08\u5bf9\u4e8e DataFrame \uff09\u3002\u4e0d\u5728 dict \u3001 Series \u3001 DataFrame \u4e2d\u7684\u503c\u5c06\u4e0d\u88ab\u586b\u5145\u3002 method \uff1a {'backfill', 'bfill', 'pad', 'ffill', None} \u3002\u7528\u4e8e\u586b\u5145\u7684\u65b9\u6cd5\u3002 backfill \u548c bfill \u662f\u540e\u5411\u586b\u5145\uff08\u4ece\u540e\u5411\u524d\uff09\uff0c pad \u548c ffill \u662f\u524d\u5411\u586b\u5145\u3002 limit \uff1a int \u3002\u5f53\u6307\u5b9a\u4e86 method \u53c2\u6570\u65f6\uff0c limit \u662f\u6700\u5927\u8fde\u7eed\u586b\u5145\u7684\u6570\u91cf\u3002\u5f53\u6ca1\u6709\u6307\u5b9a method \u53c2\u6570\u65f6\uff0c limit \u662f\u6bcf\u4e2a\u8f74\u6700\u5927\u586b\u5145\u6570\u91cf\u3002 downcast \uff1a dict of item->dtype \uff0c\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 \u5168\u90e8 NA \u503c\u586b\u5145\u4e3a10\uff0c\u6bcf\u4e2a\u8f74\u6700\u591a\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( value = 10 , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 10.0 6.0 7.0 2 10.0 9.0 10.0 11.0 3 10.0 10.0 10.0 10.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 10.0 23.0 \u540e\u5411\u586b\u5145 NA \u503c\uff0c\u6700\u591a\u8fde\u7eed\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( method = \"bfill\" , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 9.0 6.0 7.0 2 NaN 9.0 10.0 11.0 3 20.0 17.0 18.0 19.0 4 20.0 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u5982\u679c\u60f3\u7528\u5e73\u5747\u503c\u6216\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u5145\uff0c\u4e5f\u662f\u5f88\u65b9\u4fbf\u7684\uff1a print ( df . mean ()) df . fillna ( df . mean ()) a 8.0 b 12.0 c 9.0 d 12.6 dtype: float64 a b c d 0 0.0 1.0 2.0 3.0 1 4.0 12.0 6.0 7.0 2 8.0 9.0 10.0 11.0 3 8.0 12.0 9.0 12.6 4 8.0 17.0 18.0 19.0 5 20.0 21.0 9.0 23.0 \u79fb\u9664\u91cd\u590d\u6570\u636e data = pd . DataFrame ({ 'k1' : [ 'one' , 'two' ] * 3 + [ 'two' ], 'k2' : [ 1 , 1 , 2 , 3 , 3 , 4 , 4 ]}) data k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 6 two 4 DataFrame\u7684 duplicated \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578b Series \uff0c\u8868\u793a\u5404\u884c\u662f\u5426\u662f\u91cd\u590d\u884c\uff08\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u884c\uff09\uff1a data . duplicated () 0 False 1 False 2 False 3 False 4 False 5 False 6 True dtype: bool drop_duplicates \u65b9\u6cd5\u79fb\u9664\u91cd\u590d\u6570\u636e\uff1a data . drop_duplicates () k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u9ed8\u8ba4\u4f1a\u5224\u65ad\u5168\u90e8\u5217\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u5217\u8fdb\u884c\u91cd\u590d\u9879\u5224\u65ad\uff1a data . duplicated ([ \"k1\" ]) 0 False 1 False 2 True 3 True 4 True 5 True 6 True dtype: bool duplicated \u548c drop_duplicates \u9ed8\u8ba4\u4fdd\u7559\u7684\u662f\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7ec4\u5408\u3002\u4f20\u5165keep='last'\u5219\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\uff1a data . drop_duplicates ([ 'k1' , 'k2' ], keep = 'last' ) k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 6 two 4 \u5229\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362 \u5bf9\u4e8e\u8bb8\u591a\u6570\u636e\u96c6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u6570\u7ec4\u3001Series\u6216DataFrame\u5217\u4e2d\u7684\u503c\u6765\u5b9e\u73b0\u8f6c\u6362\u5de5\u4f5c\u3002 data = pd . DataFrame ({ 'food' : [ 'bacon' , 'pulled pork' , 'bacon' , 'pastrami' , 'corned beef' , 'bacon' , 'pastrami' , 'honey ham' , 'nova lox' ], 'ounces' : [ 4 , 3 , 12 , 6 , 7.5 , 8 , 3 , 5 , 6 ]}) data food ounces 0 bacon 4.0 1 pulled pork 3.0 2 bacon 12.0 3 pastrami 6.0 4 corned beef 7.5 5 bacon 8.0 6 pastrami 3.0 7 honey ham 5.0 8 nova lox 6.0 \u5047\u8bbe\u4f60\u60f3\u8981\u6dfb\u52a0\u4e00\u5217\u8868\u793a\u8be5\u8089\u7c7b\u98df\u7269\u6765\u6e90\u7684\u52a8\u7269\u7c7b\u578b\u3002\u6211\u4eec\u5148\u7f16\u5199\u4e00\u4e2a\u4e0d\u540c\u8089\u7c7b\u5230\u52a8\u7269\u7684\u6620\u5c04\uff1a meat_to_animal = { 'bacon' : 'pig' , 'pulled pork' : 'pig' , 'pastrami' : 'cow' , 'corned beef' : 'cow' , 'honey ham' : 'pig' , 'nova lox' : 'salmon' } data [ 'food' ] . map ( meat_to_animal ) 0 pig 1 pig 2 pig 3 cow 4 cow 5 pig 6 cow 7 pig 8 salmon Name: food, dtype: object \u66ff\u6362\u503c \u5229\u7528 fillna \u65b9\u6cd5\u586b\u5145\u7f3a\u5931\u6570\u636e\u53ef\u4ee5\u770b\u505a\u503c\u66ff\u6362\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u524d\u9762\u5df2\u7ecf\u770b\u5230\uff0c map \u53ef\u7528\u4e8e\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u5b50\u96c6\uff0c\u800c replace \u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u8be5\u529f\u80fd\u7684\u66f4\u7b80\u5355\u3001\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2aSeries\uff1a data = pd . Series ([ 1. , - 999. , 2. , - 999. , - 1000. , 3. ]) data 0 1.0 1 -999.0 2 2.0 3 -999.0 4 -1000.0 5 3.0 dtype: float64 -999\u8fd9\u4e2a\u503c\u53ef\u80fd\u662f\u4e00\u4e2a\u8868\u793a\u7f3a\u5931\u6570\u636e\u7684\u6807\u8bb0\u503c\u3002\u8981\u5c06\u5176\u66ff\u6362\u4e3apandas\u80fd\u591f\u7406\u89e3\u7684NA\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 replace \u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Series\uff08\u9664\u975e\u4f20\u5165 inplace=True \uff09\uff1a data . replace ( - 999 , np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 -1000.0 5 3.0 dtype: float64 \u5982\u679c\u4f60\u5e0c\u671b\u4e00\u6b21\u6027\u66ff\u6362\u591a\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u7531\u5f85\u66ff\u6362\u503c\u7ec4\u6210\u7684\u5217\u8868\u4ee5\u53ca\u4e00\u4e2a\u66ff\u6362\u503c\uff1a data . replace ([ - 999 , - 1000 ], np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 NaN 5 3.0 dtype: float64 \u8981\u8ba9\u6bcf\u4e2a\u503c\u6709\u4e0d\u540c\u7684\u66ff\u6362\u503c\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u66ff\u6362\u5217\u8868\uff1a data . replace ([ - 999 , - 1000 ], [ np . nan , 0 ]) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64 \u4f20\u5165\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u5b57\u5178\uff1a data . replace ({ - 999 : np . nan , - 1000 : 0 }) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64 \u91cd\u547d\u540d\u8f74\u7d22\u5f15 \u8ddfSeries\u4e2d\u7684\u503c\u4e00\u6837\uff0c\u8f74\u6807\u7b7e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4e0d\u540c\u6807\u7b7e\u7684\u5bf9\u8c61\u3002\u8f74\u8fd8\u53ef\u4ee5\u88ab\u5c31\u5730\u4fee\u6539\uff0c\u800c\u65e0\u9700\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u63a5\u4e0b\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a data = pd . DataFrame ( np . arange ( 12 ) . reshape (( 3 , 4 )), index = [ 'Ohio' , 'Colorado' , 'New York' ], columns = [ 'one' , 'two' , 'three' , 'four' ]) data one two three four Ohio 0 1 2 3 Colorado 4 5 6 7 New York 8 9 10 11 \u8ddfSeries\u4e00\u6837\uff0c\u8f74\u7d22\u5f15\u4e5f\u6709\u4e00\u4e2a map \u65b9\u6cd5\uff1a transform = lambda x : x [: 4 ] . upper () data . index . map ( transform ) Index(['OHIO', 'COLO', 'NEW '], dtype='object') \u4f60\u53ef\u4ee5\u5c06\u5176\u8d4b\u503c\u7ed9index\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5bf9DataFrame\u8fdb\u884c\u5c31\u5730\u4fee\u6539\uff1a data . index = data . index . map ( transform ) data one two three four OHIO 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 \u5982\u679c\u60f3\u8981\u521b\u5efa\u6570\u636e\u96c6\u7684\u8f6c\u6362\u7248\uff08\u800c\u4e0d\u662f\u4fee\u6539\u539f\u59cb\u6570\u636e\uff09\uff0c\u6bd4\u8f83\u5b9e\u7528\u7684\u65b9\u6cd5\u662f rename \uff1a data . rename ( index = str . title , columns = str . upper ) ONE TWO THREE FOUR Ohio 0 1 2 3 Colo 4 5 6 7 New 8 9 10 11 \u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0c rename \u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u578b\u5bf9\u8c61\u5b9e\u73b0\u5bf9\u90e8\u5206\u8f74\u6807\u7b7e\u7684\u66f4\u65b0\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, columns = { 'three' : 'peekaboo' }) one two peekaboo four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 rename \u53ef\u4ee5\u5b9e\u73b0\u590d\u5236DataFrame\u5e76\u5bf9\u5176\u7d22\u5f15\u548c\u5217\u6807\u7b7e\u8fdb\u884c\u8d4b\u503c\u3002\u5982\u679c\u5e0c\u671b\u5c31\u5730\u4fee\u6539\u67d0\u4e2a\u6570\u636e\u96c6\uff0c\u4f20\u5165 inplace=True \u5373\u53ef\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, inplace = True ) data one two three four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 \u79bb\u6563\u5316\u548c\u9762\u5143\u5212\u5206 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u76f8\u5bf9\u8fde\u7eed\u7684\u6570\u636e\u5206\u7ec4\u5206\u6790\uff0c\u800cpandas\u6709\u4e00\u4e9b\u80fd\u6839\u636e\u6307\u5b9a \u201c\u9762\u5143\u201d \uff08bin\uff09\u6216\u6837\u672c\u5206\u4f4d\u6570\u5c06\u6570\u636e\u62c6\u5206\u6210\u591a\u5757\u7684\u5de5\u5177\uff08\u6bd4\u5982 pandas.cut() \u548c qcut \uff09\u3002\u5c06\u8fd9\u4e9b\u51fd\u6570\u8ddf groupby \u7ed3\u5408\u8d77\u6765\uff0c\u5c31\u80fd\u975e\u5e38\u8f7b\u677e\u5730\u5b9e\u73b0\u5bf9\u6570\u636e\u96c6\u7684\u6876\uff08bucket\uff09\u6216\u5206\u4f4d\u6570\uff08quantile\uff09\u5206\u6790\u4e86\u3002 \u5047\u8bbe\u6709\u4e00\u7ec4\u4eba\u5458\u6570\u636e\uff0c\u60f3\u5c06\u5b83\u4eec\u5212\u5206\u4e3a\u201c18\u523025\u201d\u3001\u201c26\u523035\u201d\u3001\u201c35\u523060\u201d\u4ee5\u53ca\u201c60\u4ee5\u4e0a\u201d4\u4e2a\u4e0d\u540c\u7684\u5e74\u9f84\u7ec4\uff1a ages = [ 20 , 22 , 25 , 27 , 21 , 23 , 37 , 31 , 61 , 45 , 41 , 32 ] bins = [ 18 , 25 , 35 , 60 , 100 ] cats = pd . cut ( ages , bins ) cats [(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]] Length: 12 Categories (4, interval[int64]): [(18, 25] < (25, 35] < (35, 60] < (60, 100]] list ( cats ) [Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(25, 35, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right'), Interval(60, 100, closed='right'), Interval(35, 60, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right')] pandas\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Categorical\u5bf9\u8c61\u3002\u7ed3\u679c\u5c55\u793a\u4e86 pandas.cut \u5212\u5206\u7684 \u9762\u5143 \u3002\u4f60\u53ef\u4ee5\u5c06\u8f93\u51fa\u7ed3\u679c\u770b\u505a\u4e00\u7ec4\u8868\u793a \u9762\u5143 \u540d\u79f0\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u7684\u5e95\u5c42\u542b\u6709\u4e00\u4e2a\u8868\u793a\u4e0d\u540c\u5206\u7c7b\u540d\u79f0\u7684\u7c7b\u578b\u6570\u7ec4\uff0c\u4ee5\u53ca\u4e00\u4e2acodes\u5c5e\u6027\u4e2d\u7684\u5e74\u9f84\u6570\u636e\u7684\u6807\u7b7e\uff1a pprint . pprint ( cats . codes ) pprint . pprint ( cats . categories ) pd . value_counts ( cats ) array([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8) IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], closed='right', dtype='interval[int64]') (18, 25] 5 (25, 35] 3 (35, 60] 3 (60, 100] 1 dtype: int64 pd.value_counts(cats) \u662f pandas.cut \u7ed3\u679c\u7684\u9762\u5143\u8ba1\u6570\u3002 \u793a\u4f8b\uff1a\u5206\u7ec4\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97 \u7531 cut \u8fd4\u56de\u7684 Categorical \u5bf9\u8c61\u53ef\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 groupby \u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bf9 ages \u505a\u4e00\u4e9b\u7edf\u8ba1\u8ba1\u7b97\uff1a def get_stats ( group ): return { 'min' : group . min (), 'max' : group . max (), 'count' : group . count (), 'mean' : group . mean ()} grouped = Series ( ages ) . groupby ( cats ) grouped . apply ( get_stats ) . unstack () min max count mean (18, 25] 20.0 25.0 5.0 22.2 (25, 35] 27.0 32.0 3.0 30.0 (35, 60] 37.0 45.0 3.0 41.0 (60, 100] 61.0 61.0 1.0 61.0 \u793a\u4f8b\uff1a\u5206\u7ec4\u586b\u5145\u7f3a\u5931\u503c \u5bf9\u4e8e\u7f3a\u5931\u6570\u636e\u7684\u586b\u5145\u5de5\u4f5c\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5e0c\u671b\u7528\u4e00\u4e2a\u7531\u6570\u636e\u96c6\u672c\u8eab\u6240\u884d\u751f\u51fa\u6765\u7684\u503c\u53bb\u586b\u5145NA\u503c\u3002\u4f8b\u5982\uff0c\u7528\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c\u3002 \u5047\u8bbe\u4f60\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u5206\u7ec4\u586b\u5145\u4e0d\u540c\u7684\u503c\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u6570\u636e\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528 apply \u548c\u4e00\u4e2a\u80fd\u591f\u5bf9\u5404\u6570\u636e\u5757\u8c03\u7528 fillna \u7684\u51fd\u6570\u5373\u53ef\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6709\u5173\u7f8e\u56fd\u51e0\u4e2a\u5dde\u7684\u793a\u4f8b\u6570\u636e\uff0c\u8fd9\u4e9b\u5dde\u53c8\u88ab\u5206\u4e3a\u4e1c\u90e8\u548c\u897f\u90e8\uff1a data = pd . read_excel ( r \"..\\datasets\\example.xlsx\" , index_col = 0 ) print ( data , \" \\n \" ) print ( data . groupby ( \"region\" ) . mean ()) index region Ohio 22.0 East New York -2.0 East Vermont NaN East Florida 1.0 East Oregon -8.0 West Nevada NaN West California 10.0 West Idaho NaN West index region East 7.0 West 1.0 \u6211\u4eec\u53ef\u4ee5\u7528\u5206\u7ec4\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c: fill_mean = lambda g : g . fillna ( g . mean ()) data . groupby ( \"region\" ) . apply ( fill_mean ) index region region East Ohio 22.0 East New York -2.0 East Vermont 7.0 East Florida 1.0 East West Oregon -8.0 West Nevada 1.0 West California 10.0 West Idaho 1.0 West \u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u9884\u5b9a\u4e49\u5404\u7ec4\u7684\u586b\u5145\u503c\u3002\u7531\u4e8e\u5206\u7ec4\u5177\u6709\u4e00\u4e2a name \u5c5e\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u62ff\u6765\u7528\u4e00\u4e0b\uff1a fill_values = { 'East' : 0.5 , 'West' : - 1 } fill_func = lambda g : g . fillna ( fill_values [ g . name ]) data . groupby ( \"region\" ) . apply ( fill_func ) index region Ohio 22.0 East New York -2.0 East Vermont 0.5 East Florida 1.0 East Oregon -8.0 West Nevada -1.0 West California 10.0 West Idaho -1.0 West right \u548c labels \u53c2\u6570 \u8ddf\u201c\u533a\u95f4\u201d\u7684\u6570\u5b66\u7b26\u53f7\u4e00\u6837\uff0c\u5706\u62ec\u53f7\u8868\u793a\u5f00\u7aef\uff0c\u800c\u65b9\u62ec\u53f7\u5219\u8868\u793a\u95ed\u7aef\uff08\u5305\u62ec\uff09\u3002\u54ea\u8fb9\u662f\u95ed\u7aef\u53ef\u4ee5\u901a\u8fc7 right=False \u8fdb\u884c\u4fee\u6539\uff1a pd . cut ( ages , [ 18 , 26 , 36 , 61 , 100 ], right = False ) [[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)] Length: 12 Categories (4, interval[int64]): [[18, 26) < [26, 36) < [36, 61) < [61, 100)] \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u5230 labels \u53c2\u6570\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u9762\u5143\u540d\u79f0\uff1a group_names = [ 'Youth' , 'YoungAdult' , 'MiddleAged' , 'Senior' ] pd . cut ( ages , bins , labels = group_names ) ['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult'] Length: 12 Categories (4, object): ['Youth' < 'YoungAdult' < 'MiddleAged' < 'Senior'] cut \u51fd\u6570 vs qcut \u51fd\u6570 \u5982\u679c\u5411 cut \u4f20\u5165\u7684\u662f\u9762\u5143\u7684\u6570\u91cf\u800c\u4e0d\u662f\u786e\u5207\u7684\u9762\u5143\u8fb9\u754c\uff0c\u5219\u5b83\u4f1a\u6839\u636e\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u7b49\u957f\u9762\u5143\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u4e9b\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u5206\u6210\u56db\u7ec4\uff1a data = np . random . rand ( 20 ) pd . cut ( data , 4 , precision = 2 ) [(0.75, 0.99], (0.75, 0.99], (0.0074, 0.25], (0.0074, 0.25], (0.25, 0.5], ..., (0.5, 0.75], (0.75, 0.99], (0.5, 0.75], (0.75, 0.99], (0.0074, 0.25]] Length: 20 Categories (4, interval[float64]): [(0.0074, 0.25] < (0.25, 0.5] < (0.5, 0.75] < (0.75, 0.99]] \u9009\u9879precision=2\uff0c\u9650\u5b9a\u5c0f\u6570\u53ea\u6709\u4e24\u4f4d\u3002 qcut \u662f\u4e00\u4e2a\u975e\u5e38\u7c7b\u4f3c\u4e8e cut \u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u9762\u5143\u5212\u5206\u3002\u6839\u636e\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\uff0c cut \u53ef\u80fd\u65e0\u6cd5\u4f7f\u5404\u4e2a\u9762\u5143\u4e2d\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u636e\u70b9\u3002\u800c qcut \u7531\u4e8e\u4f7f\u7528\u7684\u662f\u6837\u672c\u5206\u4f4d\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u5927\u5c0f\u57fa\u672c\u76f8\u7b49\u7684\u9762\u5143\uff1a data = np . random . randn ( 1000 ) # Normally distributed cats = pd . qcut ( data , 4 ) # Cut into quartiles pd . value_counts ( cats ) (-2.9499999999999997, -0.691] 250 (-0.691, -0.0192] 250 (-0.0192, 0.62] 250 (0.62, 3.928] 250 dtype: int64 \u4e0ecut\u7c7b\u4f3c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u81ea\u5b9a\u4e49\u7684\u5206\u4f4d\u6570\uff080\u52301\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u5305\u542b\u7aef\u70b9\uff09\uff1a pd . qcut ( data , [ 0 , 0.1 , 0.5 , 0.9 , 1. ]) [(1.289, 3.928], (-1.191, -0.0192], (-1.191, -0.0192], (-0.0192, 1.289], (-0.0192, 1.289], ..., (1.289, 3.928], (-1.191, -0.0192], (-1.191, -0.0192], (-1.191, -0.0192], (-1.191, -0.0192]] Length: 1000 Categories (4, interval[float64]): [(-2.9499999999999997, -1.191] < (-1.191, -0.0192] < (-0.0192, 1.289] < (1.289, 3.928]] \u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c \u8fc7\u6ee4\u6216\u53d8\u6362\u5f02\u5e38\u503c\uff08outlier\uff09\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5c31\u662f\u8fd0\u7528\u6570\u7ec4\u8fd0\u7b97\u3002\u6765\u770b\u4e00\u4e2a\u542b\u6709\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684DataFrame\uff1a data = pd . DataFrame ( np . random . randn ( 1000 , 4 )) data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.022282 -0.001383 -0.055245 0.043350 std 1.008995 0.995882 0.998735 0.996658 min -3.184377 -3.745356 -3.428254 -3.645860 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.525865 2.735527 3.366626 2.653656 \u5047\u8bbe\u4f60\u60f3\u8981\u627e\u51fa\u67d0\u5217\u4e2d\u7edd\u5bf9\u503c\u5927\u5c0f\u8d85\u8fc73\u7684\u503c\uff1a col = data [ 2 ] col [ np . abs ( col ) > 3 ] 267 -3.428254 644 3.366626 Name: 2, dtype: float64 \u8981\u9009\u51fa\u5168\u90e8\u542b\u6709\u201c\u8d85\u8fc73\u6216\uff0d3\u7684\u503c\u201d\u7684\u884c\uff0c\u4f60\u53ef\u4ee5\u5728\u5e03\u5c14\u578bDataFrame\u4e2d\u4f7f\u7528 any \u65b9\u6cd5\uff1a data [( np . abs ( data ) > 3 ) . any ( axis = 1 )] 0 1 2 3 50 -0.025907 -3.399312 -0.974657 -0.685312 69 3.260383 0.963301 1.201206 -1.852001 145 -0.196713 -3.745356 -1.520113 -0.346839 244 -3.056990 1.918403 -0.578828 1.847446 267 0.326045 0.425384 -3.428254 -0.296336 331 -3.184377 1.369891 -1.074833 -0.089937 552 0.208011 -0.150923 -0.362528 -3.548824 644 0.193299 1.397822 3.366626 -2.372214 791 3.525865 0.283070 0.544635 0.462204 811 -0.450721 -0.080332 0.599947 -3.645860 \u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5bf9\u503c\u8fdb\u884c\u8bbe\u7f6e\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5c06\u503c\u9650\u5236\u5728\u533a\u95f4\uff0d3\u52303\u4ee5\u5185\uff1a data [ np . abs ( data ) > 3 ] = np . sign ( data ) * 3 data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.021737 -0.000238 -0.055183 0.044545 std 1.005754 0.992064 0.996186 0.992637 min -3.000000 -3.000000 -3.000000 -3.000000 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.000000 2.735527 3.000000 2.653656 \u6839\u636e\u6570\u636e\u7684\u503c\u662f\u6b63\u8fd8\u662f\u8d1f\uff0c np.sign(data) \u53ef\u4ee5\u751f\u62101\u548c-1\uff1a np . sign ( data ) . head () 0 1 2 3 0 1.0 1.0 1.0 -1.0 1 1.0 1.0 -1.0 -1.0 2 1.0 -1.0 -1.0 -1.0 3 1.0 1.0 -1.0 1.0 4 -1.0 -1.0 -1.0 -1.0 \u6392\u5217\u548c\u968f\u673a\u91c7\u6837 \u5229\u7528 numpy.random.permutation \u51fd\u6570\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u5bf9Series\u6216DataFrame\u7684\u5217\u7684\u6392\u5217\u5de5\u4f5c\uff08permuting\uff0c\u968f\u673a\u91cd\u6392\u5e8f\uff09\u3002\u901a\u8fc7\u9700\u8981\u6392\u5217\u7684\u8f74\u7684\u957f\u5ea6\u8c03\u7528permutation\uff0c\u53ef\u4ea7\u751f\u4e00\u4e2a\u8868\u793a\u65b0\u987a\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff1a df = pd . DataFrame ( np . arange ( 5 * 4 ) . reshape (( 5 , 4 ))) sampler = np . random . permutation ( 5 ) sampler array([4, 3, 2, 1, 0]) \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8e iloc \u7684\u7d22\u5f15\u64cd\u4f5c\u6216take\u51fd\u6570\u4e2d\u4f7f\u7528\u8be5\u6570\u7ec4\u4e86\uff1a df df . take ( sampler ) 0 1 2 3 4 16 17 18 19 3 12 13 14 15 2 8 9 10 11 1 4 5 6 7 0 0 1 2 3 \u5982\u679c\u4e0d\u60f3\u7528\u66ff\u6362\u7684\u65b9\u5f0f\u9009\u53d6\u968f\u673a\u5b50\u96c6\uff0c\u53ef\u4ee5\u5728Series\u548cDataFrame\u4e0a\u4f7f\u7528sample\u65b9\u6cd5\uff1a df . sample ( n = 3 ) 0 1 2 3 0 0 1 2 3 4 16 17 18 19 1 4 5 6 7 \u8981\u901a\u8fc7\u66ff\u6362\u7684\u65b9\u5f0f\u4ea7\u751f\u6837\u672c\uff08\u5141\u8bb8\u91cd\u590d\u9009\u62e9\uff09\uff0c\u53ef\u4ee5\u4f20\u9012 replace=True \u5230 sample \u65b9\u6cd5\uff1a choices = pd . Series ([ 5 , 7 , - 1 , 6 , 4 ]) draws = choices . sample ( n = 10 , replace = True ) draws 0 5 1 7 3 6 4 4 0 5 0 5 1 7 0 5 0 5 4 4 dtype: int64 \u8ba1\u7b97\u6307\u6807/\u54d1\u53d8\u91cf \u53e6\u4e00\u79cd\u5e38\u7528\u4e8e\u7edf\u8ba1\u5efa\u6a21\u6216\u673a\u5668\u5b66\u4e60\u7684\u8f6c\u6362\u65b9\u5f0f\u662f\uff1a\u5c06\u5206\u7c7b\u53d8\u91cf\uff08categorical variable\uff09\u8f6c\u6362\u4e3a\u201c\u54d1\u53d8\u91cf\u201d\u6216\u201c\u6307\u6807\u77e9\u9635\u201d\u3002 \u5982\u679cDataFrame\u7684\u67d0\u4e00\u5217\u4e2d\u542b\u6709k\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u6d3e\u751f\u51fa\u4e00\u4e2ak\u5217\u77e9\u9635\u6216DataFrame\uff08\u5176\u503c\u5168\u4e3a1\u548c0\uff09\u3002pandas\u6709\u4e00\u4e2aget_dummies\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff08\u5176\u5b9e\u81ea\u5df1\u52a8\u624b\u505a\u4e00\u4e2a\u4e5f\u4e0d\u96be\uff09\u3002\u4f7f\u7528\u4e4b\u524d\u7684\u4e00\u4e2aDataFrame\u4f8b\u5b50\uff1a df = pd . DataFrame ({ 'key' : [ 'b' , 'b' , 'a' , 'c' , 'a' , 'b' ], 'data1' : range ( 6 )}) pd . get_dummies ( df [ 'key' ]) a b c 0 0 1 0 1 0 1 0 2 1 0 0 3 0 0 1 4 1 0 0 5 0 1 0 \u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u60f3\u7ed9\u6307\u6807DataFrame\u7684\u5217\u52a0\u4e0a\u4e00\u4e2a\u524d\u7f00\uff0c\u4ee5\u4fbf\u80fd\u591f\u8ddf\u5176\u4ed6\u6570\u636e\u8fdb\u884c\u5408\u5e76\u3002get_dummies\u7684prefix\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff1a dummies = pd . get_dummies ( df [ 'key' ], prefix = 'key' ) df_with_dummy = df [[ 'data1' ]] . join ( dummies ) df_with_dummy data1 key_a key_b key_c 0 0 0 1 0 1 1 0 1 0 2 2 1 0 0 3 3 0 0 1 4 4 1 0 0 5 5 0 1 0 \u5982\u679cDataFrame\u4e2d\u7684\u67d0\u884c\u540c\u5c5e\u4e8e\u591a\u4e2a\u5206\u7c7b\uff0c\u5219\u4e8b\u60c5\u5c31\u4f1a\u6709\u70b9\u590d\u6742\u3002\u770b\u4e00\u4e0bMovieLens 1M\u6570\u636e\u96c6\uff1a mnames = [ 'movie_id' , 'title' , 'genres' ] movies = pd . read_table ( '../datasets/movies.dat' , sep = '::' , header = None , names = mnames , engine = 'python' ) movies [: 10 ] movie_id title genres 0 1 Toy Story (1995) Animation|Children's|Comedy 1 2 Jumanji (1995) Adventure|Children's|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance 3 4 Waiting to Exhale (1995) Comedy|Drama 4 5 Father of the Bride Part II (1995) Comedy 5 6 Heat (1995) Action|Crime|Thriller 6 7 Sabrina (1995) Comedy|Romance 7 8 Tom and Huck (1995) Adventure|Children's 8 9 Sudden Death (1995) Action 9 10 GoldenEye (1995) Action|Adventure|Thriller \u8981\u4e3a\u6bcf\u4e2agenre\u6dfb\u52a0\u6307\u6807\u53d8\u91cf\u5c31\u9700\u8981\u505a\u4e00\u4e9b\u6570\u636e\u89c4\u6574\u64cd\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u4ece\u6570\u636e\u96c6\u4e2d\u62bd\u53d6\u51fa\u4e0d\u540c\u7684genre\u503c\uff1a all_genres = [] for x in movies . genres : all_genres . extend ( x . split ( '|' )) genres = pd . unique ( all_genres ) \u73b0\u5728\u6709\uff1a genres \u6784\u5efa\u6307\u6807DataFrame\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u4ece\u4e00\u4e2a\u5168\u96f6DataFrame\u5f00\u59cb\uff1a zero_matrix = np . zeros (( len ( movies ), len ( genres ))) dummies = pd . DataFrame ( zero_matrix , columns = genres ) \u73b0\u5728\uff0c\u8fed\u4ee3\u6bcf\u4e00\u90e8\u7535\u5f71\uff0c\u5e76\u5c06dummies\u5404\u884c\u7684\u6761\u76ee\u8bbe\u4e3a1\u3002\u8981\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f7f\u7528 dummies.columns \u6765\u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u578b\u7684\u5217\u7d22\u5f15\uff1a gen = movies . genres [ 0 ] gen . split ( '|' ) dummies . columns . get_indexer ( gen . split ( '|' )) array([0, 1, 2], dtype=int64) \u7136\u540e\uff0c\u6839\u636e\u7d22\u5f15\uff0c\u4f7f\u7528 .iloc \u8bbe\u5b9a\u503c\uff1a for i , gen in enumerate ( movies . genres ): indices = dummies . columns . get_indexer ( gen . split ( '|' )) dummies . iloc [ i , indices ] = 1 \u7136\u540e\uff0c\u548c\u4ee5\u524d\u6837\uff0c\u518d\u5c06\u5176\u4e0emovies\u5408\u5e76\u8d77\u6765\uff1a movies_windic = movies . join ( dummies . add_prefix ( 'Genre_' )) movies_windic . iloc [ 0 ] movie_id 1 title Toy Story (1995) genres Animation|Children's|Comedy Genre_Animation 1.0 Genre_Children's 1.0 Genre_Comedy 1.0 Genre_Adventure 0.0 Genre_Fantasy 0.0 Genre_Romance 0.0 Genre_Drama 0.0 Genre_Action 0.0 Genre_Crime 0.0 Genre_Thriller 0.0 Genre_Horror 0.0 Genre_Sci-Fi 0.0 Genre_Documentary 0.0 Genre_War 0.0 Genre_Musical 0.0 Genre_Mystery 0.0 Genre_Film-Noir 0.0 Genre_Western 0.0 Name: 0, dtype: object \u7b14\u8bb0\uff1a\u5bf9\u4e8e\u5f88\u5927\u7684\u6570\u636e\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u6784\u5efa\u591a\u6210\u5458\u6307\u6807\u53d8\u91cf\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u6162\u3002\u6700\u597d\u4f7f\u7528\u66f4\u4f4e\u7ea7\u7684\u51fd\u6570\uff0c\u5c06\u5176\u5199\u5165NumPy\u6570\u7ec4\uff0c\u7136\u540e\u7ed3\u679c\u5305\u88c5\u5728DataFrame\u4e2d\u3002 \u4e00\u4e2a\u5bf9\u7edf\u8ba1\u5e94\u7528\u6709\u7528\u7684\u79d8\u8bc0\u662f\uff1a\u7ed3\u5408 get_dummies \u548c\u8bf8\u5982 cut \u4e4b\u7c7b\u7684\u79bb\u6563\u5316\u51fd\u6570\uff1a np . random . seed ( 12345 ) values = np . random . rand ( 10 ) values bins = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1 ] pd . get_dummies ( pd . cut ( values , bins )) (0.0, 0.2] (0.2, 0.4] (0.4, 0.6] (0.6, 0.8] (0.8, 1.0] 0 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 3 0 1 0 0 0 4 0 0 1 0 0 5 0 0 1 0 0 6 0 0 0 0 1 7 0 0 0 1 0 8 0 0 0 1 0 9 0 0 0 1 0 \u6211\u4eec\u7528 numpy.random.seed \uff0c\u4f7f\u8fd9\u4e2a\u4f8b\u5b50\u5177\u6709\u786e\u5b9a\u6027\u3002\u672c\u4e66\u540e\u9762\u4f1a\u4ecb\u7ecd pandas.get_dummies \u3002 # h = H(pd) # d = h.dicts # d[\"function\"] # [i for i in dir(pd) if \"na\" in i]","title":"9.11.\u6570\u636e\u5904\u7406"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_1","text":"pandas\u7684 DataFrame \u8bd5\u56fe\u6a21\u4effR\u8bed\u8a00\u4e2d\u7684 data.frame \u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5728Python\u4e2d\uff0cpandas\u5efa\u7acb\u5728numpy\u4e4b\u4e0a\uff0c\u800c numpy \u53ea\u6709 nan \u503c\uff08Not a Number\uff09\uff0c\u56e0\u6b64pandas\u7528 nan \u503c\u8868\u793a \u7f3a\u5931\u6570\u636e \uff0cPython\u5185\u7f6e\u7684None\u503c\u5728 DataFrame \u4e2d\u4e5f\u4f5c\u4e3a nan \u503c\u3002\u4f46\u5728R\u8bed\u8a00\u4e2d\uff0c NA \u3001 NaN \u3001 Null \u6709\u4e0d\u540c\u7684\u610f\u4e49\uff1a NA \uff1a\u8868\u793a\u7f3a\u5931\u503c(Missing value)\uff0c\u662f\u201cNot Available\u201d\u7684\u7f29\u5199 NaN \uff1a\u8868\u793a\u975e\u6570\u503c\uff0c\u662f\u201cNot a Number\u201d\u7684\u7f29\u5199 NULL \uff1a\u8868\u793a\u7a7a\u503c\uff0c\u5373\u6ca1\u6709\u5185\u5bb9 \u56e0\u6b64\u5728pandas\u4e2d\uff0c\u5224\u65ad\u7f3a\u5931\u503c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a .isna \u548c isnull \uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u76f8\u540c\u7684\u3002\u867d\u7136\u7f3a\u5931\u6570\u636e\u5728pandas\u4e2d\u5448\u73b0\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u53ef\u4ee5\u4fdd\u8bc1\u529f\u80fd\u6b63\u5e38\u3002 \u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u7f3a\u5931\u6570\u636e\u5904\u7406\u7684\u51fd\u6570\uff1a \u65b9\u6cd5 \u8bf4\u660e isnull \u3001 isna \u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u5e03\u5c14\u503c\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5e03\u5c14\u503c\u8868\u793a\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c/NA\uff0c\u8be5\u5bf9\u8c61\u7684\u7c7b\u578b\u4e0e\u6e90\u7c7b\u578b\u4e00\u6837 fillna \u7528\u6307\u5b9a\u503c\u6216\u63d2\u503c\u65b9\u6cd5\uff08\u5982 ffill \u6216 bfill \uff09\u586b\u5145\u7f3a\u5931\u6570\u636e dropna \u6839\u636e\u5404\u6807\u7b7e\u7684\u503c\u4e2d\u662f\u5426\u5b58\u5728\u7f3a\u5931\u6570\u636e\u5bf9\u8f74\u6807\u7b7e\u8fdb\u884c\u8fc7\u6ee4\uff0c\u53ef\u901a\u8fc7\u9608\u503c\u8c03\u8282\u5bf9\u7f3a\u5931\u503c\u7684\u5bb9\u5fcd\u5ea6 notnull isnull \u7684\u5426\u5b9a\u5f0f","title":"\u5904\u7406\u7f3a\u5931\u503c"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_2","text":"df . isna () a b c d 0 False False False False 1 False True False False 2 True False False False 3 True True True True 4 True False False False 5 False False True False","title":"\u7b5b\u9009\u51fa\u7f3a\u5931\u6570\u636e"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_3","text":"df [ np . array ( df . isna ())] a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 print ( df . isna () . any ( axis = 1 )) df [ df . isna () . any ( axis = 1 )] 0 False 1 True 2 True 3 True 4 True 5 True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\u6570 df . isna () . any ( axis = 1 ) . sum () 5","title":"\u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_4","text":"print ( df . isna () . any ( axis = 0 )) df [ np . array ( df . isna ())] a True b True c True d True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u5217\u6570 df . isna () . any ( axis = 0 ) . sum () 4","title":"\u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u5217"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_5","text":"dropna ( axis = 0 , how = \"any\" , thresh = None , subset = None , inplace = False ) how \uff1a how=any \uff0c\u5220\u9664\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1b how=all \uff0c\u5220\u9664\u6240\u6709\u6570\u636e\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\u3002 thresh \uff1a\u5982\u679c\u67d0\u4e00\u884c\uff08\u5217\uff09\u6709 thresh \u4e2a\u975e NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\u8be5\u884c\uff08\u5217\uff09\u3002 subset \uff1a\u5220\u9664 NA \u6570\u636e\u65f6\uff0c\u8981\u8003\u8651\u7684\u5176\u4ed6\u8f74\u4e0a\u7684\u6807\u7b7e\u3002\u5373\u53ea\u8981\u8be5\u6807\u7b7e\u4e0d\u662f NA \u503c\uff0c\u5219\u65e0\u9700\u5220\u9664\u3002 \u5220\u9664\u6240\u6709\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a df . dropna ( how = \"any\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 \u5220\u9664\u6240\u6709\u503c\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a # \u56e0\u4e3a\u6ca1\u6709\u4e00\u884c\u6216\u5217\u90fd\u662fNA\u503c \u6240\u4ee5\u4e0d\u5220\u9664\u6570\u636e df . dropna ( how = \"all\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u6bcf\u4e00\u884c\u53ea\u8981\u67093\u4e2a\u503c\u4e0d\u662f NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , thresh = 3 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u53ea\u8981\u5217 a \u7684\u503c\u4e0d\u662f NA \u503c\uff0c\u5c31\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , subset = [ \"a\" ]) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 5 20.0 21.0 NaN 23.0","title":"\u5220\u9664\u7f3a\u5931\u6570\u636e"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_6","text":"fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) value \uff1a scalar, dict, Series, or DataFrame \u3002\u7528\u4e8e\u586b\u5145\u7684\u503c\u3002\u5982\u679c\u4f20\u5165 dict \u3001 Series \u3001 DataFrame \uff0c\u5219\u6307\u5b9a\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2aindex\uff08\u5bf9\u4e8e Series \uff09\u6216\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2a\u5217\uff08\u5bf9\u4e8e DataFrame \uff09\u3002\u4e0d\u5728 dict \u3001 Series \u3001 DataFrame \u4e2d\u7684\u503c\u5c06\u4e0d\u88ab\u586b\u5145\u3002 method \uff1a {'backfill', 'bfill', 'pad', 'ffill', None} \u3002\u7528\u4e8e\u586b\u5145\u7684\u65b9\u6cd5\u3002 backfill \u548c bfill \u662f\u540e\u5411\u586b\u5145\uff08\u4ece\u540e\u5411\u524d\uff09\uff0c pad \u548c ffill \u662f\u524d\u5411\u586b\u5145\u3002 limit \uff1a int \u3002\u5f53\u6307\u5b9a\u4e86 method \u53c2\u6570\u65f6\uff0c limit \u662f\u6700\u5927\u8fde\u7eed\u586b\u5145\u7684\u6570\u91cf\u3002\u5f53\u6ca1\u6709\u6307\u5b9a method \u53c2\u6570\u65f6\uff0c limit \u662f\u6bcf\u4e2a\u8f74\u6700\u5927\u586b\u5145\u6570\u91cf\u3002 downcast \uff1a dict of item->dtype \uff0c\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 \u5168\u90e8 NA \u503c\u586b\u5145\u4e3a10\uff0c\u6bcf\u4e2a\u8f74\u6700\u591a\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( value = 10 , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 10.0 6.0 7.0 2 10.0 9.0 10.0 11.0 3 10.0 10.0 10.0 10.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 10.0 23.0 \u540e\u5411\u586b\u5145 NA \u503c\uff0c\u6700\u591a\u8fde\u7eed\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( method = \"bfill\" , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 9.0 6.0 7.0 2 NaN 9.0 10.0 11.0 3 20.0 17.0 18.0 19.0 4 20.0 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u5982\u679c\u60f3\u7528\u5e73\u5747\u503c\u6216\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u5145\uff0c\u4e5f\u662f\u5f88\u65b9\u4fbf\u7684\uff1a print ( df . mean ()) df . fillna ( df . mean ()) a 8.0 b 12.0 c 9.0 d 12.6 dtype: float64 a b c d 0 0.0 1.0 2.0 3.0 1 4.0 12.0 6.0 7.0 2 8.0 9.0 10.0 11.0 3 8.0 12.0 9.0 12.6 4 8.0 17.0 18.0 19.0 5 20.0 21.0 9.0 23.0","title":"\u586b\u5145\u7f3a\u5931\u6570\u636e"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_7","text":"data = pd . DataFrame ({ 'k1' : [ 'one' , 'two' ] * 3 + [ 'two' ], 'k2' : [ 1 , 1 , 2 , 3 , 3 , 4 , 4 ]}) data k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 6 two 4 DataFrame\u7684 duplicated \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578b Series \uff0c\u8868\u793a\u5404\u884c\u662f\u5426\u662f\u91cd\u590d\u884c\uff08\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u884c\uff09\uff1a data . duplicated () 0 False 1 False 2 False 3 False 4 False 5 False 6 True dtype: bool drop_duplicates \u65b9\u6cd5\u79fb\u9664\u91cd\u590d\u6570\u636e\uff1a data . drop_duplicates () k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u9ed8\u8ba4\u4f1a\u5224\u65ad\u5168\u90e8\u5217\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u5217\u8fdb\u884c\u91cd\u590d\u9879\u5224\u65ad\uff1a data . duplicated ([ \"k1\" ]) 0 False 1 False 2 True 3 True 4 True 5 True 6 True dtype: bool duplicated \u548c drop_duplicates \u9ed8\u8ba4\u4fdd\u7559\u7684\u662f\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7ec4\u5408\u3002\u4f20\u5165keep='last'\u5219\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\uff1a data . drop_duplicates ([ 'k1' , 'k2' ], keep = 'last' ) k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 6 two 4","title":"\u79fb\u9664\u91cd\u590d\u6570\u636e"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_8","text":"\u5bf9\u4e8e\u8bb8\u591a\u6570\u636e\u96c6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u6570\u7ec4\u3001Series\u6216DataFrame\u5217\u4e2d\u7684\u503c\u6765\u5b9e\u73b0\u8f6c\u6362\u5de5\u4f5c\u3002 data = pd . DataFrame ({ 'food' : [ 'bacon' , 'pulled pork' , 'bacon' , 'pastrami' , 'corned beef' , 'bacon' , 'pastrami' , 'honey ham' , 'nova lox' ], 'ounces' : [ 4 , 3 , 12 , 6 , 7.5 , 8 , 3 , 5 , 6 ]}) data food ounces 0 bacon 4.0 1 pulled pork 3.0 2 bacon 12.0 3 pastrami 6.0 4 corned beef 7.5 5 bacon 8.0 6 pastrami 3.0 7 honey ham 5.0 8 nova lox 6.0 \u5047\u8bbe\u4f60\u60f3\u8981\u6dfb\u52a0\u4e00\u5217\u8868\u793a\u8be5\u8089\u7c7b\u98df\u7269\u6765\u6e90\u7684\u52a8\u7269\u7c7b\u578b\u3002\u6211\u4eec\u5148\u7f16\u5199\u4e00\u4e2a\u4e0d\u540c\u8089\u7c7b\u5230\u52a8\u7269\u7684\u6620\u5c04\uff1a meat_to_animal = { 'bacon' : 'pig' , 'pulled pork' : 'pig' , 'pastrami' : 'cow' , 'corned beef' : 'cow' , 'honey ham' : 'pig' , 'nova lox' : 'salmon' } data [ 'food' ] . map ( meat_to_animal ) 0 pig 1 pig 2 pig 3 cow 4 cow 5 pig 6 cow 7 pig 8 salmon Name: food, dtype: object","title":"\u5229\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_9","text":"\u5229\u7528 fillna \u65b9\u6cd5\u586b\u5145\u7f3a\u5931\u6570\u636e\u53ef\u4ee5\u770b\u505a\u503c\u66ff\u6362\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u524d\u9762\u5df2\u7ecf\u770b\u5230\uff0c map \u53ef\u7528\u4e8e\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u5b50\u96c6\uff0c\u800c replace \u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u8be5\u529f\u80fd\u7684\u66f4\u7b80\u5355\u3001\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2aSeries\uff1a data = pd . Series ([ 1. , - 999. , 2. , - 999. , - 1000. , 3. ]) data 0 1.0 1 -999.0 2 2.0 3 -999.0 4 -1000.0 5 3.0 dtype: float64 -999\u8fd9\u4e2a\u503c\u53ef\u80fd\u662f\u4e00\u4e2a\u8868\u793a\u7f3a\u5931\u6570\u636e\u7684\u6807\u8bb0\u503c\u3002\u8981\u5c06\u5176\u66ff\u6362\u4e3apandas\u80fd\u591f\u7406\u89e3\u7684NA\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 replace \u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Series\uff08\u9664\u975e\u4f20\u5165 inplace=True \uff09\uff1a data . replace ( - 999 , np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 -1000.0 5 3.0 dtype: float64 \u5982\u679c\u4f60\u5e0c\u671b\u4e00\u6b21\u6027\u66ff\u6362\u591a\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u7531\u5f85\u66ff\u6362\u503c\u7ec4\u6210\u7684\u5217\u8868\u4ee5\u53ca\u4e00\u4e2a\u66ff\u6362\u503c\uff1a data . replace ([ - 999 , - 1000 ], np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 NaN 5 3.0 dtype: float64 \u8981\u8ba9\u6bcf\u4e2a\u503c\u6709\u4e0d\u540c\u7684\u66ff\u6362\u503c\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u66ff\u6362\u5217\u8868\uff1a data . replace ([ - 999 , - 1000 ], [ np . nan , 0 ]) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64 \u4f20\u5165\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u5b57\u5178\uff1a data . replace ({ - 999 : np . nan , - 1000 : 0 }) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64","title":"\u66ff\u6362\u503c"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_10","text":"\u8ddfSeries\u4e2d\u7684\u503c\u4e00\u6837\uff0c\u8f74\u6807\u7b7e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4e0d\u540c\u6807\u7b7e\u7684\u5bf9\u8c61\u3002\u8f74\u8fd8\u53ef\u4ee5\u88ab\u5c31\u5730\u4fee\u6539\uff0c\u800c\u65e0\u9700\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u63a5\u4e0b\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a data = pd . DataFrame ( np . arange ( 12 ) . reshape (( 3 , 4 )), index = [ 'Ohio' , 'Colorado' , 'New York' ], columns = [ 'one' , 'two' , 'three' , 'four' ]) data one two three four Ohio 0 1 2 3 Colorado 4 5 6 7 New York 8 9 10 11 \u8ddfSeries\u4e00\u6837\uff0c\u8f74\u7d22\u5f15\u4e5f\u6709\u4e00\u4e2a map \u65b9\u6cd5\uff1a transform = lambda x : x [: 4 ] . upper () data . index . map ( transform ) Index(['OHIO', 'COLO', 'NEW '], dtype='object') \u4f60\u53ef\u4ee5\u5c06\u5176\u8d4b\u503c\u7ed9index\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5bf9DataFrame\u8fdb\u884c\u5c31\u5730\u4fee\u6539\uff1a data . index = data . index . map ( transform ) data one two three four OHIO 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 \u5982\u679c\u60f3\u8981\u521b\u5efa\u6570\u636e\u96c6\u7684\u8f6c\u6362\u7248\uff08\u800c\u4e0d\u662f\u4fee\u6539\u539f\u59cb\u6570\u636e\uff09\uff0c\u6bd4\u8f83\u5b9e\u7528\u7684\u65b9\u6cd5\u662f rename \uff1a data . rename ( index = str . title , columns = str . upper ) ONE TWO THREE FOUR Ohio 0 1 2 3 Colo 4 5 6 7 New 8 9 10 11 \u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0c rename \u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u578b\u5bf9\u8c61\u5b9e\u73b0\u5bf9\u90e8\u5206\u8f74\u6807\u7b7e\u7684\u66f4\u65b0\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, columns = { 'three' : 'peekaboo' }) one two peekaboo four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 rename \u53ef\u4ee5\u5b9e\u73b0\u590d\u5236DataFrame\u5e76\u5bf9\u5176\u7d22\u5f15\u548c\u5217\u6807\u7b7e\u8fdb\u884c\u8d4b\u503c\u3002\u5982\u679c\u5e0c\u671b\u5c31\u5730\u4fee\u6539\u67d0\u4e2a\u6570\u636e\u96c6\uff0c\u4f20\u5165 inplace=True \u5373\u53ef\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, inplace = True ) data one two three four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11","title":"\u91cd\u547d\u540d\u8f74\u7d22\u5f15"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_11","text":"\u6709\u65f6\u5019\uff0c\u6211\u4eec\u76f8\u5bf9\u8fde\u7eed\u7684\u6570\u636e\u5206\u7ec4\u5206\u6790\uff0c\u800cpandas\u6709\u4e00\u4e9b\u80fd\u6839\u636e\u6307\u5b9a \u201c\u9762\u5143\u201d \uff08bin\uff09\u6216\u6837\u672c\u5206\u4f4d\u6570\u5c06\u6570\u636e\u62c6\u5206\u6210\u591a\u5757\u7684\u5de5\u5177\uff08\u6bd4\u5982 pandas.cut() \u548c qcut \uff09\u3002\u5c06\u8fd9\u4e9b\u51fd\u6570\u8ddf groupby \u7ed3\u5408\u8d77\u6765\uff0c\u5c31\u80fd\u975e\u5e38\u8f7b\u677e\u5730\u5b9e\u73b0\u5bf9\u6570\u636e\u96c6\u7684\u6876\uff08bucket\uff09\u6216\u5206\u4f4d\u6570\uff08quantile\uff09\u5206\u6790\u4e86\u3002 \u5047\u8bbe\u6709\u4e00\u7ec4\u4eba\u5458\u6570\u636e\uff0c\u60f3\u5c06\u5b83\u4eec\u5212\u5206\u4e3a\u201c18\u523025\u201d\u3001\u201c26\u523035\u201d\u3001\u201c35\u523060\u201d\u4ee5\u53ca\u201c60\u4ee5\u4e0a\u201d4\u4e2a\u4e0d\u540c\u7684\u5e74\u9f84\u7ec4\uff1a ages = [ 20 , 22 , 25 , 27 , 21 , 23 , 37 , 31 , 61 , 45 , 41 , 32 ] bins = [ 18 , 25 , 35 , 60 , 100 ] cats = pd . cut ( ages , bins ) cats [(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]] Length: 12 Categories (4, interval[int64]): [(18, 25] < (25, 35] < (35, 60] < (60, 100]] list ( cats ) [Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(25, 35, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right'), Interval(60, 100, closed='right'), Interval(35, 60, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right')] pandas\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Categorical\u5bf9\u8c61\u3002\u7ed3\u679c\u5c55\u793a\u4e86 pandas.cut \u5212\u5206\u7684 \u9762\u5143 \u3002\u4f60\u53ef\u4ee5\u5c06\u8f93\u51fa\u7ed3\u679c\u770b\u505a\u4e00\u7ec4\u8868\u793a \u9762\u5143 \u540d\u79f0\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u7684\u5e95\u5c42\u542b\u6709\u4e00\u4e2a\u8868\u793a\u4e0d\u540c\u5206\u7c7b\u540d\u79f0\u7684\u7c7b\u578b\u6570\u7ec4\uff0c\u4ee5\u53ca\u4e00\u4e2acodes\u5c5e\u6027\u4e2d\u7684\u5e74\u9f84\u6570\u636e\u7684\u6807\u7b7e\uff1a pprint . pprint ( cats . codes ) pprint . pprint ( cats . categories ) pd . value_counts ( cats ) array([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8) IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], closed='right', dtype='interval[int64]') (18, 25] 5 (25, 35] 3 (35, 60] 3 (60, 100] 1 dtype: int64 pd.value_counts(cats) \u662f pandas.cut \u7ed3\u679c\u7684\u9762\u5143\u8ba1\u6570\u3002","title":"\u79bb\u6563\u5316\u548c\u9762\u5143\u5212\u5206"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_12","text":"\u7531 cut \u8fd4\u56de\u7684 Categorical \u5bf9\u8c61\u53ef\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 groupby \u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bf9 ages \u505a\u4e00\u4e9b\u7edf\u8ba1\u8ba1\u7b97\uff1a def get_stats ( group ): return { 'min' : group . min (), 'max' : group . max (), 'count' : group . count (), 'mean' : group . mean ()} grouped = Series ( ages ) . groupby ( cats ) grouped . apply ( get_stats ) . unstack () min max count mean (18, 25] 20.0 25.0 5.0 22.2 (25, 35] 27.0 32.0 3.0 30.0 (35, 60] 37.0 45.0 3.0 41.0 (60, 100] 61.0 61.0 1.0 61.0","title":"\u793a\u4f8b\uff1a\u5206\u7ec4\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_13","text":"\u5bf9\u4e8e\u7f3a\u5931\u6570\u636e\u7684\u586b\u5145\u5de5\u4f5c\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5e0c\u671b\u7528\u4e00\u4e2a\u7531\u6570\u636e\u96c6\u672c\u8eab\u6240\u884d\u751f\u51fa\u6765\u7684\u503c\u53bb\u586b\u5145NA\u503c\u3002\u4f8b\u5982\uff0c\u7528\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c\u3002 \u5047\u8bbe\u4f60\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u5206\u7ec4\u586b\u5145\u4e0d\u540c\u7684\u503c\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u6570\u636e\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528 apply \u548c\u4e00\u4e2a\u80fd\u591f\u5bf9\u5404\u6570\u636e\u5757\u8c03\u7528 fillna \u7684\u51fd\u6570\u5373\u53ef\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6709\u5173\u7f8e\u56fd\u51e0\u4e2a\u5dde\u7684\u793a\u4f8b\u6570\u636e\uff0c\u8fd9\u4e9b\u5dde\u53c8\u88ab\u5206\u4e3a\u4e1c\u90e8\u548c\u897f\u90e8\uff1a data = pd . read_excel ( r \"..\\datasets\\example.xlsx\" , index_col = 0 ) print ( data , \" \\n \" ) print ( data . groupby ( \"region\" ) . mean ()) index region Ohio 22.0 East New York -2.0 East Vermont NaN East Florida 1.0 East Oregon -8.0 West Nevada NaN West California 10.0 West Idaho NaN West index region East 7.0 West 1.0 \u6211\u4eec\u53ef\u4ee5\u7528\u5206\u7ec4\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c: fill_mean = lambda g : g . fillna ( g . mean ()) data . groupby ( \"region\" ) . apply ( fill_mean ) index region region East Ohio 22.0 East New York -2.0 East Vermont 7.0 East Florida 1.0 East West Oregon -8.0 West Nevada 1.0 West California 10.0 West Idaho 1.0 West \u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u9884\u5b9a\u4e49\u5404\u7ec4\u7684\u586b\u5145\u503c\u3002\u7531\u4e8e\u5206\u7ec4\u5177\u6709\u4e00\u4e2a name \u5c5e\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u62ff\u6765\u7528\u4e00\u4e0b\uff1a fill_values = { 'East' : 0.5 , 'West' : - 1 } fill_func = lambda g : g . fillna ( fill_values [ g . name ]) data . groupby ( \"region\" ) . apply ( fill_func ) index region Ohio 22.0 East New York -2.0 East Vermont 0.5 East Florida 1.0 East Oregon -8.0 West Nevada -1.0 West California 10.0 West Idaho -1.0 West","title":"\u793a\u4f8b\uff1a\u5206\u7ec4\u586b\u5145\u7f3a\u5931\u503c"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#rightlabels","text":"\u8ddf\u201c\u533a\u95f4\u201d\u7684\u6570\u5b66\u7b26\u53f7\u4e00\u6837\uff0c\u5706\u62ec\u53f7\u8868\u793a\u5f00\u7aef\uff0c\u800c\u65b9\u62ec\u53f7\u5219\u8868\u793a\u95ed\u7aef\uff08\u5305\u62ec\uff09\u3002\u54ea\u8fb9\u662f\u95ed\u7aef\u53ef\u4ee5\u901a\u8fc7 right=False \u8fdb\u884c\u4fee\u6539\uff1a pd . cut ( ages , [ 18 , 26 , 36 , 61 , 100 ], right = False ) [[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)] Length: 12 Categories (4, interval[int64]): [[18, 26) < [26, 36) < [36, 61) < [61, 100)] \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u5230 labels \u53c2\u6570\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u9762\u5143\u540d\u79f0\uff1a group_names = [ 'Youth' , 'YoungAdult' , 'MiddleAged' , 'Senior' ] pd . cut ( ages , bins , labels = group_names ) ['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult'] Length: 12 Categories (4, object): ['Youth' < 'YoungAdult' < 'MiddleAged' < 'Senior']","title":"right\u548clabels\u53c2\u6570"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#cut-vs-qcut","text":"\u5982\u679c\u5411 cut \u4f20\u5165\u7684\u662f\u9762\u5143\u7684\u6570\u91cf\u800c\u4e0d\u662f\u786e\u5207\u7684\u9762\u5143\u8fb9\u754c\uff0c\u5219\u5b83\u4f1a\u6839\u636e\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u7b49\u957f\u9762\u5143\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u4e9b\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u5206\u6210\u56db\u7ec4\uff1a data = np . random . rand ( 20 ) pd . cut ( data , 4 , precision = 2 ) [(0.75, 0.99], (0.75, 0.99], (0.0074, 0.25], (0.0074, 0.25], (0.25, 0.5], ..., (0.5, 0.75], (0.75, 0.99], (0.5, 0.75], (0.75, 0.99], (0.0074, 0.25]] Length: 20 Categories (4, interval[float64]): [(0.0074, 0.25] < (0.25, 0.5] < (0.5, 0.75] < (0.75, 0.99]] \u9009\u9879precision=2\uff0c\u9650\u5b9a\u5c0f\u6570\u53ea\u6709\u4e24\u4f4d\u3002 qcut \u662f\u4e00\u4e2a\u975e\u5e38\u7c7b\u4f3c\u4e8e cut \u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u9762\u5143\u5212\u5206\u3002\u6839\u636e\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\uff0c cut \u53ef\u80fd\u65e0\u6cd5\u4f7f\u5404\u4e2a\u9762\u5143\u4e2d\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u636e\u70b9\u3002\u800c qcut \u7531\u4e8e\u4f7f\u7528\u7684\u662f\u6837\u672c\u5206\u4f4d\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u5927\u5c0f\u57fa\u672c\u76f8\u7b49\u7684\u9762\u5143\uff1a data = np . random . randn ( 1000 ) # Normally distributed cats = pd . qcut ( data , 4 ) # Cut into quartiles pd . value_counts ( cats ) (-2.9499999999999997, -0.691] 250 (-0.691, -0.0192] 250 (-0.0192, 0.62] 250 (0.62, 3.928] 250 dtype: int64 \u4e0ecut\u7c7b\u4f3c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u81ea\u5b9a\u4e49\u7684\u5206\u4f4d\u6570\uff080\u52301\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u5305\u542b\u7aef\u70b9\uff09\uff1a pd . qcut ( data , [ 0 , 0.1 , 0.5 , 0.9 , 1. ]) [(1.289, 3.928], (-1.191, -0.0192], (-1.191, -0.0192], (-0.0192, 1.289], (-0.0192, 1.289], ..., (1.289, 3.928], (-1.191, -0.0192], (-1.191, -0.0192], (-1.191, -0.0192], (-1.191, -0.0192]] Length: 1000 Categories (4, interval[float64]): [(-2.9499999999999997, -1.191] < (-1.191, -0.0192] < (-0.0192, 1.289] < (1.289, 3.928]]","title":"cut\u51fd\u6570 vs qcut\u51fd\u6570"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_14","text":"\u8fc7\u6ee4\u6216\u53d8\u6362\u5f02\u5e38\u503c\uff08outlier\uff09\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5c31\u662f\u8fd0\u7528\u6570\u7ec4\u8fd0\u7b97\u3002\u6765\u770b\u4e00\u4e2a\u542b\u6709\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684DataFrame\uff1a data = pd . DataFrame ( np . random . randn ( 1000 , 4 )) data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.022282 -0.001383 -0.055245 0.043350 std 1.008995 0.995882 0.998735 0.996658 min -3.184377 -3.745356 -3.428254 -3.645860 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.525865 2.735527 3.366626 2.653656 \u5047\u8bbe\u4f60\u60f3\u8981\u627e\u51fa\u67d0\u5217\u4e2d\u7edd\u5bf9\u503c\u5927\u5c0f\u8d85\u8fc73\u7684\u503c\uff1a col = data [ 2 ] col [ np . abs ( col ) > 3 ] 267 -3.428254 644 3.366626 Name: 2, dtype: float64 \u8981\u9009\u51fa\u5168\u90e8\u542b\u6709\u201c\u8d85\u8fc73\u6216\uff0d3\u7684\u503c\u201d\u7684\u884c\uff0c\u4f60\u53ef\u4ee5\u5728\u5e03\u5c14\u578bDataFrame\u4e2d\u4f7f\u7528 any \u65b9\u6cd5\uff1a data [( np . abs ( data ) > 3 ) . any ( axis = 1 )] 0 1 2 3 50 -0.025907 -3.399312 -0.974657 -0.685312 69 3.260383 0.963301 1.201206 -1.852001 145 -0.196713 -3.745356 -1.520113 -0.346839 244 -3.056990 1.918403 -0.578828 1.847446 267 0.326045 0.425384 -3.428254 -0.296336 331 -3.184377 1.369891 -1.074833 -0.089937 552 0.208011 -0.150923 -0.362528 -3.548824 644 0.193299 1.397822 3.366626 -2.372214 791 3.525865 0.283070 0.544635 0.462204 811 -0.450721 -0.080332 0.599947 -3.645860 \u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5bf9\u503c\u8fdb\u884c\u8bbe\u7f6e\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5c06\u503c\u9650\u5236\u5728\u533a\u95f4\uff0d3\u52303\u4ee5\u5185\uff1a data [ np . abs ( data ) > 3 ] = np . sign ( data ) * 3 data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.021737 -0.000238 -0.055183 0.044545 std 1.005754 0.992064 0.996186 0.992637 min -3.000000 -3.000000 -3.000000 -3.000000 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.000000 2.735527 3.000000 2.653656 \u6839\u636e\u6570\u636e\u7684\u503c\u662f\u6b63\u8fd8\u662f\u8d1f\uff0c np.sign(data) \u53ef\u4ee5\u751f\u62101\u548c-1\uff1a np . sign ( data ) . head () 0 1 2 3 0 1.0 1.0 1.0 -1.0 1 1.0 1.0 -1.0 -1.0 2 1.0 -1.0 -1.0 -1.0 3 1.0 1.0 -1.0 1.0 4 -1.0 -1.0 -1.0 -1.0","title":"\u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_15","text":"\u5229\u7528 numpy.random.permutation \u51fd\u6570\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u5bf9Series\u6216DataFrame\u7684\u5217\u7684\u6392\u5217\u5de5\u4f5c\uff08permuting\uff0c\u968f\u673a\u91cd\u6392\u5e8f\uff09\u3002\u901a\u8fc7\u9700\u8981\u6392\u5217\u7684\u8f74\u7684\u957f\u5ea6\u8c03\u7528permutation\uff0c\u53ef\u4ea7\u751f\u4e00\u4e2a\u8868\u793a\u65b0\u987a\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff1a df = pd . DataFrame ( np . arange ( 5 * 4 ) . reshape (( 5 , 4 ))) sampler = np . random . permutation ( 5 ) sampler array([4, 3, 2, 1, 0]) \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8e iloc \u7684\u7d22\u5f15\u64cd\u4f5c\u6216take\u51fd\u6570\u4e2d\u4f7f\u7528\u8be5\u6570\u7ec4\u4e86\uff1a df df . take ( sampler ) 0 1 2 3 4 16 17 18 19 3 12 13 14 15 2 8 9 10 11 1 4 5 6 7 0 0 1 2 3 \u5982\u679c\u4e0d\u60f3\u7528\u66ff\u6362\u7684\u65b9\u5f0f\u9009\u53d6\u968f\u673a\u5b50\u96c6\uff0c\u53ef\u4ee5\u5728Series\u548cDataFrame\u4e0a\u4f7f\u7528sample\u65b9\u6cd5\uff1a df . sample ( n = 3 ) 0 1 2 3 0 0 1 2 3 4 16 17 18 19 1 4 5 6 7 \u8981\u901a\u8fc7\u66ff\u6362\u7684\u65b9\u5f0f\u4ea7\u751f\u6837\u672c\uff08\u5141\u8bb8\u91cd\u590d\u9009\u62e9\uff09\uff0c\u53ef\u4ee5\u4f20\u9012 replace=True \u5230 sample \u65b9\u6cd5\uff1a choices = pd . Series ([ 5 , 7 , - 1 , 6 , 4 ]) draws = choices . sample ( n = 10 , replace = True ) draws 0 5 1 7 3 6 4 4 0 5 0 5 1 7 0 5 0 5 4 4 dtype: int64","title":"\u6392\u5217\u548c\u968f\u673a\u91c7\u6837"},{"location":"pandas/9.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_16","text":"\u53e6\u4e00\u79cd\u5e38\u7528\u4e8e\u7edf\u8ba1\u5efa\u6a21\u6216\u673a\u5668\u5b66\u4e60\u7684\u8f6c\u6362\u65b9\u5f0f\u662f\uff1a\u5c06\u5206\u7c7b\u53d8\u91cf\uff08categorical variable\uff09\u8f6c\u6362\u4e3a\u201c\u54d1\u53d8\u91cf\u201d\u6216\u201c\u6307\u6807\u77e9\u9635\u201d\u3002 \u5982\u679cDataFrame\u7684\u67d0\u4e00\u5217\u4e2d\u542b\u6709k\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u6d3e\u751f\u51fa\u4e00\u4e2ak\u5217\u77e9\u9635\u6216DataFrame\uff08\u5176\u503c\u5168\u4e3a1\u548c0\uff09\u3002pandas\u6709\u4e00\u4e2aget_dummies\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff08\u5176\u5b9e\u81ea\u5df1\u52a8\u624b\u505a\u4e00\u4e2a\u4e5f\u4e0d\u96be\uff09\u3002\u4f7f\u7528\u4e4b\u524d\u7684\u4e00\u4e2aDataFrame\u4f8b\u5b50\uff1a df = pd . DataFrame ({ 'key' : [ 'b' , 'b' , 'a' , 'c' , 'a' , 'b' ], 'data1' : range ( 6 )}) pd . get_dummies ( df [ 'key' ]) a b c 0 0 1 0 1 0 1 0 2 1 0 0 3 0 0 1 4 1 0 0 5 0 1 0 \u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u60f3\u7ed9\u6307\u6807DataFrame\u7684\u5217\u52a0\u4e0a\u4e00\u4e2a\u524d\u7f00\uff0c\u4ee5\u4fbf\u80fd\u591f\u8ddf\u5176\u4ed6\u6570\u636e\u8fdb\u884c\u5408\u5e76\u3002get_dummies\u7684prefix\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff1a dummies = pd . get_dummies ( df [ 'key' ], prefix = 'key' ) df_with_dummy = df [[ 'data1' ]] . join ( dummies ) df_with_dummy data1 key_a key_b key_c 0 0 0 1 0 1 1 0 1 0 2 2 1 0 0 3 3 0 0 1 4 4 1 0 0 5 5 0 1 0 \u5982\u679cDataFrame\u4e2d\u7684\u67d0\u884c\u540c\u5c5e\u4e8e\u591a\u4e2a\u5206\u7c7b\uff0c\u5219\u4e8b\u60c5\u5c31\u4f1a\u6709\u70b9\u590d\u6742\u3002\u770b\u4e00\u4e0bMovieLens 1M\u6570\u636e\u96c6\uff1a mnames = [ 'movie_id' , 'title' , 'genres' ] movies = pd . read_table ( '../datasets/movies.dat' , sep = '::' , header = None , names = mnames , engine = 'python' ) movies [: 10 ] movie_id title genres 0 1 Toy Story (1995) Animation|Children's|Comedy 1 2 Jumanji (1995) Adventure|Children's|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance 3 4 Waiting to Exhale (1995) Comedy|Drama 4 5 Father of the Bride Part II (1995) Comedy 5 6 Heat (1995) Action|Crime|Thriller 6 7 Sabrina (1995) Comedy|Romance 7 8 Tom and Huck (1995) Adventure|Children's 8 9 Sudden Death (1995) Action 9 10 GoldenEye (1995) Action|Adventure|Thriller \u8981\u4e3a\u6bcf\u4e2agenre\u6dfb\u52a0\u6307\u6807\u53d8\u91cf\u5c31\u9700\u8981\u505a\u4e00\u4e9b\u6570\u636e\u89c4\u6574\u64cd\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u4ece\u6570\u636e\u96c6\u4e2d\u62bd\u53d6\u51fa\u4e0d\u540c\u7684genre\u503c\uff1a all_genres = [] for x in movies . genres : all_genres . extend ( x . split ( '|' )) genres = pd . unique ( all_genres ) \u73b0\u5728\u6709\uff1a genres \u6784\u5efa\u6307\u6807DataFrame\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u4ece\u4e00\u4e2a\u5168\u96f6DataFrame\u5f00\u59cb\uff1a zero_matrix = np . zeros (( len ( movies ), len ( genres ))) dummies = pd . DataFrame ( zero_matrix , columns = genres ) \u73b0\u5728\uff0c\u8fed\u4ee3\u6bcf\u4e00\u90e8\u7535\u5f71\uff0c\u5e76\u5c06dummies\u5404\u884c\u7684\u6761\u76ee\u8bbe\u4e3a1\u3002\u8981\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f7f\u7528 dummies.columns \u6765\u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u578b\u7684\u5217\u7d22\u5f15\uff1a gen = movies . genres [ 0 ] gen . split ( '|' ) dummies . columns . get_indexer ( gen . split ( '|' )) array([0, 1, 2], dtype=int64) \u7136\u540e\uff0c\u6839\u636e\u7d22\u5f15\uff0c\u4f7f\u7528 .iloc \u8bbe\u5b9a\u503c\uff1a for i , gen in enumerate ( movies . genres ): indices = dummies . columns . get_indexer ( gen . split ( '|' )) dummies . iloc [ i , indices ] = 1 \u7136\u540e\uff0c\u548c\u4ee5\u524d\u6837\uff0c\u518d\u5c06\u5176\u4e0emovies\u5408\u5e76\u8d77\u6765\uff1a movies_windic = movies . join ( dummies . add_prefix ( 'Genre_' )) movies_windic . iloc [ 0 ] movie_id 1 title Toy Story (1995) genres Animation|Children's|Comedy Genre_Animation 1.0 Genre_Children's 1.0 Genre_Comedy 1.0 Genre_Adventure 0.0 Genre_Fantasy 0.0 Genre_Romance 0.0 Genre_Drama 0.0 Genre_Action 0.0 Genre_Crime 0.0 Genre_Thriller 0.0 Genre_Horror 0.0 Genre_Sci-Fi 0.0 Genre_Documentary 0.0 Genre_War 0.0 Genre_Musical 0.0 Genre_Mystery 0.0 Genre_Film-Noir 0.0 Genre_Western 0.0 Name: 0, dtype: object \u7b14\u8bb0\uff1a\u5bf9\u4e8e\u5f88\u5927\u7684\u6570\u636e\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u6784\u5efa\u591a\u6210\u5458\u6307\u6807\u53d8\u91cf\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u6162\u3002\u6700\u597d\u4f7f\u7528\u66f4\u4f4e\u7ea7\u7684\u51fd\u6570\uff0c\u5c06\u5176\u5199\u5165NumPy\u6570\u7ec4\uff0c\u7136\u540e\u7ed3\u679c\u5305\u88c5\u5728DataFrame\u4e2d\u3002 \u4e00\u4e2a\u5bf9\u7edf\u8ba1\u5e94\u7528\u6709\u7528\u7684\u79d8\u8bc0\u662f\uff1a\u7ed3\u5408 get_dummies \u548c\u8bf8\u5982 cut \u4e4b\u7c7b\u7684\u79bb\u6563\u5316\u51fd\u6570\uff1a np . random . seed ( 12345 ) values = np . random . rand ( 10 ) values bins = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1 ] pd . get_dummies ( pd . cut ( values , bins )) (0.0, 0.2] (0.2, 0.4] (0.4, 0.6] (0.6, 0.8] (0.8, 1.0] 0 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 3 0 1 0 0 0 4 0 0 1 0 0 5 0 0 1 0 0 6 0 0 0 0 1 7 0 0 0 1 0 8 0 0 0 1 0 9 0 0 0 1 0 \u6211\u4eec\u7528 numpy.random.seed \uff0c\u4f7f\u8fd9\u4e2a\u4f8b\u5b50\u5177\u6709\u786e\u5b9a\u6027\u3002\u672c\u4e66\u540e\u9762\u4f1a\u4ecb\u7ecd pandas.get_dummies \u3002 # h = H(pd) # d = h.dicts # d[\"function\"] # [i for i in dir(pd) if \"na\" in i]","title":"\u8ba1\u7b97\u6307\u6807/\u54d1\u53d8\u91cf"},{"location":"pandas/9.2.DataFra.html","text":"from toolkit import H from pandas import DataFrame from pandas import Series import numpy as np Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.27 pandas version: 1.2.2 numpy version: 1.20.1 DataFrame\u7c7b DataFrame\u662f\u4e00\u4e2a\u8868\u683c\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u542b\u6709\u4e00\u7ec4\u6709\u5e8f\u7684\u5217\uff0c\u6bcf\u5217\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u503c\u7c7b\u578b 1 \uff08\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u7b49\uff09\u3002DataFrame\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u505a\u662fSeries\u7684\u5bb9\u5668\u3002 pandas\u4e2d\u7684 DataFrame \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u51fd\u6570\u521b\u5efa\uff1a DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) data \uff1a\u6570\u636e\u53ef\u4ee5\u662f\u5404\u79cd\u5f62\u5f0f\uff0c\u5982: ndarray \uff0c series \uff0c map \uff0c lists \uff0c dict \uff0c constant \u548c\u53e6\u4e00\u4e2a DataFrame \u3002 index \uff1a\u884c\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 columns \uff1a\u5217\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 dtype \uff1a\u6570\u636e\u7c7b\u578b\u3002 copy \uff1a\u662f\u5426\u590d\u5236\u6570\u636e\u3002 \u53ef\u4ee5\u8f93\u5165\u7ed9DataFrame\u6784\u9020\u5668\u7684\u6570\u636e\uff1a \u7c7b\u578b \u8bf4\u660e \u4e8c\u7ef4ndarray \u7531list\u6216tuple\u7ec4\u6210\u7684list \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d \u7531\u6570\u7ec4\u3001\u5217\u8868\u6216\u5143\u7ec4\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2a\u5e8f\u5217\u4f5c\u4e3aDataFrame\u7684\u4e00\u5217\u3002 \u6240\u6709\u5e8f\u5217\u7684\u957f\u5ea6\u5fc5\u987b\u76f8\u540c \u3002 \u7531Series\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2aSeries\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u6307\u5b9aindex\uff0c\u5219 \u5404Series\u7684index\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\u3002 \u6bcf\u4e2aSeries\u7684\u957f\u5ea6\u4e0d\u8981\u6c42\u5fc5\u987b\u76f8\u540c \uff0cDataFrame\u4f1a\u4ee5NaN\u586b\u5145\u3002 NumPy\u7684\u7ed3\u6784\u5316/\u8bb0\u5f55\u6570\u7ec4 \u7c7b\u4f3c\u4e8e\u201c\u7531\u6570\u7ec4\u7ec4\u6210\u7684\u5b57\u5178\u201d \u7531\u5b57\u5178\u7ec4\u6210\u7684\u5b57\u5178 \u5404\u5185\u5c42\u5b57\u5178\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u952e\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\uff0c\u8ddf\u7531\u201cSeries\u7ec4\u6210\u7684\u5b57\u5178\u201d\u7684\u60c5\u51b5\u4e00\u6837 \u5b57\u5178\u6216Series\u7684\u5217\u8868 \u5404\u9879\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u4e00\u884c\u3002\u5b57\u5178\u952e\u6216Series\u7d22\u5f15\u7684\u5e76\u96c6\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u5217\u6807 \u53e6\u2014\u4e2aDataFrame \u8be5DataFrame\u7684\u7d22\u5f15\u5c06\u4f1a\u88ab\u6cbf\u7528\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u4e86\u5176\u4ed6\u7d22\u5f15 NumPy \u7684 Masked Array \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d\u7684\u60c5\u51b5\uff0c\u53ea\u662f\u63a9\u7801\u503c\u5728\u7ed3\u679c DataFrame\u4f1a\u53d8\u6210NA/\u7f3a\u5931\u503c \u603b\u7684\u6765\u8bf4\uff0c\u652f\u6301\u8f93\u5165\u7684\u6570\u636e\u7c7b\u578b\u662f\uff1a dict \u3001 list \u3001 ndarray \u3001 DataFrame \u3002 \u4ece\u5217\u8868\u521b\u5efa \u53ef\u4ee5\u4f7f\u7528 \u5355\u4e2a\u5217\u8868 \u6216 \u5217\u8868\u5185\u5d4c\u5217\u8868 \u6765\u521b\u5efaDataFrame\u3002 \u5355\u4e2a\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [ 1 , 2 , 3 , 4 , 5 ] DataFrame ( data ) 0 0 1 1 2 2 3 3 4 4 5 \u5217\u8868\u5185\u5d4c\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [[ 'Alex' , 10 ], [ 'Bob' , 12 ], [ 'Clarke' , 13 ]] DataFrame ( data , columns = [ 'Name' , 'Age' ]) Name Age 0 Alex 10 1 Bob 12 2 Clarke 13 \u4ece\u5305\u542barray/List/Series\u7684\u5b57\u5178\u521b\u5efa \u4f20\u5165\u4e00\u4e2a\u7531\u7b49\u957flist\u3001ndarray\u7ec4\u6210\u7684\u5b57\u5178\uff1a \u7ed3\u679cDataFrame\u4f1a\u81ea\u52a8\u52a0\u4e0a\u7d22\u5f15\uff08\u8ddfSeries\u4e00\u6837\uff09\uff0c\u4e14\u5168\u90e8\u5217 \u4f1a\u88ab\u6709\u5e8f\u6392\u5217\u3002 data = { 'state' : [ 'Ohio' , 'Ohio' , 'Ohio' , 'Nevada' , 'Nevada' ], 'year' : [ 2000 , 2001 , 2002 , 2001 , 2002 ], 'pop' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 ]} DataFrame ( data ) state year pop 0 Ohio 2000 1.5 1 Ohio 2001 1.7 2 Ohio 2002 3.6 3 Nevada 2001 2.4 4 Nevada 2002 2.9 \u5982\u679c\u6307\u5b9a\u4e86\u5217\u5e8f\u5217\uff0c\u5219DataFrame\u7684\u5217\u5c31\u4f1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u8fdb\u884c\u6392\u5217\uff1a DataFrame ( data , columns = [ 'year' , 'state' , 'pop' ]) year state pop 0 2000 Ohio 1.5 1 2001 Ohio 1.7 2 2002 Ohio 3.6 3 2001 Nevada 2.4 4 2002 Nevada 2.9 \u4f20\u5165\u4e00\u4e2a\u7531\u7b49\u957fSeries\u6216 \u4e0d\u7b49\u957fSeries \u7ec4\u6210\u7684\u5b57\u5178\uff1a data = { 'state' : Series ([ 'Ohio' , 'Ohio' , 'Nevada' ], index = [ 'a' , 'b' , 'c' ]), 'year' : Series ([ 2000 , 2002 , 2001 , 2002 ], index = [ 'a' , 'b' , 'c' , 'd' ]), 'pop' : Series ([ 1.7 , 3.6 , 2.4 ], index = [ 'b' , 'c' , 'd' ])} DataFrame ( data ) state year pop a Ohio 2000 NaN b Ohio 2002 1.7 c Nevada 2001 3.6 d NaN 2002 2.4 \u4ece\u5b57\u5178\u5217\u8868\u521b\u5efa data = [{ 'a' : 1 , 'b' : 2 }, { 'a' : 5 , 'b' : 10 , 'c' : 20 }] DataFrame ( data , index = [ 'first' , 'second' ]) a b c first 1 2 NaN second 5 10 20.0 \u66ff\u4ee3\u6784\u9020\u51fd\u6570 DataFrame.from_dict DataFrame.from_dict(data, orient='columns', dtype=None, columns=None) DataFrame.from_dict \u63a5\u53d7dict\u6216\u7c7b\u4f3c\u6570\u7ec4\u7684\u5e8f\u5217\u7684dict\u5e76\u8fd4\u56deDataFrame\u3002 DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])])) DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])]), orient = 'index' , columns = [ 'one' , 'two' , 'three' ]) one two three A 1 2 3 B 4 5 6 DataFrame.from_records DataFrame.from_records(data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None) DataFrame.from_records \u63a5\u53d7\u5177\u6709\u7ed3\u6784\u5316dtype\u7684\u5143\u7ec4\u6216ndarray\u7684\u5217\u8868\u3002\u5b83\u4e0e\u666e\u901a\u7684 DataFrame \u6784\u9020\u51fd\u6570\u76f8\u4f3c\uff0c\u9664\u4e86\u6240\u5f97\u7684DataFrame\u7d22\u5f15\u53ef\u80fd\u662f\u7ed3\u6784\u5316dtype\u7684\u7279\u5b9a\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a data = np . array ([( 1 , 2. , b 'Hello' ), ( 2 , 3. , b 'World' )], dtype = [( 'A' , '<i4' ), ( 'B' , '<f4' ), ( 'C' , 'S10' )]) DataFrame . from_records ( data , index = 'C' ) A B C b'Hello' 1 2.0 b'World' 2 3.0 DataFrame.from_items \u4ece\u5143\u7ec4\u5e8f\u5217\u4e2d\u521b\u5efa DataFrame \u3002 DataFrame . from_items ( items , columns = None , orient = 'columns' ) items \uff1a \u4e3a\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u683c\u5f0f\u4e3a\uff1a (key, value) \u3002 columns \uff1a\u5217\u6807\u7b7e\u3002\u5f53 orient='index' \u65f6\u5fc5\u987b\u4f20\u5165 columns \u3002\u5f53 orient='columns' \u65f6\uff0c key \u5c31\u662f\u5217\u7684label\uff0c\u6b64\u65f6 columns \u53c2\u6570\u6307\u5b9a\u7684\u5217label\u5fc5\u987b\u7b49\u4e8e\u67d0\u4e2a key \uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002 orient \uff1a\u6570\u636e\u7684\u65b9\u5411\uff0c {'index', 'columns'} \u3002 DataFrame.from_items \u7c7b\u65b9\u6cd5\u4ecepandas 0.23\u7248\u672c\u8d77\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u4f1a\u88ab\u79fb\u9664\u3002 print ( \"pandas version:\" , pd . __version__ ) print ( \"Has 'from_items' attr?\" , hasattr ( DataFrame , \"from_items\" )) pandas version: 1.2.2 Has 'from_items' attr? False \u5b9e\u9645\u4e0a\uff0cDataFrame\u6bcf\u4e00\u4e2a\u503c\u90fd\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u21a9","title":"9.2.DataFra"},{"location":"pandas/9.2.DataFra.html#dataframe","text":"DataFrame\u662f\u4e00\u4e2a\u8868\u683c\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u542b\u6709\u4e00\u7ec4\u6709\u5e8f\u7684\u5217\uff0c\u6bcf\u5217\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u503c\u7c7b\u578b 1 \uff08\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u7b49\uff09\u3002DataFrame\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u505a\u662fSeries\u7684\u5bb9\u5668\u3002 pandas\u4e2d\u7684 DataFrame \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u51fd\u6570\u521b\u5efa\uff1a DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) data \uff1a\u6570\u636e\u53ef\u4ee5\u662f\u5404\u79cd\u5f62\u5f0f\uff0c\u5982: ndarray \uff0c series \uff0c map \uff0c lists \uff0c dict \uff0c constant \u548c\u53e6\u4e00\u4e2a DataFrame \u3002 index \uff1a\u884c\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 columns \uff1a\u5217\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 dtype \uff1a\u6570\u636e\u7c7b\u578b\u3002 copy \uff1a\u662f\u5426\u590d\u5236\u6570\u636e\u3002 \u53ef\u4ee5\u8f93\u5165\u7ed9DataFrame\u6784\u9020\u5668\u7684\u6570\u636e\uff1a \u7c7b\u578b \u8bf4\u660e \u4e8c\u7ef4ndarray \u7531list\u6216tuple\u7ec4\u6210\u7684list \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d \u7531\u6570\u7ec4\u3001\u5217\u8868\u6216\u5143\u7ec4\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2a\u5e8f\u5217\u4f5c\u4e3aDataFrame\u7684\u4e00\u5217\u3002 \u6240\u6709\u5e8f\u5217\u7684\u957f\u5ea6\u5fc5\u987b\u76f8\u540c \u3002 \u7531Series\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2aSeries\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u6307\u5b9aindex\uff0c\u5219 \u5404Series\u7684index\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\u3002 \u6bcf\u4e2aSeries\u7684\u957f\u5ea6\u4e0d\u8981\u6c42\u5fc5\u987b\u76f8\u540c \uff0cDataFrame\u4f1a\u4ee5NaN\u586b\u5145\u3002 NumPy\u7684\u7ed3\u6784\u5316/\u8bb0\u5f55\u6570\u7ec4 \u7c7b\u4f3c\u4e8e\u201c\u7531\u6570\u7ec4\u7ec4\u6210\u7684\u5b57\u5178\u201d \u7531\u5b57\u5178\u7ec4\u6210\u7684\u5b57\u5178 \u5404\u5185\u5c42\u5b57\u5178\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u952e\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\uff0c\u8ddf\u7531\u201cSeries\u7ec4\u6210\u7684\u5b57\u5178\u201d\u7684\u60c5\u51b5\u4e00\u6837 \u5b57\u5178\u6216Series\u7684\u5217\u8868 \u5404\u9879\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u4e00\u884c\u3002\u5b57\u5178\u952e\u6216Series\u7d22\u5f15\u7684\u5e76\u96c6\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u5217\u6807 \u53e6\u2014\u4e2aDataFrame \u8be5DataFrame\u7684\u7d22\u5f15\u5c06\u4f1a\u88ab\u6cbf\u7528\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u4e86\u5176\u4ed6\u7d22\u5f15 NumPy \u7684 Masked Array \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d\u7684\u60c5\u51b5\uff0c\u53ea\u662f\u63a9\u7801\u503c\u5728\u7ed3\u679c DataFrame\u4f1a\u53d8\u6210NA/\u7f3a\u5931\u503c \u603b\u7684\u6765\u8bf4\uff0c\u652f\u6301\u8f93\u5165\u7684\u6570\u636e\u7c7b\u578b\u662f\uff1a dict \u3001 list \u3001 ndarray \u3001 DataFrame \u3002","title":"DataFrame\u7c7b"},{"location":"pandas/9.2.DataFra.html#_1","text":"\u53ef\u4ee5\u4f7f\u7528 \u5355\u4e2a\u5217\u8868 \u6216 \u5217\u8868\u5185\u5d4c\u5217\u8868 \u6765\u521b\u5efaDataFrame\u3002 \u5355\u4e2a\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [ 1 , 2 , 3 , 4 , 5 ] DataFrame ( data ) 0 0 1 1 2 2 3 3 4 4 5 \u5217\u8868\u5185\u5d4c\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [[ 'Alex' , 10 ], [ 'Bob' , 12 ], [ 'Clarke' , 13 ]] DataFrame ( data , columns = [ 'Name' , 'Age' ]) Name Age 0 Alex 10 1 Bob 12 2 Clarke 13","title":"\u4ece\u5217\u8868\u521b\u5efa"},{"location":"pandas/9.2.DataFra.html#arraylistseries","text":"\u4f20\u5165\u4e00\u4e2a\u7531\u7b49\u957flist\u3001ndarray\u7ec4\u6210\u7684\u5b57\u5178\uff1a \u7ed3\u679cDataFrame\u4f1a\u81ea\u52a8\u52a0\u4e0a\u7d22\u5f15\uff08\u8ddfSeries\u4e00\u6837\uff09\uff0c\u4e14\u5168\u90e8\u5217 \u4f1a\u88ab\u6709\u5e8f\u6392\u5217\u3002 data = { 'state' : [ 'Ohio' , 'Ohio' , 'Ohio' , 'Nevada' , 'Nevada' ], 'year' : [ 2000 , 2001 , 2002 , 2001 , 2002 ], 'pop' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 ]} DataFrame ( data ) state year pop 0 Ohio 2000 1.5 1 Ohio 2001 1.7 2 Ohio 2002 3.6 3 Nevada 2001 2.4 4 Nevada 2002 2.9 \u5982\u679c\u6307\u5b9a\u4e86\u5217\u5e8f\u5217\uff0c\u5219DataFrame\u7684\u5217\u5c31\u4f1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u8fdb\u884c\u6392\u5217\uff1a DataFrame ( data , columns = [ 'year' , 'state' , 'pop' ]) year state pop 0 2000 Ohio 1.5 1 2001 Ohio 1.7 2 2002 Ohio 3.6 3 2001 Nevada 2.4 4 2002 Nevada 2.9 \u4f20\u5165\u4e00\u4e2a\u7531\u7b49\u957fSeries\u6216 \u4e0d\u7b49\u957fSeries \u7ec4\u6210\u7684\u5b57\u5178\uff1a data = { 'state' : Series ([ 'Ohio' , 'Ohio' , 'Nevada' ], index = [ 'a' , 'b' , 'c' ]), 'year' : Series ([ 2000 , 2002 , 2001 , 2002 ], index = [ 'a' , 'b' , 'c' , 'd' ]), 'pop' : Series ([ 1.7 , 3.6 , 2.4 ], index = [ 'b' , 'c' , 'd' ])} DataFrame ( data ) state year pop a Ohio 2000 NaN b Ohio 2002 1.7 c Nevada 2001 3.6 d NaN 2002 2.4","title":"\u4ece\u5305\u542barray/List/Series\u7684\u5b57\u5178\u521b\u5efa"},{"location":"pandas/9.2.DataFra.html#_2","text":"data = [{ 'a' : 1 , 'b' : 2 }, { 'a' : 5 , 'b' : 10 , 'c' : 20 }] DataFrame ( data , index = [ 'first' , 'second' ]) a b c first 1 2 NaN second 5 10 20.0","title":"\u4ece\u5b57\u5178\u5217\u8868\u521b\u5efa"},{"location":"pandas/9.2.DataFra.html#_3","text":"","title":"\u66ff\u4ee3\u6784\u9020\u51fd\u6570"},{"location":"pandas/9.2.DataFra.html#dataframefrom_dict","text":"DataFrame.from_dict(data, orient='columns', dtype=None, columns=None) DataFrame.from_dict \u63a5\u53d7dict\u6216\u7c7b\u4f3c\u6570\u7ec4\u7684\u5e8f\u5217\u7684dict\u5e76\u8fd4\u56deDataFrame\u3002 DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])])) DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])]), orient = 'index' , columns = [ 'one' , 'two' , 'three' ]) one two three A 1 2 3 B 4 5 6","title":"DataFrame.from_dict"},{"location":"pandas/9.2.DataFra.html#dataframefrom_records","text":"DataFrame.from_records(data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None) DataFrame.from_records \u63a5\u53d7\u5177\u6709\u7ed3\u6784\u5316dtype\u7684\u5143\u7ec4\u6216ndarray\u7684\u5217\u8868\u3002\u5b83\u4e0e\u666e\u901a\u7684 DataFrame \u6784\u9020\u51fd\u6570\u76f8\u4f3c\uff0c\u9664\u4e86\u6240\u5f97\u7684DataFrame\u7d22\u5f15\u53ef\u80fd\u662f\u7ed3\u6784\u5316dtype\u7684\u7279\u5b9a\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a data = np . array ([( 1 , 2. , b 'Hello' ), ( 2 , 3. , b 'World' )], dtype = [( 'A' , '<i4' ), ( 'B' , '<f4' ), ( 'C' , 'S10' )]) DataFrame . from_records ( data , index = 'C' ) A B C b'Hello' 1 2.0 b'World' 2 3.0","title":"DataFrame.from_records"},{"location":"pandas/9.2.DataFra.html#dataframefrom_items","text":"\u4ece\u5143\u7ec4\u5e8f\u5217\u4e2d\u521b\u5efa DataFrame \u3002 DataFrame . from_items ( items , columns = None , orient = 'columns' ) items \uff1a \u4e3a\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u683c\u5f0f\u4e3a\uff1a (key, value) \u3002 columns \uff1a\u5217\u6807\u7b7e\u3002\u5f53 orient='index' \u65f6\u5fc5\u987b\u4f20\u5165 columns \u3002\u5f53 orient='columns' \u65f6\uff0c key \u5c31\u662f\u5217\u7684label\uff0c\u6b64\u65f6 columns \u53c2\u6570\u6307\u5b9a\u7684\u5217label\u5fc5\u987b\u7b49\u4e8e\u67d0\u4e2a key \uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002 orient \uff1a\u6570\u636e\u7684\u65b9\u5411\uff0c {'index', 'columns'} \u3002 DataFrame.from_items \u7c7b\u65b9\u6cd5\u4ecepandas 0.23\u7248\u672c\u8d77\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u4f1a\u88ab\u79fb\u9664\u3002 print ( \"pandas version:\" , pd . __version__ ) print ( \"Has 'from_items' attr?\" , hasattr ( DataFrame , \"from_items\" )) pandas version: 1.2.2 Has 'from_items' attr? False \u5b9e\u9645\u4e0a\uff0cDataFrame\u6bcf\u4e00\u4e2a\u503c\u90fd\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u21a9","title":"DataFrame.from_items"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html","text":"from toolkit import H import numpy as np import pandas as pd Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 Series\u548cDataFrame\u7684\u7d22\u5f15\u65b9\u5f0f\u5f88\u76f8\u4f3c\uff1a \u90fd\u53ef\u4ee5\u901a\u8fc7 .loc[] \u4f7f\u7528 \u6807\u7b7e \u9009\u62e9\u884c \u90fd\u53ef\u4ee5\u901a\u8fc7 .iloc[] \u4f7f\u7528 \u6574\u6570 \u9009\u62e9\u884c \u90fd\u53ef\u4ee5\u901a\u8fc7 [] \u4f7f\u7528 \u5207\u7247 \u9009\u62e9\u884c \u4f46\u4ed6\u4eec\u7684\u7d22\u5f15\u65b9\u5f0f\u4e5f\u6709\u4e00\u4e9b\u4e0d\u540c\u70b9\uff1a Series\u53ef\u4ee5\u901a\u8fc7 \u5c5e\u6027\u8bbf\u95ee \u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 \u6807\u7b7e \u9009\u62e9\u884c .row_index \uff1bDataFrame\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u7684\u65b9\u5f0f\u9009\u62e9\u5217 .column_index Series\u53ef\u4ee5\u901a\u8fc7 [] \u4f7f\u7528 \u6574\u6570 \u3001 \u6807\u7b7e \u9009\u62e9\u884c [row_index] \uff1bDataFrame\u53ea\u80fd\u901a\u8fc7 [column_index] \u4f7f\u7528 \u5217\u6807\u7b7e \u9009\u62e9\u5217 Attention \u4ec5\u5f53 index \u6216 columns \u662fPython\u4e2d\u6709\u6548\u7684\u6807\u8bc6\u7b26\u65f6\uff0cSeries\u6216DataFrame\u624d\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u884c\u6216\u5217\u3002\u4f8b\u5982\uff0c ser.1 \u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u53e6\u5916\uff0c index \u6216 columns \u4e0e\u73b0\u6709\u65b9\u6cd5\u540d\u51b2\u7a81\u65f6\uff0c\u8be5 index \u6216 columns \u5219\u65e0\u6cd5\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u3002 \u521b\u5efa\u793a\u4f8bSeries\u548cDataFrame\uff1a ser = pd . Series ([ 4.5 , 7.2 , - 5.3 , 3.6 , 6.1 ], index = [ 'd' , 'b' , 'a' , 'c' , 'b' ]) print ( ser ) d 4.5 b 7.2 a -5.3 c 3.6 b 6.1 dtype: float64 d = { 'one' : pd . Series ([ 1 , 2 , 3 , 5 ], index = [ 'a' , 'b' , 'c' , 'e' ]), 'two' : pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ])} df = pd . DataFrame ( d ) print ( df ) one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u884c # Series print ( ser . b ) print ( ser [ \"b\" ]) print ( ser . loc [ \"b\" ]) b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 # DataFrame df . loc [ \"a\" ] one 1.0 two 1.0 Name: a, dtype: float64 \u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u591a\u884c # Series ser [[ \"b\" , \"a\" ]] ser . loc [[ \"b\" , \"a\" ]] b 7.2 b 6.1 a -5.3 dtype: float64 # DataFrame df . loc [[ \"a\" , \"b\" ]] one two a 1.0 1 b 2.0 2 \u4e0d\u80fd\u4f7f\u7528 () try : ser . loc [( \"b\" , \"a\" )] except Exception as e : print ( e ) Too many indexers \u901a\u8fc7\u6574\u6570\u9009\u62e9\u884c # Series ser [ 1 ] ser . iloc [ 1 ] 7.2 # DataFrame df . iloc [ 0 ] one 1.0 two 1.0 Name: a, dtype: float64 \u901a\u8fc7\u6574\u6570\u9009\u62e9\u591a\u884c # Series ser [[ 1 , 0 ]] ser . iloc [[ 1 , 0 ]] b 7.2 d 4.5 dtype: float64 # DataFrame df . iloc [[ 0 , 1 ]] one two a 1.0 1 b 2.0 2 \u901a\u8fc7\u5207\u7247\u9009\u62e9\u591a\u884c \u5207\u7247\u5305\u62ec \u6574\u6570\u5207\u7247 \u548c \u6807\u7b7e\u5207\u7247 \u3002 # Series ser [ 1 : 3 ] ser . iloc [ 1 : 3 ] b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ 0 : 3 : 2 ]) print ( df [ 0 : 2 ]) one two a 1.0 1 c 3.0 3 one two a 1.0 1 b 2.0 2 \u5207\u7247\u6709\u6574\u6570\u503c\u7684\u666e\u901a\u5207\u7247\u548c\u6807\u7b7e\u5207\u7247\u3002 \u5229\u7528\u6807\u7b7e\u7684\u5207\u7247\u8fd0\u7b97\u4e0e\u666e\u901a\u7684Python\u5207\u7247\u8fd0\u7b97\u4e0d\u540c\uff0c\u5176\u672b\u7aef\u662f\u5305\u542b\u7684\uff08inclusive\uff09\uff0c\u5373\u5c01\u95ed\u533a\u95f4\u3002 # Series print ( ser [ 0 : 2 ]) print ( ser [ \"d\" : \"a\" ]) d 4.5 b 7.2 dtype: float64 d 4.5 b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ \"a\" : \"c\" ]) print ( df . iloc [ 0 : 3 : 2 ]) one two a 1.0 1 b 2.0 2 c 3.0 3 one two a 1.0 1 c 3.0 3 \u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u5217 \u4e0eSeries\u4e0d\u540c\u7684\u662f\uff0cDataFrame\u8fd8\u6709\u5217\u9009\u62e9\u3002\u4f46\u662fDataFrame\u7684\u5217\u9009\u62e9\u548c\u884c\u9009\u62e9\u4e0d\u540c\u3002 DataFrame\u7684\u884c\u53ef\u4ee5\u540c\u65f6\u6709 \u6574\u6570\u7d22\u5f15 \u548c \u6807\u7b7e\u7d22\u5f15 \uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u6807\u7b7e\u8d4b\u503c\uff0c\u5219\u53ea\u6709\u6574\u6570\u503c\u7d22\u5f15\u3002 DataFrame\u7684\u5217\u5728\u6807\u7b7e\u8d4b\u503c\u540e\uff0c\u53ea\u80fd\u4f7f\u7528\u6807\u7b7e\u7d22\u5f15\u3002 \u9009\u53d6DataFrame\u7684\u5217\uff0c\u5b9e\u9645\u4e0a\u662f\u83b7\u53d6\u4e86\u4e00\u4e2aSeries\uff0c\u8fd4\u56de\u7684Series\u62e5\u6709\u539fDataFrame\u76f8\u540c\u7684\u884c\u7d22\u5f15\u3002 print ( df . one ) print ( df [ \"one\" ]) a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 \u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u591a\u5217 df [[ \"one\" , \"two\" ]] one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u6ce8\u610f\uff1a \u901a\u8fc7\u7d22\u5f15\u65b9\u5f0f\u8fd4\u56de\u7684\u5217\u53ea\u662f\u76f8\u5e94\u6570\u636e\u7684\u89c6\u56fe\u800c\u5df2\uff0c \u5e76\u4e0d\u662f\u526f\u672c\u3002\u56e0\u6b64\uff0c\u5bf9\u8fd4\u56de\u7684Series\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u5168\u90fd\u4f1a\u53cd\u6620\u5230\u539fDataFrame\u4e0a\u3002\u901a\u8fc7Series\u7684copy\u65b9\u6cd5\u5373\u53ef\u663e\u5f0f\u5730\u590d\u5236\u5217\u3002 df [ \"one\" ][ \"a\" ] = np . nan df <ipython-input-1-dbef92a9dbe8>:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas- docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[\"one\"][\"a\"] = np.nan one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u884c\u5217\u540c\u65f6\u7d22\u5f15 df . loc [ \"c\" , \"one\" ] df . iloc [ 2 , 0 ] df . loc [ \"c\" , [ \"one\" , \"two\" ]] df . iloc [ 2 , [ 0 , 1 ]] one 3.0 two 3.0 Name: c, dtype: float64 \u5148\u9009\u62e9\u5217\uff0c\u5728\u9009\u62e9\u884c df [ \"one\" ][ \"c\" ] 3.0 \u91cd\u590d\u7684\u7d22\u5f15 \u867d\u7136\u5f88\u591a\u65f6\u5019\u90fd\u5f3a\u8c03\u8f74\u6807\u7b7e\uff08\u7d22\u5f15\u503c\uff09\u8981\u552f\u4e00\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u5e26\u6709\u91cd\u590d\u7d22\u5f15\u503c\u7684DataFrame\uff1a obj = pd . DataFrame ( np . ones (( 5 , 2 )), index = [ 'a' , 'a' , 'b' , 'b' , 'c' ], columns = [ 'one' , 'one' ]) \u7d22\u5f15\u7684is_unique\u5c5e\u6027\u53ef\u4ee5\u544a\u8bc9\u4f60\u5b83\u7684\u503c\u662f\u5426\u662f\u552f\u4e00\u7684 print ( obj . index . is_unique ) print ( obj . columns . is_unique ) False False \u5bf9\u4e8e\u5e26\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\uff0c\u6570\u636e\u9009\u53d6\u7684\u884c\u4e3a\u5c06\u4f1a\u6709\u4e9b\u4e0d\u540c\u3002\u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u591a\u4e2a\u503c\uff0c\u5219\u8fd4\u56de\u4e00\u4e2aSeries\uff1b\u800c\u5bf9\u5e94\u5355\u4e2a\u503c\u7684\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002\u5bf9DataFrame\u7684\u884c\u8fdb\u884c\u7d22\u5f15\u65f6\u4e5f\u662f\u5982\u6b64\u3002 \u8fd0\u7b97\u5bf9\u9f50 \u5bf9Series\u8fdb\u884c\u8fd0\u7b97\uff08\u5e03\u5c14\u7d22\u5f15\u8fc7\u6ee4\u3001\u6807\u91cf\u4e58\u6cd5\u3001\u6570\u5b66\u51fd\u6570\u7b49\uff09\uff0c\u90fd\u4f1a\u4fdd\u7559\u6807\u7b7e\u548c\u503c\u4e4b\u95f4\u7684\u94fe\u63a5\u3002 a = pd . DataFrame ( np . ones (( 2 , 2 )), index = [ 'a' , 'b' ], columns = [ 'c' , 'd' ]) b = pd . DataFrame ( np . arange ( 4 ) . reshape ( 2 , 2 ), index = [ 'a' , 'b' ], columns = [ 'd' , 'c' ]) a + b c d a 2.0 1.0 b 4.0 3.0 \u5b58\u5728\u7f3a\u5931\u6807\u7b7e\u7684\u7d22\u5f15 \u5728\u65e7\u7248\u672c\u7684pandas\u4e2d\uff0c .loc[list-of-labels] \u53ea\u8981\u6709\u4e00\u4e2a label \u5b58\u5728\uff0c\u4ee3\u7801\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u5426\u5219\u5c06\u5f15\u53d1 KeyError \u3002\u4f46\u4ece0.21\u7248\u672c\u5f00\u59cb\uff0c\u4e0d\u63a8\u8350\u6b64\u884c\u4e3a\u3002\u63a8\u8350\u7684\u4ee3\u66ff\u65b9\u6848\u662f\u4f7f\u7528 .reindex() \u3002\u5728\u8f83\u65b0\u7684pandas\u7248\u672c\uff0c\u53ea\u8981\u7d22\u5f15\u4e2d\u5b58\u5728\u7f3a\u5931\u7684\u6807\u7b7e\uff0c\u5c06\u5f15\u53d1 KeyError \u3002 \u5982\u679c\u4f7f\u7528\u5207\u7247\u7d22\u5f15\uff0c\u5373\u4f7f\u5207\u7247\u8d85\u51fa\u8303\u56f4\uff0c\u4e5f\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u5982\u679c\u6574\u4e2a\u5207\u7247\u90fd\u4e0d\u5728\u7d22\u5f15\u8303\u56f4\uff0c\u5219\u8fd4\u56de\u7a7aSeries\uff0c\u6216\u7a7aDataFrame\u3002 at \u548c iat \u65b9\u6cd5\u2014\u2014\u5feb\u901f\u8bbf\u95ee\u6807\u91cf \u56e0\u4e3a\u7d22\u5f15 [] \u5fc5\u987b\u5904\u7406\u5f88\u591a\u60c5\u51b5\uff08\u6807\u7b7e\u5217\u8868\uff0c\u5207\u7247\uff0c\u5e03\u5c14\u7d22\u5f15\u7b49\uff09\uff0c\u6240\u4ee5\u5b83\u6709\u4e00\u4e9b\u5f00\u9500\u3002\u5982\u679c\u53ea\u60f3\u8bbf\u95ee\u6807\u91cf\u503c\uff0c\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 at \u548c iat \u65b9\u6cd5\u3002 print ( ser . at [ \"b\" ]) print ( ser . iat [ 0 ]) print ( df . at [ \"a\" , \"one\" ]) print ( df . iat [ 0 , 1 ]) b 7.2 b 6.1 dtype: float64 4.5 nan 1 get \u65b9\u6cd5\u2014\u2014\u8fd4\u56de\u9ed8\u8ba4\u503c Series\u6216DataFrame\u4e2d\u90fd\u6709\u4e00\u4e2a get \u65b9\u6cd5\uff0c\u8fd9\u7c7b\u4f3c\u5b57\u5178\u7684 get \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002\u5bf9\u4e8eSeries\uff0c get \u65b9\u6cd5\u5bf9\u884c\u8fdb\u884c\u7d22\u5f15\uff1b\u5bf9\u4e8eDataFrame\uff0c get \u65b9\u6cd5\u5bf9\u5217\u8fdb\u884c\u7d22\u5f15\u3002 print ( ser . get ( \"a\" )) print ( df . get ([ \"one\" , \"two\" ], 5 )) print ( df . get ([ \"one\" , \"three\" ], 5 )) -5.3 one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 5 lookup \u65b9\u6cd5 \u7ed9\u5b9a\u4e00\u7cfb\u5217\u884c\u6807\u7b7e\u548c\u5217\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u63d0\u53d6\u4e00\u7ec4\u503c\uff0c\u8fd4\u56deNumPy\u6570\u7ec4\uff1a # \u8fd4\u56de ('c','one') \u548c ('b','two') df . lookup ([ \"c\" , \"b\" ], [ \"one\" , \"two\" ]) <ipython-input-1-9520edc4baa0>:2: FutureWarning: The 'lookup' method is deprecated and will beremoved in a future version.You can use DataFrame.melt and DataFrame.locas a substitute. df.lookup([\"c\", \"b\"], [\"one\", \"two\"]) array([3., 2.]) \u7d22\u5f15\u65b9\u5f0f\u603b\u7ed3\u8868 \u7c7b\u578b df[val] \u4eceDataFrame\u9009\u53d6\u5355\u5217\u6216\u4e00\u7ec4\u5217\uff1b \u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u6bd4\u8f83\u4fbf\u5229\uff1a\u5e03\u5c14\u578b\u6570\u7ec4\uff08\u8fc7\u6ee4\u884c\uff09\u3001\u5207\u7247\uff08\u884c\u5207\u7247\uff09\u3001\u6216\u5e03\u5c14\u578bDataFrame (\u6839\u636e\u6761\u4ef6\u8bbe\u7f6e\u503c\uff09 df.loc[val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6DataFrame\u7684\u5355\u4e2a\u884c\u6216\u4e00\u7ec4\u884c df.loc[:, val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u5217\u6216\u5217\u5b50\u96c6 df.loc[val1, val2] \u901a\u8fc7\u6807\u7b7e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.iloc[where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u884c\u6216\u884c\u5b50\u96c6 df.iloc[:, where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u5217\u6216\u5217\u5b50\u96c6 df.iloc[where_i, where_j] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.at [label_i, label_j] \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf df.iat[i, j] \u901a\u8fc7\u884c\u548c\u5217\u7684\u4f4d\u7f6e\uff08\u6574\u6570\uff09\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf reindex \u901a\u8fc7\u6807\u7b7e\u9009\u53d6\u884c\u6216\u5217 get _value, set_value \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\u9009\u53d6\u5355\u4e00\u503c","title":"9.3.\u9009\u62e9\u6570\u636e"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_1","text":"# Series print ( ser . b ) print ( ser [ \"b\" ]) print ( ser . loc [ \"b\" ]) b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 # DataFrame df . loc [ \"a\" ] one 1.0 two 1.0 Name: a, dtype: float64","title":"\u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u884c"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_2","text":"# Series ser [[ \"b\" , \"a\" ]] ser . loc [[ \"b\" , \"a\" ]] b 7.2 b 6.1 a -5.3 dtype: float64 # DataFrame df . loc [[ \"a\" , \"b\" ]] one two a 1.0 1 b 2.0 2 \u4e0d\u80fd\u4f7f\u7528 () try : ser . loc [( \"b\" , \"a\" )] except Exception as e : print ( e ) Too many indexers","title":"\u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u591a\u884c"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_3","text":"# Series ser [ 1 ] ser . iloc [ 1 ] 7.2 # DataFrame df . iloc [ 0 ] one 1.0 two 1.0 Name: a, dtype: float64","title":"\u901a\u8fc7\u6574\u6570\u9009\u62e9\u884c"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_4","text":"# Series ser [[ 1 , 0 ]] ser . iloc [[ 1 , 0 ]] b 7.2 d 4.5 dtype: float64 # DataFrame df . iloc [[ 0 , 1 ]] one two a 1.0 1 b 2.0 2","title":"\u901a\u8fc7\u6574\u6570\u9009\u62e9\u591a\u884c"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_5","text":"\u5207\u7247\u5305\u62ec \u6574\u6570\u5207\u7247 \u548c \u6807\u7b7e\u5207\u7247 \u3002 # Series ser [ 1 : 3 ] ser . iloc [ 1 : 3 ] b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ 0 : 3 : 2 ]) print ( df [ 0 : 2 ]) one two a 1.0 1 c 3.0 3 one two a 1.0 1 b 2.0 2 \u5207\u7247\u6709\u6574\u6570\u503c\u7684\u666e\u901a\u5207\u7247\u548c\u6807\u7b7e\u5207\u7247\u3002 \u5229\u7528\u6807\u7b7e\u7684\u5207\u7247\u8fd0\u7b97\u4e0e\u666e\u901a\u7684Python\u5207\u7247\u8fd0\u7b97\u4e0d\u540c\uff0c\u5176\u672b\u7aef\u662f\u5305\u542b\u7684\uff08inclusive\uff09\uff0c\u5373\u5c01\u95ed\u533a\u95f4\u3002 # Series print ( ser [ 0 : 2 ]) print ( ser [ \"d\" : \"a\" ]) d 4.5 b 7.2 dtype: float64 d 4.5 b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ \"a\" : \"c\" ]) print ( df . iloc [ 0 : 3 : 2 ]) one two a 1.0 1 b 2.0 2 c 3.0 3 one two a 1.0 1 c 3.0 3","title":"\u901a\u8fc7\u5207\u7247\u9009\u62e9\u591a\u884c"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_6","text":"\u4e0eSeries\u4e0d\u540c\u7684\u662f\uff0cDataFrame\u8fd8\u6709\u5217\u9009\u62e9\u3002\u4f46\u662fDataFrame\u7684\u5217\u9009\u62e9\u548c\u884c\u9009\u62e9\u4e0d\u540c\u3002 DataFrame\u7684\u884c\u53ef\u4ee5\u540c\u65f6\u6709 \u6574\u6570\u7d22\u5f15 \u548c \u6807\u7b7e\u7d22\u5f15 \uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u6807\u7b7e\u8d4b\u503c\uff0c\u5219\u53ea\u6709\u6574\u6570\u503c\u7d22\u5f15\u3002 DataFrame\u7684\u5217\u5728\u6807\u7b7e\u8d4b\u503c\u540e\uff0c\u53ea\u80fd\u4f7f\u7528\u6807\u7b7e\u7d22\u5f15\u3002 \u9009\u53d6DataFrame\u7684\u5217\uff0c\u5b9e\u9645\u4e0a\u662f\u83b7\u53d6\u4e86\u4e00\u4e2aSeries\uff0c\u8fd4\u56de\u7684Series\u62e5\u6709\u539fDataFrame\u76f8\u540c\u7684\u884c\u7d22\u5f15\u3002 print ( df . one ) print ( df [ \"one\" ]) a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64","title":"\u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u5217"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_7","text":"df [[ \"one\" , \"two\" ]] one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u6ce8\u610f\uff1a \u901a\u8fc7\u7d22\u5f15\u65b9\u5f0f\u8fd4\u56de\u7684\u5217\u53ea\u662f\u76f8\u5e94\u6570\u636e\u7684\u89c6\u56fe\u800c\u5df2\uff0c \u5e76\u4e0d\u662f\u526f\u672c\u3002\u56e0\u6b64\uff0c\u5bf9\u8fd4\u56de\u7684Series\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u5168\u90fd\u4f1a\u53cd\u6620\u5230\u539fDataFrame\u4e0a\u3002\u901a\u8fc7Series\u7684copy\u65b9\u6cd5\u5373\u53ef\u663e\u5f0f\u5730\u590d\u5236\u5217\u3002 df [ \"one\" ][ \"a\" ] = np . nan df <ipython-input-1-dbef92a9dbe8>:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas- docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy df[\"one\"][\"a\"] = np.nan one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5","title":"\u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u591a\u5217"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_8","text":"df . loc [ \"c\" , \"one\" ] df . iloc [ 2 , 0 ] df . loc [ \"c\" , [ \"one\" , \"two\" ]] df . iloc [ 2 , [ 0 , 1 ]] one 3.0 two 3.0 Name: c, dtype: float64 \u5148\u9009\u62e9\u5217\uff0c\u5728\u9009\u62e9\u884c df [ \"one\" ][ \"c\" ] 3.0","title":"\u884c\u5217\u540c\u65f6\u7d22\u5f15"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_9","text":"\u867d\u7136\u5f88\u591a\u65f6\u5019\u90fd\u5f3a\u8c03\u8f74\u6807\u7b7e\uff08\u7d22\u5f15\u503c\uff09\u8981\u552f\u4e00\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u5e26\u6709\u91cd\u590d\u7d22\u5f15\u503c\u7684DataFrame\uff1a obj = pd . DataFrame ( np . ones (( 5 , 2 )), index = [ 'a' , 'a' , 'b' , 'b' , 'c' ], columns = [ 'one' , 'one' ]) \u7d22\u5f15\u7684is_unique\u5c5e\u6027\u53ef\u4ee5\u544a\u8bc9\u4f60\u5b83\u7684\u503c\u662f\u5426\u662f\u552f\u4e00\u7684 print ( obj . index . is_unique ) print ( obj . columns . is_unique ) False False \u5bf9\u4e8e\u5e26\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\uff0c\u6570\u636e\u9009\u53d6\u7684\u884c\u4e3a\u5c06\u4f1a\u6709\u4e9b\u4e0d\u540c\u3002\u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u591a\u4e2a\u503c\uff0c\u5219\u8fd4\u56de\u4e00\u4e2aSeries\uff1b\u800c\u5bf9\u5e94\u5355\u4e2a\u503c\u7684\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002\u5bf9DataFrame\u7684\u884c\u8fdb\u884c\u7d22\u5f15\u65f6\u4e5f\u662f\u5982\u6b64\u3002","title":"\u91cd\u590d\u7684\u7d22\u5f15"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_10","text":"\u5bf9Series\u8fdb\u884c\u8fd0\u7b97\uff08\u5e03\u5c14\u7d22\u5f15\u8fc7\u6ee4\u3001\u6807\u91cf\u4e58\u6cd5\u3001\u6570\u5b66\u51fd\u6570\u7b49\uff09\uff0c\u90fd\u4f1a\u4fdd\u7559\u6807\u7b7e\u548c\u503c\u4e4b\u95f4\u7684\u94fe\u63a5\u3002 a = pd . DataFrame ( np . ones (( 2 , 2 )), index = [ 'a' , 'b' ], columns = [ 'c' , 'd' ]) b = pd . DataFrame ( np . arange ( 4 ) . reshape ( 2 , 2 ), index = [ 'a' , 'b' ], columns = [ 'd' , 'c' ]) a + b c d a 2.0 1.0 b 4.0 3.0","title":"\u8fd0\u7b97\u5bf9\u9f50"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_11","text":"\u5728\u65e7\u7248\u672c\u7684pandas\u4e2d\uff0c .loc[list-of-labels] \u53ea\u8981\u6709\u4e00\u4e2a label \u5b58\u5728\uff0c\u4ee3\u7801\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u5426\u5219\u5c06\u5f15\u53d1 KeyError \u3002\u4f46\u4ece0.21\u7248\u672c\u5f00\u59cb\uff0c\u4e0d\u63a8\u8350\u6b64\u884c\u4e3a\u3002\u63a8\u8350\u7684\u4ee3\u66ff\u65b9\u6848\u662f\u4f7f\u7528 .reindex() \u3002\u5728\u8f83\u65b0\u7684pandas\u7248\u672c\uff0c\u53ea\u8981\u7d22\u5f15\u4e2d\u5b58\u5728\u7f3a\u5931\u7684\u6807\u7b7e\uff0c\u5c06\u5f15\u53d1 KeyError \u3002 \u5982\u679c\u4f7f\u7528\u5207\u7247\u7d22\u5f15\uff0c\u5373\u4f7f\u5207\u7247\u8d85\u51fa\u8303\u56f4\uff0c\u4e5f\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u5982\u679c\u6574\u4e2a\u5207\u7247\u90fd\u4e0d\u5728\u7d22\u5f15\u8303\u56f4\uff0c\u5219\u8fd4\u56de\u7a7aSeries\uff0c\u6216\u7a7aDataFrame\u3002","title":"\u5b58\u5728\u7f3a\u5931\u6807\u7b7e\u7684\u7d22\u5f15"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#atiat","text":"\u56e0\u4e3a\u7d22\u5f15 [] \u5fc5\u987b\u5904\u7406\u5f88\u591a\u60c5\u51b5\uff08\u6807\u7b7e\u5217\u8868\uff0c\u5207\u7247\uff0c\u5e03\u5c14\u7d22\u5f15\u7b49\uff09\uff0c\u6240\u4ee5\u5b83\u6709\u4e00\u4e9b\u5f00\u9500\u3002\u5982\u679c\u53ea\u60f3\u8bbf\u95ee\u6807\u91cf\u503c\uff0c\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 at \u548c iat \u65b9\u6cd5\u3002 print ( ser . at [ \"b\" ]) print ( ser . iat [ 0 ]) print ( df . at [ \"a\" , \"one\" ]) print ( df . iat [ 0 , 1 ]) b 7.2 b 6.1 dtype: float64 4.5 nan 1","title":"at\u548ciat\u65b9\u6cd5\u2014\u2014\u5feb\u901f\u8bbf\u95ee\u6807\u91cf"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#get","text":"Series\u6216DataFrame\u4e2d\u90fd\u6709\u4e00\u4e2a get \u65b9\u6cd5\uff0c\u8fd9\u7c7b\u4f3c\u5b57\u5178\u7684 get \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002\u5bf9\u4e8eSeries\uff0c get \u65b9\u6cd5\u5bf9\u884c\u8fdb\u884c\u7d22\u5f15\uff1b\u5bf9\u4e8eDataFrame\uff0c get \u65b9\u6cd5\u5bf9\u5217\u8fdb\u884c\u7d22\u5f15\u3002 print ( ser . get ( \"a\" )) print ( df . get ([ \"one\" , \"two\" ], 5 )) print ( df . get ([ \"one\" , \"three\" ], 5 )) -5.3 one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 5","title":"get\u65b9\u6cd5\u2014\u2014\u8fd4\u56de\u9ed8\u8ba4\u503c"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#lookup","text":"\u7ed9\u5b9a\u4e00\u7cfb\u5217\u884c\u6807\u7b7e\u548c\u5217\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u63d0\u53d6\u4e00\u7ec4\u503c\uff0c\u8fd4\u56deNumPy\u6570\u7ec4\uff1a # \u8fd4\u56de ('c','one') \u548c ('b','two') df . lookup ([ \"c\" , \"b\" ], [ \"one\" , \"two\" ]) <ipython-input-1-9520edc4baa0>:2: FutureWarning: The 'lookup' method is deprecated and will beremoved in a future version.You can use DataFrame.melt and DataFrame.locas a substitute. df.lookup([\"c\", \"b\"], [\"one\", \"two\"]) array([3., 2.])","title":"lookup\u65b9\u6cd5"},{"location":"pandas/9.3.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE.html#_12","text":"\u7c7b\u578b df[val] \u4eceDataFrame\u9009\u53d6\u5355\u5217\u6216\u4e00\u7ec4\u5217\uff1b \u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u6bd4\u8f83\u4fbf\u5229\uff1a\u5e03\u5c14\u578b\u6570\u7ec4\uff08\u8fc7\u6ee4\u884c\uff09\u3001\u5207\u7247\uff08\u884c\u5207\u7247\uff09\u3001\u6216\u5e03\u5c14\u578bDataFrame (\u6839\u636e\u6761\u4ef6\u8bbe\u7f6e\u503c\uff09 df.loc[val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6DataFrame\u7684\u5355\u4e2a\u884c\u6216\u4e00\u7ec4\u884c df.loc[:, val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u5217\u6216\u5217\u5b50\u96c6 df.loc[val1, val2] \u901a\u8fc7\u6807\u7b7e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.iloc[where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u884c\u6216\u884c\u5b50\u96c6 df.iloc[:, where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u5217\u6216\u5217\u5b50\u96c6 df.iloc[where_i, where_j] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.at [label_i, label_j] \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf df.iat[i, j] \u901a\u8fc7\u884c\u548c\u5217\u7684\u4f4d\u7f6e\uff08\u6574\u6570\uff09\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf reindex \u901a\u8fc7\u6807\u7b7e\u9009\u53d6\u884c\u6216\u5217 get _value, set_value \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\u9009\u53d6\u5355\u4e00\u503c","title":"\u7d22\u5f15\u65b9\u5f0f\u603b\u7ed3\u8868"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html","text":"from toolkit import H import numpy as np import pandas as pd import pprint Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 \u7d22\u5f15\u5bf9\u8c61 pandas\u7684\u7d22\u5f15\u5bf9\u8c61\u8d1f\u8d23\u7ba1\u7406\u8f74\u6807\u7b7e\u548c\u5176\u4ed6\u5143\u6570\u636e\uff08\u6bd4\u5982\u8f74\u540d\u79f0\u7b49\uff09\u3002\u6784\u5efaSeries\u6216DataFrame\u65f6\uff0c\u6240\u7528\u5230\u7684\u4efb\u4f55\u6570\u7ec4\u6216\u5176\u4ed6\u5e8f\u5217\u7684\u6807\u7b7e\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210\u4e00\u4e2aIndex\uff0c\u800c index\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684 \uff0c\u4e5f\u5c31\u662findex\u5bf9\u8c61\u7684\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\uff08immutable\uff09\u3002\u5982\u679c\u8981\u4fee\u6539index\u5185\u5bb9\uff0c\u53ea\u80fd\u901a\u8fc7\u91cd\u65b0\u8d4b\u503c\u7684\u5f62\u5f0f\u3002 \u4e0d\u53ef\u4fee\u6539\u6027\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u4f7fIndex\u5bf9\u8c61\u5728\u591a\u4e2a\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u5b89\u5168\u5171\u4eab\u3002 \u4e0b\u8868\u5217\u51fa\u4e86pandas\u4e2d\u4e3b\u8981\u7684Index\u5bf9\u8c61\uff1a \u7c7b \u8bf4\u660e Index \u6700\u6cdb\u5316\u7684Index\u5bf9\u8c61\uff0c\u5c06\u8f74\u6807\u7b7e\u8868\u793a\u4e3a\u4e00\u4e2a\u7531Python\u5bf9\u8c61\u7ec4\u6210\u7684NumPy \u6570\u7ec4 Int64lndex \u9488\u5bf9\u6574\u6570\u7684\u7279\u6b8aIndex Multiindex \u201c\u5c42\u6b21\u5316\u201d\u7d22\u5f15\u5bf9\u8c61\uff0c\u8868\u793a\u5355\u4e2a\u8f74\u4e0a\u7684\u591a\u5c42\u7d22\u5f15\u3002\u53ef\u4ee5\u770b\u505a\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u6570\u7ec4 Datetimelndex \u5b58\u50a8\u7eb3\u79d2\u7ea7\u65f6\u95f4\u622a\uff08\u7528NumPy\u7684datetime64\u7c7b\u578b\u8868\u793a\uff09 Periodlndex \u9488\u5bf9Period\u6570\u636e\uff08\u65f6\u95f4\u95f4\u9694\uff09\u7684\u7279\u6b8aIndex \u4ee5\u4e0b\u662fpandas\u4e2d\u6240\u6709Index\u5bf9\u8c61\uff1a [ 'CategoricalIndex' , 'DatetimeIndex' , 'Float64Index' , 'Index' , 'Int64Index' , 'IntervalIndex' , 'MultiIndex' , 'PeriodIndex' , 'RangeIndex' , 'TimedeltaIndex' , 'UInt64Index' ] \u6bcf\u4e2a\u7d22\u5f15\u90fd\u6709\u4e00\u4e9b\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u8bbe\u7f6e\u903b\u8f91\u5e76\u56de\u7b54\u6709\u5173\u8be5\u7d22\u5f15\u6240\u5305\u542b\u7684\u6570\u636e\u7684\u5e38\u89c1\u95ee\u9898\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u8fd9\u4e9b\u51fd\u6570\uff1a \u8bf4\u660e \u65b9\u6cd5 append \u8fde\u63a5\u53e6\u4e00\u4e2aindex\u5bf9\u8c61.\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Index diff \u8ba1\u7b97\u5dee\u96c6\uff0c\u5e76\u5f97\u5230\u4e00\u4e2aIndex intersection \u8ba1\u7b97\u4ea4\u96c6 union \u8ba1\u7b97\u5e76\u96c6 isin \u8ba1\u7b97\u4e00\u4e2a\u6307\u793a\u5404\u503c\u662f\u5426\u90fd\u5305\u542b\u5728\u53c2\u6570\u96c6\u5408\u4e2d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 delete \u5220\u9664\u7d22\u5f15i\u5904\u7684\u5143\u7d20\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index drop \u5220\u9664\u4f20\u5165\u7684\u503c.\u5e76\u5f97\u5230\u65b0\u7684Index insert \u5c06\u5143\u7d20\u63d2\u5165\u5230\u7d22\u5f15i\u5904\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index is_monotonic \u5f53\u5404\u5143\u7d20\u5747\u5927\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u8fd4\u56deTRUE is_unique \u5f53Index\u6ca1\u6709\u91cd\u590d\u503c\u65f6\uff0c\u8fd4\u56deTrue unique \u8ba1\u7b97Index\u4e2d\u552f\u4e00\u503c\u7684\u6570\u7ec4 Index pd.Index(data=None, dtype=None, copy=False, name=None, tupleize_cols=True, kwargs) \u53c2\u6570\uff1a data \uff1a\u4e00\u4e2a array-like \uff0c\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 name \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3a Index \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4e3a object copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data tupleize_cols \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u53ef\u80fd\u5219\u5c3d\u91cf\u521b\u5efa MultiIndex \u5bf9\u8c61 pd . Index ([ 'a' , 'b' , 'c' ]) Index(['a', 'b', 'c'], dtype='object') \u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7 pd.Index \u7c7b\u4e5f\u53ef\u4ee5\u521b\u5efa pd.Int64Index \u3001 pd.Float64Index \u3001 pd.RangeIndex \u3001 pd.UInt64Index \u3001 pd.DatetimeIndex \u3001 pd.TimedeltaIndex from datetime import datetime , timedelta print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . uint64 , name = 'UInt64Index' ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . int64 , name = 'Int64Index' ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . float64 , name = 'Float64Index' ))) print ( type ( pd . Index ( range ( 5 ), name = 'RangeIndex' ))) print ( type ( pd . Index ([ datetime . today ()], name = 'DatetimeIndex' ))) print ( type ( pd . Index ([ timedelta ( microseconds = 1 )], name = 'TimedeltaIndex' ))) <class 'pandas.core.indexes.numeric.UInt64Index'> <class 'pandas.core.indexes.numeric.Int64Index'> <class 'pandas.core.indexes.numeric.Float64Index'> <class 'pandas.core.indexes.range.RangeIndex'> <class 'pandas.core.indexes.datetimes.DatetimeIndex'> <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'> \u591a\u7ea7\u7d22\u5f15 MultiIndex MultiIndex \u4ee3\u8868\u7684\u662f\u591a\u7ea7\u7d22\u5f15\u5bf9\u8c61\u3002\u5b83\u7ee7\u627f\u81ea Index \uff0c\u5176\u4e2d\u7684\u591a\u7ea7 label \u91c7\u7528\u5143\u7ec4\u5bf9\u8c61\u6765\u8868\u793a\u3002\u56e0\u6b64\uff0c MultiIndex \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5143\u7ec4\u6570\u7ec4\u3002\u5728 MultiIndex \u5185\u90e8\uff0c\u5e76\u4e0d\u76f4\u63a5\u4fdd\u5b58\u5143\u7ec4\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u591a\u4e2a Index \u5bf9\u8c61\u4fdd\u5b58\u7d22\u5f15\u4e2d\u6bcf\u7ea7\u7684 label \u3002 pd.MultiIndex(levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity=True) \u53c2\u6570\uff1a levels \uff1a\u4e00\u4e2a\u6570\u7ec4\u7684\u5217\u8868\uff0c\u6307\u5b9a\u6bcf\u4e00\u7ea7\u7684\u7d22\u5f15\u3002 codes \uff1a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\uff0c\u6307\u5b9a\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u7d22\u5f15\u6807\u7b7e\u3002 sortorder \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\u7684 level \u7ea7\u522b\u3002 names \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u6307\u5b9a\u6bcf\u7ea7\u7d22\u5f15\u7684 name \u3002 copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e\u3002 verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u6d4b\u5404\u7ea7\u522b\u7684 label/level \u90fd\u662f\u8fde\u7eed\u7684\u4e14\u6709\u6548\u7684\u3002 name \uff1a MultiIndex \u7684\u540d\u5b57\u3002 # index1 \u548c index2 \u662f\u7b49\u4ef7\u7684 index1 = pd . Index ([( 'A' , 'x1' ), ( 'A' , 'x2' ), ( 'B' , 'y1' ), ( 'B' , 'y2' ), ( 'B' , 'y3' )], names = [ 'class1' , 'class2' ]) index2 = pd . MultiIndex ( levels = [[ 'A' , 'B' ], [ 'x1' , 'x2' , 'y1' , 'y2' , 'y3' ]], codes = [[ 0 , 0 , 1 , 1 , 1 ], [ 0 , 1 , 2 , 3 , 4 ]], names = [ 'class1' , 'class2' ]) pd . DataFrame ( np . random . randint ( 1 , 10 , ( 5 , 3 )), index = index2 ) 0 1 2 class1 class2 A x1 5 2 4 x2 2 4 9 B y1 8 5 6 y2 5 7 6 y3 6 1 7 \u4e00\u822c\u4f7f\u7528\u5982\u4e0b\u66ff\u4ee3\u6784\u5efa\u65b9\u6cd5\u6765\u521b\u5efa MultiIndex \uff1a MultiIndex.from_arrays(arrays, sortorder, names) \uff1a\u5c06\u4e8c\u7ef4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d arrays \u4e3a array-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u5217 label \uff08\u4e00\u4e2a\u7ea7\u522b\uff09 MultiIndex.from_tuples(tuples, sortorder, names) \uff1a\u5c06\u5143\u7ec4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d tuples \u4e3a tuple-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u884c label \u5bf9\uff08\u4e0d\u540c\u7ea7\u522b\u7684\u4e00\u5bf9\uff09 MultiIndex.from_product(iterables, sortorder, names) \uff1a\u6839\u636e\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u4e00\u4e2a MultiIndex \uff0c\u5176\u4e2d\u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7684\u7b97\u6cd5\u3002\u5176\u4e2d iterables \u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5e8f\u5217 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u7ed9 Index() \uff0c\u5e76\u4e14\u5c06 tupleize_cols \u8bbe\u7f6e\u4e3a True \u6765\u521b\u5efa MultiIndex \u4ecetuple\u521b\u5efaMultiIndex arrays = [ [ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]] tuples = list ( zip ( * arrays )) pprint . pprint ( tuples ) print ( '' ) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) \u4eceiterables\u521b\u5efaMultiIndex iterables = [[ 'bar' , 'baz' , 'foo' , 'qux' ], [ 'one' , 'two' ]] pprint . pprint ( iterables ) print ( '' ) index = pd . MultiIndex . from_product ( iterables , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [['bar', 'baz', 'foo', 'qux'], ['one', 'two']] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) \u4eceDataFrame\u521b\u5efaMultiIndex df = pd . DataFrame ([[ 'bar' , 'one' ], [ 'bar' , 'two' ], [ 'foo' , 'one' ], [ 'foo' , 'two' ]], columns = [ 'first' , 'second' ]) pprint . pprint ( df ) print ( '' ) index = pd . MultiIndex . from_frame ( df ) pprint . pprint ( index ) first second 0 bar one 1 bar two 2 foo one 3 foo two MultiIndex([('bar', 'one'), ('bar', 'two'), ('foo', 'one'), ('foo', 'two')], names=['first', 'second']) \u4ecelist-like\u521b\u5efaMultiIndex arrays = [ np . array ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ]), np . array ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ])] pprint . pprint ( arrays ) pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) [array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='<U3'), array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='<U3')] 0 1 2 3 bar one 0.295602 -0.185928 1.275799 0.211286 two 1.081593 -1.302783 0.649109 -0.988854 baz one 0.081642 1.701788 -0.215744 -0.505817 two -1.192345 -0.761474 0.143588 -1.335934 foo one 1.060648 -0.622353 1.842039 -0.843779 two -0.160890 -0.781429 -1.498803 1.180676 qux one -0.313122 0.472334 0.423182 -0.132774 two 0.867852 -1.447770 0.219152 0.728055 # pd.Series(np.random.randn(8), index=arrays) \u9009\u62e9\u6570\u636e \u5217\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15 \u521b\u5efa\u793a\u4f8bdataframe\uff1a tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 3 , 8 ), index = [ 'A' , 'B' , 'C' ], columns = index ) df first bar baz ... foo qux second one two one ... two one two A -0.961365 0.177972 1.411186 ... -2.048764 0.778991 0.830117 B -0.171793 0.793813 -0.530862 ... -1.937681 -1.006947 -0.767701 C -1.590160 -2.923568 -0.597164 ... -0.744643 -0.834910 -0.687680 [3 rows x 8 columns] dataframe\u7684 [] \u9009\u62e9\u5217\uff1a df [ 'bar' ] second one two A -0.961365 0.177972 B -0.171793 0.793813 C -1.590160 -2.923568 [] \u4f7f\u7528\u591a\u7ea7\u7d22\u5f15\uff1a # \u5b9e\u9645\u4e0a\u4e0e df[('bar', 'one')] \u7b49\u4ef7 df [ 'bar' , 'one' ] A -0.961365 B -0.171793 C -1.590160 Name: (bar, one), dtype: float64 [[]] \u9009\u62e9\u591a\u5217\uff1a df [[ 'bar' , 'baz' , 'foo' ]] # list first bar baz foo second one two one two one two A -0.961365 0.177972 1.411186 -0.847607 -0.499810 -2.048764 B -0.171793 0.793813 -0.530862 -0.093655 1.969350 -1.937681 C -1.590160 -2.923568 -0.597164 -0.070372 1.247993 -0.744643 () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15\uff1a df [[( 'bar' , 'one' ), ( 'baz' , 'one' )]] # list of tuples first bar baz second one one A -0.961365 1.411186 B -0.171793 -0.530862 C -1.590160 -0.597164 # \u884c\u5217\u7d22\u5f15 print ( df . loc [ 'A' , 'bar' ], ' \\n ' ) # () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15 print ( df . loc [ 'A' , ( 'bar' , 'one' )], ' \\n ' ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 \u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801\u7b49\u4ef7 print ( df . loc [ 'A' , [( 'bar' , 'one' )]], ' \\n ' ) print ( df . loc [ 'A' , ( 'bar' , [ 'one' ])], ' \\n ' ) print ( df . loc [ 'A' , ([ 'bar' ], 'one' )], ' \\n ' ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 print ( df . loc [ 'A' , [ 'bar' ]], ' \\n ' ) second one -0.961365 two 0.177972 Name: A, dtype: float64 -0.9613648172273448 first second bar one -0.961365 Name: A, dtype: float64 first second bar one -0.961365 Name: A, dtype: float64 first second bar one -0.961365 Name: A, dtype: float64 first second bar one -0.961365 two 0.177972 Name: A, dtype: float64 # tuple of lists print ( df . loc [ 'A' , ([ 'bar' , 'foo' ], [ 'one' , 'two' ])], ' \\n ' ) # list of tuples print ( df . loc [ 'A' , [( 'bar' , 'one' ), ( 'foo' , 'two' )]], ' \\n ' ) first second bar one -0.961365 two 0.177972 foo one -0.499810 two -2.048764 Name: A, dtype: float64 first second bar one -0.961365 foo two -2.048764 Name: A, dtype: float64 \u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15 df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) df 0 1 2 3 bar one -0.290142 1.845871 0.391368 1.494154 two -1.133943 -0.205357 0.655615 0.136004 baz one -1.092132 1.543840 1.324847 -1.250835 two 0.517954 0.634885 -1.054950 -1.362589 foo one -0.780578 0.526009 -0.400635 -0.671711 two -0.840659 -1.761449 -0.319861 -0.977393 qux one 0.995792 -1.812975 0.548431 -0.857028 two -0.243271 0.922128 0.052473 0.420014 df . loc [ 'bar' , [ 0 , 1 ]] 0 1 one -0.290142 1.845871 two -1.133943 -0.205357 df . loc [([ 'bar' ], 'one' ), [ 0 , 1 ]] # df.loc[(['bar'], 'one'), (0, 1)] 0 1 bar one -0.290142 1.845871 \u5206\u7c7b\u7d22\u5f15 CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u975e\u5e38\u9002\u5408\u6709\u91cd\u590d\u7684\u7d22\u5f15\u3002 \u8fd9\u662f\u4e00\u4e2a\u56f4\u7ed5 Categorical \u800c\u521b\u5efa\u7684\u5bb9\u5668\u3002 \u8fd9\u53ef\u4ee5\u975e\u5e38\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u7d22\u5f15\u7684\u5177\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u3002 from pandas.api.types import CategoricalDtype df = pd . DataFrame ({ 'A' : np . arange ( 6 ), 'B' : list ( 'aabbca' )}) df [ 'B' ] = df [ 'B' ] . astype ( CategoricalDtype ( list ( 'cab' ))) print ( df , ' \\n ' ) print ( df . dtypes , ' \\n ' ) print ( df . B . cat . categories , ' \\n ' ) A B 0 0 a 1 1 a 2 2 b 3 3 b 4 4 c 5 5 a A int32 B category dtype: object Index(['c', 'a', 'b'], dtype='object') \u901a\u8fc7 .set_index() \u5efa\u7acb\u4e00\u4e2a\u6709 CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u7684 df2 \uff1a df2 = df . set_index ( 'B' ) print ( df2 . index ) CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u4f7f\u7528 __getitem__/.iloc/.loc \u8fdb\u884c\u7d22\u5f15\uff0c\u5728\u542b\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\u4e0a\u7684\u5de5\u4f5c\u539f\u7406\u76f8\u4f3c\u3002\u7d22\u5f15\u503c \u5fc5\u987b \u5728\u4e00\u4e2a\u5206\u7c7b\u4e2d\uff0c\u5426\u8005\u5c06\u4f1a\u5f15\u53d1 KeyError \u9519\u8bef\u3002 df2 . loc [ 'a' ] A B a 0 a 1 a 5 CategoricalIndex \u5728\u7d22\u5f15\u4e4b\u540e\u4e5f\u4f1a\u88ab \u4fdd\u7559 \uff1a df2 . loc [ 'a' ] . index CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u7d22\u5f15\u6392\u5e8f\u5c06\u4f1a\u6309\u7167\u7c7b\u522b\u6e05\u5355\u4e2d\u7684\u987a\u5e8f\u8fdb\u884c\uff08\u6211\u4eec\u5df2\u7ecf\u57fa\u4e8e CategoricalDtype(list('cab')) \u5efa\u7acb\u4e86\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u6b64\u6392\u5e8f\u7684\u987a\u5e8f\u662f cab \uff09 df2 . sort_index () A B c 4 a 0 a 1 a 5 b 2 b 3 \u5206\u7ec4\u64cd\u4f5c\uff08Groupby\uff09\u4e5f\u4f1a\u4fdd\u7559\u7d22\u5f15\u7684\u5168\u90e8\u4fe1\u606f\u3002 df2 . groupby ( level = 0 ) . sum () df2 . groupby ( level = 0 ) . sum () . index CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u91cd\u8bbe\u7d22\u5f15\u7684\u64cd\u4f5c\u5c06\u4f1a\u6839\u636e\u8f93\u5165\u7684\u7d22\u5f15\u503c\u8fd4\u56de\u4e00\u4e2a\u7d22\u5f15\u3002\u4f20\u5165\u4e00\u4e2a\u5217\u8868\uff0c\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u666e\u901a\u7684 Index \uff1b\u5982\u679c\u4f7f\u7528\u7c7b\u522b\u5bf9\u8c61 Categorical \uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b\u7d22\u5f15 CategoricalIndex \uff0c\u6309\u7167\u5176\u4e2d \u4f20\u5165\u7684 \u7684\u7c7b\u522b\u503c Categorical dtype\u6765\u8fdb\u884c\u7d22\u5f15\u3002\u6b63\u5982\u540c\u4f60\u53ef\u4ee5\u5bf9 \u4efb\u610f pandas\u7684\u7d22\u5f15\u8fdb\u884c\u91cd\u65b0\u7d22\u5f15\u4e00\u6837\uff0c\u8fd9\u5c06\u5141\u8bb8\u4f60\u968f\u610f\u7d22\u5f15\u4efb\u610f\u7684\u7d22\u5f15\u503c\uff0c\u5373\u4fbf\u5b83\u4eec\u5e76 \u4e0d\u5b58\u5728 \u5728\u4f60\u7684\u7c7b\u522b\u5bf9\u8c61\u4e2d\u3002 df2 . reindex ([ 'a' , 'e' ]) df2 . reindex ([ 'a' , 'e' ]) . index df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) . index \u95f4\u9694\u7d22\u5f15 pandas\u5728 0.20.0 \u7248\u672c\u4e2d\u65b0\u52a0\u5165 IntervalIndex \u548c\u5b83\u81ea\u5df1\u7279\u6709\u7684 IntervalDtype \u4ee5\u53ca Interval \u6807\u91cf\u7c7b\u578b\uff0c\u5728pandas\u4e2d\uff0c\u95f4\u9694\u6570\u636e\u662f\u83b7\u5f97\u5934\u7b49\u652f\u6301\u7684\u3002 IntervalIndex \u95f4\u9694\u7d22\u5f15\u5141\u8bb8\u4e00\u4e9b\u552f\u4e00\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u4e5f\u662f cut() \u548c qcut() \u7684\u8fd4\u56de\u7c7b\u578b \u4f7f\u7528 \u95f4\u9694\u7d22\u5f15 \u6765\u8fdb\u884c\u6570\u636e\u7d22\u5f15 df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 , 4 ]}, index = pd . IntervalIndex . from_breaks ([ 0 , 1 , 2 , 3 , 4 ])) df A (0, 1] 1 (1, 2] 2 (2, 3] 3 (3, 4] 4 \u95f4\u9694\u7d22\u5f15\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u6807\u7b7e\u7684\u7d22\u5f15 .loc \uff1a # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d df . loc [ 2 ] A 2 Name: (1, 2], dtype: int64 # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d 3\u4f4d\u4e8e(2, 3]\u4e4b\u4e2d df . loc [[ 2 , 3 ]] A (1, 2] 2 (2, 3] 3 \u5982\u679c\u6807\u7b7e\u88ab\u5305\u542b\u5728\u95f4\u9694\u5f53\u4e2d\uff0c\u8fd9\u4e2a\u95f4\u9694\u4e5f\u5c06\u4f1a\u88ab\u9009\u62e9 print ( df . loc [ 2.5 ]) print ( df . loc [[ 2.5 , 3.5 ]]) A 3 Name: (2, 3], dtype: int64 A (2, 3] 3 (3, 4] 4 \u4f7f\u7528 Interval \u6765\u9009\u62e9\u6570\u636e\uff0c\u5c06\u53ea\u8fd4\u56de\u4e25\u683c\u5339\u914d\uff08\u4ecepandas0.25.0\u5f00\u59cb\uff09\u3002 df . loc [ pd . Interval ( 1 , 2 )] A 2 Name: (1, 2], dtype: int64 \u8bd5\u56fe\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u88ab\u4e25\u683c\u5305\u542b\u5728 IntervalIndex \u5185\u7684\u533a\u95f4 Interval \uff0c\u5c06\u4f1a\u51fa\u53d1 KeyError \u9519\u8bef\u3002 try : df . loc [ pd . Interval ( 0.5 , 2.5 )] except KeyError as e : print ( 'KeyError:' , e ) KeyError: Interval(0.5, 2.5, closed='right') \u53ef\u4ee5\u4f7f\u7528 overlaps() \u6765\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u9009\u62e9\u5668\uff0c\u6765\u9009\u4e2d\u6240\u6709\u4e0e \u7ed9\u5b9a\u533a\u95f4 ( Interval )\u91cd\u590d\u7684\u6240\u6709\u533a\u95f4\u3002 idxr = df . index . overlaps ( pd . Interval ( 0.5 , 2.5 )) print ( idxr ) print ( df [ idxr ]) [ True True True False] A (0, 1] 1 (1, 2] 2 (2, 3] 3 \u4f7f\u7528 cut \u548c qcut \u6765\u4e3a\u6570\u636e\u5206\u5757 cut() \u548c qcut() \u90fd\u5c06\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b Categorical \u5bf9\u8c61\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5206\u5757\u533a\u57df\u90fd\u4f1a\u4ee5 \u5206\u7c7b\u7d22\u5f15 IntervalIndex \u7684\u65b9\u5f0f\u88ab\u521b\u5efa\u5e76\u4fdd\u5b58\u5728\u5b83\u7684 .categories \u5c5e\u6027\u4e2d\u3002 c = pd . cut ( range ( 4 ), bins = 2 ) print ( c ) print ( c . categories ) [(-0.003, 1.5], (-0.003, 1.5], (1.5, 3.0], (1.5, 3.0]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] IntervalIndex([(-0.003, 1.5], (1.5, 3.0]], closed='right', dtype='interval[float64]') cut() \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a IntervalIndex \u4f5c\u4e3a\u4ed6\u7684 bins \u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684pandas\u7684\u5199\u6cd5\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528 cut() \u5728\u4e00\u4e9b\u6570\u636e\u4e0a\u9762\uff0c\u5e76\u4e14\u5c06 bins \u8bbe\u7f6e\u4e3a\u67d0\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570 \uff0c\u4ece\u800c\u751f\u6210bins\u3002 \u968f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6\u7684\u6570\u636e\u4e0a\u8c03\u7528 cut() \uff0c\u5e76\u4f20\u5165 .categories \u7684\u503c\uff0c\u4f5c\u4e3a bins \u53c2\u6570\u3002\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5c31\u4e5f\u5c06\u4f1a\u88ab\u5206\u914d\u5230\u540c\u6837\u7684bins\u91cc\u9762 pd . cut ([ 0 , 3 , 5 , 1 ], bins = c . categories ) [(-0.003, 1.5], (1.5, 3.0], NaN, (-0.003, 1.5]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] \u4efb\u4f55\u843d\u5728bins\u4e4b\u5916\u7684\u6570\u636e\u90fd\u5c06\u4f1a\u88ab\u8bbe\u4e3a NaN \u751f\u6210\u4e00\u5b9a\u533a\u95f4\u5185\u7684\u95f4\u9694 \u5982\u679c\u6211\u4eec\u9700\u8981\u7ecf\u5e38\u5730\u4f7f\u7528\u6b65\u8fdb\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 interval_range() \u51fd\u6570\uff0c\u7ed3\u5408 start , end , \u548c periods \u6765\u5efa\u7acb\u4e00\u4e2a IntervalIndex \u5bf9\u4e8e\u6570\u503c\u578b\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u7684 interval_range \u95f4\u9694\u9891\u7387\u662f1\uff0c\u5bf9\u4e8edatetime\u7c7b\u578b\u7684\u95f4\u9694\u5219\u662f\u65e5\u5386\u65e5\u3002 pd . interval_range ( start = 0 , end = 5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 ) pd . interval_range ( end = pd . Timedelta ( '3 days' ), periods = 3 ) IntervalIndex([(0 days 00:00:00, 1 days 00:00:00], (1 days 00:00:00, 2 days 00:00:00], (2 days 00:00:00, 3 days 00:00:00]], closed='right', dtype='interval[timedelta64[ns]]') freq \u53c2\u6570\u53ef\u4ee5\u88ab\u7528\u6765\u660e\u786e\u975e\u9ed8\u8ba4\u7684\u9891\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u5145\u5206\u5730\u5229\u7528\u5404\u79cd\u5404\u6837\u7684 frequency aliases datetime\u7c7b\u578b\u7684\u65f6\u95f4\u95f4\u9694\u3002 pd . interval_range ( start = 0 , periods = 5 , freq = 1.5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 , freq = 'W' ) pd . interval_range ( start = pd . Timedelta ( '0 days' ), periods = 3 , freq = '9H' ) IntervalIndex([(0 days 00:00:00, 0 days 09:00:00], (0 days 09:00:00, 0 days 18:00:00], (0 days 18:00:00, 1 days 03:00:00]], closed='right', dtype='interval[timedelta64[ns]]') \u6b64\u5916\uff0c closed \u53c2\u6570\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u54ea\u4e2a\u8fb9\u754c\u662f\u5305\u542b\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u95f4\u9694\u7684\u53f3\u754c\u662f\u5305\u542b\u7684\u3002 pd . interval_range ( start = 0 , end = 4 , closed = 'both' ) pd . interval_range ( start = 0 , end = 4 , closed = 'neither' ) IntervalIndex([(0, 1), (1, 2), (2, 3), (3, 4)], closed='neither', dtype='interval[int64]') 0.23.0\u7248\u672c\u52a0\u5165\u7684\u529f\u80fd \u4f7f\u7528 start , end , \u548c periods \u53ef\u4ee5\u4ece start \u5230 end \uff08\u5305\u542b\uff09\u751f\u6210\u4e00\u4e2a\u5e73\u5747\u5206\u914d\u7684\u95f4\u9694\uff0c\u5728\u8fd4\u56de IntervalIndex \u4e2d\u751f\u6210 periods \u8fd9\u4e48\u591a\u7684\u5143\u7d20\uff08\u8bd1\u8005\uff1a\u533a\u95f4\uff09\u3002 pd . interval_range ( start = 0 , end = 6 , periods = 4 ) pd . interval_range ( pd . Timestamp ( '2018-01-01' ), pd . Timestamp ( '2018-02-28' ), periods = 3 ) IntervalIndex([(2018-01-01, 2018-01-20 08:00:00], (2018-01-20 08:00:00, 2018-02-08 16:00:00], (2018-02-08 16:00:00, 2018-02-28]], closed='right', dtype='interval[datetime64[ns]]')","title":"9.4.\u7d22\u5f15\u5bf9\u8c61"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_1","text":"pandas\u7684\u7d22\u5f15\u5bf9\u8c61\u8d1f\u8d23\u7ba1\u7406\u8f74\u6807\u7b7e\u548c\u5176\u4ed6\u5143\u6570\u636e\uff08\u6bd4\u5982\u8f74\u540d\u79f0\u7b49\uff09\u3002\u6784\u5efaSeries\u6216DataFrame\u65f6\uff0c\u6240\u7528\u5230\u7684\u4efb\u4f55\u6570\u7ec4\u6216\u5176\u4ed6\u5e8f\u5217\u7684\u6807\u7b7e\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210\u4e00\u4e2aIndex\uff0c\u800c index\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684 \uff0c\u4e5f\u5c31\u662findex\u5bf9\u8c61\u7684\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\uff08immutable\uff09\u3002\u5982\u679c\u8981\u4fee\u6539index\u5185\u5bb9\uff0c\u53ea\u80fd\u901a\u8fc7\u91cd\u65b0\u8d4b\u503c\u7684\u5f62\u5f0f\u3002 \u4e0d\u53ef\u4fee\u6539\u6027\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u4f7fIndex\u5bf9\u8c61\u5728\u591a\u4e2a\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u5b89\u5168\u5171\u4eab\u3002 \u4e0b\u8868\u5217\u51fa\u4e86pandas\u4e2d\u4e3b\u8981\u7684Index\u5bf9\u8c61\uff1a \u7c7b \u8bf4\u660e Index \u6700\u6cdb\u5316\u7684Index\u5bf9\u8c61\uff0c\u5c06\u8f74\u6807\u7b7e\u8868\u793a\u4e3a\u4e00\u4e2a\u7531Python\u5bf9\u8c61\u7ec4\u6210\u7684NumPy \u6570\u7ec4 Int64lndex \u9488\u5bf9\u6574\u6570\u7684\u7279\u6b8aIndex Multiindex \u201c\u5c42\u6b21\u5316\u201d\u7d22\u5f15\u5bf9\u8c61\uff0c\u8868\u793a\u5355\u4e2a\u8f74\u4e0a\u7684\u591a\u5c42\u7d22\u5f15\u3002\u53ef\u4ee5\u770b\u505a\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u6570\u7ec4 Datetimelndex \u5b58\u50a8\u7eb3\u79d2\u7ea7\u65f6\u95f4\u622a\uff08\u7528NumPy\u7684datetime64\u7c7b\u578b\u8868\u793a\uff09 Periodlndex \u9488\u5bf9Period\u6570\u636e\uff08\u65f6\u95f4\u95f4\u9694\uff09\u7684\u7279\u6b8aIndex \u4ee5\u4e0b\u662fpandas\u4e2d\u6240\u6709Index\u5bf9\u8c61\uff1a [ 'CategoricalIndex' , 'DatetimeIndex' , 'Float64Index' , 'Index' , 'Int64Index' , 'IntervalIndex' , 'MultiIndex' , 'PeriodIndex' , 'RangeIndex' , 'TimedeltaIndex' , 'UInt64Index' ] \u6bcf\u4e2a\u7d22\u5f15\u90fd\u6709\u4e00\u4e9b\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u8bbe\u7f6e\u903b\u8f91\u5e76\u56de\u7b54\u6709\u5173\u8be5\u7d22\u5f15\u6240\u5305\u542b\u7684\u6570\u636e\u7684\u5e38\u89c1\u95ee\u9898\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u8fd9\u4e9b\u51fd\u6570\uff1a \u8bf4\u660e \u65b9\u6cd5 append \u8fde\u63a5\u53e6\u4e00\u4e2aindex\u5bf9\u8c61.\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Index diff \u8ba1\u7b97\u5dee\u96c6\uff0c\u5e76\u5f97\u5230\u4e00\u4e2aIndex intersection \u8ba1\u7b97\u4ea4\u96c6 union \u8ba1\u7b97\u5e76\u96c6 isin \u8ba1\u7b97\u4e00\u4e2a\u6307\u793a\u5404\u503c\u662f\u5426\u90fd\u5305\u542b\u5728\u53c2\u6570\u96c6\u5408\u4e2d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 delete \u5220\u9664\u7d22\u5f15i\u5904\u7684\u5143\u7d20\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index drop \u5220\u9664\u4f20\u5165\u7684\u503c.\u5e76\u5f97\u5230\u65b0\u7684Index insert \u5c06\u5143\u7d20\u63d2\u5165\u5230\u7d22\u5f15i\u5904\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index is_monotonic \u5f53\u5404\u5143\u7d20\u5747\u5927\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u8fd4\u56deTRUE is_unique \u5f53Index\u6ca1\u6709\u91cd\u590d\u503c\u65f6\uff0c\u8fd4\u56deTrue unique \u8ba1\u7b97Index\u4e2d\u552f\u4e00\u503c\u7684\u6570\u7ec4","title":"\u7d22\u5f15\u5bf9\u8c61"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#index","text":"pd.Index(data=None, dtype=None, copy=False, name=None, tupleize_cols=True, kwargs) \u53c2\u6570\uff1a data \uff1a\u4e00\u4e2a array-like \uff0c\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 name \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3a Index \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4e3a object copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data tupleize_cols \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u53ef\u80fd\u5219\u5c3d\u91cf\u521b\u5efa MultiIndex \u5bf9\u8c61 pd . Index ([ 'a' , 'b' , 'c' ]) Index(['a', 'b', 'c'], dtype='object') \u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7 pd.Index \u7c7b\u4e5f\u53ef\u4ee5\u521b\u5efa pd.Int64Index \u3001 pd.Float64Index \u3001 pd.RangeIndex \u3001 pd.UInt64Index \u3001 pd.DatetimeIndex \u3001 pd.TimedeltaIndex from datetime import datetime , timedelta print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . uint64 , name = 'UInt64Index' ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . int64 , name = 'Int64Index' ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . float64 , name = 'Float64Index' ))) print ( type ( pd . Index ( range ( 5 ), name = 'RangeIndex' ))) print ( type ( pd . Index ([ datetime . today ()], name = 'DatetimeIndex' ))) print ( type ( pd . Index ([ timedelta ( microseconds = 1 )], name = 'TimedeltaIndex' ))) <class 'pandas.core.indexes.numeric.UInt64Index'> <class 'pandas.core.indexes.numeric.Int64Index'> <class 'pandas.core.indexes.numeric.Float64Index'> <class 'pandas.core.indexes.range.RangeIndex'> <class 'pandas.core.indexes.datetimes.DatetimeIndex'> <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>","title":"Index"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#multiindex","text":"MultiIndex \u4ee3\u8868\u7684\u662f\u591a\u7ea7\u7d22\u5f15\u5bf9\u8c61\u3002\u5b83\u7ee7\u627f\u81ea Index \uff0c\u5176\u4e2d\u7684\u591a\u7ea7 label \u91c7\u7528\u5143\u7ec4\u5bf9\u8c61\u6765\u8868\u793a\u3002\u56e0\u6b64\uff0c MultiIndex \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5143\u7ec4\u6570\u7ec4\u3002\u5728 MultiIndex \u5185\u90e8\uff0c\u5e76\u4e0d\u76f4\u63a5\u4fdd\u5b58\u5143\u7ec4\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u591a\u4e2a Index \u5bf9\u8c61\u4fdd\u5b58\u7d22\u5f15\u4e2d\u6bcf\u7ea7\u7684 label \u3002 pd.MultiIndex(levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity=True) \u53c2\u6570\uff1a levels \uff1a\u4e00\u4e2a\u6570\u7ec4\u7684\u5217\u8868\uff0c\u6307\u5b9a\u6bcf\u4e00\u7ea7\u7684\u7d22\u5f15\u3002 codes \uff1a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\uff0c\u6307\u5b9a\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u7d22\u5f15\u6807\u7b7e\u3002 sortorder \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\u7684 level \u7ea7\u522b\u3002 names \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u6307\u5b9a\u6bcf\u7ea7\u7d22\u5f15\u7684 name \u3002 copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e\u3002 verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u6d4b\u5404\u7ea7\u522b\u7684 label/level \u90fd\u662f\u8fde\u7eed\u7684\u4e14\u6709\u6548\u7684\u3002 name \uff1a MultiIndex \u7684\u540d\u5b57\u3002 # index1 \u548c index2 \u662f\u7b49\u4ef7\u7684 index1 = pd . Index ([( 'A' , 'x1' ), ( 'A' , 'x2' ), ( 'B' , 'y1' ), ( 'B' , 'y2' ), ( 'B' , 'y3' )], names = [ 'class1' , 'class2' ]) index2 = pd . MultiIndex ( levels = [[ 'A' , 'B' ], [ 'x1' , 'x2' , 'y1' , 'y2' , 'y3' ]], codes = [[ 0 , 0 , 1 , 1 , 1 ], [ 0 , 1 , 2 , 3 , 4 ]], names = [ 'class1' , 'class2' ]) pd . DataFrame ( np . random . randint ( 1 , 10 , ( 5 , 3 )), index = index2 ) 0 1 2 class1 class2 A x1 5 2 4 x2 2 4 9 B y1 8 5 6 y2 5 7 6 y3 6 1 7 \u4e00\u822c\u4f7f\u7528\u5982\u4e0b\u66ff\u4ee3\u6784\u5efa\u65b9\u6cd5\u6765\u521b\u5efa MultiIndex \uff1a MultiIndex.from_arrays(arrays, sortorder, names) \uff1a\u5c06\u4e8c\u7ef4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d arrays \u4e3a array-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u5217 label \uff08\u4e00\u4e2a\u7ea7\u522b\uff09 MultiIndex.from_tuples(tuples, sortorder, names) \uff1a\u5c06\u5143\u7ec4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d tuples \u4e3a tuple-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u884c label \u5bf9\uff08\u4e0d\u540c\u7ea7\u522b\u7684\u4e00\u5bf9\uff09 MultiIndex.from_product(iterables, sortorder, names) \uff1a\u6839\u636e\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u4e00\u4e2a MultiIndex \uff0c\u5176\u4e2d\u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7684\u7b97\u6cd5\u3002\u5176\u4e2d iterables \u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5e8f\u5217 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u7ed9 Index() \uff0c\u5e76\u4e14\u5c06 tupleize_cols \u8bbe\u7f6e\u4e3a True \u6765\u521b\u5efa MultiIndex","title":"\u591a\u7ea7\u7d22\u5f15 MultiIndex"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#tuplemultiindex","text":"arrays = [ [ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]] tuples = list ( zip ( * arrays )) pprint . pprint ( tuples ) print ( '' ) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second'])","title":"\u4ecetuple\u521b\u5efaMultiIndex"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#iterablesmultiindex","text":"iterables = [[ 'bar' , 'baz' , 'foo' , 'qux' ], [ 'one' , 'two' ]] pprint . pprint ( iterables ) print ( '' ) index = pd . MultiIndex . from_product ( iterables , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [['bar', 'baz', 'foo', 'qux'], ['one', 'two']] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second'])","title":"\u4eceiterables\u521b\u5efaMultiIndex"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#dataframemultiindex","text":"df = pd . DataFrame ([[ 'bar' , 'one' ], [ 'bar' , 'two' ], [ 'foo' , 'one' ], [ 'foo' , 'two' ]], columns = [ 'first' , 'second' ]) pprint . pprint ( df ) print ( '' ) index = pd . MultiIndex . from_frame ( df ) pprint . pprint ( index ) first second 0 bar one 1 bar two 2 foo one 3 foo two MultiIndex([('bar', 'one'), ('bar', 'two'), ('foo', 'one'), ('foo', 'two')], names=['first', 'second'])","title":"\u4eceDataFrame\u521b\u5efaMultiIndex"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#list-likemultiindex","text":"arrays = [ np . array ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ]), np . array ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ])] pprint . pprint ( arrays ) pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) [array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='<U3'), array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='<U3')] 0 1 2 3 bar one 0.295602 -0.185928 1.275799 0.211286 two 1.081593 -1.302783 0.649109 -0.988854 baz one 0.081642 1.701788 -0.215744 -0.505817 two -1.192345 -0.761474 0.143588 -1.335934 foo one 1.060648 -0.622353 1.842039 -0.843779 two -0.160890 -0.781429 -1.498803 1.180676 qux one -0.313122 0.472334 0.423182 -0.132774 two 0.867852 -1.447770 0.219152 0.728055 # pd.Series(np.random.randn(8), index=arrays)","title":"\u4ecelist-like\u521b\u5efaMultiIndex"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_2","text":"","title":"\u9009\u62e9\u6570\u636e"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_3","text":"\u521b\u5efa\u793a\u4f8bdataframe\uff1a tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 3 , 8 ), index = [ 'A' , 'B' , 'C' ], columns = index ) df first bar baz ... foo qux second one two one ... two one two A -0.961365 0.177972 1.411186 ... -2.048764 0.778991 0.830117 B -0.171793 0.793813 -0.530862 ... -1.937681 -1.006947 -0.767701 C -1.590160 -2.923568 -0.597164 ... -0.744643 -0.834910 -0.687680 [3 rows x 8 columns] dataframe\u7684 [] \u9009\u62e9\u5217\uff1a df [ 'bar' ] second one two A -0.961365 0.177972 B -0.171793 0.793813 C -1.590160 -2.923568 [] \u4f7f\u7528\u591a\u7ea7\u7d22\u5f15\uff1a # \u5b9e\u9645\u4e0a\u4e0e df[('bar', 'one')] \u7b49\u4ef7 df [ 'bar' , 'one' ] A -0.961365 B -0.171793 C -1.590160 Name: (bar, one), dtype: float64 [[]] \u9009\u62e9\u591a\u5217\uff1a df [[ 'bar' , 'baz' , 'foo' ]] # list first bar baz foo second one two one two one two A -0.961365 0.177972 1.411186 -0.847607 -0.499810 -2.048764 B -0.171793 0.793813 -0.530862 -0.093655 1.969350 -1.937681 C -1.590160 -2.923568 -0.597164 -0.070372 1.247993 -0.744643 () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15\uff1a df [[( 'bar' , 'one' ), ( 'baz' , 'one' )]] # list of tuples first bar baz second one one A -0.961365 1.411186 B -0.171793 -0.530862 C -1.590160 -0.597164 # \u884c\u5217\u7d22\u5f15 print ( df . loc [ 'A' , 'bar' ], ' \\n ' ) # () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15 print ( df . loc [ 'A' , ( 'bar' , 'one' )], ' \\n ' ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 \u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801\u7b49\u4ef7 print ( df . loc [ 'A' , [( 'bar' , 'one' )]], ' \\n ' ) print ( df . loc [ 'A' , ( 'bar' , [ 'one' ])], ' \\n ' ) print ( df . loc [ 'A' , ([ 'bar' ], 'one' )], ' \\n ' ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 print ( df . loc [ 'A' , [ 'bar' ]], ' \\n ' ) second one -0.961365 two 0.177972 Name: A, dtype: float64 -0.9613648172273448 first second bar one -0.961365 Name: A, dtype: float64 first second bar one -0.961365 Name: A, dtype: float64 first second bar one -0.961365 Name: A, dtype: float64 first second bar one -0.961365 two 0.177972 Name: A, dtype: float64 # tuple of lists print ( df . loc [ 'A' , ([ 'bar' , 'foo' ], [ 'one' , 'two' ])], ' \\n ' ) # list of tuples print ( df . loc [ 'A' , [( 'bar' , 'one' ), ( 'foo' , 'two' )]], ' \\n ' ) first second bar one -0.961365 two 0.177972 foo one -0.499810 two -2.048764 Name: A, dtype: float64 first second bar one -0.961365 foo two -2.048764 Name: A, dtype: float64","title":"\u5217\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_4","text":"df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) df 0 1 2 3 bar one -0.290142 1.845871 0.391368 1.494154 two -1.133943 -0.205357 0.655615 0.136004 baz one -1.092132 1.543840 1.324847 -1.250835 two 0.517954 0.634885 -1.054950 -1.362589 foo one -0.780578 0.526009 -0.400635 -0.671711 two -0.840659 -1.761449 -0.319861 -0.977393 qux one 0.995792 -1.812975 0.548431 -0.857028 two -0.243271 0.922128 0.052473 0.420014 df . loc [ 'bar' , [ 0 , 1 ]] 0 1 one -0.290142 1.845871 two -1.133943 -0.205357 df . loc [([ 'bar' ], 'one' ), [ 0 , 1 ]] # df.loc[(['bar'], 'one'), (0, 1)] 0 1 bar one -0.290142 1.845871","title":"\u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_5","text":"CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u975e\u5e38\u9002\u5408\u6709\u91cd\u590d\u7684\u7d22\u5f15\u3002 \u8fd9\u662f\u4e00\u4e2a\u56f4\u7ed5 Categorical \u800c\u521b\u5efa\u7684\u5bb9\u5668\u3002 \u8fd9\u53ef\u4ee5\u975e\u5e38\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u7d22\u5f15\u7684\u5177\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u3002 from pandas.api.types import CategoricalDtype df = pd . DataFrame ({ 'A' : np . arange ( 6 ), 'B' : list ( 'aabbca' )}) df [ 'B' ] = df [ 'B' ] . astype ( CategoricalDtype ( list ( 'cab' ))) print ( df , ' \\n ' ) print ( df . dtypes , ' \\n ' ) print ( df . B . cat . categories , ' \\n ' ) A B 0 0 a 1 1 a 2 2 b 3 3 b 4 4 c 5 5 a A int32 B category dtype: object Index(['c', 'a', 'b'], dtype='object') \u901a\u8fc7 .set_index() \u5efa\u7acb\u4e00\u4e2a\u6709 CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u7684 df2 \uff1a df2 = df . set_index ( 'B' ) print ( df2 . index ) CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u4f7f\u7528 __getitem__/.iloc/.loc \u8fdb\u884c\u7d22\u5f15\uff0c\u5728\u542b\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\u4e0a\u7684\u5de5\u4f5c\u539f\u7406\u76f8\u4f3c\u3002\u7d22\u5f15\u503c \u5fc5\u987b \u5728\u4e00\u4e2a\u5206\u7c7b\u4e2d\uff0c\u5426\u8005\u5c06\u4f1a\u5f15\u53d1 KeyError \u9519\u8bef\u3002 df2 . loc [ 'a' ] A B a 0 a 1 a 5 CategoricalIndex \u5728\u7d22\u5f15\u4e4b\u540e\u4e5f\u4f1a\u88ab \u4fdd\u7559 \uff1a df2 . loc [ 'a' ] . index CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u7d22\u5f15\u6392\u5e8f\u5c06\u4f1a\u6309\u7167\u7c7b\u522b\u6e05\u5355\u4e2d\u7684\u987a\u5e8f\u8fdb\u884c\uff08\u6211\u4eec\u5df2\u7ecf\u57fa\u4e8e CategoricalDtype(list('cab')) \u5efa\u7acb\u4e86\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u6b64\u6392\u5e8f\u7684\u987a\u5e8f\u662f cab \uff09 df2 . sort_index () A B c 4 a 0 a 1 a 5 b 2 b 3 \u5206\u7ec4\u64cd\u4f5c\uff08Groupby\uff09\u4e5f\u4f1a\u4fdd\u7559\u7d22\u5f15\u7684\u5168\u90e8\u4fe1\u606f\u3002 df2 . groupby ( level = 0 ) . sum () df2 . groupby ( level = 0 ) . sum () . index CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u91cd\u8bbe\u7d22\u5f15\u7684\u64cd\u4f5c\u5c06\u4f1a\u6839\u636e\u8f93\u5165\u7684\u7d22\u5f15\u503c\u8fd4\u56de\u4e00\u4e2a\u7d22\u5f15\u3002\u4f20\u5165\u4e00\u4e2a\u5217\u8868\uff0c\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u666e\u901a\u7684 Index \uff1b\u5982\u679c\u4f7f\u7528\u7c7b\u522b\u5bf9\u8c61 Categorical \uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b\u7d22\u5f15 CategoricalIndex \uff0c\u6309\u7167\u5176\u4e2d \u4f20\u5165\u7684 \u7684\u7c7b\u522b\u503c Categorical dtype\u6765\u8fdb\u884c\u7d22\u5f15\u3002\u6b63\u5982\u540c\u4f60\u53ef\u4ee5\u5bf9 \u4efb\u610f pandas\u7684\u7d22\u5f15\u8fdb\u884c\u91cd\u65b0\u7d22\u5f15\u4e00\u6837\uff0c\u8fd9\u5c06\u5141\u8bb8\u4f60\u968f\u610f\u7d22\u5f15\u4efb\u610f\u7684\u7d22\u5f15\u503c\uff0c\u5373\u4fbf\u5b83\u4eec\u5e76 \u4e0d\u5b58\u5728 \u5728\u4f60\u7684\u7c7b\u522b\u5bf9\u8c61\u4e2d\u3002 df2 . reindex ([ 'a' , 'e' ]) df2 . reindex ([ 'a' , 'e' ]) . index df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) . index","title":"\u5206\u7c7b\u7d22\u5f15"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_6","text":"pandas\u5728 0.20.0 \u7248\u672c\u4e2d\u65b0\u52a0\u5165 IntervalIndex \u548c\u5b83\u81ea\u5df1\u7279\u6709\u7684 IntervalDtype \u4ee5\u53ca Interval \u6807\u91cf\u7c7b\u578b\uff0c\u5728pandas\u4e2d\uff0c\u95f4\u9694\u6570\u636e\u662f\u83b7\u5f97\u5934\u7b49\u652f\u6301\u7684\u3002 IntervalIndex \u95f4\u9694\u7d22\u5f15\u5141\u8bb8\u4e00\u4e9b\u552f\u4e00\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u4e5f\u662f cut() \u548c qcut() \u7684\u8fd4\u56de\u7c7b\u578b","title":"\u95f4\u9694\u7d22\u5f15"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_7","text":"df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 , 4 ]}, index = pd . IntervalIndex . from_breaks ([ 0 , 1 , 2 , 3 , 4 ])) df A (0, 1] 1 (1, 2] 2 (2, 3] 3 (3, 4] 4 \u95f4\u9694\u7d22\u5f15\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u6807\u7b7e\u7684\u7d22\u5f15 .loc \uff1a # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d df . loc [ 2 ] A 2 Name: (1, 2], dtype: int64 # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d 3\u4f4d\u4e8e(2, 3]\u4e4b\u4e2d df . loc [[ 2 , 3 ]] A (1, 2] 2 (2, 3] 3 \u5982\u679c\u6807\u7b7e\u88ab\u5305\u542b\u5728\u95f4\u9694\u5f53\u4e2d\uff0c\u8fd9\u4e2a\u95f4\u9694\u4e5f\u5c06\u4f1a\u88ab\u9009\u62e9 print ( df . loc [ 2.5 ]) print ( df . loc [[ 2.5 , 3.5 ]]) A 3 Name: (2, 3], dtype: int64 A (2, 3] 3 (3, 4] 4 \u4f7f\u7528 Interval \u6765\u9009\u62e9\u6570\u636e\uff0c\u5c06\u53ea\u8fd4\u56de\u4e25\u683c\u5339\u914d\uff08\u4ecepandas0.25.0\u5f00\u59cb\uff09\u3002 df . loc [ pd . Interval ( 1 , 2 )] A 2 Name: (1, 2], dtype: int64 \u8bd5\u56fe\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u88ab\u4e25\u683c\u5305\u542b\u5728 IntervalIndex \u5185\u7684\u533a\u95f4 Interval \uff0c\u5c06\u4f1a\u51fa\u53d1 KeyError \u9519\u8bef\u3002 try : df . loc [ pd . Interval ( 0.5 , 2.5 )] except KeyError as e : print ( 'KeyError:' , e ) KeyError: Interval(0.5, 2.5, closed='right') \u53ef\u4ee5\u4f7f\u7528 overlaps() \u6765\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u9009\u62e9\u5668\uff0c\u6765\u9009\u4e2d\u6240\u6709\u4e0e \u7ed9\u5b9a\u533a\u95f4 ( Interval )\u91cd\u590d\u7684\u6240\u6709\u533a\u95f4\u3002 idxr = df . index . overlaps ( pd . Interval ( 0.5 , 2.5 )) print ( idxr ) print ( df [ idxr ]) [ True True True False] A (0, 1] 1 (1, 2] 2 (2, 3] 3","title":"\u4f7f\u7528 \u95f4\u9694\u7d22\u5f15 \u6765\u8fdb\u884c\u6570\u636e\u7d22\u5f15"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#cut-qcut","text":"cut() \u548c qcut() \u90fd\u5c06\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b Categorical \u5bf9\u8c61\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5206\u5757\u533a\u57df\u90fd\u4f1a\u4ee5 \u5206\u7c7b\u7d22\u5f15 IntervalIndex \u7684\u65b9\u5f0f\u88ab\u521b\u5efa\u5e76\u4fdd\u5b58\u5728\u5b83\u7684 .categories \u5c5e\u6027\u4e2d\u3002 c = pd . cut ( range ( 4 ), bins = 2 ) print ( c ) print ( c . categories ) [(-0.003, 1.5], (-0.003, 1.5], (1.5, 3.0], (1.5, 3.0]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] IntervalIndex([(-0.003, 1.5], (1.5, 3.0]], closed='right', dtype='interval[float64]') cut() \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a IntervalIndex \u4f5c\u4e3a\u4ed6\u7684 bins \u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684pandas\u7684\u5199\u6cd5\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528 cut() \u5728\u4e00\u4e9b\u6570\u636e\u4e0a\u9762\uff0c\u5e76\u4e14\u5c06 bins \u8bbe\u7f6e\u4e3a\u67d0\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570 \uff0c\u4ece\u800c\u751f\u6210bins\u3002 \u968f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6\u7684\u6570\u636e\u4e0a\u8c03\u7528 cut() \uff0c\u5e76\u4f20\u5165 .categories \u7684\u503c\uff0c\u4f5c\u4e3a bins \u53c2\u6570\u3002\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5c31\u4e5f\u5c06\u4f1a\u88ab\u5206\u914d\u5230\u540c\u6837\u7684bins\u91cc\u9762 pd . cut ([ 0 , 3 , 5 , 1 ], bins = c . categories ) [(-0.003, 1.5], (1.5, 3.0], NaN, (-0.003, 1.5]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] \u4efb\u4f55\u843d\u5728bins\u4e4b\u5916\u7684\u6570\u636e\u90fd\u5c06\u4f1a\u88ab\u8bbe\u4e3a NaN","title":"\u4f7f\u7528 cut \u548c qcut\u6765\u4e3a\u6570\u636e\u5206\u5757"},{"location":"pandas/9.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_8","text":"\u5982\u679c\u6211\u4eec\u9700\u8981\u7ecf\u5e38\u5730\u4f7f\u7528\u6b65\u8fdb\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 interval_range() \u51fd\u6570\uff0c\u7ed3\u5408 start , end , \u548c periods \u6765\u5efa\u7acb\u4e00\u4e2a IntervalIndex \u5bf9\u4e8e\u6570\u503c\u578b\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u7684 interval_range \u95f4\u9694\u9891\u7387\u662f1\uff0c\u5bf9\u4e8edatetime\u7c7b\u578b\u7684\u95f4\u9694\u5219\u662f\u65e5\u5386\u65e5\u3002 pd . interval_range ( start = 0 , end = 5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 ) pd . interval_range ( end = pd . Timedelta ( '3 days' ), periods = 3 ) IntervalIndex([(0 days 00:00:00, 1 days 00:00:00], (1 days 00:00:00, 2 days 00:00:00], (2 days 00:00:00, 3 days 00:00:00]], closed='right', dtype='interval[timedelta64[ns]]') freq \u53c2\u6570\u53ef\u4ee5\u88ab\u7528\u6765\u660e\u786e\u975e\u9ed8\u8ba4\u7684\u9891\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u5145\u5206\u5730\u5229\u7528\u5404\u79cd\u5404\u6837\u7684 frequency aliases datetime\u7c7b\u578b\u7684\u65f6\u95f4\u95f4\u9694\u3002 pd . interval_range ( start = 0 , periods = 5 , freq = 1.5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 , freq = 'W' ) pd . interval_range ( start = pd . Timedelta ( '0 days' ), periods = 3 , freq = '9H' ) IntervalIndex([(0 days 00:00:00, 0 days 09:00:00], (0 days 09:00:00, 0 days 18:00:00], (0 days 18:00:00, 1 days 03:00:00]], closed='right', dtype='interval[timedelta64[ns]]') \u6b64\u5916\uff0c closed \u53c2\u6570\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u54ea\u4e2a\u8fb9\u754c\u662f\u5305\u542b\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u95f4\u9694\u7684\u53f3\u754c\u662f\u5305\u542b\u7684\u3002 pd . interval_range ( start = 0 , end = 4 , closed = 'both' ) pd . interval_range ( start = 0 , end = 4 , closed = 'neither' ) IntervalIndex([(0, 1), (1, 2), (2, 3), (3, 4)], closed='neither', dtype='interval[int64]') 0.23.0\u7248\u672c\u52a0\u5165\u7684\u529f\u80fd \u4f7f\u7528 start , end , \u548c periods \u53ef\u4ee5\u4ece start \u5230 end \uff08\u5305\u542b\uff09\u751f\u6210\u4e00\u4e2a\u5e73\u5747\u5206\u914d\u7684\u95f4\u9694\uff0c\u5728\u8fd4\u56de IntervalIndex \u4e2d\u751f\u6210 periods \u8fd9\u4e48\u591a\u7684\u5143\u7d20\uff08\u8bd1\u8005\uff1a\u533a\u95f4\uff09\u3002 pd . interval_range ( start = 0 , end = 6 , periods = 4 ) pd . interval_range ( pd . Timestamp ( '2018-01-01' ), pd . Timestamp ( '2018-02-28' ), periods = 3 ) IntervalIndex([(2018-01-01, 2018-01-20 08:00:00], (2018-01-20 08:00:00, 2018-02-08 16:00:00], (2018-02-08 16:00:00, 2018-02-28]], closed='right', dtype='interval[datetime64[ns]]')","title":"\u751f\u6210\u4e00\u5b9a\u533a\u95f4\u5185\u7684\u95f4\u9694"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html","text":"from toolkit import H import numpy as np import pandas as pd import pprint Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 \u521b\u5efa\u7d22\u5f15 def mklbl ( prefix , n ): return [ ' %s%s ' % ( prefix , i ) for i in range ( n )] miindex = pd . MultiIndex . from_product ([ mklbl ( 'A' , 4 ), mklbl ( 'B' , 2 ), mklbl ( 'C' , 4 ), mklbl ( 'D' , 2 )]) micolumns = pd . MultiIndex . from_tuples ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) print ( miindex , ' \\n ' ) print ( micolumns , ' \\n ' ) MultiIndex([('A0', 'B0', 'C0', 'D0'), ('A0', 'B0', 'C0', 'D1'), ('A0', 'B0', 'C1', 'D0'), ('A0', 'B0', 'C1', 'D1'), ('A0', 'B0', 'C2', 'D0'), ('A0', 'B0', 'C2', 'D1'), ('A0', 'B0', 'C3', 'D0'), ('A0', 'B0', 'C3', 'D1'), ('A0', 'B1', 'C0', 'D0'), ('A0', 'B1', 'C0', 'D1'), ('A0', 'B1', 'C1', 'D0'), ('A0', 'B1', 'C1', 'D1'), ('A0', 'B1', 'C2', 'D0'), ('A0', 'B1', 'C2', 'D1'), ('A0', 'B1', 'C3', 'D0'), ('A0', 'B1', 'C3', 'D1'), ('A1', 'B0', 'C0', 'D0'), ('A1', 'B0', 'C0', 'D1'), ('A1', 'B0', 'C1', 'D0'), ('A1', 'B0', 'C1', 'D1'), ('A1', 'B0', 'C2', 'D0'), ('A1', 'B0', 'C2', 'D1'), ('A1', 'B0', 'C3', 'D0'), ('A1', 'B0', 'C3', 'D1'), ('A1', 'B1', 'C0', 'D0'), ('A1', 'B1', 'C0', 'D1'), ('A1', 'B1', 'C1', 'D0'), ('A1', 'B1', 'C1', 'D1'), ('A1', 'B1', 'C2', 'D0'), ('A1', 'B1', 'C2', 'D1'), ('A1', 'B1', 'C3', 'D0'), ('A1', 'B1', 'C3', 'D1'), ('A2', 'B0', 'C0', 'D0'), ('A2', 'B0', 'C0', 'D1'), ('A2', 'B0', 'C1', 'D0'), ('A2', 'B0', 'C1', 'D1'), ('A2', 'B0', 'C2', 'D0'), ('A2', 'B0', 'C2', 'D1'), ('A2', 'B0', 'C3', 'D0'), ('A2', 'B0', 'C3', 'D1'), ('A2', 'B1', 'C0', 'D0'), ('A2', 'B1', 'C0', 'D1'), ('A2', 'B1', 'C1', 'D0'), ('A2', 'B1', 'C1', 'D1'), ('A2', 'B1', 'C2', 'D0'), ('A2', 'B1', 'C2', 'D1'), ('A2', 'B1', 'C3', 'D0'), ('A2', 'B1', 'C3', 'D1'), ('A3', 'B0', 'C0', 'D0'), ('A3', 'B0', 'C0', 'D1'), ('A3', 'B0', 'C1', 'D0'), ('A3', 'B0', 'C1', 'D1'), ('A3', 'B0', 'C2', 'D0'), ('A3', 'B0', 'C2', 'D1'), ('A3', 'B0', 'C3', 'D0'), ('A3', 'B0', 'C3', 'D1'), ('A3', 'B1', 'C0', 'D0'), ('A3', 'B1', 'C0', 'D1'), ('A3', 'B1', 'C1', 'D0'), ('A3', 'B1', 'C1', 'D1'), ('A3', 'B1', 'C2', 'D0'), ('A3', 'B1', 'C2', 'D1'), ('A3', 'B1', 'C3', 'D0'), ('A3', 'B1', 'C3', 'D1')], ) MultiIndex([('a', 'foo'), ('a', 'bar'), ('b', 'foo'), ('b', 'bah')], names=['lvl0', 'lvl1']) \u521b\u5efa\u793a\u4f8b\u6570\u636e dfmi = pd . DataFrame ( np . arange ( len ( miindex ) * len ( micolumns )) . reshape (( len ( miindex ), len ( micolumns ))), index = miindex , columns = micolumns ) . sort_index () . sort_index ( axis = 1 ) dfmi lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237 236 239 238 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249 248 251 250 D1 253 252 255 254 [64 rows x 4 columns] \u4f7f\u7528\u5207\u7247 slice dfmi . loc [( slice ( 'A1' , 'A3' ), slice ( None ), [ 'C1' , 'C3' ]), :] dfmi . loc [ 'A1' , ( slice ( None ), 'foo' )] lvl0 a b lvl1 foo foo B0 C0 D0 64 66 D1 68 70 C1 D0 72 74 D1 76 78 C2 D0 80 82 D1 84 86 C3 D0 88 90 D1 92 94 B1 C0 D0 96 98 D1 100 102 C1 D0 104 106 D1 108 110 C2 D0 112 114 D1 116 118 C3 D0 120 122 D1 124 126 IndexSlice idx = pd . IndexSlice dfmi . loc [ idx [:, :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A0 B0 C1 D0 8 10 D1 12 14 C3 D0 24 26 D1 28 30 B1 C1 D0 40 42 D1 44 46 C3 D0 56 58 D1 60 62 A1 B0 C1 D0 72 74 D1 76 78 C3 D0 88 90 D1 92 94 B1 C1 D0 104 106 D1 108 110 C3 D0 120 122 D1 124 126 A2 B0 C1 D0 136 138 D1 140 142 C3 D0 152 154 D1 156 158 B1 C1 D0 168 170 D1 172 174 C3 D0 184 186 D1 188 190 A3 B0 C1 D0 200 202 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 \u7ed9 loc \u6216 iloc \u6307\u5b9a\u8f74\u53c2\u6570 loc \u9ed8\u8ba4\u5bf9\u884c\u8fdb\u884c\u7d22\u5f15\uff1a dfmi . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] lvl0 a b lvl1 bar foo bah foo A0 B0 C1 D0 9 8 11 10 D1 13 12 15 14 C3 D0 25 24 27 26 D1 29 28 31 30 B1 C1 D0 41 40 43 42 D1 45 44 47 46 C3 D0 57 56 59 58 D1 61 60 63 62 A1 B0 C1 D0 73 72 75 74 D1 77 76 79 78 C3 D0 89 88 91 90 D1 93 92 95 94 B1 C1 D0 105 104 107 106 D1 109 108 111 110 C3 D0 121 120 123 122 D1 125 124 127 126 A2 B0 C1 D0 137 136 139 138 D1 141 140 143 142 C3 D0 153 152 155 154 D1 157 156 159 158 B1 C1 D0 169 168 171 170 D1 173 172 175 174 C3 D0 185 184 187 186 D1 189 188 191 190 A3 B0 C1 D0 201 200 203 202 D1 205 204 207 206 C3 D0 217 216 219 218 D1 221 220 223 222 B1 C1 D0 233 232 235 234 D1 237 236 239 238 C3 D0 249 248 251 250 D1 253 252 255 254 \u53ef\u4ee5\u6307\u5b9a axis \u53c2\u6570\uff0c\u6307\u5b9a\u9700\u8981\u7d22\u5f15\u7684\u8f74\uff1a dfmi . loc ( axis = 1 )[ 'a' ] lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 C2 D0 17 16 ... ... ... A3 B1 C1 D1 237 236 C2 D0 241 240 D1 245 244 C3 D0 249 248 D1 253 252 [64 rows x 2 columns] \u4f7f\u7528 mask \u7d22\u5f15\u2014\u2014\u5e03\u5c14\u7d22\u5f15 \u5e03\u5c14\u7d22\u5f15\u7ecf\u5e38\u4f1a\u7528\u5230\uff0c\u4f8b\u5982\u60f3\u627e\u51faDataFrame\u4e2d\u5927\u4e8e\u3001\u5c0f\u4e8e\u6216\u7b49\u4e8e\u67d0\u503c\u7684\u6240\u6709\u5143\u7d20\uff1a mask = dfmi [( 'a' , 'foo' )] > 200 dfmi . loc [ idx [ mask , :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A3 B0 C1 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 \u53ef\u4ee5\u5bf9\u5e03\u5c14\u7d22\u5f15\u6267\u884c\u5e76\u3001\u6216\u3001\u975e\u8fd0\u7b97\uff0c\u4ece\u800c\u5f97\u5230\u590d\u6742\u7684\u8fc7\u6ee4\u6761\u4ef6 s = pd . Series ( range ( - 3 , 4 )) print ( s [( s < - 1 ) | ( s > 0.5 )]) print ( s [ ~ (( s < - 1 ) | ( s > 0.5 ))]) 0 -3 1 -2 4 1 5 2 6 3 dtype: int64 2 -1 3 0 dtype: int64 \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u548c map \u51fd\u6570\u53ef\u4ea7\u751f\u66f4\u590d\u6742\u7684\u6761\u4ef6\uff1a df2 = pd . DataFrame ({ 'a' : [ 'one' , 'one' , 'two' , 'three' , 'two' , 'one' , 'six' ], 'b' : [ 'x' , 'y' , 'y' , 'x' , 'y' , 'x' , 'x' ], 'c' : np . random . randn ( 7 )}) # only want 'two' or 'three' criterion = df2 [ 'a' ] . map ( lambda x : x . startswith ( 't' )) print ( df2 [ criterion ]) # equivalent but slower print ( df2 [[ x . startswith ( 't' ) for x in df2 [ 'a' ]]]) # Multiple criteria print ( df2 [ criterion & ( df2 [ 'b' ] == 'x' )]) a b c 2 two y -1.179432 3 three x 1.704307 4 two y -0.583689 a b c 2 two y -1.179432 3 three x 1.704307 4 two y -0.583689 a b c 3 three x 1.704307 isin \u65b9\u6cd5 Series\u3001DataFrame\u3001Index\u90fd\u6709 .isin \u65b9\u6cd5\u3002 .isin \u65b9\u6cd5\u63a5\u53d7\u6570\u7ec4\u6216\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219 isin \u8fd4\u56de\u4e0e\u539f\u59cbDataFrame\u5f62\u72b6\u76f8\u540c\u7684\u5e03\u5c14DataFrame\u3002 Series\u3001DataFrame\u3001Index\u90fd\u6709 .isin \u65b9\u6cd5\u3002 .isin \u65b9\u6cd5\u63a5\u53d7\u6570\u7ec4\u6216\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219 isin \u8fd4\u56de\u4e0e\u539f\u59cbDataFrame\u5f62\u72b6\u76f8\u540c\u7684\u5e03\u5c14DataFrame\u3002 df = pd . DataFrame ({ 'vals' : [ 1 , 2 , 3 , 4 ], 'ids' : [ 'a' , 'b' , 'f' , 'n' ], 'ids2' : [ 'a' , 'n' , 'c' , 'n' ]}) values = [ 'a' , 'b' , 1 , 3 ] df . isin ( values ) vals ids ids2 0 True True True 1 False True False 2 True False False 3 False False False \u6709\u65f6\u9700\u8981\u5c06\u67d0\u4e9b\u503c\u4e0e\u67d0\u4e9b\u5217\u5339\u914d\u3002\u6b64\u65f6\uff0c\u5219\u9700\u8981\u5c06dict\u4f5c\u4e3a .isin \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u8be5\u5b57\u5178\u7684\u952e\u4e3a\u5217\u6807\u7b7e\uff0c\u5176\u503c\u4e3a\u8981\u68c0\u67e5\u7684\u5143\u7d20\u5217\u8868\u3002 values = { 'ids' : [ 'a' , 'b' ], 'vals' : [ 1 , 3 ]} df . isin ( values ) vals ids ids2 0 True True False 1 False True False 2 True False False 3 False False False \u91cd\u65b0\u8d4b\u503c df2 = dfmi . copy () df2 . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] = - 10 df2 df2 = dfmi . copy () df2 . loc [ idx [:, :, [ 'C1' , 'C3' ]], :] = df2 * 1000 df2 lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9000 8000 11000 10000 D1 13000 12000 15000 14000 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237000 236000 239000 238000 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249000 248000 251000 250000 D1 253000 252000 255000 254000 [64 rows x 4 columns] \u4f7f\u7528 .loc/[] \u4e3a\u8be5\u8f74\u4e0d\u5b58\u5728\u7684\u6807\u7b7e\u8d4b\u503c\u65f6\uff0c\u53ef\u4ee5\u7ed9Series\u6216DataFrame\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e\u884c\u6216\u6807\u7b7e\u5217\uff0c\u5373\u5bf9\u76ee\u6807\u5bf9\u8c61\u8fdb\u884c\u653e\u5927\u64cd\u4f5c\u3002 df2 = pd . DataFrame ( np . arange ( 12 ) . reshape ( 3 , 4 ), columns = [ 'a' , 'b' , 'c' , 'd' ]) df2 [ 'z' ] = [ 0 , 0 , 0 ] df2 . loc [:, 'y' ] = [ 0 , 0 , 0 ] df2 a b c d z y 0 0 1 2 3 0 0 1 4 5 6 7 0 0 2 8 9 10 11 0 0 .iloc \u4e5f\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c\uff0c\u4f46\u4e0d\u80fd\u6267\u884c\u653e\u5927\u64cd\u4f5c\u3002 try : df2 . iloc [ 10 , :] = 10 except IndexError as e : print ( e ) iloc cannot enlarge its target object at\\iat \u65b9\u6cd5\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u83b7\u53d6\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u91cd\u65b0\u8d4b\u503c\u3002\u4e0e loc\\iloc \u7c7b\u4f3c\uff0c at \u652f\u6301\u653e\u5927\u64cd\u4f5c\uff0c iat \u5219\u4e0d\u652f\u6301\u3002 df2 . at [ 0 , 'x' ] = 40 df2 a b c d z y x 0 0 1 2 3 0 0 40.0 1 4 5 6 7 0 0 NaN 2 8 9 10 11 0 0 NaN xs\\take \u65b9\u6cd5\u5219\u53ea\u80fd\u7528\u4e8e\u83b7\u53d6\u503c\uff0c\u4e0d\u80fd\u7528\u4e8e\u91cd\u65b0\u8d4b\u503c\u3002 \u9009\u53d6\u6a2a\u622a\u9762\u6570\u636e\u2014\u2014 xs \u65b9\u6cd5 pd.DataFrame.xs(self, key, axis=0, level=None, drop_level=True) DataFrame \u7684 xs() \u65b9\u6cd5\u53ef\u4ee5\u65b9\u4fbf\u5730\u57280\u8f74\u62161\u8f74\u7684\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u67d0\u4e00\u4e2a\u5c42\u7ea7\u8fdb\u884c\u6570\u636e\u7684\u9009\u53d6\u3002 xs \u65b9\u6cd5\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u4f5c\u7528\u4e0e\u5355\u5c42\u7d22\u5f15\uff0c\u4f46\u4e00\u822c\u4e0d\u4f1a\u8fd9\u6837\u4f7f\u7528\u3002\u4e0e loc \u3001 iloc \u65b9\u6cd5\u4e0d\u540c\uff0c xs \u65b9\u6cd5\u53ea\u8fd4\u56de\u503c\uff0c\u4e0d\u80fd\u7528\u4e8e\u8d4b\u503c\u3002 df = dfmi . loc [( \"A0\" , \"B0\" , [ \"C0\" , \"C1\" ])] df lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 .xs \u65b9\u6cd5\u9ed8\u8ba4 axis=0 \uff1a df . xs ( 'bar' , level = 'lvl1' , axis = 1 ) lvl0 a A0 B0 C0 D0 1 D1 5 C1 D0 9 D1 13 df . xs (( 'a' , 'bar' ), level = ( 'lvl0' , 'lvl1' ), axis = 1 ) lvl0 a lvl1 bar A0 B0 C0 D0 1 D1 5 C1 D0 9 D1 13 .xs \u65b9\u6cd5\u9ed8\u8ba4 drop_level=False \uff1a df . xs ( 'a' , level = 'lvl0' , axis = 1 , drop_level = False ) lvl0 a lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 df . xs ( 'a' , level = 'lvl0' , axis = 1 , drop_level = True ) lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 take \u65b9\u6cd5 pd.DataFrame.take(self, indices, axis=0, is_copy=None, kwargs) \u4e0eNumPy\u7684 ndarrays \u76f8\u4f3c\uff0cpandas\u7684 Index \u3001 Series \u548c DataFrame \u4e5f\u63d0\u4f9b take() \u65b9\u6cd5\u3002\u5b83\u53ef\u4ee5\u6cbf\u7740\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u7d22\u5f15\u53d6\u56de\u6240\u6709\u7684\u5143\u7d20\u3002 take \u65b9\u6cd5\u4e0d\u4f7f\u7528\u6807\u7b7e\u7d22\u5f15\uff0c\u8fd9\u610f\u5473\u7740\u7ed9\u5b9a\u7684\u7d22\u5f15\u5fc5\u987b\u662f\u6307\u660e\u5143\u7d20\u4f4d\u7f6e\u7684\u6574\u6570\u7d22\u5f15\u3002\u8fd9\u4e2a\u6574\u6570\u7d22\u5f15\u5fc5\u987b\u662f\u4e00\u7ef4\u7684array-like\u3002 take \u4e5f\u53ef\u4ee5\u63a5\u53d7\u8d1f\u6574\u6570\uff0c\u4f5c\u4e3a\u76f8\u5bf9\u4e8e\u7ed3\u5c3e\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 # Index index = pd . Index ( np . random . randint ( 0 , 1000 , 10 )) print ( index ) positions = [ 0 , 9 , 3 ] print ( index [ positions ]) print ( index . take ( positions )) Int64Index([556, 452, 592, 419, 940, 579, 969, 879, 976, 951], dtype='int64') Int64Index([556, 951, 419], dtype='int64') Int64Index([556, 951, 419], dtype='int64') # Series ser = pd . Series ( np . random . randn ( 10 )) print ( ser . iloc [ positions ]) print ( ser . take ( positions )) 0 -0.520903 9 -0.655171 3 -0.223594 dtype: float64 0 -0.520903 9 -0.655171 3 -0.223594 dtype: float64 # DataFrame frm = pd . DataFrame ( np . random . randn ( 5 , 3 )) print ( frm ) print ( frm . take ([ 1 , 4 , 3 ])) print ( frm . take ([ 0 , 2 ], axis = 1 )) 0 1 2 0 0.587019 0.934269 0.600181 1 -1.217270 0.263345 -0.079160 2 -0.434217 0.505844 -1.224728 3 -2.054628 -0.503028 1.157497 4 -0.836121 -0.321727 -0.802316 0 1 2 1 -1.217270 0.263345 -0.079160 4 -0.836121 -0.321727 -0.802316 3 -2.054628 -0.503028 1.157497 0 2 0 0.587019 0.600181 1 -1.217270 -0.079160 2 -0.434217 -1.224728 3 -2.054628 1.157497 4 -0.836121 -0.802316 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cpandas\u5bf9\u8c61\u7684 take \u65b9\u6cd5\u5e76\u4e0d\u4f1a\u6b63\u5e38\u5730\u5de5\u4f5c\u5728\u5e03\u5c14\u7d22\u5f15\u4e0a\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u5207\u610f\u5916\u7684\u7ed3\u679c\u3002 arr = np . arange ( 10 ) print ( arr . take ([ False , False , True , True ])) [0 0 1 1] ser = pd . Series ( np . arange ( 10 )) print ( ser . take ([ False , False , True , True ])) 0 0 0 0 1 1 1 1 dtype: int32 \u6700\u540e\uff0c\u5173\u4e8e\u6027\u80fd\u65b9\u9762\u7684\u4e00\u4e2a\u5c0f\u5efa\u8bae\uff0c\u56e0\u4e3a take \u65b9\u6cd5\u5904\u7406\u7684\u662f\u4e00\u4e2a\u8303\u56f4\u66f4\u7a84\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u4f1a\u6bd4\u82b1\u5f0f\u7d22\u5f15\uff08fancy indexing\uff09\u7684\u901f\u5ea6\u5feb\u5f88\u591a\u3002 arr = np . random . randn ( 10000 , 5 ) indexer = np . arange ( 10000 ) np . random . shuffle ( indexer ) % timeit arr [ indexer ] % timeit arr . take ( indexer , axis = 0 ) 538 \u00b5s \u00b1 74.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 206 \u00b5s \u00b1 39.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) ser = pd . Series ( arr [:, 0 ]) % timeit ser . iloc [ indexer ] % timeit ser . take ( indexer ) 396 \u00b5s \u00b1 62.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 334 \u00b5s \u00b1 38.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)","title":"9.5.\u9009\u62e9\u6570\u636e\u8fdb\u9636"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#_1","text":"def mklbl ( prefix , n ): return [ ' %s%s ' % ( prefix , i ) for i in range ( n )] miindex = pd . MultiIndex . from_product ([ mklbl ( 'A' , 4 ), mklbl ( 'B' , 2 ), mklbl ( 'C' , 4 ), mklbl ( 'D' , 2 )]) micolumns = pd . MultiIndex . from_tuples ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) print ( miindex , ' \\n ' ) print ( micolumns , ' \\n ' ) MultiIndex([('A0', 'B0', 'C0', 'D0'), ('A0', 'B0', 'C0', 'D1'), ('A0', 'B0', 'C1', 'D0'), ('A0', 'B0', 'C1', 'D1'), ('A0', 'B0', 'C2', 'D0'), ('A0', 'B0', 'C2', 'D1'), ('A0', 'B0', 'C3', 'D0'), ('A0', 'B0', 'C3', 'D1'), ('A0', 'B1', 'C0', 'D0'), ('A0', 'B1', 'C0', 'D1'), ('A0', 'B1', 'C1', 'D0'), ('A0', 'B1', 'C1', 'D1'), ('A0', 'B1', 'C2', 'D0'), ('A0', 'B1', 'C2', 'D1'), ('A0', 'B1', 'C3', 'D0'), ('A0', 'B1', 'C3', 'D1'), ('A1', 'B0', 'C0', 'D0'), ('A1', 'B0', 'C0', 'D1'), ('A1', 'B0', 'C1', 'D0'), ('A1', 'B0', 'C1', 'D1'), ('A1', 'B0', 'C2', 'D0'), ('A1', 'B0', 'C2', 'D1'), ('A1', 'B0', 'C3', 'D0'), ('A1', 'B0', 'C3', 'D1'), ('A1', 'B1', 'C0', 'D0'), ('A1', 'B1', 'C0', 'D1'), ('A1', 'B1', 'C1', 'D0'), ('A1', 'B1', 'C1', 'D1'), ('A1', 'B1', 'C2', 'D0'), ('A1', 'B1', 'C2', 'D1'), ('A1', 'B1', 'C3', 'D0'), ('A1', 'B1', 'C3', 'D1'), ('A2', 'B0', 'C0', 'D0'), ('A2', 'B0', 'C0', 'D1'), ('A2', 'B0', 'C1', 'D0'), ('A2', 'B0', 'C1', 'D1'), ('A2', 'B0', 'C2', 'D0'), ('A2', 'B0', 'C2', 'D1'), ('A2', 'B0', 'C3', 'D0'), ('A2', 'B0', 'C3', 'D1'), ('A2', 'B1', 'C0', 'D0'), ('A2', 'B1', 'C0', 'D1'), ('A2', 'B1', 'C1', 'D0'), ('A2', 'B1', 'C1', 'D1'), ('A2', 'B1', 'C2', 'D0'), ('A2', 'B1', 'C2', 'D1'), ('A2', 'B1', 'C3', 'D0'), ('A2', 'B1', 'C3', 'D1'), ('A3', 'B0', 'C0', 'D0'), ('A3', 'B0', 'C0', 'D1'), ('A3', 'B0', 'C1', 'D0'), ('A3', 'B0', 'C1', 'D1'), ('A3', 'B0', 'C2', 'D0'), ('A3', 'B0', 'C2', 'D1'), ('A3', 'B0', 'C3', 'D0'), ('A3', 'B0', 'C3', 'D1'), ('A3', 'B1', 'C0', 'D0'), ('A3', 'B1', 'C0', 'D1'), ('A3', 'B1', 'C1', 'D0'), ('A3', 'B1', 'C1', 'D1'), ('A3', 'B1', 'C2', 'D0'), ('A3', 'B1', 'C2', 'D1'), ('A3', 'B1', 'C3', 'D0'), ('A3', 'B1', 'C3', 'D1')], ) MultiIndex([('a', 'foo'), ('a', 'bar'), ('b', 'foo'), ('b', 'bah')], names=['lvl0', 'lvl1'])","title":"\u521b\u5efa\u7d22\u5f15"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#_2","text":"dfmi = pd . DataFrame ( np . arange ( len ( miindex ) * len ( micolumns )) . reshape (( len ( miindex ), len ( micolumns ))), index = miindex , columns = micolumns ) . sort_index () . sort_index ( axis = 1 ) dfmi lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237 236 239 238 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249 248 251 250 D1 253 252 255 254 [64 rows x 4 columns]","title":"\u521b\u5efa\u793a\u4f8b\u6570\u636e"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#_3","text":"","title":"\u4f7f\u7528\u5207\u7247"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#slice","text":"dfmi . loc [( slice ( 'A1' , 'A3' ), slice ( None ), [ 'C1' , 'C3' ]), :] dfmi . loc [ 'A1' , ( slice ( None ), 'foo' )] lvl0 a b lvl1 foo foo B0 C0 D0 64 66 D1 68 70 C1 D0 72 74 D1 76 78 C2 D0 80 82 D1 84 86 C3 D0 88 90 D1 92 94 B1 C0 D0 96 98 D1 100 102 C1 D0 104 106 D1 108 110 C2 D0 112 114 D1 116 118 C3 D0 120 122 D1 124 126","title":"slice"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#indexslice","text":"idx = pd . IndexSlice dfmi . loc [ idx [:, :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A0 B0 C1 D0 8 10 D1 12 14 C3 D0 24 26 D1 28 30 B1 C1 D0 40 42 D1 44 46 C3 D0 56 58 D1 60 62 A1 B0 C1 D0 72 74 D1 76 78 C3 D0 88 90 D1 92 94 B1 C1 D0 104 106 D1 108 110 C3 D0 120 122 D1 124 126 A2 B0 C1 D0 136 138 D1 140 142 C3 D0 152 154 D1 156 158 B1 C1 D0 168 170 D1 172 174 C3 D0 184 186 D1 188 190 A3 B0 C1 D0 200 202 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254","title":"IndexSlice"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#lociloc","text":"loc \u9ed8\u8ba4\u5bf9\u884c\u8fdb\u884c\u7d22\u5f15\uff1a dfmi . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] lvl0 a b lvl1 bar foo bah foo A0 B0 C1 D0 9 8 11 10 D1 13 12 15 14 C3 D0 25 24 27 26 D1 29 28 31 30 B1 C1 D0 41 40 43 42 D1 45 44 47 46 C3 D0 57 56 59 58 D1 61 60 63 62 A1 B0 C1 D0 73 72 75 74 D1 77 76 79 78 C3 D0 89 88 91 90 D1 93 92 95 94 B1 C1 D0 105 104 107 106 D1 109 108 111 110 C3 D0 121 120 123 122 D1 125 124 127 126 A2 B0 C1 D0 137 136 139 138 D1 141 140 143 142 C3 D0 153 152 155 154 D1 157 156 159 158 B1 C1 D0 169 168 171 170 D1 173 172 175 174 C3 D0 185 184 187 186 D1 189 188 191 190 A3 B0 C1 D0 201 200 203 202 D1 205 204 207 206 C3 D0 217 216 219 218 D1 221 220 223 222 B1 C1 D0 233 232 235 234 D1 237 236 239 238 C3 D0 249 248 251 250 D1 253 252 255 254 \u53ef\u4ee5\u6307\u5b9a axis \u53c2\u6570\uff0c\u6307\u5b9a\u9700\u8981\u7d22\u5f15\u7684\u8f74\uff1a dfmi . loc ( axis = 1 )[ 'a' ] lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 C2 D0 17 16 ... ... ... A3 B1 C1 D1 237 236 C2 D0 241 240 D1 245 244 C3 D0 249 248 D1 253 252 [64 rows x 2 columns]","title":"\u7ed9 loc\u6216iloc \u6307\u5b9a\u8f74\u53c2\u6570"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#mask","text":"\u5e03\u5c14\u7d22\u5f15\u7ecf\u5e38\u4f1a\u7528\u5230\uff0c\u4f8b\u5982\u60f3\u627e\u51faDataFrame\u4e2d\u5927\u4e8e\u3001\u5c0f\u4e8e\u6216\u7b49\u4e8e\u67d0\u503c\u7684\u6240\u6709\u5143\u7d20\uff1a mask = dfmi [( 'a' , 'foo' )] > 200 dfmi . loc [ idx [ mask , :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A3 B0 C1 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 \u53ef\u4ee5\u5bf9\u5e03\u5c14\u7d22\u5f15\u6267\u884c\u5e76\u3001\u6216\u3001\u975e\u8fd0\u7b97\uff0c\u4ece\u800c\u5f97\u5230\u590d\u6742\u7684\u8fc7\u6ee4\u6761\u4ef6 s = pd . Series ( range ( - 3 , 4 )) print ( s [( s < - 1 ) | ( s > 0.5 )]) print ( s [ ~ (( s < - 1 ) | ( s > 0.5 ))]) 0 -3 1 -2 4 1 5 2 6 3 dtype: int64 2 -1 3 0 dtype: int64 \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u548c map \u51fd\u6570\u53ef\u4ea7\u751f\u66f4\u590d\u6742\u7684\u6761\u4ef6\uff1a df2 = pd . DataFrame ({ 'a' : [ 'one' , 'one' , 'two' , 'three' , 'two' , 'one' , 'six' ], 'b' : [ 'x' , 'y' , 'y' , 'x' , 'y' , 'x' , 'x' ], 'c' : np . random . randn ( 7 )}) # only want 'two' or 'three' criterion = df2 [ 'a' ] . map ( lambda x : x . startswith ( 't' )) print ( df2 [ criterion ]) # equivalent but slower print ( df2 [[ x . startswith ( 't' ) for x in df2 [ 'a' ]]]) # Multiple criteria print ( df2 [ criterion & ( df2 [ 'b' ] == 'x' )]) a b c 2 two y -1.179432 3 three x 1.704307 4 two y -0.583689 a b c 2 two y -1.179432 3 three x 1.704307 4 two y -0.583689 a b c 3 three x 1.704307","title":"\u4f7f\u7528 mask \u7d22\u5f15\u2014\u2014\u5e03\u5c14\u7d22\u5f15"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#isin","text":"Series\u3001DataFrame\u3001Index\u90fd\u6709 .isin \u65b9\u6cd5\u3002 .isin \u65b9\u6cd5\u63a5\u53d7\u6570\u7ec4\u6216\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219 isin \u8fd4\u56de\u4e0e\u539f\u59cbDataFrame\u5f62\u72b6\u76f8\u540c\u7684\u5e03\u5c14DataFrame\u3002 Series\u3001DataFrame\u3001Index\u90fd\u6709 .isin \u65b9\u6cd5\u3002 .isin \u65b9\u6cd5\u63a5\u53d7\u6570\u7ec4\u6216\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5219 isin \u8fd4\u56de\u4e0e\u539f\u59cbDataFrame\u5f62\u72b6\u76f8\u540c\u7684\u5e03\u5c14DataFrame\u3002 df = pd . DataFrame ({ 'vals' : [ 1 , 2 , 3 , 4 ], 'ids' : [ 'a' , 'b' , 'f' , 'n' ], 'ids2' : [ 'a' , 'n' , 'c' , 'n' ]}) values = [ 'a' , 'b' , 1 , 3 ] df . isin ( values ) vals ids ids2 0 True True True 1 False True False 2 True False False 3 False False False \u6709\u65f6\u9700\u8981\u5c06\u67d0\u4e9b\u503c\u4e0e\u67d0\u4e9b\u5217\u5339\u914d\u3002\u6b64\u65f6\uff0c\u5219\u9700\u8981\u5c06dict\u4f5c\u4e3a .isin \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u8be5\u5b57\u5178\u7684\u952e\u4e3a\u5217\u6807\u7b7e\uff0c\u5176\u503c\u4e3a\u8981\u68c0\u67e5\u7684\u5143\u7d20\u5217\u8868\u3002 values = { 'ids' : [ 'a' , 'b' ], 'vals' : [ 1 , 3 ]} df . isin ( values ) vals ids ids2 0 True True False 1 False True False 2 True False False 3 False False False","title":"isin\u65b9\u6cd5"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#_4","text":"df2 = dfmi . copy () df2 . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] = - 10 df2 df2 = dfmi . copy () df2 . loc [ idx [:, :, [ 'C1' , 'C3' ]], :] = df2 * 1000 df2 lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9000 8000 11000 10000 D1 13000 12000 15000 14000 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237000 236000 239000 238000 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249000 248000 251000 250000 D1 253000 252000 255000 254000 [64 rows x 4 columns] \u4f7f\u7528 .loc/[] \u4e3a\u8be5\u8f74\u4e0d\u5b58\u5728\u7684\u6807\u7b7e\u8d4b\u503c\u65f6\uff0c\u53ef\u4ee5\u7ed9Series\u6216DataFrame\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e\u884c\u6216\u6807\u7b7e\u5217\uff0c\u5373\u5bf9\u76ee\u6807\u5bf9\u8c61\u8fdb\u884c\u653e\u5927\u64cd\u4f5c\u3002 df2 = pd . DataFrame ( np . arange ( 12 ) . reshape ( 3 , 4 ), columns = [ 'a' , 'b' , 'c' , 'd' ]) df2 [ 'z' ] = [ 0 , 0 , 0 ] df2 . loc [:, 'y' ] = [ 0 , 0 , 0 ] df2 a b c d z y 0 0 1 2 3 0 0 1 4 5 6 7 0 0 2 8 9 10 11 0 0 .iloc \u4e5f\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c\uff0c\u4f46\u4e0d\u80fd\u6267\u884c\u653e\u5927\u64cd\u4f5c\u3002 try : df2 . iloc [ 10 , :] = 10 except IndexError as e : print ( e ) iloc cannot enlarge its target object at\\iat \u65b9\u6cd5\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u83b7\u53d6\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u91cd\u65b0\u8d4b\u503c\u3002\u4e0e loc\\iloc \u7c7b\u4f3c\uff0c at \u652f\u6301\u653e\u5927\u64cd\u4f5c\uff0c iat \u5219\u4e0d\u652f\u6301\u3002 df2 . at [ 0 , 'x' ] = 40 df2 a b c d z y x 0 0 1 2 3 0 0 40.0 1 4 5 6 7 0 0 NaN 2 8 9 10 11 0 0 NaN xs\\take \u65b9\u6cd5\u5219\u53ea\u80fd\u7528\u4e8e\u83b7\u53d6\u503c\uff0c\u4e0d\u80fd\u7528\u4e8e\u91cd\u65b0\u8d4b\u503c\u3002","title":"\u91cd\u65b0\u8d4b\u503c"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#xs","text":"pd.DataFrame.xs(self, key, axis=0, level=None, drop_level=True) DataFrame \u7684 xs() \u65b9\u6cd5\u53ef\u4ee5\u65b9\u4fbf\u5730\u57280\u8f74\u62161\u8f74\u7684\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u67d0\u4e00\u4e2a\u5c42\u7ea7\u8fdb\u884c\u6570\u636e\u7684\u9009\u53d6\u3002 xs \u65b9\u6cd5\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u4f5c\u7528\u4e0e\u5355\u5c42\u7d22\u5f15\uff0c\u4f46\u4e00\u822c\u4e0d\u4f1a\u8fd9\u6837\u4f7f\u7528\u3002\u4e0e loc \u3001 iloc \u65b9\u6cd5\u4e0d\u540c\uff0c xs \u65b9\u6cd5\u53ea\u8fd4\u56de\u503c\uff0c\u4e0d\u80fd\u7528\u4e8e\u8d4b\u503c\u3002 df = dfmi . loc [( \"A0\" , \"B0\" , [ \"C0\" , \"C1\" ])] df lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 .xs \u65b9\u6cd5\u9ed8\u8ba4 axis=0 \uff1a df . xs ( 'bar' , level = 'lvl1' , axis = 1 ) lvl0 a A0 B0 C0 D0 1 D1 5 C1 D0 9 D1 13 df . xs (( 'a' , 'bar' ), level = ( 'lvl0' , 'lvl1' ), axis = 1 ) lvl0 a lvl1 bar A0 B0 C0 D0 1 D1 5 C1 D0 9 D1 13 .xs \u65b9\u6cd5\u9ed8\u8ba4 drop_level=False \uff1a df . xs ( 'a' , level = 'lvl0' , axis = 1 , drop_level = False ) lvl0 a lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 df . xs ( 'a' , level = 'lvl0' , axis = 1 , drop_level = True ) lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12","title":"\u9009\u53d6\u6a2a\u622a\u9762\u6570\u636e\u2014\u2014xs\u65b9\u6cd5"},{"location":"pandas/9.5.%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E8%BF%9B%E9%98%B6.html#take","text":"pd.DataFrame.take(self, indices, axis=0, is_copy=None, kwargs) \u4e0eNumPy\u7684 ndarrays \u76f8\u4f3c\uff0cpandas\u7684 Index \u3001 Series \u548c DataFrame \u4e5f\u63d0\u4f9b take() \u65b9\u6cd5\u3002\u5b83\u53ef\u4ee5\u6cbf\u7740\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u7d22\u5f15\u53d6\u56de\u6240\u6709\u7684\u5143\u7d20\u3002 take \u65b9\u6cd5\u4e0d\u4f7f\u7528\u6807\u7b7e\u7d22\u5f15\uff0c\u8fd9\u610f\u5473\u7740\u7ed9\u5b9a\u7684\u7d22\u5f15\u5fc5\u987b\u662f\u6307\u660e\u5143\u7d20\u4f4d\u7f6e\u7684\u6574\u6570\u7d22\u5f15\u3002\u8fd9\u4e2a\u6574\u6570\u7d22\u5f15\u5fc5\u987b\u662f\u4e00\u7ef4\u7684array-like\u3002 take \u4e5f\u53ef\u4ee5\u63a5\u53d7\u8d1f\u6574\u6570\uff0c\u4f5c\u4e3a\u76f8\u5bf9\u4e8e\u7ed3\u5c3e\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 # Index index = pd . Index ( np . random . randint ( 0 , 1000 , 10 )) print ( index ) positions = [ 0 , 9 , 3 ] print ( index [ positions ]) print ( index . take ( positions )) Int64Index([556, 452, 592, 419, 940, 579, 969, 879, 976, 951], dtype='int64') Int64Index([556, 951, 419], dtype='int64') Int64Index([556, 951, 419], dtype='int64') # Series ser = pd . Series ( np . random . randn ( 10 )) print ( ser . iloc [ positions ]) print ( ser . take ( positions )) 0 -0.520903 9 -0.655171 3 -0.223594 dtype: float64 0 -0.520903 9 -0.655171 3 -0.223594 dtype: float64 # DataFrame frm = pd . DataFrame ( np . random . randn ( 5 , 3 )) print ( frm ) print ( frm . take ([ 1 , 4 , 3 ])) print ( frm . take ([ 0 , 2 ], axis = 1 )) 0 1 2 0 0.587019 0.934269 0.600181 1 -1.217270 0.263345 -0.079160 2 -0.434217 0.505844 -1.224728 3 -2.054628 -0.503028 1.157497 4 -0.836121 -0.321727 -0.802316 0 1 2 1 -1.217270 0.263345 -0.079160 4 -0.836121 -0.321727 -0.802316 3 -2.054628 -0.503028 1.157497 0 2 0 0.587019 0.600181 1 -1.217270 -0.079160 2 -0.434217 -1.224728 3 -2.054628 1.157497 4 -0.836121 -0.802316 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cpandas\u5bf9\u8c61\u7684 take \u65b9\u6cd5\u5e76\u4e0d\u4f1a\u6b63\u5e38\u5730\u5de5\u4f5c\u5728\u5e03\u5c14\u7d22\u5f15\u4e0a\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u5207\u610f\u5916\u7684\u7ed3\u679c\u3002 arr = np . arange ( 10 ) print ( arr . take ([ False , False , True , True ])) [0 0 1 1] ser = pd . Series ( np . arange ( 10 )) print ( ser . take ([ False , False , True , True ])) 0 0 0 0 1 1 1 1 dtype: int32 \u6700\u540e\uff0c\u5173\u4e8e\u6027\u80fd\u65b9\u9762\u7684\u4e00\u4e2a\u5c0f\u5efa\u8bae\uff0c\u56e0\u4e3a take \u65b9\u6cd5\u5904\u7406\u7684\u662f\u4e00\u4e2a\u8303\u56f4\u66f4\u7a84\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u4f1a\u6bd4\u82b1\u5f0f\u7d22\u5f15\uff08fancy indexing\uff09\u7684\u901f\u5ea6\u5feb\u5f88\u591a\u3002 arr = np . random . randn ( 10000 , 5 ) indexer = np . arange ( 10000 ) np . random . shuffle ( indexer ) % timeit arr [ indexer ] % timeit arr . take ( indexer , axis = 0 ) 538 \u00b5s \u00b1 74.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 206 \u00b5s \u00b1 39.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) ser = pd . Series ( arr [:, 0 ]) % timeit ser . iloc [ indexer ] % timeit ser . take ( indexer ) 396 \u00b5s \u00b1 62.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 334 \u00b5s \u00b1 38.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)","title":"take\u65b9\u6cd5"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html","text":"from toolkit import H import pandas as pd from pandas import DataFrame , Series import numpy as np Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 \u7d22\u5f15\u5bf9\u8c61\u7684\u65b9\u6cd5 tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) print ( index ) MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) .levels \u4e3a property \u5c5e\u6027\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a FrozenList \uff08\u4e0d\u53ef\u53d8\u5217\u8868\uff09\uff0c\u5217\u8868\u4e2d\u5b58\u50a8\u6bcf\u4e00\u7ea7\u7684 label \uff08\u4e5f\u5c31\u662f\u521b\u5efa MultiIndex \u65f6\u4f20\u5165\u7684 levels \u53c2\u6570\uff09\u3002 index . levels FrozenList([['bar', 'baz', 'foo', 'qux'], ['one', 'two']]) .get_level_values(level) \uff1a\u8fd4\u56de\u6307\u5b9a level \u7684 Index \uff0c\u7528\u4e8e MultiIndex \u3002 print ( index . get_level_values ( 0 ), \" \\n \" ) print ( index . get_level_values ( 1 ), \" \\n \" ) print ( index . get_level_values ( 'second' )) Index(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='object', name='first') Index(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='object', name='second') Index(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='object', name='second') df = pd . DataFrame ( np . random . randn ( 6 , 6 ), index = index [: 6 ], columns = index [: 6 ]) df . columns . levels # original MultiIndex df [[ 'foo' , 'qux' ]] . columns . levels # sliced df [[ 'foo' , 'qux' ]] . columns . to_numpy () # for a specific level df [[ 'foo' , 'qux' ]] . columns . get_level_values ( 0 ) Index(['foo', 'foo'], dtype='object', name='first') new_mi = df [[ 'foo' , 'qux' ]] . columns . remove_unused_levels () new_mi . levels FrozenList([['foo'], ['one', 'two']]) \u7d22\u5f15\u91cd\u8d4b\u503c\u3001\u7d22\u5f15\u5bf9\u9f50 level \u53c2\u6570\u5df2\u7ecf\u88ab\u52a0\u5165\u5230pandas\u5bf9\u8c61\u4e2d\u7684 reindex() \u548c align() \u65b9\u6cd5\u4e2d\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u6cbf\u7740\u4e00\u4e2a\u5c42\u7ea7\u6765\u5e7f\u64ad\u503c\uff08broadcast values\uff09\u3002\u4f8b\u5982\uff1a \u521b\u5efa\u793a\u4f8b df \uff1a midx = pd . MultiIndex ( levels = [[ 'zero' , 'one' ], [ 'x' , 'y' ]], codes = [[ 1 , 1 , 0 , 0 ], [ 1 , 0 , 1 , 0 ]]) df = pd . DataFrame ( np . random . randn ( 4 , 2 ), index = midx ) df 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 \u521b\u5efa\u793a\u4f8b df2 \uff1a df2 = df . mean ( level = 0 ) df2 0 1 one 1.014978 -0.954850 zero 0.078708 -0.195553 df2 . reindex ( df . index , level = 0 ) 0 1 one y 1.014978 -0.954850 x 1.014978 -0.954850 zero y 0.078708 -0.195553 x 0.078708 -0.195553 # aligning df_aligned , df2_aligned = df . align ( df2 , level = 0 ) print ( df_aligned , \" \\n \" ) print ( df2_aligned ) 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 0 1 one y 1.014978 -0.954850 x 1.014978 -0.954850 zero y 0.078708 -0.195553 x 0.078708 -0.195553 reindex \u65b9\u6cd5\u53c2\u6570 DataFrame.reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None) index \uff1a array-like . \u7ed9\u51fa\u4e86\u65b0\u7684 index \u7684 label columns \uff1a array-like . \u7ed9\u51fa\u4e86\u65b0\u7684 columns \u7684 label method \uff1a\u5f53\u65b0\u7684 label \u7684\u503c\u7f3a\u5931\u65f6\uff0c\u5982\u4f55\u5904\u7406\u3002\u53c2\u6570\u503c\u53ef\u4ee5\u4e3a\uff1a None \uff1a\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u7f3a\u5931\u5730\u65b9\u586b\u5145 NaN 'backfill'/'bfill' \uff1a\u7528\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u540e\u5411\u586b\u5145\uff09 'pad'/'ffill' \uff1a\u7528\u4e0a\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u524d\u5411\u586b\u5145\uff09 'nearest' \uff1a\u7528\u6700\u8fd1\u7684\u53ef\u7528\u503c\u586b\u5145\u8be5\u7a7a\u7f3a copy \uff1a\u5e03\u5c14\u503c. \u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Series \u5bf9\u8c61\uff08\u5373\u4f7f\u4f20\u5165\u7684 index \u4e0e\u539f\u6765\u7684 index \u76f8\u540c\uff09 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 name \uff0c\u5728 MultiIndex \u7684\u6307\u5b9a\u7ea7\u522b\u4e0a\u5339\u914d\u7b80\u5355\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u6307\u5b9a\u7f3a\u5931\u503c\u7684\u586b\u5145\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a NaN \uff08\u5982\u679c\u8be5\u53c2\u6570\u4e0e method \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u4ee5 method \u4e3a\u4e3b\uff09 limit \uff1a\u6574\u6570. \u6307\u5b9a\u524d\u5411/\u540e\u5411\u586b\u5145\u65f6\uff1a\u5982\u679c\u6709\u8fde\u7eed\u7684 k \u4e2a NaN \uff0c\u5219\u53ea\u586b\u5145\u5176\u4e2d limit \u4e2a\u3002\u5b83\u4e0e method \u914d\u5408 tolerance \uff1a\u6574\u6570. \u7528\u4e8e\u7ed9\u51fa\u5728\u4e0d\u5339\u914d\u65f6\uff0c\u8fde\u7eed\u91c7\u7528\u524d\u5411/\u540e\u5411/\u6700\u8fd1\u90bb\u5339\u914d\u7684\u8de8\u5ea6\u7684\u6700\u5927\u503c\u3002\u5b83\u4e0e method \u914d\u5408 \u4ea4\u6362\u7d22\u5f15\u5c42\u7ea7 swaplevel \u65b9\u6cd5 DataFrame.swaplevel(self, i=-2, j=-1, axis=0) swaplevel() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u5c42\u7ea7 print ( df , \" \\n \" ) print ( df . swaplevel ( 0 , 1 , axis = 0 )) 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 0 1 y one 0.969419 -1.461856 x one 1.060536 -0.447844 y zero -1.034162 -0.611150 x zero 1.191578 0.220043 reorder_levels \u65b9\u6cd5 DataFrame.reorder_levels(self, order, axis=0) reorder_levels() \u662f\u4e00\u4e2a\u66f4\u4e00\u822c\u5316\u7684 swaplevel \u65b9\u6cd5\uff0c\u5141\u8bb8\u60a8\u7528\u7b80\u5355\u7684\u4e00\u6b65\u6765\u91cd\u6392\u5217\u7d22\u5f15\u7684\u5c42\u7ea7\uff1a print ( df , \" \\n \" ) print ( df . reorder_levels ([ 1 , 0 ], axis = 0 )) 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 0 1 y one 0.969419 -1.461856 x one 1.060536 -0.447844 y zero -1.034162 -0.611150 x zero 1.191578 0.220043 \u91cd\u547d\u540d\u7d22\u5f15\uff1a rename DataFrame.rename(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors='ignore') rename() \u65b9\u6cd5\u7528\u6765\u91cd\u547d\u540d\u591a\u5c42\u7d22\u5f15\u3002 renames \u7684 index \u6216 columns \u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u800c\u4ec5\u4ec5\u91cd\u547d\u540d\u60a8\u5e0c\u671b\u66f4\u6539\u540d\u5b57\u7684\u884c\u6216\u5217\uff1a df . rename ( columns = { 0 : \"col0\" , 1 : \"col1\" }) col0 col1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 df . rename ( index = { \"one\" : \"two\" , \"y\" : \"z\" }) 0 1 two z 0.969419 -1.461856 x 1.060536 -0.447844 zero z -1.034162 -0.611150 x 1.191578 0.220043 \u91cd\u547d\u540d\u7d22\u5f15\u5c42\u7ea7\uff1a rename_axis DataFrame.rename_axis(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False) rename_axis() \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5bf9 Index \u6216\u8005 MultiIndex \u8fdb\u884c\u91cd\u547d\u540d\u3002\u5c24\u5176\u5730\uff0c\u60a8\u53ef\u4ee5\u660e\u786e MultiIndex \u4e2d\u7684\u4e0d\u540c\u5c42\u7ea7\u7684\u540d\u79f0\uff0c\u8fd9\u53ef\u4ee5\u88ab\u7528\u4e8e\u5728\u4e4b\u540e\u4f7f\u7528 reset_index() \uff0c\u628a\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u503c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5217\u3002 df . rename_axis ( index = [ 'abc' , 'def' ]) 0 1 abc def one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 df . rename_axis ( columns = \"Cols\" ) . columns RangeIndex(start=0, stop=2, step=1, name='Cols') rename \u548c rename_axis \u90fd\u652f\u6301\u4e00\u4e2a\u660e\u786e\u7684\u5b57\u5178\u3001 Series \u6216\u8005\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\uff0c\u540d\u79f0\u6620\u5c04\u4e3a\u65b0\u7684\u503c\u3002 df . rename_axis ( index = [ 'abc' , 'def' ], inplace = True ) print ( df ) 0 1 abc def one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 \u5bf9\u591a\u5c42\u7ea7\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff1a sort_index DataFrame.sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True, ignore_index=False, key=None) \u5bf9\u4e8e\u62e5\u6709\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f7f\u7528 sort_index \u65b9\u6cd5\u6765\u6392\u5e8f\u3002 \u521b\u5efa\u793a\u4f8b s \uff1a import random tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] random . shuffle ( tuples ) s = pd . Series ( np . random . randn ( 8 ), index = pd . MultiIndex . from_tuples ( tuples )) s foo two -1.176215 qux one 1.108736 foo one 0.652951 qux two -0.402180 bar one -0.100761 baz two -1.303137 bar two -0.996656 baz one -0.249797 dtype: float64 # \u4e24\u8005\u7b49\u4ef7 s . sort_index () s . sort_index ( level = 0 ) bar one -0.100761 two -0.996656 baz one -0.249797 two -1.303137 foo one 0.652951 two -1.176215 qux one 1.108736 two -0.402180 dtype: float64 s . sort_index ( level = 1 ) bar one -0.100761 baz one -0.249797 foo one 0.652951 qux one 1.108736 bar two -0.996656 baz two -1.303137 foo two -1.176215 qux two -0.402180 dtype: float64 \u5982\u679c\u201c\u591a\u5c42\u7ea7\u7d22\u5f15\u201d\u90fd\u88ab\u547d\u540d\u4e86\u7684\u8bdd\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5411 sort_index \u4f20\u5165\u4e00\u4e2a\u5c42\u7ea7\u540d\u79f0\u3002 s . index . set_names ([ 'L1' , 'L2' ], inplace = True ) print ( s . sort_index ( level = 'L1' ), \" \\n \" ) print ( s . sort_index ( level = 'L2' )) L1 L2 bar one -0.100761 two -0.996656 baz one -0.249797 two -1.303137 foo one 0.652951 two -1.176215 qux one 1.108736 two -0.402180 dtype: float64 L1 L2 bar one -0.100761 baz one -0.249797 foo one 0.652951 qux one 1.108736 bar two -0.996656 baz two -1.303137 foo two -1.176215 qux two -0.402180 dtype: float64 \u5bf9\u4e8e\u591a\u7ef4\u5ea6\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u4efb\u610f\u7684\u7684\u7ef4\u5ea6\u6765\u8fdb\u884c\u7d22\u5f15\uff0c\u53ea\u8981\u4ed6\u4eec\u662f\u5177\u6709\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\uff1a df . T . sort_index ( level = 1 , axis = 1 ) abc one zero one zero def x x y y 0 1.060536 1.191578 0.969419 -1.034162 1 -0.447844 0.220043 -1.461856 -0.611150 \u5982\u679c\u7d22\u5f15\u6ca1\u6709\u6392\u5e8f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u7d22\u5f15\uff0c\u4f46\u662f\u7d22\u5f15\u7684\u6548\u7387\u4f1a\u6781\u5927\u964d\u4f4e\uff0c\u5e76\u4e14\u4f1a\u629b\u51fa PerformanceWarning \u8b66\u544a\u3002\u800c\u4e14\uff0c\u8fd9\u5c06\u8fd4\u56de\u6570\u636e\u7684\u526f\u672c\u800c\u975e\u6570\u636e\u7684\u89c6\u56fe\uff1a dfm = pd . DataFrame ({ 'jim' : [ 0 , 0 , 1 , 1 ], 'joe' : [ 'x' , 'x' , 'z' , 'y' ], 'jolie' : np . random . rand ( 4 )}) # y \u5e94\u8be5\u5728 z \u7684\u524d\u9762 dfm = dfm . set_index ([ 'jim' , 'joe' ]) print ( dfm ) print ( dfm . loc [( 1 , 'z' )]) jolie jim joe 0 x 0.340107 x 0.745068 1 z 0.260104 y 0.458321 jolie jim joe 1 z 0.260104 <ipython-input-1-23c78e5aac00>:7: PerformanceWarning: indexing past lexsort depth may impact performance. print(dfm.loc[(1, 'z')]) \u53e6\u5916\uff0c\u5982\u679c\u8bd5\u56fe\u901a\u8fc7\u201d\u5207\u7247\u201c\u7d22\u5f15\u4e00\u4e2a\u6ca1\u6709\u5b8c\u5168lexsorted\u7684\u5bf9\u8c61\uff0c\u60a8\u5c06\u4f1a\u78b0\u5230\u5982\u4e0b\u7684\u9519\u8bef\uff1a try : dfm . loc [( 0 , 'y' ):( 1 , 'z' )] except Exception as e : print ( f \"UnsortedIndexError: { e } \" ) UnsortedIndexError: 'Key length (2) was greater than MultiIndex lexsort depth (1)' \u6392\u5e8f\u4e4b\u540e\u5219\u4e0d\u4f1a\u62a5\u9519 dfm . sort_index () . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.458321 z 0.260104 \u5728 MultiIndex \u4e0a\u4f7f\u7528 is_lexsorted() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u67e5\u770b\u8be5\u7d22\u5f15\u662f\u5426\u5df2\u7ecf\u88ab\u6392\u5e8f\u3002\u800c\u4f7f\u7528 lexsort_depth \u5c5e\u6027\u5219\u53ef\u4ee5\u8fd4\u56de\u6392\u5e8f\u7684\u6df1\u5ea6\uff1a print ( \"*****\u672a\u6392\u5e8f*****\" ) print ( \"is lexsorted:\" , dfm . index . is_lexsorted ()) print ( \"lexsort depth:\" , dfm . index . lexsort_depth ) dfm = dfm . sort_index () print ( \"*****\u5df2\u6392\u5e8f*****\" ) print ( \"is lexsorted:\" , dfm . index . is_lexsorted ()) print ( \"lexsort depth:\" , dfm . index . lexsort_depth ) *****\u672a\u6392\u5e8f***** is lexsorted: False lexsort depth: 1 *****\u5df2\u6392\u5e8f***** is lexsorted: True lexsort depth: 2 \u73b0\u5728\uff0c\u5207\u7247\u7d22\u5f15\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 dfm . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.458321 z 0.260104 \u5c06\u5217\u8f6c\u6362\u4e3a\u7d22\u5f15\uff1a set_index \u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff08\u53ea\u5bf9 DataFrame \u6709\u6548\uff0c\u56e0\u4e3a Series \u6ca1\u6709\u5217\u7d22\u5f15\uff09\uff0c\u5176\u4e2d\uff1a col label \u53d8\u6210 index name \uff0c\u5217\u6570\u636e\u53d8\u6210\u884c label \uff1a DataFrame.set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False) keys \uff1a \u6307\u5b9a\u4e86\u4e00\u4e2a\u6216\u8005\u4e00\u5217\u7684 column label \u3002\u8fd9\u4e9b\u5217\u5c06\u4f1a\u8f6c\u6362\u4e3a\u884c index drop \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219 keys \u5bf9\u5e94\u7684\u5217\u4f1a\u88ab\u5220\u9664\uff1b\u5426\u5219\u8fd9\u4e9b\u5217\u4ecd\u7136\u88ab\u4fdd\u7559 append \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u6709\u7684\u884c\u7d22\u5f15\u5c06\u4fdd\u7559\uff08\u6b64\u65f6\u4e00\u5b9a\u662f\u4e2a\u591a\u7ea7\u7d22\u5f15\uff09\uff1b\u5426\u5219\u629b\u5f03\u539f\u6765\u7684\u884c\u7d22\u5f15\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u67e5\u65b0\u7684 index \u662f\u5426\u6709\u91cd\u590d\u503c\u3002\u5426\u5219\u4f1a\u63a8\u8fdf\u5230\u68c0\u6d4b\u8fc7\u7a0b\u5230\u5fc5\u987b\u68c0\u6d4b\u7684\u65f6\u5019\u3002 df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 ))) df [ \"key\" ] = [ \"A\" , \"B\" , \"C\" , \"D\" ] print ( df ) df . set_index ( keys = \"key\" , append = True ) 0 1 2 key 0 2 1 5 A 1 3 7 0 B 2 1 8 4 C 3 2 4 2 D 0 1 2 key 0 A 2 1 5 1 B 3 7 0 2 C 1 8 4 3 D 2 4 2 \u5c06\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\uff1a reset_index reset_index \u4f1a\u5c06\u5c42\u6b21\u5316\u7684\u884c index \u8f6c\u79fb\u5230\u5217\u4e2d\uff0c\u6210\u4e3a\u65b0\u7684\u4e00\u5217\u3002\u540c\u65f6 index \u53d8\u6210\u4e00\u4e2a\u6574\u6570\u578b\u7684\uff0c\u4ece0\u5f00\u59cb\u7f16\u53f7\uff1a DataFrame.reset_index(self, level=None, drop=False, inplace=False, col_level=0, col_fill='') Series.reset_index(self, level=None, drop=False, name=None, inplace=False) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 str \u3001\u5143\u7ec4\u6216\u8005\u5217\u8868\u3002\u5b83\u6307\u5b9a\u4e86\u5c06\u4ece\u5c42\u6b21\u5316\u7684 index \u4e2d\u79fb\u9664\u7684 level \u3002\u5982\u679c\u4e3a None \uff0c\u5219\u79fb\u9664\u6240\u6709\u7684 level \u3002 drop \uff1a drop=True \uff0c\u4e22\u5f03\u6307\u5b9alevel\uff0c\u4e0d\u52a0\u5165\u5217\u4e2d\u3002 drop=False \uff0c\u5219\u5c06\u6307\u5b9a\u7684level\u8f6c\u6362\u4e3a\u5217\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None \u3002 col_level \uff1a\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u540e\uff0c\u6307\u5b9a\u8be5\u5217\u7684\u5217\u6807\u7b7e\u4f4d\u4e8e\u5217\u7d22\u5f15\u7684\u54ea\u4e2alevel\u3002 col_fill \uff1a\u6307\u5b9a\u9664 col_level \u4e4b\u5916\u7684\u5217level\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\u5f53\u5b58\u5728\u591a\u7ea7\u5217\u7d22\u5f15\u65f6\u751f\u6548\u3002 \u5bf9\u4e8e Series \uff0c name \u5c31\u662f\u63d2\u5165\u540e\uff0c\u5bf9\u5e94\u7684\u5217 label columns = [[ \"a\" , \"a\" , \"b\" ], [ \"1\" , \"2\" , \"3\" ]] df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 )), columns = columns ) print ( df ) df . reset_index ( drop = False , col_level = 0 ) a b 1 2 3 0 3 6 5 1 6 8 5 2 0 6 9 3 1 8 1 index a b 1 2 3 0 0 3 6 5 1 1 6 8 5 2 2 0 6 9 3 3 1 8 1 \u6309label\u5220\u9664\u884c\u3001\u5217\uff1a drop \u4e22\u5f03\u67d0\u6761\u8f74\u4e0a\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a label DataFrame.drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') labels \uff1a\u5355\u4e2a label \u6216\u8005\u4e00\u4e2a label \u5e8f\u5217\uff0c\u4ee3\u8868\u8981\u88ab\u4e22\u5f03\u7684 label axis \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u8f74\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a 0 \u8f74 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 level \u540d\u5b57\uff0c\u7528\u4e8e MultiIndex \u3002\u56e0\u4e3a\u53ef\u80fd\u5728\u591a\u4e2a level \u4e0a\u90fd\u6709\u540c\u540d\u7684 label \u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None errors \uff1a\u53ef\u4ee5\u4e3a 'ignore'/'raise' a = df . reset_index ( drop = False , col_level = 0 ) print ( a ) a . drop ( labels = \"a\" , axis = 1 ) index a b 1 2 3 0 0 3 6 5 1 1 6 8 5 2 2 0 6 9 3 3 1 8 1 D:\\Software\\miniconda\\envs\\blog\\lib\\site- packages\\pandas\\core\\generic.py:4152: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. obj = obj._drop_axis(labels, axis, level=level, errors=errors) index b 3 0 0 5 1 1 5 2 2 9 3 3 1","title":"9.6.\u7d22\u5f15\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_1","text":"tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) print ( index ) MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) .levels \u4e3a property \u5c5e\u6027\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a FrozenList \uff08\u4e0d\u53ef\u53d8\u5217\u8868\uff09\uff0c\u5217\u8868\u4e2d\u5b58\u50a8\u6bcf\u4e00\u7ea7\u7684 label \uff08\u4e5f\u5c31\u662f\u521b\u5efa MultiIndex \u65f6\u4f20\u5165\u7684 levels \u53c2\u6570\uff09\u3002 index . levels FrozenList([['bar', 'baz', 'foo', 'qux'], ['one', 'two']]) .get_level_values(level) \uff1a\u8fd4\u56de\u6307\u5b9a level \u7684 Index \uff0c\u7528\u4e8e MultiIndex \u3002 print ( index . get_level_values ( 0 ), \" \\n \" ) print ( index . get_level_values ( 1 ), \" \\n \" ) print ( index . get_level_values ( 'second' )) Index(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='object', name='first') Index(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='object', name='second') Index(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='object', name='second') df = pd . DataFrame ( np . random . randn ( 6 , 6 ), index = index [: 6 ], columns = index [: 6 ]) df . columns . levels # original MultiIndex df [[ 'foo' , 'qux' ]] . columns . levels # sliced df [[ 'foo' , 'qux' ]] . columns . to_numpy () # for a specific level df [[ 'foo' , 'qux' ]] . columns . get_level_values ( 0 ) Index(['foo', 'foo'], dtype='object', name='first') new_mi = df [[ 'foo' , 'qux' ]] . columns . remove_unused_levels () new_mi . levels FrozenList([['foo'], ['one', 'two']])","title":"\u7d22\u5f15\u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_2","text":"level \u53c2\u6570\u5df2\u7ecf\u88ab\u52a0\u5165\u5230pandas\u5bf9\u8c61\u4e2d\u7684 reindex() \u548c align() \u65b9\u6cd5\u4e2d\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u6cbf\u7740\u4e00\u4e2a\u5c42\u7ea7\u6765\u5e7f\u64ad\u503c\uff08broadcast values\uff09\u3002\u4f8b\u5982\uff1a \u521b\u5efa\u793a\u4f8b df \uff1a midx = pd . MultiIndex ( levels = [[ 'zero' , 'one' ], [ 'x' , 'y' ]], codes = [[ 1 , 1 , 0 , 0 ], [ 1 , 0 , 1 , 0 ]]) df = pd . DataFrame ( np . random . randn ( 4 , 2 ), index = midx ) df 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 \u521b\u5efa\u793a\u4f8b df2 \uff1a df2 = df . mean ( level = 0 ) df2 0 1 one 1.014978 -0.954850 zero 0.078708 -0.195553 df2 . reindex ( df . index , level = 0 ) 0 1 one y 1.014978 -0.954850 x 1.014978 -0.954850 zero y 0.078708 -0.195553 x 0.078708 -0.195553 # aligning df_aligned , df2_aligned = df . align ( df2 , level = 0 ) print ( df_aligned , \" \\n \" ) print ( df2_aligned ) 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 0 1 one y 1.014978 -0.954850 x 1.014978 -0.954850 zero y 0.078708 -0.195553 x 0.078708 -0.195553","title":"\u7d22\u5f15\u91cd\u8d4b\u503c\u3001\u7d22\u5f15\u5bf9\u9f50"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#reindex","text":"DataFrame.reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None) index \uff1a array-like . \u7ed9\u51fa\u4e86\u65b0\u7684 index \u7684 label columns \uff1a array-like . \u7ed9\u51fa\u4e86\u65b0\u7684 columns \u7684 label method \uff1a\u5f53\u65b0\u7684 label \u7684\u503c\u7f3a\u5931\u65f6\uff0c\u5982\u4f55\u5904\u7406\u3002\u53c2\u6570\u503c\u53ef\u4ee5\u4e3a\uff1a None \uff1a\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u7f3a\u5931\u5730\u65b9\u586b\u5145 NaN 'backfill'/'bfill' \uff1a\u7528\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u540e\u5411\u586b\u5145\uff09 'pad'/'ffill' \uff1a\u7528\u4e0a\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u524d\u5411\u586b\u5145\uff09 'nearest' \uff1a\u7528\u6700\u8fd1\u7684\u53ef\u7528\u503c\u586b\u5145\u8be5\u7a7a\u7f3a copy \uff1a\u5e03\u5c14\u503c. \u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Series \u5bf9\u8c61\uff08\u5373\u4f7f\u4f20\u5165\u7684 index \u4e0e\u539f\u6765\u7684 index \u76f8\u540c\uff09 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 name \uff0c\u5728 MultiIndex \u7684\u6307\u5b9a\u7ea7\u522b\u4e0a\u5339\u914d\u7b80\u5355\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u6307\u5b9a\u7f3a\u5931\u503c\u7684\u586b\u5145\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a NaN \uff08\u5982\u679c\u8be5\u53c2\u6570\u4e0e method \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u4ee5 method \u4e3a\u4e3b\uff09 limit \uff1a\u6574\u6570. \u6307\u5b9a\u524d\u5411/\u540e\u5411\u586b\u5145\u65f6\uff1a\u5982\u679c\u6709\u8fde\u7eed\u7684 k \u4e2a NaN \uff0c\u5219\u53ea\u586b\u5145\u5176\u4e2d limit \u4e2a\u3002\u5b83\u4e0e method \u914d\u5408 tolerance \uff1a\u6574\u6570. \u7528\u4e8e\u7ed9\u51fa\u5728\u4e0d\u5339\u914d\u65f6\uff0c\u8fde\u7eed\u91c7\u7528\u524d\u5411/\u540e\u5411/\u6700\u8fd1\u90bb\u5339\u914d\u7684\u8de8\u5ea6\u7684\u6700\u5927\u503c\u3002\u5b83\u4e0e method \u914d\u5408","title":"reindex\u65b9\u6cd5\u53c2\u6570"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_3","text":"","title":"\u4ea4\u6362\u7d22\u5f15\u5c42\u7ea7"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#swaplevel","text":"DataFrame.swaplevel(self, i=-2, j=-1, axis=0) swaplevel() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u5c42\u7ea7 print ( df , \" \\n \" ) print ( df . swaplevel ( 0 , 1 , axis = 0 )) 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 0 1 y one 0.969419 -1.461856 x one 1.060536 -0.447844 y zero -1.034162 -0.611150 x zero 1.191578 0.220043","title":"swaplevel\u65b9\u6cd5"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#reorder_levels","text":"DataFrame.reorder_levels(self, order, axis=0) reorder_levels() \u662f\u4e00\u4e2a\u66f4\u4e00\u822c\u5316\u7684 swaplevel \u65b9\u6cd5\uff0c\u5141\u8bb8\u60a8\u7528\u7b80\u5355\u7684\u4e00\u6b65\u6765\u91cd\u6392\u5217\u7d22\u5f15\u7684\u5c42\u7ea7\uff1a print ( df , \" \\n \" ) print ( df . reorder_levels ([ 1 , 0 ], axis = 0 )) 0 1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 0 1 y one 0.969419 -1.461856 x one 1.060536 -0.447844 y zero -1.034162 -0.611150 x zero 1.191578 0.220043","title":"reorder_levels\u65b9\u6cd5"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#rename","text":"DataFrame.rename(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors='ignore') rename() \u65b9\u6cd5\u7528\u6765\u91cd\u547d\u540d\u591a\u5c42\u7d22\u5f15\u3002 renames \u7684 index \u6216 columns \u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u800c\u4ec5\u4ec5\u91cd\u547d\u540d\u60a8\u5e0c\u671b\u66f4\u6539\u540d\u5b57\u7684\u884c\u6216\u5217\uff1a df . rename ( columns = { 0 : \"col0\" , 1 : \"col1\" }) col0 col1 one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 df . rename ( index = { \"one\" : \"two\" , \"y\" : \"z\" }) 0 1 two z 0.969419 -1.461856 x 1.060536 -0.447844 zero z -1.034162 -0.611150 x 1.191578 0.220043","title":"\u91cd\u547d\u540d\u7d22\u5f15\uff1arename"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#rename_axis","text":"DataFrame.rename_axis(self, mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False) rename_axis() \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5bf9 Index \u6216\u8005 MultiIndex \u8fdb\u884c\u91cd\u547d\u540d\u3002\u5c24\u5176\u5730\uff0c\u60a8\u53ef\u4ee5\u660e\u786e MultiIndex \u4e2d\u7684\u4e0d\u540c\u5c42\u7ea7\u7684\u540d\u79f0\uff0c\u8fd9\u53ef\u4ee5\u88ab\u7528\u4e8e\u5728\u4e4b\u540e\u4f7f\u7528 reset_index() \uff0c\u628a\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u503c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5217\u3002 df . rename_axis ( index = [ 'abc' , 'def' ]) 0 1 abc def one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043 df . rename_axis ( columns = \"Cols\" ) . columns RangeIndex(start=0, stop=2, step=1, name='Cols') rename \u548c rename_axis \u90fd\u652f\u6301\u4e00\u4e2a\u660e\u786e\u7684\u5b57\u5178\u3001 Series \u6216\u8005\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\uff0c\u540d\u79f0\u6620\u5c04\u4e3a\u65b0\u7684\u503c\u3002 df . rename_axis ( index = [ 'abc' , 'def' ], inplace = True ) print ( df ) 0 1 abc def one y 0.969419 -1.461856 x 1.060536 -0.447844 zero y -1.034162 -0.611150 x 1.191578 0.220043","title":"\u91cd\u547d\u540d\u7d22\u5f15\u5c42\u7ea7\uff1arename_axis"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#sort_index","text":"DataFrame.sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True, ignore_index=False, key=None) \u5bf9\u4e8e\u62e5\u6709\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f7f\u7528 sort_index \u65b9\u6cd5\u6765\u6392\u5e8f\u3002 \u521b\u5efa\u793a\u4f8b s \uff1a import random tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] random . shuffle ( tuples ) s = pd . Series ( np . random . randn ( 8 ), index = pd . MultiIndex . from_tuples ( tuples )) s foo two -1.176215 qux one 1.108736 foo one 0.652951 qux two -0.402180 bar one -0.100761 baz two -1.303137 bar two -0.996656 baz one -0.249797 dtype: float64 # \u4e24\u8005\u7b49\u4ef7 s . sort_index () s . sort_index ( level = 0 ) bar one -0.100761 two -0.996656 baz one -0.249797 two -1.303137 foo one 0.652951 two -1.176215 qux one 1.108736 two -0.402180 dtype: float64 s . sort_index ( level = 1 ) bar one -0.100761 baz one -0.249797 foo one 0.652951 qux one 1.108736 bar two -0.996656 baz two -1.303137 foo two -1.176215 qux two -0.402180 dtype: float64 \u5982\u679c\u201c\u591a\u5c42\u7ea7\u7d22\u5f15\u201d\u90fd\u88ab\u547d\u540d\u4e86\u7684\u8bdd\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5411 sort_index \u4f20\u5165\u4e00\u4e2a\u5c42\u7ea7\u540d\u79f0\u3002 s . index . set_names ([ 'L1' , 'L2' ], inplace = True ) print ( s . sort_index ( level = 'L1' ), \" \\n \" ) print ( s . sort_index ( level = 'L2' )) L1 L2 bar one -0.100761 two -0.996656 baz one -0.249797 two -1.303137 foo one 0.652951 two -1.176215 qux one 1.108736 two -0.402180 dtype: float64 L1 L2 bar one -0.100761 baz one -0.249797 foo one 0.652951 qux one 1.108736 bar two -0.996656 baz two -1.303137 foo two -1.176215 qux two -0.402180 dtype: float64 \u5bf9\u4e8e\u591a\u7ef4\u5ea6\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u4efb\u610f\u7684\u7684\u7ef4\u5ea6\u6765\u8fdb\u884c\u7d22\u5f15\uff0c\u53ea\u8981\u4ed6\u4eec\u662f\u5177\u6709\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\uff1a df . T . sort_index ( level = 1 , axis = 1 ) abc one zero one zero def x x y y 0 1.060536 1.191578 0.969419 -1.034162 1 -0.447844 0.220043 -1.461856 -0.611150 \u5982\u679c\u7d22\u5f15\u6ca1\u6709\u6392\u5e8f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u7d22\u5f15\uff0c\u4f46\u662f\u7d22\u5f15\u7684\u6548\u7387\u4f1a\u6781\u5927\u964d\u4f4e\uff0c\u5e76\u4e14\u4f1a\u629b\u51fa PerformanceWarning \u8b66\u544a\u3002\u800c\u4e14\uff0c\u8fd9\u5c06\u8fd4\u56de\u6570\u636e\u7684\u526f\u672c\u800c\u975e\u6570\u636e\u7684\u89c6\u56fe\uff1a dfm = pd . DataFrame ({ 'jim' : [ 0 , 0 , 1 , 1 ], 'joe' : [ 'x' , 'x' , 'z' , 'y' ], 'jolie' : np . random . rand ( 4 )}) # y \u5e94\u8be5\u5728 z \u7684\u524d\u9762 dfm = dfm . set_index ([ 'jim' , 'joe' ]) print ( dfm ) print ( dfm . loc [( 1 , 'z' )]) jolie jim joe 0 x 0.340107 x 0.745068 1 z 0.260104 y 0.458321 jolie jim joe 1 z 0.260104 <ipython-input-1-23c78e5aac00>:7: PerformanceWarning: indexing past lexsort depth may impact performance. print(dfm.loc[(1, 'z')]) \u53e6\u5916\uff0c\u5982\u679c\u8bd5\u56fe\u901a\u8fc7\u201d\u5207\u7247\u201c\u7d22\u5f15\u4e00\u4e2a\u6ca1\u6709\u5b8c\u5168lexsorted\u7684\u5bf9\u8c61\uff0c\u60a8\u5c06\u4f1a\u78b0\u5230\u5982\u4e0b\u7684\u9519\u8bef\uff1a try : dfm . loc [( 0 , 'y' ):( 1 , 'z' )] except Exception as e : print ( f \"UnsortedIndexError: { e } \" ) UnsortedIndexError: 'Key length (2) was greater than MultiIndex lexsort depth (1)' \u6392\u5e8f\u4e4b\u540e\u5219\u4e0d\u4f1a\u62a5\u9519 dfm . sort_index () . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.458321 z 0.260104 \u5728 MultiIndex \u4e0a\u4f7f\u7528 is_lexsorted() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u67e5\u770b\u8be5\u7d22\u5f15\u662f\u5426\u5df2\u7ecf\u88ab\u6392\u5e8f\u3002\u800c\u4f7f\u7528 lexsort_depth \u5c5e\u6027\u5219\u53ef\u4ee5\u8fd4\u56de\u6392\u5e8f\u7684\u6df1\u5ea6\uff1a print ( \"*****\u672a\u6392\u5e8f*****\" ) print ( \"is lexsorted:\" , dfm . index . is_lexsorted ()) print ( \"lexsort depth:\" , dfm . index . lexsort_depth ) dfm = dfm . sort_index () print ( \"*****\u5df2\u6392\u5e8f*****\" ) print ( \"is lexsorted:\" , dfm . index . is_lexsorted ()) print ( \"lexsort depth:\" , dfm . index . lexsort_depth ) *****\u672a\u6392\u5e8f***** is lexsorted: False lexsort depth: 1 *****\u5df2\u6392\u5e8f***** is lexsorted: True lexsort depth: 2 \u73b0\u5728\uff0c\u5207\u7247\u7d22\u5f15\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 dfm . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.458321 z 0.260104","title":"\u5bf9\u591a\u5c42\u7ea7\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff1asort_index"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#set_index","text":"\u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff08\u53ea\u5bf9 DataFrame \u6709\u6548\uff0c\u56e0\u4e3a Series \u6ca1\u6709\u5217\u7d22\u5f15\uff09\uff0c\u5176\u4e2d\uff1a col label \u53d8\u6210 index name \uff0c\u5217\u6570\u636e\u53d8\u6210\u884c label \uff1a DataFrame.set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False) keys \uff1a \u6307\u5b9a\u4e86\u4e00\u4e2a\u6216\u8005\u4e00\u5217\u7684 column label \u3002\u8fd9\u4e9b\u5217\u5c06\u4f1a\u8f6c\u6362\u4e3a\u884c index drop \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219 keys \u5bf9\u5e94\u7684\u5217\u4f1a\u88ab\u5220\u9664\uff1b\u5426\u5219\u8fd9\u4e9b\u5217\u4ecd\u7136\u88ab\u4fdd\u7559 append \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u6709\u7684\u884c\u7d22\u5f15\u5c06\u4fdd\u7559\uff08\u6b64\u65f6\u4e00\u5b9a\u662f\u4e2a\u591a\u7ea7\u7d22\u5f15\uff09\uff1b\u5426\u5219\u629b\u5f03\u539f\u6765\u7684\u884c\u7d22\u5f15\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u67e5\u65b0\u7684 index \u662f\u5426\u6709\u91cd\u590d\u503c\u3002\u5426\u5219\u4f1a\u63a8\u8fdf\u5230\u68c0\u6d4b\u8fc7\u7a0b\u5230\u5fc5\u987b\u68c0\u6d4b\u7684\u65f6\u5019\u3002 df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 ))) df [ \"key\" ] = [ \"A\" , \"B\" , \"C\" , \"D\" ] print ( df ) df . set_index ( keys = \"key\" , append = True ) 0 1 2 key 0 2 1 5 A 1 3 7 0 B 2 1 8 4 C 3 2 4 2 D 0 1 2 key 0 A 2 1 5 1 B 3 7 0 2 C 1 8 4 3 D 2 4 2","title":"\u5c06\u5217\u8f6c\u6362\u4e3a\u7d22\u5f15\uff1aset_index"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#reset_index","text":"reset_index \u4f1a\u5c06\u5c42\u6b21\u5316\u7684\u884c index \u8f6c\u79fb\u5230\u5217\u4e2d\uff0c\u6210\u4e3a\u65b0\u7684\u4e00\u5217\u3002\u540c\u65f6 index \u53d8\u6210\u4e00\u4e2a\u6574\u6570\u578b\u7684\uff0c\u4ece0\u5f00\u59cb\u7f16\u53f7\uff1a DataFrame.reset_index(self, level=None, drop=False, inplace=False, col_level=0, col_fill='') Series.reset_index(self, level=None, drop=False, name=None, inplace=False) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 str \u3001\u5143\u7ec4\u6216\u8005\u5217\u8868\u3002\u5b83\u6307\u5b9a\u4e86\u5c06\u4ece\u5c42\u6b21\u5316\u7684 index \u4e2d\u79fb\u9664\u7684 level \u3002\u5982\u679c\u4e3a None \uff0c\u5219\u79fb\u9664\u6240\u6709\u7684 level \u3002 drop \uff1a drop=True \uff0c\u4e22\u5f03\u6307\u5b9alevel\uff0c\u4e0d\u52a0\u5165\u5217\u4e2d\u3002 drop=False \uff0c\u5219\u5c06\u6307\u5b9a\u7684level\u8f6c\u6362\u4e3a\u5217\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None \u3002 col_level \uff1a\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u540e\uff0c\u6307\u5b9a\u8be5\u5217\u7684\u5217\u6807\u7b7e\u4f4d\u4e8e\u5217\u7d22\u5f15\u7684\u54ea\u4e2alevel\u3002 col_fill \uff1a\u6307\u5b9a\u9664 col_level \u4e4b\u5916\u7684\u5217level\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\u5f53\u5b58\u5728\u591a\u7ea7\u5217\u7d22\u5f15\u65f6\u751f\u6548\u3002 \u5bf9\u4e8e Series \uff0c name \u5c31\u662f\u63d2\u5165\u540e\uff0c\u5bf9\u5e94\u7684\u5217 label columns = [[ \"a\" , \"a\" , \"b\" ], [ \"1\" , \"2\" , \"3\" ]] df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 )), columns = columns ) print ( df ) df . reset_index ( drop = False , col_level = 0 ) a b 1 2 3 0 3 6 5 1 6 8 5 2 0 6 9 3 1 8 1 index a b 1 2 3 0 0 3 6 5 1 1 6 8 5 2 2 0 6 9 3 3 1 8 1","title":"\u5c06\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\uff1areset_index"},{"location":"pandas/9.6.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#labeldrop","text":"\u4e22\u5f03\u67d0\u6761\u8f74\u4e0a\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a label DataFrame.drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') labels \uff1a\u5355\u4e2a label \u6216\u8005\u4e00\u4e2a label \u5e8f\u5217\uff0c\u4ee3\u8868\u8981\u88ab\u4e22\u5f03\u7684 label axis \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u8f74\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a 0 \u8f74 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 level \u540d\u5b57\uff0c\u7528\u4e8e MultiIndex \u3002\u56e0\u4e3a\u53ef\u80fd\u5728\u591a\u4e2a level \u4e0a\u90fd\u6709\u540c\u540d\u7684 label \u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None errors \uff1a\u53ef\u4ee5\u4e3a 'ignore'/'raise' a = df . reset_index ( drop = False , col_level = 0 ) print ( a ) a . drop ( labels = \"a\" , axis = 1 ) index a b 1 2 3 0 0 3 6 5 1 1 6 8 5 2 2 0 6 9 3 3 1 8 1 D:\\Software\\miniconda\\envs\\blog\\lib\\site- packages\\pandas\\core\\generic.py:4152: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. obj = obj._drop_axis(labels, axis, level=level, errors=errors) index b 3 0 0 5 1 1 5 2 2 9 3 3 1","title":"\u6309label\u5220\u9664\u884c\u3001\u5217\uff1adrop"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html","text":"from toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 Pandas\u6709\u4e24\u79cd\u62fc\u63a5DataFrame\u7684\u51fd\u6570\uff0c\u4e00\u79cd\u662f concat \u51fd\u6570\uff0c\u53e6\u4e00\u79cd\u662fSQL\u98ce\u683c\u7684\u62fc\u63a5\u51fd\u6570\uff0c\u4f8b\u5982 merge \u51fd\u6570\u3002 concat \u51fd\u6570\u53ea\u80fd\u6309\u8f74\u7d22\u5f15\u8fdb\u884c\u62fc\u63a5\uff0c\u800c merge \u51fd\u6570\u5219\u66f4\u52a0\u7075\u6d3b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u6839\u636e\u5217\u7d22\u5f15\u8fdb\u884c\u62fc\u63a5\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6307\u5b9a\u7684\u5217\u8fdb\u884c\u62fc\u63a5\u3002\u4f46 merge \u51fd\u6570\u4e0d\u80fd\u6839\u636e\u884c\u6807\u7b7e\u8fdb\u884c\u62fc\u63a5\u3002 concat \u51fd\u6570 \u5728\u6df1\u5165\u7814\u7a76 concat \u51fd\u6570\u7684\u7ec6\u8282\u53ca\u5176\u4f5c\u7528\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) frames = [ df1 , df2 , df3 ] result = pd . concat ( frames ) \u4e0e\u5176\u5728ndarrays\u4e0a\u7684\u540c\u7ea7\u51fd\u6570\u4e00\u6837 numpy.concatenate \uff0c pandas.concat \u83b7\u53d6\u540c\u7c7b\u7c7b\u578b\u5bf9\u8c61\u7684\u5217\u8868\u6216\u5b57\u5178\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u201c\u5bf9\u5176\u4ed6\u8f74\u7684\u64cd\u4f5c\u201d\u7684\u4e00\u4e9b\u53ef\u914d\u7f6e\u5904\u7406\u8fdb\u884c\u8fde\u63a5\uff1a pd . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , copy = True ) objs \uff1aSeries\u6216DataFrame\u5bf9\u8c61\u7684\u5e8f\u5217\u6216\u6620\u5c04\u3002\u5982\u679c\u4f20\u9012\u4e86dict \uff0c\u5219\u9664\u975e\u4f20\u9012\u4e86\u6392\u5e8f\u7684\u952e\uff0c\u5426\u5219\u5c06\u4f7f\u7528\u6392\u5e8f\u540e\u7684\u952e\u4f5c\u4e3akeys\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u9009\u62e9\u503c\uff08\u8bf7\u53c2\u89c1\u4e0b\u6587\uff09\u3002\u9664\u975e\u5b83\u4eec\u90fd\u4e3aNone\uff0c\u5426\u5219\u6240\u6709None\u5bf9\u8c61\u90fd\u5c06\u88ab\u9759\u9ed8\u5220\u9664\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5f15\u53d1ValueError\u3002 axis \uff1a {0,1,\u2026} \uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002\u6cbf\u7740\u8be5\u8f74\u8fdb\u884c\u62fc\u63a5\u3002 join \uff1a {'inner','outer'} \uff0c\u9ed8\u8ba4\u4e3a 'outer' \u3002\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u3002 'outer' \u4e3a\u5e76\u96c6\uff0c 'inner' \u4e3a\u4ea4\u96c6\u3002 ignore_index \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u5982\u679c\u4e3aTrue\uff0c\u5219\u75280, \u2026, n-1\u4ee3\u66ff\u4e32\u8054\u8f74\u7684\u539f\u7d22\u5f15\u3002\u6ce8\u610f\uff0c\u62fc\u63a5\u65f6\u4ecd\u4f1a\u8003\u8651\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u503c\u3002 keys \uff1a\u5e8f\u5217\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u4f7f\u7528\u4f20\u9012\u7684\u952e\u4f5c\u4e3a\u6700\u5916\u5c42\u7ea7\u522b\u6765\u6784\u9020\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u3002\u5982\u679c\u901a\u8fc7\u4e86\u591a\u4e2a\u7ea7\u522b\uff0c\u5219\u5e94\u5305\u542b\u5143\u7ec4\u3002 levels \uff1a\u5e8f\u5217\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u7528\u4e8e\u6784\u9020MultiIndex\u7684\u7279\u5b9a\u7ea7\u522b\uff08\u552f\u4e00\u503c\uff09\u3002\u5426\u5219\uff0c\u5c06\u4ece\u6309\u952e\u63a8\u65ad\u51fa\u5b83\u4eec\u3002 names \uff1a\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u751f\u6210\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u4e2d\u7684\u7ea7\u522b\u7684\u540d\u79f0\u3002 verify_integrity \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u68c0\u67e5\u65b0\u7684\u4e32\u8054\u8f74\u662f\u5426\u5305\u542b\u91cd\u590d\u9879\u3002\u76f8\u5bf9\u4e8e\u5b9e\u9645\u6570\u636e\u4e32\u8054\u800c\u8a00\uff0c\u8fd9\u53ef\u80fd\u975e\u5e38\u6602\u8d35\u3002 copy \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aTrue\u3002\u5982\u679c\u4e3aFalse\uff0c\u5728\u975e\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u3002 \u6ca1\u6709\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba8\u8bba\u8fd9\u4e9b\u53c2\u6570\u7684\u4f5c\u7528\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u56de\u987e\u4e00\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u5c06\u7279\u5b9a\u7684\u952e\u4e0e\u5404\u4e2a\u5f85\u62fc\u63a5\u7684DataFrame\u76f8\u5173\u8054\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 keys \u53c2\u6570\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd4\u56de\u5bf9\u8c61\u7684\u7d22\u5f15\u5177\u6709 \u5c42\u6b21\u7ed3\u6784\u7d22\u5f15 \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u952e\u9009\u62e9\u6bcf\u4e2a\u5757\uff1a result . loc [ 'y' ] A B C D 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 \u610f\u8bc6\u5230\u8fd9\u4e2a\u529f\u80fd\u662f\u975e\u5e38\u6709\u7528\u7684\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\uff0c\u6709\u5173\u6b64\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u53c2\u89c1\u4e0b\u6587\u3002 Note \u503c\u5f97\u6ce8\u610f\u7684\u662f concat() \u4f1a\u5b8c\u6574\u590d\u5236\u6570\u636e\uff08 append() \u65b9\u6cd5\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u4e0d\u65ad\u91cd\u590d\u4f7f\u7528\u6b64\u51fd\u6570\u4f1a\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002\u5982\u679c\u9700\u8981\u5bf9\u591a\u4e2a\u6570\u636e\u96c6\u4f7f\u7528\u8be5\u64cd\u4f5c\uff0c\u8bf7\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 frames = [ process_your_file ( f ) for f in files ] result = pd . concat ( frames ) \u5904\u7406\u5176\u4ed6\u8f74\u7684\u903b\u8f91\uff1ajoin\u53c2\u6570 \u5c06\u591a\u4e2aDataFrame\u7c98\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\uff08\u800c\u4e0d\u662f\u4e32\u8054\u7684\u8f74\uff09\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5b8c\u6210\uff1a \u628a\u5b83\u4eec\u5168\u90e8\u7ed3\u5408\u8d77\u6765 join='outer' \u3002\u8fd9\u662f\u9ed8\u8ba4\u9009\u9879\uff0c\u8fd9\u4e0d\u4f1a\u4e22\u5931\u4fe1\u606f\u3002 \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \u3002 \u9ed8\u8ba4 join='outer' \uff1a df4 = pd . DataFrame ({ 'B' : [ 'B2' , 'B3' , 'B6' , 'B7' ], 'D' : [ 'D2' , 'D3' , 'D6' , 'D7' ], 'F' : [ 'F2' , 'F3' , 'F6' , 'F7' ]}, index = [ 2 , 3 , 7 , 6 ]) result = pd . concat ([ df1 , df4 ], axis = 1 , sort = True , join = \"outer\" ) \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \uff1a result = pd . concat ([ df1 , df4 ], axis = 1 , join = 'inner' ) \u5982\u679c\u53ea\u60f3\u7528\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\uff1a result = pd . concat ([ df1 , df4 ], axis = 1 ) . reindex ( df1 . index ) \u4e5f\u53ef\u4ee5\u5728\u8fde\u63a5\u4e4b\u524d\u5efa\u7acb\u7d22\u5f15\uff1a pd . concat ([ df1 , df4 . reindex ( df1 . index )], axis = 1 ) A B C D B D F 0 A0 B0 C0 D0 NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN 2 A2 B2 C2 D2 B2 D2 F2 3 A3 B3 C3 D3 B3 D3 F3 \u4f7f\u7528 append \u62fc\u63a5 append() \u662fSeries\u548cDataFrame\u7684 \u5b9e\u4f8b\u65b9\u6cd5 \uff0c\u5b83\u662f concat() \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c append \u6bd4 concat \u66f4\u65e9\u51fa\u73b0\u3002 append \u65b9\u6cd5\u8ba9Series\u548cDataFrame\u6cbf\u7740\u884c\uff08 axis=0 \uff09\u62fc\u63a5\u5728\u4e00\u8d77\uff1a append ( self , other , ignore_index = False , verify_integrity = False , sort = None ) append \u4e0d\u8981\u6c42\u4e24\u4e2aDataFrame\u7684\u884c\u7d22\u5f15\u6216\u5217\u7d22\u5f15\u4ea4\u96c6\u4e3a\u7a7a\uff1a result = df1 . append ( df4 , sort = False , ignore_index = True ) append \u53ef\u4ee5\u62fc\u63a5\u591a\u4e2a\u5bf9\u8c61\uff1a result = df1 . append ([ df2 , df3 ]) \u4e0elist\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4e0d\u540c\uff0cDataFrame\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u526f\u672c\uff0c \u4e0d\u4f1a\u4fee\u6539 df1 \u3002 \u5ffd\u7565\u4e32\u8054\u8f74\u4e0a\u7684\u7d22\u5f15\uff1aignore_index \u5982\u679c DataFrame \u7684\u7d22\u5f15\u6ca1\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528 ignore_index \u53c2\u6570\uff1a result = pd . concat ([ df1 , df4 ], ignore_index = True , sort = False ) DataFrame.append() \u65b9\u6cd5\u4e5f\u6709\u8fd9\u4e2a\u53c2\u6570\uff1a result = df1 . append ( df4 , ignore_index = True , sort = False ) \u6df7\u5408\u4e32\u8054 Series \u548c DataFrame \u53ef\u4ee5\u62fc\u63a5 Series \u548c DataFrame \u3002\u8be5 Series \u4f1a\u8f6c\u5316\u4e3a DataFrame \u7684\u4e00\u5217\uff0c\u5217\u540d\u662f Series \u7684 name \u3002 s1 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], name = 'X' ) result = pd . concat ([ df1 , s1 ], axis = 1 ) \u5982\u679c Series \u672a\u547d\u540d\uff0c\u5219\u5c06\u8fde\u7eed\u7f16\u53f7\u3002 s2 = pd . Series ([ '_0' , '_1' , '_2' , '_3' ]) result = pd . concat ([ df1 , s2 , s2 , s2 ], axis = 1 ) \u901a\u8fc7 ignore_index=True \u5220\u9664\u539f\u6709\u7d22\u5f15\u6807\u7b7e\u3002 result = pd . concat ([ df1 , s1 ], axis = 1 , ignore_index = True ) key \u53c2\u6570 keys \u53c2\u6570\u7684\u4e00\u4e2a\u76f8\u5f53\u666e\u904d\u7684\u7528\u6cd5\u662f\u91cd\u65b0\u6307\u5b9a\u539fDataFrame\u6216Series\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u62fc\u63a5\u540e\u7684DataFrame\u7684\u5217\u7d22\u5f15\uff1a s3 = pd . Series ([ 0 , 1 , 2 , 3 ], name = 'foo' ) s4 = pd . Series ([ 0 , 1 , 2 , 3 ]) s5 = pd . Series ([ 0 , 1 , 4 , 5 ]) pd . concat ([ s3 , s4 , s5 ], axis = 1 ) foo 0 1 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u901a\u8fc7 keys \u53c2\u6570\uff0c\u53ef\u4ee5\u8986\u76d6\u73b0\u6709\u7684\u5217\u540d\u3002 pd . concat ([ s3 , s4 , s5 ], axis = 1 , keys = [ 'red' , 'blue' , 'yellow' ]) red blue yellow 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u8ba9\u6211\u4eec\u8003\u8651\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7684\u53d8\u4f53\uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd8\u53ef\u4ee5\u5c06\u9700\u8981\u62fc\u63a5\u7684DataFrame\u4ee5dict\u5f62\u5f0f\u4f20\u9012\u7ed9 concat \u51fd\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdict\u952e\u5c06\u7528\u4f5c keys \u53c2\u6570\uff08\u9664\u975e\u6307\u5b9a\u4e86\u5176\u4ed6\u952e\uff09\uff1a pieces = { 'x' : df1 , 'y' : df2 , 'z' : df3 } result = pd . concat ( pieces ) result = pd . concat ( pieces , keys = [ 'z' , 'y' ]) \u521b\u5efa\u7684MultiIndex\u7531\u4f20\u9012\u7684\u952e\u548c DataFrame \u884c\u7d22\u5f15\u6784\u9020\uff1a result . index . levels FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \u5982\u679c\u60f3\u6307\u5b9a\u5176\u4ed6\u7ea7\u522b\uff08\u5076\u5c14\u4f1a\u8fd9\u6837\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b levels \u53c2\u6570\uff1a result = pd . concat ( pieces , keys = [ 'x' , 'y' , 'z' ], levels = [[ 'z' , 'y' , 'x' , 'w' ]], names = [ 'group_key' ]) result . index . levels FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]) \u884c\u8ffd\u52a0\u5230 DataFrame \u5c3d\u7ba1\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff08\u56e0\u4e3a\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff09\uff0c\u4f46\u662f\u53ef\u4ee5\u5411 append \u4f20\u9012\u4e00\u4e2a Series \u6216dict\u6765\u5c06\u4e00\u884c\u9644\u52a0\u5230 DataFrame \uff1a s2 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], index = [ 'A' , 'B' , 'C' , 'D' ]) result = df1 . append ( s2 , ignore_index = True ) \u8fd8\u53ef\u4ee5\u4f20\u9012\u5b57\u5178\u6216\u7cfb\u5217\u7684\u5217\u8868\uff1a dicts = [{ 'A' : 1 , 'B' : 2 , 'C' : 3 , 'X' : 4 }, { 'A' : 5 , 'B' : 6 , 'C' : 7 , 'Y' : 8 }] result = df1 . append ( dicts , ignore_index = True , sort = False ) \u6570\u636e\u5e93\u5f62\u5f0f\u7684\u62fc\u63a5 pandas\u5177\u6709\u5168\u529f\u80fd\u3001\u9ad8\u6027\u80fd\u7684\u5185\u5b58\u8fde\u63a5\u64cd\u4f5c\uff0c\u4e0eSQL\u7b49\u5173\u7cfb\u6570\u636e\u5e93\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6027\u80fd\u6bd4\u5176\u4ed6\u5f00\u6e90\u5b9e\u73b0\uff08\u5982R\u4e2d\u7684 base::merge.data.frame \uff09\u8981\u597d\u5f97\u591a\uff08\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u751a\u81f3\u8d85\u8fc7\u4e00\u4e2a\u6570\u91cf\u7ea7\uff09\u3002\u539f\u56e0\u662f\u4ed4\u7ec6\u7684\u7b97\u6cd5\u8bbe\u8ba1\u548cDataFrame\u7684\u6570\u636e\u7684\u5185\u90e8\u5e03\u5c40\u3002 pandas\u63d0\u4f9b\u51fd\u6570 merge() \uff0c\u4f5c\u4e3aDataFrame\u6216Series\u5bf9\u8c61\u4e4b\u95f4\u6240\u6709\u6807\u51c6\u6570\u636e\u5e93\u62fc\u63a5\u64cd\u4f5c\u7684\u5165\u53e3\u70b9\uff1a pd . merge ( left , right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = True , suffixes = ( '_x' , '_y' ), copy = True , indicator = False , validate = None ) left \uff1a\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 right \uff1a\u53e6\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u5b83\u6307\u5b9a\u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\u7684 label \u3002\u5e76\u4e14\u5fc5\u987b\u5728\u4e24\u4e2a DataFrame \u4e2d\u8fd9\u4e9b label \u90fd\u5b58\u5728\u3002\u5982\u679c\u5b83\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u4e24\u4e2a DataFrame \u7684\u5217 label \u7684\u4ea4\u96c6\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 left_on/right_on \u5206\u522b\u6307\u5b9a\u4e24\u4fa7 DataFrame \u5bf9\u9f50\u7684\u8fde\u63a5\u952e\u3002 left_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u5de6\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 right_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u53f3\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 left_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u5de6\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 right_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u53f3\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 how \uff1a\u5176\u4e00 'left' \uff0c 'right' \uff0c 'outer' \uff0c 'inner' \u3002\u9ed8\u8ba4\u4e3a inner \u3002\u6709\u5173\u6bcf\u79cd\u65b9\u6cd5\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1\u4e0b\u6587\u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5728\u7ed3\u679c\u4e2d\uff0c\u5bf9\u5408\u5e76\u91c7\u7528\u7684\u8fde\u63a5\u952e\u8fdb\u884c\u6392\u5e8f\u3002 suffixes \uff1a\u4e00\u4e2a\u4e8c\u5143\u5e8f\u5217\u3002\u5bf9\u4e8e\u7ed3\u679c\u4e2d\u540c\u540d\u7684\u5217\uff0c\u5b83\u4f1a\u6dfb\u52a0\u524d\u7f00\u6765\u6307\u793a\u5b83\u4eec\u6765\u81ea\u54ea\u4e2a DataFrame \u3002 copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e\u3002\u5426\u5219\u4e0d\u62f7\u8d1d\u6570\u636e\u3002 indicator \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\u79f0\u4f5c _merge \uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 \u5982\u679c\u4e3a\u5b57\u7b26\u4e32\uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\uff08\u8be5\u5217\u540d\u5b57\u7531 indicator \u5b57\u7b26\u4e32\u7ed9\u51fa\uff09\uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 validate \uff1a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u5982\u679c\u6307\u5b9a\uff0c\u5219\u68c0\u67e5\u5408\u5e76\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\u3002 'one_to_one'\u6216'1:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u53f3\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'one_to_many'\u6216'1:m'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_one'\u6216'm:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u6b63\u786e\u7684\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_many'\u6216'm:m'\uff1a\u5141\u8bb8\uff0c\u4f46\u4e0d\u8fdb\u884c\u68c0\u67e5\u3002 \u65b0\u529f\u80fd 0.23.0\u7248\u672c\u4e2d\u6dfb\u52a0\u4e86\u6307\u5b9a\u7d22\u5f15\u7ea7\u522b\u7684 on \u3001 left_on \u3001 right_on \u53c2\u6570\u7684\u652f\u6301\u3002\u57280.24.0\u7248\u4e2d\u6dfb\u52a0\u4e86\u5bf9\u88ab\u547d\u540d\u7684Series\u5408\u5e76\u7684\u652f\u6301\u3002 merge \u662fpandas\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3aDataFrame\u5b9e\u4f8b\u65b9\u6cd5 merge() \u4f7f\u7528\uff0c\u8c03\u7528 DataFrame.merge \u65f6\uff0c DataFrame \u88ab\u89c6\u4e3a\u62fc\u63a5\u4e2d\u7684\u5de6\u4fa7\u5bf9\u8c61\u3002 \u76f8\u5173 join() \u65b9\u6cd5\u5728 merge \u5185\u90e8\u7528\u4e8e\u7d22\u5f15\u7d22\u5f15\u8fde\u63a5\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\u548c\u7d22\u5f15\u5217\u8fde\u63a5\u3002\u5982\u679c\u4ec5\u52a0\u5165\u7d22\u5f15\uff0c\u5219\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 DataFrame.join \u6765\u8282\u7701\u4e00\u4e9b\u8f93\u5165\u3002 \u5408\u5e76\u65b9\u6cd5\u7b80\u4ecb\uff08\u5173\u7cfb\u4ee3\u6570\uff09 \u6709\u7ecf\u9a8c\u7684\u5173\u7cfb\u6570\u636e\u5e93\uff08\u5982SQL\uff09\u7528\u6237\u5c06\u719f\u6089\u7528\u4e8e\u63cf\u8ff0\u4e24\u4e2aSQL\u7c7b\u8868\u7ed3\u6784\uff08DataFrame\u5bf9\u8c61\uff09\u4e4b\u95f4\u7684\u8fde\u63a5\u64cd\u4f5c\u7684\u672f\u8bed\u3002\u6709\u51e0\u4e2a\u6848\u4f8b\u9700\u8981\u8003\u8651\uff0c\u8fd9\u4e9b\u6848\u4f8b\u975e\u5e38\u91cd\u8981\uff1a one-to-one \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u662f\u552f\u4e00\u503c\u3002 many-to-one \u8054\u63a5\uff1a\u5176\u4e2d\u4e00\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u662f\u552f\u4e00\u503c\uff0c\u53e6\u4e00\u4e2a\u6709\u91cd\u590d\u503c\u3002 many-to-many \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u6709\u91cd\u590d\u503c\u3002 Caution \u5728\u5217\u4e0a\u8fde\u63a5\u5217\u65f6\uff08\u53ef\u80fd\u662f\u591a\u5bf9\u591a\u8fde\u63a5\uff09\uff0c\u4f20\u9012\u7684 DataFrame \u5bf9\u8c61\u4e0a\u7684\u6240\u6709\u7d22\u5f15 \u90fd\u5c06\u88ab\u4e22\u5f03 \u3002 \u503c\u5f97\u82b1\u4e9b\u65f6\u95f4\u4e86\u89e3\u591a\u5bf9\u591a\u8fde\u63a5\u6848\u4f8b\u7684\u7ed3\u679c\u3002 \u5728SQL/\u6807\u51c6\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u5982\u679c\u952e\u7ec4\u5408\u5728\u4e24\u4e2a\u8868\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u5219\u751f\u6210\u7684\u8868\u5c06\u5177\u6709\u5173\u8054\u6570\u636e\u7684\u7b1b\u5361\u5c14\u79ef\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e00\u4e2a\u7ec4\u5408\u952e\uff0c\u5e76\u4e14\u7ec4\u5408\u952e\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\uff1a left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = 'key' ) \u591a\u4e2a\u7ec4\u5408\u952e\u7684\u793a\u4f8b\uff08\u9ed8\u8ba4 how='inner' \uff09\uff1a left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = [ 'key1' , 'key2' ]) \u5f53\u5de6\u53f3\u4e24\u8fb9\u7684\u7ec4\u5408\u952e\u4e0d\u4e00\u81f4\u65f6\uff0c\u5904\u7406\u884c\u4e3a\u7531 how \u53c2\u6570\u6307\u5b9a\u3002\u4ee5\u4e0b\u662f how \u9009\u9879\u53ca\u5176SQL\u7b49\u6548\u540d\u79f0\u7684\u6458\u8981\uff1a \u5408\u5e76\u65b9\u5f0f SQL\u8fde\u63a5\u540d\u79f0 \u63cf\u8ff0 left LEFT OUTER JOIN \u4ec5\u4fdd\u7559left\u51fa\u73b0\u7684\u7ec4\u5408\u952e right RIGHT OUTER JOIN \u4ec5\u4fdd\u7559right\u51fa\u73b0\u7684\u7ec4\u5408\u952e outer FULL OUTER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u5e76\u96c6 inner INNER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u4ea4\u96c6 result = pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'inner' , on = [ 'key1' , 'key2' ]) \u8fd9\u662f\u7ec4\u5408\u952e\u5177\u6709\u91cd\u590d\u503c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 2 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) result = pd . merge ( left , right , on = 'B' , how = 'outer' ) Caution \u5728\u91cd\u590d\u952e\u4e0a\u8fdb\u884c\u62fc\u63a5\uff0c\u4f1a\u5bfc\u81f4\u8fd4\u56de\u7684DataFrame\u7684\u51fd\u6570\u662f\u539f\u6765\u4e24\u4e2aDataFrame\u884c\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\u3002\u5982\u679cDataFrame\u5f88\u5927\uff0c\u5e94\u8be5\u5bf9\u91cd\u590d\u952e\u8fdb\u884c\u7ba1\u7406\u3002 \u68c0\u67e5\u91cd\u590d\u952e\uff1avalidate \u8fd9\u662f 0.21.0\u7248\u6dfb\u52a0\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u4f7f\u7528 validate \u53c2\u6570\u81ea\u52a8\u68c0\u67e5\u7ec4\u5408\u952e\u4e2d\u662f\u5426\u6709\u610f\u5916\u7684\u91cd\u590d\u9879\u3002\u5728\u5408\u5e76\u64cd\u4f5c\u4e4b\u524d\u68c0\u67e5\u952e\u7684\u552f\u4e00\u6027\uff0c\u53ef\u4ee5\u9632\u6b62\u5185\u5b58\u6ea2\u51fa\u3002\u68c0\u67e5\u7ec4\u5408\u952e\u7684\u552f\u4e00\u6027\u4e5f\u662f\u786e\u4fdd\u6570\u636e\u7ed3\u6784\u7b26\u5408\u9884\u671f\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0cright\u4e2d\u7684 B \u5b58\u5728\u91cd\u590d\u7684\u503c\u3002\u7531\u4e8e\u8fd9\u4e0d\u662f validate \u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u4e00\u5bf9\u4e00\u5408\u5e76\uff0c\u56e0\u6b64\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 1 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) try : result = pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_one\" ) except Exception as e : print ( \"MergeError:\" , e ) MergeError: Merge keys are not unique in right dataset; not a one-to- one merge \u5982\u679c\u7528\u6237\u77e5\u9053\u53f3\u8fb9\u7684\u91cd\u590d\u9879\uff0c DataFrame \u4f46\u8981\u786e\u4fdd\u5de6\u8fb9\u7684DataFrame\u4e2d\u6ca1\u6709\u91cd\u590d\u9879\uff0c\u5219\u53ef\u4ee5\u6539\u7528\u8be5 validate='one_to_many' \u53c2\u6570\uff0c\u8fd9\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_many\" ) A_x B A_y 0 1 1 NaN 1 2 2 4.0 2 2 2 5.0 3 2 2 6.0 \u6307\u793a\u7b26\uff1aindicator merge() \u63a5\u53d7\u6307\u793a\u7b26\u53c2\u6570 indicator \u3002\u5982\u679c indicator=True \uff0c\u5219\u5c06\u4e00\u4e2a\u540d\u4e3a _merge \uff0cdtype\u4e3aCategorical\u7684\u5217\u6dfb\u52a0\u5230\u8f93\u51faDataFrame\u7684\u672b\u5c3e\uff1a indicator _merge \u503c \u4ec5\u51fa\u73b0\u5728 'left' \u7ec4\u5408\u952e left_only \u4ec5\u51fa\u73b0\u5728 'right' \u7ec4\u5408\u952e right_only \u540c\u65f6\u51fa\u73b0\u5728 'left' \u548c 'right' \u7ec4\u5408\u952e both df1 = pd . DataFrame ({ 'col1' : [ 0 , 1 ], 'col_left' : [ 'a' , 'b' ]}) df2 = pd . DataFrame ({ 'col1' : [ 1 , 2 , 2 ], 'col_right' : [ 2 , 2 , 2 ]}) pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = True ) col1 col_left col_right _merge 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only indicator \u53c2\u6570\u8fd8\u53ef\u4ee5\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6307\u6807\u51fd\u6570\u5c06\u4f7f\u7528\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u7684\u503c\u4f5c\u4e3a \u6307\u6807\u5217 \u7684\u540d\u79f0\u3002 pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = 'indicator_column' ) col1 col_left col_right indicator_column 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only \u5408\u5e76\u65f6\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362 \u5408\u5e76\u5c06\u4fdd\u7559\u7ec4\u5408\u952e\u7684\u6570\u636e\u7c7b\u578b left = pd . DataFrame ({ 'key' : [ 1 ], 'v1' : [ 10 ]}) print ( left , \" \\n \" ) right = pd . DataFrame ({ 'key' : [ 1 , 2 ], 'v1' : [ 20 , 30 ]}) print ( right ) key v1 0 1 10 key v1 0 1 20 1 2 30 \u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u7ec4\u5408\u952e\uff1a print ( pd . merge ( left , right , how = 'outer' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' ) . dtypes ) key v1 0 1 10 1 1 20 2 2 30 key int64 v1 int64 dtype: object \u5982\u679c\u7f3a\u5c11\u5f15\u5165\u7684\u503c\uff0c\u5219\u751f\u6210\u7684dtype\u5c06\u88ab\u8f6c\u6362\uff1a print ( pd . merge ( left , right , how = 'outer' , on = 'key' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' , on = 'key' ) . dtypes ) key v1_x v1_y 0 1 10.0 20 1 2 NaN 30 key int64 v1_x float64 v1_y int64 dtype: object \u5408\u5e76\u5c06\u4fdd\u7559mergands\u7684category\u7c7b\u578b\u3002\u53e6\u8bf7\u53c2\u9605\u5173\u4e8e categoricals \u7684\u90e8\u5206\u3002 left\uff1a from pandas.api.types import CategoricalDtype X = pd . Series ( np . random . choice ([ 'foo' , 'bar' ], size = ( 10 ,))) X = X . astype ( CategoricalDtype ( categories = [ 'foo' , 'bar' ])) left = pd . DataFrame ({ 'X' : X , 'Y' : np . random . choice ([ 'one' , 'two' , 'three' ], size = ( 10 ,))}) print ( left , \" \\n \" ) print ( left . dtypes ) X Y 0 bar one 1 bar three 2 foo three 3 bar one 4 bar one 5 bar one 6 foo one 7 bar two 8 bar three 9 bar two X category Y object dtype: object right\uff1a right = pd . DataFrame ({ 'X' : pd . Series ([ 'foo' , 'bar' ], dtype = CategoricalDtype ([ 'foo' , 'bar' ])), 'Z' : [ 1 , 2 ]}) print ( right , \" \\n \" ) print ( right . dtypes ) X Z 0 foo 1 1 bar 2 X category Z int64 dtype: object \u5408\u5e76\u7ed3\u679c\uff1a result = pd . merge ( left , right , how = 'outer' ) print ( result , \" \\n \" ) print ( result . dtypes ) X Y Z 0 bar one 2 1 bar three 2 2 bar one 2 3 bar one 2 4 bar one 2 5 bar two 2 6 bar three 2 7 bar two 2 8 foo three 1 9 foo one 1 X category Y object Z int64 dtype: object \u6ce8\u610f category \u7c7b\u578b\u5fc5\u987b \u5b8c\u5168\u76f8\u540c \uff0c\u8fd9\u610f\u5473\u7740category\u5bf9\u8c61\u6709\u76f8\u540c\u7684\u7c7b\u522b\u548c\u6709\u5e8f\u5c5e\u6027\u3002\u5426\u5219\uff0ccategory\u7c7b\u578b\u5c06\u88ab\u8f6c\u6362\u6210object\u7c7b\u578b\u3002 \u6ce8\u610f \u4e0eobject\u6570\u636e\u7c7b\u578b\u5408\u5e76\u76f8\u6bd4\uff0c\u5728\u76f8\u540c\u7684category\u6570\u636e\u7c7b\u578b\u4e0a\u8fdb\u884c\u5408\u5e76\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002 DataFrame.join() \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) result = left . join ( right ) result = left . join ( right , how = 'outer' ) \u4e0e\u4e0a\u8ff0\u76f8\u540c\uff0c\u4f46\u5e26\u6709 how='inner' \uff1a result = left . join ( right , how = 'inner' ) \u6b64\u5904\u7684\u6570\u636e\u5bf9\u9f50\u5728\u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09\u4e0a\u3002\u4f7f\u7528 merge \u6307\u793a\u5176\u4f7f\u7528\u7d22\u5f15\u7684\u9644\u52a0\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u884c\u4e3a\uff1a result = pd . merge ( left , right , left_index = True , right_index = True , how = 'outer' ) result = pd . merge ( left , right , left_index = True , right_index = True , how = 'inner' ) \u6309 \u7ec4\u5408\u952e\u5217 \u548c \u7d22\u5f15 \u62fc\u63a5\uff1ajoin join() \u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 on \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u6216\u591a\u4e2a\u5217\u540d\uff0c\u5b83\u6307\u5b9a\u4f20\u9012\u7684DataFrame\u5c06\u5728\u539fDataFrame\u4e2d\u7684\u8be5\u5217\u4e0a\u5bf9\u9f50\u3002\u5373\u8fd9\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u5b8c\u5168\u7b49\u4ef7\uff1a left . join ( right , on = key_or_keys ) pd . merge ( left , right , left_on = key_or_keys , right_index = True , how = 'left' , sort = False ) \u663e\u7136\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u79cd\u66f4\u65b9\u4fbf\u7684\u5f62\u5f0f\u3002\u5bf9\u4e8emany-to-one\u62fc\u63a5\uff08\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\u662f\u7ec4\u5408\u952e\uff09\uff0c\u4f7f\u7528 join \u53ef\u80fd\u4f1a\u66f4\u65b9\u4fbf\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' ], 'D' : [ 'D0' , 'D1' ]}, index = [ 'K0' , 'K1' ]) result = left . join ( right , on = 'key' ) result = pd . merge ( left , right , left_on = 'key' , right_index = True , how = 'left' , sort = False ); \u5982\u679c\u7ec4\u5408\u952e\u6709\u591a\u4e2a\uff0c\u4f20\u9012\u7684DataFrame\u5fc5\u987b\u5177\u6709 MultiIndex \uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) index = pd . MultiIndex . from_tuples ([( 'K0' , 'K0' ), ( 'K1' , 'K0' ), ( 'K2' , 'K0' ), ( 'K2' , 'K1' )]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) \u73b0\u5728\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e24\u4e2a\u7ec4\u5408\u952e\u6765\u8fdb\u884c\u62fc\u63a5\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ]) \u9ed8\u8ba4\u7684 DataFrame.join \u662f\u6267\u884c\u5de6\u8054\u63a5\uff08\u5bf9\u4e8eExcel\u7528\u6237\uff0c\u672c\u8d28\u4e0a\u662f\u201c VLOOKUP\u201d\u64cd\u4f5c\uff09\uff0c\u8be5\u8054\u63a5\u4ec5\u4f7f\u7528\u5728\u8c03\u7528DataFrame\u4e2d\u627e\u5230\u7684\u952e\u3002\u5176\u4ed6\u8054\u63a5\u7c7b\u578b\uff08\u4f8b\u5982\u5185\u90e8\u8054\u63a5\uff09\u4e5f\u53ef\u4ee5\u8f7b\u677e\u6267\u884c\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ], how = 'inner' ) \u5982\u60a8\u6240\u89c1\uff0c\u8fd9\u5c06\u5220\u9664\u6240\u6709\u4e0d\u5339\u914d\u7684\u884c\u3002 \u6309 \u5355\u5c42\u7d22\u5f15 \u548c \u591a\u5c42\u7d22\u5f15 \u62fc\u63a5\uff1ajoin \u53ef\u4ee5\u5c06\u5355\u5c42\u7d22\u5f15DataFrame\u4e0e\u591a\u5c42\u7d22\u5f15DataFrame\u7684 \u4e00\u4e2a\u7ea7\u522b \u8fde\u63a5\u8d77\u6765\u3002\u8be5\u7ea7\u522b\u5c06\u4e0e\u5355\u7d22\u5f15DataFrame\u7684\u7d22\u5f15\u540d\u79f0\u548c\u591a\u7d22\u5f15DataFrame\u7684\u7ea7\u522b\u540d\u79f0\u76f8\u5339\u914d left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = pd . Index ([ 'K0' , 'K1' , 'K2' ], name = 'key' )) index = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) result = left . join ( right , how = 'inner' ) \u4e0b\u9762\u7684\u51fd\u6570\u548c\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u7b49\u6548\u7684\uff0c\u4f46 pd.merge \u7684\u4fe1\u606f\u66f4\u8be6\u7ec6\uff0c\u5b58\u50a8\u6548\u7387\u66f4\u9ad8/\u66f4\u5feb\u3002 result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'Y' ]) \u6309MultiIndexes\u62fc\u63a5\uff1ajoin \u53ea\u8981\u5728\u8fde\u63a5\u4e2d\u5b8c\u5168\u4f7f\u7528\u4e86\u53f3\u53c2\u6570\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u8be5\u53c2\u6570\u662f\u5de6\u53c2\u6570\u4e2d\u7d22\u5f15\u7684\u5b50\u96c6\uff0c\u5c31\u53ef\u4ee5\u7528\u6709\u9650\u7684\u65b9\u5f0f\u6765\u652f\u6301\u5b83\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a leftindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' ), [ 1 , 2 ]], names = [ 'abc' , 'xy' , 'num' ]) left = pd . DataFrame ({ 'v1' : range ( 12 )}, index = leftindex ) print ( left , \" \\n \" ) rightindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' )], names = [ 'abc' , 'xy' ]) right = pd . DataFrame ({ 'v2' : [ 100 * i for i in range ( 1 , 7 )]}, index = rightindex ) print ( right , \" \\n \" ) left . join ( right , on = [ 'abc' , 'xy' ], how = 'inner' ) v1 abc xy num a x 1 0 2 1 y 1 2 2 3 b x 1 4 2 5 y 1 6 2 7 c x 1 8 2 9 y 1 10 2 11 v2 abc xy a x 100 y 200 b x 300 y 400 c x 500 y 600 v1 v2 abc xy num a x 1 0 100 2 1 100 y 1 2 200 2 3 200 b x 1 4 300 2 5 300 y 1 6 400 2 7 400 c x 1 8 500 2 9 500 y 1 10 600 2 11 600 \u5982\u679c\u4e0d\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5177\u6709\u4e24\u4e2a\u591a\u7d22\u5f15\u7684\u8054\u63a5\u3002 leftindex = pd . MultiIndex . from_tuples ([( 'K0' , 'X0' ), ( 'K0' , 'X1' ), ( 'K1' , 'X2' )], names = [ 'key' , 'X' ]) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = leftindex ) rightindex = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = rightindex ) result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'X' , 'Y' ]) \u6309\u7167\u5217\u548c\u7d22\u5f15\u5408\u5e76 \u8fd9\u662f 0.23 \u7248\u4e2d\u6dfb\u52a0\u7684\u529f\u80fd\u3002 on \u3001 left_on \u548c right_on \u53c2\u6570\u53ef\u4ee5\u5f15\u7528\u5217\u540d\u6216\u7d22\u5f15\u7ea7\u540d\u79f0\u3002\u8fd9\u5141\u8bb8\u5728\u7d22\u5f15\u548c\u5217\u7684\u7ec4\u5408\u4e0a\u5408\u5e76DataFrame\u5b9e\u4f8b\uff0c\u800c\u4e0d\u5fc5\u91cd\u7f6e\u7d22\u5f15\uff1a left_index = pd . Index ([ 'K0' , 'K0' , 'K1' , 'K2' ], name = 'key1' ) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}, index = left_index ) right_index = pd . Index ([ 'K0' , 'K1' , 'K2' , 'K2' ], name = 'key1' ) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K1' ]}, index = right_index ) result = left . merge ( right , on = [ 'key1' , 'key2' ]) \u503c\u5217\u91cd\u53e0 merge \u51fd\u6570\u7684 suffixes \u53c2\u6570\u63a5\u53d7\u5b57\u7b26\u4e32\u5217\u8868\u7684\u5143\u7ec4\uff0c\u4ee5\u9644\u52a0\u5230\u8f93\u5165DataFrame\u4e2d\u91cd\u53e0\u7684\u5217\u540d\u4ee5\u6d88\u9664\u7ed3\u679c\u5217\u7684\u6b67\u4e49\uff1a left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K2' ], 'v' : [ 1 , 2 , 3 ]}) right = pd . DataFrame ({ 'k' : [ 'K0' , 'K0' , 'K3' ], 'v' : [ 4 , 5 , 6 ]}) result = pd . merge ( left , right , on = 'k' ) result = pd . merge ( left , right , on = 'k' , suffixes = [ '_l' , '_r' ]) DataFrame.join() \u5177\u6709 lsuffix \u548c rsuffix \u884c\u4e3a\u7c7b\u4f3c\u7684\u53c2\u6570\u3002 left = left . set_index ( 'k' ) right = right . set_index ( 'k' ) result = left . join ( right , lsuffix = '_l' , rsuffix = '_r' ) \u62fc\u63a5\u591a\u4e2aDataFrames DataFrames \u4e5f\u53ef\u4ee5\u4f20\u9012\u7684\u5217\u8868\u6216\u5143\u7ec4\u4ee5 join() \u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u5b83\u4eec\u7684\u7d22\u5f15\u4e0a\u3002 right2 = pd . DataFrame ({ 'v' : [ 7 , 8 , 9 ]}, index = [ 'K1' , 'K1' , 'K2' ]) result = left . join ([ right , right2 ]) \u6309\u7d22\u5f15\u586b\u8865\u7f3a\u5931\u503c \u53e6\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u6709\u4e24\u4e2a\u7d22\u5f15\u5b58\u5728\u4ea4\u96c6\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u60f3\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u586b\u8865\u7f3a\u5931\u503c\u3002\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a df1 = pd . DataFrame ([[ np . nan , 3. , 5. ], [ - 4.6 , np . nan , np . nan ], [ np . nan , 7. , np . nan ]]) df2 = pd . DataFrame ([[ - 42.6 , np . nan , - 8.2 ], [ - 5. , 1.6 , 4 ]], index = [ 1 , 2 ]) combine_first() \u65b9\u6cd5\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff1a result = df1 . combine_first ( df2 ) \u8bf7\u6ce8\u610f\uff0c combine_first \u8fd4\u56de\u526f\u672c\uff0c\u800c update() \u5219\u4f1a\u4fee\u6539\u539f\u5bf9\u8c61\uff1a df1 . update ( df2 ) \u5408\u5e76\u65f6\u95f4\u5e8f\u5217 \u5408\u5e76\u6709\u5e8f\u6570\u636e merge_ordered() \u51fd\u6570\u5141\u8bb8\u7ec4\u5408\u65f6\u95f4\u5e8f\u5217\u548c\u5176\u4ed6\u6709\u5e8f\u6570\u636e\u3002 merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ( \"_x\" , \"_y\" ), how = \"outer\" , ) left_by : Group left DataFrame by group columns and merge piece by piece with right DataFrame left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'lv' : [ 1 , 2 , 3 , 4 ], 's' : [ 'a' , 'b' , 'c' , 'd' ]}) right = pd . DataFrame ({ 'k' : [ 'K1' , 'K2' , 'K4' ], 'rv' : [ 1 , 2 , 3 ]}) print ( left , \" \\n \" ) print ( right ) pd . merge_ordered ( left , right , fill_method = None , left_by = 's' ) k lv s 0 K0 1 a 1 K1 2 b 2 K1 3 c 3 K2 4 d k rv 0 K1 1 1 K2 2 2 K4 3 k lv s rv 0 K0 1.0 a NaN 1 K1 NaN a 1.0 2 K2 NaN a 2.0 3 K4 NaN a 3.0 4 K1 2.0 b 1.0 5 K2 NaN b 2.0 6 K4 NaN b 3.0 7 K1 3.0 c 1.0 8 K2 NaN c 2.0 9 K4 NaN c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 NaN d 3.0 \u5b83\u5177\u6709\u4e00\u4e2a\u53ef\u9009 fill_method \u5173\u952e\u5b57\u6765\u586b\u5145\u4e22\u5931\u7684\u6570\u636e\uff1a # \u524d\u5411\u586b\u5145\uff1a\u540e\u9762\u7684\u7f3a\u5931\u503c\u7528\u524d\u9762\u7684\u6570\u5b57\u586b\u5145 pd . merge_ordered ( left , right , fill_method = \"ffill\" , left_by = 's' ) k lv s rv 0 K0 1.0 a NaN 1 K1 1.0 a 1.0 2 K2 1.0 a 2.0 3 K4 1.0 a 3.0 4 K1 2.0 b 1.0 5 K2 2.0 b 2.0 6 K4 2.0 b 3.0 7 K1 3.0 c 1.0 8 K2 3.0 c 2.0 9 K4 3.0 c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 4.0 d 3.0 \u5408\u5e76ASOF merge_asof() \u7c7b\u4f3c\u4e8e\u6709\u5e8f\u5de6\u8054\u63a5\uff0c\u53ea\u662f\u6211\u4eec\u5339\u914d\u6700\u8fd1\u7684\u952e\u800c\u4e0d\u662f\u76f8\u7b49\u7684\u952e\u3002\u5bf9\u4e8e\u5de6\u6570\u636e\u6846\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u9009\u62e9\u53f3\u6570\u636e\u6846\u4e2d\u7684\u6700\u540e\u4e00\u884c\uff0c\u8be5\u884c\u7684on\u952e\u5c0f\u4e8elefs\u952e\u3002\u4e24\u4e2a\u6570\u636e\u5e27\u90fd\u5fc5\u987b\u6309\u952e\u6392\u5e8f\u3002 \u53ef\u9009\u5730\uff0casof\u5408\u5e76\u53ef\u4ee5\u6267\u884c\u9010\u7ec4\u5408\u5e76\u3002\u9664\u4e86on\u952e\u4e0a\u6700\u63a5\u8fd1\u7684\u5339\u914d\u4e4b\u5916\uff0c\u5b83\u4e0eby\u952e\u7684\u5339\u914d\u76f8\u540c merge_asof ( left , right , on = None , left_on = None , right_on = None , left_index = False , right_index = False , by = None , left_by = None , right_by = None , suffixes = ( \"_x\" , \"_y\" ), tolerance = None , allow_exact_matches = True , direction = \"backward\" , ) \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u6709 trades \u548c quotes \uff0c\u6211\u4eec\u60f3\u5408\u5e76\u5b83\u4eec trades = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.038' , '20160525 13:30:00.048' , '20160525 13:30:00.048' , '20160525 13:30:00.048' ]), 'ticker' : [ 'MSFT' , 'MSFT' , 'GOOG' , 'GOOG' , 'AAPL' ], 'price' : [ 51.95 , 51.95 , 720.77 , 720.92 , 98.00 ], 'quantity' : [ 75 , 155 , 100 , 100 , 100 ]}, columns = [ 'time' , 'ticker' , 'price' , 'quantity' ]) quotes = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.023' , '20160525 13:30:00.030' , '20160525 13:30:00.041' , '20160525 13:30:00.048' , '20160525 13:30:00.049' , '20160525 13:30:00.072' , '20160525 13:30:00.075' ]), 'ticker' : [ 'GOOG' , 'MSFT' , 'MSFT' , 'MSFT' , 'GOOG' , 'AAPL' , 'GOOG' , 'MSFT' ], 'bid' : [ 720.50 , 51.95 , 51.97 , 51.99 , 720.50 , 97.99 , 720.50 , 52.01 ], 'ask' : [ 720.93 , 51.96 , 51.98 , 52.00 , 720.93 , 98.01 , 720.88 , 52.03 ]}, columns = [ 'time' , 'ticker' , 'bid' , 'ask' ]) print ( trades , \" \\n \" ) print ( quotes ) time ticker price quantity 0 2016-05-25 13:30:00.023 MSFT 51.95 75 1 2016-05-25 13:30:00.038 MSFT 51.95 155 2 2016-05-25 13:30:00.048 GOOG 720.77 100 3 2016-05-25 13:30:00.048 GOOG 720.92 100 4 2016-05-25 13:30:00.048 AAPL 98.00 100 time ticker bid ask 0 2016-05-25 13:30:00.023 GOOG 720.50 720.93 1 2016-05-25 13:30:00.023 MSFT 51.95 51.96 2 2016-05-25 13:30:00.030 MSFT 51.97 51.98 3 2016-05-25 13:30:00.041 MSFT 51.99 52.00 4 2016-05-25 13:30:00.048 GOOG 720.50 720.93 5 2016-05-25 13:30:00.049 AAPL 97.99 98.01 6 2016-05-25 13:30:00.072 GOOG 720.50 720.88 7 2016-05-25 13:30:00.075 MSFT 52.01 52.03 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u91c7\u7528\u7684\u662fquotes\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u76842\u6beb\u79d2\u5185\u5408\u5e76\uff1a pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '2ms' )) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 NaN NaN 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u768410\u6beb\u79d2\u5185\u5408\u5e76\uff0c\u5e76\u4e14\u4e0d\u5305\u62ec\u7cbe\u786e\u5339\u914d\u3002\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6211\u4eec\u6392\u9664\u4e86\uff08quotes\u7684\uff09\u5b8c\u5168\u5339\u914d\u9879\uff0c\u4f46\u4ee5\u524d\u7684quotes\u786e\u5b9e\u4f1a\u4f20\u64ad\u5230\u90a3\u4e2a\u65f6\u95f4\u70b9\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '10ms' ), allow_exact_matches = False ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 NaN NaN 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 NaN NaN 3 2016-05-25 13:30:00.048 GOOG 720.92 100 NaN NaN 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN","title":"9.7.\u62fc\u63a5"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#concat","text":"\u5728\u6df1\u5165\u7814\u7a76 concat \u51fd\u6570\u7684\u7ec6\u8282\u53ca\u5176\u4f5c\u7528\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) frames = [ df1 , df2 , df3 ] result = pd . concat ( frames ) \u4e0e\u5176\u5728ndarrays\u4e0a\u7684\u540c\u7ea7\u51fd\u6570\u4e00\u6837 numpy.concatenate \uff0c pandas.concat \u83b7\u53d6\u540c\u7c7b\u7c7b\u578b\u5bf9\u8c61\u7684\u5217\u8868\u6216\u5b57\u5178\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u201c\u5bf9\u5176\u4ed6\u8f74\u7684\u64cd\u4f5c\u201d\u7684\u4e00\u4e9b\u53ef\u914d\u7f6e\u5904\u7406\u8fdb\u884c\u8fde\u63a5\uff1a pd . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , copy = True ) objs \uff1aSeries\u6216DataFrame\u5bf9\u8c61\u7684\u5e8f\u5217\u6216\u6620\u5c04\u3002\u5982\u679c\u4f20\u9012\u4e86dict \uff0c\u5219\u9664\u975e\u4f20\u9012\u4e86\u6392\u5e8f\u7684\u952e\uff0c\u5426\u5219\u5c06\u4f7f\u7528\u6392\u5e8f\u540e\u7684\u952e\u4f5c\u4e3akeys\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u9009\u62e9\u503c\uff08\u8bf7\u53c2\u89c1\u4e0b\u6587\uff09\u3002\u9664\u975e\u5b83\u4eec\u90fd\u4e3aNone\uff0c\u5426\u5219\u6240\u6709None\u5bf9\u8c61\u90fd\u5c06\u88ab\u9759\u9ed8\u5220\u9664\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5f15\u53d1ValueError\u3002 axis \uff1a {0,1,\u2026} \uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002\u6cbf\u7740\u8be5\u8f74\u8fdb\u884c\u62fc\u63a5\u3002 join \uff1a {'inner','outer'} \uff0c\u9ed8\u8ba4\u4e3a 'outer' \u3002\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u3002 'outer' \u4e3a\u5e76\u96c6\uff0c 'inner' \u4e3a\u4ea4\u96c6\u3002 ignore_index \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u5982\u679c\u4e3aTrue\uff0c\u5219\u75280, \u2026, n-1\u4ee3\u66ff\u4e32\u8054\u8f74\u7684\u539f\u7d22\u5f15\u3002\u6ce8\u610f\uff0c\u62fc\u63a5\u65f6\u4ecd\u4f1a\u8003\u8651\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u503c\u3002 keys \uff1a\u5e8f\u5217\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u4f7f\u7528\u4f20\u9012\u7684\u952e\u4f5c\u4e3a\u6700\u5916\u5c42\u7ea7\u522b\u6765\u6784\u9020\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u3002\u5982\u679c\u901a\u8fc7\u4e86\u591a\u4e2a\u7ea7\u522b\uff0c\u5219\u5e94\u5305\u542b\u5143\u7ec4\u3002 levels \uff1a\u5e8f\u5217\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u7528\u4e8e\u6784\u9020MultiIndex\u7684\u7279\u5b9a\u7ea7\u522b\uff08\u552f\u4e00\u503c\uff09\u3002\u5426\u5219\uff0c\u5c06\u4ece\u6309\u952e\u63a8\u65ad\u51fa\u5b83\u4eec\u3002 names \uff1a\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u751f\u6210\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u4e2d\u7684\u7ea7\u522b\u7684\u540d\u79f0\u3002 verify_integrity \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u68c0\u67e5\u65b0\u7684\u4e32\u8054\u8f74\u662f\u5426\u5305\u542b\u91cd\u590d\u9879\u3002\u76f8\u5bf9\u4e8e\u5b9e\u9645\u6570\u636e\u4e32\u8054\u800c\u8a00\uff0c\u8fd9\u53ef\u80fd\u975e\u5e38\u6602\u8d35\u3002 copy \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aTrue\u3002\u5982\u679c\u4e3aFalse\uff0c\u5728\u975e\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u3002 \u6ca1\u6709\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba8\u8bba\u8fd9\u4e9b\u53c2\u6570\u7684\u4f5c\u7528\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u56de\u987e\u4e00\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u5c06\u7279\u5b9a\u7684\u952e\u4e0e\u5404\u4e2a\u5f85\u62fc\u63a5\u7684DataFrame\u76f8\u5173\u8054\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 keys \u53c2\u6570\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd4\u56de\u5bf9\u8c61\u7684\u7d22\u5f15\u5177\u6709 \u5c42\u6b21\u7ed3\u6784\u7d22\u5f15 \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u952e\u9009\u62e9\u6bcf\u4e2a\u5757\uff1a result . loc [ 'y' ] A B C D 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 \u610f\u8bc6\u5230\u8fd9\u4e2a\u529f\u80fd\u662f\u975e\u5e38\u6709\u7528\u7684\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\uff0c\u6709\u5173\u6b64\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u53c2\u89c1\u4e0b\u6587\u3002 Note \u503c\u5f97\u6ce8\u610f\u7684\u662f concat() \u4f1a\u5b8c\u6574\u590d\u5236\u6570\u636e\uff08 append() \u65b9\u6cd5\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u4e0d\u65ad\u91cd\u590d\u4f7f\u7528\u6b64\u51fd\u6570\u4f1a\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002\u5982\u679c\u9700\u8981\u5bf9\u591a\u4e2a\u6570\u636e\u96c6\u4f7f\u7528\u8be5\u64cd\u4f5c\uff0c\u8bf7\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 frames = [ process_your_file ( f ) for f in files ] result = pd . concat ( frames )","title":"concat\u51fd\u6570"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#join","text":"\u5c06\u591a\u4e2aDataFrame\u7c98\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\uff08\u800c\u4e0d\u662f\u4e32\u8054\u7684\u8f74\uff09\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5b8c\u6210\uff1a \u628a\u5b83\u4eec\u5168\u90e8\u7ed3\u5408\u8d77\u6765 join='outer' \u3002\u8fd9\u662f\u9ed8\u8ba4\u9009\u9879\uff0c\u8fd9\u4e0d\u4f1a\u4e22\u5931\u4fe1\u606f\u3002 \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \u3002 \u9ed8\u8ba4 join='outer' \uff1a df4 = pd . DataFrame ({ 'B' : [ 'B2' , 'B3' , 'B6' , 'B7' ], 'D' : [ 'D2' , 'D3' , 'D6' , 'D7' ], 'F' : [ 'F2' , 'F3' , 'F6' , 'F7' ]}, index = [ 2 , 3 , 7 , 6 ]) result = pd . concat ([ df1 , df4 ], axis = 1 , sort = True , join = \"outer\" ) \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \uff1a result = pd . concat ([ df1 , df4 ], axis = 1 , join = 'inner' ) \u5982\u679c\u53ea\u60f3\u7528\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\uff1a result = pd . concat ([ df1 , df4 ], axis = 1 ) . reindex ( df1 . index ) \u4e5f\u53ef\u4ee5\u5728\u8fde\u63a5\u4e4b\u524d\u5efa\u7acb\u7d22\u5f15\uff1a pd . concat ([ df1 , df4 . reindex ( df1 . index )], axis = 1 ) A B C D B D F 0 A0 B0 C0 D0 NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN 2 A2 B2 C2 D2 B2 D2 F2 3 A3 B3 C3 D3 B3 D3 F3","title":"\u5904\u7406\u5176\u4ed6\u8f74\u7684\u903b\u8f91\uff1ajoin\u53c2\u6570"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#append","text":"append() \u662fSeries\u548cDataFrame\u7684 \u5b9e\u4f8b\u65b9\u6cd5 \uff0c\u5b83\u662f concat() \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c append \u6bd4 concat \u66f4\u65e9\u51fa\u73b0\u3002 append \u65b9\u6cd5\u8ba9Series\u548cDataFrame\u6cbf\u7740\u884c\uff08 axis=0 \uff09\u62fc\u63a5\u5728\u4e00\u8d77\uff1a append ( self , other , ignore_index = False , verify_integrity = False , sort = None ) append \u4e0d\u8981\u6c42\u4e24\u4e2aDataFrame\u7684\u884c\u7d22\u5f15\u6216\u5217\u7d22\u5f15\u4ea4\u96c6\u4e3a\u7a7a\uff1a result = df1 . append ( df4 , sort = False , ignore_index = True ) append \u53ef\u4ee5\u62fc\u63a5\u591a\u4e2a\u5bf9\u8c61\uff1a result = df1 . append ([ df2 , df3 ]) \u4e0elist\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4e0d\u540c\uff0cDataFrame\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u526f\u672c\uff0c \u4e0d\u4f1a\u4fee\u6539 df1 \u3002","title":"\u4f7f\u7528append\u62fc\u63a5"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#ignore_index","text":"\u5982\u679c DataFrame \u7684\u7d22\u5f15\u6ca1\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528 ignore_index \u53c2\u6570\uff1a result = pd . concat ([ df1 , df4 ], ignore_index = True , sort = False ) DataFrame.append() \u65b9\u6cd5\u4e5f\u6709\u8fd9\u4e2a\u53c2\u6570\uff1a result = df1 . append ( df4 , ignore_index = True , sort = False )","title":"\u5ffd\u7565\u4e32\u8054\u8f74\u4e0a\u7684\u7d22\u5f15\uff1aignore_index"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#seriesdataframe","text":"\u53ef\u4ee5\u62fc\u63a5 Series \u548c DataFrame \u3002\u8be5 Series \u4f1a\u8f6c\u5316\u4e3a DataFrame \u7684\u4e00\u5217\uff0c\u5217\u540d\u662f Series \u7684 name \u3002 s1 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], name = 'X' ) result = pd . concat ([ df1 , s1 ], axis = 1 ) \u5982\u679c Series \u672a\u547d\u540d\uff0c\u5219\u5c06\u8fde\u7eed\u7f16\u53f7\u3002 s2 = pd . Series ([ '_0' , '_1' , '_2' , '_3' ]) result = pd . concat ([ df1 , s2 , s2 , s2 ], axis = 1 ) \u901a\u8fc7 ignore_index=True \u5220\u9664\u539f\u6709\u7d22\u5f15\u6807\u7b7e\u3002 result = pd . concat ([ df1 , s1 ], axis = 1 , ignore_index = True )","title":"\u6df7\u5408\u4e32\u8054Series\u548cDataFrame"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#key","text":"keys \u53c2\u6570\u7684\u4e00\u4e2a\u76f8\u5f53\u666e\u904d\u7684\u7528\u6cd5\u662f\u91cd\u65b0\u6307\u5b9a\u539fDataFrame\u6216Series\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u62fc\u63a5\u540e\u7684DataFrame\u7684\u5217\u7d22\u5f15\uff1a s3 = pd . Series ([ 0 , 1 , 2 , 3 ], name = 'foo' ) s4 = pd . Series ([ 0 , 1 , 2 , 3 ]) s5 = pd . Series ([ 0 , 1 , 4 , 5 ]) pd . concat ([ s3 , s4 , s5 ], axis = 1 ) foo 0 1 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u901a\u8fc7 keys \u53c2\u6570\uff0c\u53ef\u4ee5\u8986\u76d6\u73b0\u6709\u7684\u5217\u540d\u3002 pd . concat ([ s3 , s4 , s5 ], axis = 1 , keys = [ 'red' , 'blue' , 'yellow' ]) red blue yellow 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u8ba9\u6211\u4eec\u8003\u8651\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7684\u53d8\u4f53\uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd8\u53ef\u4ee5\u5c06\u9700\u8981\u62fc\u63a5\u7684DataFrame\u4ee5dict\u5f62\u5f0f\u4f20\u9012\u7ed9 concat \u51fd\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdict\u952e\u5c06\u7528\u4f5c keys \u53c2\u6570\uff08\u9664\u975e\u6307\u5b9a\u4e86\u5176\u4ed6\u952e\uff09\uff1a pieces = { 'x' : df1 , 'y' : df2 , 'z' : df3 } result = pd . concat ( pieces ) result = pd . concat ( pieces , keys = [ 'z' , 'y' ]) \u521b\u5efa\u7684MultiIndex\u7531\u4f20\u9012\u7684\u952e\u548c DataFrame \u884c\u7d22\u5f15\u6784\u9020\uff1a result . index . levels FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \u5982\u679c\u60f3\u6307\u5b9a\u5176\u4ed6\u7ea7\u522b\uff08\u5076\u5c14\u4f1a\u8fd9\u6837\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b levels \u53c2\u6570\uff1a result = pd . concat ( pieces , keys = [ 'x' , 'y' , 'z' ], levels = [[ 'z' , 'y' , 'x' , 'w' ]], names = [ 'group_key' ]) result . index . levels FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]])","title":"key\u53c2\u6570"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#dataframe","text":"\u5c3d\u7ba1\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff08\u56e0\u4e3a\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff09\uff0c\u4f46\u662f\u53ef\u4ee5\u5411 append \u4f20\u9012\u4e00\u4e2a Series \u6216dict\u6765\u5c06\u4e00\u884c\u9644\u52a0\u5230 DataFrame \uff1a s2 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], index = [ 'A' , 'B' , 'C' , 'D' ]) result = df1 . append ( s2 , ignore_index = True ) \u8fd8\u53ef\u4ee5\u4f20\u9012\u5b57\u5178\u6216\u7cfb\u5217\u7684\u5217\u8868\uff1a dicts = [{ 'A' : 1 , 'B' : 2 , 'C' : 3 , 'X' : 4 }, { 'A' : 5 , 'B' : 6 , 'C' : 7 , 'Y' : 8 }] result = df1 . append ( dicts , ignore_index = True , sort = False )","title":"\u884c\u8ffd\u52a0\u5230 DataFrame"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_1","text":"pandas\u5177\u6709\u5168\u529f\u80fd\u3001\u9ad8\u6027\u80fd\u7684\u5185\u5b58\u8fde\u63a5\u64cd\u4f5c\uff0c\u4e0eSQL\u7b49\u5173\u7cfb\u6570\u636e\u5e93\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6027\u80fd\u6bd4\u5176\u4ed6\u5f00\u6e90\u5b9e\u73b0\uff08\u5982R\u4e2d\u7684 base::merge.data.frame \uff09\u8981\u597d\u5f97\u591a\uff08\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u751a\u81f3\u8d85\u8fc7\u4e00\u4e2a\u6570\u91cf\u7ea7\uff09\u3002\u539f\u56e0\u662f\u4ed4\u7ec6\u7684\u7b97\u6cd5\u8bbe\u8ba1\u548cDataFrame\u7684\u6570\u636e\u7684\u5185\u90e8\u5e03\u5c40\u3002 pandas\u63d0\u4f9b\u51fd\u6570 merge() \uff0c\u4f5c\u4e3aDataFrame\u6216Series\u5bf9\u8c61\u4e4b\u95f4\u6240\u6709\u6807\u51c6\u6570\u636e\u5e93\u62fc\u63a5\u64cd\u4f5c\u7684\u5165\u53e3\u70b9\uff1a pd . merge ( left , right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = True , suffixes = ( '_x' , '_y' ), copy = True , indicator = False , validate = None ) left \uff1a\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 right \uff1a\u53e6\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u5b83\u6307\u5b9a\u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\u7684 label \u3002\u5e76\u4e14\u5fc5\u987b\u5728\u4e24\u4e2a DataFrame \u4e2d\u8fd9\u4e9b label \u90fd\u5b58\u5728\u3002\u5982\u679c\u5b83\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u4e24\u4e2a DataFrame \u7684\u5217 label \u7684\u4ea4\u96c6\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 left_on/right_on \u5206\u522b\u6307\u5b9a\u4e24\u4fa7 DataFrame \u5bf9\u9f50\u7684\u8fde\u63a5\u952e\u3002 left_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u5de6\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 right_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u53f3\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 left_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u5de6\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 right_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u53f3\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 how \uff1a\u5176\u4e00 'left' \uff0c 'right' \uff0c 'outer' \uff0c 'inner' \u3002\u9ed8\u8ba4\u4e3a inner \u3002\u6709\u5173\u6bcf\u79cd\u65b9\u6cd5\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1\u4e0b\u6587\u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5728\u7ed3\u679c\u4e2d\uff0c\u5bf9\u5408\u5e76\u91c7\u7528\u7684\u8fde\u63a5\u952e\u8fdb\u884c\u6392\u5e8f\u3002 suffixes \uff1a\u4e00\u4e2a\u4e8c\u5143\u5e8f\u5217\u3002\u5bf9\u4e8e\u7ed3\u679c\u4e2d\u540c\u540d\u7684\u5217\uff0c\u5b83\u4f1a\u6dfb\u52a0\u524d\u7f00\u6765\u6307\u793a\u5b83\u4eec\u6765\u81ea\u54ea\u4e2a DataFrame \u3002 copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e\u3002\u5426\u5219\u4e0d\u62f7\u8d1d\u6570\u636e\u3002 indicator \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\u79f0\u4f5c _merge \uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 \u5982\u679c\u4e3a\u5b57\u7b26\u4e32\uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\uff08\u8be5\u5217\u540d\u5b57\u7531 indicator \u5b57\u7b26\u4e32\u7ed9\u51fa\uff09\uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 validate \uff1a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u5982\u679c\u6307\u5b9a\uff0c\u5219\u68c0\u67e5\u5408\u5e76\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\u3002 'one_to_one'\u6216'1:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u53f3\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'one_to_many'\u6216'1:m'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_one'\u6216'm:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u6b63\u786e\u7684\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_many'\u6216'm:m'\uff1a\u5141\u8bb8\uff0c\u4f46\u4e0d\u8fdb\u884c\u68c0\u67e5\u3002 \u65b0\u529f\u80fd 0.23.0\u7248\u672c\u4e2d\u6dfb\u52a0\u4e86\u6307\u5b9a\u7d22\u5f15\u7ea7\u522b\u7684 on \u3001 left_on \u3001 right_on \u53c2\u6570\u7684\u652f\u6301\u3002\u57280.24.0\u7248\u4e2d\u6dfb\u52a0\u4e86\u5bf9\u88ab\u547d\u540d\u7684Series\u5408\u5e76\u7684\u652f\u6301\u3002 merge \u662fpandas\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3aDataFrame\u5b9e\u4f8b\u65b9\u6cd5 merge() \u4f7f\u7528\uff0c\u8c03\u7528 DataFrame.merge \u65f6\uff0c DataFrame \u88ab\u89c6\u4e3a\u62fc\u63a5\u4e2d\u7684\u5de6\u4fa7\u5bf9\u8c61\u3002 \u76f8\u5173 join() \u65b9\u6cd5\u5728 merge \u5185\u90e8\u7528\u4e8e\u7d22\u5f15\u7d22\u5f15\u8fde\u63a5\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\u548c\u7d22\u5f15\u5217\u8fde\u63a5\u3002\u5982\u679c\u4ec5\u52a0\u5165\u7d22\u5f15\uff0c\u5219\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 DataFrame.join \u6765\u8282\u7701\u4e00\u4e9b\u8f93\u5165\u3002","title":"\u6570\u636e\u5e93\u5f62\u5f0f\u7684\u62fc\u63a5"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_2","text":"\u6709\u7ecf\u9a8c\u7684\u5173\u7cfb\u6570\u636e\u5e93\uff08\u5982SQL\uff09\u7528\u6237\u5c06\u719f\u6089\u7528\u4e8e\u63cf\u8ff0\u4e24\u4e2aSQL\u7c7b\u8868\u7ed3\u6784\uff08DataFrame\u5bf9\u8c61\uff09\u4e4b\u95f4\u7684\u8fde\u63a5\u64cd\u4f5c\u7684\u672f\u8bed\u3002\u6709\u51e0\u4e2a\u6848\u4f8b\u9700\u8981\u8003\u8651\uff0c\u8fd9\u4e9b\u6848\u4f8b\u975e\u5e38\u91cd\u8981\uff1a one-to-one \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u662f\u552f\u4e00\u503c\u3002 many-to-one \u8054\u63a5\uff1a\u5176\u4e2d\u4e00\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u662f\u552f\u4e00\u503c\uff0c\u53e6\u4e00\u4e2a\u6709\u91cd\u590d\u503c\u3002 many-to-many \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u6709\u91cd\u590d\u503c\u3002 Caution \u5728\u5217\u4e0a\u8fde\u63a5\u5217\u65f6\uff08\u53ef\u80fd\u662f\u591a\u5bf9\u591a\u8fde\u63a5\uff09\uff0c\u4f20\u9012\u7684 DataFrame \u5bf9\u8c61\u4e0a\u7684\u6240\u6709\u7d22\u5f15 \u90fd\u5c06\u88ab\u4e22\u5f03 \u3002 \u503c\u5f97\u82b1\u4e9b\u65f6\u95f4\u4e86\u89e3\u591a\u5bf9\u591a\u8fde\u63a5\u6848\u4f8b\u7684\u7ed3\u679c\u3002 \u5728SQL/\u6807\u51c6\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u5982\u679c\u952e\u7ec4\u5408\u5728\u4e24\u4e2a\u8868\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u5219\u751f\u6210\u7684\u8868\u5c06\u5177\u6709\u5173\u8054\u6570\u636e\u7684\u7b1b\u5361\u5c14\u79ef\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e00\u4e2a\u7ec4\u5408\u952e\uff0c\u5e76\u4e14\u7ec4\u5408\u952e\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\uff1a left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = 'key' ) \u591a\u4e2a\u7ec4\u5408\u952e\u7684\u793a\u4f8b\uff08\u9ed8\u8ba4 how='inner' \uff09\uff1a left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = [ 'key1' , 'key2' ]) \u5f53\u5de6\u53f3\u4e24\u8fb9\u7684\u7ec4\u5408\u952e\u4e0d\u4e00\u81f4\u65f6\uff0c\u5904\u7406\u884c\u4e3a\u7531 how \u53c2\u6570\u6307\u5b9a\u3002\u4ee5\u4e0b\u662f how \u9009\u9879\u53ca\u5176SQL\u7b49\u6548\u540d\u79f0\u7684\u6458\u8981\uff1a \u5408\u5e76\u65b9\u5f0f SQL\u8fde\u63a5\u540d\u79f0 \u63cf\u8ff0 left LEFT OUTER JOIN \u4ec5\u4fdd\u7559left\u51fa\u73b0\u7684\u7ec4\u5408\u952e right RIGHT OUTER JOIN \u4ec5\u4fdd\u7559right\u51fa\u73b0\u7684\u7ec4\u5408\u952e outer FULL OUTER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u5e76\u96c6 inner INNER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u4ea4\u96c6 result = pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'inner' , on = [ 'key1' , 'key2' ]) \u8fd9\u662f\u7ec4\u5408\u952e\u5177\u6709\u91cd\u590d\u503c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 2 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) result = pd . merge ( left , right , on = 'B' , how = 'outer' ) Caution \u5728\u91cd\u590d\u952e\u4e0a\u8fdb\u884c\u62fc\u63a5\uff0c\u4f1a\u5bfc\u81f4\u8fd4\u56de\u7684DataFrame\u7684\u51fd\u6570\u662f\u539f\u6765\u4e24\u4e2aDataFrame\u884c\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\u3002\u5982\u679cDataFrame\u5f88\u5927\uff0c\u5e94\u8be5\u5bf9\u91cd\u590d\u952e\u8fdb\u884c\u7ba1\u7406\u3002","title":"\u5408\u5e76\u65b9\u6cd5\u7b80\u4ecb\uff08\u5173\u7cfb\u4ee3\u6570\uff09"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#validate","text":"\u8fd9\u662f 0.21.0\u7248\u6dfb\u52a0\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u4f7f\u7528 validate \u53c2\u6570\u81ea\u52a8\u68c0\u67e5\u7ec4\u5408\u952e\u4e2d\u662f\u5426\u6709\u610f\u5916\u7684\u91cd\u590d\u9879\u3002\u5728\u5408\u5e76\u64cd\u4f5c\u4e4b\u524d\u68c0\u67e5\u952e\u7684\u552f\u4e00\u6027\uff0c\u53ef\u4ee5\u9632\u6b62\u5185\u5b58\u6ea2\u51fa\u3002\u68c0\u67e5\u7ec4\u5408\u952e\u7684\u552f\u4e00\u6027\u4e5f\u662f\u786e\u4fdd\u6570\u636e\u7ed3\u6784\u7b26\u5408\u9884\u671f\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0cright\u4e2d\u7684 B \u5b58\u5728\u91cd\u590d\u7684\u503c\u3002\u7531\u4e8e\u8fd9\u4e0d\u662f validate \u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u4e00\u5bf9\u4e00\u5408\u5e76\uff0c\u56e0\u6b64\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 1 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) try : result = pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_one\" ) except Exception as e : print ( \"MergeError:\" , e ) MergeError: Merge keys are not unique in right dataset; not a one-to- one merge \u5982\u679c\u7528\u6237\u77e5\u9053\u53f3\u8fb9\u7684\u91cd\u590d\u9879\uff0c DataFrame \u4f46\u8981\u786e\u4fdd\u5de6\u8fb9\u7684DataFrame\u4e2d\u6ca1\u6709\u91cd\u590d\u9879\uff0c\u5219\u53ef\u4ee5\u6539\u7528\u8be5 validate='one_to_many' \u53c2\u6570\uff0c\u8fd9\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_many\" ) A_x B A_y 0 1 1 NaN 1 2 2 4.0 2 2 2 5.0 3 2 2 6.0","title":"\u68c0\u67e5\u91cd\u590d\u952e\uff1avalidate"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#indicator","text":"merge() \u63a5\u53d7\u6307\u793a\u7b26\u53c2\u6570 indicator \u3002\u5982\u679c indicator=True \uff0c\u5219\u5c06\u4e00\u4e2a\u540d\u4e3a _merge \uff0cdtype\u4e3aCategorical\u7684\u5217\u6dfb\u52a0\u5230\u8f93\u51faDataFrame\u7684\u672b\u5c3e\uff1a indicator _merge \u503c \u4ec5\u51fa\u73b0\u5728 'left' \u7ec4\u5408\u952e left_only \u4ec5\u51fa\u73b0\u5728 'right' \u7ec4\u5408\u952e right_only \u540c\u65f6\u51fa\u73b0\u5728 'left' \u548c 'right' \u7ec4\u5408\u952e both df1 = pd . DataFrame ({ 'col1' : [ 0 , 1 ], 'col_left' : [ 'a' , 'b' ]}) df2 = pd . DataFrame ({ 'col1' : [ 1 , 2 , 2 ], 'col_right' : [ 2 , 2 , 2 ]}) pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = True ) col1 col_left col_right _merge 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only indicator \u53c2\u6570\u8fd8\u53ef\u4ee5\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6307\u6807\u51fd\u6570\u5c06\u4f7f\u7528\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u7684\u503c\u4f5c\u4e3a \u6307\u6807\u5217 \u7684\u540d\u79f0\u3002 pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = 'indicator_column' ) col1 col_left col_right indicator_column 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only","title":"\u6307\u793a\u7b26\uff1aindicator"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_3","text":"\u5408\u5e76\u5c06\u4fdd\u7559\u7ec4\u5408\u952e\u7684\u6570\u636e\u7c7b\u578b left = pd . DataFrame ({ 'key' : [ 1 ], 'v1' : [ 10 ]}) print ( left , \" \\n \" ) right = pd . DataFrame ({ 'key' : [ 1 , 2 ], 'v1' : [ 20 , 30 ]}) print ( right ) key v1 0 1 10 key v1 0 1 20 1 2 30 \u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u7ec4\u5408\u952e\uff1a print ( pd . merge ( left , right , how = 'outer' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' ) . dtypes ) key v1 0 1 10 1 1 20 2 2 30 key int64 v1 int64 dtype: object \u5982\u679c\u7f3a\u5c11\u5f15\u5165\u7684\u503c\uff0c\u5219\u751f\u6210\u7684dtype\u5c06\u88ab\u8f6c\u6362\uff1a print ( pd . merge ( left , right , how = 'outer' , on = 'key' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' , on = 'key' ) . dtypes ) key v1_x v1_y 0 1 10.0 20 1 2 NaN 30 key int64 v1_x float64 v1_y int64 dtype: object \u5408\u5e76\u5c06\u4fdd\u7559mergands\u7684category\u7c7b\u578b\u3002\u53e6\u8bf7\u53c2\u9605\u5173\u4e8e categoricals \u7684\u90e8\u5206\u3002 left\uff1a from pandas.api.types import CategoricalDtype X = pd . Series ( np . random . choice ([ 'foo' , 'bar' ], size = ( 10 ,))) X = X . astype ( CategoricalDtype ( categories = [ 'foo' , 'bar' ])) left = pd . DataFrame ({ 'X' : X , 'Y' : np . random . choice ([ 'one' , 'two' , 'three' ], size = ( 10 ,))}) print ( left , \" \\n \" ) print ( left . dtypes ) X Y 0 bar one 1 bar three 2 foo three 3 bar one 4 bar one 5 bar one 6 foo one 7 bar two 8 bar three 9 bar two X category Y object dtype: object right\uff1a right = pd . DataFrame ({ 'X' : pd . Series ([ 'foo' , 'bar' ], dtype = CategoricalDtype ([ 'foo' , 'bar' ])), 'Z' : [ 1 , 2 ]}) print ( right , \" \\n \" ) print ( right . dtypes ) X Z 0 foo 1 1 bar 2 X category Z int64 dtype: object \u5408\u5e76\u7ed3\u679c\uff1a result = pd . merge ( left , right , how = 'outer' ) print ( result , \" \\n \" ) print ( result . dtypes ) X Y Z 0 bar one 2 1 bar three 2 2 bar one 2 3 bar one 2 4 bar one 2 5 bar two 2 6 bar three 2 7 bar two 2 8 foo three 1 9 foo one 1 X category Y object Z int64 dtype: object \u6ce8\u610f category \u7c7b\u578b\u5fc5\u987b \u5b8c\u5168\u76f8\u540c \uff0c\u8fd9\u610f\u5473\u7740category\u5bf9\u8c61\u6709\u76f8\u540c\u7684\u7c7b\u522b\u548c\u6709\u5e8f\u5c5e\u6027\u3002\u5426\u5219\uff0ccategory\u7c7b\u578b\u5c06\u88ab\u8f6c\u6362\u6210object\u7c7b\u578b\u3002 \u6ce8\u610f \u4e0eobject\u6570\u636e\u7c7b\u578b\u5408\u5e76\u76f8\u6bd4\uff0c\u5728\u76f8\u540c\u7684category\u6570\u636e\u7c7b\u578b\u4e0a\u8fdb\u884c\u5408\u5e76\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002","title":"\u5408\u5e76\u65f6\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#dataframejoin","text":"\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) result = left . join ( right ) result = left . join ( right , how = 'outer' ) \u4e0e\u4e0a\u8ff0\u76f8\u540c\uff0c\u4f46\u5e26\u6709 how='inner' \uff1a result = left . join ( right , how = 'inner' ) \u6b64\u5904\u7684\u6570\u636e\u5bf9\u9f50\u5728\u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09\u4e0a\u3002\u4f7f\u7528 merge \u6307\u793a\u5176\u4f7f\u7528\u7d22\u5f15\u7684\u9644\u52a0\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u884c\u4e3a\uff1a result = pd . merge ( left , right , left_index = True , right_index = True , how = 'outer' ) result = pd . merge ( left , right , left_index = True , right_index = True , how = 'inner' )","title":"DataFrame.join()"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#join_1","text":"join() \u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 on \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u6216\u591a\u4e2a\u5217\u540d\uff0c\u5b83\u6307\u5b9a\u4f20\u9012\u7684DataFrame\u5c06\u5728\u539fDataFrame\u4e2d\u7684\u8be5\u5217\u4e0a\u5bf9\u9f50\u3002\u5373\u8fd9\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u5b8c\u5168\u7b49\u4ef7\uff1a left . join ( right , on = key_or_keys ) pd . merge ( left , right , left_on = key_or_keys , right_index = True , how = 'left' , sort = False ) \u663e\u7136\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u79cd\u66f4\u65b9\u4fbf\u7684\u5f62\u5f0f\u3002\u5bf9\u4e8emany-to-one\u62fc\u63a5\uff08\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\u662f\u7ec4\u5408\u952e\uff09\uff0c\u4f7f\u7528 join \u53ef\u80fd\u4f1a\u66f4\u65b9\u4fbf\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' ], 'D' : [ 'D0' , 'D1' ]}, index = [ 'K0' , 'K1' ]) result = left . join ( right , on = 'key' ) result = pd . merge ( left , right , left_on = 'key' , right_index = True , how = 'left' , sort = False ); \u5982\u679c\u7ec4\u5408\u952e\u6709\u591a\u4e2a\uff0c\u4f20\u9012\u7684DataFrame\u5fc5\u987b\u5177\u6709 MultiIndex \uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) index = pd . MultiIndex . from_tuples ([( 'K0' , 'K0' ), ( 'K1' , 'K0' ), ( 'K2' , 'K0' ), ( 'K2' , 'K1' )]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) \u73b0\u5728\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e24\u4e2a\u7ec4\u5408\u952e\u6765\u8fdb\u884c\u62fc\u63a5\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ]) \u9ed8\u8ba4\u7684 DataFrame.join \u662f\u6267\u884c\u5de6\u8054\u63a5\uff08\u5bf9\u4e8eExcel\u7528\u6237\uff0c\u672c\u8d28\u4e0a\u662f\u201c VLOOKUP\u201d\u64cd\u4f5c\uff09\uff0c\u8be5\u8054\u63a5\u4ec5\u4f7f\u7528\u5728\u8c03\u7528DataFrame\u4e2d\u627e\u5230\u7684\u952e\u3002\u5176\u4ed6\u8054\u63a5\u7c7b\u578b\uff08\u4f8b\u5982\u5185\u90e8\u8054\u63a5\uff09\u4e5f\u53ef\u4ee5\u8f7b\u677e\u6267\u884c\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ], how = 'inner' ) \u5982\u60a8\u6240\u89c1\uff0c\u8fd9\u5c06\u5220\u9664\u6240\u6709\u4e0d\u5339\u914d\u7684\u884c\u3002","title":"\u6309\u7ec4\u5408\u952e\u5217\u548c\u7d22\u5f15\u62fc\u63a5\uff1ajoin"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#join_2","text":"\u53ef\u4ee5\u5c06\u5355\u5c42\u7d22\u5f15DataFrame\u4e0e\u591a\u5c42\u7d22\u5f15DataFrame\u7684 \u4e00\u4e2a\u7ea7\u522b \u8fde\u63a5\u8d77\u6765\u3002\u8be5\u7ea7\u522b\u5c06\u4e0e\u5355\u7d22\u5f15DataFrame\u7684\u7d22\u5f15\u540d\u79f0\u548c\u591a\u7d22\u5f15DataFrame\u7684\u7ea7\u522b\u540d\u79f0\u76f8\u5339\u914d left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = pd . Index ([ 'K0' , 'K1' , 'K2' ], name = 'key' )) index = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) result = left . join ( right , how = 'inner' ) \u4e0b\u9762\u7684\u51fd\u6570\u548c\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u7b49\u6548\u7684\uff0c\u4f46 pd.merge \u7684\u4fe1\u606f\u66f4\u8be6\u7ec6\uff0c\u5b58\u50a8\u6548\u7387\u66f4\u9ad8/\u66f4\u5feb\u3002 result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'Y' ])","title":"\u6309\u5355\u5c42\u7d22\u5f15\u548c\u591a\u5c42\u7d22\u5f15\u62fc\u63a5\uff1ajoin"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#multiindexesjoin","text":"\u53ea\u8981\u5728\u8fde\u63a5\u4e2d\u5b8c\u5168\u4f7f\u7528\u4e86\u53f3\u53c2\u6570\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u8be5\u53c2\u6570\u662f\u5de6\u53c2\u6570\u4e2d\u7d22\u5f15\u7684\u5b50\u96c6\uff0c\u5c31\u53ef\u4ee5\u7528\u6709\u9650\u7684\u65b9\u5f0f\u6765\u652f\u6301\u5b83\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a leftindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' ), [ 1 , 2 ]], names = [ 'abc' , 'xy' , 'num' ]) left = pd . DataFrame ({ 'v1' : range ( 12 )}, index = leftindex ) print ( left , \" \\n \" ) rightindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' )], names = [ 'abc' , 'xy' ]) right = pd . DataFrame ({ 'v2' : [ 100 * i for i in range ( 1 , 7 )]}, index = rightindex ) print ( right , \" \\n \" ) left . join ( right , on = [ 'abc' , 'xy' ], how = 'inner' ) v1 abc xy num a x 1 0 2 1 y 1 2 2 3 b x 1 4 2 5 y 1 6 2 7 c x 1 8 2 9 y 1 10 2 11 v2 abc xy a x 100 y 200 b x 300 y 400 c x 500 y 600 v1 v2 abc xy num a x 1 0 100 2 1 100 y 1 2 200 2 3 200 b x 1 4 300 2 5 300 y 1 6 400 2 7 400 c x 1 8 500 2 9 500 y 1 10 600 2 11 600 \u5982\u679c\u4e0d\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5177\u6709\u4e24\u4e2a\u591a\u7d22\u5f15\u7684\u8054\u63a5\u3002 leftindex = pd . MultiIndex . from_tuples ([( 'K0' , 'X0' ), ( 'K0' , 'X1' ), ( 'K1' , 'X2' )], names = [ 'key' , 'X' ]) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = leftindex ) rightindex = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = rightindex ) result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'X' , 'Y' ])","title":"\u6309MultiIndexes\u62fc\u63a5\uff1ajoin"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_4","text":"\u8fd9\u662f 0.23 \u7248\u4e2d\u6dfb\u52a0\u7684\u529f\u80fd\u3002 on \u3001 left_on \u548c right_on \u53c2\u6570\u53ef\u4ee5\u5f15\u7528\u5217\u540d\u6216\u7d22\u5f15\u7ea7\u540d\u79f0\u3002\u8fd9\u5141\u8bb8\u5728\u7d22\u5f15\u548c\u5217\u7684\u7ec4\u5408\u4e0a\u5408\u5e76DataFrame\u5b9e\u4f8b\uff0c\u800c\u4e0d\u5fc5\u91cd\u7f6e\u7d22\u5f15\uff1a left_index = pd . Index ([ 'K0' , 'K0' , 'K1' , 'K2' ], name = 'key1' ) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}, index = left_index ) right_index = pd . Index ([ 'K0' , 'K1' , 'K2' , 'K2' ], name = 'key1' ) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K1' ]}, index = right_index ) result = left . merge ( right , on = [ 'key1' , 'key2' ])","title":"\u6309\u7167\u5217\u548c\u7d22\u5f15\u5408\u5e76"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_5","text":"merge \u51fd\u6570\u7684 suffixes \u53c2\u6570\u63a5\u53d7\u5b57\u7b26\u4e32\u5217\u8868\u7684\u5143\u7ec4\uff0c\u4ee5\u9644\u52a0\u5230\u8f93\u5165DataFrame\u4e2d\u91cd\u53e0\u7684\u5217\u540d\u4ee5\u6d88\u9664\u7ed3\u679c\u5217\u7684\u6b67\u4e49\uff1a left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K2' ], 'v' : [ 1 , 2 , 3 ]}) right = pd . DataFrame ({ 'k' : [ 'K0' , 'K0' , 'K3' ], 'v' : [ 4 , 5 , 6 ]}) result = pd . merge ( left , right , on = 'k' ) result = pd . merge ( left , right , on = 'k' , suffixes = [ '_l' , '_r' ]) DataFrame.join() \u5177\u6709 lsuffix \u548c rsuffix \u884c\u4e3a\u7c7b\u4f3c\u7684\u53c2\u6570\u3002 left = left . set_index ( 'k' ) right = right . set_index ( 'k' ) result = left . join ( right , lsuffix = '_l' , rsuffix = '_r' )","title":"\u503c\u5217\u91cd\u53e0"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#dataframes","text":"DataFrames \u4e5f\u53ef\u4ee5\u4f20\u9012\u7684\u5217\u8868\u6216\u5143\u7ec4\u4ee5 join() \u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u5b83\u4eec\u7684\u7d22\u5f15\u4e0a\u3002 right2 = pd . DataFrame ({ 'v' : [ 7 , 8 , 9 ]}, index = [ 'K1' , 'K1' , 'K2' ]) result = left . join ([ right , right2 ])","title":"\u62fc\u63a5\u591a\u4e2aDataFrames"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_6","text":"\u53e6\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u6709\u4e24\u4e2a\u7d22\u5f15\u5b58\u5728\u4ea4\u96c6\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u60f3\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u586b\u8865\u7f3a\u5931\u503c\u3002\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a df1 = pd . DataFrame ([[ np . nan , 3. , 5. ], [ - 4.6 , np . nan , np . nan ], [ np . nan , 7. , np . nan ]]) df2 = pd . DataFrame ([[ - 42.6 , np . nan , - 8.2 ], [ - 5. , 1.6 , 4 ]], index = [ 1 , 2 ]) combine_first() \u65b9\u6cd5\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff1a result = df1 . combine_first ( df2 ) \u8bf7\u6ce8\u610f\uff0c combine_first \u8fd4\u56de\u526f\u672c\uff0c\u800c update() \u5219\u4f1a\u4fee\u6539\u539f\u5bf9\u8c61\uff1a df1 . update ( df2 )","title":"\u6309\u7d22\u5f15\u586b\u8865\u7f3a\u5931\u503c"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_7","text":"","title":"\u5408\u5e76\u65f6\u95f4\u5e8f\u5217"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#_8","text":"merge_ordered() \u51fd\u6570\u5141\u8bb8\u7ec4\u5408\u65f6\u95f4\u5e8f\u5217\u548c\u5176\u4ed6\u6709\u5e8f\u6570\u636e\u3002 merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ( \"_x\" , \"_y\" ), how = \"outer\" , ) left_by : Group left DataFrame by group columns and merge piece by piece with right DataFrame left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'lv' : [ 1 , 2 , 3 , 4 ], 's' : [ 'a' , 'b' , 'c' , 'd' ]}) right = pd . DataFrame ({ 'k' : [ 'K1' , 'K2' , 'K4' ], 'rv' : [ 1 , 2 , 3 ]}) print ( left , \" \\n \" ) print ( right ) pd . merge_ordered ( left , right , fill_method = None , left_by = 's' ) k lv s 0 K0 1 a 1 K1 2 b 2 K1 3 c 3 K2 4 d k rv 0 K1 1 1 K2 2 2 K4 3 k lv s rv 0 K0 1.0 a NaN 1 K1 NaN a 1.0 2 K2 NaN a 2.0 3 K4 NaN a 3.0 4 K1 2.0 b 1.0 5 K2 NaN b 2.0 6 K4 NaN b 3.0 7 K1 3.0 c 1.0 8 K2 NaN c 2.0 9 K4 NaN c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 NaN d 3.0 \u5b83\u5177\u6709\u4e00\u4e2a\u53ef\u9009 fill_method \u5173\u952e\u5b57\u6765\u586b\u5145\u4e22\u5931\u7684\u6570\u636e\uff1a # \u524d\u5411\u586b\u5145\uff1a\u540e\u9762\u7684\u7f3a\u5931\u503c\u7528\u524d\u9762\u7684\u6570\u5b57\u586b\u5145 pd . merge_ordered ( left , right , fill_method = \"ffill\" , left_by = 's' ) k lv s rv 0 K0 1.0 a NaN 1 K1 1.0 a 1.0 2 K2 1.0 a 2.0 3 K4 1.0 a 3.0 4 K1 2.0 b 1.0 5 K2 2.0 b 2.0 6 K4 2.0 b 3.0 7 K1 3.0 c 1.0 8 K2 3.0 c 2.0 9 K4 3.0 c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 4.0 d 3.0","title":"\u5408\u5e76\u6709\u5e8f\u6570\u636e"},{"location":"pandas/9.7.%E6%8B%BC%E6%8E%A5.html#asof","text":"merge_asof() \u7c7b\u4f3c\u4e8e\u6709\u5e8f\u5de6\u8054\u63a5\uff0c\u53ea\u662f\u6211\u4eec\u5339\u914d\u6700\u8fd1\u7684\u952e\u800c\u4e0d\u662f\u76f8\u7b49\u7684\u952e\u3002\u5bf9\u4e8e\u5de6\u6570\u636e\u6846\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u9009\u62e9\u53f3\u6570\u636e\u6846\u4e2d\u7684\u6700\u540e\u4e00\u884c\uff0c\u8be5\u884c\u7684on\u952e\u5c0f\u4e8elefs\u952e\u3002\u4e24\u4e2a\u6570\u636e\u5e27\u90fd\u5fc5\u987b\u6309\u952e\u6392\u5e8f\u3002 \u53ef\u9009\u5730\uff0casof\u5408\u5e76\u53ef\u4ee5\u6267\u884c\u9010\u7ec4\u5408\u5e76\u3002\u9664\u4e86on\u952e\u4e0a\u6700\u63a5\u8fd1\u7684\u5339\u914d\u4e4b\u5916\uff0c\u5b83\u4e0eby\u952e\u7684\u5339\u914d\u76f8\u540c merge_asof ( left , right , on = None , left_on = None , right_on = None , left_index = False , right_index = False , by = None , left_by = None , right_by = None , suffixes = ( \"_x\" , \"_y\" ), tolerance = None , allow_exact_matches = True , direction = \"backward\" , ) \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u6709 trades \u548c quotes \uff0c\u6211\u4eec\u60f3\u5408\u5e76\u5b83\u4eec trades = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.038' , '20160525 13:30:00.048' , '20160525 13:30:00.048' , '20160525 13:30:00.048' ]), 'ticker' : [ 'MSFT' , 'MSFT' , 'GOOG' , 'GOOG' , 'AAPL' ], 'price' : [ 51.95 , 51.95 , 720.77 , 720.92 , 98.00 ], 'quantity' : [ 75 , 155 , 100 , 100 , 100 ]}, columns = [ 'time' , 'ticker' , 'price' , 'quantity' ]) quotes = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.023' , '20160525 13:30:00.030' , '20160525 13:30:00.041' , '20160525 13:30:00.048' , '20160525 13:30:00.049' , '20160525 13:30:00.072' , '20160525 13:30:00.075' ]), 'ticker' : [ 'GOOG' , 'MSFT' , 'MSFT' , 'MSFT' , 'GOOG' , 'AAPL' , 'GOOG' , 'MSFT' ], 'bid' : [ 720.50 , 51.95 , 51.97 , 51.99 , 720.50 , 97.99 , 720.50 , 52.01 ], 'ask' : [ 720.93 , 51.96 , 51.98 , 52.00 , 720.93 , 98.01 , 720.88 , 52.03 ]}, columns = [ 'time' , 'ticker' , 'bid' , 'ask' ]) print ( trades , \" \\n \" ) print ( quotes ) time ticker price quantity 0 2016-05-25 13:30:00.023 MSFT 51.95 75 1 2016-05-25 13:30:00.038 MSFT 51.95 155 2 2016-05-25 13:30:00.048 GOOG 720.77 100 3 2016-05-25 13:30:00.048 GOOG 720.92 100 4 2016-05-25 13:30:00.048 AAPL 98.00 100 time ticker bid ask 0 2016-05-25 13:30:00.023 GOOG 720.50 720.93 1 2016-05-25 13:30:00.023 MSFT 51.95 51.96 2 2016-05-25 13:30:00.030 MSFT 51.97 51.98 3 2016-05-25 13:30:00.041 MSFT 51.99 52.00 4 2016-05-25 13:30:00.048 GOOG 720.50 720.93 5 2016-05-25 13:30:00.049 AAPL 97.99 98.01 6 2016-05-25 13:30:00.072 GOOG 720.50 720.88 7 2016-05-25 13:30:00.075 MSFT 52.01 52.03 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u91c7\u7528\u7684\u662fquotes\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u76842\u6beb\u79d2\u5185\u5408\u5e76\uff1a pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '2ms' )) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 NaN NaN 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u768410\u6beb\u79d2\u5185\u5408\u5e76\uff0c\u5e76\u4e14\u4e0d\u5305\u62ec\u7cbe\u786e\u5339\u914d\u3002\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6211\u4eec\u6392\u9664\u4e86\uff08quotes\u7684\uff09\u5b8c\u5168\u5339\u914d\u9879\uff0c\u4f46\u4ee5\u524d\u7684quotes\u786e\u5b9e\u4f1a\u4f20\u64ad\u5230\u90a3\u4e2a\u65f6\u95f4\u70b9\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '10ms' ), allow_exact_matches = False ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 NaN NaN 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 NaN NaN 3 2016-05-25 13:30:00.048 GOOG 720.92 100 NaN NaN 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN","title":"\u5408\u5e76ASOF"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html","text":"from toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 \u91cd\u5851\u548c\u6570\u636e\u900f\u89c6\u8868 pivot DataFrame.pivot() \u65b9\u6cd5\u91cd\u6392\u6570\u636e\u3002\u5b83\u662f\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u5b83\u4f7f\u7528 set_index \u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u7136\u540e\u4f7f\u7528 unstack \u5c06\u884c\u7d22\u5f15\u8f6c\u4e3a\u5217\u7d22\u5f15\u3002 DataFrame . pivot ( index = None , columns = None , values = None ) index \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6307\u5b9a\u4e86\u4e00\u4e2a column name \uff0c\u7528\u8be5\u5217\u6570\u636e\u6765 set_index \uff08\u5c06\u8be5\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u5220\u9664\u4e86\u539f\u6765\u7684\u65e7\u7684\u884c\u7d22\u5f15\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4e0d\u6267\u884c set_index columns \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684 columns labels \u3002 \u5b9e\u9645\u4e0a\u5bf9 index,clumns \u6307\u5b9a\u7684\u5217\u6570\u636e\u5747 set_index\uff0c\u7136\u540e\u4ec5\u5bf9 columns \u5bf9\u5e94\u7684\u5217\u6570\u636e unstack values \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u5269\u4f59\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002 \u521b\u5efa\u793a\u4f8bDataFrame\uff1a import pandas.util.testing as tm tm . N = 3 def unpivot ( frame ): N , K = frame . shape data = { 'value' : frame . to_numpy () . ravel ( 'F' ), 'variable' : np . asarray ( frame . columns ) . repeat ( N ), 'date' : np . tile ( np . asarray ( frame . index ), K )} return pd . DataFrame ( data , columns = [ 'date' , 'variable' , 'value' ]) df = unpivot ( tm . makeTimeDataFrame ()) df <ipython-input-1-c759587b01cf>:1: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm date variable value 0 2000-01-03 A -1.437586 1 2000-01-04 A 0.352864 2 2000-01-05 A 1.099420 3 2000-01-06 A -0.051995 4 2000-01-07 A 0.409526 .. ... ... ... 115 2000-02-07 D -1.339131 116 2000-02-08 D 0.143948 117 2000-02-09 D -0.373942 118 2000-02-10 D -0.848771 119 2000-02-11 D -0.057774 [120 rows x 3 columns] \u8981\u9009\u62e9\u6240\u6709 variable=A \u7684\u503c\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a df [ df [ 'variable' ] == 'A' ] date variable value 0 2000-01-03 A -1.437586 1 2000-01-04 A 0.352864 2 2000-01-05 A 1.099420 3 2000-01-06 A -0.051995 4 2000-01-07 A 0.409526 5 2000-01-10 A 0.144346 6 2000-01-11 A -0.715936 7 2000-01-12 A -0.574886 8 2000-01-13 A 0.355633 9 2000-01-14 A -0.854062 10 2000-01-17 A -1.390756 11 2000-01-18 A -0.858560 12 2000-01-19 A 0.061217 13 2000-01-20 A 0.922660 14 2000-01-21 A -0.219987 15 2000-01-24 A -0.449889 16 2000-01-25 A 0.379426 17 2000-01-26 A -0.535521 18 2000-01-27 A 0.828712 19 2000-01-28 A 0.775460 20 2000-01-31 A 1.130726 21 2000-02-01 A -0.761980 22 2000-02-02 A 0.017099 23 2000-02-03 A -1.019257 24 2000-02-04 A 0.570145 25 2000-02-07 A -0.926868 26 2000-02-08 A 0.687364 27 2000-02-09 A -2.141394 28 2000-02-10 A -1.712443 29 2000-02-11 A 0.065981 \u4f46\u662f\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5bf9\u53d8\u91cf\u8fdb\u884c\u65f6\u95f4\u5e8f\u5217\u8fd0\u7b97\uff0c\u66f4\u597d\u7684\u8868\u793a\u65b9\u6cd5\u662f\u5217\u662f\u552f\u4e00\u7684\u53d8\u91cf\uff0c\u884c\u7d22\u5f15\u4f5c\u4e3a\u65e5\u671f\u3002\u4e3a\u4e86\u5c06\u6570\u636e\u91cd\u5851\u4e3a\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 DataFrame.pivot() \u65b9\u6cd5\uff08\u4e5f\u5b9e\u73b0\u4e3a\u9876\u7ea7\u51fd\u6570 pivot() \uff09\uff1a df . pivot ( index = 'date' , columns = 'variable' , values = 'value' ) variable A B C D date 2000-01-03 -1.437586 -0.375699 -0.055645 0.919826 2000-01-04 0.352864 0.951894 -0.520288 0.989879 2000-01-05 1.099420 -0.392494 -1.162514 -0.486960 2000-01-06 -0.051995 -1.443095 -1.358171 -0.603839 2000-01-07 0.409526 -1.884634 -1.312974 0.221538 2000-01-10 0.144346 -0.717420 -1.271591 0.512724 2000-01-11 -0.715936 0.910706 0.077753 -0.877894 2000-01-12 -0.574886 0.098610 0.625141 0.930686 2000-01-13 0.355633 -1.714175 -0.255866 1.233093 2000-01-14 -0.854062 -0.830568 -0.328820 0.207676 2000-01-17 -1.390756 -0.003498 -0.668644 1.049648 2000-01-18 -0.858560 1.971157 -0.290487 -0.346132 2000-01-19 0.061217 -1.179151 -0.056592 1.559197 2000-01-20 0.922660 -1.394511 -0.559055 1.471623 2000-01-21 -0.219987 -0.369561 0.401979 -1.015507 2000-01-24 -0.449889 -0.829321 0.240785 -1.071999 2000-01-25 0.379426 0.718853 0.936607 0.330572 2000-01-26 -0.535521 0.818111 0.053013 -0.006994 2000-01-27 0.828712 0.909418 -0.024341 -0.180239 2000-01-28 0.775460 -0.420637 -0.831211 0.783222 2000-01-31 1.130726 0.617039 0.252906 -1.286801 2000-02-01 -0.761980 -0.912396 0.816028 1.819718 2000-02-02 0.017099 0.969371 1.170034 0.279352 2000-02-03 -1.019257 -2.477050 1.399122 0.609937 2000-02-04 0.570145 -1.071966 0.395569 0.677166 2000-02-07 -0.926868 0.664901 -1.077138 -1.339131 2000-02-08 0.687364 0.538077 -0.980296 0.143948 2000-02-09 -2.141394 2.404900 -2.430820 -0.373942 2000-02-10 -1.712443 -0.012297 -1.172405 -0.848771 2000-02-11 0.065981 -0.575658 -1.233321 -0.057774 \u5982\u679c\u7701\u7565 values \u53c2\u6570\uff0c\u5e76\u4e14\u8f93\u5165 DataFrame \u5177\u6709\u591a\u4e8e\u4e00\u5217\u7684\u503c\uff0c\u5219\u7ed3\u679cDataFrame\u5c06\u5177\u6709\u591a\u5c42\u6b21\u5217\u7d22\u5f15\uff1a df [ 'value2' ] = df [ 'value' ] * 2 print ( df ) pivoted = df . pivot ( index = 'date' , columns = 'variable' ) pivoted date variable value value2 0 2000-01-03 A -1.437586 -2.875172 1 2000-01-04 A 0.352864 0.705727 2 2000-01-05 A 1.099420 2.198841 3 2000-01-06 A -0.051995 -0.103990 4 2000-01-07 A 0.409526 0.819052 .. ... ... ... ... 115 2000-02-07 D -1.339131 -2.678261 116 2000-02-08 D 0.143948 0.287896 117 2000-02-09 D -0.373942 -0.747883 118 2000-02-10 D -0.848771 -1.697541 119 2000-02-11 D -0.057774 -0.115548 [120 rows x 4 columns] value ... value2 variable A B C ... B C D date ... 2000-01-03 -1.437586 -0.375699 -0.055645 ... -0.751399 -0.111290 1.839652 2000-01-04 0.352864 0.951894 -0.520288 ... 1.903789 -1.040575 1.979758 2000-01-05 1.099420 -0.392494 -1.162514 ... -0.784988 -2.325028 -0.973921 2000-01-06 -0.051995 -1.443095 -1.358171 ... -2.886189 -2.716342 -1.207678 2000-01-07 0.409526 -1.884634 -1.312974 ... -3.769269 -2.625947 0.443077 2000-01-10 0.144346 -0.717420 -1.271591 ... -1.434839 -2.543182 1.025449 2000-01-11 -0.715936 0.910706 0.077753 ... 1.821411 0.155507 -1.755789 2000-01-12 -0.574886 0.098610 0.625141 ... 0.197221 1.250282 1.861373 2000-01-13 0.355633 -1.714175 -0.255866 ... -3.428349 -0.511733 2.466185 2000-01-14 -0.854062 -0.830568 -0.328820 ... -1.661136 -0.657641 0.415353 2000-01-17 -1.390756 -0.003498 -0.668644 ... -0.006995 -1.337288 2.099296 2000-01-18 -0.858560 1.971157 -0.290487 ... 3.942314 -0.580974 -0.692265 2000-01-19 0.061217 -1.179151 -0.056592 ... -2.358302 -0.113183 3.118394 2000-01-20 0.922660 -1.394511 -0.559055 ... -2.789021 -1.118111 2.943246 2000-01-21 -0.219987 -0.369561 0.401979 ... -0.739123 0.803957 -2.031014 2000-01-24 -0.449889 -0.829321 0.240785 ... -1.658642 0.481570 -2.143998 2000-01-25 0.379426 0.718853 0.936607 ... 1.437706 1.873214 0.661143 2000-01-26 -0.535521 0.818111 0.053013 ... 1.636222 0.106027 -0.013988 2000-01-27 0.828712 0.909418 -0.024341 ... 1.818836 -0.048683 -0.360478 2000-01-28 0.775460 -0.420637 -0.831211 ... -0.841275 -1.662422 1.566444 2000-01-31 1.130726 0.617039 0.252906 ... 1.234078 0.505812 -2.573602 2000-02-01 -0.761980 -0.912396 0.816028 ... -1.824792 1.632056 3.639436 2000-02-02 0.017099 0.969371 1.170034 ... 1.938742 2.340069 0.558704 2000-02-03 -1.019257 -2.477050 1.399122 ... -4.954099 2.798244 1.219874 2000-02-04 0.570145 -1.071966 0.395569 ... -2.143932 0.791139 1.354333 2000-02-07 -0.926868 0.664901 -1.077138 ... 1.329801 -2.154276 -2.678261 2000-02-08 0.687364 0.538077 -0.980296 ... 1.076154 -1.960592 0.287896 2000-02-09 -2.141394 2.404900 -2.430820 ... 4.809799 -4.861640 -0.747883 2000-02-10 -1.712443 -0.012297 -1.172405 ... -0.024594 -2.344810 -1.697541 2000-02-11 0.065981 -0.575658 -1.233321 ... -1.151316 -2.466642 -0.115548 [30 rows x 8 columns] \u6ce8\u610f \u5982\u679c\u7d22\u5f15\u5305\u542b\u91cd\u590d\u9879\uff0c pivot() \u5c06\u51fa\u9519\uff0c\u65e0\u6cd5\u91cd\u5851\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 pivot_table() \uff0c\u5b83\u662fpivot\u7684\u6cdb\u5316\uff0c\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u7d22\u5f15/\u5217\u5bf9\u7684\u91cd\u590d\u503c\u3002 stack DataFrame.stack() \u65b9\u6cd5\u5c06\u6570\u636e\u7684\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.stack(level=-1, dropna=True) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u5217\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15 dropna \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5982\u679c\u7ed3\u679c\u4e2d\u67d0\u884c\u5168\u4e3a NaN \uff0c\u5219\u629b\u5f03\u8be5\u884c \u65cb\u8f6c\u65f6\uff0c\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\uff0c\u65b0\u7684\u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15\uff0c\u6700\u5185\u5c42\u7684\u884c\u7d22\u5f15\u5c31\u662f\u539f\u6765\u7684\u5217\u7d22\u5f15\u3002 \u6700\u6e05\u6670\u7684\u89e3\u91ca\u65b9\u5f0f\u662f\u901a\u8fc7\u793a\u4f8b\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u6570\u636e\uff1a tuples = list ( zip ( * [[ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ 'A' , 'B' ]) df2 = df [: 4 ] df2 A B first second bar one 0.356997 0.520660 two 0.767193 0.358417 baz one -1.138801 1.721517 two 1.183038 0.494700 stacked = df2 . stack () stacked first second bar one A 0.356997 B 0.520660 two A 0.767193 B 0.358417 baz one A -1.138801 B 1.721517 two A 1.183038 B 0.494700 dtype: float64 unstack \u4e0e DataFrame.stack() \u5bf9\u5e94\u7684\u5c31\u662f DataFrame.unstack() \u65b9\u6cd5\u3002 \u5b83\u5c06\u6570\u636e\u7684\u884c\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.unstack(level=-1, fill_value=None) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u884c\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u5217\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u5982\u679c\u7ed3\u679c\u4e2d\u6709 NaN \uff0c\u5219\u4f7f\u7528 fill_value \u66ff\u6362\u3002 unstack \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6700\u540e\u4e00\u7ea7\u884c\u7d22\u5f15\u8f6c\u6362\u6210\u5217\u7d22\u5f15\uff1a print ( stacked ) first second bar one A 0.356997 B 0.520660 two A 0.767193 B 0.358417 baz one A -1.138801 B 1.721517 two A 1.183038 B 0.494700 dtype: float64 stacked . unstack () A B first second bar one 0.356997 0.520660 two 0.767193 0.358417 baz one -1.138801 1.721517 two 1.183038 0.494700 stacked . unstack ( 1 ) second one two first bar A 0.356997 0.767193 B 0.520660 0.358417 baz A -1.138801 1.183038 B 1.721517 0.494700 stacked . unstack ( 0 ) first bar baz second one A 0.356997 -1.138801 B 0.520660 1.721517 two A 0.767193 1.183038 B 0.358417 0.494700 \u5982\u679c\u7d22\u5f15\u5177\u6709\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7ea7\u522b\u540d\u79f0\u800c\u4e0d\u662f\u6307\u5b9a\u7ea7\u522b\u7f16\u53f7\uff1a stacked . unstack ( 'second' ) second one two first bar A 0.356997 0.767193 B 0.520660 0.358417 baz A -1.138801 1.183038 B 1.721517 0.494700 \u6ce8\u610f\uff0c stack \u548c unstack \u65b9\u6cd5\u4f1a\u9690\u5f0f\u5730\u5bf9\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff1a index = pd . MultiIndex . from_product ([[ 2 , 1 ], [ 'a' , 'b' ]]) df = pd . DataFrame ( np . random . randn ( 4 ), index = index , columns = [ 'A' ]) print ( df , \" \\n \" ) print ( df . unstack () . stack ()) all ( df . unstack () . stack () == df . sort_index ()) A 2 a -0.744983 b 0.403788 1 a -0.670924 b 0.323262 A 1 a -0.670924 b 0.323262 2 a -0.744983 b 0.403788 True \u591a\u7ea7\u522b\u7d22\u5f15 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u7d22\u5f15\u540d\u5b57\u5217\u8868\u6765\u4e00\u6b21\u5806\u6808\u6216\u53d6\u6d88\u5806\u6808\u591a\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u597d\u50cf\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u90fd\u662f\u5355\u72ec\u5904\u7406\u7684\uff1a columns = pd . MultiIndex . from_tuples ([ ( 'A' , 'cat' , 'long' ), ( 'B' , 'cat' , 'long' ), ( 'A' , 'dog' , 'short' ), ( 'B' , 'dog' , 'short' )], names = [ 'exp' , 'animal' , 'hair_length' ]) df = pd . DataFrame ( np . random . randn ( 4 , 4 ), columns = columns ) print ( df ) df . stack ( level = [ 'animal' , 'hair_length' ]) exp A B A B animal cat cat dog dog hair_length long long short short 0 0.142677 0.555537 0.790900 0.946638 1 1.562582 -1.247811 1.024215 0.270163 2 -0.718084 0.281816 -0.352203 -1.414307 3 -1.375110 -1.840107 -0.569607 -0.105886 exp A B animal hair_length 0 cat long 0.142677 0.555537 dog short 0.790900 0.946638 1 cat long 1.562582 -1.247811 dog short 1.024215 0.270163 2 cat long -0.718084 0.281816 dog short -0.352203 -1.414307 3 cat long -1.375110 -1.840107 dog short -0.569607 -0.105886 \u7d22\u5f15\u5217\u8868\u53ef\u4ee5\u5305\u542b\u7d22\u5f15\u540d\u79f0\u6216\u7d22\u5f15\u7ea7\u522b\u7684\u7f16\u53f7\uff08\u4f46\u4e0d\u80fd\u540c\u65f6\u5305\u542b\u4e24\u8005\uff09\uff1a # df.stack(level=['animal', 'hair_length']) # from above is equivalent to: df . stack ( level = [ 1 , 2 ]) exp A B animal hair_length 0 cat long 0.142677 0.555537 dog short 0.790900 0.946638 1 cat long 1.562582 -1.247811 dog short 1.024215 0.270163 2 cat long -0.718084 0.281816 dog short -0.352203 -1.414307 3 cat long -1.375110 -1.840107 dog short -0.569607 -0.105886 \u7f3a\u5931\u6570\u636e \u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u5904\u7406\u4e22\u5931\u7684\u6570\u636e\u975e\u5e38\u667a\u80fd\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u5c42\u6b21\u7d22\u5f15\u4e2d\u7684\u6bcf\u4e2a\u5b50\u7ec4\u90fd\u5177\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\u3002\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5904\u7406\u672a\u6392\u5e8f\u7684\u7d22\u5f15\uff08\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528sort_index\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff09\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff1a columns = pd . MultiIndex . from_tuples ([( 'A' , 'cat' ), ( 'B' , 'dog' ), ( 'B' , 'cat' ), ( 'A' , 'dog' )], names = [ 'exp' , 'animal' ]) index = pd . MultiIndex . from_product ([( 'bar' , 'baz' , 'foo' , 'qux' ), ( 'one' , 'two' )], names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = index , columns = columns ) df2 = df . iloc [[ 0 , 1 , 2 , 4 , 5 , 7 ]] print ( df2 ) exp A B A animal cat dog cat dog first second bar one -0.554986 0.904972 -0.638632 1.241733 two -0.084460 -0.696432 -1.054553 0.320973 baz one -0.521877 -1.259968 -0.316586 -0.936647 foo one 0.454518 -0.296394 -0.756271 -0.671541 two -0.769256 -0.442409 0.967575 -0.186108 qux two -0.529094 -0.540748 0.965472 -0.430767 \u5982\u4e0a\u6240\u8ff0\uff0c stack \u53ef\u4ee5\u4f7f\u7528 level \u53c2\u6570\u6765\u8c03\u7528\u4ee5\u9009\u62e9\u8981\u5806\u53e0\u7684\u5217\u4e2d\u7684\u7ea7\u522b\uff1a df2 . stack ( 'exp' ) animal cat dog first second exp bar one A -0.554986 1.241733 B -0.638632 0.904972 two A -0.084460 0.320973 B -1.054553 -0.696432 baz one A -0.521877 -0.936647 B -0.316586 -1.259968 foo one A 0.454518 -0.671541 B -0.756271 -0.296394 two A -0.769256 -0.186108 B 0.967575 -0.442409 qux two A -0.529094 -0.430767 B 0.965472 -0.540748 df2 . stack ( 'animal' ) exp A B first second animal bar one cat -0.554986 -0.638632 dog 1.241733 0.904972 two cat -0.084460 -1.054553 dog 0.320973 -0.696432 baz one cat -0.521877 -0.316586 dog -0.936647 -1.259968 foo one cat 0.454518 -0.756271 dog -0.671541 -0.296394 two cat -0.769256 0.967575 dog -0.186108 -0.442409 qux two cat -0.529094 0.965472 dog -0.430767 -0.540748 \u5982\u679c\u5b50\u7ec4\u6ca1\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\uff0c\u5219\u53d6\u6d88\u5806\u53e0\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f3a\u5c11\u503c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u66ff\u6362\u4e3a\u8be5\u6570\u636e\u7c7b\u578b\u7684\u9ed8\u8ba4\u586b\u5145\u503c\uff0cNaN\u8868\u793a\u6d6e\u70b9\uff0cNaT\u8868\u793adatetimelike\uff0c\u7b49\u7b49\u3002\u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5c06\u8f6c\u6362\u4e3a\u6d6e\u70b9\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u8bbe\u7f6e\u4e3aNaN\uff1a df3 = df . iloc [[ 0 , 1 , 4 , 7 ], [ 1 , 2 ]] print ( df3 ) df3 . unstack () exp B animal dog cat first second bar one 0.904972 -0.638632 two -0.696432 -1.054553 foo one -0.296394 -0.756271 qux two -0.540748 0.965472 exp B animal dog cat second one two one two first bar 0.904972 -0.696432 -0.638632 -1.054553 foo -0.296394 NaN -0.756271 NaN qux NaN -0.540748 NaN 0.965472 \u6216\u8005\u8bbe\u7f6e fill_value \u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u7f3a\u5931\u6570\u636e\u7684\u503c\u3002 df3 . unstack ( fill_value =- 1e9 ) exp B animal dog cat second one two one two first bar 9.049723e-01 -6.964319e-01 -6.386318e-01 -1.054553e+00 foo -2.963941e-01 -1.000000e+09 -7.562712e-01 -1.000000e+09 qux -1.000000e+09 -5.407476e-01 -1.000000e+09 9.654724e-01 \u591a\u7ea7\u7d22\u5f15 \u5f53\u5217\u662f\u591a\u7d22\u5f15\u65f6\uff0c\u53d6\u6d88\u5806\u6808\u4e5f\u4f1a\u5c0f\u5fc3\u5730\u6267\u884c\u6b63\u786e\u7684\u64cd\u4f5c\uff1a df [: 3 ] . unstack ( 0 ) exp A B ... A animal cat dog ... cat dog first bar baz bar ... baz bar baz second ... one -0.554986 -0.521877 0.904972 ... -0.316586 1.241733 -0.936647 two -0.084460 NaN -0.696432 ... NaN 0.320973 NaN [2 rows x 8 columns] df2 . unstack ( 1 ) exp A B ... A animal cat dog ... cat dog second one two one ... two one two first ... bar -0.554986 -0.084460 0.904972 ... -1.054553 1.241733 0.320973 baz -0.521877 NaN -1.259968 ... NaN -0.936647 NaN foo 0.454518 -0.769256 -0.296394 ... 0.967575 -0.671541 -0.186108 qux NaN -0.529094 NaN ... 0.965472 NaN -0.430767 [4 rows x 8 columns] \u901a\u8fc7Melt\u91cd\u5851 cheese = pd . DataFrame ({ 'first' : [ 'John' , 'Mary' ], 'last' : [ 'Doe' , 'Bo' ], 'height' : [ 5.5 , 6.0 ], 'weight' : [ 130 , 150 ]}) print ( cheese ) first last height weight 0 John Doe 5.5 130 1 Mary Bo 6.0 150 cheese . melt ( id_vars = [ 'first' , 'last' ]) first last variable value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 cheese . melt ( id_vars = [ 'first' , 'last' ], var_name = 'quantity' ) first last quantity value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 \u53e6\u4e00\u79cd\u8f6c\u6362\u65b9\u6cd5\u662f\u4f7f\u7528 wide_to_long() \u9762\u677f\u6570\u636e\u4fbf\u5229\u529f\u80fd\u3002\u5b83\u4e0d\u5982\u7075\u6d3b melt() \uff0c\u4f46\u66f4\u6613\u4e8e\u4f7f\u7528\u3002 dft = pd . DataFrame ({ \"A1970\" : { 0 : \"a\" , 1 : \"b\" , 2 : \"c\" }, \"A1980\" : { 0 : \"d\" , 1 : \"e\" , 2 : \"f\" }, \"B1970\" : { 0 : 2.5 , 1 : 1.2 , 2 : . 7 }, \"B1980\" : { 0 : 3.2 , 1 : 1.3 , 2 : . 1 }, \"X\" : dict ( zip ( range ( 3 ), np . random . randn ( 3 )))}) dft [ \"id\" ] = dft . index print ( dft ) pd . wide_to_long ( dft , [ \"A\" , \"B\" ], i = \"id\" , j = \"year\" ) A1970 A1980 B1970 B1980 X id 0 a d 2.5 3.2 -2.234597 0 1 b e 1.2 1.3 0.655398 1 2 c f 0.7 0.1 -1.018771 2 X A B id year 0 1970 -2.234597 a 2.5 1 1970 0.655398 b 1.2 2 1970 -1.018771 c 0.7 0 1980 -2.234597 d 3.2 1 1980 0.655398 e 1.3 2 1980 -1.018771 f 0.1","title":"9.8.\u53d8\u6362\u7d22\u5f15"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_1","text":"","title":"\u91cd\u5851\u548c\u6570\u636e\u900f\u89c6\u8868"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#pivot","text":"DataFrame.pivot() \u65b9\u6cd5\u91cd\u6392\u6570\u636e\u3002\u5b83\u662f\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u5b83\u4f7f\u7528 set_index \u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u7136\u540e\u4f7f\u7528 unstack \u5c06\u884c\u7d22\u5f15\u8f6c\u4e3a\u5217\u7d22\u5f15\u3002 DataFrame . pivot ( index = None , columns = None , values = None ) index \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6307\u5b9a\u4e86\u4e00\u4e2a column name \uff0c\u7528\u8be5\u5217\u6570\u636e\u6765 set_index \uff08\u5c06\u8be5\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u5220\u9664\u4e86\u539f\u6765\u7684\u65e7\u7684\u884c\u7d22\u5f15\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4e0d\u6267\u884c set_index columns \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684 columns labels \u3002 \u5b9e\u9645\u4e0a\u5bf9 index,clumns \u6307\u5b9a\u7684\u5217\u6570\u636e\u5747 set_index\uff0c\u7136\u540e\u4ec5\u5bf9 columns \u5bf9\u5e94\u7684\u5217\u6570\u636e unstack values \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u5269\u4f59\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002 \u521b\u5efa\u793a\u4f8bDataFrame\uff1a import pandas.util.testing as tm tm . N = 3 def unpivot ( frame ): N , K = frame . shape data = { 'value' : frame . to_numpy () . ravel ( 'F' ), 'variable' : np . asarray ( frame . columns ) . repeat ( N ), 'date' : np . tile ( np . asarray ( frame . index ), K )} return pd . DataFrame ( data , columns = [ 'date' , 'variable' , 'value' ]) df = unpivot ( tm . makeTimeDataFrame ()) df <ipython-input-1-c759587b01cf>:1: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm date variable value 0 2000-01-03 A -1.437586 1 2000-01-04 A 0.352864 2 2000-01-05 A 1.099420 3 2000-01-06 A -0.051995 4 2000-01-07 A 0.409526 .. ... ... ... 115 2000-02-07 D -1.339131 116 2000-02-08 D 0.143948 117 2000-02-09 D -0.373942 118 2000-02-10 D -0.848771 119 2000-02-11 D -0.057774 [120 rows x 3 columns] \u8981\u9009\u62e9\u6240\u6709 variable=A \u7684\u503c\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a df [ df [ 'variable' ] == 'A' ] date variable value 0 2000-01-03 A -1.437586 1 2000-01-04 A 0.352864 2 2000-01-05 A 1.099420 3 2000-01-06 A -0.051995 4 2000-01-07 A 0.409526 5 2000-01-10 A 0.144346 6 2000-01-11 A -0.715936 7 2000-01-12 A -0.574886 8 2000-01-13 A 0.355633 9 2000-01-14 A -0.854062 10 2000-01-17 A -1.390756 11 2000-01-18 A -0.858560 12 2000-01-19 A 0.061217 13 2000-01-20 A 0.922660 14 2000-01-21 A -0.219987 15 2000-01-24 A -0.449889 16 2000-01-25 A 0.379426 17 2000-01-26 A -0.535521 18 2000-01-27 A 0.828712 19 2000-01-28 A 0.775460 20 2000-01-31 A 1.130726 21 2000-02-01 A -0.761980 22 2000-02-02 A 0.017099 23 2000-02-03 A -1.019257 24 2000-02-04 A 0.570145 25 2000-02-07 A -0.926868 26 2000-02-08 A 0.687364 27 2000-02-09 A -2.141394 28 2000-02-10 A -1.712443 29 2000-02-11 A 0.065981 \u4f46\u662f\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5bf9\u53d8\u91cf\u8fdb\u884c\u65f6\u95f4\u5e8f\u5217\u8fd0\u7b97\uff0c\u66f4\u597d\u7684\u8868\u793a\u65b9\u6cd5\u662f\u5217\u662f\u552f\u4e00\u7684\u53d8\u91cf\uff0c\u884c\u7d22\u5f15\u4f5c\u4e3a\u65e5\u671f\u3002\u4e3a\u4e86\u5c06\u6570\u636e\u91cd\u5851\u4e3a\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 DataFrame.pivot() \u65b9\u6cd5\uff08\u4e5f\u5b9e\u73b0\u4e3a\u9876\u7ea7\u51fd\u6570 pivot() \uff09\uff1a df . pivot ( index = 'date' , columns = 'variable' , values = 'value' ) variable A B C D date 2000-01-03 -1.437586 -0.375699 -0.055645 0.919826 2000-01-04 0.352864 0.951894 -0.520288 0.989879 2000-01-05 1.099420 -0.392494 -1.162514 -0.486960 2000-01-06 -0.051995 -1.443095 -1.358171 -0.603839 2000-01-07 0.409526 -1.884634 -1.312974 0.221538 2000-01-10 0.144346 -0.717420 -1.271591 0.512724 2000-01-11 -0.715936 0.910706 0.077753 -0.877894 2000-01-12 -0.574886 0.098610 0.625141 0.930686 2000-01-13 0.355633 -1.714175 -0.255866 1.233093 2000-01-14 -0.854062 -0.830568 -0.328820 0.207676 2000-01-17 -1.390756 -0.003498 -0.668644 1.049648 2000-01-18 -0.858560 1.971157 -0.290487 -0.346132 2000-01-19 0.061217 -1.179151 -0.056592 1.559197 2000-01-20 0.922660 -1.394511 -0.559055 1.471623 2000-01-21 -0.219987 -0.369561 0.401979 -1.015507 2000-01-24 -0.449889 -0.829321 0.240785 -1.071999 2000-01-25 0.379426 0.718853 0.936607 0.330572 2000-01-26 -0.535521 0.818111 0.053013 -0.006994 2000-01-27 0.828712 0.909418 -0.024341 -0.180239 2000-01-28 0.775460 -0.420637 -0.831211 0.783222 2000-01-31 1.130726 0.617039 0.252906 -1.286801 2000-02-01 -0.761980 -0.912396 0.816028 1.819718 2000-02-02 0.017099 0.969371 1.170034 0.279352 2000-02-03 -1.019257 -2.477050 1.399122 0.609937 2000-02-04 0.570145 -1.071966 0.395569 0.677166 2000-02-07 -0.926868 0.664901 -1.077138 -1.339131 2000-02-08 0.687364 0.538077 -0.980296 0.143948 2000-02-09 -2.141394 2.404900 -2.430820 -0.373942 2000-02-10 -1.712443 -0.012297 -1.172405 -0.848771 2000-02-11 0.065981 -0.575658 -1.233321 -0.057774 \u5982\u679c\u7701\u7565 values \u53c2\u6570\uff0c\u5e76\u4e14\u8f93\u5165 DataFrame \u5177\u6709\u591a\u4e8e\u4e00\u5217\u7684\u503c\uff0c\u5219\u7ed3\u679cDataFrame\u5c06\u5177\u6709\u591a\u5c42\u6b21\u5217\u7d22\u5f15\uff1a df [ 'value2' ] = df [ 'value' ] * 2 print ( df ) pivoted = df . pivot ( index = 'date' , columns = 'variable' ) pivoted date variable value value2 0 2000-01-03 A -1.437586 -2.875172 1 2000-01-04 A 0.352864 0.705727 2 2000-01-05 A 1.099420 2.198841 3 2000-01-06 A -0.051995 -0.103990 4 2000-01-07 A 0.409526 0.819052 .. ... ... ... ... 115 2000-02-07 D -1.339131 -2.678261 116 2000-02-08 D 0.143948 0.287896 117 2000-02-09 D -0.373942 -0.747883 118 2000-02-10 D -0.848771 -1.697541 119 2000-02-11 D -0.057774 -0.115548 [120 rows x 4 columns] value ... value2 variable A B C ... B C D date ... 2000-01-03 -1.437586 -0.375699 -0.055645 ... -0.751399 -0.111290 1.839652 2000-01-04 0.352864 0.951894 -0.520288 ... 1.903789 -1.040575 1.979758 2000-01-05 1.099420 -0.392494 -1.162514 ... -0.784988 -2.325028 -0.973921 2000-01-06 -0.051995 -1.443095 -1.358171 ... -2.886189 -2.716342 -1.207678 2000-01-07 0.409526 -1.884634 -1.312974 ... -3.769269 -2.625947 0.443077 2000-01-10 0.144346 -0.717420 -1.271591 ... -1.434839 -2.543182 1.025449 2000-01-11 -0.715936 0.910706 0.077753 ... 1.821411 0.155507 -1.755789 2000-01-12 -0.574886 0.098610 0.625141 ... 0.197221 1.250282 1.861373 2000-01-13 0.355633 -1.714175 -0.255866 ... -3.428349 -0.511733 2.466185 2000-01-14 -0.854062 -0.830568 -0.328820 ... -1.661136 -0.657641 0.415353 2000-01-17 -1.390756 -0.003498 -0.668644 ... -0.006995 -1.337288 2.099296 2000-01-18 -0.858560 1.971157 -0.290487 ... 3.942314 -0.580974 -0.692265 2000-01-19 0.061217 -1.179151 -0.056592 ... -2.358302 -0.113183 3.118394 2000-01-20 0.922660 -1.394511 -0.559055 ... -2.789021 -1.118111 2.943246 2000-01-21 -0.219987 -0.369561 0.401979 ... -0.739123 0.803957 -2.031014 2000-01-24 -0.449889 -0.829321 0.240785 ... -1.658642 0.481570 -2.143998 2000-01-25 0.379426 0.718853 0.936607 ... 1.437706 1.873214 0.661143 2000-01-26 -0.535521 0.818111 0.053013 ... 1.636222 0.106027 -0.013988 2000-01-27 0.828712 0.909418 -0.024341 ... 1.818836 -0.048683 -0.360478 2000-01-28 0.775460 -0.420637 -0.831211 ... -0.841275 -1.662422 1.566444 2000-01-31 1.130726 0.617039 0.252906 ... 1.234078 0.505812 -2.573602 2000-02-01 -0.761980 -0.912396 0.816028 ... -1.824792 1.632056 3.639436 2000-02-02 0.017099 0.969371 1.170034 ... 1.938742 2.340069 0.558704 2000-02-03 -1.019257 -2.477050 1.399122 ... -4.954099 2.798244 1.219874 2000-02-04 0.570145 -1.071966 0.395569 ... -2.143932 0.791139 1.354333 2000-02-07 -0.926868 0.664901 -1.077138 ... 1.329801 -2.154276 -2.678261 2000-02-08 0.687364 0.538077 -0.980296 ... 1.076154 -1.960592 0.287896 2000-02-09 -2.141394 2.404900 -2.430820 ... 4.809799 -4.861640 -0.747883 2000-02-10 -1.712443 -0.012297 -1.172405 ... -0.024594 -2.344810 -1.697541 2000-02-11 0.065981 -0.575658 -1.233321 ... -1.151316 -2.466642 -0.115548 [30 rows x 8 columns] \u6ce8\u610f \u5982\u679c\u7d22\u5f15\u5305\u542b\u91cd\u590d\u9879\uff0c pivot() \u5c06\u51fa\u9519\uff0c\u65e0\u6cd5\u91cd\u5851\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 pivot_table() \uff0c\u5b83\u662fpivot\u7684\u6cdb\u5316\uff0c\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u7d22\u5f15/\u5217\u5bf9\u7684\u91cd\u590d\u503c\u3002","title":"pivot"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#stack","text":"DataFrame.stack() \u65b9\u6cd5\u5c06\u6570\u636e\u7684\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.stack(level=-1, dropna=True) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u5217\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15 dropna \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5982\u679c\u7ed3\u679c\u4e2d\u67d0\u884c\u5168\u4e3a NaN \uff0c\u5219\u629b\u5f03\u8be5\u884c \u65cb\u8f6c\u65f6\uff0c\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\uff0c\u65b0\u7684\u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15\uff0c\u6700\u5185\u5c42\u7684\u884c\u7d22\u5f15\u5c31\u662f\u539f\u6765\u7684\u5217\u7d22\u5f15\u3002 \u6700\u6e05\u6670\u7684\u89e3\u91ca\u65b9\u5f0f\u662f\u901a\u8fc7\u793a\u4f8b\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u6570\u636e\uff1a tuples = list ( zip ( * [[ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ 'A' , 'B' ]) df2 = df [: 4 ] df2 A B first second bar one 0.356997 0.520660 two 0.767193 0.358417 baz one -1.138801 1.721517 two 1.183038 0.494700 stacked = df2 . stack () stacked first second bar one A 0.356997 B 0.520660 two A 0.767193 B 0.358417 baz one A -1.138801 B 1.721517 two A 1.183038 B 0.494700 dtype: float64","title":"stack"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#unstack","text":"\u4e0e DataFrame.stack() \u5bf9\u5e94\u7684\u5c31\u662f DataFrame.unstack() \u65b9\u6cd5\u3002 \u5b83\u5c06\u6570\u636e\u7684\u884c\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.unstack(level=-1, fill_value=None) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u884c\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u5217\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u5982\u679c\u7ed3\u679c\u4e2d\u6709 NaN \uff0c\u5219\u4f7f\u7528 fill_value \u66ff\u6362\u3002 unstack \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6700\u540e\u4e00\u7ea7\u884c\u7d22\u5f15\u8f6c\u6362\u6210\u5217\u7d22\u5f15\uff1a print ( stacked ) first second bar one A 0.356997 B 0.520660 two A 0.767193 B 0.358417 baz one A -1.138801 B 1.721517 two A 1.183038 B 0.494700 dtype: float64 stacked . unstack () A B first second bar one 0.356997 0.520660 two 0.767193 0.358417 baz one -1.138801 1.721517 two 1.183038 0.494700 stacked . unstack ( 1 ) second one two first bar A 0.356997 0.767193 B 0.520660 0.358417 baz A -1.138801 1.183038 B 1.721517 0.494700 stacked . unstack ( 0 ) first bar baz second one A 0.356997 -1.138801 B 0.520660 1.721517 two A 0.767193 1.183038 B 0.358417 0.494700 \u5982\u679c\u7d22\u5f15\u5177\u6709\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7ea7\u522b\u540d\u79f0\u800c\u4e0d\u662f\u6307\u5b9a\u7ea7\u522b\u7f16\u53f7\uff1a stacked . unstack ( 'second' ) second one two first bar A 0.356997 0.767193 B 0.520660 0.358417 baz A -1.138801 1.183038 B 1.721517 0.494700 \u6ce8\u610f\uff0c stack \u548c unstack \u65b9\u6cd5\u4f1a\u9690\u5f0f\u5730\u5bf9\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff1a index = pd . MultiIndex . from_product ([[ 2 , 1 ], [ 'a' , 'b' ]]) df = pd . DataFrame ( np . random . randn ( 4 ), index = index , columns = [ 'A' ]) print ( df , \" \\n \" ) print ( df . unstack () . stack ()) all ( df . unstack () . stack () == df . sort_index ()) A 2 a -0.744983 b 0.403788 1 a -0.670924 b 0.323262 A 1 a -0.670924 b 0.323262 2 a -0.744983 b 0.403788 True","title":"unstack"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_2","text":"\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u7d22\u5f15\u540d\u5b57\u5217\u8868\u6765\u4e00\u6b21\u5806\u6808\u6216\u53d6\u6d88\u5806\u6808\u591a\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u597d\u50cf\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u90fd\u662f\u5355\u72ec\u5904\u7406\u7684\uff1a columns = pd . MultiIndex . from_tuples ([ ( 'A' , 'cat' , 'long' ), ( 'B' , 'cat' , 'long' ), ( 'A' , 'dog' , 'short' ), ( 'B' , 'dog' , 'short' )], names = [ 'exp' , 'animal' , 'hair_length' ]) df = pd . DataFrame ( np . random . randn ( 4 , 4 ), columns = columns ) print ( df ) df . stack ( level = [ 'animal' , 'hair_length' ]) exp A B A B animal cat cat dog dog hair_length long long short short 0 0.142677 0.555537 0.790900 0.946638 1 1.562582 -1.247811 1.024215 0.270163 2 -0.718084 0.281816 -0.352203 -1.414307 3 -1.375110 -1.840107 -0.569607 -0.105886 exp A B animal hair_length 0 cat long 0.142677 0.555537 dog short 0.790900 0.946638 1 cat long 1.562582 -1.247811 dog short 1.024215 0.270163 2 cat long -0.718084 0.281816 dog short -0.352203 -1.414307 3 cat long -1.375110 -1.840107 dog short -0.569607 -0.105886 \u7d22\u5f15\u5217\u8868\u53ef\u4ee5\u5305\u542b\u7d22\u5f15\u540d\u79f0\u6216\u7d22\u5f15\u7ea7\u522b\u7684\u7f16\u53f7\uff08\u4f46\u4e0d\u80fd\u540c\u65f6\u5305\u542b\u4e24\u8005\uff09\uff1a # df.stack(level=['animal', 'hair_length']) # from above is equivalent to: df . stack ( level = [ 1 , 2 ]) exp A B animal hair_length 0 cat long 0.142677 0.555537 dog short 0.790900 0.946638 1 cat long 1.562582 -1.247811 dog short 1.024215 0.270163 2 cat long -0.718084 0.281816 dog short -0.352203 -1.414307 3 cat long -1.375110 -1.840107 dog short -0.569607 -0.105886","title":"\u591a\u7ea7\u522b\u7d22\u5f15"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_3","text":"\u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u5904\u7406\u4e22\u5931\u7684\u6570\u636e\u975e\u5e38\u667a\u80fd\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u5c42\u6b21\u7d22\u5f15\u4e2d\u7684\u6bcf\u4e2a\u5b50\u7ec4\u90fd\u5177\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\u3002\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5904\u7406\u672a\u6392\u5e8f\u7684\u7d22\u5f15\uff08\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528sort_index\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff09\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff1a columns = pd . MultiIndex . from_tuples ([( 'A' , 'cat' ), ( 'B' , 'dog' ), ( 'B' , 'cat' ), ( 'A' , 'dog' )], names = [ 'exp' , 'animal' ]) index = pd . MultiIndex . from_product ([( 'bar' , 'baz' , 'foo' , 'qux' ), ( 'one' , 'two' )], names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = index , columns = columns ) df2 = df . iloc [[ 0 , 1 , 2 , 4 , 5 , 7 ]] print ( df2 ) exp A B A animal cat dog cat dog first second bar one -0.554986 0.904972 -0.638632 1.241733 two -0.084460 -0.696432 -1.054553 0.320973 baz one -0.521877 -1.259968 -0.316586 -0.936647 foo one 0.454518 -0.296394 -0.756271 -0.671541 two -0.769256 -0.442409 0.967575 -0.186108 qux two -0.529094 -0.540748 0.965472 -0.430767 \u5982\u4e0a\u6240\u8ff0\uff0c stack \u53ef\u4ee5\u4f7f\u7528 level \u53c2\u6570\u6765\u8c03\u7528\u4ee5\u9009\u62e9\u8981\u5806\u53e0\u7684\u5217\u4e2d\u7684\u7ea7\u522b\uff1a df2 . stack ( 'exp' ) animal cat dog first second exp bar one A -0.554986 1.241733 B -0.638632 0.904972 two A -0.084460 0.320973 B -1.054553 -0.696432 baz one A -0.521877 -0.936647 B -0.316586 -1.259968 foo one A 0.454518 -0.671541 B -0.756271 -0.296394 two A -0.769256 -0.186108 B 0.967575 -0.442409 qux two A -0.529094 -0.430767 B 0.965472 -0.540748 df2 . stack ( 'animal' ) exp A B first second animal bar one cat -0.554986 -0.638632 dog 1.241733 0.904972 two cat -0.084460 -1.054553 dog 0.320973 -0.696432 baz one cat -0.521877 -0.316586 dog -0.936647 -1.259968 foo one cat 0.454518 -0.756271 dog -0.671541 -0.296394 two cat -0.769256 0.967575 dog -0.186108 -0.442409 qux two cat -0.529094 0.965472 dog -0.430767 -0.540748 \u5982\u679c\u5b50\u7ec4\u6ca1\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\uff0c\u5219\u53d6\u6d88\u5806\u53e0\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f3a\u5c11\u503c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u66ff\u6362\u4e3a\u8be5\u6570\u636e\u7c7b\u578b\u7684\u9ed8\u8ba4\u586b\u5145\u503c\uff0cNaN\u8868\u793a\u6d6e\u70b9\uff0cNaT\u8868\u793adatetimelike\uff0c\u7b49\u7b49\u3002\u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5c06\u8f6c\u6362\u4e3a\u6d6e\u70b9\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u8bbe\u7f6e\u4e3aNaN\uff1a df3 = df . iloc [[ 0 , 1 , 4 , 7 ], [ 1 , 2 ]] print ( df3 ) df3 . unstack () exp B animal dog cat first second bar one 0.904972 -0.638632 two -0.696432 -1.054553 foo one -0.296394 -0.756271 qux two -0.540748 0.965472 exp B animal dog cat second one two one two first bar 0.904972 -0.696432 -0.638632 -1.054553 foo -0.296394 NaN -0.756271 NaN qux NaN -0.540748 NaN 0.965472 \u6216\u8005\u8bbe\u7f6e fill_value \u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u7f3a\u5931\u6570\u636e\u7684\u503c\u3002 df3 . unstack ( fill_value =- 1e9 ) exp B animal dog cat second one two one two first bar 9.049723e-01 -6.964319e-01 -6.386318e-01 -1.054553e+00 foo -2.963941e-01 -1.000000e+09 -7.562712e-01 -1.000000e+09 qux -1.000000e+09 -5.407476e-01 -1.000000e+09 9.654724e-01","title":"\u7f3a\u5931\u6570\u636e"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_4","text":"\u5f53\u5217\u662f\u591a\u7d22\u5f15\u65f6\uff0c\u53d6\u6d88\u5806\u6808\u4e5f\u4f1a\u5c0f\u5fc3\u5730\u6267\u884c\u6b63\u786e\u7684\u64cd\u4f5c\uff1a df [: 3 ] . unstack ( 0 ) exp A B ... A animal cat dog ... cat dog first bar baz bar ... baz bar baz second ... one -0.554986 -0.521877 0.904972 ... -0.316586 1.241733 -0.936647 two -0.084460 NaN -0.696432 ... NaN 0.320973 NaN [2 rows x 8 columns] df2 . unstack ( 1 ) exp A B ... A animal cat dog ... cat dog second one two one ... two one two first ... bar -0.554986 -0.084460 0.904972 ... -1.054553 1.241733 0.320973 baz -0.521877 NaN -1.259968 ... NaN -0.936647 NaN foo 0.454518 -0.769256 -0.296394 ... 0.967575 -0.671541 -0.186108 qux NaN -0.529094 NaN ... 0.965472 NaN -0.430767 [4 rows x 8 columns]","title":"\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas/9.8.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#melt","text":"cheese = pd . DataFrame ({ 'first' : [ 'John' , 'Mary' ], 'last' : [ 'Doe' , 'Bo' ], 'height' : [ 5.5 , 6.0 ], 'weight' : [ 130 , 150 ]}) print ( cheese ) first last height weight 0 John Doe 5.5 130 1 Mary Bo 6.0 150 cheese . melt ( id_vars = [ 'first' , 'last' ]) first last variable value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 cheese . melt ( id_vars = [ 'first' , 'last' ], var_name = 'quantity' ) first last quantity value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 \u53e6\u4e00\u79cd\u8f6c\u6362\u65b9\u6cd5\u662f\u4f7f\u7528 wide_to_long() \u9762\u677f\u6570\u636e\u4fbf\u5229\u529f\u80fd\u3002\u5b83\u4e0d\u5982\u7075\u6d3b melt() \uff0c\u4f46\u66f4\u6613\u4e8e\u4f7f\u7528\u3002 dft = pd . DataFrame ({ \"A1970\" : { 0 : \"a\" , 1 : \"b\" , 2 : \"c\" }, \"A1980\" : { 0 : \"d\" , 1 : \"e\" , 2 : \"f\" }, \"B1970\" : { 0 : 2.5 , 1 : 1.2 , 2 : . 7 }, \"B1980\" : { 0 : 3.2 , 1 : 1.3 , 2 : . 1 }, \"X\" : dict ( zip ( range ( 3 ), np . random . randn ( 3 )))}) dft [ \"id\" ] = dft . index print ( dft ) pd . wide_to_long ( dft , [ \"A\" , \"B\" ], i = \"id\" , j = \"year\" ) A1970 A1980 B1970 B1980 X id 0 a d 2.5 3.2 -2.234597 0 1 b e 1.2 1.3 0.655398 1 2 c f 0.7 0.1 -1.018771 2 X A B id year 0 1970 -2.234597 a 2.5 1 1970 0.655398 b 1.2 2 1970 -1.018771 c 0.7 0 1980 -2.234597 d 3.2 1 1980 0.655398 e 1.3 2 1980 -1.018771 f 0.1","title":"\u901a\u8fc7Melt\u91cd\u5851"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html","text":"from toolkit.Help import Help as H import pprint import numpy as np import pandas as pd Windows 10 Python 3.8.8 @ MSC v.1928 64 bit (AMD64) Latest build date 2021.02.28 pandas version: 1.2.2 numpy version: 1.20.1 \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7ec4\u5e76\u5bf9\u5404\u7ec4\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\uff08\u65e0\u8bba\u662f\u805a\u5408\u8fd8\u662f\u8f6c\u6362\uff09\uff0c\u901a\u5e38\u662f\u6570\u636e\u5206\u6790\u5de5\u4f5c\u4e2d\u7684\u91cd\u8981\u73af\u8282\u3002\u5728\u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u3001\u878d\u5408\u3001\u51c6\u5907\u597d\u4e4b\u540e\uff0c\u901a\u5e38\u5c31\u662f\u8ba1\u7b97\u5206\u7ec4\u7edf\u8ba1\u6216\u751f\u6210\u900f\u89c6\u8868\u3002pandas\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7075\u6d3b\u9ad8\u6548\u7684 gruopby \u529f\u80fd\uff0c\u5b83\u80fd\u4ee5\u4e00\u79cd\u81ea\u7136\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5207\u7247\u3001\u5207\u5757\u3001\u6458\u8981\u7b49\u64cd\u4f5c\u3002 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u548cSQL\uff08Structured Query Language\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u80fd\u591f\u5982\u6b64\u6d41\u884c\u7684\u539f\u56e0\u4e4b\u4e00\u5c31\u662f\u5176\u80fd\u591f\u65b9\u4fbf\u5730\u5bf9\u6570\u636e\u8fdb\u884c\u8fde\u63a5\u3001\u8fc7\u6ee4\u3001\u8f6c\u6362\u548c\u805a\u5408\u3002\u4f46\u662f\uff0c\u50cfSQL\u8fd9\u6837\u7684\u67e5\u8be2\u8bed\u8a00\u6240\u80fd\u6267\u884c\u7684\u5206\u7ec4\u8fd0\u7b97\u7684\u79cd\u7c7b\u5f88\u6709\u9650\u3002pandas\u53ef\u4ee5\u6267\u884c\u590d\u6742\u5f97\u591a\u7684\u5206\u7ec4\u8fd0\u7b97\uff08\u5229\u7528\u4efb\u4f55\u53ef\u4ee5\u63a5\u53d7pandas\u5bf9\u8c61\u6216NumPy\u6570\u7ec4\u7684\u51fd\u6570\uff09\u3002 GroupBy \u673a\u5236 Hadley Wickham\uff08\u8bb8\u591a\u70ed\u95e8R\u8bed\u8a00\u5305\u7684\u4f5c\u8005\uff09\u521b\u9020\u4e86\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u5206\u7ec4\u8fd0\u7b97\u7684\u672f\u8bed\"split-apply-combine\"\uff08\u62c6\u5206\uff0d\u5e94\u7528\uff0d\u5408\u5e76\uff09\uff1a split\uff1a\u6839\u636e\u5206\u7ec4\u952e\u5c06pandas\u5bf9\u8c61\uff08Series\u3001DataFrame\u6216\u8005\u5176\u4ed6\uff09\u5206\u6210\u51e0\u7ec4\u3002 apply\uff1a\u5c06\u51fd\u6570\u72ec\u7acb\u5730\u5e94\u7528\u4e8e\u6bcf\u4e2a\u7ec4\u3002 combine\uff1a\u5c06\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002 \u4e0b\u56fe\u5927\u81f4\u8bf4\u660e\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u7ec4\u805a\u5408\u8fc7\u7a0b\uff1a \u62c6\u5206\u6b65\u9aa4\u662f\u6700\u7b80\u5355\u7684\uff0c\u5206\u7ec4\u952e\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f\uff0c\u4e14\u7c7b\u578b\u4e0d\u5fc5\u76f8\u540c\uff1a \u5217\u8868\u6216\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u4e0e\u5f85\u5206\u7ec4\u7684\u8f74\u4e00\u6837\u3002 \u8868\u793aDataFrame\u67d0\u4e2a\u5217\u540d\u7684\u503c\u3002 \u5b57\u5178\u6216Series\uff0c\u7ed9\u51fa\u5f85\u5206\u7ec4\u8f74\u4e0a\u7684\u503c\u4e0e\u5206\u7ec4\u540d\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u8f74\u7d22\u5f15\u6216\u7d22\u5f15\u4e2d\u7684\u5404\u4e2a\u6807\u7b7e\u3002 \u540e\u4e09\u79cd\u90fd\u53ea\u662f\u7b2c\u4e00\u79cd\u7684\u5feb\u6377\u65b9\u5f0f\u800c\u5df2\uff0c\u5176\u6700\u7ec8\u76ee\u7684\u4ecd\u7136\u662f\u4ea7\u751f\u4e00\u7ec4\u7528\u4e8e\u62c6\u5206\u5bf9\u8c61\u7684\u503c\u3002 \u5728apply\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff1a \u6c47\u603b\uff1a\u591a\u4e2a\u6570\u6c47\u603b\u6210\u4e00\u4e2a\u6570\u503c\uff08\u4f8b\u5982\uff1a\u6c42\u548c\u3001\u5e73\u5747\u503c\uff09\u3002 \u8f6c\u6362\uff1a\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u5e76\u8fd4\u56de\u5177\u6709\u76f8\u4f3c\u7d22\u5f15\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\uff1a\u6807\u51c6\u5316\u3001\u586b\u5145NA\u503c\uff09\u3002 \u8fc7\u6ee4\uff1a\u6839\u636e\u51fd\u6570\u5728group\u4e0a\u9762\u7684\u8ba1\u7b97\u7ed3\u679c\u5f97\u5230 True \u6216 False \uff0c\u7531\u6b64\u51b3\u5b9a\u4e22\u5f03\u4e00\u4e9b\u7ec4\uff08\u4f8b\u5982\uff1a\u4e22\u5f03\u6210\u5458\u4e2a\u6570\u8fc7\u5c11\u7684\u7ec4\u3001\u6839\u636e\u5e73\u5747\u503c\u7b5b\u9009\u6570\u636e\uff09\u3002 groupby \u65b9\u6cd5 .groupby() \u65b9\u6cd5\u662f\u5206\u7ec4\u65b9\u6cd5\uff1a groupby ( by = None , axis = 0 , level = None , as_index : bool = True , sort : bool = True , group_keys : bool = True , squeeze : bool = False , observed : bool = False ) by \uff1a mapping function \u3001 list of function \u3001\u5b57\u5178\u3001\u5e8f\u5217\u3001\u5143\u7ec4\u3001 list of column name \u3002\u5b83\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\uff08\u5206\u7ec4\u952e\uff09\u3002 \u4f20\u5165\u51fd\u6570\uff0c\u5219\u5728\u6bcf\u4e2a index value \u4e0a\u8c03\u7528\u51fd\u6570\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e\uff0c axis \u6307\u5b9a\u662f\u54ea\u4e2a\u8f74\u7684 index value \u4f20\u5165 Series \u6216\u8005\u5b57\u5178\uff0c\u5219\u6839\u636e\u6bcf\u4e2a index value \u5728\u5b57\u5178/ Series \u4e2d\u7684\u503c\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \uff0c\u5219\u4f7f\u7528\u8be5 label \u62bd\u53d6\u51fa\u6765\u7684\u4e00\u5217\u6570\u636e\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \u7684 list \uff0c\u5219\u4f7f\u7528\u4e00\u7ec4 column label \u62bd\u53d6\u51fa\u6765\u7684\u591a\u5217\u6570\u636e\u4f5c\u4e3a\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\uff0c\u5219\u5b83\u76f4\u63a5\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\u7684\u5e8f\u5217\uff0c\u5219\u4f7f\u7528\u8fd9\u4e9b\u5e8f\u5217\u62fc\u63a5\u6210\u4e00\u4e2a MulitiIndex \uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a MultiIndex \u66ff\u6362\u6389 index \u540e\uff0c\u6839\u636e label value \u6765\u5206\u7ec4\u3002\uff08\u4e8b\u5b9e\u4e0a\u5e76\u6ca1\u6709\u66ff\u6362\uff0c\u53ea\u662f\u7528\u4e8e\u8bf4\u660e\u8fd9\u4e2a\u8fc7\u7a0b\uff09 axis \uff1a\u6307\u5b9a\u6cbf\u7740\u54ea\u4e2a\u8f74\u5206\u7ec4 level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 level name \u6216\u8005\u5176\u5e8f\u5217\u3002\u5982\u679c axis \u662f\u4e2a MultiIndex \uff0c\u5219\u5728\u6307\u5b9a\u7ea7\u522b\u4e0a\u7684\u7d22\u5f15\u6765\u5206\u7ec4 as_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c06 group label \u4f5c\u4e3a\u8f93\u51fa\u7684 index \u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f93\u51fa\u662f SQL \u98ce\u683c\u7684\u5206\u7ec4\uff08\u6b64\u65f6\u5206\u7ec4\u7684 key \u4f5c\u4e3a\u4e00\u5217\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a index \uff09\u3002 Series \u4e2d\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u4e3a True \u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5bf9\u5206\u7ec4\u7684\u952e\u8fdb\u884c\u6392\u5e8f\u3002 group_keys \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u4e14\u8c03\u7528\u4e86\u51fd\u6570\u6765\u51b3\u5b9a\u5206\u7ec4\uff0c\u5219\u6dfb\u52a0\u5206\u7ec4\u952e\u6765\u533a\u5206\u4e0d\u540c\u7684\u6570\u636e squeeze \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c3d\u53ef\u80fd\u7684\u7f29\u51cf\u7ed3\u679c\u7684\u7c7b\u578b\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a GroupBy \u5bf9\u8c61\u3002 \u62c6\u5206\u7ec4 \u521b\u5efa\u793a\u4f8b\u6570\u636e: df = pd . DataFrame ({ 'Class' : [ '1\u73ed' , '2\u73ed' , '1\u73ed' , '1\u73ed' , '2\u73ed' , '2\u73ed' ], 'Gender' : [ '\u7537' , '\u7537' , '\u5973' , '\u7537' , '\u5973' , '\u5973' ], 'Math Score' : [ 72 , 86 , 76 , 85 , 89 , 90 ], 'Language Score' : [ 73 , 88 , 81 , 82 , 79 , 86 ]}, index = [ '\u5c0f\u660e' , '\u5c0f\u806a' , '\u5c0f\u7ea2' , '\u5c0f\u534e' , '\u5c0f\u4e3d' , '\u5c0f\u7f8e' ]) df . index . name = \"Name\" df Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86 \u4ee5\u4e0b\u662f\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u5206\u7ec4\u952e\u7684\u793a\u4f8b\u3002 Series\u6216\u5b57\u5178 grouped = df [ 'Math Score' ] . groupby ( dict ( df [ 'Class' ])) # grouped = df['Math Score'].groupby(df['Class']) pprint . pprint ( list ( grouped )) [('1\u73ed', Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('2\u73ed', Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64)] column label grouped = df . groupby ( 'Class' ) pprint . pprint ( list ( grouped )) [('1\u73ed', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82), ('2\u73ed', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86)] \u901a\u8fc7 axis \u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u884c\u7684index\uff1a grouped = df . groupby ( 'Name' , axis = 0 ) list ( grouped ) [('\u5c0f\u4e3d', Class Gender Math Score Language Score Name \u5c0f\u4e3d 2\u73ed \u5973 89 79), ('\u5c0f\u534e', Class Gender Math Score Language Score Name \u5c0f\u534e 1\u73ed \u7537 85 82), ('\u5c0f\u660e', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73), ('\u5c0f\u7ea2', Class Gender Math Score Language Score Name \u5c0f\u7ea2 1\u73ed \u5973 76 81), ('\u5c0f\u7f8e', Class Gender Math Score Language Score Name \u5c0f\u7f8e 2\u73ed \u5973 90 86), ('\u5c0f\u806a', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88)] list of column label # axis=1 \u6cbf\u77401\u8f74\u62c6\u5206 \u4f7f\u75280\u8f74\u7684lable grouped = df . groupby ([ 'Class' , 'Gender' ], axis = 1 ) pprint . pprint ( list ( grouped )) [] \u5e8f\u5217 seq_1 = list ( df [ 'Class' ]) seq_2 = list ( df [ 'Gender' ]) grouped = df [ 'Math Score' ] . groupby ( seq_1 ) print ( list ( grouped ), \" \\n \" ) grouped = df [ 'Math Score' ] . groupby ([ seq_1 , seq_2 ]) print ( list ( grouped )) [('1\u73ed', Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('2\u73ed', Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64)] [(('1\u73ed', '\u5973'), Name \u5c0f\u7ea2 76 Name: Math Score, dtype: int64), (('1\u73ed', '\u7537'), Name \u5c0f\u660e 72 \u5c0f\u534e 85 Name: Math Score, dtype: int64), (('2\u73ed', '\u5973'), Name \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64), (('2\u73ed', '\u7537'), Name \u5c0f\u806a 86 Name: Math Score, dtype: int64)] \u51fd\u6570 # \u5b9a\u4e49\u51fd\u6570 def fun_1 ( key ): return key def fun_2 ( key ): return \"a\" # function grouped = df [ 'Math Score' ] . groupby ( fun_1 ) print ( list ( grouped ), \" \\n \" ) # list of function grouped = df . groupby ([ fun_1 , fun_2 ]) print ( list ( grouped )) [('\u5c0f\u4e3d', Name \u5c0f\u4e3d 89 Name: Math Score, dtype: int64), ('\u5c0f\u534e', Name \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('\u5c0f\u660e', Name \u5c0f\u660e 72 Name: Math Score, dtype: int64), ('\u5c0f\u7ea2', Name \u5c0f\u7ea2 76 Name: Math Score, dtype: int64), ('\u5c0f\u7f8e', Name \u5c0f\u7f8e 90 Name: Math Score, dtype: int64), ('\u5c0f\u806a', Name \u5c0f\u806a 86 Name: Math Score, dtype: int64)] [(('\u5c0f\u4e3d', 'a'), Class Gender Math Score Language Score Name \u5c0f\u4e3d 2\u73ed \u5973 89 79), (('\u5c0f\u534e', 'a'), Class Gender Math Score Language Score Name \u5c0f\u534e 1\u73ed \u7537 85 82), (('\u5c0f\u660e', 'a'), Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73), (('\u5c0f\u7ea2', 'a'), Class Gender Math Score Language Score Name \u5c0f\u7ea2 1\u73ed \u5973 76 81), (('\u5c0f\u7f8e', 'a'), Class Gender Math Score Language Score Name \u5c0f\u7f8e 2\u73ed \u5973 90 86), (('\u5c0f\u806a', 'a'), Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88)] \u904d\u5386\u7ec4 grouped = df . groupby ( 'Class' ) for name , group in grouped : print ( name ) print ( group ) 1\u73ed Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 2\u73ed Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86 \u9009\u62e9\u7ec4 grouped = df . groupby ( 'Class' ) grouped . get_group ( \"1\u73ed\" ) Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 cut \u51fd\u6570 pandas . cut ( x , bins , right = True , labels = None , retbins = False , precision = 3 , include_lowest = False ) x \uff1a\u4e00\u7ef4\u7684\u6570\u7ec4\u3002 bins \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u4e00\u4e2a\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u533a\u95f4\u662f\u7b49\u957f\u7684\uff0c\u4e14\u6700\u5de6\u4fa7\u7684\u533a\u95f4\u7684\u5de6\u4fa7\u6bd4 x \u6700\u5c0f\u503c\u5c0f 0.1% \uff1b\u6700\u53f3\u4fa7\u7684\u533a\u95f4\u7684\u53f3\u4fa7\u6bd4 x \u6700\u5927\u503c\u5927 0.1% \u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86 bins \u7684\u6bcf\u4e2a\u5212\u5206\u70b9\u3002 right \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u533a\u95f4\u662f\u5de6\u5f00\u53f3\u95ed\uff1b\u5426\u5219\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u3002 labels \uff1a\u4e00\u4e2a array \u6216\u8005 None \u3002\u5982\u679c\u4e3a\u4e00\u4e2a array \uff0c\u5219\u5b83\u6307\u5b9a\u4e86\u7ed3\u679c bins \u7684 label \uff08\u8981\u6c42\u957f\u5ea6\u4e0e bins \u6570\u91cf\u76f8\u540c\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4f7f\u7528\u533a\u95f4\u6765\u8868\u793a\u3002 retbins \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de bins precision \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u5b58\u50a8\u548c\u663e\u793a bin label \u7684\u7cbe\u5ea6 include_lowest \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u6700\u5de6\u4fa7 bin \u7684\u5de6\u4fa7\u662f\u95ed\u533a\u95f4 \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Categorical \u5bf9\u8c61\u6216\u8005 Series \u5bf9\u8c61\u3002\u8be5\u51fd\u6570\u7c7b\u4f3c\u4e8e numpy.histogram() \u51fd\u6570\u3002 qcut \u51fd\u6570 pandas . qcut ( x , q , labels = None , retbins = False , precision = 3 ) q \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86\u767e\u5206\u6bd4\u5212\u5206\u70b9\u3002\u6bd4\u5982 [0,0.25,0.5,0.75,0.1] \u3002 0.25 \u4ee3\u8868 25% \u5212\u5206\u70b9\u3002\u5982\u679c\u6570\u636e\u4e0d\u5728\u4efb\u4f55\u533a\u95f4\u5185\uff0c\u5219\u6807\u8bb0\u4e3a NaN \u3002 \u5176\u4ed6\u53c2\u6570\u4e0e cut \u76f8\u540c\u3002( qcut \u6ca1\u6709 bins \u53c2\u6570\uff09 \u805a\u5408 \u5e38\u7528\u805a\u5408\u51fd\u6570 \u805a\u5408\u51fd\u6570\u53ef\u4ee5\u51cf\u5c0f\u8fd4\u56de\u5bf9\u8c61\u7684\u5c3a\u5bf8\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u6c47\u603b\u529f\u80fd\uff1a \u529f\u80fd \u63cf\u8ff0 mean() \u8ba1\u7b97\u7ec4\u7684\u5e73\u5747\u503c sum() \u8ba1\u7b97\u7ec4\u503c\u4e4b\u548c size() \u8ba1\u7b97\u7ec4\u5927\u5c0f count() \u8ba1\u7b97\u5404\u7ec4\u7684\u5143\u7d20\u7684\u6570\u91cf std() \u7ec4\u7684\u6807\u51c6\u504f\u5dee var() \u8ba1\u7b97\u7ec4\u7684\u65b9\u5dee sem() \u5747\u503c\u7684\u6807\u51c6\u8bef describe() \u751f\u6210\u63cf\u8ff0\u6027\u7edf\u8ba1 first() \u8fd4\u56de\u6bcf\u7ec4\u7684\u7b2c\u4e00\u4e2a\u503c last() \u8fd4\u56de\u6bcf\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u503c nth() \u53d6\u7b2cn\u4e2a\u503c\uff0c\u5982\u679cn\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5219\u53d6\u4e00\u4e2a\u5b50\u96c6 min() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5c0f\u503c max() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5927\u503c \u4e0a\u9762\u7684\u6c47\u603b\u51fd\u6570\u5c06\u6392\u9664 NA \u503c\u3002 \u5c06Series\u51cf\u5c11\u4e3a\u6807\u91cf\u503c\u7684\u4efb\u4f55\u51fd\u6570\u90fd\u662f\u805a\u5408\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u3002 \u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570 \u5982\u679c\u5e0c\u671b\u4f7f\u7528\u81ea\u5df1\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ea\u9700\u8981\u5c06\u5176\u4f20\u5165 .aggregate(func, *args, **kwargs) \u6216\u8005 .agg() \u65b9\u6cd5\u5373\u53ef\u3002\u5176\u4e2d func \u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 \u6ce8\u610f\uff1a\u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u4f1a\u6162\u5f97\u591a\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6784\u9020\u4e2d\u95f4\u5206\u7ec4\u6570\u636e\u5757\u65f6\u5b58\u5728\u975e\u5e38\u5927\u7684\u5f00\u9500\uff08\u51fd\u6570\u8c03\u7528\u3001\u6570\u636e\u91cd\u6392\u7b49\uff09 \u4f60\u53ef\u4ee5\u5c06\u524d\u9762\u4ecb\u7ecd\u7684 GroupBy \u7684\u7edf\u8ba1\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u5165\u3002 \u5982\u679c\u4f60\u4f20\u5165\u4e86\u4e00\u7ec4\u51fd\u6570\u6216\u8005\u51fd\u6570\u540d\uff0c\u5219\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\uff0c\u76f8\u5e94\u7684\u5217\u5c31\u7528\u5bf9\u5e94\u7684\u51fd\u6570\u540d\u547d\u540d\u3002\u5982\u679c\u4f60\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u5219\u4f7f\u7528 (name,function) \u5143\u7ec4\u7684\u5e8f\u5217\u3002\u5176\u4e2d name \u7528\u4f5c\u7ed3\u679c\u5217\u7684\u5217\u540d\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u5bf9\u4e0d\u540c\u7684\u5217\u91c7\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\uff0c\u5219\u5411 agg() \u4f20\u5165\u4e00\u4e2a\u5b57\u5178\u3002\u5b57\u5178\u7684\u952e\u5c31\u662f\u5217\u540d\uff0c\u503c\u5c31\u662f\u4f60\u5e0c\u671b\u5bf9\u8be5\u5217\u91c7\u7528\u7684\u51fd\u6570\u3002 grouped = df . groupby ( 'Class' ) grouped . aggregate ( np . sum ) Math Score Language Score Class 1\u73ed 233 236 2\u73ed 265 253 apply \u65b9\u6cd5 df . apply ( func , axis = 0 , raw = False , reduce = None , result_type = None , args = (), ** kwds ) func \uff1a\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u4f1a\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\u6216\u8005\u6bcf\u4e00\u5217 axis \uff1a\u6307\u5b9a\u5e94\u7528\u4e8e\u884c\u8fd8\u662f\u5217\u3002\u5982\u679c\u4e3a 0/'index' \uff0c\u5219\u6cbf\u77400\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u5217\uff09\uff1b\u5982\u679c\u4e3a 1/'columns' \uff0c\u5219\u6cbf\u77401\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\uff09\u3002 broadcast \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \uff08\u4e0d\u8db3\u7684\u90e8\u5206\u901a\u8fc7\u5e7f\u64ad\u6765\u586b\u5145\uff09 raw \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f6c\u6362\u6bcf\u4e00\u884c/\u6bcf\u4e00\u5217\u4e3a\u4e00\u4e2a Series \uff0c\u7136\u540e\u4f20\u7ed9 func \u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c True \uff0c\u5219 func \u63a5\u53d7\u5230\u7684\u662f ndarray \uff0c\u800c\u4e0d\u662f Series reduce \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u7528\u4e8e\u5224\u65ad\u5f53 DataFrame \u4e3a\u7a7a\u65f6\uff0c\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a Series \u8fd8\u662f\u8fd4\u56de\u4e00\u4e2a DataFrame \u3002\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a Series \uff1b\u5982\u679c\u4e3a False \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \u3002 args \uff1a\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u59cb\u7ec8\u4e3a Series/ndarray \uff09 \u5206\u7ec4\u7ea7\u8fd0\u7b97 agg/aggregate \u53ea\u662f\u5206\u7ec4\u7ea7\u8fd0\u7b97\u5176\u4e2d\u7684\u4e00\u79cd\u3002\u5b83\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 transform \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u4e5f\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\u3002\u53ea\u80fd\u8fd4\u56de\u4e24\u79cd\u7ed3\u679c\uff1a\u8981\u4e48\u662f\u4e00\u4e2a\u6807\u91cf\u503c\uff08\u8be5\u6807\u91cf\u503c\u5c06\u88ab\u5e7f\u64ad\uff09\uff0c\u6216\u8005\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u7ed3\u679c\u6570\u7ec4\u3002 \u65e0\u6cd5\u901a\u8fc7\u5b57\u5178\u6765\u5bf9\u4e0d\u540c\u7684\u5217\u8fdb\u884c\u4e0d\u540c\u7684 transform GroupBy . transform ( func , * args , ** kwargs ) apply \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u662f\u6700\u4e00\u822c\u5316\u7684\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u5c06\u5f85\u5904\u7406\u7684\u5bf9\u8c61\u62c6\u5206\u6210\u591a\u4e2a\u7247\u6bb5\uff0c\u7136\u540e\u5bf9\u5404\u4e2a\u7247\u6bb5\u8c03\u7528\u4f20\u5165\u7684\u51fd\u6570\uff0c\u6700\u540e\u5c1d\u8bd5\u5c06\u5404\u4e2a\u7247\u6bb5\u7ec4\u5408\u5230\u4e00\u8d77\u3002 GroupBy . apply ( func , * args , ** kwargs ) func \uff1a\u8fd0\u7b97\u51fd\u6570\u3002\u5176\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a\u5f85\u5904\u7406\u5bf9\u8c61\u3002\u5176\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6807\u91cf\u503c\u6216\u8005 pandas \u5bf9\u8c61\u3002 args/kwargs \u662f\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\u4e0e\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5bf9\u4e8e DataFrame \u7684 .groupby \u65f6\uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f DataFrame \uff1b\u5bf9\u4e8e Series \u7684 .groupby \uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Series \u3002 pd.cut()/qcut() \u51fd\u6570\u8fd4\u56de\u7684\u662f Categorical \u5bf9\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4f5c\u4e3a .groupby() \u7684 by \u53c2\u6570\u7684\u503c\u3002\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u6876\u5206\u6790\u3002","title":"9.9.\u5206\u7ec4\u4e0e\u805a\u5408"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#groupby","text":"Hadley Wickham\uff08\u8bb8\u591a\u70ed\u95e8R\u8bed\u8a00\u5305\u7684\u4f5c\u8005\uff09\u521b\u9020\u4e86\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u5206\u7ec4\u8fd0\u7b97\u7684\u672f\u8bed\"split-apply-combine\"\uff08\u62c6\u5206\uff0d\u5e94\u7528\uff0d\u5408\u5e76\uff09\uff1a split\uff1a\u6839\u636e\u5206\u7ec4\u952e\u5c06pandas\u5bf9\u8c61\uff08Series\u3001DataFrame\u6216\u8005\u5176\u4ed6\uff09\u5206\u6210\u51e0\u7ec4\u3002 apply\uff1a\u5c06\u51fd\u6570\u72ec\u7acb\u5730\u5e94\u7528\u4e8e\u6bcf\u4e2a\u7ec4\u3002 combine\uff1a\u5c06\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002 \u4e0b\u56fe\u5927\u81f4\u8bf4\u660e\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u7ec4\u805a\u5408\u8fc7\u7a0b\uff1a \u62c6\u5206\u6b65\u9aa4\u662f\u6700\u7b80\u5355\u7684\uff0c\u5206\u7ec4\u952e\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f\uff0c\u4e14\u7c7b\u578b\u4e0d\u5fc5\u76f8\u540c\uff1a \u5217\u8868\u6216\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u4e0e\u5f85\u5206\u7ec4\u7684\u8f74\u4e00\u6837\u3002 \u8868\u793aDataFrame\u67d0\u4e2a\u5217\u540d\u7684\u503c\u3002 \u5b57\u5178\u6216Series\uff0c\u7ed9\u51fa\u5f85\u5206\u7ec4\u8f74\u4e0a\u7684\u503c\u4e0e\u5206\u7ec4\u540d\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u8f74\u7d22\u5f15\u6216\u7d22\u5f15\u4e2d\u7684\u5404\u4e2a\u6807\u7b7e\u3002 \u540e\u4e09\u79cd\u90fd\u53ea\u662f\u7b2c\u4e00\u79cd\u7684\u5feb\u6377\u65b9\u5f0f\u800c\u5df2\uff0c\u5176\u6700\u7ec8\u76ee\u7684\u4ecd\u7136\u662f\u4ea7\u751f\u4e00\u7ec4\u7528\u4e8e\u62c6\u5206\u5bf9\u8c61\u7684\u503c\u3002 \u5728apply\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff1a \u6c47\u603b\uff1a\u591a\u4e2a\u6570\u6c47\u603b\u6210\u4e00\u4e2a\u6570\u503c\uff08\u4f8b\u5982\uff1a\u6c42\u548c\u3001\u5e73\u5747\u503c\uff09\u3002 \u8f6c\u6362\uff1a\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u5e76\u8fd4\u56de\u5177\u6709\u76f8\u4f3c\u7d22\u5f15\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\uff1a\u6807\u51c6\u5316\u3001\u586b\u5145NA\u503c\uff09\u3002 \u8fc7\u6ee4\uff1a\u6839\u636e\u51fd\u6570\u5728group\u4e0a\u9762\u7684\u8ba1\u7b97\u7ed3\u679c\u5f97\u5230 True \u6216 False \uff0c\u7531\u6b64\u51b3\u5b9a\u4e22\u5f03\u4e00\u4e9b\u7ec4\uff08\u4f8b\u5982\uff1a\u4e22\u5f03\u6210\u5458\u4e2a\u6570\u8fc7\u5c11\u7684\u7ec4\u3001\u6839\u636e\u5e73\u5747\u503c\u7b5b\u9009\u6570\u636e\uff09\u3002","title":"GroupBy\u673a\u5236"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#groupby_1","text":".groupby() \u65b9\u6cd5\u662f\u5206\u7ec4\u65b9\u6cd5\uff1a groupby ( by = None , axis = 0 , level = None , as_index : bool = True , sort : bool = True , group_keys : bool = True , squeeze : bool = False , observed : bool = False ) by \uff1a mapping function \u3001 list of function \u3001\u5b57\u5178\u3001\u5e8f\u5217\u3001\u5143\u7ec4\u3001 list of column name \u3002\u5b83\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\uff08\u5206\u7ec4\u952e\uff09\u3002 \u4f20\u5165\u51fd\u6570\uff0c\u5219\u5728\u6bcf\u4e2a index value \u4e0a\u8c03\u7528\u51fd\u6570\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e\uff0c axis \u6307\u5b9a\u662f\u54ea\u4e2a\u8f74\u7684 index value \u4f20\u5165 Series \u6216\u8005\u5b57\u5178\uff0c\u5219\u6839\u636e\u6bcf\u4e2a index value \u5728\u5b57\u5178/ Series \u4e2d\u7684\u503c\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \uff0c\u5219\u4f7f\u7528\u8be5 label \u62bd\u53d6\u51fa\u6765\u7684\u4e00\u5217\u6570\u636e\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \u7684 list \uff0c\u5219\u4f7f\u7528\u4e00\u7ec4 column label \u62bd\u53d6\u51fa\u6765\u7684\u591a\u5217\u6570\u636e\u4f5c\u4e3a\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\uff0c\u5219\u5b83\u76f4\u63a5\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\u7684\u5e8f\u5217\uff0c\u5219\u4f7f\u7528\u8fd9\u4e9b\u5e8f\u5217\u62fc\u63a5\u6210\u4e00\u4e2a MulitiIndex \uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a MultiIndex \u66ff\u6362\u6389 index \u540e\uff0c\u6839\u636e label value \u6765\u5206\u7ec4\u3002\uff08\u4e8b\u5b9e\u4e0a\u5e76\u6ca1\u6709\u66ff\u6362\uff0c\u53ea\u662f\u7528\u4e8e\u8bf4\u660e\u8fd9\u4e2a\u8fc7\u7a0b\uff09 axis \uff1a\u6307\u5b9a\u6cbf\u7740\u54ea\u4e2a\u8f74\u5206\u7ec4 level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 level name \u6216\u8005\u5176\u5e8f\u5217\u3002\u5982\u679c axis \u662f\u4e2a MultiIndex \uff0c\u5219\u5728\u6307\u5b9a\u7ea7\u522b\u4e0a\u7684\u7d22\u5f15\u6765\u5206\u7ec4 as_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c06 group label \u4f5c\u4e3a\u8f93\u51fa\u7684 index \u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f93\u51fa\u662f SQL \u98ce\u683c\u7684\u5206\u7ec4\uff08\u6b64\u65f6\u5206\u7ec4\u7684 key \u4f5c\u4e3a\u4e00\u5217\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a index \uff09\u3002 Series \u4e2d\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u4e3a True \u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5bf9\u5206\u7ec4\u7684\u952e\u8fdb\u884c\u6392\u5e8f\u3002 group_keys \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u4e14\u8c03\u7528\u4e86\u51fd\u6570\u6765\u51b3\u5b9a\u5206\u7ec4\uff0c\u5219\u6dfb\u52a0\u5206\u7ec4\u952e\u6765\u533a\u5206\u4e0d\u540c\u7684\u6570\u636e squeeze \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c3d\u53ef\u80fd\u7684\u7f29\u51cf\u7ed3\u679c\u7684\u7c7b\u578b\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a GroupBy \u5bf9\u8c61\u3002","title":"groupby\u65b9\u6cd5"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_1","text":"\u521b\u5efa\u793a\u4f8b\u6570\u636e: df = pd . DataFrame ({ 'Class' : [ '1\u73ed' , '2\u73ed' , '1\u73ed' , '1\u73ed' , '2\u73ed' , '2\u73ed' ], 'Gender' : [ '\u7537' , '\u7537' , '\u5973' , '\u7537' , '\u5973' , '\u5973' ], 'Math Score' : [ 72 , 86 , 76 , 85 , 89 , 90 ], 'Language Score' : [ 73 , 88 , 81 , 82 , 79 , 86 ]}, index = [ '\u5c0f\u660e' , '\u5c0f\u806a' , '\u5c0f\u7ea2' , '\u5c0f\u534e' , '\u5c0f\u4e3d' , '\u5c0f\u7f8e' ]) df . index . name = \"Name\" df Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86 \u4ee5\u4e0b\u662f\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u5206\u7ec4\u952e\u7684\u793a\u4f8b\u3002","title":"\u62c6\u5206\u7ec4"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#series","text":"grouped = df [ 'Math Score' ] . groupby ( dict ( df [ 'Class' ])) # grouped = df['Math Score'].groupby(df['Class']) pprint . pprint ( list ( grouped )) [('1\u73ed', Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('2\u73ed', Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64)]","title":"Series\u6216\u5b57\u5178"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#column-label","text":"grouped = df . groupby ( 'Class' ) pprint . pprint ( list ( grouped )) [('1\u73ed', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82), ('2\u73ed', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86)] \u901a\u8fc7 axis \u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u884c\u7684index\uff1a grouped = df . groupby ( 'Name' , axis = 0 ) list ( grouped ) [('\u5c0f\u4e3d', Class Gender Math Score Language Score Name \u5c0f\u4e3d 2\u73ed \u5973 89 79), ('\u5c0f\u534e', Class Gender Math Score Language Score Name \u5c0f\u534e 1\u73ed \u7537 85 82), ('\u5c0f\u660e', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73), ('\u5c0f\u7ea2', Class Gender Math Score Language Score Name \u5c0f\u7ea2 1\u73ed \u5973 76 81), ('\u5c0f\u7f8e', Class Gender Math Score Language Score Name \u5c0f\u7f8e 2\u73ed \u5973 90 86), ('\u5c0f\u806a', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88)]","title":"column label"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#list-of-column-label","text":"# axis=1 \u6cbf\u77401\u8f74\u62c6\u5206 \u4f7f\u75280\u8f74\u7684lable grouped = df . groupby ([ 'Class' , 'Gender' ], axis = 1 ) pprint . pprint ( list ( grouped )) []","title":"list of column label"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_2","text":"seq_1 = list ( df [ 'Class' ]) seq_2 = list ( df [ 'Gender' ]) grouped = df [ 'Math Score' ] . groupby ( seq_1 ) print ( list ( grouped ), \" \\n \" ) grouped = df [ 'Math Score' ] . groupby ([ seq_1 , seq_2 ]) print ( list ( grouped )) [('1\u73ed', Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('2\u73ed', Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64)] [(('1\u73ed', '\u5973'), Name \u5c0f\u7ea2 76 Name: Math Score, dtype: int64), (('1\u73ed', '\u7537'), Name \u5c0f\u660e 72 \u5c0f\u534e 85 Name: Math Score, dtype: int64), (('2\u73ed', '\u5973'), Name \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64), (('2\u73ed', '\u7537'), Name \u5c0f\u806a 86 Name: Math Score, dtype: int64)]","title":"\u5e8f\u5217"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_3","text":"# \u5b9a\u4e49\u51fd\u6570 def fun_1 ( key ): return key def fun_2 ( key ): return \"a\" # function grouped = df [ 'Math Score' ] . groupby ( fun_1 ) print ( list ( grouped ), \" \\n \" ) # list of function grouped = df . groupby ([ fun_1 , fun_2 ]) print ( list ( grouped )) [('\u5c0f\u4e3d', Name \u5c0f\u4e3d 89 Name: Math Score, dtype: int64), ('\u5c0f\u534e', Name \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('\u5c0f\u660e', Name \u5c0f\u660e 72 Name: Math Score, dtype: int64), ('\u5c0f\u7ea2', Name \u5c0f\u7ea2 76 Name: Math Score, dtype: int64), ('\u5c0f\u7f8e', Name \u5c0f\u7f8e 90 Name: Math Score, dtype: int64), ('\u5c0f\u806a', Name \u5c0f\u806a 86 Name: Math Score, dtype: int64)] [(('\u5c0f\u4e3d', 'a'), Class Gender Math Score Language Score Name \u5c0f\u4e3d 2\u73ed \u5973 89 79), (('\u5c0f\u534e', 'a'), Class Gender Math Score Language Score Name \u5c0f\u534e 1\u73ed \u7537 85 82), (('\u5c0f\u660e', 'a'), Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73), (('\u5c0f\u7ea2', 'a'), Class Gender Math Score Language Score Name \u5c0f\u7ea2 1\u73ed \u5973 76 81), (('\u5c0f\u7f8e', 'a'), Class Gender Math Score Language Score Name \u5c0f\u7f8e 2\u73ed \u5973 90 86), (('\u5c0f\u806a', 'a'), Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88)]","title":"\u51fd\u6570"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_4","text":"grouped = df . groupby ( 'Class' ) for name , group in grouped : print ( name ) print ( group ) 1\u73ed Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 2\u73ed Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86","title":"\u904d\u5386\u7ec4"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_5","text":"grouped = df . groupby ( 'Class' ) grouped . get_group ( \"1\u73ed\" ) Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82","title":"\u9009\u62e9\u7ec4"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#cut","text":"pandas . cut ( x , bins , right = True , labels = None , retbins = False , precision = 3 , include_lowest = False ) x \uff1a\u4e00\u7ef4\u7684\u6570\u7ec4\u3002 bins \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u4e00\u4e2a\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u533a\u95f4\u662f\u7b49\u957f\u7684\uff0c\u4e14\u6700\u5de6\u4fa7\u7684\u533a\u95f4\u7684\u5de6\u4fa7\u6bd4 x \u6700\u5c0f\u503c\u5c0f 0.1% \uff1b\u6700\u53f3\u4fa7\u7684\u533a\u95f4\u7684\u53f3\u4fa7\u6bd4 x \u6700\u5927\u503c\u5927 0.1% \u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86 bins \u7684\u6bcf\u4e2a\u5212\u5206\u70b9\u3002 right \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u533a\u95f4\u662f\u5de6\u5f00\u53f3\u95ed\uff1b\u5426\u5219\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u3002 labels \uff1a\u4e00\u4e2a array \u6216\u8005 None \u3002\u5982\u679c\u4e3a\u4e00\u4e2a array \uff0c\u5219\u5b83\u6307\u5b9a\u4e86\u7ed3\u679c bins \u7684 label \uff08\u8981\u6c42\u957f\u5ea6\u4e0e bins \u6570\u91cf\u76f8\u540c\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4f7f\u7528\u533a\u95f4\u6765\u8868\u793a\u3002 retbins \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de bins precision \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u5b58\u50a8\u548c\u663e\u793a bin label \u7684\u7cbe\u5ea6 include_lowest \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u6700\u5de6\u4fa7 bin \u7684\u5de6\u4fa7\u662f\u95ed\u533a\u95f4 \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Categorical \u5bf9\u8c61\u6216\u8005 Series \u5bf9\u8c61\u3002\u8be5\u51fd\u6570\u7c7b\u4f3c\u4e8e numpy.histogram() \u51fd\u6570\u3002","title":"cut \u51fd\u6570"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#qcut","text":"pandas . qcut ( x , q , labels = None , retbins = False , precision = 3 ) q \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86\u767e\u5206\u6bd4\u5212\u5206\u70b9\u3002\u6bd4\u5982 [0,0.25,0.5,0.75,0.1] \u3002 0.25 \u4ee3\u8868 25% \u5212\u5206\u70b9\u3002\u5982\u679c\u6570\u636e\u4e0d\u5728\u4efb\u4f55\u533a\u95f4\u5185\uff0c\u5219\u6807\u8bb0\u4e3a NaN \u3002 \u5176\u4ed6\u53c2\u6570\u4e0e cut \u76f8\u540c\u3002( qcut \u6ca1\u6709 bins \u53c2\u6570\uff09","title":"qcut \u51fd\u6570"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_6","text":"","title":"\u805a\u5408"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_7","text":"\u805a\u5408\u51fd\u6570\u53ef\u4ee5\u51cf\u5c0f\u8fd4\u56de\u5bf9\u8c61\u7684\u5c3a\u5bf8\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u6c47\u603b\u529f\u80fd\uff1a \u529f\u80fd \u63cf\u8ff0 mean() \u8ba1\u7b97\u7ec4\u7684\u5e73\u5747\u503c sum() \u8ba1\u7b97\u7ec4\u503c\u4e4b\u548c size() \u8ba1\u7b97\u7ec4\u5927\u5c0f count() \u8ba1\u7b97\u5404\u7ec4\u7684\u5143\u7d20\u7684\u6570\u91cf std() \u7ec4\u7684\u6807\u51c6\u504f\u5dee var() \u8ba1\u7b97\u7ec4\u7684\u65b9\u5dee sem() \u5747\u503c\u7684\u6807\u51c6\u8bef describe() \u751f\u6210\u63cf\u8ff0\u6027\u7edf\u8ba1 first() \u8fd4\u56de\u6bcf\u7ec4\u7684\u7b2c\u4e00\u4e2a\u503c last() \u8fd4\u56de\u6bcf\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u503c nth() \u53d6\u7b2cn\u4e2a\u503c\uff0c\u5982\u679cn\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5219\u53d6\u4e00\u4e2a\u5b50\u96c6 min() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5c0f\u503c max() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5927\u503c \u4e0a\u9762\u7684\u6c47\u603b\u51fd\u6570\u5c06\u6392\u9664 NA \u503c\u3002 \u5c06Series\u51cf\u5c11\u4e3a\u6807\u91cf\u503c\u7684\u4efb\u4f55\u51fd\u6570\u90fd\u662f\u805a\u5408\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u3002","title":"\u5e38\u7528\u805a\u5408\u51fd\u6570"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_8","text":"\u5982\u679c\u5e0c\u671b\u4f7f\u7528\u81ea\u5df1\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ea\u9700\u8981\u5c06\u5176\u4f20\u5165 .aggregate(func, *args, **kwargs) \u6216\u8005 .agg() \u65b9\u6cd5\u5373\u53ef\u3002\u5176\u4e2d func \u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 \u6ce8\u610f\uff1a\u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u4f1a\u6162\u5f97\u591a\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6784\u9020\u4e2d\u95f4\u5206\u7ec4\u6570\u636e\u5757\u65f6\u5b58\u5728\u975e\u5e38\u5927\u7684\u5f00\u9500\uff08\u51fd\u6570\u8c03\u7528\u3001\u6570\u636e\u91cd\u6392\u7b49\uff09 \u4f60\u53ef\u4ee5\u5c06\u524d\u9762\u4ecb\u7ecd\u7684 GroupBy \u7684\u7edf\u8ba1\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u5165\u3002 \u5982\u679c\u4f60\u4f20\u5165\u4e86\u4e00\u7ec4\u51fd\u6570\u6216\u8005\u51fd\u6570\u540d\uff0c\u5219\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\uff0c\u76f8\u5e94\u7684\u5217\u5c31\u7528\u5bf9\u5e94\u7684\u51fd\u6570\u540d\u547d\u540d\u3002\u5982\u679c\u4f60\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u5219\u4f7f\u7528 (name,function) \u5143\u7ec4\u7684\u5e8f\u5217\u3002\u5176\u4e2d name \u7528\u4f5c\u7ed3\u679c\u5217\u7684\u5217\u540d\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u5bf9\u4e0d\u540c\u7684\u5217\u91c7\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\uff0c\u5219\u5411 agg() \u4f20\u5165\u4e00\u4e2a\u5b57\u5178\u3002\u5b57\u5178\u7684\u952e\u5c31\u662f\u5217\u540d\uff0c\u503c\u5c31\u662f\u4f60\u5e0c\u671b\u5bf9\u8be5\u5217\u91c7\u7528\u7684\u51fd\u6570\u3002 grouped = df . groupby ( 'Class' ) grouped . aggregate ( np . sum ) Math Score Language Score Class 1\u73ed 233 236 2\u73ed 265 253","title":"\u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#apply","text":"df . apply ( func , axis = 0 , raw = False , reduce = None , result_type = None , args = (), ** kwds ) func \uff1a\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u4f1a\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\u6216\u8005\u6bcf\u4e00\u5217 axis \uff1a\u6307\u5b9a\u5e94\u7528\u4e8e\u884c\u8fd8\u662f\u5217\u3002\u5982\u679c\u4e3a 0/'index' \uff0c\u5219\u6cbf\u77400\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u5217\uff09\uff1b\u5982\u679c\u4e3a 1/'columns' \uff0c\u5219\u6cbf\u77401\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\uff09\u3002 broadcast \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \uff08\u4e0d\u8db3\u7684\u90e8\u5206\u901a\u8fc7\u5e7f\u64ad\u6765\u586b\u5145\uff09 raw \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f6c\u6362\u6bcf\u4e00\u884c/\u6bcf\u4e00\u5217\u4e3a\u4e00\u4e2a Series \uff0c\u7136\u540e\u4f20\u7ed9 func \u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c True \uff0c\u5219 func \u63a5\u53d7\u5230\u7684\u662f ndarray \uff0c\u800c\u4e0d\u662f Series reduce \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u7528\u4e8e\u5224\u65ad\u5f53 DataFrame \u4e3a\u7a7a\u65f6\uff0c\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a Series \u8fd8\u662f\u8fd4\u56de\u4e00\u4e2a DataFrame \u3002\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a Series \uff1b\u5982\u679c\u4e3a False \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \u3002 args \uff1a\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u59cb\u7ec8\u4e3a Series/ndarray \uff09","title":"apply \u65b9\u6cd5"},{"location":"pandas/9.9.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_9","text":"agg/aggregate \u53ea\u662f\u5206\u7ec4\u7ea7\u8fd0\u7b97\u5176\u4e2d\u7684\u4e00\u79cd\u3002\u5b83\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 transform \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u4e5f\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\u3002\u53ea\u80fd\u8fd4\u56de\u4e24\u79cd\u7ed3\u679c\uff1a\u8981\u4e48\u662f\u4e00\u4e2a\u6807\u91cf\u503c\uff08\u8be5\u6807\u91cf\u503c\u5c06\u88ab\u5e7f\u64ad\uff09\uff0c\u6216\u8005\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u7ed3\u679c\u6570\u7ec4\u3002 \u65e0\u6cd5\u901a\u8fc7\u5b57\u5178\u6765\u5bf9\u4e0d\u540c\u7684\u5217\u8fdb\u884c\u4e0d\u540c\u7684 transform GroupBy . transform ( func , * args , ** kwargs ) apply \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u662f\u6700\u4e00\u822c\u5316\u7684\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u5c06\u5f85\u5904\u7406\u7684\u5bf9\u8c61\u62c6\u5206\u6210\u591a\u4e2a\u7247\u6bb5\uff0c\u7136\u540e\u5bf9\u5404\u4e2a\u7247\u6bb5\u8c03\u7528\u4f20\u5165\u7684\u51fd\u6570\uff0c\u6700\u540e\u5c1d\u8bd5\u5c06\u5404\u4e2a\u7247\u6bb5\u7ec4\u5408\u5230\u4e00\u8d77\u3002 GroupBy . apply ( func , * args , ** kwargs ) func \uff1a\u8fd0\u7b97\u51fd\u6570\u3002\u5176\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a\u5f85\u5904\u7406\u5bf9\u8c61\u3002\u5176\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6807\u91cf\u503c\u6216\u8005 pandas \u5bf9\u8c61\u3002 args/kwargs \u662f\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\u4e0e\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5bf9\u4e8e DataFrame \u7684 .groupby \u65f6\uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f DataFrame \uff1b\u5bf9\u4e8e Series \u7684 .groupby \uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Series \u3002 pd.cut()/qcut() \u51fd\u6570\u8fd4\u56de\u7684\u662f Categorical \u5bf9\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4f5c\u4e3a .groupby() \u7684 by \u53c2\u6570\u7684\u503c\u3002\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u6876\u5206\u6790\u3002","title":"\u5206\u7ec4\u7ea7\u8fd0\u7b97"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html","text":"from toolkit import H from sklearn import datasets Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.07 sklearn version: 0.23.1 \u6570\u636e\u96c6 sklearn \u5305\u81ea\u5e26\u4e00\u4e9b\u73a9\u5177\u6570\u636e\u96c6\uff0c\u8fd8\u5177\u6709\u4e00\u4e9b\u4eba\u5de5\u6570\u636e\u751f\u6210\u5668\u3002\u4e3b\u8981\u63a5\u53e3\u5982\u4e0b\uff1a datasets.load_*() \uff1a\u83b7\u53d6\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u6570\u636e\u5df2\u7ecf\u5305\u542b\u5728datasets\u91cc\u9762\u3002 load_* \u51fd\u6570\u6709\u4e00\u4e2a\u901a\u7528\u53c2\u6570 return_X_y \uff0c\u9ed8\u8ba4\u503c\u4e3a return_X_y=False \uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a sklearn.utils.Bunch \u5bf9\u8c61\u3002\u5982\u679c return_X_y=True \uff0c\u5219\u4ec5\u8fd4\u56detuple\uff1a (data,target) \u3002 datasets.fetch_*() \uff1a\u83b7\u53d6\u5927\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u9700\u8981\u4ece\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u3002\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f data_home \uff0c\u8868\u793a\u6570\u636e\u96c6\u4e0b\u8f7d\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662f ~/scikit_learn_data/ \u3002 ~ \u8868\u793a\u8ba1\u7b97\u673a\u7528\u6237\u8def\u5f84\uff0c\u4f8b\u5982'C:\\Users\\UserName'\u3002\u8981\u4fee\u6539\u9ed8\u8ba4\u76ee\u5f55\uff0c\u53ef\u4ee5\u4fee\u6539\u73af\u5883\u53d8\u91cfSCIKIT_LEARN_DATA\u3002 datasets.make_*() \uff1a\u672c\u5730\u751f\u6210\u6570\u636e\u96c6\u3002 datasets . get_data_home () # \u83b7\u53d6\u6570\u636e\u96c6\u76ee\u5f55 datasets . clear_data_home ( data_home = None ) # \u5220\u9664\u6240\u6709\u4e0b\u8f7d\u6570\u636e load* \u548c fetch* \u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u662f datasets.base.Bunch \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a dict \u3002\u53ef\u50cf dict \u4e00\u6837\uff0c\u901a\u8fc7 key \u8bbf\u95ee value \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5c5e\u6027\u65b9\u5f0f\u8bbf\u95ee\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a data\uff1a\u7279\u5f81\u6570\u636e\u6570\u636e\uff08\u6837\u672c\u96c6\uff09\uff0c\u662f $\\text{n_samples} \\times \\text{n_features}$ \u7684\u4e8c\u7ef4 numpy.ndarray \u6570\u7ec4 target\uff1a\u6807\u7b7e\u6570\u7ec4\uff0c\u662f n_samples \u7684\u4e00\u7ef4 numpy.ndarray DESCR\uff1a\u6570\u636e\u63cf\u8ff0 feature_names\uff1a\u7279\u5f81\u540d target_names\uff1a\u6807\u7b7e\u540d loaders:\u52a0\u8f7d\u5668\u2014\u2014\u83b7\u53d6\u5c0f\u6570\u636e\u96c6 \u5c0f\u6570\u636e\u96c6\u5728 sklearn \u91cc\u9762\u7684API\u7edf\u4e00\u4e3a load_ \uff0cThe dataset loaders\u53ef\u4ee5\u52a0\u8f7d\u5c0f\u578b\u6807\u51c6\u6570\u636e\u3002\u5c0f\u6570\u636e\u96c6\u662f\u5c01\u88c5\u5728 sklearn \u91cc\u9762\u7684\u3002 \u4e00\u5171\u670912\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a \u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6 load_boston(return_X_y) \uff0c\u56de\u5f52 \u4e73\u817a\u764c\u6570\u636e\u96c6 load_breast_cancer(return_X_y) \uff0c\u5206\u7c7b \u7cd6\u5c3f\u75c5\u6570\u636e\u96c6 load_diabetes(return_X_y) \uff0c\u56de\u5f52 \u6570\u5b57\u6570\u636e\u96c6 load_digits(n_class, return_X_y) \uff0c\u5206\u7c7b \u9e22\u5c3e\u82b1\u6570\u636e\u96c6 load_iris(return_X_y) \uff0c\u5206\u7c7b \u8461\u8404\u9152\u6570\u636e\u96c6 load_wine(return_X_y) \uff0c\u5206\u7c7b \u00b7\u00b7\u00b7 \u8fd9\u4e9b\u6570\u636e\u96c6\u53ef\u7528\u4e8e\u5feb\u901f\u5b9e\u73b0 scikit-learn \u4e2d\u7684\u5404\u79cd\u7b97\u6cd5\u3002\u4f46\u662f\u8fd9\u4e9b\u6570\u636e\u96c6\u592a\u5c0f\uff0c\u5e76\u4e0d\u80fd\u4ee3\u8868\u73b0\u5b9e\u4e16\u754c\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002 ''' \u7528\u4e8e\u5206\u7c7b\u7684iris\u6570\u636e ''' iris = datasets . load_iris ( return_X_y = True ) # (data,target) \u7684\u4e8c\u7ef4tuple type ( iris ) iris = datasets . load_iris ( return_X_y = False ) type ( iris ) iris . data # \u6837\u672c\u6570\u636e iris [ \"data\" ] iris . target # label \u6570\u636e iris . DESCR # \u6570\u636e\u63cf\u8ff0 iris . feature_names # \u6837\u672c\u7279\u5f81\u540d\uff08\u53d8\u91cf\u540d\uff09 iris . target_names # label \u540d fetchers:\u63d0\u53d6\u5668\u2014\u2014\u83b7\u53d6\u5927\u6570\u636e\u96c6 # \u52a0\u8f7d20\u4e2a\u65b0\u95fb\u7ec4\u6570\u636e\u96c6\u4e2d\u7684\u6587\u4ef6\u540d\u548c\u6570\u636e datasets . fetch_20newsgroups ( data_home = None , subset = 'train' , categories = None , shuffle = True , random_state = 42 , remove = (), download_if_missing = True ) data_home : \u6307\u5b9a\u6570\u636e\u96c6\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u503c\uff1aNone\uff0c\u8868\u793a\u5b58\u50a8\u5728 \u301c/ scikit_learn_data \u6587\u4ef6\u5939\u4e2d\u3002 subset : train \u6216\u8005 test , all \uff0c\u53ef\u9009\uff0c\u5206\u522b\u5bf9\u5e94\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u4e24\u8005\u3002 categories : \u65e0\u6216\u5b57\u7b26\u4e32\u6216 Unicode \u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u52a0\u8f7d\u6240\u6709\u7c7b\u522b\u3002\u5982\u679c\u4e0d\u662f\u65e0\uff0c\u8981\u52a0\u8f7d\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff08\u5ffd\u7565\u5176\u4ed6\u7c7b\u522b\uff09 shuffle : \u662f\u5426\u5bf9\u6570\u636e\u8fdb\u884c\u6d17\u724c\u3002 random_state : numpy \u968f\u673a\u6570\u751f\u6210\u5668\u6216\u79cd\u5b50\u6574\u6570\u3002 download_if_missing : \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aTrue\uff0c\u5982\u679cFalse\uff0c\u5982\u679c\u6570\u636e\u4e0d\u5728\u672c\u5730\u53ef\u7528\u800c\u4e0d\u662f\u5c1d\u8bd5\u4ece\u6e90\u7ad9\u70b9\u4e0b\u8f7d\u6570\u636e\uff0c\u5219\u5f15\u53d1 IOError \u3002 \u4e00\u5171\u670911\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a 20\u7ec4\u65b0\u95fb\u6570\u636e fetch_20newsgroups() \uff0c\u5206\u7c7b 20\u7ec4\u5411\u91cf\u5316\u7684\u65b0\u95fb\u6570\u636e fetch_20newsgroups_vectorized() \uff0c\u5206\u7c7b \u52a0\u5229\u798f\u5c3c\u4e9a\u4f4f\u623f\u6570\u636e\u96c6 fetch_california_housing() \uff0c\u56de\u5f52 fetch_covtype() \uff0c\u5206\u7c7b fetch_kddcup99() \uff0c\u5206\u7c7b fetch_lfw_pairs() \uff0c\u5206\u7c7b fetch_lfw_people() \uff0c\u5206\u7c7b fetch_olivetti_faces() \uff0c fetch_openml() \uff0c fetch_rcvl() \uff0c\u5206\u7c7b fetch_species_distributions() \uff0c\u5206\u7c7b Samples generators:\u6837\u672c\u751f\u6210\u5668 \u591a\u7c7b\u522b\u5206\u7c7b make_classification \uff1a\u751f\u6210\u968f\u673a\u7684$n$\u5206\u7c7b\u6570\u636e\u3002 datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.01, class_sep=1.0, hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int \uff0c\u53ef\u9009\uff08\u9ed8\u8ba4= 20\uff09\uff0c\u7279\u5f81\u603b\u6570\u3002 n_features \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e n_repeated + n_repeated + n_informative \u3002 n_repeated : int \uff0c\u91cd\u590d\u7684\u7279\u5f81\u6570\u91cf\u3002 n_redundant : int \uff0c\u4e0e\u5176\u4ed6\u7279\u5f81\u7ebf\u6027\u76f8\u5173\u7684\u7279\u5f81\u6570\u91cf (\u5197\u4f59\u7279\u5f81)\u3002 n_informative : int \uff0c\u5e26\u6709\u4fe1\u606f\u7684\u7279\u5f81\u7684\u6570\u91cf\u3002n_clusters_per_class must be smaller or equal 2 ** n_informative\u3002 n_classes : int \uff0c\u53ef\u9009\uff08default = 2)\uff0c\u7c7b\uff08\u6216\u6807\u7b7e\uff09\u7684\u5206\u7c7b\u95ee\u9898\u7684\u6570\u91cf\u3002 weights : \u6bcf\u4e2a\u7c7b\u7684\u6743\u91cd\uff0c\u7528\u4e8e\u5206\u914d\u6837\u672c\u70b9\u3002 lip_y : \u968f\u673a\u5206\u914d\u7c7b\u522b\u7684\u6837\u672c\u6bd4\u4f8b\u3002\u8f83\u5927\u7684\u503c\u4f1a\u5728\u6807\u7b7e\u4e2d\u5f15\u5165\u566a\u97f3\uff0c\u5e76\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u56f0\u96be\u3002 class_sep : \u8d85\u7acb\u65b9\u4f53\u5927\u5c0f\u4e58\u4ee5\u7684\u56e0\u5b50\u3002\u8f83\u5927\u7684\u503c\u5206\u6563\u4e86\u7fa4\u96c6/\u7c7b\uff0c\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u5bb9\u6613\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002 \u591a\u6807\u7b7e\u5206\u7c7b datasets.make_multilabel_classification(n_samples=100, n_features=20, n_classes=5, n_labels=2, length=50, allow_unlabeled=True, sparse=False, return_indicator='dense', return_distributions=False, random_state=None) \u56de\u5f52 make_regression \uff1a\u751f\u6210\u56de\u5f52\u6570\u636e\u3002 # \u751f\u6210\u7528\u4e8e\u56de\u5f52\u7684\u6570\u636e\u96c6 datasets . make_regression ( n_samples = 100 , n_features = 100 , n_informative = 10 , n_targets = 1 , bias = 0.0 , effective_rank = None , tail_strength = 0.5 , noise = 0.0 , shuffle = True , coef = False , random_state = None ) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int ,optional\uff08default = 100)\uff0c\u7279\u5f81\u6570\u91cf\u3002 coef : boolean \uff0coptional\uff08default = False\uff09\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u8fd4\u56de\u5e95\u5c42\u7ebf\u6027\u6a21\u578b\u7684\u7cfb\u6570\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002 \u4e24\u4e2a\u4ea4\u9519\u7684\u534a\u5706 make_moons \u751f\u6210\u7684\u6570\u636e\u53ef\u7528\u4e8e\u5206\u7c7b\u6216\u805a\u7c7b\u4efb\u52a1\u3002 datasets.make_moons(n_samples=100, shuffle=True, noise=None, random_state=None) noise \uff1a\u52a0\u5230\u6570\u636e\u4e2d\u7684\u9ad8\u65af\u566a\u58f0\u7684\u6807\u51c6\u5dee\u3002 X , y = datasets . make_moons ( n_samples = 100 , random_state = 1 ) X1 , y1 = datasets . make_moons ( n_samples = 100 , noise = 0.1 , random_state = 1 ) plt . scatter ( X [ y == 0 ][:, 0 ], X [ y == 0 ][:, 1 ], c = \"#CD5C5C\" , label = \"noise=0\" ) plt . scatter ( X [ y == 1 ][:, 0 ], X [ y == 1 ][:, 1 ], c = \"#F08080\" , label = \"noise=0\" ) plt . scatter ( X1 [ y1 == 0 ][:, 0 ], X1 [ y1 == 0 ][:, 1 ], c = \"#5F9EA0\" , label = \"noise=0.1\" ) plt . scatter ( X1 [ y1 == 1 ][:, 0 ], X1 [ y1 == 1 ][:, 1 ], c = \"#B0E0E6\" , label = \"noise=0.1\" ) plt . title ( \"two interleaving half circles\" . title ()) plt . legend () plt . show () \u5e38\u91cf\u5bf9\u89d2\u5757\u77e9\u9635 make_biclusters \u751f\u6210\u5177\u6709constant block\u5bf9\u89d2\u7ebf\u7ed3\u6784\u7684\u77e9\u9635\uff0c\u53ef\u7528\u4e8e\u53cc\u805a\u7c7b\u3002 datasets.make_biclusters(shape, n_clusters, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None) params = dict ( shape = ( 100 , 100 ), n_clusters = 3 , minval = 1 , maxval = 10 , noise = 0 , random_state = None , shuffle = False ) X , row_idx , col_idx = datasets . make_biclusters ( ** params ) X1 , * _ = datasets . make_biclusters ( ** { k : v if k != \"noise\" else 1 for k , v in params . items ()}) X2 , * _ = datasets . make_biclusters ( ** { k : v if k != \"shuffle\" else True for k , v in params . items ()}) fig , axs = plt . subplots ( 1 , 3 , sharex = True , sharey = True ) data = [ X , X1 , X2 ] titles = [ \"noise=0, shuffle=False\" , \"noise=1.0\" , \"shuffle=True\" ] for i , data , title in zip ( range ( 3 ), [ X , X1 , X2 ], titles ): axs [ i ] . matshow ( data , cmap = plt . cm . Blues ) axs [ i ] . set_xlabel ( title ) axs [ i ] . xaxis . set_ticks_position ( 'none' ) axs [ i ] . yaxis . set_ticks_position ( 'none' ) plt . show () \u5404\u5411\u540c\u6027\u7684\u9ad8\u65af\u70b9 datasets.make_blobs(n_samples=100, n_features=2, centers=None, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True, random_state=None, return_centers=False) X , label , centers = datasets . make_blobs ( cluster_std = 1 , return_centers = True , random_state = 1 ) for i in set ( label ): plt . scatter ( X [ label == i ][:, 0 ], X [ label == i ][:, 1 ]) plt . scatter ( centers [ i , 0 ], centers [ i , 1 ], s = 80 , marker = \"+\" ) plt . show () \u68cb\u76d8\u683c\u7ed3\u6784\u7684\u77e9\u9635 make_checkerboard \u751f\u6210\u5177\u6709\u68cb\u76d8\u683c\u7ed3\u6784\u7684\u77e9\u9635\uff0c\u53ef\u7528\u4e8e\u53cc\u805a\u7c7b\u3002 datasets.make_checkerboard(shape, n_clusters, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None) # datasets.make_checkerboard X , row_idx , col_idx = datasets . make_checkerboard ( shape = ( 100 , 100 ), n_clusters = 3 , minval = 0 , maxval = 20 , noise = 0.1 , shuffle = False , random_state = 1 ) plt . matshow ( X , cmap = plt . cm . Blues ) plt . show () \u5305\u542b\u5c0f\u5706\u7684\u5927\u5706 \u7528\u4e8e\u805a\u7c7b\u548c\u5206\u7c7b\u3002 datasets.make_circles(n_samples=100, shuffle=True, noise=None, random_state=None, factor=0.8) X , y = datasets . make_circles () outer , inner = y == 0 , y == 1 plt . scatter ( X [ outer ][:, 0 ], X [ outer ][:, 1 ]) plt . scatter ( X [ inner ][:, 0 ], X [ inner ][:, 1 ]) plt . show () \u745e\u58eb\u5377 datasets.make_swiss_roll(n_samples=100, noise=0.0, random_state=None) import mpl_toolkits.mplot3d.axes3d as p3 X , y = datasets . make_swiss_roll ( 2000 ) fig = plt . figure () ax = p3 . Axes3D ( fig ) ax . view_init ( 7 , - 70 ) ax . scatter ( X [:, 0 ], X [:, 1 ], X [:, 2 ], # color=\"#DAA520\", c = y , cmap = plt . cm . Pastel1 , s = 20 , edgecolor = 'k' ) plt . title ( \"Swiss Roll\" ) plt . show () \u66f2\u9762 datasets.make_s_curve(n_samples=100, noise=0.0, random_state=None) X , color = datasets . make_s_curve ( 1000 , random_state = 0 ) fig = plt . figure ( figsize = ( 8 , 6 )) # fig.suptitle(\"S curve\", fontsize=25) ax = plt . subplot2grid (( 5 , 4 ), ( 1 , 0 ), rowspan = 3 , colspan = 1 ) ax . scatter ( X [:, 0 ], X [:, 2 ], c = color , cmap = plt . cm . Spectral ) # ax.xaxis.set_major_formatter(NullFormatter()) # ax.yaxis.set_major_formatter(NullFormatter()) # Add 3d scatter plot ax = plt . subplot2grid (( 5 , 4 ), ( 0 , 1 ), rowspan = 5 , colspan = 3 , projection = '3d' ) ax . scatter ( X [:, 0 ], X [:, 1 ], X [:, 2 ], c = color , cmap = plt . cm . Spectral ) ax . view_init ( 4 , - 60 ) plt . show () \u968f\u673a\u5bf9\u79f0\u6b63\u5b9a\u77e9\u9635 datasets.make_spd_matrix(n_dim, random_state=None) X = datasets . make_spd_matrix ( 10 , random_state = 1 ) plt . matshow ( X , cmap = plt . cm . Blues ) plt . show () \u968f\u673a\u5bf9\u79f0\u6b63\u5b9a\u7a00\u758f\u77e9\u9635 datasets.make_spd_matrix(n_dim, random_state=None) X = datasets . make_sparse_spd_matrix ( 10 , random_state = 1 ) plt . matshow ( X , cmap = plt . cm . Blues ) plt . show ()","title":"11.1.\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_1","text":"sklearn \u5305\u81ea\u5e26\u4e00\u4e9b\u73a9\u5177\u6570\u636e\u96c6\uff0c\u8fd8\u5177\u6709\u4e00\u4e9b\u4eba\u5de5\u6570\u636e\u751f\u6210\u5668\u3002\u4e3b\u8981\u63a5\u53e3\u5982\u4e0b\uff1a datasets.load_*() \uff1a\u83b7\u53d6\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u6570\u636e\u5df2\u7ecf\u5305\u542b\u5728datasets\u91cc\u9762\u3002 load_* \u51fd\u6570\u6709\u4e00\u4e2a\u901a\u7528\u53c2\u6570 return_X_y \uff0c\u9ed8\u8ba4\u503c\u4e3a return_X_y=False \uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a sklearn.utils.Bunch \u5bf9\u8c61\u3002\u5982\u679c return_X_y=True \uff0c\u5219\u4ec5\u8fd4\u56detuple\uff1a (data,target) \u3002 datasets.fetch_*() \uff1a\u83b7\u53d6\u5927\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u9700\u8981\u4ece\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u3002\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f data_home \uff0c\u8868\u793a\u6570\u636e\u96c6\u4e0b\u8f7d\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662f ~/scikit_learn_data/ \u3002 ~ \u8868\u793a\u8ba1\u7b97\u673a\u7528\u6237\u8def\u5f84\uff0c\u4f8b\u5982'C:\\Users\\UserName'\u3002\u8981\u4fee\u6539\u9ed8\u8ba4\u76ee\u5f55\uff0c\u53ef\u4ee5\u4fee\u6539\u73af\u5883\u53d8\u91cfSCIKIT_LEARN_DATA\u3002 datasets.make_*() \uff1a\u672c\u5730\u751f\u6210\u6570\u636e\u96c6\u3002 datasets . get_data_home () # \u83b7\u53d6\u6570\u636e\u96c6\u76ee\u5f55 datasets . clear_data_home ( data_home = None ) # \u5220\u9664\u6240\u6709\u4e0b\u8f7d\u6570\u636e load* \u548c fetch* \u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u662f datasets.base.Bunch \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a dict \u3002\u53ef\u50cf dict \u4e00\u6837\uff0c\u901a\u8fc7 key \u8bbf\u95ee value \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5c5e\u6027\u65b9\u5f0f\u8bbf\u95ee\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a data\uff1a\u7279\u5f81\u6570\u636e\u6570\u636e\uff08\u6837\u672c\u96c6\uff09\uff0c\u662f $\\text{n_samples} \\times \\text{n_features}$ \u7684\u4e8c\u7ef4 numpy.ndarray \u6570\u7ec4 target\uff1a\u6807\u7b7e\u6570\u7ec4\uff0c\u662f n_samples \u7684\u4e00\u7ef4 numpy.ndarray DESCR\uff1a\u6570\u636e\u63cf\u8ff0 feature_names\uff1a\u7279\u5f81\u540d target_names\uff1a\u6807\u7b7e\u540d","title":"\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#loaders","text":"\u5c0f\u6570\u636e\u96c6\u5728 sklearn \u91cc\u9762\u7684API\u7edf\u4e00\u4e3a load_ \uff0cThe dataset loaders\u53ef\u4ee5\u52a0\u8f7d\u5c0f\u578b\u6807\u51c6\u6570\u636e\u3002\u5c0f\u6570\u636e\u96c6\u662f\u5c01\u88c5\u5728 sklearn \u91cc\u9762\u7684\u3002 \u4e00\u5171\u670912\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a \u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6 load_boston(return_X_y) \uff0c\u56de\u5f52 \u4e73\u817a\u764c\u6570\u636e\u96c6 load_breast_cancer(return_X_y) \uff0c\u5206\u7c7b \u7cd6\u5c3f\u75c5\u6570\u636e\u96c6 load_diabetes(return_X_y) \uff0c\u56de\u5f52 \u6570\u5b57\u6570\u636e\u96c6 load_digits(n_class, return_X_y) \uff0c\u5206\u7c7b \u9e22\u5c3e\u82b1\u6570\u636e\u96c6 load_iris(return_X_y) \uff0c\u5206\u7c7b \u8461\u8404\u9152\u6570\u636e\u96c6 load_wine(return_X_y) \uff0c\u5206\u7c7b \u00b7\u00b7\u00b7 \u8fd9\u4e9b\u6570\u636e\u96c6\u53ef\u7528\u4e8e\u5feb\u901f\u5b9e\u73b0 scikit-learn \u4e2d\u7684\u5404\u79cd\u7b97\u6cd5\u3002\u4f46\u662f\u8fd9\u4e9b\u6570\u636e\u96c6\u592a\u5c0f\uff0c\u5e76\u4e0d\u80fd\u4ee3\u8868\u73b0\u5b9e\u4e16\u754c\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002 ''' \u7528\u4e8e\u5206\u7c7b\u7684iris\u6570\u636e ''' iris = datasets . load_iris ( return_X_y = True ) # (data,target) \u7684\u4e8c\u7ef4tuple type ( iris ) iris = datasets . load_iris ( return_X_y = False ) type ( iris ) iris . data # \u6837\u672c\u6570\u636e iris [ \"data\" ] iris . target # label \u6570\u636e iris . DESCR # \u6570\u636e\u63cf\u8ff0 iris . feature_names # \u6837\u672c\u7279\u5f81\u540d\uff08\u53d8\u91cf\u540d\uff09 iris . target_names # label \u540d","title":"loaders:\u52a0\u8f7d\u5668\u2014\u2014\u83b7\u53d6\u5c0f\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#fetchers","text":"# \u52a0\u8f7d20\u4e2a\u65b0\u95fb\u7ec4\u6570\u636e\u96c6\u4e2d\u7684\u6587\u4ef6\u540d\u548c\u6570\u636e datasets . fetch_20newsgroups ( data_home = None , subset = 'train' , categories = None , shuffle = True , random_state = 42 , remove = (), download_if_missing = True ) data_home : \u6307\u5b9a\u6570\u636e\u96c6\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u503c\uff1aNone\uff0c\u8868\u793a\u5b58\u50a8\u5728 \u301c/ scikit_learn_data \u6587\u4ef6\u5939\u4e2d\u3002 subset : train \u6216\u8005 test , all \uff0c\u53ef\u9009\uff0c\u5206\u522b\u5bf9\u5e94\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u4e24\u8005\u3002 categories : \u65e0\u6216\u5b57\u7b26\u4e32\u6216 Unicode \u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u52a0\u8f7d\u6240\u6709\u7c7b\u522b\u3002\u5982\u679c\u4e0d\u662f\u65e0\uff0c\u8981\u52a0\u8f7d\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff08\u5ffd\u7565\u5176\u4ed6\u7c7b\u522b\uff09 shuffle : \u662f\u5426\u5bf9\u6570\u636e\u8fdb\u884c\u6d17\u724c\u3002 random_state : numpy \u968f\u673a\u6570\u751f\u6210\u5668\u6216\u79cd\u5b50\u6574\u6570\u3002 download_if_missing : \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aTrue\uff0c\u5982\u679cFalse\uff0c\u5982\u679c\u6570\u636e\u4e0d\u5728\u672c\u5730\u53ef\u7528\u800c\u4e0d\u662f\u5c1d\u8bd5\u4ece\u6e90\u7ad9\u70b9\u4e0b\u8f7d\u6570\u636e\uff0c\u5219\u5f15\u53d1 IOError \u3002 \u4e00\u5171\u670911\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a 20\u7ec4\u65b0\u95fb\u6570\u636e fetch_20newsgroups() \uff0c\u5206\u7c7b 20\u7ec4\u5411\u91cf\u5316\u7684\u65b0\u95fb\u6570\u636e fetch_20newsgroups_vectorized() \uff0c\u5206\u7c7b \u52a0\u5229\u798f\u5c3c\u4e9a\u4f4f\u623f\u6570\u636e\u96c6 fetch_california_housing() \uff0c\u56de\u5f52 fetch_covtype() \uff0c\u5206\u7c7b fetch_kddcup99() \uff0c\u5206\u7c7b fetch_lfw_pairs() \uff0c\u5206\u7c7b fetch_lfw_people() \uff0c\u5206\u7c7b fetch_olivetti_faces() \uff0c fetch_openml() \uff0c fetch_rcvl() \uff0c\u5206\u7c7b fetch_species_distributions() \uff0c\u5206\u7c7b","title":"fetchers:\u63d0\u53d6\u5668\u2014\u2014\u83b7\u53d6\u5927\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#samples-generators","text":"","title":"Samples generators:\u6837\u672c\u751f\u6210\u5668"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_2","text":"make_classification \uff1a\u751f\u6210\u968f\u673a\u7684$n$\u5206\u7c7b\u6570\u636e\u3002 datasets.make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=2, n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.01, class_sep=1.0, hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int \uff0c\u53ef\u9009\uff08\u9ed8\u8ba4= 20\uff09\uff0c\u7279\u5f81\u603b\u6570\u3002 n_features \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e n_repeated + n_repeated + n_informative \u3002 n_repeated : int \uff0c\u91cd\u590d\u7684\u7279\u5f81\u6570\u91cf\u3002 n_redundant : int \uff0c\u4e0e\u5176\u4ed6\u7279\u5f81\u7ebf\u6027\u76f8\u5173\u7684\u7279\u5f81\u6570\u91cf (\u5197\u4f59\u7279\u5f81)\u3002 n_informative : int \uff0c\u5e26\u6709\u4fe1\u606f\u7684\u7279\u5f81\u7684\u6570\u91cf\u3002n_clusters_per_class must be smaller or equal 2 ** n_informative\u3002 n_classes : int \uff0c\u53ef\u9009\uff08default = 2)\uff0c\u7c7b\uff08\u6216\u6807\u7b7e\uff09\u7684\u5206\u7c7b\u95ee\u9898\u7684\u6570\u91cf\u3002 weights : \u6bcf\u4e2a\u7c7b\u7684\u6743\u91cd\uff0c\u7528\u4e8e\u5206\u914d\u6837\u672c\u70b9\u3002 lip_y : \u968f\u673a\u5206\u914d\u7c7b\u522b\u7684\u6837\u672c\u6bd4\u4f8b\u3002\u8f83\u5927\u7684\u503c\u4f1a\u5728\u6807\u7b7e\u4e2d\u5f15\u5165\u566a\u97f3\uff0c\u5e76\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u56f0\u96be\u3002 class_sep : \u8d85\u7acb\u65b9\u4f53\u5927\u5c0f\u4e58\u4ee5\u7684\u56e0\u5b50\u3002\u8f83\u5927\u7684\u503c\u5206\u6563\u4e86\u7fa4\u96c6/\u7c7b\uff0c\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u5bb9\u6613\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002","title":"\u591a\u7c7b\u522b\u5206\u7c7b"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_3","text":"datasets.make_multilabel_classification(n_samples=100, n_features=20, n_classes=5, n_labels=2, length=50, allow_unlabeled=True, sparse=False, return_indicator='dense', return_distributions=False, random_state=None)","title":"\u591a\u6807\u7b7e\u5206\u7c7b"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_4","text":"make_regression \uff1a\u751f\u6210\u56de\u5f52\u6570\u636e\u3002 # \u751f\u6210\u7528\u4e8e\u56de\u5f52\u7684\u6570\u636e\u96c6 datasets . make_regression ( n_samples = 100 , n_features = 100 , n_informative = 10 , n_targets = 1 , bias = 0.0 , effective_rank = None , tail_strength = 0.5 , noise = 0.0 , shuffle = True , coef = False , random_state = None ) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int ,optional\uff08default = 100)\uff0c\u7279\u5f81\u6570\u91cf\u3002 coef : boolean \uff0coptional\uff08default = False\uff09\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u8fd4\u56de\u5e95\u5c42\u7ebf\u6027\u6a21\u578b\u7684\u7cfb\u6570\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002","title":"\u56de\u5f52"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_5","text":"make_moons \u751f\u6210\u7684\u6570\u636e\u53ef\u7528\u4e8e\u5206\u7c7b\u6216\u805a\u7c7b\u4efb\u52a1\u3002 datasets.make_moons(n_samples=100, shuffle=True, noise=None, random_state=None) noise \uff1a\u52a0\u5230\u6570\u636e\u4e2d\u7684\u9ad8\u65af\u566a\u58f0\u7684\u6807\u51c6\u5dee\u3002 X , y = datasets . make_moons ( n_samples = 100 , random_state = 1 ) X1 , y1 = datasets . make_moons ( n_samples = 100 , noise = 0.1 , random_state = 1 ) plt . scatter ( X [ y == 0 ][:, 0 ], X [ y == 0 ][:, 1 ], c = \"#CD5C5C\" , label = \"noise=0\" ) plt . scatter ( X [ y == 1 ][:, 0 ], X [ y == 1 ][:, 1 ], c = \"#F08080\" , label = \"noise=0\" ) plt . scatter ( X1 [ y1 == 0 ][:, 0 ], X1 [ y1 == 0 ][:, 1 ], c = \"#5F9EA0\" , label = \"noise=0.1\" ) plt . scatter ( X1 [ y1 == 1 ][:, 0 ], X1 [ y1 == 1 ][:, 1 ], c = \"#B0E0E6\" , label = \"noise=0.1\" ) plt . title ( \"two interleaving half circles\" . title ()) plt . legend () plt . show ()","title":"\u4e24\u4e2a\u4ea4\u9519\u7684\u534a\u5706"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_6","text":"make_biclusters \u751f\u6210\u5177\u6709constant block\u5bf9\u89d2\u7ebf\u7ed3\u6784\u7684\u77e9\u9635\uff0c\u53ef\u7528\u4e8e\u53cc\u805a\u7c7b\u3002 datasets.make_biclusters(shape, n_clusters, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None) params = dict ( shape = ( 100 , 100 ), n_clusters = 3 , minval = 1 , maxval = 10 , noise = 0 , random_state = None , shuffle = False ) X , row_idx , col_idx = datasets . make_biclusters ( ** params ) X1 , * _ = datasets . make_biclusters ( ** { k : v if k != \"noise\" else 1 for k , v in params . items ()}) X2 , * _ = datasets . make_biclusters ( ** { k : v if k != \"shuffle\" else True for k , v in params . items ()}) fig , axs = plt . subplots ( 1 , 3 , sharex = True , sharey = True ) data = [ X , X1 , X2 ] titles = [ \"noise=0, shuffle=False\" , \"noise=1.0\" , \"shuffle=True\" ] for i , data , title in zip ( range ( 3 ), [ X , X1 , X2 ], titles ): axs [ i ] . matshow ( data , cmap = plt . cm . Blues ) axs [ i ] . set_xlabel ( title ) axs [ i ] . xaxis . set_ticks_position ( 'none' ) axs [ i ] . yaxis . set_ticks_position ( 'none' ) plt . show ()","title":"\u5e38\u91cf\u5bf9\u89d2\u5757\u77e9\u9635"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_7","text":"datasets.make_blobs(n_samples=100, n_features=2, centers=None, cluster_std=1.0, center_box=(-10.0, 10.0), shuffle=True, random_state=None, return_centers=False) X , label , centers = datasets . make_blobs ( cluster_std = 1 , return_centers = True , random_state = 1 ) for i in set ( label ): plt . scatter ( X [ label == i ][:, 0 ], X [ label == i ][:, 1 ]) plt . scatter ( centers [ i , 0 ], centers [ i , 1 ], s = 80 , marker = \"+\" ) plt . show ()","title":"\u5404\u5411\u540c\u6027\u7684\u9ad8\u65af\u70b9"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_8","text":"make_checkerboard \u751f\u6210\u5177\u6709\u68cb\u76d8\u683c\u7ed3\u6784\u7684\u77e9\u9635\uff0c\u53ef\u7528\u4e8e\u53cc\u805a\u7c7b\u3002 datasets.make_checkerboard(shape, n_clusters, noise=0.0, minval=10, maxval=100, shuffle=True, random_state=None) # datasets.make_checkerboard X , row_idx , col_idx = datasets . make_checkerboard ( shape = ( 100 , 100 ), n_clusters = 3 , minval = 0 , maxval = 20 , noise = 0.1 , shuffle = False , random_state = 1 ) plt . matshow ( X , cmap = plt . cm . Blues ) plt . show ()","title":"\u68cb\u76d8\u683c\u7ed3\u6784\u7684\u77e9\u9635"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_9","text":"\u7528\u4e8e\u805a\u7c7b\u548c\u5206\u7c7b\u3002 datasets.make_circles(n_samples=100, shuffle=True, noise=None, random_state=None, factor=0.8) X , y = datasets . make_circles () outer , inner = y == 0 , y == 1 plt . scatter ( X [ outer ][:, 0 ], X [ outer ][:, 1 ]) plt . scatter ( X [ inner ][:, 0 ], X [ inner ][:, 1 ]) plt . show ()","title":"\u5305\u542b\u5c0f\u5706\u7684\u5927\u5706"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_10","text":"datasets.make_swiss_roll(n_samples=100, noise=0.0, random_state=None) import mpl_toolkits.mplot3d.axes3d as p3 X , y = datasets . make_swiss_roll ( 2000 ) fig = plt . figure () ax = p3 . Axes3D ( fig ) ax . view_init ( 7 , - 70 ) ax . scatter ( X [:, 0 ], X [:, 1 ], X [:, 2 ], # color=\"#DAA520\", c = y , cmap = plt . cm . Pastel1 , s = 20 , edgecolor = 'k' ) plt . title ( \"Swiss Roll\" ) plt . show ()","title":"\u745e\u58eb\u5377"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_11","text":"datasets.make_s_curve(n_samples=100, noise=0.0, random_state=None) X , color = datasets . make_s_curve ( 1000 , random_state = 0 ) fig = plt . figure ( figsize = ( 8 , 6 )) # fig.suptitle(\"S curve\", fontsize=25) ax = plt . subplot2grid (( 5 , 4 ), ( 1 , 0 ), rowspan = 3 , colspan = 1 ) ax . scatter ( X [:, 0 ], X [:, 2 ], c = color , cmap = plt . cm . Spectral ) # ax.xaxis.set_major_formatter(NullFormatter()) # ax.yaxis.set_major_formatter(NullFormatter()) # Add 3d scatter plot ax = plt . subplot2grid (( 5 , 4 ), ( 0 , 1 ), rowspan = 5 , colspan = 3 , projection = '3d' ) ax . scatter ( X [:, 0 ], X [:, 1 ], X [:, 2 ], c = color , cmap = plt . cm . Spectral ) ax . view_init ( 4 , - 60 ) plt . show ()","title":"\u66f2\u9762"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_12","text":"datasets.make_spd_matrix(n_dim, random_state=None) X = datasets . make_spd_matrix ( 10 , random_state = 1 ) plt . matshow ( X , cmap = plt . cm . Blues ) plt . show ()","title":"\u968f\u673a\u5bf9\u79f0\u6b63\u5b9a\u77e9\u9635"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_13","text":"datasets.make_spd_matrix(n_dim, random_state=None) X = datasets . make_sparse_spd_matrix ( 10 , random_state = 1 ) plt . matshow ( X , cmap = plt . cm . Blues ) plt . show ()","title":"\u968f\u673a\u5bf9\u79f0\u6b63\u5b9a\u7a00\u758f\u77e9\u9635"},{"location":"scikit-learn/11.10.%E8%BD%AC%E6%8D%A2%E9%A2%84%E6%B5%8B%E7%9B%AE%E6%A0%87y.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.14 sklearn version: 0.22.1 label\u7f16\u7801 LabelBinarizer\uff1a \u4e8c\u5206\u7c7b\u6216\u591a\u5206\u7c7b \u4ee5 one-vs-all \u7684\u65b9\u5f0f\u5bf9label\u8fdb\u884c\u4e8c\u503c\u5316\u3002\u5c06\u4e8c\u5206\u7c7b\u7684\u7b97\u6cd5\u63a8\u5e7f\u5230\u591a\u5206\u7c7b\u4efb\u52a1\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 one-vs-all \u65b9\u6848\u3002 LabelBinarizer ( neg_label = 0 , pos_label = 1 , sparse_output = False ) from sklearn.preprocessing import LabelBinarizer lb = LabelBinarizer () lb . fit ([ 1 , 2 , 6 , 4 , 2 ]) print ( lb . classes_ ) lb . transform ([ 1 , 6 ]) [1 2 4 6] array([[1, 0, 0, 0], [0, 0, 0, 1]]) \u4e0a\u8ff0\u8fc7\u7a0b\u548c OneHotEncoder \u5f88\u50cf\uff0c\u4f46\u5e76\u4e0d\u4e00\u6837\uff0c OneHotEncoder \u7528\u4e8e\u8f6c\u6362\u7279\u5f81\uff0c\u5e76\u4e14\u8981\u6c42\u6570\u636e\u662f\u4e8c\u7ef4\u7684\uff0c\u4ee5\u53ca fit \u7684\u6570\u636e\u548c transform \u7684\u6570\u636e\u5177\u6709\u76f8\u540c\u7684\u7ef4\u5ea6\u3002 \u5c06\u4e8c\u5206\u7c7b\u8f6c\u6362\u4e3a\u5217\u5411\u91cf\u8868\u793a\uff1a lb = LabelBinarizer () lb . fit_transform ([ 'yes' , 'no' , 'no' , 'yes' ]) array([[1], [0], [0], [1]]) \u5c06\u591a\u5206\u7c7b\u8f6c\u6362\u4e3a\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\uff1a import numpy as np # fit \u53ea\u5b66\u4e60\u4e86\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6 lb . fit ( np . array ([[ 0 , 1 , 1 ], [ 1 , 0 , 0 ]])) print ( lb . classes_ ) lb . transform ([ 0 , 1 , 2 , 1 ]) [0 1 2] array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]) MultiLabelBinarizer\uff1a \u591a\u6807\u7b7e LabelBinarizer \u53ea\u9002\u5408\u591a\u5206\u7c7b\u4efb\u52a1\uff0c\u800c\u591a\u6807\u7b7e\u7684\u60c5\u51b5\u5219\u9700\u8981 MultiLabelBinarizer \u3002 from sklearn.preprocessing import MultiLabelBinarizer mlb = MultiLabelBinarizer () print ( mlb . fit_transform ([( 1 , 2 ), ( 3 ,)])) mlb . classes_ [[1 1 0] [0 0 1]] array([1, 2, 3]) print ( mlb . fit_transform ([{ 'sci-fi' , 'thriller' }, { 'comedy' }])) list ( mlb . classes_ ) [[0 1 1] [1 0 0]] ['comedy', 'sci-fi', 'thriller'] \u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\u7ed9 MultiLabelBinarizer \u4f20\u5165\u4e00\u7ef4\u5217\u8868\uff1a mlb = MultiLabelBinarizer () mlb . fit ([ 'sci-fi' , 'thriller' , 'comedy' ]) mlb . classes_ # \u8981\u66f4\u6b63\u6b64\u95ee\u9898\uff0c\u6807\u7b7e\u5217\u8868\u5e94\u6309\u4ee5\u4e0b\u65b9\u5f0f\u4f20\u9012\uff1a mlb = MultiLabelBinarizer () mlb . fit ([[ 'sci-fi' , 'thriller' , 'comedy' ]]) mlb . classes_ array(['comedy', 'sci-fi', 'thriller'], dtype=object) LabelEncoder\uff1a label\u7684\u6574\u6570\u7f16\u7801 from sklearn.preprocessing import LabelEncoder le = LabelEncoder () le . fit ([ 'beijing' , 'shanghai' , 'guangzhou' , 'hangzhou' , 'nanjing' , 'wuhan' ]) print ( le . classes_ ) le . transform ([ 'hangzhou' , 'guangzhou' , 'beijing' , 'hangzhou' , 'nanjing' , 'guangzhou' ]) ['beijing' 'guangzhou' 'hangzhou' 'nanjing' 'shanghai' 'wuhan'] array([2, 1, 0, 2, 3, 1], dtype=int64)","title":"11.10.\u8f6c\u6362\u9884\u6d4b\u76ee\u6807y"},{"location":"scikit-learn/11.10.%E8%BD%AC%E6%8D%A2%E9%A2%84%E6%B5%8B%E7%9B%AE%E6%A0%87y.html#label","text":"","title":"label\u7f16\u7801"},{"location":"scikit-learn/11.10.%E8%BD%AC%E6%8D%A2%E9%A2%84%E6%B5%8B%E7%9B%AE%E6%A0%87y.html#labelbinarizer","text":"\u4ee5 one-vs-all \u7684\u65b9\u5f0f\u5bf9label\u8fdb\u884c\u4e8c\u503c\u5316\u3002\u5c06\u4e8c\u5206\u7c7b\u7684\u7b97\u6cd5\u63a8\u5e7f\u5230\u591a\u5206\u7c7b\u4efb\u52a1\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 one-vs-all \u65b9\u6848\u3002 LabelBinarizer ( neg_label = 0 , pos_label = 1 , sparse_output = False ) from sklearn.preprocessing import LabelBinarizer lb = LabelBinarizer () lb . fit ([ 1 , 2 , 6 , 4 , 2 ]) print ( lb . classes_ ) lb . transform ([ 1 , 6 ]) [1 2 4 6] array([[1, 0, 0, 0], [0, 0, 0, 1]]) \u4e0a\u8ff0\u8fc7\u7a0b\u548c OneHotEncoder \u5f88\u50cf\uff0c\u4f46\u5e76\u4e0d\u4e00\u6837\uff0c OneHotEncoder \u7528\u4e8e\u8f6c\u6362\u7279\u5f81\uff0c\u5e76\u4e14\u8981\u6c42\u6570\u636e\u662f\u4e8c\u7ef4\u7684\uff0c\u4ee5\u53ca fit \u7684\u6570\u636e\u548c transform \u7684\u6570\u636e\u5177\u6709\u76f8\u540c\u7684\u7ef4\u5ea6\u3002 \u5c06\u4e8c\u5206\u7c7b\u8f6c\u6362\u4e3a\u5217\u5411\u91cf\u8868\u793a\uff1a lb = LabelBinarizer () lb . fit_transform ([ 'yes' , 'no' , 'no' , 'yes' ]) array([[1], [0], [0], [1]]) \u5c06\u591a\u5206\u7c7b\u8f6c\u6362\u4e3a\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\uff1a import numpy as np # fit \u53ea\u5b66\u4e60\u4e86\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6 lb . fit ( np . array ([[ 0 , 1 , 1 ], [ 1 , 0 , 0 ]])) print ( lb . classes_ ) lb . transform ([ 0 , 1 , 2 , 1 ]) [0 1 2] array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]])","title":"LabelBinarizer\uff1a \u4e8c\u5206\u7c7b\u6216\u591a\u5206\u7c7b"},{"location":"scikit-learn/11.10.%E8%BD%AC%E6%8D%A2%E9%A2%84%E6%B5%8B%E7%9B%AE%E6%A0%87y.html#multilabelbinarizer","text":"LabelBinarizer \u53ea\u9002\u5408\u591a\u5206\u7c7b\u4efb\u52a1\uff0c\u800c\u591a\u6807\u7b7e\u7684\u60c5\u51b5\u5219\u9700\u8981 MultiLabelBinarizer \u3002 from sklearn.preprocessing import MultiLabelBinarizer mlb = MultiLabelBinarizer () print ( mlb . fit_transform ([( 1 , 2 ), ( 3 ,)])) mlb . classes_ [[1 1 0] [0 0 1]] array([1, 2, 3]) print ( mlb . fit_transform ([{ 'sci-fi' , 'thriller' }, { 'comedy' }])) list ( mlb . classes_ ) [[0 1 1] [1 0 0]] ['comedy', 'sci-fi', 'thriller'] \u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\u7ed9 MultiLabelBinarizer \u4f20\u5165\u4e00\u7ef4\u5217\u8868\uff1a mlb = MultiLabelBinarizer () mlb . fit ([ 'sci-fi' , 'thriller' , 'comedy' ]) mlb . classes_ # \u8981\u66f4\u6b63\u6b64\u95ee\u9898\uff0c\u6807\u7b7e\u5217\u8868\u5e94\u6309\u4ee5\u4e0b\u65b9\u5f0f\u4f20\u9012\uff1a mlb = MultiLabelBinarizer () mlb . fit ([[ 'sci-fi' , 'thriller' , 'comedy' ]]) mlb . classes_ array(['comedy', 'sci-fi', 'thriller'], dtype=object)","title":"MultiLabelBinarizer\uff1a \u591a\u6807\u7b7e"},{"location":"scikit-learn/11.10.%E8%BD%AC%E6%8D%A2%E9%A2%84%E6%B5%8B%E7%9B%AE%E6%A0%87y.html#labelencoder-label","text":"from sklearn.preprocessing import LabelEncoder le = LabelEncoder () le . fit ([ 'beijing' , 'shanghai' , 'guangzhou' , 'hangzhou' , 'nanjing' , 'wuhan' ]) print ( le . classes_ ) le . transform ([ 'hangzhou' , 'guangzhou' , 'beijing' , 'hangzhou' , 'nanjing' , 'guangzhou' ]) ['beijing' 'guangzhou' 'hangzhou' 'nanjing' 'shanghai' 'wuhan'] array([2, 1, 0, 2, 3, 1], dtype=int64)","title":"LabelEncoder\uff1a label\u7684\u6574\u6570\u7f16\u7801"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html","text":"Windows 10 Python 3.6.9 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.15 sklearn version: 0.22.1 \u8fc7\u6ee4\u5f0f\u7279\u5f81\u9009\u53d6 VarianceThreshold VarianceThreshold \u7528\u4e8e\u5254\u9664\u65b9\u5dee\u5f88\u5c0f\u7684\u7279\u5f81\uff1a VarianceThreshold ( threshold = 0.0 ) threshold \uff1a\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u6307\u5b9a\u65b9\u5dee\u7684\u9608\u503c\u3002\u4f4e\u4e8e\u6b64\u9608\u503c\u7684\u7279\u5f81\u5c06\u88ab\u5254\u9664\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7279\u5f81\u662f\u5e03\u5c14\u503c\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u60f3\u8981\u79fb\u9664\u90a3\u4e9b\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u7279\u5f81\u503c\u4e3a0\u6216\u8005\u4e3a1\u7684\u6bd4\u4f8b\u8d85\u8fc780%\u7684\u7279\u5f81\u3002\u5e03\u5c14\u7279\u5f81\u662f\u4f2f\u52aa\u5229\uff08 Bernoulli \uff09\u968f\u673a\u53d8\u91cf\uff0c\u53d8\u91cf\u7684\u65b9\u5dee\u4e3a: $$\\operatorname{Var}[X]=p(1-p)$$ \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9608\u503c .8 * (1 - .8) \u8fdb\u884c\u9009\u62e9: from sklearn.feature_selection import VarianceThreshold X = [[ 0 , 0 , 1 ], [ 0 , 1 , 0 ], [ 1 , 0 , 0 ], [ 0 , 1 , 1 ], [ 0 , 1 , 0 ], [ 0 , 1 , 1 ]] sel = VarianceThreshold ( threshold = ( . 8 * ( 1 - . 8 ))) print ( sel . fit_transform ( X )) print ( sel . get_support ( indices = False )) [[0 1] [1 0] [0 0] [1 1] [1 0] [1 1]] [False True True] \u5c5e\u6027\uff1a variances_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7d20\u5206\u522b\u662f\u5404\u7279\u5f81\u7684\u65b9\u5dee\u3002 \u65b9\u6cd5\uff1a fit(X[, y]) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60\u6bcf\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\u3002 transform(X) \uff1a\u6267\u884c\u7279\u5f81\u9009\u62e9\uff0c\u5373\u5220\u9664\u4f4e\u4e8e\u6307\u5b9a\u9608\u503c\u7684\u7279\u5f81\u3002 fit_transform(X[, y]) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60\u6bcf\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 get_support([indices]) \uff1a\u8fd4\u56de\u4fdd\u7559\u7684\u7279\u5f81\u3002 \u5982\u679c indices=True \uff0c\u5219\u8fd4\u56de\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u7d22\u5f15\u3002 \u5982\u679c indices=False \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u7279\u5f81\u88ab\u9009\u62e9\u3002 inverse_transform(X) \uff1a\u6839\u636e\u88ab\u9009\u51fa\u6765\u7684\u7279\u5f81\u8fd8\u539f\u539f\u59cb\u6570\u636e\uff08\u7279\u5f81\u9009\u53d6\u7684\u9006\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u5220\u9664\u7684\u7279\u5f81\u7684\u503c\u5168\u90e8\u7528 0 \u4ee3\u66ff\u3002 SelectKBest SelectKBest \u7528\u4e8e\u4fdd\u7559\u7edf\u8ba1\u5f97\u5206\u6700\u9ad8\u7684K\u4e2a\u7279\u5f81\uff1a SelectKBest ( score_func =< function f_classif > , k = 10 ) score_func \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u7edf\u8ba1\u6307\u6807\u3002\u8be5\u51fd\u6570\u7684\u53c2\u6570\u4e3a (X,y) \uff0c\u8fd4\u56de\u503c\u4e3a (scores,pvalues) \u3002 X \uff1a\u6837\u672c\u96c6\u5408\u3002\u901a\u5e38\u662f\u4e00\u4e2a numpy array \uff0c\u6bcf\u884c\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\uff0c\u6bcf\u5217\u4ee3\u8868\u4e00\u4e2a\u7279\u5f81\u3002 y \uff1a\u6837\u672c\u7684\u6807\u7b7e\u96c6\u5408\u3002\u5b83\u4e0e X \u7684\u6bcf\u4e00\u884c\u76f8\u5bf9\u5e94\u3002 scores \uff1a\u6837\u672c\u7684\u5f97\u5206\u96c6\u5408\u3002\u5b83\u4e0e X \u7684\u6bcf\u4e00\u884c\u76f8\u5bf9\u5e94\u3002 pvalues \uff1a\u6837\u672c\u5f97\u5206\u7684 p \u503c\u3002\u5b83\u4e0e X \u7684\u6bcf\u4e00\u884c\u76f8\u5bf9\u5e94\u3002 k \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32 'all' \uff0c\u6307\u5b9a\u8981\u4fdd\u7559\u6700\u4f73\u7684\u51e0\u4e2a\u7279\u5f81\u3002\u5982\u679c\u4e3a 'all' \uff0c\u5219\u4fdd\u7559\u6240\u6709\u7684\u7279\u5f81\u3002 sklearn \u63d0\u4f9b\u7684\u5e38\u7528\u7684\u7edf\u8ba1\u6307\u6807\u51fd\u6570\u6709\uff1a sklearn.feature_selection.f_regression \uff1a\u57fa\u4e8e\u7ebf\u6027\u56de\u5f52\u5206\u6790\u6765\u8ba1\u7b97\u7edf\u8ba1\u6307\u6807\uff0c\u9002\u7528\u4e8e\u56de\u5f52\u95ee\u9898\u3002 sklearn.feature_selection.chi2 \uff1a\u8ba1\u7b97\u5361\u65b9\u7edf\u8ba1\u91cf\uff0c\u9002\u7528\u4e8e\u5206\u7c7b\u95ee\u9898\u3002 sklearn.feature_selection.f_classif \uff1a\u6839\u636e\u65b9\u5dee\u5206\u6790 Analysis of variance\uff1aANOVA \u7684\u539f\u7406\uff0c\u4f9d\u9760 F-\u5206\u5e03 \u4e3a\u673a\u7387\u5206\u5e03\u7684\u4f9d\u636e\uff0c\u5229\u7528\u5e73\u65b9\u548c\u4e0e\u81ea\u7531\u5ea6\u6240\u8ba1\u7b97\u7684\u7ec4\u95f4\u4e0e\u7ec4\u5185\u5747\u65b9\u4f30\u8ba1\u51fa F \u503c\u3002\u9002\u7528\u4e8e\u5206\u7c7b\u95ee\u9898 \u3002 \u5c5e\u6027\uff1a scores_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6240\u6709\u7279\u5f81\u7684\u5f97\u5206\u3002 pvalues_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6240\u6709\u7279\u5f81\u5f97\u5206\u7684 p-values \u3002 \u65b9\u6cd5\uff1a\u53c2\u8003 VarianceThreshold \u3002 from sklearn.datasets import load_iris from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2 X , y = load_iris ( return_X_y = True ) print ( X . shape ) X_new = SelectKBest ( chi2 , k = 2 ) . fit_transform ( X , y ) print ( X_new . shape ) (150, 4) (150, 2) SelectPercentile SelectPercentile \u7528\u4e8e\u4fdd\u7559\u7edf\u8ba1\u5f97\u5206\u6700\u9ad8\u7684 \u6bd4\u4f8b\u7684\u7279\u5f81\uff1a SelectPercentile ( score_func =< function f_classif > , percentile = 10 ) score_func \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u7edf\u8ba1\u6307\u6807\u3002\u53c2\u8003 SelectKBest \u3002 percentile \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6307\u5b9a\u8981\u4fdd\u7559\u6700\u4f73\u7684\u767e\u5206\u4e4b\u51e0\u7684\u7279\u5f81\uff0c\u5982 10 \u8868\u793a\u4fdd\u7559\u6700\u4f73\u7684\u767e\u5206\u4e4b\u5341\u7684\u7279\u5f81 \u5c5e\u6027\uff1a\u53c2\u8003 SelectKBest \u3002 \u65b9\u6cd5\uff1a\u53c2\u8003 VarianceThreshold \u3002 \u5305\u88f9\u5f0f\u7279\u5f81\u9009\u53d6 RFE RFE \u7c7b\u7528\u4e8e\u5b9e\u73b0\u5305\u88f9\u5f0f\u7279\u5f81\u9009\u53d6\uff0c\u5176\u539f\u578b\u4e3a\uff1a RFE(estimator, n_features_to_select=None,step=1,verbose=0) estimator \uff1a\u4e00\u4e2a\u5b66\u4e60\u5668\uff0c\u5b83\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a .fit \u65b9\u6cd5\u548c\u4e00\u4e2a .coef_ \u7279\u5f81\u3002\u5176\u4e2d .coef_ \u7279\u5f81\u4e2d\u5b58\u653e\u7684\u662f\u5b66\u4e60\u5230\u7684\u5404\u7279\u5f81\u7684\u6743\u91cd\u7cfb\u6570\u3002 \u901a\u5e38\u4f7f\u7528 SVM \u548c\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u4f5c\u4e3a estimator \u53c2\u6570\u3002 n_features_to_select \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 None \uff0c\u6307\u5b9a\u8981\u9009\u51fa\u51e0\u4e2a\u7279\u5f81\u3002 \u5982\u679c\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u9009\u53d6\u4e00\u534a\u7684\u7279\u5f81\u3002 step \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u6d6e\u70b9\u6570\uff0c\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u8981\u5254\u9664\u6743\u91cd\u6700\u5c0f\u7684\u51e0\u4e2a\u7279\u5f81\u3002 \u5982\u679c\u5927\u4e8e\u7b49\u4e8e1\uff0c\u5219\u4f5c\u4e3a\u6574\u6570\uff0c\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u8981\u5254\u9664\u7279\u5f81\u7684\u6570\u91cf\u3002 - \u5982\u679c\u5728 0.0~1.0 \u4e4b\u95f4\uff0c\u5219\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u8981\u5254\u9664\u7279\u5f81\u7684\u6bd4\u4f8b\u3002 verbose \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u63a7\u5236\u8f93\u51fa\u65e5\u5fd7\u3002 RFE \u8981\u6c42\u5b66\u4e60\u5668\u80fd\u591f\u5b66\u4e60\u7279\u5f81\u7684\u6743\u91cd\uff08\u5982\u7ebf\u6027\u6a21\u578b\uff09\uff0c\u5176\u539f\u7406\u4e3a\uff1a \u9996\u5148\u5b66\u4e60\u5668\u5728\u521d\u59cb\u7684\u7279\u5f81\u96c6\u5408\u4e0a\u8bad\u7ec3\u3002 \u7136\u540e\u5b66\u4e60\u5668\u5b66\u5f97\u6bcf\u4e2a\u7279\u5f81\u7684\u6743\u91cd\uff0c\u5254\u9664\u5f53\u524d\u6743\u91cd\u4e00\u6279\u7279\u5f81\uff0c\u6784\u6210\u65b0\u7684\u8bad\u7ec3\u96c6\u3002 \u518d\u5c06\u5b66\u4e60\u5668\u5728\u65b0\u7684\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\uff0c\u76f4\u5230\u5269\u4e0b\u7684\u7279\u5f81\u7684\u6570\u91cf\u6ee1\u8db3\u6761\u4ef6\u3002 \u5c5e\u6027\uff1a n_features_ \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u6570\u91cf\u3002 support_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u7279\u5f81\u662f\u5426\u88ab\u9009\u62e9\u7684 mask \u3002 ranking_ \uff1a\u7279\u5f81\u6743\u91cd\u6392\u540d\u3002\u539f\u59cb\u7b2c i \u4e2a\u7279\u5f81\u7684\u6392\u540d\u4e3a raning_[i] \u3002 estimator_ \uff1a \u5916\u90e8\u63d0\u4f9b\u7684\u5b66\u4e60\u5668 \u3002 \u65b9\u6cd5\uff1a fit(X,y) \uff1a\u8bad\u7ec3 RFE \u6a21\u578b transform(X) \uff1a\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 fit_transform(X,y) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60 RFE \u6a21\u578b\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 get_support([indices]) \uff1a\u8fd4\u56de\u4fdd\u7559\u7684\u7279\u5f81\u3002 \u5982\u679c indices=True \uff0c\u5219\u8fd4\u56de\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u7d22\u5f15\u3002 \u5982\u679c indices=False \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u7279\u5f81\u88ab\u9009\u62e9\u3002 inverse_transform(X) \uff1a\u6839\u636e\u88ab\u9009\u51fa\u6765\u7684\u7279\u5f81\u8fd8\u539f\u539f\u59cb\u6570\u636e\uff08\u7279\u5f81\u9009\u53d6\u7684\u9006\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u5220\u9664\u7684\u7279\u5f81\u503c\u5168\u90e8\u7528 0 \u4ee3\u66ff\u3002 predict(X)/predict_log_proba(X) /predict_proba(X) \uff1a\u5c06 X \u8fdb\u884c\u7279\u5f81\u9009\u62e9\u4e4b\u540e\uff0c\u5728\u4f7f\u7528\u5185\u90e8\u7684 estimator \u6765\u9884\u6d4b\u3002 score(X, y) \uff1a\u5c06 X \u8fdb\u884c\u7279\u5f81\u9009\u62e9\u4e4b\u540e\uff0c\u8bad\u7ec3\u5185\u90e8 estimator \u5e76\u5bf9\u5185\u90e8\u7684 estimator \u8fdb\u884c\u8bc4\u5206\u3002 RFECV RFECV \u662f RFE \u7684\u4e00\u4e2a\u53d8\u4f53\uff0c\u5b83\u6267\u884c\u4e00\u4e2a\u4ea4\u53c9\u9a8c\u8bc1\u6765\u5bfb\u627e\u6700\u4f18\u7684\u5269\u4f59\u7279\u5f81\u6570\u91cf\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u6307\u5b9a\u4fdd\u7559\u591a\u5c11\u4e2a\u7279\u5f81\u3002 RFECV(estimator, step=1, cv=None, scoring=None,verbose=0) cv \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u4ea4\u53c9\u9a8c\u8bc1\u751f\u6210\u5668\u6216\u8005\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5b83\u51b3\u5b9a\u4e86\u4ea4\u53c9\u9a8c\u8bc1\u7b56\u7565\u3002 \u5982\u679c\u4e3a None \uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684 3 \u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u5982\u679c\u4e3a\u6574\u6570 \uff0c\u5219\u4f7f\u7528 \u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u5982\u679c\u4e3a\u4ea4\u53c9\u9a8c\u8bc1\u751f\u6210\u5668\uff0c\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u5bf9\u8c61\u3002 \u5982\u679c\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5219\u4f7f\u7528\u8be5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fed\u4ee3\u751f\u6210 \u8bad\u7ec3-\u6d4b\u8bd5 \u96c6\u5408\u3002 \u5176\u5b83\u53c2\u6570\u53c2\u8003 RFE \u3002 \u5c5e\u6027\uff1a grid_scores_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u4ea4\u53c9\u9a8c\u8bc1\u7684\u9884\u6d4b\u6027\u80fd\u5f97\u5206\u3002\u5176\u5143\u7d20\u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b50\u96c6\u4e0a\u6267\u884c\u4ea4\u53c9\u9a8c\u8bc1\u540e\u7684\u9884\u6d4b\u5f97\u5206\u3002 \u5176\u5b83\u5c5e\u6027\u53c2\u8003 RFE \u3002 \u65b9\u6cd5\uff1a\u53c2\u8003 RFE \u3002 \u5d4c\u5165\u5f0f\u7279\u5f81\u9009\u62e9 SelectFromModel \u7528\u4e8e\u5b9e\u73b0\u5d4c\u5165\u5f0f\u7279\u5f81\u9009\u53d6\uff0c\u5176\u539f\u578b\u4e3a\uff1a SelectFromModel ( estimator , threshold = None , prefit = False ) estimator \uff1a\u4e00\u4e2a\u5b66\u4e60\u5668\uff0c\u5b83\u53ef\u4ee5\u662f\u672a\u8bad\u7ec3\u7684( prefit=False )\uff0c\u6216\u8005\u662f\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684( prefit=True )\u3002 estimator \u5fc5\u987b\u6709 coef_ \u6216\u8005 feature_importances_ \u5c5e\u6027\uff0c\u7ed9\u51fa\u6bcf\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u6027\u3002\u5f53\u67d0\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u6027\u4f4e\u4e8e\u67d0\u4e2a\u9608\u503c\u65f6\uff0c\u8be5\u7279\u5f81\u5c06\u88ab\u79fb\u9664\u3002 threshold \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u6d6e\u70b9\u6570\u6216\u8005 None \uff0c\u6307\u5b9a\u7279\u5f81\u91cd\u8981\u6027\u7684\u4e00\u4e2a\u9608\u503c\u3002\u4f4e\u4e8e\u6b64\u9608\u503c\u7684\u7279\u5f81\u5c06\u88ab\u5254\u9664\u3002 \u5982\u679c\u4e3a\u6d6e\u70b9\u6570\uff0c\u5219\u6307\u5b9a\u9608\u503c\u7684\u7edd\u5bf9\u5927\u5c0f\u3002 \u5982\u679c\u4e3a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\uff1a 'mean' \uff1a\u9608\u503c\u4e3a\u7279\u5f81\u91cd\u8981\u6027\u7684\u5747\u503c\u3002 'median' \uff1a\u9608\u503c\u4e3a\u7279\u5f81\u91cd\u8981\u6027\u7684\u4e2d\u503c\u3002 \u5982\u679c\u662f '1.5*mean' \uff0c\u5219\u8868\u793a\u9608\u503c\u4e3a 1.5 \u500d\u7684\u7279\u5f81\u91cd\u8981\u6027\u7684\u5747\u503c\u3002 \u5982\u679c\u4e3a None \uff1a \u5982\u679c estimator \u6709\u4e00\u4e2a penalty \u53c2\u6570\uff0c\u4e14\u8be5\u53c2\u6570\u8bbe\u7f6e\u4e3a 'l1' \uff0c\u5219\u9608\u503c\u9ed8\u8ba4\u4e3a 1e-5 \u3002 \u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9608\u503c\u9ed8\u8ba4\u4e3a 'mean' \u3002 prefit \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u5b9a estimator \u662f\u5426\u5df2\u7ecf\u8bad\u7ec3\u597d\u4e86\u3002 \u5982\u679c prefit=False \uff0c\u5219 estimator \u662f\u672a\u8bad\u7ec3\u7684\u3002 \u5c5e\u6027\uff1a threshold_ \uff1a\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u5b58\u50a8\u4e86\u7528\u4e8e\u7279\u5f81\u9009\u53d6\u91cd\u8981\u6027\u7684\u9608\u503c\u3002 \u65b9\u6cd5\uff1a fit(X,y) \uff1a\u8bad\u7ec3 SelectFromModel \u6a21\u578b\u3002 transform(X) \uff1a\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 fit_transform(X,y) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60 SelectFromModel \u6a21\u578b\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 get_support([indices]) \uff1a\u8fd4\u56de\u4fdd\u7559\u7684\u7279\u5f81\u3002 \u5982\u679c indices=True \uff0c\u5219\u8fd4\u56de\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u7d22\u5f15\u3002 - \u5982\u679c indices=False \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u7279\u5f81\u88ab\u9009\u62e9\u3002 inverse_transform(X) \uff1a\u6839\u636e\u88ab\u9009\u51fa\u6765\u7684\u7279\u5f81\u8fd8\u539f\u539f\u59cb\u6570\u636e\uff08\u7279\u5f81\u9009\u53d6\u7684\u9006\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u5220\u9664\u7684\u7279\u5f81\u503c\u5168\u90e8\u7528 0 \u4ee3\u66ff\u3002 partial_fit(X[, y]) \uff1a\u901a\u8fc7\u90e8\u5206\u6570\u636e\u6765\u5b66\u4e60 SelectFromModel \u6a21\u578b\u3002 \u5b83\u652f\u6301\u6279\u91cf\u5b66\u4e60\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5185\u5b58\u66f4\u53cb\u597d\u3002\u5373\u8bad\u7ec3\u6570\u636e\u5e76\u4e0d\u662f\u4e00\u6b21\u6027\u5b66\u4e60\uff0c\u800c\u662f\u5206\u6279\u5b66\u4e60\u3002","title":"11.11.\u7279\u5f81\u9009\u62e9"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#_1","text":"","title":"\u8fc7\u6ee4\u5f0f\u7279\u5f81\u9009\u53d6"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#variancethreshold","text":"VarianceThreshold \u7528\u4e8e\u5254\u9664\u65b9\u5dee\u5f88\u5c0f\u7684\u7279\u5f81\uff1a VarianceThreshold ( threshold = 0.0 ) threshold \uff1a\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u6307\u5b9a\u65b9\u5dee\u7684\u9608\u503c\u3002\u4f4e\u4e8e\u6b64\u9608\u503c\u7684\u7279\u5f81\u5c06\u88ab\u5254\u9664\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7279\u5f81\u662f\u5e03\u5c14\u503c\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u60f3\u8981\u79fb\u9664\u90a3\u4e9b\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u7279\u5f81\u503c\u4e3a0\u6216\u8005\u4e3a1\u7684\u6bd4\u4f8b\u8d85\u8fc780%\u7684\u7279\u5f81\u3002\u5e03\u5c14\u7279\u5f81\u662f\u4f2f\u52aa\u5229\uff08 Bernoulli \uff09\u968f\u673a\u53d8\u91cf\uff0c\u53d8\u91cf\u7684\u65b9\u5dee\u4e3a: $$\\operatorname{Var}[X]=p(1-p)$$ \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9608\u503c .8 * (1 - .8) \u8fdb\u884c\u9009\u62e9: from sklearn.feature_selection import VarianceThreshold X = [[ 0 , 0 , 1 ], [ 0 , 1 , 0 ], [ 1 , 0 , 0 ], [ 0 , 1 , 1 ], [ 0 , 1 , 0 ], [ 0 , 1 , 1 ]] sel = VarianceThreshold ( threshold = ( . 8 * ( 1 - . 8 ))) print ( sel . fit_transform ( X )) print ( sel . get_support ( indices = False )) [[0 1] [1 0] [0 0] [1 1] [1 0] [1 1]] [False True True] \u5c5e\u6027\uff1a variances_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7d20\u5206\u522b\u662f\u5404\u7279\u5f81\u7684\u65b9\u5dee\u3002 \u65b9\u6cd5\uff1a fit(X[, y]) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60\u6bcf\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\u3002 transform(X) \uff1a\u6267\u884c\u7279\u5f81\u9009\u62e9\uff0c\u5373\u5220\u9664\u4f4e\u4e8e\u6307\u5b9a\u9608\u503c\u7684\u7279\u5f81\u3002 fit_transform(X[, y]) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60\u6bcf\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 get_support([indices]) \uff1a\u8fd4\u56de\u4fdd\u7559\u7684\u7279\u5f81\u3002 \u5982\u679c indices=True \uff0c\u5219\u8fd4\u56de\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u7d22\u5f15\u3002 \u5982\u679c indices=False \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u7279\u5f81\u88ab\u9009\u62e9\u3002 inverse_transform(X) \uff1a\u6839\u636e\u88ab\u9009\u51fa\u6765\u7684\u7279\u5f81\u8fd8\u539f\u539f\u59cb\u6570\u636e\uff08\u7279\u5f81\u9009\u53d6\u7684\u9006\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u5220\u9664\u7684\u7279\u5f81\u7684\u503c\u5168\u90e8\u7528 0 \u4ee3\u66ff\u3002","title":"VarianceThreshold"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#selectkbest","text":"SelectKBest \u7528\u4e8e\u4fdd\u7559\u7edf\u8ba1\u5f97\u5206\u6700\u9ad8\u7684K\u4e2a\u7279\u5f81\uff1a SelectKBest ( score_func =< function f_classif > , k = 10 ) score_func \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u7edf\u8ba1\u6307\u6807\u3002\u8be5\u51fd\u6570\u7684\u53c2\u6570\u4e3a (X,y) \uff0c\u8fd4\u56de\u503c\u4e3a (scores,pvalues) \u3002 X \uff1a\u6837\u672c\u96c6\u5408\u3002\u901a\u5e38\u662f\u4e00\u4e2a numpy array \uff0c\u6bcf\u884c\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\uff0c\u6bcf\u5217\u4ee3\u8868\u4e00\u4e2a\u7279\u5f81\u3002 y \uff1a\u6837\u672c\u7684\u6807\u7b7e\u96c6\u5408\u3002\u5b83\u4e0e X \u7684\u6bcf\u4e00\u884c\u76f8\u5bf9\u5e94\u3002 scores \uff1a\u6837\u672c\u7684\u5f97\u5206\u96c6\u5408\u3002\u5b83\u4e0e X \u7684\u6bcf\u4e00\u884c\u76f8\u5bf9\u5e94\u3002 pvalues \uff1a\u6837\u672c\u5f97\u5206\u7684 p \u503c\u3002\u5b83\u4e0e X \u7684\u6bcf\u4e00\u884c\u76f8\u5bf9\u5e94\u3002 k \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5b57\u7b26\u4e32 'all' \uff0c\u6307\u5b9a\u8981\u4fdd\u7559\u6700\u4f73\u7684\u51e0\u4e2a\u7279\u5f81\u3002\u5982\u679c\u4e3a 'all' \uff0c\u5219\u4fdd\u7559\u6240\u6709\u7684\u7279\u5f81\u3002 sklearn \u63d0\u4f9b\u7684\u5e38\u7528\u7684\u7edf\u8ba1\u6307\u6807\u51fd\u6570\u6709\uff1a sklearn.feature_selection.f_regression \uff1a\u57fa\u4e8e\u7ebf\u6027\u56de\u5f52\u5206\u6790\u6765\u8ba1\u7b97\u7edf\u8ba1\u6307\u6807\uff0c\u9002\u7528\u4e8e\u56de\u5f52\u95ee\u9898\u3002 sklearn.feature_selection.chi2 \uff1a\u8ba1\u7b97\u5361\u65b9\u7edf\u8ba1\u91cf\uff0c\u9002\u7528\u4e8e\u5206\u7c7b\u95ee\u9898\u3002 sklearn.feature_selection.f_classif \uff1a\u6839\u636e\u65b9\u5dee\u5206\u6790 Analysis of variance\uff1aANOVA \u7684\u539f\u7406\uff0c\u4f9d\u9760 F-\u5206\u5e03 \u4e3a\u673a\u7387\u5206\u5e03\u7684\u4f9d\u636e\uff0c\u5229\u7528\u5e73\u65b9\u548c\u4e0e\u81ea\u7531\u5ea6\u6240\u8ba1\u7b97\u7684\u7ec4\u95f4\u4e0e\u7ec4\u5185\u5747\u65b9\u4f30\u8ba1\u51fa F \u503c\u3002\u9002\u7528\u4e8e\u5206\u7c7b\u95ee\u9898 \u3002 \u5c5e\u6027\uff1a scores_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6240\u6709\u7279\u5f81\u7684\u5f97\u5206\u3002 pvalues_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6240\u6709\u7279\u5f81\u5f97\u5206\u7684 p-values \u3002 \u65b9\u6cd5\uff1a\u53c2\u8003 VarianceThreshold \u3002 from sklearn.datasets import load_iris from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2 X , y = load_iris ( return_X_y = True ) print ( X . shape ) X_new = SelectKBest ( chi2 , k = 2 ) . fit_transform ( X , y ) print ( X_new . shape ) (150, 4) (150, 2)","title":"SelectKBest"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#selectpercentile","text":"SelectPercentile \u7528\u4e8e\u4fdd\u7559\u7edf\u8ba1\u5f97\u5206\u6700\u9ad8\u7684 \u6bd4\u4f8b\u7684\u7279\u5f81\uff1a SelectPercentile ( score_func =< function f_classif > , percentile = 10 ) score_func \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u7edf\u8ba1\u6307\u6807\u3002\u53c2\u8003 SelectKBest \u3002 percentile \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6307\u5b9a\u8981\u4fdd\u7559\u6700\u4f73\u7684\u767e\u5206\u4e4b\u51e0\u7684\u7279\u5f81\uff0c\u5982 10 \u8868\u793a\u4fdd\u7559\u6700\u4f73\u7684\u767e\u5206\u4e4b\u5341\u7684\u7279\u5f81 \u5c5e\u6027\uff1a\u53c2\u8003 SelectKBest \u3002 \u65b9\u6cd5\uff1a\u53c2\u8003 VarianceThreshold \u3002","title":"SelectPercentile"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#_2","text":"","title":"\u5305\u88f9\u5f0f\u7279\u5f81\u9009\u53d6"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#rfe","text":"RFE \u7c7b\u7528\u4e8e\u5b9e\u73b0\u5305\u88f9\u5f0f\u7279\u5f81\u9009\u53d6\uff0c\u5176\u539f\u578b\u4e3a\uff1a RFE(estimator, n_features_to_select=None,step=1,verbose=0) estimator \uff1a\u4e00\u4e2a\u5b66\u4e60\u5668\uff0c\u5b83\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a .fit \u65b9\u6cd5\u548c\u4e00\u4e2a .coef_ \u7279\u5f81\u3002\u5176\u4e2d .coef_ \u7279\u5f81\u4e2d\u5b58\u653e\u7684\u662f\u5b66\u4e60\u5230\u7684\u5404\u7279\u5f81\u7684\u6743\u91cd\u7cfb\u6570\u3002 \u901a\u5e38\u4f7f\u7528 SVM \u548c\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u4f5c\u4e3a estimator \u53c2\u6570\u3002 n_features_to_select \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 None \uff0c\u6307\u5b9a\u8981\u9009\u51fa\u51e0\u4e2a\u7279\u5f81\u3002 \u5982\u679c\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u9009\u53d6\u4e00\u534a\u7684\u7279\u5f81\u3002 step \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u6d6e\u70b9\u6570\uff0c\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u8981\u5254\u9664\u6743\u91cd\u6700\u5c0f\u7684\u51e0\u4e2a\u7279\u5f81\u3002 \u5982\u679c\u5927\u4e8e\u7b49\u4e8e1\uff0c\u5219\u4f5c\u4e3a\u6574\u6570\uff0c\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u8981\u5254\u9664\u7279\u5f81\u7684\u6570\u91cf\u3002 - \u5982\u679c\u5728 0.0~1.0 \u4e4b\u95f4\uff0c\u5219\u6307\u5b9a\u6bcf\u6b21\u8fed\u4ee3\u8981\u5254\u9664\u7279\u5f81\u7684\u6bd4\u4f8b\u3002 verbose \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u63a7\u5236\u8f93\u51fa\u65e5\u5fd7\u3002 RFE \u8981\u6c42\u5b66\u4e60\u5668\u80fd\u591f\u5b66\u4e60\u7279\u5f81\u7684\u6743\u91cd\uff08\u5982\u7ebf\u6027\u6a21\u578b\uff09\uff0c\u5176\u539f\u7406\u4e3a\uff1a \u9996\u5148\u5b66\u4e60\u5668\u5728\u521d\u59cb\u7684\u7279\u5f81\u96c6\u5408\u4e0a\u8bad\u7ec3\u3002 \u7136\u540e\u5b66\u4e60\u5668\u5b66\u5f97\u6bcf\u4e2a\u7279\u5f81\u7684\u6743\u91cd\uff0c\u5254\u9664\u5f53\u524d\u6743\u91cd\u4e00\u6279\u7279\u5f81\uff0c\u6784\u6210\u65b0\u7684\u8bad\u7ec3\u96c6\u3002 \u518d\u5c06\u5b66\u4e60\u5668\u5728\u65b0\u7684\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\uff0c\u76f4\u5230\u5269\u4e0b\u7684\u7279\u5f81\u7684\u6570\u91cf\u6ee1\u8db3\u6761\u4ef6\u3002 \u5c5e\u6027\uff1a n_features_ \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u6570\u91cf\u3002 support_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u7279\u5f81\u662f\u5426\u88ab\u9009\u62e9\u7684 mask \u3002 ranking_ \uff1a\u7279\u5f81\u6743\u91cd\u6392\u540d\u3002\u539f\u59cb\u7b2c i \u4e2a\u7279\u5f81\u7684\u6392\u540d\u4e3a raning_[i] \u3002 estimator_ \uff1a \u5916\u90e8\u63d0\u4f9b\u7684\u5b66\u4e60\u5668 \u3002 \u65b9\u6cd5\uff1a fit(X,y) \uff1a\u8bad\u7ec3 RFE \u6a21\u578b transform(X) \uff1a\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 fit_transform(X,y) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60 RFE \u6a21\u578b\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 get_support([indices]) \uff1a\u8fd4\u56de\u4fdd\u7559\u7684\u7279\u5f81\u3002 \u5982\u679c indices=True \uff0c\u5219\u8fd4\u56de\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u7d22\u5f15\u3002 \u5982\u679c indices=False \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u7279\u5f81\u88ab\u9009\u62e9\u3002 inverse_transform(X) \uff1a\u6839\u636e\u88ab\u9009\u51fa\u6765\u7684\u7279\u5f81\u8fd8\u539f\u539f\u59cb\u6570\u636e\uff08\u7279\u5f81\u9009\u53d6\u7684\u9006\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u5220\u9664\u7684\u7279\u5f81\u503c\u5168\u90e8\u7528 0 \u4ee3\u66ff\u3002 predict(X)/predict_log_proba(X) /predict_proba(X) \uff1a\u5c06 X \u8fdb\u884c\u7279\u5f81\u9009\u62e9\u4e4b\u540e\uff0c\u5728\u4f7f\u7528\u5185\u90e8\u7684 estimator \u6765\u9884\u6d4b\u3002 score(X, y) \uff1a\u5c06 X \u8fdb\u884c\u7279\u5f81\u9009\u62e9\u4e4b\u540e\uff0c\u8bad\u7ec3\u5185\u90e8 estimator \u5e76\u5bf9\u5185\u90e8\u7684 estimator \u8fdb\u884c\u8bc4\u5206\u3002","title":"RFE"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#rfecv","text":"RFECV \u662f RFE \u7684\u4e00\u4e2a\u53d8\u4f53\uff0c\u5b83\u6267\u884c\u4e00\u4e2a\u4ea4\u53c9\u9a8c\u8bc1\u6765\u5bfb\u627e\u6700\u4f18\u7684\u5269\u4f59\u7279\u5f81\u6570\u91cf\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u6307\u5b9a\u4fdd\u7559\u591a\u5c11\u4e2a\u7279\u5f81\u3002 RFECV(estimator, step=1, cv=None, scoring=None,verbose=0) cv \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u4ea4\u53c9\u9a8c\u8bc1\u751f\u6210\u5668\u6216\u8005\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5b83\u51b3\u5b9a\u4e86\u4ea4\u53c9\u9a8c\u8bc1\u7b56\u7565\u3002 \u5982\u679c\u4e3a None \uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684 3 \u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u5982\u679c\u4e3a\u6574\u6570 \uff0c\u5219\u4f7f\u7528 \u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u5982\u679c\u4e3a\u4ea4\u53c9\u9a8c\u8bc1\u751f\u6210\u5668\uff0c\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u5bf9\u8c61\u3002 \u5982\u679c\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5219\u4f7f\u7528\u8be5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fed\u4ee3\u751f\u6210 \u8bad\u7ec3-\u6d4b\u8bd5 \u96c6\u5408\u3002 \u5176\u5b83\u53c2\u6570\u53c2\u8003 RFE \u3002 \u5c5e\u6027\uff1a grid_scores_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u4ea4\u53c9\u9a8c\u8bc1\u7684\u9884\u6d4b\u6027\u80fd\u5f97\u5206\u3002\u5176\u5143\u7d20\u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b50\u96c6\u4e0a\u6267\u884c\u4ea4\u53c9\u9a8c\u8bc1\u540e\u7684\u9884\u6d4b\u5f97\u5206\u3002 \u5176\u5b83\u5c5e\u6027\u53c2\u8003 RFE \u3002 \u65b9\u6cd5\uff1a\u53c2\u8003 RFE \u3002","title":"RFECV"},{"location":"scikit-learn/11.11.%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9.html#_3","text":"SelectFromModel \u7528\u4e8e\u5b9e\u73b0\u5d4c\u5165\u5f0f\u7279\u5f81\u9009\u53d6\uff0c\u5176\u539f\u578b\u4e3a\uff1a SelectFromModel ( estimator , threshold = None , prefit = False ) estimator \uff1a\u4e00\u4e2a\u5b66\u4e60\u5668\uff0c\u5b83\u53ef\u4ee5\u662f\u672a\u8bad\u7ec3\u7684( prefit=False )\uff0c\u6216\u8005\u662f\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684( prefit=True )\u3002 estimator \u5fc5\u987b\u6709 coef_ \u6216\u8005 feature_importances_ \u5c5e\u6027\uff0c\u7ed9\u51fa\u6bcf\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u6027\u3002\u5f53\u67d0\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u6027\u4f4e\u4e8e\u67d0\u4e2a\u9608\u503c\u65f6\uff0c\u8be5\u7279\u5f81\u5c06\u88ab\u79fb\u9664\u3002 threshold \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u6d6e\u70b9\u6570\u6216\u8005 None \uff0c\u6307\u5b9a\u7279\u5f81\u91cd\u8981\u6027\u7684\u4e00\u4e2a\u9608\u503c\u3002\u4f4e\u4e8e\u6b64\u9608\u503c\u7684\u7279\u5f81\u5c06\u88ab\u5254\u9664\u3002 \u5982\u679c\u4e3a\u6d6e\u70b9\u6570\uff0c\u5219\u6307\u5b9a\u9608\u503c\u7684\u7edd\u5bf9\u5927\u5c0f\u3002 \u5982\u679c\u4e3a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\uff1a 'mean' \uff1a\u9608\u503c\u4e3a\u7279\u5f81\u91cd\u8981\u6027\u7684\u5747\u503c\u3002 'median' \uff1a\u9608\u503c\u4e3a\u7279\u5f81\u91cd\u8981\u6027\u7684\u4e2d\u503c\u3002 \u5982\u679c\u662f '1.5*mean' \uff0c\u5219\u8868\u793a\u9608\u503c\u4e3a 1.5 \u500d\u7684\u7279\u5f81\u91cd\u8981\u6027\u7684\u5747\u503c\u3002 \u5982\u679c\u4e3a None \uff1a \u5982\u679c estimator \u6709\u4e00\u4e2a penalty \u53c2\u6570\uff0c\u4e14\u8be5\u53c2\u6570\u8bbe\u7f6e\u4e3a 'l1' \uff0c\u5219\u9608\u503c\u9ed8\u8ba4\u4e3a 1e-5 \u3002 \u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9608\u503c\u9ed8\u8ba4\u4e3a 'mean' \u3002 prefit \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u5b9a estimator \u662f\u5426\u5df2\u7ecf\u8bad\u7ec3\u597d\u4e86\u3002 \u5982\u679c prefit=False \uff0c\u5219 estimator \u662f\u672a\u8bad\u7ec3\u7684\u3002 \u5c5e\u6027\uff1a threshold_ \uff1a\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u5b58\u50a8\u4e86\u7528\u4e8e\u7279\u5f81\u9009\u53d6\u91cd\u8981\u6027\u7684\u9608\u503c\u3002 \u65b9\u6cd5\uff1a fit(X,y) \uff1a\u8bad\u7ec3 SelectFromModel \u6a21\u578b\u3002 transform(X) \uff1a\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 fit_transform(X,y) \uff1a\u4ece\u6837\u672c\u6570\u636e\u4e2d\u5b66\u4e60 SelectFromModel \u6a21\u578b\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u9009\u62e9\u3002 get_support([indices]) \uff1a\u8fd4\u56de\u4fdd\u7559\u7684\u7279\u5f81\u3002 \u5982\u679c indices=True \uff0c\u5219\u8fd4\u56de\u88ab\u9009\u51fa\u7684\u7279\u5f81\u7684\u7d22\u5f15\u3002 - \u5982\u679c indices=False \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u7279\u5f81\u88ab\u9009\u62e9\u3002 inverse_transform(X) \uff1a\u6839\u636e\u88ab\u9009\u51fa\u6765\u7684\u7279\u5f81\u8fd8\u539f\u539f\u59cb\u6570\u636e\uff08\u7279\u5f81\u9009\u53d6\u7684\u9006\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u88ab\u5220\u9664\u7684\u7279\u5f81\u503c\u5168\u90e8\u7528 0 \u4ee3\u66ff\u3002 partial_fit(X[, y]) \uff1a\u901a\u8fc7\u90e8\u5206\u6570\u636e\u6765\u5b66\u4e60 SelectFromModel \u6a21\u578b\u3002 \u5b83\u652f\u6301\u6279\u91cf\u5b66\u4e60\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5185\u5b58\u66f4\u53cb\u597d\u3002\u5373\u8bad\u7ec3\u6570\u636e\u5e76\u4e0d\u662f\u4e00\u6b21\u6027\u5b66\u4e60\uff0c\u800c\u662f\u5206\u6279\u5b66\u4e60\u3002","title":"\u5d4c\u5165\u5f0f\u7279\u5f81\u9009\u62e9"},{"location":"scikit-learn/11.12.%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.14 sklearn version: 0.22.1 \u4ece\u5b57\u5178\u7c7b\u578b\u52a0\u8f7d\u7279\u5f81 \u7c7b DictVectorizer \u53ef\u4ee5\u5c06 dict \u5bf9\u8c61\u8f6c\u6362\u4e3a scikit-learn \u4f30\u8ba1\u5668\u4f7f\u7528\u7684 NumPy/SciPy \u6570\u636e\u5f62\u5f0f\u3002\u7c7b DictVectorizer \u5b9e\u73b0\u4e86 \u201cone-of-K\u201d \u6216 \u201cone-hot\u201d \u7f16\u7801\uff0c\u7528\u4e8e\u7c7b\u522b\u7279\u5f81\u3002 DictVectorizerDictVectorizer ( dtype =< class ' numpy . float64 '>, separator=' = ', sparse = True , sort = True ) \u5728\u4e0b\u9762\u7684\u793a\u4f8b\uff0ccity \u662f\u4e00\u4e2a\u5206\u7c7b\u5c5e\u6027\uff0c\u800c temperature \u662f\u6570\u503c\u7279\u5f81: measurements = [ { 'city' : 'Dubai' , 'temperature' : 33. }, { 'city' : 'London' , 'temperature' : 12. }, { 'city' : 'San Francisco' , 'temperature' : 18. }, ] from sklearn.feature_extraction import DictVectorizer vec = DictVectorizer () vec . fit_transform ( measurements ) . toarray () array([[ 1., 0., 0., 33.], [ 0., 1., 0., 12.], [ 0., 0., 1., 18.]]) vec . get_feature_names () ['city=Dubai', 'city=London', 'city=San Francisco', 'temperature']","title":"11.12.\u7279\u5f81\u63d0\u53d6"},{"location":"scikit-learn/11.12.%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96.html#_1","text":"\u7c7b DictVectorizer \u53ef\u4ee5\u5c06 dict \u5bf9\u8c61\u8f6c\u6362\u4e3a scikit-learn \u4f30\u8ba1\u5668\u4f7f\u7528\u7684 NumPy/SciPy \u6570\u636e\u5f62\u5f0f\u3002\u7c7b DictVectorizer \u5b9e\u73b0\u4e86 \u201cone-of-K\u201d \u6216 \u201cone-hot\u201d \u7f16\u7801\uff0c\u7528\u4e8e\u7c7b\u522b\u7279\u5f81\u3002 DictVectorizerDictVectorizer ( dtype =< class ' numpy . float64 '>, separator=' = ', sparse = True , sort = True ) \u5728\u4e0b\u9762\u7684\u793a\u4f8b\uff0ccity \u662f\u4e00\u4e2a\u5206\u7c7b\u5c5e\u6027\uff0c\u800c temperature \u662f\u6570\u503c\u7279\u5f81: measurements = [ { 'city' : 'Dubai' , 'temperature' : 33. }, { 'city' : 'London' , 'temperature' : 12. }, { 'city' : 'San Francisco' , 'temperature' : 18. }, ] from sklearn.feature_extraction import DictVectorizer vec = DictVectorizer () vec . fit_transform ( measurements ) . toarray () array([[ 1., 0., 0., 33.], [ 0., 1., 0., 12.], [ 0., 0., 1., 18.]]) vec . get_feature_names () ['city=Dubai', 'city=London', 'city=San Francisco', 'temperature']","title":"\u4ece\u5b57\u5178\u7c7b\u578b\u52a0\u8f7d\u7279\u5f81"},{"location":"scikit-learn/11.13.%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86.html","text":"# -*- coding: utf-8 -*- \"\"\" Created on Mon Jun 29 10:13:47 2020 @author: two \"\"\" import numpy as np from toolkit import H from sklearn.impute import SimpleImputer , MissingIndicator , KNNImputer SimpleImputer imp_mean = SimpleImputer ( missing_values = np . nan , strategy = 'mean' ) H . get_param ( MissingIndicator ) X = np . array ([[ 7 , 2 , 3 ], [ 4 , np . nan , 6 ], [ 10 , 5 , 9 ]]) imp_mean . fit ( X ) print ( imp_mean . transform ( X )) (missing_values=nan, features='missing-only', sparse='auto', error_on_new=True) [[ 7. 2. 3. ] [ 4. 3.5 6. ] [10. 5. 9. ]] MissingIndicator X1 = np . array ([[ np . nan , 1 , 3 ], [ 4 , 0 , np . nan ], [ 8 , 1 , 0 ]]) X2 = np . array ([[ 5 , 1 , np . nan ], [ np . nan , 2 , 3 ], [ 2 , 4 , 0 ]]) indicator = MissingIndicator ( features = \"all\" ) indicator . fit ( X1 ) X2_tr = indicator . transform ( X2 ) X2_tr array([[False, False, True], [ True, False, False], [False, False, False]]) KNNImputer X = np . array ([[ 1 , 2 , np . nan ], [ 3 , 4 , 3 ], [ np . nan , 6 , 5 ], [ 8 , 8 , 7 ]]) H . get_param ( KNNImputer ) imputer = KNNImputer ( n_neighbors = 2 ) imputer . fit_transform ( X ) (missing_values=nan, n_neighbors=5, weights='uniform', metric='nan_euclidean', copy=True, add_indicator=False) array([[1. , 2. , 4. ], [3. , 4. , 3. ], [5.5, 6. , 5. ], [8. , 8. , 7. ]])","title":"11.13.\u7f3a\u5931\u503c\u5904\u7406"},{"location":"scikit-learn/11.14.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.03 sklearn version: 0.23.1 import matplotlib.pyplot as plt from toolkit import H import numpy as np from scipy import linalg from sklearn import datasets from sklearn.metrics import mean_squared_error , r2_score from sklearn.linear_model import ( LinearRegression , Ridge , SGDRegressor ) \u6c42\u89e3\u4e8c\u4e58\u6700\u5c0f\u95ee\u9898 $$ y = c_1 \\times e^{-x} + c_2 \\times x $$ $$ z = y + \\varepsilon $$ $$ \\boldsymbol{A} = \\left(\\boldsymbol{e^{-x}}, \\boldsymbol{x} \\right)\\qquad $$ # \u8bbe\u5b9a\u771f\u5b9e\u51fd\u6570\u7684\u53c2\u6570 c1 , c2 = 5.0 , 2.0 # \u751f\u6210\u51fd\u6570\u7684\u81ea\u53d8\u91cf X X = np . r_ [ 0.1 : 1.1 : 0.1 ] # \u8bbe\u7f6e\u771f\u5b9e\u51fd\u6570 y = c1 * np . exp ( - X ) + c2 * X # \u76ee\u6807\u51fd\u6570\uff1a\u771f\u5b9e\u51fd\u6570 + \u968f\u673a\u5e72\u6270 z = y + 0.05 * np . max ( y ) * np . random . randn ( len ( y )) # A \u662f\u81ea\u53d8\u91cf\u77e9\u9635 A = np . c_ [ np . exp ( - X )[:, np . newaxis ], X [:, np . newaxis ]] print ( f \"\u7cfb\u6570\u77e9\u9635 A: \\n { A } \" ) # \u6c42\u89e3\u6700\u5c0f\u4e8c\u4e58 A*c = z c , mse , rank , sigma = linalg . lstsq ( A , z ) # \u89e3 \u5747\u65b9\u5dee \u79e9 print ( f \"Parameters estimated by Least Squares: c1= { c [ 0 ] : .3f } \\t c2= { c [ 1 ] : .3f } \" ) print ( f \"Real parameters: c1= { c1 } \\t c2= { c2 } \" ) # \u5229\u7528\u4f30\u8ba1\u53c2\u6570\u8ba1\u7b97z\u7684\u9884\u6d4b\u503c z_pred = c [ 0 ] * A [:, 0 ] + c [ 1 ] * A [:, 1 ] lstsq_mse = np . mean ( np . square ( z - z_pred )) print ( f \"Mean squared error: { lstsq_mse } \" ) \u7cfb\u6570\u77e9\u9635 A: [[0.90483742 0.1 ] [0.81873075 0.2 ] [0.74081822 0.3 ] [0.67032005 0.4 ] [0.60653066 0.5 ] [0.54881164 0.6 ] [0.4965853 0.7 ] [0.44932896 0.8 ] [0.40656966 0.9 ] [0.36787944 1. ]] Parameters estimated by Least Squares: c1=5.425 c2=1.852 Real parameters: c1=5.0 c2=2.0 Mean squared error: 0.03904797048010764 LinearRegression LinearRegression(fit_intercept=True, normalize=False, copy_X=True, n_jobs=None) \u53c2\u6570 fit_intercept \uff1a\u5e03\u5c14\u503c\u3002\u662f\u5426\u8ba1\u7b97\u7ebf\u6027\u56de\u5f52\u4e2d\u7684\u622a\u8ddd\u3002 normalize \uff1a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u90a3\u4e48\u8bad\u7ec3\u6837\u672c\u5c06\u4f7f\u7528L2\u8303\u6570\u8fdb\u884c\u5f52\u4e00\u5316\u3002 fit_intercept=False \u65f6\u5ffd\u7565\u8be5\u53c2\u6570\u3002 copy_X \uff1a\u5e03\u5c14\u503c\u3002\u662f\u5426\u590d\u5236 X \uff0c\u4e0d\u590d\u5236\u7684\u8bdd\u53ef\u80fd\u4f1a\u6539\u5199 X \u53d8\u91cf\u3002 n_jobs \uff1a\u6574\u6570\u3002\u6307\u5b9a\u4efb\u52a1\u5e76\u884c\u65f6\u4f7f\u7528\u7684CPU\u6570\u91cf\uff0c\u5982\u679c\u53d6\u503c\u4e3a-1\u5219\u4f7f\u7528\u6240\u6709\u53ef\u7528\u7684CPU\u3002 \u5c5e\u6027 coef \uff1a\u6743\u91cd\u5411\u91cf intercept_ \uff1a\u622a\u8ddd \u65b9\u6cd5 fit(X,y) \uff1a\u8bad\u7ec3\u6a21\u578b\u3002 predict(X) \uff1a\u9884\u6d4b\u3002 score(X,y) \uff1a\u8bc4\u5206\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a$\\text{score} = R^2 = 1 - \\frac{\\sum(y - \\hat{y})^2}{\\sum(y - \\bar{y})^2}$\u3002score\u6700\u5927\u503c\u662f1\uff0c\u4f46\u6709\u53ef\u80fd\u662f\u8d1f\u503c(\u9884\u6d4b\u6548\u679c\u592a\u5dee)\u3002score\u8d8a\u5927\uff0c\u9884\u6d4b\u6027\u80fd\u8d8a\u597d\u3002 # Create linear regression object regress_model = LinearRegression ( fit_intercept = False , normalize = False ) # Train the model using the training sets regress_model . fit ( A , z ) # Make predictions using the testing set z_pred = regress_model . predict ( A ) sklearn_mse = np . mean ( np . square ( z - z_pred )) # The coefficients print ( f 'Parameters estimated by LinearRegression: { regress_model . coef_ } ' ) # The mean squared error print ( 'Mean squared error: %.2f ' % mean_squared_error ( z , z_pred )) # The coefficient of determination: 1 is perfect prediction print ( 'Coefficient of determination: %.2f ' % r2_score ( z , z_pred )) Parameters estimated by LinearRegression: [5.42512871 1.85174901] Mean squared error: 0.04 Coefficient of determination: 0.81 SGDRegressor SGDRegressor(loss='squared_loss', penalty='l2', alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, epsilon=0.1, random_state=None, learning_rate='invscaling', eta0=0.01, power_t=0.25, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, warm_start=False, average=False) loss \uff1a\u8981\u4f7f\u7528\u7684\u635f\u5931\u51fd\u6570\u3002\u53ef\u80fd\u7684\u503c\u4e3a \"squared_loss\" \uff0c \"huber\" \uff0c \"epsilon_insensitive\" , \"squared_epsilon_insensitive\" \u3002 penalty \uff1a\u6b63\u5219\u9879\u3002\u53ef\u80fd\u7684\u503c\u4e3a \"l2\" , \"l1\" , \"elasticnet\" \uff0c\u9ed8\u8ba4\u4e3a \"l2\" \u3002 alpha \uff1a\u4e0e\u6b63\u5219\u9879\u76f8\u4e58\u7684\u5e38\u6570\u3002\u503c\u8d8a\u9ad8\uff0c\u6b63\u5219\u5316\u8d8a\u5f3a\u3002\u9ed8\u8ba4\u4e3a0.0001\u3002 l1_ratio \uff1a Elastic \u7f51\u7edc\u6df7\u5408\u53c2\u6570\u3002\u53d6\u503c\u8303\u56f4\u4e3a0 <= l1_ratio <= 1\u30021_ratio=0\u76f8\u5f53\u4e8eL2\u6b63\u5219\u9879\uff0c1_ratio=1\u76f8\u5f53\u4e8eL1\u6b63\u5219\u9879\u3002\u4ec5\u5728 penalty='elasticnet' \u65f6\u6709\u6548\u3002 fit_intercept \uff1a\u662f\u5426\u5e94\u8be5\u4f30\u8ba1\u622a\u8ddd\u3002\u5982\u679c\u4e3aFalse\uff0c\u5219\u5047\u5b9a\u6570\u636e\u5df2\u7ecf\u4e2d\u5fc3\u5316\u3002 max_iter \uff1a\u8bad\u7ec3\u96c6\u7684\u6700\u5927\u8fed\u4ee3\u6b21\u6570\uff0c\u53c8\u79f0\u4e3aepochs\uff0c\u5b83\u53ea\u4f1a\u5f71\u54cd fit \u65b9\u6cd5\u4e2d\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd partial_fit \u65b9\u6cd5\u3002 tol \uff1a\u505c\u6b62\u51c6\u5219\u3002\u5982\u679c\u975e None \uff0c\u5219\u5f53 loss > best_loss - tol \u6301\u7eed n_iter_no_change \u6b21\u8fed\u4ee3\u540e\uff0c\u8bad\u7ec3\u5c06\u505c\u6b62\u3002 shuffle \uff1a\u5728\u6bcf\u4e2aepoch\u4e4b\u540e\u662f\u5426\u5e94\u91cd\u65b0\u5bf9\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u6d17\u724c\u3002 epsilon \uff1aepsilon-insensitive \u635f\u5931\u51fd\u6570\u4e2d\u7684Epsilon \uff0c\u4ec5\u5f53 loss \u4e3a \"huber\" \uff0c \"epsilon_insensitive\" , \"squared_epsilon_insensitive\" \u65f6\u6709\u6548\u3002 learning_rate \uff1a\u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565\u3002\u53ef\u80fd\u7684\u503c\u4e3a\uff1a \"constant\" : eta = eta0 \"optimal\" : eta = 1.0 / (alpha * (t + t0)) \u5176\u4e2dt0\u7531Leon Bottou\u63d0\u51fa\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u9009\u62e9\u3002 \"invscaling\" : eta = eta0 / pow(t, power_t) \"adaptive\" : eta = eta0 eta0 \uff1a\u5b66\u4e60\u7387\u3002 early_stopping \uff1a\u5f53\u9a8c\u8bc1\u5206\u6570\u6ca1\u6709\u63d0\u9ad8\u65f6\uff0c\u662f\u5426\u4f7f\u7528\u63d0\u524d\u505c\u6b62\u6765\u7ec8\u6b62\u57f9\u8bad\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a True\uff0c\u5b83\u5c06\u81ea\u52a8\u7559\u51fa\u4e00\u90e8\u5206\u8bad\u7ec3\u6570\u636e\u4f5c\u4e3a\u9a8c\u8bc1\uff0c\u5e76\u5728 score \u65b9\u6cd5\u8fd4\u56de\u7684\u9a8c\u8bc1\u5f97\u5206\u81f3\u5c11 n_iter_no_change \u4e2aepoch\u6ca1\u6709\u51cf\u5c11 tol \u65f6\u7ec8\u6b62\u8bad\u7ec3\u3002 validation_fraction \uff1a\u9884\u7559\u7684\u9a8c\u8bc1\u96c6\u7684\u6bd4\u4f8b\u3002\u4ec5\u5728 early_stopping \u4e3aTrue\u65f6\u4f7f\u7528\u3002 sgd_regression_model = SGDRegressor ( loss = 'squared_loss' , fit_intercept = False , max_iter = 10000 , alpha = 0.001 , validation_fraction = 0.3 ) sgd_regression_model . fit ( A , z ) print ( f 'Coefficients: { sgd_regression_model . coef_ } ' ) Coefficients: [4.11459251 2.76786944] \u5982\u679c\u8bad\u7ec3\u96c6\u6837\u672c\u91cf\u592a\u5c11\uff0c\u5373\u4f7f\u589e\u52a0epoch\u7684\u5927\u5c0f\uff0c\u4e5f\u96be\u4ee5\u62df\u5408\u3002\u4ee5\u4e0b\u5bf9\u8bad\u7ec3\u96c6\u8fdb\u884c\u8fc7\u91c7\u6837\u3002 repeat_num = 10000 new_A = np . concatenate ([ A ] * repeat_num ) new_z = np . concatenate ([ z ] * repeat_num ) sgd_regression_model . fit ( new_A , new_z ) # Make predictions using the testing set z_pred = sgd_regression_model . predict ( A ) # The coefficients print ( f 'Coefficients: { sgd_regression_model . coef_ } ' ) # The mean squared error print ( 'Mean squared error: %.2f ' % mean_squared_error ( z , z_pred )) # The coefficient of determination: 1 is perfect prediction print ( 'Coefficient of determination: %.2f ' % r2_score ( z , z_pred )) Coefficients: [5.4053131 1.86414048] Mean squared error: 0.04 Coefficient of determination: 0.81 \u624b\u52a8\u5b9e\u73b0SGDRegressor import numpy as np class SGDRegressorSimple : def __init__ ( self , learn_ratio = 0.001 , max_iter = 1000 ): self . learn_ratio = learn_ratio self . max_iter = max_iter self . C = None def _calculate_gradient ( self , X , Y ): step = self . learn_ratio * np . sum (( np . dot ( A , self . C ) - Y ) * A , axis = 0 ) step = step . reshape ( self . C . shape ) self . C -= step def fit ( self , X , y ): Y = np . array ( y ) X = np . array ( X ) if len ( Y . shape ) == 1 : Y = Y . reshape ( - 1 , 1 ) elif len ( Y . shape ) != 2 : raise ValueError ( \"the shape of Y must be 2 dim\" ) if len ( X . shape ) != 2 : raise ValueError ( \"the shape of X must be 2 dim\" ) Y_shape = Y . shape X_shape = X . shape if self . C is None : self . C = np . zeros (( X_shape [ 1 ], 1 )) C_shape = self . C . shape if X_shape [ 0 ] != Y_shape [ 0 ]: raise ValueError ( \"the length of X and y are not equal\" ) if X_shape [ 1 ] != C_shape [ 0 ]: raise ValueError ( \"X.shape[1] is not equal to C.shape[1]\" ) for i in range ( self . max_iter ): self . _calculate_gradient ( X , Y ) sgd = SGDRegressorSimple ( learn_ratio = 0.01 , max_iter = 1000 ) sgd . fit ( A , y ) print ( f 'Coefficients: { sgd . C . flatten () } ' ) Coefficients: [4.9999651 2.00003525]","title":"11.14.\u7ebf\u6027\u56de\u5f52"},{"location":"scikit-learn/11.14.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#_1","text":"$$ y = c_1 \\times e^{-x} + c_2 \\times x $$ $$ z = y + \\varepsilon $$ $$ \\boldsymbol{A} = \\left(\\boldsymbol{e^{-x}}, \\boldsymbol{x} \\right)\\qquad $$ # \u8bbe\u5b9a\u771f\u5b9e\u51fd\u6570\u7684\u53c2\u6570 c1 , c2 = 5.0 , 2.0 # \u751f\u6210\u51fd\u6570\u7684\u81ea\u53d8\u91cf X X = np . r_ [ 0.1 : 1.1 : 0.1 ] # \u8bbe\u7f6e\u771f\u5b9e\u51fd\u6570 y = c1 * np . exp ( - X ) + c2 * X # \u76ee\u6807\u51fd\u6570\uff1a\u771f\u5b9e\u51fd\u6570 + \u968f\u673a\u5e72\u6270 z = y + 0.05 * np . max ( y ) * np . random . randn ( len ( y )) # A \u662f\u81ea\u53d8\u91cf\u77e9\u9635 A = np . c_ [ np . exp ( - X )[:, np . newaxis ], X [:, np . newaxis ]] print ( f \"\u7cfb\u6570\u77e9\u9635 A: \\n { A } \" ) # \u6c42\u89e3\u6700\u5c0f\u4e8c\u4e58 A*c = z c , mse , rank , sigma = linalg . lstsq ( A , z ) # \u89e3 \u5747\u65b9\u5dee \u79e9 print ( f \"Parameters estimated by Least Squares: c1= { c [ 0 ] : .3f } \\t c2= { c [ 1 ] : .3f } \" ) print ( f \"Real parameters: c1= { c1 } \\t c2= { c2 } \" ) # \u5229\u7528\u4f30\u8ba1\u53c2\u6570\u8ba1\u7b97z\u7684\u9884\u6d4b\u503c z_pred = c [ 0 ] * A [:, 0 ] + c [ 1 ] * A [:, 1 ] lstsq_mse = np . mean ( np . square ( z - z_pred )) print ( f \"Mean squared error: { lstsq_mse } \" ) \u7cfb\u6570\u77e9\u9635 A: [[0.90483742 0.1 ] [0.81873075 0.2 ] [0.74081822 0.3 ] [0.67032005 0.4 ] [0.60653066 0.5 ] [0.54881164 0.6 ] [0.4965853 0.7 ] [0.44932896 0.8 ] [0.40656966 0.9 ] [0.36787944 1. ]] Parameters estimated by Least Squares: c1=5.425 c2=1.852 Real parameters: c1=5.0 c2=2.0 Mean squared error: 0.03904797048010764","title":"\u6c42\u89e3\u4e8c\u4e58\u6700\u5c0f\u95ee\u9898"},{"location":"scikit-learn/11.14.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#linearregression","text":"LinearRegression(fit_intercept=True, normalize=False, copy_X=True, n_jobs=None) \u53c2\u6570 fit_intercept \uff1a\u5e03\u5c14\u503c\u3002\u662f\u5426\u8ba1\u7b97\u7ebf\u6027\u56de\u5f52\u4e2d\u7684\u622a\u8ddd\u3002 normalize \uff1a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u90a3\u4e48\u8bad\u7ec3\u6837\u672c\u5c06\u4f7f\u7528L2\u8303\u6570\u8fdb\u884c\u5f52\u4e00\u5316\u3002 fit_intercept=False \u65f6\u5ffd\u7565\u8be5\u53c2\u6570\u3002 copy_X \uff1a\u5e03\u5c14\u503c\u3002\u662f\u5426\u590d\u5236 X \uff0c\u4e0d\u590d\u5236\u7684\u8bdd\u53ef\u80fd\u4f1a\u6539\u5199 X \u53d8\u91cf\u3002 n_jobs \uff1a\u6574\u6570\u3002\u6307\u5b9a\u4efb\u52a1\u5e76\u884c\u65f6\u4f7f\u7528\u7684CPU\u6570\u91cf\uff0c\u5982\u679c\u53d6\u503c\u4e3a-1\u5219\u4f7f\u7528\u6240\u6709\u53ef\u7528\u7684CPU\u3002 \u5c5e\u6027 coef \uff1a\u6743\u91cd\u5411\u91cf intercept_ \uff1a\u622a\u8ddd \u65b9\u6cd5 fit(X,y) \uff1a\u8bad\u7ec3\u6a21\u578b\u3002 predict(X) \uff1a\u9884\u6d4b\u3002 score(X,y) \uff1a\u8bc4\u5206\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a$\\text{score} = R^2 = 1 - \\frac{\\sum(y - \\hat{y})^2}{\\sum(y - \\bar{y})^2}$\u3002score\u6700\u5927\u503c\u662f1\uff0c\u4f46\u6709\u53ef\u80fd\u662f\u8d1f\u503c(\u9884\u6d4b\u6548\u679c\u592a\u5dee)\u3002score\u8d8a\u5927\uff0c\u9884\u6d4b\u6027\u80fd\u8d8a\u597d\u3002 # Create linear regression object regress_model = LinearRegression ( fit_intercept = False , normalize = False ) # Train the model using the training sets regress_model . fit ( A , z ) # Make predictions using the testing set z_pred = regress_model . predict ( A ) sklearn_mse = np . mean ( np . square ( z - z_pred )) # The coefficients print ( f 'Parameters estimated by LinearRegression: { regress_model . coef_ } ' ) # The mean squared error print ( 'Mean squared error: %.2f ' % mean_squared_error ( z , z_pred )) # The coefficient of determination: 1 is perfect prediction print ( 'Coefficient of determination: %.2f ' % r2_score ( z , z_pred )) Parameters estimated by LinearRegression: [5.42512871 1.85174901] Mean squared error: 0.04 Coefficient of determination: 0.81","title":"LinearRegression"},{"location":"scikit-learn/11.14.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#sgdregressor","text":"SGDRegressor(loss='squared_loss', penalty='l2', alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=1000, tol=0.001, shuffle=True, verbose=0, epsilon=0.1, random_state=None, learning_rate='invscaling', eta0=0.01, power_t=0.25, early_stopping=False, validation_fraction=0.1, n_iter_no_change=5, warm_start=False, average=False) loss \uff1a\u8981\u4f7f\u7528\u7684\u635f\u5931\u51fd\u6570\u3002\u53ef\u80fd\u7684\u503c\u4e3a \"squared_loss\" \uff0c \"huber\" \uff0c \"epsilon_insensitive\" , \"squared_epsilon_insensitive\" \u3002 penalty \uff1a\u6b63\u5219\u9879\u3002\u53ef\u80fd\u7684\u503c\u4e3a \"l2\" , \"l1\" , \"elasticnet\" \uff0c\u9ed8\u8ba4\u4e3a \"l2\" \u3002 alpha \uff1a\u4e0e\u6b63\u5219\u9879\u76f8\u4e58\u7684\u5e38\u6570\u3002\u503c\u8d8a\u9ad8\uff0c\u6b63\u5219\u5316\u8d8a\u5f3a\u3002\u9ed8\u8ba4\u4e3a0.0001\u3002 l1_ratio \uff1a Elastic \u7f51\u7edc\u6df7\u5408\u53c2\u6570\u3002\u53d6\u503c\u8303\u56f4\u4e3a0 <= l1_ratio <= 1\u30021_ratio=0\u76f8\u5f53\u4e8eL2\u6b63\u5219\u9879\uff0c1_ratio=1\u76f8\u5f53\u4e8eL1\u6b63\u5219\u9879\u3002\u4ec5\u5728 penalty='elasticnet' \u65f6\u6709\u6548\u3002 fit_intercept \uff1a\u662f\u5426\u5e94\u8be5\u4f30\u8ba1\u622a\u8ddd\u3002\u5982\u679c\u4e3aFalse\uff0c\u5219\u5047\u5b9a\u6570\u636e\u5df2\u7ecf\u4e2d\u5fc3\u5316\u3002 max_iter \uff1a\u8bad\u7ec3\u96c6\u7684\u6700\u5927\u8fed\u4ee3\u6b21\u6570\uff0c\u53c8\u79f0\u4e3aepochs\uff0c\u5b83\u53ea\u4f1a\u5f71\u54cd fit \u65b9\u6cd5\u4e2d\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd partial_fit \u65b9\u6cd5\u3002 tol \uff1a\u505c\u6b62\u51c6\u5219\u3002\u5982\u679c\u975e None \uff0c\u5219\u5f53 loss > best_loss - tol \u6301\u7eed n_iter_no_change \u6b21\u8fed\u4ee3\u540e\uff0c\u8bad\u7ec3\u5c06\u505c\u6b62\u3002 shuffle \uff1a\u5728\u6bcf\u4e2aepoch\u4e4b\u540e\u662f\u5426\u5e94\u91cd\u65b0\u5bf9\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u6d17\u724c\u3002 epsilon \uff1aepsilon-insensitive \u635f\u5931\u51fd\u6570\u4e2d\u7684Epsilon \uff0c\u4ec5\u5f53 loss \u4e3a \"huber\" \uff0c \"epsilon_insensitive\" , \"squared_epsilon_insensitive\" \u65f6\u6709\u6548\u3002 learning_rate \uff1a\u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565\u3002\u53ef\u80fd\u7684\u503c\u4e3a\uff1a \"constant\" : eta = eta0 \"optimal\" : eta = 1.0 / (alpha * (t + t0)) \u5176\u4e2dt0\u7531Leon Bottou\u63d0\u51fa\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u9009\u62e9\u3002 \"invscaling\" : eta = eta0 / pow(t, power_t) \"adaptive\" : eta = eta0 eta0 \uff1a\u5b66\u4e60\u7387\u3002 early_stopping \uff1a\u5f53\u9a8c\u8bc1\u5206\u6570\u6ca1\u6709\u63d0\u9ad8\u65f6\uff0c\u662f\u5426\u4f7f\u7528\u63d0\u524d\u505c\u6b62\u6765\u7ec8\u6b62\u57f9\u8bad\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a True\uff0c\u5b83\u5c06\u81ea\u52a8\u7559\u51fa\u4e00\u90e8\u5206\u8bad\u7ec3\u6570\u636e\u4f5c\u4e3a\u9a8c\u8bc1\uff0c\u5e76\u5728 score \u65b9\u6cd5\u8fd4\u56de\u7684\u9a8c\u8bc1\u5f97\u5206\u81f3\u5c11 n_iter_no_change \u4e2aepoch\u6ca1\u6709\u51cf\u5c11 tol \u65f6\u7ec8\u6b62\u8bad\u7ec3\u3002 validation_fraction \uff1a\u9884\u7559\u7684\u9a8c\u8bc1\u96c6\u7684\u6bd4\u4f8b\u3002\u4ec5\u5728 early_stopping \u4e3aTrue\u65f6\u4f7f\u7528\u3002 sgd_regression_model = SGDRegressor ( loss = 'squared_loss' , fit_intercept = False , max_iter = 10000 , alpha = 0.001 , validation_fraction = 0.3 ) sgd_regression_model . fit ( A , z ) print ( f 'Coefficients: { sgd_regression_model . coef_ } ' ) Coefficients: [4.11459251 2.76786944] \u5982\u679c\u8bad\u7ec3\u96c6\u6837\u672c\u91cf\u592a\u5c11\uff0c\u5373\u4f7f\u589e\u52a0epoch\u7684\u5927\u5c0f\uff0c\u4e5f\u96be\u4ee5\u62df\u5408\u3002\u4ee5\u4e0b\u5bf9\u8bad\u7ec3\u96c6\u8fdb\u884c\u8fc7\u91c7\u6837\u3002 repeat_num = 10000 new_A = np . concatenate ([ A ] * repeat_num ) new_z = np . concatenate ([ z ] * repeat_num ) sgd_regression_model . fit ( new_A , new_z ) # Make predictions using the testing set z_pred = sgd_regression_model . predict ( A ) # The coefficients print ( f 'Coefficients: { sgd_regression_model . coef_ } ' ) # The mean squared error print ( 'Mean squared error: %.2f ' % mean_squared_error ( z , z_pred )) # The coefficient of determination: 1 is perfect prediction print ( 'Coefficient of determination: %.2f ' % r2_score ( z , z_pred )) Coefficients: [5.4053131 1.86414048] Mean squared error: 0.04 Coefficient of determination: 0.81","title":"SGDRegressor"},{"location":"scikit-learn/11.14.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html#sgdregressor_1","text":"import numpy as np class SGDRegressorSimple : def __init__ ( self , learn_ratio = 0.001 , max_iter = 1000 ): self . learn_ratio = learn_ratio self . max_iter = max_iter self . C = None def _calculate_gradient ( self , X , Y ): step = self . learn_ratio * np . sum (( np . dot ( A , self . C ) - Y ) * A , axis = 0 ) step = step . reshape ( self . C . shape ) self . C -= step def fit ( self , X , y ): Y = np . array ( y ) X = np . array ( X ) if len ( Y . shape ) == 1 : Y = Y . reshape ( - 1 , 1 ) elif len ( Y . shape ) != 2 : raise ValueError ( \"the shape of Y must be 2 dim\" ) if len ( X . shape ) != 2 : raise ValueError ( \"the shape of X must be 2 dim\" ) Y_shape = Y . shape X_shape = X . shape if self . C is None : self . C = np . zeros (( X_shape [ 1 ], 1 )) C_shape = self . C . shape if X_shape [ 0 ] != Y_shape [ 0 ]: raise ValueError ( \"the length of X and y are not equal\" ) if X_shape [ 1 ] != C_shape [ 0 ]: raise ValueError ( \"X.shape[1] is not equal to C.shape[1]\" ) for i in range ( self . max_iter ): self . _calculate_gradient ( X , Y ) sgd = SGDRegressorSimple ( learn_ratio = 0.01 , max_iter = 1000 ) sgd . fit ( A , y ) print ( f 'Coefficients: { sgd . C . flatten () } ' ) Coefficients: [4.9999651 2.00003525]","title":"\u624b\u52a8\u5b9e\u73b0SGDRegressor"},{"location":"scikit-learn/11.15.%E5%86%B3%E7%AD%96%E6%A0%91.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.07 sklearn version: 0.23.1 from sklearn.tree import ( DecisionTreeClassifier , DecisionTreeRegressor , ExtraTreeClassifier , ExtraTreeRegressor ) from sklearn import tree [ i for i in dir ( tree ) if not i . startswith ( \"_\" )] ['BaseDecisionTree', 'DecisionTreeClassifier', 'DecisionTreeRegressor', 'ExtraTreeClassifier', 'ExtraTreeRegressor', 'export_graphviz', 'export_text', 'plot_tree'] \u53c2\u6570\u8bf4\u660e DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, presort='deprecated', ccp_alpha=0.0) DecisionTreeRegressor(criterion='mse', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, presort='deprecated', ccp_alpha=0.0) \u5206\u88c2\u7b56\u7565\u53c2\u6570 criterion \uff1a\u5206\u88c2\u51c6\u5219\u3002\u5bf9\u4e8e\u5206\u7c7b\u6811\uff1a {'gini', 'entropy'} \uff0c\u4f7f\u7528Gini\u7cfb\u6570\u6216\u8005\u4fe1\u606f\u589e\u76ca\u3002 \u5bf9\u4e8e\u56de\u5f52\u6811\uff1a {\"mse\", \"friedman_mse\", \"mae\"} \u3002 splitter \uff1a {'best', 'random'} \u3002\u5206\u88c2\u7b56\u7565\u3002 'best' \u8868\u793a\u9009\u62e9\u6700\u4f18\u7684\u62c6\u5206\uff1b 'random' \u8868\u793a\u968f\u673a\u9009\u62e9\u6700\u4f18\u7684\u62c6\u5206\u3002 'best' \u9002\u5408\u6837\u672c\u91cf\u4e0d\u5927\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6837\u672c\u6570\u636e\u91cf\u975e\u5e38\u5927\uff0c\u63a8\u8350\u4f7f\u7528 'random' \u3002 max_features \uff1a\u6307\u5b9a\u5bfb\u627ebest split\u65f6\u8003\u8651\u7684\u7279\u5f81\u6570\u91cf\u3002\u5728\u627e\u5230\u81f3\u5c11\u4e00\u4e2a\u6709\u6548\u7684\u7279\u5f81\u7528\u4e8e\u5206\u88c2\u4e4b\u524d\uff0c\u4e0d\u4f1a\u505c\u6b62\u641c\u7d22\uff0c\u5373\u4f7f\u641c\u7d22\u7684\u7279\u5f81\u6570\u91cf\u8d85\u8fc7 max_features \u3002 \u5982\u679c\u662f\u6574\u6570\uff0c\u5219\u6bcf\u6b21\u5207\u5206\u53ea\u8003\u8651 max_features \u4e2a\u7279\u5f81 \u5982\u679c\u662f\u6d6e\u70b9\u6570\uff0c\u6bcf\u6b21\u5207\u5206\u53ea\u8003\u8651 max_features*n_features \u4e2a\u7279\u5f81 \u5982\u679c\u662f\u5b57\u7b26\u4e32 'auto' \uff0c\u5219 max_features=sqrt(n_features) \u5982\u679c\u662f\u5b57\u7b26\u4e32 'sqrt' \uff0c\u5219 max_features=sqrt(n_features) \u5982\u679c\u662f\u5b57\u7b26\u4e32 'log2' \uff0c\u5219 max_features=log2(n_features) \u5982\u679c\u662f None \uff0c\u5219 max_features=n_features \u9884\u526a\u679d\u53c2\u6570 max_depth \uff1a\u53ef\u4ee5\u4e3a\u6574\u6570\u6216\u8005None\uff0c\u6307\u5b9a\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u9632\u6b62\u8fc7\u62df\u5408\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u6811\u7684\u6df1\u5ea6\u4e0d\u9650\uff0c\u76f4\u5230\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u90fd\u662f\u7eaf\u7684\uff08\u5373\u6240\u6709\u6837\u672c\u70b9\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u7c7b\uff09\uff0c\u6216\u8005\u53f6\u5b50\u7ed3\u70b9\u5305\u542b\u7684\u6837\u672c\u91cf\u5c0f\u4e8e min_samples_split\u3002\u5982\u679c max_leaf_nodes \u53c2\u6570\u975eNone\uff0c\u5219\u5ffd\u7565\u6b64\u9879\u3002 min_samples_split \uff1a\u6307\u5b9a\u6bcf\u4e2a\u5185\u90e8\u7ed3\u70b9\uff08\u975e\u53f6\u7ed3\u70b9\uff09\u5305\u542b\u7684\u6700\u5c11\u7684\u6837\u672c\u6570\u3002 \u5982\u679c\u662f\u6574\u6570\uff0c\u8be5\u6574\u6570\u5c31\u662f\u6700\u5c11\u6837\u672c\u6570\u3002 \u5982\u679c\u662f\u6d6e\u70b9\u6570\uff0c\u5219 ceil(min_samples_split * n_samples) \u662f\u6700\u5c11\u6837\u672c\u6570\u3002 min_samples_leaf \uff1a\u6307\u5b9a\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5305\u542b\u7684\u6700\u5c11\u7684\u6837\u672c\u6570\u3002\u53ea\u6709\u5f53\u5de6\u53f3\u5206\u652f\u90fd\u81f3\u5c11\u6709min_samples_leaf\u4e2a\u6837\u672c\uff0c\u7ed3\u70b9\u624d\u4f1a\u8fdb\u884c\u5206\u88c2\u3002 \u5982\u679c\u662f\u6574\u6570\uff0c\u8be5\u6574\u6570\u5c31\u662f\u6700\u5c11\u7684\u6837\u672c\u6570\u3002 \u5982\u679c\u662f\u6d6e\u70b9\u6570\uff0c\u5219 ceil(min_samples_split * n_samples) \u662f\u6700\u5c11\u6837\u672c\u6570\u3002 min_weight_fraction_leaf \uff1a\u6d6e\u70b9\u6570\uff0c\u53f6\u5b50\u7ed3\u70b9\u4e2d\u6240\u6709\u6837\u672c\u6743\u91cd\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u9ed8\u8ba4\u4e3a0.0\u3002 max_leaf_nodes \uff1a\u6574\u6570\u6216None\uff0c\u6307\u5b9a\u53f6\u5b50\u7ed3\u70b9\u7684\u6700\u5927\u6570\u91cf\u3002\u5982\u679c\u4e3a None \uff0c\u6b64\u65f6\u53f6\u5b50\u8282\u70b9\u6570\u4e0d\u9650\u3002\u5982\u679c\u975e None \uff0c\u5219 max_depth \u53c2\u6570\u88ab\u5ffd\u7565\u3002 min_impurity_decrease \uff1a\u9ed8\u8ba4\u4e3a0.0\uff0c\u5982\u679c\u8be5\u5206\u88c2\u5bfc\u81f4\u4e0d\u7eaf\u5ea6\u7684\u51cf\u5c11\u91cf\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5\u503c\uff0c\u5219\u5c06\u5206\u88c2\u8282\u70b9\u3002\u52a0\u6743\u7684\u4e0d\u7eaf\u5ea6\u51cf\u5c11\u91cf\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\frac{N_t}{N} \\times (\\text{impurity} - \\frac{N_{t_R}}{N_t} \\times \\text{impurity}_R- \\frac{N{t_L}}{N_t} \\times \\text{impurity}_L) $$ min_impurity_split \uff1a \u5f03\u7528 \uff0c\u65e9\u505c\u7684impurity\u9608\u503c\u3002\u5982\u679c\u7ed3\u70b9\u7684impurity\u9ad8\u4e8e\u8be5\u9608\u503c\uff0c\u5219\u5206\u88c2\u7ed3\u70b9\uff0c\u5426\u5219\u6807\u8bb0\u4e3a\u53f6\u7ed3\u70b9\u3002\u8be5\u53c2\u6570\u57280.25\u7248\u672c\u4e2d\u5c06\u88ab\u79fb\u9664\uff0c\u5efa\u8bae\u4f7f\u7528 min_impurity_decrease \u53c2\u6570\u3002 \u540e\u526a\u679d\u53c2\u6570 ccp_alpha \uff1a\u6210\u672c\u590d\u6742\u5ea6\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a0.0\uff0c\u5373\u4e0d\u4f1a\u6267\u884c\u540e\u526a\u679d\u3002 \u5176\u4ed6\u53c2\u6570 class_weight \uff1adict, list of dict or \"balanced\", or None. \u6307\u5b9a\u4e86\u5404\u7c7b\u522b\u7684\u6743\u91cd\u3002 \u5982\u679c\u662f\u591a\u5206\u7c7b\u95ee\u9898\uff0c\u5219\u901a\u8fc7 {class_label: weight} \u7684\u5f62\u5f0f\u6307\u5b9a\u6743\u91cd\u3002 \u5982\u679c\u662f\u591a\u6807\u7b7e\u5206\u7c7b\u95ee\u9898\uff0c\u4f8b\u59824-class\u591a\u6807\u7b7e\u5206\u7c7b\u95ee\u9898\u5e94\u8be5\u901a\u8fc7\u5982\u4e0b\u5f62\u5f0f\u6307\u5b9a\u6743\u91cd\uff1a [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] \u5217\u8868\u4e2d\u6bcf\u4e2adict\u5bf9\u5e94 y \u7684\u6bcf\u4e00\u5217\u3002\u800c\u4e0d\u662f\u901a\u8fc7\u5982\u4e0b\u5f62\u5f0f\u6307\u5b9a\u6743\u91cd\uff1a [{1:1}, {2:5}, {3:1}, {4:1}] \u5982\u679c\u4e3a None \uff0c\u5219\u6bcf\u4e2a\u7c7b\u522b\u6743\u91cd\u90fd\u4e3a1\u3002 \u5982\u679c\u4e3a \u2018balanced\u2019 \uff0c\u5219\u7c7b\u522b\u6743\u91cd\u5c06\u81ea\u52a8\u8ba1\u7b97\uff0c\u516c\u5f0f\u4e3a\uff1a n_samples / (n_classes * np.bincount(y)) \u3002\u5982\u679c\u662f\u591a\u6807\u7b7e\u5206\u7c7b\uff0c y \u7684\u6bcf\u4e00\u5217\u5c06\u76f8\u4e58\u3002 \u5982\u679c\u5728 fit \u65b9\u6cd5\u6307\u5b9a\u4e86 sample_weight \uff0c\u5219 sample_weight \u5c06\u4e8e\u5bf9\u5e94\u7684 class_weight \u76f8\u4e58\u3002 presort \uff1a \u5f03\u7528 \uff0c\u6307\u5b9a\u4e86\u662f\u5426\u8981\u63d0\u524d\u6392\u5e8f\u6570\u636e\u4ece\u800c\u52a0\u901f\u5bfb\u627e\u6700\u4f18\u5206\u5272\u7684\u8fc7\u7a0b\u3002\u8be5\u53c2\u6570\u5c06\u57280.24\u7248\u672c\u4e2d\u88ab\u79fb\u9664\u3002\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u5bf9\u4e8e\u5927\u6570\u636e\u96c6\u4f1a\u51cf\u6162\u603b\u4f53\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u4f46\u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6\u6216\u8005\u8bbe\u5b9a\u4e86\u6700\u5927\u6df1\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u5219\u4f1a\u52a0\u901f\u8bad\u7ec3\u8fc7\u7a0b\u3002 \u5c5e\u6027 classes_ \uff1a\u5404\u7c7b\u522b\u7684\u6807\u7b7e\u503c\u3002 feature_importances_ \uff1a\u7279\u5f81\u7684\u91cd\u8981\u7a0b\u5ea6\u3002\u8be5\u503c\u8d8a\u9ad8\uff0c\u5219\u7279\u5f81\u8d8a\u91cd\u8981(\u4e5f\u79f0\u4e3aGini importance)\u3002 max_features_ \uff1a max_feature \u53c2\u6570\u7684\u63a8\u65ad\u503c\u3002 n_classes_ \uff1a\u7c7b\u522b\u7684\u6570\u91cf\u3002 n_features_ \uff1a\u6267\u884cfit\u540e\uff0c\u7279\u5f81\u7684\u6570\u91cf\u3002 n_outputs_ \uff1a\u6267\u884cfit\u540e\uff0c\u8f93\u51fa\u7684\u6570\u91cf\u3002 tree_ \uff1a\u5e95\u5c42\u7684\u51b3\u7b56\u6811\u5bf9\u8c61\u3002 \u65b9\u6cd5 apply (X[, check_input]) \u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u8fdb\u5165\u7684\u53f6\u5b50\u7ed3\u70b9\u7684\u7d22\u5f15 cost_complexity_pruning_path (X, y[, \u2026]) \u5728Minimal Cost-Complexity\u526a\u679d\u671f\u95f4\u8ba1\u7b97\u526a\u679d\u8def\u5f84 decision_path (X[, check_input]) \u8fd4\u56de\u6811\u7684\u51b3\u7b56\u8def\u5f84 fit (X, y[, sample_weight, check_input, \u2026]) Build a decision tree classifier from the training set (X, y). get_depth () Return the depth of the decision tree. get_n_leaves () Return the number of leaves of the decision tree. get_params ([deep]) Get parameters for this estimator. predict (X[, check_input]) Predict class or regression value for X. predict_log_proba (X) Predict class log-probabilities of the input samples X. predict_proba (X[, check_input]) Predict class probabilities of the input samples X. score (X, y[, sample_weight]) Return the mean accuracy on the given test data and labels. set_params (**params) Set the parameters of this estimator. \u5bf9\u4e8e\u5206\u7c7b\u6811\uff0c score() \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u662f\uff1a accuracy_score ( y , self . predict ( X ), sample_weight = sample_weight ) \u5bf9\u4e8e\u56de\u5f52\u6811\uff0c score() \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u662f\uff1a r2_score ( y , y_pred , sample_weight = sample_weight ) $$ R^2 = 1 - \\frac{\\sum(y - \\hat{y})^2}{\\sum(y - \\bar{y})^2} $$ $R^2$\u6709\u53ef\u80fd\u4e3a\u8d1f\u503c\u3002 extremely randomized tree \u6781\u7aef\u968f\u673a\u6811\u4e0e\u7ecf\u5178\u51b3\u7b56\u6811\u7684\u6784\u5efa\u65b9\u5f0f\u4e0d\u540c\u3002\u5bfb\u627e\u6700\u4f73\u5206\u5272\u65f6\uff0cExtra-trees \u5728\u6240\u6709\u62c6\u5206\u4e2d\u968f\u673a\u9009\u62e9 max_features \u4e2a\u62c6\u5206\uff0c\u5e76\u5728 max_features \u4e2a\u62c6\u5206\u4e2d\u9009\u62e9\u6700\u4f73\u62c6\u5206\u3002\u5f53 max_features \u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u5373\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b8c\u5168\u968f\u673a\u7684\u51b3\u7b56\u6811\u3002 \u5b9e\u9645\u4e0a\uff0c ExtraTree \u7ee7\u627f\u81ea DecisionTree \uff0c ExtraTree \u53ea\u662f\u5c06 splitter \u3001 max_features \u53c2\u6570\u5206\u522b\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a \"random\" \u548c \"auto\" \u800c\u5df2\u3002 ExtraTreeClassifier(criterion='gini', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, ccp_alpha=0.0) ExtraTreeRegressor(criterion='mse', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', random_state=None, min_impurity_decrease=0.0, min_impurity_split=None, max_leaf_nodes=None, ccp_alpha=0.0)","title":"11.15.\u51b3\u7b56\u6811"},{"location":"scikit-learn/11.15.%E5%86%B3%E7%AD%96%E6%A0%91.html#_1","text":"DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, presort='deprecated', ccp_alpha=0.0) DecisionTreeRegressor(criterion='mse', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, presort='deprecated', ccp_alpha=0.0) \u5206\u88c2\u7b56\u7565\u53c2\u6570 criterion \uff1a\u5206\u88c2\u51c6\u5219\u3002\u5bf9\u4e8e\u5206\u7c7b\u6811\uff1a {'gini', 'entropy'} \uff0c\u4f7f\u7528Gini\u7cfb\u6570\u6216\u8005\u4fe1\u606f\u589e\u76ca\u3002 \u5bf9\u4e8e\u56de\u5f52\u6811\uff1a {\"mse\", \"friedman_mse\", \"mae\"} \u3002 splitter \uff1a {'best', 'random'} \u3002\u5206\u88c2\u7b56\u7565\u3002 'best' \u8868\u793a\u9009\u62e9\u6700\u4f18\u7684\u62c6\u5206\uff1b 'random' \u8868\u793a\u968f\u673a\u9009\u62e9\u6700\u4f18\u7684\u62c6\u5206\u3002 'best' \u9002\u5408\u6837\u672c\u91cf\u4e0d\u5927\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6837\u672c\u6570\u636e\u91cf\u975e\u5e38\u5927\uff0c\u63a8\u8350\u4f7f\u7528 'random' \u3002 max_features \uff1a\u6307\u5b9a\u5bfb\u627ebest split\u65f6\u8003\u8651\u7684\u7279\u5f81\u6570\u91cf\u3002\u5728\u627e\u5230\u81f3\u5c11\u4e00\u4e2a\u6709\u6548\u7684\u7279\u5f81\u7528\u4e8e\u5206\u88c2\u4e4b\u524d\uff0c\u4e0d\u4f1a\u505c\u6b62\u641c\u7d22\uff0c\u5373\u4f7f\u641c\u7d22\u7684\u7279\u5f81\u6570\u91cf\u8d85\u8fc7 max_features \u3002 \u5982\u679c\u662f\u6574\u6570\uff0c\u5219\u6bcf\u6b21\u5207\u5206\u53ea\u8003\u8651 max_features \u4e2a\u7279\u5f81 \u5982\u679c\u662f\u6d6e\u70b9\u6570\uff0c\u6bcf\u6b21\u5207\u5206\u53ea\u8003\u8651 max_features*n_features \u4e2a\u7279\u5f81 \u5982\u679c\u662f\u5b57\u7b26\u4e32 'auto' \uff0c\u5219 max_features=sqrt(n_features) \u5982\u679c\u662f\u5b57\u7b26\u4e32 'sqrt' \uff0c\u5219 max_features=sqrt(n_features) \u5982\u679c\u662f\u5b57\u7b26\u4e32 'log2' \uff0c\u5219 max_features=log2(n_features) \u5982\u679c\u662f None \uff0c\u5219 max_features=n_features \u9884\u526a\u679d\u53c2\u6570 max_depth \uff1a\u53ef\u4ee5\u4e3a\u6574\u6570\u6216\u8005None\uff0c\u6307\u5b9a\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u9632\u6b62\u8fc7\u62df\u5408\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u6811\u7684\u6df1\u5ea6\u4e0d\u9650\uff0c\u76f4\u5230\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u90fd\u662f\u7eaf\u7684\uff08\u5373\u6240\u6709\u6837\u672c\u70b9\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u7c7b\uff09\uff0c\u6216\u8005\u53f6\u5b50\u7ed3\u70b9\u5305\u542b\u7684\u6837\u672c\u91cf\u5c0f\u4e8e min_samples_split\u3002\u5982\u679c max_leaf_nodes \u53c2\u6570\u975eNone\uff0c\u5219\u5ffd\u7565\u6b64\u9879\u3002 min_samples_split \uff1a\u6307\u5b9a\u6bcf\u4e2a\u5185\u90e8\u7ed3\u70b9\uff08\u975e\u53f6\u7ed3\u70b9\uff09\u5305\u542b\u7684\u6700\u5c11\u7684\u6837\u672c\u6570\u3002 \u5982\u679c\u662f\u6574\u6570\uff0c\u8be5\u6574\u6570\u5c31\u662f\u6700\u5c11\u6837\u672c\u6570\u3002 \u5982\u679c\u662f\u6d6e\u70b9\u6570\uff0c\u5219 ceil(min_samples_split * n_samples) \u662f\u6700\u5c11\u6837\u672c\u6570\u3002 min_samples_leaf \uff1a\u6307\u5b9a\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5305\u542b\u7684\u6700\u5c11\u7684\u6837\u672c\u6570\u3002\u53ea\u6709\u5f53\u5de6\u53f3\u5206\u652f\u90fd\u81f3\u5c11\u6709min_samples_leaf\u4e2a\u6837\u672c\uff0c\u7ed3\u70b9\u624d\u4f1a\u8fdb\u884c\u5206\u88c2\u3002 \u5982\u679c\u662f\u6574\u6570\uff0c\u8be5\u6574\u6570\u5c31\u662f\u6700\u5c11\u7684\u6837\u672c\u6570\u3002 \u5982\u679c\u662f\u6d6e\u70b9\u6570\uff0c\u5219 ceil(min_samples_split * n_samples) \u662f\u6700\u5c11\u6837\u672c\u6570\u3002 min_weight_fraction_leaf \uff1a\u6d6e\u70b9\u6570\uff0c\u53f6\u5b50\u7ed3\u70b9\u4e2d\u6240\u6709\u6837\u672c\u6743\u91cd\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u9ed8\u8ba4\u4e3a0.0\u3002 max_leaf_nodes \uff1a\u6574\u6570\u6216None\uff0c\u6307\u5b9a\u53f6\u5b50\u7ed3\u70b9\u7684\u6700\u5927\u6570\u91cf\u3002\u5982\u679c\u4e3a None \uff0c\u6b64\u65f6\u53f6\u5b50\u8282\u70b9\u6570\u4e0d\u9650\u3002\u5982\u679c\u975e None \uff0c\u5219 max_depth \u53c2\u6570\u88ab\u5ffd\u7565\u3002 min_impurity_decrease \uff1a\u9ed8\u8ba4\u4e3a0.0\uff0c\u5982\u679c\u8be5\u5206\u88c2\u5bfc\u81f4\u4e0d\u7eaf\u5ea6\u7684\u51cf\u5c11\u91cf\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5\u503c\uff0c\u5219\u5c06\u5206\u88c2\u8282\u70b9\u3002\u52a0\u6743\u7684\u4e0d\u7eaf\u5ea6\u51cf\u5c11\u91cf\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\frac{N_t}{N} \\times (\\text{impurity} - \\frac{N_{t_R}}{N_t} \\times \\text{impurity}_R- \\frac{N{t_L}}{N_t} \\times \\text{impurity}_L) $$ min_impurity_split \uff1a \u5f03\u7528 \uff0c\u65e9\u505c\u7684impurity\u9608\u503c\u3002\u5982\u679c\u7ed3\u70b9\u7684impurity\u9ad8\u4e8e\u8be5\u9608\u503c\uff0c\u5219\u5206\u88c2\u7ed3\u70b9\uff0c\u5426\u5219\u6807\u8bb0\u4e3a\u53f6\u7ed3\u70b9\u3002\u8be5\u53c2\u6570\u57280.25\u7248\u672c\u4e2d\u5c06\u88ab\u79fb\u9664\uff0c\u5efa\u8bae\u4f7f\u7528 min_impurity_decrease \u53c2\u6570\u3002 \u540e\u526a\u679d\u53c2\u6570 ccp_alpha \uff1a\u6210\u672c\u590d\u6742\u5ea6\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a0.0\uff0c\u5373\u4e0d\u4f1a\u6267\u884c\u540e\u526a\u679d\u3002 \u5176\u4ed6\u53c2\u6570 class_weight \uff1adict, list of dict or \"balanced\", or None. \u6307\u5b9a\u4e86\u5404\u7c7b\u522b\u7684\u6743\u91cd\u3002 \u5982\u679c\u662f\u591a\u5206\u7c7b\u95ee\u9898\uff0c\u5219\u901a\u8fc7 {class_label: weight} \u7684\u5f62\u5f0f\u6307\u5b9a\u6743\u91cd\u3002 \u5982\u679c\u662f\u591a\u6807\u7b7e\u5206\u7c7b\u95ee\u9898\uff0c\u4f8b\u59824-class\u591a\u6807\u7b7e\u5206\u7c7b\u95ee\u9898\u5e94\u8be5\u901a\u8fc7\u5982\u4e0b\u5f62\u5f0f\u6307\u5b9a\u6743\u91cd\uff1a [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] \u5217\u8868\u4e2d\u6bcf\u4e2adict\u5bf9\u5e94 y \u7684\u6bcf\u4e00\u5217\u3002\u800c\u4e0d\u662f\u901a\u8fc7\u5982\u4e0b\u5f62\u5f0f\u6307\u5b9a\u6743\u91cd\uff1a [{1:1}, {2:5}, {3:1}, {4:1}] \u5982\u679c\u4e3a None \uff0c\u5219\u6bcf\u4e2a\u7c7b\u522b\u6743\u91cd\u90fd\u4e3a1\u3002 \u5982\u679c\u4e3a \u2018balanced\u2019 \uff0c\u5219\u7c7b\u522b\u6743\u91cd\u5c06\u81ea\u52a8\u8ba1\u7b97\uff0c\u516c\u5f0f\u4e3a\uff1a n_samples / (n_classes * np.bincount(y)) \u3002\u5982\u679c\u662f\u591a\u6807\u7b7e\u5206\u7c7b\uff0c y \u7684\u6bcf\u4e00\u5217\u5c06\u76f8\u4e58\u3002 \u5982\u679c\u5728 fit \u65b9\u6cd5\u6307\u5b9a\u4e86 sample_weight \uff0c\u5219 sample_weight \u5c06\u4e8e\u5bf9\u5e94\u7684 class_weight \u76f8\u4e58\u3002 presort \uff1a \u5f03\u7528 \uff0c\u6307\u5b9a\u4e86\u662f\u5426\u8981\u63d0\u524d\u6392\u5e8f\u6570\u636e\u4ece\u800c\u52a0\u901f\u5bfb\u627e\u6700\u4f18\u5206\u5272\u7684\u8fc7\u7a0b\u3002\u8be5\u53c2\u6570\u5c06\u57280.24\u7248\u672c\u4e2d\u88ab\u79fb\u9664\u3002\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u5bf9\u4e8e\u5927\u6570\u636e\u96c6\u4f1a\u51cf\u6162\u603b\u4f53\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u4f46\u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6\u6216\u8005\u8bbe\u5b9a\u4e86\u6700\u5927\u6df1\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u5219\u4f1a\u52a0\u901f\u8bad\u7ec3\u8fc7\u7a0b\u3002","title":"\u53c2\u6570\u8bf4\u660e"},{"location":"scikit-learn/11.15.%E5%86%B3%E7%AD%96%E6%A0%91.html#_2","text":"classes_ \uff1a\u5404\u7c7b\u522b\u7684\u6807\u7b7e\u503c\u3002 feature_importances_ \uff1a\u7279\u5f81\u7684\u91cd\u8981\u7a0b\u5ea6\u3002\u8be5\u503c\u8d8a\u9ad8\uff0c\u5219\u7279\u5f81\u8d8a\u91cd\u8981(\u4e5f\u79f0\u4e3aGini importance)\u3002 max_features_ \uff1a max_feature \u53c2\u6570\u7684\u63a8\u65ad\u503c\u3002 n_classes_ \uff1a\u7c7b\u522b\u7684\u6570\u91cf\u3002 n_features_ \uff1a\u6267\u884cfit\u540e\uff0c\u7279\u5f81\u7684\u6570\u91cf\u3002 n_outputs_ \uff1a\u6267\u884cfit\u540e\uff0c\u8f93\u51fa\u7684\u6570\u91cf\u3002 tree_ \uff1a\u5e95\u5c42\u7684\u51b3\u7b56\u6811\u5bf9\u8c61\u3002","title":"\u5c5e\u6027"},{"location":"scikit-learn/11.15.%E5%86%B3%E7%AD%96%E6%A0%91.html#_3","text":"apply (X[, check_input]) \u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u8fdb\u5165\u7684\u53f6\u5b50\u7ed3\u70b9\u7684\u7d22\u5f15 cost_complexity_pruning_path (X, y[, \u2026]) \u5728Minimal Cost-Complexity\u526a\u679d\u671f\u95f4\u8ba1\u7b97\u526a\u679d\u8def\u5f84 decision_path (X[, check_input]) \u8fd4\u56de\u6811\u7684\u51b3\u7b56\u8def\u5f84 fit (X, y[, sample_weight, check_input, \u2026]) Build a decision tree classifier from the training set (X, y). get_depth () Return the depth of the decision tree. get_n_leaves () Return the number of leaves of the decision tree. get_params ([deep]) Get parameters for this estimator. predict (X[, check_input]) Predict class or regression value for X. predict_log_proba (X) Predict class log-probabilities of the input samples X. predict_proba (X[, check_input]) Predict class probabilities of the input samples X. score (X, y[, sample_weight]) Return the mean accuracy on the given test data and labels. set_params (**params) Set the parameters of this estimator. \u5bf9\u4e8e\u5206\u7c7b\u6811\uff0c score() \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u662f\uff1a accuracy_score ( y , self . predict ( X ), sample_weight = sample_weight ) \u5bf9\u4e8e\u56de\u5f52\u6811\uff0c score() \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u662f\uff1a r2_score ( y , y_pred , sample_weight = sample_weight ) $$ R^2 = 1 - \\frac{\\sum(y - \\hat{y})^2}{\\sum(y - \\bar{y})^2} $$ $R^2$\u6709\u53ef\u80fd\u4e3a\u8d1f\u503c\u3002","title":"\u65b9\u6cd5"},{"location":"scikit-learn/11.15.%E5%86%B3%E7%AD%96%E6%A0%91.html#extremely-randomized-tree","text":"\u6781\u7aef\u968f\u673a\u6811\u4e0e\u7ecf\u5178\u51b3\u7b56\u6811\u7684\u6784\u5efa\u65b9\u5f0f\u4e0d\u540c\u3002\u5bfb\u627e\u6700\u4f73\u5206\u5272\u65f6\uff0cExtra-trees \u5728\u6240\u6709\u62c6\u5206\u4e2d\u968f\u673a\u9009\u62e9 max_features \u4e2a\u62c6\u5206\uff0c\u5e76\u5728 max_features \u4e2a\u62c6\u5206\u4e2d\u9009\u62e9\u6700\u4f73\u62c6\u5206\u3002\u5f53 max_features \u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u5373\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b8c\u5168\u968f\u673a\u7684\u51b3\u7b56\u6811\u3002 \u5b9e\u9645\u4e0a\uff0c ExtraTree \u7ee7\u627f\u81ea DecisionTree \uff0c ExtraTree \u53ea\u662f\u5c06 splitter \u3001 max_features \u53c2\u6570\u5206\u522b\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a \"random\" \u548c \"auto\" \u800c\u5df2\u3002 ExtraTreeClassifier(criterion='gini', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, class_weight=None, ccp_alpha=0.0) ExtraTreeRegressor(criterion='mse', splitter='random', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', random_state=None, min_impurity_decrease=0.0, min_impurity_split=None, max_leaf_nodes=None, ccp_alpha=0.0)","title":"extremely randomized tree"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.10 sklearn version: 0.22.1 \u8bc4\u4ef7\u6307\u6807 sklearn\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u8bc4\u4f30\u6307\u6807\u53ef\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\uff1a \u51fd\u6570 \u8bf4\u660e accuracy_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97accuracy balanced_accuracy_score(y_true, y_pred) \u2705 \u8ba1\u7b97 balanced accuracy precision_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 precision recall_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 recall f1_score(y_true, y_pred[, labels, \u2026]) \u2705 \u8ba1\u7b97 F1 score fbeta_score(y_true, y_pred, beta[, \u2026]) \u2705 \u8ba1\u7b97 F-beta score classification_report(y_true, y_pred) \u2705 \u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807 precision_recall_fscore_support(\u2026) \u2705 \u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u522b\u7684 precision\u3001recall\u3001F-measure\u3001support confusion_matrix(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97\u6df7\u6dc6\u77e9\u9635 precision_recall_curve(y_true, \u2026) \u2705 \u8ba1\u7b97\u4e0d\u540c\u6982\u7387\u9608\u503c\u7684 precision \u548c recall roc_curve(y_true, y_score[, \u2026]) \u2705 \u8ba1\u7b97 Receiver operating characteristic (ROC) roc_auc_score(y_true, y_score[, \u2026]) \u2705 \u8ba1\u7b97 ROC \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff08AUC\uff09 auc(x, y) \u2705 \u8ba1\u7b97 AUC\uff0c\u4f7f\u7528\u68af\u5f62\u8ba1\u7b97\u516c\u5f0f average_precision_score(y_true, y_score) \u2705 \u8ba1\u7b97average precision (AP) brier_score_loss(y_true, y_prob[, \u2026]) \u2705 \u8ba1\u7b97 Brier score cohen_kappa_score(y1, y2[, labels, \u2026]) \ud83d\udd32 Cohen\u2019s kappa: a statistic that measures inter-annotator agreement dcg_score(y_true, y_score[, k, \u2026]) \ud83d\udd32 \u8ba1\u7b97Discounted Cumulative Gain hamming_loss(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 average Hamming loss hinge_loss(y_true, pred_decision[, \u2026]) \ud83d\udd32 \u8ba1\u7b97 Average hinge loss (non-regularized) jaccard_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 Jaccard similarity coefficient score log_loss(y_true, y_pred[, eps, \u2026]) \u2705 Log loss, aka logistic loss or cross-entropy loss matthews_corrcoef(y_true, y_pred[, \u2026]) \ud83d\udd32 \u8ba1\u7b97 the Matthews correlation coefficient (MCC) multilabel_confusion_matrix(y_true, \u2026) \u2705 Compute a confusion matrix for each class or sample ndcg_score(y_true, y_score[, k, \u2026]) \ud83d\udd32 Compute Normalized Discounted Cumulative Gain. zero_one_loss(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97Zero-one\u5206\u7c7b\u635f\u5931 \u5e94\u7528\u573a\u666f \u53ea\u80fd\u7528\u4e8e\u4e8c\u5206\u7c7b\uff1a precision_recall_curve roc_curve brier_score_loss \u53ea\u80fd\u7528\u4e8e\u591a\u5206\u7c7b\uff1a confusion_matrix balanced_accuracy_score hinge_loss cohen_kappa_score matthews_corrcoef \u591a\u5206\u7c7b\u548c\u591a\u6807\u7b7e\uff1a accuracy_score recall_score precision_score f1_score fbeta_score classification_report precision_recall_fscore_support hamming_loss jaccard_similarity_score log_loss zero_one_loss \u4e8c\u5206\u7c7b\u548c\u591a\u6807\u7b7e\uff1a average_precision_score roc_auc_score ranking\uff1a dcg_score ndcg_score accuracy $$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i) $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219\u4e00\u822c\u5316\u7684\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{\\sum_{i=0}^{n_\\text{samples}-1}w_i} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i)w_i $$ from sklearn.metrics import accuracy_score accuracy_score ( y_true , y_pred , normalize = True , sample_weight = None ) normalize : \u5982\u679c False \uff0c\u5219\u8fd4\u56de\u5206\u7c7b\u6b63\u786e\u7684\u6837\u672c\u6570\u91cf\uff0c\u5982\u679c True \uff0c\u5219\u8fd4\u56de\u603b\u4f53\u7684\u6b63\u786e\u7387\u3002 y_true = [ 0 , 1 , 2 , 3 ] y_pred = [ 0 , 2 , 1 , 3 ] print ( accuracy_score ( y_true , y_pred )) print ( accuracy_score ( y_true , y_pred , normalize = False )) print ( accuracy_score ( y_true , y_pred , sample_weight = ( 1 , 1 , 1 , 10 ))) 0.5 2 0.8461538461538461 balanced accuracy $$ \\texttt{balanced accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{class}} \\sum_{i=1}^{n_\\text{class}} \\text{accuracy}_i $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219$\\text{accuracy}_i$\u5e94\u8be5\u5148\u6309\u6743\u91cd\u8ba1\u7b97\u3002 from sklearn.metrics import balanced_accuracy_score balanced_accuracy_score ( y_true , y_pred , sample_weight = None , adjusted = False ) adjusted : The best value is 1 and the worst value is 0 when adjusted=False . When true, the result is adjusted for chance, so that random performance would score 0, and perfect performance scores 1. y_true = [ 0 , 1 , 0 , 0 , 1 , 0 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 ] balanced_accuracy_score ( y_true , y_pred ) 0.625 confusion matrix from toolkit import H from sklearn.metrics import confusion_matrix from sklearn.metrics import multilabel_confusion_matrix from sklearn.metrics import plot_confusion_matrix from sklearn.metrics import ConfusionMatrixDisplay import numpy as np confusion_matrix ( y_true , y_pred , labels = None , sample_weight = None , normalize = None ) y_true = [ 0 , 1 , 0 , 0 , 1 , 0 , 2 , 1 , 2 , 2 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 , 2 , 1 , 0 , 2 ] confusion_matrix ( y_true , y_pred , labels = [ 1 , 0 , 2 ]) array([[2, 1, 0], [1, 3, 0], [0, 1, 2]], dtype=int64) multilabel confusion matrix multilabel_confusion_matrix ( y_true , y_pred , sample_weight = None , labels = None , samplewise = False ) y_true = [ \"cat\" , \"ant\" , \"cat\" , \"cat\" , \"ant\" , \"bird\" ] y_pred = [ \"ant\" , \"ant\" , \"cat\" , \"cat\" , \"ant\" , \"cat\" ] multilabel_confusion_matrix ( y_true , y_pred , labels = [ \"ant\" , \"bird\" , \"cat\" ]) y_true = np . array ([[ 1 , 0 , 1 ], [ 0 , 1 , 0 ]]) y_pred = np . array ([[ 1 , 0 , 0 ], [ 0 , 1 , 1 ]]) multilabel_confusion_matrix ( y_true , y_pred , samplewise = True ) array([[[1, 0], [1, 1]], [[1, 1], [0, 1]]], dtype=int64) confusion matrix\u53ef\u89c6\u5316 confusion_matrix \u51fd\u6570\u548c multilabel_confusion_matrix \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7 labels \u53c2\u6570\u8bbe\u7f6elabel\u7684\u6392\u5217\u987a\u5e8f\u3002\u4f46\u5b83\u4eec\u7684\u8f93\u51fa\u662f ndarray \u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u6307\u660e\u771f\u5b9e\u503c\u3001\u9884\u6d4b\u503c\u4e0e\u884c\u3001\u5217\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f7f\u7528 plot_confusion_matrix \u51fd\u6570\u53ef\u4ee5\u628a\u6df7\u6dc6\u77e9\u9635\u8f93\u51fa\u4e3a\u56fe\u8868\uff0c\u5f97\u5230\u66f4\u76f4\u89c2\u7684\u6548\u679c\uff1a plot_confusion_matrix ( estimator , X , y_true , labels = None , sample_weight = None , normalize = None , display_labels = None , include_values = True , xticks_rotation = 'horizontal' , values_format = None , cmap = 'viridis' , ax = None ) \u8981\u6ce8\u610f\u7684\u662f\uff0c\u9700\u8981\u628a estimator \u4f20\u5165 plot_confusion_matrix \u51fd\u6570\u3002 import numpy as np import matplotlib.pyplot as plt from sklearn import svm , datasets from sklearn.model_selection import train_test_split # import some data to play with iris = datasets . load_iris () X = iris . data y = iris . target class_names = iris . target_names # Split the data into a training set and a test set X_train , X_test , y_train , y_test = train_test_split ( X , y , random_state = 0 ) # Run classifier, using a model that is too regularized (C too low) to see # the impact on the results classifier = svm . SVC ( kernel = 'linear' , C = 0.01 ) . fit ( X_train , y_train ) np . set_printoptions ( precision = 2 ) # Plot non-normalized confusion matrix disp = plot_confusion_matrix ( classifier , X_test , y_test , display_labels = class_names , cmap = plt . cm . Blues , include_values = True , normalize = None ) disp . ax_ . set_title ( \"Confusion matrix\" ) print ( disp . confusion_matrix ) plt . show () [[13 0 0] [ 0 10 6] [ 0 0 9]] \u901a\u8fc7 plot_confusion_matrix \u51fd\u6570\u8fd4\u56de\u7684 ConfusionMatrixDisplay \u5bf9\u8c61\u7684 ax_ \u5c5e\u6027\u53ef\u4ee5\u8bbf\u95ee Axes \u5bf9\u8c61\u3002 \u5982\u679c\u5df2\u6709\u6df7\u6dc6\u77e9\u9635\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ConfusionMatrixDisplay \u7c7b\u8f93\u51fa\u6df7\u6dc6\u77e9\u9635\u56fe\u3002 ConfusionMatrixDisplay ( confusion_matrix , display_labels ) ConfusionMatrixDisplay . plot ( include_values = True , cmap = 'viridis' , xticks_rotation = 'horizontal' , values_format = None , ax = None ) disp_2 = ConfusionMatrixDisplay ( disp . confusion_matrix , display_labels = [ 0 , 1 , 2 ]) . plot () # disp_2.figure_.savefig() disp_2 . figure_ \u4ece\u4e8c\u5206\u7c7b\u5230\u591a\u5206\u7c7b\u3001\u591a\u6807\u7b7e \u4e00\u4e9b\u8bc4\u4ef7\u6307\u6807\u57fa\u672c\u4e0a\u662f\u4e3a\u4e8c\u5206\u7c7b\u4efb\u52a1\u5b9a\u4e49\u7684\uff08\u4f8b\u5982 f1_score\u3001roc_auc_score\uff09\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ec5\u8bc4\u4f30 positive label\u3002 \u5c06 binary metric \u62d3\u5c55\u5230 multiclass \u6216 multilabel \u95ee\u9898\u65f6\uff0c\u6570\u636e\u5c06\u88ab\u89c6\u4e3a\u4e8c\u5206\u7c7b\u95ee\u9898\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2ametric\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u90fd\u88ab\u62c6\u5206\u4e3a3\u4e2a\u4e8c\u5206\u7c7b\u4efb\u52a1\uff1a multiclass task: [1, 2, 3] multilabel task: [1, 0, 1] \u7136\u540e\u5404\u4e2a\u7c7b\u7684metric\u5c06\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f5c\u5747\u503c\u8fd0\u7b97\uff0c\u5f97\u5230\u7684\u5747\u503c\u5c06\u4f5c\u4e3a multiclass \u6216 multilabel \u95ee\u9898\u7684\u8bc4\u4ef7\u6307\u6807\u3002 \u5747\u503c\u8fd0\u7b97\u7684\u65b9\u5f0f\u901a\u8fc7 average \u53c2\u6570\u6307\u5b9a\u3002 macro \uff1a\u5404\u4e2a binary metrics \u4f5c\u7b80\u5355\u7684\u7b97\u672f\u5e73\u5747\uff0c\u6bcf\u4e2a\u7c7b\u522b\u5177\u6709\u76f8\u540c\u7684\u6743\u91cd\u3002 binary metrics \u7531\u5404\u7c7b\u7684\u6df7\u6dc6\u77e9\u9635\u5f97\u5230 \uff08\u6bcf\u4e2a\u7c7b\u6709\u4e00\u4e2a\u6df7\u6dc6\u77e9\u9635\uff09\u3002\u5728\u90a3\u4e9b\u5177\u6709\u4e0d\u9891\u7e41\u7c7b\u522b\uff0c\u4f46\u4e0d\u9891\u7e41\u7c7b\u4ecd\u7136\u91cd\u8981\u7684\u95ee\u9898\u4e0a\uff0cmacro-averaging\u662f\u7a81\u51fa\u5176\u6027\u80fd\u7684\u4e00\u79cd\u624b\u6bb5\u3002\u4f46\u53e6\u4e00\u65b9\u9762\uff0c\u6240\u6709\u7c7b\u522b\u540c\u6837\u91cd\u8981\u7684\u5047\u8bbe\u901a\u5e38\u662f\u4e0d\u771f\u5b9e\u7684\uff0c\u56e0\u6b64 macro-averaging \u5c06\u8fc7\u5ea6\u5f3a\u8c03\u4e0d\u9891\u7e41\u7c7b\u7684\u4f4e\u6027\u80fd\u3002 weighted \uff1a\u6bcf\u4e2a\u6837\u672c\u8d4b\u4e88\u4e00\u4e2a\u6743\u91cd\uff0c\u5404\u4e2a\u7c7b\u7684\u6743\u91cd\u53d6\u51b3\u4e8e\u5b83\u4eec\u6837\u672c\u7684\u6743\u91cd\u3002\u6240\u4ee5\u5b9e\u9645\u4e0a\uff0c weighted \u5e73\u5747\u662f\u52a0\u6743\u7684 macro \u5e73\u5747\u3002 micro \uff1a \u5404\u4e2a\u7c7b\u7684\u6df7\u6dc6\u77e9\u9635\u6c42\u548c\uff0c\u518d\u6839\u636e\u6837\u672c\u6570\u6c42\u5e73\u5747\u503c\uff08\u5404\u4e2a\u6837\u672c\u6709\u540c\u6837\u7684\u6743\u91cd\uff09\uff0c\u5f97\u5230\u5e73\u5747\u6df7\u6dc6\u77e9\u9635\uff0c\u6700\u540e\u6839\u636e\u5e73\u5747\u6df7\u6dc6\u77e9\u9635\u6c42\u51fametric\u3002\u5728 multilabel \u4efb\u52a1\u548c\u9700\u8981\u5ffd\u7565\u9891\u7e41\u7c7b\u7684 multiclass\u4efb\u52a1\u4e2d\uff0cMicro-averaging \u53ef\u80fd\u662f\u4f18\u5148\u9009\u62e9\u7684\u3002 samples \uff1a \u4ec5\u9002\u7528\u4e8e multilabel problems\u3002 \u5404\u4e2a binary metrics \u4f5c\u7684\u7b97\u672f\u5e73\u5747\uff0c binary metrics \u7531\u5404\u6837\u672c\u7684\u6df7\u6dc6\u77e9\u9635\u5f97\u5230 \uff08\u6bcf\u4e2a\u6837\u672c\u6709\u4e00\u4e2a\u6df7\u6dc6\u77e9\u9635\uff09\u3002\u5e76\u8fd4\u56de ( sample_weight -weighted) \u52a0\u6743\u5e73\u5747\u3002 None \uff1a\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u7684 score \u3002 precision\u3001recall\u3001F1 \u4e8c\u5206\u7c7b \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e8c\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\u7684precision\u3001recall\u3001F1\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\text{precision} = \\frac{TP}{TP+FP} $$ $$ \\text{recall} = \\frac{TP}{TP+FN} $$ $$ F1 = \\frac{2\\times\\text{precision}\\times \\text{recall}}{\\text{precision}+ \\text{recall}} $$ \u5982\u679c\u662f\u591a\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\uff0c\u5219\u53ef\u80fd\u4f7f\u7528\u5982\u4e0b\u8ba1\u7b97\u516c\u5f0f\uff1a Macro-averaging \u5b8f\u5e73\u5747\uff08Macro-averaging\uff09\u662f\u6307\u6240\u6709\u7c7b\u522b\u7684\u6bcf\u4e00\u4e2a\u7edf\u8ba1\u6307\u6807\u503c\u7684\u7b97\u672f\u5e73\u5747\u503c\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ {P_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} P_{i}} $$ $$ {R_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} R_{i}} $$ $$ {F_{\\text {macro}}=\\frac{2 \\times P_{\\text {macro}} \\times R_{\\text {macro}}}{P_{\\text {macro}}+R_{\\text {macro}}}} $$ Micro-averaging \u5fae\u5e73\u5747\uff08Micro-averaging\uff09\u662f\u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u793a\u4f8b\u4e0d\u5206\u7c7b\u522b\u8fdb\u884c\u7edf\u8ba1\u5efa\u7acb\u5168\u5c40\u6df7\u6dc6\u77e9\u9635\uff0c\u7136\u540e\u8ba1\u7b97\u76f8\u5e94\u7684\u6307\u6807\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\begin{aligned} P_{\\text {micro }}=\\frac{\\overline{T P}}{\\overline{T P}+\\overline{F P}}& =\\frac{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}}{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}+\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} F P_{i}} \\\\ &=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F P_{i}} \\end{aligned} $$ $$ {R_{\\text {micro}}=\\frac{\\overline{TP}}{\\overline{TP} + \\overline{F N}}=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F N_{i}}} $$ $$ {F_{\\text {micro}}=\\frac{2 \\times P_{\\text {micro}} \\times R_{\\text {micro}}}{P_{\\text {micro}}+R_{\\text {micro}}}} $$ \u5728 sklearn \u4e2d\uff0c precision_score \u3001 recall_score \u548c f1_score \u4e09\u4e2a\u51fd\u6570\u7684\u63a5\u53e3\u662f\u4e00\u81f4\uff0c\u5b83\u4eec\u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\u3002 precision_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) recall_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) f1_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) labels : list , optional\u3002\u53ef\u4ee5\u6392\u9664\u6570\u636e\u4e2d\u5b58\u5728\u7684label\uff0c\u800c\u5982\u679c\u8f93\u5165\u6570\u636e\u4e2d\u4e0d\u5b58\u5728\u7684label\uff0c\u5219\u4f1a\u4ee50\u586b\u5145\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c y_true \u548c y_pred \u4e2d\u7684\u6240\u6709label\u4f1a\u81ea\u52a8\u6392\u5e8f\u3002 pos_label : str or int , 1 by default\u3002\u5bf9\u4e8e\u4e8c\u5206\u7c7b\u6570\u636e\u6709\u6548\uff0c\u5982\u679c\u6570\u636e\u662f\u591a\u5206\u7c7b\u7684\uff0c\u8be5\u53c2\u6570\u5c06\u88ab\u5ffd\u7565\u3002 average : string, [None, 'binary' (default), 'micro', 'macro', 'samples','weighted'] \u3002\u5bf9\u4e8e\u591a\u7c7b\u3001\u591a\u6807\u7b7e\u6570\u636e\uff0c\u6b64\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u522b\u7684\u5206\u6570\u3002\u5426\u5219\u5c06\u6267\u884c\u6307\u5b9a\u7684\u5e73\u5747\u7c7b\u578b\u3002 'binary' : \u4ec5\u8fd4\u56de pos_label \u7684\u5206\u6570\uff0c\u4ec5\u5f53\u4e8c\u5206\u7c7b\u65f6\u624d\u9002\u7528\u3002 'micro' : \u8fd4\u56demicro\u5e73\u5747\u3002 'macro' : \u8fd4\u56demacro\u5e73\u5747\uff08\u672a\u52a0\u6743\uff0c\u5373\u672a\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff09 'weighted' : \u52a0\u6743\u7684macro\u5e73\u5747\uff0c\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4F1\u4e0d\u5728precision\u548crecall\u4e4b\u95f4\u3002 'samples' : \u8ba1\u7b97\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u6307\u6807\uff0c\u5e76\u627e\u5230\u5176\u5e73\u5747\u503c\uff0c\u4ec5\u5bf9\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u6709\u610f\u4e49\u3002 sample_weight : array-like of shape = [n_samples], optional\u3002Sample weights. \u5047\u8bbe\u73b0\u5728\u6709\u5982\u4e0b\u6570\u636e\uff1a y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] \u5bfc\u5165\u51fd\u6570\uff1a from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.metrics import f1_score from sklearn.metrics import confusion_matrix \u5148\u8ba1\u7b97\u51fa\u6df7\u6dc6\u77e9\u9635\u5982\u4e0b\uff1a confusion_matrix ( y_true , y_pred , labels = [ 0 , 1 , 2 ]) array([[3, 0, 1], [1, 1, 1], [0, 1, 2]], dtype=int64) \u6839\u636e\u516c\u5f0f\uff0c\u5404\u5206\u7c7b\u7684\u6307\u6807\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ R_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ F_{0} = \\frac{2\\times P_{0}\\times R_{0}}{P_{0} + R_{0}} = \\frac{3}{4} $$ $$ P_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{2} \\\\ R_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{3} \\\\ F_{1} = \\frac{2\\times P_{1}\\times R_{1}}{P_{1} + R_{1}} = \\frac{2}{5} $$ $$ P_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{4} \\\\ R_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{3} \\\\ F_{2} = \\frac{2\\times P_{2}\\times R_{2}}{P_{2} + R_{2}} = \\frac{4}{7} $$ \u5373 $$ P_{0} = \\frac{3}{4} P_{1}=\\frac{1}{2} P_{2}=\\frac{1}{2} \\\\ R_{0} = \\frac{3}{4} R_{1}=\\frac{1}{3} R_{2}=\\frac{2}{3} \\\\ F_{0} = \\frac{3}{4} F_{1}=\\frac{2}{5} F_{2}=\\frac{4}{7} $$ precision_score ( y_true , y_pred , average = None ) array([0.75, 0.5 , 0.5 ]) recall_score ( y_true , y_pred , average = None ) array([0.75, 0.33, 0.67]) f1_score ( y_true , y_pred , average = None ) array([0.75, 0.4 , 0.57]) \u518d\u8ba1\u7b97Macro-averaging\u548cMicro-averaging\uff1a $$ P_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{2} + \\frac{1}{2}) = 0.58 \\\\ R_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{3} + \\frac{2}{3}) = 0.58 \\\\ F_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{2}{5} + \\frac{4}{7}) = 0.57 $$ \u6ce8\u610f\uff1a\u5728 sklearn \u4e2d\uff0c$F_\\text{macro}$\u548c$F_{\\text{mirco}}$\u7684\u8ba1\u7b97\u65b9\u5f0f\u90fd\u662f\u7b97\u672f\u5e73\u5747\uff0c\u5e76\u4e0d\u662f\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u7684\u8c03\u548c\u5e73\u5747\u3002 print ( precision_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' )) 0.5833333333333334 0.5833333333333334 0.5833333333333334 $$ P_{\\text {micro}} = \\frac{3+1+2}{4+2+4} = 0.6 \\\\ R_{\\text {micro}} = \\frac{3+1+2}{4+3+3} = 0.6 \\\\ F_{\\text {micro}} = 0.6 $$ print ( precision_score ( y_true , y_pred , average = 'micro' ) ) print ( recall_score ( y_true , y_pred , average = 'micro' ) ) print ( f1_score ( y_true , y_pred , average = 'micro' ) ) 0.6 0.6 0.6 \u5728\u4e0a\u8ff0\u6570\u636e\u4e2d\uff0c\u5404\u5206\u7c7b\u7684\u6743\u91cd\u5206\u522b\u4e3a\uff1a 0 \u7c7b\uff1a4\u3001 1 \u7c7b\uff1a3\u3001 2 \u7c7b\uff1a3\uff0c\u603b\u6743\u91cd\u4e3a10\u3002\u90a3\u4e48\uff0c\u52a0\u6743\u7684macro\u5e73\u5747\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{2}\\times3 + \\frac{1}{2}\\times3) = 0.6 \\\\ R_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{3}\\times3 + \\frac{2}{3}\\times3) = 0.6 \\\\ F_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{2}{5}\\times3 + \\frac{4}{7}\\times3) = 0.59 $$ print ( precision_score ( y_true , y_pred , average = 'weighted' ) ) print ( recall_score ( y_true , y_pred , average = 'weighted' ) ) print ( f1_score ( y_true , y_pred , average = 'weighted' ) ) 0.6 0.6 0.5914285714285714 F-beta $$ F_{\\beta} = \\frac{(1+\\beta^2)\\times P\\times R}{\\beta^2\\times P + R} $$ fbeta_score ( y_true , y_pred , beta , labels = None , pos_label = 1 , average = \u2019 binary \u2019 , sample_weight = None ) \u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807 classification_report \u51fd\u6570\u548c precision_recall_fscore_support \u51fd\u6570\u90fd\u53ef\u4ee5\u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807\u3002 classification_report \u51fd\u6570\u66f4\u9f50\u5168\u548c\u65b9\u4fbf\u4e00\u4e9b\u3002 classification_report classification_report ( y_true , y_pred , labels = None , target_names = None , sample_weight = None , digits = 2 , output_dict = False ) - labels : \u9009\u62e9\u5c55\u793a\u5206\u6570\u4fe1\u606f\u7684\u7c7b\u522b \uff0c \u9ed8\u8ba4\u4e3aNone \uff0c \u5c55\u793a\u6240\u6709\u7c7b\u522b - target_names \uff1a label\u7684\u522b\u540d - digits \uff1a \u5c0f\u6570\u7cbe\u5ea6 \uff0c \u4ec5\u5f53output_dict = False\u65f6\u6709\u6548 - output_dict \uff1a \u9ed8\u8ba4\u4e3aFalse \uff0c \u8fd4\u56de\u5b57\u7b26\u4e32 \uff0c \u82e5\u4e3aTrue \uff0c \u8fd4\u56dedict from sklearn.metrics import classification_report y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( classification_report ( y_true , y_pred , target_names = [ \"A\" , \"B\" , \"C\" ]) ) precision recall f1-score support A 0.75 0.75 0.75 4 B 0.50 0.33 0.40 3 C 0.50 0.67 0.57 3 accuracy 0.60 10 macro avg 0.58 0.58 0.57 10 weighted avg 0.60 0.60 0.59 10 precision_recall_fscore_support precision_recall_fscore_support ( y_true , y_pred , beta = 1.0 , labels = None , pos_label = 1 , average = None , warn_for = ( \u2018 precision \u2019 , \u2019 recall \u2019 , \u2019 f - score \u2019 ), sample_weight = None ) from sklearn.metrics import precision_recall_fscore_support y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( precision_recall_fscore_support ( y_true , y_pred , average = 'macro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'micro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'weighted' )) (0.5833333333333334, 0.5833333333333334, 0.5738095238095239, None) (0.6, 0.6, 0.6, None) (0.6, 0.6, 0.5914285714285714, None) P-R\u66f2\u7ebf precision_recall_curve ( y_true , probas_pred , pos_label = None , sample_weight = None ) import numpy as np from sklearn.metrics import precision_recall_curve y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) precision , recall , thresholds = precision_recall_curve ( y_true , y_scores ) # precision, recall, thresholds = precision_recall_curve(y_true, y_scores, # pos_label=0) print ( thresholds ) print ( precision ) print ( recall ) [0.35 0.4 0.8 ] [0.67 0.5 1. 1. ] [1. 0.5 0.5 0. ] \u6709\u4e86\u5404\u4e2a\u9608\u503c\u6240\u5bf9\u5e94\u7684 precision \u548c recall \u6570\u636e\uff0c\u53ef\u4ee5\u5feb\u901f\u7b2c\u7ed8\u5236\u4e00\u4e2a\u7b80\u5355\u7684P-R\u66f2\u7ebf\u56fe\uff1a sklearn \u63d0\u4f9b\u4e86 plot_precision_recall_curve \u51fd\u6570\uff0c\u53ef\u4ee5\u5feb\u901f\u5730\u7ed8\u5236P-R\u66f2\u7ebf\u56fe\uff1a plot_precision_recall_curve ( estimator , X , y , sample_weight = None , response_method = 'auto' , name = None , ax = None , kwargs ) from sklearn.metrics import plot_precision_recall_curve from sklearn import svm , datasets from sklearn.model_selection import train_test_split import numpy as np from sklearn.metrics import plot_precision_recall_curve import matplotlib.pyplot as plt iris = datasets . load_iris () X = iris . data y = iris . target # Add noisy features random_state = np . random . RandomState ( 0 ) n_samples , n_features = X . shape X = np . c_ [ X , random_state . randn ( n_samples , 200 * n_features )] # Limit to the two first classes, and split into training and test X_train , X_test , y_train , y_test = train_test_split ( X [ y < 2 ], y [ y < 2 ], test_size =. 5 , random_state = random_state ) # Create a simple classifier classifier = svm . LinearSVC ( random_state = random_state ) classifier . fit ( X_train , y_train ) y_score = classifier . decision_function ( X_test ) disp = plot_precision_recall_curve ( classifier , X_test , y_test ) disp . ax_ . set_title ( '2-class Precision-Recall curve' ) Text(0.5, 1.0, '2-class Precision-Recall curve') ROC\u66f2\u7ebf roc_curve ( y_true , y_score , pos_label = None , sample_weight = None , drop_intermediate = True ) import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , scores , pos_label = 2 ) print ( thresholds ) print ( fpr ) print ( tpr ) [1.8 0.8 0.4 0.35 0.1 ] [0. 0. 0.5 0.5 1. ] [0. 0.5 0.5 1. 1. ] \u8ba1\u7b97AUC \u5728 sklearn \u4e2d\uff0c\u8ba1\u7b97AUC\u6709\u4e24\u4e2a\u51fd\u6570\uff1a auc \u3001 roc_auc_score \u3002 auc \u662f\u4f7f\u7528\u68af\u5f62\u9762\u79ef\u516c\u5f0f\u8ba1\u7b97AUC\uff0c\u9700\u8981\u4f20\u5165 fpr \u3001 tpr \u53c2\u6570\uff1b\u800c roc_auc_score \u5219\u662f\u76f4\u63a5\u4f20\u5165 y_true \u3001 y_score \u53c2\u6570\u5c31\u53ef\u4ee5\u5f97\u51faAUC\u3002 roc_auc_score ( y_true , y_score , average = \u2019 macro \u2019 , sample_weight = None , max_fpr = None ) auc ( x , y , reorder = \u2019 deprecated \u2019 ) import numpy as np from sklearn.metrics import roc_auc_score y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) roc_auc_score ( y_true , y_scores ) 0.75 import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) pred = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , pred , pos_label = 2 ) metrics . auc ( fpr , tpr ) 0.75 Average Precision average_precision_score ( y_true , y_score , average = 'macro' , pos_label = 1 , sample_weight = None ) $$ \\text{AP} = \\sum_n (R_n - R_{n-1}) P_n $$ \u5176\u4e2d\uff0c$P_n$ \u548c $R_n$ \u662f\u7b2c$n$\u4e2a\u9608\u503c\u5904\u7684precision\u548crecall\u3002 \u8be5\u8ba1\u7b97\u516c\u5f0f\u4e0e\u4f7f\u7528\u68af\u5f62\u516c\u5f0f\u7cbe\u786e\u8ba1\u7b97\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u4e0d\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5728\u8fde\u7eed\u7684\u573a\u5408\uff0c\u8be5\u516c\u5f0f\u5c31\u662f\u4e00\u4e2a\u5b9a\u79ef\u5206\u3002\u5728sklearn\u4e2d\uff0c\u6b64\u5b9e\u73b0\u672a\u8fdb\u884c\u63d2\u503c\uff0c\u56e0\u4e3a\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u53ef\u80fd\u4f7f\u7ed3\u679c\u8fc7\u4e8e\u4e50\u89c2\u3002 \u6ce8\u610f\uff1a\u6b64\u5b9e\u73b0\u4ec5\u9650\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\u6216\u8005 multilabel classification\u4efb\u52a1\u3002 brier score brier_score_loss ( y_true , y_prob , sample_weight = None , pos_label = None ) Brier\u5206\u6570\u6700\u5e38\u89c1\u7684\u8868\u8ff0\u662f $$ B S=\\frac{1}{N} \\sum_{t=1} {N}\\left(f_{t}-o_{t}\\right) $$ \u5176\u4e2d\uff0c$f_{t}$\u662f\u88ab\u9884\u6d4b\u7684\u6982\u7387\uff0c$o_{t}$\u662f\u4e8b\u4ef6\u5728$t$\u65f6\u523b\u7684\u5b9e\u9645\u7ed3\u679c\uff08$o_{t}=0$ \u4e8b\u4ef6\u6ca1\u6709\u53d1\u751f\uff0c$o_{t}=1$ \u4e8b\u4ef6\u53d1\u751f\uff09\uff0c$N$\u662f\u9884\u6d4b\u5b9e\u4f8b\u6570\u3002\u5b9e\u9645\u4e0a\uff0c Brier\u5206\u6570\u5c31\u662f\u6240\u6709\u6837\u672c\u7684 \u9884\u6d4b\u6982\u7387 \u4e0e \u5b9e\u9645\u7ed3\u679c \u4e4b\u95f4\u7684\u5747\u65b9\u5dee\u3002 Brier\u5206\u6570\u8d8a\u5c0f\u8d8a\u597d\uff0c\u56e0\u6b64\u547d\u540d\u4e3a\u201c loss\u201d\u3002Brier\u5206\u6570\u7684\u53d6\u503c\u8303\u56f4\u57280\u52301\u4e4b\u95f4\u3002\u6b64\u516c\u5f0f\u4e3b\u8981\u7528\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u4f46 Brier \u5206\u6570\u7684 \u539f\u59cb\u5b9a\u4e49 \u662f\u9002\u7528\u4e8e\u591a\u5206\u7c7b\u4efb\u52a1\u7684\u3002 from sklearn.metrics import brier_score_loss y_true = [ 0 , 1 , 1 ] y_prob = [ 1 , 1 , 1 ] # pos_label\u6307\u660e\u4e86y_prob\u662f\u54ea\u4e2alabel\u7684\u6982\u7387 brier_score_loss ( y_true , y_prob , sample_weight = None , pos_label = 1 ) 0.3333333333333333 cohen kappa score dcg score hamming loss hamming_loss ( y_true , y_pred , labels = None , sample_weight = None ) $$ \\text{Hamming Loss}=\\frac{1}{N}\\sum_{i=1}^N\\frac{\\text{XOR}(Y_{i,j}, P_{i,j})}{L} $$ $N$ \u662f\u6837\u672c\u7684\u6570\u91cf\uff0c$L$ \u662f\u6807\u7b7e\u7684\u4e2a\u6570\uff0c$Y_{i,j}$ \u662f\u7b2c$i$\u4e2a\u9884\u6d4b\u7ed3\u679c\u4e2d\u7b2c$j$\u4e2a\u5206\u91cf\u7684\u771f\u5b9e\u503c\uff0c$P_{i,j}$ \u662f\u7b2c$i$\u4e2a\u9884\u6d4b\u7ed3\u679c\u4e2d\u7b2c$j$\u4e2a\u5206\u91cf\u7684\u9884\u6d4b\u503c\uff0c$\\text{XOR}$\u662f\u6291\u6216\uff0c$\\text{XOR}(0,1)=\\text{XOR}(1,0)=1$\uff0c$\\text{XOR}(0,0)=\\text{XOR}(1,1)=0$\u3002 Hamming Loss\u662f\u7528\u6765\u8ba1\u7b97\u591a\u6807\u7b7e\u5206\u7c7b (Multi-label classification) \u6a21\u578b\u7cbe\u5ea6\u7684\u3002 \u5728multiclass\u4efb\u52a1\u4e2d, Hamming loss \u7b49\u4ef7\u4e8e zero_one_loss\uff08 normalize=True \uff09 \u3002 \u5728multilabel\u4efb\u52a1\u4e2d, Hamming loss \u548c zero-one loss \u6709\u70b9\u4e0d\u540c\u3002zero-one loss\u4f1a\u8003\u8651\u6837\u672c\u771f\u5b9elabel\u7684\u96c6\u5408\u548c\u9884\u6d4blabel\u7684\u96c6\u5408\u662f\u5426\u5b8c\u5168\u4e00\u81f4\u3002\u53ea\u6709\u5b8c\u5168\u4e00\u81f4\u65f6\uff0czero-one loss \u4e3a0\u3002\u4f46 Hamming loss \u5219\u6ca1\u6709\u8fd9\u4e48\u4e25\u683c\uff0c\u5b83\u53ea\u60e9\u7f5a\u5355\u4e2a\u6807\u7b7e\u3002 Hamming loss \u662f zero-one loss\uff08 normalize=True \uff09\u7684\u4e0a\u9650\uff0cHamming loss\u7684\u503c\u603b\u662f\u4f4d\u4e8e0\u548c1\u4e4b\u95f4\u3002 \u4f8b\u5b50\uff1a\u4e09\u4e2a\u6837\u672c $$ Y_{1}=(0,1,1,1,0), P_{1}=(1,1,1,0,0) $$ $$ Y_{2}=(1,0,0,1,1), P_{2}=(1,0,0,0,1) $$ $$ Y_{3}=(1,1,0,0,0), P_{3}=(1,0,1,0,1) $$ $$ \\text{HammingLoss}=\\frac{1}{3}\\times\\frac{2+1+3}{5}=0.4 $$ from sklearn.metrics import hamming_loss import numpy as np y_true = np . array ([[ 0 , 1 ], [ 1 , 1 ]]) y_pred = np . zeros (( 2 , 2 )) print ( y_true , \" \\n \" ) print ( y_pred ) # \u4e00\u51712\u4e2a\u6837\u672c \u6bcf\u4e2a\u6837\u672c\u67092\u4e2alabel # \u53ea\u67091\u4e2alabel\u9884\u6d4b\u6b63\u786e \ud83d\udc49 \u56e0\u6b64 loss = 3/4 hamming_loss ( y_true , y_pred ) [[0 1] [1 1]] [[0. 0.] [0. 0.]] 0.75 Hinge loss https://zh.wikipedia.org/wiki/Hinge_loss jaccard score jaccard_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) \u6570\u5b66\u5b9a\u4e49\u53c2\u8003\u4e8e statisticshowto-accardindex \u3002 jaccard_similarity_score \u51fd\u6570\u4f1a\u8ba1\u7b97\u4e24\u5bf9label\u96c6\u4e4b\u95f4\u7684Jaccard\u76f8\u4f3c\u5ea6\u7cfb\u6570\u7684\u5e73\u5747\u503c\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\u6216\u603b\u548c\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3aJaccard index\u3002 \u7b2c$i$\u4e2a\u6837\u672c\u7684Jaccard\u76f8\u4f3c\u5ea6\u7cfb\u6570\uff08Jaccard similarity coefficient\uff09\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a $$ J(y_i, \\hat{y}_i) = \\frac{|y_i \\cap \\hat{y}_i|}{|y_i \\cup \\hat{y}_i|}. $$ \u5176\u4e2d\uff0c\u771f\u5b9e\u6807\u7b7e\u96c6\u4e3a$y_i$\uff0c\u9884\u6d4b\u6807\u7b7e\u96c6\u4e3a\uff1a$\\hat{y}_j$\u3002 \u4e8c\u5206\u7c7b\u7684\u60c5\u51b5\uff1a from sklearn.metrics import jaccard_score y_true = [ 0 , 1 , 1 ] y_pred = [ 1 , 1 , 1 ] # (0/2 + 1/1 + 1/1)*(1/3) = 2/3 print ( jaccard_score ( y_true , y_pred , pos_label = 1 )) # (0/2)*(1/1) = 0 print ( jaccard_score ( y_true , y_pred , pos_label = 0 )) 0.6666666666666666 0.0 multilabel\u7684\u60c5\u51b5: import numpy as np y_true = np . array ([[ 0 , 1 , 1 ], [ 1 , 1 , 0 ]]) y_pred = np . array ([[ 1 , 1 , 1 ], [ 1 , 0 , 0 ]]) print ( jaccard_score ( y_true , y_pred , average = 'samples' )) # 0.5833333333333333 # a = jaccard_score(y_true[0], y_pred[0], pos_label=1) # b = jaccard_score(y_true[1], y_pred[1], pos_label=1) # (a+b)/2 = 0.5833333333333333 print ( jaccard_score ( y_true , y_pred , average = 'macro' )) # 0.6666666666666666 # label\u95ee\u9898\u8f6c\u6362\u4e3a3\u4e2a\u4e8c\u5206\u7c7b # (1/2 + 1/2 + 1/1)/3 = 0.6666666666666666 print ( jaccard_score ( y_true , y_pred , average = 'micro' )) # 0.6 # label\u95ee\u9898\u8f6c\u6362\u4e3a3\u4e2a\u4e8c\u5206\u7c7b # (1 + 1 + 1) / (2 + 2 + 1) = 0.6 print ( jaccard_score ( y_true , y_pred , average = None )) 0.5833333333333333 0.6666666666666666 0.6 [0.5 0.5 1. ] \u591a\u5206\u7c7b\u7684\u60c5\u51b5: y_pred = [ 0 , 2 , 1 , 2 ] y_true = [ 0 , 1 , 2 , 2 ] # \u591a\u5206\u7c7b average \u53c2\u6570\u4e0d\u80fd\u4f7f\u7528 \u2018samples\u2019 print ( jaccard_score ( y_true , y_pred , average = None )) print ( jaccard_score ( y_true , y_pred , average = \"macro\" )) # 0.4444444444444444 # sum(jaccard_score(y_true, y_pred, average=None))/3 print ( jaccard_score ( y_true , y_pred , average = \"micro\" )) # 0.3333333333333333 # \u7b2c\u4e00\u4e2a\u5206\u7c7b 0 \u5339\u914d 1\u4e2a \u57fa\u6570\u4e3a1 # \u7b2c\u4e8c\u4e2a\u5206\u7c7b 1 \u5339\u914d 0\u4e2a \u57fa\u6570\u4e3a2 # \u7b2c\u4e8c\u4e2a\u5206\u7c7b 3 \u5339\u914d 1\u4e2a \u57fa\u6570\u4e3a3 # (1+0+1)/(1+2+3) = 0.3333333333333333 [1. 0. 0.33] 0.4444444444444444 0.3333333333333333 log loss log_loss ( y_true , y_pred , eps = 1e-15 , normalize = True , sample_weight = None , labels = None ) Log loss\u4e5f\u88ab\u79f0\u4e3a logistic \u56de\u5f52\u635f\u5931\uff0c\u6216\u8005\u4ea4\u53c9\u71b5\u635f\u5931(cross-entropy loss)\uff0c\u7528\u4e8e\u6982\u7387\u4f30\u8ba1\u3002\u5b83\u901a\u5e38\u7528\u5728(multinomial)\u7684LR\u548c\u795e\u7ecf\u7f51\u7edc\u4e0a\uff0c\u4ee5\u6700\u5927\u671f\u671b\uff08EM: expectation-maximization\uff09\u7684\u53d8\u79cd\u7684\u65b9\u5f0f\uff0c\u7528\u4e8e\u8bc4\u4f30\u4e00\u4e2a\u5206\u7c7b\u5668\u7684\u6982\u7387\u8f93\u51fa\uff0c\u800c\u975e\u8fdb\u884c\u79bb\u6563\u9884\u6d4b\u3002 \u5bf9\u4e8e\u4e8c\u5206\u7c7b\uff0c\u771f\u5b9e\u7c7b\u522b\u4e3a\uff1a$y\u2208{0,1}$\uff0c\u6982\u7387\u4f30\u8ba1\u4e3a\uff1a$p=P(y=1)$\u3002\u5355\u4e2a\u6837\u672c\u7684log loss\u4e3a\uff1a $$ L_{\\log}(y, p) = -\\log \\operatorname{P}(y|p) = -\\left( y \\log (p) + (1 - y) \\log (1 - p) \\right) $$ \u4e5f\u5c31\u662f\uff1a $$ L_{\\log}(y, p) = \\begin{cases} -\\log(p) &, \\text{if} y=1 \\\\ -\\log(1-p) &, \\text{if} y=0 \\\\ \\end{cases} $$ \u4e0b\u9762\u4e24\u5e45\u56fe\u5c55\u793a\u4e86\u771f\u5b9e\u7c7b\u522b\u4e3a1\u548c0\u65f6\uff0cLog Loss\u53d6\u503c\u968f\u7740 $p$ \u589e\u5927\u7684\u53d8\u5316\u8d8b\u52bf\u3002\u663e\u7136\uff0c\u5f53\u771f\u5b9e\u7c7b\u522b\u4e3a1\uff0c$p$\u8d8a\u5927\uff0c\u635f\u5931\u5e94\u8be5\u8d8a\u5c0f\uff1b\u5f53\u771f\u5b9e\u7c7b\u522b\u4e3a0\uff0c$p$\u8d8a\u5927\uff0c\u635f\u5931\u5e94\u8be5\u8d8a\u5927\u3002 \u5f53\u6269\u5c55\u5230\u591a\u5143\u5206\u7c7b\uff08multiclass\uff09\u65f6\u3002\u53ef\u4ee5\u5c06\u6837\u672c\u7684 true label \u7f16\u7801\u6210 1-of-K \u4e2a\u4e8c\u5143\u6307\u793a\u5668\u77e9\u9635$Y$\uff0c\u5982\u679c\u4ecelabel K\u96c6\u5408\u4e2d\u53d6\u51fa\u7684\u6837\u672ci\uff0c\u5bf9\u5e94\u7684label\u4e3ak\uff0c\u5219$y_{i,k}=1$\uff0c$P$\u4e3a\u6982\u7387\u4f30\u8ba1\u77e9\u9635\uff0c$p_{i,k} = \\operatorname{P}(t_{i,k} = 1)$\u3002\u6574\u4e2a\u96c6\u5408\u7684log loss\u8868\u793a\u5982\u4e0b\uff1a $$ L_{\\log}(Y, P) = -\\log \\operatorname{P}(Y|P) = - \\frac{1}{N} \\sum_{i=0}^{N-1} \\sum_{k=0}^{K-1} y_{i,k} \\log p_{i,k} $$ from sklearn.metrics import log_loss import numpy as np y_true = [ 1 , 0 , 1 , 0 ] y_pred = [ 0.8 , 0.2 , 0.85 , 0.6 ] loss_1 = log_loss ( y_true , y_pred , normalize = False ) loss_2 = - np . log ( 0.8 ) - np . log ( 0.8 ) - np . log ( 0.85 ) - np . log ( 0.4 ) print ( \"loss_1:\" , loss_1 ) print ( \"loss_2:\" , loss_2 ) loss_1 = log_loss ( y_true , y_pred , normalize = True ) loss_2 = ( - np . log ( 0.8 ) - np . log ( 0.8 ) - np . log ( 0.85 ) - np . log ( 0.4 )) / 4 print ( \"loss_1:\" , loss_1 ) print ( \"loss_2:\" , loss_2 ) loss_1: 1.5250967640003492 loss_2: 1.5250967640003492 loss_1: 0.3812741910000873 loss_2: 0.3812741910000873 matthews corrcoef http://d0evi1.com/sklearn/model_evaluation/ zero one loss zero_one_loss ( y_true , y_pred , normalize = True , sample_weight = None ) 0-1\u635f\u5931\u5f88\u7b80\u5355\uff0c\u5982\u679c\u5404\u4e2a\u6837\u672c\u6743\u91cd\u76f8\u7b49\uff0c\u90a3\u4e48\u635f\u5931\u5c31\u662f\u771f\u5b9e\u503c\u548c\u9884\u6d4b\u503c\u4e0d\u76f8\u7b49\u7684\u4e2a\u6570\u6c42\u548c\u3002 \u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c zero_one_loss \u7684\u7ed3\u679c\u4f1a\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\uff1a \u5176\u4e2d\uff0c$w_i$\u662f\u6743\u91cd\u3002 from sklearn.metrics import zero_one_loss y_true = [ 0 , 1 , 0 , 0 , 1 , 0 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 ] weight = [ 1 , 1 , 1 , 1 , 1 , 2 ] print ( zero_one_loss ( y_true , y_pred , normalize = False , sample_weight = weight )) print ( zero_one_loss ( y_true , y_pred , normalize = True , sample_weight = weight )) 3 0.4285714285714286 \u5982\u679c\u662f multilabel \u5206\u7c7b\u4efb\u52a1\uff0c\u771f\u5b9e\u503c\u7684label\u548c\u9884\u6d4b\u503c\u7684label\u8981\u4e25\u683c\u5339\u914d\uff0c0-1\u635f\u5931\u624d\u4e3a0\u3002 y_true = [[ 0 , 1 , 1 ],[ 1 , 1 , 0 ],[ 1 , 0 , 0 ]] y_pred = [[ 0 , 1 , 1 ],[ 0 , 1 , 1 ],[ 1 , 0 , 1 ]] zero_one_loss ( y_true , y_pred , normalize = False ) 2","title":"11.2.\u8bc4\u4ef7\u6307\u6807-\u5206\u7c7b"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#_1","text":"sklearn\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u8bc4\u4f30\u6307\u6807\u53ef\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\uff1a \u51fd\u6570 \u8bf4\u660e accuracy_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97accuracy balanced_accuracy_score(y_true, y_pred) \u2705 \u8ba1\u7b97 balanced accuracy precision_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 precision recall_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 recall f1_score(y_true, y_pred[, labels, \u2026]) \u2705 \u8ba1\u7b97 F1 score fbeta_score(y_true, y_pred, beta[, \u2026]) \u2705 \u8ba1\u7b97 F-beta score classification_report(y_true, y_pred) \u2705 \u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807 precision_recall_fscore_support(\u2026) \u2705 \u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u522b\u7684 precision\u3001recall\u3001F-measure\u3001support confusion_matrix(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97\u6df7\u6dc6\u77e9\u9635 precision_recall_curve(y_true, \u2026) \u2705 \u8ba1\u7b97\u4e0d\u540c\u6982\u7387\u9608\u503c\u7684 precision \u548c recall roc_curve(y_true, y_score[, \u2026]) \u2705 \u8ba1\u7b97 Receiver operating characteristic (ROC) roc_auc_score(y_true, y_score[, \u2026]) \u2705 \u8ba1\u7b97 ROC \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff08AUC\uff09 auc(x, y) \u2705 \u8ba1\u7b97 AUC\uff0c\u4f7f\u7528\u68af\u5f62\u8ba1\u7b97\u516c\u5f0f average_precision_score(y_true, y_score) \u2705 \u8ba1\u7b97average precision (AP) brier_score_loss(y_true, y_prob[, \u2026]) \u2705 \u8ba1\u7b97 Brier score cohen_kappa_score(y1, y2[, labels, \u2026]) \ud83d\udd32 Cohen\u2019s kappa: a statistic that measures inter-annotator agreement dcg_score(y_true, y_score[, k, \u2026]) \ud83d\udd32 \u8ba1\u7b97Discounted Cumulative Gain hamming_loss(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 average Hamming loss hinge_loss(y_true, pred_decision[, \u2026]) \ud83d\udd32 \u8ba1\u7b97 Average hinge loss (non-regularized) jaccard_score(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97 Jaccard similarity coefficient score log_loss(y_true, y_pred[, eps, \u2026]) \u2705 Log loss, aka logistic loss or cross-entropy loss matthews_corrcoef(y_true, y_pred[, \u2026]) \ud83d\udd32 \u8ba1\u7b97 the Matthews correlation coefficient (MCC) multilabel_confusion_matrix(y_true, \u2026) \u2705 Compute a confusion matrix for each class or sample ndcg_score(y_true, y_score[, k, \u2026]) \ud83d\udd32 Compute Normalized Discounted Cumulative Gain. zero_one_loss(y_true, y_pred[, \u2026]) \u2705 \u8ba1\u7b97Zero-one\u5206\u7c7b\u635f\u5931","title":"\u8bc4\u4ef7\u6307\u6807"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#_2","text":"\u53ea\u80fd\u7528\u4e8e\u4e8c\u5206\u7c7b\uff1a precision_recall_curve roc_curve brier_score_loss \u53ea\u80fd\u7528\u4e8e\u591a\u5206\u7c7b\uff1a confusion_matrix balanced_accuracy_score hinge_loss cohen_kappa_score matthews_corrcoef \u591a\u5206\u7c7b\u548c\u591a\u6807\u7b7e\uff1a accuracy_score recall_score precision_score f1_score fbeta_score classification_report precision_recall_fscore_support hamming_loss jaccard_similarity_score log_loss zero_one_loss \u4e8c\u5206\u7c7b\u548c\u591a\u6807\u7b7e\uff1a average_precision_score roc_auc_score ranking\uff1a dcg_score ndcg_score","title":"\u5e94\u7528\u573a\u666f"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#accuracy","text":"$$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i) $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219\u4e00\u822c\u5316\u7684\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{\\sum_{i=0}^{n_\\text{samples}-1}w_i} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i)w_i $$ from sklearn.metrics import accuracy_score accuracy_score ( y_true , y_pred , normalize = True , sample_weight = None ) normalize : \u5982\u679c False \uff0c\u5219\u8fd4\u56de\u5206\u7c7b\u6b63\u786e\u7684\u6837\u672c\u6570\u91cf\uff0c\u5982\u679c True \uff0c\u5219\u8fd4\u56de\u603b\u4f53\u7684\u6b63\u786e\u7387\u3002 y_true = [ 0 , 1 , 2 , 3 ] y_pred = [ 0 , 2 , 1 , 3 ] print ( accuracy_score ( y_true , y_pred )) print ( accuracy_score ( y_true , y_pred , normalize = False )) print ( accuracy_score ( y_true , y_pred , sample_weight = ( 1 , 1 , 1 , 10 ))) 0.5 2 0.8461538461538461","title":"accuracy"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#balanced-accuracy","text":"$$ \\texttt{balanced accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{class}} \\sum_{i=1}^{n_\\text{class}} \\text{accuracy}_i $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219$\\text{accuracy}_i$\u5e94\u8be5\u5148\u6309\u6743\u91cd\u8ba1\u7b97\u3002 from sklearn.metrics import balanced_accuracy_score balanced_accuracy_score ( y_true , y_pred , sample_weight = None , adjusted = False ) adjusted : The best value is 1 and the worst value is 0 when adjusted=False . When true, the result is adjusted for chance, so that random performance would score 0, and perfect performance scores 1. y_true = [ 0 , 1 , 0 , 0 , 1 , 0 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 ] balanced_accuracy_score ( y_true , y_pred ) 0.625","title":"balanced accuracy"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#confusion-matrix","text":"from toolkit import H from sklearn.metrics import confusion_matrix from sklearn.metrics import multilabel_confusion_matrix from sklearn.metrics import plot_confusion_matrix from sklearn.metrics import ConfusionMatrixDisplay import numpy as np confusion_matrix ( y_true , y_pred , labels = None , sample_weight = None , normalize = None ) y_true = [ 0 , 1 , 0 , 0 , 1 , 0 , 2 , 1 , 2 , 2 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 , 2 , 1 , 0 , 2 ] confusion_matrix ( y_true , y_pred , labels = [ 1 , 0 , 2 ]) array([[2, 1, 0], [1, 3, 0], [0, 1, 2]], dtype=int64)","title":"confusion matrix"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#multilabel-confusion-matrix","text":"multilabel_confusion_matrix ( y_true , y_pred , sample_weight = None , labels = None , samplewise = False ) y_true = [ \"cat\" , \"ant\" , \"cat\" , \"cat\" , \"ant\" , \"bird\" ] y_pred = [ \"ant\" , \"ant\" , \"cat\" , \"cat\" , \"ant\" , \"cat\" ] multilabel_confusion_matrix ( y_true , y_pred , labels = [ \"ant\" , \"bird\" , \"cat\" ]) y_true = np . array ([[ 1 , 0 , 1 ], [ 0 , 1 , 0 ]]) y_pred = np . array ([[ 1 , 0 , 0 ], [ 0 , 1 , 1 ]]) multilabel_confusion_matrix ( y_true , y_pred , samplewise = True ) array([[[1, 0], [1, 1]], [[1, 1], [0, 1]]], dtype=int64)","title":"multilabel confusion matrix"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#confusion-matrix_1","text":"confusion_matrix \u51fd\u6570\u548c multilabel_confusion_matrix \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7 labels \u53c2\u6570\u8bbe\u7f6elabel\u7684\u6392\u5217\u987a\u5e8f\u3002\u4f46\u5b83\u4eec\u7684\u8f93\u51fa\u662f ndarray \u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u6307\u660e\u771f\u5b9e\u503c\u3001\u9884\u6d4b\u503c\u4e0e\u884c\u3001\u5217\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u4f7f\u7528 plot_confusion_matrix \u51fd\u6570\u53ef\u4ee5\u628a\u6df7\u6dc6\u77e9\u9635\u8f93\u51fa\u4e3a\u56fe\u8868\uff0c\u5f97\u5230\u66f4\u76f4\u89c2\u7684\u6548\u679c\uff1a plot_confusion_matrix ( estimator , X , y_true , labels = None , sample_weight = None , normalize = None , display_labels = None , include_values = True , xticks_rotation = 'horizontal' , values_format = None , cmap = 'viridis' , ax = None ) \u8981\u6ce8\u610f\u7684\u662f\uff0c\u9700\u8981\u628a estimator \u4f20\u5165 plot_confusion_matrix \u51fd\u6570\u3002 import numpy as np import matplotlib.pyplot as plt from sklearn import svm , datasets from sklearn.model_selection import train_test_split # import some data to play with iris = datasets . load_iris () X = iris . data y = iris . target class_names = iris . target_names # Split the data into a training set and a test set X_train , X_test , y_train , y_test = train_test_split ( X , y , random_state = 0 ) # Run classifier, using a model that is too regularized (C too low) to see # the impact on the results classifier = svm . SVC ( kernel = 'linear' , C = 0.01 ) . fit ( X_train , y_train ) np . set_printoptions ( precision = 2 ) # Plot non-normalized confusion matrix disp = plot_confusion_matrix ( classifier , X_test , y_test , display_labels = class_names , cmap = plt . cm . Blues , include_values = True , normalize = None ) disp . ax_ . set_title ( \"Confusion matrix\" ) print ( disp . confusion_matrix ) plt . show () [[13 0 0] [ 0 10 6] [ 0 0 9]] \u901a\u8fc7 plot_confusion_matrix \u51fd\u6570\u8fd4\u56de\u7684 ConfusionMatrixDisplay \u5bf9\u8c61\u7684 ax_ \u5c5e\u6027\u53ef\u4ee5\u8bbf\u95ee Axes \u5bf9\u8c61\u3002 \u5982\u679c\u5df2\u6709\u6df7\u6dc6\u77e9\u9635\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ConfusionMatrixDisplay \u7c7b\u8f93\u51fa\u6df7\u6dc6\u77e9\u9635\u56fe\u3002 ConfusionMatrixDisplay ( confusion_matrix , display_labels ) ConfusionMatrixDisplay . plot ( include_values = True , cmap = 'viridis' , xticks_rotation = 'horizontal' , values_format = None , ax = None ) disp_2 = ConfusionMatrixDisplay ( disp . confusion_matrix , display_labels = [ 0 , 1 , 2 ]) . plot () # disp_2.figure_.savefig() disp_2 . figure_","title":"confusion matrix\u53ef\u89c6\u5316"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#_3","text":"\u4e00\u4e9b\u8bc4\u4ef7\u6307\u6807\u57fa\u672c\u4e0a\u662f\u4e3a\u4e8c\u5206\u7c7b\u4efb\u52a1\u5b9a\u4e49\u7684\uff08\u4f8b\u5982 f1_score\u3001roc_auc_score\uff09\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ec5\u8bc4\u4f30 positive label\u3002 \u5c06 binary metric \u62d3\u5c55\u5230 multiclass \u6216 multilabel \u95ee\u9898\u65f6\uff0c\u6570\u636e\u5c06\u88ab\u89c6\u4e3a\u4e8c\u5206\u7c7b\u95ee\u9898\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2ametric\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u90fd\u88ab\u62c6\u5206\u4e3a3\u4e2a\u4e8c\u5206\u7c7b\u4efb\u52a1\uff1a multiclass task: [1, 2, 3] multilabel task: [1, 0, 1] \u7136\u540e\u5404\u4e2a\u7c7b\u7684metric\u5c06\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f5c\u5747\u503c\u8fd0\u7b97\uff0c\u5f97\u5230\u7684\u5747\u503c\u5c06\u4f5c\u4e3a multiclass \u6216 multilabel \u95ee\u9898\u7684\u8bc4\u4ef7\u6307\u6807\u3002 \u5747\u503c\u8fd0\u7b97\u7684\u65b9\u5f0f\u901a\u8fc7 average \u53c2\u6570\u6307\u5b9a\u3002 macro \uff1a\u5404\u4e2a binary metrics \u4f5c\u7b80\u5355\u7684\u7b97\u672f\u5e73\u5747\uff0c\u6bcf\u4e2a\u7c7b\u522b\u5177\u6709\u76f8\u540c\u7684\u6743\u91cd\u3002 binary metrics \u7531\u5404\u7c7b\u7684\u6df7\u6dc6\u77e9\u9635\u5f97\u5230 \uff08\u6bcf\u4e2a\u7c7b\u6709\u4e00\u4e2a\u6df7\u6dc6\u77e9\u9635\uff09\u3002\u5728\u90a3\u4e9b\u5177\u6709\u4e0d\u9891\u7e41\u7c7b\u522b\uff0c\u4f46\u4e0d\u9891\u7e41\u7c7b\u4ecd\u7136\u91cd\u8981\u7684\u95ee\u9898\u4e0a\uff0cmacro-averaging\u662f\u7a81\u51fa\u5176\u6027\u80fd\u7684\u4e00\u79cd\u624b\u6bb5\u3002\u4f46\u53e6\u4e00\u65b9\u9762\uff0c\u6240\u6709\u7c7b\u522b\u540c\u6837\u91cd\u8981\u7684\u5047\u8bbe\u901a\u5e38\u662f\u4e0d\u771f\u5b9e\u7684\uff0c\u56e0\u6b64 macro-averaging \u5c06\u8fc7\u5ea6\u5f3a\u8c03\u4e0d\u9891\u7e41\u7c7b\u7684\u4f4e\u6027\u80fd\u3002 weighted \uff1a\u6bcf\u4e2a\u6837\u672c\u8d4b\u4e88\u4e00\u4e2a\u6743\u91cd\uff0c\u5404\u4e2a\u7c7b\u7684\u6743\u91cd\u53d6\u51b3\u4e8e\u5b83\u4eec\u6837\u672c\u7684\u6743\u91cd\u3002\u6240\u4ee5\u5b9e\u9645\u4e0a\uff0c weighted \u5e73\u5747\u662f\u52a0\u6743\u7684 macro \u5e73\u5747\u3002 micro \uff1a \u5404\u4e2a\u7c7b\u7684\u6df7\u6dc6\u77e9\u9635\u6c42\u548c\uff0c\u518d\u6839\u636e\u6837\u672c\u6570\u6c42\u5e73\u5747\u503c\uff08\u5404\u4e2a\u6837\u672c\u6709\u540c\u6837\u7684\u6743\u91cd\uff09\uff0c\u5f97\u5230\u5e73\u5747\u6df7\u6dc6\u77e9\u9635\uff0c\u6700\u540e\u6839\u636e\u5e73\u5747\u6df7\u6dc6\u77e9\u9635\u6c42\u51fametric\u3002\u5728 multilabel \u4efb\u52a1\u548c\u9700\u8981\u5ffd\u7565\u9891\u7e41\u7c7b\u7684 multiclass\u4efb\u52a1\u4e2d\uff0cMicro-averaging \u53ef\u80fd\u662f\u4f18\u5148\u9009\u62e9\u7684\u3002 samples \uff1a \u4ec5\u9002\u7528\u4e8e multilabel problems\u3002 \u5404\u4e2a binary metrics \u4f5c\u7684\u7b97\u672f\u5e73\u5747\uff0c binary metrics \u7531\u5404\u6837\u672c\u7684\u6df7\u6dc6\u77e9\u9635\u5f97\u5230 \uff08\u6bcf\u4e2a\u6837\u672c\u6709\u4e00\u4e2a\u6df7\u6dc6\u77e9\u9635\uff09\u3002\u5e76\u8fd4\u56de ( sample_weight -weighted) \u52a0\u6743\u5e73\u5747\u3002 None \uff1a\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u7684 score \u3002","title":"\u4ece\u4e8c\u5206\u7c7b\u5230\u591a\u5206\u7c7b\u3001\u591a\u6807\u7b7e"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#precisionrecallf1","text":"\u4e8c\u5206\u7c7b \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e8c\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\u7684precision\u3001recall\u3001F1\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\text{precision} = \\frac{TP}{TP+FP} $$ $$ \\text{recall} = \\frac{TP}{TP+FN} $$ $$ F1 = \\frac{2\\times\\text{precision}\\times \\text{recall}}{\\text{precision}+ \\text{recall}} $$ \u5982\u679c\u662f\u591a\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\uff0c\u5219\u53ef\u80fd\u4f7f\u7528\u5982\u4e0b\u8ba1\u7b97\u516c\u5f0f\uff1a Macro-averaging \u5b8f\u5e73\u5747\uff08Macro-averaging\uff09\u662f\u6307\u6240\u6709\u7c7b\u522b\u7684\u6bcf\u4e00\u4e2a\u7edf\u8ba1\u6307\u6807\u503c\u7684\u7b97\u672f\u5e73\u5747\u503c\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ {P_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} P_{i}} $$ $$ {R_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} R_{i}} $$ $$ {F_{\\text {macro}}=\\frac{2 \\times P_{\\text {macro}} \\times R_{\\text {macro}}}{P_{\\text {macro}}+R_{\\text {macro}}}} $$ Micro-averaging \u5fae\u5e73\u5747\uff08Micro-averaging\uff09\u662f\u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u793a\u4f8b\u4e0d\u5206\u7c7b\u522b\u8fdb\u884c\u7edf\u8ba1\u5efa\u7acb\u5168\u5c40\u6df7\u6dc6\u77e9\u9635\uff0c\u7136\u540e\u8ba1\u7b97\u76f8\u5e94\u7684\u6307\u6807\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\begin{aligned} P_{\\text {micro }}=\\frac{\\overline{T P}}{\\overline{T P}+\\overline{F P}}& =\\frac{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}}{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}+\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} F P_{i}} \\\\ &=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F P_{i}} \\end{aligned} $$ $$ {R_{\\text {micro}}=\\frac{\\overline{TP}}{\\overline{TP} + \\overline{F N}}=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F N_{i}}} $$ $$ {F_{\\text {micro}}=\\frac{2 \\times P_{\\text {micro}} \\times R_{\\text {micro}}}{P_{\\text {micro}}+R_{\\text {micro}}}} $$ \u5728 sklearn \u4e2d\uff0c precision_score \u3001 recall_score \u548c f1_score \u4e09\u4e2a\u51fd\u6570\u7684\u63a5\u53e3\u662f\u4e00\u81f4\uff0c\u5b83\u4eec\u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\u3002 precision_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) recall_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) f1_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) labels : list , optional\u3002\u53ef\u4ee5\u6392\u9664\u6570\u636e\u4e2d\u5b58\u5728\u7684label\uff0c\u800c\u5982\u679c\u8f93\u5165\u6570\u636e\u4e2d\u4e0d\u5b58\u5728\u7684label\uff0c\u5219\u4f1a\u4ee50\u586b\u5145\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c y_true \u548c y_pred \u4e2d\u7684\u6240\u6709label\u4f1a\u81ea\u52a8\u6392\u5e8f\u3002 pos_label : str or int , 1 by default\u3002\u5bf9\u4e8e\u4e8c\u5206\u7c7b\u6570\u636e\u6709\u6548\uff0c\u5982\u679c\u6570\u636e\u662f\u591a\u5206\u7c7b\u7684\uff0c\u8be5\u53c2\u6570\u5c06\u88ab\u5ffd\u7565\u3002 average : string, [None, 'binary' (default), 'micro', 'macro', 'samples','weighted'] \u3002\u5bf9\u4e8e\u591a\u7c7b\u3001\u591a\u6807\u7b7e\u6570\u636e\uff0c\u6b64\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u522b\u7684\u5206\u6570\u3002\u5426\u5219\u5c06\u6267\u884c\u6307\u5b9a\u7684\u5e73\u5747\u7c7b\u578b\u3002 'binary' : \u4ec5\u8fd4\u56de pos_label \u7684\u5206\u6570\uff0c\u4ec5\u5f53\u4e8c\u5206\u7c7b\u65f6\u624d\u9002\u7528\u3002 'micro' : \u8fd4\u56demicro\u5e73\u5747\u3002 'macro' : \u8fd4\u56demacro\u5e73\u5747\uff08\u672a\u52a0\u6743\uff0c\u5373\u672a\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff09 'weighted' : \u52a0\u6743\u7684macro\u5e73\u5747\uff0c\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4F1\u4e0d\u5728precision\u548crecall\u4e4b\u95f4\u3002 'samples' : \u8ba1\u7b97\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u6307\u6807\uff0c\u5e76\u627e\u5230\u5176\u5e73\u5747\u503c\uff0c\u4ec5\u5bf9\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u6709\u610f\u4e49\u3002 sample_weight : array-like of shape = [n_samples], optional\u3002Sample weights. \u5047\u8bbe\u73b0\u5728\u6709\u5982\u4e0b\u6570\u636e\uff1a y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] \u5bfc\u5165\u51fd\u6570\uff1a from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.metrics import f1_score from sklearn.metrics import confusion_matrix \u5148\u8ba1\u7b97\u51fa\u6df7\u6dc6\u77e9\u9635\u5982\u4e0b\uff1a confusion_matrix ( y_true , y_pred , labels = [ 0 , 1 , 2 ]) array([[3, 0, 1], [1, 1, 1], [0, 1, 2]], dtype=int64) \u6839\u636e\u516c\u5f0f\uff0c\u5404\u5206\u7c7b\u7684\u6307\u6807\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ R_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ F_{0} = \\frac{2\\times P_{0}\\times R_{0}}{P_{0} + R_{0}} = \\frac{3}{4} $$ $$ P_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{2} \\\\ R_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{3} \\\\ F_{1} = \\frac{2\\times P_{1}\\times R_{1}}{P_{1} + R_{1}} = \\frac{2}{5} $$ $$ P_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{4} \\\\ R_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{3} \\\\ F_{2} = \\frac{2\\times P_{2}\\times R_{2}}{P_{2} + R_{2}} = \\frac{4}{7} $$ \u5373 $$ P_{0} = \\frac{3}{4} P_{1}=\\frac{1}{2} P_{2}=\\frac{1}{2} \\\\ R_{0} = \\frac{3}{4} R_{1}=\\frac{1}{3} R_{2}=\\frac{2}{3} \\\\ F_{0} = \\frac{3}{4} F_{1}=\\frac{2}{5} F_{2}=\\frac{4}{7} $$ precision_score ( y_true , y_pred , average = None ) array([0.75, 0.5 , 0.5 ]) recall_score ( y_true , y_pred , average = None ) array([0.75, 0.33, 0.67]) f1_score ( y_true , y_pred , average = None ) array([0.75, 0.4 , 0.57]) \u518d\u8ba1\u7b97Macro-averaging\u548cMicro-averaging\uff1a $$ P_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{2} + \\frac{1}{2}) = 0.58 \\\\ R_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{3} + \\frac{2}{3}) = 0.58 \\\\ F_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{2}{5} + \\frac{4}{7}) = 0.57 $$ \u6ce8\u610f\uff1a\u5728 sklearn \u4e2d\uff0c$F_\\text{macro}$\u548c$F_{\\text{mirco}}$\u7684\u8ba1\u7b97\u65b9\u5f0f\u90fd\u662f\u7b97\u672f\u5e73\u5747\uff0c\u5e76\u4e0d\u662f\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u7684\u8c03\u548c\u5e73\u5747\u3002 print ( precision_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' )) 0.5833333333333334 0.5833333333333334 0.5833333333333334 $$ P_{\\text {micro}} = \\frac{3+1+2}{4+2+4} = 0.6 \\\\ R_{\\text {micro}} = \\frac{3+1+2}{4+3+3} = 0.6 \\\\ F_{\\text {micro}} = 0.6 $$ print ( precision_score ( y_true , y_pred , average = 'micro' ) ) print ( recall_score ( y_true , y_pred , average = 'micro' ) ) print ( f1_score ( y_true , y_pred , average = 'micro' ) ) 0.6 0.6 0.6 \u5728\u4e0a\u8ff0\u6570\u636e\u4e2d\uff0c\u5404\u5206\u7c7b\u7684\u6743\u91cd\u5206\u522b\u4e3a\uff1a 0 \u7c7b\uff1a4\u3001 1 \u7c7b\uff1a3\u3001 2 \u7c7b\uff1a3\uff0c\u603b\u6743\u91cd\u4e3a10\u3002\u90a3\u4e48\uff0c\u52a0\u6743\u7684macro\u5e73\u5747\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{2}\\times3 + \\frac{1}{2}\\times3) = 0.6 \\\\ R_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{3}\\times3 + \\frac{2}{3}\\times3) = 0.6 \\\\ F_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{2}{5}\\times3 + \\frac{4}{7}\\times3) = 0.59 $$ print ( precision_score ( y_true , y_pred , average = 'weighted' ) ) print ( recall_score ( y_true , y_pred , average = 'weighted' ) ) print ( f1_score ( y_true , y_pred , average = 'weighted' ) ) 0.6 0.6 0.5914285714285714","title":"precision\u3001recall\u3001F1"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#f-beta","text":"$$ F_{\\beta} = \\frac{(1+\\beta^2)\\times P\\times R}{\\beta^2\\times P + R} $$ fbeta_score ( y_true , y_pred , beta , labels = None , pos_label = 1 , average = \u2019 binary \u2019 , sample_weight = None )","title":"F-beta"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#_4","text":"classification_report \u51fd\u6570\u548c precision_recall_fscore_support \u51fd\u6570\u90fd\u53ef\u4ee5\u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807\u3002 classification_report \u51fd\u6570\u66f4\u9f50\u5168\u548c\u65b9\u4fbf\u4e00\u4e9b\u3002 classification_report classification_report ( y_true , y_pred , labels = None , target_names = None , sample_weight = None , digits = 2 , output_dict = False ) - labels : \u9009\u62e9\u5c55\u793a\u5206\u6570\u4fe1\u606f\u7684\u7c7b\u522b \uff0c \u9ed8\u8ba4\u4e3aNone \uff0c \u5c55\u793a\u6240\u6709\u7c7b\u522b - target_names \uff1a label\u7684\u522b\u540d - digits \uff1a \u5c0f\u6570\u7cbe\u5ea6 \uff0c \u4ec5\u5f53output_dict = False\u65f6\u6709\u6548 - output_dict \uff1a \u9ed8\u8ba4\u4e3aFalse \uff0c \u8fd4\u56de\u5b57\u7b26\u4e32 \uff0c \u82e5\u4e3aTrue \uff0c \u8fd4\u56dedict from sklearn.metrics import classification_report y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( classification_report ( y_true , y_pred , target_names = [ \"A\" , \"B\" , \"C\" ]) ) precision recall f1-score support A 0.75 0.75 0.75 4 B 0.50 0.33 0.40 3 C 0.50 0.67 0.57 3 accuracy 0.60 10 macro avg 0.58 0.58 0.57 10 weighted avg 0.60 0.60 0.59 10 precision_recall_fscore_support precision_recall_fscore_support ( y_true , y_pred , beta = 1.0 , labels = None , pos_label = 1 , average = None , warn_for = ( \u2018 precision \u2019 , \u2019 recall \u2019 , \u2019 f - score \u2019 ), sample_weight = None ) from sklearn.metrics import precision_recall_fscore_support y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( precision_recall_fscore_support ( y_true , y_pred , average = 'macro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'micro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'weighted' )) (0.5833333333333334, 0.5833333333333334, 0.5738095238095239, None) (0.6, 0.6, 0.6, None) (0.6, 0.6, 0.5914285714285714, None)","title":"\u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#p-r","text":"precision_recall_curve ( y_true , probas_pred , pos_label = None , sample_weight = None ) import numpy as np from sklearn.metrics import precision_recall_curve y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) precision , recall , thresholds = precision_recall_curve ( y_true , y_scores ) # precision, recall, thresholds = precision_recall_curve(y_true, y_scores, # pos_label=0) print ( thresholds ) print ( precision ) print ( recall ) [0.35 0.4 0.8 ] [0.67 0.5 1. 1. ] [1. 0.5 0.5 0. ] \u6709\u4e86\u5404\u4e2a\u9608\u503c\u6240\u5bf9\u5e94\u7684 precision \u548c recall \u6570\u636e\uff0c\u53ef\u4ee5\u5feb\u901f\u7b2c\u7ed8\u5236\u4e00\u4e2a\u7b80\u5355\u7684P-R\u66f2\u7ebf\u56fe\uff1a sklearn \u63d0\u4f9b\u4e86 plot_precision_recall_curve \u51fd\u6570\uff0c\u53ef\u4ee5\u5feb\u901f\u5730\u7ed8\u5236P-R\u66f2\u7ebf\u56fe\uff1a plot_precision_recall_curve ( estimator , X , y , sample_weight = None , response_method = 'auto' , name = None , ax = None , kwargs ) from sklearn.metrics import plot_precision_recall_curve from sklearn import svm , datasets from sklearn.model_selection import train_test_split import numpy as np from sklearn.metrics import plot_precision_recall_curve import matplotlib.pyplot as plt iris = datasets . load_iris () X = iris . data y = iris . target # Add noisy features random_state = np . random . RandomState ( 0 ) n_samples , n_features = X . shape X = np . c_ [ X , random_state . randn ( n_samples , 200 * n_features )] # Limit to the two first classes, and split into training and test X_train , X_test , y_train , y_test = train_test_split ( X [ y < 2 ], y [ y < 2 ], test_size =. 5 , random_state = random_state ) # Create a simple classifier classifier = svm . LinearSVC ( random_state = random_state ) classifier . fit ( X_train , y_train ) y_score = classifier . decision_function ( X_test ) disp = plot_precision_recall_curve ( classifier , X_test , y_test ) disp . ax_ . set_title ( '2-class Precision-Recall curve' ) Text(0.5, 1.0, '2-class Precision-Recall curve')","title":"P-R\u66f2\u7ebf"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#roc","text":"roc_curve ( y_true , y_score , pos_label = None , sample_weight = None , drop_intermediate = True ) import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , scores , pos_label = 2 ) print ( thresholds ) print ( fpr ) print ( tpr ) [1.8 0.8 0.4 0.35 0.1 ] [0. 0. 0.5 0.5 1. ] [0. 0.5 0.5 1. 1. ]","title":"ROC\u66f2\u7ebf"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#auc","text":"\u5728 sklearn \u4e2d\uff0c\u8ba1\u7b97AUC\u6709\u4e24\u4e2a\u51fd\u6570\uff1a auc \u3001 roc_auc_score \u3002 auc \u662f\u4f7f\u7528\u68af\u5f62\u9762\u79ef\u516c\u5f0f\u8ba1\u7b97AUC\uff0c\u9700\u8981\u4f20\u5165 fpr \u3001 tpr \u53c2\u6570\uff1b\u800c roc_auc_score \u5219\u662f\u76f4\u63a5\u4f20\u5165 y_true \u3001 y_score \u53c2\u6570\u5c31\u53ef\u4ee5\u5f97\u51faAUC\u3002 roc_auc_score ( y_true , y_score , average = \u2019 macro \u2019 , sample_weight = None , max_fpr = None ) auc ( x , y , reorder = \u2019 deprecated \u2019 ) import numpy as np from sklearn.metrics import roc_auc_score y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) roc_auc_score ( y_true , y_scores ) 0.75 import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) pred = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , pred , pos_label = 2 ) metrics . auc ( fpr , tpr ) 0.75","title":"\u8ba1\u7b97AUC"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#average-precision","text":"average_precision_score ( y_true , y_score , average = 'macro' , pos_label = 1 , sample_weight = None ) $$ \\text{AP} = \\sum_n (R_n - R_{n-1}) P_n $$ \u5176\u4e2d\uff0c$P_n$ \u548c $R_n$ \u662f\u7b2c$n$\u4e2a\u9608\u503c\u5904\u7684precision\u548crecall\u3002 \u8be5\u8ba1\u7b97\u516c\u5f0f\u4e0e\u4f7f\u7528\u68af\u5f62\u516c\u5f0f\u7cbe\u786e\u8ba1\u7b97\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u4e0d\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5728\u8fde\u7eed\u7684\u573a\u5408\uff0c\u8be5\u516c\u5f0f\u5c31\u662f\u4e00\u4e2a\u5b9a\u79ef\u5206\u3002\u5728sklearn\u4e2d\uff0c\u6b64\u5b9e\u73b0\u672a\u8fdb\u884c\u63d2\u503c\uff0c\u56e0\u4e3a\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u53ef\u80fd\u4f7f\u7ed3\u679c\u8fc7\u4e8e\u4e50\u89c2\u3002 \u6ce8\u610f\uff1a\u6b64\u5b9e\u73b0\u4ec5\u9650\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\u6216\u8005 multilabel classification\u4efb\u52a1\u3002","title":"Average Precision"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#brier-score","text":"brier_score_loss ( y_true , y_prob , sample_weight = None , pos_label = None ) Brier\u5206\u6570\u6700\u5e38\u89c1\u7684\u8868\u8ff0\u662f $$ B S=\\frac{1}{N} \\sum_{t=1} {N}\\left(f_{t}-o_{t}\\right) $$ \u5176\u4e2d\uff0c$f_{t}$\u662f\u88ab\u9884\u6d4b\u7684\u6982\u7387\uff0c$o_{t}$\u662f\u4e8b\u4ef6\u5728$t$\u65f6\u523b\u7684\u5b9e\u9645\u7ed3\u679c\uff08$o_{t}=0$ \u4e8b\u4ef6\u6ca1\u6709\u53d1\u751f\uff0c$o_{t}=1$ \u4e8b\u4ef6\u53d1\u751f\uff09\uff0c$N$\u662f\u9884\u6d4b\u5b9e\u4f8b\u6570\u3002\u5b9e\u9645\u4e0a\uff0c Brier\u5206\u6570\u5c31\u662f\u6240\u6709\u6837\u672c\u7684 \u9884\u6d4b\u6982\u7387 \u4e0e \u5b9e\u9645\u7ed3\u679c \u4e4b\u95f4\u7684\u5747\u65b9\u5dee\u3002 Brier\u5206\u6570\u8d8a\u5c0f\u8d8a\u597d\uff0c\u56e0\u6b64\u547d\u540d\u4e3a\u201c loss\u201d\u3002Brier\u5206\u6570\u7684\u53d6\u503c\u8303\u56f4\u57280\u52301\u4e4b\u95f4\u3002\u6b64\u516c\u5f0f\u4e3b\u8981\u7528\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u4f46 Brier \u5206\u6570\u7684 \u539f\u59cb\u5b9a\u4e49 \u662f\u9002\u7528\u4e8e\u591a\u5206\u7c7b\u4efb\u52a1\u7684\u3002 from sklearn.metrics import brier_score_loss y_true = [ 0 , 1 , 1 ] y_prob = [ 1 , 1 , 1 ] # pos_label\u6307\u660e\u4e86y_prob\u662f\u54ea\u4e2alabel\u7684\u6982\u7387 brier_score_loss ( y_true , y_prob , sample_weight = None , pos_label = 1 ) 0.3333333333333333","title":"brier score"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#cohen-kappa-score","text":"","title":"cohen kappa score"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#dcg-score","text":"","title":"dcg score"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#hamming-loss","text":"hamming_loss ( y_true , y_pred , labels = None , sample_weight = None ) $$ \\text{Hamming Loss}=\\frac{1}{N}\\sum_{i=1}^N\\frac{\\text{XOR}(Y_{i,j}, P_{i,j})}{L} $$ $N$ \u662f\u6837\u672c\u7684\u6570\u91cf\uff0c$L$ \u662f\u6807\u7b7e\u7684\u4e2a\u6570\uff0c$Y_{i,j}$ \u662f\u7b2c$i$\u4e2a\u9884\u6d4b\u7ed3\u679c\u4e2d\u7b2c$j$\u4e2a\u5206\u91cf\u7684\u771f\u5b9e\u503c\uff0c$P_{i,j}$ \u662f\u7b2c$i$\u4e2a\u9884\u6d4b\u7ed3\u679c\u4e2d\u7b2c$j$\u4e2a\u5206\u91cf\u7684\u9884\u6d4b\u503c\uff0c$\\text{XOR}$\u662f\u6291\u6216\uff0c$\\text{XOR}(0,1)=\\text{XOR}(1,0)=1$\uff0c$\\text{XOR}(0,0)=\\text{XOR}(1,1)=0$\u3002 Hamming Loss\u662f\u7528\u6765\u8ba1\u7b97\u591a\u6807\u7b7e\u5206\u7c7b (Multi-label classification) \u6a21\u578b\u7cbe\u5ea6\u7684\u3002 \u5728multiclass\u4efb\u52a1\u4e2d, Hamming loss \u7b49\u4ef7\u4e8e zero_one_loss\uff08 normalize=True \uff09 \u3002 \u5728multilabel\u4efb\u52a1\u4e2d, Hamming loss \u548c zero-one loss \u6709\u70b9\u4e0d\u540c\u3002zero-one loss\u4f1a\u8003\u8651\u6837\u672c\u771f\u5b9elabel\u7684\u96c6\u5408\u548c\u9884\u6d4blabel\u7684\u96c6\u5408\u662f\u5426\u5b8c\u5168\u4e00\u81f4\u3002\u53ea\u6709\u5b8c\u5168\u4e00\u81f4\u65f6\uff0czero-one loss \u4e3a0\u3002\u4f46 Hamming loss \u5219\u6ca1\u6709\u8fd9\u4e48\u4e25\u683c\uff0c\u5b83\u53ea\u60e9\u7f5a\u5355\u4e2a\u6807\u7b7e\u3002 Hamming loss \u662f zero-one loss\uff08 normalize=True \uff09\u7684\u4e0a\u9650\uff0cHamming loss\u7684\u503c\u603b\u662f\u4f4d\u4e8e0\u548c1\u4e4b\u95f4\u3002 \u4f8b\u5b50\uff1a\u4e09\u4e2a\u6837\u672c $$ Y_{1}=(0,1,1,1,0), P_{1}=(1,1,1,0,0) $$ $$ Y_{2}=(1,0,0,1,1), P_{2}=(1,0,0,0,1) $$ $$ Y_{3}=(1,1,0,0,0), P_{3}=(1,0,1,0,1) $$ $$ \\text{HammingLoss}=\\frac{1}{3}\\times\\frac{2+1+3}{5}=0.4 $$ from sklearn.metrics import hamming_loss import numpy as np y_true = np . array ([[ 0 , 1 ], [ 1 , 1 ]]) y_pred = np . zeros (( 2 , 2 )) print ( y_true , \" \\n \" ) print ( y_pred ) # \u4e00\u51712\u4e2a\u6837\u672c \u6bcf\u4e2a\u6837\u672c\u67092\u4e2alabel # \u53ea\u67091\u4e2alabel\u9884\u6d4b\u6b63\u786e \ud83d\udc49 \u56e0\u6b64 loss = 3/4 hamming_loss ( y_true , y_pred ) [[0 1] [1 1]] [[0. 0.] [0. 0.]] 0.75","title":"hamming loss"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#hinge-loss","text":"https://zh.wikipedia.org/wiki/Hinge_loss","title":"Hinge loss"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#jaccard-score","text":"jaccard_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) \u6570\u5b66\u5b9a\u4e49\u53c2\u8003\u4e8e statisticshowto-accardindex \u3002 jaccard_similarity_score \u51fd\u6570\u4f1a\u8ba1\u7b97\u4e24\u5bf9label\u96c6\u4e4b\u95f4\u7684Jaccard\u76f8\u4f3c\u5ea6\u7cfb\u6570\u7684\u5e73\u5747\u503c\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\u6216\u603b\u548c\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3aJaccard index\u3002 \u7b2c$i$\u4e2a\u6837\u672c\u7684Jaccard\u76f8\u4f3c\u5ea6\u7cfb\u6570\uff08Jaccard similarity coefficient\uff09\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a $$ J(y_i, \\hat{y}_i) = \\frac{|y_i \\cap \\hat{y}_i|}{|y_i \\cup \\hat{y}_i|}. $$ \u5176\u4e2d\uff0c\u771f\u5b9e\u6807\u7b7e\u96c6\u4e3a$y_i$\uff0c\u9884\u6d4b\u6807\u7b7e\u96c6\u4e3a\uff1a$\\hat{y}_j$\u3002 \u4e8c\u5206\u7c7b\u7684\u60c5\u51b5\uff1a from sklearn.metrics import jaccard_score y_true = [ 0 , 1 , 1 ] y_pred = [ 1 , 1 , 1 ] # (0/2 + 1/1 + 1/1)*(1/3) = 2/3 print ( jaccard_score ( y_true , y_pred , pos_label = 1 )) # (0/2)*(1/1) = 0 print ( jaccard_score ( y_true , y_pred , pos_label = 0 )) 0.6666666666666666 0.0 multilabel\u7684\u60c5\u51b5: import numpy as np y_true = np . array ([[ 0 , 1 , 1 ], [ 1 , 1 , 0 ]]) y_pred = np . array ([[ 1 , 1 , 1 ], [ 1 , 0 , 0 ]]) print ( jaccard_score ( y_true , y_pred , average = 'samples' )) # 0.5833333333333333 # a = jaccard_score(y_true[0], y_pred[0], pos_label=1) # b = jaccard_score(y_true[1], y_pred[1], pos_label=1) # (a+b)/2 = 0.5833333333333333 print ( jaccard_score ( y_true , y_pred , average = 'macro' )) # 0.6666666666666666 # label\u95ee\u9898\u8f6c\u6362\u4e3a3\u4e2a\u4e8c\u5206\u7c7b # (1/2 + 1/2 + 1/1)/3 = 0.6666666666666666 print ( jaccard_score ( y_true , y_pred , average = 'micro' )) # 0.6 # label\u95ee\u9898\u8f6c\u6362\u4e3a3\u4e2a\u4e8c\u5206\u7c7b # (1 + 1 + 1) / (2 + 2 + 1) = 0.6 print ( jaccard_score ( y_true , y_pred , average = None )) 0.5833333333333333 0.6666666666666666 0.6 [0.5 0.5 1. ] \u591a\u5206\u7c7b\u7684\u60c5\u51b5: y_pred = [ 0 , 2 , 1 , 2 ] y_true = [ 0 , 1 , 2 , 2 ] # \u591a\u5206\u7c7b average \u53c2\u6570\u4e0d\u80fd\u4f7f\u7528 \u2018samples\u2019 print ( jaccard_score ( y_true , y_pred , average = None )) print ( jaccard_score ( y_true , y_pred , average = \"macro\" )) # 0.4444444444444444 # sum(jaccard_score(y_true, y_pred, average=None))/3 print ( jaccard_score ( y_true , y_pred , average = \"micro\" )) # 0.3333333333333333 # \u7b2c\u4e00\u4e2a\u5206\u7c7b 0 \u5339\u914d 1\u4e2a \u57fa\u6570\u4e3a1 # \u7b2c\u4e8c\u4e2a\u5206\u7c7b 1 \u5339\u914d 0\u4e2a \u57fa\u6570\u4e3a2 # \u7b2c\u4e8c\u4e2a\u5206\u7c7b 3 \u5339\u914d 1\u4e2a \u57fa\u6570\u4e3a3 # (1+0+1)/(1+2+3) = 0.3333333333333333 [1. 0. 0.33] 0.4444444444444444 0.3333333333333333","title":"jaccard score"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#log-loss","text":"log_loss ( y_true , y_pred , eps = 1e-15 , normalize = True , sample_weight = None , labels = None ) Log loss\u4e5f\u88ab\u79f0\u4e3a logistic \u56de\u5f52\u635f\u5931\uff0c\u6216\u8005\u4ea4\u53c9\u71b5\u635f\u5931(cross-entropy loss)\uff0c\u7528\u4e8e\u6982\u7387\u4f30\u8ba1\u3002\u5b83\u901a\u5e38\u7528\u5728(multinomial)\u7684LR\u548c\u795e\u7ecf\u7f51\u7edc\u4e0a\uff0c\u4ee5\u6700\u5927\u671f\u671b\uff08EM: expectation-maximization\uff09\u7684\u53d8\u79cd\u7684\u65b9\u5f0f\uff0c\u7528\u4e8e\u8bc4\u4f30\u4e00\u4e2a\u5206\u7c7b\u5668\u7684\u6982\u7387\u8f93\u51fa\uff0c\u800c\u975e\u8fdb\u884c\u79bb\u6563\u9884\u6d4b\u3002 \u5bf9\u4e8e\u4e8c\u5206\u7c7b\uff0c\u771f\u5b9e\u7c7b\u522b\u4e3a\uff1a$y\u2208{0,1}$\uff0c\u6982\u7387\u4f30\u8ba1\u4e3a\uff1a$p=P(y=1)$\u3002\u5355\u4e2a\u6837\u672c\u7684log loss\u4e3a\uff1a $$ L_{\\log}(y, p) = -\\log \\operatorname{P}(y|p) = -\\left( y \\log (p) + (1 - y) \\log (1 - p) \\right) $$ \u4e5f\u5c31\u662f\uff1a $$ L_{\\log}(y, p) = \\begin{cases} -\\log(p) &, \\text{if} y=1 \\\\ -\\log(1-p) &, \\text{if} y=0 \\\\ \\end{cases} $$ \u4e0b\u9762\u4e24\u5e45\u56fe\u5c55\u793a\u4e86\u771f\u5b9e\u7c7b\u522b\u4e3a1\u548c0\u65f6\uff0cLog Loss\u53d6\u503c\u968f\u7740 $p$ \u589e\u5927\u7684\u53d8\u5316\u8d8b\u52bf\u3002\u663e\u7136\uff0c\u5f53\u771f\u5b9e\u7c7b\u522b\u4e3a1\uff0c$p$\u8d8a\u5927\uff0c\u635f\u5931\u5e94\u8be5\u8d8a\u5c0f\uff1b\u5f53\u771f\u5b9e\u7c7b\u522b\u4e3a0\uff0c$p$\u8d8a\u5927\uff0c\u635f\u5931\u5e94\u8be5\u8d8a\u5927\u3002 \u5f53\u6269\u5c55\u5230\u591a\u5143\u5206\u7c7b\uff08multiclass\uff09\u65f6\u3002\u53ef\u4ee5\u5c06\u6837\u672c\u7684 true label \u7f16\u7801\u6210 1-of-K \u4e2a\u4e8c\u5143\u6307\u793a\u5668\u77e9\u9635$Y$\uff0c\u5982\u679c\u4ecelabel K\u96c6\u5408\u4e2d\u53d6\u51fa\u7684\u6837\u672ci\uff0c\u5bf9\u5e94\u7684label\u4e3ak\uff0c\u5219$y_{i,k}=1$\uff0c$P$\u4e3a\u6982\u7387\u4f30\u8ba1\u77e9\u9635\uff0c$p_{i,k} = \\operatorname{P}(t_{i,k} = 1)$\u3002\u6574\u4e2a\u96c6\u5408\u7684log loss\u8868\u793a\u5982\u4e0b\uff1a $$ L_{\\log}(Y, P) = -\\log \\operatorname{P}(Y|P) = - \\frac{1}{N} \\sum_{i=0}^{N-1} \\sum_{k=0}^{K-1} y_{i,k} \\log p_{i,k} $$ from sklearn.metrics import log_loss import numpy as np y_true = [ 1 , 0 , 1 , 0 ] y_pred = [ 0.8 , 0.2 , 0.85 , 0.6 ] loss_1 = log_loss ( y_true , y_pred , normalize = False ) loss_2 = - np . log ( 0.8 ) - np . log ( 0.8 ) - np . log ( 0.85 ) - np . log ( 0.4 ) print ( \"loss_1:\" , loss_1 ) print ( \"loss_2:\" , loss_2 ) loss_1 = log_loss ( y_true , y_pred , normalize = True ) loss_2 = ( - np . log ( 0.8 ) - np . log ( 0.8 ) - np . log ( 0.85 ) - np . log ( 0.4 )) / 4 print ( \"loss_1:\" , loss_1 ) print ( \"loss_2:\" , loss_2 ) loss_1: 1.5250967640003492 loss_2: 1.5250967640003492 loss_1: 0.3812741910000873 loss_2: 0.3812741910000873","title":"log loss"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#matthews-corrcoef","text":"http://d0evi1.com/sklearn/model_evaluation/","title":"matthews corrcoef"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#zero-one-loss","text":"zero_one_loss ( y_true , y_pred , normalize = True , sample_weight = None ) 0-1\u635f\u5931\u5f88\u7b80\u5355\uff0c\u5982\u679c\u5404\u4e2a\u6837\u672c\u6743\u91cd\u76f8\u7b49\uff0c\u90a3\u4e48\u635f\u5931\u5c31\u662f\u771f\u5b9e\u503c\u548c\u9884\u6d4b\u503c\u4e0d\u76f8\u7b49\u7684\u4e2a\u6570\u6c42\u548c\u3002 \u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c zero_one_loss \u7684\u7ed3\u679c\u4f1a\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\uff1a \u5176\u4e2d\uff0c$w_i$\u662f\u6743\u91cd\u3002 from sklearn.metrics import zero_one_loss y_true = [ 0 , 1 , 0 , 0 , 1 , 0 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 ] weight = [ 1 , 1 , 1 , 1 , 1 , 2 ] print ( zero_one_loss ( y_true , y_pred , normalize = False , sample_weight = weight )) print ( zero_one_loss ( y_true , y_pred , normalize = True , sample_weight = weight )) 3 0.4285714285714286 \u5982\u679c\u662f multilabel \u5206\u7c7b\u4efb\u52a1\uff0c\u771f\u5b9e\u503c\u7684label\u548c\u9884\u6d4b\u503c\u7684label\u8981\u4e25\u683c\u5339\u914d\uff0c0-1\u635f\u5931\u624d\u4e3a0\u3002 y_true = [[ 0 , 1 , 1 ],[ 1 , 1 , 0 ],[ 1 , 0 , 0 ]] y_pred = [[ 0 , 1 , 1 ],[ 0 , 1 , 1 ],[ 1 , 0 , 1 ]] zero_one_loss ( y_true , y_pred , normalize = False ) 2","title":"zero one loss"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html","text":"from toolkit import H import numpy as np import matplotlib.pyplot as plt from matplotlib.patches import Patch import matplotlib matplotlib . rcParams [ 'font.family' ] = \"SIMHEI\" # \u7528\u6765\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u6807\u7b7e matplotlib . rcParams [ 'axes.unicode_minus' ] = False # \u7528\u6765\u6b63\u5e38\u663e\u793a\u8d1f\u53f7 from sklearn.model_selection import ( KFold , GroupKFold , StratifiedKFold , RepeatedKFold , RepeatedStratifiedKFold , LeaveOneOut , LeavePOut , LeaveOneGroupOut , LeavePGroupsOut , PredefinedSplit , ShuffleSplit , GroupShuffleSplit , StratifiedShuffleSplit , TimeSeriesSplit ) Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.04 sklearn version: 0.22.1 \u62c6\u5206\u6570\u636e\u96c6 train_test_split \uff1a\u7b80\u5355\u62c6\u5206 \u62c6\u5206\u51fd\u6570\uff08Splitter Functions\uff09 train_test_split() \u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u62c6\u5206\u3002 from sklearn.model_selection import train_test_split train_test_split ( * arrays , test_size = None , train_size = None , random_state = None , shuffle = True , stratify = None ) test_size \uff1a\u5982\u679c\u4e3a float \uff0c\u5219\u5e94\u4ecb\u4e8e0.0\u548c1.0\u4e4b\u95f4\uff0c\u8868\u793a\u6d4b\u8bd5\u96c6\u6bd4\u4f8b\u3002\u5982\u679c\u662f int \uff0c\u5219\u8868\u793a\u6d4b\u8bd5\u6837\u672c\u7684\u7edd\u5bf9\u6570\u91cf\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u96c6\u6bd4\u5217\u7684\u8865\u7801\u3002\u5982\u679c train_size=None \uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a0.25\u3002 train_size \uff1a\u5982\u679c\u4e3a float \uff0c\u5219\u5e94\u4ecb\u4e8e0.0\u548c1.0\u4e4b\u95f4\uff0c\u8868\u793a\u8bad\u7ec3\u96c6\u6bd4\u4f8b\u3002\u5982\u679c\u662f int \uff0c\u5219\u8868\u793a\u8bad\u7ec3\u6837\u672c\u7684\u7edd\u5bf9\u6570\u91cf\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a\u6d4b\u8bd5\u96c6\u6bd4\u5217\u7684\u8865\u7801\u3002 random_state \uff1a\u968f\u673a\u79cd\u5b50\u3002 shuffle \uff1a boolean \uff0c\u62c6\u5206\u6570\u636e\u96c6\u4e4b\u524d\u662f\u5426\u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u3002 stratify \uff1a\u5206\u5c42\u53c2\u6570\u3002\u5982\u679c\u4e0d\u662fNone\uff0c\u5219\u4ee5\u5206\u5c42\u65b9\u5f0f\u62c6\u5206\u6570\u636e\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u7c7b\u6807\u7b7e\u3002stratify\u7684array\u4e0ey\u7684array\u4e00\u4e00\u5bf9\u5e94\u3002 data = np . arange ( 1 , 11 ) x_train , x_test = train_test_split ( data , test_size = 0.3 , shuffle = False ) # shuffle=False num = 3 fig , axs = plt . subplots ( num , 1 , sharex = True , sharey = True , figsize = ( 8 , 0.5 * num )) for i in range ( num ): x_train , x_test = train_test_split ( data , test_size = 0.3 , shuffle = False ) axs [ i ] . spines [ 'left' ] . set_color ( 'none' ) axs [ i ] . spines [ 'right' ] . set_color ( 'none' ) axs [ i ] . spines [ 'top' ] . set_color ( 'none' ) axs [ i ] . spines [ 'bottom' ] . set_color ( 'none' ) axs [ i ] . plot ( x_train , np . full ( 7 , 0 ), 'o' , label = \"train\" ) axs [ i ] . plot ( x_test , np . full ( 3 , 0 ), 'o' , label = \"test\" ) axs [ i ] . xaxis . set_ticks_position ( 'none' ) axs [ i ] . set_yticks ([]) axs [ i ] . set_ylabel ( f \"\u7b2c { i + 1 } \u6b21\u5212\u5206\" , fontsize = 13 , rotation = 0 , labelpad = 18 , position = ( 0 , 0.25 )) axs [ i ] . xaxis . set_ticks_position ( 'bottom' ) axs [ i ] . set_xticks ( np . hstack (( x_train , x_test ))) plt . xticks ( fontsize = 13 ) plt . legend ( loc = 'upper right' , bbox_to_anchor = ( 0.7 , 4.5 ), ncol = 2 , fontsize = 13 , framealpha = 0.5 ) plt . savefig ( r \".\\markdown\\figures\\train_test_split_no_shuffle.svg\" , dpi = 600 , bbox_inches = 'tight' ) plt . show () # shuffle=True num = 3 fig , axs = plt . subplots ( num , 1 , sharex = True , sharey = True , figsize = ( 8 , 0.5 * num )) for i in range ( num ): x_train , x_test = train_test_split ( data , test_size = 0.3 , shuffle = True ) axs [ i ] . spines [ 'left' ] . set_color ( 'none' ) axs [ i ] . spines [ 'right' ] . set_color ( 'none' ) axs [ i ] . spines [ 'top' ] . set_color ( 'none' ) axs [ i ] . spines [ 'bottom' ] . set_color ( 'none' ) axs [ i ] . plot ( x_train , np . full ( 7 , 0 ), 'o' , label = \"train\" ) axs [ i ] . plot ( x_test , np . full ( 3 , 0 ), 'o' , label = \"test\" ) axs [ i ] . xaxis . set_ticks_position ( 'none' ) axs [ i ] . set_yticks ([]) axs [ i ] . set_ylabel ( f \"\u7b2c { i + 1 } \u6b21\u5212\u5206\" , fontsize = 13 , rotation = 0 , labelpad = 18 , position = ( 0 , 0.25 )) axs [ i ] . xaxis . set_ticks_position ( 'bottom' ) axs [ i ] . set_xticks ( np . hstack (( x_train , x_test ))) plt . xticks ( fontsize = 13 ) plt . legend ( loc = 'upper right' , bbox_to_anchor = ( 0.7 , 4.5 ), ncol = 2 , fontsize = 13 , framealpha = 0.5 ) plt . savefig ( r \".\\markdown\\figures\\train_test_split_shuffle.svg\" , dpi = 600 , bbox_inches = 'tight' ) plt . show () \u62c6\u5206\u5668\u53ef\u89c6\u5316 sklearn \u63d0\u4f9b\u4e86\u5982\u4e0b15\u4e2a\u62c6\u5206\u5668\uff0c\u6bcf\u4e2a\u62c6\u5206\u5668\u8c03\u7528 split() \u793a\u4f8b\u65b9\u6cd5\u5b8c\u6210\u62c6\u5206\u3002\u6240\u6709\u62c6\u5206\u5668\u7684 split() \u65b9\u6cd5\u90fd\u6709\u4e09\u4e2a\u53c2\u6570\uff1a X \u3001 y \u3001 groups \uff0c\u4f46 groups \u5e76\u4e0d\u662f\u5bf9\u6240\u6709\u62c6\u5206\u5668\u90fd\u8d77\u4f5c\u7528\uff0c\u6709\u4e9b\u62c6\u5206\u5668\u7684 split() \u65b9\u6cd5\u6709 groups \u53c2\u6570\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9\u6027\uff0c\u8be5\u53c2\u6570\u662f\u65e0\u6548\u7684\u3002 \u4e3a\u4e86\u4e86\u89e3\u8fd9\u4e9b\u62c6\u5206\u5668\u7684\u7528\u6cd5\uff0c\u9700\u8981\u4e86\u89e3\u4ee5\u4e0b\u56db\u4e2a\u57fa\u672c\u6982\u5ff5\uff1a n_splits\uff1a\u6570\u636e\u96c6\u62c6\u5206\u6210 n_splits \u4e2a\u4e92\u65a5\u7684\u5b50\u96c6\uff0c\u6bcf\u4e2a\u5b50\u96c6\u4f9d\u6b21\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u6240\u4ee5\u4f1a\u8fd4\u56de n_splits \u4e2a\u7ed3\u679c\u3002 groups\uff1a\u6bcf\u4e2a\u6837\u672c\u90fd\u6709\u4e00\u4e2a\u5206\u7ec4\uff0c\u76f8\u540c\u7ec4\u522b\u7684\u6837\u672c\u88ab\u5728\u540c\u4e00\u4e2a\u62c6\u5206\u5b50\u96c6\u3002 stratified\uff1a\u6837\u672c\u6709\u4e0d\u540c\u7684\u7c7b\u522b $y$\uff0c\u6bcf\u4e2a\u62c6\u5206\u5b50\u96c6\u5c3d\u91cf\u4fdd\u6301\u4e0e\u603b\u4f53\u76f8\u540c\u7684\u7c7b\u522b\u6bd4\u4f8b\u3002 shuffle\uff1a\u968f\u673a\u6311\u9009\u6837\u672c\u8fdb\u62c6\u5206\u7ec4\u3002 \u8bf4\u660e \u7c7b\u53c2\u6570 split\u65b9\u6cd5\u7684\u53c2\u6570 K\u6298\u62c6\u5206 KFold(n_splits, shuffle, random_state) X, y, groups K \u7ec4\u62c6\u5206 GroupKFold(n_splits) X, y, groups \u5206\u5c42K\u6298\u62c6\u5206 StratifiedKFold(n_splits, shuffle, random_state) X, y, groups \u91cd\u590dK\u6298\u62c6\u5206 RepeatedKFold(n_splits, n_repeats, random_state) X, y, groups \u91cd\u590d\u5206\u5c42K\u6298\u62c6\u5206 RepeatedStratifiedKFold(n_splits, n_repeats, random_state) X, y, groups \u7559\u4e00\u62c6\u5206 LeaveOneOut() X, y, groups \u7559P\u62c6\u5206 LeavePOut(p) X, y, groups \u7559\u4e00\u7ec4 LeaveOneGroupOut() X, y, groups \u7559P\u7ec4 LeavePGroupsOut(n_groups) X, y, groups \u9884\u5b9a\u4e49\u62c6\u5206 PredefinedSplit(test_fold) X, y, groups \u968f\u673a\u62c6\u5206 ShuffleSplit(n_splits=10, test_size, train_size, random_state) X, y, groups \u5206\u7ec4\u968f\u673a\u62c6\u5206 GroupShuffleSplit(n_splits, test_size, train_size, random_state) X, y, groups \u5206\u5c42\u5206\u7ec4\u968f\u673a\u62c6\u5206 StratifiedShuffleSplit(n_splits=10, test_size, train_size, random_state) X, y, groups \u65f6\u5e8f\u62c6\u5206 TimeSeriesSplit(n_splits, max_train_size) X, y, groups \u521b\u5efa\u793a\u4f8b\u6570\u636e\uff1a np . random . seed ( 123 ) cmap_data = plt . cm . Paired cmap_cv = plt . cm . coolwarm n_splits = 4 # \u62c6\u5206\u62104\u7ec4 # Generate the class/group data sample_num = 100 # \u4e00\u767e\u4e2a\u6837\u672c X = np . random . randn ( sample_num , 10 ) percentiles_classes = [ . 1 , . 3 , . 6 ] y = np . hstack ([[ ii ] * int ( 100 * perc ) for ii , perc in enumerate ( percentiles_classes )]) # Evenly spaced groups repeated once groups = np . hstack ([[ ii ] * 10 for ii in range ( 10 )]) def visualize_groups ( classes , groups , name ): # Visualize dataset groups fig , ax = plt . subplots () ax . scatter ( range ( len ( groups )), [ . 5 ] * len ( groups ), c = groups , marker = '_' , lw = 50 , cmap = cmap_data ) ax . scatter ( range ( len ( groups )), [ 3.5 ] * len ( groups ), c = classes , marker = '_' , lw = 50 , cmap = cmap_data ) ax . set ( ylim = [ - 1 , 5 ], yticks = [ . 5 , 3.5 ], yticklabels = [ 'Data \\n group' , 'Data \\n class' ], xlabel = \"Sample index\" ) visualize_groups ( y , groups , 'no groups' ) \u5404\u4e2a\u62c6\u5206\u5668\u7684\u533a\u522b\uff1a # \u5b9a\u4e49\u51fd\u6570 def plot_cv_indices ( cv , X , y , group , ax , n_splits , lw = 10 ): \"\"\"Create a sample plot for indices of a cross-validation object.\"\"\" # Generate the training/testing visualizations for each CV split for ii , ( tr , tt ) in enumerate ( cv . split ( X = X , y = y , groups = group )): # Fill in indices with the training/test groups indices = np . array ([ np . nan ] * len ( X )) indices [ tt ] = 1 indices [ tr ] = 0 # Visualize the results ax . scatter ( range ( len ( indices )), [ ii + . 5 ] * len ( indices ), c = indices , marker = '_' , lw = lw , cmap = cmap_cv , vmin =-. 2 , vmax = 1.2 ) # Plot the data classes and groups at the end ax . scatter ( range ( len ( X )), [ ii + 1.5 ] * len ( X ), c = y , marker = '_' , lw = lw , cmap = cmap_data ) ax . scatter ( range ( len ( X )), [ ii + 2.5 ] * len ( X ), c = group , marker = '_' , lw = lw , cmap = cmap_data ) # Formatting yticklabels = list ( range ( n_splits )) + [ 'class' , 'group' ] ax . set ( yticks = np . arange ( n_splits + 2 ) + . 5 , yticklabels = yticklabels , xlabel = 'Sample index' , ylabel = \"CV iteration\" , ylim = [ n_splits + 2.2 , -. 2 ], xlim = [ 0 , 100 ]) ax . set_title ( ' {} ' . format ( type ( cv ) . __name__ ), fontsize = 15 ) return ax cvs = [ KFold , GroupKFold , StratifiedKFold , ShuffleSplit , GroupShuffleSplit , StratifiedShuffleSplit , TimeSeriesSplit ] for cv in cvs : this_cv = cv ( n_splits = n_splits ) fig , ax = plt . subplots ( figsize = ( 6 , 3 )) plot_cv_indices ( this_cv , X , y , groups , ax , n_splits ) ax . legend ([ Patch ( color = cmap_cv ( . 8 )), Patch ( color = cmap_cv ( . 02 ))], [ 'Testing set' , 'Training set' ], loc = ( 1.02 , . 8 )) # Make the legend fit plt . tight_layout () fig . subplots_adjust ( right =. 7 ) plt . show () \u8fd9\u91cc\u672a\u63d0\u5230\u7684\u62c6\u5206\u5668\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\u4e0b\u6587\uff0c\u4e0b\u6587\u4e3a\u6bcf\u4e2a\u62c6\u5206\u5668\u63d0\u4f9b\u4e86\u793a\u4f8b\u3002 KFold \uff1aK\u6298\u62c6\u5206 \u5c06\u6570\u636e\u96c6\u5212\u5206\u5f97\u5230K\u4e2a\u4e92\u65a5\u5b50\u96c6\u3002 KFold ( n_splits = 5 , random_state = None , shuffle = False ) from sklearn.model_selection import KFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) kf = KFold ( n_splits = 2 , shuffle = False ) kf . get_n_splits ( X ) print ( kf ) for train_index , test_index in kf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] KFold(n_splits=2, random_state=None, shuffle=False) TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] print ( \"\u672a\u8bbe\u7f6e\u968f\u673a\u6405\u52a8\" ) kf = KFold ( n_splits = 2 , shuffle = False ) # \u672a\u8bbe\u7f6e\u968f\u673a\u6405\u52a8 i = 0 while i < 5 : for train_index , test_index in kf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) i = i + 1 \u672a\u8bbe\u7f6e\u968f\u673a\u6405\u52a8 TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ print ( \"\u8bbe\u7f6e\u968f\u673a\u6405\u52a8\" ) print ( \"\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21\u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u90fd\u4f1a\u5c3d\u91cf\u6539\u53d8\" ) kf = KFold ( n_splits = 2 , shuffle = True ) # \u8bbe\u7f6e\u968f\u673a\u6405\u52a8 i = 0 while i < 5 : for train_index , test_index in kf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) i = i + 1 \u8bbe\u7f6e\u968f\u673a\u6405\u52a8 \u53ef\u4ee5\u770b\u5230\u6bcf\u6b21\u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u90fd\u4f1a\u5c3d\u91cf\u6539\u53d8 TRAIN: [0 2] TEST: [1 3] TRAIN: [1 3] TEST: [0 2] ------------------------------ TRAIN: [0 1] TEST: [2 3] TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [0 3] TEST: [1 2] TRAIN: [1 2] TEST: [0 3] ------------------------------ TRAIN: [0 1] TEST: [2 3] TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ GroupKFold \uff1aK \u7ec4\u62c6\u5206 GroupKFold \u5728\u4fdd\u8bc1 kFold \u7684\u57fa\u7840\u4e0a\uff0c\u4fdd\u8bc1\u540c\u4e00\u4e2a group \u7684\u6837\u672c\u5728\u540c\u4e00\u4e2a\u62c6\u5206\u3002 GroupKFold ( n_splits = 5 ) from sklearn.model_selection import GroupKFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ], [ 9 , 10 ]]) y = np . array ([ 0 , 0 , 1 , 1 , 0 ]) groups = np . array ([ 0 , 0 , 1 , 1 , 0 ]) group_kfold = GroupKFold ( n_splits = 2 ) group_kfold . get_n_splits ( X , y , groups ) print ( group_kfold ) for train_index , test_index in group_kfold . split ( X , y , groups ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] GroupKFold(n_splits=2) TRAIN: [2 3] TEST: [0 1 4] TRAIN: [0 1 4] TEST: [2 3] StratifiedKFold \uff1a\u5206\u5c42K\u6298\u62c6\u5206 \u4e0eKFold\u76f8\u4f3c\uff0c\u4f46\u662f \u5206\u5c42K\u6298\u62c6\u5206 \u6309\u7167\u539f\u6570\u636e\u5404\u7c7b\u6807\u7b7e\u7684\u6240\u5360\u6bd4\u4f8b\u8fdb\u884c\u62c6\u5206\uff0c\u7ef4\u6301\u6bcf\u7ec4\u7684\u6807\u7b7e\u6bd4\u4f8b\u4e0d\u53d8\u3002 StratifiedKFold ( n_splits = 5 , shuffle = False , random_state = None ) StratifiedKFold.split \u6709\u4e00\u4e2a\u65e0\u6548\u7684 groups \u53c2\u6570\uff08\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9\uff09\uff0cgroups \u603b\u662f\u9ed8\u8ba4\u4e3ay\uff0c\u5206\u7c7b\u5373\u5206\u5c42\u3002 from sklearn.model_selection import StratifiedKFold X = np . random . random ( 150 ) y = np . concatenate ([ np . zeros ( 50 ), np . ones ( 50 ), np . full ( 50 , 2 )]) skf = StratifiedKFold ( n_splits = 2 ) skf . get_n_splits ( X , y ) print ( skf ) for train_index , test_index in skf . split ( X , y ): # print(\"TRAIN:\", train_index, \"TEST:\", test_index) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] for i in [ 0 , 1 , 2 ]: print ( f \"\u7b2c { i } \u7c7b\" , len ( y_train [ y_train == i ])) print ( \"------------------------------\" ) StratifiedKFold(n_splits=2, random_state=None, shuffle=False) \u7b2c0\u7c7b 25 \u7b2c1\u7c7b 25 \u7b2c2\u7c7b 25 ------------------------------ \u7b2c0\u7c7b 25 \u7b2c1\u7c7b 25 \u7b2c2\u7c7b 25 ------------------------------ RepeatedKFold \uff1a\u91cd\u590dK\u6298\u62c6\u5206 StratifiedKFold ( n_splits = 5 , n_repeats = 10 , random_state = None ) RepeatedKFold \u91cd\u590d K-Fold n \u6b21\u3002\u5f53\u9700\u8981\u8fd0\u884c\u65f6\u53ef\u4ee5\u4f7f\u7528\u5b83 KFold n \u6b21\uff0c \u5c3d\u91cf\u5728\u6bcf\u6b21\u91cd\u590d\u4e2d\u4ea7\u751f\u4e0d\u540c\u7684\u5206\u5272 \u3002 # 2\u6298 K-Fold \u91cd\u590d 2 \u6b21\u7684\u793a\u4f8b: from sklearn.model_selection import RepeatedKFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) rkf = RepeatedKFold ( n_splits = 2 , n_repeats = 2 , random_state = 2652124 ) for train_index , test_index in rkf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [1 2] TEST: [0 3] ------------------------------ TRAIN: [0 3] TEST: [1 2] ------------------------------ RepeatedStratifiedKFold \uff1a\u91cd\u590d\u5206\u5c42K\u6298\u62c6\u5206 RepeatedStratifiedKFold ( n_splits = 5 , n_repeats = 10 , random_state = None ) RepeatedStratifiedKFold.split \u540c\u6837\u6709\u4e00\u4e2a\u65e0\u6548\u7684 groups \u53c2\u6570\uff0c\u5728\u5185\u90e8 groups \u603b\u662f\u9ed8\u8ba4\u4e3aY \u5206\u7c7b\u5373\u5206\u5c42\u3002 from sklearn.model_selection import RepeatedStratifiedKFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) rskf = RepeatedStratifiedKFold ( n_splits = 2 , n_repeats = 2 ) for train_index , test_index in rskf . split ( X , y ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] TRAIN: [1 2] TEST: [0 3] TRAIN: [0 3] TEST: [1 2] TRAIN: [0 3] TEST: [1 2] TRAIN: [1 2] TEST: [0 3] LeaveOneOut \uff1a\u7559\u4e00\u6cd5 LeaveOneOut () \u4f1a\u8fd4\u56de$C_n^1$\u5bf9\u8bad\u7ec3\u3001\u6d4b\u8bd5\u6570\u636e\u96c6\u3002 from sklearn.model_selection import LeaveOneOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) loo = LeaveOneOut () loo . get_n_splits ( X ) print ( loo ) for train_index , test_index in loo . split ( X ): print ( \"TRAIN\u7d22\u5f15:\" , train_index , \"TEST\u7d22\u5f15:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeaveOneOut() TRAIN\u7d22\u5f15: [1 2 3] TEST\u7d22\u5f15: [0] ------------------------------ TRAIN\u7d22\u5f15: [0 2 3] TEST\u7d22\u5f15: [1] ------------------------------ TRAIN\u7d22\u5f15: [0 1 3] TEST\u7d22\u5f15: [2] ------------------------------ TRAIN\u7d22\u5f15: [0 1 2] TEST\u7d22\u5f15: [3] ------------------------------ LeavePOut \uff1a\u7559P\u6cd5 \u6d4b\u8bd5\u6570\u636e\u7684\u53ef\u80fd\u7ec4\u6570\u4e3a$C_n^P$\u3002 LeavePOut ( p ) from sklearn.model_selection import LeavePOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) lpo = LeavePOut ( 2 ) lpo . get_n_splits ( X ) print ( lpo ) for train_index , test_index in lpo . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeavePOut(p=2) TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [1 3] TEST: [0 2] ------------------------------ TRAIN: [1 2] TEST: [0 3] ------------------------------ TRAIN: [0 3] TEST: [1 2] ------------------------------ TRAIN: [0 2] TEST: [1 3] ------------------------------ TRAIN: [0 1] TEST: [2 3] ------------------------------ LeaveOneGroupOut \uff1a\u7559\u4e00\u7ec4 \u4e0e\u7559\u4e00\u6cd5\u76f8\u4f3c\uff0c\u53ea\u662f\u7559\u4e00\u6cd5\u76f8\u5bf9\u4e8e\u5355\u4e2a\u5143\u7d20\uff0c\u7559\u4e00\u7ec4\u76f8\u5bf9\u4e8e\u4e00\u7ec4\u5143\u7d20\u3002 from sklearn.model_selection import LeaveOneGroupOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 1 , 2 , 1 , 2 ]) groups = np . array ([ 1 , 1 , 2 , 2 ]) logo = LeaveOneGroupOut () # 'groups' is always required ## group \u53c2\u6570\u4e0d\u4f1a\u9ed8\u8ba4\u4e3ay\u7684label logo . get_n_splits ( X , y , groups ) #logo.get_n_splits(groups=groups) # 'groups' is always required print ( logo ) for train_index , test_index in logo . split ( X , y , groups ): print ( \" \\n \" , \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeaveOneGroupOut() TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [0 1] TEST: [2 3] ------------------------------ LeavePGroupsOut \uff1a\u7559P\u7ec4 from sklearn.model_selection import LeavePGroupsOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ]]) y = np . array ([ 1 , 2 , 1 ]) groups = np . array ([ 1 , 2 , 3 ]) lpgo = LeavePGroupsOut ( n_groups = 2 ) lpgo . get_n_splits ( X , y , groups ) # 'groups' is always required print ( lpgo ) for train_index , test_index in lpgo . split ( X , y , groups ): print ( \" \\n \" , \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeavePGroupsOut(n_groups=2) TRAIN: [2] TEST: [0 1] ------------------------------ TRAIN: [1] TEST: [0 2] ------------------------------ TRAIN: [0] TEST: [1 2] ------------------------------ PredefinedSplit \uff1a\u9884\u5b9a\u4e49\u62c6\u5206 from sklearn.model_selection import PredefinedSplit X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 1 , 2 ], [ 3 , 4 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) test_fold = [ 0 , 1 , - 1 , 1 ] \"\"\" test_fold = [0, 1, -1, 1] \u8868\u793a\u5728\u7b2c\u4e00\u4e2a\u9a8c\u8bc1\u96c6\u5305\u542b test_fold\u4e2d0\u5143\u7d20\u5bf9\u5e94\u7d22\u5f15\u7684\u6837\u672c \u7b2c\u4e8c\u4e2a\u9a8c\u8bc1\u96c6\u5305\u542btest_fold\u4e2d1\u5143\u7d20\u5bf9\u5e94\u7d22\u5f15\u7684\u6837\u672c \u7d22\u5f15\u4e3a2\u7684\u6837\u672c\uff08\u7b2c\u4e09\u4e2a\u6837\u672c\uff09\u4e0d\u5305\u542b\u5728\u4efb\u4f55\u9a8c\u8bc1\u96c6\uff0c\u53ea\u5728\u8bad\u7ec3\u96c6 \u53ef\u89c1\uff0ctest_fold\u4f1a\u51b3\u5b9a\u4ea7\u751f\u7684\u62c6\u5206\u6b21\u6570\uff0c\u8fd9\u91cc\u62c6\u5206\u6b21\u6570\u5b9e\u9645\u4e0a\u662f2\uff0c\u56e0\u4e3a1\u548c1\u91cd\u590d \u5c06\u8bad\u7ec3\u96c6\u5bf9\u5e94\u7684index\u8bbe\u4e3a-1\uff0c\u8868\u793a\u6c38\u8fdc\u4e0d\u5212\u5206\u5230\u9a8c\u8bc1\u96c6\u4e2d \"\"\" ps = PredefinedSplit ( test_fold ) ps . get_n_splits () print ( ps ) for train_index , test_index in ps . split (): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] PredefinedSplit(test_fold=array([ 0, 1, -1, 1])) TRAIN: [1 2 3] TEST: [0] TRAIN: [0 2] TEST: [1 3] ShuffleSplit \uff1a\u968f\u673a\u62c6\u5206 \u5c06\u6837\u672c\u96c6\u5408\u968f\u673a\u201c\u6253\u6563\u201d\u540e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3002 ShuffleSplit ( n_splits = 10 , test_size = \u2019 default \u2019 , train_size = None , random_state = None ) from sklearn.model_selection import ShuffleSplit X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ], [ 3 , 4 ], [ 5 , 6 ]]) y = np . array ([ 1 , 2 , 1 , 2 , 1 , 2 ]) rs = ShuffleSplit ( n_splits = 5 , test_size =. 25 , random_state = 0 ) rs . get_n_splits ( X ) print ( rs ) for train_index , test_index in rs . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) print ( \"----------------------------\" ) ShuffleSplit(n_splits=5, random_state=0, test_size=0.25, train_size=None) TRAIN: [1 3 0 4] TEST: [5 2] ---------------------------- TRAIN: [4 0 2 5] TEST: [1 3] ---------------------------- TRAIN: [1 2 4 0] TEST: [3 5] ---------------------------- TRAIN: [3 4 1 0] TEST: [5 2] ---------------------------- TRAIN: [3 5 1 0] TEST: [2 4] ---------------------------- rs = ShuffleSplit ( n_splits = 5 , train_size = 0.5 , test_size =. 25 , random_state = 0 ) for train_index , test_index in rs . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) print ( \"----------------------------\" ) TRAIN: [1 3 0] TEST: [5 2] ---------------------------- TRAIN: [4 0 2] TEST: [1 3] ---------------------------- TRAIN: [1 2 4] TEST: [3 5] ---------------------------- TRAIN: [3 4 1] TEST: [5 2] ---------------------------- TRAIN: [3 5 1] TEST: [2 4] ---------------------------- GroupShuffleSplit StratifiedShuffleSplit TimeSeriesSplit","title":"11.5.\u62c6\u5206\u6570\u636e"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#_1","text":"","title":"\u62c6\u5206\u6570\u636e\u96c6"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#train_test_split","text":"\u62c6\u5206\u51fd\u6570\uff08Splitter Functions\uff09 train_test_split() \u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u62c6\u5206\u3002 from sklearn.model_selection import train_test_split train_test_split ( * arrays , test_size = None , train_size = None , random_state = None , shuffle = True , stratify = None ) test_size \uff1a\u5982\u679c\u4e3a float \uff0c\u5219\u5e94\u4ecb\u4e8e0.0\u548c1.0\u4e4b\u95f4\uff0c\u8868\u793a\u6d4b\u8bd5\u96c6\u6bd4\u4f8b\u3002\u5982\u679c\u662f int \uff0c\u5219\u8868\u793a\u6d4b\u8bd5\u6837\u672c\u7684\u7edd\u5bf9\u6570\u91cf\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u96c6\u6bd4\u5217\u7684\u8865\u7801\u3002\u5982\u679c train_size=None \uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a0.25\u3002 train_size \uff1a\u5982\u679c\u4e3a float \uff0c\u5219\u5e94\u4ecb\u4e8e0.0\u548c1.0\u4e4b\u95f4\uff0c\u8868\u793a\u8bad\u7ec3\u96c6\u6bd4\u4f8b\u3002\u5982\u679c\u662f int \uff0c\u5219\u8868\u793a\u8bad\u7ec3\u6837\u672c\u7684\u7edd\u5bf9\u6570\u91cf\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a\u6d4b\u8bd5\u96c6\u6bd4\u5217\u7684\u8865\u7801\u3002 random_state \uff1a\u968f\u673a\u79cd\u5b50\u3002 shuffle \uff1a boolean \uff0c\u62c6\u5206\u6570\u636e\u96c6\u4e4b\u524d\u662f\u5426\u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u3002 stratify \uff1a\u5206\u5c42\u53c2\u6570\u3002\u5982\u679c\u4e0d\u662fNone\uff0c\u5219\u4ee5\u5206\u5c42\u65b9\u5f0f\u62c6\u5206\u6570\u636e\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u7c7b\u6807\u7b7e\u3002stratify\u7684array\u4e0ey\u7684array\u4e00\u4e00\u5bf9\u5e94\u3002 data = np . arange ( 1 , 11 ) x_train , x_test = train_test_split ( data , test_size = 0.3 , shuffle = False ) # shuffle=False num = 3 fig , axs = plt . subplots ( num , 1 , sharex = True , sharey = True , figsize = ( 8 , 0.5 * num )) for i in range ( num ): x_train , x_test = train_test_split ( data , test_size = 0.3 , shuffle = False ) axs [ i ] . spines [ 'left' ] . set_color ( 'none' ) axs [ i ] . spines [ 'right' ] . set_color ( 'none' ) axs [ i ] . spines [ 'top' ] . set_color ( 'none' ) axs [ i ] . spines [ 'bottom' ] . set_color ( 'none' ) axs [ i ] . plot ( x_train , np . full ( 7 , 0 ), 'o' , label = \"train\" ) axs [ i ] . plot ( x_test , np . full ( 3 , 0 ), 'o' , label = \"test\" ) axs [ i ] . xaxis . set_ticks_position ( 'none' ) axs [ i ] . set_yticks ([]) axs [ i ] . set_ylabel ( f \"\u7b2c { i + 1 } \u6b21\u5212\u5206\" , fontsize = 13 , rotation = 0 , labelpad = 18 , position = ( 0 , 0.25 )) axs [ i ] . xaxis . set_ticks_position ( 'bottom' ) axs [ i ] . set_xticks ( np . hstack (( x_train , x_test ))) plt . xticks ( fontsize = 13 ) plt . legend ( loc = 'upper right' , bbox_to_anchor = ( 0.7 , 4.5 ), ncol = 2 , fontsize = 13 , framealpha = 0.5 ) plt . savefig ( r \".\\markdown\\figures\\train_test_split_no_shuffle.svg\" , dpi = 600 , bbox_inches = 'tight' ) plt . show () # shuffle=True num = 3 fig , axs = plt . subplots ( num , 1 , sharex = True , sharey = True , figsize = ( 8 , 0.5 * num )) for i in range ( num ): x_train , x_test = train_test_split ( data , test_size = 0.3 , shuffle = True ) axs [ i ] . spines [ 'left' ] . set_color ( 'none' ) axs [ i ] . spines [ 'right' ] . set_color ( 'none' ) axs [ i ] . spines [ 'top' ] . set_color ( 'none' ) axs [ i ] . spines [ 'bottom' ] . set_color ( 'none' ) axs [ i ] . plot ( x_train , np . full ( 7 , 0 ), 'o' , label = \"train\" ) axs [ i ] . plot ( x_test , np . full ( 3 , 0 ), 'o' , label = \"test\" ) axs [ i ] . xaxis . set_ticks_position ( 'none' ) axs [ i ] . set_yticks ([]) axs [ i ] . set_ylabel ( f \"\u7b2c { i + 1 } \u6b21\u5212\u5206\" , fontsize = 13 , rotation = 0 , labelpad = 18 , position = ( 0 , 0.25 )) axs [ i ] . xaxis . set_ticks_position ( 'bottom' ) axs [ i ] . set_xticks ( np . hstack (( x_train , x_test ))) plt . xticks ( fontsize = 13 ) plt . legend ( loc = 'upper right' , bbox_to_anchor = ( 0.7 , 4.5 ), ncol = 2 , fontsize = 13 , framealpha = 0.5 ) plt . savefig ( r \".\\markdown\\figures\\train_test_split_shuffle.svg\" , dpi = 600 , bbox_inches = 'tight' ) plt . show ()","title":"train_test_split\uff1a\u7b80\u5355\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#_2","text":"sklearn \u63d0\u4f9b\u4e86\u5982\u4e0b15\u4e2a\u62c6\u5206\u5668\uff0c\u6bcf\u4e2a\u62c6\u5206\u5668\u8c03\u7528 split() \u793a\u4f8b\u65b9\u6cd5\u5b8c\u6210\u62c6\u5206\u3002\u6240\u6709\u62c6\u5206\u5668\u7684 split() \u65b9\u6cd5\u90fd\u6709\u4e09\u4e2a\u53c2\u6570\uff1a X \u3001 y \u3001 groups \uff0c\u4f46 groups \u5e76\u4e0d\u662f\u5bf9\u6240\u6709\u62c6\u5206\u5668\u90fd\u8d77\u4f5c\u7528\uff0c\u6709\u4e9b\u62c6\u5206\u5668\u7684 split() \u65b9\u6cd5\u6709 groups \u53c2\u6570\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9\u6027\uff0c\u8be5\u53c2\u6570\u662f\u65e0\u6548\u7684\u3002 \u4e3a\u4e86\u4e86\u89e3\u8fd9\u4e9b\u62c6\u5206\u5668\u7684\u7528\u6cd5\uff0c\u9700\u8981\u4e86\u89e3\u4ee5\u4e0b\u56db\u4e2a\u57fa\u672c\u6982\u5ff5\uff1a n_splits\uff1a\u6570\u636e\u96c6\u62c6\u5206\u6210 n_splits \u4e2a\u4e92\u65a5\u7684\u5b50\u96c6\uff0c\u6bcf\u4e2a\u5b50\u96c6\u4f9d\u6b21\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u6240\u4ee5\u4f1a\u8fd4\u56de n_splits \u4e2a\u7ed3\u679c\u3002 groups\uff1a\u6bcf\u4e2a\u6837\u672c\u90fd\u6709\u4e00\u4e2a\u5206\u7ec4\uff0c\u76f8\u540c\u7ec4\u522b\u7684\u6837\u672c\u88ab\u5728\u540c\u4e00\u4e2a\u62c6\u5206\u5b50\u96c6\u3002 stratified\uff1a\u6837\u672c\u6709\u4e0d\u540c\u7684\u7c7b\u522b $y$\uff0c\u6bcf\u4e2a\u62c6\u5206\u5b50\u96c6\u5c3d\u91cf\u4fdd\u6301\u4e0e\u603b\u4f53\u76f8\u540c\u7684\u7c7b\u522b\u6bd4\u4f8b\u3002 shuffle\uff1a\u968f\u673a\u6311\u9009\u6837\u672c\u8fdb\u62c6\u5206\u7ec4\u3002 \u8bf4\u660e \u7c7b\u53c2\u6570 split\u65b9\u6cd5\u7684\u53c2\u6570 K\u6298\u62c6\u5206 KFold(n_splits, shuffle, random_state) X, y, groups K \u7ec4\u62c6\u5206 GroupKFold(n_splits) X, y, groups \u5206\u5c42K\u6298\u62c6\u5206 StratifiedKFold(n_splits, shuffle, random_state) X, y, groups \u91cd\u590dK\u6298\u62c6\u5206 RepeatedKFold(n_splits, n_repeats, random_state) X, y, groups \u91cd\u590d\u5206\u5c42K\u6298\u62c6\u5206 RepeatedStratifiedKFold(n_splits, n_repeats, random_state) X, y, groups \u7559\u4e00\u62c6\u5206 LeaveOneOut() X, y, groups \u7559P\u62c6\u5206 LeavePOut(p) X, y, groups \u7559\u4e00\u7ec4 LeaveOneGroupOut() X, y, groups \u7559P\u7ec4 LeavePGroupsOut(n_groups) X, y, groups \u9884\u5b9a\u4e49\u62c6\u5206 PredefinedSplit(test_fold) X, y, groups \u968f\u673a\u62c6\u5206 ShuffleSplit(n_splits=10, test_size, train_size, random_state) X, y, groups \u5206\u7ec4\u968f\u673a\u62c6\u5206 GroupShuffleSplit(n_splits, test_size, train_size, random_state) X, y, groups \u5206\u5c42\u5206\u7ec4\u968f\u673a\u62c6\u5206 StratifiedShuffleSplit(n_splits=10, test_size, train_size, random_state) X, y, groups \u65f6\u5e8f\u62c6\u5206 TimeSeriesSplit(n_splits, max_train_size) X, y, groups \u521b\u5efa\u793a\u4f8b\u6570\u636e\uff1a np . random . seed ( 123 ) cmap_data = plt . cm . Paired cmap_cv = plt . cm . coolwarm n_splits = 4 # \u62c6\u5206\u62104\u7ec4 # Generate the class/group data sample_num = 100 # \u4e00\u767e\u4e2a\u6837\u672c X = np . random . randn ( sample_num , 10 ) percentiles_classes = [ . 1 , . 3 , . 6 ] y = np . hstack ([[ ii ] * int ( 100 * perc ) for ii , perc in enumerate ( percentiles_classes )]) # Evenly spaced groups repeated once groups = np . hstack ([[ ii ] * 10 for ii in range ( 10 )]) def visualize_groups ( classes , groups , name ): # Visualize dataset groups fig , ax = plt . subplots () ax . scatter ( range ( len ( groups )), [ . 5 ] * len ( groups ), c = groups , marker = '_' , lw = 50 , cmap = cmap_data ) ax . scatter ( range ( len ( groups )), [ 3.5 ] * len ( groups ), c = classes , marker = '_' , lw = 50 , cmap = cmap_data ) ax . set ( ylim = [ - 1 , 5 ], yticks = [ . 5 , 3.5 ], yticklabels = [ 'Data \\n group' , 'Data \\n class' ], xlabel = \"Sample index\" ) visualize_groups ( y , groups , 'no groups' ) \u5404\u4e2a\u62c6\u5206\u5668\u7684\u533a\u522b\uff1a # \u5b9a\u4e49\u51fd\u6570 def plot_cv_indices ( cv , X , y , group , ax , n_splits , lw = 10 ): \"\"\"Create a sample plot for indices of a cross-validation object.\"\"\" # Generate the training/testing visualizations for each CV split for ii , ( tr , tt ) in enumerate ( cv . split ( X = X , y = y , groups = group )): # Fill in indices with the training/test groups indices = np . array ([ np . nan ] * len ( X )) indices [ tt ] = 1 indices [ tr ] = 0 # Visualize the results ax . scatter ( range ( len ( indices )), [ ii + . 5 ] * len ( indices ), c = indices , marker = '_' , lw = lw , cmap = cmap_cv , vmin =-. 2 , vmax = 1.2 ) # Plot the data classes and groups at the end ax . scatter ( range ( len ( X )), [ ii + 1.5 ] * len ( X ), c = y , marker = '_' , lw = lw , cmap = cmap_data ) ax . scatter ( range ( len ( X )), [ ii + 2.5 ] * len ( X ), c = group , marker = '_' , lw = lw , cmap = cmap_data ) # Formatting yticklabels = list ( range ( n_splits )) + [ 'class' , 'group' ] ax . set ( yticks = np . arange ( n_splits + 2 ) + . 5 , yticklabels = yticklabels , xlabel = 'Sample index' , ylabel = \"CV iteration\" , ylim = [ n_splits + 2.2 , -. 2 ], xlim = [ 0 , 100 ]) ax . set_title ( ' {} ' . format ( type ( cv ) . __name__ ), fontsize = 15 ) return ax cvs = [ KFold , GroupKFold , StratifiedKFold , ShuffleSplit , GroupShuffleSplit , StratifiedShuffleSplit , TimeSeriesSplit ] for cv in cvs : this_cv = cv ( n_splits = n_splits ) fig , ax = plt . subplots ( figsize = ( 6 , 3 )) plot_cv_indices ( this_cv , X , y , groups , ax , n_splits ) ax . legend ([ Patch ( color = cmap_cv ( . 8 )), Patch ( color = cmap_cv ( . 02 ))], [ 'Testing set' , 'Training set' ], loc = ( 1.02 , . 8 )) # Make the legend fit plt . tight_layout () fig . subplots_adjust ( right =. 7 ) plt . show () \u8fd9\u91cc\u672a\u63d0\u5230\u7684\u62c6\u5206\u5668\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\u4e0b\u6587\uff0c\u4e0b\u6587\u4e3a\u6bcf\u4e2a\u62c6\u5206\u5668\u63d0\u4f9b\u4e86\u793a\u4f8b\u3002","title":"\u62c6\u5206\u5668\u53ef\u89c6\u5316"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#kfoldk","text":"\u5c06\u6570\u636e\u96c6\u5212\u5206\u5f97\u5230K\u4e2a\u4e92\u65a5\u5b50\u96c6\u3002 KFold ( n_splits = 5 , random_state = None , shuffle = False ) from sklearn.model_selection import KFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) kf = KFold ( n_splits = 2 , shuffle = False ) kf . get_n_splits ( X ) print ( kf ) for train_index , test_index in kf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] KFold(n_splits=2, random_state=None, shuffle=False) TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] print ( \"\u672a\u8bbe\u7f6e\u968f\u673a\u6405\u52a8\" ) kf = KFold ( n_splits = 2 , shuffle = False ) # \u672a\u8bbe\u7f6e\u968f\u673a\u6405\u52a8 i = 0 while i < 5 : for train_index , test_index in kf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) i = i + 1 \u672a\u8bbe\u7f6e\u968f\u673a\u6405\u52a8 TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------ print ( \"\u8bbe\u7f6e\u968f\u673a\u6405\u52a8\" ) print ( \"\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21\u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u90fd\u4f1a\u5c3d\u91cf\u6539\u53d8\" ) kf = KFold ( n_splits = 2 , shuffle = True ) # \u8bbe\u7f6e\u968f\u673a\u6405\u52a8 i = 0 while i < 5 : for train_index , test_index in kf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) i = i + 1 \u8bbe\u7f6e\u968f\u673a\u6405\u52a8 \u53ef\u4ee5\u770b\u5230\u6bcf\u6b21\u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u90fd\u4f1a\u5c3d\u91cf\u6539\u53d8 TRAIN: [0 2] TEST: [1 3] TRAIN: [1 3] TEST: [0 2] ------------------------------ TRAIN: [0 1] TEST: [2 3] TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [0 3] TEST: [1 2] TRAIN: [1 2] TEST: [0 3] ------------------------------ TRAIN: [0 1] TEST: [2 3] TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [2 3] TEST: [0 1] TRAIN: [0 1] TEST: [2 3] ------------------------------","title":"KFold\uff1aK\u6298\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#groupkfoldk","text":"GroupKFold \u5728\u4fdd\u8bc1 kFold \u7684\u57fa\u7840\u4e0a\uff0c\u4fdd\u8bc1\u540c\u4e00\u4e2a group \u7684\u6837\u672c\u5728\u540c\u4e00\u4e2a\u62c6\u5206\u3002 GroupKFold ( n_splits = 5 ) from sklearn.model_selection import GroupKFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ], [ 9 , 10 ]]) y = np . array ([ 0 , 0 , 1 , 1 , 0 ]) groups = np . array ([ 0 , 0 , 1 , 1 , 0 ]) group_kfold = GroupKFold ( n_splits = 2 ) group_kfold . get_n_splits ( X , y , groups ) print ( group_kfold ) for train_index , test_index in group_kfold . split ( X , y , groups ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] GroupKFold(n_splits=2) TRAIN: [2 3] TEST: [0 1 4] TRAIN: [0 1 4] TEST: [2 3]","title":"GroupKFold\uff1aK \u7ec4\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#stratifiedkfoldk","text":"\u4e0eKFold\u76f8\u4f3c\uff0c\u4f46\u662f \u5206\u5c42K\u6298\u62c6\u5206 \u6309\u7167\u539f\u6570\u636e\u5404\u7c7b\u6807\u7b7e\u7684\u6240\u5360\u6bd4\u4f8b\u8fdb\u884c\u62c6\u5206\uff0c\u7ef4\u6301\u6bcf\u7ec4\u7684\u6807\u7b7e\u6bd4\u4f8b\u4e0d\u53d8\u3002 StratifiedKFold ( n_splits = 5 , shuffle = False , random_state = None ) StratifiedKFold.split \u6709\u4e00\u4e2a\u65e0\u6548\u7684 groups \u53c2\u6570\uff08\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9\uff09\uff0cgroups \u603b\u662f\u9ed8\u8ba4\u4e3ay\uff0c\u5206\u7c7b\u5373\u5206\u5c42\u3002 from sklearn.model_selection import StratifiedKFold X = np . random . random ( 150 ) y = np . concatenate ([ np . zeros ( 50 ), np . ones ( 50 ), np . full ( 50 , 2 )]) skf = StratifiedKFold ( n_splits = 2 ) skf . get_n_splits ( X , y ) print ( skf ) for train_index , test_index in skf . split ( X , y ): # print(\"TRAIN:\", train_index, \"TEST:\", test_index) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] for i in [ 0 , 1 , 2 ]: print ( f \"\u7b2c { i } \u7c7b\" , len ( y_train [ y_train == i ])) print ( \"------------------------------\" ) StratifiedKFold(n_splits=2, random_state=None, shuffle=False) \u7b2c0\u7c7b 25 \u7b2c1\u7c7b 25 \u7b2c2\u7c7b 25 ------------------------------ \u7b2c0\u7c7b 25 \u7b2c1\u7c7b 25 \u7b2c2\u7c7b 25 ------------------------------","title":"StratifiedKFold\uff1a\u5206\u5c42K\u6298\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#repeatedkfoldk","text":"StratifiedKFold ( n_splits = 5 , n_repeats = 10 , random_state = None ) RepeatedKFold \u91cd\u590d K-Fold n \u6b21\u3002\u5f53\u9700\u8981\u8fd0\u884c\u65f6\u53ef\u4ee5\u4f7f\u7528\u5b83 KFold n \u6b21\uff0c \u5c3d\u91cf\u5728\u6bcf\u6b21\u91cd\u590d\u4e2d\u4ea7\u751f\u4e0d\u540c\u7684\u5206\u5272 \u3002 # 2\u6298 K-Fold \u91cd\u590d 2 \u6b21\u7684\u793a\u4f8b: from sklearn.model_selection import RepeatedKFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) rkf = RepeatedKFold ( n_splits = 2 , n_repeats = 2 , random_state = 2652124 ) for train_index , test_index in rkf . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) TRAIN: [0 1] TEST: [2 3] ------------------------------ TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [1 2] TEST: [0 3] ------------------------------ TRAIN: [0 3] TEST: [1 2] ------------------------------","title":"RepeatedKFold\uff1a\u91cd\u590dK\u6298\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#repeatedstratifiedkfoldk","text":"RepeatedStratifiedKFold ( n_splits = 5 , n_repeats = 10 , random_state = None ) RepeatedStratifiedKFold.split \u540c\u6837\u6709\u4e00\u4e2a\u65e0\u6548\u7684 groups \u53c2\u6570\uff0c\u5728\u5185\u90e8 groups \u603b\u662f\u9ed8\u8ba4\u4e3aY \u5206\u7c7b\u5373\u5206\u5c42\u3002 from sklearn.model_selection import RepeatedStratifiedKFold X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) rskf = RepeatedStratifiedKFold ( n_splits = 2 , n_repeats = 2 ) for train_index , test_index in rskf . split ( X , y ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] TRAIN: [1 2] TEST: [0 3] TRAIN: [0 3] TEST: [1 2] TRAIN: [0 3] TEST: [1 2] TRAIN: [1 2] TEST: [0 3]","title":"RepeatedStratifiedKFold\uff1a\u91cd\u590d\u5206\u5c42K\u6298\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#leaveoneout","text":"LeaveOneOut () \u4f1a\u8fd4\u56de$C_n^1$\u5bf9\u8bad\u7ec3\u3001\u6d4b\u8bd5\u6570\u636e\u96c6\u3002 from sklearn.model_selection import LeaveOneOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) loo = LeaveOneOut () loo . get_n_splits ( X ) print ( loo ) for train_index , test_index in loo . split ( X ): print ( \"TRAIN\u7d22\u5f15:\" , train_index , \"TEST\u7d22\u5f15:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeaveOneOut() TRAIN\u7d22\u5f15: [1 2 3] TEST\u7d22\u5f15: [0] ------------------------------ TRAIN\u7d22\u5f15: [0 2 3] TEST\u7d22\u5f15: [1] ------------------------------ TRAIN\u7d22\u5f15: [0 1 3] TEST\u7d22\u5f15: [2] ------------------------------ TRAIN\u7d22\u5f15: [0 1 2] TEST\u7d22\u5f15: [3] ------------------------------","title":"LeaveOneOut\uff1a\u7559\u4e00\u6cd5"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#leavepoutp","text":"\u6d4b\u8bd5\u6570\u636e\u7684\u53ef\u80fd\u7ec4\u6570\u4e3a$C_n^P$\u3002 LeavePOut ( p ) from sklearn.model_selection import LeavePOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) lpo = LeavePOut ( 2 ) lpo . get_n_splits ( X ) print ( lpo ) for train_index , test_index in lpo . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeavePOut(p=2) TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [1 3] TEST: [0 2] ------------------------------ TRAIN: [1 2] TEST: [0 3] ------------------------------ TRAIN: [0 3] TEST: [1 2] ------------------------------ TRAIN: [0 2] TEST: [1 3] ------------------------------ TRAIN: [0 1] TEST: [2 3] ------------------------------","title":"LeavePOut\uff1a\u7559P\u6cd5"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#leaveonegroupout","text":"\u4e0e\u7559\u4e00\u6cd5\u76f8\u4f3c\uff0c\u53ea\u662f\u7559\u4e00\u6cd5\u76f8\u5bf9\u4e8e\u5355\u4e2a\u5143\u7d20\uff0c\u7559\u4e00\u7ec4\u76f8\u5bf9\u4e8e\u4e00\u7ec4\u5143\u7d20\u3002 from sklearn.model_selection import LeaveOneGroupOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ]]) y = np . array ([ 1 , 2 , 1 , 2 ]) groups = np . array ([ 1 , 1 , 2 , 2 ]) logo = LeaveOneGroupOut () # 'groups' is always required ## group \u53c2\u6570\u4e0d\u4f1a\u9ed8\u8ba4\u4e3ay\u7684label logo . get_n_splits ( X , y , groups ) #logo.get_n_splits(groups=groups) # 'groups' is always required print ( logo ) for train_index , test_index in logo . split ( X , y , groups ): print ( \" \\n \" , \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeaveOneGroupOut() TRAIN: [2 3] TEST: [0 1] ------------------------------ TRAIN: [0 1] TEST: [2 3] ------------------------------","title":"LeaveOneGroupOut\uff1a\u7559\u4e00\u7ec4"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#leavepgroupsoutp","text":"from sklearn.model_selection import LeavePGroupsOut X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ]]) y = np . array ([ 1 , 2 , 1 ]) groups = np . array ([ 1 , 2 , 3 ]) lpgo = LeavePGroupsOut ( n_groups = 2 ) lpgo . get_n_splits ( X , y , groups ) # 'groups' is always required print ( lpgo ) for train_index , test_index in lpgo . split ( X , y , groups ): print ( \" \\n \" , \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] print ( \"------------------------------\" ) LeavePGroupsOut(n_groups=2) TRAIN: [2] TEST: [0 1] ------------------------------ TRAIN: [1] TEST: [0 2] ------------------------------ TRAIN: [0] TEST: [1 2] ------------------------------","title":"LeavePGroupsOut\uff1a\u7559P\u7ec4"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#predefinedsplit","text":"from sklearn.model_selection import PredefinedSplit X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 1 , 2 ], [ 3 , 4 ]]) y = np . array ([ 0 , 0 , 1 , 1 ]) test_fold = [ 0 , 1 , - 1 , 1 ] \"\"\" test_fold = [0, 1, -1, 1] \u8868\u793a\u5728\u7b2c\u4e00\u4e2a\u9a8c\u8bc1\u96c6\u5305\u542b test_fold\u4e2d0\u5143\u7d20\u5bf9\u5e94\u7d22\u5f15\u7684\u6837\u672c \u7b2c\u4e8c\u4e2a\u9a8c\u8bc1\u96c6\u5305\u542btest_fold\u4e2d1\u5143\u7d20\u5bf9\u5e94\u7d22\u5f15\u7684\u6837\u672c \u7d22\u5f15\u4e3a2\u7684\u6837\u672c\uff08\u7b2c\u4e09\u4e2a\u6837\u672c\uff09\u4e0d\u5305\u542b\u5728\u4efb\u4f55\u9a8c\u8bc1\u96c6\uff0c\u53ea\u5728\u8bad\u7ec3\u96c6 \u53ef\u89c1\uff0ctest_fold\u4f1a\u51b3\u5b9a\u4ea7\u751f\u7684\u62c6\u5206\u6b21\u6570\uff0c\u8fd9\u91cc\u62c6\u5206\u6b21\u6570\u5b9e\u9645\u4e0a\u662f2\uff0c\u56e0\u4e3a1\u548c1\u91cd\u590d \u5c06\u8bad\u7ec3\u96c6\u5bf9\u5e94\u7684index\u8bbe\u4e3a-1\uff0c\u8868\u793a\u6c38\u8fdc\u4e0d\u5212\u5206\u5230\u9a8c\u8bc1\u96c6\u4e2d \"\"\" ps = PredefinedSplit ( test_fold ) ps . get_n_splits () print ( ps ) for train_index , test_index in ps . split (): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X [ train_index ], X [ test_index ] y_train , y_test = y [ train_index ], y [ test_index ] PredefinedSplit(test_fold=array([ 0, 1, -1, 1])) TRAIN: [1 2 3] TEST: [0] TRAIN: [0 2] TEST: [1 3]","title":"PredefinedSplit\uff1a\u9884\u5b9a\u4e49\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#shufflesplit","text":"\u5c06\u6837\u672c\u96c6\u5408\u968f\u673a\u201c\u6253\u6563\u201d\u540e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3002 ShuffleSplit ( n_splits = 10 , test_size = \u2019 default \u2019 , train_size = None , random_state = None ) from sklearn.model_selection import ShuffleSplit X = np . array ([[ 1 , 2 ], [ 3 , 4 ], [ 5 , 6 ], [ 7 , 8 ], [ 3 , 4 ], [ 5 , 6 ]]) y = np . array ([ 1 , 2 , 1 , 2 , 1 , 2 ]) rs = ShuffleSplit ( n_splits = 5 , test_size =. 25 , random_state = 0 ) rs . get_n_splits ( X ) print ( rs ) for train_index , test_index in rs . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) print ( \"----------------------------\" ) ShuffleSplit(n_splits=5, random_state=0, test_size=0.25, train_size=None) TRAIN: [1 3 0 4] TEST: [5 2] ---------------------------- TRAIN: [4 0 2 5] TEST: [1 3] ---------------------------- TRAIN: [1 2 4 0] TEST: [3 5] ---------------------------- TRAIN: [3 4 1 0] TEST: [5 2] ---------------------------- TRAIN: [3 5 1 0] TEST: [2 4] ---------------------------- rs = ShuffleSplit ( n_splits = 5 , train_size = 0.5 , test_size =. 25 , random_state = 0 ) for train_index , test_index in rs . split ( X ): print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) print ( \"----------------------------\" ) TRAIN: [1 3 0] TEST: [5 2] ---------------------------- TRAIN: [4 0 2] TEST: [1 3] ---------------------------- TRAIN: [1 2 4] TEST: [3 5] ---------------------------- TRAIN: [3 4 1] TEST: [5 2] ---------------------------- TRAIN: [3 5 1] TEST: [2 4] ----------------------------","title":"ShuffleSplit\uff1a\u968f\u673a\u62c6\u5206"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#groupshufflesplit","text":"","title":"GroupShuffleSplit"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#stratifiedshufflesplit","text":"","title":"StratifiedShuffleSplit"},{"location":"scikit-learn/11.5.%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE.html#timeseriessplit","text":"","title":"TimeSeriesSplit"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html","text":"from pandas import DataFrame Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.05 sklearn version: 0.22.1 \u6a21\u578b\u9a8c\u8bc1\u51fd\u6570 Model validation sklearn \u63d0\u4f9b\u4e866\u4e2a\u51fd\u6570\u7528\u6765\u9a8c\u8bc1\u6a21\u578b\uff1a \u51fd\u6570 \u8bf4\u660e cross_validate(estimator, X) \u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u8bc4\u4f30\u6307\u6807\uff0c\u5e76\u8bb0\u5f55\u62df\u5408/\u5f97\u5206\u65f6\u95f4 cross_val_predict(estimator, X) \u4e3a\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u70b9\u751f\u6210\u4ea4\u53c9\u9a8c\u8bc1\u7684\u4f30\u8ba1 cross_val_score(estimator, X) \u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u8bc4\u4f30\u6307\u6807 learning_curve(estimator, X, y) \u5b66\u4e60\u66f2\u7ebf permutation_test_score(\u2026) \u901a\u8fc7\u91cd\u6392\u5217\u6837\u672c\u7684label\uff0c\u4f30\u8ba1\u4ea4\u53c9\u9a8c\u8bc1\u7684\u663e\u8457\u6027 validation_curve(estimator, \u2026) \u9a8c\u8bc1\u66f2\u7ebf cross_val_score:\u4ea4\u53c9\u8bc4\u5206 cross_val_score\u4f7f\u7528\u62c6\u5206\u5668\u628a\u6570\u636e\u62c6\u5206\u4e3ak\u4efd\uff0c\u4f7f\u7528k-1\u4efd\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u518d\u4f7f\u7528\u5269\u4e0b\u76841\u4efd\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u8bc4\u5206\uff0c\u8fd4\u56de\u6bcf\u6b21\u6d4b\u8bd5\u8bc4\u5206\u503c\u3002 cross_val_score ( estimator , X , y = None , groups = None , scoring = None , cv = None , n_jobs = 1 , verbose = 0 , fit_params = None , pre_dispatch = '2*n_jobs' ) y \uff1a\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u5c1d\u8bd5\u9884\u6d4b\u7684\u76ee\u6807\u53d8\u91cf groups \uff1alike-array\uff0cwith shape (n _samples,), optional\u3002\u5206\u7ec4\u6570\u7ec4\u96c6\u7684\u6837\u672c\u7ec4\u6807\u7b7e\u3002 scoring \uff1a cv \uff1a\u4ea4\u53c9\u9a8c\u8bc1\u62c6\u5206\u6570\u636e\u96c6\u7684\u7b56\u7565\u3002\u53ef\u80fd\u7684\u53d6\u503c\u4e3a\uff1a \u5bf9\u4e8einteger\u6216None\u7684\u8f93\u5165\uff0c\u5982\u679c\u4f30\u8ba1\u5668\u662f\u4e00\u4e2a\u5206\u7c7b\u5668\uff0c\u540c\u65f6y\u662feither binary \u6216\u8005\u591a\u5206\u7c7b\uff0c\u5c06\u4f1a\u9ed8\u8ba4\u4f7f\u7528StratifiedKFold\u62c6\u5206\u5668\uff0c\u5176\u4ed6\u60c5\u51b5\uff0c\u5c06\u4f7f\u7528KFold\u62c6\u5206\u5668\u3002 None \uff0c\u9ed8\u8ba4\u4f7f\u75283-fold cross vaildation integer \uff0c\u6307\u5b9a\u4f7f\u7528\u4f55\u79cdKFold CV splitter \uff0c\u4ea4\u53c9\u9a8c\u8bc1\u751f\u6210\u5668\u5bf9\u8c61 \u4e00\u4e2a\u53ef\u4ea7\u751f\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7684\u8fed\u4ee3\u5668 n_jobs \uff1ainteger\uff0c\u7528\u4e8e\u8ba1\u7b97\u7684CPU\u6570\u91cf\uff0c-1\u8868\u793a\u4f7f\u7528\u6240\u6709CPU\u3002 verbose : integer, optional\uff0cThe verbosity level\u3002 fit_params \uff1adict\uff0c\u8981\u4f20\u9012\u7ed9\u4f30\u8ba1\u5668\u7684\u53c2\u6570\u3002 from sklearn.model_selection import cross_val_score from sklearn.datasets import load_wine from sklearn.svm import SVC wine = load_wine () svc = SVC ( kernel = 'linear' ) scores = cross_val_score ( svc , wine . data , wine . target ) print ( '\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\uff1a {} ' . format ( scores )) \u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\uff1a[0.88888889 0.94444444 0.97222222 1. 1. ] cross_validate\uff1a\u4ea4\u53c9\u8bc4\u5206 cross_validate \u548c cross_val_score \u7684\u4e0d\u540c\u5728\u4e8e scoring \u53c2\u6570\u548c\u8fd4\u56de\u503c\uff1a \u8bc4\u4f30\u7684\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u591a\u4e2a\u6307\u6807 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u62df\u5408\u65f6\u95f4\u3001\u6253\u5206\u65f6\u95f4\u3001\u6d4b\u8bd5\u5206\u6570\u3001\u8bad\u7ec3\u5206\u6570\u7684\u5b57\u5178\u3002 \u53c2\u6570\uff1a scoring\uff1a \u5355\u4e2a\u5b57\u7b26\u4e32\uff08\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u8bc4\u5206\u65b9\u6cd5\uff0c\u53c2\u89c1 The scoring parameter: defining model evaluation rules\uff09 \u53ef\u5f15\u7528\u5bf9\u8c61\uff08\u53ef\u81ea\u5b9a\u4e49\u8bc4\u5206\u65b9\u6cd5\uff0c\u53c2\u89c1 Defining your scoring strategy from metric functions\uff09 \u5355\u4e2a\u5b57\u7b26\u4e32\uff1a from sklearn.model_selection import cross_validate from sklearn.datasets import load_wine from sklearn.svm import SVC import pprint wine = load_wine () svc = SVC ( kernel = 'linear' ) scores = cross_validate ( svc , wine . data , wine . target , scoring = \"precision_macro\" ) print ( type ( scores )) DataFrame ( scores ) <class 'dict'> fit_time score_time test_score 0 0.104000 0.002001 0.897436 1 0.119005 0.002005 0.944056 2 0.140989 0.002004 0.977778 3 0.121999 0.002005 1.000000 4 0.099990 0.002003 1.000000 \u591a\u6307\u6807\u6307\u5b9a\u7684\u65f6\u5019\u53ef\u4ee5\u662f\u4e00\u4e2alist\uff0ctuple\u6216\u8005set\uff0c\u5143\u7d20\u662f\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4e00\u4e9b\u6307\u6807\u540d\u79f0\uff1a from sklearn.metrics.scorer import make_scorer from sklearn.metrics import recall_score scoring = { 'prec_macro' : 'precision_macro' , 'rec_micro' : make_scorer ( recall_score , average = 'macro' )} scores = cross_validate ( svc , wine . data , wine . target , scoring = scoring ) print ( type ( scores )) DataFrame ( scores ) <class 'dict'> fit_time score_time test_prec_macro test_rec_micro 0 0.112014 0.001981 0.897436 0.904762 1 0.074024 0.002000 0.944056 0.952381 2 0.124978 0.001999 0.977778 0.972222 3 0.097982 0.004998 1.000000 1.000000 4 0.119018 0.002000 1.000000 1.000000 \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u6307\u6807\u540d\u79f0\u5bf9\u5e94\u5230\u9884\u5148\u5b9a\u4e49\u597d\u7684\u8bc4\u5206\u51fd\u6570\uff1a scoring = { 'prec_macro' : 'precision_macro' , 'rec_micro' : make_scorer ( recall_score , average = 'macro' )} scores = cross_validate ( svc , wine . data , wine . target , scoring = scoring ) print ( type ( scores )) DataFrame ( scores ) <class 'dict'> fit_time score_time test_prec_macro test_rec_micro 0 0.078000 0.003024 0.897436 0.904762 1 0.078000 0.002000 0.944056 0.952381 2 0.095998 0.001001 0.977778 0.972222 3 0.087999 0.002000 1.000000 1.000000 4 0.090978 0.186004 1.000000 1.000000 cross_val_predict\uff1a\u4ea4\u53c9\u9884\u6d4b cross_val_predict \u7684\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\u4e8e cross_val_score \uff0c\u4f46 cross_val_predict \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u7684\u9884\u6d4b\u503c\uff0c\u800c\u4e0d\u662f\u8bc4\u5206\u6807\u51c6\u3002 \u5b83\u7684\u8fd0\u884c\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u6cd5\u8ba1\u7b97\u51fa\u6bcf\u6b21\u5212\u5206\u4e2d\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u503c\uff0c\u76f4\u5230\u6240\u6709\u6570\u636e\u90fd\u6709\u4e86\u9884\u6d4b\u503c\u3002\u5047\u5982\u6570\u636e\u5212\u5206\u4e3a$[1,2,3,4,5]$\u4efd\uff0c\u5b83\u5148\u7528$[1,2,3,4]$\u8bad\u7ec3\u6a21\u578b\uff0c\u8ba1\u7b97\u51fa\u6765\u7b2c$5$\u4efd\u7684\u9884\u6d4b\u503c\uff0c\u7136\u540e\u7528$[1,2,3,5]$\u8ba1\u7b97\u51fa\u7b2c4\u4efd\u7684\u9884\u6d4b\u503c\uff0c\u76f4\u5230\u90fd\u7ed3\u675f\u4e3a\u6b62\u3002 from sklearn import datasets , linear_model from sklearn.model_selection import cross_val_predict diabetes = datasets . load_diabetes () X = diabetes . data [: 150 ] y = diabetes . target [: 150 ] lasso = linear_model . Lasso () y_pred = cross_val_predict ( lasso , X , y , cv = 3 ) permutation_test_score\uff1a\u663e\u8457\u6027\u68c0\u9a8c \u4e3a\u4e86\u68c0\u9a8c\u4ea4\u53c9\u9a8c\u8bc1\u7684\u5f97\u5206\u662f\u5426\u6709\u610f\u4e49\uff0csklearn\u63d0\u4f9b\u4e86\u4e00\u4e2a\u663e\u8457\u6027\u68c0\u9a8c\u7684\u51fd\u6570\uff0c\u5176\u539f\u7406\u5982\u4e0b\uff1a \u5148\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u5f97\u51fa\u6a21\u578b\u8bc4\u5206\u3002 \u6253\u4e71 y\uff08\u5206\u7c7b\u6807\u7b7e\uff09 \u7684\u6392\u5e8f\uff0c \u5728\u6807\u7b7e\u968f\u673a\u6392\u5217\u540e\u91cd\u590d\u5206\u7c7b\u8fc7\u7a0b\u7684\u6280\u672f\u3002 \u7136\u540e p \u503c\u7531\u5f97\u5230\u7684\u5206\u6570\u5927\u4e8e\u6700\u521d\u5f97\u5230\u7684\u5206\u7c7b\u5206\u6570\u7684\u5206\u6570\u767e\u5206\u6bd4\u7ed9\u51fa\u3002 # https://scikit-learn.org/stable/auto_examples/feature_selection/plot_permutation_test_for_classification.html#sphx-glr-auto-examples-feature-selection-plot-permutation-test-for-classification-py # Author: Alexandre Gramfort <alexandre.gramfort@inria.fr> # License: BSD 3 clause # print(__doc__) # import numpy as np # import matplotlib.pyplot as plt # from sklearn.svm import SVC # from sklearn.model_selection import StratifiedKFold # from sklearn.model_selection import permutation_test_score # from sklearn import datasets # # ############################################################################# # # Loading a dataset # iris = datasets.load_iris() # X = iris.data # y = iris.target # n_classes = np.unique(y).size # # Some noisy data not correlated # random = np.random.RandomState(seed=0) # E = random.normal(size=(len(X), 2200)) # # Add noisy data to the informative features for make the task harder # X = np.c_[X, E] # svm = SVC(kernel='linear') # cv = StratifiedKFold(2) # score, permutation_scores, pvalue = permutation_test_score( # svm, X, y, scoring=\"accuracy\", cv=cv, n_permutations=100, n_jobs=1) # print(\"Classification score %s (pvalue : %s)\" % (score, pvalue)) # # ############################################################################# # # View histogram of permutation scores # plt.hist(permutation_scores, 20, label='Permutation scores', # edgecolor='black') # ylim = plt.ylim() # # BUG: vlines(..., linestyle='--') fails on older versions of matplotlib # # plt.vlines(score, ylim[0], ylim[1], linestyle='--', # # color='g', linewidth=3, label='Classification Score' # # ' (pvalue %s)' % pvalue) # # plt.vlines(1.0 / n_classes, ylim[0], ylim[1], linestyle='--', # # color='k', linewidth=3, label='Luck') # plt.plot(2 * [score], ylim, '--g', linewidth=3, # label='Classification Score' # ' (pvalue %s)' % pvalue) # plt.plot(2 * [1. / n_classes], ylim, '--k', linewidth=3, label='Luck') # plt.ylim(ylim) # plt.legend() # plt.xlabel('Score') # plt.show() validation_curve # https://scikit-learn.org/stable/auto_examples/model_selection/plot_validation_curve.html#sphx-glr-auto-examples-model-selection-plot-validation-curve-py learning_curve # https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.learning_curve.html#sklearn.model_selection.learning_curve","title":"11.6.\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#_1","text":"","title":"\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#model-validation","text":"sklearn \u63d0\u4f9b\u4e866\u4e2a\u51fd\u6570\u7528\u6765\u9a8c\u8bc1\u6a21\u578b\uff1a \u51fd\u6570 \u8bf4\u660e cross_validate(estimator, X) \u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u8bc4\u4f30\u6307\u6807\uff0c\u5e76\u8bb0\u5f55\u62df\u5408/\u5f97\u5206\u65f6\u95f4 cross_val_predict(estimator, X) \u4e3a\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u70b9\u751f\u6210\u4ea4\u53c9\u9a8c\u8bc1\u7684\u4f30\u8ba1 cross_val_score(estimator, X) \u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u8bc4\u4f30\u6307\u6807 learning_curve(estimator, X, y) \u5b66\u4e60\u66f2\u7ebf permutation_test_score(\u2026) \u901a\u8fc7\u91cd\u6392\u5217\u6837\u672c\u7684label\uff0c\u4f30\u8ba1\u4ea4\u53c9\u9a8c\u8bc1\u7684\u663e\u8457\u6027 validation_curve(estimator, \u2026) \u9a8c\u8bc1\u66f2\u7ebf","title":"Model validation"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#cross_val_score","text":"cross_val_score\u4f7f\u7528\u62c6\u5206\u5668\u628a\u6570\u636e\u62c6\u5206\u4e3ak\u4efd\uff0c\u4f7f\u7528k-1\u4efd\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u518d\u4f7f\u7528\u5269\u4e0b\u76841\u4efd\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u8bc4\u5206\uff0c\u8fd4\u56de\u6bcf\u6b21\u6d4b\u8bd5\u8bc4\u5206\u503c\u3002 cross_val_score ( estimator , X , y = None , groups = None , scoring = None , cv = None , n_jobs = 1 , verbose = 0 , fit_params = None , pre_dispatch = '2*n_jobs' ) y \uff1a\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u5c1d\u8bd5\u9884\u6d4b\u7684\u76ee\u6807\u53d8\u91cf groups \uff1alike-array\uff0cwith shape (n _samples,), optional\u3002\u5206\u7ec4\u6570\u7ec4\u96c6\u7684\u6837\u672c\u7ec4\u6807\u7b7e\u3002 scoring \uff1a cv \uff1a\u4ea4\u53c9\u9a8c\u8bc1\u62c6\u5206\u6570\u636e\u96c6\u7684\u7b56\u7565\u3002\u53ef\u80fd\u7684\u53d6\u503c\u4e3a\uff1a \u5bf9\u4e8einteger\u6216None\u7684\u8f93\u5165\uff0c\u5982\u679c\u4f30\u8ba1\u5668\u662f\u4e00\u4e2a\u5206\u7c7b\u5668\uff0c\u540c\u65f6y\u662feither binary \u6216\u8005\u591a\u5206\u7c7b\uff0c\u5c06\u4f1a\u9ed8\u8ba4\u4f7f\u7528StratifiedKFold\u62c6\u5206\u5668\uff0c\u5176\u4ed6\u60c5\u51b5\uff0c\u5c06\u4f7f\u7528KFold\u62c6\u5206\u5668\u3002 None \uff0c\u9ed8\u8ba4\u4f7f\u75283-fold cross vaildation integer \uff0c\u6307\u5b9a\u4f7f\u7528\u4f55\u79cdKFold CV splitter \uff0c\u4ea4\u53c9\u9a8c\u8bc1\u751f\u6210\u5668\u5bf9\u8c61 \u4e00\u4e2a\u53ef\u4ea7\u751f\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u7684\u8fed\u4ee3\u5668 n_jobs \uff1ainteger\uff0c\u7528\u4e8e\u8ba1\u7b97\u7684CPU\u6570\u91cf\uff0c-1\u8868\u793a\u4f7f\u7528\u6240\u6709CPU\u3002 verbose : integer, optional\uff0cThe verbosity level\u3002 fit_params \uff1adict\uff0c\u8981\u4f20\u9012\u7ed9\u4f30\u8ba1\u5668\u7684\u53c2\u6570\u3002 from sklearn.model_selection import cross_val_score from sklearn.datasets import load_wine from sklearn.svm import SVC wine = load_wine () svc = SVC ( kernel = 'linear' ) scores = cross_val_score ( svc , wine . data , wine . target ) print ( '\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\uff1a {} ' . format ( scores )) \u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\uff1a[0.88888889 0.94444444 0.97222222 1. 1. ]","title":"cross_val_score:\u4ea4\u53c9\u8bc4\u5206"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#cross_validate","text":"cross_validate \u548c cross_val_score \u7684\u4e0d\u540c\u5728\u4e8e scoring \u53c2\u6570\u548c\u8fd4\u56de\u503c\uff1a \u8bc4\u4f30\u7684\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u591a\u4e2a\u6307\u6807 \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u62df\u5408\u65f6\u95f4\u3001\u6253\u5206\u65f6\u95f4\u3001\u6d4b\u8bd5\u5206\u6570\u3001\u8bad\u7ec3\u5206\u6570\u7684\u5b57\u5178\u3002 \u53c2\u6570\uff1a scoring\uff1a \u5355\u4e2a\u5b57\u7b26\u4e32\uff08\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u8bc4\u5206\u65b9\u6cd5\uff0c\u53c2\u89c1 The scoring parameter: defining model evaluation rules\uff09 \u53ef\u5f15\u7528\u5bf9\u8c61\uff08\u53ef\u81ea\u5b9a\u4e49\u8bc4\u5206\u65b9\u6cd5\uff0c\u53c2\u89c1 Defining your scoring strategy from metric functions\uff09 \u5355\u4e2a\u5b57\u7b26\u4e32\uff1a from sklearn.model_selection import cross_validate from sklearn.datasets import load_wine from sklearn.svm import SVC import pprint wine = load_wine () svc = SVC ( kernel = 'linear' ) scores = cross_validate ( svc , wine . data , wine . target , scoring = \"precision_macro\" ) print ( type ( scores )) DataFrame ( scores ) <class 'dict'> fit_time score_time test_score 0 0.104000 0.002001 0.897436 1 0.119005 0.002005 0.944056 2 0.140989 0.002004 0.977778 3 0.121999 0.002005 1.000000 4 0.099990 0.002003 1.000000 \u591a\u6307\u6807\u6307\u5b9a\u7684\u65f6\u5019\u53ef\u4ee5\u662f\u4e00\u4e2alist\uff0ctuple\u6216\u8005set\uff0c\u5143\u7d20\u662f\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4e00\u4e9b\u6307\u6807\u540d\u79f0\uff1a from sklearn.metrics.scorer import make_scorer from sklearn.metrics import recall_score scoring = { 'prec_macro' : 'precision_macro' , 'rec_micro' : make_scorer ( recall_score , average = 'macro' )} scores = cross_validate ( svc , wine . data , wine . target , scoring = scoring ) print ( type ( scores )) DataFrame ( scores ) <class 'dict'> fit_time score_time test_prec_macro test_rec_micro 0 0.112014 0.001981 0.897436 0.904762 1 0.074024 0.002000 0.944056 0.952381 2 0.124978 0.001999 0.977778 0.972222 3 0.097982 0.004998 1.000000 1.000000 4 0.119018 0.002000 1.000000 1.000000 \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u6307\u6807\u540d\u79f0\u5bf9\u5e94\u5230\u9884\u5148\u5b9a\u4e49\u597d\u7684\u8bc4\u5206\u51fd\u6570\uff1a scoring = { 'prec_macro' : 'precision_macro' , 'rec_micro' : make_scorer ( recall_score , average = 'macro' )} scores = cross_validate ( svc , wine . data , wine . target , scoring = scoring ) print ( type ( scores )) DataFrame ( scores ) <class 'dict'> fit_time score_time test_prec_macro test_rec_micro 0 0.078000 0.003024 0.897436 0.904762 1 0.078000 0.002000 0.944056 0.952381 2 0.095998 0.001001 0.977778 0.972222 3 0.087999 0.002000 1.000000 1.000000 4 0.090978 0.186004 1.000000 1.000000","title":"cross_validate\uff1a\u4ea4\u53c9\u8bc4\u5206"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#cross_val_predict","text":"cross_val_predict \u7684\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\u4e8e cross_val_score \uff0c\u4f46 cross_val_predict \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u7684\u9884\u6d4b\u503c\uff0c\u800c\u4e0d\u662f\u8bc4\u5206\u6807\u51c6\u3002 \u5b83\u7684\u8fd0\u884c\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a \u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u7684\u65b9\u6cd5\u8ba1\u7b97\u51fa\u6bcf\u6b21\u5212\u5206\u4e2d\u6d4b\u8bd5\u96c6\u7684\u9884\u6d4b\u503c\uff0c\u76f4\u5230\u6240\u6709\u6570\u636e\u90fd\u6709\u4e86\u9884\u6d4b\u503c\u3002\u5047\u5982\u6570\u636e\u5212\u5206\u4e3a$[1,2,3,4,5]$\u4efd\uff0c\u5b83\u5148\u7528$[1,2,3,4]$\u8bad\u7ec3\u6a21\u578b\uff0c\u8ba1\u7b97\u51fa\u6765\u7b2c$5$\u4efd\u7684\u9884\u6d4b\u503c\uff0c\u7136\u540e\u7528$[1,2,3,5]$\u8ba1\u7b97\u51fa\u7b2c4\u4efd\u7684\u9884\u6d4b\u503c\uff0c\u76f4\u5230\u90fd\u7ed3\u675f\u4e3a\u6b62\u3002 from sklearn import datasets , linear_model from sklearn.model_selection import cross_val_predict diabetes = datasets . load_diabetes () X = diabetes . data [: 150 ] y = diabetes . target [: 150 ] lasso = linear_model . Lasso () y_pred = cross_val_predict ( lasso , X , y , cv = 3 )","title":"cross_val_predict\uff1a\u4ea4\u53c9\u9884\u6d4b"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#permutation_test_score","text":"\u4e3a\u4e86\u68c0\u9a8c\u4ea4\u53c9\u9a8c\u8bc1\u7684\u5f97\u5206\u662f\u5426\u6709\u610f\u4e49\uff0csklearn\u63d0\u4f9b\u4e86\u4e00\u4e2a\u663e\u8457\u6027\u68c0\u9a8c\u7684\u51fd\u6570\uff0c\u5176\u539f\u7406\u5982\u4e0b\uff1a \u5148\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u5f97\u51fa\u6a21\u578b\u8bc4\u5206\u3002 \u6253\u4e71 y\uff08\u5206\u7c7b\u6807\u7b7e\uff09 \u7684\u6392\u5e8f\uff0c \u5728\u6807\u7b7e\u968f\u673a\u6392\u5217\u540e\u91cd\u590d\u5206\u7c7b\u8fc7\u7a0b\u7684\u6280\u672f\u3002 \u7136\u540e p \u503c\u7531\u5f97\u5230\u7684\u5206\u6570\u5927\u4e8e\u6700\u521d\u5f97\u5230\u7684\u5206\u7c7b\u5206\u6570\u7684\u5206\u6570\u767e\u5206\u6bd4\u7ed9\u51fa\u3002 # https://scikit-learn.org/stable/auto_examples/feature_selection/plot_permutation_test_for_classification.html#sphx-glr-auto-examples-feature-selection-plot-permutation-test-for-classification-py # Author: Alexandre Gramfort <alexandre.gramfort@inria.fr> # License: BSD 3 clause # print(__doc__) # import numpy as np # import matplotlib.pyplot as plt # from sklearn.svm import SVC # from sklearn.model_selection import StratifiedKFold # from sklearn.model_selection import permutation_test_score # from sklearn import datasets # # ############################################################################# # # Loading a dataset # iris = datasets.load_iris() # X = iris.data # y = iris.target # n_classes = np.unique(y).size # # Some noisy data not correlated # random = np.random.RandomState(seed=0) # E = random.normal(size=(len(X), 2200)) # # Add noisy data to the informative features for make the task harder # X = np.c_[X, E] # svm = SVC(kernel='linear') # cv = StratifiedKFold(2) # score, permutation_scores, pvalue = permutation_test_score( # svm, X, y, scoring=\"accuracy\", cv=cv, n_permutations=100, n_jobs=1) # print(\"Classification score %s (pvalue : %s)\" % (score, pvalue)) # # ############################################################################# # # View histogram of permutation scores # plt.hist(permutation_scores, 20, label='Permutation scores', # edgecolor='black') # ylim = plt.ylim() # # BUG: vlines(..., linestyle='--') fails on older versions of matplotlib # # plt.vlines(score, ylim[0], ylim[1], linestyle='--', # # color='g', linewidth=3, label='Classification Score' # # ' (pvalue %s)' % pvalue) # # plt.vlines(1.0 / n_classes, ylim[0], ylim[1], linestyle='--', # # color='k', linewidth=3, label='Luck') # plt.plot(2 * [score], ylim, '--g', linewidth=3, # label='Classification Score' # ' (pvalue %s)' % pvalue) # plt.plot(2 * [1. / n_classes], ylim, '--k', linewidth=3, label='Luck') # plt.ylim(ylim) # plt.legend() # plt.xlabel('Score') # plt.show()","title":"permutation_test_score\uff1a\u663e\u8457\u6027\u68c0\u9a8c"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#validation_curve","text":"# https://scikit-learn.org/stable/auto_examples/model_selection/plot_validation_curve.html#sphx-glr-auto-examples-model-selection-plot-validation-curve-py","title":"validation_curve"},{"location":"scikit-learn/11.6.%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html#learning_curve","text":"# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.learning_curve.html#sklearn.model_selection.learning_curve","title":"learning_curve"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.10 sklearn version: 0.22.1 GridSearchCV\uff1a\u7f51\u683c\u641c\u7d22 GridSearchCV ( estimator , param_grid , scoring = None , fit_params = None , n_jobs = None , iid = 'warn' , refit = True , cv = 'warn' , verbose = 0 , pre_dispatch = '2*n_jobs' , error_score = 'raise' , return_train_score = 'warn' ) \u53c2\u6570\uff1a estimator \uff1a\u88ab\u5047\u5b9a\u4e3ascikit-learn\u7684\u4f30\u8ba1\u5668\u3002\u4f30\u8ba1\u5668\u9700\u8981\u63d0\u4f9b score \u65b9\u6cd5\uff0c\u5426\u5219\u5fc5\u987b\u4f20\u5165scoring\u53c2\u6570\u3002 param_grid \uff1adict or list of dictionaries\uff0c\u53c2\u6570\u540d\u5b57\u4f5c\u4e3a\u5b57\u5178\u7684key\uff0c\u53c2\u6570\u503c\u4f5c\u4e3a\u5bf9\u5e94key\u7684value\u3002 fit_params \uff1a\u4f20\u9012\u7ed9 fit \u65b9\u6cd5\u7684\u53c2\u6570 refit \uff1a\u4f7f\u7528\u6700\u4f73\u53c2\u6570\u91cd\u65b0\u62df\u5408\u4f30\u7b97\u5668\u3002\u5bf9\u4e8e\u591a\u6307\u6807\u8bc4\u4f30\uff0c\u8fd9\u9700\u8981\u662f\u4e00\u4e2a\u8868\u793ascorer\u7684\u5b57\u7b26\u4e32\uff0c\u8be5scorer\u5c06\u7528\u4e8e\u67e5\u627e\u6700\u4f73\u53c2\u6570\u4ee5\u6700\u7ec8\u91cd\u65b0\u62df\u5408\u4f30\u8ba1\u5668\u3002\u8fd8\u53ef\u4ee5\u5c06 refit \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5728\u7ed9\u5b9a cv_results_ \u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u6240\u9009\u7684 best_index_ \u3002 \u4f8b\u5b50 import sklearn.svm from sklearn.svm import SVC from sklearn.datasets import load_iris from sklearn.model_selection import GridSearchCV X , y = load_iris ( return_X_y = True ) SVM = SVC ( C = 1.0 , kernel = 'rbf' ) params = { \"C\" :[ 0.1 , 1.0 , 5.0 , 10.0 ], \"kernel\" :[ 'linear' , 'poly' , 'rbf' ] } grid_search = GridSearchCV ( SVM , params , cv = 5 ) grid_search . fit ( X , y ) # \u6a21\u578b\u6700\u9ad8\u5206\uff1a grid_search . score ( X , y ) # \u6700\u4f18\u53c2\u6570\uff1a grid_search . best_params_ {'C': 0.1, 'kernel': 'poly'} \u5c5e\u6027 cv_results_ \uff1a cv_results_ \u5c5e\u6027\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u50a8\u5b58\u4e86\u7f51\u683c\u641c\u7d22\u7684\u8be6\u7ec6\u7ed3\u679c\uff1a mean_fit_time \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u5728\u8bad\u7ec3\u6a21\u578b\u4e0a\u7684\u5e73\u5747\u7528\u65f6\u3002 std_fit_time \uff1a\u5404\u53c2\u6570\u7ec4\u5408\u5728\u8bad\u7ec3\u6a21\u578b\u4e0a\u6240\u7528\u65f6\u95f4\u7684\u6807\u51c6\u5dee\u3002 mean_test_score \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u7684\u5e73\u5747\u5f97\u5206\u3002 std_test_score \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u5f97\u5206\u7684\u6807\u51c6\u5dee\u3002 mean_score_time \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u6253\u5206\u6240\u7528\u65f6\u95f4\u7684\u5e73\u5747\u503c\u3002 std_score_time \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u6253\u5206\u6240\u7528\u65f6\u95f4\u7684\u6807\u51c6\u5dee\u3002 rank_test_score \uff1a\u5404\u53c2\u6570\u7ec4\u5408\u7684\u5f97\u5206\u6392\u540d\u3002 params \uff1a\u5404\u4e2a\u53c2\u6570\u7ec4\u5408\u3002 param_xxx \uff1a\u6a21\u578b\u5404\u4e2a\u8d85\u53c2\u6570\u5728\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u4e2d\u5bf9\u5e94\u7684\u53d6\u503c\u3002 splitx_test_score \uff1a\u4ea4\u53c9\u9a8c\u8bc1\u6bcf\u6b21\u62c6\u5206\u6570\u636e\u96c6\uff0c\u5404\u4e2a\u53c2\u6570\u7ec4\u5408\u7684\u5f97\u5206\u3002 best_index_ \uff1a\u6700\u4f73\u5019\u9009\u53c2\u6570\u7ec4\u5408\u5bf9\u5e94\u7684\uff08cv_results_\u6570\u7ec4\u7684\uff09\u7d22\u5f15\u3002 best_estimator_ \uff1a\u5f97\u5206\u6700\u9ad8\u7684 estimator\uff0c\u82e5 refit=False \uff0c\u8be5\u5c5e\u6027\u5219\u4e0d\u53ef\u7528\u3002 best_score_ \uff1a\u5f97\u5206\u6700\u9ad8\u7684estimator\u7684\u4ea4\u53c9\u9a8c\u8bc1\u5e73\u5747\u5f97\u5206\u3002 best_params_ \uff1a\u5f97\u5206\u6700\u9ad8\u7684\u53c2\u6570\u7ec4\u5408\u3002\u5bf9\u4e8emulti-metric evaluation\uff0c\u4ec5\u5f53 refit \u6307\u5b9a\u65f6\u624d\u53ef\u7528\u3002 n_splits_ \uff1a\u4ea4\u53c9\u9a8c\u8bc1\u62c6\u5206\u7684\u6570\u91cf\u3002 refit_time_ \uff1a\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\uff0c\u91cd\u65b0\u62df\u5408\u6700\u4f73\u6a21\u578b\u7684\u79d2\u6570\u3002 multimetric_ \uff1a\u903b\u8f91\u503c\uff0c\u662f\u5426\u4f7f\u7528\u591a\u4e2ametric\u8fdb\u884c\u8bc4\u4f30\u3002 classes_ \uff1a\u7c7b\u522b\u3002 \u65b9\u6cd5 \u65b9\u6cd5 \u8bf4\u660e decision_function(X) Call decision_function on the estimator with the best found parameters. fit(X[, y, groups]) Run fit with all sets of parameters. get_params() Get parameters for this estimator. inverse_transform(Xt) Call inverse_transform on the estimator with the best found params. predict(X) Call predict on the estimator with the best found parameters. predict_log_proba(X) Call predict_log_proba on the estimator with the best found parameters. predict_proba(X) Call predict_proba on the estimator with the best found parameters. score(X[, y]) Returns the score on the given data, if the estimator has been refit. set_params(**params) Set the parameters of this estimator. transform(X) Call transform on the estimator with the best found parameters. RandomizedSearchCV\uff1a\u968f\u673a\u641c\u7d22 \u4e0e GridSearchCV \u4e0d\u540c\u7684\u662f\uff0c\u968f\u673a\u641c\u7d22\uff08\u53ef\u80fd\uff09\u4e0d\u4f1a\u5c1d\u8bd5\u6240\u6709\u7684\u53c2\u6570\u7ec4\u5408\uff0c\u800c\u662f\u4ece\u6307\u5b9a\u7684\u5206\u5e03\u4e2d\u91c7\u6837\u56fa\u5b9a\u6570\u91cf\u7684\u53c2\u6570\u7ec4\u5408\u3002 \u5c1d\u8bd5\u7684\u53c2\u6570\u7ec4\u5408\u7684\u6570\u91cf\u662f\u7531 n_iter \u53c2\u6570\u6307\u5b9a\u3002 RandomizedSearchCV ( estimator , param_distributions , n_iter = 10 , scoring = None , n_jobs = None , iid = 'deprecated' , refit = True , cv = None , verbose = 0 , pre_dispatch = '2*n_jobs' , random_state = None , error_score = nan , return_train_score = False ) \u9664\u4e86 n_iter \u53c2\u6570\uff0c RandomizedSearchCV \u4e0e GridSearchCV \u7684\u53c2\u6570\u4e00\u81f4\uff0c\u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u662f\u4e00\u81f4\u7684\u3002 \u4f8b\u5b50 import sklearn.svm from sklearn.svm import SVC from sklearn.datasets import load_iris from scipy.stats import uniform from sklearn.model_selection import RandomizedSearchCV X , y = load_iris ( return_X_y = True ) SVM = SVC ( C = 1.0 , kernel = 'rbf' ) # params = {\"C\":[0.1, 1.0, 5.0, 10.0], # \"kernel\":['linear', 'poly', 'rbf'] # } params = { \"C\" : uniform ( loc = 0 , scale = 4 ), \"kernel\" :[ 'linear' , 'poly' , 'rbf' ] } random_search = RandomizedSearchCV ( SVM , params , cv = 5 ) random_search . fit ( X , y ) # \u6a21\u578b\u6700\u9ad8\u5206\uff1a random_search . score ( X , y ) # \u6700\u4f18\u53c2\u6570\uff1a random_search . best_params_ {'C': 1.2248642986661507, 'kernel': 'rbf'} ParameterGrid\uff1a\u53c2\u6570\u7ec4\u5408 ParameterGrid \u7c7b\u53ef\u4ee5\u6784\u9020\u51fa\u6240\u6709\u7684\u53c2\u6570\u7ec4\u5408\u3002 ParameterGrid ( param_grid ) \u4f8b\u5b50 from sklearn.model_selection import ParameterGrid param_grid = { 'a' : [ 1 , 2 ], 'b' : [ True , False ]} list ( ParameterGrid ( param_grid )) [{'a': 1, 'b': True}, {'a': 1, 'b': False}, {'a': 2, 'b': True}, {'a': 2, 'b': False}] ParameterSampler\uff1a\u53c2\u6570\u7ec4\u5408\u968f\u673a\u62bd\u6837 ParameterSampler \u7c7b\u6839\u636e\u7ed9\u5b9a\u5206\u5e03\u91c7\u6837\u7684\u53c2\u6570\u751f\u6210\u53c2\u6570\u7ec4\u5408\u3002 ParameterSampler ( param_distributions , n_iter , random_state = None ) \u4f8b\u5b50 from sklearn.model_selection import ParameterSampler param_grid = { 'a' : [ 1 , 2 ], 'b' : [ True , False ]} list ( ParameterSampler ( param_grid , n_iter = 3 )) [{'b': True, 'a': 1}, {'b': False, 'a': 2}, {'b': False, 'a': 1}] from scipy.stats import uniform from sklearn.model_selection import ParameterSampler param_grid = { 'a' : uniform ( loc = 0 , scale = 4 ), 'b' : [ True , False ]} list ( ParameterSampler ( param_grid , n_iter = 4 )) [{'a': 0.716982761404827, 'b': True}, {'a': 2.6603500613693383, 'b': False}, {'a': 1.7170489847529042, 'b': False}, {'a': 2.266735701973464, 'b': True}] fit_grid_point \u5bf9\u4e00\u7ec4\u53c2\u6570\u8fdb\u884c\u62df\u5408\uff0c\u8fd4\u56de\u8fd9\u7ec4\u53c2\u6570\u7684\u5f97\u5206\uff0c\u5df2\u7ecf\u6d4b\u8bd5\u6837\u672c\u7684\u6570\u91cf\u3002 fit_grid_point ( X , y , estimator , parameters , train , test , scorer , verbose , error_score = nan , fit_params ) \u4f8b\u5b50 from sklearn.svm import SVC from sklearn.datasets import load_iris from sklearn.metrics import accuracy_score , f1_score , make_scorer from sklearn.model_selection import fit_grid_point X , y = load_iris ( return_X_y = True ) SVM = SVC ( C = 1.0 , kernel = 'rbf' ) params = { \"C\" : 1.0 , \"kernel\" : 'linear' } fit_grid_point ( X , y , SVM , params , train = slice ( 0 , 100 , 1 ), test = slice ( 100 , 150 , 1 ), scorer = make_scorer ( f1_score ), verbose = 1 ) (0.0, {'C': 1.0, 'kernel': 'linear'}, 50)","title":"11.7.\u8d85\u53c2\u6570\u5bfb\u4f18"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#gridsearchcv","text":"GridSearchCV ( estimator , param_grid , scoring = None , fit_params = None , n_jobs = None , iid = 'warn' , refit = True , cv = 'warn' , verbose = 0 , pre_dispatch = '2*n_jobs' , error_score = 'raise' , return_train_score = 'warn' ) \u53c2\u6570\uff1a estimator \uff1a\u88ab\u5047\u5b9a\u4e3ascikit-learn\u7684\u4f30\u8ba1\u5668\u3002\u4f30\u8ba1\u5668\u9700\u8981\u63d0\u4f9b score \u65b9\u6cd5\uff0c\u5426\u5219\u5fc5\u987b\u4f20\u5165scoring\u53c2\u6570\u3002 param_grid \uff1adict or list of dictionaries\uff0c\u53c2\u6570\u540d\u5b57\u4f5c\u4e3a\u5b57\u5178\u7684key\uff0c\u53c2\u6570\u503c\u4f5c\u4e3a\u5bf9\u5e94key\u7684value\u3002 fit_params \uff1a\u4f20\u9012\u7ed9 fit \u65b9\u6cd5\u7684\u53c2\u6570 refit \uff1a\u4f7f\u7528\u6700\u4f73\u53c2\u6570\u91cd\u65b0\u62df\u5408\u4f30\u7b97\u5668\u3002\u5bf9\u4e8e\u591a\u6307\u6807\u8bc4\u4f30\uff0c\u8fd9\u9700\u8981\u662f\u4e00\u4e2a\u8868\u793ascorer\u7684\u5b57\u7b26\u4e32\uff0c\u8be5scorer\u5c06\u7528\u4e8e\u67e5\u627e\u6700\u4f73\u53c2\u6570\u4ee5\u6700\u7ec8\u91cd\u65b0\u62df\u5408\u4f30\u8ba1\u5668\u3002\u8fd8\u53ef\u4ee5\u5c06 refit \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5728\u7ed9\u5b9a cv_results_ \u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u6240\u9009\u7684 best_index_ \u3002","title":"GridSearchCV\uff1a\u7f51\u683c\u641c\u7d22"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_1","text":"import sklearn.svm from sklearn.svm import SVC from sklearn.datasets import load_iris from sklearn.model_selection import GridSearchCV X , y = load_iris ( return_X_y = True ) SVM = SVC ( C = 1.0 , kernel = 'rbf' ) params = { \"C\" :[ 0.1 , 1.0 , 5.0 , 10.0 ], \"kernel\" :[ 'linear' , 'poly' , 'rbf' ] } grid_search = GridSearchCV ( SVM , params , cv = 5 ) grid_search . fit ( X , y ) # \u6a21\u578b\u6700\u9ad8\u5206\uff1a grid_search . score ( X , y ) # \u6700\u4f18\u53c2\u6570\uff1a grid_search . best_params_ {'C': 0.1, 'kernel': 'poly'}","title":"\u4f8b\u5b50"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_2","text":"cv_results_ \uff1a cv_results_ \u5c5e\u6027\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u50a8\u5b58\u4e86\u7f51\u683c\u641c\u7d22\u7684\u8be6\u7ec6\u7ed3\u679c\uff1a mean_fit_time \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u5728\u8bad\u7ec3\u6a21\u578b\u4e0a\u7684\u5e73\u5747\u7528\u65f6\u3002 std_fit_time \uff1a\u5404\u53c2\u6570\u7ec4\u5408\u5728\u8bad\u7ec3\u6a21\u578b\u4e0a\u6240\u7528\u65f6\u95f4\u7684\u6807\u51c6\u5dee\u3002 mean_test_score \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u7684\u5e73\u5747\u5f97\u5206\u3002 std_test_score \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u5f97\u5206\u7684\u6807\u51c6\u5dee\u3002 mean_score_time \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u6253\u5206\u6240\u7528\u65f6\u95f4\u7684\u5e73\u5747\u503c\u3002 std_score_time \uff1a\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u6253\u5206\u6240\u7528\u65f6\u95f4\u7684\u6807\u51c6\u5dee\u3002 rank_test_score \uff1a\u5404\u53c2\u6570\u7ec4\u5408\u7684\u5f97\u5206\u6392\u540d\u3002 params \uff1a\u5404\u4e2a\u53c2\u6570\u7ec4\u5408\u3002 param_xxx \uff1a\u6a21\u578b\u5404\u4e2a\u8d85\u53c2\u6570\u5728\u6bcf\u4e2a\u53c2\u6570\u7ec4\u5408\u4e2d\u5bf9\u5e94\u7684\u53d6\u503c\u3002 splitx_test_score \uff1a\u4ea4\u53c9\u9a8c\u8bc1\u6bcf\u6b21\u62c6\u5206\u6570\u636e\u96c6\uff0c\u5404\u4e2a\u53c2\u6570\u7ec4\u5408\u7684\u5f97\u5206\u3002 best_index_ \uff1a\u6700\u4f73\u5019\u9009\u53c2\u6570\u7ec4\u5408\u5bf9\u5e94\u7684\uff08cv_results_\u6570\u7ec4\u7684\uff09\u7d22\u5f15\u3002 best_estimator_ \uff1a\u5f97\u5206\u6700\u9ad8\u7684 estimator\uff0c\u82e5 refit=False \uff0c\u8be5\u5c5e\u6027\u5219\u4e0d\u53ef\u7528\u3002 best_score_ \uff1a\u5f97\u5206\u6700\u9ad8\u7684estimator\u7684\u4ea4\u53c9\u9a8c\u8bc1\u5e73\u5747\u5f97\u5206\u3002 best_params_ \uff1a\u5f97\u5206\u6700\u9ad8\u7684\u53c2\u6570\u7ec4\u5408\u3002\u5bf9\u4e8emulti-metric evaluation\uff0c\u4ec5\u5f53 refit \u6307\u5b9a\u65f6\u624d\u53ef\u7528\u3002 n_splits_ \uff1a\u4ea4\u53c9\u9a8c\u8bc1\u62c6\u5206\u7684\u6570\u91cf\u3002 refit_time_ \uff1a\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\uff0c\u91cd\u65b0\u62df\u5408\u6700\u4f73\u6a21\u578b\u7684\u79d2\u6570\u3002 multimetric_ \uff1a\u903b\u8f91\u503c\uff0c\u662f\u5426\u4f7f\u7528\u591a\u4e2ametric\u8fdb\u884c\u8bc4\u4f30\u3002 classes_ \uff1a\u7c7b\u522b\u3002","title":"\u5c5e\u6027"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_3","text":"\u65b9\u6cd5 \u8bf4\u660e decision_function(X) Call decision_function on the estimator with the best found parameters. fit(X[, y, groups]) Run fit with all sets of parameters. get_params() Get parameters for this estimator. inverse_transform(Xt) Call inverse_transform on the estimator with the best found params. predict(X) Call predict on the estimator with the best found parameters. predict_log_proba(X) Call predict_log_proba on the estimator with the best found parameters. predict_proba(X) Call predict_proba on the estimator with the best found parameters. score(X[, y]) Returns the score on the given data, if the estimator has been refit. set_params(**params) Set the parameters of this estimator. transform(X) Call transform on the estimator with the best found parameters.","title":"\u65b9\u6cd5"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#randomizedsearchcv","text":"\u4e0e GridSearchCV \u4e0d\u540c\u7684\u662f\uff0c\u968f\u673a\u641c\u7d22\uff08\u53ef\u80fd\uff09\u4e0d\u4f1a\u5c1d\u8bd5\u6240\u6709\u7684\u53c2\u6570\u7ec4\u5408\uff0c\u800c\u662f\u4ece\u6307\u5b9a\u7684\u5206\u5e03\u4e2d\u91c7\u6837\u56fa\u5b9a\u6570\u91cf\u7684\u53c2\u6570\u7ec4\u5408\u3002 \u5c1d\u8bd5\u7684\u53c2\u6570\u7ec4\u5408\u7684\u6570\u91cf\u662f\u7531 n_iter \u53c2\u6570\u6307\u5b9a\u3002 RandomizedSearchCV ( estimator , param_distributions , n_iter = 10 , scoring = None , n_jobs = None , iid = 'deprecated' , refit = True , cv = None , verbose = 0 , pre_dispatch = '2*n_jobs' , random_state = None , error_score = nan , return_train_score = False ) \u9664\u4e86 n_iter \u53c2\u6570\uff0c RandomizedSearchCV \u4e0e GridSearchCV \u7684\u53c2\u6570\u4e00\u81f4\uff0c\u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u662f\u4e00\u81f4\u7684\u3002","title":"RandomizedSearchCV\uff1a\u968f\u673a\u641c\u7d22"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_4","text":"import sklearn.svm from sklearn.svm import SVC from sklearn.datasets import load_iris from scipy.stats import uniform from sklearn.model_selection import RandomizedSearchCV X , y = load_iris ( return_X_y = True ) SVM = SVC ( C = 1.0 , kernel = 'rbf' ) # params = {\"C\":[0.1, 1.0, 5.0, 10.0], # \"kernel\":['linear', 'poly', 'rbf'] # } params = { \"C\" : uniform ( loc = 0 , scale = 4 ), \"kernel\" :[ 'linear' , 'poly' , 'rbf' ] } random_search = RandomizedSearchCV ( SVM , params , cv = 5 ) random_search . fit ( X , y ) # \u6a21\u578b\u6700\u9ad8\u5206\uff1a random_search . score ( X , y ) # \u6700\u4f18\u53c2\u6570\uff1a random_search . best_params_ {'C': 1.2248642986661507, 'kernel': 'rbf'}","title":"\u4f8b\u5b50"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#parametergrid","text":"ParameterGrid \u7c7b\u53ef\u4ee5\u6784\u9020\u51fa\u6240\u6709\u7684\u53c2\u6570\u7ec4\u5408\u3002 ParameterGrid ( param_grid )","title":"ParameterGrid\uff1a\u53c2\u6570\u7ec4\u5408"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_5","text":"from sklearn.model_selection import ParameterGrid param_grid = { 'a' : [ 1 , 2 ], 'b' : [ True , False ]} list ( ParameterGrid ( param_grid )) [{'a': 1, 'b': True}, {'a': 1, 'b': False}, {'a': 2, 'b': True}, {'a': 2, 'b': False}]","title":"\u4f8b\u5b50"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#parametersampler","text":"ParameterSampler \u7c7b\u6839\u636e\u7ed9\u5b9a\u5206\u5e03\u91c7\u6837\u7684\u53c2\u6570\u751f\u6210\u53c2\u6570\u7ec4\u5408\u3002 ParameterSampler ( param_distributions , n_iter , random_state = None )","title":"ParameterSampler\uff1a\u53c2\u6570\u7ec4\u5408\u968f\u673a\u62bd\u6837"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_6","text":"from sklearn.model_selection import ParameterSampler param_grid = { 'a' : [ 1 , 2 ], 'b' : [ True , False ]} list ( ParameterSampler ( param_grid , n_iter = 3 )) [{'b': True, 'a': 1}, {'b': False, 'a': 2}, {'b': False, 'a': 1}] from scipy.stats import uniform from sklearn.model_selection import ParameterSampler param_grid = { 'a' : uniform ( loc = 0 , scale = 4 ), 'b' : [ True , False ]} list ( ParameterSampler ( param_grid , n_iter = 4 )) [{'a': 0.716982761404827, 'b': True}, {'a': 2.6603500613693383, 'b': False}, {'a': 1.7170489847529042, 'b': False}, {'a': 2.266735701973464, 'b': True}]","title":"\u4f8b\u5b50"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#fit_grid_point","text":"\u5bf9\u4e00\u7ec4\u53c2\u6570\u8fdb\u884c\u62df\u5408\uff0c\u8fd4\u56de\u8fd9\u7ec4\u53c2\u6570\u7684\u5f97\u5206\uff0c\u5df2\u7ecf\u6d4b\u8bd5\u6837\u672c\u7684\u6570\u91cf\u3002 fit_grid_point ( X , y , estimator , parameters , train , test , scorer , verbose , error_score = nan , fit_params )","title":"fit_grid_point"},{"location":"scikit-learn/11.7.%E8%B6%85%E5%8F%82%E6%95%B0%E5%AF%BB%E4%BC%98.html#_7","text":"from sklearn.svm import SVC from sklearn.datasets import load_iris from sklearn.metrics import accuracy_score , f1_score , make_scorer from sklearn.model_selection import fit_grid_point X , y = load_iris ( return_X_y = True ) SVM = SVC ( C = 1.0 , kernel = 'rbf' ) params = { \"C\" : 1.0 , \"kernel\" : 'linear' } fit_grid_point ( X , y , SVM , params , train = slice ( 0 , 100 , 1 ), test = slice ( 100 , 150 , 1 ), scorer = make_scorer ( f1_score ), verbose = 1 ) (0.0, {'C': 1.0, 'kernel': 'linear'}, 50)","title":"\u4f8b\u5b50"},{"location":"scikit-learn/11.8.%E4%BF%9D%E5%AD%98%E6%A8%A1%E5%9E%8B.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.10 sklearn version: 0.22.1 import pickle import joblib from sklearn import svm from sklearn import datasets clf = svm . SVC () iris = datasets . load_iris () X , y = iris . data , iris . target clf . fit ( X , y ) SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovr', degree=3, gamma='scale', kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False) pickle \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Python \u7684\u5185\u7f6e\u6301\u4e45\u5316\u6a21\u578b\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\u5728 scikit \u4e2d\uff0c\u5b83\u540d\u4e3a pickle : # \u5e8f\u5217\u5316\u4e3a bytes model = pickle . dumps ( clf ) # \u4ece bytes \u52a0\u8f7d\u6a21\u578b clf2 = pickle . loads ( data = model , fix_imports = True , encoding = 'ASCII' , errors = 'strict' ) # \u4fdd\u5b58\u5230\u6587\u4ef6 svm . model = pickle . dump ( obj = clf , file = \"svm.model\" , protocol = None , fix_imports = True ) # \u4ece\u6587\u4ef6\u52a0\u8f7d\u6a21\u578b clf2 = pickle . load ( file = \"svm.model\" , fix_imports = True , encoding = 'ASCII' , errors = 'strict' ) joblib \u4f7f\u7528 joblib \u6765\u66ff\u6362 pickle \u53ef\u80fd\u4f1a\u66f4\u6709\u610f\u601d\uff0c\u8fd9\u5bf9\u4e8e\u5185\u90e8\u5e26\u6709 numpy \u6570\u7ec4\u7684\u5bf9\u8c61\u6765\u8bf4\u66f4\u4e3a\u9ad8\u6548\uff0c \u901a\u5e38\u60c5\u51b5\u4e0b\u9002\u5408 scikit-learn estimators\uff08\u9884\u4f30\u5668\uff09\uff0c\u4f46\u662f\u4e5f\u53ea\u80fd\u662f\u4f7f\u7528 pickle \u4fdd\u5b58\u6a21\u578b\u5230\u786c\u76d8\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662fpickle \u4fdd\u5b58\u6a21\u578b\u5230\u5b57\u7b26\u4e32\u3002 joblib . dump ( value = clf , filename = \"svm.model\" , compress = 0 , protocol = None , cache_size = None ) joblib . load ( filename = \"svm.model\" ) \u5b89\u5168\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u7684\u5c40\u9650\u6027 pickle\uff08\u548c\u901a\u8fc7\u6269\u5c55\u7684 joblib\uff09\uff0c\u5728\u5b89\u5168\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u65b9\u9762\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002 \u6709\u4ee5\u4e0b\u539f\u56e0\uff1a \u7edd\u5bf9\u4e0d\u8981\u4f7f\u7528\u672a\u7ecf pickle \u7684\u4e0d\u53d7\u4fe1\u4efb\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002 \u867d\u7136\u4e00\u4e2a\u7248\u672c\u7684 scikit-learn \u6a21\u578b\u53ef\u4ee5\u5728\u5176\u4ed6\u7248\u672c\u4e2d\u52a0\u8f7d\uff0c\u4f46\u8fd9\u5b8c\u5168\u4e0d\u5efa\u8bae\u5e76\u4e14\u4e5f\u662f\u4e0d\u53ef\u53d6\u7684\u3002 \u8fd8\u5e94\u8be5\u4e86\u89e3\u5230\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6570\u636e\u6267\u884c\u7684\u64cd\u4f5c\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u540c\u53ca\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u679c\u3002 \u4e3a\u4e86\u7528\u4ee5\u540e\u7248\u672c\u7684 scikit-learn \u6765\u91cd\u6784\u7c7b\u4f3c\u7684\u6a21\u578b, \u989d\u5916\u7684\u5143\u6570\u636e\u5e94\u8be5\u968f\u7740 pickled model \u4e00\u8d77\u88ab\u4fdd\u5b58\uff1a \u8bad\u7ec3\u6570\u636e\uff0c\u4f8b\u5982\uff1a\u5f15\u7528\u4e0d\u53ef\u53d8\u7684\u5feb\u7167 \u7528\u4e8e\u751f\u6210\u6a21\u578b\u7684 python \u6e90\u4ee3\u7801 scikit-learn \u7684\u5404\u7248\u672c\u4ee5\u53ca\u5404\u7248\u672c\u5bf9\u5e94\u7684\u4f9d\u8d56\u5305 \u5728\u8bad\u7ec3\u6570\u636e\u7684\u57fa\u7840\u4e0a\u83b7\u5f97\u7684\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206 \u8fd9\u6837\u53ef\u4ee5\u68c0\u67e5\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\u662f\u5426\u4e0e\u4ee5\u524d\u76f8\u540c\u3002 \u7531\u4e8e\u6a21\u578b\u5185\u90e8\u8868\u793a\u53ef\u80fd\u5728\u4e24\u79cd\u4e0d\u540c\u67b6\u6784\u4e0a\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u5728\u4e00\u4e2a\u67b6\u6784\u4e0a\u8f6c\u50a8\u6a21\u578b\u5e76\u5c06\u5176\u52a0\u8f7d\u5230\u53e6\u4e00\u4e2a\u4f53\u7cfb\u67b6\u6784\u4e0a\u3002 \u5982\u679c\u60a8\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u95ee\u9898\u4ee5\u53ca\u5176\u5b83\u53ef\u80fd\u7684\u5e8f\u5217\u5316\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605\u8fd9\u4e2a Alex Gaynor \u7684\u6f14\u8bb2 \u3002","title":"11.8.\u4fdd\u5b58\u6a21\u578b"},{"location":"scikit-learn/11.8.%E4%BF%9D%E5%AD%98%E6%A8%A1%E5%9E%8B.html#pickle","text":"\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Python \u7684\u5185\u7f6e\u6301\u4e45\u5316\u6a21\u578b\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\u5728 scikit \u4e2d\uff0c\u5b83\u540d\u4e3a pickle : # \u5e8f\u5217\u5316\u4e3a bytes model = pickle . dumps ( clf ) # \u4ece bytes \u52a0\u8f7d\u6a21\u578b clf2 = pickle . loads ( data = model , fix_imports = True , encoding = 'ASCII' , errors = 'strict' ) # \u4fdd\u5b58\u5230\u6587\u4ef6 svm . model = pickle . dump ( obj = clf , file = \"svm.model\" , protocol = None , fix_imports = True ) # \u4ece\u6587\u4ef6\u52a0\u8f7d\u6a21\u578b clf2 = pickle . load ( file = \"svm.model\" , fix_imports = True , encoding = 'ASCII' , errors = 'strict' )","title":"pickle"},{"location":"scikit-learn/11.8.%E4%BF%9D%E5%AD%98%E6%A8%A1%E5%9E%8B.html#joblib","text":"\u4f7f\u7528 joblib \u6765\u66ff\u6362 pickle \u53ef\u80fd\u4f1a\u66f4\u6709\u610f\u601d\uff0c\u8fd9\u5bf9\u4e8e\u5185\u90e8\u5e26\u6709 numpy \u6570\u7ec4\u7684\u5bf9\u8c61\u6765\u8bf4\u66f4\u4e3a\u9ad8\u6548\uff0c \u901a\u5e38\u60c5\u51b5\u4e0b\u9002\u5408 scikit-learn estimators\uff08\u9884\u4f30\u5668\uff09\uff0c\u4f46\u662f\u4e5f\u53ea\u80fd\u662f\u4f7f\u7528 pickle \u4fdd\u5b58\u6a21\u578b\u5230\u786c\u76d8\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662fpickle \u4fdd\u5b58\u6a21\u578b\u5230\u5b57\u7b26\u4e32\u3002 joblib . dump ( value = clf , filename = \"svm.model\" , compress = 0 , protocol = None , cache_size = None ) joblib . load ( filename = \"svm.model\" )","title":"joblib"},{"location":"scikit-learn/11.8.%E4%BF%9D%E5%AD%98%E6%A8%A1%E5%9E%8B.html#_1","text":"pickle\uff08\u548c\u901a\u8fc7\u6269\u5c55\u7684 joblib\uff09\uff0c\u5728\u5b89\u5168\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u65b9\u9762\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002 \u6709\u4ee5\u4e0b\u539f\u56e0\uff1a \u7edd\u5bf9\u4e0d\u8981\u4f7f\u7528\u672a\u7ecf pickle \u7684\u4e0d\u53d7\u4fe1\u4efb\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002 \u867d\u7136\u4e00\u4e2a\u7248\u672c\u7684 scikit-learn \u6a21\u578b\u53ef\u4ee5\u5728\u5176\u4ed6\u7248\u672c\u4e2d\u52a0\u8f7d\uff0c\u4f46\u8fd9\u5b8c\u5168\u4e0d\u5efa\u8bae\u5e76\u4e14\u4e5f\u662f\u4e0d\u53ef\u53d6\u7684\u3002 \u8fd8\u5e94\u8be5\u4e86\u89e3\u5230\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6570\u636e\u6267\u884c\u7684\u64cd\u4f5c\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u540c\u53ca\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u679c\u3002 \u4e3a\u4e86\u7528\u4ee5\u540e\u7248\u672c\u7684 scikit-learn \u6765\u91cd\u6784\u7c7b\u4f3c\u7684\u6a21\u578b, \u989d\u5916\u7684\u5143\u6570\u636e\u5e94\u8be5\u968f\u7740 pickled model \u4e00\u8d77\u88ab\u4fdd\u5b58\uff1a \u8bad\u7ec3\u6570\u636e\uff0c\u4f8b\u5982\uff1a\u5f15\u7528\u4e0d\u53ef\u53d8\u7684\u5feb\u7167 \u7528\u4e8e\u751f\u6210\u6a21\u578b\u7684 python \u6e90\u4ee3\u7801 scikit-learn \u7684\u5404\u7248\u672c\u4ee5\u53ca\u5404\u7248\u672c\u5bf9\u5e94\u7684\u4f9d\u8d56\u5305 \u5728\u8bad\u7ec3\u6570\u636e\u7684\u57fa\u7840\u4e0a\u83b7\u5f97\u7684\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206 \u8fd9\u6837\u53ef\u4ee5\u68c0\u67e5\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\u662f\u5426\u4e0e\u4ee5\u524d\u76f8\u540c\u3002 \u7531\u4e8e\u6a21\u578b\u5185\u90e8\u8868\u793a\u53ef\u80fd\u5728\u4e24\u79cd\u4e0d\u540c\u67b6\u6784\u4e0a\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u5728\u4e00\u4e2a\u67b6\u6784\u4e0a\u8f6c\u50a8\u6a21\u578b\u5e76\u5c06\u5176\u52a0\u8f7d\u5230\u53e6\u4e00\u4e2a\u4f53\u7cfb\u67b6\u6784\u4e0a\u3002 \u5982\u679c\u60a8\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u95ee\u9898\u4ee5\u53ca\u5176\u5b83\u53ef\u80fd\u7684\u5e8f\u5217\u5316\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605\u8fd9\u4e2a Alex Gaynor \u7684\u6f14\u8bb2 \u3002","title":"\u5b89\u5168\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u7684\u5c40\u9650\u6027"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.14 sklearn version: 0.22.1 StandardScaler: \u6807\u51c6\u5316 $$ z = \\frac{x-\\mu}{s} $$ \u5176\u4e2d\uff0c$\\mu$\u662f\u8bad\u7ec3\u6570\u636e\u7684\u5747\u503c\uff0c\u6216\u8005$\\mu=0$\uff08\u5f53 with_mean=False \uff09\uff1b$s$\u662f\u8bad\u7ec3\u6570\u636e\u7684\u6807\u51c6\u5dee\uff0c\u6216\u8005$s=1$\uff08\u5f53 with_std=False \uff09\u3002 \u6570\u636e\u96c6\u7684 \u6807\u51c6\u5316 \u5bf9scikit-learn\u4e2d\u5b9e\u73b0\u7684\u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6765\u8bf4\u662f \u5e38\u89c1\u7684\u8981\u6c42 \u3002\u5982\u679c\u4e2a\u522b\u7279\u5f81\u6216\u591a\u6216\u5c11\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u50cf\u6807\u51c6\u6b63\u6001\u5206\u5e03( \u5177\u6709\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee )\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u8868\u73b0\u529b\u53ef\u80fd\u4f1a\u8f83\u5dee\u3002 \u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u5ffd\u7565\u7279\u5f81\u7684\u5206\u5e03\u5f62\u72b6\uff0c\u76f4\u63a5\u7ecf\u8fc7\u53bb\u5747\u503c\u6765\u5bf9\u67d0\u4e2a\u7279\u5f81\u8fdb\u884c\u4e2d\u5fc3\u5316\uff0c\u518d\u901a\u8fc7\u9664\u4ee5\u975e\u5e38\u91cf\u7279\u5f81(non-constant features)\u7684\u6807\u51c6\u5dee\u8fdb\u884c\u7f29\u653e\u3002 \u4f8b\u5982\uff0c\u5728\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u76ee\u6807\u51fd\u6570(\u4f8b\u5982SVM\u7684RBF\u5185\u6838\u6216\u7ebf\u6027\u6a21\u578b\u7684l1\u548cl2\u6b63\u5219\u5316)\uff0c\u8bb8\u591a\u5b66\u4e60\u7b97\u6cd5\u4e2d\u76ee\u6807\u51fd\u6570\u7684\u57fa\u7840\u90fd\u662f\u5047\u8bbe\u6240\u6709\u7684\u7279\u5f81\u90fd\u662f\u96f6\u5747\u503c\u5e76\u4e14\u5177\u6709\u540c\u4e00\u9636\u6570\u4e0a\u7684\u65b9\u5dee\u3002\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\u6bd4\u5176\u4ed6\u7279\u5f81\u5927\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u5b66\u4e60\u7b97\u6cd5\u4e2d\u5360\u636e\u4e3b\u5bfc\u4f4d\u7f6e\uff0c\u5bfc\u81f4\u5b66\u4e60\u5668\u5e76\u4e0d\u80fd\u50cf\u6211\u4eec\u8bf4\u671f\u671b\u7684\u90a3\u6837\uff0c\u4ece\u5176\u4ed6\u7279\u5f81\u4e2d\u5b66\u4e60\u3002 StandardScaler \u5b9e\u73b0\u4e86 z-score \u6807\u51c6\u5316\uff1a StandardScaler ( copy = True , with_mean = True , with_std = True ) copy \uff1a\u662f\u5426\u62f7\u8d1d\u6570\u636e\u3002 with_mean \uff1a\u662f\u5426\u4e2d\u5fc3\u5316\u3002 \u5982\u679c\u4e3a True \uff0c\u5219\u7f29\u653e\u4e4b\u524d\u5148\u5c06\u6bcf\u4e2a\u7279\u5f81\u4e2d\u5fc3\u5316\uff08\u5373\u7279\u5f81\u503c\u51cf\u53bb\u8be5\u7279\u5f81\u7684\u5747\u503c\uff09\u3002 \u5982\u679c\u5143\u7d20\u6570\u636e\u662f\u7a00\u758f\u77e9\u9635\u7684\u5f62\u5f0f\uff0c\u5219\u4e0d\u80fd\u6307\u5b9a with_mean=True \u3002 with_std \uff1a\u662f\u5426\u65b9\u5dee\u5f52\u4e00\u5316\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u7f29\u653e\u6bcf\u4e2a\u7279\u5f81\u5230\u5355\u4f4d\u65b9\u5dee\u3002 \u5c5e\u6027 \u8c03\u7528 fit \u65b9\u6cd5\u4e4b\u540e\u624d\u5b58\u5728\u4ee5\u4e0b\u5c5e\u6027 scale_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7f29\u653e\u500d\u6570\u7684\u5012\u6570\u3002 mean_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u539f\u59cb\u6570\u636e\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u3002 var_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u539f\u59cb\u6570\u636e\u6bcf\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\u3002 n_samples_seen_ \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u7684\u6837\u672c\u7684\u6570\u91cf\uff08\u7528\u4e8e\u5206\u6279\u8bad\u7ec3\uff09\u3002 \u65b9\u6cd5 fit(X[, y]) \uff1a\u8ba1\u7b97\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u4e3a\u540e\u7eed\u7684\u8f6c\u6362\u505a\u51c6\u5907\u3002 transform(X) \uff1a\u6267\u884c\u7279\u5f81\u7684\u6807\u51c6\u5316\u3002 fit_transform(X[, y]) \uff1a\u8ba1\u7b97\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u7684\u6807\u51c6\u5316\u3002 inverse_transform(X) \uff1a\u9006\u6807\u51c6\u5316\uff0c\u8fd8\u539f\u6210\u539f\u59cb\u6570\u636e\u3002 partial_fit(X[, y]) \uff1a\u5b66\u4e60\u90e8\u5206\u6570\u636e\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u4e3a\u540e\u7eed\u7684\u8f6c\u6362\u505a\u51c6\u5907\u3002\u5b83\u652f\u6301\u6279\u91cf\u5b66\u4e60\uff08\u589e\u91cf\u5b66\u4e60\uff09\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5185\u5b58\u66f4\u53cb\u597d\u3002\u8fd9\u9002\u7528\u4e8e\u6837\u672c\u91cf\u8fc7\u5927\u6216\u8005\u6d41\u5f0f\u8bfb\u53d6X\u7684\u60c5\u51b5\u3002 from sklearn.preprocessing import StandardScaler data = [[ 0 , 0 ], [ 0 , 0 ], [ 1 , 1 ], [ 1 , 1 ]] scaler = StandardScaler () scaler . fit ( data ) print ( scaler . mean_ ) print ( scaler . transform ( data )) print ( scaler . transform ([[ 2 , 2 ]])) [0.5 0.5] [[-1. -1.] [-1. -1.] [ 1. 1.] [ 1. 1.]] [[3. 3.]] MinMaxScaler: \u5f52\u4e00\u5316 MinMaxScaler \u4f30\u8ba1\u5668\u5206\u522b\u7f29\u653e\u548c\u8f6c\u6362\u6bcf\u4e2a\u7279\u5f81\uff0c\u4ee5\u4f7f\u5176\u5904\u4e8e\u8bad\u7ec3\u96c6\u7684\u7ed9\u5b9a\u8303\u56f4\u5185\u3002 MinMaxScaler ( feature_range = ( 0 , 1 ), copy = True ) feature_range \uff1a\u4e00\u4e2a\u5143\u7ec4 (min,max) \uff0c\u6307\u5b9a\u4e86\u6267\u884c\u53d8\u6362\u4e4b\u540e\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u3002 \u4f8b\u5982\u5728 0 \u548c 1 \u4e4b\u95f4\u7684\u7f29\u653e\uff0c\u8f6c\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $$ X_{std} = \\frac{X - \\min(X)}{\\max(X)-\\min(X)} \\\\ X_{scaled} = X_{std} \\times (\\max-\\min) + \\min = X_{std} $$ \u5176\u4e2d\uff0cmin, max = feature_range\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684\u60c5\u51b5\uff0c\u8f6c\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $$ X_{scaled} = \\frac{\\max-\\min}{\\max(X)-\\min(X)} \\times X + \\min - \\frac{\\max-\\min}{\\max(X)-\\min(X)}\\min(X) $$ \u8be5\u8f6c\u6362\u5e38\u5e38\u4f5c\u4e3a\u96f6\u5747\u503c\u3001\u5355\u4f4d\u65b9\u5dee\u7f29\u653e\u7684\u4ee3\u66ff\u3002 \u5c5e\u6027 min_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u6700\u5c0f\u503c\u7684\u8c03\u6574\u503c\u3002 \u8bbe\u7279\u5f81 \u7684\u539f\u59cb\u6700\u5c0f\u503c\u4e3a \uff0c\u539f\u59cb\u6700\u5927\u503c\u4e3a \u3002\u5219\u7279\u5f81 \u7684\u539f\u59cb\u6700\u5c0f\u503c\u7684\u8c03\u6574\u503c\u4e3a\uff1a \u3002 scale_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7f29\u653e\u500d\u6570 \u3002 data_min_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u6700\u5c0f\u503c \u3002 data_max_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u6700\u5927\u503c\u3002 data_range_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u7684\u8303\u56f4\uff08\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\uff09\u3002 \u65b9\u6cd5 fit(X[, y]) \uff1a transform(X) \uff1a fit_transform(X[, y]) \uff1a inverse_transform(X) \uff1a partial_fit(X[, y]) \uff1a from sklearn.preprocessing import MinMaxScaler data = [[ - 1 , 2 ], [ - 0.5 , 6 ], [ 0 , 10 ], [ 1 , 18 ]] scaler = MinMaxScaler () scaler . fit ( data ) print ( scaler . data_max_ ) print ( scaler . transform ( data )) print ( scaler . transform ([[ 2 , 2 ]])) [ 1. 18.] [[0. 0. ] [0.25 0.25] [0.5 0.5 ] [1. 1. ]] [[1.5 0. ]] MaxAbsScaler MaxAbsScaler \u5b9e\u73b0\u4e86 max-abs \u6807\u51c6\u5316\uff1a MaxAbsScaler ( copy = True ) MaxAbsScaler \u7684\u5de5\u4f5c\u539f\u7406\u4e0e MinMaxScaler \u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u5b83\u53ea\u901a\u8fc7\u9664\u4ee5\u6bcf\u4e2a\u7279\u5f81\u7684\u6700\u5927\u7edd\u5bf9\u503c\u5c06\u8bad\u7ec3\u6570\u636e\u7279\u5f81\u7f29\u653e\u81f3 [-1, 1] \u8303\u56f4\u5185\uff1a $$ X_{scaled} = \\frac{X}{\\max(\\text{abs}(X))} $$ MaxAbsScaler \u4e0d\u4f1a\u79fb\u52a8\u6216\u5c45\u4e2d\u6570\u636e\uff0c\u56e0\u6b64\u4e0d\u4f1a\u7834\u574f\u4efb\u4f55\u7a00\u758f\u6027\u3002\u8be5\u7f29\u653e\u5668\u53ef\u4ee5\u5e94\u7528\u4e8e\u7a00\u758fCSR\u6216CSC\u77e9\u9635\u3002 \u5c5e\u6027 scale_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7f29\u653e\u500d\u6570\u7684\u5012\u6570\u3002 max_abs_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5927\u503c\u3002 n_samples_seen_ \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u7684\u6837\u672c\u7684\u6570\u91cf\uff08\u7528\u4e8e\u5206\u6279\u8bad\u7ec3\uff09\u3002 \u65b9\u6cd5 from sklearn.preprocessing import MaxAbsScaler X = [[ 1. , - 1. , 2. ], [ 2. , 0. , 0. ], [ 0. , 1. , - 1. ]] transformer = MaxAbsScaler () . fit ( X ) transformer transformer . transform ( X ) array([[ 0.5, -1. , 1. ], [ 1. , 0. , 0. ], [ 0. , 1. , -0.5]]) RobustScaler: \u7f29\u653e\u5e26\u6709\u79bb\u7fa4\u503c\u7684\u6570\u636e \u5982\u679c\u6570\u636e\u5305\u542b\u8bb8\u591a\u5f02\u5e38\u503c\uff0c\u4f7f\u7528\u5747\u503c\u548c\u65b9\u5dee\u7f29\u653e\u53ef\u80fd\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u53ca RobustScaler \u4f5c\u4e3a\u66ff\u4ee3\u54c1\u3002\u5b83\u5bf9\u5e26\u6709\u79bb\u7fa4\u503c\u7684\u6570\u636e\u7684\u4e2d\u5fc3\u548c\u8303\u56f4\u6709\u9c81\u68d2\u6027\u7684\u4f30\u8ba1\u3002 from sklearn.preprocessing import RobustScaler \u7f29\u653e\u51fd\u6570 scale ( X , axis = 0 , with_mean = True , with_std = True , copy = True ) minmax_scale ( X , feature_range = ( 0 , 1 ), axis = 0 , copy = True ) maxabs_scale ( X , axis = 0 , copy = True ) robust_scale ( X , axis = 0 , with_centering = True , with_scaling = True , quantile_range = ( 25.0 , 75.0 ), copy = True ) scale \u3001 minmax_scale \u3001 maxabs_scale \u3001 robust_scale \u5206\u522b\u662f StandardScaler \u3001 MinMaxScaler \u3001 MaxAbsScaler \u3001 RobustScaler \u56db\u4e2aestimator\u7684\u7b49\u6548\u51fd\u6570\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u521b\u5efa\u5bf9\u8c61\uff0c\u6216\u8005\u4e0d\u9700\u8981\u4f7f\u7528estimator\uff0c\u8fd9\u56db\u4e2a\u51fd\u6570\u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u529f\u80fd\u3002 \u7f29\u653e\u7a00\u758f\u77e9\u9635 \u4e2d\u5fc3\u5316\u7a00\u758f\u77e9\u9635\u4f1a\u7834\u574f\u6570\u636e\u7684\u7a00\u758f\u7ed3\u6784\uff0c\u56e0\u6b64\u5f88\u5c11\u6709\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u4f46\u662f\u7f29\u653e\u7a00\u758f\u77e9\u9635\u662f\u6709\u610f\u4e49\u7684\uff0c\u5c24\u5176\u662f\u5f53\u51e0\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u7684\u91cf\u7ea7\u8303\u56f4\u65f6\u3002 MaxAbsScaler \u4ee5\u53ca maxabs_scale \u662f\u4e13\u4e3a\u7f29\u653e\u6570\u636e\u800c\u8bbe\u8ba1\u7684\uff0c\u5e76\u4e14\u662f\u7f29\u653e\u6570\u636e\u7684\u63a8\u8350\u65b9\u6cd5\u3002\u4f7f\u7528\u8fd9\u79cd\u7f29\u653e\u7684\u76ee\u7684\u5305\u62ec\u5b9e\u73b0\u7279\u5f81\u6781\u5c0f\u65b9\u5dee\u7684\u9c81\u68d2\u6027\u4ee5\u53ca\u5728\u7a00\u758f\u77e9\u9635\u4e2d\u4fdd\u7559\u96f6\u5143\u7d20\u3002\u4f46\u662f\uff0c scale \u548c StandardScaler \u4e5f\u80fd\u591f\u63a5\u53d7 scipy.sparse \u4f5c\u4e3a\u8f93\u5165\uff0c\u53ea\u8981\u8bbe\u7f6e\u53c2\u6570 with_mean=False \u3002\u5426\u5219\u4f1a\u51fa\u73b0 ValueError \u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7684\u4e2d\u5fc3\u5316\u4f1a\u7834\u574f\u7a00\u758f\u6027\uff0c\u5e76\u4e14\u7ecf\u5e38\u4f1a\u56e0\u4e3a\u5206\u914d\u8fc7\u591a\u7684\u5185\u5b58\u800c\u4f7f\u6267\u884c\u5d29\u6e83\u3002 RobustScaler \u4e0d\u80fd\u9002\u5e94\u7a00\u758f\u8f93\u5165\uff0c\u4f46\u4f60\u53ef\u4ee5\u5728\u7a00\u758f\u8f93\u5165\u4f7f\u7528 transform \u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u7f29\u653e\u5668\u540c\u65f6\u63a5\u53d7\u538b\u7f29\u7684\u7a00\u758f\u884c\u548c\u7a00\u758f\u5217(\u53c2\u89c1 scipy.sparse.csr_matrix \u4ee5\u53ca scipy.sparse.csc_matrix )\u3002\u4efb\u4f55\u5176\u4ed6\u7a00\u758f\u8f93\u5165\u90fd\u4f1a\u88ab \u8f6c\u5316\u4e3a\u538b\u7f29\u7a00\u758f\u884c\u8868\u793a \u3002\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u590d\u5236\uff0c\u5efa\u8bae\u5c06\u8f93\u5165\u7684\u6570\u636e\u8868\u793a\u4e3aCSR\u6216CSC\u7684\u5f62\u5f0f\u3002 \u6700\u540e\uff0c\u5982\u679c\u7a00\u758f\u77e9\u9635\u4e2d\u5fc3\u5316\u540e\u7684\u6570\u636e\u5e76\u4e0d\u662f\u5f88\u5927\uff0c\u4f7f\u7528 toarray \u65b9\u6cd5\u5c06\u8f93\u5165\u7684\u7a00\u758f\u77e9\u9635\u663e\u5f0f\u8f6c\u6362\u4e3a\u6570\u7ec4\u662f\u53e6\u4e00\u79cd\u9009\u62e9\u3002 \u6b63\u5219\u5316 \u8fd9\u91cc\u8bf4\u7684 \u6b63\u5219\u5316 \u662f \u7f29\u653e\u5355\u4e2a\u6837\u672c\u4ee5\u5177\u6709\u5355\u4f4d\u8303\u6570 \u7684\u8fc7\u7a0b\u3002\u5982\u679c\u4f60\u8ba1\u5212\u4f7f\u7528\u4e8c\u6b21\u5f62\u5f0f\uff08\u5982\u70b9\u79ef\u6216\u4efb\u4f55\u5176\u4ed6\u6838\u51fd\u6570\uff09\u6765\u91cf\u5316\u4efb\u4f55\u6837\u672c\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u5219\u6b64\u8fc7\u7a0b\u5c06\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e2a\u89c2\u70b9\u57fa\u4e8e \u5411\u91cf\u7a7a\u95f4\u6a21\u578b(Vector Space Model) \uff0c\u7ecf\u5e38\u5728\u6587\u672c\u5206\u7c7b\u548c\u5185\u5bb9\u805a\u7c7b\u4e2d\u4f7f\u7528\u3002 Normalizer \u7c7b\u548c normalizer \u51fd\u6570\u5b9e\u73b0\u4e86\u6570\u636e\u6b63\u5219\u5316\uff1a Normalizer ( norm = 'l2' , copy = True ) normalizer ( X , norm = 'l2' , axis = 1 , copy = True , return_norm = False ) norm \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u6b63\u5219\u5316\u65b9\u6cd5\u3002\u53ef\u4ee5\u4e3a\uff1a 'l1' \uff1a\u91c7\u7528 $L_1$ \u8303\u6570\u6b63\u5219\u5316\u3002 'l2' \uff1a\u91c7\u7528 $L_2$ \u8303\u6570\u6b63\u5219\u5316\u3002 'max' \uff1a\u91c7\u7528 $L_\\infty$ \u8303\u6570\u6b63\u5219\u5316\u3002 Normalizer \u7c7b\u7684\u65b9\u6cd5\uff1a fit(X[, y]) \uff1a\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4e3b\u8981\u7528\u4e8e\u4e3a\u6d41\u6c34\u7ebf Pipeline \u63d0\u4f9b\u63a5\u53e3\u3002 transform(X[, y, copy]) \uff1a\u5c06\u6bcf\u4e00\u4e2a\u6837\u672c\u6b63\u5219\u5316\u4e3a\u8303\u6570\u7b49\u4e8e\u5355\u4f4d1\u3002 fit_transform(X[, y]) \uff1a\u5c06\u6bcf\u4e00\u4e2a\u6837\u672c\u6b63\u5219\u5316\u4e3a\u8303\u6570\u7b49\u4e8e\u5355\u4f4d1\u3002 \u51fd\u6570 normalize \u4ee5\u53ca\u7c7b Normalizer \u63a5\u6536 \u6765\u81eascipy.sparse\u7684\u5bc6\u96c6\u7c7b\u6570\u7ec4\u6570\u636e\u548c\u7a00\u758f\u77e9\u9635 \u4f5c\u4e3a\u8f93\u5165\u3002\u5bf9\u4e8e\u7a00\u758f\u8f93\u5165\uff0c\u6570\u636e\u88ab \u8f6c\u5316\u4e3a\u538b\u7f29\u7684\u7a00\u758f\u884c\u5f62\u5f0f \u3002\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u590d\u5236\uff0c\u63a8\u8350\u5728\u4e0a\u6e38\u9009\u62e9CSR\u8868\u793a\u3002 from sklearn.preprocessing import normalize , Normalizer X = np . array ([[ 1 , 2 ]]) print ( normalize ( X , norm = 'l1' )) print ( normalize ( X , norm = 'l2' )) [[0.33333333 0.66666667]] [[0.4472136 0.89442719]] \u6570\u503c\u7279\u5f81\u79bb\u6563\u5316 \u4e8c\u503c\u5316 Binarizer \u6839\u636e\u9608\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u4e8c\u503c\u5316\uff08\u5c06\u7279\u5f81\u503c\u8bbe\u7f6e\u4e3a0\u62161\uff09\uff1a Binarizer ( threshold = 0.0 , copy = True ) threshold \uff1a\u8f6c\u6362\u7684\u9608\u503c\uff1a\u4f4e\u4e8e\u6b64\u9608\u503c\u7684\u503c\u8f6c\u6362\u4e3a0\uff0c\u9ad8\u4e8e\u6b64\u9608\u503c\u7684\u503c\u8f6c\u6362\u4e3a 1\u3002 \u65b9\u6cd5\uff1a fit(X[, y]) \uff1a\u4e0d\u4f5c\u4efb\u4f55\u4e8b\u60c5\uff0c\u4e3b\u8981\u7528\u4e8e\u4e3a\u6d41\u6c34\u7ebf Pipeline \u63d0\u4f9b\u63a5\u53e3\u3002 transform(X[, copy]) \uff1a\u5c06\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u4e8c\u5143\u5316\u3002 fit_transform(X[, y]) \uff1a\u5c06\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u4e8c\u5143\u5316\u3002 \u9884\u5904\u7406\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f8\u4f3c\u7684\u51fd\u6570 binarize \uff0c\u4ee5\u4fbf\u4e0d\u9700\u8981\u8f6c\u6362\u63a5\u53e3\u65f6\u4f7f\u7528\u3002 binarize \u4ee5\u53ca Binarizer \u90fd\u53ef\u4ee5\u63a5\u6536 \u6765\u81eascipy.sparse\u7684\u7a20\u5bc6\u77e9\u9635\u6216\u7a00\u758f\u77e9\u9635\u4f5c\u4e3a\u8f93\u5165 \u3002#' \u5bf9\u4e8e\u7a00\u758f\u8f93\u5165\uff0c\u6570\u636e\u88ab \u8f6c\u5316\u4e3a\u538b\u7f29\u7684\u7a00\u758f\u884c\u5f62\u5f0f (\u53c2\u89c1 scipy.sparse.csr_matrix )\u3002\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u590d\u5236\uff0c\u63a8\u8350\u5728\u4e0a\u6e38\u9009\u62e9CSR\u8868\u793a\u3002 from sklearn.preprocessing import Binarizer import numpy as np bins = Binarizer ( threshold = 0.5 ) X = np . array ([[ 1 , 2 ], [ 0.4 , 0.3 ]]) bins . transform ( X ) array([[1., 1.], [0., 0.]]) K-bins \u79bb\u6563\u5316 \u5c06\u8fde\u7eed\u6570\u636e\u5206\u6210K\u4e2a\u95f4\u9694\u3002 KBinsDiscretizer ( n_bins = 5 , encode = 'onehot' , strategy = 'quantile' ) n_bins \uff1a encode \uff1a\u6307\u5b9a\u7528\u4e8e\u7f16\u7801\u8f6c\u6362\u7ed3\u679c\u7684\u65b9\u6cd5\u3002 onehot \uff1aonehot\u7f16\u7801\uff0c\u8fd4\u56de\u7a00\u758f\u77e9\u9635\u3002 onehot-dense \uff1aonehot\u7f16\u7801\uff0c\u8fd4\u56de\u7a20\u5bc6\u77e9\u9635\u3002 ordinal \uff1a\u6bcf\u4e2abin\u88ab\u7f16\u7801\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570\u503c\u3002 strategy \uff1a\u6307\u5b9a\u4e0d\u540c\u7684 bin \u7b56\u7565\u3002 uniform \uff1a\u7279\u5f81\u7684bins\u5177\u6709\u76f8\u540c\u7684\u5bbd\u5ea6\u3002 quantile \uff1a\u7279\u5f81\u7684\u5404\u4e2a\u7684bins\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u70b9\u3002 kmeans \uff1a\u6bcf\u4e2abin\u4e2d\u7684\u503c\u5177\u6709\u4e00\u7ef4k-means\u7c07\u7684\u6700\u8fd1\u4e2d\u5fc3\u3002 KBinsDiscretizer \u4f7f\u7528k\u4e2a\u7b49\u5bbd\u7684bins\u628a\u7279\u5f81\u79bb\u6563\u5316 from sklearn.preprocessing import KBinsDiscretizer import numpy as np X = np . array ([[ - 3. , 5. , 15 ], [ 0. , 6. , 14 ], [ 6. , 3. , 11 ]]) KBinsDiscretizer ( n_bins = [ 3 , 2 , 2 ], encode = 'ordinal' ) . fit_transform ( X ) array([[0., 1., 1.], [1., 1., 1.], [2., 0., 0.]]) KBinsDiscretizer ( n_bins = [ 3 , 2 , 2 ], encode = 'onehot-dense' ) . fit_transform ( X ) array([[1., 0., 0., 0., 1., 0., 1.], [0., 1., 0., 0., 1., 0., 1.], [0., 0., 1., 1., 0., 1., 0.]]) \u8fd9\u4e9b\u533a\u95f4\u95f4\u9694\u88ab\u5b9a\u4e49\u5982\u4e0b: \u7279\u5f81 1: [-\u221e,-1], [-1,2), [2,\u221e) \u7279\u5f81 2: [-\u221e,5), [5,\u221e) \u7279\u5f81 3: [-\u221e,14], [14,\u221e) \u7531\u6b64\u4ea7\u751f\u7684\u6570\u636e\u96c6\u5305\u542b\u4e86\u6709\u5e8f\u5c5e\u6027(ordinal attributes)\uff0c\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u7528\u5728 sklearn.pipeline.Pipeline \u4e2d\u3002 \u79bb\u6563\u5316 (Discretization) \u7c7b\u4f3c\u4e8e\u4e3a\u8fde\u7eed\u6570\u636e\u6784\u5efa\u76f4\u65b9\u56fe(histograms)\u3002 \u7136\u800c\uff0c\u76f4\u65b9\u56fe\u805a\u7126\u4e8e\u7edf\u8ba1\u7279\u5f81\u843d\u5728\u7279\u5b9a\u7684bins\u91cc\u9762\u7684\u6570\u91cf\uff0c\u800c\u79bb\u6563\u5316\u805a\u7126\u4e8e\u7ed9\u8fd9\u4e9bbins\u5206\u914d\u7279\u5f81\u53d6\u503c\u3002 \u66f4\u591a\u793a\u4f8b Using KBinsDiscretizer to discretize continuous features Feature discretization Demonstrating the different strategies of KBinsDiscretizer \u7c7b\u522b\u7279\u5f81\u7f16\u7801 \u6574\u6570\u7f16\u7801 \u8981\u628a\u7c7b\u522b\u7279\u5f81 (categorical features) \u8f6c\u6362\u4e3a\u6574\u6570\u7f16\u7801 (integer codes)\uff0c\u53ef\u4ee5\u4f7f\u7528 OrdinalEncoder \u3002 \u8fd9\u4e2a\u4f30\u8ba1\u5668\u628a\u6bcf\u4e00\u4e2a\u7c7b\u522b\u7279\u5f81\u53d8\u6362\u6210 \u4e00\u4e2a\u65b0\u7684\u6574\u6570\u6570\u5b57\u7279\u5f81 (0 \u5230 n_categories - 1)\uff1a OrdinalEncoder ( categories = 'auto' , dtype =< class ' numpy . float64 '>) from sklearn.preprocessing import OrdinalEncoder enc = OrdinalEncoder () X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ( X ) array([[1., 1., 1.], [0., 0., 0.]]) \u8fd9\u6837\u7684\u6574\u6570\u7279\u5f81\u8868\u793a\u5e76\u4e0d\u80fd\u5728scikit-learn\u7684\u4f30\u8ba1\u5668\u4e2d\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8fde\u7eed\u8f93\u5165\uff0c\u4f30\u8ba1\u5668\u4f1a\u8ba4\u4e3a\u7c7b\u522b\u4e4b\u95f4\u662f\u6709\u5e8f\u7684\uff0c\u4f46\u5b9e\u9645\u5374\u662f\u65e0\u5e8f\u7684\u3002(\u4f8b\u5982\uff1a\u6d4f\u89c8\u5668\u7684\u7c7b\u522b\u6570\u636e\u662f\u4efb\u610f\u6392\u5e8f\u7684)\u3002 onehot \u7f16\u7801 \u53e6\u5916\u4e00\u79cd\u5c06\u7c7b\u522b\u7279\u5f81\u8f6c\u6362\u4e3a\u80fd\u591f\u88abscikit-learn\u6a21\u578b\u4f7f\u7528\u7684\u7f16\u7801\u662f one-of-K\uff0c\u53c8\u79f0\u4e3a\u72ec\u70ed\u7f16\u7801\u6216dummy encoding\u3002 onehot \u7f16\u7801\u7531 OneHotEncoder \u5b9e\u73b0\u3002\u8be5\u7c7b\u628a\u6bcf\u4e00\u4e2a\u5177\u6709n_categories\u4e2a\u53ef\u80fd\u53d6\u503c\u7684categorical\u7279\u5f81\u53d8\u6362\u4e3a\u957f\u5ea6\u4e3an_categories\u7684\u4e8c\u8fdb\u5236\u7279\u5f81\u5411\u91cf\uff0c\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5730\u65b9\u662f1\uff0c\u5176\u4f59\u4f4d\u7f6e\u90fd\u662f0\u3002 OneHotEncoder ( categories = 'auto' , drop = None , sparse = True , dtype =< class ' numpy . float64 '>, handle_unknown = 'error' ) from sklearn.preprocessing import OneHotEncoder enc = OneHotEncoder () X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ( X ) . toarray () array([[0., 1., 0., 1., 0., 1.], [1., 0., 1., 0., 1., 0.]]) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u7279\u5f81\u4f7f\u7528\u51e0\u7ef4\u7684\u6570\u503c\u53ef\u4ee5\u4ece\u6570\u636e\u96c6\u81ea\u52a8\u63a8\u65ad\u3002\u800c\u4e14\u4e5f\u53ef\u4ee5\u5728\u5c5e\u6027 categories_ \u4e2d\u627e\u5230: enc . categories_ [array(['female', 'male'], dtype=object), array(['from Europe', 'from US'], dtype=object), array(['uses Firefox', 'uses Safari'], dtype=object)] categories \u53c2\u6570 \u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 categories \u663e\u5f0f\u5730\u6307\u5b9a\u8fd9\u4e00\u70b9\u3002\u4e0b\u9762\u7684\u6570\u636e\u96c6\u4e2d\u6709\u4e24\u79cd\u6027\u522b\u3001\u56db\u4e2a\u6d32\u548c\u56db\u79cdweb\u6d4f\u89c8\u5668: genders = [ 'female' , 'male' ] locations = [ 'from Africa' , 'from Asia' , 'from Europe' , 'from US' ] browsers = [ 'uses Chrome' , 'uses Firefox' , 'uses IE' , 'uses Safari' ] enc = OneHotEncoder ( categories = [ genders , locations , browsers ]) # Note that for there are missing categorical values for the 2nd and 3rd # feature X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ([[ 'female' , 'from Asia' , 'uses Chrome' ]]) . toarray () array([[1., 0., 0., 1., 0., 0., 1., 0., 0., 0.]]) handle_unknown \u53c2\u6570 \u5982\u679c\u8bad\u7ec3\u6570\u636e\u53ef\u80fd\u7f3a\u5c11\u7c7b\u522b\u7279\u6027\uff0c\u6700\u597d\u6307\u5b9a handle_unknown ='ignore'\uff0c\u800c\u4e0d\u662f\u50cf\u4e0a\u9762\u90a3\u6837\u624b\u52a8\u8bbe\u7f6e\u7c7b\u522b\u3002\u5f53\u6307\u5b9a handle_unknown='ignore' \uff0c\u5e76\u4e14\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u9047\u5230\u672a\u77e5\u7c7b\u522b\u65f6\uff0c\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\uff0c\u4f46\u662f\u5b58\u5728\u672a\u77e5\u7c7b\u522b\u7684\u7279\u5f81\u751f\u6210\u7684onehot\u7f16\u7801\u5217\u5c06\u5168\u90e8\u4e3a\u96f6( handle_unknown='ignore' \u53ea\u652f\u6301onehot\u7f16\u7801): enc = OneHotEncoder ( handle_unknown = 'ignore' ) X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ([[ 'female' , 'from Asia' , 'uses Chrome' ]]) . toarray () array([[1., 0., 0., 0., 0., 0.]]) drop \u53c2\u6570 \u8fd8\u53ef\u4ee5\u4f7f\u7528 drop \u53c2\u6570\u5c06\u6bcf\u4e2a\u5217\u7f16\u7801\u4e3an_categories-1\u5217\uff0c\u800c\u4e0d\u662fn_categories\u5217\u3002\u6b64\u53c2\u6570\u5141\u8bb8\u7528\u6237\u4e3a\u8981\u5220\u9664\u7684\u6bcf\u4e2a\u7279\u5f81\u6307\u5b9a\u7c7b\u522b\u3002\u8fd9\u5bf9\u4e8e\u907f\u514d\u67d0\u4e9b\u5206\u7c7b\u5668\u4e2d\u8f93\u5165\u77e9\u9635\u7684\u5171\u7ebf\u6027\u662f\u6709\u7528\u7684\u3002\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528\u975e\u6b63\u5219\u5316\u56de\u5f52( \u7ebf\u6027\u56de\u5f52 )\u65f6\uff0c\u8fd9\u79cd\u529f\u80fd\u662f\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u5171\u7ebf\u6027\u4f1a\u5bfc\u81f4\u534f\u65b9\u5dee\u77e9\u9635\u662f\u4e0d\u53ef\u9006\u7684\u3002\u5f53\u8fd9\u4e2a\u53c2\u6570\u4e0d\u662fNone\u65f6\uff0c handle_unknown \u5fc5\u987b\u8bbe\u7f6e\u4e3aerror: X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] drop_enc = OneHotEncoder ( drop = 'first' ) . fit ( X ) print ( drop_enc . categories_ ) drop_enc . transform ( X ) . toarray () [array(['female', 'male'], dtype=object), array(['from Europe', 'from US'], dtype=object), array(['uses Firefox', 'uses Safari'], dtype=object)] array([[1., 1., 1.], [0., 0., 0.]]) no_drop_enc = OneHotEncoder ( drop = None ) . fit ( X ) print ( no_drop_enc . categories_ ) no_drop_enc . transform ( X ) . toarray () [array(['female', 'male'], dtype=object), array(['from Europe', 'from US'], dtype=object), array(['uses Firefox', 'uses Safari'], dtype=object)] array([[0., 1., 0., 1., 0., 1.], [1., 0., 1., 0., 1., 0.]]) \u7c7b\u522b\u7279\u5f81\u6709\u65f6\u662f\u7528\u5b57\u5178\u6765\u8868\u793a\u7684\uff0c\u800c\u4e0d\u662f\u6807\u91cf\uff0c\u5177\u4f53\u8bf7\u53c2\u9605 \u4ece\u5b57\u5178\u4e2d\u52a0\u8f7d\u7279\u5f81 \u3002 \u7279\u5f81\u751f\u6210 \u751f\u6210\u591a\u9879\u5f0f\u7279\u5f81 \u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u901a\u8fc7\u589e\u52a0\u4e00\u4e9b\u8f93\u5165\u6570\u636e\u7684\u975e\u7ebf\u6027\u7279\u5f81\u6765\u589e\u52a0\u6a21\u578b\u7684\u590d\u6742\u5ea6\u901a\u5e38\u662f\u6709\u6548\u7684\u3002\u4e00\u4e2a\u7b80\u5355\u901a\u7528\u7684\u529e\u6cd5\u662f\u4f7f\u7528\u591a\u9879\u5f0f\u7279\u5f81\uff0c\u8fd9\u53ef\u4ee5\u83b7\u5f97\u7279\u5f81\u7684\u66f4\u9ad8\u7ef4\u5ea6\u548c\u4ea4\u4e92\u9879\u3002\u8fd9\u5728 PolynomialFeatures \u4e2d\u5b9e\u73b0: PolynomialFeatures ( degree = 2 , interaction_only = False , include_bias = True , order = 'C' ) interaction_only \uff1a\u53ea\u4fdd\u7559\u4ea4\u4e92\u9879\u3002 import numpy as np from sklearn.preprocessing import PolynomialFeatures X = np . arange ( 6 ) . reshape ( 3 , 2 ) X poly = PolynomialFeatures ( 2 ) poly . fit_transform ( X ) array([[ 1., 0., 1., 0., 0., 1.], [ 1., 2., 3., 4., 6., 9.], [ 1., 4., 5., 16., 20., 25.]]) X \u7684\u7279\u5f81\u5df2\u7ecf\u4ece $(X_1, X_2)$\u8f6c\u6362\u4e3a$(1,X_1,X_2\uff0cX^2_1,X_1X_2, X^2_2)$\u3002 \u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u7279\u5f81\u95f4\u7684\u4ea4\u4e92\u9879\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e interaction_only=True \u6765\u5f97\u5230: poly = PolynomialFeatures ( degree = 2 , interaction_only = True ) poly . fit_transform ( X ) array([[ 1., 0., 1., 0.], [ 1., 2., 3., 6.], [ 1., 4., 5., 20.]]) X \u7684\u7279\u5f81\u5df2\u7ecf\u4ece $(X_1, X_2)$\u8f6c\u6362\u4e3a$(1,X_1,X_2\uff0cX_1X_2)$\u3002 \u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u591a\u9879\u7684 Kernel functions \u65f6 \uff0c\u591a\u9879\u5f0f\u7279\u5f81\u88ab\u9690\u5f0f\u5730\u5728 \u6838\u51fd\u6570 \u4e2d\u88ab\u8c03\u7528(\u6bd4\u5982\uff0c sklearn.svm.SVC \uff0c sklearn.decomposition.KernelPCA )\u3002 \u521b\u5efa\u5e76\u4f7f\u7528\u591a\u9879\u5f0f\u7279\u5f81\u7684\u5cad\u56de\u5f52\u5b9e\u4f8b\u8bf7\u89c1 Polynomial interpolation \u3002 \u81ea\u5b9a\u4e49\u8f6c\u6362\u5668 \u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u60f3\u8981\u5c06\u4e00\u4e2a\u5df2\u6709\u7684 Python \u51fd\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u8f6c\u6362\u5668\u6765\u534f\u52a9\u6570\u636e\u6e05\u7406\u6216\u5904\u7406\u3002\u53ef\u4ee5\u4f7f\u7528 FunctionTransformer \u4ece\u4efb\u610f\u51fd\u6570\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u8f6c\u6362\u5668\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7ba1\u9053\u4e2d\u6784\u5efa\u4e00\u4e2a\u5b9e\u73b0\u65e5\u5fd7\u8f6c\u6362\u7684\u8f6c\u5316\u5668\uff0c\u8fd9\u6837\u505a: import numpy as np from sklearn.preprocessing import FunctionTransformer transformer = FunctionTransformer ( np . log1p , validate = True ) X = np . array ([[ 0 , 1 ], [ 2 , 3 ]]) transformer . transform ( X ) array([[0. , 0.69314718], [1.09861229, 1.38629436]]) \u901a\u8fc7\u8bbe\u7f6e check_reverse =True\u5e76\u5728\u8f6c\u6362\u4e4b\u524d\u8c03\u7528 fit \uff0c\u53ef\u4ee5\u786e\u4fdd func \u548c inverse_func \u662f\u5f7c\u6b64\u7684\u62df\u8fc7\u7a0b\u3002\u8bf7\u6ce8\u610f\uff0c\u8bf7\u6ce8\u610f\u4e00\u4e2a warning \u4f1a\u88ab\u629b\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 filterwarnings \u5c06\u5176\u8f6c\u4e3a\u4e00\u4e2a error \u4f7f\u7528\u4e00\u4e2a FunctionTransformer \u7c7b\u6765\u505a\u5b9a\u5236\u5316\u7279\u5f81\u9009\u62e9\u7684\u793a\u4f8b\uff0c\u8bf7\u89c1 Using FunctionTransformer to select columns \u3002","title":"11.9.\u7279\u5f81\u5904\u7406"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#standardscaler","text":"$$ z = \\frac{x-\\mu}{s} $$ \u5176\u4e2d\uff0c$\\mu$\u662f\u8bad\u7ec3\u6570\u636e\u7684\u5747\u503c\uff0c\u6216\u8005$\\mu=0$\uff08\u5f53 with_mean=False \uff09\uff1b$s$\u662f\u8bad\u7ec3\u6570\u636e\u7684\u6807\u51c6\u5dee\uff0c\u6216\u8005$s=1$\uff08\u5f53 with_std=False \uff09\u3002 \u6570\u636e\u96c6\u7684 \u6807\u51c6\u5316 \u5bf9scikit-learn\u4e2d\u5b9e\u73b0\u7684\u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6765\u8bf4\u662f \u5e38\u89c1\u7684\u8981\u6c42 \u3002\u5982\u679c\u4e2a\u522b\u7279\u5f81\u6216\u591a\u6216\u5c11\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u50cf\u6807\u51c6\u6b63\u6001\u5206\u5e03( \u5177\u6709\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee )\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u8868\u73b0\u529b\u53ef\u80fd\u4f1a\u8f83\u5dee\u3002 \u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u5ffd\u7565\u7279\u5f81\u7684\u5206\u5e03\u5f62\u72b6\uff0c\u76f4\u63a5\u7ecf\u8fc7\u53bb\u5747\u503c\u6765\u5bf9\u67d0\u4e2a\u7279\u5f81\u8fdb\u884c\u4e2d\u5fc3\u5316\uff0c\u518d\u901a\u8fc7\u9664\u4ee5\u975e\u5e38\u91cf\u7279\u5f81(non-constant features)\u7684\u6807\u51c6\u5dee\u8fdb\u884c\u7f29\u653e\u3002 \u4f8b\u5982\uff0c\u5728\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u76ee\u6807\u51fd\u6570(\u4f8b\u5982SVM\u7684RBF\u5185\u6838\u6216\u7ebf\u6027\u6a21\u578b\u7684l1\u548cl2\u6b63\u5219\u5316)\uff0c\u8bb8\u591a\u5b66\u4e60\u7b97\u6cd5\u4e2d\u76ee\u6807\u51fd\u6570\u7684\u57fa\u7840\u90fd\u662f\u5047\u8bbe\u6240\u6709\u7684\u7279\u5f81\u90fd\u662f\u96f6\u5747\u503c\u5e76\u4e14\u5177\u6709\u540c\u4e00\u9636\u6570\u4e0a\u7684\u65b9\u5dee\u3002\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\u6bd4\u5176\u4ed6\u7279\u5f81\u5927\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u5b66\u4e60\u7b97\u6cd5\u4e2d\u5360\u636e\u4e3b\u5bfc\u4f4d\u7f6e\uff0c\u5bfc\u81f4\u5b66\u4e60\u5668\u5e76\u4e0d\u80fd\u50cf\u6211\u4eec\u8bf4\u671f\u671b\u7684\u90a3\u6837\uff0c\u4ece\u5176\u4ed6\u7279\u5f81\u4e2d\u5b66\u4e60\u3002 StandardScaler \u5b9e\u73b0\u4e86 z-score \u6807\u51c6\u5316\uff1a StandardScaler ( copy = True , with_mean = True , with_std = True ) copy \uff1a\u662f\u5426\u62f7\u8d1d\u6570\u636e\u3002 with_mean \uff1a\u662f\u5426\u4e2d\u5fc3\u5316\u3002 \u5982\u679c\u4e3a True \uff0c\u5219\u7f29\u653e\u4e4b\u524d\u5148\u5c06\u6bcf\u4e2a\u7279\u5f81\u4e2d\u5fc3\u5316\uff08\u5373\u7279\u5f81\u503c\u51cf\u53bb\u8be5\u7279\u5f81\u7684\u5747\u503c\uff09\u3002 \u5982\u679c\u5143\u7d20\u6570\u636e\u662f\u7a00\u758f\u77e9\u9635\u7684\u5f62\u5f0f\uff0c\u5219\u4e0d\u80fd\u6307\u5b9a with_mean=True \u3002 with_std \uff1a\u662f\u5426\u65b9\u5dee\u5f52\u4e00\u5316\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u7f29\u653e\u6bcf\u4e2a\u7279\u5f81\u5230\u5355\u4f4d\u65b9\u5dee\u3002 \u5c5e\u6027 \u8c03\u7528 fit \u65b9\u6cd5\u4e4b\u540e\u624d\u5b58\u5728\u4ee5\u4e0b\u5c5e\u6027 scale_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7f29\u653e\u500d\u6570\u7684\u5012\u6570\u3002 mean_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u539f\u59cb\u6570\u636e\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u3002 var_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u539f\u59cb\u6570\u636e\u6bcf\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\u3002 n_samples_seen_ \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u7684\u6837\u672c\u7684\u6570\u91cf\uff08\u7528\u4e8e\u5206\u6279\u8bad\u7ec3\uff09\u3002 \u65b9\u6cd5 fit(X[, y]) \uff1a\u8ba1\u7b97\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u4e3a\u540e\u7eed\u7684\u8f6c\u6362\u505a\u51c6\u5907\u3002 transform(X) \uff1a\u6267\u884c\u7279\u5f81\u7684\u6807\u51c6\u5316\u3002 fit_transform(X[, y]) \uff1a\u8ba1\u7b97\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u7136\u540e\u6267\u884c\u7279\u5f81\u7684\u6807\u51c6\u5316\u3002 inverse_transform(X) \uff1a\u9006\u6807\u51c6\u5316\uff0c\u8fd8\u539f\u6210\u539f\u59cb\u6570\u636e\u3002 partial_fit(X[, y]) \uff1a\u5b66\u4e60\u90e8\u5206\u6570\u636e\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u7279\u5f81\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff0c\u4e3a\u540e\u7eed\u7684\u8f6c\u6362\u505a\u51c6\u5907\u3002\u5b83\u652f\u6301\u6279\u91cf\u5b66\u4e60\uff08\u589e\u91cf\u5b66\u4e60\uff09\uff0c\u8fd9\u6837\u5bf9\u4e8e\u5185\u5b58\u66f4\u53cb\u597d\u3002\u8fd9\u9002\u7528\u4e8e\u6837\u672c\u91cf\u8fc7\u5927\u6216\u8005\u6d41\u5f0f\u8bfb\u53d6X\u7684\u60c5\u51b5\u3002 from sklearn.preprocessing import StandardScaler data = [[ 0 , 0 ], [ 0 , 0 ], [ 1 , 1 ], [ 1 , 1 ]] scaler = StandardScaler () scaler . fit ( data ) print ( scaler . mean_ ) print ( scaler . transform ( data )) print ( scaler . transform ([[ 2 , 2 ]])) [0.5 0.5] [[-1. -1.] [-1. -1.] [ 1. 1.] [ 1. 1.]] [[3. 3.]]","title":"StandardScaler: \u6807\u51c6\u5316"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#minmaxscaler","text":"MinMaxScaler \u4f30\u8ba1\u5668\u5206\u522b\u7f29\u653e\u548c\u8f6c\u6362\u6bcf\u4e2a\u7279\u5f81\uff0c\u4ee5\u4f7f\u5176\u5904\u4e8e\u8bad\u7ec3\u96c6\u7684\u7ed9\u5b9a\u8303\u56f4\u5185\u3002 MinMaxScaler ( feature_range = ( 0 , 1 ), copy = True ) feature_range \uff1a\u4e00\u4e2a\u5143\u7ec4 (min,max) \uff0c\u6307\u5b9a\u4e86\u6267\u884c\u53d8\u6362\u4e4b\u540e\u7279\u5f81\u7684\u53d6\u503c\u8303\u56f4\u3002 \u4f8b\u5982\u5728 0 \u548c 1 \u4e4b\u95f4\u7684\u7f29\u653e\uff0c\u8f6c\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $$ X_{std} = \\frac{X - \\min(X)}{\\max(X)-\\min(X)} \\\\ X_{scaled} = X_{std} \\times (\\max-\\min) + \\min = X_{std} $$ \u5176\u4e2d\uff0cmin, max = feature_range\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684\u60c5\u51b5\uff0c\u8f6c\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $$ X_{scaled} = \\frac{\\max-\\min}{\\max(X)-\\min(X)} \\times X + \\min - \\frac{\\max-\\min}{\\max(X)-\\min(X)}\\min(X) $$ \u8be5\u8f6c\u6362\u5e38\u5e38\u4f5c\u4e3a\u96f6\u5747\u503c\u3001\u5355\u4f4d\u65b9\u5dee\u7f29\u653e\u7684\u4ee3\u66ff\u3002 \u5c5e\u6027 min_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u6700\u5c0f\u503c\u7684\u8c03\u6574\u503c\u3002 \u8bbe\u7279\u5f81 \u7684\u539f\u59cb\u6700\u5c0f\u503c\u4e3a \uff0c\u539f\u59cb\u6700\u5927\u503c\u4e3a \u3002\u5219\u7279\u5f81 \u7684\u539f\u59cb\u6700\u5c0f\u503c\u7684\u8c03\u6574\u503c\u4e3a\uff1a \u3002 scale_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7f29\u653e\u500d\u6570 \u3002 data_min_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u6700\u5c0f\u503c \u3002 data_max_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u6700\u5927\u503c\u3002 data_range_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u539f\u59cb\u7684\u8303\u56f4\uff08\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\uff09\u3002 \u65b9\u6cd5 fit(X[, y]) \uff1a transform(X) \uff1a fit_transform(X[, y]) \uff1a inverse_transform(X) \uff1a partial_fit(X[, y]) \uff1a from sklearn.preprocessing import MinMaxScaler data = [[ - 1 , 2 ], [ - 0.5 , 6 ], [ 0 , 10 ], [ 1 , 18 ]] scaler = MinMaxScaler () scaler . fit ( data ) print ( scaler . data_max_ ) print ( scaler . transform ( data )) print ( scaler . transform ([[ 2 , 2 ]])) [ 1. 18.] [[0. 0. ] [0.25 0.25] [0.5 0.5 ] [1. 1. ]] [[1.5 0. ]]","title":"MinMaxScaler: \u5f52\u4e00\u5316"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#maxabsscaler","text":"MaxAbsScaler \u5b9e\u73b0\u4e86 max-abs \u6807\u51c6\u5316\uff1a MaxAbsScaler ( copy = True ) MaxAbsScaler \u7684\u5de5\u4f5c\u539f\u7406\u4e0e MinMaxScaler \u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u5b83\u53ea\u901a\u8fc7\u9664\u4ee5\u6bcf\u4e2a\u7279\u5f81\u7684\u6700\u5927\u7edd\u5bf9\u503c\u5c06\u8bad\u7ec3\u6570\u636e\u7279\u5f81\u7f29\u653e\u81f3 [-1, 1] \u8303\u56f4\u5185\uff1a $$ X_{scaled} = \\frac{X}{\\max(\\text{abs}(X))} $$ MaxAbsScaler \u4e0d\u4f1a\u79fb\u52a8\u6216\u5c45\u4e2d\u6570\u636e\uff0c\u56e0\u6b64\u4e0d\u4f1a\u7834\u574f\u4efb\u4f55\u7a00\u758f\u6027\u3002\u8be5\u7f29\u653e\u5668\u53ef\u4ee5\u5e94\u7528\u4e8e\u7a00\u758fCSR\u6216CSC\u77e9\u9635\u3002 \u5c5e\u6027 scale_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7f29\u653e\u500d\u6570\u7684\u5012\u6570\u3002 max_abs_ \uff1a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a\u7279\u5f81\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5927\u503c\u3002 n_samples_seen_ \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u7684\u6837\u672c\u7684\u6570\u91cf\uff08\u7528\u4e8e\u5206\u6279\u8bad\u7ec3\uff09\u3002 \u65b9\u6cd5 from sklearn.preprocessing import MaxAbsScaler X = [[ 1. , - 1. , 2. ], [ 2. , 0. , 0. ], [ 0. , 1. , - 1. ]] transformer = MaxAbsScaler () . fit ( X ) transformer transformer . transform ( X ) array([[ 0.5, -1. , 1. ], [ 1. , 0. , 0. ], [ 0. , 1. , -0.5]])","title":"MaxAbsScaler"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#robustscaler","text":"\u5982\u679c\u6570\u636e\u5305\u542b\u8bb8\u591a\u5f02\u5e38\u503c\uff0c\u4f7f\u7528\u5747\u503c\u548c\u65b9\u5dee\u7f29\u653e\u53ef\u80fd\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u53ca RobustScaler \u4f5c\u4e3a\u66ff\u4ee3\u54c1\u3002\u5b83\u5bf9\u5e26\u6709\u79bb\u7fa4\u503c\u7684\u6570\u636e\u7684\u4e2d\u5fc3\u548c\u8303\u56f4\u6709\u9c81\u68d2\u6027\u7684\u4f30\u8ba1\u3002 from sklearn.preprocessing import RobustScaler","title":"RobustScaler: \u7f29\u653e\u5e26\u6709\u79bb\u7fa4\u503c\u7684\u6570\u636e"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_1","text":"scale ( X , axis = 0 , with_mean = True , with_std = True , copy = True ) minmax_scale ( X , feature_range = ( 0 , 1 ), axis = 0 , copy = True ) maxabs_scale ( X , axis = 0 , copy = True ) robust_scale ( X , axis = 0 , with_centering = True , with_scaling = True , quantile_range = ( 25.0 , 75.0 ), copy = True ) scale \u3001 minmax_scale \u3001 maxabs_scale \u3001 robust_scale \u5206\u522b\u662f StandardScaler \u3001 MinMaxScaler \u3001 MaxAbsScaler \u3001 RobustScaler \u56db\u4e2aestimator\u7684\u7b49\u6548\u51fd\u6570\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u521b\u5efa\u5bf9\u8c61\uff0c\u6216\u8005\u4e0d\u9700\u8981\u4f7f\u7528estimator\uff0c\u8fd9\u56db\u4e2a\u51fd\u6570\u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u529f\u80fd\u3002","title":"\u7f29\u653e\u51fd\u6570"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_2","text":"\u4e2d\u5fc3\u5316\u7a00\u758f\u77e9\u9635\u4f1a\u7834\u574f\u6570\u636e\u7684\u7a00\u758f\u7ed3\u6784\uff0c\u56e0\u6b64\u5f88\u5c11\u6709\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u4f46\u662f\u7f29\u653e\u7a00\u758f\u77e9\u9635\u662f\u6709\u610f\u4e49\u7684\uff0c\u5c24\u5176\u662f\u5f53\u51e0\u4e2a\u7279\u5f81\u5728\u4e0d\u540c\u7684\u91cf\u7ea7\u8303\u56f4\u65f6\u3002 MaxAbsScaler \u4ee5\u53ca maxabs_scale \u662f\u4e13\u4e3a\u7f29\u653e\u6570\u636e\u800c\u8bbe\u8ba1\u7684\uff0c\u5e76\u4e14\u662f\u7f29\u653e\u6570\u636e\u7684\u63a8\u8350\u65b9\u6cd5\u3002\u4f7f\u7528\u8fd9\u79cd\u7f29\u653e\u7684\u76ee\u7684\u5305\u62ec\u5b9e\u73b0\u7279\u5f81\u6781\u5c0f\u65b9\u5dee\u7684\u9c81\u68d2\u6027\u4ee5\u53ca\u5728\u7a00\u758f\u77e9\u9635\u4e2d\u4fdd\u7559\u96f6\u5143\u7d20\u3002\u4f46\u662f\uff0c scale \u548c StandardScaler \u4e5f\u80fd\u591f\u63a5\u53d7 scipy.sparse \u4f5c\u4e3a\u8f93\u5165\uff0c\u53ea\u8981\u8bbe\u7f6e\u53c2\u6570 with_mean=False \u3002\u5426\u5219\u4f1a\u51fa\u73b0 ValueError \u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7684\u4e2d\u5fc3\u5316\u4f1a\u7834\u574f\u7a00\u758f\u6027\uff0c\u5e76\u4e14\u7ecf\u5e38\u4f1a\u56e0\u4e3a\u5206\u914d\u8fc7\u591a\u7684\u5185\u5b58\u800c\u4f7f\u6267\u884c\u5d29\u6e83\u3002 RobustScaler \u4e0d\u80fd\u9002\u5e94\u7a00\u758f\u8f93\u5165\uff0c\u4f46\u4f60\u53ef\u4ee5\u5728\u7a00\u758f\u8f93\u5165\u4f7f\u7528 transform \u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u7f29\u653e\u5668\u540c\u65f6\u63a5\u53d7\u538b\u7f29\u7684\u7a00\u758f\u884c\u548c\u7a00\u758f\u5217(\u53c2\u89c1 scipy.sparse.csr_matrix \u4ee5\u53ca scipy.sparse.csc_matrix )\u3002\u4efb\u4f55\u5176\u4ed6\u7a00\u758f\u8f93\u5165\u90fd\u4f1a\u88ab \u8f6c\u5316\u4e3a\u538b\u7f29\u7a00\u758f\u884c\u8868\u793a \u3002\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u590d\u5236\uff0c\u5efa\u8bae\u5c06\u8f93\u5165\u7684\u6570\u636e\u8868\u793a\u4e3aCSR\u6216CSC\u7684\u5f62\u5f0f\u3002 \u6700\u540e\uff0c\u5982\u679c\u7a00\u758f\u77e9\u9635\u4e2d\u5fc3\u5316\u540e\u7684\u6570\u636e\u5e76\u4e0d\u662f\u5f88\u5927\uff0c\u4f7f\u7528 toarray \u65b9\u6cd5\u5c06\u8f93\u5165\u7684\u7a00\u758f\u77e9\u9635\u663e\u5f0f\u8f6c\u6362\u4e3a\u6570\u7ec4\u662f\u53e6\u4e00\u79cd\u9009\u62e9\u3002","title":"\u7f29\u653e\u7a00\u758f\u77e9\u9635"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_3","text":"\u8fd9\u91cc\u8bf4\u7684 \u6b63\u5219\u5316 \u662f \u7f29\u653e\u5355\u4e2a\u6837\u672c\u4ee5\u5177\u6709\u5355\u4f4d\u8303\u6570 \u7684\u8fc7\u7a0b\u3002\u5982\u679c\u4f60\u8ba1\u5212\u4f7f\u7528\u4e8c\u6b21\u5f62\u5f0f\uff08\u5982\u70b9\u79ef\u6216\u4efb\u4f55\u5176\u4ed6\u6838\u51fd\u6570\uff09\u6765\u91cf\u5316\u4efb\u4f55\u6837\u672c\u95f4\u7684\u76f8\u4f3c\u5ea6\uff0c\u5219\u6b64\u8fc7\u7a0b\u5c06\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e2a\u89c2\u70b9\u57fa\u4e8e \u5411\u91cf\u7a7a\u95f4\u6a21\u578b(Vector Space Model) \uff0c\u7ecf\u5e38\u5728\u6587\u672c\u5206\u7c7b\u548c\u5185\u5bb9\u805a\u7c7b\u4e2d\u4f7f\u7528\u3002 Normalizer \u7c7b\u548c normalizer \u51fd\u6570\u5b9e\u73b0\u4e86\u6570\u636e\u6b63\u5219\u5316\uff1a Normalizer ( norm = 'l2' , copy = True ) normalizer ( X , norm = 'l2' , axis = 1 , copy = True , return_norm = False ) norm \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u6b63\u5219\u5316\u65b9\u6cd5\u3002\u53ef\u4ee5\u4e3a\uff1a 'l1' \uff1a\u91c7\u7528 $L_1$ \u8303\u6570\u6b63\u5219\u5316\u3002 'l2' \uff1a\u91c7\u7528 $L_2$ \u8303\u6570\u6b63\u5219\u5316\u3002 'max' \uff1a\u91c7\u7528 $L_\\infty$ \u8303\u6570\u6b63\u5219\u5316\u3002 Normalizer \u7c7b\u7684\u65b9\u6cd5\uff1a fit(X[, y]) \uff1a\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4e3b\u8981\u7528\u4e8e\u4e3a\u6d41\u6c34\u7ebf Pipeline \u63d0\u4f9b\u63a5\u53e3\u3002 transform(X[, y, copy]) \uff1a\u5c06\u6bcf\u4e00\u4e2a\u6837\u672c\u6b63\u5219\u5316\u4e3a\u8303\u6570\u7b49\u4e8e\u5355\u4f4d1\u3002 fit_transform(X[, y]) \uff1a\u5c06\u6bcf\u4e00\u4e2a\u6837\u672c\u6b63\u5219\u5316\u4e3a\u8303\u6570\u7b49\u4e8e\u5355\u4f4d1\u3002 \u51fd\u6570 normalize \u4ee5\u53ca\u7c7b Normalizer \u63a5\u6536 \u6765\u81eascipy.sparse\u7684\u5bc6\u96c6\u7c7b\u6570\u7ec4\u6570\u636e\u548c\u7a00\u758f\u77e9\u9635 \u4f5c\u4e3a\u8f93\u5165\u3002\u5bf9\u4e8e\u7a00\u758f\u8f93\u5165\uff0c\u6570\u636e\u88ab \u8f6c\u5316\u4e3a\u538b\u7f29\u7684\u7a00\u758f\u884c\u5f62\u5f0f \u3002\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u590d\u5236\uff0c\u63a8\u8350\u5728\u4e0a\u6e38\u9009\u62e9CSR\u8868\u793a\u3002 from sklearn.preprocessing import normalize , Normalizer X = np . array ([[ 1 , 2 ]]) print ( normalize ( X , norm = 'l1' )) print ( normalize ( X , norm = 'l2' )) [[0.33333333 0.66666667]] [[0.4472136 0.89442719]]","title":"\u6b63\u5219\u5316"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_4","text":"","title":"\u6570\u503c\u7279\u5f81\u79bb\u6563\u5316"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_5","text":"Binarizer \u6839\u636e\u9608\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u4e8c\u503c\u5316\uff08\u5c06\u7279\u5f81\u503c\u8bbe\u7f6e\u4e3a0\u62161\uff09\uff1a Binarizer ( threshold = 0.0 , copy = True ) threshold \uff1a\u8f6c\u6362\u7684\u9608\u503c\uff1a\u4f4e\u4e8e\u6b64\u9608\u503c\u7684\u503c\u8f6c\u6362\u4e3a0\uff0c\u9ad8\u4e8e\u6b64\u9608\u503c\u7684\u503c\u8f6c\u6362\u4e3a 1\u3002 \u65b9\u6cd5\uff1a fit(X[, y]) \uff1a\u4e0d\u4f5c\u4efb\u4f55\u4e8b\u60c5\uff0c\u4e3b\u8981\u7528\u4e8e\u4e3a\u6d41\u6c34\u7ebf Pipeline \u63d0\u4f9b\u63a5\u53e3\u3002 transform(X[, copy]) \uff1a\u5c06\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u4e8c\u5143\u5316\u3002 fit_transform(X[, y]) \uff1a\u5c06\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u4e8c\u5143\u5316\u3002 \u9884\u5904\u7406\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f8\u4f3c\u7684\u51fd\u6570 binarize \uff0c\u4ee5\u4fbf\u4e0d\u9700\u8981\u8f6c\u6362\u63a5\u53e3\u65f6\u4f7f\u7528\u3002 binarize \u4ee5\u53ca Binarizer \u90fd\u53ef\u4ee5\u63a5\u6536 \u6765\u81eascipy.sparse\u7684\u7a20\u5bc6\u77e9\u9635\u6216\u7a00\u758f\u77e9\u9635\u4f5c\u4e3a\u8f93\u5165 \u3002#' \u5bf9\u4e8e\u7a00\u758f\u8f93\u5165\uff0c\u6570\u636e\u88ab \u8f6c\u5316\u4e3a\u538b\u7f29\u7684\u7a00\u758f\u884c\u5f62\u5f0f (\u53c2\u89c1 scipy.sparse.csr_matrix )\u3002\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u590d\u5236\uff0c\u63a8\u8350\u5728\u4e0a\u6e38\u9009\u62e9CSR\u8868\u793a\u3002 from sklearn.preprocessing import Binarizer import numpy as np bins = Binarizer ( threshold = 0.5 ) X = np . array ([[ 1 , 2 ], [ 0.4 , 0.3 ]]) bins . transform ( X ) array([[1., 1.], [0., 0.]])","title":"\u4e8c\u503c\u5316"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#k-bins","text":"\u5c06\u8fde\u7eed\u6570\u636e\u5206\u6210K\u4e2a\u95f4\u9694\u3002 KBinsDiscretizer ( n_bins = 5 , encode = 'onehot' , strategy = 'quantile' ) n_bins \uff1a encode \uff1a\u6307\u5b9a\u7528\u4e8e\u7f16\u7801\u8f6c\u6362\u7ed3\u679c\u7684\u65b9\u6cd5\u3002 onehot \uff1aonehot\u7f16\u7801\uff0c\u8fd4\u56de\u7a00\u758f\u77e9\u9635\u3002 onehot-dense \uff1aonehot\u7f16\u7801\uff0c\u8fd4\u56de\u7a20\u5bc6\u77e9\u9635\u3002 ordinal \uff1a\u6bcf\u4e2abin\u88ab\u7f16\u7801\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570\u503c\u3002 strategy \uff1a\u6307\u5b9a\u4e0d\u540c\u7684 bin \u7b56\u7565\u3002 uniform \uff1a\u7279\u5f81\u7684bins\u5177\u6709\u76f8\u540c\u7684\u5bbd\u5ea6\u3002 quantile \uff1a\u7279\u5f81\u7684\u5404\u4e2a\u7684bins\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u70b9\u3002 kmeans \uff1a\u6bcf\u4e2abin\u4e2d\u7684\u503c\u5177\u6709\u4e00\u7ef4k-means\u7c07\u7684\u6700\u8fd1\u4e2d\u5fc3\u3002 KBinsDiscretizer \u4f7f\u7528k\u4e2a\u7b49\u5bbd\u7684bins\u628a\u7279\u5f81\u79bb\u6563\u5316 from sklearn.preprocessing import KBinsDiscretizer import numpy as np X = np . array ([[ - 3. , 5. , 15 ], [ 0. , 6. , 14 ], [ 6. , 3. , 11 ]]) KBinsDiscretizer ( n_bins = [ 3 , 2 , 2 ], encode = 'ordinal' ) . fit_transform ( X ) array([[0., 1., 1.], [1., 1., 1.], [2., 0., 0.]]) KBinsDiscretizer ( n_bins = [ 3 , 2 , 2 ], encode = 'onehot-dense' ) . fit_transform ( X ) array([[1., 0., 0., 0., 1., 0., 1.], [0., 1., 0., 0., 1., 0., 1.], [0., 0., 1., 1., 0., 1., 0.]]) \u8fd9\u4e9b\u533a\u95f4\u95f4\u9694\u88ab\u5b9a\u4e49\u5982\u4e0b: \u7279\u5f81 1: [-\u221e,-1], [-1,2), [2,\u221e) \u7279\u5f81 2: [-\u221e,5), [5,\u221e) \u7279\u5f81 3: [-\u221e,14], [14,\u221e) \u7531\u6b64\u4ea7\u751f\u7684\u6570\u636e\u96c6\u5305\u542b\u4e86\u6709\u5e8f\u5c5e\u6027(ordinal attributes)\uff0c\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u7528\u5728 sklearn.pipeline.Pipeline \u4e2d\u3002 \u79bb\u6563\u5316 (Discretization) \u7c7b\u4f3c\u4e8e\u4e3a\u8fde\u7eed\u6570\u636e\u6784\u5efa\u76f4\u65b9\u56fe(histograms)\u3002 \u7136\u800c\uff0c\u76f4\u65b9\u56fe\u805a\u7126\u4e8e\u7edf\u8ba1\u7279\u5f81\u843d\u5728\u7279\u5b9a\u7684bins\u91cc\u9762\u7684\u6570\u91cf\uff0c\u800c\u79bb\u6563\u5316\u805a\u7126\u4e8e\u7ed9\u8fd9\u4e9bbins\u5206\u914d\u7279\u5f81\u53d6\u503c\u3002 \u66f4\u591a\u793a\u4f8b Using KBinsDiscretizer to discretize continuous features Feature discretization Demonstrating the different strategies of KBinsDiscretizer","title":"K-bins \u79bb\u6563\u5316"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_6","text":"","title":"\u7c7b\u522b\u7279\u5f81\u7f16\u7801"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_7","text":"\u8981\u628a\u7c7b\u522b\u7279\u5f81 (categorical features) \u8f6c\u6362\u4e3a\u6574\u6570\u7f16\u7801 (integer codes)\uff0c\u53ef\u4ee5\u4f7f\u7528 OrdinalEncoder \u3002 \u8fd9\u4e2a\u4f30\u8ba1\u5668\u628a\u6bcf\u4e00\u4e2a\u7c7b\u522b\u7279\u5f81\u53d8\u6362\u6210 \u4e00\u4e2a\u65b0\u7684\u6574\u6570\u6570\u5b57\u7279\u5f81 (0 \u5230 n_categories - 1)\uff1a OrdinalEncoder ( categories = 'auto' , dtype =< class ' numpy . float64 '>) from sklearn.preprocessing import OrdinalEncoder enc = OrdinalEncoder () X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ( X ) array([[1., 1., 1.], [0., 0., 0.]]) \u8fd9\u6837\u7684\u6574\u6570\u7279\u5f81\u8868\u793a\u5e76\u4e0d\u80fd\u5728scikit-learn\u7684\u4f30\u8ba1\u5668\u4e2d\u76f4\u63a5\u4f7f\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8fde\u7eed\u8f93\u5165\uff0c\u4f30\u8ba1\u5668\u4f1a\u8ba4\u4e3a\u7c7b\u522b\u4e4b\u95f4\u662f\u6709\u5e8f\u7684\uff0c\u4f46\u5b9e\u9645\u5374\u662f\u65e0\u5e8f\u7684\u3002(\u4f8b\u5982\uff1a\u6d4f\u89c8\u5668\u7684\u7c7b\u522b\u6570\u636e\u662f\u4efb\u610f\u6392\u5e8f\u7684)\u3002","title":"\u6574\u6570\u7f16\u7801"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#onehot","text":"\u53e6\u5916\u4e00\u79cd\u5c06\u7c7b\u522b\u7279\u5f81\u8f6c\u6362\u4e3a\u80fd\u591f\u88abscikit-learn\u6a21\u578b\u4f7f\u7528\u7684\u7f16\u7801\u662f one-of-K\uff0c\u53c8\u79f0\u4e3a\u72ec\u70ed\u7f16\u7801\u6216dummy encoding\u3002 onehot \u7f16\u7801\u7531 OneHotEncoder \u5b9e\u73b0\u3002\u8be5\u7c7b\u628a\u6bcf\u4e00\u4e2a\u5177\u6709n_categories\u4e2a\u53ef\u80fd\u53d6\u503c\u7684categorical\u7279\u5f81\u53d8\u6362\u4e3a\u957f\u5ea6\u4e3an_categories\u7684\u4e8c\u8fdb\u5236\u7279\u5f81\u5411\u91cf\uff0c\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5730\u65b9\u662f1\uff0c\u5176\u4f59\u4f4d\u7f6e\u90fd\u662f0\u3002 OneHotEncoder ( categories = 'auto' , drop = None , sparse = True , dtype =< class ' numpy . float64 '>, handle_unknown = 'error' ) from sklearn.preprocessing import OneHotEncoder enc = OneHotEncoder () X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ( X ) . toarray () array([[0., 1., 0., 1., 0., 1.], [1., 0., 1., 0., 1., 0.]]) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u7279\u5f81\u4f7f\u7528\u51e0\u7ef4\u7684\u6570\u503c\u53ef\u4ee5\u4ece\u6570\u636e\u96c6\u81ea\u52a8\u63a8\u65ad\u3002\u800c\u4e14\u4e5f\u53ef\u4ee5\u5728\u5c5e\u6027 categories_ \u4e2d\u627e\u5230: enc . categories_ [array(['female', 'male'], dtype=object), array(['from Europe', 'from US'], dtype=object), array(['uses Firefox', 'uses Safari'], dtype=object)]","title":"onehot \u7f16\u7801"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#categories","text":"\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 categories \u663e\u5f0f\u5730\u6307\u5b9a\u8fd9\u4e00\u70b9\u3002\u4e0b\u9762\u7684\u6570\u636e\u96c6\u4e2d\u6709\u4e24\u79cd\u6027\u522b\u3001\u56db\u4e2a\u6d32\u548c\u56db\u79cdweb\u6d4f\u89c8\u5668: genders = [ 'female' , 'male' ] locations = [ 'from Africa' , 'from Asia' , 'from Europe' , 'from US' ] browsers = [ 'uses Chrome' , 'uses Firefox' , 'uses IE' , 'uses Safari' ] enc = OneHotEncoder ( categories = [ genders , locations , browsers ]) # Note that for there are missing categorical values for the 2nd and 3rd # feature X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ([[ 'female' , 'from Asia' , 'uses Chrome' ]]) . toarray () array([[1., 0., 0., 1., 0., 0., 1., 0., 0., 0.]])","title":"categories \u53c2\u6570"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#handle_unknown","text":"\u5982\u679c\u8bad\u7ec3\u6570\u636e\u53ef\u80fd\u7f3a\u5c11\u7c7b\u522b\u7279\u6027\uff0c\u6700\u597d\u6307\u5b9a handle_unknown ='ignore'\uff0c\u800c\u4e0d\u662f\u50cf\u4e0a\u9762\u90a3\u6837\u624b\u52a8\u8bbe\u7f6e\u7c7b\u522b\u3002\u5f53\u6307\u5b9a handle_unknown='ignore' \uff0c\u5e76\u4e14\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u9047\u5230\u672a\u77e5\u7c7b\u522b\u65f6\uff0c\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\uff0c\u4f46\u662f\u5b58\u5728\u672a\u77e5\u7c7b\u522b\u7684\u7279\u5f81\u751f\u6210\u7684onehot\u7f16\u7801\u5217\u5c06\u5168\u90e8\u4e3a\u96f6( handle_unknown='ignore' \u53ea\u652f\u6301onehot\u7f16\u7801): enc = OneHotEncoder ( handle_unknown = 'ignore' ) X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] enc . fit ( X ) enc . transform ([[ 'female' , 'from Asia' , 'uses Chrome' ]]) . toarray () array([[1., 0., 0., 0., 0., 0.]])","title":"handle_unknown \u53c2\u6570"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#drop","text":"\u8fd8\u53ef\u4ee5\u4f7f\u7528 drop \u53c2\u6570\u5c06\u6bcf\u4e2a\u5217\u7f16\u7801\u4e3an_categories-1\u5217\uff0c\u800c\u4e0d\u662fn_categories\u5217\u3002\u6b64\u53c2\u6570\u5141\u8bb8\u7528\u6237\u4e3a\u8981\u5220\u9664\u7684\u6bcf\u4e2a\u7279\u5f81\u6307\u5b9a\u7c7b\u522b\u3002\u8fd9\u5bf9\u4e8e\u907f\u514d\u67d0\u4e9b\u5206\u7c7b\u5668\u4e2d\u8f93\u5165\u77e9\u9635\u7684\u5171\u7ebf\u6027\u662f\u6709\u7528\u7684\u3002\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528\u975e\u6b63\u5219\u5316\u56de\u5f52( \u7ebf\u6027\u56de\u5f52 )\u65f6\uff0c\u8fd9\u79cd\u529f\u80fd\u662f\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u5171\u7ebf\u6027\u4f1a\u5bfc\u81f4\u534f\u65b9\u5dee\u77e9\u9635\u662f\u4e0d\u53ef\u9006\u7684\u3002\u5f53\u8fd9\u4e2a\u53c2\u6570\u4e0d\u662fNone\u65f6\uff0c handle_unknown \u5fc5\u987b\u8bbe\u7f6e\u4e3aerror: X = [[ 'male' , 'from US' , 'uses Safari' ], [ 'female' , 'from Europe' , 'uses Firefox' ]] drop_enc = OneHotEncoder ( drop = 'first' ) . fit ( X ) print ( drop_enc . categories_ ) drop_enc . transform ( X ) . toarray () [array(['female', 'male'], dtype=object), array(['from Europe', 'from US'], dtype=object), array(['uses Firefox', 'uses Safari'], dtype=object)] array([[1., 1., 1.], [0., 0., 0.]]) no_drop_enc = OneHotEncoder ( drop = None ) . fit ( X ) print ( no_drop_enc . categories_ ) no_drop_enc . transform ( X ) . toarray () [array(['female', 'male'], dtype=object), array(['from Europe', 'from US'], dtype=object), array(['uses Firefox', 'uses Safari'], dtype=object)] array([[0., 1., 0., 1., 0., 1.], [1., 0., 1., 0., 1., 0.]]) \u7c7b\u522b\u7279\u5f81\u6709\u65f6\u662f\u7528\u5b57\u5178\u6765\u8868\u793a\u7684\uff0c\u800c\u4e0d\u662f\u6807\u91cf\uff0c\u5177\u4f53\u8bf7\u53c2\u9605 \u4ece\u5b57\u5178\u4e2d\u52a0\u8f7d\u7279\u5f81 \u3002","title":"drop \u53c2\u6570"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_8","text":"","title":"\u7279\u5f81\u751f\u6210"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_9","text":"\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u901a\u8fc7\u589e\u52a0\u4e00\u4e9b\u8f93\u5165\u6570\u636e\u7684\u975e\u7ebf\u6027\u7279\u5f81\u6765\u589e\u52a0\u6a21\u578b\u7684\u590d\u6742\u5ea6\u901a\u5e38\u662f\u6709\u6548\u7684\u3002\u4e00\u4e2a\u7b80\u5355\u901a\u7528\u7684\u529e\u6cd5\u662f\u4f7f\u7528\u591a\u9879\u5f0f\u7279\u5f81\uff0c\u8fd9\u53ef\u4ee5\u83b7\u5f97\u7279\u5f81\u7684\u66f4\u9ad8\u7ef4\u5ea6\u548c\u4ea4\u4e92\u9879\u3002\u8fd9\u5728 PolynomialFeatures \u4e2d\u5b9e\u73b0: PolynomialFeatures ( degree = 2 , interaction_only = False , include_bias = True , order = 'C' ) interaction_only \uff1a\u53ea\u4fdd\u7559\u4ea4\u4e92\u9879\u3002 import numpy as np from sklearn.preprocessing import PolynomialFeatures X = np . arange ( 6 ) . reshape ( 3 , 2 ) X poly = PolynomialFeatures ( 2 ) poly . fit_transform ( X ) array([[ 1., 0., 1., 0., 0., 1.], [ 1., 2., 3., 4., 6., 9.], [ 1., 4., 5., 16., 20., 25.]]) X \u7684\u7279\u5f81\u5df2\u7ecf\u4ece $(X_1, X_2)$\u8f6c\u6362\u4e3a$(1,X_1,X_2\uff0cX^2_1,X_1X_2, X^2_2)$\u3002 \u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u7279\u5f81\u95f4\u7684\u4ea4\u4e92\u9879\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e interaction_only=True \u6765\u5f97\u5230: poly = PolynomialFeatures ( degree = 2 , interaction_only = True ) poly . fit_transform ( X ) array([[ 1., 0., 1., 0.], [ 1., 2., 3., 6.], [ 1., 4., 5., 20.]]) X \u7684\u7279\u5f81\u5df2\u7ecf\u4ece $(X_1, X_2)$\u8f6c\u6362\u4e3a$(1,X_1,X_2\uff0cX_1X_2)$\u3002 \u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u591a\u9879\u7684 Kernel functions \u65f6 \uff0c\u591a\u9879\u5f0f\u7279\u5f81\u88ab\u9690\u5f0f\u5730\u5728 \u6838\u51fd\u6570 \u4e2d\u88ab\u8c03\u7528(\u6bd4\u5982\uff0c sklearn.svm.SVC \uff0c sklearn.decomposition.KernelPCA )\u3002 \u521b\u5efa\u5e76\u4f7f\u7528\u591a\u9879\u5f0f\u7279\u5f81\u7684\u5cad\u56de\u5f52\u5b9e\u4f8b\u8bf7\u89c1 Polynomial interpolation \u3002","title":"\u751f\u6210\u591a\u9879\u5f0f\u7279\u5f81"},{"location":"scikit-learn/11.9.%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86.html#_10","text":"\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u60f3\u8981\u5c06\u4e00\u4e2a\u5df2\u6709\u7684 Python \u51fd\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u8f6c\u6362\u5668\u6765\u534f\u52a9\u6570\u636e\u6e05\u7406\u6216\u5904\u7406\u3002\u53ef\u4ee5\u4f7f\u7528 FunctionTransformer \u4ece\u4efb\u610f\u51fd\u6570\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u8f6c\u6362\u5668\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7ba1\u9053\u4e2d\u6784\u5efa\u4e00\u4e2a\u5b9e\u73b0\u65e5\u5fd7\u8f6c\u6362\u7684\u8f6c\u5316\u5668\uff0c\u8fd9\u6837\u505a: import numpy as np from sklearn.preprocessing import FunctionTransformer transformer = FunctionTransformer ( np . log1p , validate = True ) X = np . array ([[ 0 , 1 ], [ 2 , 3 ]]) transformer . transform ( X ) array([[0. , 0.69314718], [1.09861229, 1.38629436]]) \u901a\u8fc7\u8bbe\u7f6e check_reverse =True\u5e76\u5728\u8f6c\u6362\u4e4b\u524d\u8c03\u7528 fit \uff0c\u53ef\u4ee5\u786e\u4fdd func \u548c inverse_func \u662f\u5f7c\u6b64\u7684\u62df\u8fc7\u7a0b\u3002\u8bf7\u6ce8\u610f\uff0c\u8bf7\u6ce8\u610f\u4e00\u4e2a warning \u4f1a\u88ab\u629b\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 filterwarnings \u5c06\u5176\u8f6c\u4e3a\u4e00\u4e2a error \u4f7f\u7528\u4e00\u4e2a FunctionTransformer \u7c7b\u6765\u505a\u5b9a\u5236\u5316\u7279\u5f81\u9009\u62e9\u7684\u793a\u4f8b\uff0c\u8bf7\u89c1 Using FunctionTransformer to select columns \u3002","title":"\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/11.6.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html","text":"import keras from toolkit import H from keras import models from keras import layers # tf 2.0 API\u66f4\u6539\uff0c\u4ee5\u4e0b\u8bed\u53e5\u4e0d\u518d\u53ef\u7528 # from keras.models import Sequential # from keras.layers import Dense, Activation from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense , Activation from tensorflow.keras.backend import K ---------------------------------------------------------------------------ImportError Traceback (most recent call last)<ipython-input-1-c87d9f3295c0> in <module> 9 from tensorflow.keras.models import Sequential 10 from tensorflow.keras.layers import Dense, Activation ---> 11 from tensorflow.keras.backend import K ImportError: cannot import name 'K' from 'tensorflow.keras.backend' (G:\\Installed\\Anaconda3\\lib\\site- packages\\tensorflow_core\\python\\keras\\api\\_v2\\keras\\backend\\__init__.py) keras \u7684\u9876\u5c42api h = H ( keras ) d = h . dicts module d [ \"function\" ] ['Input'] d [ \"class\" ] ['Model', 'Sequential'] d [ \"module\" ] ['activations.py', 'applications', 'backend', 'callbacks.py', 'constraints.py', 'datasets', 'engine', 'initializers.py', 'layers', 'legacy', 'losses.py', 'metrics.py', 'models.py', 'objectives.py', 'optimizers.py', 'preprocessing', 'regularizers.py', 'utils', 'wrappers'] models_l = [i for i in dir(models) if not i.startswith(\"_\")] print ( models_l ) print ( len ( models_l )) # 17 layers_l = [ i for i in dir ( layers ) if not i . startswith ( \"_\" )] print ( layers_l ) print ( len ( layers_l )) # 158 # \u5efa\u7acb Sequential \u6a21\u578b model = Sequential ([ Dense ( 32 , input_shape = ( 784 ,)), Activation ( \"relu\" ), Dense ( 10 ), Activation ( \"softmax\" )]) # \u6216\u8005\u4f7f\u7528add\u65b9\u6cd5\u5c06\u5404\u7f51\u7edc\u5c42\u6dfb\u52a0\u5230\u6a21\u578b model = Sequential () model . add ( Dense ( 32 , input_dim = 784 )) model . add ( Activation ( \"relu\" )) # \u914d\u7f6e\u5b66\u4e60\u8fc7\u7a0b compile\u65b9\u6cd5 \"\"\" \u7f16\u8bd1\u6a21\u578b\u65f6\u5fc5\u987b\u6307\u660e\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668 \u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570 \"\"\" ## \u591a\u5206\u7c7b model . compile ( optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = [ 'accuracy' ]) ## \u4e8c\u5206\u7c7b model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' ]) ## \u5747\u65b9\u8bef\u5dee\u56de\u5f52\u95ee\u9898 model . compile ( optimizer = 'rmprop' , loss = 'mse' ) ## \u81ea\u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570 def mean_pred ( y_true , y_pred ): return K . mean ( y_pred ) model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' , mean_pred ]) # \u8bad\u7ec3 \"\"\" Keras \u6a21\u578b\u5728\u8f93\u5165\u6570\u636e\u548c\u6807\u7b7e\u7684 Numpy \u77e9\u9635\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002\u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f \u7528 fit \u51fd\u6570\u3002 \"\"\" ## \u5bf9\u4e8e\u5177\u6709 2 \u4e2a\u7c7b\u7684\u5355\u8f93\u5165\u6a21\u578b\uff08\u4e8c\u8fdb\u5236\u5206\u7c7b\uff09\uff1a model = Sequential () model . add ( Dense ( 32 , activation = 'relu' , input_dim = 100 )) model . add ( Dense ( 1 , activation = 'sigmoid' )) model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' ]) # \u751f\u6210\u865a\u62df\u6570\u636e import numpy as np data = np . random . random (( 1000 , 100 )) labels = np . random . randint ( 2 , size = ( 1000 , 1 )) # \u8bad\u7ec3\u6a21\u578b\uff0c\u4ee5 32 \u4e2a\u6837\u672c\u4e3a\u4e00\u4e2a batch \u8fdb\u884c\u8fed\u4ee3 model . fit ( data , labels , epochs = 10 , batch_size = 32 ) ## \u5bf9\u4e8e\u5177\u6709 10 \u4e2a\u7c7b\u7684\u5355\u8f93\u5165\u6a21\u578b\uff08\u591a\u5206\u7c7b\u5206\u7c7b\uff09\uff1a model = Sequential () model . add ( Dense ( 32 , activation = 'relu' , input_dim = 100 )) model . add ( Dense ( 10 , activation = 'softmax' ,)) model . compile ( optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = [ 'accuracy' ]) # \u751f\u6210\u865a\u62df\u6570\u636e np . random . random (( 1000 , 100 )) labels = np . random . randint ( 10 , size = ( 1000 , 1 )) # \u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u5206\u7c7b\u7684 one-hot \u7f16\u7801 one_hot_labels = keras . utils . to_categorical ( labels , num_classes = 10 ) # \u8bad\u7ec3\u6a21\u578b\uff0c\u4ee5 32 \u4e2a\u6837\u672c\u4e3a\u4e00\u4e2a batch \u8fdb\u884c\u8fed\u4ee3 model . fit ( data , one_hot_labels , epochs = 10 , batch_size = 32 ) dir ( model ) model . summary () model . inputs [ 0 ] model . evaluate () ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-0baaaf5839e6> in <module> ----> 1 print(models_l) 2 print(len(models_l)) # 17 3 4 layers_l = [i for i in dir(layers) if not i.startswith(\"_\")] 5 print(layers_l) NameError: name 'models_l' is not defined","title":"11.6.keras\u5feb\u901f\u5f00\u59cb"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.09 tensorflow version: 2.1.0 from tensorflow import keras from tensorflow.keras.datasets import boston_housing from tensorflow.keras.datasets import imdb from tensorflow.keras.datasets import reuters from tensorflow.keras.datasets import mnist from tensorflow.keras.datasets import cifar10 from tensorflow.keras.datasets import cifar100 from tensorflow.keras.datasets import fashion_mnist import matplotlib.pyplot as plt tensorflow \u4e2d\u53ef\u4ee5\u5feb\u901f\u8c03\u7528\u7684\u6570\u636e\u96c6\uff08\u8fd8\u662f\u8981\u5148\u4e0b\u8f7d\u7684\uff09\uff1a ['cifar10', 'cifar100', 'imdb', 'mnist', 'reuters'] boston_housing \u56de\u5f52\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6765\u81ea\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7ef4\u62a4\u7684 StatLib \u5e93\u3002\u6837\u672c\u5305\u542b 1970 \u5e74\u4ee3\u7684\u5728\u6ce2\u58eb\u987f\u90ca\u533a\u4e0d\u540c\u4f4d\u7f6e\u7684\u623f\u5c4b\u4fe1\u606f\uff0c\u603b\u5171\u6709 13 \u79cd\u623f\u5c4b\u5c5e\u6027\u3002\u76ee\u6807\u503c\u662f\u4e00\u4e2a\u4f4d\u7f6e\u7684\u623f\u5c4b\u4ef7\u683c\u7684\u4e2d\u503c\uff08\u5355\u4f4d\uff1ak$\uff09\u3002 ( x_train , y_train ), ( x_test , y_test ) = boston_housing . load_data () \u53c2\u6570\uff1a path: \u7f13\u5b58\u672c\u5730\u6570\u636e\u96c6\u7684\u4f4d\u7f6e (\u76f8\u5bf9\u8def\u5f84 ~/.keras/datasets)\u3002 seed: \u5728\u8ba1\u7b97\u6d4b\u8bd5\u5206\u5272\u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u7684\u968f\u673a\u79cd\u5b50\u3002 test_split: \u9700\u8981\u4fdd\u7559\u4f5c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\u3002 x_train.shape: (404, 13) y_train.shape: (404,) x_test.shape : (102, 13) y_test.shape : (102,) imdb \u60c5\u611f\u5206\u7c7b\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6765\u81ea IMDB \u7684 25,000 \u6761\u7535\u5f71\u8bc4\u8bba\uff0c\u4ee5\u60c5\u7eea\uff08\u6b63\u9762/\u8d1f\u9762\uff09\u6807\u8bb0\u3002\u8bc4\u8bba\u5df2\u7ecf\u8fc7\u9884\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u8bcd\u7d22\u5f15\uff08\u6574\u6570\uff09\u7684\u5e8f\u5217\u8868\u793a\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5c06\u8bcd\u6309\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u8fdb\u884c\u7d22\u5f15\uff0c\u4f8b\u5982\u6574\u6570 3 \u7f16\u7801\u6570\u636e\u4e2d\u7b2c\u4e09\u4e2a\u6700\u9891\u7e41\u7684\u8bcd\u3002\u8fd9\u5141\u8bb8\u5feb\u901f\u7b5b\u9009\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u300c\u53ea\u8003\u8651\u524d 10,000 \u4e2a\u6700\u5e38\u7528\u7684\u8bcd\uff0c\u4f46\u6392\u9664\u524d 20 \u4e2a\u6700\u5e38\u89c1\u7684\u8bcd\u300d\u3002 \u4f5c\u4e3a\u60ef\u4f8b\uff0c0 \u4e0d\u4ee3\u8868\u7279\u5b9a\u7684\u5355\u8bcd\uff0c\u800c\u662f\u88ab\u7528\u4e8e\u7f16\u7801\u4efb\u4f55\u672a\u77e5\u5355\u8bcd\u3002 ( x_train , y_train ), ( x_test , y_test ) = imdb . load_data ( path = \"imdb.npz\" , num_words = None , skip_top = 0 , maxlen = None , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) x_train.shape: (25000,) y_train.shape: (25000,) x_test.shape : (25000,) y_test.shape : (25000,) x_train \u662f\u4e0d\u7b49\u957f\u7684list\u7ec4\u6210\u7684array\uff0c\u6240\u4ee5\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 y_train \u662f\u5206\u7c7b\u6807\u7b7e\uff0c\u53ea\u6709\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6240\u4ee5\u4e5f\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u8bcd\u5e93\uff1a word_index = imdb . get_word_index () print ( len ( word_index )) 88584 i = 0 for k , v in word_index . items (): print ( f \" { k } : { v } \" ) i += 1 if i > 5 : break fawn:34701 tsukino:52006 nunnery:52007 sonja:16816 vani:63951 woods:1408 mnist \u624b\u5199\u6570\u5b57\u5206\u7c7b\u6570\u636e\u96c6 ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28) y_test.shape : (10000,) def mnist_plot_img ( img ): plt . figure () plt . gray () plt . imshow ( img ) plt . show () mnist_plot_img ( x_train [ 0 ]) cifar10 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 10 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar10 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ]) cifar100 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 100 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar100 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ]) fashion_mnist \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 Fashion-MNIST\u662fZalando\u6587\u7ae0\u56fe\u7247\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b60,000\u4e2a\u793a\u4f8b\u7684\u8bad\u7ec3\u96c6\u548c10,000\u4e2a\u793a\u4f8b\u7684\u6d4b\u8bd5\u96c6\u3002\u6bcf\u4e2a\u793a\u4f8b\u90fd\u662f\u4e00\u4e2a28x28\u7070\u5ea6\u56fe\u50cf\uff0c\u4e0e\u6765\u81ea10\u4e2a\u7c7b\u522b\u7684\u6807\u7b7e\u76f8\u5173\u8054\u3002\u7c7b\u522b\u6807\u7b7e\u662f\uff1a \u7c7b\u522b \u63cf\u8ff0 \u4e2d\u6587 0 T-shirt/top T\u6064/\u4e0a\u8863 1 Trouser \u88e4\u5b50 2 Pullover \u5957\u5934\u886b 3 Dress \u8fde\u8863\u88d9 4 Coat \u5916\u5957 5 Sandal \u51c9\u978b 6 Shirt \u886c\u886b 7 Sneaker \u8fd0\u52a8\u978b 8 Bag \u80cc\u5305 9 Ankle boot \u77ed\u9774 ( x_train , y_train ), ( x_test , y_test ) = fashion_mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d ,)\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d \" % x_test . shape ) print ( \"y_test.shape : ( %d ,)\" % y_test . shape ) x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28 y_test.shape : (10000,) mnist_plot_img ( x_train [ 100 ]) reuters \u8def\u900f\u793e\u65b0\u95fb\u4e3b\u9898\u5206\u7c7b\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6765\u6e90\u4e8e\u8def\u900f\u793e\u7684 11,228 \u6761\u65b0\u95fb\u6587\u672c\uff0c\u603b\u5171\u5206\u4e3a 46 \u4e2a\u4e3b\u9898\u3002\u4e0e IMDB \u6570\u636e\u96c6\u4e00\u6837\uff0c\u6bcf\u6761\u65b0\u95fb\u90fd\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u8bcd\u7d22\u5f15\u7684\u5e8f\u5217\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data ( path = \"reuters.npz\" , num_words = None , skip_top = 0 , maxlen = None , test_split = 0.2 , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) \u89c4\u683c\u4e0e IMDB \u6570\u636e\u96c6\u7684\u89c4\u683c\u76f8\u540c\uff0c\u4f46\u589e\u52a0\u4e86 test_split \u53c2\u6570\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data () x_train.shape: (8982,) y_train.shape: (8982,) x_test.shape : (2246,) y_test.shape : (2246,) word_index = reuters . get_word_index","title":"12.1.keras\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#boston_housing","text":"\u6570\u636e\u96c6\u6765\u81ea\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7ef4\u62a4\u7684 StatLib \u5e93\u3002\u6837\u672c\u5305\u542b 1970 \u5e74\u4ee3\u7684\u5728\u6ce2\u58eb\u987f\u90ca\u533a\u4e0d\u540c\u4f4d\u7f6e\u7684\u623f\u5c4b\u4fe1\u606f\uff0c\u603b\u5171\u6709 13 \u79cd\u623f\u5c4b\u5c5e\u6027\u3002\u76ee\u6807\u503c\u662f\u4e00\u4e2a\u4f4d\u7f6e\u7684\u623f\u5c4b\u4ef7\u683c\u7684\u4e2d\u503c\uff08\u5355\u4f4d\uff1ak$\uff09\u3002 ( x_train , y_train ), ( x_test , y_test ) = boston_housing . load_data () \u53c2\u6570\uff1a path: \u7f13\u5b58\u672c\u5730\u6570\u636e\u96c6\u7684\u4f4d\u7f6e (\u76f8\u5bf9\u8def\u5f84 ~/.keras/datasets)\u3002 seed: \u5728\u8ba1\u7b97\u6d4b\u8bd5\u5206\u5272\u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u7684\u968f\u673a\u79cd\u5b50\u3002 test_split: \u9700\u8981\u4fdd\u7559\u4f5c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\u3002 x_train.shape: (404, 13) y_train.shape: (404,) x_test.shape : (102, 13) y_test.shape : (102,)","title":"boston_housing \u56de\u5f52\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#imdb","text":"\u6570\u636e\u96c6\u6765\u81ea IMDB \u7684 25,000 \u6761\u7535\u5f71\u8bc4\u8bba\uff0c\u4ee5\u60c5\u7eea\uff08\u6b63\u9762/\u8d1f\u9762\uff09\u6807\u8bb0\u3002\u8bc4\u8bba\u5df2\u7ecf\u8fc7\u9884\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u8bcd\u7d22\u5f15\uff08\u6574\u6570\uff09\u7684\u5e8f\u5217\u8868\u793a\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5c06\u8bcd\u6309\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u8fdb\u884c\u7d22\u5f15\uff0c\u4f8b\u5982\u6574\u6570 3 \u7f16\u7801\u6570\u636e\u4e2d\u7b2c\u4e09\u4e2a\u6700\u9891\u7e41\u7684\u8bcd\u3002\u8fd9\u5141\u8bb8\u5feb\u901f\u7b5b\u9009\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u300c\u53ea\u8003\u8651\u524d 10,000 \u4e2a\u6700\u5e38\u7528\u7684\u8bcd\uff0c\u4f46\u6392\u9664\u524d 20 \u4e2a\u6700\u5e38\u89c1\u7684\u8bcd\u300d\u3002 \u4f5c\u4e3a\u60ef\u4f8b\uff0c0 \u4e0d\u4ee3\u8868\u7279\u5b9a\u7684\u5355\u8bcd\uff0c\u800c\u662f\u88ab\u7528\u4e8e\u7f16\u7801\u4efb\u4f55\u672a\u77e5\u5355\u8bcd\u3002 ( x_train , y_train ), ( x_test , y_test ) = imdb . load_data ( path = \"imdb.npz\" , num_words = None , skip_top = 0 , maxlen = None , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) x_train.shape: (25000,) y_train.shape: (25000,) x_test.shape : (25000,) y_test.shape : (25000,) x_train \u662f\u4e0d\u7b49\u957f\u7684list\u7ec4\u6210\u7684array\uff0c\u6240\u4ee5\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 y_train \u662f\u5206\u7c7b\u6807\u7b7e\uff0c\u53ea\u6709\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6240\u4ee5\u4e5f\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u8bcd\u5e93\uff1a word_index = imdb . get_word_index () print ( len ( word_index )) 88584 i = 0 for k , v in word_index . items (): print ( f \" { k } : { v } \" ) i += 1 if i > 5 : break fawn:34701 tsukino:52006 nunnery:52007 sonja:16816 vani:63951 woods:1408","title":"imdb \u60c5\u611f\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#mnist","text":"( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28) y_test.shape : (10000,) def mnist_plot_img ( img ): plt . figure () plt . gray () plt . imshow ( img ) plt . show () mnist_plot_img ( x_train [ 0 ])","title":"mnist \u624b\u5199\u6570\u5b57\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#cifar10","text":"50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 10 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar10 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ])","title":"cifar10 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#cifar100","text":"50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 100 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar100 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ])","title":"cifar100 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#fashion_mnist","text":"Fashion-MNIST\u662fZalando\u6587\u7ae0\u56fe\u7247\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b60,000\u4e2a\u793a\u4f8b\u7684\u8bad\u7ec3\u96c6\u548c10,000\u4e2a\u793a\u4f8b\u7684\u6d4b\u8bd5\u96c6\u3002\u6bcf\u4e2a\u793a\u4f8b\u90fd\u662f\u4e00\u4e2a28x28\u7070\u5ea6\u56fe\u50cf\uff0c\u4e0e\u6765\u81ea10\u4e2a\u7c7b\u522b\u7684\u6807\u7b7e\u76f8\u5173\u8054\u3002\u7c7b\u522b\u6807\u7b7e\u662f\uff1a \u7c7b\u522b \u63cf\u8ff0 \u4e2d\u6587 0 T-shirt/top T\u6064/\u4e0a\u8863 1 Trouser \u88e4\u5b50 2 Pullover \u5957\u5934\u886b 3 Dress \u8fde\u8863\u88d9 4 Coat \u5916\u5957 5 Sandal \u51c9\u978b 6 Shirt \u886c\u886b 7 Sneaker \u8fd0\u52a8\u978b 8 Bag \u80cc\u5305 9 Ankle boot \u77ed\u9774 ( x_train , y_train ), ( x_test , y_test ) = fashion_mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d ,)\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d \" % x_test . shape ) print ( \"y_test.shape : ( %d ,)\" % y_test . shape ) x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28 y_test.shape : (10000,) mnist_plot_img ( x_train [ 100 ])","title":"fashion_mnist \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#reuters","text":"\u6570\u636e\u96c6\u6765\u6e90\u4e8e\u8def\u900f\u793e\u7684 11,228 \u6761\u65b0\u95fb\u6587\u672c\uff0c\u603b\u5171\u5206\u4e3a 46 \u4e2a\u4e3b\u9898\u3002\u4e0e IMDB \u6570\u636e\u96c6\u4e00\u6837\uff0c\u6bcf\u6761\u65b0\u95fb\u90fd\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u8bcd\u7d22\u5f15\u7684\u5e8f\u5217\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data ( path = \"reuters.npz\" , num_words = None , skip_top = 0 , maxlen = None , test_split = 0.2 , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) \u89c4\u683c\u4e0e IMDB \u6570\u636e\u96c6\u7684\u89c4\u683c\u76f8\u540c\uff0c\u4f46\u589e\u52a0\u4e86 test_split \u53c2\u6570\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data () x_train.shape: (8982,) y_train.shape: (8982,) x_test.shape : (2246,) y_test.shape : (2246,) word_index = reuters . get_word_index","title":"reuters \u8def\u900f\u793e\u65b0\u95fb\u4e3b\u9898\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html","text":"Windows 10 Python 3.6.9 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.28 tensorflow version: 2.1.0 \u521b\u5efa\u5f20\u91cf tf . constant ( value , dtype = None , shape = None , name = 'Const' ) tf . range ( start , limit = None , delta = 1 , dtype = None , name = 'range' ) \u6807\u91cf \u4f20\u5165\u6807\u91cf\uff0c\u5728tf\u4e2d\u521b\u5efa\u4e00\u4e2a\u6807\u91cf scalar = tf . constant ( 1.2 ) # \u67e5\u770b scalar \u7684\u7c7b\u578b P ( type ( scalar )) # \u5224\u65ad\u662f\u5426\u4e3a tensor P ( tf . is_tensor ( scalar )) P ( scalar ) # id TensorFlow \u4e2d\u5185\u90e8\u7d22\u5f15\u5bf9\u8c61\u7684\u7f16\u53f7 # shape \u5f20\u91cf\u7684\u5f62\u72b6 # dtype \u5f20\u91cf\u7684\u6570\u636e\u7c7b\u578b <class 'tensorflow.python.framework.ops.EagerTensor'> True <tf.Tensor: shape=(), dtype=float32, numpy=1.2> \u8fd4\u56denumpy\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e scalar . numpy () 1.2 \u83b7\u53d6\u5f20\u91cf\u7684\u5f62\u72b6 P ( scalar . get_shape ()) P ( scalar . shape ) P ( scalar . ndim ) TensorShape([]) TensorShape([]) 0 \u5411\u91cf \u521b\u5efa\u5411\u91cf\u5fc5\u987b\u4f20\u5165 array-like vector = tf . constant ([ 1.2 ]) vector . get_shape () vector . ndim tf . constant ([ 1.2 , 1 , 2 ]) <tf.Tensor: shape=(3,), dtype=float32, numpy=array([1.2, 1. , 2. ], dtype=float32)> \u521b\u5efa\u5e8f\u5217 tf . range ( start =- 10 , limit = 10 , delta = 2 , dtype = None , name = 'test' ) <tf.Tensor: shape=(10,), dtype=int32, numpy=array([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8])> \u77e9\u9635 tf . constant ([[ 1 , 2 ], [ 3 , 4 ]]) tf . constant ([ 1 , 2 , 3 , 4 ], shape = ( 2 , 2 )) # \u5b9a\u4e49\u4e09\u7ef4\u5f20\u91cf tf . constant ([[[ 1 , 2 ], [ 3 , 4 ]]]) <tf.Tensor: shape=(1, 2, 2), dtype=int32, numpy= array([[[1, 2], [3, 4]]])> \u7c7b\u4f3cnumpy\u7684\u521b\u5efa\u5f20\u91cf\u65b9\u5f0f \u5728 TensorFlow \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u521b\u5efa\u5f20\u91cf\uff0c\u5982\u4ece Python \u5217\u8868\u5bf9\u8c61\u521b\u5efa\uff0c\u4eceNumpy \u6570\u7ec4\u521b\u5efa\uff0c\u6216\u8005\u521b\u5efa\u91c7\u6837\u81ea\u67d0\u79cd\u5df2\u77e5\u5206\u5e03\u7684\u5f20\u91cf\u7b49\u3002 \u521b\u5efa\u5168\u4e3a 0 \u6216\u5168\u4e3a 1 \u7684\u5f20\u91cf tf . zeros ( 8 ) tf . zeros (( 8 )) tf . zeros (( 8 , 2 )) tf . zeros (( 8 , 2 , 2 )) tf . zeros_like (( 2 , 2 )) tf . ones ( 8 ) tf . ones_like (( 2 , 2 )) <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 1])> \u521b\u5efa\u81ea\u5b9a\u4e49\u6570\u503c\u5f20\u91cf ## \u521b\u5efa\u6807\u91cf tf . fill ( dims = [], value = 8 ) tf . fill ( dims = ( 8 , 4 ), value = 8 ) tf . fill ( dims = ( 1 , 8 ), value = 8 ) <tf.Tensor: shape=(1, 8), dtype=int32, numpy=array([[8, 8, 8, 8, 8, 8, 8, 8]])> \u521b\u5efa\u5355\u4f4d\u77e9\u9635 tf . eye ( 8 ) <tf.Tensor: shape=(8, 8), dtype=float32, numpy= array([[1., 0., 0., 0., 0., 0., 0., 0.], [0., 1., 0., 0., 0., 0., 0., 0.], [0., 0., 1., 0., 0., 0., 0., 0.], [0., 0., 0., 1., 0., 0., 0., 0.], [0., 0., 0., 0., 1., 0., 0., 0.], [0., 0., 0., 0., 0., 1., 0., 0.], [0., 0., 0., 0., 0., 0., 1., 0.], [0., 0., 0., 0., 0., 0., 0., 1.]], dtype=float32)> \u521b\u5efa\u5b57\u7b26\u4e32 string = tf . constant ( \"Hello,tensorflow.\" ) string <tf.Tensor: shape=(), dtype=string, numpy=b'Hello,tensorflow.'> \u5b57\u7b26\u4e32\u7684\u957f\u5ea6 tf . strings . length ( string ) <tf.Tensor: shape=(), dtype=int32, numpy=17> \u5927\u5c0f\u5199\u8f6c\u6362 \u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u90fd\u8f6c\u6362\u4e3a\u5c0f\u5199 tf . strings . lower ( string ) <tf.Tensor: shape=(), dtype=string, numpy=b'hello,tensorflow.'> \u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u90fd\u8f6c\u6362\u4e3a\u5927\u5199 tf . strings . upper ( string ) <tf.Tensor: shape=(), dtype=string, numpy=b'HELLO,TENSORFLOW.'> \u62c6\u5206\u5b57\u7b26\u4e32 tf . strings . split ( string , ',' ) <tf.Tensor: shape=(2,), dtype=string, numpy=array([b'Hello', b'tensorflow.'], dtype=object)> \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 tf . strings . as_string ([ 1 , 2 , 3 , 4 ]) <tf.Tensor: shape=(4,), dtype=string, numpy=array([b'1', b'2', b'3', b'4'], dtype=object)> \u5b57\u7b26\u4e32\u5408\u5e76 tf . strings . join ( inputs = [ \"I\" , \"Tiananmen Square\" ], separator = \" love \" ) <tf.Tensor: shape=(), dtype=string, numpy=b'I love Tiananmen Square'> tf.strings.reduce_join \u7c7b\u4f3c\u4e8e tf.strings.join \u3002 tf . strings . reduce_join ( inputs , axis = None , keepdims = False , separator = '' , name = None ) \u521b\u5efan-grams\u7684\u5f20\u91cf tf . strings . ngrams ( data , ngram_width , separator = ' ' , pad_values = None , padding_width = None , preserve_short_sequences = False , name = None ) ngram_width \uff1a\u8981\u521b\u5efa\u7684ngram\u7684\u5bbd\u5ea6 separator \uff1a\u95f4\u9694\u5b57\u7b26 ngram_width>1\u65f6\u4f7f\u7528 tf . strings . ngrams ([ \"I\" , \"love\" , \"love\" , \"you\" , \"and\" ], ngram_width = 1 ) . numpy () array([b'I', b'love', b'love', b'you', b'and'], dtype=object) tf . strings . ngrams ([ \"I\" , \"love\" , \"love\" , \"you\" , \"and\" ], ngram_width = 2 , separator = '-' ) . numpy () array([b'I-love', b'love-love', b'love-you', b'you-and'], dtype=object) \u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173 \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u5339\u914d tf . strings . regex_full_match ( input , pattern , name = None ) `` \u7528 rewrite \u66ff\u6362 input \u4e2d\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f pattern \u5339\u914d\u7684\u5143\u7d20 ``` python tf . strings . regex_replace ( input , pattern , rewrite , eplace_global = True , name = None ) \u53bb\u9664\u524d\u540e\u7a7a\u683c tf . strings . strip ( \" I love \" ) <tf.Tensor: shape=(), dtype=string, numpy=b'I love'> \u8fd4\u56de\u5b50\u5b57\u7b26\u4e32 tf . strings . substr ( input , pos , len , unit = 'BYTE' , ame = None ) \u53c2\u8003 \u5c06\u5b57\u7b26\u4e32\u6570\u5b57\u8f6c\u6362\u4e3a\u6570\u503c\u578b\u6570\u5b57\uff0c\u53ef\u4ee5\u6307\u5b9a\u7c7b\u578b tmp_str = tf . constant ([ \"1\" , \"2\" , \"3\" , \"4\" ], shape = ( 2 , 2 )) tf . strings . to_number ( tmp_str , out_type = tf . dtypes . float32 ) <tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[1., 2.], [3., 4.]], dtype=float32)> boolean \u7c7b\u578b bool_tmp = tf . constant ( True ) P ( bool_tmp is True ) # is \u5728python\u4e2d\u7528\u4e8e\u5224\u65ad\u5bf9\u8c61\u662f\u5426\u4e00\u81f4 P ( bool_tmp == True ) False <tf.Tensor: shape=(), dtype=bool, numpy=True> \u6570\u503c\u7cbe\u5ea6 \u5217\u4e3etensorflow\u6240\u6709\u7c7b\u578b [ i for i in dir ( tf . dtypes ) if not i . startswith ( \"_\" )] # tf.int8 tf.int16 tf.int32 tf.int64 # tf.float16 tf.float32 tf.float64(tf.double) ['DType', 'QUANTIZED_DTYPES', 'as_dtype', 'bfloat16', 'bool', 'cast', 'complex', 'complex128', 'complex64', 'double', 'float16', 'float32', 'float64', 'half', 'int16', 'int32', 'int64', 'int8', 'qint16', 'qint32', 'qint8', 'quint16', 'quint8', 'resource', 'saturate_cast', 'string', 'uint16', 'uint32', 'uint64', 'uint8', 'variant'] \u4fdd\u5b58\u7cbe\u5ea6\u8fc7\u4f4e\uff0c\u6ea2\u51fa P ( tf . constant ( 123456789 , dtype = tf . int16 )) P ( tf . constant ( 123456789 , dtype = tf . int32 )) <tf.Tensor: shape=(), dtype=int16, numpy=-13035> <tf.Tensor: shape=(), dtype=int32, numpy=123456789> \u4fdd\u5b58\u7684\u7cbe\u5ea6\u4f4e\uff0c\u5c0f\u6570\u4f4d\u56db\u820d\u4e94\u5165 P ( np . pi ) P ( tf . constant ( np . pi , dtype = tf . float32 )) 3.141592653589793 <tf.Tensor: shape=(), dtype=float32, numpy=3.1415927> \u9ad8\u7cbe\u5ea6\u4fdd\u5b58 P ( tf . constant ( np . pi , dtype = tf . float64 )) <tf.Tensor: shape=(), dtype=float64, numpy=3.141592653589793> \u83b7\u53d6\u6570\u636e\u7c7b\u578b\u4fe1\u606f a = tf . constant ( np . pi , dtype = tf . float64 ) a . dtype tf.float64 \u6539\u53d8\u6570\u636e\u7c7b\u578b \u8fd4\u56de\u65b0\u7684\u5bf9\u8c61 tf . cast ( a , tf . float32 ) tf . dtypes . cast ( a , tf . float32 ) <tf.Tensor: shape=(), dtype=float32, numpy=3.1415927> \u5f85\u4f18\u5316\u5f20\u91cf a = tf . constant ([ 1 , 2 ]) b = tf . Variable ( a ) nametrainable \u662f Variable \u7279\u6709\u7684\u5c5e\u6027\u3002 name \u5c5e\u6027\u7528\u4e8e\u547d\u540d\u8ba1\u7b97\u56fe\u4e2d\u7684\u53d8\u91cf\u3002 trainable \u5c5e\u6027\u8868\u793a\u5f53\u524d\u5f20\u91cf\u662f\u90fd\u9700\u8981\u88ab\u4f18\u5316\uff0c\u521b\u5efa Variable \u9ed8\u8ba4\u5f00\u542f\u4f18\u5316\u3002 b . trainable b . name 'Variable:0' \u521b\u5efa\u5df2\u77e5\u5206\u5e03\u7684\u5f20\u91cf \u6b63\u6001\u5206\u5e03 tf . random . normal ( shape , mean = 0.0 , stddev = 1.0 , dtype =< dtype : 'float32' > , seed = None , name = None ) ## \u5747\u503c\u4e3a0 \u6807\u51c6\u5dee\u4e3a1 tf . random . normal (( 2 , 2 )) ## \u5747\u503c\u4e3a1 \u6807\u51c6\u5dee\u4e3a10 tf . random . normal (( 2 , 2 ), mean = 1 , stddev = 10 ) tf . random . normal (( 2 , 2 ), mean = [ 1 , 2 ], stddev = [ 10 , 20 ]) <tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[ -2.001318, -10.7297 ], [ -4.083525, -39.828648]], dtype=float32)> \u5747\u5300\u5206\u5e03 tf . random . uniform ( shape , minval = 0 , maxval = None , dtype =< dtype : 'float32' > , seed = None , name = None ) ## \u533a\u95f4[0,1]\u7684\u5747\u5300\u5206\u5e03 tf . random . uniform (( 2 , 2 )) ## \u533a\u95f4[-1,1]\u7684\u5747\u5300\u5206\u5e03 tf . random . uniform (( 2 , 2 ), minval =- 1 , maxval = 1 ) ## \u5747\u5300\u91c7\u6837int\u578b\u6570\u636e tf . random . uniform (( 2 , 2 ), minval =- 10 , maxval = 100 , dtype = tf . int32 ) <tf.Tensor: shape=(2, 2), dtype=int32, numpy= array([[85, 43], [52, 99]])> gamma\u5206\u5e03 tf . random . gamma ( shape , alpha , beta = None , dtype =< dtype : 'float32' > , seed = None , name = None ) tf . random . gamma (( 2 , 2 ), alpha = 1 , beta = 2 ) ## poisson\u5206\u5e03 <tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[0.19365284, 0.02967193], [0.12193497, 0.33496195]], dtype=float32)> tf . random . poisson ( shape , lam , dtype =< dtype : 'float32' > , seed = None , name = None ) tf . random . poisson (( 2 , 2 ), lam = [ 2 , 3 ]) <tf.Tensor: shape=(2, 2, 2), dtype=float32, numpy= array([[[5., 3.], [5., 3.]], [[2., 1.], [1., 3.]]], dtype=float32)>","title":"12.2.\u521b\u5efa\u5f20\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_1","text":"tf . constant ( value , dtype = None , shape = None , name = 'Const' ) tf . range ( start , limit = None , delta = 1 , dtype = None , name = 'range' )","title":"\u521b\u5efa\u5f20\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_2","text":"\u4f20\u5165\u6807\u91cf\uff0c\u5728tf\u4e2d\u521b\u5efa\u4e00\u4e2a\u6807\u91cf scalar = tf . constant ( 1.2 ) # \u67e5\u770b scalar \u7684\u7c7b\u578b P ( type ( scalar )) # \u5224\u65ad\u662f\u5426\u4e3a tensor P ( tf . is_tensor ( scalar )) P ( scalar ) # id TensorFlow \u4e2d\u5185\u90e8\u7d22\u5f15\u5bf9\u8c61\u7684\u7f16\u53f7 # shape \u5f20\u91cf\u7684\u5f62\u72b6 # dtype \u5f20\u91cf\u7684\u6570\u636e\u7c7b\u578b <class 'tensorflow.python.framework.ops.EagerTensor'> True <tf.Tensor: shape=(), dtype=float32, numpy=1.2> \u8fd4\u56denumpy\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e scalar . numpy () 1.2 \u83b7\u53d6\u5f20\u91cf\u7684\u5f62\u72b6 P ( scalar . get_shape ()) P ( scalar . shape ) P ( scalar . ndim ) TensorShape([]) TensorShape([]) 0","title":"\u6807\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_3","text":"\u521b\u5efa\u5411\u91cf\u5fc5\u987b\u4f20\u5165 array-like vector = tf . constant ([ 1.2 ]) vector . get_shape () vector . ndim tf . constant ([ 1.2 , 1 , 2 ]) <tf.Tensor: shape=(3,), dtype=float32, numpy=array([1.2, 1. , 2. ], dtype=float32)> \u521b\u5efa\u5e8f\u5217 tf . range ( start =- 10 , limit = 10 , delta = 2 , dtype = None , name = 'test' ) <tf.Tensor: shape=(10,), dtype=int32, numpy=array([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8])>","title":"\u5411\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_4","text":"tf . constant ([[ 1 , 2 ], [ 3 , 4 ]]) tf . constant ([ 1 , 2 , 3 , 4 ], shape = ( 2 , 2 )) # \u5b9a\u4e49\u4e09\u7ef4\u5f20\u91cf tf . constant ([[[ 1 , 2 ], [ 3 , 4 ]]]) <tf.Tensor: shape=(1, 2, 2), dtype=int32, numpy= array([[[1, 2], [3, 4]]])>","title":"\u77e9\u9635"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#numpy","text":"\u5728 TensorFlow \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u521b\u5efa\u5f20\u91cf\uff0c\u5982\u4ece Python \u5217\u8868\u5bf9\u8c61\u521b\u5efa\uff0c\u4eceNumpy \u6570\u7ec4\u521b\u5efa\uff0c\u6216\u8005\u521b\u5efa\u91c7\u6837\u81ea\u67d0\u79cd\u5df2\u77e5\u5206\u5e03\u7684\u5f20\u91cf\u7b49\u3002 \u521b\u5efa\u5168\u4e3a 0 \u6216\u5168\u4e3a 1 \u7684\u5f20\u91cf tf . zeros ( 8 ) tf . zeros (( 8 )) tf . zeros (( 8 , 2 )) tf . zeros (( 8 , 2 , 2 )) tf . zeros_like (( 2 , 2 )) tf . ones ( 8 ) tf . ones_like (( 2 , 2 )) <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 1])> \u521b\u5efa\u81ea\u5b9a\u4e49\u6570\u503c\u5f20\u91cf ## \u521b\u5efa\u6807\u91cf tf . fill ( dims = [], value = 8 ) tf . fill ( dims = ( 8 , 4 ), value = 8 ) tf . fill ( dims = ( 1 , 8 ), value = 8 ) <tf.Tensor: shape=(1, 8), dtype=int32, numpy=array([[8, 8, 8, 8, 8, 8, 8, 8]])> \u521b\u5efa\u5355\u4f4d\u77e9\u9635 tf . eye ( 8 ) <tf.Tensor: shape=(8, 8), dtype=float32, numpy= array([[1., 0., 0., 0., 0., 0., 0., 0.], [0., 1., 0., 0., 0., 0., 0., 0.], [0., 0., 1., 0., 0., 0., 0., 0.], [0., 0., 0., 1., 0., 0., 0., 0.], [0., 0., 0., 0., 1., 0., 0., 0.], [0., 0., 0., 0., 0., 1., 0., 0.], [0., 0., 0., 0., 0., 0., 1., 0.], [0., 0., 0., 0., 0., 0., 0., 1.]], dtype=float32)>","title":"\u7c7b\u4f3cnumpy\u7684\u521b\u5efa\u5f20\u91cf\u65b9\u5f0f"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_5","text":"string = tf . constant ( \"Hello,tensorflow.\" ) string <tf.Tensor: shape=(), dtype=string, numpy=b'Hello,tensorflow.'>","title":"\u521b\u5efa\u5b57\u7b26\u4e32"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_6","text":"tf . strings . length ( string ) <tf.Tensor: shape=(), dtype=int32, numpy=17>","title":"\u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_7","text":"\u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u90fd\u8f6c\u6362\u4e3a\u5c0f\u5199 tf . strings . lower ( string ) <tf.Tensor: shape=(), dtype=string, numpy=b'hello,tensorflow.'> \u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u90fd\u8f6c\u6362\u4e3a\u5927\u5199 tf . strings . upper ( string ) <tf.Tensor: shape=(), dtype=string, numpy=b'HELLO,TENSORFLOW.'>","title":"\u5927\u5c0f\u5199\u8f6c\u6362"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_8","text":"tf . strings . split ( string , ',' ) <tf.Tensor: shape=(2,), dtype=string, numpy=array([b'Hello', b'tensorflow.'], dtype=object)>","title":"\u62c6\u5206\u5b57\u7b26\u4e32"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_9","text":"tf . strings . as_string ([ 1 , 2 , 3 , 4 ]) <tf.Tensor: shape=(4,), dtype=string, numpy=array([b'1', b'2', b'3', b'4'], dtype=object)>","title":"\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_10","text":"tf . strings . join ( inputs = [ \"I\" , \"Tiananmen Square\" ], separator = \" love \" ) <tf.Tensor: shape=(), dtype=string, numpy=b'I love Tiananmen Square'> tf.strings.reduce_join \u7c7b\u4f3c\u4e8e tf.strings.join \u3002 tf . strings . reduce_join ( inputs , axis = None , keepdims = False , separator = '' , name = None )","title":"\u5b57\u7b26\u4e32\u5408\u5e76"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#n-grams","text":"tf . strings . ngrams ( data , ngram_width , separator = ' ' , pad_values = None , padding_width = None , preserve_short_sequences = False , name = None ) ngram_width \uff1a\u8981\u521b\u5efa\u7684ngram\u7684\u5bbd\u5ea6 separator \uff1a\u95f4\u9694\u5b57\u7b26 ngram_width>1\u65f6\u4f7f\u7528 tf . strings . ngrams ([ \"I\" , \"love\" , \"love\" , \"you\" , \"and\" ], ngram_width = 1 ) . numpy () array([b'I', b'love', b'love', b'you', b'and'], dtype=object) tf . strings . ngrams ([ \"I\" , \"love\" , \"love\" , \"you\" , \"and\" ], ngram_width = 2 , separator = '-' ) . numpy () array([b'I-love', b'love-love', b'love-you', b'you-and'], dtype=object)","title":"\u521b\u5efan-grams\u7684\u5f20\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_11","text":"\u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u5339\u914d tf . strings . regex_full_match ( input , pattern , name = None ) `` \u7528 rewrite \u66ff\u6362 input \u4e2d\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f pattern \u5339\u914d\u7684\u5143\u7d20 ``` python tf . strings . regex_replace ( input , pattern , rewrite , eplace_global = True , name = None )","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_12","text":"tf . strings . strip ( \" I love \" ) <tf.Tensor: shape=(), dtype=string, numpy=b'I love'>","title":"\u53bb\u9664\u524d\u540e\u7a7a\u683c"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_13","text":"tf . strings . substr ( input , pos , len , unit = 'BYTE' , ame = None ) \u53c2\u8003 \u5c06\u5b57\u7b26\u4e32\u6570\u5b57\u8f6c\u6362\u4e3a\u6570\u503c\u578b\u6570\u5b57\uff0c\u53ef\u4ee5\u6307\u5b9a\u7c7b\u578b tmp_str = tf . constant ([ \"1\" , \"2\" , \"3\" , \"4\" ], shape = ( 2 , 2 )) tf . strings . to_number ( tmp_str , out_type = tf . dtypes . float32 ) <tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[1., 2.], [3., 4.]], dtype=float32)>","title":"\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#boolean","text":"bool_tmp = tf . constant ( True ) P ( bool_tmp is True ) # is \u5728python\u4e2d\u7528\u4e8e\u5224\u65ad\u5bf9\u8c61\u662f\u5426\u4e00\u81f4 P ( bool_tmp == True ) False <tf.Tensor: shape=(), dtype=bool, numpy=True>","title":"boolean \u7c7b\u578b"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_14","text":"\u5217\u4e3etensorflow\u6240\u6709\u7c7b\u578b [ i for i in dir ( tf . dtypes ) if not i . startswith ( \"_\" )] # tf.int8 tf.int16 tf.int32 tf.int64 # tf.float16 tf.float32 tf.float64(tf.double) ['DType', 'QUANTIZED_DTYPES', 'as_dtype', 'bfloat16', 'bool', 'cast', 'complex', 'complex128', 'complex64', 'double', 'float16', 'float32', 'float64', 'half', 'int16', 'int32', 'int64', 'int8', 'qint16', 'qint32', 'qint8', 'quint16', 'quint8', 'resource', 'saturate_cast', 'string', 'uint16', 'uint32', 'uint64', 'uint8', 'variant'] \u4fdd\u5b58\u7cbe\u5ea6\u8fc7\u4f4e\uff0c\u6ea2\u51fa P ( tf . constant ( 123456789 , dtype = tf . int16 )) P ( tf . constant ( 123456789 , dtype = tf . int32 )) <tf.Tensor: shape=(), dtype=int16, numpy=-13035> <tf.Tensor: shape=(), dtype=int32, numpy=123456789> \u4fdd\u5b58\u7684\u7cbe\u5ea6\u4f4e\uff0c\u5c0f\u6570\u4f4d\u56db\u820d\u4e94\u5165 P ( np . pi ) P ( tf . constant ( np . pi , dtype = tf . float32 )) 3.141592653589793 <tf.Tensor: shape=(), dtype=float32, numpy=3.1415927> \u9ad8\u7cbe\u5ea6\u4fdd\u5b58 P ( tf . constant ( np . pi , dtype = tf . float64 )) <tf.Tensor: shape=(), dtype=float64, numpy=3.141592653589793> \u83b7\u53d6\u6570\u636e\u7c7b\u578b\u4fe1\u606f a = tf . constant ( np . pi , dtype = tf . float64 ) a . dtype tf.float64 \u6539\u53d8\u6570\u636e\u7c7b\u578b \u8fd4\u56de\u65b0\u7684\u5bf9\u8c61 tf . cast ( a , tf . float32 ) tf . dtypes . cast ( a , tf . float32 ) <tf.Tensor: shape=(), dtype=float32, numpy=3.1415927>","title":"\u6570\u503c\u7cbe\u5ea6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_15","text":"a = tf . constant ([ 1 , 2 ]) b = tf . Variable ( a ) nametrainable \u662f Variable \u7279\u6709\u7684\u5c5e\u6027\u3002 name \u5c5e\u6027\u7528\u4e8e\u547d\u540d\u8ba1\u7b97\u56fe\u4e2d\u7684\u53d8\u91cf\u3002 trainable \u5c5e\u6027\u8868\u793a\u5f53\u524d\u5f20\u91cf\u662f\u90fd\u9700\u8981\u88ab\u4f18\u5316\uff0c\u521b\u5efa Variable \u9ed8\u8ba4\u5f00\u542f\u4f18\u5316\u3002 b . trainable b . name 'Variable:0'","title":"\u5f85\u4f18\u5316\u5f20\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_16","text":"","title":"\u521b\u5efa\u5df2\u77e5\u5206\u5e03\u7684\u5f20\u91cf"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_17","text":"tf . random . normal ( shape , mean = 0.0 , stddev = 1.0 , dtype =< dtype : 'float32' > , seed = None , name = None ) ## \u5747\u503c\u4e3a0 \u6807\u51c6\u5dee\u4e3a1 tf . random . normal (( 2 , 2 )) ## \u5747\u503c\u4e3a1 \u6807\u51c6\u5dee\u4e3a10 tf . random . normal (( 2 , 2 ), mean = 1 , stddev = 10 ) tf . random . normal (( 2 , 2 ), mean = [ 1 , 2 ], stddev = [ 10 , 20 ]) <tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[ -2.001318, -10.7297 ], [ -4.083525, -39.828648]], dtype=float32)>","title":"\u6b63\u6001\u5206\u5e03"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#_18","text":"tf . random . uniform ( shape , minval = 0 , maxval = None , dtype =< dtype : 'float32' > , seed = None , name = None ) ## \u533a\u95f4[0,1]\u7684\u5747\u5300\u5206\u5e03 tf . random . uniform (( 2 , 2 )) ## \u533a\u95f4[-1,1]\u7684\u5747\u5300\u5206\u5e03 tf . random . uniform (( 2 , 2 ), minval =- 1 , maxval = 1 ) ## \u5747\u5300\u91c7\u6837int\u578b\u6570\u636e tf . random . uniform (( 2 , 2 ), minval =- 10 , maxval = 100 , dtype = tf . int32 ) <tf.Tensor: shape=(2, 2), dtype=int32, numpy= array([[85, 43], [52, 99]])>","title":"\u5747\u5300\u5206\u5e03"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.2.%E5%88%9B%E5%BB%BA%E5%BC%A0%E9%87%8F.html#gamma","text":"tf . random . gamma ( shape , alpha , beta = None , dtype =< dtype : 'float32' > , seed = None , name = None ) tf . random . gamma (( 2 , 2 ), alpha = 1 , beta = 2 ) ## poisson\u5206\u5e03 <tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[0.19365284, 0.02967193], [0.12193497, 0.33496195]], dtype=float32)> tf . random . poisson ( shape , lam , dtype =< dtype : 'float32' > , seed = None , name = None ) tf . random . poisson (( 2 , 2 ), lam = [ 2 , 3 ]) <tf.Tensor: shape=(2, 2, 2), dtype=float32, numpy= array([[[5., 3.], [5., 3.]], [[2., 1.], [1., 3.]]], dtype=float32)>","title":"gamma\u5206\u5e03"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.05.28 tensorflow version: 2.1.0 \u7d22\u5f15\u4e0e\u5207\u7247 tensorflow \u7684\u7d22\u5f15\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662fPython\u5e38\u7528\u7684\u6574\u6570\u7d22\u5f15\u548c\u5207\u7247\u3002 # \u4e00\u5171\u67094\u5f20\u56fe\u7247 # \u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u4e3a 32*32 # \u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7531 3\u4e2a rgb\u503c\u7ec4\u6210 x = tf . random . normal ([ 4 , 32 , 32 , 3 ]) # \u7b2c\u4e00\u5f20\u56fe\u7247 \u7b2c\u4e8c\u884c \u7b2c\u4e8c\u5217\u7684\u50cf\u7d20 x [ 1 ][ 1 ][ 1 ] <tf.Tensor: shape=(3,), dtype=float32, numpy=array([0.13605669, 0.43695715, 0.85433054], dtype=float32)> \u7ef4\u5ea6\u64cd\u7eb5 x = tf . range ( 96 ) x = tf . reshape ( x , [ 2 , 4 , 4 , 3 ]) x = tf . reshape ( x , [ - 1 , 2 ]) \u63d2\u5165\u7ef4\u5ea6 \u5728\u7b2cx\u4e2a\u8f74\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u8f74 y = tf . expand_dims ( x , axis = 1 ) y . shape TensorShape([48, 1, 2]) \u5220\u9664\u957f\u5ea6\u4e3a1\u7684\u8f74 \u4e0d\u6307\u5b9aaxis \u5219\u9ed8\u8ba4\u5220\u9664\u6240\u6709\u957f\u5ea6\u4e3a1\u7684\u8f74 y = tf . squeeze ( y , axis = 1 ) y . shape TensorShape([48, 2]) \u4ea4\u6362\u7ef4\u5ea6 \u4ea4\u6362\u7ef4\u5ea6\u4e4b\u540e\uff0c\u5185\u5b58\u4e2d\u5143\u7d20\u7684\u50a8\u5b58\u987a\u5e8f\u6539\u53d8\uff0c\u56e0\u6b64\u4ea4\u6362\u7ef4\u5ea6\u7684\u8ba1\u7b97\u4ee3\u4ef7\u6bd4\u6539\u53d8\u89c6\u56fe\u5f62\u72b6\u8981\u9ad8\u3002 z = tf . transpose ( y , perm = [ 1 , 0 ]) z . shape TensorShape([2, 48]) \u590d\u5236\u6570\u636e b = tf . constant ([ 1 , 2 ]) P ( b . shape ) b = tf . expand_dims ( b , axis = 0 ) P ( b . shape ) b = tf . tile ( b , multiples = [ 2 , 1 ]) P ( b . shape ) TensorShape([2]) TensorShape([1, 2]) TensorShape([2, 2]) multiples \u5206\u522b\u6307\u5b9a\u4e86\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u9762\u7684\u590d\u5236\u500d\u6570\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u4e3a 1 \u8868\u660e\u4e0d\u590d\u5236\uff0c\u4e3a 2 \u8868\u660e\u65b0\u957f\u5ea6\u4e3a\u539f\u6765\u957f\u5ea6\u76842 \u500d\uff0c\u5373\u6570\u636e\u590d\u5236\u4e00\u4efd\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u5e7f\u64ad broadcasting \u7684\u6548\u679c\u548c tf.tile \u4e00\u6837\u3002 \u7b97\u672f\u8fd0\u7b97 a = tf . range ( 4 ) b = tf . constant ( 2 ) \u9664 a / b tf . divide ( a , b ) <tf.Tensor: shape=(4,), dtype=float64, numpy=array([0. , 0.5, 1. , 1.5])> \u53d6\u4f59 a % b <tf.Tensor: shape=(4,), dtype=int32, numpy=array([0, 1, 0, 1])> \u5e73\u65b9\u8fd0\u7b97 a ** 2 tf . square ( a ) <tf.Tensor: shape=(4,), dtype=int32, numpy=array([0, 1, 4, 9])> \u5e42\u8fd0\u7b97 a ** b tf . pow ( a , b ) <tf.Tensor: shape=(4,), dtype=int32, numpy=array([0, 1, 4, 9])> \u5f00\u6839\u53f7 (\u5fc5\u987b\u662f\u6d6e\u70b9\u6570) tf . sqrt ( tf . constant ( 9.0 )) <tf.Tensor: shape=(), dtype=float32, numpy=3.0> \u6307\u6570 2 ** a # \u5fc5\u987b\u662f\u6d6e\u70b9\u6570 tf . exp ( 3.0 ) np . e ** 3.0 20.085536923187664 \u5bf9\u6570 \u5982\u679c\u5e0c\u671b\u8ba1\u7b97\u5176\u5b83\u5e95\u6570\u7684\u5bf9\u6570\uff0c\u6682\u65f6\u53ea\u80fd\u901a\u8fc7\u6362\u5e95\u516c\u5f0f\u5b9e\u73b0 tf . math . log ( tf . constant ( 9.0 )) <tf.Tensor: shape=(), dtype=float32, numpy=2.1972246> \u77e9\u9635\u4e58\u6cd5 a = tf . constant ([[ 2 , 2 ], [ 1 , 2 ]]) b = tf . constant ([[ 2 , 3 ], [ 1 , 1 ]]) print ( a ) print ( b ) tf . matmul ( a , b ) tf.Tensor( [[2 2] [1 2]], shape=(2, 2), dtype=int32) tf.Tensor( [[2 3] [1 1]], shape=(2, 2), dtype=int32) <tf.Tensor: shape=(2, 2), dtype=int32, numpy= array([[6, 8], [4, 5]])> \u5408\u5e76 a = tf . random . normal ([ 4 , 35 , 8 ]) b = tf . random . normal ([ 6 , 35 , 8 ]) \u4e0d\u9700\u8981\u5408\u5e76\u7684\u7ef4\u5ea6\u7684\u5927\u5c0f\u5fc5\u987b\u5b8c\u5168\u76f8\u7b49 tf . concat ([ a , b ], axis = 0 ) tf . concat ([ a , b ], axis = 0 ) . shape TensorShape([10, 35, 8]) \u5806\u53e0 a = tf . random . normal ([ 35 , 8 ]) b = tf . random . normal ([ 35 , 8 ]) P ( tf . stack ([ a , b ], axis = 0 ) . shape ) a = tf . random . normal ([ 35 , 8 ]) b = tf . random . normal ([ 35 , 8 ]) P ( tf . stack ([ a , b ], axis =- 1 ) . shape ) TensorShape([2, 35, 8]) TensorShape([35, 8, 2]) \u62c6\u5206 x = tf . random . normal ([ 10 , 35 , 8 ]) # \u7b49\u957f\u5207\u5272\u4e3a 10 \u4efd result = tf . split ( x , num_or_size_splits = 10 , axis = 0 ) len ( result ) # \u8fd4\u56de 10 \u4e2a\u5f20\u91cf\u7ec4\u6210\u7684\u5217\u8868 10 \u7279\u522b\u5730\uff0c\u5982\u679c\u5e0c\u671b\u5728\u67d0\u4e2a\u7ef4\u5ea6\u4e0a\u5168\u90e8\u6309\u957f\u5ea6\u4e3a 1 \u7684\u65b9\u5f0f\u5206\u5272\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 tf.unstack(x, axis) \u51fd\u6570\u3002\u8fd9\u79cd\u65b9\u5f0f\u662f tf.split \u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5207\u5272\u957f\u5ea6\u56fa\u5b9a\u4e3a 1\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u5207\u5272\u7ef4\u5ea6\u7684\u7d22\u5f15\u53f7\u5373\u53ef\u3002 x = tf . random . normal ([ 10 , 35 , 8 ]) result = tf . unstack ( x , axis = 0 ) # Unstack \u4e3a\u957f\u5ea6\u4e3a 1 \u7684\u5f20\u91cf len ( result ) # \u8fd4\u56de 10 \u4e2a\u5f20\u91cf\u7684\u5217\u8868 10 \u7edf\u8ba1\u8ba1\u7b97 \u8303\u6570 x = tf . ones ([ 2 , 2 ]) tf . norm ( x , ord = 1 ) # \u8ba1\u7b97 L1 \u8303\u6570 tf . norm ( x , ord = 2 ) # \u8ba1\u7b97 L2 \u8303\u6570 tf . norm ( x , ord = np . inf ) # \u8ba1\u7b97\u221e\u8303\u6570 <tf.Tensor: shape=(), dtype=float32, numpy=1.0> \u6700\u503c\u3001\u5747\u503c\u3001\u548c x = tf . random . normal ([ 2 , 4 ]) tf . reduce_max ( x , axis = 1 ) # \u6700\u5927\u503c tf . reduce_min ( x , axis = 1 ) # \u6700\u5c0f\u503c tf . reduce_mean ( x , axis = 1 ) # \u5747\u503c <tf.Tensor: shape=(2,), dtype=float32, numpy=array([-0.16865723, 0.29473132], dtype=float32)> \u7edf\u8ba1\u5168\u5c40\u7684\u6700\u5927\u3001\u6700\u5c0f\u3001\u5747\u503c\u3001\u548c\uff0c\u8fd4\u56de\u7684\u5f20\u91cf\u5747\u4e3a\u6807\u91cf tf . reduce_max ( x ), tf . reduce_min ( x ), tf . reduce_mean ( x ) tf . reduce_sum ( x , axis =- 1 ) # \u6c42\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u548c <tf.Tensor: shape=(2,), dtype=float32, numpy=array([-0.6746289, 1.1789253], dtype=float32)> \u901a\u8fc7 tf.argmax(x, axis) \u548c tf.argmin(x, axis) \u53ef\u4ee5\u6c42\u89e3\u5728 axis \u8f74\u4e0a\uff0c x \u7684\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u6240\u5728\u7684\u7d22\u5f15 tf . argmax ( x ) tf . argmin ( x ) <tf.Tensor: shape=(4,), dtype=int64, numpy=array([0, 0, 1, 0], dtype=int64)> \u5f20\u91cf\u6bd4\u8f83 # tf.equal(a, b) # tf.math.greater \ud835\udc4f > \ud835\udc50 # tf.math.less \ud835\udc4f < \ud835\udc50 # tf.math.greater_equal \ud835\udc4f \u2265 \ud835\udc50 # tf.math.less_equal \ud835\udc4f \u2264 \ud835\udc50 # tf.math.not_equal \ud835\udc4f \u2260 \ud835\udc50 # tf.math.is_nan \ud835\udc4f = nan \u586b\u5145\u4e0e\u590d\u5236 \u8fd9\u91cc\u6240\u8bf4\u7684\u586b\u5145\u5b9e\u9645\u4e0a\u662f\u63d2\u5165 a = tf . constant ([ 1 , 2 , 3 , 4 , 5 , 6 ]) # \u7b2c\u4e00\u4e2a\u53e5\u5b50 b = tf . constant ([ 7 , 8 , 1 , 6 ]) # \u7b2c\u4e8c\u4e2a\u53e5\u5b50 b = tf . pad ( b , [[ 0 , 2 ]]) # \u53e5\u5b50\u672b\u5c3e\u586b\u5145 2 \u4e2a 0 b <tf.Tensor: shape=(6,), dtype=int32, numpy=array([7, 8, 1, 6, 0, 0])> \u6570\u636e\u9650\u5e45\u8fd0\u7b97 x = tf . range ( 9 ) P ( tf . maximum ( x , 2 )) # \u4e0b\u9650\u5e45\u5230 2 P ( tf . minimum ( x , 7 )) # \u4e0a\u9650\u5e45\u5230 7 P ( tf . minimum ( x , 11 )) <tf.Tensor: shape=(9,), dtype=int32, numpy=array([2, 2, 2, 3, 4, 5, 6, 7, 8])> <tf.Tensor: shape=(9,), dtype=int32, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 7])> <tf.Tensor: shape=(9,), dtype=int32, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8])> \u9ad8\u7ea7\u64cd\u4f5c x = tf . random . uniform ([ 4 , 5 , 6 ], maxval = 100 , dtype = tf . int32 ) tf . gather ( x , [ 0 , 1 ], axis = 0 ) <tf.Tensor: shape=(2, 5, 6), dtype=int32, numpy= array([[[20, 91, 41, 61, 83, 7], [28, 74, 8, 56, 23, 28], [21, 71, 19, 35, 85, 24], [59, 96, 14, 87, 17, 22], [65, 27, 42, 94, 52, 94]], [[35, 66, 70, 6, 18, 99], [90, 15, 85, 12, 74, 20], [ 4, 97, 55, 91, 90, 1], [79, 74, 81, 83, 78, 9], [85, 32, 71, 1, 9, 28]]])> \u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u4e0a\u8ff0\u9700\u6c42\uff0c\u901a\u8fc7\u5207\u7247 y[:2] \u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u5b9e\u73b0\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u89c4\u5219\u7684\u7d22\u5f15\u65b9\u5f0f\uff0c\u6bd4\u5982\uff0c\u9700\u8981\u62bd\u53d6\u7b2c\u4e8c\u8f74\u7d22\u5f15\u4e3a 0\u30012\u30013 \u7684\u6570\u636e\uff0c\u5219\u5207\u7247\u65b9\u5f0f\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\uff0c\u800c tf.gather \u5219\u662f\u9488\u5bf9\u4e8e\u6b64\u9700\u6c42\u8bbe\u8ba1\u7684\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\u3002 tf . gather ( x ,[ 0 , 2 , 3 ], axis = 1 ) <tf.Tensor: shape=(4, 3, 6), dtype=int32, numpy= array([[[20, 91, 41, 61, 83, 7], [21, 71, 19, 35, 85, 24], [59, 96, 14, 87, 17, 22]], [[35, 66, 70, 6, 18, 99], [ 4, 97, 55, 91, 90, 1], [79, 74, 81, 83, 78, 9]], [[90, 46, 9, 12, 51, 19], [99, 16, 88, 28, 24, 73], [79, 28, 45, 55, 66, 84]], [[73, 33, 4, 57, 75, 86], [95, 46, 59, 67, 48, 67], [20, 89, 20, 94, 87, 38]]])> \u901a\u8fc7 tf.gather_nd \u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6bcf\u6b21\u91c7\u6837\u70b9\u7684\u591a\u7ef4\u5750\u6807\u6765\u5b9e\u73b0\u91c7\u6837\u591a\u4e2a\u70b9\u7684\u76ee\u7684\uff1a tf . gather_nd ( x , [[ 1 , 1 ], [ 2 , 2 ], [ 3 , 3 ]]) <tf.Tensor: shape=(3, 6), dtype=int32, numpy= array([[90, 15, 85, 12, 74, 20], [99, 16, 88, 28, 24, 73], [20, 89, 20, 94, 87, 38]])> \u901a\u8fc7 tf.where(cond, a, b) \u64cd\u4f5c\u53ef\u4ee5\u6839\u636e cond \u6761\u4ef6\u7684\u771f\u5047\u4ece\u53c2\u6570b\u6216c\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 # tf.where() # tf.scatter_nd()","title":"12.3.\u5f20\u91cf\u8fdb\u9636\u64cd\u4f5c"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_1","text":"tensorflow \u7684\u7d22\u5f15\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662fPython\u5e38\u7528\u7684\u6574\u6570\u7d22\u5f15\u548c\u5207\u7247\u3002 # \u4e00\u5171\u67094\u5f20\u56fe\u7247 # \u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u4e3a 32*32 # \u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7531 3\u4e2a rgb\u503c\u7ec4\u6210 x = tf . random . normal ([ 4 , 32 , 32 , 3 ]) # \u7b2c\u4e00\u5f20\u56fe\u7247 \u7b2c\u4e8c\u884c \u7b2c\u4e8c\u5217\u7684\u50cf\u7d20 x [ 1 ][ 1 ][ 1 ] <tf.Tensor: shape=(3,), dtype=float32, numpy=array([0.13605669, 0.43695715, 0.85433054], dtype=float32)>","title":"\u7d22\u5f15\u4e0e\u5207\u7247"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_2","text":"x = tf . range ( 96 ) x = tf . reshape ( x , [ 2 , 4 , 4 , 3 ]) x = tf . reshape ( x , [ - 1 , 2 ])","title":"\u7ef4\u5ea6\u64cd\u7eb5"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_3","text":"\u5728\u7b2cx\u4e2a\u8f74\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u8f74 y = tf . expand_dims ( x , axis = 1 ) y . shape TensorShape([48, 1, 2])","title":"\u63d2\u5165\u7ef4\u5ea6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#1","text":"\u4e0d\u6307\u5b9aaxis \u5219\u9ed8\u8ba4\u5220\u9664\u6240\u6709\u957f\u5ea6\u4e3a1\u7684\u8f74 y = tf . squeeze ( y , axis = 1 ) y . shape TensorShape([48, 2])","title":"\u5220\u9664\u957f\u5ea6\u4e3a1\u7684\u8f74"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_4","text":"\u4ea4\u6362\u7ef4\u5ea6\u4e4b\u540e\uff0c\u5185\u5b58\u4e2d\u5143\u7d20\u7684\u50a8\u5b58\u987a\u5e8f\u6539\u53d8\uff0c\u56e0\u6b64\u4ea4\u6362\u7ef4\u5ea6\u7684\u8ba1\u7b97\u4ee3\u4ef7\u6bd4\u6539\u53d8\u89c6\u56fe\u5f62\u72b6\u8981\u9ad8\u3002 z = tf . transpose ( y , perm = [ 1 , 0 ]) z . shape TensorShape([2, 48])","title":"\u4ea4\u6362\u7ef4\u5ea6"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_5","text":"b = tf . constant ([ 1 , 2 ]) P ( b . shape ) b = tf . expand_dims ( b , axis = 0 ) P ( b . shape ) b = tf . tile ( b , multiples = [ 2 , 1 ]) P ( b . shape ) TensorShape([2]) TensorShape([1, 2]) TensorShape([2, 2]) multiples \u5206\u522b\u6307\u5b9a\u4e86\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u9762\u7684\u590d\u5236\u500d\u6570\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u4e3a 1 \u8868\u660e\u4e0d\u590d\u5236\uff0c\u4e3a 2 \u8868\u660e\u65b0\u957f\u5ea6\u4e3a\u539f\u6765\u957f\u5ea6\u76842 \u500d\uff0c\u5373\u6570\u636e\u590d\u5236\u4e00\u4efd\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u590d\u5236\u6570\u636e"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_6","text":"broadcasting \u7684\u6548\u679c\u548c tf.tile \u4e00\u6837\u3002","title":"\u5e7f\u64ad"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_7","text":"a = tf . range ( 4 ) b = tf . constant ( 2 ) \u9664 a / b tf . divide ( a , b ) <tf.Tensor: shape=(4,), dtype=float64, numpy=array([0. , 0.5, 1. , 1.5])> \u53d6\u4f59 a % b <tf.Tensor: shape=(4,), dtype=int32, numpy=array([0, 1, 0, 1])> \u5e73\u65b9\u8fd0\u7b97 a ** 2 tf . square ( a ) <tf.Tensor: shape=(4,), dtype=int32, numpy=array([0, 1, 4, 9])> \u5e42\u8fd0\u7b97 a ** b tf . pow ( a , b ) <tf.Tensor: shape=(4,), dtype=int32, numpy=array([0, 1, 4, 9])> \u5f00\u6839\u53f7 (\u5fc5\u987b\u662f\u6d6e\u70b9\u6570) tf . sqrt ( tf . constant ( 9.0 )) <tf.Tensor: shape=(), dtype=float32, numpy=3.0> \u6307\u6570 2 ** a # \u5fc5\u987b\u662f\u6d6e\u70b9\u6570 tf . exp ( 3.0 ) np . e ** 3.0 20.085536923187664 \u5bf9\u6570 \u5982\u679c\u5e0c\u671b\u8ba1\u7b97\u5176\u5b83\u5e95\u6570\u7684\u5bf9\u6570\uff0c\u6682\u65f6\u53ea\u80fd\u901a\u8fc7\u6362\u5e95\u516c\u5f0f\u5b9e\u73b0 tf . math . log ( tf . constant ( 9.0 )) <tf.Tensor: shape=(), dtype=float32, numpy=2.1972246> \u77e9\u9635\u4e58\u6cd5 a = tf . constant ([[ 2 , 2 ], [ 1 , 2 ]]) b = tf . constant ([[ 2 , 3 ], [ 1 , 1 ]]) print ( a ) print ( b ) tf . matmul ( a , b ) tf.Tensor( [[2 2] [1 2]], shape=(2, 2), dtype=int32) tf.Tensor( [[2 3] [1 1]], shape=(2, 2), dtype=int32) <tf.Tensor: shape=(2, 2), dtype=int32, numpy= array([[6, 8], [4, 5]])>","title":"\u7b97\u672f\u8fd0\u7b97"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_8","text":"a = tf . random . normal ([ 4 , 35 , 8 ]) b = tf . random . normal ([ 6 , 35 , 8 ]) \u4e0d\u9700\u8981\u5408\u5e76\u7684\u7ef4\u5ea6\u7684\u5927\u5c0f\u5fc5\u987b\u5b8c\u5168\u76f8\u7b49 tf . concat ([ a , b ], axis = 0 ) tf . concat ([ a , b ], axis = 0 ) . shape TensorShape([10, 35, 8])","title":"\u5408\u5e76"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_9","text":"a = tf . random . normal ([ 35 , 8 ]) b = tf . random . normal ([ 35 , 8 ]) P ( tf . stack ([ a , b ], axis = 0 ) . shape ) a = tf . random . normal ([ 35 , 8 ]) b = tf . random . normal ([ 35 , 8 ]) P ( tf . stack ([ a , b ], axis =- 1 ) . shape ) TensorShape([2, 35, 8]) TensorShape([35, 8, 2])","title":"\u5806\u53e0"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_10","text":"x = tf . random . normal ([ 10 , 35 , 8 ]) # \u7b49\u957f\u5207\u5272\u4e3a 10 \u4efd result = tf . split ( x , num_or_size_splits = 10 , axis = 0 ) len ( result ) # \u8fd4\u56de 10 \u4e2a\u5f20\u91cf\u7ec4\u6210\u7684\u5217\u8868 10 \u7279\u522b\u5730\uff0c\u5982\u679c\u5e0c\u671b\u5728\u67d0\u4e2a\u7ef4\u5ea6\u4e0a\u5168\u90e8\u6309\u957f\u5ea6\u4e3a 1 \u7684\u65b9\u5f0f\u5206\u5272\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 tf.unstack(x, axis) \u51fd\u6570\u3002\u8fd9\u79cd\u65b9\u5f0f\u662f tf.split \u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5207\u5272\u957f\u5ea6\u56fa\u5b9a\u4e3a 1\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u5207\u5272\u7ef4\u5ea6\u7684\u7d22\u5f15\u53f7\u5373\u53ef\u3002 x = tf . random . normal ([ 10 , 35 , 8 ]) result = tf . unstack ( x , axis = 0 ) # Unstack \u4e3a\u957f\u5ea6\u4e3a 1 \u7684\u5f20\u91cf len ( result ) # \u8fd4\u56de 10 \u4e2a\u5f20\u91cf\u7684\u5217\u8868 10","title":"\u62c6\u5206"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_11","text":"","title":"\u7edf\u8ba1\u8ba1\u7b97"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_12","text":"x = tf . ones ([ 2 , 2 ]) tf . norm ( x , ord = 1 ) # \u8ba1\u7b97 L1 \u8303\u6570 tf . norm ( x , ord = 2 ) # \u8ba1\u7b97 L2 \u8303\u6570 tf . norm ( x , ord = np . inf ) # \u8ba1\u7b97\u221e\u8303\u6570 <tf.Tensor: shape=(), dtype=float32, numpy=1.0>","title":"\u8303\u6570"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_13","text":"x = tf . random . normal ([ 2 , 4 ]) tf . reduce_max ( x , axis = 1 ) # \u6700\u5927\u503c tf . reduce_min ( x , axis = 1 ) # \u6700\u5c0f\u503c tf . reduce_mean ( x , axis = 1 ) # \u5747\u503c <tf.Tensor: shape=(2,), dtype=float32, numpy=array([-0.16865723, 0.29473132], dtype=float32)> \u7edf\u8ba1\u5168\u5c40\u7684\u6700\u5927\u3001\u6700\u5c0f\u3001\u5747\u503c\u3001\u548c\uff0c\u8fd4\u56de\u7684\u5f20\u91cf\u5747\u4e3a\u6807\u91cf tf . reduce_max ( x ), tf . reduce_min ( x ), tf . reduce_mean ( x ) tf . reduce_sum ( x , axis =- 1 ) # \u6c42\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u548c <tf.Tensor: shape=(2,), dtype=float32, numpy=array([-0.6746289, 1.1789253], dtype=float32)> \u901a\u8fc7 tf.argmax(x, axis) \u548c tf.argmin(x, axis) \u53ef\u4ee5\u6c42\u89e3\u5728 axis \u8f74\u4e0a\uff0c x \u7684\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u6240\u5728\u7684\u7d22\u5f15 tf . argmax ( x ) tf . argmin ( x ) <tf.Tensor: shape=(4,), dtype=int64, numpy=array([0, 0, 1, 0], dtype=int64)>","title":"\u6700\u503c\u3001\u5747\u503c\u3001\u548c"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_14","text":"# tf.equal(a, b) # tf.math.greater \ud835\udc4f > \ud835\udc50 # tf.math.less \ud835\udc4f < \ud835\udc50 # tf.math.greater_equal \ud835\udc4f \u2265 \ud835\udc50 # tf.math.less_equal \ud835\udc4f \u2264 \ud835\udc50 # tf.math.not_equal \ud835\udc4f \u2260 \ud835\udc50 # tf.math.is_nan \ud835\udc4f = nan","title":"\u5f20\u91cf\u6bd4\u8f83"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_15","text":"\u8fd9\u91cc\u6240\u8bf4\u7684\u586b\u5145\u5b9e\u9645\u4e0a\u662f\u63d2\u5165 a = tf . constant ([ 1 , 2 , 3 , 4 , 5 , 6 ]) # \u7b2c\u4e00\u4e2a\u53e5\u5b50 b = tf . constant ([ 7 , 8 , 1 , 6 ]) # \u7b2c\u4e8c\u4e2a\u53e5\u5b50 b = tf . pad ( b , [[ 0 , 2 ]]) # \u53e5\u5b50\u672b\u5c3e\u586b\u5145 2 \u4e2a 0 b <tf.Tensor: shape=(6,), dtype=int32, numpy=array([7, 8, 1, 6, 0, 0])>","title":"\u586b\u5145\u4e0e\u590d\u5236"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.3.%E5%BC%A0%E9%87%8F%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C.html#_16","text":"x = tf . range ( 9 ) P ( tf . maximum ( x , 2 )) # \u4e0b\u9650\u5e45\u5230 2 P ( tf . minimum ( x , 7 )) # \u4e0a\u9650\u5e45\u5230 7 P ( tf . minimum ( x , 11 )) <tf.Tensor: shape=(9,), dtype=int32, numpy=array([2, 2, 2, 3, 4, 5, 6, 7, 8])> <tf.Tensor: shape=(9,), dtype=int32, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 7])> <tf.Tensor: shape=(9,), dtype=int32, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8])> \u9ad8\u7ea7\u64cd\u4f5c x = tf . random . uniform ([ 4 , 5 , 6 ], maxval = 100 , dtype = tf . int32 ) tf . gather ( x , [ 0 , 1 ], axis = 0 ) <tf.Tensor: shape=(2, 5, 6), dtype=int32, numpy= array([[[20, 91, 41, 61, 83, 7], [28, 74, 8, 56, 23, 28], [21, 71, 19, 35, 85, 24], [59, 96, 14, 87, 17, 22], [65, 27, 42, 94, 52, 94]], [[35, 66, 70, 6, 18, 99], [90, 15, 85, 12, 74, 20], [ 4, 97, 55, 91, 90, 1], [79, 74, 81, 83, 78, 9], [85, 32, 71, 1, 9, 28]]])> \u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u4e0a\u8ff0\u9700\u6c42\uff0c\u901a\u8fc7\u5207\u7247 y[:2] \u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u5b9e\u73b0\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u89c4\u5219\u7684\u7d22\u5f15\u65b9\u5f0f\uff0c\u6bd4\u5982\uff0c\u9700\u8981\u62bd\u53d6\u7b2c\u4e8c\u8f74\u7d22\u5f15\u4e3a 0\u30012\u30013 \u7684\u6570\u636e\uff0c\u5219\u5207\u7247\u65b9\u5f0f\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\uff0c\u800c tf.gather \u5219\u662f\u9488\u5bf9\u4e8e\u6b64\u9700\u6c42\u8bbe\u8ba1\u7684\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\u3002 tf . gather ( x ,[ 0 , 2 , 3 ], axis = 1 ) <tf.Tensor: shape=(4, 3, 6), dtype=int32, numpy= array([[[20, 91, 41, 61, 83, 7], [21, 71, 19, 35, 85, 24], [59, 96, 14, 87, 17, 22]], [[35, 66, 70, 6, 18, 99], [ 4, 97, 55, 91, 90, 1], [79, 74, 81, 83, 78, 9]], [[90, 46, 9, 12, 51, 19], [99, 16, 88, 28, 24, 73], [79, 28, 45, 55, 66, 84]], [[73, 33, 4, 57, 75, 86], [95, 46, 59, 67, 48, 67], [20, 89, 20, 94, 87, 38]]])> \u901a\u8fc7 tf.gather_nd \u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6bcf\u6b21\u91c7\u6837\u70b9\u7684\u591a\u7ef4\u5750\u6807\u6765\u5b9e\u73b0\u91c7\u6837\u591a\u4e2a\u70b9\u7684\u76ee\u7684\uff1a tf . gather_nd ( x , [[ 1 , 1 ], [ 2 , 2 ], [ 3 , 3 ]]) <tf.Tensor: shape=(3, 6), dtype=int32, numpy= array([[90, 15, 85, 12, 74, 20], [99, 16, 88, 28, 24, 73], [20, 89, 20, 94, 87, 38]])> \u901a\u8fc7 tf.where(cond, a, b) \u64cd\u4f5c\u53ef\u4ee5\u6839\u636e cond \u6761\u4ef6\u7684\u771f\u5047\u4ece\u53c2\u6570b\u6216c\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 # tf.where() # tf.scatter_nd()","title":"\u6570\u636e\u9650\u5e45\u8fd0\u7b97"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.07.04 tensorflow version: 2.1.0 from toolkit import H from pprint import pprint as P import tensorflow as tf from tensorflow import keras import numpy as np import matplotlib.pyplot as plt import matplotlib matplotlib . rcParams [ 'font.family' ] = \"SIMHEI\" matplotlib . rcParams [ 'axes.unicode_minus' ] = False import copy \u81ea\u52a8\u6c42\u5bfc TensorFlow \u4e3a\u81ea\u52a8\u5fae\u5206\u63d0\u4f9b\u4e86 tf.GradientTape API\u3002Tensorflow \u4f1a\u628a tf.GradientTape \u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\u6240\u6709\u8ba1\u7b97\u6b65\u9aa4\u90fd\u8bb0\u5f55\u5728tape\u4e4b\u4e2d\u3002\u7136\u540e\u57fa\u4e8e\u8fd9\u4e2atape\u548c\u6bcf\u6b21\u64cd\u4f5c\u4ea7\u751f\u7684\u5bfc\u6570\uff0c\u7528\u53cd\u5411\u5fae\u5206\u6cd5\uff08reverse mode differentiation\uff09\u6765\u8ba1\u7b97\u8fd9\u4e9b\u88ab\u201c\u8bb0\u5f55\u5728\u6848\u201d\u7684\u51fd\u6570\u7684\u5bfc\u6570\u3002 # \u5148\u521b\u5efa\u4e00\u4e2a\u5f85\u4f18\u5316\u7684\u5f20\u91cf x = tf . Variable ( initial_value = 3. ) print ( \"x trainable:\" , x . trainable ) # \u5728 tf.GradientTape() \u7684\u4e0a\u4e0b\u6587\u5185\uff0c\u6240\u6709\u8ba1\u7b97\u6b65\u9aa4\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4ee5\u7528\u4e8e\u6c42\u5bfc with tf . GradientTape () as tape : y = tf . square ( x ) # \u8ba1\u7b97y\u5173\u4e8ex\u7684\u5bfc\u6570 y_grad = tape . gradient ( y , x ) y_grad x trainable: True <tf.Tensor: shape=(), dtype=float32, numpy=6.0> \u5982\u679c\u5f85\u6c42\u5bfc\u7684\u5f20\u91cf\u5e76\u4e0d\u662f\u5f85\u4f18\u5316\u5f20\u91cf\uff0c \u5728 tf.GradientTape \u4e4b\u4e2d\u8c03\u7528 watch \u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u8ba9tensorflow\u8ddf\u8e2a\u5f20\u91cf\u7684\u53d8\u5316\u3002 x = tf . constant ( 3. ) with tf . GradientTape () as tape : tape . watch ( x ) y = tf . square ( x ) y_grad = tape . gradient ( y , x ) y_grad <tf.Tensor: shape=(), dtype=float32, numpy=6.0> GradientTape \u8bb0\u5f55Python\u63a7\u5236\u6d41 GradientTape\u4f1a\u8bb0\u5f55\u6240\u6709\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5373\u4f7f\u662fPython \u63a7\u5236\u6d41\uff08\u5982\u4f7f\u7528 if \u548c while \u7684\u4ee3\u7801\u6bb5\uff09\u4e5f\u4f1a\u88ab\u8bb0\u5f55\u3002 def f ( x , y ): output = 1.0 for i in range ( y ): if i > 1 and i < 5 : output = tf . multiply ( output , x ) return output def grad ( x , y ): with tf . GradientTape () as t : t . watch ( x ) out = f ( x , y ) return t . gradient ( out , x ) x = tf . convert_to_tensor ( 2.0 ) assert grad ( x , 6 ) . numpy () == 12.0 assert grad ( x , 5 ) . numpy () == 12.0 assert grad ( x , 4 ) . numpy () == 4.0 GradientTape \u5bf9\u8c61\u6301\u4e45\u5316 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528 GradientTape.gradient() \u65b9\u6cd5\u65f6\uff0c GradientTape \u5360\u7528\u7684\u8d44\u6e90\u4f1a\u7acb\u5373\u5f97\u5230\u91ca\u653e\u3002\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u6301\u4e45\u7684\u68af\u5ea6\u5e26\uff0c\u53ef\u4ee5\u8ba1\u7b97\u540c\u4e2a\u51fd\u6570\u7684\u591a\u4e2a\u5bfc\u6570\u3002\u8fd9\u6837\u5728GradientTape\u5bf9\u8c61\u88ab\u5783\u573e\u56de\u6536\u65f6\uff0c\u5c31\u53ef\u4ee5\u591a\u6b21\u8c03\u7528 'gradient()' \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a x = tf . constant ( 3.0 ) with tf . GradientTape ( persistent = True ) as t : t . watch ( x ) y = x * x z = y * y dz_dx = t . gradient ( z , x ) # 108.0 (4*x^3 at x = 3) dy_dx = t . gradient ( y , x ) # 6.0 del t # Drop the reference to the tape \u591a\u5143\u51fd\u6570\u6c42\u5bfc X = tf . constant ([[ 1. , 2. ], [ 3. , 4. ]]) y = tf . constant ([[ 1. ], [ 2. ]]) w = tf . Variable ( initial_value = [[ 1. ], [ 2. ]]) b = tf . Variable ( initial_value = 1. ) with tf . GradientTape () as tape : L = 0.5 * tf . reduce_sum ( tf . square ( tf . matmul ( X , w ) + b - y )) # \u8ba1\u7b97L(w, b)\u5173\u4e8ew, b\u7684\u504f\u5bfc\u6570 w_grad , b_grad = tape . gradient ( L , [ w , b ]) print ( L . numpy ()) print ( w_grad . numpy ()) print ( b_grad . numpy ()) 62.5 [[35.] [50.]] 15.0 \u9ad8\u9636\u5bfc\u6570 \u5728 GradientTape \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u90fd\u4f1a\u88ab\u8bb0\u5f55\uff0c\u7528\u4e8e\u81ea\u52a8\u5fae\u5206\u3002\u6240\u4ee5\u5373\u4f7f\u5728\u4e0a\u4e0b\u6587\u4e2d\u8ba1\u7b97\u5bfc\u6570\uff0c\u5bfc\u6570\u7684\u51fd\u6570\u4e5f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\u3002\u56e0\u6b64\uff0c\u540c\u4e2a GradientTape \u53ef\u4ee5\u7528\u4e8e\u9ad8\u9636\u5bfc\u6570\u3002\u4f8b\u5982\uff1a x = tf . Variable ( 1.0 ) # Create a Tensorflow variable initialized to 1.0 with tf . GradientTape () as t : with tf . GradientTape () as t2 : y = x * x * x # Compute the gradient inside the 't' context manager # which means the gradient computation is differentiable as well. dy_dx = t2 . gradient ( y , x ) d2y_dx2 = t . gradient ( dy_dx , x ) assert dy_dx . numpy () == 3.0 assert d2y_dx2 . numpy () == 6.0 numpy\u5b9e\u73b0\u68af\u5ea6\u4e0b\u964d \u5236\u9020\u6837\u672c # \u968f\u673a\u91c7\u6837 x X = np . random . uniform ( low =- 10. , high = 10. , size = 100 ) # \u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u566a\u97f3 eps = np . random . normal ( loc = 0. , scale = 1.5 , size = 100 ) # \u89c2\u5bdf\u503c y = 1.477 * X + 0.089 + eps plt . figure () plt . plot ( X , y , 'o' ) plt . show () \u5b9a\u4e49\u76f8\u5173\u51fd\u6570\uff1a \u5148\u63a8\u5bfc\u51fa\u5bfc\u6570\u516c\u5f0f \u5957\u7528\u5bfc\u6570\u516c\u5f0f\uff0c\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u81ea\u53d8\u91cf\uff08\u6a21\u578b\u53c2\u6570\uff09\u7684\u68af\u5ea6 # \u5b9a\u4e49mse\u635f\u5931\u51fd\u6570 def mse ( w , b , X , y ): y_predict = w * X + b total_error = np . sum (( y - y_predict ) ** 2 ) mse = total_error / float ( len ( y )) return mse # \u66f4\u65b0\u68af\u5ea6 def step_gradient ( w_current , b_current , X , y , learn_ratio ): w_gradient = 0 b_gradient = 0 num = len ( y ) w_gradient += ( 2 / num ) * np . sum ( X * (( w_current * X + b_current ) - y )) b_gradient += ( 2 / num ) * np . sum (( w_current * X + b_current ) - y ) w_new = w_current - learn_ratio * w_gradient b_new = b_current - learn_ratio * b_gradient return w_new , b_new def gradient_descent ( X , y , w_start , b_start , learn_ratio , max_iter ): w = w_start b = b_start loss_l = [] for i in range ( max_iter ): w , b = step_gradient ( w_current = w , b_current = b , X = X , y = y , learn_ratio = learn_ratio ) loss = mse ( w , b , X , y ) loss_l . append ( loss ) print ( f \"iter { i } loss: { loss } \" ) return w , b , loss_l w , b , loss = gradient_descent ( X , y , w_start = 0 , b_start = 0 , learn_ratio = 0.02 , max_iter = 100 ) \u53ef\u4ee5\u770b\u5230\uff0c\u56e0\u4e3a$w$\u548c$b$\u7684\u521d\u59cb\u503c\u662f\u96f6\uff0c\u5f88\u63a5\u8fd1\u771f\u5b9e\u503c\uff0c\u6240\u4ee5\u8fed\u4ee3\u5f88\u5feb\u5c31\u6536\u655b\u3002 tensorflow\u5b9e\u73b0\u81ea\u52a8\u68af\u5ea6\u4e0b\u964d \u4f7f\u7528 tape.gradient(ys, xs) \u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6 \u4f7f\u7528 optimizer.apply_gradients(grads_and_vars) \u81ea\u52a8\u66f4\u65b0\u6a21\u578b\u53c2\u6570 def gradient_descent_tf ( X , y , w_start , b_start , lr , max_iter ): w = tf . Variable ( initial_value = w_start ) b = tf . Variable ( initial_value = b_start ) variables = [ w , b ] optimizer = tf . keras . optimizers . SGD ( learning_rate = lr ) loss_l = [] num = len ( y ) for i in range ( max_iter ): with tf . GradientTape () as tape : y_pred = w * X + b loss = tf . reduce_sum ( tf . square ( y_pred - y )) / num loss_l . append ( loss ) print ( f \"iter { i } loss: { loss } \" ) # \u8ba1\u7b97\u68af\u5ea6 grads = tape . gradient ( loss , variables ) optimizer . apply_gradients ( grads_and_vars = zip ( grads , variables )) return w . numpy (), b . numpy (), loss_l w , b , loss = gradient_descent_tf ( X , y , 0. , 0. , 0.02 , 100 )","title":"12.4.\u6c42\u5bfc"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#_1","text":"TensorFlow \u4e3a\u81ea\u52a8\u5fae\u5206\u63d0\u4f9b\u4e86 tf.GradientTape API\u3002Tensorflow \u4f1a\u628a tf.GradientTape \u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\u6240\u6709\u8ba1\u7b97\u6b65\u9aa4\u90fd\u8bb0\u5f55\u5728tape\u4e4b\u4e2d\u3002\u7136\u540e\u57fa\u4e8e\u8fd9\u4e2atape\u548c\u6bcf\u6b21\u64cd\u4f5c\u4ea7\u751f\u7684\u5bfc\u6570\uff0c\u7528\u53cd\u5411\u5fae\u5206\u6cd5\uff08reverse mode differentiation\uff09\u6765\u8ba1\u7b97\u8fd9\u4e9b\u88ab\u201c\u8bb0\u5f55\u5728\u6848\u201d\u7684\u51fd\u6570\u7684\u5bfc\u6570\u3002 # \u5148\u521b\u5efa\u4e00\u4e2a\u5f85\u4f18\u5316\u7684\u5f20\u91cf x = tf . Variable ( initial_value = 3. ) print ( \"x trainable:\" , x . trainable ) # \u5728 tf.GradientTape() \u7684\u4e0a\u4e0b\u6587\u5185\uff0c\u6240\u6709\u8ba1\u7b97\u6b65\u9aa4\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4ee5\u7528\u4e8e\u6c42\u5bfc with tf . GradientTape () as tape : y = tf . square ( x ) # \u8ba1\u7b97y\u5173\u4e8ex\u7684\u5bfc\u6570 y_grad = tape . gradient ( y , x ) y_grad x trainable: True <tf.Tensor: shape=(), dtype=float32, numpy=6.0> \u5982\u679c\u5f85\u6c42\u5bfc\u7684\u5f20\u91cf\u5e76\u4e0d\u662f\u5f85\u4f18\u5316\u5f20\u91cf\uff0c \u5728 tf.GradientTape \u4e4b\u4e2d\u8c03\u7528 watch \u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u8ba9tensorflow\u8ddf\u8e2a\u5f20\u91cf\u7684\u53d8\u5316\u3002 x = tf . constant ( 3. ) with tf . GradientTape () as tape : tape . watch ( x ) y = tf . square ( x ) y_grad = tape . gradient ( y , x ) y_grad <tf.Tensor: shape=(), dtype=float32, numpy=6.0>","title":"\u81ea\u52a8\u6c42\u5bfc"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#gradienttape-python","text":"GradientTape\u4f1a\u8bb0\u5f55\u6240\u6709\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5373\u4f7f\u662fPython \u63a7\u5236\u6d41\uff08\u5982\u4f7f\u7528 if \u548c while \u7684\u4ee3\u7801\u6bb5\uff09\u4e5f\u4f1a\u88ab\u8bb0\u5f55\u3002 def f ( x , y ): output = 1.0 for i in range ( y ): if i > 1 and i < 5 : output = tf . multiply ( output , x ) return output def grad ( x , y ): with tf . GradientTape () as t : t . watch ( x ) out = f ( x , y ) return t . gradient ( out , x ) x = tf . convert_to_tensor ( 2.0 ) assert grad ( x , 6 ) . numpy () == 12.0 assert grad ( x , 5 ) . numpy () == 12.0 assert grad ( x , 4 ) . numpy () == 4.0","title":"GradientTape \u8bb0\u5f55Python\u63a7\u5236\u6d41"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#gradienttape","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528 GradientTape.gradient() \u65b9\u6cd5\u65f6\uff0c GradientTape \u5360\u7528\u7684\u8d44\u6e90\u4f1a\u7acb\u5373\u5f97\u5230\u91ca\u653e\u3002\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u6301\u4e45\u7684\u68af\u5ea6\u5e26\uff0c\u53ef\u4ee5\u8ba1\u7b97\u540c\u4e2a\u51fd\u6570\u7684\u591a\u4e2a\u5bfc\u6570\u3002\u8fd9\u6837\u5728GradientTape\u5bf9\u8c61\u88ab\u5783\u573e\u56de\u6536\u65f6\uff0c\u5c31\u53ef\u4ee5\u591a\u6b21\u8c03\u7528 'gradient()' \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a x = tf . constant ( 3.0 ) with tf . GradientTape ( persistent = True ) as t : t . watch ( x ) y = x * x z = y * y dz_dx = t . gradient ( z , x ) # 108.0 (4*x^3 at x = 3) dy_dx = t . gradient ( y , x ) # 6.0 del t # Drop the reference to the tape","title":"GradientTape \u5bf9\u8c61\u6301\u4e45\u5316"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#_2","text":"X = tf . constant ([[ 1. , 2. ], [ 3. , 4. ]]) y = tf . constant ([[ 1. ], [ 2. ]]) w = tf . Variable ( initial_value = [[ 1. ], [ 2. ]]) b = tf . Variable ( initial_value = 1. ) with tf . GradientTape () as tape : L = 0.5 * tf . reduce_sum ( tf . square ( tf . matmul ( X , w ) + b - y )) # \u8ba1\u7b97L(w, b)\u5173\u4e8ew, b\u7684\u504f\u5bfc\u6570 w_grad , b_grad = tape . gradient ( L , [ w , b ]) print ( L . numpy ()) print ( w_grad . numpy ()) print ( b_grad . numpy ()) 62.5 [[35.] [50.]] 15.0","title":"\u591a\u5143\u51fd\u6570\u6c42\u5bfc"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#_3","text":"\u5728 GradientTape \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u90fd\u4f1a\u88ab\u8bb0\u5f55\uff0c\u7528\u4e8e\u81ea\u52a8\u5fae\u5206\u3002\u6240\u4ee5\u5373\u4f7f\u5728\u4e0a\u4e0b\u6587\u4e2d\u8ba1\u7b97\u5bfc\u6570\uff0c\u5bfc\u6570\u7684\u51fd\u6570\u4e5f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\u3002\u56e0\u6b64\uff0c\u540c\u4e2a GradientTape \u53ef\u4ee5\u7528\u4e8e\u9ad8\u9636\u5bfc\u6570\u3002\u4f8b\u5982\uff1a x = tf . Variable ( 1.0 ) # Create a Tensorflow variable initialized to 1.0 with tf . GradientTape () as t : with tf . GradientTape () as t2 : y = x * x * x # Compute the gradient inside the 't' context manager # which means the gradient computation is differentiable as well. dy_dx = t2 . gradient ( y , x ) d2y_dx2 = t . gradient ( dy_dx , x ) assert dy_dx . numpy () == 3.0 assert d2y_dx2 . numpy () == 6.0","title":"\u9ad8\u9636\u5bfc\u6570"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#numpy","text":"\u5236\u9020\u6837\u672c # \u968f\u673a\u91c7\u6837 x X = np . random . uniform ( low =- 10. , high = 10. , size = 100 ) # \u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u566a\u97f3 eps = np . random . normal ( loc = 0. , scale = 1.5 , size = 100 ) # \u89c2\u5bdf\u503c y = 1.477 * X + 0.089 + eps plt . figure () plt . plot ( X , y , 'o' ) plt . show () \u5b9a\u4e49\u76f8\u5173\u51fd\u6570\uff1a \u5148\u63a8\u5bfc\u51fa\u5bfc\u6570\u516c\u5f0f \u5957\u7528\u5bfc\u6570\u516c\u5f0f\uff0c\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u81ea\u53d8\u91cf\uff08\u6a21\u578b\u53c2\u6570\uff09\u7684\u68af\u5ea6 # \u5b9a\u4e49mse\u635f\u5931\u51fd\u6570 def mse ( w , b , X , y ): y_predict = w * X + b total_error = np . sum (( y - y_predict ) ** 2 ) mse = total_error / float ( len ( y )) return mse # \u66f4\u65b0\u68af\u5ea6 def step_gradient ( w_current , b_current , X , y , learn_ratio ): w_gradient = 0 b_gradient = 0 num = len ( y ) w_gradient += ( 2 / num ) * np . sum ( X * (( w_current * X + b_current ) - y )) b_gradient += ( 2 / num ) * np . sum (( w_current * X + b_current ) - y ) w_new = w_current - learn_ratio * w_gradient b_new = b_current - learn_ratio * b_gradient return w_new , b_new def gradient_descent ( X , y , w_start , b_start , learn_ratio , max_iter ): w = w_start b = b_start loss_l = [] for i in range ( max_iter ): w , b = step_gradient ( w_current = w , b_current = b , X = X , y = y , learn_ratio = learn_ratio ) loss = mse ( w , b , X , y ) loss_l . append ( loss ) print ( f \"iter { i } loss: { loss } \" ) return w , b , loss_l w , b , loss = gradient_descent ( X , y , w_start = 0 , b_start = 0 , learn_ratio = 0.02 , max_iter = 100 ) \u53ef\u4ee5\u770b\u5230\uff0c\u56e0\u4e3a$w$\u548c$b$\u7684\u521d\u59cb\u503c\u662f\u96f6\uff0c\u5f88\u63a5\u8fd1\u771f\u5b9e\u503c\uff0c\u6240\u4ee5\u8fed\u4ee3\u5f88\u5feb\u5c31\u6536\u655b\u3002","title":"numpy\u5b9e\u73b0\u68af\u5ea6\u4e0b\u964d"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.4.%E6%B1%82%E5%AF%BC.html#tensorflow","text":"\u4f7f\u7528 tape.gradient(ys, xs) \u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6 \u4f7f\u7528 optimizer.apply_gradients(grads_and_vars) \u81ea\u52a8\u66f4\u65b0\u6a21\u578b\u53c2\u6570 def gradient_descent_tf ( X , y , w_start , b_start , lr , max_iter ): w = tf . Variable ( initial_value = w_start ) b = tf . Variable ( initial_value = b_start ) variables = [ w , b ] optimizer = tf . keras . optimizers . SGD ( learning_rate = lr ) loss_l = [] num = len ( y ) for i in range ( max_iter ): with tf . GradientTape () as tape : y_pred = w * X + b loss = tf . reduce_sum ( tf . square ( y_pred - y )) / num loss_l . append ( loss ) print ( f \"iter { i } loss: { loss } \" ) # \u8ba1\u7b97\u68af\u5ea6 grads = tape . gradient ( loss , variables ) optimizer . apply_gradients ( grads_and_vars = zip ( grads , variables )) return w . numpy (), b . numpy (), loss_l w , b , loss = gradient_descent_tf ( X , y , 0. , 0. , 0.02 , 100 )","title":"tensorflow\u5b9e\u73b0\u81ea\u52a8\u68af\u5ea6\u4e0b\u964d"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.5.%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.24 tensorflow version: 2.3.0 GPU \u53ef\u7528\u6027 tf . test . is_gpu_available () False tf . config . list_physical_devices ( 'GPU' ) [] \u5217\u51fa\u673a\u5668\u7684\u8bbe\u5907 from tensorflow.python.client import device_lib device_lib . list_local_devices () [name: \"/device:CPU:0\" device_type: \"CPU\" memory_limit: 268435456 locality { } incarnation: 4080453835617195724, name: \"/device:XLA_CPU:0\" device_type: \"XLA_CPU\" memory_limit: 17179869184 locality { } incarnation: 8714737271474518214 physical_device_desc: \"device: XLA_CPU device\"]","title":"12.5.\u53ef\u7528\u6027\u6d4b\u8bd5"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.5.%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95.html#gpu","text":"tf . test . is_gpu_available () False tf . config . list_physical_devices ( 'GPU' ) []","title":"GPU \u53ef\u7528\u6027"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.5.%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95.html#_1","text":"from tensorflow.python.client import device_lib device_lib . list_local_devices () [name: \"/device:CPU:0\" device_type: \"CPU\" memory_limit: 268435456 locality { } incarnation: 4080453835617195724, name: \"/device:XLA_CPU:0\" device_type: \"XLA_CPU\" memory_limit: 17179869184 locality { } incarnation: 8714737271474518214 physical_device_desc: \"device: XLA_CPU device\"]","title":"\u5217\u51fa\u673a\u5668\u7684\u8bbe\u5907"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.11.23 tensorflow version: 2.3.0 from sklearn.datasets import make_classification from toolkit.blog.util import get_md_dir import os import matplotlib.pyplot as plt import numpy as np import copy \u6837\u672c\u751f\u6210 \u751f\u6210\u4e00\u4e2a\u7ebf\u6027\u53ef\u5206\u7684\u6837\u672c\u96c6 X , y_0_1 = make_classification ( n_samples = 100 , n_features = 2 , n_classes = 2 , n_informative = 2 , n_redundant = 0 , n_repeated = 0 , n_clusters_per_class = 1 , flip_y = 0 , random_state = 1 ) # plt.figure() # plt.plot(X_one[:, 0], X_one[:, 1], 'o', color='steelblue') # plt.plot(X_zero[:, 0], X_zero[:, 1], 'o', color='darkorange') # plt.savefig(r\".\\markdown\\figures\\perceptron_data_0704.svg\", dpi=600) # plt.show() # \u4fdd\u5b58\u6570\u636e # np.savetxt(r\".\\datasets\\perceptron_data.csv\", np.c_[X, y], delimiter=',') # \u5bfc\u5165\u6570\u636e # data = np.loadtxt(open(r\".\\datasets\\perceptron_data.csv\", \"rb\"), # delimiter=\",\", skiprows=0) # X, y = np.split(data, indices_or_sections=[2], axis=1) \u5bf9target\u8d4b\u4e88\u5176\u4ed6\u503c\uff1a # \u53cd\u8f6c\u6570\u636e y_1_0 = copy . deepcopy ( y_0_1 ) y_1_0 = np . array ([ int ( i ) for i in y_0_1 == 0 ]) # -1-1\u6570\u636e y_1_1 = copy . deepcopy ( y_0_1 ) y_1_1 [ y_1_1 == 0 ] = - 1 # -3-10\u6570\u636e y_1_10 = copy . deepcopy ( y_0_1 ) y_1_10 [ y_1_10 == 1 ] = - 3 y_1_10 [ y_1_10 == 0 ] = 10 \u5b9a\u4e49\u753b\u56fe\u51fd\u6570 def plot_perceptron ( w_1 , w_2 , b , X , y , filename = None ): x2 = np . arange ( X [:, 1 ] . min (), X [:, 1 ] . max (), 0.01 ) x1 = - ( w_2 * x2 + b ) / w_1 labels = np . sort ( np . unique ( y )) y_one_index = np . argwhere ( y == labels [ 0 ]) . flatten () y_zero_index = np . argwhere ( y == labels [ 1 ]) . flatten () X_one = X [ y_one_index ] X_zero = X [ y_zero_index ] label_zero = str ( labels [ 0 ]) label_one = str ( labels [ 1 ]) plt . figure ( figsize = ( 8 , 6 )) plt . plot ( X_one [:, 0 ], X_one [:, 1 ], 'o' , color = 'steelblue' , label = label_one ) plt . plot ( X_zero [:, 0 ], X_zero [:, 1 ], 'o' , color = 'darkorange' , label = label_zero ) plt . plot ( x1 , x2 , color = 'darkolivegreen' , label = 'perceptron' , lw = 4 ) plt . legend ( fontsize = 14 ) if filename is not None : MD_DIR = get_md_dir () os . path . join ( MD_DIR , \"figures\" , filename ) plt . show () \u624b\u52a8\u5b9e\u73b0\u611f\u77e5\u673a Perceptron \u7c7b\u662f\u81ea\u5b9a\u4e49\u7684\u611f\u77e5\u673a\u6a21\u578b\u3002 from toolkit.example.perceptron import Perceptron \u5b9a\u4e49\u6fc0\u6d3b\u51fd\u6570 def activation ( x ): if x >= 0 : return 1 elif x < 1 : return 0 model = Perceptron ( input_num = 2 , activation_func = activation ) model . train ( X , y_0_1 , iteration = 100 , learn_rate = 0.05 ) # \u8f93\u51fa\u6743\u91cd\u3001\u504f\u7f6e\u4fe1\u606f print ( \"weights:\" , model . weights ) print ( \"bias: \" , model . bias ) # \u8fdb\u884c\u9884\u6d4b y_predict = model . predict ( X ) # \u7ed8\u5236\u5206\u7c7b\u6548\u679c\u56fe b = model . bias w_1 , w_2 = model . weights plot_perceptron ( w_1 , w_2 , b , X , y_0_1 , \"my_perceptron.svg\" ) weights: [-0.10291166 0.01125555] bias: 0.0 \u6d4b\u8bd5 1-0 \u6570\u636e \u5bf9 Perceptron \u6d4b\u8bd5 1-0 target\u3002 model_1 = Perceptron ( input_num = 2 , activation_func = activation ) model_1 . train ( X , y_1_0 , 100 , 0.05 ) # \u8f93\u51fa\u6743\u91cd\u3001\u504f\u7f6e\u4fe1\u606f print ( \"weights:\" , model . weights ) print ( \"bias: \" , model . bias ) # \u8fdb\u884c\u9884\u6d4b y_predict = model . predict ( X ) # \u7ed8\u5236\u5206\u7c7b\u6548\u679c\u56fe b = model . bias w_1 , w_2 = model . weights weights: [-0.10291166 0.01125555] bias: 0.0 \u53cd\u8f6c0-1\u6570\u636e\u5e76\u6ca1\u6709\u5f71\u54cd plot_perceptron ( w_1 , w_2 , b , X , y_1_0 , \"my_perceptron_1_0.svg\" ) 0-1\u6807\u7b7e\u6570\u636e\u8f6c\u5316\u4e3a-1-1\u6570\u636e model_2 = Perceptron ( input_num = 2 , activation_func = activation ) model . train ( X , y_1_1 , iteration = 100 , learn_rate = 0.05 ) # \u8f93\u51fa\u6743\u91cd\u3001\u504f\u7f6e\u4fe1\u606f print ( \"weights:\" , model . weights ) print ( \"bias: \" , model . bias ) y_predict = model_2 . predict ( X ) b = model . bias w_1 , w_2 = model . weights weights: [-314.87203203 -160.23410029] bias: -160.00000000000213 0-1\u6807\u7b7e\u6570\u636e\u8f6c\u5316\u4e3a-1-1\u6570\u636e\uff0c\u4f18\u5316\u65b9\u6cd5\u5931\u6548 plot_perceptron ( w_1 , w_2 , b , X , y_1_1 , \"my_perceptron_1_1.svg\" ) \u8c03\u7528scikit-learn\u611f\u77e5\u673a from sklearn.linear_model import Perceptron perceptron = Perceptron ( penalty = 'l1' , alpha = 0.0001 , fit_intercept = True , max_iter = 100 , tol = 1e-3 , shuffle = True , verbose = 1 , eta0 = 1 , n_jobs =- 1 , random_state = 1 , early_stopping = False , validation_fraction = 0.1 , n_iter_no_change = 5 , class_weight = None , warm_start = False ) # alpha \u6b63\u5219\u5316\u7684\u7cfb\u6570 # eta0 \u68af\u5ea6\u4e0b\u964d\u7684\u5b66\u4e60\u7387 # tol \u8fed\u4ee3\u5728loss> previous_loss-tol\u65f6\u505c\u6b62 # early_stopping \u662f\u5426\u65e9\u505c\uff0c\u82e5\u8bbe\u7f6e\u65e9\u505c\uff0c\u5219\u9a8c\u8bc1\u96c6\u7684\u5206\u6570\u6ca1\u6709\u63d0\u9ad8 tol \u65f6\uff0c\u505c\u6b62\u8bad\u7ec3 # validation_fraction \u7528\u4e8e\u65e9\u505c\u9a8c\u8bc1\u7684\u6570\u636e\u6bd4\u4f8b\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u5212\u5206\uff0c\u4ec5\u5f53 early_stopping=True\u65f6\u4f7f\u7528 perceptron . fit ( X , y_0_1 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] np . matmul ( X , perceptron . coef_ . reshape ( 2 , 1 )) + b plot_perceptron ( w_1 , w_2 , b , X , y_0_1 , \"sk_perceptron_0_1.svg\" ) \u6d4b\u8bd5 1-0 \u6570\u636e \u5bf9 scikit-learn Perceptron \u6d4b\u8bd5 1-0 target\u3002 perceptron . fit ( X , y_1_0 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] \u6ca1\u6709\u95ee\u9898 plot_perceptron ( w_1 , w_2 , b , X , y_1_0 , \"sk_perceptron_1_0.svg\" ) \u6d4b\u8bd5-1-1\u6570\u636e \u5bf9 scikit-learn Perceptron \u6d4b\u8bd5 -1-1 target\u3002 perceptron . fit ( X , y_1_1 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] \u6ca1\u6709\u95ee\u9898 plot_perceptron ( w_1 , w_2 , b , X , y_1_1 , \"sk_perceptron_1_1.svg\" ) \u6d4b\u8bd5 -3-10 target \u5bf9 scikit-learn Perceptron \u6d4b\u8bd5 -3-10 target\u3002 perceptron . fit ( X , y_1_10 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] \u6ca1\u6709\u95ee\u9898\u3002 scikit-learn \u7684\u4f18\u5316\u65b9\u6cd5\u4e0d\u56fa\u5b9a\u4e8e y \u7684label \u3002 plot_perceptron ( w_1 , w_2 , b , X , y_1_10 , \"sk_perceptron_1_10.svg\" ) \u8c03\u7528keras\u611f\u77e5\u673a import keras from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense , Dropout from tensorflow.keras.optimizers import RMSprop ---------------------------------------------------------------------------ModuleNotFoundError Traceback (most recent call last)<ipython-input-1-e5919df254e4> in <module> ----> 1 import keras 2 from tensorflow.keras.models import Sequential 3 from tensorflow.keras.layers import Dense, Dropout 4 from tensorflow.keras.optimizers import RMSprop ModuleNotFoundError: No module named 'keras' y_seq = keras . utils . to_categorical ( y_0_1 , 2 ) model = Sequential () model . add ( Dense ( 1 , activation = 'softsign' , input_shape = ( 2 ,), use_bias = True , kernel_initializer = 'zeros' , bias_initializer = 'zeros' )) 'mean_squared_error' 'categorical_crossentropy' model . compile ( optimizer = 'SGD' , loss = 'mean_squared_error' , metrics = [ 'accuracy' ]) model . fit ( X , y_0_1 . reshape ( - 1 , 1 ), batch_size = 100 , epochs = 500 ) y_predict = model . predict_classes ( X ) # \u6a21\u578b\u7684\u7ed3\u6784 model . summary () print ( \" \\n only one layer: \\n \" , model . layers ) # model.weights W , b = model . get_weights () w_1 = W [ 0 , 0 ] w_2 = W [ 1 , 0 ] plot_perceptron ( w_1 , w_2 , b , X , y_0_1 , \"tf_perceptron_0_1.svg\" )","title":"12.6.Perceptron"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#_1","text":"\u751f\u6210\u4e00\u4e2a\u7ebf\u6027\u53ef\u5206\u7684\u6837\u672c\u96c6 X , y_0_1 = make_classification ( n_samples = 100 , n_features = 2 , n_classes = 2 , n_informative = 2 , n_redundant = 0 , n_repeated = 0 , n_clusters_per_class = 1 , flip_y = 0 , random_state = 1 ) # plt.figure() # plt.plot(X_one[:, 0], X_one[:, 1], 'o', color='steelblue') # plt.plot(X_zero[:, 0], X_zero[:, 1], 'o', color='darkorange') # plt.savefig(r\".\\markdown\\figures\\perceptron_data_0704.svg\", dpi=600) # plt.show() # \u4fdd\u5b58\u6570\u636e # np.savetxt(r\".\\datasets\\perceptron_data.csv\", np.c_[X, y], delimiter=',') # \u5bfc\u5165\u6570\u636e # data = np.loadtxt(open(r\".\\datasets\\perceptron_data.csv\", \"rb\"), # delimiter=\",\", skiprows=0) # X, y = np.split(data, indices_or_sections=[2], axis=1) \u5bf9target\u8d4b\u4e88\u5176\u4ed6\u503c\uff1a # \u53cd\u8f6c\u6570\u636e y_1_0 = copy . deepcopy ( y_0_1 ) y_1_0 = np . array ([ int ( i ) for i in y_0_1 == 0 ]) # -1-1\u6570\u636e y_1_1 = copy . deepcopy ( y_0_1 ) y_1_1 [ y_1_1 == 0 ] = - 1 # -3-10\u6570\u636e y_1_10 = copy . deepcopy ( y_0_1 ) y_1_10 [ y_1_10 == 1 ] = - 3 y_1_10 [ y_1_10 == 0 ] = 10","title":"\u6837\u672c\u751f\u6210"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#_2","text":"def plot_perceptron ( w_1 , w_2 , b , X , y , filename = None ): x2 = np . arange ( X [:, 1 ] . min (), X [:, 1 ] . max (), 0.01 ) x1 = - ( w_2 * x2 + b ) / w_1 labels = np . sort ( np . unique ( y )) y_one_index = np . argwhere ( y == labels [ 0 ]) . flatten () y_zero_index = np . argwhere ( y == labels [ 1 ]) . flatten () X_one = X [ y_one_index ] X_zero = X [ y_zero_index ] label_zero = str ( labels [ 0 ]) label_one = str ( labels [ 1 ]) plt . figure ( figsize = ( 8 , 6 )) plt . plot ( X_one [:, 0 ], X_one [:, 1 ], 'o' , color = 'steelblue' , label = label_one ) plt . plot ( X_zero [:, 0 ], X_zero [:, 1 ], 'o' , color = 'darkorange' , label = label_zero ) plt . plot ( x1 , x2 , color = 'darkolivegreen' , label = 'perceptron' , lw = 4 ) plt . legend ( fontsize = 14 ) if filename is not None : MD_DIR = get_md_dir () os . path . join ( MD_DIR , \"figures\" , filename ) plt . show ()","title":"\u5b9a\u4e49\u753b\u56fe\u51fd\u6570"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#_3","text":"Perceptron \u7c7b\u662f\u81ea\u5b9a\u4e49\u7684\u611f\u77e5\u673a\u6a21\u578b\u3002 from toolkit.example.perceptron import Perceptron \u5b9a\u4e49\u6fc0\u6d3b\u51fd\u6570 def activation ( x ): if x >= 0 : return 1 elif x < 1 : return 0 model = Perceptron ( input_num = 2 , activation_func = activation ) model . train ( X , y_0_1 , iteration = 100 , learn_rate = 0.05 ) # \u8f93\u51fa\u6743\u91cd\u3001\u504f\u7f6e\u4fe1\u606f print ( \"weights:\" , model . weights ) print ( \"bias: \" , model . bias ) # \u8fdb\u884c\u9884\u6d4b y_predict = model . predict ( X ) # \u7ed8\u5236\u5206\u7c7b\u6548\u679c\u56fe b = model . bias w_1 , w_2 = model . weights plot_perceptron ( w_1 , w_2 , b , X , y_0_1 , \"my_perceptron.svg\" ) weights: [-0.10291166 0.01125555] bias: 0.0","title":"\u624b\u52a8\u5b9e\u73b0\u611f\u77e5\u673a"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#1-0","text":"\u5bf9 Perceptron \u6d4b\u8bd5 1-0 target\u3002 model_1 = Perceptron ( input_num = 2 , activation_func = activation ) model_1 . train ( X , y_1_0 , 100 , 0.05 ) # \u8f93\u51fa\u6743\u91cd\u3001\u504f\u7f6e\u4fe1\u606f print ( \"weights:\" , model . weights ) print ( \"bias: \" , model . bias ) # \u8fdb\u884c\u9884\u6d4b y_predict = model . predict ( X ) # \u7ed8\u5236\u5206\u7c7b\u6548\u679c\u56fe b = model . bias w_1 , w_2 = model . weights weights: [-0.10291166 0.01125555] bias: 0.0 \u53cd\u8f6c0-1\u6570\u636e\u5e76\u6ca1\u6709\u5f71\u54cd plot_perceptron ( w_1 , w_2 , b , X , y_1_0 , \"my_perceptron_1_0.svg\" )","title":"\u6d4b\u8bd5 1-0 \u6570\u636e"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#0-1-1-1","text":"model_2 = Perceptron ( input_num = 2 , activation_func = activation ) model . train ( X , y_1_1 , iteration = 100 , learn_rate = 0.05 ) # \u8f93\u51fa\u6743\u91cd\u3001\u504f\u7f6e\u4fe1\u606f print ( \"weights:\" , model . weights ) print ( \"bias: \" , model . bias ) y_predict = model_2 . predict ( X ) b = model . bias w_1 , w_2 = model . weights weights: [-314.87203203 -160.23410029] bias: -160.00000000000213 0-1\u6807\u7b7e\u6570\u636e\u8f6c\u5316\u4e3a-1-1\u6570\u636e\uff0c\u4f18\u5316\u65b9\u6cd5\u5931\u6548 plot_perceptron ( w_1 , w_2 , b , X , y_1_1 , \"my_perceptron_1_1.svg\" )","title":"0-1\u6807\u7b7e\u6570\u636e\u8f6c\u5316\u4e3a-1-1\u6570\u636e"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#scikit-learn","text":"from sklearn.linear_model import Perceptron perceptron = Perceptron ( penalty = 'l1' , alpha = 0.0001 , fit_intercept = True , max_iter = 100 , tol = 1e-3 , shuffle = True , verbose = 1 , eta0 = 1 , n_jobs =- 1 , random_state = 1 , early_stopping = False , validation_fraction = 0.1 , n_iter_no_change = 5 , class_weight = None , warm_start = False ) # alpha \u6b63\u5219\u5316\u7684\u7cfb\u6570 # eta0 \u68af\u5ea6\u4e0b\u964d\u7684\u5b66\u4e60\u7387 # tol \u8fed\u4ee3\u5728loss> previous_loss-tol\u65f6\u505c\u6b62 # early_stopping \u662f\u5426\u65e9\u505c\uff0c\u82e5\u8bbe\u7f6e\u65e9\u505c\uff0c\u5219\u9a8c\u8bc1\u96c6\u7684\u5206\u6570\u6ca1\u6709\u63d0\u9ad8 tol \u65f6\uff0c\u505c\u6b62\u8bad\u7ec3 # validation_fraction \u7528\u4e8e\u65e9\u505c\u9a8c\u8bc1\u7684\u6570\u636e\u6bd4\u4f8b\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u5212\u5206\uff0c\u4ec5\u5f53 early_stopping=True\u65f6\u4f7f\u7528 perceptron . fit ( X , y_0_1 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] np . matmul ( X , perceptron . coef_ . reshape ( 2 , 1 )) + b plot_perceptron ( w_1 , w_2 , b , X , y_0_1 , \"sk_perceptron_0_1.svg\" )","title":"\u8c03\u7528scikit-learn\u611f\u77e5\u673a"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#1-0_1","text":"\u5bf9 scikit-learn Perceptron \u6d4b\u8bd5 1-0 target\u3002 perceptron . fit ( X , y_1_0 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] \u6ca1\u6709\u95ee\u9898 plot_perceptron ( w_1 , w_2 , b , X , y_1_0 , \"sk_perceptron_1_0.svg\" )","title":"\u6d4b\u8bd5 1-0 \u6570\u636e"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#-1-1","text":"\u5bf9 scikit-learn Perceptron \u6d4b\u8bd5 -1-1 target\u3002 perceptron . fit ( X , y_1_1 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] \u6ca1\u6709\u95ee\u9898 plot_perceptron ( w_1 , w_2 , b , X , y_1_1 , \"sk_perceptron_1_1.svg\" )","title":"\u6d4b\u8bd5-1-1\u6570\u636e"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#-3-10-target","text":"\u5bf9 scikit-learn Perceptron \u6d4b\u8bd5 -3-10 target\u3002 perceptron . fit ( X , y_1_10 ) b = perceptron . intercept_ [ 0 ] W = perceptron . coef_ w_1 = W [ 0 , 0 ] w_2 = W [ 0 , 1 ] \u6ca1\u6709\u95ee\u9898\u3002 scikit-learn \u7684\u4f18\u5316\u65b9\u6cd5\u4e0d\u56fa\u5b9a\u4e8e y \u7684label \u3002 plot_perceptron ( w_1 , w_2 , b , X , y_1_10 , \"sk_perceptron_1_10.svg\" )","title":"\u6d4b\u8bd5 -3-10 target"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.6.Perceptron.html#keras","text":"import keras from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense , Dropout from tensorflow.keras.optimizers import RMSprop ---------------------------------------------------------------------------ModuleNotFoundError Traceback (most recent call last)<ipython-input-1-e5919df254e4> in <module> ----> 1 import keras 2 from tensorflow.keras.models import Sequential 3 from tensorflow.keras.layers import Dense, Dropout 4 from tensorflow.keras.optimizers import RMSprop ModuleNotFoundError: No module named 'keras' y_seq = keras . utils . to_categorical ( y_0_1 , 2 ) model = Sequential () model . add ( Dense ( 1 , activation = 'softsign' , input_shape = ( 2 ,), use_bias = True , kernel_initializer = 'zeros' , bias_initializer = 'zeros' )) 'mean_squared_error' 'categorical_crossentropy' model . compile ( optimizer = 'SGD' , loss = 'mean_squared_error' , metrics = [ 'accuracy' ]) model . fit ( X , y_0_1 . reshape ( - 1 , 1 ), batch_size = 100 , epochs = 500 ) y_predict = model . predict_classes ( X ) # \u6a21\u578b\u7684\u7ed3\u6784 model . summary () print ( \" \\n only one layer: \\n \" , model . layers ) # model.weights W , b = model . get_weights () w_1 = W [ 0 , 0 ] w_2 = W [ 1 , 0 ] plot_perceptron ( w_1 , w_2 , b , X , y_0_1 , \"tf_perceptron_0_1.svg\" )","title":"\u8c03\u7528keras\u611f\u77e5\u673a"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.7.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.07.05 tensorflow version: 2.2.0 import keras from toolkit import H from keras import models from keras import layers # tf 2.0+ API\u66f4\u6539 keras \u548c tf.keras \u6df7\u7528\u53ef\u80fd\u4e0d\u517c\u5bb9 # from keras.models import Sequential # from keras.layers import Dense, Activation from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense , Activation # tf 2.0+ API\u66f4\u6539 \u4ee5\u4e0b\u8bed\u53e5\u4e0d\u518d\u53ef\u7528 # from tensorflow.keras.backend import K # from keras.backend import K from tensorflow.keras.backend import mean gpus = tf . config . experimental . list_physical_devices ( 'GPU' ) tf . config . experimental . set_memory_growth ( gpus [ 0 ], True ) keras \u7684\u9876\u5c42api h = H ( keras ) d = h . dicts module d [ \"function\" ] [] d [ \"class\" ] ['Model', 'RandomRotation', 'Sequential'] d [ \"module\" ] ['activations.py', 'applications', 'backend.py', 'callbacks.py', 'constraints.py', 'datasets', 'engine', 'initializers.py', 'layers', 'losses.py', 'metrics.py', 'models.py', 'objectives.py', 'optimizers', 'preprocessing', 'regularizers.py', 'utils', 'wrappers'] \u5efa\u7acb Sequential \u6a21\u578b model = Sequential ([ Dense ( 32 , input_shape = ( 784 ,)), Activation ( \"relu\" ), Dense ( 10 ), Activation ( \"softmax\" )]) \u6216\u8005\u4f7f\u7528add\u65b9\u6cd5\u5c06\u5404\u7f51\u7edc\u5c42\u6dfb\u52a0\u5230\u6a21\u578b model = Sequential () model . add ( Dense ( 32 , input_dim = 784 )) model . add ( Activation ( \"relu\" )) \u914d\u7f6e\u5b66\u4e60\u8fc7\u7a0b compile\u65b9\u6cd5 \u7f16\u8bd1\u6a21\u578b\u65f6\u5fc5\u987b\u6307\u660e\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002 \u591a\u5206\u7c7b model . compile ( optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = [ 'accuracy' ]) \u4e8c\u5206\u7c7b model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' ]) \u5747\u65b9\u8bef\u5dee\u56de\u5f52\u95ee\u9898 model . compile ( optimizer = 'rmsprop' , loss = 'mse' ) \u81ea\u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570 def mean_pred ( y_true , y_pred ): # return K.mean(y_pred) return mean ( y_pred ) model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' , mean_pred ]) \u8bad\u7ec3 Keras \u6a21\u578b\u5728\u8f93\u5165\u6570\u636e\u548c\u6807\u7b7e\u7684 Numpy \u77e9\u9635\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002\u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f \u7528 fit \u51fd\u6570\u3002 \u4e8c\u5206\u7c7b \u5bf9\u4e8e\u5177\u6709 2 \u4e2a\u7c7b\u7684\u5355\u8f93\u5165\u6a21\u578b\uff08\u4e8c\u8fdb\u5236\u5206\u7c7b\uff09\uff1a import numpy as np # \u751f\u6210\u865a\u62df\u6570\u636e data = np . random . random (( 1000 , 100 )) labels = np . random . randint ( 2 , size = ( 1000 , 1 )) # \u642d\u5efa\u6a21\u578b model = Sequential () model . add ( Dense ( 32 , activation = 'relu' , input_dim = 100 )) model . add ( Dense ( 1 , activation = 'sigmoid' )) model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' ]) # \u8bad\u7ec3\u6a21\u578b \u4ee5 64 \u4e2a\u6837\u672c\u4e3a\u4e00\u4e2a batch \u8fdb\u884c\u8fed\u4ee3 model . fit ( data , labels , epochs = 2 , batch_size = 64 ) data_pred = model . predict_classes ( data ) Epoch 1/2 1/16 [>.............................] - ETA: 0s - loss: 0.6671 - accuracy: 0.6250\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/16 [==============>...............] - ETA: 0s - loss: 0.7103 - accuracy: 0.5488\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 15/16 [===========================>..] - ETA: 0s - loss: 0.7050 - accuracy: 0.5302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 7ms/step - loss: 0.7075 - accuracy: 0.5240 Epoch 2/2 1/16 [>.............................] - ETA: 0s - loss: 0.6855 - accuracy: 0.6094\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/16 [===============>..............] - ETA: 0s - loss: 0.6984 - accuracy: 0.5104\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 6ms/step - loss: 0.7003 - accuracy: 0.5030 \u591a\u5206\u7c7b \u5bf9\u4e8e\u5177\u6709 10 \u4e2a\u7c7b\u7684\u5355\u8f93\u5165\u6a21\u578b\uff08\u591a\u5206\u7c7b\u5206\u7c7b\uff09\uff1a # \u751f\u6210\u865a\u62df\u6570\u636e np . random . random (( 1000 , 100 )) labels = np . random . randint ( 10 , size = ( 1000 , 1 )) # \u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u5206\u7c7b\u7684 one-hot \u7f16\u7801 one_hot_labels = keras . utils . to_categorical ( labels , num_classes = 10 ) model = Sequential () model . add ( Dense ( 32 , activation = 'relu' , input_dim = 100 )) model . add ( Dense ( 10 , activation = 'softmax' , )) model . compile ( optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = [ 'accuracy' ]) # \u8bad\u7ec3\u6a21\u578b \u4ee5 64 \u4e2a\u6837\u672c\u4e3a\u4e00\u4e2a batch \u8fdb\u884c\u8fed\u4ee3 model . fit ( data , one_hot_labels , epochs = 2 , batch_size = 64 ) model . summary () # model.inputs[0] # model.evaluate() Epoch 1/2 1/16 [>.............................] - ETA: 0s - loss: 2.6500 - accuracy: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/16 [============>.................] - ETA: 0s - loss: 2.4654 - accuracy: 0.0804\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 13/16 [=======================>......] - ETA: 0s - loss: 2.4299 - accuracy: 0.0817\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 9ms/step - loss: 2.4209 - accuracy: 0.0810 Epoch 2/2 1/16 [>.............................] - ETA: 0s - loss: 2.3873 - accuracy: 0.0625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/16 [==========>...................] - ETA: 0s - loss: 2.3356 - accuracy: 0.0911\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 12/16 [=====================>........] - ETA: 0s - loss: 2.3405 - accuracy: 0.0872\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 9ms/step - loss: 2.3407 - accuracy: 0.0900 Model: \"sequential_43\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense_75 (Dense) (None, 32) 3232 _________________________________________________________________ dense_76 (Dense) (None, 10) 330 ================================================================= Total params: 3,562 Trainable params: 3,562 Non-trainable params: 0 _________________________________________________________________","title":"12.7.keras\u5feb\u901f\u5f00\u59cb"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.7.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html#sequential","text":"model = Sequential ([ Dense ( 32 , input_shape = ( 784 ,)), Activation ( \"relu\" ), Dense ( 10 ), Activation ( \"softmax\" )]) \u6216\u8005\u4f7f\u7528add\u65b9\u6cd5\u5c06\u5404\u7f51\u7edc\u5c42\u6dfb\u52a0\u5230\u6a21\u578b model = Sequential () model . add ( Dense ( 32 , input_dim = 784 )) model . add ( Activation ( \"relu\" ))","title":"\u5efa\u7acb Sequential \u6a21\u578b"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.7.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html#compile","text":"\u7f16\u8bd1\u6a21\u578b\u65f6\u5fc5\u987b\u6307\u660e\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u3002 \u591a\u5206\u7c7b model . compile ( optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = [ 'accuracy' ]) \u4e8c\u5206\u7c7b model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' ]) \u5747\u65b9\u8bef\u5dee\u56de\u5f52\u95ee\u9898 model . compile ( optimizer = 'rmsprop' , loss = 'mse' ) \u81ea\u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570 def mean_pred ( y_true , y_pred ): # return K.mean(y_pred) return mean ( y_pred ) model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' , mean_pred ])","title":"\u914d\u7f6e\u5b66\u4e60\u8fc7\u7a0b compile\u65b9\u6cd5"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.7.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html#_1","text":"Keras \u6a21\u578b\u5728\u8f93\u5165\u6570\u636e\u548c\u6807\u7b7e\u7684 Numpy \u77e9\u9635\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002\u4e3a\u4e86\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f \u7528 fit \u51fd\u6570\u3002","title":"\u8bad\u7ec3"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.7.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html#_2","text":"\u5bf9\u4e8e\u5177\u6709 2 \u4e2a\u7c7b\u7684\u5355\u8f93\u5165\u6a21\u578b\uff08\u4e8c\u8fdb\u5236\u5206\u7c7b\uff09\uff1a import numpy as np # \u751f\u6210\u865a\u62df\u6570\u636e data = np . random . random (( 1000 , 100 )) labels = np . random . randint ( 2 , size = ( 1000 , 1 )) # \u642d\u5efa\u6a21\u578b model = Sequential () model . add ( Dense ( 32 , activation = 'relu' , input_dim = 100 )) model . add ( Dense ( 1 , activation = 'sigmoid' )) model . compile ( optimizer = 'rmsprop' , loss = 'binary_crossentropy' , metrics = [ 'accuracy' ]) # \u8bad\u7ec3\u6a21\u578b \u4ee5 64 \u4e2a\u6837\u672c\u4e3a\u4e00\u4e2a batch \u8fdb\u884c\u8fed\u4ee3 model . fit ( data , labels , epochs = 2 , batch_size = 64 ) data_pred = model . predict_classes ( data ) Epoch 1/2 1/16 [>.............................] - ETA: 0s - loss: 0.6671 - accuracy: 0.6250\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 8/16 [==============>...............] - ETA: 0s - loss: 0.7103 - accuracy: 0.5488\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 15/16 [===========================>..] - ETA: 0s - loss: 0.7050 - accuracy: 0.5302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 7ms/step - loss: 0.7075 - accuracy: 0.5240 Epoch 2/2 1/16 [>.............................] - ETA: 0s - loss: 0.6855 - accuracy: 0.6094\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 9/16 [===============>..............] - ETA: 0s - loss: 0.6984 - accuracy: 0.5104\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 6ms/step - loss: 0.7003 - accuracy: 0.5030","title":"\u4e8c\u5206\u7c7b"},{"location":"tensorflow%E7%AC%94%E8%AE%B0/12.7.keras%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html#_3","text":"\u5bf9\u4e8e\u5177\u6709 10 \u4e2a\u7c7b\u7684\u5355\u8f93\u5165\u6a21\u578b\uff08\u591a\u5206\u7c7b\u5206\u7c7b\uff09\uff1a # \u751f\u6210\u865a\u62df\u6570\u636e np . random . random (( 1000 , 100 )) labels = np . random . randint ( 10 , size = ( 1000 , 1 )) # \u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u5206\u7c7b\u7684 one-hot \u7f16\u7801 one_hot_labels = keras . utils . to_categorical ( labels , num_classes = 10 ) model = Sequential () model . add ( Dense ( 32 , activation = 'relu' , input_dim = 100 )) model . add ( Dense ( 10 , activation = 'softmax' , )) model . compile ( optimizer = 'rmsprop' , loss = 'categorical_crossentropy' , metrics = [ 'accuracy' ]) # \u8bad\u7ec3\u6a21\u578b \u4ee5 64 \u4e2a\u6837\u672c\u4e3a\u4e00\u4e2a batch \u8fdb\u884c\u8fed\u4ee3 model . fit ( data , one_hot_labels , epochs = 2 , batch_size = 64 ) model . summary () # model.inputs[0] # model.evaluate() Epoch 1/2 1/16 [>.............................] - ETA: 0s - loss: 2.6500 - accuracy: 0.0938\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 7/16 [============>.................] - ETA: 0s - loss: 2.4654 - accuracy: 0.0804\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 13/16 [=======================>......] - ETA: 0s - loss: 2.4299 - accuracy: 0.0817\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 9ms/step - loss: 2.4209 - accuracy: 0.0810 Epoch 2/2 1/16 [>.............................] - ETA: 0s - loss: 2.3873 - accuracy: 0.0625\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 6/16 [==========>...................] - ETA: 0s - loss: 2.3356 - accuracy: 0.0911\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 12/16 [=====================>........] - ETA: 0s - loss: 2.3405 - accuracy: 0.0872\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 16/16 [==============================] - 0s 9ms/step - loss: 2.3407 - accuracy: 0.0900 Model: \"sequential_43\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense_75 (Dense) (None, 32) 3232 _________________________________________________________________ dense_76 (Dense) (None, 10) 330 ================================================================= Total params: 3,562 Trainable params: 3,562 Non-trainable params: 0 _________________________________________________________________","title":"\u591a\u5206\u7c7b"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html","text":"conda conda \u7684\u53ef\u7528\u547d\u4ee4\u5982\u4e0b\uff1a usage: conda-script.py [-h] [-V] command ... conda\u662f\u7528\u4e8e\u7ba1\u7406\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3001\u73af\u5883\u548c\u7a0b\u5e8f\u5305\u7684\u5de5\u5177 Options: positional arguments: command clean \u5220\u9664\u672a\u4f7f\u7528\u7684\u5305\u548c\u7f13\u5b58 config \u4fee\u6539.condarc\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u503c create \u4ece\u6307\u5b9a\u7684package\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684conda\u73af\u5883 help \u663e\u793a\u53ef\u7528\u7684conda\u547d\u4ee4\u53ca\u5176\u5e2e\u52a9\u5b57\u7b26\u4e32\u7684\u5217\u8868 info \u663e\u793a\u6709\u5173\u5f53\u524d\u5b89\u88c5\u7684conda\u7684\u4fe1\u606f init \u521d\u59cb\u5316conda\u4ee5\u8fdb\u884cshell\u4ea4\u4e92 [\u5b9e\u9a8c\u6027\u529f\u80fd] install \u628a\u4e00\u4e2a\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u7684conda\u73af\u5883 list \u5217\u51fa\u94fe\u63a5\u5230\u67d0\u4e2aconda\u73af\u5883\u7684\u6240\u6709\u5305\u540d remove \u4ece\u6307\u5b9a\u7684conda\u73af\u5883\u79fb\u9664\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305 uninstall conda remove\u7684\u522b\u540d run \u5728 conda \u73af\u5883\u4e2d\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 [\u5b9e\u9a8c\u6027\u529f\u80fd] search \u641c\u7d22package\u5e76\u663e\u793a\u76f8\u5173\u4fe1\u606f\u3002\u8f93\u5165\u662fMatchSpec\u8bed\u53e5(conda\u8f6f\u4ef6\u5305\u7684\u67e5\u8be2\u8bed\u8a00) update \u5c06 conda \u5305\u66f4\u65b0\u4e3a\u6700\u65b0\u7684\u517c\u5bb9\u7248\u672c upgrade conda update\u7684\u522b\u540d optional arguments: -h, --help -V, --version conda\u547d\u4ee4 conda info \u8be5\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49\u3002 usage: conda-script.py info [ -h ] [ --json ] [ -v ] [ -q ] [ -a ] [ --base ] [ -e ] [ -s ] [ --unsafe-channels ] Display information about current conda install. Options: optional arguments: -h, --help -a, --all \u663e\u793a\u6240\u6709\u4fe1\u606f --base \u663e\u793a base \u73af\u5883\u7684\u8def\u5f84 -e, --envs \u5217\u51fa\u6240\u6709\u5df2\u77e5\u7684Conda\u73af\u5883 -s, --system \u5217\u51fa\u73af\u5883\u53d8\u91cf --unsafe-channels \u5217\u51fa\u66b4\u9732token\u7684channel Output, Prompt, and Flow Control Options: --json \u4ee5json\u683c\u5f0f\u8f93\u51fa\uff0c\u9002\u5408\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u4f7f\u7528conda\u7684\u60c5\u51b5 -v, --verbose \u8f93\u5165\u4e00\u6b21\u7528\u4e8einfo\uff0c\u4e24\u6b21\u7528\u4e8edebug\uff0c\u4e09\u6b21\u7528\u4e8etrace -q, --quiet \u4e0d\u663e\u793a\u8fdb\u5ea6\u6761 conda create usage: conda-script.py create [ -h ] [ --clone ENV ] [ -n ENVIRONMENT | -p PATH ] [ -c CHANNEL ] [ --use-local ] [ --override-channels ] [ --repodata-fn REPODATA_FNS ] [ --strict-channel-priority ] [ --no-channel-priority ] [ --no-deps | --only-deps ] [ --no-pin ] [ --copy ] [ --no-shortcuts ] [ -C ] [ -k ] [ --offline ] [ -d ] [ --json ] [ -q ] [ -v ] [ -y ] [ --download-only ] [ --show-channel-urls ] [ --file FILE ] [ --no-default-packages ] [ --dev ] [ package_spec [ package_spec ... ]] Create a new conda environment from a list of specified packages. Options: positional arguments: package_spec \u5728\u65b0conda\u73af\u5883\u9700\u8981\u5b89\u88c5\u6216\u66f4\u65b0\u7684\u5305 optional arguments: -h, --help --clone ENV \u901a\u8fc7\u514b\u9686\u5176\u4ed6\u73af\u5883\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883\uff0c 'ENV' \u53ef\u4ee5\u662f\u672c\u5730\u73af\u5883\u7684\u8def\u5f84\u6216\u540d\u79f0 --file FILE \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883\uff0c\u53ef\u4f20\u5165\u591a\u4e2a\u6587\u4ef6 ( e.g. --file = file1 --file = file2 ) --dev \u4f7f\u7528 'sys.executable -m conda' \u800c\u4e0d\u662fCONDA_EXE\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5 Target Environment Specification: -n ENVIRONMENT, --name ENVIRONMENT \u65b0\u73af\u5883\u7684\u540d\u5b57 -p PATH, --prefix PATH \u73af\u5883\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84 Channel Customization: -c CHANNEL, --channel CHANNEL \u6dfb\u52a0\u989d\u5916\u7684Channel\u7528\u4e8e\u641c\u7d22\u5305\uff0c\u53ef\u6307\u5b9a\u672c\u5730\u76ee\u5f55\u3002\u6309\u987a\u5e8f\u5728\u6307\u5b9a\u7684Channel \u8fdb\u884c\u641c\u7d22\uff0c \"defaults\" \u548c.condarc\u7684Channel\u4f1a\u5148\u88ab\u641c\u7d22\uff0c\u9664\u975e\u63d0\u4f9b\u4e86 '--override-channels' \u53c2\u6570 --use-local \u4f7f\u7528\u672c\u5730\u6784\u5efa\u7684\u5305\uff0c\u7b49\u540c\u4e8e \"-c local\" --override-channels \u4e0d\u4f7f\u7528 \"defaults\" \u548c.condarc\u7684Channel \u8981\u6c42\u63d0\u4f9b '--channel' \u53c2\u6570 --repodata-fn REPODATA_FNS Solver Mode Modifiers: --strict-channel-priority \u4f18\u5148\u8003\u8651\u8f83\u9ad8\u4f18\u5148\u7ea7\u7684channel\u7684\u7a0b\u5e8f\u5305 --no-channel-priority \u4f18\u5148\u8003\u8651\u8f83\u9ad8\u7248\u672c\u7684\u8f6f\u4ef6\u7248\uff0c\u800c\u4e0d\u8003\u8651channel\u7684\u4f18\u5148\u7ea7 \u8fd9\u5c06\u8986\u76d6 'conda config --show channel_priority' \u7ed9\u5b9a\u7684\u503c --no-deps \u4e0d\u5b89\u88c5\u3001\u66f4\u65b0\u3001\u5220\u9664\u6216\u66f4\u6539\u4f9d\u8d56\u6027\u3002\u8fd9\u5c06\u7834\u574f\u73af\u5883\uff0c\u98ce\u9669\u81ea\u8d1f --only-deps \u4ec5\u5b89\u88c5\u4f9d\u8d56 --no-pin \u5ffd\u7565pinned\u6587\u4ef6 --no-default-packages \u5ffd\u7565.condarc\u914d\u7f6e\u6587\u4ef6\u7684 'create_default_packages' \u8bbe\u7f6e Package Linking and Install-time Options: --copy \u4f7f\u7528\u526f\u672c\u800c\u4e0d\u662f\u786c\u94fe\u63a5\u6216\u8f6f\u94fe\u63a5\u6765\u5b89\u88c5\u6240\u6709\u8f6f\u4ef6\u5305 --no-shortcuts \u4e0d\u5b89\u88c5\u5f00\u59cb\u83dc\u5355\u5feb\u6377\u65b9\u5f0f Networking Options: -C, --use-index-cache \u5373\u4f7fchannel\u7684\u7d22\u5f15\u6587\u4ef6\u5df2\u8fc7\u671f\uff0c\u4e5f\u4f7f\u7528\u5176\u7f13\u5b58 -k, --insecure \u5141\u8bb8conda\u6267\u884c\u4e0d\u5b89\u5168\u7684SSL\u8fde\u63a5\u548c\u4f20\u8f93 \u7b49\u6548\u4e8e\u5c06 'ssl_verify' \u8bbe\u7f6e\u4e3a 'false' --offline \u79bb\u7ebf\u6a21\u5f0f\uff0c\u4e0d\u8fde\u63a5\u7f51\u7edc Output, Prompt, and Flow Control Options: -d, --dry-run \u4ec5\u663e\u793a\u5c06\u8981\u5b8c\u6210\u7684\u64cd\u4f5c --json -q, --quiet -v, --verbose -y, --yes \u9ed8\u8bb8\u6240\u6709\u64cd\u4f5c\uff0c\u4e0d\u8981\u6c42\u786e\u8ba4 --download-only --show-channel-urls \u663e\u793achannel\u7684url \u8986\u76d6 ` conda config --show show_channel_urls ` \u7684\u503c conda\u5e38\u7528\u547d\u4ee4 \u67e5\u770b\u4fe1\u606f # \u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f # \u5176\u4e2d\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49 conda info # \u67e5\u770bconda\u7248\u672c\u4fe1\u606f conda -V conda --version \u73af\u5883\u7ba1\u7406 \u67e5\u770b\u73af\u5883\u4fe1\u606f # \u67e5\u770b\u5f53\u524d conda \u4e2d\u6240\u6709\u5df2\u521b\u5efa\u7684\u73af\u5883\u5217\u8868 # \u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u7684\u73af\u5883\u65c1\u8fb9\u4f1a\u6709\u4e00\u4e2a*\u7684\u6807\u8bb0 conda env list conda info --envs conda info -e # \u67e5\u770b Conda \u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf\u4fe1\u606f conda info --system conda info -s # \u67e5\u770b\u73af\u5883\u7cfb\u7edf\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f conda info --all conda info -a \u6fc0\u6d3b\u73af\u5883 # \u8fdb\u5165\u6307\u5b9a\u73af\u5883 conda activate <env> # \u9000\u51fa\u73af\u5883 conda deactivate \u5bfc\u51fa\u73af\u5883 # \u9ed8\u8ba4\u5bfc\u51fa\u5f53\u524d\u73af\u5883\u7684\u4f9d\u8d56\u5305 conda list -e > package-list.txt conda list -e > package-list.yml # \u5bfc\u51fa\u6307\u5b9a\u73af\u5883\u7684\u4f9d\u8d56\u5305 conda list -n <env> -e > package-list.yml # \u6216\u8005\u8fd9\u6837 conda env export --name base --file base_bunnies.yml ## \u8fd9\u4f1a\u5c06\u5f53\u524d\u73af\u5883\u4e2d\u7531 conda \u7ba1\u7406\u7684\u5305\u548c\u7531 pip \u5b89\u88c5\u7684\u5305\u540c\u65f6\u5bfc\u51fa\u5230\u6587\u4ef6\u4e2d ## \u6240\u4ee5\u5f53\u6839\u636e\u6587\u4ef6\u521b\u5efa\u73af\u5883\u65f6\uff0c\u65e0\u9700\u91cd\u65b0\u5b89\u88c5 pip \u7684\u5305 \u521b\u5efa\u73af\u5883 # \u65b0\u5efa\u4e00\u4e2a\u540d\u4e3a newenv \u7684\u73af\u5883\uff0c\u5e76\u6307\u5b9a\u65b0\u73af\u5883\u4e2d\u7684 python \u7248\u672c\u4e3a3.6 # \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u4e2d\u53ea\u5e26\u6709\u6700\u57fa\u672c\u7684\u5305 conda create --name newenv python = 3 .6 # \u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u73af\u5883\u65f6\u5019\uff0c\u5305\u542b\u67d0\u4e9b\u7a0b\u5e8f\u6216\u8005\u5305 conda create --name newenv python = 3 .6 biopython ipython # \u901a\u8fc7\u514b\u9686\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883 conda create --name newenv -clone base # \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883 ## \u5982\u679c\u662f\u7528 conda env export --name \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u53ef\u7528\u4e0b\u5217\u547d\u4ee4\u521b\u5efa\uff1a conda env create -f package-list.yml ## \u5982\u679c\u662f\u7528 conda list -e \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u7528\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a conda create --name <env> --file <deps file> \u66f4\u65b0\u73af\u5883 # \u66f4\u65b0\u73af\u5883 conda env update --name <env> -file = <deps file> \u5220\u9664\u73af\u5883 # \u5220\u9664\u73af\u5883\u4e2d\u6307\u5b9a\u7684\u5305 conda remove --name <env> ipython biopython # \u5f7b\u5e95\u5220\u9664\u73af\u5883 conda env remove --name <env> \u4ece\u6307\u5b9a\u8def\u5f84\u5b89\u88c5\u73af\u5883 conda \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u9ed8\u8ba4\u653e\u5728 /User/<yourname>/anaconda/env \u76ee\u5f55\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u67d0\u4e2a\u73af\u5883\u6587\u4ef6\u5939\u6574\u4f53\u62f7\u8d1d\u8d70\uff0c\u590d\u5236\u5230\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u7136\u540e\u57fa\u4e8e\u6b64\u6587\u4ef6\u5939\u521b\u5efa\u73af\u5883\u3002 \u5305\u7ba1\u7406 conda list # \u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u5305 conda update conda # \u5347\u7ea7conda\u81ea\u8eab conda search requests # \u67e5\u8be2\u67d0\u4e2a\u5305 conda install requests # \u5b89\u88c5\u65b0\u5305 conda install -n base requests # \u5c06\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u73af\u5883 conda update --all # \u66f4\u65b0\u6240\u6709\u5305 conda update requests # \u5347\u7ea7\u5305 conda remove requests # \u79fb\u9664\u5305 conda remove -n base requests # \u4ece\u6307\u5b9a\u73af\u5883\u4e2d\u79fb\u9664\u5305 conda \u4e0d\u63d0\u4f9b\u68c0\u67e5\u53ef\u66f4\u65b0\u7684\u5305\u7684\u547d\u4ee4\uff0cupdate \u6240\u6709\u5305\u65f6\u4f1a\u6709\u63d0\u793a\uff0c\u5217\u51fa\u6240\u6709\u53ef\u66f4\u65b0\u7684\u5305\uff0c\u5e76\u8ba9\u7528\u6237\u786e\u8ba4\u662f\u5426\u5168\u90e8\u66f4\u65b0\u3002 \u4e3a conda \u6307\u5b9a\u56fd\u5185\u955c\u50cf\u6e90 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes \u4f7f\u7528 conda config --show channels \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684\u6e90\u4ed3\u5e93\u5730\u5740\u3002","title":"5.1.conda\u7b14\u8bb0"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda","text":"conda \u7684\u53ef\u7528\u547d\u4ee4\u5982\u4e0b\uff1a usage: conda-script.py [-h] [-V] command ... conda\u662f\u7528\u4e8e\u7ba1\u7406\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3001\u73af\u5883\u548c\u7a0b\u5e8f\u5305\u7684\u5de5\u5177 Options: positional arguments: command clean \u5220\u9664\u672a\u4f7f\u7528\u7684\u5305\u548c\u7f13\u5b58 config \u4fee\u6539.condarc\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u503c create \u4ece\u6307\u5b9a\u7684package\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684conda\u73af\u5883 help \u663e\u793a\u53ef\u7528\u7684conda\u547d\u4ee4\u53ca\u5176\u5e2e\u52a9\u5b57\u7b26\u4e32\u7684\u5217\u8868 info \u663e\u793a\u6709\u5173\u5f53\u524d\u5b89\u88c5\u7684conda\u7684\u4fe1\u606f init \u521d\u59cb\u5316conda\u4ee5\u8fdb\u884cshell\u4ea4\u4e92 [\u5b9e\u9a8c\u6027\u529f\u80fd] install \u628a\u4e00\u4e2a\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u7684conda\u73af\u5883 list \u5217\u51fa\u94fe\u63a5\u5230\u67d0\u4e2aconda\u73af\u5883\u7684\u6240\u6709\u5305\u540d remove \u4ece\u6307\u5b9a\u7684conda\u73af\u5883\u79fb\u9664\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305 uninstall conda remove\u7684\u522b\u540d run \u5728 conda \u73af\u5883\u4e2d\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 [\u5b9e\u9a8c\u6027\u529f\u80fd] search \u641c\u7d22package\u5e76\u663e\u793a\u76f8\u5173\u4fe1\u606f\u3002\u8f93\u5165\u662fMatchSpec\u8bed\u53e5(conda\u8f6f\u4ef6\u5305\u7684\u67e5\u8be2\u8bed\u8a00) update \u5c06 conda \u5305\u66f4\u65b0\u4e3a\u6700\u65b0\u7684\u517c\u5bb9\u7248\u672c upgrade conda update\u7684\u522b\u540d optional arguments: -h, --help -V, --version","title":"conda"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda_1","text":"","title":"conda\u547d\u4ee4"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda-info","text":"\u8be5\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49\u3002 usage: conda-script.py info [ -h ] [ --json ] [ -v ] [ -q ] [ -a ] [ --base ] [ -e ] [ -s ] [ --unsafe-channels ] Display information about current conda install. Options: optional arguments: -h, --help -a, --all \u663e\u793a\u6240\u6709\u4fe1\u606f --base \u663e\u793a base \u73af\u5883\u7684\u8def\u5f84 -e, --envs \u5217\u51fa\u6240\u6709\u5df2\u77e5\u7684Conda\u73af\u5883 -s, --system \u5217\u51fa\u73af\u5883\u53d8\u91cf --unsafe-channels \u5217\u51fa\u66b4\u9732token\u7684channel Output, Prompt, and Flow Control Options: --json \u4ee5json\u683c\u5f0f\u8f93\u51fa\uff0c\u9002\u5408\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u4f7f\u7528conda\u7684\u60c5\u51b5 -v, --verbose \u8f93\u5165\u4e00\u6b21\u7528\u4e8einfo\uff0c\u4e24\u6b21\u7528\u4e8edebug\uff0c\u4e09\u6b21\u7528\u4e8etrace -q, --quiet \u4e0d\u663e\u793a\u8fdb\u5ea6\u6761","title":"conda info"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda-create","text":"usage: conda-script.py create [ -h ] [ --clone ENV ] [ -n ENVIRONMENT | -p PATH ] [ -c CHANNEL ] [ --use-local ] [ --override-channels ] [ --repodata-fn REPODATA_FNS ] [ --strict-channel-priority ] [ --no-channel-priority ] [ --no-deps | --only-deps ] [ --no-pin ] [ --copy ] [ --no-shortcuts ] [ -C ] [ -k ] [ --offline ] [ -d ] [ --json ] [ -q ] [ -v ] [ -y ] [ --download-only ] [ --show-channel-urls ] [ --file FILE ] [ --no-default-packages ] [ --dev ] [ package_spec [ package_spec ... ]] Create a new conda environment from a list of specified packages. Options: positional arguments: package_spec \u5728\u65b0conda\u73af\u5883\u9700\u8981\u5b89\u88c5\u6216\u66f4\u65b0\u7684\u5305 optional arguments: -h, --help --clone ENV \u901a\u8fc7\u514b\u9686\u5176\u4ed6\u73af\u5883\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883\uff0c 'ENV' \u53ef\u4ee5\u662f\u672c\u5730\u73af\u5883\u7684\u8def\u5f84\u6216\u540d\u79f0 --file FILE \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883\uff0c\u53ef\u4f20\u5165\u591a\u4e2a\u6587\u4ef6 ( e.g. --file = file1 --file = file2 ) --dev \u4f7f\u7528 'sys.executable -m conda' \u800c\u4e0d\u662fCONDA_EXE\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5 Target Environment Specification: -n ENVIRONMENT, --name ENVIRONMENT \u65b0\u73af\u5883\u7684\u540d\u5b57 -p PATH, --prefix PATH \u73af\u5883\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84 Channel Customization: -c CHANNEL, --channel CHANNEL \u6dfb\u52a0\u989d\u5916\u7684Channel\u7528\u4e8e\u641c\u7d22\u5305\uff0c\u53ef\u6307\u5b9a\u672c\u5730\u76ee\u5f55\u3002\u6309\u987a\u5e8f\u5728\u6307\u5b9a\u7684Channel \u8fdb\u884c\u641c\u7d22\uff0c \"defaults\" \u548c.condarc\u7684Channel\u4f1a\u5148\u88ab\u641c\u7d22\uff0c\u9664\u975e\u63d0\u4f9b\u4e86 '--override-channels' \u53c2\u6570 --use-local \u4f7f\u7528\u672c\u5730\u6784\u5efa\u7684\u5305\uff0c\u7b49\u540c\u4e8e \"-c local\" --override-channels \u4e0d\u4f7f\u7528 \"defaults\" \u548c.condarc\u7684Channel \u8981\u6c42\u63d0\u4f9b '--channel' \u53c2\u6570 --repodata-fn REPODATA_FNS Solver Mode Modifiers: --strict-channel-priority \u4f18\u5148\u8003\u8651\u8f83\u9ad8\u4f18\u5148\u7ea7\u7684channel\u7684\u7a0b\u5e8f\u5305 --no-channel-priority \u4f18\u5148\u8003\u8651\u8f83\u9ad8\u7248\u672c\u7684\u8f6f\u4ef6\u7248\uff0c\u800c\u4e0d\u8003\u8651channel\u7684\u4f18\u5148\u7ea7 \u8fd9\u5c06\u8986\u76d6 'conda config --show channel_priority' \u7ed9\u5b9a\u7684\u503c --no-deps \u4e0d\u5b89\u88c5\u3001\u66f4\u65b0\u3001\u5220\u9664\u6216\u66f4\u6539\u4f9d\u8d56\u6027\u3002\u8fd9\u5c06\u7834\u574f\u73af\u5883\uff0c\u98ce\u9669\u81ea\u8d1f --only-deps \u4ec5\u5b89\u88c5\u4f9d\u8d56 --no-pin \u5ffd\u7565pinned\u6587\u4ef6 --no-default-packages \u5ffd\u7565.condarc\u914d\u7f6e\u6587\u4ef6\u7684 'create_default_packages' \u8bbe\u7f6e Package Linking and Install-time Options: --copy \u4f7f\u7528\u526f\u672c\u800c\u4e0d\u662f\u786c\u94fe\u63a5\u6216\u8f6f\u94fe\u63a5\u6765\u5b89\u88c5\u6240\u6709\u8f6f\u4ef6\u5305 --no-shortcuts \u4e0d\u5b89\u88c5\u5f00\u59cb\u83dc\u5355\u5feb\u6377\u65b9\u5f0f Networking Options: -C, --use-index-cache \u5373\u4f7fchannel\u7684\u7d22\u5f15\u6587\u4ef6\u5df2\u8fc7\u671f\uff0c\u4e5f\u4f7f\u7528\u5176\u7f13\u5b58 -k, --insecure \u5141\u8bb8conda\u6267\u884c\u4e0d\u5b89\u5168\u7684SSL\u8fde\u63a5\u548c\u4f20\u8f93 \u7b49\u6548\u4e8e\u5c06 'ssl_verify' \u8bbe\u7f6e\u4e3a 'false' --offline \u79bb\u7ebf\u6a21\u5f0f\uff0c\u4e0d\u8fde\u63a5\u7f51\u7edc Output, Prompt, and Flow Control Options: -d, --dry-run \u4ec5\u663e\u793a\u5c06\u8981\u5b8c\u6210\u7684\u64cd\u4f5c --json -q, --quiet -v, --verbose -y, --yes \u9ed8\u8bb8\u6240\u6709\u64cd\u4f5c\uff0c\u4e0d\u8981\u6c42\u786e\u8ba4 --download-only --show-channel-urls \u663e\u793achannel\u7684url \u8986\u76d6 ` conda config --show show_channel_urls ` \u7684\u503c","title":"conda create"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda_2","text":"","title":"conda\u5e38\u7528\u547d\u4ee4"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_1","text":"# \u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f # \u5176\u4e2d\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49 conda info # \u67e5\u770bconda\u7248\u672c\u4fe1\u606f conda -V conda --version","title":"\u67e5\u770b\u4fe1\u606f"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_2","text":"","title":"\u73af\u5883\u7ba1\u7406"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_3","text":"# \u67e5\u770b\u5f53\u524d conda \u4e2d\u6240\u6709\u5df2\u521b\u5efa\u7684\u73af\u5883\u5217\u8868 # \u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u7684\u73af\u5883\u65c1\u8fb9\u4f1a\u6709\u4e00\u4e2a*\u7684\u6807\u8bb0 conda env list conda info --envs conda info -e # \u67e5\u770b Conda \u76f8\u5173\u7684\u73af\u5883\u53d8\u91cf\u4fe1\u606f conda info --system conda info -s # \u67e5\u770b\u73af\u5883\u7cfb\u7edf\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f conda info --all conda info -a","title":"\u67e5\u770b\u73af\u5883\u4fe1\u606f"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_4","text":"# \u8fdb\u5165\u6307\u5b9a\u73af\u5883 conda activate <env> # \u9000\u51fa\u73af\u5883 conda deactivate","title":"\u6fc0\u6d3b\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_5","text":"# \u9ed8\u8ba4\u5bfc\u51fa\u5f53\u524d\u73af\u5883\u7684\u4f9d\u8d56\u5305 conda list -e > package-list.txt conda list -e > package-list.yml # \u5bfc\u51fa\u6307\u5b9a\u73af\u5883\u7684\u4f9d\u8d56\u5305 conda list -n <env> -e > package-list.yml # \u6216\u8005\u8fd9\u6837 conda env export --name base --file base_bunnies.yml ## \u8fd9\u4f1a\u5c06\u5f53\u524d\u73af\u5883\u4e2d\u7531 conda \u7ba1\u7406\u7684\u5305\u548c\u7531 pip \u5b89\u88c5\u7684\u5305\u540c\u65f6\u5bfc\u51fa\u5230\u6587\u4ef6\u4e2d ## \u6240\u4ee5\u5f53\u6839\u636e\u6587\u4ef6\u521b\u5efa\u73af\u5883\u65f6\uff0c\u65e0\u9700\u91cd\u65b0\u5b89\u88c5 pip \u7684\u5305","title":"\u5bfc\u51fa\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_6","text":"# \u65b0\u5efa\u4e00\u4e2a\u540d\u4e3a newenv \u7684\u73af\u5883\uff0c\u5e76\u6307\u5b9a\u65b0\u73af\u5883\u4e2d\u7684 python \u7248\u672c\u4e3a3.6 # \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u4e2d\u53ea\u5e26\u6709\u6700\u57fa\u672c\u7684\u5305 conda create --name newenv python = 3 .6 # \u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u73af\u5883\u65f6\u5019\uff0c\u5305\u542b\u67d0\u4e9b\u7a0b\u5e8f\u6216\u8005\u5305 conda create --name newenv python = 3 .6 biopython ipython # \u901a\u8fc7\u514b\u9686\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883 conda create --name newenv -clone base # \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883 ## \u5982\u679c\u662f\u7528 conda env export --name \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u53ef\u7528\u4e0b\u5217\u547d\u4ee4\u521b\u5efa\uff1a conda env create -f package-list.yml ## \u5982\u679c\u662f\u7528 conda list -e \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u7528\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a conda create --name <env> --file <deps file>","title":"\u521b\u5efa\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_7","text":"# \u66f4\u65b0\u73af\u5883 conda env update --name <env> -file = <deps file>","title":"\u66f4\u65b0\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_8","text":"# \u5220\u9664\u73af\u5883\u4e2d\u6307\u5b9a\u7684\u5305 conda remove --name <env> ipython biopython # \u5f7b\u5e95\u5220\u9664\u73af\u5883 conda env remove --name <env>","title":"\u5220\u9664\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_9","text":"conda \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u9ed8\u8ba4\u653e\u5728 /User/<yourname>/anaconda/env \u76ee\u5f55\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u67d0\u4e2a\u73af\u5883\u6587\u4ef6\u5939\u6574\u4f53\u62f7\u8d1d\u8d70\uff0c\u590d\u5236\u5230\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u7136\u540e\u57fa\u4e8e\u6b64\u6587\u4ef6\u5939\u521b\u5efa\u73af\u5883\u3002","title":"\u4ece\u6307\u5b9a\u8def\u5f84\u5b89\u88c5\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_10","text":"conda list # \u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u5305 conda update conda # \u5347\u7ea7conda\u81ea\u8eab conda search requests # \u67e5\u8be2\u67d0\u4e2a\u5305 conda install requests # \u5b89\u88c5\u65b0\u5305 conda install -n base requests # \u5c06\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u73af\u5883 conda update --all # \u66f4\u65b0\u6240\u6709\u5305 conda update requests # \u5347\u7ea7\u5305 conda remove requests # \u79fb\u9664\u5305 conda remove -n base requests # \u4ece\u6307\u5b9a\u73af\u5883\u4e2d\u79fb\u9664\u5305 conda \u4e0d\u63d0\u4f9b\u68c0\u67e5\u53ef\u66f4\u65b0\u7684\u5305\u7684\u547d\u4ee4\uff0cupdate \u6240\u6709\u5305\u65f6\u4f1a\u6709\u63d0\u793a\uff0c\u5217\u51fa\u6240\u6709\u53ef\u66f4\u65b0\u7684\u5305\uff0c\u5e76\u8ba9\u7528\u6237\u786e\u8ba4\u662f\u5426\u5168\u90e8\u66f4\u65b0\u3002","title":"\u5305\u7ba1\u7406"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda_3","text":"conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes \u4f7f\u7528 conda config --show channels \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684\u6e90\u4ed3\u5e93\u5730\u5740\u3002","title":"\u4e3a conda \u6307\u5b9a\u56fd\u5185\u955c\u50cf\u6e90"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html","text":"\u4e3a pip\u6307\u5b9a\u6e05\u534e\u955c\u50cf\u6e90 \u6e05\u534e pypi \u955c\u50cf\u6bcf 5 \u5206\u949f\u540c\u6b65\u4e00\u6b21\u3002 \u4e34\u65f6\u4f7f\u7528 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package \u6ce8\u610f\uff0c simple \u4e0d\u80fd\u5c11, \u662f https \u800c\u4e0d\u662f http \u8bbe\u4e3a\u9ed8\u8ba4 \u5347\u7ea7 pip \u5230\u6700\u65b0\u7684\u7248\u672c (>=10.0.0) \u540e\u8fdb\u884c\u914d\u7f6e\uff1a pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \u4e34\u65f6\u4f7f\u7528\u6e05\u534e\u955c\u50cf\u7ad9\u6765\u5347\u7ea7 pip\uff1a pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U \u5b89\u88c5 package # \u4ece\u6307\u5b9a\u7684requirements\u6587\u4ef6\u5b89\u88c5\u9700\u8981\u7684package pip install -r pip install --requirement # \u66f4\u65b0package pip install -U pip install --upgrade # \u66f4\u65b0package\u65f6\u6307\u5b9a\u5904\u7406\u4f9d\u8d56\u7684\u7b56\u7565 ## \u6240\u6709\u4f9d\u8d56\u4f1a\u88ab\u66f4\u65b0 pip install --upgrade-strategy eager ## \u5982\u679c\u4f9d\u8d56\u4f9d\u7136\u6ee1\u8db3\u8981\u6c42 \u5219\u4e0d\u4f1a\u66f4\u65b0\u4f9d\u8d56 pip install --upgrade-strategy only-if-needed # \u5f3a\u5236\u91cd\u88c5package pip install --force-reinstall # \u4ece\u6307\u5b9a\u7684Python Package Index \u5b89\u88c5package pip install -i https://pypi.tuna.tsinghua.edu.cn/simple # \u4ece\u672c\u5730\u76ee\u5f55\u5b89\u88c5package pip install -r <file> --no-index --find-links < local path> \u5173\u4e8e Package Index \u7684\u8bbe\u7f6e -i, --index-url <url> \u6307\u5b9a Package Index URL --extra-index-url <url> \u9664\u4e86\u4f7f\u7528 --index-url \u6307\u5b9a\u7684 URL \u8fd8\u4f7f\u7528 --extra-index-url \u6307\u5b9a\u7684 URL --no-index \u5ffd\u7565package index (\u4ec5\u5728 --find-links \u6307\u5b9a\u7684URL\u4e2d\u67e5\u627e\u5305) -f, --find-links <url> \u53ef\u4ee5\u662f\u4e00\u4e2a\u7f51\u5740\uff0c\u6216\u8005\u50a8\u5b58\u4e86package\u7684\u672c\u5730\u76ee\u5f55 \u4e0b\u8f7d package # \u4ece\u6e05\u534e\u955c\u50cf\u4e0b\u8f7drequirements\u6587\u4ef6\u6307\u5b9a\u7684package\u5230\u5f53\u524d\u76ee\u5f55 pip download -r <file> -d . -i https://pypi.tuna.tsinghua.edu.cn/simple \u68c0\u67e5\u4f9d\u8d56\u662f\u5426\u6ee1\u8db3 # \u68c0\u67e5numpy\u7684\u4f9d\u8d56\u662f\u5426\u6ee1\u8db3 pip check numpy \u663e\u793a\u5df2\u5b89\u88c5\u7684 package \u7684\u4fe1\u606f # \u53ef\u4ee5\u663e\u793a \u7248\u672c\u4fe1\u606f\u3001\u5b89\u88c5\u4f4d\u7f6e\u3001\u4f9d\u8d56\u8be5package\u7684packages \u7b49\u7b49 pip show numpy \u5728 PyPi \u641c\u7d22 package pip search numpy \u8f93\u51fa\u5b89\u88c5\u7684 package \u5217\u8868 # \u9ed8\u8ba4\u4e3a columns \u683c\u5f0f pip list # \u4ee5freeze\u683c\u5f0f\u8f93\u51fa pip list --format freeze # \u4ee5json\u683c\u5f0f\u8f93\u51fa pip list --format json # \u4ee5 freeze \u683c\u5f0f\u8f93\u51fa pip freeze # \u8f93\u51fa\u5230\u6587\u4ef6 pip freeze > <file> \u66f4\u65b0 pip python.exe -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. graph TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end \u592b\u662f\u5fb7\u56fd\u5c81\u7684\u6cd5\u56fd\u5f53\u65f6\u6cd5\u56fd\u5bf9\u65b9\u662f\u4e2a\u5206\u5272\u5341\u4e09\u4e2a","title":"5.2.pip\u7b14\u8bb0"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#pip","text":"\u6e05\u534e pypi \u955c\u50cf\u6bcf 5 \u5206\u949f\u540c\u6b65\u4e00\u6b21\u3002","title":"\u4e3a pip\u6307\u5b9a\u6e05\u534e\u955c\u50cf\u6e90"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#_1","text":"pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package \u6ce8\u610f\uff0c simple \u4e0d\u80fd\u5c11, \u662f https \u800c\u4e0d\u662f http","title":"\u4e34\u65f6\u4f7f\u7528"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#_2","text":"\u5347\u7ea7 pip \u5230\u6700\u65b0\u7684\u7248\u672c (>=10.0.0) \u540e\u8fdb\u884c\u914d\u7f6e\uff1a pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \u4e34\u65f6\u4f7f\u7528\u6e05\u534e\u955c\u50cf\u7ad9\u6765\u5347\u7ea7 pip\uff1a pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U","title":"\u8bbe\u4e3a\u9ed8\u8ba4"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#package","text":"# \u4ece\u6307\u5b9a\u7684requirements\u6587\u4ef6\u5b89\u88c5\u9700\u8981\u7684package pip install -r pip install --requirement # \u66f4\u65b0package pip install -U pip install --upgrade # \u66f4\u65b0package\u65f6\u6307\u5b9a\u5904\u7406\u4f9d\u8d56\u7684\u7b56\u7565 ## \u6240\u6709\u4f9d\u8d56\u4f1a\u88ab\u66f4\u65b0 pip install --upgrade-strategy eager ## \u5982\u679c\u4f9d\u8d56\u4f9d\u7136\u6ee1\u8db3\u8981\u6c42 \u5219\u4e0d\u4f1a\u66f4\u65b0\u4f9d\u8d56 pip install --upgrade-strategy only-if-needed # \u5f3a\u5236\u91cd\u88c5package pip install --force-reinstall # \u4ece\u6307\u5b9a\u7684Python Package Index \u5b89\u88c5package pip install -i https://pypi.tuna.tsinghua.edu.cn/simple # \u4ece\u672c\u5730\u76ee\u5f55\u5b89\u88c5package pip install -r <file> --no-index --find-links < local path>","title":"\u5b89\u88c5 package"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#package-index","text":"-i, --index-url <url> \u6307\u5b9a Package Index URL --extra-index-url <url> \u9664\u4e86\u4f7f\u7528 --index-url \u6307\u5b9a\u7684 URL \u8fd8\u4f7f\u7528 --extra-index-url \u6307\u5b9a\u7684 URL --no-index \u5ffd\u7565package index (\u4ec5\u5728 --find-links \u6307\u5b9a\u7684URL\u4e2d\u67e5\u627e\u5305) -f, --find-links <url> \u53ef\u4ee5\u662f\u4e00\u4e2a\u7f51\u5740\uff0c\u6216\u8005\u50a8\u5b58\u4e86package\u7684\u672c\u5730\u76ee\u5f55","title":"\u5173\u4e8e Package Index \u7684\u8bbe\u7f6e"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#package_1","text":"# \u4ece\u6e05\u534e\u955c\u50cf\u4e0b\u8f7drequirements\u6587\u4ef6\u6307\u5b9a\u7684package\u5230\u5f53\u524d\u76ee\u5f55 pip download -r <file> -d . -i https://pypi.tuna.tsinghua.edu.cn/simple","title":"\u4e0b\u8f7d package"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#_3","text":"# \u68c0\u67e5numpy\u7684\u4f9d\u8d56\u662f\u5426\u6ee1\u8db3 pip check numpy","title":"\u68c0\u67e5\u4f9d\u8d56\u662f\u5426\u6ee1\u8db3"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#package_2","text":"# \u53ef\u4ee5\u663e\u793a \u7248\u672c\u4fe1\u606f\u3001\u5b89\u88c5\u4f4d\u7f6e\u3001\u4f9d\u8d56\u8be5package\u7684packages \u7b49\u7b49 pip show numpy","title":"\u663e\u793a\u5df2\u5b89\u88c5\u7684 package \u7684\u4fe1\u606f"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#pypi-package","text":"pip search numpy","title":"\u5728 PyPi \u641c\u7d22 package"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#package_3","text":"# \u9ed8\u8ba4\u4e3a columns \u683c\u5f0f pip list # \u4ee5freeze\u683c\u5f0f\u8f93\u51fa pip list --format freeze # \u4ee5json\u683c\u5f0f\u8f93\u51fa pip list --format json # \u4ee5 freeze \u683c\u5f0f\u8f93\u51fa pip freeze # \u8f93\u51fa\u5230\u6587\u4ef6 pip freeze > <file>","title":"\u8f93\u51fa\u5b89\u88c5\u7684 package \u5217\u8868"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#pip_1","text":"python.exe -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. graph TB c1-->a2 subgraph one a1-->a2 end subgraph two b1-->b2 end subgraph three c1-->c2 end \u592b\u662f\u5fb7\u56fd\u5c81\u7684\u6cd5\u56fd\u5f53\u65f6\u6cd5\u56fd\u5bf9\u65b9\u662f\u4e2a\u5206\u5272\u5341\u4e09\u4e2a","title":"\u66f4\u65b0 pip"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.3.pip%E5%AF%B9%E6%AF%94conda.html","text":"\u4e86\u89e3conda and pip\u7684\u5f02\u540c \u2014\u2014 \u672c\u6587\u7ffb\u8bd1\u81ea\uff1a Understanding Conda and Pip \u539f\u6587\u4f5c\u8005\uff1aJonathan Helmus Conda \u548c pip \u8fd9\u4e24\u4e2a\u5de5\u5177\u6709\u4e00\u4e9b\u91cd\u53e0\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u5b83\u4eec\u5e38\u5e38\u88ab\u8ba4\u4e3a\u662f\u6ca1\u4ec0\u4e48\u533a\u522b\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u88ab\u8bbe\u8ba1\u7528\u4e8e\u4e0d\u540c\u7684\u76ee\u7684\u3002 pip \u662f Python Packaging Authority \u63a8\u8350\u7684\u4ece Python Package Index (PyPI) \u5b89\u88c5\u5305\u7684\u5de5\u5177\u3002 pip \u53ef\u4ee5\u5b89\u88c5\u6253\u5305\u4e3a wheels \u683c\u5f0f\u7684\u5305\uff0c\u6216\u8005\u76f4\u63a5\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5\u3002\u4ece\u6e90\u4ee3\u7801\u6587\u4ef6\u5b89\u88c5\u53ef\u80fd\u9700\u8981\u7cfb\u7edf\u5b89\u88c5\u517c\u5bb9\u7684\u7f16\u8bd1\u5668\u548c\u76f8\u5e94\u7684\u5e93 1 \u3002 Conda \u662f\u8de8\u5e73\u53f0\u7684\u5305\u548c\u73af\u5883\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u5b89\u88c5\u548c\u7ba1\u7406\u6765\u81ea Anaconda repository \u548c Anaconda Cloud \u7684 conda \u5305\u3002Conda \u5305\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u7f16\u8bd1\u5668\u6765\u5b89\u88c5\u3002\u53e6\u5916\uff0cconda \u5305\u4e0d\u9650\u4e8e Python\u5305\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b C \u6216 C++ \u5e93\u3001R\u5305\u6216\u4efb\u4f55\u5176\u4ed6\u8f6f\u4ef6\u3002 \u8fd9\u662f conda \u548c pip \u7684\u5173\u952e\u533a\u522b\u3002pip \u53ea\u80fd\u5b89\u88c5 Python \u5305\uff0c\u800c conda \u5b89\u88c5\u7684\u5305\u53ef\u4ee5\u662f\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4f7f\u7528 pip \u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u201d\u7cfb\u7edf\u7a0b\u5e8f\u7ba1\u7406\u5668\u201c\u6216\u201d\u4e0b\u8f7d\u5e76\u8fd0\u884c\u5b89\u88c5\u7a0b\u5e8f\u201c\u6765\u5b89\u88c5 Python \u89e3\u91ca\u5668\uff0c\u800c Conda \u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5 Python \u5305\u548c Python \u89e3\u91ca\u5668\u3002 \u8fd9\u4e24\u4e2a\u5de5\u5177\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u533a\u522b\u662f conda \u53ef\u4ee5\u4e3a\u4e0d\u540c\u7248\u672c\u7684 python \u6216 package \u521b\u5efa\u9694\u79bb\u7684\u73af\u5883\u3002\u8fd9\u5728\u4f7f\u7528\u6570\u636e\u79d1\u5b66\u5de5\u5177\u65f6\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u5de5\u5177\u53ef\u80fd\u5305\u542b\u51b2\u7a81\u7684\u4f9d\u8d56\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b83\u4eec\u4e0d\u9002\u5408\u5b89\u88c5\u5230\u76f8\u540c\u7684\u73af\u5883\u4e2d\u3002pip \u6ca1\u6709\u5185\u7f6e\u7684\u73af\u5883\u7ba1\u7406\u529f\u80fd\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e virtualenv \u6216 venv \u7b49\u5176\u4ed6\u5de5\u5177\u6765\u521b\u5efa\u9694\u79bb\u73af\u5883\u3002pipenv\u3001poetry\u3001hatch wrap pip\u3001virtualenv \u7b49\u5de5\u5177\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\u3002 pip \u548c conda \u5728\u5982\u4f55\u5b9e\u73b0\u73af\u5883\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u65b9\u9762\u4e5f\u6709\u6240\u4e0d\u540c\u3002\u5b89\u88c5\u5305\u65f6\uff0cpip \u4f1a\u5728\u9012\u5f52\u7684\u4e32\u884c\u5faa\u73af\u4e2d\u5b89\u88c5\u4f9d\u8d56\u9879\uff0c\u6ca1\u6709\u52aa\u529b\u786e\u4fdd\u540c\u65f6\u6ee1\u8db3\u6240\u6709\u5305\u7684\u4f9d\u8d56\u6027\u3002\u5982\u679c\u8f83\u65e9\u5b89\u88c5\u7684\u5305\u4e0e\u7a0d\u540e\u5b89\u88c5\u7684\u5305\u5177\u6709\u4e0d\u517c\u5bb9\u7684\u4f9d\u8d56\uff0c\u73af\u5883\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u76f8\u53cd\u7684\uff0cconda \u4f7f\u7528\u4e00\u4e2a satisfiability (SAT) \u7684\u5904\u7406\u7a0b\u5e8f\u53bb\u68c0\u67e5\u73af\u5883\u4e2d\u7684\u6240\u6709\u5305\u7684\u4f9d\u8d56\u662f\u5426\u90fd\u5f97\u5230\u6ee1\u8db3\u3002\u6b64\u68c0\u67e5\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684\u65f6\u95f4\uff0c\u4f46\u53ef\u4ee5\u9632\u6b62\u521b\u5efa\u4e00\u4e2a\u88ab\u7834\u574f\u7684\u73af\u5883\u3002\u53ea\u8981\u5305\u542b\u4f9d\u8d56\u5173\u7cfb\u7684 package metadata \u662f\u6b63\u786e\u7684\uff0cconda \u5c31\u53ef\u4ee5\u521b\u5efa\u6709\u6548\u7684\u73af\u5883\u3002 \u8003\u8651\u5230 conda \u548c pip \u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u6709\u4e9b\u4eba\u8bd5\u56fe\u5c06\u8fd9\u4e9b\u5de5\u5177\u7ed3\u5408\u8d77\u6765\u521b\u5efa\u6570\u636e\u79d1\u5b66\u73af\u5883\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u5c06 pip \u4e0e conda \u7ed3\u5408\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6709\u4e9b\u5305\u53ea\u80fd\u901a\u8fc7 pip \u5b89\u88c5\u3002\u5728 Anaconda repository \u4e2d\u67091500\u591a\u4e2a\u5305\u53ef\u7528\uff0c\u5176\u4e2d\u6db5\u76d6\u4e86\u6700\u6d41\u884c\u7684\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u548cAI\u6846\u67b6\u3002\u53e6\u5916\uff0c\u5728 conda-forge \u548c bioconda \u7684 channel \u8fd8\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u5305\u53ef\u4ee5\u4f7f\u7528 conda \u5b89\u88c5\u3002\u5c3d\u7ba1 Anaconda cloud \u6709\u5927\u91cf\u7684\u5305\uff0c\u4f46\u4e0e PyPI \u4e0a\u53ef\u63d0\u4f9b\u7684 150,000 \u591a\u4e2a\u5305\u76f8\u6bd4\uff0c\u6570\u91cf\u4ecd\u7136\u5f88\u5c11\u3002\u6709\u65f6\u5019\u9700\u8981\u7684\u5305\u6ca1\u6709\u76f8\u5e94\u7684 conda \u5305\uff0c\u4f46\u5728 PyPI \u4e0a\u6709\u5b89\u88c5\u6587\u4ef6\uff0c\u5219\u53ef\u4ee5\u7528 pip \u5b89\u88c5\u3002 \u8865\u5145 conda \u5b89\u88c5\u5305\u8def\u5f84\u662f \\Anaconda3\\pkgs pip \u5b89\u88c5\u5305\u8def\u5f84\u5728\u865a\u62df\u73af\u5883\u4e0b\u662f \\Anaconda3\\envs\\Lib\\site-packages pip\u53ef\u80fd\u4f1a\u751f\u6210\u5b58\u5728\u51b2\u7a81\u7684\u73af\u5883\uff0c\u800cconda\u4e0d\u4f1a conda\u4e0d\u4f1a\u91cd\u590d\u5b89\u88c5\u5df2\u7ecf\u5b89\u88c5\u7684\u4f9d\u8d56\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpip\u4e5f\u5982\u6b64 pip\u5b89\u88c5\u7684\u5305\u4e0d\u4f1a\u663e\u793a\u5728anaconda navigation\u7684\u73af\u5883\u4e2d conda \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5305\u53ea\u5b89\u88c5\u4e00\u6b21\uff0c\u7531conda\u96c6\u4e2d\u7ba1\u7406 pip \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u4f7f\u7528\u7684pip\u5728\u4e0d\u540c\u7684\u8def\u5f84\u4e0b\uff0c\u56e0\u6b64\u4f1a\u91cd\u590d\u5b89\u88c5 \u5173\u4e8ePython\u5305\u7ba1\u7406\u5de5\u5177\u7684\u53d1\u5c55\u5386\u53f2\u53ef\u4ee5\u53c2\u8003 Python's New Package Landscape (andrew)\uff0c\u5176\u4e2d\u6587\u7ffb\u8bd1\u7248\u672c \u5728\u8fd9 \u3002\u63d2\u56fe\u6765\u81eahttps://www.xkcd.com/1987/\u3002 \u5efa\u8bae\u4f7f\u7528conda\u521b\u5efa\u548c\u5220\u9664Python\u73af\u5883\uff0c\u5355\u72ec\u4f7f\u7528pip\u5b89\u88c5Python Package\u3002 \u539f\u56e0\u6709\u5982\u4e0b\u4e09\u70b9\uff1a \u968f\u7740conda\u7684\u66f4\u65b0\uff0c\u4ee5\u4e0b\u60c5\u51b5\u6709\u53ef\u80fd\u6539\u53d8\u3002 \u6df7\u7528conda\u548cpip\u5b89\u88c5package\u6709\u53ef\u80fd\u4ea7\u751f\u51b2\u7a81\u3002 \u867d\u7136\u4f7f\u7528conda\u4e00\u822c\u4e0d\u4f1a\u4ea7\u751f\u4f9d\u8d56\u51b2\u7a81\uff0c\u4f46\u662f\u4f9d\u7136\u6709\u53ef\u80fd\u7834\u73afPython\u73af\u5883\uff0c\u4f8b\u5982\u4f7f\u7528conda\u5b89\u88c5package\u65f6\uff0c\u5982\u679c\u4e0d\u6ce8\u610f\uff0c\u67d0\u4e9b\u4f9d\u8d56\u9879\u4f1a\u88ab\u81ea\u52a8\u66f4\u65b0\uff0c\u4f46\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9879\u76ee\u4ee3\u7801 break down\u3002 \u56e0\u4e3aconda\u4e0d\u4f1a\u4e3a\u4e0d\u540c\u7684\u73af\u5883\u91cd\u590d\u5b89\u88c5\u76f8\u540c\u7684package\uff0c\u6240\u4ee5\u4e0d\u540c\u73af\u5883\u4e4b\u95f4\u6709\u53ef\u80fd\u4ea7\u751f\u51b2\u7a81\uff08\u4e0d\u786e\u5b9a\uff09\u3002 \u7f16\u8bd1\u5668\u548c\u5e93\u7528\u4e8e\u7f16\u8bd1\u6e90\u4ee3\u7801\u3002 \u21a9","title":"5.3.pip\u5bf9\u6bd4conda"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.3.pip%E5%AF%B9%E6%AF%94conda.html#conda-and-pip","text":"\u2014\u2014 \u672c\u6587\u7ffb\u8bd1\u81ea\uff1a Understanding Conda and Pip \u539f\u6587\u4f5c\u8005\uff1aJonathan Helmus Conda \u548c pip \u8fd9\u4e24\u4e2a\u5de5\u5177\u6709\u4e00\u4e9b\u91cd\u53e0\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u5b83\u4eec\u5e38\u5e38\u88ab\u8ba4\u4e3a\u662f\u6ca1\u4ec0\u4e48\u533a\u522b\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u88ab\u8bbe\u8ba1\u7528\u4e8e\u4e0d\u540c\u7684\u76ee\u7684\u3002 pip \u662f Python Packaging Authority \u63a8\u8350\u7684\u4ece Python Package Index (PyPI) \u5b89\u88c5\u5305\u7684\u5de5\u5177\u3002 pip \u53ef\u4ee5\u5b89\u88c5\u6253\u5305\u4e3a wheels \u683c\u5f0f\u7684\u5305\uff0c\u6216\u8005\u76f4\u63a5\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5\u3002\u4ece\u6e90\u4ee3\u7801\u6587\u4ef6\u5b89\u88c5\u53ef\u80fd\u9700\u8981\u7cfb\u7edf\u5b89\u88c5\u517c\u5bb9\u7684\u7f16\u8bd1\u5668\u548c\u76f8\u5e94\u7684\u5e93 1 \u3002 Conda \u662f\u8de8\u5e73\u53f0\u7684\u5305\u548c\u73af\u5883\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u5b89\u88c5\u548c\u7ba1\u7406\u6765\u81ea Anaconda repository \u548c Anaconda Cloud \u7684 conda \u5305\u3002Conda \u5305\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u7f16\u8bd1\u5668\u6765\u5b89\u88c5\u3002\u53e6\u5916\uff0cconda \u5305\u4e0d\u9650\u4e8e Python\u5305\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b C \u6216 C++ \u5e93\u3001R\u5305\u6216\u4efb\u4f55\u5176\u4ed6\u8f6f\u4ef6\u3002 \u8fd9\u662f conda \u548c pip \u7684\u5173\u952e\u533a\u522b\u3002pip \u53ea\u80fd\u5b89\u88c5 Python \u5305\uff0c\u800c conda \u5b89\u88c5\u7684\u5305\u53ef\u4ee5\u662f\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4f7f\u7528 pip \u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u201d\u7cfb\u7edf\u7a0b\u5e8f\u7ba1\u7406\u5668\u201c\u6216\u201d\u4e0b\u8f7d\u5e76\u8fd0\u884c\u5b89\u88c5\u7a0b\u5e8f\u201c\u6765\u5b89\u88c5 Python \u89e3\u91ca\u5668\uff0c\u800c Conda \u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5 Python \u5305\u548c Python \u89e3\u91ca\u5668\u3002 \u8fd9\u4e24\u4e2a\u5de5\u5177\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u533a\u522b\u662f conda \u53ef\u4ee5\u4e3a\u4e0d\u540c\u7248\u672c\u7684 python \u6216 package \u521b\u5efa\u9694\u79bb\u7684\u73af\u5883\u3002\u8fd9\u5728\u4f7f\u7528\u6570\u636e\u79d1\u5b66\u5de5\u5177\u65f6\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u5de5\u5177\u53ef\u80fd\u5305\u542b\u51b2\u7a81\u7684\u4f9d\u8d56\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b83\u4eec\u4e0d\u9002\u5408\u5b89\u88c5\u5230\u76f8\u540c\u7684\u73af\u5883\u4e2d\u3002pip \u6ca1\u6709\u5185\u7f6e\u7684\u73af\u5883\u7ba1\u7406\u529f\u80fd\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e virtualenv \u6216 venv \u7b49\u5176\u4ed6\u5de5\u5177\u6765\u521b\u5efa\u9694\u79bb\u73af\u5883\u3002pipenv\u3001poetry\u3001hatch wrap pip\u3001virtualenv \u7b49\u5de5\u5177\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\u3002 pip \u548c conda \u5728\u5982\u4f55\u5b9e\u73b0\u73af\u5883\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u65b9\u9762\u4e5f\u6709\u6240\u4e0d\u540c\u3002\u5b89\u88c5\u5305\u65f6\uff0cpip \u4f1a\u5728\u9012\u5f52\u7684\u4e32\u884c\u5faa\u73af\u4e2d\u5b89\u88c5\u4f9d\u8d56\u9879\uff0c\u6ca1\u6709\u52aa\u529b\u786e\u4fdd\u540c\u65f6\u6ee1\u8db3\u6240\u6709\u5305\u7684\u4f9d\u8d56\u6027\u3002\u5982\u679c\u8f83\u65e9\u5b89\u88c5\u7684\u5305\u4e0e\u7a0d\u540e\u5b89\u88c5\u7684\u5305\u5177\u6709\u4e0d\u517c\u5bb9\u7684\u4f9d\u8d56\uff0c\u73af\u5883\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u76f8\u53cd\u7684\uff0cconda \u4f7f\u7528\u4e00\u4e2a satisfiability (SAT) \u7684\u5904\u7406\u7a0b\u5e8f\u53bb\u68c0\u67e5\u73af\u5883\u4e2d\u7684\u6240\u6709\u5305\u7684\u4f9d\u8d56\u662f\u5426\u90fd\u5f97\u5230\u6ee1\u8db3\u3002\u6b64\u68c0\u67e5\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684\u65f6\u95f4\uff0c\u4f46\u53ef\u4ee5\u9632\u6b62\u521b\u5efa\u4e00\u4e2a\u88ab\u7834\u574f\u7684\u73af\u5883\u3002\u53ea\u8981\u5305\u542b\u4f9d\u8d56\u5173\u7cfb\u7684 package metadata \u662f\u6b63\u786e\u7684\uff0cconda \u5c31\u53ef\u4ee5\u521b\u5efa\u6709\u6548\u7684\u73af\u5883\u3002 \u8003\u8651\u5230 conda \u548c pip \u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u6709\u4e9b\u4eba\u8bd5\u56fe\u5c06\u8fd9\u4e9b\u5de5\u5177\u7ed3\u5408\u8d77\u6765\u521b\u5efa\u6570\u636e\u79d1\u5b66\u73af\u5883\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u5c06 pip \u4e0e conda \u7ed3\u5408\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6709\u4e9b\u5305\u53ea\u80fd\u901a\u8fc7 pip \u5b89\u88c5\u3002\u5728 Anaconda repository \u4e2d\u67091500\u591a\u4e2a\u5305\u53ef\u7528\uff0c\u5176\u4e2d\u6db5\u76d6\u4e86\u6700\u6d41\u884c\u7684\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u548cAI\u6846\u67b6\u3002\u53e6\u5916\uff0c\u5728 conda-forge \u548c bioconda \u7684 channel \u8fd8\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u5305\u53ef\u4ee5\u4f7f\u7528 conda \u5b89\u88c5\u3002\u5c3d\u7ba1 Anaconda cloud \u6709\u5927\u91cf\u7684\u5305\uff0c\u4f46\u4e0e PyPI \u4e0a\u53ef\u63d0\u4f9b\u7684 150,000 \u591a\u4e2a\u5305\u76f8\u6bd4\uff0c\u6570\u91cf\u4ecd\u7136\u5f88\u5c11\u3002\u6709\u65f6\u5019\u9700\u8981\u7684\u5305\u6ca1\u6709\u76f8\u5e94\u7684 conda \u5305\uff0c\u4f46\u5728 PyPI \u4e0a\u6709\u5b89\u88c5\u6587\u4ef6\uff0c\u5219\u53ef\u4ee5\u7528 pip \u5b89\u88c5\u3002","title":"\u4e86\u89e3conda and pip\u7684\u5f02\u540c"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.3.pip%E5%AF%B9%E6%AF%94conda.html#_1","text":"conda \u5b89\u88c5\u5305\u8def\u5f84\u662f \\Anaconda3\\pkgs pip \u5b89\u88c5\u5305\u8def\u5f84\u5728\u865a\u62df\u73af\u5883\u4e0b\u662f \\Anaconda3\\envs\\Lib\\site-packages pip\u53ef\u80fd\u4f1a\u751f\u6210\u5b58\u5728\u51b2\u7a81\u7684\u73af\u5883\uff0c\u800cconda\u4e0d\u4f1a conda\u4e0d\u4f1a\u91cd\u590d\u5b89\u88c5\u5df2\u7ecf\u5b89\u88c5\u7684\u4f9d\u8d56\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpip\u4e5f\u5982\u6b64 pip\u5b89\u88c5\u7684\u5305\u4e0d\u4f1a\u663e\u793a\u5728anaconda navigation\u7684\u73af\u5883\u4e2d conda \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5305\u53ea\u5b89\u88c5\u4e00\u6b21\uff0c\u7531conda\u96c6\u4e2d\u7ba1\u7406 pip \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u4f7f\u7528\u7684pip\u5728\u4e0d\u540c\u7684\u8def\u5f84\u4e0b\uff0c\u56e0\u6b64\u4f1a\u91cd\u590d\u5b89\u88c5 \u5173\u4e8ePython\u5305\u7ba1\u7406\u5de5\u5177\u7684\u53d1\u5c55\u5386\u53f2\u53ef\u4ee5\u53c2\u8003 Python's New Package Landscape (andrew)\uff0c\u5176\u4e2d\u6587\u7ffb\u8bd1\u7248\u672c \u5728\u8fd9 \u3002\u63d2\u56fe\u6765\u81eahttps://www.xkcd.com/1987/\u3002 \u5efa\u8bae\u4f7f\u7528conda\u521b\u5efa\u548c\u5220\u9664Python\u73af\u5883\uff0c\u5355\u72ec\u4f7f\u7528pip\u5b89\u88c5Python Package\u3002 \u539f\u56e0\u6709\u5982\u4e0b\u4e09\u70b9\uff1a \u968f\u7740conda\u7684\u66f4\u65b0\uff0c\u4ee5\u4e0b\u60c5\u51b5\u6709\u53ef\u80fd\u6539\u53d8\u3002 \u6df7\u7528conda\u548cpip\u5b89\u88c5package\u6709\u53ef\u80fd\u4ea7\u751f\u51b2\u7a81\u3002 \u867d\u7136\u4f7f\u7528conda\u4e00\u822c\u4e0d\u4f1a\u4ea7\u751f\u4f9d\u8d56\u51b2\u7a81\uff0c\u4f46\u662f\u4f9d\u7136\u6709\u53ef\u80fd\u7834\u73afPython\u73af\u5883\uff0c\u4f8b\u5982\u4f7f\u7528conda\u5b89\u88c5package\u65f6\uff0c\u5982\u679c\u4e0d\u6ce8\u610f\uff0c\u67d0\u4e9b\u4f9d\u8d56\u9879\u4f1a\u88ab\u81ea\u52a8\u66f4\u65b0\uff0c\u4f46\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9879\u76ee\u4ee3\u7801 break down\u3002 \u56e0\u4e3aconda\u4e0d\u4f1a\u4e3a\u4e0d\u540c\u7684\u73af\u5883\u91cd\u590d\u5b89\u88c5\u76f8\u540c\u7684package\uff0c\u6240\u4ee5\u4e0d\u540c\u73af\u5883\u4e4b\u95f4\u6709\u53ef\u80fd\u4ea7\u751f\u51b2\u7a81\uff08\u4e0d\u786e\u5b9a\uff09\u3002 \u7f16\u8bd1\u5668\u548c\u5e93\u7528\u4e8e\u7f16\u8bd1\u6e90\u4ee3\u7801\u3002 \u21a9","title":"\u8865\u5145"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.4.anaconda.html","text":"Anaconda\u4e0b\u5404\u4e2a\u6587\u4ef6\u5939\u4f5c\u7528 anacoda3/conda-meta/history \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u5b89\u88c5\u3001\u5378\u8f7d\u3001\u5347\u7ea7\u5305\u7684\u64cd\u4f5c anaconda3/pkgs/urls.txt \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u4e0b\u8f7d\u5305\u7684\u5730\u5740\uff0c\u76f4\u63a5\u590d\u5236\u5730\u5740\u5230\u6d4f\u89c8\u5668\u4e2d\u4e5f\u53ef\u4ee5\u4e0b\u8f7d anaconda3/conda-meta/ \uff1a\u6587\u4ef6\u5939\u91cc\u4fdd\u5b58\u7740\u4e0e\u5404\u4e2a\u5305\u540c\u540d\u7684.json\u6587\u4ef6\uff08\u6709\u4e9b\u5305\u4f1a\u6709\u591a\u4e2a.json\u6587\u4ef6\uff09\uff0c\u8fd9\u4e9bjson\u6587\u4ef6\u4f1a\u8bb0\u5f55\u5bf9\u5e94\u7684\u5305\u7684\u7248\u672c\u3001\u5b58\u653e\u4f4d\u7f6e\u3001md5\u503c\u7b49\u4fe1\u606f anaconda3/pkgs/ \uff1a\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u5b58\u653e\u4e86\u6bcf\u4e2a\u5305\u521a\u4e0b\u8f7d\u6765\u7684\u6587\u4ef6\uff0c\u683c\u5f0f\u662f.tar.gz2\uff0c\u53e6\u5916\u4e5f\u4f1a\u81ea\u52a8\u89e3\u538b\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u3002\u6bd4\u5982\u4f60\u4e0b\u8f7d\u4e86six\u8fd9\u4e2a\u5305\uff0canaconda3/pkgs/\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u4f1a\u591a\u51fa\u5982\u4e0b2\u4e2a\u6587\u4ef6\u3002\u53e6\u5916\uff0c\u5f53\u4f60\u5378\u8f7d\u5305\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u76842\u4e2a\u6587\u4ef6\u662f\u4e0d\u4f1a\u88ab\u5220\u9664\u7684 anaconda3/lib/python3.6/site-packages/ \uff1a\u5305\u7684\u5b58\u653e\u76ee\u5f55 anaconda3/bin \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b\u53ef\u6267\u884c\u6587\u4ef6 anaconda3/lib \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b.so\u6587\u4ef6 anaconda3/include \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/man \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/share \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6","title":"5.4.anaconda"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.4.anaconda.html#anaconda","text":"anacoda3/conda-meta/history \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u5b89\u88c5\u3001\u5378\u8f7d\u3001\u5347\u7ea7\u5305\u7684\u64cd\u4f5c anaconda3/pkgs/urls.txt \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u4e0b\u8f7d\u5305\u7684\u5730\u5740\uff0c\u76f4\u63a5\u590d\u5236\u5730\u5740\u5230\u6d4f\u89c8\u5668\u4e2d\u4e5f\u53ef\u4ee5\u4e0b\u8f7d anaconda3/conda-meta/ \uff1a\u6587\u4ef6\u5939\u91cc\u4fdd\u5b58\u7740\u4e0e\u5404\u4e2a\u5305\u540c\u540d\u7684.json\u6587\u4ef6\uff08\u6709\u4e9b\u5305\u4f1a\u6709\u591a\u4e2a.json\u6587\u4ef6\uff09\uff0c\u8fd9\u4e9bjson\u6587\u4ef6\u4f1a\u8bb0\u5f55\u5bf9\u5e94\u7684\u5305\u7684\u7248\u672c\u3001\u5b58\u653e\u4f4d\u7f6e\u3001md5\u503c\u7b49\u4fe1\u606f anaconda3/pkgs/ \uff1a\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u5b58\u653e\u4e86\u6bcf\u4e2a\u5305\u521a\u4e0b\u8f7d\u6765\u7684\u6587\u4ef6\uff0c\u683c\u5f0f\u662f.tar.gz2\uff0c\u53e6\u5916\u4e5f\u4f1a\u81ea\u52a8\u89e3\u538b\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u3002\u6bd4\u5982\u4f60\u4e0b\u8f7d\u4e86six\u8fd9\u4e2a\u5305\uff0canaconda3/pkgs/\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u4f1a\u591a\u51fa\u5982\u4e0b2\u4e2a\u6587\u4ef6\u3002\u53e6\u5916\uff0c\u5f53\u4f60\u5378\u8f7d\u5305\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u76842\u4e2a\u6587\u4ef6\u662f\u4e0d\u4f1a\u88ab\u5220\u9664\u7684 anaconda3/lib/python3.6/site-packages/ \uff1a\u5305\u7684\u5b58\u653e\u76ee\u5f55 anaconda3/bin \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b\u53ef\u6267\u884c\u6587\u4ef6 anaconda3/lib \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b.so\u6587\u4ef6 anaconda3/include \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/man \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/share \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6","title":"Anaconda\u4e0b\u5404\u4e2a\u6587\u4ef6\u5939\u4f5c\u7528"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html","text":"\u5b89\u88c5 anaconda \u96c6\u6210\u4e86 jupyter notebook\uff0c\u76f4\u63a5\u5b89\u88c5 anaconda \u662f\u4f7f\u7528 jupyter \u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u5982\u679c\u89c9\u5f97 anaconda \u592a\u91cd\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528 conda \u6216\u8005 pip \u5b89\u88c5jupyter\u4e5f\u662f\u6ca1\u95ee\u9898\u7684\u3002\u5177\u4f53\u7684\u5b89\u88c5\u8fc7\u7a0b\u53c2\u8003 jupyter \u7684\u5b98\u7f51\u7684\u6559\u7a0b\uff1a Installing the Jupyter Software \u3002 \u8ba9\u4ee3\u7801\u7a97\u53e3\u8f93\u51fa\u5168\u90e8\u7ed3\u679c \u5c06\u6b64\u4ee3\u7801\u653e\u7f6e\u5728jupyter\u5355\u5143\u4e2d\uff1a from IPython.core.interactiveshell import InteractiveShell InteractiveShell . ast_node_interactivity = \"all\" - \u4fee\u6539\u5168\u5c40\u8bbe\u7f6e \u5728Windows\u4e2d\uff0c\u4ee5\u4e0b\u6b65\u9aa4\u4f1a\u4f7f\u66f4\u6539\u6c38\u4e45\u751f\u6548\u3002\u5e94\u8be5\u9002\u7528\u4e8e\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u3002\u60a8\u53ef\u80fd\u5fc5\u987b\u66f4\u6539\u8def\u5f84\u3002 C:\\Users\\your_profile\\\\.ipython\\profile_default \u505a\u4e00\u4e2aipython_config.py\u6587\u4ef6\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801profile_defaults\uff1a c = get_config () c . InteractiveShell . ast_node_interactivity = \"all\" - \u4f7f\u7528 print \u51fd\u6570 \u5feb\u6377\u952e\u4f7f\u7528\u6307\u5357 Jupyter Notebook \u6709\u4e24\u79cd\u952e\u76d8\u8f93\u5165\u6a21\u5f0f\u3002\u5373\u547d\u4ee4\u6a21\u5f0f\u548c\u7f16\u8f91\u6a21\u5f0f\uff0c\u8fd9\u4e0e Vim \u6709\u4e9b\u7c7b\u4f3c\u3002\u5728\u7f16\u8f91\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u5f80cell\u4e2d\u952e\u5165\u4ee3\u7801\u6216\u6587\u672c\uff0c\u6b64\u65f6\u547d\u4ee4\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002\u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u7528\u5feb\u6377\u952e\u547d\u4ee4\u8fd0\u884c\u5355\u5143\u683c\uff0c\u79fb\u52a8\u5355\u5143\u683c\uff0c\u5207\u6362\u5355\u5143\u683c\u7f16\u8f91\u72b6\u6001\u7b49\u7b49\uff0c\u6b64\u65f6\u7f16\u8f91\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002 \u4ece\u547d\u4ee4\u6a21\u5f0f\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\u9700\u6309 Enter \u952e\uff0c\u4ece\u7f16\u8f91\u6a21\u5f0f\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f\u9700\u6309 Esc \u952e\u3002 \u4ee5\u4e0b\u4e24\u8868\u5206\u522b\u662f\u5bf9\u547d\u4ee4\u548c\u7f16\u8f91\u4e24\u79cd\u6a21\u5f0f\u4e0b\u5feb\u6377\u952e\u7684\u7b80\u5355\u8bf4\u660e\uff1a \u547d\u4ee4\u6a21\u5f0f\u5feb\u6377\u952e\uff08\u6309 Esc \u952e\u5f00\u542f\uff09 \u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Enter \u8f6c\u5165\u7f16\u8f91\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e2a\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u5176\u4e0b\u63d2\u5165\u65b0\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Y \u5355\u5143\u8f6c\u5165\u4ee3\u7801\u72b6\u6001 M \u5355\u5143\u8f6c\u5165 markdown \u72b6\u6001 R \u5355\u5143\u8f6c\u5165 raw \u72b6\u6001 1 \u8bbe\u5b9a 1 \u7ea7\u6807\u9898 \u4ec5\u5728 markdown \u72b6\u6001\u4e0b\u65f6\u5efa\u8bae\u4f7f\u7528\u6807\u9898\u76f8\u5173\u5feb\u6377\u952e\uff0c\u5982\u679c\u5355\u5143\u5904\u4e8e\u5176\u4ed6\u72b6\u6001\uff0c\u5219\u4f1a\u5f3a\u5236\u5207\u6362\u5230 markdown \u72b6\u6001 2 \u8bbe\u5b9a 2 \u7ea7\u6807\u9898 3 \u8bbe\u5b9a 3 \u7ea7\u6807\u9898 4 \u8bbe\u5b9a 4 \u7ea7\u6807\u9898 5 \u8bbe\u5b9a 5 \u7ea7\u6807\u9898 6 \u8bbe\u5b9a 6 \u7ea7\u6807\u9898 Up \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 K \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 Down \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 J \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 Shift-K \u8fde\u7eed\u9009\u62e9\u4e0a\u65b9\u5355\u5143 Shift-J \u8fde\u7eed\u9009\u62e9\u4e0b\u65b9\u5355\u5143 A \u5728\u4e0a\u65b9\u63d2\u5165\u65b0\u5355\u5143 B \u5728\u4e0b\u65b9\u63d2\u5165\u65b0\u5355\u5143 X \u526a\u5207\u9009\u4e2d\u7684\u5355\u5143 C \u590d\u5236\u9009\u4e2d\u7684\u5355\u5143 Shift-V \u7c98\u8d34\u5230\u4e0a\u65b9\u5355\u5143 V \u7c98\u8d34\u5230\u4e0b\u65b9\u5355\u5143 Z \u6062\u590d\u5220\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5355\u5143 D,D \u5220\u9664\u9009\u4e2d\u7684\u5355\u5143 \u8fde\u7eed\u6309\u4e24\u4e2a D \u952e Shift-M \u5408\u5e76\u9009\u4e2d\u7684\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook S \u4fdd\u5b58\u5f53\u524d NoteBook L \u5f00\u5173\u884c\u53f7 \u7f16\u8f91\u6846\u7684\u884c\u53f7\u662f\u53ef\u4ee5\u5f00\u542f\u548c\u5173\u95ed\u7684 O \u8f6c\u6362\u8f93\u51fa Shift-O \u8f6c\u6362\u8f93\u51fa\u6eda\u52a8 Esc \u5173\u95ed\u9875\u9762 Q \u5173\u95ed\u9875\u9762 H \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 I,I \u4e2d\u65ad NoteBook \u5185\u6838 0,0 \u91cd\u542f NoteBook \u5185\u6838 Shift \u5ffd\u7565 Shift-Space \u5411\u4e0a\u6eda\u52a8 Space \u5411\u4e0b\u6eda\u52a8 \u7f16\u8f91\u6a21\u5f0f\u5feb\u6377\u952e\uff08 \u6309 Enter \u952e\u542f\u52a8\uff09 \u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Tab \u4ee3\u7801\u8865\u5168\u6216\u7f29\u8fdb Shift-Tab \u63d0\u793a \u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\uff0c\u90e8\u5206\u51fd\u6570\u3001\u7c7b\u3001\u65b9\u6cd5\u7b49\u4f1a\u663e\u793a\u5176\u5b9a\u4e49\u539f\u578b\uff0c\u5982\u679c\u5728\u5176\u540e\u52a0 ? \u518d\u8fd0\u884c\u4f1a\u663e\u793a\u66f4\u52a0\u8be6\u7ec6\u7684\u5e2e\u52a9 Ctrl-] \u7f29\u8fdb \u5411\u53f3\u7f29\u8fdb Ctrl-[ \u89e3\u9664\u7f29\u8fdb \u5411\u5de6\u7f29\u8fdb Ctrl-A \u5168\u9009 Ctrl-Z \u64a4\u9500 Ctrl-Shift-Z \u91cd\u505a Ctrl-Y \u91cd\u505a Ctrl-Home \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-Up \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-End \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Down \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Left \u8df3\u5230\u5de6\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Right \u8df3\u5230\u53f3\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Backspace \u5220\u9664\u524d\u9762\u4e00\u4e2a\u5b57 Ctrl-Delete \u5220\u9664\u540e\u9762\u4e00\u4e2a\u5b57 Esc \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Ctrl-M \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u4e0b\u9762\u63d2\u5165\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Ctrl-Shift-- \u5206\u5272\u5355\u5143 \u6309\u5149\u6807\u6240\u5728\u884c\u8fdb\u884c\u5206\u5272 Ctrl-Shift-Subtract \u5206\u5272\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook Shift \u5ffd\u7565 Up \u5149\u6807\u4e0a\u79fb\u6216\u8f6c\u5165\u4e0a\u4e00\u5355\u5143 Down \u5149\u6807\u4e0b\u79fb\u6216\u8f6c\u5165\u4e0b\u4e00\u5355\u5143 Ctrl-/ \u6ce8\u91ca\u6574\u884c/\u64a4\u9500\u6ce8\u91ca \u4ec5\u4ee3\u7801\u72b6\u6001\u6709\u6548 \u6ce8\uff1a \u5982\u679c\u5feb\u6377\u952e\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u5e94\u7528\u5360\u7528\uff0c\u5219\u53ef\u80fd\u4f1a\u5931\u6548 \u5728\u4efb\u610f\u76ee\u5f55\u4e0b\u6253\u5f00notebook \u5728\u8be5\u76ee\u5f55\u4e0b\uff1ashift + \u53f3\u952e \ud83d\udc49 \u6253\u5f00powershell\uff0c\u8f93\u5165jupter notebook \u81ea\u5b9a\u4e49\u4e3b\u9898 \u901a\u8fc7 pip \u5b89\u88c5 jupyterthemes package\uff1a # \u5b89\u88c5 pip install jupyterthemes # \u66f4\u65b0jupyterthemes pip install --upgrade jupyterthemes \u5b89\u88c5\u597d jupyterthemes package\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8f93\u5165 jupyterthemes \u7684\u547d\u4ee4\uff1a # \u5217\u51fa\u6240\u6709\u5b89\u88c5\u597d\u7684\u4e3b\u9898 jt -l # \u4f7f\u7528\u5e2e\u52a9 jt -h \u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53c2\u89c1\uff1a jupyterthemes\u5b98\u65b9\u8bf4\u660e \u5b89\u88c5\u6269\u5c55 \u5b89\u88c5 jupyter_contrib_nbextensions \u5305\u3002\u8be5\u63d2\u4ef6\u5e76\u4e0d\u662fjupyter notebook\u5b98\u65b9\u7684\u63d2\u4ef6\u3002\u5177\u4f53\u53c2\u8003 Unofficial Jupyter Notebook Extensions \u548c \u4e3aJupyter Notebook\u5b89\u88c5\u6269\u5c55\u5e76\u542f\u7528Configurator \u3002 # \u5b89\u88c5 pip install jupyter_contrib_nbextensions # \u6216\u8005\u901a\u8fc7conda\u5b89\u88c5 conda install -c conda-forge jupyter_contrib_nbextensions # \u6fc0\u6d3b jupyter contrib nbextension install --user # \u542f\u7528 jupyter nbextensions_configurator enable --user \u8f93\u51fa\u5e26\u6709\u4e2d\u6587\u7684pdf jupyter notebook\u672c\u8eab\u4e0d\u80fd\u8f93\u51fapdf\uff0c\u8f93\u51fapdf\u4f9d\u8d56\u4e8e$\\LaTeX$\u5f15\u64ce\u3002\u76ee\u524d\uff0c\u5e26\u6709\u4e2d\u6587\u7684ipynb\u6587\u4ef6\u8f93\u51fa\u4e3apdf\u4f1a\u62a5\u9519\uff0c\u4e3b\u8981\u539f\u56e0\u662fjupyter\u7684$\\LaTeX$\u6a21\u677f\u8bbe\u7f6e\u4e86$\\text{pdf}\\LaTeX$\u5f15\u64ce\uff0c\u4f46\u662fPdf$\\LaTeX$\u4e0d\u53ef\u4ee5\u76f4\u63a5\u7f16\u8bd1\u4e2d\u6587\u6587\u6863\u7684\u3002\u56e0\u6b64\uff0c\u9700\u8981\u628ajupyter\u7684$\\LaTeX$\u5f15\u64ce\u6539\u4e3a$\\text{Xe}\\LaTeX$\u5f15\u64ce\u3002 \u4fee\u6539\u6a21\u677f\uff0c\u6a21\u677f\u4f4d\u7f6e\u4e3a\uff1a...\\site-packages\\nbconvert\\templates\\latex\\article.tplx\uff0c\u5c06latex\u6a21\u677f\u7c7b\u7531article\u6539\u4e3actexart\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [11pt] { article } ((* endblock docclass *)) \u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [13pt] { ctexart } ((* endblock docclass *)) \u6216\u8005\uff0c\u4f9d\u7136\u4f7f\u7528 PdfLatex\u5f15\u64ce\uff0c\u4f46\u5f15\u5165 xeCJK \u5b8f\u5305\uff1a \\documentclass [11pt] { article } \\usepackage { xeCJK } % \u5982\u679c\u8bbe\u7f6emainfont\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5df2\u5b89\u88c5\u7684\u4e2d\u6587\u5b57\u4f53\uff0c\u4f8b\u5982\u5fae\u8f6f\u96c5\u9ed1\u3002 %\\setCJKmainfont{SourceHanSansCN-Light} \u60f3\u8981\u4fee\u6539\u8f93\u51fapdf\u7684\u6392\u7248\uff0c\u5219\u9700\u8981\u4fee\u6539\u5176\u9884\u5b9a\u4e49\u7684latex\u6392\u7248\u6a21\u677f\uff0c\u5373base.tplx\u6587\u4ef6\u3002\u4f8b\u5982\u53ef\u4ee5\u5728base.tplx\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\u63a7\u5236\u8f93\u51fa\u7684pdf\u7684\u9875\u8fb9\u8ddd\u3002 \\geometry { a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm } \u4f46\u662f\uff0c\u53ef\u80fd\u6539\u4e86jupyter\u7684latex\u6a21\u677f\uff0cjupyter notebook\u8f93\u51fapdf\u4f9d\u7136\u62a5\u9519\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u62a5\u9519\u4fe1\u606f\uff1a nbconvert failed: PDF creating failed, captured latex output: This is XeTeX, Version 3.14159265-2.6-0.99999 (TeX Live 2018/W32TeX) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode ! Undefined control sequence. <*> .\\notebook .tex ? ! Emergency stop. <*> .\\notebook .tex No pages of output. Transcript written on ?. \u8fd9\u662fjupyter\u4e2d\u63a7\u5236\u8c03\u7528latex\u5f15\u64ce\u7684\u811a\u672cpdf.py\u6709bug\uff0c\u4f4d\u4e8e66\u884c\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '.' }) \u6b63\u786e\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '' }) \u539f\u6765\u7684\u4ee3\u7801\u7ed9xelatex\u5f15\u64ce\u53d1\u9001\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u8def\u5f84\uff1a \u9519\u8bef\u7684\u8def\u5f84\uff1a xelatex .\\notebook.tex \u6b63\u786e\u7684\u8def\u5f84\uff1a xelatex notebook.tex \u8be6\u7ec6\u5185\u5bb9\u53c2\u8003\u8fd9\u91cc Problem in Converting Jupyter notebook to pdf #144 \u3002 \u7248\u672c\u63a7\u5236 Save and CheckPoint \u548c Revert to CheckPoint\u3002 \u4f7f\u7528\u975ePython\u5185\u6838 jupyter \u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u4f7f\u7528 Python \u5185\u6838\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\u4f5c\u4e3a\u540e\u7aef\u3002 C#\u3001F#\u5185\u6838 \u5982\u4f55\u4e3ajupyter\u5b89\u88c5C#\u3001F#\u7684\u5185\u6838\u53ef\u4ee5\u53c2\u8003\u5fae\u8f6f\u7684\u6559\u7a0b\uff1a .NET Core with Jupyter Notebooks \u2013 Available today | Preview 1","title":"5.5.jupyter\u4f7f\u7528\u7b14\u8bb0"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_1","text":"anaconda \u96c6\u6210\u4e86 jupyter notebook\uff0c\u76f4\u63a5\u5b89\u88c5 anaconda \u662f\u4f7f\u7528 jupyter \u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u5982\u679c\u89c9\u5f97 anaconda \u592a\u91cd\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528 conda \u6216\u8005 pip \u5b89\u88c5jupyter\u4e5f\u662f\u6ca1\u95ee\u9898\u7684\u3002\u5177\u4f53\u7684\u5b89\u88c5\u8fc7\u7a0b\u53c2\u8003 jupyter \u7684\u5b98\u7f51\u7684\u6559\u7a0b\uff1a Installing the Jupyter Software \u3002","title":"\u5b89\u88c5"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_2","text":"\u5c06\u6b64\u4ee3\u7801\u653e\u7f6e\u5728jupyter\u5355\u5143\u4e2d\uff1a from IPython.core.interactiveshell import InteractiveShell InteractiveShell . ast_node_interactivity = \"all\" - \u4fee\u6539\u5168\u5c40\u8bbe\u7f6e \u5728Windows\u4e2d\uff0c\u4ee5\u4e0b\u6b65\u9aa4\u4f1a\u4f7f\u66f4\u6539\u6c38\u4e45\u751f\u6548\u3002\u5e94\u8be5\u9002\u7528\u4e8e\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u3002\u60a8\u53ef\u80fd\u5fc5\u987b\u66f4\u6539\u8def\u5f84\u3002 C:\\Users\\your_profile\\\\.ipython\\profile_default \u505a\u4e00\u4e2aipython_config.py\u6587\u4ef6\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801profile_defaults\uff1a c = get_config () c . InteractiveShell . ast_node_interactivity = \"all\" - \u4f7f\u7528 print \u51fd\u6570","title":"\u8ba9\u4ee3\u7801\u7a97\u53e3\u8f93\u51fa\u5168\u90e8\u7ed3\u679c"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_3","text":"Jupyter Notebook \u6709\u4e24\u79cd\u952e\u76d8\u8f93\u5165\u6a21\u5f0f\u3002\u5373\u547d\u4ee4\u6a21\u5f0f\u548c\u7f16\u8f91\u6a21\u5f0f\uff0c\u8fd9\u4e0e Vim \u6709\u4e9b\u7c7b\u4f3c\u3002\u5728\u7f16\u8f91\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u5f80cell\u4e2d\u952e\u5165\u4ee3\u7801\u6216\u6587\u672c\uff0c\u6b64\u65f6\u547d\u4ee4\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002\u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u7528\u5feb\u6377\u952e\u547d\u4ee4\u8fd0\u884c\u5355\u5143\u683c\uff0c\u79fb\u52a8\u5355\u5143\u683c\uff0c\u5207\u6362\u5355\u5143\u683c\u7f16\u8f91\u72b6\u6001\u7b49\u7b49\uff0c\u6b64\u65f6\u7f16\u8f91\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002 \u4ece\u547d\u4ee4\u6a21\u5f0f\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\u9700\u6309 Enter \u952e\uff0c\u4ece\u7f16\u8f91\u6a21\u5f0f\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f\u9700\u6309 Esc \u952e\u3002 \u4ee5\u4e0b\u4e24\u8868\u5206\u522b\u662f\u5bf9\u547d\u4ee4\u548c\u7f16\u8f91\u4e24\u79cd\u6a21\u5f0f\u4e0b\u5feb\u6377\u952e\u7684\u7b80\u5355\u8bf4\u660e\uff1a","title":"\u5feb\u6377\u952e\u4f7f\u7528\u6307\u5357"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#esc","text":"\u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Enter \u8f6c\u5165\u7f16\u8f91\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e2a\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u5176\u4e0b\u63d2\u5165\u65b0\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Y \u5355\u5143\u8f6c\u5165\u4ee3\u7801\u72b6\u6001 M \u5355\u5143\u8f6c\u5165 markdown \u72b6\u6001 R \u5355\u5143\u8f6c\u5165 raw \u72b6\u6001 1 \u8bbe\u5b9a 1 \u7ea7\u6807\u9898 \u4ec5\u5728 markdown \u72b6\u6001\u4e0b\u65f6\u5efa\u8bae\u4f7f\u7528\u6807\u9898\u76f8\u5173\u5feb\u6377\u952e\uff0c\u5982\u679c\u5355\u5143\u5904\u4e8e\u5176\u4ed6\u72b6\u6001\uff0c\u5219\u4f1a\u5f3a\u5236\u5207\u6362\u5230 markdown \u72b6\u6001 2 \u8bbe\u5b9a 2 \u7ea7\u6807\u9898 3 \u8bbe\u5b9a 3 \u7ea7\u6807\u9898 4 \u8bbe\u5b9a 4 \u7ea7\u6807\u9898 5 \u8bbe\u5b9a 5 \u7ea7\u6807\u9898 6 \u8bbe\u5b9a 6 \u7ea7\u6807\u9898 Up \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 K \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 Down \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 J \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 Shift-K \u8fde\u7eed\u9009\u62e9\u4e0a\u65b9\u5355\u5143 Shift-J \u8fde\u7eed\u9009\u62e9\u4e0b\u65b9\u5355\u5143 A \u5728\u4e0a\u65b9\u63d2\u5165\u65b0\u5355\u5143 B \u5728\u4e0b\u65b9\u63d2\u5165\u65b0\u5355\u5143 X \u526a\u5207\u9009\u4e2d\u7684\u5355\u5143 C \u590d\u5236\u9009\u4e2d\u7684\u5355\u5143 Shift-V \u7c98\u8d34\u5230\u4e0a\u65b9\u5355\u5143 V \u7c98\u8d34\u5230\u4e0b\u65b9\u5355\u5143 Z \u6062\u590d\u5220\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5355\u5143 D,D \u5220\u9664\u9009\u4e2d\u7684\u5355\u5143 \u8fde\u7eed\u6309\u4e24\u4e2a D \u952e Shift-M \u5408\u5e76\u9009\u4e2d\u7684\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook S \u4fdd\u5b58\u5f53\u524d NoteBook L \u5f00\u5173\u884c\u53f7 \u7f16\u8f91\u6846\u7684\u884c\u53f7\u662f\u53ef\u4ee5\u5f00\u542f\u548c\u5173\u95ed\u7684 O \u8f6c\u6362\u8f93\u51fa Shift-O \u8f6c\u6362\u8f93\u51fa\u6eda\u52a8 Esc \u5173\u95ed\u9875\u9762 Q \u5173\u95ed\u9875\u9762 H \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 I,I \u4e2d\u65ad NoteBook \u5185\u6838 0,0 \u91cd\u542f NoteBook \u5185\u6838 Shift \u5ffd\u7565 Shift-Space \u5411\u4e0a\u6eda\u52a8 Space \u5411\u4e0b\u6eda\u52a8","title":"\u547d\u4ee4\u6a21\u5f0f\u5feb\u6377\u952e\uff08\u6309 Esc \u952e\u5f00\u542f\uff09"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#enter","text":"\u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Tab \u4ee3\u7801\u8865\u5168\u6216\u7f29\u8fdb Shift-Tab \u63d0\u793a \u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\uff0c\u90e8\u5206\u51fd\u6570\u3001\u7c7b\u3001\u65b9\u6cd5\u7b49\u4f1a\u663e\u793a\u5176\u5b9a\u4e49\u539f\u578b\uff0c\u5982\u679c\u5728\u5176\u540e\u52a0 ? \u518d\u8fd0\u884c\u4f1a\u663e\u793a\u66f4\u52a0\u8be6\u7ec6\u7684\u5e2e\u52a9 Ctrl-] \u7f29\u8fdb \u5411\u53f3\u7f29\u8fdb Ctrl-[ \u89e3\u9664\u7f29\u8fdb \u5411\u5de6\u7f29\u8fdb Ctrl-A \u5168\u9009 Ctrl-Z \u64a4\u9500 Ctrl-Shift-Z \u91cd\u505a Ctrl-Y \u91cd\u505a Ctrl-Home \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-Up \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-End \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Down \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Left \u8df3\u5230\u5de6\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Right \u8df3\u5230\u53f3\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Backspace \u5220\u9664\u524d\u9762\u4e00\u4e2a\u5b57 Ctrl-Delete \u5220\u9664\u540e\u9762\u4e00\u4e2a\u5b57 Esc \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Ctrl-M \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u4e0b\u9762\u63d2\u5165\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Ctrl-Shift-- \u5206\u5272\u5355\u5143 \u6309\u5149\u6807\u6240\u5728\u884c\u8fdb\u884c\u5206\u5272 Ctrl-Shift-Subtract \u5206\u5272\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook Shift \u5ffd\u7565 Up \u5149\u6807\u4e0a\u79fb\u6216\u8f6c\u5165\u4e0a\u4e00\u5355\u5143 Down \u5149\u6807\u4e0b\u79fb\u6216\u8f6c\u5165\u4e0b\u4e00\u5355\u5143 Ctrl-/ \u6ce8\u91ca\u6574\u884c/\u64a4\u9500\u6ce8\u91ca \u4ec5\u4ee3\u7801\u72b6\u6001\u6709\u6548 \u6ce8\uff1a \u5982\u679c\u5feb\u6377\u952e\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u5e94\u7528\u5360\u7528\uff0c\u5219\u53ef\u80fd\u4f1a\u5931\u6548","title":"\u7f16\u8f91\u6a21\u5f0f\u5feb\u6377\u952e\uff08 \u6309 Enter \u952e\u542f\u52a8\uff09"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#notebook","text":"\u5728\u8be5\u76ee\u5f55\u4e0b\uff1ashift + \u53f3\u952e \ud83d\udc49 \u6253\u5f00powershell\uff0c\u8f93\u5165jupter notebook","title":"\u5728\u4efb\u610f\u76ee\u5f55\u4e0b\u6253\u5f00notebook"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_4","text":"\u901a\u8fc7 pip \u5b89\u88c5 jupyterthemes package\uff1a # \u5b89\u88c5 pip install jupyterthemes # \u66f4\u65b0jupyterthemes pip install --upgrade jupyterthemes \u5b89\u88c5\u597d jupyterthemes package\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8f93\u5165 jupyterthemes \u7684\u547d\u4ee4\uff1a # \u5217\u51fa\u6240\u6709\u5b89\u88c5\u597d\u7684\u4e3b\u9898 jt -l # \u4f7f\u7528\u5e2e\u52a9 jt -h \u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53c2\u89c1\uff1a jupyterthemes\u5b98\u65b9\u8bf4\u660e","title":"\u81ea\u5b9a\u4e49\u4e3b\u9898"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_5","text":"\u5b89\u88c5 jupyter_contrib_nbextensions \u5305\u3002\u8be5\u63d2\u4ef6\u5e76\u4e0d\u662fjupyter notebook\u5b98\u65b9\u7684\u63d2\u4ef6\u3002\u5177\u4f53\u53c2\u8003 Unofficial Jupyter Notebook Extensions \u548c \u4e3aJupyter Notebook\u5b89\u88c5\u6269\u5c55\u5e76\u542f\u7528Configurator \u3002 # \u5b89\u88c5 pip install jupyter_contrib_nbextensions # \u6216\u8005\u901a\u8fc7conda\u5b89\u88c5 conda install -c conda-forge jupyter_contrib_nbextensions # \u6fc0\u6d3b jupyter contrib nbextension install --user # \u542f\u7528 jupyter nbextensions_configurator enable --user","title":"\u5b89\u88c5\u6269\u5c55"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#pdf","text":"jupyter notebook\u672c\u8eab\u4e0d\u80fd\u8f93\u51fapdf\uff0c\u8f93\u51fapdf\u4f9d\u8d56\u4e8e$\\LaTeX$\u5f15\u64ce\u3002\u76ee\u524d\uff0c\u5e26\u6709\u4e2d\u6587\u7684ipynb\u6587\u4ef6\u8f93\u51fa\u4e3apdf\u4f1a\u62a5\u9519\uff0c\u4e3b\u8981\u539f\u56e0\u662fjupyter\u7684$\\LaTeX$\u6a21\u677f\u8bbe\u7f6e\u4e86$\\text{pdf}\\LaTeX$\u5f15\u64ce\uff0c\u4f46\u662fPdf$\\LaTeX$\u4e0d\u53ef\u4ee5\u76f4\u63a5\u7f16\u8bd1\u4e2d\u6587\u6587\u6863\u7684\u3002\u56e0\u6b64\uff0c\u9700\u8981\u628ajupyter\u7684$\\LaTeX$\u5f15\u64ce\u6539\u4e3a$\\text{Xe}\\LaTeX$\u5f15\u64ce\u3002 \u4fee\u6539\u6a21\u677f\uff0c\u6a21\u677f\u4f4d\u7f6e\u4e3a\uff1a...\\site-packages\\nbconvert\\templates\\latex\\article.tplx\uff0c\u5c06latex\u6a21\u677f\u7c7b\u7531article\u6539\u4e3actexart\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [11pt] { article } ((* endblock docclass *)) \u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [13pt] { ctexart } ((* endblock docclass *)) \u6216\u8005\uff0c\u4f9d\u7136\u4f7f\u7528 PdfLatex\u5f15\u64ce\uff0c\u4f46\u5f15\u5165 xeCJK \u5b8f\u5305\uff1a \\documentclass [11pt] { article } \\usepackage { xeCJK } % \u5982\u679c\u8bbe\u7f6emainfont\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5df2\u5b89\u88c5\u7684\u4e2d\u6587\u5b57\u4f53\uff0c\u4f8b\u5982\u5fae\u8f6f\u96c5\u9ed1\u3002 %\\setCJKmainfont{SourceHanSansCN-Light} \u60f3\u8981\u4fee\u6539\u8f93\u51fapdf\u7684\u6392\u7248\uff0c\u5219\u9700\u8981\u4fee\u6539\u5176\u9884\u5b9a\u4e49\u7684latex\u6392\u7248\u6a21\u677f\uff0c\u5373base.tplx\u6587\u4ef6\u3002\u4f8b\u5982\u53ef\u4ee5\u5728base.tplx\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\u63a7\u5236\u8f93\u51fa\u7684pdf\u7684\u9875\u8fb9\u8ddd\u3002 \\geometry { a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm } \u4f46\u662f\uff0c\u53ef\u80fd\u6539\u4e86jupyter\u7684latex\u6a21\u677f\uff0cjupyter notebook\u8f93\u51fapdf\u4f9d\u7136\u62a5\u9519\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u62a5\u9519\u4fe1\u606f\uff1a nbconvert failed: PDF creating failed, captured latex output: This is XeTeX, Version 3.14159265-2.6-0.99999 (TeX Live 2018/W32TeX) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode ! Undefined control sequence. <*> .\\notebook .tex ? ! Emergency stop. <*> .\\notebook .tex No pages of output. Transcript written on ?. \u8fd9\u662fjupyter\u4e2d\u63a7\u5236\u8c03\u7528latex\u5f15\u64ce\u7684\u811a\u672cpdf.py\u6709bug\uff0c\u4f4d\u4e8e66\u884c\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '.' }) \u6b63\u786e\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '' }) \u539f\u6765\u7684\u4ee3\u7801\u7ed9xelatex\u5f15\u64ce\u53d1\u9001\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u8def\u5f84\uff1a \u9519\u8bef\u7684\u8def\u5f84\uff1a xelatex .\\notebook.tex \u6b63\u786e\u7684\u8def\u5f84\uff1a xelatex notebook.tex \u8be6\u7ec6\u5185\u5bb9\u53c2\u8003\u8fd9\u91cc Problem in Converting Jupyter notebook to pdf #144 \u3002","title":"\u8f93\u51fa\u5e26\u6709\u4e2d\u6587\u7684pdf"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_6","text":"Save and CheckPoint \u548c Revert to CheckPoint\u3002","title":"\u7248\u672c\u63a7\u5236"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#python","text":"jupyter \u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u4f7f\u7528 Python \u5185\u6838\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\u4f5c\u4e3a\u540e\u7aef\u3002","title":"\u4f7f\u7528\u975ePython\u5185\u6838"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#cf","text":"\u5982\u4f55\u4e3ajupyter\u5b89\u88c5C#\u3001F#\u7684\u5185\u6838\u53ef\u4ee5\u53c2\u8003\u5fae\u8f6f\u7684\u6559\u7a0b\uff1a .NET Core with Jupyter Notebooks \u2013 Available today | Preview 1","title":"C#\u3001F#\u5185\u6838"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.1.DBAPI.html","text":"\u4e3a\u4e86\u89e3\u51b3Python\u6570\u636e\u5e93\u6a21\u5757\u63a5\u53e3\u4e0d\u7edf\u4e00\u7684\u95ee\u9898\uff0c\u4eba\u4eec\u4e00\u81f4\u540c\u610f\u5f00\u53d1\u4e00\u4e2a\u6807\u51c6\u6570\u636e\u5e93API\u2014\u2014DB API\u3002\u8fd9\u4e2aAPI\u7684\u6700\u65b0\u7248\u672c\u4e3a 2.0 \uff0c\u5728 PEP 249 (Python Database API Specification v2.0) \u4e2d\u5b9a\u4e49 \u3002 \u5168\u5c40\u53d8\u91cf \u6240\u6709\u4e0eDB API2.0\u517c\u5bb9\u7684\u6570\u636e\u5e93\u6a21\u5757\u90fd\u5fc5\u987b\u5305\u542b\u4e09\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b83\u4eec\u63cf\u8ff0\u4e86\u6a21\u5757\u7684\u7279\u5f81\u3002 \u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u8fd9\u4e2aAPI\u8bbe\u8ba1\u5f97\u5f88\u7075\u6d3b\uff0c\u65e0\u9700\u8fdb\u884c\u592a\u591a\u5305\u88c5\u5c31\u80fd\u914d\u5408\u591a\u79cd\u4e0d\u540c\u7684\u5e95\u5c42\u673a\u5236\u4f7f\u7528\u3002\u5982\u679c\u8981\u8ba9\u7a0b\u5e8f\u80fd\u591f\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u5e93\uff0c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u56e0\u4e3a\u9700\u8981\u8003\u8651\u4f17\u591a\u4e0d\u540c\u7684\u53ef\u80fd\u6027\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4e00\u79cd\u66f4\u73b0\u5b9e\u7684\u505a\u6cd5\u662f\u68c0\u67e5\u8fd9\u4e9b\u53d8\u91cf\uff0c\u770b\u770b\u7ed9\u5b9a\u7684\u6a21\u5757\u662f\u5426\u662f\u7a0b\u5e8f\u80fd\u591f\u63a5\u53d7\u7684\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u663e\u793a\u5408\u9002\u7684\u9519\u8bef\u6d88\u606f\u5e76\u9000\u51fa\u6216\u8005\u5f15\u53d1\u5f02\u5e38\u3002\u4e0b\u8868\u603b\u7ed3\u4e86\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u3002 \u53d8 \u91cf \u540d \u63cf \u8ff0 apilevel \u4f7f\u7528\u7684Python DB API\u7248\u672c threadsafety \u6a21\u5757\u7684\u7ebf\u7a0b\u5b89\u5168\u7a0b\u5ea6\u5982\u4f55 paramstyle \u5728SQL\u67e5\u8be2\u4e2d\u4f7f\u7528\u54ea\u79cd\u53c2\u6570\u98ce\u683c API\u7ea7\u522b\uff08 apilevel \uff09\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u6307\u51fa\u4e86\u4f7f\u7528\u7684API\u7248\u672c\u3002DB API 2.0\u6307\u51fa\uff0c\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e3a '1.0' \u6216 '2.0' \u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u8bf4\u660e\u6a21\u5757\u4e0d\u4e0eDB API 2.0\u517c\u5bb9\uff0c\u6b64\u65f6\u5e94\u5047\u5b9a\u6a21\u5757\u4f7f\u7528\u7684\u662fDB API 1.0\u3002\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u5141\u8bb8\u8fd9\u4e2a\u53d8\u91cf\u4e3a\u5176\u4ed6\u503c\u4e5f\u6ca1\u6709\u5bb3\u5904\uff0c\u56e0\u4e3a\u8bf4\u4e0d\u5b9a\u4ec0\u4e48\u65f6\u5019DB API 3.0\u5c31\u51fa\u6765\u4e86\u3002 \u7ebf\u7a0b\u5b89\u5168\u7a0b\u5ea6\uff08 threadsafety \uff09\u662f\u4e00\u4e2a 0~3 \u7684\u6574\u6570\u3002\u5982\u679c\u4f60\u4e0d\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u5219\u4e0d\u5fc5\u5173\u5fc3\u8fd9\u4e2a\u53d8\u91cf\u3002 0 \u8868\u793a\u7ebf\u7a0b\u4e0d\u80fd\u5171\u4eab\u6a21\u5757 1 \u8868\u793a\u7ebf\u7a0b\u53ef\u5171\u4eab\u6a21\u5757\u672c\u8eab\uff0c\u4f46\u4e0d\u80fd\u5171\u4eab\u8fde\u63a5 2 \u8868\u793a\u7ebf\u7a0b\u53ef\u5171\u4eab\u6a21\u5757\u548c\u8fde\u63a5\uff0c\u4f46\u4e0d\u80fd\u5171\u4eab\u6e38\u6807 3 \u8868\u793a\u6a21\u5757\u662f\u7edd\u5bf9\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6a21\u5757\u3001\u8fde\u63a5\u548c\u6e38\u6807\u90fd\u53ef\u4ee5\u5171\u4eab \u53c2\u6570\u98ce\u683c\uff08 paramstyle \uff09\u8868\u793a\u5f53\u4f60\u6267\u884c\u591a\u4e2a\u7c7b\u4f3c\u7684\u6570\u636e\u5e93\u67e5\u8be2\u65f6\uff0c\u5982\u4f55\u5728SQL\u67e5\u8be2\u4e2d\u63d2\u5165\u53c2\u6570\u3002 'format' \u8868\u793a\u6807\u51c6\u5b57\u7b26\u4e32\u683c\u5f0f\u8bbe\u7f6e\u65b9\u5f0f\uff08\u4f7f\u7528\u57fa\u672c\u7684\u683c\u5f0f\u7f16\u7801\uff09\uff0c\u5982\u5728\u8981\u63d2\u5165\u53c2\u6570\u7684\u5730\u65b9\u63d2\u5165 %s 'pyformat' \u8868\u793a\u6269\u5c55\u7684\u683c\u5f0f\u7f16\u7801\uff0c\u5373\u65e7\u5f0f\u5b57\u5178\u63d2\u5165\u4f7f\u7528\u7684\u683c\u5f0f\u7f16\u7801\uff0c\u5982 %(foo)s 'qmark' \u8868\u793a\u4f7f\u7528\u95ee\u53f7 'numeric' \u8868\u793a\u4f7f\u7528 :1 \u548c :2 \u8fd9\u6837\u7684\u5f62\u5f0f\u8868\u793a\u5b57\u6bb5\uff08\u5176\u4e2d\u7684\u6570\u5b57\u662f\u53c2\u6570\u7684\u7f16\u53f7\uff09 'named' \u8868\u793a\u4f7f\u7528 :foobar \u8fd9\u6837\u7684\u5f62\u5f0f\u8868\u793a\u5b57\u6bb5\uff08\u5176\u4e2d foobar \u4e3a\u53c2\u6570\u540d\uff09 \u5176\u4e2d\uff0c 'format' \u3001 'pyformat' \u5c5e\u4e8ePython\u98ce\u683c\u3002\u5982\u679c\u4f60\u89c9\u5f97\u53c2\u6570\u6837\u5f0f\u4ee4\u4eba\u8ff7\u60d1\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u3002\u7f16\u5199\u7b80\u5355\u7a0b\u5e8f\u65f6\uff0c\u4e0d\u4f1a\u7528\u5230\u5b83\u4eec\u3002\u5982\u679c\u9700\u8981\u660e\u767d\u7279\u5b9a\u7684\u6570\u636e\u5e93\u662f\u5982\u4f55\u5904\u7406\u53c2\u6570\u7684\uff0c\u53ef\u53c2\u9605\u76f8\u5173\u7684\u6587\u6863\u3002 \u5f02\u5e38 DB API\u5b9a\u4e49\u4e86\u591a\u79cd\u5f02\u5e38\uff0c\u8ba9\u4f60\u80fd\u591f\u7ec6\u81f4\u5730\u5904\u7406\u9519\u8bef\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u5f02\u5e38\u6784\u6210\u4e86\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff0c\u56e0\u6b64\u4f7f\u7528\u4e00\u4e2a except \u5757\u5c31\u53ef\u6355\u83b7\u591a\u79cd\u5f02\u5e38\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u4e00\u5207\u90fd\u6b63\u5e38\u8fd0\u884c\uff0c\u4e14\u4e0d\u4ecb\u610f\u51fa\u73b0\u4e0d\u592a\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u65f6\u5173\u95ed\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6839\u672c\u4e0d\u8003\u8651\u8fd9\u4e9b\u5f02\u5e38\u3002\u88681\u8bf4\u660e\u4e86\u8fd9\u4e2a\u5f02\u5e38\u5c42\u6b21\u7ed3\u6784\u3002\u5f02\u5e38\u5e94\u8be5\u5728\u6574\u4e2a\u6570\u636e\u5e93\u6a21\u5757\u4e2d\u90fd\u53ef\u7528\u3002\u6709\u5173\u8fd9\u4e9b\u5f02\u5e38\u7684\u6df1\u5165\u63cf\u8ff0\uff0c\u8bf7\u53c2\u9605DB API\u89c4\u8303\uff08\u524d\u9762\u63d0\u5230\u7684PEP\uff09\u3002 $$ \\begin{array}{lll} & \\text { \u88681 Python DB API \u6307\u5b9a\u7684\u5f02\u5e38 } & \\\\ \\hline \\text { \u5f02 \u5e38} & \\text { \u8d85 \u7c7b} & \\text { \u63cf \u8ff0 } \\\\ \\hline \\text { StandardError } & & \\text { \u6240\u6709\u5f02\u5e38\u7684\u8d85\u7c7b } \\\\ \\text { Warning } & \\text { StandardError } & \\text { \u53d1\u751f\u975e\u81f4\u547d\u95ee\u984c\u65f6\u5f15\u53d1 } \\\\ \\text { Error } & \\text { StandardError } & \\text { \u6240\u6709\u9519\u8bef\u6761\u4ef6\u7684\u8d85\u7c7b } \\\\ \\text { InterfaceError } & \\text { Error } & \\text { \u4e0e\u63a5\u53e3 ( \u800c\u4e0d\u662f\u6570\u636e\u5e93 }) \\text { \u76f8\u5173\u7684\u9519\u8bef } \\\\ \\text { DatabaseError } & \\text { Error } & \\text { \u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u9519\u8bef\u7684\u8d85\u7c7b } \\\\ \\text { Datafrror } & \\text { DatabaseError } & \\text { \u4e0e\u6570\u636e\u76f8\u5173\u7684\u95ee\u9898, \u5982\u503c\u4e0d\u5728\u5408\u6cd5\u7684\u8303\u56f4\u5185 } \\\\ \\text { OperationalError } & \\text { Databasefror } & \\text { \u6570\u636e\u5e93\u64cd\u4f5c\u5185\u90e8\u7684\u9519\u8bef } \\\\\\ \\text { IntegrityError } & \\text { Databasefror } & \\text { \u5173\u7cfb\u5b8c\u6574\u6027\u9084\u5230\u7834\u574f, \u5982\u952e\u672f\u901a\u8fc7\u68c0\u67e5 } \\\\ \\text { InternalError } & \\text { Databasefror } & \\text { \u6570\u636e\u5e93\u5185\u90e8\u7684\u9519\u8bef, \u5982\u6e38\u6807\u65e0\u6548 } \\\\ \\text { ProgrammingError } & \\text { Databasefror } & \\text { \u7528\u6237\u7f16\u7a0b\u9519\u8bef, \u5982\u672a\u627e\u5230\u6570\u636e\u5e93\u8868 } \\\\ \\text { NotsupportedError } & \\text { Databasefror } & \\text { \u8bf7\u6c42\u4e0d\u652f\u6301\u7684\u529f\u80fd\uff0c\u5982\u56de\u6eda } \\\\ \\hline \\end{array} $$ \u8fde\u63a5\u548c\u6e38\u6807 \u8981\u4f7f\u7528\u5e95\u5c42\u7684\u6570\u636e\u5e93\u7cfb\u7edf\uff0c\u5fc5\u987b\u5148\u8fde\u63a5\u5230\u5b83\uff0c\u4e3a\u6b64\u53ef\u4f7f\u7528\u540d\u79f0\u8d34\u5207\u7684\u51fd\u6570 connect \u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u591a\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u662f\u54ea\u4e9b\u53d6\u51b3\u4e8e\u8981\u4f7f\u7528\u7684\u6570\u636e\u5e93\u3002\u4f5c\u4e3a\u6307\u5357\uff0cDB API \u5b9a\u4e49\u4e86\u88682\u6240\u793a\u7684\u53c2\u6570\u3002\u63a8\u8350\u5c06\u8fd9\u4e9b\u53c2\u6570\u5b9a\u4e49\u4e3a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e76\u6309\u4e0b\u8868\u6240\u793a\u7684\u987a\u5e8f\u6392\u5217\u3002\u8fd9\u4e9b\u53c2\u6570\u90fd\u5e94\u8be5\u662f\u5b57\u7b26\u4e32\u3002 $$ \\begin{array}{clcc} & \\text { \u88682 \u51fd\u6570 connect \u7684\u5e38\u7528\u53c2\u6570 } & \\\\ \\hline \\text { \u53c2 \u6570 \u540d} & \\text { \u63cf \u8ff0} & \\text { \u662f\u5426\u53ef\u9009 } & \\\\ \\hline \\text { dsn } & \\text { \u6570\u636e\u6e90\u540d\u79f0, \u5177\u4f53\u542b\u4e49\u968f\u6570\u636e\u5e93\u800c\u5f02 } & \\text { \u5426 } \\\\ \\text { user } & \\text { \u7528\u6237\u540d } & \\text { \u662f } \\\\ \\text { password } & \\text { \u7528\u6237\u5bc6\u7801 } & \\text { \u662f } \\\\ \\text { host } & \\text { \u4e3b\u673a\u540d } & \\text { \u662f } \\\\ \\text { database } & \\text { \u6570\u636e\u5e93\u540d\u79f0 } & \\text { \u662f } \\\\ \\hline \\end{array} $$ \u51fd\u6570 connect \u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\uff0c\u8868\u793a\u5f53\u524d\u5230\u6570\u636e\u5e93\u7684\u4f1a\u8bdd\u3002\u8fde\u63a5\u5bf9\u8c61\u652f\u6301\u4e0b\u8868\u6240\u793a\u7684\u65b9\u6cd5\u3002 $$ \\begin{array}{ll} & \\text {\u88683 \u8fde\u63a5\u5bf9\u8c61\u7684\u65b9\u6cd5 } & \\\\ \\hline \\text { \u65b9 \u6cd5 \u540d} & \\text {\u63cf \u8ff0 } \\\\ \\hline \\text { close() } & \\text{\u5173\u95ed\u8fde\u63a5\u5bf9\u8c61\u3002\u4e4b\u540e, \u8fde\u63a5\u5bf9\u8c61\u53ca\u5176\u6e38\u6807\u5c06\u4e0d\u53ef\u7528} \\\\ \\text { commit() } & \\text{\u63d0\u4ea4\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1, \u5982\u679c\u652f\u6301\u7684\u8bdd\uff1b\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a} \\\\ \\text { rollback() } & \\text {\u56de\u6eda\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1\uff08\u53ef\u80fd\u4e0d\u53ef\u7528\uff09} \\\\ \\text { cursor() } & \\text {\u8fd4\u56de\u8fde\u63a5\u7684\u6e38\u6807\u5bf9\u8c61} \\\\ \\hline\\end{array} $$ \u65b9\u6cd5 rollback \u53ef\u80fd\u4e0d\u53ef\u7528\uff0c\u56e0\u4e3a\u5e76\u975e\u6240\u6709\u7684\u6570\u636e\u5e93\u90fd\u652f\u6301\u4e8b\u52a1\uff08\u4e8b\u52a1\u5176\u5b9e\u5c31\u662f\u4e00\u7cfb\u5217\u64cd\u4f5c\uff09\u3002\u53ef\u7528\u65f6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u64a4\u9500\u6240\u6709\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1\u3002 \u65b9\u6cd5 commit \u603b\u662f\u53ef\u7528\u7684\uff0c\u4f46\u5982\u679c\u6570\u636e\u5e93\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u5982\u679c\u8fd8\u6709\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1\uff0c\u5c06\u9690\u5f0f\u5730\u56de\u6eda\u5b83\u4eec\u2014\u2014\u4f46\u4ec5\u5f53\u6570\u636e\u5e93\u652f\u6301\u56de\u6eda\u65f6\u624d\u5982\u6b64\uff01\u5982\u679c\u4f60\u4e0d\u60f3\u4f9d\u8d56\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5e94\u5728\u5173\u95ed\u8fde\u63a5\u524d\u63d0\u4ea4\u3002\u53ea\u8981\u63d0\u4ea4\u4e86\u6240\u6709\u7684\u4e8b\u52a1\uff0c\u5c31\u65e0\u9700\u64cd\u5fc3\u5173\u95ed\u8fde\u63a5\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u4f5c\u4e3a\u5783\u573e\u88ab\u6536\u96c6\u65f6\uff0c\u8fde\u63a5\u4f1a\u81ea\u52a8\u5173\u95ed\u3002\u7136\u800c\uff0c\u4e3a\u5b89\u5168\u8d77\u89c1\uff0c\u8fd8\u662f\u8c03\u7528 close \u5427\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u4e0d\u9700\u8981\u957f\u65f6\u95f4\u6572\u51fb\u952e\u76d8\u3002 \u8bf4\u5230\u65b9\u6cd5 cursor \uff0c\u5c31\u5fc5\u987b\u8bf4\u8bf4\u53e6\u4e00\u4e2a\u4e3b\u9898\uff1a \u6e38\u6807\u5bf9\u8c61 \u3002 \u4f60\u4f7f\u7528\u6e38\u6807\u6765\u6267\u884cSQL\u67e5\u8be2\u548c\u67e5\u770b\u7ed3\u679c\u3002 \u6e38\u6807\u652f\u6301\u7684\u65b9\u6cd5\u6bd4\u8fde\u63a5\u591a\uff0c\u5728\u7a0b\u5e8f\u4e2d\u7684\u5730\u4f4d\u4e5f\u53ef\u80fd\u91cd\u8981\u5f97\u591a\u3002\u88684\u6982\u8ff0\u4e86\u6e38\u6807\u7684\u65b9\u6cd5\uff0c\u800c\u88685\u6982\u8ff0\u4e86\u6e38\u6807\u7684\u5c5e\u6027\u3002 $$ \\begin{array}{ll} & \\text { \u88684 \u6e38\u6807\u5bf9\u8c61\u7684\u65b9\u6cd5 } \\\\ \\hline \\text {\u540d \u79f0} & \\text {\u63cf \u8ff0} \\\\ \\hline \\text { callproc(name[, params]) } & \\text { \u4f7f\u7528\u6307\u5b9a\u7684\u53c2\u6570\u8c03\u7528\u6307\u5b9a\u7684\u6570\u636e\u5e93\u8fc7\u7a0b }(\\text { \u53ef\u9009 }) \\\\ \\text { close() } & \\text { \u5173\u95ed\u6e38\u6807\u3002\u5173\u95ed\u540e\u6e38\u6807\u4e0d\u53ef\u7528 } \\\\ \\text { execute(oper[, params]) } & \\text { \u6267\u884c\u4e00\u4e2aSQL\u64cd\u4f5c\u4e00\u4e00\u53ef\u80fd\u6307\u5b9a\u53c2\u6570 } \\\\ \\text { executemany(oper, pseq) } & \\text { \u6267\u884c\u6307\u5b9a\u7684SQL\u64cd\u4f5c\u591a\u6b21, \u6bcf\u6b21\u90fd\u5e8f\u5217\u4e2d\u7684\u4e00\u7ec4\u53c2\u6570 } \\\\ \\text { fetchone() } & \\text { \u4ee5\u5e8f\u5217\u7684\u65b9\u5f0f\u53d6\u56de\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u4e0b\u4e00\u884c } ; \\text { \u5982\u679c\u6ca1\u6709\u66f4\u591a\u7684\u884c, \u5c31\u8fd4\u56deNone } \\\\ \\text { fetchmany([size]) } & \\text { \u53d6\u56de\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u591a\u884c, \u5176\u4e2d\u53c2\u6570size\u7684\u503c\u9ed8\u8ba4\u4e3aarraysize } \\\\ \\text { fetchall() } & \\text { \u4ee5\u5e8f\u5217\u7684\u5e8f\u5217\u7684\u65b9\u5f0f\u53d6\u56de\u4f59\u4e0b\u7684\u6240\u6709\u884c } \\\\ \\text { nextset() } & \\text { \u8df3\u5230\u4e0b\u4e00\u4e2a\u7ed3\u679c\u96c6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u53ef\u9009\u7684 } \\\\ \\text { setinputsizes(sizes) } & \\text { \u7528\u4e8e\u4e3a\u53c2\u6570\u9876\u5b9a\u4e49\u5185\u5b58\u533a\u57df } \\\\ \\text { setoutputsize(size[, col]) } & \\text { \u4e3a\u53d6\u56de\u5927\u91cf\u6570\u636e\u800c\u8bbe\u7f6e\u7f13\u51b2\u533a\u957f\u5ea6 } \\\\ \\hline \\end{array} $$ $$ \\begin{array}{cc} &\\hspace{-7em} \\text{\u88685 \u6e38\u6807\u5bf9\u8c61\u7684\u5c5e\u6027 }\\\\ \\hline \\text { \u540d \u79f0 } & \\text { \u63cf \u8ff0 } \\\\ \\hline \\text { description } & \\text { \u7531\u7ed3\u679c\u5217\u63cf\u8ff0\u7ec4\u6210\u7684\u5e8f\u5217 (\u53ea\u8bfb }) & \\\\ \\text { rowcount } & \\text { \u7ed3\u679c\u5305\u542b\u7684\u884c\u6570 ( } \\text { \u53ea\u8bfb }) & \\\\ \\text { arraysize } & \\text { fetchmany\u8fd4\u56de\u7684\u884c\u6570, \u9ed8\u8ba4\u4e3a1 } & \\\\ \\hline \\end{array} $$ \u7c7b\u578b \u5bf9\u4e8e\u63d2\u5165\u5230\u67d0\u4e9b\u7c7b\u578b\u7684\u5217\u4e2d\u7684\u503c\uff0c\u5e95\u5c42SQL\u6570\u636e\u5e93\u53ef\u80fd\u8981\u6c42\u5b83\u4eec\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\u3002\u4e3a\u4e86\u80fd\u591f\u4e0e\u5e95\u5c42SQL\u6570\u636e\u5e93\u6b63\u786e\u5730\u4e92\u64cd\u4f5c\uff0cDB API\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6784\u9020\u51fd\u6570\u548c\u5e38\u91cf\uff08\u5355\u4f8b\uff09\uff0c\u7528\u4e8e\u63d0\u4f9b\u7279\u6b8a\u7684\u7c7b\u578b\u548c\u503c\u3002\u4f8b\u5982\uff0c\u8981\u5728\u6570\u636e\u5e93\u4e2d\u6dfb\u52a0\u65e5\u671f\uff0c\u5e94\u4f7f\u7528\u76f8\u5e94\u6570\u636e\u5e93\u8fde\u63a5\u6a21\u5757\u4e2d\u7684\u6784\u9020\u51fd\u6570 Date \u6765\u521b\u5efa\u5b83\uff0c\u8fd9\u8ba9\u8fde\u63a5\u6a21\u5757\u80fd\u591f\u5728\u5e55\u540e\u6267\u884c\u5fc5\u8981\u7684\u8f6c\u6362\u3002\u6bcf\u4e2a\u6a21\u5757\u90fd\u5fc5\u987b\u5b9e\u73b0\u88686\u6240\u793a\u7684\u6784\u9020\u51fd\u6570\u548c\u7279\u6b8a\u503c\u3002\u6709\u4e9b\u6a21\u5757\u53ef\u80fd\u6ca1\u6709\u5b8c\u5168\u9075\u5b88\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0csqlite3 \u5c31\u6ca1\u6709\u5bfc\u51fa\u88686\u4e2d\u7279\u6b8a\u503c\uff08\u4ece STRING \u5230 ROWID\uff09\u3002 $$ \\begin{array}{ll} & \\hspace{-5em} \\text{ \u88686 DB API\u6784\u9020\u51fd\u6570\u548c\u7279\u6b8a\u503c } \\\\ \\hline \\text { \u540d \u79f0 } & \\text { \u63cf \u8ff0} \\\\ \\hline \\text { Date( year, month, day }) \\\\ \\text { Time( hour, minute, second) } & \\text { \u521b\u5efa\u5305\u542b\u65e5\u671f\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { Timestamp( y, mon, d, h, min, s} ) & \\text { \u521b\u5efa\u542b\u65f6\u95f4\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { DateFromTicks( ticks ) } & \\text { \u6839\u636e\u4ece\u65b0\u7eaa\u5143\u5f00\u59cb\u8fc7\u53bb\u7684\u79d2\u6570\u521b\u5efa\u5305\u542b\u65e5\u671f\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { TimeFromTicks( ticks ) } & \\text { \u6839\u636e\u4ece\u65b0\u7eaa\u5143\u5f00\u59cb\u8fc7\u53bb\u7684\u79d2\u6570\u521b\u5efa\u5305\u542b\u65f6\u95f4\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { imestampFromTicks( ticks ) } & \\text { \u6839\u636e\u4ece\u65b0\u7eaa\u5143\u5f00\u59cb\u8fc7\u53bb\u7684\u79d2\u6570\u521b\u5efa\u5305\u542b\u65f6\u95f4\u6233\u7684\u5bf9\u8c61 } \\\\ \\text { Binary( string ) } & \\text { \u521b\u5efa\u5305\u542b\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u503c\u7684\u5bf9\u8c61 } & \\\\ \\text { STRING } & \\text { \u63cf\u8ff0\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u5217 }(\\text { \u5982CHAR }) & \\\\ \\text { BINARY } & \\text { \u63cf\u8ff0\u4e8c\u8fdb\u5236\u5217 }(\\text { \u5982LONG\u6216RAW }) & \\\\ \\text { NUMBER } & \\text { \u63cf\u8ff0\u6570\u5b57\u5217 } \\\\ \\text { DATETIME } & \\text { \u63cf\u8ff0\u65e5\u671f/\u65f6\u95f4\u5217 } \\\\ \\text { ROWID } & \\text { \u63cf\u8ff0\u884cID\u5217 } \\\\ \\hline \\end{array} $$","title":"15.1.DBAPI"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.1.DBAPI.html#_1","text":"\u6240\u6709\u4e0eDB API2.0\u517c\u5bb9\u7684\u6570\u636e\u5e93\u6a21\u5757\u90fd\u5fc5\u987b\u5305\u542b\u4e09\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b83\u4eec\u63cf\u8ff0\u4e86\u6a21\u5757\u7684\u7279\u5f81\u3002 \u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u8fd9\u4e2aAPI\u8bbe\u8ba1\u5f97\u5f88\u7075\u6d3b\uff0c\u65e0\u9700\u8fdb\u884c\u592a\u591a\u5305\u88c5\u5c31\u80fd\u914d\u5408\u591a\u79cd\u4e0d\u540c\u7684\u5e95\u5c42\u673a\u5236\u4f7f\u7528\u3002\u5982\u679c\u8981\u8ba9\u7a0b\u5e8f\u80fd\u591f\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u5e93\uff0c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u56e0\u4e3a\u9700\u8981\u8003\u8651\u4f17\u591a\u4e0d\u540c\u7684\u53ef\u80fd\u6027\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4e00\u79cd\u66f4\u73b0\u5b9e\u7684\u505a\u6cd5\u662f\u68c0\u67e5\u8fd9\u4e9b\u53d8\u91cf\uff0c\u770b\u770b\u7ed9\u5b9a\u7684\u6a21\u5757\u662f\u5426\u662f\u7a0b\u5e8f\u80fd\u591f\u63a5\u53d7\u7684\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u663e\u793a\u5408\u9002\u7684\u9519\u8bef\u6d88\u606f\u5e76\u9000\u51fa\u6216\u8005\u5f15\u53d1\u5f02\u5e38\u3002\u4e0b\u8868\u603b\u7ed3\u4e86\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u3002 \u53d8 \u91cf \u540d \u63cf \u8ff0 apilevel \u4f7f\u7528\u7684Python DB API\u7248\u672c threadsafety \u6a21\u5757\u7684\u7ebf\u7a0b\u5b89\u5168\u7a0b\u5ea6\u5982\u4f55 paramstyle \u5728SQL\u67e5\u8be2\u4e2d\u4f7f\u7528\u54ea\u79cd\u53c2\u6570\u98ce\u683c API\u7ea7\u522b\uff08 apilevel \uff09\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u6307\u51fa\u4e86\u4f7f\u7528\u7684API\u7248\u672c\u3002DB API 2.0\u6307\u51fa\uff0c\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e3a '1.0' \u6216 '2.0' \u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u8bf4\u660e\u6a21\u5757\u4e0d\u4e0eDB API 2.0\u517c\u5bb9\uff0c\u6b64\u65f6\u5e94\u5047\u5b9a\u6a21\u5757\u4f7f\u7528\u7684\u662fDB API 1.0\u3002\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u5141\u8bb8\u8fd9\u4e2a\u53d8\u91cf\u4e3a\u5176\u4ed6\u503c\u4e5f\u6ca1\u6709\u5bb3\u5904\uff0c\u56e0\u4e3a\u8bf4\u4e0d\u5b9a\u4ec0\u4e48\u65f6\u5019DB API 3.0\u5c31\u51fa\u6765\u4e86\u3002 \u7ebf\u7a0b\u5b89\u5168\u7a0b\u5ea6\uff08 threadsafety \uff09\u662f\u4e00\u4e2a 0~3 \u7684\u6574\u6570\u3002\u5982\u679c\u4f60\u4e0d\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u5219\u4e0d\u5fc5\u5173\u5fc3\u8fd9\u4e2a\u53d8\u91cf\u3002 0 \u8868\u793a\u7ebf\u7a0b\u4e0d\u80fd\u5171\u4eab\u6a21\u5757 1 \u8868\u793a\u7ebf\u7a0b\u53ef\u5171\u4eab\u6a21\u5757\u672c\u8eab\uff0c\u4f46\u4e0d\u80fd\u5171\u4eab\u8fde\u63a5 2 \u8868\u793a\u7ebf\u7a0b\u53ef\u5171\u4eab\u6a21\u5757\u548c\u8fde\u63a5\uff0c\u4f46\u4e0d\u80fd\u5171\u4eab\u6e38\u6807 3 \u8868\u793a\u6a21\u5757\u662f\u7edd\u5bf9\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6a21\u5757\u3001\u8fde\u63a5\u548c\u6e38\u6807\u90fd\u53ef\u4ee5\u5171\u4eab \u53c2\u6570\u98ce\u683c\uff08 paramstyle \uff09\u8868\u793a\u5f53\u4f60\u6267\u884c\u591a\u4e2a\u7c7b\u4f3c\u7684\u6570\u636e\u5e93\u67e5\u8be2\u65f6\uff0c\u5982\u4f55\u5728SQL\u67e5\u8be2\u4e2d\u63d2\u5165\u53c2\u6570\u3002 'format' \u8868\u793a\u6807\u51c6\u5b57\u7b26\u4e32\u683c\u5f0f\u8bbe\u7f6e\u65b9\u5f0f\uff08\u4f7f\u7528\u57fa\u672c\u7684\u683c\u5f0f\u7f16\u7801\uff09\uff0c\u5982\u5728\u8981\u63d2\u5165\u53c2\u6570\u7684\u5730\u65b9\u63d2\u5165 %s 'pyformat' \u8868\u793a\u6269\u5c55\u7684\u683c\u5f0f\u7f16\u7801\uff0c\u5373\u65e7\u5f0f\u5b57\u5178\u63d2\u5165\u4f7f\u7528\u7684\u683c\u5f0f\u7f16\u7801\uff0c\u5982 %(foo)s 'qmark' \u8868\u793a\u4f7f\u7528\u95ee\u53f7 'numeric' \u8868\u793a\u4f7f\u7528 :1 \u548c :2 \u8fd9\u6837\u7684\u5f62\u5f0f\u8868\u793a\u5b57\u6bb5\uff08\u5176\u4e2d\u7684\u6570\u5b57\u662f\u53c2\u6570\u7684\u7f16\u53f7\uff09 'named' \u8868\u793a\u4f7f\u7528 :foobar \u8fd9\u6837\u7684\u5f62\u5f0f\u8868\u793a\u5b57\u6bb5\uff08\u5176\u4e2d foobar \u4e3a\u53c2\u6570\u540d\uff09 \u5176\u4e2d\uff0c 'format' \u3001 'pyformat' \u5c5e\u4e8ePython\u98ce\u683c\u3002\u5982\u679c\u4f60\u89c9\u5f97\u53c2\u6570\u6837\u5f0f\u4ee4\u4eba\u8ff7\u60d1\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u3002\u7f16\u5199\u7b80\u5355\u7a0b\u5e8f\u65f6\uff0c\u4e0d\u4f1a\u7528\u5230\u5b83\u4eec\u3002\u5982\u679c\u9700\u8981\u660e\u767d\u7279\u5b9a\u7684\u6570\u636e\u5e93\u662f\u5982\u4f55\u5904\u7406\u53c2\u6570\u7684\uff0c\u53ef\u53c2\u9605\u76f8\u5173\u7684\u6587\u6863\u3002","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.1.DBAPI.html#_2","text":"DB API\u5b9a\u4e49\u4e86\u591a\u79cd\u5f02\u5e38\uff0c\u8ba9\u4f60\u80fd\u591f\u7ec6\u81f4\u5730\u5904\u7406\u9519\u8bef\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u5f02\u5e38\u6784\u6210\u4e86\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff0c\u56e0\u6b64\u4f7f\u7528\u4e00\u4e2a except \u5757\u5c31\u53ef\u6355\u83b7\u591a\u79cd\u5f02\u5e38\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u4e00\u5207\u90fd\u6b63\u5e38\u8fd0\u884c\uff0c\u4e14\u4e0d\u4ecb\u610f\u51fa\u73b0\u4e0d\u592a\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u65f6\u5173\u95ed\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6839\u672c\u4e0d\u8003\u8651\u8fd9\u4e9b\u5f02\u5e38\u3002\u88681\u8bf4\u660e\u4e86\u8fd9\u4e2a\u5f02\u5e38\u5c42\u6b21\u7ed3\u6784\u3002\u5f02\u5e38\u5e94\u8be5\u5728\u6574\u4e2a\u6570\u636e\u5e93\u6a21\u5757\u4e2d\u90fd\u53ef\u7528\u3002\u6709\u5173\u8fd9\u4e9b\u5f02\u5e38\u7684\u6df1\u5165\u63cf\u8ff0\uff0c\u8bf7\u53c2\u9605DB API\u89c4\u8303\uff08\u524d\u9762\u63d0\u5230\u7684PEP\uff09\u3002 $$ \\begin{array}{lll} & \\text { \u88681 Python DB API \u6307\u5b9a\u7684\u5f02\u5e38 } & \\\\ \\hline \\text { \u5f02 \u5e38} & \\text { \u8d85 \u7c7b} & \\text { \u63cf \u8ff0 } \\\\ \\hline \\text { StandardError } & & \\text { \u6240\u6709\u5f02\u5e38\u7684\u8d85\u7c7b } \\\\ \\text { Warning } & \\text { StandardError } & \\text { \u53d1\u751f\u975e\u81f4\u547d\u95ee\u984c\u65f6\u5f15\u53d1 } \\\\ \\text { Error } & \\text { StandardError } & \\text { \u6240\u6709\u9519\u8bef\u6761\u4ef6\u7684\u8d85\u7c7b } \\\\ \\text { InterfaceError } & \\text { Error } & \\text { \u4e0e\u63a5\u53e3 ( \u800c\u4e0d\u662f\u6570\u636e\u5e93 }) \\text { \u76f8\u5173\u7684\u9519\u8bef } \\\\ \\text { DatabaseError } & \\text { Error } & \\text { \u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u9519\u8bef\u7684\u8d85\u7c7b } \\\\ \\text { Datafrror } & \\text { DatabaseError } & \\text { \u4e0e\u6570\u636e\u76f8\u5173\u7684\u95ee\u9898, \u5982\u503c\u4e0d\u5728\u5408\u6cd5\u7684\u8303\u56f4\u5185 } \\\\ \\text { OperationalError } & \\text { Databasefror } & \\text { \u6570\u636e\u5e93\u64cd\u4f5c\u5185\u90e8\u7684\u9519\u8bef } \\\\\\ \\text { IntegrityError } & \\text { Databasefror } & \\text { \u5173\u7cfb\u5b8c\u6574\u6027\u9084\u5230\u7834\u574f, \u5982\u952e\u672f\u901a\u8fc7\u68c0\u67e5 } \\\\ \\text { InternalError } & \\text { Databasefror } & \\text { \u6570\u636e\u5e93\u5185\u90e8\u7684\u9519\u8bef, \u5982\u6e38\u6807\u65e0\u6548 } \\\\ \\text { ProgrammingError } & \\text { Databasefror } & \\text { \u7528\u6237\u7f16\u7a0b\u9519\u8bef, \u5982\u672a\u627e\u5230\u6570\u636e\u5e93\u8868 } \\\\ \\text { NotsupportedError } & \\text { Databasefror } & \\text { \u8bf7\u6c42\u4e0d\u652f\u6301\u7684\u529f\u80fd\uff0c\u5982\u56de\u6eda } \\\\ \\hline \\end{array} $$","title":"\u5f02\u5e38"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.1.DBAPI.html#_3","text":"\u8981\u4f7f\u7528\u5e95\u5c42\u7684\u6570\u636e\u5e93\u7cfb\u7edf\uff0c\u5fc5\u987b\u5148\u8fde\u63a5\u5230\u5b83\uff0c\u4e3a\u6b64\u53ef\u4f7f\u7528\u540d\u79f0\u8d34\u5207\u7684\u51fd\u6570 connect \u3002\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u591a\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u662f\u54ea\u4e9b\u53d6\u51b3\u4e8e\u8981\u4f7f\u7528\u7684\u6570\u636e\u5e93\u3002\u4f5c\u4e3a\u6307\u5357\uff0cDB API \u5b9a\u4e49\u4e86\u88682\u6240\u793a\u7684\u53c2\u6570\u3002\u63a8\u8350\u5c06\u8fd9\u4e9b\u53c2\u6570\u5b9a\u4e49\u4e3a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e76\u6309\u4e0b\u8868\u6240\u793a\u7684\u987a\u5e8f\u6392\u5217\u3002\u8fd9\u4e9b\u53c2\u6570\u90fd\u5e94\u8be5\u662f\u5b57\u7b26\u4e32\u3002 $$ \\begin{array}{clcc} & \\text { \u88682 \u51fd\u6570 connect \u7684\u5e38\u7528\u53c2\u6570 } & \\\\ \\hline \\text { \u53c2 \u6570 \u540d} & \\text { \u63cf \u8ff0} & \\text { \u662f\u5426\u53ef\u9009 } & \\\\ \\hline \\text { dsn } & \\text { \u6570\u636e\u6e90\u540d\u79f0, \u5177\u4f53\u542b\u4e49\u968f\u6570\u636e\u5e93\u800c\u5f02 } & \\text { \u5426 } \\\\ \\text { user } & \\text { \u7528\u6237\u540d } & \\text { \u662f } \\\\ \\text { password } & \\text { \u7528\u6237\u5bc6\u7801 } & \\text { \u662f } \\\\ \\text { host } & \\text { \u4e3b\u673a\u540d } & \\text { \u662f } \\\\ \\text { database } & \\text { \u6570\u636e\u5e93\u540d\u79f0 } & \\text { \u662f } \\\\ \\hline \\end{array} $$ \u51fd\u6570 connect \u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\uff0c\u8868\u793a\u5f53\u524d\u5230\u6570\u636e\u5e93\u7684\u4f1a\u8bdd\u3002\u8fde\u63a5\u5bf9\u8c61\u652f\u6301\u4e0b\u8868\u6240\u793a\u7684\u65b9\u6cd5\u3002 $$ \\begin{array}{ll} & \\text {\u88683 \u8fde\u63a5\u5bf9\u8c61\u7684\u65b9\u6cd5 } & \\\\ \\hline \\text { \u65b9 \u6cd5 \u540d} & \\text {\u63cf \u8ff0 } \\\\ \\hline \\text { close() } & \\text{\u5173\u95ed\u8fde\u63a5\u5bf9\u8c61\u3002\u4e4b\u540e, \u8fde\u63a5\u5bf9\u8c61\u53ca\u5176\u6e38\u6807\u5c06\u4e0d\u53ef\u7528} \\\\ \\text { commit() } & \\text{\u63d0\u4ea4\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1, \u5982\u679c\u652f\u6301\u7684\u8bdd\uff1b\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a} \\\\ \\text { rollback() } & \\text {\u56de\u6eda\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1\uff08\u53ef\u80fd\u4e0d\u53ef\u7528\uff09} \\\\ \\text { cursor() } & \\text {\u8fd4\u56de\u8fde\u63a5\u7684\u6e38\u6807\u5bf9\u8c61} \\\\ \\hline\\end{array} $$ \u65b9\u6cd5 rollback \u53ef\u80fd\u4e0d\u53ef\u7528\uff0c\u56e0\u4e3a\u5e76\u975e\u6240\u6709\u7684\u6570\u636e\u5e93\u90fd\u652f\u6301\u4e8b\u52a1\uff08\u4e8b\u52a1\u5176\u5b9e\u5c31\u662f\u4e00\u7cfb\u5217\u64cd\u4f5c\uff09\u3002\u53ef\u7528\u65f6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u64a4\u9500\u6240\u6709\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1\u3002 \u65b9\u6cd5 commit \u603b\u662f\u53ef\u7528\u7684\uff0c\u4f46\u5982\u679c\u6570\u636e\u5e93\u4e0d\u652f\u6301\u4e8b\u52a1\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u5982\u679c\u8fd8\u6709\u672a\u63d0\u4ea4\u7684\u4e8b\u52a1\uff0c\u5c06\u9690\u5f0f\u5730\u56de\u6eda\u5b83\u4eec\u2014\u2014\u4f46\u4ec5\u5f53\u6570\u636e\u5e93\u652f\u6301\u56de\u6eda\u65f6\u624d\u5982\u6b64\uff01\u5982\u679c\u4f60\u4e0d\u60f3\u4f9d\u8d56\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5e94\u5728\u5173\u95ed\u8fde\u63a5\u524d\u63d0\u4ea4\u3002\u53ea\u8981\u63d0\u4ea4\u4e86\u6240\u6709\u7684\u4e8b\u52a1\uff0c\u5c31\u65e0\u9700\u64cd\u5fc3\u5173\u95ed\u8fde\u63a5\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u4f5c\u4e3a\u5783\u573e\u88ab\u6536\u96c6\u65f6\uff0c\u8fde\u63a5\u4f1a\u81ea\u52a8\u5173\u95ed\u3002\u7136\u800c\uff0c\u4e3a\u5b89\u5168\u8d77\u89c1\uff0c\u8fd8\u662f\u8c03\u7528 close \u5427\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u4e0d\u9700\u8981\u957f\u65f6\u95f4\u6572\u51fb\u952e\u76d8\u3002 \u8bf4\u5230\u65b9\u6cd5 cursor \uff0c\u5c31\u5fc5\u987b\u8bf4\u8bf4\u53e6\u4e00\u4e2a\u4e3b\u9898\uff1a \u6e38\u6807\u5bf9\u8c61 \u3002 \u4f60\u4f7f\u7528\u6e38\u6807\u6765\u6267\u884cSQL\u67e5\u8be2\u548c\u67e5\u770b\u7ed3\u679c\u3002 \u6e38\u6807\u652f\u6301\u7684\u65b9\u6cd5\u6bd4\u8fde\u63a5\u591a\uff0c\u5728\u7a0b\u5e8f\u4e2d\u7684\u5730\u4f4d\u4e5f\u53ef\u80fd\u91cd\u8981\u5f97\u591a\u3002\u88684\u6982\u8ff0\u4e86\u6e38\u6807\u7684\u65b9\u6cd5\uff0c\u800c\u88685\u6982\u8ff0\u4e86\u6e38\u6807\u7684\u5c5e\u6027\u3002 $$ \\begin{array}{ll} & \\text { \u88684 \u6e38\u6807\u5bf9\u8c61\u7684\u65b9\u6cd5 } \\\\ \\hline \\text {\u540d \u79f0} & \\text {\u63cf \u8ff0} \\\\ \\hline \\text { callproc(name[, params]) } & \\text { \u4f7f\u7528\u6307\u5b9a\u7684\u53c2\u6570\u8c03\u7528\u6307\u5b9a\u7684\u6570\u636e\u5e93\u8fc7\u7a0b }(\\text { \u53ef\u9009 }) \\\\ \\text { close() } & \\text { \u5173\u95ed\u6e38\u6807\u3002\u5173\u95ed\u540e\u6e38\u6807\u4e0d\u53ef\u7528 } \\\\ \\text { execute(oper[, params]) } & \\text { \u6267\u884c\u4e00\u4e2aSQL\u64cd\u4f5c\u4e00\u4e00\u53ef\u80fd\u6307\u5b9a\u53c2\u6570 } \\\\ \\text { executemany(oper, pseq) } & \\text { \u6267\u884c\u6307\u5b9a\u7684SQL\u64cd\u4f5c\u591a\u6b21, \u6bcf\u6b21\u90fd\u5e8f\u5217\u4e2d\u7684\u4e00\u7ec4\u53c2\u6570 } \\\\ \\text { fetchone() } & \\text { \u4ee5\u5e8f\u5217\u7684\u65b9\u5f0f\u53d6\u56de\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u4e0b\u4e00\u884c } ; \\text { \u5982\u679c\u6ca1\u6709\u66f4\u591a\u7684\u884c, \u5c31\u8fd4\u56deNone } \\\\ \\text { fetchmany([size]) } & \\text { \u53d6\u56de\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u591a\u884c, \u5176\u4e2d\u53c2\u6570size\u7684\u503c\u9ed8\u8ba4\u4e3aarraysize } \\\\ \\text { fetchall() } & \\text { \u4ee5\u5e8f\u5217\u7684\u5e8f\u5217\u7684\u65b9\u5f0f\u53d6\u56de\u4f59\u4e0b\u7684\u6240\u6709\u884c } \\\\ \\text { nextset() } & \\text { \u8df3\u5230\u4e0b\u4e00\u4e2a\u7ed3\u679c\u96c6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u53ef\u9009\u7684 } \\\\ \\text { setinputsizes(sizes) } & \\text { \u7528\u4e8e\u4e3a\u53c2\u6570\u9876\u5b9a\u4e49\u5185\u5b58\u533a\u57df } \\\\ \\text { setoutputsize(size[, col]) } & \\text { \u4e3a\u53d6\u56de\u5927\u91cf\u6570\u636e\u800c\u8bbe\u7f6e\u7f13\u51b2\u533a\u957f\u5ea6 } \\\\ \\hline \\end{array} $$ $$ \\begin{array}{cc} &\\hspace{-7em} \\text{\u88685 \u6e38\u6807\u5bf9\u8c61\u7684\u5c5e\u6027 }\\\\ \\hline \\text { \u540d \u79f0 } & \\text { \u63cf \u8ff0 } \\\\ \\hline \\text { description } & \\text { \u7531\u7ed3\u679c\u5217\u63cf\u8ff0\u7ec4\u6210\u7684\u5e8f\u5217 (\u53ea\u8bfb }) & \\\\ \\text { rowcount } & \\text { \u7ed3\u679c\u5305\u542b\u7684\u884c\u6570 ( } \\text { \u53ea\u8bfb }) & \\\\ \\text { arraysize } & \\text { fetchmany\u8fd4\u56de\u7684\u884c\u6570, \u9ed8\u8ba4\u4e3a1 } & \\\\ \\hline \\end{array} $$","title":"\u8fde\u63a5\u548c\u6e38\u6807"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.1.DBAPI.html#_4","text":"\u5bf9\u4e8e\u63d2\u5165\u5230\u67d0\u4e9b\u7c7b\u578b\u7684\u5217\u4e2d\u7684\u503c\uff0c\u5e95\u5c42SQL\u6570\u636e\u5e93\u53ef\u80fd\u8981\u6c42\u5b83\u4eec\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\u3002\u4e3a\u4e86\u80fd\u591f\u4e0e\u5e95\u5c42SQL\u6570\u636e\u5e93\u6b63\u786e\u5730\u4e92\u64cd\u4f5c\uff0cDB API\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6784\u9020\u51fd\u6570\u548c\u5e38\u91cf\uff08\u5355\u4f8b\uff09\uff0c\u7528\u4e8e\u63d0\u4f9b\u7279\u6b8a\u7684\u7c7b\u578b\u548c\u503c\u3002\u4f8b\u5982\uff0c\u8981\u5728\u6570\u636e\u5e93\u4e2d\u6dfb\u52a0\u65e5\u671f\uff0c\u5e94\u4f7f\u7528\u76f8\u5e94\u6570\u636e\u5e93\u8fde\u63a5\u6a21\u5757\u4e2d\u7684\u6784\u9020\u51fd\u6570 Date \u6765\u521b\u5efa\u5b83\uff0c\u8fd9\u8ba9\u8fde\u63a5\u6a21\u5757\u80fd\u591f\u5728\u5e55\u540e\u6267\u884c\u5fc5\u8981\u7684\u8f6c\u6362\u3002\u6bcf\u4e2a\u6a21\u5757\u90fd\u5fc5\u987b\u5b9e\u73b0\u88686\u6240\u793a\u7684\u6784\u9020\u51fd\u6570\u548c\u7279\u6b8a\u503c\u3002\u6709\u4e9b\u6a21\u5757\u53ef\u80fd\u6ca1\u6709\u5b8c\u5168\u9075\u5b88\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0csqlite3 \u5c31\u6ca1\u6709\u5bfc\u51fa\u88686\u4e2d\u7279\u6b8a\u503c\uff08\u4ece STRING \u5230 ROWID\uff09\u3002 $$ \\begin{array}{ll} & \\hspace{-5em} \\text{ \u88686 DB API\u6784\u9020\u51fd\u6570\u548c\u7279\u6b8a\u503c } \\\\ \\hline \\text { \u540d \u79f0 } & \\text { \u63cf \u8ff0} \\\\ \\hline \\text { Date( year, month, day }) \\\\ \\text { Time( hour, minute, second) } & \\text { \u521b\u5efa\u5305\u542b\u65e5\u671f\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { Timestamp( y, mon, d, h, min, s} ) & \\text { \u521b\u5efa\u542b\u65f6\u95f4\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { DateFromTicks( ticks ) } & \\text { \u6839\u636e\u4ece\u65b0\u7eaa\u5143\u5f00\u59cb\u8fc7\u53bb\u7684\u79d2\u6570\u521b\u5efa\u5305\u542b\u65e5\u671f\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { TimeFromTicks( ticks ) } & \\text { \u6839\u636e\u4ece\u65b0\u7eaa\u5143\u5f00\u59cb\u8fc7\u53bb\u7684\u79d2\u6570\u521b\u5efa\u5305\u542b\u65f6\u95f4\u503c\u7684\u5bf9\u8c61 } \\\\ \\text { imestampFromTicks( ticks ) } & \\text { \u6839\u636e\u4ece\u65b0\u7eaa\u5143\u5f00\u59cb\u8fc7\u53bb\u7684\u79d2\u6570\u521b\u5efa\u5305\u542b\u65f6\u95f4\u6233\u7684\u5bf9\u8c61 } \\\\ \\text { Binary( string ) } & \\text { \u521b\u5efa\u5305\u542b\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u503c\u7684\u5bf9\u8c61 } & \\\\ \\text { STRING } & \\text { \u63cf\u8ff0\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u5217 }(\\text { \u5982CHAR }) & \\\\ \\text { BINARY } & \\text { \u63cf\u8ff0\u4e8c\u8fdb\u5236\u5217 }(\\text { \u5982LONG\u6216RAW }) & \\\\ \\text { NUMBER } & \\text { \u63cf\u8ff0\u6570\u5b57\u5217 } \\\\ \\text { DATETIME } & \\text { \u63cf\u8ff0\u65e5\u671f/\u65f6\u95f4\u5217 } \\\\ \\text { ROWID } & \\text { \u63cf\u8ff0\u884cID\u5217 } \\\\ \\hline \\end{array} $$","title":"\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.2.PostgreSQL.html","text":"from toolkit import H import psycopg2 create a connection # Connect to an existing database # key parameter format conn = psycopg2 . connect ( host = \"localhost\" , port = \"5433\" , user = \"postgres\" , password = password , database = \"study\" ) # DATABASE_URL format db_url = \"postgresql://username:password@host:port/database_name\" conn = psycopg2 . connect ( db_url ) # another string format string = \"dbname=postgres user=postgres password=9464275 port=5433\" conn = psycopg2 . connect ( string ) open a cursor to execute SQL # Open a cursor to perform database operations cur = conn . cursor () # Execute a command cur . execute ( \"SELECT version();\" ) # cur.executemany() cur . fetchall () # fetchone # fetchmany [('PostgreSQL 12.0, compiled by Visual C++ build 1914, 64-bit',)] cur . execute ( \"SELECT current_user;\" ) cur . fetchall () [('postgres',)] cur . execute ( \"SELECT * FROM product;\" ) cur . fetchall () [('0001', 'T\u6064', '\u8863\u670d', 1000, 500, datetime.date(2009, 9, 20)), ('0002', '\u6253\u5b54\u5668', '\u529e\u516c\u7528\u54c1', 500, 320, datetime.date(2009, 9, 11)), ('0003', '\u8fd0\u52a8T\u6064', '\u8863\u670d', 4000, 2800, None), ('0004', '\u83dc\u5200', '\u53a8\u623f\u7528\u5177', 3000, 2800, datetime.date(2009, 9, 20)), ('0005', '\u9ad8\u538b\u9505', '\u53a8\u623f\u7528\u5177', 6800, 5000, datetime.date(2009, 1, 15)), ('0006', '\u53c9\u5b50', '\u53a8\u623f\u7528\u5177', 500, None, datetime.date(2009, 9, 20)), ('0007', '\u64e6\u83dc\u677f', '\u53a8\u623f\u7528\u5177', 880, 790, datetime.date(2008, 4, 28)), ('0008', '\u5706\u73e0\u7b14', '\u529e\u516c\u7528\u54c1', 100, None, datetime.date(2009, 11, 11)), ('0009', '\u5e73\u677f\u7535\u8111', '\u529e\u516c\u7528\u54c1', 4000, 2500, datetime.date(2009, 11, 12)), ('0010', 'kindle', '\u529e\u516c\u7528\u54c1', 500, 400, datetime.date(2009, 11, 15)), ('0011', 'ipad', '\u529e\u516c\u7528\u54c1', 6500, 4000, datetime.date(2009, 12, 5))] commit and close connection # Make the changes to the database persistent conn . commit () # Close communication with the database cur . close () conn . close ()","title":"15.2.PostgreSQL"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.3.MSSQL.html","text":"import pymssql Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.08.07 pymssql version: 2.1.4 create a connection \u4f3c\u4e4e pymssql \u8fd9\u4e2a\u5e93\u4e0d\u80fd\u4f7f\u7528DATABASE_URL format\u3002 # Connect to an existing database try : # DATABASE_URL format db_url = f \"mssql:// { user } : { password } @ { host } : { port } / { database } \" conn = pymssql . connect ( db_url ) except Exception as e : # key parameter format conn = pymssql . connect ( host = host , port = port , user = user , password = password , database = database ) open a cursor to execute SQL # Open a cursor to perform database operations cur = conn . cursor () # Execute a command cur . execute ( \"SELECT @@version\" ) # cur.executemany() cur . fetchall () # fetchone # fetchmany [('Microsoft SQL Server 2016 (RTM) - 13.0.1601.5 (X64) \\n\\tApr 29 2016 23:23:58 \\n\\tCopyright (c) Microsoft Corporation\\n\\tDeveloper Edition (64-bit) on Windows Server 2016 Datacenter 6.3 <X64> (Build 14393: ) (Hypervisor)\\n',)] cur . execute ( \"SELECT current_user;\" ) cur . fetchall () [('dbo',)] commit and close connection # Make the changes to the database persistent conn . commit () # Close communication with the database cur . close () conn . close ()","title":"15.3.MSSQL"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/15.4.SQLAlchemy.html","text":"# -*- coding: utf-8 -*- \"\"\" Created on Tue May 26 20:30:42 2020 @author: Android \"\"\" import sqlalchemy sqlalchemy . __version__ from toolkit import H h = H ( sqlalchemy ) d = h . dicts from sqlalchemy import create_engine engine = create_engine ( 'sqlite:///:memory:' , echo = True ) from sqlalchemy.ext.declarative import declarative_base Base = declarative_base () from sqlalchemy import Column , Integer , String class User ( Base ): __tablename__ = 'users' __table_args__ = { 'extend_existing' : True } id = Column ( Integer , primary_key = True ) name = Column ( String ) fullname = Column ( String ) nickname = Column ( String ) def __repr__ ( self ): return \"<User(name=' %s ', fullname=' %s ', nickname=' %s ')>\" % ( self . name , self . fullname , self . nickname ) import pprint User . __table__ Base . metadata . create_all ( engine ) from sqlalchemy import Sequence class User ( Base ): __tablename__ = 'users' __table_args__ = { 'extend_existing' : True } id = Column ( Integer , Sequence ( 'user_id_seq' ), primary_key = True ) name = Column ( String ( 50 )) fullname = Column ( String ( 50 )) nickname = Column ( String ( 50 )) def __repr__ ( self ): return \"<User(name=' %s ', fullname=' %s ', nickname=' %s ')>\" % ( self . name , self . fullname , self . nickname ) ed_user = User ( name = 'ed' , fullname = 'Ed Jones' , nickname = 'edsnickname' ) ed_user . name ed_user . nickname str ( ed_user . id ) from sqlalchemy.orm import sessionmaker Session = sessionmaker ( bind = engine ) session = Session () ed_user = User ( name = 'ed' , fullname = 'Ed Jones' , nickname = 'edsnickname' ) session . add ( ed_user ) our_user = session . query ( User ) . filter_by ( name = 'ed' ) . first () our_user import time for i in range ( 10 ): time . sleep ( 0.2 ) print ( \" \\r Loading... \" + str ( i ), end = \"\" ) import genanki dir ( genanki ) from toolkit import H h = H ( genanki ) d = h . dicts module 2020-06-02 13:03:22,529 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1 2020-06-02 13:03:22,533 INFO sqlalchemy.engine.base.Engine () 2020-06-02 13:03:22,536 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1 2020-06-02 13:03:22,538 INFO sqlalchemy.engine.base.Engine () 2020-06-02 13:03:22,540 INFO sqlalchemy.engine.base.Engine PRAGMA main.table_info(\"users\") 2020-06-02 13:03:22,542 INFO sqlalchemy.engine.base.Engine () 2020-06-02 13:03:22,545 INFO sqlalchemy.engine.base.Engine PRAGMA temp.table_info(\"users\") 2020-06-02 13:03:22,547 INFO sqlalchemy.engine.base.Engine () 2020-06-02 13:03:22,550 INFO sqlalchemy.engine.base.Engine CREATE TABLE users ( id INTEGER NOT NULL, name VARCHAR, fullname VARCHAR, nickname VARCHAR, PRIMARY KEY (id) ) 2020-06-02 13:03:22,552 INFO sqlalchemy.engine.base.Engine () 2020-06-02 13:03:22,555 INFO sqlalchemy.engine.base.Engine COMMIT 2020-06-02 13:03:22,562 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-06-02 13:03:22,564 INFO sqlalchemy.engine.base.Engine INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?) 2020-06-02 13:03:22,566 INFO sqlalchemy.engine.base.Engine ('ed', 'Ed Jones', 'edsnickname') 2020-06-02 13:03:22,568 INFO sqlalchemy.engine.base.Engine SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.nickname AS users_nickname FROM users WHERE users.name = ? LIMIT ? OFFSET ? 2020-06-02 13:03:22,570 INFO sqlalchemy.engine.base.Engine ('ed', 1, 0) C:\\ProgramData\\Anaconda3\\lib\\site- packages\\sqlalchemy\\ext\\declarative\\clsregistry.py:129: SAWarning: This declarative base already contains a class with the same class name and module name as __main__.User, and will be replaced in the string-lookup table. % (item.__module__, item.__name__) Loading... 0 Loading... 1 Loading... 2 Loading... 3 Loading... 4 Loading... 5 Loading... 6 Loading... 7 Loading... 8 Loading... 9 ---------------------------------------------------------------------------ModuleNotFoundError Traceback (most recent call last)<ipython-input-1-bf4fe48533c7> in <module> 87 88 ---> 89 import genanki 90 91 dir(genanki) ModuleNotFoundError: No module named 'genanki'","title":"15.4.SQLAlchemy"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.2.PDF.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.09.17 pdfminer version: 20191125 PDF \u6587\u6863\u867d\u7136\u7ecf\u5e38\u88ab\u7528\u5230\uff0c\u4f46\u662f PDF \u53ef\u4ee5\u8bf4\u662f\u90aa\u6076\u7684\uff0c\u56e0\u4e3a PDF \u683c\u5f0f\u5341\u5206\u590d\u6742\uff0c\u60f3\u901a\u8fc7\u7f16\u7a0b\u7684\u65b9\u5f0f\u7cbe\u786e\u5730\u63d0\u53d6PDF\u6587\u6863\u4e2d\u7684\u4fe1\u606f\u76f8\u5f53\u56f0\u96be\u3002\u7528\u4e8e\u63d0\u53d6PDF\u6587\u6863\u4fe1\u606f\u7684Python\u5e93\u6709\u5f88\u591a\uff0c\u4f46\u662f\u5927\u90e8\u5206\u7684\u5e93\u73b0\u5728\u90fd\u4e0d\u600e\u4e48\u66f4\u65b0\u4e86\uff0c\u5e38\u7528\u7684\u5e93\u6709 PyPDF2 \u3001 pdfminer \u3001 pdfminer3k \u7b49\u3002 pdfminer \u7684\u6700\u65b0\u7248\u672c\u66f4\u65b0\u65f6\u95f4\u57282019\u5e74\u3002 pyPdf \u5305\u65e9\u57282005\u5e74\u5c31\u53d1\u5e03\u4e86\uff0c\u5e94\u8be5\u662f\u6700\u65e9\uff08\u8f83\u65e9\uff09\u7528\u4e8e\u89e3\u6790PDF\u7684Python\u5e93\uff0c \u4f46\u662f pyPdf \u57282010\u5e74\u5c31\u505c\u6b62\u66f4\u65b0\uff0c\u4e14\u4e0d\u652f\u6301Python3\u3002 \u5728 pyPDF \u505c\u6b62\u66f4\u65b0\u540e\u7684\u4e00\u5e74\u5de6\u53f3\uff0c\u7531 Phasit \u516c\u53f8\u5728 pyPdf \u7684\u57fa\u7840\u4e0a\u5f00\u53d1\u4e86 PyPDF2 \uff0c \u8be5\u4ee3\u7801\u88ab\u8bbe\u8ba1\u4e3a\u4e0e pyPdf \u517c\u5bb9\uff0c\u6700\u540e\u4e00\u4e2a\u7248\u672c\u53d1\u5e03\u4e8e2016\u5e74\u3002 \u7136\u540e\u57282018\u5e74\u51fa\u73b0\u4e86\u540d\u4e3a PyPDF3 \u7684\u5e93\uff0c \u5728\u66f4\u65b0\u4e86\u51e0\u4e2a\u7248\u672c\u4e4b\u540e\uff0c PyPDF3 \u9879\u76ee\u88ab\u91cd\u547d\u540d\u4e3a PyPDF4 \u3002 \u8fd9\u4e9b\u9879\u76ee\u51e0\u4e4e\u90fd\u505a\u7740\u76f8\u540c\u7684\u4e8b\u60c5\uff0c\u4f46\u662f PyPDF2+ \u7684\u9879\u76ee\u6dfb\u52a0\u4e86Python3\u7684\u652f\u6301\u3002 \u8fd8\u6709\u4e00\u4e2a\u4ece\u539f\u59cb\u7684 pyPdf \u9879\u76eefork\u51fa\u6765\u7684 pyPdf for Python 3 \u9879\u76ee\uff0c\u4f46\u5df2\u592d\u6298\u591a\u5e74\u3002 pdfminer pdfminer \u662f\u4e00\u4e2a\u53ef\u4ee5\u4ecePDF\u6587\u6863\u4e2d\u63d0\u53d6\u4fe1\u606f\u7684\u5de5\u5177\u3002\u4e0e\u5176\u4ed6PDF\u76f8\u5173\u7684\u5de5\u5177\u4e0d\u540c\uff0c\u5b83\u6ce8\u91cd\u7684\u662f\u83b7\u53d6\u548c\u5206\u6790\u6587\u672c\u6570\u636e\uff0c\u6240\u4ee5 pdfminer \u63d0\u53d6PDF\u7684\u8868\u683c\u548c\u56fe\u7247\u7684\u6548\u679c\u90fd\u4e0d\u592a\u597d\u3002 pdfminer \u5141\u8bb8\u4f60\u83b7\u53d6\u67d0\u4e00\u9875\u4e2d\u6587\u672c\u7684\u51c6\u786e\u4f4d\u7f6e\u548c\u4e00\u4e9b\u8bf8\u5982\u5b57\u4f53\u3001\u884c\u6570\u7684\u4fe1\u606f\u3002\u5b83\u5305\u62ec\u4e00\u4e2aPDF\u8f6c\u6362\u5668\uff0c\u53ef\u4ee5\u628aPDF\u6587\u4ef6\u8f6c\u6362\u6210HTML\u7b49\u683c\u5f0f\uff0c\u53ea\u662f\u8f6c\u6362\u540e\u7684\u683c\u5f0f\u6ca1\u773c\u770b\u3002\u5b83\u8fd8\u6709\u4e00\u4e2a\u6269\u5c55\u7684PDF\u89e3\u6790\u5668\uff0c\u53ef\u4ee5\u7528\u4e8e\u9664\u6587\u672c\u5206\u6790\u4ee5\u5916\u7684\u5176\u4ed6\u7528\u9014\u3002 \u7531\u4e8ePDF\u6587\u4ef6\u5177\u6709\u5e9e\u5927\u548c\u590d\u6742\u7684\u7ed3\u6784\uff0c\u5b8c\u6574\u89e3\u6790 PDF \u6587\u4ef6\u5f88\u8d39\u65f6\u95f4\uff0c pdfminer \u91c7\u7528\u4e86\u4e00\u4e2a\u61d2\u60f0\u5206\u6790\u7684\u7b56\u7565\uff0c\u5373\u663e\u5f0f\u6307\u5b9a\u5206\u6790\u5185\u5bb9\u65f6\u624d\u8fdb\u884c\u5206\u6790\uff0c\u5373\u6839\u636e\u9700\u8981\u53ea\u89e3\u6790\u51fa\u6240\u9700\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u8fd9\u4e2a\u56fe\u8868\u793a\u4e86 pdfminer \u5404\u6a21\u5757\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u6a21\u5757\u540d \u8bf4\u660e PDFParser \u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u6570\u636e PDFDocument \u5b58\u50a8\u6587\u6863\u6570\u636e\u7ed3\u6784\u5230\u5185\u5b58\u4e2d PDFPageInterpreter \u89e3\u6790page\u5185\u5bb9 PDFDevice \u628a\u89e3\u6790\u5230\u7684\u5185\u5bb9\u8f6c\u5316\u4e3a\u4f60\u9700\u8981\u7684\u4e1c\u897f PDFResourceManager \u5b58\u50a8\u5171\u4eab\u8d44\u6e90\uff0c\u4f8b\u5982\u5b57\u4f53\u6216\u56fe\u7247\u7b49 \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u7ed9\u51fa\u4e86 pdfminer \u89e3\u6790 PDF \u6587\u6863\u7684\u57fa\u672c\u65b9\u6cd5\u3002\u9996\u5148\u6253\u5f00 PDF \u6587\u4ef6\uff0c\u521b\u5efa\u89e3\u6790\u5bf9\u8c61\uff0c\u5b58\u50a8\u6587\u6863\u7ed3\u6784\uff0c\u521b\u5efa\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u4ee5\u53ca\u5171\u4eab\u8d44\u6e90\uff0c\u7136\u540e\u518d\u521b\u5efa device \u5bf9\u8c61\uff0c\u6700\u540e\u518d\u521b\u5efa\u6587\u6863\u89e3\u6790\u5bf9\u8c61\uff0c\u5e76\u5904\u7406\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u9875\u3002 from pdfminer.pdfparser import PDFParser from pdfminer.pdfdocument import PDFDocument from pdfminer.pdfdevice import PDFDevice , PDFTextDevice from pdfminer.pdfpage import PDFPage , PDFTextExtractionNotAllowed from pdfminer.pdfinterp import PDFResourceManager from pdfminer.pdfinterp import PDFPageInterpreter pdf_path = \"datasets/file/\u6bd5\u4e1a\u8bbe\u8ba1-\u9875\u9762-14.pdf\" with open ( pdf_path , \"rb\" ) as f : # Create a PDF parser object associated with the file object. parser = PDFParser ( f ) # Create a PDF document object associated with the parser object. document = PDFDocument ( parser = parser , password = \"\" ) # Check if the PDF is text-based # pdfminer is not working for scanned PDF if not document . is_extractable : raise PDFTextExtractionNotAllowed # Create a PDF resource manager object that stores shared resources. pdf_manager = PDFResourceManager () # Create a PDF device object. device = PDFDevice ( pdf_manager ) # device = PDFTextDevice(pdf_manager) # Create a PDF interpreter object. interpreter = PDFPageInterpreter ( pdf_manager , device ) # Process each page contained in the document. for page in PDFPage . create_pages ( document ): interpreter . process_page ( page ) \u8fd9\u662f\u5b98\u65b9\u6587\u6863\u7ed9\u51fa\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u4e0d\u8fc7\u8bf4\u5b9e\u8bdd\uff0c\u6211\u4e0d\u662f\u5f88\u660e\u767d\u8fd9\u6bb5\u4ee3\u7801\u5728\u5e72\u561b\uff0c\u56e0\u4e3a\u4e0a\u9762\u7684\u4ee3\u7801\u597d\u50cf\u6ca1\u529e\u6cd5\u62ff\u5230 PDFPageInterpreter \u89e3\u6790\u5f97\u5230\u7684\u7ed3\u679c\u3002\u53ef\u80fd\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\u4ec5\u4ec5\u662f\u5c55\u793a pdfminer \u5904\u7406PDF\u7684\u6d41\u7a0b\u3002 \u4e0b\u9762\u662f\u83b7\u53d6\u9875\u9762\u89e3\u6790\u7ed3\u679c\u7684\u793a\u4f8b\u4ee3\u7801\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528 PDFDevice \u5bf9\u8c61\u7684 get_result \u65b9\u6cd5\u53bb\u83b7\u53d6\u89e3\u6790\u540e\u5f97\u5230\u7684\u5bf9\u8c61\u3002\u7b2c\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\u7684 PDFDevice \u5bf9\u8c61\u5e94\u8be5\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\uff08\u53ea\u662f\u58f0\u660e\u63a5\u53e3\uff0c\u6ca1\u6709\u5177\u4f53\u5b9e\u73b0\uff09\uff0c\u662f\u6ca1\u6709 get_result \u65b9\u6cd5\u7684\uff0c\u6240\u4ee5\u7b2c\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\u6ca1\u529e\u6cd5\u53d6\u5f97\u89e3\u6790\u7ed3\u679c\u3002 PDFPageAggregator \u662f PDFDevice \u7684\u5b50\u7c7b\uff0c\u5177\u6709 get_result \u65b9\u6cd5\u3002 from pdfminer.pdfparser import PDFParser from pdfminer.pdfdocument import PDFDocument from pdfminer.pdfpage import PDFPage , PDFTextExtractionNotAllowed from pdfminer.converter import PDFPageAggregator from pdfminer.pdfinterp import PDFResourceManager from pdfminer.layout import LAParams , LTTextBox , LTTextLine pdf_path = \"datasets/file/\u6bd5\u4e1a\u8bbe\u8ba1-\u9875\u9762-14.pdf\" with open ( pdf_path , \"rb\" ) as f : # Create a PDF parser object associated with the file object. parser = PDFParser ( f ) # Create a PDF document object associated with the parser object. document = PDFDocument ( parser = parser , password = \"\" ) if not document . is_extractable : raise PDFTextExtractionNotAllowed # Create a PDF resource manager object that stores shared resources. pdf_manager = PDFResourceManager () # Create a PDF device object. laparams = LAParams () device = PDFPageAggregator ( pdf_manager , laparams = laparams ) # Create a PDF interpreter object. interpreter = PDFPageInterpreter ( pdf_manager , device ) # Process each page contained in the document. for page in PDFPage . create_pages ( document ): interpreter . process_page ( page ) # receive the LTPage object for the page. layout = device . get_result () for num , element in enumerate ( layout ): if isinstance ( element , LTTextBox ) or isinstance ( element , LTTextLine ): print ( element . get_text ()) \u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66\uff08\u6df1\u5733\uff09\u672c\u79d1\u6bd5\u4e1a\u8bbe\u8ba1\uff08\u8bba\u6587\uff09 \u951a\u6846\u7684\u6a21\u578b CornerNet\u3002CornerNet \u4f7f\u7528\u4e00\u4e2a\u5377\u79ef\u7f51\u7edc\u751f\u6210\u4e24\u7ec4\u7279\u5f81\u56fe\uff0c\u4e00\u4e2a\u8d1f\u8d23 \u9884\u6d4b\u5de6\u4e0a\u89d2\uff0c\u53e6\u4e00\u7ec4\u8d1f\u8d23\u9884\u6d4b\u53f3\u4e0b\u89d2\uff0c\u4ee5\u4e24\u4e2a\u5173\u952e\u70b9\u751f\u6210\u5019\u9009\u6846\u3002CornerNet \u8fd8\u5f15 \u5165\u4e86\u4e00\u79cd\u65b0\u578b\u7684 corner pooling \u5e2e\u52a9\u7f51\u7edc\u66f4\u597d\u5730\u5b9a\u4f4d\u8fb9\u754c\u6846\u7684\u89d2\u70b9\u3002\u5355\u9636\u6bb5\u6a21\u578b\u7ed3 \u6784\u5982\u56fe 1-8 \u6240\u793a\uff1a \u56fe 1-8 \u5355\u9636\u6bb5\u68c0\u6d4b\u6a21\u578b[14] 1.2.2 \u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7814\u7a76\u73b0\u72b6 \u76ee\u524d\u5b66\u754c\u8fd8\u6ca1\u6709\u7ed9\u5c0f\u76ee\u6807\u4e00\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u5c0f\u548c\u5927\u662f\u4e00\u4e2a\u76f8\u5bf9\u6982\u5ff5\u3002\u540c\u4e00 \u4e2a\u7269\u4f53\u5728\u76f8\u673a\u7684\u8fdc\u5904\u548c\u8fd1\u5904\u62cd\u6444\u5448\u73b0\u7684\u5927\u5c0f\u7ed3\u679c\u662f\u4e0d\u540c\u7684\u3002\u56fe\u7247\u4e2d\u7684\u5c0f\u76ee\u6807\u53ef\u80fd \u662f\u7269\u4f53\u81ea\u8eab\u7684\u7269\u7406\u5c3a\u5bf8\u8fc7\u5c0f\u6216\u8005\u662f\u62cd\u6444\u8ddd\u79bb\u8f83\u8fdc\u5bfc\u81f4\u7684\u3002\u867d\u7136\u5c0f\u76ee\u6807\u7684\u5224\u5b9a\u6ca1\u6709 \u4e00\u4e2a\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u4f46\u662f\u5728\u7279\u5b9a\u7684\u6570\u636e\u96c6\u5185\uff0c\u5c0f\u76ee\u6807\u53ef\u4ee5\u4eba\u4e3a\u5730\u7ed9\u51fa\u51c6\u786e\u5b9a\u4e49\u3002\u6bd4 \u5982 MS COCO \u6570\u636e\u96c6\u5185\u89c4\u5b9a\u5c3a\u5bf8\u5728 32 32\uf0b4 \u4e4b\u5185\u7684\u76ee\u6807\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5c0f\u76ee\u6807\u3002\u5982\u8868 1-1 \u6240\u793a\uff1a \u8868 1-1 COCO \u6570\u636e\u96c6\u5bf9\u76ee\u6807\u5c3a\u5ea6\u7684\u5b9a\u4e49 \u5c0f\u5c3a\u5ea6\u76ee\u6807 \u4e2d\u5c3a\u5ea6\u76ee\u6807 \u5927\u5c3a\u5ea6\u76ee\u6807 \u6700\u5c0f\u9762\u79ef 0 0\uf0b4 32 32\uf0b4 96 96\uf0b4 \u6700\u5927\u9762\u79ef 32 32\uf0b4 96 96\uf0b4 \uf0a5\uf0b4 \uf0a5 \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[17]\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9\u603b\u4f53\u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 - 8 - \u4e00\u4e2a\u5e03\u5c40\u5206\u6790\u5668\uff08layout analyzer\uff09\u4e3aPDF\u7684\u6bcf\u4e00\u9875\u8fd4\u56de\u4e00\u4e2a LTPage \u5bf9\u8c61\u3002\u8fd9\u4e2a LTPage \u5bf9\u8c61\u5305\u542b\u4f4d\u4e8e\u9875\u9762\u5185\u7684\u5b50\u5bf9\u8c61\uff0c\u5f62\u6210\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97PDF\u4e4b\u4e2d\u7684\u6587\u5b57\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8fed\u4ee3 LTPage \u5bf9\u8c61\u5305\u542b\u7684\u5b50\u5bf9\u8c61\uff0c\u5224\u65ad\u5b50\u5bf9\u8c61\u662f\u5426\u4e3a LTTextBox \u6216 LTTextLine \u5bf9\u8c61\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5219\u8c03\u7528\u5b50\u5bf9\u8c61\u7684 get_text() \u65b9\u6cd5\u83b7\u53d6\u6587\u5b57\u3002 \u4e0b\u9762\u7684\u8868\u683c\u662f\u5404\u5bf9\u8c61\u7684\u5177\u4f53\u8bf4\u660e\uff1a \u5bf9\u8c61\u540d \u5bf9\u8c61\u8bf4\u660e \u5907\u6ce8 LTPage \u4ee3\u8868\u4e00\u4e2a\u5b8c\u6574\u7684\u9875\u9762\uff0c\u53ef\u4ee5\u5305\u542b\u5b50\u5bf9\u8c61 \u4f8b\u5982\uff1a LTTextBox , LTFigure , LTImage , LTRect , LTCurve \u548c LTLine LTTextBox \u5b83\u5305\u542b LTTextLine \u5bf9\u8c61\u7684\u5217\u8868\uff0c\u4ee3\u8868\u4e00\u7ec4\u88ab\u5305\u542b\u5728\u77e9\u5f62\u533a\u57df\u4e2d\u7684\u6587\u672c \u6ce8\u610f\uff1a\u8be5box\u662f\u6839\u636e\u51e0\u4f55\u5b66\u5206\u6790\u5f97\u5230\u7684\uff0c\u5e76\u4e0d\u4e00\u5b9a\u51c6\u786e\u5730\u8868\u73b0\u4e3a\u8be5\u6587\u672c\u7684\u903b\u8f91\u8303\u56f4\uff0cget_text()\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u6587\u672c\u5185\u5bb9 LTTextLine \u5305\u542b\u4e00\u4e2a LTChar \u5bf9\u8c61\u7684\u5217\u8868\uff0c\u8868\u73b0\u4e3a\u5355\u884c\u6587\u672c \u5b57\u7b26\u8868\u73b0\u4e3a\u4e00\u884c\u6216\u4e00\u5217\uff0c\u53d6\u51b3\u4e8e\u6587\u672c\u4e66\u5199\u65b9\u5f0f\uff0cget_text()\u65b9\u6cd5\u8fd4\u56de\u6587\u672c\u5185\u5bb9 LTChar \u8868\u793a\u4e00\u4e2a\u5728\u6587\u672c\u4e2d\u7684\u771f\u5b9e\u7684\u5b57\u6bcd\uff0c\u4f5c\u4e3a\u4e00\u4e2aunicode\u5b57\u7b26\u4e32 LTChar \u5bf9\u8c61\u6709\u771f\u5b9e\u7684\u5206\u9694\u7b26 LTAnno \u8868\u793a\u4e00\u4e2a\u5728\u6587\u672c\u4e2d\u7684\u771f\u5b9e\u7684\u5b57\u6bcd\uff0c\u4f5c\u4e3a\u4e00\u4e2aunicode\u5b57\u7b26\u4e32 LTAnno \u5bf9\u8c61\u6ca1\u6709\uff0c\u662f\u865a\u62df\u5206\u9694\u7b26\uff0c\u6309\u7167\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5e03\u5c40\u5206\u6790\u5668\u63d2\u5165\u865a\u62df\u5206\u9694\u7b26 LTFigure \u8868\u793a\u4e00\u4e2a\u88ab PDF Form \u5bf9\u8c61\u4f7f\u7528\u7684\u533a\u57df pdf form\u9002\u7528\u4e8e\u76ee\u524d\u7684\u56fe\u8868(present figures)\u6216\u8005\u9875\u9762\u4e2d\u690d\u5165\u7684\u53e6\u4e00\u4e2apdf\u6587\u6863\u56fe\u7247\uff0c LTFigure \u5bf9\u8c61\u53ef\u4ee5\u9012\u5f52 LTImage \u8868\u793a\u4e00\u4e2a\u56fe\u5f62\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662fJPEG\u6216\u8005\u5176\u4ed6\u683c\u5f0f LTLine \u8868\u793a\u4e00\u6839\u76f4\u7ebf \u7528\u6765\u5206\u5272\u6587\u672c\u6216\u56fe\u8868(figures) LTRect \u8868\u793a\u4e00\u4e2a\u77e9\u5f62 \u7528\u6765\u6846\u4f4f\u522b\u7684\u56fe\u7247\u6216\u8005\u56fe\u8868 LTCurve \u4ee3\u8868\u4e00\u4e2a\u8d1d\u585e\u5c14\u66f2\u7ebf \u547d\u4ee4\u884c\u5de5\u5177 \u9664\u4e86\u4ee5 import \u7684\u65b9\u5f0f\u4f7f\u7528\uff0c pdfminer \u8fd8\u63d0\u4f9b\u4e86\u4e24\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff1a pdf2txt.py \u548c dumppdf.py : pdf2txt.py: \u4ecePDF\u6587\u4ef6\u4e2d\u63d0\u53d6\u6240\u6709\u6587\u672c\u5185\u5bb9\u3002\u4f46\u4e0d\u80fd\u8bc6\u522b\u753b\u6210\u56fe\u7247\u7684\u6587\u672c\u3002\u5bf9\u4e8e\u52a0\u5bc6\u7684PDF\u9700\u8981\u63d0\u4f9b\u5bc6\u7801\u624d\u80fd\u89e3\u6790\uff0c\u5bf9\u4e8e\u6ca1\u6709\u63d0\u53d6\u6743\u9650\u7684PDF\u6587\u6863\u5219\u65e0\u6cd5\u63d0\u53d6\u6587\u672c\u3002 dumppdf.py: \u628aPDF\u6587\u4ef6\u5185\u5bb9\u53d8\u6210\u51c6XML\u683c\u5f0f\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u4e3b\u8981\u7528\u4e8edebug\uff0c\u4f46\u662f\u5b83\u4e5f\u53ef\u80fd\u7528\u4e8e\u63d0\u53d6\u4e00\u4e9b\u6709\u610f\u4e49\u7684\u5185\u5bb9\uff08\u6bd4\u5982\u56fe\u7247\uff09\u3002 \u4f7f\u7528\u7c7b\u4f3c\u8fd9\u6837\u7684\u547d\u4ee4\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86\uff1a pdf2txt.py [options] files \u3002 \u4e0b\u9762\u662f pdf2txt.py \u7684\u53c2\u6570\u8bf4\u660e\u3002 \u5b9e\u9645\u4f7f\u7528\u7684\u53ef\u9009\u53c2\u6570\u53d6\u51b3\u4e8e\u7528\u6237\u4f7f\u7528\u7684\u7248\u672c\uff0c\u548c\u5b98\u7f51\u4e0a\u7684\u53c2\u6570\u53ef\u80fd\u6709\u51fa\u5165\u3002 -o value \uff1a\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d\uff0c\u5426\u5219\u6807\u51c6\u8f93\u51fa\u3002\u6ca1\u6709 -t \u9009\u9879\u6307\u5b9a\u7c7b\u578b\u65f6\u6839\u636e\u540e\u7f00\u540d\u5224\u5b9a\u7c7b\u578b\u3002 -t value \uff1a\u6307\u5b9a\u8f93\u51fa\u7c7b\u578b\uff1atext (\u9ed8\u8ba4)\u3001html\u3001xml\u3001tag\u3002\u4e0d\u6307\u5b9a\u4f1a\u6839\u636e\u6587\u4ef6\u540d\u540e\u7f00\u5224\u5b9a\u3002 -p value \uff1a\u6307\u5b9a\u8f93\u51fa\u67d0\u4e9b\u9875\uff0c\u4f8b\u5982 1,2,3 \u8f93\u51fa1\u52303\u9875 (\u5206\u9694\u7b26 , \u65e0\u7a7a\u683c!).\u9ed8\u8ba4\u5168\u90e8\u9875\u8f93\u51fa\u3002\u5185\u90e8\u4f1a\u8f6c\u6210\u4e00\u4e2aset\u7c7b\u578b\u5bf9\u8c61\u3002 -m value \uff1a\u6307\u5b9a\u63d0\u53d6\u6700\u591am\u9875\u3002\u9ed8\u8ba4\u63d0\u53d6\u6240\u6709\u3002 -O value \uff1a\u7ed9ImageWriter\u7684\u53c2\u6570,\u8f93\u51fa\u56fe\u7247\u5230\u76f8\u5e94\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4\u4e0d\u8f93\u51fa\u56fe\u7247\u3002 -C \uff1a\u538b\u5236\u4f7f\u7528\u7f13\u5b58\uff0c\u4f1a\u51cf\u5c11\u5185\u5b58\u6d88\u8017\u4f46\u51cf\u6162\u5206\u6790\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u7f13\u5b58\u4f1a\u5728\u591a\u6587\u4ef6\u65f6\u4f7f\u7528\u4e4b\u524d\u7684\u4e00\u4e9b\u4fe1\u606f\uff08\u4f8b\u5982\u683c\u5f0f\u3001\u6587\u5b57\u5927\u5c0f\u7b49\uff09\u4f5c\u4e3a\u672c\u6587\u4ef6\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff0c\u5efa\u8bae\u538b\u5236\u7f13\u5b58\u3002 -P value \uff1a\u6307\u5b9a\u64cd\u4f5cpdf\u9700\u8981\u7684\u5bc6\u7801 -c value \uff1acodec\uff0c\u5c31\u662f\u4f7f\u7528\u7684\u7f16\u7801\uff08\u9ed8\u8ba4 utf-8 \uff09\u3002 -d \uff1a\u589e\u52a0debug\u7ea7\u6570\u3002 \u4ee5\u4e0b\u53c2\u6570\u548c layout\u5206\u6790\u76f8\u5173 (\u5b9e\u9645\u4f7f\u7528 LAParams \u5bf9\u8c61\u8fdb\u884c\u50a8\u5b58\u53c2\u6570\u5e76\u4f20\u9012\u7ed9\u4e3b\u8981\u7684\u51fd\u6570) -n \uff1a\u53d6\u6d88layout\u5206\u6790\u3002 -A \uff1a\u5f3a\u5236\u8fdb\u884c\u6240\u6709\u6587\u672c\u5b57\u7b26\u4e32\u7684layout\u5206\u6790\uff0c\u5305\u62ec\u56fe\u7247\u5185\u7684\u3002 -V \uff1a\u5141\u8bb8\u5782\u76f4\u4e66\u5199\u7684\u7684\u68c0\u6d4b\u3002 -M value \uff1achar_margin\uff0c\u63a7\u5236\u4f5c\u4e3a\u4e00\u4e2atext chunks\u7684\u6700\u5927\u5b57\u7b26\u95f4\u8ddd. \u5c0f\u4e8e\u8be5\u8ddd\u79bb\u4e3a\u5f52\u4e3a\u4e00\u7ec4\u3002\u5b9e\u9645\u8ddd\u79bb\u503c\u53d6\u51b3\u4e8e\u5b57\u7b26\u5927\u5c0f\u3002 -L value \uff1aline_margin\uff0c\u63a7\u5236\u4f5c\u4e3a\u4e00\u4e2atext box\u7684\u6700\u5927\u884c\u8ddd. \u5c0f\u4e8e\u8be5\u8ddd\u79bb\u4e3a\u5f52\u4e3a\u4e00\u4e2abox\u3002 -W value \uff1aword_margin\uff0c\u63a7\u5236\u4e24\u4e2a\u8bcd\u4e4b\u95f4\u662f\u5426\u63d2\u5165\u7a7a\u683c\u7684\u6700\u5c0f\u95f4\u8ddd\u3002 -F value \uff1aboxes_flow\uff0c\u63a7\u5236box order\uff1f\u503c\u5e94\u8be5\u662f-1 (\u53ea\u8003\u8651\u6c34\u5e73) \u52301 (\u53ea\u8003\u8651\u5782\u76f4)\u4e4b\u95f4\uff0c\u9ed8\u8ba40.5\u3002 -Y value \uff1a\u8f93\u51fa\u5230HTML\u65f6\u7684layout\u7684\u6a21\u5f0f\uff0c\u9ed8\u8ba4normal(\u4fdd\u6301\u76f8\u5e94\u4f4d\u7f6e\u548c\u6362\u884c)\uff0c\u8fd8\u53ef\u4ee5exact (\u51c6\u786e\u4fdd\u6301\u6bcf\u4e2a\u5b57\u7b26\u4f4d\u7f6e\uff0cHTML\u53d8\u5927\u4e14\u6df7\u4e71)\u548cloose (\u4fdd\u6301text block\u4f4d\u7f6e)\u3002 -s value \uff1a\u63a7\u5236\u8f93\u51fa\u7684\u7f29\u653e\u6bd4\u4f8b\uff0c\u53ea\u80fd\u7528\u4e8eHTML\u683c\u5f0f\u3002 -R value \uff1a\u63a7\u5236\u65cb\u8f6c\u5ea6\u6570(360\u5236)\u3002 \u4e0d\u540c\u7248\u672c\u7684 M, L, W \u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u53ef\u80fd\u4e0d\u540c\u3002 \u540c\u65f6\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u4e0d\u4f7f\u7528 -C \u53c2\u6570\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002 \u53c2\u8003 pdfminer docs \u7b2c107\u5929\uff1a Python \u89e3\u6790 PDF PDFMiner:Python\u89e3\u6790PDF","title":"16.2.PDF"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.2.PDF.html#pdfminer","text":"pdfminer \u662f\u4e00\u4e2a\u53ef\u4ee5\u4ecePDF\u6587\u6863\u4e2d\u63d0\u53d6\u4fe1\u606f\u7684\u5de5\u5177\u3002\u4e0e\u5176\u4ed6PDF\u76f8\u5173\u7684\u5de5\u5177\u4e0d\u540c\uff0c\u5b83\u6ce8\u91cd\u7684\u662f\u83b7\u53d6\u548c\u5206\u6790\u6587\u672c\u6570\u636e\uff0c\u6240\u4ee5 pdfminer \u63d0\u53d6PDF\u7684\u8868\u683c\u548c\u56fe\u7247\u7684\u6548\u679c\u90fd\u4e0d\u592a\u597d\u3002 pdfminer \u5141\u8bb8\u4f60\u83b7\u53d6\u67d0\u4e00\u9875\u4e2d\u6587\u672c\u7684\u51c6\u786e\u4f4d\u7f6e\u548c\u4e00\u4e9b\u8bf8\u5982\u5b57\u4f53\u3001\u884c\u6570\u7684\u4fe1\u606f\u3002\u5b83\u5305\u62ec\u4e00\u4e2aPDF\u8f6c\u6362\u5668\uff0c\u53ef\u4ee5\u628aPDF\u6587\u4ef6\u8f6c\u6362\u6210HTML\u7b49\u683c\u5f0f\uff0c\u53ea\u662f\u8f6c\u6362\u540e\u7684\u683c\u5f0f\u6ca1\u773c\u770b\u3002\u5b83\u8fd8\u6709\u4e00\u4e2a\u6269\u5c55\u7684PDF\u89e3\u6790\u5668\uff0c\u53ef\u4ee5\u7528\u4e8e\u9664\u6587\u672c\u5206\u6790\u4ee5\u5916\u7684\u5176\u4ed6\u7528\u9014\u3002 \u7531\u4e8ePDF\u6587\u4ef6\u5177\u6709\u5e9e\u5927\u548c\u590d\u6742\u7684\u7ed3\u6784\uff0c\u5b8c\u6574\u89e3\u6790 PDF \u6587\u4ef6\u5f88\u8d39\u65f6\u95f4\uff0c pdfminer \u91c7\u7528\u4e86\u4e00\u4e2a\u61d2\u60f0\u5206\u6790\u7684\u7b56\u7565\uff0c\u5373\u663e\u5f0f\u6307\u5b9a\u5206\u6790\u5185\u5bb9\u65f6\u624d\u8fdb\u884c\u5206\u6790\uff0c\u5373\u6839\u636e\u9700\u8981\u53ea\u89e3\u6790\u51fa\u6240\u9700\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u8fd9\u4e2a\u56fe\u8868\u793a\u4e86 pdfminer \u5404\u6a21\u5757\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u6a21\u5757\u540d \u8bf4\u660e PDFParser \u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u6570\u636e PDFDocument \u5b58\u50a8\u6587\u6863\u6570\u636e\u7ed3\u6784\u5230\u5185\u5b58\u4e2d PDFPageInterpreter \u89e3\u6790page\u5185\u5bb9 PDFDevice \u628a\u89e3\u6790\u5230\u7684\u5185\u5bb9\u8f6c\u5316\u4e3a\u4f60\u9700\u8981\u7684\u4e1c\u897f PDFResourceManager \u5b58\u50a8\u5171\u4eab\u8d44\u6e90\uff0c\u4f8b\u5982\u5b57\u4f53\u6216\u56fe\u7247\u7b49","title":"pdfminer"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.2.PDF.html#_1","text":"\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u7ed9\u51fa\u4e86 pdfminer \u89e3\u6790 PDF \u6587\u6863\u7684\u57fa\u672c\u65b9\u6cd5\u3002\u9996\u5148\u6253\u5f00 PDF \u6587\u4ef6\uff0c\u521b\u5efa\u89e3\u6790\u5bf9\u8c61\uff0c\u5b58\u50a8\u6587\u6863\u7ed3\u6784\uff0c\u521b\u5efa\u8d44\u6e90\u7ba1\u7406\u5bf9\u8c61\u4ee5\u53ca\u5171\u4eab\u8d44\u6e90\uff0c\u7136\u540e\u518d\u521b\u5efa device \u5bf9\u8c61\uff0c\u6700\u540e\u518d\u521b\u5efa\u6587\u6863\u89e3\u6790\u5bf9\u8c61\uff0c\u5e76\u5904\u7406\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u9875\u3002 from pdfminer.pdfparser import PDFParser from pdfminer.pdfdocument import PDFDocument from pdfminer.pdfdevice import PDFDevice , PDFTextDevice from pdfminer.pdfpage import PDFPage , PDFTextExtractionNotAllowed from pdfminer.pdfinterp import PDFResourceManager from pdfminer.pdfinterp import PDFPageInterpreter pdf_path = \"datasets/file/\u6bd5\u4e1a\u8bbe\u8ba1-\u9875\u9762-14.pdf\" with open ( pdf_path , \"rb\" ) as f : # Create a PDF parser object associated with the file object. parser = PDFParser ( f ) # Create a PDF document object associated with the parser object. document = PDFDocument ( parser = parser , password = \"\" ) # Check if the PDF is text-based # pdfminer is not working for scanned PDF if not document . is_extractable : raise PDFTextExtractionNotAllowed # Create a PDF resource manager object that stores shared resources. pdf_manager = PDFResourceManager () # Create a PDF device object. device = PDFDevice ( pdf_manager ) # device = PDFTextDevice(pdf_manager) # Create a PDF interpreter object. interpreter = PDFPageInterpreter ( pdf_manager , device ) # Process each page contained in the document. for page in PDFPage . create_pages ( document ): interpreter . process_page ( page ) \u8fd9\u662f\u5b98\u65b9\u6587\u6863\u7ed9\u51fa\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u4e0d\u8fc7\u8bf4\u5b9e\u8bdd\uff0c\u6211\u4e0d\u662f\u5f88\u660e\u767d\u8fd9\u6bb5\u4ee3\u7801\u5728\u5e72\u561b\uff0c\u56e0\u4e3a\u4e0a\u9762\u7684\u4ee3\u7801\u597d\u50cf\u6ca1\u529e\u6cd5\u62ff\u5230 PDFPageInterpreter \u89e3\u6790\u5f97\u5230\u7684\u7ed3\u679c\u3002\u53ef\u80fd\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\u4ec5\u4ec5\u662f\u5c55\u793a pdfminer \u5904\u7406PDF\u7684\u6d41\u7a0b\u3002 \u4e0b\u9762\u662f\u83b7\u53d6\u9875\u9762\u89e3\u6790\u7ed3\u679c\u7684\u793a\u4f8b\u4ee3\u7801\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528 PDFDevice \u5bf9\u8c61\u7684 get_result \u65b9\u6cd5\u53bb\u83b7\u53d6\u89e3\u6790\u540e\u5f97\u5230\u7684\u5bf9\u8c61\u3002\u7b2c\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\u7684 PDFDevice \u5bf9\u8c61\u5e94\u8be5\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\uff08\u53ea\u662f\u58f0\u660e\u63a5\u53e3\uff0c\u6ca1\u6709\u5177\u4f53\u5b9e\u73b0\uff09\uff0c\u662f\u6ca1\u6709 get_result \u65b9\u6cd5\u7684\uff0c\u6240\u4ee5\u7b2c\u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\u6ca1\u529e\u6cd5\u53d6\u5f97\u89e3\u6790\u7ed3\u679c\u3002 PDFPageAggregator \u662f PDFDevice \u7684\u5b50\u7c7b\uff0c\u5177\u6709 get_result \u65b9\u6cd5\u3002 from pdfminer.pdfparser import PDFParser from pdfminer.pdfdocument import PDFDocument from pdfminer.pdfpage import PDFPage , PDFTextExtractionNotAllowed from pdfminer.converter import PDFPageAggregator from pdfminer.pdfinterp import PDFResourceManager from pdfminer.layout import LAParams , LTTextBox , LTTextLine pdf_path = \"datasets/file/\u6bd5\u4e1a\u8bbe\u8ba1-\u9875\u9762-14.pdf\" with open ( pdf_path , \"rb\" ) as f : # Create a PDF parser object associated with the file object. parser = PDFParser ( f ) # Create a PDF document object associated with the parser object. document = PDFDocument ( parser = parser , password = \"\" ) if not document . is_extractable : raise PDFTextExtractionNotAllowed # Create a PDF resource manager object that stores shared resources. pdf_manager = PDFResourceManager () # Create a PDF device object. laparams = LAParams () device = PDFPageAggregator ( pdf_manager , laparams = laparams ) # Create a PDF interpreter object. interpreter = PDFPageInterpreter ( pdf_manager , device ) # Process each page contained in the document. for page in PDFPage . create_pages ( document ): interpreter . process_page ( page ) # receive the LTPage object for the page. layout = device . get_result () for num , element in enumerate ( layout ): if isinstance ( element , LTTextBox ) or isinstance ( element , LTTextLine ): print ( element . get_text ()) \u54c8\u5c14\u6ee8\u5de5\u4e1a\u5927\u5b66\uff08\u6df1\u5733\uff09\u672c\u79d1\u6bd5\u4e1a\u8bbe\u8ba1\uff08\u8bba\u6587\uff09 \u951a\u6846\u7684\u6a21\u578b CornerNet\u3002CornerNet \u4f7f\u7528\u4e00\u4e2a\u5377\u79ef\u7f51\u7edc\u751f\u6210\u4e24\u7ec4\u7279\u5f81\u56fe\uff0c\u4e00\u4e2a\u8d1f\u8d23 \u9884\u6d4b\u5de6\u4e0a\u89d2\uff0c\u53e6\u4e00\u7ec4\u8d1f\u8d23\u9884\u6d4b\u53f3\u4e0b\u89d2\uff0c\u4ee5\u4e24\u4e2a\u5173\u952e\u70b9\u751f\u6210\u5019\u9009\u6846\u3002CornerNet \u8fd8\u5f15 \u5165\u4e86\u4e00\u79cd\u65b0\u578b\u7684 corner pooling \u5e2e\u52a9\u7f51\u7edc\u66f4\u597d\u5730\u5b9a\u4f4d\u8fb9\u754c\u6846\u7684\u89d2\u70b9\u3002\u5355\u9636\u6bb5\u6a21\u578b\u7ed3 \u6784\u5982\u56fe 1-8 \u6240\u793a\uff1a \u56fe 1-8 \u5355\u9636\u6bb5\u68c0\u6d4b\u6a21\u578b[14] 1.2.2 \u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7814\u7a76\u73b0\u72b6 \u76ee\u524d\u5b66\u754c\u8fd8\u6ca1\u6709\u7ed9\u5c0f\u76ee\u6807\u4e00\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u5c0f\u548c\u5927\u662f\u4e00\u4e2a\u76f8\u5bf9\u6982\u5ff5\u3002\u540c\u4e00 \u4e2a\u7269\u4f53\u5728\u76f8\u673a\u7684\u8fdc\u5904\u548c\u8fd1\u5904\u62cd\u6444\u5448\u73b0\u7684\u5927\u5c0f\u7ed3\u679c\u662f\u4e0d\u540c\u7684\u3002\u56fe\u7247\u4e2d\u7684\u5c0f\u76ee\u6807\u53ef\u80fd \u662f\u7269\u4f53\u81ea\u8eab\u7684\u7269\u7406\u5c3a\u5bf8\u8fc7\u5c0f\u6216\u8005\u662f\u62cd\u6444\u8ddd\u79bb\u8f83\u8fdc\u5bfc\u81f4\u7684\u3002\u867d\u7136\u5c0f\u76ee\u6807\u7684\u5224\u5b9a\u6ca1\u6709 \u4e00\u4e2a\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u4f46\u662f\u5728\u7279\u5b9a\u7684\u6570\u636e\u96c6\u5185\uff0c\u5c0f\u76ee\u6807\u53ef\u4ee5\u4eba\u4e3a\u5730\u7ed9\u51fa\u51c6\u786e\u5b9a\u4e49\u3002\u6bd4 \u5982 MS COCO \u6570\u636e\u96c6\u5185\u89c4\u5b9a\u5c3a\u5bf8\u5728 32 32\uf0b4 \u4e4b\u5185\u7684\u76ee\u6807\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5c0f\u76ee\u6807\u3002\u5982\u8868 1-1 \u6240\u793a\uff1a \u8868 1-1 COCO \u6570\u636e\u96c6\u5bf9\u76ee\u6807\u5c3a\u5ea6\u7684\u5b9a\u4e49 \u5c0f\u5c3a\u5ea6\u76ee\u6807 \u4e2d\u5c3a\u5ea6\u76ee\u6807 \u5927\u5c3a\u5ea6\u76ee\u6807 \u6700\u5c0f\u9762\u79ef 0 0\uf0b4 32 32\uf0b4 96 96\uf0b4 \u6700\u5927\u9762\u79ef 32 32\uf0b4 96 96\uf0b4 \uf0a5\uf0b4 \uf0a5 \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[17]\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9\u603b\u4f53\u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 - 8 - \u4e00\u4e2a\u5e03\u5c40\u5206\u6790\u5668\uff08layout analyzer\uff09\u4e3aPDF\u7684\u6bcf\u4e00\u9875\u8fd4\u56de\u4e00\u4e2a LTPage \u5bf9\u8c61\u3002\u8fd9\u4e2a LTPage \u5bf9\u8c61\u5305\u542b\u4f4d\u4e8e\u9875\u9762\u5185\u7684\u5b50\u5bf9\u8c61\uff0c\u5f62\u6210\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97PDF\u4e4b\u4e2d\u7684\u6587\u5b57\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8fed\u4ee3 LTPage \u5bf9\u8c61\u5305\u542b\u7684\u5b50\u5bf9\u8c61\uff0c\u5224\u65ad\u5b50\u5bf9\u8c61\u662f\u5426\u4e3a LTTextBox \u6216 LTTextLine \u5bf9\u8c61\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5219\u8c03\u7528\u5b50\u5bf9\u8c61\u7684 get_text() \u65b9\u6cd5\u83b7\u53d6\u6587\u5b57\u3002 \u4e0b\u9762\u7684\u8868\u683c\u662f\u5404\u5bf9\u8c61\u7684\u5177\u4f53\u8bf4\u660e\uff1a \u5bf9\u8c61\u540d \u5bf9\u8c61\u8bf4\u660e \u5907\u6ce8 LTPage \u4ee3\u8868\u4e00\u4e2a\u5b8c\u6574\u7684\u9875\u9762\uff0c\u53ef\u4ee5\u5305\u542b\u5b50\u5bf9\u8c61 \u4f8b\u5982\uff1a LTTextBox , LTFigure , LTImage , LTRect , LTCurve \u548c LTLine LTTextBox \u5b83\u5305\u542b LTTextLine \u5bf9\u8c61\u7684\u5217\u8868\uff0c\u4ee3\u8868\u4e00\u7ec4\u88ab\u5305\u542b\u5728\u77e9\u5f62\u533a\u57df\u4e2d\u7684\u6587\u672c \u6ce8\u610f\uff1a\u8be5box\u662f\u6839\u636e\u51e0\u4f55\u5b66\u5206\u6790\u5f97\u5230\u7684\uff0c\u5e76\u4e0d\u4e00\u5b9a\u51c6\u786e\u5730\u8868\u73b0\u4e3a\u8be5\u6587\u672c\u7684\u903b\u8f91\u8303\u56f4\uff0cget_text()\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u6587\u672c\u5185\u5bb9 LTTextLine \u5305\u542b\u4e00\u4e2a LTChar \u5bf9\u8c61\u7684\u5217\u8868\uff0c\u8868\u73b0\u4e3a\u5355\u884c\u6587\u672c \u5b57\u7b26\u8868\u73b0\u4e3a\u4e00\u884c\u6216\u4e00\u5217\uff0c\u53d6\u51b3\u4e8e\u6587\u672c\u4e66\u5199\u65b9\u5f0f\uff0cget_text()\u65b9\u6cd5\u8fd4\u56de\u6587\u672c\u5185\u5bb9 LTChar \u8868\u793a\u4e00\u4e2a\u5728\u6587\u672c\u4e2d\u7684\u771f\u5b9e\u7684\u5b57\u6bcd\uff0c\u4f5c\u4e3a\u4e00\u4e2aunicode\u5b57\u7b26\u4e32 LTChar \u5bf9\u8c61\u6709\u771f\u5b9e\u7684\u5206\u9694\u7b26 LTAnno \u8868\u793a\u4e00\u4e2a\u5728\u6587\u672c\u4e2d\u7684\u771f\u5b9e\u7684\u5b57\u6bcd\uff0c\u4f5c\u4e3a\u4e00\u4e2aunicode\u5b57\u7b26\u4e32 LTAnno \u5bf9\u8c61\u6ca1\u6709\uff0c\u662f\u865a\u62df\u5206\u9694\u7b26\uff0c\u6309\u7167\u4e24\u4e2a\u5b57\u7b26\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5e03\u5c40\u5206\u6790\u5668\u63d2\u5165\u865a\u62df\u5206\u9694\u7b26 LTFigure \u8868\u793a\u4e00\u4e2a\u88ab PDF Form \u5bf9\u8c61\u4f7f\u7528\u7684\u533a\u57df pdf form\u9002\u7528\u4e8e\u76ee\u524d\u7684\u56fe\u8868(present figures)\u6216\u8005\u9875\u9762\u4e2d\u690d\u5165\u7684\u53e6\u4e00\u4e2apdf\u6587\u6863\u56fe\u7247\uff0c LTFigure \u5bf9\u8c61\u53ef\u4ee5\u9012\u5f52 LTImage \u8868\u793a\u4e00\u4e2a\u56fe\u5f62\u5bf9\u8c61\uff0c\u53ef\u4ee5\u662fJPEG\u6216\u8005\u5176\u4ed6\u683c\u5f0f LTLine \u8868\u793a\u4e00\u6839\u76f4\u7ebf \u7528\u6765\u5206\u5272\u6587\u672c\u6216\u56fe\u8868(figures) LTRect \u8868\u793a\u4e00\u4e2a\u77e9\u5f62 \u7528\u6765\u6846\u4f4f\u522b\u7684\u56fe\u7247\u6216\u8005\u56fe\u8868 LTCurve \u4ee3\u8868\u4e00\u4e2a\u8d1d\u585e\u5c14\u66f2\u7ebf","title":"\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.2.PDF.html#_2","text":"\u9664\u4e86\u4ee5 import \u7684\u65b9\u5f0f\u4f7f\u7528\uff0c pdfminer \u8fd8\u63d0\u4f9b\u4e86\u4e24\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff1a pdf2txt.py \u548c dumppdf.py : pdf2txt.py: \u4ecePDF\u6587\u4ef6\u4e2d\u63d0\u53d6\u6240\u6709\u6587\u672c\u5185\u5bb9\u3002\u4f46\u4e0d\u80fd\u8bc6\u522b\u753b\u6210\u56fe\u7247\u7684\u6587\u672c\u3002\u5bf9\u4e8e\u52a0\u5bc6\u7684PDF\u9700\u8981\u63d0\u4f9b\u5bc6\u7801\u624d\u80fd\u89e3\u6790\uff0c\u5bf9\u4e8e\u6ca1\u6709\u63d0\u53d6\u6743\u9650\u7684PDF\u6587\u6863\u5219\u65e0\u6cd5\u63d0\u53d6\u6587\u672c\u3002 dumppdf.py: \u628aPDF\u6587\u4ef6\u5185\u5bb9\u53d8\u6210\u51c6XML\u683c\u5f0f\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u4e3b\u8981\u7528\u4e8edebug\uff0c\u4f46\u662f\u5b83\u4e5f\u53ef\u80fd\u7528\u4e8e\u63d0\u53d6\u4e00\u4e9b\u6709\u610f\u4e49\u7684\u5185\u5bb9\uff08\u6bd4\u5982\u56fe\u7247\uff09\u3002 \u4f7f\u7528\u7c7b\u4f3c\u8fd9\u6837\u7684\u547d\u4ee4\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86\uff1a pdf2txt.py [options] files \u3002 \u4e0b\u9762\u662f pdf2txt.py \u7684\u53c2\u6570\u8bf4\u660e\u3002 \u5b9e\u9645\u4f7f\u7528\u7684\u53ef\u9009\u53c2\u6570\u53d6\u51b3\u4e8e\u7528\u6237\u4f7f\u7528\u7684\u7248\u672c\uff0c\u548c\u5b98\u7f51\u4e0a\u7684\u53c2\u6570\u53ef\u80fd\u6709\u51fa\u5165\u3002 -o value \uff1a\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d\uff0c\u5426\u5219\u6807\u51c6\u8f93\u51fa\u3002\u6ca1\u6709 -t \u9009\u9879\u6307\u5b9a\u7c7b\u578b\u65f6\u6839\u636e\u540e\u7f00\u540d\u5224\u5b9a\u7c7b\u578b\u3002 -t value \uff1a\u6307\u5b9a\u8f93\u51fa\u7c7b\u578b\uff1atext (\u9ed8\u8ba4)\u3001html\u3001xml\u3001tag\u3002\u4e0d\u6307\u5b9a\u4f1a\u6839\u636e\u6587\u4ef6\u540d\u540e\u7f00\u5224\u5b9a\u3002 -p value \uff1a\u6307\u5b9a\u8f93\u51fa\u67d0\u4e9b\u9875\uff0c\u4f8b\u5982 1,2,3 \u8f93\u51fa1\u52303\u9875 (\u5206\u9694\u7b26 , \u65e0\u7a7a\u683c!).\u9ed8\u8ba4\u5168\u90e8\u9875\u8f93\u51fa\u3002\u5185\u90e8\u4f1a\u8f6c\u6210\u4e00\u4e2aset\u7c7b\u578b\u5bf9\u8c61\u3002 -m value \uff1a\u6307\u5b9a\u63d0\u53d6\u6700\u591am\u9875\u3002\u9ed8\u8ba4\u63d0\u53d6\u6240\u6709\u3002 -O value \uff1a\u7ed9ImageWriter\u7684\u53c2\u6570,\u8f93\u51fa\u56fe\u7247\u5230\u76f8\u5e94\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4\u4e0d\u8f93\u51fa\u56fe\u7247\u3002 -C \uff1a\u538b\u5236\u4f7f\u7528\u7f13\u5b58\uff0c\u4f1a\u51cf\u5c11\u5185\u5b58\u6d88\u8017\u4f46\u51cf\u6162\u5206\u6790\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u7f13\u5b58\u4f1a\u5728\u591a\u6587\u4ef6\u65f6\u4f7f\u7528\u4e4b\u524d\u7684\u4e00\u4e9b\u4fe1\u606f\uff08\u4f8b\u5982\u683c\u5f0f\u3001\u6587\u5b57\u5927\u5c0f\u7b49\uff09\u4f5c\u4e3a\u672c\u6587\u4ef6\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff0c\u5efa\u8bae\u538b\u5236\u7f13\u5b58\u3002 -P value \uff1a\u6307\u5b9a\u64cd\u4f5cpdf\u9700\u8981\u7684\u5bc6\u7801 -c value \uff1acodec\uff0c\u5c31\u662f\u4f7f\u7528\u7684\u7f16\u7801\uff08\u9ed8\u8ba4 utf-8 \uff09\u3002 -d \uff1a\u589e\u52a0debug\u7ea7\u6570\u3002 \u4ee5\u4e0b\u53c2\u6570\u548c layout\u5206\u6790\u76f8\u5173 (\u5b9e\u9645\u4f7f\u7528 LAParams \u5bf9\u8c61\u8fdb\u884c\u50a8\u5b58\u53c2\u6570\u5e76\u4f20\u9012\u7ed9\u4e3b\u8981\u7684\u51fd\u6570) -n \uff1a\u53d6\u6d88layout\u5206\u6790\u3002 -A \uff1a\u5f3a\u5236\u8fdb\u884c\u6240\u6709\u6587\u672c\u5b57\u7b26\u4e32\u7684layout\u5206\u6790\uff0c\u5305\u62ec\u56fe\u7247\u5185\u7684\u3002 -V \uff1a\u5141\u8bb8\u5782\u76f4\u4e66\u5199\u7684\u7684\u68c0\u6d4b\u3002 -M value \uff1achar_margin\uff0c\u63a7\u5236\u4f5c\u4e3a\u4e00\u4e2atext chunks\u7684\u6700\u5927\u5b57\u7b26\u95f4\u8ddd. \u5c0f\u4e8e\u8be5\u8ddd\u79bb\u4e3a\u5f52\u4e3a\u4e00\u7ec4\u3002\u5b9e\u9645\u8ddd\u79bb\u503c\u53d6\u51b3\u4e8e\u5b57\u7b26\u5927\u5c0f\u3002 -L value \uff1aline_margin\uff0c\u63a7\u5236\u4f5c\u4e3a\u4e00\u4e2atext box\u7684\u6700\u5927\u884c\u8ddd. \u5c0f\u4e8e\u8be5\u8ddd\u79bb\u4e3a\u5f52\u4e3a\u4e00\u4e2abox\u3002 -W value \uff1aword_margin\uff0c\u63a7\u5236\u4e24\u4e2a\u8bcd\u4e4b\u95f4\u662f\u5426\u63d2\u5165\u7a7a\u683c\u7684\u6700\u5c0f\u95f4\u8ddd\u3002 -F value \uff1aboxes_flow\uff0c\u63a7\u5236box order\uff1f\u503c\u5e94\u8be5\u662f-1 (\u53ea\u8003\u8651\u6c34\u5e73) \u52301 (\u53ea\u8003\u8651\u5782\u76f4)\u4e4b\u95f4\uff0c\u9ed8\u8ba40.5\u3002 -Y value \uff1a\u8f93\u51fa\u5230HTML\u65f6\u7684layout\u7684\u6a21\u5f0f\uff0c\u9ed8\u8ba4normal(\u4fdd\u6301\u76f8\u5e94\u4f4d\u7f6e\u548c\u6362\u884c)\uff0c\u8fd8\u53ef\u4ee5exact (\u51c6\u786e\u4fdd\u6301\u6bcf\u4e2a\u5b57\u7b26\u4f4d\u7f6e\uff0cHTML\u53d8\u5927\u4e14\u6df7\u4e71)\u548cloose (\u4fdd\u6301text block\u4f4d\u7f6e)\u3002 -s value \uff1a\u63a7\u5236\u8f93\u51fa\u7684\u7f29\u653e\u6bd4\u4f8b\uff0c\u53ea\u80fd\u7528\u4e8eHTML\u683c\u5f0f\u3002 -R value \uff1a\u63a7\u5236\u65cb\u8f6c\u5ea6\u6570(360\u5236)\u3002 \u4e0d\u540c\u7248\u672c\u7684 M, L, W \u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u53ef\u80fd\u4e0d\u540c\u3002 \u540c\u65f6\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u4e0d\u4f7f\u7528 -C \u53c2\u6570\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002","title":"\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.2.PDF.html#_3","text":"pdfminer docs \u7b2c107\u5929\uff1a Python \u89e3\u6790 PDF PDFMiner:Python\u89e3\u6790PDF","title":"\u53c2\u8003"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.09.21 python-docx version: 0.8.10 python-docx \u662fPython\u64cd\u4f5cword\u6587\u6863\u65f6\u6700\u5e38\u7528\u7684\u5e93\u3002 python-docx \u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aword\u6587\u6863\uff0c\u5f80\u6587\u6863\u4e2d\u6dfb\u52a0\u6587\u5b57\u3001\u8868\u683c\u3001\u56fe\u7247\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbe\u7f6e\u6837\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u4ece\u4e00\u4e2aword\u6587\u6863\u4e2d\u8bfb\u53d6\u6587\u5b57\u3001\u8868\u683c\u3001\u5185\u8054\u7684\u56fe\u7247\u3002 python-docx \u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a python-docx \u867d\u7136\u53ef\u4ee5\u8bbe\u7f6e\u6837\u5f0f\uff0c\u4f46\u5b83\u7684\u6837\u5f0f\u8bbe\u7f6e\u4e0d\u80fd\u5305\u542bword\u7684\u6240\u6709\u6837\u5f0f\u3002 Word\u6709\u6837\u5f0f\u7ba1\u7406\u5668\uff0c python-docx \u53ef\u4ee5\u64cd\u4f5c\u8fd9\u4e2a\u7ba1\u7406\u5668\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u6837\u5f0f\u5230\u7ba1\u7406\u5668\u4e2d\uff0c\u6216\u8005\u4ece\u7ba1\u7406\u5668\u9009\u53d6\u4e00\u4e2a\u6837\u5f0f\u52a0\u4ee5\u5e94\u7528\u3002 python-docx \u53ea\u80fd\u8bfb\u53d6\u5185\u8054\u56fe\u7247\u3002 \u5982\u679c\u5bf9docx\u6587\u6863\u7684\u6837\u5f0f\u8bbe\u7f6e\u6709\u8f83\u9ad8\u8981\u6c42\uff0c\u53ef\u4ee5\u5148\u8bbe\u7f6e\u597d\u4e00\u4e2aword\u6a21\u677f\u6587\u6863\uff0c\u7136\u540e\u7528 python-docx \u8bfb\u5165\u8be5\u6a21\u677f\u6587\u6863\uff0c\u64cd\u7eb5\u8be5\u6587\u6863\u7684\u6837\u5f0f\u7ba1\u7406\u5668\u3002\u5982\u679c\u4e0d\u80fd\u7528Word\u81ea\u5b9a\u4e49\u6837\u5f0f\uff0c\u53c8\u5bf9\u6837\u5f0f\u8bbe\u7f6e\u6709\u5f88\u9ad8\u8981\u6c42\uff0c\u53ea\u80fd\u8003\u8651VBA\u3001win32api\u7b49\u529f\u80fd\u9f50\u5168\u7684\u5de5\u5177\u4e86\u3002 \u8bfb\u53d6docx from docx import Document \u8bfb\u53d6\u6587\u672c # \u6253\u5f00 SQL\u7b14\u8bb0.docx \u6587\u6863 doc_path = r \"datasets/file/SQL\u7b14\u8bb0.docx\" doc = Document ( doc_path ) # \u8bfb\u53d6\u6bcf\u6bb5\u7684\u6587\u672c pl = [ paragraph . text for paragraph in doc . paragraphs ] print ( f \"\u4e00\u5171\u6709 { len ( pl ) } \u4e2aparagraph\" ) print ( pl [ 100 ]) \u4e00\u5171\u6709 835 \u4e2aparagraph 1986 \u5e74\uff0cANSI \u9996\u6b21\u5236\u5b9a\u4e86 SQL \u7684\u6807\u51c6\u3002\u4fee\u8ba2\u540e\u7684\u6807\u51c6\u4ee5\u4fee\u8ba2\u5e74\u4efd\u6765\u547d\u540d\uff0c\u4f8b\u5982 SQL:1999\u3001SQL:2003\u3001SQL:2008 \u7b49\u3002 \u8bfb\u53d6\u8868\u683c # \u8bfb\u53d6\u6240\u6709\u8868\u683c tables = doc . tables # \u6253\u5370\u7b2c\u4e00\u4e2a\u8868\u683c\u7684\u5185\u5bb9 for row in tables [ 0 ] . rows : for cell in row . cells : print ( cell . text , end = ' \\t | \\t ' ) print () \u542b\u4e49 | \u8fd0\u7b97\u7b26 | \u52a0\u6cd5\u8fd0\u7b97 | + | \u51cf\u6cd5\u8fd0\u7b97 | - | \u4e58\u6cd5\u8fd0\u7b97 | * | \u9664\u6cd5\u8fd0\u7b97 | / | \u8bfb\u53d6\u6837\u5f0f # \u83b7\u53d6\u8be5\u6587\u6863\u7684\u6240\u6709\u6837\u5f0f styles = list ( doc . styles ) # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6837\u5f0f\u7684\u540d\u5b57 print ( styles [ 0 ] . name ) # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6837\u5f0f\u7684\u5b57\u4f53 print ( styles [ 0 ] . font . name ) # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6837\u5f0f\u7684\u5b57\u4f53\u7684\u5927\u5c0f print ( styles [ 0 ] . font . size ) Normal Times New Roman 139700 \u8bfb\u53d6\u5185\u8054\u56fe\u7247 python-docx \u8bfb\u53d6\u5185\u8054\u56fe\u7247\u7684\u65b9\u5f0f\u6709\u70b9\u590d\u6742\uff0c\u5b98\u65b9\u6587\u6863\u597d\u50cf\u4e5f\u6ca1\u6709\u63d0\u53ca\u5982\u4f55\u63d0\u53d6\u56fe\u7247\u3002\u5b9e\u9645\u4e0adocx\u6587\u6863\u662f\u5305\u542b\u4e86\u4e00\u4e9bxml\u6587\u4ef6\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684zip\u538b\u7f29\u6587\u6863\u3002\u6240\u4ee5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u6790xml\u7684\u6807\u7b7e\u6216\u8005\u5c06doc\u89e3\u538b\u7f29\u6765\u83b7\u53d6\u56fe\u7247\u7684\u4fe1\u606f\u3002\u5b9e\u9645\u4e0a\uff0c python-docx \u6b63\u662f\u901a\u8fc7\u89e3\u6790docx\u6587\u6863\u4e2d\u7684xml\u6587\u4ef6\u6765\u63d0\u53d6\u5176\u4e2d\u7684\u4fe1\u606f\u3002 document.xml \u6587\u4ef6\u5305\u542b\u4e86docx\u6587\u4ef6\u7684\u4e3b\u8981\u5185\u5bb9\uff0c\u56fe\u7247\u7684\u4fe1\u606f\u4e5f\u5728\u5176\u4e2d\u3002\u5728 document.xml \u4e2d\uff0c\u56fe\u7247\u7684\u51fa\u73b0\u987a\u5e8f\u548c\u56fe\u7247\u5728\u6587\u4ef6\u4e2d\u663e\u793a\u7684\u987a\u5e8f\u662f\u4e00\u81f4\u7684\u3002\u6bcf\u4e2a\u56fe\u7247\u90fd\u6709\u4e00\u4e2a r:id \u7684\u6807\u7b7e\uff1f\u53ef\u4ee5\u8fed\u4ee3 Document \u7684 inline_shapes \u5bf9\u8c61\uff0c\u4ece\u800c\u83b7\u5f97\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a inline_shape \u5bf9\u8c61\u7684 riD \u503c\u3002 rId = [] for inline_img in doc . inline_shapes : # pic.blipFill.blip.embed \u8fd9\u4e9b\u90fd\u662f document.xml \u4e2d\u7684\u6807\u7b7e blip = inline_img . _inline . graphic . graphicData . pic . blipFill . blip rId . append ( blip . embed ) print ( rId ) ['rId19', 'rId20', 'rId24', 'rId25', 'rId27', 'rId28'] \u901a\u8fc7 Document.part \u5c5e\u6027\uff0c\u53ef\u4ee5\u83b7\u53d6\u50a8\u5b58\u4e86 document.xml \u89e3\u6790\u7ed3\u679c\u7684 DocumentPart \u5bf9\u8c61 document_part = doc . part print ( document_part . partname ) /word/document.xml DocumentPart \u5bf9\u8c61\u7684\u5c5e\u6027 related_parts \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06 document.xml \u4e2d\u7684\u6bcf\u4e00\u4e2a r:id \u6620\u5c04\u5230\u8be5 r:id \u6240\u5728\u7684\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5185\u8054\u56fe\u7247\u7684 r:id \u4ece\u5c5e\u6027 related_parts \u4e2d\u83b7\u53d6\u56fe\u7247\u7684xml\u539f\u59cb\u4fe1\u606f\u3002 rid = rId [ 0 ] image_part = document_part . related_parts [ rid ] print ( f \"' { rid } '\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d:\" , image_part . filename ) 'rId19'\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d: image.png \u7136\u800c\uff0c\u901a\u8fc7 .filename \u5c5e\u6027\u83b7\u5f97\u7684\u6587\u4ef6\u540d\u4f3c\u4e4e\u4e0d\u662f\u5b8c\u5168\u6b63\u786e\u7684\uff0c\u5b8c\u6574\u7684\u56fe\u7247\u6587\u4ef6\u540d\u8fd8\u5e26\u6709\u7f16\u53f7\u7684\u3002\u901a\u8fc7 .partname \u5c5e\u6027\uff0c\u53ef\u4ee5\u770b\u5230\u56fe\u7247\u5728docx\u538b\u7f29\u6587\u4ef6\u4e2d\u7684\u771f\u5b9e\u6587\u4ef6\u540d\u3002 print ( f \"' { rid } '\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d:\" , image_part . partname ) 'rId19'\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d: /word/media/image1.png \u901a\u8fc7 .blob \u5c5e\u6027\uff08blob\u5728\u8ba1\u7b97\u673a\u9886\u57df\u4e2d\uff0c\u4f3c\u4e4e\u662fbinary large object\u7684\u7f29\u5199\uff09\uff0c\u53ef\u4ee5\u83b7\u5f97\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 print ( type ( image_part . blob )) print ( len ( image_part . blob )) <class 'bytes'> 23329 \u4fdd\u5b58\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u53ef\u4ee5\u5f97\u5230\u56fe\u7247\u6587\u4ef6 with open ( r \"datasets/file/image1.png\" , \"wb\" ) as f : f . write ( image_part . blob ) os . remove ( r \"datasets/file/image1.png\" ) \u6216\u8005\u4f7f\u7528 cv2 \u5e93\u5c06\u4e8c\u8fdb\u5236\u7684\u56fe\u7247\u6570\u636e\u8f6c\u6362\u4e3a\u6570\u7ec4\uff0c\u901a\u8fc7matplotlib\u53ef\u4ee5\u663e\u793a\u51fa\u8be5\u56fe\u7247\u3002 import matplotlib.pyplot as plt import cv2 import numpy as np img = cv2 . imdecode ( np . frombuffer ( image_part . blob , np . uint8 ), cv2 . IMREAD_COLOR ) plt . imshow ( img ) InlineShape \u5bf9\u8c61\u8fd8\u5e26\u6709\u56fe\u7247\u7684\u957f\u5bbd\u4fe1\u606f\uff08\u4f46\u597d\u50cf\u4e0d\u592a\u51c6\uff09\uff1a print ( inline_img . height . cm , inline_img . width . cm ) 1.7796 10.591322222222223 InlineShape \u5bf9\u8c61\u8fd8\u5e26\u6709\u4e00\u4e2a name \u6807\u7b7e\uff0c\u4f46\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u542b\u4e49\uff1a print ( inline_img . _inline . graphic . graphicData . pic . nvPicPr . cNvPr . name ) Picture 237 \u53c2\u8003 \u7b2c105\u5929\uff1a Python \u64cd\u4f5c Word \u4f7f\u7528\u6837\u5f0f\u2014\u2014 \u4f7f\u7528Python\u8bfb\u5199Office\u6587\u6863\u4e4b\u56db python-docx\u4e2d\u6587 \u5229\u7528python-docx\u6279\u91cf\u5904\u7406Word\u6587\u4ef6\u2014\u56fe\u7247 \u3010\u7b46\u8a18\u3011python docx \u6293\u5716 python \u4f7f\u7528cv2\u3001io.BytesIO\u5904\u7406\u56fe\u7247\u4e8c\u8fdb\u5236\u6570\u636e","title":"16.3.docx"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html#docx","text":"from docx import Document","title":"\u8bfb\u53d6docx"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html#_1","text":"# \u6253\u5f00 SQL\u7b14\u8bb0.docx \u6587\u6863 doc_path = r \"datasets/file/SQL\u7b14\u8bb0.docx\" doc = Document ( doc_path ) # \u8bfb\u53d6\u6bcf\u6bb5\u7684\u6587\u672c pl = [ paragraph . text for paragraph in doc . paragraphs ] print ( f \"\u4e00\u5171\u6709 { len ( pl ) } \u4e2aparagraph\" ) print ( pl [ 100 ]) \u4e00\u5171\u6709 835 \u4e2aparagraph 1986 \u5e74\uff0cANSI \u9996\u6b21\u5236\u5b9a\u4e86 SQL \u7684\u6807\u51c6\u3002\u4fee\u8ba2\u540e\u7684\u6807\u51c6\u4ee5\u4fee\u8ba2\u5e74\u4efd\u6765\u547d\u540d\uff0c\u4f8b\u5982 SQL:1999\u3001SQL:2003\u3001SQL:2008 \u7b49\u3002","title":"\u8bfb\u53d6\u6587\u672c"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html#_2","text":"# \u8bfb\u53d6\u6240\u6709\u8868\u683c tables = doc . tables # \u6253\u5370\u7b2c\u4e00\u4e2a\u8868\u683c\u7684\u5185\u5bb9 for row in tables [ 0 ] . rows : for cell in row . cells : print ( cell . text , end = ' \\t | \\t ' ) print () \u542b\u4e49 | \u8fd0\u7b97\u7b26 | \u52a0\u6cd5\u8fd0\u7b97 | + | \u51cf\u6cd5\u8fd0\u7b97 | - | \u4e58\u6cd5\u8fd0\u7b97 | * | \u9664\u6cd5\u8fd0\u7b97 | / |","title":"\u8bfb\u53d6\u8868\u683c"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html#_3","text":"# \u83b7\u53d6\u8be5\u6587\u6863\u7684\u6240\u6709\u6837\u5f0f styles = list ( doc . styles ) # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6837\u5f0f\u7684\u540d\u5b57 print ( styles [ 0 ] . name ) # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6837\u5f0f\u7684\u5b57\u4f53 print ( styles [ 0 ] . font . name ) # \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6837\u5f0f\u7684\u5b57\u4f53\u7684\u5927\u5c0f print ( styles [ 0 ] . font . size ) Normal Times New Roman 139700","title":"\u8bfb\u53d6\u6837\u5f0f"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html#_4","text":"python-docx \u8bfb\u53d6\u5185\u8054\u56fe\u7247\u7684\u65b9\u5f0f\u6709\u70b9\u590d\u6742\uff0c\u5b98\u65b9\u6587\u6863\u597d\u50cf\u4e5f\u6ca1\u6709\u63d0\u53ca\u5982\u4f55\u63d0\u53d6\u56fe\u7247\u3002\u5b9e\u9645\u4e0adocx\u6587\u6863\u662f\u5305\u542b\u4e86\u4e00\u4e9bxml\u6587\u4ef6\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684zip\u538b\u7f29\u6587\u6863\u3002\u6240\u4ee5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u6790xml\u7684\u6807\u7b7e\u6216\u8005\u5c06doc\u89e3\u538b\u7f29\u6765\u83b7\u53d6\u56fe\u7247\u7684\u4fe1\u606f\u3002\u5b9e\u9645\u4e0a\uff0c python-docx \u6b63\u662f\u901a\u8fc7\u89e3\u6790docx\u6587\u6863\u4e2d\u7684xml\u6587\u4ef6\u6765\u63d0\u53d6\u5176\u4e2d\u7684\u4fe1\u606f\u3002 document.xml \u6587\u4ef6\u5305\u542b\u4e86docx\u6587\u4ef6\u7684\u4e3b\u8981\u5185\u5bb9\uff0c\u56fe\u7247\u7684\u4fe1\u606f\u4e5f\u5728\u5176\u4e2d\u3002\u5728 document.xml \u4e2d\uff0c\u56fe\u7247\u7684\u51fa\u73b0\u987a\u5e8f\u548c\u56fe\u7247\u5728\u6587\u4ef6\u4e2d\u663e\u793a\u7684\u987a\u5e8f\u662f\u4e00\u81f4\u7684\u3002\u6bcf\u4e2a\u56fe\u7247\u90fd\u6709\u4e00\u4e2a r:id \u7684\u6807\u7b7e\uff1f\u53ef\u4ee5\u8fed\u4ee3 Document \u7684 inline_shapes \u5bf9\u8c61\uff0c\u4ece\u800c\u83b7\u5f97\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a inline_shape \u5bf9\u8c61\u7684 riD \u503c\u3002 rId = [] for inline_img in doc . inline_shapes : # pic.blipFill.blip.embed \u8fd9\u4e9b\u90fd\u662f document.xml \u4e2d\u7684\u6807\u7b7e blip = inline_img . _inline . graphic . graphicData . pic . blipFill . blip rId . append ( blip . embed ) print ( rId ) ['rId19', 'rId20', 'rId24', 'rId25', 'rId27', 'rId28'] \u901a\u8fc7 Document.part \u5c5e\u6027\uff0c\u53ef\u4ee5\u83b7\u53d6\u50a8\u5b58\u4e86 document.xml \u89e3\u6790\u7ed3\u679c\u7684 DocumentPart \u5bf9\u8c61 document_part = doc . part print ( document_part . partname ) /word/document.xml DocumentPart \u5bf9\u8c61\u7684\u5c5e\u6027 related_parts \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06 document.xml \u4e2d\u7684\u6bcf\u4e00\u4e2a r:id \u6620\u5c04\u5230\u8be5 r:id \u6240\u5728\u7684\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5185\u8054\u56fe\u7247\u7684 r:id \u4ece\u5c5e\u6027 related_parts \u4e2d\u83b7\u53d6\u56fe\u7247\u7684xml\u539f\u59cb\u4fe1\u606f\u3002 rid = rId [ 0 ] image_part = document_part . related_parts [ rid ] print ( f \"' { rid } '\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d:\" , image_part . filename ) 'rId19'\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d: image.png \u7136\u800c\uff0c\u901a\u8fc7 .filename \u5c5e\u6027\u83b7\u5f97\u7684\u6587\u4ef6\u540d\u4f3c\u4e4e\u4e0d\u662f\u5b8c\u5168\u6b63\u786e\u7684\uff0c\u5b8c\u6574\u7684\u56fe\u7247\u6587\u4ef6\u540d\u8fd8\u5e26\u6709\u7f16\u53f7\u7684\u3002\u901a\u8fc7 .partname \u5c5e\u6027\uff0c\u53ef\u4ee5\u770b\u5230\u56fe\u7247\u5728docx\u538b\u7f29\u6587\u4ef6\u4e2d\u7684\u771f\u5b9e\u6587\u4ef6\u540d\u3002 print ( f \"' { rid } '\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d:\" , image_part . partname ) 'rId19'\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u540d: /word/media/image1.png \u901a\u8fc7 .blob \u5c5e\u6027\uff08blob\u5728\u8ba1\u7b97\u673a\u9886\u57df\u4e2d\uff0c\u4f3c\u4e4e\u662fbinary large object\u7684\u7f29\u5199\uff09\uff0c\u53ef\u4ee5\u83b7\u5f97\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 print ( type ( image_part . blob )) print ( len ( image_part . blob )) <class 'bytes'> 23329 \u4fdd\u5b58\u56fe\u7247\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u53ef\u4ee5\u5f97\u5230\u56fe\u7247\u6587\u4ef6 with open ( r \"datasets/file/image1.png\" , \"wb\" ) as f : f . write ( image_part . blob ) os . remove ( r \"datasets/file/image1.png\" ) \u6216\u8005\u4f7f\u7528 cv2 \u5e93\u5c06\u4e8c\u8fdb\u5236\u7684\u56fe\u7247\u6570\u636e\u8f6c\u6362\u4e3a\u6570\u7ec4\uff0c\u901a\u8fc7matplotlib\u53ef\u4ee5\u663e\u793a\u51fa\u8be5\u56fe\u7247\u3002 import matplotlib.pyplot as plt import cv2 import numpy as np img = cv2 . imdecode ( np . frombuffer ( image_part . blob , np . uint8 ), cv2 . IMREAD_COLOR ) plt . imshow ( img ) InlineShape \u5bf9\u8c61\u8fd8\u5e26\u6709\u56fe\u7247\u7684\u957f\u5bbd\u4fe1\u606f\uff08\u4f46\u597d\u50cf\u4e0d\u592a\u51c6\uff09\uff1a print ( inline_img . height . cm , inline_img . width . cm ) 1.7796 10.591322222222223 InlineShape \u5bf9\u8c61\u8fd8\u5e26\u6709\u4e00\u4e2a name \u6807\u7b7e\uff0c\u4f46\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u542b\u4e49\uff1a print ( inline_img . _inline . graphic . graphicData . pic . nvPicPr . cNvPr . name ) Picture 237","title":"\u8bfb\u53d6\u5185\u8054\u56fe\u7247"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.3.docx.html#_5","text":"\u7b2c105\u5929\uff1a Python \u64cd\u4f5c Word \u4f7f\u7528\u6837\u5f0f\u2014\u2014 \u4f7f\u7528Python\u8bfb\u5199Office\u6587\u6863\u4e4b\u56db python-docx\u4e2d\u6587 \u5229\u7528python-docx\u6279\u91cf\u5904\u7406Word\u6587\u4ef6\u2014\u56fe\u7247 \u3010\u7b46\u8a18\u3011python docx \u6293\u5716 python \u4f7f\u7528cv2\u3001io.BytesIO\u5904\u7406\u56fe\u7247\u4e8c\u8fdb\u5236\u6570\u636e","title":"\u53c2\u8003"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.4.OCR.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.09.21 pytesseract version: 0.3.6 Tesseract Tesseract\u7684OCR\u5f15\u64ce\u6700\u5148\u7531HP\u5b9e\u9a8c\u5ba4\u4e8e1985\u5e74\u5f00\u59cb\u7814\u53d1\uff0c\u81f31995\u5e74\u65f6\u5df2\u7ecf\u6210\u4e3aOCR\u4e1a\u5185\u6700\u51c6\u786e\u7684\u4e09\u6b3e\u8bc6\u522b\u5f15\u64ce\u4e4b\u4e00\u3002\u7136\u800c\uff0cHP\u4e0d\u4e45\u4fbf\u51b3\u5b9a\u653e\u5f03OCR\u4e1a\u52a1\uff0cTesseract\u4e5f\u4ece\u6b64\u5c18\u5c01\u3002 \u6570\u5e74\u4ee5\u540e\uff0cHP\u610f\u8bc6\u5230\uff0c\u4e0e\u5176\u5c06Tesseract\u675f\u4e4b\u9ad8\u9601\uff0c\u4e0d\u5982\u8d21\u732e\u7ed9\u5f00\u6e90\u8f6f\u4f53\u4e1a\uff0c\u8ba9\u5176\u91cd\u7115\u65b0\u751f\u2014\u20142005\u5e74\uff0cTesseract\u7531\u7f8e\u56fd\u5185\u534e\u8fbe\u5dde\u4fe1\u606f\u6280\u672f\u7814\u7a76\u6240\u83b7\u5f97\uff0c\u5e76\u6c42\u8bf8\u4e8eGoogle\u5bf9Tesseract\u8fdb\u884c\u6539\u8fdb\u3001\u6d88\u9664Bug\u3001\u4f18\u5316\u5de5\u4f5c\u3002 Tesseract\u76ee\u524d\u5df2\u4f5c\u4e3a\u5f00\u6e90\u9879\u76ee\u53d1\u5e03\u5728Google Project\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b89\u88c5Tesseract\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5728terminal\u6253\u5370Tesseract\u7684\u7248\u672c\u4fe1\u606f\uff1a output = subprocess . check_output ( r '\"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\" -v' ) print ( output . decode ( \"utf-8\" )) tesseract v5.0.0-alpha.20200328 leptonica-1.78.0 libgif 5.1.4 : libjpeg 8d (libjpeg-turbo 1.5.3) : libpng 1.6.34 : libtiff 4.0.9 : zlib 1.2.11 : libwebp 0.6.1 : libopenjp2 2.3.0 Found AVX2 Found AVX Found FMA Found SSE Found libarchive 3.3.2 zlib/1.2.11 liblzma/5.2.3 bz2lib/1.0.6 liblz4/1.7.5 Found libcurl/7.59.0 OpenSSL/1.0.2o (WinSSL) zlib/1.2.11 WinIDN libssh2/1.7.0 nghttp2/1.31.0 tesseract \u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \u5355\u4e00\u547d\u4ee4: tesseract --help # \u663e\u793a\u7b80\u77ed\u7684\u5e2e\u52a9\u6587\u6863 tesseract --help-extra # \u663e\u793a\u5b8c\u6574\u7684\u5e2e\u52a9\u6587\u6863 tesseract --help-psm # \u663e\u793a-psmk\u53ef\u9009\u547d\u4ee4\u7684\u53c2\u6570\u7684\u8bf4\u660e tesseract --help-oem # \u663e\u793a-oem\u53ef\u9009\u547d\u4ee4\u7684\u53c2\u6570\u7684\u8bf4\u660e tesseract -v, --version # \u663e\u793a-oem\u7248\u672c\u4fe1\u606f tesseract --list-langs # \u5217\u51fa\u5f53\u524dtesseract\u5f15\u64ce\u7684\u53ef\u7528\u8bed\u8a00 tesseract --print-parameters # \u6253\u5370tesseract\u7684\u53c2\u6570 OCR\u547d\u4ee4: tesseract \u8fa8\u8bc6\u7684\u56fe\u7247 \u8f93\u51fa\u6587\u6863 [\u53ef\u9009\u547d\u4ee4] \u53ef\u9009\u547d\u4ee4: --dpi VALUE \u6307\u5b9a\u8f93\u5165\u56fe\u7247\u7684DPI -l LANG[+LANG] \u6307\u5b9aOCR\u65f6\u4f7f\u7528\u7684\u8bed\u8a00 --psm NUM \u6307\u5b9a\u9875\u9762\u5206\u5272\u6a21\u5f0f --oem NUM \u6307\u5b9aOCR\u5f15\u64ce\u6a21\u5f0f --psm \u548c --oem \u76f8\u5173\u53c2\u6570\u7684\u8bf4\u660e\u5982\u4e0b\uff1a Page segmentation modes: 0 Orientation and script detection (OSD) only. 1 Automatic page segmentation with OSD. 2 Automatic page segmentation, but no OSD, or OCR. (not implemented) 3 Fully automatic page segmentation, but no OSD. (Default) 4 Assume a single column of text of variable sizes. 5 Assume a single uniform block of vertically aligned text. 6 Assume a single uniform block of text. 7 Treat the image as a single text line. 8 Treat the image as a single word. 9 Treat the image as a single word in a circle. 10 Treat the image as a single character. 11 Sparse text. Find as much text as possible in no particular order. 12 Sparse text with OSD. 13 Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific. OCR Engine modes: 0 Legacy engine only. 1 Neural nets LSTM engine only. 2 Legacy + LSTM engines. 3 Default, based on what is available. tesseract \u652f\u6301\u540c\u65f6\u8bc6\u522b\u591a\u79cd\u8bed\u8a00\uff0c\u4f8b\u5982\u4ee5\u4e0b\u547d\u4ee4\u4ee3\u8868\u540c\u65f6\u8bc6\u522btest.png\u56fe\u7247\u4e2d\u7684\u7b80\u4f53\u4e2d\u6587\u548c\u82f1\u6587\uff1a tesseract -l chi_sim+end test.png tesseract\u652f\u6301\u8f93\u51fa\u53ef\u641c\u7d22\u7684pdf\uff1a tesseract -l eng test.png test.pdf pdf \u8fd9\u5c06\u521b\u5efa\u5e26\u6709\u56fe\u50cf\u7684pdf\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u5df2\u8bc6\u522b\u6587\u672c\u7684\u5355\u72ec\u53ef\u641c\u7d22\u6587\u672c\u5c42\u3002 pytesseract pytesseract \u662f\u4e00\u4e2aPython\u5e93\uff0c\u5b83\u5c01\u88c5\u4e86 Tesseract \uff0c\u5373\u4e3aTesseract\u63d0\u4f9b\u4e86Python\u63a5\u53e3\u3002 # If you don't have tesseract executable in your PATH, include the following: tesseract_path = r \"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\" pytesseract . pytesseract . tesseract_cmd = tesseract_path \u73b0\u5728\u6709\u4e00\u5f20\u540d\u4e3a ocr_sample.png \u7684\u56fe\u7247\u5982\u4e0b\uff1a # Simple image to string print ( pytesseract . image_to_string ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim+eng\" )) \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[7\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9 \u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u8bbe\u7f6e timeout \u53c2\u6570\u3002 # Timeout/terminate the tesseract job after a period of time try : # Timeout after half a second print ( pytesseract . image_to_string ( 'test.jpg' , timeout = 0.5 )) except RuntimeError as timeout_error : # Tesseract processing is terminated pass \u73b0\u5728\u6709\u4e00\u4e2a\u50a8\u5b58\u7740\u56fe\u7247\u8def\u5f84\u5217\u8868\u7684\u6587\u672c\u6587\u4ef6\uff1a with open ( \"../datasets/file/ocr_list.txt\" , \"r\" ) as f : print ( f . read ()) ../datasets/file/ocr_sample.png ../datasets/file/ocr_sample.png # Batch processing with a single file containing the list of multiple image file paths print ( pytesseract . image_to_string ( \"../datasets/file/ocr_list.txt\" , lang = \"chi_sim\" )) \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[7\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9 \u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[7\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9 \u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 \u8fd4\u56de\u53ef\u8bc6\u522b\u5b57\u7b26\u548c\u53ef\u8bc6\u522b\u5b57\u7b26\u7684\u8fb9\u754c\u3002 # Get bounding box estimates boxes = pytesseract . image_to_boxes ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim\" ) print ( \" \\n \" . join ( boxes . split ( \" \\n \" )[: 6 ])) \u4e3a 44 162 72 179 0 \u4e86 71 153 84 183 0 \u63d0 83 162 98 179 0 \u9ad8 101 162 129 179 0 \u5c0f 131 167 136 174 0 \u76ee 146 162 164 179 0 \u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u5b57\u7b26\u8fb9\u754c\u3001\u7f6e\u4fe1\u5ea6\u3001\u884c\u6570\u3001\u9875\u6570 # Get verbose data including boxes, confidences, line and page numbers more_info = pytesseract . image_to_data ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim\" ) print ( \" \\n \" . join ( more_info . split ( \" \\n \" )[: 10 ])) level page_num block_num par_num line_num word_num left top width height conf text 1 1 0 0 0 0 0 0 687 188 -1 2 1 1 0 0 0 10 9 672 171 -1 3 1 1 1 0 0 44 9 557 17 -1 4 1 1 1 1 0 44 9 557 17 -1 5 1 1 1 1 1 44 9 28 17 96 \u4e3a 5 1 1 1 1 2 71 5 13 30 96 \u4e86 5 1 1 1 1 3 83 9 46 17 95 \u63d0\u9ad8 5 1 1 1 1 4 131 14 5 7 96 \u5c0f 5 1 1 1 1 5 146 9 28 17 96 \u76ee\u6807 \u83b7\u53d6\u9875\u9762\u6587\u5b57\u65b9\u5411\u4fe1\u606f\u3002 # Get information about orientation and script detection print ( pytesseract . image_to_osd ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim\" )) Page number: 0 Orientation in degrees: 270 Rotate: 90 Orientation confidence: 170.00 Script: Latin Script confidence: 2.00 \u751f\u6210\u53ef\u641c\u7d22\u7684PDF\u3002 # Get a searchable PDF pdf = pytesseract . image_to_pdf_or_hocr ( \"../datasets/file/ocr_sample.png\" , lang = \"chi_sim\" , extension = \"pdf\" ) with open ( \"../datasets/file/ocr_sample.pdf\" , \"w+b\" ) as f : f . write ( pdf ) # pdf type is bytes by default os . remove ( \"../datasets/file/ocr_sample.pdf\" ) \u83b7\u53d6 hocr\u683c\u5f0f\u7684\u8f93\u51fa\u3002 hOCR\u662f\u4e00\u79cdHTML\u6587\u4ef6\uff0c\u5b83\u5bf9\u6bcf\u4e2a\u8bc6\u522b\u7684\u5b57\u8bcd\u4f1a\u540e\u4e00\u4e9b\u53c2\u6570\u7684\u8bf4\u660e\u3002 # Get HOCR output hocr = pytesseract . image_to_pdf_or_hocr ( \"../datasets/file/ocr_sample.png\" , lang = \"chi_sim\" , extension = \"hocr\" ) \u83b7\u53d6 ALTO XML \u683c\u5f0f\u7684\u8f93\u51fa\u3002 # Get ALTO XML output xml = pytesseract . image_to_alto_xml ( \"../datasets/file/ocr_sample.png\" ) \u53c2\u8003 [ \u5be6\u7528\u5fc3\u5f97 ] Tesseract-OCR \u672c\u5730\u8f6c\u6362\u4e2d\u82f1\u6587\u626b\u63cf\u7248PDF\u4e3a\u53ef\u641c\u7d22\u6587\u4ef6","title":"16.4.OCR"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.4.OCR.html#tesseract","text":"Tesseract\u7684OCR\u5f15\u64ce\u6700\u5148\u7531HP\u5b9e\u9a8c\u5ba4\u4e8e1985\u5e74\u5f00\u59cb\u7814\u53d1\uff0c\u81f31995\u5e74\u65f6\u5df2\u7ecf\u6210\u4e3aOCR\u4e1a\u5185\u6700\u51c6\u786e\u7684\u4e09\u6b3e\u8bc6\u522b\u5f15\u64ce\u4e4b\u4e00\u3002\u7136\u800c\uff0cHP\u4e0d\u4e45\u4fbf\u51b3\u5b9a\u653e\u5f03OCR\u4e1a\u52a1\uff0cTesseract\u4e5f\u4ece\u6b64\u5c18\u5c01\u3002 \u6570\u5e74\u4ee5\u540e\uff0cHP\u610f\u8bc6\u5230\uff0c\u4e0e\u5176\u5c06Tesseract\u675f\u4e4b\u9ad8\u9601\uff0c\u4e0d\u5982\u8d21\u732e\u7ed9\u5f00\u6e90\u8f6f\u4f53\u4e1a\uff0c\u8ba9\u5176\u91cd\u7115\u65b0\u751f\u2014\u20142005\u5e74\uff0cTesseract\u7531\u7f8e\u56fd\u5185\u534e\u8fbe\u5dde\u4fe1\u606f\u6280\u672f\u7814\u7a76\u6240\u83b7\u5f97\uff0c\u5e76\u6c42\u8bf8\u4e8eGoogle\u5bf9Tesseract\u8fdb\u884c\u6539\u8fdb\u3001\u6d88\u9664Bug\u3001\u4f18\u5316\u5de5\u4f5c\u3002 Tesseract\u76ee\u524d\u5df2\u4f5c\u4e3a\u5f00\u6e90\u9879\u76ee\u53d1\u5e03\u5728Google Project\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b89\u88c5Tesseract\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5728terminal\u6253\u5370Tesseract\u7684\u7248\u672c\u4fe1\u606f\uff1a output = subprocess . check_output ( r '\"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\" -v' ) print ( output . decode ( \"utf-8\" )) tesseract v5.0.0-alpha.20200328 leptonica-1.78.0 libgif 5.1.4 : libjpeg 8d (libjpeg-turbo 1.5.3) : libpng 1.6.34 : libtiff 4.0.9 : zlib 1.2.11 : libwebp 0.6.1 : libopenjp2 2.3.0 Found AVX2 Found AVX Found FMA Found SSE Found libarchive 3.3.2 zlib/1.2.11 liblzma/5.2.3 bz2lib/1.0.6 liblz4/1.7.5 Found libcurl/7.59.0 OpenSSL/1.0.2o (WinSSL) zlib/1.2.11 WinIDN libssh2/1.7.0 nghttp2/1.31.0 tesseract \u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \u5355\u4e00\u547d\u4ee4: tesseract --help # \u663e\u793a\u7b80\u77ed\u7684\u5e2e\u52a9\u6587\u6863 tesseract --help-extra # \u663e\u793a\u5b8c\u6574\u7684\u5e2e\u52a9\u6587\u6863 tesseract --help-psm # \u663e\u793a-psmk\u53ef\u9009\u547d\u4ee4\u7684\u53c2\u6570\u7684\u8bf4\u660e tesseract --help-oem # \u663e\u793a-oem\u53ef\u9009\u547d\u4ee4\u7684\u53c2\u6570\u7684\u8bf4\u660e tesseract -v, --version # \u663e\u793a-oem\u7248\u672c\u4fe1\u606f tesseract --list-langs # \u5217\u51fa\u5f53\u524dtesseract\u5f15\u64ce\u7684\u53ef\u7528\u8bed\u8a00 tesseract --print-parameters # \u6253\u5370tesseract\u7684\u53c2\u6570 OCR\u547d\u4ee4: tesseract \u8fa8\u8bc6\u7684\u56fe\u7247 \u8f93\u51fa\u6587\u6863 [\u53ef\u9009\u547d\u4ee4] \u53ef\u9009\u547d\u4ee4: --dpi VALUE \u6307\u5b9a\u8f93\u5165\u56fe\u7247\u7684DPI -l LANG[+LANG] \u6307\u5b9aOCR\u65f6\u4f7f\u7528\u7684\u8bed\u8a00 --psm NUM \u6307\u5b9a\u9875\u9762\u5206\u5272\u6a21\u5f0f --oem NUM \u6307\u5b9aOCR\u5f15\u64ce\u6a21\u5f0f --psm \u548c --oem \u76f8\u5173\u53c2\u6570\u7684\u8bf4\u660e\u5982\u4e0b\uff1a Page segmentation modes: 0 Orientation and script detection (OSD) only. 1 Automatic page segmentation with OSD. 2 Automatic page segmentation, but no OSD, or OCR. (not implemented) 3 Fully automatic page segmentation, but no OSD. (Default) 4 Assume a single column of text of variable sizes. 5 Assume a single uniform block of vertically aligned text. 6 Assume a single uniform block of text. 7 Treat the image as a single text line. 8 Treat the image as a single word. 9 Treat the image as a single word in a circle. 10 Treat the image as a single character. 11 Sparse text. Find as much text as possible in no particular order. 12 Sparse text with OSD. 13 Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific. OCR Engine modes: 0 Legacy engine only. 1 Neural nets LSTM engine only. 2 Legacy + LSTM engines. 3 Default, based on what is available. tesseract \u652f\u6301\u540c\u65f6\u8bc6\u522b\u591a\u79cd\u8bed\u8a00\uff0c\u4f8b\u5982\u4ee5\u4e0b\u547d\u4ee4\u4ee3\u8868\u540c\u65f6\u8bc6\u522btest.png\u56fe\u7247\u4e2d\u7684\u7b80\u4f53\u4e2d\u6587\u548c\u82f1\u6587\uff1a tesseract -l chi_sim+end test.png tesseract\u652f\u6301\u8f93\u51fa\u53ef\u641c\u7d22\u7684pdf\uff1a tesseract -l eng test.png test.pdf pdf \u8fd9\u5c06\u521b\u5efa\u5e26\u6709\u56fe\u50cf\u7684pdf\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u5df2\u8bc6\u522b\u6587\u672c\u7684\u5355\u72ec\u53ef\u641c\u7d22\u6587\u672c\u5c42\u3002","title":"Tesseract"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.4.OCR.html#pytesseract","text":"pytesseract \u662f\u4e00\u4e2aPython\u5e93\uff0c\u5b83\u5c01\u88c5\u4e86 Tesseract \uff0c\u5373\u4e3aTesseract\u63d0\u4f9b\u4e86Python\u63a5\u53e3\u3002 # If you don't have tesseract executable in your PATH, include the following: tesseract_path = r \"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\" pytesseract . pytesseract . tesseract_cmd = tesseract_path \u73b0\u5728\u6709\u4e00\u5f20\u540d\u4e3a ocr_sample.png \u7684\u56fe\u7247\u5982\u4e0b\uff1a # Simple image to string print ( pytesseract . image_to_string ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim+eng\" )) \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[7\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9 \u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u8bbe\u7f6e timeout \u53c2\u6570\u3002 # Timeout/terminate the tesseract job after a period of time try : # Timeout after half a second print ( pytesseract . image_to_string ( 'test.jpg' , timeout = 0.5 )) except RuntimeError as timeout_error : # Tesseract processing is terminated pass \u73b0\u5728\u6709\u4e00\u4e2a\u50a8\u5b58\u7740\u56fe\u7247\u8def\u5f84\u5217\u8868\u7684\u6587\u672c\u6587\u4ef6\uff1a with open ( \"../datasets/file/ocr_list.txt\" , \"r\" ) as f : print ( f . read ()) ../datasets/file/ocr_sample.png ../datasets/file/ocr_sample.png # Batch processing with a single file containing the list of multiple image file paths print ( pytesseract . image_to_string ( \"../datasets/file/ocr_list.txt\" , lang = \"chi_sim\" )) \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[7\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9 \u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 \u4e3a\u4e86\u63d0\u9ad8\u5c0f\u76ee\u6807\u68c0\u6d4b\u7684\u7cbe\u5ea6\uff0c\u5404\u8def\u5b66\u8005\u63d0\u51fa\u4e86\u8bb8\u591a\u884c\u4e4b\u6709\u6548\u7684\u65b9\u6848\u3002 Lin \u7b49[7\u4ece\u635f\u5931\u51fd\u6570\u65b9\u9762\u51fa\u53d1\uff0c\u63d0\u51fa\u4e86 RetinaNet\u3002RetinaNet \u4e3b\u8981\u89e3\u51b3\u4e86\u5355\u9636 \u6bb5\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u5f20\u56fe\u4ec5\u6709\u51e0\u4e2a\u76ee\u6807\uff0c\u800c\u4ea7\u751f\u7684\u5019 \u9009\u6846\u5374\u662f\u6210\u5343\u4e0a\u767e\uff0c\u8d1f\u6837\u672c\u5bf9 \u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u8fdc\u8fdc\u5927\u4e8e\u6b63\u6837\u672c\u3002\u5982\u6b64\u4e00\u6765\uff0c \u6a21\u578b\u4fbf\u4f1a\u8fc7\u5206\u5173\u6ce8\u8d1f\u6837\u672c\uff0c\u4e5f\u66f4\u5bb9\u6613\u53d1\u751f\u5bf9\u6b63\u6837\u672c\u7684\u6f0f\u68c0\u73b0\u8c61\u3002RetinaNet \u4f7f\u7528\u7684 Focal Loss \u63d0\u9ad8\u4e86\u5bf9\u5c11\u91cf\u6837\u672c\u7684\u5173\u6ce8\uff0c\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002 \u8fd4\u56de\u53ef\u8bc6\u522b\u5b57\u7b26\u548c\u53ef\u8bc6\u522b\u5b57\u7b26\u7684\u8fb9\u754c\u3002 # Get bounding box estimates boxes = pytesseract . image_to_boxes ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim\" ) print ( \" \\n \" . join ( boxes . split ( \" \\n \" )[: 6 ])) \u4e3a 44 162 72 179 0 \u4e86 71 153 84 183 0 \u63d0 83 162 98 179 0 \u9ad8 101 162 129 179 0 \u5c0f 131 167 136 174 0 \u76ee 146 162 164 179 0 \u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u5b57\u7b26\u8fb9\u754c\u3001\u7f6e\u4fe1\u5ea6\u3001\u884c\u6570\u3001\u9875\u6570 # Get verbose data including boxes, confidences, line and page numbers more_info = pytesseract . image_to_data ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim\" ) print ( \" \\n \" . join ( more_info . split ( \" \\n \" )[: 10 ])) level page_num block_num par_num line_num word_num left top width height conf text 1 1 0 0 0 0 0 0 687 188 -1 2 1 1 0 0 0 10 9 672 171 -1 3 1 1 1 0 0 44 9 557 17 -1 4 1 1 1 1 0 44 9 557 17 -1 5 1 1 1 1 1 44 9 28 17 96 \u4e3a 5 1 1 1 1 2 71 5 13 30 96 \u4e86 5 1 1 1 1 3 83 9 46 17 95 \u63d0\u9ad8 5 1 1 1 1 4 131 14 5 7 96 \u5c0f 5 1 1 1 1 5 146 9 28 17 96 \u76ee\u6807 \u83b7\u53d6\u9875\u9762\u6587\u5b57\u65b9\u5411\u4fe1\u606f\u3002 # Get information about orientation and script detection print ( pytesseract . image_to_osd ( Image . open ( \"../datasets/file/ocr_sample.png\" ), lang = \"chi_sim\" )) Page number: 0 Orientation in degrees: 270 Rotate: 90 Orientation confidence: 170.00 Script: Latin Script confidence: 2.00 \u751f\u6210\u53ef\u641c\u7d22\u7684PDF\u3002 # Get a searchable PDF pdf = pytesseract . image_to_pdf_or_hocr ( \"../datasets/file/ocr_sample.png\" , lang = \"chi_sim\" , extension = \"pdf\" ) with open ( \"../datasets/file/ocr_sample.pdf\" , \"w+b\" ) as f : f . write ( pdf ) # pdf type is bytes by default os . remove ( \"../datasets/file/ocr_sample.pdf\" ) \u83b7\u53d6 hocr\u683c\u5f0f\u7684\u8f93\u51fa\u3002 hOCR\u662f\u4e00\u79cdHTML\u6587\u4ef6\uff0c\u5b83\u5bf9\u6bcf\u4e2a\u8bc6\u522b\u7684\u5b57\u8bcd\u4f1a\u540e\u4e00\u4e9b\u53c2\u6570\u7684\u8bf4\u660e\u3002 # Get HOCR output hocr = pytesseract . image_to_pdf_or_hocr ( \"../datasets/file/ocr_sample.png\" , lang = \"chi_sim\" , extension = \"hocr\" ) \u83b7\u53d6 ALTO XML \u683c\u5f0f\u7684\u8f93\u51fa\u3002 # Get ALTO XML output xml = pytesseract . image_to_alto_xml ( \"../datasets/file/ocr_sample.png\" )","title":"pytesseract"},{"location":"%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/16.4.OCR.html#_1","text":"[ \u5be6\u7528\u5fc3\u5f97 ] Tesseract-OCR \u672c\u5730\u8f6c\u6362\u4e2d\u82f1\u6587\u626b\u63cf\u7248PDF\u4e3a\u53ef\u641c\u7d22\u6587\u4ef6","title":"\u53c2\u8003"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.1.string.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Template \u5728 string.Template \u4e2d\uff0c\u901a\u8fc7\u524d\u7f6e $ \u6765\u8bc6\u522b\u53d8\u91cf\uff08\u4f8b\u5982\uff0c $var \uff09\u3002\u53e6\u5916\uff0c \u5982\u679c\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u62ec\u53f7\u5c06\u5b83\u4eec\u4ece\u5468\u56f4\u7684\u6587\u672c\u4e2d\u5206\u5f00\uff08\u4f8b\u5982\uff0c ${var} \uff09\u3002 \u901a\u8fc7\u4f8b\u5b50\u6765\u5bf9\u6bd4\u4e0b\uff1a values = { 'var' : 'foo' } t = string . Template ( \"\"\" Variable : $var Escape : $$ Variable in text: $ {var} iable \"\"\" ) print ( 'TEMPLATE:' , t . substitute ( values )) s = \"\"\" Variable : %(var)s Escape : %% Variable in text: %(var)s iable \"\"\" print ( 'INTERPOLATION:' , s % values ) s = \"\"\" Variable : {var} Escape : {{}} Variable in text: {var} iable \"\"\" print ( 'FORMAT:' , s . format ( ** values )) TEMPLATE: Variable : foo Escape : $ Variable in text: fooiable INTERPOLATION: Variable : foo Escape : % Variable in text: fooiable FORMAT: Variable : foo Escape : {} Variable in text: fooiable \u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u89e6\u53d1\u5b57\u7b26\uff08 $ \u548c % \uff09\u9700\u8981\u91cd\u590d\u4e24\u6b21\u6765\u8f6c\u4e49\u3002\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u683c\u5f0f\u5316\u8bed\u6cd5\uff0c { \u548c } \u90fd\u9700\u8981\u91cd\u590d\u624d\u80fd\u8f6c\u4e49\u3002 Template \u6ca1\u6709\u53ef\u7528\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u4f8b\u5982\uff0c\u65e0\u6cd5\u63a7\u5236\u7528\u6765\u8868\u793a\u6d6e\u70b9\u6570\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4f7f\u7528 safe_substitute() \u65b9\u6cd5\u53ef\u4ee5\u5e26\u6765\u4e00\u4e2a\u597d\u5904\uff0c\u90a3\u5c31\u662f\u5982\u679c\u6a21\u677f\u9700\u8981\u7684\u503c\u6ca1\u6709\u5168\u90e8\u4f5c\u4e3a\u53c2\u6570\u63d0\u4f9b\u7ed9\u6a21\u677f\u7684\u8bdd\u53ef\u4ee5\u907f\u514d\u53d1\u751f\u5f02\u5e38\u3002 values = { 'var' : 'foo' } t = string . Template ( \"$var is here but $missing is not provided\" ) try : print ( 'substitute() :' , t . substitute ( values )) except KeyError as err : print ( 'ERROR:' , str ( err )) print ( 'safe_substitute():' , t . safe_substitute ( values )) ERROR: 'missing' safe_substitute(): foo is here but $missing is not provided \u56e0\u4e3a\u5728 values \u5b57\u5178\u4e2d\u6ca1\u6709\u503c\u63d0\u4f9b\u7ed9 missing , \u6240\u4ee5 substitute() \u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u5f02\u5e38\u3002\u800c safe_substitute() \u5c06\u6355\u6349\u8fd9\u4e2a\u5f02\u5e38\u5e76\u5c06\u53d8\u91cf\u8868\u8fbe\u5f0f\u5355\u72ec\u7559\u5728\u6587\u672c\u4e2d\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\u3002 string.Template \u7f3a\u7701\u8bed\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6765\u8c03\u6574\uff0c\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4e00\u822c\u662f\u7528\u6765\u5bfb\u627e\u6a21\u677f\u5185\u5bb9\u5185\u53d8\u91cf\u540d\u5b57\u7684\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u6539\u53d8 delimiter \u548c idpattern \u7684\u7c7b\u5c5e\u6027\u6765\u505a\u8c03\u6574\u3002 class MyTemplate ( string . Template ): delimiter = '%' idpattern = '[a-z]+_[a-z]+' template_text = ''' Delimiter : %% Replaced : %with_underscore Ignored : %notunderscored ''' d = { 'with_underscore' : 'replaced' , 'notunderscored' : 'not replaced' , } t = MyTemplate ( template_text ) print ( 'Modified ID pattern:' ) print ( t . safe_substitute ( d )) Modified ID pattern: Delimiter : % Replaced : replaced Ignored : %notunderscored \u5728\u8fd9\u4e2a\u793a\u4f8b\u91cc\uff0c\u66ff\u6362\u89c4\u5219\u8fdb\u884c\u4e86\u53d8\u66f4\uff0c\u5206\u9694\u7b26\u7528 % \u6765\u66ff\u4ee3\u4e86 $ \u5e76\u4e14\u53d8\u91cf\u540d\u5b57\u4e2d\u5fc5\u987b\u5305\u542b\u4e0b\u5212\u7ebf\u3002 %notunderscored \u6a21\u5f0f\u5e76\u6ca1\u6709\u88ab\u66ff\u6362\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5305\u62ec\u4e0b\u5212\u7ebf\u5b57\u7b26\u3002 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6539\u53d8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 pattern \u5c5e\u6027\u548c\u5b9a\u4e49\u4e00\u4e2a\u5168\u65b0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u3002\u8986\u5199\u7684\u6a21\u5f0f\u5fc5\u987b\u63d0\u4f9b\u56db\u4e2a\u547d\u540d\u7ec4\u6765\u83b7\u53d6\u672a\u8bc6\u522b\u7684\u5206\u9694\u7b26\u3001\u547d\u540d\u7684\u53d8\u91cf\u3001\u5927\u62ec\u53f7\u6a21\u5f0f\u7684\u53d8\u91cf\u540d\u79f0\u3001\u548c\u65e0\u6548\u7684\u5206\u9694\u7b26\u6a21\u5f0f\u3002 t.pattern \u7684\u503c\u662f\u7f16\u8bd1\u597d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684 pattern \u5c5e\u6027\u6765\u83b7\u53d6 t = string . Template ( '$var' ) print ( t . pattern . pattern ) \\$(?: (?P<escaped>\\$) | # Escape sequence of two delimiters (?P<named>(?a:[_a-z][_a-z0-9]*)) | # delimiter and a Python identifier {(?P<braced>(?a:[_a-z][_a-z0-9]*))} | # delimiter and a braced identifier (?P<invalid>) # Other ill-formed delimiter exprs ) \u4e0b\u9762\u7684\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6a21\u5f0f\u6765\u751f\u6210\u4e00\u79cd\u65b0\u7684\u6a21\u677f\uff0c\u4f7f\u7528 {{var}} \u4f5c\u4e3a\u53d8\u91cf\u8bed\u6cd5\u3002 import re import string class MyTemplate ( string . Template ): delimiter = '{{' pattern = r ''' \\{\\{(?: (?P<escaped>\\{\\{)| (?P<named>[_a-z][_a-z0-9]*)\\}\\}| (?P<braced>[_a-z][_a-z0-9]*)\\}\\}| (?P<invalid>) ) ''' t = MyTemplate ( ''' {{{{ {{var}} ''' ) print ( 'MATCHES:' , t . pattern . findall ( t . template )) print ( 'SUBSTITUTED:' , t . safe_substitute ( var = 'replacement' )) MATCHES: [('{{', '', '', ''), ('', 'var', '', '')] SUBSTITUTED: {{ replacement named \u548c braced \u4e24\u4e2a\u6a21\u5f0f\u90fd\u5fc5\u987b\u5355\u72ec\u63d0\u4f9b\uff0c\u867d\u7136\u5b83\u4eec\u90fd\u662f\u4e00\u6837\u7684\u3002 Formatter Formatter \u7c7b\u7684\u6267\u884c\u6548\u679c\u4e0e str \u7684 format() \u65b9\u6cd5\u4e00\u81f4\uff0c\u5b83\u7684\u7279\u5f81\u5305\u62ec\u578b\u6001\u8f6c\u6362\uff0c\u6392\u5217\uff0c\u5c5e\u6027\u4ee5\u53ca\u5b57\u6bb5\u5f15\u7528\uff0c\u5df2\u547d\u540d\u7279\u5b9a\u4f4d\u7f6e\u7684\u6a21\u677f\u53c2\u6570\uff0c \u4ee5\u53ca\u7279\u5b9a\u7c7b\u578b\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u901a\u5e38 format() \u65b9\u6cd5\u5bf9\u4e8e\u8fd9\u4e9b\u7279\u5f81\u662f\u6700\u4fbf\u6377\u7684\u63a5\u53e3\uff0c\u4f46 Formatter \u63d0\u4f9b\u4e86\u5efa\u7acb\u5b50\u7c7b\u7684\u65b9\u6cd5\uff0c\u5728\u9700\u8981\u591a\u6001\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002 \u5e38\u91cf string \u6a21\u5757\u5305\u542b\u4e86\u4e0e ASCII \u3001\u6570\u5b57\u5b57\u7b26\u76f8\u5173\u7684\u4e00\u7cfb\u5217\u5e38\u91cf\u3002\u8fd9\u4e9b\u5e38\u91cf\u5728\u5904\u7406 ASCII \u6570\u636e\u65f6\u662f\u975e\u5e38\u6709\u6548\u7684\uff0c\u4f46\u662f\u73b0\u5728\u5927\u5bb6\u4f1a\u8d8a\u6765\u8d8a\u591a\u7684\u9047\u5230 Unicode \u7c7b\u578b\u7684\u975e ASCII \u6587\u672c\uff0c\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u7684\u8fd9\u4e9b\u5e38\u91cf\u7684\u4f5c\u7528\u5c31\u5f88\u6709\u9650\u4e86\u3002 import inspect import string def is_str ( value ): return isinstance ( value , str ) for name , value in inspect . getmembers ( string , is_str ): if name . startswith ( '_' ): continue print ( ' %s = %r \\n ' % ( name , value )) ascii_letters='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ascii_lowercase='abcdefghijklmnopqrstuvwxyz' ascii_uppercase='ABCDEFGHIJKLMNOPQRSTUVWXYZ' digits='0123456789' hexdigits='0123456789abcdefABCDEF' octdigits='01234567' printable='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c' punctuation='!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' whitespace=' \\t\\n\\r\\x0b\\x0c'","title":"6.1.string"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.1.string.html#template","text":"\u5728 string.Template \u4e2d\uff0c\u901a\u8fc7\u524d\u7f6e $ \u6765\u8bc6\u522b\u53d8\u91cf\uff08\u4f8b\u5982\uff0c $var \uff09\u3002\u53e6\u5916\uff0c \u5982\u679c\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u62ec\u53f7\u5c06\u5b83\u4eec\u4ece\u5468\u56f4\u7684\u6587\u672c\u4e2d\u5206\u5f00\uff08\u4f8b\u5982\uff0c ${var} \uff09\u3002 \u901a\u8fc7\u4f8b\u5b50\u6765\u5bf9\u6bd4\u4e0b\uff1a values = { 'var' : 'foo' } t = string . Template ( \"\"\" Variable : $var Escape : $$ Variable in text: $ {var} iable \"\"\" ) print ( 'TEMPLATE:' , t . substitute ( values )) s = \"\"\" Variable : %(var)s Escape : %% Variable in text: %(var)s iable \"\"\" print ( 'INTERPOLATION:' , s % values ) s = \"\"\" Variable : {var} Escape : {{}} Variable in text: {var} iable \"\"\" print ( 'FORMAT:' , s . format ( ** values )) TEMPLATE: Variable : foo Escape : $ Variable in text: fooiable INTERPOLATION: Variable : foo Escape : % Variable in text: fooiable FORMAT: Variable : foo Escape : {} Variable in text: fooiable \u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u89e6\u53d1\u5b57\u7b26\uff08 $ \u548c % \uff09\u9700\u8981\u91cd\u590d\u4e24\u6b21\u6765\u8f6c\u4e49\u3002\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u683c\u5f0f\u5316\u8bed\u6cd5\uff0c { \u548c } \u90fd\u9700\u8981\u91cd\u590d\u624d\u80fd\u8f6c\u4e49\u3002 Template \u6ca1\u6709\u53ef\u7528\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u4f8b\u5982\uff0c\u65e0\u6cd5\u63a7\u5236\u7528\u6765\u8868\u793a\u6d6e\u70b9\u6570\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4f7f\u7528 safe_substitute() \u65b9\u6cd5\u53ef\u4ee5\u5e26\u6765\u4e00\u4e2a\u597d\u5904\uff0c\u90a3\u5c31\u662f\u5982\u679c\u6a21\u677f\u9700\u8981\u7684\u503c\u6ca1\u6709\u5168\u90e8\u4f5c\u4e3a\u53c2\u6570\u63d0\u4f9b\u7ed9\u6a21\u677f\u7684\u8bdd\u53ef\u4ee5\u907f\u514d\u53d1\u751f\u5f02\u5e38\u3002 values = { 'var' : 'foo' } t = string . Template ( \"$var is here but $missing is not provided\" ) try : print ( 'substitute() :' , t . substitute ( values )) except KeyError as err : print ( 'ERROR:' , str ( err )) print ( 'safe_substitute():' , t . safe_substitute ( values )) ERROR: 'missing' safe_substitute(): foo is here but $missing is not provided \u56e0\u4e3a\u5728 values \u5b57\u5178\u4e2d\u6ca1\u6709\u503c\u63d0\u4f9b\u7ed9 missing , \u6240\u4ee5 substitute() \u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u5f02\u5e38\u3002\u800c safe_substitute() \u5c06\u6355\u6349\u8fd9\u4e2a\u5f02\u5e38\u5e76\u5c06\u53d8\u91cf\u8868\u8fbe\u5f0f\u5355\u72ec\u7559\u5728\u6587\u672c\u4e2d\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\u3002 string.Template \u7f3a\u7701\u8bed\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6765\u8c03\u6574\uff0c\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4e00\u822c\u662f\u7528\u6765\u5bfb\u627e\u6a21\u677f\u5185\u5bb9\u5185\u53d8\u91cf\u540d\u5b57\u7684\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u6539\u53d8 delimiter \u548c idpattern \u7684\u7c7b\u5c5e\u6027\u6765\u505a\u8c03\u6574\u3002 class MyTemplate ( string . Template ): delimiter = '%' idpattern = '[a-z]+_[a-z]+' template_text = ''' Delimiter : %% Replaced : %with_underscore Ignored : %notunderscored ''' d = { 'with_underscore' : 'replaced' , 'notunderscored' : 'not replaced' , } t = MyTemplate ( template_text ) print ( 'Modified ID pattern:' ) print ( t . safe_substitute ( d )) Modified ID pattern: Delimiter : % Replaced : replaced Ignored : %notunderscored \u5728\u8fd9\u4e2a\u793a\u4f8b\u91cc\uff0c\u66ff\u6362\u89c4\u5219\u8fdb\u884c\u4e86\u53d8\u66f4\uff0c\u5206\u9694\u7b26\u7528 % \u6765\u66ff\u4ee3\u4e86 $ \u5e76\u4e14\u53d8\u91cf\u540d\u5b57\u4e2d\u5fc5\u987b\u5305\u542b\u4e0b\u5212\u7ebf\u3002 %notunderscored \u6a21\u5f0f\u5e76\u6ca1\u6709\u88ab\u66ff\u6362\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5305\u62ec\u4e0b\u5212\u7ebf\u5b57\u7b26\u3002 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6539\u53d8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 pattern \u5c5e\u6027\u548c\u5b9a\u4e49\u4e00\u4e2a\u5168\u65b0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u3002\u8986\u5199\u7684\u6a21\u5f0f\u5fc5\u987b\u63d0\u4f9b\u56db\u4e2a\u547d\u540d\u7ec4\u6765\u83b7\u53d6\u672a\u8bc6\u522b\u7684\u5206\u9694\u7b26\u3001\u547d\u540d\u7684\u53d8\u91cf\u3001\u5927\u62ec\u53f7\u6a21\u5f0f\u7684\u53d8\u91cf\u540d\u79f0\u3001\u548c\u65e0\u6548\u7684\u5206\u9694\u7b26\u6a21\u5f0f\u3002 t.pattern \u7684\u503c\u662f\u7f16\u8bd1\u597d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684 pattern \u5c5e\u6027\u6765\u83b7\u53d6 t = string . Template ( '$var' ) print ( t . pattern . pattern ) \\$(?: (?P<escaped>\\$) | # Escape sequence of two delimiters (?P<named>(?a:[_a-z][_a-z0-9]*)) | # delimiter and a Python identifier {(?P<braced>(?a:[_a-z][_a-z0-9]*))} | # delimiter and a braced identifier (?P<invalid>) # Other ill-formed delimiter exprs ) \u4e0b\u9762\u7684\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6a21\u5f0f\u6765\u751f\u6210\u4e00\u79cd\u65b0\u7684\u6a21\u677f\uff0c\u4f7f\u7528 {{var}} \u4f5c\u4e3a\u53d8\u91cf\u8bed\u6cd5\u3002 import re import string class MyTemplate ( string . Template ): delimiter = '{{' pattern = r ''' \\{\\{(?: (?P<escaped>\\{\\{)| (?P<named>[_a-z][_a-z0-9]*)\\}\\}| (?P<braced>[_a-z][_a-z0-9]*)\\}\\}| (?P<invalid>) ) ''' t = MyTemplate ( ''' {{{{ {{var}} ''' ) print ( 'MATCHES:' , t . pattern . findall ( t . template )) print ( 'SUBSTITUTED:' , t . safe_substitute ( var = 'replacement' )) MATCHES: [('{{', '', '', ''), ('', 'var', '', '')] SUBSTITUTED: {{ replacement named \u548c braced \u4e24\u4e2a\u6a21\u5f0f\u90fd\u5fc5\u987b\u5355\u72ec\u63d0\u4f9b\uff0c\u867d\u7136\u5b83\u4eec\u90fd\u662f\u4e00\u6837\u7684\u3002","title":"Template"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.1.string.html#formatter","text":"Formatter \u7c7b\u7684\u6267\u884c\u6548\u679c\u4e0e str \u7684 format() \u65b9\u6cd5\u4e00\u81f4\uff0c\u5b83\u7684\u7279\u5f81\u5305\u62ec\u578b\u6001\u8f6c\u6362\uff0c\u6392\u5217\uff0c\u5c5e\u6027\u4ee5\u53ca\u5b57\u6bb5\u5f15\u7528\uff0c\u5df2\u547d\u540d\u7279\u5b9a\u4f4d\u7f6e\u7684\u6a21\u677f\u53c2\u6570\uff0c \u4ee5\u53ca\u7279\u5b9a\u7c7b\u578b\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u901a\u5e38 format() \u65b9\u6cd5\u5bf9\u4e8e\u8fd9\u4e9b\u7279\u5f81\u662f\u6700\u4fbf\u6377\u7684\u63a5\u53e3\uff0c\u4f46 Formatter \u63d0\u4f9b\u4e86\u5efa\u7acb\u5b50\u7c7b\u7684\u65b9\u6cd5\uff0c\u5728\u9700\u8981\u591a\u6001\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002","title":"Formatter"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.1.string.html#_1","text":"string \u6a21\u5757\u5305\u542b\u4e86\u4e0e ASCII \u3001\u6570\u5b57\u5b57\u7b26\u76f8\u5173\u7684\u4e00\u7cfb\u5217\u5e38\u91cf\u3002\u8fd9\u4e9b\u5e38\u91cf\u5728\u5904\u7406 ASCII \u6570\u636e\u65f6\u662f\u975e\u5e38\u6709\u6548\u7684\uff0c\u4f46\u662f\u73b0\u5728\u5927\u5bb6\u4f1a\u8d8a\u6765\u8d8a\u591a\u7684\u9047\u5230 Unicode \u7c7b\u578b\u7684\u975e ASCII \u6587\u672c\uff0c\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u7684\u8fd9\u4e9b\u5e38\u91cf\u7684\u4f5c\u7528\u5c31\u5f88\u6709\u9650\u4e86\u3002 import inspect import string def is_str ( value ): return isinstance ( value , str ) for name , value in inspect . getmembers ( string , is_str ): if name . startswith ( '_' ): continue print ( ' %s = %r \\n ' % ( name , value )) ascii_letters='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ascii_lowercase='abcdefghijklmnopqrstuvwxyz' ascii_uppercase='ABCDEFGHIJKLMNOPQRSTUVWXYZ' digits='0123456789' hexdigits='0123456789abcdefABCDEF' octdigits='01234567' printable='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c' punctuation='!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' whitespace=' \\t\\n\\r\\x0b\\x0c'","title":"\u5e38\u91cf"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html","text":"import os Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.28 os\u6807\u51c6\u6a21\u5757\u53ea\u6709\u4e00\u4e2a\u5b50\u6a21\u5757\u2014\u2014os.path\u6a21\u5757\u3002os.path \u6a21\u5757\u63d0\u4f9b\u4e86\u8de8\u5e73\u53f0\u5904\u7406\u6587\u4ef6\u8def\u5f84\u7684\u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u5728windows\u7cfb\u7edf\u4e0a\uff0cos.path\u6a21\u5757\u662fntpath\u6a21\u5757\u3002\u8fd9\u4e9b\u5904\u7406\u8def\u5f84\u7684\u51fd\u6570\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u771f\u5b9e\u5b58\u5728\u7684\u8def\u5f84\uff0c\u672c\u8d28\u4e0a\u5b83\u4eec\u53ea\u662f\u64cd\u4f5c\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 os.path\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e9b\u53d8\u91cf\uff0cos.path\u5bf9\u8def\u5f84\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u53d8\u91cf\u3002 explanation code output \u8def\u5f84\u5404\u90e8\u5206\u7684\u5206\u9694\u7b26 os.path.sep \\ \u8def\u5f84\u5404\u90e8\u5206\u7684\u53ef\u9009\u5206\u9694\u7b26 os.path.altsep / \u7cfb\u7edf\u53d8\u91cf\u4e2dPATH\u53d8\u91cf\u7684\u5206\u9694\u7b26 os.path.pathsep ; \u6587\u4ef6\u540d\u548c\u6269\u5c55\u540d\u4e4b\u95f4\u7684\u5206\u9694\u7b26 os.path.extsep . \u8868\u793a\u5f53\u524d\u76ee\u5f55\u7684\u8def\u5f84\u7ec4\u4ef6 os.path.curdir . \u8868\u793a\u4e0a\u7ea7\u76ee\u5f55\u7684\u8def\u5f84\u7ec4\u4ef6 os.path.pardir .. \u7cfb\u7edf\u9ed8\u8ba4\u641c\u7d22\u8def\u5f84 os.path.defpath .;C:\\bin NULL\u8bbe\u5907\u8def\u5f84 os.path.devnull nul \u662f\u5426\u652f\u6301\u4efb\u610fUnicode\u5b57\u7b26\u7528\u4f5c\u6587\u4ef6\u540d os.path.supports_unicode_filenames TRUE \u62c6\u5206\u8def\u5f84 \u51fd\u6570 \u793a\u4f8b \u8bf4\u660e .basename() C:\\one\\two\\three \u2192 three \u8fd4\u56de\u8def\u5f84\u7684\u6700\u540e\u4e00\u5c42 .dirname() C:\\one\\two\\three \u2192 C:\\one\\two \u8fd4\u56de\u8def\u5f84\u7684\u7b2c\u4e00\u5c42\u81f3\u5012\u6570\u7b2c\u4e8c\u5c42 .splitext() one.txt \u2192 one \u3001 txt \u6839\u636e os.extsep \u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32 .splitdrive() C:/one \u2192 C: \u3001 /one \u5206\u5272\u8def\u5f84\u7684\u76d8\u7b26\u548c\u5176\u4f59\u90e8\u5206 .basename() \u8fd4\u56de\u8def\u5f84\u7684\u6700\u540e\u4e00\u5c42 os . path . basename ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # r\"C:\\one\\two\\three\".rsplit(\"\\\\\", maxsplit=1)[1] 'three' \u5982\u679c\u8def\u5f84\u662f\u4ee5\u76ee\u5f55\u5206\u9694\u7b26 os.sep \u7ed3\u5c3e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u7684\u57fa\u7840\u90e8\u5206\u5c06\u88ab\u8ba4\u4e3a\u662f\u7a7a\u7684: os . path . basename ( r \"C:/one/two/three/\" ) '' .dirname() \u8fd4\u56de\u8def\u5f84\u7684\u7b2c\u4e00\u5c42\u5230\u5012\u6570\u7b2c\u4e8c\u5c42\uff1a os . path . dirname ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # \"C:/one/two/three/\".rsplit(\"/\", maxsplit=1)[0] 'C:\\\\one\\\\two' \u5c06 basename() \u548c dirname() \u7684\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\uff0c\u5c31\u4f1a\u5f97\u5230\u539f\u59cb\u7684\u8def\u5f84\u3002 \u4f7f\u7528 .split \u53ef\u4ee5\u540c\u65f6\u5f97\u5230 basename() \u548c dirname() \u7684\u7ed3\u679c\uff1a print ( os . path . split ( p = r \"C:\\one\\two\\three\" )) print ( os . path . split ( p = r \"C:\\one\\two\\three.txt\" )) ('C:\\\\one\\\\two', 'three') ('C:\\\\one\\\\two', 'three.txt') .splitext() \u6839\u636e os.extsep \u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32\uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt\" )) # \u7b49\u4ef7\u4e8e print ( r \"C:/one/two/three.txt\" . rsplit ( \".\" , maxsplit = 1 )) ('C:/one/two/three', '.txt') ['C:/one/two/three', 'txt'] \u67e5\u627e\u6587\u4ef6\u6269\u5c55\u540d\u7684\u65f6\uff0c\u53ea\u4f7f\u7528\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684 os.extsep \uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt.md\" )) ('C:/one/two/three.txt', '.md') .splitdrive() \u5c06\u8def\u5f84\u7684\u76d8\u7b26\u548c\u5176\u4f59\u90e8\u5206\u5206\u5f00\uff1a print ( os . path . splitdrive ( p = r \"C:/one/two/three.txt\" )) print ( os . path . splitdrive ( p = r \"/one/two/three.txt\" )) ('C:', '/one/two/three.txt') ('', '/one/two/three.txt') \u6784\u5efa\u8def\u5f84 \u51fd\u6570 \u793a\u4f8b \u8bf4\u660e .join() one \u3001 two \u2192 'one\\\\two \u62fc\u63a5\u8def\u5f84 .expanduser() ~ \u2192 C:\\\\Users\\\\Username \u5c06 ~ \u66ff\u6362\u4e3a\u7528\u6237\u76ee\u5f55 .expandvars() $Env_var \u2192 Env_var \u5c06 $Env_var \u66ff\u6362\u4e3a\u73af\u5883\u53d8\u91cf\u7684\u503c os.path.join \u53ef\u4ee5\u5c06\u591a\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u4e3a\u4e00\u4e2a\u8def\u5f84\u3002\u5982\u679c\u67d0\u4e2a\u53c2\u6570\u662f\u4ee5 os.sep \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u90fd\u5c06\u88ab\u4e22\u5f03\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u5c06\u4ee5\u5b83\u4f5c\u4e3a\u65b0\u7684\u5f00\u59cb\u3002 PATHS = [ ( 'one' , 'two' , 'three' ), ( '/' , 'one' , 'two' , 'three' ), ( '/one' , '/two' , '/three' ), ] for parts in PATHS : print ( ' {0:<30} : {1!r} ' . format ( str ( parts ), os . path . join ( * parts ))) ('one', 'two', 'three') : 'one\\\\two\\\\three' ('/', 'one', 'two', 'three') : '/one\\\\two\\\\three' ('/one', '/two', '/three') : '/three' .expanduser() \u5c06\u4f1a\u8f6c\u5316\u6ce2\u6d6a\u53f7~\u4e3a\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u540d\u79f0\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u7528\u6237\u7684\u4e3b\u76ee\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c06\u88ab\u539f\u6837\u8fd4\u56de\u3002 for user in [ '' , 'dhellmann' , 'nosuchuser' ]: lookup = '~' + user print ( ' {!r:>15} : {!r} ' . format ( lookup , os . path . expanduser ( lookup ))) '~' : 'C:\\\\Users\\\\Android' '~dhellmann' : 'C:\\\\Users\\\\dhellmann' '~nosuchuser' : 'C:\\\\Users\\\\nosuchuser' .expandvars() \u66f4\u4e00\u822c\u5316\uff0c\u5b83\u5c06\u4f1a\u89e3\u6790\u8def\u5f84\u4e2d\u6240\u6709 shell \u73af\u5883\u53d8\u91cf\u3002 os . environ [ 'MYVAR' ] = 'VALUE' os . path . expandvars ( '/path/to/$MYVAR' ) '/path/to/VALUE' \u89c4\u8303\u8def\u5f84 \u4f7f\u7528 .join() \u6216\u8005\u5d4c\u5165\u53d8\u91cf\u7684\u72ec\u7acb\u5b57\u7b26\u4e32\u7ec4\u5408\u7684\u8def\u5f84\u7ed3\u5c3e\u53ef\u80fd\u6709\u989d\u5916\u7684\u8def\u5f84\u5206\u9694\u7b26\u6216\u8005\u76f8\u5bf9\u8def\u5f84\u7ec4\u4ef6\u3002\u4f7f\u7528 .normpath() \u6765\u6e05\u7406\u4ed6\u4eec\uff1a PATHS = [ 'one//two//three' , 'one/./two/./three' , 'one/../alt/two/three' , ] for path in PATHS : print ( ' {!r:>22} : {!r} ' . format ( path , os . path . normpath ( path ))) 'one//two//three' : 'one\\\\two\\\\three' 'one/./two/./three' : 'one\\\\two\\\\three' 'one/../alt/two/three' : 'alt\\\\two\\\\three' \u53ef\u4ee5\u53d1\u73b0\uff0cos.curdir \u548c os.pardir \u7ec4\u6210\u7684\u8def\u5f84\u7247\u6bb5\u5c06\u88ab\u6e05\u9664\u3002 \u4f7f\u7528 abspath() \u53ef\u4ee5\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u5316\u4e3a\u7edd\u5bf9\u8def\u5f84\u3002\u5b9e\u9645\u4e0a\uff0c\u5c31\u662f\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u62fc\u63a5\u5230\u76f8\u5bf9\u8def\u5f84\u4e4b\u524d\u3002 absolute path = os.getcwd() + relative path \u4f7f\u7528 relpath() \u53ef\u4ee5\u5c06\u7edd\u5bf9\u8def\u5f84\u8f6c\u5316\u4e3a\u76f8\u5bf9\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u5c06\u8def\u5f84\u5b57\u7b26\u4e32\u4e2d\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u5254\u9664\u3002 relative path = absolute path.replace(os.getcwd(), \"\") \u4f7f\u7528 normcase() \u53ef\u4ee5\u5c06\u8def\u5f84\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u8f6c\u4e3a\u5c0f\u5199\uff0c\u540c\u65f6\u5c06\u659c\u6760\u7edf\u4e00\u8f6c\u6362\u4e3aos.sep\u3002 os . path . normcase ( 'User \\\\ Desktop/One' ) 'user\\\\desktop\\\\one' \u516c\u5171\u8def\u5f84 .commonprefix() \u51fd\u6570\u4f1a\u63a5\u53d7\u4e00\u4e2a\u8def\u5f84\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u800c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u6240\u6709\u8def\u5f84\u4e2d\u7684\u516c\u5171\u524d\u7f00\u3002\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u80fd\u8868\u793a\u4e00\u4e2a\u5b9e\u9645\u4e0d\u5b58\u5728\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u8def\u5f84\u5206\u9694\u7b26\u5e76\u6ca1\u6709\u88ab\u8003\u8651\u5728\u5185\uff0c\u6240\u4ee5\u8fd9\u4e2a\u516c\u5171\u524d\u7f00\u53ef\u80fd\u5e76\u6ca1\u6709\u843d\u5728\u5206\u9694\u7b26\u8fb9\u754c\u4e0a\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonprefix ( paths )) PATH: /one/two/three/four PATH: /one/two/threefold PATH: /one/two/three/ PREFIX: /one/two/three .commonpath() \u5145\u5206\u8003\u8651\u8def\u5f84\u5206\u9694\u7b26\uff0c\u4f1a\u8fd4\u56de\u8def\u5f84\u5e8f\u5217\u4e2d\u5404\u4e2a\u90e8\u5206\u7684\u6700\u957f\u516c\u5171\u6709\u6548\u5b50\u8def\u5f84\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonpath ( paths )) PATH: /one/two/three/four PATH: /one/two/threefold PATH: /one/two/three/ PREFIX: \\one\\two \u6587\u4ef6\u4fe1\u606f \u51fd\u6570 \u8bf4\u660e .getctime() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u521b\u5efa\u65f6\u95f4 .getmtime() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u4fee\u6539\u65f6\u95f4 .getatime() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u8bbf\u95ee\u65f6\u95f4 .getsize() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09 \u68c0\u67e5\u8def\u5f84 \u51fd\u6570 \u8bf4\u660e .samefile(path1, path2) \u5224\u65ad\u76ee\u5f55\u6216\u6587\u4ef6\u662f\u5426\u76f8\u540c\uff08\u4e0d\u662f\u771f\u5b9e\u7684\u8def\u5f84\uff0c\u4f1a\u62a5\u9519\uff09 .sameopenfile(fp1, fp2) \u5224\u65adfp1\u548cfp2\u662f\u5426\u6307\u5411\u540c\u4e00\u6587\u4ef6 .samestat(stat1, stat2) \u5224\u65adstat tuple stat1\u548cstat2\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u6587\u4ef6 .exists(path) \u68c0\u67e5\u8def\u5f84\u662f\u5426\u5b58\u5728 .lexists(path) \u68c0\u67e5\u8def\u5f84\u662f\u5426\u5b58\u5728\uff0c\u5bf9\u4e8ebroken symbolic links\u4e5f\u8fd4\u56deTrue .isabs(path) \u5224\u65ad\u662f\u5426\u4e3a\u7edd\u5bf9\u8def\u5f84 .isfile(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3a\u6587\u4ef6 .isdir(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3a\u76ee\u5f55 .islink(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3asymbolic link\uff0cWindows\u7cfb\u7edf\u4e0b\u603b\u662f\u8fd4\u56deFalse .ismount(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3a\u6302\u8f7d\u70b9 FILENAMES = [ __file__ , os . path . dirname ( __file__ ), '/' , './broken_link' , ] for file in FILENAMES : print ( 'File : {!r} ' . format ( file )) print ( 'Absolute :' , os . path . isabs ( file )) print ( 'Is File? :' , os . path . isfile ( file )) print ( 'Is Dir? :' , os . path . isdir ( file )) print ( 'Is Link? :' , os . path . islink ( file )) print ( 'Mountpoint? :' , os . path . ismount ( file )) print ( 'Exists? :' , os . path . exists ( file )) print ( 'Link Exists?:' , os . path . lexists ( file )) print () File : os.getcwd() + '8.10.\u6807\u51c6\u5e93_os_path.py' Absolute : True Is File? : True Is Dir? : False Is Link? : False Mountpoint? : False Exists? : True Link Exists?: True File : os.getcwd() Absolute : True Is File? : False Is Dir? : True Is Link? : False Mountpoint? : False Exists? : True Link Exists?: True File : '/' Absolute : True Is File? : False Is Dir? : True Is Link? : False Mountpoint? : True Exists? : True Link Exists?: True File : './broken_link' Absolute : False Is File? : False Is Dir? : False Is Link? : False Mountpoint? : False Exists? : False Link Exists?: False","title":"6.10.os.path"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html#_1","text":"\u51fd\u6570 \u793a\u4f8b \u8bf4\u660e .basename() C:\\one\\two\\three \u2192 three \u8fd4\u56de\u8def\u5f84\u7684\u6700\u540e\u4e00\u5c42 .dirname() C:\\one\\two\\three \u2192 C:\\one\\two \u8fd4\u56de\u8def\u5f84\u7684\u7b2c\u4e00\u5c42\u81f3\u5012\u6570\u7b2c\u4e8c\u5c42 .splitext() one.txt \u2192 one \u3001 txt \u6839\u636e os.extsep \u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32 .splitdrive() C:/one \u2192 C: \u3001 /one \u5206\u5272\u8def\u5f84\u7684\u76d8\u7b26\u548c\u5176\u4f59\u90e8\u5206 .basename() \u8fd4\u56de\u8def\u5f84\u7684\u6700\u540e\u4e00\u5c42 os . path . basename ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # r\"C:\\one\\two\\three\".rsplit(\"\\\\\", maxsplit=1)[1] 'three' \u5982\u679c\u8def\u5f84\u662f\u4ee5\u76ee\u5f55\u5206\u9694\u7b26 os.sep \u7ed3\u5c3e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u7684\u57fa\u7840\u90e8\u5206\u5c06\u88ab\u8ba4\u4e3a\u662f\u7a7a\u7684: os . path . basename ( r \"C:/one/two/three/\" ) '' .dirname() \u8fd4\u56de\u8def\u5f84\u7684\u7b2c\u4e00\u5c42\u5230\u5012\u6570\u7b2c\u4e8c\u5c42\uff1a os . path . dirname ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # \"C:/one/two/three/\".rsplit(\"/\", maxsplit=1)[0] 'C:\\\\one\\\\two' \u5c06 basename() \u548c dirname() \u7684\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\uff0c\u5c31\u4f1a\u5f97\u5230\u539f\u59cb\u7684\u8def\u5f84\u3002 \u4f7f\u7528 .split \u53ef\u4ee5\u540c\u65f6\u5f97\u5230 basename() \u548c dirname() \u7684\u7ed3\u679c\uff1a print ( os . path . split ( p = r \"C:\\one\\two\\three\" )) print ( os . path . split ( p = r \"C:\\one\\two\\three.txt\" )) ('C:\\\\one\\\\two', 'three') ('C:\\\\one\\\\two', 'three.txt') .splitext() \u6839\u636e os.extsep \u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32\uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt\" )) # \u7b49\u4ef7\u4e8e print ( r \"C:/one/two/three.txt\" . rsplit ( \".\" , maxsplit = 1 )) ('C:/one/two/three', '.txt') ['C:/one/two/three', 'txt'] \u67e5\u627e\u6587\u4ef6\u6269\u5c55\u540d\u7684\u65f6\uff0c\u53ea\u4f7f\u7528\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684 os.extsep \uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt.md\" )) ('C:/one/two/three.txt', '.md') .splitdrive() \u5c06\u8def\u5f84\u7684\u76d8\u7b26\u548c\u5176\u4f59\u90e8\u5206\u5206\u5f00\uff1a print ( os . path . splitdrive ( p = r \"C:/one/two/three.txt\" )) print ( os . path . splitdrive ( p = r \"/one/two/three.txt\" )) ('C:', '/one/two/three.txt') ('', '/one/two/three.txt')","title":"\u62c6\u5206\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html#_2","text":"\u51fd\u6570 \u793a\u4f8b \u8bf4\u660e .join() one \u3001 two \u2192 'one\\\\two \u62fc\u63a5\u8def\u5f84 .expanduser() ~ \u2192 C:\\\\Users\\\\Username \u5c06 ~ \u66ff\u6362\u4e3a\u7528\u6237\u76ee\u5f55 .expandvars() $Env_var \u2192 Env_var \u5c06 $Env_var \u66ff\u6362\u4e3a\u73af\u5883\u53d8\u91cf\u7684\u503c os.path.join \u53ef\u4ee5\u5c06\u591a\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u4e3a\u4e00\u4e2a\u8def\u5f84\u3002\u5982\u679c\u67d0\u4e2a\u53c2\u6570\u662f\u4ee5 os.sep \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u90fd\u5c06\u88ab\u4e22\u5f03\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u5c06\u4ee5\u5b83\u4f5c\u4e3a\u65b0\u7684\u5f00\u59cb\u3002 PATHS = [ ( 'one' , 'two' , 'three' ), ( '/' , 'one' , 'two' , 'three' ), ( '/one' , '/two' , '/three' ), ] for parts in PATHS : print ( ' {0:<30} : {1!r} ' . format ( str ( parts ), os . path . join ( * parts ))) ('one', 'two', 'three') : 'one\\\\two\\\\three' ('/', 'one', 'two', 'three') : '/one\\\\two\\\\three' ('/one', '/two', '/three') : '/three' .expanduser() \u5c06\u4f1a\u8f6c\u5316\u6ce2\u6d6a\u53f7~\u4e3a\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u540d\u79f0\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u7528\u6237\u7684\u4e3b\u76ee\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c06\u88ab\u539f\u6837\u8fd4\u56de\u3002 for user in [ '' , 'dhellmann' , 'nosuchuser' ]: lookup = '~' + user print ( ' {!r:>15} : {!r} ' . format ( lookup , os . path . expanduser ( lookup ))) '~' : 'C:\\\\Users\\\\Android' '~dhellmann' : 'C:\\\\Users\\\\dhellmann' '~nosuchuser' : 'C:\\\\Users\\\\nosuchuser' .expandvars() \u66f4\u4e00\u822c\u5316\uff0c\u5b83\u5c06\u4f1a\u89e3\u6790\u8def\u5f84\u4e2d\u6240\u6709 shell \u73af\u5883\u53d8\u91cf\u3002 os . environ [ 'MYVAR' ] = 'VALUE' os . path . expandvars ( '/path/to/$MYVAR' ) '/path/to/VALUE'","title":"\u6784\u5efa\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html#_3","text":"\u4f7f\u7528 .join() \u6216\u8005\u5d4c\u5165\u53d8\u91cf\u7684\u72ec\u7acb\u5b57\u7b26\u4e32\u7ec4\u5408\u7684\u8def\u5f84\u7ed3\u5c3e\u53ef\u80fd\u6709\u989d\u5916\u7684\u8def\u5f84\u5206\u9694\u7b26\u6216\u8005\u76f8\u5bf9\u8def\u5f84\u7ec4\u4ef6\u3002\u4f7f\u7528 .normpath() \u6765\u6e05\u7406\u4ed6\u4eec\uff1a PATHS = [ 'one//two//three' , 'one/./two/./three' , 'one/../alt/two/three' , ] for path in PATHS : print ( ' {!r:>22} : {!r} ' . format ( path , os . path . normpath ( path ))) 'one//two//three' : 'one\\\\two\\\\three' 'one/./two/./three' : 'one\\\\two\\\\three' 'one/../alt/two/three' : 'alt\\\\two\\\\three' \u53ef\u4ee5\u53d1\u73b0\uff0cos.curdir \u548c os.pardir \u7ec4\u6210\u7684\u8def\u5f84\u7247\u6bb5\u5c06\u88ab\u6e05\u9664\u3002 \u4f7f\u7528 abspath() \u53ef\u4ee5\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u5316\u4e3a\u7edd\u5bf9\u8def\u5f84\u3002\u5b9e\u9645\u4e0a\uff0c\u5c31\u662f\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u62fc\u63a5\u5230\u76f8\u5bf9\u8def\u5f84\u4e4b\u524d\u3002 absolute path = os.getcwd() + relative path \u4f7f\u7528 relpath() \u53ef\u4ee5\u5c06\u7edd\u5bf9\u8def\u5f84\u8f6c\u5316\u4e3a\u76f8\u5bf9\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u5c06\u8def\u5f84\u5b57\u7b26\u4e32\u4e2d\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u5254\u9664\u3002 relative path = absolute path.replace(os.getcwd(), \"\") \u4f7f\u7528 normcase() \u53ef\u4ee5\u5c06\u8def\u5f84\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u8f6c\u4e3a\u5c0f\u5199\uff0c\u540c\u65f6\u5c06\u659c\u6760\u7edf\u4e00\u8f6c\u6362\u4e3aos.sep\u3002 os . path . normcase ( 'User \\\\ Desktop/One' ) 'user\\\\desktop\\\\one'","title":"\u89c4\u8303\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html#_4","text":".commonprefix() \u51fd\u6570\u4f1a\u63a5\u53d7\u4e00\u4e2a\u8def\u5f84\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u800c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u6240\u6709\u8def\u5f84\u4e2d\u7684\u516c\u5171\u524d\u7f00\u3002\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u80fd\u8868\u793a\u4e00\u4e2a\u5b9e\u9645\u4e0d\u5b58\u5728\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u8def\u5f84\u5206\u9694\u7b26\u5e76\u6ca1\u6709\u88ab\u8003\u8651\u5728\u5185\uff0c\u6240\u4ee5\u8fd9\u4e2a\u516c\u5171\u524d\u7f00\u53ef\u80fd\u5e76\u6ca1\u6709\u843d\u5728\u5206\u9694\u7b26\u8fb9\u754c\u4e0a\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonprefix ( paths )) PATH: /one/two/three/four PATH: /one/two/threefold PATH: /one/two/three/ PREFIX: /one/two/three .commonpath() \u5145\u5206\u8003\u8651\u8def\u5f84\u5206\u9694\u7b26\uff0c\u4f1a\u8fd4\u56de\u8def\u5f84\u5e8f\u5217\u4e2d\u5404\u4e2a\u90e8\u5206\u7684\u6700\u957f\u516c\u5171\u6709\u6548\u5b50\u8def\u5f84\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonpath ( paths )) PATH: /one/two/three/four PATH: /one/two/threefold PATH: /one/two/three/ PREFIX: \\one\\two","title":"\u516c\u5171\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html#_5","text":"\u51fd\u6570 \u8bf4\u660e .getctime() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u521b\u5efa\u65f6\u95f4 .getmtime() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u4fee\u6539\u65f6\u95f4 .getatime() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u8bbf\u95ee\u65f6\u95f4 .getsize() \u8fd4\u56de\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09","title":"\u6587\u4ef6\u4fe1\u606f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.10.os_path.html#_6","text":"\u51fd\u6570 \u8bf4\u660e .samefile(path1, path2) \u5224\u65ad\u76ee\u5f55\u6216\u6587\u4ef6\u662f\u5426\u76f8\u540c\uff08\u4e0d\u662f\u771f\u5b9e\u7684\u8def\u5f84\uff0c\u4f1a\u62a5\u9519\uff09 .sameopenfile(fp1, fp2) \u5224\u65adfp1\u548cfp2\u662f\u5426\u6307\u5411\u540c\u4e00\u6587\u4ef6 .samestat(stat1, stat2) \u5224\u65adstat tuple stat1\u548cstat2\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u6587\u4ef6 .exists(path) \u68c0\u67e5\u8def\u5f84\u662f\u5426\u5b58\u5728 .lexists(path) \u68c0\u67e5\u8def\u5f84\u662f\u5426\u5b58\u5728\uff0c\u5bf9\u4e8ebroken symbolic links\u4e5f\u8fd4\u56deTrue .isabs(path) \u5224\u65ad\u662f\u5426\u4e3a\u7edd\u5bf9\u8def\u5f84 .isfile(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3a\u6587\u4ef6 .isdir(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3a\u76ee\u5f55 .islink(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3asymbolic link\uff0cWindows\u7cfb\u7edf\u4e0b\u603b\u662f\u8fd4\u56deFalse .ismount(path) \u5224\u65ad\u8def\u5f84\u662f\u5426\u4e3a\u6302\u8f7d\u70b9 FILENAMES = [ __file__ , os . path . dirname ( __file__ ), '/' , './broken_link' , ] for file in FILENAMES : print ( 'File : {!r} ' . format ( file )) print ( 'Absolute :' , os . path . isabs ( file )) print ( 'Is File? :' , os . path . isfile ( file )) print ( 'Is Dir? :' , os . path . isdir ( file )) print ( 'Is Link? :' , os . path . islink ( file )) print ( 'Mountpoint? :' , os . path . ismount ( file )) print ( 'Exists? :' , os . path . exists ( file )) print ( 'Link Exists?:' , os . path . lexists ( file )) print () File : os.getcwd() + '8.10.\u6807\u51c6\u5e93_os_path.py' Absolute : True Is File? : True Is Dir? : False Is Link? : False Mountpoint? : False Exists? : True Link Exists?: True File : os.getcwd() Absolute : True Is File? : False Is Dir? : True Is Link? : False Mountpoint? : False Exists? : True Link Exists?: True File : '/' Absolute : True Is File? : False Is Dir? : True Is Link? : False Mountpoint? : True Exists? : True Link Exists?: True File : './broken_link' Absolute : False Is File? : False Is Dir? : False Is Link? : False Mountpoint? : False Exists? : False Link Exists?: False","title":"\u68c0\u67e5\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.08.11 from toolkit import H import re import numpy as np import traceback import sys FrameSummary \u7c7b FrameSummary\u5bf9\u8c61\uff1a\u8868\u793atrace back\u4e2d\u7684\u5355\u4e2aframe\u3002\u5b83\u53ef\u4ee5\u9009\u62e9\u5305\u542b\u4e00\u4e2a\u6846\u67b6\u5c40\u90e8\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u5316\u7248\u672c\u3002 traceback.FrameSummary(filename, lineno, name, lookup_line=True, locals=None, line=None) \u5982\u679c lookup_line \u662f False \uff0c\u76f4\u5230 FrameSummary \u6709 line \u8bbf\u95ee\u7684\u5c5e\u6027\uff08\u5728\u5c06\u5176\u5f3a\u5236\u8f6c\u6362\u4e3a\u5143\u7ec4\u65f6\u4e5f\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 line \u53ef\u4ee5\u76f4\u63a5\u63d0\u4f9b\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b8c\u5168\u963b\u6b62\u884c\u67e5\u627e\u7684\u53d1\u751f\u3002 locals \u662f\u53ef\u9009\u7684\u5c40\u90e8\u53d8\u91cf\u5b57\u5178\uff0c\u5982\u679c\u63d0\u4f9b\uff0c\u53d8\u91cf\u8868\u793a\u5f62\u5f0f\u5c06\u5b58\u50a8\u5728\u6458\u8981\u4e2d\u4ee5\u4f9b\u4ee5\u540e\u663e\u793a\u3002 # \u83b7\u53d6\u5f53\u524dframe frame = sys . _getframe () # \u5229\u7528\u5f53\u524dframe\u7684\u4fe1\u606f\u521b\u5efa\u4e00\u4e2aFrameSummary\u5bf9\u8c61 traceback . FrameSummary ( filename = frame . f_code . co_filename , lineno = frame . f_lineno , name = frame . f_code . co_name , lookup_line = True , locals = frame . f_locals , line = None ) <FrameSummary file <ipython-input-1-8a9a38cc1974>, line 2 in <module>> StackSummary \u7c7b StackSummary\u5bf9\u8c61\uff1a\u8868\u793a\u51c6\u5907\u683c\u5f0f\u5316\u7684\u8c03\u7528\u5806\u6808\u3002StackSummary\u5bf9\u8c61\u662f\u5305\u542b\u591a\u4e2aFrameSummary\u5bf9\u8c61\u7684\u53ef\u8fed\u4ee3\u5bb9\u5668\u3002 \u6784\u9020\u65b9\u6cd5 traceback.StackSummary.extract(frame_gen, limit=None, lookup_lines=True, capture_locals=False) frame\u751f\u6210\u5668\uff1ae.g. walk_stack() \u6216 walk_tb() limit\uff1a\u53ea\u4ece frame_gen \u63d0\u53d6 limit \u4e2a frame \u5bf9\u8c61 lookup_lines\uff1a\u5982\u679c\u662fFalse \uff0c\u5219\u8fd4\u56de\u7684FrameSummary\u5bf9\u8c61\u5c1a\u672a\u8bfb\u53d6\u5176\u884c\uff0c\u56e0\u6b64\u521b\u5efa StackSummary \u7684\u4ee3\u4ef7\u6bd4\u8f83\u4f4e\uff08\u5982\u679c\u4e0d\u662f\u771f\u6b63\u683c\u5f0f\u5316\u7684\u8bdd\u53ef\u80fd\u5f88\u6709\u4ef7\u503c\uff09\u3002 capture_locals\uff1a\u5982\u679c\u662fTrue \u5219\u6bcf\u4e2aFrameSummary\u7684\u5c40\u90e8\u53d8\u91cf\u4f1a\u88ab\u6355\u83b7\uff0c\u7528\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u3002 traceback.StackSummary.from_list(a_list) \u4ece\u63d0\u4f9b\u7684\u65e7\u6837\u5f0f\u7684\u5143\u7ec4\u5217\u8868\u6784\u9020\u4e00\u4e2aStackSummary\u5bf9\u8c61\u3002\u6bcf\u4e2a\u5143\u7ec4\u5e94\u8be5\u662ffilename\uff0clineno\uff0cname\uff0cline\u4e3a\u5143\u7d20\u76844\u5143\u7ec4\u3002 \u5176\u4ed6\u65b9\u6cd5 traceback.StackSummary.format(self) \u8fd4\u56de\u51c6\u5907\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff08\u5b57\u7b26\u4e32\uff09\u5bf9\u5e94\u4e8e\u5806\u6808\u4e2d\u7684\u4e00\u4e2aframe\u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\uff0c\u5bf9\u4e8e\u5177\u6709\u6e90\u6587\u672c\u884c\u7684\u9879\u76ee\uff0c\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5\u5305\u542b\u5185\u90e8\u6362\u884c\u7b26\u3002\u5bf9\u4e8e\u540c\u4e00\u5e27\u548c\u540c\u4e00\u884c\u7684\u957f\u5e8f\u5217\uff0c\u663e\u793a\u524d\u51e0\u6b21\u91cd\u590d\uff0c\u7136\u540e\u663e\u793a\u6458\u8981\u884c\uff0c\u8bf4\u660e\u8fdb\u4e00\u6b65\u91cd\u590d\u7684\u786e\u5207\u6570\u91cf\u3002 \u83b7\u53d6 frame \u5806\u6808 traceback.walk_stack(f) \u4ece\u7ed9frame\u4e2d\u8ddf\u8e2a f.f_back \u540e\u7684\u5806\u6808\uff0c\u5f97\u5230\u6bcf\u4e2a\u5e27\u7684\u5e27\u548c\u884c\u53f7\u3002\u5982\u679c f \u4e3aNone\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u5806\u6808\u3002\u5b83\u4e0e StackSummary.extract() \u4e00\u8d77\u4f7f\u7528\u3002 traceback.walk_tb(tb) \u5728 tb_next \u4e4b\u540e\u6267\u884c\u56de\u6eaf\uff0c\u5f97\u5230\u6bcf\u4e2a\u5e27\u7684\u5e27\u548c\u884c\u53f7\u3002\u5b83\u4e0e StackSummary.extract() \u4e00\u8d77\u4f7f\u7528\u3002 \u793a\u4f8b def call_function ( f , recursion_level = 2 ): if recursion_level : return call_function ( f , recursion_level - 1 ) else : return f () def f (): summary = traceback . StackSummary . extract ( traceback . walk_stack ( None ) ) return '' . join ( summary . format ()) def format_traceback_str ( string ): need_replaced = re . findall ( r '\"(.*)\"' , string ) need_replaced_unique = [] for i in need_replaced : if i not in need_replaced_unique : need_replaced_unique . append ( i ) num = 1 for file_str in need_replaced_unique : if num > 3 : output_end_index = string . index ( f '\" { num - 1 } .py\"' ) string = string [ 0 : output_end_index ] break if not file_str . startswith ( \"<ipython-input\" ): string = string . replace ( file_str , f \" { num } .py\" ) num += 1 return string print ( 'Calling f() directly:' ) string = f () print ( format_traceback_str ( string )) print () print ( 'Calling f() from 3 levels deep:' ) string = call_function ( f ) print ( format_traceback_str ( string )) Calling f() directly: File \"<ipython-input-1-8548a9dafead>\", line 9, in f traceback.walk_stack(None) File \"<ipython-input-1-8548a9dafead>\", line 34, in <module> string = f() File \"1.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"1.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"1.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"2.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"1.py\", line 2886, in _run_cell return runner(coro) File \"1.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File Calling f() from 3 levels deep: File \"<ipython-input-1-8548a9dafead>\", line 9, in f traceback.walk_stack(None) File \"<ipython-input-1-8548a9dafead>\", line 5, in call_function return f() File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 39, in <module> string = call_function(f) File \"1.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"1.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"1.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"2.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"1.py\", line 2886, in _run_cell return runner(coro) File \"1.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File \u4e3a\u4e86\u663e\u793a\u66f4\u7b80\u6d01\u7684\u7ed3\u679c\uff0ctrackback\u4fe1\u606f\u4e2d\u7684Python\u6587\u4ef6\u540d\u7528\u6570\u5b57\u4ee3\u66ff\uff0c\u5e76\u4e14\u7701\u7565\u4e00\u4e9b\u672b\u5c3e\u7684trackback\u4fe1\u606f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7531 format_traceback_str \u51fd\u6570\u5b8c\u6210\u3002\u7701\u7565\u7684\u4fe1\u606f\u5728 f() \u548c call_function(f) \u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\u90fd\u662f\u76f8\u540c\u7684\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5b9a\u4e49trackback\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff1a import traceback import sys template = ( '\" {fs.filename:<26} \": {fs.lineno} : {fs.name} : \\n ' ' {fs.line} ' ) def f (): summary = traceback . StackSummary . extract ( traceback . walk_stack ( None ) ) string = \"\" for fs in summary : string += template . format ( fs = fs ) + \" \\n \" return string print ( 'Calling f() directly:' ) string = f () print ( format_traceback_str ( string )) print () print ( 'Calling f() from 3 levels deep:' ) string = call_function ( f ) print ( format_traceback_str ( string )) Calling f() directly: \"<ipython-input-1-4b8f40d1d7c9>\":11:f: traceback.walk_stack(None) \"<ipython-input-1-4b8f40d1d7c9>\":20:<module>: string = f() \"1.py\":3331:run_code: exec(code_obj, self.user_global_ns, self.user_ns) \"1.py\":3254:run_ast_nodes: if (await self.run_code(code, result, async_=asy)): \"1.py\":3063:run_cell_async: interactivity=interactivity, compiler=compiler, result=result) \"2.py\":68:_pseudo_sync_runner: coro.send(None) \"1.py\":2886:_run_cell: return runner(coro) \"1.py\":2858:run_cell: raw_cell, store_history, silent, shell_futures) Calling f() from 3 levels deep: \"<ipython-input-1-4b8f40d1d7c9>\":11:f: traceback.walk_stack(None) \"<ipython-input-1-8548a9dafead>\":5:call_function: return f() \"<ipython-input-1-8548a9dafead>\":3:call_function: return call_function(f, recursion_level - 1) \"<ipython-input-1-8548a9dafead>\":3:call_function: return call_function(f, recursion_level - 1) \"<ipython-input-1-4b8f40d1d7c9>\":25:<module>: string = call_function(f) \"1.py\":3331:run_code: exec(code_obj, self.user_global_ns, self.user_ns) \"1.py\":3254:run_ast_nodes: if (await self.run_code(code, result, async_=asy)): \"1.py\":3063:run_cell_async: interactivity=interactivity, compiler=compiler, result=result) \"2.py\":68:_pseudo_sync_runner: coro.send(None) \"1.py\":2886:_run_cell: return runner(coro) \"1.py\":2858:run_cell: raw_cell, store_history, silent, shell_futures) TracebackException import traceback import sys def produce_exception ( recursion_level = 2 ): sys . stdout . flush () if recursion_level : produce_exception ( recursion_level - 1 ) else : raise RuntimeError () print ( 'with no exception:' ) exc_type , exc_value , exc_tb = sys . exc_info () tbe = traceback . TracebackException ( exc_type , exc_value , exc_tb ) print ( '' . join ( tbe . format ())) print ( ' \\n with exception:' ) try : produce_exception () except Exception as err : exc_type , exc_value , exc_tb = sys . exc_info () tbe = traceback . TracebackException ( exc_type , exc_value , exc_tb , ) print ( '' . join ( tbe . format ())) print ( ' \\n exception only:' ) print ( '' . join ( tbe . format_exception_only ())) with no exception: None: None with exception: Traceback (most recent call last): File \"<ipython-input-1-9d9c5e9aab70>\", line 18, in <module> produce_exception() File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in produce_exception produce_exception(recursion_level - 1) File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in produce_exception produce_exception(recursion_level - 1) File \"<ipython-input-1-9d9c5e9aab70>\", line 9, in produce_exception raise RuntimeError() RuntimeError exception only: RuntimeError \u5e95\u5c42\u5f02\u5e38 API \u53e6\u4e00\u4e2a\u5904\u7406\u5f02\u5e38\u62a5\u544a\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 print_exc() \u3002\u5b83\u4f7f\u7528 sys.exc_info() \u6765\u4e3a\u5f53\u524d\u7ebf\u7a0b\u5b58\u50a8\u5f02\u5e38\u4fe1\u606f\uff0c\u683c\u5f0f\u5316\u7ed3\u679c\uff0c\u6253\u5370\u6587\u672c\u5230\u6587\u4ef6\u53e5\u67c4\uff08\u9ed8\u8ba4\u662f sys.stderr \uff09\u3002 traceback.print_exc(limit=None, file=None, chain=True) print_exc() \u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570\uff0c\u6240\u4ee5\u5728\u4e00\u4e9b\u573a\u5408 print_exc() \u53ef\u80fd\u65e0\u6cd5\u83b7\u5f97\u9884\u671f\u7684\u7ed3\u679c\u3002\u4f8b\u5982\u5728Python 2.x\u4e2d\u6267\u884c\u4e0b\u8ff0\u4ee3\u7801\uff1a import traceback try : raise TypeError ( \"Oups!\" ) except Exception : try : raise TypeError ( \"Again !?!\" ) except : pass traceback . print_exc () Traceback (most recent call last): File \"<ipython-input-1-057ba94a4e04>\", line 4, in <module> raise TypeError(\"Oups!\") TypeError: Oups! \u6211\u4eec\u53ef\u80fd\u671f\u5f85 print_exc() \u6253\u5370\u51fa raise TypeError(\"Again !?!\") \u8bed\u53e5\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c print_exc() \u53ea\u6253\u5370\u4e86 raise TypeError(\"Oups!\") \u8bed\u53e5\u629b\u51fa\u7684\u5f02\u5e38\u3002 print_exc() \u53ea\u662f print_exception() \u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u4f7f\u7528\u540e\u8005\u65f6\u9700\u8981\u51c6\u786e\u7684\u53c2\u6570 \u3002 print_exception() \u7684\u53c2\u6570\u901a\u8fc7 sys.exc_info() \u83b7\u53d6\u5230\u3002 \u5982\u679c\u60a8\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u539f\u59cb\u7684\u8ffd\u6eaf\uff0c\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u5f02\u5e38\u4fe1\u606f\u4ece exc_info \u672c\u5730\u53d8\u91cf\u4e2d\u8fd4\u56de\uff0c\u5e76\u4f7f\u7528\u6765\u663e\u793a\u5b83 print_exception \uff1a import traceback import sys try : raise TypeError ( \"Oups!\" ) except Exception : try : exc_info = sys . exc_info () print ( exc_info ) # do you usefull stuff here # (potentially raising an exception) try : raise TypeError ( \"Again !?!\" ) except : pass # end of useful stuff finally : # Display the *original* exception traceback . print_exception ( * exc_info ) del exc_info # https://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program # a = [] # for i in traceback.walk_stack(None): # a.append(i) # dir(a[0][0]) # frame.f_back # a[0][0].f_code (<class 'TypeError'>, TypeError('Oups!'), <traceback object at 0x000001309FD2E308>) Traceback (most recent call last): File \"<ipython-input-1-c2358bda325a>\", line 6, in <module> raise TypeError(\"Oups!\") TypeError: Oups! print_exception() \u4f7f\u7528\u7684\u662f format_exception() \u6765\u51c6\u5907\u8981\u6253\u5370\u7684\u6587\u672c\u3002 format_exception() \u8981\u4f7f\u7528\u7684\u4e09\u4e2a\u53c2\u6570\u4e0e print_exception() \u4e00\u6837\uff0c\u90fd\u662fexception type, exception value, traceback\u3002 import traceback import sys from pprint import pprint try : produce_exception () except Exception as err : print ( 'format_exception():' ) exc_type , exc_value , exc_tb = sys . exc_info () pprint ( traceback . format_exception ( exc_type , exc_value , exc_tb ), width = 65 , ) format_exception(): ['Traceback (most recent call last):\\n', ' File \"<ipython-input-1-564aebc46497>\", line 6, in <module>\\n' ' produce_exception()\\n', ' File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in ' 'produce_exception\\n' ' produce_exception(recursion_level - 1)\\n', ' File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in ' 'produce_exception\\n' ' produce_exception(recursion_level - 1)\\n', ' File \"<ipython-input-1-9d9c5e9aab70>\", line 9, in ' 'produce_exception\\n' ' raise RuntimeError()\\n', 'RuntimeError\\n'] \u8981\u60f3\u628a traceback \u7528\u5176\u4ed6\u65b9\u5f0f\u5904\u7406\uff0c\u6bd4\u5982\u5f04\u6210\u4e0d\u540c\u7684\u8f93\u51fa\u683c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 extract_tb() \u83b7\u53d6\u51fa\u6570\u636e\u3002 import traceback import sys import os template = ' {filename:<23} : {linenum} : {funcname} : \\n {source} ' try : produce_exception () except Exception as err : print ( 'format_exception():' ) exc_type , exc_value , exc_tb = sys . exc_info () for tb_info in traceback . extract_tb ( exc_tb ): filename , linenum , funcname , source = tb_info if funcname != '<module>' : funcname = funcname + '()' print ( template . format ( filename = os . path . basename ( filename ), linenum = linenum , source = source , funcname = funcname ) ) format_exception(): <ipython-input-1-5f837b49071f>:8:<module>: produce_exception() <ipython-input-1-9d9c5e9aab70>:7:produce_exception(): produce_exception(recursion_level - 1) <ipython-input-1-9d9c5e9aab70>:7:produce_exception(): produce_exception(recursion_level - 1) <ipython-input-1-9d9c5e9aab70>:9:produce_exception(): raise RuntimeError() \u5e95\u5c42\u6808 API \u6709\u51e0\u4e2a\u4e0e traceback \u76f8\u540c\u7684\u51fd\u6570\u6765\u5bf9\u5f53\u524d\u8c03\u7528\u6808\u505a\u76f8\u540c\u7684\u64cd\u4f5c\u3002 print_stack() \u4f1a\u6253\u5370\u51fa\u5f53\u524d\u6808\u4f46\u4e0d\u5f15\u53d1\u5f02\u5e38\u3002\u8f93\u51fa\u5f88\u50cf traceback \u4f46\u5e76\u65e0\u9519\u8bef\u4fe1\u606f\u3002 import traceback import sys def f (): traceback . print_stack ( file = sys . stdout ) print ( 'Calling f() directly:' ) f () print () print ( 'Calling f() from 3 levels deep:' ) call_function ( f ) Calling f() directly: File \"setup_m.py\", line 45, in <module> save_dir=save_dir) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\__init__.py\", line 62, in weave doc.weave() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 192, in weave self.run() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 129, in run proc.run() File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 46, in run res = self._runcode(chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 171, in _runcode chunk['result'] = self.loadstring(chunk['content'], chunk=chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 134, in loadstring return self.run_cell(code_str) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 58, in run_cell msg_id = self.kc.execute(src.lstrip(), store_history=False) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 102, in execute self._dispatch_to_kernel(msg) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 170, in _dispatch_to_kernel kernel.dispatch_shell(stream, msg_parts) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 268, in dispatch_shell yield gen.maybe_future(handler(stream, idents, msg)) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\ipkernel.py\", line 80, in execute_request super(InProcessKernel, self).execute_request(stream, ident, parent) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 541, in execute_request user_expressions, allow_stdin, File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\ipkernel.py\", line 300, in do_execute res = shell.run_cell(code, store_history=store_history, silent=silent) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\zmqshell.py\", line 536, in run_cell return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2886, in _run_cell return runner(coro) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\async_helpers.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"<ipython-input-1-fb615fd1c94c>\", line 8, in <module> f() File \"<ipython-input-1-fb615fd1c94c>\", line 5, in f traceback.print_stack(file=sys.stdout) Calling f() from 3 levels deep: File \"setup_m.py\", line 45, in <module> save_dir=save_dir) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\__init__.py\", line 62, in weave doc.weave() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 192, in weave self.run() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 129, in run proc.run() File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 46, in run res = self._runcode(chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 171, in _runcode chunk['result'] = self.loadstring(chunk['content'], chunk=chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 134, in loadstring return self.run_cell(code_str) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 58, in run_cell msg_id = self.kc.execute(src.lstrip(), store_history=False) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 102, in execute self._dispatch_to_kernel(msg) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 170, in _dispatch_to_kernel kernel.dispatch_shell(stream, msg_parts) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 268, in dispatch_shell yield gen.maybe_future(handler(stream, idents, msg)) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\ipkernel.py\", line 80, in execute_request super(InProcessKernel, self).execute_request(stream, ident, parent) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 541, in execute_request user_expressions, allow_stdin, File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\ipkernel.py\", line 300, in do_execute res = shell.run_cell(code, store_history=store_history, silent=silent) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\zmqshell.py\", line 536, in run_cell return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2886, in _run_cell return runner(coro) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\async_helpers.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"<ipython-input-1-fb615fd1c94c>\", line 12, in <module> call_function(f) File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 5, in call_function return f() File \"<ipython-input-1-fb615fd1c94c>\", line 5, in f traceback.print_stack(file=sys.stdout) format_stack() \u51c6\u5907\u6808\u8ffd\u8e2a\u7684\u65b9\u5f0f\u4e0e format_exception() \u4e00\u6837\u3002 import traceback import sys from pprint import pprint def f (): return traceback . format_stack () formatted_stack = call_function ( f ) pprint ( formatted_stack ) [' File \"setup_m.py\", line 45, in <module>\\n save_dir=save_dir)\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\__init__.py\", ' 'line 62, in weave\\n' ' doc.weave()\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\pweb.py\", line ' '192, in weave\\n' ' self.run()\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\pweb.py\", line ' '129, in run\\n' ' proc.run()\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\base.py\", ' 'line 46, in run\\n' ' res = self._runcode(chunk)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\base.py\", ' 'line 171, in _runcode\\n' \" chunk['result'] = self.loadstring(chunk['content'], chunk=chunk)\\n\", ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\jupyter.py\", ' 'line 134, in loadstring\\n' ' return self.run_cell(code_str)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\jupyter.py\", ' 'line 58, in run_cell\\n' ' msg_id = self.kc.execute(src.lstrip(), store_history=False)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\inprocess\\\\client.py\", ' 'line 102, in execute\\n' ' self._dispatch_to_kernel(msg)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\inprocess\\\\client.py\", ' 'line 170, in _dispatch_to_kernel\\n' ' kernel.dispatch_shell(stream, msg_parts)\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\tornado\\\\gen.py\", line ' '209, in wrapper\\n' ' yielded = next(result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\kernelbase.py\", ' 'line 268, in dispatch_shell\\n' ' yield gen.maybe_future(handler(stream, idents, msg))\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\inprocess\\\\ipkernel.py\", ' 'line 80, in execute_request\\n' ' super(InProcessKernel, self).execute_request(stream, ident, parent)\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\tornado\\\\gen.py\", line ' '209, in wrapper\\n' ' yielded = next(result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\kernelbase.py\", ' 'line 541, in execute_request\\n' ' user_expressions, allow_stdin,\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\tornado\\\\gen.py\", line ' '209, in wrapper\\n' ' yielded = next(result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\ipkernel.py\", line ' '300, in do_execute\\n' ' res = shell.run_cell(code, store_history=store_history, silent=silent)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\zmqshell.py\", line ' '536, in run_cell\\n' ' return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 2858, in run_cell\\n' ' raw_cell, store_history, silent, shell_futures)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 2886, in _run_cell\\n' ' return runner(coro)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\async_helpers.py\", ' 'line 68, in _pseudo_sync_runner\\n' ' coro.send(None)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 3063, in run_cell_async\\n' ' interactivity=interactivity, compiler=compiler, result=result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 3254, in run_ast_nodes\\n' ' if (await self.run_code(code, result, async_=asy)):\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 3331, in run_code\\n' ' exec(code_obj, self.user_global_ns, self.user_ns)\\n', ' File \"<ipython-input-1-175e8d8ff5b6>\", line 9, in <module>\\n' ' formatted_stack = call_function(f)\\n', ' File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function\\n' ' return call_function(f, recursion_level - 1)\\n', ' File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function\\n' ' return call_function(f, recursion_level - 1)\\n', ' File \"<ipython-input-1-8548a9dafead>\", line 5, in call_function\\n' ' return f()\\n', ' File \"<ipython-input-1-175e8d8ff5b6>\", line 7, in f\\n' ' return traceback.format_stack()\\n'] extract_stack() \u51fd\u6570\u4e0e extract_tb() \u5dee\u4e0d\u591a\u3002 import traceback import sys import os template = ' {filename:<26} : {linenum} : {funcname} : \\n {source} ' def f (): return traceback . extract_stack () stack = call_function ( f ) for filename , linenum , funcname , source in stack : if funcname != '<module>' : funcname = funcname + '()' print ( template . format ( filename = os . path . basename ( filename ), linenum = linenum , source = source , funcname = funcname ) ) setup_m.py :45:<module>: save_dir=save_dir) __init__.py :62:weave(): doc.weave() pweb.py :192:weave(): self.run() pweb.py :129:run(): proc.run() base.py :46:run(): res = self._runcode(chunk) base.py :171:_runcode(): chunk['result'] = self.loadstring(chunk['content'], chunk=chunk) jupyter.py :134:loadstring(): return self.run_cell(code_str) jupyter.py :58:run_cell(): msg_id = self.kc.execute(src.lstrip(), store_history=False) client.py :102:execute(): self._dispatch_to_kernel(msg) client.py :170:_dispatch_to_kernel(): kernel.dispatch_shell(stream, msg_parts) gen.py :209:wrapper(): yielded = next(result) kernelbase.py :268:dispatch_shell(): yield gen.maybe_future(handler(stream, idents, msg)) ipkernel.py :80:execute_request(): super(InProcessKernel, self).execute_request(stream, ident, parent) gen.py :209:wrapper(): yielded = next(result) kernelbase.py :541:execute_request(): user_expressions, allow_stdin, gen.py :209:wrapper(): yielded = next(result) ipkernel.py :300:do_execute(): res = shell.run_cell(code, store_history=store_history, silent=silent) zmqshell.py :536:run_cell(): return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs) interactiveshell.py :2858:run_cell(): raw_cell, store_history, silent, shell_futures) interactiveshell.py :2886:_run_cell(): return runner(coro) async_helpers.py :68:_pseudo_sync_runner(): coro.send(None) interactiveshell.py :3063:run_cell_async(): interactivity=interactivity, compiler=compiler, result=result) interactiveshell.py :3254:run_ast_nodes(): if (await self.run_code(code, result, async_=asy)): interactiveshell.py :3331:run_code(): exec(code_obj, self.user_global_ns, self.user_ns) <ipython-input-1-ff723ef2e674>:11:<module>: stack = call_function(f) <ipython-input-1-8548a9dafead>:3:call_function(): return call_function(f, recursion_level - 1) <ipython-input-1-8548a9dafead>:3:call_function(): return call_function(f, recursion_level - 1) <ipython-input-1-8548a9dafead>:5:call_function(): return f() <ipython-input-1-ff723ef2e674>:9:f(): return traceback.extract_stack() \u5b83\u8fd8\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\uff0c\u4f46\u6211\u4eec\u5728\u8fd9\u91cc\u5e76\u672a\u4f7f\u7528\uff0c\u8be5\u53c2\u6570\u7684\u4f5c\u7528\u662f\u4f7f\u5176\u4ece\u5806\u6808\u5e27\u4e2d\u7684\u5176\u4ed6\u4f4d\u7f6e\uff08\u5c42\u7ea7\uff09\u5f00\u59cb\u6216\u9650\u5236\u904d\u5386\u6df1\u5ea6\u3002 # https://blog.csdn.net/weixin_43193719/article/details/95518650 # https://www.osgeo.cn/cpython/library/traceback.html # https://www.jianshu.com/p/a8cb5375171a # https://groups.google.com/forum/#!topic/python-cn/bJHTBI9vhwc # https://docs.python.org/3/library/inspect.html # https://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program","title":"6.11.traceback"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#framesummary","text":"FrameSummary\u5bf9\u8c61\uff1a\u8868\u793atrace back\u4e2d\u7684\u5355\u4e2aframe\u3002\u5b83\u53ef\u4ee5\u9009\u62e9\u5305\u542b\u4e00\u4e2a\u6846\u67b6\u5c40\u90e8\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u5316\u7248\u672c\u3002 traceback.FrameSummary(filename, lineno, name, lookup_line=True, locals=None, line=None) \u5982\u679c lookup_line \u662f False \uff0c\u76f4\u5230 FrameSummary \u6709 line \u8bbf\u95ee\u7684\u5c5e\u6027\uff08\u5728\u5c06\u5176\u5f3a\u5236\u8f6c\u6362\u4e3a\u5143\u7ec4\u65f6\u4e5f\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 line \u53ef\u4ee5\u76f4\u63a5\u63d0\u4f9b\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b8c\u5168\u963b\u6b62\u884c\u67e5\u627e\u7684\u53d1\u751f\u3002 locals \u662f\u53ef\u9009\u7684\u5c40\u90e8\u53d8\u91cf\u5b57\u5178\uff0c\u5982\u679c\u63d0\u4f9b\uff0c\u53d8\u91cf\u8868\u793a\u5f62\u5f0f\u5c06\u5b58\u50a8\u5728\u6458\u8981\u4e2d\u4ee5\u4f9b\u4ee5\u540e\u663e\u793a\u3002 # \u83b7\u53d6\u5f53\u524dframe frame = sys . _getframe () # \u5229\u7528\u5f53\u524dframe\u7684\u4fe1\u606f\u521b\u5efa\u4e00\u4e2aFrameSummary\u5bf9\u8c61 traceback . FrameSummary ( filename = frame . f_code . co_filename , lineno = frame . f_lineno , name = frame . f_code . co_name , lookup_line = True , locals = frame . f_locals , line = None ) <FrameSummary file <ipython-input-1-8a9a38cc1974>, line 2 in <module>>","title":"FrameSummary \u7c7b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#stacksummary","text":"StackSummary\u5bf9\u8c61\uff1a\u8868\u793a\u51c6\u5907\u683c\u5f0f\u5316\u7684\u8c03\u7528\u5806\u6808\u3002StackSummary\u5bf9\u8c61\u662f\u5305\u542b\u591a\u4e2aFrameSummary\u5bf9\u8c61\u7684\u53ef\u8fed\u4ee3\u5bb9\u5668\u3002","title":"StackSummary \u7c7b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#_1","text":"traceback.StackSummary.extract(frame_gen, limit=None, lookup_lines=True, capture_locals=False) frame\u751f\u6210\u5668\uff1ae.g. walk_stack() \u6216 walk_tb() limit\uff1a\u53ea\u4ece frame_gen \u63d0\u53d6 limit \u4e2a frame \u5bf9\u8c61 lookup_lines\uff1a\u5982\u679c\u662fFalse \uff0c\u5219\u8fd4\u56de\u7684FrameSummary\u5bf9\u8c61\u5c1a\u672a\u8bfb\u53d6\u5176\u884c\uff0c\u56e0\u6b64\u521b\u5efa StackSummary \u7684\u4ee3\u4ef7\u6bd4\u8f83\u4f4e\uff08\u5982\u679c\u4e0d\u662f\u771f\u6b63\u683c\u5f0f\u5316\u7684\u8bdd\u53ef\u80fd\u5f88\u6709\u4ef7\u503c\uff09\u3002 capture_locals\uff1a\u5982\u679c\u662fTrue \u5219\u6bcf\u4e2aFrameSummary\u7684\u5c40\u90e8\u53d8\u91cf\u4f1a\u88ab\u6355\u83b7\uff0c\u7528\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u3002 traceback.StackSummary.from_list(a_list) \u4ece\u63d0\u4f9b\u7684\u65e7\u6837\u5f0f\u7684\u5143\u7ec4\u5217\u8868\u6784\u9020\u4e00\u4e2aStackSummary\u5bf9\u8c61\u3002\u6bcf\u4e2a\u5143\u7ec4\u5e94\u8be5\u662ffilename\uff0clineno\uff0cname\uff0cline\u4e3a\u5143\u7d20\u76844\u5143\u7ec4\u3002","title":"\u6784\u9020\u65b9\u6cd5"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#_2","text":"traceback.StackSummary.format(self) \u8fd4\u56de\u51c6\u5907\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff08\u5b57\u7b26\u4e32\uff09\u5bf9\u5e94\u4e8e\u5806\u6808\u4e2d\u7684\u4e00\u4e2aframe\u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\uff0c\u5bf9\u4e8e\u5177\u6709\u6e90\u6587\u672c\u884c\u7684\u9879\u76ee\uff0c\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5\u5305\u542b\u5185\u90e8\u6362\u884c\u7b26\u3002\u5bf9\u4e8e\u540c\u4e00\u5e27\u548c\u540c\u4e00\u884c\u7684\u957f\u5e8f\u5217\uff0c\u663e\u793a\u524d\u51e0\u6b21\u91cd\u590d\uff0c\u7136\u540e\u663e\u793a\u6458\u8981\u884c\uff0c\u8bf4\u660e\u8fdb\u4e00\u6b65\u91cd\u590d\u7684\u786e\u5207\u6570\u91cf\u3002","title":"\u5176\u4ed6\u65b9\u6cd5"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#frame","text":"traceback.walk_stack(f) \u4ece\u7ed9frame\u4e2d\u8ddf\u8e2a f.f_back \u540e\u7684\u5806\u6808\uff0c\u5f97\u5230\u6bcf\u4e2a\u5e27\u7684\u5e27\u548c\u884c\u53f7\u3002\u5982\u679c f \u4e3aNone\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u5806\u6808\u3002\u5b83\u4e0e StackSummary.extract() \u4e00\u8d77\u4f7f\u7528\u3002 traceback.walk_tb(tb) \u5728 tb_next \u4e4b\u540e\u6267\u884c\u56de\u6eaf\uff0c\u5f97\u5230\u6bcf\u4e2a\u5e27\u7684\u5e27\u548c\u884c\u53f7\u3002\u5b83\u4e0e StackSummary.extract() \u4e00\u8d77\u4f7f\u7528\u3002","title":"\u83b7\u53d6 frame \u5806\u6808"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#_3","text":"def call_function ( f , recursion_level = 2 ): if recursion_level : return call_function ( f , recursion_level - 1 ) else : return f () def f (): summary = traceback . StackSummary . extract ( traceback . walk_stack ( None ) ) return '' . join ( summary . format ()) def format_traceback_str ( string ): need_replaced = re . findall ( r '\"(.*)\"' , string ) need_replaced_unique = [] for i in need_replaced : if i not in need_replaced_unique : need_replaced_unique . append ( i ) num = 1 for file_str in need_replaced_unique : if num > 3 : output_end_index = string . index ( f '\" { num - 1 } .py\"' ) string = string [ 0 : output_end_index ] break if not file_str . startswith ( \"<ipython-input\" ): string = string . replace ( file_str , f \" { num } .py\" ) num += 1 return string print ( 'Calling f() directly:' ) string = f () print ( format_traceback_str ( string )) print () print ( 'Calling f() from 3 levels deep:' ) string = call_function ( f ) print ( format_traceback_str ( string )) Calling f() directly: File \"<ipython-input-1-8548a9dafead>\", line 9, in f traceback.walk_stack(None) File \"<ipython-input-1-8548a9dafead>\", line 34, in <module> string = f() File \"1.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"1.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"1.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"2.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"1.py\", line 2886, in _run_cell return runner(coro) File \"1.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File Calling f() from 3 levels deep: File \"<ipython-input-1-8548a9dafead>\", line 9, in f traceback.walk_stack(None) File \"<ipython-input-1-8548a9dafead>\", line 5, in call_function return f() File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 39, in <module> string = call_function(f) File \"1.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"1.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"1.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"2.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"1.py\", line 2886, in _run_cell return runner(coro) File \"1.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File \u4e3a\u4e86\u663e\u793a\u66f4\u7b80\u6d01\u7684\u7ed3\u679c\uff0ctrackback\u4fe1\u606f\u4e2d\u7684Python\u6587\u4ef6\u540d\u7528\u6570\u5b57\u4ee3\u66ff\uff0c\u5e76\u4e14\u7701\u7565\u4e00\u4e9b\u672b\u5c3e\u7684trackback\u4fe1\u606f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7531 format_traceback_str \u51fd\u6570\u5b8c\u6210\u3002\u7701\u7565\u7684\u4fe1\u606f\u5728 f() \u548c call_function(f) \u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\u90fd\u662f\u76f8\u540c\u7684\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5b9a\u4e49trackback\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff1a import traceback import sys template = ( '\" {fs.filename:<26} \": {fs.lineno} : {fs.name} : \\n ' ' {fs.line} ' ) def f (): summary = traceback . StackSummary . extract ( traceback . walk_stack ( None ) ) string = \"\" for fs in summary : string += template . format ( fs = fs ) + \" \\n \" return string print ( 'Calling f() directly:' ) string = f () print ( format_traceback_str ( string )) print () print ( 'Calling f() from 3 levels deep:' ) string = call_function ( f ) print ( format_traceback_str ( string )) Calling f() directly: \"<ipython-input-1-4b8f40d1d7c9>\":11:f: traceback.walk_stack(None) \"<ipython-input-1-4b8f40d1d7c9>\":20:<module>: string = f() \"1.py\":3331:run_code: exec(code_obj, self.user_global_ns, self.user_ns) \"1.py\":3254:run_ast_nodes: if (await self.run_code(code, result, async_=asy)): \"1.py\":3063:run_cell_async: interactivity=interactivity, compiler=compiler, result=result) \"2.py\":68:_pseudo_sync_runner: coro.send(None) \"1.py\":2886:_run_cell: return runner(coro) \"1.py\":2858:run_cell: raw_cell, store_history, silent, shell_futures) Calling f() from 3 levels deep: \"<ipython-input-1-4b8f40d1d7c9>\":11:f: traceback.walk_stack(None) \"<ipython-input-1-8548a9dafead>\":5:call_function: return f() \"<ipython-input-1-8548a9dafead>\":3:call_function: return call_function(f, recursion_level - 1) \"<ipython-input-1-8548a9dafead>\":3:call_function: return call_function(f, recursion_level - 1) \"<ipython-input-1-4b8f40d1d7c9>\":25:<module>: string = call_function(f) \"1.py\":3331:run_code: exec(code_obj, self.user_global_ns, self.user_ns) \"1.py\":3254:run_ast_nodes: if (await self.run_code(code, result, async_=asy)): \"1.py\":3063:run_cell_async: interactivity=interactivity, compiler=compiler, result=result) \"2.py\":68:_pseudo_sync_runner: coro.send(None) \"1.py\":2886:_run_cell: return runner(coro) \"1.py\":2858:run_cell: raw_cell, store_history, silent, shell_futures)","title":"\u793a\u4f8b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#tracebackexception","text":"import traceback import sys def produce_exception ( recursion_level = 2 ): sys . stdout . flush () if recursion_level : produce_exception ( recursion_level - 1 ) else : raise RuntimeError () print ( 'with no exception:' ) exc_type , exc_value , exc_tb = sys . exc_info () tbe = traceback . TracebackException ( exc_type , exc_value , exc_tb ) print ( '' . join ( tbe . format ())) print ( ' \\n with exception:' ) try : produce_exception () except Exception as err : exc_type , exc_value , exc_tb = sys . exc_info () tbe = traceback . TracebackException ( exc_type , exc_value , exc_tb , ) print ( '' . join ( tbe . format ())) print ( ' \\n exception only:' ) print ( '' . join ( tbe . format_exception_only ())) with no exception: None: None with exception: Traceback (most recent call last): File \"<ipython-input-1-9d9c5e9aab70>\", line 18, in <module> produce_exception() File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in produce_exception produce_exception(recursion_level - 1) File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in produce_exception produce_exception(recursion_level - 1) File \"<ipython-input-1-9d9c5e9aab70>\", line 9, in produce_exception raise RuntimeError() RuntimeError exception only: RuntimeError","title":"TracebackException"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#api","text":"\u53e6\u4e00\u4e2a\u5904\u7406\u5f02\u5e38\u62a5\u544a\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 print_exc() \u3002\u5b83\u4f7f\u7528 sys.exc_info() \u6765\u4e3a\u5f53\u524d\u7ebf\u7a0b\u5b58\u50a8\u5f02\u5e38\u4fe1\u606f\uff0c\u683c\u5f0f\u5316\u7ed3\u679c\uff0c\u6253\u5370\u6587\u672c\u5230\u6587\u4ef6\u53e5\u67c4\uff08\u9ed8\u8ba4\u662f sys.stderr \uff09\u3002 traceback.print_exc(limit=None, file=None, chain=True) print_exc() \u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570\uff0c\u6240\u4ee5\u5728\u4e00\u4e9b\u573a\u5408 print_exc() \u53ef\u80fd\u65e0\u6cd5\u83b7\u5f97\u9884\u671f\u7684\u7ed3\u679c\u3002\u4f8b\u5982\u5728Python 2.x\u4e2d\u6267\u884c\u4e0b\u8ff0\u4ee3\u7801\uff1a import traceback try : raise TypeError ( \"Oups!\" ) except Exception : try : raise TypeError ( \"Again !?!\" ) except : pass traceback . print_exc () Traceback (most recent call last): File \"<ipython-input-1-057ba94a4e04>\", line 4, in <module> raise TypeError(\"Oups!\") TypeError: Oups! \u6211\u4eec\u53ef\u80fd\u671f\u5f85 print_exc() \u6253\u5370\u51fa raise TypeError(\"Again !?!\") \u8bed\u53e5\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c print_exc() \u53ea\u6253\u5370\u4e86 raise TypeError(\"Oups!\") \u8bed\u53e5\u629b\u51fa\u7684\u5f02\u5e38\u3002 print_exc() \u53ea\u662f print_exception() \u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u4f7f\u7528\u540e\u8005\u65f6\u9700\u8981\u51c6\u786e\u7684\u53c2\u6570 \u3002 print_exception() \u7684\u53c2\u6570\u901a\u8fc7 sys.exc_info() \u83b7\u53d6\u5230\u3002 \u5982\u679c\u60a8\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u539f\u59cb\u7684\u8ffd\u6eaf\uff0c\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u5f02\u5e38\u4fe1\u606f\u4ece exc_info \u672c\u5730\u53d8\u91cf\u4e2d\u8fd4\u56de\uff0c\u5e76\u4f7f\u7528\u6765\u663e\u793a\u5b83 print_exception \uff1a import traceback import sys try : raise TypeError ( \"Oups!\" ) except Exception : try : exc_info = sys . exc_info () print ( exc_info ) # do you usefull stuff here # (potentially raising an exception) try : raise TypeError ( \"Again !?!\" ) except : pass # end of useful stuff finally : # Display the *original* exception traceback . print_exception ( * exc_info ) del exc_info # https://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program # a = [] # for i in traceback.walk_stack(None): # a.append(i) # dir(a[0][0]) # frame.f_back # a[0][0].f_code (<class 'TypeError'>, TypeError('Oups!'), <traceback object at 0x000001309FD2E308>) Traceback (most recent call last): File \"<ipython-input-1-c2358bda325a>\", line 6, in <module> raise TypeError(\"Oups!\") TypeError: Oups! print_exception() \u4f7f\u7528\u7684\u662f format_exception() \u6765\u51c6\u5907\u8981\u6253\u5370\u7684\u6587\u672c\u3002 format_exception() \u8981\u4f7f\u7528\u7684\u4e09\u4e2a\u53c2\u6570\u4e0e print_exception() \u4e00\u6837\uff0c\u90fd\u662fexception type, exception value, traceback\u3002 import traceback import sys from pprint import pprint try : produce_exception () except Exception as err : print ( 'format_exception():' ) exc_type , exc_value , exc_tb = sys . exc_info () pprint ( traceback . format_exception ( exc_type , exc_value , exc_tb ), width = 65 , ) format_exception(): ['Traceback (most recent call last):\\n', ' File \"<ipython-input-1-564aebc46497>\", line 6, in <module>\\n' ' produce_exception()\\n', ' File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in ' 'produce_exception\\n' ' produce_exception(recursion_level - 1)\\n', ' File \"<ipython-input-1-9d9c5e9aab70>\", line 7, in ' 'produce_exception\\n' ' produce_exception(recursion_level - 1)\\n', ' File \"<ipython-input-1-9d9c5e9aab70>\", line 9, in ' 'produce_exception\\n' ' raise RuntimeError()\\n', 'RuntimeError\\n'] \u8981\u60f3\u628a traceback \u7528\u5176\u4ed6\u65b9\u5f0f\u5904\u7406\uff0c\u6bd4\u5982\u5f04\u6210\u4e0d\u540c\u7684\u8f93\u51fa\u683c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 extract_tb() \u83b7\u53d6\u51fa\u6570\u636e\u3002 import traceback import sys import os template = ' {filename:<23} : {linenum} : {funcname} : \\n {source} ' try : produce_exception () except Exception as err : print ( 'format_exception():' ) exc_type , exc_value , exc_tb = sys . exc_info () for tb_info in traceback . extract_tb ( exc_tb ): filename , linenum , funcname , source = tb_info if funcname != '<module>' : funcname = funcname + '()' print ( template . format ( filename = os . path . basename ( filename ), linenum = linenum , source = source , funcname = funcname ) ) format_exception(): <ipython-input-1-5f837b49071f>:8:<module>: produce_exception() <ipython-input-1-9d9c5e9aab70>:7:produce_exception(): produce_exception(recursion_level - 1) <ipython-input-1-9d9c5e9aab70>:7:produce_exception(): produce_exception(recursion_level - 1) <ipython-input-1-9d9c5e9aab70>:9:produce_exception(): raise RuntimeError()","title":"\u5e95\u5c42\u5f02\u5e38 API"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.11.traceback.html#api_1","text":"\u6709\u51e0\u4e2a\u4e0e traceback \u76f8\u540c\u7684\u51fd\u6570\u6765\u5bf9\u5f53\u524d\u8c03\u7528\u6808\u505a\u76f8\u540c\u7684\u64cd\u4f5c\u3002 print_stack() \u4f1a\u6253\u5370\u51fa\u5f53\u524d\u6808\u4f46\u4e0d\u5f15\u53d1\u5f02\u5e38\u3002\u8f93\u51fa\u5f88\u50cf traceback \u4f46\u5e76\u65e0\u9519\u8bef\u4fe1\u606f\u3002 import traceback import sys def f (): traceback . print_stack ( file = sys . stdout ) print ( 'Calling f() directly:' ) f () print () print ( 'Calling f() from 3 levels deep:' ) call_function ( f ) Calling f() directly: File \"setup_m.py\", line 45, in <module> save_dir=save_dir) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\__init__.py\", line 62, in weave doc.weave() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 192, in weave self.run() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 129, in run proc.run() File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 46, in run res = self._runcode(chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 171, in _runcode chunk['result'] = self.loadstring(chunk['content'], chunk=chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 134, in loadstring return self.run_cell(code_str) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 58, in run_cell msg_id = self.kc.execute(src.lstrip(), store_history=False) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 102, in execute self._dispatch_to_kernel(msg) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 170, in _dispatch_to_kernel kernel.dispatch_shell(stream, msg_parts) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 268, in dispatch_shell yield gen.maybe_future(handler(stream, idents, msg)) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\ipkernel.py\", line 80, in execute_request super(InProcessKernel, self).execute_request(stream, ident, parent) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 541, in execute_request user_expressions, allow_stdin, File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\ipkernel.py\", line 300, in do_execute res = shell.run_cell(code, store_history=store_history, silent=silent) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\zmqshell.py\", line 536, in run_cell return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2886, in _run_cell return runner(coro) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\async_helpers.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"<ipython-input-1-fb615fd1c94c>\", line 8, in <module> f() File \"<ipython-input-1-fb615fd1c94c>\", line 5, in f traceback.print_stack(file=sys.stdout) Calling f() from 3 levels deep: File \"setup_m.py\", line 45, in <module> save_dir=save_dir) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\__init__.py\", line 62, in weave doc.weave() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 192, in weave self.run() File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\pweave\\pweb.py\", line 129, in run proc.run() File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 46, in run res = self._runcode(chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\base.py\", line 171, in _runcode chunk['result'] = self.loadstring(chunk['content'], chunk=chunk) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 134, in loadstring return self.run_cell(code_str) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\pweave\\processors\\jupyter.py\", line 58, in run_cell msg_id = self.kc.execute(src.lstrip(), store_history=False) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 102, in execute self._dispatch_to_kernel(msg) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\client.py\", line 170, in _dispatch_to_kernel kernel.dispatch_shell(stream, msg_parts) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 268, in dispatch_shell yield gen.maybe_future(handler(stream, idents, msg)) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\inprocess\\ipkernel.py\", line 80, in execute_request super(InProcessKernel, self).execute_request(stream, ident, parent) File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\kernelbase.py\", line 541, in execute_request user_expressions, allow_stdin, File \"G:\\Installed\\Anaconda3\\lib\\site-packages\\tornado\\gen.py\", line 209, in wrapper yielded = next(result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\ipkernel.py\", line 300, in do_execute res = shell.run_cell(code, store_history=store_history, silent=silent) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\ipykernel\\zmqshell.py\", line 536, in run_cell return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2858, in run_cell raw_cell, store_history, silent, shell_futures) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 2886, in _run_cell return runner(coro) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\async_helpers.py\", line 68, in _pseudo_sync_runner coro.send(None) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3063, in run_cell_async interactivity=interactivity, compiler=compiler, result=result) File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3254, in run_ast_nodes if (await self.run_code(code, result, async_=asy)): File \"G:\\Installed\\Anaconda3\\lib\\site- packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"<ipython-input-1-fb615fd1c94c>\", line 12, in <module> call_function(f) File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function return call_function(f, recursion_level - 1) File \"<ipython-input-1-8548a9dafead>\", line 5, in call_function return f() File \"<ipython-input-1-fb615fd1c94c>\", line 5, in f traceback.print_stack(file=sys.stdout) format_stack() \u51c6\u5907\u6808\u8ffd\u8e2a\u7684\u65b9\u5f0f\u4e0e format_exception() \u4e00\u6837\u3002 import traceback import sys from pprint import pprint def f (): return traceback . format_stack () formatted_stack = call_function ( f ) pprint ( formatted_stack ) [' File \"setup_m.py\", line 45, in <module>\\n save_dir=save_dir)\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\__init__.py\", ' 'line 62, in weave\\n' ' doc.weave()\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\pweb.py\", line ' '192, in weave\\n' ' self.run()\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\pweb.py\", line ' '129, in run\\n' ' proc.run()\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\base.py\", ' 'line 46, in run\\n' ' res = self._runcode(chunk)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\base.py\", ' 'line 171, in _runcode\\n' \" chunk['result'] = self.loadstring(chunk['content'], chunk=chunk)\\n\", ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\jupyter.py\", ' 'line 134, in loadstring\\n' ' return self.run_cell(code_str)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\pweave\\\\processors\\\\jupyter.py\", ' 'line 58, in run_cell\\n' ' msg_id = self.kc.execute(src.lstrip(), store_history=False)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\inprocess\\\\client.py\", ' 'line 102, in execute\\n' ' self._dispatch_to_kernel(msg)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\inprocess\\\\client.py\", ' 'line 170, in _dispatch_to_kernel\\n' ' kernel.dispatch_shell(stream, msg_parts)\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\tornado\\\\gen.py\", line ' '209, in wrapper\\n' ' yielded = next(result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\kernelbase.py\", ' 'line 268, in dispatch_shell\\n' ' yield gen.maybe_future(handler(stream, idents, msg))\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\inprocess\\\\ipkernel.py\", ' 'line 80, in execute_request\\n' ' super(InProcessKernel, self).execute_request(stream, ident, parent)\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\tornado\\\\gen.py\", line ' '209, in wrapper\\n' ' yielded = next(result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\kernelbase.py\", ' 'line 541, in execute_request\\n' ' user_expressions, allow_stdin,\\n', ' File \"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\tornado\\\\gen.py\", line ' '209, in wrapper\\n' ' yielded = next(result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\ipkernel.py\", line ' '300, in do_execute\\n' ' res = shell.run_cell(code, store_history=store_history, silent=silent)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\ipykernel\\\\zmqshell.py\", line ' '536, in run_cell\\n' ' return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 2858, in run_cell\\n' ' raw_cell, store_history, silent, shell_futures)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 2886, in _run_cell\\n' ' return runner(coro)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\async_helpers.py\", ' 'line 68, in _pseudo_sync_runner\\n' ' coro.send(None)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 3063, in run_cell_async\\n' ' interactivity=interactivity, compiler=compiler, result=result)\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 3254, in run_ast_nodes\\n' ' if (await self.run_code(code, result, async_=asy)):\\n', ' File ' '\"G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages\\\\IPython\\\\core\\\\interactiveshell.py\", ' 'line 3331, in run_code\\n' ' exec(code_obj, self.user_global_ns, self.user_ns)\\n', ' File \"<ipython-input-1-175e8d8ff5b6>\", line 9, in <module>\\n' ' formatted_stack = call_function(f)\\n', ' File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function\\n' ' return call_function(f, recursion_level - 1)\\n', ' File \"<ipython-input-1-8548a9dafead>\", line 3, in call_function\\n' ' return call_function(f, recursion_level - 1)\\n', ' File \"<ipython-input-1-8548a9dafead>\", line 5, in call_function\\n' ' return f()\\n', ' File \"<ipython-input-1-175e8d8ff5b6>\", line 7, in f\\n' ' return traceback.format_stack()\\n'] extract_stack() \u51fd\u6570\u4e0e extract_tb() \u5dee\u4e0d\u591a\u3002 import traceback import sys import os template = ' {filename:<26} : {linenum} : {funcname} : \\n {source} ' def f (): return traceback . extract_stack () stack = call_function ( f ) for filename , linenum , funcname , source in stack : if funcname != '<module>' : funcname = funcname + '()' print ( template . format ( filename = os . path . basename ( filename ), linenum = linenum , source = source , funcname = funcname ) ) setup_m.py :45:<module>: save_dir=save_dir) __init__.py :62:weave(): doc.weave() pweb.py :192:weave(): self.run() pweb.py :129:run(): proc.run() base.py :46:run(): res = self._runcode(chunk) base.py :171:_runcode(): chunk['result'] = self.loadstring(chunk['content'], chunk=chunk) jupyter.py :134:loadstring(): return self.run_cell(code_str) jupyter.py :58:run_cell(): msg_id = self.kc.execute(src.lstrip(), store_history=False) client.py :102:execute(): self._dispatch_to_kernel(msg) client.py :170:_dispatch_to_kernel(): kernel.dispatch_shell(stream, msg_parts) gen.py :209:wrapper(): yielded = next(result) kernelbase.py :268:dispatch_shell(): yield gen.maybe_future(handler(stream, idents, msg)) ipkernel.py :80:execute_request(): super(InProcessKernel, self).execute_request(stream, ident, parent) gen.py :209:wrapper(): yielded = next(result) kernelbase.py :541:execute_request(): user_expressions, allow_stdin, gen.py :209:wrapper(): yielded = next(result) ipkernel.py :300:do_execute(): res = shell.run_cell(code, store_history=store_history, silent=silent) zmqshell.py :536:run_cell(): return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs) interactiveshell.py :2858:run_cell(): raw_cell, store_history, silent, shell_futures) interactiveshell.py :2886:_run_cell(): return runner(coro) async_helpers.py :68:_pseudo_sync_runner(): coro.send(None) interactiveshell.py :3063:run_cell_async(): interactivity=interactivity, compiler=compiler, result=result) interactiveshell.py :3254:run_ast_nodes(): if (await self.run_code(code, result, async_=asy)): interactiveshell.py :3331:run_code(): exec(code_obj, self.user_global_ns, self.user_ns) <ipython-input-1-ff723ef2e674>:11:<module>: stack = call_function(f) <ipython-input-1-8548a9dafead>:3:call_function(): return call_function(f, recursion_level - 1) <ipython-input-1-8548a9dafead>:3:call_function(): return call_function(f, recursion_level - 1) <ipython-input-1-8548a9dafead>:5:call_function(): return f() <ipython-input-1-ff723ef2e674>:9:f(): return traceback.extract_stack() \u5b83\u8fd8\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\uff0c\u4f46\u6211\u4eec\u5728\u8fd9\u91cc\u5e76\u672a\u4f7f\u7528\uff0c\u8be5\u53c2\u6570\u7684\u4f5c\u7528\u662f\u4f7f\u5176\u4ece\u5806\u6808\u5e27\u4e2d\u7684\u5176\u4ed6\u4f4d\u7f6e\uff08\u5c42\u7ea7\uff09\u5f00\u59cb\u6216\u9650\u5236\u904d\u5386\u6df1\u5ea6\u3002 # https://blog.csdn.net/weixin_43193719/article/details/95518650 # https://www.osgeo.cn/cpython/library/traceback.html # https://www.jianshu.com/p/a8cb5375171a # https://groups.google.com/forum/#!topic/python-cn/bJHTBI9vhwc # https://docs.python.org/3/library/inspect.html # https://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program","title":"\u5e95\u5c42\u6808 API"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html","text":"from toolkit import H import enum import json Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.11.13 enum \u6a21\u5757\u63d0\u4f9b\u7684\u7c7b\u548c\u51fd\u6570\u5982\u4e0b\uff1a d = H ( enum ) . dicts print ( \"class\" , d [ \"class\" ]) print ( \"function\" , d [ \"function\" ]) module class ['Enum', 'EnumMeta', 'Flag', 'IntEnum', 'IntFlag', 'auto'] function ['unique'] \u521b\u5efa\u679a\u4e3e\u7c7b Enum \u7684\u6210\u5458\u5728\u7c7b\u88ab\u89e3\u6790\u7684\u65f6\u5019\u8f6c\u5316\u4e3a\u5b9e\u4f8b\u3002\u6bcf\u4e00\u4e2a\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a name \u5c5e\u6027\u5bf9\u5e94\u6210\u5458\u7684\u540d\u79f0\uff0c\u4e00\u4e2a value \u5c5e\u6027\u5bf9\u5e94\u5728\u7c7b\u4e2d\u8d4b\u503c\u7ed9\u6210\u5458\u540d\u79f0\u7684\u503c\u3002 class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 print ( type ( BugStatus )) print ( 'Member name: {} ' . format ( BugStatus . wont_fix . name )) print ( 'Member value: {} ' . format ( BugStatus . wont_fix . value )) <class 'enum.EnumMeta'> Member name: wont_fix Member value: 4 \u4e0d\u80fd\u901a\u8fc7\u76f4\u63a5\u5f15\u7528 Enum \u7684\u6210\u5458\u7684\u65b9\u5f0f\u548c\u5176\u503c\u4f5c\u6bd4\u8f83\uff1a print ( BugStatus . new == 7 ) print ( BugStatus . new . value == 7 ) False True \u8fed\u4ee3 \u6210\u5458\u4ee5\u5b83\u4eec\u5728\u7c7b\u4e2d\u88ab\u5b9a\u4e49\u7684\u987a\u5e8f\u9010\u4e2a\u4ea7\u751f\uff0c \u6210\u5458\u7684\u540d\u79f0\u548c\u503c\u6ca1\u6709\u4ee5\u4efb\u4f55\u65b9\u5f0f\u7528\u6765\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\u3002 import enum class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 Enum \u7c7b\u6210\u5458\u6bd4\u8f83 \u7531\u4e8e\u679a\u4e3e\u6210\u5458\u4e0d\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u53ea\u652f\u6301\u6309 id \u6216\u6309\u503c\u7684\u76f8\u7b49\u6027\u8fdb\u884c\u6bd4\u8f83\u3002\u5bf9\u679a\u4e3e\u6210\u5458\u5e94\u7528\u5927\u4e8e\u548c\u5c0f\u4e8e\u6bd4\u8f83\u64cd\u4f5c\u7b26\u5c06\u629b\u51fa TypeError \u5f02\u5e38\u3002 import enum class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 actual_state = BugStatus . wont_fix desired_state = BugStatus . fix_released print ( 'Equality:' , actual_state == desired_state , actual_state == BugStatus . wont_fix ) print ( 'Identity:' , actual_state is desired_state , actual_state is BugStatus . wont_fix ) print ( 'Ordered by value:' ) try : print ( ' \\n ' . join ( ' ' + s . name for s in sorted ( BugStatus ))) except TypeError as err : print ( ' Cannot sort: {} ' . format ( err )) Equality: False True Identity: False True Ordered by value: Cannot sort: '<' not supported between instances of 'BugStatus' and 'BugStatus' \u82e5\u60f3\u4f7f\u679a\u4e3e\u6210\u5458\u8868\u73b0\u5f97\u66f4\u7c7b\u4f3c\u4e8e\u6570\u5b57 \u2014\u2014 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u8981\u652f\u6301\u5927\u4e8e\u6216\u5c0f\u4e8e\u6bd4\u8f83\uff0c\u5219\u9700\u8981\u4f7f\u7528 IntEnum \u7c7b\u3002 import enum class BugStatus ( enum . IntEnum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 print ( 'Ordered by value:' ) print ( ' \\n ' . join ( ' ' + s . name for s in sorted ( BugStatus ))) Ordered by value: fix_released fix_committed in_progress wont_fix invalid incomplete new \u552f\u4e00\u7684\u679a\u4e3e\u503c \u5177\u6709\u76f8\u540c\u503c\u7684 Enum \u6210\u5458\u4f1a\u88ab\u5f53\u4f5c\u540c\u4e00\u5bf9\u8c61\u7684\u522b\u540d\u5f15\u7528\u8fdb\u884c\u8ddf\u8e2a\u3002\u522b\u540d\u4e0d\u4f1a\u5bfc\u81f4 Enum \u7684\u8fed\u4ee3\u5668\u91cc\u9762\u51fa\u73b0\u91cd\u590d\u503c\u3002 Python \u5185\u90e8\u4f1a\u5bf9\u5c0f\u6574\u6570 [-5,257) \u8fdb\u884c\u7f13\u5b58\uff0c\u6240\u6709\u5bf9\u5c0f\u6574\u6570\u7684\u58f0\u660e\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\u4f46\u662f\u5728 Enum \u91cc\u9762\u5927\u4e8e 257 \u7684\u91cd\u590d\u6574\u6570\u4e5f\u4f1a\u88ab\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 import enum class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 by_design = 4 closed = 1 for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) print ( ' \\n Same: by_design is wont_fix: ' , BugStatus . by_design is BugStatus . wont_fix ) print ( 'Same: closed is fix_released: ' , BugStatus . closed is BugStatus . fix_released ) new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 Same: by_design is wont_fix: True Same: closed is fix_released: True \u56e0\u4e3a by_design \u548c closed \u662f\u5176\u4ed6\u6210\u5458\u7684\u522b\u540d\uff0c \u5728\u904d\u5386 Enum \u7684\u65f6\u5019\uff0c\u5b83\u4eec\u90fd\u4e0d\u4f1a\u51fa\u73b0\u5728\u8f93\u51fa\u4e2d\u3002 \u679a\u4e3e\u6210\u5458\u4e2d\u7b2c\u4e00\u4e2a\u5173\u8054\u5230\u6210\u5458\u503c\u7684\u540d\u79f0\u662f\u89c4\u8303\u540d\u79f0\u3002 \u5982\u679c\u60f3\u8981\u679a\u4e3e\u6210\u5458\u53ea\u5305\u542b\u552f\u4e00\u503c\uff0c \u53ef\u4ee5\u5728 Enum \u4e0a\u52a0\u4e0a\u88c5\u9970\u5668 @unique \u3002\u5f53 Enum \u7c7b\u88ab\u89e3\u91ca\u5668\u6267\u884c\u7684\u65f6\u5019\uff0c\u91cd\u590d\u7684\u6210\u5458\u4f1a\u89e6\u53d1\u4e00\u4e2a ValueError \u5f02\u5e38\u3002 import enum try : @enum . unique class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 # \u8fd9\u91cc\u5c06\u4f1a\u89e6\u53d1\u552f\u4e00\u503c\u9519\u8bef by_design = 4 closed = 1 except ValueError as e : print ( e ) duplicate values found in <enum 'BugStatus'>: by_design -> wont_fix, closed -> fix_released \u52a8\u6001\u521b\u5efa\u679a\u4e3e\u7c7b \u5728\u67d0\u79cd\u60c5\u51b5\u4e0b\uff0c\u6bd4\u8d77\u4ee5\u7c7b\u5b9a\u4e49\u7684\u65b9\u5f0f\u786c\u7f16\u7801\u679a\u4e3e\uff0c\u7528\u5728\u7f16\u7801\u4e2d\u52a8\u6001\u521b\u5efa\u7684\u679a\u4e3e\u7684\u65b9\u5f0f\u66f4\u52a0\u65b9\u4fbf\u3002\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c Enum \u63d0\u4f9b\u4e86\u5c06\u6210\u5458\u540d\u79f0\u548c\u503c\u4f20\u9012\u5230\u7c7b\u6784\u9020\u5668\u7684\u65b9\u5f0f\u521b\u5efa\u679a\u4e3e\u3002 import enum BugStatus = enum . Enum ( value = 'BugStatus' , names = ( 'fix_released fix_committed in_progress ' 'wont_fix invalid incomplete new' ), ) print ( 'Member: {} ' . format ( BugStatus . new )) print ( ' \\n All members:' ) for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) Member: BugStatus.new All members: fix_released = 1 fix_committed = 2 in_progress = 3 wont_fix = 4 invalid = 5 incomplete = 6 new = 7 \u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u7684\u63a7\u5236\u679a\u4e3e\u6210\u5458\u7684\u503c\uff0c names \u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u66ff\u6362\u6210\u4e8c\u5143\u5143\u7ec4\u7ec4\u6210\u7684\u5e8f\u5217\u6216\u8005\u662f\u7531\u540d\u79f0\u548c\u503c\u7ec4\u6210\u7684\u5b57\u5178\u3002\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u4f20\u5165\u540d\u79f0\u3002 import enum BugStatus = enum . Enum ( value = 'BugStatus' , names = [ ( 'new' , 7 ), ( 'incomplete' , 6 ), ( 'invalid' , 5 ), ( 'wont_fix' , 4 ), ( 'in_progress' , 3 ), ( 'fix_committed' , 2 ), ( 'fix_released' , 1 ), ], ) print ( 'All members:' ) for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) All members: new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 \u975e\u6574\u6570\u6210\u5458\u503c \u679a\u4e3e\u6210\u5458\u503c\u5e76\u6ca1\u6709\u9650\u5236\u4e3a\u6574\u6570\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a\uff0c\u679a\u4e3e\u6210\u5458\u53ef\u4ee5\u5173\u8054\u4efb\u4f55\u5bf9\u8c61\u7684\u7c7b\u578b\u3002\u5982\u679c\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c==\u6210\u5458\u503c\u4f1a\u4f5c\u4e3a\u72ec\u7acb\u7684\u53c2\u6570\u4f20\u9012\u7ed9 __init__() \u51fd\u6570\u3002==\u56e0\u6b64\uff0c\u91cd\u5199 __init__() \u51fd\u6570\u6216 __new__() \u51fd\u6570\u53ef\u4ee5\u4e3a\u6210\u5458\u503c\u6dfb\u52a0\u65b0\u5c5e\u6027\u3002 import enum class BugStatus ( enum . Enum ): new = ( 7 , [ 'incomplete' , 'invalid' , 'wont_fix' , 'in_progress' ]) incomplete = ( 6 , [ 'new' , 'wont_fix' ]) invalid = ( 5 , [ 'new' ]) wont_fix = ( 4 , [ 'new' ]) in_progress = ( 3 , [ 'new' , 'fix_committed' ]) fix_committed = ( 2 , [ 'in_progress' , 'fix_released' ]) fix_released = ( 1 , [ 'new' ]) def __init__ ( self , num , transitions ): self . num = num self . transitions = transitions def can_transition ( self , new_state ): return new_state . name in self . transitions print ( 'Name:' , BugStatus . in_progress ) print ( 'Value:' , BugStatus . in_progress . value ) print ( 'Custom attribute:' , BugStatus . in_progress . transitions ) print ( 'Using attribute:' , BugStatus . in_progress . can_transition ( BugStatus . new )) Name: BugStatus.in_progress Value: (3, ['new', 'fix_committed']) Custom attribute: ['new', 'fix_committed'] Using attribute: True \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c \u6bcf\u4e00\u4e2a\u6210\u5458\u503c\u90fd\u662f\u5305\u542b\u6570\u5b57 ID\uff08\u65b9\u4fbf\u4e8e\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff09\u548ctransitions\u5217\u8868\u3002 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u60c5\u51b5\u6765\u8bf4\uff0c\u5143\u7ec4\u53ef\u80fd\u4f1a\u53d8\u5f97\u6bd4\u8f83\u7b28\u62d9\u3002\u7531\u4e8e\u6210\u5458\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b57\u5178\u53ef\u4ee5\u88ab\u7528\u4e8e\u9700\u8981\u8ddf\u8e2a\u6bcf\u4e2a\u679a\u4e3e\u503c\u7684\u72ec\u7acb\u5c5e\u6027\u7684\u60c5\u51b5\u3002\u590d\u6742\u7684\u503c\u4f5c\u4e3a\u9664\u4e86 self \u4e4b\u5916\u552f\u4e00\u7684\u53c2\u6570\u4f20\u9012\u7ed9 __init__() import enum class BugStatus ( enum . Enum ): new = { 'num' : 7 , 'transitions' : [ 'incomplete' , 'invalid' , 'wont_fix' , 'in_progress' , ], } incomplete = { 'num' : 6 , 'transitions' : [ 'new' , 'wont_fix' ], } invalid = { 'num' : 5 , 'transitions' : [ 'new' ], } wont_fix = { 'num' : 4 , 'transitions' : [ 'new' ], } in_progress = { 'num' : 3 , 'transitions' : [ 'new' , 'fix_committed' ], } fix_committed = { 'num' : 2 , 'transitions' : [ 'in_progress' , 'fix_released' ], } fix_released = { 'num' : 1 , 'transitions' : [ 'new' ], } def __init__ ( self , vals ): self . num = vals [ 'num' ] self . transitions = vals [ 'transitions' ] def can_transition ( self , new_state ): return new_state . name in self . transitions print ( 'Name:' , BugStatus . in_progress ) print ( 'Value:' , BugStatus . in_progress . value ) print ( 'Custom attribute:' , BugStatus . in_progress . transitions ) print ( 'Using attribute:' , BugStatus . in_progress . can_transition ( BugStatus . new )) Name: BugStatus.in_progress Value: {'num': 3, 'transitions': ['new', 'fix_committed']} Custom attribute: ['new', 'fix_committed'] Using attribute: True \u91cd\u5199 __new__() \u51fd\u6570\u53ef\u6dfb\u52a0\u5c5e\u6027\u3002 class AutoNumber ( enum . Enum ): def __new__ ( cls ): value = len ( cls . __members__ ) + 1 obj = object . __new__ ( cls ) obj . test = value return obj class Color ( AutoNumber ): RED = () GREEN = () BLUE = () print ( Color . RED . test ) 1 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. $$ \\sum $$ $$ \\sum $$ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. a = 1 print ( \"test\" ) test","title":"6.12.enum"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html#_1","text":"Enum \u7684\u6210\u5458\u5728\u7c7b\u88ab\u89e3\u6790\u7684\u65f6\u5019\u8f6c\u5316\u4e3a\u5b9e\u4f8b\u3002\u6bcf\u4e00\u4e2a\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a name \u5c5e\u6027\u5bf9\u5e94\u6210\u5458\u7684\u540d\u79f0\uff0c\u4e00\u4e2a value \u5c5e\u6027\u5bf9\u5e94\u5728\u7c7b\u4e2d\u8d4b\u503c\u7ed9\u6210\u5458\u540d\u79f0\u7684\u503c\u3002 class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 print ( type ( BugStatus )) print ( 'Member name: {} ' . format ( BugStatus . wont_fix . name )) print ( 'Member value: {} ' . format ( BugStatus . wont_fix . value )) <class 'enum.EnumMeta'> Member name: wont_fix Member value: 4 \u4e0d\u80fd\u901a\u8fc7\u76f4\u63a5\u5f15\u7528 Enum \u7684\u6210\u5458\u7684\u65b9\u5f0f\u548c\u5176\u503c\u4f5c\u6bd4\u8f83\uff1a print ( BugStatus . new == 7 ) print ( BugStatus . new . value == 7 ) False True","title":"\u521b\u5efa\u679a\u4e3e\u7c7b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html#_2","text":"\u6210\u5458\u4ee5\u5b83\u4eec\u5728\u7c7b\u4e2d\u88ab\u5b9a\u4e49\u7684\u987a\u5e8f\u9010\u4e2a\u4ea7\u751f\uff0c \u6210\u5458\u7684\u540d\u79f0\u548c\u503c\u6ca1\u6709\u4ee5\u4efb\u4f55\u65b9\u5f0f\u7528\u6765\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\u3002 import enum class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1","title":"\u8fed\u4ee3"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html#enum","text":"\u7531\u4e8e\u679a\u4e3e\u6210\u5458\u4e0d\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u53ea\u652f\u6301\u6309 id \u6216\u6309\u503c\u7684\u76f8\u7b49\u6027\u8fdb\u884c\u6bd4\u8f83\u3002\u5bf9\u679a\u4e3e\u6210\u5458\u5e94\u7528\u5927\u4e8e\u548c\u5c0f\u4e8e\u6bd4\u8f83\u64cd\u4f5c\u7b26\u5c06\u629b\u51fa TypeError \u5f02\u5e38\u3002 import enum class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 actual_state = BugStatus . wont_fix desired_state = BugStatus . fix_released print ( 'Equality:' , actual_state == desired_state , actual_state == BugStatus . wont_fix ) print ( 'Identity:' , actual_state is desired_state , actual_state is BugStatus . wont_fix ) print ( 'Ordered by value:' ) try : print ( ' \\n ' . join ( ' ' + s . name for s in sorted ( BugStatus ))) except TypeError as err : print ( ' Cannot sort: {} ' . format ( err )) Equality: False True Identity: False True Ordered by value: Cannot sort: '<' not supported between instances of 'BugStatus' and 'BugStatus' \u82e5\u60f3\u4f7f\u679a\u4e3e\u6210\u5458\u8868\u73b0\u5f97\u66f4\u7c7b\u4f3c\u4e8e\u6570\u5b57 \u2014\u2014 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u8981\u652f\u6301\u5927\u4e8e\u6216\u5c0f\u4e8e\u6bd4\u8f83\uff0c\u5219\u9700\u8981\u4f7f\u7528 IntEnum \u7c7b\u3002 import enum class BugStatus ( enum . IntEnum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 print ( 'Ordered by value:' ) print ( ' \\n ' . join ( ' ' + s . name for s in sorted ( BugStatus ))) Ordered by value: fix_released fix_committed in_progress wont_fix invalid incomplete new","title":"Enum \u7c7b\u6210\u5458\u6bd4\u8f83"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html#_3","text":"\u5177\u6709\u76f8\u540c\u503c\u7684 Enum \u6210\u5458\u4f1a\u88ab\u5f53\u4f5c\u540c\u4e00\u5bf9\u8c61\u7684\u522b\u540d\u5f15\u7528\u8fdb\u884c\u8ddf\u8e2a\u3002\u522b\u540d\u4e0d\u4f1a\u5bfc\u81f4 Enum \u7684\u8fed\u4ee3\u5668\u91cc\u9762\u51fa\u73b0\u91cd\u590d\u503c\u3002 Python \u5185\u90e8\u4f1a\u5bf9\u5c0f\u6574\u6570 [-5,257) \u8fdb\u884c\u7f13\u5b58\uff0c\u6240\u6709\u5bf9\u5c0f\u6574\u6570\u7684\u58f0\u660e\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\u4f46\u662f\u5728 Enum \u91cc\u9762\u5927\u4e8e 257 \u7684\u91cd\u590d\u6574\u6570\u4e5f\u4f1a\u88ab\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 import enum class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 by_design = 4 closed = 1 for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) print ( ' \\n Same: by_design is wont_fix: ' , BugStatus . by_design is BugStatus . wont_fix ) print ( 'Same: closed is fix_released: ' , BugStatus . closed is BugStatus . fix_released ) new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 Same: by_design is wont_fix: True Same: closed is fix_released: True \u56e0\u4e3a by_design \u548c closed \u662f\u5176\u4ed6\u6210\u5458\u7684\u522b\u540d\uff0c \u5728\u904d\u5386 Enum \u7684\u65f6\u5019\uff0c\u5b83\u4eec\u90fd\u4e0d\u4f1a\u51fa\u73b0\u5728\u8f93\u51fa\u4e2d\u3002 \u679a\u4e3e\u6210\u5458\u4e2d\u7b2c\u4e00\u4e2a\u5173\u8054\u5230\u6210\u5458\u503c\u7684\u540d\u79f0\u662f\u89c4\u8303\u540d\u79f0\u3002 \u5982\u679c\u60f3\u8981\u679a\u4e3e\u6210\u5458\u53ea\u5305\u542b\u552f\u4e00\u503c\uff0c \u53ef\u4ee5\u5728 Enum \u4e0a\u52a0\u4e0a\u88c5\u9970\u5668 @unique \u3002\u5f53 Enum \u7c7b\u88ab\u89e3\u91ca\u5668\u6267\u884c\u7684\u65f6\u5019\uff0c\u91cd\u590d\u7684\u6210\u5458\u4f1a\u89e6\u53d1\u4e00\u4e2a ValueError \u5f02\u5e38\u3002 import enum try : @enum . unique class BugStatus ( enum . Enum ): new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1 # \u8fd9\u91cc\u5c06\u4f1a\u89e6\u53d1\u552f\u4e00\u503c\u9519\u8bef by_design = 4 closed = 1 except ValueError as e : print ( e ) duplicate values found in <enum 'BugStatus'>: by_design -> wont_fix, closed -> fix_released","title":"\u552f\u4e00\u7684\u679a\u4e3e\u503c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html#_4","text":"\u5728\u67d0\u79cd\u60c5\u51b5\u4e0b\uff0c\u6bd4\u8d77\u4ee5\u7c7b\u5b9a\u4e49\u7684\u65b9\u5f0f\u786c\u7f16\u7801\u679a\u4e3e\uff0c\u7528\u5728\u7f16\u7801\u4e2d\u52a8\u6001\u521b\u5efa\u7684\u679a\u4e3e\u7684\u65b9\u5f0f\u66f4\u52a0\u65b9\u4fbf\u3002\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c Enum \u63d0\u4f9b\u4e86\u5c06\u6210\u5458\u540d\u79f0\u548c\u503c\u4f20\u9012\u5230\u7c7b\u6784\u9020\u5668\u7684\u65b9\u5f0f\u521b\u5efa\u679a\u4e3e\u3002 import enum BugStatus = enum . Enum ( value = 'BugStatus' , names = ( 'fix_released fix_committed in_progress ' 'wont_fix invalid incomplete new' ), ) print ( 'Member: {} ' . format ( BugStatus . new )) print ( ' \\n All members:' ) for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) Member: BugStatus.new All members: fix_released = 1 fix_committed = 2 in_progress = 3 wont_fix = 4 invalid = 5 incomplete = 6 new = 7 \u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u7684\u63a7\u5236\u679a\u4e3e\u6210\u5458\u7684\u503c\uff0c names \u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u66ff\u6362\u6210\u4e8c\u5143\u5143\u7ec4\u7ec4\u6210\u7684\u5e8f\u5217\u6216\u8005\u662f\u7531\u540d\u79f0\u548c\u503c\u7ec4\u6210\u7684\u5b57\u5178\u3002\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u4f20\u5165\u540d\u79f0\u3002 import enum BugStatus = enum . Enum ( value = 'BugStatus' , names = [ ( 'new' , 7 ), ( 'incomplete' , 6 ), ( 'invalid' , 5 ), ( 'wont_fix' , 4 ), ( 'in_progress' , 3 ), ( 'fix_committed' , 2 ), ( 'fix_released' , 1 ), ], ) print ( 'All members:' ) for status in BugStatus : print ( ' {:15} = {} ' . format ( status . name , status . value )) All members: new = 7 incomplete = 6 invalid = 5 wont_fix = 4 in_progress = 3 fix_committed = 2 fix_released = 1","title":"\u52a8\u6001\u521b\u5efa\u679a\u4e3e\u7c7b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.12.enum.html#_5","text":"\u679a\u4e3e\u6210\u5458\u503c\u5e76\u6ca1\u6709\u9650\u5236\u4e3a\u6574\u6570\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a\uff0c\u679a\u4e3e\u6210\u5458\u53ef\u4ee5\u5173\u8054\u4efb\u4f55\u5bf9\u8c61\u7684\u7c7b\u578b\u3002\u5982\u679c\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c==\u6210\u5458\u503c\u4f1a\u4f5c\u4e3a\u72ec\u7acb\u7684\u53c2\u6570\u4f20\u9012\u7ed9 __init__() \u51fd\u6570\u3002==\u56e0\u6b64\uff0c\u91cd\u5199 __init__() \u51fd\u6570\u6216 __new__() \u51fd\u6570\u53ef\u4ee5\u4e3a\u6210\u5458\u503c\u6dfb\u52a0\u65b0\u5c5e\u6027\u3002 import enum class BugStatus ( enum . Enum ): new = ( 7 , [ 'incomplete' , 'invalid' , 'wont_fix' , 'in_progress' ]) incomplete = ( 6 , [ 'new' , 'wont_fix' ]) invalid = ( 5 , [ 'new' ]) wont_fix = ( 4 , [ 'new' ]) in_progress = ( 3 , [ 'new' , 'fix_committed' ]) fix_committed = ( 2 , [ 'in_progress' , 'fix_released' ]) fix_released = ( 1 , [ 'new' ]) def __init__ ( self , num , transitions ): self . num = num self . transitions = transitions def can_transition ( self , new_state ): return new_state . name in self . transitions print ( 'Name:' , BugStatus . in_progress ) print ( 'Value:' , BugStatus . in_progress . value ) print ( 'Custom attribute:' , BugStatus . in_progress . transitions ) print ( 'Using attribute:' , BugStatus . in_progress . can_transition ( BugStatus . new )) Name: BugStatus.in_progress Value: (3, ['new', 'fix_committed']) Custom attribute: ['new', 'fix_committed'] Using attribute: True \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c \u6bcf\u4e00\u4e2a\u6210\u5458\u503c\u90fd\u662f\u5305\u542b\u6570\u5b57 ID\uff08\u65b9\u4fbf\u4e8e\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff09\u548ctransitions\u5217\u8868\u3002 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u60c5\u51b5\u6765\u8bf4\uff0c\u5143\u7ec4\u53ef\u80fd\u4f1a\u53d8\u5f97\u6bd4\u8f83\u7b28\u62d9\u3002\u7531\u4e8e\u6210\u5458\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b57\u5178\u53ef\u4ee5\u88ab\u7528\u4e8e\u9700\u8981\u8ddf\u8e2a\u6bcf\u4e2a\u679a\u4e3e\u503c\u7684\u72ec\u7acb\u5c5e\u6027\u7684\u60c5\u51b5\u3002\u590d\u6742\u7684\u503c\u4f5c\u4e3a\u9664\u4e86 self \u4e4b\u5916\u552f\u4e00\u7684\u53c2\u6570\u4f20\u9012\u7ed9 __init__() import enum class BugStatus ( enum . Enum ): new = { 'num' : 7 , 'transitions' : [ 'incomplete' , 'invalid' , 'wont_fix' , 'in_progress' , ], } incomplete = { 'num' : 6 , 'transitions' : [ 'new' , 'wont_fix' ], } invalid = { 'num' : 5 , 'transitions' : [ 'new' ], } wont_fix = { 'num' : 4 , 'transitions' : [ 'new' ], } in_progress = { 'num' : 3 , 'transitions' : [ 'new' , 'fix_committed' ], } fix_committed = { 'num' : 2 , 'transitions' : [ 'in_progress' , 'fix_released' ], } fix_released = { 'num' : 1 , 'transitions' : [ 'new' ], } def __init__ ( self , vals ): self . num = vals [ 'num' ] self . transitions = vals [ 'transitions' ] def can_transition ( self , new_state ): return new_state . name in self . transitions print ( 'Name:' , BugStatus . in_progress ) print ( 'Value:' , BugStatus . in_progress . value ) print ( 'Custom attribute:' , BugStatus . in_progress . transitions ) print ( 'Using attribute:' , BugStatus . in_progress . can_transition ( BugStatus . new )) Name: BugStatus.in_progress Value: {'num': 3, 'transitions': ['new', 'fix_committed']} Custom attribute: ['new', 'fix_committed'] Using attribute: True \u91cd\u5199 __new__() \u51fd\u6570\u53ef\u6dfb\u52a0\u5c5e\u6027\u3002 class AutoNumber ( enum . Enum ): def __new__ ( cls ): value = len ( cls . __members__ ) + 1 obj = object . __new__ ( cls ) obj . test = value return obj class Color ( AutoNumber ): RED = () GREEN = () BLUE = () print ( Color . RED . test ) 1 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. $$ \\sum $$ $$ \\sum $$ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. a = 1 print ( \"test\" ) test","title":"\u975e\u6574\u6570\u6210\u5458\u503c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.13.difflib%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.08.07 difflib \u2014 \u5b57\u7b26\u6bd4\u8f83 \u76ee\u6807\uff1a\u5b57\u7b26\u5e8f\u5217\u6bd4\u8f83\uff0c\u7279\u522b\u662f\u6210\u884c\u7684\u6587\u672c\u3002 difflib \u6a21\u5757\u5305\u542b\u7528\u6765\u8ba1\u7b97\u5b57\u7b26\u5e8f\u5217\u95f4\u4e0d\u540c\u5e76\u8fdb\u884c\u5904\u7406\u7684\u5de5\u5177\u3002\u5b83\u5728\u6bd4\u8f83\u6587\u672c\u65b9\u9762\u5341\u5206\u6709\u6548\uff0c\u540c\u65f6\u8fd8\u5305\u542b\u4e86\u5229\u7528\u82e5\u5e72\u516c\u5171\u5dee\u5f02\u683c\u5f0f\u6765\u751f\u6210\u62a5\u544a\u7684\u51fd\u6570\u3002 text1 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis pharetra tortor. In nec mauris eget magna consequat convalis. Nam sed sem vitae odio pellentesque interdum. Sed consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate tristique enim. Donec quis lectus a justo imperdiet tempus.\"\"\" text1_lines = text1 . splitlines () text2 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis pharetra tortor. In nec mauris eget magna consequat convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta adipiscing. Duis vulputate tristique enim. Donec quis lectus a justo imperdiet tempus. Suspendisse eu lectus. In nunc.\"\"\" text2_lines = text2 . splitlines () \u6bd4\u8f83\u6587\u672c\u4f53 Differ \u7c7b\u9002\u7528\u4e8e\u6587\u672c\u884c\u5e8f\u5217\u5e76\u4ea7\u751f\u4eba\u7c7b\u53ef\u8bfb\u7684\u589e\u91cf \uff0c\u6216\u66f4\u6539\u6307\u4ee4\uff0c\u5305\u62ec\u5404\u884c\u5185\u7684\u5dee\u5f02\u3002 Differ \u751f\u6210\u7684\u9ed8\u8ba4\u8f93\u51fa\u7c7b\u4f3c\u4e8e Unix \u4e0b\u7684 diff \u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b83\u5305\u62ec\u6765\u81ea\u4e24\u4e2a\u5217\u8868\u7684\u539f\u59cb\u8f93\u5165\u503c\uff08\u5305\u62ec\u516c\u5171\u503c\uff09\u548c\u6807\u8bb0\u6570\u636e\uff0c\u4ee5\u6307\u793a\u8fdb\u884c\u4e86\u54ea\u4e9b\u66f4\u6539\u3002 \u4ee5 - \u4e3a\u524d\u7f00\u7684\u884c\u5728\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4e2d\uff0c\u4f46\u4e0d\u5728\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u4e2d\u3002 \u4ee5 + \u4e3a\u524d\u7f00\u7684\u884c\u5728\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u4e2d\uff0c\u4f46\u4e0d\u5728\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4e2d\u3002 \u5982\u679c\u67d0\u884c\u5728\u5404\u4e2a\u7248\u672c\u4e4b\u95f4\u5b58\u5728 \u589e\u91cf\u5dee\u5f02 \uff0c\u5219\u4f7f\u7528\u524d\u7f00\u4e3a ? \u7684\u989d\u5916\u884c\u6765\u7a81\u51fa\u663e\u793a\u65b0\u7248\u672c\u4e2d\u7684\u66f4\u6539\u3002 \u5982\u679c\u4e00\u884c\u5728\u5404\u7248\u672c\u95f4\u6ca1\u6709\u5dee\u5f02\uff0c\u524d\u7f00\u5219\u4e3a\u4e00\u4e2a\u7a7a\u683c\uff0c\u4f7f\u5176\u4e0e\u5b58\u5728\u5dee\u5f02\u7684\u884c\u5bf9\u9f50\u3002 \u5728\u5c06\u6587\u672c\u4f20\u9012\u7ed9 compare() \u4e4b\u524d\uff0c\u5c06\u6587\u672c\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u5355\u72ec\u7684\u884c\u4f1a\u751f\u6210\u6bd4\u4f20\u5165\u5927\u5b57\u7b26\u4e32\u66f4\u53ef\u8bfb\u7684\u8f93\u51fa\u3002 import difflib d = difflib . Differ () diff = d . compare ( text1_lines , text2_lines ) print ( ' \\n ' . join ( diff )) Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec - pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis + pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ? + - pharetra tortor. In nec mauris eget magna consequat ? - + pharetra tortor. In nec mauris eget magna consequat - convalis. Nam sed sem vitae odio pellentesque interdum. Sed ? - -- + convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed ? +++ +++++ + consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta - adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate - tristique enim. Donec quis lectus a justo imperdiet tempus. + adipiscing. Duis vulputate tristique enim. Donec quis lectus a + justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u6837\u672c\u6570\u636e\u4e2d\u4e24\u4e2a\u6587\u672c\u6bb5\u7684\u5f00\u5934\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u7b2c\u4e00\u884c\u6253\u5370\u65f6\u6ca1\u6709\u4efb\u4f55\u989d\u5916\u7684\u6ce8\u91ca\u3002 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec \u6570\u636e\u7684\u7b2c\u4e09\u884c\u5df2\u66f4\u6539\u4e3a\u5728\u4fee\u6539\u540e\u5305\u542b\u9017\u53f7\u7684\u6587\u672c\u3002 \u8be5\u884c\u7684\u4e24\u4e2a\u7248\u672c\u90fd\u6253\u5370\u51fa\u6765\uff0c\u7b2c 5 \u884c\u7684\u989d\u5916\u4fe1\u606f\u663e\u793a\u4e86\u4fee\u6539\u6587\u672c\u7684\u5217\uff0c\u5305\u62ec\u6dfb\u52a0\u4e86 \uff0c \u5b57\u7b26\u7684\u4e8b\u5b9e\u3002 - pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis + pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ? + \u8f93\u51fa\u7684\u4e0b\u51e0\u884c\u663e\u793a\u5220\u9664\u4e86\u989d\u5916\u7684\u7a7a\u95f4\u3002 - pharetra tortor. In nec mauris eget magna consequat ? - + pharetra tortor. In nec mauris eget magna consequat \u63a5\u4e0b\u6765\uff0c\u8fdb\u884c\u4e86\u66f4\u590d\u6742\u7684\u66f4\u6539\uff0c\u66ff\u6362\u4e86\u77ed\u8bed\u4e2d\u7684\u591a\u4e2a\u5355\u8bcd\u3002 - convalis. Nam sed sem vitae odio pellentesque interdum. Sed ? - -- + convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed ? +++ +++++ + \u6bb5\u843d\u4e2d\u7684\u6700\u540e\u4e00\u53e5\u88ab\u663e\u8457\u66f4\u6539\uff0c\u56e0\u6b64\u901a\u8fc7\u5220\u9664\u65e7\u7248\u672c\u5e76\u6dfb\u52a0\u65b0\u7248\u672c\u6765\u8868\u793a\u5dee\u5f02\u3002 consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta - adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate - tristique enim. Donec quis lectus a justo imperdiet tempus. + adipiscing. Duis vulputate tristique enim. Donec quis lectus a + justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u5982\u679c\u6587\u672c\u6ca1\u6709\u88ab\u62c6\u5206\u4e3a\u5355\u72ec\u7684\u884c\uff0c\u5219\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a diff = d . compare ( \"abc\" , \"cba\" ) print ( ' \\n ' . join ( diff )) + c + b a - b - c ndiff() \u51fd\u6570\u4ea7\u751f\u57fa\u672c\u76f8\u540c\u7684\u8f93\u51fa\u3002 \u8be5\u5904\u7406\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u6587\u672c\u6570\u636e\u5e76\u6d88\u9664\u8f93\u5165\u4e2d\u7684 \u201c\u566a\u58f0\u201d\u3002 diff = difflib . ndiff ( text1_lines , text2_lines ) print ( ' \\n ' . join ( diff )) Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec - pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis + pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ? + - pharetra tortor. In nec mauris eget magna consequat ? - + pharetra tortor. In nec mauris eget magna consequat - convalis. Nam sed sem vitae odio pellentesque interdum. Sed ? ------ + convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed ? +++ +++++++++ consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta - adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate - tristique enim. Donec quis lectus a justo imperdiet tempus. + adipiscing. Duis vulputate tristique enim. Donec quis lectus a + justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u5176\u4ed6\u8f93\u51fa\u683c\u5f0f \u867d\u7136 Differ \u7c7b\u5c55\u793a\u4e86\u6240\u6709\u7684\u8f93\u5165\u884c\uff0c unified diff \u4ec5\u5305\u62ec\u4fee\u6539\u8fc7\u7684\u884c\u548c\u4e00\u4e9b\u4e0a\u4e0b\u6587\u3002 unified_diff() \u51fd\u6570\u4ea7\u751f\u8fd9\u79cd\u8f93\u51fa\u3002 import difflib diff = difflib . unified_diff ( text1_lines , text2_lines , n = 0 , lineterm = '' ) print ( ' \\n ' . join ( diff )) --- +++ @@ -3,3 +3,3 @@ -pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis -pharetra tortor. In nec mauris eget magna consequat -convalis. Nam sed sem vitae odio pellentesque interdum. Sed +pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis +pharetra tortor. In nec mauris eget magna consequat +convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed @@ -10,2 +10,2 @@ -adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate -tristique enim. Donec quis lectus a justo imperdiet tempus. +adipiscing. Duis vulputate tristique enim. Donec quis lectus a +justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u4f7f\u7528 context_diff() \u4ea7\u751f\u7c7b\u4f3c\u7684\u53ef\u8bfb\u8f93\u51fa\u3002 diff = difflib . context_diff ( text1_lines , text2_lines , n = 0 , lineterm = '' ) print ( ' \\n ' . join ( diff )) *** --- *************** *** 3,5 **** ! pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis ! pharetra tortor. In nec mauris eget magna consequat ! convalis. Nam sed sem vitae odio pellentesque interdum. Sed --- 3,5 ---- ! pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ! pharetra tortor. In nec mauris eget magna consequat ! convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed *************** *** 10,11 **** ! adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate ! tristique enim. Donec quis lectus a justo imperdiet tempus. --- 10,11 ---- ! adipiscing. Duis vulputate tristique enim. Donec quis lectus a ! justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u5783\u573e\u6570\u636e \u751f\u6210\u5dee\u5f02\u5e8f\u5217\u7684\u6240\u6709\u51fd\u6570\u90fd\u63a5\u53d7\u53c2\u6570\uff0c\u4ee5\u6307\u793a\u5e94\u5ffd\u7565\u54ea\u4e9b\u884c\u4ee5\u53ca\u5e94\u5ffd\u7565\u884c\u4e2d\u7684\u54ea\u4e9b\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u7528\u4e8e\u8df3\u8fc7\u4e00\u4e2a\u6587\u4ef6\u7684\u4e24\u4e2a\u7248\u672c\u4e2d\u7684\u6807\u8bb0\u6216\u7a7a\u767d\u53d8\u5316\u3002 # \u8fd9\u4e2a\u4f8b\u5b50\u6539\u7f16\u81ea difflib.py \u6e90\u7801\u3002 from difflib import SequenceMatcher def show_results ( match ): print ( ' a = {} ' . format ( match . a )) print ( ' b = {} ' . format ( match . b )) print ( ' size = {} ' . format ( match . size )) i , j , k = match print ( ' A[a:a+size] = {!r} ' . format ( A [ i : i + k ])) print ( ' B[b:b+size] = {!r} ' . format ( B [ j : j + k ])) A = \" abcd\" B = \"abcd abcd\" print ( 'A = {!r} ' . format ( A )) print ( 'B = {!r} ' . format ( B )) print ( ' \\n Without junk detection:' ) s1 = SequenceMatcher ( None , A , B ) match1 = s1 . find_longest_match ( 0 , len ( A ), 0 , len ( B )) show_results ( match1 ) print ( ' \\n Treat spaces as junk:' ) s2 = SequenceMatcher ( lambda x : x == \" \" , A , B ) match2 = s2 . find_longest_match ( 0 , len ( A ), 0 , len ( B )) show_results ( match2 ) A = ' abcd' B = 'abcd abcd' Without junk detection: a = 0 b = 4 size = 5 A[a:a+size] = ' abcd' B[b:b+size] = ' abcd' Treat spaces as junk: a = 1 b = 0 size = 4 A[a:a+size] = 'abcd' B[b:b+size] = 'abcd' Differ \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u662f\u4e0d\u8981\u5ffd\u7565\u4efb\u4f55\u884c\u6216\u660e\u786e\u7684\u5b57\u7b26\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e SequenceMatcher \u68c0\u6d4b\u566a\u58f0\u7684\u80fd\u529b\u3002 ndiff() \u9ed8\u8ba4\u5ffd\u7565\u7a7a\u767d\u7b26\u548c\u5236\u8868\u7b26\u3002 \u6bd4\u8f83\u4efb\u610f\u7c7b\u578b SequenceMatcher \u7c7b\u6bd4\u8f83\u4efb\u610f\u7c7b\u578b\u7684\u4e24\u4e2a\u5e8f\u5217\uff0c\u53ea\u8981\u503c\u662f\u53ef\u6563\u5217\u7684\u3002 \u5b83\u4f7f\u7528\u4e00\u79cd\u7b97\u6cd5\u6765\u8bc6\u522b\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u8fde\u7eed\u5339\u914d\u5757\uff0c\u6d88\u9664\u4e86\u5bf9\u771f\u5b9e\u6570\u636e\u6ca1\u7528\u7684 \u201c\u5783\u573e\u201d \u503c\u3002 \u51fd\u6570 get_opcodes() \u8fd4\u56de\u4e00\u4e2a\u6307\u4ee4\u5217\u8868\uff0c\u7528\u4e8e\u4fee\u6539\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4ee5\u4f7f\u5176\u4e0e\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u5339\u914d\u3002\u6307\u4ee4\u88ab\u7f16\u7801\u4e3a\u4e94\u5143\u7d20\u5143\u7ec4\uff0c\u5305\u62ec\u4e00\u4e2a\u5b57\u7b26\u4e32\u6307\u4ee4\uff08\u300c\u64cd\u4f5c\u7801\u300d\uff0c\u89c1\u4e0b\u8868\uff09\u548c\u4e24\u5bf9\u5f00\u59cb\u548c\u505c\u6b62\u7d22\u5f15\u5230\u5e8f\u5217\u4e2d\uff08\u8868\u793a\u4e3a i1 \uff0c i2 \uff0c j1 \uff0c\u548c j2 \uff09\u3002 \u64cd\u4f5c\u7801 \u5b9a\u4e49 'replace' \u5c06 a[i1:i2] \u66ff\u6362\u4e3a b[j1:j2] 'delete' \u5b8c\u5168\u79fb\u9664 a[i1:i2] 'insert' \u5c06 b[j1:j2] \u63d2\u5165\u5230 a[i1:i1] 'equal' \u5b50\u5e8f\u5217\u5b8c\u5168\u76f8\u7b49 import difflib s1 = [ 1 , 2 , 3 , 5 , 6 , 4 ] s2 = [ 2 , 3 , 5 , 4 , 6 , 1 ] print ( 'Initial data:' ) print ( 's1 =' , s1 ) print ( 's2 =' , s2 ) print ( 's1 == s2:' , s1 == s2 ) print () matcher = difflib . SequenceMatcher ( None , s1 , s2 ) for tag , i1 , i2 , j1 , j2 in reversed ( matcher . get_opcodes ()): if tag == 'delete' : print ( 'Remove {} from positions [ {} : {} ]' . format ( s1 [ i1 : i2 ], i1 , i2 )) print ( ' before =' , s1 ) del s1 [ i1 : i2 ] elif tag == 'equal' : print ( 's1[ {} : {} ] and s2[ {} : {} ] are the same' . format ( i1 , i2 , j1 , j2 )) elif tag == 'insert' : print ( 'Insert {} from s2[ {} : {} ] into s1 at {} ' . format ( s2 [ j1 : j2 ], j1 , j2 , i1 )) print ( ' before =' , s1 ) s1 [ i1 : i2 ] = s2 [ j1 : j2 ] elif tag == 'replace' : print (( 'Replace {} from s1[ {} : {} ] ' 'with {} from s2[ {} : {} ]' ) . format ( s1 [ i1 : i2 ], i1 , i2 , s2 [ j1 : j2 ], j1 , j2 )) print ( ' before =' , s1 ) s1 [ i1 : i2 ] = s2 [ j1 : j2 ] print ( ' after =' , s1 , ' \\n ' ) print ( 's1 == s2:' , s1 == s2 ) Initial data: s1 = [1, 2, 3, 5, 6, 4] s2 = [2, 3, 5, 4, 6, 1] s1 == s2: False Replace [4] from s1[5:6] with [1] from s2[5:6] before = [1, 2, 3, 5, 6, 4] after = [1, 2, 3, 5, 6, 1] s1[4:5] and s2[4:5] are the same after = [1, 2, 3, 5, 6, 1] Insert [4] from s2[3:4] into s1 at 4 before = [1, 2, 3, 5, 6, 1] after = [1, 2, 3, 5, 4, 6, 1] s1[1:4] and s2[0:3] are the same after = [1, 2, 3, 5, 4, 6, 1] Remove [1] from positions [0:1] before = [1, 2, 3, 5, 4, 6, 1] after = [2, 3, 5, 4, 6, 1] s1 == s2: True \u6b64\u793a\u4f8b\u6bd4\u8f83\u4e24\u4e2a\u6574\u6570\u5217\u8868\uff0c\u5e76\u4f7f\u7528 get_opcodes() \u6d3e\u751f\u5c06\u539f\u59cb\u5217\u8868\u8f6c\u6362\u4e3a\u8f83\u65b0\u7248\u672c\u7684\u6307\u4ee4\u3002\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u4fee\u6539\uff0c\u4ee5\u4fbf\u5728\u6dfb\u52a0\u548c\u5220\u9664\u9879\u76ee\u540e\u5217\u8868\u7d22\u5f15\u4fdd\u6301\u51c6\u786e\u3002 SequenceMatcher \u9002\u7528\u4e8e\u81ea\u5b9a\u4e49\u7c7b\u4ee5\u53ca\u5185\u7f6e\u7c7b\u578b\uff0c\u53ea\u8981\u5b83\u4eec\u662f\u53ef\u6563\u5217\u7684\u3002","title":"6.13.difflib\u2014\u2014\u5b57\u7b26\u6bd4\u8f83"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.13.difflib%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83.html#difflib","text":"\u76ee\u6807\uff1a\u5b57\u7b26\u5e8f\u5217\u6bd4\u8f83\uff0c\u7279\u522b\u662f\u6210\u884c\u7684\u6587\u672c\u3002 difflib \u6a21\u5757\u5305\u542b\u7528\u6765\u8ba1\u7b97\u5b57\u7b26\u5e8f\u5217\u95f4\u4e0d\u540c\u5e76\u8fdb\u884c\u5904\u7406\u7684\u5de5\u5177\u3002\u5b83\u5728\u6bd4\u8f83\u6587\u672c\u65b9\u9762\u5341\u5206\u6709\u6548\uff0c\u540c\u65f6\u8fd8\u5305\u542b\u4e86\u5229\u7528\u82e5\u5e72\u516c\u5171\u5dee\u5f02\u683c\u5f0f\u6765\u751f\u6210\u62a5\u544a\u7684\u51fd\u6570\u3002 text1 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis pharetra tortor. In nec mauris eget magna consequat convalis. Nam sed sem vitae odio pellentesque interdum. Sed consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate tristique enim. Donec quis lectus a justo imperdiet tempus.\"\"\" text1_lines = text1 . splitlines () text2 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis pharetra tortor. In nec mauris eget magna consequat convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta adipiscing. Duis vulputate tristique enim. Donec quis lectus a justo imperdiet tempus. Suspendisse eu lectus. In nunc.\"\"\" text2_lines = text2 . splitlines ()","title":"difflib \u2014 \u5b57\u7b26\u6bd4\u8f83"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.13.difflib%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83.html#_1","text":"Differ \u7c7b\u9002\u7528\u4e8e\u6587\u672c\u884c\u5e8f\u5217\u5e76\u4ea7\u751f\u4eba\u7c7b\u53ef\u8bfb\u7684\u589e\u91cf \uff0c\u6216\u66f4\u6539\u6307\u4ee4\uff0c\u5305\u62ec\u5404\u884c\u5185\u7684\u5dee\u5f02\u3002 Differ \u751f\u6210\u7684\u9ed8\u8ba4\u8f93\u51fa\u7c7b\u4f3c\u4e8e Unix \u4e0b\u7684 diff \u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b83\u5305\u62ec\u6765\u81ea\u4e24\u4e2a\u5217\u8868\u7684\u539f\u59cb\u8f93\u5165\u503c\uff08\u5305\u62ec\u516c\u5171\u503c\uff09\u548c\u6807\u8bb0\u6570\u636e\uff0c\u4ee5\u6307\u793a\u8fdb\u884c\u4e86\u54ea\u4e9b\u66f4\u6539\u3002 \u4ee5 - \u4e3a\u524d\u7f00\u7684\u884c\u5728\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4e2d\uff0c\u4f46\u4e0d\u5728\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u4e2d\u3002 \u4ee5 + \u4e3a\u524d\u7f00\u7684\u884c\u5728\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u4e2d\uff0c\u4f46\u4e0d\u5728\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4e2d\u3002 \u5982\u679c\u67d0\u884c\u5728\u5404\u4e2a\u7248\u672c\u4e4b\u95f4\u5b58\u5728 \u589e\u91cf\u5dee\u5f02 \uff0c\u5219\u4f7f\u7528\u524d\u7f00\u4e3a ? \u7684\u989d\u5916\u884c\u6765\u7a81\u51fa\u663e\u793a\u65b0\u7248\u672c\u4e2d\u7684\u66f4\u6539\u3002 \u5982\u679c\u4e00\u884c\u5728\u5404\u7248\u672c\u95f4\u6ca1\u6709\u5dee\u5f02\uff0c\u524d\u7f00\u5219\u4e3a\u4e00\u4e2a\u7a7a\u683c\uff0c\u4f7f\u5176\u4e0e\u5b58\u5728\u5dee\u5f02\u7684\u884c\u5bf9\u9f50\u3002 \u5728\u5c06\u6587\u672c\u4f20\u9012\u7ed9 compare() \u4e4b\u524d\uff0c\u5c06\u6587\u672c\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u5355\u72ec\u7684\u884c\u4f1a\u751f\u6210\u6bd4\u4f20\u5165\u5927\u5b57\u7b26\u4e32\u66f4\u53ef\u8bfb\u7684\u8f93\u51fa\u3002 import difflib d = difflib . Differ () diff = d . compare ( text1_lines , text2_lines ) print ( ' \\n ' . join ( diff )) Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec - pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis + pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ? + - pharetra tortor. In nec mauris eget magna consequat ? - + pharetra tortor. In nec mauris eget magna consequat - convalis. Nam sed sem vitae odio pellentesque interdum. Sed ? - -- + convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed ? +++ +++++ + consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta - adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate - tristique enim. Donec quis lectus a justo imperdiet tempus. + adipiscing. Duis vulputate tristique enim. Donec quis lectus a + justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u6837\u672c\u6570\u636e\u4e2d\u4e24\u4e2a\u6587\u672c\u6bb5\u7684\u5f00\u5934\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u7b2c\u4e00\u884c\u6253\u5370\u65f6\u6ca1\u6709\u4efb\u4f55\u989d\u5916\u7684\u6ce8\u91ca\u3002 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec \u6570\u636e\u7684\u7b2c\u4e09\u884c\u5df2\u66f4\u6539\u4e3a\u5728\u4fee\u6539\u540e\u5305\u542b\u9017\u53f7\u7684\u6587\u672c\u3002 \u8be5\u884c\u7684\u4e24\u4e2a\u7248\u672c\u90fd\u6253\u5370\u51fa\u6765\uff0c\u7b2c 5 \u884c\u7684\u989d\u5916\u4fe1\u606f\u663e\u793a\u4e86\u4fee\u6539\u6587\u672c\u7684\u5217\uff0c\u5305\u62ec\u6dfb\u52a0\u4e86 \uff0c \u5b57\u7b26\u7684\u4e8b\u5b9e\u3002 - pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis + pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ? + \u8f93\u51fa\u7684\u4e0b\u51e0\u884c\u663e\u793a\u5220\u9664\u4e86\u989d\u5916\u7684\u7a7a\u95f4\u3002 - pharetra tortor. In nec mauris eget magna consequat ? - + pharetra tortor. In nec mauris eget magna consequat \u63a5\u4e0b\u6765\uff0c\u8fdb\u884c\u4e86\u66f4\u590d\u6742\u7684\u66f4\u6539\uff0c\u66ff\u6362\u4e86\u77ed\u8bed\u4e2d\u7684\u591a\u4e2a\u5355\u8bcd\u3002 - convalis. Nam sed sem vitae odio pellentesque interdum. Sed ? - -- + convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed ? +++ +++++ + \u6bb5\u843d\u4e2d\u7684\u6700\u540e\u4e00\u53e5\u88ab\u663e\u8457\u66f4\u6539\uff0c\u56e0\u6b64\u901a\u8fc7\u5220\u9664\u65e7\u7248\u672c\u5e76\u6dfb\u52a0\u65b0\u7248\u672c\u6765\u8868\u793a\u5dee\u5f02\u3002 consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta - adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate - tristique enim. Donec quis lectus a justo imperdiet tempus. + adipiscing. Duis vulputate tristique enim. Donec quis lectus a + justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u5982\u679c\u6587\u672c\u6ca1\u6709\u88ab\u62c6\u5206\u4e3a\u5355\u72ec\u7684\u884c\uff0c\u5219\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a diff = d . compare ( \"abc\" , \"cba\" ) print ( ' \\n ' . join ( diff )) + c + b a - b - c ndiff() \u51fd\u6570\u4ea7\u751f\u57fa\u672c\u76f8\u540c\u7684\u8f93\u51fa\u3002 \u8be5\u5904\u7406\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u6587\u672c\u6570\u636e\u5e76\u6d88\u9664\u8f93\u5165\u4e2d\u7684 \u201c\u566a\u58f0\u201d\u3002 diff = difflib . ndiff ( text1_lines , text2_lines ) print ( ' \\n ' . join ( diff )) Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Integer eu lacus accumsan arcu fermentum euismod. Donec - pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis + pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ? + - pharetra tortor. In nec mauris eget magna consequat ? - + pharetra tortor. In nec mauris eget magna consequat - convalis. Nam sed sem vitae odio pellentesque interdum. Sed ? ------ + convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed ? +++ +++++++++ consequat viverra nisl. Suspendisse arcu metus, blandit quis, rhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy molestie orci. Praesent nisi elit, fringilla ac, suscipit non, tristique vel, mauris. Curabitur vel lorem id nisl porta - adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate - tristique enim. Donec quis lectus a justo imperdiet tempus. + adipiscing. Duis vulputate tristique enim. Donec quis lectus a + justo imperdiet tempus. Suspendisse eu lectus. In nunc.","title":"\u6bd4\u8f83\u6587\u672c\u4f53"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.13.difflib%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83.html#_2","text":"\u867d\u7136 Differ \u7c7b\u5c55\u793a\u4e86\u6240\u6709\u7684\u8f93\u5165\u884c\uff0c unified diff \u4ec5\u5305\u62ec\u4fee\u6539\u8fc7\u7684\u884c\u548c\u4e00\u4e9b\u4e0a\u4e0b\u6587\u3002 unified_diff() \u51fd\u6570\u4ea7\u751f\u8fd9\u79cd\u8f93\u51fa\u3002 import difflib diff = difflib . unified_diff ( text1_lines , text2_lines , n = 0 , lineterm = '' ) print ( ' \\n ' . join ( diff )) --- +++ @@ -3,3 +3,3 @@ -pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis -pharetra tortor. In nec mauris eget magna consequat -convalis. Nam sed sem vitae odio pellentesque interdum. Sed +pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis +pharetra tortor. In nec mauris eget magna consequat +convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed @@ -10,2 +10,2 @@ -adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate -tristique enim. Donec quis lectus a justo imperdiet tempus. +adipiscing. Duis vulputate tristique enim. Donec quis lectus a +justo imperdiet tempus. Suspendisse eu lectus. In nunc. \u4f7f\u7528 context_diff() \u4ea7\u751f\u7c7b\u4f3c\u7684\u53ef\u8bfb\u8f93\u51fa\u3002 diff = difflib . context_diff ( text1_lines , text2_lines , n = 0 , lineterm = '' ) print ( ' \\n ' . join ( diff )) *** --- *************** *** 3,5 **** ! pulvinar porttitor tellus. Aliquam venenatis. Donec facilisis ! pharetra tortor. In nec mauris eget magna consequat ! convalis. Nam sed sem vitae odio pellentesque interdum. Sed --- 3,5 ---- ! pulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis ! pharetra tortor. In nec mauris eget magna consequat ! convalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed *************** *** 10,11 **** ! adipiscing. Suspendisse eu lectus. In nunc. Duis vulputate ! tristique enim. Donec quis lectus a justo imperdiet tempus. --- 10,11 ---- ! adipiscing. Duis vulputate tristique enim. Donec quis lectus a ! justo imperdiet tempus. Suspendisse eu lectus. In nunc.","title":"\u5176\u4ed6\u8f93\u51fa\u683c\u5f0f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.13.difflib%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83.html#_3","text":"\u751f\u6210\u5dee\u5f02\u5e8f\u5217\u7684\u6240\u6709\u51fd\u6570\u90fd\u63a5\u53d7\u53c2\u6570\uff0c\u4ee5\u6307\u793a\u5e94\u5ffd\u7565\u54ea\u4e9b\u884c\u4ee5\u53ca\u5e94\u5ffd\u7565\u884c\u4e2d\u7684\u54ea\u4e9b\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u8fd9\u4e9b\u53c2\u6570\u53ef\u7528\u4e8e\u8df3\u8fc7\u4e00\u4e2a\u6587\u4ef6\u7684\u4e24\u4e2a\u7248\u672c\u4e2d\u7684\u6807\u8bb0\u6216\u7a7a\u767d\u53d8\u5316\u3002 # \u8fd9\u4e2a\u4f8b\u5b50\u6539\u7f16\u81ea difflib.py \u6e90\u7801\u3002 from difflib import SequenceMatcher def show_results ( match ): print ( ' a = {} ' . format ( match . a )) print ( ' b = {} ' . format ( match . b )) print ( ' size = {} ' . format ( match . size )) i , j , k = match print ( ' A[a:a+size] = {!r} ' . format ( A [ i : i + k ])) print ( ' B[b:b+size] = {!r} ' . format ( B [ j : j + k ])) A = \" abcd\" B = \"abcd abcd\" print ( 'A = {!r} ' . format ( A )) print ( 'B = {!r} ' . format ( B )) print ( ' \\n Without junk detection:' ) s1 = SequenceMatcher ( None , A , B ) match1 = s1 . find_longest_match ( 0 , len ( A ), 0 , len ( B )) show_results ( match1 ) print ( ' \\n Treat spaces as junk:' ) s2 = SequenceMatcher ( lambda x : x == \" \" , A , B ) match2 = s2 . find_longest_match ( 0 , len ( A ), 0 , len ( B )) show_results ( match2 ) A = ' abcd' B = 'abcd abcd' Without junk detection: a = 0 b = 4 size = 5 A[a:a+size] = ' abcd' B[b:b+size] = ' abcd' Treat spaces as junk: a = 1 b = 0 size = 4 A[a:a+size] = 'abcd' B[b:b+size] = 'abcd' Differ \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u662f\u4e0d\u8981\u5ffd\u7565\u4efb\u4f55\u884c\u6216\u660e\u786e\u7684\u5b57\u7b26\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e SequenceMatcher \u68c0\u6d4b\u566a\u58f0\u7684\u80fd\u529b\u3002 ndiff() \u9ed8\u8ba4\u5ffd\u7565\u7a7a\u767d\u7b26\u548c\u5236\u8868\u7b26\u3002","title":"\u5783\u573e\u6570\u636e"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.13.difflib%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83.html#_4","text":"SequenceMatcher \u7c7b\u6bd4\u8f83\u4efb\u610f\u7c7b\u578b\u7684\u4e24\u4e2a\u5e8f\u5217\uff0c\u53ea\u8981\u503c\u662f\u53ef\u6563\u5217\u7684\u3002 \u5b83\u4f7f\u7528\u4e00\u79cd\u7b97\u6cd5\u6765\u8bc6\u522b\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u8fde\u7eed\u5339\u914d\u5757\uff0c\u6d88\u9664\u4e86\u5bf9\u771f\u5b9e\u6570\u636e\u6ca1\u7528\u7684 \u201c\u5783\u573e\u201d \u503c\u3002 \u51fd\u6570 get_opcodes() \u8fd4\u56de\u4e00\u4e2a\u6307\u4ee4\u5217\u8868\uff0c\u7528\u4e8e\u4fee\u6539\u7b2c\u4e00\u4e2a\u5e8f\u5217\u4ee5\u4f7f\u5176\u4e0e\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u5339\u914d\u3002\u6307\u4ee4\u88ab\u7f16\u7801\u4e3a\u4e94\u5143\u7d20\u5143\u7ec4\uff0c\u5305\u62ec\u4e00\u4e2a\u5b57\u7b26\u4e32\u6307\u4ee4\uff08\u300c\u64cd\u4f5c\u7801\u300d\uff0c\u89c1\u4e0b\u8868\uff09\u548c\u4e24\u5bf9\u5f00\u59cb\u548c\u505c\u6b62\u7d22\u5f15\u5230\u5e8f\u5217\u4e2d\uff08\u8868\u793a\u4e3a i1 \uff0c i2 \uff0c j1 \uff0c\u548c j2 \uff09\u3002 \u64cd\u4f5c\u7801 \u5b9a\u4e49 'replace' \u5c06 a[i1:i2] \u66ff\u6362\u4e3a b[j1:j2] 'delete' \u5b8c\u5168\u79fb\u9664 a[i1:i2] 'insert' \u5c06 b[j1:j2] \u63d2\u5165\u5230 a[i1:i1] 'equal' \u5b50\u5e8f\u5217\u5b8c\u5168\u76f8\u7b49 import difflib s1 = [ 1 , 2 , 3 , 5 , 6 , 4 ] s2 = [ 2 , 3 , 5 , 4 , 6 , 1 ] print ( 'Initial data:' ) print ( 's1 =' , s1 ) print ( 's2 =' , s2 ) print ( 's1 == s2:' , s1 == s2 ) print () matcher = difflib . SequenceMatcher ( None , s1 , s2 ) for tag , i1 , i2 , j1 , j2 in reversed ( matcher . get_opcodes ()): if tag == 'delete' : print ( 'Remove {} from positions [ {} : {} ]' . format ( s1 [ i1 : i2 ], i1 , i2 )) print ( ' before =' , s1 ) del s1 [ i1 : i2 ] elif tag == 'equal' : print ( 's1[ {} : {} ] and s2[ {} : {} ] are the same' . format ( i1 , i2 , j1 , j2 )) elif tag == 'insert' : print ( 'Insert {} from s2[ {} : {} ] into s1 at {} ' . format ( s2 [ j1 : j2 ], j1 , j2 , i1 )) print ( ' before =' , s1 ) s1 [ i1 : i2 ] = s2 [ j1 : j2 ] elif tag == 'replace' : print (( 'Replace {} from s1[ {} : {} ] ' 'with {} from s2[ {} : {} ]' ) . format ( s1 [ i1 : i2 ], i1 , i2 , s2 [ j1 : j2 ], j1 , j2 )) print ( ' before =' , s1 ) s1 [ i1 : i2 ] = s2 [ j1 : j2 ] print ( ' after =' , s1 , ' \\n ' ) print ( 's1 == s2:' , s1 == s2 ) Initial data: s1 = [1, 2, 3, 5, 6, 4] s2 = [2, 3, 5, 4, 6, 1] s1 == s2: False Replace [4] from s1[5:6] with [1] from s2[5:6] before = [1, 2, 3, 5, 6, 4] after = [1, 2, 3, 5, 6, 1] s1[4:5] and s2[4:5] are the same after = [1, 2, 3, 5, 6, 1] Insert [4] from s2[3:4] into s1 at 4 before = [1, 2, 3, 5, 6, 1] after = [1, 2, 3, 5, 4, 6, 1] s1[1:4] and s2[0:3] are the same after = [1, 2, 3, 5, 4, 6, 1] Remove [1] from positions [0:1] before = [1, 2, 3, 5, 4, 6, 1] after = [2, 3, 5, 4, 6, 1] s1 == s2: True \u6b64\u793a\u4f8b\u6bd4\u8f83\u4e24\u4e2a\u6574\u6570\u5217\u8868\uff0c\u5e76\u4f7f\u7528 get_opcodes() \u6d3e\u751f\u5c06\u539f\u59cb\u5217\u8868\u8f6c\u6362\u4e3a\u8f83\u65b0\u7248\u672c\u7684\u6307\u4ee4\u3002\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u4fee\u6539\uff0c\u4ee5\u4fbf\u5728\u6dfb\u52a0\u548c\u5220\u9664\u9879\u76ee\u540e\u5217\u8868\u7d22\u5f15\u4fdd\u6301\u51c6\u786e\u3002 SequenceMatcher \u9002\u7528\u4e8e\u81ea\u5b9a\u4e49\u7c7b\u4ee5\u53ca\u5185\u7f6e\u7c7b\u578b\uff0c\u53ea\u8981\u5b83\u4eec\u662f\u53ef\u6563\u5217\u7684\u3002","title":"\u6bd4\u8f83\u4efb\u610f\u7c7b\u578b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html","text":"from toolkit import H import logging Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.08.14 logging version: 0.5.1.2 h = H ( logging ) d = h . dicts module \u5e38\u91cf sort_func = lambda k : eval ( f \"logging. { k } \" ) \\ if ( isinstance ( eval ( f \"logging. { k } \" ), int ) and eval ( f \"logging. { k } \" ) != 1 ) \\ else 100 d [ \"attr\" ] . sort ( key = sort_func ) print ( \" {0:<20} {1} \\n \" . format ( \"field\" , \"value\" )) for constant in d [ \"attr\" ]: value = eval ( f \"logging. { constant } \" ) print ( \" {0:<20} : {1} \" . format ( constant , value )) field value NOTSET :0 DEBUG :10 INFO :20 WARN :30 WARNING :30 ERROR :40 CRITICAL :50 FATAL :50 BASIC_FORMAT :%(levelname)s:%(name)s:%(message)s lastResort :<_StderrHandler stderr (WARNING)> logMultiprocessing :True logProcesses :True logThreads :True raiseExceptions :True root :<RootLogger root (WARNING)> \u65e5\u5fd7\u7ea7\u522b\u8d8a\u9ad8\u6253\u5370\u7684\u65e5\u5fd7\u8d8a\u5c11\uff0c\u9ed8\u8ba4\u7684\u7ea7\u522b\u662f WARNING \uff0c\u610f\u5473\u7740\u53ea\u4f1a\u8ffd\u8e2a\u8be5\u7ea7\u522b\u53ca\u4ee5\u4e0a\u7684\u4e8b\u4ef6\u3002 notset \u7b49\u540c\u4e8e debug \u3002 \u8bb0\u5f55\u65e5\u5fd7\u7684\u6a21\u5757\u51fd\u6570 Logging \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u65e5\u5fd7\u8bb0\u5f55\u65b9\u5f0f\uff1a \u4f7f\u7528 Logging \u63d0\u4f9b\u7684\u6a21\u5757\u7ea7\u522b\u7684\u51fd\u6570 \u4f7f\u7528 Logging \u65e5\u5fd7\u7cfb\u7edf\u7684\u56db\u5927\u7ec4\u4ef6 logging . debug ( 'Python debug' ) logging . debug ( 'Python debug' ) logging . info ( 'Python info' ) # logging.warn is deprecated logging . warning ( 'Python warning' ) logging . error ( 'Python Error' ) logging . critical ( 'Python critical' ) logging . fatal ( 'Python fatal' ) logging . log ( logging . WARNING , \"log function\" ) try : 1 / 0 except Exception as e : logging . exception ( e ) \u65e5\u5fd7\u8f93\u51fa\u7ed3\u679c\uff1a WARNING:root:Python warning ERROR:root:Python Error CRITICAL:root:Python critical CRITICAL:root:Python fatal WARNING:root:log function ERROR:root:division by zero Traceback (most recent call last): File \"<ipython-input-16-d24461d1cf55>\", line 11, in <module> 1/0 ZeroDivisionError: division by zero \u8bbe\u7f6e\u65e5\u5fd7\u663e\u793a\u7ea7\u522b \u901a\u8fc7 logging.basicConfig() \u53ef\u4ee5\u8bbe\u7f6e root \u7684\u65e5\u5fd7\u7ea7\u522b\u548c\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\u3002 logging.basicConfig() \u5173\u952e\u5b57\u53c2\u6570 \uff1a \u6ce8\u610f \uff1a logging.basicConfig() \u9700\u8981\u5728\u5f00\u5934\u5c31\u8bbe\u7f6e\uff0c\u5728\u4e2d\u95f4\u8bbe\u7f6e\u5e76\u65e0\u4f5c\u7528 \u5173\u952e\u5b57 \u63cf\u8ff0 filename \u521b\u5efa\u4e00\u4e2a FileHandler\uff0c\u4f7f\u7528\u6307\u5b9a\u7684\u6587\u4ef6\u540d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 StreamHandler\u3002 filemode \u5982\u679c\u6307\u660e\u4e86\u6587\u4ef6\u540d\uff0c\u6307\u660e\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f\uff08\u5982\u679c\u6ca1\u6709\u6307\u660e filemode\uff0c\u9ed8\u8ba4\u4e3a \u2018a\u2019\uff09\u3002 format handler \u4f7f\u7528\u6307\u660e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 datefmt handler \u4f7f\u7528\u6307\u660e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 level \u6307\u660e\u6839 logger \u7684\u7ea7\u522b\u3002 stream \u4f7f\u7528\u6307\u660e\u7684\u6d41\u6765\u521d\u59cb\u5316 StreamHandler\u3002\u8be5\u53c2\u6570\u4e0e \u2018filename\u2019 \u4e0d\u517c\u5bb9\uff0c\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u2019stream\u2019 \u88ab\u5ffd\u7565\u3002 format \u683c\u5f0f \u683c\u5f0f \u63cf\u8ff0 %(levelno)s \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u7684\u6570\u503c %(levelname)s \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u540d\u79f0 %(pathname)s \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84 %(filename)s \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u540d\u79f0 %(funcName)s \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u51fd\u6570 %(lineno)d \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u884c\u53f7 %(asctime)s \u6253\u5370\u65e5\u5fd7\u7684\u65f6\u95f4 %(thread)d \u6253\u5370\u7ebf\u7a0b ID %(threadName)s \u6253\u5370\u7ebf\u7a0b\u540d\u79f0 %(process)d \u6253\u5370\u8fdb\u7a0b ID %(message)s \u6253\u5370\u65e5\u5fd7\u4fe1\u606f import logging #\u3000\u6253\u5370\u65e5\u5fd7\u7ea7\u522b def test (): logging . basicConfig ( level = logging . DEBUG ) logging . debug ( 'Python debug' ) logging . info ( 'Python info' ) logging . warning ( 'Python warning' ) logging . error ( 'Python Error' ) logging . critical ( 'Python critical' ) logging . log ( 2 , 'test' ) test () \u8f93\u51fa\uff1a DEBUG:root:Python debug INFO:root:Python info WARNING:root:Python warning ERROR:root:Python Error CRITICAL:root:Python critical \u5c06\u65e5\u5fd7\u4fe1\u606f\u8bb0\u5f55\u5230\u6587\u4ef6 # \u65e5\u5fd7\u4fe1\u606f\u8bb0\u5f55\u5230\u6587\u4ef6 logging . basicConfig ( filename = 'example.log' , level = logging . DEBUG ) logging . debug ( 'This message should go to the log file' ) logging . info ( 'So should this' ) logging . warning ( 'And this, too' ) \u5728\u76f8\u5e94\u7684\u8def\u5f84\u4e0b\u4f1a\u6709 example.log \u65e5\u5fd7\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a DEBUG:root:This message should go to the log file INFO:root:So should this WARNING:root:And this, too \u591a\u4e2a\u6a21\u5757\u8bb0\u5f55\u65e5\u5fd7\u4fe1\u606f \u5982\u679c\u7a0b\u5e8f\u5305\u542b\u591a\u4e2a\u6a21\u5757\uff0c\u5219\u7528\u4ee5\u4e0b\u5b9e\u4f8b\u6765\u663e\u793a\u65e5\u5fd7\u4fe1\u606f\uff1a \u5b9e\u4f8b\u4e2d\u6709\u4e24\u4e2a\u6a21\u5757\uff0c\u4e00\u4e2a\u6a21\u5757\u901a\u8fc7\u5bfc\u5165\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u65b9\u5f0f\u7528\u65e5\u5fd7\u663e\u793a\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u4fe1\u606f\uff1a myapp.py \u6a21\u5757 import logging import mylib def main (): logging . basicConfig ( filename = 'myapp.log' , level = logging . DEBUG ) logging . info ( 'Started' ) mylib . do_something () logging . info ( 'Finished' ) if __name__ == '__main__' : main () mylib.py \u6a21\u5757 import logging def do_something (): logging . info ( 'Doing something' ) \u6267\u884c myapp.py \u6a21\u5757\u4f1a\u6253\u5370\u76f8\u5e94\u65e5\u5fd7\uff0c\u5728\u6587\u4ef6 myapp.log \u4e2d\u663e\u793a\u4fe1\u606f\u5982\u4e0b\uff1a INFO:root:Started INFO:root:Doing something INFO:root:Finishe logging \u6a21\u5757\u56db\u5927\u7ec4\u4ef6 \u7ec4\u4ef6\u540d\u79f0 \u5bf9\u5e94\u7c7b\u540d \u529f\u80fd\u63cf\u8ff0 \u65e5\u5fd7\u5668 Logger \u66b4\u9732\u51fd\u6570\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff0c\u57fa\u4e8e\u65e5\u5fd7\u8bb0\u5f55\u5668\u548c\u8fc7\u6ee4\u5668\u7ea7\u522b\u51b3\u5b9a\u54ea\u4e9b\u65e5\u5fd7\u6709\u6548 \u5904\u7406\u5668 Handler \u5c06 logger \u521b\u5efa\u7684\u65e5\u5fd7\u8bb0\u5f55\u53d1\u9001\u5230\u5408\u9002\u7684\u76ee\u7684\u8f93\u51fa \u8fc7\u6ee4\u5668 Filter \u63d0\u4f9b\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u5de5\u5177\u6765\u51b3\u5b9a\u8f93\u51fa\u54ea\u6761\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4e22\u5f03\u54ea\u6761\u65e5\u5fd7\u8bb0\u5f55 \u683c\u5f0f\u5668 Formatter \u51b3\u5b9a\u65e5\u5fd7\u8bb0\u5f55\u7684\u6700\u7ec8\u8f93\u51fa\u683c\u5f0f \u65e5\u5fd7\u5668 - Logger Logger \u6301\u6709\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u65b9\u6cd5\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u901a\u8fc7Logger\u5bf9\u8c61\u8c03\u7528\u65e5\u5fd7\u63a5\u53e3\uff0c\u65e5\u5fd7\u8bb0\u5f55\u5668\u4e0d\u76f4\u63a5\u5b9e\u4f8b\u5316\uff0c\u800c\u662f\u901a\u8fc7\u6a21\u5757\u7ea7\u51fd\u6570 logging.getLogger(name) \u6765\u5b9e\u4f8b\u5316\u3002 logger = logging.getLogger(logger_name) getLogger() \u51fd\u6570\u6700\u597d\u52a0\u4e0a\u65e5\u5fd7\u6240\u8bb0\u5f55\u7684\u6a21\u5757\u7684\u540d\u5b57\uff0c\u914d\u7f6e\u6587\u4ef6\u548c\u6253\u5370\u65e5\u5fd7\u683c\u5f0f\u4e2d\u7684 %(name)s \u5bf9\u5e94\u7684\u662f\u8fd9\u91cc\u7684\u6a21\u5757\u540d\u5b57\uff0c\u5982\u679c\u4e0d\u6307\u5b9aname\u5219\u8fd4\u56deroot\u5bf9\u8c61\u3002 \u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u591a\u6b21\u8c03\u7528 getLogger() \u603b\u662f\u4f1a\u8fd4\u56de\u5bf9\u76f8\u540c Logger \u5bf9\u8c61\u7684\u5f15\u7528\u3002 Logger\u6700\u5e38\u7528\u7684\u64cd\u4f5c\u6709\u4e24\u7c7b\uff1a\u914d\u7f6e\u548c\u53d1\u9001\u65e5\u5fd7\u6d88\u606f\u3002 logger = logging . getLogger ( __name__ ) # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logger . setLevel ( logging . DEBUG ) # \u4e3a Logger \u5b9e\u4f8b\u589e\u52a0\u4e00\u4e2a\u5904\u7406\u5668 logger . addHandler ( handler_name ) # \u4e3a Logger \u5b9e\u4f8b\u5220\u9664\u4e00\u4e2a\u5904\u7406\u5668 logger . removeHandler ( handler_name ) \u5904\u7406\u5668 - Handler Handler \u5904\u7406\u5668\u7c7b\u578b\u6709\u5f88\u591a\u79cd\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u6709\u4e09\u4e2a StreamHandler FileHandler NullHandler StreamHandler \u521b\u5efa StreamHandler \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\uff0c\u8bbe\u7f6e\u683c\u5f0f\u5316\u5668 Formatter \uff0c\u589e\u52a0\u6216\u5220\u9664\u8fc7\u6ee4\u5668 Filter \uff1a # \u521b\u5efa StreamHandler \u5b9e\u4f8b sh = logging . StreamHandler ( stream = None ) # \u6307\u5b9a\u65e5\u5fd7\u7ea7\u522b\uff0c\u4f4e\u4e8eWARN\u7ea7\u522b\u7684\u65e5\u5fd7\u5c06\u88ab\u5ffd\u7565 sh . setLevel ( logging . WARN ) # \u8bbe\u7f6e\u4e00\u4e2a\u683c\u5f0f\u5316\u5668formatter sh . setFormatter ( formatter_name ) # \u589e\u52a0\u4e00\u4e2a\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u589e\u52a0\u591a\u4e2a sh . addFilter ( filter_name ) # \u5220\u9664\u4e00\u4e2a\u8fc7\u6ee4\u5668 ch . removeFilter ( filter_name ) \u8fc7\u6ee4\u5668 - Filter Handlers \u548c Loggers \u53ef\u4ee5\u4f7f\u7528 Filters \u6765\u5b8c\u6210\u6bd4\u7ea7\u522b\u66f4\u590d\u6742\u7684\u8fc7\u6ee4\u3002 Filter \u57fa\u7c7b\u53ea\u5141\u8bb8\u7279\u5b9a Logger \u5c42\u6b21\u4ee5\u4e0b\u7684\u4e8b\u4ef6\u3002 \u4f8b\u5982\u7528 \u2018A.B\u2019 \u521d\u59cb\u5316\u7684 Filter \u5141\u8bb8Logger \u2018A.B\u2019, \u2018A.B.C\u2019, \u2018A.B.C.D\u2019, \u2018A.B.D\u2019 \u7b49\u8bb0\u5f55\u7684\u4e8b\u4ef6\uff0clogger\u2018A.BB\u2019, \u2018B.A.B\u2019 \u7b49\u5c31\u4e0d\u884c\u3002 \u5982\u679c\u7528\u7a7a\u5b57\u7b26\u4e32\u6765\u521d\u59cb\u5316\uff0c\u6240\u6709\u7684\u4e8b\u4ef6\u90fd\u63a5\u53d7\u3002 filter = logging . Filter ( name = '' ) \u683c\u5f0f\u5668 - Formatter \u4f7f\u7528Formatter\u5bf9\u8c61\u8bbe\u7f6e\u65e5\u5fd7\u4fe1\u606f\u6700\u540e\u7684\u89c4\u5219\u3001\u7ed3\u6784\u548c\u5185\u5bb9\uff0c\u9ed8\u8ba4\u7684\u65f6\u95f4\u683c\u5f0f\u4e3a %Y-%m-%d %H:%M:%S \u3002 formatter = logging . Formatter ( fmt = None , datefmt = None ) \u5176\u4e2d\uff0c fmt \u662f\u6d88\u606f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c datefmt \u662f\u65e5\u671f\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4e0d\u6307\u660e datefmt \uff0c\u5c06\u4f7f\u7528 \u2018%(message)s\u2019 \u3002\u5982\u679c\u4e0d\u6307\u660e datefmt \uff0c\u5c06\u4f7f\u7528 ISO8601 \u65e5\u671f\u683c\u5f0f\u3002 \u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb \u65e5\u5fd7\u5668\uff08logger\uff09\u9700\u8981\u901a\u8fc7\u5904\u7406\u5668\uff08handler\uff09\u5c06\u65e5\u5fd7\u4fe1\u606f\u8f93\u51fa\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\uff08handler\uff09\u53ef\u4ee5\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u65e5\u5fd7\u5668\uff08logger\uff09\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\u5904\u7406\u5668\uff08handler\uff09\u5c06\u540c\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u6bcf\u4e2a\u5904\u7406\u5668\uff08handler\uff09\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u8fc7\u6ee4\u5668\uff08filter\uff09\u5b9e\u73b0\u65e5\u5fd7\u8fc7\u6ee4\uff0c\u4ece\u800c\u53ea\u4fdd\u7559\u611f\u5174\u8da3\u7684\u65e5\u5fd7\u3002 \u6bcf\u4e2a\u5904\u7406\u5668\uff08handler\uff09\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u683c\u5f0f\u5668\uff08formatter\uff09\u5b9e\u73b0\u540c\u4e00\u6761\u65e5\u5fd7\u4ee5\u4e0d\u540c\u7684\u683c\u5f0f\u8f93\u51fa\u5230\u4e0d\u540c\u7684\u5730\u65b9\u3002 \u4e00\u4e2a Logger \u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a Handler \u548c Filter\u3002 \u4e00\u4e2a Handler \u5bf9\u8c61\u53ef\u4ee5\u65b0\u589e\u591a\u4e2a\u683c\u5f0f\u5316\u5668\u6216\u591a\u4e2a\u8fc7\u6ee4\u5668\uff0c\u800c\u4e14\u65e5\u5fd7\u7ea7\u522b\u5c06\u4f1a\u7ee7\u627f\u3002 \u914d\u7f6e logging \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 Logger\u3001Handler\u3001Filter\u3001Formatter \u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5\u5728\u4ee3\u7801\u4e2d\u6765\u663e\u5f0f\u914d\u7f6elogging\uff0c\u4f46\u8fd9\u79cd\u786c\u7f16\u7801\u7684\u65b9\u5f0f\u4e0d\u662f\u597d\u7684\u7f16\u7a0b\u89c4\u8303\u3002\u5728 Python2.7 \u4e4b\u540e\uff0c\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5b57\u5178\u52a0\u8f7d logging \u914d\u7f6e\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4ece JSON \u6216 YAML \u6587\u4ef6\u4e2d\u52a0\u8f7d logging \u914d\u7f6e\u3002\u867d\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7 old.ini \u65b9\u5f0f\u52a0\u8f7d logging \u914d\u7f6e\uff0c\u4f46\u662f\u8fd9\u5bf9\u4e8e\u53ef\u8bfb\u6027\u548c\u53ef\u7f16\u8f91\u6765\u8bf4\u662f\u56f0\u96be\u7684\u3002\u4ece\u6700\u4f73\u5b9e\u8df5\u7684\u89d2\u5ea6\u6765\u8bf4\uff0clogging \u6a21\u5757\u652f\u6301\u4e09\u79cd\u914d\u7f6e\u65b9\u5f0f\uff1a logging.config \u6a21\u5757\u8d1f\u8d23\u914d\u7f6elogging\u3002 dictConfig \uff1a\u901a\u8fc7\u4e00\u4e2a\u5b57\u5178\u8fdb\u884c\u914d\u7f6e fileConfig \uff1a\u901a\u8fc7\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e listen \uff1a\u76d1\u542c\u4e00\u4e2a\u7f51\u7edc\u7aef\u53e3\uff0c\u901a\u8fc7\u63a5\u6536\u7f51\u7edc\u6570\u636e\u6765\u8fdb\u884c\u914d\u7f6e\u3002 FileConfig logging.config \u6a21\u5757\u63d0\u4f9b\u4e86 logging.config.fileConfig() \u65b9\u6cd5\u53ef\u4ee5\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u65e5\u5fd7\u914d\u7f6e\u3002 ini \u6587\u4ef6 \u5148\u521b\u5efa\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6 logconfig.ini \uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u5177\u6709\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a [loggers] keys = root [handlers] keys = fileHandler, errorFileHandler [formatters] keys = simpleFormatter [logger_root] level = DEBUG handlers = fileHandler, errorFileHandler [handler_fileHandler] class = FileHandler level = DEBUG formatter = simpleFormatter args = ('example.log', 'a') [handler_errorFileHandler] class = FileHandler level = ERROR formatter = simpleFormatter args = ('example-error.log', 'a') [formatter_simpleFormatter] format = %(name)s - %(levelname)s - %(message)s [loggers] \u914d\u7f6e\u9879\u6307\u5b9a\u9700\u8981\u914d\u7f6e\u7684logger\uff0c root \u662flogging\u7cfb\u7edf\u9ed8\u8ba4logger\u3002\u82e5\u6709\u591a\u4e2a\u503c\uff0c\u7528\u9017\u53f7\u5206\u9694 keys=root, testLogger \u3002\u7136\u540e\u5728 [logger_%(name)s] \u914d\u7f6e\u9879\u914d\u7f6e\u5404\u4e2alogger\u7684\u5177\u4f53\u914d\u7f6e\u4fe1\u606f\u3002 \u7a0b\u5e8f\u8c03\u7528\u914d\u7f6e\u6587\u4ef6\uff1a import logging import logging.config # \u6587\u4ef6\u7684\u540e\u7f00\u540d\u4f3c\u4e4e\u4e0d\u5fc5\u987b\u4e3a.ini logging . config . fileConfig ( 'logconfig.ini' ) # create logger logger = logging . getLogger ( 'simpleExample' ) # application code logger . debug ( 'debug message' ) logger . info ( 'info message' ) logger . warning ( 'warn message' ) logger . error ( 'error message' ) logger . critical ( 'critical message' ) YAML \u6587\u4ef6 version : 1 disable_existing_loggers : False formatters : simple : format : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" handlers : console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout info_file_handler : class : logging.handlers.RotatingFileHandler level : INFO formatter : simple filename : info.log maxBytes : 10485760 # 10MB backupCount : 20 encoding : utf8 error_file_handler : class : logging.handlers.RotatingFileHandler level : ERROR formatter : simple filename : errors.log maxBytes : 10485760 # 10MB backupCount : 20 encoding : utf8 loggers : my_module : level : ERROR handlers : [ console ] propagate : no root : level : INFO handlers : [ console , info_file_handler , error_file_handler ] JSON \u6587\u4ef6 { \"version\" : 1 , \"disable_existing_loggers\" : false , \"formatters\" : { \"simple\" : { \"format\" : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" } }, \"handlers\" : { \"console\" : { \"class\" : \"logging.StreamHandler\" , \"level\" : \"DEBUG\" , \"formatter\" : \"simple\" , \"stream\" : \"ext://sys.stdout\" }, \"info_file_handler\" : { \"class\" : \"logging.handlers.RotatingFileHandler\" , \"level\" : \"INFO\" , \"formatter\" : \"simple\" , \"filename\" : \"info.log\" , \"maxBytes\" : 10485760 , \"backupCount\" : 20 , \"encoding\" : \"utf8\" }, \"error_file_handler\" : { \"class\" : \"logging.handlers.RotatingFileHandler\" , \"level\" : \"ERROR\" , \"formatter\" : \"simple\" , \"filename\" : \"errors.log\" , \"maxBytes\" : 10485760 , \"backupCount\" : 20 , \"encoding\" : \"utf8\" } }, \"loggers\" : { \"my_module\" : { \"level\" : \"ERROR\" , \"handlers\" : [ \"console\" ], \"propagate\" : \"no\" } }, \"root\" : { \"level\" : \"INFO\" , \"handlers\" : [ \"console\" , \"info_file_handler\" , \"error_file_handler\" ] } } dictConfig \u540c\u65f6\u5411\u63a7\u5236\u53f0\u548c\u6587\u4ef6\u8f93\u51fa\u65e5\u5fd7\u3002 import logging from logging.config import dictConfig level = logging . DEBUG logging_config = { 'version' : 1 , 'formatters' : { 'default' : { 'format' : ' %(asctime)s [ %(process)d ] [ %(levelname)s ] %(message)s ' , 'datefmt' : '%Y-%m- %d %H:%M:%S' } }, 'handlers' : { 'console' : { 'level' : level , 'class' : 'logging.StreamHandler' , 'formatter' : 'default' , }, 'file' : { 'level' : level , 'class' : 'logging.handlers.RotatingFileHandler' , 'formatter' : 'default' , 'filename' : './log/mtwoai.log' , 'maxBytes' : 1024 * 1024 * 10 , 'backupCount' : 1 } }, 'loggers' : { 'test' : { 'level' : level , 'handlers' : [ 'console' , 'file' ] } }, 'root' : { 'level' : level , 'handlers' : [ 'console' , 'file' ] }, 'disable_existing_loggers' : False } dictConfig ( logging_config ) \u5728python\u4ee3\u7801\u4e2d\u914d\u7f6e import logging logger = logging.getLogger() handler = logging.StreamHandler() formatter = logging.Formatter( '%(asctime)s %(name)-12s %(levelname)-8s %(message)s') handler.setFormatter(formatter) logger.addHandler(handler) logger.setLevel(logging.DEBUG) logger.debug('often makes a very good meal of %s', 'visiting tourists') \u53c2\u8003 \u7b2c32\u5929\uff1aPython logging \u6a21\u5757\u8be6\u89e3 python \u7684 logging \u6a21\u5757\u65e5\u5fd7\u529f\u80fd\u4f7f\u7528\u8be6\u89e3 Python logging \u6a21\u5757\u8be6\u8ff0 python logging \u91cd\u590d\u5199\u65e5\u5fd7\u95ee\u9898 Python + logging \u8f93\u51fa\u5230\u5c4f\u5e55\uff0c\u5c06log\u65e5\u5fd7\u5199\u5165\u6587\u4ef6 logging - Python \u7684 Logging \u5de5\u5177 python logging\u8be6\u89e3\u53ca\u81ea\u52a8\u6dfb\u52a0\u4e0a\u4e0b\u6587\u4fe1\u606f Python logging \u6700\u4f73\u5b9e\u8df5-\u8bd1 python3\u7684logging\u6a21\u5757\u7684\u6700\u4f73\u5b9e\u8df5","title":"6.14.logging"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_1","text":"sort_func = lambda k : eval ( f \"logging. { k } \" ) \\ if ( isinstance ( eval ( f \"logging. { k } \" ), int ) and eval ( f \"logging. { k } \" ) != 1 ) \\ else 100 d [ \"attr\" ] . sort ( key = sort_func ) print ( \" {0:<20} {1} \\n \" . format ( \"field\" , \"value\" )) for constant in d [ \"attr\" ]: value = eval ( f \"logging. { constant } \" ) print ( \" {0:<20} : {1} \" . format ( constant , value )) field value NOTSET :0 DEBUG :10 INFO :20 WARN :30 WARNING :30 ERROR :40 CRITICAL :50 FATAL :50 BASIC_FORMAT :%(levelname)s:%(name)s:%(message)s lastResort :<_StderrHandler stderr (WARNING)> logMultiprocessing :True logProcesses :True logThreads :True raiseExceptions :True root :<RootLogger root (WARNING)> \u65e5\u5fd7\u7ea7\u522b\u8d8a\u9ad8\u6253\u5370\u7684\u65e5\u5fd7\u8d8a\u5c11\uff0c\u9ed8\u8ba4\u7684\u7ea7\u522b\u662f WARNING \uff0c\u610f\u5473\u7740\u53ea\u4f1a\u8ffd\u8e2a\u8be5\u7ea7\u522b\u53ca\u4ee5\u4e0a\u7684\u4e8b\u4ef6\u3002 notset \u7b49\u540c\u4e8e debug \u3002","title":"\u5e38\u91cf"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_2","text":"Logging \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u65e5\u5fd7\u8bb0\u5f55\u65b9\u5f0f\uff1a \u4f7f\u7528 Logging \u63d0\u4f9b\u7684\u6a21\u5757\u7ea7\u522b\u7684\u51fd\u6570 \u4f7f\u7528 Logging \u65e5\u5fd7\u7cfb\u7edf\u7684\u56db\u5927\u7ec4\u4ef6 logging . debug ( 'Python debug' ) logging . debug ( 'Python debug' ) logging . info ( 'Python info' ) # logging.warn is deprecated logging . warning ( 'Python warning' ) logging . error ( 'Python Error' ) logging . critical ( 'Python critical' ) logging . fatal ( 'Python fatal' ) logging . log ( logging . WARNING , \"log function\" ) try : 1 / 0 except Exception as e : logging . exception ( e ) \u65e5\u5fd7\u8f93\u51fa\u7ed3\u679c\uff1a WARNING:root:Python warning ERROR:root:Python Error CRITICAL:root:Python critical CRITICAL:root:Python fatal WARNING:root:log function ERROR:root:division by zero Traceback (most recent call last): File \"<ipython-input-16-d24461d1cf55>\", line 11, in <module> 1/0 ZeroDivisionError: division by zero","title":"\u8bb0\u5f55\u65e5\u5fd7\u7684\u6a21\u5757\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_3","text":"\u901a\u8fc7 logging.basicConfig() \u53ef\u4ee5\u8bbe\u7f6e root \u7684\u65e5\u5fd7\u7ea7\u522b\u548c\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\u3002 logging.basicConfig() \u5173\u952e\u5b57\u53c2\u6570 \uff1a \u6ce8\u610f \uff1a logging.basicConfig() \u9700\u8981\u5728\u5f00\u5934\u5c31\u8bbe\u7f6e\uff0c\u5728\u4e2d\u95f4\u8bbe\u7f6e\u5e76\u65e0\u4f5c\u7528 \u5173\u952e\u5b57 \u63cf\u8ff0 filename \u521b\u5efa\u4e00\u4e2a FileHandler\uff0c\u4f7f\u7528\u6307\u5b9a\u7684\u6587\u4ef6\u540d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 StreamHandler\u3002 filemode \u5982\u679c\u6307\u660e\u4e86\u6587\u4ef6\u540d\uff0c\u6307\u660e\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f\uff08\u5982\u679c\u6ca1\u6709\u6307\u660e filemode\uff0c\u9ed8\u8ba4\u4e3a \u2018a\u2019\uff09\u3002 format handler \u4f7f\u7528\u6307\u660e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 datefmt handler \u4f7f\u7528\u6307\u660e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 level \u6307\u660e\u6839 logger \u7684\u7ea7\u522b\u3002 stream \u4f7f\u7528\u6307\u660e\u7684\u6d41\u6765\u521d\u59cb\u5316 StreamHandler\u3002\u8be5\u53c2\u6570\u4e0e \u2018filename\u2019 \u4e0d\u517c\u5bb9\uff0c\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u2019stream\u2019 \u88ab\u5ffd\u7565\u3002 format \u683c\u5f0f \u683c\u5f0f \u63cf\u8ff0 %(levelno)s \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u7684\u6570\u503c %(levelname)s \u6253\u5370\u65e5\u5fd7\u7ea7\u522b\u540d\u79f0 %(pathname)s \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84 %(filename)s \u6253\u5370\u5f53\u524d\u6267\u884c\u7a0b\u5e8f\u540d\u79f0 %(funcName)s \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u51fd\u6570 %(lineno)d \u6253\u5370\u65e5\u5fd7\u7684\u5f53\u524d\u884c\u53f7 %(asctime)s \u6253\u5370\u65e5\u5fd7\u7684\u65f6\u95f4 %(thread)d \u6253\u5370\u7ebf\u7a0b ID %(threadName)s \u6253\u5370\u7ebf\u7a0b\u540d\u79f0 %(process)d \u6253\u5370\u8fdb\u7a0b ID %(message)s \u6253\u5370\u65e5\u5fd7\u4fe1\u606f import logging #\u3000\u6253\u5370\u65e5\u5fd7\u7ea7\u522b def test (): logging . basicConfig ( level = logging . DEBUG ) logging . debug ( 'Python debug' ) logging . info ( 'Python info' ) logging . warning ( 'Python warning' ) logging . error ( 'Python Error' ) logging . critical ( 'Python critical' ) logging . log ( 2 , 'test' ) test () \u8f93\u51fa\uff1a DEBUG:root:Python debug INFO:root:Python info WARNING:root:Python warning ERROR:root:Python Error CRITICAL:root:Python critical","title":"\u8bbe\u7f6e\u65e5\u5fd7\u663e\u793a\u7ea7\u522b"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_4","text":"# \u65e5\u5fd7\u4fe1\u606f\u8bb0\u5f55\u5230\u6587\u4ef6 logging . basicConfig ( filename = 'example.log' , level = logging . DEBUG ) logging . debug ( 'This message should go to the log file' ) logging . info ( 'So should this' ) logging . warning ( 'And this, too' ) \u5728\u76f8\u5e94\u7684\u8def\u5f84\u4e0b\u4f1a\u6709 example.log \u65e5\u5fd7\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a DEBUG:root:This message should go to the log file INFO:root:So should this WARNING:root:And this, too","title":"\u5c06\u65e5\u5fd7\u4fe1\u606f\u8bb0\u5f55\u5230\u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_5","text":"\u5982\u679c\u7a0b\u5e8f\u5305\u542b\u591a\u4e2a\u6a21\u5757\uff0c\u5219\u7528\u4ee5\u4e0b\u5b9e\u4f8b\u6765\u663e\u793a\u65e5\u5fd7\u4fe1\u606f\uff1a \u5b9e\u4f8b\u4e2d\u6709\u4e24\u4e2a\u6a21\u5757\uff0c\u4e00\u4e2a\u6a21\u5757\u901a\u8fc7\u5bfc\u5165\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u65b9\u5f0f\u7528\u65e5\u5fd7\u663e\u793a\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u4fe1\u606f\uff1a myapp.py \u6a21\u5757 import logging import mylib def main (): logging . basicConfig ( filename = 'myapp.log' , level = logging . DEBUG ) logging . info ( 'Started' ) mylib . do_something () logging . info ( 'Finished' ) if __name__ == '__main__' : main () mylib.py \u6a21\u5757 import logging def do_something (): logging . info ( 'Doing something' ) \u6267\u884c myapp.py \u6a21\u5757\u4f1a\u6253\u5370\u76f8\u5e94\u65e5\u5fd7\uff0c\u5728\u6587\u4ef6 myapp.log \u4e2d\u663e\u793a\u4fe1\u606f\u5982\u4e0b\uff1a INFO:root:Started INFO:root:Doing something INFO:root:Finishe","title":"\u591a\u4e2a\u6a21\u5757\u8bb0\u5f55\u65e5\u5fd7\u4fe1\u606f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#logging","text":"\u7ec4\u4ef6\u540d\u79f0 \u5bf9\u5e94\u7c7b\u540d \u529f\u80fd\u63cf\u8ff0 \u65e5\u5fd7\u5668 Logger \u66b4\u9732\u51fd\u6570\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff0c\u57fa\u4e8e\u65e5\u5fd7\u8bb0\u5f55\u5668\u548c\u8fc7\u6ee4\u5668\u7ea7\u522b\u51b3\u5b9a\u54ea\u4e9b\u65e5\u5fd7\u6709\u6548 \u5904\u7406\u5668 Handler \u5c06 logger \u521b\u5efa\u7684\u65e5\u5fd7\u8bb0\u5f55\u53d1\u9001\u5230\u5408\u9002\u7684\u76ee\u7684\u8f93\u51fa \u8fc7\u6ee4\u5668 Filter \u63d0\u4f9b\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u5de5\u5177\u6765\u51b3\u5b9a\u8f93\u51fa\u54ea\u6761\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4e22\u5f03\u54ea\u6761\u65e5\u5fd7\u8bb0\u5f55 \u683c\u5f0f\u5668 Formatter \u51b3\u5b9a\u65e5\u5fd7\u8bb0\u5f55\u7684\u6700\u7ec8\u8f93\u51fa\u683c\u5f0f","title":"logging \u6a21\u5757\u56db\u5927\u7ec4\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#-logger","text":"Logger \u6301\u6709\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u65b9\u6cd5\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u901a\u8fc7Logger\u5bf9\u8c61\u8c03\u7528\u65e5\u5fd7\u63a5\u53e3\uff0c\u65e5\u5fd7\u8bb0\u5f55\u5668\u4e0d\u76f4\u63a5\u5b9e\u4f8b\u5316\uff0c\u800c\u662f\u901a\u8fc7\u6a21\u5757\u7ea7\u51fd\u6570 logging.getLogger(name) \u6765\u5b9e\u4f8b\u5316\u3002 logger = logging.getLogger(logger_name) getLogger() \u51fd\u6570\u6700\u597d\u52a0\u4e0a\u65e5\u5fd7\u6240\u8bb0\u5f55\u7684\u6a21\u5757\u7684\u540d\u5b57\uff0c\u914d\u7f6e\u6587\u4ef6\u548c\u6253\u5370\u65e5\u5fd7\u683c\u5f0f\u4e2d\u7684 %(name)s \u5bf9\u5e94\u7684\u662f\u8fd9\u91cc\u7684\u6a21\u5757\u540d\u5b57\uff0c\u5982\u679c\u4e0d\u6307\u5b9aname\u5219\u8fd4\u56deroot\u5bf9\u8c61\u3002 \u4f7f\u7528\u76f8\u540c\u7684\u540d\u79f0\u591a\u6b21\u8c03\u7528 getLogger() \u603b\u662f\u4f1a\u8fd4\u56de\u5bf9\u76f8\u540c Logger \u5bf9\u8c61\u7684\u5f15\u7528\u3002 Logger\u6700\u5e38\u7528\u7684\u64cd\u4f5c\u6709\u4e24\u7c7b\uff1a\u914d\u7f6e\u548c\u53d1\u9001\u65e5\u5fd7\u6d88\u606f\u3002 logger = logging . getLogger ( __name__ ) # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logger . setLevel ( logging . DEBUG ) # \u4e3a Logger \u5b9e\u4f8b\u589e\u52a0\u4e00\u4e2a\u5904\u7406\u5668 logger . addHandler ( handler_name ) # \u4e3a Logger \u5b9e\u4f8b\u5220\u9664\u4e00\u4e2a\u5904\u7406\u5668 logger . removeHandler ( handler_name )","title":"\u65e5\u5fd7\u5668 - Logger"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#-handler","text":"Handler \u5904\u7406\u5668\u7c7b\u578b\u6709\u5f88\u591a\u79cd\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u6709\u4e09\u4e2a StreamHandler FileHandler NullHandler","title":"\u5904\u7406\u5668 - Handler"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#streamhandler","text":"\u521b\u5efa StreamHandler \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\uff0c\u8bbe\u7f6e\u683c\u5f0f\u5316\u5668 Formatter \uff0c\u589e\u52a0\u6216\u5220\u9664\u8fc7\u6ee4\u5668 Filter \uff1a # \u521b\u5efa StreamHandler \u5b9e\u4f8b sh = logging . StreamHandler ( stream = None ) # \u6307\u5b9a\u65e5\u5fd7\u7ea7\u522b\uff0c\u4f4e\u4e8eWARN\u7ea7\u522b\u7684\u65e5\u5fd7\u5c06\u88ab\u5ffd\u7565 sh . setLevel ( logging . WARN ) # \u8bbe\u7f6e\u4e00\u4e2a\u683c\u5f0f\u5316\u5668formatter sh . setFormatter ( formatter_name ) # \u589e\u52a0\u4e00\u4e2a\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u589e\u52a0\u591a\u4e2a sh . addFilter ( filter_name ) # \u5220\u9664\u4e00\u4e2a\u8fc7\u6ee4\u5668 ch . removeFilter ( filter_name )","title":"StreamHandler"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#-filter","text":"Handlers \u548c Loggers \u53ef\u4ee5\u4f7f\u7528 Filters \u6765\u5b8c\u6210\u6bd4\u7ea7\u522b\u66f4\u590d\u6742\u7684\u8fc7\u6ee4\u3002 Filter \u57fa\u7c7b\u53ea\u5141\u8bb8\u7279\u5b9a Logger \u5c42\u6b21\u4ee5\u4e0b\u7684\u4e8b\u4ef6\u3002 \u4f8b\u5982\u7528 \u2018A.B\u2019 \u521d\u59cb\u5316\u7684 Filter \u5141\u8bb8Logger \u2018A.B\u2019, \u2018A.B.C\u2019, \u2018A.B.C.D\u2019, \u2018A.B.D\u2019 \u7b49\u8bb0\u5f55\u7684\u4e8b\u4ef6\uff0clogger\u2018A.BB\u2019, \u2018B.A.B\u2019 \u7b49\u5c31\u4e0d\u884c\u3002 \u5982\u679c\u7528\u7a7a\u5b57\u7b26\u4e32\u6765\u521d\u59cb\u5316\uff0c\u6240\u6709\u7684\u4e8b\u4ef6\u90fd\u63a5\u53d7\u3002 filter = logging . Filter ( name = '' )","title":"\u8fc7\u6ee4\u5668 - Filter"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#-formatter","text":"\u4f7f\u7528Formatter\u5bf9\u8c61\u8bbe\u7f6e\u65e5\u5fd7\u4fe1\u606f\u6700\u540e\u7684\u89c4\u5219\u3001\u7ed3\u6784\u548c\u5185\u5bb9\uff0c\u9ed8\u8ba4\u7684\u65f6\u95f4\u683c\u5f0f\u4e3a %Y-%m-%d %H:%M:%S \u3002 formatter = logging . Formatter ( fmt = None , datefmt = None ) \u5176\u4e2d\uff0c fmt \u662f\u6d88\u606f\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c datefmt \u662f\u65e5\u671f\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4e0d\u6307\u660e datefmt \uff0c\u5c06\u4f7f\u7528 \u2018%(message)s\u2019 \u3002\u5982\u679c\u4e0d\u6307\u660e datefmt \uff0c\u5c06\u4f7f\u7528 ISO8601 \u65e5\u671f\u683c\u5f0f\u3002","title":"\u683c\u5f0f\u5668 - Formatter"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_6","text":"\u65e5\u5fd7\u5668\uff08logger\uff09\u9700\u8981\u901a\u8fc7\u5904\u7406\u5668\uff08handler\uff09\u5c06\u65e5\u5fd7\u4fe1\u606f\u8f93\u51fa\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\uff08handler\uff09\u53ef\u4ee5\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u65e5\u5fd7\u5668\uff08logger\uff09\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\u5904\u7406\u5668\uff08handler\uff09\u5c06\u540c\u4e00\u6761\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 \u6bcf\u4e2a\u5904\u7406\u5668\uff08handler\uff09\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u8fc7\u6ee4\u5668\uff08filter\uff09\u5b9e\u73b0\u65e5\u5fd7\u8fc7\u6ee4\uff0c\u4ece\u800c\u53ea\u4fdd\u7559\u611f\u5174\u8da3\u7684\u65e5\u5fd7\u3002 \u6bcf\u4e2a\u5904\u7406\u5668\uff08handler\uff09\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u683c\u5f0f\u5668\uff08formatter\uff09\u5b9e\u73b0\u540c\u4e00\u6761\u65e5\u5fd7\u4ee5\u4e0d\u540c\u7684\u683c\u5f0f\u8f93\u51fa\u5230\u4e0d\u540c\u7684\u5730\u65b9\u3002 \u4e00\u4e2a Logger \u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a Handler \u548c Filter\u3002 \u4e00\u4e2a Handler \u5bf9\u8c61\u53ef\u4ee5\u65b0\u589e\u591a\u4e2a\u683c\u5f0f\u5316\u5668\u6216\u591a\u4e2a\u8fc7\u6ee4\u5668\uff0c\u800c\u4e14\u65e5\u5fd7\u7ea7\u522b\u5c06\u4f1a\u7ee7\u627f\u3002","title":"\u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#logging_1","text":"\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 Logger\u3001Handler\u3001Filter\u3001Formatter \u5bf9\u8c61\u4e2d\u7684\u65b9\u6cd5\u5728\u4ee3\u7801\u4e2d\u6765\u663e\u5f0f\u914d\u7f6elogging\uff0c\u4f46\u8fd9\u79cd\u786c\u7f16\u7801\u7684\u65b9\u5f0f\u4e0d\u662f\u597d\u7684\u7f16\u7a0b\u89c4\u8303\u3002\u5728 Python2.7 \u4e4b\u540e\uff0c\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5b57\u5178\u52a0\u8f7d logging \u914d\u7f6e\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4ece JSON \u6216 YAML \u6587\u4ef6\u4e2d\u52a0\u8f7d logging \u914d\u7f6e\u3002\u867d\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7 old.ini \u65b9\u5f0f\u52a0\u8f7d logging \u914d\u7f6e\uff0c\u4f46\u662f\u8fd9\u5bf9\u4e8e\u53ef\u8bfb\u6027\u548c\u53ef\u7f16\u8f91\u6765\u8bf4\u662f\u56f0\u96be\u7684\u3002\u4ece\u6700\u4f73\u5b9e\u8df5\u7684\u89d2\u5ea6\u6765\u8bf4\uff0clogging \u6a21\u5757\u652f\u6301\u4e09\u79cd\u914d\u7f6e\u65b9\u5f0f\uff1a logging.config \u6a21\u5757\u8d1f\u8d23\u914d\u7f6elogging\u3002 dictConfig \uff1a\u901a\u8fc7\u4e00\u4e2a\u5b57\u5178\u8fdb\u884c\u914d\u7f6e fileConfig \uff1a\u901a\u8fc7\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e listen \uff1a\u76d1\u542c\u4e00\u4e2a\u7f51\u7edc\u7aef\u53e3\uff0c\u901a\u8fc7\u63a5\u6536\u7f51\u7edc\u6570\u636e\u6765\u8fdb\u884c\u914d\u7f6e\u3002","title":"\u914d\u7f6e logging"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#fileconfig","text":"logging.config \u6a21\u5757\u63d0\u4f9b\u4e86 logging.config.fileConfig() \u65b9\u6cd5\u53ef\u4ee5\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u65e5\u5fd7\u914d\u7f6e\u3002","title":"FileConfig"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#ini","text":"\u5148\u521b\u5efa\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6 logconfig.ini \uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u5177\u6709\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a [loggers] keys = root [handlers] keys = fileHandler, errorFileHandler [formatters] keys = simpleFormatter [logger_root] level = DEBUG handlers = fileHandler, errorFileHandler [handler_fileHandler] class = FileHandler level = DEBUG formatter = simpleFormatter args = ('example.log', 'a') [handler_errorFileHandler] class = FileHandler level = ERROR formatter = simpleFormatter args = ('example-error.log', 'a') [formatter_simpleFormatter] format = %(name)s - %(levelname)s - %(message)s [loggers] \u914d\u7f6e\u9879\u6307\u5b9a\u9700\u8981\u914d\u7f6e\u7684logger\uff0c root \u662flogging\u7cfb\u7edf\u9ed8\u8ba4logger\u3002\u82e5\u6709\u591a\u4e2a\u503c\uff0c\u7528\u9017\u53f7\u5206\u9694 keys=root, testLogger \u3002\u7136\u540e\u5728 [logger_%(name)s] \u914d\u7f6e\u9879\u914d\u7f6e\u5404\u4e2alogger\u7684\u5177\u4f53\u914d\u7f6e\u4fe1\u606f\u3002 \u7a0b\u5e8f\u8c03\u7528\u914d\u7f6e\u6587\u4ef6\uff1a import logging import logging.config # \u6587\u4ef6\u7684\u540e\u7f00\u540d\u4f3c\u4e4e\u4e0d\u5fc5\u987b\u4e3a.ini logging . config . fileConfig ( 'logconfig.ini' ) # create logger logger = logging . getLogger ( 'simpleExample' ) # application code logger . debug ( 'debug message' ) logger . info ( 'info message' ) logger . warning ( 'warn message' ) logger . error ( 'error message' ) logger . critical ( 'critical message' )","title":"ini \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#yaml","text":"version : 1 disable_existing_loggers : False formatters : simple : format : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" handlers : console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout info_file_handler : class : logging.handlers.RotatingFileHandler level : INFO formatter : simple filename : info.log maxBytes : 10485760 # 10MB backupCount : 20 encoding : utf8 error_file_handler : class : logging.handlers.RotatingFileHandler level : ERROR formatter : simple filename : errors.log maxBytes : 10485760 # 10MB backupCount : 20 encoding : utf8 loggers : my_module : level : ERROR handlers : [ console ] propagate : no root : level : INFO handlers : [ console , info_file_handler , error_file_handler ]","title":"YAML \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#json","text":"{ \"version\" : 1 , \"disable_existing_loggers\" : false , \"formatters\" : { \"simple\" : { \"format\" : \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" } }, \"handlers\" : { \"console\" : { \"class\" : \"logging.StreamHandler\" , \"level\" : \"DEBUG\" , \"formatter\" : \"simple\" , \"stream\" : \"ext://sys.stdout\" }, \"info_file_handler\" : { \"class\" : \"logging.handlers.RotatingFileHandler\" , \"level\" : \"INFO\" , \"formatter\" : \"simple\" , \"filename\" : \"info.log\" , \"maxBytes\" : 10485760 , \"backupCount\" : 20 , \"encoding\" : \"utf8\" }, \"error_file_handler\" : { \"class\" : \"logging.handlers.RotatingFileHandler\" , \"level\" : \"ERROR\" , \"formatter\" : \"simple\" , \"filename\" : \"errors.log\" , \"maxBytes\" : 10485760 , \"backupCount\" : 20 , \"encoding\" : \"utf8\" } }, \"loggers\" : { \"my_module\" : { \"level\" : \"ERROR\" , \"handlers\" : [ \"console\" ], \"propagate\" : \"no\" } }, \"root\" : { \"level\" : \"INFO\" , \"handlers\" : [ \"console\" , \"info_file_handler\" , \"error_file_handler\" ] } }","title":"JSON \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#dictconfig","text":"\u540c\u65f6\u5411\u63a7\u5236\u53f0\u548c\u6587\u4ef6\u8f93\u51fa\u65e5\u5fd7\u3002 import logging from logging.config import dictConfig level = logging . DEBUG logging_config = { 'version' : 1 , 'formatters' : { 'default' : { 'format' : ' %(asctime)s [ %(process)d ] [ %(levelname)s ] %(message)s ' , 'datefmt' : '%Y-%m- %d %H:%M:%S' } }, 'handlers' : { 'console' : { 'level' : level , 'class' : 'logging.StreamHandler' , 'formatter' : 'default' , }, 'file' : { 'level' : level , 'class' : 'logging.handlers.RotatingFileHandler' , 'formatter' : 'default' , 'filename' : './log/mtwoai.log' , 'maxBytes' : 1024 * 1024 * 10 , 'backupCount' : 1 } }, 'loggers' : { 'test' : { 'level' : level , 'handlers' : [ 'console' , 'file' ] } }, 'root' : { 'level' : level , 'handlers' : [ 'console' , 'file' ] }, 'disable_existing_loggers' : False } dictConfig ( logging_config )","title":"dictConfig"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#python","text":"import logging logger = logging.getLogger() handler = logging.StreamHandler() formatter = logging.Formatter( '%(asctime)s %(name)-12s %(levelname)-8s %(message)s') handler.setFormatter(formatter) logger.addHandler(handler) logger.setLevel(logging.DEBUG) logger.debug('often makes a very good meal of %s', 'visiting tourists')","title":"\u5728python\u4ee3\u7801\u4e2d\u914d\u7f6e"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.14.logging.html#_7","text":"\u7b2c32\u5929\uff1aPython logging \u6a21\u5757\u8be6\u89e3 python \u7684 logging \u6a21\u5757\u65e5\u5fd7\u529f\u80fd\u4f7f\u7528\u8be6\u89e3 Python logging \u6a21\u5757\u8be6\u8ff0 python logging \u91cd\u590d\u5199\u65e5\u5fd7\u95ee\u9898 Python + logging \u8f93\u51fa\u5230\u5c4f\u5e55\uff0c\u5c06log\u65e5\u5fd7\u5199\u5165\u6587\u4ef6 logging - Python \u7684 Logging \u5de5\u5177 python logging\u8be6\u89e3\u53ca\u81ea\u52a8\u6dfb\u52a0\u4e0a\u4e0b\u6587\u4fe1\u606f Python logging \u6700\u4f73\u5b9e\u8df5-\u8bd1 python3\u7684logging\u6a21\u5757\u7684\u6700\u4f73\u5b9e\u8df5","title":"\u53c2\u8003"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html","text":"import gzip import os import shutil from toolkit.blog.util import get_work_dir FileDir = os . path . join ( get_work_dir (), \"datasets/file\" ) gzip gzip \u6a21\u5757\u4e2d\u5305\u542b\u4e00\u4e9b\u5e38\u91cf\uff0c\u8fd9\u662f DEFLATE \u7b97\u6cd5\u751f\u6210\u7684\u538b\u7f29\u6587\u4ef6\u7684\u4e00\u4e9b\u6807\u8bb0\u5b57\u6bb5\u3002 gzip . FCOMMENT gzip . FEXTRA gzip . FHCRC gzip . FNAME gzip . FTEXT gzip . GzipFile gzip . READ gzip . WRITE \u5904\u7406\u6bd4\u7279\u6d41 \u538b\u7f29\u5185\u5b58\u4e2d\u7684\u6bd4\u7279\u6d41 (\u5b57\u8282\u6d41)\uff1a gzip . compress ( b \"this is a test.\" ) b'\\x1f\\x8b\\x08\\x00\\xcc\\x88\\xaa_\\x02\\xff+\\xc9\\xc8,V\\x00\\xa2D\\x85\\x92\\xd4\\xe2\\x12=\\x00\\xc3\\xf7\\x06N\\x0f\\x00\\x00\\x00' \u89e3\u538b\u7f29\u5185\u5b58\u4e2d\u7684\u6bd4\u7279\u6d41\uff1a \u8be5\u6bd4\u7279\u6d41\u5fc5\u987b\u662f\u4f7f\u7528 gzip \u5bf9\u5e94\u7684 DEFLATE \u538b\u7f29\u7b97\u6cd5\u5f97\u5230\u7684\u6bd4\u7279\u6d41\uff0c\u5426\u5219\u65e0\u6cd5\u4f7f\u7528\u5bf9\u5e94\u7684\u7b97\u6cd5\u89e3\u538b\u7f29\u3002 gzip . decompress ( gzip . compress ( b \"this is a test.\" )) b'this is a test.' \u89e3\u538b .gz \u6587\u4ef6 gzip-1.3.14.tar.gz \u4f1a\u88ab\u89e3\u538b\u4e3a gzip-1.3.14.tar \u6587\u4ef6\u3002 gz_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar.gz\" ) ext_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar\" ) # \u521b\u5efa gzip \u5bf9\u8c61 gz_file = gzip . GzipFile ( gz_file_path ) with open ( ext_file_path , \"wb+\" ) as f : f . write ( gz_file . read ()) gz_file . close () \u4e5f\u53ef\u4ee5\u4f7f\u7528 gzip.open \u51fd\u6570\u6253\u5f00 gz \u6587\u4ef6\uff0c\u5b9e\u9645\u8fd9\u4e5f\u662f\u8c03\u7528 gzip.GzipFile \u7c7b\u3002 # gzip.open \u76f8\u5f53\u4e8e gzip.GzipFile with gzip . open ( gz_file_path , \"rb\" ) as output : with open ( ext_file_path , \"wb\" ) as f : f . write ( output . read ()) tarfile import tarfile import time \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3atar\u6587\u6863\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f1a\u5f15\u53d1IO ERROR\u3002 tar_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar\" ) tarfile . is_tarfile ( tar_file_path ) True \u83b7\u53d6\u5143\u6570\u636e \u4f7f\u7528 .getnames() \u6765\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6\u4e2d\u6240\u6709\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : print ( t . getnames ()[ 0 : 5 ]) ['gzip-1.3.14', 'gzip-1.3.14/zgrep.1', 'gzip-1.3.14/configure.ac', 'gzip-1.3.14/gzexe.1', 'gzip-1.3.14/gunzip.1'] \u901a\u8fc7 .getmembers() \u548c .getmember() \u51fd\u6570\u6765\u83b7\u53d6\u5143\u6570\u636e\u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : for member_info in t . getmembers (): print ( member_info . name ) print ( \" Modified:\" , time . ctime ( member_info . mtime )) print ( \" Mode :\" , oct ( member_info . mode )) print ( \" Type :\" , member_info . type ) print ( \" Size :\" , member_info . size , \"bytes\" ) print () break gzip-1.3.14 Modified: Sat Oct 31 02:54:33 2009 Mode : 0o777 Type : b'5' Size : 0 bytes \u5982\u679c\u4e00\u4e2a\u6240\u542b\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u5df2\u77e5\uff0c\u53ef\u4f7f\u7528 getmember() \u51fd\u6570\u83b7\u53d6\u5176\u6240\u5bf9\u5e94\u7684 TarInfo \u5bf9\u8c61\u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : for filename in [ \"gzip-1.3.14/doc/Makefile.in\" , \"gzip-1.3.14/doc/version.texi\" ]: try : info = t . getmember ( filename ) except KeyError : print ( \"ERROR: Did not find {filename} in tar archive\" ) else : print ( f \" { info . name } is { info . size : d } bytes\" ) gzip-1.3.14/doc/Makefile.in is 43510 bytes gzip-1.3.14/doc/version.texi is 105 bytes \u89e3\u538b tar \u6587\u4ef6 \u53ef\u4f7f\u7528 extractfile() \u65b9\u6cd5\u8bfb\u5165\u538b\u7f29\u6587\u6863\u4e2d\u67d0\u4e2a\u6210\u5458\u7684\u6570\u636e\uff1a with tarfile . open ( tar_file_path , \"r\" ) as t : for filename in [ \"gzip-1.3.14/doc/Makefile.in\" ]: try : # \u89e3\u538b\u5176\u4e2d\u67d0\u4e2a\u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u6570\u636e f = t . extractfile ( filename ) except KeyError : print ( f \"ERROR: Did not find { filename } in tar archive\" ) else : print ( filename , \":\" ) print ( f . read () . decode ( \"utf-8\" )[ 0 : 100 ]) gzip-1.3.14/doc/Makefile.in : # Makefile.in generated by automake 1.11a from Makefile.am. # @configure_input@ # Copyright (C) 199 \u89e3\u538b tar \u538b\u7f29\u6587\u6863\u4e2d\u6587\u4ef6\u5230\u786c\u76d8 out_dir = os . path . join ( FileDir , \"tar\" ) with tarfile . open ( tar_file_path , \"r\" ) as t : t . extract ( \"gzip-1.3.14/doc/Makefile.in\" , out_dir ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] \u89e3\u538b\u6574\u4e2a tar \u538b\u7f29\u6587\u6863\u5230\u786c\u76d8\uff1a gzip-1.3.14.tar/gzip-1.3.14/.. \u2192 tar/gzip-1.3.14/.. \u6807\u51c6\u5e93\u6587\u6863\u4e2d\u6709\u4e00\u4e2a\u6ce8\u91ca\u63d0\u5230 extractall() \u65b9\u6cd5\u7684\u5b89\u5168\u6027\u5f3a\u4e8e extract() \uff0c\u5c24\u5176\u9002\u7528\u4e8e\u65e0\u6cd5\u5012\u5e26\u8bfb\u53d6\u8f93\u5165\u7684\u8f83\u65e9\u90e8\u5206\u7684\u6d41\u6570\u636e\uff0c\u6240\u4ee5\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u4f7f\u7528 extractall() \u3002 out_dir = os . path . join ( FileDir , \"tar\" ) with tarfile . open ( tar_file_path , \"r\" ) as t : t . extractall ( out_dir ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] extractall() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u53ea\u89e3\u538b\u90e8\u5206\u6587\u4ef6\uff0c\u8fd9\u9700\u8981\u5c06\u5f85\u63d0\u53d6\u7684\u6587\u4ef6\u540d\u6216\u8005 TarInfo \u5143\u6570\u636e\u5bb9\u5668\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 extractall() \u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : t . extractall ( out_dir , members = [ t . getmember ( \"gzip-1.3.14/doc/Makefile.in\" )], ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] \u5904\u7406\u5176\u4ed6\u538b\u7f29\u6587\u4ef6 \u9664\u4e86\u6b63\u5e38\u7684 tar \u5f52\u6863\u6587\u4ef6\uff0ctarfile \u6a21\u5757\u8fd8\u53ef\u5904\u7406\u901a\u8fc7 gzip \u6216 bzip2 \u534f\u8bae\u538b\u7f29\u7684\u5f52\u6863\u6587\u4ef6\u3002\u8981\u6253\u5f00\u4e00\u4e2a\u538b\u7f29\u7684\u5f52\u6863\u6587\u4ef6\uff0c\u6839\u636e\u4e0d\u540c\u7684\u538b\u7f29\u534f\u8bae\uff0c\u4f20\u5165 \":gz\" \u6216 \":bz2\" \u6a21\u5f0f\u53c2\u6570\u5230 open() \u51fd\u6570\u3002 # gzip-1.3.14.tar.gz/gzip-1.3.14.tar/gzip-1.3.14/.. \u2192 gz/gzip-1.3.14/.. gz_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar.gz\" ) out_dir = os . path . join ( FileDir , \"gz\" ) # \u76f4\u63a5\u89e3\u538b tar.gz \u6587\u4ef6 with tarfile . open ( gz_file_path , mode = \"r:gz\" ) as out : out . extractall ( out_dir ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] # gzip.bzip2/gzip/.. \u2192 gzip/.. bz2_file_path = os . path . join ( FileDir , \"gzip.bz2\" ) out_dir = os . path . join ( FileDir , \"gzip\" ) # \u76f4\u63a5\u89e3\u538b .bz2 \u6587\u4ef6 with tarfile . open ( bz2_file_path , mode = \"r:bz2\" ) as out : out . extractall ( out_dir ) print ( os . listdir ( out_dir )) ['.tarball-version', 'aclocal.m4', 'algorithm.doc', 'amiga', 'atari', 'AUTHORS', 'bits.c', 'build-aux', 'ChangeLog', 'ChangeLog-2007', 'configure', 'configure.ac', 'COPYING', 'crypt.c', 'crypt.h', 'deflate.c', 'doc', 'GNUmakefile', 'gunzip.1', 'gunzip.in', 'gzexe.1', 'gzexe.in', 'gzip.1', 'gzip.c', 'gzip.doc', 'gzip.h', 'inflate.c', 'INSTALL', 'lib', 'lzw.c', 'lzw.h', 'm4', 'maint.mk', 'Makefile.am', 'Makefile.in', 'msdos', 'NEWS', 'nt', 'os2', 'primos', 'README', 'revision.h', 'sample', 'tailor.h', 'tests', 'THANKS', 'TODO', 'trees.c', 'unlzh.c', 'unlzw.c', 'unpack.c', 'unzip.c', 'util.c', 'vms', 'zcat.1', 'zcat.in', 'zcmp.1', 'zcmp.in', 'zdiff.1', 'zdiff.in', 'zegrep.in', 'zfgrep.in', 'zforce.1', 'zforce.in', 'zgrep.1', 'zgrep.in', 'zip.c', 'zless.1', 'zless.in', 'zmore.1', 'zmore.in', 'znew.1', 'znew.in'] bz2 \u89e3\u538b bz2 \u6587\u4ef6 import bz2 bz2_file_path = os . path . join ( FileDir , \"gzip.bz2\" ) out_dir = os . path . join ( FileDir , \"gzip\" ) # gzip.bzip2/gzip/.. \u2192 gzip with bz2 . open ( bz2_file_path , mode = \"rb\" ) as out : with open ( out_dir , \"wb\" ) as f : f . write ( out . read ()) zipfile \u89e3\u538b zip \u6587\u4ef6 import zipfile zip_file_path = os . path . join ( FileDir , \"gzip.zip\" ) out_dir = os . path . join ( FileDir , \"zip\" ) # gzip.zip/.. \u2192 zip/.. with zipfile . ZipFile ( zip_file_path ) as zf : zf . extractall ( out_dir )","title":"6.15.Compression_Archiving"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#gzip","text":"gzip \u6a21\u5757\u4e2d\u5305\u542b\u4e00\u4e9b\u5e38\u91cf\uff0c\u8fd9\u662f DEFLATE \u7b97\u6cd5\u751f\u6210\u7684\u538b\u7f29\u6587\u4ef6\u7684\u4e00\u4e9b\u6807\u8bb0\u5b57\u6bb5\u3002 gzip . FCOMMENT gzip . FEXTRA gzip . FHCRC gzip . FNAME gzip . FTEXT gzip . GzipFile gzip . READ gzip . WRITE","title":"gzip"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#_1","text":"\u538b\u7f29\u5185\u5b58\u4e2d\u7684\u6bd4\u7279\u6d41 (\u5b57\u8282\u6d41)\uff1a gzip . compress ( b \"this is a test.\" ) b'\\x1f\\x8b\\x08\\x00\\xcc\\x88\\xaa_\\x02\\xff+\\xc9\\xc8,V\\x00\\xa2D\\x85\\x92\\xd4\\xe2\\x12=\\x00\\xc3\\xf7\\x06N\\x0f\\x00\\x00\\x00' \u89e3\u538b\u7f29\u5185\u5b58\u4e2d\u7684\u6bd4\u7279\u6d41\uff1a \u8be5\u6bd4\u7279\u6d41\u5fc5\u987b\u662f\u4f7f\u7528 gzip \u5bf9\u5e94\u7684 DEFLATE \u538b\u7f29\u7b97\u6cd5\u5f97\u5230\u7684\u6bd4\u7279\u6d41\uff0c\u5426\u5219\u65e0\u6cd5\u4f7f\u7528\u5bf9\u5e94\u7684\u7b97\u6cd5\u89e3\u538b\u7f29\u3002 gzip . decompress ( gzip . compress ( b \"this is a test.\" )) b'this is a test.'","title":"\u5904\u7406\u6bd4\u7279\u6d41"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#gz","text":"gzip-1.3.14.tar.gz \u4f1a\u88ab\u89e3\u538b\u4e3a gzip-1.3.14.tar \u6587\u4ef6\u3002 gz_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar.gz\" ) ext_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar\" ) # \u521b\u5efa gzip \u5bf9\u8c61 gz_file = gzip . GzipFile ( gz_file_path ) with open ( ext_file_path , \"wb+\" ) as f : f . write ( gz_file . read ()) gz_file . close () \u4e5f\u53ef\u4ee5\u4f7f\u7528 gzip.open \u51fd\u6570\u6253\u5f00 gz \u6587\u4ef6\uff0c\u5b9e\u9645\u8fd9\u4e5f\u662f\u8c03\u7528 gzip.GzipFile \u7c7b\u3002 # gzip.open \u76f8\u5f53\u4e8e gzip.GzipFile with gzip . open ( gz_file_path , \"rb\" ) as output : with open ( ext_file_path , \"wb\" ) as f : f . write ( output . read ())","title":"\u89e3\u538b .gz \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#tarfile","text":"import tarfile import time \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3atar\u6587\u6863\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f1a\u5f15\u53d1IO ERROR\u3002 tar_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar\" ) tarfile . is_tarfile ( tar_file_path ) True","title":"tarfile"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#_2","text":"\u4f7f\u7528 .getnames() \u6765\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6\u4e2d\u6240\u6709\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : print ( t . getnames ()[ 0 : 5 ]) ['gzip-1.3.14', 'gzip-1.3.14/zgrep.1', 'gzip-1.3.14/configure.ac', 'gzip-1.3.14/gzexe.1', 'gzip-1.3.14/gunzip.1'] \u901a\u8fc7 .getmembers() \u548c .getmember() \u51fd\u6570\u6765\u83b7\u53d6\u5143\u6570\u636e\u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : for member_info in t . getmembers (): print ( member_info . name ) print ( \" Modified:\" , time . ctime ( member_info . mtime )) print ( \" Mode :\" , oct ( member_info . mode )) print ( \" Type :\" , member_info . type ) print ( \" Size :\" , member_info . size , \"bytes\" ) print () break gzip-1.3.14 Modified: Sat Oct 31 02:54:33 2009 Mode : 0o777 Type : b'5' Size : 0 bytes \u5982\u679c\u4e00\u4e2a\u6240\u542b\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u5df2\u77e5\uff0c\u53ef\u4f7f\u7528 getmember() \u51fd\u6570\u83b7\u53d6\u5176\u6240\u5bf9\u5e94\u7684 TarInfo \u5bf9\u8c61\u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : for filename in [ \"gzip-1.3.14/doc/Makefile.in\" , \"gzip-1.3.14/doc/version.texi\" ]: try : info = t . getmember ( filename ) except KeyError : print ( \"ERROR: Did not find {filename} in tar archive\" ) else : print ( f \" { info . name } is { info . size : d } bytes\" ) gzip-1.3.14/doc/Makefile.in is 43510 bytes gzip-1.3.14/doc/version.texi is 105 bytes","title":"\u83b7\u53d6\u5143\u6570\u636e"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#tar","text":"\u53ef\u4f7f\u7528 extractfile() \u65b9\u6cd5\u8bfb\u5165\u538b\u7f29\u6587\u6863\u4e2d\u67d0\u4e2a\u6210\u5458\u7684\u6570\u636e\uff1a with tarfile . open ( tar_file_path , \"r\" ) as t : for filename in [ \"gzip-1.3.14/doc/Makefile.in\" ]: try : # \u89e3\u538b\u5176\u4e2d\u67d0\u4e2a\u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u6570\u636e f = t . extractfile ( filename ) except KeyError : print ( f \"ERROR: Did not find { filename } in tar archive\" ) else : print ( filename , \":\" ) print ( f . read () . decode ( \"utf-8\" )[ 0 : 100 ]) gzip-1.3.14/doc/Makefile.in : # Makefile.in generated by automake 1.11a from Makefile.am. # @configure_input@ # Copyright (C) 199 \u89e3\u538b tar \u538b\u7f29\u6587\u6863\u4e2d\u6587\u4ef6\u5230\u786c\u76d8 out_dir = os . path . join ( FileDir , \"tar\" ) with tarfile . open ( tar_file_path , \"r\" ) as t : t . extract ( \"gzip-1.3.14/doc/Makefile.in\" , out_dir ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] \u89e3\u538b\u6574\u4e2a tar \u538b\u7f29\u6587\u6863\u5230\u786c\u76d8\uff1a gzip-1.3.14.tar/gzip-1.3.14/.. \u2192 tar/gzip-1.3.14/.. \u6807\u51c6\u5e93\u6587\u6863\u4e2d\u6709\u4e00\u4e2a\u6ce8\u91ca\u63d0\u5230 extractall() \u65b9\u6cd5\u7684\u5b89\u5168\u6027\u5f3a\u4e8e extract() \uff0c\u5c24\u5176\u9002\u7528\u4e8e\u65e0\u6cd5\u5012\u5e26\u8bfb\u53d6\u8f93\u5165\u7684\u8f83\u65e9\u90e8\u5206\u7684\u6d41\u6570\u636e\uff0c\u6240\u4ee5\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u4f7f\u7528 extractall() \u3002 out_dir = os . path . join ( FileDir , \"tar\" ) with tarfile . open ( tar_file_path , \"r\" ) as t : t . extractall ( out_dir ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] extractall() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u53ea\u89e3\u538b\u90e8\u5206\u6587\u4ef6\uff0c\u8fd9\u9700\u8981\u5c06\u5f85\u63d0\u53d6\u7684\u6587\u4ef6\u540d\u6216\u8005 TarInfo \u5143\u6570\u636e\u5bb9\u5668\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 extractall() \u3002 with tarfile . open ( tar_file_path , \"r\" ) as t : t . extractall ( out_dir , members = [ t . getmember ( \"gzip-1.3.14/doc/Makefile.in\" )], ) print ( os . listdir ( out_dir )) ['gzip-1.3.14']","title":"\u89e3\u538b tar \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#_3","text":"\u9664\u4e86\u6b63\u5e38\u7684 tar \u5f52\u6863\u6587\u4ef6\uff0ctarfile \u6a21\u5757\u8fd8\u53ef\u5904\u7406\u901a\u8fc7 gzip \u6216 bzip2 \u534f\u8bae\u538b\u7f29\u7684\u5f52\u6863\u6587\u4ef6\u3002\u8981\u6253\u5f00\u4e00\u4e2a\u538b\u7f29\u7684\u5f52\u6863\u6587\u4ef6\uff0c\u6839\u636e\u4e0d\u540c\u7684\u538b\u7f29\u534f\u8bae\uff0c\u4f20\u5165 \":gz\" \u6216 \":bz2\" \u6a21\u5f0f\u53c2\u6570\u5230 open() \u51fd\u6570\u3002 # gzip-1.3.14.tar.gz/gzip-1.3.14.tar/gzip-1.3.14/.. \u2192 gz/gzip-1.3.14/.. gz_file_path = os . path . join ( FileDir , \"gzip-1.3.14.tar.gz\" ) out_dir = os . path . join ( FileDir , \"gz\" ) # \u76f4\u63a5\u89e3\u538b tar.gz \u6587\u4ef6 with tarfile . open ( gz_file_path , mode = \"r:gz\" ) as out : out . extractall ( out_dir ) print ( os . listdir ( out_dir )) ['gzip-1.3.14'] # gzip.bzip2/gzip/.. \u2192 gzip/.. bz2_file_path = os . path . join ( FileDir , \"gzip.bz2\" ) out_dir = os . path . join ( FileDir , \"gzip\" ) # \u76f4\u63a5\u89e3\u538b .bz2 \u6587\u4ef6 with tarfile . open ( bz2_file_path , mode = \"r:bz2\" ) as out : out . extractall ( out_dir ) print ( os . listdir ( out_dir )) ['.tarball-version', 'aclocal.m4', 'algorithm.doc', 'amiga', 'atari', 'AUTHORS', 'bits.c', 'build-aux', 'ChangeLog', 'ChangeLog-2007', 'configure', 'configure.ac', 'COPYING', 'crypt.c', 'crypt.h', 'deflate.c', 'doc', 'GNUmakefile', 'gunzip.1', 'gunzip.in', 'gzexe.1', 'gzexe.in', 'gzip.1', 'gzip.c', 'gzip.doc', 'gzip.h', 'inflate.c', 'INSTALL', 'lib', 'lzw.c', 'lzw.h', 'm4', 'maint.mk', 'Makefile.am', 'Makefile.in', 'msdos', 'NEWS', 'nt', 'os2', 'primos', 'README', 'revision.h', 'sample', 'tailor.h', 'tests', 'THANKS', 'TODO', 'trees.c', 'unlzh.c', 'unlzw.c', 'unpack.c', 'unzip.c', 'util.c', 'vms', 'zcat.1', 'zcat.in', 'zcmp.1', 'zcmp.in', 'zdiff.1', 'zdiff.in', 'zegrep.in', 'zfgrep.in', 'zforce.1', 'zforce.in', 'zgrep.1', 'zgrep.in', 'zip.c', 'zless.1', 'zless.in', 'zmore.1', 'zmore.in', 'znew.1', 'znew.in']","title":"\u5904\u7406\u5176\u4ed6\u538b\u7f29\u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#bz2","text":"","title":"bz2"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#bz2_1","text":"import bz2 bz2_file_path = os . path . join ( FileDir , \"gzip.bz2\" ) out_dir = os . path . join ( FileDir , \"gzip\" ) # gzip.bzip2/gzip/.. \u2192 gzip with bz2 . open ( bz2_file_path , mode = \"rb\" ) as out : with open ( out_dir , \"wb\" ) as f : f . write ( out . read ())","title":"\u89e3\u538b bz2 \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#zipfile","text":"","title":"zipfile"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.15.Compression_Archiving.html#zip","text":"import zipfile zip_file_path = os . path . join ( FileDir , \"gzip.zip\" ) out_dir = os . path . join ( FileDir , \"zip\" ) # gzip.zip/.. \u2192 zip/.. with zipfile . ZipFile ( zip_file_path ) as zf : zf . extractall ( out_dir )","title":"\u89e3\u538b zip \u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html","text":"import shutil import os from toolkit import H \u590d\u5236\u6587\u4ef6 shutil.copyfile(src, dst, follow_symlinks=True) copyfile() \u590d\u5236\u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u521b\u5efa\u65b0\u6587\u4ef6\u7684\u6743\u9650\u5c06\u4f1a\u5f15\u53d1 IOError \uff0c\u5982\u679c dst \u5df2\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u66ff\u6362\u3002 src \u3001 dst \u4e0d\u80fd\u662f\u76ee\u5f55\u3002\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\uff08\u4f8b\u5982 Unix \u8bbe\u5907\uff09\u662f\u4e0d\u80fd\u4f7f\u7528\u5b83\u8fdb\u884c\u590d\u5236\u7684\uff0c\u56e0\u4e3a copyfile() \u4e0d\u7ba1\u6587\u4ef6\u7684\u7c7b\u578b\u5982\u4f55\uff0c\u90fd\u4f1a\u6253\u5f00\u8fdb\u884c\u8bfb\u53d6\u3002 shutil.copyfileobj(fsrc, fdst, length=16384) copyfile() \u662f\u8c03\u7528\u4f4e\u7ea7\u65b9\u6cd5 copyfileobj() \u5b9e\u73b0\u7684\u3002\u4f46\u4f20\u5165 copyfile() \u7684\u53c2\u6570\u662f\u6587\u4ef6\u540d\u79f0\uff0c\u800c\u4f20\u5165 copyfileobj() \u662f\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53ef\u9009\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8bbe\u7f6e\u8bfb\u53d6\u5757\u7684\u5927\u5c0f\u3002\u9ed8\u8ba4\u884c\u4e3a\u662f\u4f7f\u7528\u5927\u5757\u8bfb\u53d6\u3002\u4f7f\u7528 -1 \u4e00\u6b21\u6027\u8bfb\u53d6\u6240\u6709\u8f93\u5165\uff0c\u6216\u8005\u4f7f\u7528\u4e00\u4e2a\u6b63\u6574\u6570\u8bbe\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u533a\u5757\u5927\u5c0f\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u5c55\u793a\u6548\u679c\u3002 import io class VerboseStringIO ( io . StringIO ): def read ( self , n =- 1 ): next = io . StringIO . read ( self , n ) print ( f 'read( { n } ) got { len ( next ) } bytes' ) return next lorem_ipsum = '''Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Vestibulum aliquam mollis dolor. Donec vulputate nunc ut diam. Ut rutrum mi vel sem. Vestibulum ante ipsum. ''' print ( 'Default:' ) input = VerboseStringIO ( lorem_ipsum ) output = io . StringIO () shutil . copyfileobj ( input , output ) print () print ( 'All at once:' ) input = VerboseStringIO ( lorem_ipsum ) output = io . StringIO () shutil . copyfileobj ( input , output , - 1 ) print () print ( 'Blocks of 256:' ) input = VerboseStringIO ( lorem_ipsum ) output = io . StringIO () shutil . copyfileobj ( input , output , 100 ) Default: read(16384) got 167 bytes read(16384) got 0 bytes All at once: read(-1) got 167 bytes read(-1) got 0 bytes Blocks of 256: read(100) got 100 bytes read(100) got 67 bytes read(100) got 0 bytes shutil.copy(src, dst, follow_symlinks=True) \u590d\u5236\u4e00\u4e2a\u6587\u4ef6\u5230\u76ee\u6807\u8def\u5f84\uff0c\u5982\u679c\u76ee\u6807\u8def\u5f84\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\uff0c\u90a3\u4e48\u5c06\u4f1a\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e0e\u6e90\u6587\u4ef6\u540c\u540d\u7684\u65b0\u6587\u4ef6\u3002 copy() \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5148\u540e\u8c03\u7528\u4e86 copyfile() \u51fd\u6570\u548c copymode() \u51fd\u6570\uff0c\u56e0\u6b64\u6587\u4ef6\u7684\u6743\u9650\u5c06\u4f1a\u968f\u7740\u5185\u5bb9\u4e00\u8d77\u590d\u5236\u3002 copy() \u51fd\u6570\u4f1a\u50cf Unix \u547d\u4ee4\u884c\u5de5\u5177 cp \u90a3\u6837\u6253\u5370\u51fa\u65b0\u6587\u4ef6\u7684\u8def\u5f84\u3002 shutil.copy2(src, dst, follow_symlinks=True) copy2() \u7c7b\u4f3c copy() \uff0c\u4f46\u5148\u540e\u8c03\u7528\u7684\u662f copyfile() \u51fd\u6570\u548c copystat() \u51fd\u6570\uff0c\u56e0\u6b64\u5728\u590d\u5236\u65f6\u4f1a\u5305\u542b\u5143\u6570\u636e\u4e2d\u7684\u8bbf\u95ee\u548c\u4fee\u6539\u65f6\u95f4\u3002\u4f46\u65b0\u65e7\u6587\u4ef6\u7684\u6743\u9650\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cUnix \u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u5b83\u7684\u6743\u9650\u4f9d\u8d56\u4e8e\u5f53\u524d\u7528\u6237\u7684 umask\u3002\u5982\u679c\u8981\u590d\u5236\u6587\u4ef6\u6743\u9650\uff0c\u8bf7\u4f7f\u7528 copymode() \u3002 shutil.copymode(src, dst, follow_symlinks=True) \u4ecesrc\u590d\u5236\u6743\u9650\u4f4d\u5230dst\u3002\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6240\u6709\u8005\u548c\u7ec4\u4e0d\u53d7\u5f71\u54cd\u3002 shutil.copystat(src, dst, follow_symlinks=True) \u4ecesrc\u590d\u5236\u6743\u9650\u4f4d\u3001\u6700\u540e\u8bbf\u95ee\u65f6\u95f4\u3001\u6700\u540e\u4fee\u6539\u65f6\u95f4\u3001\u6587\u4ef6\u7684flags\u5230dst\u3002\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6240\u6709\u8005\u548c\u7ec4\u4e0d\u53d7\u5f71\u54cd\u3002\u5728 Linux \u4e2d\uff0c copystat \u4f1a\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u590d\u5236\"extended attributes\"\uff0c shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=shutil.copy2, ignore_dangling_symlinks=False) \u628a src \u76ee\u5f55\u590d\u5236\u5230 dst\uff0csrc \u548c dst \u90fd\u53ea\u80fd\u662f\u76ee\u5f55\uff0c\u4e14 dst \u5fc5\u987b\u4e0d\u5b58\u5728\u3002 symlinks \u53c2\u6570\u63a7\u5236\u7b26\u53f7\u94fe\u63a5\u662f\u88ab\u590d\u5236\u4e3a\u94fe\u63a5\u8fd8\u662f\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False \uff0c\u4f1a\u5c06\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u590d\u5236\u5230 dst\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u5df2\u7ecf\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u8fd9\u4e2a\u53c2\u6570\u662f true \uff0c\u5c06\u4f1a\u5728 dst \u4e2d\u521b\u5efa\u65b0\u7684\u7b26\u53f7\u94fe\u63a5\u3002 ignore_dangling_symlinks \u53c2\u6570\u4e3a True \u65f6\uff0c\u5982\u679c src \u5b58\u5728\u635f\u574f\u7684 symbolic link\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 copytree() \u51fd\u6570\u4f7f\u7528\u4e24\u4e2a\u56de\u8c03\u53c2\u6570\u63a7\u5236\u5b83\u7684\u884c\u4e3a\u3002 ignore \u53c2\u6570\u5728\u6bcf\u4e2a\u76ee\u5f55\u6216\u8005\u5b50\u76ee\u5f55\u4ee5\u53ca\u76ee\u5f55\u4e2d\u5185\u5bb9\u88ab\u590d\u5236\u65f6\u8c03\u7528\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5e94\u8be5\u88ab\u590d\u5236\u7684\u5185\u5bb9\u5217\u8868\u3002 copy_function \u53c2\u6570\u7528\u4e8e\u5728\u6587\u4ef6\u5b9e\u9645\u590d\u5236\u65f6\u8c03\u7528\u3002 import glob import pprint import shutil def verbose_copy ( src , dst ): print ( 'copying \\n {!r} \\n to {!r} ' . format ( src , dst )) return shutil . copy2 ( src , dst ) print ( 'BEFORE:' ) pprint . pprint ( glob . glob ( '/tmp/example/*' )) print () shutil . copytree ( '../shutil' , '/tmp/example' , copy_function = verbose_copy , ignore = shutil . ignore_patterns ( '*.py' ), ) print ( ' \\n AFTER:' ) pprint . pprint ( glob . glob ( '/tmp/example/*' )) \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c ignore_patterns() \u7528\u4e8e\u53bb\u521b\u5efa\u4e00\u4e2a\u5ffd\u7565\u65b9\u6cd5\u8df3\u8fc7 Python \u6e90\u6587\u4ef6\u3002 verbose_copy() \u6253\u5370\u590d\u5236\u7684\u6587\u4ef6\u540d\u79f0\u7136\u540e\u8c03\u7528 copy2() \u590d\u5236\uff0c\u5b83\u662f\u9ed8\u8ba4\u7684\u590d\u5236\u65b9\u6cd5\u3002 \u5220\u9664\u6587\u4ef6 shutil.rmtree(path, ignore_errors=False, onerror=None) \u9519\u8bef\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5f15\u53d1\u4e3a\u5f02\u5e38\uff0c\u4f46\u662f\u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a true \u5c06\u88ab\u5ffd\u7565\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u4e2a\u53c2\u6570\u63d0\u4f9b\u4e00\u4e2a\u9519\u8bef\u5904\u7406\u65b9\u6cd5\u3002 \u79fb\u52a8\u6587\u4ef6 shutil.move(src, dst, copy_function=shutil.copy2) \u539f\u7406\u7c7b\u4f3c\u4e8e Unix \u547d\u4ee4 mv \u3002\u5982\u679c\u6e90\u6587\u4ef6\u548c\u76ee\u6807\u6587\u4ef6\u90fd\u5b58\u5728\uff0c\u6e90\u6587\u4ef6\u5c06\u4f1a\u88ab\u91cd\u547d\u540d\u3002\u5426\u5219\u6e90\u6587\u4ef6\u88ab\u590d\u5236\u5230\u76ee\u7684\u5730\u7136\u540e\u88ab\u5220\u9664\u3002 \u67e5\u627e\u6587\u4ef6 shutil.which(cmd, mode=1, path=None) which() \u65b9\u6cd5\u4f1a\u6309\u7167\u4e00\u4e2a\u641c\u7d22\u8def\u5f84\u67e5\u627e\u6587\u4ef6\u3002\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u662f\u5728\u73af\u5883\u53d8\u91cf PATH \u5b9a\u4e49\u7684\u8def\u5f84\u4e2d\u67e5\u627e\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u6587\u4ef6\uff0c which() \u8fd4\u56de None \u3002 print ( shutil . which ( \"cmd\" )) C:\\WINDOWS\\system32\\cmd.EXE which() \u65b9\u6cd5\u63a5\u6536\u53c2\u6570\u4f9d\u636e\u6587\u4ef6\u6743\u9650\u4ee5\u53ca\u641c\u7d22\u8def\u5f84\u8fdb\u884c\u8fc7\u6ee4\u3002 path \u53c2\u6570\u9ed8\u8ba4\u662f os.environ('PATH') \uff0c\u4f46\u662f\u53ef\u4ee5\u662f\u4efb\u4f55\u7531 os.pathsep \u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002 mode \u53c2\u6570\u5e94\u8be5\u662f\u4e00\u4e2a\u5339\u914d\u6587\u4ef6\u6743\u9650\u7684\u4f4d\u63a9\u7801\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u67e5\u627e\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4e0b\u5217\u7684\u4f8b\u5b50\u4f7f\u7528\u4e86\u53ef\u8bfb\u63a9\u7801\u4ee5\u53ca\u4e00\u4e2a\u641c\u7d22\u8def\u5f84\u53bb\u67e5\u627e\u914d\u7f6e\u6587\u4ef6\u3002 path = os . pathsep . join ([ '.' , os . path . expanduser ( '~/pymotw' ), ]) mode = os . F_OK | os . R_OK filename = shutil . which ( 'config.ini' , mode = mode , path = path ) \u89e3\u538b\u7f29 Python \u6807\u51c6\u5e93\u5305\u542b\u4e86\u8bb8\u591a\u6a21\u5757\u7528\u4e8e\u7ba1\u7406\u538b\u7f29\u6587\u4ef6\uff0c\u4f8b\u5982 tarfile \u548c zipfile\u3002shutil \u6a21\u5757\u4e2d\u4e5f\u6709\u51e0\u4e2a\u9ad8\u9636\u65b9\u6cd5\u7528\u4e8e\u89e3\u538b\u7f29\u6587\u4ef6\u3002 shutil \u6a21\u5757\u7ef4\u62a4\u4e86\u4e00\u4e2a\u53ef\u5728\u5f53\u524d\u7cfb\u7edf\u4e0a\u538b\u7f29\u3001\u89e3\u538b\u7f29\u7684\u683c\u5f0f\u6ce8\u518c\u8868\uff0c\u901a\u8fc7 get_archive_formats() \u548c get_unpack_formats() \u8bbf\u95ee\u3002\u652f\u6301\u7684\u683c\u5f0f\u4f9d\u8d56\u4e8e\u54ea\u4e9b\u6a21\u5757\u548c\u5e95\u5c42\u5e93\u53ef\u7528\u3002 shutil . get_archive_formats () [('bztar', \"bzip2'ed tar-file\"), ('gztar', \"gzip'ed tar-file\"), ('tar', 'uncompressed tar file'), ('xztar', \"xz'ed tar-file\"), ('zip', 'ZIP file')] \u89e3\u538b\u7f29\u7684\u6ce8\u518c\u8868\u4e0d\u540c\u4e8e\u521b\u5efa\u538b\u7f29\u6587\u4ef6\u7684\u6ce8\u518c\u8868\uff0c\u56e0\u4e3a\u5b83\u8fd8\u5305\u62ec\u7528\u4e8e\u6bcf\u79cd\u683c\u5f0f\u7684\u5e38\u7528\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u4ee5\u4fbf\u89e3\u538b\u65b9\u6cd5\u6839\u636e\u6587\u4ef6\u6269\u5c55\u540d\u731c\u6d4b\u8981\u4f7f\u7528\u7684\u683c\u5f0f\u3002 shutil . get_unpack_formats () [('bztar', ['.tar.bz2', '.tbz2'], \"bzip2'ed tar-file\"), ('gztar', ['.tar.gz', '.tgz'], \"gzip'ed tar-file\"), ('tar', ['.tar'], 'uncompressed tar file'), ('xztar', ['.tar.xz', '.txz'], \"xz'ed tar-file\"), ('zip', ['.zip'], 'ZIP file')] \u4e5f\u53ef\u4ee5\u4f7f\u7528 register_archive_format() \u548c register_unpack_format() \u51fd\u6570\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684\u538b\u7f29\u3001\u89e3\u538b\u7f29\u51fd\u6570\u3002 shutil.register_archive_format(name, function, extra_args=None, description='') shutil.register_unpack_format(name, extensions, function, extra_args=None, description='') \u6216\u8005\u4f7f\u7528 unregister_archive_format() \u548c unregister_unpack_format() \u51fd\u6570\u53d6\u6d88\u6ce8\u518c\u538b\u7f29\u3001\u89e3\u538b\u7f29\u51fd\u6570\u3002 shutil.unregister_archive_format(name) shutil.unregister_unpack_format(name) \u53ef\u4ee5\u4f7f\u7528 make_archive() \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u538b\u7f29\u6587\u4ef6\u3002 make_archive() \u7684\u53c2\u6570\u4f3c\u4e4e\u6709\u70b9\u6df7\u4e71\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7b80\u5355\u7684\u7528\u6cd5\u3002 shutil.make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None) import os , shutil def make_archive ( source , destination ): base = os . path . basename ( destination ) name = base . split ( '.' )[ 0 ] format = base . split ( '.' )[ 1 ] archive_from = os . path . dirname ( source ) archive_to = os . path . basename ( source . strip ( os . sep )) print ( source , destination , archive_from , archive_to ) shutil . make_archive ( name , format , archive_from , archive_to ) shutil . move ( ' %s . %s ' % ( name , format ), destination ) make_archive ( '/path/to/folder' , '/path/to/folder.zip' ) https://www.thinbug.com/q/45245079 \u4f7f\u7528 unpack_archive() \u89e3\u538b\u6587\u4ef6\uff0c\u4f20\u5165\u538b\u7f29\u6587\u4ef6\u540d\u4ee5\u53ca\u53ef\u9009\u7684\u89e3\u538b\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662f\u5f53\u524d\u76ee\u5f55\u3002 shutil.unpack_archive(filename, extract_dir=None, format=None) filename \u662f\u538b\u7f29\u6863\u6848\u7684\u540d\u79f0\u3002 extract_dir \u662f\u89e3\u538b\u7684\u76ee\u6807\u76ee\u5f55\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 format \u662f\u538b\u7f29\u6863\u6848\u683c\u5f0f\uff1azip \u3001tar\u3001gztar\u3001bztar\u3001xztar \u5176\u4e2d\u4e4b\u4e00\uff0c\u6216\u7740\u4efb\u4f55\u5176\u4ed6\u7684\u6ce8\u518c\u683c\u5f0f\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c unpack_archive \u5c06\u4f7f\u7528\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u5e76\u67e5\u770b\u662f\u5426\u4e3a\u8be5\u6269\u5c55\u540d\u6ce8\u518c\u4e86\u89e3\u538b\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u4f1a\u5f15\u53d1 ValueError \u3002 \u6587\u4ef6\u7cfb\u7edf\u7a7a\u95f4 disk_usage() \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\u8868\u793a\u7cfb\u7edf\u603b\u7a7a\u95f4\uff0c\u5f53\u524d\u4f7f\u7528\u603b\u91cf\u4ee5\u53ca\u5269\u4f59\u603b\u91cf\uff0c\u5176\u5355\u4f4d\u4e3a\u5b57\u8282\u3002 shutil.disk_usage(path) import shutil total_b , used_b , free_b = shutil . disk_usage ( '.' ) gib = 2 ** 30 # GiB == gibibyte gb = 10 ** 9 # GB == gigabyte print ( 'Total: {:6.2f} GB {:6.2f} GiB' . format ( total_b / gb , total_b / gib )) print ( 'Used : {:6.2f} GB {:6.2f} GiB' . format ( used_b / gb , used_b / gib )) print ( 'Free : {:6.2f} GB {:6.2f} GiB' . format ( free_b / gb , free_b / gib )) Total: 479.88 GB 446.92 GiB Used : 318.18 GB 296.33 GiB Free : 161.69 GB 150.59 GiB \u83b7\u53d6\u7ec8\u7aef\u7a97\u53e3\u7684\u5927\u5c0f shutil.get_terminal_size(fallback=(80, 24)) \u5ffd\u7565\u51fd\u6570 shutil.ignore_patterns(patterns) ignore_patterns \u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u4f5c copytree() \u7684\u51fd\u6570\u7684 ignore \u53c2\u6570\u3002\u4ee5\u4e0b\u8868\u793a\u5ffd\u7565 python \u6587\u4ef6\u3002 shutil . ignore_patterns ( '*.py' ) <function shutil.ignore_patterns.<locals>._ignore_patterns(path, names)>","title":"6.16.shutil"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_1","text":"shutil.copyfile(src, dst, follow_symlinks=True) copyfile() \u590d\u5236\u6e90\u6587\u4ef6\u7684\u5185\u5bb9\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u521b\u5efa\u65b0\u6587\u4ef6\u7684\u6743\u9650\u5c06\u4f1a\u5f15\u53d1 IOError \uff0c\u5982\u679c dst \u5df2\u5b58\u5728\uff0c\u5219\u4f1a\u88ab\u66ff\u6362\u3002 src \u3001 dst \u4e0d\u80fd\u662f\u76ee\u5f55\u3002\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\uff08\u4f8b\u5982 Unix \u8bbe\u5907\uff09\u662f\u4e0d\u80fd\u4f7f\u7528\u5b83\u8fdb\u884c\u590d\u5236\u7684\uff0c\u56e0\u4e3a copyfile() \u4e0d\u7ba1\u6587\u4ef6\u7684\u7c7b\u578b\u5982\u4f55\uff0c\u90fd\u4f1a\u6253\u5f00\u8fdb\u884c\u8bfb\u53d6\u3002 shutil.copyfileobj(fsrc, fdst, length=16384) copyfile() \u662f\u8c03\u7528\u4f4e\u7ea7\u65b9\u6cd5 copyfileobj() \u5b9e\u73b0\u7684\u3002\u4f46\u4f20\u5165 copyfile() \u7684\u53c2\u6570\u662f\u6587\u4ef6\u540d\u79f0\uff0c\u800c\u4f20\u5165 copyfileobj() \u662f\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53ef\u9009\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u7528\u6765\u8bbe\u7f6e\u8bfb\u53d6\u5757\u7684\u5927\u5c0f\u3002\u9ed8\u8ba4\u884c\u4e3a\u662f\u4f7f\u7528\u5927\u5757\u8bfb\u53d6\u3002\u4f7f\u7528 -1 \u4e00\u6b21\u6027\u8bfb\u53d6\u6240\u6709\u8f93\u5165\uff0c\u6216\u8005\u4f7f\u7528\u4e00\u4e2a\u6b63\u6574\u6570\u8bbe\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u533a\u5757\u5927\u5c0f\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u5c55\u793a\u6548\u679c\u3002 import io class VerboseStringIO ( io . StringIO ): def read ( self , n =- 1 ): next = io . StringIO . read ( self , n ) print ( f 'read( { n } ) got { len ( next ) } bytes' ) return next lorem_ipsum = '''Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Vestibulum aliquam mollis dolor. Donec vulputate nunc ut diam. Ut rutrum mi vel sem. Vestibulum ante ipsum. ''' print ( 'Default:' ) input = VerboseStringIO ( lorem_ipsum ) output = io . StringIO () shutil . copyfileobj ( input , output ) print () print ( 'All at once:' ) input = VerboseStringIO ( lorem_ipsum ) output = io . StringIO () shutil . copyfileobj ( input , output , - 1 ) print () print ( 'Blocks of 256:' ) input = VerboseStringIO ( lorem_ipsum ) output = io . StringIO () shutil . copyfileobj ( input , output , 100 ) Default: read(16384) got 167 bytes read(16384) got 0 bytes All at once: read(-1) got 167 bytes read(-1) got 0 bytes Blocks of 256: read(100) got 100 bytes read(100) got 67 bytes read(100) got 0 bytes shutil.copy(src, dst, follow_symlinks=True) \u590d\u5236\u4e00\u4e2a\u6587\u4ef6\u5230\u76ee\u6807\u8def\u5f84\uff0c\u5982\u679c\u76ee\u6807\u8def\u5f84\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\uff0c\u90a3\u4e48\u5c06\u4f1a\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e0e\u6e90\u6587\u4ef6\u540c\u540d\u7684\u65b0\u6587\u4ef6\u3002 copy() \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5148\u540e\u8c03\u7528\u4e86 copyfile() \u51fd\u6570\u548c copymode() \u51fd\u6570\uff0c\u56e0\u6b64\u6587\u4ef6\u7684\u6743\u9650\u5c06\u4f1a\u968f\u7740\u5185\u5bb9\u4e00\u8d77\u590d\u5236\u3002 copy() \u51fd\u6570\u4f1a\u50cf Unix \u547d\u4ee4\u884c\u5de5\u5177 cp \u90a3\u6837\u6253\u5370\u51fa\u65b0\u6587\u4ef6\u7684\u8def\u5f84\u3002 shutil.copy2(src, dst, follow_symlinks=True) copy2() \u7c7b\u4f3c copy() \uff0c\u4f46\u5148\u540e\u8c03\u7528\u7684\u662f copyfile() \u51fd\u6570\u548c copystat() \u51fd\u6570\uff0c\u56e0\u6b64\u5728\u590d\u5236\u65f6\u4f1a\u5305\u542b\u5143\u6570\u636e\u4e2d\u7684\u8bbf\u95ee\u548c\u4fee\u6539\u65f6\u95f4\u3002\u4f46\u65b0\u65e7\u6587\u4ef6\u7684\u6743\u9650\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cUnix \u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u5b83\u7684\u6743\u9650\u4f9d\u8d56\u4e8e\u5f53\u524d\u7528\u6237\u7684 umask\u3002\u5982\u679c\u8981\u590d\u5236\u6587\u4ef6\u6743\u9650\uff0c\u8bf7\u4f7f\u7528 copymode() \u3002 shutil.copymode(src, dst, follow_symlinks=True) \u4ecesrc\u590d\u5236\u6743\u9650\u4f4d\u5230dst\u3002\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6240\u6709\u8005\u548c\u7ec4\u4e0d\u53d7\u5f71\u54cd\u3002 shutil.copystat(src, dst, follow_symlinks=True) \u4ecesrc\u590d\u5236\u6743\u9650\u4f4d\u3001\u6700\u540e\u8bbf\u95ee\u65f6\u95f4\u3001\u6700\u540e\u4fee\u6539\u65f6\u95f4\u3001\u6587\u4ef6\u7684flags\u5230dst\u3002\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6240\u6709\u8005\u548c\u7ec4\u4e0d\u53d7\u5f71\u54cd\u3002\u5728 Linux \u4e2d\uff0c copystat \u4f1a\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u590d\u5236\"extended attributes\"\uff0c shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=shutil.copy2, ignore_dangling_symlinks=False) \u628a src \u76ee\u5f55\u590d\u5236\u5230 dst\uff0csrc \u548c dst \u90fd\u53ea\u80fd\u662f\u76ee\u5f55\uff0c\u4e14 dst \u5fc5\u987b\u4e0d\u5b58\u5728\u3002 symlinks \u53c2\u6570\u63a7\u5236\u7b26\u53f7\u94fe\u63a5\u662f\u88ab\u590d\u5236\u4e3a\u94fe\u63a5\u8fd8\u662f\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e3a False \uff0c\u4f1a\u5c06\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u590d\u5236\u5230 dst\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u5df2\u7ecf\u4e0d\u5b58\u5728\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u8fd9\u4e2a\u53c2\u6570\u662f true \uff0c\u5c06\u4f1a\u5728 dst \u4e2d\u521b\u5efa\u65b0\u7684\u7b26\u53f7\u94fe\u63a5\u3002 ignore_dangling_symlinks \u53c2\u6570\u4e3a True \u65f6\uff0c\u5982\u679c src \u5b58\u5728\u635f\u574f\u7684 symbolic link\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 copytree() \u51fd\u6570\u4f7f\u7528\u4e24\u4e2a\u56de\u8c03\u53c2\u6570\u63a7\u5236\u5b83\u7684\u884c\u4e3a\u3002 ignore \u53c2\u6570\u5728\u6bcf\u4e2a\u76ee\u5f55\u6216\u8005\u5b50\u76ee\u5f55\u4ee5\u53ca\u76ee\u5f55\u4e2d\u5185\u5bb9\u88ab\u590d\u5236\u65f6\u8c03\u7528\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5e94\u8be5\u88ab\u590d\u5236\u7684\u5185\u5bb9\u5217\u8868\u3002 copy_function \u53c2\u6570\u7528\u4e8e\u5728\u6587\u4ef6\u5b9e\u9645\u590d\u5236\u65f6\u8c03\u7528\u3002 import glob import pprint import shutil def verbose_copy ( src , dst ): print ( 'copying \\n {!r} \\n to {!r} ' . format ( src , dst )) return shutil . copy2 ( src , dst ) print ( 'BEFORE:' ) pprint . pprint ( glob . glob ( '/tmp/example/*' )) print () shutil . copytree ( '../shutil' , '/tmp/example' , copy_function = verbose_copy , ignore = shutil . ignore_patterns ( '*.py' ), ) print ( ' \\n AFTER:' ) pprint . pprint ( glob . glob ( '/tmp/example/*' )) \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c ignore_patterns() \u7528\u4e8e\u53bb\u521b\u5efa\u4e00\u4e2a\u5ffd\u7565\u65b9\u6cd5\u8df3\u8fc7 Python \u6e90\u6587\u4ef6\u3002 verbose_copy() \u6253\u5370\u590d\u5236\u7684\u6587\u4ef6\u540d\u79f0\u7136\u540e\u8c03\u7528 copy2() \u590d\u5236\uff0c\u5b83\u662f\u9ed8\u8ba4\u7684\u590d\u5236\u65b9\u6cd5\u3002","title":"\u590d\u5236\u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_2","text":"shutil.rmtree(path, ignore_errors=False, onerror=None) \u9519\u8bef\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5f15\u53d1\u4e3a\u5f02\u5e38\uff0c\u4f46\u662f\u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a true \u5c06\u88ab\u5ffd\u7565\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e09\u4e2a\u53c2\u6570\u63d0\u4f9b\u4e00\u4e2a\u9519\u8bef\u5904\u7406\u65b9\u6cd5\u3002","title":"\u5220\u9664\u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_3","text":"shutil.move(src, dst, copy_function=shutil.copy2) \u539f\u7406\u7c7b\u4f3c\u4e8e Unix \u547d\u4ee4 mv \u3002\u5982\u679c\u6e90\u6587\u4ef6\u548c\u76ee\u6807\u6587\u4ef6\u90fd\u5b58\u5728\uff0c\u6e90\u6587\u4ef6\u5c06\u4f1a\u88ab\u91cd\u547d\u540d\u3002\u5426\u5219\u6e90\u6587\u4ef6\u88ab\u590d\u5236\u5230\u76ee\u7684\u5730\u7136\u540e\u88ab\u5220\u9664\u3002","title":"\u79fb\u52a8\u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_4","text":"shutil.which(cmd, mode=1, path=None) which() \u65b9\u6cd5\u4f1a\u6309\u7167\u4e00\u4e2a\u641c\u7d22\u8def\u5f84\u67e5\u627e\u6587\u4ef6\u3002\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u662f\u5728\u73af\u5883\u53d8\u91cf PATH \u5b9a\u4e49\u7684\u8def\u5f84\u4e2d\u67e5\u627e\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u6587\u4ef6\uff0c which() \u8fd4\u56de None \u3002 print ( shutil . which ( \"cmd\" )) C:\\WINDOWS\\system32\\cmd.EXE which() \u65b9\u6cd5\u63a5\u6536\u53c2\u6570\u4f9d\u636e\u6587\u4ef6\u6743\u9650\u4ee5\u53ca\u641c\u7d22\u8def\u5f84\u8fdb\u884c\u8fc7\u6ee4\u3002 path \u53c2\u6570\u9ed8\u8ba4\u662f os.environ('PATH') \uff0c\u4f46\u662f\u53ef\u4ee5\u662f\u4efb\u4f55\u7531 os.pathsep \u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002 mode \u53c2\u6570\u5e94\u8be5\u662f\u4e00\u4e2a\u5339\u914d\u6587\u4ef6\u6743\u9650\u7684\u4f4d\u63a9\u7801\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u67e5\u627e\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4e0b\u5217\u7684\u4f8b\u5b50\u4f7f\u7528\u4e86\u53ef\u8bfb\u63a9\u7801\u4ee5\u53ca\u4e00\u4e2a\u641c\u7d22\u8def\u5f84\u53bb\u67e5\u627e\u914d\u7f6e\u6587\u4ef6\u3002 path = os . pathsep . join ([ '.' , os . path . expanduser ( '~/pymotw' ), ]) mode = os . F_OK | os . R_OK filename = shutil . which ( 'config.ini' , mode = mode , path = path )","title":"\u67e5\u627e\u6587\u4ef6"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_5","text":"Python \u6807\u51c6\u5e93\u5305\u542b\u4e86\u8bb8\u591a\u6a21\u5757\u7528\u4e8e\u7ba1\u7406\u538b\u7f29\u6587\u4ef6\uff0c\u4f8b\u5982 tarfile \u548c zipfile\u3002shutil \u6a21\u5757\u4e2d\u4e5f\u6709\u51e0\u4e2a\u9ad8\u9636\u65b9\u6cd5\u7528\u4e8e\u89e3\u538b\u7f29\u6587\u4ef6\u3002 shutil \u6a21\u5757\u7ef4\u62a4\u4e86\u4e00\u4e2a\u53ef\u5728\u5f53\u524d\u7cfb\u7edf\u4e0a\u538b\u7f29\u3001\u89e3\u538b\u7f29\u7684\u683c\u5f0f\u6ce8\u518c\u8868\uff0c\u901a\u8fc7 get_archive_formats() \u548c get_unpack_formats() \u8bbf\u95ee\u3002\u652f\u6301\u7684\u683c\u5f0f\u4f9d\u8d56\u4e8e\u54ea\u4e9b\u6a21\u5757\u548c\u5e95\u5c42\u5e93\u53ef\u7528\u3002 shutil . get_archive_formats () [('bztar', \"bzip2'ed tar-file\"), ('gztar', \"gzip'ed tar-file\"), ('tar', 'uncompressed tar file'), ('xztar', \"xz'ed tar-file\"), ('zip', 'ZIP file')] \u89e3\u538b\u7f29\u7684\u6ce8\u518c\u8868\u4e0d\u540c\u4e8e\u521b\u5efa\u538b\u7f29\u6587\u4ef6\u7684\u6ce8\u518c\u8868\uff0c\u56e0\u4e3a\u5b83\u8fd8\u5305\u62ec\u7528\u4e8e\u6bcf\u79cd\u683c\u5f0f\u7684\u5e38\u7528\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u4ee5\u4fbf\u89e3\u538b\u65b9\u6cd5\u6839\u636e\u6587\u4ef6\u6269\u5c55\u540d\u731c\u6d4b\u8981\u4f7f\u7528\u7684\u683c\u5f0f\u3002 shutil . get_unpack_formats () [('bztar', ['.tar.bz2', '.tbz2'], \"bzip2'ed tar-file\"), ('gztar', ['.tar.gz', '.tgz'], \"gzip'ed tar-file\"), ('tar', ['.tar'], 'uncompressed tar file'), ('xztar', ['.tar.xz', '.txz'], \"xz'ed tar-file\"), ('zip', ['.zip'], 'ZIP file')] \u4e5f\u53ef\u4ee5\u4f7f\u7528 register_archive_format() \u548c register_unpack_format() \u51fd\u6570\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684\u538b\u7f29\u3001\u89e3\u538b\u7f29\u51fd\u6570\u3002 shutil.register_archive_format(name, function, extra_args=None, description='') shutil.register_unpack_format(name, extensions, function, extra_args=None, description='') \u6216\u8005\u4f7f\u7528 unregister_archive_format() \u548c unregister_unpack_format() \u51fd\u6570\u53d6\u6d88\u6ce8\u518c\u538b\u7f29\u3001\u89e3\u538b\u7f29\u51fd\u6570\u3002 shutil.unregister_archive_format(name) shutil.unregister_unpack_format(name) \u53ef\u4ee5\u4f7f\u7528 make_archive() \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u538b\u7f29\u6587\u4ef6\u3002 make_archive() \u7684\u53c2\u6570\u4f3c\u4e4e\u6709\u70b9\u6df7\u4e71\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7b80\u5355\u7684\u7528\u6cd5\u3002 shutil.make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None) import os , shutil def make_archive ( source , destination ): base = os . path . basename ( destination ) name = base . split ( '.' )[ 0 ] format = base . split ( '.' )[ 1 ] archive_from = os . path . dirname ( source ) archive_to = os . path . basename ( source . strip ( os . sep )) print ( source , destination , archive_from , archive_to ) shutil . make_archive ( name , format , archive_from , archive_to ) shutil . move ( ' %s . %s ' % ( name , format ), destination ) make_archive ( '/path/to/folder' , '/path/to/folder.zip' ) https://www.thinbug.com/q/45245079 \u4f7f\u7528 unpack_archive() \u89e3\u538b\u6587\u4ef6\uff0c\u4f20\u5165\u538b\u7f29\u6587\u4ef6\u540d\u4ee5\u53ca\u53ef\u9009\u7684\u89e3\u538b\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662f\u5f53\u524d\u76ee\u5f55\u3002 shutil.unpack_archive(filename, extract_dir=None, format=None) filename \u662f\u538b\u7f29\u6863\u6848\u7684\u540d\u79f0\u3002 extract_dir \u662f\u89e3\u538b\u7684\u76ee\u6807\u76ee\u5f55\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 format \u662f\u538b\u7f29\u6863\u6848\u683c\u5f0f\uff1azip \u3001tar\u3001gztar\u3001bztar\u3001xztar \u5176\u4e2d\u4e4b\u4e00\uff0c\u6216\u7740\u4efb\u4f55\u5176\u4ed6\u7684\u6ce8\u518c\u683c\u5f0f\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c unpack_archive \u5c06\u4f7f\u7528\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u5e76\u67e5\u770b\u662f\u5426\u4e3a\u8be5\u6269\u5c55\u540d\u6ce8\u518c\u4e86\u89e3\u538b\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u4f1a\u5f15\u53d1 ValueError \u3002","title":"\u89e3\u538b\u7f29"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_6","text":"disk_usage() \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\u8868\u793a\u7cfb\u7edf\u603b\u7a7a\u95f4\uff0c\u5f53\u524d\u4f7f\u7528\u603b\u91cf\u4ee5\u53ca\u5269\u4f59\u603b\u91cf\uff0c\u5176\u5355\u4f4d\u4e3a\u5b57\u8282\u3002 shutil.disk_usage(path) import shutil total_b , used_b , free_b = shutil . disk_usage ( '.' ) gib = 2 ** 30 # GiB == gibibyte gb = 10 ** 9 # GB == gigabyte print ( 'Total: {:6.2f} GB {:6.2f} GiB' . format ( total_b / gb , total_b / gib )) print ( 'Used : {:6.2f} GB {:6.2f} GiB' . format ( used_b / gb , used_b / gib )) print ( 'Free : {:6.2f} GB {:6.2f} GiB' . format ( free_b / gb , free_b / gib )) Total: 479.88 GB 446.92 GiB Used : 318.18 GB 296.33 GiB Free : 161.69 GB 150.59 GiB","title":"\u6587\u4ef6\u7cfb\u7edf\u7a7a\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_7","text":"shutil.get_terminal_size(fallback=(80, 24))","title":"\u83b7\u53d6\u7ec8\u7aef\u7a97\u53e3\u7684\u5927\u5c0f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.16.shutil.html#_8","text":"shutil.ignore_patterns(patterns) ignore_patterns \u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u4f5c copytree() \u7684\u51fd\u6570\u7684 ignore \u53c2\u6570\u3002\u4ee5\u4e0b\u8868\u793a\u5ffd\u7565 python \u6587\u4ef6\u3002 shutil . ignore_patterns ( '*.py' ) <function shutil.ignore_patterns.<locals>._ignore_patterns(path, names)>","title":"\u5ffd\u7565\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.17.test.html","text":"\ufeff\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismodnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctormassa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismodnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctormassa, nec semper lorem quam in massa. Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Note massa, nec semper lorem quam in massa. Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismodnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctormassa, nec semper lorem quam in massa. $$ \\sum $$ Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci a = 1 b = a if a == b : print ( True ) \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d \u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d input a = 1 b = a if a == b : print ( True ) output a = 1 b = a a = 1 b = a just a = 100 print ( a ) list 100 ==\u6211\u4eec\u5728\u8fd9\u91cc\u3002==\u6d4b\u8bd5\u9ad8\u4eae\u3002\u6d4b\u8bd5\u9ad8\u4eae\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u3002 \u6d4b\u8bd5\u9ad8\u4eae\u3002","title":"6.17.test"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import textwrap from toolkit.Help import Help as H \u5220\u9664\u524d\u5bfc\u7a7a\u683c\u548c\u540e\u7f00\u7a7a\u683c \u5220\u9664\u7b2c\u4e00\u884c\u7684\u524d\u5bfc\u7a7a\u683c\u548c\u6700\u540e\u4e00\u884c\u7684\u540e\u7f00\u7a7a\u683c\uff0c width \u53c2\u6570\u63a7\u5236\u6bcf\u4e00\u884c\u7684\u5bbd\u5ea6\uff1a sample_text = ''' The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. ''' print ( sample_text ) print ( textwrap . fill ( sample_text , width = 50 )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. The textwrap module can be used to format text for output in situations where pretty- printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u7ed3\u679c\u5e76\u4e0d\u5c3d\u5982\u4eba\u610f\u3002\u6587\u672c\u73b0\u5728\u662f\u5de6\u5bf9\u9f50\u7684\uff0c\u53ea\u6709\u7b2c\u4e00\u884c\u4fdd\u7559\u4e86\u7f29\u8fdb\uff0c\u4f46\u662f\u539f\u6765\u7684\u6bcf\u4e00\u884c\u7684\u672b\u5c3e\u548c\u4e0b\u4e00\u884c\u7684\u5f00\u5934\u4e4b\u95f4\u4ecd\u6709\u7a7a\u683c\u3002 \u79fb\u9664\u6240\u6709\u7a7a\u683c \u4f7f\u7528 dedent() \u51fd\u6570\u53ef\u4ee5\u79fb\u53bb\u6240\u6709\u884c\u4e2d\u7684\u7a7a\u683c\u524d\u7f00\u548c\u540e\u7f00\uff1a dedented_text = textwrap . dedent ( sample_text ) print ( dedented_text ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u56e0\u4e3a dedent \u662f indent \u7684\u53cd\u4e49\u8bcd\uff0c \u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u662f\u4e00\u6bb5\u5220\u9664\u4e86\u6bcf\u4e00\u884c\u4e2d\u90fd\u5b58\u5728\u7684\u7f29\u8fdb\u7a7a\u767d\u7684\u6587\u5b57\u3002\u5982\u679c\u67d0\u4e00\u884c\u6bd4\u5176\u4ed6\u884c\u7f29\u8fdb\u7684\u66f4\u591a\uff0c\u591a\u51fa\u7684\u90e8\u5206\u5c06\u4e0d\u4f1a\u88ab\u79fb\u9664\u3002 print ( textwrap . dedent ( \"\"\" Line one. Line two. Line three. \"\"\" )) Line one. Line two. Line three. \u6dfb\u52a0\u524d\u7f00 \u7528 indent() \u51fd\u6570\u5728\u5b57\u7b26\u4e32\u6bcf\u4e00\u884c\u5f00\u5934\u52a0\u5165\u524d\u7f00\u6587\u672c\u3002\u8fd9\u4e2a\u4f8b\u5b50\u975e\u5e38\u7c7b\u4f3c\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u4e2d\u88ab\u5f15\u7528\u7684\u90e8\u5206\uff0c\u4f7f\u7528 > \u7b26\u53f7\u6765\u505a\u6bcf\u884c\u6587\u5b57\u7684\u524d\u7f00\u3002 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) wrapped += ' \\n\\n Second paragraph after a blank line.' print ( wrapped ) final = textwrap . indent ( wrapped , '> ' ) print ( 'Quoted block: \\n ' ) print ( final ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. Second paragraph after a blank line. Quoted block: > The textwrap module can be used to format text > for output in situations where pretty-printing is > desired. It offers programmatic functionality > similar to the paragraph wrapping or filling > features found in many text editors. > Second paragraph after a blank line. \u4e00\u6bb5\u6587\u5b57\u88ab\u5206\u6210\u4e86\u51e0\u884c\uff0c\u6bcf\u4e00\u884c\u6587\u5b57\u524d\u90fd\u52a0\u4e86\u524d\u7f00\uff0c\u7136\u540e\u6bcf\u884c\u6587\u5b57\u91cd\u65b0\u7ec4\u6210\u6574\u4e2a\u6587\u5b57\u6bb5\u843d\u5e76\u8fd4\u56de\u3002 \u8981\u63a7\u5236\u7279\u5b9a\u7684\u4e00\u884c\u63a5\u53d7\u65b0\u524d\u7f00\uff0c\u7ed9 indent() \u7684 predicate \u53c2\u6570\u8d4b\u503c\u3002\u8be5\u64cd\u4f5c\u4f1a\u8f6e\u6d41\u904d\u5386\u6bcf\u884c\u7684\u6587\u672c\uff0c\u5f53\u503c\u4e3a\u771f\u65f6\u5c06\u5728\u8be5\u884c\u52a0\u4e0a\u524d\u7f00\u3002 def should_indent ( line ): print ( 'Indent {!r} ?' . format ( line )) return len ( line . strip ()) % 2 == 0 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) final = textwrap . indent ( wrapped , 'EVEN ' , predicate = should_indent ) print ( ' \\n Quoted block: \\n ' ) print ( final ) Indent ' The textwrap module can be used to format text\\n'? Indent 'for output in situations where pretty-printing is\\n'? Indent 'desired. It offers programmatic functionality\\n'? Indent 'similar to the paragraph wrapping or filling\\n'? Indent 'features found in many text editors.'? Quoted block: EVEN The textwrap module can be used to format text for output in situations where pretty-printing is EVEN desired. It offers programmatic functionality EVEN similar to the paragraph wrapping or filling EVEN features found in many text editors. \u60ac\u6302\u7f29\u8fdb \u540c\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u8f93\u51fa\u6bb5\u843d\u7684\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u5355\u72ec\u63a7\u5236\u9996\u884c\u7684\u7f29\u8fdb\u3002 dedented_text = textwrap . dedent ( sample_text ) . strip () print ( textwrap . fill ( dedented_text , initial_indent = '' , subsequent_indent = ' ' * 4 , width = 50 , )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u51cf\u77ed\u957f\u6587\u672c \u4e3a\u4e86\u67e5\u770b\u957f\u6587\u672c\u7684\u6458\u8981\u6216\u9884\u89c8\uff0c\u53ef\u4ee5\u4f7f\u7528 shorten() \u3002\u6240\u6709\u7684\u7a7a\u683c\uff0c\u6bd4\u5982\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u7a7a\u683c\u90fd\u5c06\u6807\u51c6\u5316\u4e3a\u5355\u4e2a\u7a7a\u683c\u3002\u7136\u540e\u6b64\u6587\u672c\u5c06\u51cf\u77ed\u4e3a\u8981\u6c42\u7684\u957f\u5ea6\u6765\u663e\u793a\uff0c\u5728\u5b57\u8bcd\u8fb9\u754c\u4e4b\u95f4\uff0c\u5c06\u4e0d\u5305\u62ec\u4e0d\u5b8c\u6574\u7684\u8bcd\u3002 dedented_text = textwrap . dedent ( sample_text ) original = textwrap . fill ( dedented_text , width = 50 ) print ( 'Original: \\n ' ) print ( original ) shortened = textwrap . shorten ( original , 100 ) shortened_wrapped = textwrap . fill ( shortened , width = 50 ) print ( ' \\n Shortened: \\n ' ) print ( shortened_wrapped ) Original: The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. Shortened: The textwrap module can be used to format text for output in situations where pretty-printing [...] \u5982\u679c\u975e\u7a7a\u5b57\u5143\u5728\u539f\u6587\u672c\u4e2d\u88ab\u5f53\u4f5c\u51cf\u77ed\u7684\u90e8\u5206\u88ab\u79fb\u9664\uff0c\u4ed6\u5c06\u66ff\u6362\u4e3a\u5360\u4f4d\u7b26\u3002\u9ed8\u8ba4\u503c [...] \u53ef\u4ee5\u88ab\u66ff\u6362\uff0c\u5728 shorten() \u4e2d\u52a0\u5165 placeholder \u53c2\u6570\u3002 \u5f3a\u5236\u6362\u884c \u6bcf\u4e00\u884c\u8d85\u8fc720\u4e2a\u5b57\u7b26\u5c31\u5f3a\u5236\u6362\u884c\uff08\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5355\u8bcd\u88ab\u62c6\u5206\uff09\uff1a textwrap . wrap ( sample_text , width = 20 ) [' The textwrap', 'module can be used', 'to format text for', 'output in', 'situations where', 'pretty-printing is', 'desired. It offers', 'programmatic', 'functionality', 'similar to the', 'paragraph wrapping', 'or filling features', 'found in many text', 'editors.']","title":"6.2.textwrap"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html#_1","text":"\u5220\u9664\u7b2c\u4e00\u884c\u7684\u524d\u5bfc\u7a7a\u683c\u548c\u6700\u540e\u4e00\u884c\u7684\u540e\u7f00\u7a7a\u683c\uff0c width \u53c2\u6570\u63a7\u5236\u6bcf\u4e00\u884c\u7684\u5bbd\u5ea6\uff1a sample_text = ''' The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. ''' print ( sample_text ) print ( textwrap . fill ( sample_text , width = 50 )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. The textwrap module can be used to format text for output in situations where pretty- printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u7ed3\u679c\u5e76\u4e0d\u5c3d\u5982\u4eba\u610f\u3002\u6587\u672c\u73b0\u5728\u662f\u5de6\u5bf9\u9f50\u7684\uff0c\u53ea\u6709\u7b2c\u4e00\u884c\u4fdd\u7559\u4e86\u7f29\u8fdb\uff0c\u4f46\u662f\u539f\u6765\u7684\u6bcf\u4e00\u884c\u7684\u672b\u5c3e\u548c\u4e0b\u4e00\u884c\u7684\u5f00\u5934\u4e4b\u95f4\u4ecd\u6709\u7a7a\u683c\u3002","title":"\u5220\u9664\u524d\u5bfc\u7a7a\u683c\u548c\u540e\u7f00\u7a7a\u683c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html#_2","text":"\u4f7f\u7528 dedent() \u51fd\u6570\u53ef\u4ee5\u79fb\u53bb\u6240\u6709\u884c\u4e2d\u7684\u7a7a\u683c\u524d\u7f00\u548c\u540e\u7f00\uff1a dedented_text = textwrap . dedent ( sample_text ) print ( dedented_text ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u56e0\u4e3a dedent \u662f indent \u7684\u53cd\u4e49\u8bcd\uff0c \u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u662f\u4e00\u6bb5\u5220\u9664\u4e86\u6bcf\u4e00\u884c\u4e2d\u90fd\u5b58\u5728\u7684\u7f29\u8fdb\u7a7a\u767d\u7684\u6587\u5b57\u3002\u5982\u679c\u67d0\u4e00\u884c\u6bd4\u5176\u4ed6\u884c\u7f29\u8fdb\u7684\u66f4\u591a\uff0c\u591a\u51fa\u7684\u90e8\u5206\u5c06\u4e0d\u4f1a\u88ab\u79fb\u9664\u3002 print ( textwrap . dedent ( \"\"\" Line one. Line two. Line three. \"\"\" )) Line one. Line two. Line three.","title":"\u79fb\u9664\u6240\u6709\u7a7a\u683c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html#_3","text":"\u7528 indent() \u51fd\u6570\u5728\u5b57\u7b26\u4e32\u6bcf\u4e00\u884c\u5f00\u5934\u52a0\u5165\u524d\u7f00\u6587\u672c\u3002\u8fd9\u4e2a\u4f8b\u5b50\u975e\u5e38\u7c7b\u4f3c\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u4e2d\u88ab\u5f15\u7528\u7684\u90e8\u5206\uff0c\u4f7f\u7528 > \u7b26\u53f7\u6765\u505a\u6bcf\u884c\u6587\u5b57\u7684\u524d\u7f00\u3002 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) wrapped += ' \\n\\n Second paragraph after a blank line.' print ( wrapped ) final = textwrap . indent ( wrapped , '> ' ) print ( 'Quoted block: \\n ' ) print ( final ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. Second paragraph after a blank line. Quoted block: > The textwrap module can be used to format text > for output in situations where pretty-printing is > desired. It offers programmatic functionality > similar to the paragraph wrapping or filling > features found in many text editors. > Second paragraph after a blank line. \u4e00\u6bb5\u6587\u5b57\u88ab\u5206\u6210\u4e86\u51e0\u884c\uff0c\u6bcf\u4e00\u884c\u6587\u5b57\u524d\u90fd\u52a0\u4e86\u524d\u7f00\uff0c\u7136\u540e\u6bcf\u884c\u6587\u5b57\u91cd\u65b0\u7ec4\u6210\u6574\u4e2a\u6587\u5b57\u6bb5\u843d\u5e76\u8fd4\u56de\u3002 \u8981\u63a7\u5236\u7279\u5b9a\u7684\u4e00\u884c\u63a5\u53d7\u65b0\u524d\u7f00\uff0c\u7ed9 indent() \u7684 predicate \u53c2\u6570\u8d4b\u503c\u3002\u8be5\u64cd\u4f5c\u4f1a\u8f6e\u6d41\u904d\u5386\u6bcf\u884c\u7684\u6587\u672c\uff0c\u5f53\u503c\u4e3a\u771f\u65f6\u5c06\u5728\u8be5\u884c\u52a0\u4e0a\u524d\u7f00\u3002 def should_indent ( line ): print ( 'Indent {!r} ?' . format ( line )) return len ( line . strip ()) % 2 == 0 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) final = textwrap . indent ( wrapped , 'EVEN ' , predicate = should_indent ) print ( ' \\n Quoted block: \\n ' ) print ( final ) Indent ' The textwrap module can be used to format text\\n'? Indent 'for output in situations where pretty-printing is\\n'? Indent 'desired. It offers programmatic functionality\\n'? Indent 'similar to the paragraph wrapping or filling\\n'? Indent 'features found in many text editors.'? Quoted block: EVEN The textwrap module can be used to format text for output in situations where pretty-printing is EVEN desired. It offers programmatic functionality EVEN similar to the paragraph wrapping or filling EVEN features found in many text editors.","title":"\u6dfb\u52a0\u524d\u7f00"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html#_4","text":"\u540c\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u8f93\u51fa\u6bb5\u843d\u7684\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u5355\u72ec\u63a7\u5236\u9996\u884c\u7684\u7f29\u8fdb\u3002 dedented_text = textwrap . dedent ( sample_text ) . strip () print ( textwrap . fill ( dedented_text , initial_indent = '' , subsequent_indent = ' ' * 4 , width = 50 , )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors.","title":"\u60ac\u6302\u7f29\u8fdb"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html#_5","text":"\u4e3a\u4e86\u67e5\u770b\u957f\u6587\u672c\u7684\u6458\u8981\u6216\u9884\u89c8\uff0c\u53ef\u4ee5\u4f7f\u7528 shorten() \u3002\u6240\u6709\u7684\u7a7a\u683c\uff0c\u6bd4\u5982\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u7a7a\u683c\u90fd\u5c06\u6807\u51c6\u5316\u4e3a\u5355\u4e2a\u7a7a\u683c\u3002\u7136\u540e\u6b64\u6587\u672c\u5c06\u51cf\u77ed\u4e3a\u8981\u6c42\u7684\u957f\u5ea6\u6765\u663e\u793a\uff0c\u5728\u5b57\u8bcd\u8fb9\u754c\u4e4b\u95f4\uff0c\u5c06\u4e0d\u5305\u62ec\u4e0d\u5b8c\u6574\u7684\u8bcd\u3002 dedented_text = textwrap . dedent ( sample_text ) original = textwrap . fill ( dedented_text , width = 50 ) print ( 'Original: \\n ' ) print ( original ) shortened = textwrap . shorten ( original , 100 ) shortened_wrapped = textwrap . fill ( shortened , width = 50 ) print ( ' \\n Shortened: \\n ' ) print ( shortened_wrapped ) Original: The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. Shortened: The textwrap module can be used to format text for output in situations where pretty-printing [...] \u5982\u679c\u975e\u7a7a\u5b57\u5143\u5728\u539f\u6587\u672c\u4e2d\u88ab\u5f53\u4f5c\u51cf\u77ed\u7684\u90e8\u5206\u88ab\u79fb\u9664\uff0c\u4ed6\u5c06\u66ff\u6362\u4e3a\u5360\u4f4d\u7b26\u3002\u9ed8\u8ba4\u503c [...] \u53ef\u4ee5\u88ab\u66ff\u6362\uff0c\u5728 shorten() \u4e2d\u52a0\u5165 placeholder \u53c2\u6570\u3002","title":"\u51cf\u77ed\u957f\u6587\u672c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.2.textwrap.html#_6","text":"\u6bcf\u4e00\u884c\u8d85\u8fc720\u4e2a\u5b57\u7b26\u5c31\u5f3a\u5236\u6362\u884c\uff08\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5355\u8bcd\u88ab\u62c6\u5206\uff09\uff1a textwrap . wrap ( sample_text , width = 20 ) [' The textwrap', 'module can be used', 'to format text for', 'output in', 'situations where', 'pretty-printing is', 'desired. It offers', 'programmatic', 'functionality', 'similar to the', 'paragraph wrapping', 'or filling features', 'found in many text', 'editors.']","title":"\u5f3a\u5236\u6362\u884c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import time import textwrap import warnings # from tools import Help as H warnings . filterwarnings ( \"ignore\" ) \u65f6\u95f4\u6a21\u5757 time \u63d0\u4f9b\u4e86\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u65f6\u95f4\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e00\u79cd\u5bf9\u4e0d\u540c\u76ee\u7684\u90fd\u6709\u7528\u3002 \u6807\u51c6\u7cfb\u7edf\u901a\u8fc7\u8c03\u7528 time() \uff08\u6a21\u5757\uff09\u62a5\u544a\u7cfb\u7edf\u6302\u949f\u65f6\u95f4\uff08\"wall clock\" \u4e00\u822c\u6307\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\uff09\u3002 \u5355\u8c03\u65f6\u949f\u6a21\u5757 monotonic() \u7528\u4e8e\u4f30\u7b97\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u56e0\u4e3a\u5373\u4f7f\u7cfb\u7edf\u65f6\u95f4\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5b83\u4e5f\u4fdd\u8bc1\u4e0d\u4f1a\u540e\u9000\u3002 \u5bf9\u4e8e\u7a0b\u5e8f\u6d4b\u8bd5\uff0c perf_counter() \uff08\u6a21\u5757\uff09 \u63d0\u4f9b\u4e86\u9ad8\u5206\u8fa8\u7387\u7684\u65f6\u949f\u8bbf\u95ee\u65b9\u5f0f\uff0c\u4f7f\u77ed\u65f6\u95f4\u7684\u6d4b\u8bd5\u66f4\u51c6\u786e\u3002 CPU \u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7 clock() \u83b7\u5f97\uff0c\u800c process_time() \u5219\u4f1a\u8fd4\u56de\u5904\u7406\u5668\u65f6\u95f4\u548c\u7cfb\u7edf\u65f6\u95f4\u7684\u7ec4\u5408\u3002 \u5404\u4e2a\u65f6\u949f \u65f6\u949f\u7684\u5b9e\u73b0\u7ec6\u8282\u56e0\u5e73\u53f0\u800c\u5f02\u3002\u4f7f\u7528 \u201cget_clock_info ()\u201d \u6765\u8bbf\u95ee\u5173\u4e8e\u5f53\u524d\u65b9\u5f0f\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u65f6\u949f\u7684\u5206\u8fa8\u7387\u3002 \u5f53\u524dPython\u7248\u672c\u6240\u6709\u53ef\u7528\u7684\u65f6\u949f\u5982\u4e0b\uff1a available_clocks = [ ( 'clock' , time . clock ), ( 'monotonic' , time . monotonic ), ( 'perf_counter' , time . perf_counter ), ( 'process_time' , time . process_time ), ( 'time' , time . time ), ( 'thread_time' , time . thread_time ), ] for clock_name , func in available_clocks : print ( textwrap . dedent ( ''' \\ {name} : adjustable : {info.adjustable} implementation: {info.implementation} monotonic : {info.monotonic} resolution : {info.resolution} current : {current} ''' ) . format ( name = clock_name , info = time . get_clock_info ( clock_name ), current = func ()) ) clock: adjustable : False implementation: QueryPerformanceCounter() monotonic : True resolution : 1e-07 current : 516160.6853218 monotonic: adjustable : False implementation: GetTickCount64() monotonic : True resolution : 0.015625 current : 1123921.625 perf_counter: adjustable : False implementation: QueryPerformanceCounter() monotonic : True resolution : 1e-07 current : 516160.6890105 process_time: adjustable : False implementation: GetProcessTimes() monotonic : True resolution : 1e-07 current : 565.125 time: adjustable : True implementation: GetSystemTimeAsFileTime() monotonic : False resolution : 0.015625 current : 1580735857.8439054 thread_time: adjustable : False implementation: GetThreadTimes() monotonic : True resolution : 1e-07 current : 528.671875 Windows 10 \u7684\u8f93\u51fa\u663e\u793a\u5176 perf_counter \u548c clocks \u6a21\u5757\u8c03\u7528\u76f8\u540c\u7684\u5e95\u5c42\u3002clocks \u5728Python 3.8\u4f1a\u88ab\u79fb\u9664\u3002 \u6302\u949f\u65f6\u95f4\u2014\u2014time time \u6a21\u5757\u7684\u6838\u5fc3\u51fd\u6570\u4e4b\u4e00\u662f time() \uff0c\u5b83\u53ef\u4ee5\u628a\u4ece \u300cepoch\u300d \u5f00\u59cb\u4e4b\u540e\u7684\u79d2\u6570\u4ee5\u6d6e\u70b9\u6570\u7684\u683c\u5f0f\u8fd4\u56de\u3002 print ( 'The time is:' , time . time ()) print ( 'The time is:' , time . time_ns ()) The time is: 1580735857.8729014 The time is: 1580735857877901000 \u65f6\u5143 (epoch) \u662f\u6d4b\u91cf\u65f6\u95f4\u7684\u5f00\u59cb\uff0c\u5bf9\u4e8e Unix \u7cfb\u7edf\u6765\u8bf4\uff0c\u65f6\u5143\u662f 1970 \u5e74 1 \u6708 1 \u65e5 0 \u70b9\u3002 \u867d\u7136\u8be5\u6570\u503c\u4e00\u76f4\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4f46\u662f\u5b83\u7684\u5b9e\u9645\u7cbe\u5ea6\u662f\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684\u3002 \u867d\u7136\u6d6e\u70b9\u8868\u793a\u5728\u5b58\u50a8\u6216\u8005\u6bd4\u8f83\u65e5\u671f\u65f6\u975e\u5e38\u6709\u6548\uff0c\u4f46\u662f\uff0c\u5728\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u8868\u793a\u65f6\u5c31\u663e\u5f97\u6709\u70b9\u529b\u4e0d\u4ece\u5fc3\u3002\u5bf9\u4e8e\u8bb0\u5f55\u6216\u8005\u6253\u5370\u65f6\u95f4\uff0c ctime() \u53ef\u80fd\u4f1a\u66f4\u6709\u6548\u3002 ctime() \u5c06\u81eaepoch\u4ee5\u6765\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u7b49\u6548\u4e8e asctime(localtime(seconds)) \u3002\u5982\u679c\u65f6\u95f4\u5143\u7ec4\u4e0d\u5b58\u5728\uff0c\u5219\u4f7f\u7528localtime()\u8fd4\u56de\u7684\u5f53\u524d\u65f6\u95f4\u3002 print ( 'The time is:' , time . ctime ()) The time is: Mon Feb 3 21:17:37 2020 \u5355\u8c03\u65f6\u949f\u2014\u2014monotonic \u56e0\u4e3a time() \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u662f\u7cfb\u7edf\u65f6\u949f\uff0c\u5e76\u4e14\uff0c\u4e3a\u4e86\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u540c\u6b65\u65f6\u949f\uff0c\u7cfb\u7edf\u65f6\u949f\u53ef\u4ee5\u88ab\u7528\u6237\u6216\u8005\u662f\u7cfb\u7edf\u670d\u52a1\u66f4\u6539\uff1b\u6240\u4ee5\uff0c\u5728\u91cd\u590d\u8c03\u7528 time() \u51fd\u6570\u65f6\u4ea7\u751f\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u4f1a\u6709\u524d\u540e\u6ce2\u52a8\u3002\u5728\u6d4b\u91cf\u6301\u7eed\u65f6\u95f4\u6216\u8005\u4f7f\u7528\u8fd9\u4e9b\u65f6\u95f4\u8fdb\u884c\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u6599\u4e4b\u5916\u7684\u884c\u4e3a\u3002\u901a\u8fc7\u4f7f\u7528 monotonic() \u51fd\u6570\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e9b\u60c5\u51b5\uff0c\u56e0\u4e3a monotonic() \u51fd\u6570\u603b\u662f\u8fd4\u56de\u524d\u5411\u7684\u65f6\u95f4\u503c\u3002 start = time . monotonic () time . sleep ( 0.1 ) end = time . monotonic () print ( 'start : {:>9.2f} ' . format ( start )) print ( 'end : {:>9.2f} ' . format ( end )) print ( 'span : {:>9.2f} ' . format ( end - start )) start : 1123921.73 end : 1123921.84 span : 0.11 \u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u5355\u8c03\u65f6\u949f\u7684\u8d77\u59cb\u70b9\u3002\u56e0\u6b64\uff0c \u53ea\u6709\u5728\u4f7f\u7528\u5176\u5b83\u65f6\u949f\u503c\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0c\u5355\u8c03\u65f6\u949f\u7684\u8fd4\u56de\u503c\u624d\u4f1a\u6709\u7528\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7761\u7720\u7684\u6301\u7eed\u65f6\u95f4\u5c31\u662f\u7528 monotonic() \u51fd\u6570\u6d4b\u91cf\u7684\u3002 \u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4 time() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6302\u949f\u65f6\u95f4\uff0c perf_counter() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4\u3002 perf_counter() \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53cd\u6620\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f7f\u7528\u7684\u5b9e\u9645\u65f6\u95f4\u3002 for i in range ( 4 ): time . sleep ( 1 ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . perf_counter ())) Mon Feb 3 21:17:39 2020 : 1580735859.086 516161.933 Mon Feb 3 21:17:40 2020 : 1580735860.087 516162.934 Mon Feb 3 21:17:41 2020 : 1580735861.088 516163.935 Mon Feb 3 21:17:42 2020 : 1580735862.089 516164.936 \u5982\u679c\u4f60\u60f3\u8981\u5728\u81ea\u5df1\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u589e\u52a0\u5355\u6b21\u5185\u5faa\u73af\u7684\u5faa\u73af\u5468\u671f\u6216\u8005\u663e\u8457\u5730\u589e\u52a0\u5faa\u73af\u7684\u603b\u6b21\u6570\uff0c\u624d\u53ef\u4ee5\u771f\u6b63\u5730\u770b\u5230\u65f6\u95f4\u5dee\u5f02\u3002\uff08\u5982\u679c\u5faa\u73af\u5468\u671f\u592a\u77ed\uff0c\u5faa\u73af\u6b21\u6570\u592a\u5c11\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u53d8\u5316\uff0c\u6574\u4e2a\u7a0b\u5e8f\u5c31\u7ed3\u675f\u4e86\u3002\uff09 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7a0b\u5e8f\u4ec0\u4e48\u4e8b\u60c5\u6ca1\u6709\u505a\uff0c\u5904\u7406\u5668\u65f6\u949f\u5c31\u4e0d\u4f1a\u6ef4\u7b54\u8ba1\u65f6\uff0c\u6216\u8005\u8ba1\u65f6\u91cf\u5f88\u5c0f\u3002 print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) for i in range ( 4 ): print ( 'Sleeping' ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) Mon Feb 3 21:17:42 2020 : 1580735862.112 516164.959 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.960 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 \u6027\u80fd\u8ba1\u6570\u5668 \u6709\u4e00\u4e2a\u9ad8\u5206\u8fa8\u7387\u7684\u5355\u8c03\u65f6\u949f\u6765\u8861\u91cf\u6027\u80fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u8981\u60f3\u786e\u5b9a\u6700\u4f73\u65f6\u949f\u6570\u636e\u6e90\uff0c\u9700\u8981\u4e00\u4e9b\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u77e5\u8bc6\uff0c\u8fd9\u4e9b\u77e5\u8bc6\u7531 Python \u4e2d\u7684 perf_counter() \u63d0\u4f9b\u3002 \u548c monotonic() \u51fd\u6570\u4e00\u6837\uff0c perf_counter() \u51fd\u6570\u7684\u65f6\u5143\uff08epoch\uff09\u662f\u672a\u5b9a\u4e49\u7684\u3002\u5e76\u4e14\uff0c\u51fd\u6570\u7684\u8fd9\u4e9b\u8fd4\u56de\u503c\u7528\u4e8e\u6bd4\u8f83\u548c\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u7528\u4f5c\u7edd\u5bf9\u65f6\u95f4\u3002 struct_time \u6309\u79d2\u8ba1\u6570\uff0c\u628a\u79d2\u4f5c\u4e3a\u5355\u4f4d\u6765\u5b58\u50a8\u65f6\u95f4\u5728\u67d0\u4e9b\u573a\u5408\u5f88\u9002\u7528\uff0c\u4f46\u6709\u65f6\u5019\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u7684\uff08\u6216\u8005\u8bf4\u7a0b\u5e8f\u611f\u5174\u8da3\u7684\uff09\u662f\u65e5\u671f\u7684\u4e0d\u540c\u5355\u4f4d\u6240\u5bf9\u5e94\u7684\u5404\u4e2a\u90e8\u5206\uff08\u6bd4\u5982\uff0c\u67d0\u5e74\u3001\u67d0\u6708\u7b49\uff09\u3002\u4e3a\u4e86\u8ba9\u65e5\u671f\u7684\u5404\u4e2a\u90e8\u5206\u4fbf\u4e8e\u8bbf\u95ee\uff0c time \u6a21\u5757\u5b9a\u4e49\u4e86 struct_time \uff0c\u5b83\u4ee5\u5404\u4e2a\u90e8\u5206\u5206\u79bb\u7684\u683c\u5f0f\u6765\u5b58\u50a8\u65e5\u671f\u548c\u65f6\u95f4\u503c\u3002 \u6709\u4e9b\u51fd\u6570\u4ee5 struct_time \u7c7b\u578b\u7684\u6570\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u6d6e\u70b9\u578b\u7684\u6570\u503c\u3002 gmtime() \u51fd\u6570\u8fd4\u56de\u5f53\u524d UTC 1 \u65f6\u95f4\uff08\u4e16\u754c\u6807\u51c6\u65f6\u95f4\uff09\u3002 localtime() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e0e\u5f53\u524d\u65f6\u533a\u7684\u5f53\u524d\u65f6\u95f4 \u3002 mktime() \u63a5\u6536\u4e00\u4e2a struct_time \u578b\u6570\u503c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\u6570\u503c\u3002 print ( time . gmtime ()) print ( \"\" ) print ( time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=13, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) \u4e0e\u65f6\u533a\u76f8\u5173\u7684\u5de5\u4f5c \u786e\u5b9a\u5f53\u524d\u65f6\u95f4\u7684\u51fd\u6570\u4f9d\u8d56\u4e8e\u65f6\u533a\u8bbe\u7f6e\uff0c\u65f6\u533a\u53ef\u4ee5\u7531\u7a0b\u5e8f\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u7684\u9ed8\u8ba4\u65f6\u533a\u8bbe\u7f6e\u3002\u6539\u53d8\u65f6\u533a\u5e76\u4e0d\u4f1a\u6539\u53d8\u5b9e\u9645\u7684\u65f6\u95f4\uff0c\u53ea\u662f\u6539\u53d8\u5b83\u7684\u8868\u73b0\u65b9\u5f0f\u3002 time \u6a21\u5757\u67094\u4e2a\u5c5e\u6027\u8bb0\u5f55\u4e86\u65f6\u533a\u7684\u4fe1\u606f\uff1a import os def show_zone_info (): print ( ' TZ :' , os . environ . get ( 'TZ' , '(not set)' )) print ( ' tzname:' , str ( time . tzname ) . encode ( 'latin-1' ) . decode ( 'gbk' )) print ( ' Zone : {} ( {} )' . format ( time . timezone , ( time . timezone / 3600 ))) print ( ' DST :' , time . daylight ) print ( ' ALZone : {} ( {} )' . format ( time . altzone , ( time . altzone / 3600 ))) print ( ' Time :' , time . ctime ()) print () show_zone_info () TZ : (not set) tzname: ('\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4', '\u4e2d\u56fd\u590f\u4ee4\u65f6') Zone : -28800 (-8.0) DST : 0 ALZone : -32400 (-9.0) Time : Mon Feb 3 21:17:42 2020 \u89e3\u6790\u548c\u683c\u5f0f\u5316\u65f6\u95f4 \u6709\u4e24\u4e2a\u51fd\u6570 \u2014\u2014 strptime() \u548c strftime() \u2014\u2014 \u53ef\u4ee5\u4f7f\u65f6\u95f4\u503c\u5728 struct_time \u8868\u793a\u548c\u5b57\u7b26\u4e32\u8868\u793a\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u3002\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u683c\u5f0f\u8bf4\u660e\u5217\u8868\u53ef\u4ee5\u7528\u6765\u652f\u6301\u4e0d\u540c\u683c\u5f0f\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5b8c\u6574\u7684\u5217\u8868\u8bb0\u5f55\u5728 time \u6a21\u5757\u7684\u5e93\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u5f53\u524d\u65f6\u95f4\u4ece\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u6362\u6210 struct_time \u5b9e\u4f8b\uff0c\u7136\u540e\u53c8\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 struct_time \u2192 \u6d6e\u70b9\u6570\u65f6\u95f4\uff08\u79d2\uff09 struct_time = time . localtime () print ( struct_time ) seconds = time . mktime ( struct_time ) print ( seconds ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 1580735862.0 \u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 struct_time \u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4 print ( time . time ()) time . ctime ( time . time ()) 1580735862.2027004 'Mon Feb 3 21:17:42 2020' \u5b57\u7b26\u4e32\u65f6\u95f4 \u2192 struct_time print ( time . ctime ( time . time ())) time . strptime ( time . ctime ( time . time ())) Mon Feb 3 21:17:42 2020 time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=-1) struct_time \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4 print ( time . localtime ()) time . strftime ( \" %a %b %d %H:%M:%S %Y\" , time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 'Mon Feb 03 21:17:42 2020' time . asctime ( time . localtime ()) 'Mon Feb 3 21:17:42 2020' 0\u65f6\u533a\u7684\u65f6\u95f4\u662fUTC\u65f6\u95f4\uff0cUTC\u65f6\u95f4\u548c\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\uff08GMT\uff09\u5f88\u63a5\u8fd1\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e24\u8005\u76f8\u4e92\u66ff\u4ee3\u4e0d\u4f1a\u51fa\u95ee\u9898\uff0c\u4f46\u4e25\u683c\u6765\u8bf4UTC\u548cGMT\u5e76\u4e0d\u76f8\u7b49\u3002 \u21a9","title":"6.3.time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#_1","text":"\u65f6\u949f\u7684\u5b9e\u73b0\u7ec6\u8282\u56e0\u5e73\u53f0\u800c\u5f02\u3002\u4f7f\u7528 \u201cget_clock_info ()\u201d \u6765\u8bbf\u95ee\u5173\u4e8e\u5f53\u524d\u65b9\u5f0f\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u65f6\u949f\u7684\u5206\u8fa8\u7387\u3002 \u5f53\u524dPython\u7248\u672c\u6240\u6709\u53ef\u7528\u7684\u65f6\u949f\u5982\u4e0b\uff1a available_clocks = [ ( 'clock' , time . clock ), ( 'monotonic' , time . monotonic ), ( 'perf_counter' , time . perf_counter ), ( 'process_time' , time . process_time ), ( 'time' , time . time ), ( 'thread_time' , time . thread_time ), ] for clock_name , func in available_clocks : print ( textwrap . dedent ( ''' \\ {name} : adjustable : {info.adjustable} implementation: {info.implementation} monotonic : {info.monotonic} resolution : {info.resolution} current : {current} ''' ) . format ( name = clock_name , info = time . get_clock_info ( clock_name ), current = func ()) ) clock: adjustable : False implementation: QueryPerformanceCounter() monotonic : True resolution : 1e-07 current : 516160.6853218 monotonic: adjustable : False implementation: GetTickCount64() monotonic : True resolution : 0.015625 current : 1123921.625 perf_counter: adjustable : False implementation: QueryPerformanceCounter() monotonic : True resolution : 1e-07 current : 516160.6890105 process_time: adjustable : False implementation: GetProcessTimes() monotonic : True resolution : 1e-07 current : 565.125 time: adjustable : True implementation: GetSystemTimeAsFileTime() monotonic : False resolution : 0.015625 current : 1580735857.8439054 thread_time: adjustable : False implementation: GetThreadTimes() monotonic : True resolution : 1e-07 current : 528.671875 Windows 10 \u7684\u8f93\u51fa\u663e\u793a\u5176 perf_counter \u548c clocks \u6a21\u5757\u8c03\u7528\u76f8\u540c\u7684\u5e95\u5c42\u3002clocks \u5728Python 3.8\u4f1a\u88ab\u79fb\u9664\u3002","title":"\u5404\u4e2a\u65f6\u949f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#time","text":"time \u6a21\u5757\u7684\u6838\u5fc3\u51fd\u6570\u4e4b\u4e00\u662f time() \uff0c\u5b83\u53ef\u4ee5\u628a\u4ece \u300cepoch\u300d \u5f00\u59cb\u4e4b\u540e\u7684\u79d2\u6570\u4ee5\u6d6e\u70b9\u6570\u7684\u683c\u5f0f\u8fd4\u56de\u3002 print ( 'The time is:' , time . time ()) print ( 'The time is:' , time . time_ns ()) The time is: 1580735857.8729014 The time is: 1580735857877901000 \u65f6\u5143 (epoch) \u662f\u6d4b\u91cf\u65f6\u95f4\u7684\u5f00\u59cb\uff0c\u5bf9\u4e8e Unix \u7cfb\u7edf\u6765\u8bf4\uff0c\u65f6\u5143\u662f 1970 \u5e74 1 \u6708 1 \u65e5 0 \u70b9\u3002 \u867d\u7136\u8be5\u6570\u503c\u4e00\u76f4\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4f46\u662f\u5b83\u7684\u5b9e\u9645\u7cbe\u5ea6\u662f\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684\u3002 \u867d\u7136\u6d6e\u70b9\u8868\u793a\u5728\u5b58\u50a8\u6216\u8005\u6bd4\u8f83\u65e5\u671f\u65f6\u975e\u5e38\u6709\u6548\uff0c\u4f46\u662f\uff0c\u5728\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u8868\u793a\u65f6\u5c31\u663e\u5f97\u6709\u70b9\u529b\u4e0d\u4ece\u5fc3\u3002\u5bf9\u4e8e\u8bb0\u5f55\u6216\u8005\u6253\u5370\u65f6\u95f4\uff0c ctime() \u53ef\u80fd\u4f1a\u66f4\u6709\u6548\u3002 ctime() \u5c06\u81eaepoch\u4ee5\u6765\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u7b49\u6548\u4e8e asctime(localtime(seconds)) \u3002\u5982\u679c\u65f6\u95f4\u5143\u7ec4\u4e0d\u5b58\u5728\uff0c\u5219\u4f7f\u7528localtime()\u8fd4\u56de\u7684\u5f53\u524d\u65f6\u95f4\u3002 print ( 'The time is:' , time . ctime ()) The time is: Mon Feb 3 21:17:37 2020","title":"\u6302\u949f\u65f6\u95f4\u2014\u2014time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#monotonic","text":"\u56e0\u4e3a time() \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u662f\u7cfb\u7edf\u65f6\u949f\uff0c\u5e76\u4e14\uff0c\u4e3a\u4e86\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u540c\u6b65\u65f6\u949f\uff0c\u7cfb\u7edf\u65f6\u949f\u53ef\u4ee5\u88ab\u7528\u6237\u6216\u8005\u662f\u7cfb\u7edf\u670d\u52a1\u66f4\u6539\uff1b\u6240\u4ee5\uff0c\u5728\u91cd\u590d\u8c03\u7528 time() \u51fd\u6570\u65f6\u4ea7\u751f\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u4f1a\u6709\u524d\u540e\u6ce2\u52a8\u3002\u5728\u6d4b\u91cf\u6301\u7eed\u65f6\u95f4\u6216\u8005\u4f7f\u7528\u8fd9\u4e9b\u65f6\u95f4\u8fdb\u884c\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u6599\u4e4b\u5916\u7684\u884c\u4e3a\u3002\u901a\u8fc7\u4f7f\u7528 monotonic() \u51fd\u6570\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e9b\u60c5\u51b5\uff0c\u56e0\u4e3a monotonic() \u51fd\u6570\u603b\u662f\u8fd4\u56de\u524d\u5411\u7684\u65f6\u95f4\u503c\u3002 start = time . monotonic () time . sleep ( 0.1 ) end = time . monotonic () print ( 'start : {:>9.2f} ' . format ( start )) print ( 'end : {:>9.2f} ' . format ( end )) print ( 'span : {:>9.2f} ' . format ( end - start )) start : 1123921.73 end : 1123921.84 span : 0.11 \u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u5355\u8c03\u65f6\u949f\u7684\u8d77\u59cb\u70b9\u3002\u56e0\u6b64\uff0c \u53ea\u6709\u5728\u4f7f\u7528\u5176\u5b83\u65f6\u949f\u503c\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0c\u5355\u8c03\u65f6\u949f\u7684\u8fd4\u56de\u503c\u624d\u4f1a\u6709\u7528\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7761\u7720\u7684\u6301\u7eed\u65f6\u95f4\u5c31\u662f\u7528 monotonic() \u51fd\u6570\u6d4b\u91cf\u7684\u3002","title":"\u5355\u8c03\u65f6\u949f\u2014\u2014monotonic"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#_2","text":"time() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6302\u949f\u65f6\u95f4\uff0c perf_counter() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4\u3002 perf_counter() \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53cd\u6620\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f7f\u7528\u7684\u5b9e\u9645\u65f6\u95f4\u3002 for i in range ( 4 ): time . sleep ( 1 ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . perf_counter ())) Mon Feb 3 21:17:39 2020 : 1580735859.086 516161.933 Mon Feb 3 21:17:40 2020 : 1580735860.087 516162.934 Mon Feb 3 21:17:41 2020 : 1580735861.088 516163.935 Mon Feb 3 21:17:42 2020 : 1580735862.089 516164.936 \u5982\u679c\u4f60\u60f3\u8981\u5728\u81ea\u5df1\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u589e\u52a0\u5355\u6b21\u5185\u5faa\u73af\u7684\u5faa\u73af\u5468\u671f\u6216\u8005\u663e\u8457\u5730\u589e\u52a0\u5faa\u73af\u7684\u603b\u6b21\u6570\uff0c\u624d\u53ef\u4ee5\u771f\u6b63\u5730\u770b\u5230\u65f6\u95f4\u5dee\u5f02\u3002\uff08\u5982\u679c\u5faa\u73af\u5468\u671f\u592a\u77ed\uff0c\u5faa\u73af\u6b21\u6570\u592a\u5c11\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u53d8\u5316\uff0c\u6574\u4e2a\u7a0b\u5e8f\u5c31\u7ed3\u675f\u4e86\u3002\uff09 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7a0b\u5e8f\u4ec0\u4e48\u4e8b\u60c5\u6ca1\u6709\u505a\uff0c\u5904\u7406\u5668\u65f6\u949f\u5c31\u4e0d\u4f1a\u6ef4\u7b54\u8ba1\u65f6\uff0c\u6216\u8005\u8ba1\u65f6\u91cf\u5f88\u5c0f\u3002 print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) for i in range ( 4 ): print ( 'Sleeping' ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) Mon Feb 3 21:17:42 2020 : 1580735862.112 516164.959 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.960 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961","title":"\u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#_3","text":"\u6709\u4e00\u4e2a\u9ad8\u5206\u8fa8\u7387\u7684\u5355\u8c03\u65f6\u949f\u6765\u8861\u91cf\u6027\u80fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u8981\u60f3\u786e\u5b9a\u6700\u4f73\u65f6\u949f\u6570\u636e\u6e90\uff0c\u9700\u8981\u4e00\u4e9b\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u77e5\u8bc6\uff0c\u8fd9\u4e9b\u77e5\u8bc6\u7531 Python \u4e2d\u7684 perf_counter() \u63d0\u4f9b\u3002 \u548c monotonic() \u51fd\u6570\u4e00\u6837\uff0c perf_counter() \u51fd\u6570\u7684\u65f6\u5143\uff08epoch\uff09\u662f\u672a\u5b9a\u4e49\u7684\u3002\u5e76\u4e14\uff0c\u51fd\u6570\u7684\u8fd9\u4e9b\u8fd4\u56de\u503c\u7528\u4e8e\u6bd4\u8f83\u548c\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u7528\u4f5c\u7edd\u5bf9\u65f6\u95f4\u3002","title":"\u6027\u80fd\u8ba1\u6570\u5668"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#struct_time","text":"\u6309\u79d2\u8ba1\u6570\uff0c\u628a\u79d2\u4f5c\u4e3a\u5355\u4f4d\u6765\u5b58\u50a8\u65f6\u95f4\u5728\u67d0\u4e9b\u573a\u5408\u5f88\u9002\u7528\uff0c\u4f46\u6709\u65f6\u5019\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u7684\uff08\u6216\u8005\u8bf4\u7a0b\u5e8f\u611f\u5174\u8da3\u7684\uff09\u662f\u65e5\u671f\u7684\u4e0d\u540c\u5355\u4f4d\u6240\u5bf9\u5e94\u7684\u5404\u4e2a\u90e8\u5206\uff08\u6bd4\u5982\uff0c\u67d0\u5e74\u3001\u67d0\u6708\u7b49\uff09\u3002\u4e3a\u4e86\u8ba9\u65e5\u671f\u7684\u5404\u4e2a\u90e8\u5206\u4fbf\u4e8e\u8bbf\u95ee\uff0c time \u6a21\u5757\u5b9a\u4e49\u4e86 struct_time \uff0c\u5b83\u4ee5\u5404\u4e2a\u90e8\u5206\u5206\u79bb\u7684\u683c\u5f0f\u6765\u5b58\u50a8\u65e5\u671f\u548c\u65f6\u95f4\u503c\u3002 \u6709\u4e9b\u51fd\u6570\u4ee5 struct_time \u7c7b\u578b\u7684\u6570\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u6d6e\u70b9\u578b\u7684\u6570\u503c\u3002 gmtime() \u51fd\u6570\u8fd4\u56de\u5f53\u524d UTC 1 \u65f6\u95f4\uff08\u4e16\u754c\u6807\u51c6\u65f6\u95f4\uff09\u3002 localtime() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e0e\u5f53\u524d\u65f6\u533a\u7684\u5f53\u524d\u65f6\u95f4 \u3002 mktime() \u63a5\u6536\u4e00\u4e2a struct_time \u578b\u6570\u503c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\u6570\u503c\u3002 print ( time . gmtime ()) print ( \"\" ) print ( time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=13, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0)","title":"struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#_4","text":"\u786e\u5b9a\u5f53\u524d\u65f6\u95f4\u7684\u51fd\u6570\u4f9d\u8d56\u4e8e\u65f6\u533a\u8bbe\u7f6e\uff0c\u65f6\u533a\u53ef\u4ee5\u7531\u7a0b\u5e8f\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u7684\u9ed8\u8ba4\u65f6\u533a\u8bbe\u7f6e\u3002\u6539\u53d8\u65f6\u533a\u5e76\u4e0d\u4f1a\u6539\u53d8\u5b9e\u9645\u7684\u65f6\u95f4\uff0c\u53ea\u662f\u6539\u53d8\u5b83\u7684\u8868\u73b0\u65b9\u5f0f\u3002 time \u6a21\u5757\u67094\u4e2a\u5c5e\u6027\u8bb0\u5f55\u4e86\u65f6\u533a\u7684\u4fe1\u606f\uff1a import os def show_zone_info (): print ( ' TZ :' , os . environ . get ( 'TZ' , '(not set)' )) print ( ' tzname:' , str ( time . tzname ) . encode ( 'latin-1' ) . decode ( 'gbk' )) print ( ' Zone : {} ( {} )' . format ( time . timezone , ( time . timezone / 3600 ))) print ( ' DST :' , time . daylight ) print ( ' ALZone : {} ( {} )' . format ( time . altzone , ( time . altzone / 3600 ))) print ( ' Time :' , time . ctime ()) print () show_zone_info () TZ : (not set) tzname: ('\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4', '\u4e2d\u56fd\u590f\u4ee4\u65f6') Zone : -28800 (-8.0) DST : 0 ALZone : -32400 (-9.0) Time : Mon Feb 3 21:17:42 2020","title":"\u4e0e\u65f6\u533a\u76f8\u5173\u7684\u5de5\u4f5c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#_5","text":"\u6709\u4e24\u4e2a\u51fd\u6570 \u2014\u2014 strptime() \u548c strftime() \u2014\u2014 \u53ef\u4ee5\u4f7f\u65f6\u95f4\u503c\u5728 struct_time \u8868\u793a\u548c\u5b57\u7b26\u4e32\u8868\u793a\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u3002\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u683c\u5f0f\u8bf4\u660e\u5217\u8868\u53ef\u4ee5\u7528\u6765\u652f\u6301\u4e0d\u540c\u683c\u5f0f\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5b8c\u6574\u7684\u5217\u8868\u8bb0\u5f55\u5728 time \u6a21\u5757\u7684\u5e93\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u5f53\u524d\u65f6\u95f4\u4ece\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u6362\u6210 struct_time \u5b9e\u4f8b\uff0c\u7136\u540e\u53c8\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f\u3002","title":"\u89e3\u6790\u548c\u683c\u5f0f\u5316\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#struct_time_1","text":"struct_time = time . localtime () print ( struct_time ) seconds = time . mktime ( struct_time ) print ( seconds ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 1580735862.0","title":"struct_time \u2192 \u6d6e\u70b9\u6570\u65f6\u95f4\uff08\u79d2\uff09"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#struct_time_2","text":"","title":"\u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#_6","text":"print ( time . time ()) time . ctime ( time . time ()) 1580735862.2027004 'Mon Feb 3 21:17:42 2020'","title":"\u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#struct_time_3","text":"print ( time . ctime ( time . time ())) time . strptime ( time . ctime ( time . time ())) Mon Feb 3 21:17:42 2020 time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=-1)","title":"\u5b57\u7b26\u4e32\u65f6\u95f4 \u2192 struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.3.time.html#struct_time_4","text":"print ( time . localtime ()) time . strftime ( \" %a %b %d %H:%M:%S %Y\" , time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 'Mon Feb 03 21:17:42 2020' time . asctime ( time . localtime ()) 'Mon Feb 3 21:17:42 2020' 0\u65f6\u533a\u7684\u65f6\u95f4\u662fUTC\u65f6\u95f4\uff0cUTC\u65f6\u95f4\u548c\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\uff08GMT\uff09\u5f88\u63a5\u8fd1\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e24\u8005\u76f8\u4e92\u66ff\u4ee3\u4e0d\u4f1a\u51fa\u95ee\u9898\uff0c\u4f46\u4e25\u683c\u6765\u8bf4UTC\u548cGMT\u5e76\u4e0d\u76f8\u7b49\u3002 \u21a9","title":"struct_time \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) # from tools import Help as H import datetime time\uff1a\u65f6\u95f4 time \u5b9e\u4f8b\u53ea\u4fdd\u5b58\u65f6\u95f4\u503c\uff0c\u800c\u4e0d\u4fdd\u5b58\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u65e5\u671f\u503c\u3002 t = datetime . time ( hour = 1 , minute = 2 , second = 3 , microsecond = 4 , tzinfo = None ) print ( t ) print ( 'hour :' , t . hour ) print ( 'minute :' , t . minute ) print ( 'second :' , t . second ) print ( 'microsecond:' , t . microsecond ) print ( 'tzinfo :' , t . tzinfo ) 01:02:03.000004 hour : 1 minute : 2 second : 3 microsecond: 4 tzinfo : None min \u548c max \u7c7b\u7684\u5c5e\u6027\u4ee3\u8868\u4e00\u5929\u5185\u7684\u6709\u6548\u65f6\u95f4\u8303\u56f4\u3002 time \u7684\u7cbe\u5ea6\uff08\u5373 time \u80fd\u591f\u6709\u6548\u8868\u793a\u7684\u6700\u5c0f\u65f6\u95f4\u95f4\u9694\uff09\u88ab\u9650\u5236\u4e3a1\u5fae\u79d2\u3002 print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . time . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . time . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . time . resolution ) \u6700\u5c0f\u65f6\u95f4 min: 00:00:00 \u6700\u5927\u65f6\u95f4 min: 23:59:59.999999 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 0:00:00.000001 \u5176\u4ed6\u6784\u9020\u5668\uff1a datetime.date.today() \uff1a datetime . date . today () datetime.date(2020, 2, 3) date\uff1a\u65e5\u671f \u65e5\u5386\u65e5\u671f\u53ef\u4ee5\u7528 date \u7c7b\u6765\u63cf\u8ff0\u3002 date \u7c7b\u5b9e\u4f8b\u5316\u540e\u6709\u5c5e\u6027 year \uff0c month \uff0c\u548c day \u3002 # \u5982\u679c\u53c2\u6570\u8d85\u51fa\u9650\u5236\u8303\u56f4\uff0c\u629b\u51faValueError\u5f02\u5e38 MYdate = datetime . date ( year = 2019 , month = 3 , day = 22 ) print ( MYdate ) print ( 'year :' , MYdate . year ) print ( 'month :' , MYdate . month ) print ( 'day :' , MYdate . day ) print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . date . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . date . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . date . resolution ) 2019-03-22 year : 2019 month : 3 day : 22 \u6700\u5c0f\u65f6\u95f4 min: 0001-01-01 \u6700\u5927\u65f6\u95f4 min: 9999-12-31 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 1 day, 0:00:00 \u5176\u4ed6\u6784\u9020\u51fd\u6570 import time t = time . time () \u4ecetimestamp\u6784\u9020date datetime . date . fromtimestamp ( t ) datetime.date(2020, 2, 3) \u4eceproleptic Gregorian ordinal\u6784\u9020date datetime . date . fromordinal ( 737140 ) datetime.date(2019, 3, 22) \u4eceISO\u683c\u5f0f\u7684\u65e5\u671f\u6784\u9020date datetime . date . fromisoformat ( '2019-03-22' ) datetime.date(2019, 3, 22) date \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4 print ( datetime . date . ctime ( MYdate )) print ( datetime . date . strftime ( MYdate , \" %a %b %d %H:%M:%S %Y\" )) Fri Mar 22 00:00:00 2019 Fri Mar 22 00:00:00 2019 date \u2192 struct_time datetime . date . timetuple ( MYdate ) time.struct_time(tm_year=2019, tm_mon=3, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=81, tm_isdst=-1) \u65e5\u671f\u51fd\u6570 Return a 3-tuple containing ISO year, week number, and weekday. datetime . date . isocalendar ( MYdate ) (2019, 12, 5) Return the date formatted according to ISO.This is 'YYYY-MM-DD'. datetime . date . isoformat ( MYdate ) '2019-03-22' \"Return day of the week, where Monday == 1 ... Sunday == 7.\" datetime . date . isoweekday ( MYdate ) 5 \"Return day of the week, where Monday == 0 ... Sunday == 6.\" datetime . date . weekday ( MYdate ) 4 Return proleptic Gregorian ordinal for the year, month and day. datetime . date . toordinal ( MYdate ) 737140 datetime\uff1a\u65e5\u671f\u548c\u65f6\u95f4 date_time = datetime . datetime ( year = 2020 , month = 3 , day = 23 , hour = 10 , minute = 15 , second = 30 , microsecond = 4 , tzinfo = None ) \u5176\u4ed6\u6784\u9020\u51fd\u6570 datetime . datetime . utcnow () datetime . datetime . now () datetime . datetime . today () datetime . datetime . fromisoformat ( '2019-03-22-10:15:30' ) datetime . datetime . fromordinal ( 737140 ) datetime . datetime . fromtimestamp ( time . time ()) datetime . datetime . utcfromtimestamp ( time . time ()) datetime.datetime(2020, 2, 3, 13, 11, 31, 149891) datetime \u2192 date date_time = datetime . datetime . now () datetime . datetime . date ( date_time ) datetime.date(2020, 2, 3) datetime \u2192 time datetime . datetime . time ( date_time ) datetime.time(21, 11, 31, 172888) date and time \u2192 datetime t1 = datetime . date . today () t2 = datetime . time ( hour = 10 , minute = 15 , second = 30 ) datetime . datetime . combine ( t1 , t2 ) datetime.datetime(2020, 2, 3, 10, 15, 30) datetime \u2192 time string datetime . datetime . ctime ( date_time ) print ( datetime . datetime . strftime ( date_time , \" %a %b %d %H:%M:%S %Y\" )) Mon Feb 03 21:11:31 2020 time string \u2192 datetime datetime . datetime . strptime ( 'Mon Feb 3 19:56:21 2020' , \" %a %b %d %H:%M:%S %Y\" ) datetime.datetime(2020, 2, 3, 19, 56, 21) datetime \u2192 timestamp datetime . datetime . timestamp ( date_time ) 1580735491.172888 datetime \u2192 timetuple datetime . datetime . timetuple ( date_time ) datetime . datetime . utctimetuple ( date_time ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=11, tm_sec=31, tm_wday=0, tm_yday=34, tm_isdst=0) \u5176\u4ed6\u51fd\u6570 datetime . datetime . toordinal ( date_time ) datetime . datetime . isocalendar ( date_time ) datetime . datetime . isoformat ( date_time ) datetime . datetime . isoweekday ( date_time ) datetime . datetime . weekday ( date_time ) datetime . datetime . astimezone ( date_time , tz = None ) datetime . datetime . dst ( date_time ) date_time . astimezone ( tz = None ) datetime.datetime(2020, 2, 3, 21, 11, 31, 172888, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), '?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0??')) ['astimezone', 'dst', 'replace', 'timetz', 'tzname', 'utcoffset'] timedelta \u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a datetime \u5bf9\u8c61\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u8ba1\u7b97\u672a\u6765\u548c\u8fc7\u53bb\u7684\u65e5\u671f\uff0c\u6216\u8005\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a datetime \u5bf9\u8c61\u548c\u4e00\u4e2a timedelta \u5bf9\u8c61\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u3002\u4e0d\u540c\u7684\u65e5\u671f\u76f8\u51cf\u4f1a\u4ea7\u751f\u4e00\u4e2a timedelta \uff0c\u4e00\u4e2a\u65e5\u671f\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u4e00\u4e2a timedelta \u4f1a\u4ea7\u751f\u53e6\u4e00\u4e2a\u65e5\u671f\u3002 timedelta \u7684\u5185\u90e8\u503c\u4ee5\u5929\u3001\u79d2\u548c\u5fae\u79d2\u7684\u5f62\u5f0f\u5b58\u50a8\u3002 print ( 'microseconds:' , datetime . timedelta ( microseconds = 1 )) print ( 'milliseconds:' , datetime . timedelta ( milliseconds = 1 )) print ( 'seconds :' , datetime . timedelta ( seconds = 1 )) print ( 'minutes :' , datetime . timedelta ( minutes = 1 )) print ( 'hours :' , datetime . timedelta ( hours = 1 )) print ( 'days :' , datetime . timedelta ( days = 1 )) print ( 'weeks :' , datetime . timedelta ( weeks = 1 )) microseconds: 0:00:00.000001 milliseconds: 0:00:00.001000 seconds : 0:00:01 minutes : 0:01:00 hours : 1:00:00 days : 1 day, 0:00:00 weeks : 7 days, 0:00:00 \u53ef\u4ee5\u4f7f\u7528 total_seconds() \u5c06 timedelta \u7684\u6574\u4e2a\u6301\u7eed\u65f6\u95f4\u68c0\u7d22\u4e3a\u79d2\u6570\u3002 for delta in [ datetime . timedelta ( microseconds = 1 ), datetime . timedelta ( milliseconds = 1 ), datetime . timedelta ( seconds = 1 ), datetime . timedelta ( minutes = 1 ), datetime . timedelta ( hours = 1 ), datetime . timedelta ( days = 1 ), datetime . timedelta ( weeks = 1 ), ]: print ( ' {:15} = {:8} seconds' . format ( str ( delta ), delta . total_seconds ()) ) 0:00:00.000001 = 1e-06 seconds 0:00:00.001000 = 0.001 seconds 0:00:01 = 1.0 seconds 0:01:00 = 60.0 seconds 1:00:00 = 3600.0 seconds 1 day, 0:00:00 = 86400.0 seconds 7 days, 0:00:00 = 604800.0 seconds \u65e5\u671f\u7b97\u672f\u8fd0\u7b97 one_day = datetime . timedelta ( days = 1 ) today = datetime . date . today () yesterday = today - one_day tomorrow = today + one_day print ( type ( today )) type ( yesterday ) == type ( today ) == type ( tomorrow ) <class 'datetime.date'> True timedelta \u5bf9\u8c61\u8fd8\u652f\u6301\u4e0e\u6574\u578b\u6570\u3001\u6d6e\u70b9\u6570\u548c\u5176\u5b83 timedelta \u5b9e\u4f8b\u7684\u7b97\u672f\u8fd0\u7b97\u3002 one_day = datetime . timedelta ( days = 1 ) print ( '1 day :' , one_day ) print ( '5 days :' , one_day * 5 ) print ( '1.5 days :' , one_day * 1.5 ) print ( '1/4 day :' , one_day / 4 ) # \u5047\u8bbe\u5348\u996d\u65f6\u95f4\u4e3a 1 \u5c0f\u65f6 work_day = datetime . timedelta ( hours = 7 ) meeting_length = datetime . timedelta ( hours = 1 ) print ( 'meetings per day :' , work_day / meeting_length ) 1 day : 1 day, 0:00:00 5 days : 5 days, 0:00:00 1.5 days : 1 day, 12:00:00 1/4 day : 6:00:00 meetings per day : 7.0 \u6bd4\u8f83\u6570\u503c print ( 'Times:' ) t1 = datetime . time ( 12 , 55 , 0 ) print ( ' t1:' , t1 ) t2 = datetime . time ( 13 , 5 , 0 ) print ( ' t2:' , t2 ) print ( ' t1 < t2:' , t1 < t2 ) print () print ( 'Dates:' ) d1 = datetime . date . today () print ( ' d1:' , d1 ) d2 = datetime . date . today () + datetime . timedelta ( days = 1 ) print ( ' d2:' , d2 ) print ( ' d1 > d2:' , d1 > d2 ) Times: t1: 12:55:00 t2: 13:05:00 t1 < t2: True Dates: d1: 2020-02-03 d2: 2020-02-04 d1 > d2: False \u683c\u5f0f\u5316\u548c\u89e3\u6790 datetime \u5bf9\u8c61\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u6cd5\u91c7\u7528\u7684\u662f ISO-8601 \u683c\u5f0f ( YYYY-MM-DDTHH:MM:SS.mmmmmm )\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 strftime() \u51fd\u6570\u751f\u6210\u5176\u5b83\u7684\u683c\u5f0f\u3002 format = \" %a %b %d %H:%M:%S %Y\" today = datetime . datetime . today () print ( 'ISO :' , today ) s = today . strftime ( format ) print ( 'strftime:' , s ) d = datetime . datetime . strptime ( s , format ) print ( 'strptime:' , d . strftime ( format )) ISO : 2020-02-03 21:11:31.684806 strftime: Mon Feb 03 21:11:31 2020 strptime: Mon Feb 03 21:11:31 2020 \u76f8\u540c\u7684\u683c\u5f0f\u5316\u4ee3\u7801\u53ef\u4ee5\u4e0e Python \u7684 string formatting mini-language \u4e00\u8d77\u4f7f\u7528\uff0c\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u89c4\u8303\u4e2d\u7684 : \u540e\u9762\u3002 today = datetime . datetime . today () print ( 'ISO :' , today ) print ( 'format(): {: %a %b %d %H:%M:%S %Y}' . format ( today )) ISO : 2020-02-03 21:11:31.729803 format(): Mon Feb 03 21:11:31 2020 \u6bcf\u4e00\u4e2a datetime \u683c\u5f0f\u4ee3\u7801\u5747\u4ee5 % \u4e3a\u524d\u7f00\uff0c\u5e76\u4e14\u540e\u9762\u7684\u5192\u53f7\u88ab\u5f53\u4f5c\u662f\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u3002 \u7b26\u53f7 \u542b\u4e49 \u4f8b\u5b50 %a \u661f\u671f\u7684\u7b80\u5199 'Wed' %A \u661f\u671f\u7684\u5b8c\u6574\u5199\u6cd5 'Wednesday' %w \u661f\u671f\u4ee3\u53f7 -- \u4ece 0 (\u5468\u65e5) \u5230 6 (\u5468\u516d) '3' %d \u6708\u7684\u7b2c\u51e0\u65e5 (\u4e2a\u4f4d\u6570\u65f6\uff0c\u5341\u4f4d\u8865 0) '13' %b \u6708\u4efd\u7684\u7b80\u5199 'Jan' %B \u6708\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 'January' %m \u6708\u4efd '01' %y \u5e74\u4efd\u7684\u7f29\u5199 '16' %Y \u5e74\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 '2016' %H \u5c0f\u65f6\uff08 24 \u5c0f\u65f6\u5236\uff09 '17' %I \u5c0f\u65f6\uff08 12 \u5c0f\u65f6\u5236\uff09 '05' %p AM/PM 'PM' %M \u5206\u949f '00' %S \u79d2 '00' %f \u5fae\u79d2 '000000' %z \u8bbe\u7f6e\u65f6\u533a\uff08\u9002\u7528\u4e8e\u5bf9\u65f6\u533a\u654f\u611f\u7684\u7c7b\uff09 '-0500' %Z \u65f6\u533a\u540d 'EST' %j \u4e00\u5e74\u7684\u7b2c\u51e0\u5929 '013' %W \u4e00\u5e74\u7684\u7b2c\u51e0\u5468 '02' %c \u5f53\u5730\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4 'Wed Jan 13 17:00:00 2016' %x \u5f53\u5730\u5f53\u524d\u65e5\u671f '01/13/16' %X \u5f53\u5730\u5f53\u524d\u65f6\u95f4 '17:00:00' %% \u4e00\u4e2a % '%' \u65f6\u533a \u5728 datetime \u4e2d\uff0c\u65f6\u533a\u7531 tzinfo \u7684\u5b50\u7c7b\u8868\u793a\u3002\u7531\u4e8e tzinfo \u662f\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\uff0c\u56e0\u6b64\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b\u3002\u4e3a\u4e86\u8ba9\u8fd9\u4e2a\u7c7b\u80fd\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u8981\u4e3a\u4e00\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u9002\u5f53\u7684\u5b9e\u73b0\u3002 \u5728 timezone \u7c7b\u4e2d\uff0c datetime \u786e\u5b9e\u5305\u542b\u4e86\u4e00\u4e2a\u7565\u4e3a\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u5b83\u4f7f\u7528 UTC \u7684\u56fa\u5b9a\u504f\u79fb\u91cf\uff0c\u5e76\u4e14\u4e0d\u652f\u6301\u4e00\u5e74\u4e2d\u4e0d\u540c\u65e5\u671f\u7684\u4e0d\u540c\u504f\u79fb\u91cf\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u590f\u4ee4\u65f6\u7684\u5730\u65b9\u6216\u8005 UTC \u7684\u504f\u79fb\u91cf\u4f1a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u5730\u65b9\u3002 min6 = datetime . timezone ( datetime . timedelta ( hours =- 6 )) plus6 = datetime . timezone ( datetime . timedelta ( hours = 6 )) d = datetime . datetime . now ( min6 ) print ( min6 , ':' , d ) print ( datetime . timezone . utc , ':' , d . astimezone ( datetime . timezone . utc )) print ( plus6 , ':' , d . astimezone ( plus6 )) # \u8f6c\u6362\u4e3a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 d_system = d . astimezone () print ( d_system . tzinfo , ' :' , d_system ) UTC-06:00 : 2020-02-03 07:11:31.756794-06:00 UTC : 2020-02-03 13:11:31.756794+00:00 UTC+06:00 : 2020-02-03 19:11:31.756794+06:00 ?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0?? : 2020-02-03 21:11:31.756794+08:00 \u8981\u60f3\u5c06 datetime \u503c\u4ece\u4e00\u4e2a\u65f6\u533a\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u65f6\u533a\uff0c\u53ef\u4ee5\u4f7f\u7528 astimezone() \u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728 UTC \u7684\u4e24\u8fb9\u5206\u522b\u663e\u793a\u4e86 6 \u5c0f\u65f6\u7684\u65f6\u533a\uff0c\u5e76\u4e14\u8fd8\u4f7f\u7528 datetime.timezone \u4e2d\u7684 utc \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u8003\u3002\u6700\u540e\u7684\u8f93\u51fa\u884c\u663e\u793a\u7cfb\u7edf\u65f6\u533a\u4e2d\u7684\u503c\uff0c\u8be5\u503c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 astimezone() \u51fd\u6570\u83b7\u5f97\uff0c\u8c03\u7528\u65f6\u4e0d\u9700\u8981\u53c2\u6570\u3002","title":"6.4.datetime"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#time","text":"time \u5b9e\u4f8b\u53ea\u4fdd\u5b58\u65f6\u95f4\u503c\uff0c\u800c\u4e0d\u4fdd\u5b58\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u65e5\u671f\u503c\u3002 t = datetime . time ( hour = 1 , minute = 2 , second = 3 , microsecond = 4 , tzinfo = None ) print ( t ) print ( 'hour :' , t . hour ) print ( 'minute :' , t . minute ) print ( 'second :' , t . second ) print ( 'microsecond:' , t . microsecond ) print ( 'tzinfo :' , t . tzinfo ) 01:02:03.000004 hour : 1 minute : 2 second : 3 microsecond: 4 tzinfo : None min \u548c max \u7c7b\u7684\u5c5e\u6027\u4ee3\u8868\u4e00\u5929\u5185\u7684\u6709\u6548\u65f6\u95f4\u8303\u56f4\u3002 time \u7684\u7cbe\u5ea6\uff08\u5373 time \u80fd\u591f\u6709\u6548\u8868\u793a\u7684\u6700\u5c0f\u65f6\u95f4\u95f4\u9694\uff09\u88ab\u9650\u5236\u4e3a1\u5fae\u79d2\u3002 print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . time . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . time . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . time . resolution ) \u6700\u5c0f\u65f6\u95f4 min: 00:00:00 \u6700\u5927\u65f6\u95f4 min: 23:59:59.999999 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 0:00:00.000001 \u5176\u4ed6\u6784\u9020\u5668\uff1a datetime.date.today() \uff1a datetime . date . today () datetime.date(2020, 2, 3)","title":"time\uff1a\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#date","text":"\u65e5\u5386\u65e5\u671f\u53ef\u4ee5\u7528 date \u7c7b\u6765\u63cf\u8ff0\u3002 date \u7c7b\u5b9e\u4f8b\u5316\u540e\u6709\u5c5e\u6027 year \uff0c month \uff0c\u548c day \u3002 # \u5982\u679c\u53c2\u6570\u8d85\u51fa\u9650\u5236\u8303\u56f4\uff0c\u629b\u51faValueError\u5f02\u5e38 MYdate = datetime . date ( year = 2019 , month = 3 , day = 22 ) print ( MYdate ) print ( 'year :' , MYdate . year ) print ( 'month :' , MYdate . month ) print ( 'day :' , MYdate . day ) print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . date . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . date . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . date . resolution ) 2019-03-22 year : 2019 month : 3 day : 22 \u6700\u5c0f\u65f6\u95f4 min: 0001-01-01 \u6700\u5927\u65f6\u95f4 min: 9999-12-31 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 1 day, 0:00:00","title":"date\uff1a\u65e5\u671f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_1","text":"import time t = time . time () \u4ecetimestamp\u6784\u9020date datetime . date . fromtimestamp ( t ) datetime.date(2020, 2, 3) \u4eceproleptic Gregorian ordinal\u6784\u9020date datetime . date . fromordinal ( 737140 ) datetime.date(2019, 3, 22) \u4eceISO\u683c\u5f0f\u7684\u65e5\u671f\u6784\u9020date datetime . date . fromisoformat ( '2019-03-22' ) datetime.date(2019, 3, 22)","title":"\u5176\u4ed6\u6784\u9020\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#date_1","text":"print ( datetime . date . ctime ( MYdate )) print ( datetime . date . strftime ( MYdate , \" %a %b %d %H:%M:%S %Y\" )) Fri Mar 22 00:00:00 2019 Fri Mar 22 00:00:00 2019","title":"date \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#date-struct_time","text":"datetime . date . timetuple ( MYdate ) time.struct_time(tm_year=2019, tm_mon=3, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=81, tm_isdst=-1)","title":"date \u2192 struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_2","text":"Return a 3-tuple containing ISO year, week number, and weekday. datetime . date . isocalendar ( MYdate ) (2019, 12, 5) Return the date formatted according to ISO.This is 'YYYY-MM-DD'. datetime . date . isoformat ( MYdate ) '2019-03-22' \"Return day of the week, where Monday == 1 ... Sunday == 7.\" datetime . date . isoweekday ( MYdate ) 5 \"Return day of the week, where Monday == 0 ... Sunday == 6.\" datetime . date . weekday ( MYdate ) 4 Return proleptic Gregorian ordinal for the year, month and day. datetime . date . toordinal ( MYdate ) 737140","title":"\u65e5\u671f\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#datetime","text":"date_time = datetime . datetime ( year = 2020 , month = 3 , day = 23 , hour = 10 , minute = 15 , second = 30 , microsecond = 4 , tzinfo = None )","title":"datetime\uff1a\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_3","text":"datetime . datetime . utcnow () datetime . datetime . now () datetime . datetime . today () datetime . datetime . fromisoformat ( '2019-03-22-10:15:30' ) datetime . datetime . fromordinal ( 737140 ) datetime . datetime . fromtimestamp ( time . time ()) datetime . datetime . utcfromtimestamp ( time . time ()) datetime.datetime(2020, 2, 3, 13, 11, 31, 149891)","title":"\u5176\u4ed6\u6784\u9020\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#datetime-date","text":"date_time = datetime . datetime . now () datetime . datetime . date ( date_time ) datetime.date(2020, 2, 3)","title":"datetime \u2192 date"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#datetime-time","text":"datetime . datetime . time ( date_time ) datetime.time(21, 11, 31, 172888)","title":"datetime \u2192 time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#date-and-time-datetime","text":"t1 = datetime . date . today () t2 = datetime . time ( hour = 10 , minute = 15 , second = 30 ) datetime . datetime . combine ( t1 , t2 ) datetime.datetime(2020, 2, 3, 10, 15, 30)","title":"date and time \u2192 datetime"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#datetime-time-string","text":"datetime . datetime . ctime ( date_time ) print ( datetime . datetime . strftime ( date_time , \" %a %b %d %H:%M:%S %Y\" )) Mon Feb 03 21:11:31 2020","title":"datetime \u2192 time string"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#time-string-datetime","text":"datetime . datetime . strptime ( 'Mon Feb 3 19:56:21 2020' , \" %a %b %d %H:%M:%S %Y\" ) datetime.datetime(2020, 2, 3, 19, 56, 21)","title":"time string \u2192 datetime"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#datetime-timestamp","text":"datetime . datetime . timestamp ( date_time ) 1580735491.172888","title":"datetime \u2192 timestamp"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#datetime-timetuple","text":"datetime . datetime . timetuple ( date_time ) datetime . datetime . utctimetuple ( date_time ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=11, tm_sec=31, tm_wday=0, tm_yday=34, tm_isdst=0)","title":"datetime \u2192 timetuple"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_4","text":"datetime . datetime . toordinal ( date_time ) datetime . datetime . isocalendar ( date_time ) datetime . datetime . isoformat ( date_time ) datetime . datetime . isoweekday ( date_time ) datetime . datetime . weekday ( date_time ) datetime . datetime . astimezone ( date_time , tz = None ) datetime . datetime . dst ( date_time ) date_time . astimezone ( tz = None ) datetime.datetime(2020, 2, 3, 21, 11, 31, 172888, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), '?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0??')) ['astimezone', 'dst', 'replace', 'timetz', 'tzname', 'utcoffset']","title":"\u5176\u4ed6\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#timedelta","text":"\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a datetime \u5bf9\u8c61\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u8ba1\u7b97\u672a\u6765\u548c\u8fc7\u53bb\u7684\u65e5\u671f\uff0c\u6216\u8005\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a datetime \u5bf9\u8c61\u548c\u4e00\u4e2a timedelta \u5bf9\u8c61\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u3002\u4e0d\u540c\u7684\u65e5\u671f\u76f8\u51cf\u4f1a\u4ea7\u751f\u4e00\u4e2a timedelta \uff0c\u4e00\u4e2a\u65e5\u671f\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u4e00\u4e2a timedelta \u4f1a\u4ea7\u751f\u53e6\u4e00\u4e2a\u65e5\u671f\u3002 timedelta \u7684\u5185\u90e8\u503c\u4ee5\u5929\u3001\u79d2\u548c\u5fae\u79d2\u7684\u5f62\u5f0f\u5b58\u50a8\u3002 print ( 'microseconds:' , datetime . timedelta ( microseconds = 1 )) print ( 'milliseconds:' , datetime . timedelta ( milliseconds = 1 )) print ( 'seconds :' , datetime . timedelta ( seconds = 1 )) print ( 'minutes :' , datetime . timedelta ( minutes = 1 )) print ( 'hours :' , datetime . timedelta ( hours = 1 )) print ( 'days :' , datetime . timedelta ( days = 1 )) print ( 'weeks :' , datetime . timedelta ( weeks = 1 )) microseconds: 0:00:00.000001 milliseconds: 0:00:00.001000 seconds : 0:00:01 minutes : 0:01:00 hours : 1:00:00 days : 1 day, 0:00:00 weeks : 7 days, 0:00:00 \u53ef\u4ee5\u4f7f\u7528 total_seconds() \u5c06 timedelta \u7684\u6574\u4e2a\u6301\u7eed\u65f6\u95f4\u68c0\u7d22\u4e3a\u79d2\u6570\u3002 for delta in [ datetime . timedelta ( microseconds = 1 ), datetime . timedelta ( milliseconds = 1 ), datetime . timedelta ( seconds = 1 ), datetime . timedelta ( minutes = 1 ), datetime . timedelta ( hours = 1 ), datetime . timedelta ( days = 1 ), datetime . timedelta ( weeks = 1 ), ]: print ( ' {:15} = {:8} seconds' . format ( str ( delta ), delta . total_seconds ()) ) 0:00:00.000001 = 1e-06 seconds 0:00:00.001000 = 0.001 seconds 0:00:01 = 1.0 seconds 0:01:00 = 60.0 seconds 1:00:00 = 3600.0 seconds 1 day, 0:00:00 = 86400.0 seconds 7 days, 0:00:00 = 604800.0 seconds","title":"timedelta"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_5","text":"one_day = datetime . timedelta ( days = 1 ) today = datetime . date . today () yesterday = today - one_day tomorrow = today + one_day print ( type ( today )) type ( yesterday ) == type ( today ) == type ( tomorrow ) <class 'datetime.date'> True timedelta \u5bf9\u8c61\u8fd8\u652f\u6301\u4e0e\u6574\u578b\u6570\u3001\u6d6e\u70b9\u6570\u548c\u5176\u5b83 timedelta \u5b9e\u4f8b\u7684\u7b97\u672f\u8fd0\u7b97\u3002 one_day = datetime . timedelta ( days = 1 ) print ( '1 day :' , one_day ) print ( '5 days :' , one_day * 5 ) print ( '1.5 days :' , one_day * 1.5 ) print ( '1/4 day :' , one_day / 4 ) # \u5047\u8bbe\u5348\u996d\u65f6\u95f4\u4e3a 1 \u5c0f\u65f6 work_day = datetime . timedelta ( hours = 7 ) meeting_length = datetime . timedelta ( hours = 1 ) print ( 'meetings per day :' , work_day / meeting_length ) 1 day : 1 day, 0:00:00 5 days : 5 days, 0:00:00 1.5 days : 1 day, 12:00:00 1/4 day : 6:00:00 meetings per day : 7.0","title":"\u65e5\u671f\u7b97\u672f\u8fd0\u7b97"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_6","text":"print ( 'Times:' ) t1 = datetime . time ( 12 , 55 , 0 ) print ( ' t1:' , t1 ) t2 = datetime . time ( 13 , 5 , 0 ) print ( ' t2:' , t2 ) print ( ' t1 < t2:' , t1 < t2 ) print () print ( 'Dates:' ) d1 = datetime . date . today () print ( ' d1:' , d1 ) d2 = datetime . date . today () + datetime . timedelta ( days = 1 ) print ( ' d2:' , d2 ) print ( ' d1 > d2:' , d1 > d2 ) Times: t1: 12:55:00 t2: 13:05:00 t1 < t2: True Dates: d1: 2020-02-03 d2: 2020-02-04 d1 > d2: False","title":"\u6bd4\u8f83\u6570\u503c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_7","text":"datetime \u5bf9\u8c61\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u6cd5\u91c7\u7528\u7684\u662f ISO-8601 \u683c\u5f0f ( YYYY-MM-DDTHH:MM:SS.mmmmmm )\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 strftime() \u51fd\u6570\u751f\u6210\u5176\u5b83\u7684\u683c\u5f0f\u3002 format = \" %a %b %d %H:%M:%S %Y\" today = datetime . datetime . today () print ( 'ISO :' , today ) s = today . strftime ( format ) print ( 'strftime:' , s ) d = datetime . datetime . strptime ( s , format ) print ( 'strptime:' , d . strftime ( format )) ISO : 2020-02-03 21:11:31.684806 strftime: Mon Feb 03 21:11:31 2020 strptime: Mon Feb 03 21:11:31 2020 \u76f8\u540c\u7684\u683c\u5f0f\u5316\u4ee3\u7801\u53ef\u4ee5\u4e0e Python \u7684 string formatting mini-language \u4e00\u8d77\u4f7f\u7528\uff0c\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u89c4\u8303\u4e2d\u7684 : \u540e\u9762\u3002 today = datetime . datetime . today () print ( 'ISO :' , today ) print ( 'format(): {: %a %b %d %H:%M:%S %Y}' . format ( today )) ISO : 2020-02-03 21:11:31.729803 format(): Mon Feb 03 21:11:31 2020 \u6bcf\u4e00\u4e2a datetime \u683c\u5f0f\u4ee3\u7801\u5747\u4ee5 % \u4e3a\u524d\u7f00\uff0c\u5e76\u4e14\u540e\u9762\u7684\u5192\u53f7\u88ab\u5f53\u4f5c\u662f\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u3002 \u7b26\u53f7 \u542b\u4e49 \u4f8b\u5b50 %a \u661f\u671f\u7684\u7b80\u5199 'Wed' %A \u661f\u671f\u7684\u5b8c\u6574\u5199\u6cd5 'Wednesday' %w \u661f\u671f\u4ee3\u53f7 -- \u4ece 0 (\u5468\u65e5) \u5230 6 (\u5468\u516d) '3' %d \u6708\u7684\u7b2c\u51e0\u65e5 (\u4e2a\u4f4d\u6570\u65f6\uff0c\u5341\u4f4d\u8865 0) '13' %b \u6708\u4efd\u7684\u7b80\u5199 'Jan' %B \u6708\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 'January' %m \u6708\u4efd '01' %y \u5e74\u4efd\u7684\u7f29\u5199 '16' %Y \u5e74\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 '2016' %H \u5c0f\u65f6\uff08 24 \u5c0f\u65f6\u5236\uff09 '17' %I \u5c0f\u65f6\uff08 12 \u5c0f\u65f6\u5236\uff09 '05' %p AM/PM 'PM' %M \u5206\u949f '00' %S \u79d2 '00' %f \u5fae\u79d2 '000000' %z \u8bbe\u7f6e\u65f6\u533a\uff08\u9002\u7528\u4e8e\u5bf9\u65f6\u533a\u654f\u611f\u7684\u7c7b\uff09 '-0500' %Z \u65f6\u533a\u540d 'EST' %j \u4e00\u5e74\u7684\u7b2c\u51e0\u5929 '013' %W \u4e00\u5e74\u7684\u7b2c\u51e0\u5468 '02' %c \u5f53\u5730\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4 'Wed Jan 13 17:00:00 2016' %x \u5f53\u5730\u5f53\u524d\u65e5\u671f '01/13/16' %X \u5f53\u5730\u5f53\u524d\u65f6\u95f4 '17:00:00' %% \u4e00\u4e2a % '%'","title":"\u683c\u5f0f\u5316\u548c\u89e3\u6790"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.4.datetime.html#_8","text":"\u5728 datetime \u4e2d\uff0c\u65f6\u533a\u7531 tzinfo \u7684\u5b50\u7c7b\u8868\u793a\u3002\u7531\u4e8e tzinfo \u662f\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\uff0c\u56e0\u6b64\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b\u3002\u4e3a\u4e86\u8ba9\u8fd9\u4e2a\u7c7b\u80fd\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u8981\u4e3a\u4e00\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u9002\u5f53\u7684\u5b9e\u73b0\u3002 \u5728 timezone \u7c7b\u4e2d\uff0c datetime \u786e\u5b9e\u5305\u542b\u4e86\u4e00\u4e2a\u7565\u4e3a\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u5b83\u4f7f\u7528 UTC \u7684\u56fa\u5b9a\u504f\u79fb\u91cf\uff0c\u5e76\u4e14\u4e0d\u652f\u6301\u4e00\u5e74\u4e2d\u4e0d\u540c\u65e5\u671f\u7684\u4e0d\u540c\u504f\u79fb\u91cf\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u590f\u4ee4\u65f6\u7684\u5730\u65b9\u6216\u8005 UTC \u7684\u504f\u79fb\u91cf\u4f1a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u5730\u65b9\u3002 min6 = datetime . timezone ( datetime . timedelta ( hours =- 6 )) plus6 = datetime . timezone ( datetime . timedelta ( hours = 6 )) d = datetime . datetime . now ( min6 ) print ( min6 , ':' , d ) print ( datetime . timezone . utc , ':' , d . astimezone ( datetime . timezone . utc )) print ( plus6 , ':' , d . astimezone ( plus6 )) # \u8f6c\u6362\u4e3a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 d_system = d . astimezone () print ( d_system . tzinfo , ' :' , d_system ) UTC-06:00 : 2020-02-03 07:11:31.756794-06:00 UTC : 2020-02-03 13:11:31.756794+00:00 UTC+06:00 : 2020-02-03 19:11:31.756794+06:00 ?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0?? : 2020-02-03 21:11:31.756794+08:00 \u8981\u60f3\u5c06 datetime \u503c\u4ece\u4e00\u4e2a\u65f6\u533a\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u65f6\u533a\uff0c\u53ef\u4ee5\u4f7f\u7528 astimezone() \u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728 UTC \u7684\u4e24\u8fb9\u5206\u522b\u663e\u793a\u4e86 6 \u5c0f\u65f6\u7684\u65f6\u533a\uff0c\u5e76\u4e14\u8fd8\u4f7f\u7528 datetime.timezone \u4e2d\u7684 utc \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u8003\u3002\u6700\u540e\u7684\u8f93\u51fa\u884c\u663e\u793a\u7cfb\u7edf\u65f6\u533a\u4e2d\u7684\u503c\uff0c\u8be5\u503c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 astimezone() \u51fd\u6570\u83b7\u5f97\uff0c\u8c03\u7528\u65f6\u4e0d\u9700\u8981\u53c2\u6570\u3002","title":"\u65f6\u533a"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.5.calendar.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import calendar from toolkit.Help import Help as H h = H ( calendar ) d = h . dicts c = calendar . TextCalendar ( calendar . SUNDAY ) c . prmonth ( 2017 , 7 ) H ( calendar . TextCalendar ) . param d = h . dicts module July 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class","title":"6.5.calendar"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html","text":"import urllib Windows 10 Python 3.6.9 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.06.13 \u5728 Python 2 \u4e2d\uff0c\u6709 urllib \u548c urllib2 \u4e24\u4e2a\u5e93\u6765\u5b9e\u73b0\u8bf7\u6c42\u7684\u53d1\u9001\u3002\u800c\u5728 Python 3 \u4e2d\uff0c\u5df2\u7ecf\u4e0d\u5b58\u5728 urllib2 \u8fd9\u4e2a\u5e93\u4e86\uff0c\u7edf\u4e00\u4e3a urllib\uff0c \u8fd9\u662furllib\u7684\u5b98\u65b9\u6587\u6863\u94fe\u63a5 \u3002 urllib \u5e93\u662f Python \u5185\u7f6e\u7684 HTTP \u8bf7\u6c42\u5e93\uff0c\u5b83\u5305\u542b\u5982\u4e0b 4 \u4e2a\u6a21\u5757\uff1a request \uff1a\u5b83\u662f\u6700\u57fa\u672c\u7684 HTTP \u8bf7\u6c42\u6a21\u5757\uff0c\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u53d1\u9001\u8bf7\u6c42\u3002\u5c31\u50cf\u5728\u6d4f\u89c8\u5668\u91cc\u8f93\u5165\u7f51\u5740\u7136\u540e\u56de\u8f66\u4e00\u6837\uff0c\u53ea\u9700\u8981\u7ed9\u5e93\u65b9\u6cd5\u4f20\u5165 URL \u4ee5\u53ca\u989d\u5916\u7684\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u4e86\u3002 error \uff1a\u5f02\u5e38\u5904\u7406\u6a21\u5757\uff0c\u5982\u679c\u51fa\u73b0\u8bf7\u6c42\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\uff0c\u7136\u540e\u8fdb\u884c\u91cd\u8bd5\u6216\u5176\u4ed6\u64cd\u4f5c\u4ee5\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u610f\u5916\u7ec8\u6b62\u3002 parse \uff1a\u4e00\u4e2a\u5de5\u5177\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a URL \u5904\u7406\u65b9\u6cd5\uff0c\u6bd4\u5982\u62c6\u5206\u3001\u89e3\u6790\u3001\u5408\u5e76\u7b49\u3002 robotparser \uff1a\u4e3b\u8981\u662f\u7528\u6765\u8bc6\u522b\u7f51\u7ad9\u7684 robots.txt \u6587\u4ef6\uff0c\u7136\u540e\u5224\u65ad\u54ea\u4e9b\u7f51\u7ad9\u53ef\u4ee5\u722c\uff0c\u54ea\u4e9b\u7f51\u7ad9\u4e0d\u53ef\u4ee5\u722c\uff0c\u7528\u5f97\u6bd4\u8f83\u5c11\u3002 request \u6a21\u5757 hurllib.request \u6a21\u5757\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6784\u9020 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u8fc7\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5e26\u6709\u5904\u7406\u6388\u6743\u9a8c\u8bc1\uff08authentication\uff09\u3001\u91cd\u5b9a\u5411\uff08redirection)\u3001\u6d4f\u89c8\u5668 Cookies \u4ee5\u53ca\u5176\u4ed6\u5185\u5bb9\u3002 urlopen urllib . request . urlopen ( url , data = None , [ timeout ,] * , cafile = None , capath = None , cadefault = False ) # data \u9644\u52a0\u6570\u636e # timeout \u8d85\u65f6\u65f6\u95f4 # context \u5fc5\u987b\u662f ssl.SSLContext \u7c7b\u578b\uff0c\u7528\u6765\u6307\u5b9a SSL \u8bbe\u7f6e # cafile \u548c capath \u5206\u522b\u6307\u5b9a CA \u8bc1\u4e66\u548c\u5b83\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u5728\u8bf7\u6c42 HTTPS \u94fe\u63a5\u65f6\u4f1a\u6709\u7528 # cadefault \u73b0\u5728\u5df2\u7ecf\u5f03\u7528\u4e86\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a False \u4f8b\u5982\uff0c\u8981\u8bf7\u6c42 Python \u5b98\u7f51\uff1a import urllib.request url = 'https://www.python.org' # response\u662f\u4e00\u4e2a HTTPResposne \u7c7b\u578b\u7684\u5bf9\u8c61 response = urllib . request . urlopen ( url = url ) # \u8bfb\u5165\u7f51\u9875\u5185\u5bb9 \u8fd9\u662f\u4e00\u4e2abytes\u5b57\u7b26\u4e32 response . read () # \u54cd\u5e94\u7684\u72b6\u6001\u7801 response . status # \u54cd\u5e94\u7684\u72b6\u6001\u4fe1\u606f response . reason # \u54cd\u5e94\u7684\u5934\u4fe1\u606f response . getheaders () # \u83b7\u53d6\u54cd\u5e94\u7684\u5934\u4fe1\u606f\u7684\u67d0\u4e2a\u53c2\u6570 response . getheader ( 'Server' ) 'nginx' \u4e3b\u8981\u5305\u542b readinto\u3001fileno \u7b49\u65b9\u6cd5\uff0c\u4ee5\u53ca msg\u3001version\u3001debuglevel\u3001closed \u7b49\u5c5e\u6027\u3002 data \u53c2\u6570 \u5982\u679c\u8981\u6dfb\u52a0 data \u53c2\u6570\uff0c\u9700\u8981\u4f7f\u7528 bytes \u65b9\u6cd5\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5b57\u8282\u6d41\u7f16\u7801\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u5373 bytes \u7c7b\u578b\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f20\u9012\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf7\u6c42\u65b9\u5f0f\u5c31\u4e0d\u518d\u662f GET \u65b9\u5f0f\uff0c\u800c\u662f POST \u65b9\u5f0f\u3002 # import urllib.parse import urllib.request # \u4f7f\u7528\u4e86 bytes \u65b9\u6cd5\u7f16\u7801\u6210\u5b57\u8282\u6d41 # data = bytes(urllib.parse.urlencode({'word': 'hello'}), encoding='utf8') data = bytes ( \"word=hello\" , encoding = \"utf-8\" ) response = urllib . request . urlopen ( 'http://httpbin.org/post' , data = data ) print ( response . read () . decode ( \"utf-8\" )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"word\": \"hello\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"10\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.6\", \"X-Amzn-Trace-Id\": \"Root=1-5ee46694-38358ae8257a47e8d0f88538\" }, \"json\": null, \"origin\": \"157.122.62.84\", \"url\": \"http://httpbin.org/post\" } \u8bf7\u6c42\u7684 URL \u4e3a\uff1a http://httpbin.org/post \uff0c\u8fd9\u4e2a\u94fe\u63a5\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5 POST \u8bf7\u6c42\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa Request \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5176\u4e2d\u5c31\u5305\u542b\u4f20\u9012\u7684 data \u53c2\u6570\u3002 \u6211\u4eec\u4f20\u9012\u7684\u53c2\u6570\u51fa\u73b0\u5728\u4e86 form \u5b57\u6bb5\u4e2d\uff0c\u8fd9\u8868\u660e\u662f\u6a21\u62df\u4e86\u8868\u5355\u63d0\u4ea4\u7684\u65b9\u5f0f\uff0c\u4ee5 POST \u65b9\u5f0f\u4f20\u8f93\u6570\u636e\u3002 timeout \u53c2\u6570 timeout \u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u610f\u601d\u5c31\u662f\u5982\u679c\u8bf7\u6c42\u8d85\u51fa\u4e86\u8bbe\u7f6e\u7684\u8fd9\u4e2a\u65f6\u95f4\uff0c\u8fd8\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\uff0c\u5c31\u4f1a\u629b\u51fa URLError \u5f02\u5e38\uff0cURLError \u5f02\u5e38\u5c5e\u4e8e urllib.error \u6a21\u5757\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u8be5\u53c2\u6570\uff0c\u5c31\u4f1a\u4f7f\u7528\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u3002\u5b83\u652f\u6301 HTTP\u3001HTTPS\u3001FTP \u8bf7\u6c42\u3002 \u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u53ef\u4ee5\u4e3a None \uff0c\u8868\u793a\u65e0\u8d85\u65f6\u9650\u5236\u3002\u4f46\u5373\u4f7f\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u4e3a None \uff0c\u6700\u540e\u53ef\u80fd\u8fd8\u662f\u4f1a\u53d1\u751f\u8d85\u65f6\uff0c\u6b64\u65f6\u8d85\u65f6\u53ef\u80fd\u662fHTTP\u7f51\u7edc\u8d85\u65f6\u3002\u800c\u4e0d\u662f\u8d85\u8fc7\u4e86\u9650\u5b9a\u7684\u65f6\u95f4\u3002 import urllib.request # 1\u79d2\u5185\u5f97\u5230\u54cd\u5e94\uff0c\u5219\u4e0d\u4f1a\u629b\u51faURLError \u5f02\u5e38 try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 1 ) print ( response . read () . decode ( \"utf-8\" )) except : print ( 'TIME OUT' ) { \"args\": {}, \"headers\": { \"Accept-Encoding\": \"identity\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.6\", \"X-Amzn-Trace-Id\": \"Root=1-5ee46694-4499269c47c50804469a0aea\" }, \"origin\": \"157.122.62.84\", \"url\": \"http://httpbin.org/get\" } \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u6765\u63a7\u5236\u4e00\u4e2a\u7f51\u9875\u5982\u679c\u957f\u65f6\u95f4\u672a\u54cd\u5e94\uff0c\u5c31\u8df3\u8fc7\u5b83\u7684\u6293\u53d6\u3002 # need to fix. output should be 'TIME OUT 1' import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 0.1 ) except urllib . error . URLError as e : if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT 1' ) except Exception : print ( 'TIME OUT 2' ) TIME OUT 1 \u4e00\u822c\u6765\u8bf4\uff0c0.1 \u79d2\u5185\u57fa\u672c\u4e0d\u53ef\u80fd\u5f97\u5230\u670d\u52a1\u5668\u54cd\u5e94\uff0c\u56e0\u6b64\u8f93\u51fa\u4e86 TIME OUT \u7684\u63d0\u793a\u3002 Request \u5229\u7528 urlopen \u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6700\u57fa\u672c\u8bf7\u6c42\u7684\u53d1\u8d77\uff0c\u4f46\u8fd9\u51e0\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u5e76\u4e0d\u8db3\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\u3002\u5982\u679c\u8bf7\u6c42\u4e2d\u9700\u8981\u52a0\u5165 Headers \u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u5229\u7528\u66f4\u5f3a\u5927\u7684 Request \u7c7b\u6765\u6784\u5efa\u3002 import urllib.request request = urllib . request . Request ( 'https://python.org' ) response = urllib . request . urlopen ( request ) print ( response . read () . decode ( 'utf-8' )) <!doctype html> <!--[if lt IE 7]> <html class=\"no-js ie6 lt-ie7 lt-ie8 lt-ie9\"> <![endif]--> <!--[if IE 7]> <html class=\"no-js ie7 lt-ie8 lt-ie9\"> <![endif]--> <!--[if IE 8]> <html class=\"no-js ie8 lt-ie9\"> <![endif]--> <!--[if gt IE 8]><!--><html class=\"no-js\" . . . 0be1d290.js\" charset=\"utf-8\"></script> <![endif]--> </body> </html> \u4f9d\u7136\u662f\u7528 urlopen \u65b9\u6cd5\u6765\u53d1\u9001\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u4e0d\u518d\u662f URL\uff0c\u800c\u662f\u4e00\u4e2a Request \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u901a\u8fc7\u6784\u9020\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u65b9\u9762\u6211\u4eec\u53ef\u4ee5\u5c06\u8bf7\u6c42\u72ec\u7acb\u6210\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u66f4\u52a0\u4e30\u5bcc\u548c\u7075\u6d3b\u5730\u914d\u7f6e\u53c2\u6570\u3002 Request \u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a class urllib . request . Request ( url , data = None , headers = {}, origin_req_host = None , unverifiable = False , method = None ) url \uff1a\u7528\u4e8e\u8bf7\u6c42 URL\uff0c\u8fd9\u662f\u5fc5\u4f20\u53c2\u6570\uff0c\u5176\u4ed6\u90fd\u662f\u53ef\u9009\u53c2\u6570\u3002 data \uff1abytes\uff08\u5b57\u8282\u6d41\uff09\u7c7b\u578b\u3002\u5982\u679c\u5b83\u662f\u5b57\u5178\uff0c\u53ef\u4ee5\u5148\u7528 urllib.parse \u6a21\u5757\u91cc\u7684 urlencode() \u7f16\u7801\u3002 headers \uff1a\u5b83\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4e5f\u5c31\u662f\u8bf7\u6c42\u5934\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6784\u9020\u8bf7\u6c42\u65f6\u901a\u8fc7 headers \u53c2\u6570\u76f4\u63a5\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8bf7\u6c42\u5b9e\u4f8b\u7684 add_header() \u65b9\u6cd5\u6dfb\u52a0\u3002\u6dfb\u52a0\u8bf7\u6c42\u5934\u6700\u5e38\u7528\u7684\u7528\u6cd5\u5c31\u662f\u901a\u8fc7\u4fee\u6539 User-Agent \u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\uff0c\u9ed8\u8ba4\u7684 User-Agent \u662f Python-urllib\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5b83\u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\u3002\u6bd4\u5982\u8981\u4f2a\u88c5\u706b\u72d0\u6d4f\u89c8\u5668\uff0c\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\uff1a Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11 origin_req_host \uff1a\u6307\u7684\u662f\u8bf7\u6c42\u65b9\u7684 host \u540d\u79f0\u6216\u8005 IP \u5730\u5740\u3002 unverifiable \uff1a\u8868\u793a\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u662f\u65e0\u6cd5\u9a8c\u8bc1\u7684\uff0c\u9ed8\u8ba4\u662f False\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u7528\u6237\u6ca1\u6709\u8db3\u591f\u6743\u9650\u6765\u9009\u62e9\u63a5\u6536\u8fd9\u4e2a\u8bf7\u6c42\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a HTML \u6587\u6863\u4e2d\u7684\u56fe\u7247\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u81ea\u52a8\u6293\u53d6\u56fe\u50cf\u7684\u6743\u9650\uff0c\u8fd9\u65f6 unverifiable \u7684\u503c\u5c31\u662f True\u3002 method \uff1a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u6307\u793a\u8bf7\u6c42\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 GET\u3001POST \u548c PUT \u7b49\u3002 \u4e0b\u9762\u6211\u4eec\u4f20\u5165\u591a\u4e2a\u53c2\u6570\u6784\u5efa\u8bf7\u6c42\u6765\u770b\u4e00\u4e0b\uff1a from urllib import request , parse url = 'http://httpbin.org/post' headers = { 'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' , 'Host' : 'httpbin.org' } dict = { 'name' : 'Germey' } data = bytes ( parse . urlencode ( dict ), encoding = 'utf8' ) # data = b'name=Germey' req = request . Request ( url = url , data = data , headers = headers , method = 'POST' ) response = request . urlopen ( req ) print ( response . read () . decode ( 'utf-8' )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"name\": \"Germey\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"11\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\", \"X-Amzn-Trace-Id\": \"Root=1-5ee46699-5c8f13e39c460e544f38df00\" }, \"json\": null, \"origin\": \"157.122.62.84\", \"url\": \"http://httpbin.org/post\" } \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 4 \u4e2a\u53c2\u6570\u6784\u9020\u4e86\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u4e2d url \u5373\u8bf7\u6c42 URL\uff0cheaders \u4e2d\u6307\u5b9a\u4e86 User-Agent \u548c Host\uff0c\u53c2\u6570 data \u7528 urlencode \u548c bytes \u65b9\u6cd5\u8f6c\u6210\u5b57\u8282\u6d41\u3002\u53e6\u5916\uff0c\u6307\u5b9a\u4e86\u8bf7\u6c42\u65b9\u5f0f\u4e3a POST\u3002 \u89c2\u5bdf\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u6210\u529f\u8bbe\u7f6e\u4e86 data\u3001headers \u548c method\u3002 \u53e6\u5916\uff0cheaders \u4e5f\u53ef\u4ee5\u7528 add_header \u65b9\u6cd5\u6765\u6dfb\u52a0\uff1a req = request . Request ( url = url , data = data , method = 'POST' ) req . add_header ( 'User-Agent' , 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' ) Handler \u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u867d\u7136\u53ef\u4ee5\u6784\u9020\u8bf7\u6c42\uff0c\u4f46\u5982\u679c\u8981\u5904\u7406\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 Cookies \u5904\u7406\u3001\u4ee3\u7406\u8bbe\u7f6e\u7b49\uff09\uff0c\u5219\u9700\u8981 Handler \u3002\u6211\u4eec\u53ef\u4ee5\u628a Handler \u7406\u89e3\u4e3a\u5404\u79cd\u5904\u7406\u5668\uff0c\u6709\u4e13\u95e8\u5904\u7406\u767b\u5f55\u9a8c\u8bc1\u7684\uff0c\u6709\u5904\u7406 Cookies \u7684\uff0c\u6709\u5904\u7406\u4ee3\u7406\u8bbe\u7f6e\u7684\u3002\u5229\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u505a\u5230 HTTP \u8bf7\u6c42\u4e2d\u6240\u6709\u7684\u4e8b\u60c5\u3002 urllib.request \u6a21\u5757\u91cc\u7684 BaseHandler \u7c7b\u662f\u6240\u6709\u5176\u4ed6 Handler \u7684\u7236\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 default_open\u3001protocol_request \u7b49\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u6709\u5404\u79cd Handler \u5b50\u7c7b\u7ee7\u627f\u8fd9\u4e2a BaseHandler \u7c7b\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a HTTPDefaultErrorHandler \u7528\u4e8e\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\uff0c\u9519\u8bef\u90fd\u4f1a\u629b\u51fa HTTPError \u7c7b\u578b\u7684\u5f02\u5e38\u3002 HTTPRedirectHandler \u7528\u4e8e\u5904\u7406\u91cd\u5b9a\u5411\u3002 HTTPCookieProcessor \u7528\u4e8e\u5904\u7406 Cookies\u3002 ProxyHandler \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7406\uff0c\u9ed8\u8ba4\u4ee3\u7406\u4e3a\u7a7a\u3002 HTTPPasswordMgr \u7528\u4e8e\u7ba1\u7406\u5bc6\u7801\uff0c\u5b83\u7ef4\u62a4\u4e86\u7528\u6237\u540d\u5bc6\u7801\u7684\u8868\u3002 HTTPBasicAuthHandler \u7528\u4e8e\u7ba1\u7406\u8ba4\u8bc1\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u6253\u5f00\u65f6\u9700\u8981\u8ba4\u8bc1\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5b83\u6765\u89e3\u51b3\u8ba4\u8bc1\u95ee\u9898\u3002 \u53e6\u5916\u8fd8\u6709\u5176\u4ed6\u7684 Handler \u7c7b\uff0c\u5728\u8fd9\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler \u5173\u4e8e\u600e\u4e48\u4f7f\u7528\u5b83\u4eec\uff0c\u73b0\u5728\u5148\u4e0d\u7528\u7740\u6025\uff0c\u540e\u9762\u4f1a\u6709\u5b9e\u4f8b\u6f14\u793a\u3002 \u53e6\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\u5c31\u662f OpenerDirector\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u4e3a Opener\u3002\u6211\u4eec\u4e4b\u524d\u7528\u8fc7 urlopen \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f urllib \u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u4e2a Opener\u3002 \u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 Opener \u5462\uff1f\u56e0\u4e3a\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\u3002\u4e4b\u524d\u4f7f\u7528\u7684 Request \u548c urlopen \u76f8\u5f53\u4e8e\u7c7b\u5e93\u4e3a\u4f60\u5c01\u88c5\u597d\u4e86\u6781\u5176\u5e38\u7528\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u4eec\u53ef\u4ee5\u5b8c\u6210\u57fa\u672c\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u73b0\u5728\u4e0d\u4e00\u6837\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u6df1\u5165\u4e00\u5c42\u8fdb\u884c\u914d\u7f6e\uff0c\u4f7f\u7528\u66f4\u5e95\u5c42\u7684\u5b9e\u4f8b\u6765\u5b8c\u6210\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u7528\u5230\u4e86 Opener\u3002 Opener \u53ef\u4ee5\u4f7f\u7528 open \u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u548c urlopen \u5982\u51fa\u4e00\u8f99\u3002\u90a3\u4e48\uff0c\u5b83\u548c Handler \u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u5229\u7528 Handler \u6765\u6784\u5efa Opener\u3002 \u4e0b\u9762\u7528\u51e0\u4e2a\u5b9e\u4f8b\u6765\u770b\u770b\u5b83\u4eec\u7684\u7528\u6cd5\u3002 \u9a8c\u8bc1 \u6709\u4e9b\u7f51\u7ad9\u5728\u6253\u5f00\u65f6\u5c31\u4f1a\u5f39\u51fa\u63d0\u793a\u6846\uff0c\u76f4\u63a5\u63d0\u793a\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u80fd\u67e5\u770b\u9875\u9762\uff0c\u5982\u56fe\u6240\u793a\uff1a HTTPBasicAuthHandler \u5c31\u53ef\u4ee5\u8bf7\u6c42\u8fd9\u6837\u7684\u9875\u9762\uff1a from urllib.request import ( HTTPPasswordMgrWithDefaultRealm , HTTPBasicAuthHandler , build_opener ) from urllib.error import URLError username = 'name' password = '12345678' url = 'https://httpbin.org/basic-auth/name/12345678' p = HTTPPasswordMgrWithDefaultRealm () p . add_password ( None , url , username , password ) auth_handler = HTTPBasicAuthHandler ( p ) opener = build_opener ( auth_handler ) try : result = opener . open ( url ) html = result . read () . decode ( 'utf-8' ) print ( html ) except URLError as e : print ( e . reason ) { \"authenticated\": true, \"user\": \"name\" } \u8fd9\u91cc\u9996\u5148\u5b9e\u4f8b\u5316 HTTPBasicAuthHandler \u5bf9\u8c61\uff0c\u5176\u53c2\u6570\u662f HTTPPasswordMgrWithDefaultRealm \u5bf9\u8c61\uff0c\u5b83\u5229\u7528 add_password \u65b9\u6cd5\u6dfb\u52a0\u8fdb\u53bb\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u8fd9\u6837\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u5904\u7406\u9a8c\u8bc1\u7684 Handler\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u5e76\u4f7f\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u4e00\u4e2a Opener\uff0c\u8fd9\u4e2a Opener \u5728\u53d1\u9001\u8bf7\u6c42\u65f6\u5c31\u76f8\u5f53\u4e8e\u5df2\u7ecf\u9a8c\u8bc1\u6210\u529f\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528 Opener \u7684 open \u65b9\u6cd5\u6253\u5f00\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u9a8c\u8bc1\u4e86\u3002\u8fd9\u91cc\u83b7\u53d6\u5230\u7684\u7ed3\u679c\u5c31\u662f\u9a8c\u8bc1\u540e\u7684\u9875\u9762\u6e90\u7801\u5185\u5bb9\u3002 \u4ee3\u7406 \u5728\u505a\u722c\u866b\u7684\u65f6\u5019\uff0c\u514d\u4e0d\u4e86\u8981\u4f7f\u7528\u4ee3\u7406\uff0c\u5982\u679c\u8981\u6dfb\u52a0\u4ee3\u7406\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a from urllib.error import URLError from urllib.request import ProxyHandler , build_opener proxy_handler = ProxyHandler ({ 'http' : 'http://127.0.0.1:9743' , 'https' : 'https://127.0.0.1:9743' }) opener = build_opener ( proxy_handler ) try : response = opener . open ( 'https://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) except URLError as e : print ( e . reason ) [WinError 10061] No connection could be made because the target machine actively refused it \u8fd9\u91cc\u6211\u4eec\u5728\u672c\u5730\u642d\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7406\uff0c\u5b83\u8fd0\u884c\u5728 9743 \u7aef\u53e3\u4e0a\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86 ProxyHandler\uff0c\u5176\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u540d\u662f\u534f\u8bae\u7c7b\u578b\uff08\u6bd4\u5982 HTTP \u6216\u8005 HTTPS \u7b49\uff09\uff0c\u952e\u503c\u662f\u4ee3\u7406\u94fe\u63a5\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u4ee3\u7406\u3002 \u7136\u540e\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u53ca build_opener \u65b9\u6cd5\u6784\u9020\u4e00\u4e2a Opener\uff0c\u4e4b\u540e\u53d1\u9001\u8bf7\u6c42\u5373\u53ef\u3002 Cookies \u83b7\u53d6\u7f51\u7ad9\u7684 Cookies\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a CookieJar \u5bf9\u8c61\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u9700\u8981\u5229\u7528 HTTPCookieProcessor \u6765\u6784\u5efa\u4e00\u4e2a Handler\uff0c\u6700\u540e\u5229\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u51fa Opener\uff0c\u6267\u884c open \u51fd\u6570\u5373\u53ef\u3002 import http.cookiejar , urllib.request cookie = http . cookiejar . CookieJar () handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) for item in cookie : print ( item . name + \"=\" + item . value ) BAIDUID=A5F653A099838B93FFDFA2E2E5DF2B7F:FG=1 BIDUPSID=A5F653A099838B93B7152CE45EB47D2A H_PS_PSSID=31906_1420_31669_21080_31069_31253_31765_32045_30823_26350 PSTM=1592026781 BDSVRTM=0 BD_HOME=1 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8f93\u51fa\u4e86\u6bcf\u6761 Cookie \u7684\u540d\u79f0\u548c\u503c\u3002 \u4e0d\u8fc7\u65e2\u7136\u80fd\u8f93\u51fa\uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u8f93\u51fa\u6210\u6587\u4ef6\u683c\u5f0f\u5462\uff1f\u6211\u4eec\u77e5\u9053 Cookies \u5b9e\u9645\u4e0a\u4e5f\u662f\u4ee5\u6587\u672c\u5f62\u5f0f\u4fdd\u5b58\u7684\u3002 \u7b54\u6848\u5f53\u7136\u662f\u80af\u5b9a\u7684\uff0c\u8fd9\u91cc\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u4f8b\u6765\u770b\u770b\uff1a filename = 'cookies.txt' cookie = http . cookiejar . MozillaCookieJar ( filename ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) cookie . save ( ignore_discard = True , ignore_expires = True ) \u8fd9\u65f6 CookieJar \u5c31\u9700\u8981\u6362\u6210 MozillaCookieJar\uff0c\u5b83\u5728\u751f\u6210\u6587\u4ef6\u65f6\u4f1a\u7528\u5230\uff0c\u662f CookieJar \u7684\u5b50\u7c7b\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406 Cookies \u548c\u6587\u4ef6\u76f8\u5173\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u53ef\u4ee5\u5c06 Cookies \u4fdd\u5b58\u6210 Mozilla \u578b\u6d4f\u89c8\u5668\u7684 Cookies \u683c\u5f0f\u3002 \u8fd0\u884c\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u751f\u6210\u4e86\u4e00\u4e2a cookies.txt \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a # Netscape HTTP Cookie File # http://curl.haxx.se/rfc/cookie_spec.html # This is a generated file! Do not edit. .baidu.com TRUE / FALSE 3622386254 BAIDUID 05AE39B5F56C1DEC474325CDA522D44F:FG=1 .baidu.com TRUE / FALSE 3622386254 BIDUPSID 05AE39B5F56C1DEC474325CDA522D44F .baidu.com TRUE / FALSE H_PS_PSSID 19638_1453_17710_18240_21091_18560_17001_ 21191_21161 .baidu.com TRUE / FALSE 3622386254 PSTM 1474902606 www.baidu.com FALSE / FALSE BDSVRTM 0 www.baidu.com FALSE / FALSE BD_HOME 0 \u53e6\u5916\uff0cLWPCookieJar \u540c\u6837\u53ef\u4ee5\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u4f46\u662f\u4fdd\u5b58\u7684\u683c\u5f0f\u548c MozillaCookieJar \u4e0d\u4e00\u6837\uff0c\u5b83\u4f1a\u4fdd\u5b58\u6210 libwww-perl(LWP) \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\u3002 \u8981\u4fdd\u5b58\u6210 LWP \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u5c31\u6539\u4e3a\uff1a cookie = http . cookiejar . LWPCookieJar ( filename ) \u6b64\u65f6\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a #LWP-Cookies-2.0 Set-Cookie3: BAIDUID=\"0CE9C56F598E69DB375B7C294AE5C591:FG=1\"; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BIDUPSID=0CE9C56F598E69DB375B7C294AE5C591; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: H_PS_PSSID=20048_1448_18240_17944_21089_21192_21161_20929; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; discard; version=0 Set-Cookie3: PSTM=1474902671; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BDSVRTM=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 Set-Cookie3: BD_HOME=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 \u7531\u6b64\u770b\u6765\uff0c\u751f\u6210\u7684\u683c\u5f0f\u8fd8\u662f\u6709\u6bd4\u8f83\u5927\u5dee\u5f02\u7684\u3002 \u90a3\u4e48\uff0c\u751f\u6210\u4e86 Cookies \u6587\u4ef6\u540e\uff0c\u600e\u6837\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5e76\u5229\u7528\u5462\uff1f \u4e0b\u9762\u6211\u4eec\u4ee5 LWPCookieJar \u683c\u5f0f\u4e3a\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a cookie = http . cookiejar . LWPCookieJar () cookie . load ( 'cookies.txt' , ignore_discard = True , ignore_expires = True ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8c03\u7528 load \u65b9\u6cd5\u6765\u8bfb\u53d6\u672c\u5730\u7684 Cookies \u6587\u4ef6\uff0c\u83b7\u53d6\u5230\u4e86 Cookies \u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\u524d\u63d0\u662f\u6211\u4eec\u9996\u5148\u751f\u6210\u4e86 LWPCookieJar \u683c\u5f0f\u7684 Cookies\uff0c\u5e76\u4fdd\u5b58\u6210\u6587\u4ef6\uff0c\u7136\u540e\u8bfb\u53d6 Cookies \u4e4b\u540e\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u6784\u5efa Handler \u548c Opener \u5373\u53ef\u5b8c\u6210\u64cd\u4f5c\u3002 \u8fd0\u884c\u7ed3\u679c\u6b63\u5e38\u7684\u8bdd\uff0c\u4f1a\u8f93\u51fa\u767e\u5ea6\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7edd\u5927\u591a\u6570\u8bf7\u6c42\u529f\u80fd\u7684\u8bbe\u7f6e\u4e86\u3002 \u8fd9\u4fbf\u662f urllib \u5e93\u4e2d request \u6a21\u5757\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u5982\u679c\u60f3\u5b9e\u73b0\u66f4\u591a\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u660e\uff1a https://docs.python.org/3/library/urllib.request.html#basehandler-objects \u3002 \u5904\u7406\u5f02\u5e38 urllib \u7684 error \u6a21\u5757\u5b9a\u4e49\u4e86\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0crequest \u6a21\u5757\u4fbf\u4f1a\u629b\u51fa error \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5f02\u5e38\u3002error \u6a21\u5757\u5b9a\u4e49\u4e86\u4e09\u79cd\u5f02\u5e38: ['ContentTooShortError', 'HTTPError', 'URLError'] URLError URLError \u7c7b\u6765\u81ea urllib \u5e93\u7684 error \u6a21\u5757\uff0c\u5b83\u7ee7\u627f\u81ea OSError \u7c7b\uff0c\u662f error \u5f02\u5e38\u6a21\u5757\u7684\u57fa\u7c7b\uff0c\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u90fd\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u8fd9\u4e2a\u7c7b\u6765\u5904\u7406\u3002 \u5b83\u5177\u6709\u4e00\u4e2a\u5c5e\u6027 reason\uff0c\u5373\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 from urllib import request , error try : # \u8bf7\u6c42\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7f51\u9875 response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . URLError as e : print ( e . reason ) Bad Gateway HTTPError \u5b83\u662f URLError \u7684\u5b50\u7c7b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406 HTTP \u8bf7\u6c42\u9519\u8bef\uff0c\u6bd4\u5982\u8ba4\u8bc1\u8bf7\u6c42\u5931\u8d25\u7b49\u3002\u5b83\u6709\u5982\u4e0b 3 \u4e2a\u5c5e\u6027\u3002 code\uff1a\u8fd4\u56de HTTP \u72b6\u6001\u7801\uff0c\u6bd4\u5982 404 \u8868\u793a\u7f51\u9875\u4e0d\u5b58\u5728\uff0c500 \u8868\u793a\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7b49\u3002 reason\uff1a\u540c\u7236\u7c7b\u4e00\u6837\uff0c\u7528\u4e8e\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 headers\uff1a\u8fd4\u56de\u8bf7\u6c42\u5934\u3002 from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sat, 13 Jun 2020 05:40:02 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=82bor4hv5of8dd5dbdppp8jut2; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u4f9d\u7136\u662f\u540c\u6837\u7684\u7f51\u5740\uff0c\u8fd9\u91cc\u6355\u83b7\u4e86 HTTPError \u5f02\u5e38\uff0c\u8f93\u51fa\u4e86 reason\u3001code \u548c headers \u5c5e\u6027\u3002 \u56e0\u4e3a URLError \u662f HTTPError \u7684\u7236\u7c7b\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u9009\u62e9\u6355\u83b7\u5b50\u7c7b\u7684\u9519\u8bef\uff0c\u518d\u53bb\u6355\u83b7\u7236\u7c7b\u7684\u9519\u8bef\uff0c\u6240\u4ee5\u4e0a\u8ff0\u4ee3\u7801\u66f4\u597d\u7684\u5199\u6cd5\u5982\u4e0b\uff1a from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) except error . URLError as e : print ( e . reason ) else : print ( 'Request Successfully' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sat, 13 Jun 2020 05:40:02 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=ekbuprp6akme47u5dm53uecti2; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5148\u6355\u83b7 HTTPError \uff0c\u83b7\u53d6\u5b83\u7684\u9519\u8bef\u72b6\u6001\u7801\u3001\u539f\u56e0\u3001headers \u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e0d\u662f HTTPError \u5f02\u5e38\uff0c\u5c31\u4f1a\u6355\u83b7 URLError \u5f02\u5e38\uff0c\u8f93\u51fa\u9519\u8bef\u539f\u56e0\u3002\u6700\u540e\uff0c\u7528 else \u6765\u5904\u7406\u6b63\u5e38\u7684\u903b\u8f91\u3002\u8fd9\u662f\u4e00\u4e2a\u8f83\u597d\u7684\u5f02\u5e38\u5904\u7406\u5199\u6cd5\u3002 \u6709\u65f6\u5019\uff0creason \u5c5e\u6027\u8fd4\u56de\u7684\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u518d\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'https://www.baidu.com' , timeout = 0.01 ) except urllib . error . URLError as e : print ( type ( e . reason )) if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT' ) <class 'socket.timeout'> TIME OUT \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u6765\u5f3a\u5236\u629b\u51fa timeout \u5f02\u5e38\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0creason \u5c5e\u6027\u7684\u7ed3\u679c\u662f socket.timeout \u7c7b\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528 isinstance \u65b9\u6cd5\u6765\u5224\u65ad\u5b83\u7684\u7c7b\u578b\uff0c\u4f5c\u51fa\u66f4\u8be6\u7ec6\u7684\u5f02\u5e38\u5224\u65ad\u3002 \u89e3\u6790\u94fe\u63a5 urllib \u5e93\u7684 parse \u6a21\u5757\uff0c\u5b83\u5b9a\u4e49\u4e86\u5904\u7406 URL \u7684\u6807\u51c6\u63a5\u53e3\uff0c\u4f8b\u5982\u5b9e\u73b0 URL \u5404\u90e8\u5206\u7684\u62bd\u53d6\u3001\u5408\u5e76\u4ee5\u53ca\u94fe\u63a5\u8f6c\u6362\u3002\u5b83\u652f\u6301\u5982\u4e0b\u534f\u8bae\u7684 URL \u5904\u7406\uff1afile\u3001ftp\u3001gopher\u3001hdl\u3001http\u3001https\u3001imap\u3001mailto\u3001 mms\u3001news\u3001nntp\u3001prospero\u3001rsync\u3001rtsp\u3001rtspu\u3001sftp\u3001 sip\u3001sips\u3001snews\u3001svn\u3001svn+ssh\u3001telnet \u548c wais\u3002 urlparse \u8be5\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0 URL \u7684\u8bc6\u522b\u548c\u5206\u6bb5\uff1a urllib . parse . urlparse ( urlstring , scheme = '' , allow_fragments = True ) urlstring \uff1a\u5f85\u89e3\u6790\u7684 URL scheme \uff1a\u5b83\u662f\u9ed8\u8ba4\u7684\u534f\u8bae\uff08\u6bd4\u5982 http \u6216 https \u7b49\uff09\u3002 scheme \u53c2\u6570\u53ea\u6709\u5728 urlstring \u4e2d\u4e0d\u5305\u542b scheme \u4fe1\u606f\u65f6\u624d\u751f\u6548\u3002 allow_fragments \uff1a\u662f\u5426\u5ffd\u7565 fragment\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a False\uff0cfragment \u90e8\u5206\u5c31\u4f1a\u88ab\u5ffd\u7565\uff0c\u5b83\u4f1a\u88ab\u89e3\u6790\u4e3a path\u3001parameters \u6216\u8005 query \u7684\u4e00\u90e8\u5206\uff0c\u800c fragment \u90e8\u5206\u4e3a\u7a7a\u3002\u5f53 URL \u4e2d\u4e0d\u5305\u542b params \u548c query \u65f6\uff0cfragment \u4fbf\u4f1a\u88ab\u89e3\u6790\u4e3a path \u7684\u4e00\u90e8\u5206 \u4f8b\u5b50\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( type ( result ), result ) <class 'urllib.parse.ParseResult'> ParseResult(scheme='http', netloc='www.baidu.com', path='/index.html', params='user', query='id=5', fragment='comment') \u53ef\u4ee5\u770b\u5230\uff0c\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a ParseResult \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u5305\u542b 6 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f scheme\u3001netloc\u3001path\u3001params\u3001query \u548c fragment\u3002 \u89c2\u5bdf\u4e00\u4e0b\u8be5\u5b9e\u4f8b\u7684 URL\uff1a http://www.baidu.com/index.html;user?id=5#comment \u53ef\u4ee5\u53d1\u73b0\uff0curlparse \u65b9\u6cd5\u5c06\u5176\u62c6\u5206\u6210\u4e86 6 \u4e2a\u90e8\u5206\u3002\u5927\u4f53\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u89e3\u6790\u65f6\u6709\u7279\u5b9a\u7684\u5206\u9694\u7b26\u3002\u6bd4\u5982\uff0c:// \u524d\u9762\u7684\u5c31\u662f scheme\uff0c\u4ee3\u8868\u534f\u8bae\uff1b\u7b2c\u4e00\u4e2a / \u7b26\u53f7\u524d\u9762\u4fbf\u662f netloc\uff0c\u5373\u57df\u540d\uff0c\u540e\u9762\u662f path\uff0c\u5373\u8bbf\u95ee\u8def\u5f84\uff1b\u5206\u53f7\uff1b\u540e\u9762\u662f params\uff0c\u4ee3\u8868\u53c2\u6570\uff1b\u95ee\u53f7\uff1f\u540e\u9762\u662f\u67e5\u8be2\u6761\u4ef6 query\uff0c\u4e00\u822c\u7528\u4f5c GET \u7c7b\u578b\u7684 URL\uff1b\u4e95\u53f7 #\u540e\u9762\u662f\u951a\u70b9\uff0c\u7528\u4e8e\u76f4\u63a5\u5b9a\u4f4d\u9875\u9762\u5185\u90e8\u7684\u4e0b\u62c9\u4f4d\u7f6e\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u6807\u51c6\u7684\u94fe\u63a5\u683c\u5f0f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a scheme://netloc/path;params?query#fragment \u4e00\u4e2a\u6807\u51c6\u7684 URL \u90fd\u4f1a\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\uff0c\u5229\u7528 urlparse \u65b9\u6cd5\u53ef\u4ee5\u5c06\u5b83\u62c6\u5206\u5f00\u6765\u3002 \u8fd4\u56de\u7ed3\u679c ParseResult \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7d22\u5f15\u987a\u5e8f\u6765\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u7528\u5c5e\u6027\u540d\u83b7\u53d6\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html#comment' , allow_fragments = False ) print ( result . scheme , result [ 0 ], result . netloc , result [ 1 ], sep = ' \\n ' ) http http www.baidu.com www.baidu.com urlunparse \u6709\u4e86 urlparse \u65b9\u6cd5\uff0c\u76f8\u5e94\u5730\u5c31\u6709\u4e86\u5b83\u7684\u5bf9\u7acb\u65b9\u6cd5 urlunparse \u3002\u5b83\u63a5\u53d7\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u7684\u957f\u5ea6\u5fc5\u987b\u662f 6\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u53c2\u6570\u6570\u91cf\u4e0d\u8db3\u6216\u8005\u8fc7\u591a\u7684\u95ee\u9898\u3002 from urllib.parse import urlunparse data = [ 'http' , 'www.baidu.com' , 'index.html' , 'user' , 'a=6' , 'comment' ] print ( urlunparse ( data )) http://www.baidu.com/index.html;user?a=6#comment \u8fd9\u91cc\u53c2\u6570 data \u7528\u4e86\u5217\u8868\u7c7b\u578b\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\uff0c\u6bd4\u5982\u5143\u7ec4\u6216\u8005\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u3002 urlsplit \u8fd9\u4e2a\u65b9\u6cd5\u548c urlparse \u65b9\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4e0d\u518d\u5355\u72ec\u89e3\u6790 params \u8fd9\u4e00\u90e8\u5206\uff0c\u53ea\u8fd4\u56de 5 \u4e2a\u7ed3\u679c\u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 params \u4f1a\u5408\u5e76\u5230 path \u4e2d\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlsplit result = urlsplit ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( result ) SplitResult(scheme='http', netloc='www.baidu.com', path='/index.html;user', query='id=5', fragment='comment') \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7ed3\u679c\u662f SplitResult \uff0c\u5b83\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\uff0c\u65e2\u53ef\u4ee5\u7528\u5c5e\u6027\u83b7\u53d6\u503c\uff0c\u4e5f\u53ef\u4ee5\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u3002 urlunsplit \u4e0e urlunparse \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5b83\u4e5f\u662f\u5c06\u94fe\u63a5\u5404\u4e2a\u90e8\u5206\u7ec4\u5408\u6210\u5b8c\u6574\u94fe\u63a5\u7684\u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5143\u7ec4\u7b49\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u957f\u5ea6\u5fc5\u987b\u4e3a 5\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlunsplit data = [ 'http' , 'www.baidu.com' , 'index.html' , 'a=6' , 'comment' ] print ( urlunsplit ( data )) http://www.baidu.com/index.html?a=6#comment urljoin \u6709\u4e86 urlunparse \u548c urlunsplit \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u94fe\u63a5\u7684\u5408\u5e76\uff0c\u4e0d\u8fc7\u524d\u63d0\u5fc5\u987b\u8981\u6709\u7279\u5b9a\u957f\u5ea6\u7684\u5bf9\u8c61\uff0c\u94fe\u63a5\u7684\u6bcf\u4e00\u90e8\u5206\u90fd\u8981\u6e05\u6670\u5206\u5f00\u3002 \u6b64\u5916\uff0c\u751f\u6210\u94fe\u63a5\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f urljoin \u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a base_url\uff08\u57fa\u7840\u94fe\u63a5\uff09\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c06\u65b0\u7684\u94fe\u63a5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5206\u6790 base_url \u7684 scheme\u3001netloc \u548c path \u8fd9 3 \u4e2a\u5185\u5bb9\u5e76\u5bf9\u65b0\u94fe\u63a5\u7f3a\u5931\u7684\u90e8\u5206\u8fdb\u884c\u8865\u5145\uff0c\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u3002 from urllib.parse import urljoin print ( urljoin ( 'http://www.baidu.com' , 'FAQ.html' )) print ( urljoin ( 'http://www.baidu.com' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html?question=2' )) print ( urljoin ( 'http://www.baidu.com?wd=abc' , 'https://cuiqingcai.com/index.php' )) print ( urljoin ( 'http://www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com#comment' , '?category=2' )) http://www.baidu.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html?question=2 https://cuiqingcai.com/index.php http://www.baidu.com?category=2#comment www.baidu.com?category=2#comment www.baidu.com?category=2 \u53ef\u4ee5\u53d1\u73b0\uff0cbase_url \u63d0\u4f9b\u4e86\u4e09\u9879\u5185\u5bb9 scheme\u3001netloc \u548c path\u3002\u5982\u679c\u8fd9 3 \u9879\u5728\u65b0\u7684\u94fe\u63a5\u91cc\u4e0d\u5b58\u5728\uff0c\u5c31\u4e88\u4ee5\u8865\u5145\uff1b\u5982\u679c\u65b0\u7684\u94fe\u63a5\u5b58\u5728\uff0c\u5c31\u4f7f\u7528\u65b0\u7684\u94fe\u63a5\u7684\u90e8\u5206\u3002\u800c base_url \u4e2d\u7684 params\u3001query \u548c fragment \u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002 urlencode urlencode \u5728\u6784\u9020 GET \u8bf7\u6c42\u53c2\u6570\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlencode params = { 'name' : 'germey' , 'age' : 22 } base_url = 'http://www.baidu.com?' url = base_url + urlencode ( params ) print ( url ) http://www.baidu.com?name=germey&age=22 \u8fd9\u91cc\u9996\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u5178\u6765\u5c06\u53c2\u6570\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u8c03\u7528 urlencode \u65b9\u6cd5\u5c06\u5176\u5e8f\u5217\u5316\u4e3a GET \u8bf7\u6c42\u53c2\u6570\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u5e38\u7528\u3002\u6709\u65f6\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u6784\u9020\u53c2\u6570\uff0c\u6211\u4eec\u4f1a\u4e8b\u5148\u7528\u5b57\u5178\u6765\u8868\u793a\u3002\u8981\u8f6c\u5316\u4e3a URL \u7684\u53c2\u6570\u65f6\uff0c\u53ea\u9700\u8981\u8c03\u7528\u8be5\u65b9\u6cd5\u5373\u53ef\u3002 parse_qs \u6709\u4e86\u5e8f\u5217\u5316\uff0c\u5fc5\u7136\u5c31\u6709\u53cd\u5e8f\u5217\u5316\u3002\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e32 GET \u8bf7\u6c42\u53c2\u6570\uff0c\u5229\u7528 parse_qs \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b83\u8f6c\u56de\u5b57\u5178\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qs query = 'name=germey&amp;age=22' print ( parse_qs ( query )) {'name': ['germey'], 'age': ['22']} \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u8f6c\u56de\u4e3a\u5b57\u5178\u7c7b\u578b\u4e86\u3002 parse_qsl \u8fd8\u6709\u4e00\u4e2a parse_qsl \u65b9\u6cd5\uff0c\u5b83\u7528\u4e8e\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qsl query = 'name=germey&amp;age=22' print ( parse_qsl ( query )) [('name', 'germey'), ('age', '22')] \u53ef\u4ee5\u770b\u5230\uff0c\u8fd0\u884c\u7ed3\u679c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u503c\u3002 quote \u8be5\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5185\u5bb9\u8f6c\u5316\u4e3a URL \u7f16\u7801\u7684\u683c\u5f0f\u3002URL \u4e2d\u5e26\u6709\u4e2d\u6587\u53c2\u6570\u65f6\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e71\u7801\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e2d\u6587\u5b57\u7b26\u8f6c\u5316\u4e3a URL \u7f16\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import quote keyword = ' \u58c1\u7eb8 ' url = 'https://www.baidu.com/s?wd=' + quote ( keyword ) print ( url ) https://www.baidu.com/s?wd=%20%E5%A3%81%E7%BA%B8%20 unquote \u6709\u4e86 quote \u65b9\u6cd5\uff0c\u5f53\u7136\u8fd8\u6709 unquote \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c URL \u89e3\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import unquote url = 'https://www.baidu.com/s?wd= % E 5% A3 %81% E7% BA% B8' print ( unquote ( url )) https://www.baidu.com/s?wd=% E5% A3\ufffd% E7% BA% B8 \u8fd9\u662f\u4e0a\u9762\u5f97\u5230\u7684 URL \u7f16\u7801\u540e\u7684\u7ed3\u679c\uff0c\u518d\u5229\u7528 unquote \u65b9\u6cd5\u8fd8\u539f\u3002 \u5206\u6790 Robots \u534f\u8bae \u5229\u7528 urllib \u7684 robotparser \u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7ad9 Robots \u534f\u8bae\u7684\u5206\u6790\u3002 Robots \u534f\u8bae Robots \u534f\u8bae\u4e5f\u79f0\u4f5c\u722c\u866b\u534f\u8bae\u3001\u673a\u5668\u4eba\u534f\u8bae\uff0c\u5b83\u7684\u5168\u540d\u53eb\u4f5c\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6\uff08Robots Exclusion Protocol\uff09\uff0c\u7528\u6765\u544a\u8bc9\u722c\u866b\u548c\u641c\u7d22\u5f15\u64ce\u54ea\u4e9b\u9875\u9762\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u53eb\u4f5c robots.txt \u7684\u6587\u672c\u6587\u4ef6\uff0c\u4e00\u822c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\u3002 \u5f53\u641c\u7d22\u722c\u866b\u8bbf\u95ee\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u5b83\u9996\u5148\u4f1a\u68c0\u67e5\u8fd9\u4e2a\u7ad9\u70b9\u6839\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728 robots.txt \u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\uff0c\u641c\u7d22\u722c\u866b\u4f1a\u6839\u636e\u5176\u4e2d\u5b9a\u4e49\u7684\u722c\u53d6\u8303\u56f4\u6765\u722c\u53d6\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\uff0c\u641c\u7d22\u722c\u866b\u4fbf\u4f1a\u8bbf\u95ee\u6240\u6709\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684\u9875\u9762\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a robots.txt \u7684\u6837\u4f8b\uff1a User-agent: * Disallow: / Allow: /public/ \u8fd9\u5b9e\u73b0\u4e86\u5bf9\u6240\u6709\u641c\u7d22\u722c\u866b\u53ea\u5141\u8bb8\u722c\u53d6 public \u76ee\u5f55\u7684\u529f\u80fd\uff0c\u5c06\u4e0a\u8ff0\u5185\u5bb9\u4fdd\u5b58\u6210 robots.txt \u6587\u4ef6\uff0c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u548c\u7f51\u7ad9\u7684\u5165\u53e3\u6587\u4ef6\uff08\u6bd4\u5982 index.php\u3001index.html \u548c index.jsp \u7b49\uff09\u653e\u5728\u4e00\u8d77\u3002 \u4e0a\u9762\u7684 User-agent \u63cf\u8ff0\u4e86\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\uff0c\u8fd9\u91cc\u5c06\u5176\u8bbe\u7f6e\u4e3a * \u5219\u4ee3\u8868\u8be5\u534f\u8bae\u5bf9\u4efb\u4f55\u722c\u53d6\u722c\u866b\u6709\u6548\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\uff1a User-agent: Baiduspider \u8fd9\u5c31\u4ee3\u8868\u6211\u4eec\u8bbe\u7f6e\u7684\u89c4\u5219\u5bf9\u767e\u5ea6\u722c\u866b\u662f\u6709\u6548\u7684\u3002\u5982\u679c\u6709\u591a\u6761 User-agent \u8bb0\u5f55\uff0c\u5219\u5c31\u4f1a\u6709\u591a\u4e2a\u722c\u866b\u4f1a\u53d7\u5230\u722c\u53d6\u9650\u5236\uff0c\u4f46\u81f3\u5c11\u9700\u8981\u6307\u5b9a\u4e00\u6761\u3002 Disallow \u6307\u5b9a\u4e86\u4e0d\u5141\u8bb8\u6293\u53d6\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4e0a\u4f8b\u5b50\u4e2d\u8bbe\u7f6e\u4e3a / \u5219\u4ee3\u8868\u4e0d\u5141\u8bb8\u6293\u53d6\u6240\u6709\u9875\u9762\u3002 Allow \u4e00\u822c\u548c Disallow \u4e00\u8d77\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\uff0c\u7528\u6765\u6392\u9664\u67d0\u4e9b\u9650\u5236\u3002\u73b0\u5728\u6211\u4eec\u8bbe\u7f6e\u4e3a /public/\uff0c\u5219\u8868\u793a\u6240\u6709\u9875\u9762\u4e0d\u5141\u8bb8\u6293\u53d6\uff0c\u4f46\u53ef\u4ee5\u6293\u53d6 public \u76ee\u5f55\u3002 \u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u51e0\u4e2a\u4f8b\u5b50\u3002\u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: / \u5141\u8bb8\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: \u53e6\u5916\uff0c\u76f4\u63a5\u628a robots.txt \u6587\u4ef6\u7559\u7a7a\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u7f51\u7ad9\u67d0\u4e9b\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: /private/ Disallow: /tmp/ \u53ea\u5141\u8bb8\u67d0\u4e00\u4e2a\u722c\u866b\u8bbf\u95ee\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: WebCrawler Disallow: User-agent: * Disallow: / \u8fd9\u4e9b\u662f robots.txt \u7684\u4e00\u4e9b\u5e38\u89c1\u5199\u6cd5\u3002 \u722c\u866b\u540d\u79f0 \u5927\u5bb6\u53ef\u80fd\u4f1a\u7591\u60d1\uff0c\u722c\u866b\u540d\u662f\u54ea\u513f\u6765\u7684\uff1f\u4e3a\u4ec0\u4e48\u5c31\u53eb\u8fd9\u4e2a\u540d\uff1f\u5176\u5b9e\u5b83\u662f\u6709\u56fa\u5b9a\u540d\u5b57\u7684\u4e86\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u5c31\u53eb\u4f5c BaiduSpider\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\u53ca\u5bf9\u5e94\u7684\u7f51\u7ad9\u3002 \u722c\u866b\u540d\u79f0 \u540d\u3000\u3000\u79f0 \u7f51\u3000\u3000\u7ad9 BaiduSpider \u767e\u5ea6 www.baidu.com Googlebot \u8c37\u6b4c www.google.com 360Spider 360 \u641c\u7d22 www.so.com YodaoBot \u6709\u9053 www.youdao.com ia_archiver Alexa www.alexa.cn Scooter altavista www.altavista.com robotparser \u4e86\u89e3 Robots \u534f\u8bae\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 robotparser \u6a21\u5757\u6765\u89e3\u6790 robots.txt \u4e86\u3002\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b RobotFileParser \uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u67d0\u7f51\u7ad9\u7684 robots.txt \u6587\u4ef6\u6765\u5224\u65ad\u4e00\u4e2a\u722c\u53d6\u722c\u866b\u662f\u5426\u6709\u6743\u9650\u6765\u722c\u53d6\u8fd9\u4e2a\u7f51\u9875\u3002 \u8be5\u7c7b\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6784\u9020\u65b9\u6cd5\u91cc\u4f20\u5165 robots.txt \u7684\u94fe\u63a5\u5373\u53ef\u3002\u9996\u5148\u770b\u4e00\u4e0b\u5b83\u7684\u58f0\u660e\uff1a urllib . robotparser . RobotFileParser ( url = '' ) <urllib.robotparser.RobotFileParser at 0x1dbbcc44d30> \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u6700\u540e\u518d\u4f7f\u7528 set_url() \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e0b\u4e5f\u53ef\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u8fd9\u4e2a\u7c7b\u5e38\u7528\u7684\u51e0\u4e2a\u65b9\u6cd5\u3002 set_url \uff1a\u7528\u6765\u8bbe\u7f6e robots.txt \u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u5728\u521b\u5efa RobotFileParser \u5bf9\u8c61\u65f6\u4f20\u5165\u4e86\u94fe\u63a5\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8bbe\u7f6e\u4e86\u3002 read \uff1a\u8bfb\u53d6 robots.txt \u6587\u4ef6\u5e76\u8fdb\u884c\u5206\u6790\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6267\u884c\u4e00\u4e2a\u8bfb\u53d6\u548c\u5206\u6790\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u90fd\u4f1a\u4e3a False\uff0c\u6240\u4ee5\u4e00\u5b9a\u8bb0\u5f97\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u662f\u6267\u884c\u4e86\u8bfb\u53d6\u64cd\u4f5c\u3002 parse \uff1a\u7528\u6765\u89e3\u6790 robots.txt \u6587\u4ef6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f robots.txt \u67d0\u4e9b\u884c\u7684\u5185\u5bb9\uff0c\u5b83\u4f1a\u6309\u7167 robots.txt \u7684\u8bed\u6cd5\u89c4\u5219\u6765\u5206\u6790\u8fd9\u4e9b\u5185\u5bb9\u3002 can_fetch \uff1a\u8be5\u65b9\u6cd5\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f User-agent\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6293\u53d6\u7684 URL\u3002\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u8be5\u641c\u7d22\u5f15\u64ce\u662f\u5426\u53ef\u4ee5\u6293\u53d6\u8fd9\u4e2a URL\uff0c\u8fd4\u56de\u7ed3\u679c\u662f True \u6216 False\u3002 mtime \uff1a\u8fd4\u56de\u7684\u662f\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\uff0c\u8fd9\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u68c0\u67e5\u6765\u6293\u53d6\u6700\u65b0\u7684 robots.txt\u3002 modified \uff1a\u5b83\u540c\u6837\u5bf9\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u5f88\u6709\u5e2e\u52a9\uff0c\u5c06\u5f53\u524d\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\u3002 \u8fd9\u91cc\u4ee5\u7b80\u4e66\u4e3a\u4f8b\uff0c\u9996\u5148\u521b\u5efa RobotFileParser \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 set_url \u65b9\u6cd5\u8bbe\u7f6e\u4e86 robots.txt \u7684\u94fe\u63a5\uff1a # need to fix from urllib.robotparser import RobotFileParser rp = RobotFileParser () rp . set_url ( 'http://www.jianshu.com/robots.txt' ) rp . read () print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" )) False False \u5f53\u7136\uff0c\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u76f4\u63a5\u7528\u5982\u4e0b\u65b9\u6cd5\u8bbe\u7f6e\uff1a rp = RobotFileParser ( 'http://www.jianshu.com/robots.txt' ) \u63a5\u7740\u5229\u7528 can_fetch \u65b9\u6cd5\u5224\u65ad\u4e86\u7f51\u9875\u662f\u5426\u53ef\u4ee5\u88ab\u6293\u53d6\u3002 \u8fd9\u91cc\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 parse \u65b9\u6cd5\u6267\u884c\u8bfb\u53d6\u548c\u5206\u6790\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a # need to fix from urllib.robotparser import RobotFileParser from urllib.request import urlopen rp = RobotFileParser () rp . parse ( urlopen ( 'http://www.jianshu.com/robots.txt' ) . read () . decode ( 'utf-8' ) . split ( ' \\n ' )) print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" ))","title":"6.7.urllib"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#request","text":"hurllib.request \u6a21\u5757\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6784\u9020 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u8fc7\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5e26\u6709\u5904\u7406\u6388\u6743\u9a8c\u8bc1\uff08authentication\uff09\u3001\u91cd\u5b9a\u5411\uff08redirection)\u3001\u6d4f\u89c8\u5668 Cookies \u4ee5\u53ca\u5176\u4ed6\u5185\u5bb9\u3002","title":"request \u6a21\u5757"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlopen","text":"urllib . request . urlopen ( url , data = None , [ timeout ,] * , cafile = None , capath = None , cadefault = False ) # data \u9644\u52a0\u6570\u636e # timeout \u8d85\u65f6\u65f6\u95f4 # context \u5fc5\u987b\u662f ssl.SSLContext \u7c7b\u578b\uff0c\u7528\u6765\u6307\u5b9a SSL \u8bbe\u7f6e # cafile \u548c capath \u5206\u522b\u6307\u5b9a CA \u8bc1\u4e66\u548c\u5b83\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u5728\u8bf7\u6c42 HTTPS \u94fe\u63a5\u65f6\u4f1a\u6709\u7528 # cadefault \u73b0\u5728\u5df2\u7ecf\u5f03\u7528\u4e86\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a False \u4f8b\u5982\uff0c\u8981\u8bf7\u6c42 Python \u5b98\u7f51\uff1a import urllib.request url = 'https://www.python.org' # response\u662f\u4e00\u4e2a HTTPResposne \u7c7b\u578b\u7684\u5bf9\u8c61 response = urllib . request . urlopen ( url = url ) # \u8bfb\u5165\u7f51\u9875\u5185\u5bb9 \u8fd9\u662f\u4e00\u4e2abytes\u5b57\u7b26\u4e32 response . read () # \u54cd\u5e94\u7684\u72b6\u6001\u7801 response . status # \u54cd\u5e94\u7684\u72b6\u6001\u4fe1\u606f response . reason # \u54cd\u5e94\u7684\u5934\u4fe1\u606f response . getheaders () # \u83b7\u53d6\u54cd\u5e94\u7684\u5934\u4fe1\u606f\u7684\u67d0\u4e2a\u53c2\u6570 response . getheader ( 'Server' ) 'nginx' \u4e3b\u8981\u5305\u542b readinto\u3001fileno \u7b49\u65b9\u6cd5\uff0c\u4ee5\u53ca msg\u3001version\u3001debuglevel\u3001closed \u7b49\u5c5e\u6027\u3002","title":"urlopen"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#data","text":"\u5982\u679c\u8981\u6dfb\u52a0 data \u53c2\u6570\uff0c\u9700\u8981\u4f7f\u7528 bytes \u65b9\u6cd5\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5b57\u8282\u6d41\u7f16\u7801\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u5373 bytes \u7c7b\u578b\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f20\u9012\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf7\u6c42\u65b9\u5f0f\u5c31\u4e0d\u518d\u662f GET \u65b9\u5f0f\uff0c\u800c\u662f POST \u65b9\u5f0f\u3002 # import urllib.parse import urllib.request # \u4f7f\u7528\u4e86 bytes \u65b9\u6cd5\u7f16\u7801\u6210\u5b57\u8282\u6d41 # data = bytes(urllib.parse.urlencode({'word': 'hello'}), encoding='utf8') data = bytes ( \"word=hello\" , encoding = \"utf-8\" ) response = urllib . request . urlopen ( 'http://httpbin.org/post' , data = data ) print ( response . read () . decode ( \"utf-8\" )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"word\": \"hello\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"10\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.6\", \"X-Amzn-Trace-Id\": \"Root=1-5ee46694-38358ae8257a47e8d0f88538\" }, \"json\": null, \"origin\": \"157.122.62.84\", \"url\": \"http://httpbin.org/post\" } \u8bf7\u6c42\u7684 URL \u4e3a\uff1a http://httpbin.org/post \uff0c\u8fd9\u4e2a\u94fe\u63a5\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5 POST \u8bf7\u6c42\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa Request \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5176\u4e2d\u5c31\u5305\u542b\u4f20\u9012\u7684 data \u53c2\u6570\u3002 \u6211\u4eec\u4f20\u9012\u7684\u53c2\u6570\u51fa\u73b0\u5728\u4e86 form \u5b57\u6bb5\u4e2d\uff0c\u8fd9\u8868\u660e\u662f\u6a21\u62df\u4e86\u8868\u5355\u63d0\u4ea4\u7684\u65b9\u5f0f\uff0c\u4ee5 POST \u65b9\u5f0f\u4f20\u8f93\u6570\u636e\u3002","title":"data \u53c2\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#timeout","text":"timeout \u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u610f\u601d\u5c31\u662f\u5982\u679c\u8bf7\u6c42\u8d85\u51fa\u4e86\u8bbe\u7f6e\u7684\u8fd9\u4e2a\u65f6\u95f4\uff0c\u8fd8\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\uff0c\u5c31\u4f1a\u629b\u51fa URLError \u5f02\u5e38\uff0cURLError \u5f02\u5e38\u5c5e\u4e8e urllib.error \u6a21\u5757\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u8be5\u53c2\u6570\uff0c\u5c31\u4f1a\u4f7f\u7528\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u3002\u5b83\u652f\u6301 HTTP\u3001HTTPS\u3001FTP \u8bf7\u6c42\u3002 \u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u53ef\u4ee5\u4e3a None \uff0c\u8868\u793a\u65e0\u8d85\u65f6\u9650\u5236\u3002\u4f46\u5373\u4f7f\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u4e3a None \uff0c\u6700\u540e\u53ef\u80fd\u8fd8\u662f\u4f1a\u53d1\u751f\u8d85\u65f6\uff0c\u6b64\u65f6\u8d85\u65f6\u53ef\u80fd\u662fHTTP\u7f51\u7edc\u8d85\u65f6\u3002\u800c\u4e0d\u662f\u8d85\u8fc7\u4e86\u9650\u5b9a\u7684\u65f6\u95f4\u3002 import urllib.request # 1\u79d2\u5185\u5f97\u5230\u54cd\u5e94\uff0c\u5219\u4e0d\u4f1a\u629b\u51faURLError \u5f02\u5e38 try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 1 ) print ( response . read () . decode ( \"utf-8\" )) except : print ( 'TIME OUT' ) { \"args\": {}, \"headers\": { \"Accept-Encoding\": \"identity\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.6\", \"X-Amzn-Trace-Id\": \"Root=1-5ee46694-4499269c47c50804469a0aea\" }, \"origin\": \"157.122.62.84\", \"url\": \"http://httpbin.org/get\" } \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u6765\u63a7\u5236\u4e00\u4e2a\u7f51\u9875\u5982\u679c\u957f\u65f6\u95f4\u672a\u54cd\u5e94\uff0c\u5c31\u8df3\u8fc7\u5b83\u7684\u6293\u53d6\u3002 # need to fix. output should be 'TIME OUT 1' import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 0.1 ) except urllib . error . URLError as e : if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT 1' ) except Exception : print ( 'TIME OUT 2' ) TIME OUT 1 \u4e00\u822c\u6765\u8bf4\uff0c0.1 \u79d2\u5185\u57fa\u672c\u4e0d\u53ef\u80fd\u5f97\u5230\u670d\u52a1\u5668\u54cd\u5e94\uff0c\u56e0\u6b64\u8f93\u51fa\u4e86 TIME OUT \u7684\u63d0\u793a\u3002","title":"timeout \u53c2\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#request_1","text":"\u5229\u7528 urlopen \u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6700\u57fa\u672c\u8bf7\u6c42\u7684\u53d1\u8d77\uff0c\u4f46\u8fd9\u51e0\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u5e76\u4e0d\u8db3\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\u3002\u5982\u679c\u8bf7\u6c42\u4e2d\u9700\u8981\u52a0\u5165 Headers \u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u5229\u7528\u66f4\u5f3a\u5927\u7684 Request \u7c7b\u6765\u6784\u5efa\u3002 import urllib.request request = urllib . request . Request ( 'https://python.org' ) response = urllib . request . urlopen ( request ) print ( response . read () . decode ( 'utf-8' )) <!doctype html> <!--[if lt IE 7]> <html class=\"no-js ie6 lt-ie7 lt-ie8 lt-ie9\"> <![endif]--> <!--[if IE 7]> <html class=\"no-js ie7 lt-ie8 lt-ie9\"> <![endif]--> <!--[if IE 8]> <html class=\"no-js ie8 lt-ie9\"> <![endif]--> <!--[if gt IE 8]><!--><html class=\"no-js\" . . . 0be1d290.js\" charset=\"utf-8\"></script> <![endif]--> </body> </html> \u4f9d\u7136\u662f\u7528 urlopen \u65b9\u6cd5\u6765\u53d1\u9001\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u4e0d\u518d\u662f URL\uff0c\u800c\u662f\u4e00\u4e2a Request \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u901a\u8fc7\u6784\u9020\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u65b9\u9762\u6211\u4eec\u53ef\u4ee5\u5c06\u8bf7\u6c42\u72ec\u7acb\u6210\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u66f4\u52a0\u4e30\u5bcc\u548c\u7075\u6d3b\u5730\u914d\u7f6e\u53c2\u6570\u3002 Request \u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a class urllib . request . Request ( url , data = None , headers = {}, origin_req_host = None , unverifiable = False , method = None ) url \uff1a\u7528\u4e8e\u8bf7\u6c42 URL\uff0c\u8fd9\u662f\u5fc5\u4f20\u53c2\u6570\uff0c\u5176\u4ed6\u90fd\u662f\u53ef\u9009\u53c2\u6570\u3002 data \uff1abytes\uff08\u5b57\u8282\u6d41\uff09\u7c7b\u578b\u3002\u5982\u679c\u5b83\u662f\u5b57\u5178\uff0c\u53ef\u4ee5\u5148\u7528 urllib.parse \u6a21\u5757\u91cc\u7684 urlencode() \u7f16\u7801\u3002 headers \uff1a\u5b83\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4e5f\u5c31\u662f\u8bf7\u6c42\u5934\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6784\u9020\u8bf7\u6c42\u65f6\u901a\u8fc7 headers \u53c2\u6570\u76f4\u63a5\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8bf7\u6c42\u5b9e\u4f8b\u7684 add_header() \u65b9\u6cd5\u6dfb\u52a0\u3002\u6dfb\u52a0\u8bf7\u6c42\u5934\u6700\u5e38\u7528\u7684\u7528\u6cd5\u5c31\u662f\u901a\u8fc7\u4fee\u6539 User-Agent \u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\uff0c\u9ed8\u8ba4\u7684 User-Agent \u662f Python-urllib\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5b83\u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\u3002\u6bd4\u5982\u8981\u4f2a\u88c5\u706b\u72d0\u6d4f\u89c8\u5668\uff0c\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\uff1a Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11 origin_req_host \uff1a\u6307\u7684\u662f\u8bf7\u6c42\u65b9\u7684 host \u540d\u79f0\u6216\u8005 IP \u5730\u5740\u3002 unverifiable \uff1a\u8868\u793a\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u662f\u65e0\u6cd5\u9a8c\u8bc1\u7684\uff0c\u9ed8\u8ba4\u662f False\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u7528\u6237\u6ca1\u6709\u8db3\u591f\u6743\u9650\u6765\u9009\u62e9\u63a5\u6536\u8fd9\u4e2a\u8bf7\u6c42\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a HTML \u6587\u6863\u4e2d\u7684\u56fe\u7247\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u81ea\u52a8\u6293\u53d6\u56fe\u50cf\u7684\u6743\u9650\uff0c\u8fd9\u65f6 unverifiable \u7684\u503c\u5c31\u662f True\u3002 method \uff1a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u6307\u793a\u8bf7\u6c42\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 GET\u3001POST \u548c PUT \u7b49\u3002 \u4e0b\u9762\u6211\u4eec\u4f20\u5165\u591a\u4e2a\u53c2\u6570\u6784\u5efa\u8bf7\u6c42\u6765\u770b\u4e00\u4e0b\uff1a from urllib import request , parse url = 'http://httpbin.org/post' headers = { 'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' , 'Host' : 'httpbin.org' } dict = { 'name' : 'Germey' } data = bytes ( parse . urlencode ( dict ), encoding = 'utf8' ) # data = b'name=Germey' req = request . Request ( url = url , data = data , headers = headers , method = 'POST' ) response = request . urlopen ( req ) print ( response . read () . decode ( 'utf-8' )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"name\": \"Germey\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"11\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\", \"X-Amzn-Trace-Id\": \"Root=1-5ee46699-5c8f13e39c460e544f38df00\" }, \"json\": null, \"origin\": \"157.122.62.84\", \"url\": \"http://httpbin.org/post\" } \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 4 \u4e2a\u53c2\u6570\u6784\u9020\u4e86\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u4e2d url \u5373\u8bf7\u6c42 URL\uff0cheaders \u4e2d\u6307\u5b9a\u4e86 User-Agent \u548c Host\uff0c\u53c2\u6570 data \u7528 urlencode \u548c bytes \u65b9\u6cd5\u8f6c\u6210\u5b57\u8282\u6d41\u3002\u53e6\u5916\uff0c\u6307\u5b9a\u4e86\u8bf7\u6c42\u65b9\u5f0f\u4e3a POST\u3002 \u89c2\u5bdf\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u6210\u529f\u8bbe\u7f6e\u4e86 data\u3001headers \u548c method\u3002 \u53e6\u5916\uff0cheaders \u4e5f\u53ef\u4ee5\u7528 add_header \u65b9\u6cd5\u6765\u6dfb\u52a0\uff1a req = request . Request ( url = url , data = data , method = 'POST' ) req . add_header ( 'User-Agent' , 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' )","title":"Request"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#handler","text":"\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u867d\u7136\u53ef\u4ee5\u6784\u9020\u8bf7\u6c42\uff0c\u4f46\u5982\u679c\u8981\u5904\u7406\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 Cookies \u5904\u7406\u3001\u4ee3\u7406\u8bbe\u7f6e\u7b49\uff09\uff0c\u5219\u9700\u8981 Handler \u3002\u6211\u4eec\u53ef\u4ee5\u628a Handler \u7406\u89e3\u4e3a\u5404\u79cd\u5904\u7406\u5668\uff0c\u6709\u4e13\u95e8\u5904\u7406\u767b\u5f55\u9a8c\u8bc1\u7684\uff0c\u6709\u5904\u7406 Cookies \u7684\uff0c\u6709\u5904\u7406\u4ee3\u7406\u8bbe\u7f6e\u7684\u3002\u5229\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u505a\u5230 HTTP \u8bf7\u6c42\u4e2d\u6240\u6709\u7684\u4e8b\u60c5\u3002 urllib.request \u6a21\u5757\u91cc\u7684 BaseHandler \u7c7b\u662f\u6240\u6709\u5176\u4ed6 Handler \u7684\u7236\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 default_open\u3001protocol_request \u7b49\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u6709\u5404\u79cd Handler \u5b50\u7c7b\u7ee7\u627f\u8fd9\u4e2a BaseHandler \u7c7b\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a HTTPDefaultErrorHandler \u7528\u4e8e\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\uff0c\u9519\u8bef\u90fd\u4f1a\u629b\u51fa HTTPError \u7c7b\u578b\u7684\u5f02\u5e38\u3002 HTTPRedirectHandler \u7528\u4e8e\u5904\u7406\u91cd\u5b9a\u5411\u3002 HTTPCookieProcessor \u7528\u4e8e\u5904\u7406 Cookies\u3002 ProxyHandler \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7406\uff0c\u9ed8\u8ba4\u4ee3\u7406\u4e3a\u7a7a\u3002 HTTPPasswordMgr \u7528\u4e8e\u7ba1\u7406\u5bc6\u7801\uff0c\u5b83\u7ef4\u62a4\u4e86\u7528\u6237\u540d\u5bc6\u7801\u7684\u8868\u3002 HTTPBasicAuthHandler \u7528\u4e8e\u7ba1\u7406\u8ba4\u8bc1\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u6253\u5f00\u65f6\u9700\u8981\u8ba4\u8bc1\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5b83\u6765\u89e3\u51b3\u8ba4\u8bc1\u95ee\u9898\u3002 \u53e6\u5916\u8fd8\u6709\u5176\u4ed6\u7684 Handler \u7c7b\uff0c\u5728\u8fd9\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler \u5173\u4e8e\u600e\u4e48\u4f7f\u7528\u5b83\u4eec\uff0c\u73b0\u5728\u5148\u4e0d\u7528\u7740\u6025\uff0c\u540e\u9762\u4f1a\u6709\u5b9e\u4f8b\u6f14\u793a\u3002 \u53e6\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\u5c31\u662f OpenerDirector\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u4e3a Opener\u3002\u6211\u4eec\u4e4b\u524d\u7528\u8fc7 urlopen \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f urllib \u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u4e2a Opener\u3002 \u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 Opener \u5462\uff1f\u56e0\u4e3a\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\u3002\u4e4b\u524d\u4f7f\u7528\u7684 Request \u548c urlopen \u76f8\u5f53\u4e8e\u7c7b\u5e93\u4e3a\u4f60\u5c01\u88c5\u597d\u4e86\u6781\u5176\u5e38\u7528\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u4eec\u53ef\u4ee5\u5b8c\u6210\u57fa\u672c\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u73b0\u5728\u4e0d\u4e00\u6837\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u6df1\u5165\u4e00\u5c42\u8fdb\u884c\u914d\u7f6e\uff0c\u4f7f\u7528\u66f4\u5e95\u5c42\u7684\u5b9e\u4f8b\u6765\u5b8c\u6210\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u7528\u5230\u4e86 Opener\u3002 Opener \u53ef\u4ee5\u4f7f\u7528 open \u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u548c urlopen \u5982\u51fa\u4e00\u8f99\u3002\u90a3\u4e48\uff0c\u5b83\u548c Handler \u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u5229\u7528 Handler \u6765\u6784\u5efa Opener\u3002 \u4e0b\u9762\u7528\u51e0\u4e2a\u5b9e\u4f8b\u6765\u770b\u770b\u5b83\u4eec\u7684\u7528\u6cd5\u3002","title":"Handler"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#_1","text":"\u6709\u4e9b\u7f51\u7ad9\u5728\u6253\u5f00\u65f6\u5c31\u4f1a\u5f39\u51fa\u63d0\u793a\u6846\uff0c\u76f4\u63a5\u63d0\u793a\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u80fd\u67e5\u770b\u9875\u9762\uff0c\u5982\u56fe\u6240\u793a\uff1a HTTPBasicAuthHandler \u5c31\u53ef\u4ee5\u8bf7\u6c42\u8fd9\u6837\u7684\u9875\u9762\uff1a from urllib.request import ( HTTPPasswordMgrWithDefaultRealm , HTTPBasicAuthHandler , build_opener ) from urllib.error import URLError username = 'name' password = '12345678' url = 'https://httpbin.org/basic-auth/name/12345678' p = HTTPPasswordMgrWithDefaultRealm () p . add_password ( None , url , username , password ) auth_handler = HTTPBasicAuthHandler ( p ) opener = build_opener ( auth_handler ) try : result = opener . open ( url ) html = result . read () . decode ( 'utf-8' ) print ( html ) except URLError as e : print ( e . reason ) { \"authenticated\": true, \"user\": \"name\" } \u8fd9\u91cc\u9996\u5148\u5b9e\u4f8b\u5316 HTTPBasicAuthHandler \u5bf9\u8c61\uff0c\u5176\u53c2\u6570\u662f HTTPPasswordMgrWithDefaultRealm \u5bf9\u8c61\uff0c\u5b83\u5229\u7528 add_password \u65b9\u6cd5\u6dfb\u52a0\u8fdb\u53bb\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u8fd9\u6837\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u5904\u7406\u9a8c\u8bc1\u7684 Handler\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u5e76\u4f7f\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u4e00\u4e2a Opener\uff0c\u8fd9\u4e2a Opener \u5728\u53d1\u9001\u8bf7\u6c42\u65f6\u5c31\u76f8\u5f53\u4e8e\u5df2\u7ecf\u9a8c\u8bc1\u6210\u529f\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528 Opener \u7684 open \u65b9\u6cd5\u6253\u5f00\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u9a8c\u8bc1\u4e86\u3002\u8fd9\u91cc\u83b7\u53d6\u5230\u7684\u7ed3\u679c\u5c31\u662f\u9a8c\u8bc1\u540e\u7684\u9875\u9762\u6e90\u7801\u5185\u5bb9\u3002","title":"\u9a8c\u8bc1"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#_2","text":"\u5728\u505a\u722c\u866b\u7684\u65f6\u5019\uff0c\u514d\u4e0d\u4e86\u8981\u4f7f\u7528\u4ee3\u7406\uff0c\u5982\u679c\u8981\u6dfb\u52a0\u4ee3\u7406\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a from urllib.error import URLError from urllib.request import ProxyHandler , build_opener proxy_handler = ProxyHandler ({ 'http' : 'http://127.0.0.1:9743' , 'https' : 'https://127.0.0.1:9743' }) opener = build_opener ( proxy_handler ) try : response = opener . open ( 'https://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) except URLError as e : print ( e . reason ) [WinError 10061] No connection could be made because the target machine actively refused it \u8fd9\u91cc\u6211\u4eec\u5728\u672c\u5730\u642d\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7406\uff0c\u5b83\u8fd0\u884c\u5728 9743 \u7aef\u53e3\u4e0a\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86 ProxyHandler\uff0c\u5176\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u540d\u662f\u534f\u8bae\u7c7b\u578b\uff08\u6bd4\u5982 HTTP \u6216\u8005 HTTPS \u7b49\uff09\uff0c\u952e\u503c\u662f\u4ee3\u7406\u94fe\u63a5\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u4ee3\u7406\u3002 \u7136\u540e\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u53ca build_opener \u65b9\u6cd5\u6784\u9020\u4e00\u4e2a Opener\uff0c\u4e4b\u540e\u53d1\u9001\u8bf7\u6c42\u5373\u53ef\u3002","title":"\u4ee3\u7406"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#cookies","text":"\u83b7\u53d6\u7f51\u7ad9\u7684 Cookies\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a CookieJar \u5bf9\u8c61\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u9700\u8981\u5229\u7528 HTTPCookieProcessor \u6765\u6784\u5efa\u4e00\u4e2a Handler\uff0c\u6700\u540e\u5229\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u51fa Opener\uff0c\u6267\u884c open \u51fd\u6570\u5373\u53ef\u3002 import http.cookiejar , urllib.request cookie = http . cookiejar . CookieJar () handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) for item in cookie : print ( item . name + \"=\" + item . value ) BAIDUID=A5F653A099838B93FFDFA2E2E5DF2B7F:FG=1 BIDUPSID=A5F653A099838B93B7152CE45EB47D2A H_PS_PSSID=31906_1420_31669_21080_31069_31253_31765_32045_30823_26350 PSTM=1592026781 BDSVRTM=0 BD_HOME=1 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8f93\u51fa\u4e86\u6bcf\u6761 Cookie \u7684\u540d\u79f0\u548c\u503c\u3002 \u4e0d\u8fc7\u65e2\u7136\u80fd\u8f93\u51fa\uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u8f93\u51fa\u6210\u6587\u4ef6\u683c\u5f0f\u5462\uff1f\u6211\u4eec\u77e5\u9053 Cookies \u5b9e\u9645\u4e0a\u4e5f\u662f\u4ee5\u6587\u672c\u5f62\u5f0f\u4fdd\u5b58\u7684\u3002 \u7b54\u6848\u5f53\u7136\u662f\u80af\u5b9a\u7684\uff0c\u8fd9\u91cc\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u4f8b\u6765\u770b\u770b\uff1a filename = 'cookies.txt' cookie = http . cookiejar . MozillaCookieJar ( filename ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) cookie . save ( ignore_discard = True , ignore_expires = True ) \u8fd9\u65f6 CookieJar \u5c31\u9700\u8981\u6362\u6210 MozillaCookieJar\uff0c\u5b83\u5728\u751f\u6210\u6587\u4ef6\u65f6\u4f1a\u7528\u5230\uff0c\u662f CookieJar \u7684\u5b50\u7c7b\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406 Cookies \u548c\u6587\u4ef6\u76f8\u5173\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u53ef\u4ee5\u5c06 Cookies \u4fdd\u5b58\u6210 Mozilla \u578b\u6d4f\u89c8\u5668\u7684 Cookies \u683c\u5f0f\u3002 \u8fd0\u884c\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u751f\u6210\u4e86\u4e00\u4e2a cookies.txt \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a # Netscape HTTP Cookie File # http://curl.haxx.se/rfc/cookie_spec.html # This is a generated file! Do not edit. .baidu.com TRUE / FALSE 3622386254 BAIDUID 05AE39B5F56C1DEC474325CDA522D44F:FG=1 .baidu.com TRUE / FALSE 3622386254 BIDUPSID 05AE39B5F56C1DEC474325CDA522D44F .baidu.com TRUE / FALSE H_PS_PSSID 19638_1453_17710_18240_21091_18560_17001_ 21191_21161 .baidu.com TRUE / FALSE 3622386254 PSTM 1474902606 www.baidu.com FALSE / FALSE BDSVRTM 0 www.baidu.com FALSE / FALSE BD_HOME 0 \u53e6\u5916\uff0cLWPCookieJar \u540c\u6837\u53ef\u4ee5\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u4f46\u662f\u4fdd\u5b58\u7684\u683c\u5f0f\u548c MozillaCookieJar \u4e0d\u4e00\u6837\uff0c\u5b83\u4f1a\u4fdd\u5b58\u6210 libwww-perl(LWP) \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\u3002 \u8981\u4fdd\u5b58\u6210 LWP \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u5c31\u6539\u4e3a\uff1a cookie = http . cookiejar . LWPCookieJar ( filename ) \u6b64\u65f6\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a #LWP-Cookies-2.0 Set-Cookie3: BAIDUID=\"0CE9C56F598E69DB375B7C294AE5C591:FG=1\"; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BIDUPSID=0CE9C56F598E69DB375B7C294AE5C591; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: H_PS_PSSID=20048_1448_18240_17944_21089_21192_21161_20929; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; discard; version=0 Set-Cookie3: PSTM=1474902671; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BDSVRTM=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 Set-Cookie3: BD_HOME=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 \u7531\u6b64\u770b\u6765\uff0c\u751f\u6210\u7684\u683c\u5f0f\u8fd8\u662f\u6709\u6bd4\u8f83\u5927\u5dee\u5f02\u7684\u3002 \u90a3\u4e48\uff0c\u751f\u6210\u4e86 Cookies \u6587\u4ef6\u540e\uff0c\u600e\u6837\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5e76\u5229\u7528\u5462\uff1f \u4e0b\u9762\u6211\u4eec\u4ee5 LWPCookieJar \u683c\u5f0f\u4e3a\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a cookie = http . cookiejar . LWPCookieJar () cookie . load ( 'cookies.txt' , ignore_discard = True , ignore_expires = True ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8c03\u7528 load \u65b9\u6cd5\u6765\u8bfb\u53d6\u672c\u5730\u7684 Cookies \u6587\u4ef6\uff0c\u83b7\u53d6\u5230\u4e86 Cookies \u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\u524d\u63d0\u662f\u6211\u4eec\u9996\u5148\u751f\u6210\u4e86 LWPCookieJar \u683c\u5f0f\u7684 Cookies\uff0c\u5e76\u4fdd\u5b58\u6210\u6587\u4ef6\uff0c\u7136\u540e\u8bfb\u53d6 Cookies \u4e4b\u540e\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u6784\u5efa Handler \u548c Opener \u5373\u53ef\u5b8c\u6210\u64cd\u4f5c\u3002 \u8fd0\u884c\u7ed3\u679c\u6b63\u5e38\u7684\u8bdd\uff0c\u4f1a\u8f93\u51fa\u767e\u5ea6\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7edd\u5927\u591a\u6570\u8bf7\u6c42\u529f\u80fd\u7684\u8bbe\u7f6e\u4e86\u3002 \u8fd9\u4fbf\u662f urllib \u5e93\u4e2d request \u6a21\u5757\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u5982\u679c\u60f3\u5b9e\u73b0\u66f4\u591a\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u660e\uff1a https://docs.python.org/3/library/urllib.request.html#basehandler-objects \u3002","title":"Cookies"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#_3","text":"urllib \u7684 error \u6a21\u5757\u5b9a\u4e49\u4e86\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0crequest \u6a21\u5757\u4fbf\u4f1a\u629b\u51fa error \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5f02\u5e38\u3002error \u6a21\u5757\u5b9a\u4e49\u4e86\u4e09\u79cd\u5f02\u5e38: ['ContentTooShortError', 'HTTPError', 'URLError']","title":"\u5904\u7406\u5f02\u5e38"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlerror","text":"URLError \u7c7b\u6765\u81ea urllib \u5e93\u7684 error \u6a21\u5757\uff0c\u5b83\u7ee7\u627f\u81ea OSError \u7c7b\uff0c\u662f error \u5f02\u5e38\u6a21\u5757\u7684\u57fa\u7c7b\uff0c\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u90fd\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u8fd9\u4e2a\u7c7b\u6765\u5904\u7406\u3002 \u5b83\u5177\u6709\u4e00\u4e2a\u5c5e\u6027 reason\uff0c\u5373\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 from urllib import request , error try : # \u8bf7\u6c42\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7f51\u9875 response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . URLError as e : print ( e . reason ) Bad Gateway","title":"URLError"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#httperror","text":"\u5b83\u662f URLError \u7684\u5b50\u7c7b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406 HTTP \u8bf7\u6c42\u9519\u8bef\uff0c\u6bd4\u5982\u8ba4\u8bc1\u8bf7\u6c42\u5931\u8d25\u7b49\u3002\u5b83\u6709\u5982\u4e0b 3 \u4e2a\u5c5e\u6027\u3002 code\uff1a\u8fd4\u56de HTTP \u72b6\u6001\u7801\uff0c\u6bd4\u5982 404 \u8868\u793a\u7f51\u9875\u4e0d\u5b58\u5728\uff0c500 \u8868\u793a\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7b49\u3002 reason\uff1a\u540c\u7236\u7c7b\u4e00\u6837\uff0c\u7528\u4e8e\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 headers\uff1a\u8fd4\u56de\u8bf7\u6c42\u5934\u3002 from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sat, 13 Jun 2020 05:40:02 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=82bor4hv5of8dd5dbdppp8jut2; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u4f9d\u7136\u662f\u540c\u6837\u7684\u7f51\u5740\uff0c\u8fd9\u91cc\u6355\u83b7\u4e86 HTTPError \u5f02\u5e38\uff0c\u8f93\u51fa\u4e86 reason\u3001code \u548c headers \u5c5e\u6027\u3002 \u56e0\u4e3a URLError \u662f HTTPError \u7684\u7236\u7c7b\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u9009\u62e9\u6355\u83b7\u5b50\u7c7b\u7684\u9519\u8bef\uff0c\u518d\u53bb\u6355\u83b7\u7236\u7c7b\u7684\u9519\u8bef\uff0c\u6240\u4ee5\u4e0a\u8ff0\u4ee3\u7801\u66f4\u597d\u7684\u5199\u6cd5\u5982\u4e0b\uff1a from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) except error . URLError as e : print ( e . reason ) else : print ( 'Request Successfully' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sat, 13 Jun 2020 05:40:02 GMT Content-Type: text/html; charset=UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=ekbuprp6akme47u5dm53uecti2; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5148\u6355\u83b7 HTTPError \uff0c\u83b7\u53d6\u5b83\u7684\u9519\u8bef\u72b6\u6001\u7801\u3001\u539f\u56e0\u3001headers \u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e0d\u662f HTTPError \u5f02\u5e38\uff0c\u5c31\u4f1a\u6355\u83b7 URLError \u5f02\u5e38\uff0c\u8f93\u51fa\u9519\u8bef\u539f\u56e0\u3002\u6700\u540e\uff0c\u7528 else \u6765\u5904\u7406\u6b63\u5e38\u7684\u903b\u8f91\u3002\u8fd9\u662f\u4e00\u4e2a\u8f83\u597d\u7684\u5f02\u5e38\u5904\u7406\u5199\u6cd5\u3002 \u6709\u65f6\u5019\uff0creason \u5c5e\u6027\u8fd4\u56de\u7684\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u518d\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'https://www.baidu.com' , timeout = 0.01 ) except urllib . error . URLError as e : print ( type ( e . reason )) if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT' ) <class 'socket.timeout'> TIME OUT \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u6765\u5f3a\u5236\u629b\u51fa timeout \u5f02\u5e38\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0creason \u5c5e\u6027\u7684\u7ed3\u679c\u662f socket.timeout \u7c7b\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528 isinstance \u65b9\u6cd5\u6765\u5224\u65ad\u5b83\u7684\u7c7b\u578b\uff0c\u4f5c\u51fa\u66f4\u8be6\u7ec6\u7684\u5f02\u5e38\u5224\u65ad\u3002","title":"HTTPError"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#_4","text":"urllib \u5e93\u7684 parse \u6a21\u5757\uff0c\u5b83\u5b9a\u4e49\u4e86\u5904\u7406 URL \u7684\u6807\u51c6\u63a5\u53e3\uff0c\u4f8b\u5982\u5b9e\u73b0 URL \u5404\u90e8\u5206\u7684\u62bd\u53d6\u3001\u5408\u5e76\u4ee5\u53ca\u94fe\u63a5\u8f6c\u6362\u3002\u5b83\u652f\u6301\u5982\u4e0b\u534f\u8bae\u7684 URL \u5904\u7406\uff1afile\u3001ftp\u3001gopher\u3001hdl\u3001http\u3001https\u3001imap\u3001mailto\u3001 mms\u3001news\u3001nntp\u3001prospero\u3001rsync\u3001rtsp\u3001rtspu\u3001sftp\u3001 sip\u3001sips\u3001snews\u3001svn\u3001svn+ssh\u3001telnet \u548c wais\u3002","title":"\u89e3\u6790\u94fe\u63a5"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlparse","text":"\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0 URL \u7684\u8bc6\u522b\u548c\u5206\u6bb5\uff1a urllib . parse . urlparse ( urlstring , scheme = '' , allow_fragments = True ) urlstring \uff1a\u5f85\u89e3\u6790\u7684 URL scheme \uff1a\u5b83\u662f\u9ed8\u8ba4\u7684\u534f\u8bae\uff08\u6bd4\u5982 http \u6216 https \u7b49\uff09\u3002 scheme \u53c2\u6570\u53ea\u6709\u5728 urlstring \u4e2d\u4e0d\u5305\u542b scheme \u4fe1\u606f\u65f6\u624d\u751f\u6548\u3002 allow_fragments \uff1a\u662f\u5426\u5ffd\u7565 fragment\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a False\uff0cfragment \u90e8\u5206\u5c31\u4f1a\u88ab\u5ffd\u7565\uff0c\u5b83\u4f1a\u88ab\u89e3\u6790\u4e3a path\u3001parameters \u6216\u8005 query \u7684\u4e00\u90e8\u5206\uff0c\u800c fragment \u90e8\u5206\u4e3a\u7a7a\u3002\u5f53 URL \u4e2d\u4e0d\u5305\u542b params \u548c query \u65f6\uff0cfragment \u4fbf\u4f1a\u88ab\u89e3\u6790\u4e3a path \u7684\u4e00\u90e8\u5206 \u4f8b\u5b50\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( type ( result ), result ) <class 'urllib.parse.ParseResult'> ParseResult(scheme='http', netloc='www.baidu.com', path='/index.html', params='user', query='id=5', fragment='comment') \u53ef\u4ee5\u770b\u5230\uff0c\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a ParseResult \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u5305\u542b 6 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f scheme\u3001netloc\u3001path\u3001params\u3001query \u548c fragment\u3002 \u89c2\u5bdf\u4e00\u4e0b\u8be5\u5b9e\u4f8b\u7684 URL\uff1a http://www.baidu.com/index.html;user?id=5#comment \u53ef\u4ee5\u53d1\u73b0\uff0curlparse \u65b9\u6cd5\u5c06\u5176\u62c6\u5206\u6210\u4e86 6 \u4e2a\u90e8\u5206\u3002\u5927\u4f53\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u89e3\u6790\u65f6\u6709\u7279\u5b9a\u7684\u5206\u9694\u7b26\u3002\u6bd4\u5982\uff0c:// \u524d\u9762\u7684\u5c31\u662f scheme\uff0c\u4ee3\u8868\u534f\u8bae\uff1b\u7b2c\u4e00\u4e2a / \u7b26\u53f7\u524d\u9762\u4fbf\u662f netloc\uff0c\u5373\u57df\u540d\uff0c\u540e\u9762\u662f path\uff0c\u5373\u8bbf\u95ee\u8def\u5f84\uff1b\u5206\u53f7\uff1b\u540e\u9762\u662f params\uff0c\u4ee3\u8868\u53c2\u6570\uff1b\u95ee\u53f7\uff1f\u540e\u9762\u662f\u67e5\u8be2\u6761\u4ef6 query\uff0c\u4e00\u822c\u7528\u4f5c GET \u7c7b\u578b\u7684 URL\uff1b\u4e95\u53f7 #\u540e\u9762\u662f\u951a\u70b9\uff0c\u7528\u4e8e\u76f4\u63a5\u5b9a\u4f4d\u9875\u9762\u5185\u90e8\u7684\u4e0b\u62c9\u4f4d\u7f6e\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u6807\u51c6\u7684\u94fe\u63a5\u683c\u5f0f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a scheme://netloc/path;params?query#fragment \u4e00\u4e2a\u6807\u51c6\u7684 URL \u90fd\u4f1a\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\uff0c\u5229\u7528 urlparse \u65b9\u6cd5\u53ef\u4ee5\u5c06\u5b83\u62c6\u5206\u5f00\u6765\u3002 \u8fd4\u56de\u7ed3\u679c ParseResult \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7d22\u5f15\u987a\u5e8f\u6765\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u7528\u5c5e\u6027\u540d\u83b7\u53d6\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html#comment' , allow_fragments = False ) print ( result . scheme , result [ 0 ], result . netloc , result [ 1 ], sep = ' \\n ' ) http http www.baidu.com www.baidu.com","title":"urlparse"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlunparse","text":"\u6709\u4e86 urlparse \u65b9\u6cd5\uff0c\u76f8\u5e94\u5730\u5c31\u6709\u4e86\u5b83\u7684\u5bf9\u7acb\u65b9\u6cd5 urlunparse \u3002\u5b83\u63a5\u53d7\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u7684\u957f\u5ea6\u5fc5\u987b\u662f 6\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u53c2\u6570\u6570\u91cf\u4e0d\u8db3\u6216\u8005\u8fc7\u591a\u7684\u95ee\u9898\u3002 from urllib.parse import urlunparse data = [ 'http' , 'www.baidu.com' , 'index.html' , 'user' , 'a=6' , 'comment' ] print ( urlunparse ( data )) http://www.baidu.com/index.html;user?a=6#comment \u8fd9\u91cc\u53c2\u6570 data \u7528\u4e86\u5217\u8868\u7c7b\u578b\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\uff0c\u6bd4\u5982\u5143\u7ec4\u6216\u8005\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"urlunparse"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlsplit","text":"\u8fd9\u4e2a\u65b9\u6cd5\u548c urlparse \u65b9\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4e0d\u518d\u5355\u72ec\u89e3\u6790 params \u8fd9\u4e00\u90e8\u5206\uff0c\u53ea\u8fd4\u56de 5 \u4e2a\u7ed3\u679c\u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 params \u4f1a\u5408\u5e76\u5230 path \u4e2d\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlsplit result = urlsplit ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( result ) SplitResult(scheme='http', netloc='www.baidu.com', path='/index.html;user', query='id=5', fragment='comment') \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7ed3\u679c\u662f SplitResult \uff0c\u5b83\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\uff0c\u65e2\u53ef\u4ee5\u7528\u5c5e\u6027\u83b7\u53d6\u503c\uff0c\u4e5f\u53ef\u4ee5\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u3002","title":"urlsplit"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlunsplit","text":"\u4e0e urlunparse \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5b83\u4e5f\u662f\u5c06\u94fe\u63a5\u5404\u4e2a\u90e8\u5206\u7ec4\u5408\u6210\u5b8c\u6574\u94fe\u63a5\u7684\u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5143\u7ec4\u7b49\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u957f\u5ea6\u5fc5\u987b\u4e3a 5\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlunsplit data = [ 'http' , 'www.baidu.com' , 'index.html' , 'a=6' , 'comment' ] print ( urlunsplit ( data )) http://www.baidu.com/index.html?a=6#comment","title":"urlunsplit"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urljoin","text":"\u6709\u4e86 urlunparse \u548c urlunsplit \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u94fe\u63a5\u7684\u5408\u5e76\uff0c\u4e0d\u8fc7\u524d\u63d0\u5fc5\u987b\u8981\u6709\u7279\u5b9a\u957f\u5ea6\u7684\u5bf9\u8c61\uff0c\u94fe\u63a5\u7684\u6bcf\u4e00\u90e8\u5206\u90fd\u8981\u6e05\u6670\u5206\u5f00\u3002 \u6b64\u5916\uff0c\u751f\u6210\u94fe\u63a5\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f urljoin \u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a base_url\uff08\u57fa\u7840\u94fe\u63a5\uff09\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c06\u65b0\u7684\u94fe\u63a5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5206\u6790 base_url \u7684 scheme\u3001netloc \u548c path \u8fd9 3 \u4e2a\u5185\u5bb9\u5e76\u5bf9\u65b0\u94fe\u63a5\u7f3a\u5931\u7684\u90e8\u5206\u8fdb\u884c\u8865\u5145\uff0c\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u3002 from urllib.parse import urljoin print ( urljoin ( 'http://www.baidu.com' , 'FAQ.html' )) print ( urljoin ( 'http://www.baidu.com' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html?question=2' )) print ( urljoin ( 'http://www.baidu.com?wd=abc' , 'https://cuiqingcai.com/index.php' )) print ( urljoin ( 'http://www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com#comment' , '?category=2' )) http://www.baidu.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html?question=2 https://cuiqingcai.com/index.php http://www.baidu.com?category=2#comment www.baidu.com?category=2#comment www.baidu.com?category=2 \u53ef\u4ee5\u53d1\u73b0\uff0cbase_url \u63d0\u4f9b\u4e86\u4e09\u9879\u5185\u5bb9 scheme\u3001netloc \u548c path\u3002\u5982\u679c\u8fd9 3 \u9879\u5728\u65b0\u7684\u94fe\u63a5\u91cc\u4e0d\u5b58\u5728\uff0c\u5c31\u4e88\u4ee5\u8865\u5145\uff1b\u5982\u679c\u65b0\u7684\u94fe\u63a5\u5b58\u5728\uff0c\u5c31\u4f7f\u7528\u65b0\u7684\u94fe\u63a5\u7684\u90e8\u5206\u3002\u800c base_url \u4e2d\u7684 params\u3001query \u548c fragment \u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002","title":"urljoin"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#urlencode","text":"urlencode \u5728\u6784\u9020 GET \u8bf7\u6c42\u53c2\u6570\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlencode params = { 'name' : 'germey' , 'age' : 22 } base_url = 'http://www.baidu.com?' url = base_url + urlencode ( params ) print ( url ) http://www.baidu.com?name=germey&age=22 \u8fd9\u91cc\u9996\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u5178\u6765\u5c06\u53c2\u6570\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u8c03\u7528 urlencode \u65b9\u6cd5\u5c06\u5176\u5e8f\u5217\u5316\u4e3a GET \u8bf7\u6c42\u53c2\u6570\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u5e38\u7528\u3002\u6709\u65f6\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u6784\u9020\u53c2\u6570\uff0c\u6211\u4eec\u4f1a\u4e8b\u5148\u7528\u5b57\u5178\u6765\u8868\u793a\u3002\u8981\u8f6c\u5316\u4e3a URL \u7684\u53c2\u6570\u65f6\uff0c\u53ea\u9700\u8981\u8c03\u7528\u8be5\u65b9\u6cd5\u5373\u53ef\u3002","title":"urlencode"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#parse_qs","text":"\u6709\u4e86\u5e8f\u5217\u5316\uff0c\u5fc5\u7136\u5c31\u6709\u53cd\u5e8f\u5217\u5316\u3002\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e32 GET \u8bf7\u6c42\u53c2\u6570\uff0c\u5229\u7528 parse_qs \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b83\u8f6c\u56de\u5b57\u5178\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qs query = 'name=germey&amp;age=22' print ( parse_qs ( query )) {'name': ['germey'], 'age': ['22']} \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u8f6c\u56de\u4e3a\u5b57\u5178\u7c7b\u578b\u4e86\u3002","title":"parse_qs"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#parse_qsl","text":"\u8fd8\u6709\u4e00\u4e2a parse_qsl \u65b9\u6cd5\uff0c\u5b83\u7528\u4e8e\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qsl query = 'name=germey&amp;age=22' print ( parse_qsl ( query )) [('name', 'germey'), ('age', '22')] \u53ef\u4ee5\u770b\u5230\uff0c\u8fd0\u884c\u7ed3\u679c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u503c\u3002","title":"parse_qsl"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#quote","text":"\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5185\u5bb9\u8f6c\u5316\u4e3a URL \u7f16\u7801\u7684\u683c\u5f0f\u3002URL \u4e2d\u5e26\u6709\u4e2d\u6587\u53c2\u6570\u65f6\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e71\u7801\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e2d\u6587\u5b57\u7b26\u8f6c\u5316\u4e3a URL \u7f16\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import quote keyword = ' \u58c1\u7eb8 ' url = 'https://www.baidu.com/s?wd=' + quote ( keyword ) print ( url ) https://www.baidu.com/s?wd=%20%E5%A3%81%E7%BA%B8%20","title":"quote"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#unquote","text":"\u6709\u4e86 quote \u65b9\u6cd5\uff0c\u5f53\u7136\u8fd8\u6709 unquote \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c URL \u89e3\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import unquote url = 'https://www.baidu.com/s?wd= % E 5% A3 %81% E7% BA% B8' print ( unquote ( url )) https://www.baidu.com/s?wd=% E5% A3\ufffd% E7% BA% B8 \u8fd9\u662f\u4e0a\u9762\u5f97\u5230\u7684 URL \u7f16\u7801\u540e\u7684\u7ed3\u679c\uff0c\u518d\u5229\u7528 unquote \u65b9\u6cd5\u8fd8\u539f\u3002","title":"unquote"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#robots","text":"\u5229\u7528 urllib \u7684 robotparser \u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7ad9 Robots \u534f\u8bae\u7684\u5206\u6790\u3002","title":"\u5206\u6790 Robots \u534f\u8bae"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#robots_1","text":"Robots \u534f\u8bae\u4e5f\u79f0\u4f5c\u722c\u866b\u534f\u8bae\u3001\u673a\u5668\u4eba\u534f\u8bae\uff0c\u5b83\u7684\u5168\u540d\u53eb\u4f5c\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6\uff08Robots Exclusion Protocol\uff09\uff0c\u7528\u6765\u544a\u8bc9\u722c\u866b\u548c\u641c\u7d22\u5f15\u64ce\u54ea\u4e9b\u9875\u9762\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u53eb\u4f5c robots.txt \u7684\u6587\u672c\u6587\u4ef6\uff0c\u4e00\u822c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\u3002 \u5f53\u641c\u7d22\u722c\u866b\u8bbf\u95ee\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u5b83\u9996\u5148\u4f1a\u68c0\u67e5\u8fd9\u4e2a\u7ad9\u70b9\u6839\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728 robots.txt \u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\uff0c\u641c\u7d22\u722c\u866b\u4f1a\u6839\u636e\u5176\u4e2d\u5b9a\u4e49\u7684\u722c\u53d6\u8303\u56f4\u6765\u722c\u53d6\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\uff0c\u641c\u7d22\u722c\u866b\u4fbf\u4f1a\u8bbf\u95ee\u6240\u6709\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684\u9875\u9762\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a robots.txt \u7684\u6837\u4f8b\uff1a User-agent: * Disallow: / Allow: /public/ \u8fd9\u5b9e\u73b0\u4e86\u5bf9\u6240\u6709\u641c\u7d22\u722c\u866b\u53ea\u5141\u8bb8\u722c\u53d6 public \u76ee\u5f55\u7684\u529f\u80fd\uff0c\u5c06\u4e0a\u8ff0\u5185\u5bb9\u4fdd\u5b58\u6210 robots.txt \u6587\u4ef6\uff0c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u548c\u7f51\u7ad9\u7684\u5165\u53e3\u6587\u4ef6\uff08\u6bd4\u5982 index.php\u3001index.html \u548c index.jsp \u7b49\uff09\u653e\u5728\u4e00\u8d77\u3002 \u4e0a\u9762\u7684 User-agent \u63cf\u8ff0\u4e86\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\uff0c\u8fd9\u91cc\u5c06\u5176\u8bbe\u7f6e\u4e3a * \u5219\u4ee3\u8868\u8be5\u534f\u8bae\u5bf9\u4efb\u4f55\u722c\u53d6\u722c\u866b\u6709\u6548\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\uff1a User-agent: Baiduspider \u8fd9\u5c31\u4ee3\u8868\u6211\u4eec\u8bbe\u7f6e\u7684\u89c4\u5219\u5bf9\u767e\u5ea6\u722c\u866b\u662f\u6709\u6548\u7684\u3002\u5982\u679c\u6709\u591a\u6761 User-agent \u8bb0\u5f55\uff0c\u5219\u5c31\u4f1a\u6709\u591a\u4e2a\u722c\u866b\u4f1a\u53d7\u5230\u722c\u53d6\u9650\u5236\uff0c\u4f46\u81f3\u5c11\u9700\u8981\u6307\u5b9a\u4e00\u6761\u3002 Disallow \u6307\u5b9a\u4e86\u4e0d\u5141\u8bb8\u6293\u53d6\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4e0a\u4f8b\u5b50\u4e2d\u8bbe\u7f6e\u4e3a / \u5219\u4ee3\u8868\u4e0d\u5141\u8bb8\u6293\u53d6\u6240\u6709\u9875\u9762\u3002 Allow \u4e00\u822c\u548c Disallow \u4e00\u8d77\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\uff0c\u7528\u6765\u6392\u9664\u67d0\u4e9b\u9650\u5236\u3002\u73b0\u5728\u6211\u4eec\u8bbe\u7f6e\u4e3a /public/\uff0c\u5219\u8868\u793a\u6240\u6709\u9875\u9762\u4e0d\u5141\u8bb8\u6293\u53d6\uff0c\u4f46\u53ef\u4ee5\u6293\u53d6 public \u76ee\u5f55\u3002 \u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u51e0\u4e2a\u4f8b\u5b50\u3002\u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: / \u5141\u8bb8\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: \u53e6\u5916\uff0c\u76f4\u63a5\u628a robots.txt \u6587\u4ef6\u7559\u7a7a\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u7f51\u7ad9\u67d0\u4e9b\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: /private/ Disallow: /tmp/ \u53ea\u5141\u8bb8\u67d0\u4e00\u4e2a\u722c\u866b\u8bbf\u95ee\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: WebCrawler Disallow: User-agent: * Disallow: / \u8fd9\u4e9b\u662f robots.txt \u7684\u4e00\u4e9b\u5e38\u89c1\u5199\u6cd5\u3002","title":"Robots \u534f\u8bae"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#_5","text":"\u5927\u5bb6\u53ef\u80fd\u4f1a\u7591\u60d1\uff0c\u722c\u866b\u540d\u662f\u54ea\u513f\u6765\u7684\uff1f\u4e3a\u4ec0\u4e48\u5c31\u53eb\u8fd9\u4e2a\u540d\uff1f\u5176\u5b9e\u5b83\u662f\u6709\u56fa\u5b9a\u540d\u5b57\u7684\u4e86\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u5c31\u53eb\u4f5c BaiduSpider\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\u53ca\u5bf9\u5e94\u7684\u7f51\u7ad9\u3002 \u722c\u866b\u540d\u79f0 \u540d\u3000\u3000\u79f0 \u7f51\u3000\u3000\u7ad9 BaiduSpider \u767e\u5ea6 www.baidu.com Googlebot \u8c37\u6b4c www.google.com 360Spider 360 \u641c\u7d22 www.so.com YodaoBot \u6709\u9053 www.youdao.com ia_archiver Alexa www.alexa.cn Scooter altavista www.altavista.com","title":"\u722c\u866b\u540d\u79f0"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.7.urllib.html#robotparser","text":"\u4e86\u89e3 Robots \u534f\u8bae\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 robotparser \u6a21\u5757\u6765\u89e3\u6790 robots.txt \u4e86\u3002\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b RobotFileParser \uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u67d0\u7f51\u7ad9\u7684 robots.txt \u6587\u4ef6\u6765\u5224\u65ad\u4e00\u4e2a\u722c\u53d6\u722c\u866b\u662f\u5426\u6709\u6743\u9650\u6765\u722c\u53d6\u8fd9\u4e2a\u7f51\u9875\u3002 \u8be5\u7c7b\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6784\u9020\u65b9\u6cd5\u91cc\u4f20\u5165 robots.txt \u7684\u94fe\u63a5\u5373\u53ef\u3002\u9996\u5148\u770b\u4e00\u4e0b\u5b83\u7684\u58f0\u660e\uff1a urllib . robotparser . RobotFileParser ( url = '' ) <urllib.robotparser.RobotFileParser at 0x1dbbcc44d30> \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u6700\u540e\u518d\u4f7f\u7528 set_url() \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e0b\u4e5f\u53ef\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u8fd9\u4e2a\u7c7b\u5e38\u7528\u7684\u51e0\u4e2a\u65b9\u6cd5\u3002 set_url \uff1a\u7528\u6765\u8bbe\u7f6e robots.txt \u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u5728\u521b\u5efa RobotFileParser \u5bf9\u8c61\u65f6\u4f20\u5165\u4e86\u94fe\u63a5\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8bbe\u7f6e\u4e86\u3002 read \uff1a\u8bfb\u53d6 robots.txt \u6587\u4ef6\u5e76\u8fdb\u884c\u5206\u6790\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6267\u884c\u4e00\u4e2a\u8bfb\u53d6\u548c\u5206\u6790\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u90fd\u4f1a\u4e3a False\uff0c\u6240\u4ee5\u4e00\u5b9a\u8bb0\u5f97\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u662f\u6267\u884c\u4e86\u8bfb\u53d6\u64cd\u4f5c\u3002 parse \uff1a\u7528\u6765\u89e3\u6790 robots.txt \u6587\u4ef6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f robots.txt \u67d0\u4e9b\u884c\u7684\u5185\u5bb9\uff0c\u5b83\u4f1a\u6309\u7167 robots.txt \u7684\u8bed\u6cd5\u89c4\u5219\u6765\u5206\u6790\u8fd9\u4e9b\u5185\u5bb9\u3002 can_fetch \uff1a\u8be5\u65b9\u6cd5\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f User-agent\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6293\u53d6\u7684 URL\u3002\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u8be5\u641c\u7d22\u5f15\u64ce\u662f\u5426\u53ef\u4ee5\u6293\u53d6\u8fd9\u4e2a URL\uff0c\u8fd4\u56de\u7ed3\u679c\u662f True \u6216 False\u3002 mtime \uff1a\u8fd4\u56de\u7684\u662f\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\uff0c\u8fd9\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u68c0\u67e5\u6765\u6293\u53d6\u6700\u65b0\u7684 robots.txt\u3002 modified \uff1a\u5b83\u540c\u6837\u5bf9\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u5f88\u6709\u5e2e\u52a9\uff0c\u5c06\u5f53\u524d\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\u3002 \u8fd9\u91cc\u4ee5\u7b80\u4e66\u4e3a\u4f8b\uff0c\u9996\u5148\u521b\u5efa RobotFileParser \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 set_url \u65b9\u6cd5\u8bbe\u7f6e\u4e86 robots.txt \u7684\u94fe\u63a5\uff1a # need to fix from urllib.robotparser import RobotFileParser rp = RobotFileParser () rp . set_url ( 'http://www.jianshu.com/robots.txt' ) rp . read () print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" )) False False \u5f53\u7136\uff0c\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u76f4\u63a5\u7528\u5982\u4e0b\u65b9\u6cd5\u8bbe\u7f6e\uff1a rp = RobotFileParser ( 'http://www.jianshu.com/robots.txt' ) \u63a5\u7740\u5229\u7528 can_fetch \u65b9\u6cd5\u5224\u65ad\u4e86\u7f51\u9875\u662f\u5426\u53ef\u4ee5\u88ab\u6293\u53d6\u3002 \u8fd9\u91cc\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 parse \u65b9\u6cd5\u6267\u884c\u8bfb\u53d6\u548c\u5206\u6790\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a # need to fix from urllib.robotparser import RobotFileParser from urllib.request import urlopen rp = RobotFileParser () rp . parse ( urlopen ( 'http://www.jianshu.com/robots.txt' ) . read () . decode ( 'utf-8' ) . split ( ' \\n ' )) print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" ))","title":"robotparser"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.8.requests.html","text":"import requests Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.05 requests version: 2.22.0","title":"6.8.requests"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html","text":"import re from toolkit.Help import Help as H Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 re version: 2.2.1 re\u6a21\u5757\u7684\u51fd\u6570 re \u6a21\u5757\u5305\u542b12\u4e2a\u51fd\u6570\uff1a h = H ( re ) d = h . dicts d [ \"function\" ] module ['compile', 'escape', 'findall', 'finditer', 'fullmatch', 'match', 'purge', 'search', 'split', 'sub', 'subn', 'template'] match \u5c1d\u8bd5\u5728 \u5b57\u7b26\u4e32\u7684\u5f00\u5934 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25\uff0c\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . match ( '^Hello\\s {1} \\d {2} ' , content ) result <re.Match object; span=(0, 8), match='Hello 12'> # \u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25 content = 'Hello 123' result = re . match ( '^hello\\s {1} \\d {2} ' , content ) print ( result ) None Match \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u7528\u4e8e\u9009\u62e9\u5339\u914d\u7ed3\u679c\uff1a [ i for i in dir ( re . Match ) if \"_\" not in i ] ['end', 'endpos', 'expand', 'group', 'groupdict', 'groups', 'lastgroup', 'lastindex', 'pos', 're', 'regs', 'span', 'start', 'string'] fullmatch \u5c1d\u8bd5\u5728 \u6574\u4e2a\u5b57\u7b26\u4e32 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5fc5\u987b\u80fd\u5339\u914d\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {2} ' , content ) print ( result ) None # \u5339\u914d\u6574\u4e2a\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {3} ' , content ) result <re.Match object; span=(0, 9), match='Hello 123'> search \u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56deMatch\u5bf9\u8c61\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . search ( '\\d' , content ) print ( result ) <re.Match object; span=(6, 7), match='1'> findall \u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u5339\u914d\u5bf9\u8c61\u7684\u5217\u8868\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . findall ( '\\d' , content ) print ( result ) ['1', '2', '3'] finditer \u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542bMatch\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . finditer ( '\\d' , content ) list ( result ) [<re.Match object; span=(6, 7), match='1'>, <re.Match object; span=(7, 8), match='2'>, <re.Match object; span=(8, 9), match='3'>] sub \u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . sub ( '\\d' , \"A\" , content ) result 'Hello AAA' subn \u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u548c\u66ff\u6362\u6b21\u6570\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . subn ( '\\d' , \"A\" , content ) result ('Hello AAA', 3) split \u6839\u636e\u6b63\u5219\u8868\u8fbe\u5f0f\u62c6\u5206\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u5728\u5339\u914d\u9879\u5904\u88ab\u62c6\u5206\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u5339\u914d\u9879\u7684\u4f4d\u7f6e\u90fd\u88ab\u62c6\u5206\u3002 content = 'Hello 123' result = re . split ( '[e2]' , content ) result ['H', 'llo 1', '3'] compile compile \u51fd\u6570\u53ef\u4ee5\u5c06\u6b63\u5219\u5b57\u7b26\u4e32\u7f16\u8bd1\u6210RegexObject\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u540e\u9762\u7684\u5339\u914d\u4e2d\u590d\u7528\uff1a content1 = '2016-12-15 12:00' content2 = '2016-12-17 12:55' content3 = '2016-12-22 13:21' pattern = re . compile ( '\\d {2} :\\d {2} ' ) result1 = re . sub ( pattern , '' , content1 ) result2 = re . sub ( pattern , '' , content2 ) result3 = re . sub ( pattern , '' , content3 ) print ( result1 , result2 , result3 ) 2016-12-15 2016-12-17 2016-12-22 \u53e6\u5916\uff0ccompile \u8fd8\u53ef\u4ee5\u4f20\u5165\u4fee\u9970\u7b26\uff0c\u4f8b\u5982 re.S \u7b49\u4fee\u9970\u7b26\uff0c\u8fd9\u6837\u5728 search\u3001findall \u7b49\u65b9\u6cd5\u4e2d\u5c31\u4e0d\u9700\u8981\u989d\u5916\u4f20\u4e86\u3002 escape \u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002 print ( re . escape ( \"\\d\" )) \\\\d purge Clear the regular expression caches. template Compile a template pattern, returning a Pattern object.","title":"6.9.re"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#re","text":"re \u6a21\u5757\u5305\u542b12\u4e2a\u51fd\u6570\uff1a h = H ( re ) d = h . dicts d [ \"function\" ] module ['compile', 'escape', 'findall', 'finditer', 'fullmatch', 'match', 'purge', 'search', 'split', 'sub', 'subn', 'template']","title":"re\u6a21\u5757\u7684\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#match","text":"\u5c1d\u8bd5\u5728 \u5b57\u7b26\u4e32\u7684\u5f00\u5934 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25\uff0c\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . match ( '^Hello\\s {1} \\d {2} ' , content ) result <re.Match object; span=(0, 8), match='Hello 12'> # \u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25 content = 'Hello 123' result = re . match ( '^hello\\s {1} \\d {2} ' , content ) print ( result ) None Match \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u7528\u4e8e\u9009\u62e9\u5339\u914d\u7ed3\u679c\uff1a [ i for i in dir ( re . Match ) if \"_\" not in i ] ['end', 'endpos', 'expand', 'group', 'groupdict', 'groups', 'lastgroup', 'lastindex', 'pos', 're', 'regs', 'span', 'start', 'string']","title":"match"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#fullmatch","text":"\u5c1d\u8bd5\u5728 \u6574\u4e2a\u5b57\u7b26\u4e32 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5fc5\u987b\u80fd\u5339\u914d\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {2} ' , content ) print ( result ) None # \u5339\u914d\u6574\u4e2a\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {3} ' , content ) result <re.Match object; span=(0, 9), match='Hello 123'>","title":"fullmatch"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#search","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56deMatch\u5bf9\u8c61\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . search ( '\\d' , content ) print ( result ) <re.Match object; span=(6, 7), match='1'>","title":"search"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#findall","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u5339\u914d\u5bf9\u8c61\u7684\u5217\u8868\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . findall ( '\\d' , content ) print ( result ) ['1', '2', '3']","title":"findall"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#finditer","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542bMatch\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . finditer ( '\\d' , content ) list ( result ) [<re.Match object; span=(6, 7), match='1'>, <re.Match object; span=(7, 8), match='2'>, <re.Match object; span=(8, 9), match='3'>]","title":"finditer"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#sub","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . sub ( '\\d' , \"A\" , content ) result 'Hello AAA'","title":"sub"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#subn","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u548c\u66ff\u6362\u6b21\u6570\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . subn ( '\\d' , \"A\" , content ) result ('Hello AAA', 3)","title":"subn"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#split","text":"\u6839\u636e\u6b63\u5219\u8868\u8fbe\u5f0f\u62c6\u5206\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u5728\u5339\u914d\u9879\u5904\u88ab\u62c6\u5206\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u5339\u914d\u9879\u7684\u4f4d\u7f6e\u90fd\u88ab\u62c6\u5206\u3002 content = 'Hello 123' result = re . split ( '[e2]' , content ) result ['H', 'llo 1', '3']","title":"split"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#compile","text":"compile \u51fd\u6570\u53ef\u4ee5\u5c06\u6b63\u5219\u5b57\u7b26\u4e32\u7f16\u8bd1\u6210RegexObject\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u540e\u9762\u7684\u5339\u914d\u4e2d\u590d\u7528\uff1a content1 = '2016-12-15 12:00' content2 = '2016-12-17 12:55' content3 = '2016-12-22 13:21' pattern = re . compile ( '\\d {2} :\\d {2} ' ) result1 = re . sub ( pattern , '' , content1 ) result2 = re . sub ( pattern , '' , content2 ) result3 = re . sub ( pattern , '' , content3 ) print ( result1 , result2 , result3 ) 2016-12-15 2016-12-17 2016-12-22 \u53e6\u5916\uff0ccompile \u8fd8\u53ef\u4ee5\u4f20\u5165\u4fee\u9970\u7b26\uff0c\u4f8b\u5982 re.S \u7b49\u4fee\u9970\u7b26\uff0c\u8fd9\u6837\u5728 search\u3001findall \u7b49\u65b9\u6cd5\u4e2d\u5c31\u4e0d\u9700\u8981\u989d\u5916\u4f20\u4e86\u3002","title":"compile"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#escape","text":"\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002 print ( re . escape ( \"\\d\" )) \\\\d","title":"escape"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#purge","text":"Clear the regular expression caches.","title":"purge"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/6.9.re.html#template","text":"Compile a template pattern, returning a Pattern object.","title":"template"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.10.09 lxml version: 4.5.2 XPath\uff0c\u5168\u79f0 XML Path Language\uff0c\u5373 XML \u8def\u5f84\u8bed\u8a00\uff0c\u5b83\u662f\u4e00\u95e8\u5728 XML \u6587\u6863\u4e2d\u67e5\u627e\u4fe1\u606f\u7684\u8bed\u8a00\u3002\u5b83\u6700\u521d\u662f\u7528\u6765\u641c\u5bfb XML \u6587\u6863\u7684\uff0c\u4f46\u662f\u5b83\u540c\u6837\u9002\u7528\u4e8e HTML \u6587\u6863\u7684\u641c\u7d22\u3002 XPath \u7684\u9009\u62e9\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0c\u5b83\u63d0\u4f9b\u4e86\u975e\u5e38\u7b80\u6d01\u660e\u4e86\u7684\u8def\u5f84\u9009\u62e9\u8868\u8fbe\u5f0f\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u8d85\u8fc7 100 \u4e2a\u5185\u5efa\u51fd\u6570\uff0c\u7528\u4e8e\u5b57\u7b26\u4e32\u3001\u6570\u503c\u3001\u65f6\u95f4\u7684\u5339\u914d\u4ee5\u53ca\u8282\u70b9\u3001\u5e8f\u5217\u7684\u5904\u7406\u7b49\u3002\u51e0\u4e4e\u6240\u6709\u6211\u4eec\u60f3\u8981\u5b9a\u4f4d\u7684\u8282\u70b9\uff0c\u90fd\u53ef\u4ee5\u7528 XPath \u6765\u9009\u62e9\u3002 XPath \u4e8e 1999 \u5e74 11 \u6708 16 \u65e5\u6210\u4e3a W3C \u6807\u51c6\uff0c\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u4f9b XSLT\u3001XPointer \u4ee5\u53ca\u5176\u4ed6 XML \u89e3\u6790\u8f6f\u4ef6\u4f7f\u7528\uff0c\u66f4\u591a\u7684\u6587\u6863\u53ef\u4ee5\u8bbf\u95ee\u5176 \u5b98\u65b9\u7f51\u7ad9 \u3002 Python \u7684 lxml \u5e93\u63d0\u4f9b\u4e86\u4f7f\u7528XPath \u8fdb\u884c HTML \u89e3\u6790\u7684\u529f\u80fd\u3002 XPath \u5e38\u7528\u89c4\u5219 \u4e0b\u8868\u5217\u51fa\u4e86 XPath \u7684\u5e38\u7528\u5339\u914d\u89c4\u5219\uff1a \u8868\u8fbe\u5f0f \u63cf\u8ff0 nodename \u9009\u53d6\u6b64\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9 / \u4ece\u6839\u8282\u70b9\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9 // \u4ece\u5f53\u524d\u8282\u70b9\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\u548c\u95f4\u63a5\u5b50\u8282\u70b9\uff08\u5305\u62ec\u5f53\u524d\u8282\u70b9\uff09 . \u9009\u53d6\u5f53\u524d\u8282\u70b9 .. \u9009\u53d6\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9 @ \u9009\u53d6\u5c5e\u6027 \u6bd4\u5982\uff0c\u4e0b\u9762\u7684 XPath \u89c4\u5219\u7684\u610f\u601d\u662f\uff1a\u9009\u62e9\u6240\u6709\u540d\u79f0\u4e3a title\uff0c\u540c\u65f6\u5c5e\u6027 lang \u7684\u503c\u4e3a eng \u7684\u8282\u70b9\u3002 //title[@lang='eng'] \u5b9e\u4f8b\u5f15\u5165 \u73b0\u5728\u901a\u8fc7\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\u4f7f\u7528 XPath \u6765\u5bf9\u7f51\u9875\u8fdb\u884c\u89e3\u6790\u7684\u8fc7\u7a0b\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' # \u8c03\u7528 HTML \u7c7b\u8fdb\u884c\u521d\u59cb\u5316 html = etree . HTML ( text ) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) <html><body><div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </li></ul> </div> </body></html> \u8fd9\u91cc\u7684HTML \u6587\u672c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u662f\u6ca1\u6709\u95ed\u5408\u7684\uff0c\u4f46\u662f etree \u6a21\u5757\u53ef\u4ee5\u81ea\u52a8\u4fee\u6b63 HTML \u6587\u672c\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7ecf\u8fc7\u5904\u7406\u4e4b\u540e\uff0cli \u8282\u70b9\u6807\u7b7e\u88ab\u8865\u5168\uff0c\u5e76\u4e14\u8fd8\u81ea\u52a8\u6dfb\u52a0\u4e86 body\u3001html \u8282\u70b9\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff1a from lxml import etree test_html_path = '../datasets/file/test.html' html = etree . parse ( test_html_path , etree . HTMLParser ()) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\"> <html><body><div>&#13; <ul>&#13; <li class=\"item-0\"><a href=\"link1.html\">first item</a></li>&#13; <li class=\"item-1\"><a href=\"link2.html\">second item</a></li>&#13; <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li>&#13; <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li>&#13; <li class=\"item-0\"><a href=\"link5.html\">fifth item</a>&#13; </li></ul>&#13; </div></body></html> \u8fd9\u6b21\u7684\u8f93\u51fa\u7ed3\u679c\u591a\u4e86\u4e00\u4e2a DOCTYPE \u7684\u58f0\u660e\uff0c\u4e0d\u8fc7\u5bf9\u89e3\u6790\u65e0\u4efb\u4f55\u5f71\u54cd\u3002 \u8be5html\u6587\u6863\u7684DOM\u56fe\u5982\u4e0b\uff1a \u6240\u6709\u8282\u70b9 \u4e00\u822c\u7528 // \u5f00\u5934\u7684 XPath \u89c4\u5219\u6765\u9009\u53d6\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u4ee5\u524d\u9762\u7684 HTML \u6587\u672c\u4e3a\u4f8b\uff0c\u5982\u679c\u8981\u9009\u53d6\u6240\u6709\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//*' ) result [<Element html at 0x1953a923108>, <Element body at 0x1953a973388>, <Element div at 0x1953a9734c8>, <Element ul at 0x1953a94d088>, <Element li at 0x1953a94dec8>, <Element a at 0x1953a94d9c8>, <Element li at 0x1953a94d488>, <Element a at 0x1953a94dd48>, <Element li at 0x1953a94d4c8>, <Element a at 0x1953a94d288>, <Element li at 0x1953a96ee48>, <Element a at 0x1953a96ea88>, <Element li at 0x1953a96e3c8>, <Element a at 0x1953a96e188>] \u8fd9\u91cc\u4f7f\u7528 * \u4ee3\u8868\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a HTML \u6587\u672c\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u88ab\u83b7\u53d6\u3002 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u8282\u70b9\u540d\u79f0\uff0c\u4f8b\u5982\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li' ) result [<Element li at 0x19539828688>, <Element li at 0x195398826c8>, <Element li at 0x19539906f08>, <Element li at 0x19539906ac8>, <Element li at 0x19539906cc8>] \u5b50\u8282\u70b9 \u901a\u8fc7 / \u6216 // \u67e5\u627e\u5143\u7d20\u7684\u76f4\u63a5\u5b50\u8282\u70b9\u6216\u6240\u6709\u5b50\u8282\u70b9\u3002\u5047\u5982\u9009\u62e9 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li/a' ) result [<Element a at 0x1953a965a08>, <Element a at 0x1953a965508>, <Element a at 0x1953a965448>, <Element a at 0x1953a965988>, <Element a at 0x1953a965e88>] //li \u7528\u4e8e\u9009\u4e2d\u6240\u6709 li \u8282\u70b9\uff0c/a \u7528\u4e8e\u9009\u4e2d li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u4e8c\u8005\u7ec4\u5408\u5728\u4e00\u8d77\u5373\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\u3002 \u540c\u6837\u7684\u7ed3\u679c\u6709\u591a\u79cd\u83b7\u53d6\u65b9\u5f0f\uff0c\u4f8b\u5982\uff0c\u83b7\u53d6 ul \u8282\u70b9\u4e0b\u7684\u6240\u6709 a \u8282\u70b9\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//ul//a' ) result [<Element a at 0x1953a987888>, <Element a at 0x1953a9878c8>, <Element a at 0x1953a987908>, <Element a at 0x1953a987948>, <Element a at 0x1953a987788>] \u5982\u679c\u7528 //ul/a \uff0c\u5219\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u7ed3\u679c\u4e86\u3002\u56e0\u4e3a / \u7528\u4e8e\u83b7\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c\u5728 ul \u8282\u70b9\u4e0b\u6ca1\u6709\u76f4\u63a5\u7684 a \u5b50\u8282\u70b9\uff0c\u53ea\u6709 li \u8282\u70b9\uff0c\u6240\u4ee5\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u5339\u914d\u7ed3\u679c\u3002 \u7236\u8282\u70b9 \u53ef\u4ee5\u901a\u8fc7\u5b50\u8282\u70b9\uff0c\u4f7f\u7528 .. \u6765\u67e5\u627e\u7236\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u9996\u5148\u9009\u4e2d href \u5c5e\u6027\u503c\u4e3a link4.html \u7684 a \u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5176\u7236\u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u8be5\u7236\u8282\u70b9\u7684class \u5c5e\u6027\u7684\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/../@class' ) print ( result ) ['item-1'] \u4e5f\u53ef\u4ee5\u901a\u8fc7 parent:: \u6765\u83b7\u53d6\u7236\u8282\u70b9\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/parent::*/@class' ) print ( result ) ['item-1'] \u5c5e\u6027\u5339\u914d \u7b5b\u9009\u8282\u70b9\u65f6\uff0c\u53ef\u4ee5\u7528 @ \u7b26\u53f7\u8fdb\u884c\u5c5e\u6027\u8fc7\u6ee4\u3002\u4f8b\u5982\uff0c\u8981\u9009\u53d6 class \u4e3a item-0 \u7684 li \u8282\u70b9: from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]' ) result [<Element li at 0x1953a94d588>, <Element li at 0x1953a94dd48>] \u6587\u672c\u83b7\u53d6 XPath \u4e2d\u7684 text \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8282\u70b9\u4e2d\u7684\u6587\u672c\u3002\u5c1d\u8bd5\u83b7\u53d6 li \u8282\u70b9\u4e2d\u7684\u6587\u672c\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/text()' ) print ( result ) ['\\r\\n '] \u7ed3\u679c\u663e\u793a\u5e76\u6ca1\u6709\u83b7\u53d6\u5230\u4efb\u4f55\u6587\u672c\uff0c\u53ea\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a XPath \u4e2d text \u65b9\u6cd5\u524d\u9762\u662f /\uff0c/ \u7684\u542b\u4e49\u662f\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c li \u7684\u76f4\u63a5\u5b50\u8282\u70b9\u662f a \u8282\u70b9\uff0c\u6587\u672c\u662f\u5728 a \u8282\u70b9\u5185\u90e8\u7684\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u5728 li \u8282\u70b9\u7684\u5185\u90e8\u3002\u6240\u4ee5\u8fd9\u91cc\u5339\u914d\u5230\u7684\u7ed3\u679c\u5c31\u662f\u88ab\u4fee\u6b63\u7684\u90a3\u4e2a li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u5373\u6362\u884c\u7b26\u3002 \u5373\u9009\u4e2d\u7684\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\uff1a < li class = \"item-0\" >< a href = \"link1.html\" > first item </ a ></ li > < li class = \"item-0\" >< a href = \"link5.html\" > fifth item </ a > </ li > \u7b2c\u4e00\u4e2ali\u8282\u70b9\u5185\u90e8\u662f\u6ca1\u6709\u6587\u672c\u7684\uff0c\u800c\u7b2c\u4e8c\u4e2ali\u8282\u70b9\u56e0\u4e3a\u88ab\u81ea\u52a8\u4fee\u6b63\uff0c\u5185\u90e8\u88ab\u6dfb\u52a0\u4e86\u6362\u884c\u7b26\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u60f3\u83b7\u53d6 li \u8282\u70b9\u7684\u6587\u672c\uff0c\u5c31\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u5148\u9009\u53d6 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c \u4f7f\u7528 // \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e0b\u4e8c\u8005\u7684\u533a\u522b\u3002 \u9996\u5148\uff0c\u9009\u53d6\u5230 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/a/text()' ) print ( result ) ['first item', 'fifth item'] \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u662f\u4e24\u4e2a\uff0c\u5185\u5bb9\u90fd\u662f\u5c5e\u6027\u4e3a item-0 \u7684 li \u8282\u70b9\u7684\u6587\u672c\uff0c\u8fd9\u4e5f\u5370\u8bc1\u4e86\u524d\u9762\u5c5e\u6027\u5339\u914d\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u662f\u9010\u5c42\u9009\u53d6\u7684\uff0c\u5148\u9009\u53d6\u4e86 li \u8282\u70b9\uff0c\u53c8\u5229\u7528 / \u9009\u53d6\u4e86\u5176\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u6587\u672c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u6070\u597d\u662f\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684\u4e24\u4e2a\u7ed3\u679c\u3002 \u518d\u6765\u770b\u4e0b\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\uff08\u5373\u4f7f\u7528 //\uff09\u9009\u53d6\u7684\u7ed3\u679c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]//text()' ) print ( result ) ['first item', 'fifth item', '\\r\\n '] \u8fd9\u91cc\u7684\u8fd4\u56de\u7ed3\u679c\u662f 3 \u4e2a\u3002\u56e0\u4e3a\u8fd9\u91cc\u662f\u9009\u53d6\u5f53\u524d\u8282\u70b9\u4ee5\u53ca\u6240\u6709\u5b50\u8282\u70b9\u7684\u6587\u672c\uff0c\u524d\u4e24\u4e2a\u662f li \u7684\u5b50\u8282\u70b9 a \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u6700\u540e\u4e00\u4e2a\u662f li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u3002 \u5c5e\u6027\u503c\u83b7\u53d6 \u5176\u5b9e\u5728\u7236\u8282\u70b9\u8fd9\u4e00\u8282\u4e2d\u5df2\u7ecf\u5c55\u793a\u8fc7\u83b7\u53d6\u8282\u70b9\u5c5e\u6027\u503c\u7684\u65b9\u6cd5\uff0c\u5373\u901a\u8fc7@\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u4e0b\u6240\u6709 a \u8282\u70b9\u7684 href \u5c5e\u6027\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li/a/@href' ) print ( result ) ['link1.html', 'link2.html', 'link3.html', 'link4.html', 'link5.html'] \u6ce8\u610f\u83b7\u53d6\u5c5e\u6027\u503c\u548c\u5c5e\u6027\u5339\u914d\u7684\u533a\u522b\u3002 \u5c5e\u6027\u591a\u503c\u5339\u914d \u6709\u65f6\u5019\uff0c\u67d0\u4e9b\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u53ef\u80fd\u6709\u591a\u4e2a\u503c\uff0c\u4f8b\u5982\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[@class=\"li\"]/a/text()' ) print ( result ) [] \u8fd9\u91cc HTML \u6587\u672c\u4e2d li \u8282\u70b9\u7684 class \u5c5e\u6027\u6709\u4e24\u4e2a\u503c li \u548c li-first\uff0c\u6b64\u65f6\u5982\u679c\u8fd8\u60f3\u7528\u4e4b\u524d\u7684\u5c5e\u6027\u5339\u914d\u83b7\u53d6\uff0c\u5c31\u65e0\u6cd5\u5339\u914d\u4e86\u3002 \u8fd9\u65f6\u9700\u8981\u7528 contains \u65b9\u6cd5\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\")]/a/text()' ) print ( result ) ['first item'] contains \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5c5e\u6027\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5c5e\u6027\u503c\uff0c\u53ea\u8981\u6b64\u5c5e\u6027\u5305\u542b\u6240\u4f20\u5165\u7684\u5c5e\u6027\u503c\uff0c\u5c31\u4f1a\u88ab\u5339\u914d\u5230\u3002 \u8be5\u65b9\u6cd5\u5728\u67d0\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u6709\u591a\u4e2a\u503c\u65f6\u7ecf\u5e38\u7528\u5230\uff08\u5982\u8282\u70b9\u7684 class \u5c5e\u6027\u503c\u901a\u5e38\u6709\u591a\u4e2a\uff09\u3002 \u591a\u5c5e\u6027\u5339\u914d \u6709\u65f6\u5019\u9700\u8981\u6839\u636e\u591a\u4e2a\u5c5e\u6027\u786e\u5b9a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u540c\u65f6\u5339\u914d\u591a\u4e2a\u5c5e\u6027\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26 and \u6765\u8fde\u63a5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <li class=\"li li-first\" name=\"item\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\") and @name=\"item\"]/a/text()' ) print ( result ) ['first item'] \u8fd9\u91cc\u7684 li \u8282\u70b9\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u5c5e\u6027 name\u3002\u8981\u786e\u5b9a\u8fd9\u4e2a\u8282\u70b9\uff0c\u9700\u8981\u540c\u65f6\u6839\u636e class \u548c name \u5c5e\u6027\u6765\u9009\u62e9\uff0c\u4e00\u4e2a\u6761\u4ef6\u662f class \u5c5e\u6027\u91cc\u9762\u5305\u542b li \u5b57\u7b26\u4e32\uff0c\u53e6\u4e00\u4e2a\u6761\u4ef6\u662f name \u5c5e\u6027\u4e3a item \u5b57\u7b26\u4e32\uff0c\u4e8c\u8005\u9700\u8981\u540c\u65f6\u6ee1\u8db3\uff0c\u9700\u8981\u7528 and \u64cd\u4f5c\u7b26\u76f8\u8fde\uff0c\u76f8\u8fde\u4e4b\u540e\u7f6e\u4e8e\u4e2d\u62ec\u53f7\u5185\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\u3002 \u8fd9\u91cc\u7684 and \u662f XPath \u7684\u8fd0\u7b97\u7b26\u3002XPath\u8fd8\u6709\u5f88\u591a\u8fd0\u7b97\u7b26\uff0c\u5982 or\u3001mod \u7b49\uff0c\u5728\u6b64\u603b\u7ed3\u4e3a\u4e0b\u8868\u3002 XPath\u8fd0\u7b97\u7b26 \u63cf \u8ff0 \u5b9e \u4f8b \u8fd4\u56de\u503c or \u6216 age=19 or age=20 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 21\uff0c\u5219\u8fd4\u56de false and \u4e0e age>19 and age<21 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false mod \u8ba1\u7b97\u9664\u6cd5\u7684\u4f59\u6570 5 mod 2 1 \u8ba1\u7b97\u4e24\u4e2a\u8282\u70b9\u96c6 //book + \u52a0\u6cd5 6 + 4 10 - \u51cf\u6cd5 6 - 4 2 * \u4e58\u6cd5 6 * 4 24 div \u9664\u6cd5 8 div 4 2 = \u7b49\u4e8e age=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false != \u4e0d\u7b49\u4e8e age!=19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false < \u5c0f\u4e8e age<19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false <= \u5c0f\u4e8e\u6216\u7b49\u4e8e age<=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false > \u5927\u4e8e age>19 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false >= \u5927\u4e8e\u6216\u7b49\u4e8e age>=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false \u6b64\u8868\u53c2\u8003\u6765\u6e90\uff1a http://www.w3school.com.cn/xpath/xpath_operators.asp \u3002 \u6309\u5e8f\u9009\u62e9 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u5728\u9009\u62e9\u7684\u65f6\u5019\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u540c\u65f6\u5339\u914d\u4e86\u591a\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u53ea\u60f3\u8981\u5176\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u5982\u7b2c\u4e8c\u4e2a\u8282\u70b9\u6216\u8005\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u8fd9\u65f6\u53ef\u4ee5\u5229\u7528\u4e2d\u62ec\u53f7\u4f20\u5165\u7d22\u5f15\u7684\u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u6b21\u5e8f\u7684\u8282\u70b9\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()]/a/text()' ) print ( result ) result = html . xpath ( '//li[position()<3]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()-2]/a/text()' ) print ( result ) ['first item'] ['fifth item'] ['first item', 'second item'] ['third item'] \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u53ea\u9009\u53d6\u7b2c\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u4f20\u5165\u6570\u5b57 1 \u5373\u53ef\u3002\u6ce8\u610f\uff0cXpath\u7684\u7d22\u5f15\u662f\u4ee5 1 \u5f00\u59cb\u7684\uff0c\u4e0d\u662f\u4ee5 0 \u5f00\u59cb\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u53ea\u9009\u53d6\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u5373\u53ef\uff0c\u8fd4\u56de\u7684\u4fbf\u662f\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u9009\u53d6\u4f4d\u7f6e\u5c0f\u4e8e 3 \u7684 li \u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4f4d\u7f6e\u5e8f\u53f7\u4e3a 1 \u548c 2 \u7684\u8282\u70b9\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u524d\u4e24\u4e2a li \u8282\u70b9\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u9009\u53d6\u5012\u6570\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u518d\u51cf\u53bb 2 \u5373\u53ef\u3002\u56e0\u4e3a last \u65b9\u6cd5\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\uff0c\u5728\u6b64\u57fa\u7840\u51cf 2 \u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 last\u3001position \u7b49\u65b9\u6cd5\u3002\u5728 XPath \u4e2d\uff0c\u63d0\u4f9b\u4e86 100 \u591a\u4e2a\u65b9\u6cd5\uff0c\u5305\u62ec\u5b58\u53d6\u3001\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u903b\u8f91\u3001\u8282\u70b9\u3001\u5e8f\u5217\u7b49\u5904\u7406\u529f\u80fd\uff0c\u5b83\u4eec\u7684\u5177\u4f53\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_functions.asp \u3002 \u8282\u70b9\u8f74\u9009\u62e9 XPath \u63d0\u4f9b\u4e86\u5f88\u591a\u8282\u70b9\u8f74\u9009\u62e9\u65b9\u6cd5\uff0c\u5305\u62ec\u83b7\u53d6\u5b50\u5143\u7d20\u3001\u5144\u5f1f\u5143\u7d20\u3001\u7236\u5143\u7d20\u3001\u7956\u5148\u5143\u7d20\u7b49\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\"><span>first item</span></a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/ancestor::*' ) print ( result ) result = html . xpath ( '//li[1]/ancestor::div' ) print ( result ) result = html . xpath ( '//li[1]/attribute::*' ) print ( result ) result = html . xpath ( '//li[1]/child::a[@href=\"link1.html\"]' ) print ( result ) result = html . xpath ( '//li[1]/descendant::span' ) print ( result ) result = html . xpath ( '//li[1]/following::*[2]' ) print ( result ) result = html . xpath ( '//li[1]/following-sibling::*' ) print ( result ) [<Element html at 0x1953a96e288>, <Element body at 0x1953a8f4b48>, <Element div at 0x1953a8f4c48>, <Element ul at 0x195398ea148>] [<Element div at 0x1953a8f4c48>] ['item-0'] [<Element a at 0x1953a8f4ac8>] [<Element span at 0x1953a8f4b48>] [<Element a at 0x1953a9330c8>] [<Element li at 0x1953a8f4b48>, <Element li at 0x1953a8f4ac8>, <Element li at 0x1953a8f4c48>, <Element li at 0x1953a933588>] \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 ancestor \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u7956\u5148\u8282\u70b9\u3002\u5176\u540e\u9700\u8981\u8ddf\u4e24\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u8282\u70b9\u7684\u9009\u62e9\u5668\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 *\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed3\u679c\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u5305\u62ec html\u3001body\u3001div \u548c ul\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u8fd9\u6b21\u5728\u5192\u53f7\u540e\u9762\u52a0\u4e86 div\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u53ea\u6709 div \u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u4e86\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 attribute \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u503c\uff0c\u5176\u540e\u8ddf\u7684\u9009\u62e9\u5668\u8fd8\u662f *\uff0c\u8fd9\u4ee3\u8868\u83b7\u53d6\u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\uff0c\u8fd4\u56de\u503c\u5c31\u662f li \u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\u503c\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 child \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u9009\u53d6 href \u5c5e\u6027\u4e3a link1.html \u7684 a \u8282\u70b9\u3002 \u7b2c\u4e94\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 descendant \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b50\u5b59\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\u83b7\u53d6 span \u8282\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u53ea\u5305\u542b span \u8282\u70b9\u800c\u4e0d\u5305\u542b a \u8282\u70b9\u3002 \u7b2c\u516d\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 following \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u867d\u7136\u4f7f\u7528\u7684\u662f * \u5339\u914d\uff0c\u4f46\u53c8\u52a0\u4e86\u7d22\u5f15\u9009\u62e9\uff0c\u6240\u4ee5\u53ea\u83b7\u53d6\u4e86\u7b2c\u4e8c\u4e2a\u540e\u7eed\u8282\u70b9\u3002 \u7b2c\u4e03\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 following-sibling \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u540c\u7ea7\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 * \u5339\u914d\uff0c\u6240\u4ee5\u83b7\u53d6\u4e86\u6240\u6709\u540e\u7eed\u540c\u7ea7\u8282\u70b9\u3002 \u4ee5\u4e0a\u662f XPath \u8f74\u7684\u7b80\u5355\u7528\u6cd5\uff0c\u66f4\u591a\u8f74\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_axes.asp \u3002","title":"13.1.lxml"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#xpath","text":"\u4e0b\u8868\u5217\u51fa\u4e86 XPath \u7684\u5e38\u7528\u5339\u914d\u89c4\u5219\uff1a \u8868\u8fbe\u5f0f \u63cf\u8ff0 nodename \u9009\u53d6\u6b64\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9 / \u4ece\u6839\u8282\u70b9\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9 // \u4ece\u5f53\u524d\u8282\u70b9\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\u548c\u95f4\u63a5\u5b50\u8282\u70b9\uff08\u5305\u62ec\u5f53\u524d\u8282\u70b9\uff09 . \u9009\u53d6\u5f53\u524d\u8282\u70b9 .. \u9009\u53d6\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9 @ \u9009\u53d6\u5c5e\u6027 \u6bd4\u5982\uff0c\u4e0b\u9762\u7684 XPath \u89c4\u5219\u7684\u610f\u601d\u662f\uff1a\u9009\u62e9\u6240\u6709\u540d\u79f0\u4e3a title\uff0c\u540c\u65f6\u5c5e\u6027 lang \u7684\u503c\u4e3a eng \u7684\u8282\u70b9\u3002 //title[@lang='eng']","title":"XPath \u5e38\u7528\u89c4\u5219"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_1","text":"\u73b0\u5728\u901a\u8fc7\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\u4f7f\u7528 XPath \u6765\u5bf9\u7f51\u9875\u8fdb\u884c\u89e3\u6790\u7684\u8fc7\u7a0b\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' # \u8c03\u7528 HTML \u7c7b\u8fdb\u884c\u521d\u59cb\u5316 html = etree . HTML ( text ) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) <html><body><div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </li></ul> </div> </body></html> \u8fd9\u91cc\u7684HTML \u6587\u672c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u662f\u6ca1\u6709\u95ed\u5408\u7684\uff0c\u4f46\u662f etree \u6a21\u5757\u53ef\u4ee5\u81ea\u52a8\u4fee\u6b63 HTML \u6587\u672c\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7ecf\u8fc7\u5904\u7406\u4e4b\u540e\uff0cli \u8282\u70b9\u6807\u7b7e\u88ab\u8865\u5168\uff0c\u5e76\u4e14\u8fd8\u81ea\u52a8\u6dfb\u52a0\u4e86 body\u3001html \u8282\u70b9\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff1a from lxml import etree test_html_path = '../datasets/file/test.html' html = etree . parse ( test_html_path , etree . HTMLParser ()) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\"> <html><body><div>&#13; <ul>&#13; <li class=\"item-0\"><a href=\"link1.html\">first item</a></li>&#13; <li class=\"item-1\"><a href=\"link2.html\">second item</a></li>&#13; <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li>&#13; <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li>&#13; <li class=\"item-0\"><a href=\"link5.html\">fifth item</a>&#13; </li></ul>&#13; </div></body></html> \u8fd9\u6b21\u7684\u8f93\u51fa\u7ed3\u679c\u591a\u4e86\u4e00\u4e2a DOCTYPE \u7684\u58f0\u660e\uff0c\u4e0d\u8fc7\u5bf9\u89e3\u6790\u65e0\u4efb\u4f55\u5f71\u54cd\u3002 \u8be5html\u6587\u6863\u7684DOM\u56fe\u5982\u4e0b\uff1a","title":"\u5b9e\u4f8b\u5f15\u5165"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_2","text":"\u4e00\u822c\u7528 // \u5f00\u5934\u7684 XPath \u89c4\u5219\u6765\u9009\u53d6\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u4ee5\u524d\u9762\u7684 HTML \u6587\u672c\u4e3a\u4f8b\uff0c\u5982\u679c\u8981\u9009\u53d6\u6240\u6709\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//*' ) result [<Element html at 0x1953a923108>, <Element body at 0x1953a973388>, <Element div at 0x1953a9734c8>, <Element ul at 0x1953a94d088>, <Element li at 0x1953a94dec8>, <Element a at 0x1953a94d9c8>, <Element li at 0x1953a94d488>, <Element a at 0x1953a94dd48>, <Element li at 0x1953a94d4c8>, <Element a at 0x1953a94d288>, <Element li at 0x1953a96ee48>, <Element a at 0x1953a96ea88>, <Element li at 0x1953a96e3c8>, <Element a at 0x1953a96e188>] \u8fd9\u91cc\u4f7f\u7528 * \u4ee3\u8868\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a HTML \u6587\u672c\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u88ab\u83b7\u53d6\u3002 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u8282\u70b9\u540d\u79f0\uff0c\u4f8b\u5982\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li' ) result [<Element li at 0x19539828688>, <Element li at 0x195398826c8>, <Element li at 0x19539906f08>, <Element li at 0x19539906ac8>, <Element li at 0x19539906cc8>]","title":"\u6240\u6709\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_3","text":"\u901a\u8fc7 / \u6216 // \u67e5\u627e\u5143\u7d20\u7684\u76f4\u63a5\u5b50\u8282\u70b9\u6216\u6240\u6709\u5b50\u8282\u70b9\u3002\u5047\u5982\u9009\u62e9 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li/a' ) result [<Element a at 0x1953a965a08>, <Element a at 0x1953a965508>, <Element a at 0x1953a965448>, <Element a at 0x1953a965988>, <Element a at 0x1953a965e88>] //li \u7528\u4e8e\u9009\u4e2d\u6240\u6709 li \u8282\u70b9\uff0c/a \u7528\u4e8e\u9009\u4e2d li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u4e8c\u8005\u7ec4\u5408\u5728\u4e00\u8d77\u5373\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\u3002 \u540c\u6837\u7684\u7ed3\u679c\u6709\u591a\u79cd\u83b7\u53d6\u65b9\u5f0f\uff0c\u4f8b\u5982\uff0c\u83b7\u53d6 ul \u8282\u70b9\u4e0b\u7684\u6240\u6709 a \u8282\u70b9\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//ul//a' ) result [<Element a at 0x1953a987888>, <Element a at 0x1953a9878c8>, <Element a at 0x1953a987908>, <Element a at 0x1953a987948>, <Element a at 0x1953a987788>] \u5982\u679c\u7528 //ul/a \uff0c\u5219\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u7ed3\u679c\u4e86\u3002\u56e0\u4e3a / \u7528\u4e8e\u83b7\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c\u5728 ul \u8282\u70b9\u4e0b\u6ca1\u6709\u76f4\u63a5\u7684 a \u5b50\u8282\u70b9\uff0c\u53ea\u6709 li \u8282\u70b9\uff0c\u6240\u4ee5\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u5339\u914d\u7ed3\u679c\u3002","title":"\u5b50\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_4","text":"\u53ef\u4ee5\u901a\u8fc7\u5b50\u8282\u70b9\uff0c\u4f7f\u7528 .. \u6765\u67e5\u627e\u7236\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u9996\u5148\u9009\u4e2d href \u5c5e\u6027\u503c\u4e3a link4.html \u7684 a \u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5176\u7236\u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u8be5\u7236\u8282\u70b9\u7684class \u5c5e\u6027\u7684\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/../@class' ) print ( result ) ['item-1'] \u4e5f\u53ef\u4ee5\u901a\u8fc7 parent:: \u6765\u83b7\u53d6\u7236\u8282\u70b9\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/parent::*/@class' ) print ( result ) ['item-1']","title":"\u7236\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_5","text":"\u7b5b\u9009\u8282\u70b9\u65f6\uff0c\u53ef\u4ee5\u7528 @ \u7b26\u53f7\u8fdb\u884c\u5c5e\u6027\u8fc7\u6ee4\u3002\u4f8b\u5982\uff0c\u8981\u9009\u53d6 class \u4e3a item-0 \u7684 li \u8282\u70b9: from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]' ) result [<Element li at 0x1953a94d588>, <Element li at 0x1953a94dd48>]","title":"\u5c5e\u6027\u5339\u914d"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_6","text":"XPath \u4e2d\u7684 text \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8282\u70b9\u4e2d\u7684\u6587\u672c\u3002\u5c1d\u8bd5\u83b7\u53d6 li \u8282\u70b9\u4e2d\u7684\u6587\u672c\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/text()' ) print ( result ) ['\\r\\n '] \u7ed3\u679c\u663e\u793a\u5e76\u6ca1\u6709\u83b7\u53d6\u5230\u4efb\u4f55\u6587\u672c\uff0c\u53ea\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a XPath \u4e2d text \u65b9\u6cd5\u524d\u9762\u662f /\uff0c/ \u7684\u542b\u4e49\u662f\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c li \u7684\u76f4\u63a5\u5b50\u8282\u70b9\u662f a \u8282\u70b9\uff0c\u6587\u672c\u662f\u5728 a \u8282\u70b9\u5185\u90e8\u7684\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u5728 li \u8282\u70b9\u7684\u5185\u90e8\u3002\u6240\u4ee5\u8fd9\u91cc\u5339\u914d\u5230\u7684\u7ed3\u679c\u5c31\u662f\u88ab\u4fee\u6b63\u7684\u90a3\u4e2a li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u5373\u6362\u884c\u7b26\u3002 \u5373\u9009\u4e2d\u7684\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\uff1a < li class = \"item-0\" >< a href = \"link1.html\" > first item </ a ></ li > < li class = \"item-0\" >< a href = \"link5.html\" > fifth item </ a > </ li > \u7b2c\u4e00\u4e2ali\u8282\u70b9\u5185\u90e8\u662f\u6ca1\u6709\u6587\u672c\u7684\uff0c\u800c\u7b2c\u4e8c\u4e2ali\u8282\u70b9\u56e0\u4e3a\u88ab\u81ea\u52a8\u4fee\u6b63\uff0c\u5185\u90e8\u88ab\u6dfb\u52a0\u4e86\u6362\u884c\u7b26\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u60f3\u83b7\u53d6 li \u8282\u70b9\u7684\u6587\u672c\uff0c\u5c31\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u5148\u9009\u53d6 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c \u4f7f\u7528 // \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e0b\u4e8c\u8005\u7684\u533a\u522b\u3002 \u9996\u5148\uff0c\u9009\u53d6\u5230 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/a/text()' ) print ( result ) ['first item', 'fifth item'] \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u662f\u4e24\u4e2a\uff0c\u5185\u5bb9\u90fd\u662f\u5c5e\u6027\u4e3a item-0 \u7684 li \u8282\u70b9\u7684\u6587\u672c\uff0c\u8fd9\u4e5f\u5370\u8bc1\u4e86\u524d\u9762\u5c5e\u6027\u5339\u914d\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u662f\u9010\u5c42\u9009\u53d6\u7684\uff0c\u5148\u9009\u53d6\u4e86 li \u8282\u70b9\uff0c\u53c8\u5229\u7528 / \u9009\u53d6\u4e86\u5176\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u6587\u672c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u6070\u597d\u662f\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684\u4e24\u4e2a\u7ed3\u679c\u3002 \u518d\u6765\u770b\u4e0b\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\uff08\u5373\u4f7f\u7528 //\uff09\u9009\u53d6\u7684\u7ed3\u679c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]//text()' ) print ( result ) ['first item', 'fifth item', '\\r\\n '] \u8fd9\u91cc\u7684\u8fd4\u56de\u7ed3\u679c\u662f 3 \u4e2a\u3002\u56e0\u4e3a\u8fd9\u91cc\u662f\u9009\u53d6\u5f53\u524d\u8282\u70b9\u4ee5\u53ca\u6240\u6709\u5b50\u8282\u70b9\u7684\u6587\u672c\uff0c\u524d\u4e24\u4e2a\u662f li \u7684\u5b50\u8282\u70b9 a \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u6700\u540e\u4e00\u4e2a\u662f li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u3002","title":"\u6587\u672c\u83b7\u53d6"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_7","text":"\u5176\u5b9e\u5728\u7236\u8282\u70b9\u8fd9\u4e00\u8282\u4e2d\u5df2\u7ecf\u5c55\u793a\u8fc7\u83b7\u53d6\u8282\u70b9\u5c5e\u6027\u503c\u7684\u65b9\u6cd5\uff0c\u5373\u901a\u8fc7@\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u4e0b\u6240\u6709 a \u8282\u70b9\u7684 href \u5c5e\u6027\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( test_html_path , etree . HTMLParser ()) result = html . xpath ( '//li/a/@href' ) print ( result ) ['link1.html', 'link2.html', 'link3.html', 'link4.html', 'link5.html'] \u6ce8\u610f\u83b7\u53d6\u5c5e\u6027\u503c\u548c\u5c5e\u6027\u5339\u914d\u7684\u533a\u522b\u3002","title":"\u5c5e\u6027\u503c\u83b7\u53d6"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_8","text":"\u6709\u65f6\u5019\uff0c\u67d0\u4e9b\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u53ef\u80fd\u6709\u591a\u4e2a\u503c\uff0c\u4f8b\u5982\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[@class=\"li\"]/a/text()' ) print ( result ) [] \u8fd9\u91cc HTML \u6587\u672c\u4e2d li \u8282\u70b9\u7684 class \u5c5e\u6027\u6709\u4e24\u4e2a\u503c li \u548c li-first\uff0c\u6b64\u65f6\u5982\u679c\u8fd8\u60f3\u7528\u4e4b\u524d\u7684\u5c5e\u6027\u5339\u914d\u83b7\u53d6\uff0c\u5c31\u65e0\u6cd5\u5339\u914d\u4e86\u3002 \u8fd9\u65f6\u9700\u8981\u7528 contains \u65b9\u6cd5\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\")]/a/text()' ) print ( result ) ['first item'] contains \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5c5e\u6027\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5c5e\u6027\u503c\uff0c\u53ea\u8981\u6b64\u5c5e\u6027\u5305\u542b\u6240\u4f20\u5165\u7684\u5c5e\u6027\u503c\uff0c\u5c31\u4f1a\u88ab\u5339\u914d\u5230\u3002 \u8be5\u65b9\u6cd5\u5728\u67d0\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u6709\u591a\u4e2a\u503c\u65f6\u7ecf\u5e38\u7528\u5230\uff08\u5982\u8282\u70b9\u7684 class \u5c5e\u6027\u503c\u901a\u5e38\u6709\u591a\u4e2a\uff09\u3002","title":"\u5c5e\u6027\u591a\u503c\u5339\u914d"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_9","text":"\u6709\u65f6\u5019\u9700\u8981\u6839\u636e\u591a\u4e2a\u5c5e\u6027\u786e\u5b9a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u540c\u65f6\u5339\u914d\u591a\u4e2a\u5c5e\u6027\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26 and \u6765\u8fde\u63a5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <li class=\"li li-first\" name=\"item\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\") and @name=\"item\"]/a/text()' ) print ( result ) ['first item'] \u8fd9\u91cc\u7684 li \u8282\u70b9\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u5c5e\u6027 name\u3002\u8981\u786e\u5b9a\u8fd9\u4e2a\u8282\u70b9\uff0c\u9700\u8981\u540c\u65f6\u6839\u636e class \u548c name \u5c5e\u6027\u6765\u9009\u62e9\uff0c\u4e00\u4e2a\u6761\u4ef6\u662f class \u5c5e\u6027\u91cc\u9762\u5305\u542b li \u5b57\u7b26\u4e32\uff0c\u53e6\u4e00\u4e2a\u6761\u4ef6\u662f name \u5c5e\u6027\u4e3a item \u5b57\u7b26\u4e32\uff0c\u4e8c\u8005\u9700\u8981\u540c\u65f6\u6ee1\u8db3\uff0c\u9700\u8981\u7528 and \u64cd\u4f5c\u7b26\u76f8\u8fde\uff0c\u76f8\u8fde\u4e4b\u540e\u7f6e\u4e8e\u4e2d\u62ec\u53f7\u5185\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\u3002 \u8fd9\u91cc\u7684 and \u662f XPath \u7684\u8fd0\u7b97\u7b26\u3002XPath\u8fd8\u6709\u5f88\u591a\u8fd0\u7b97\u7b26\uff0c\u5982 or\u3001mod \u7b49\uff0c\u5728\u6b64\u603b\u7ed3\u4e3a\u4e0b\u8868\u3002 XPath\u8fd0\u7b97\u7b26 \u63cf \u8ff0 \u5b9e \u4f8b \u8fd4\u56de\u503c or \u6216 age=19 or age=20 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 21\uff0c\u5219\u8fd4\u56de false and \u4e0e age>19 and age<21 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false mod \u8ba1\u7b97\u9664\u6cd5\u7684\u4f59\u6570 5 mod 2 1 \u8ba1\u7b97\u4e24\u4e2a\u8282\u70b9\u96c6 //book + \u52a0\u6cd5 6 + 4 10 - \u51cf\u6cd5 6 - 4 2 * \u4e58\u6cd5 6 * 4 24 div \u9664\u6cd5 8 div 4 2 = \u7b49\u4e8e age=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false != \u4e0d\u7b49\u4e8e age!=19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false < \u5c0f\u4e8e age<19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false <= \u5c0f\u4e8e\u6216\u7b49\u4e8e age<=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false > \u5927\u4e8e age>19 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false >= \u5927\u4e8e\u6216\u7b49\u4e8e age>=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false \u6b64\u8868\u53c2\u8003\u6765\u6e90\uff1a http://www.w3school.com.cn/xpath/xpath_operators.asp \u3002","title":"\u591a\u5c5e\u6027\u5339\u914d"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_10","text":"\u6709\u65f6\u5019\uff0c\u6211\u4eec\u5728\u9009\u62e9\u7684\u65f6\u5019\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u540c\u65f6\u5339\u914d\u4e86\u591a\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u53ea\u60f3\u8981\u5176\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u5982\u7b2c\u4e8c\u4e2a\u8282\u70b9\u6216\u8005\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u8fd9\u65f6\u53ef\u4ee5\u5229\u7528\u4e2d\u62ec\u53f7\u4f20\u5165\u7d22\u5f15\u7684\u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u6b21\u5e8f\u7684\u8282\u70b9\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()]/a/text()' ) print ( result ) result = html . xpath ( '//li[position()<3]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()-2]/a/text()' ) print ( result ) ['first item'] ['fifth item'] ['first item', 'second item'] ['third item'] \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u53ea\u9009\u53d6\u7b2c\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u4f20\u5165\u6570\u5b57 1 \u5373\u53ef\u3002\u6ce8\u610f\uff0cXpath\u7684\u7d22\u5f15\u662f\u4ee5 1 \u5f00\u59cb\u7684\uff0c\u4e0d\u662f\u4ee5 0 \u5f00\u59cb\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u53ea\u9009\u53d6\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u5373\u53ef\uff0c\u8fd4\u56de\u7684\u4fbf\u662f\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u9009\u53d6\u4f4d\u7f6e\u5c0f\u4e8e 3 \u7684 li \u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4f4d\u7f6e\u5e8f\u53f7\u4e3a 1 \u548c 2 \u7684\u8282\u70b9\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u524d\u4e24\u4e2a li \u8282\u70b9\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u9009\u53d6\u5012\u6570\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u518d\u51cf\u53bb 2 \u5373\u53ef\u3002\u56e0\u4e3a last \u65b9\u6cd5\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\uff0c\u5728\u6b64\u57fa\u7840\u51cf 2 \u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 last\u3001position \u7b49\u65b9\u6cd5\u3002\u5728 XPath \u4e2d\uff0c\u63d0\u4f9b\u4e86 100 \u591a\u4e2a\u65b9\u6cd5\uff0c\u5305\u62ec\u5b58\u53d6\u3001\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u903b\u8f91\u3001\u8282\u70b9\u3001\u5e8f\u5217\u7b49\u5904\u7406\u529f\u80fd\uff0c\u5b83\u4eec\u7684\u5177\u4f53\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_functions.asp \u3002","title":"\u6309\u5e8f\u9009\u62e9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_11","text":"XPath \u63d0\u4f9b\u4e86\u5f88\u591a\u8282\u70b9\u8f74\u9009\u62e9\u65b9\u6cd5\uff0c\u5305\u62ec\u83b7\u53d6\u5b50\u5143\u7d20\u3001\u5144\u5f1f\u5143\u7d20\u3001\u7236\u5143\u7d20\u3001\u7956\u5148\u5143\u7d20\u7b49\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\"><span>first item</span></a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/ancestor::*' ) print ( result ) result = html . xpath ( '//li[1]/ancestor::div' ) print ( result ) result = html . xpath ( '//li[1]/attribute::*' ) print ( result ) result = html . xpath ( '//li[1]/child::a[@href=\"link1.html\"]' ) print ( result ) result = html . xpath ( '//li[1]/descendant::span' ) print ( result ) result = html . xpath ( '//li[1]/following::*[2]' ) print ( result ) result = html . xpath ( '//li[1]/following-sibling::*' ) print ( result ) [<Element html at 0x1953a96e288>, <Element body at 0x1953a8f4b48>, <Element div at 0x1953a8f4c48>, <Element ul at 0x195398ea148>] [<Element div at 0x1953a8f4c48>] ['item-0'] [<Element a at 0x1953a8f4ac8>] [<Element span at 0x1953a8f4b48>] [<Element a at 0x1953a9330c8>] [<Element li at 0x1953a8f4b48>, <Element li at 0x1953a8f4ac8>, <Element li at 0x1953a8f4c48>, <Element li at 0x1953a933588>] \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 ancestor \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u7956\u5148\u8282\u70b9\u3002\u5176\u540e\u9700\u8981\u8ddf\u4e24\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u8282\u70b9\u7684\u9009\u62e9\u5668\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 *\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed3\u679c\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u5305\u62ec html\u3001body\u3001div \u548c ul\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u8fd9\u6b21\u5728\u5192\u53f7\u540e\u9762\u52a0\u4e86 div\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u53ea\u6709 div \u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u4e86\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 attribute \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u503c\uff0c\u5176\u540e\u8ddf\u7684\u9009\u62e9\u5668\u8fd8\u662f *\uff0c\u8fd9\u4ee3\u8868\u83b7\u53d6\u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\uff0c\u8fd4\u56de\u503c\u5c31\u662f li \u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\u503c\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 child \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u9009\u53d6 href \u5c5e\u6027\u4e3a link1.html \u7684 a \u8282\u70b9\u3002 \u7b2c\u4e94\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 descendant \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b50\u5b59\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\u83b7\u53d6 span \u8282\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u53ea\u5305\u542b span \u8282\u70b9\u800c\u4e0d\u5305\u542b a \u8282\u70b9\u3002 \u7b2c\u516d\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 following \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u867d\u7136\u4f7f\u7528\u7684\u662f * \u5339\u914d\uff0c\u4f46\u53c8\u52a0\u4e86\u7d22\u5f15\u9009\u62e9\uff0c\u6240\u4ee5\u53ea\u83b7\u53d6\u4e86\u7b2c\u4e8c\u4e2a\u540e\u7eed\u8282\u70b9\u3002 \u7b2c\u4e03\u6b21\u9009\u62e9\u65f6\uff0c\u8c03\u7528\u4e86 following-sibling \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u540c\u7ea7\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 * \u5339\u914d\uff0c\u6240\u4ee5\u83b7\u53d6\u4e86\u6240\u6709\u540e\u7eed\u540c\u7ea7\u8282\u70b9\u3002 \u4ee5\u4e0a\u662f XPath \u8f74\u7684\u7b80\u5355\u7528\u6cd5\uff0c\u66f4\u591a\u8f74\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_axes.asp \u3002","title":"\u8282\u70b9\u8f74\u9009\u62e9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html","text":"Windows 10 Python 3.7.7 @ MSC v.1916 64 bit (AMD64) Latest build date 2020.10.09 \u521d\u59cb\u5316 \u50cf Beautiful Soup \u4e00\u6837\uff0c\u521d\u59cb\u5316 pyquery \u7684\u65f6\u5019\uff0c\u4e5f\u9700\u8981\u4f20\u5165 HTML \u6587\u672c\u6765\u521d\u59cb\u5316\u4e00\u4e2a PyQuery \u5bf9\u8c61\u3002\u5b83\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u6709\u591a\u79cd\uff0c\u6bd4\u5982\u76f4\u63a5\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u4f20\u5165 URL\uff0c\u4f20\u5165\u6587\u4ef6\u540d\uff0c\u7b49\u7b49\u3002 \u5b57\u7b26\u4e32\u521d\u59cb\u5316 html = ''' <div> <ul> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) doc ( 'li' ) [<li.item-0>, <li.item-1>, <li.item-0.active>, <li.item-1.active>, <li.item-0>] URL \u521d\u59cb\u5316 \u521d\u59cb\u5316\u7684\u53c2\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\u8fd8\u53ef\u4ee5\u4f20\u5165\u7f51\u9875\u7684 URL\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u6307\u5b9a\u53c2\u6570\u4e3a url \u5373\u53ef\uff1a from pyquery import PyQuery doc = PyQuery ( url = 'https://www.python.org' ) print ( doc ( 'title' )) <title>Welcome to Python.org</title> PyQuery \u5bf9\u8c61\u4f1a\u9996\u5148\u8bf7\u6c42\u8fd9\u4e2a URL\uff0c\u7136\u540e\u7528\u5f97\u5230\u7684 HTML \u5185\u5bb9\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u8fd9\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u7528\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002\u5b83\u4e0e\u4e0b\u9762\u7684\u529f\u80fd\u662f\u76f8\u540c\u7684\uff1a from pyquery import PyQuery import requests doc = PyQuery ( requests . get ( 'https://www.python.org' ) . text ) print ( doc ( 'title' )) <title>Welcome to Python.org</title> \u6587\u4ef6\u521d\u59cb\u5316 \u5f53\u7136\u9664\u4e86\u4f20\u9012\u4e00\u4e2a URL\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u7684\u6587\u4ef6\u540d\uff0c\u53c2\u6570\u6307\u5b9a\u4e3a filename \u5373\u53ef\uff1a from pyquery import PyQuery doc = PyQuery ( filename = '../datasets/file/test.html' ) print ( doc ( 'li' )) <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </li> \u9996\u5148\u8bfb\u53d6\u672c\u5730\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u7528\u6587\u4ef6\u5185\u5bb9\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002 \u57fa\u672c CSS \u9009\u62e9\u5668 \u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b pyquery \u7684 CSS \u9009\u62e9\u5668\u7684\u7528\u6cd5\uff1a html = ''' <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) print ( doc ( '#container .list li' ), \" \\n \" ) print ( type ( doc ( '#container .list li' ))) <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <class 'pyquery.pyquery.PyQuery'> \u521d\u59cb\u5316 PyQuery \u5bf9\u8c61\u4e4b\u540e\uff0c\u4f20\u5165\u4e86\u4e00\u4e2a CSS \u9009\u62e9\u5668 #container .list li \uff0c\u5b83\u7684\u610f\u601d\u662f\u5148\u9009\u53d6 id \u4e3a container \u7684\u8282\u70b9\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u5185\u90e8\u7684 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8\u7684\u6240\u6709 li \u8282\u70b9\u3002 \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684\u67e5\u8be2\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c jQuery \u4e2d\u7684\u65b9\u6cd5\u7528\u6cd5\u4e5f\u5b8c\u5168\u76f8\u540c\u3002 \u67e5\u627e\u5b50\u8282\u70b9 \u67e5\u627e\u5b50\u8282\u70b9\u9700\u8981\u7528\u5230 find \u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f CSS \u9009\u62e9\u5668\uff0c\u6211\u4eec\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4e3a\u4f8b\uff1a from pyquery import PyQuery doc = PyQuery ( html ) items = doc ( '.list' ) print ( type ( items ), \" \\n \" ) print ( items ) lis = items . find ( 'li' ) print ( type ( lis ), \" \\n \" ) print ( lis ) <class 'pyquery.pyquery.PyQuery'> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> \u9996\u5148\u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 find() \u65b9\u6cd5\uff0c\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u9009\u53d6\u5176\u5185\u90e8\u7684 li \u8282\u70b9\u3002 find \u65b9\u6cd5\u7684\u67e5\u627e\u8303\u56f4\u662f\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u8282\u70b9\uff0c\u800c\u5982\u679c\u6211\u4eec\u53ea\u60f3\u67e5\u627e\u5b50\u8282\u70b9\uff0c\u90a3\u53ef\u4ee5\u7528 children \u65b9\u6cd5\uff1a lis = items . children () print ( type ( lis ), \" \\n \" ) print ( lis ) <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> \u5982\u679c\u8981\u7b5b\u9009\u6240\u6709\u5b50\u8282\u70b9\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u6bd4\u5982\u60f3\u7b5b\u9009\u51fa\u5b50\u8282\u70b9\u4e2d class \u4e3a active \u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5411 children() \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668.active\uff1a lis = items . children ( '.active' ) print ( lis ) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u7ed3\u679c\u5df2\u7ecf\u505a\u4e86\u7b5b\u9009\uff0c\u7559\u4e0b\u4e86 class \u4e3a active \u7684\u8282\u70b9\u3002 \u67e5\u627e\u7236\u8282\u70b9 \u53ef\u4ee5\u7528 parent \u65b9\u6cd5\u6765\u83b7\u53d6\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) items = doc ( '.list' ) container = items . parent () print ( type ( container )) print ( container ) <class 'pyquery.pyquery.PyQuery'> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u7528.list \u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 parent \u65b9\u6cd5\u5f97\u5230\u5176\u7236\u8282\u70b9\uff0c\u5176\u7c7b\u578b\u4f9d\u7136\u662f PyQuery \u7c7b\u578b\u3002 \u8fd9\u91cc\u7684\u7236\u8282\u70b9\u662f\u8be5\u8282\u70b9\u7684\u76f4\u63a5\u7236\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u518d\u53bb\u67e5\u627e\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373\u7956\u5148\u8282\u70b9\u3002 \u5982\u679c\u60f3\u83b7\u53d6\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u7528 parents \u65b9\u6cd5\uff1a from pyquery import PyQuery doc = PyQuery ( html ) items = doc ( '.list' ) parents = items . parents () print ( type ( parents )) print ( parents ) <class 'pyquery.pyquery.PyQuery'> <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div><div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u6709\u4e24\u4e2a\uff1a\u4e00\u4e2a\u662f class \u4e3a wrap \u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u662f id \u4e3a container \u7684\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cparents() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u6240\u6709\u7684\u7956\u5148\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u7b5b\u9009\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8bdd\uff0c\u53ef\u4ee5\u5411 parents \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u8fd4\u56de\u7956\u5148\u8282\u70b9\u4e2d\u7b26\u5408 CSS \u9009\u62e9\u5668\u7684\u8282\u70b9\uff1a parent = items . parents ( '.wrap' ) print ( parent ) <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u5c11\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u4e86 class \u4e3a wrap \u7684\u8282\u70b9\u3002 \u67e5\u627e\u5144\u5f1f\u8282\u70b9 \u524d\u9762\u6211\u4eec\u8bf4\u660e\u4e86\u5b50\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u7528\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cd\u8282\u70b9\uff0c\u90a3\u5c31\u662f\u5144\u5f1f\u8282\u70b9\u3002\u5982\u679c\u8981\u83b7\u53d6\u5144\u5f1f\u8282\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 siblings() \u65b9\u6cd5\u3002\u8fd9\u91cc\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4ee3\u7801\u4e3a\u4f8b\uff1a from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ()) <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0\">first item</li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> \u8fd9\u91cc\u9996\u5148\u9009\u62e9 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8 class \u4e3a item-0 \u548c active \u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e09\u4e2a li \u8282\u70b9\u3002\u90a3\u4e48\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u7684\u5144\u5f1f\u8282\u70b9\u6709 4 \u4e2a\uff0c\u90a3\u5c31\u662f\u7b2c\u4e00\u3001\u4e8c\u3001\u56db\u3001\u4e94\u4e2a li \u8282\u70b9\u3002 \u5982\u679c\u8981\u7b5b\u9009\u67d0\u4e2a\u5144\u5f1f\u8282\u70b9\uff0c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5411 siblings \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u4ece\u6240\u6709\u5144\u5f1f\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u4e86\uff1a from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ( '.active' )) <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> \u8fd9\u91cc\u6211\u4eec\u7b5b\u9009\u4e86 class \u4e3a active \u7684\u8282\u70b9\uff0c\u901a\u8fc7\u521a\u624d\u7684\u7ed3\u679c\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cclass \u4e3a active \u7684\u5144\u5f1f\u8282\u70b9\u53ea\u6709\u7b2c\u56db\u4e2a li \u8282\u70b9\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u4e2a\u3002 \u904d\u5386 \u521a\u624d\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cpyquery \u7684\u9009\u62e9\u7ed3\u679c\u53ef\u80fd\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u4e2a\u8282\u70b9\uff0c\u7c7b\u578b\u90fd\u662f PyQuery \u7c7b\u578b\uff0c\u5e76\u6ca1\u6709\u8fd4\u56de\u50cf Beautiful Soup \u90a3\u6837\u7684\u5217\u8868\u3002 \u5bf9\u4e8e\u5355\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6210\u5b57\u7b26\u4e32\uff1a from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.item-0.active' ) print ( li ) print ( str ( li )) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> \u5bf9\u4e8e\u591a\u4e2a\u8282\u70b9\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u904d\u5386\u6765\u83b7\u53d6\u4e86\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u628a\u6bcf\u4e00\u4e2a li \u8282\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u9700\u8981\u8c03\u7528 items \u65b9\u6cd5\uff1a from pyquery import PyQuery doc = PyQuery ( html ) lis = doc ( 'li' ) . items () print ( type ( lis )) for li in lis : print ( li , type ( li )) <class 'generator'> <li class=\"item-0\">first item</li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <class 'pyquery.pyquery.PyQuery'> \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 items() \u65b9\u6cd5\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u904d\u5386\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u9010\u4e2a\u5f97\u5230 li \u8282\u70b9\u5bf9\u8c61\u4e86\uff0c\u5b83\u7684\u7c7b\u578b\u4e5f\u662f PyQuery \u7c7b\u578b\u3002\u6bcf\u4e2a li \u8282\u70b9\u8fd8\u53ef\u4ee5\u8c03\u7528\u524d\u9762\u6240\u8bf4\u7684\u65b9\u6cd5\u8fdb\u884c\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7eed\u67e5\u8be2\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7b49\uff0c\u975e\u5e38\u7075\u6d3b\u3002 \u83b7\u53d6\u4fe1\u606f \u63d0\u53d6\u5230\u8282\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u7684\u5f53\u7136\u662f\u63d0\u53d6\u8282\u70b9\u6240\u5305\u542b\u7684\u4fe1\u606f\u4e86\u3002\u6bd4\u8f83\u91cd\u8981\u7684\u4fe1\u606f\u6709\u4e24\u7c7b\uff0c\u4e00\u662f\u83b7\u53d6\u5c5e\u6027\uff0c\u4e8c\u662f\u83b7\u53d6\u6587\u672c\uff0c\u4e0b\u9762\u5206\u522b\u8fdb\u884c\u8bf4\u660e\u3002 \u83b7\u53d6\u5c5e\u6027 \u63d0\u53d6\u5230\u67d0\u4e2a PyQuery \u7c7b\u578b\u7684\u8282\u70b9\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 attr() \u65b9\u6cd5\u6765\u83b7\u53d6\u5c5e\u6027\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) a = doc ( '.item-0.active a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) <a href=\"link3.html\"><span class=\"bold\">third item</span></a> <class 'pyquery.pyquery.PyQuery'> link3.html \u8fd9\u91cc\u9996\u5148\u9009\u4e2d class \u4e3a item-0 \u548c active \u7684 li \u8282\u70b9\u5185\u7684 a \u8282\u70b9\uff0c\u5b83\u7684\u7c7b\u578b\u662f PyQuery \u7c7b\u578b\u3002 \u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u3002\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u4f20\u5165\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u5c5e\u6027\u503c\u4e86\u3002 \u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 attr \u5c5e\u6027\u6765\u83b7\u53d6\u5c5e\u6027\uff0c\u7528\u6cd5\u5982\u4e0b\uff1a print ( a . attr . href ) link3.html \u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u679c\u5b8c\u5168\u4e00\u6837\u3002 \u5982\u679c\u9009\u4e2d\u7684\u662f\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u4f1a\u51fa\u73b0\u600e\u6837\u7684\u7ed3\u679c\u5462\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a a = doc ( 'a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) print ( a . attr . href ) <a href=\"link2.html\">second item</a><a href=\"link3.html\"><span class=\"bold\">third item</span></a><a href=\"link4.html\">fourth item</a><a href=\"link5.html\">fifth item</a> <class 'pyquery.pyquery.PyQuery'> link2.html link2.html \u7167\u7406\u6765\u8bf4\uff0c\u6211\u4eec\u9009\u4e2d\u7684 a \u8282\u70b9\u5e94\u8be5\u6709 4 \u4e2a\uff0c\u800c\u4e14\u6253\u5370\u7ed3\u679c\u4e5f\u5e94\u8be5\u662f 4 \u4e2a\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u8c03\u7528 attr \u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de\u7ed3\u679c\u5374\u53ea\u662f\u7b2c\u4e00\u4e2a\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5f53\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u591a\u4e2a\u8282\u70b9\u65f6\uff0c\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u53ea\u4f1a\u5f97\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002 \u90a3\u4e48\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u6240\u6709\u7684 a \u8282\u70b9\u7684\u5c5e\u6027\uff0c\u5c31\u8981\u7528\u5230\u524d\u9762\u6240\u8bf4\u7684\u904d\u5386\u4e86\uff1a from pyquery import PyQuery doc = PyQuery ( html ) a = doc ( 'a' ) for item in a . items (): print ( item . attr ( 'href' )) link2.html link3.html link4.html link5.html \u56e0\u6b64\uff0c\u5728\u8fdb\u884c\u5c5e\u6027\u83b7\u53d6\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u8fd4\u56de\u8282\u70b9\u662f\u4e00\u4e2a\u8fd8\u662f\u591a\u4e2a\uff0c\u5982\u679c\u662f\u591a\u4e2a\uff0c\u5219\u9700\u8981\u904d\u5386\u624d\u80fd\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002 \u83b7\u53d6\u6587\u672c \u83b7\u53d6\u8282\u70b9\u4e4b\u540e\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u64cd\u4f5c\u5c31\u662f\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4e86\uff0c\u6b64\u65f6\u53ef\u4ee5\u8c03\u7528 text \u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) a = doc ( '.item-0.active a' ) print ( a ) print ( a . text ()) <a href=\"link3.html\"><span class=\"bold\">third item</span></a> third item \u8fd9\u91cc\u9996\u5148\u9009\u4e2d\u4e00\u4e2a a \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 text \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4fe1\u606f\u3002\u6b64\u65f6\u5b83\u4f1a\u5ffd\u7565\u6389\u8282\u70b9\u5185\u90e8\u5305\u542b\u7684\u6240\u6709 HTML\uff0c\u53ea\u8fd4\u56de\u7eaf\u6587\u5b57\u5185\u5bb9\u3002 \u4f46\u5982\u679c\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u8282\u70b9\u5185\u90e8\u7684 HTML \u6587\u672c\uff0c\u5c31\u8981\u7528 html \u65b9\u6cd5\u4e86\uff1a from pyquery import PyQuery as pq doc = pq(html) li = doc('.item-0.active') print(li) print(li.html()) \u8fd9\u91cc\u6211\u4eec\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 html() \u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u662f li \u8282\u70b9\u5185\u7684\u6240\u6709 HTML \u6587\u672c\u3002 \u8fd9\u91cc\u540c\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e2d\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0ctext() \u6216 html() \u4f1a\u8fd4\u56de\u4ec0\u4e48\u5185\u5bb9\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( 'li' ) print ( li . html ()) print ( li . text ()) print ( type ( li . text ())) <a href=\"link2.html\">second item</a> second item third item fourth item fifth item <class 'str'> \u7ed3\u679c\u53ef\u80fd\u6bd4\u8f83\u51fa\u4e4e\u610f\u6599\uff0chtml \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u800c text \u5219\u8fd4\u56de\u4e86\u6240\u6709\u7684 li \u8282\u70b9\u5185\u90e8\u7684\u7eaf\u6587\u672c\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\u5f00\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\uff0c\u5982\u679c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u60f3\u8981\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u5219\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\u3002\u800c text() \u65b9\u6cd5\u4e0d\u9700\u8981\u904d\u5386\u5c31\u53ef\u4ee5\u83b7\u53d6\uff0c\u5b83\u5c06\u6240\u6709\u8282\u70b9\u53d6\u6587\u672c\u4e4b\u540e\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u8282\u70b9\u64cd\u4f5c pyquery \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u6765\u5bf9\u8282\u70b9\u8fdb\u884c\u52a8\u6001\u4fee\u6539\uff0c\u6bd4\u5982\u4e3a\u67d0\u4e2a\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a class\uff0c\u79fb\u9664\u67d0\u4e2a\u8282\u70b9\u7b49\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6709\u65f6\u5019\u4f1a\u4e3a\u63d0\u53d6\u4fe1\u606f\u5e26\u6765\u6781\u5927\u7684\u4fbf\u5229\u3002 \u7531\u4e8e\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\u592a\u591a\uff0c\u4e0b\u9762\u4e3e\u51e0\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5b83\u7684\u7528\u6cd5\u3002 addClass \u548c removeClass \u6211\u4eec\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.item-0.active' ) print ( li ) li . removeClass ( 'active' ) print ( li ) li . addClass ( 'active' ) print ( li ) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> \u9996\u5148\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 removeClass() \u65b9\u6cd5\uff0c\u5c06 li \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u79fb\u9664\uff0c\u540e\u6765\u53c8\u8c03\u7528 addClass() \u65b9\u6cd5\uff0c\u5c06 class \u6dfb\u52a0\u56de\u6765\u3002\u6bcf\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u6253\u5370\u8f93\u51fa\u5f53\u524d li \u8282\u70b9\u7684\u5185\u5bb9\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u5171\u8f93\u51fa\u4e86 3 \u6b21\u3002\u7b2c\u4e8c\u6b21\u8f93\u51fa\u65f6\uff0cli \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u88ab\u79fb\u9664\u4e86\uff0c\u7b2c\u4e09\u6b21 class \u53c8\u6dfb\u52a0\u56de\u6765\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0caddClass \u548c removeClass \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u6539\u53d8\u8282\u70b9\u7684 class \u5c5e\u6027\u3002 attr\u3001text\u3001html \u5f53\u7136\uff0c\u9664\u4e86\u64cd\u4f5c class \u8fd9\u4e2a\u5c5e\u6027\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528 attr \u65b9\u6cd5\u5bf9\u5c5e\u6027\u8fdb\u884c\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <ul class=\"list\"> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> </ul> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.item-0.active' ) print ( li ) li . attr ( 'name' , 'link' ) print ( li ) li . text ( 'changed item' ) print ( li ) li . html ( '<span>changed item</span>' ) print ( li ) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\" name=\"link\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\" name=\"link\">changed item</li> <li class=\"item-0 active\" name=\"link\"><span>changed item</span></li> \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u9009\u4e2d li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u6765\u4fee\u6539\u5c5e\u6027\uff0c\u5176\u4e2d\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u503c\u3002\u63a5\u7740\uff0c\u8c03\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u4e09\u6b21\u64cd\u4f5c\u540e\uff0c\u5206\u522b\u6253\u5370\u8f93\u51fa\u5f53\u524d\u7684 li \u8282\u70b9\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 attr \u65b9\u6cd5\u540e\uff0cli \u8282\u70b9\u591a\u4e86\u4e00\u4e2a\u539f\u672c\u4e0d\u5b58\u5728\u7684\u5c5e\u6027 name\uff0c\u5176\u503c\u4e3a link\u3002\u63a5\u7740\u8c03\u7528 text \u65b9\u6cd5\uff0c\u4f20\u5165\u6587\u672c\u4e4b\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u5168\u88ab\u6539\u4e3a\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u6587\u672c\u4e86\u3002\u6700\u540e\uff0c\u8c03\u7528 html \u65b9\u6cd5\u4f20\u5165 HTML \u6587\u672c\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u53c8\u53d8\u4e3a\u4f20\u5165\u7684 HTML \u6587\u672c\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0c\u5982\u679c attr \u65b9\u6cd5\u53ea\u4f20\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5c5e\u6027\u540d\uff0c\u5219\u662f\u83b7\u53d6\u8fd9\u4e2a\u5c5e\u6027\u503c\uff1b\u5982\u679c\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u5c5e\u6027\u503c\u3002text \u548c html \u65b9\u6cd5\u5982\u679c\u4e0d\u4f20\u53c2\u6570\uff0c\u5219\u662f\u83b7\u53d6\u8282\u70b9\u5185\u7eaf\u6587\u672c\u548c HTML \u6587\u672c\uff1b\u5982\u679c\u4f20\u5165\u53c2\u6570\uff0c\u5219\u8fdb\u884c\u8d4b\u503c\u3002 remove \u987e\u540d\u601d\u4e49\uff0cremove \u65b9\u6cd5\u5c31\u662f\u79fb\u9664\uff0c\u5b83\u6709\u65f6\u4f1a\u4e3a\u4fe1\u606f\u7684\u63d0\u53d6\u5e26\u6765\u975e\u5e38\u5927\u7684\u4fbf\u5229\u3002\u4e0b\u9762\u6709\u4e00\u6bb5 HTML \u6587\u672c\uff1a html = ''' <div class=\"wrap\"> Hello, World <p>This is a paragraph.</p> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) wrap = doc ( '.wrap' ) print ( wrap . text ()) Hello, World This is a paragraph. \u73b0\u5728\u60f3\u63d0\u53d6 Hello, World \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u8981 p \u8282\u70b9\u5185\u90e8\u7684\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u600e\u6837\u64cd\u4f5c\u5462\uff1f \u8fd9\u91cc\u76f4\u63a5\u5148\u5c1d\u8bd5\u63d0\u53d6 class \u4e3a wrap \u7684\u8282\u70b9\u7684\u5185\u5bb9\uff0c\u770b\u770b\u662f\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a Hello, World This is a paragraph. \u8fd9\u4e2a\u7ed3\u679c\u8fd8\u5305\u542b\u4e86\u5185\u90e8\u7684 p \u8282\u70b9\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 text \u628a\u6240\u6709\u7684\u7eaf\u6587\u672c\u5168\u63d0\u53d6\u51fa\u6765\u4e86\u3002\u5982\u679c\u6211\u4eec\u60f3\u53bb\u6389 p \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u53ef\u4ee5\u9009\u62e9\u518d\u628a p \u8282\u70b9\u5185\u7684\u6587\u672c\u63d0\u53d6\u4e00\u904d\uff0c\u7136\u540e\u4ece\u6574\u4e2a\u7ed3\u679c\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5b50\u4e32\uff0c\u4f46\u8fd9\u4e2a\u505a\u6cd5\u660e\u663e\u6bd4\u8f83\u70e6\u7410\u3002 \u8fd9\u65f6 remove \u65b9\u6cd5\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u8fd9\u4e48\u505a: wrap . find ( 'p' ) . remove () print ( wrap . text ()) Hello, World \u9996\u5148\u9009\u4e2d p \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 remove() \u65b9\u6cd5\u5c06\u5176\u79fb\u9664\uff0c\u7136\u540e\u8fd9\u65f6 wrap \u5185\u90e8\u5c31\u53ea\u5269\u4e0b Hello, World \u8fd9\u53e5\u8bdd\u4e86\uff0c\u7136\u540e\u518d\u5229\u7528 text() \u65b9\u6cd5\u63d0\u53d6\u5373\u53ef\u3002 \u53e6\u5916\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 append()\u3001empty() \u548c prepend() \u7b49\u65b9\u6cd5\uff0c\u5b83\u4eec\u548c jQuery \u7684\u7528\u6cd5\u5b8c\u5168\u4e00\u81f4\uff0c\u8be6\u7ec6\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a http://pyquery.readthedocs.io/en/latest/api.html \u4f2a\u7c7b\u9009\u62e9\u5668 CSS \u9009\u62e9\u5668\u4e4b\u6240\u4ee5\u5f3a\u5927\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u539f\u56e0\uff0c\u90a3\u5c31\u662f\u5b83\u652f\u6301\u591a\u79cd\u591a\u6837\u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f8b\u5982\u9009\u62e9\u7b2c\u4e00\u4e2a\u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3001\u5947\u5076\u6570\u8282\u70b9\u3001\u5305\u542b\u67d0\u4e00\u6587\u672c\u7684\u8282\u70b9\u7b49\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( 'li:first-child' ) print ( li ) li = doc ( 'li:last-child' ) print ( li ) li = doc ( 'li:nth-child(2)' ) print ( li ) li = doc ( 'li:gt(2)' ) print ( li ) li = doc ( 'li:nth-child(2n)' ) print ( li ) li = doc ( 'li:contains(second)' ) print ( li ) <li class=\"item-0\">first item</li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 CSS3 \u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f9d\u6b21\u9009\u62e9\u4e86\u7b2c\u4e00\u4e2a li \u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e8c\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e09\u4e2a li \u4e4b\u540e\u7684 li \u8282\u70b9\u3001\u5076\u6570\u4f4d\u7f6e\u7684 li \u8282\u70b9\u3001\u5305\u542b second \u6587\u672c\u7684 li \u8282\u70b9\u3002 \u5173\u4e8e CSS \u9009\u62e9\u5668\u7684\u66f4\u591a\u7528\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003 http://www.w3school.com.cn/css/index.asp \u3002","title":"13.3.pyquery"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_1","text":"\u50cf Beautiful Soup \u4e00\u6837\uff0c\u521d\u59cb\u5316 pyquery \u7684\u65f6\u5019\uff0c\u4e5f\u9700\u8981\u4f20\u5165 HTML \u6587\u672c\u6765\u521d\u59cb\u5316\u4e00\u4e2a PyQuery \u5bf9\u8c61\u3002\u5b83\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u6709\u591a\u79cd\uff0c\u6bd4\u5982\u76f4\u63a5\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u4f20\u5165 URL\uff0c\u4f20\u5165\u6587\u4ef6\u540d\uff0c\u7b49\u7b49\u3002","title":"\u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_2","text":"html = ''' <div> <ul> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) doc ( 'li' ) [<li.item-0>, <li.item-1>, <li.item-0.active>, <li.item-1.active>, <li.item-0>]","title":"\u5b57\u7b26\u4e32\u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#url","text":"\u521d\u59cb\u5316\u7684\u53c2\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\u8fd8\u53ef\u4ee5\u4f20\u5165\u7f51\u9875\u7684 URL\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u6307\u5b9a\u53c2\u6570\u4e3a url \u5373\u53ef\uff1a from pyquery import PyQuery doc = PyQuery ( url = 'https://www.python.org' ) print ( doc ( 'title' )) <title>Welcome to Python.org</title> PyQuery \u5bf9\u8c61\u4f1a\u9996\u5148\u8bf7\u6c42\u8fd9\u4e2a URL\uff0c\u7136\u540e\u7528\u5f97\u5230\u7684 HTML \u5185\u5bb9\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u8fd9\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u7528\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002\u5b83\u4e0e\u4e0b\u9762\u7684\u529f\u80fd\u662f\u76f8\u540c\u7684\uff1a from pyquery import PyQuery import requests doc = PyQuery ( requests . get ( 'https://www.python.org' ) . text ) print ( doc ( 'title' )) <title>Welcome to Python.org</title>","title":"URL \u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_3","text":"\u5f53\u7136\u9664\u4e86\u4f20\u9012\u4e00\u4e2a URL\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u7684\u6587\u4ef6\u540d\uff0c\u53c2\u6570\u6307\u5b9a\u4e3a filename \u5373\u53ef\uff1a from pyquery import PyQuery doc = PyQuery ( filename = '../datasets/file/test.html' ) print ( doc ( 'li' )) <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </li> \u9996\u5148\u8bfb\u53d6\u672c\u5730\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u7528\u6587\u4ef6\u5185\u5bb9\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002","title":"\u6587\u4ef6\u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#css","text":"\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b pyquery \u7684 CSS \u9009\u62e9\u5668\u7684\u7528\u6cd5\uff1a html = ''' <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) print ( doc ( '#container .list li' ), \" \\n \" ) print ( type ( doc ( '#container .list li' ))) <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <class 'pyquery.pyquery.PyQuery'> \u521d\u59cb\u5316 PyQuery \u5bf9\u8c61\u4e4b\u540e\uff0c\u4f20\u5165\u4e86\u4e00\u4e2a CSS \u9009\u62e9\u5668 #container .list li \uff0c\u5b83\u7684\u610f\u601d\u662f\u5148\u9009\u53d6 id \u4e3a container \u7684\u8282\u70b9\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u5185\u90e8\u7684 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8\u7684\u6240\u6709 li \u8282\u70b9\u3002 \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684\u67e5\u8be2\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c jQuery \u4e2d\u7684\u65b9\u6cd5\u7528\u6cd5\u4e5f\u5b8c\u5168\u76f8\u540c\u3002","title":"\u57fa\u672c CSS \u9009\u62e9\u5668"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_4","text":"\u67e5\u627e\u5b50\u8282\u70b9\u9700\u8981\u7528\u5230 find \u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f CSS \u9009\u62e9\u5668\uff0c\u6211\u4eec\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4e3a\u4f8b\uff1a from pyquery import PyQuery doc = PyQuery ( html ) items = doc ( '.list' ) print ( type ( items ), \" \\n \" ) print ( items ) lis = items . find ( 'li' ) print ( type ( lis ), \" \\n \" ) print ( lis ) <class 'pyquery.pyquery.PyQuery'> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> \u9996\u5148\u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 find() \u65b9\u6cd5\uff0c\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u9009\u53d6\u5176\u5185\u90e8\u7684 li \u8282\u70b9\u3002 find \u65b9\u6cd5\u7684\u67e5\u627e\u8303\u56f4\u662f\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u8282\u70b9\uff0c\u800c\u5982\u679c\u6211\u4eec\u53ea\u60f3\u67e5\u627e\u5b50\u8282\u70b9\uff0c\u90a3\u53ef\u4ee5\u7528 children \u65b9\u6cd5\uff1a lis = items . children () print ( type ( lis ), \" \\n \" ) print ( lis ) <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> \u5982\u679c\u8981\u7b5b\u9009\u6240\u6709\u5b50\u8282\u70b9\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u6bd4\u5982\u60f3\u7b5b\u9009\u51fa\u5b50\u8282\u70b9\u4e2d class \u4e3a active \u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5411 children() \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668.active\uff1a lis = items . children ( '.active' ) print ( lis ) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u7ed3\u679c\u5df2\u7ecf\u505a\u4e86\u7b5b\u9009\uff0c\u7559\u4e0b\u4e86 class \u4e3a active \u7684\u8282\u70b9\u3002","title":"\u67e5\u627e\u5b50\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_5","text":"\u53ef\u4ee5\u7528 parent \u65b9\u6cd5\u6765\u83b7\u53d6\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) items = doc ( '.list' ) container = items . parent () print ( type ( container )) print ( container ) <class 'pyquery.pyquery.PyQuery'> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u7528.list \u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 parent \u65b9\u6cd5\u5f97\u5230\u5176\u7236\u8282\u70b9\uff0c\u5176\u7c7b\u578b\u4f9d\u7136\u662f PyQuery \u7c7b\u578b\u3002 \u8fd9\u91cc\u7684\u7236\u8282\u70b9\u662f\u8be5\u8282\u70b9\u7684\u76f4\u63a5\u7236\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u518d\u53bb\u67e5\u627e\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373\u7956\u5148\u8282\u70b9\u3002 \u5982\u679c\u60f3\u83b7\u53d6\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u7528 parents \u65b9\u6cd5\uff1a from pyquery import PyQuery doc = PyQuery ( html ) items = doc ( '.list' ) parents = items . parents () print ( type ( parents )) print ( parents ) <class 'pyquery.pyquery.PyQuery'> <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div><div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u6709\u4e24\u4e2a\uff1a\u4e00\u4e2a\u662f class \u4e3a wrap \u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u662f id \u4e3a container \u7684\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cparents() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u6240\u6709\u7684\u7956\u5148\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u7b5b\u9009\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8bdd\uff0c\u53ef\u4ee5\u5411 parents \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u8fd4\u56de\u7956\u5148\u8282\u70b9\u4e2d\u7b26\u5408 CSS \u9009\u62e9\u5668\u7684\u8282\u70b9\uff1a parent = items . parents ( '.wrap' ) print ( parent ) <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u5c11\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u4e86 class \u4e3a wrap \u7684\u8282\u70b9\u3002","title":"\u67e5\u627e\u7236\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_6","text":"\u524d\u9762\u6211\u4eec\u8bf4\u660e\u4e86\u5b50\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u7528\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cd\u8282\u70b9\uff0c\u90a3\u5c31\u662f\u5144\u5f1f\u8282\u70b9\u3002\u5982\u679c\u8981\u83b7\u53d6\u5144\u5f1f\u8282\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 siblings() \u65b9\u6cd5\u3002\u8fd9\u91cc\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4ee3\u7801\u4e3a\u4f8b\uff1a from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ()) <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0\">first item</li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> \u8fd9\u91cc\u9996\u5148\u9009\u62e9 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8 class \u4e3a item-0 \u548c active \u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e09\u4e2a li \u8282\u70b9\u3002\u90a3\u4e48\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u7684\u5144\u5f1f\u8282\u70b9\u6709 4 \u4e2a\uff0c\u90a3\u5c31\u662f\u7b2c\u4e00\u3001\u4e8c\u3001\u56db\u3001\u4e94\u4e2a li \u8282\u70b9\u3002 \u5982\u679c\u8981\u7b5b\u9009\u67d0\u4e2a\u5144\u5f1f\u8282\u70b9\uff0c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5411 siblings \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u4ece\u6240\u6709\u5144\u5f1f\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u4e86\uff1a from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ( '.active' )) <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> \u8fd9\u91cc\u6211\u4eec\u7b5b\u9009\u4e86 class \u4e3a active \u7684\u8282\u70b9\uff0c\u901a\u8fc7\u521a\u624d\u7684\u7ed3\u679c\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cclass \u4e3a active \u7684\u5144\u5f1f\u8282\u70b9\u53ea\u6709\u7b2c\u56db\u4e2a li \u8282\u70b9\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u4e2a\u3002","title":"\u67e5\u627e\u5144\u5f1f\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_7","text":"\u521a\u624d\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cpyquery \u7684\u9009\u62e9\u7ed3\u679c\u53ef\u80fd\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u4e2a\u8282\u70b9\uff0c\u7c7b\u578b\u90fd\u662f PyQuery \u7c7b\u578b\uff0c\u5e76\u6ca1\u6709\u8fd4\u56de\u50cf Beautiful Soup \u90a3\u6837\u7684\u5217\u8868\u3002 \u5bf9\u4e8e\u5355\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6210\u5b57\u7b26\u4e32\uff1a from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.item-0.active' ) print ( li ) print ( str ( li )) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> \u5bf9\u4e8e\u591a\u4e2a\u8282\u70b9\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u904d\u5386\u6765\u83b7\u53d6\u4e86\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u628a\u6bcf\u4e00\u4e2a li \u8282\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u9700\u8981\u8c03\u7528 items \u65b9\u6cd5\uff1a from pyquery import PyQuery doc = PyQuery ( html ) lis = doc ( 'li' ) . items () print ( type ( lis )) for li in lis : print ( li , type ( li )) <class 'generator'> <li class=\"item-0\">first item</li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <class 'pyquery.pyquery.PyQuery'> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <class 'pyquery.pyquery.PyQuery'> \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 items() \u65b9\u6cd5\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u904d\u5386\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u9010\u4e2a\u5f97\u5230 li \u8282\u70b9\u5bf9\u8c61\u4e86\uff0c\u5b83\u7684\u7c7b\u578b\u4e5f\u662f PyQuery \u7c7b\u578b\u3002\u6bcf\u4e2a li \u8282\u70b9\u8fd8\u53ef\u4ee5\u8c03\u7528\u524d\u9762\u6240\u8bf4\u7684\u65b9\u6cd5\u8fdb\u884c\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7eed\u67e5\u8be2\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7b49\uff0c\u975e\u5e38\u7075\u6d3b\u3002","title":"\u904d\u5386"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_8","text":"\u63d0\u53d6\u5230\u8282\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u7684\u5f53\u7136\u662f\u63d0\u53d6\u8282\u70b9\u6240\u5305\u542b\u7684\u4fe1\u606f\u4e86\u3002\u6bd4\u8f83\u91cd\u8981\u7684\u4fe1\u606f\u6709\u4e24\u7c7b\uff0c\u4e00\u662f\u83b7\u53d6\u5c5e\u6027\uff0c\u4e8c\u662f\u83b7\u53d6\u6587\u672c\uff0c\u4e0b\u9762\u5206\u522b\u8fdb\u884c\u8bf4\u660e\u3002","title":"\u83b7\u53d6\u4fe1\u606f"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_9","text":"\u63d0\u53d6\u5230\u67d0\u4e2a PyQuery \u7c7b\u578b\u7684\u8282\u70b9\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 attr() \u65b9\u6cd5\u6765\u83b7\u53d6\u5c5e\u6027\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) a = doc ( '.item-0.active a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) <a href=\"link3.html\"><span class=\"bold\">third item</span></a> <class 'pyquery.pyquery.PyQuery'> link3.html \u8fd9\u91cc\u9996\u5148\u9009\u4e2d class \u4e3a item-0 \u548c active \u7684 li \u8282\u70b9\u5185\u7684 a \u8282\u70b9\uff0c\u5b83\u7684\u7c7b\u578b\u662f PyQuery \u7c7b\u578b\u3002 \u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u3002\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u4f20\u5165\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u5c5e\u6027\u503c\u4e86\u3002 \u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 attr \u5c5e\u6027\u6765\u83b7\u53d6\u5c5e\u6027\uff0c\u7528\u6cd5\u5982\u4e0b\uff1a print ( a . attr . href ) link3.html \u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u679c\u5b8c\u5168\u4e00\u6837\u3002 \u5982\u679c\u9009\u4e2d\u7684\u662f\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u4f1a\u51fa\u73b0\u600e\u6837\u7684\u7ed3\u679c\u5462\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a a = doc ( 'a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) print ( a . attr . href ) <a href=\"link2.html\">second item</a><a href=\"link3.html\"><span class=\"bold\">third item</span></a><a href=\"link4.html\">fourth item</a><a href=\"link5.html\">fifth item</a> <class 'pyquery.pyquery.PyQuery'> link2.html link2.html \u7167\u7406\u6765\u8bf4\uff0c\u6211\u4eec\u9009\u4e2d\u7684 a \u8282\u70b9\u5e94\u8be5\u6709 4 \u4e2a\uff0c\u800c\u4e14\u6253\u5370\u7ed3\u679c\u4e5f\u5e94\u8be5\u662f 4 \u4e2a\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u8c03\u7528 attr \u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de\u7ed3\u679c\u5374\u53ea\u662f\u7b2c\u4e00\u4e2a\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5f53\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u591a\u4e2a\u8282\u70b9\u65f6\uff0c\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u53ea\u4f1a\u5f97\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002 \u90a3\u4e48\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u6240\u6709\u7684 a \u8282\u70b9\u7684\u5c5e\u6027\uff0c\u5c31\u8981\u7528\u5230\u524d\u9762\u6240\u8bf4\u7684\u904d\u5386\u4e86\uff1a from pyquery import PyQuery doc = PyQuery ( html ) a = doc ( 'a' ) for item in a . items (): print ( item . attr ( 'href' )) link2.html link3.html link4.html link5.html \u56e0\u6b64\uff0c\u5728\u8fdb\u884c\u5c5e\u6027\u83b7\u53d6\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u8fd4\u56de\u8282\u70b9\u662f\u4e00\u4e2a\u8fd8\u662f\u591a\u4e2a\uff0c\u5982\u679c\u662f\u591a\u4e2a\uff0c\u5219\u9700\u8981\u904d\u5386\u624d\u80fd\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002","title":"\u83b7\u53d6\u5c5e\u6027"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_10","text":"\u83b7\u53d6\u8282\u70b9\u4e4b\u540e\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u64cd\u4f5c\u5c31\u662f\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4e86\uff0c\u6b64\u65f6\u53ef\u4ee5\u8c03\u7528 text \u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) a = doc ( '.item-0.active a' ) print ( a ) print ( a . text ()) <a href=\"link3.html\"><span class=\"bold\">third item</span></a> third item \u8fd9\u91cc\u9996\u5148\u9009\u4e2d\u4e00\u4e2a a \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 text \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4fe1\u606f\u3002\u6b64\u65f6\u5b83\u4f1a\u5ffd\u7565\u6389\u8282\u70b9\u5185\u90e8\u5305\u542b\u7684\u6240\u6709 HTML\uff0c\u53ea\u8fd4\u56de\u7eaf\u6587\u5b57\u5185\u5bb9\u3002 \u4f46\u5982\u679c\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u8282\u70b9\u5185\u90e8\u7684 HTML \u6587\u672c\uff0c\u5c31\u8981\u7528 html \u65b9\u6cd5\u4e86\uff1a from pyquery import PyQuery as pq doc = pq(html) li = doc('.item-0.active') print(li) print(li.html()) \u8fd9\u91cc\u6211\u4eec\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 html() \u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u662f li \u8282\u70b9\u5185\u7684\u6240\u6709 HTML \u6587\u672c\u3002 \u8fd9\u91cc\u540c\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e2d\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0ctext() \u6216 html() \u4f1a\u8fd4\u56de\u4ec0\u4e48\u5185\u5bb9\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( 'li' ) print ( li . html ()) print ( li . text ()) print ( type ( li . text ())) <a href=\"link2.html\">second item</a> second item third item fourth item fifth item <class 'str'> \u7ed3\u679c\u53ef\u80fd\u6bd4\u8f83\u51fa\u4e4e\u610f\u6599\uff0chtml \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u800c text \u5219\u8fd4\u56de\u4e86\u6240\u6709\u7684 li \u8282\u70b9\u5185\u90e8\u7684\u7eaf\u6587\u672c\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\u5f00\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\uff0c\u5982\u679c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u60f3\u8981\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u5219\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\u3002\u800c text() \u65b9\u6cd5\u4e0d\u9700\u8981\u904d\u5386\u5c31\u53ef\u4ee5\u83b7\u53d6\uff0c\u5b83\u5c06\u6240\u6709\u8282\u70b9\u53d6\u6587\u672c\u4e4b\u540e\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002","title":"\u83b7\u53d6\u6587\u672c"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_11","text":"pyquery \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u6765\u5bf9\u8282\u70b9\u8fdb\u884c\u52a8\u6001\u4fee\u6539\uff0c\u6bd4\u5982\u4e3a\u67d0\u4e2a\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a class\uff0c\u79fb\u9664\u67d0\u4e2a\u8282\u70b9\u7b49\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6709\u65f6\u5019\u4f1a\u4e3a\u63d0\u53d6\u4fe1\u606f\u5e26\u6765\u6781\u5927\u7684\u4fbf\u5229\u3002 \u7531\u4e8e\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\u592a\u591a\uff0c\u4e0b\u9762\u4e3e\u51e0\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5b83\u7684\u7528\u6cd5\u3002","title":"\u8282\u70b9\u64cd\u4f5c"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#addclass-removeclass","text":"\u6211\u4eec\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.item-0.active' ) print ( li ) li . removeClass ( 'active' ) print ( li ) li . addClass ( 'active' ) print ( li ) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> \u9996\u5148\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 removeClass() \u65b9\u6cd5\uff0c\u5c06 li \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u79fb\u9664\uff0c\u540e\u6765\u53c8\u8c03\u7528 addClass() \u65b9\u6cd5\uff0c\u5c06 class \u6dfb\u52a0\u56de\u6765\u3002\u6bcf\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u6253\u5370\u8f93\u51fa\u5f53\u524d li \u8282\u70b9\u7684\u5185\u5bb9\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u5171\u8f93\u51fa\u4e86 3 \u6b21\u3002\u7b2c\u4e8c\u6b21\u8f93\u51fa\u65f6\uff0cli \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u88ab\u79fb\u9664\u4e86\uff0c\u7b2c\u4e09\u6b21 class \u53c8\u6dfb\u52a0\u56de\u6765\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0caddClass \u548c removeClass \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u6539\u53d8\u8282\u70b9\u7684 class \u5c5e\u6027\u3002","title":"addClass \u548c removeClass"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#attrtexthtml","text":"\u5f53\u7136\uff0c\u9664\u4e86\u64cd\u4f5c class \u8fd9\u4e2a\u5c5e\u6027\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528 attr \u65b9\u6cd5\u5bf9\u5c5e\u6027\u8fdb\u884c\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <ul class=\"list\"> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> </ul> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( '.item-0.active' ) print ( li ) li . attr ( 'name' , 'link' ) print ( li ) li . text ( 'changed item' ) print ( li ) li . html ( '<span>changed item</span>' ) print ( li ) <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\" name=\"link\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-0 active\" name=\"link\">changed item</li> <li class=\"item-0 active\" name=\"link\"><span>changed item</span></li> \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u9009\u4e2d li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u6765\u4fee\u6539\u5c5e\u6027\uff0c\u5176\u4e2d\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u503c\u3002\u63a5\u7740\uff0c\u8c03\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u4e09\u6b21\u64cd\u4f5c\u540e\uff0c\u5206\u522b\u6253\u5370\u8f93\u51fa\u5f53\u524d\u7684 li \u8282\u70b9\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 attr \u65b9\u6cd5\u540e\uff0cli \u8282\u70b9\u591a\u4e86\u4e00\u4e2a\u539f\u672c\u4e0d\u5b58\u5728\u7684\u5c5e\u6027 name\uff0c\u5176\u503c\u4e3a link\u3002\u63a5\u7740\u8c03\u7528 text \u65b9\u6cd5\uff0c\u4f20\u5165\u6587\u672c\u4e4b\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u5168\u88ab\u6539\u4e3a\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u6587\u672c\u4e86\u3002\u6700\u540e\uff0c\u8c03\u7528 html \u65b9\u6cd5\u4f20\u5165 HTML \u6587\u672c\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u53c8\u53d8\u4e3a\u4f20\u5165\u7684 HTML \u6587\u672c\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0c\u5982\u679c attr \u65b9\u6cd5\u53ea\u4f20\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5c5e\u6027\u540d\uff0c\u5219\u662f\u83b7\u53d6\u8fd9\u4e2a\u5c5e\u6027\u503c\uff1b\u5982\u679c\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u5c5e\u6027\u503c\u3002text \u548c html \u65b9\u6cd5\u5982\u679c\u4e0d\u4f20\u53c2\u6570\uff0c\u5219\u662f\u83b7\u53d6\u8282\u70b9\u5185\u7eaf\u6587\u672c\u548c HTML \u6587\u672c\uff1b\u5982\u679c\u4f20\u5165\u53c2\u6570\uff0c\u5219\u8fdb\u884c\u8d4b\u503c\u3002","title":"attr\u3001text\u3001html"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#remove","text":"\u987e\u540d\u601d\u4e49\uff0cremove \u65b9\u6cd5\u5c31\u662f\u79fb\u9664\uff0c\u5b83\u6709\u65f6\u4f1a\u4e3a\u4fe1\u606f\u7684\u63d0\u53d6\u5e26\u6765\u975e\u5e38\u5927\u7684\u4fbf\u5229\u3002\u4e0b\u9762\u6709\u4e00\u6bb5 HTML \u6587\u672c\uff1a html = ''' <div class=\"wrap\"> Hello, World <p>This is a paragraph.</p> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) wrap = doc ( '.wrap' ) print ( wrap . text ()) Hello, World This is a paragraph. \u73b0\u5728\u60f3\u63d0\u53d6 Hello, World \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u8981 p \u8282\u70b9\u5185\u90e8\u7684\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u600e\u6837\u64cd\u4f5c\u5462\uff1f \u8fd9\u91cc\u76f4\u63a5\u5148\u5c1d\u8bd5\u63d0\u53d6 class \u4e3a wrap \u7684\u8282\u70b9\u7684\u5185\u5bb9\uff0c\u770b\u770b\u662f\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a Hello, World This is a paragraph. \u8fd9\u4e2a\u7ed3\u679c\u8fd8\u5305\u542b\u4e86\u5185\u90e8\u7684 p \u8282\u70b9\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 text \u628a\u6240\u6709\u7684\u7eaf\u6587\u672c\u5168\u63d0\u53d6\u51fa\u6765\u4e86\u3002\u5982\u679c\u6211\u4eec\u60f3\u53bb\u6389 p \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u53ef\u4ee5\u9009\u62e9\u518d\u628a p \u8282\u70b9\u5185\u7684\u6587\u672c\u63d0\u53d6\u4e00\u904d\uff0c\u7136\u540e\u4ece\u6574\u4e2a\u7ed3\u679c\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5b50\u4e32\uff0c\u4f46\u8fd9\u4e2a\u505a\u6cd5\u660e\u663e\u6bd4\u8f83\u70e6\u7410\u3002 \u8fd9\u65f6 remove \u65b9\u6cd5\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u8fd9\u4e48\u505a: wrap . find ( 'p' ) . remove () print ( wrap . text ()) Hello, World \u9996\u5148\u9009\u4e2d p \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 remove() \u65b9\u6cd5\u5c06\u5176\u79fb\u9664\uff0c\u7136\u540e\u8fd9\u65f6 wrap \u5185\u90e8\u5c31\u53ea\u5269\u4e0b Hello, World \u8fd9\u53e5\u8bdd\u4e86\uff0c\u7136\u540e\u518d\u5229\u7528 text() \u65b9\u6cd5\u63d0\u53d6\u5373\u53ef\u3002 \u53e6\u5916\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 append()\u3001empty() \u548c prepend() \u7b49\u65b9\u6cd5\uff0c\u5b83\u4eec\u548c jQuery \u7684\u7528\u6cd5\u5b8c\u5168\u4e00\u81f4\uff0c\u8be6\u7ec6\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a http://pyquery.readthedocs.io/en/latest/api.html","title":"remove"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_12","text":"CSS \u9009\u62e9\u5668\u4e4b\u6240\u4ee5\u5f3a\u5927\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u539f\u56e0\uff0c\u90a3\u5c31\u662f\u5b83\u652f\u6301\u591a\u79cd\u591a\u6837\u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f8b\u5982\u9009\u62e9\u7b2c\u4e00\u4e2a\u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3001\u5947\u5076\u6570\u8282\u70b9\u3001\u5305\u542b\u67d0\u4e00\u6587\u672c\u7684\u8282\u70b9\u7b49\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery doc = PyQuery ( html ) li = doc ( 'li:first-child' ) print ( li ) li = doc ( 'li:last-child' ) print ( li ) li = doc ( 'li:nth-child(2)' ) print ( li ) li = doc ( 'li:gt(2)' ) print ( li ) li = doc ( 'li:nth-child(2n)' ) print ( li ) li = doc ( 'li:contains(second)' ) print ( li ) <li class=\"item-0\">first item</li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 CSS3 \u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f9d\u6b21\u9009\u62e9\u4e86\u7b2c\u4e00\u4e2a li \u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e8c\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e09\u4e2a li \u4e4b\u540e\u7684 li \u8282\u70b9\u3001\u5076\u6570\u4f4d\u7f6e\u7684 li \u8282\u70b9\u3001\u5305\u542b second \u6587\u672c\u7684 li \u8282\u70b9\u3002 \u5173\u4e8e CSS \u9009\u62e9\u5668\u7684\u66f4\u591a\u7528\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003 http://www.w3school.com.cn/css/index.asp \u3002","title":"\u4f2a\u7c7b\u9009\u62e9\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html","text":"\u7b80\u4ecb \u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u8fc7\u7a0b\u5c31\u662f\u8ba1\u7b97\u673a\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u7a0b\u5e8f\u662f\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\uff0c\u8fd9\u4e2a\u5e8f\u5217\u660e\u786e\u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u8be5\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\uff0c\u5728\u4ec0\u4e48\u5730\u65b9\u80fd\u591f\u627e\u5230\u7528\u6765\u64cd\u4f5c\u7684\u6570\u636e\u3002 \u4e00\u65e6\u628a\u7a0b\u5e8f\u88c5\u5165\u4e3b\u5b58\u50a8\u5668\uff0c\u8ba1\u7b97\u673a\u5c31\u53ef\u4ee5\u81ea\u52a8\u6267\u884c\u53d6\u51fa\u6307\u4ee4\u548c\u6267\u884c\u6307\u4ee4\u7684\u4efb\u52a1\u3002 \u4e13\u95e8\u7528\u6765\u5b8c\u6210\u6b64\u9879\u5de5\u4f5c\u7684\u8ba1\u7b97\u673a\u90e8\u4ef6\u79f0\u4e3a\u4e2d\u592e\u5904\u7406\u5668\uff08Central Processing Unit, CPU\uff09 \uff0c\u505a\u6210\u5355\u7247\u96c6\u6210\u7535\u8def\u7684CPU\u901a\u5e38\u53c8\u79f0\u4e3a\u5fae\u5904\u7406\u5668\uff08Microprocessor\uff09\uff0c\u5728\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u4e2d\u96c6\u6210\u4e86\u4e24\u4e2a CPU \u82af\u7247\uff0c\u79f0\u4e4b\u4e3a\u53cc\u6838\uff08dual core\uff09\u5fae\u5904\u7406\u5668\u3002\u73b0\u4ee3\u7684\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u5fae\u5904\u7406\u5668\u4f5c\u4e3aCPU\u3002 \u6ce8\u610f\uff1a CPU\u4e0d\u662f\u6307\u4e00\u4e2a\u7279\u5b9a\u7684\u67d0\u4e00\u7c7b\u4e1c\u897f\uff0c\u800c\u662f\u5177\u6709\u67d0\u79cd\u529f\u80fd\u7684\u90e8\u4ef6\u7684\u603b\u79f0\u3002 \u6240\u4ee5\uff0c\u4e0d\u7ba1\u662f\u4f55\u79cd\u5f62\u6001\u3001\u8bbe\u8ba1\u3001\u539f\u7406\u7684\u90e8\u4ef6\uff0c\u53ea\u8981\u5b83\u80fd\u5177\u6709\u53d6\u51fa\u6307\u4ee4\u3001\u6267\u884c\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u5b83\u5c31\u662fCPU\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c CPU \u662f\u7528\u6765\u8868\u793a\u8ba1\u7b97\u673a\u5185\u90e8\u5143\u4ef6\u529f\u80fd\u7684\u672f\u8bed\u3002 \u9676\u74f7PGA\u5c01\u88c5\u7684Intel 80486 DX2 CPU \u9876\u89c6\u56fe\u662fCPU\u7684\u9876\u76d6\uff0c\u7528\u6765\u4fdd\u62a4CPU Die\u3002\u5e95\u89c6\u56fe\u662fCPU\u5f15\u811a\uff0c\u5f15\u811a\u7528\u4e8e\u8f93\u5165\u6216\u8f93\u51fa\u7535\u4fe1\u53f7\uff0cCPU\u901a\u8fc7\u5f15\u811a\u63a7\u5236\u6574\u4e2a\u8ba1\u7b97\u673a\u3002 \u8ba1\u7b97\u673a\u5de5\u4e1a\u4ece1960W\u5e74\u4ee3\u65e9\u671f\u5f00\u59cb\u4f7f\u7528CPU\u8fd9\u4e2a\u672f\u8bed\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0cCPU\u4ece\u5f62\u6001\u3001\u8bbe\u8ba1\u5230\u5b9e\u73b0\u90fd\u5df2\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4f46\u662f\u5176\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u5374\u4e00\u76f4\u6ca1\u6709\u5927\u7684\u53d8\u5316\u3002 \u65e9\u671f\u7684CPU\u901a\u5e38\u662f\u4e3a\u5927\u578b\u3001\u7279\u5b9a\u7684\u5e94\u7528\u800c\u5b9a\u5236\u7684\u3002\u76ee\u524d\uff0c\u8fd9\u79cd\u4e3a\u7279\u5b9a\u5e94\u7528\u800c\u8bbe\u8ba1\u5b9a\u5236CPU\u7684\u6602\u8d35\u65b9\u6cd5\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5df2\u7ecf\u8ba9\u4f4d\u4e8e\u53ef\u5927\u89c4\u6a21\u751f\u4ea7\u7684\u901a\u7528\u5904\u7406\u5668\u3002\u8fd9\u79cd\u6807\u51c6\u5316\u8d8b\u52bf\uff0c\u8bde\u751f\u4e8e\u5206\u7acb\u6676\u4f53\u7ba1\u5927\u578b\u8ba1\u7b97\u673a\uff08Mainframe\uff09\u548c\u5c0f\u578b\u8ba1\u7b97\u673a\uff08Minicomputer\uff09\u5e74\u4ee3\uff0c\u5e76\u4e14\u968f\u7740\u96c6\u6210\u7535\u8def\uff08IC\uff09\u7684\u666e\u53ca\u800c\u5927\u5927\u52a0\u901f\u3002 \u73b0\u4ee3\u7684CPU\u4f7f\u7528\u96c6\u6210\u7535\u8def\u5236\u4f5c\uff0c\u96c6\u6210\u7535\u8def\u53ef\u4ee5\u628a\u65e5\u76ca\u590d\u6742\u7684CPU\u8bbe\u8ba1\u5236\u9020\u5728\u5f88\u5c0f\u7684\u7a7a\u95f4\u91cc\u3002CPU\u7684\u5c0f\u578b\u5316\u548c\u6807\u51c6\u5316\uff0c\u5927\u5927\u589e\u52a0\u4e86\u8fd9\u4e9b\u6570\u5b57\u5668\u4ef6\u5728\u73b0\u4ee3\u751f\u6d3b\u4e2d\u7684\u5e94\u7528\u8303\u56f4\uff0c\u8fdc\u8fdc\u8d85\u51fa\u4e86\u4e13\u7528\u8fd0\u7b97\u673a\u5668\u8fd9\u4e00\u6709\u9650\u7684\u5e94\u7528\u3002\u73b0\u4ee3\u5fae\u5904\u7406\u5668\u5df2\u7ecf\u968f\u5904\u53ef\u89c1\uff0c\u4ece\u6c7d\u8f66\u5230\u624b\u673a\uff0c\u751a\u81f3\u513f\u7ae5\u73a9\u5177\u3002 CPU\u5de5\u4f5c\u8fc7\u7a0b CPU\u548c\u5185\u5b58\u7531\u6570\u5b57\u96c6\u6210\u7535\u8def\uff08\u6570\u5b57\u82af\u7247\uff09\u6784\u6210\uff0c\u96c6\u6210\u7535\u8def\u901a\u5e38\u79f0\u4e3aIC\uff08Integrated Circuit\uff09\uff0c\u5b83\u7531\u6676\u4f53\u7ba1\u7ec4\u6210\uff0c\u6bcf\u4e00\u4e2a\u6676\u4f53\u7ba1\u5177\u6709ON/OFF\u4e24\u4e2a\u72b6\u6001\u3002CPU\u4e2d\u4e0d\u540c\u7684\u6570\u5b57\u7535\u8def\u5b9e\u73b0\u4e0d\u540c\u7684\u8fd0\u7b97\uff0c\u76f8\u540c\u7684\u8fd0\u7b97\u4e5f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u6570\u5b57\u7535\u8def\u5b9e\u73b0\u3002CPU\u80fd\u5b9e\u73b0\u7684\u5404\u79cd\u6700\u57fa\u672c\u7684\u8fd0\u7b97\u7edf\u79f0\u4e3a\u6307\u4ee4\u96c6\uff0c\u800c CPU\u81ea\u8eab\u5c31\u662f\u4e00\u79cd\u6307\u4ee4\u96c6\u7684\u5b9e\u73b0\u3002 \u5b9e\u9645\u4e0a\uff0c\u4ece\u8ba1\u7b97\u673a\u7ec4\u6210\u7684\u5c42\u6b21\u7ed3\u6784\u770b\uff0c\u8ba1\u7b97\u673a\u6307\u4ee4\u53c8\u5206\u4e3a\u5fae\u6307\u4ee4\u3001\u673a\u5668\u6307\u4ee4\u3001\u5b8f\u6307\u4ee4\u3002 \u5fae\u6307\u4ee4\uff1a\u5fae\u7a0b\u5e8f\u7ea7\u7684\u547d\u4ee4\uff0c\u5c5e\u4e8e\u786c\u4ef6\u3002 \u5b8f\u6307\u4ee4\uff1a\u82e5\u5e72\u6761\u673a\u5668\u6307\u4ee4\u7ec4\u6210\u7684\u547d\u4ee4\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\uff08\u6c47\u7f16\u8bed\u8a00\u7684\u5b8f\u6307\u4ee4\uff09\u3002 \u673a\u5668\u6307\u4ee4\uff1a\u901a\u5e38\u6240\u8bf4\u7684\u6307\u4ee4\uff0c\u4ecb\u4e8e\u5fae\u6307\u4ee4\u548c\u5b8f\u6307\u4ee4\u4e4b\u524d \uff0c\u53ef\u5b8c\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u7b97\u672f\u8fd0\u7b97\u6216\u903b\u8f91\u8fd0\u7b97\u64cd\u4f5c\u3002 \u673a\u5668\u6307\u4ee4\u662fCPU\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b\uff08\u6267\u884c\uff09\u7684\u6307\u4ee4\u3002 CPU\u7684\u57fa\u672c\u5de5\u4f5c\u662f\u6267\u884c\u5185\u5b58\u4e2d\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u5373\u7a0b\u5e8f\u3002 \u51e0\u4e4e\u6240\u6709\u7684\u51af\u8bfa\u4f0a\u66fc\u578b\u8ba1\u7b97\u673a\u7684CPU\uff0c\u5176\u5de5\u4f5c\u90fd\u53ef\u4ee5\u5206\u4e3a5\u4e2a\u9636\u6bb5\uff1a\u53d6\u6307\u4ee4\u3001\u6307\u4ee4\u8bd1\u7801\u3001\u6267\u884c\u6307\u4ee4\u3001\u8bbf\u5b58\u53d6\u6570\u548c\u7ed3\u679c\u5199\u56de\u3002\u5176\u4e2d\u53d6\u6307\u4ee4\u3001\u6307\u4ee4\u8bd1\u7801\u3001\u6267\u884c\u6307\u4ee4\u662f\u4e09\u4e2a\u4e0d\u53ef\u6216\u7f3a\u7684\u9636\u6bb5\u3002 \u6307\u4ee4\u7684\u6267\u884c\u8fc7\u7a0b \u8ba1\u7b97\u673a\u5728\u5de5\u4f5c\u65f6\uff0cCPU\u4f1a\u4e0d\u65ad\u91cd\u590d\u8fd95\u4e2a\u8fc7\u7a0b\uff0c\u9664\u975e\u9047\u5230\u505c\u673a\u6307\u4ee4\u3002 1\uff0e\u53d6\u6307\u4ee4 \u53d6\u6307\u4ee4\uff08Instruction Fetch\uff0cIF\uff09\u662f\u5c06\u4e00\u6761\u6307\u4ee4\u4ece\u4e3b\u5b58\u4e2d\u53d6\u5230\u6307\u4ee4\u5bc4\u5b58\u5668\u7684\u8fc7\u7a0b\u3002\u6307\u4ee4\u5148\u4ece\u5185\u5b58\u4e2d\u88ab\u53d6\u5230\u6570\u636e\u7f13\u51b2\u5bc4\u5b58\u5668\uff08DR\uff09\uff0c\u7136\u540e\u9001\u5165\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u3002 2\uff0e\u6307\u4ee4\u8bd1\u7801 \u53d6\u51fa\u6307\u4ee4\u540e\uff0c\u8ba1\u7b97\u673a\u7acb\u5373\u8fdb\u5165\u6307\u4ee4\u8bd1\u7801\uff08Instruction Decode\uff0cID\uff09\u9636\u6bb5\u3002 \u5728\u6307\u4ee4\u8bd1\u7801\u9636\u6bb5\uff0c\u6307\u4ee4\u8bd1\u7801\u5668\uff08ID\uff09\u6309\u7167\u9884\u5b9a\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u5bf9\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u4e2d\u7684\u6307\u4ee4\u8fdb\u884c\u62c6\u5206\u548c\u89e3\u91ca\uff0c\u8bc6\u522b\u548c\u533a\u5206\u51fa\u4e0d\u540c\u7684\u6307\u4ee4\u7c7b\u522b\u53ca\u5404\u79cd\u83b7\u53d6\u64cd\u4f5c\u6570\u7684\u65b9\u6cd5\u3002 \u5728\u7ec4\u5408\u903b\u8f91\u63a7\u5236\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u6307\u4ee4\u8bd1\u7801\u5668\u5bf9\u4e0d\u540c\u7684\u6307\u4ee4\u64cd\u4f5c\u7801\u4ea7\u751f\u4e0d\u540c\u7684\u63a7\u5236\u7535\u4f4d\uff0c\u4ee5\u5f62\u6210\u4e0d\u540c\u7684\u5fae\u64cd\u4f5c\u5e8f\u5217\uff1b\u5728\u5fae\u7a0b\u5e8f\u63a7\u5236\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u6307\u4ee4\u8bd1\u7801\u5668\u7528\u6307\u4ee4\u64cd\u4f5c\u7801\u627e\u5230\u6267\u884c\u8be5\u6307\u4ee4\u7684\u5fae\u7a0b\u5e8f\u7684\u5165\u53e3\uff0c\u5e76\u4ece\u6b64\u5165\u53e3\u5f00\u59cb\u6267\u884c\u3002 \u5728\u4f20\u7edf\u7684\u8bbe\u8ba1\u91cc\uff0cCPU\u4e2d\u8d1f\u8d23\u6307\u4ee4\u8bd1\u7801\u7684\u90e8\u5206\u662f\u65e0\u6cd5\u6539\u53d8\u7684\u786c\u4ef6\u3002\u4e0d\u8fc7\uff0c\u5728\u4f17\u591a\u8fd0\u7528\u5fae\u7a0b\u5e8f\u63a7\u5236\u6280\u672f\u7684\u65b0\u578bCPU\u4e2d\uff0c\u5fae\u7a0b\u5e8f\u6709\u65f6\u662f\u53ef\u91cd\u5199\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6210\u54c1CPU\u6765\u6539\u53d8CPU\u7684\u8bd1\u7801\u65b9\u5f0f\u3002 3\uff0e\u6267\u884c\u6307\u4ee4\u9636\u6bb5 \u5728\u53d6\u6307\u4ee4\u548c\u6307\u4ee4\u8bd1\u7801\u9636\u6bb5\u4e4b\u540e\uff0c\u63a5\u7740\u8fdb\u5165\u6267\u884c\u6307\u4ee4\uff08Execute\uff0cEX\uff09\u9636\u6bb5\u3002 \u6b64\u9636\u6bb5\u7684\u4efb\u52a1\u662f\u5b8c\u6210\u6307\u4ee4\u6240\u89c4\u5b9a\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u5177\u4f53\u5b9e\u73b0\u6307\u4ee4\u7684\u529f\u80fd\u3002\u4e3a\u6b64\uff0cCPU\u7684\u4e0d\u540c\u90e8\u5206\u88ab\u8fde\u63a5\u8d77\u6765\uff0c\u4ee5\u6267\u884c\u6240\u9700\u7684\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u6c42\u5b8c\u6210\u4e00\u4e2a\u52a0\u6cd5\u8fd0\u7b97\uff0c\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08ALU\uff09\u5c06\u88ab\u8fde\u63a5\u5230\u4e00\u7ec4\u8f93\u5165\u548c\u4e00\u7ec4\u8f93\u51fa\uff0c\u8f93\u5165\u7aef\u63d0\u4f9b\u9700\u8981\u76f8\u52a0\u7684\u6570\u503c\uff0c\u800c\u8f93\u51fa\u7aef\u5c06\u542b\u6709\u6700\u540e\u7684\u8fd0\u7b97\u7ed3\u679c\u3002 4\uff0e\u8bbf\u5b58\u53d6\u6570\u9636\u6bb5 \u6839\u636e\u6307\u4ee4\u9700\u8981\uff0c\u6709\u53ef\u80fd\u8981\u8bbf\u95ee\u4e3b\u5b58\uff0c\u8bfb\u53d6\u64cd\u4f5c\u6570\uff0c\u8fd9\u6837\u5c31\u8fdb\u5165\u4e86\u8bbf\u5b58\u53d6\u6570\uff08Memory\uff0cMEM\uff09\u9636\u6bb5\u3002 \u6b64\u9636\u6bb5\u7684\u4efb\u52a1\u662f\uff1a\u6839\u636e\u6307\u4ee4\u5730\u5740\u7801\uff0c\u5f97\u5230\u64cd\u4f5c\u6570\u5728\u4e3b\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u5e76\u4ece\u4e3b\u5b58\u4e2d\u8bfb\u53d6\u8be5\u64cd\u4f5c\u6570\u7528\u4e8e\u8fd0\u7b97\u3002 5\uff0e\u7ed3\u679c\u5199\u56de\u9636\u6bb5 \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u9636\u6bb5\uff0c\u7ed3\u679c\u5199\u56de\uff08Writeback\uff0cWB\uff09\u9636\u6bb5\u628a\u6267\u884c\u6307\u4ee4\u9636\u6bb5\u7684\u8fd0\u884c\u7ed3\u679c\u6570\u636e\u201c\u5199\u56de\u201d\u5230\u67d0\u79cd\u5b58\u50a8\u5f62\u5f0f\u3002\u7ed3\u679c\u6570\u636e\u7ecf\u5e38\u88ab\u5199\u5230CPU\u7684\u5185\u90e8\u5bc4\u5b58\u5668\u4e2d\uff0c\u4ee5\u4fbf\u88ab\u540e\u7eed\u7684\u6307\u4ee4\u5feb\u901f\u5730\u5b58\u53d6\u3002\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u6570\u636e\u4e5f\u53ef\u88ab\u5199\u5165\u76f8\u5bf9\u8f83\u6162\u3001\u4f46\u8f83\u5ec9\u4ef7\u4e14\u5bb9\u91cf\u8f83\u5927\u7684\u4e3b\u5b58\u3002\u8bb8\u591a\u6307\u4ee4\u8fd8\u4f1a\u6539\u53d8\u7a0b\u5e8f\u72b6\u6001\u5b57\u5bc4\u5b58\u5668\u4e2d\u6807\u5fd7\u4f4d\u7684\u72b6\u6001\uff0c\u8fd9\u4e9b\u6807\u5fd7\u4f4d\u6807\u8bc6\u7740\u4e0d\u540c\u7684\u64cd\u4f5c\u7ed3\u679c\uff0c\u53ef\u88ab\u7528\u6765\u5f71\u54cd\u7a0b\u5e8f\u7684\u52a8\u4f5c\u3002 \u5728\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\u3001\u7ed3\u679c\u6570\u636e\u5199\u56de\u4e4b\u540e\uff0c\u82e5\u65e0\u610f\u5916\u4e8b\u4ef6\uff08\u5982\u7ed3\u679c\u6ea2\u51fa\u7b49\uff09\u53d1\u751f\uff0c\u8ba1\u7b97\u673a\u5c31\u63a5\u7740\u4ece\u7a0b\u5e8f\u8ba1\u6570\u5668PC\u4e2d\u53d6\u5f97\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\uff0c\u5f00\u59cb\u65b0\u4e00\u8f6e\u7684\u5faa\u73af\uff0c\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u5c06\u6b63\u5e38\u5730\u987a\u5e8f\u53d6\u51fa\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 \u8bb8\u591a\u65b0\u578bCPU\u53ef\u4ee5\u540c\u65f6\u53d6\u51fa\u3001\u8bd1\u7801\u548c\u6267\u884c\u591a\u6761\u6307\u4ee4\uff0c\u4f53\u73b0\u51fa\u5e76\u884c\u5904\u7406\u7684\u7279\u6027\u3002 CPU\u90e8\u4ef6 CPU\u4e3b\u8981\u903b\u8f91\u7ed3\u6784 \u4ece\u529f\u80fd\u65b9\u9762\u6765\u770b\uff0cCPU\u7684\u5185\u90e8\u7531\u5bc4\u5b58\u5668\u3001\u63a7\u5236\u5668\u3001\u8fd0\u7b97\u5668\u548c\u65f6\u949f\u56db\u4e2a\u90e8\u4ef6\u6784\u6210\uff0c\u5176\u4e2d\uff0c\u63a7\u5236\u5668\u548c\u8fd0\u7b97\u5668\u662fCPU\u4e0d\u53ef\u6216\u7f3a\u7684\u90e8\u4ef6\u3002\u5404\u90e8\u4ef6\u4e4b\u95f4\u7531\u7535\u6d41\u4fe1\u53f7\u76f8\u4e92\u8fde\u901a\u3002 \u5bc4\u5b58\u5668\u7528\u6765\u6682\u5b58\u6307\u4ee4\u3001\u6570\u636e\u7b49\u5904\u7406\u5bf9\u8c61\uff0c\u662f\u50a8\u5b58\u5668\u7684\u4e00\u79cd\u3002\u6839\u636e\u79cd\u7c7b\u7684\u4e0d\u540c\uff0c\u4e00\u4e2a CPU \u5185\u90e8\u4f1a\u670920\uff5e100\u4e2a\u5bc4\u5b58\u5668\u3002 \u63a7\u5236\u5668\u8d1f\u8d23\u628a\u5185\u5b58\u4e0a\u7684\u6307\u4ee4\u3001\u6570\u636e\u7b49\u8bfb\u5165\u5bc4\u5b58\u5668\uff0c\u5e76\u6839\u636e\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u6765\u63a7\u5236\u6574\u4e2a\u8ba1\u7b97\u673a\u3002 \u8fd0\u7b97\u5668\u8d1f\u8d23\u8fd0\u7b97\u4ece\u5185\u5b58\u8bfb\u5165\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002 \u65f6\u949f\u8d1f\u8d23\u53d1\u51fa CPU \u5f00\u59cb\u8ba1\u65f6\u7684\u65f6\u949f\u4fe1\u53f7\u3002\u4e0d\u8fc7\uff0c\u4e5f\u6709\u4e9b\u8ba1\u7b97\u673a\u7684\u65f6\u949f\u4f4d\u4e8e CPU \u7684\u5916\u90e8\u3002 \u5bc4\u5b58\u5668 \u5206\u4e3a\u901a\u7528\u5bc4\u5b58\u5668\u548c\u4e13\u7528\u5bc4\u5b58\u5668\u3002\u4e13\u7528\u5bc4\u5b58\u5668\u4f5c\u7528\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u63a7\u5236\u5668\u548c\u8fd0\u7b97\u5668\u4e2d\u7684\u5bc4\u5b58\u5668\u3002\u800c\u901a\u7528\u5bc4\u5b58\u5668\u53ef\u4ee5\u7531\u7a0b\u5e8f\u5458\u6307\u5b9a\u7528\u9014\u3002 \u6839\u636e\u529f\u80fd\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5c06\u5bc4\u5b58\u5668\u5927\u81f4\u5212\u5206\u4e3a\u516b\u7c7b\u3002\u53ef\u4ee5\u770b\u51fa\uff0c \u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\u65e2\u53ef\u4ee5\u662f\u6307\u4ee4\u4e5f\u53ef\u4ee5\u662f\u6570\u636e\u3002\u5176\u4e2d\uff0c\u6570\u636e\u5206\u4e3a\u201c\u7528\u4e8e\u8fd0\u7b97\u7684\u6570\u503c\u201d\u548c\u201c\u8868\u793a\u5185\u5b58\u5730\u5740\u7684\u6570\u503c\u201d\u4e24\u79cd\u3002 \u6570\u636e\u79cd\u7c7b\u4e0d\u540c\uff0c\u5b58\u50a8\u8be5\u6570\u503c\u7684\u5bc4\u5b58\u5668\u4e5f\u4e0d\u540c\u3002CPU \u4e2d\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u529f\u80fd\u90fd\u662f\u4e0d\u540c\u7684\u3002 \u79cd\u7c7b \u529f\u80fd \u7d2f\u52a0\u5bc4\u5b58\u5668 accumulator \u5b58\u50a8\u6267\u884c\u8fd0\u7b97\u7684\u6570\u636e\u548c\u8fd0\u7b97\u540e\u7684\u6570\u636e \u6807\u5fd7\u5bc4\u5b58\u5668 flag register \u5b58\u50a8\u8fd0\u7b97\u5904\u7406\u540e\u7684 CPU \u7684\u72b6\u6001 \u7a0b\u5e8f\u8ba1\u6570\u5668 program counter \u5b58\u50a8\u4e0b\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5185\u5b58\u7684\u5730\u5740 \u57fa\u5740\u5bc4\u5b58\u5668 base register \u5b58\u50a8\u6570\u636e\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740 \u53d8\u5740\u5bc4\u5b58\u5668 index register \u5b58\u50a8\u57fa\u5740\u5bc4\u5b58\u5668\u7684\u76f8\u5bf9\u5730\u5740 \u901a\u7528\u5bc4\u5b58\u5668 general purpose register \u5b58\u50a8\u4efb\u610f\u6570\u636e \u6307\u4ee4\u5bc4\u5b58\u5668 instruction register \u5b58\u50a8\u6307\u4ee4\u3002CPU \u5185\u90e8\u4f7f\u7528\uff0c\u7a0b\u5e8f\u5458\u65e0\u6cd5\u901a\u8fc7\u7a0b\u5e8f\u5bf9\u8be5\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c \u6808\u5bc4\u5b58\u5668 stack register \u5b58\u50a8\u6808\u533a\u57df\u7684\u8d77\u59cb\u5730\u5740 \u5176\u4e2d \u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u7d2f\u52a0\u5bc4\u5b58\u5668\u3001\u6807\u5fd7\u5bc4\u5b58\u5668\u3001\u6307\u4ee4\u5bc4\u5b58\u5668\u548c\u6808\u5bc4\u5b58\u5668 \u90fd\u53ea\u6709\u4e00\u4e2a\uff0c\u5176\u4ed6\u5bc4\u5b58\u5668\u4e00\u822c\u6709\u591a\u4e2a\u3002 \u5bc4\u5b58\u5668\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u6bd4\u8f83\u7279\u6b8a\uff0c\u56e0\u4e3a\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u76f4\u63a5\u64cd\u7eb5\u5bc4\u5b58\u5668\uff1a # \u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u793a\u4f8b mov eax, dword ptr [ebp-8] # \u628a\u6570\u503c\u4ece\u5185\u5b58\u590d\u5236\u5230 eax add eax, dword ptr [ebp-0Ch] # exa \u7684\u6570\u503c\u548c\u5185\u5b58\u7684\u6570\u503c\u76f8\u52a0 mov dword ptr [ebp-4], eax # \u628a exa \u7684\u6570\u503c\uff08\u4e0a\u4e00\u6b65\u7684\u76f8\u52a0\u7ed3\u679c\uff09\u5b58\u50a8\u5728\u5185\u5b58\u4e2d eax \u548c ebp \u662f CPU \u5185\u90e8\u7684\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u3002 \u5185\u5b58\u7684\u5b58\u50a8\u573a\u6240\u901a\u8fc7\u5730\u5740\u7f16\u53f7\u6765\u533a\u5206\uff0c\u800c\u5bc4\u5b58\u5668\u7684\u79cd\u7c7b\u5219\u901a\u8fc7\u540d\u5b57\u6765\u533a\u5206\u3002 \u8fd0\u7b97\u5668 \u7b97\u672f\u903b\u8f91\u5355\u5143\uff08Arithmetic and Logic Unit, ALU \uff09\uff1a\u8d1f\u8d23\u5bf9\u6570\u636e\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u548c\u903b\u8f91\u8fd0\u7b97\u3002 \u7d2f\u52a0\u5bc4\u5b58\u5668\uff08 AC \uff09\uff1a\u7d2f\u52a0\u5668\uff0c\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u4e3a ALU \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u4f5c\u533a\u3002 \u6570\u636e\u7f13\u51b2\u5bc4\u5b58\u5668\uff08 DR \uff09\uff1a\u4e3aCPU\u548c\u5185\u5b58\u3001\u5916\u56f4\u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u4f20\u9001\u7684\u4e2d\u8f6c\u7ad9\u3001\u7f13\u51b2\u3002 \u72b6\u6001\u6761\u4ef6\u5bc4\u5b58\u5668\uff08 PSW \uff09\uff1a\u5305\u62ec\u72b6\u6001\u6807\u51c6\u548c\u63a7\u5236\u6807\u5fd7\uff0c\u4f8b\u5982\u8fdb\u4f4d(C)\u3001\u6ea2\u51fa(V)\u3001\u8fd0\u7b97\u7ed3\u679c\u4e3a0\uff08Z\uff09\u3001\u8fd0\u7b97\u7ed3\u679c\u4e3a\u8d1f\u503c\uff08N\uff09\u3001\u4e2d\u65ad\uff08I\uff09\u7b49\u3002 \u63a7\u5236\u5668 \u63a7\u5236\u5668\u7528\u4e8e\u63a7\u5236\u6574\u4e2aCPU\u7684\u5de5\u4f5c\u3002\u4e00\u822c\u5305\u62ec\uff1a \u6307\u4ee4\u5bc4\u5b58\u5668\uff08 IR \uff09\uff1a\u5f53CPU\u6267\u884c\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u5148\u628a\u5b83\u4ece\u5185\u5b58\u4e2d\u53d6\u5230 DR \uff0c\u7136\u540e\u9001\u5165 IR \u6682\u5b58\u3002\u6307\u4ee4\u8bd1\u7801\u5668\u6839\u636e IR \u7684\u5185\u5bb9\u4ea7\u751f\u5404\u79cd\u5fae\u64cd\u4f5c\u6307\u4ee4\uff0c\u63a7\u5236\u5176\u4ed6\u90e8\u4ef6\u5b8c\u6210\u5de5\u4f5c\u3002 \u7a0b\u5e8f\u8ba1\u6570\u5668\uff08 PC \uff09: \u53c8\u79f0\u4e4b\u4e3a\u6307\u4ee4\u8ba1\u6570\u5668\uff0c PC \u6709\u5bc4\u5b58\u4fe1\u606f\u548c\u8ba1\u6570\u4e24\u4e2a\u529f\u80fd\u3002\u6267\u884c\u6307\u4ee4\u65f6\uff0cCPU\u5c06\u81ea\u52a8\u4fee\u6539 PC \u5185\u5bb9\uff0c\u4f7f\u5176\u4fdd\u6301\u7684\u603b\u662f\u5c06\u8981\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 \u5730\u5740\u5bc4\u5b58\u5668\uff08 AR \uff09: \u4fdd\u5b58\u4e86\u5f53\u524dCPU\u6240\u8bbf\u95ee\u5185\u5bb9\u5355\u5143\u7684\u5730\u5740\uff0c\u76f4\u5230\u5bf9\u5185\u5b58\u7684\u8bfb\u5199\u64cd\u4f5c\u5b8c\u6210\u3002 \u6307\u4ee4\u8bd1\u7801\u5668\uff08 ID \uff09: \u6307\u4ee4\u5206\u4e3a\u64cd\u4f5c\u7801\u548c\u5730\u5740\u7801\u4e24\u90e8\u5206\u3002 ID \u662f\u5bf9\u6307\u4ee4\u4e2d\u7684\u64cd\u4f5c\u7801\u5b57\u6bb5\u8fdb\u884c\u5206\u6790\u89e3\u91ca\uff0c\u8bc6\u522b\u6307\u4ee4\u89c4\u5b9a\u7684\u64cd\u4f5c\uff0c\u5411\u64cd\u4f5c\u63a7\u5236\u5668\u53d1\u51fa\u5177\u4f53\u7684\u63a7\u5236\u4fe1\u53f7\uff0c\u63a7\u5236\u5404\u90e8\u4ef6\u5b8c\u6210\u5de5\u4f5c\u3002 \u5176\u4ed6\u8fd8\u5305\u62ec\uff1a \u65f6\u5e8f\u63a7\u5236\u5668\uff1a\u4e3a\u6bcf\u6761\u6307\u4ee4\u6309\u65f6\u95f4\u987a\u5e8f\u63d0\u4f9b\u6709\u6548\u7684\u63a7\u5236\u4fe1\u53f7\u3002 \u603b\u7ebf\u903b\u8f91\uff1a\u4fe1\u606f\u901a\u8def\u7684\u63a7\u5236\u7535\u8def\u3002 \u4e2d\u65ad\u63a7\u5236\u5668\uff1a\u7528\u4e8e\u63a7\u5236\u5404\u79cd\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5e76\u6839\u636e\u4f18\u5148\u7ea7\u8fdb\u884c\u6392\u961f\uff0c\u9010\u4e2a\u4ea4\u7ed9CPU\u5904\u7406\u3002 e.t.c \u6d41\u6c34\u7ebf\u6280\u672f CPU\u53ef\u4ee5\u6709\u5206\u5f00\u7684\u53d6\u503c\u5355\u5143\u3001\u89e3\u7801\u5355\u5143\u3001\u548c\u6267\u884c\u5355\u5143\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5fc5\u7b49\u5230\u4e00\u6761\u6307\u4ee4\u4ece\u5934\u5230\u5c3e\u6267\u884c\u5b8c\u6bd5\u540e\u518d\u5f00\u59cb\u5904\u7406\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u4e09\u7ea7\u6d41\u6c34\u7ebf\u5176\u793a\u610f\u56fe\u4e3a\uff1a // \u6d41\u6c34\u7ebf\u6280\u672f ^ | X : \u53d6\u6307\u6d41\u6c34\u7ebf | Y : \u89e3\u7801\u6d41\u6c34\u7ebf | Z : \u6267\u884c\u6d41\u6c34\u7ebf | | + -------+ + ------+------+-----------------+-----+ X | 1 | 2 | ... | n | + -------+ + ----------+------+-------------+----------+ Y | | 1 | | 2 | ... | n | + -------+ | + ------+---------+-----+-----+-+---------+ Z | | 1 | 2 | 3 | ... | | n | \u65f6\u95f4 + -------+ + -----------------+-----+-----+-----+------------------ > |XXXXXX|YYY| |ZZZZ| |XXXXXX|YYY| |ZZZZ| + ----------+ + ----+ \u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u53d6\u6307\u5b8c\u6210\uff08\u5bf9\u5e94\u56fe\u4e2dXXXXXX\u6807\u6ce8\u533a\u57df\uff09\uff0c\u89e3\u7801\u6d41\u6c34\u7ebf\u7acb\u5373\u5f00\u59cb\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u89e3\u7801\uff0c\u540c\u65f6\u53d6\u6307\u6d41\u6c34\u7ebf\u5f00\u59cb\u5bf9\u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u53d6\u6307\uff1b\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u89e3\u7801\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\uff08\u5bf9\u5e94\u56fe\u4e2dYYYY\u6807\u6ce8\u533a\u57df\uff09\uff0c\u6267\u884c\u6d41\u6c34\u7ebf\u5f00\u59cb\u5bf9\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c\u64cd\u4f5c\uff0c\u540c\u65f6\u89e3\u7801\u6d41\u6c34\u7ebf\u7b49\u5f85\u7b2c\u4e8c\u6761\u6307\u4ee4\u9001\u8fbe\u3002 \u53c2\u8003 CPU\u7684\u529f\u80fd\u548c\u7ec4\u6210 CPU\u7684\u5de5\u4f5c\u8fc7\u7a0b \u64cd\u4f5c\u7cfb\u7edf\u7b14\u8bb0 \u786c\u4ef6\u57fa\u7840\u2014\u2014CPU","title":"1.1.CPU"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#_1","text":"\u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u8fc7\u7a0b\u5c31\u662f\u8ba1\u7b97\u673a\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u7a0b\u5e8f\u662f\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\uff0c\u8fd9\u4e2a\u5e8f\u5217\u660e\u786e\u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u8be5\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\uff0c\u5728\u4ec0\u4e48\u5730\u65b9\u80fd\u591f\u627e\u5230\u7528\u6765\u64cd\u4f5c\u7684\u6570\u636e\u3002 \u4e00\u65e6\u628a\u7a0b\u5e8f\u88c5\u5165\u4e3b\u5b58\u50a8\u5668\uff0c\u8ba1\u7b97\u673a\u5c31\u53ef\u4ee5\u81ea\u52a8\u6267\u884c\u53d6\u51fa\u6307\u4ee4\u548c\u6267\u884c\u6307\u4ee4\u7684\u4efb\u52a1\u3002 \u4e13\u95e8\u7528\u6765\u5b8c\u6210\u6b64\u9879\u5de5\u4f5c\u7684\u8ba1\u7b97\u673a\u90e8\u4ef6\u79f0\u4e3a\u4e2d\u592e\u5904\u7406\u5668\uff08Central Processing Unit, CPU\uff09 \uff0c\u505a\u6210\u5355\u7247\u96c6\u6210\u7535\u8def\u7684CPU\u901a\u5e38\u53c8\u79f0\u4e3a\u5fae\u5904\u7406\u5668\uff08Microprocessor\uff09\uff0c\u5728\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u4e2d\u96c6\u6210\u4e86\u4e24\u4e2a CPU \u82af\u7247\uff0c\u79f0\u4e4b\u4e3a\u53cc\u6838\uff08dual core\uff09\u5fae\u5904\u7406\u5668\u3002\u73b0\u4ee3\u7684\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u5fae\u5904\u7406\u5668\u4f5c\u4e3aCPU\u3002 \u6ce8\u610f\uff1a CPU\u4e0d\u662f\u6307\u4e00\u4e2a\u7279\u5b9a\u7684\u67d0\u4e00\u7c7b\u4e1c\u897f\uff0c\u800c\u662f\u5177\u6709\u67d0\u79cd\u529f\u80fd\u7684\u90e8\u4ef6\u7684\u603b\u79f0\u3002 \u6240\u4ee5\uff0c\u4e0d\u7ba1\u662f\u4f55\u79cd\u5f62\u6001\u3001\u8bbe\u8ba1\u3001\u539f\u7406\u7684\u90e8\u4ef6\uff0c\u53ea\u8981\u5b83\u80fd\u5177\u6709\u53d6\u51fa\u6307\u4ee4\u3001\u6267\u884c\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u5b83\u5c31\u662fCPU\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c CPU \u662f\u7528\u6765\u8868\u793a\u8ba1\u7b97\u673a\u5185\u90e8\u5143\u4ef6\u529f\u80fd\u7684\u672f\u8bed\u3002 \u9676\u74f7PGA\u5c01\u88c5\u7684Intel 80486 DX2 CPU \u9876\u89c6\u56fe\u662fCPU\u7684\u9876\u76d6\uff0c\u7528\u6765\u4fdd\u62a4CPU Die\u3002\u5e95\u89c6\u56fe\u662fCPU\u5f15\u811a\uff0c\u5f15\u811a\u7528\u4e8e\u8f93\u5165\u6216\u8f93\u51fa\u7535\u4fe1\u53f7\uff0cCPU\u901a\u8fc7\u5f15\u811a\u63a7\u5236\u6574\u4e2a\u8ba1\u7b97\u673a\u3002 \u8ba1\u7b97\u673a\u5de5\u4e1a\u4ece1960W\u5e74\u4ee3\u65e9\u671f\u5f00\u59cb\u4f7f\u7528CPU\u8fd9\u4e2a\u672f\u8bed\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0cCPU\u4ece\u5f62\u6001\u3001\u8bbe\u8ba1\u5230\u5b9e\u73b0\u90fd\u5df2\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4f46\u662f\u5176\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u5374\u4e00\u76f4\u6ca1\u6709\u5927\u7684\u53d8\u5316\u3002 \u65e9\u671f\u7684CPU\u901a\u5e38\u662f\u4e3a\u5927\u578b\u3001\u7279\u5b9a\u7684\u5e94\u7528\u800c\u5b9a\u5236\u7684\u3002\u76ee\u524d\uff0c\u8fd9\u79cd\u4e3a\u7279\u5b9a\u5e94\u7528\u800c\u8bbe\u8ba1\u5b9a\u5236CPU\u7684\u6602\u8d35\u65b9\u6cd5\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5df2\u7ecf\u8ba9\u4f4d\u4e8e\u53ef\u5927\u89c4\u6a21\u751f\u4ea7\u7684\u901a\u7528\u5904\u7406\u5668\u3002\u8fd9\u79cd\u6807\u51c6\u5316\u8d8b\u52bf\uff0c\u8bde\u751f\u4e8e\u5206\u7acb\u6676\u4f53\u7ba1\u5927\u578b\u8ba1\u7b97\u673a\uff08Mainframe\uff09\u548c\u5c0f\u578b\u8ba1\u7b97\u673a\uff08Minicomputer\uff09\u5e74\u4ee3\uff0c\u5e76\u4e14\u968f\u7740\u96c6\u6210\u7535\u8def\uff08IC\uff09\u7684\u666e\u53ca\u800c\u5927\u5927\u52a0\u901f\u3002 \u73b0\u4ee3\u7684CPU\u4f7f\u7528\u96c6\u6210\u7535\u8def\u5236\u4f5c\uff0c\u96c6\u6210\u7535\u8def\u53ef\u4ee5\u628a\u65e5\u76ca\u590d\u6742\u7684CPU\u8bbe\u8ba1\u5236\u9020\u5728\u5f88\u5c0f\u7684\u7a7a\u95f4\u91cc\u3002CPU\u7684\u5c0f\u578b\u5316\u548c\u6807\u51c6\u5316\uff0c\u5927\u5927\u589e\u52a0\u4e86\u8fd9\u4e9b\u6570\u5b57\u5668\u4ef6\u5728\u73b0\u4ee3\u751f\u6d3b\u4e2d\u7684\u5e94\u7528\u8303\u56f4\uff0c\u8fdc\u8fdc\u8d85\u51fa\u4e86\u4e13\u7528\u8fd0\u7b97\u673a\u5668\u8fd9\u4e00\u6709\u9650\u7684\u5e94\u7528\u3002\u73b0\u4ee3\u5fae\u5904\u7406\u5668\u5df2\u7ecf\u968f\u5904\u53ef\u89c1\uff0c\u4ece\u6c7d\u8f66\u5230\u624b\u673a\uff0c\u751a\u81f3\u513f\u7ae5\u73a9\u5177\u3002","title":"\u7b80\u4ecb"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#cpu","text":"CPU\u548c\u5185\u5b58\u7531\u6570\u5b57\u96c6\u6210\u7535\u8def\uff08\u6570\u5b57\u82af\u7247\uff09\u6784\u6210\uff0c\u96c6\u6210\u7535\u8def\u901a\u5e38\u79f0\u4e3aIC\uff08Integrated Circuit\uff09\uff0c\u5b83\u7531\u6676\u4f53\u7ba1\u7ec4\u6210\uff0c\u6bcf\u4e00\u4e2a\u6676\u4f53\u7ba1\u5177\u6709ON/OFF\u4e24\u4e2a\u72b6\u6001\u3002CPU\u4e2d\u4e0d\u540c\u7684\u6570\u5b57\u7535\u8def\u5b9e\u73b0\u4e0d\u540c\u7684\u8fd0\u7b97\uff0c\u76f8\u540c\u7684\u8fd0\u7b97\u4e5f\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u6570\u5b57\u7535\u8def\u5b9e\u73b0\u3002CPU\u80fd\u5b9e\u73b0\u7684\u5404\u79cd\u6700\u57fa\u672c\u7684\u8fd0\u7b97\u7edf\u79f0\u4e3a\u6307\u4ee4\u96c6\uff0c\u800c CPU\u81ea\u8eab\u5c31\u662f\u4e00\u79cd\u6307\u4ee4\u96c6\u7684\u5b9e\u73b0\u3002 \u5b9e\u9645\u4e0a\uff0c\u4ece\u8ba1\u7b97\u673a\u7ec4\u6210\u7684\u5c42\u6b21\u7ed3\u6784\u770b\uff0c\u8ba1\u7b97\u673a\u6307\u4ee4\u53c8\u5206\u4e3a\u5fae\u6307\u4ee4\u3001\u673a\u5668\u6307\u4ee4\u3001\u5b8f\u6307\u4ee4\u3002 \u5fae\u6307\u4ee4\uff1a\u5fae\u7a0b\u5e8f\u7ea7\u7684\u547d\u4ee4\uff0c\u5c5e\u4e8e\u786c\u4ef6\u3002 \u5b8f\u6307\u4ee4\uff1a\u82e5\u5e72\u6761\u673a\u5668\u6307\u4ee4\u7ec4\u6210\u7684\u547d\u4ee4\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\uff08\u6c47\u7f16\u8bed\u8a00\u7684\u5b8f\u6307\u4ee4\uff09\u3002 \u673a\u5668\u6307\u4ee4\uff1a\u901a\u5e38\u6240\u8bf4\u7684\u6307\u4ee4\uff0c\u4ecb\u4e8e\u5fae\u6307\u4ee4\u548c\u5b8f\u6307\u4ee4\u4e4b\u524d \uff0c\u53ef\u5b8c\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u7b97\u672f\u8fd0\u7b97\u6216\u903b\u8f91\u8fd0\u7b97\u64cd\u4f5c\u3002 \u673a\u5668\u6307\u4ee4\u662fCPU\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b\uff08\u6267\u884c\uff09\u7684\u6307\u4ee4\u3002 CPU\u7684\u57fa\u672c\u5de5\u4f5c\u662f\u6267\u884c\u5185\u5b58\u4e2d\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u5373\u7a0b\u5e8f\u3002 \u51e0\u4e4e\u6240\u6709\u7684\u51af\u8bfa\u4f0a\u66fc\u578b\u8ba1\u7b97\u673a\u7684CPU\uff0c\u5176\u5de5\u4f5c\u90fd\u53ef\u4ee5\u5206\u4e3a5\u4e2a\u9636\u6bb5\uff1a\u53d6\u6307\u4ee4\u3001\u6307\u4ee4\u8bd1\u7801\u3001\u6267\u884c\u6307\u4ee4\u3001\u8bbf\u5b58\u53d6\u6570\u548c\u7ed3\u679c\u5199\u56de\u3002\u5176\u4e2d\u53d6\u6307\u4ee4\u3001\u6307\u4ee4\u8bd1\u7801\u3001\u6267\u884c\u6307\u4ee4\u662f\u4e09\u4e2a\u4e0d\u53ef\u6216\u7f3a\u7684\u9636\u6bb5\u3002 \u6307\u4ee4\u7684\u6267\u884c\u8fc7\u7a0b \u8ba1\u7b97\u673a\u5728\u5de5\u4f5c\u65f6\uff0cCPU\u4f1a\u4e0d\u65ad\u91cd\u590d\u8fd95\u4e2a\u8fc7\u7a0b\uff0c\u9664\u975e\u9047\u5230\u505c\u673a\u6307\u4ee4\u3002 1\uff0e\u53d6\u6307\u4ee4 \u53d6\u6307\u4ee4\uff08Instruction Fetch\uff0cIF\uff09\u662f\u5c06\u4e00\u6761\u6307\u4ee4\u4ece\u4e3b\u5b58\u4e2d\u53d6\u5230\u6307\u4ee4\u5bc4\u5b58\u5668\u7684\u8fc7\u7a0b\u3002\u6307\u4ee4\u5148\u4ece\u5185\u5b58\u4e2d\u88ab\u53d6\u5230\u6570\u636e\u7f13\u51b2\u5bc4\u5b58\u5668\uff08DR\uff09\uff0c\u7136\u540e\u9001\u5165\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u3002 2\uff0e\u6307\u4ee4\u8bd1\u7801 \u53d6\u51fa\u6307\u4ee4\u540e\uff0c\u8ba1\u7b97\u673a\u7acb\u5373\u8fdb\u5165\u6307\u4ee4\u8bd1\u7801\uff08Instruction Decode\uff0cID\uff09\u9636\u6bb5\u3002 \u5728\u6307\u4ee4\u8bd1\u7801\u9636\u6bb5\uff0c\u6307\u4ee4\u8bd1\u7801\u5668\uff08ID\uff09\u6309\u7167\u9884\u5b9a\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u5bf9\u6307\u4ee4\u5bc4\u5b58\u5668\uff08IR\uff09\u4e2d\u7684\u6307\u4ee4\u8fdb\u884c\u62c6\u5206\u548c\u89e3\u91ca\uff0c\u8bc6\u522b\u548c\u533a\u5206\u51fa\u4e0d\u540c\u7684\u6307\u4ee4\u7c7b\u522b\u53ca\u5404\u79cd\u83b7\u53d6\u64cd\u4f5c\u6570\u7684\u65b9\u6cd5\u3002 \u5728\u7ec4\u5408\u903b\u8f91\u63a7\u5236\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u6307\u4ee4\u8bd1\u7801\u5668\u5bf9\u4e0d\u540c\u7684\u6307\u4ee4\u64cd\u4f5c\u7801\u4ea7\u751f\u4e0d\u540c\u7684\u63a7\u5236\u7535\u4f4d\uff0c\u4ee5\u5f62\u6210\u4e0d\u540c\u7684\u5fae\u64cd\u4f5c\u5e8f\u5217\uff1b\u5728\u5fae\u7a0b\u5e8f\u63a7\u5236\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u6307\u4ee4\u8bd1\u7801\u5668\u7528\u6307\u4ee4\u64cd\u4f5c\u7801\u627e\u5230\u6267\u884c\u8be5\u6307\u4ee4\u7684\u5fae\u7a0b\u5e8f\u7684\u5165\u53e3\uff0c\u5e76\u4ece\u6b64\u5165\u53e3\u5f00\u59cb\u6267\u884c\u3002 \u5728\u4f20\u7edf\u7684\u8bbe\u8ba1\u91cc\uff0cCPU\u4e2d\u8d1f\u8d23\u6307\u4ee4\u8bd1\u7801\u7684\u90e8\u5206\u662f\u65e0\u6cd5\u6539\u53d8\u7684\u786c\u4ef6\u3002\u4e0d\u8fc7\uff0c\u5728\u4f17\u591a\u8fd0\u7528\u5fae\u7a0b\u5e8f\u63a7\u5236\u6280\u672f\u7684\u65b0\u578bCPU\u4e2d\uff0c\u5fae\u7a0b\u5e8f\u6709\u65f6\u662f\u53ef\u91cd\u5199\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6210\u54c1CPU\u6765\u6539\u53d8CPU\u7684\u8bd1\u7801\u65b9\u5f0f\u3002 3\uff0e\u6267\u884c\u6307\u4ee4\u9636\u6bb5 \u5728\u53d6\u6307\u4ee4\u548c\u6307\u4ee4\u8bd1\u7801\u9636\u6bb5\u4e4b\u540e\uff0c\u63a5\u7740\u8fdb\u5165\u6267\u884c\u6307\u4ee4\uff08Execute\uff0cEX\uff09\u9636\u6bb5\u3002 \u6b64\u9636\u6bb5\u7684\u4efb\u52a1\u662f\u5b8c\u6210\u6307\u4ee4\u6240\u89c4\u5b9a\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u5177\u4f53\u5b9e\u73b0\u6307\u4ee4\u7684\u529f\u80fd\u3002\u4e3a\u6b64\uff0cCPU\u7684\u4e0d\u540c\u90e8\u5206\u88ab\u8fde\u63a5\u8d77\u6765\uff0c\u4ee5\u6267\u884c\u6240\u9700\u7684\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u6c42\u5b8c\u6210\u4e00\u4e2a\u52a0\u6cd5\u8fd0\u7b97\uff0c\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08ALU\uff09\u5c06\u88ab\u8fde\u63a5\u5230\u4e00\u7ec4\u8f93\u5165\u548c\u4e00\u7ec4\u8f93\u51fa\uff0c\u8f93\u5165\u7aef\u63d0\u4f9b\u9700\u8981\u76f8\u52a0\u7684\u6570\u503c\uff0c\u800c\u8f93\u51fa\u7aef\u5c06\u542b\u6709\u6700\u540e\u7684\u8fd0\u7b97\u7ed3\u679c\u3002 4\uff0e\u8bbf\u5b58\u53d6\u6570\u9636\u6bb5 \u6839\u636e\u6307\u4ee4\u9700\u8981\uff0c\u6709\u53ef\u80fd\u8981\u8bbf\u95ee\u4e3b\u5b58\uff0c\u8bfb\u53d6\u64cd\u4f5c\u6570\uff0c\u8fd9\u6837\u5c31\u8fdb\u5165\u4e86\u8bbf\u5b58\u53d6\u6570\uff08Memory\uff0cMEM\uff09\u9636\u6bb5\u3002 \u6b64\u9636\u6bb5\u7684\u4efb\u52a1\u662f\uff1a\u6839\u636e\u6307\u4ee4\u5730\u5740\u7801\uff0c\u5f97\u5230\u64cd\u4f5c\u6570\u5728\u4e3b\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u5e76\u4ece\u4e3b\u5b58\u4e2d\u8bfb\u53d6\u8be5\u64cd\u4f5c\u6570\u7528\u4e8e\u8fd0\u7b97\u3002 5\uff0e\u7ed3\u679c\u5199\u56de\u9636\u6bb5 \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u9636\u6bb5\uff0c\u7ed3\u679c\u5199\u56de\uff08Writeback\uff0cWB\uff09\u9636\u6bb5\u628a\u6267\u884c\u6307\u4ee4\u9636\u6bb5\u7684\u8fd0\u884c\u7ed3\u679c\u6570\u636e\u201c\u5199\u56de\u201d\u5230\u67d0\u79cd\u5b58\u50a8\u5f62\u5f0f\u3002\u7ed3\u679c\u6570\u636e\u7ecf\u5e38\u88ab\u5199\u5230CPU\u7684\u5185\u90e8\u5bc4\u5b58\u5668\u4e2d\uff0c\u4ee5\u4fbf\u88ab\u540e\u7eed\u7684\u6307\u4ee4\u5feb\u901f\u5730\u5b58\u53d6\u3002\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u6570\u636e\u4e5f\u53ef\u88ab\u5199\u5165\u76f8\u5bf9\u8f83\u6162\u3001\u4f46\u8f83\u5ec9\u4ef7\u4e14\u5bb9\u91cf\u8f83\u5927\u7684\u4e3b\u5b58\u3002\u8bb8\u591a\u6307\u4ee4\u8fd8\u4f1a\u6539\u53d8\u7a0b\u5e8f\u72b6\u6001\u5b57\u5bc4\u5b58\u5668\u4e2d\u6807\u5fd7\u4f4d\u7684\u72b6\u6001\uff0c\u8fd9\u4e9b\u6807\u5fd7\u4f4d\u6807\u8bc6\u7740\u4e0d\u540c\u7684\u64cd\u4f5c\u7ed3\u679c\uff0c\u53ef\u88ab\u7528\u6765\u5f71\u54cd\u7a0b\u5e8f\u7684\u52a8\u4f5c\u3002 \u5728\u6307\u4ee4\u6267\u884c\u5b8c\u6bd5\u3001\u7ed3\u679c\u6570\u636e\u5199\u56de\u4e4b\u540e\uff0c\u82e5\u65e0\u610f\u5916\u4e8b\u4ef6\uff08\u5982\u7ed3\u679c\u6ea2\u51fa\u7b49\uff09\u53d1\u751f\uff0c\u8ba1\u7b97\u673a\u5c31\u63a5\u7740\u4ece\u7a0b\u5e8f\u8ba1\u6570\u5668PC\u4e2d\u53d6\u5f97\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\uff0c\u5f00\u59cb\u65b0\u4e00\u8f6e\u7684\u5faa\u73af\uff0c\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u5c06\u6b63\u5e38\u5730\u987a\u5e8f\u53d6\u51fa\u4e0b\u4e00\u6761\u6307\u4ee4\u3002 \u8bb8\u591a\u65b0\u578bCPU\u53ef\u4ee5\u540c\u65f6\u53d6\u51fa\u3001\u8bd1\u7801\u548c\u6267\u884c\u591a\u6761\u6307\u4ee4\uff0c\u4f53\u73b0\u51fa\u5e76\u884c\u5904\u7406\u7684\u7279\u6027\u3002","title":"CPU\u5de5\u4f5c\u8fc7\u7a0b"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#cpu_1","text":"CPU\u4e3b\u8981\u903b\u8f91\u7ed3\u6784 \u4ece\u529f\u80fd\u65b9\u9762\u6765\u770b\uff0cCPU\u7684\u5185\u90e8\u7531\u5bc4\u5b58\u5668\u3001\u63a7\u5236\u5668\u3001\u8fd0\u7b97\u5668\u548c\u65f6\u949f\u56db\u4e2a\u90e8\u4ef6\u6784\u6210\uff0c\u5176\u4e2d\uff0c\u63a7\u5236\u5668\u548c\u8fd0\u7b97\u5668\u662fCPU\u4e0d\u53ef\u6216\u7f3a\u7684\u90e8\u4ef6\u3002\u5404\u90e8\u4ef6\u4e4b\u95f4\u7531\u7535\u6d41\u4fe1\u53f7\u76f8\u4e92\u8fde\u901a\u3002 \u5bc4\u5b58\u5668\u7528\u6765\u6682\u5b58\u6307\u4ee4\u3001\u6570\u636e\u7b49\u5904\u7406\u5bf9\u8c61\uff0c\u662f\u50a8\u5b58\u5668\u7684\u4e00\u79cd\u3002\u6839\u636e\u79cd\u7c7b\u7684\u4e0d\u540c\uff0c\u4e00\u4e2a CPU \u5185\u90e8\u4f1a\u670920\uff5e100\u4e2a\u5bc4\u5b58\u5668\u3002 \u63a7\u5236\u5668\u8d1f\u8d23\u628a\u5185\u5b58\u4e0a\u7684\u6307\u4ee4\u3001\u6570\u636e\u7b49\u8bfb\u5165\u5bc4\u5b58\u5668\uff0c\u5e76\u6839\u636e\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u6765\u63a7\u5236\u6574\u4e2a\u8ba1\u7b97\u673a\u3002 \u8fd0\u7b97\u5668\u8d1f\u8d23\u8fd0\u7b97\u4ece\u5185\u5b58\u8bfb\u5165\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002 \u65f6\u949f\u8d1f\u8d23\u53d1\u51fa CPU \u5f00\u59cb\u8ba1\u65f6\u7684\u65f6\u949f\u4fe1\u53f7\u3002\u4e0d\u8fc7\uff0c\u4e5f\u6709\u4e9b\u8ba1\u7b97\u673a\u7684\u65f6\u949f\u4f4d\u4e8e CPU \u7684\u5916\u90e8\u3002","title":"CPU\u90e8\u4ef6"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#_2","text":"\u5206\u4e3a\u901a\u7528\u5bc4\u5b58\u5668\u548c\u4e13\u7528\u5bc4\u5b58\u5668\u3002\u4e13\u7528\u5bc4\u5b58\u5668\u4f5c\u7528\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u63a7\u5236\u5668\u548c\u8fd0\u7b97\u5668\u4e2d\u7684\u5bc4\u5b58\u5668\u3002\u800c\u901a\u7528\u5bc4\u5b58\u5668\u53ef\u4ee5\u7531\u7a0b\u5e8f\u5458\u6307\u5b9a\u7528\u9014\u3002 \u6839\u636e\u529f\u80fd\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5c06\u5bc4\u5b58\u5668\u5927\u81f4\u5212\u5206\u4e3a\u516b\u7c7b\u3002\u53ef\u4ee5\u770b\u51fa\uff0c \u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\u65e2\u53ef\u4ee5\u662f\u6307\u4ee4\u4e5f\u53ef\u4ee5\u662f\u6570\u636e\u3002\u5176\u4e2d\uff0c\u6570\u636e\u5206\u4e3a\u201c\u7528\u4e8e\u8fd0\u7b97\u7684\u6570\u503c\u201d\u548c\u201c\u8868\u793a\u5185\u5b58\u5730\u5740\u7684\u6570\u503c\u201d\u4e24\u79cd\u3002 \u6570\u636e\u79cd\u7c7b\u4e0d\u540c\uff0c\u5b58\u50a8\u8be5\u6570\u503c\u7684\u5bc4\u5b58\u5668\u4e5f\u4e0d\u540c\u3002CPU \u4e2d\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u529f\u80fd\u90fd\u662f\u4e0d\u540c\u7684\u3002 \u79cd\u7c7b \u529f\u80fd \u7d2f\u52a0\u5bc4\u5b58\u5668 accumulator \u5b58\u50a8\u6267\u884c\u8fd0\u7b97\u7684\u6570\u636e\u548c\u8fd0\u7b97\u540e\u7684\u6570\u636e \u6807\u5fd7\u5bc4\u5b58\u5668 flag register \u5b58\u50a8\u8fd0\u7b97\u5904\u7406\u540e\u7684 CPU \u7684\u72b6\u6001 \u7a0b\u5e8f\u8ba1\u6570\u5668 program counter \u5b58\u50a8\u4e0b\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5185\u5b58\u7684\u5730\u5740 \u57fa\u5740\u5bc4\u5b58\u5668 base register \u5b58\u50a8\u6570\u636e\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740 \u53d8\u5740\u5bc4\u5b58\u5668 index register \u5b58\u50a8\u57fa\u5740\u5bc4\u5b58\u5668\u7684\u76f8\u5bf9\u5730\u5740 \u901a\u7528\u5bc4\u5b58\u5668 general purpose register \u5b58\u50a8\u4efb\u610f\u6570\u636e \u6307\u4ee4\u5bc4\u5b58\u5668 instruction register \u5b58\u50a8\u6307\u4ee4\u3002CPU \u5185\u90e8\u4f7f\u7528\uff0c\u7a0b\u5e8f\u5458\u65e0\u6cd5\u901a\u8fc7\u7a0b\u5e8f\u5bf9\u8be5\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c \u6808\u5bc4\u5b58\u5668 stack register \u5b58\u50a8\u6808\u533a\u57df\u7684\u8d77\u59cb\u5730\u5740 \u5176\u4e2d \u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u7d2f\u52a0\u5bc4\u5b58\u5668\u3001\u6807\u5fd7\u5bc4\u5b58\u5668\u3001\u6307\u4ee4\u5bc4\u5b58\u5668\u548c\u6808\u5bc4\u5b58\u5668 \u90fd\u53ea\u6709\u4e00\u4e2a\uff0c\u5176\u4ed6\u5bc4\u5b58\u5668\u4e00\u822c\u6709\u591a\u4e2a\u3002 \u5bc4\u5b58\u5668\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u6bd4\u8f83\u7279\u6b8a\uff0c\u56e0\u4e3a\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u76f4\u63a5\u64cd\u7eb5\u5bc4\u5b58\u5668\uff1a # \u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u793a\u4f8b mov eax, dword ptr [ebp-8] # \u628a\u6570\u503c\u4ece\u5185\u5b58\u590d\u5236\u5230 eax add eax, dword ptr [ebp-0Ch] # exa \u7684\u6570\u503c\u548c\u5185\u5b58\u7684\u6570\u503c\u76f8\u52a0 mov dword ptr [ebp-4], eax # \u628a exa \u7684\u6570\u503c\uff08\u4e0a\u4e00\u6b65\u7684\u76f8\u52a0\u7ed3\u679c\uff09\u5b58\u50a8\u5728\u5185\u5b58\u4e2d eax \u548c ebp \u662f CPU \u5185\u90e8\u7684\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u3002 \u5185\u5b58\u7684\u5b58\u50a8\u573a\u6240\u901a\u8fc7\u5730\u5740\u7f16\u53f7\u6765\u533a\u5206\uff0c\u800c\u5bc4\u5b58\u5668\u7684\u79cd\u7c7b\u5219\u901a\u8fc7\u540d\u5b57\u6765\u533a\u5206\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#_3","text":"\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08Arithmetic and Logic Unit, ALU \uff09\uff1a\u8d1f\u8d23\u5bf9\u6570\u636e\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u548c\u903b\u8f91\u8fd0\u7b97\u3002 \u7d2f\u52a0\u5bc4\u5b58\u5668\uff08 AC \uff09\uff1a\u7d2f\u52a0\u5668\uff0c\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u4e3a ALU \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u4f5c\u533a\u3002 \u6570\u636e\u7f13\u51b2\u5bc4\u5b58\u5668\uff08 DR \uff09\uff1a\u4e3aCPU\u548c\u5185\u5b58\u3001\u5916\u56f4\u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u4f20\u9001\u7684\u4e2d\u8f6c\u7ad9\u3001\u7f13\u51b2\u3002 \u72b6\u6001\u6761\u4ef6\u5bc4\u5b58\u5668\uff08 PSW \uff09\uff1a\u5305\u62ec\u72b6\u6001\u6807\u51c6\u548c\u63a7\u5236\u6807\u5fd7\uff0c\u4f8b\u5982\u8fdb\u4f4d(C)\u3001\u6ea2\u51fa(V)\u3001\u8fd0\u7b97\u7ed3\u679c\u4e3a0\uff08Z\uff09\u3001\u8fd0\u7b97\u7ed3\u679c\u4e3a\u8d1f\u503c\uff08N\uff09\u3001\u4e2d\u65ad\uff08I\uff09\u7b49\u3002","title":"\u8fd0\u7b97\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#_4","text":"\u63a7\u5236\u5668\u7528\u4e8e\u63a7\u5236\u6574\u4e2aCPU\u7684\u5de5\u4f5c\u3002\u4e00\u822c\u5305\u62ec\uff1a \u6307\u4ee4\u5bc4\u5b58\u5668\uff08 IR \uff09\uff1a\u5f53CPU\u6267\u884c\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u5148\u628a\u5b83\u4ece\u5185\u5b58\u4e2d\u53d6\u5230 DR \uff0c\u7136\u540e\u9001\u5165 IR \u6682\u5b58\u3002\u6307\u4ee4\u8bd1\u7801\u5668\u6839\u636e IR \u7684\u5185\u5bb9\u4ea7\u751f\u5404\u79cd\u5fae\u64cd\u4f5c\u6307\u4ee4\uff0c\u63a7\u5236\u5176\u4ed6\u90e8\u4ef6\u5b8c\u6210\u5de5\u4f5c\u3002 \u7a0b\u5e8f\u8ba1\u6570\u5668\uff08 PC \uff09: \u53c8\u79f0\u4e4b\u4e3a\u6307\u4ee4\u8ba1\u6570\u5668\uff0c PC \u6709\u5bc4\u5b58\u4fe1\u606f\u548c\u8ba1\u6570\u4e24\u4e2a\u529f\u80fd\u3002\u6267\u884c\u6307\u4ee4\u65f6\uff0cCPU\u5c06\u81ea\u52a8\u4fee\u6539 PC \u5185\u5bb9\uff0c\u4f7f\u5176\u4fdd\u6301\u7684\u603b\u662f\u5c06\u8981\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 \u5730\u5740\u5bc4\u5b58\u5668\uff08 AR \uff09: \u4fdd\u5b58\u4e86\u5f53\u524dCPU\u6240\u8bbf\u95ee\u5185\u5bb9\u5355\u5143\u7684\u5730\u5740\uff0c\u76f4\u5230\u5bf9\u5185\u5b58\u7684\u8bfb\u5199\u64cd\u4f5c\u5b8c\u6210\u3002 \u6307\u4ee4\u8bd1\u7801\u5668\uff08 ID \uff09: \u6307\u4ee4\u5206\u4e3a\u64cd\u4f5c\u7801\u548c\u5730\u5740\u7801\u4e24\u90e8\u5206\u3002 ID \u662f\u5bf9\u6307\u4ee4\u4e2d\u7684\u64cd\u4f5c\u7801\u5b57\u6bb5\u8fdb\u884c\u5206\u6790\u89e3\u91ca\uff0c\u8bc6\u522b\u6307\u4ee4\u89c4\u5b9a\u7684\u64cd\u4f5c\uff0c\u5411\u64cd\u4f5c\u63a7\u5236\u5668\u53d1\u51fa\u5177\u4f53\u7684\u63a7\u5236\u4fe1\u53f7\uff0c\u63a7\u5236\u5404\u90e8\u4ef6\u5b8c\u6210\u5de5\u4f5c\u3002 \u5176\u4ed6\u8fd8\u5305\u62ec\uff1a \u65f6\u5e8f\u63a7\u5236\u5668\uff1a\u4e3a\u6bcf\u6761\u6307\u4ee4\u6309\u65f6\u95f4\u987a\u5e8f\u63d0\u4f9b\u6709\u6548\u7684\u63a7\u5236\u4fe1\u53f7\u3002 \u603b\u7ebf\u903b\u8f91\uff1a\u4fe1\u606f\u901a\u8def\u7684\u63a7\u5236\u7535\u8def\u3002 \u4e2d\u65ad\u63a7\u5236\u5668\uff1a\u7528\u4e8e\u63a7\u5236\u5404\u79cd\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5e76\u6839\u636e\u4f18\u5148\u7ea7\u8fdb\u884c\u6392\u961f\uff0c\u9010\u4e2a\u4ea4\u7ed9CPU\u5904\u7406\u3002 e.t.c","title":"\u63a7\u5236\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#_5","text":"CPU\u53ef\u4ee5\u6709\u5206\u5f00\u7684\u53d6\u503c\u5355\u5143\u3001\u89e3\u7801\u5355\u5143\u3001\u548c\u6267\u884c\u5355\u5143\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5fc5\u7b49\u5230\u4e00\u6761\u6307\u4ee4\u4ece\u5934\u5230\u5c3e\u6267\u884c\u5b8c\u6bd5\u540e\u518d\u5f00\u59cb\u5904\u7406\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u4e09\u7ea7\u6d41\u6c34\u7ebf\u5176\u793a\u610f\u56fe\u4e3a\uff1a // \u6d41\u6c34\u7ebf\u6280\u672f ^ | X : \u53d6\u6307\u6d41\u6c34\u7ebf | Y : \u89e3\u7801\u6d41\u6c34\u7ebf | Z : \u6267\u884c\u6d41\u6c34\u7ebf | | + -------+ + ------+------+-----------------+-----+ X | 1 | 2 | ... | n | + -------+ + ----------+------+-------------+----------+ Y | | 1 | | 2 | ... | n | + -------+ | + ------+---------+-----+-----+-+---------+ Z | | 1 | 2 | 3 | ... | | n | \u65f6\u95f4 + -------+ + -----------------+-----+-----+-----+------------------ > |XXXXXX|YYY| |ZZZZ| |XXXXXX|YYY| |ZZZZ| + ----------+ + ----+ \u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u53d6\u6307\u5b8c\u6210\uff08\u5bf9\u5e94\u56fe\u4e2dXXXXXX\u6807\u6ce8\u533a\u57df\uff09\uff0c\u89e3\u7801\u6d41\u6c34\u7ebf\u7acb\u5373\u5f00\u59cb\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u89e3\u7801\uff0c\u540c\u65f6\u53d6\u6307\u6d41\u6c34\u7ebf\u5f00\u59cb\u5bf9\u7b2c\u4e8c\u6761\u6307\u4ee4\u7684\u53d6\u6307\uff1b\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u89e3\u7801\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\uff08\u5bf9\u5e94\u56fe\u4e2dYYYY\u6807\u6ce8\u533a\u57df\uff09\uff0c\u6267\u884c\u6d41\u6c34\u7ebf\u5f00\u59cb\u5bf9\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c\u64cd\u4f5c\uff0c\u540c\u65f6\u89e3\u7801\u6d41\u6c34\u7ebf\u7b49\u5f85\u7b2c\u4e8c\u6761\u6307\u4ee4\u9001\u8fbe\u3002","title":"\u6d41\u6c34\u7ebf\u6280\u672f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.CPU.html#_6","text":"CPU\u7684\u529f\u80fd\u548c\u7ec4\u6210 CPU\u7684\u5de5\u4f5c\u8fc7\u7a0b \u64cd\u4f5c\u7cfb\u7edf\u7b14\u8bb0 \u786c\u4ef6\u57fa\u7840\u2014\u2014CPU","title":"\u53c2\u8003"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.Memory.html","text":"\u901a\u5e38\u6240\u8bf4\u7684\u5185\u5b58\u6307\u7684\u662f\u8ba1\u7b97\u673a\u7684\u4e3b\u5b58\u50a8\u5668\uff08main memory\uff09\uff0c\u7b80\u79f0\u4e3b\u5b58\u3002 \u4e3b\u5b58\u901a\u8fc7\u63a7\u5236\u82af\u7247\u7b49\u4e0e CPU \u76f8\u8fde\uff0c \u4e3b\u8981\u8d1f\u8d23\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e\u3002 \u4e3b\u5b58\u7531\u53ef\u8bfb\u5199\u7684\u5143\u7d20\u6784\u6210\uff0c\u6bcf\u4e2a\u5b57\u8282\uff081 Byte = 8 bit \uff09\u90fd\u5e26\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\u3002 CPU \u53ef\u4ee5\u901a\u8fc7\u8be5\u5730\u5740\u8bfb\u53d6\u4e3b\u5b58\u4e2d\u7684\u6307\u4ee4\u548c\u6570\u636e\uff0c\u4ee5\u53ca\u5199\u5165\u6570\u636e\u3002 \u5982\u4f55\u901a\u8fc7\u5185\u5b58\u7d22\u5f15\u6570\u636e\uff1f \u5185\u5b58\u7684\u6784\u6210\u5355\u4f4d\u662f\u4e00\u4e2a\u5b57\u8282\uff088\u4f4d\uff09\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\uff0c\u8fd9\u4e2a\u5730\u5740\u7f16\u53f7\u662f\u5b83\u7684\u903b\u8f91\u5730\u5740\u3002 CPU\u4e2d\u7684\u5bc4\u5b58\u5668\uff08\u57fa\u5740\u5bc4\u5b58\u5668\u3001\u53d8\u5740\u5bc4\u5b58\u5668\uff09\u4f1a\u50a8\u5b58\u4e2d\u88ab\u8fd0\u7b97\u7684\u6570\u636e\u7684\u7f16\u53f7\u5730\u5740\u3002CPU\u5bc4\u5b58\u5668\u7684\u7a7a\u95f4\u5927\u5c0f\u51b3\u5b9a\u4e86CPU\u80fd\u8bc6\u522b\u591a\u5927\u7684\u5185\u5b58\u3002 \u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a32\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u4e3a$2 {32}-1=4294967295$\uff08\u5341\u8fdb\u5236\u6570\uff0c\u4ece0\u5f00\u59cb\uff1b\u6362\u621016\u8fdb\u5236\u6570\u5c31\u662fFFFFFFFF\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5b83\u80fd\u8868\u793a$2 =4294967296$\u79cd\u72b6\u6001\u3002\u800c4g\u7684\u5185\u5b58\u4e00\u5171\u6709$4\\times1024\\times1024\\times1024=4294967296$\u4e2abyte\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u5177\u670932\u4f4d\u7684\u5bc4\u5b58\u5668\u7684CPU\u6700\u591a\u80fd\u8bc6\u522b4g\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u57fa\u5740\u5bc4\u5b58\u5668\u548c\u53d8\u5740\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e3b\u5185\u5b58\u4e0a\u7279\u5b9a\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u5212\u5206\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528\u5341\u516d\u8fdb\u5236\u6570 \u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e0a 00000000\uff5eFFFFFFFF\u7684\u5730\u5740\u5212\u5206\u51fa\u6765\u3002\u90a3\u4e48\uff0c\u51e1\u662f\u8be5\u8303\u56f4\u7684\u5185\u5b58\u533a\u57df\uff0c\u53ea\u8981\u6709\u4e00\u4e2a 32 \u4f4d\u7684 \u5bc4\u5b58\u5668\uff0c\u5373\u53ef\u67e5\u770b\u5168\u90e8\u7684\u5185\u5b58\u5730\u5740\u3002 CPU\u6240\u751f\u6210\u7684\u5730\u5740\u901a\u5e38\u79f0\u4e3a\u903b\u8f91\u5730\u5740(logical address)\uff0c\u800c\u5185\u5b58\u5355\u5143\u6240\u770b\u5230\u7684\u5730\u5740\uff08\u5373\u52a0\u8f7d\u5230\u5185\u5b58\u5730\u5740\u5bc4\u5b58\u5668(memory-address register)\u4e2d\u7684\u5730\u5740\uff09\u901a\u5e38\u79f0\u4e3a\u7269\u7406\u5730\u5740(physical address) \u3002 \u903b\u8f91\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6267\u884c\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u903b\u8f91\u5730\u5740\u53c8\u79f0\u4e3a\u865a\u62df\u5730\u5740\u3002\u865a\u62df\u5730\u5740\u901a\u8fc7 \u6620\u5c04 \u4e0e\u7269\u7406\u5730\u5740\u5bf9\u5e94\u8d77\u6765\u3002\u5b8c\u6210\u8fd9\u79cd\u6620\u5c04\u7684\u786c\u4ef6\u8bbe\u5907\u662f \u5185\u5b58\u7ba1\u7406\u5355\u5143 (memory-management unit, MMU)\uff0c\u5b8c\u6210\u6620\u5c04\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4e5f\u5c31\u662f\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u6709\u591a\u79cd\u3002\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u53ea\u80fd\u57fa\u4e8e\u865a\u62df\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\u3002","title":"1.2.Memory"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.Memory.html#_1","text":"\u5185\u5b58\u7684\u6784\u6210\u5355\u4f4d\u662f\u4e00\u4e2a\u5b57\u8282\uff088\u4f4d\uff09\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\uff0c\u8fd9\u4e2a\u5730\u5740\u7f16\u53f7\u662f\u5b83\u7684\u903b\u8f91\u5730\u5740\u3002 CPU\u4e2d\u7684\u5bc4\u5b58\u5668\uff08\u57fa\u5740\u5bc4\u5b58\u5668\u3001\u53d8\u5740\u5bc4\u5b58\u5668\uff09\u4f1a\u50a8\u5b58\u4e2d\u88ab\u8fd0\u7b97\u7684\u6570\u636e\u7684\u7f16\u53f7\u5730\u5740\u3002CPU\u5bc4\u5b58\u5668\u7684\u7a7a\u95f4\u5927\u5c0f\u51b3\u5b9a\u4e86CPU\u80fd\u8bc6\u522b\u591a\u5927\u7684\u5185\u5b58\u3002 \u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a32\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u4e3a$2 {32}-1=4294967295$\uff08\u5341\u8fdb\u5236\u6570\uff0c\u4ece0\u5f00\u59cb\uff1b\u6362\u621016\u8fdb\u5236\u6570\u5c31\u662fFFFFFFFF\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5b83\u80fd\u8868\u793a$2 =4294967296$\u79cd\u72b6\u6001\u3002\u800c4g\u7684\u5185\u5b58\u4e00\u5171\u6709$4\\times1024\\times1024\\times1024=4294967296$\u4e2abyte\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u5177\u670932\u4f4d\u7684\u5bc4\u5b58\u5668\u7684CPU\u6700\u591a\u80fd\u8bc6\u522b4g\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u57fa\u5740\u5bc4\u5b58\u5668\u548c\u53d8\u5740\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e3b\u5185\u5b58\u4e0a\u7279\u5b9a\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u5212\u5206\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528\u5341\u516d\u8fdb\u5236\u6570 \u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e0a 00000000\uff5eFFFFFFFF\u7684\u5730\u5740\u5212\u5206\u51fa\u6765\u3002\u90a3\u4e48\uff0c\u51e1\u662f\u8be5\u8303\u56f4\u7684\u5185\u5b58\u533a\u57df\uff0c\u53ea\u8981\u6709\u4e00\u4e2a 32 \u4f4d\u7684 \u5bc4\u5b58\u5668\uff0c\u5373\u53ef\u67e5\u770b\u5168\u90e8\u7684\u5185\u5b58\u5730\u5740\u3002 CPU\u6240\u751f\u6210\u7684\u5730\u5740\u901a\u5e38\u79f0\u4e3a\u903b\u8f91\u5730\u5740(logical address)\uff0c\u800c\u5185\u5b58\u5355\u5143\u6240\u770b\u5230\u7684\u5730\u5740\uff08\u5373\u52a0\u8f7d\u5230\u5185\u5b58\u5730\u5740\u5bc4\u5b58\u5668(memory-address register)\u4e2d\u7684\u5730\u5740\uff09\u901a\u5e38\u79f0\u4e3a\u7269\u7406\u5730\u5740(physical address) \u3002 \u903b\u8f91\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6267\u884c\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u903b\u8f91\u5730\u5740\u53c8\u79f0\u4e3a\u865a\u62df\u5730\u5740\u3002\u865a\u62df\u5730\u5740\u901a\u8fc7 \u6620\u5c04 \u4e0e\u7269\u7406\u5730\u5740\u5bf9\u5e94\u8d77\u6765\u3002\u5b8c\u6210\u8fd9\u79cd\u6620\u5c04\u7684\u786c\u4ef6\u8bbe\u5907\u662f \u5185\u5b58\u7ba1\u7406\u5355\u5143 (memory-management unit, MMU)\uff0c\u5b8c\u6210\u6620\u5c04\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4e5f\u5c31\u662f\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u6709\u591a\u79cd\u3002\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u53ea\u80fd\u57fa\u4e8e\u865a\u62df\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\u3002","title":"\u5982\u4f55\u901a\u8fc7\u5185\u5b58\u7d22\u5f15\u6570\u636e\uff1f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html","text":"\u7a0b\u5e8f\u548c\u7f16\u7a0b\u8bed\u8a00 \u7a0b\u5e8f\uff08Program\uff09 \u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u5982\u4f55\u5b8c\u6210\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd9\u91cc\u7684\u8ba1\u7b97\u53ef\u4ee5\u662f\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982\u89e3\u65b9\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7b26\u53f7\u8fd0\u7b97\uff0c\u6bd4\u5982\u67e5\u627e\u548c\u66ff\u6362\u6587\u6863\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\u3002\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c \u8ba1\u7b97\u673a\u662f\u7531\u6570\u5b57\u7535\u8def\u7ec4\u6210\u7684\u8fd0\u7b97\u673a\u5668\uff0c\u53ea\u80fd\u5bf9\u6570\u5b57\u505a\u8fd0\u7b97\uff0c\u7a0b\u5e8f\u4e4b\u6240\u4ee5\u80fd\u505a\u7b26\u53f7\u8fd0\u7b97\uff0c\u662f\u56e0\u4e3a\u7b26\u53f7\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\u3002 \u6b64\u5916\uff0c\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u5904\u7406\u58f0\u97f3\u548c\u56fe\u50cf\uff0c\u58f0\u97f3\u548c\u56fe\u50cf\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u5fc5\u7136\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\uff0c\u8fd9\u4e9b\u6570\u5b57\u7ecf\u8fc7\u4e13\u95e8\u7684\u786c\u4ef6\u8bbe\u5907\u8f6c\u6362\u6210\u4eba\u53ef\u4ee5\u542c\u5230\u3001\u770b\u5230\u7684\u58f0\u97f3\u548c\u56fe\u50cf\u3002 \u7a0b\u5e8f\u7531\u4e00\u7cfb\u5217 \u6307\u4ee4\uff08Instruction\uff09 \u7ec4\u6210\uff0c\u6307\u4ee4\u662f\u6307\u793a\u8ba1\u7b97\u673a\u505a\u67d0\u79cd\u8fd0\u7b97\u7684\u547d\u4ee4\uff0c\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u8f93\u5165\uff08Input\uff09\uff1a\u4ece\u952e\u76d8\u3001\u6587\u4ef6\u6216\u8005\u5176\u5b83\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002 \u8f93\u51fa\uff08Output\uff09\uff1a\u628a\u6570\u636e\u663e\u793a\u5230\u5c4f\u5e55\uff0c\u6216\u8005\u5b58\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u8005\u53d1\u9001\u5230\u5176\u5b83\u8bbe\u5907\u3002 \u57fa\u672c\u8fd0\u7b97\uff1a\u6267\u884c\u6700\u57fa\u672c\u7684\u6570\u5b66\u8fd0\u7b97\uff08\u52a0\u51cf\u4e58\u9664\uff09\u548c\u6570\u636e\u5b58\u53d6\u3002 \u6d4b\u8bd5\u548c\u5206\u652f\uff1a\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\uff0c\u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u6d4b\u8bd5\u7ed3\u679c\u6267\u884c\u4e0d\u540c\u7684\u540e\u7eed\u6307\u4ee4\u3002 \u5faa\u73af\uff1a\u91cd\u590d\u6267\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\uff0c\u6709\u4e0a\u9762\u8fd9\u51e0\u7c7b\u6307\u4ee4\u5c31\u8db3\u591f\u4e86\u3002\u4efb\u4f55\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u7ba1\u5b83\u6709\u591a\u4e48\u590d\u6742\uff0c\u90fd\u662f\u7531\u8fd9\u51e0\u7c7b\u6307\u4ee4\u7ec4\u6210\u7684\u3002\u7a0b\u5e8f\u662f\u90a3\u4e48\u7684\u590d\u6742\uff0c\u800c\u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u7528\u7684\u6307\u4ee4\u5374\u53ea\u6709\u8fd9\u4e48\u7b80\u5355\u7684\u51e0\u79cd\uff0c\u8fd9\u4e2d\u95f4\u5de8\u5927\u7684\u843d\u5dee\u5c31\u8981\u7531\u7a0b\u5e8f\u5458\u53bb\u586b\u4e86\uff0c\u6240\u4ee5\u7f16\u5199\u7a0b\u5e8f\u7406\u5e94\u662f\u4e00\u4ef6\u76f8\u5f53\u590d\u6742\u7684\u5de5\u4f5c\u3002 \u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u8bf4\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u628a\u590d\u6742\u7684\u4efb\u52a1\u5206\u89e3\u6210\u5b50\u4efb\u52a1\uff0c\u628a\u5b50\u4efb\u52a1\u518d\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c42\u5c42\u5206\u89e3\uff0c\u76f4\u5230\u6700\u540e\u7b80\u5355\u5f97\u53ef\u4ee5\u7528\u4ee5\u4e0a\u6307\u4ee4\u6765\u5b8c\u6210\u3002 \u6309\u7167\u5bf9\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u7684\u62bd\u8c61\u5c42\u6b21\u9ad8\u4f4e\uff0c \u7f16\u7a0b\u8bed\u8a00 \uff08Programming Language\uff09\u53ef\u4ee5\u5206\u4e3a\uff1a \u4f4e\u7ea7\u8bed\u8a00\uff08Low-level Language\uff09\uff1a\u673a\u5668\u8bed\u8a00\uff08Machine Language\uff09\u548c\u6c47\u7f16\u8bed\u8a00\uff08Assembly Language\uff09 \u9ad8\u7ea7\u8bed\u8a00\uff08High-level Language\uff09\uff1aC\u3001C++\u3001Java\u3001Python\u7b49 \u4f4e\u7ea7\u8bed\u8a00\u76f4\u63a5\u7528\u673a\u5668\u6307\u4ee4\u7f16\u5199\u7a0b\u5e8f\u3002\u9ad8\u7ea7\u8bed\u8a00\u7528\u8bed\u53e5\uff08Statement\uff09\u7f16\u5199\u7a0b\u5e8f\uff0c\u8bed\u53e5\u662f\u673a\u5668\u6307\u4ee4\u7684\u62bd\u8c61\u8868\u793a\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u540c\u6837\u4e00\u4e2a\u8bed\u53e5\u7528C\u8bed\u8a00\u3001\u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u5206\u522b\u8868\u793a\u5982\u4e0b\uff1a \u4e0a\u8868\u4e2d\u7684\u673a\u5668\u8bed\u8a00\u5b8c\u5168\u7531\u5341\u516d\u8fdb\u5236\u6570\u5b57\u7ec4\u6210\u3002 \u6700\u65e9\u7684\u7a0b\u5e8f\u5458\u90fd\u662f\u76f4\u63a5\u7528\u673a\u5668\u8bed\u8a00\u7f16\u7a0b\uff0c\u8fd9\u5f88\u9ebb\u70e6\uff0c\u9700\u8981\u67e5\u5927\u91cf\u7684\u8868\u683c\u6765\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u8868\u793a\u4ec0\u4e48\u610f\u601d\uff0c\u7f16\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u5f88\u4e0d\u76f4\u89c2\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u4e8e\u662f\u6709\u4e86\u6c47\u7f16\u8bed\u8a00\u3002 \u6c47\u7f16\u8bed\u8a00 \u628a\u673a\u5668\u8bed\u8a00\u4e2d\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u5b57\u7528\u52a9\u8bb0\u7b26\uff08Mnemonic\uff09\u8868\u793a\uff0c\u76f4\u63a5\u7528\u8fd9\u4e9b\u52a9\u8bb0\u7b26\u5199\u51fa\u6c47\u7f16\u7a0b\u5e8f\uff0c\u7136\u540e\u8ba9\u6c47\u7f16\u5668\uff08Assembler\uff09\u53bb\u67e5\u8868\u628a\u52a9\u8bb0\u7b26\u66ff\u6362\u6210\u6570\u5b57\uff0c\u4e5f\u5c31\u628a\u6c47\u7f16\u8bed\u8a00\u7ffb\u8bd1\u6210\u4e86\u673a\u5668\u8bed\u8a00\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0c \u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u7684\u6307\u4ee4\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6c47\u7f16\u8bed\u8a00\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u673a\u5668\u8bed\u8a00\u4e5f\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u6c47\u7f16\u5668\u5c31\u662f\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u66ff\u6362\u5de5\u4f5c \uff0c\u4f8b\u5982\u5728\u7b2c\u4e00\u6761\u6307\u4ee4\u4e2d\uff0c\u628a movl ?,%eax \u8fd9\u79cd\u683c\u5f0f\u7684\u6307\u4ee4\u66ff\u6362\u6210\u673a\u5668\u7801 a1 ? \uff0c?\u8868\u793a\u4e00\u4e2a\u5730\u5740\uff0c\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u662f 0x804a01c \uff0c\u8f6c\u6362\u6210\u673a\u5668\u7801\u4e4b\u540e\u662f 1c a0 04 08 \uff08\u8fd9\u662f\u6307\u4ee4\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u6570\u7684\u5c0f\u7aef\u8868\u793a\uff09\u3002 \u6c47\u7f16\u8bed\u548c\u673a\u5668\u6307\u4ee4\u4e00\u4e00\u5bf9\u5e94\uff0c\u53ef\u80fd\u53ea\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u8bf4\u6cd5\uff0c\u5728\u67d0\u4e9b\u6c47\u7f16\u89c4\u8303\u4e2d\uff0c\u53ef\u80fd\u4e24\u8005\u53ef\u80fd\u5e76\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u8fd8\u53ef\u4ee5\u770b\u51fa\uff0c \u9ad8\u7ea7\u8bed\u8a00\u7684\u8bed\u53e5\u548c\u4f4e\u7ea7\u8bed\u8a00\u7684\u6307\u4ee4\u4e4b\u95f4\u4e0d\u662f\u7b80\u5355\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c \u4e00\u6761 a=b+1; \u8bed\u53e5\u8981\u7ffb\u8bd1\u6210\u4e09\u6761\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u7f16\u8bd1\uff08Compile\uff09 \uff0c\u7531\u7f16\u8bd1\u5668\uff08Compiler\uff09\u6765\u5b8c\u6210\uff0c\u663e\u7136\u7f16\u8bd1\u5668\u7684\u529f\u80fd\u6bd4\u6c47\u7f16\u5668\u8981\u590d\u6742\u5f97\u591a\u3002\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u5fc5\u987b\u7ecf\u8fc7\u7f16\u8bd1\u8f6c\u6210\u673a\u5668\u6307\u4ee4\u624d\u80fd\u88ab\u8ba1\u7b97\u673a\u6267\u884c\uff0c\u7f16\u8bd1\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\uff0c\u8fd9\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u7684\u4e00\u4e2a\u7f3a\u70b9\uff0c\u7136\u800c\u66f4\u591a\u7684\u662f\u4f18\u70b9\u3002\u9996\u5148\uff0c\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u66f4\u5bb9\u6613\uff0c\u5199\u51fa\u6765\u7684\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u51fa\u4e86\u9519\u4e5f\u66f4\u5bb9\u6613\u6539\u6b63\u3002\u5176\u6b21\uff0c \u9ad8\u7ea7\u8bed\u8a00\u662f\u53ef\u79fb\u690d\u7684\uff08Portable\uff09\u6216\u8005\u79f0\u4e3a\u5e73\u53f0\u65e0\u5173\u7684\uff08Platform Independent\uff09\u3002 \u6b63\u56e0\u4e3a\u9ad8\u7ea7\u8bed\u8a00\u548c\u5177\u4f53\u7684\u673a\u5668\u6307\u4ee4\u4e0d\u5b58\u5728\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u800c\u662f\u548c\u5b9e\u73b0\u4e0d\u540c\u529f\u80fd\u7684\u673a\u5668\u6307\u4ee4\u96c6\u5408\u4e00\u4e00\u5bf9\u5e94\uff0c\u6240\u4ee5\u9ad8\u7ea7\u8bed\u8a00\u53ef\u4ee5\u5b9e\u73b0\u53ef\u79fb\u690d\u6027\u3002 \u5e73\u53f0 \u8fd9\u4e2a\u8bcd\u6709\u5f88\u591a\u79cd\u89e3\u91ca\uff0c\u53ef\u4ee5\u6307\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff08Architecture\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u64cd\u4f5c\u7cfb\u7edf\uff08Operating System\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u5f00\u53d1\u5e73\u53f0\uff08\u7f16\u8bd1\u5668\u3001\u94fe\u63a5\u5668\u7b49\uff09\u3002 \u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6709\u4e0d\u540c\u7684\u6307\u4ee4\u96c6\uff08Instruction Set\uff09\uff0c\u53ef\u4ee5\u8bc6\u522b\u7684\u673a\u5668\u6307\u4ee4\u683c\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u76f4\u63a5\u7528\u67d0\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u53ea\u80fd\u5728\u8fd9\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u3002 \u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784 \u4e5f\u79f0\u4e3a \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u3002 \u7136\u800c \u5404\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u90fd\u6709\u5404\u81ea\u7684C\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u628aC\u7a0b\u5e8f\u7f16\u8bd1\u6210\u5404\u79cd\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7684\u673a\u5668\u6307\u4ee4 \uff0c\u8fd9\u610f\u5473\u7740\u7528C\u8bed\u8a00\u5199\u7684\u7a0b\u5e8f\u53ea\u9700\u7a0d\u52a0\u4fee\u6539\u751a\u81f3\u4e0d\u7528\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u7f16\u8bd1\u8fd0\u884c\u3002\u5404\u79cd\u9ad8\u7ea7\u8bed\u8a00\u90fd\u5177\u6709C\u8bed\u8a00\u7684\u8fd9\u4e9b\u4f18\u70b9\uff0c\u6240\u4ee5\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u53ea\u6709\u548c\u786c\u4ef6\u5173\u7cfb\u5bc6\u5207\u7684\u5c11\u6570\u7a0b\u5e8f\uff08\u4f8b\u5982\u9a71\u52a8\u7a0b\u5e8f\uff09\u624d\u4f1a\u7528\u5230\u4f4e\u7ea7\u8bed\u8a00\u3002\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5373\u4f7f\u5728\u76f8\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e0b\uff0c\u7528\u4e0d\u540c\u7684C\u7f16\u8bd1\u5668\uff08\u6216\u8005\u540c\u4e00\u4e2aC\u7f16\u8bd1\u5668\u7684\u4e0d\u540c\u7248\u672c\uff09\u7f16\u8bd1\u540c\u4e00\u4e2a\u7a0b\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u6709\u53ef\u80fd\u4e0d\u540c\uff0cC\u8bed\u8a00\u6709\u4e9b\u8bed\u6cd5\u7279\u6027\u5728C\u6807\u51c6\u4e2d\u5e76\u6ca1\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5404\u7f16\u8bd1\u5668\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u7f16\u8bd1\u51fa\u6765\u7684\u6307\u4ee4\u7684\u884c\u4e3a\u7279\u6027\u4e5f\u4f1a\u4e0d\u540c\uff0c\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u4e0d\u53ef\u79fb\u690d\u7684\u8bed\u6cd5\u7279\u6027\u3002 \u603b\u7ed3\u4e00\u4e0b\u7f16\u8bd1\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u4f60\u7528\u6587\u672c\u7f16\u8f91\u5668\u5199\u4e00\u4e2aC\u7a0b\u5e8f\uff0c\u7136\u540e\u4fdd\u5b58\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982 program.c \uff08\u901a\u5e38C\u7a0b\u5e8f\u7684\u6587\u4ef6\u540d\u540e\u7f00\u662f .c \uff09\uff0c\u8fd9\u79f0\u4e3a\u6e90\u4ee3\u7801\uff08Source Code\uff09\u6216\u6e90\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u7f16\u8bd1\u5668\u5bf9\u5b83\u8fdb\u884c\u7f16\u8bd1\uff0c\u7f16\u8bd1\u7684\u8fc7\u7a0b\u5e76\u4e0d\u6267\u884c\u7a0b\u5e8f\uff0c\u800c\u662f\u628a\u6e90\u4ee3\u7801\u5168\u90e8\u7ffb\u8bd1\u6210\u673a\u5668\u6307\u4ee4\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u63cf\u8ff0\u4fe1\u606f\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\uff0c\u4f8b\u5982 a.out \uff0c\u8fd9\u79f0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4ee5\u88ab\u64cd\u4f5c\u7cfb\u7edf\u52a0\u8f7d\u8fd0\u884c\uff0c\u8ba1\u7b97\u673a\u6267\u884c\u8be5\u6587\u4ef6\u4e2d\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6307\u4ee4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6709\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4ee5\u89e3\u91ca\uff08Interpret\uff09\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u89e3\u91ca\u6267\u884c\u8fc7\u7a0b\u548cC\u8bed\u8a00\u7684\u7f16\u8bd1\u6267\u884c\u8fc7\u7a0b\u5f88\u4e0d\u4e00\u6837\u3002\u4f8b\u5982\u7f16\u5199\u4e00\u4e2aShell\u811a\u672c script.sh \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a #! /bin/sh VAR = 1 VAR = $(( $VAR + 1 )) echo $VAR \u5b9a\u4e49Shell\u53d8\u91cf VAR \u7684\u521d\u59cb\u503c\u662f1\uff0c\u7136\u540e\u81ea\u589e1\uff0c\u7136\u540e\u6253\u5370 VAR \u7684\u503c\u3002\u7528Shell\u7a0b\u5e8f /bin/sh \u89e3\u91ca\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a $ / bin / sh script . sh 2 \u8fd9\u91cc\u7684 /bin/sh \u79f0\u4e3a\u89e3\u91ca\u5668\uff08Interpreter\uff09\uff0c\u5b83\u628a\u811a\u672c\u4e2d\u7684\u6bcf\u4e00\u884c\u5f53\u4f5c\u4e00\u6761\u547d\u4ee4\u89e3\u91ca\u6267\u884c\uff0c\u800c\u4e0d\u9700\u8981\u5148\u751f\u6210\u5305\u542b\u673a\u5668\u6307\u4ee4\u7684\u53ef\u6267\u884c\u6587\u4ef6\u518d\u6267\u884c\u3002\u5982\u679c\u628a\u811a\u672c\u4e2d\u7684\u8fd9\u4e09\u884c\u5f53\u4f5c\u4e09\u6761\u547d\u4ee4\u76f4\u63a5\u6572\u5230Shell\u63d0\u793a\u7b26\u4e0b\uff0c\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\uff1a $ VAR = 1 $ VAR = $ (( $ VAR + 1 )) $ echo $ VAR 2 \u7f16\u7a0b\u8bed\u8a00\u4ecd\u5728\u53d1\u5c55\u6f14\u5316\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u673a\u5668\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e00\u4ee3\u8bed\u8a00\uff081GL\uff0c1 st Generation Programming Language\uff09\uff0c\u6c47\u7f16\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e8c\u4ee3\u8bed\u8a00\uff082GL\uff0c2 nd Generation Programming Language\uff09\uff0cC\u3001C++\u3001Java\u3001Python\u7b49\u53ef\u4ee5\u79f0\u4e3a\u7b2c\u4e09\u4ee3\u8bed\u8a00\uff083GL\uff0c3 rd Generation Programming Language\uff09\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e864GL\uff084 th Generation Programming Language\uff09\u548c5GL\uff085 th Generation Programming Language\uff09\u7684\u6982\u5ff5\u30023GL\u7684\u7f16\u7a0b\u8bed\u8a00\u867d\u7136\u662f\u7528\u8bed\u53e5\u7f16\u7a0b\u800c\u4e0d\u76f4\u63a5\u7528\u6307\u4ee4\u7f16\u7a0b\uff0c\u4f46\u8bed\u53e5\u4e5f\u5206\u4e3a\u8f93\u5165\u3001\u8f93\u51fa\u3001\u57fa\u672c\u8fd0\u7b97\u3001\u6d4b\u8bd5\u5206\u652f\u548c\u5faa\u73af\u7b49\u51e0\u79cd\uff0c\u548c\u6307\u4ee4\u6709\u76f4\u63a5\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u800c4GL\u4ee5\u540e\u7684\u7f16\u7a0b\u8bed\u8a00\u66f4\u591a\u662f\u63cf\u8ff0\u8981\u505a\u4ec0\u4e48\uff08Declarative\uff09\u800c\u4e0d\u63cf\u8ff0\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\uff08Imperative\uff09\uff0c\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\u5b8c\u5168\u7531\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\u51b3\u5b9a\uff0c\u4f8b\u5982SQL\u8bed\u8a00\uff08SQL\uff0cStructured Query Language\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u5c31\u662f\u8fd9\u6837\u7684\u4f8b\u5b50\u3002 \u7a0b\u5e8f\u7684\u8c03\u8bd5 \u7f16\u7a0b\u662f\u4e00\u4ef6\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u662f\u4eba\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u96be\u514d\u7ecf\u5e38\u51fa\u9519\u3002\u636e\u8bf4\u6709\u8fd9\u6837\u4e00\u4e2a\u5178\u6545\uff1a\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u4f53\u79ef\u90fd\u5f88\u5927\uff0c\u6709\u4e00\u6b21\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5de5\u7a0b\u5e08\u4eec\u627e\u4e86\u534a\u5929\u539f\u56e0\u6700\u540e\u53d1\u73b0\u662f\u4e00\u53ea\u81ed\u866b\u94bb\u8fdb\u8ba1\u7b97\u673a\u4e2d\u9020\u6210\u7684\u3002\u4ece\u6b64\u4ee5\u540e\uff0c\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u88ab\u53eb\u505a\u81ed\u866b\uff08Bug\uff09\uff0c\u800c\u627e\u5230\u8fd9\u4e9bBug\u5e76\u52a0\u4ee5\u7ea0\u6b63\u7684\u8fc7\u7a0b\u5c31\u53eb\u505a\u8c03\u8bd5\uff08Debug\uff09\u3002\u6709\u65f6\u5019\u8c03\u8bd5\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u8981\u6c42\u7a0b\u5e8f\u5458\u6982\u5ff5\u660e\u786e\u3001\u903b\u8f91\u6e05\u6670\u3001\u6027\u683c\u6c89\u7a33\uff0c\u8fd8\u9700\u8981\u4e00\u70b9\u8fd0\u6c14\u3002\u7a0b\u5e8f\u7684 Bug \u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a \u7f16\u8bd1\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u53ea\u80fd\u7ffb\u8bd1\u8bed\u6cd5\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\uff0c\u65e0\u6cd5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5bf9\u4e8e\u81ea\u7136\u8bed\u8a00\u6765\u8bf4\uff0c\u4e00\u70b9\u8bed\u6cd5\u9519\u8bef\u4e0d\u662f\u5f88\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8bfb\u61c2\u53e5\u5b50\u3002\u800c\u7f16\u8bd1\u5668\u5c31\u6ca1\u90a3\u4e48\u5bbd\u5bb9\u4e86\uff0c\u53ea\u8981\u6709\u54ea\u6015\u4e00\u4e2a\u5f88\u5c0f\u7684\u8bed\u6cd5\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u6761\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u7136\u540e\u7f62\u5de5\uff0c\u4f60\u5c31\u5f97\u4e0d\u5230\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u867d\u7136\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5c31\u662f\u4f60\u51fa\u9519\u7684\u4ee3\u7801\u884c\uff0c\u4f46\u4e5f\u6709\u4e2a\u522b\u65f6\u5019\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5e2e\u52a9\u4e0d\u5927\uff0c\u751a\u81f3\u4f1a\u8bef\u5bfc\u4f60\u3002\u5728\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u7684\u524d\u51e0\u4e2a\u661f\u671f\uff0c\u4f60\u53ef\u80fd\u4f1a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u6765\u7ea0\u6b63\u8bed\u6cd5\u9519\u8bef\u3002\u7b49\u5230\u6709\u4e86\u4e00\u4e9b\u7ecf\u9a8c\u4e4b\u540e\uff0c\u8fd8\u662f\u4f1a\u72af\u8fd9\u6837\u7684\u9519\u8bef\uff0c\u4e0d\u8fc7\u4f1a\u5c11\u5f97\u591a\uff0c\u800c\u4e14\u4f60\u80fd\u66f4\u5feb\u5730\u53d1\u73b0\u9519\u8bef\u539f\u56e0\u3002\u7b49\u5230\u7ecf\u9a8c\u66f4\u4e30\u5bcc\u4e4b\u540e\u4f60\u5c31\u4f1a\u89c9\u5f97\uff0c\u8bed\u6cd5\u9519\u8bef\u662f\u6700\u7b80\u5355\u6700\u4f4e\u7ea7\u7684\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u7684\u9519\u8bef\u63d0\u793a\u4e5f\u5c31\u90a3\u4e48\u51e0\u79cd\uff0c\u5373\u4f7f\u9519\u8bef\u63d0\u793a\u662f\u6709\u8bef\u5bfc\u7684\u4e5f\u80fd\u591f\u7acb\u523b\u627e\u51fa\u771f\u6b63\u7684\u9519\u8bef\u539f\u56e0\u662f\u4ec0\u4e48\u3002\u76f8\u6bd4\u4e0b\u9762\u4e24\u79cd\u9519\u8bef\uff0c\u8bed\u6cd5\u9519\u8bef\u89e3\u51b3\u8d77\u6765\u8981\u5bb9\u6613\u5f97\u591a\u3002 \u8fd0\u884c\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u68c0\u67e5\u4e0d\u51fa\u8fd9\u7c7b\u9519\u8bef\uff0c\u4ecd\u7136\u53ef\u4ee5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u4f1a\u51fa\u9519\u800c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5b66\u4e60\u9759\u6001\u8bed\u8a00\u7684\u65f6\u5019\uff0c\u8981\u7279\u522b\u6ce8\u610f\u533a\u5206\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u6709\u4e9b\u4e8b\u60c5\u5728\u7f16\u8bd1\u65f6\u505a\uff0c\u6709\u4e9b\u4e8b\u60c5\u5219\u5728\u8fd0\u884c\u65f6\u505a\u3002 \u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef \u7b2c\u4e09\u7c7b\u9519\u8bef\u662f\u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef\u3002\u5982\u679c\u7a0b\u5e8f\u91cc\u6709\u903b\u8f91\u9519\u8bef\uff0c\u7f16\u8bd1\u548c\u8fd0\u884c\u90fd\u4f1a\u5f88\u987a\u5229\uff0c\u770b\u4e0a\u53bb\u4e5f\u4e0d\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u7a0b\u5e8f\u6ca1\u6709\u5e72\u5b83\u8be5\u5e72\u7684\u4e8b\u60c5\uff0c\u800c\u662f\u5e72\u4e86\u522b\u7684\u4e8b\u60c5\u3002\u5f53\u7136\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u8ba1\u7b97\u673a\u53ea\u4f1a\u6309\u4f60\u5199\u7684\u7a0b\u5e8f\u53bb\u505a\uff0c\u95ee\u9898\u5728\u4e8e\u4f60\u5199\u7684\u7a0b\u5e8f\u4e0d\u662f\u4f60\u771f\u6b63\u60f3\u8981\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u7684\u610f\u601d\uff08\u5373\u8bed\u4e49\uff09\u662f\u9519\u7684\u3002\u627e\u5230\u903b\u8f91\u9519\u8bef\u5728\u54ea\u9700\u8981\u5341\u5206\u6e05\u9192\u7684\u5934\u8111\uff0c\u8981\u901a\u8fc7\u89c2\u5bdf\u7a0b\u5e8f\u7684\u8f93\u51fa\u56de\u8fc7\u5934\u6765\u5224\u65ad\u5b83\u5230\u5e95\u5728\u505a\u4ec0\u4e48\u3002 \u8c03\u8bd5\u7684\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5230\u4e00\u4e9b\u6cae\u4e27\uff0c\u4f46\u8c03\u8bd5\u4e5f\u662f\u7f16\u7a0b\u4e2d\u6700\u9700\u8981\u52a8\u8111\u7684\u3001\u6700\u6709\u6311\u6218\u548c\u4e50\u8da3\u7684\u90e8\u5206\u3002\u4ece\u67d0\u79cd\u89d2\u5ea6\u770b\u8c03\u8bd5\u5c31\u50cf\u4fa6\u63a2\u5de5\u4f5c\uff0c\u6839\u636e\u638c\u63e1\u7684\u7ebf\u7d22\u6765\u63a8\u65ad\u662f\u4ec0\u4e48\u539f\u56e0\u548c\u8fc7\u7a0b\u5bfc\u81f4\u4e86\u4f60\u6240\u770b\u5230\u7684\u7ed3\u679c\u3002\u8c03\u8bd5\u4e5f\u50cf\u662f\u4e00\u95e8\u5b9e\u9a8c\u79d1\u5b66\uff0c\u6bcf\u6b21\u60f3\u5230\u54ea\u91cc\u53ef\u80fd\u6709\u9519\uff0c\u5c31\u4fee\u6539\u7a0b\u5e8f\u7136\u540e\u518d\u8bd5\u4e00\u6b21\u3002\u5982\u679c\u5047\u8bbe\u662f\u5bf9\u7684\uff0c\u5c31\u80fd\u5f97\u5230\u9884\u671f\u7684\u6b63\u786e\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u63a5\u7740\u8c03\u8bd5\u4e0b\u4e00\u4e2aBug\uff0c\u4e00\u6b65\u4e00\u6b65\u903c\u8fd1\u6b63\u786e\u7684\u7a0b\u5e8f\uff1b\u5982\u679c\u5047\u8bbe\u9519\u8bef\uff0c\u53ea\u597d\u53e6\u5916\u518d\u627e\u601d\u8def\u518d\u505a\u5047\u8bbe\u3002\u5f53\u4f60\u628a\u4e0d\u53ef\u80fd\u7684\u5168\u90e8\u5254\u9664\uff0c\u5269\u4e0b\u7684\u5373\u4f7f\u770b\u8d77\u6765\u518d\u600e\u4e48\u4e0d\u53ef\u80fd\uff0c\u4f46\u4e00\u5b9a\u662f\u4e8b\u5b9e\u3002 \u4e5f\u6709\u4e00\u79cd\u89c2\u70b9\u8ba4\u4e3a\uff0c\u7f16\u7a0b\u548c\u8c03\u8bd5\u662f\u4e00\u56de\u4e8b\uff0c\u7f16\u7a0b\u7684\u8fc7\u7a0b\u5c31\u662f\u9010\u6b65\u8c03\u8bd5\u76f4\u5230\u83b7\u5f97\u671f\u671b\u7684\u7ed3\u679c\u4e3a\u6b62\u3002\u4f60\u5e94\u8be5\u603b\u662f\u4ece\u4e00\u4e2a\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u5c0f\u89c4\u6a21\u7a0b\u5e8f\u5f00\u59cb\uff0c\u6bcf\u505a\u4e00\u6b65\u5c0f\u7684\u6539\u52a8\u5c31\u7acb\u523b\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u603b\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u7a0b\u5e8f\u505a\u53c2\u8003\uff1a\u5982\u679c\u6b63\u786e\u5c31\u7ee7\u7eed\u7f16\u7a0b\uff0c\u5982\u679c\u4e0d\u6b63\u786e\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u521a\u624d\u7684\u5c0f\u6539\u52a8\u51fa\u4e86\u95ee\u9898\u3002\u4f8b\u5982\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u5305\u542b\u4e86\u6210\u5343\u4e0a\u4e07\u884c\u4ee3\u7801\uff0c\u4f46\u5b83\u4e5f\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u89c4\u5212\u597d\u4e86\u5185\u5b58\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u7b49\u7b49\u5927\u7684\u6a21\u5757\uff0c\u4e00\u5f00\u59cb\u5b83\u4ec5\u4ec5\u662fLinus Torvalds\u7528\u6765\u7422\u78e8Intel 80386\u82af\u7247\u800c\u5199\u7684\u5c0f\u7a0b\u5e8f\u3002\u636eLarry Greenfield \u8bf4\uff0c\u201cLinus\u7684\u65e9\u671f\u5de5\u7a0b\u4e4b\u4e00\u662f\u7f16\u5199\u4e00\u4e2a\u4ea4\u66ff\u6253\u5370AAAA\u548cBBBB\u7684\u7a0b\u5e8f\uff0c\u8fd9\u73a9\u610f\u513f\u540e\u6765\u8fdb\u5316\u6210\u4e86Linux\u3002\u201d\uff08\u5f15\u81eaThe Linux User's Guide Beta1\u7248\uff09 \u9759\u6001\u7c7b\u578b\u548c\u5f3a\u7c7b\u578b \u9759\u6001\u7c7b\u578b\u3001\u52a8\u6001\u7c7b\u578b\u548c\u5f3a\u7c7b\u578b\u3001\u5f31\u7c7b\u578b\u662f\u4e24\u5bf9\u76f8\u5bf9\u7684\u6982\u5ff5\u3002\u5b83\u4eec\u5728\u7f16\u7a0b\u7684\u8bdd\u9898\u4e2d\u7ecf\u5e38\u88ab\u63d0\u5230\uff0c\u4e5f\u662f\u5f88\u591a\u4e89\u8bba\u7684\u6765\u6e90\u3002\u5bf9\u5b83\u4eec\u53d1\u8868\u4e0d\u6070\u5f53\u7684\u8a00\u8bba\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u5f15\u8d77\u5723\u6218\u3002\u5b83\u4eec\u90fd\u4e0d\u662f\u5177\u6709\u4e25\u8c28\u5b9a\u4e49\u7684\u5b66\u672f\u540d\u8bcd\u3002\u5728\u4e0a\u4e16\u7eaa70\u5e74\u4ee3\uff0c\u9759\u6001\u7c7b\u578b\u3001\u52a8\u6001\u7c7b\u578b\u4e00\u5f00\u59cb\u7684\u8bf4\u6cd5\u662f\u5f3a\u7c7b\u578b\u548c\u5f31\u7c7b\u578b\u3002\u540e\u6765\uff0c\u5f3a\u3001\u5f31\u7c7b\u578b\u7684\u539f\u59cb\u542b\u4e49\u88ab\u9759\u3001\u52a8\u6001\u7c7b\u578b\u6240\u6307\u4ee3\uff0c\u4e8e\u662f\u5f3a\u3001\u5f31\u7c7b\u578b\u53c8\u6709\u4e86\u66f4\u591a\u7684\u542b\u4e49\u3002\u73b0\u5728\uff0c\u5f3a\u7c7b\u578b\uff08 strong type \uff09\u53ef\u80fd\u66f4\u591a\u60c5\u51b5\u662f\u610f\u5473\u7740\uff1a\u4e00\u4e2a\u8bed\u8a00\u662f\u5f3a\u5065\u7684\u3001\u5065\u5168\u7684\uff08The language is sound\uff09\u3002 \u5b9e\u9645\u4e0a\uff0c\u9759\u3001\u52a8\u6001\u7c7b\u578b\u662f\u4e0d\u592a\u6070\u5f53\u7684\u8bf4\u6cd5\uff0c\u800c\u5f3a\u3001\u5f31\u7c7b\u578b\u7684\u8bf4\u6cd5\u66f4\u662f\u83ab\u540d\u5176\u5999\u3002\u8fd9\u56db\u4e2a\u540d\u8bcd\u90fd\u4e0e\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u68c0\u67e5\u6709\u5173\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u4fd7\u5730\u89e3\u91ca\u5982\u4e0b\uff1a \u9759\u6001\u7c7b\u578b\uff1a\u7f16\u8bd1\u7684\u65f6\u5019\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5 \u52a8\u6001\u7c7b\u578b\uff1a\u8fd0\u884c\u65f6\u624d\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5 \u5f3a\u7c7b\u578b\uff1a\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5\u65f6\u53ef\u4ee5\u62d2\u7edd\u6240\u6709\uff08\u5927\u90e8\u5206\uff09\u4e0d\u5b89\u5168\u884c\u4e3a \u5f31\u7c7b\u578b\uff1a\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5\u65f6\u4e0d\u4f1a\u62d2\u7edd\u90e8\u5206\u4e0d\u5b89\u5168\u884c\u4e3a \u5bf9\u4e8e\u57fa\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684\u8bed\u8a00\uff0c\u5b89\u5168\u6027\u68c0\u67e5\u5927\u90e8\u5206\u90fd\u662f\u7c7b\u578b\u68c0\u67e5\uff08Type Check\uff09\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u56db\u4e2a\u540d\u8bcd\u548c\u201c\u7c7b\u578b\u201d\u6ca1\u6709\u76f4\u63a5\u7684\u5173\u7cfb\uff0c\u5b83\u4eec\u90fd\u662f\u7f16\u8bd1\u5668\u7684\u884c\u4e3a\u3002 \u5b83\u4eec\u66f4\u51c6\u786e\u7684\u8bf4\u6cd5\u5e94\u8be5\u662f\uff1a\u9759\u6001\u68c0\u67e5\u3001\u52a8\u6001\u68c0\u67e5\u3001\u5f3a\u68c0\u67e5\u3001\u5f31\u68c0\u67e5\u3002 \u9759\u6001\u68c0\u67e5\u548c\u52a8\u6001\u68c0\u67e5\u7684\u533a\u522b\u5728\u4e8e\u5b89\u5168\u6027\u68c0\u67e5\uff08\u7c7b\u578b\u68c0\u67e5\uff09\u53d1\u751f\u7684\u65f6\u673a\u4e0d\u540c\uff0c\u800c\u5f3a\u68c0\u67e5\u548c\u5f31\u68c0\u67e5\u7684\u533a\u522b\u5728\u4e8e\u5b89\u5168\u6027\u68c0\u67e5\u7a0b\u5ea6\u7684\u5f3a\u5f31\uff0c\u81f3\u4e8e\u5f3a\u5f31\u7684\u8fb9\u754c\u5728\u54ea\u91cc\uff0c\u5e76\u6ca1\u6709\u660e\u786e\u3001\u7edf\u4e00\u7684\u5b9a\u4e49\u3002\u6b63\u5982\u4e0a\u9762\u63d0\u5230\u7684\uff0c\u8fd9\u56db\u4e2a\u540d\u8bcd\u7684\u542b\u4e49\u5b58\u5728\u5f88\u591a\u4e89\u8bae\uff0c\u4e0d\u540c\u7684\u4eba\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u770b\u6cd5\u3002 \u5bf9\u4e8e\u9759\u3001\u52a8\u6001\u7c7b\u578b\u7684\u533a\u5206\uff0c\u81f3\u5c11\u5b58\u5728\u4ee5\u4e0b\u89c2\u70b9\uff1a \u80fd\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u80fd\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6269\u5c55\u4e00\u4e2a\u7c7b\u578b \u5bf9\u4e8e\u5f3a\u3001\u5f31\u6001\u7c7b\u578b\u7684\u533a\u5206\uff0c\u81f3\u5c11\u5b58\u5728\u4ee5\u4e0b\u89c2\u70b9\uff1a \u80fd\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u4f8b\u5982\uff0cC \u8bed\u8a00\u4e4b\u7236 Dennis Ritchie \u66fe\u7ecf\u8bf4 C \u8bed\u8a00\u662f\u4e00\u79cd \u201c\u5f3a\u7c7b\u578b\u4f46\u662f\u5f31\u68c0\u67e5\u201d \u7684\u8bed\u8a00\uff0c\u56e0\u4e3a\u90a3\u65f6\u5019\u8fd8\u6ca1\u6709\u9759\u3001\u52a8\u6001\u7c7b\u578b\u548c\u5f3a\u3001\u5f31\u7c7b\u578b\u4e4b\u5206\u3002 \u662f\u5426\u5bf9\u53d8\u91cf\u7c7b\u578b\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\uff08\u9690\u5f0f\u8f6c\u6362\u53ef\u80fd\u5bfc\u81f4\u5b89\u5168\u6027\u95ee\u9898\uff09 \u5f3a\u3001\u5f31\u7c7b\u578b\u6982\u5ff5\u7684\u51fa\u73b0\u662f\u4e3a\u4e86\u5bf9\u7f16\u7a0b\u8bed\u8a00\u8fdb\u884c\u533a\u5206\uff0c\u4f46\u5b83\u4eec\u7684\u542b\u4e49\u8fc7\u4e8e\u5355\u4e00\u4ee5\u53ca\u8868\u9762\u5316\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u7684\u5dee\u5f02\u4f53\u73b0\u5728\u591a\u4e2a\u7ef4\u5ea6\u4e0a\uff0c\u56e0\u6b64\u6709\u4eba\u63d0\u51fa\u4e86\u201ctype safety\u201d\u3001\u201cmemory safety\u201d\u7b49\u533a\u5206\u7ef4\u5ea6\uff0c\u4e5f\u51fa\u73b0\u4e86\u4e0e\u5f3a\u5f31\u7c7b\u578b\u5b58\u5728\u4ea4\u96c6\u7684\u9759\u3001\u52a8\u6001\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u56db\u4e2a\u540d\u8bcd\u5bf9\u7406\u89e3\u7f16\u7a0b\u8bed\u8a00\u7684\u672c\u8d28\u5e76\u6ca1\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3a\u4e89\u8bba\u4e00\u4e9b\u4e1c\u897f\u53eb\u4ec0\u4e48\u540d\u5b57\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u53ea\u8981\u4eba\u4eec\u613f\u610f\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u7ed9\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5206\u7c7b\u4e3adogshit typed language\u3002\u56e0\u6b64\u4e4b\u540e\u7684\u6587\u7ae0\u4e0d\u4f1a\u4e13\u95e8\u4f7f\u7528\u8fd9\u56db\u4e2a\u540d\u8bcd\uff0c\u5373\u4f7f\u6709\u63d0\u5230\uff0c\u4e5f\u4f1a\u7528\u9759\u52a8\u6001\u68c0\u67e5\u3001\u5f3a\u5f31\u68c0\u67e5\u66ff\u4ee3\uff0c\u4ee5\u907f\u514d\u6b67\u4e49\u548c\u5723\u6218\u3002 \u5173\u4e8e\u8fd9\u56db\u4e2a\u6982\u5ff5\u66f4\u591a\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003 \u300aType Systems\u300b \u8bba\u6587 (Luca Cardelli [Microsoft Research], 2004)\u3002\u8fd9\u7bc7\u8bba\u6587\u7814\u7a76\u4e86\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u4ee5\u4e0b\u7684\u8bba\u8ff0\u5f15\u7528\u81ea\u8be5\u8bba\u6587\uff0c\u5bf9\u8fd9\u56db\u4e2a\u540d\u8bcd\u4f5c\u4e86\u8f83\u4e3a\u4e25\u8c28\u7684\u5b9a\u4e49\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684\u6267\u884c\u9519\u8bef (execution errors) \u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e24\u79cd\uff1a trapped errors \uff08\u88ab\u6355\u83b7\u7684\u9519\u8bef\uff09: \u5bfc\u81f4\u7a0b\u5e8f\u7acb\u5373\u7ec8\u6b62\u6267\u884c\u7684\u9519\u8bef\u3002 untrapped errors \uff08\u672a\u88ab\u6355\u83b7\u7684\u9519\u8bef\uff09: \u51fa\u9519\u540e\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u80fd\u5bfc\u81f4\u610f\u5916\u7684\u884c\u4e3a\uff08\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\uff09\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u53ef\u4ee5\u5c06execution errors\u7684\u67d0\u4e2a\u5b50\u96c6\u5b9a\u4e49\u4e3a forbidden errors\u3002 \u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4e0d\u4f1a\u51fa\u73b0untrapped errors\uff0c\u79f0\u4e3a\u5b89\u5168\u7684 (safe)\u3002\u4e00\u4e2a\u8bed\u8a00\u7684\u6240\u6709\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u51fa\u73b0untrapped errors\uff0c\u5219\u79f0\u4e3a\u5b89\u5168\u7684\u8bed\u8a00 ( safe language )\u3002 forbidden errors \uff1a\u5305\u62ec\u6240\u6709untrapped errors\u4ee5\u53catrapped errors\u7684\u67d0\u4e2a\u5b50\u96c6\u3002 \u6ce8\u610f\uff1a\u7a7a\u96c6\u662f\u4efb\u610f\u96c6\u5408\u7684\u5b50\u96c6\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55forbidden errors\uff0c\u5219\u79f0\u4e3a good behavior \uff0c\u5426\u5219\u79f0\u4e3a bad behavior \u3002 \u5982\u679c\u4e00\u4e2a\u8bed\u8a00\u7684\u6240\u6709\u7a0b\u5e8f\u90fd\u662f good behavior \u7684\uff0c\u5219\u79f0\u8be5\u8bed\u8a00\u4e3a strongly checked language \uff0c\u5426\u5219\u4e3a weakly checked language \u3002 \u5728\u7f16\u8bd1\u65f6\u62d2\u7edd bad behavior \u7684\u8bed\u8a00\u79f0\u4e3a statically checked language \u3002 \u5982\u679c\u5728\u8fd0\u884c\u65f6\u62d2\u7edd bad behavior \u7684\u8bed\u8a00\u79f0\u4e3a dynamically checked language \u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8bf4\u62d2\u7edd bad behavior \u662f\u6307\u5b58\u5728\u62d2\u7edd bad behavior \u7684\u884c\u4e3a\uff0c\u4f46\u4e0d\u4e00\u5b9a\u80fd\u62d2\u7edd\u5168\u90e8\u7684 bad behavior\u3002 \u5982\u679c\u662f\u57fa\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684\u8bed\u8a00\uff0cstatic checking \u6216 dynamic checking \u5927\u90e8\u5206\u90fd\u662f\u7c7b\u578b\u68c0\u67e5\uff0c\u56e0\u4e3a\u7c7b\u578b\u7cfb\u7edf\u672c\u8eab\u5c31\u5177\u6709\u4fdd\u969c\u5b89\u5168\u6027\u7684\u529f\u80fd\u3002 \u51fa\u4e8e\u6027\u80fd\u7684\u8003\u8651\uff0c\u6709\u4e9b\u8bed\u8a00\u672c\u8eab\u5c31\u88ab\u8bbe\u8ba1\u4e3a\u4e0d\u5b89\u5168\u7684\uff0c\u4f8b\u5982C\u8bed\u8a00\u3002\u5728\u8fd0\u884c\u65f6\u4e3a\u4e86\u786e\u4fdd\u5b89\u5168\u6027\u800c\u8fdb\u884c\u68c0\u67e5\uff0c\u5176\uff08\u6027\u80fd\uff09\u4ee3\u4ef7\u662f\u6602\u8d35\u7684\u3002\u5373\u4f7f\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u5927\u91cf\u7684\u9759\u6001\u68c0\u67e5\uff0c\u5b9e\u73b0\u5b89\u5168\u6027\u4e5f\u9700\u8981\u4ed8\u51fa\u4e00\u4e9b\u4ee3\u4ef7\uff0c\u4f8b\u5982\u901a\u5e38\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u5b8c\u5168\u6d88\u9664\u6570\u7ec4\u7d22\u5f15\u51fa\u754c\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4e00\u4e9b\u8bed\u8a00\u53ef\u80fd\u4f1a\u540c\u65f6\u4f7f\u7528\u9759\u6001\u68c0\u67e5\u548c\u52a8\u6001\u68c0\u67e5\u3002\u8fd9\u4e9b\u8bed\u8a00\u53ef\u80fd\u4ecd\u7136\u88ab\u79f0\u4e3a\u9759\u6001\u68c0\u67e5\u8bed\u8a00\uff0c\u90e8\u5206\u539f\u56e0\u662f\u5b83\u4eec\u7684\u52a8\u6001\u68c0\u67e5\u662f\u57fa\u4e8e\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\u7684\uff0c\u5373\u52a8\u6001\u68c0\u67e5\u7684\u7b97\u6cd5\u548c\u9759\u6001\u68c0\u67e5\u7684\u7b97\u6cd5\u517c\u5bb9\u3002 \u53d8\u91cf\u53ca\u5176\u884c\u4e3a \u53d8\u91cf\uff08Variable\uff09\u662f\u7f16\u7a0b\u8bed\u8a00\u6700\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\u3002 \u53d8\u91cf\u662f\u8ba1\u7b97\u673a\u4e2d\u4e00\u5757\u547d\u540d\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\u7531\u53d8\u91cf\u7684\u7c7b\u578b\u51b3\u5b9a\u3002 \u8be5\u5185\u5b58\u7a7a\u95f4\u7528\u4e8e\u5b58\u50a8\u4e00\u4e2a\u503c\uff08Value\uff09\uff0c\u50a8\u5b58\u7684\u503c\u662f\u53ef\u4ee5\u968f\u65f6\u6539\u53d8\u7684\uff0c\u6bd4\u5982\u8fd9\u6b21\u5b58\u50a8\u5b57\u7b26 'a' \uff0c\u4e0b\u6b21\u5b58\u50a8\u5b57\u7b26 'b' \uff0c\u4f46\u662f\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u662f\u4e0d\u53d8\u7684\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u53d8\u91cf\u3002 \u5728\u9759\u6001\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u4f46\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u5f80\u5f80\u662f\u4f1a\u6539\u53d8\u7684\u3002 \u6216\u8005\u8bf4\uff0c\u53d8\u91cf\u662f\u4e00\u79cd\u4f7f\u7528\u65b9\u4fbf\u7684\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u5f15\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u5730\u5740\uff0c\u5b9e\u9645\u4e0a\u53d8\u91cf\u662f\u5185\u5b58\u53ca\u5176\u5730\u5740\u7684\u62bd\u8c61\u3002\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u4e3a\u4e86\u64cd\u4f5c\u5185\u5b58\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u5185\u5b58\u5730\u5740\uff0c\u4f46\u5728\u9ad8\u7ea7\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u53ea\u9700\u8981\u5bf9\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u64cd\u4f5c\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5360\u4f4d\u7b26 \uff1a\u5148\u5360\u4f4f\u4e00\u4e2a\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff0c\u7b49\u5f85\u503c\u6dfb\u52a0\u5230\u8be5\u4f4d\u7f6e\u7684\u7b26\u53f7\u3002 \u53d8\u91cf\u62e5\u6709\u4e00\u4e2a\u6807\u8bc6\u7b26\uff08\u53d8\u91cf\u540d\uff09\u548c\u4e00\u4e2a\u503c\u3002\u8be5\u6807\u8bc6\u7b26\u4f1a\u88ab\u50a8\u5b58\u5728\u7b26\u53f7\u8868\uff08symbol table\uff09\u4e4b\u4e2d\u3002\u7b26\u53f7\u8868\u50a8\u5b58\u4e86\u53d8\u91cf\u7684\u53d8\u91cf\u540d\u3001\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u3001\u53d8\u91cf\u503c\u7684\u7c7b\u578b\u3002 \u4e0d\u8981\u5f04\u6df7\u53d8\u91cf\u548c\u53d8\u91cf\u540d\uff0c\u53d8\u91cf\u540d\u662f\u6807\u8bc6\u7b26\u7684\u4e00\u79cd\u3002 \u53d8\u91cf\u7684\u884c\u4e3a\u4e00\u5171\u6709\u56db\u79cd\uff1a\u58f0\u660e\u3001\u5b9a\u4e49\u3001\u521d\u59cb\u5316\u3001\u8d4b\u503c\u3002 \u58f0\u660e \uff1a\u544a\u8bc9\u7f16\u8bd1\u5668/\u89e3\u6790\u5668\u6709\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9a\u4e49 \uff1a\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9e\u9645\u4e0a\uff0c\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u6709\u4e24\u79cd\uff1a \u5f15\u7528\u6027\u58f0\u660e\uff08defining declaration\uff09\uff1a\u4e0d\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 extern in a \u4e2d\u7684\u53d8\u91cf a \u5df2\u7ecf\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49\u3002 \u5b9a\u4e49\u6027\u58f0\u660e\uff08referencing declaration\uff09\uff1a\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 int a \u5728\u58f0\u660e\u65f6\u5c31\u5efa\u7acb\u4e86 a \u7684\u50a8\u5b58\u7a7a\u95f4\u3002 \u53ef\u89c1\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u5305\u542b\u4e86\u5b9a\u4e49\uff0c\u800c\u5e76\u975e\u6240\u6709\u7684\u58f0\u660e\u90fd\u662f\u5b9a\u4e49\u3002\u4e00\u822c\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5e38\u5e38\u8fd9\u6837\u53d9\u8ff0\uff0c\u628a\u5efa\u7acb\u7a7a\u95f4\u7684\u58f0\u660e\u79f0\u4e4b\u4e3a\"\u5b9a\u4e49\"\uff0c\u800c\u628a\u4e0d\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u79f0\u4e4b\u4e3a\"\u58f0\u660e\"\u3002 \u5b9a\u4e49\u548c\u58f0\u660e\u7684\u672c\u8d28\u533a\u522b\u5c31\u662f\uff1a\u5b9a\u4e49\u4f1a\u7ed9\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u58f0\u660e\u5219\u4e0d\u4f1a\u3002 \u521d\u59cb\u5316 \uff1a\u5728\u5b9a\u4e49\u53d8\u91cf\u4e4b\u540e\uff0c\u7cfb\u7edf\u4e3a\u53d8\u91cf\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5185\u5e76\u6ca1\u6709\u503c\uff0c\u6b64\u65f6\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4e3a\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u548c\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5bf9\u8fd9\u4e2a\u5185\u5b58\u7a7a\u95f4\u8fdb\u884c\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u4e00\u822c\u4f34\u968f\u7740\u5b9a\u4e49\u800c\u4ea7\u751f\u3002 \u521d\u59cb\u5316\u662f\u4ece\u65e0\u5230\u6709\u7684\u8fc7\u7a0b\u3002 \u5982\u679c\u53d8\u91cf\u7684\u5b9a\u4e49\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u90a3\u8fd9\u4e2a\u6700\u521d\u5206\u914d\u7684\u7a7a\u95f4\u7684\u503c\u53ef\u80fd\u662f\u968f\u673a\u7684\uff08\u5185\u5b58\u7a7a\u95f4\u4e0a\u539f\u6765\u5b58\u50a8\u7684\u503c\uff09\uff0c\u4e5f\u53ef\u80fd\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002\u8fd9\u53d6\u51b3\u4e8e\u5177\u4f53\u7f16\u7a0b\u8bed\u8a00\u7684\u7279\u6027\u3002\u4e0d\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u53d8\u91cf\u53ef\u80fd\u4f1a\u4e3a\u7a0b\u5e8f\u5e26\u6765\u4e0d\u5b89\u5168\u4e0e\u4e0d\u786e\u5b9a\u6027\u3002 \u8d4b\u503c \uff1a\u8d4b\u503c\u662f\u53d8\u91cf\u503c\u7684\u5237\u65b0\u64cd\u4f5c\u3002 \u8d4b\u503c\u662f\u4ece\u65e7\u5230\u65b0\u7684\u8fc7\u7a0b\u3002 \u5728\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u548c\u52a8\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u8868\u73b0\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u5728\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff08\u4f8b\u5982\uff1aC\u3001C++\uff09\uff0c\u53d8\u91cf\u867d\u7136\u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u4f46\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\uff0c\u56e0\u6b64\uff0c\u53d8\u91cf\u5728\u5b9a\u4e49\u540e\uff0c\u5176\u53d8\u91cf\u540d\u548c\u4e00\u4e2a\u7c7b\u578b\u6c38\u4e45\u7ed1\u5b9a\u3002\u8fd9\u6b63\u662f\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u7684\u5173\u952e\u7279\u6027\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53ef\u4ee5\u52a8\u6001\u5730\u548c\u4e0d\u540c\u7684\u7c7b\u578b\u7ed1\u5b9a\uff0c\u7c7b\u578b\u68c0\u67e5\u5c06\u53d8\u5f97\u5f88\u56f0\u96be\u3002\u56e0\u4e3a\u53d8\u91cf\u7684\u65b0\u503c\u548c\u65e7\u503c\u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u65b0\u65e7\u503c\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u5c0f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\uff0c\u8d4b\u503c\u53ef\u4ee5\u8986\u76d6\u5185\u5b58\u7a7a\u95f4\u7684\u65e7\u503c\uff0c\u800c\u65e0\u987b\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e5f\u4e0d\u4f1a\uff08\u65e0\u9700\uff09\u6539\u53d8\u7b26\u53f7\u8868\u4e2d\u5185\u5b58\u7a7a\u95f4\u5730\u5740\u548c\u53d8\u91cf\u540d\u7684\u6620\u5c04\u5173\u7cfb\u3002 \u6240\u4ee5\u5728\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff0c\u4eba\u4eec\u4e00\u822c\u8bf4\u53d8\u91cf\u662f\u6709\u7c7b\u578b\u7684\u3002 \u800c\u5728\u52a8\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff08\u4f8b\u5982Python\u3001Ruby\uff09\uff0c\u5bf9\u53d8\u91cf\u8d4b\u503c\u4e0d\u9700\u8981\u5148\u58f0\u660e\u7c7b\u578b\uff0c\u8d4b\u503c\u53ef\u4ee5\u5c06\u53d8\u91cf\u540d\u4e0e\u65b0\u7684\u7c7b\u578b\u7ed1\u5b9a\u3002\u8fd9\u662f\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u7684\u5173\u952e\u7279\u6027\u3002\u56e0\u4e3a\u53d8\u91cf\u7684\u65b0\u503c\u548c\u65e7\u503c\u7684\u7c7b\u578b\u4e0d\u4e00\u5b9a\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8d4b\u503c\u65f6\u9700\u8981\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u50a8\u5b58\u65b0\u503c\uff0c\u540c\u65f6\u7b26\u53f7\u8868\u4e2d\u53d8\u91cf\u540d\u4e0e\u65e7\u503c\u5730\u5740\u7684\u6620\u5c04\u6539\u4e3a\u53d8\u91cf\u540d\u4e0e\u65b0\u503c\u5730\u5740\u7684\u6620\u5c04\u3002 \u6240\u4ee5\u5728\u52a8\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff0c\u4eba\u4eec\u4e00\u822c\u8bf4\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b\uff0c\u751a\u81f3\u8bf4\u6ca1\u6709\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5728Python\u4e2d\uff0c\u6709\u4e9b\u4eba\u4f1a\u8ba4\u4e3aPython\u6ca1\u6709\u53d8\u91cf\uff0c\u53ea\u6709\u540d\u5b57\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5f88\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u9759\u6001\u8bed\u8a00\u6bd4\u52a8\u6001\u8bed\u8a00\u5148\u51fa\u73b0\uff0c\u5f88\u591a\u4eba\u4e00\u5f00\u59cb\u5b66\u4e60\u7684\u7f16\u7a0b\u8bed\u8a00\u4e5f\u662f\u9759\u6001\u8bed\u8a00\uff0c\u6240\u4ee5\u4ed6\u4eec\u8ba4\u4e3a\u4e00\u4e2a\u53d8\u91cf\u5e94\u8be5\u5177\u6709\u9759\u6001\u8bed\u8a00\u4e2d\u53d8\u91cf\u6240\u5177\u6709\u7684\u7279\u5f81\uff0c\u5426\u5219\u5c31\u4e0d\u80fd\u79f0\u4e3a\u53d8\u91cf\u3002 \u5728\u8ba1\u7b97\u673a\u9886\u57df\u4e2d\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u628a\u4e00\u4e2a\u6982\u5ff5\u4e0e\u5177\u4f53\u7684\u5b9e\u73b0\u7ed3\u5408\u8d77\u6765\uff0c\u8ba4\u4e3a\u8fd9\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0\u6240\u5177\u6709\u7684\u7279\u5f81\u662f\u8fd9\u4e2a\u6982\u5ff5\u672c\u8eab\u5e94\u6709\u7684\u7279\u5f81\u3002 \u5f62\u8c61\u6765\u8bf4\uff0c\u5bf9\u4e8e\u9759\u6001\u68c0\u67e5\u7684\u8bed\u8a00\uff0c\u53d8\u91cf\u5c31\u50cf\u4e00\u95f4\u623f\u5b50\uff0c\u53d8\u91cf\u540d\u76f8\u5f53\u4e8e\u623f\u5b50\u7684\u95e8\u724c\u53f7\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u95e8\u724c\u53f7\u6765\u627e\u5230\u5bf9\u5e94\u7684\u623f\u5b50\u3002\u8fd9\u4e2a\u623f\u5b50\u4eca\u5929\u91cc\u9762\u4f4f\u7740\u7c73\u5947\uff0c\u660e\u5929\u7c73\u5947\u642c\u8d70\u4e86\uff0c\u6362\u6210\u6770\u745e\u4f4f\u8fdb\u6765\uff0c\u56e0\u4e3a\u7c73\u5947\u548c\u6770\u745e\u90fd\u662fmouse\uff0c\u4e0d\u9700\u8981\u5bf9\u623f\u5b50\u8fdb\u884c\u6539\u9020\uff0c\u56e0\u6b64\u623f\u5b50\u7684\u4f4d\u7f6e\u3001\u7a7a\u95f4\u5927\u5c0f\u90fd\u662f\u6ca1\u6709\u6539\u53d8\u7684\u3002\u540e\u6765\uff0c\u6c64\u59c6\u4e5f\u60f3\u4f4f\u8fdb\u623f\u5b50\u91cc\u9762\uff0c\u4e8e\u662f\u628a\u6770\u745e\u8d76\u8dd1\u4e86\uff0c\u4f46\u662f\u6c64\u59c6\u53d1\u73b0\u8fd9\u4e2a\u623f\u5b50\u592a\u5c0f\u4e86\uff0c\u6839\u672c\u4f4f\u4e0d\u4e86\uff0c\u6c64\u59c6\u53ea\u597d\u5728\u522b\u7684\u5730\u65b9\u65b0\u5efa\u4e86\u4e00\u4e2a\u5927\u623f\u5b50\uff0c\u5e76\u8d34\u4e0a\u4e86\u6770\u745e\u623f\u5b50\u7684\u95e8\u724c\u53f7\u3002 \u57fa\u672c\u672f\u8bed\u89e3\u91ca \u5f15\u7528\uff08reference \uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a \u8be5\u8d44\u6599 \u7684 \u6307\u9488 \u6216 \u5730\u5740 \u3002 \u6807\u8bc6\u7b26\uff08identifier\uff0c\u7f29\u5199\u4e3aID\uff09 \uff1a\u53c8\u79f0\u4e3a\u8bc6\u522b\u7801\uff0c\u662f\u4e00\u4e2a\u7528\u6765\u8bc6\u522b\u4e0d\u540c\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6807\u8bc6\u7b26\u5c31\u662f\u7a0b\u5e8f\u5458\u81ea\u5df1\u89c4\u5b9a\u7684\u5177\u6709\u7279\u5b9a\u542b\u4e49\u7684\u8bcd\uff0c\u6bd4\u5982\u51fd\u6570\u540d\u3001\u65b9\u6cd5\u540d\u3001\u7c7b\u540d\uff0c\u53d8\u91cf\u540d\u3001\u5e38\u91cf\u540d\u7b49\u3002 \u5bf9\u8c61\uff08object\uff09 \uff1a\u662f\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\uff0c\u5176\u4e2d\u50a8\u5b58\u7740\u503c\uff0c\u53ef\u80fd\u6709\u6807\u8bc6\u7b26\u6307\u5411\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u3002\u53f0\u6e7e\u5c06\u5176\u8bd1\u4f5c\u7269\u4ef6\u3002\u5bf9\u8c61\u662f\u67d0\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5c06\u6570\u636e\u548c\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u878d\u4e3a\u4e00\u4f53\uff0c\u5f62\u6210\u5177\u6709\u9759\u6001\u4fe1\u606f\u548c\u52a8\u6001\u884c\u4e3a\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5177\u6709\u4e00\u4e2aID\u3001\u4e00\u4e2a\u7c7b\u578b\u3001\u4e00\u4e2a\u503c\u3002\u5bf9\u8c61\u4e00\u65e6\u5efa\u7acb\uff0cID\u4fbf\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u91cc\u6240\u8bf4\u7684ID\u662f\u662f\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662fidentifier\u3002 \u5bf9\u8c61\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u6807\u8bc6\u7b26\u5e76\u4e0d\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6307\u5411\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002\u800c\u7ba1\u7406\u8fd9\u4e9b\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u7684\u4e8b\u7269\u5c31\u662f\u201c\u547d\u540d\u7a7a\u95f4\u201d\u3002 \u547d\u540d\u7a7a\u95f4\uff08Namespace\uff09 \uff1a\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u5230\u5bf9\u8c61\u7684 \u6620\u5c04 \u3002\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u662f\u89e3\u51b3\u53d8\u91cf\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\u53d8\u91cf\uff0c\u4f46\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5b58\u5728\u91cd\u540d\u53d8\u91cf\u800c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u4f5c\u7528\u57df\uff08Scope\uff09 \uff1a\u672c\u8d28\u662f\u4e00\u5757\u6587\u672c\u533a\u57df\uff0c\u5373\u53d8\u91cf\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u8fd9\u91cc\u7684\u201d\u4f5c\u7528\u201c\u5177\u4f53\u662f\u6307\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u76f8\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u3002\u4f5c\u7528\u57df\u9650\u5b9a\u4e86\u53ef\u4ee5\u8bbf\u95ee\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u540c\u65f6\u88ab\u591a\u4e2a\u4f5c\u7528\u57df\u8bbf\u95ee\u3002 \u540d\u5b57\u7684\u4f5c\u7528\u57df \uff1a\u8be5\u540d\u5b57\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df \uff1a\u8be5\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u76f4\u63a5\u8bbf\u95ee \uff1a\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff08\u5982Python\uff09\uff0c\u4e0d\u52a0 . \u7684\u8bbf\u95ee\u4e3a\u76f4\u63a5\u8bbf\u95ee\uff0c\u53cd\u4e4b\u4e3a\u5c5e\u6027\u8bbf\u95ee\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \uff1a\u57fa\u4e8e\u5bf9\u8c61\u6982\u5ff5\u6765\u5206\u6790\u95ee\u9898\u548c\u8bbe\u8ba1\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08object-orientation programming\uff0c\u7b80\u79f0OOP\uff09\u3002\u901a\u8fc7OOP\u6240\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u4e2a\u7531\u5f88\u591a\u5bf9\u8c61\u7ec4\u6210\u7684\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5411\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u6765\u5b9e\u73b0\u5bf9\u6570\u636e\u7684\u5904\u7406\uff0c\u5168\u4f53\u5bf9\u8c61\u901a\u8fc7\u76f8\u4e92\u534f\u4f5c\u6765\u5b8c\u6210\u7a0b\u5e8f\u7684\u6570\u636e\u5904\u7406\u529f\u80fd\u3002 \u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b \uff1a\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u7ec4\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff0c\u901a\u8fc7\u6309\u987a\u5e8f\u6267\u884c\u8fd9\u4e9b\u8fc7\u7a0b\u6765\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u3002 \u7c7b\u7684\u6982\u5ff5 \u5728\u7f16\u7a0b\u65f6\uff0c\u67d0\u4e00\u6bb5\u4ee3\u7801\u8981\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u5f80\u5f80\u662f\u56fa\u5b9a\u7684\uff0c\u6216\u8005\u662f\u7c7b\u4f3c\u7684\u3002\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u64cd\u7eb5\u6570\u636e\uff0c\u4eba\u4eec\u5c06\u6570\u636e\u548c\u64cd\u7eb5\u8be5\u6570\u636e\u7684\u4ee3\u7801\u7ed1\u5b9a\uff0c\u79f0\u4e4b\u4e3a\u7c7b\u3002 \u7c7b\u662f\u7c7b\u578b\u6982\u5ff5\u7684\u53d1\u5c55\u3002 \u7c7b\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u7528\u7f16\u7a0b\u8bed\u8a00\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u9996\u5148\u9700\u8981\u660e\u786e\u95ee\u9898\u4e2d\u6d89\u53ca\u54ea\u4e9b\u6570\u636e\uff0c\u5e76\u5728\u7a0b\u5e8f\u4e2d\u5c06\u8fd9\u4e9b\u6570\u636e\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u518d\u53bb\u8003\u8651\u9700\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u6267\u884c\u4f55\u79cd\u64cd\u4f5c\u3002\u8fd9\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u601d\u60f3\u3002 \u6570\u636e\u7c7b\u578b\u662f\u5bf9\u73b0\u5b9e\u4e2d\u7684\u6570\u636e\u7684\u62bd\u8c61 \uff0c\u76f8\u540c\u6216\u76f8\u4f3c\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6574\u6570\u7c7b\u578b\u548c\u6d6e\u70b9\u6570\u7c7b\u578b\u7684\u6570\u636e\u90fd\u652f\u6301 + \u8fd0\u7b97\u3002 \u5927\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\u6574\u6570\u7c7b\u578b\u3001\u6d6e\u70b9\u6570\u7c7b\u578b\u3001\u5b57\u7b26\u7c7b\u578b\u7b49\u7b49\u3002\u4f46\u5b9e\u9645\u95ee\u9898\u4e2d\u5f80\u5f80\u6d89\u53ca\u5f88\u590d\u6742\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u3002\u4e3a\u4e86\u8868\u793a\u590d\u6742\u6570\u636e\uff0c\u5927\u4f53\u6709\u4e24\u79cd\u529e\u6cd5\uff1a 1.\u4e00\u5c06\u590d\u6742\u6570\u636e\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u6570\u636e\u9879\uff0c\u6bcf\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u8868\u793a\u3002 \u8fd9\u662fC\u8bed\u8a00\u4e2d\u5e38\u7528\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3aC\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 2.\u8ba9\u7a0b\u5e8f\u5458\u81ea\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5bf9\u590d\u6742\u6570\u636e\u8fdb\u884c\u76f4\u63a5\u7684\u3001\u6574\u4f53\u7684\u8868\u793a\u3002 \u53ef\u4ee5\u81ea\u5b9a\u7c7b\u578b\u662f\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8303\u5f0f\u7684\u5fc5\u8981\u6761\u4ef6\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u5b66\u751f\u7684\u4fe1\u606f\u5305\u62ec\u59d3\u540d\u3001\u5e74\u9f84\u3001\u73ed\u7ea7\u3001\u4f4f\u5740\u7b49\u7b49\u3002\u8fd9\u4e9b\u57fa\u672c\u4fe1\u606f\u53ef\u4ee5\u7528\u591a\u79cd\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff08\u5982\u6574\u6570\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5206\u522b\u8868\u793a\uff0c\u5982\u56fe1\u3002\u4f46\u8fd9\u4e0d\u662f\u597d\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u793a\u6cd5\u4e22\u5931\u4e86\u6570\u636e\u7684\u6574\u4f53\u6027\uff0c\u5728\u7ef4\u62a4\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u6570\u636e\u95f4\u7684\u8054\u7cfb\u65f6\u5f88\u9ebb\u70e6\u3002 \u7b2c\u4e8c\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u5b66\u751f\u7684\u4fe1\u606f\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u7528\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u8868\u793a\uff0c\u5982\u56fe2\u3002\u56e0\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6ca1\u6709\u73b0\u6210\u7684\u7c7b\u578b\u80fd\u591f\u8868\u793a\u8be5\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u8fd9\u79cd\u6570\u636e\u503c\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\u2014\u2014 Student \u7c7b\u578b\u3002 Student \u7c7b\u578b\u5b9e\u9645\u4e0a\u662f\u5728\u5185\u90e8\u5c06 string \u3001 int \u7c7b\u578b\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u53ef\u80fd\u88ab\u79f0\u4e3a\u590d\u5408\u7c7b\u578b\uff08composite data type, aggregate data type\uff09\u3002 \u7531\u6b64\uff0c\u6211\u4eec\u4ece\u4f20\u7edf\u7684\u6570\u636e\u7c7b\u578b\u6982\u5ff5\u53d1\u5c55\u51fa\u4e86\u201c\u7c7b\u201d\u7684\u6982\u5ff5\u3002\u7c7b\uff08class\uff09\u662f\u5e7f\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u80fd\u591f\u5b9a\u4e49\u590d\u6742\u6570\u636e\u7684\u7279\u6027\uff0c\u5305\u62ec\u9759\u6001\u7279\u6027\uff08\u5373\u6570\u636e\uff09\u548c\u52a8\u6001\u7279\u6027\uff08\u5373\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u65b9\u6cd5\uff09\u3002\u7c7b\u7684\u5b9e\u4f8b\u79f0\u4e3a\u5bf9\u8c61\u3002 \u53c2\u8003 Python\u5230\u5e95\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u8fd8\u662f\u5f31\u7c7b\u578b\u8bed\u8a00\uff1f \u300aType Systems\u300b Strong versus Weak Typing \u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5185\u5b58\u3002 \u21a9","title":"1.3.\u57fa\u672c\u6982\u5ff5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_1","text":"\u7a0b\u5e8f\uff08Program\uff09 \u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u5982\u4f55\u5b8c\u6210\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd9\u91cc\u7684\u8ba1\u7b97\u53ef\u4ee5\u662f\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982\u89e3\u65b9\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7b26\u53f7\u8fd0\u7b97\uff0c\u6bd4\u5982\u67e5\u627e\u548c\u66ff\u6362\u6587\u6863\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\u3002\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c \u8ba1\u7b97\u673a\u662f\u7531\u6570\u5b57\u7535\u8def\u7ec4\u6210\u7684\u8fd0\u7b97\u673a\u5668\uff0c\u53ea\u80fd\u5bf9\u6570\u5b57\u505a\u8fd0\u7b97\uff0c\u7a0b\u5e8f\u4e4b\u6240\u4ee5\u80fd\u505a\u7b26\u53f7\u8fd0\u7b97\uff0c\u662f\u56e0\u4e3a\u7b26\u53f7\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\u3002 \u6b64\u5916\uff0c\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u5904\u7406\u58f0\u97f3\u548c\u56fe\u50cf\uff0c\u58f0\u97f3\u548c\u56fe\u50cf\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u5fc5\u7136\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\uff0c\u8fd9\u4e9b\u6570\u5b57\u7ecf\u8fc7\u4e13\u95e8\u7684\u786c\u4ef6\u8bbe\u5907\u8f6c\u6362\u6210\u4eba\u53ef\u4ee5\u542c\u5230\u3001\u770b\u5230\u7684\u58f0\u97f3\u548c\u56fe\u50cf\u3002 \u7a0b\u5e8f\u7531\u4e00\u7cfb\u5217 \u6307\u4ee4\uff08Instruction\uff09 \u7ec4\u6210\uff0c\u6307\u4ee4\u662f\u6307\u793a\u8ba1\u7b97\u673a\u505a\u67d0\u79cd\u8fd0\u7b97\u7684\u547d\u4ee4\uff0c\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u8f93\u5165\uff08Input\uff09\uff1a\u4ece\u952e\u76d8\u3001\u6587\u4ef6\u6216\u8005\u5176\u5b83\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002 \u8f93\u51fa\uff08Output\uff09\uff1a\u628a\u6570\u636e\u663e\u793a\u5230\u5c4f\u5e55\uff0c\u6216\u8005\u5b58\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u8005\u53d1\u9001\u5230\u5176\u5b83\u8bbe\u5907\u3002 \u57fa\u672c\u8fd0\u7b97\uff1a\u6267\u884c\u6700\u57fa\u672c\u7684\u6570\u5b66\u8fd0\u7b97\uff08\u52a0\u51cf\u4e58\u9664\uff09\u548c\u6570\u636e\u5b58\u53d6\u3002 \u6d4b\u8bd5\u548c\u5206\u652f\uff1a\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\uff0c\u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u6d4b\u8bd5\u7ed3\u679c\u6267\u884c\u4e0d\u540c\u7684\u540e\u7eed\u6307\u4ee4\u3002 \u5faa\u73af\uff1a\u91cd\u590d\u6267\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\uff0c\u6709\u4e0a\u9762\u8fd9\u51e0\u7c7b\u6307\u4ee4\u5c31\u8db3\u591f\u4e86\u3002\u4efb\u4f55\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u7ba1\u5b83\u6709\u591a\u4e48\u590d\u6742\uff0c\u90fd\u662f\u7531\u8fd9\u51e0\u7c7b\u6307\u4ee4\u7ec4\u6210\u7684\u3002\u7a0b\u5e8f\u662f\u90a3\u4e48\u7684\u590d\u6742\uff0c\u800c\u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u7528\u7684\u6307\u4ee4\u5374\u53ea\u6709\u8fd9\u4e48\u7b80\u5355\u7684\u51e0\u79cd\uff0c\u8fd9\u4e2d\u95f4\u5de8\u5927\u7684\u843d\u5dee\u5c31\u8981\u7531\u7a0b\u5e8f\u5458\u53bb\u586b\u4e86\uff0c\u6240\u4ee5\u7f16\u5199\u7a0b\u5e8f\u7406\u5e94\u662f\u4e00\u4ef6\u76f8\u5f53\u590d\u6742\u7684\u5de5\u4f5c\u3002 \u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u8bf4\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u628a\u590d\u6742\u7684\u4efb\u52a1\u5206\u89e3\u6210\u5b50\u4efb\u52a1\uff0c\u628a\u5b50\u4efb\u52a1\u518d\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c42\u5c42\u5206\u89e3\uff0c\u76f4\u5230\u6700\u540e\u7b80\u5355\u5f97\u53ef\u4ee5\u7528\u4ee5\u4e0a\u6307\u4ee4\u6765\u5b8c\u6210\u3002 \u6309\u7167\u5bf9\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u7684\u62bd\u8c61\u5c42\u6b21\u9ad8\u4f4e\uff0c \u7f16\u7a0b\u8bed\u8a00 \uff08Programming Language\uff09\u53ef\u4ee5\u5206\u4e3a\uff1a \u4f4e\u7ea7\u8bed\u8a00\uff08Low-level Language\uff09\uff1a\u673a\u5668\u8bed\u8a00\uff08Machine Language\uff09\u548c\u6c47\u7f16\u8bed\u8a00\uff08Assembly Language\uff09 \u9ad8\u7ea7\u8bed\u8a00\uff08High-level Language\uff09\uff1aC\u3001C++\u3001Java\u3001Python\u7b49 \u4f4e\u7ea7\u8bed\u8a00\u76f4\u63a5\u7528\u673a\u5668\u6307\u4ee4\u7f16\u5199\u7a0b\u5e8f\u3002\u9ad8\u7ea7\u8bed\u8a00\u7528\u8bed\u53e5\uff08Statement\uff09\u7f16\u5199\u7a0b\u5e8f\uff0c\u8bed\u53e5\u662f\u673a\u5668\u6307\u4ee4\u7684\u62bd\u8c61\u8868\u793a\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u540c\u6837\u4e00\u4e2a\u8bed\u53e5\u7528C\u8bed\u8a00\u3001\u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u5206\u522b\u8868\u793a\u5982\u4e0b\uff1a \u4e0a\u8868\u4e2d\u7684\u673a\u5668\u8bed\u8a00\u5b8c\u5168\u7531\u5341\u516d\u8fdb\u5236\u6570\u5b57\u7ec4\u6210\u3002 \u6700\u65e9\u7684\u7a0b\u5e8f\u5458\u90fd\u662f\u76f4\u63a5\u7528\u673a\u5668\u8bed\u8a00\u7f16\u7a0b\uff0c\u8fd9\u5f88\u9ebb\u70e6\uff0c\u9700\u8981\u67e5\u5927\u91cf\u7684\u8868\u683c\u6765\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u8868\u793a\u4ec0\u4e48\u610f\u601d\uff0c\u7f16\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u5f88\u4e0d\u76f4\u89c2\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u4e8e\u662f\u6709\u4e86\u6c47\u7f16\u8bed\u8a00\u3002 \u6c47\u7f16\u8bed\u8a00 \u628a\u673a\u5668\u8bed\u8a00\u4e2d\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u5b57\u7528\u52a9\u8bb0\u7b26\uff08Mnemonic\uff09\u8868\u793a\uff0c\u76f4\u63a5\u7528\u8fd9\u4e9b\u52a9\u8bb0\u7b26\u5199\u51fa\u6c47\u7f16\u7a0b\u5e8f\uff0c\u7136\u540e\u8ba9\u6c47\u7f16\u5668\uff08Assembler\uff09\u53bb\u67e5\u8868\u628a\u52a9\u8bb0\u7b26\u66ff\u6362\u6210\u6570\u5b57\uff0c\u4e5f\u5c31\u628a\u6c47\u7f16\u8bed\u8a00\u7ffb\u8bd1\u6210\u4e86\u673a\u5668\u8bed\u8a00\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0c \u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u7684\u6307\u4ee4\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6c47\u7f16\u8bed\u8a00\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u673a\u5668\u8bed\u8a00\u4e5f\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u6c47\u7f16\u5668\u5c31\u662f\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u66ff\u6362\u5de5\u4f5c \uff0c\u4f8b\u5982\u5728\u7b2c\u4e00\u6761\u6307\u4ee4\u4e2d\uff0c\u628a movl ?,%eax \u8fd9\u79cd\u683c\u5f0f\u7684\u6307\u4ee4\u66ff\u6362\u6210\u673a\u5668\u7801 a1 ? \uff0c?\u8868\u793a\u4e00\u4e2a\u5730\u5740\uff0c\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u662f 0x804a01c \uff0c\u8f6c\u6362\u6210\u673a\u5668\u7801\u4e4b\u540e\u662f 1c a0 04 08 \uff08\u8fd9\u662f\u6307\u4ee4\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u6570\u7684\u5c0f\u7aef\u8868\u793a\uff09\u3002 \u6c47\u7f16\u8bed\u548c\u673a\u5668\u6307\u4ee4\u4e00\u4e00\u5bf9\u5e94\uff0c\u53ef\u80fd\u53ea\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u8bf4\u6cd5\uff0c\u5728\u67d0\u4e9b\u6c47\u7f16\u89c4\u8303\u4e2d\uff0c\u53ef\u80fd\u4e24\u8005\u53ef\u80fd\u5e76\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u8fd8\u53ef\u4ee5\u770b\u51fa\uff0c \u9ad8\u7ea7\u8bed\u8a00\u7684\u8bed\u53e5\u548c\u4f4e\u7ea7\u8bed\u8a00\u7684\u6307\u4ee4\u4e4b\u95f4\u4e0d\u662f\u7b80\u5355\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c \u4e00\u6761 a=b+1; \u8bed\u53e5\u8981\u7ffb\u8bd1\u6210\u4e09\u6761\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u7f16\u8bd1\uff08Compile\uff09 \uff0c\u7531\u7f16\u8bd1\u5668\uff08Compiler\uff09\u6765\u5b8c\u6210\uff0c\u663e\u7136\u7f16\u8bd1\u5668\u7684\u529f\u80fd\u6bd4\u6c47\u7f16\u5668\u8981\u590d\u6742\u5f97\u591a\u3002\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u5fc5\u987b\u7ecf\u8fc7\u7f16\u8bd1\u8f6c\u6210\u673a\u5668\u6307\u4ee4\u624d\u80fd\u88ab\u8ba1\u7b97\u673a\u6267\u884c\uff0c\u7f16\u8bd1\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\uff0c\u8fd9\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u7684\u4e00\u4e2a\u7f3a\u70b9\uff0c\u7136\u800c\u66f4\u591a\u7684\u662f\u4f18\u70b9\u3002\u9996\u5148\uff0c\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u66f4\u5bb9\u6613\uff0c\u5199\u51fa\u6765\u7684\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u51fa\u4e86\u9519\u4e5f\u66f4\u5bb9\u6613\u6539\u6b63\u3002\u5176\u6b21\uff0c \u9ad8\u7ea7\u8bed\u8a00\u662f\u53ef\u79fb\u690d\u7684\uff08Portable\uff09\u6216\u8005\u79f0\u4e3a\u5e73\u53f0\u65e0\u5173\u7684\uff08Platform Independent\uff09\u3002 \u6b63\u56e0\u4e3a\u9ad8\u7ea7\u8bed\u8a00\u548c\u5177\u4f53\u7684\u673a\u5668\u6307\u4ee4\u4e0d\u5b58\u5728\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u800c\u662f\u548c\u5b9e\u73b0\u4e0d\u540c\u529f\u80fd\u7684\u673a\u5668\u6307\u4ee4\u96c6\u5408\u4e00\u4e00\u5bf9\u5e94\uff0c\u6240\u4ee5\u9ad8\u7ea7\u8bed\u8a00\u53ef\u4ee5\u5b9e\u73b0\u53ef\u79fb\u690d\u6027\u3002 \u5e73\u53f0 \u8fd9\u4e2a\u8bcd\u6709\u5f88\u591a\u79cd\u89e3\u91ca\uff0c\u53ef\u4ee5\u6307\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff08Architecture\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u64cd\u4f5c\u7cfb\u7edf\uff08Operating System\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u5f00\u53d1\u5e73\u53f0\uff08\u7f16\u8bd1\u5668\u3001\u94fe\u63a5\u5668\u7b49\uff09\u3002 \u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6709\u4e0d\u540c\u7684\u6307\u4ee4\u96c6\uff08Instruction Set\uff09\uff0c\u53ef\u4ee5\u8bc6\u522b\u7684\u673a\u5668\u6307\u4ee4\u683c\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u76f4\u63a5\u7528\u67d0\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u53ea\u80fd\u5728\u8fd9\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u3002 \u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784 \u4e5f\u79f0\u4e3a \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u3002 \u7136\u800c \u5404\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u90fd\u6709\u5404\u81ea\u7684C\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u628aC\u7a0b\u5e8f\u7f16\u8bd1\u6210\u5404\u79cd\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7684\u673a\u5668\u6307\u4ee4 \uff0c\u8fd9\u610f\u5473\u7740\u7528C\u8bed\u8a00\u5199\u7684\u7a0b\u5e8f\u53ea\u9700\u7a0d\u52a0\u4fee\u6539\u751a\u81f3\u4e0d\u7528\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u7f16\u8bd1\u8fd0\u884c\u3002\u5404\u79cd\u9ad8\u7ea7\u8bed\u8a00\u90fd\u5177\u6709C\u8bed\u8a00\u7684\u8fd9\u4e9b\u4f18\u70b9\uff0c\u6240\u4ee5\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u53ea\u6709\u548c\u786c\u4ef6\u5173\u7cfb\u5bc6\u5207\u7684\u5c11\u6570\u7a0b\u5e8f\uff08\u4f8b\u5982\u9a71\u52a8\u7a0b\u5e8f\uff09\u624d\u4f1a\u7528\u5230\u4f4e\u7ea7\u8bed\u8a00\u3002\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5373\u4f7f\u5728\u76f8\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e0b\uff0c\u7528\u4e0d\u540c\u7684C\u7f16\u8bd1\u5668\uff08\u6216\u8005\u540c\u4e00\u4e2aC\u7f16\u8bd1\u5668\u7684\u4e0d\u540c\u7248\u672c\uff09\u7f16\u8bd1\u540c\u4e00\u4e2a\u7a0b\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u6709\u53ef\u80fd\u4e0d\u540c\uff0cC\u8bed\u8a00\u6709\u4e9b\u8bed\u6cd5\u7279\u6027\u5728C\u6807\u51c6\u4e2d\u5e76\u6ca1\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5404\u7f16\u8bd1\u5668\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u7f16\u8bd1\u51fa\u6765\u7684\u6307\u4ee4\u7684\u884c\u4e3a\u7279\u6027\u4e5f\u4f1a\u4e0d\u540c\uff0c\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u4e0d\u53ef\u79fb\u690d\u7684\u8bed\u6cd5\u7279\u6027\u3002 \u603b\u7ed3\u4e00\u4e0b\u7f16\u8bd1\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u4f60\u7528\u6587\u672c\u7f16\u8f91\u5668\u5199\u4e00\u4e2aC\u7a0b\u5e8f\uff0c\u7136\u540e\u4fdd\u5b58\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982 program.c \uff08\u901a\u5e38C\u7a0b\u5e8f\u7684\u6587\u4ef6\u540d\u540e\u7f00\u662f .c \uff09\uff0c\u8fd9\u79f0\u4e3a\u6e90\u4ee3\u7801\uff08Source Code\uff09\u6216\u6e90\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u7f16\u8bd1\u5668\u5bf9\u5b83\u8fdb\u884c\u7f16\u8bd1\uff0c\u7f16\u8bd1\u7684\u8fc7\u7a0b\u5e76\u4e0d\u6267\u884c\u7a0b\u5e8f\uff0c\u800c\u662f\u628a\u6e90\u4ee3\u7801\u5168\u90e8\u7ffb\u8bd1\u6210\u673a\u5668\u6307\u4ee4\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u63cf\u8ff0\u4fe1\u606f\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\uff0c\u4f8b\u5982 a.out \uff0c\u8fd9\u79f0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4ee5\u88ab\u64cd\u4f5c\u7cfb\u7edf\u52a0\u8f7d\u8fd0\u884c\uff0c\u8ba1\u7b97\u673a\u6267\u884c\u8be5\u6587\u4ef6\u4e2d\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6307\u4ee4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6709\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4ee5\u89e3\u91ca\uff08Interpret\uff09\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u89e3\u91ca\u6267\u884c\u8fc7\u7a0b\u548cC\u8bed\u8a00\u7684\u7f16\u8bd1\u6267\u884c\u8fc7\u7a0b\u5f88\u4e0d\u4e00\u6837\u3002\u4f8b\u5982\u7f16\u5199\u4e00\u4e2aShell\u811a\u672c script.sh \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a #! /bin/sh VAR = 1 VAR = $(( $VAR + 1 )) echo $VAR \u5b9a\u4e49Shell\u53d8\u91cf VAR \u7684\u521d\u59cb\u503c\u662f1\uff0c\u7136\u540e\u81ea\u589e1\uff0c\u7136\u540e\u6253\u5370 VAR \u7684\u503c\u3002\u7528Shell\u7a0b\u5e8f /bin/sh \u89e3\u91ca\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a $ / bin / sh script . sh 2 \u8fd9\u91cc\u7684 /bin/sh \u79f0\u4e3a\u89e3\u91ca\u5668\uff08Interpreter\uff09\uff0c\u5b83\u628a\u811a\u672c\u4e2d\u7684\u6bcf\u4e00\u884c\u5f53\u4f5c\u4e00\u6761\u547d\u4ee4\u89e3\u91ca\u6267\u884c\uff0c\u800c\u4e0d\u9700\u8981\u5148\u751f\u6210\u5305\u542b\u673a\u5668\u6307\u4ee4\u7684\u53ef\u6267\u884c\u6587\u4ef6\u518d\u6267\u884c\u3002\u5982\u679c\u628a\u811a\u672c\u4e2d\u7684\u8fd9\u4e09\u884c\u5f53\u4f5c\u4e09\u6761\u547d\u4ee4\u76f4\u63a5\u6572\u5230Shell\u63d0\u793a\u7b26\u4e0b\uff0c\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\uff1a $ VAR = 1 $ VAR = $ (( $ VAR + 1 )) $ echo $ VAR 2 \u7f16\u7a0b\u8bed\u8a00\u4ecd\u5728\u53d1\u5c55\u6f14\u5316\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u673a\u5668\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e00\u4ee3\u8bed\u8a00\uff081GL\uff0c1 st Generation Programming Language\uff09\uff0c\u6c47\u7f16\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e8c\u4ee3\u8bed\u8a00\uff082GL\uff0c2 nd Generation Programming Language\uff09\uff0cC\u3001C++\u3001Java\u3001Python\u7b49\u53ef\u4ee5\u79f0\u4e3a\u7b2c\u4e09\u4ee3\u8bed\u8a00\uff083GL\uff0c3 rd Generation Programming Language\uff09\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e864GL\uff084 th Generation Programming Language\uff09\u548c5GL\uff085 th Generation Programming Language\uff09\u7684\u6982\u5ff5\u30023GL\u7684\u7f16\u7a0b\u8bed\u8a00\u867d\u7136\u662f\u7528\u8bed\u53e5\u7f16\u7a0b\u800c\u4e0d\u76f4\u63a5\u7528\u6307\u4ee4\u7f16\u7a0b\uff0c\u4f46\u8bed\u53e5\u4e5f\u5206\u4e3a\u8f93\u5165\u3001\u8f93\u51fa\u3001\u57fa\u672c\u8fd0\u7b97\u3001\u6d4b\u8bd5\u5206\u652f\u548c\u5faa\u73af\u7b49\u51e0\u79cd\uff0c\u548c\u6307\u4ee4\u6709\u76f4\u63a5\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u800c4GL\u4ee5\u540e\u7684\u7f16\u7a0b\u8bed\u8a00\u66f4\u591a\u662f\u63cf\u8ff0\u8981\u505a\u4ec0\u4e48\uff08Declarative\uff09\u800c\u4e0d\u63cf\u8ff0\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\uff08Imperative\uff09\uff0c\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\u5b8c\u5168\u7531\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\u51b3\u5b9a\uff0c\u4f8b\u5982SQL\u8bed\u8a00\uff08SQL\uff0cStructured Query Language\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u5c31\u662f\u8fd9\u6837\u7684\u4f8b\u5b50\u3002","title":"\u7a0b\u5e8f\u548c\u7f16\u7a0b\u8bed\u8a00"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_2","text":"\u7f16\u7a0b\u662f\u4e00\u4ef6\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u662f\u4eba\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u96be\u514d\u7ecf\u5e38\u51fa\u9519\u3002\u636e\u8bf4\u6709\u8fd9\u6837\u4e00\u4e2a\u5178\u6545\uff1a\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u4f53\u79ef\u90fd\u5f88\u5927\uff0c\u6709\u4e00\u6b21\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5de5\u7a0b\u5e08\u4eec\u627e\u4e86\u534a\u5929\u539f\u56e0\u6700\u540e\u53d1\u73b0\u662f\u4e00\u53ea\u81ed\u866b\u94bb\u8fdb\u8ba1\u7b97\u673a\u4e2d\u9020\u6210\u7684\u3002\u4ece\u6b64\u4ee5\u540e\uff0c\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u88ab\u53eb\u505a\u81ed\u866b\uff08Bug\uff09\uff0c\u800c\u627e\u5230\u8fd9\u4e9bBug\u5e76\u52a0\u4ee5\u7ea0\u6b63\u7684\u8fc7\u7a0b\u5c31\u53eb\u505a\u8c03\u8bd5\uff08Debug\uff09\u3002\u6709\u65f6\u5019\u8c03\u8bd5\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u8981\u6c42\u7a0b\u5e8f\u5458\u6982\u5ff5\u660e\u786e\u3001\u903b\u8f91\u6e05\u6670\u3001\u6027\u683c\u6c89\u7a33\uff0c\u8fd8\u9700\u8981\u4e00\u70b9\u8fd0\u6c14\u3002\u7a0b\u5e8f\u7684 Bug \u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a \u7f16\u8bd1\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u53ea\u80fd\u7ffb\u8bd1\u8bed\u6cd5\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\uff0c\u65e0\u6cd5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5bf9\u4e8e\u81ea\u7136\u8bed\u8a00\u6765\u8bf4\uff0c\u4e00\u70b9\u8bed\u6cd5\u9519\u8bef\u4e0d\u662f\u5f88\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8bfb\u61c2\u53e5\u5b50\u3002\u800c\u7f16\u8bd1\u5668\u5c31\u6ca1\u90a3\u4e48\u5bbd\u5bb9\u4e86\uff0c\u53ea\u8981\u6709\u54ea\u6015\u4e00\u4e2a\u5f88\u5c0f\u7684\u8bed\u6cd5\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u6761\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u7136\u540e\u7f62\u5de5\uff0c\u4f60\u5c31\u5f97\u4e0d\u5230\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u867d\u7136\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5c31\u662f\u4f60\u51fa\u9519\u7684\u4ee3\u7801\u884c\uff0c\u4f46\u4e5f\u6709\u4e2a\u522b\u65f6\u5019\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5e2e\u52a9\u4e0d\u5927\uff0c\u751a\u81f3\u4f1a\u8bef\u5bfc\u4f60\u3002\u5728\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u7684\u524d\u51e0\u4e2a\u661f\u671f\uff0c\u4f60\u53ef\u80fd\u4f1a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u6765\u7ea0\u6b63\u8bed\u6cd5\u9519\u8bef\u3002\u7b49\u5230\u6709\u4e86\u4e00\u4e9b\u7ecf\u9a8c\u4e4b\u540e\uff0c\u8fd8\u662f\u4f1a\u72af\u8fd9\u6837\u7684\u9519\u8bef\uff0c\u4e0d\u8fc7\u4f1a\u5c11\u5f97\u591a\uff0c\u800c\u4e14\u4f60\u80fd\u66f4\u5feb\u5730\u53d1\u73b0\u9519\u8bef\u539f\u56e0\u3002\u7b49\u5230\u7ecf\u9a8c\u66f4\u4e30\u5bcc\u4e4b\u540e\u4f60\u5c31\u4f1a\u89c9\u5f97\uff0c\u8bed\u6cd5\u9519\u8bef\u662f\u6700\u7b80\u5355\u6700\u4f4e\u7ea7\u7684\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u7684\u9519\u8bef\u63d0\u793a\u4e5f\u5c31\u90a3\u4e48\u51e0\u79cd\uff0c\u5373\u4f7f\u9519\u8bef\u63d0\u793a\u662f\u6709\u8bef\u5bfc\u7684\u4e5f\u80fd\u591f\u7acb\u523b\u627e\u51fa\u771f\u6b63\u7684\u9519\u8bef\u539f\u56e0\u662f\u4ec0\u4e48\u3002\u76f8\u6bd4\u4e0b\u9762\u4e24\u79cd\u9519\u8bef\uff0c\u8bed\u6cd5\u9519\u8bef\u89e3\u51b3\u8d77\u6765\u8981\u5bb9\u6613\u5f97\u591a\u3002 \u8fd0\u884c\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u68c0\u67e5\u4e0d\u51fa\u8fd9\u7c7b\u9519\u8bef\uff0c\u4ecd\u7136\u53ef\u4ee5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u4f1a\u51fa\u9519\u800c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5b66\u4e60\u9759\u6001\u8bed\u8a00\u7684\u65f6\u5019\uff0c\u8981\u7279\u522b\u6ce8\u610f\u533a\u5206\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u6709\u4e9b\u4e8b\u60c5\u5728\u7f16\u8bd1\u65f6\u505a\uff0c\u6709\u4e9b\u4e8b\u60c5\u5219\u5728\u8fd0\u884c\u65f6\u505a\u3002 \u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef \u7b2c\u4e09\u7c7b\u9519\u8bef\u662f\u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef\u3002\u5982\u679c\u7a0b\u5e8f\u91cc\u6709\u903b\u8f91\u9519\u8bef\uff0c\u7f16\u8bd1\u548c\u8fd0\u884c\u90fd\u4f1a\u5f88\u987a\u5229\uff0c\u770b\u4e0a\u53bb\u4e5f\u4e0d\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u7a0b\u5e8f\u6ca1\u6709\u5e72\u5b83\u8be5\u5e72\u7684\u4e8b\u60c5\uff0c\u800c\u662f\u5e72\u4e86\u522b\u7684\u4e8b\u60c5\u3002\u5f53\u7136\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u8ba1\u7b97\u673a\u53ea\u4f1a\u6309\u4f60\u5199\u7684\u7a0b\u5e8f\u53bb\u505a\uff0c\u95ee\u9898\u5728\u4e8e\u4f60\u5199\u7684\u7a0b\u5e8f\u4e0d\u662f\u4f60\u771f\u6b63\u60f3\u8981\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u7684\u610f\u601d\uff08\u5373\u8bed\u4e49\uff09\u662f\u9519\u7684\u3002\u627e\u5230\u903b\u8f91\u9519\u8bef\u5728\u54ea\u9700\u8981\u5341\u5206\u6e05\u9192\u7684\u5934\u8111\uff0c\u8981\u901a\u8fc7\u89c2\u5bdf\u7a0b\u5e8f\u7684\u8f93\u51fa\u56de\u8fc7\u5934\u6765\u5224\u65ad\u5b83\u5230\u5e95\u5728\u505a\u4ec0\u4e48\u3002 \u8c03\u8bd5\u7684\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5230\u4e00\u4e9b\u6cae\u4e27\uff0c\u4f46\u8c03\u8bd5\u4e5f\u662f\u7f16\u7a0b\u4e2d\u6700\u9700\u8981\u52a8\u8111\u7684\u3001\u6700\u6709\u6311\u6218\u548c\u4e50\u8da3\u7684\u90e8\u5206\u3002\u4ece\u67d0\u79cd\u89d2\u5ea6\u770b\u8c03\u8bd5\u5c31\u50cf\u4fa6\u63a2\u5de5\u4f5c\uff0c\u6839\u636e\u638c\u63e1\u7684\u7ebf\u7d22\u6765\u63a8\u65ad\u662f\u4ec0\u4e48\u539f\u56e0\u548c\u8fc7\u7a0b\u5bfc\u81f4\u4e86\u4f60\u6240\u770b\u5230\u7684\u7ed3\u679c\u3002\u8c03\u8bd5\u4e5f\u50cf\u662f\u4e00\u95e8\u5b9e\u9a8c\u79d1\u5b66\uff0c\u6bcf\u6b21\u60f3\u5230\u54ea\u91cc\u53ef\u80fd\u6709\u9519\uff0c\u5c31\u4fee\u6539\u7a0b\u5e8f\u7136\u540e\u518d\u8bd5\u4e00\u6b21\u3002\u5982\u679c\u5047\u8bbe\u662f\u5bf9\u7684\uff0c\u5c31\u80fd\u5f97\u5230\u9884\u671f\u7684\u6b63\u786e\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u63a5\u7740\u8c03\u8bd5\u4e0b\u4e00\u4e2aBug\uff0c\u4e00\u6b65\u4e00\u6b65\u903c\u8fd1\u6b63\u786e\u7684\u7a0b\u5e8f\uff1b\u5982\u679c\u5047\u8bbe\u9519\u8bef\uff0c\u53ea\u597d\u53e6\u5916\u518d\u627e\u601d\u8def\u518d\u505a\u5047\u8bbe\u3002\u5f53\u4f60\u628a\u4e0d\u53ef\u80fd\u7684\u5168\u90e8\u5254\u9664\uff0c\u5269\u4e0b\u7684\u5373\u4f7f\u770b\u8d77\u6765\u518d\u600e\u4e48\u4e0d\u53ef\u80fd\uff0c\u4f46\u4e00\u5b9a\u662f\u4e8b\u5b9e\u3002 \u4e5f\u6709\u4e00\u79cd\u89c2\u70b9\u8ba4\u4e3a\uff0c\u7f16\u7a0b\u548c\u8c03\u8bd5\u662f\u4e00\u56de\u4e8b\uff0c\u7f16\u7a0b\u7684\u8fc7\u7a0b\u5c31\u662f\u9010\u6b65\u8c03\u8bd5\u76f4\u5230\u83b7\u5f97\u671f\u671b\u7684\u7ed3\u679c\u4e3a\u6b62\u3002\u4f60\u5e94\u8be5\u603b\u662f\u4ece\u4e00\u4e2a\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u5c0f\u89c4\u6a21\u7a0b\u5e8f\u5f00\u59cb\uff0c\u6bcf\u505a\u4e00\u6b65\u5c0f\u7684\u6539\u52a8\u5c31\u7acb\u523b\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u603b\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u7a0b\u5e8f\u505a\u53c2\u8003\uff1a\u5982\u679c\u6b63\u786e\u5c31\u7ee7\u7eed\u7f16\u7a0b\uff0c\u5982\u679c\u4e0d\u6b63\u786e\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u521a\u624d\u7684\u5c0f\u6539\u52a8\u51fa\u4e86\u95ee\u9898\u3002\u4f8b\u5982\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u5305\u542b\u4e86\u6210\u5343\u4e0a\u4e07\u884c\u4ee3\u7801\uff0c\u4f46\u5b83\u4e5f\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u89c4\u5212\u597d\u4e86\u5185\u5b58\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u7b49\u7b49\u5927\u7684\u6a21\u5757\uff0c\u4e00\u5f00\u59cb\u5b83\u4ec5\u4ec5\u662fLinus Torvalds\u7528\u6765\u7422\u78e8Intel 80386\u82af\u7247\u800c\u5199\u7684\u5c0f\u7a0b\u5e8f\u3002\u636eLarry Greenfield \u8bf4\uff0c\u201cLinus\u7684\u65e9\u671f\u5de5\u7a0b\u4e4b\u4e00\u662f\u7f16\u5199\u4e00\u4e2a\u4ea4\u66ff\u6253\u5370AAAA\u548cBBBB\u7684\u7a0b\u5e8f\uff0c\u8fd9\u73a9\u610f\u513f\u540e\u6765\u8fdb\u5316\u6210\u4e86Linux\u3002\u201d\uff08\u5f15\u81eaThe Linux User's Guide Beta1\u7248\uff09","title":"\u7a0b\u5e8f\u7684\u8c03\u8bd5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_3","text":"\u9759\u6001\u7c7b\u578b\u3001\u52a8\u6001\u7c7b\u578b\u548c\u5f3a\u7c7b\u578b\u3001\u5f31\u7c7b\u578b\u662f\u4e24\u5bf9\u76f8\u5bf9\u7684\u6982\u5ff5\u3002\u5b83\u4eec\u5728\u7f16\u7a0b\u7684\u8bdd\u9898\u4e2d\u7ecf\u5e38\u88ab\u63d0\u5230\uff0c\u4e5f\u662f\u5f88\u591a\u4e89\u8bba\u7684\u6765\u6e90\u3002\u5bf9\u5b83\u4eec\u53d1\u8868\u4e0d\u6070\u5f53\u7684\u8a00\u8bba\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u5f15\u8d77\u5723\u6218\u3002\u5b83\u4eec\u90fd\u4e0d\u662f\u5177\u6709\u4e25\u8c28\u5b9a\u4e49\u7684\u5b66\u672f\u540d\u8bcd\u3002\u5728\u4e0a\u4e16\u7eaa70\u5e74\u4ee3\uff0c\u9759\u6001\u7c7b\u578b\u3001\u52a8\u6001\u7c7b\u578b\u4e00\u5f00\u59cb\u7684\u8bf4\u6cd5\u662f\u5f3a\u7c7b\u578b\u548c\u5f31\u7c7b\u578b\u3002\u540e\u6765\uff0c\u5f3a\u3001\u5f31\u7c7b\u578b\u7684\u539f\u59cb\u542b\u4e49\u88ab\u9759\u3001\u52a8\u6001\u7c7b\u578b\u6240\u6307\u4ee3\uff0c\u4e8e\u662f\u5f3a\u3001\u5f31\u7c7b\u578b\u53c8\u6709\u4e86\u66f4\u591a\u7684\u542b\u4e49\u3002\u73b0\u5728\uff0c\u5f3a\u7c7b\u578b\uff08 strong type \uff09\u53ef\u80fd\u66f4\u591a\u60c5\u51b5\u662f\u610f\u5473\u7740\uff1a\u4e00\u4e2a\u8bed\u8a00\u662f\u5f3a\u5065\u7684\u3001\u5065\u5168\u7684\uff08The language is sound\uff09\u3002 \u5b9e\u9645\u4e0a\uff0c\u9759\u3001\u52a8\u6001\u7c7b\u578b\u662f\u4e0d\u592a\u6070\u5f53\u7684\u8bf4\u6cd5\uff0c\u800c\u5f3a\u3001\u5f31\u7c7b\u578b\u7684\u8bf4\u6cd5\u66f4\u662f\u83ab\u540d\u5176\u5999\u3002\u8fd9\u56db\u4e2a\u540d\u8bcd\u90fd\u4e0e\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u68c0\u67e5\u6709\u5173\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u4fd7\u5730\u89e3\u91ca\u5982\u4e0b\uff1a \u9759\u6001\u7c7b\u578b\uff1a\u7f16\u8bd1\u7684\u65f6\u5019\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5 \u52a8\u6001\u7c7b\u578b\uff1a\u8fd0\u884c\u65f6\u624d\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5 \u5f3a\u7c7b\u578b\uff1a\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5\u65f6\u53ef\u4ee5\u62d2\u7edd\u6240\u6709\uff08\u5927\u90e8\u5206\uff09\u4e0d\u5b89\u5168\u884c\u4e3a \u5f31\u7c7b\u578b\uff1a\u8fdb\u884c\u5b89\u5168\u6027\u68c0\u67e5\u65f6\u4e0d\u4f1a\u62d2\u7edd\u90e8\u5206\u4e0d\u5b89\u5168\u884c\u4e3a \u5bf9\u4e8e\u57fa\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684\u8bed\u8a00\uff0c\u5b89\u5168\u6027\u68c0\u67e5\u5927\u90e8\u5206\u90fd\u662f\u7c7b\u578b\u68c0\u67e5\uff08Type Check\uff09\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u56db\u4e2a\u540d\u8bcd\u548c\u201c\u7c7b\u578b\u201d\u6ca1\u6709\u76f4\u63a5\u7684\u5173\u7cfb\uff0c\u5b83\u4eec\u90fd\u662f\u7f16\u8bd1\u5668\u7684\u884c\u4e3a\u3002 \u5b83\u4eec\u66f4\u51c6\u786e\u7684\u8bf4\u6cd5\u5e94\u8be5\u662f\uff1a\u9759\u6001\u68c0\u67e5\u3001\u52a8\u6001\u68c0\u67e5\u3001\u5f3a\u68c0\u67e5\u3001\u5f31\u68c0\u67e5\u3002 \u9759\u6001\u68c0\u67e5\u548c\u52a8\u6001\u68c0\u67e5\u7684\u533a\u522b\u5728\u4e8e\u5b89\u5168\u6027\u68c0\u67e5\uff08\u7c7b\u578b\u68c0\u67e5\uff09\u53d1\u751f\u7684\u65f6\u673a\u4e0d\u540c\uff0c\u800c\u5f3a\u68c0\u67e5\u548c\u5f31\u68c0\u67e5\u7684\u533a\u522b\u5728\u4e8e\u5b89\u5168\u6027\u68c0\u67e5\u7a0b\u5ea6\u7684\u5f3a\u5f31\uff0c\u81f3\u4e8e\u5f3a\u5f31\u7684\u8fb9\u754c\u5728\u54ea\u91cc\uff0c\u5e76\u6ca1\u6709\u660e\u786e\u3001\u7edf\u4e00\u7684\u5b9a\u4e49\u3002\u6b63\u5982\u4e0a\u9762\u63d0\u5230\u7684\uff0c\u8fd9\u56db\u4e2a\u540d\u8bcd\u7684\u542b\u4e49\u5b58\u5728\u5f88\u591a\u4e89\u8bae\uff0c\u4e0d\u540c\u7684\u4eba\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u770b\u6cd5\u3002 \u5bf9\u4e8e\u9759\u3001\u52a8\u6001\u7c7b\u578b\u7684\u533a\u5206\uff0c\u81f3\u5c11\u5b58\u5728\u4ee5\u4e0b\u89c2\u70b9\uff1a \u80fd\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u80fd\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6269\u5c55\u4e00\u4e2a\u7c7b\u578b \u5bf9\u4e8e\u5f3a\u3001\u5f31\u6001\u7c7b\u578b\u7684\u533a\u5206\uff0c\u81f3\u5c11\u5b58\u5728\u4ee5\u4e0b\u89c2\u70b9\uff1a \u80fd\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u4f8b\u5982\uff0cC \u8bed\u8a00\u4e4b\u7236 Dennis Ritchie \u66fe\u7ecf\u8bf4 C \u8bed\u8a00\u662f\u4e00\u79cd \u201c\u5f3a\u7c7b\u578b\u4f46\u662f\u5f31\u68c0\u67e5\u201d \u7684\u8bed\u8a00\uff0c\u56e0\u4e3a\u90a3\u65f6\u5019\u8fd8\u6ca1\u6709\u9759\u3001\u52a8\u6001\u7c7b\u578b\u548c\u5f3a\u3001\u5f31\u7c7b\u578b\u4e4b\u5206\u3002 \u662f\u5426\u5bf9\u53d8\u91cf\u7c7b\u578b\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\uff08\u9690\u5f0f\u8f6c\u6362\u53ef\u80fd\u5bfc\u81f4\u5b89\u5168\u6027\u95ee\u9898\uff09 \u5f3a\u3001\u5f31\u7c7b\u578b\u6982\u5ff5\u7684\u51fa\u73b0\u662f\u4e3a\u4e86\u5bf9\u7f16\u7a0b\u8bed\u8a00\u8fdb\u884c\u533a\u5206\uff0c\u4f46\u5b83\u4eec\u7684\u542b\u4e49\u8fc7\u4e8e\u5355\u4e00\u4ee5\u53ca\u8868\u9762\u5316\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u7684\u5dee\u5f02\u4f53\u73b0\u5728\u591a\u4e2a\u7ef4\u5ea6\u4e0a\uff0c\u56e0\u6b64\u6709\u4eba\u63d0\u51fa\u4e86\u201ctype safety\u201d\u3001\u201cmemory safety\u201d\u7b49\u533a\u5206\u7ef4\u5ea6\uff0c\u4e5f\u51fa\u73b0\u4e86\u4e0e\u5f3a\u5f31\u7c7b\u578b\u5b58\u5728\u4ea4\u96c6\u7684\u9759\u3001\u52a8\u6001\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u56db\u4e2a\u540d\u8bcd\u5bf9\u7406\u89e3\u7f16\u7a0b\u8bed\u8a00\u7684\u672c\u8d28\u5e76\u6ca1\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3a\u4e89\u8bba\u4e00\u4e9b\u4e1c\u897f\u53eb\u4ec0\u4e48\u540d\u5b57\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u53ea\u8981\u4eba\u4eec\u613f\u610f\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u7ed9\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5206\u7c7b\u4e3adogshit typed language\u3002\u56e0\u6b64\u4e4b\u540e\u7684\u6587\u7ae0\u4e0d\u4f1a\u4e13\u95e8\u4f7f\u7528\u8fd9\u56db\u4e2a\u540d\u8bcd\uff0c\u5373\u4f7f\u6709\u63d0\u5230\uff0c\u4e5f\u4f1a\u7528\u9759\u52a8\u6001\u68c0\u67e5\u3001\u5f3a\u5f31\u68c0\u67e5\u66ff\u4ee3\uff0c\u4ee5\u907f\u514d\u6b67\u4e49\u548c\u5723\u6218\u3002 \u5173\u4e8e\u8fd9\u56db\u4e2a\u6982\u5ff5\u66f4\u591a\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003 \u300aType Systems\u300b \u8bba\u6587 (Luca Cardelli [Microsoft Research], 2004)\u3002\u8fd9\u7bc7\u8bba\u6587\u7814\u7a76\u4e86\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u4ee5\u4e0b\u7684\u8bba\u8ff0\u5f15\u7528\u81ea\u8be5\u8bba\u6587\uff0c\u5bf9\u8fd9\u56db\u4e2a\u540d\u8bcd\u4f5c\u4e86\u8f83\u4e3a\u4e25\u8c28\u7684\u5b9a\u4e49\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684\u6267\u884c\u9519\u8bef (execution errors) \u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e24\u79cd\uff1a trapped errors \uff08\u88ab\u6355\u83b7\u7684\u9519\u8bef\uff09: \u5bfc\u81f4\u7a0b\u5e8f\u7acb\u5373\u7ec8\u6b62\u6267\u884c\u7684\u9519\u8bef\u3002 untrapped errors \uff08\u672a\u88ab\u6355\u83b7\u7684\u9519\u8bef\uff09: \u51fa\u9519\u540e\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u80fd\u5bfc\u81f4\u610f\u5916\u7684\u884c\u4e3a\uff08\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\uff09\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u53ef\u4ee5\u5c06execution errors\u7684\u67d0\u4e2a\u5b50\u96c6\u5b9a\u4e49\u4e3a forbidden errors\u3002 \u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4e0d\u4f1a\u51fa\u73b0untrapped errors\uff0c\u79f0\u4e3a\u5b89\u5168\u7684 (safe)\u3002\u4e00\u4e2a\u8bed\u8a00\u7684\u6240\u6709\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u51fa\u73b0untrapped errors\uff0c\u5219\u79f0\u4e3a\u5b89\u5168\u7684\u8bed\u8a00 ( safe language )\u3002 forbidden errors \uff1a\u5305\u62ec\u6240\u6709untrapped errors\u4ee5\u53catrapped errors\u7684\u67d0\u4e2a\u5b50\u96c6\u3002 \u6ce8\u610f\uff1a\u7a7a\u96c6\u662f\u4efb\u610f\u96c6\u5408\u7684\u5b50\u96c6\u3002 \u5982\u679c\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55forbidden errors\uff0c\u5219\u79f0\u4e3a good behavior \uff0c\u5426\u5219\u79f0\u4e3a bad behavior \u3002 \u5982\u679c\u4e00\u4e2a\u8bed\u8a00\u7684\u6240\u6709\u7a0b\u5e8f\u90fd\u662f good behavior \u7684\uff0c\u5219\u79f0\u8be5\u8bed\u8a00\u4e3a strongly checked language \uff0c\u5426\u5219\u4e3a weakly checked language \u3002 \u5728\u7f16\u8bd1\u65f6\u62d2\u7edd bad behavior \u7684\u8bed\u8a00\u79f0\u4e3a statically checked language \u3002 \u5982\u679c\u5728\u8fd0\u884c\u65f6\u62d2\u7edd bad behavior \u7684\u8bed\u8a00\u79f0\u4e3a dynamically checked language \u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8bf4\u62d2\u7edd bad behavior \u662f\u6307\u5b58\u5728\u62d2\u7edd bad behavior \u7684\u884c\u4e3a\uff0c\u4f46\u4e0d\u4e00\u5b9a\u80fd\u62d2\u7edd\u5168\u90e8\u7684 bad behavior\u3002 \u5982\u679c\u662f\u57fa\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684\u8bed\u8a00\uff0cstatic checking \u6216 dynamic checking \u5927\u90e8\u5206\u90fd\u662f\u7c7b\u578b\u68c0\u67e5\uff0c\u56e0\u4e3a\u7c7b\u578b\u7cfb\u7edf\u672c\u8eab\u5c31\u5177\u6709\u4fdd\u969c\u5b89\u5168\u6027\u7684\u529f\u80fd\u3002 \u51fa\u4e8e\u6027\u80fd\u7684\u8003\u8651\uff0c\u6709\u4e9b\u8bed\u8a00\u672c\u8eab\u5c31\u88ab\u8bbe\u8ba1\u4e3a\u4e0d\u5b89\u5168\u7684\uff0c\u4f8b\u5982C\u8bed\u8a00\u3002\u5728\u8fd0\u884c\u65f6\u4e3a\u4e86\u786e\u4fdd\u5b89\u5168\u6027\u800c\u8fdb\u884c\u68c0\u67e5\uff0c\u5176\uff08\u6027\u80fd\uff09\u4ee3\u4ef7\u662f\u6602\u8d35\u7684\u3002\u5373\u4f7f\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u5927\u91cf\u7684\u9759\u6001\u68c0\u67e5\uff0c\u5b9e\u73b0\u5b89\u5168\u6027\u4e5f\u9700\u8981\u4ed8\u51fa\u4e00\u4e9b\u4ee3\u4ef7\uff0c\u4f8b\u5982\u901a\u5e38\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u5b8c\u5168\u6d88\u9664\u6570\u7ec4\u7d22\u5f15\u51fa\u754c\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4e00\u4e9b\u8bed\u8a00\u53ef\u80fd\u4f1a\u540c\u65f6\u4f7f\u7528\u9759\u6001\u68c0\u67e5\u548c\u52a8\u6001\u68c0\u67e5\u3002\u8fd9\u4e9b\u8bed\u8a00\u53ef\u80fd\u4ecd\u7136\u88ab\u79f0\u4e3a\u9759\u6001\u68c0\u67e5\u8bed\u8a00\uff0c\u90e8\u5206\u539f\u56e0\u662f\u5b83\u4eec\u7684\u52a8\u6001\u68c0\u67e5\u662f\u57fa\u4e8e\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\u7684\uff0c\u5373\u52a8\u6001\u68c0\u67e5\u7684\u7b97\u6cd5\u548c\u9759\u6001\u68c0\u67e5\u7684\u7b97\u6cd5\u517c\u5bb9\u3002","title":"\u9759\u6001\u7c7b\u578b\u548c\u5f3a\u7c7b\u578b"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_4","text":"\u53d8\u91cf\uff08Variable\uff09\u662f\u7f16\u7a0b\u8bed\u8a00\u6700\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\u3002 \u53d8\u91cf\u662f\u8ba1\u7b97\u673a\u4e2d\u4e00\u5757\u547d\u540d\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\u7531\u53d8\u91cf\u7684\u7c7b\u578b\u51b3\u5b9a\u3002 \u8be5\u5185\u5b58\u7a7a\u95f4\u7528\u4e8e\u5b58\u50a8\u4e00\u4e2a\u503c\uff08Value\uff09\uff0c\u50a8\u5b58\u7684\u503c\u662f\u53ef\u4ee5\u968f\u65f6\u6539\u53d8\u7684\uff0c\u6bd4\u5982\u8fd9\u6b21\u5b58\u50a8\u5b57\u7b26 'a' \uff0c\u4e0b\u6b21\u5b58\u50a8\u5b57\u7b26 'b' \uff0c\u4f46\u662f\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u662f\u4e0d\u53d8\u7684\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u53d8\u91cf\u3002 \u5728\u9759\u6001\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u4f46\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u5f80\u5f80\u662f\u4f1a\u6539\u53d8\u7684\u3002 \u6216\u8005\u8bf4\uff0c\u53d8\u91cf\u662f\u4e00\u79cd\u4f7f\u7528\u65b9\u4fbf\u7684\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u5f15\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u5730\u5740\uff0c\u5b9e\u9645\u4e0a\u53d8\u91cf\u662f\u5185\u5b58\u53ca\u5176\u5730\u5740\u7684\u62bd\u8c61\u3002\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u4e3a\u4e86\u64cd\u4f5c\u5185\u5b58\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u5185\u5b58\u5730\u5740\uff0c\u4f46\u5728\u9ad8\u7ea7\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u53ea\u9700\u8981\u5bf9\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u64cd\u4f5c\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5360\u4f4d\u7b26 \uff1a\u5148\u5360\u4f4f\u4e00\u4e2a\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff0c\u7b49\u5f85\u503c\u6dfb\u52a0\u5230\u8be5\u4f4d\u7f6e\u7684\u7b26\u53f7\u3002 \u53d8\u91cf\u62e5\u6709\u4e00\u4e2a\u6807\u8bc6\u7b26\uff08\u53d8\u91cf\u540d\uff09\u548c\u4e00\u4e2a\u503c\u3002\u8be5\u6807\u8bc6\u7b26\u4f1a\u88ab\u50a8\u5b58\u5728\u7b26\u53f7\u8868\uff08symbol table\uff09\u4e4b\u4e2d\u3002\u7b26\u53f7\u8868\u50a8\u5b58\u4e86\u53d8\u91cf\u7684\u53d8\u91cf\u540d\u3001\u53d8\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u3001\u53d8\u91cf\u503c\u7684\u7c7b\u578b\u3002 \u4e0d\u8981\u5f04\u6df7\u53d8\u91cf\u548c\u53d8\u91cf\u540d\uff0c\u53d8\u91cf\u540d\u662f\u6807\u8bc6\u7b26\u7684\u4e00\u79cd\u3002 \u53d8\u91cf\u7684\u884c\u4e3a\u4e00\u5171\u6709\u56db\u79cd\uff1a\u58f0\u660e\u3001\u5b9a\u4e49\u3001\u521d\u59cb\u5316\u3001\u8d4b\u503c\u3002 \u58f0\u660e \uff1a\u544a\u8bc9\u7f16\u8bd1\u5668/\u89e3\u6790\u5668\u6709\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9a\u4e49 \uff1a\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9e\u9645\u4e0a\uff0c\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u6709\u4e24\u79cd\uff1a \u5f15\u7528\u6027\u58f0\u660e\uff08defining declaration\uff09\uff1a\u4e0d\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 extern in a \u4e2d\u7684\u53d8\u91cf a \u5df2\u7ecf\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49\u3002 \u5b9a\u4e49\u6027\u58f0\u660e\uff08referencing declaration\uff09\uff1a\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 int a \u5728\u58f0\u660e\u65f6\u5c31\u5efa\u7acb\u4e86 a \u7684\u50a8\u5b58\u7a7a\u95f4\u3002 \u53ef\u89c1\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u5305\u542b\u4e86\u5b9a\u4e49\uff0c\u800c\u5e76\u975e\u6240\u6709\u7684\u58f0\u660e\u90fd\u662f\u5b9a\u4e49\u3002\u4e00\u822c\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5e38\u5e38\u8fd9\u6837\u53d9\u8ff0\uff0c\u628a\u5efa\u7acb\u7a7a\u95f4\u7684\u58f0\u660e\u79f0\u4e4b\u4e3a\"\u5b9a\u4e49\"\uff0c\u800c\u628a\u4e0d\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u79f0\u4e4b\u4e3a\"\u58f0\u660e\"\u3002 \u5b9a\u4e49\u548c\u58f0\u660e\u7684\u672c\u8d28\u533a\u522b\u5c31\u662f\uff1a\u5b9a\u4e49\u4f1a\u7ed9\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u58f0\u660e\u5219\u4e0d\u4f1a\u3002 \u521d\u59cb\u5316 \uff1a\u5728\u5b9a\u4e49\u53d8\u91cf\u4e4b\u540e\uff0c\u7cfb\u7edf\u4e3a\u53d8\u91cf\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5185\u5e76\u6ca1\u6709\u503c\uff0c\u6b64\u65f6\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4e3a\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u548c\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5bf9\u8fd9\u4e2a\u5185\u5b58\u7a7a\u95f4\u8fdb\u884c\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u4e00\u822c\u4f34\u968f\u7740\u5b9a\u4e49\u800c\u4ea7\u751f\u3002 \u521d\u59cb\u5316\u662f\u4ece\u65e0\u5230\u6709\u7684\u8fc7\u7a0b\u3002 \u5982\u679c\u53d8\u91cf\u7684\u5b9a\u4e49\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u90a3\u8fd9\u4e2a\u6700\u521d\u5206\u914d\u7684\u7a7a\u95f4\u7684\u503c\u53ef\u80fd\u662f\u968f\u673a\u7684\uff08\u5185\u5b58\u7a7a\u95f4\u4e0a\u539f\u6765\u5b58\u50a8\u7684\u503c\uff09\uff0c\u4e5f\u53ef\u80fd\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002\u8fd9\u53d6\u51b3\u4e8e\u5177\u4f53\u7f16\u7a0b\u8bed\u8a00\u7684\u7279\u6027\u3002\u4e0d\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u53d8\u91cf\u53ef\u80fd\u4f1a\u4e3a\u7a0b\u5e8f\u5e26\u6765\u4e0d\u5b89\u5168\u4e0e\u4e0d\u786e\u5b9a\u6027\u3002 \u8d4b\u503c \uff1a\u8d4b\u503c\u662f\u53d8\u91cf\u503c\u7684\u5237\u65b0\u64cd\u4f5c\u3002 \u8d4b\u503c\u662f\u4ece\u65e7\u5230\u65b0\u7684\u8fc7\u7a0b\u3002 \u5728\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u548c\u52a8\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u8868\u73b0\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u5728\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff08\u4f8b\u5982\uff1aC\u3001C++\uff09\uff0c\u53d8\u91cf\u867d\u7136\u53ef\u4ee5\u58f0\u660e\u591a\u6b21\uff0c\u4f46\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\uff0c\u56e0\u6b64\uff0c\u53d8\u91cf\u5728\u5b9a\u4e49\u540e\uff0c\u5176\u53d8\u91cf\u540d\u548c\u4e00\u4e2a\u7c7b\u578b\u6c38\u4e45\u7ed1\u5b9a\u3002\u8fd9\u6b63\u662f\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u7684\u5173\u952e\u7279\u6027\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53ef\u4ee5\u52a8\u6001\u5730\u548c\u4e0d\u540c\u7684\u7c7b\u578b\u7ed1\u5b9a\uff0c\u7c7b\u578b\u68c0\u67e5\u5c06\u53d8\u5f97\u5f88\u56f0\u96be\u3002\u56e0\u4e3a\u53d8\u91cf\u7684\u65b0\u503c\u548c\u65e7\u503c\u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u65b0\u65e7\u503c\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u5c0f\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\uff0c\u8d4b\u503c\u53ef\u4ee5\u8986\u76d6\u5185\u5b58\u7a7a\u95f4\u7684\u65e7\u503c\uff0c\u800c\u65e0\u987b\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4e5f\u4e0d\u4f1a\uff08\u65e0\u9700\uff09\u6539\u53d8\u7b26\u53f7\u8868\u4e2d\u5185\u5b58\u7a7a\u95f4\u5730\u5740\u548c\u53d8\u91cf\u540d\u7684\u6620\u5c04\u5173\u7cfb\u3002 \u6240\u4ee5\u5728\u9759\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff0c\u4eba\u4eec\u4e00\u822c\u8bf4\u53d8\u91cf\u662f\u6709\u7c7b\u578b\u7684\u3002 \u800c\u5728\u52a8\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff08\u4f8b\u5982Python\u3001Ruby\uff09\uff0c\u5bf9\u53d8\u91cf\u8d4b\u503c\u4e0d\u9700\u8981\u5148\u58f0\u660e\u7c7b\u578b\uff0c\u8d4b\u503c\u53ef\u4ee5\u5c06\u53d8\u91cf\u540d\u4e0e\u65b0\u7684\u7c7b\u578b\u7ed1\u5b9a\u3002\u8fd9\u662f\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u7684\u5173\u952e\u7279\u6027\u3002\u56e0\u4e3a\u53d8\u91cf\u7684\u65b0\u503c\u548c\u65e7\u503c\u7684\u7c7b\u578b\u4e0d\u4e00\u5b9a\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8d4b\u503c\u65f6\u9700\u8981\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\u50a8\u5b58\u65b0\u503c\uff0c\u540c\u65f6\u7b26\u53f7\u8868\u4e2d\u53d8\u91cf\u540d\u4e0e\u65e7\u503c\u5730\u5740\u7684\u6620\u5c04\u6539\u4e3a\u53d8\u91cf\u540d\u4e0e\u65b0\u503c\u5730\u5740\u7684\u6620\u5c04\u3002 \u6240\u4ee5\u5728\u52a8\u6001\u68c0\u67e5\u8bed\u8a00\u4e2d\uff0c\u4eba\u4eec\u4e00\u822c\u8bf4\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b\uff0c\u751a\u81f3\u8bf4\u6ca1\u6709\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u5728Python\u4e2d\uff0c\u6709\u4e9b\u4eba\u4f1a\u8ba4\u4e3aPython\u6ca1\u6709\u53d8\u91cf\uff0c\u53ea\u6709\u540d\u5b57\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5f88\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u9759\u6001\u8bed\u8a00\u6bd4\u52a8\u6001\u8bed\u8a00\u5148\u51fa\u73b0\uff0c\u5f88\u591a\u4eba\u4e00\u5f00\u59cb\u5b66\u4e60\u7684\u7f16\u7a0b\u8bed\u8a00\u4e5f\u662f\u9759\u6001\u8bed\u8a00\uff0c\u6240\u4ee5\u4ed6\u4eec\u8ba4\u4e3a\u4e00\u4e2a\u53d8\u91cf\u5e94\u8be5\u5177\u6709\u9759\u6001\u8bed\u8a00\u4e2d\u53d8\u91cf\u6240\u5177\u6709\u7684\u7279\u5f81\uff0c\u5426\u5219\u5c31\u4e0d\u80fd\u79f0\u4e3a\u53d8\u91cf\u3002 \u5728\u8ba1\u7b97\u673a\u9886\u57df\u4e2d\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u628a\u4e00\u4e2a\u6982\u5ff5\u4e0e\u5177\u4f53\u7684\u5b9e\u73b0\u7ed3\u5408\u8d77\u6765\uff0c\u8ba4\u4e3a\u8fd9\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0\u6240\u5177\u6709\u7684\u7279\u5f81\u662f\u8fd9\u4e2a\u6982\u5ff5\u672c\u8eab\u5e94\u6709\u7684\u7279\u5f81\u3002 \u5f62\u8c61\u6765\u8bf4\uff0c\u5bf9\u4e8e\u9759\u6001\u68c0\u67e5\u7684\u8bed\u8a00\uff0c\u53d8\u91cf\u5c31\u50cf\u4e00\u95f4\u623f\u5b50\uff0c\u53d8\u91cf\u540d\u76f8\u5f53\u4e8e\u623f\u5b50\u7684\u95e8\u724c\u53f7\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u95e8\u724c\u53f7\u6765\u627e\u5230\u5bf9\u5e94\u7684\u623f\u5b50\u3002\u8fd9\u4e2a\u623f\u5b50\u4eca\u5929\u91cc\u9762\u4f4f\u7740\u7c73\u5947\uff0c\u660e\u5929\u7c73\u5947\u642c\u8d70\u4e86\uff0c\u6362\u6210\u6770\u745e\u4f4f\u8fdb\u6765\uff0c\u56e0\u4e3a\u7c73\u5947\u548c\u6770\u745e\u90fd\u662fmouse\uff0c\u4e0d\u9700\u8981\u5bf9\u623f\u5b50\u8fdb\u884c\u6539\u9020\uff0c\u56e0\u6b64\u623f\u5b50\u7684\u4f4d\u7f6e\u3001\u7a7a\u95f4\u5927\u5c0f\u90fd\u662f\u6ca1\u6709\u6539\u53d8\u7684\u3002\u540e\u6765\uff0c\u6c64\u59c6\u4e5f\u60f3\u4f4f\u8fdb\u623f\u5b50\u91cc\u9762\uff0c\u4e8e\u662f\u628a\u6770\u745e\u8d76\u8dd1\u4e86\uff0c\u4f46\u662f\u6c64\u59c6\u53d1\u73b0\u8fd9\u4e2a\u623f\u5b50\u592a\u5c0f\u4e86\uff0c\u6839\u672c\u4f4f\u4e0d\u4e86\uff0c\u6c64\u59c6\u53ea\u597d\u5728\u522b\u7684\u5730\u65b9\u65b0\u5efa\u4e86\u4e00\u4e2a\u5927\u623f\u5b50\uff0c\u5e76\u8d34\u4e0a\u4e86\u6770\u745e\u623f\u5b50\u7684\u95e8\u724c\u53f7\u3002","title":"\u53d8\u91cf\u53ca\u5176\u884c\u4e3a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_5","text":"\u5f15\u7528\uff08reference \uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a \u8be5\u8d44\u6599 \u7684 \u6307\u9488 \u6216 \u5730\u5740 \u3002 \u6807\u8bc6\u7b26\uff08identifier\uff0c\u7f29\u5199\u4e3aID\uff09 \uff1a\u53c8\u79f0\u4e3a\u8bc6\u522b\u7801\uff0c\u662f\u4e00\u4e2a\u7528\u6765\u8bc6\u522b\u4e0d\u540c\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6807\u8bc6\u7b26\u5c31\u662f\u7a0b\u5e8f\u5458\u81ea\u5df1\u89c4\u5b9a\u7684\u5177\u6709\u7279\u5b9a\u542b\u4e49\u7684\u8bcd\uff0c\u6bd4\u5982\u51fd\u6570\u540d\u3001\u65b9\u6cd5\u540d\u3001\u7c7b\u540d\uff0c\u53d8\u91cf\u540d\u3001\u5e38\u91cf\u540d\u7b49\u3002 \u5bf9\u8c61\uff08object\uff09 \uff1a\u662f\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\uff0c\u5176\u4e2d\u50a8\u5b58\u7740\u503c\uff0c\u53ef\u80fd\u6709\u6807\u8bc6\u7b26\u6307\u5411\u8be5\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u3002\u53f0\u6e7e\u5c06\u5176\u8bd1\u4f5c\u7269\u4ef6\u3002\u5bf9\u8c61\u662f\u67d0\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5c06\u6570\u636e\u548c\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u878d\u4e3a\u4e00\u4f53\uff0c\u5f62\u6210\u5177\u6709\u9759\u6001\u4fe1\u606f\u548c\u52a8\u6001\u884c\u4e3a\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5177\u6709\u4e00\u4e2aID\u3001\u4e00\u4e2a\u7c7b\u578b\u3001\u4e00\u4e2a\u503c\u3002\u5bf9\u8c61\u4e00\u65e6\u5efa\u7acb\uff0cID\u4fbf\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u91cc\u6240\u8bf4\u7684ID\u662f\u662f\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662fidentifier\u3002 \u5bf9\u8c61\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u6807\u8bc6\u7b26\u5e76\u4e0d\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6307\u5411\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002\u800c\u7ba1\u7406\u8fd9\u4e9b\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u7684\u4e8b\u7269\u5c31\u662f\u201c\u547d\u540d\u7a7a\u95f4\u201d\u3002 \u547d\u540d\u7a7a\u95f4\uff08Namespace\uff09 \uff1a\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u5230\u5bf9\u8c61\u7684 \u6620\u5c04 \u3002\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u662f\u89e3\u51b3\u53d8\u91cf\u547d\u540d\u51b2\u7a81\u7684\u95ee\u9898\u3002 \u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\u53d8\u91cf\uff0c\u4f46\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5b58\u5728\u91cd\u540d\u53d8\u91cf\u800c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u4f5c\u7528\u57df\uff08Scope\uff09 \uff1a\u672c\u8d28\u662f\u4e00\u5757\u6587\u672c\u533a\u57df\uff0c\u5373\u53d8\u91cf\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u8fd9\u91cc\u7684\u201d\u4f5c\u7528\u201c\u5177\u4f53\u662f\u6307\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u76f8\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u3002\u4f5c\u7528\u57df\u9650\u5b9a\u4e86\u53ef\u4ee5\u8bbf\u95ee\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u540c\u65f6\u88ab\u591a\u4e2a\u4f5c\u7528\u57df\u8bbf\u95ee\u3002 \u540d\u5b57\u7684\u4f5c\u7528\u57df \uff1a\u8be5\u540d\u5b57\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df \uff1a\u8be5\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u76f4\u63a5\u8bbf\u95ee \uff1a\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff08\u5982Python\uff09\uff0c\u4e0d\u52a0 . \u7684\u8bbf\u95ee\u4e3a\u76f4\u63a5\u8bbf\u95ee\uff0c\u53cd\u4e4b\u4e3a\u5c5e\u6027\u8bbf\u95ee\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \uff1a\u57fa\u4e8e\u5bf9\u8c61\u6982\u5ff5\u6765\u5206\u6790\u95ee\u9898\u548c\u8bbe\u8ba1\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08object-orientation programming\uff0c\u7b80\u79f0OOP\uff09\u3002\u901a\u8fc7OOP\u6240\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u4e2a\u7531\u5f88\u591a\u5bf9\u8c61\u7ec4\u6210\u7684\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5411\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u6765\u5b9e\u73b0\u5bf9\u6570\u636e\u7684\u5904\u7406\uff0c\u5168\u4f53\u5bf9\u8c61\u901a\u8fc7\u76f8\u4e92\u534f\u4f5c\u6765\u5b8c\u6210\u7a0b\u5e8f\u7684\u6570\u636e\u5904\u7406\u529f\u80fd\u3002 \u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b \uff1a\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u7ec4\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff0c\u901a\u8fc7\u6309\u987a\u5e8f\u6267\u884c\u8fd9\u4e9b\u8fc7\u7a0b\u6765\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u3002","title":"\u57fa\u672c\u672f\u8bed\u89e3\u91ca"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_6","text":"\u5728\u7f16\u7a0b\u65f6\uff0c\u67d0\u4e00\u6bb5\u4ee3\u7801\u8981\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u5f80\u5f80\u662f\u56fa\u5b9a\u7684\uff0c\u6216\u8005\u662f\u7c7b\u4f3c\u7684\u3002\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u64cd\u7eb5\u6570\u636e\uff0c\u4eba\u4eec\u5c06\u6570\u636e\u548c\u64cd\u7eb5\u8be5\u6570\u636e\u7684\u4ee3\u7801\u7ed1\u5b9a\uff0c\u79f0\u4e4b\u4e3a\u7c7b\u3002 \u7c7b\u662f\u7c7b\u578b\u6982\u5ff5\u7684\u53d1\u5c55\u3002 \u7c7b\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u7528\u7f16\u7a0b\u8bed\u8a00\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u9996\u5148\u9700\u8981\u660e\u786e\u95ee\u9898\u4e2d\u6d89\u53ca\u54ea\u4e9b\u6570\u636e\uff0c\u5e76\u5728\u7a0b\u5e8f\u4e2d\u5c06\u8fd9\u4e9b\u6570\u636e\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u518d\u53bb\u8003\u8651\u9700\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u6267\u884c\u4f55\u79cd\u64cd\u4f5c\u3002\u8fd9\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u601d\u60f3\u3002 \u6570\u636e\u7c7b\u578b\u662f\u5bf9\u73b0\u5b9e\u4e2d\u7684\u6570\u636e\u7684\u62bd\u8c61 \uff0c\u76f8\u540c\u6216\u76f8\u4f3c\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6574\u6570\u7c7b\u578b\u548c\u6d6e\u70b9\u6570\u7c7b\u578b\u7684\u6570\u636e\u90fd\u652f\u6301 + \u8fd0\u7b97\u3002 \u5927\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\u6574\u6570\u7c7b\u578b\u3001\u6d6e\u70b9\u6570\u7c7b\u578b\u3001\u5b57\u7b26\u7c7b\u578b\u7b49\u7b49\u3002\u4f46\u5b9e\u9645\u95ee\u9898\u4e2d\u5f80\u5f80\u6d89\u53ca\u5f88\u590d\u6742\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u3002\u4e3a\u4e86\u8868\u793a\u590d\u6742\u6570\u636e\uff0c\u5927\u4f53\u6709\u4e24\u79cd\u529e\u6cd5\uff1a 1.\u4e00\u5c06\u590d\u6742\u6570\u636e\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u6570\u636e\u9879\uff0c\u6bcf\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u8868\u793a\u3002 \u8fd9\u662fC\u8bed\u8a00\u4e2d\u5e38\u7528\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3aC\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 2.\u8ba9\u7a0b\u5e8f\u5458\u81ea\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5bf9\u590d\u6742\u6570\u636e\u8fdb\u884c\u76f4\u63a5\u7684\u3001\u6574\u4f53\u7684\u8868\u793a\u3002 \u53ef\u4ee5\u81ea\u5b9a\u7c7b\u578b\u662f\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8303\u5f0f\u7684\u5fc5\u8981\u6761\u4ef6\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u5b66\u751f\u7684\u4fe1\u606f\u5305\u62ec\u59d3\u540d\u3001\u5e74\u9f84\u3001\u73ed\u7ea7\u3001\u4f4f\u5740\u7b49\u7b49\u3002\u8fd9\u4e9b\u57fa\u672c\u4fe1\u606f\u53ef\u4ee5\u7528\u591a\u79cd\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff08\u5982\u6574\u6570\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5206\u522b\u8868\u793a\uff0c\u5982\u56fe1\u3002\u4f46\u8fd9\u4e0d\u662f\u597d\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u793a\u6cd5\u4e22\u5931\u4e86\u6570\u636e\u7684\u6574\u4f53\u6027\uff0c\u5728\u7ef4\u62a4\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u6570\u636e\u95f4\u7684\u8054\u7cfb\u65f6\u5f88\u9ebb\u70e6\u3002 \u7b2c\u4e8c\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u5b66\u751f\u7684\u4fe1\u606f\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u7528\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u8868\u793a\uff0c\u5982\u56fe2\u3002\u56e0\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6ca1\u6709\u73b0\u6210\u7684\u7c7b\u578b\u80fd\u591f\u8868\u793a\u8be5\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u8fd9\u79cd\u6570\u636e\u503c\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\u2014\u2014 Student \u7c7b\u578b\u3002 Student \u7c7b\u578b\u5b9e\u9645\u4e0a\u662f\u5728\u5185\u90e8\u5c06 string \u3001 int \u7c7b\u578b\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u53ef\u80fd\u88ab\u79f0\u4e3a\u590d\u5408\u7c7b\u578b\uff08composite data type, aggregate data type\uff09\u3002 \u7531\u6b64\uff0c\u6211\u4eec\u4ece\u4f20\u7edf\u7684\u6570\u636e\u7c7b\u578b\u6982\u5ff5\u53d1\u5c55\u51fa\u4e86\u201c\u7c7b\u201d\u7684\u6982\u5ff5\u3002\u7c7b\uff08class\uff09\u662f\u5e7f\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u80fd\u591f\u5b9a\u4e49\u590d\u6742\u6570\u636e\u7684\u7279\u6027\uff0c\u5305\u62ec\u9759\u6001\u7279\u6027\uff08\u5373\u6570\u636e\uff09\u548c\u52a8\u6001\u7279\u6027\uff08\u5373\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u65b9\u6cd5\uff09\u3002\u7c7b\u7684\u5b9e\u4f8b\u79f0\u4e3a\u5bf9\u8c61\u3002","title":"\u7c7b\u7684\u6982\u5ff5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_7","text":"Python\u5230\u5e95\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u8fd8\u662f\u5f31\u7c7b\u578b\u8bed\u8a00\uff1f \u300aType Systems\u300b Strong versus Weak Typing \u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5185\u5b58\u3002 \u21a9","title":"\u53c2\u8003"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html","text":"\u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u4f18\u7f3a\u70b9\u5bf9\u6bd4 \u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u5206\u4e3a\uff1a\u5b8c\u5168\u7684\u7f16\u8bd1\u578b\uff0c\u7eaf\u7cb9\u7684\u89e3\u91ca\u578b\u6216\u8005\u4e24\u8005\u76f8\u4e92\u6df7\u5408\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u73b0\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u540c\u65f6\u62e5\u6709\u5176\u7f16\u8bd1\u578b\u548c\u89e3\u91ca\u578b\u7248\u672c\u3002 \u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u5206\u522b\u6709\u5176\u5404\u81ea\u7684\u4f18\u52bf\u548c\u4e0d\u8db3\u3002\u4e0b\u9762\u4ece\u7f16\u8bd1\u578b\u8bed\u8a00\u5f00\u59cb\u4ecb\u7ecd\u3002 \u7f16\u8bd1\u578b\u8bed\u8a00\uff1a \u7f16\u8bd1\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u5c31\u662f\u5176\u6267\u884c\u901f\u5ea6\u3002\u7528C/C++\u7f16\u5199\u7684\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6\u8981\u6bd4\u7528Java\u7f16\u5199\u7684\u76f8\u540c\u7a0b\u5e8f\u5feb30%-70%\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u6bd4\u89e3\u91ca\u578b\u7a0b\u5e8f\u6d88\u8017\u7684\u5185\u5b58\u66f4\u5c11\u3002 \u4e0d\u5229\u7684\u4e00\u9762\u2014\u2014\u7f16\u8bd1\u5668\u6bd4\u89e3\u91ca\u5668\u8981\u96be\u5199\u5f97\u591a\u3002 \u7f16\u8bd1\u5668\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u63d0\u4f9b\u4e0d\u4e86\u591a\u5c11\u5e2e\u52a9\u2014\u2014\u6709\u591a\u5c11\u6b21\u5728\u4f60\u7684C\u8bed\u8a00\u4ee3\u7801\u4e2d\u9047\u5230\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\u65f6\uff0c\u9700\u8981\u82b1\u8d39\u597d\u51e0\u4e2a\u5c0f\u65f6\u6765\u660e\u786e\u9519\u8bef\u5230\u5e95\u5728\u4ee3\u7801\u4e2d\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002 \u53ef\u6267\u884c\u7684\u7f16\u8bd1\u578b\u4ee3\u7801\u8981\u6bd4\u76f8\u540c\u7684\u89e3\u91ca\u578b\u4ee3\u7801\u5927\u8bb8\u591a\u3002\u4f8b\u5982\uff0cC/C++\u7684.exe\u6587\u4ef6\u8981\u6bd4\u540c\u6837\u529f\u80fd\u7684Java\u7684.class\u6587\u4ef6\u5927\u5f88\u591a\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u662f\u9762\u5411\u7279\u5b9a\u5e73\u53f0\u7684\u56e0\u800c\u662f\u5e73\u53f0\u4f9d\u8d56\u7684\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u4e0d\u652f\u6301\u4ee3\u7801\u4e2d\u5b9e\u73b0\u5b89\u5168\u6027\u2014\u2014\u4f8b\u5982\uff0c\u4e00\u4e2a\u7f16\u8bd1\u578b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u7684\u4efb\u4f55\u533a\u57df\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u4f60\u7684PC\u505a\u5b83\u60f3\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\uff08\u5927\u90e8\u5206\u75c5\u6bd2\u662f\u4f7f\u7528\u7f16\u8bd1\u578b\u8bed\u8a00\u7f16\u5199\u7684\uff09 \u7531\u4e8e\u677e\u6563\u7684\u5b89\u5168\u6027\u548c\u5e73\u53f0\u4f9d\u8d56\u6027\uff0c\u7f16\u8bd1\u578b\u8bed\u8a00\u4e0d\u592a\u9002\u5408\u5f00\u53d1\u56e0\u7279\u7f51\u6216\u8005\u57fa\u4e8eWeb\u7684\u5e94\u7528\u3002 \u89e3\u91ca\u578b\u8bed\u8a00\uff1a \u89e3\u91ca\u578b\u8bed\u8a00\u63d0\u4f9b\u4e86\u6781\u4f73\u7684\u8c03\u8bd5\u652f\u6301\u3002\u4e00\u540dJava\u7a0b\u5e8f\u5458\u53ea\u9700\u8981\u51e0\u5206\u949f\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u5e76\u4fee\u590d\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\uff0c\u56e0\u4e3aJava\u8fd0\u884c\u73af\u5883\u4e0d\u4ec5\u6307\u660e\u4e86\u5f02\u5e38\u7684\u6027\u8d28\uff0c\u800c\u4e14\u7ed9\u51fa\u4e86\u5f02\u5e38\u53d1\u751f\u4f4d\u7f6e\u5177\u4f53\u7684\u884c\u53f7\u548c\u51fd\u6570\u8c03\u7528\u987a\u5e8f\uff08\u8457\u540d\u7684\u5806\u6808\u8ddf\u8e2a\u4fe1\u606f\uff09\u3002\u8fd9\u6837\u7684\u4fbf\u5229\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\u6240\u65e0\u6cd5\u63d0\u4f9b\u7684\u3002 \u53e6\u4e00\u4e2a\u4f18\u52bf\u662f\u89e3\u91ca\u5668\u6bd4\u7f16\u8bd1\u5668\u5bb9\u6613\u5b9e\u73b0 \u89e3\u91ca\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u5176\u5e73\u53f0\u72ec\u7acb\u6027 \u89e3\u91ca\u578b\u8bed\u8a00\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u9ad8\u5ea6\u7684\u5b89\u5168\u6027\u2014\u2014\u8fd9\u662f\u4e92\u8054\u7f51\u5e94\u7528\u8feb\u5207\u9700\u8981\u7684 \u4e2d\u95f4\u8bed\u8a00\u4ee3\u7801\u7684\u5927\u5c0f\u6bd4\u7f16\u8bd1\u578b\u53ef\u6267\u884c\u4ee3\u7801\u5c0f\u5f88\u591a \u5e73\u53f0\u72ec\u7acb\u6027\uff0c\u4ee5\u53ca\u4e25\u5bc6\u7684\u5b89\u5168\u6027\u662f\u4f7f\u89e3\u91ca\u578b\u8bed\u8a00\u6210\u4e3a\u9002\u5408\u4e92\u8054\u7f51\u548cWeb\u5e94\u7528\u7684\u7406\u60f3\u8bed\u8a00\u76842\u4e2a\u6700\u91cd\u8981\u7684\u56e0\u7d20\u3002 \u89e3\u91ca\u578b\u8bed\u8a00\u5b58\u5728\u4e00\u4e9b\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u89e3\u91ca\u578b\u5e94\u7528\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u548cCPU\u8d44\u6e90\u3002\u8fd9\u662f\u7531\u4e8e\uff0c\u4e3a\u4e86\u8fd0\u884c\u89e3\u91ca\u578b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u76f8\u5173\u7684\u89e3\u91ca\u5668\u5fc5\u987b\u9996\u5148\u8fd0\u884c\u3002\u89e3\u91ca\u5668\u662f\u590d\u6742\u7684\uff0c\u667a\u80fd\u7684\uff0c\u5927\u91cf\u6d88\u8017\u8d44\u6e90\u7684\u7a0b\u5e8f\u5e76\u4e14\u5b83\u4eec\u4f1a\u5360\u7528\u5f88\u591aCPU\u5468\u671f\u548c\u5185\u5b58\u3002 \u7531\u4e8e\u89e3\u91ca\u578b\u5e94\u7528\u7684decode-fetch-execute\uff08\u89e3\u7801-\u6293\u53d6-\u6267\u884c\uff09\u7684\u5468\u671f\uff0c\u5b83\u4eec\u6bd4\u7f16\u8bd1\u578b\u7a0b\u5e8f\u6162\u5f88\u591a\u3002 \u89e3\u91ca\u5668\u4e5f\u4f1a\u505a\u5f88\u591a\u4ee3\u7801\u4f18\u5316\uff0c\u8fd0\u884c\u65f6\u5b89\u5168\u6027\u68c0\u67e5\uff1b\u8fd9\u4e9b\u989d\u5916\u7684\u6b65\u9aa4\u5360\u7528\u4e86\u66f4\u591a\u7684\u8d44\u6e90\u5e76\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86\u5e94\u7528\u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u539f\u6587\u94fe\u63a5\uff1a http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E Pros and cons of compiled and interpreted languages Languages can be developed either as fully-compiled, pure-interpreted, or hybrid compiled-interpreted. As a matter of fact, most of the current programming languages have both a compiled and interpreted versions available. Both compiled and interpreted approaches have their advantages and disadvantages. I will start with the compiled languages. Compiled languages One of the biggest advantages of Compiled languages is their execution speed. A program written in C/C++ runs 30-70 % faster then an equivalent program written in Java. Compiled code also takes less memory as compared to an interpreted program. On the down side - a compiler is much more difficult to write than an interpreter. A compiler does not provide much help in debugging a program - how many times have you received a \"Null pointer exception\" in your C code and have spent hours trying to figure out where in your source code did the exception occurred. The executable Compiled code is much bigger in size than an equivalent interpreted code e.g. a C/C++ .exe file is much bigger than an equivalent Java .class file Compiled programs are targeted towards a particular platform and hence are platform dependent. Compiled programs do not allow security to be implemented with in the code - e.g. a compiled program can access any area of the memory, and can do whatever it wants with your PC (most of the viruses are made in compiled languages). Due to loose security and platform dependence - a compiled language is not particularly suited to be used to develop Internet or web-based applications. Interpreted languages Interpreted language provides excellent debugging support. A Java programmer only spends a few minutes fixing a \"Null pointer exception\", because Java runtime not only specifies the nature of exception but also gives the exact line number and function call sequence (the famous stack trace information) where the exception occurred. This facility is something that a compiled language can never provide. Another advantage is that Interpreters are much easier to build then a compiler. One of the biggest advantages of Interpreters is that they make platform-independence possible. Interpreted language also allow high degree of security - something badly needed for an Internet application. An intermediate language code size is much smaller than a compiled executable code. Platform independence, and tight security are the two most important factors that make an interpreted language ideally suited for Internet and web-based applications. Interpreted languages have some serious drawbacks. The interpreted applications take up more memory and CPU resources. This is because in order to run a program written in interpreted language; the corresponding interpreter must be run first. Interpreters are sophisticated, intelligent and resource hungry programs and they take up lot of CPU cycles and RAM. Due to interpreted application's decode-fetch-execute cycle; they are much slower than compiled programs. Interpreters also do lot of code-optimization, security violation checking at run-time; these extra steps take up even more resources and further slows the application down.","title":"1.4.\u7f16\u8bd1\u578b\u8bed\u8a00 vs \u89e3\u91ca\u578b\u8bed\u8a00"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#_1","text":"\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u5206\u4e3a\uff1a\u5b8c\u5168\u7684\u7f16\u8bd1\u578b\uff0c\u7eaf\u7cb9\u7684\u89e3\u91ca\u578b\u6216\u8005\u4e24\u8005\u76f8\u4e92\u6df7\u5408\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u73b0\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u540c\u65f6\u62e5\u6709\u5176\u7f16\u8bd1\u578b\u548c\u89e3\u91ca\u578b\u7248\u672c\u3002 \u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u5206\u522b\u6709\u5176\u5404\u81ea\u7684\u4f18\u52bf\u548c\u4e0d\u8db3\u3002\u4e0b\u9762\u4ece\u7f16\u8bd1\u578b\u8bed\u8a00\u5f00\u59cb\u4ecb\u7ecd\u3002","title":"\u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u4f18\u7f3a\u70b9\u5bf9\u6bd4"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#_2","text":"\u7f16\u8bd1\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u5c31\u662f\u5176\u6267\u884c\u901f\u5ea6\u3002\u7528C/C++\u7f16\u5199\u7684\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6\u8981\u6bd4\u7528Java\u7f16\u5199\u7684\u76f8\u540c\u7a0b\u5e8f\u5feb30%-70%\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u6bd4\u89e3\u91ca\u578b\u7a0b\u5e8f\u6d88\u8017\u7684\u5185\u5b58\u66f4\u5c11\u3002 \u4e0d\u5229\u7684\u4e00\u9762\u2014\u2014\u7f16\u8bd1\u5668\u6bd4\u89e3\u91ca\u5668\u8981\u96be\u5199\u5f97\u591a\u3002 \u7f16\u8bd1\u5668\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u63d0\u4f9b\u4e0d\u4e86\u591a\u5c11\u5e2e\u52a9\u2014\u2014\u6709\u591a\u5c11\u6b21\u5728\u4f60\u7684C\u8bed\u8a00\u4ee3\u7801\u4e2d\u9047\u5230\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\u65f6\uff0c\u9700\u8981\u82b1\u8d39\u597d\u51e0\u4e2a\u5c0f\u65f6\u6765\u660e\u786e\u9519\u8bef\u5230\u5e95\u5728\u4ee3\u7801\u4e2d\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002 \u53ef\u6267\u884c\u7684\u7f16\u8bd1\u578b\u4ee3\u7801\u8981\u6bd4\u76f8\u540c\u7684\u89e3\u91ca\u578b\u4ee3\u7801\u5927\u8bb8\u591a\u3002\u4f8b\u5982\uff0cC/C++\u7684.exe\u6587\u4ef6\u8981\u6bd4\u540c\u6837\u529f\u80fd\u7684Java\u7684.class\u6587\u4ef6\u5927\u5f88\u591a\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u662f\u9762\u5411\u7279\u5b9a\u5e73\u53f0\u7684\u56e0\u800c\u662f\u5e73\u53f0\u4f9d\u8d56\u7684\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u4e0d\u652f\u6301\u4ee3\u7801\u4e2d\u5b9e\u73b0\u5b89\u5168\u6027\u2014\u2014\u4f8b\u5982\uff0c\u4e00\u4e2a\u7f16\u8bd1\u578b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u7684\u4efb\u4f55\u533a\u57df\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u4f60\u7684PC\u505a\u5b83\u60f3\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\uff08\u5927\u90e8\u5206\u75c5\u6bd2\u662f\u4f7f\u7528\u7f16\u8bd1\u578b\u8bed\u8a00\u7f16\u5199\u7684\uff09 \u7531\u4e8e\u677e\u6563\u7684\u5b89\u5168\u6027\u548c\u5e73\u53f0\u4f9d\u8d56\u6027\uff0c\u7f16\u8bd1\u578b\u8bed\u8a00\u4e0d\u592a\u9002\u5408\u5f00\u53d1\u56e0\u7279\u7f51\u6216\u8005\u57fa\u4e8eWeb\u7684\u5e94\u7528\u3002","title":"\u7f16\u8bd1\u578b\u8bed\u8a00\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#_3","text":"\u89e3\u91ca\u578b\u8bed\u8a00\u63d0\u4f9b\u4e86\u6781\u4f73\u7684\u8c03\u8bd5\u652f\u6301\u3002\u4e00\u540dJava\u7a0b\u5e8f\u5458\u53ea\u9700\u8981\u51e0\u5206\u949f\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u5e76\u4fee\u590d\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\uff0c\u56e0\u4e3aJava\u8fd0\u884c\u73af\u5883\u4e0d\u4ec5\u6307\u660e\u4e86\u5f02\u5e38\u7684\u6027\u8d28\uff0c\u800c\u4e14\u7ed9\u51fa\u4e86\u5f02\u5e38\u53d1\u751f\u4f4d\u7f6e\u5177\u4f53\u7684\u884c\u53f7\u548c\u51fd\u6570\u8c03\u7528\u987a\u5e8f\uff08\u8457\u540d\u7684\u5806\u6808\u8ddf\u8e2a\u4fe1\u606f\uff09\u3002\u8fd9\u6837\u7684\u4fbf\u5229\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\u6240\u65e0\u6cd5\u63d0\u4f9b\u7684\u3002 \u53e6\u4e00\u4e2a\u4f18\u52bf\u662f\u89e3\u91ca\u5668\u6bd4\u7f16\u8bd1\u5668\u5bb9\u6613\u5b9e\u73b0 \u89e3\u91ca\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u5176\u5e73\u53f0\u72ec\u7acb\u6027 \u89e3\u91ca\u578b\u8bed\u8a00\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u9ad8\u5ea6\u7684\u5b89\u5168\u6027\u2014\u2014\u8fd9\u662f\u4e92\u8054\u7f51\u5e94\u7528\u8feb\u5207\u9700\u8981\u7684 \u4e2d\u95f4\u8bed\u8a00\u4ee3\u7801\u7684\u5927\u5c0f\u6bd4\u7f16\u8bd1\u578b\u53ef\u6267\u884c\u4ee3\u7801\u5c0f\u5f88\u591a \u5e73\u53f0\u72ec\u7acb\u6027\uff0c\u4ee5\u53ca\u4e25\u5bc6\u7684\u5b89\u5168\u6027\u662f\u4f7f\u89e3\u91ca\u578b\u8bed\u8a00\u6210\u4e3a\u9002\u5408\u4e92\u8054\u7f51\u548cWeb\u5e94\u7528\u7684\u7406\u60f3\u8bed\u8a00\u76842\u4e2a\u6700\u91cd\u8981\u7684\u56e0\u7d20\u3002 \u89e3\u91ca\u578b\u8bed\u8a00\u5b58\u5728\u4e00\u4e9b\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u89e3\u91ca\u578b\u5e94\u7528\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u548cCPU\u8d44\u6e90\u3002\u8fd9\u662f\u7531\u4e8e\uff0c\u4e3a\u4e86\u8fd0\u884c\u89e3\u91ca\u578b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u76f8\u5173\u7684\u89e3\u91ca\u5668\u5fc5\u987b\u9996\u5148\u8fd0\u884c\u3002\u89e3\u91ca\u5668\u662f\u590d\u6742\u7684\uff0c\u667a\u80fd\u7684\uff0c\u5927\u91cf\u6d88\u8017\u8d44\u6e90\u7684\u7a0b\u5e8f\u5e76\u4e14\u5b83\u4eec\u4f1a\u5360\u7528\u5f88\u591aCPU\u5468\u671f\u548c\u5185\u5b58\u3002 \u7531\u4e8e\u89e3\u91ca\u578b\u5e94\u7528\u7684decode-fetch-execute\uff08\u89e3\u7801-\u6293\u53d6-\u6267\u884c\uff09\u7684\u5468\u671f\uff0c\u5b83\u4eec\u6bd4\u7f16\u8bd1\u578b\u7a0b\u5e8f\u6162\u5f88\u591a\u3002 \u89e3\u91ca\u5668\u4e5f\u4f1a\u505a\u5f88\u591a\u4ee3\u7801\u4f18\u5316\uff0c\u8fd0\u884c\u65f6\u5b89\u5168\u6027\u68c0\u67e5\uff1b\u8fd9\u4e9b\u989d\u5916\u7684\u6b65\u9aa4\u5360\u7528\u4e86\u66f4\u591a\u7684\u8d44\u6e90\u5e76\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86\u5e94\u7528\u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u539f\u6587\u94fe\u63a5\uff1a http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E","title":"\u89e3\u91ca\u578b\u8bed\u8a00\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#pros-and-cons-of-compiled-and-interpreted-languages","text":"Languages can be developed either as fully-compiled, pure-interpreted, or hybrid compiled-interpreted. As a matter of fact, most of the current programming languages have both a compiled and interpreted versions available. Both compiled and interpreted approaches have their advantages and disadvantages. I will start with the compiled languages. Compiled languages One of the biggest advantages of Compiled languages is their execution speed. A program written in C/C++ runs 30-70 % faster then an equivalent program written in Java. Compiled code also takes less memory as compared to an interpreted program. On the down side - a compiler is much more difficult to write than an interpreter. A compiler does not provide much help in debugging a program - how many times have you received a \"Null pointer exception\" in your C code and have spent hours trying to figure out where in your source code did the exception occurred. The executable Compiled code is much bigger in size than an equivalent interpreted code e.g. a C/C++ .exe file is much bigger than an equivalent Java .class file Compiled programs are targeted towards a particular platform and hence are platform dependent. Compiled programs do not allow security to be implemented with in the code - e.g. a compiled program can access any area of the memory, and can do whatever it wants with your PC (most of the viruses are made in compiled languages). Due to loose security and platform dependence - a compiled language is not particularly suited to be used to develop Internet or web-based applications. Interpreted languages Interpreted language provides excellent debugging support. A Java programmer only spends a few minutes fixing a \"Null pointer exception\", because Java runtime not only specifies the nature of exception but also gives the exact line number and function call sequence (the famous stack trace information) where the exception occurred. This facility is something that a compiled language can never provide. Another advantage is that Interpreters are much easier to build then a compiler. One of the biggest advantages of Interpreters is that they make platform-independence possible. Interpreted language also allow high degree of security - something badly needed for an Internet application. An intermediate language code size is much smaller than a compiled executable code. Platform independence, and tight security are the two most important factors that make an interpreted language ideally suited for Internet and web-based applications. Interpreted languages have some serious drawbacks. The interpreted applications take up more memory and CPU resources. This is because in order to run a program written in interpreted language; the corresponding interpreter must be run first. Interpreters are sophisticated, intelligent and resource hungry programs and they take up lot of CPU cycles and RAM. Due to interpreted application's decode-fetch-execute cycle; they are much slower than compiled programs. Interpreters also do lot of code-optimization, security violation checking at run-time; these extra steps take up even more resources and further slows the application down.","title":"Pros and cons of compiled and interpreted languages"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html","text":"\u76f8\u5bf9\u4e8e\u6570\u5b57\uff0c\u8ba1\u7b97\u673a\u5904\u7406\u5b57\u7b26\u4e32\u8fd8\u6709\u4e00\u4e2a\u7f16\u7801\u95ee\u9898\u3002 \u4e00\u822c\uff0c\u8ba1\u7b97\u673a\u7684\u7cfb\u7edf\u7ed3\u6784\u662f\u57fa\u4e8e\u6570\u5b57\u4fe1\u53f7\u6765\u642d\u5efa\u7684\uff0c\u8ba1\u7b97\u673a\u4e2d\u7684\u8ba1\u7b97\u57fa\u4e8e\u6570\u5b57\u7535\u8def\u3002 \u5728\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u6240\u6709\u4fe1\u606f\u6700\u7ec8\u90fd\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u6570\u5b57\u3002 \u8ba1\u7b97\u673a\u53ea\u80fd\u5904\u7406\u6570\u5b57\uff0c\u5982\u679c\u8981\u5904\u7406\u6587\u672c\uff0c\u5c31\u5fc5\u987b\u5148\u628a\u6587\u672c\u8f6c\u6362\u4e3a\u6570\u5b57\u624d\u80fd\u5904\u7406\u3002 \u7f16\u7801\u6a21\u578b \u8ba1\u7b97\u673a\u7684 \u7f16\u7801\u6a21\u578b \u8d1f\u8d23\u5c06\u663e\u793a\u5728\u5c4f\u5e55\u7684\u5b57\u7b26\u8f6c\u6362\u6210\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u503c\uff0c\u6216\u8005\u5c06\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u503c\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684\u5b57\u7b26\u3002\u7f16\u7801\u6a21\u578b\u6709\u4e24\u79cd\uff1a \u7b80\u5355\u7f16\u7801\u6a21\u578b\uff0c\u5982ASCII\u7801 \u73b0\u4ee3\u7f16\u7801\u6a21\u578b \u73b0\u4ee3\u7f16\u7801\u6a21\u578b\u81ea\u5e95\u5411\u4e0a\u5206\u4e3a\u4e94\u4e2a\u5c42\u6b21\uff1a \u62bd\u8c61\u5b57\u7b26\u96c6(Abstract Character Repertoire) \u7f16\u7801\u5b57\u7b26\u96c6(Coded Character Set) \u5b57\u7b26\u7f16\u7801\u8868(Character Encoding Form) \u5b57\u7b26\u7f16\u7801\u65b9\u6848(Character Encoding Schema) \u4f20\u8f93\u7f16\u7801\u8bed\u6cd5(Transfer Encoding Syntax) \u62bd\u8c61\u5b57\u7b26\u96c6\u662f\u73b0\u4ee3\u7f16\u7801\u6a21\u578b\u7684\u6700\u5e95\u5c42\uff0c\u5b83\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u901a\u8fc7\u679a\u4e3e\u6307\u660e\u4e86\u6240\u5c5e\u7684\u6240\u6709\u62bd\u8c61\u5b57\u7b26\u3002\u4f46\u662f\u8981\u4e86\u89e3\u62bd\u8c61\u5b57\u7b26\u96c6\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u662f \u5b57\u7b26 \u4e0e \u62bd\u8c61\u5b57\u7b26 \u5b57\u7b26 (CHARACTER, CHAR) \u5b57\u7b26\u6709\u4e24\u79cd\u542b\u4e49\uff1a \u5b57\u7b26\u662f\u8868\u793a\u6587\u672c\u6570\u636e\u7684 \u4fe1\u606f\u5355\u5143 \uff0c\u5177\u6709\u67d0\u79cd\u89c6\u89c9\u8868\u793a\u5f62\u5f0f\u3002 \u4fe1\u606f\u5355\u5143\u5373\u662f\u6307\u7ec4\u6210\u6587\u672c\u8bed\u8a00\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4f8b\u5982\u4e2d\u6587\u79cd\u7684\u6bcf\u4e00\u4e2a\u6c49\u5b57\u3001\u6807\u70b9\uff0c\u82f1\u6587\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u3002 \u5b57\u7b26\u662f\u62bd\u8c61\u5b57\u7b26\u7684\u540c\u4e49\u8bcd\u3002 \u5728 Unicode \u6587\u6863\u7684\u5927\u591a\u6570\u8bed\u5883\u4e2d\uff0c\u5b57\u7b26\u548c\u62bd\u8c61\u5b57\u7b26\u88ab\u89c6\u4e3a\u540c\u4e49\u8bcd\uff08\u8fd9\u610f\u5473\u7740\u62bd\u8c61\u5b57\u7b26\u5e93\u4e0e\u5b57\u7b26\u5e93(character repertoire)\u4e5f\u88ab\u89c6\u4e3a\u540c\u4e49\u8bcd\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\u5b57\u7b26\u662f\u6709\u5b57\u5f62\u7684\u3002 \u5b57\u7b26\u4e0e\u5b57\u5f62\u7684\u5173\u7cfb \u5b57\u5f62 \uff1a\u5b57\u7684\u5f62\u4f53\u3002\u4f8b\u5982\u4e00\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6709\u6b63\u4f53\u3001\u659c\u4f53\u3001\u624b\u5199\u4f53\u7b49\u7b49\uff0c\u5373\u4e00\u4e2a\u62bd\u8c61\u5b57\u7b26\u53ef\u4ee5\u7ed3\u5408\u4e0d\u540c\u7684\u5b57\u5f62\uff0c\u4ece\u800c\u751f\u6210\u4e0d\u540c\u7684\u5b57\u7b26\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6709\u591a\u4e2a\u5b57\u5f62\u3002 \u4e00\u4e2a\u5b57\u5f62\u4e5f\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u5b57\u7b26\uff08\u8be5\u5b57\u7b26\u540d\u4e3a fi ligature\uff09\uff1a \u6709\u65f6\uff0c\u751a\u81f3\u5b58\u5728\u591a\u4e2a\u5b57\u5f62\u5bf9\u5e94\u591a\u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0cfi ligature \u7684\u5b57\u5f62\u4e5f\u53ef\u80fd\u662f\u7531\u4e00\u4e2a \u5b57\u5f62\u5e8f\u5217 \u7ec4\u5408\u800c\u6210\u7684\u3002 \u5728\u663e\u793a\u67d0\u4e00\u5b57\u7b26\u65f6\uff0c\u662f\u4f7f\u7528\u5355\u4e2a\u5b57\u5f62\u8fd8\u662f\u4f7f\u7528\u5b57\u5f62\u5e8f\u5217\uff0c\u662f\u7531\u5b57\u4f53\u548c\u6e32\u67d3\u8f6f\u4ef6\u51b3\u5b9a\u7684\u3002 \u4e00\u4e2a\u5b57\u5f62\u4e0d\u4ec5\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u5b57\u5f62\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u91cd\u97f3\uff08accented\uff09\u5b57\u7b26\u53ef\u4ee5\u7531\u5355\u4e2a\u5b57\u5f62\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7531\u4e00\u4e2a\u5b57\u5f62\u5e8f\u5217\u6765\u8868\u793a\u3002\u53e6\u5916\uff0c\u6240\u8981\u8868\u793a\u7684\u5185\u5bb9\u672c\u8eab\u4e5f\u53ef\u80fd\u662f\u7531\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u7ec4\u6210\u7684\uff0c\u5982\u4e0b\u56fe\u4e2d\u7684\u7b2c\u4e8c\u884c\u3002 \u5728\u6709\u4e9b\u56fd\u5bb6\u7684\u8bed\u8a00\u4e2d\uff0c\u5728\u7ed8\u5236\u5b57\u7b26\u7684\u5177\u4f53\u5f62\u72b6\u65f6\uff0c\u8fd8\u9700\u8981\u8003\u8651\u5176\u5468\u56f4\u7684\u5b57\u5f62\uff0c\u8fd9\u79cd\u5b57\u5f62\u88ab\u79f0\u4f5c contextual forms \u3002\u4f8b\u5982\uff0c\u963f\u62c9\u4f2f\u5b57\u7b26 heh \u5c31\u5177\u6709\u56db\u79cd\u4e0a\u4e0b\u6587\u5b57\u5f62\u3002 \u62bd\u8c61\u5b57\u7b26\uff08ABSTRACT CHACACTER\uff09 \u62bd\u8c61\u5b57\u7b26 (Abstract Character)\uff1a\u7528\u4e8e\u7ec4\u7ec7\u3001\u63a7\u5236\u6216\u8868\u793a\u6587\u672c\u6570\u636e\u7684\u4fe1\u606f\u5355\u5143\u3002 \u5728\u8868\u793a\u6570\u636e\u65f6\uff0c\u62bd\u8c61\u5b57\u7b26\u662f\u8c61\u5f81\u6027\u7684\uff0c\u6ca1\u6709\u5177\u4f53\u7684\u5f62\u5f0f\uff0c\u5373\u62bd\u8c61\u5b57\u7b26\u4e0d\u5177\u6709\u5b57\u5f62\uff0c\u540c\u65f6\u62bd\u8c61\u5b57\u7b26\u4e5f\u533a\u522b\u4e8egrapheme\u3002 \u4ee5\u4e0a\u6982\u5ff5\u6765\u81ea\u4e8e\uff1a Glossary of Unicode Terms The Unicode\u00ae Standard Version 13.0 \u2013 Core Specification \u4ece\u5b57\u7b26\u548c\u62bd\u8c61\u5b57\u7b26\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u5b57\u7b26\u662f\u62bd\u8c61\u5b57\u7b26\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e0d\u5305\u62ec\u7528\u4e8e\u7ec4\u7ec7\u3001\u63a7\u5236\u6587\u672c\u6570\u636e\u7684\u4fe1\u606f\u5355\u5143\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u662f\u53ef\u4ee5\u663e\u793a\u51fa\u6765\u7684\u4fe1\u606f\u5355\u5143\uff0c\u800c\u8fd8\u6709\u4e00\u4e9b\u4fe1\u606f\u5355\u5143\u662f\u7a7a\u767d\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u6253\u5370\u7684\u3002\u8fd9\u4e9b\u4e0d\u663e\u793a\u51fa\u6765\u7684\u5b57\u7b26\u5c5e\u4e8e\u62bd\u8c61\u5b57\u7b26\uff0c\u4f8b\u5982ASCII\u5b57\u7b26\u96c6\u4e2d\u7684NULL\u3002 \u65e0\u6cd5\u663e\u793a\u7684\u5b57\u7b26\u867d\u7136\u4e0d\u663e\u793a\u51fa\u6765\uff0c\u4f46\u4ecd\u7136\u5177\u6709\u67d0\u79cd\u8868\u793a\u5f62\u5f0f\uff0c\u4f8b\u5982 \\x00 \u3001 \\000 \u3001 NULL \u3001 0 \u53ef\u80fd\u7528\u4e8e\u8868\u793a ASCII \u5b57\u7b26\u96c6\u7684 NULL\u3002\u8fd9\u4e9b\u8868\u793a\u5f62\u5f0f\u90fd\u662fNULL\u7684\u4e0d\u540c\u5199\u6cd5\uff0c\u800c\u4e0d\u662fNULL\u672c\u8eab\u3002 \u62bd\u8c61\u5b57\u7b26\u4e0d\u4e00\u5b9a\u4e0e\u5b57\u7b26\u4e00\u4e00\u5bf9\u5e94\u3002\u56e0\u4e3a\u6709\u4e00\u4e9b\u62bd\u8c61\u5b57\u7b26\u6ca1\u6709\u88ab Unicode \u6807\u51c6\u76f4\u63a5\u7f16\u7801\uff0c\u8fd9\u901a\u5e38\u53ef\u4ee5\u7528\u5b57\u7b26\u5e8f\u5217\u7ec4\u5408\u8d77\u6765\u8868\u793a\u3002 \u56fe\u7247\u6765\u81ea The Unicode Standard \u7684\u7b2c8\u7248 UnicodeStandard-8.0 P 65\uff0c\u53c2\u8003\u81ea Abstract Character (Unicode) \u3002 \u8be5\u56fe\u8bf4\u660e\u4e86\u62bd\u8c61\u5b57\u7b26\u4e0e code points \u7684\u5173\u7cfb\uff0c\u62bd\u8c61\u5b57\u7b26\u53ef\u4ee5\u7531\u4e00\u4e2a\u5b57\u7b26\u7f16\u7801\uff0c\u4e5f\u53ef\u4ee5\u7531\u4e24\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7f16\u7801\u800c\u6210\u3002 \u62bd\u8c61\u5b57\u7b26\u96c6 (ABSTRACT CHARACTER REPERTOIRE) \u62bd\u8c61\u5b57\u7b26\u96c6\u662f \u62bd\u8c61\u5b57\u7b26\u7684\u65e0\u5e8f\u96c6\u5408 \u3002\u62bd\u8c61\u5b57\u7b26\u96c6\u51b3\u5b9a\u4e86\u6574\u4e2a\u5b57\u7b26\u96c6\u80fd\u591f\u4f7f\u7528\u7684\u6240\u6709\u5b57\u7b26\u3002\u5df2\u7ecf\u6709\u4e86\u5f88\u591a \u6807\u51c6 \u7684\u5b57\u7b26\u96c6\u5b9a\u4e49\u3002 \u6bd4\u5982US-ASCII\u3001UCS(Unicode)\u3001GBK\u90fd\u662f\uff08\u6216\u8005\u81f3\u5c11\u662f\uff09\u62bd\u8c61\u5b57\u7b26\u96c6\u3002 \u4e00\u4e2a\u5b57\u6bcd\u6216\u6587\u5b57\u53ef\u4ee5\u540c\u65f6\u5c5e\u4e8e\u591a\u4e2a\u5b57\u7b26\u96c6\uff0c\u4f8b\u5982\u82f1\u6587\u5b57\u6bcd A \u540c\u65f6\u5c5e\u4e8eUS-ASCII\u3001UCS\u3001GBK\u8fd9\u4e09\u4e2a\u5b57\u7b26\u96c6\uff0c\u800c \ud83d\ude02 \u4e0d\u5c5e\u4e8eUS-ASCII\u4e0eGBK\u5b57\u7b26\u96c6\uff0c\u4f46\u5c5e\u4e8eUCS\u5b57\u7b26\u96c6\u3002 \u62bd\u8c61\u5b57\u7b26\u96c6\u6709\u5f00\u653e\u4e0e\u5c01\u95ed\u4e4b\u5206\u3002ASCII\u62bd\u8c61\u5b57\u7b26\u96c6\u5b9a\u4e49\u4e86128\u4e2a\u62bd\u8c61\u5b57\u7b26\uff0c\u518d\u4e5f\u4e0d\u4f1a\u589e\u52a0\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5c01\u95ed\u5b57\u7b26\u96c6\u3002Unicode \u5c1d\u8bd5\u6536\u7eb3\u6240\u6709\u7684\u5b57\u7b26\uff0c\u4e00\u76f4\u5728\u4e0d\u65ad\u5730\u6269\u5f20\u4e4b\u4e2d\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u5b57\u7b26\u96c6\u3002 \u7f16\u7801\u5b57\u7b26\u96c6\uff08Coded Character Set\uff09 \u7f16\u7801\u5b57\u7b26\u96c6 \u662f\u4e00\u4e2a\u6bcf\u4e2a\u6240\u5c5e\u5b57\u7b26\u90fd\u5206\u914d\u4e86 \u7801\u4f4d \u7684 \u5b57\u7b26\u96c6 \u3002 \u524d\u9762\u8bf4\u8fc7\uff0c\u4eba\u4eec\u5e38\u5e38\u559c\u6b22\u5c06\u62bd\u8c61\u5b57\u7b26\u96c6\u53eb\u505a\u5b57\u7b26\u96c6\uff0c\u73b0\u5728\u4eba\u4eec\u53c8\u559c\u6b22\u5c06\u7f16\u7801\u5b57\u7b26\u96c6\u7b80\u79f0\u5b57\u7b26\u96c6\u3002\u4f46\u662f\u672c\u6587\u4e0d\u6b22\u8fce\u8fd9\u79cd\u6df7\u4e71\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u5c3d\u91cf\u4e0d\u4f1a\u4f7f\u7528\u5e26\u6709\u6b67\u4e49\u7684\u7b80\u79f0\uff0c\u6709\u4f7f\u7528\u201c\u5b57\u7b26\u96c6\u201d\u7684\u5730\u65b9\uff0c\u4e00\u5f8b\u6307\u4ee3\u62bd\u8c61\u5b57\u7b26\u96c6\u3002 \u62bd\u8c61\u5b57\u7b26\u96c6\u662f\u65e0\u5e8f\u7684\uff0c\u65e0\u5e8f\u7684\u96c6\u5408\u6ca1\u6709\u591a\u5927\u7684\u4f5c\u7528\uff0c\u6211\u4eec\u53ea\u80fd\u5224\u65ad\u67d0\u4e2a\u5b57\u7b26\u662f\u5426\u5c5e\u4e8e\u67d0\u4e2a\u62bd\u8c61\u5b57\u7b26\u96c6\uff0c\u4f46\u65e0\u6cd5\u65b9\u4fbf\u5730\u5f15\u7528\u62bd\u8c61\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\u3002\u6240\u4ee5\u4e3a\u4e86\u66f4\u597d\u7684\u63cf\u8ff0\u3001\u64cd\u4f5c\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u62bd\u8c61\u5b57\u7b26\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u5173\u8054\u4e00\u4e2a \u6570\u5b57\u7f16\u53f7 \uff0c\u8fd9\u4e2a\u6570\u5b57\u7f16\u53f7\u79f0\u4e4b\u4e3a \u7801\u4f4d(Code Point) \u3002\u6b64\u65f6\uff0c\u7f16\u7801\u5b57\u7b26\u96c6\u66f4\u50cf\u4e00\u4e2a\u5b57\u5178\uff08dictionary\uff09\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\u3002 \u4e60\u60ef\u4e0a\uff0c\u5206\u914d\u7ed9\u5b57\u7b26\u7684\u7801\u4f4d\u901a\u5e38\u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e00\u822c\u7528\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\uff0c \u5e76\u4e14\u5b57\u7b26\u548c\u7801\u4f4d\u662f\u53cc\u5c04\u7684 \u3002 \u81f3\u4e8e\u7801\u4f4d\u662f\u600e\u4e48\u5206\u914d\u7684\uff0c\u5c31\u4e0d\u77e5\u9053\u4e86\uff0c\u53ef\u80fd\u6bcf\u4e2a\u5b57\u7b26\u90fd\u6709\u81ea\u5df1\u7684\u60f3\u6cd5\u3002 \u6700\u65e9\u7684\u7f16\u7801\u5b57\u7b26\u96c6\u662fASCII\uff0c\u4f46\u66f4\u51c6\u786e\u6765\u8bf4\uff0cASCII\u4f7f\u7528\u7684\u662f\u7b80\u5355\u7f16\u7801\u6a21\u578b\u3002\u7b80\u5355\u7f16\u7801\u6a21\u578b\u5e76\u6ca1\u6709\u73b0\u4ee3\u7f16\u7801\u6a21\u578b\u8fd9\u4e48\u591a\u6982\u5ff5\u3002\u6700\u5e38\u89c1\u7684\u7f16\u7801\u5b57\u7b26\u96c6\u5c31\u662f UCS\uff08Universal Character Set\uff09\u3002 ASCII\u7801 \u5148\u6765\u8bf4\u8bf4ASCII\u7801\u3002ASCII \u7801\u4e00\u5171\u89c4\u5b9a\u4e86128\u4e2a\u5b57\u7b26\u7684\u7801\u4f4d\uff08\u5305\u62ec32\u4e2a\u4e0d\u80fd\u6253\u5370\u51fa\u6765\u7684\u63a7\u5236\u7b26\u53f7\uff09\u3002ASCII\u7801\u7528\u4e86\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u8fd9128\u4e2a\u5b57\u7b26\u7684\u7801\u4f4d\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u7801\u4f4d\u53ea\u5360\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u540e7\u4f4d\uff0c\u6700\u524d\u9762\u7684\u4e00\u4f4d\u89c4\u5b9a\u4e3a0\u3002 ASCII\u7801\u7684\u5c40\u9650 \u82f1\u8bed\u7528128\u4e2a\u7b26\u53f7\u7f16\u7801\u5c31\u591f\u4e86\uff0c\u4f46\u662f\u7528\u6765\u8868\u793a\u5176\u4ed6\u5370\u6b27\u8bed\u7cfb\u7684\u8bed\u8a00\uff0c128\u4e2a\u7b26\u53f7\u662f\u4e0d\u591f\u7684\u3002\u6bd4\u5982\uff0c\u5728\u6cd5\u8bed\u4e2d\uff0c\u5b57\u6bcd\u4e0a\u65b9\u6709\u6ce8\u97f3\u7b26\u53f7\uff0c\u5b83\u5c31\u65e0\u6cd5\u7528 ASCII \u7801\u8868\u793a\u3002 \u5b9e\u9645\u4e0a\uff0cASCII\u7801\u7684\u8868\u793a\u5360\u7528\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u540e7\u4f4d\uff0c\u4e00\u4e2a\u5b57\u8282\u6709 8 bit\uff0cbit \u662f\u8ba1\u7b97\u673a\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4e00\u4e2abit\u6709 0 \u548c 1 \u4e24\u79cd\u72b6\u6001\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u5b57\u8282\u6709 8 bit\uff0c\u6700\u591a\u53ef\u4ee5\u8868\u793a256\u79cd\u72b6\u6001\uff08$2^8=256$\uff09\u3002\u4e8e\u662f\uff0c\u4e00\u4e9b\u6b27\u6d32\u56fd\u5bb6\u5c31\u51b3\u5b9a\uff0c\u5229\u7528\u5b57\u8282\u4e2d\u95f2\u7f6e\u7684\u6700\u9ad8\u4f4d\u7f16\u5165\u65b0\u7684\u7b26\u53f7\u3002\u6bd4\u5982\uff0c\u6cd5\u8bed\u4e2d\u7684 \u00e9 \u7684\u7f16\u7801\u4e3a130\uff08\u4e8c\u8fdb\u5236 10000010 \uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u4e9b\u6b27\u6d32\u56fd\u5bb6\u4f7f\u7528\u7684\u7f16\u7801\u4f53\u7cfb\uff0c\u53ef\u4ee5\u8868\u793a\u6700\u591a256\u4e2a\u7b26\u53f7\u3002 \u867d\u7136\u8fd9\u6837\u505a\u89e3\u51b3\u4e86\u5370\u6b27\u8bed\u7cfb\u7684\u8bed\u8a00\u8868\u793a\u95ee\u9898\uff0c\u4f46\u662f\uff0c\u53c8\u4ea7\u751f\u4e86\u65b0\u7684\u95ee\u9898\u3002\u4e0d\u540c\u7684\u56fd\u5bb6\u6709\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u56e0\u6b64\uff0c\u54ea\u6015\u5b83\u4eec\u90fd\u4f7f\u7528256\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u4ee3\u8868\u7684\u5b57\u6bcd\u5374\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\uff0c130\u5728\u6cd5\u8bed\u7f16\u7801\u4e2d\u4ee3\u8868\u4e86 \u00e9 \uff0c\u5728\u5e0c\u4f2f\u6765\u8bed\u7f16\u7801\u4e2d\u5374\u4ee3\u8868\u4e86\u5b57\u6bcd Gimel ( \u05d2 )\uff0c\u5728\u4fc4\u8bed\u7f16\u7801\u4e2d\u53c8\u4f1a\u4ee3\u8868\u53e6\u4e00\u4e2a\u7b26\u53f7\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u6b27\u6d32\u56fd\u5bb6\u4f7f\u7528\u7684\u7f16\u7801\u867d\u7136\u90fd\u517c\u5bb9ASCII\u7801\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684\u7f16\u7801\u3002 \u53e6\u5916\uff0c\u867d\u7136\u5370\u6b27\u8bed\u7cfb\u7684\u8bed\u8a00\u7f16\u7801\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u4f46\u8fd8\u5f88\u591a\u56fd\u5bb6\u7684\u8bed\u8a00\u7f16\u7801\u4e0d\u80fd\u53ea\u7528\u4e00\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u4f8b\u5982\u4e2d\u6587\u3002\u4e00\u4e2a\u5b57\u8282\u6700\u591a\u8868\u793a258\u4e2a\u5b57\u7b26\uff0c\u800c\u6c49\u5b57\u5374\u53ef\u80fd\u591a\u8fbe10\u4e07\u4e2a\uff0c\u4e00\u4e2a\u5b57\u8282\u5b8c\u5168\u4e0d\u591f\u7528\u3002\u4e8e\u662f\uff0c\u4e2d\u56fd\u5c31\u5236\u5b9a\u4e86\u81ea\u5df1\u7684\u7f16\u7801\u6807\u51c6\u2014\u2014GB2312\u3002GB2312\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u5e76\u4e14\u628a\u6570\u5b66\u7b26\u53f7\u3001\u7f57\u9a6c\u5e0c\u814a\u7684\u5b57\u6bcd\u3001\u65e5\u6587\u7684\u5047\u540d\u4eec\u90fd\u7f16\u8fdb\u53bb\u4e86\uff0c\u8fdeASCII\u7801\u91cc\u9762\u672c\u6765\u5c31\u6709\u7684\u6570\u5b57\u3001\u6807\u70b9\u3001\u5b57\u6bcd\u90fd\u7528\u4e24\u4e2a\u5b57\u8282\u957f\u7684\u7f16\u7801\u8868\u793a\uff0c\u8fd9\u5c31\u662f\u5e38\u8bf4\u7684\u5168\u89d2\u5b57\u7b26\u3002 \u4f46\u5f88\u5feb\uff0c\u6211\u4eec\u5c31\u53d1\u73b0GB2312\u4e5f\u4e0d\u591f\u7528\u4e86\uff0c\u56e0\u4e3a\u4e2d\u56fd\u7684\u6c49\u5b57\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u5728GB2312\u7684\u57fa\u7840\u4e0a\u53c8\u5236\u5b9a\u4e86GBK\u6807\u51c6\u3002 \u53ef\u4ee5\u60f3\u5f97\u5230\u7684\u662f\uff0c\u5168\u4e16\u754c\u6709\u4e0a\u767e\u79cd\u8bed\u8a00\uff0c\u65e5\u672c\u628a\u65e5\u6587\u7f16\u5230 Shift_JIS \u91cc\uff0c\u97e9\u56fd\u628a\u97e9\u6587\u7f16\u5230 Euc-kr \u91cc\uff0c\u5404\u56fd\u6709\u5404\u56fd\u7684\u6807\u51c6\uff0c\u5c31\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u51fa\u73b0\u51b2\u7a81\uff0c\u7ed3\u679c\u5c31\u662f\uff0c\u5728\u591a\u8bed\u8a00\u6df7\u5408\u7684\u6587\u672c\u4e2d\uff0c\u663e\u793a\u51fa\u6765\u4f1a\u6709\u4e71\u7801\u3002 Universal Character Set UCS\u5c31\u662f\u7edf\u4e00\u5b57\u7b26\u96c6\uff0c\u5c31\u662f\u7531 ISO/IEC 10646\u6240\u5b9a\u4e49\u7684\u7f16\u7801\u5b57\u7b26\u96c6\u3002\u901a\u5e38\u8bf4\u7684\u201cUnicode\u5b57\u7b26\u96c6\u201c\u6307\u7684\u5c31\u662f\u5b83\u2014\u2014\u7edf\u4e00\u5b57\u7b26\u96c6\u3002 \u4e0d\u8fc7Unicode\u672c\u8eab\u6307\u7684\u662f\u4e00\u7cfb\u5217\u7528\u4e8e\u8ba1\u7b97\u673a\u8868\u793a\u6240\u6709\u8bed\u8a00\u5b57\u7b26\u7684 \u6807\u51c6 \u3002 \u6b63\u5982\u4e0a\u4e00\u8282\u6240\u8bf4\uff0c\u4e16\u754c\u4e0a\u5b58\u5728\u7740\u591a\u79cd\u7f16\u7801\u65b9\u5f0f\uff0c\u540c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u53ef\u4ee5\u88ab\u89e3\u91ca\u6210\u4e0d\u540c\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u8981\u60f3\u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5c31\u5fc5\u987b\u77e5\u9053\u5b83\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5426\u5219\u7528\u9519\u8bef\u7684\u7f16\u7801\u65b9\u5f0f\u89e3\u8bfb\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\u4eba\u4eec\u610f\u8bc6\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e8e\u662f\uff0cUCS\u5e94\u8fd0\u800c\u751f\u3002UCS\u628a\u6240\u6709\u8bed\u8a00\u90fd\u7edf\u4e00\u5230\u4e00\u5957\u7f16\u7801\u91cc\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u518d\u6709\u4e71\u7801\u95ee\u9898\u4e86\u3002 Unicode\u6807\u51c6\u4e5f\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u4f46\u6700\u5e38\u7528\u7684\u662f\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u5982\u679c\u8981\u7528\u5230\u975e\u5e38\u504f\u50fb\u7684\u5b57\u7b26\uff0c\u5c31\u9700\u89814\u4e2a\u5b57\u8282\uff09\u3002\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u548c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u76f4\u63a5\u652f\u6301Unicode\u3002 Unicode \u662f\u4e00\u4e2a\u5f88\u5927\u7684\u96c6\u5408\uff0c\u73b0\u5728\u7684\u89c4\u6a21\u53ef\u4ee5\u5bb9\u7eb3100\u591a\u4e07\u4e2a\u7b26\u53f7\u3002\u6bcf\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u90fd\u4e0d\u4e00\u6837\uff0c\u53ef\u4ee5\u67e5\u8be2 unicode.org \uff0c\u6216\u8005\u4e13\u95e8\u7684 \u6c49\u5b57\u5bf9\u5e94\u8868 \u3002 \u53e6\u5916\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6309\u7167Unicode9.0.0\u7684\u6807\u51c6\uff0cUCS\u7406\u8bba\u4e0a\u6536\u5f55\u4e86128237\u4e2a\u5b57\u7b26\uff0c\u4f46\u5b9e\u9645\u80fd\u7528\u7684\u6700\u5927\u7684\u7801\u4f4d\u70b9\u5728128720\u3002\u56e0\u4e3aUCS\u7684\u7801\u4f4d\u4e0d\u662f\u8fde\u7eed\u5206\u914d\u7684\uff0c\u5373\u4e2d\u95f4\u6709\u4e00\u90e8\u5206\u7801\u4f4d\u6ca1\u6709\u5206\u914d\u5bf9\u5e94\u7684\u5b57\u7b26\u3002 \u5b9e\u9645\u4e0a\uff0cUnicode\u5b9e\u9645\u5206\u914d\u7684\u7801\u4f4d\u662f 0x0000~0x0xD7FF \u4e0e 0xE000~0x10FFFF \u8fd9\u4e24\u6bb5\u7684\u3002\u4e2d\u95f4 0xD800~0xDFFF \u8fd92048\u4e2a\u7801\u4f4d\u7559\u4f5c\u5b83\u7528\u7684\uff0c\u5e76\u4e0d\u5bf9\u5e94\u5b9e\u9645\u7684\u5b57\u7b26\u3002\u5982\u679c\u5728Python\u79cd\u76f4\u63a5\u5c1d\u8bd5\u53bb\u8f93\u51fa\u8fd9\u4e2a\u7801\u4f4d\u6bb5\u7684\u2019\u5b57\u7b26\u2019\uff0cPython\u4f1a\u544a\u8bc9\u4f60\u8fd9\u662f\u4e2a\u975e\u6cd5\u5b57\u7b26\u3002 UCS \u7684\u95ee\u9898 UCS \u53ea\u662f\u7f16\u7801\u5b57\u7b26\u96c6 \uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u5b57\u7b26\u7684\u4e8c\u8fdb\u5236\u6570\u503c\uff0c\u5374\u6ca1\u6709\u89c4\u5b9a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u5b58\u50a8\u3002 \u8fd9\u91cc\u8bf4\u7684\u50a8\u5b58\u662f\u50a8\u5b58\u5728 ROM \u4e2d\uff0c\u6bd4\u5982\u8bf4\u786c\u76d8 \u3002 \u6bd4\u5982\uff0c\u6c49\u5b57 \u4e25 \u7684 Unicode \u662f\u5341\u516d\u8fdb\u5236\u6570 4E25 \uff0c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\u662f 100111000100101 \uff0c\u8db3\u8db3\u670915\u4f4d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u63a5\u50a8\u5b58\u8fd9\u4e2a\u7b26\u53f7\u7684\u8868\u793a\u81f3\u5c11\u9700\u89812\u4e2a\u5b57\u8282\u3002\u800c\u6392\u5e8f\u5728\u66f4\u540e\u9762\u7684\u7b26\u53f7\uff0c\u53ef\u80fd\u9700\u89813\u4e2a\u5b57\u8282\u6216\u80054\u4e2a\u5b57\u8282\uff0c\u751a\u81f3\u66f4\u591a\u3002 \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u50a8\u5b58Unicode\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u4f46\u8fd9\u5c31\u6709\u4e24\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u624d\u80fd\u533a\u522b Unicode \u548c ASCII \uff1f\u8ba1\u7b97\u673a\u600e\u4e48\u77e5\u9053\u4e09\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u800c\u4e0d\u662f\u5206\u522b\u8868\u793a\u4e09\u4e2a\u7b26\u53f7\u5462\uff1f\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5219\u662f Unicode \u7f16\u7801\u9700\u8981\u5360\u7528\u591a\u4e2a\u5b57\u8282\uff0c\u5982\u679c Unicode \u7edf\u4e00\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u7b26\u53f7\u7528\u4e09\u4e2a\u6216\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u90a3\u4e48\u82f1\u6587\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f\u5219\u6bd4\u4f7f\u7528ASCII\u7801\u5927\u51fa\u4e24\u4e09\u500d\u3002\u8fd9\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u56e0\u6b64\u7528Unicode\u7801\u76f4\u63a5\u50a8\u5b58\u6587\u4ef6\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\u3002 \u53e6\u5916\uff0cUCS\u662f\u5f00\u653e\u7684\uff0c\u672a\u6765\u53ef\u80fd\u6709\u66f4\u591a\u7684\u5b57\u7b26\u52a0\u5165\u8fdb\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7406\u8bba\u4e0aUCS\u9700\u8981\u65e0\u9650\u7684 \u7801\u4f4d \uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u7684\u6574\u5f62\u80fd\u8868\u793a\u7684\u6574\u6570\u8303\u56f4\u662f\u6709\u9650\u7684\u3002 \u4f8b\u5982\uff1a \u65e0\u7b26\u53f7\u6574\u5f62\uff08unsigned char, uint8\uff09\u7684\u53ef\u7528\u7801\u4f4d\u53ea\u67090~0xFF\uff0c\u5171256\u4e2a \u65e0\u7b26\u53f7\u77ed\u6574\u5f62\uff08unsigned short, uint16\uff09\u7684\u53ef\u7528\u7801\u4f4d\u53ea\u67090~0xFFFF\uff0c\u517165536\u4e2a \u6574\u5f62\uff08unsigned int, uint32\uff09\u80fd\u8868\u793a\u7684\u7801\u4f4d\u67090~0xFFFFFFFF\uff0c\u51714294967295\u4e2a \u6240\u4ee5\uff0c\u5982\u4f55\u7528\u6709\u9650\u7684\u6574\u6570\u8303\u56f4\u8868\u793a\u65e0\u9650\u7684\u7801\u4f4d\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u95ee\u9898\u548cUnicode\u7684\u6587\u4ef6\u50a8\u5b58\u662f\u540c\u4e00\u4e2a\u95ee\u9898\u3002\u56e0\u4e3a\uff0c\u5982\u679c\u6709\u65b9\u6848\u53ef\u4ee5\u8ba9\u6709\u9650\u7684\u5b57\u8282\u8868\u793a\u65e0\u9650\u7684\u7801\u4f4d\uff0c\u4e5f\u5c31\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u5b57\u8282\u8868\u793a\u539f\u6765\u9700\u8981\u591a\u4e2a\u5b57\u8282\u7684Unicode\u7801\u3002 \u8fd9\u4e24\u4e2a\u95ee\u9898\u9020\u6210\u4e86Unicode \u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u65e0\u6cd5\u63a8\u5e7f\uff0c \u76f4\u5230\u4e92\u8054\u7f51\u7684\u51fa\u73b0 \u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u867d\u7136\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u4e86UCS\u5b57\u7b26\u96c6\uff0c\u4f46\u4e5f\u53ea\u662f\u89e3\u51b3\u4e86\u5b57\u7b26\u7684\u7f16\u7801\u95ee\u9898\uff0c\u4f46\u5b57\u7b26\u7684\u89e3\u7801\u95ee\u9898\u8fd8\u6ca1\u89e3\u51b3\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u7528\u5230\u5b57\u7b26\u7f16\u7801\u8868\u3002 \u5b57\u7b26\u7f16\u7801\u8868 CEF \u5b57\u7b26\u7f16\u7801\u8868\u662f\u4e00\u4e2a\u5c06 Unicode\u6807\u91cf\u503c (Unicode scalar value) \u4e00\u4e00\u6620\u5c04\u4e3a \u7801\u5143\u5e8f\u5217(Code Unit Sequences) \u7684\u6620\u5c04\u3002 \u4e4b\u6240\u4ee5\u5fc5\u987b\u662f\u4e00\u4e00\u6620\u5c04\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u4eec\u4e0d\u5149\u8981\u7f16\u7801\uff0c\u4e5f\u8981\u89e3\u7801\u3002 Code unit: The minimal bit combination that can represent a unit of encoded text for processing or interchange. \u7801\u5143\u662f\u80fd\u7528\u4e8e\u5904\u7406\u6216\u4ea4\u6362\u7f16\u7801\u6587\u672c\u7684\u6700\u5c0f\u6bd4\u7279\u7ec4\u5408\u3002\u901a\u5e38\u8ba1\u7b97\u673a\u5904\u7406\u5b57\u7b26\u7684\u7801\u5143\u4e3a\u4e00\u5b57\u8282\uff0c\u53738bit\u3002 \u5728Unicode\u4e2d\uff0c\u6307\u5b9a\u4e86\u4e09\u79cd\u6807\u51c6\u7684\u5b57\u7b26\u7f16\u7801\u8868\uff1aUTF-8\u3001UTF-16\u3001UTF-32\u3002\u5206\u522b\u5c06Unicode\u6807\u91cf\u503c\u6620\u5c04\u4e3a\u6bd4\u7279\u6570\u4e3a8\u300116\u300132\u7684\u7801\u5143\u7684\u5e8f\u5217\u3002\u8fd8\u6709\u4e00\u4e9b\u975e\u6807\u51c6\u7684CEF\uff0c\u5982UCS-2\u3001UCS-4\uff0c\u5728\u6b64\u4e0d\u591a\u4ecb\u7ecd\u3002 \u5728\u8ba1\u7b97\u673a\u4e2d\uff0cchar\u5176\u5b9e\u662f\u4e00\u79cd\u6574\u5f62\uff0c\u800c\u6574\u5f62\u7684\u8ba1\u7b97\u5f80\u5f80\u4ee5\u8ba1\u7b97\u673a\u7684 \u5b57\u957f \u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7840\u5355\u5143\uff0c\u901a\u5e38\u6765\u8bb2\uff0c\u4e5f\u5c31\u662f4\u5b57\u8282\u3002Unicode\u5b9a\u4e49\u4e86\u4e09\u79cd\u4e0d\u540c\u7684CEF\uff0c\u6b63\u597d\u5bf9\u5e94\u4e86\u8ba1\u7b97\u673a\u4e2d\u6700\u5e38\u89c1\u7684\u4e09\u79cd\u6574\u5f62\u957f\u5ea6\uff08uint8\u3001uint16\u3001uint32\uff09\u3002 \u5982\u4f55\u5c06\u4e00\u4e2a\u65e0\u9650\u5927\u7684\u6574\u6570\u96c6\u5408\u4e00\u4e00\u6620\u5c04\u4e3a\u6307\u5b9a\u5b57\u5bbd\u7684\u7801\u5143\u5e8f\u5217\uff1f \u8fd9\u4e2a\u95ee\u9898\u662f\u901a\u8fc7\u53d8\u957f\u7f16\u7801\u6765\u89e3\u51b3\u7684\u3002 \u65e0\u8bba\u662fUTF-8\u8fd8\u662fUTF-16\uff0c\u672c\u8d28\u601d\u60f3\u90fd\u662f\u901a\u8fc7\u9884\u7559\u6807\u8bb0\u4f4d\u6765\u6307\u793a\u7801\u5143\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u4ece\u800c\u5b9e\u73b0\u53d8\u957f\u7f16\u7801\u7684\u3002\u8fd9\u6837\uff0c\u5b57\u7b26\u7f16\u7801\u8868\u5c31\u89e3\u51b3UCS\u7684\u4e24\u4e2a\u95ee\u9898\u3002 UTF-8 \u662f\u5728\u4e92\u8054\u7f51\u4e0a\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd Unicode \u7684\u5b9e\u73b0\u65b9\u5f0f\uff0cUTF-16\u548cUTF-32\u5219\u7528\u5f97\u5f88\u5c11\u3002 UTF-8 \u5f3a\u8c03\u4e00\u4e0bUnicode\u548cUTF-8\u7684\u533a\u522b\uff1aUTF-8\u662fUnicode\u7684\u4e00\u79cd\u50a8\u5b58\u5f62\u5f0f\uff0c\u4f46\u8ba1\u7b97\u673a\u53ea\u80fd\u8bfb\u53d6\u4e8c\u8fdb\u5236\u7684\u5185\u5bb9\uff0c\u56e0\u6b64\u8ba1\u7b97\u673a\u8bfb\u53d6UTF-8\u7f16\u7801\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5c06\u6587\u4ef6\u8f6c\u7801\u4e3aUnicode\uff08Unicode\u662f\u5b8c\u5168\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6587\u4ef6\u4ee5UTF-8\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u4ee5Unicode\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\uff08Ram\uff09\u4e2d\u3002 \u4f8b\u5982\uff1a \u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u7edf\u4e00\u4f7f\u7528Unicode\u7f16\u7801\uff0c\u5f53\u9700\u8981\u4fdd\u5b58\u5230\u786c\u76d8\u6216\u8005\u9700\u8981\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u5c31\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u3002 \u7528\u8bb0\u4e8b\u672c\u7f16\u8f91\u7684\u65f6\u5019\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6\u7684UTF-8\u5b57\u7b26\u88ab\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26\u5230\u5185\u5b58\u91cc\uff0c\u7f16\u8f91\u5b8c\u6210\u540e\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u518d\u628aUnicode\u8f6c\u6362\u4e3aUTF-8\u4fdd\u5b58\u5230\u6587\u4ef6\u3002 \u6d4f\u89c8\u7f51\u9875\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u628a\u52a8\u6001\u751f\u6210\u7684Unicode\u5185\u5bb9\u8f6c\u6362\u4e3aUTF-8\u518d\u4f20\u8f93\u5230\u6d4f\u89c8\u5668\u3002\u5f88\u591a\u7f51\u9875\u7684\u6e90\u7801\u4e0a\u4f1a\u6709\u7c7b\u4f3c <meta charset=\"UTF-8\" /> \u7684\u4fe1\u606f\uff0c\u8868\u793a\u8be5\u7f51\u9875\u6b63\u662f\u7528\u7684UTF-8\u7f16\u7801\u3002 UTF-8 \u6700\u5927\u7684\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u5b83\u662f\u4e00\u79cd\u53d8\u957f\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u5b83\u53ef\u4ee5\u4f7f\u75281~4\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u6839\u636e\u4e0d\u540c\u7684\u7b26\u53f7\u800c\u53d8\u5316\u5b57\u8282\u957f\u5ea6\u3002 UTF-8 \u7684\u7f16\u7801\u89c4\u5219\u5f88\u7b80\u5355\uff0c\u53ea\u6709\u4e8c\u6761\uff1a 1\uff09\u5bf9\u4e8e\u5355\u5b57\u8282\u7684\u7b26\u53f7\uff0c\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u97627\u4f4d\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002\u56e0\u6b64\u5bf9\u4e8e\u82f1\u8bed\u5b57\u6bcd\uff0cUTF-8 \u7f16\u7801\u548c ASCII \u7801\u662f\u76f8\u540c\u7684\u3002 2\uff09\u5bf9\u4e8e n \u5b57\u8282\u7684\u7b26\u53f7\uff08 n > 1 \uff09\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d n \u4f4d\u90fd\u8bbe\u4e3a 1 \uff0c\u7b2c n + 1 \u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u9762\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u4e00\u5f8b\u8bbe\u4e3a 10 \u3002\u5269\u4e0b\u7684\u6ca1\u6709\u63d0\u53ca\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5168\u90e8\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002 \u4e0b\u8868\u603b\u7ed3\u4e86\u7f16\u7801\u89c4\u5219\uff0c\u5b57\u6bcd x \u8868\u793a\u53ef\u7528\u7f16\u7801\u7684\u4f4d\u3002 Unicode\u7b26\u53f7\u8303\u56f4 | UTF-8\u7f16\u7801\u65b9\u5f0f (\u5341\u516d\u8fdb\u5236) | \uff08\u4e8c\u8fdb\u5236\uff09 --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \u8ddf\u636e\u4e0a\u8868\uff0c\u89e3\u8bfb UTF-8 \u7f16\u7801\u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u4e00\u4e2a\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u662f 0 \uff0c\u5219\u8fd9\u4e2a\u5b57\u8282\u5355\u72ec\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\uff1b\u5982\u679c\u7b2c\u4e00\u4f4d\u662f 1 \uff0c\u5219\u8fde\u7eed\u6709\u591a\u5c11\u4e2a 1 \uff0c\u5c31\u8868\u793a\u5f53\u524d\u5b57\u7b26\u5360\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u3002 \u4e0b\u9762\uff0c\u8fd8\u662f\u4ee5\u6c49\u5b57 \u4e25 \u4e3a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5b9e\u73b0 UTF-8 \u7f16\u7801\u3002 \u4e25 \u7684 Unicode \u662f 4E25 \uff08 100111000100101 \uff09\uff0c\u6839\u636e\u4e0a\u8868\uff0c\u53ef\u4ee5\u53d1\u73b0 4E25 \u5904\u5728\u7b2c\u4e09\u884c\u7684\u8303\u56f4\u5185\uff08 0000 0800 - 0000 FFFF \uff09\uff0c\u56e0\u6b64 \u4e25 \u7684 UTF-8 \u7f16\u7801\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff0c\u5373\u683c\u5f0f\u662f 1110xxxx 10xxxxxx 10xxxxxx \u3002\u7136\u540e\uff0c\u4ece \u4e25 \u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u4ece\u540e\u5411\u524d\u586b\u5165\u683c\u5f0f\u4e2d\u7684 x \uff0c\u591a\u51fa\u7684\u4f4d\u8865 0 \u3002\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\uff0c \u4e25 \u7684 UTF-8 \u7f16\u7801\u662f 11100100 10111000 10100101 \uff0c\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u5c31\u662f E4B8A5 \u3002 UTF-8\u7f16\u7801\u6709\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u5c31\u662fASCII\u7f16\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u88ab\u770b\u6210\u662fUTF-8\u7f16\u7801\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\uff0c\u5927\u91cf\u53ea\u652f\u6301ASCII\u7f16\u7801\u7684\u5386\u53f2\u9057\u7559\u8f6f\u4ef6\u53ef\u4ee5\u5728UTF-8\u7f16\u7801\u4e0b\u7ee7\u7eed\u5de5\u4f5c\u3002 \u5b57\u7b26\u7f16\u7801\u65b9\u6848 CES (CHARACTER ENCODING SCHEMA) \u7565 Python\u9ed8\u8ba4\u5b57\u7b26\u96c6 Python\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6\u5728\u51e0\u4e2a\u5927\u7248\u672c\u4e2d\u6709\u8fc7\u6539\u53d8\uff0c\u4ee5\u4e0b\u662f\u5404\u4e2a\u7248\u672c\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6\u5217\u4e3e\uff1a Python2.1\u53ca\u4ee5\u524d\uff1alatin1 Python2.3\u53ca\u4e4b\u540e\uff0cPython2.5\u4ee5\u524d\uff1alatin1 \uff08\u4f46\u662f\u4f1a\u5bf9\u975eASCII\u5b57\u7b26\u96c6\u5b57\u7b26\u63d0\u51faWARNING\uff09 Python2.5\u53ca\u4ee5\u540e\uff1aASCII Python3\uff1aUnicode\uff08UTF-8\uff09 \u53c2\u8003 \u5b57\u7b26\u7f16\u7801\u7b14\u8bb0\uff1aASCII\uff0cUnicode \u548c UTF-8 \u5341\u5206\u949f\u641e\u6e05\u5b57\u7b26\u96c6\u548c\u5b57\u7b26\u7f16\u7801 \u5173\u4e8ePython\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6 \u73b0\u4ee3\u7f16\u7801\u6a21\u578b \u5f7b\u5e95\u5f04\u61c2Unicode\u7f16\u7801 Unicode \u5b57\u7b26\u7f16\u7801\u6a21\u578b_\u62bd\u8c61\u5b57\u7b26\u5e93(ACR)","title":"1.5.\u5b57\u7b26\u7f16\u7801"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#_1","text":"\u8ba1\u7b97\u673a\u7684 \u7f16\u7801\u6a21\u578b \u8d1f\u8d23\u5c06\u663e\u793a\u5728\u5c4f\u5e55\u7684\u5b57\u7b26\u8f6c\u6362\u6210\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u503c\uff0c\u6216\u8005\u5c06\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u503c\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684\u5b57\u7b26\u3002\u7f16\u7801\u6a21\u578b\u6709\u4e24\u79cd\uff1a \u7b80\u5355\u7f16\u7801\u6a21\u578b\uff0c\u5982ASCII\u7801 \u73b0\u4ee3\u7f16\u7801\u6a21\u578b \u73b0\u4ee3\u7f16\u7801\u6a21\u578b\u81ea\u5e95\u5411\u4e0a\u5206\u4e3a\u4e94\u4e2a\u5c42\u6b21\uff1a \u62bd\u8c61\u5b57\u7b26\u96c6(Abstract Character Repertoire) \u7f16\u7801\u5b57\u7b26\u96c6(Coded Character Set) \u5b57\u7b26\u7f16\u7801\u8868(Character Encoding Form) \u5b57\u7b26\u7f16\u7801\u65b9\u6848(Character Encoding Schema) \u4f20\u8f93\u7f16\u7801\u8bed\u6cd5(Transfer Encoding Syntax) \u62bd\u8c61\u5b57\u7b26\u96c6\u662f\u73b0\u4ee3\u7f16\u7801\u6a21\u578b\u7684\u6700\u5e95\u5c42\uff0c\u5b83\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u901a\u8fc7\u679a\u4e3e\u6307\u660e\u4e86\u6240\u5c5e\u7684\u6240\u6709\u62bd\u8c61\u5b57\u7b26\u3002\u4f46\u662f\u8981\u4e86\u89e3\u62bd\u8c61\u5b57\u7b26\u96c6\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u662f \u5b57\u7b26 \u4e0e \u62bd\u8c61\u5b57\u7b26","title":"\u7f16\u7801\u6a21\u578b"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#character-char","text":"\u5b57\u7b26\u6709\u4e24\u79cd\u542b\u4e49\uff1a \u5b57\u7b26\u662f\u8868\u793a\u6587\u672c\u6570\u636e\u7684 \u4fe1\u606f\u5355\u5143 \uff0c\u5177\u6709\u67d0\u79cd\u89c6\u89c9\u8868\u793a\u5f62\u5f0f\u3002 \u4fe1\u606f\u5355\u5143\u5373\u662f\u6307\u7ec4\u6210\u6587\u672c\u8bed\u8a00\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4f8b\u5982\u4e2d\u6587\u79cd\u7684\u6bcf\u4e00\u4e2a\u6c49\u5b57\u3001\u6807\u70b9\uff0c\u82f1\u6587\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u3002 \u5b57\u7b26\u662f\u62bd\u8c61\u5b57\u7b26\u7684\u540c\u4e49\u8bcd\u3002 \u5728 Unicode \u6587\u6863\u7684\u5927\u591a\u6570\u8bed\u5883\u4e2d\uff0c\u5b57\u7b26\u548c\u62bd\u8c61\u5b57\u7b26\u88ab\u89c6\u4e3a\u540c\u4e49\u8bcd\uff08\u8fd9\u610f\u5473\u7740\u62bd\u8c61\u5b57\u7b26\u5e93\u4e0e\u5b57\u7b26\u5e93(character repertoire)\u4e5f\u88ab\u89c6\u4e3a\u540c\u4e49\u8bcd\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\u5b57\u7b26\u662f\u6709\u5b57\u5f62\u7684\u3002","title":"\u5b57\u7b26 (CHARACTER, CHAR)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#_2","text":"\u5b57\u5f62 \uff1a\u5b57\u7684\u5f62\u4f53\u3002\u4f8b\u5982\u4e00\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6709\u6b63\u4f53\u3001\u659c\u4f53\u3001\u624b\u5199\u4f53\u7b49\u7b49\uff0c\u5373\u4e00\u4e2a\u62bd\u8c61\u5b57\u7b26\u53ef\u4ee5\u7ed3\u5408\u4e0d\u540c\u7684\u5b57\u5f62\uff0c\u4ece\u800c\u751f\u6210\u4e0d\u540c\u7684\u5b57\u7b26\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6709\u591a\u4e2a\u5b57\u5f62\u3002 \u4e00\u4e2a\u5b57\u5f62\u4e5f\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u5b57\u7b26\uff08\u8be5\u5b57\u7b26\u540d\u4e3a fi ligature\uff09\uff1a \u6709\u65f6\uff0c\u751a\u81f3\u5b58\u5728\u591a\u4e2a\u5b57\u5f62\u5bf9\u5e94\u591a\u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0cfi ligature \u7684\u5b57\u5f62\u4e5f\u53ef\u80fd\u662f\u7531\u4e00\u4e2a \u5b57\u5f62\u5e8f\u5217 \u7ec4\u5408\u800c\u6210\u7684\u3002 \u5728\u663e\u793a\u67d0\u4e00\u5b57\u7b26\u65f6\uff0c\u662f\u4f7f\u7528\u5355\u4e2a\u5b57\u5f62\u8fd8\u662f\u4f7f\u7528\u5b57\u5f62\u5e8f\u5217\uff0c\u662f\u7531\u5b57\u4f53\u548c\u6e32\u67d3\u8f6f\u4ef6\u51b3\u5b9a\u7684\u3002 \u4e00\u4e2a\u5b57\u5f62\u4e0d\u4ec5\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u5b57\u5f62\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u91cd\u97f3\uff08accented\uff09\u5b57\u7b26\u53ef\u4ee5\u7531\u5355\u4e2a\u5b57\u5f62\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7531\u4e00\u4e2a\u5b57\u5f62\u5e8f\u5217\u6765\u8868\u793a\u3002\u53e6\u5916\uff0c\u6240\u8981\u8868\u793a\u7684\u5185\u5bb9\u672c\u8eab\u4e5f\u53ef\u80fd\u662f\u7531\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u7ec4\u6210\u7684\uff0c\u5982\u4e0b\u56fe\u4e2d\u7684\u7b2c\u4e8c\u884c\u3002 \u5728\u6709\u4e9b\u56fd\u5bb6\u7684\u8bed\u8a00\u4e2d\uff0c\u5728\u7ed8\u5236\u5b57\u7b26\u7684\u5177\u4f53\u5f62\u72b6\u65f6\uff0c\u8fd8\u9700\u8981\u8003\u8651\u5176\u5468\u56f4\u7684\u5b57\u5f62\uff0c\u8fd9\u79cd\u5b57\u5f62\u88ab\u79f0\u4f5c contextual forms \u3002\u4f8b\u5982\uff0c\u963f\u62c9\u4f2f\u5b57\u7b26 heh \u5c31\u5177\u6709\u56db\u79cd\u4e0a\u4e0b\u6587\u5b57\u5f62\u3002","title":"\u5b57\u7b26\u4e0e\u5b57\u5f62\u7684\u5173\u7cfb"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#abstract-chacacter","text":"\u62bd\u8c61\u5b57\u7b26 (Abstract Character)\uff1a\u7528\u4e8e\u7ec4\u7ec7\u3001\u63a7\u5236\u6216\u8868\u793a\u6587\u672c\u6570\u636e\u7684\u4fe1\u606f\u5355\u5143\u3002 \u5728\u8868\u793a\u6570\u636e\u65f6\uff0c\u62bd\u8c61\u5b57\u7b26\u662f\u8c61\u5f81\u6027\u7684\uff0c\u6ca1\u6709\u5177\u4f53\u7684\u5f62\u5f0f\uff0c\u5373\u62bd\u8c61\u5b57\u7b26\u4e0d\u5177\u6709\u5b57\u5f62\uff0c\u540c\u65f6\u62bd\u8c61\u5b57\u7b26\u4e5f\u533a\u522b\u4e8egrapheme\u3002 \u4ee5\u4e0a\u6982\u5ff5\u6765\u81ea\u4e8e\uff1a Glossary of Unicode Terms The Unicode\u00ae Standard Version 13.0 \u2013 Core Specification \u4ece\u5b57\u7b26\u548c\u62bd\u8c61\u5b57\u7b26\u7684\u5b9a\u4e49\u53ef\u4ee5\u770b\u51fa\uff0c\u5b57\u7b26\u662f\u62bd\u8c61\u5b57\u7b26\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e0d\u5305\u62ec\u7528\u4e8e\u7ec4\u7ec7\u3001\u63a7\u5236\u6587\u672c\u6570\u636e\u7684\u4fe1\u606f\u5355\u5143\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u662f\u53ef\u4ee5\u663e\u793a\u51fa\u6765\u7684\u4fe1\u606f\u5355\u5143\uff0c\u800c\u8fd8\u6709\u4e00\u4e9b\u4fe1\u606f\u5355\u5143\u662f\u7a7a\u767d\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u6253\u5370\u7684\u3002\u8fd9\u4e9b\u4e0d\u663e\u793a\u51fa\u6765\u7684\u5b57\u7b26\u5c5e\u4e8e\u62bd\u8c61\u5b57\u7b26\uff0c\u4f8b\u5982ASCII\u5b57\u7b26\u96c6\u4e2d\u7684NULL\u3002 \u65e0\u6cd5\u663e\u793a\u7684\u5b57\u7b26\u867d\u7136\u4e0d\u663e\u793a\u51fa\u6765\uff0c\u4f46\u4ecd\u7136\u5177\u6709\u67d0\u79cd\u8868\u793a\u5f62\u5f0f\uff0c\u4f8b\u5982 \\x00 \u3001 \\000 \u3001 NULL \u3001 0 \u53ef\u80fd\u7528\u4e8e\u8868\u793a ASCII \u5b57\u7b26\u96c6\u7684 NULL\u3002\u8fd9\u4e9b\u8868\u793a\u5f62\u5f0f\u90fd\u662fNULL\u7684\u4e0d\u540c\u5199\u6cd5\uff0c\u800c\u4e0d\u662fNULL\u672c\u8eab\u3002 \u62bd\u8c61\u5b57\u7b26\u4e0d\u4e00\u5b9a\u4e0e\u5b57\u7b26\u4e00\u4e00\u5bf9\u5e94\u3002\u56e0\u4e3a\u6709\u4e00\u4e9b\u62bd\u8c61\u5b57\u7b26\u6ca1\u6709\u88ab Unicode \u6807\u51c6\u76f4\u63a5\u7f16\u7801\uff0c\u8fd9\u901a\u5e38\u53ef\u4ee5\u7528\u5b57\u7b26\u5e8f\u5217\u7ec4\u5408\u8d77\u6765\u8868\u793a\u3002 \u56fe\u7247\u6765\u81ea The Unicode Standard \u7684\u7b2c8\u7248 UnicodeStandard-8.0 P 65\uff0c\u53c2\u8003\u81ea Abstract Character (Unicode) \u3002 \u8be5\u56fe\u8bf4\u660e\u4e86\u62bd\u8c61\u5b57\u7b26\u4e0e code points \u7684\u5173\u7cfb\uff0c\u62bd\u8c61\u5b57\u7b26\u53ef\u4ee5\u7531\u4e00\u4e2a\u5b57\u7b26\u7f16\u7801\uff0c\u4e5f\u53ef\u4ee5\u7531\u4e24\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7f16\u7801\u800c\u6210\u3002","title":"\u62bd\u8c61\u5b57\u7b26\uff08ABSTRACT CHACACTER\uff09"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#abstract-character-repertoire","text":"\u62bd\u8c61\u5b57\u7b26\u96c6\u662f \u62bd\u8c61\u5b57\u7b26\u7684\u65e0\u5e8f\u96c6\u5408 \u3002\u62bd\u8c61\u5b57\u7b26\u96c6\u51b3\u5b9a\u4e86\u6574\u4e2a\u5b57\u7b26\u96c6\u80fd\u591f\u4f7f\u7528\u7684\u6240\u6709\u5b57\u7b26\u3002\u5df2\u7ecf\u6709\u4e86\u5f88\u591a \u6807\u51c6 \u7684\u5b57\u7b26\u96c6\u5b9a\u4e49\u3002 \u6bd4\u5982US-ASCII\u3001UCS(Unicode)\u3001GBK\u90fd\u662f\uff08\u6216\u8005\u81f3\u5c11\u662f\uff09\u62bd\u8c61\u5b57\u7b26\u96c6\u3002 \u4e00\u4e2a\u5b57\u6bcd\u6216\u6587\u5b57\u53ef\u4ee5\u540c\u65f6\u5c5e\u4e8e\u591a\u4e2a\u5b57\u7b26\u96c6\uff0c\u4f8b\u5982\u82f1\u6587\u5b57\u6bcd A \u540c\u65f6\u5c5e\u4e8eUS-ASCII\u3001UCS\u3001GBK\u8fd9\u4e09\u4e2a\u5b57\u7b26\u96c6\uff0c\u800c \ud83d\ude02 \u4e0d\u5c5e\u4e8eUS-ASCII\u4e0eGBK\u5b57\u7b26\u96c6\uff0c\u4f46\u5c5e\u4e8eUCS\u5b57\u7b26\u96c6\u3002 \u62bd\u8c61\u5b57\u7b26\u96c6\u6709\u5f00\u653e\u4e0e\u5c01\u95ed\u4e4b\u5206\u3002ASCII\u62bd\u8c61\u5b57\u7b26\u96c6\u5b9a\u4e49\u4e86128\u4e2a\u62bd\u8c61\u5b57\u7b26\uff0c\u518d\u4e5f\u4e0d\u4f1a\u589e\u52a0\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5c01\u95ed\u5b57\u7b26\u96c6\u3002Unicode \u5c1d\u8bd5\u6536\u7eb3\u6240\u6709\u7684\u5b57\u7b26\uff0c\u4e00\u76f4\u5728\u4e0d\u65ad\u5730\u6269\u5f20\u4e4b\u4e2d\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u5b57\u7b26\u96c6\u3002","title":"\u62bd\u8c61\u5b57\u7b26\u96c6 (ABSTRACT CHARACTER REPERTOIRE)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#coded-character-set","text":"\u7f16\u7801\u5b57\u7b26\u96c6 \u662f\u4e00\u4e2a\u6bcf\u4e2a\u6240\u5c5e\u5b57\u7b26\u90fd\u5206\u914d\u4e86 \u7801\u4f4d \u7684 \u5b57\u7b26\u96c6 \u3002 \u524d\u9762\u8bf4\u8fc7\uff0c\u4eba\u4eec\u5e38\u5e38\u559c\u6b22\u5c06\u62bd\u8c61\u5b57\u7b26\u96c6\u53eb\u505a\u5b57\u7b26\u96c6\uff0c\u73b0\u5728\u4eba\u4eec\u53c8\u559c\u6b22\u5c06\u7f16\u7801\u5b57\u7b26\u96c6\u7b80\u79f0\u5b57\u7b26\u96c6\u3002\u4f46\u662f\u672c\u6587\u4e0d\u6b22\u8fce\u8fd9\u79cd\u6df7\u4e71\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u5c3d\u91cf\u4e0d\u4f1a\u4f7f\u7528\u5e26\u6709\u6b67\u4e49\u7684\u7b80\u79f0\uff0c\u6709\u4f7f\u7528\u201c\u5b57\u7b26\u96c6\u201d\u7684\u5730\u65b9\uff0c\u4e00\u5f8b\u6307\u4ee3\u62bd\u8c61\u5b57\u7b26\u96c6\u3002 \u62bd\u8c61\u5b57\u7b26\u96c6\u662f\u65e0\u5e8f\u7684\uff0c\u65e0\u5e8f\u7684\u96c6\u5408\u6ca1\u6709\u591a\u5927\u7684\u4f5c\u7528\uff0c\u6211\u4eec\u53ea\u80fd\u5224\u65ad\u67d0\u4e2a\u5b57\u7b26\u662f\u5426\u5c5e\u4e8e\u67d0\u4e2a\u62bd\u8c61\u5b57\u7b26\u96c6\uff0c\u4f46\u65e0\u6cd5\u65b9\u4fbf\u5730\u5f15\u7528\u62bd\u8c61\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\u3002\u6240\u4ee5\u4e3a\u4e86\u66f4\u597d\u7684\u63cf\u8ff0\u3001\u64cd\u4f5c\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u62bd\u8c61\u5b57\u7b26\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u5173\u8054\u4e00\u4e2a \u6570\u5b57\u7f16\u53f7 \uff0c\u8fd9\u4e2a\u6570\u5b57\u7f16\u53f7\u79f0\u4e4b\u4e3a \u7801\u4f4d(Code Point) \u3002\u6b64\u65f6\uff0c\u7f16\u7801\u5b57\u7b26\u96c6\u66f4\u50cf\u4e00\u4e2a\u5b57\u5178\uff08dictionary\uff09\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\u3002 \u4e60\u60ef\u4e0a\uff0c\u5206\u914d\u7ed9\u5b57\u7b26\u7684\u7801\u4f4d\u901a\u5e38\u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e00\u822c\u7528\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\uff0c \u5e76\u4e14\u5b57\u7b26\u548c\u7801\u4f4d\u662f\u53cc\u5c04\u7684 \u3002 \u81f3\u4e8e\u7801\u4f4d\u662f\u600e\u4e48\u5206\u914d\u7684\uff0c\u5c31\u4e0d\u77e5\u9053\u4e86\uff0c\u53ef\u80fd\u6bcf\u4e2a\u5b57\u7b26\u90fd\u6709\u81ea\u5df1\u7684\u60f3\u6cd5\u3002 \u6700\u65e9\u7684\u7f16\u7801\u5b57\u7b26\u96c6\u662fASCII\uff0c\u4f46\u66f4\u51c6\u786e\u6765\u8bf4\uff0cASCII\u4f7f\u7528\u7684\u662f\u7b80\u5355\u7f16\u7801\u6a21\u578b\u3002\u7b80\u5355\u7f16\u7801\u6a21\u578b\u5e76\u6ca1\u6709\u73b0\u4ee3\u7f16\u7801\u6a21\u578b\u8fd9\u4e48\u591a\u6982\u5ff5\u3002\u6700\u5e38\u89c1\u7684\u7f16\u7801\u5b57\u7b26\u96c6\u5c31\u662f UCS\uff08Universal Character Set\uff09\u3002","title":"\u7f16\u7801\u5b57\u7b26\u96c6\uff08Coded Character Set\uff09"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#ascii","text":"\u5148\u6765\u8bf4\u8bf4ASCII\u7801\u3002ASCII \u7801\u4e00\u5171\u89c4\u5b9a\u4e86128\u4e2a\u5b57\u7b26\u7684\u7801\u4f4d\uff08\u5305\u62ec32\u4e2a\u4e0d\u80fd\u6253\u5370\u51fa\u6765\u7684\u63a7\u5236\u7b26\u53f7\uff09\u3002ASCII\u7801\u7528\u4e86\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u8fd9128\u4e2a\u5b57\u7b26\u7684\u7801\u4f4d\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u7801\u4f4d\u53ea\u5360\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u540e7\u4f4d\uff0c\u6700\u524d\u9762\u7684\u4e00\u4f4d\u89c4\u5b9a\u4e3a0\u3002","title":"ASCII\u7801"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#ascii_1","text":"\u82f1\u8bed\u7528128\u4e2a\u7b26\u53f7\u7f16\u7801\u5c31\u591f\u4e86\uff0c\u4f46\u662f\u7528\u6765\u8868\u793a\u5176\u4ed6\u5370\u6b27\u8bed\u7cfb\u7684\u8bed\u8a00\uff0c128\u4e2a\u7b26\u53f7\u662f\u4e0d\u591f\u7684\u3002\u6bd4\u5982\uff0c\u5728\u6cd5\u8bed\u4e2d\uff0c\u5b57\u6bcd\u4e0a\u65b9\u6709\u6ce8\u97f3\u7b26\u53f7\uff0c\u5b83\u5c31\u65e0\u6cd5\u7528 ASCII \u7801\u8868\u793a\u3002 \u5b9e\u9645\u4e0a\uff0cASCII\u7801\u7684\u8868\u793a\u5360\u7528\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u540e7\u4f4d\uff0c\u4e00\u4e2a\u5b57\u8282\u6709 8 bit\uff0cbit \u662f\u8ba1\u7b97\u673a\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4e00\u4e2abit\u6709 0 \u548c 1 \u4e24\u79cd\u72b6\u6001\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u5b57\u8282\u6709 8 bit\uff0c\u6700\u591a\u53ef\u4ee5\u8868\u793a256\u79cd\u72b6\u6001\uff08$2^8=256$\uff09\u3002\u4e8e\u662f\uff0c\u4e00\u4e9b\u6b27\u6d32\u56fd\u5bb6\u5c31\u51b3\u5b9a\uff0c\u5229\u7528\u5b57\u8282\u4e2d\u95f2\u7f6e\u7684\u6700\u9ad8\u4f4d\u7f16\u5165\u65b0\u7684\u7b26\u53f7\u3002\u6bd4\u5982\uff0c\u6cd5\u8bed\u4e2d\u7684 \u00e9 \u7684\u7f16\u7801\u4e3a130\uff08\u4e8c\u8fdb\u5236 10000010 \uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u4e9b\u6b27\u6d32\u56fd\u5bb6\u4f7f\u7528\u7684\u7f16\u7801\u4f53\u7cfb\uff0c\u53ef\u4ee5\u8868\u793a\u6700\u591a256\u4e2a\u7b26\u53f7\u3002 \u867d\u7136\u8fd9\u6837\u505a\u89e3\u51b3\u4e86\u5370\u6b27\u8bed\u7cfb\u7684\u8bed\u8a00\u8868\u793a\u95ee\u9898\uff0c\u4f46\u662f\uff0c\u53c8\u4ea7\u751f\u4e86\u65b0\u7684\u95ee\u9898\u3002\u4e0d\u540c\u7684\u56fd\u5bb6\u6709\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u56e0\u6b64\uff0c\u54ea\u6015\u5b83\u4eec\u90fd\u4f7f\u7528256\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u4ee3\u8868\u7684\u5b57\u6bcd\u5374\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\uff0c130\u5728\u6cd5\u8bed\u7f16\u7801\u4e2d\u4ee3\u8868\u4e86 \u00e9 \uff0c\u5728\u5e0c\u4f2f\u6765\u8bed\u7f16\u7801\u4e2d\u5374\u4ee3\u8868\u4e86\u5b57\u6bcd Gimel ( \u05d2 )\uff0c\u5728\u4fc4\u8bed\u7f16\u7801\u4e2d\u53c8\u4f1a\u4ee3\u8868\u53e6\u4e00\u4e2a\u7b26\u53f7\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u6b27\u6d32\u56fd\u5bb6\u4f7f\u7528\u7684\u7f16\u7801\u867d\u7136\u90fd\u517c\u5bb9ASCII\u7801\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684\u7f16\u7801\u3002 \u53e6\u5916\uff0c\u867d\u7136\u5370\u6b27\u8bed\u7cfb\u7684\u8bed\u8a00\u7f16\u7801\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u4f46\u8fd8\u5f88\u591a\u56fd\u5bb6\u7684\u8bed\u8a00\u7f16\u7801\u4e0d\u80fd\u53ea\u7528\u4e00\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u4f8b\u5982\u4e2d\u6587\u3002\u4e00\u4e2a\u5b57\u8282\u6700\u591a\u8868\u793a258\u4e2a\u5b57\u7b26\uff0c\u800c\u6c49\u5b57\u5374\u53ef\u80fd\u591a\u8fbe10\u4e07\u4e2a\uff0c\u4e00\u4e2a\u5b57\u8282\u5b8c\u5168\u4e0d\u591f\u7528\u3002\u4e8e\u662f\uff0c\u4e2d\u56fd\u5c31\u5236\u5b9a\u4e86\u81ea\u5df1\u7684\u7f16\u7801\u6807\u51c6\u2014\u2014GB2312\u3002GB2312\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u5e76\u4e14\u628a\u6570\u5b66\u7b26\u53f7\u3001\u7f57\u9a6c\u5e0c\u814a\u7684\u5b57\u6bcd\u3001\u65e5\u6587\u7684\u5047\u540d\u4eec\u90fd\u7f16\u8fdb\u53bb\u4e86\uff0c\u8fdeASCII\u7801\u91cc\u9762\u672c\u6765\u5c31\u6709\u7684\u6570\u5b57\u3001\u6807\u70b9\u3001\u5b57\u6bcd\u90fd\u7528\u4e24\u4e2a\u5b57\u8282\u957f\u7684\u7f16\u7801\u8868\u793a\uff0c\u8fd9\u5c31\u662f\u5e38\u8bf4\u7684\u5168\u89d2\u5b57\u7b26\u3002 \u4f46\u5f88\u5feb\uff0c\u6211\u4eec\u5c31\u53d1\u73b0GB2312\u4e5f\u4e0d\u591f\u7528\u4e86\uff0c\u56e0\u4e3a\u4e2d\u56fd\u7684\u6c49\u5b57\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u5728GB2312\u7684\u57fa\u7840\u4e0a\u53c8\u5236\u5b9a\u4e86GBK\u6807\u51c6\u3002 \u53ef\u4ee5\u60f3\u5f97\u5230\u7684\u662f\uff0c\u5168\u4e16\u754c\u6709\u4e0a\u767e\u79cd\u8bed\u8a00\uff0c\u65e5\u672c\u628a\u65e5\u6587\u7f16\u5230 Shift_JIS \u91cc\uff0c\u97e9\u56fd\u628a\u97e9\u6587\u7f16\u5230 Euc-kr \u91cc\uff0c\u5404\u56fd\u6709\u5404\u56fd\u7684\u6807\u51c6\uff0c\u5c31\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u51fa\u73b0\u51b2\u7a81\uff0c\u7ed3\u679c\u5c31\u662f\uff0c\u5728\u591a\u8bed\u8a00\u6df7\u5408\u7684\u6587\u672c\u4e2d\uff0c\u663e\u793a\u51fa\u6765\u4f1a\u6709\u4e71\u7801\u3002","title":"ASCII\u7801\u7684\u5c40\u9650"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#universal-character-set","text":"UCS\u5c31\u662f\u7edf\u4e00\u5b57\u7b26\u96c6\uff0c\u5c31\u662f\u7531 ISO/IEC 10646\u6240\u5b9a\u4e49\u7684\u7f16\u7801\u5b57\u7b26\u96c6\u3002\u901a\u5e38\u8bf4\u7684\u201cUnicode\u5b57\u7b26\u96c6\u201c\u6307\u7684\u5c31\u662f\u5b83\u2014\u2014\u7edf\u4e00\u5b57\u7b26\u96c6\u3002 \u4e0d\u8fc7Unicode\u672c\u8eab\u6307\u7684\u662f\u4e00\u7cfb\u5217\u7528\u4e8e\u8ba1\u7b97\u673a\u8868\u793a\u6240\u6709\u8bed\u8a00\u5b57\u7b26\u7684 \u6807\u51c6 \u3002 \u6b63\u5982\u4e0a\u4e00\u8282\u6240\u8bf4\uff0c\u4e16\u754c\u4e0a\u5b58\u5728\u7740\u591a\u79cd\u7f16\u7801\u65b9\u5f0f\uff0c\u540c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u53ef\u4ee5\u88ab\u89e3\u91ca\u6210\u4e0d\u540c\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u8981\u60f3\u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5c31\u5fc5\u987b\u77e5\u9053\u5b83\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5426\u5219\u7528\u9519\u8bef\u7684\u7f16\u7801\u65b9\u5f0f\u89e3\u8bfb\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\u4eba\u4eec\u610f\u8bc6\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e8e\u662f\uff0cUCS\u5e94\u8fd0\u800c\u751f\u3002UCS\u628a\u6240\u6709\u8bed\u8a00\u90fd\u7edf\u4e00\u5230\u4e00\u5957\u7f16\u7801\u91cc\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u518d\u6709\u4e71\u7801\u95ee\u9898\u4e86\u3002 Unicode\u6807\u51c6\u4e5f\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u4f46\u6700\u5e38\u7528\u7684\u662f\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u5982\u679c\u8981\u7528\u5230\u975e\u5e38\u504f\u50fb\u7684\u5b57\u7b26\uff0c\u5c31\u9700\u89814\u4e2a\u5b57\u8282\uff09\u3002\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u548c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u76f4\u63a5\u652f\u6301Unicode\u3002 Unicode \u662f\u4e00\u4e2a\u5f88\u5927\u7684\u96c6\u5408\uff0c\u73b0\u5728\u7684\u89c4\u6a21\u53ef\u4ee5\u5bb9\u7eb3100\u591a\u4e07\u4e2a\u7b26\u53f7\u3002\u6bcf\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u90fd\u4e0d\u4e00\u6837\uff0c\u53ef\u4ee5\u67e5\u8be2 unicode.org \uff0c\u6216\u8005\u4e13\u95e8\u7684 \u6c49\u5b57\u5bf9\u5e94\u8868 \u3002 \u53e6\u5916\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6309\u7167Unicode9.0.0\u7684\u6807\u51c6\uff0cUCS\u7406\u8bba\u4e0a\u6536\u5f55\u4e86128237\u4e2a\u5b57\u7b26\uff0c\u4f46\u5b9e\u9645\u80fd\u7528\u7684\u6700\u5927\u7684\u7801\u4f4d\u70b9\u5728128720\u3002\u56e0\u4e3aUCS\u7684\u7801\u4f4d\u4e0d\u662f\u8fde\u7eed\u5206\u914d\u7684\uff0c\u5373\u4e2d\u95f4\u6709\u4e00\u90e8\u5206\u7801\u4f4d\u6ca1\u6709\u5206\u914d\u5bf9\u5e94\u7684\u5b57\u7b26\u3002 \u5b9e\u9645\u4e0a\uff0cUnicode\u5b9e\u9645\u5206\u914d\u7684\u7801\u4f4d\u662f 0x0000~0x0xD7FF \u4e0e 0xE000~0x10FFFF \u8fd9\u4e24\u6bb5\u7684\u3002\u4e2d\u95f4 0xD800~0xDFFF \u8fd92048\u4e2a\u7801\u4f4d\u7559\u4f5c\u5b83\u7528\u7684\uff0c\u5e76\u4e0d\u5bf9\u5e94\u5b9e\u9645\u7684\u5b57\u7b26\u3002\u5982\u679c\u5728Python\u79cd\u76f4\u63a5\u5c1d\u8bd5\u53bb\u8f93\u51fa\u8fd9\u4e2a\u7801\u4f4d\u6bb5\u7684\u2019\u5b57\u7b26\u2019\uff0cPython\u4f1a\u544a\u8bc9\u4f60\u8fd9\u662f\u4e2a\u975e\u6cd5\u5b57\u7b26\u3002","title":"Universal Character Set"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#ucs","text":"UCS \u53ea\u662f\u7f16\u7801\u5b57\u7b26\u96c6 \uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u5b57\u7b26\u7684\u4e8c\u8fdb\u5236\u6570\u503c\uff0c\u5374\u6ca1\u6709\u89c4\u5b9a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u5b58\u50a8\u3002 \u8fd9\u91cc\u8bf4\u7684\u50a8\u5b58\u662f\u50a8\u5b58\u5728 ROM \u4e2d\uff0c\u6bd4\u5982\u8bf4\u786c\u76d8 \u3002 \u6bd4\u5982\uff0c\u6c49\u5b57 \u4e25 \u7684 Unicode \u662f\u5341\u516d\u8fdb\u5236\u6570 4E25 \uff0c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\u662f 100111000100101 \uff0c\u8db3\u8db3\u670915\u4f4d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u63a5\u50a8\u5b58\u8fd9\u4e2a\u7b26\u53f7\u7684\u8868\u793a\u81f3\u5c11\u9700\u89812\u4e2a\u5b57\u8282\u3002\u800c\u6392\u5e8f\u5728\u66f4\u540e\u9762\u7684\u7b26\u53f7\uff0c\u53ef\u80fd\u9700\u89813\u4e2a\u5b57\u8282\u6216\u80054\u4e2a\u5b57\u8282\uff0c\u751a\u81f3\u66f4\u591a\u3002 \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u50a8\u5b58Unicode\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u4f46\u8fd9\u5c31\u6709\u4e24\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u624d\u80fd\u533a\u522b Unicode \u548c ASCII \uff1f\u8ba1\u7b97\u673a\u600e\u4e48\u77e5\u9053\u4e09\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u800c\u4e0d\u662f\u5206\u522b\u8868\u793a\u4e09\u4e2a\u7b26\u53f7\u5462\uff1f\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5219\u662f Unicode \u7f16\u7801\u9700\u8981\u5360\u7528\u591a\u4e2a\u5b57\u8282\uff0c\u5982\u679c Unicode \u7edf\u4e00\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u7b26\u53f7\u7528\u4e09\u4e2a\u6216\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u90a3\u4e48\u82f1\u6587\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f\u5219\u6bd4\u4f7f\u7528ASCII\u7801\u5927\u51fa\u4e24\u4e09\u500d\u3002\u8fd9\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u56e0\u6b64\u7528Unicode\u7801\u76f4\u63a5\u50a8\u5b58\u6587\u4ef6\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\u3002 \u53e6\u5916\uff0cUCS\u662f\u5f00\u653e\u7684\uff0c\u672a\u6765\u53ef\u80fd\u6709\u66f4\u591a\u7684\u5b57\u7b26\u52a0\u5165\u8fdb\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7406\u8bba\u4e0aUCS\u9700\u8981\u65e0\u9650\u7684 \u7801\u4f4d \uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u7684\u6574\u5f62\u80fd\u8868\u793a\u7684\u6574\u6570\u8303\u56f4\u662f\u6709\u9650\u7684\u3002 \u4f8b\u5982\uff1a \u65e0\u7b26\u53f7\u6574\u5f62\uff08unsigned char, uint8\uff09\u7684\u53ef\u7528\u7801\u4f4d\u53ea\u67090~0xFF\uff0c\u5171256\u4e2a \u65e0\u7b26\u53f7\u77ed\u6574\u5f62\uff08unsigned short, uint16\uff09\u7684\u53ef\u7528\u7801\u4f4d\u53ea\u67090~0xFFFF\uff0c\u517165536\u4e2a \u6574\u5f62\uff08unsigned int, uint32\uff09\u80fd\u8868\u793a\u7684\u7801\u4f4d\u67090~0xFFFFFFFF\uff0c\u51714294967295\u4e2a \u6240\u4ee5\uff0c\u5982\u4f55\u7528\u6709\u9650\u7684\u6574\u6570\u8303\u56f4\u8868\u793a\u65e0\u9650\u7684\u7801\u4f4d\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u95ee\u9898\u548cUnicode\u7684\u6587\u4ef6\u50a8\u5b58\u662f\u540c\u4e00\u4e2a\u95ee\u9898\u3002\u56e0\u4e3a\uff0c\u5982\u679c\u6709\u65b9\u6848\u53ef\u4ee5\u8ba9\u6709\u9650\u7684\u5b57\u8282\u8868\u793a\u65e0\u9650\u7684\u7801\u4f4d\uff0c\u4e5f\u5c31\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u5b57\u8282\u8868\u793a\u539f\u6765\u9700\u8981\u591a\u4e2a\u5b57\u8282\u7684Unicode\u7801\u3002 \u8fd9\u4e24\u4e2a\u95ee\u9898\u9020\u6210\u4e86Unicode \u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u65e0\u6cd5\u63a8\u5e7f\uff0c \u76f4\u5230\u4e92\u8054\u7f51\u7684\u51fa\u73b0 \u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u867d\u7136\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u4e86UCS\u5b57\u7b26\u96c6\uff0c\u4f46\u4e5f\u53ea\u662f\u89e3\u51b3\u4e86\u5b57\u7b26\u7684\u7f16\u7801\u95ee\u9898\uff0c\u4f46\u5b57\u7b26\u7684\u89e3\u7801\u95ee\u9898\u8fd8\u6ca1\u89e3\u51b3\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u7528\u5230\u5b57\u7b26\u7f16\u7801\u8868\u3002","title":"UCS \u7684\u95ee\u9898"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#cef","text":"\u5b57\u7b26\u7f16\u7801\u8868\u662f\u4e00\u4e2a\u5c06 Unicode\u6807\u91cf\u503c (Unicode scalar value) \u4e00\u4e00\u6620\u5c04\u4e3a \u7801\u5143\u5e8f\u5217(Code Unit Sequences) \u7684\u6620\u5c04\u3002 \u4e4b\u6240\u4ee5\u5fc5\u987b\u662f\u4e00\u4e00\u6620\u5c04\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u4eec\u4e0d\u5149\u8981\u7f16\u7801\uff0c\u4e5f\u8981\u89e3\u7801\u3002 Code unit: The minimal bit combination that can represent a unit of encoded text for processing or interchange. \u7801\u5143\u662f\u80fd\u7528\u4e8e\u5904\u7406\u6216\u4ea4\u6362\u7f16\u7801\u6587\u672c\u7684\u6700\u5c0f\u6bd4\u7279\u7ec4\u5408\u3002\u901a\u5e38\u8ba1\u7b97\u673a\u5904\u7406\u5b57\u7b26\u7684\u7801\u5143\u4e3a\u4e00\u5b57\u8282\uff0c\u53738bit\u3002 \u5728Unicode\u4e2d\uff0c\u6307\u5b9a\u4e86\u4e09\u79cd\u6807\u51c6\u7684\u5b57\u7b26\u7f16\u7801\u8868\uff1aUTF-8\u3001UTF-16\u3001UTF-32\u3002\u5206\u522b\u5c06Unicode\u6807\u91cf\u503c\u6620\u5c04\u4e3a\u6bd4\u7279\u6570\u4e3a8\u300116\u300132\u7684\u7801\u5143\u7684\u5e8f\u5217\u3002\u8fd8\u6709\u4e00\u4e9b\u975e\u6807\u51c6\u7684CEF\uff0c\u5982UCS-2\u3001UCS-4\uff0c\u5728\u6b64\u4e0d\u591a\u4ecb\u7ecd\u3002 \u5728\u8ba1\u7b97\u673a\u4e2d\uff0cchar\u5176\u5b9e\u662f\u4e00\u79cd\u6574\u5f62\uff0c\u800c\u6574\u5f62\u7684\u8ba1\u7b97\u5f80\u5f80\u4ee5\u8ba1\u7b97\u673a\u7684 \u5b57\u957f \u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7840\u5355\u5143\uff0c\u901a\u5e38\u6765\u8bb2\uff0c\u4e5f\u5c31\u662f4\u5b57\u8282\u3002Unicode\u5b9a\u4e49\u4e86\u4e09\u79cd\u4e0d\u540c\u7684CEF\uff0c\u6b63\u597d\u5bf9\u5e94\u4e86\u8ba1\u7b97\u673a\u4e2d\u6700\u5e38\u89c1\u7684\u4e09\u79cd\u6574\u5f62\u957f\u5ea6\uff08uint8\u3001uint16\u3001uint32\uff09\u3002 \u5982\u4f55\u5c06\u4e00\u4e2a\u65e0\u9650\u5927\u7684\u6574\u6570\u96c6\u5408\u4e00\u4e00\u6620\u5c04\u4e3a\u6307\u5b9a\u5b57\u5bbd\u7684\u7801\u5143\u5e8f\u5217\uff1f \u8fd9\u4e2a\u95ee\u9898\u662f\u901a\u8fc7\u53d8\u957f\u7f16\u7801\u6765\u89e3\u51b3\u7684\u3002 \u65e0\u8bba\u662fUTF-8\u8fd8\u662fUTF-16\uff0c\u672c\u8d28\u601d\u60f3\u90fd\u662f\u901a\u8fc7\u9884\u7559\u6807\u8bb0\u4f4d\u6765\u6307\u793a\u7801\u5143\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u4ece\u800c\u5b9e\u73b0\u53d8\u957f\u7f16\u7801\u7684\u3002\u8fd9\u6837\uff0c\u5b57\u7b26\u7f16\u7801\u8868\u5c31\u89e3\u51b3UCS\u7684\u4e24\u4e2a\u95ee\u9898\u3002 UTF-8 \u662f\u5728\u4e92\u8054\u7f51\u4e0a\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd Unicode \u7684\u5b9e\u73b0\u65b9\u5f0f\uff0cUTF-16\u548cUTF-32\u5219\u7528\u5f97\u5f88\u5c11\u3002","title":"\u5b57\u7b26\u7f16\u7801\u8868 CEF"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#utf-8","text":"\u5f3a\u8c03\u4e00\u4e0bUnicode\u548cUTF-8\u7684\u533a\u522b\uff1aUTF-8\u662fUnicode\u7684\u4e00\u79cd\u50a8\u5b58\u5f62\u5f0f\uff0c\u4f46\u8ba1\u7b97\u673a\u53ea\u80fd\u8bfb\u53d6\u4e8c\u8fdb\u5236\u7684\u5185\u5bb9\uff0c\u56e0\u6b64\u8ba1\u7b97\u673a\u8bfb\u53d6UTF-8\u7f16\u7801\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5c06\u6587\u4ef6\u8f6c\u7801\u4e3aUnicode\uff08Unicode\u662f\u5b8c\u5168\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6587\u4ef6\u4ee5UTF-8\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u4ee5Unicode\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\uff08Ram\uff09\u4e2d\u3002 \u4f8b\u5982\uff1a \u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u7edf\u4e00\u4f7f\u7528Unicode\u7f16\u7801\uff0c\u5f53\u9700\u8981\u4fdd\u5b58\u5230\u786c\u76d8\u6216\u8005\u9700\u8981\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u5c31\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u3002 \u7528\u8bb0\u4e8b\u672c\u7f16\u8f91\u7684\u65f6\u5019\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6\u7684UTF-8\u5b57\u7b26\u88ab\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26\u5230\u5185\u5b58\u91cc\uff0c\u7f16\u8f91\u5b8c\u6210\u540e\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u518d\u628aUnicode\u8f6c\u6362\u4e3aUTF-8\u4fdd\u5b58\u5230\u6587\u4ef6\u3002 \u6d4f\u89c8\u7f51\u9875\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u628a\u52a8\u6001\u751f\u6210\u7684Unicode\u5185\u5bb9\u8f6c\u6362\u4e3aUTF-8\u518d\u4f20\u8f93\u5230\u6d4f\u89c8\u5668\u3002\u5f88\u591a\u7f51\u9875\u7684\u6e90\u7801\u4e0a\u4f1a\u6709\u7c7b\u4f3c <meta charset=\"UTF-8\" /> \u7684\u4fe1\u606f\uff0c\u8868\u793a\u8be5\u7f51\u9875\u6b63\u662f\u7528\u7684UTF-8\u7f16\u7801\u3002 UTF-8 \u6700\u5927\u7684\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u5b83\u662f\u4e00\u79cd\u53d8\u957f\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u5b83\u53ef\u4ee5\u4f7f\u75281~4\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u6839\u636e\u4e0d\u540c\u7684\u7b26\u53f7\u800c\u53d8\u5316\u5b57\u8282\u957f\u5ea6\u3002 UTF-8 \u7684\u7f16\u7801\u89c4\u5219\u5f88\u7b80\u5355\uff0c\u53ea\u6709\u4e8c\u6761\uff1a 1\uff09\u5bf9\u4e8e\u5355\u5b57\u8282\u7684\u7b26\u53f7\uff0c\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u97627\u4f4d\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002\u56e0\u6b64\u5bf9\u4e8e\u82f1\u8bed\u5b57\u6bcd\uff0cUTF-8 \u7f16\u7801\u548c ASCII \u7801\u662f\u76f8\u540c\u7684\u3002 2\uff09\u5bf9\u4e8e n \u5b57\u8282\u7684\u7b26\u53f7\uff08 n > 1 \uff09\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d n \u4f4d\u90fd\u8bbe\u4e3a 1 \uff0c\u7b2c n + 1 \u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u9762\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u4e00\u5f8b\u8bbe\u4e3a 10 \u3002\u5269\u4e0b\u7684\u6ca1\u6709\u63d0\u53ca\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5168\u90e8\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002 \u4e0b\u8868\u603b\u7ed3\u4e86\u7f16\u7801\u89c4\u5219\uff0c\u5b57\u6bcd x \u8868\u793a\u53ef\u7528\u7f16\u7801\u7684\u4f4d\u3002 Unicode\u7b26\u53f7\u8303\u56f4 | UTF-8\u7f16\u7801\u65b9\u5f0f (\u5341\u516d\u8fdb\u5236) | \uff08\u4e8c\u8fdb\u5236\uff09 --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \u8ddf\u636e\u4e0a\u8868\uff0c\u89e3\u8bfb UTF-8 \u7f16\u7801\u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u4e00\u4e2a\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u662f 0 \uff0c\u5219\u8fd9\u4e2a\u5b57\u8282\u5355\u72ec\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\uff1b\u5982\u679c\u7b2c\u4e00\u4f4d\u662f 1 \uff0c\u5219\u8fde\u7eed\u6709\u591a\u5c11\u4e2a 1 \uff0c\u5c31\u8868\u793a\u5f53\u524d\u5b57\u7b26\u5360\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u3002 \u4e0b\u9762\uff0c\u8fd8\u662f\u4ee5\u6c49\u5b57 \u4e25 \u4e3a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5b9e\u73b0 UTF-8 \u7f16\u7801\u3002 \u4e25 \u7684 Unicode \u662f 4E25 \uff08 100111000100101 \uff09\uff0c\u6839\u636e\u4e0a\u8868\uff0c\u53ef\u4ee5\u53d1\u73b0 4E25 \u5904\u5728\u7b2c\u4e09\u884c\u7684\u8303\u56f4\u5185\uff08 0000 0800 - 0000 FFFF \uff09\uff0c\u56e0\u6b64 \u4e25 \u7684 UTF-8 \u7f16\u7801\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff0c\u5373\u683c\u5f0f\u662f 1110xxxx 10xxxxxx 10xxxxxx \u3002\u7136\u540e\uff0c\u4ece \u4e25 \u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u4ece\u540e\u5411\u524d\u586b\u5165\u683c\u5f0f\u4e2d\u7684 x \uff0c\u591a\u51fa\u7684\u4f4d\u8865 0 \u3002\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\uff0c \u4e25 \u7684 UTF-8 \u7f16\u7801\u662f 11100100 10111000 10100101 \uff0c\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u5c31\u662f E4B8A5 \u3002 UTF-8\u7f16\u7801\u6709\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u5c31\u662fASCII\u7f16\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u88ab\u770b\u6210\u662fUTF-8\u7f16\u7801\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\uff0c\u5927\u91cf\u53ea\u652f\u6301ASCII\u7f16\u7801\u7684\u5386\u53f2\u9057\u7559\u8f6f\u4ef6\u53ef\u4ee5\u5728UTF-8\u7f16\u7801\u4e0b\u7ee7\u7eed\u5de5\u4f5c\u3002","title":"UTF-8"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#ces-character-encoding-schema","text":"\u7565","title":"\u5b57\u7b26\u7f16\u7801\u65b9\u6848 CES (CHARACTER ENCODING SCHEMA)"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#python","text":"Python\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6\u5728\u51e0\u4e2a\u5927\u7248\u672c\u4e2d\u6709\u8fc7\u6539\u53d8\uff0c\u4ee5\u4e0b\u662f\u5404\u4e2a\u7248\u672c\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6\u5217\u4e3e\uff1a Python2.1\u53ca\u4ee5\u524d\uff1alatin1 Python2.3\u53ca\u4e4b\u540e\uff0cPython2.5\u4ee5\u524d\uff1alatin1 \uff08\u4f46\u662f\u4f1a\u5bf9\u975eASCII\u5b57\u7b26\u96c6\u5b57\u7b26\u63d0\u51faWARNING\uff09 Python2.5\u53ca\u4ee5\u540e\uff1aASCII Python3\uff1aUnicode\uff08UTF-8\uff09","title":"Python\u9ed8\u8ba4\u5b57\u7b26\u96c6"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.5.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#_3","text":"\u5b57\u7b26\u7f16\u7801\u7b14\u8bb0\uff1aASCII\uff0cUnicode \u548c UTF-8 \u5341\u5206\u949f\u641e\u6e05\u5b57\u7b26\u96c6\u548c\u5b57\u7b26\u7f16\u7801 \u5173\u4e8ePython\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6 \u73b0\u4ee3\u7f16\u7801\u6a21\u578b \u5f7b\u5e95\u5f04\u61c2Unicode\u7f16\u7801 Unicode \u5b57\u7b26\u7f16\u7801\u6a21\u578b_\u62bd\u8c61\u5b57\u7b26\u5e93(ACR)","title":"\u53c2\u8003"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html","text":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\uff08Object-Ori\u00adent\u00aded Pro\u00adgram\u00adming\uff0c\u7f29\u5199\u4e3a OOP\uff09\u662f\u4e00\u79cd\u8303\u5f0f\uff0c\u5176\u57fa\u672c\u7406\u5ff5\u662f\u5c06\u6570\u636e\u5757\u53ca\u4e0e\u6570\u636e\u76f8\u5173\u7684\u884c\u4e3a\u5c01\u88c5\u6210\u4e3a\u7279\u6b8a\u7684\u3001\u540d\u4e3a \u5bf9\u8c61 \u7684\u5b9e\u4f53\uff0c \u540c\u65f6\u5bf9\u8c61\u5b9e\u4f53\u7684\u751f\u6210\u57fa\u4e8e \u7c7b \u3002 \u9762\u5411\u5bf9\u8c61\u7684\u56db\u4e2a\u6838\u5fc3\u6982\u5ff5 \u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u56db\u4e2a\u57fa\u672c\u6982\u5ff5\u4f7f\u5176\u533a\u522b\u4e8e\u5176\u4ed6\u7a0b\u5e8f\u8bbe\u8ba1\u8303\u5f0f\u3002 \u62bd\u8c61\u80fd\u8ba9\u7a0b\u5e8f\u53d8\u5f97\u66f4\u52a0\u901a\u7528\uff0c\u80fd\u89e3\u51b3\u66f4\u591a\u7684\u95ee\u9898\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u62bd\u8c61\u4e4b\u540e\u7684\u4ee3\u7801\u66f4\u6613\u8bfb\uff0c\u66f4\u7b26\u5408\u4eba\u7684\u903b\u8f91\u3002 \u8fd9\u56db\u4e2a\u6982\u5ff5\u7684\u5177\u4f53\u4ecb\u7ecd\u53ef\u4ee5\u53c2\u8003 \u300a4.1.\u7c7b\u300b \u3002 \u7c7b\u5c42\u6b21\u7ed3\u6784 \u901a\u8fc7\u7ee7\u627f\uff0c\u5b50\u7c7b\u548c\u57fa\u7c7b\u53ef\u4ee5\u88ab\u7ec4\u7ec7\u8d77\u6765\u5f62\u6210 \u7c7b\u5c42\u6b21\u7ed3\u6784 \u3002 \u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb \u4f9d\u8d56 \u4f9d\u8d56\u662f\u7c7b\u4e4b\u95f4\u6700\u57fa\u7840\u7684\u3001 \u4e5f\u662f\u6700\u5fae\u5f31\u7684\u5173\u7cfb\u7c7b\u578b\u3002 \u5982\u679c\u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u5b9a\u4e49\u53ef\u80fd\u4f1a\u9020\u6210\u53e6\u4e00\u4e2a\u7c7b\u7684\u53d8\u5316\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u7c7b\u4e4b\u95f4\u5c31\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u3002 Tip \u56e0\u4e3a\u4f9d\u8d56\u662f\u6700\u57fa\u7840\u3001\u5fae\u5f31\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u7528\u865a\u7ebf\u8868\u793a\u3002 \u5f53\u4f60\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5177\u4f53\u7c7b\u7684\u540d\u79f0\u65f6\uff0c \u901a\u5e38\u610f\u5473\u7740\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u3002\u901a\u8fc7\u8ba9\u4ee3\u7801\u4f9d\u8d56\u63a5\u53e3\u6216\u62bd\u8c61\u7c7b \uff08\u800c\u4e0d\u662f\u5177\u4f53\u7c7b\uff09\uff0c \u4f60\u53ef\u4ee5\u964d\u4f4e\u5176\u4f9d\u8d56\u7a0b\u5ea6\u3002 \u5173\u8054 \u5173\u8054\u662f\u4e00\u4e2a\u5bf9\u8c61\u4f7f\u7528\u53e6\u4e00\u5bf9\u8c61\u6216\u4e0e\u53e6\u4e00\u5bf9\u8c61\u8fdb\u884c\u4ea4\u4e92\u7684\u5173\u7cfb\u3002\u5173\u8054\u53ef\u4ee5\u662f\u5355\u5411\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u53cc\u5411\u7684\u3002 \u5173\u8054\u53ef\u89c6\u4e3a\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u4f9d\u8d56\uff0c \u5373\u4e00\u4e2a\u5bf9\u8c61\u603b\u662f\u62e5\u6709\u8bbf\u95ee\u4e0e\u5176\u4ea4\u4e92\u7684\u5bf9\u8c61\u7684\u6743\u9650\uff0c \u800c\u7b80\u5355\u7684\u4f9d\u8d56\u5173\u7cfb\u5e76\u4e0d\u4f1a\u5728\u5bf9\u8c61\u95f4\u5efa\u7acb\u6c38\u4e45\u6027\u7684\u8054\u7cfb\u3002 \u4e00\u822c\u6765\u8bf4\uff0c \u4f60\u53ef\u4ee5\u4f7f\u7528\u5173\u8054\u5173\u7cfb\u6765\u8868\u793a\u7c7b\u4f3c\u4e8e\u7c7b\u6210\u5458\u53d8\u91cf\u7684\u4e1c\u897f\u3002 \u8fd9\u4e2a\u5173\u7cfb\u5c06\u4e00\u76f4\u5b58\u5728\uff0c \u56e0\u6b64\u4f60\u603b\u80fd\u901a\u8fc7 \u201c\u8ba2\u5355\u201d \u6765\u83b7\u53d6\u5176 \u201c\u987e\u5ba2\u201d\u3002 \u4f46\u662f\u5b83\u5e76\u975e\u4e00\u5b9a\u662f\u6210\u5458\u53d8\u91cf\u3002 \u5982\u679c\u4f60\u6839\u636e\u63a5\u53e3\u6765\u521b\u5efa\u7c7b\uff0c \u5b83\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u53ef\u8fd4\u56de \u201c\u8ba2\u5355\u201d \u7684 \u201c\u987e\u5ba2\u201d \u7684\u65b9\u6cd5\u3002 \u5173\u8054 VS \u4f9d\u8d56 class Professor : student = Student () def teach ( c : Course ): student . remember ( c . getKnowledge ()) teach \uff08\u6559\u6388\u77e5\u8bc6\uff09\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u6765\u81ea Course \u7c7b\u7684\u53c2\u6570\u3002 \u5982\u679c\u6709\u4eba\u4fee\u6539\u4e86 Course \u7c7b\u7684 get-Knowledge \uff08\u83b7\u53d6\u77e5\u8bc6\uff09\u65b9\u6cd5 \uff08\u4fee\u6539\u65b9\u6cd5\u540d\u6216\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u987b\u7684\u53c2\u6570\u7b49\uff09\uff0c \u4ee3\u7801\u5c06\u4f1a\u5d29\u6e83\u3002 \u8fd9\u5c31\u662f\u4f9d\u8d56\u5173\u7cfb\u3002 \u73b0\u5728\uff0c \u8ba9\u6211\u4eec\u6765\u770b\u770b\u540d\u4e3a student \u7684\u6210\u5458\u53d8\u91cf\uff0c \u4ee5\u53ca\u5982\u4f55\u5728 teach \u65b9\u6cd5\u4e2d\u4f7f\u7528\u8be5\u53d8\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u80af\u5b9a Stu\u00addent \u7c7b\u662f \u6559\u6388\u7c7b\u7684\u4f9d\u8d56\uff1a \u5982\u679c remember \uff08\u8bb0\u4f4f\uff09 \u65b9\u6cd5\u88ab\u4fee\u6539\uff0c \u6559\u6388\u7684\u4ee3\u7801\u4e5f\u5c06\u5d29\u6e83\u3002 \u4f46\u7531\u4e8e\u6559\u6388\u7684\u6240\u6709\u65b9\u6cd5\u603b\u80fd\u8bbf\u95ee student \u6210\u5458\u53d8\u91cf\uff0c \u6240\u4ee5 \u5b66\u751f\u7c7b\u5c31\u4e0d\u4ec5\u662f\u4f9d\u8d56\uff0c \u800c\u4e5f\u662f\u5173\u8054\u4e86\u3002 \u805a\u5408 \u805a\u5408\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5173\u8054\uff0c \u7528\u4e8e\u8868\u793a\u591a\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684 \u201c\u4e00\u5bf9\u591a\u201d\u3001 \u201c\u591a\u5bf9\u591a\u201d \u6216 \u201c\u6574\u4f53\u5bf9\u90e8\u5206\u201d \u7684\u5173\u7cfb\u3002 \u666e\u901a\u5173\u8054\u4ec5\u7528\u4e8e\u63cf\u8ff0\u4e24\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u901a\u5e38\u5728\u805a\u5408\u5173\u7cfb\u4e2d\uff0c \u4e00\u4e2a\u5bf9\u8c61 \u201c\u62e5\u6709\u201d \u4e00\u7ec4\u5176\u4ed6\u5bf9\u8c61\uff0c \u5e76\u626e\u6f14\u7740\u5bb9\u5668\u6216\u96c6\u5408\u7684\u89d2\u8272\u3002 \u7ec4\u4ef6\u53ef\u4ee5\u72ec\u7acb\u4e8e\u5bb9\u5668\u5b58\u5728\uff0c \u4e5f\u53ef\u4ee5\u540c\u65f6\u8fde\u63a5\u591a\u4e2a\u5bb9\u5668\u3002 \u5728 UML \u56fe\u4e2d\uff0c \u805a\u5408\u5173\u7cfb\u4f7f\u7528\u4e00\u7aef\u662f\u7a7a\u5fc3\u83f1\u5f62\uff0c \u53e6\u4e00\u7aef\u6307\u5411\u7ec4\u4ef6\u7684\u7bad\u5934\u6765\u8868\u793a\u3002 \u7ec4\u5408 \u7ec4\u5408\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u805a\u5408\uff0c \u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u5bf9\u8c61\u5b9e\u4f8b\u6784\u6210\u3002 \u7ec4\u5408\u4e0e\u805a\u5408\u7684\u533a\u522b\u5728\u4e8e\u7ec4\u4ef6\u4ec5\u80fd\u4f5c\u4e3a\u5bb9\u5668\u7684\u4e00\u90e8\u5206\u5b58\u5728\uff0c\u5bb9\u5668\u9500\u6bc1\u65f6\uff0c\u7ec4\u4ef6\u4e5f\u4f1a\u88ab\u9500\u6bc1\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6559\u6388\u53ef\u4ee5\u540c\u65f6\u662f\u91d1\u878d\u9662\u7cfb\u548c\u6570\u5b66\u9662\u7cfb\u7684\u6559\u6388\uff0c\u4f46\u662f\u9662\u7cfb\u4e00\u822c\u4e0d\u4f1a\u540c\u65f6\u662f\u591a\u4e2a\u5927\u5b66\u7684\u9662\u7cfb\u3002 \u5728 UML \u56fe\u4e2d\uff0c \u7ec4\u5408\u4e0e\u805a\u5408\u5173\u7cfb\u7684\u7b26\u53f7\u76f8\u540c\uff0c \u4f46\u7bad\u5934\u8d77\u59cb\u5904\u7684\u83f1\u5f62\u662f\u5b9e\u5fc3\u7684\u3002 \u603b\u7ed3 \u4f9d\u8d56 \uff1a \u5bf9\u7c7b B \u8fdb\u884c\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u7c7b A \u3002 \u5173\u8054 \uff1a \u5bf9\u8c61 A \u77e5\u9053\u5bf9\u8c61 B\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u805a\u5408 \uff1a \u5bf9\u8c61 A \u77e5\u9053\u5bf9\u8c61 B \u4e14\u7531 B \u6784\u6210\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u7ec4\u5408 \uff1a \u5bf9\u8c61 A \u77e5\u9053\u5bf9\u8c61 B\u3001 \u7531 B \u6784\u6210\u800c\u4e14\u7ba1\u7406\u7740 B \u7684\u751f\u547d\u5468\u671f\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u5b9e\u73b0 \uff1a \u7c7b A \u5b9a\u4e49\u7684\u65b9\u6cd5\u7531\u63a5\u53e3 B \u58f0\u660e\u3002 \u5bf9\u8c61 A \u53ef\u88ab\u89c6\u4e3a\u5bf9\u8c61 B\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u7ee7\u627f \uff1a \u7c7b A \u7ee7\u627f\u7c7b B \u7684\u63a5\u53e3\u548c\u5b9e\u73b0\uff0c \u4f46\u662f\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002 \u5bf9\u8c61 A \u53ef\u88ab\u89c6\u4e3a\u5bf9\u8c61 B\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002","title":"7.1.\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_1","text":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u56db\u4e2a\u57fa\u672c\u6982\u5ff5\u4f7f\u5176\u533a\u522b\u4e8e\u5176\u4ed6\u7a0b\u5e8f\u8bbe\u8ba1\u8303\u5f0f\u3002 \u62bd\u8c61\u80fd\u8ba9\u7a0b\u5e8f\u53d8\u5f97\u66f4\u52a0\u901a\u7528\uff0c\u80fd\u89e3\u51b3\u66f4\u591a\u7684\u95ee\u9898\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u62bd\u8c61\u4e4b\u540e\u7684\u4ee3\u7801\u66f4\u6613\u8bfb\uff0c\u66f4\u7b26\u5408\u4eba\u7684\u903b\u8f91\u3002 \u8fd9\u56db\u4e2a\u6982\u5ff5\u7684\u5177\u4f53\u4ecb\u7ecd\u53ef\u4ee5\u53c2\u8003 \u300a4.1.\u7c7b\u300b \u3002","title":"\u9762\u5411\u5bf9\u8c61\u7684\u56db\u4e2a\u6838\u5fc3\u6982\u5ff5"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_2","text":"\u901a\u8fc7\u7ee7\u627f\uff0c\u5b50\u7c7b\u548c\u57fa\u7c7b\u53ef\u4ee5\u88ab\u7ec4\u7ec7\u8d77\u6765\u5f62\u6210 \u7c7b\u5c42\u6b21\u7ed3\u6784 \u3002","title":"\u7c7b\u5c42\u6b21\u7ed3\u6784"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_3","text":"","title":"\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_4","text":"\u4f9d\u8d56\u662f\u7c7b\u4e4b\u95f4\u6700\u57fa\u7840\u7684\u3001 \u4e5f\u662f\u6700\u5fae\u5f31\u7684\u5173\u7cfb\u7c7b\u578b\u3002 \u5982\u679c\u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u5b9a\u4e49\u53ef\u80fd\u4f1a\u9020\u6210\u53e6\u4e00\u4e2a\u7c7b\u7684\u53d8\u5316\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u7c7b\u4e4b\u95f4\u5c31\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u3002 Tip \u56e0\u4e3a\u4f9d\u8d56\u662f\u6700\u57fa\u7840\u3001\u5fae\u5f31\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u7528\u865a\u7ebf\u8868\u793a\u3002 \u5f53\u4f60\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5177\u4f53\u7c7b\u7684\u540d\u79f0\u65f6\uff0c \u901a\u5e38\u610f\u5473\u7740\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u3002\u901a\u8fc7\u8ba9\u4ee3\u7801\u4f9d\u8d56\u63a5\u53e3\u6216\u62bd\u8c61\u7c7b \uff08\u800c\u4e0d\u662f\u5177\u4f53\u7c7b\uff09\uff0c \u4f60\u53ef\u4ee5\u964d\u4f4e\u5176\u4f9d\u8d56\u7a0b\u5ea6\u3002","title":"\u4f9d\u8d56"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_5","text":"\u5173\u8054\u662f\u4e00\u4e2a\u5bf9\u8c61\u4f7f\u7528\u53e6\u4e00\u5bf9\u8c61\u6216\u4e0e\u53e6\u4e00\u5bf9\u8c61\u8fdb\u884c\u4ea4\u4e92\u7684\u5173\u7cfb\u3002\u5173\u8054\u53ef\u4ee5\u662f\u5355\u5411\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u53cc\u5411\u7684\u3002 \u5173\u8054\u53ef\u89c6\u4e3a\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u4f9d\u8d56\uff0c \u5373\u4e00\u4e2a\u5bf9\u8c61\u603b\u662f\u62e5\u6709\u8bbf\u95ee\u4e0e\u5176\u4ea4\u4e92\u7684\u5bf9\u8c61\u7684\u6743\u9650\uff0c \u800c\u7b80\u5355\u7684\u4f9d\u8d56\u5173\u7cfb\u5e76\u4e0d\u4f1a\u5728\u5bf9\u8c61\u95f4\u5efa\u7acb\u6c38\u4e45\u6027\u7684\u8054\u7cfb\u3002 \u4e00\u822c\u6765\u8bf4\uff0c \u4f60\u53ef\u4ee5\u4f7f\u7528\u5173\u8054\u5173\u7cfb\u6765\u8868\u793a\u7c7b\u4f3c\u4e8e\u7c7b\u6210\u5458\u53d8\u91cf\u7684\u4e1c\u897f\u3002 \u8fd9\u4e2a\u5173\u7cfb\u5c06\u4e00\u76f4\u5b58\u5728\uff0c \u56e0\u6b64\u4f60\u603b\u80fd\u901a\u8fc7 \u201c\u8ba2\u5355\u201d \u6765\u83b7\u53d6\u5176 \u201c\u987e\u5ba2\u201d\u3002 \u4f46\u662f\u5b83\u5e76\u975e\u4e00\u5b9a\u662f\u6210\u5458\u53d8\u91cf\u3002 \u5982\u679c\u4f60\u6839\u636e\u63a5\u53e3\u6765\u521b\u5efa\u7c7b\uff0c \u5b83\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u53ef\u8fd4\u56de \u201c\u8ba2\u5355\u201d \u7684 \u201c\u987e\u5ba2\u201d \u7684\u65b9\u6cd5\u3002","title":"\u5173\u8054"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#vs","text":"class Professor : student = Student () def teach ( c : Course ): student . remember ( c . getKnowledge ()) teach \uff08\u6559\u6388\u77e5\u8bc6\uff09\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u6765\u81ea Course \u7c7b\u7684\u53c2\u6570\u3002 \u5982\u679c\u6709\u4eba\u4fee\u6539\u4e86 Course \u7c7b\u7684 get-Knowledge \uff08\u83b7\u53d6\u77e5\u8bc6\uff09\u65b9\u6cd5 \uff08\u4fee\u6539\u65b9\u6cd5\u540d\u6216\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u987b\u7684\u53c2\u6570\u7b49\uff09\uff0c \u4ee3\u7801\u5c06\u4f1a\u5d29\u6e83\u3002 \u8fd9\u5c31\u662f\u4f9d\u8d56\u5173\u7cfb\u3002 \u73b0\u5728\uff0c \u8ba9\u6211\u4eec\u6765\u770b\u770b\u540d\u4e3a student \u7684\u6210\u5458\u53d8\u91cf\uff0c \u4ee5\u53ca\u5982\u4f55\u5728 teach \u65b9\u6cd5\u4e2d\u4f7f\u7528\u8be5\u53d8\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u80af\u5b9a Stu\u00addent \u7c7b\u662f \u6559\u6388\u7c7b\u7684\u4f9d\u8d56\uff1a \u5982\u679c remember \uff08\u8bb0\u4f4f\uff09 \u65b9\u6cd5\u88ab\u4fee\u6539\uff0c \u6559\u6388\u7684\u4ee3\u7801\u4e5f\u5c06\u5d29\u6e83\u3002 \u4f46\u7531\u4e8e\u6559\u6388\u7684\u6240\u6709\u65b9\u6cd5\u603b\u80fd\u8bbf\u95ee student \u6210\u5458\u53d8\u91cf\uff0c \u6240\u4ee5 \u5b66\u751f\u7c7b\u5c31\u4e0d\u4ec5\u662f\u4f9d\u8d56\uff0c \u800c\u4e5f\u662f\u5173\u8054\u4e86\u3002","title":"\u5173\u8054 VS \u4f9d\u8d56"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_6","text":"\u805a\u5408\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5173\u8054\uff0c \u7528\u4e8e\u8868\u793a\u591a\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684 \u201c\u4e00\u5bf9\u591a\u201d\u3001 \u201c\u591a\u5bf9\u591a\u201d \u6216 \u201c\u6574\u4f53\u5bf9\u90e8\u5206\u201d \u7684\u5173\u7cfb\u3002 \u666e\u901a\u5173\u8054\u4ec5\u7528\u4e8e\u63cf\u8ff0\u4e24\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u901a\u5e38\u5728\u805a\u5408\u5173\u7cfb\u4e2d\uff0c \u4e00\u4e2a\u5bf9\u8c61 \u201c\u62e5\u6709\u201d \u4e00\u7ec4\u5176\u4ed6\u5bf9\u8c61\uff0c \u5e76\u626e\u6f14\u7740\u5bb9\u5668\u6216\u96c6\u5408\u7684\u89d2\u8272\u3002 \u7ec4\u4ef6\u53ef\u4ee5\u72ec\u7acb\u4e8e\u5bb9\u5668\u5b58\u5728\uff0c \u4e5f\u53ef\u4ee5\u540c\u65f6\u8fde\u63a5\u591a\u4e2a\u5bb9\u5668\u3002 \u5728 UML \u56fe\u4e2d\uff0c \u805a\u5408\u5173\u7cfb\u4f7f\u7528\u4e00\u7aef\u662f\u7a7a\u5fc3\u83f1\u5f62\uff0c \u53e6\u4e00\u7aef\u6307\u5411\u7ec4\u4ef6\u7684\u7bad\u5934\u6765\u8868\u793a\u3002","title":"\u805a\u5408"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_7","text":"\u7ec4\u5408\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u805a\u5408\uff0c \u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u5bf9\u8c61\u5b9e\u4f8b\u6784\u6210\u3002 \u7ec4\u5408\u4e0e\u805a\u5408\u7684\u533a\u522b\u5728\u4e8e\u7ec4\u4ef6\u4ec5\u80fd\u4f5c\u4e3a\u5bb9\u5668\u7684\u4e00\u90e8\u5206\u5b58\u5728\uff0c\u5bb9\u5668\u9500\u6bc1\u65f6\uff0c\u7ec4\u4ef6\u4e5f\u4f1a\u88ab\u9500\u6bc1\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6559\u6388\u53ef\u4ee5\u540c\u65f6\u662f\u91d1\u878d\u9662\u7cfb\u548c\u6570\u5b66\u9662\u7cfb\u7684\u6559\u6388\uff0c\u4f46\u662f\u9662\u7cfb\u4e00\u822c\u4e0d\u4f1a\u540c\u65f6\u662f\u591a\u4e2a\u5927\u5b66\u7684\u9662\u7cfb\u3002 \u5728 UML \u56fe\u4e2d\uff0c \u7ec4\u5408\u4e0e\u805a\u5408\u5173\u7cfb\u7684\u7b26\u53f7\u76f8\u540c\uff0c \u4f46\u7bad\u5934\u8d77\u59cb\u5904\u7684\u83f1\u5f62\u662f\u5b9e\u5fc3\u7684\u3002","title":"\u7ec4\u5408"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.1.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html#_8","text":"\u4f9d\u8d56 \uff1a \u5bf9\u7c7b B \u8fdb\u884c\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u7c7b A \u3002 \u5173\u8054 \uff1a \u5bf9\u8c61 A \u77e5\u9053\u5bf9\u8c61 B\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u805a\u5408 \uff1a \u5bf9\u8c61 A \u77e5\u9053\u5bf9\u8c61 B \u4e14\u7531 B \u6784\u6210\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u7ec4\u5408 \uff1a \u5bf9\u8c61 A \u77e5\u9053\u5bf9\u8c61 B\u3001 \u7531 B \u6784\u6210\u800c\u4e14\u7ba1\u7406\u7740 B \u7684\u751f\u547d\u5468\u671f\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u5b9e\u73b0 \uff1a \u7c7b A \u5b9a\u4e49\u7684\u65b9\u6cd5\u7531\u63a5\u53e3 B \u58f0\u660e\u3002 \u5bf9\u8c61 A \u53ef\u88ab\u89c6\u4e3a\u5bf9\u8c61 B\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002 \u7ee7\u627f \uff1a \u7c7b A \u7ee7\u627f\u7c7b B \u7684\u63a5\u53e3\u548c\u5b9e\u73b0\uff0c \u4f46\u662f\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002 \u5bf9\u8c61 A \u53ef\u88ab\u89c6\u4e3a\u5bf9\u8c61 B\u3002 \u7c7b A \u4f9d\u8d56\u4e8e\u7c7b B\u3002","title":"\u603b\u7ed3"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","text":"\u8c01\u53d1\u660e\u4e86\u8bbe\u8ba1\u6a21\u5f0f\uff1f \u6a21\u5f0f\u7684\u6982\u5ff5\u662f\u7531\u514b\u91cc\u65af\u6258\u4f5b\u00b7\u4e9a\u5386\u5c71\u5927\u5728\u5176\u8457\u4f5c\u300a \u5efa\u7b51\u6a21\u5f0f\u8bed\u8a00\u300b\u4e2d\u9996\u6b21\u63d0\u51fa\u7684\u3002\u672c\u4e66\u4ecb\u7ecd\u4e86\u57ce\u5e02\u8bbe\u8ba1\u7684\u201c\u8bed\u8a00\u201d \uff0c\u800c\u8be5\u8bed\u8a00\u7684\u57fa\u672c\u5355\u5143\u5c31\u662f\u6a21\u5f0f\u3002\u5b83\u4eec\u53ef\u4ee5\u63cf\u8ff0\u7a97\u6237\u5e94\u8be5\u5728\u591a\u9ad8\u3001\u4e00\u5ea7\u5efa\u7b51\u5e94\u8be5\u6709\u591a\u5c11\u5c42\u4ee5\u53ca\u4e00\u7247\u8857\u533a\u5e94\u8be5\u6709\u591a\u5927\u9762\u79ef\u7684\u690d\u88ab\u7b49\u7b49\u3002 \u57c3\u91cc\u5e0c\u00b7\u4f3d\u739b\u3001\u7ea6\u7ff0\u00b7\u5f17\u5229\u8d5b\u5fb7\u65af\u3001\u62c9\u5c14\u592b\u00b7\u7ea6\u7ff0\u900a\u548c\u7406\u67e5\u5fb7\u00b7\u8d6b\u5c14\u59c6\u8fd9\u56db\u4f4d\u4f5c\u8005\u63a5\u53d7\u4e86\u6a21\u5f0f\u7684\u6982\u5ff5\u30021994 \u5e74\uff0c\u4ed6\u4eec\u51fa\u7248\u4e86\u300a\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u53ef\u590d\u7528\u9762\u5411\u5bf9\u8c61\u8f6f\u4ef6\u7684\u57fa\u7840\u300b\u4e00\u4e66 \uff0c\u5c06\u8bbe\u8ba1\u6a21\u5f0f\u7684\u6982\u5ff5\u5e94\u7528\u5230\u7a0b\u5e8f\u5f00\u53d1\u9886\u57df\u4e2d\u3002\u8be5\u4e66\u63d0\u4f9b\u4e86 23 \u4e2a\u6a21\u5f0f\u6765\u89e3\u51b3\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7684\u5404\u79cd\u95ee\u9898\uff0c\u5f88\u5feb\u4fbf\u6210\u4e3a\u4e86\u7545\u9500\u4e66\u3002\u7531\u4e8e\u4e66\u540d\u592a\u957f\uff0c\u4eba\u4eec\u5c06\u5176\u7b80\u79f0\u4e3a \u201c\u56db\u4eba\u7ec4\uff08Gang of Four\uff0cGoF\uff09\u7684\u4e66\u201d\uff0c\u5e76\u4e14\u5f88\u5feb\u8fdb\u4e00\u6b65\u7b80\u5316\u4e3a \u201cGoF \u7684\u4e66\u201d\u3002\u6b64\u540e\uff0c\u4eba\u4eec\u53c8\u53d1\u73b0\u4e86\u51e0\u5341\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u6a21\u5f0f\u3002\u201c\u6a21\u5f0f\u65b9\u6cd5\u201d \u5f00\u59cb\u5728\u5176\u4ed6\u7a0b\u5e8f\u5f00\u53d1\u9886\u57df\u4e2d\u6d41\u884c\u8d77\u6765\u3002\u5982\u4eca\uff0c\u4eba\u4eec\u8fd8\u5728\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u9886\u57df\u4e4b\u5916\u63d0\u51fa\u4e86\u8bb8\u591a\u5176\u4ed6\u7684\u6a21\u5f0f\u3002 \u8f6f\u4ef6\u8bbe\u8ba1\u539f\u5219 \u4f18\u79c0\u7684\u8bbe\u8ba1\u5e94\u8be5\u5177\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a 1.\u4ee3\u7801\u590d\u7528 \u4ee3\u7801\u590d\u7528\u662f\u51cf\u5c11\u5f00\u53d1\u6210\u672c\u65f6\u6700\u5e38\u7528\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002\u5176\u610f\u56fe\u975e\u5e38\u660e\u663e\uff1a\u4e0e\u5176\u53cd\u590d\u4ece\u5934\u5f00\u53d1\uff0c\u4e0d\u5982\u5728\u65b0\u5bf9\u8c61\u4e2d\u91cd\u7528\u5df2\u6709\u4ee3\u7801\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u8868\u9762\u770b\u8d77\u6765\u5f88\u68d2\uff0c\u4f46\u5b9e\u9645\u4e0a\u8981\u8ba9\u5df2\u6709\u4ee3\u7801\u5728\u5168\u65b0\u7684\u4e0a\u4e0b\u6587\u4e2d\u5de5\u4f5c \uff0c\u901a\u5e38\u8fd8\u662f\u9700\u8981\u4ed8\u51fa\u989d\u5916\u52aa\u529b\u3002\u7ec4\u4ef6\u95f4\u7d27\u5bc6\u7684\u8026\u5408\u3001\u5bf9\u5177\u4f53\u7c7b\u800c\u975e\u63a5\u53e3\u7684\u4f9d\u8d56\u548c\u786c\u7f16\u7801\u7684\u884c\u4e3a\u90fd\u4f1a\u964d\u4f4e\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u3002 2.\u6269\u5c55\u6027 \u6709\u5f88\u591a\u539f\u56e0\u4f1a\u5bfc\u81f4\u8f6f\u4ef6\u7684\u4fee\u6539\uff1a \u5bf9\u95ee\u9898\u6709\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u9700\u8981\u91cd\u6784\u4ee3\u7801 \u51fa\u73b0\u4e86\u610f\u6599\u4e4b\u5916\u7684\u53d8\u5316 \u9700\u6c42\u7684\u53d8\u5316 \u5c01\u88c5\u53d8\u5316\u7684\u5185\u5bb9 \u5c06\u7ecf\u5e38\u53d8\u5316\u7684\u529f\u80fd\u5c01\u88c5\u8fdb\u65b0\u7684\u51fd\u6570\u6216\u8005\u7c7b\uff0c\u8ba9\u5b83\u4eec\u4e13\u95e8\u8d1f\u8d23\u8fd9\u4e9b\u9700\u8981\u7ecf\u5e38\u53d8\u5316\u7684\u5b9e\u73b0\u3002 \u9762\u5411\u63a5\u53e3\u8fdb\u884c\u5f00\u53d1\uff0c\u800c\u4e0d\u662f\u9762\u5411\u5b9e\u73b0 \u5de6\u8fb9\u7684\u4ee3\u7801\uff0c Cat.eat() \u65b9\u6cd5\u76f4\u63a5\u4f9d\u8d56\u4e8e Sausage \u7684\u5b9e\u73b0\u3002\u53f3\u8fb9\u7684\u4ee3\u7801\uff0c Cat.eat() \u65b9\u6cd5\u4f9d\u8d56\u4e8e Food \u63a5\u53e3\uff0c\u7531 Sausage \u7c7b\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u529f\u80fd\u3002 \u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f \u7ee7\u627f\u53ef\u80fd\u662f\u7c7b\u4e4b\u95f4\u6700\u660e\u663e\u3001\u6700\u7b80\u4fbf\u7684\u4ee3\u7801\u590d\u7528\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u4ee3\u7801\u76f8\u540c\u7684\u7c7b\uff0c\u5c31\u53ef\u4ee5\u4e3a\u5b83\u4eec\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u57fa\u7c7b\uff0c\u7136\u540e\u5c06\u76f8\u4f3c\u7684\u4ee3\u7801\u79fb\u52a8\u5230\u5176\u4e2d\u3002\u4e0d\u8fc7\uff0c\u7ee7\u627f\u8fd9\u4ef6\u4e8b\u901a\u5e38\u53ea\u6709\u5728\u7a0b\u5e8f\u4e2d\u5df2\u5305\u542b\u5927\u91cf\u7c7b\uff0c \u4e14\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\u90fd\u975e\u5e38\u56f0\u96be\u65f6\u624d\u4f1a\u5f15\u8d77\u5173\u6ce8\u3002 \u4e0b\u9762\u5c31\u662f\u6b64\u7c7b\u95ee\u9898\u7684\u6e05\u5355\u3002 \u5b50\u7c7b\u4e0d\u80fd\u51cf\u5c11\u8d85\u7c7b\u7684\u63a5\u53e3\u3002 \u4f60\u5fc5\u987b\u5b9e\u73b0\u7236\u7c7b\u4e2d\u6240\u6709\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c \u5373\u4f7f\u5b83\u4eec\u6ca1\u4ec0\u4e48\u7528\u3002 \u5728\u91cd\u5199\u65b9\u6cd5\u65f6\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u65b0\u884c\u4e3a\u4e0e\u5176\u57fa\u7c7b\u4e2d\u7684\u7248\u672c\u517c\u5bb9\u3002 \u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b50\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u90fd\u53ef\u80fd\u88ab\u4f20\u9012\u7ed9\u4ee5\u8d85\u7c7b\u5bf9\u8c61\u4e3a\u53c2\u6570\u7684\u4efb\u4f55\u4ee3\u7801\uff0c\u76f8\u4fe1\u4f60\u4e0d\u4f1a\u5e0c\u671b\u8fd9\u4e9b\u4ee3\u7801\u5d29\u6e83\u7684\u3002 \u7ee7\u627f\u6253\u7834\u4e86\u8d85\u7c7b\u7684\u5c01\u88c5\uff0c\u56e0\u4e3a\u5b50\u7c7b\u62e5\u6709\u8bbf\u95ee\u7236\u7c7b\u5185\u90e8\u8be6\u7ec6\u5185\u5bb9\u7684\u6743\u9650\u3002 \u6b64\u5916\u8fd8\u53ef\u80fd\u4f1a\u6709\u76f8\u53cd\u7684\u60c5\u51b5\u51fa\u73b0\uff0c\u90a3\u5c31\u662f\u7a0b\u5e8f\u5458\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6269\u5c55\u7684\u65b9\u4fbf\u800c\u8ba9\u8d85\u7c7b\u77e5\u6653\u5b50\u7c7b\u7684\u5185\u90e8\u8be6\u7ec6\u5185\u5bb9\u3002 \u5b50\u7c7b\u4e0e\u8d85\u7c7b\u7d27\u5bc6\u8026\u5408\u3002 \u8d85\u7c7b\u4e2d\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u53ef\u80fd\u4f1a\u7834\u574f\u5b50\u7c7b\u7684\u529f\u80fd\u3002 \u901a\u8fc7\u7ee7\u627f\u590d\u7528\u4ee3\u7801\u53ef\u80fd\u5bfc\u81f4 \u5e73\u884c\u7ee7\u627f\u4f53\u7cfb \u7684\u4ea7\u751f\u3002 \u7ee7\u627f\u901a\u5e38\u4ec5\u53d1\u751f\u5728\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u3002\u53ea\u8981\u51fa\u73b0\u4e86\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7ef4\u5ea6\uff0c\u4f60\u5c31\u5fc5\u987b\u521b\u5efa\u6570\u91cf\u5de8\u5927\u7684\u7c7b\u7ec4\u5408\uff0c\u4ece\u800c\u4f7f\u7c7b\u5c42\u6b21\u7ed3\u6784\u81a8\u80c0\u5230\u4e0d\u53ef\u601d\u8bae\u7684\u7a0b\u5ea6\u3002 \u7ec4\u5408\u662f\u4ee3\u66ff\u7ee7\u627f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u7ee7\u627f\u4ee3\u8868\u7c7b\u4e4b\u95f4\u7684 \u201c\u662f\u201d \u5173\u7cfb \uff08\u6c7d\u8f66 \u662f \u4ea4\u901a\u5de5\u5177\uff09\uff0c \u800c\u7ec4\u5408\u5219\u4ee3\u8868 \u201c\u6709\u201d \u5173\u7cfb\uff08\u6c7d\u8f66 \u6709 \u4e00\u4e2a\u5f15\u64ce\uff09\u3002 \u5fc5\u987b\u4e00\u63d0\u7684\u662f\uff0c \u8fd9\u4e2a\u539f\u5219\u4e5f\u80fd\u5e94\u7528\u4e8e\u805a\u5408 \uff08\u4e00\u79cd\u66f4\u677e\u5f1b\u7684\u7ec4\u5408\u53d8\u4f53\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u5f15\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f46\u5e76\u4e0d\u7ba1\u7406\u5176\u751f\u547d\u5468\u671f\uff09\u3002\u4f8b\u5982\uff1a\u4e00\u8f86\u6c7d\u8f66\u4e0a\u6709\u53f8\u673a\uff0c\u4f46\u662f\u53f8\u673a\u4e5f\u53ef\u80fd\u4f1a\u4f7f\u7528\u53e6\u4e00\u8f86\u6c7d\u8f66\uff0c\u6216\u8005\u9009\u62e9\u6b65\u884c\u800c\u4e0d\u4f7f\u7528\u6c7d\u8f66\u3002 \u4e0b\u9762\u7684\u793a\u5c55\u793a\u4e86\u4f8b\u7ee7\u627f\u4e2d\u7684\u5e73\u884c\u7ee7\u627f\u4f53\u7cfb\u95ee\u9898\uff08\u5b50\u7c7b\u7206\u70b8\u95ee\u9898\uff09\uff1a \u5047\u5982\u4f60\u9700\u8981\u4e3a\u6c7d\u8f66\u5236\u9020\u5546\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u7a0b\u5e8f\u3002\u8be5\u516c\u53f8\u540c\u65f6\u751f\u4ea7\u6c7d\u8f66 Car \u548c\u5361\u8f66 Truck \uff0c\u8f66\u8f86\u53ef\u80fd\u662f\u7535\u52a8\u8f66 Electric \u6216\u6c7d\u6cb9\u8f66 Combustion \uff1b\u6240\u6709\u8f66\u578b\u90fd\u914d\u5907\u4e86\u624b\u52a8\u63a7\u5236 manual control \u6216\u81ea\u52a8\u9a7e\u9a76 Autopilot \u529f\u80fd\u3002 \u5728\u591a\u4e2a\u7ef4\u5ea6\u4e0a\u6269\u5c55\u4e00\u4e2a\u7c7b\uff08\u6c7d\u8f66\u7c7b\u578b \u00d7 \u5f15\u64ce\u7c7b\u578b \u00d7 \u9a7e\u9a76\u7c7b\u578b\uff09\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b50\u7c7b\u7ec4\u5408\u7684\u6570\u91cf\u7206\u70b8\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ec4\u5408\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a \u6c7d\u8f66\u5bf9\u8c61\u53ef\u5c06\u884c\u4e3a\u59d4\u6d3e\u7ed9\u5176\u4ed6\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u81ea\u884c\u5b9e\u73b0\u3002\u8fd8\u6709\u4e00\u4e2a\u597d\u5904\u662f\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5bf9\u884c\u4e3a\u8fdb\u884c\u66ff\u6362\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u4e3a\u6c7d\u8f66\u5bf9\u8c61\u5206\u914d\u4e00\u4e2a\u4e0d\u540c\u7684\u5f15\u64ce\u5bf9\u8c61\u6765\u66ff\u6362\u5df2\u8fde\u63a5\u81f3\u6c7d\u8f66\u7684\u5f15\u64ce\u3002 \u5355\u4e00\u804c\u8d23\u539f\u5219 Single Respon\u00adsi\u00adbil\u00adi\u00adty Prin\u00adci\u00adple \u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u539f\u56e0\u53ea\u80fd\u6709\u4e00\u4e2a\u3002\u5c3d\u91cf\u8ba9\u6bcf\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u8f6f\u4ef6\u4e2d\u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5e76\u5c06\u8be5\u529f\u80fd\u5b8c\u5168\u5c01\u88c5\u5728\u8be5\u7c7b\u4e2d\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u8d1f\u8d23\u8fc7\u591a\u7684\u529f\u80fd\uff0c\u5f53\u7a0b\u5e8f\u89c4\u6a21\u4e0d\u65ad\u6269\u5927\u3001\u53d8\u66f4\u4e0d\u65ad\u589e\u52a0\u540e\uff0c\u7c7b\u4f1a\u53d8\u5f97\u8fc7\u4e8e\u5e9e\u5927\uff0c\u4ee5\u81f3\u4e8e\u4f60\u65e0\u6cd5\u8bb0\u4f4f\u5176\u7ec6\u8282\u3002\u67e5\u627e\u4ee3\u7801\u5c06\u53d8\u5f97\u975e\u5e38\u7f13\u6162\uff0c\u4f60\u5fc5\u987b\u6d4f\u89c8\u6574\u4e2a\u7c7b\u3001\u751a\u81f3\u6574\u4e2a\u7a0b\u5e8f\u624d\u80fd\u627e\u5230\u9700\u8981\u7684\u4e1c\u897f\u3002 \u8fd8\u6709\u4e00\u70b9\uff1a\u5982\u679c\u7c7b\u8d1f\u8d23\u7684\u4e1c\u897f\u592a\u591a\uff0c\u90a3\u4e48\u5f53\u5176\u4e2d\u4efb\u4f55\u4e00\u4ef6\u4e8b\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u4f60\u90fd\u5fc5\u987b\u5bf9\u7c7b\u8fdb\u884c\u4fee\u6539\u3002\u800c\u5728\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u6539\u52a8\u7c7b\u4e2d\u81ea\u5df1\u5e76\u4e0d\u5e0c\u671b\u6539\u52a8\u7684\u90e8\u5206\u3002 \u5f00\u95ed\u539f\u5219 open/closed Prin\u00adci\u00adple \u5bf9\u4e8e\u6269\u5c55\uff0c\u7c7b\u5e94\u8be5\u662f\u201c\u5f00\u653e\u201d\u7684\uff1b\u5bf9\u4e8e\u4fee\u6539\uff0c\u7c7b\u5219\u5e94\u662f\u201c\u5c01\u95ed\u201d\u7684\u3002 \u8fd9\u4e2a\u539f\u5219\u770b\u4e0a\u53bb\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u201d\u5f00\u653e\u201c\u548c\u201d\u5c01\u95ed\u201c\u4e24\u4e2a\u8bcd\u662f\u4e92\u65a5\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u201c\u5f00\u653e\u201d\u548c\u201c\u5c01\u95ed\u201c\u662f\u9488\u5bf9\u4e0d\u540c\u7684\u4e1c\u897f\u800c\u8a00\uff1a \u5f00\u653e \uff1a\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5bf9\u4e00\u4e2a\u7c7b\u8fdb\u884c\u6269\u5c55\uff0c\u5e76\u4e14\u8be5\u7c7b\u7684\u5b50\u7c7b\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff08\u5982\u65b0\u589e\u65b9\u6cd5\u6216\u6210\u5458\u53d8\u91cf\u3001\u91cd\u5199\u57fa\u7c7b\u884c\u4e3a\u7b49\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u662f\u5f00\u653e\u7684\u3002\u6709\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u4f60\u901a\u8fc7\u7279\u6b8a\u5173\u952e\u5b57\uff08\u4f8b\u5982 final \uff09\u6765\u9650\u5236\u5bf9\u4e8e\u7c7b\u7684\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u8fd9\u6837\u7c7b\u5c31\u4e0d\u518d\u662f \u201c\u5f00\u653e\u201d \u7684\u4e86\u3002 \u5c01\u95ed \uff1a\u5982\u679c\u67d0\u4e2a\u7c7b\u5df2\u505a\u597d\u4e86\u5145\u5206\u7684\u51c6\u5907\u5e76\u53ef\u4f9b\u5176\u4ed6\u7c7b\u4f7f\u7528\u7684\u8bdd\uff08\u5373\u5176\u63a5\u53e3\u5df2\u660e\u786e\u5b9a\u4e49\u4e14\u4ee5\u540e\u4e0d\u4f1a\u4fee\u6539\uff09\uff0c\u90a3\u4e48\u8be5\u7c7b\u5c31\u662f\u5c01\u95ed\uff08\u4f60\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u5b8c\u6574\uff09\u7684\u3002 \u672c\u539f\u5219\u7684\u4e3b\u8981\u7406\u5ff5\u662f\u65b0\u529f\u80fd\u901a\u8fc7\u589e\u52a0\u65b0\u4ee3\u7801\u5b9e\u73b0\uff0c\u800c\u4e0d\u4fee\u6539\u5df2\u6709\u4ee3\u7801\u3002 \u66f4\u5177\u4f53\u6765\u8bf4\uff0c\u65b0\u529f\u80fd\u901a\u8fc7\u5b50\u7c7b\u5b9e\u73b0\uff0c\u800c\u4e0d\u4fee\u6539\u5df2\u6709\u7684\u57fa\u7c7b\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5df2\u7ecf\u5b8c\u6210\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u5ba1\u6838\u5de5\u4f5c\uff0c\u800c\u4e14\u5c5e\u4e8e\u67d0\u4e2a\u6846\u67b6\u6216\u8005\u53ef\u88ab\u5176\u4ed6\u7c7b\u7684\u4ee3\u7801\u76f4\u63a5\u4f7f\u7528\u7684\u8bdd\uff0c\u5bf9\u5176\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\u5c31\u662f\u6709\u98ce\u9669\u7684\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5b50\u7c7b\u5e76\u91cd\u5199\u539f\u59cb\u7c7b\u7684\u90e8\u5206\u5185\u5bb9\u4ee5\u5b8c\u6210\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5bf9\u539f\u59cb\u7c7b\u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\u3002\u8fd9\u6837\u4f60\u65e2\u53ef\u4ee5\u8fbe\u6210\u81ea\u5df1\u7684\u76ee\u6807\uff0c\u4f46\u540c\u65f6\u53c8\u65e0\u9700\u4fee\u6539\u5df2\u6709\u7684\u539f\u59cb\u7c7b\u5ba2\u6237\u7aef\u3002 \u8fd9\u6761\u539f\u5219\u5e76\u4e0d\u80fd\u5e94\u7528\u4e8e\u6240\u6709\u5bf9\u7c7b\u8fdb\u884c\u7684\u4fee\u6539\u4e2d\u3002\u5982\u679c\u4f60\u53d1\u73b0\u7c7b\u4e2d\u5b58\u5728\u7f3a\u9677\uff0c\u76f4\u63a5\u5bf9\u5176\u8fdb\u884c\u4fee\u590d\u5373\u53ef\uff0c\u4e0d\u8981\u4e3a\u5b83\u521b\u5efa\u5b50\u7c7b\u3002\u5b50\u7c7b\u4e0d\u5e94\u8be5\u5bf9\u5176\u7236\u7c7b\u7684\u95ee\u9898\u8d1f\u8d23\u3002 \u793a\u4f8b \u4f60\u7684\u7535\u5b50\u5546\u52a1\u7a0b\u5e8f\u4e2d\u5305\u542b\u4e00\u4e2a\u8ba1\u7b97\u8fd0\u8f93\u8d39\u7528\u7684\u8ba2\u5355Order\u7c7b\uff0c\u8be5\u7c7b\u4e2d\u6240\u6709\u8fd0\u8f93\u65b9\u6cd5\u90fd\u4ee5\u786c\u7f16\u7801\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002 \u5982\u679c\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8fd0\u8f93\u65b9\u5f0f\uff0c \u90a3\u5c31\u5fc5\u987b\u627f\u62c5\u5bf9\u8ba2\u5355\u7c7b\u9020\u6210\u7834\u574f\u7684\u53ef\u80fd\u98ce\u9669\u6765\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528\u7b56\u7565\u6a21\u5f0f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u9996\u5148\u5c06\u8fd0\u8f93\u65b9\u6cd5\u62bd\u53d6\u5230\u62e5\u6709\u540c\u6837\u63a5\u53e3\u7684\u4e0d\u540c\u7c7b\u4e2d\u3002 \u5728Python\u4e2d\uff0c <<interface>> \u4e00\u822c\u901a\u8fc7\u62bd\u8c61\u7c7b\u5b9e\u73b0\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u62bd\u8c61\u7c7b\uff0c\u5e76\u5b9e\u73b0\u63a5\u53e3\u7684\u5177\u4f53\u529f\u80fd\u3002\u6b64\u65f6\uff0c\u901a\u8fc7\u7ee7\u627f\u62bd\u8c61\u7c7b\uff0c\u5e76\u5b9e\u73b0\u63a5\u53e3\uff0c\u8fd9\u79f0\u4e3a\u201c\u5f00\u653e\u201d\uff1b\u4f9d\u8d56\u4e8e\u62bd\u8c61\u7c7b\u63a5\u53e3\u7684\u7c7b\u4e0d\u9700\u8981\u4f5c\u4fee\u6539\uff0c\u8fd9\u79f0\u4e3a\u201c\u5c01\u95ed\u201d\u3002 \u73b0\u5728\uff0c\u5f53\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u8fd0\u8f93\u65b9\u5f0f\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u8fd0\u8f93\u65b9\u5f0fShipping\u63a5\u53e3\u6765\u65b0\u5efa\u4e00\u4e2a\u7c7b\uff0c\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u8ba2\u5355\u7c7b\u7684\u4ee3\u7801\u3002\u5f53\u7528\u6237\u5728 UI \u4e2d\u9009\u62e9\u8fd9\u79cd\u8fd0\u8f93\u65b9\u5f0f\u65f6\uff0c\u8ba2\u5355\u7c7b\u5ba2\u6237\u7aef\u4ee3\u7801\u4f1a\u5c06\u8ba2\u5355\u94fe\u63a5\u5230\u65b0\u7c7b\u7684\u8fd0\u8f93\u65b9\u5f0f\u5bf9\u8c61\u3002 \u6b64\u5916\uff0c\u6839\u636e\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u80fd\u591f\u8ba9\u4f60\u5c06\u8fd0\u8f93\u65f6\u95f4\u7684\u8ba1\u7b97\u4ee3\u7801\u79fb\u52a8\u5230\u4e0e\u5176\u76f8\u5173\u5ea6\u66f4\u9ad8\u7684\u7c7b\u4e2d\u3002 \u91cc\u6c0f\u66ff\u6362\u539f\u5219 Liskov Substitution Principle \u5f53\u6269\u5c55\u4e00\u4e2a\u7c7b\u65f6\uff0c \u5e94\u8be5\u80fd\u5728\u4e0d\u4fee\u6539\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u5c06\u5b50\u7c7b\u7684\u5bf9\u8c61\u66ff\u4ee3\u7236\u7c7b\u5bf9\u8c61\u8fdb\u884c\u4f20\u9012\u3002\u8fd9\u610f\u5473\u7740\u5b50\u7c7b\u5fc5\u987b\u4fdd\u6301\u4e0e\u7236\u7c7b\u884c\u4e3a\u7684\u517c\u5bb9\u3002 \u5728\u91cd\u5199\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c \u4f60\u8981\u5bf9\u57fa\u7c7b\u884c\u4e3a\u8fdb\u884c\u6269\u5c55\uff0c \u800c\u4e0d\u662f\u5c06\u5176\u5b8c\u5168\u66ff\u6362\u3002 \u66ff\u4ee3\u539f\u5219\u5305\u542b\u4e00\u7ec4\u5bf9\u5b50\u7c7b \uff08\u7279\u522b\u662f\u5176\u65b9\u6cd5\uff09 \u7684\u5f62\u5f0f\u8981\u6c42\uff1a \u5b50\u7c7b\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u4e0e\u5176\u8d85\u7c7b\u7684\u53c2\u6570\u7c7b\u578b\u76f8\u5339\u914d\u6216\u66f4\u52a0\u62bd\u8c61 1 \u3002 \u5047\u8bbe A \u7c7b\u6709\u4e2a\u65b9\u6cd5\u7528\u4e8e\u7ed9\u732b\u54aa\u5582\u98df\uff1a feed(Cat c) \u3002 \u5ba2\u6237\u7aef\u4ee3\u7801\u603b\u662f\u4f1a\u5c06 cat \u5bf9\u8c61\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u3002 \u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b B \u7ee7\u627f\u7c7b A \uff0c\u5e76\u5c06 feed \u65b9\u6cd5\u91cd\u5199\u4e3a feed(Animal c) \uff0c\u4f7f\u5176\u80fd\u591f\u7ed9\u4efb\u4f55 \u52a8\u7269-animal\uff08\u5373 \u2018\u732b\u2019 \u7684\u8d85\u7c7b\uff09\u5582\u98df\u3002\u5982\u679c\u73b0\u5728\u4f60\u5c06\u7c7b A \u7684\u5bf9\u8c61\u66ff\u6362\u4e3a\u5b50\u7c7b B \u7684\u5bf9\u8c61\uff0c\u7a0b\u5e8f\u4ecd\u5c06\u6b63\u5e38\u5de5\u4f5c\u3002 \u4e0d\u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b B \u7ee7\u627f\u7c7b A \uff0c\u5e76\u5c06 feed \u65b9\u6cd5\u91cd\u5199\u4e3a feed(BengalCat c) \uff0c\u5176\u53ea\u80fd\u591f\u7ed9 \u5b5f\u52a0\u62c9\u732b-BengalCat\uff08\u201c\u732b\u201d\u7684\u5b50\u7c7b\uff09\u5582\u98df\u3002\u5982\u679c\u73b0\u5728\u4f60\u5c06\u7c7b A \u7684\u5bf9\u8c61\u66ff\u6362\u4e3a\u5b50\u7c7b B \u7684\u5bf9\u8c61\uff0c\u7531\u4e8e\u8be5\u65b9\u6cd5\u53ea\u80fd\u5bf9\u7279\u6b8a\u79cd\u7c7b\u7684\u732b\u8fdb\u884c\u5582\u98df\uff0c\u56e0\u6b64\u65e0\u6cd5\u4e3a\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u7684\u666e\u901a\u732b\u63d0\u4f9b\u670d\u52a1\uff0c\u4ece\u800c\u5c06\u7834\u574f\u6240\u6709\u76f8\u5173\u7684\u529f\u80fd\u3002 \u5b50\u7c7b\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u4e0e\u8d85\u7c7b\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u6216\u662f\u5176\u5b50\u7c7b\u522b\u76f8\u5339\u914d\u3002 \u5047\u5982\u4f60\u7684\u4e00\u4e2a\u7c7b\u4e2d\u6709\u4e00\u4e2a\u65b9\u6cd5 buyCat(): Cat \u3002\u5ba2\u6237\u7aef\u4ee3\u7801\u6267\u884c\u8be5\u65b9\u6cd5\u540e\u7684\u9884\u671f\u8fd4\u56de\u7ed3\u679c\u662f\u4efb\u610f\u7c7b\u578b\u7684 \u201c\u732b\u201d\u3002 \u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b\u5c06\u8be5\u65b9\u6cd5\u91cd\u5199\u4e3a\uff1a buyCat(): BengalCat \u3002\u5ba2\u6237\u7aef\u5c06\u83b7\u5f97\u4e00\u53ea \u201c\u5b5f\u52a0\u62c9\u732b\u201d\uff0c\u81ea\u7136\u5b83\u4e5f\u662f\u4e00\u53ea \u201c\u732b\u201d\uff0c\u56e0\u6b64\u4e00\u5207\u6b63\u5e38\u3002 \u4e0d\u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b\u5c06\u8be5\u65b9\u6cd5\u91cd\u5199\u4e3a\uff1a buyCat(): Animal \u3002\u73b0\u5728\u5ba2\u6237\u7aef\u4ee3\u7801\u5c06\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u5b83\u83b7\u5f97\u7684\u662f\u81ea\u5df1\u672a\u77e5\u7684\u52a8\u7269\u79cd\u7c7b\uff0c\u5982\u679c\u8fd4\u56de\u4e00\u53ea\u77ed\u543b\u9cc4\uff0c\u5219\u4e0d\u9002\u7528\u4e8e\u4e3a\u4e00\u53ea \u201c\u732b\u201d \u800c\u8bbe\u8ba1\u7684\u7ed3\u6784\u3002 \u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4e0d\u5e94\u629b\u51fa\u57fa\u7840\u65b9\u6cd5\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\u7c7b\u578b\u3002 \u5ba2\u6237\u7aef\u4ee3\u7801\u6355\u6349\u5f02\u5e38\u7684\u4ee3\u7801\u5757\u662f\u9488\u5bf9\u7684\u662f\u57fa\u7840\u65b9\u6cd5\u53ef\u80fd\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c \u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\u53ef\u80fd\u4f1a\u7a7f\u900f\u5ba2\u6237\u7aef\u7684\u9632\u5fa1\u4ee3\u7801\uff0c \u4ece\u800c\u4f7f\u6574\u4e2a\u5e94\u7528\u5d29\u6e83\u3002 \u5b50\u7c7b\u4e0d\u5e94\u8be5\u52a0\u5f3a\u5176\u524d\u7f6e\u6761\u4ef6\u3002 \u4f8b\u5982\uff0c\u57fa\u7c7b\u7684\u65b9\u6cd5\u6709\u4e00\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c\u5b50\u7c7b\u91cd\u5199\u8be5\u65b9\u6cd5\u65f6\uff0c\u8981\u6c42\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u503c\u5fc5\u987b\u4e3a\u6b63\u6570\uff08\u5982\u679c\u8be5\u503c\u4e3a\u8d1f\u5219\u629b\u51fa\u5f02\u5e38\uff09\uff0c\u8fd9\u5c31\u662f\u52a0\u5f3a\u4e86\u524d\u7f6e\u6761\u4ef6\u3002\u5ba2\u6237\u7aef\u4ee3\u7801\u4e4b\u524d\u5c06\u8d1f\u6570\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u65f6\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u73b0\u5728\u4f7f\u7528\u5b50\u7c7b\u7684\u5bf9\u8c61\u65f6\u4f1a\u4f7f\u7a0b\u5e8f\u51fa\u9519\u3002 \u5b50\u7c7b\u4e0d\u80fd\u524a\u5f31\u5176\u540e\u7f6e\u6761\u4ef6\u3002 \u5047\u5982\u4f60\u7684\u67d0\u4e2a\u7c7b\u4e2d\u6709\u4e2a\u65b9\u6cd5\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\uff0c \u8be5\u65b9\u6cd5\u5e94\u8be5\u5728\u63a5\u6536\u5230\u8fd4\u56de\u503c\u540e\u5173\u95ed\u6240\u6709\u6d3b\u8dc3\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u5b50\u7c7b\u5e76\u5bf9\u5176\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4f7f\u5f97\u6570\u636e\u5e93\u4fdd\u6301\u8fde\u63a5\u4ee5\u4fbf\u91cd\u7528\u3002\u4f46\u5ba2\u6237\u7aef\u53ef\u80fd\u5bf9\u4f60\u7684\u610f\u56fe\u4e00\u65e0\u6240\u77e5\u3002\u7531\u4e8e\u5b83\u8ba4\u4e3a\u8be5\u65b9\u6cd5\u4f1a\u5173\u95ed\u6240\u6709\u7684\u8fde\u63a5\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u540e\u5c31\u9a6c\u4e0a\u5173\u95ed\u7a0b\u5e8f\uff0c\u4f7f\u5f97\u65e0\u7528\u7684\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u7cfb\u7edf\u9020\u6210 \u201c\u6c61\u67d3\u201d\u3002 \u8d85\u7c7b\u7684\u4e0d\u53d8\u91cf\u5fc5\u987b\u4fdd\u7559\u3002 \u8fd9\u5f88\u53ef\u80fd\u662f\u6240\u6709\u89c4\u5219\u4e2d\u6700\u4e0d \u201c\u5f62\u5f0f\u201d \u7684\u4e00\u6761\u3002\u4e0d\u53d8\u91cf\u662f\u8ba9\u5bf9\u8c61\u6709\u610f\u4e49\u7684\u6761\u4ef6\u3002 \u4e0d\u53d8\u91cf\u7684\u89c4\u5219\u662f\u6700\u5bb9\u6613\u8fdd\u53cd\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u80fd\u4f1a\u8bef\u89e3\u6216\u6ca1\u6709\u610f\u8bc6\u5230\u4e00\u4e2a\u590d\u6742\u7c7b\u4e2d\u7684\u6240\u6709\u4e0d\u53d8\u91cf\u3002\u56e0\u6b64\uff0c\u6269\u5c55\u4e00\u4e2a\u7c7b\u7684\u6700\u5b89\u5168\u505a\u6cd5\u662f\u5f15\u5165\u65b0\u7684\u6210\u5458\u53d8\u91cf\u548c\u65b9\u6cd5\uff0c\u800c\u4e0d\u8981\u53bb\u62db\u60f9\u8d85\u7c7b\u4e2d\u5df2\u6709\u7684\u6210\u5458\u3002\u5f53\u7136\u5728\u5b9e\u9645\u4e2d\uff0c\u8fd9\u5e76\u975e\u603b\u662f\u53ef\u884c\u3002 \u5b50\u7c7b\u4e0d\u80fd\u4fee\u6539\u8d85\u7c7b\u4e2d\u79c1\u6709\u6210\u5458\u53d8\u91cf\u7684\u503c\u3002 \u6709\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u6765\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\u3002\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00 \uff08Python \u548c JavaScript\uff09\u6ca1\u6709\u5bf9\u79c1\u6709\u6210\u5458\u8fdb\u884c\u4efb\u4f55\u4fdd\u62a4\u3002 \u63a5\u53e3\u9694\u79bb\u539f\u5219 Interface Segregation Principle \u5ba2\u6237\u7aef\u4e0d\u5e94\u88ab\u5f3a\u8feb\u4f9d\u8d56\u4e8e\u5176\u4e0d\u4f7f\u7528\u7684\u65b9\u6cd5\u3002 \u5047\u5982\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u7a0b\u5e8f\u5e93\uff0c\u5b83\u80fd\u8ba9\u7a0b\u5e8f\u65b9\u4fbf\u5730\u4e0e\u591a\u79cd\u4e91\u8ba1\u7b97\u4f9b\u5e94\u5546\u8fdb\u884c\u6574\u5408\u3002\u5c3d\u7ba1\u6700\u521d\u7248\u672c\u4ec5\u652f\u6301\u963f\u91cc\u4e91\u670d\u52a1\uff0c\u4f46\u5b83\u4e5f\u8986\u76d6\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u4e91\u670d\u52a1\u548c\u529f\u80fd\u3002 \u5047\u8bbe\u6240\u6709\u4e91\u670d\u52a1\u4f9b\u5e94\u5546\u90fd\u4e0e\u963f\u91cc\u4e91\u4e00\u6837\u63d0\u4f9b\u76f8\u540c\u79cd\u7c7b\u7684\u529f\u80fd\u3002\u4f46\u5f53\u4f60\u7740\u624b\u4e3a\u5176\u4ed6\u4f9b\u5e94\u5546\u63d0\u4f9b\u652f\u6301\u65f6\uff0c\u7a0b\u5e8f\u5e93\u4e2d\u7edd\u5927\u90e8\u5206\u7684\u63a5\u53e3\u4f1a\u663e\u5f97\u8fc7\u4e8e\u5bbd\u6cdb\u3002 \u5176\u4ed6\u4e91\u670d\u52a1\u4f9b\u5e94\u5546\u6ca1\u6709\u63d0\u4f9b\u90e8\u5206\u65b9\u6cd5\u6240\u63cf\u8ff0\u7684\u529f\u80fd\u3002 \u5c3d\u7ba1\u4f60\u4ecd\u7136\u53ef\u4ee5\u53bb\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u5e76\u653e\u5165\u4e00\u4e9b\u810f\u4ee3\u7801\uff0c\u4f46\u8fd9\u7edd\u4e0d\u662f\u4f18\u826f\u7684\u89e3\u51b3\u65b9\u6848\u3002\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5c06\u63a5\u53e3\u62c6\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\u3002\u80fd\u591f\u5b9e\u73b0\u539f\u59cb\u63a5\u53e3\u7684\u7c7b\u73b0\u5728\u53ea\u9700\u6539\u4e3a\u5b9e\u73b0\u591a\u4e2a\u7cbe\u7ec6\u7684\u63a5\u53e3\u5373\u53ef\u3002\u5176\u4ed6\u7c7b\u5219\u53ef\u4ec5\u5b9e\u73b0\u5bf9\u81ea\u5df1\u6709\u610f\u4e49\u7684\u63a5\u53e3\u3002 \u4e0e\u5176\u4ed6\u539f\u5219\u4e00\u6837\uff0c\u4f60\u53ef\u80fd\u4f1a\u8fc7\u5ea6\u4f7f\u7528\u8fd9\u6761\u539f\u5219\u3002\u4e0d\u8981\u8fdb\u4e00\u6b65\u5212\u5206\u5df2\u7ecf\u975e\u5e38\u5177\u4f53\u7684\u63a5\u53e3\u3002\u8bb0\u4f4f\uff0c\u521b\u5efa\u7684\u63a5\u53e3\u8d8a\u591a\uff0c\u4ee3\u7801\u5c31\u8d8a\u590d\u6742\u3002\u56e0\u6b64\u8981\u4fdd\u6301\u5e73\u8861\u3002 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 Dependency Inversion Principle \u9ad8\u5c42\u6b21\u7684\u7c7b\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6b21\u7684\u7c7b\u3002\u4e24\u8005\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u63a5\u53e3\u3002\u62bd\u8c61\u63a5\u53e3\u4e0d\u5e94\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0\u3002\u5177\u4f53\u5b9e\u73b0\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u63a5\u53e3\u3002 \u901a\u5e38\u5728\u8bbe\u8ba1\u8f6f\u4ef6\u65f6\uff0c\u4f60\u53ef\u4ee5\u8fa8\u522b\u51fa\u4e0d\u540c\u5c42\u6b21\u7684\u7c7b\uff1a \u4f4e\u5c42\u6b21\u7684\u7c7b \u5b9e\u73b0\u57fa\u7840\u64cd\u4f5c\uff08\u4f8b\u5982\u78c1\u76d8\u64cd\u4f5c\u3001\u4f20\u8f93\u7f51\u7edc\u6570\u636e\u548c\u8fde\u63a5\u6570\u636e\u5e93\u7b49\uff09\u3002 \u9ad8\u5c42\u6b21\u7c7b \u5305\u542b\u590d\u6742\u4e1a\u52a1\u903b\u8f91\u4ee5\u6307\u5bfc\u4f4e\u5c42\u6b21\u7c7b\u6267\u884c\u7279\u5b9a\u64cd\u4f5c\u3002 \u6709\u65f6\u4eba\u4eec\u4f1a\u5148\u8bbe\u8ba1\u4f4e\u5c42\u6b21\u7684\u7c7b\uff0c\u7136\u540e\u624d\u4f1a\u5f00\u53d1\u9ad8\u5c42\u6b21\u7684\u7c7b\u3002\u5f53\u4f60\u5728\u65b0\u7cfb\u7edf\u4e0a\u5f00\u53d1\u539f\u578b\u4ea7\u54c1\u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u5e38\u89c1\u3002\u7531\u4e8e\u4f4e\u5c42\u6b21\u7684\u4e1c\u897f\u8fd8\u6ca1\u6709\u5b9e\u73b0\u6216\u4e0d\u786e\u5b9a\uff0c\u4f60\u751a\u81f3\u65e0\u6cd5\u786e\u5b9a\u9ad8\u5c42\u6b21\u7c7b\u80fd\u5b9e\u73b0\u54ea\u4e9b\u529f\u80fd\u3002\u5982\u679c\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e1a\u52a1\u903b\u8f91\u7c7b\u53ef\u80fd\u4f1a\u66f4\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u539f\u8bed\u7c7b\u3002 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u5efa\u8bae\u6539\u53d8\u8fd9\u79cd\u4f9d\u8d56\u65b9\u5f0f\uff0c\u5c06\u9ad8\u5c42\u6b21\u7684\u7c7b\u7684\u4f9d\u8d56\u62bd\u8c61\u6210\u63a5\u53e3\uff0c\u8ba9\u4f4e\u5c42\u6b21\u7c7b\u5b9e\u73b0\u63a5\u53e3\uff0c\u800c\u9ad8\u5c42\u6b21\u7c7b\u53ea\u9700\u8981\u8c03\u7528\u63a5\u53e3\uff0c\u4e0d\u9700\u8981\u8c03\u7528\u4f4e\u5c42\u6b21\u7684\u7c7b\u3002\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u901a\u5e38\u548c \u5f00\u95ed\u539f\u5219 \u5171\u540c\u53d1\u6325\u4f5c\u7528\uff1a\u4f60\u65e0\u9700\u4fee\u6539\u5df2\u6709\u7c7b\u5c31\u80fd\u7528\u4e0d\u540c\u7684\u4e1a\u52a1\u903b\u8f91\u7c7b\u6269\u5c55\u4f4e\u5c42\u6b21\u7684\u7c7b \u66f4\u901a\u7528 \u21a9","title":"7.2.\u9762\u5411\u5bf9\u8c61\u8f6f\u4ef6\u8bbe\u8ba1\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_1","text":"\u6a21\u5f0f\u7684\u6982\u5ff5\u662f\u7531\u514b\u91cc\u65af\u6258\u4f5b\u00b7\u4e9a\u5386\u5c71\u5927\u5728\u5176\u8457\u4f5c\u300a \u5efa\u7b51\u6a21\u5f0f\u8bed\u8a00\u300b\u4e2d\u9996\u6b21\u63d0\u51fa\u7684\u3002\u672c\u4e66\u4ecb\u7ecd\u4e86\u57ce\u5e02\u8bbe\u8ba1\u7684\u201c\u8bed\u8a00\u201d \uff0c\u800c\u8be5\u8bed\u8a00\u7684\u57fa\u672c\u5355\u5143\u5c31\u662f\u6a21\u5f0f\u3002\u5b83\u4eec\u53ef\u4ee5\u63cf\u8ff0\u7a97\u6237\u5e94\u8be5\u5728\u591a\u9ad8\u3001\u4e00\u5ea7\u5efa\u7b51\u5e94\u8be5\u6709\u591a\u5c11\u5c42\u4ee5\u53ca\u4e00\u7247\u8857\u533a\u5e94\u8be5\u6709\u591a\u5927\u9762\u79ef\u7684\u690d\u88ab\u7b49\u7b49\u3002 \u57c3\u91cc\u5e0c\u00b7\u4f3d\u739b\u3001\u7ea6\u7ff0\u00b7\u5f17\u5229\u8d5b\u5fb7\u65af\u3001\u62c9\u5c14\u592b\u00b7\u7ea6\u7ff0\u900a\u548c\u7406\u67e5\u5fb7\u00b7\u8d6b\u5c14\u59c6\u8fd9\u56db\u4f4d\u4f5c\u8005\u63a5\u53d7\u4e86\u6a21\u5f0f\u7684\u6982\u5ff5\u30021994 \u5e74\uff0c\u4ed6\u4eec\u51fa\u7248\u4e86\u300a\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u53ef\u590d\u7528\u9762\u5411\u5bf9\u8c61\u8f6f\u4ef6\u7684\u57fa\u7840\u300b\u4e00\u4e66 \uff0c\u5c06\u8bbe\u8ba1\u6a21\u5f0f\u7684\u6982\u5ff5\u5e94\u7528\u5230\u7a0b\u5e8f\u5f00\u53d1\u9886\u57df\u4e2d\u3002\u8be5\u4e66\u63d0\u4f9b\u4e86 23 \u4e2a\u6a21\u5f0f\u6765\u89e3\u51b3\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7684\u5404\u79cd\u95ee\u9898\uff0c\u5f88\u5feb\u4fbf\u6210\u4e3a\u4e86\u7545\u9500\u4e66\u3002\u7531\u4e8e\u4e66\u540d\u592a\u957f\uff0c\u4eba\u4eec\u5c06\u5176\u7b80\u79f0\u4e3a \u201c\u56db\u4eba\u7ec4\uff08Gang of Four\uff0cGoF\uff09\u7684\u4e66\u201d\uff0c\u5e76\u4e14\u5f88\u5feb\u8fdb\u4e00\u6b65\u7b80\u5316\u4e3a \u201cGoF \u7684\u4e66\u201d\u3002\u6b64\u540e\uff0c\u4eba\u4eec\u53c8\u53d1\u73b0\u4e86\u51e0\u5341\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u6a21\u5f0f\u3002\u201c\u6a21\u5f0f\u65b9\u6cd5\u201d \u5f00\u59cb\u5728\u5176\u4ed6\u7a0b\u5e8f\u5f00\u53d1\u9886\u57df\u4e2d\u6d41\u884c\u8d77\u6765\u3002\u5982\u4eca\uff0c\u4eba\u4eec\u8fd8\u5728\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u9886\u57df\u4e4b\u5916\u63d0\u51fa\u4e86\u8bb8\u591a\u5176\u4ed6\u7684\u6a21\u5f0f\u3002","title":"\u8c01\u53d1\u660e\u4e86\u8bbe\u8ba1\u6a21\u5f0f\uff1f"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_2","text":"\u4f18\u79c0\u7684\u8bbe\u8ba1\u5e94\u8be5\u5177\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a 1.\u4ee3\u7801\u590d\u7528 \u4ee3\u7801\u590d\u7528\u662f\u51cf\u5c11\u5f00\u53d1\u6210\u672c\u65f6\u6700\u5e38\u7528\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002\u5176\u610f\u56fe\u975e\u5e38\u660e\u663e\uff1a\u4e0e\u5176\u53cd\u590d\u4ece\u5934\u5f00\u53d1\uff0c\u4e0d\u5982\u5728\u65b0\u5bf9\u8c61\u4e2d\u91cd\u7528\u5df2\u6709\u4ee3\u7801\u3002 \u8fd9\u4e2a\u60f3\u6cd5\u8868\u9762\u770b\u8d77\u6765\u5f88\u68d2\uff0c\u4f46\u5b9e\u9645\u4e0a\u8981\u8ba9\u5df2\u6709\u4ee3\u7801\u5728\u5168\u65b0\u7684\u4e0a\u4e0b\u6587\u4e2d\u5de5\u4f5c \uff0c\u901a\u5e38\u8fd8\u662f\u9700\u8981\u4ed8\u51fa\u989d\u5916\u52aa\u529b\u3002\u7ec4\u4ef6\u95f4\u7d27\u5bc6\u7684\u8026\u5408\u3001\u5bf9\u5177\u4f53\u7c7b\u800c\u975e\u63a5\u53e3\u7684\u4f9d\u8d56\u548c\u786c\u7f16\u7801\u7684\u884c\u4e3a\u90fd\u4f1a\u964d\u4f4e\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u3002 2.\u6269\u5c55\u6027 \u6709\u5f88\u591a\u539f\u56e0\u4f1a\u5bfc\u81f4\u8f6f\u4ef6\u7684\u4fee\u6539\uff1a \u5bf9\u95ee\u9898\u6709\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u9700\u8981\u91cd\u6784\u4ee3\u7801 \u51fa\u73b0\u4e86\u610f\u6599\u4e4b\u5916\u7684\u53d8\u5316 \u9700\u6c42\u7684\u53d8\u5316","title":"\u8f6f\u4ef6\u8bbe\u8ba1\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_3","text":"\u5c06\u7ecf\u5e38\u53d8\u5316\u7684\u529f\u80fd\u5c01\u88c5\u8fdb\u65b0\u7684\u51fd\u6570\u6216\u8005\u7c7b\uff0c\u8ba9\u5b83\u4eec\u4e13\u95e8\u8d1f\u8d23\u8fd9\u4e9b\u9700\u8981\u7ecf\u5e38\u53d8\u5316\u7684\u5b9e\u73b0\u3002","title":"\u5c01\u88c5\u53d8\u5316\u7684\u5185\u5bb9"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_4","text":"\u5de6\u8fb9\u7684\u4ee3\u7801\uff0c Cat.eat() \u65b9\u6cd5\u76f4\u63a5\u4f9d\u8d56\u4e8e Sausage \u7684\u5b9e\u73b0\u3002\u53f3\u8fb9\u7684\u4ee3\u7801\uff0c Cat.eat() \u65b9\u6cd5\u4f9d\u8d56\u4e8e Food \u63a5\u53e3\uff0c\u7531 Sausage \u7c7b\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u529f\u80fd\u3002","title":"\u9762\u5411\u63a5\u53e3\u8fdb\u884c\u5f00\u53d1\uff0c\u800c\u4e0d\u662f\u9762\u5411\u5b9e\u73b0"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_5","text":"\u7ee7\u627f\u53ef\u80fd\u662f\u7c7b\u4e4b\u95f4\u6700\u660e\u663e\u3001\u6700\u7b80\u4fbf\u7684\u4ee3\u7801\u590d\u7528\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u4ee3\u7801\u76f8\u540c\u7684\u7c7b\uff0c\u5c31\u53ef\u4ee5\u4e3a\u5b83\u4eec\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u57fa\u7c7b\uff0c\u7136\u540e\u5c06\u76f8\u4f3c\u7684\u4ee3\u7801\u79fb\u52a8\u5230\u5176\u4e2d\u3002\u4e0d\u8fc7\uff0c\u7ee7\u627f\u8fd9\u4ef6\u4e8b\u901a\u5e38\u53ea\u6709\u5728\u7a0b\u5e8f\u4e2d\u5df2\u5305\u542b\u5927\u91cf\u7c7b\uff0c \u4e14\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\u90fd\u975e\u5e38\u56f0\u96be\u65f6\u624d\u4f1a\u5f15\u8d77\u5173\u6ce8\u3002 \u4e0b\u9762\u5c31\u662f\u6b64\u7c7b\u95ee\u9898\u7684\u6e05\u5355\u3002 \u5b50\u7c7b\u4e0d\u80fd\u51cf\u5c11\u8d85\u7c7b\u7684\u63a5\u53e3\u3002 \u4f60\u5fc5\u987b\u5b9e\u73b0\u7236\u7c7b\u4e2d\u6240\u6709\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c \u5373\u4f7f\u5b83\u4eec\u6ca1\u4ec0\u4e48\u7528\u3002 \u5728\u91cd\u5199\u65b9\u6cd5\u65f6\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u65b0\u884c\u4e3a\u4e0e\u5176\u57fa\u7c7b\u4e2d\u7684\u7248\u672c\u517c\u5bb9\u3002 \u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b50\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u90fd\u53ef\u80fd\u88ab\u4f20\u9012\u7ed9\u4ee5\u8d85\u7c7b\u5bf9\u8c61\u4e3a\u53c2\u6570\u7684\u4efb\u4f55\u4ee3\u7801\uff0c\u76f8\u4fe1\u4f60\u4e0d\u4f1a\u5e0c\u671b\u8fd9\u4e9b\u4ee3\u7801\u5d29\u6e83\u7684\u3002 \u7ee7\u627f\u6253\u7834\u4e86\u8d85\u7c7b\u7684\u5c01\u88c5\uff0c\u56e0\u4e3a\u5b50\u7c7b\u62e5\u6709\u8bbf\u95ee\u7236\u7c7b\u5185\u90e8\u8be6\u7ec6\u5185\u5bb9\u7684\u6743\u9650\u3002 \u6b64\u5916\u8fd8\u53ef\u80fd\u4f1a\u6709\u76f8\u53cd\u7684\u60c5\u51b5\u51fa\u73b0\uff0c\u90a3\u5c31\u662f\u7a0b\u5e8f\u5458\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6269\u5c55\u7684\u65b9\u4fbf\u800c\u8ba9\u8d85\u7c7b\u77e5\u6653\u5b50\u7c7b\u7684\u5185\u90e8\u8be6\u7ec6\u5185\u5bb9\u3002 \u5b50\u7c7b\u4e0e\u8d85\u7c7b\u7d27\u5bc6\u8026\u5408\u3002 \u8d85\u7c7b\u4e2d\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u53ef\u80fd\u4f1a\u7834\u574f\u5b50\u7c7b\u7684\u529f\u80fd\u3002 \u901a\u8fc7\u7ee7\u627f\u590d\u7528\u4ee3\u7801\u53ef\u80fd\u5bfc\u81f4 \u5e73\u884c\u7ee7\u627f\u4f53\u7cfb \u7684\u4ea7\u751f\u3002 \u7ee7\u627f\u901a\u5e38\u4ec5\u53d1\u751f\u5728\u4e00\u4e2a\u7ef4\u5ea6\u4e2d\u3002\u53ea\u8981\u51fa\u73b0\u4e86\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7ef4\u5ea6\uff0c\u4f60\u5c31\u5fc5\u987b\u521b\u5efa\u6570\u91cf\u5de8\u5927\u7684\u7c7b\u7ec4\u5408\uff0c\u4ece\u800c\u4f7f\u7c7b\u5c42\u6b21\u7ed3\u6784\u81a8\u80c0\u5230\u4e0d\u53ef\u601d\u8bae\u7684\u7a0b\u5ea6\u3002 \u7ec4\u5408\u662f\u4ee3\u66ff\u7ee7\u627f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u7ee7\u627f\u4ee3\u8868\u7c7b\u4e4b\u95f4\u7684 \u201c\u662f\u201d \u5173\u7cfb \uff08\u6c7d\u8f66 \u662f \u4ea4\u901a\u5de5\u5177\uff09\uff0c \u800c\u7ec4\u5408\u5219\u4ee3\u8868 \u201c\u6709\u201d \u5173\u7cfb\uff08\u6c7d\u8f66 \u6709 \u4e00\u4e2a\u5f15\u64ce\uff09\u3002 \u5fc5\u987b\u4e00\u63d0\u7684\u662f\uff0c \u8fd9\u4e2a\u539f\u5219\u4e5f\u80fd\u5e94\u7528\u4e8e\u805a\u5408 \uff08\u4e00\u79cd\u66f4\u677e\u5f1b\u7684\u7ec4\u5408\u53d8\u4f53\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u5f15\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f46\u5e76\u4e0d\u7ba1\u7406\u5176\u751f\u547d\u5468\u671f\uff09\u3002\u4f8b\u5982\uff1a\u4e00\u8f86\u6c7d\u8f66\u4e0a\u6709\u53f8\u673a\uff0c\u4f46\u662f\u53f8\u673a\u4e5f\u53ef\u80fd\u4f1a\u4f7f\u7528\u53e6\u4e00\u8f86\u6c7d\u8f66\uff0c\u6216\u8005\u9009\u62e9\u6b65\u884c\u800c\u4e0d\u4f7f\u7528\u6c7d\u8f66\u3002 \u4e0b\u9762\u7684\u793a\u5c55\u793a\u4e86\u4f8b\u7ee7\u627f\u4e2d\u7684\u5e73\u884c\u7ee7\u627f\u4f53\u7cfb\u95ee\u9898\uff08\u5b50\u7c7b\u7206\u70b8\u95ee\u9898\uff09\uff1a \u5047\u5982\u4f60\u9700\u8981\u4e3a\u6c7d\u8f66\u5236\u9020\u5546\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u7a0b\u5e8f\u3002\u8be5\u516c\u53f8\u540c\u65f6\u751f\u4ea7\u6c7d\u8f66 Car \u548c\u5361\u8f66 Truck \uff0c\u8f66\u8f86\u53ef\u80fd\u662f\u7535\u52a8\u8f66 Electric \u6216\u6c7d\u6cb9\u8f66 Combustion \uff1b\u6240\u6709\u8f66\u578b\u90fd\u914d\u5907\u4e86\u624b\u52a8\u63a7\u5236 manual control \u6216\u81ea\u52a8\u9a7e\u9a76 Autopilot \u529f\u80fd\u3002 \u5728\u591a\u4e2a\u7ef4\u5ea6\u4e0a\u6269\u5c55\u4e00\u4e2a\u7c7b\uff08\u6c7d\u8f66\u7c7b\u578b \u00d7 \u5f15\u64ce\u7c7b\u578b \u00d7 \u9a7e\u9a76\u7c7b\u578b\uff09\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b50\u7c7b\u7ec4\u5408\u7684\u6570\u91cf\u7206\u70b8\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ec4\u5408\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a \u6c7d\u8f66\u5bf9\u8c61\u53ef\u5c06\u884c\u4e3a\u59d4\u6d3e\u7ed9\u5176\u4ed6\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u81ea\u884c\u5b9e\u73b0\u3002\u8fd8\u6709\u4e00\u4e2a\u597d\u5904\u662f\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5bf9\u884c\u4e3a\u8fdb\u884c\u66ff\u6362\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u4e3a\u6c7d\u8f66\u5bf9\u8c61\u5206\u914d\u4e00\u4e2a\u4e0d\u540c\u7684\u5f15\u64ce\u5bf9\u8c61\u6765\u66ff\u6362\u5df2\u8fde\u63a5\u81f3\u6c7d\u8f66\u7684\u5f15\u64ce\u3002","title":"\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_6","text":"Single Respon\u00adsi\u00adbil\u00adi\u00adty Prin\u00adci\u00adple \u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u539f\u56e0\u53ea\u80fd\u6709\u4e00\u4e2a\u3002\u5c3d\u91cf\u8ba9\u6bcf\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u8f6f\u4ef6\u4e2d\u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5e76\u5c06\u8be5\u529f\u80fd\u5b8c\u5168\u5c01\u88c5\u5728\u8be5\u7c7b\u4e2d\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u8d1f\u8d23\u8fc7\u591a\u7684\u529f\u80fd\uff0c\u5f53\u7a0b\u5e8f\u89c4\u6a21\u4e0d\u65ad\u6269\u5927\u3001\u53d8\u66f4\u4e0d\u65ad\u589e\u52a0\u540e\uff0c\u7c7b\u4f1a\u53d8\u5f97\u8fc7\u4e8e\u5e9e\u5927\uff0c\u4ee5\u81f3\u4e8e\u4f60\u65e0\u6cd5\u8bb0\u4f4f\u5176\u7ec6\u8282\u3002\u67e5\u627e\u4ee3\u7801\u5c06\u53d8\u5f97\u975e\u5e38\u7f13\u6162\uff0c\u4f60\u5fc5\u987b\u6d4f\u89c8\u6574\u4e2a\u7c7b\u3001\u751a\u81f3\u6574\u4e2a\u7a0b\u5e8f\u624d\u80fd\u627e\u5230\u9700\u8981\u7684\u4e1c\u897f\u3002 \u8fd8\u6709\u4e00\u70b9\uff1a\u5982\u679c\u7c7b\u8d1f\u8d23\u7684\u4e1c\u897f\u592a\u591a\uff0c\u90a3\u4e48\u5f53\u5176\u4e2d\u4efb\u4f55\u4e00\u4ef6\u4e8b\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u4f60\u90fd\u5fc5\u987b\u5bf9\u7c7b\u8fdb\u884c\u4fee\u6539\u3002\u800c\u5728\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u6539\u52a8\u7c7b\u4e2d\u81ea\u5df1\u5e76\u4e0d\u5e0c\u671b\u6539\u52a8\u7684\u90e8\u5206\u3002","title":"\u5355\u4e00\u804c\u8d23\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_7","text":"open/closed Prin\u00adci\u00adple \u5bf9\u4e8e\u6269\u5c55\uff0c\u7c7b\u5e94\u8be5\u662f\u201c\u5f00\u653e\u201d\u7684\uff1b\u5bf9\u4e8e\u4fee\u6539\uff0c\u7c7b\u5219\u5e94\u662f\u201c\u5c01\u95ed\u201d\u7684\u3002 \u8fd9\u4e2a\u539f\u5219\u770b\u4e0a\u53bb\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u201d\u5f00\u653e\u201c\u548c\u201d\u5c01\u95ed\u201c\u4e24\u4e2a\u8bcd\u662f\u4e92\u65a5\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u201c\u5f00\u653e\u201d\u548c\u201c\u5c01\u95ed\u201c\u662f\u9488\u5bf9\u4e0d\u540c\u7684\u4e1c\u897f\u800c\u8a00\uff1a \u5f00\u653e \uff1a\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5bf9\u4e00\u4e2a\u7c7b\u8fdb\u884c\u6269\u5c55\uff0c\u5e76\u4e14\u8be5\u7c7b\u7684\u5b50\u7c7b\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff08\u5982\u65b0\u589e\u65b9\u6cd5\u6216\u6210\u5458\u53d8\u91cf\u3001\u91cd\u5199\u57fa\u7c7b\u884c\u4e3a\u7b49\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u662f\u5f00\u653e\u7684\u3002\u6709\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u4f60\u901a\u8fc7\u7279\u6b8a\u5173\u952e\u5b57\uff08\u4f8b\u5982 final \uff09\u6765\u9650\u5236\u5bf9\u4e8e\u7c7b\u7684\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u8fd9\u6837\u7c7b\u5c31\u4e0d\u518d\u662f \u201c\u5f00\u653e\u201d \u7684\u4e86\u3002 \u5c01\u95ed \uff1a\u5982\u679c\u67d0\u4e2a\u7c7b\u5df2\u505a\u597d\u4e86\u5145\u5206\u7684\u51c6\u5907\u5e76\u53ef\u4f9b\u5176\u4ed6\u7c7b\u4f7f\u7528\u7684\u8bdd\uff08\u5373\u5176\u63a5\u53e3\u5df2\u660e\u786e\u5b9a\u4e49\u4e14\u4ee5\u540e\u4e0d\u4f1a\u4fee\u6539\uff09\uff0c\u90a3\u4e48\u8be5\u7c7b\u5c31\u662f\u5c01\u95ed\uff08\u4f60\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u5b8c\u6574\uff09\u7684\u3002 \u672c\u539f\u5219\u7684\u4e3b\u8981\u7406\u5ff5\u662f\u65b0\u529f\u80fd\u901a\u8fc7\u589e\u52a0\u65b0\u4ee3\u7801\u5b9e\u73b0\uff0c\u800c\u4e0d\u4fee\u6539\u5df2\u6709\u4ee3\u7801\u3002 \u66f4\u5177\u4f53\u6765\u8bf4\uff0c\u65b0\u529f\u80fd\u901a\u8fc7\u5b50\u7c7b\u5b9e\u73b0\uff0c\u800c\u4e0d\u4fee\u6539\u5df2\u6709\u7684\u57fa\u7c7b\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5df2\u7ecf\u5b8c\u6210\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u5ba1\u6838\u5de5\u4f5c\uff0c\u800c\u4e14\u5c5e\u4e8e\u67d0\u4e2a\u6846\u67b6\u6216\u8005\u53ef\u88ab\u5176\u4ed6\u7c7b\u7684\u4ee3\u7801\u76f4\u63a5\u4f7f\u7528\u7684\u8bdd\uff0c\u5bf9\u5176\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\u5c31\u662f\u6709\u98ce\u9669\u7684\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5b50\u7c7b\u5e76\u91cd\u5199\u539f\u59cb\u7c7b\u7684\u90e8\u5206\u5185\u5bb9\u4ee5\u5b8c\u6210\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5bf9\u539f\u59cb\u7c7b\u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\u3002\u8fd9\u6837\u4f60\u65e2\u53ef\u4ee5\u8fbe\u6210\u81ea\u5df1\u7684\u76ee\u6807\uff0c\u4f46\u540c\u65f6\u53c8\u65e0\u9700\u4fee\u6539\u5df2\u6709\u7684\u539f\u59cb\u7c7b\u5ba2\u6237\u7aef\u3002 \u8fd9\u6761\u539f\u5219\u5e76\u4e0d\u80fd\u5e94\u7528\u4e8e\u6240\u6709\u5bf9\u7c7b\u8fdb\u884c\u7684\u4fee\u6539\u4e2d\u3002\u5982\u679c\u4f60\u53d1\u73b0\u7c7b\u4e2d\u5b58\u5728\u7f3a\u9677\uff0c\u76f4\u63a5\u5bf9\u5176\u8fdb\u884c\u4fee\u590d\u5373\u53ef\uff0c\u4e0d\u8981\u4e3a\u5b83\u521b\u5efa\u5b50\u7c7b\u3002\u5b50\u7c7b\u4e0d\u5e94\u8be5\u5bf9\u5176\u7236\u7c7b\u7684\u95ee\u9898\u8d1f\u8d23\u3002","title":"\u5f00\u95ed\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_8","text":"\u4f60\u7684\u7535\u5b50\u5546\u52a1\u7a0b\u5e8f\u4e2d\u5305\u542b\u4e00\u4e2a\u8ba1\u7b97\u8fd0\u8f93\u8d39\u7528\u7684\u8ba2\u5355Order\u7c7b\uff0c\u8be5\u7c7b\u4e2d\u6240\u6709\u8fd0\u8f93\u65b9\u6cd5\u90fd\u4ee5\u786c\u7f16\u7801\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002 \u5982\u679c\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8fd0\u8f93\u65b9\u5f0f\uff0c \u90a3\u5c31\u5fc5\u987b\u627f\u62c5\u5bf9\u8ba2\u5355\u7c7b\u9020\u6210\u7834\u574f\u7684\u53ef\u80fd\u98ce\u9669\u6765\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528\u7b56\u7565\u6a21\u5f0f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u9996\u5148\u5c06\u8fd0\u8f93\u65b9\u6cd5\u62bd\u53d6\u5230\u62e5\u6709\u540c\u6837\u63a5\u53e3\u7684\u4e0d\u540c\u7c7b\u4e2d\u3002 \u5728Python\u4e2d\uff0c <<interface>> \u4e00\u822c\u901a\u8fc7\u62bd\u8c61\u7c7b\u5b9e\u73b0\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u62bd\u8c61\u7c7b\uff0c\u5e76\u5b9e\u73b0\u63a5\u53e3\u7684\u5177\u4f53\u529f\u80fd\u3002\u6b64\u65f6\uff0c\u901a\u8fc7\u7ee7\u627f\u62bd\u8c61\u7c7b\uff0c\u5e76\u5b9e\u73b0\u63a5\u53e3\uff0c\u8fd9\u79f0\u4e3a\u201c\u5f00\u653e\u201d\uff1b\u4f9d\u8d56\u4e8e\u62bd\u8c61\u7c7b\u63a5\u53e3\u7684\u7c7b\u4e0d\u9700\u8981\u4f5c\u4fee\u6539\uff0c\u8fd9\u79f0\u4e3a\u201c\u5c01\u95ed\u201d\u3002 \u73b0\u5728\uff0c\u5f53\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u8fd0\u8f93\u65b9\u5f0f\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u8fd0\u8f93\u65b9\u5f0fShipping\u63a5\u53e3\u6765\u65b0\u5efa\u4e00\u4e2a\u7c7b\uff0c\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u8ba2\u5355\u7c7b\u7684\u4ee3\u7801\u3002\u5f53\u7528\u6237\u5728 UI \u4e2d\u9009\u62e9\u8fd9\u79cd\u8fd0\u8f93\u65b9\u5f0f\u65f6\uff0c\u8ba2\u5355\u7c7b\u5ba2\u6237\u7aef\u4ee3\u7801\u4f1a\u5c06\u8ba2\u5355\u94fe\u63a5\u5230\u65b0\u7c7b\u7684\u8fd0\u8f93\u65b9\u5f0f\u5bf9\u8c61\u3002 \u6b64\u5916\uff0c\u6839\u636e\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u80fd\u591f\u8ba9\u4f60\u5c06\u8fd0\u8f93\u65f6\u95f4\u7684\u8ba1\u7b97\u4ee3\u7801\u79fb\u52a8\u5230\u4e0e\u5176\u76f8\u5173\u5ea6\u66f4\u9ad8\u7684\u7c7b\u4e2d\u3002","title":"\u793a\u4f8b"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_9","text":"Liskov Substitution Principle \u5f53\u6269\u5c55\u4e00\u4e2a\u7c7b\u65f6\uff0c \u5e94\u8be5\u80fd\u5728\u4e0d\u4fee\u6539\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u5c06\u5b50\u7c7b\u7684\u5bf9\u8c61\u66ff\u4ee3\u7236\u7c7b\u5bf9\u8c61\u8fdb\u884c\u4f20\u9012\u3002\u8fd9\u610f\u5473\u7740\u5b50\u7c7b\u5fc5\u987b\u4fdd\u6301\u4e0e\u7236\u7c7b\u884c\u4e3a\u7684\u517c\u5bb9\u3002 \u5728\u91cd\u5199\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c \u4f60\u8981\u5bf9\u57fa\u7c7b\u884c\u4e3a\u8fdb\u884c\u6269\u5c55\uff0c \u800c\u4e0d\u662f\u5c06\u5176\u5b8c\u5168\u66ff\u6362\u3002 \u66ff\u4ee3\u539f\u5219\u5305\u542b\u4e00\u7ec4\u5bf9\u5b50\u7c7b \uff08\u7279\u522b\u662f\u5176\u65b9\u6cd5\uff09 \u7684\u5f62\u5f0f\u8981\u6c42\uff1a \u5b50\u7c7b\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u4e0e\u5176\u8d85\u7c7b\u7684\u53c2\u6570\u7c7b\u578b\u76f8\u5339\u914d\u6216\u66f4\u52a0\u62bd\u8c61 1 \u3002 \u5047\u8bbe A \u7c7b\u6709\u4e2a\u65b9\u6cd5\u7528\u4e8e\u7ed9\u732b\u54aa\u5582\u98df\uff1a feed(Cat c) \u3002 \u5ba2\u6237\u7aef\u4ee3\u7801\u603b\u662f\u4f1a\u5c06 cat \u5bf9\u8c61\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u3002 \u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b B \u7ee7\u627f\u7c7b A \uff0c\u5e76\u5c06 feed \u65b9\u6cd5\u91cd\u5199\u4e3a feed(Animal c) \uff0c\u4f7f\u5176\u80fd\u591f\u7ed9\u4efb\u4f55 \u52a8\u7269-animal\uff08\u5373 \u2018\u732b\u2019 \u7684\u8d85\u7c7b\uff09\u5582\u98df\u3002\u5982\u679c\u73b0\u5728\u4f60\u5c06\u7c7b A \u7684\u5bf9\u8c61\u66ff\u6362\u4e3a\u5b50\u7c7b B \u7684\u5bf9\u8c61\uff0c\u7a0b\u5e8f\u4ecd\u5c06\u6b63\u5e38\u5de5\u4f5c\u3002 \u4e0d\u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b B \u7ee7\u627f\u7c7b A \uff0c\u5e76\u5c06 feed \u65b9\u6cd5\u91cd\u5199\u4e3a feed(BengalCat c) \uff0c\u5176\u53ea\u80fd\u591f\u7ed9 \u5b5f\u52a0\u62c9\u732b-BengalCat\uff08\u201c\u732b\u201d\u7684\u5b50\u7c7b\uff09\u5582\u98df\u3002\u5982\u679c\u73b0\u5728\u4f60\u5c06\u7c7b A \u7684\u5bf9\u8c61\u66ff\u6362\u4e3a\u5b50\u7c7b B \u7684\u5bf9\u8c61\uff0c\u7531\u4e8e\u8be5\u65b9\u6cd5\u53ea\u80fd\u5bf9\u7279\u6b8a\u79cd\u7c7b\u7684\u732b\u8fdb\u884c\u5582\u98df\uff0c\u56e0\u6b64\u65e0\u6cd5\u4e3a\u4f20\u9012\u7ed9\u5ba2\u6237\u7aef\u7684\u666e\u901a\u732b\u63d0\u4f9b\u670d\u52a1\uff0c\u4ece\u800c\u5c06\u7834\u574f\u6240\u6709\u76f8\u5173\u7684\u529f\u80fd\u3002 \u5b50\u7c7b\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u4e0e\u8d85\u7c7b\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u6216\u662f\u5176\u5b50\u7c7b\u522b\u76f8\u5339\u914d\u3002 \u5047\u5982\u4f60\u7684\u4e00\u4e2a\u7c7b\u4e2d\u6709\u4e00\u4e2a\u65b9\u6cd5 buyCat(): Cat \u3002\u5ba2\u6237\u7aef\u4ee3\u7801\u6267\u884c\u8be5\u65b9\u6cd5\u540e\u7684\u9884\u671f\u8fd4\u56de\u7ed3\u679c\u662f\u4efb\u610f\u7c7b\u578b\u7684 \u201c\u732b\u201d\u3002 \u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b\u5c06\u8be5\u65b9\u6cd5\u91cd\u5199\u4e3a\uff1a buyCat(): BengalCat \u3002\u5ba2\u6237\u7aef\u5c06\u83b7\u5f97\u4e00\u53ea \u201c\u5b5f\u52a0\u62c9\u732b\u201d\uff0c\u81ea\u7136\u5b83\u4e5f\u662f\u4e00\u53ea \u201c\u732b\u201d\uff0c\u56e0\u6b64\u4e00\u5207\u6b63\u5e38\u3002 \u4e0d\u597d\u7684\u65b9\u5f0f\uff1a\u5b50\u7c7b\u5c06\u8be5\u65b9\u6cd5\u91cd\u5199\u4e3a\uff1a buyCat(): Animal \u3002\u73b0\u5728\u5ba2\u6237\u7aef\u4ee3\u7801\u5c06\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u5b83\u83b7\u5f97\u7684\u662f\u81ea\u5df1\u672a\u77e5\u7684\u52a8\u7269\u79cd\u7c7b\uff0c\u5982\u679c\u8fd4\u56de\u4e00\u53ea\u77ed\u543b\u9cc4\uff0c\u5219\u4e0d\u9002\u7528\u4e8e\u4e3a\u4e00\u53ea \u201c\u732b\u201d \u800c\u8bbe\u8ba1\u7684\u7ed3\u6784\u3002 \u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4e0d\u5e94\u629b\u51fa\u57fa\u7840\u65b9\u6cd5\u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\u7c7b\u578b\u3002 \u5ba2\u6237\u7aef\u4ee3\u7801\u6355\u6349\u5f02\u5e38\u7684\u4ee3\u7801\u5757\u662f\u9488\u5bf9\u7684\u662f\u57fa\u7840\u65b9\u6cd5\u53ef\u80fd\u629b\u51fa\u7684\u5f02\u5e38\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c \u9884\u671f\u4e4b\u5916\u7684\u5f02\u5e38\u53ef\u80fd\u4f1a\u7a7f\u900f\u5ba2\u6237\u7aef\u7684\u9632\u5fa1\u4ee3\u7801\uff0c \u4ece\u800c\u4f7f\u6574\u4e2a\u5e94\u7528\u5d29\u6e83\u3002 \u5b50\u7c7b\u4e0d\u5e94\u8be5\u52a0\u5f3a\u5176\u524d\u7f6e\u6761\u4ef6\u3002 \u4f8b\u5982\uff0c\u57fa\u7c7b\u7684\u65b9\u6cd5\u6709\u4e00\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c\u5b50\u7c7b\u91cd\u5199\u8be5\u65b9\u6cd5\u65f6\uff0c\u8981\u6c42\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u503c\u5fc5\u987b\u4e3a\u6b63\u6570\uff08\u5982\u679c\u8be5\u503c\u4e3a\u8d1f\u5219\u629b\u51fa\u5f02\u5e38\uff09\uff0c\u8fd9\u5c31\u662f\u52a0\u5f3a\u4e86\u524d\u7f6e\u6761\u4ef6\u3002\u5ba2\u6237\u7aef\u4ee3\u7801\u4e4b\u524d\u5c06\u8d1f\u6570\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u65f6\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u73b0\u5728\u4f7f\u7528\u5b50\u7c7b\u7684\u5bf9\u8c61\u65f6\u4f1a\u4f7f\u7a0b\u5e8f\u51fa\u9519\u3002 \u5b50\u7c7b\u4e0d\u80fd\u524a\u5f31\u5176\u540e\u7f6e\u6761\u4ef6\u3002 \u5047\u5982\u4f60\u7684\u67d0\u4e2a\u7c7b\u4e2d\u6709\u4e2a\u65b9\u6cd5\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\uff0c \u8be5\u65b9\u6cd5\u5e94\u8be5\u5728\u63a5\u6536\u5230\u8fd4\u56de\u503c\u540e\u5173\u95ed\u6240\u6709\u6d3b\u8dc3\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u5b50\u7c7b\u5e76\u5bf9\u5176\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4f7f\u5f97\u6570\u636e\u5e93\u4fdd\u6301\u8fde\u63a5\u4ee5\u4fbf\u91cd\u7528\u3002\u4f46\u5ba2\u6237\u7aef\u53ef\u80fd\u5bf9\u4f60\u7684\u610f\u56fe\u4e00\u65e0\u6240\u77e5\u3002\u7531\u4e8e\u5b83\u8ba4\u4e3a\u8be5\u65b9\u6cd5\u4f1a\u5173\u95ed\u6240\u6709\u7684\u8fde\u63a5\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u540e\u5c31\u9a6c\u4e0a\u5173\u95ed\u7a0b\u5e8f\uff0c\u4f7f\u5f97\u65e0\u7528\u7684\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u7cfb\u7edf\u9020\u6210 \u201c\u6c61\u67d3\u201d\u3002 \u8d85\u7c7b\u7684\u4e0d\u53d8\u91cf\u5fc5\u987b\u4fdd\u7559\u3002 \u8fd9\u5f88\u53ef\u80fd\u662f\u6240\u6709\u89c4\u5219\u4e2d\u6700\u4e0d \u201c\u5f62\u5f0f\u201d \u7684\u4e00\u6761\u3002\u4e0d\u53d8\u91cf\u662f\u8ba9\u5bf9\u8c61\u6709\u610f\u4e49\u7684\u6761\u4ef6\u3002 \u4e0d\u53d8\u91cf\u7684\u89c4\u5219\u662f\u6700\u5bb9\u6613\u8fdd\u53cd\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u80fd\u4f1a\u8bef\u89e3\u6216\u6ca1\u6709\u610f\u8bc6\u5230\u4e00\u4e2a\u590d\u6742\u7c7b\u4e2d\u7684\u6240\u6709\u4e0d\u53d8\u91cf\u3002\u56e0\u6b64\uff0c\u6269\u5c55\u4e00\u4e2a\u7c7b\u7684\u6700\u5b89\u5168\u505a\u6cd5\u662f\u5f15\u5165\u65b0\u7684\u6210\u5458\u53d8\u91cf\u548c\u65b9\u6cd5\uff0c\u800c\u4e0d\u8981\u53bb\u62db\u60f9\u8d85\u7c7b\u4e2d\u5df2\u6709\u7684\u6210\u5458\u3002\u5f53\u7136\u5728\u5b9e\u9645\u4e2d\uff0c\u8fd9\u5e76\u975e\u603b\u662f\u53ef\u884c\u3002 \u5b50\u7c7b\u4e0d\u80fd\u4fee\u6539\u8d85\u7c7b\u4e2d\u79c1\u6709\u6210\u5458\u53d8\u91cf\u7684\u503c\u3002 \u6709\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u901a\u8fc7\u53cd\u5c04\u673a\u5236\u6765\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u6210\u5458\u3002\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00 \uff08Python \u548c JavaScript\uff09\u6ca1\u6709\u5bf9\u79c1\u6709\u6210\u5458\u8fdb\u884c\u4efb\u4f55\u4fdd\u62a4\u3002","title":"\u91cc\u6c0f\u66ff\u6362\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_10","text":"Interface Segregation Principle \u5ba2\u6237\u7aef\u4e0d\u5e94\u88ab\u5f3a\u8feb\u4f9d\u8d56\u4e8e\u5176\u4e0d\u4f7f\u7528\u7684\u65b9\u6cd5\u3002 \u5047\u5982\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u7a0b\u5e8f\u5e93\uff0c\u5b83\u80fd\u8ba9\u7a0b\u5e8f\u65b9\u4fbf\u5730\u4e0e\u591a\u79cd\u4e91\u8ba1\u7b97\u4f9b\u5e94\u5546\u8fdb\u884c\u6574\u5408\u3002\u5c3d\u7ba1\u6700\u521d\u7248\u672c\u4ec5\u652f\u6301\u963f\u91cc\u4e91\u670d\u52a1\uff0c\u4f46\u5b83\u4e5f\u8986\u76d6\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u4e91\u670d\u52a1\u548c\u529f\u80fd\u3002 \u5047\u8bbe\u6240\u6709\u4e91\u670d\u52a1\u4f9b\u5e94\u5546\u90fd\u4e0e\u963f\u91cc\u4e91\u4e00\u6837\u63d0\u4f9b\u76f8\u540c\u79cd\u7c7b\u7684\u529f\u80fd\u3002\u4f46\u5f53\u4f60\u7740\u624b\u4e3a\u5176\u4ed6\u4f9b\u5e94\u5546\u63d0\u4f9b\u652f\u6301\u65f6\uff0c\u7a0b\u5e8f\u5e93\u4e2d\u7edd\u5927\u90e8\u5206\u7684\u63a5\u53e3\u4f1a\u663e\u5f97\u8fc7\u4e8e\u5bbd\u6cdb\u3002 \u5176\u4ed6\u4e91\u670d\u52a1\u4f9b\u5e94\u5546\u6ca1\u6709\u63d0\u4f9b\u90e8\u5206\u65b9\u6cd5\u6240\u63cf\u8ff0\u7684\u529f\u80fd\u3002 \u5c3d\u7ba1\u4f60\u4ecd\u7136\u53ef\u4ee5\u53bb\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u5e76\u653e\u5165\u4e00\u4e9b\u810f\u4ee3\u7801\uff0c\u4f46\u8fd9\u7edd\u4e0d\u662f\u4f18\u826f\u7684\u89e3\u51b3\u65b9\u6848\u3002\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u5c06\u63a5\u53e3\u62c6\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\u3002\u80fd\u591f\u5b9e\u73b0\u539f\u59cb\u63a5\u53e3\u7684\u7c7b\u73b0\u5728\u53ea\u9700\u6539\u4e3a\u5b9e\u73b0\u591a\u4e2a\u7cbe\u7ec6\u7684\u63a5\u53e3\u5373\u53ef\u3002\u5176\u4ed6\u7c7b\u5219\u53ef\u4ec5\u5b9e\u73b0\u5bf9\u81ea\u5df1\u6709\u610f\u4e49\u7684\u63a5\u53e3\u3002 \u4e0e\u5176\u4ed6\u539f\u5219\u4e00\u6837\uff0c\u4f60\u53ef\u80fd\u4f1a\u8fc7\u5ea6\u4f7f\u7528\u8fd9\u6761\u539f\u5219\u3002\u4e0d\u8981\u8fdb\u4e00\u6b65\u5212\u5206\u5df2\u7ecf\u975e\u5e38\u5177\u4f53\u7684\u63a5\u53e3\u3002\u8bb0\u4f4f\uff0c\u521b\u5efa\u7684\u63a5\u53e3\u8d8a\u591a\uff0c\u4ee3\u7801\u5c31\u8d8a\u590d\u6742\u3002\u56e0\u6b64\u8981\u4fdd\u6301\u5e73\u8861\u3002","title":"\u63a5\u53e3\u9694\u79bb\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html#_11","text":"Dependency Inversion Principle \u9ad8\u5c42\u6b21\u7684\u7c7b\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6b21\u7684\u7c7b\u3002\u4e24\u8005\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u63a5\u53e3\u3002\u62bd\u8c61\u63a5\u53e3\u4e0d\u5e94\u4f9d\u8d56\u4e8e\u5177\u4f53\u5b9e\u73b0\u3002\u5177\u4f53\u5b9e\u73b0\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u63a5\u53e3\u3002 \u901a\u5e38\u5728\u8bbe\u8ba1\u8f6f\u4ef6\u65f6\uff0c\u4f60\u53ef\u4ee5\u8fa8\u522b\u51fa\u4e0d\u540c\u5c42\u6b21\u7684\u7c7b\uff1a \u4f4e\u5c42\u6b21\u7684\u7c7b \u5b9e\u73b0\u57fa\u7840\u64cd\u4f5c\uff08\u4f8b\u5982\u78c1\u76d8\u64cd\u4f5c\u3001\u4f20\u8f93\u7f51\u7edc\u6570\u636e\u548c\u8fde\u63a5\u6570\u636e\u5e93\u7b49\uff09\u3002 \u9ad8\u5c42\u6b21\u7c7b \u5305\u542b\u590d\u6742\u4e1a\u52a1\u903b\u8f91\u4ee5\u6307\u5bfc\u4f4e\u5c42\u6b21\u7c7b\u6267\u884c\u7279\u5b9a\u64cd\u4f5c\u3002 \u6709\u65f6\u4eba\u4eec\u4f1a\u5148\u8bbe\u8ba1\u4f4e\u5c42\u6b21\u7684\u7c7b\uff0c\u7136\u540e\u624d\u4f1a\u5f00\u53d1\u9ad8\u5c42\u6b21\u7684\u7c7b\u3002\u5f53\u4f60\u5728\u65b0\u7cfb\u7edf\u4e0a\u5f00\u53d1\u539f\u578b\u4ea7\u54c1\u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u5e38\u89c1\u3002\u7531\u4e8e\u4f4e\u5c42\u6b21\u7684\u4e1c\u897f\u8fd8\u6ca1\u6709\u5b9e\u73b0\u6216\u4e0d\u786e\u5b9a\uff0c\u4f60\u751a\u81f3\u65e0\u6cd5\u786e\u5b9a\u9ad8\u5c42\u6b21\u7c7b\u80fd\u5b9e\u73b0\u54ea\u4e9b\u529f\u80fd\u3002\u5982\u679c\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e1a\u52a1\u903b\u8f91\u7c7b\u53ef\u80fd\u4f1a\u66f4\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u539f\u8bed\u7c7b\u3002 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u5efa\u8bae\u6539\u53d8\u8fd9\u79cd\u4f9d\u8d56\u65b9\u5f0f\uff0c\u5c06\u9ad8\u5c42\u6b21\u7684\u7c7b\u7684\u4f9d\u8d56\u62bd\u8c61\u6210\u63a5\u53e3\uff0c\u8ba9\u4f4e\u5c42\u6b21\u7c7b\u5b9e\u73b0\u63a5\u53e3\uff0c\u800c\u9ad8\u5c42\u6b21\u7c7b\u53ea\u9700\u8981\u8c03\u7528\u63a5\u53e3\uff0c\u4e0d\u9700\u8981\u8c03\u7528\u4f4e\u5c42\u6b21\u7684\u7c7b\u3002\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u901a\u5e38\u548c \u5f00\u95ed\u539f\u5219 \u5171\u540c\u53d1\u6325\u4f5c\u7528\uff1a\u4f60\u65e0\u9700\u4fee\u6539\u5df2\u6709\u7c7b\u5c31\u80fd\u7528\u4e0d\u540c\u7684\u4e1a\u52a1\u903b\u8f91\u7c7b\u6269\u5c55\u4f4e\u5c42\u6b21\u7684\u7c7b \u66f4\u901a\u7528 \u21a9","title":"\u4f9d\u8d56\u5012\u7f6e\u539f\u5219"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","text":"\u5de5\u5382\u65b9\u6cd5 \u573a\u666f\uff1a \u521b\u5efa\u8005\u57fa\u7c7b\u8d1f\u8d23\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff0c\u4ee5\u53ca\u58f0\u660e\u521b\u5efa\u4ea7\u54c1\u7c7b\u7684\u63a5\u53e3\uff08\u5373\u5de5\u5382\u65b9\u6cd5 1 \uff09\u3002\u8ba9\u521b\u5efa\u8005\u5b50\u7c7b\u91cd\u5199\u5de5\u5382\u65b9\u6cd5\uff0c\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u4e2a\u4ea7\u54c1\u7c7b\u3002\u4e0d\u540c\u7684\u4ea7\u54c1\u7c7b\u5728\u4e1a\u52a1\u903b\u8f91\u4e2d\u88ab\u7edf\u4e00\u8c03\u7528\uff0c\u4e1a\u52a1\u903b\u8f91\u65e0\u9700\u5173\u5fc3\u88ab\u8c03\u7528\u7684\u4ea7\u54c1\u7c7b\u5177\u4f53\u662f\u54ea\u4e2a\u4ea7\u54c1\uff0c\u56e0\u6b64\u6240\u6709\u4ea7\u54c1\u7c7b\u5fc5\u987b\u63d0\u4f9b\u76f8\u540c\u7684\u63a5\u53e3\u3002 \u610f\u56fe\uff1a \u5c06\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u548c\u9700\u8981\u4e0d\u65ad\u6269\u5c55\u7684\u4ea7\u54c1\u7c7b\u4ee3\u7801\u9694\u79bb\u3002 \u4ea7\u54c1\uff08Product\uff09\uff1a\u5bf9\u5176\u5b50\u7c7b\u5e94\u6709\u7684\u63a5\u53e3\u8fdb\u884c\u58f0\u660e\uff0c\u8fd9\u4e9b\u63a5\u53e3\u5c06\u88ab\u521b\u5efa\u8005\u7684\u4e1a\u52a1\u903b\u8f91\uff08 someOperation \u65b9\u6cd5\uff09\u8c03\u7528\u3002 \u5177\u4f53\u4ea7\u54c1\uff08Concrete Products\uff09\uff1a\u662f\u4ea7\u54c1\u63a5\u53e3\u7684\u4e0d\u540c\u5b9e\u73b0\u3002\u8fd9\u662f\u5177\u4f53\u521b\u5efa\u8005\u7684\u5de5\u5382\u65b9\u6cd5\u5c06\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 \u521b\u5efa\u8005\u7c7b\uff08Creator\uff09\uff1a\u58f0\u660e\u8fd4\u56de\u4ea7\u54c1\u5bf9\u8c61\u7684\u5de5\u5382\u65b9\u6cd5\uff08 createProduct \uff09\u3002Cre\u00adator\u7c7b\u7684\u5de5\u5382\u65b9\u6cd5\u53ef\u4ee5\u58f0\u660e\u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5f3a\u5236\u5b50\u7c7b\u91cd\u5199\u8be5\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4ea7\u54c1\u5bf9\u8c61\u3002 \u5177\u4f53\u521b\u5efa\u8005\uff08Concrete Creator\uff09\uff1a\u91cd\u5199Creator\u7c7b\u7684\u5de5\u5382\u65b9\u6cd5\uff0c\u51b3\u5b9a\u8fd4\u56de\u5177\u4f53\u7684\u4ea7\u54c1\u5bf9\u8c61\u3002\u5305\u542b\u4e00\u4e9b\u4e0e\u4ea7\u54c1\u76f8\u5173\u7684\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\uff0c\u5728\u8fd9\u4e9b\u4e1a\u52a1\u4ee3\u7801\u4e2d\uff0c\u5de5\u5382\u65b9\u6cd5\u5c06\u88ab\u8c03\u7528\uff0c\u83b7\u53d6\u5177\u4f53\u4ea7\u54c1\u5bf9\u8c61\uff0c\u7136\u540e\u5177\u4f53\u4ea7\u54c1\u5bf9\u8c61\u7684\u76f8\u5173\u63a5\u53e3\u5c06\u88ab\u8c03\u7528\uff0c\u4ee5\u5b9e\u73b0\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u5ba2\u6237\u7aef\uff1a\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u8c03\u7528Concrete Creator\u7684\u63a5\u53e3\u3002 \u56e0\u6b64\uff0c\u867d\u7136\u521b\u5efa\u8005\u7684\u540d\u5b57\u662f\u521b\u5efa\u8005\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u521b\u5efa\u8005\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff0c\u800c\u4e0d\u662f\u51b3\u5b9a\u521b\u5efa\u54ea\u4e2a\u4ea7\u54c1\u7684\u5bf9\u8c61\u3002 \u5de5\u5382\u65b9\u6cd5\u5c06\u8fd9\u4e9b\u4e1a\u52a1\u903b\u8f91\u4ece\u5177\u4f53\u4ea7\u54c1\u7c7b\u4e2d\u5206\u79bb\u51fa\u6765\u3002 \u5e76\u4e0d\u4e00\u5b9a\u6bcf\u6b21\u8c03\u7528\u5de5\u5382\u65b9\u6cd5\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b \u3002\u5de5\u5382\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u8fd4\u56de\u7f13\u5b58\u3001\u5bf9\u8c61\u6c60\u6216\u5176\u4ed6\u6765\u6e90\u7684\u5df2\u6709\u5bf9\u8c61\u3002 \u53ef\u4ee5\u53ea\u4f7f\u7528\u5355\u4e00\u7684\u5de5\u5382\u65b9\u6cd5\uff08\u4e00\u4e2a\u5177\u4f53\u521b\u5efa\u8005\u5b50\u7c7b\uff09\uff0c\u4f46\u5982\u679c\u4ea7\u54c1\u7c7b\u592a\u591a\u7684\u8bdd\uff0c\u4f1a\u5bfc\u81f4\u5de5\u5382\u65b9\u6cd5\u51fa\u73b0\u592a\u591a\u7684\u5206\u652f\u8bed\u53e5\uff0c\u7528\u4e8e\u9009\u62e9\u5404\u79cd\u9700\u8981\u5b9e\u4f8b\u5316\u7684\u4ea7\u54c1\u7c7b\u3002 \u9002\u7528\u573a\u666f \u5f53\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u65e0\u6cd5\u9884\u77e5\u5bf9\u8c61\u786e\u5207\u7c7b\u522b\u53ca\u5176\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u53ef\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u3002 \u5de5\u5382\u65b9\u6cd5\u5c06\u521b\u5efa\u4ea7\u54c1\u7684\u4ee3\u7801\u4e0e\u5b9e\u9645\u4f7f\u7528\u4ea7\u54c1\u7684\u4ee3\u7801\u5206\u79bb\uff0c\u4ece\u800c\u80fd\u5728\u4e0d\u5f71\u54cd\u5176\u4ed6\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u6269\u5c55\u4ea7\u54c1\u521b\u5efa\u90e8\u5206\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5982\u679c\u9700\u8981\u5411\u5e94\u7528\u4e2d\u6dfb\u52a0\u4e00\u79cd\u65b0\u4ea7\u54c1\uff0c\u4f60\u53ea\u9700\u8981\u5f00\u53d1\u65b0\u7684\u521b\u5efa\u8005\u5b50\u7c7b\uff0c\u7136\u540e\u91cd\u5199\u5176\u5de5\u5382\u65b9\u6cd5\u5373\u53ef\u3002 \u62bd\u8c61\u5de5\u5382 \u62bd\u8c61\u5de5\u5382\u5b9e\u9645\u4e0a\u662f\u4e00\u7ec4\u5de5\u5382\u65b9\u6cd5\u3002 \u5982\u4e0b\u56fe\uff0c\u73b0\u5728\u6709\u4e09\u79cd\u5bb6\u5177\uff1a\u6905\u5b50\u3001\u6c99\u53d1\u3001\u5496\u5561\u684c\uff0c\u540c\u65f6\u5bb6\u5177\u53ef\u4ee5\u6709\u4e09\u79cd\u98ce\u683c\uff1a\u73b0\u4ee3\u3001\u7ef4\u591a\u5229\u4e9a\u3001\u88c5\u9970\u98ce\u827a\u672f\u3002 \u7cfb\u5217\u4ea7\u54c1\u53ca\u5176\u4e0d\u540c\u53d8\u4f53 \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4e09\u79cd\u5bb6\u5177\u521b\u5efa\u57fa\u7c7b\uff0c\u5176\u5b50\u7c7b\u5206\u522b\u662f\u4e09\u79cd\u98ce\u683c\u7684\u5bb6\u5177\u3002 \u540c\u4e00\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u4f53\u90fd\u5fc5\u987b\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e4b\u4e2d \u540c\u65f6\u5199\u4e09\u4e2a\u5177\u4f53\u521b\u5efa\u8005\u7c7b\uff0c\u5206\u522b\u5bf9\u5e94\u4e09\u79cd\u98ce\u683c\uff0c\u6bcf\u4e2a\u5177\u4f53\u521b\u5efa\u8005\u90fd\u6709\u4e09\u4e2a\u5de5\u5382\u65b9\u6cd5\uff0c\u5206\u522b\u7528\u4e8e\u521b\u5efa\u5177\u4f53\u98ce\u683c\u7684\u5bb6\u5177\u3002 \u6bcf\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5b9a\u7684\u98ce\u683c \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f1a\u5728\u521d\u59cb\u5316\u9636\u6bb5\u521b\u5efa\u5177\u4f53\u5de5\u5382\u5bf9\u8c61 \u3002\u800c\u5728\u6b64\u4e4b\u524d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u6216\u73af\u5883\u8bbe\u5b9a\u9009\u62e9\u5de5\u5382\u7c7b\u522b\u3002 \u62bd\u8c61\u4ea7\u54c1\uff08Abstract Prod\u00aduct \uff09\uff1a\u4e3a\u6784\u6210\u7cfb\u5217\u4ea7\u54c1\u7684\u4e00\u7ec4\u4e0d\u540c\u4f46\u76f8\u5173\u7684\u4ea7\u54c1\u58f0\u660e\u63a5\u53e3 \u3002 \u5177\u4f53\u4ea7\u54c1\uff08Con\u00adcrete Prod\u00aduct\uff09\uff1a\u662f\u62bd\u8c61\u4ea7\u54c1\u7684\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u5b9e\u73b0\u3002\u6240\u6709\u53d8\u4f53\uff08\u7ef4\u591a\u5229\u4e9a/\u73b0\u4ee3\uff09\u90fd\u5fc5\u987b\u5b9e\u73b0\u76f8\u5e94\u7684\u62bd\u8c61\u4ea7\u54c1\uff08 \u6905\u5b50/\u6c99\u53d1 \uff09\u3002 \u62bd\u8c61\u5de5\u5382\uff08Abstract Fac\u00adto\u00adry\uff09\uff1a\u63a5\u53e3\u58f0\u660e\u4e86\u4e00\u7ec4\u521b\u5efa\u5404\u79cd\u62bd\u8c61\u4ea7\u54c1\u7684\u65b9\u6cd5\u3002 \u5177\u4f53\u5de5\u5382\uff08Con\u00adcrete Fac\u00adto\u00adry\uff09\uff1a\u5b9e\u73b0\u62bd\u8c61\u5de5\u5382\u7684\u6784\u5efa\u65b9\u6cd5\u3002\u6bcf\u4e2a\u5177\u4f53\u5de5\u5382\u90fd\u5bf9\u5e94\u7279\u5b9a\u4ea7\u54c1\u53d8\u4f53\u3002 \u5ba2\u6237\u7aef\uff1a\u4e1a\u52a1\u903b\u8f91\u8c03\u7528Con\u00adcrete Fac\u00adto\u00adry\u7684\u5de5\u5382\u65b9\u6cd5\uff0c\u5f97\u5230\u5177\u4f53\u7684\u4ea7\u54c1\u3002 \u9002\u7528\u573a\u666f \u5982\u679c\u4ee3\u7801\u9700\u8981\u4e0e\u591a\u4e2a\u4e0d\u540c\u7cfb\u5217\u7684\u76f8\u5173\u4ea7\u54c1\u4ea4\u4e92\uff0c\u4f46\u662f\u7531\u4e8e\u65e0\u6cd5\u63d0\u524d\u83b7\u53d6\u76f8\u5173\u4fe1\u606f\uff0c\u6216\u8005\u51fa\u4e8e\u5bf9\u672a\u6765\u6269\u5c55\u6027\u7684\u8003\u8651\uff0c\u4f60\u4e0d\u5e0c\u671b\u4ee3\u7801\u57fa\u4e8e\u4ea7\u54c1\u7684\u5177\u4f53\u7c7b\u8fdb\u884c\u6784\u5efa\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u62bd\u8c61\u5de5\u5382\u3002 \u751f\u6210\u5668 - Builder \u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u590d\u6742\u7684\u4ea7\u54c1\u7c7b\u5bf9\u8c61\uff0c\u5728\u5bf9\u5176\u8fdb\u884c\u6784\u9020\u65f6\u9700\u8981\u5bf9\u8bf8\u591a\u6210\u5458\u53d8\u91cf\u548c\u5d4c\u5957\u5bf9\u8c61\u8fdb\u884c\u7e41\u590d\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002\u8fd9\u4e9b\u521d\u59cb\u5316\u4ee3\u7801\u901a\u5e38\u6df1\u85cf\u4e8e\u4e00\u4e2a\u5305\u542b\u4f17\u591a\u53c2\u6570\u4e14\u8ba9\u4eba\u57fa\u672c\u770b\u4e0d\u61c2\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff1b\u751a\u81f3\u8fd8\u6709\u66f4\u7cdf\u7cd5\u7684\u60c5\u51b5\uff0c\u90a3\u5c31\u662f\u8fd9\u4e9b\u4ee3\u7801\u6563\u843d\u5728\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u591a\u4e2a\u4f4d\u7f6e\u3002 \u751f\u6210\u5668\uff08Builder\uff09\uff1a\u63a5\u53e3\u58f0\u660e\u5728\u6240\u6709\u7c7b\u578b\u751f\u6210\u5668\u4e2d\u901a\u7528\u7684\u4ea7\u54c1\u6784\u9020\u6b65\u9aa4\u3002 \u5177\u4f53\u751f\u6210\u5668\uff08Concrete Builders\uff09\uff1a\u63d0\u4f9b\u6784\u9020\u8fc7\u7a0b\u7684\u4e0d\u540c\u5b9e\u73b0 \u3002\u5177\u4f53\u751f\u6210\u5668\u4e5f\u53ef\u4ee5\u6784\u9020\u4e0d\u9075\u5faa\u901a\u7528\u63a5\u53e3\u7684\u4ea7\u54c1\u3002 \u4ea7\u54c1\uff08Products\uff09\uff1a\u6700\u7ec8\u751f\u6210\u7684\u5bf9\u8c61\u3002 \u7531\u4e0d\u540c\u751f\u6210\u5668\u6784\u9020\u7684\u4ea7\u54c1\u65e0\u9700\u5c5e\u4e8e\u540c\u4e00\u7c7b\u5c42\u6b21\u7ed3\u6784\u6216\u63a5\u53e3 \u4e3b\u7ba1\uff08Director \uff09 \u7c7b\uff1a\u5b9a\u4e49\u8c03\u7528\u6784\u9020\u6b65\u9aa4\u7684\u987a\u5e8f \uff0c \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u521b\u5efa\u548c\u590d\u7528\u7279\u5b9a\u7684\u4ea7\u54c1\u914d\u7f6e \u3002 \u5ba2\u6237\u7aef \uff08 Client \uff09 \u5fc5\u987b\u5c06\u67d0\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u4e0e\u4e3b\u7ba1\u7c7b\u5173\u8054 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c \u4f60\u53ea\u9700\u901a\u8fc7\u4e3b\u7ba1\u7c7b\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4e00\u6b21\u6027\u5173\u8054\u5373\u53ef \u3002 \u6b64\u540e\u4e3b\u7ba1\u7c7b\u5c31\u80fd\u4f7f\u7528\u751f\u6210\u5668\u5bf9\u8c61\u5b8c\u6210\u540e\u7eed\u6240\u6709\u7684\u6784\u9020\u4efb\u52a1 \u3002 \u4f46\u5728\u5ba2\u6237\u7aef\u5c06\u751f\u6210\u5668\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e3b\u7ba1\u7c7b\u5236\u9020\u65b9\u6cd5\u65f6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b \uff0c \u4f60\u5728\u4f7f\u7528\u4e3b\u7ba1\u7c7b\u751f\u4ea7\u4ea7\u54c1\u65f6\u6bcf\u6b21\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u751f\u6210\u5668 \u5b9e\u9645\u4e0a\uff0c\u5177\u4f53\u751f\u6210\u5668\u8fd8\u9700\u8981\u4f9d\u8d56\u4e00\u4e2a\u539f\u59cb\u4ea7\u54c1\u7c7b\uff0c\u8be5\u539f\u59cb\u4ea7\u54c1\u7c7b\u7ecf\u8fc7\u4e3b\u7ba1\u7c7b\u6240\u5b9a\u4e49\u6784\u9020\u6b65\u9aa4\uff0c\u88ab\u52a0\u5de5\u6210\u6700\u7ec8\u4ea7\u54c1\u5bf9\u8c61\u3002 \u4e13\u95e8\u7528\u4e8e\u751f\u4ea7\u4e00\u7cfb\u5217\u76f8\u5173\u5bf9\u8c61\u3002\u62bd\u8c61\u5de5\u5382 \u4f1a\u9a6c\u4e0a\u8fd4\u56de\u4ea7\u54c1\uff0c\u751f\u6210\u5668 \u5219\u5141\u8bb8\u4f60\u5728\u83b7\u53d6\u4ea7\u54c1\u524d\u6267\u884c\u4e00\u4e9b\u989d\u5916\u6784\u9020\u6b65\u9aa4\u3002\u4f60\u53ef\u4ee5\u5728\u521b\u5efa\u590d\u6742 \u7ec4\u5408 \u6811\u65f6\u4f7f\u7528 \u751f\u6210\u5668\uff0c\u56e0\u4e3a\u8fd9\u53ef\u4f7f\u5176\u6784\u9020\u6b65\u9aa4\u4ee5\u9012\u5f52\u7684\u65b9\u5f0f\u8fd0\u884c\u3002\u4f60\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528 \u751f\u6210\u5668 \u548c \u6865\u63a5 \u6a21\u5f0f\uff1a\u4e3b\u7ba1 \u7c7b\u8d1f\u8d23\u62bd\u8c61\u5de5\u4f5c\uff0c\u5404\u79cd\u4e0d\u540c\u7684\u751f\u6210\u5668 \u539f\u578b \u539f\u578b \u662f\u4e00\u79cd\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4f7f \u4f60\u80fd\u591f\u590d\u5236\u5df2\u6709\u5bf9\u8c61\uff0c\u800c\u53c8\u65e0\u9700 \u4f7f\u4ee3\u7801\u4f9d\u8d56\u5b83\u4eec\u6240\u5c5e\u7684\u7c7b\u3002 \u590d\u5236\u4e00\u4e2a\u5bf9\u8c61\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u4ece\u5916\u90e8\u590d\u5236\uff0c\u521b\u5efa\u4e00\u4e2a\u4e0e\u539f\u59cb\u5bf9\u8c61\u5c5e\u4e8e\u76f8\u540c\u7c7b\u7684\u5bf9\u8c61\uff0c\u904d\u5386\u539f\u59cb\u5bf9\u8c61\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u5e76\u5c06\u6210\u5458\u53d8\u91cf\u7684\u503c\u590d\u5236\u5230\u65b0\u5bf9\u8c61\u4e2d\u3002 \u8fd9\u4f1a\u6709\u4e24\u4e2a\u95ee\u9898\uff1a \u8fd9\u8981\u6c42\u4f60\u5fc5\u987b\u77e5\u9053\u539f\u59cb\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\uff0c\u6240\u4ee5\u4ee3\u7801\u5fc5\u987b\u4f9d\u8d56\u8be5\u7c7b\u3002\u5373\u4f7f\u4f60\u53ef\u4ee5\u63a5\u53d7\u989d\u5916\u7684\u4f9d\u8d56\u6027\uff0c\u4f46\u6709\u65f6\u5bf9\u8c61\u7684\u7c7b\u53ef\u80fd\u662f\u4e0d\u77e5\u9053\u7684\u3002 \u6709\u4e9b\u5bf9\u8c61\u53ef\u80fd\u62e5\u6709\u79c1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u65e0\u6cd5\u4ece\u5916\u90e8\u8bbf\u95ee\u3002 \u4ece\u5185\u90e8\u590d\u5236\uff1a\u590d\u5236\u8fc7\u7a0b\u7531\u539f\u59cb\u5bf9\u8c61\u5b9e\u73b0\uff0c\u8c03\u7528\u539f\u59cb\u5bf9\u8c61\u7684\u76f8\u5173\u63a5\u53e3\uff0c\u4fbf\u53ef\u8fd4\u56de\u4e00\u4e2a\u514b\u9686\u5bf9\u8c61\u3002\u652f\u6301\u514b\u9686\u7684\u5bf9\u8c61\u4fbf\u79f0\u4e3a\u539f\u578b\u3002 \u5f53\u4f60\u7684\u5bf9\u8c61\u6709\u51e0\u5341\u4e2a\u6210\u5458\u53d8\u91cf\u548c\u51e0\u767e\u79cd\u7c7b\u578b\u65f6\u5bf9\u5176\u8fdb\u884c\u514b\u9686\u751a\u81f3\u53ef\u4ee5\u4ee3\u66ff\u5b50\u7c7b\u7684\u6784\u9020\u3002 1.\u539f\u578b\uff08 Prototype\uff09\u63a5\u53e3\u5c06\u5bf9\u514b\u9686\u65b9\u6cd5\u8fdb\u884c\u58f0\u660e\u3002\u5728\u7edd\u5927\u591a\u6570\u60c5\u6cc1\u4e0b\uff0c\u5176\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u540d\u4e3a clone\u514b\u9686\u7684\u65b9\u6cd5\u3002 2.\u5177\u4f53\u539f\u578b\uff08 Concrete Prototype\uff09\u7c7b\u5c06\u5b9e\u73b0\u514b\u9686\u65b9\u6cd5\u3002\u9664\u4e86\u5c06\u539f\u59cb\u5bf9\u8c61\u7684\u6570\u636e\u590d\u5236\u5230\u514b\u9686\u4f53\u4e2d\u4e4b\u5916\uff0c\u8be5\u65b9\u6cd5\u6709\u65f6\u8fd8\u9700\u5904\u7406\u514b\u9686\u8fc7\u7a0b\u4e2d\u7684\u6781\u7aef\u60c5\u51b5\uff0c\u4f8b\u5982\u514b\u9686\u5173\u8054\u5bf9\u8c61\u548c\u68b3\u7406\u9012\u5f52\u4f9d\u8d56\u7b49\u7b49\u3002 3.\u5ba2\u6237\u7aef\uff08 Client\uff09\u53ef\u4ee5\u590d\u5236\u5b9e\u73b0\u4e86\u539f\u578b\u63a5\u53e3\u7684\u4efb\u4f55\u5bf9\u8c61 \u5355\u4f8b \u5355\u4f8b\u662f\u4e00\u79cd\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u8ba9\u4f60\u80fd\u591f\u4fdd\u8bc1\u4e00\u4e2a\u7c7b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u8be5 \u5b9e\u4f8b\u7684\u5168\u5c40\u8282\u70b9\u3002 \u5de5\u5382\u65b9\u6cd5\u6709\u4e24\u4e2a\u542b\u4e49\uff1a1. \u5177\u4f53\u6307\u4ee3\u521b\u5efa\u8005\u7c7b\u7684\u521b\u5efa\u4ea7\u54c1\u7c7b\u7684\u51fd\u6570\uff1b2.\u6307\u4ee3\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u3002\u9700\u8981\u6839\u636e\u4e0a\u4e0b\u6587\u786e\u5b9a\u662f\u54ea\u4e2a\u542b\u4e49\u3002 \u21a9","title":"7.3.\u521b\u5efa\u578b\u6a21\u5f0f"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#_1","text":"\u573a\u666f\uff1a \u521b\u5efa\u8005\u57fa\u7c7b\u8d1f\u8d23\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff0c\u4ee5\u53ca\u58f0\u660e\u521b\u5efa\u4ea7\u54c1\u7c7b\u7684\u63a5\u53e3\uff08\u5373\u5de5\u5382\u65b9\u6cd5 1 \uff09\u3002\u8ba9\u521b\u5efa\u8005\u5b50\u7c7b\u91cd\u5199\u5de5\u5382\u65b9\u6cd5\uff0c\u51b3\u5b9a\u5b9e\u4f8b\u5316\u54ea\u4e2a\u4ea7\u54c1\u7c7b\u3002\u4e0d\u540c\u7684\u4ea7\u54c1\u7c7b\u5728\u4e1a\u52a1\u903b\u8f91\u4e2d\u88ab\u7edf\u4e00\u8c03\u7528\uff0c\u4e1a\u52a1\u903b\u8f91\u65e0\u9700\u5173\u5fc3\u88ab\u8c03\u7528\u7684\u4ea7\u54c1\u7c7b\u5177\u4f53\u662f\u54ea\u4e2a\u4ea7\u54c1\uff0c\u56e0\u6b64\u6240\u6709\u4ea7\u54c1\u7c7b\u5fc5\u987b\u63d0\u4f9b\u76f8\u540c\u7684\u63a5\u53e3\u3002 \u610f\u56fe\uff1a \u5c06\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u548c\u9700\u8981\u4e0d\u65ad\u6269\u5c55\u7684\u4ea7\u54c1\u7c7b\u4ee3\u7801\u9694\u79bb\u3002 \u4ea7\u54c1\uff08Product\uff09\uff1a\u5bf9\u5176\u5b50\u7c7b\u5e94\u6709\u7684\u63a5\u53e3\u8fdb\u884c\u58f0\u660e\uff0c\u8fd9\u4e9b\u63a5\u53e3\u5c06\u88ab\u521b\u5efa\u8005\u7684\u4e1a\u52a1\u903b\u8f91\uff08 someOperation \u65b9\u6cd5\uff09\u8c03\u7528\u3002 \u5177\u4f53\u4ea7\u54c1\uff08Concrete Products\uff09\uff1a\u662f\u4ea7\u54c1\u63a5\u53e3\u7684\u4e0d\u540c\u5b9e\u73b0\u3002\u8fd9\u662f\u5177\u4f53\u521b\u5efa\u8005\u7684\u5de5\u5382\u65b9\u6cd5\u5c06\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 \u521b\u5efa\u8005\u7c7b\uff08Creator\uff09\uff1a\u58f0\u660e\u8fd4\u56de\u4ea7\u54c1\u5bf9\u8c61\u7684\u5de5\u5382\u65b9\u6cd5\uff08 createProduct \uff09\u3002Cre\u00adator\u7c7b\u7684\u5de5\u5382\u65b9\u6cd5\u53ef\u4ee5\u58f0\u660e\u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5f3a\u5236\u5b50\u7c7b\u91cd\u5199\u8be5\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4ea7\u54c1\u5bf9\u8c61\u3002 \u5177\u4f53\u521b\u5efa\u8005\uff08Concrete Creator\uff09\uff1a\u91cd\u5199Creator\u7c7b\u7684\u5de5\u5382\u65b9\u6cd5\uff0c\u51b3\u5b9a\u8fd4\u56de\u5177\u4f53\u7684\u4ea7\u54c1\u5bf9\u8c61\u3002\u5305\u542b\u4e00\u4e9b\u4e0e\u4ea7\u54c1\u76f8\u5173\u7684\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\uff0c\u5728\u8fd9\u4e9b\u4e1a\u52a1\u4ee3\u7801\u4e2d\uff0c\u5de5\u5382\u65b9\u6cd5\u5c06\u88ab\u8c03\u7528\uff0c\u83b7\u53d6\u5177\u4f53\u4ea7\u54c1\u5bf9\u8c61\uff0c\u7136\u540e\u5177\u4f53\u4ea7\u54c1\u5bf9\u8c61\u7684\u76f8\u5173\u63a5\u53e3\u5c06\u88ab\u8c03\u7528\uff0c\u4ee5\u5b9e\u73b0\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u5ba2\u6237\u7aef\uff1a\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u8c03\u7528Concrete Creator\u7684\u63a5\u53e3\u3002 \u56e0\u6b64\uff0c\u867d\u7136\u521b\u5efa\u8005\u7684\u540d\u5b57\u662f\u521b\u5efa\u8005\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u521b\u5efa\u8005\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff0c\u800c\u4e0d\u662f\u51b3\u5b9a\u521b\u5efa\u54ea\u4e2a\u4ea7\u54c1\u7684\u5bf9\u8c61\u3002 \u5de5\u5382\u65b9\u6cd5\u5c06\u8fd9\u4e9b\u4e1a\u52a1\u903b\u8f91\u4ece\u5177\u4f53\u4ea7\u54c1\u7c7b\u4e2d\u5206\u79bb\u51fa\u6765\u3002 \u5e76\u4e0d\u4e00\u5b9a\u6bcf\u6b21\u8c03\u7528\u5de5\u5382\u65b9\u6cd5\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b \u3002\u5de5\u5382\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u8fd4\u56de\u7f13\u5b58\u3001\u5bf9\u8c61\u6c60\u6216\u5176\u4ed6\u6765\u6e90\u7684\u5df2\u6709\u5bf9\u8c61\u3002 \u53ef\u4ee5\u53ea\u4f7f\u7528\u5355\u4e00\u7684\u5de5\u5382\u65b9\u6cd5\uff08\u4e00\u4e2a\u5177\u4f53\u521b\u5efa\u8005\u5b50\u7c7b\uff09\uff0c\u4f46\u5982\u679c\u4ea7\u54c1\u7c7b\u592a\u591a\u7684\u8bdd\uff0c\u4f1a\u5bfc\u81f4\u5de5\u5382\u65b9\u6cd5\u51fa\u73b0\u592a\u591a\u7684\u5206\u652f\u8bed\u53e5\uff0c\u7528\u4e8e\u9009\u62e9\u5404\u79cd\u9700\u8981\u5b9e\u4f8b\u5316\u7684\u4ea7\u54c1\u7c7b\u3002","title":"\u5de5\u5382\u65b9\u6cd5"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#_2","text":"\u5f53\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u65e0\u6cd5\u9884\u77e5\u5bf9\u8c61\u786e\u5207\u7c7b\u522b\u53ca\u5176\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u53ef\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u3002 \u5de5\u5382\u65b9\u6cd5\u5c06\u521b\u5efa\u4ea7\u54c1\u7684\u4ee3\u7801\u4e0e\u5b9e\u9645\u4f7f\u7528\u4ea7\u54c1\u7684\u4ee3\u7801\u5206\u79bb\uff0c\u4ece\u800c\u80fd\u5728\u4e0d\u5f71\u54cd\u5176\u4ed6\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u6269\u5c55\u4ea7\u54c1\u521b\u5efa\u90e8\u5206\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5982\u679c\u9700\u8981\u5411\u5e94\u7528\u4e2d\u6dfb\u52a0\u4e00\u79cd\u65b0\u4ea7\u54c1\uff0c\u4f60\u53ea\u9700\u8981\u5f00\u53d1\u65b0\u7684\u521b\u5efa\u8005\u5b50\u7c7b\uff0c\u7136\u540e\u91cd\u5199\u5176\u5de5\u5382\u65b9\u6cd5\u5373\u53ef\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#_3","text":"\u62bd\u8c61\u5de5\u5382\u5b9e\u9645\u4e0a\u662f\u4e00\u7ec4\u5de5\u5382\u65b9\u6cd5\u3002 \u5982\u4e0b\u56fe\uff0c\u73b0\u5728\u6709\u4e09\u79cd\u5bb6\u5177\uff1a\u6905\u5b50\u3001\u6c99\u53d1\u3001\u5496\u5561\u684c\uff0c\u540c\u65f6\u5bb6\u5177\u53ef\u4ee5\u6709\u4e09\u79cd\u98ce\u683c\uff1a\u73b0\u4ee3\u3001\u7ef4\u591a\u5229\u4e9a\u3001\u88c5\u9970\u98ce\u827a\u672f\u3002 \u7cfb\u5217\u4ea7\u54c1\u53ca\u5176\u4e0d\u540c\u53d8\u4f53 \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4e09\u79cd\u5bb6\u5177\u521b\u5efa\u57fa\u7c7b\uff0c\u5176\u5b50\u7c7b\u5206\u522b\u662f\u4e09\u79cd\u98ce\u683c\u7684\u5bb6\u5177\u3002 \u540c\u4e00\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u4f53\u90fd\u5fc5\u987b\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e4b\u4e2d \u540c\u65f6\u5199\u4e09\u4e2a\u5177\u4f53\u521b\u5efa\u8005\u7c7b\uff0c\u5206\u522b\u5bf9\u5e94\u4e09\u79cd\u98ce\u683c\uff0c\u6bcf\u4e2a\u5177\u4f53\u521b\u5efa\u8005\u90fd\u6709\u4e09\u4e2a\u5de5\u5382\u65b9\u6cd5\uff0c\u5206\u522b\u7528\u4e8e\u521b\u5efa\u5177\u4f53\u98ce\u683c\u7684\u5bb6\u5177\u3002 \u6bcf\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5b9a\u7684\u98ce\u683c \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4f1a\u5728\u521d\u59cb\u5316\u9636\u6bb5\u521b\u5efa\u5177\u4f53\u5de5\u5382\u5bf9\u8c61 \u3002\u800c\u5728\u6b64\u4e4b\u524d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u6216\u73af\u5883\u8bbe\u5b9a\u9009\u62e9\u5de5\u5382\u7c7b\u522b\u3002 \u62bd\u8c61\u4ea7\u54c1\uff08Abstract Prod\u00aduct \uff09\uff1a\u4e3a\u6784\u6210\u7cfb\u5217\u4ea7\u54c1\u7684\u4e00\u7ec4\u4e0d\u540c\u4f46\u76f8\u5173\u7684\u4ea7\u54c1\u58f0\u660e\u63a5\u53e3 \u3002 \u5177\u4f53\u4ea7\u54c1\uff08Con\u00adcrete Prod\u00aduct\uff09\uff1a\u662f\u62bd\u8c61\u4ea7\u54c1\u7684\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u5b9e\u73b0\u3002\u6240\u6709\u53d8\u4f53\uff08\u7ef4\u591a\u5229\u4e9a/\u73b0\u4ee3\uff09\u90fd\u5fc5\u987b\u5b9e\u73b0\u76f8\u5e94\u7684\u62bd\u8c61\u4ea7\u54c1\uff08 \u6905\u5b50/\u6c99\u53d1 \uff09\u3002 \u62bd\u8c61\u5de5\u5382\uff08Abstract Fac\u00adto\u00adry\uff09\uff1a\u63a5\u53e3\u58f0\u660e\u4e86\u4e00\u7ec4\u521b\u5efa\u5404\u79cd\u62bd\u8c61\u4ea7\u54c1\u7684\u65b9\u6cd5\u3002 \u5177\u4f53\u5de5\u5382\uff08Con\u00adcrete Fac\u00adto\u00adry\uff09\uff1a\u5b9e\u73b0\u62bd\u8c61\u5de5\u5382\u7684\u6784\u5efa\u65b9\u6cd5\u3002\u6bcf\u4e2a\u5177\u4f53\u5de5\u5382\u90fd\u5bf9\u5e94\u7279\u5b9a\u4ea7\u54c1\u53d8\u4f53\u3002 \u5ba2\u6237\u7aef\uff1a\u4e1a\u52a1\u903b\u8f91\u8c03\u7528Con\u00adcrete Fac\u00adto\u00adry\u7684\u5de5\u5382\u65b9\u6cd5\uff0c\u5f97\u5230\u5177\u4f53\u7684\u4ea7\u54c1\u3002","title":"\u62bd\u8c61\u5de5\u5382"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#_4","text":"\u5982\u679c\u4ee3\u7801\u9700\u8981\u4e0e\u591a\u4e2a\u4e0d\u540c\u7cfb\u5217\u7684\u76f8\u5173\u4ea7\u54c1\u4ea4\u4e92\uff0c\u4f46\u662f\u7531\u4e8e\u65e0\u6cd5\u63d0\u524d\u83b7\u53d6\u76f8\u5173\u4fe1\u606f\uff0c\u6216\u8005\u51fa\u4e8e\u5bf9\u672a\u6765\u6269\u5c55\u6027\u7684\u8003\u8651\uff0c\u4f60\u4e0d\u5e0c\u671b\u4ee3\u7801\u57fa\u4e8e\u4ea7\u54c1\u7684\u5177\u4f53\u7c7b\u8fdb\u884c\u6784\u5efa\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u62bd\u8c61\u5de5\u5382\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#-builder","text":"\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u590d\u6742\u7684\u4ea7\u54c1\u7c7b\u5bf9\u8c61\uff0c\u5728\u5bf9\u5176\u8fdb\u884c\u6784\u9020\u65f6\u9700\u8981\u5bf9\u8bf8\u591a\u6210\u5458\u53d8\u91cf\u548c\u5d4c\u5957\u5bf9\u8c61\u8fdb\u884c\u7e41\u590d\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002\u8fd9\u4e9b\u521d\u59cb\u5316\u4ee3\u7801\u901a\u5e38\u6df1\u85cf\u4e8e\u4e00\u4e2a\u5305\u542b\u4f17\u591a\u53c2\u6570\u4e14\u8ba9\u4eba\u57fa\u672c\u770b\u4e0d\u61c2\u7684\u6784\u9020\u51fd\u6570\u4e2d\uff1b\u751a\u81f3\u8fd8\u6709\u66f4\u7cdf\u7cd5\u7684\u60c5\u51b5\uff0c\u90a3\u5c31\u662f\u8fd9\u4e9b\u4ee3\u7801\u6563\u843d\u5728\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u591a\u4e2a\u4f4d\u7f6e\u3002 \u751f\u6210\u5668\uff08Builder\uff09\uff1a\u63a5\u53e3\u58f0\u660e\u5728\u6240\u6709\u7c7b\u578b\u751f\u6210\u5668\u4e2d\u901a\u7528\u7684\u4ea7\u54c1\u6784\u9020\u6b65\u9aa4\u3002 \u5177\u4f53\u751f\u6210\u5668\uff08Concrete Builders\uff09\uff1a\u63d0\u4f9b\u6784\u9020\u8fc7\u7a0b\u7684\u4e0d\u540c\u5b9e\u73b0 \u3002\u5177\u4f53\u751f\u6210\u5668\u4e5f\u53ef\u4ee5\u6784\u9020\u4e0d\u9075\u5faa\u901a\u7528\u63a5\u53e3\u7684\u4ea7\u54c1\u3002 \u4ea7\u54c1\uff08Products\uff09\uff1a\u6700\u7ec8\u751f\u6210\u7684\u5bf9\u8c61\u3002 \u7531\u4e0d\u540c\u751f\u6210\u5668\u6784\u9020\u7684\u4ea7\u54c1\u65e0\u9700\u5c5e\u4e8e\u540c\u4e00\u7c7b\u5c42\u6b21\u7ed3\u6784\u6216\u63a5\u53e3 \u4e3b\u7ba1\uff08Director \uff09 \u7c7b\uff1a\u5b9a\u4e49\u8c03\u7528\u6784\u9020\u6b65\u9aa4\u7684\u987a\u5e8f \uff0c \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u521b\u5efa\u548c\u590d\u7528\u7279\u5b9a\u7684\u4ea7\u54c1\u914d\u7f6e \u3002 \u5ba2\u6237\u7aef \uff08 Client \uff09 \u5fc5\u987b\u5c06\u67d0\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u4e0e\u4e3b\u7ba1\u7c7b\u5173\u8054 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c \u4f60\u53ea\u9700\u901a\u8fc7\u4e3b\u7ba1\u7c7b\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4e00\u6b21\u6027\u5173\u8054\u5373\u53ef \u3002 \u6b64\u540e\u4e3b\u7ba1\u7c7b\u5c31\u80fd\u4f7f\u7528\u751f\u6210\u5668\u5bf9\u8c61\u5b8c\u6210\u540e\u7eed\u6240\u6709\u7684\u6784\u9020\u4efb\u52a1 \u3002 \u4f46\u5728\u5ba2\u6237\u7aef\u5c06\u751f\u6210\u5668\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e3b\u7ba1\u7c7b\u5236\u9020\u65b9\u6cd5\u65f6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b \uff0c \u4f60\u5728\u4f7f\u7528\u4e3b\u7ba1\u7c7b\u751f\u4ea7\u4ea7\u54c1\u65f6\u6bcf\u6b21\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u751f\u6210\u5668 \u5b9e\u9645\u4e0a\uff0c\u5177\u4f53\u751f\u6210\u5668\u8fd8\u9700\u8981\u4f9d\u8d56\u4e00\u4e2a\u539f\u59cb\u4ea7\u54c1\u7c7b\uff0c\u8be5\u539f\u59cb\u4ea7\u54c1\u7c7b\u7ecf\u8fc7\u4e3b\u7ba1\u7c7b\u6240\u5b9a\u4e49\u6784\u9020\u6b65\u9aa4\uff0c\u88ab\u52a0\u5de5\u6210\u6700\u7ec8\u4ea7\u54c1\u5bf9\u8c61\u3002 \u4e13\u95e8\u7528\u4e8e\u751f\u4ea7\u4e00\u7cfb\u5217\u76f8\u5173\u5bf9\u8c61\u3002\u62bd\u8c61\u5de5\u5382 \u4f1a\u9a6c\u4e0a\u8fd4\u56de\u4ea7\u54c1\uff0c\u751f\u6210\u5668 \u5219\u5141\u8bb8\u4f60\u5728\u83b7\u53d6\u4ea7\u54c1\u524d\u6267\u884c\u4e00\u4e9b\u989d\u5916\u6784\u9020\u6b65\u9aa4\u3002\u4f60\u53ef\u4ee5\u5728\u521b\u5efa\u590d\u6742 \u7ec4\u5408 \u6811\u65f6\u4f7f\u7528 \u751f\u6210\u5668\uff0c\u56e0\u4e3a\u8fd9\u53ef\u4f7f\u5176\u6784\u9020\u6b65\u9aa4\u4ee5\u9012\u5f52\u7684\u65b9\u5f0f\u8fd0\u884c\u3002\u4f60\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528 \u751f\u6210\u5668 \u548c \u6865\u63a5 \u6a21\u5f0f\uff1a\u4e3b\u7ba1 \u7c7b\u8d1f\u8d23\u62bd\u8c61\u5de5\u4f5c\uff0c\u5404\u79cd\u4e0d\u540c\u7684\u751f\u6210\u5668","title":"\u751f\u6210\u5668 - Builder"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#_5","text":"\u539f\u578b \u662f\u4e00\u79cd\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4f7f \u4f60\u80fd\u591f\u590d\u5236\u5df2\u6709\u5bf9\u8c61\uff0c\u800c\u53c8\u65e0\u9700 \u4f7f\u4ee3\u7801\u4f9d\u8d56\u5b83\u4eec\u6240\u5c5e\u7684\u7c7b\u3002 \u590d\u5236\u4e00\u4e2a\u5bf9\u8c61\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u4ece\u5916\u90e8\u590d\u5236\uff0c\u521b\u5efa\u4e00\u4e2a\u4e0e\u539f\u59cb\u5bf9\u8c61\u5c5e\u4e8e\u76f8\u540c\u7c7b\u7684\u5bf9\u8c61\uff0c\u904d\u5386\u539f\u59cb\u5bf9\u8c61\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u5e76\u5c06\u6210\u5458\u53d8\u91cf\u7684\u503c\u590d\u5236\u5230\u65b0\u5bf9\u8c61\u4e2d\u3002 \u8fd9\u4f1a\u6709\u4e24\u4e2a\u95ee\u9898\uff1a \u8fd9\u8981\u6c42\u4f60\u5fc5\u987b\u77e5\u9053\u539f\u59cb\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\uff0c\u6240\u4ee5\u4ee3\u7801\u5fc5\u987b\u4f9d\u8d56\u8be5\u7c7b\u3002\u5373\u4f7f\u4f60\u53ef\u4ee5\u63a5\u53d7\u989d\u5916\u7684\u4f9d\u8d56\u6027\uff0c\u4f46\u6709\u65f6\u5bf9\u8c61\u7684\u7c7b\u53ef\u80fd\u662f\u4e0d\u77e5\u9053\u7684\u3002 \u6709\u4e9b\u5bf9\u8c61\u53ef\u80fd\u62e5\u6709\u79c1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u65e0\u6cd5\u4ece\u5916\u90e8\u8bbf\u95ee\u3002 \u4ece\u5185\u90e8\u590d\u5236\uff1a\u590d\u5236\u8fc7\u7a0b\u7531\u539f\u59cb\u5bf9\u8c61\u5b9e\u73b0\uff0c\u8c03\u7528\u539f\u59cb\u5bf9\u8c61\u7684\u76f8\u5173\u63a5\u53e3\uff0c\u4fbf\u53ef\u8fd4\u56de\u4e00\u4e2a\u514b\u9686\u5bf9\u8c61\u3002\u652f\u6301\u514b\u9686\u7684\u5bf9\u8c61\u4fbf\u79f0\u4e3a\u539f\u578b\u3002 \u5f53\u4f60\u7684\u5bf9\u8c61\u6709\u51e0\u5341\u4e2a\u6210\u5458\u53d8\u91cf\u548c\u51e0\u767e\u79cd\u7c7b\u578b\u65f6\u5bf9\u5176\u8fdb\u884c\u514b\u9686\u751a\u81f3\u53ef\u4ee5\u4ee3\u66ff\u5b50\u7c7b\u7684\u6784\u9020\u3002 1.\u539f\u578b\uff08 Prototype\uff09\u63a5\u53e3\u5c06\u5bf9\u514b\u9686\u65b9\u6cd5\u8fdb\u884c\u58f0\u660e\u3002\u5728\u7edd\u5927\u591a\u6570\u60c5\u6cc1\u4e0b\uff0c\u5176\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u540d\u4e3a clone\u514b\u9686\u7684\u65b9\u6cd5\u3002 2.\u5177\u4f53\u539f\u578b\uff08 Concrete Prototype\uff09\u7c7b\u5c06\u5b9e\u73b0\u514b\u9686\u65b9\u6cd5\u3002\u9664\u4e86\u5c06\u539f\u59cb\u5bf9\u8c61\u7684\u6570\u636e\u590d\u5236\u5230\u514b\u9686\u4f53\u4e2d\u4e4b\u5916\uff0c\u8be5\u65b9\u6cd5\u6709\u65f6\u8fd8\u9700\u5904\u7406\u514b\u9686\u8fc7\u7a0b\u4e2d\u7684\u6781\u7aef\u60c5\u51b5\uff0c\u4f8b\u5982\u514b\u9686\u5173\u8054\u5bf9\u8c61\u548c\u68b3\u7406\u9012\u5f52\u4f9d\u8d56\u7b49\u7b49\u3002 3.\u5ba2\u6237\u7aef\uff08 Client\uff09\u53ef\u4ee5\u590d\u5236\u5b9e\u73b0\u4e86\u539f\u578b\u63a5\u53e3\u7684\u4efb\u4f55\u5bf9\u8c61","title":"\u539f\u578b"},{"location":"%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.3.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html#_6","text":"\u5355\u4f8b\u662f\u4e00\u79cd\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u8ba9\u4f60\u80fd\u591f\u4fdd\u8bc1\u4e00\u4e2a\u7c7b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u8be5 \u5b9e\u4f8b\u7684\u5168\u5c40\u8282\u70b9\u3002 \u5de5\u5382\u65b9\u6cd5\u6709\u4e24\u4e2a\u542b\u4e49\uff1a1. \u5177\u4f53\u6307\u4ee3\u521b\u5efa\u8005\u7c7b\u7684\u521b\u5efa\u4ea7\u54c1\u7c7b\u7684\u51fd\u6570\uff1b2.\u6307\u4ee3\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u3002\u9700\u8981\u6839\u636e\u4e0a\u4e0b\u6587\u786e\u5b9a\u662f\u54ea\u4e2a\u542b\u4e49\u3002 \u21a9","title":"\u5355\u4f8b"}]}