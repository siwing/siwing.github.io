{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u6570\u5b66\u7b14\u8bb0 \u7ebf\u6027\u4ee3\u6570 \u6570\u7406\u7edf\u8ba1 \u673a\u5668\u5b66\u4e60 Python\u8d44\u6e90 \u7ebf\u4e0aIDE repl.it Python\u7684\u7ebf\u4e0aIDE\u6709\u4e0d\u5c11\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u4e0d\u652f\u6301\u4f7f\u7528\u4e00\u4e9b\u5f88\u5e38\u89c1\u7684\u7b2c\u4e09\u65b9\u5e93\u3002\u800c repl.it \u5c31\u53ef\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u5e93\uff0c\u4f8b\u5982Numpy\u3001Pandas\u7b49\u7b49\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5982\u679c\u6682\u65f6\u4e0d\u60f3\u5728\u672c\u5730\u5b89\u88c5Python\u73af\u5883\uff0c\u6216\u8005\u89c9\u5f97\u5b89\u88c5Python\u73af\u5883\u592a\u9ebb\u70e6\uff0c\u53ef\u4ee5\u5728 repl.it \u4e0a\u9762\u5b66\u4e60Python\u8bed\u6cd5\u3002 \u4e66\u7c4d \u300a \u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790 2th \u300b \u300a Python Cookbook 3rd Edition \u300b \u300a Python 3 Module of the Week \u300b \u300a\u7b28\u65b9\u6cd5\u5b66Python\u300b #1 #2 \u53c2\u8003\u624b\u518c python\u901f\u67e5\u8bcd\u5178 scikit learn\u901f\u67e5\u8bcd\u5178","title":"Home"},{"location":"index.html#_1","text":"\u7ebf\u6027\u4ee3\u6570 \u6570\u7406\u7edf\u8ba1 \u673a\u5668\u5b66\u4e60","title":"\u6570\u5b66\u7b14\u8bb0"},{"location":"index.html#python","text":"","title":"Python\u8d44\u6e90"},{"location":"index.html#ide","text":"repl.it Python\u7684\u7ebf\u4e0aIDE\u6709\u4e0d\u5c11\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u4e0d\u652f\u6301\u4f7f\u7528\u4e00\u4e9b\u5f88\u5e38\u89c1\u7684\u7b2c\u4e09\u65b9\u5e93\u3002\u800c repl.it \u5c31\u53ef\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u5e93\uff0c\u4f8b\u5982Numpy\u3001Pandas\u7b49\u7b49\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u5982\u679c\u6682\u65f6\u4e0d\u60f3\u5728\u672c\u5730\u5b89\u88c5Python\u73af\u5883\uff0c\u6216\u8005\u89c9\u5f97\u5b89\u88c5Python\u73af\u5883\u592a\u9ebb\u70e6\uff0c\u53ef\u4ee5\u5728 repl.it \u4e0a\u9762\u5b66\u4e60Python\u8bed\u6cd5\u3002","title":"\u7ebf\u4e0aIDE"},{"location":"index.html#_2","text":"\u300a \u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790 2th \u300b \u300a Python Cookbook 3rd Edition \u300b \u300a Python 3 Module of the Week \u300b \u300a\u7b28\u65b9\u6cd5\u5b66Python\u300b #1 #2","title":"\u4e66\u7c4d"},{"location":"index.html#_3","text":"python\u901f\u67e5\u8bcd\u5178 scikit learn\u901f\u67e5\u8bcd\u5178","title":"\u53c2\u8003\u624b\u518c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.03 \u4ea4\u4e92\u6a21\u5f0f Python\u662f\u4e00\u79cd\u89e3\u91ca\u578b\u8bed\u8a00\uff0cPython\u89e3\u91ca\u5668\u901a\u8fc7\u4e00\u6b21\u6267\u884c\u4e00\u6761\u8bed\u53e5\u7684\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u3002\u4ece tty\uff08\u7ec8\u7aef\uff09 \u8bfb\u53d6\u547d\u4ee4\u65f6, \u6211\u4eec\u79f0\u89e3\u91ca\u5668\u5de5\u4f5c\u4e8e\u4ea4\u4e92\u6a21\u5f0f (interactive mode)\u3002\u6240\u8c13\u7684\u4ea4\u4e92\u6a21\u5f0f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u5728\u7ec8\u7aef\u8f93\u5165\u7684Python\u8bed\u53e5\u4f1a\u7acb\u5373\u88ab\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u7ec8\u7aef\u663e\u793a\u63d0\u793a\u7b26\u3002\u7b49\u5f85\u4e0b\u4e00\u6b21\u547d\u4ee4\u7684\u8f93\u5165\u3002\u53ef\u4ee5\u5728cmd\u7a97\u53e3\u901a\u8fc7 python \u547d\u4ee4\u542f\u52a8CPython\u89e3\u91ca\u5668\u7684\u4ea4\u4e92\u6a21\u5f0f\uff0c\u4ea4\u4e92\u6a21\u5f0f\u4e0bCPython\u901a\u8fc7\u4e3b\u63d0\u793a\u7b26 (primary prompt) >>> \u63d0\u793a\u4e0b\u4e00\u6761\u547d\u4ee4\uff0c\u800c\u4ece\u63d0\u793a\u7b26 \u00b7\u00b7\u00b7 \u63d0\u793a\u4e00\u6761\u547d\u4ee4\u7684\u7eed\u884c\u3002 \u52a0\u5f3a\u7684\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668(IPython)\u7684\u63d0\u793a\u7b26\u662f\u4e00\u79cd\u5e26\u7f16\u53f7\u7684\u98ce\u683c\uff0c\u5982 In[2] \uff0c\u800c\u4e0d\u662f\u6807\u51c6\u7684 >>> \u3002 Python\u4fdd\u7559\u5b57 \u4fdd\u7559\u5b57\uff08\u53c8\u79f0\u4e3a\u5173\u952e\u5b57\uff09\uff0c \u4e0d\u80fd\u628a\u5b83\u4eec\u7528\u4f5c\u4efb\u4f55\u6807\u8bc6\u7b26\u540d\u79f0 \u3002Python\u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2akeyword\u6a21\u5757\uff0c\u53ef\u4ee5\u8f93\u51fa\u5f53\u524d\u7248\u672c\u7684\u6240\u6709\u5173\u952e\u5b57\uff1a import keyword keyword . kwlist print ( keyword . kwlist ) ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] \u6ce8\u91ca Python\u4e2d\u5355\u884c\u6ce8\u91ca\u4ee5 # \u5f00\u5934\u3002\u591a\u884c\u6ce8\u91ca\u5219\u4f7f\u7528\uff1a ''' \u6216\u8005 \"\"\" \u3002\u5b9e\u9645\u4e0apython\u53ea\u6709\u5355\u884c\u6ce8\u91ca\u3002\u591a\u884c\u6ce8\u91ca\u7684\u672c\u8d28\u662f\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 # \u8fd9\u662f\u5355\u884c\u6ce8\u91ca ''' \u8fd9\u662f\u591a\u884c\u6ce8\u91ca \u8fd9\u662f\u591a\u884c\u6ce8\u91ca ''' \u4ee3\u7801\u5757 python\u6700\u5177\u7279\u8272\u7684\u5c31\u662f\u4f7f\u7528\u7f29\u8fdb\u6765\u8868\u793a\u4ee3\u7801\u5757\uff0c\u4e0d\u662f\u4f7f\u7528\u5927\u62ec\u53f7{}\u3002\u800c\u5192\u53f7\u8868\u793a\u4e00\u6bb5\u7f29\u8fdb\u4ee3\u7801\u5757\u7684\u5f00\u59cb\uff0c \u5176\u540e\u6240\u6709\u76f8\u540c\u5c42\u6b21\u7684\u4ee3\u7801\u5fc5\u987b\u4fdd\u6301\u76f8\u540c\u7684\u7f29\u8fdb\u91cf\uff0c \u7f29\u8fdb\u91cf\u5219\u53ef\u4ee5\u968f\u610f\uff0c\u76f4\u81f3\u4ee3\u7801\u5757\u7ed3\u675f\u3002 \u4e00\u822c\u7ea6\u5b9a\u4fd7\u6210\u4f7f\u75284\u4e2a\u7a7a\u683c\u7684\u7f29\u8fdb\u3002 if True : print ( \"True\" ) else : print ( \"False\" ) True \u4ee3\u7801\u7eed\u884c \u5982\u679c\u8bed\u53e5\u5f88\u957f\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u6760 \\ \u6765\u7eed\u884c\uff0c\u4f8b\u5982\uff1a a = 3 + \\ 4 + \\ 5 a 12 \u5728 [] , {} , \u6216 () \u4e2d\u7684\u591a\u884c\u8bed\u53e5 1 \uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u53cd\u659c\u6760 \\ \uff0c\u4f8b\u5982\uff1a total = [ 'item_one' , 'item_two' , 'item_three' , 'item_four' , 'item_five' ] total ['item_one', 'item_two', 'item_three', 'item_four', 'item_five'] \u540c\u4e00\u884c\u4e66\u5199\u591a\u6761\u8bed\u53e5 Python\u53ef\u4ee5\u5728\u540c\u4e00\u884c\u4e2d\u4f7f\u7528\u591a\u6761\u8bed\u53e5\uff0c\u8bed\u53e5\u4e4b\u95f4\u4f7f\u7528\u534a\u89d2\u5206\u53f7 ; \u5206\u9694\u3002\u4f46\u8fd9\u6837\u7684\u505a\u6cd5\u4e00\u822c\u4e0d\u63a8\u8350\uff0c\u56e0\u4e3a\u4f1a\u4f7f\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u53d8\u5dee\u3002 \u7a7a\u884c \u51fd\u6570\u3001\u7c7b\u65b9\u6cd5\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\uff0c\u8868\u793a\u4e00\u6bb5\u65b0\u7684\u4ee3\u7801\u7684\u5f00\u59cb\u3002\u7c7b\u548c\u51fd\u6570\u5165\u53e3\u4e4b\u95f4\u4e5f\u7528\u4e00\u884c\u7a7a\u884c\u5206\u9694\uff0c\u4ee5\u7a81\u51fa\u51fd\u6570\u5165\u53e3\u7684\u5f00\u59cb\u3002\u7a7a\u884c\u4e0e\u4ee3\u7801\u7f29\u8fdb\u4e0d\u540c\uff0c \u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 \u4e66\u5199\u65f6\u4e0d\u63d2\u5165\u7a7a\u884c\uff0cPython\u89e3\u91ca\u5668\u8fd0\u884c\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u4f46\u662f\u7a7a\u884c\u7684\u4f5c\u7528\u5728\u4e8e\u5206\u9694\u4e24\u6bb5\u4e0d\u540c\u529f\u80fd\u6216\u542b\u4e49\u7684\u4ee3\u7801\uff0c\u4fbf\u4e8e\u65e5\u540e\u4ee3\u7801\u7684\u7ef4\u62a4\u6216\u91cd\u6784\u3002\u7a7a\u884c\u4e5f\u662f\u7a0b\u5e8f\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002 Print \u8f93\u51fa print\u51fd\u6570\u9ed8\u8ba4\u8f93\u51fa\u662f\u6362\u884c\u7684\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4e0d\u6362\u884c\u6253\u5370\uff0c\u9700\u8981\u66f4\u6539print\u51fd\u6570\u7684 end \u53c2\u6570\uff1a # \u6362\u884c\u8f93\u51fa print ( \"a\" ) print ( \"b\" ) print ( '-' * 10 ) # \u4e0d\u6362\u884c\u8f93\u51fa print ( \"a\" , end = \" \" ) print ( \"b\" , end = \" \" ) a b ---------- a b \u5bfc\u5165\u6a21\u5757 \u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757 ( module ) \u5bfc\u5165\uff1a import somemodule \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570\uff1a from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570\uff1a from somemodule import firstfunc , secondfunc , thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165\uff1a from somemodule import * \u8f6c\u4e49\u7b26\uff1a \\ \u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\uff08\u8fd9\u4e9b\u5b57\u7b26\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\uff09\uff0c\u8fd9\u5c31\u9700\u8981\u201c\u8f6c\u4e49\u7b26\u201d\u3002\u6240\u8c13\u8f6c\u4e49\uff0c\u5c31\u662f\u4e0d\u91c7\u7528\u7b26\u53f7\u539f\u5148\u7684\u542b\u4e49\uff0c\u800c\u91c7\u7528\u53e6\u5916\u4e00\u542b\u4e49\u3002\u5728Pyhton\u4e2d\uff0c \\ \u4ee3\u8868\u8f6c\u4e49\u7b26\u3002 \u4e0b\u9762\u8868\u683c\u4e2d\u5217\u51fa\u5e38\u7528\u7684\u8f6c\u4e49\u7b26\uff1a \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \\ \u5728\u5b57\u7b26\u4e32\u884c\u5c3e\u7684\u7eed\u884c\u7b26 \\\\ \u53cd\u659c\u6760\u7b26\u53f7 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u8702\u9e23\u5668\u54cd\u94c3\uff08\u4e0d\u662f\u5587\u53ed\u53d1\u58f0\uff09\uff0c\u73b0\u5728\u7684\u8ba1\u7b97\u673a\u5f88\u591a\u90fd\u4e0d\u5e26\u8702\u9e23\u5668\u4e86\uff0c\u6240\u4ee5\u54cd\u94c3\u4e0d\u4e00\u5b9a\u6709\u6548 \\b \u9000\u683c\uff08Backspace\uff09\uff0c\u5c06\u5149\u6807\u4f4d\u7f6e\u79fb\u5230\u524d\u4e00\u5217 \\e \u8f6c\u4e49 \\000 \u7a7a \\n \u6362\u884c\u7b26 \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26\uff0c\u5373 Tab \u952e\uff0c\u4e00\u822c\u76f8\u5f53\u4e8e\u56db\u4e2a\u7a7a\u683c \\r \u56de\u8f66\u7b26 \\f \u6362\u9875 \\oyy \u516b\u8fdb\u5236\u6570\uff0cyy\u4ee3\u8868\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a \\o12 \u4ee3\u8868\u6362\u884c \\xyy \u5341\u516d\u8fdb\u5236\u6570\uff0cyy\u4ee3\u8868\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a \\x0a \u4ee3\u8868\u6362\u884c \\other \u5176\u5b83\u7684\u5b57\u7b26\u4ee5\u666e\u901a\u683c\u5f0f\u8f93\u51fa \u6709\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u5305\u542b\u4e86\u5f88\u591a \\ \uff0cPython\u9ed8\u8ba4\u5c06 \\ \u4f5c\u4e3a\u8f6c\u4e49\u7b26\u5904\u7406\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u60f3\u8f93\u51fa\u7684\u662f\u53cd\u659c\u6760\u7b26\u53f7 \\ \uff0c\uff08\u4f8b\u5982\u8f93\u5165\u6587\u4ef6\u8def\u5f84\uff09\u3002\u6b64\u65f6\uff0c\u81ea\u7136\u53ef\u4ee5\u5728\u53cd\u659c\u6760\u524d\u52a0\u4e0a\u8f6c\u4e49\u7b26 \\ \uff0c\u4f46\u662f\u8fd9\u6837\u672a\u514d\u592a\u9ebb\u70e6\u3002Python\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5316\u7684\u64cd\u4f5c\uff0cPyhon\u5141\u8bb8\u7528 r'\u5b57\u7b26\u4e32\u5185\u5bb9' \u8868\u793a '\u5b57\u7b26\u4e32\u5185\u5bb9' \u5185\u90e8\u7684\u5b57\u7b26\u4e32\u9ed8\u8ba4\u4e0d\u8f6c\u4e49\uff1a print ( ' \\\\\\t\\\\ ' ) print ( '-' * 10 ) print ( r ' \\\\ \\t \\\\ ' ) \\ \\ ---------- \\\\\\t\\\\ name\u4e0eobject \u63d0\u5230\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e38\u5e38\u4f1a\u63d0\u8d77\u53d8\u91cf\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u5728Python\u4e2d\uff0c\u53d8\u91cf\u4e00\u8bcd\u66f4\u51c6\u786e\u7684\u8bf4\u6cd5\u5e94\u8be5\u662fname\uff08\u540d\u5b57\uff09\uff0c\u56e0\u4e3a\u8fd9\u662fPython\u5b98\u65b9\u7684\u8bf4\u6cd5\u3002\u6709\u89c2\u70b9\u8ba4\u4e3aPython\u4e0d\u5b58\u5728\u53d8\u91cf\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4e5f\u6709\u89c2\u70b9\u8ba4\u4e3aPython\u5b58\u5728\u53d8\u91cf\u7684\u6982\u5ff5\uff08\u5373name\uff09\uff0c\u53ea\u4e0d\u8fc7Python\u7684\u53d8\u91cf\u7684\u884c\u4e3a\u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u6709\u6240\u533a\u522b\u3002\u5728\u8fd9\u91cc\u5bf9\u6b64\u4e0d\u4f5c\u6df1\u5165\u63a2\u7a76\uff0c\u5728\u672c\u7cfb\u5217\u7684\u6587\u7ae0\u4e2d\uff0c \u53d8\u91cf \u548c \u540d\u5b57\uff08name\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\uff1b \u53d8\u91cf\u503c\uff08\u53d8\u91cf\u7684\u503c\uff09 \u548c \u5bf9\u8c61\uff08object\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u53d8\u91cf\u4e0d\u9700\u8981\u58f0\u660e\u3001\u5b9a\u4e49\u548c\u521d\u59cb\u5316\uff0c\u53d8\u91cf\u4f1a\u5728\u8d4b\u503c\u65f6\u88ab\u521b\u5efa\u3002 Objects \u6240\u6709Python\u5bf9\u8c61\u90fd\u6709: \u4e00\u4e2a\u60df\u4e00\u7684 identity \uff08\u7531id(x)\u8fd4\u56de\u7684\u4e00\u4e2a\u6574\u6570\uff0c\u6ce8\u610f\uff1aidentity \u4e0d\u662f identifier\uff09 \u4e00\u4e2a\u7c7b\u578b\uff08\u7531type(x)\u8fd4\u56de\uff09 \u4e00\u4e9b\u503c \u65e0\u6cd5\u6539\u53d8\u5bf9\u8c61\u7684identity\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u6539\u53d8\u4f4d\u4e8e\u67d0\u4e00\u5730\u5740\u7684\u5bf9\u8c61\u7684\u5f15\u7528\u4e0e\u7c7b\u578b\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u53ea\u80fd\u628a\u5bf9\u8c61\u9500\u6bc1\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa\u3002 Note \u5728CPython2.2\u53ca\u66f4\u65b0\u7684\u7248\u672c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728\u76f8\u5f53\u6709\u9650\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u4e00\u4e9b\u5bf9\u8c61\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff08\u5728\u4e0d\u6539\u53d8\u5b83\u4eec\u7684identity\u548ctype\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u8fd9\u79cd\u5bf9\u8c61\u88ab\u79f0\u4e3a mutable object \uff1b\u800c\u4e00\u4e9b\u5bf9\u8c61\u5e76\u4e0d\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a immutable object \u3002 \u7c7b\u578b\u7531 \u7c7b\u5bf9\u8c61 \u8868\u793a\uff08\u7c7b\u5bf9\u8c61\u5f80\u5f80\u77e5\u9053\u7c7b\u7684\u5bf9\u8c61\u8981\u5360\u591a\u5c11\u5185\u5b58\uff0c\u6709\u4ec0\u4e48\u65b9\u6cd5\u7b49\u7b49\uff09\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6709\uff1a \u96f6\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff08\u7531\u7c7b\u5bf9\u8c61\u63d0\u4f9b\uff09 \u96f6\u4e2a\u6216\u591a\u4e2a \u540d\u5b57 \u67d0\u4e9b\u5bf9\u8c61\u5177\u6709\u5141\u8bb8\u4f60\u66f4\u6539\u5bf9\u8c61\u5185\u5bb9\uff08\u5373\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff09\u7684\u65b9\u6cd5\u3002\u67d0\u4e9b\u5bf9\u8c61\u4ec5\u5177\u6709\u5141\u8bb8\u60a8\u8bbf\u95ee\u5185\u5bb9\u800c\u4e0d\u66f4\u6539\u5185\u5bb9\u7684\u65b9\u6cd5\u3002\u4e00\u4e9b\u5bf9\u8c61\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u3002\u5373\u4f7f\u5bf9\u8c61\u5177\u6709\u65b9\u6cd5\uff0c\u4f60\u4e5f\u4e0d\u80fd\u6539\u53d8\u5b83\u4eec\u7684\u7c7b\u578b\u6216\u8005identity\u3002 Names name\u4e0d\u662fobject\u7684\u5c5e\u6027\uff0cobject\u5e76\u4e0d\u77e5\u9053\u5b83\u4eec\u7684name\uff08\u540d\u5b57\uff09\u3002 \u6240\u6709name\u5728\u521b\u5efa\u65f6\u5fc5\u987b\u5173\u8054\uff08bind\uff09\u5230\u4e00\u4e2aobject\uff0c\u5426\u5219\u5728\u9700\u8981\u5f15\u7528\u8be5name\u65f6\u4f1a\u62a5\u9519\u3002 name\u53ef\u4ee5\u5728\u521b\u5efa\u4ee5\u540e\u6307\u5411\u4efb\u4f55\u4e00\u4e2aobject\uff08\u5305\u62ec\u4e0d\u540c\u7c7b\u578b\uff09\uff0c\u6240\u4ee5name\u672c\u8eab\u6ca1\u6709\u7c7b\u522b\uff0c\u4f46name\u5173\u8054\u7684object\u662f\u6709\u7c7b\u522b\u7684\u3002 \u5728python\u4e2d\u53ef\u4ee5\u4f7f\u7528type\uff08name\uff09\u6765\u67e5\u770bname\u5173\u8054\u7684object\u7684\u7c7b\u578b\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5173\u8054\uff08bind\uff09\u591a\u4e2a\u540d\u5b57\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u540d\u5b57\u3002 Name\u5b58\u5728\u4e8enamespace\uff08\u547d\u540d\u7a7a\u95f4\uff09\uff0c\u4f8b\u5982\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u3001\u5b9e\u4f8b\u547d\u540d\u7a7a\u95f4\u3001\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7b49\u7b49\u3002 assignment Python\u4e5f\u6709assignment\u8fd9\u4e2a\u6982\u5ff5\uff0c\u5b83\u7684\u4e2d\u6587\u6216\u8bb8\u8bd1\u4e3a \u5206\u914d \u6216\u8005 \u547d\u540d \u66f4\u4e3a\u6070\u5f53\uff0c\u56e0\u4e3a\u5728Python\u4e2d\uff0cassignment\u8bed\u53e5\u4f1a\u6539\u52a8namespace\uff0c\u800c\u4e0d\u662f\u6539\u52a8\u4e86object\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u5728python\u4e2d\u6709\u4e00\u4e2aassignment statement\u5982\u4e0b\uff1a a = 10 \u8fd9\u4e2aassignment\u8bed\u53e5\u8868\u793a\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4e14namespace\u7684 a \u952e 2 \u6240\u5bf9\u5e94\u7684value\u4e3a10\u3002 \u5982\u679c\u540d\u79f0\u5df2\u7ecf\u5b58\u5728\uff0cassignment\u8bed\u53e5\u5c06\u66ff\u6362\u539f\u59cb\u540d\u79f0\uff1a a = 10 a = 20 \u8fd9\u610f\u5473\u7740\u9996\u5148\u8981\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4f7f\u5176\u6307\u5411\u5305\u542b\u503c10\u7684\u6574\u6570\u5bf9\u8c61\u3002\u7136\u540e\u518d\u4f7f a \u5176\u6307\u5411\u5305\u542b\u503c20\u7684\u6574\u6570\u5bf9\u8c61\u3002\u539f\u6765\u7684\u6574\u6570\u5bf9\u8c6110\u4e0d\u53d7\u6b64\u64cd\u4f5c\u7684\u5f71\u54cd\u3002 \u5982\u679c\u8fd9\u6837\u505a\uff1a a = [] a . append \uff08 1 \uff09 \u7b2c\u4e00\u6761\u8bed\u53e5\u5c06 a \u5173\u8054\u5230\u4e00\u4e2a\u7a7a\u5217\u8868\u5bf9\u8c61\uff0c\u8fd9\u4f1a\u4fee\u6539\u547d\u540d\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u6761\u8bed\u53e5\u4fee\u6539\u4e86\u8be5\u5217\u8868\u7684\u5185\u5bb9\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u89e6\u53canamespace\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0cassignment statement\u5728python\u4e2d\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a \u7528\u4e8e\uff08\u91cd\u65b0\uff09\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5bf9\u8c61 \u4fee\u6539\u53ef\u53d8\u5bf9\u8c61\u7684\u5c5e\u6027\uff08\u5185\u5bb9\uff09 \u5355\u5f15\u53f7\u4e0e\u53cc\u5f15\u53f7 \u5728Python\u4e2d\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a str1 = 'python' str2 = \"python\" str1\u548cstr2\u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684\u3002 Python\u4ee5\u5176\u6613\u7528\u6027\u800c\u8457\u540d\uff0c\u4f46\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u5374\u4e0d\u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002\u60f3\u60f3\u4e0b\u9762\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5e94\u8be5\u600e\u4e48\u5b9a\u4e49\uff1f I'm a big fans of Python. \u53ef\u4ee5\u8fd9\u6837\u5199\uff1a str3 = 'I \\' m a big fan of Python.' \u90a3\u4e48 We all know that 'A' and 'B' are two capital letters. \u53c8\u8be5\u600e\u4e48\u5b9a\u4e49\u5462\uff1f str4 = 'We all know that \\' A \\' and \\' B \\' are two capital letters.' \u663e\u7136\u592a\u591a\u7684\u8f6c\u4e49\u7b26\u770b\u8d77\u6765\u5e76\u4e0d\u597d\u770b\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u9519\u3002\u90a3\u4e48\uff0c\u5728Python\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a str4 = \"We all know that 'A' and 'B' are two capital letters.\" \u663e\u7136\u8fd9\u6837\u66f4\u4eba\u6027\u5316\uff0c\u8fd9\u5c31\u662fPython\u652f\u6301\u53cc\u5f15\u53f7\u548c\u5355\u5f15\u53f7\u90fd\u80fd\u7528\u6765\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u6709\u53cc\u5f15\u53f7\uff0c\u4e3a\u4e86\u907f\u514d\u4f7f\u7528\u8f6c\u4e49\u7b26\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\u6765\u5b9a\u4e49\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u6bd4\u5982\uff1a str5 = 'The teacher said: \"Practice makes perfect\" is a very famous proverb.' \u8fd9\u5c31\u662fPython\u6613\u7528\u6027\u548c\u4eba\u6027\u5316\u7684\u4e00\u4e2a\u4f53\u73b0\uff0c\u5f53\u4f60\u7528\u5355\u5f15\u53f7 ' ' \u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u8ba4\u4e3a\u4f60\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u53cc\u5f15\u53f7 \" \" \u662f\u666e\u901a\u5b57\u7b26\uff0c\u4ece\u800c\u4e0d\u9700\u8981\u8f6c\u4e49\u3002\u53cd\u4e4b\uff0c\u5f53\u4f60\u7528\u53cc\u5f15\u53f7\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8ba4\u4e3a\u4f60\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u5355\u5f15\u53f7\u662f\u666e\u901a\u5b57\u7b26\u65e0\u9700\u8f6c\u4e49\u3002 \u8fdb\u5236\u6570\u8868\u793a 0b \u5f00\u5934\u8868\u793a\u4e8c\u8fdb\u5236\u6570\uff1a 0b10 2 0o \u5f00\u5934\u8868\u793a\u516b\u8fdb\u5236\u6570\uff1a 0o10 8 0x \u5f00\u5934\u8868\u793a\u5341\u516d\u8fdb\u5236\u6570\uff1a 0x10 16 Lambdas \u6b63\u5e38\u521b\u5efa\u51fd\u6570\uff08\u4f7f\u7528 def \uff09\u4f1a\u81ea\u52a8\u5c06\u51fd\u6570\u5bf9\u8c61\u4e0e def \u540e\u9762\u7684\u540d\u5b57\u8fdb\u884c\u7ed1\u5b9a\uff0c\u8fd9\u4e0e\u521b\u5efa\u5176\u4ed6\u5bf9\u8c61\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u548c\u6574\u6570\uff09\u4e0d\u540c\uff0c\u540e\u8005\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\uff0c\u800c\u65e0\u9700\u5c06\u5b83\u4eec\u5206\u914d\u7ed9\u540d\u5b57\u3002\u4f46\u53ea\u8981\u4f7f\u7528lambda\u8bed\u6cd5\u521b\u5efa\u51fd\u6570\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\u51fd\u6570\u79f0\u4e3a\u533f\u540d\uff08anonymous\uff09\u51fd\u6570\u3002\u5c06\u7b80\u5355\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6700\u5e38\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a # my_func\u662f\u6b63\u5e38\u521b\u5efa\u7684\u51fd\u6570\uff08named function\uff09 def my_func ( f , arg ): return f ( arg ) my_func ( lambda x : 2 * x * x , 5 ) 50 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u52a8\u6001\u521b\u5efa\u4e86\u4e00\u4e2a\u533f\u540d\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u53c2\u6570\u8c03\u7528\u5b83\u3002Lambda\u51fd\u6570\u6ca1\u6709\u547d\u540d\u51fd\u6570\uff08named function\uff09\u90a3\u4e48\u5f3a\u5927\u3002Lambda\u51fd\u6570\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u901a\u5e38\u76f8\u5f53\u4e8e\u4e00\u884c\u4ee3\u7801\u3002\u5b9e\u9645\u4e0a\uff0cLambda\u51fd\u6570\u53ef\u4ee5\u5206\u914d\u7ed9\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u4f7f\u7528\u3002\u4f46\u662f\uff0c\u5f88\u5c11\u6709\u5145\u5206\u7684\u7406\u7531\u8fd9\u6837\u505a\u3002\u901a\u5e38\u4f7f\u7528 def \u6765\u5b9a\u4e49\u51fd\u6570\u66f4\u597d\u3002 double = lambda x : x * 2 print ( double ( 7 )) 14 \u8fd0\u7b97\u7b26 \u7b97\u672f\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 + \u52a0 - \u51cf * \u4e58 / \u9664 % \u53d6\u6a21 ** \u5e42 // \u53d6\u6574\u9664 \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e < \u5c0f\u4e8e >= \u5927\u4e8e\u7b49\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e \u8d4b\u503c\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 << \u5de6\u79fb\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u7531 << \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb\u8fd0\u7b97\u7b26\uff1a\u628a > \u5de6\u8fb9\u7684\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c >> \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570 & \u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1\uff0c\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1\uff0c\u5426\u5219\u4e3a0 | \u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1 ^ \u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 ~ \u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\uff0c\u5373\u628a1\u53d8\u4e3a0\uff0c\u628a0\u53d8\u4e3a1\u3002 ~x \u7c7b\u4f3c\u4e8e -x-1 \u5de6\u79fb\u548c\u53f3\u79fb\u7684\u610f\u601d\u5c31\u662f\u628a\u4f4d\u6570\u6574\u4f53\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u82e5\u5e72\u4f4d\u3002\u6bd4\u59821111\u5411\u53f3\u79fb\u4e00\u4f4d\u5c31\u53d8\u6210\u4e860111\uff0c\u539f\u6765\u6ca1\u6709\u7684\u4f4d\u81ea\u52a8\u586b0\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u4f4d\u820d\u5f03\u6389\u3002\u770b\u51e0\u4e2a\u4f8b\u5b50\uff1a print ( 0b1111 >> 1 ) print (( 0b1111 >> 1 ) is 0b111 is 7 ) 7 True print ( 0b1010 << 2 ) print (( 0b1010 << 2 ) is 0b101000 is 40 ) 40 True \u5982\u679c\u4f7f\u7528\u5341\u8fdb\u5236\uff08\u6216\u8005\u5176\u4ed6\u8fdb\u5236\u6570\uff09\uff0c\u4e5f\u662f\u5bf9\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8fdb\u884c\u79fb\u4f4d\uff1a print ( 0b1111 is 15 ) print (( 15 >> 1 ) is 7 is 0b111 ) True True \u5176\u4ed6\u6309\u4f4d\u8fd0\u7b97\u7b26\u7684\u4f8b\u5b50\uff1a print (( 0b1111 & 0b1010 ) is 0b1010 is 10 ) print (( 0b1111 | 0b1010 ) is 0b1111 is 15 ) print (( 0b1111 ^ 0b1010 ) is 0b0101 is 5 ) print (( ~ 0b1010 ) is ( - 0b1010 - 1 ) is - 11 ) True True True True \u5982\u679c\u4f7f\u7528\u5341\u8fdb\u5236\uff08\u6216\u8005\u5176\u4ed6\u8fdb\u5236\u6570\uff09\uff0c\u4e5f\u662f\u5bf9\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8fdb\u884c\u79fb\u4f4d\uff1a print (( 15 & 10 ) is 0b1010 is 10 ) print (( 15 | 10 ) is 0b1111 is 15 ) print (( 15 ^ 10 ) is 0b0101 is 5 ) print (( ~ 10 ) is ( - 10 - 1 ) is - 0b1011 ) True True True True \u903b\u8f91\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u903b\u8f91\u8868\u8fbe\u5f0f \u63cf\u8ff0 and x and y x\u3001y\u540c\u65f6\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 or x or y x\u3001y\u4e24\u8005\u6709\u4e00\u4e2a\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 not not x x\u4e3a\u771f\uff0c\u7ed3\u679c\u4e3a\u5047\uff1bx\u4e3a\u5047\uff0c\u7ed3\u679c\u4e3a\u771f \u6210\u5458\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False \u8eab\u4efd\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b) \u3002\u5982\u679c\u5f15\u7528\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u4f18\u5148\u7ea7 {key:value, ...} \u5b57\u5178\u663e\u793a 16 [...] \u5217\u8868\u663e\u793a 16 (...) \u5c06\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6216\u5143\u7ec4\u663e\u793a 16 x[index]\u3001x[index1:index2]\u3001f(args...)\u3001x.attribute \u5143\u7d20\u8bbf\u95ee\u3001\u5207\u7247\u3001\u51fd\u6570\u8c03\u7528\u3001\u5c5e\u6027\u5f15\u7528 15 ** \u5e42\u8fd0\u7b97 14 ~ \u6309\u4f4d\u6c42\u8865 13 *\u3001/\u3001//\u3001%\u3001@ \u4e58\u3001\u9664\u3001\u53d6\u6574\u3001\u53d6\u6a21 12 +\u3001- \u52a0\u3001\u51cf 11 <<\u3001>> \u5de6\u79fb\u4f4d\u3001\u53f3\u79fb\u4f4d 10 & \u6309\u4f4d\u4e0e 9 ^ \u6309\u4f4d\u5f02\u6216 8 | \u6309\u4f4d\u6216 7 <\u3001<=\u3001>\u3001>=\u3001==\u3001!= \u6bd4\u8f83\u8fd0\u7b97\u7b26 6 is\u3001is not \u8eab\u4efd\u8fd0\u7b97\u7b26 6 in\u3001not in \u6210\u5458\u8fd0\u7b97\u7b26 6 not \u903b\u8f91\u8fd0\u7b97\u7b26 5 and \u903b\u8f91\u8fd0\u7b97\u7b26 4 or \u903b\u8f91\u8fd0\u7b97\u7b26 3 if - else \u6761\u4ef6\u8868\u8fbe\u5f0f 2 lambda Lambda \u8868\u8fbe\u5f0f 1 \u5177\u6709\u76f8\u540c\u4f18\u5148\u7ea7\u7684\u8fd0\u7b97\u7b26\u5c06\u4ece\u5de6\u81f3\u53f3\u7684\u65b9\u5f0f\u4f9d\u6b21\u8fdb\u884c\u3002\u7528\u5c0f\u62ec\u53f7 () \u53ef\u4ee5\u6539\u53d8\u8fd0\u7b97\u987a\u5e8f\u3002 \u5305\u62ec\u51fd\u6570\u3001\u7c7b\u7684\u5b9a\u4e49\u3002 \u21a9 \u76ee\u524dPython\u7684\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u5b57\u5178\u5b9e\u73b0\uff0c\u4f46\u65e5\u540e\u53ef\u80fd\u4f1a\u6539\u53d8\u3002 \u21a9","title":"2.1.python\u57fa\u672c\u8bed\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_1","text":"Python\u662f\u4e00\u79cd\u89e3\u91ca\u578b\u8bed\u8a00\uff0cPython\u89e3\u91ca\u5668\u901a\u8fc7\u4e00\u6b21\u6267\u884c\u4e00\u6761\u8bed\u53e5\u7684\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u3002\u4ece tty\uff08\u7ec8\u7aef\uff09 \u8bfb\u53d6\u547d\u4ee4\u65f6, \u6211\u4eec\u79f0\u89e3\u91ca\u5668\u5de5\u4f5c\u4e8e\u4ea4\u4e92\u6a21\u5f0f (interactive mode)\u3002\u6240\u8c13\u7684\u4ea4\u4e92\u6a21\u5f0f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u5728\u7ec8\u7aef\u8f93\u5165\u7684Python\u8bed\u53e5\u4f1a\u7acb\u5373\u88ab\u6267\u884c\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u7ec8\u7aef\u663e\u793a\u63d0\u793a\u7b26\u3002\u7b49\u5f85\u4e0b\u4e00\u6b21\u547d\u4ee4\u7684\u8f93\u5165\u3002\u53ef\u4ee5\u5728cmd\u7a97\u53e3\u901a\u8fc7 python \u547d\u4ee4\u542f\u52a8CPython\u89e3\u91ca\u5668\u7684\u4ea4\u4e92\u6a21\u5f0f\uff0c\u4ea4\u4e92\u6a21\u5f0f\u4e0bCPython\u901a\u8fc7\u4e3b\u63d0\u793a\u7b26 (primary prompt) >>> \u63d0\u793a\u4e0b\u4e00\u6761\u547d\u4ee4\uff0c\u800c\u4ece\u63d0\u793a\u7b26 \u00b7\u00b7\u00b7 \u63d0\u793a\u4e00\u6761\u547d\u4ee4\u7684\u7eed\u884c\u3002 \u52a0\u5f3a\u7684\u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668(IPython)\u7684\u63d0\u793a\u7b26\u662f\u4e00\u79cd\u5e26\u7f16\u53f7\u7684\u98ce\u683c\uff0c\u5982 In[2] \uff0c\u800c\u4e0d\u662f\u6807\u51c6\u7684 >>> \u3002","title":"\u4ea4\u4e92\u6a21\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#python","text":"\u4fdd\u7559\u5b57\uff08\u53c8\u79f0\u4e3a\u5173\u952e\u5b57\uff09\uff0c \u4e0d\u80fd\u628a\u5b83\u4eec\u7528\u4f5c\u4efb\u4f55\u6807\u8bc6\u7b26\u540d\u79f0 \u3002Python\u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2akeyword\u6a21\u5757\uff0c\u53ef\u4ee5\u8f93\u51fa\u5f53\u524d\u7248\u672c\u7684\u6240\u6709\u5173\u952e\u5b57\uff1a import keyword keyword . kwlist print ( keyword . kwlist ) ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']","title":"Python\u4fdd\u7559\u5b57"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_2","text":"Python\u4e2d\u5355\u884c\u6ce8\u91ca\u4ee5 # \u5f00\u5934\u3002\u591a\u884c\u6ce8\u91ca\u5219\u4f7f\u7528\uff1a ''' \u6216\u8005 \"\"\" \u3002\u5b9e\u9645\u4e0apython\u53ea\u6709\u5355\u884c\u6ce8\u91ca\u3002\u591a\u884c\u6ce8\u91ca\u7684\u672c\u8d28\u662f\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 # \u8fd9\u662f\u5355\u884c\u6ce8\u91ca ''' \u8fd9\u662f\u591a\u884c\u6ce8\u91ca \u8fd9\u662f\u591a\u884c\u6ce8\u91ca '''","title":"\u6ce8\u91ca"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_3","text":"python\u6700\u5177\u7279\u8272\u7684\u5c31\u662f\u4f7f\u7528\u7f29\u8fdb\u6765\u8868\u793a\u4ee3\u7801\u5757\uff0c\u4e0d\u662f\u4f7f\u7528\u5927\u62ec\u53f7{}\u3002\u800c\u5192\u53f7\u8868\u793a\u4e00\u6bb5\u7f29\u8fdb\u4ee3\u7801\u5757\u7684\u5f00\u59cb\uff0c \u5176\u540e\u6240\u6709\u76f8\u540c\u5c42\u6b21\u7684\u4ee3\u7801\u5fc5\u987b\u4fdd\u6301\u76f8\u540c\u7684\u7f29\u8fdb\u91cf\uff0c \u7f29\u8fdb\u91cf\u5219\u53ef\u4ee5\u968f\u610f\uff0c\u76f4\u81f3\u4ee3\u7801\u5757\u7ed3\u675f\u3002 \u4e00\u822c\u7ea6\u5b9a\u4fd7\u6210\u4f7f\u75284\u4e2a\u7a7a\u683c\u7684\u7f29\u8fdb\u3002 if True : print ( \"True\" ) else : print ( \"False\" ) True","title":"\u4ee3\u7801\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_4","text":"\u5982\u679c\u8bed\u53e5\u5f88\u957f\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u6760 \\ \u6765\u7eed\u884c\uff0c\u4f8b\u5982\uff1a a = 3 + \\ 4 + \\ 5 a 12 \u5728 [] , {} , \u6216 () \u4e2d\u7684\u591a\u884c\u8bed\u53e5 1 \uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u53cd\u659c\u6760 \\ \uff0c\u4f8b\u5982\uff1a total = [ 'item_one' , 'item_two' , 'item_three' , 'item_four' , 'item_five' ] total ['item_one', 'item_two', 'item_three', 'item_four', 'item_five']","title":"\u4ee3\u7801\u7eed\u884c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_5","text":"Python\u53ef\u4ee5\u5728\u540c\u4e00\u884c\u4e2d\u4f7f\u7528\u591a\u6761\u8bed\u53e5\uff0c\u8bed\u53e5\u4e4b\u95f4\u4f7f\u7528\u534a\u89d2\u5206\u53f7 ; \u5206\u9694\u3002\u4f46\u8fd9\u6837\u7684\u505a\u6cd5\u4e00\u822c\u4e0d\u63a8\u8350\uff0c\u56e0\u4e3a\u4f1a\u4f7f\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u53d8\u5dee\u3002","title":"\u540c\u4e00\u884c\u4e66\u5199\u591a\u6761\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_6","text":"\u51fd\u6570\u3001\u7c7b\u65b9\u6cd5\u4e4b\u95f4\u7528\u7a7a\u884c\u5206\u9694\uff0c\u8868\u793a\u4e00\u6bb5\u65b0\u7684\u4ee3\u7801\u7684\u5f00\u59cb\u3002\u7c7b\u548c\u51fd\u6570\u5165\u53e3\u4e4b\u95f4\u4e5f\u7528\u4e00\u884c\u7a7a\u884c\u5206\u9694\uff0c\u4ee5\u7a81\u51fa\u51fd\u6570\u5165\u53e3\u7684\u5f00\u59cb\u3002\u7a7a\u884c\u4e0e\u4ee3\u7801\u7f29\u8fdb\u4e0d\u540c\uff0c \u7a7a\u884c\u5e76\u4e0d\u662fPython\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 \u4e66\u5199\u65f6\u4e0d\u63d2\u5165\u7a7a\u884c\uff0cPython\u89e3\u91ca\u5668\u8fd0\u884c\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u4f46\u662f\u7a7a\u884c\u7684\u4f5c\u7528\u5728\u4e8e\u5206\u9694\u4e24\u6bb5\u4e0d\u540c\u529f\u80fd\u6216\u542b\u4e49\u7684\u4ee3\u7801\uff0c\u4fbf\u4e8e\u65e5\u540e\u4ee3\u7801\u7684\u7ef4\u62a4\u6216\u91cd\u6784\u3002\u7a7a\u884c\u4e5f\u662f\u7a0b\u5e8f\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002","title":"\u7a7a\u884c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#print","text":"print\u51fd\u6570\u9ed8\u8ba4\u8f93\u51fa\u662f\u6362\u884c\u7684\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4e0d\u6362\u884c\u6253\u5370\uff0c\u9700\u8981\u66f4\u6539print\u51fd\u6570\u7684 end \u53c2\u6570\uff1a # \u6362\u884c\u8f93\u51fa print ( \"a\" ) print ( \"b\" ) print ( '-' * 10 ) # \u4e0d\u6362\u884c\u8f93\u51fa print ( \"a\" , end = \" \" ) print ( \"b\" , end = \" \" ) a b ---------- a b","title":"Print \u8f93\u51fa"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_7","text":"\u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757 ( module ) \u5bfc\u5165\uff1a import somemodule \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570\uff1a from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570\uff1a from somemodule import firstfunc , secondfunc , thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165\uff1a from somemodule import *","title":"\u5bfc\u5165\u6a21\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_8","text":"\u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u4e2d\u8f93\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\uff08\u8fd9\u4e9b\u5b57\u7b26\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\uff09\uff0c\u8fd9\u5c31\u9700\u8981\u201c\u8f6c\u4e49\u7b26\u201d\u3002\u6240\u8c13\u8f6c\u4e49\uff0c\u5c31\u662f\u4e0d\u91c7\u7528\u7b26\u53f7\u539f\u5148\u7684\u542b\u4e49\uff0c\u800c\u91c7\u7528\u53e6\u5916\u4e00\u542b\u4e49\u3002\u5728Pyhton\u4e2d\uff0c \\ \u4ee3\u8868\u8f6c\u4e49\u7b26\u3002 \u4e0b\u9762\u8868\u683c\u4e2d\u5217\u51fa\u5e38\u7528\u7684\u8f6c\u4e49\u7b26\uff1a \u8f6c\u4e49\u5b57\u7b26 \u63cf\u8ff0 \\ \u5728\u5b57\u7b26\u4e32\u884c\u5c3e\u7684\u7eed\u884c\u7b26 \\\\ \u53cd\u659c\u6760\u7b26\u53f7 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u8702\u9e23\u5668\u54cd\u94c3\uff08\u4e0d\u662f\u5587\u53ed\u53d1\u58f0\uff09\uff0c\u73b0\u5728\u7684\u8ba1\u7b97\u673a\u5f88\u591a\u90fd\u4e0d\u5e26\u8702\u9e23\u5668\u4e86\uff0c\u6240\u4ee5\u54cd\u94c3\u4e0d\u4e00\u5b9a\u6709\u6548 \\b \u9000\u683c\uff08Backspace\uff09\uff0c\u5c06\u5149\u6807\u4f4d\u7f6e\u79fb\u5230\u524d\u4e00\u5217 \\e \u8f6c\u4e49 \\000 \u7a7a \\n \u6362\u884c\u7b26 \\v \u7eb5\u5411\u5236\u8868\u7b26 \\t \u6a2a\u5411\u5236\u8868\u7b26\uff0c\u5373 Tab \u952e\uff0c\u4e00\u822c\u76f8\u5f53\u4e8e\u56db\u4e2a\u7a7a\u683c \\r \u56de\u8f66\u7b26 \\f \u6362\u9875 \\oyy \u516b\u8fdb\u5236\u6570\uff0cyy\u4ee3\u8868\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a \\o12 \u4ee3\u8868\u6362\u884c \\xyy \u5341\u516d\u8fdb\u5236\u6570\uff0cyy\u4ee3\u8868\u5b57\u7b26\uff0c\u4f8b\u5982\uff1a \\x0a \u4ee3\u8868\u6362\u884c \\other \u5176\u5b83\u7684\u5b57\u7b26\u4ee5\u666e\u901a\u683c\u5f0f\u8f93\u51fa \u6709\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u5305\u542b\u4e86\u5f88\u591a \\ \uff0cPython\u9ed8\u8ba4\u5c06 \\ \u4f5c\u4e3a\u8f6c\u4e49\u7b26\u5904\u7406\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u60f3\u8f93\u51fa\u7684\u662f\u53cd\u659c\u6760\u7b26\u53f7 \\ \uff0c\uff08\u4f8b\u5982\u8f93\u5165\u6587\u4ef6\u8def\u5f84\uff09\u3002\u6b64\u65f6\uff0c\u81ea\u7136\u53ef\u4ee5\u5728\u53cd\u659c\u6760\u524d\u52a0\u4e0a\u8f6c\u4e49\u7b26 \\ \uff0c\u4f46\u662f\u8fd9\u6837\u672a\u514d\u592a\u9ebb\u70e6\u3002Python\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5316\u7684\u64cd\u4f5c\uff0cPyhon\u5141\u8bb8\u7528 r'\u5b57\u7b26\u4e32\u5185\u5bb9' \u8868\u793a '\u5b57\u7b26\u4e32\u5185\u5bb9' \u5185\u90e8\u7684\u5b57\u7b26\u4e32\u9ed8\u8ba4\u4e0d\u8f6c\u4e49\uff1a print ( ' \\\\\\t\\\\ ' ) print ( '-' * 10 ) print ( r ' \\\\ \\t \\\\ ' ) \\ \\ ---------- \\\\\\t\\\\","title":"\u8f6c\u4e49\u7b26\uff1a\\"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#nameobject","text":"\u63d0\u5230\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e38\u5e38\u4f1a\u63d0\u8d77\u53d8\u91cf\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u5728Python\u4e2d\uff0c\u53d8\u91cf\u4e00\u8bcd\u66f4\u51c6\u786e\u7684\u8bf4\u6cd5\u5e94\u8be5\u662fname\uff08\u540d\u5b57\uff09\uff0c\u56e0\u4e3a\u8fd9\u662fPython\u5b98\u65b9\u7684\u8bf4\u6cd5\u3002\u6709\u89c2\u70b9\u8ba4\u4e3aPython\u4e0d\u5b58\u5728\u53d8\u91cf\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4e5f\u6709\u89c2\u70b9\u8ba4\u4e3aPython\u5b58\u5728\u53d8\u91cf\u7684\u6982\u5ff5\uff08\u5373name\uff09\uff0c\u53ea\u4e0d\u8fc7Python\u7684\u53d8\u91cf\u7684\u884c\u4e3a\u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u6709\u6240\u533a\u522b\u3002\u5728\u8fd9\u91cc\u5bf9\u6b64\u4e0d\u4f5c\u6df1\u5165\u63a2\u7a76\uff0c\u5728\u672c\u7cfb\u5217\u7684\u6587\u7ae0\u4e2d\uff0c \u53d8\u91cf \u548c \u540d\u5b57\uff08name\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\uff1b \u53d8\u91cf\u503c\uff08\u53d8\u91cf\u7684\u503c\uff09 \u548c \u5bf9\u8c61\uff08object\uff09 \u5177\u6709\u7b49\u540c\u7684\u5185\u6db5\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u53d8\u91cf\u4e0d\u9700\u8981\u58f0\u660e\u3001\u5b9a\u4e49\u548c\u521d\u59cb\u5316\uff0c\u53d8\u91cf\u4f1a\u5728\u8d4b\u503c\u65f6\u88ab\u521b\u5efa\u3002","title":"name\u4e0eobject"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#objects","text":"\u6240\u6709Python\u5bf9\u8c61\u90fd\u6709: \u4e00\u4e2a\u60df\u4e00\u7684 identity \uff08\u7531id(x)\u8fd4\u56de\u7684\u4e00\u4e2a\u6574\u6570\uff0c\u6ce8\u610f\uff1aidentity \u4e0d\u662f identifier\uff09 \u4e00\u4e2a\u7c7b\u578b\uff08\u7531type(x)\u8fd4\u56de\uff09 \u4e00\u4e9b\u503c \u65e0\u6cd5\u6539\u53d8\u5bf9\u8c61\u7684identity\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u6539\u53d8\u4f4d\u4e8e\u67d0\u4e00\u5730\u5740\u7684\u5bf9\u8c61\u7684\u5f15\u7528\u4e0e\u7c7b\u578b\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u53ea\u80fd\u628a\u5bf9\u8c61\u9500\u6bc1\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa\u3002 Note \u5728CPython2.2\u53ca\u66f4\u65b0\u7684\u7248\u672c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728\u76f8\u5f53\u6709\u9650\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u4e00\u4e9b\u5bf9\u8c61\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff08\u5728\u4e0d\u6539\u53d8\u5b83\u4eec\u7684identity\u548ctype\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u8fd9\u79cd\u5bf9\u8c61\u88ab\u79f0\u4e3a mutable object \uff1b\u800c\u4e00\u4e9b\u5bf9\u8c61\u5e76\u4e0d\u5141\u8bb8\u4f60\u6539\u53d8\u5b83\u4eec\u7684\u503c\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a immutable object \u3002 \u7c7b\u578b\u7531 \u7c7b\u5bf9\u8c61 \u8868\u793a\uff08\u7c7b\u5bf9\u8c61\u5f80\u5f80\u77e5\u9053\u7c7b\u7684\u5bf9\u8c61\u8981\u5360\u591a\u5c11\u5185\u5b58\uff0c\u6709\u4ec0\u4e48\u65b9\u6cd5\u7b49\u7b49\uff09\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6709\uff1a \u96f6\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff08\u7531\u7c7b\u5bf9\u8c61\u63d0\u4f9b\uff09 \u96f6\u4e2a\u6216\u591a\u4e2a \u540d\u5b57 \u67d0\u4e9b\u5bf9\u8c61\u5177\u6709\u5141\u8bb8\u4f60\u66f4\u6539\u5bf9\u8c61\u5185\u5bb9\uff08\u5373\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff09\u7684\u65b9\u6cd5\u3002\u67d0\u4e9b\u5bf9\u8c61\u4ec5\u5177\u6709\u5141\u8bb8\u60a8\u8bbf\u95ee\u5185\u5bb9\u800c\u4e0d\u66f4\u6539\u5185\u5bb9\u7684\u65b9\u6cd5\u3002\u4e00\u4e9b\u5bf9\u8c61\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u3002\u5373\u4f7f\u5bf9\u8c61\u5177\u6709\u65b9\u6cd5\uff0c\u4f60\u4e5f\u4e0d\u80fd\u6539\u53d8\u5b83\u4eec\u7684\u7c7b\u578b\u6216\u8005identity\u3002","title":"Objects"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#names","text":"name\u4e0d\u662fobject\u7684\u5c5e\u6027\uff0cobject\u5e76\u4e0d\u77e5\u9053\u5b83\u4eec\u7684name\uff08\u540d\u5b57\uff09\u3002 \u6240\u6709name\u5728\u521b\u5efa\u65f6\u5fc5\u987b\u5173\u8054\uff08bind\uff09\u5230\u4e00\u4e2aobject\uff0c\u5426\u5219\u5728\u9700\u8981\u5f15\u7528\u8be5name\u65f6\u4f1a\u62a5\u9519\u3002 name\u53ef\u4ee5\u5728\u521b\u5efa\u4ee5\u540e\u6307\u5411\u4efb\u4f55\u4e00\u4e2aobject\uff08\u5305\u62ec\u4e0d\u540c\u7c7b\u578b\uff09\uff0c\u6240\u4ee5name\u672c\u8eab\u6ca1\u6709\u7c7b\u522b\uff0c\u4f46name\u5173\u8054\u7684object\u662f\u6709\u7c7b\u522b\u7684\u3002 \u5728python\u4e2d\u53ef\u4ee5\u4f7f\u7528type\uff08name\uff09\u6765\u67e5\u770bname\u5173\u8054\u7684object\u7684\u7c7b\u578b\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5173\u8054\uff08bind\uff09\u591a\u4e2a\u540d\u5b57\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u540d\u5b57\u3002 Name\u5b58\u5728\u4e8enamespace\uff08\u547d\u540d\u7a7a\u95f4\uff09\uff0c\u4f8b\u5982\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u3001\u5b9e\u4f8b\u547d\u540d\u7a7a\u95f4\u3001\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7b49\u7b49\u3002","title":"Names"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#assignment","text":"Python\u4e5f\u6709assignment\u8fd9\u4e2a\u6982\u5ff5\uff0c\u5b83\u7684\u4e2d\u6587\u6216\u8bb8\u8bd1\u4e3a \u5206\u914d \u6216\u8005 \u547d\u540d \u66f4\u4e3a\u6070\u5f53\uff0c\u56e0\u4e3a\u5728Python\u4e2d\uff0cassignment\u8bed\u53e5\u4f1a\u6539\u52a8namespace\uff0c\u800c\u4e0d\u662f\u6539\u52a8\u4e86object\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u5728python\u4e2d\u6709\u4e00\u4e2aassignment statement\u5982\u4e0b\uff1a a = 10 \u8fd9\u4e2aassignment\u8bed\u53e5\u8868\u793a\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4e14namespace\u7684 a \u952e 2 \u6240\u5bf9\u5e94\u7684value\u4e3a10\u3002 \u5982\u679c\u540d\u79f0\u5df2\u7ecf\u5b58\u5728\uff0cassignment\u8bed\u53e5\u5c06\u66ff\u6362\u539f\u59cb\u540d\u79f0\uff1a a = 10 a = 20 \u8fd9\u610f\u5473\u7740\u9996\u5148\u8981\u5c06\u540d\u79f0 a \u6dfb\u52a0\u5230namespace\uff0c\u5e76\u4f7f\u5176\u6307\u5411\u5305\u542b\u503c10\u7684\u6574\u6570\u5bf9\u8c61\u3002\u7136\u540e\u518d\u4f7f a \u5176\u6307\u5411\u5305\u542b\u503c20\u7684\u6574\u6570\u5bf9\u8c61\u3002\u539f\u6765\u7684\u6574\u6570\u5bf9\u8c6110\u4e0d\u53d7\u6b64\u64cd\u4f5c\u7684\u5f71\u54cd\u3002 \u5982\u679c\u8fd9\u6837\u505a\uff1a a = [] a . append \uff08 1 \uff09 \u7b2c\u4e00\u6761\u8bed\u53e5\u5c06 a \u5173\u8054\u5230\u4e00\u4e2a\u7a7a\u5217\u8868\u5bf9\u8c61\uff0c\u8fd9\u4f1a\u4fee\u6539\u547d\u540d\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u6761\u8bed\u53e5\u4fee\u6539\u4e86\u8be5\u5217\u8868\u7684\u5185\u5bb9\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u89e6\u53canamespace\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0cassignment statement\u5728python\u4e2d\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a \u7528\u4e8e\uff08\u91cd\u65b0\uff09\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5bf9\u8c61 \u4fee\u6539\u53ef\u53d8\u5bf9\u8c61\u7684\u5c5e\u6027\uff08\u5185\u5bb9\uff09","title":"assignment"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_9","text":"\u5728Python\u4e2d\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a str1 = 'python' str2 = \"python\" str1\u548cstr2\u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684\u3002 Python\u4ee5\u5176\u6613\u7528\u6027\u800c\u8457\u540d\uff0c\u4f46\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u5374\u4e0d\u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002\u60f3\u60f3\u4e0b\u9762\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5e94\u8be5\u600e\u4e48\u5b9a\u4e49\uff1f I'm a big fans of Python. \u53ef\u4ee5\u8fd9\u6837\u5199\uff1a str3 = 'I \\' m a big fan of Python.' \u90a3\u4e48 We all know that 'A' and 'B' are two capital letters. \u53c8\u8be5\u600e\u4e48\u5b9a\u4e49\u5462\uff1f str4 = 'We all know that \\' A \\' and \\' B \\' are two capital letters.' \u663e\u7136\u592a\u591a\u7684\u8f6c\u4e49\u7b26\u770b\u8d77\u6765\u5e76\u4e0d\u597d\u770b\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u9519\u3002\u90a3\u4e48\uff0c\u5728Python\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a str4 = \"We all know that 'A' and 'B' are two capital letters.\" \u663e\u7136\u8fd9\u6837\u66f4\u4eba\u6027\u5316\uff0c\u8fd9\u5c31\u662fPython\u652f\u6301\u53cc\u5f15\u53f7\u548c\u5355\u5f15\u53f7\u90fd\u80fd\u7528\u6765\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u6709\u53cc\u5f15\u53f7\uff0c\u4e3a\u4e86\u907f\u514d\u4f7f\u7528\u8f6c\u4e49\u7b26\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\u6765\u5b9a\u4e49\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u6bd4\u5982\uff1a str5 = 'The teacher said: \"Practice makes perfect\" is a very famous proverb.' \u8fd9\u5c31\u662fPython\u6613\u7528\u6027\u548c\u4eba\u6027\u5316\u7684\u4e00\u4e2a\u4f53\u73b0\uff0c\u5f53\u4f60\u7528\u5355\u5f15\u53f7 ' ' \u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u8ba4\u4e3a\u4f60\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u53cc\u5f15\u53f7 \" \" \u662f\u666e\u901a\u5b57\u7b26\uff0c\u4ece\u800c\u4e0d\u9700\u8981\u8f6c\u4e49\u3002\u53cd\u4e4b\uff0c\u5f53\u4f60\u7528\u53cc\u5f15\u53f7\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8ba4\u4e3a\u4f60\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u5355\u5f15\u53f7\u662f\u666e\u901a\u5b57\u7b26\u65e0\u9700\u8f6c\u4e49\u3002","title":"\u5355\u5f15\u53f7\u4e0e\u53cc\u5f15\u53f7"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_10","text":"0b \u5f00\u5934\u8868\u793a\u4e8c\u8fdb\u5236\u6570\uff1a 0b10 2 0o \u5f00\u5934\u8868\u793a\u516b\u8fdb\u5236\u6570\uff1a 0o10 8 0x \u5f00\u5934\u8868\u793a\u5341\u516d\u8fdb\u5236\u6570\uff1a 0x10 16","title":"\u8fdb\u5236\u6570\u8868\u793a"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#lambdas","text":"\u6b63\u5e38\u521b\u5efa\u51fd\u6570\uff08\u4f7f\u7528 def \uff09\u4f1a\u81ea\u52a8\u5c06\u51fd\u6570\u5bf9\u8c61\u4e0e def \u540e\u9762\u7684\u540d\u5b57\u8fdb\u884c\u7ed1\u5b9a\uff0c\u8fd9\u4e0e\u521b\u5efa\u5176\u4ed6\u5bf9\u8c61\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u548c\u6574\u6570\uff09\u4e0d\u540c\uff0c\u540e\u8005\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\uff0c\u800c\u65e0\u9700\u5c06\u5b83\u4eec\u5206\u914d\u7ed9\u540d\u5b57\u3002\u4f46\u53ea\u8981\u4f7f\u7528lambda\u8bed\u6cd5\u521b\u5efa\u51fd\u6570\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\u51fd\u6570\u79f0\u4e3a\u533f\u540d\uff08anonymous\uff09\u51fd\u6570\u3002\u5c06\u7b80\u5355\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6700\u5e38\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a # my_func\u662f\u6b63\u5e38\u521b\u5efa\u7684\u51fd\u6570\uff08named function\uff09 def my_func ( f , arg ): return f ( arg ) my_func ( lambda x : 2 * x * x , 5 ) 50 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u52a8\u6001\u521b\u5efa\u4e86\u4e00\u4e2a\u533f\u540d\u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u53c2\u6570\u8c03\u7528\u5b83\u3002Lambda\u51fd\u6570\u6ca1\u6709\u547d\u540d\u51fd\u6570\uff08named function\uff09\u90a3\u4e48\u5f3a\u5927\u3002Lambda\u51fd\u6570\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u901a\u5e38\u76f8\u5f53\u4e8e\u4e00\u884c\u4ee3\u7801\u3002\u5b9e\u9645\u4e0a\uff0cLambda\u51fd\u6570\u53ef\u4ee5\u5206\u914d\u7ed9\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u4f7f\u7528\u3002\u4f46\u662f\uff0c\u5f88\u5c11\u6709\u5145\u5206\u7684\u7406\u7531\u8fd9\u6837\u505a\u3002\u901a\u5e38\u4f7f\u7528 def \u6765\u5b9a\u4e49\u51fd\u6570\u66f4\u597d\u3002 double = lambda x : x * 2 print ( double ( 7 )) 14","title":"Lambdas"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_11","text":"","title":"\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_12","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 + \u52a0 - \u51cf * \u4e58 / \u9664 % \u53d6\u6a21 ** \u5e42 // \u53d6\u6574\u9664","title":"\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_13","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e < \u5c0f\u4e8e >= \u5927\u4e8e\u7b49\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e","title":"\u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_14","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 = \u7b80\u5355\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26 += \u52a0\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 -= \u51cf\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 *= \u4e58\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 /= \u9664\u6cd5\u8d4b\u503c\u8fd0\u7b97\u7b26 %= \u53d6\u6a21\u8d4b\u503c\u8fd0\u7b97\u7b26 **= \u5e42\u8d4b\u503c\u8fd0\u7b97\u7b26 //= \u53d6\u6574\u9664\u8d4b\u503c\u8fd0\u7b97\u7b26","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_15","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 << \u5de6\u79fb\u8fd0\u7b97\u7b26\uff1a\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u7531 << \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb\u8fd0\u7b97\u7b26\uff1a\u628a > \u5de6\u8fb9\u7684\u8fd0\u7b97\u6570\u7684\u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c >> \u53f3\u8fb9\u7684\u6570\u6307\u5b9a\u79fb\u52a8\u7684\u4f4d\u6570 & \u4e0e\u8fd0\u7b97\u7b26\uff1a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u76f8\u5e94\u4f4d\u90fd\u4e3a1\uff0c\u5219\u8be5\u4f4d\u7684\u7ed3\u679c\u4e3a1\uff0c\u5426\u5219\u4e3a0 | \u6216\u8fd0\u7b97\u7b26\uff1a\u53ea\u8981\u5bf9\u5e94\u7684\u4e8c\u4e2a\u4e8c\u8fdb\u4f4d\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u4f4d\u5c31\u4e3a1 ^ \u5f02\u6216\u8fd0\u7b97\u7b26\uff1a\u5f53\u4e24\u5bf9\u5e94\u7684\u4e8c\u8fdb\u4f4d\u76f8\u5f02\u65f6\uff0c\u7ed3\u679c\u4e3a1 ~ \u53d6\u53cd\u8fd0\u7b97\u7b26\uff1a\u5bf9\u6570\u636e\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\uff0c\u5373\u628a1\u53d8\u4e3a0\uff0c\u628a0\u53d8\u4e3a1\u3002 ~x \u7c7b\u4f3c\u4e8e -x-1 \u5de6\u79fb\u548c\u53f3\u79fb\u7684\u610f\u601d\u5c31\u662f\u628a\u4f4d\u6570\u6574\u4f53\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u82e5\u5e72\u4f4d\u3002\u6bd4\u59821111\u5411\u53f3\u79fb\u4e00\u4f4d\u5c31\u53d8\u6210\u4e860111\uff0c\u539f\u6765\u6ca1\u6709\u7684\u4f4d\u81ea\u52a8\u586b0\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u4f4d\u820d\u5f03\u6389\u3002\u770b\u51e0\u4e2a\u4f8b\u5b50\uff1a print ( 0b1111 >> 1 ) print (( 0b1111 >> 1 ) is 0b111 is 7 ) 7 True print ( 0b1010 << 2 ) print (( 0b1010 << 2 ) is 0b101000 is 40 ) 40 True \u5982\u679c\u4f7f\u7528\u5341\u8fdb\u5236\uff08\u6216\u8005\u5176\u4ed6\u8fdb\u5236\u6570\uff09\uff0c\u4e5f\u662f\u5bf9\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8fdb\u884c\u79fb\u4f4d\uff1a print ( 0b1111 is 15 ) print (( 15 >> 1 ) is 7 is 0b111 ) True True \u5176\u4ed6\u6309\u4f4d\u8fd0\u7b97\u7b26\u7684\u4f8b\u5b50\uff1a print (( 0b1111 & 0b1010 ) is 0b1010 is 10 ) print (( 0b1111 | 0b1010 ) is 0b1111 is 15 ) print (( 0b1111 ^ 0b1010 ) is 0b0101 is 5 ) print (( ~ 0b1010 ) is ( - 0b1010 - 1 ) is - 11 ) True True True True \u5982\u679c\u4f7f\u7528\u5341\u8fdb\u5236\uff08\u6216\u8005\u5176\u4ed6\u8fdb\u5236\u6570\uff09\uff0c\u4e5f\u662f\u5bf9\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8fdb\u884c\u79fb\u4f4d\uff1a print (( 15 & 10 ) is 0b1010 is 10 ) print (( 15 | 10 ) is 0b1111 is 15 ) print (( 15 ^ 10 ) is 0b0101 is 5 ) print (( ~ 10 ) is ( - 10 - 1 ) is - 0b1011 ) True True True True","title":"\u6309\u4f4d\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_16","text":"\u8fd0\u7b97\u7b26 \u903b\u8f91\u8868\u8fbe\u5f0f \u63cf\u8ff0 and x and y x\u3001y\u540c\u65f6\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 or x or y x\u3001y\u4e24\u8005\u6709\u4e00\u4e2a\u4e3a\u771f\uff0c\u5219\u7ed3\u679c\u4e3a\u771f\uff0c\u5426\u5219\u4e3a\u5047 not not x x\u4e3a\u771f\uff0c\u7ed3\u679c\u4e3a\u5047\uff1bx\u4e3a\u5047\uff0c\u7ed3\u679c\u4e3a\u771f","title":"\u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_17","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False not in \u5982\u679c\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u6ca1\u6709\u627e\u5230\u503c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False","title":"\u6210\u5458\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_18","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b is is \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e00\u4e2a\u5bf9\u8c61 x is y, \u7c7b\u4f3c id(x) == id(y) , \u5982\u679c\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False is not is not \u662f\u5224\u65ad\u4e24\u4e2a\u6807\u8bc6\u7b26\u662f\u4e0d\u662f\u5f15\u7528\u81ea\u4e0d\u540c\u5bf9\u8c61 x is not y \uff0c \u7c7b\u4f3c id(a) != id(b) \u3002\u5982\u679c\u5f15\u7528\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u5219\u8fd4\u56de\u7ed3\u679c True\uff0c\u5426\u5219\u8fd4\u56de False","title":"\u8eab\u4efd\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.1.python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html#_19","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u4f18\u5148\u7ea7 {key:value, ...} \u5b57\u5178\u663e\u793a 16 [...] \u5217\u8868\u663e\u793a 16 (...) \u5c06\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6216\u5143\u7ec4\u663e\u793a 16 x[index]\u3001x[index1:index2]\u3001f(args...)\u3001x.attribute \u5143\u7d20\u8bbf\u95ee\u3001\u5207\u7247\u3001\u51fd\u6570\u8c03\u7528\u3001\u5c5e\u6027\u5f15\u7528 15 ** \u5e42\u8fd0\u7b97 14 ~ \u6309\u4f4d\u6c42\u8865 13 *\u3001/\u3001//\u3001%\u3001@ \u4e58\u3001\u9664\u3001\u53d6\u6574\u3001\u53d6\u6a21 12 +\u3001- \u52a0\u3001\u51cf 11 <<\u3001>> \u5de6\u79fb\u4f4d\u3001\u53f3\u79fb\u4f4d 10 & \u6309\u4f4d\u4e0e 9 ^ \u6309\u4f4d\u5f02\u6216 8 | \u6309\u4f4d\u6216 7 <\u3001<=\u3001>\u3001>=\u3001==\u3001!= \u6bd4\u8f83\u8fd0\u7b97\u7b26 6 is\u3001is not \u8eab\u4efd\u8fd0\u7b97\u7b26 6 in\u3001not in \u6210\u5458\u8fd0\u7b97\u7b26 6 not \u903b\u8f91\u8fd0\u7b97\u7b26 5 and \u903b\u8f91\u8fd0\u7b97\u7b26 4 or \u903b\u8f91\u8fd0\u7b97\u7b26 3 if - else \u6761\u4ef6\u8868\u8fbe\u5f0f 2 lambda Lambda \u8868\u8fbe\u5f0f 1 \u5177\u6709\u76f8\u540c\u4f18\u5148\u7ea7\u7684\u8fd0\u7b97\u7b26\u5c06\u4ece\u5de6\u81f3\u53f3\u7684\u65b9\u5f0f\u4f9d\u6b21\u8fdb\u884c\u3002\u7528\u5c0f\u62ec\u53f7 () \u53ef\u4ee5\u6539\u53d8\u8fd0\u7b97\u987a\u5e8f\u3002 \u5305\u62ec\u51fd\u6570\u3001\u7c7b\u7684\u5b9a\u4e49\u3002 \u21a9 \u76ee\u524dPython\u7684\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u5b57\u5178\u5b9e\u73b0\uff0c\u4f46\u65e5\u540e\u53ef\u80fd\u4f1a\u6539\u53d8\u3002 \u21a9","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html","text":"Windows 10 Python 3.6.9 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.24 \u8bed\u53e5 if \u8bed\u53e5 if \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a age = 20 if age >= 18 : print ( 'your age is' , age ) print ( 'adult' ) else : print ( 'your age is' , age ) print ( 'teenager' ) your age is 20 adult \u6ce8\u610f\u4e0d\u8981\u5c11\u5199\u4e86\u5192\u53f7 : \u3002 \u7c7b\u4f3cR\u8bed\u8a00\u7684 else if \uff0c\u5728python\u4e2d\u5219\u662f\u4f7f\u7528 elif \uff1a age = 3 if age >= 18 : print ( 'adult' ) elif age >= 6 : print ( 'teenager' ) else : print ( 'kid' ) kid elif \u662f else if \u7684\u7f29\u5199\uff0c \u4f7f\u7528\u7f29\u5199\u662f\u4e3a\u4e86\u907f\u514d\u8fc7\u5ea6\u7f29\u8fdb\u3002 \u5b8c\u5168\u53ef\u4ee5\u6709\u591a\u4e2a elif \uff0c\u6240\u4ee5 if \u8bed\u53e5\u7684\u5b8c\u6574\u5f62\u5f0f\u5c31\u662f\uff1a if < \u6761\u4ef6\u5224\u65ad1 > : < \u6267\u884c1 > elif < \u6761\u4ef6\u5224\u65ad2 > : < \u6267\u884c2 > elif < \u6761\u4ef6\u5224\u65ad3 > : < \u6267\u884c3 > else : < \u6267\u884c4 > if \u5224\u65ad\u6761\u4ef6\u8fd8\u53ef\u4ee5\u7b80\u5199\uff0c\u6bd4\u5982\u5199\uff1a if True : print ( 'True' ) True \u5728Python\u4e2d\uff0c False \u3001 0 \u3001 '' \u3001 [] \u3001 () \u3001 {} \u90fd\u89c6\u4f5cFalse\uff0c\u5426\u5219\u4e3aTrue\u3002 \u6ce8\u610f\uff0c\u8d1f\u503c\u4e5f\u662f\u88ab\u5224\u65ad\u4e3a\u771f\u3002 \u65ad\u8a00 \u65ad\u8a00\u8bed\u53e5\u7528\u6765\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u5f15\u53d1 AssertionError \u5f02\u5e38\uff08\u5e76\u53ef\u63d0\u4f9b\u9519\u8bef\u6d88\u606f\uff09\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a assert condition \u7b49\u4ef7\u4e8e if not condition : crash program \u4f8b\u5b50\uff1a age = 3 assert age >= 12 , 'Children under the age of 12 are not allowed' ---------------------------------------------------------------------------AssertionError Traceback (most recent call last)<ipython-input-1-6fe548f20b1c> in <module> 1 age = 3 ----> 2 assert age >= 12, 'Children under the age of 12 are not allowed' AssertionError: Children under the age of 12 are not allowed \u5faa\u73af Python\u7684\u5faa\u73af\u6709\u4e24\u79cd: for \u5faa\u73af while \u5faa\u73af for\u8bed\u53e5 for \u5faa\u73af\uff0c \u4f9d\u6b21\u628a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8fed\u4ee3\u51fa\u6765 \uff0c\u53ef\u5305\u542b else \u5b50\u53e5\u3002\u770b\u4f8b\u5b50\uff1a # \u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u4f9d\u6b21\u6253\u5370`names`\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 names = [ 'Michael' , 'Bob' , 'Tracy' ] for name in names : print ( name ) Michael Bob Tracy \u6240\u4ee5 for x in ... \u5faa\u73af\u5c31\u662f\u628a\u6bcf\u4e2a\u5143\u7d20\u4ee3\u5165\u53d8\u91cf x \uff0c\u7136\u540e\u6267\u884c\u7f29\u8fdb\u5757\u7684\u8bed\u53e5\u3002 while\u8bed\u53e5 while \u8bed\u53e5\u7528\u4e8e==\u5728\u6307\u5b9a\u6761\u4ef6\u4e3a\u771f\u65f6\u53cd\u590d\u5730\u6267\u884c\uff08\u5faa\u73af\uff09\uff0c\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u9000\u51fa\u5faa\u73af\u3002== \u6bd4\u5982\u8981\u8ba1\u7b97100\u4ee5\u5185\u6240\u6709\u5947\u6570\u4e4b\u548c\uff0c\u53ef\u4ee5\u7528while\u5faa\u73af\u5b9e\u73b0\uff1a sum = 0 n = 99 # \u5728\u5faa\u73af\u5185\u90e8\u53d8\u91cf n \u4e0d\u65ad\u81ea\u51cf # \u76f4\u5230\u53d8\u4e3a n=0 \u65f6\uff0c\u4e0d\u518d\u6ee1\u8db3while\u6761\u4ef6\uff0c\u5faa\u73af\u9000\u51fa while n > 0 : sum = sum + n n = n - 2 print ( sum ) 2500 break \u5728\u5faa\u73af\u4e2d\uff0c break \u8bed\u53e5\u53ef\u4ee5\u63d0\u524d\u9000\u51fa\u5faa\u73af\u3002\u4f8b\u5982 \u6ce8\u610f break\u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 i = 1 while i < 100 : i = i + 1 print ( \"\u7ed3\u675f\u5faa\u73af\" ) break print ( i ) \u7ed3\u675f\u5faa\u73af break \u7684\u4f5c\u7528\u662f\u9000\u51fa\u5f53\u524d\u5faa\u73af\uff0c print(i) \u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c break \u53ea\u662f\u4e2d\u65ad\u5f53\u524d\u5c42\u7684\u5faa\u73af\uff0c\u4e0d\u4f1a\u4e2d\u65ad\u4e0a\u4e00\u5c42\u7684\u5faa\u73af\u3002 for i in range ( 3 ): for j in [ \"a\" , \"b\" , \"c\" ]: print ( j ) break a a a \u5185\u5c42\u5faa\u73af\u6253\u5370\u51fa\u4e00\u4e2a j \u503c\u4e4b\u540e\uff0c\u88ab break \u8bed\u53e5\u4e2d\u65ad\uff0c\u4f46\u5916\u5c42\u5faa\u73af\u5e76\u6ca1\u6709\u4e2d\u65ad\uff0c\u6240\u4ee5\u4ee3\u7801\u6267\u884c\u7684\u7ed3\u679c\u662f\u6253\u5370\u4e86\u4e09\u6b21 a \u3002 continue continue \u8bed\u53e5\uff1a\u8df3\u8fc7\u5f53\u524d\u5c42\u7684\u5f53\u524d\u5faa\u73af\uff0c\u76f4\u63a5\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\u3002 \u6ce8\u610f continue \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 n = 0 while n < 10 : n = n + 1 print ( n , end = \" \" ) 1 2 3 4 5 6 7 8 9 10 \u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u6253\u5370\u51fa1\uff5e10\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u53ea\u6253\u5370\u5947\u6570\uff0c\u53ef\u4ee5\u7528 continue \u8bed\u53e5\u8df3\u8fc7\u67d0\u4e9b\u5faa\u73af\uff1a n = 0 while n < 10 : n = n + 1 if n % 2 == 0 : # \u5982\u679cn\u662f\u5076\u6570\uff0c\u6267\u884ccontinue\u8bed\u53e5 continue # continue\u8bed\u53e5\u4f1a\u76f4\u63a5\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u540e\u7eed\u7684print()\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c print ( n , end = \" \" ) 1 3 5 7 9 \u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6253\u5370\u7684\u4e0d\u518d\u662f1\uff5e10\uff0c\u800c\u662f1\uff0c3\uff0c5\uff0c7\uff0c9\u3002 \u5faa\u73af\u4e2d\u7684 else \u5b50\u53e5 else \u5b50\u53e5\u4e0d\u4ec5\u53ef\u4ee5\u7528\u5728 if \u8bed\u53e5\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5faa\u73af\u8bed\u53e5\u3002\u5faa\u73af\u8bed\u53e5\u4e2d\u7684 else \u5b50\u53e5\u5728\u5faa\u73af\u8fed\u4ee3\u5b8c\u6210\u65f6\uff08\u5bf9\u4e8efor\uff09\u3001\u6267\u884c\u6761\u4ef6\u4e3a false \uff08\u5bf9\u4e8e while \uff09\u65f6\u6267\u884c\uff0c\u4f46\u5faa\u73af\u88ab break \u4e2d\u6b62\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6267\u884c\u3002 # for\u5faa\u73af i = 1 for i in range ( 1 , 10 , 2 ): print ( i , end = \" \" ) else : print ( \"i =\" , i ) 1 3 5 7 9 i = 9 # while\u5faa\u73af i = 1 while i < 5 : print ( i , end = \" \" ) i = i + 1 else : print ( \"i =\" , i ) 1 2 3 4 i = 5 \u5f53\u5faa\u73af\u88abbreak\u8bed\u53e5\u4e2d\u65ad\uff0c\u6b64\u65f6else\u5b50\u53e5\u4e0d\u4f1a\u6267\u884c\uff1a i = 1 for i in range ( 1 , 10 , 2 ): break print ( i , end = \" \" ) else : print ( \"i =\" , i ) i = 1 while i < 5 : break print ( i , end = \" \" ) i = i + 1 else : print ( \"i =\" , i ) \u5c0f\u7ed3 break \u3001 continue \u8bed\u53e5\u901a\u5e38\u90fd\u914d\u5408 if \u8bed\u53e5\u4f7f\u7528\u3002 \u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e0d\u8981\u6ee5\u7528 break \u548c continue \u8bed\u53e5\u3002 break \u548c continue \u4f1a\u9020\u6210\u4ee3\u7801\u6267\u884c\u903b\u8f91\u5206\u53c9\u8fc7\u591a\uff0c\u5bb9\u6613\u51fa\u9519\u3002\u5927\u591a\u6570\u5faa\u73af\u5e76\u4e0d\u9700\u8981\u7528\u5230 break \u548c continue \u8bed\u53e5\uff0c\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u5faa\u73af\u6761\u4ef6\u6216\u8005\u4fee\u6539\u5faa\u73af\u903b\u8f91\uff0c\u53bb\u6389 break \u548c continue \u8bed\u53e5\u3002 pass \u8bed\u53e5 pass \u8bed\u53e5\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5b83\u7528\u4e8e\u90a3\u4e9b\u8bed\u6cd5\u4e0a\u5fc5\u987b\u8981\u6709\u4ec0\u4e48\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7684\u573a\u5408\uff0c\u4f8b\u5982: # \u6b7b\u5faa\u73af while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) # \u521b\u5efa\u6700\u5c0f\u7ed3\u6784\u7684\u7c7b: class MyEmptyClass : pass return \u8bed\u53e5 return \u8bed\u53e5\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u503c\uff0c\u5c06\u8fd4\u56de None \u3002\u793a\u4f8b\uff1a \u6ce8\u610f return \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u51fd\u6570\u4e2d\u3002 def func1 (): return 4 , 2 def func2 (): return print ( func1 ()) print ( func2 ()) (4, 2) None del \u8bed\u53e5 del \u8bed\u53e5\u7528\u4e8e\u89e3\u9664\u540d\u5b57\u548c\u5bf9\u8c61\u7684\u5173\u8054\u4ee5\u53ca\u5c06\u6570\u636e\u7ed3\u6784\uff08\u6620\u5c04\u6216\u5e8f\u5217\uff09\u7684\u4e00\u90e8\u5206\uff08\u5982\uff08\u4f4d\u7f6e\u3001\u5207\u7247\u6216\u5b58\u50a8\u69fd\uff09\u5220\u9664\u3002 \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5b83\u6765\u5220\u9664\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5bf9\u8c61\u53ea\u80fd\u901a\u8fc7\u5783\u573e\u6536\u96c6\u6765\u5220\u9664\u3002 del x # \u89e3\u9664\u53d8\u91cf\u4e0e\u503c\u7684\u5173\u8054 del seq [ 42 ] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 del seq [ 42 :] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5207\u7247 del map [ 'foo' ] # \u5220\u9664\u6620\u5c04\u4e2d\u7684\u4e00\u9879 \u6682\u672a\u63d0\u5230\u7684\u8bed\u53e5 \u8fd8\u6709\u4e00\u4e9bPython\u8bed\u53e5\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u63d0\u5230\uff1a yield \u8bed\u53e5\uff1a\u6682\u505c\u6267\u884c\u751f\u6210\u5668\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 raise \u8bed\u53e5\uff1a\u5f15\u53d1\u5f02\u5e38\u3002 try \u8bed\u53e5\uff1a\u7528\u4e8e\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u6bb5\uff0c\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\u5e76\u6267\u884c\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u3002 global \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u5168\u5c40\u7684\u3002 nonlocal \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u95ed\u5305\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 with \u8bed\u53e5\uff1a\u7528\u4e8e\u5305\u88c5\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4ee3\u7801\u5757\uff0c\u8ba9\u7ba1\u7406\u5668\u80fd\u591f\u6267\u884c\u4e00\u4e9b\u8bbe\u7f6e\u548c\u6e05\u7406\u64cd\u4f5c\u3002 import \u8bed\u53e5\uff1a\u4ece\u5916\u90e8\u6a21\u5757\u5bfc\u5165\u540d\u79f0\u3002","title":"2.2.\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_1","text":"","title":"\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#if","text":"if \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a age = 20 if age >= 18 : print ( 'your age is' , age ) print ( 'adult' ) else : print ( 'your age is' , age ) print ( 'teenager' ) your age is 20 adult \u6ce8\u610f\u4e0d\u8981\u5c11\u5199\u4e86\u5192\u53f7 : \u3002 \u7c7b\u4f3cR\u8bed\u8a00\u7684 else if \uff0c\u5728python\u4e2d\u5219\u662f\u4f7f\u7528 elif \uff1a age = 3 if age >= 18 : print ( 'adult' ) elif age >= 6 : print ( 'teenager' ) else : print ( 'kid' ) kid elif \u662f else if \u7684\u7f29\u5199\uff0c \u4f7f\u7528\u7f29\u5199\u662f\u4e3a\u4e86\u907f\u514d\u8fc7\u5ea6\u7f29\u8fdb\u3002 \u5b8c\u5168\u53ef\u4ee5\u6709\u591a\u4e2a elif \uff0c\u6240\u4ee5 if \u8bed\u53e5\u7684\u5b8c\u6574\u5f62\u5f0f\u5c31\u662f\uff1a if < \u6761\u4ef6\u5224\u65ad1 > : < \u6267\u884c1 > elif < \u6761\u4ef6\u5224\u65ad2 > : < \u6267\u884c2 > elif < \u6761\u4ef6\u5224\u65ad3 > : < \u6267\u884c3 > else : < \u6267\u884c4 > if \u5224\u65ad\u6761\u4ef6\u8fd8\u53ef\u4ee5\u7b80\u5199\uff0c\u6bd4\u5982\u5199\uff1a if True : print ( 'True' ) True \u5728Python\u4e2d\uff0c False \u3001 0 \u3001 '' \u3001 [] \u3001 () \u3001 {} \u90fd\u89c6\u4f5cFalse\uff0c\u5426\u5219\u4e3aTrue\u3002 \u6ce8\u610f\uff0c\u8d1f\u503c\u4e5f\u662f\u88ab\u5224\u65ad\u4e3a\u771f\u3002","title":"if \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_2","text":"\u65ad\u8a00\u8bed\u53e5\u7528\u6765\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u5f15\u53d1 AssertionError \u5f02\u5e38\uff08\u5e76\u53ef\u63d0\u4f9b\u9519\u8bef\u6d88\u606f\uff09\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a assert condition \u7b49\u4ef7\u4e8e if not condition : crash program \u4f8b\u5b50\uff1a age = 3 assert age >= 12 , 'Children under the age of 12 are not allowed' ---------------------------------------------------------------------------AssertionError Traceback (most recent call last)<ipython-input-1-6fe548f20b1c> in <module> 1 age = 3 ----> 2 assert age >= 12, 'Children under the age of 12 are not allowed' AssertionError: Children under the age of 12 are not allowed","title":"\u65ad\u8a00"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_3","text":"Python\u7684\u5faa\u73af\u6709\u4e24\u79cd: for \u5faa\u73af while \u5faa\u73af","title":"\u5faa\u73af"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#for","text":"for \u5faa\u73af\uff0c \u4f9d\u6b21\u628a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8fed\u4ee3\u51fa\u6765 \uff0c\u53ef\u5305\u542b else \u5b50\u53e5\u3002\u770b\u4f8b\u5b50\uff1a # \u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u4f9d\u6b21\u6253\u5370`names`\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 names = [ 'Michael' , 'Bob' , 'Tracy' ] for name in names : print ( name ) Michael Bob Tracy \u6240\u4ee5 for x in ... \u5faa\u73af\u5c31\u662f\u628a\u6bcf\u4e2a\u5143\u7d20\u4ee3\u5165\u53d8\u91cf x \uff0c\u7136\u540e\u6267\u884c\u7f29\u8fdb\u5757\u7684\u8bed\u53e5\u3002","title":"for\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#while","text":"while \u8bed\u53e5\u7528\u4e8e==\u5728\u6307\u5b9a\u6761\u4ef6\u4e3a\u771f\u65f6\u53cd\u590d\u5730\u6267\u884c\uff08\u5faa\u73af\uff09\uff0c\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u9000\u51fa\u5faa\u73af\u3002== \u6bd4\u5982\u8981\u8ba1\u7b97100\u4ee5\u5185\u6240\u6709\u5947\u6570\u4e4b\u548c\uff0c\u53ef\u4ee5\u7528while\u5faa\u73af\u5b9e\u73b0\uff1a sum = 0 n = 99 # \u5728\u5faa\u73af\u5185\u90e8\u53d8\u91cf n \u4e0d\u65ad\u81ea\u51cf # \u76f4\u5230\u53d8\u4e3a n=0 \u65f6\uff0c\u4e0d\u518d\u6ee1\u8db3while\u6761\u4ef6\uff0c\u5faa\u73af\u9000\u51fa while n > 0 : sum = sum + n n = n - 2 print ( sum ) 2500","title":"while\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#break","text":"\u5728\u5faa\u73af\u4e2d\uff0c break \u8bed\u53e5\u53ef\u4ee5\u63d0\u524d\u9000\u51fa\u5faa\u73af\u3002\u4f8b\u5982 \u6ce8\u610f break\u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 i = 1 while i < 100 : i = i + 1 print ( \"\u7ed3\u675f\u5faa\u73af\" ) break print ( i ) \u7ed3\u675f\u5faa\u73af break \u7684\u4f5c\u7528\u662f\u9000\u51fa\u5f53\u524d\u5faa\u73af\uff0c print(i) \u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c break \u53ea\u662f\u4e2d\u65ad\u5f53\u524d\u5c42\u7684\u5faa\u73af\uff0c\u4e0d\u4f1a\u4e2d\u65ad\u4e0a\u4e00\u5c42\u7684\u5faa\u73af\u3002 for i in range ( 3 ): for j in [ \"a\" , \"b\" , \"c\" ]: print ( j ) break a a a \u5185\u5c42\u5faa\u73af\u6253\u5370\u51fa\u4e00\u4e2a j \u503c\u4e4b\u540e\uff0c\u88ab break \u8bed\u53e5\u4e2d\u65ad\uff0c\u4f46\u5916\u5c42\u5faa\u73af\u5e76\u6ca1\u6709\u4e2d\u65ad\uff0c\u6240\u4ee5\u4ee3\u7801\u6267\u884c\u7684\u7ed3\u679c\u662f\u6253\u5370\u4e86\u4e09\u6b21 a \u3002","title":"break"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#continue","text":"continue \u8bed\u53e5\uff1a\u8df3\u8fc7\u5f53\u524d\u5c42\u7684\u5f53\u524d\u5faa\u73af\uff0c\u76f4\u63a5\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\u3002 \u6ce8\u610f continue \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u4e2d\u3002 n = 0 while n < 10 : n = n + 1 print ( n , end = \" \" ) 1 2 3 4 5 6 7 8 9 10 \u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u6253\u5370\u51fa1\uff5e10\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u53ea\u6253\u5370\u5947\u6570\uff0c\u53ef\u4ee5\u7528 continue \u8bed\u53e5\u8df3\u8fc7\u67d0\u4e9b\u5faa\u73af\uff1a n = 0 while n < 10 : n = n + 1 if n % 2 == 0 : # \u5982\u679cn\u662f\u5076\u6570\uff0c\u6267\u884ccontinue\u8bed\u53e5 continue # continue\u8bed\u53e5\u4f1a\u76f4\u63a5\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u5faa\u73af\uff0c\u540e\u7eed\u7684print()\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c print ( n , end = \" \" ) 1 3 5 7 9 \u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6253\u5370\u7684\u4e0d\u518d\u662f1\uff5e10\uff0c\u800c\u662f1\uff0c3\uff0c5\uff0c7\uff0c9\u3002","title":"continue"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#else","text":"else \u5b50\u53e5\u4e0d\u4ec5\u53ef\u4ee5\u7528\u5728 if \u8bed\u53e5\uff0c\u8fd8\u53ef\u4ee5\u7528\u5728\u5faa\u73af\u8bed\u53e5\u3002\u5faa\u73af\u8bed\u53e5\u4e2d\u7684 else \u5b50\u53e5\u5728\u5faa\u73af\u8fed\u4ee3\u5b8c\u6210\u65f6\uff08\u5bf9\u4e8efor\uff09\u3001\u6267\u884c\u6761\u4ef6\u4e3a false \uff08\u5bf9\u4e8e while \uff09\u65f6\u6267\u884c\uff0c\u4f46\u5faa\u73af\u88ab break \u4e2d\u6b62\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6267\u884c\u3002 # for\u5faa\u73af i = 1 for i in range ( 1 , 10 , 2 ): print ( i , end = \" \" ) else : print ( \"i =\" , i ) 1 3 5 7 9 i = 9 # while\u5faa\u73af i = 1 while i < 5 : print ( i , end = \" \" ) i = i + 1 else : print ( \"i =\" , i ) 1 2 3 4 i = 5 \u5f53\u5faa\u73af\u88abbreak\u8bed\u53e5\u4e2d\u65ad\uff0c\u6b64\u65f6else\u5b50\u53e5\u4e0d\u4f1a\u6267\u884c\uff1a i = 1 for i in range ( 1 , 10 , 2 ): break print ( i , end = \" \" ) else : print ( \"i =\" , i ) i = 1 while i < 5 : break print ( i , end = \" \" ) i = i + 1 else : print ( \"i =\" , i )","title":"\u5faa\u73af\u4e2d\u7684else\u5b50\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_4","text":"break \u3001 continue \u8bed\u53e5\u901a\u5e38\u90fd\u914d\u5408 if \u8bed\u53e5\u4f7f\u7528\u3002 \u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e0d\u8981\u6ee5\u7528 break \u548c continue \u8bed\u53e5\u3002 break \u548c continue \u4f1a\u9020\u6210\u4ee3\u7801\u6267\u884c\u903b\u8f91\u5206\u53c9\u8fc7\u591a\uff0c\u5bb9\u6613\u51fa\u9519\u3002\u5927\u591a\u6570\u5faa\u73af\u5e76\u4e0d\u9700\u8981\u7528\u5230 break \u548c continue \u8bed\u53e5\uff0c\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u6539\u5199\u5faa\u73af\u6761\u4ef6\u6216\u8005\u4fee\u6539\u5faa\u73af\u903b\u8f91\uff0c\u53bb\u6389 break \u548c continue \u8bed\u53e5\u3002","title":"\u5c0f\u7ed3"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#pass","text":"pass \u8bed\u53e5\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\u5b83\u7528\u4e8e\u90a3\u4e9b\u8bed\u6cd5\u4e0a\u5fc5\u987b\u8981\u6709\u4ec0\u4e48\u8bed\u53e5\uff0c\u4f46\u7a0b\u5e8f\u4ec0\u4e48\u4e5f\u4e0d\u505a\u7684\u573a\u5408\uff0c\u4f8b\u5982: # \u6b7b\u5faa\u73af while True : pass # Busy-wait for keyboard interrupt (Ctrl+C) # \u521b\u5efa\u6700\u5c0f\u7ed3\u6784\u7684\u7c7b: class MyEmptyClass : pass","title":"pass \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#return","text":"return \u8bed\u53e5\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u503c\uff0c\u5c06\u8fd4\u56de None \u3002\u793a\u4f8b\uff1a \u6ce8\u610f return \u8bed\u53e5\u53ea\u80fd\u7528\u4e8e\u51fd\u6570\u4e2d\u3002 def func1 (): return 4 , 2 def func2 (): return print ( func1 ()) print ( func2 ()) (4, 2) None","title":"return \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#del","text":"del \u8bed\u53e5\u7528\u4e8e\u89e3\u9664\u540d\u5b57\u548c\u5bf9\u8c61\u7684\u5173\u8054\u4ee5\u53ca\u5c06\u6570\u636e\u7ed3\u6784\uff08\u6620\u5c04\u6216\u5e8f\u5217\uff09\u7684\u4e00\u90e8\u5206\uff08\u5982\uff08\u4f4d\u7f6e\u3001\u5207\u7247\u6216\u5b58\u50a8\u69fd\uff09\u5220\u9664\u3002 \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5b83\u6765\u5220\u9664\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5bf9\u8c61\u53ea\u80fd\u901a\u8fc7\u5783\u573e\u6536\u96c6\u6765\u5220\u9664\u3002 del x # \u89e3\u9664\u53d8\u91cf\u4e0e\u503c\u7684\u5173\u8054 del seq [ 42 ] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 del seq [ 42 :] # \u5220\u9664\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5207\u7247 del map [ 'foo' ] # \u5220\u9664\u6620\u5c04\u4e2d\u7684\u4e00\u9879","title":"del \u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.2.%E8%AF%AD%E5%8F%A5.html#_5","text":"\u8fd8\u6709\u4e00\u4e9bPython\u8bed\u53e5\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u63d0\u5230\uff1a yield \u8bed\u53e5\uff1a\u6682\u505c\u6267\u884c\u751f\u6210\u5668\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 raise \u8bed\u53e5\uff1a\u5f15\u53d1\u5f02\u5e38\u3002 try \u8bed\u53e5\uff1a\u7528\u4e8e\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u6bb5\uff0c\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\u5e76\u6267\u884c\u5f02\u5e38\u5904\u7406\u4ee3\u7801\u3002 global \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u5168\u5c40\u7684\u3002 nonlocal \u8bed\u53e5\uff1a\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a\u95ed\u5305\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 with \u8bed\u53e5\uff1a\u7528\u4e8e\u5305\u88c5\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4ee3\u7801\u5757\uff0c\u8ba9\u7ba1\u7406\u5668\u80fd\u591f\u6267\u884c\u4e00\u4e9b\u8bbe\u7f6e\u548c\u6e05\u7406\u64cd\u4f5c\u3002 import \u8bed\u53e5\uff1a\u4ece\u5916\u90e8\u6a21\u5757\u5bfc\u5165\u540d\u79f0\u3002","title":"\u6682\u672a\u63d0\u5230\u7684\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.24 \u5217\u8868\u7684\u65b9 \u6cd5 \u63cf \u8ff0 aList.append(obj) \u7b49\u540c\u4e8eaList[len(aList):len(aList)] = [obj] aList.clear() \u5220\u9664aList\u7684\u6240\u6709\u5143\u7d20 aList.count(obj) \u8fd4\u56deaList\u4e2d\u4e0eobj\u76f8\u7b49\u7684\u5143\u7d20\u4e2a\u6570 aList.copy() \u8fd4\u56deaList\u7684\u526f\u672c\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u662f\u6d45\u590d\u5236\uff0c\u5373\u4e0d\u4f1a\u590d\u5236\u5143\u7d20 aList.extend(sequence) \u7b49\u540c\u4e8eaList[len(aList):len(aList)] = sequence aList.index(obj) \u8fd4\u56deaList\u4e2d\u7b2c\u4e00\u4e2a\u4e0eobj\u76f8\u7b49\u7684\u5143\u7d20\u7684\u7d22\u5f15\uff1b\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5c31\u5f15\u53d1 ValueError\u5f02\u5e38 aList.insert(index, obj) \u5982\u679cindex >= 0\uff0c\u5c31\u7b49\u540c\u4e8eaList[index:index] = [obj]\uff1b\u5982\u679cindex < 0\uff0c\u5c31 \u5c06\u6307\u5b9a\u7684\u5bf9\u8c61\u52a0\u5165\u5230\u5217\u8868\u5f00\u5934 aList.pop([index]) \u5220\u9664\u5e76\u8fd4\u56de\u6307\u5b9a\u7d22\u5f15\uff08\u9ed8\u8ba4\u4e3a-1 )\u5904\u7684\u5143\u7d20 aList.remove(obj) \u7b49\u540c\u4e8edel aList[aList.index(obj)] aList.reverse\u3002 \u5c31\u5730\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u6392\u5217\u5217\u8868\u7684\u5143\u7d20 aList.sort([cmp][,key][,reverse]) \u5c31\u5730\u5bf9aList\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff08\u7a33\u5b9a\u6392\u5e8f\uff09\u3002\u53ef\u901a\u8fc7\u63d0\u4f9b\u6bd4\u8f83\u51fd\u6570cmp\u3001\u952e\u51fd\u6570 key (\u521b\u5efa\u7528\u6237\u6392\u5e8f\u7684\u952e\uff09\u548c\u964d\u5e8f\u6807\u5fd7reverse (\u2014\u4e2a\u5e03\u5c14\u503c\uff09\u8fdb\u884c\u5b9a\u5236 list\u7684\u65b9\u6cd5 \u521b\u5efa\u4e00\u4e2alist # \u67e5\u770blist\u7684\u65b9\u6cd5\u3001\u5c5e\u6027 [ method for method in dir ( list ()) if not method . startswith ( \"_\" )] ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] \u4fee\u6539list\u5143\u7d20\u7684\u503c \u4fee\u6539\u73b0\u6709list\u7684\u503c\uff0c\u901a\u8fc7\u7d22\u5f15\u3001\u5207\u7247\u6765\u5b8c\u6210\u3002 list_1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # \u4fee\u6539\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u7684\u503c list_1 [ 0 ] = 12 ; list_1 [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # \u4fee\u6539\u67d0\u4e2a\u8fde\u7eed\u533a\u57df\u7684\u503c # \u5207\u7247\u7684\u957f\u5ea6 \u548c \u7528\u4e8e\u8d4b\u503c\u7684\u5217\u8868\u957f\u5ea6 \u53ef\u4ee5\u4e0d\u540c\uff0c\u5982\u4e0b\uff1a list_1 [ 0 : 5 ] = [ 11 , 12 , 13 , 14 , 15 , 16 , 17 ]; list_1 [11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 8, 9, 10] \u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e append \u65b9\u6cd5\u6bcf\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 list_1 = list ( range ( 4 )); print ( list_1 ) list_1 . append ( 12 ); print ( list_1 ) [0, 1, 2, 3] [0, 1, 2, 3, 12] \u6dfb\u52a0\u4efb\u610f\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e extend \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u4e2alist\u6765\u6269\u5145\u5f53\u524d\u7684list\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u7528 + \u62fc\u63a5list\uff0c\u4f46 extend \u65b9\u6cd5\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u5217\u8868\uff0c\u4e0d\u8fd4\u56de\u526f\u672c\u3002 list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] list_1 + list_2 # \u6b64\u65f6list_1\u6ca1\u6709\u88ab\u4fee\u6539 print ( \"\u4f7f\u7528+\u8fd0\u7b97\u7b26\uff1a\" , list_1 ) list_1 . extend ( list_2 ) # \u6b64\u65f6list_1\u88ab\u4fee\u6539 print ( \"\u4f7f\u7528extend\u65b9\u6cd5\uff1a\" , list_1 ) \u4f7f\u7528+\u8fd0\u7b97\u7b26\uff1a [0, 1, 2, 3] \u4f7f\u7528extend\u65b9\u6cd5\uff1a [0, 1, 2, 3, '0', '00', '000'] \u53ef\u4ee5\u770b\u51fa\uff0c\u4f7f\u7528 + \u62fc\u63a5list\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u663e\u7136\u62fc\u63a5\u7684\u6548\u7387\u56de\u6bd4 extend \u65b9\u6cd5\u7684\u6548\u7387\u4f4e\u3002 \u8fd8\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u6765\u6269\u5145list\uff0c\u50cf\u8fd9\u6837\uff1a list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] # \u8fd9\u6837\u505a\u53ef\u8bfb\u6027\u4e0d\u9ad8 list_1 [ len ( list_1 ):] = list_2 list_1 [0, 1, 2, 3, '0', '00', '000'] \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20 insert \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5bf9\u8c61\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e list_1 = list ( range ( 4 )); print ( \"\u539f\u5217\u8868\uff1a\" , list_1 ) list_1 . insert ( 0 , \"\u65b0\u5143\u7d20\" ); print ( \"\u65b0\u5217\u8868\uff1a\" , list_1 ) \u539f\u5217\u8868\uff1a [0, 1, 2, 3] \u65b0\u5217\u8868\uff1a ['\u65b0\u5143\u7d20', 0, 1, 2, 3] \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e00\u4e2alist\u4f7f\u7528\u5207\u7247\uff0c\u5fc5\u5b9a\u4f1a\u5f97\u5230\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u4e00\u4e2alist\u5bf9\u5207\u7247\u8d4b\u503c\u3002 # \u8fd9\u6837\u867d\u7136\u5de7\u5999\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u6bd4\u4e0d\u4e0ainsert\u3002 list_1 = list ( range ( 4 )); print ( \"\u539f\u5217\u8868\uff1a\" , list_1 ) list_1 [ 0 : 0 ] = [ \"\u65b0\u5143\u7d20\" ]; print ( \"\u65b0\u5217\u8868\uff1a\" , list_1 ) \u539f\u5217\u8868\uff1a [0, 1, 2, 3] \u65b0\u5217\u8868\uff1a ['\u65b0\u5143\u7d20', 0, 1, 2, 3] \u5220\u9664\\\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\uff08\u4efb\u610f\u4f4d\u7f6e\u7684\uff09\u5143\u7d20 list_2 = [ '0' , '00' , '000' ] # \u6ce8\u610f\uff0cpop\u662flist\u4e2d\u552f\u4e00\u4e00\u4e2a\u4fee\u6539\u539f\u5217\u8868\uff0c\u5e76\u4e14\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5 list_2 . pop () '000' list_2 = [ '0' , '00' , '000' ] # pop\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u8f93\u5165\u7d22\u5f15\u503c\uff0c\u6307\u5b9a\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e list_2 . pop ( 0 ) list_2 ['00', '000'] \u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5143\u7d20 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . remove ( 1 ) list_1 [2, 3, 1] \u53cd\u5e8f\u6392\u5e8f list_1 = [ 1 , 2 , 3 ] list_1 . reverse () list_1 [3, 2, 1] \u6392\u5e8f \u65b9\u6cd5 sort \u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff1a key \u548c reverse \u3002\u5c06 key \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684**\u51fd\u6570\u3002\u7136\u800c\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u662f\u4f7f\u7528\u5b83\u6765\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u518d\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 reverse \uff0c\u53ea\u9700\u5c06\u5176\u6307\u5b9a\u4e3a True \u6216 False \uff0c\u4ee5\u6307\u51fa\u662f\u5426\u8981\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 ['add', 'acme', 'aerate', 'abalone', 'aardvark'] # \u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f list_3 . sort ( key = len , reverse = True ) list_3 ['aardvark', 'abalone', 'aerate', 'acme', 'add'] \u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 list_1 = [ 1 , 2 , 3 , 1 ] list_1 . count ( 1 ) 2 \u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c list_1 = [ 1 , 2 , 3 , 1 ] list_1 . index ( 1 ) 0 \u6df1\u62f7\u8d1d\u5217\u8868 list_1 = [ 1 , 2 , 3 ] list_4 = list_1 list_1 [ 0 ] = \"\u4fee\u6539\u4e86\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_4\uff1a\" , list_4 ) list_1\uff1a ['\u4fee\u6539\u4e86', 2, 3] list_4\uff1a ['\u4fee\u6539\u4e86', 2, 3] # \u6df1\u62f7\u8d1d list_1 = [ 1 , 2 , 3 ] list_5 = list_1 . copy () list_1 [ 0 ] = \"\u4fee\u6539\u4e86\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_5\uff1a\" , list_5 ) list_1\uff1a ['\u4fee\u6539\u4e86', 2, 3] list_5\uff1a [1, 2, 3] \u6e05\u7a7a\u5217\u8868 list_1 . clear () list_1 []","title":"2.3.List"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#list","text":"\u521b\u5efa\u4e00\u4e2alist # \u67e5\u770blist\u7684\u65b9\u6cd5\u3001\u5c5e\u6027 [ method for method in dir ( list ()) if not method . startswith ( \"_\" )] ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']","title":"list\u7684\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#list_1","text":"\u4fee\u6539\u73b0\u6709list\u7684\u503c\uff0c\u901a\u8fc7\u7d22\u5f15\u3001\u5207\u7247\u6765\u5b8c\u6210\u3002 list_1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # \u4fee\u6539\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u7684\u503c list_1 [ 0 ] = 12 ; list_1 [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # \u4fee\u6539\u67d0\u4e2a\u8fde\u7eed\u533a\u57df\u7684\u503c # \u5207\u7247\u7684\u957f\u5ea6 \u548c \u7528\u4e8e\u8d4b\u503c\u7684\u5217\u8868\u957f\u5ea6 \u53ef\u4ee5\u4e0d\u540c\uff0c\u5982\u4e0b\uff1a list_1 [ 0 : 5 ] = [ 11 , 12 , 13 , 14 , 15 , 16 , 17 ]; list_1 [11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 8, 9, 10]","title":"\u4fee\u6539list\u5143\u7d20\u7684\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_1","text":"append \u65b9\u6cd5\u6bcf\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 list_1 = list ( range ( 4 )); print ( list_1 ) list_1 . append ( 12 ); print ( list_1 ) [0, 1, 2, 3] [0, 1, 2, 3, 12]","title":"\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_2","text":"extend \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u4e2alist\u6765\u6269\u5145\u5f53\u524d\u7684list\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u7528 + \u62fc\u63a5list\uff0c\u4f46 extend \u65b9\u6cd5\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u5217\u8868\uff0c\u4e0d\u8fd4\u56de\u526f\u672c\u3002 list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] list_1 + list_2 # \u6b64\u65f6list_1\u6ca1\u6709\u88ab\u4fee\u6539 print ( \"\u4f7f\u7528+\u8fd0\u7b97\u7b26\uff1a\" , list_1 ) list_1 . extend ( list_2 ) # \u6b64\u65f6list_1\u88ab\u4fee\u6539 print ( \"\u4f7f\u7528extend\u65b9\u6cd5\uff1a\" , list_1 ) \u4f7f\u7528+\u8fd0\u7b97\u7b26\uff1a [0, 1, 2, 3] \u4f7f\u7528extend\u65b9\u6cd5\uff1a [0, 1, 2, 3, '0', '00', '000'] \u53ef\u4ee5\u770b\u51fa\uff0c\u4f7f\u7528 + \u62fc\u63a5list\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u663e\u7136\u62fc\u63a5\u7684\u6548\u7387\u56de\u6bd4 extend \u65b9\u6cd5\u7684\u6548\u7387\u4f4e\u3002 \u8fd8\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u6765\u6269\u5145list\uff0c\u50cf\u8fd9\u6837\uff1a list_1 = list ( range ( 4 )) list_2 = [ '0' , '00' , '000' ] # \u8fd9\u6837\u505a\u53ef\u8bfb\u6027\u4e0d\u9ad8 list_1 [ len ( list_1 ):] = list_2 list_1 [0, 1, 2, 3, '0', '00', '000']","title":"\u6dfb\u52a0\u4efb\u610f\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_3","text":"insert \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5bf9\u8c61\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e list_1 = list ( range ( 4 )); print ( \"\u539f\u5217\u8868\uff1a\" , list_1 ) list_1 . insert ( 0 , \"\u65b0\u5143\u7d20\" ); print ( \"\u65b0\u5217\u8868\uff1a\" , list_1 ) \u539f\u5217\u8868\uff1a [0, 1, 2, 3] \u65b0\u5217\u8868\uff1a ['\u65b0\u5143\u7d20', 0, 1, 2, 3] \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u3002\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e00\u4e2alist\u4f7f\u7528\u5207\u7247\uff0c\u5fc5\u5b9a\u4f1a\u5f97\u5230\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u4e00\u4e2alist\u5bf9\u5207\u7247\u8d4b\u503c\u3002 # \u8fd9\u6837\u867d\u7136\u5de7\u5999\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u6bd4\u4e0d\u4e0ainsert\u3002 list_1 = list ( range ( 4 )); print ( \"\u539f\u5217\u8868\uff1a\" , list_1 ) list_1 [ 0 : 0 ] = [ \"\u65b0\u5143\u7d20\" ]; print ( \"\u65b0\u5217\u8868\uff1a\" , list_1 ) \u539f\u5217\u8868\uff1a [0, 1, 2, 3] \u65b0\u5217\u8868\uff1a ['\u65b0\u5143\u7d20', 0, 1, 2, 3]","title":"\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_4","text":"list_2 = [ '0' , '00' , '000' ] # \u6ce8\u610f\uff0cpop\u662flist\u4e2d\u552f\u4e00\u4e00\u4e2a\u4fee\u6539\u539f\u5217\u8868\uff0c\u5e76\u4e14\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5 list_2 . pop () '000' list_2 = [ '0' , '00' , '000' ] # pop\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u8f93\u5165\u7d22\u5f15\u503c\uff0c\u6307\u5b9a\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e list_2 . pop ( 0 ) list_2 ['00', '000']","title":"\u5220\u9664\\\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\uff08\u4efb\u610f\u4f4d\u7f6e\u7684\uff09\u5143\u7d20"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_5","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . remove ( 1 ) list_1 [2, 3, 1]","title":"\u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5143\u7d20"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_6","text":"list_1 = [ 1 , 2 , 3 ] list_1 . reverse () list_1 [3, 2, 1]","title":"\u53cd\u5e8f\u6392\u5e8f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_7","text":"\u65b9\u6cd5 sort \u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff1a key \u548c reverse \u3002\u5c06 key \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684**\u51fd\u6570\u3002\u7136\u800c\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u662f\u4f7f\u7528\u5b83\u6765\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u518d\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 reverse \uff0c\u53ea\u9700\u5c06\u5176\u6307\u5b9a\u4e3a True \u6216 False \uff0c\u4ee5\u6307\u51fa\u662f\u5426\u8981\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 ['add', 'acme', 'aerate', 'abalone', 'aardvark'] # \u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f list_3 . sort ( key = len , reverse = True ) list_3 ['aardvark', 'abalone', 'aerate', 'acme', 'add']","title":"\u6392\u5e8f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_8","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . count ( 1 ) 2","title":"\u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_9","text":"list_1 = [ 1 , 2 , 3 , 1 ] list_1 . index ( 1 ) 0","title":"\u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_10","text":"list_1 = [ 1 , 2 , 3 ] list_4 = list_1 list_1 [ 0 ] = \"\u4fee\u6539\u4e86\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_4\uff1a\" , list_4 ) list_1\uff1a ['\u4fee\u6539\u4e86', 2, 3] list_4\uff1a ['\u4fee\u6539\u4e86', 2, 3] # \u6df1\u62f7\u8d1d list_1 = [ 1 , 2 , 3 ] list_5 = list_1 . copy () list_1 [ 0 ] = \"\u4fee\u6539\u4e86\" print ( \"list_1\uff1a\" , list_1 ) print ( \"list_5\uff1a\" , list_5 ) list_1\uff1a ['\u4fee\u6539\u4e86', 2, 3] list_5\uff1a [1, 2, 3]","title":"\u6df1\u62f7\u8d1d\u5217\u8868"},{"location":"Python%E5%9F%BA%E7%A1%80/2.3.List.html#_11","text":"list_1 . clear () list_1 []","title":"\u6e05\u7a7a\u5217\u8868"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html","text":"Windows 10 Python 3.6.9 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.26 \u591a\u884c\u5b57\u7b26\u4e32 str_1 = \"\"\" \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \u8fd9\u662f\u7b2c\u4e8c\u884c \"\"\" print ( str_1 ) str_2 = \" \\n \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \\n \u8fd9\u662f\u7b2c\u4e8c\u884c \\n \" print ( str_2 ) str_1 == str_2 \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \u8fd9\u662f\u7b2c\u4e8c\u884c \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \u8fd9\u662f\u7b2c\u4e8c\u884c True \u8f6c\u4e49 \u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u91cc\u9762\u8f93\u5165\u7279\u6b8a\u5b57\u7b26\uff0c\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26\\\uff0c\u4f8b\u5982\u8f93\u5165\u8f6c\u4e49\u7b26\u672c\u8eab\uff1a str_3 = \"12 \\\\ 14\" print ( str_3 ) 12\\14 \u524d\u7f00 \u5728Python\u4e2d\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u6dfb\u52a0\u524d\u7f00 r\\R \u3001 b \u3001 u\\U \u3001 f \u3002 r\\R \uff1a\u8868\u793a\u975e\u8f6c\u4e49\u7684\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u5e38\u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 b \uff1aPython3\u91cc\u9ed8\u8ba4\u7684str\u662f(Python2\u91cc\u7684)unicode\uff0cbytes\u662f(Python2)\u7684str\uff0c b\u524d\u7f00\u4ee3\u8868\u7684\u5c31\u662fbytes\u3002Python2\u91cc, b\u524d\u7f00\u6ca1\u4ec0\u4e48\u5177\u4f53\u610f\u4e49\uff0c\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9Python3\u7684\u8fd9\u79cd\u5199\u6cd5 \u3002 u\\U \uff1a\u8868\u793aunicode\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cunicode\u7f16\u7801\u3002 \u4e00\u822c\u82f1\u6587\u5b57\u7b26\u5728\u4f7f\u7528\u5404\u79cd\u7f16\u7801\u4e0b, \u57fa\u672c\u90fd\u53ef\u4ee5\u6b63\u5e38\u89e3\u6790, \u6240\u4ee5\u4e00\u822c\u4e0d\u5e26u\uff1b\u4f46\u662f\u4e2d\u6587, \u5fc5\u987b\u8868\u660e\u6240\u9700\u7f16\u7801, \u5426\u5219\u4e00\u65e6\u7f16\u7801\u8f6c\u6362\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\u5efa\u8bae\u6240\u6709\u7f16\u7801\u65b9\u5f0f\u91c7\u7528UTF-8\u3002 f \uff1a\u8868\u793a f \u683c\u5f0f\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u7f16\u7801 Python\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u79cd\u5b58\u50a8\u6587\u672c\uff0c\u4e00\u79cd\u5b58\u50a8\u5b57\u8282\u3002\u5bf9\u4e8e\u6587\u672c\uff0cPython\u5185\u90e8\u91c7\u7528Unicode\u5b58\u50a8\uff0c\u800c\u5b57\u8282\u5b57\u7b26\u4e32\u663e\u793a\u539f\u59cb\u5b57\u8282\u5e8f\u5217\u6216\u8005ASCII\u3002\u5728Python3\u5f53\u4e2d\uff0c\u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b\uff08\u4f7f\u7528Unicode\u6570\u636e\u5b58\u50a8\uff09\u88ab\u547d\u540d\u4e3a str , \u5b57\u8282\u5b57\u7b26\u4e32\u7c7b\u578b\u88ab\u547d\u540d\u4e3a bytes \u3002\u4f46\u5728python2\u4e2d\uff0c\u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b\u53eb\u505a unicode \uff0c\u5b57\u8282\u5b57\u7b26\u4e32\u7c7b\u578b\u53eb\u505a str \u3002\u4e5f\u5c31\u662f\u8bf4\uff1a $$ \\begin{array}{} \\text{Python 3}\\ \\mathbf{str} &\\Longleftrightarrow \\text{Python 2}\\ \\mathbf{unicode} \\\\ \\text{Python 3}\\ \\mathbf{bytes} &\\Longleftrightarrow \\text{Python 2}\\ \\mathbf{str} \\end{array} $$ \u6240\u4ee5\uff0c\u5982\u679c\u60f3\u5c06\u4ee5unicode\u5f62\u5f0f\u50a8\u5b58\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u5c06unicode\u5b57\u7b26\u4e32\u7f16\u7801\uff0c\u53cd\u4e4b\uff0c\u5219\u9700\u8981\u89e3\u7801\u3002 \u7f16\u7801\uff1a\u5728python\u4e2d\uff0c\u7f16\u7801\u6307\u7684\u662f\u5c06Unicode\u5b57\u7b26\u6309\u7167\u7f16\u7801\u89c4\u5219\uff08\u5982UTF-8\uff09\u7f16\u6210\u4e8c\u8fdb\u5236\u5e8f\u5217\u3002 \u5728python3\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32 str_1 = \"\u4e2d\u56fd\" # \u7f16\u7801 str_1 . encode () b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd' # \u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 str_2 = b ' \\xe4\\xb8\\xad\\xe5\\x9b\\xbd ' # \u89e3\u7801 str_2 . decode () '\u4e2d\u56fd' bytes\u5b57\u7b26 \u6587\u672c\u5b57\u7b26\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u4ee5Unicode\u8868\u793a\uff0c\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u82e5\u5e72\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8981\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\uff0c\u6216\u8005\u4fdd\u5b58\u5230\u78c1\u76d8\u4e0a\uff0c\u5c31\u9700\u8981\u628a str \u53d8\u4e3a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684 bytes \u3002 Python3\u5bf9 bytes \u7c7b\u578b\u7684\u6570\u636e\u7528\u5e26 b \u524d\u7f00\u7684\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u8868\u793a\u3002 bytes_8 = b \"ABC\" bytes_8 b'ABC' \u8981\u6ce8\u610f\u7684\u662f\uff1abytes\u5b57\u9762\u503c\u4e2d\u53ea\u5141\u8bb8ASCII\u5b57\u7b26\uff08\u65e0\u8bba\u6e90\u4ee3\u7801\u58f0\u660e\u7684\u7f16\u7801\u4e3a\u4f55\uff09\u3002\u4efb\u4f55\u8d85\u51fa127\u7684\u4e8c\u8fdb\u5236\u503c\u5fc5\u987b\u4f7f\u7528\u76f8\u5e94\u7684\u8f6c\u4e49\u5e8f\u5217\u5f62\u5f0f\u52a0\u5165bytes\u5b57\u9762\u503c\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5bf9str\uff08unicode\u7c7b\u578b\uff09\u5bf9\u8c61\u4f7f\u7528 encode() \u65b9\u6cd5\uff0c\u7f16\u7801\u4e3abytes\u7684\u5f62\u5f0f\uff0816\u8fdb\u5236\u8868\u793a\uff09\u3002 '\u4e2d\u6587' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' \u8981\u6ce8\u610f\u7684\u662f\uff0c encode \u7684\u5bf9\u8c61\u4e0d\u80fd\u8d85\u51fa\u6307\u5b9a\u7f16\u7801\u7684\u8303\u56f4\uff0c\u4f8b\u5982\u4e0d\u80fd\u5bf9\u4e2d\u6587\u5b57\u7b26\u4f7f\u7528 .encode(\"ascii\") \uff0c\u56e0\u4e3a\u4e2d\u6587\u4e0d\u5728ascii\u7801\u7684\u8303\u56f4\u5185\u3002 '\u4e2d\u6587' . encode ( 'ascii' ) ---------------------------------------------------------------------------UnicodeEncodeError Traceback (most recent call last)<ipython-input-1-76f41cd8dafa> in <module> ----> 1 '\u4e2d\u6587'.encode('ascii') UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) \u7eaf\u82f1\u6587\u7684str\u53ef\u4ee5\u7528ASCII\u7f16\u7801\u4e3abytes\uff0c\u5185\u5bb9\u662f\u4e00\u6837\u7684\uff0c\u4f46\u65e0\u6cd5\u663e\u793a\u4e3aASCII\u5b57\u7b26\u7684\u5b57\u8282\uff0c\u7528 \\x \u663e\u793a\uff0816\u8fdb\u5236\u8f6c\u4e49\u8868\u793a\uff09\u3002 'ABC' . encode ( 'ascii' ) b'ABC' '\u4e2d\u6587' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' \u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6211\u4eec\u4ece\u7f51\u7edc\u6216\u78c1\u76d8\u4e0a\u8bfb\u53d6\u4e86\u5b57\u8282\u6d41\uff0c\u90a3\u4e48\u8bfb\u5230\u7684\u6570\u636e\u5c31\u662fbytes\u3002\u8981\u628abytes\u53d8\u4e3astr\uff0c\u5c31\u9700\u8981\u7528 decode() \u65b9\u6cd5\uff1a b 'ABC' . decode ( 'ascii' ) 'ABC' b ' \\xe4\\xb8\\xad\\xe6\\x96\\x87 ' . decode ( 'utf-8' ) '\u4e2d\u6587' \u5982\u679cbytes\u4e2d\u5305\u542b\u65e0\u6cd5\u89e3\u7801\u7684\u5b57\u8282\uff0c decode() \u65b9\u6cd5\u4f1a\u62a5\u9519\uff1a b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' ) ---------------------------------------------------------------------------UnicodeDecodeError Traceback (most recent call last)<ipython-input-1-cd8de1b11dcd> in <module> ----> 1 b'\\xe4\\xb8\\xad\\xff'.decode('utf-8') UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte \u4f46\u662f\uff0c\u5982\u679cbytes\u4e2d\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u65e0\u6548\u7684\u5b57\u8282\uff0c\u53ef\u4ee5\u4f20\u5165 errors = 'ignore' \u5ffd\u7565\u9519\u8bef\u7684\u5b57\u8282\uff1a \"\u4e2d\" . encode ( \"utf-8\" ) # \u4e2d \u539f\u6765\u7684\u7f16\u7801 b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' , errors = 'ignore' ) '\u4e2d' \u5728\u5bf9str\u548cbytes\u4e92\u76f8\u8f6c\u6362\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c\u5e94\u8be5\u4f7f\u7528UTF-8\u7f16\u7801\u5bf9str\u548cbytes\u8fdb\u884c\u8f6c\u6362\u3002 \u7531\u4e8ePython\u6e90\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u6240\u4ee5\uff0c\u5f53\u4f60\u7684\u6e90\u4ee3\u7801\u4e2d\u5305\u542b\u4e2d\u6587\u7684\u65f6\u5019\uff0c\u5728\u4fdd\u5b58\u6e90\u4ee3\u7801\u65f6\uff0c\u5c31\u9700\u8981\u52a1\u5fc5\u6307\u5b9a\u4fdd\u5b58\u4e3aUTF-8\u7f16\u7801\u3002\u5f53Python\u89e3\u91ca\u5668\u8bfb\u53d6\u6e90\u4ee3\u7801\u65f6\uff0c\u4e3a\u4e86\u8ba9\u5b83\u6309UTF-8\u7f16\u7801\u8bfb\u53d6\uff0c\u6211\u4eec\u901a\u5e38\u5728\u6587\u4ef6\u5f00\u5934\u5199\u4e0a\u8fd9\u4e24\u884c\uff1a # !/usr/bin/env python3 # -*- coding: utf-8 -*- \u7b2c\u4e00\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Linux/OS X\u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2aPython\u53ef\u6267\u884c\u7a0b\u5e8f\uff0cWindows\u7cfb\u7edf\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u6ce8\u91ca\u3002\u7b2c\u4e8c\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Python\u89e3\u91ca\u5668\uff0c\u6309\u7167UTF-8\u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5426\u5219\uff0c\u5728\u6e90\u4ee3\u7801\u4e2d\u5199\u7684\u4e2d\u6587\u8f93\u51fa\u53ef\u80fd\u4f1a\u6709\u4e71\u7801\u3002 \u4f46\u662f\u7533\u660e\u4e86UTF-8\u7f16\u7801\u53ea\u662f\u8ba9Python\u89e3\u91ca\u5668\u6309UTF-8\u7684\u7f16\u7801\u89c4\u5219\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u6e90\u4ee3\u7801\u4e00\u5b9a\u662f\u4f7f\u7528UT8-8\u7f16\u7801\u4fdd\u5b58\u7684\uff0c\u5fc5\u987b\u5e76\u4e14\u8981\u786e\u4fdd\u6587\u672c\u7f16\u8f91\u5668\u6b63\u5728\u4f7f\u7528UTF-8\u7f16\u7801\u3002 \u683c\u5f0f\u5316 C printf \u6837\u5f0f\u7684\u683c\u5f0f\u5316 \u5b57\u7b26\u4e32\u5177\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u5185\u7f6e\u64cd\u4f5c\uff1a\u4f7f\u7528 % (\u53d6\u6a21)\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6 % \u4e5f\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u8fd0\u7b97\u7b26\u6216\u63d2\u503c\u8fd0\u7b97\u7b26\u3002\u5bf9\u4e8eformat % values(\u5176\u4e2dformat\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32)\uff0c\u5728format\u4e2d\u7684 % \u8f6c\u6362\u6807\u8bb0\u7b26\u5c06\u88ab\u66ff\u6362\u4e3a\u96f6\u4e2a\u6216\u591a\u4e2avalues\u6761\u76ee\u3002 \u5176\u6548\u679c\u7c7b\u4f3c\u4e8e\u5728C\u8bed\u8a00\u4e2d\u4f7f\u7528sprintf()\u3002 'Hello, %s ' % 'world' # \u7701\u7565\u62ec\u53f7 'Hello, world' 'Hi, %s , you have $ %d ' % ( 'Michael' , 10000.58 ) 'Hi, Michael, you have $10000' \u8f6c\u6362\u6807\u8bb0\u7b26 \u5305\u542b\u4e24\u4e2a\u6216\u66f4\u591a\u5b57\u7b26\uff0c\u7531\u4ee5\u4e0b\u5143\u7d20\u7ec4\u6210\uff0c\u4e14\u5fc5\u987b\u9075\u5faa\u6b64\u5904\u89c4\u5b9a\u7684\u987a\u5e8f\uff1a % \u5b57\u7b26\uff0c\u7528\u4e8e\u6807\u8bb0\u8f6c\u6362\u7b26\u7684\u8d77\u59cb\u3002 \u6620\u5c04\u952e\uff08\u53ef\u9009\uff09\uff0c\u7531\u52a0\u5706\u62ec\u53f7\u7684\u5b57\u7b26\u5e8f\u5217\u7ec4\u6210(\u4f8b\u5982(somename))\u3002 \u8f6c\u6362\u6807\u5fd7\uff08\u53ef\u9009\uff09 - \u8868\u793a\u5de6\u5bf9\u9f50 + \u8868\u793a\u8f6c\u6362\u540e\u7684\u5185\u5bb9\u524d\u65b9\u52a0\u4e0a\u6b63\u8d1f\u53f7 \u7a7a\u683c \u8868\u793a\u6b63\u6570\u524d\u65b9\u4fdd\u7559\u4e00\u4e2a\u7a7a\u683c 0 \u8868\u793a\u5982\u679c\u8f6c\u6362\u4f4d\u7f6e\u4f4d\u6570\u4e0d\u591f\u65f6\uff0c\u75280\u586b\u5145 \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u8f6c\u6362\u540e\u5b57\u6bb5\u7684\u6700\u5c0f\u5bbd\u5ea6\uff0c\u5982\u679c\u4e0d\u8db3\u81ea\u52a8\u7528\u7a7a\u683c\u8865\u9f50\uff1b\u5982\u679c\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u503c\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u7cbe\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u5728 . \u4e4b\u540e\u52a0\u7cbe\u5ea6\u503c\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\u5982\u679c\u6307\u5b9a\u4e3a\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u957f\u5ea6\u4fee\u9970\u7b26\uff08\u53ef\u9009\uff09\u3002 \u8f6c\u6362\u7c7b\u578b\u3002 Conversion Meaning d \u683c\u5f0f\u5316\u6574\u6570 i \u683c\u5f0f\u5316\u6574\u6570 o 8 \u8fdb\u5236 u \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u6574\u578b(\u5df2\u8fc7\u65f6) x 16 \u8fdb\u5236\uff0c \u5c0f\u5199\u5b57\u6bcd X 16 \u8fdb\u5236\uff0c \u5927\u5199\u5b57\u6bcd e \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5c0f\u5199\u5b57\u6bcd E \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5927\u5199\u5b57\u6bcd f \u6d6e\u70b9\u6570 F \u6d6e\u70b9\u6570 g \u6d6e\u70b9\u6570\uff0c \u5982\u679c\u6307\u6570\u5c0f\u4e8e -4 \u6216\u5c0f\u4e8e\u7cbe\u5ea6\uff0c \u5219\u4f7f\u7528\u5c0f\u5199\u6307\u6570\u683c\u5f0f\uff0c \u5426\u5219\u4f7f\u7528\u5c0f\u6570\u683c\u5f0f G \u6d6e\u70b9\u6570\uff0c \u7c7b\u4f3c g , \u4f7f\u7528\u5927\u5199\u6307\u6570 c \u5355\u4e2a\u5b57\u7b26\uff0c \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176 ASCII \u7801 r \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 repr() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 s \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 str() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 % % \u5b57\u7b26 # \u6620\u5c04\u952e ## \u5982\u679c\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u90a3\u4e48\u5fc5\u987b\u4f7f\u7528\u6620\u5c04\u952e. \u5982\uff1a print ( ' %(num)d ' % { \"num\" : 10 }) 10 # \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6 print ( ' %2s ' % 123456 ) print ( ' %8s ' % 123456 ) print ( ' %*s ' % ( 10 , 123456 )) 123456 123456 123456 # \u7cbe\u5ea6 print ( ' %.2f ' % 100.256 ) print ( ' %.*f ' % ( 2 , 100.256 )) 100.26 100.26 # \u8f6c\u6362\u6807\u5fd7 print ( ' %-8d ' % 123456 ) print ( ' %+8d ' % 123456 ) print ( ' %08d ' % 123456 ) 123456 +123456 00123456 format\u65b9\u6cd5 < \u6a21\u677f\u5b57\u7b26\u4e32 >. format ( < \u9017\u53f7\u5206\u9694\u7684\u53c2\u6570 > ) <\u6a21\u677f\u5b57\u7b26\u4e32> \u7531\u4e00\u7cfb\u5217\u7684\u69fd {} \u7ec4\u6210\uff0c\u7528\u6765\u63a7\u5236\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u503c\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u5c06format()\u65b9\u6cd5\u7684 <\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570> \u4e2d\u7684\u53c2\u6570\u6309\u7167\u5e8f\u53f7\u5173\u7cfb\u66ff\u6362\u5230 <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u4e2d\u3002\u5982\u679c\u5927\u62ec\u53f7\u4e2d\u6ca1\u6709\u5e8f\u53f7\uff0c\u5219\u6309\u7167\u51fa\u73b0\u987a\u5e8f\u66ff\u6362\u3002\u8be5\u65b9\u6cd5\u4f1a\u521b\u5efa\u65b0\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u4fee\u6539\u539f\u503c\u3002 {}\u4e2d\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u6307\u5b9a\u7684\u987a\u5e8f\u66ff\u6362 print ( \" {2} : {1} : {0} \" . format ( \"1\" , \"2\" , \"3\" )) 3 : 2 : 1 \u6ca1\u6709\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u51fa\u73b0\u7684\u987a\u5e8f\u4f9d\u6b21\u66ff\u6362 print ( \" {} : {} : {} \" . format ( \"1\" , \"2\" , \"3\" )) # \u7b49\u4ef7\u4e8e # \"{1}:{2}:{3}\".format(\"1\", \"2\", \"3\") 1 : 2 : 3 format()\u65b9\u6cd5\u4e2d <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u9664\u4e86\u5305\u62ec\u53c2\u6570\u5e8f\u53f7\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u683c\u5f0f\u63a7\u5236\u4fe1\u606f\u3002\u69fd\u5185\u90e8\u7684\u5b8c\u6574\u6837\u5f0f\u5982\u4e0b\uff1a \u66ff\u6362\u5b57\u6bb5 - replacement_field ::= \"{\" [ field_name ] [ \"!\" conversion ] [ \":\" format_spec ] \"}\" \u5b57\u6bb5\u540d - field_name ::= arg_name ( \".\" attribute_name | \"[\" element_index \"]\" ) * \u53c2\u6570\u540d - arg_name ::= [ identifier | integer ] \u5c5e\u6027\u540d - attribute_name ::= identifier \u5143\u7d20\u7d22\u5f15 - element_index ::= integer | index_string \u7d22\u5f15\u5b57\u7b26\u4e32 - index_string ::= < any source character except \"]\" > + \u8f6c\u6362\u5b57\u6bb5 - conversion ::= \"r\" | \"s\" \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26 - format_spec ::= < described in the next section > \u4e00\u4e2a\u69fd {} \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a field_name : \u5b57\u6bb5\u540d\u53ef\u4ee5\u662f arg_name\u3001attribute_name\u3001element_index\u4e4b\u4e2d\u7684\u4e00\u4e2a\u3002 arg_name \u53ef\u4ee5\u662f \u6574\u6570 \u6216 \u5173\u952e\u5b57 \u3002\u6574\u6570\u4e3a .format() \u7684\u4f4d\u7f6e\u53c2\u6570\uff0c \u5173\u952e\u5b57\u4e3a .format() \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5982\u679c .format() \u7684\u53c2\u6570\u5b58\u5728\u5c5e\u6027\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name.attribute_name \u7684\u5f62\u5f0f\u83b7\u53d6\u5c5e\u6027\u503c\u3002 \u5982\u679c .format() \u53c2\u6570\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name[integer|index_string] \u7684\u5f62\u5f0f\u83b7\u53d6\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u3002 conversion : \u8f6c\u6362\u5b57\u6bb5\u7531 ! \u5f00\u59cb\uff0c r \u4ee3\u8868\u8c03\u7528 repr() , s \u4ee3\u8868\u8c03\u7528 str() \u3002 format_spec : \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26\u7531 : \u5f00\u59cb\u3002 # field_name \u662f \u5173\u952e\u5b57 print ( \" {name!r} \" . format ( name = \"\u5c0f\u660e\" )) # field_name \u662f \u6574\u6570 print ( \" {0!s} \" . format ( \"\u5c0f\u660e\" )) # field_name \u662f \u5c5e\u6027\u540d class Person : name = \"\u5c0f\u660e\" print ( \"{.name!s}\" . format ( Person )) # field_name \u662f \u6574\u6570\u7d22\u5f15 names = [ \"\u5c0f\u7ea2\" , \"\u5c0f\u660e\" ] print ( \"{[1]!s}\" . format ( names )) # field_name \u662f \u5b57\u7b26\u4e32\u7d22\u5f15 from pandas import Series names = Series ({ \"name\" : \"\u5c0f\u660e\" }) print ( \"{[name]!s}\" . format ( names )) '\u5c0f\u660e' \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5176\u4e2d\uff0c <\u683c\u5f0f\u63a7\u5236\u6807\u8bb0> \u7528\u6765\u63a7\u5236\u53c2\u6570\u663e\u793a\u65f6\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u5982\u4e0b\uff1a format_spec ::= [ [fill ] align ] [ sign ][ # ][ 0 ][ width ][ grouping_option ][ .precision ][ type ] fill ::= < any character > align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit + grouping_option ::= \"_\" | \",\" precision ::= digit + type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" \u586b\u5145\u5b57\u7b26 \uff1a\u5982\u679c\u6307\u5b9a\u4e86\u5bf9\u9f50\u9009\u9879\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u586b\u5145\u5b57\u7b26\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u683c. \u5bf9\u9f50\u9009\u9879 \uff1a\u9ed8\u8ba4\u53f3\u5bf9\u9f50\uff0c\u5404\u79cd\u5bf9\u9f50\u9009\u9879\u7684\u542b\u4e49\u5982\u4e0b\uff1a \u9009\u9879 \u610f\u4e49 '<' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5de6\u5bf9\u9f50\uff08\u8fd9\u662f\u5927\u591a\u6570\u5bf9\u8c61\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '>' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u53f3\u5bf9\u9f50\uff08\u8fd9\u662f\u6570\u5b57\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '=' \u5f3a\u5236\u5c06\u586b\u5145\u653e\u7f6e\u5728\u7b26\u53f7\uff08\u5982\u679c\u6709\uff09\u4e4b\u540e\u4f46\u5728\u6570\u5b57\u4e4b\u524d\u3002\u8fd9\u7528\u4e8e\u4ee5\u201c+000000120\u201d\u5f62\u5f0f\u6253\u5370\u5b57\u6bb5\u3002\u6b64\u5bf9\u9f50\u9009\u9879\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\u3002\u5f53'0'\u7d27\u63a5\u5728\u5b57\u6bb5\u5bbd\u5ea6\u4e4b\u524d\u65f6\uff0c\u5b83\u6210\u4e3a\u9ed8\u8ba4\u503c\u3002 '^' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5c45\u4e2d\u3002 sign \uff1a\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a \u9009\u9879 \u610f\u4e49 '+' \u8868\u793a\u6807\u5fd7\u5e94\u8be5\u7528\u4e8e\u6b63\u6570\u548c\u8d1f\u6570\u3002 '-' \u8868\u793a\u6807\u5fd7\u5e94\u4ec5\u7528\u4e8e\u8d1f\u6570\uff08\u8fd9\u662f\u9ed8\u8ba4\u884c\u4e3a\uff09\u3002 space \u8868\u793a\u5e94\u5728\u6b63\u6570\u4e0a\u4f7f\u7528\u524d\u5bfc\u7a7a\u683c\uff0c\u5728\u8d1f\u6570\u4e0a\u4f7f\u7528\u51cf\u53f7\u3002 # \uff1a\u4ec5\u9002\u7528\u4e8e\u6570\u5b57\u53c2\u6570\uff0c\u540c\u65f6\u4ec5\u9002\u7528\u4e8e2\u30018\u300116\u8fdb\u5236\u7684\u6570\u5b57\u3002\u4f1a\u5728\u8f93\u51fa\u7684\u6570\u5b57\u524d\u6dfb\u52a0 0b\u30010o\u30010x\u524d\u7f00\u3002 \u5bbd\u5ea6 \uff1a\u6307\u5b9a\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u3002 \u5343\u4f4d\u5206\u9694\u7b26 \uff1a\u53ea\u80fd\u4f7f\u7528 _ \u6216 , \u4f5c\u4e3a\u5343\u4f4d\u5206\u9694\u7b26\u3002 \u7cbe\u5ea6 \uff1a \u7c7b\u578b \uff1a\u8be5\u9009\u9879\u51b3\u5b9a\u4e86\u6570\u636e\u5e94\u8be5\u5982\u4f55\u5448\u73b0\u3002 \u53ef\u7528\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7c7b\u578b\uff1a Type Meaning s \u5b57\u7b26\u4e32\u683c\u5f0f\uff0c \u5b57\u7b26\u4e32\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c \u53ef\u7701\u7565 None \u540c s \u53ef\u7528\u7684\u6574\u6570\u8868\u793a\u7c7b\u578b\uff1a Type Meaning b \u8f93\u51fa\u4e3a 2 \u8fdb\u5236\u6574\u6570 c \u8f93\u51fa\u4e3a\u4e3a\u76f8\u5e94\u7684 unicode \u5b57\u7b26 d \u8f93\u51fa\u4e3a 10 \u8fdb\u5236\u6574\u6570 o \u8f93\u51fa\u4e3a 8 \u8fdb\u5236\u6574\u6570 x \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd X \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5927\u5199\u5b57\u6bcd n \u7c7b\u4f3c d , \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 None \u540c d \u53ef\u7528\u7684\u6d6e\u70b9\u6570\u548c\u5c0f\u6570\u503c\u8868\u793a\u7c7b\u578b\uff1a Type Meaning e \u6307\u6570\u8868\u793a\u6cd5\uff0c \u4f7f\u7528\u5b57\u6bcd e \u4ee5\u79d1\u5b66\u8bb0\u6570\u6cd5\u6253\u5370\u6570\u5b57\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 E \u7c7b\u4f3c e , \u4f7f\u7528\u5b57\u6bcd E f \u6d6e\u70b9\u6570\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 F \u6d6e\u70b9\u6570\uff0c \u540c f g \u4e00\u822c\u5f62\u5f0f\uff0c \u53d7 precision \u9009\u9879\u5f71\u54cd G \u7c7b\u4f3c g , \u5f53\u4f7f\u7528\u6307\u6570\u8868\u793a\u6cd5\u65f6\uff0c \u4f7f\u7528 E \u800c\u4e0d\u662f e n \u548c g \u76f8\u540c\uff0c \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 % \u767e\u5206\u6570\u8868\u793a None \u540c g # \u586b\u5145\u3001\u5bf9\u9f50\u3001\u7b26\u53f7\u3001\u5bbd\u5ea6\u3001\u5206\u7ec4\u9009\u9879\u3001\u7cbe\u5ea6 # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*^+20.2f} \" . format ( 120 ) '******+120.00*******' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001_\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \"{0:*^+20_.2f}\" . format ( 12000 ) '*****+12_000.00*****' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001,\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \" {0:*^+20,.2f} \" . format ( 12000 ) '*****+12,000.00*****' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*<+20.2f} \" . format ( - 120 ) '-120.00*************' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u8d1f\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*>-20.2f} \" . format ( - 120 ) '*************-120.00' \u65b9\u6cd5 \u903b\u8f91\u65b9\u6cd5 \u65b9\u6cd5 \u63cf\u8ff0 .isalnum if all characters in the string are alpha-numeric and there is at least one character .isalpha if all characters in the string are alphabetic and there is at least one character .isnumeric if all characters in the string are numeric and there is at least one character .isascii ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too . .isdecimal if all characters in the string are decimal and there is at least one character .isdigit if all characters in the string are digits and there is at least one character .isidentifier Use keyword.iskeyword() to test for reserved identifiers such as \"def\" and \"class\". .islower if all cased characters in the string are lowercase and there is at least one cased character .isupper if all cased characters in the string are uppercase and there is at least one cased character .isprintable if all of its characters are considered printable in repr() or if it is empty. .isspace if all characters in the string are whitespace and there is at least one character .istitle In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones. \u65b9\u6cd5 \u63cf\u8ff0 .startswith(prefix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 prefix \u5f00\u5934 .endswith(suffix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 suffix \u7ed3\u5c3e \u5927\u5c0f\u5b57\u6bcd\u8f6c\u6362 \u65b9\u6cd5 \u63cf\u8ff0 .lower \u8fd4\u56de\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .upper \u8fd4\u56de\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .capitalize \u4f7f\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4f59\u5b57\u7b26\u5b57\u6bcd\u5c0f\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .swapcase \u5c06\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5c06\u5c0f\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5927\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .title \u6bcf\u4e2a\u5355\u8bcd\u90fd\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u8fd4\u56de\u526f\u672c\u3002 \u62c6\u5206\u5b57\u7b26\u4e32 \u65b9\u6cd5 \u63cf\u8ff0 .split(sep=None, maxsplit=-1) \u4ece\u5de6\u5230\u53f3\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .rsplit(sep=None, maxsplit=-1) \u4ece\u53f3\u5230\u5de6\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .splitlines(keepends=False) \u4ee5\u56de\u8f66\u7b26\u6216\u6362\u884c\u7b26\u5206\u5272\u5b57\u7b26\u4e32 .partition(sep, /) \u4ece\u5de6\u5230\u53f3\u4ee5\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684 sep \u5206\u5272\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5305\u62ec3\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 \"123#456#789\" . split ( sep = \"#\" , maxsplit = 1 ) ['123', '456#789'] \"123#456#789\" . rsplit ( sep = \"#\" , maxsplit = 1 ) ['123#456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = False ) ['123', '456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = True ) ['123\\r\\n', '456\\r\\n', '789'] \"123#456#789\" . partition ( \"#\" ) ('123', '#', '456#789') \u5408\u5e76\u5b57\u7b26\u4e32 \"_\" . join ([ \"a\" , \"b\" , \"c\" ]) 'a_b_c' \u66ff\u6362\u5b57\u7b26\u4e32 \u65b9\u6cd5 \u63cf\u8ff0 .replace(old, new, count=-1) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32 old \u90fd\u66ff\u6362\u4e3a new \u3002 .strip(chars=None) \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\u5220\u9664\u3002 .lstrip(chars=None) \u8fd4\u56de\u5220\u9664\u524d\u5bfc\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .rstrip(chars=None) \u8fd4\u56de\u5220\u9664\u5c3e\u968f\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .expandtabs(tabsize=8) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5236\u8868\u7b26\u90fd\u4f7f\u7528 tabsize \u4e2a\u7a7a\u683c\u4ee3\u66ff\u3002 \" \\n abc \\t\\n\\r \" . strip () 'abc' \" \\n abc \\t\\n\\r \" . lstrip () 'abc\\t\\n\\r ' \" \\n abc \\t\\n\\r \" . rstrip () ' \\nabc' \" \\n abc \\t\\n\\r \" . expandtabs ( tabsize = 8 ) ' \\nabc \\n\\r ' \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u65b9\u6cd5 \u63cf\u8ff0 .format \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .format_map \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .ljust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5de6\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .rjust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u53f3\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .center(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5c45\u4e2d\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .zfill(width) \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u957f\u5ea6\u4e0d\u591f\uff0c\u7528\u96f6\u4ece\u5de6\u8fb9\u586b\u5145\u3002 .format_map \u4e0e .format \u5728\u7528\u6cd5\u4e0a\u5927\u4f53\u4e00\u81f4\uff0c\u4f46\u6709\u4e00\u4e2a\u533a\u522b\uff1a # format_map \u548c format \u7684\u533a\u522b # \u5982\u679c\u8981\u4f7f\u7528\u5173\u952e\u5b57 format\u5fc5\u987b\u8fd9\u6837\u4f7f\u7528 \" {name} , {sex} \" . format ( name = \"Jack\" , sex = \"male\" ) # format_map \u53ef\u4ee5\u7528dict \" {name} , {sex} \" . format_map ({ \"name\" : \"Jack\" , \"sex\" : \"male\" }) 'Jack, male' print ( \"abc\" . ljust ( 10 , \"#\" )) print ( \"abc\" . rjust ( 10 , \"#\" )) print ( \"abc\" . center ( 10 , \"#\" )) print ( \"123\" . zfill ( 10 )) # \u975e\u6570\u5b57\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5 print ( \"abc\" . zfill ( 10 )) abc####### #######abc ###abc#### 0000000123 0000000abc \u7edf\u8ba1\u5b50\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570 \"abcAbc\" . count ( \"c\" , 0 , 6 ) 2 \u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e .index \u4e0e .find \u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7 .index \u65b9\u6cd5\u82e5\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u4f1a\u629b\u51faValueError\uff0c\u800c .find \u4f1a\u8fd4\u56de -1 \u3002 \"abcAbc\" . index ( \"bc\" , 0 , 6 ) \"abcAbc\" . find ( \"bc\" , 0 , 6 ) 1 \"abcAbc\" . index ( \"bc\" , 0 , 2 ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-f8cead4644a3> in <module> ----> 1 \"abcAbc\".index(\"bc\", 0, 2) ValueError: substring not found \"abcAbc\" . find ( \"bc\" , 0 , 2 ) -1","title":"2.4.String"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_1","text":"str_1 = \"\"\" \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \u8fd9\u662f\u7b2c\u4e8c\u884c \"\"\" print ( str_1 ) str_2 = \" \\n \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \\n \u8fd9\u662f\u7b2c\u4e8c\u884c \\n \" print ( str_2 ) str_1 == str_2 \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \u8fd9\u662f\u7b2c\u4e8c\u884c \u8fd9\u662f\u4e00\u4e2a\u591a\u884c\u5b57\u7b26\u4e32 \u8fd9\u662f\u7b2c\u4e8c\u884c True","title":"\u591a\u884c\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_2","text":"\u5982\u679c\u8981\u5728\u5b57\u7b26\u4e32\u91cc\u9762\u8f93\u5165\u7279\u6b8a\u5b57\u7b26\uff0c\u9700\u8981\u4f7f\u7528\u8f6c\u4e49\u7b26\\\uff0c\u4f8b\u5982\u8f93\u5165\u8f6c\u4e49\u7b26\u672c\u8eab\uff1a str_3 = \"12 \\\\ 14\" print ( str_3 ) 12\\14","title":"\u8f6c\u4e49"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_3","text":"\u5728Python\u4e2d\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u6dfb\u52a0\u524d\u7f00 r\\R \u3001 b \u3001 u\\U \u3001 f \u3002 r\\R \uff1a\u8868\u793a\u975e\u8f6c\u4e49\u7684\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u5e38\u7528\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 b \uff1aPython3\u91cc\u9ed8\u8ba4\u7684str\u662f(Python2\u91cc\u7684)unicode\uff0cbytes\u662f(Python2)\u7684str\uff0c b\u524d\u7f00\u4ee3\u8868\u7684\u5c31\u662fbytes\u3002Python2\u91cc, b\u524d\u7f00\u6ca1\u4ec0\u4e48\u5177\u4f53\u610f\u4e49\uff0c\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9Python3\u7684\u8fd9\u79cd\u5199\u6cd5 \u3002 u\\U \uff1a\u8868\u793aunicode\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u662f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884cunicode\u7f16\u7801\u3002 \u4e00\u822c\u82f1\u6587\u5b57\u7b26\u5728\u4f7f\u7528\u5404\u79cd\u7f16\u7801\u4e0b, \u57fa\u672c\u90fd\u53ef\u4ee5\u6b63\u5e38\u89e3\u6790, \u6240\u4ee5\u4e00\u822c\u4e0d\u5e26u\uff1b\u4f46\u662f\u4e2d\u6587, \u5fc5\u987b\u8868\u660e\u6240\u9700\u7f16\u7801, \u5426\u5219\u4e00\u65e6\u7f16\u7801\u8f6c\u6362\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\u5efa\u8bae\u6240\u6709\u7f16\u7801\u65b9\u5f0f\u91c7\u7528UTF-8\u3002 f \uff1a\u8868\u793a f \u683c\u5f0f\u5b57\u7b26\u4e32\u3002","title":"\u524d\u7f00"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_4","text":"Python\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u79cd\u5b58\u50a8\u6587\u672c\uff0c\u4e00\u79cd\u5b58\u50a8\u5b57\u8282\u3002\u5bf9\u4e8e\u6587\u672c\uff0cPython\u5185\u90e8\u91c7\u7528Unicode\u5b58\u50a8\uff0c\u800c\u5b57\u8282\u5b57\u7b26\u4e32\u663e\u793a\u539f\u59cb\u5b57\u8282\u5e8f\u5217\u6216\u8005ASCII\u3002\u5728Python3\u5f53\u4e2d\uff0c\u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b\uff08\u4f7f\u7528Unicode\u6570\u636e\u5b58\u50a8\uff09\u88ab\u547d\u540d\u4e3a str , \u5b57\u8282\u5b57\u7b26\u4e32\u7c7b\u578b\u88ab\u547d\u540d\u4e3a bytes \u3002\u4f46\u5728python2\u4e2d\uff0c\u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b\u53eb\u505a unicode \uff0c\u5b57\u8282\u5b57\u7b26\u4e32\u7c7b\u578b\u53eb\u505a str \u3002\u4e5f\u5c31\u662f\u8bf4\uff1a $$ \\begin{array}{} \\text{Python 3}\\ \\mathbf{str} &\\Longleftrightarrow \\text{Python 2}\\ \\mathbf{unicode} \\\\ \\text{Python 3}\\ \\mathbf{bytes} &\\Longleftrightarrow \\text{Python 2}\\ \\mathbf{str} \\end{array} $$ \u6240\u4ee5\uff0c\u5982\u679c\u60f3\u5c06\u4ee5unicode\u5f62\u5f0f\u50a8\u5b58\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u5c06unicode\u5b57\u7b26\u4e32\u7f16\u7801\uff0c\u53cd\u4e4b\uff0c\u5219\u9700\u8981\u89e3\u7801\u3002 \u7f16\u7801\uff1a\u5728python\u4e2d\uff0c\u7f16\u7801\u6307\u7684\u662f\u5c06Unicode\u5b57\u7b26\u6309\u7167\u7f16\u7801\u89c4\u5219\uff08\u5982UTF-8\uff09\u7f16\u6210\u4e8c\u8fdb\u5236\u5e8f\u5217\u3002 \u5728python3\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32 str_1 = \"\u4e2d\u56fd\" # \u7f16\u7801 str_1 . encode () b'\\xe4\\xb8\\xad\\xe5\\x9b\\xbd' # \u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 str_2 = b ' \\xe4\\xb8\\xad\\xe5\\x9b\\xbd ' # \u89e3\u7801 str_2 . decode () '\u4e2d\u56fd'","title":"\u5b57\u7b26\u7f16\u7801"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#bytes","text":"\u6587\u672c\u5b57\u7b26\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u4ee5Unicode\u8868\u793a\uff0c\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u82e5\u5e72\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8981\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\uff0c\u6216\u8005\u4fdd\u5b58\u5230\u78c1\u76d8\u4e0a\uff0c\u5c31\u9700\u8981\u628a str \u53d8\u4e3a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684 bytes \u3002 Python3\u5bf9 bytes \u7c7b\u578b\u7684\u6570\u636e\u7528\u5e26 b \u524d\u7f00\u7684\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u8868\u793a\u3002 bytes_8 = b \"ABC\" bytes_8 b'ABC' \u8981\u6ce8\u610f\u7684\u662f\uff1abytes\u5b57\u9762\u503c\u4e2d\u53ea\u5141\u8bb8ASCII\u5b57\u7b26\uff08\u65e0\u8bba\u6e90\u4ee3\u7801\u58f0\u660e\u7684\u7f16\u7801\u4e3a\u4f55\uff09\u3002\u4efb\u4f55\u8d85\u51fa127\u7684\u4e8c\u8fdb\u5236\u503c\u5fc5\u987b\u4f7f\u7528\u76f8\u5e94\u7684\u8f6c\u4e49\u5e8f\u5217\u5f62\u5f0f\u52a0\u5165bytes\u5b57\u9762\u503c\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5bf9str\uff08unicode\u7c7b\u578b\uff09\u5bf9\u8c61\u4f7f\u7528 encode() \u65b9\u6cd5\uff0c\u7f16\u7801\u4e3abytes\u7684\u5f62\u5f0f\uff0816\u8fdb\u5236\u8868\u793a\uff09\u3002 '\u4e2d\u6587' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' \u8981\u6ce8\u610f\u7684\u662f\uff0c encode \u7684\u5bf9\u8c61\u4e0d\u80fd\u8d85\u51fa\u6307\u5b9a\u7f16\u7801\u7684\u8303\u56f4\uff0c\u4f8b\u5982\u4e0d\u80fd\u5bf9\u4e2d\u6587\u5b57\u7b26\u4f7f\u7528 .encode(\"ascii\") \uff0c\u56e0\u4e3a\u4e2d\u6587\u4e0d\u5728ascii\u7801\u7684\u8303\u56f4\u5185\u3002 '\u4e2d\u6587' . encode ( 'ascii' ) ---------------------------------------------------------------------------UnicodeEncodeError Traceback (most recent call last)<ipython-input-1-76f41cd8dafa> in <module> ----> 1 '\u4e2d\u6587'.encode('ascii') UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) \u7eaf\u82f1\u6587\u7684str\u53ef\u4ee5\u7528ASCII\u7f16\u7801\u4e3abytes\uff0c\u5185\u5bb9\u662f\u4e00\u6837\u7684\uff0c\u4f46\u65e0\u6cd5\u663e\u793a\u4e3aASCII\u5b57\u7b26\u7684\u5b57\u8282\uff0c\u7528 \\x \u663e\u793a\uff0816\u8fdb\u5236\u8f6c\u4e49\u8868\u793a\uff09\u3002 'ABC' . encode ( 'ascii' ) b'ABC' '\u4e2d\u6587' . encode ( 'utf-8' ) b'\\xe4\\xb8\\xad\\xe6\\x96\\x87' \u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6211\u4eec\u4ece\u7f51\u7edc\u6216\u78c1\u76d8\u4e0a\u8bfb\u53d6\u4e86\u5b57\u8282\u6d41\uff0c\u90a3\u4e48\u8bfb\u5230\u7684\u6570\u636e\u5c31\u662fbytes\u3002\u8981\u628abytes\u53d8\u4e3astr\uff0c\u5c31\u9700\u8981\u7528 decode() \u65b9\u6cd5\uff1a b 'ABC' . decode ( 'ascii' ) 'ABC' b ' \\xe4\\xb8\\xad\\xe6\\x96\\x87 ' . decode ( 'utf-8' ) '\u4e2d\u6587' \u5982\u679cbytes\u4e2d\u5305\u542b\u65e0\u6cd5\u89e3\u7801\u7684\u5b57\u8282\uff0c decode() \u65b9\u6cd5\u4f1a\u62a5\u9519\uff1a b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' ) ---------------------------------------------------------------------------UnicodeDecodeError Traceback (most recent call last)<ipython-input-1-cd8de1b11dcd> in <module> ----> 1 b'\\xe4\\xb8\\xad\\xff'.decode('utf-8') UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 3: invalid start byte \u4f46\u662f\uff0c\u5982\u679cbytes\u4e2d\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u65e0\u6548\u7684\u5b57\u8282\uff0c\u53ef\u4ee5\u4f20\u5165 errors = 'ignore' \u5ffd\u7565\u9519\u8bef\u7684\u5b57\u8282\uff1a \"\u4e2d\" . encode ( \"utf-8\" ) # \u4e2d \u539f\u6765\u7684\u7f16\u7801 b ' \\xe4\\xb8\\xad\\xff ' . decode ( 'utf-8' , errors = 'ignore' ) '\u4e2d' \u5728\u5bf9str\u548cbytes\u4e92\u76f8\u8f6c\u6362\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c\u5e94\u8be5\u4f7f\u7528UTF-8\u7f16\u7801\u5bf9str\u548cbytes\u8fdb\u884c\u8f6c\u6362\u3002 \u7531\u4e8ePython\u6e90\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u6240\u4ee5\uff0c\u5f53\u4f60\u7684\u6e90\u4ee3\u7801\u4e2d\u5305\u542b\u4e2d\u6587\u7684\u65f6\u5019\uff0c\u5728\u4fdd\u5b58\u6e90\u4ee3\u7801\u65f6\uff0c\u5c31\u9700\u8981\u52a1\u5fc5\u6307\u5b9a\u4fdd\u5b58\u4e3aUTF-8\u7f16\u7801\u3002\u5f53Python\u89e3\u91ca\u5668\u8bfb\u53d6\u6e90\u4ee3\u7801\u65f6\uff0c\u4e3a\u4e86\u8ba9\u5b83\u6309UTF-8\u7f16\u7801\u8bfb\u53d6\uff0c\u6211\u4eec\u901a\u5e38\u5728\u6587\u4ef6\u5f00\u5934\u5199\u4e0a\u8fd9\u4e24\u884c\uff1a # !/usr/bin/env python3 # -*- coding: utf-8 -*- \u7b2c\u4e00\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Linux/OS X\u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2aPython\u53ef\u6267\u884c\u7a0b\u5e8f\uff0cWindows\u7cfb\u7edf\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u6ce8\u91ca\u3002\u7b2c\u4e8c\u884c\u6ce8\u91ca\u662f\u4e3a\u4e86\u544a\u8bc9Python\u89e3\u91ca\u5668\uff0c\u6309\u7167UTF-8\u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5426\u5219\uff0c\u5728\u6e90\u4ee3\u7801\u4e2d\u5199\u7684\u4e2d\u6587\u8f93\u51fa\u53ef\u80fd\u4f1a\u6709\u4e71\u7801\u3002 \u4f46\u662f\u7533\u660e\u4e86UTF-8\u7f16\u7801\u53ea\u662f\u8ba9Python\u89e3\u91ca\u5668\u6309UTF-8\u7684\u7f16\u7801\u89c4\u5219\u8bfb\u53d6\u6e90\u4ee3\u7801\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u6e90\u4ee3\u7801\u4e00\u5b9a\u662f\u4f7f\u7528UT8-8\u7f16\u7801\u4fdd\u5b58\u7684\uff0c\u5fc5\u987b\u5e76\u4e14\u8981\u786e\u4fdd\u6587\u672c\u7f16\u8f91\u5668\u6b63\u5728\u4f7f\u7528UTF-8\u7f16\u7801\u3002","title":"bytes\u5b57\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_5","text":"","title":"\u683c\u5f0f\u5316"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#c-printf","text":"\u5b57\u7b26\u4e32\u5177\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u5185\u7f6e\u64cd\u4f5c\uff1a\u4f7f\u7528 % (\u53d6\u6a21)\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6b64\u65f6 % \u4e5f\u88ab\u79f0\u4e3a\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u8fd0\u7b97\u7b26\u6216\u63d2\u503c\u8fd0\u7b97\u7b26\u3002\u5bf9\u4e8eformat % values(\u5176\u4e2dformat\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32)\uff0c\u5728format\u4e2d\u7684 % \u8f6c\u6362\u6807\u8bb0\u7b26\u5c06\u88ab\u66ff\u6362\u4e3a\u96f6\u4e2a\u6216\u591a\u4e2avalues\u6761\u76ee\u3002 \u5176\u6548\u679c\u7c7b\u4f3c\u4e8e\u5728C\u8bed\u8a00\u4e2d\u4f7f\u7528sprintf()\u3002 'Hello, %s ' % 'world' # \u7701\u7565\u62ec\u53f7 'Hello, world' 'Hi, %s , you have $ %d ' % ( 'Michael' , 10000.58 ) 'Hi, Michael, you have $10000' \u8f6c\u6362\u6807\u8bb0\u7b26 \u5305\u542b\u4e24\u4e2a\u6216\u66f4\u591a\u5b57\u7b26\uff0c\u7531\u4ee5\u4e0b\u5143\u7d20\u7ec4\u6210\uff0c\u4e14\u5fc5\u987b\u9075\u5faa\u6b64\u5904\u89c4\u5b9a\u7684\u987a\u5e8f\uff1a % \u5b57\u7b26\uff0c\u7528\u4e8e\u6807\u8bb0\u8f6c\u6362\u7b26\u7684\u8d77\u59cb\u3002 \u6620\u5c04\u952e\uff08\u53ef\u9009\uff09\uff0c\u7531\u52a0\u5706\u62ec\u53f7\u7684\u5b57\u7b26\u5e8f\u5217\u7ec4\u6210(\u4f8b\u5982(somename))\u3002 \u8f6c\u6362\u6807\u5fd7\uff08\u53ef\u9009\uff09 - \u8868\u793a\u5de6\u5bf9\u9f50 + \u8868\u793a\u8f6c\u6362\u540e\u7684\u5185\u5bb9\u524d\u65b9\u52a0\u4e0a\u6b63\u8d1f\u53f7 \u7a7a\u683c \u8868\u793a\u6b63\u6570\u524d\u65b9\u4fdd\u7559\u4e00\u4e2a\u7a7a\u683c 0 \u8868\u793a\u5982\u679c\u8f6c\u6362\u4f4d\u7f6e\u4f4d\u6570\u4e0d\u591f\u65f6\uff0c\u75280\u586b\u5145 \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u8f6c\u6362\u540e\u5b57\u6bb5\u7684\u6700\u5c0f\u5bbd\u5ea6\uff0c\u5982\u679c\u4e0d\u8db3\u81ea\u52a8\u7528\u7a7a\u683c\u8865\u9f50\uff1b\u5982\u679c\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u503c\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u7cbe\u5ea6\uff08\u53ef\u9009\uff09\uff0c\u5728 . \u4e4b\u540e\u52a0\u7cbe\u5ea6\u503c\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\u5982\u679c\u6307\u5b9a\u4e3a\u4e3a * \uff0c\u5219\u4ece\u5143\u7ec4\u4e2d\u8bfb\u53d6\u3002 \u957f\u5ea6\u4fee\u9970\u7b26\uff08\u53ef\u9009\uff09\u3002 \u8f6c\u6362\u7c7b\u578b\u3002 Conversion Meaning d \u683c\u5f0f\u5316\u6574\u6570 i \u683c\u5f0f\u5316\u6574\u6570 o 8 \u8fdb\u5236 u \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u6574\u578b(\u5df2\u8fc7\u65f6) x 16 \u8fdb\u5236\uff0c \u5c0f\u5199\u5b57\u6bcd X 16 \u8fdb\u5236\uff0c \u5927\u5199\u5b57\u6bcd e \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5c0f\u5199\u5b57\u6bcd E \u6d6e\u70b9\u6307\u6570\u683c\u5f0f\uff0c \u5927\u5199\u5b57\u6bcd f \u6d6e\u70b9\u6570 F \u6d6e\u70b9\u6570 g \u6d6e\u70b9\u6570\uff0c \u5982\u679c\u6307\u6570\u5c0f\u4e8e -4 \u6216\u5c0f\u4e8e\u7cbe\u5ea6\uff0c \u5219\u4f7f\u7528\u5c0f\u5199\u6307\u6570\u683c\u5f0f\uff0c \u5426\u5219\u4f7f\u7528\u5c0f\u6570\u683c\u5f0f G \u6d6e\u70b9\u6570\uff0c \u7c7b\u4f3c g , \u4f7f\u7528\u5927\u5199\u6307\u6570 c \u5355\u4e2a\u5b57\u7b26\uff0c \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176 ASCII \u7801 r \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 repr() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 s \u5b57\u7b26\u4e32\uff0c \u4f7f\u7528 str() \u8f6c\u6362\u4efb\u4f55 Python \u5bf9\u8c61 % % \u5b57\u7b26 # \u6620\u5c04\u952e ## \u5982\u679c\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u90a3\u4e48\u5fc5\u987b\u4f7f\u7528\u6620\u5c04\u952e. \u5982\uff1a print ( ' %(num)d ' % { \"num\" : 10 }) 10 # \u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6 print ( ' %2s ' % 123456 ) print ( ' %8s ' % 123456 ) print ( ' %*s ' % ( 10 , 123456 )) 123456 123456 123456 # \u7cbe\u5ea6 print ( ' %.2f ' % 100.256 ) print ( ' %.*f ' % ( 2 , 100.256 )) 100.26 100.26 # \u8f6c\u6362\u6807\u5fd7 print ( ' %-8d ' % 123456 ) print ( ' %+8d ' % 123456 ) print ( ' %08d ' % 123456 ) 123456 +123456 00123456","title":"C printf \u6837\u5f0f\u7684\u683c\u5f0f\u5316"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#format","text":"< \u6a21\u677f\u5b57\u7b26\u4e32 >. format ( < \u9017\u53f7\u5206\u9694\u7684\u53c2\u6570 > ) <\u6a21\u677f\u5b57\u7b26\u4e32> \u7531\u4e00\u7cfb\u5217\u7684\u69fd {} \u7ec4\u6210\uff0c\u7528\u6765\u63a7\u5236\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u503c\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u5c06format()\u65b9\u6cd5\u7684 <\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570> \u4e2d\u7684\u53c2\u6570\u6309\u7167\u5e8f\u53f7\u5173\u7cfb\u66ff\u6362\u5230 <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u4e2d\u3002\u5982\u679c\u5927\u62ec\u53f7\u4e2d\u6ca1\u6709\u5e8f\u53f7\uff0c\u5219\u6309\u7167\u51fa\u73b0\u987a\u5e8f\u66ff\u6362\u3002\u8be5\u65b9\u6cd5\u4f1a\u521b\u5efa\u65b0\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4e0d\u4f1a\u4fee\u6539\u539f\u503c\u3002 {}\u4e2d\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u6307\u5b9a\u7684\u987a\u5e8f\u66ff\u6362 print ( \" {2} : {1} : {0} \" . format ( \"1\" , \"2\" , \"3\" )) 3 : 2 : 1 \u6ca1\u6709\u6307\u5b9a\u987a\u5e8f\uff0c\u6309\u51fa\u73b0\u7684\u987a\u5e8f\u4f9d\u6b21\u66ff\u6362 print ( \" {} : {} : {} \" . format ( \"1\" , \"2\" , \"3\" )) # \u7b49\u4ef7\u4e8e # \"{1}:{2}:{3}\".format(\"1\", \"2\", \"3\") 1 : 2 : 3 format()\u65b9\u6cd5\u4e2d <\u6a21\u677f\u5b57\u7b26\u4e32> \u7684\u69fd\u9664\u4e86\u5305\u62ec\u53c2\u6570\u5e8f\u53f7\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u683c\u5f0f\u63a7\u5236\u4fe1\u606f\u3002\u69fd\u5185\u90e8\u7684\u5b8c\u6574\u6837\u5f0f\u5982\u4e0b\uff1a \u66ff\u6362\u5b57\u6bb5 - replacement_field ::= \"{\" [ field_name ] [ \"!\" conversion ] [ \":\" format_spec ] \"}\" \u5b57\u6bb5\u540d - field_name ::= arg_name ( \".\" attribute_name | \"[\" element_index \"]\" ) * \u53c2\u6570\u540d - arg_name ::= [ identifier | integer ] \u5c5e\u6027\u540d - attribute_name ::= identifier \u5143\u7d20\u7d22\u5f15 - element_index ::= integer | index_string \u7d22\u5f15\u5b57\u7b26\u4e32 - index_string ::= < any source character except \"]\" > + \u8f6c\u6362\u5b57\u6bb5 - conversion ::= \"r\" | \"s\" \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26 - format_spec ::= < described in the next section > \u4e00\u4e2a\u69fd {} \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a field_name : \u5b57\u6bb5\u540d\u53ef\u4ee5\u662f arg_name\u3001attribute_name\u3001element_index\u4e4b\u4e2d\u7684\u4e00\u4e2a\u3002 arg_name \u53ef\u4ee5\u662f \u6574\u6570 \u6216 \u5173\u952e\u5b57 \u3002\u6574\u6570\u4e3a .format() \u7684\u4f4d\u7f6e\u53c2\u6570\uff0c \u5173\u952e\u5b57\u4e3a .format() \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5982\u679c .format() \u7684\u53c2\u6570\u5b58\u5728\u5c5e\u6027\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name.attribute_name \u7684\u5f62\u5f0f\u83b7\u53d6\u5c5e\u6027\u503c\u3002 \u5982\u679c .format() \u53c2\u6570\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c \u53ef\u4ee5\u901a\u8fc7 arg_name[integer|index_string] \u7684\u5f62\u5f0f\u83b7\u53d6\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u3002 conversion : \u8f6c\u6362\u5b57\u6bb5\u7531 ! \u5f00\u59cb\uff0c r \u4ee3\u8868\u8c03\u7528 repr() , s \u4ee3\u8868\u8c03\u7528 str() \u3002 format_spec : \u683c\u5f0f\u89c4\u8303\u8bf4\u660e\u7b26\u7531 : \u5f00\u59cb\u3002 # field_name \u662f \u5173\u952e\u5b57 print ( \" {name!r} \" . format ( name = \"\u5c0f\u660e\" )) # field_name \u662f \u6574\u6570 print ( \" {0!s} \" . format ( \"\u5c0f\u660e\" )) # field_name \u662f \u5c5e\u6027\u540d class Person : name = \"\u5c0f\u660e\" print ( \"{.name!s}\" . format ( Person )) # field_name \u662f \u6574\u6570\u7d22\u5f15 names = [ \"\u5c0f\u7ea2\" , \"\u5c0f\u660e\" ] print ( \"{[1]!s}\" . format ( names )) # field_name \u662f \u5b57\u7b26\u4e32\u7d22\u5f15 from pandas import Series names = Series ({ \"name\" : \"\u5c0f\u660e\" }) print ( \"{[name]!s}\" . format ( names )) '\u5c0f\u660e' \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5c0f\u660e \u5176\u4e2d\uff0c <\u683c\u5f0f\u63a7\u5236\u6807\u8bb0> \u7528\u6765\u63a7\u5236\u53c2\u6570\u663e\u793a\u65f6\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u7684\u53c2\u6570\u5982\u4e0b\uff1a format_spec ::= [ [fill ] align ] [ sign ][ # ][ 0 ][ width ][ grouping_option ][ .precision ][ type ] fill ::= < any character > align ::= \"<\" | \">\" | \"=\" | \"^\" sign ::= \"+\" | \"-\" | \" \" width ::= digit + grouping_option ::= \"_\" | \",\" precision ::= digit + type ::= \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\" \u586b\u5145\u5b57\u7b26 \uff1a\u5982\u679c\u6307\u5b9a\u4e86\u5bf9\u9f50\u9009\u9879\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u586b\u5145\u5b57\u7b26\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u683c. \u5bf9\u9f50\u9009\u9879 \uff1a\u9ed8\u8ba4\u53f3\u5bf9\u9f50\uff0c\u5404\u79cd\u5bf9\u9f50\u9009\u9879\u7684\u542b\u4e49\u5982\u4e0b\uff1a \u9009\u9879 \u610f\u4e49 '<' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5de6\u5bf9\u9f50\uff08\u8fd9\u662f\u5927\u591a\u6570\u5bf9\u8c61\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '>' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u53f3\u5bf9\u9f50\uff08\u8fd9\u662f\u6570\u5b57\u7684\u9ed8\u8ba4\u503c\uff09\u3002 '=' \u5f3a\u5236\u5c06\u586b\u5145\u653e\u7f6e\u5728\u7b26\u53f7\uff08\u5982\u679c\u6709\uff09\u4e4b\u540e\u4f46\u5728\u6570\u5b57\u4e4b\u524d\u3002\u8fd9\u7528\u4e8e\u4ee5\u201c+000000120\u201d\u5f62\u5f0f\u6253\u5370\u5b57\u6bb5\u3002\u6b64\u5bf9\u9f50\u9009\u9879\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\u3002\u5f53'0'\u7d27\u63a5\u5728\u5b57\u6bb5\u5bbd\u5ea6\u4e4b\u524d\u65f6\uff0c\u5b83\u6210\u4e3a\u9ed8\u8ba4\u503c\u3002 '^' \u5f3a\u5236\u5b57\u6bb5\u5728\u53ef\u7528\u7a7a\u95f4\u5185\u5c45\u4e2d\u3002 sign \uff1a\u4ec5\u5bf9\u6570\u5b57\u7c7b\u578b\u6709\u6548\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a \u9009\u9879 \u610f\u4e49 '+' \u8868\u793a\u6807\u5fd7\u5e94\u8be5\u7528\u4e8e\u6b63\u6570\u548c\u8d1f\u6570\u3002 '-' \u8868\u793a\u6807\u5fd7\u5e94\u4ec5\u7528\u4e8e\u8d1f\u6570\uff08\u8fd9\u662f\u9ed8\u8ba4\u884c\u4e3a\uff09\u3002 space \u8868\u793a\u5e94\u5728\u6b63\u6570\u4e0a\u4f7f\u7528\u524d\u5bfc\u7a7a\u683c\uff0c\u5728\u8d1f\u6570\u4e0a\u4f7f\u7528\u51cf\u53f7\u3002 # \uff1a\u4ec5\u9002\u7528\u4e8e\u6570\u5b57\u53c2\u6570\uff0c\u540c\u65f6\u4ec5\u9002\u7528\u4e8e2\u30018\u300116\u8fdb\u5236\u7684\u6570\u5b57\u3002\u4f1a\u5728\u8f93\u51fa\u7684\u6570\u5b57\u524d\u6dfb\u52a0 0b\u30010o\u30010x\u524d\u7f00\u3002 \u5bbd\u5ea6 \uff1a\u6307\u5b9a\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\u3002 \u5343\u4f4d\u5206\u9694\u7b26 \uff1a\u53ea\u80fd\u4f7f\u7528 _ \u6216 , \u4f5c\u4e3a\u5343\u4f4d\u5206\u9694\u7b26\u3002 \u7cbe\u5ea6 \uff1a \u7c7b\u578b \uff1a\u8be5\u9009\u9879\u51b3\u5b9a\u4e86\u6570\u636e\u5e94\u8be5\u5982\u4f55\u5448\u73b0\u3002 \u53ef\u7528\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7c7b\u578b\uff1a Type Meaning s \u5b57\u7b26\u4e32\u683c\u5f0f\uff0c \u5b57\u7b26\u4e32\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c \u53ef\u7701\u7565 None \u540c s \u53ef\u7528\u7684\u6574\u6570\u8868\u793a\u7c7b\u578b\uff1a Type Meaning b \u8f93\u51fa\u4e3a 2 \u8fdb\u5236\u6574\u6570 c \u8f93\u51fa\u4e3a\u4e3a\u76f8\u5e94\u7684 unicode \u5b57\u7b26 d \u8f93\u51fa\u4e3a 10 \u8fdb\u5236\u6574\u6570 o \u8f93\u51fa\u4e3a 8 \u8fdb\u5236\u6574\u6570 x \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd X \u8f93\u51fa\u4e3a 16 \u8fdb\u5236\u6574\u6570\uff0c \u4f7f\u7528\u5927\u5199\u5b57\u6bcd n \u7c7b\u4f3c d , \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 None \u540c d \u53ef\u7528\u7684\u6d6e\u70b9\u6570\u548c\u5c0f\u6570\u503c\u8868\u793a\u7c7b\u578b\uff1a Type Meaning e \u6307\u6570\u8868\u793a\u6cd5\uff0c \u4f7f\u7528\u5b57\u6bcd e \u4ee5\u79d1\u5b66\u8bb0\u6570\u6cd5\u6253\u5370\u6570\u5b57\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 E \u7c7b\u4f3c e , \u4f7f\u7528\u5b57\u6bcd E f \u6d6e\u70b9\u6570\uff0c \u9ed8\u8ba4\u8fdb\u5ea6\u4e3a 6 F \u6d6e\u70b9\u6570\uff0c \u540c f g \u4e00\u822c\u5f62\u5f0f\uff0c \u53d7 precision \u9009\u9879\u5f71\u54cd G \u7c7b\u4f3c g , \u5f53\u4f7f\u7528\u6307\u6570\u8868\u793a\u6cd5\u65f6\uff0c \u4f7f\u7528 E \u800c\u4e0d\u662f e n \u548c g \u76f8\u540c\uff0c \u4f1a\u4f7f\u7528\u5f53\u524d\u533a\u57df\u8bbe\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u6570\u5b57\u5206\u9694\u7b26 % \u767e\u5206\u6570\u8868\u793a None \u540c g # \u586b\u5145\u3001\u5bf9\u9f50\u3001\u7b26\u53f7\u3001\u5bbd\u5ea6\u3001\u5206\u7ec4\u9009\u9879\u3001\u7cbe\u5ea6 # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*^+20.2f} \" . format ( 120 ) '******+120.00*******' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001_\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \"{0:*^+20_.2f}\" . format ( 12000 ) '*****+12_000.00*****' # \u586b\u5145*\u53f7\u3001\u5c45\u4e2d\u3001\u6b63\u53f7\u6807\u8bb0\u3001,\u5206\u9694\u7b26\u30012\u7cbe\u5ea6 \" {0:*^+20,.2f} \" . format ( 12000 ) '*****+12,000.00*****' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u6b63\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*<+20.2f} \" . format ( - 120 ) '-120.00*************' # \u586b\u5145*\u53f7\u3001\u5de6\u5bf9\u9f50\u3001\u8d1f\u53f7\u6807\u8bb0\u30012\u7cbe\u5ea6 \" {0:*>-20.2f} \" . format ( - 120 ) '*************-120.00'","title":"format\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_6","text":"","title":"\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_7","text":"\u65b9\u6cd5 \u63cf\u8ff0 .isalnum if all characters in the string are alpha-numeric and there is at least one character .isalpha if all characters in the string are alphabetic and there is at least one character .isnumeric if all characters in the string are numeric and there is at least one character .isascii ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too . .isdecimal if all characters in the string are decimal and there is at least one character .isdigit if all characters in the string are digits and there is at least one character .isidentifier Use keyword.iskeyword() to test for reserved identifiers such as \"def\" and \"class\". .islower if all cased characters in the string are lowercase and there is at least one cased character .isupper if all cased characters in the string are uppercase and there is at least one cased character .isprintable if all of its characters are considered printable in repr() or if it is empty. .isspace if all characters in the string are whitespace and there is at least one character .istitle In a title-cased string, upper- and title-case characters may only follow uncased characters and lowercase characters only cased ones. \u65b9\u6cd5 \u63cf\u8ff0 .startswith(prefix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 prefix \u5f00\u5934 .endswith(suffix[, start[, end]]) \u5982\u679c\u5b57\u7b26\u4e32\u4ee5 suffix \u7ed3\u5c3e","title":"\u903b\u8f91\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_8","text":"\u65b9\u6cd5 \u63cf\u8ff0 .lower \u8fd4\u56de\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .upper \u8fd4\u56de\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 .capitalize \u4f7f\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5b57\u6bcd\u5927\u5199\uff0c\u5176\u4f59\u5b57\u7b26\u5b57\u6bcd\u5c0f\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .swapcase \u5c06\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5c06\u5c0f\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5927\u5199\uff0c\u8fd4\u56de\u526f\u672c\u3002 .title \u6bcf\u4e2a\u5355\u8bcd\u90fd\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u8fd4\u56de\u526f\u672c\u3002","title":"\u5927\u5c0f\u5b57\u6bcd\u8f6c\u6362"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_9","text":"\u65b9\u6cd5 \u63cf\u8ff0 .split(sep=None, maxsplit=-1) \u4ece\u5de6\u5230\u53f3\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .rsplit(sep=None, maxsplit=-1) \u4ece\u53f3\u5230\u5de6\u4ee5 sep \u5206\u5272\u5b57\u7b26\u4e32 .splitlines(keepends=False) \u4ee5\u56de\u8f66\u7b26\u6216\u6362\u884c\u7b26\u5206\u5272\u5b57\u7b26\u4e32 .partition(sep, /) \u4ece\u5de6\u5230\u53f3\u4ee5\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684 sep \u5206\u5272\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5305\u62ec3\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 \"123#456#789\" . split ( sep = \"#\" , maxsplit = 1 ) ['123', '456#789'] \"123#456#789\" . rsplit ( sep = \"#\" , maxsplit = 1 ) ['123#456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = False ) ['123', '456', '789'] \"123 \\r\\n 456 \\r\\n 789\" . splitlines ( keepends = True ) ['123\\r\\n', '456\\r\\n', '789'] \"123#456#789\" . partition ( \"#\" ) ('123', '#', '456#789')","title":"\u62c6\u5206\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_10","text":"\"_\" . join ([ \"a\" , \"b\" , \"c\" ]) 'a_b_c'","title":"\u5408\u5e76\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_11","text":"\u65b9\u6cd5 \u63cf\u8ff0 .replace(old, new, count=-1) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32 old \u90fd\u66ff\u6362\u4e3a new \u3002 .strip(chars=None) \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\u5220\u9664\u3002 .lstrip(chars=None) \u8fd4\u56de\u5220\u9664\u524d\u5bfc\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .rstrip(chars=None) \u8fd4\u56de\u5220\u9664\u5c3e\u968f\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u526f\u672c\u3002 .expandtabs(tabsize=8) \u8fd4\u56de\u4e00\u4e2a\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5236\u8868\u7b26\u90fd\u4f7f\u7528 tabsize \u4e2a\u7a7a\u683c\u4ee3\u66ff\u3002 \" \\n abc \\t\\n\\r \" . strip () 'abc' \" \\n abc \\t\\n\\r \" . lstrip () 'abc\\t\\n\\r ' \" \\n abc \\t\\n\\r \" . rstrip () ' \\nabc' \" \\n abc \\t\\n\\r \" . expandtabs ( tabsize = 8 ) ' \\nabc \\n\\r '","title":"\u66ff\u6362\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_12","text":"\u65b9\u6cd5 \u63cf\u8ff0 .format \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .format_map \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 .ljust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5de6\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .rjust(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u53f3\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .center(width, fillchar=' ') \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5c45\u4e2d\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 fillchar \u586b\u5145\u3002 .zfill(width) \u8fd4\u56de\u957f\u5ea6\u4e3a width \u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u957f\u5ea6\u4e0d\u591f\uff0c\u7528\u96f6\u4ece\u5de6\u8fb9\u586b\u5145\u3002 .format_map \u4e0e .format \u5728\u7528\u6cd5\u4e0a\u5927\u4f53\u4e00\u81f4\uff0c\u4f46\u6709\u4e00\u4e2a\u533a\u522b\uff1a # format_map \u548c format \u7684\u533a\u522b # \u5982\u679c\u8981\u4f7f\u7528\u5173\u952e\u5b57 format\u5fc5\u987b\u8fd9\u6837\u4f7f\u7528 \" {name} , {sex} \" . format ( name = \"Jack\" , sex = \"male\" ) # format_map \u53ef\u4ee5\u7528dict \" {name} , {sex} \" . format_map ({ \"name\" : \"Jack\" , \"sex\" : \"male\" }) 'Jack, male' print ( \"abc\" . ljust ( 10 , \"#\" )) print ( \"abc\" . rjust ( 10 , \"#\" )) print ( \"abc\" . center ( 10 , \"#\" )) print ( \"123\" . zfill ( 10 )) # \u975e\u6570\u5b57\u5b57\u7b26\u4e32\u4e5f\u53ef\u4ee5 print ( \"abc\" . zfill ( 10 )) abc####### #######abc ###abc#### 0000000123 0000000abc","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_13","text":"\"abcAbc\" . count ( \"c\" , 0 , 6 ) 2","title":"\u7edf\u8ba1\u5b50\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.4.String.html#_14","text":".index \u4e0e .find \u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7 .index \u65b9\u6cd5\u82e5\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u4f1a\u629b\u51faValueError\uff0c\u800c .find \u4f1a\u8fd4\u56de -1 \u3002 \"abcAbc\" . index ( \"bc\" , 0 , 6 ) \"abcAbc\" . find ( \"bc\" , 0 , 6 ) 1 \"abcAbc\" . index ( \"bc\" , 0 , 2 ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-f8cead4644a3> in <module> ----> 1 \"abcAbc\".index(\"bc\", 0, 2) ValueError: substring not found \"abcAbc\" . find ( \"bc\" , 0 , 2 ) -1","title":"\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.Tuple.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.24 tuple\u662f\u4e00\u79cd\u4e00\u7ef4\u7684\uff0c\u5b9a\u957f\u7684\u3001\u4e0d\u53ef\u53d8\u7684Python\u5bf9\u8c61\u5e8f\u5217\uff0c\u5143\u7d20\u5199\u5728\u5c0f\u62ec\u53f7 () \u91cc\uff0c\u5143\u7d20\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002 \u4e0d\u53ef\u53d8\u7684tuple\u6709\u4ec0\u4e48\u610f\u4e49\uff1f \u56e0\u4e3atuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u53ef\u80fd\uff0c\u80fd\u7528tuple\u4ee3\u66fflist\u5c31\u5c3d\u91cf\u7528tuple\u3002 \u867d\u7136tuple\u7684\u5143\u7d20\u4e0d\u53ef\u6539\u53d8\uff0c\u4f46\u5b83\u53ef\u4ee5\u5305\u542b\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982list\u5217\u8868\u3002 Tuple\u7684\u9677\u9631\u2014\u20141\u4e2a\u5143\u7d20\u7684Tuple \u5b9a\u4e49\u4e2a\u4e00\u4e2aTuple\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aiterable\u5bf9\u8c61\u3002 tuple ( \"123\" ) ('1', '2', '3') \u5982\u679c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684Tuple\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a # \u901a\u8fc7tuple\u7c7b\u6765\u5b9a\u4e49 a = tuple () type ( a ) # \u6216\u8005\u7528 () \u5b9a\u4e49 a = () type ( a ) # \u662f\u7684\uff0c\u901a\u8fc7()\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7a7atuple tuple \u4f46\u662f\u5982\u679c\u8981\u5b9a\u4e49\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u5c31\u5f97\u8981\u6ce8\u610f\u4e86\u3002\u5982\u679c\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\uff0c\u5219\u662f\u9519\u8bef\u7684\uff1a b = ( \"123\" ) type ( b ) str \u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\uff1a b = ( \"123\" ,) type ( b ) tuple \u6216\u8005\u8fd9\u6837\u5b9a\u4e49\uff1a b = tuple ([ \"123\" ]) type ( b ) tuple \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u56e0\u4e3a () \u5728python\u4e2d\u53ef\u4ee5\u8868\u793a\u8fd0\u7b97\u7b26\u7684 () \uff0c\u4e5f\u53ef\u4ee5\u8868\u793aTuple\u3002\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u6b67\u4e49\uff0c\u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0cPython\u89c4\u5b9a\u62ec\u53f7\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6309\u8fd0\u7b97\u7b26\u7684 () \u8fdb\u884c\u89e3\u6790\u3002 Tuple\u7684\u9677\u9631\u2014\u2014\u201c\u53ef\u53d8\u7684\u201dTuple \u524d\u9762\u8bf4\u8fc7\uff0cTuple\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6709\u65f6\u6211\u4eec\u53c8\u4f1a\u53d1\u73b0Tuple\u662f\u201c\u53ef\u53d8\u7684\u201d\u3002 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"\u539f\u59cb\u7684Tuple\uff1a\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"\u4fee\u6539\u540e\u7684Tuple\uff1a\" , c ) \u539f\u59cb\u7684Tuple\uff1a ('a', 'b', ['A', 'B']) \u4fee\u6539\u540e\u7684Tuple\uff1a ('a', 'b', ['X', 'Y']) \u524d\u9762\u8bf4\u8fc7tuple\u4e00\u65e6\u5b9a\u4e49\u540e\u5c31\u4e0d\u53ef\u53d8\uff0c\u90a3\u4e0a\u9762\u7684c\u600e\u4e48\u5c31\u6539\u53d8\u4e86\u5462\uff1f\u5176\u5b9e\uff0cc\u7684\u5143\u7d20\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662flist\u4e2d\u7684\u5143\u7d20\uff0ctuple\u4e00\u5f00\u59cb\u6307\u5411\u7684list\u5e76\u6ca1\u6709\u6539\u6210\u522b\u7684list\uff0c\u6240\u4ee5\uff0ctuple\u6240\u8c13\u7684\u201c\u4e0d\u53d8\u201d\u662f\u8bf4\uff0ctuple\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u6307\u5411\u6c38\u8fdc\u4e0d\u53d8\u3002\u5373\u6307\u5411 a \uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411 b \uff0c\u6307\u5411\u4e00\u4e2alist\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6307\u5411\u7684\u8fd9\u4e2alist\u672c\u8eab\u662f\u53ef\u53d8\u7684\uff01 \u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u7684tuple\uff0c\u90a3\u5c31\u5fc5\u987b\u4fdd\u8bc1tuple\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u4e5f\u4e0d\u80fd\u53d8\u3002 Tuple\u7684\u65b9\u6cd5 \u56e0\u4e3aTuple\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u6ca1\u6709\u7528\u4e8e\u4fee\u6539\u5217\u8868\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5Tuple\u5bf9\u8c61\u7684\u65b9\u6cd5\u5f88\u5c11\u3002 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) [ method for method in dir ( d ) if not method . startswith ( \"_\" )] ['count', 'index'] \u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 d . count ( 4 ) 2 \u5143\u7d20\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c d . index ( 4 ) 4","title":"2.5.Tuple"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.Tuple.html#tuple1tuple","text":"\u5b9a\u4e49\u4e2a\u4e00\u4e2aTuple\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aiterable\u5bf9\u8c61\u3002 tuple ( \"123\" ) ('1', '2', '3') \u5982\u679c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684Tuple\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a # \u901a\u8fc7tuple\u7c7b\u6765\u5b9a\u4e49 a = tuple () type ( a ) # \u6216\u8005\u7528 () \u5b9a\u4e49 a = () type ( a ) # \u662f\u7684\uff0c\u901a\u8fc7()\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7a7atuple tuple \u4f46\u662f\u5982\u679c\u8981\u5b9a\u4e49\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u5c31\u5f97\u8981\u6ce8\u610f\u4e86\u3002\u5982\u679c\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\uff0c\u5219\u662f\u9519\u8bef\u7684\uff1a b = ( \"123\" ) type ( b ) str \u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\uff1a b = ( \"123\" ,) type ( b ) tuple \u6216\u8005\u8fd9\u6837\u5b9a\u4e49\uff1a b = tuple ([ \"123\" ]) type ( b ) tuple \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u56e0\u4e3a () \u5728python\u4e2d\u53ef\u4ee5\u8868\u793a\u8fd0\u7b97\u7b26\u7684 () \uff0c\u4e5f\u53ef\u4ee5\u8868\u793aTuple\u3002\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u6b67\u4e49\uff0c\u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0cPython\u89c4\u5b9a\u62ec\u53f7\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6309\u8fd0\u7b97\u7b26\u7684 () \u8fdb\u884c\u89e3\u6790\u3002","title":"Tuple\u7684\u9677\u9631\u2014\u20141\u4e2a\u5143\u7d20\u7684Tuple"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.Tuple.html#tupletuple","text":"\u524d\u9762\u8bf4\u8fc7\uff0cTuple\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6709\u65f6\u6211\u4eec\u53c8\u4f1a\u53d1\u73b0Tuple\u662f\u201c\u53ef\u53d8\u7684\u201d\u3002 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"\u539f\u59cb\u7684Tuple\uff1a\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"\u4fee\u6539\u540e\u7684Tuple\uff1a\" , c ) \u539f\u59cb\u7684Tuple\uff1a ('a', 'b', ['A', 'B']) \u4fee\u6539\u540e\u7684Tuple\uff1a ('a', 'b', ['X', 'Y']) \u524d\u9762\u8bf4\u8fc7tuple\u4e00\u65e6\u5b9a\u4e49\u540e\u5c31\u4e0d\u53ef\u53d8\uff0c\u90a3\u4e0a\u9762\u7684c\u600e\u4e48\u5c31\u6539\u53d8\u4e86\u5462\uff1f\u5176\u5b9e\uff0cc\u7684\u5143\u7d20\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662flist\u4e2d\u7684\u5143\u7d20\uff0ctuple\u4e00\u5f00\u59cb\u6307\u5411\u7684list\u5e76\u6ca1\u6709\u6539\u6210\u522b\u7684list\uff0c\u6240\u4ee5\uff0ctuple\u6240\u8c13\u7684\u201c\u4e0d\u53d8\u201d\u662f\u8bf4\uff0ctuple\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u6307\u5411\u6c38\u8fdc\u4e0d\u53d8\u3002\u5373\u6307\u5411 a \uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411 b \uff0c\u6307\u5411\u4e00\u4e2alist\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6307\u5411\u7684\u8fd9\u4e2alist\u672c\u8eab\u662f\u53ef\u53d8\u7684\uff01 \u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u7684tuple\uff0c\u90a3\u5c31\u5fc5\u987b\u4fdd\u8bc1tuple\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u4e5f\u4e0d\u80fd\u53d8\u3002","title":"Tuple\u7684\u9677\u9631\u2014\u2014\u201c\u53ef\u53d8\u7684\u201dTuple"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.Tuple.html#tuple","text":"\u56e0\u4e3aTuple\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u6ca1\u6709\u7528\u4e8e\u4fee\u6539\u5217\u8868\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5Tuple\u5bf9\u8c61\u7684\u65b9\u6cd5\u5f88\u5c11\u3002 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) [ method for method in dir ( d ) if not method . startswith ( \"_\" )] ['count', 'index']","title":"Tuple\u7684\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.Tuple.html#_1","text":"d . count ( 4 ) 2","title":"\u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.5.Tuple.html#_2","text":"d . index ( 4 ) 4","title":"\u5143\u7d20\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.24 \u6620\u5c04\uff08mapping\uff09\u662f\u901a\u8fc7\u540d\u79f0\u6765\u8bbf\u95ee\u5176\u5404\u4e2a\u503c\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b57\u5178\u662fPython\u4e2d\u552f\u4e00\u7684\u5185\u7f6e\u6620\u5c04\u7c7b\u578b\uff0c\u5176\u4e2d\u7684\u503c\u4e0d\u6309\u987a\u5e8f\u6392\u5217\uff0c\u800c\u662f\u5b58\u50a8\u5728\u952e\u4e0b\u3002\u952e\u53ef\u80fd\u662f\u6570\u3001\u5b57\u7b26\u4e32\u6216\u5143\u7ec4\u3002 \u521b\u5efadict \u5b57\u5178\u4ee5\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u65b9\u5f0f\u8868\u793a\uff1a phonebook = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } \u5b57\u5178\u7531\u952e\u53ca\u5176\u76f8\u5e94\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u79cd\u952e--\u503c\u5bf9\u79f0\u4e3a\u9879\uff08item\uff09\u3002\u6bcf\u4e2a\u952e\u4e0e\u5176\u503c\u4e4b\u95f4\u90fd\u7528\u5192\u53f7 : \u5206\u9694\uff0citem\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u800c\u6574\u4e2a\u5b57\u5178\u653e\u5728\u82b1\u62ec\u53f7\u5185\u3002\u7a7a\u5b57\u5178\uff08\u6ca1\u6709\u4efb\u4f55\u9879\uff09\u7528\u4e24\u4e2a\u82b1\u62ec\u53f7 {} \u8868\u793a\u3002 \u6ce8\u610f \u5728\u5b57\u5178\uff08\u4ee5\u53ca\u5176\u4ed6\u6620\u5c04\u7c7b\u578b\uff09\u4e2d\uff0c\u952e\u5fc5\u987b\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u800c\u5b57\u5178\u4e2d\u7684\u503c\u65e0\u9700\u5982\u6b64\u3002 \u53ef\u4f7f\u7528dict\u7c7b\u4ece\u5176\u4ed6\u6620\u5c04\uff08\u5982\u5176\u4ed6\u5b57\u5178\uff09\u6216\u952e\u2013\u503c\u5bf9\u5e8f\u5217\u521b\u5efa\u5b57\u5178\u3002 items = [( 'name' , 'Gumby' ), ( 'age' , 42 )] dict ( items ) {'name': 'Gumby', 'age': 42} \u8fd8\u53ef\u4f7f\u7528\u5173\u952e\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a dict ( name = 'Gumby' , age = 42 ) {'name': 'Gumby', 'age': 42} Dict\u7684\u65b9\u6cd5 \u5b57\u5178\u7684\u57fa\u672c\u884c\u4e3a\u5728\u5f88\u591a\u65b9\u9762\u90fd\u7c7b\u4f3c\u4e8e\u5e8f\u5217\u3002 len(d)\u8fd4\u56de\u5b57\u5178d\u5305\u542b\u7684\u9879\uff08\u952e--\u503c\u5bf9\uff09\u6570\u3002 d[k]\u8fd4\u56de\u4e0e\u952ek\u76f8\u5173\u8054\u7684\u503c\u3002 d[k] = v\u5c06\u503cv\u5173\u8054\u5230\u952ek\u3002 del d[k]\u5220\u9664\u952e\u4e3ak\u7684\u9879\u3002 k in d\u68c0\u67e5\u5b57\u5178d\u662f\u5426\u5305\u542b\u952e\u4e3ak\u7684\u9879\u3002 \u867d\u7136\u5b57\u5178\u548c\u5217\u8868\u6709\u591a\u4e2a\u76f8\u540c\u4e4b\u5904\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u4e0d\u540c\u4e4b\u5904\u3002 \u81ea\u52a8\u6dfb\u52a0\u3002 dict\u53ef\u4ee5\u7ed9\u4e0d\u5b58\u5728\u7684\u9879\u8d4b\u503c\uff0c\u5373\u662f\u5b57\u5178\u4e2d\u539f\u672c\u6ca1\u6709\u7684\u952e\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u8d4b\u503c\u3002\u800c\u5982\u679c\u4e0d\u4f7f\u7528append\u6216\u5176\u4ed6\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5c31\u4e0d\u80fd\u7ed9\u5217\u8868\u4e2d\u6ca1\u6709\u7684\u5143\u7d20\u8d4b\u503c\u3002 \u6210\u5458\u8d44\u683c\u3002 \u8868\u8fbe\u5f0fk in d (\u5176\u4e2dd\u662f\u4e00\u4e2a\u5b57\u5178\uff09\u67fb\u627e\u7684\u662f\u952e\u800c\u4e0d\u662f\u503c\uff1b\u800c\u8868\u8fbe\u5f0fv in 1 (\u5176\u4e2d1\u662f\u4e00\u4e2a\u5217\u8868\uff09\u67e5\u627e\u7684\u662f\u503c\u800c\u4e0d\u662f\u7d22\u5f15\u3002\u8fd9\u770b\u4f3c\u4e0d\u592a\u4e00\u81f4\uff0c\u4f46\u4f60\u4e60\u60ef\u540e\u5c31\u4f1a\u89c9\u5f97\u76f8\u5f53\u81ea\u7136\u3002\u6bd5\u7adf\u5982\u679c\u5b57\u5178\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u68c0\u67e5\u76f8\u5e94\u7684\u503c\u5c31\u5f88\u5bb9\u6613\u3002 clear \u5220\u9664\u6240\u6709\u7684\u5b57\u5178\u9879 \u8981\u6ce8\u610f\u7684\u662f\uff0cclear\u662f\u6e05\u9664\u4e86\u4e00\u4e2a\u5b57\u5178\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u89e3\u9664\u4e86\u540d\u79f0\u4e0e\u5b57\u5178\u5bf9\u8c61\u7684\u7ed1\u5b9a\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a a . clear () # \u53ef\u4ee5\u770b\u5230\uff0ca\u3001b\u90fd\u53d8\u6210\u4e86\u5b57\u5178 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {} b\u7684\u503c: {} copy \u6d45\u62f7\u8d1d a = { \"a\" : 1 , \"b\" : 2 , \"c\" :[ 1 , 2 ]} b = a . copy () b [ \"c\" ][ 0 ] = 10 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]} b\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]} fromkeys dict . fromkeys ( key , value ) \u65b9\u6cd5 fromkeys \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u5176\u4e2d\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u4e14\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u90fd\u662fNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u503c\uff0c dict . fromkeys ([ \"a\" , \"b\" ]) {'a': None, 'b': None} dict . fromkeys ([ \"a\" , \"b\" ], 10 ) {'a': 10, 'b': 10} get \u65b9\u6cd5 get \u4e3a\u8bbf\u95ee\u5b57\u5178\u9879\u63d0\u4f9b\u4e86\u5bbd\u677e\u7684\u73af\u5883\u3002\u901a\u5e38\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u8bbf\u95ee\u5b57\u5178\u4e2d\u6ca1\u6709\u7684\u9879\uff0c\u5c06\u5f15\u53d1\u9519\u8bef\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a [ \"d\" ] ---------------------------------------------------------------------------KeyError Traceback (most recent call last)<ipython-input-1-b0ca58477f0c> in <module> 1 a = {\"a\":1,\"b\": 2,\"c\":3} ----> 2 a[\"d\"] KeyError: 'd' \u800c\u4f7f\u7528 get \u4e0d\u4f1a\u8fd9\u6837 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . get ( \"d\" ) # \u9ed8\u8ba4\u8fd4\u56deNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u503c a . get ( \"d\" , \"N/A\" ) 'N/A' items \u65b9\u6cd5 items \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5b57\u5178\u9879\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a (key, value) \u7684\u5f62\u5f0f\u3002\u5b57\u5178\u9879\u5728\u5217\u8868\u4e2d\u7684\u6392\u5217\u987a\u5e8f\u4e0d\u786e\u5b9a\u3002\u8fd4\u56de\u503c\u5c5e\u4e8e\u4e00\u79cd\u540d\u4e3a\u5b57\u5178\u89c6\u56fe\u7684\u7279\u6b8a\u7c7b\u578b\u3002\u5b57\u5178\u89c6\u56fe\u53ef\u7528\u4e8e\u8fed\u4ee3\u3002\u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u786e\u5b9a\u5176\u957f\u5ea6\u4ee5\u53ca\u5bf9\u5176\u6267\u884c\u6210\u5458\u8d44\u683c\u68c0\u67e5\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . items () dict_items([('a', 1), ('b', 2), ('c', 3)]) # dict_items\u7c7b\u578b type ( a . items ()) dict_items # \u8fed\u4ee3 for i in a . items (): print ( i ) ('a', 1) ('b', 2) ('c', 3) # \u8fed\u4ee3 for key , value in a . items (): print ( key , end = \" \" ) print ( value ) a 1 b 2 c 3 # \u68c0\u67e5\u6210\u5458\u8d44\u683c ( \"a\" , 1 ) in a . items () True keys \u548c values \u65b9\u6cd5 keys \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . keys () dict_keys(['a', 'b', 'c']) \u65b9\u6cd5 values \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a . values () dict_values([1, 2, 3]) pop \u65b9\u6cd5pop\u53ef\u7528\u4e8e\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e-\u503c\u5bf9\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a . pop ( \"a\" ) print ( \"b\u7684\u503c\" , b ) print ( \"a\u7684\u503c\" , a ) b\u7684\u503c 1 a\u7684\u503c {'b': 2, 'c': 3} popitem \u65b9\u6cd5 popitem \u7c7b\u4f3c\u4e8e list.pop \uff0c\u4f46 list.pop \u5f39\u51fa\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u800c popitem \u968f\u673a\u5730\u5f39\u51fa\u4e00\u4e2a\u5b57\u5178\u9879\uff0c\u56e0\u4e3a\u5b57\u5178\u9879\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6ca1\u6709\u201c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u201d\u7684\u6982\u5ff5\u3002\u5982\u679c\u4f60\u8981\u4ee5\u9ad8\u6548\u5730\u65b9\u5f0f \u9010\u4e2a \u5220\u9664\u5e76\u5904\u7406\u6240\u6709\u5b57\u5178\u9879\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u65e0\u9700\u5148\u83b7\u53d6\u952e\u5217\u8868\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . popitem () ('c', 3) a {'a': 1, 'b': 2} setdefault \u65b9\u6cd5 setdefault \u6709\u70b9\u50cfget\uff0c\u56e0\u4e3a\u5b83\u4e5f\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0csetdefault\u8fd8\u5728\u5b57\u5178\u4e0d\u5305\u542b\u6307\u5b9a\u7684\u952e\u65f6\uff0c\u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u6307\u5b9a\u7684\u952e-\u503c\u5bf9\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . setdefault ( \"a\" ) a a . setdefault ( \"d\" ) a {'a': 1, 'b': 2, 'c': 3, 'd': None} \u5982\u4f60\u6240\u89c1\uff0c\u6307\u5b9a\u7684\u952e\u4e0d\u5b58\u5728\u65f6\uff0csetdefault\u8fd4\u56de\u6307\u5b9a\u7684\u503c\u5e76\u76f8\u5e94\u5730\u66f4\u65b0\u5b57\u5178\u3002\u5982\u679c\u6307\u5b9a\u7684\u952e\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u5176\u503c\uff0c\u5e76\u4fdd\u6301\u5b57\u5178\u4e0d\u53d8\u3002\u4e0e get \u4e00\u6837\uff0c\u503c\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3aNone\u3002 update \u65b9\u6cd5update\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u9879\u6765\u66f4\u65b0\u53e6\u4e00\u4e2a\u5b57\u5178\u3002\u5bf9\u4e8e\u901a\u8fc7\u53c2\u6570\u63d0\u4f9b\u7684\u5b57\u5178\uff0c\u5c06\u5176\u9879\u6dfb\u52a0\u5230\u5f53\u524d\u5b57\u5178\u4e2d\u3002\u5982\u679c\u5f53\u524d\u5b57\u5178\u5305\u542b\u952e\u76f8\u540c\u7684\u9879\uff0c\u5c31\u66ff\u6362\u5b83\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . update ({ \"d\" : 4 }) a {'a': 1, 'b': 2, 'c': 3, 'd': 4} \u53ef\u50cf\u8c03\u7528\u672c\u7ae0\u524d\u9762\u8ba8\u8bba\u7684\u51fd\u6570dict\uff08\u7c7b\u578b\u6784\u9020\u51fd\u6570\uff09\u90a3\u6837\u8c03\u7528\u65b9\u6cd5update\u3002\u8fd9\u610f\u5473\u7740\u8c03\u7528update\u65f6\uff0c\u53ef\u5411\u5b83\u63d0\u4f9b\u4e00\u4e2a\u6620\u5c04\u3001\u4e00\u4e2a\u7531\u952e-\u503c\u5bf9\u7ec4\u6210\u7684\u5e8f\u5217\uff08\u6216\u5176\u4ed6\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 a . update ( zip ([ \"e\" , \"f\" ],[ 5 , 6 ])) a {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}","title":"2.6.Dict"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#dict","text":"\u5b57\u5178\u4ee5\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u65b9\u5f0f\u8868\u793a\uff1a phonebook = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } \u5b57\u5178\u7531\u952e\u53ca\u5176\u76f8\u5e94\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u79cd\u952e--\u503c\u5bf9\u79f0\u4e3a\u9879\uff08item\uff09\u3002\u6bcf\u4e2a\u952e\u4e0e\u5176\u503c\u4e4b\u95f4\u90fd\u7528\u5192\u53f7 : \u5206\u9694\uff0citem\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u800c\u6574\u4e2a\u5b57\u5178\u653e\u5728\u82b1\u62ec\u53f7\u5185\u3002\u7a7a\u5b57\u5178\uff08\u6ca1\u6709\u4efb\u4f55\u9879\uff09\u7528\u4e24\u4e2a\u82b1\u62ec\u53f7 {} \u8868\u793a\u3002 \u6ce8\u610f \u5728\u5b57\u5178\uff08\u4ee5\u53ca\u5176\u4ed6\u6620\u5c04\u7c7b\u578b\uff09\u4e2d\uff0c\u952e\u5fc5\u987b\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u800c\u5b57\u5178\u4e2d\u7684\u503c\u65e0\u9700\u5982\u6b64\u3002 \u53ef\u4f7f\u7528dict\u7c7b\u4ece\u5176\u4ed6\u6620\u5c04\uff08\u5982\u5176\u4ed6\u5b57\u5178\uff09\u6216\u952e\u2013\u503c\u5bf9\u5e8f\u5217\u521b\u5efa\u5b57\u5178\u3002 items = [( 'name' , 'Gumby' ), ( 'age' , 42 )] dict ( items ) {'name': 'Gumby', 'age': 42} \u8fd8\u53ef\u4f7f\u7528\u5173\u952e\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a dict ( name = 'Gumby' , age = 42 ) {'name': 'Gumby', 'age': 42}","title":"\u521b\u5efadict"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#dict_1","text":"\u5b57\u5178\u7684\u57fa\u672c\u884c\u4e3a\u5728\u5f88\u591a\u65b9\u9762\u90fd\u7c7b\u4f3c\u4e8e\u5e8f\u5217\u3002 len(d)\u8fd4\u56de\u5b57\u5178d\u5305\u542b\u7684\u9879\uff08\u952e--\u503c\u5bf9\uff09\u6570\u3002 d[k]\u8fd4\u56de\u4e0e\u952ek\u76f8\u5173\u8054\u7684\u503c\u3002 d[k] = v\u5c06\u503cv\u5173\u8054\u5230\u952ek\u3002 del d[k]\u5220\u9664\u952e\u4e3ak\u7684\u9879\u3002 k in d\u68c0\u67e5\u5b57\u5178d\u662f\u5426\u5305\u542b\u952e\u4e3ak\u7684\u9879\u3002 \u867d\u7136\u5b57\u5178\u548c\u5217\u8868\u6709\u591a\u4e2a\u76f8\u540c\u4e4b\u5904\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u4e0d\u540c\u4e4b\u5904\u3002 \u81ea\u52a8\u6dfb\u52a0\u3002 dict\u53ef\u4ee5\u7ed9\u4e0d\u5b58\u5728\u7684\u9879\u8d4b\u503c\uff0c\u5373\u662f\u5b57\u5178\u4e2d\u539f\u672c\u6ca1\u6709\u7684\u952e\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u8d4b\u503c\u3002\u800c\u5982\u679c\u4e0d\u4f7f\u7528append\u6216\u5176\u4ed6\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5c31\u4e0d\u80fd\u7ed9\u5217\u8868\u4e2d\u6ca1\u6709\u7684\u5143\u7d20\u8d4b\u503c\u3002 \u6210\u5458\u8d44\u683c\u3002 \u8868\u8fbe\u5f0fk in d (\u5176\u4e2dd\u662f\u4e00\u4e2a\u5b57\u5178\uff09\u67fb\u627e\u7684\u662f\u952e\u800c\u4e0d\u662f\u503c\uff1b\u800c\u8868\u8fbe\u5f0fv in 1 (\u5176\u4e2d1\u662f\u4e00\u4e2a\u5217\u8868\uff09\u67e5\u627e\u7684\u662f\u503c\u800c\u4e0d\u662f\u7d22\u5f15\u3002\u8fd9\u770b\u4f3c\u4e0d\u592a\u4e00\u81f4\uff0c\u4f46\u4f60\u4e60\u60ef\u540e\u5c31\u4f1a\u89c9\u5f97\u76f8\u5f53\u81ea\u7136\u3002\u6bd5\u7adf\u5982\u679c\u5b57\u5178\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u68c0\u67e5\u76f8\u5e94\u7684\u503c\u5c31\u5f88\u5bb9\u6613\u3002","title":"Dict\u7684\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#clear","text":"\u8981\u6ce8\u610f\u7684\u662f\uff0cclear\u662f\u6e05\u9664\u4e86\u4e00\u4e2a\u5b57\u5178\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u89e3\u9664\u4e86\u540d\u79f0\u4e0e\u5b57\u5178\u5bf9\u8c61\u7684\u7ed1\u5b9a\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a a . clear () # \u53ef\u4ee5\u770b\u5230\uff0ca\u3001b\u90fd\u53d8\u6210\u4e86\u5b57\u5178 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {} b\u7684\u503c: {}","title":"clear\u5220\u9664\u6240\u6709\u7684\u5b57\u5178\u9879"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#copy","text":"a = { \"a\" : 1 , \"b\" : 2 , \"c\" :[ 1 , 2 ]} b = a . copy () b [ \"c\" ][ 0 ] = 10 print ( \"a\u7684\u503c:\" , a ) print ( \"b\u7684\u503c:\" , a ) a\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]} b\u7684\u503c: {'a': 1, 'b': 2, 'c': [10, 2]}","title":"copy\u6d45\u62f7\u8d1d"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#fromkeys","text":"dict . fromkeys ( key , value ) \u65b9\u6cd5 fromkeys \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u5176\u4e2d\u5305\u542b\u6307\u5b9a\u7684\u952e\uff0c\u4e14\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u90fd\u662fNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u503c\uff0c dict . fromkeys ([ \"a\" , \"b\" ]) {'a': None, 'b': None} dict . fromkeys ([ \"a\" , \"b\" ], 10 ) {'a': 10, 'b': 10}","title":"fromkeys"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#get","text":"\u65b9\u6cd5 get \u4e3a\u8bbf\u95ee\u5b57\u5178\u9879\u63d0\u4f9b\u4e86\u5bbd\u677e\u7684\u73af\u5883\u3002\u901a\u5e38\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u8bbf\u95ee\u5b57\u5178\u4e2d\u6ca1\u6709\u7684\u9879\uff0c\u5c06\u5f15\u53d1\u9519\u8bef\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a [ \"d\" ] ---------------------------------------------------------------------------KeyError Traceback (most recent call last)<ipython-input-1-b0ca58477f0c> in <module> 1 a = {\"a\":1,\"b\": 2,\"c\":3} ----> 2 a[\"d\"] KeyError: 'd' \u800c\u4f7f\u7528 get \u4e0d\u4f1a\u8fd9\u6837 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . get ( \"d\" ) # \u9ed8\u8ba4\u8fd4\u56deNone\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u503c a . get ( \"d\" , \"N/A\" ) 'N/A'","title":"get"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#items","text":"\u65b9\u6cd5 items \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5b57\u5178\u9879\u7684\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a (key, value) \u7684\u5f62\u5f0f\u3002\u5b57\u5178\u9879\u5728\u5217\u8868\u4e2d\u7684\u6392\u5217\u987a\u5e8f\u4e0d\u786e\u5b9a\u3002\u8fd4\u56de\u503c\u5c5e\u4e8e\u4e00\u79cd\u540d\u4e3a\u5b57\u5178\u89c6\u56fe\u7684\u7279\u6b8a\u7c7b\u578b\u3002\u5b57\u5178\u89c6\u56fe\u53ef\u7528\u4e8e\u8fed\u4ee3\u3002\u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u786e\u5b9a\u5176\u957f\u5ea6\u4ee5\u53ca\u5bf9\u5176\u6267\u884c\u6210\u5458\u8d44\u683c\u68c0\u67e5\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . items () dict_items([('a', 1), ('b', 2), ('c', 3)]) # dict_items\u7c7b\u578b type ( a . items ()) dict_items # \u8fed\u4ee3 for i in a . items (): print ( i ) ('a', 1) ('b', 2) ('c', 3) # \u8fed\u4ee3 for key , value in a . items (): print ( key , end = \" \" ) print ( value ) a 1 b 2 c 3 # \u68c0\u67e5\u6210\u5458\u8d44\u683c ( \"a\" , 1 ) in a . items () True","title":"items"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#keysvalues","text":"\u65b9\u6cd5 keys \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . keys () dict_keys(['a', 'b', 'c']) \u65b9\u6cd5 values \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u5178\u4e2d\u7684\u952e\u3002 a . values () dict_values([1, 2, 3])","title":"keys\u548cvalues"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#pop","text":"\u65b9\u6cd5pop\u53ef\u7528\u4e8e\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e-\u503c\u5bf9\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } b = a . pop ( \"a\" ) print ( \"b\u7684\u503c\" , b ) print ( \"a\u7684\u503c\" , a ) b\u7684\u503c 1 a\u7684\u503c {'b': 2, 'c': 3}","title":"pop"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#popitem","text":"\u65b9\u6cd5 popitem \u7c7b\u4f3c\u4e8e list.pop \uff0c\u4f46 list.pop \u5f39\u51fa\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u800c popitem \u968f\u673a\u5730\u5f39\u51fa\u4e00\u4e2a\u5b57\u5178\u9879\uff0c\u56e0\u4e3a\u5b57\u5178\u9879\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6ca1\u6709\u201c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u201d\u7684\u6982\u5ff5\u3002\u5982\u679c\u4f60\u8981\u4ee5\u9ad8\u6548\u5730\u65b9\u5f0f \u9010\u4e2a \u5220\u9664\u5e76\u5904\u7406\u6240\u6709\u5b57\u5178\u9879\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u65e0\u9700\u5148\u83b7\u53d6\u952e\u5217\u8868\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . popitem () ('c', 3) a {'a': 1, 'b': 2}","title":"popitem"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#setdefault","text":"\u65b9\u6cd5 setdefault \u6709\u70b9\u50cfget\uff0c\u56e0\u4e3a\u5b83\u4e5f\u83b7\u53d6\u4e0e\u6307\u5b9a\u952e\u76f8\u5173\u8054\u7684\u503c\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0csetdefault\u8fd8\u5728\u5b57\u5178\u4e0d\u5305\u542b\u6307\u5b9a\u7684\u952e\u65f6\uff0c\u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u6307\u5b9a\u7684\u952e-\u503c\u5bf9\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . setdefault ( \"a\" ) a a . setdefault ( \"d\" ) a {'a': 1, 'b': 2, 'c': 3, 'd': None} \u5982\u4f60\u6240\u89c1\uff0c\u6307\u5b9a\u7684\u952e\u4e0d\u5b58\u5728\u65f6\uff0csetdefault\u8fd4\u56de\u6307\u5b9a\u7684\u503c\u5e76\u76f8\u5e94\u5730\u66f4\u65b0\u5b57\u5178\u3002\u5982\u679c\u6307\u5b9a\u7684\u952e\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u5176\u503c\uff0c\u5e76\u4fdd\u6301\u5b57\u5178\u4e0d\u53d8\u3002\u4e0e get \u4e00\u6837\uff0c\u503c\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3aNone\u3002","title":"setdefault"},{"location":"Python%E5%9F%BA%E7%A1%80/2.6.Dict.html#update","text":"\u65b9\u6cd5update\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u9879\u6765\u66f4\u65b0\u53e6\u4e00\u4e2a\u5b57\u5178\u3002\u5bf9\u4e8e\u901a\u8fc7\u53c2\u6570\u63d0\u4f9b\u7684\u5b57\u5178\uff0c\u5c06\u5176\u9879\u6dfb\u52a0\u5230\u5f53\u524d\u5b57\u5178\u4e2d\u3002\u5982\u679c\u5f53\u524d\u5b57\u5178\u5305\u542b\u952e\u76f8\u540c\u7684\u9879\uff0c\u5c31\u66ff\u6362\u5b83\u3002 a = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } a . update ({ \"d\" : 4 }) a {'a': 1, 'b': 2, 'c': 3, 'd': 4} \u53ef\u50cf\u8c03\u7528\u672c\u7ae0\u524d\u9762\u8ba8\u8bba\u7684\u51fd\u6570dict\uff08\u7c7b\u578b\u6784\u9020\u51fd\u6570\uff09\u90a3\u6837\u8c03\u7528\u65b9\u6cd5update\u3002\u8fd9\u610f\u5473\u7740\u8c03\u7528update\u65f6\uff0c\u53ef\u5411\u5b83\u63d0\u4f9b\u4e00\u4e2a\u6620\u5c04\u3001\u4e00\u4e2a\u7531\u952e-\u503c\u5bf9\u7ec4\u6210\u7684\u5e8f\u5217\uff08\u6216\u5176\u4ed6\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09\u6216\u5173\u952e\u5b57\u53c2\u6570\u3002 a . update ( zip ([ \"e\" , \"f\" ],[ 5 , 6 ])) a {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}","title":"update"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.%E6%8E%A8%E5%AF%BC%E5%BC%8F.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.04 import pprint \u5217\u8868\u63a8\u5bfc\u5f0f \u5217\u8868\u63a8\u5bfc\u5f0f\u5373List Comprehensions\uff0c\u662fPython\u5185\u7f6e\u7684\u975e\u5e38\u7b80\u5355\u5374\u5f3a\u5927\u7684\u53ef\u4ee5\u7528\u6765\u521b\u5efalist\u7684\u63a8\u5bfc\u5f0f\u3002 \u8fd0\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c \u53ef\u4ee5\u5199\u51fa\u975e\u5e38\u7b80\u6d01\u7684\u4ee3\u7801 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8981\u751f\u6210list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u53ef\u4ee5\u7528 list(range(1, 11)) \uff1a list ( range ( 1 , 11 )) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u4f46\u5982\u679c\u8981\u751f\u6210 [1x1, 2x2, 3x3, ..., 10x10] \u600e\u4e48\u505a\uff1f\u65b9\u6cd5\u4e00\u662f\u5faa\u73af\uff1a L = [] for x in range ( 1 , 11 ): L . append ( x * x ) pprint . pprint ( L ) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u4f46\u662f\u5faa\u73af\u592a\u7e41\u7410\uff0c\u800c\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u53ef\u4ee5\u7528\u4e00\u884c\u8bed\u53e5\u4ee3\u66ff\u5faa\u73af\u751f\u6210\u4e0a\u9762\u7684list\uff1a [ x * x for x in range ( 1 , 11 )] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u5199\u5217\u8868\u63a8\u5bfc\u5f0f\u65f6\uff0c\u628a \u8981\u751f\u6210\u7684\u5143\u7d20 x * x \u653e\u5230\u524d\u9762 \uff0c\u540e\u9762\u8ddf for \u5faa\u73af\uff0c\u5c31\u53ef\u4ee5\u628alist\u521b\u5efa\u51fa\u6765\uff0c\u5341\u5206\u6709\u7528\uff0c\u591a\u5199\u51e0\u6b21\uff0c\u5f88\u5feb\u5c31\u53ef\u4ee5\u719f\u6089\u8fd9\u79cd\u8bed\u6cd5\u3002 for\u5faa\u73af\u540e\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e0aif\u5224\u65ad\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7b5b\u9009\u51fa\u4ec5\u5076\u6570\u7684\u5e73\u65b9\uff1a [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [4, 16, 36, 64, 100] \u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e24\u5c42\u5faa\u73af\uff0c\u53ef\u4ee5\u751f\u6210\u5168\u6392\u5217\uff1a [ m + n for m in 'ABC' for n in 'XYZ' ] ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] \u4e09\u5c42\u548c\u4e09\u5c42\u4ee5\u4e0a\u7684\u5faa\u73af\u5c31\u5f88\u5c11\u7528\u5230\u4e86\u3002 for \u5faa\u73af\u5176\u5b9e\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u4e2a\u751a\u81f3\u591a\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982 dict \u7684 items() \u53ef\u4ee5\u540c\u65f6\u8fed\u4ee3key\u548cvalue\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } for k , v in d . items (): print ( k , '=' , v ) x = A y = B z = C \u56e0\u6b64\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u6765\u751f\u6210list\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } [ k + '=' + v for k , v in d . items ()] ['x=A', 'y=B', 'z=C'] \u5b57\u5178\u63a8\u5bfc\u5f0f \u5b57\u5178\u63a8\u5bfc\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u7c7b\u4f3c\u7684\uff1a { key : value for key , value in enumerate ( range ( 4 ))} {0: 0, 1: 1, 2: 2, 3: 3}","title":"2.7.\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.%E6%8E%A8%E5%AF%BC%E5%BC%8F.html#_1","text":"\u5217\u8868\u63a8\u5bfc\u5f0f\u5373List Comprehensions\uff0c\u662fPython\u5185\u7f6e\u7684\u975e\u5e38\u7b80\u5355\u5374\u5f3a\u5927\u7684\u53ef\u4ee5\u7528\u6765\u521b\u5efalist\u7684\u63a8\u5bfc\u5f0f\u3002 \u8fd0\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\uff0c \u53ef\u4ee5\u5199\u51fa\u975e\u5e38\u7b80\u6d01\u7684\u4ee3\u7801 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8981\u751f\u6210list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u53ef\u4ee5\u7528 list(range(1, 11)) \uff1a list ( range ( 1 , 11 )) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \u4f46\u5982\u679c\u8981\u751f\u6210 [1x1, 2x2, 3x3, ..., 10x10] \u600e\u4e48\u505a\uff1f\u65b9\u6cd5\u4e00\u662f\u5faa\u73af\uff1a L = [] for x in range ( 1 , 11 ): L . append ( x * x ) pprint . pprint ( L ) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u4f46\u662f\u5faa\u73af\u592a\u7e41\u7410\uff0c\u800c\u5217\u8868\u63a8\u5bfc\u5f0f\u5219\u53ef\u4ee5\u7528\u4e00\u884c\u8bed\u53e5\u4ee3\u66ff\u5faa\u73af\u751f\u6210\u4e0a\u9762\u7684list\uff1a [ x * x for x in range ( 1 , 11 )] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] \u5199\u5217\u8868\u63a8\u5bfc\u5f0f\u65f6\uff0c\u628a \u8981\u751f\u6210\u7684\u5143\u7d20 x * x \u653e\u5230\u524d\u9762 \uff0c\u540e\u9762\u8ddf for \u5faa\u73af\uff0c\u5c31\u53ef\u4ee5\u628alist\u521b\u5efa\u51fa\u6765\uff0c\u5341\u5206\u6709\u7528\uff0c\u591a\u5199\u51e0\u6b21\uff0c\u5f88\u5feb\u5c31\u53ef\u4ee5\u719f\u6089\u8fd9\u79cd\u8bed\u6cd5\u3002 for\u5faa\u73af\u540e\u9762\u8fd8\u53ef\u4ee5\u52a0\u4e0aif\u5224\u65ad\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7b5b\u9009\u51fa\u4ec5\u5076\u6570\u7684\u5e73\u65b9\uff1a [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [4, 16, 36, 64, 100] \u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e24\u5c42\u5faa\u73af\uff0c\u53ef\u4ee5\u751f\u6210\u5168\u6392\u5217\uff1a [ m + n for m in 'ABC' for n in 'XYZ' ] ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] \u4e09\u5c42\u548c\u4e09\u5c42\u4ee5\u4e0a\u7684\u5faa\u73af\u5c31\u5f88\u5c11\u7528\u5230\u4e86\u3002 for \u5faa\u73af\u5176\u5b9e\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u4e2a\u751a\u81f3\u591a\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982 dict \u7684 items() \u53ef\u4ee5\u540c\u65f6\u8fed\u4ee3key\u548cvalue\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } for k , v in d . items (): print ( k , '=' , v ) x = A y = B z = C \u56e0\u6b64\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u6765\u751f\u6210list\uff1a d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } [ k + '=' + v for k , v in d . items ()] ['x=A', 'y=B', 'z=C']","title":"\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.7.%E6%8E%A8%E5%AF%BC%E5%BC%8F.html#_2","text":"\u5b57\u5178\u63a8\u5bfc\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u7c7b\u4f3c\u7684\uff1a { key : value for key , value in enumerate ( range ( 4 ))} {0: 0, 1: 1, 2: 2, 3: 3}","title":"\u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html","text":"\u8d4b\u503c \u5f15\u7528\uff08reference\uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a\u8be5\u8d44\u6599\u7684\u6307\u6807\u6216\u4f4d\u5740\u3002 Python\u7684\u8d4b\u503c\u90fd\u662f\u4f20\u5f15\u7528\uff0c\u5373name\u662fvalue\u7684\u5f15\u7528\u3002 \u5728python\u91cc\u9762\uff0c\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7684\u503c\u662f\u67d0\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002Python\u8d4b\u503c\u8bed\u53e5\u5c06\u5de6\u4fa7\u7684\u7b26\u53f7\u540d\u79f0\u4e0e\u53f3\u4fa7\u7684\u503c \u76f8\u5173\u8054 \u3002\u5728Python\u4e2d\uff0c\u6211\u4eec\u8bf4\u540d\u79f0\u5f15\u7528\u503c\uff0c\u6216\u8005\u540d\u79f0\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u4e0b\u6b21\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u65f6\uff0c\u4fbf\u5f97\u5230\u4e0e\u540d\u79f0\u76f8\u5173\u8054\u7684\u503c\u3002 assignment\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u5e76\u4e14\u591a\u4e2aname\u53ef\u4ee5\u5f15\u7528\u540c\u4e00\u4e2avalue\u3002 \u5f53\u503c\u5177\u6709\u591a\u4e2a\u540d\u79f0\u65f6\uff0c\u5f88\u5bb9\u6613\u6df7\u6dc6\u5e76\u5c06\u5176\u89c6\u4e3a\u4e24\u4e2a\u540d\u79f0\u548c\u4e24\u4e2a\u503c\u3002\uff1a x = 23 y = x \u4f46\u5c06\u5df2\u6709\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u65b0\u53d8\u91cf\u65f6\uff0cPython\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u503c\u3002\u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a23\uff0c x \u548c y \u90fd\u5f15\u7528\u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002 \u540d\u79f0\u662f\u72ec\u7acb\u4e8e\u5176\u4ed6\u540d\u79f0\u91cd\u65b0\u5206\u914d\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u76f8\u540c\u7684\u503c\uff0c\u5219\u4e0d\u4f1a\u94fe\u63a5\u8fd9\u4e24\u4e2a\u540d\u79f0\u3002\u91cd\u65b0\u5206\u914d\u5176\u4e2d\u4e00\u4e2a\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4e5f\u88ab\u91cd\u65b0\u5206\u914d\uff1a x = 23 y = x x = 12 \u5982\u679c\u4e0a\u9762\u5d4c\u5165\u7684\u7f51\u9875\u5931\u6548\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u52a8\u56fe\uff1a \u503c\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u540d\u79f0\u5f15\u7528\u5b83\u3002 Python\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u503c\u6709\u591a\u5c11\u5f15\u7528\uff0c\u5e76\u81ea\u52a8\u6e05\u9664\u6ca1\u6709\u5f15\u7528\u7684\u503c\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u5783\u573e\u6536\u96c6\u201d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u5fc5\u6e05\u695a\u503c\uff0c\u5f53\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u65f6\u5b83\u4eec\u4f1a\u81ea\u884c\u6d88\u5931\u3002 mutable \u548c immutable Python\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u5668\uff1a \u539f\u5b50\u7c7b\u578b\uff1astring\u3001number \u5bb9\u5668\u7c7b\u578b\uff1alist\u3001tuple\u3001dict\u3001set \u539f\u5b50\u7c7b\u578b\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u503c\uff1b\u5bb9\u5668\u7c7b\u578b\u5219\u53ef\u4ee5\u4fdd\u5b58\u591a\u4e2a\u503c\u3002 \u867d\u7136string\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u7b26\uff0c\u4f46Python\u4e2d\u6ca1\u6709\u5b57\u7b26\u7c7b\u578b\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u4e5f\u5c5e\u4e8e\u539f\u5b50\u7c7b\u578b\u3002 Python\u5bf9\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u578b\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff1a \u5bf9\u4e8e\u539f\u5b50\u7c7b\u578b\uff0cname\u76f4\u63a5\u6307\u5411object \u5bf9\u4e8e\u5bb9\u5668\u7c7b\u5668\uff0cname\u6307\u5411\u5bb9\u5668\u7c7b\u578b\u5bf9\u8c61\uff0c\u5bb9\u5668\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u6307\u5411\u5404\u4e2a\u5143\u7d20\u5bf9\u8c61 Python\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u53ef\u4ee5\u5206\u4e3a immutable \u548c mutable \uff1a immutable object : string\u3001tuple\u3001number mutable object : list\u3001dict\u3001set \u6240\u8c13\u7684mutable\u3001immutable\u662f\u6307name\u6307\u5411\u7684object\u53ef\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\u3002\u5982\u679c\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u4fee\u6539\uff0c\u5c31\u53ea\u80fd\u5728\u65b0\u5730\u5740\u521b\u5efa\u65b0\u5bf9\u8c61\uff0cname\u6307\u5411\u65b0\u5bf9\u8c61\uff08\u65e7\u5bf9\u8c61\u82e5\u6ca1\u6709\u5f15\u7528\uff0c\u5219\u4f1a\u88ab\u5185\u5b58\u56de\u6536\u673a\u5236\u9500\u6bc1\uff09\uff1a name = 10 print ( \"name\u7684id\uff1a\" , id ( name )) name = 20 print ( \"name\u7684id\uff1a\" , id ( name )) name\u7684id\uff1a 140724285510752 name\u7684id\uff1a 140724285511072 \u5982\u679c\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\uff0c\u90a3\u4e48name\u7684\u6307\u5411\u5c31\u4e0d\u4f1a\u6539\u53d8\uff08\u5bb9\u5668\u7c7b\u578b\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u4fdd\u5b58\u7684\u662f\u5143\u7d20\u7684\u5f15\u7528\uff09\uff1a name = [ 1 , 2 , 3 , 4 , 5 ] print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c {num} \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name [ 0 ] = 20 print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c {num} \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name\u7684\u503c: [1, 2, 3, 4, 5] name\u7684id\uff1a 1441647216520 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140724285510464 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140724285510496 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140724285510528 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140724285510560 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140724285510592 name\u7684\u503c: [20, 2, 3, 4, 5] name\u7684id\uff1a 1441647216520 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140724285511072 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140724285510496 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140724285510528 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140724285510560 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140724285510592 immutable\u7684\u672c\u8d28 \u795e\u8bdd\uff1aPython\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u914d\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u503c\u3002 \u56e0\u4e3amutable\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0cimmutable\u5bf9\u8c61\u4e0d\u53ef\u53d8\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97mutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u7684\u503c\u5206\u914d\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cmutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u6240\u6709\u7684\u8d4b\u503c\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 mutable\u3001immutable\u53ea\u662fpython\u8bed\u8a00\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u4ece\u786c\u4ef6\u89d2\u5ea6\u8bf4\uff0c\u786c\u4ef6\u63d0\u4f9b\u7ed9\u7528\u6237\u7684\u63a5\u53e3\u662f\u6309\u7167\u89c4\u5b9a\u8bbe\u5b9a\u597d\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u64cd\u4f5c\u5185\u5b58\u7684\u65b9\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u3002\u5b9e\u73b0python\u7684mutable\u3001immutable\u5c31\u662f\u8c03\u7528\u4e86\u4e0d\u540c\u7684\u5e95\u5c42API\uff0c\u6216\u8005\u662f\u4e0d\u540c\u5e95\u5c42API\u76f8\u4e92\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\u3002python\u5c06\u8fd9\u4e9b\u89c4\u5b9a\u4ee5python\u8bed\u6cd5\u7684\u5f62\u5f0f\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u6700\u540e\u8fd8\u662f\u7f16\u8bd1\u62100\u30011\u53bb\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5bf9\u8c61\u662f\u8bed\u8a00\u63d0\u4f9b\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e9b\u529f\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u5176\u5b9e\u662f\u6ca1\u533a\u522b\u7684\u3002 \u56e0\u6b64\uff0cmutable\u548cimmutable\u7684\u672c\u8d28\u533a\u522b\u662fPython\u6709\u6ca1\u6709\u63d0\u4f9b\u4fee\u6539\u503c\u7684\u65b9\u6cd5\u3002 \u4e0d\u7ba1\u662f\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0cPython\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5c06\u5bf9\u8c61\u7ed1\u5b9a\u5230\u540d\u5b57\uff08\u53c2\u89c1\u4e0a\u9762\u7684\u56fe\u793a\u548c\u793a\u4f8b\u4ee3\u7801\uff09\u3002 \u8d4b\u503c\u9677\u9631\u2014\u2014\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d \u795e\u8bdd\uff1a\u503c\u662f\u6709\u8303\u56f4\u7684\u3002 \u5728python\u4e2d\u5b58\u5728\u4f5c\u7528\u57df\u8fd9\u6837\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u4f5c\u7528\u57df\u6307\u7684\u662f\u503c\uff08\u5bf9\u8c61\uff09\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c \u503c\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff0c\u4f5c\u7528\u57df\u6307\u7684\u662f\u540d\u79f0\u7684\u4f5c\u7528\u8303\u56f4\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e0e\u9a8c\u8bc1\u8fd9\u70b9\u3002 def check_name_space_range ( x ): print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) # \u5148\u5728\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u8d4b\u503c\uff0c\u5e76\u6253\u5370\u5730\u5740 a = 10 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) check_name_space_range ( a ) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140724285510752 x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140724285510752 \u5f88\u660e\u663e\uff0c\u5728\u5185\u5916\u5c42\u4f5c\u7528\u57df\u7684\u503c\u90fd\u662f\u540c\u4e00\u4e2a\u3002 \u9677\u9631\uff1a\u56e0\u4e3a\u503c\u6ca1\u6709\u8303\u56f4\uff0c\u5e76\u4e14\u8d4b\u503c\u4e0d\u4f1a\u590d\u5236\u503c\uff0c\u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u53ef\u53d8\u5bf9\u8c61\u88ab\u610f\u5916\u5730\u6539\u53d8\uff1a def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] \u53ef\u4ee5\u770b\u5230\uff0c a \u3001 a_other \u90fd\u88ab\u6539\u53d8\u4e86\uff0c\u56e0\u4e3a a \u3001 a_other \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441620592200 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441620592200 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5728\u51fd\u6570\u91cc\u9762\u66f4\u6539\u53ef\u53d8\u5bf9\u8c61\u53c2\u6570\u7684\u503c\uff0c\u6700\u597d\u590d\u5236\u4e00\u4e2a\u526f\u672c\u3002 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441623564040 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441647218056 a \u7684\u503c\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u770b\u4f3c\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u8fd8\u662f\u4f1a\u6709\u65b0\u7684\u201d\u60ca\u559c\u201c\u3002 \u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0b variable_change_shallow \u51fd\u6570 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441667197256 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441648401544 \u201d\u60ca\u559c\u201c\u5c31\u662f a \u7684\u503c\u4e5f\u6539\u53d8\u4e86\u3002\u56e0\u4e3a x.copy() \u53ea\u662f\u6d45\u62f7\u8d1d\u3002 \u5728python\u91cc\u9762\u6709\u4e09\u79cd\u65b9\u5f0f\u53bb\u5f15\u7528\u67d0\u4e2a\u503c\uff1a \u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf \u6d45\u62f7\u8d1d \u6df1\u62f7\u8d1d \u8fd9\u4e09\u79cd\u65b9\u5f0f\u662f\u6709\u533a\u522b\u7684\u3002 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) \u53d8\u91cf a \u548c a_reference \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u6d45\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_shallow \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46 a_shallow \u7684\u7b2c\u4e09\u4e2a\u5143\u7d20 a_shallow[2] \u5374\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u8fd9\u548c a \u3001 a_reference \u4e00\u6837\u3002 \u6df1\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_deep_copy \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e5f\u662f\u65b0\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u6d45\u62f7\u8d1d\u7684\u5bf9\u8c61\u5305\u542b\u4e86mutable\u5bf9\u8c61\uff0c\u5219mutable\u5bf9\u8c61\u4e0d\u4f1a\u62f7\u8d1d\uff1b\u800c\u6df1\u62f7\u8d1d\u5219\u4f1a\u5b8c\u6574\u62f7\u8d1d\u5bf9\u8c61\u3002 \u8d4b\u503c\u9677\u9631\u2014\u2014\u5f15\u7528\u4e0d\u4ec5\u4ec5\u9650\u4e8e\u540d\u79f0 \u4ee5\u4e0a\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528\u540d\u79f0\u4f5c\u4e3a\u503c\u7684\u5f15\u7528\uff0c\u4f46\u5f15\u7528\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e1c\u897f\u3002 Python\u6709\u8bb8\u591a\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7ed3\u6784\u90fd\u5305\u542b\u5bf9\u503c\u7684\u5f15\u7528\uff1a\u5217\u8868\u5143\u7d20\uff0c\u5b57\u5178\u952e\u548c\u503c\uff0c\u5bf9\u8c61\u5c5e\u6027\u7b49\u3002 \u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5728\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u4fa7\u4f7f\u7528\uff0c\u4ee5\u4e0a\u6240\u6709\u7ec6\u8282\u90fd\u9002\u7528\u4e8e\u5b83\u4eec\u3002 \u4efb\u4f55\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u5de6\u4fa7\u7684\u5185\u5bb9\u90fd\u662f\u5f15\u7528 \uff0c\u5728\u672c\u6587\u4e2d\u8bf4\u201c\u540d\u79f0\u201d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u7528\u201c\u5f15\u7528\u201d\u66ff\u6362\u3002 \u5728\u4e0a\u9762\u7684\u793a\u610f\u56fe\u4e2d\uff0c\u6570\u5b57\u88ab\u663e\u793a\u4e3a\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5bf9\u6570\u5b57\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\u7ed8\u5236\uff1a nums = [ 1 , 2 , 3 ] \u4f46\u8fd9\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ed8\u56fe\u7528\u4e86\u89c6\u89c9\u901f\u8bb0\uff1a \u5982\u679c\u4f60\u6709\u5217\u8868\u5143\u7d20\u5f15\u7528\u5176\u4ed6\u53ef\u53d8\u503c\uff0c\u4f8b\u5982\u5b50\u5217\u8868\uff0c\u8bf7\u52a1\u5fc5\u8bb0\u4f4f\u5217\u8868\u5143\u7d20\u53ea\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u8fd9\u662f\u4e00\u4e9b\u5176\u4ed6assignment\u7684\u4f8b\u5b50\u3002\u8fd9\u4e9b\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5f15\u7528\uff08reference\uff09\uff1a my_obj . attr = 23 # \u7c7b\u5c5e\u6027 my_dict [ key ] = 24 # \u5b57\u5178 my_list [ index ] = 25 # \u5217\u8868 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" # \u591a\u4e2a\u5bf9\u8c61\u5d4c\u5957 i = x \u6307\u5b9a\u4e86\u540d\u79f0 i \uff0c\u4f46 i[0] = x \u5e76\u4e0d\u662f\u6307\u5b9a\u540d\u79f0 i \uff0c\u800c\u662f\u6307\u5b9a\u4e86 i \u7684\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5f88\u591a\u4e1c\u897f\u90fd\u662fAssignment\u3002 \u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c\u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f15\u7528\uff0cpython\u91cc\u9762\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f5c\u4e3aassignments\u3002 \u8fd9\u4e9b\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u540d\u79f0 X \u7684\u8d4b\u503c\uff1a X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X \u6ce8\u610f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u8bed\u53e5\u50cfassignments\uff0c\u6211\u7684\u610f\u601d\u662f\u8fd9\u4e9b\u8bed\u53e5\u90fd\u662f\u8d4b\u503c\u3002\u5b83\u4eec\u90fd\u4f7f\u540d\u79f0 X \u5f15\u7528\u67d0\u4e2a\u503c\u3002\u4e0a\u9762\u6240\u8bf4\u7684\u5173\u4e8e\u8d4b\u503c\u7684\u6240\u6709\u5185\u5bb9\u90fd\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u8d4b\u503c\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bed\u53e5\u5c06 X \u5b9a\u4e49\u5728\u4e0e\u8bed\u53e5\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002Python 2\u548cPython 3\u4e4b\u95f4\u7684\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002\u4f46\u5b83\u4eec\u90fd\u662f\u771f\u6b63\u7684\u8d4b\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4e8b\u5b9e\u90fd\u662f\u5173\u4e8e\u8d4b\u503c\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u3002 Python\u901a\u8fc7\u8d4b\u503c\u6765\u4f20\u9012\u51fd\u6570\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e9b\u4e0a\u9762assignment\u5217\u8868\u4e2d\u6700\u6709\u8da3\u7684\u4e00\u4e2a\uff1a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6211\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u5c06\u5176\u53c2\u6570\u547d\u540d\u4e3a\uff1a def my_func ( x , y ): return x + y \u8fd9\u91cc x \u548c y \u662f\u51fd\u6570 my_func \u7684\u53c2\u6570\u3002\u5f53\u6211\u8c03\u7528 my_func \u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u5b9e\u9645\u503c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u503c\u5206\u914d\u7ed9 \u53c2\u6570\u540d\u79f0 \uff0c\u5c31\u50cf\u4f7f\u7528\u4e86\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\uff1a def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 \u8c03\u7528 my_func \u65f6\uff0c8\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 x \uff0c9\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 y \u3002\u8be5\u8d4b\u503c\u4e0e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u7b80\u5355\u8d4b\u503c\u8bed\u53e5\u5b8c\u5168\u76f8\u540c\u3002\u540d\u79f0 x \u548c y \u662f\u51fd\u6570\u7684\u672c\u5730\u540d\u79f0\uff08local\uff09\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c31\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u503c\u4ecd\u7136\u88ab\u5176\u4ed6\u540d\u79f0\u5f15\u7528\uff0c\u5219\u503c\u4ecd\u7136\u5b58\u5728\u3002 \u5c31\u50cf\u6240\u6709\u5176\u4ed6\u8d4b\u503c\u4e00\u6837\uff0c\u53ef\u53d8\u503c\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5e76\u4e14\u901a\u8fc7\u5176\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u5bf9\u503c\u7684\u66f4\u6539\u3002\u8fd9\u5728<\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d>\u4e2d\u5df2\u7ecf\u63d0\u5230\u3002 \u540d\u79f0\u548c\u503c\u7684\u4e00\u4e9b\u7ec6\u8282 \u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u3002\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002\u540d\u79f0\u53ef\u4ee5\u5f15\u7528\u6574\u6570\uff0c\u7136\u540e\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5f15\u7528\u51fd\u6570\uff0c\u7136\u540e\u5f15\u7528\u6a21\u5757\u3002\u5f53\u7136\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6df7\u4e71\u7684\u7a0b\u5e8f\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46Python\u8bed\u8a00\u4e0d\u4f1a\u4ecb\u610f\u3002 \u540d\u79f0\u6ca1\u6709\u7c7b\u578b\uff0c\u503c\u6ca1\u6709\u8303\u56f4\u3002 \u6b63\u5982\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u503c\u4e5f\u6ca1\u6709\u8303\u56f4\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u8be5\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\uff1a\u4f60\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u8be5\u540d\u79f0\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u540d\u79f0\u5c06\u88ab\u9500\u6bc1\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5982\u679c\u540d\u79f0\u7684\u503c\u5177\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u5916\u3002\u5b83\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u672c\u5730\u503c\u3002 \u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u6709\u540d\u79f0\u53ef\u4ee5\u5220\u9664\u3002 Python\u7684\u5185\u5b58\u7ba1\u7406\u5bf9\u5176\u884c\u4e3a\u81f3\u5173\u91cd\u8981\uff0c\u4f60\u4e0d\u4ec5\u4e0d\u5fc5\u5220\u9664\u503c\uff0c\u800c\u4e14\u65e0\u6cd5\u5220\u9664\u503c\u3002 nums = [ 1 , 2 , 3 ] del nums \u8fd9\u4e0d\u4f1a\u5220\u9664\u503c nums \uff0c\u5b83\u4f1a\u5220\u9664\u540d\u79f0 nums \u3002\u8be5\u540d\u79f0\u5c06\u4ece\u5176\u8303\u56f4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u5e38\u7684\u5f15\u7528\u8ba1\u6570\u5f00\u59cb\u6267\u884c\uff1a\u5982\u679c nums \u7684\u503c\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u5c06\u56de\u6536\u8be5\u503c\u3002\u4f46\u5982\u679c\u5b83\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 \u795e\u8bdd\uff1aPython\u6ca1\u6709\u53d8\u91cf\u3002 \u6709\u4e9b\u4eba\u559c\u6b22\u8bf4\uff0c\u201cPython\u6ca1\u6709\u53d8\u91cf\uff0c\u5b83\u6709\u540d\u5b57\u3002\u201d\u8fd9\u4e2a\u53e3\u53f7\u5177\u6709\u8bef\u5bfc\u6027\u3002\u4e8b\u5b9e\u662fPython\u6709\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eC\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\u3002 \u540d\u79f0\u662fPython\u7684\u53d8\u91cf\uff1a\u5b83\u4eec\u5f15\u7528\u503c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u503c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u53d8\u5316\uff08\u53d8\u5316\uff09\u3002\u4ec5\u4ec5\u56e0\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u5c3d\u7ba1\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8bed\u8a00\uff09\u8868\u73b0\u4e0d\u540c\uff0c\u6ca1\u6709\u7406\u7531\u5c06Python\u63cf\u8ff0\u4e3a\u6ca1\u6709\u53d8\u91cf\u3002","title":"2.8.\u8d4b\u503c\u3001immutable\u3001\u6df1\u62f7\u8d1d"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_1","text":"\u5f15\u7528\uff08reference\uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a\u8be5\u8d44\u6599\u7684\u6307\u6807\u6216\u4f4d\u5740\u3002 Python\u7684\u8d4b\u503c\u90fd\u662f\u4f20\u5f15\u7528\uff0c\u5373name\u662fvalue\u7684\u5f15\u7528\u3002 \u5728python\u91cc\u9762\uff0c\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7684\u503c\u662f\u67d0\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002Python\u8d4b\u503c\u8bed\u53e5\u5c06\u5de6\u4fa7\u7684\u7b26\u53f7\u540d\u79f0\u4e0e\u53f3\u4fa7\u7684\u503c \u76f8\u5173\u8054 \u3002\u5728Python\u4e2d\uff0c\u6211\u4eec\u8bf4\u540d\u79f0\u5f15\u7528\u503c\uff0c\u6216\u8005\u540d\u79f0\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u4e0b\u6b21\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u65f6\uff0c\u4fbf\u5f97\u5230\u4e0e\u540d\u79f0\u76f8\u5173\u8054\u7684\u503c\u3002 assignment\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u5e76\u4e14\u591a\u4e2aname\u53ef\u4ee5\u5f15\u7528\u540c\u4e00\u4e2avalue\u3002 \u5f53\u503c\u5177\u6709\u591a\u4e2a\u540d\u79f0\u65f6\uff0c\u5f88\u5bb9\u6613\u6df7\u6dc6\u5e76\u5c06\u5176\u89c6\u4e3a\u4e24\u4e2a\u540d\u79f0\u548c\u4e24\u4e2a\u503c\u3002\uff1a x = 23 y = x \u4f46\u5c06\u5df2\u6709\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u65b0\u53d8\u91cf\u65f6\uff0cPython\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u503c\u3002\u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a23\uff0c x \u548c y \u90fd\u5f15\u7528\u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002 \u540d\u79f0\u662f\u72ec\u7acb\u4e8e\u5176\u4ed6\u540d\u79f0\u91cd\u65b0\u5206\u914d\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u76f8\u540c\u7684\u503c\uff0c\u5219\u4e0d\u4f1a\u94fe\u63a5\u8fd9\u4e24\u4e2a\u540d\u79f0\u3002\u91cd\u65b0\u5206\u914d\u5176\u4e2d\u4e00\u4e2a\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4e5f\u88ab\u91cd\u65b0\u5206\u914d\uff1a x = 23 y = x x = 12 \u5982\u679c\u4e0a\u9762\u5d4c\u5165\u7684\u7f51\u9875\u5931\u6548\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u52a8\u56fe\uff1a \u503c\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u540d\u79f0\u5f15\u7528\u5b83\u3002 Python\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u503c\u6709\u591a\u5c11\u5f15\u7528\uff0c\u5e76\u81ea\u52a8\u6e05\u9664\u6ca1\u6709\u5f15\u7528\u7684\u503c\u3002\u8fd9\u88ab\u79f0\u4e3a\u201c\u5783\u573e\u6536\u96c6\u201d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u5fc5\u6e05\u695a\u503c\uff0c\u5f53\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u65f6\u5b83\u4eec\u4f1a\u81ea\u884c\u6d88\u5931\u3002","title":"\u8d4b\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#mutable-immutable","text":"Python\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u5668\uff1a \u539f\u5b50\u7c7b\u578b\uff1astring\u3001number \u5bb9\u5668\u7c7b\u578b\uff1alist\u3001tuple\u3001dict\u3001set \u539f\u5b50\u7c7b\u578b\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u503c\uff1b\u5bb9\u5668\u7c7b\u578b\u5219\u53ef\u4ee5\u4fdd\u5b58\u591a\u4e2a\u503c\u3002 \u867d\u7136string\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u7b26\uff0c\u4f46Python\u4e2d\u6ca1\u6709\u5b57\u7b26\u7c7b\u578b\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u4e5f\u5c5e\u4e8e\u539f\u5b50\u7c7b\u578b\u3002 Python\u5bf9\u539f\u5b50\u7c7b\u578b\u548c\u5bb9\u5668\u7c7b\u578b\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff1a \u5bf9\u4e8e\u539f\u5b50\u7c7b\u578b\uff0cname\u76f4\u63a5\u6307\u5411object \u5bf9\u4e8e\u5bb9\u5668\u7c7b\u5668\uff0cname\u6307\u5411\u5bb9\u5668\u7c7b\u578b\u5bf9\u8c61\uff0c\u5bb9\u5668\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u6307\u5411\u5404\u4e2a\u5143\u7d20\u5bf9\u8c61 Python\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u53ef\u4ee5\u5206\u4e3a immutable \u548c mutable \uff1a immutable object : string\u3001tuple\u3001number mutable object : list\u3001dict\u3001set \u6240\u8c13\u7684mutable\u3001immutable\u662f\u6307name\u6307\u5411\u7684object\u53ef\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\u3002\u5982\u679c\u4e0d\u53ef\u4ee5\u5728\u539f\u5730\u5740\u4fee\u6539\uff0c\u5c31\u53ea\u80fd\u5728\u65b0\u5730\u5740\u521b\u5efa\u65b0\u5bf9\u8c61\uff0cname\u6307\u5411\u65b0\u5bf9\u8c61\uff08\u65e7\u5bf9\u8c61\u82e5\u6ca1\u6709\u5f15\u7528\uff0c\u5219\u4f1a\u88ab\u5185\u5b58\u56de\u6536\u673a\u5236\u9500\u6bc1\uff09\uff1a name = 10 print ( \"name\u7684id\uff1a\" , id ( name )) name = 20 print ( \"name\u7684id\uff1a\" , id ( name )) name\u7684id\uff1a 140724285510752 name\u7684id\uff1a 140724285511072 \u5982\u679c\u53ef\u4ee5\u5728\u539f\u5730\u5740\u88ab\u4fee\u6539\uff0c\u90a3\u4e48name\u7684\u6307\u5411\u5c31\u4e0d\u4f1a\u6539\u53d8\uff08\u5bb9\u5668\u7c7b\u578b\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u4fdd\u5b58\u7684\u662f\u5143\u7d20\u7684\u5f15\u7528\uff09\uff1a name = [ 1 , 2 , 3 , 4 , 5 ] print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c {num} \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name [ 0 ] = 20 print ( \"name\u7684\u503c:\" , name , \" \" , \"name\u7684id\uff1a\" , id ( name )) for num , i in enumerate ( name ): print ( f \"\u7b2c {num} \u4e2a\u5143\u7d20\u7684id\" , id ( i )) name\u7684\u503c: [1, 2, 3, 4, 5] name\u7684id\uff1a 1441647216520 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140724285510464 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140724285510496 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140724285510528 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140724285510560 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140724285510592 name\u7684\u503c: [20, 2, 3, 4, 5] name\u7684id\uff1a 1441647216520 \u7b2c0\u4e2a\u5143\u7d20\u7684id 140724285511072 \u7b2c1\u4e2a\u5143\u7d20\u7684id 140724285510496 \u7b2c2\u4e2a\u5143\u7d20\u7684id 140724285510528 \u7b2c3\u4e2a\u5143\u7d20\u7684id 140724285510560 \u7b2c4\u4e2a\u5143\u7d20\u7684id 140724285510592","title":"mutable \u548c immutable"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#immutable","text":"\u795e\u8bdd\uff1aPython\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u914d\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u503c\u3002 \u56e0\u4e3amutable\u5bf9\u8c61\u662f\u53ef\u53d8\u7684\uff0cimmutable\u5bf9\u8c61\u4e0d\u53ef\u53d8\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97mutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u7684\u503c\u5206\u914d\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cmutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u6240\u6709\u7684\u8d4b\u503c\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 mutable\u3001immutable\u53ea\u662fpython\u8bed\u8a00\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u4ece\u786c\u4ef6\u89d2\u5ea6\u8bf4\uff0c\u786c\u4ef6\u63d0\u4f9b\u7ed9\u7528\u6237\u7684\u63a5\u53e3\u662f\u6309\u7167\u89c4\u5b9a\u8bbe\u5b9a\u597d\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u64cd\u4f5c\u5185\u5b58\u7684\u65b9\u5f0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u3002\u5b9e\u73b0python\u7684mutable\u3001immutable\u5c31\u662f\u8c03\u7528\u4e86\u4e0d\u540c\u7684\u5e95\u5c42API\uff0c\u6216\u8005\u662f\u4e0d\u540c\u5e95\u5c42API\u76f8\u4e92\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\u3002python\u5c06\u8fd9\u4e9b\u89c4\u5b9a\u4ee5python\u8bed\u6cd5\u7684\u5f62\u5f0f\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u6700\u540e\u8fd8\u662f\u7f16\u8bd1\u62100\u30011\u53bb\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5bf9\u8c61\u662f\u8bed\u8a00\u63d0\u4f9b\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e9b\u529f\u80fd\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u5176\u5b9e\u662f\u6ca1\u533a\u522b\u7684\u3002 \u56e0\u6b64\uff0cmutable\u548cimmutable\u7684\u672c\u8d28\u533a\u522b\u662fPython\u6709\u6ca1\u6709\u63d0\u4f9b\u4fee\u6539\u503c\u7684\u65b9\u6cd5\u3002 \u4e0d\u7ba1\u662f\u53ef\u53d8\u5bf9\u8c61\u8fd8\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0cPython\u7684\u8d4b\u503c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5c06\u5bf9\u8c61\u7ed1\u5b9a\u5230\u540d\u5b57\uff08\u53c2\u89c1\u4e0a\u9762\u7684\u56fe\u793a\u548c\u793a\u4f8b\u4ee3\u7801\uff09\u3002","title":"immutable\u7684\u672c\u8d28"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_2","text":"\u795e\u8bdd\uff1a\u503c\u662f\u6709\u8303\u56f4\u7684\u3002 \u5728python\u4e2d\u5b58\u5728\u4f5c\u7528\u57df\u8fd9\u6837\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u4f5c\u7528\u57df\u6307\u7684\u662f\u503c\uff08\u5bf9\u8c61\uff09\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c \u503c\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff0c\u4f5c\u7528\u57df\u6307\u7684\u662f\u540d\u79f0\u7684\u4f5c\u7528\u8303\u56f4\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e0e\u9a8c\u8bc1\u8fd9\u70b9\u3002 def check_name_space_range ( x ): print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) # \u5148\u5728\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u8d4b\u503c\uff0c\u5e76\u6253\u5370\u5730\u5740 a = 10 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) check_name_space_range ( a ) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140724285510752 x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a140724285510752 \u5f88\u660e\u663e\uff0c\u5728\u5185\u5916\u5c42\u4f5c\u7528\u57df\u7684\u503c\u90fd\u662f\u540c\u4e00\u4e2a\u3002 \u9677\u9631\uff1a\u56e0\u4e3a\u503c\u6ca1\u6709\u8303\u56f4\uff0c\u5e76\u4e14\u8d4b\u503c\u4e0d\u4f1a\u590d\u5236\u503c\uff0c\u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u53ef\u53d8\u5bf9\u8c61\u88ab\u610f\u5916\u5730\u6539\u53d8\uff1a def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] \u53ef\u4ee5\u770b\u5230\uff0c a \u3001 a_other \u90fd\u88ab\u6539\u53d8\u4e86\uff0c\u56e0\u4e3a a \u3001 a_other \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441620592200 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441620592200 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5728\u51fd\u6570\u91cc\u9762\u66f4\u6539\u53ef\u53d8\u5bf9\u8c61\u53c2\u6570\u7684\u503c\uff0c\u6700\u597d\u590d\u5236\u4e00\u4e2a\u526f\u672c\u3002 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441623564040 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441647218056 a \u7684\u503c\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u770b\u4f3c\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u8fd8\u662f\u4f1a\u6709\u65b0\u7684\u201d\u60ca\u559c\u201c\u3002 \u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0b variable_change_shallow \u51fd\u6570 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441667197256 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1441648401544 \u201d\u60ca\u559c\u201c\u5c31\u662f a \u7684\u503c\u4e5f\u6539\u53d8\u4e86\u3002\u56e0\u4e3a x.copy() \u53ea\u662f\u6d45\u62f7\u8d1d\u3002 \u5728python\u91cc\u9762\u6709\u4e09\u79cd\u65b9\u5f0f\u53bb\u5f15\u7528\u67d0\u4e2a\u503c\uff1a \u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf \u6d45\u62f7\u8d1d \u6df1\u62f7\u8d1d \u8fd9\u4e09\u79cd\u65b9\u5f0f\u662f\u6709\u533a\u522b\u7684\u3002 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) \u53d8\u91cf a \u548c a_reference \u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u6d45\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_shallow \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46 a_shallow \u7684\u7b2c\u4e09\u4e2a\u5143\u7d20 a_shallow[2] \u5374\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u8fd9\u548c a \u3001 a_reference \u4e00\u6837\u3002 \u6df1\u62f7\u8d1d\u5f97\u5230\u53d8\u91cf a_deep_copy \uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e5f\u662f\u65b0\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u6d45\u62f7\u8d1d\u7684\u5bf9\u8c61\u5305\u542b\u4e86mutable\u5bf9\u8c61\uff0c\u5219mutable\u5bf9\u8c61\u4e0d\u4f1a\u62f7\u8d1d\uff1b\u800c\u6df1\u62f7\u8d1d\u5219\u4f1a\u5b8c\u6574\u62f7\u8d1d\u5bf9\u8c61\u3002","title":"\u8d4b\u503c\u9677\u9631\u2014\u2014\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_3","text":"\u4ee5\u4e0a\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528\u540d\u79f0\u4f5c\u4e3a\u503c\u7684\u5f15\u7528\uff0c\u4f46\u5f15\u7528\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e1c\u897f\u3002 Python\u6709\u8bb8\u591a\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7ed3\u6784\u90fd\u5305\u542b\u5bf9\u503c\u7684\u5f15\u7528\uff1a\u5217\u8868\u5143\u7d20\uff0c\u5b57\u5178\u952e\u548c\u503c\uff0c\u5bf9\u8c61\u5c5e\u6027\u7b49\u3002 \u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5728\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u4fa7\u4f7f\u7528\uff0c\u4ee5\u4e0a\u6240\u6709\u7ec6\u8282\u90fd\u9002\u7528\u4e8e\u5b83\u4eec\u3002 \u4efb\u4f55\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u5de6\u4fa7\u7684\u5185\u5bb9\u90fd\u662f\u5f15\u7528 \uff0c\u5728\u672c\u6587\u4e2d\u8bf4\u201c\u540d\u79f0\u201d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u7528\u201c\u5f15\u7528\u201d\u66ff\u6362\u3002 \u5728\u4e0a\u9762\u7684\u793a\u610f\u56fe\u4e2d\uff0c\u6570\u5b57\u88ab\u663e\u793a\u4e3a\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5bf9\u6570\u5b57\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\u7ed8\u5236\uff1a nums = [ 1 , 2 , 3 ] \u4f46\u8fd9\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ed8\u56fe\u7528\u4e86\u89c6\u89c9\u901f\u8bb0\uff1a \u5982\u679c\u4f60\u6709\u5217\u8868\u5143\u7d20\u5f15\u7528\u5176\u4ed6\u53ef\u53d8\u503c\uff0c\u4f8b\u5982\u5b50\u5217\u8868\uff0c\u8bf7\u52a1\u5fc5\u8bb0\u4f4f\u5217\u8868\u5143\u7d20\u53ea\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u8fd9\u662f\u4e00\u4e9b\u5176\u4ed6assignment\u7684\u4f8b\u5b50\u3002\u8fd9\u4e9b\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5f15\u7528\uff08reference\uff09\uff1a my_obj . attr = 23 # \u7c7b\u5c5e\u6027 my_dict [ key ] = 24 # \u5b57\u5178 my_list [ index ] = 25 # \u5217\u8868 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" # \u591a\u4e2a\u5bf9\u8c61\u5d4c\u5957 i = x \u6307\u5b9a\u4e86\u540d\u79f0 i \uff0c\u4f46 i[0] = x \u5e76\u4e0d\u662f\u6307\u5b9a\u540d\u79f0 i \uff0c\u800c\u662f\u6307\u5b9a\u4e86 i \u7684\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5f88\u591a\u4e1c\u897f\u90fd\u662fAssignment\u3002 \u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c\u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f15\u7528\uff0cpython\u91cc\u9762\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f5c\u4e3aassignments\u3002 \u8fd9\u4e9b\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u540d\u79f0 X \u7684\u8d4b\u503c\uff1a X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X \u6ce8\u610f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u8bed\u53e5\u50cfassignments\uff0c\u6211\u7684\u610f\u601d\u662f\u8fd9\u4e9b\u8bed\u53e5\u90fd\u662f\u8d4b\u503c\u3002\u5b83\u4eec\u90fd\u4f7f\u540d\u79f0 X \u5f15\u7528\u67d0\u4e2a\u503c\u3002\u4e0a\u9762\u6240\u8bf4\u7684\u5173\u4e8e\u8d4b\u503c\u7684\u6240\u6709\u5185\u5bb9\u90fd\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u8d4b\u503c\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bed\u53e5\u5c06 X \u5b9a\u4e49\u5728\u4e0e\u8bed\u53e5\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002Python 2\u548cPython 3\u4e4b\u95f4\u7684\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002\u4f46\u5b83\u4eec\u90fd\u662f\u771f\u6b63\u7684\u8d4b\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4e8b\u5b9e\u90fd\u662f\u5173\u4e8e\u8d4b\u503c\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u3002 Python\u901a\u8fc7\u8d4b\u503c\u6765\u4f20\u9012\u51fd\u6570\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e9b\u4e0a\u9762assignment\u5217\u8868\u4e2d\u6700\u6709\u8da3\u7684\u4e00\u4e2a\uff1a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6211\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u5c06\u5176\u53c2\u6570\u547d\u540d\u4e3a\uff1a def my_func ( x , y ): return x + y \u8fd9\u91cc x \u548c y \u662f\u51fd\u6570 my_func \u7684\u53c2\u6570\u3002\u5f53\u6211\u8c03\u7528 my_func \u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u5b9e\u9645\u503c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u503c\u5206\u914d\u7ed9 \u53c2\u6570\u540d\u79f0 \uff0c\u5c31\u50cf\u4f7f\u7528\u4e86\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\uff1a def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 \u8c03\u7528 my_func \u65f6\uff0c8\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 x \uff0c9\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0 y \u3002\u8be5\u8d4b\u503c\u4e0e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u7b80\u5355\u8d4b\u503c\u8bed\u53e5\u5b8c\u5168\u76f8\u540c\u3002\u540d\u79f0 x \u548c y \u662f\u51fd\u6570\u7684\u672c\u5730\u540d\u79f0\uff08local\uff09\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c31\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u503c\u4ecd\u7136\u88ab\u5176\u4ed6\u540d\u79f0\u5f15\u7528\uff0c\u5219\u503c\u4ecd\u7136\u5b58\u5728\u3002 \u5c31\u50cf\u6240\u6709\u5176\u4ed6\u8d4b\u503c\u4e00\u6837\uff0c\u53ef\u53d8\u503c\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5e76\u4e14\u901a\u8fc7\u5176\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u5bf9\u503c\u7684\u66f4\u6539\u3002\u8fd9\u5728<\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d>\u4e2d\u5df2\u7ecf\u63d0\u5230\u3002","title":"\u8d4b\u503c\u9677\u9631\u2014\u2014\u5f15\u7528\u4e0d\u4ec5\u4ec5\u9650\u4e8e\u540d\u79f0"},{"location":"Python%E5%9F%BA%E7%A1%80/2.8.%E8%B5%8B%E5%80%BC%E3%80%81immutable%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D.html#_4","text":"\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u3002\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002\u540d\u79f0\u53ef\u4ee5\u5f15\u7528\u6574\u6570\uff0c\u7136\u540e\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5f15\u7528\u51fd\u6570\uff0c\u7136\u540e\u5f15\u7528\u6a21\u5757\u3002\u5f53\u7136\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6df7\u4e71\u7684\u7a0b\u5e8f\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46Python\u8bed\u8a00\u4e0d\u4f1a\u4ecb\u610f\u3002 \u540d\u79f0\u6ca1\u6709\u7c7b\u578b\uff0c\u503c\u6ca1\u6709\u8303\u56f4\u3002 \u6b63\u5982\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u503c\u4e5f\u6ca1\u6709\u8303\u56f4\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u8be5\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\uff1a\u4f60\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u8be5\u540d\u79f0\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u540d\u79f0\u5c06\u88ab\u9500\u6bc1\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5982\u679c\u540d\u79f0\u7684\u503c\u5177\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u5916\u3002\u5b83\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u672c\u5730\u503c\u3002 \u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u6709\u540d\u79f0\u53ef\u4ee5\u5220\u9664\u3002 Python\u7684\u5185\u5b58\u7ba1\u7406\u5bf9\u5176\u884c\u4e3a\u81f3\u5173\u91cd\u8981\uff0c\u4f60\u4e0d\u4ec5\u4e0d\u5fc5\u5220\u9664\u503c\uff0c\u800c\u4e14\u65e0\u6cd5\u5220\u9664\u503c\u3002 nums = [ 1 , 2 , 3 ] del nums \u8fd9\u4e0d\u4f1a\u5220\u9664\u503c nums \uff0c\u5b83\u4f1a\u5220\u9664\u540d\u79f0 nums \u3002\u8be5\u540d\u79f0\u5c06\u4ece\u5176\u8303\u56f4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u5e38\u7684\u5f15\u7528\u8ba1\u6570\u5f00\u59cb\u6267\u884c\uff1a\u5982\u679c nums \u7684\u503c\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u5c06\u56de\u6536\u8be5\u503c\u3002\u4f46\u5982\u679c\u5b83\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 \u795e\u8bdd\uff1aPython\u6ca1\u6709\u53d8\u91cf\u3002 \u6709\u4e9b\u4eba\u559c\u6b22\u8bf4\uff0c\u201cPython\u6ca1\u6709\u53d8\u91cf\uff0c\u5b83\u6709\u540d\u5b57\u3002\u201d\u8fd9\u4e2a\u53e3\u53f7\u5177\u6709\u8bef\u5bfc\u6027\u3002\u4e8b\u5b9e\u662fPython\u6709\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eC\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\u3002 \u540d\u79f0\u662fPython\u7684\u53d8\u91cf\uff1a\u5b83\u4eec\u5f15\u7528\u503c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u503c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u53d8\u5316\uff08\u53d8\u5316\uff09\u3002\u4ec5\u4ec5\u56e0\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u5c3d\u7ba1\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8bed\u8a00\uff09\u8868\u73b0\u4e0d\u540c\uff0c\u6ca1\u6709\u7406\u7531\u5c06Python\u63cf\u8ff0\u4e3a\u6ca1\u6709\u53d8\u91cf\u3002","title":"\u540d\u79f0\u548c\u503c\u7684\u4e00\u4e9b\u7ec6\u8282"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html","text":"\u51fd\u6570 \u5173\u952e\u5b57 def \u5f15\u5165\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u3002\u540e\u9762\u5fc5\u987b\u8ddf\u4e0a\u51fd\u6570\u540d\u548c\u5728\u5706\u62ec\u53f7\u91cc\u7684\u53c2\u6570\u5e8f\u5217\u3002\u51fd\u6570\u4f53\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u7f29\u8fdb\u3002 def func (): pass \u51fd\u5f0f\u4f53\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u53ef\u4ee5\u662f\u5b57\u4e32\u3002\u8fd9\u4e2a\u5b57\u4e32\u5c31\u662f\u51fd\u5f0f\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u6216\u79f0\u4e3a docstring\u3002\u6709\u5f88\u591a\u80fd\u5c06\u6587\u6863\u5b57\u4e32\u81ea\u52a8\u8f6c\u6362\u4e3a\u5728\u7ebf\u6216\u53ef\u6253\u5370\u6587\u6863\u7684\u5de5\u5177\uff0c\u6216\u8ba9\u7528\u6237\u5728\u4ee3\u7801\u4e2d\u4ea4\u4e92\u5730\u6d4f\u89c8\u5b83\u7684\u5de5\u5177\u3002 \u6267\u884c\u51fd\u6570\u4f1a\u5f15\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u6240\u6709\u5728\u51fd\u6570\u4e2d\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u548c\u503c\u90fd\u5c06\u5b58\u50a8\u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u53d8\u91cf\u5f15\u7528\u4f1a\u9996\u5148\u5728\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u5bfb\u627e\uff0c\u7136\u540e\u624d\u662f\u95ed\u5305\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u518d\u7136\u540e\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6700\u540e\u662f\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u3002\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\u5f15\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u53ef\u76f4\u63a5\u8d4b\u503c (\u9664\u975e\u7528 global \u8bed\u53e5\u8fdb\u884c\u58f0\u660e)\u3002 \u5177\u4f53\u7ec6\u8282\u53c2\u8003 \u300a\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u300b \u3002 \u6839\u636e\u5176\u5b83\u8bed\u8a00\u7684\u7ecf\u9a8c\uff0c\u4f60\u53ef\u80fd\u4f1a\u6307\u51fa func \u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u8fd4\u56de\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u6ca1\u6709\u5199 return \u8bed\u53e5\u7684\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u2014\u2014 None \u3002\u5982\u679c\u8981\u552f\u4e00\u8f93\u51fa\u7684\u503c\u662f None\uff0c\u90a3\u4e48\u89e3\u91ca\u5668\u4f1a\u6b63\u5f53\u7684\u6291\u5236\u8fd9\u6b21\u8fd4\u56de\u3002\u5982\u4f60\u5b9e\u5728\u60f3\u770b\u770b\u8fd9\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 print() \u51fd\u6570\u3002 return \u8bed\u53e5\u4ece\u51fd\u5f0f\u4e2d\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u6ca1\u6709\u8868\u8fbe\u5f0f\u53c2\u6570\u7684 return \u8bed\u53e5\u8fd4\u56de None\u3002\u76f4\u5230\u51fd\u5f0f\u7ed3\u675f\u4e5f\u6ca1\u6709 return \u8bed\u53e5\u4e5f\u8fd4\u56de \u3002 \u51fd\u6570\u4f20\u53c2 \u521a\u5b66Python\u7684\u4eba\u53ef\u80fd\u4f1a\u7591\u60d1\uff0cPython\u51fd\u6570\u4f20\u53c2\uff0c\u5230\u5e95\u662f\u4f20\u503c\uff0c\u8fd8\u662f\u4f20\u5f15\u7528\uff1f \u7b54\u6848\u5f88\u76f4\u63a5\uff0cPython\u51fd\u6570\u4f20\u53c2\u6c38\u8fdc\u90fd\u662f\u4f20\u5f15\u7528\u3002 \u5b9e\u9645\u4e0a\uff0cPython\u51fd\u6570\u4f20\u53c2\u5c31\u662f\u8d4b\u503c\uff0c\u6240\u4ee5\u4f20\u53c2\u7684\u884c\u4e3a\u548c\u8d4b\u503c\u7684\u884c\u4e3a\u662f\u4e00\u6837\u7684\u3002\u5728\u5bf9\u53ef\u53d8\u5bf9\u8c61\u7684\u53c2\u6570\u8fdb\u884c\u64cd\u4f5c\u524d\uff0c\u6700\u597d\u5148\u6df1\u62f7\u8d1d\u53c2\u6570\u7684\u503c\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f71\u54cd\u5168\u5c40\u53d8\u91cf\u3002 \u53c2\u6570 \u51fd\u6570\u6709\u56db\u79cd\u53c2\u6570\u6982\u5ff5\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u3002 \u5176\u4e2d\uff0c\u4f4d\u7f6e\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u662f\u4f20\u5165\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\uff1b\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u662f\u5b9a\u4e49\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\u3002 \u51fd\u6570\u6709\u4e09\u79cd\u5408\u6cd5\u8c03\u7528\u5f62\u5f0f\uff1a \u4ec5\u7ed9\u51fa\u5f3a\u5236\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u5f3a\u5236\u53c2\u6570\u548c\u90e8\u5206\u53ef\u9009\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u53c2\u6570 \u4f4d\u7f6e\u53c2\u6570 \u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4ee5\u7701\u7565\u5f62\u53c2\u540d\u5b57\uff0c\u6839\u636e\u51fd\u6570\u5b9a\u4e49\u7684\u53c2\u6570\u4f4d\u7f6e\u6765\u4f20\u9012\u53c2\u6570\u3002\u4f20\u5165\u7684\u53c2\u6570\u987a\u5e8f\u5fc5\u987b\u548c\u5b9a\u4e49\u53c2\u6570\u7684\u987a\u5e8f\u4e00\u81f4\uff0c\u4e14\u5c11\u4e00\u4e2a\u53c2\u6570\u90fd\u4e0d\u53ef\u4ee5\u3002 def print_hello ( name , sex ): sex_dict = { 1 : u '\u5148\u751f' , 2 : u '\u5973\u58eb' } print ( 'hello %s %s , welcome to python world!' % ( name , sex_dict . get ( sex , u '\u5148\u751f' ))) print_hello ( 'Jack' , 1 ) hello Jack \u5148\u751f, welcome to python world! \u5173\u952e\u5b57\u53c2\u6570 \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u201c\u952e=\u503c\u201d\u5f62\u5f0f\u6307\u5b9a\u3002\u8fd9\u53ef\u4ee5\u8ba9\u51fd\u6570\u66f4\u52a0\u6e05\u6670\u3001\u5bb9\u6613\u4f7f\u7528\uff0c\u540c\u65f6\u5173\u952e\u5b57\u53c2\u6570\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u6307\u5b9a\u3002 # \u4ee5\u4e0b\u662f\u7528\u5173\u952e\u5b57\u53c2\u6570\u6b63\u786e\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u4f8b print_hello ( 'tanggu' , sex = 1 ) print_hello ( name = 'tanggu' , sex = 1 ) print_hello ( sex = 1 , name = 'tanggu' ) hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! # \u4ee5\u4e0b\u662f\u9519\u8bef\u7684\u8c03\u7528\u65b9\u5f0f print_hello ( 1 , name = 'tanggu' ) print_hello ( name = 'tanggu' , 1 ) print_hello ( sex = 1 , 'tanggu' ) \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff1a \u6709\u4f4d\u7f6e\u53c2\u6570\u65f6\uff0c\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u5728\u5173\u952e\u5b57\u53c2\u6570\u7684\u524d\u9762\uff0c\u4f46\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u95f4\u4e0d\u5b58\u5728\u5148\u540e\u987a\u5e8f\u7684 \u3002 \u9ed8\u8ba4\u53c2\u6570 \u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\uff0c\u4e3a\u53c2\u6570\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4f20\u53ef\u4e0d\u4f20\u8be5\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u51fa\u73b0\u5728\u9ed8\u8ba4\u53c2\u6570\u524d\uff0c\u5305\u62ec\u51fd\u6570\u5b9a\u4e49\u548c\u8c03\u7528\u3002 # \u6b63\u786e\u7684\u9ed8\u8ba4\u53c2\u6570\u5b9a\u4e49\u65b9\u5f0f--> \u4f4d\u7f6e\u53c2\u6570\u5728\u524d\uff0c\u9ed8\u8ba4\u53c2\u6570\u5728\u540e def print_hello ( name , sex = 1 ): .... # \u9519\u8bef\u7684\u5b9a\u4e49\u65b9\u5f0f def print_hello ( sex = 1 , name ): .... # \u8c03\u7528\u65f6\u4e0d\u4f20sex\u7684\u503c\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c1 # print_hello('tanggu') # \u8c03\u7528\u65f6\u4f20\u5165sex\u7684\u503c\uff0c\u5e76\u6307\u5b9a\u4e3a2 # print_hello('tanggu', 2) \u53ef\u53d8\u53c2\u6570 \u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u786e\u5b9a\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u4f20\u9012\u591a\u5c11\u4e2a\u53c2\u6570\uff08\u4e0d\u4f20\u53c2\u4e5f\u53ef\u4ee5\uff09\u3002\u6b64\u65f6\uff0c\u53ef\u7528\u5305\u88f9\uff08packing\uff09\u4f4d\u7f6e\u53c2\u6570\uff0c\u6216\u8005\u5305\u88f9\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6765\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u4f1a\u663e\u5f97\u975e\u5e38\u65b9\u4fbf\u3002 \u5305\u88f9\u4f4d\u7f6e\u4f20\u9012 def func ( * args ): .... \u2193 # func() # func(a) # func(a, b, c) \u6211\u4eec\u4f20\u8fdb\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab args \u53d8\u91cf\u6536\u96c6\uff0c\u5b83\u4f1a\u6839\u636e\u4f20\u8fdb\u53c2\u6570\u7684\u4f4d\u7f6e\u5408\u5e76\u4e3a\u4e00\u4e2a\u5143\u7ec4(tuple)\uff0c args \u662f\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u5305\u88f9\u4f4d\u7f6e\u4f20\u9012\u3002 \u5305\u88f9\u5173\u952e\u5b57\u4f20\u9012 def func ( ** kargs ): .... \u2193 # func(a=1) # func(a=1, b=2, c=3) kargs\u662f\u4e00\u4e2a\u5b57\u5178(dict)\uff0c\u6536\u96c6\u6240\u6709\u5173\u952e\u5b57\u53c2\u6570 \u89e3\u5305\u88f9\u53c2\u6570 * \u548c ** \uff0c\u4e5f\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u79f0\u4e4b\u4e3a\u89e3\u5305\u88f9(unpacking) \u5728\u4f20\u9012\u5143\u7ec4\u65f6\uff0c\u8ba9\u5143\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 def print_hello ( name , sex ): print name , sex # args = ('tanggu', '\u7537') # print_hello(*args) # tanggu \u7537 \u5728\u4f20\u9012\u5b57\u5178\u65f6\uff0c\u8ba9\u5b57\u5178\u7684\u6bcf\u4e2a\u952e\u503c\u5bf9\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 def print_hello ( kargs ): print kargs # kargs = {'name': 'tanggu', 'sex', u'\u7537'} # print_hello(**kargs) # {'name': 'tanggu', 'sex', u'\u7537'} \u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u7684\u6df7\u5408\u4f7f\u7528 \u987a\u5e8f\u662f\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5305\u88f9\u4f4d\u7f6e\u3001\u5305\u88f9\u5173\u952e\u5b57\uff0c\u5b9a\u4e49\u548c\u8c03\u7528\u90fd\u5e94\u9075\u5faa\u8fd9\u4e2a\u987a\u5e8f\u3002 def func ( name , age , sex = 1 , * args , ** kargs ): print name , age , sex , args , kargs # func('tanggu', 25, 2, 'music', 'sport', class=2) # tanggu 25 1 ('music', 'sport') {'class'=2}","title":"2.9.\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_1","text":"\u5173\u952e\u5b57 def \u5f15\u5165\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u3002\u540e\u9762\u5fc5\u987b\u8ddf\u4e0a\u51fd\u6570\u540d\u548c\u5728\u5706\u62ec\u53f7\u91cc\u7684\u53c2\u6570\u5e8f\u5217\u3002\u51fd\u6570\u4f53\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u7f29\u8fdb\u3002 def func (): pass \u51fd\u5f0f\u4f53\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u53ef\u4ee5\u662f\u5b57\u4e32\u3002\u8fd9\u4e2a\u5b57\u4e32\u5c31\u662f\u51fd\u5f0f\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u6216\u79f0\u4e3a docstring\u3002\u6709\u5f88\u591a\u80fd\u5c06\u6587\u6863\u5b57\u4e32\u81ea\u52a8\u8f6c\u6362\u4e3a\u5728\u7ebf\u6216\u53ef\u6253\u5370\u6587\u6863\u7684\u5de5\u5177\uff0c\u6216\u8ba9\u7528\u6237\u5728\u4ee3\u7801\u4e2d\u4ea4\u4e92\u5730\u6d4f\u89c8\u5b83\u7684\u5de5\u5177\u3002 \u6267\u884c\u51fd\u6570\u4f1a\u5f15\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u6240\u6709\u5728\u51fd\u6570\u4e2d\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u548c\u503c\u90fd\u5c06\u5b58\u50a8\u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u53d8\u91cf\u5f15\u7528\u4f1a\u9996\u5148\u5728\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u91cc\u5bfb\u627e\uff0c\u7136\u540e\u624d\u662f\u95ed\u5305\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u518d\u7136\u540e\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6700\u540e\u662f\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u3002\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\u5f15\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u53ef\u76f4\u63a5\u8d4b\u503c (\u9664\u975e\u7528 global \u8bed\u53e5\u8fdb\u884c\u58f0\u660e)\u3002 \u5177\u4f53\u7ec6\u8282\u53c2\u8003 \u300a\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df\u300b \u3002 \u6839\u636e\u5176\u5b83\u8bed\u8a00\u7684\u7ecf\u9a8c\uff0c\u4f60\u53ef\u80fd\u4f1a\u6307\u51fa func \u4e0d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u8fd4\u56de\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u6ca1\u6709\u5199 return \u8bed\u53e5\u7684\u51fd\u6570\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u2014\u2014 None \u3002\u5982\u679c\u8981\u552f\u4e00\u8f93\u51fa\u7684\u503c\u662f None\uff0c\u90a3\u4e48\u89e3\u91ca\u5668\u4f1a\u6b63\u5f53\u7684\u6291\u5236\u8fd9\u6b21\u8fd4\u56de\u3002\u5982\u4f60\u5b9e\u5728\u60f3\u770b\u770b\u8fd9\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 print() \u51fd\u6570\u3002 return \u8bed\u53e5\u4ece\u51fd\u5f0f\u4e2d\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u6ca1\u6709\u8868\u8fbe\u5f0f\u53c2\u6570\u7684 return \u8bed\u53e5\u8fd4\u56de None\u3002\u76f4\u5230\u51fd\u5f0f\u7ed3\u675f\u4e5f\u6ca1\u6709 return \u8bed\u53e5\u4e5f\u8fd4\u56de \u3002","title":"\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_2","text":"\u521a\u5b66Python\u7684\u4eba\u53ef\u80fd\u4f1a\u7591\u60d1\uff0cPython\u51fd\u6570\u4f20\u53c2\uff0c\u5230\u5e95\u662f\u4f20\u503c\uff0c\u8fd8\u662f\u4f20\u5f15\u7528\uff1f \u7b54\u6848\u5f88\u76f4\u63a5\uff0cPython\u51fd\u6570\u4f20\u53c2\u6c38\u8fdc\u90fd\u662f\u4f20\u5f15\u7528\u3002 \u5b9e\u9645\u4e0a\uff0cPython\u51fd\u6570\u4f20\u53c2\u5c31\u662f\u8d4b\u503c\uff0c\u6240\u4ee5\u4f20\u53c2\u7684\u884c\u4e3a\u548c\u8d4b\u503c\u7684\u884c\u4e3a\u662f\u4e00\u6837\u7684\u3002\u5728\u5bf9\u53ef\u53d8\u5bf9\u8c61\u7684\u53c2\u6570\u8fdb\u884c\u64cd\u4f5c\u524d\uff0c\u6700\u597d\u5148\u6df1\u62f7\u8d1d\u53c2\u6570\u7684\u503c\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f71\u54cd\u5168\u5c40\u53d8\u91cf\u3002","title":"\u51fd\u6570\u4f20\u53c2"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_3","text":"\u51fd\u6570\u6709\u56db\u79cd\u53c2\u6570\u6982\u5ff5\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u3002 \u5176\u4e2d\uff0c\u4f4d\u7f6e\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u662f\u4f20\u5165\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\uff1b\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u662f\u5b9a\u4e49\u51fd\u6570\u53c2\u6570\u65f6\u7684\u6982\u5ff5\u3002 \u51fd\u6570\u6709\u4e09\u79cd\u5408\u6cd5\u8c03\u7528\u5f62\u5f0f\uff1a \u4ec5\u7ed9\u51fa\u5f3a\u5236\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u5f3a\u5236\u53c2\u6570\u548c\u90e8\u5206\u53ef\u9009\u53c2\u6570 \u7ed9\u51fa\u6240\u6709\u53c2\u6570","title":"\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_4","text":"\u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4ee5\u7701\u7565\u5f62\u53c2\u540d\u5b57\uff0c\u6839\u636e\u51fd\u6570\u5b9a\u4e49\u7684\u53c2\u6570\u4f4d\u7f6e\u6765\u4f20\u9012\u53c2\u6570\u3002\u4f20\u5165\u7684\u53c2\u6570\u987a\u5e8f\u5fc5\u987b\u548c\u5b9a\u4e49\u53c2\u6570\u7684\u987a\u5e8f\u4e00\u81f4\uff0c\u4e14\u5c11\u4e00\u4e2a\u53c2\u6570\u90fd\u4e0d\u53ef\u4ee5\u3002 def print_hello ( name , sex ): sex_dict = { 1 : u '\u5148\u751f' , 2 : u '\u5973\u58eb' } print ( 'hello %s %s , welcome to python world!' % ( name , sex_dict . get ( sex , u '\u5148\u751f' ))) print_hello ( 'Jack' , 1 ) hello Jack \u5148\u751f, welcome to python world!","title":"\u4f4d\u7f6e\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_5","text":"\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u201c\u952e=\u503c\u201d\u5f62\u5f0f\u6307\u5b9a\u3002\u8fd9\u53ef\u4ee5\u8ba9\u51fd\u6570\u66f4\u52a0\u6e05\u6670\u3001\u5bb9\u6613\u4f7f\u7528\uff0c\u540c\u65f6\u5173\u952e\u5b57\u53c2\u6570\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u6307\u5b9a\u3002 # \u4ee5\u4e0b\u662f\u7528\u5173\u952e\u5b57\u53c2\u6570\u6b63\u786e\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u4f8b print_hello ( 'tanggu' , sex = 1 ) print_hello ( name = 'tanggu' , sex = 1 ) print_hello ( sex = 1 , name = 'tanggu' ) hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! hello tanggu \u5148\u751f, welcome to python world! # \u4ee5\u4e0b\u662f\u9519\u8bef\u7684\u8c03\u7528\u65b9\u5f0f print_hello ( 1 , name = 'tanggu' ) print_hello ( name = 'tanggu' , 1 ) print_hello ( sex = 1 , 'tanggu' ) \u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff1a \u6709\u4f4d\u7f6e\u53c2\u6570\u65f6\uff0c\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u5728\u5173\u952e\u5b57\u53c2\u6570\u7684\u524d\u9762\uff0c\u4f46\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u95f4\u4e0d\u5b58\u5728\u5148\u540e\u987a\u5e8f\u7684 \u3002","title":"\u5173\u952e\u5b57\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_6","text":"\u7528\u4e8e\u5b9a\u4e49\u51fd\u6570\uff0c\u4e3a\u53c2\u6570\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u53ef\u4f20\u53ef\u4e0d\u4f20\u8be5\u9ed8\u8ba4\u53c2\u6570\u7684\u503c\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u4f4d\u7f6e\u53c2\u6570\u5fc5\u987b\u51fa\u73b0\u5728\u9ed8\u8ba4\u53c2\u6570\u524d\uff0c\u5305\u62ec\u51fd\u6570\u5b9a\u4e49\u548c\u8c03\u7528\u3002 # \u6b63\u786e\u7684\u9ed8\u8ba4\u53c2\u6570\u5b9a\u4e49\u65b9\u5f0f--> \u4f4d\u7f6e\u53c2\u6570\u5728\u524d\uff0c\u9ed8\u8ba4\u53c2\u6570\u5728\u540e def print_hello ( name , sex = 1 ): .... # \u9519\u8bef\u7684\u5b9a\u4e49\u65b9\u5f0f def print_hello ( sex = 1 , name ): .... # \u8c03\u7528\u65f6\u4e0d\u4f20sex\u7684\u503c\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c1 # print_hello('tanggu') # \u8c03\u7528\u65f6\u4f20\u5165sex\u7684\u503c\uff0c\u5e76\u6307\u5b9a\u4e3a2 # print_hello('tanggu', 2)","title":"\u9ed8\u8ba4\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_7","text":"\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u786e\u5b9a\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u4f20\u9012\u591a\u5c11\u4e2a\u53c2\u6570\uff08\u4e0d\u4f20\u53c2\u4e5f\u53ef\u4ee5\uff09\u3002\u6b64\u65f6\uff0c\u53ef\u7528\u5305\u88f9\uff08packing\uff09\u4f4d\u7f6e\u53c2\u6570\uff0c\u6216\u8005\u5305\u88f9\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6765\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u4f1a\u663e\u5f97\u975e\u5e38\u65b9\u4fbf\u3002","title":"\u53ef\u53d8\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_8","text":"def func ( * args ): .... \u2193 # func() # func(a) # func(a, b, c) \u6211\u4eec\u4f20\u8fdb\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab args \u53d8\u91cf\u6536\u96c6\uff0c\u5b83\u4f1a\u6839\u636e\u4f20\u8fdb\u53c2\u6570\u7684\u4f4d\u7f6e\u5408\u5e76\u4e3a\u4e00\u4e2a\u5143\u7ec4(tuple)\uff0c args \u662f\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u5305\u88f9\u4f4d\u7f6e\u4f20\u9012\u3002","title":"\u5305\u88f9\u4f4d\u7f6e\u4f20\u9012"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_9","text":"def func ( ** kargs ): .... \u2193 # func(a=1) # func(a=1, b=2, c=3) kargs\u662f\u4e00\u4e2a\u5b57\u5178(dict)\uff0c\u6536\u96c6\u6240\u6709\u5173\u952e\u5b57\u53c2\u6570","title":"\u5305\u88f9\u5173\u952e\u5b57\u4f20\u9012"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_10","text":"* \u548c ** \uff0c\u4e5f\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u79f0\u4e4b\u4e3a\u89e3\u5305\u88f9(unpacking) \u5728\u4f20\u9012\u5143\u7ec4\u65f6\uff0c\u8ba9\u5143\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 def print_hello ( name , sex ): print name , sex # args = ('tanggu', '\u7537') # print_hello(*args) # tanggu \u7537 \u5728\u4f20\u9012\u5b57\u5178\u65f6\uff0c\u8ba9\u5b57\u5178\u7684\u6bcf\u4e2a\u952e\u503c\u5bf9\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 def print_hello ( kargs ): print kargs # kargs = {'name': 'tanggu', 'sex', u'\u7537'} # print_hello(**kargs) # {'name': 'tanggu', 'sex', u'\u7537'}","title":"\u89e3\u5305\u88f9\u53c2\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/2.9.%E5%87%BD%E6%95%B0.html#_11","text":"\u987a\u5e8f\u662f\uff1a\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u5305\u88f9\u4f4d\u7f6e\u3001\u5305\u88f9\u5173\u952e\u5b57\uff0c\u5b9a\u4e49\u548c\u8c03\u7528\u90fd\u5e94\u9075\u5faa\u8fd9\u4e2a\u987a\u5e8f\u3002 def func ( name , age , sex = 1 , * args , ** kargs ): print name , age , sex , args , kargs # func('tanggu', 25, 2, 'music', 'sport', class=2) # tanggu 25 1 ('music', 'sport') {'class'=2}","title":"\u4f4d\u7f6e\u53c2\u6570\u3001\u9ed8\u8ba4\u53c2\u6570\u3001\u53ef\u53d8\u53c2\u6570\u7684\u6df7\u5408\u4f7f\u7528"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html","text":"\u5f02\u5e38\u5904\u7406\u673a\u5236 \u5f02\u5e38\u5904\u7406\u65e0\u5916\u4e4e\u51e0\u4ef6\u4e8b: \u65ad\u8a00\uff08assert\uff09 \u629b\u9519\uff08raise\uff09 \u68c0\u67e5\uff08try\uff09 \u6355\u83b7\uff08except\uff09 \u5904\u7406\uff08except, else, finally\uff09 \u5f02\u5e38\u5373\u662f\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u4f1a\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\uff0c\u5f71\u54cd\u4e86\u7a0b\u5e8f\u7684\u6b63\u5e38\u6267\u884c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728Python\u65e0\u6cd5\u6b63\u5e38\u5904\u7406\u7a0b\u5e8f\u65f6\u5c31\u4f1a\u53d1\u751f\u4e00\u4e2a\u5f02\u5e38\u3002\u5f53Python\u811a\u672c\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u5f02\u5e38\u4f1a\u4ece\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e\u5411\u7a0b\u5e8f\u4e0a\u5c42\u4f20\u64ad\u3002\u4f8b\u5982\u5f02\u5e38\u4ece\u51fd\u6570\u5411\u5916\u4f20\u64ad\u5230\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\uff0c\u5982\u679c\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u7ee7\u7eed\u5411\u4e0a\u4f20\u64ad\uff0c\u5982\u679c\u4e00\u76f4\u90fd\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u4f20\u64ad\u5230\u7a0b\u5e8f\u7684\u6700\u9876\u5c42\uff0c\u5373\u4e3b\u7a0b\u5e8f\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\u3002\u5982\u679c\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u4e5f\u6ca1\u6709\u5904\u7406\u5f02\u5e38\u7684\u7a0b\u5e8f\uff0cpython\u5c06\u8c03\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u81ea\u52a8\u5339\u914d\u5f02\u5e38\u7684\u7c7b\u578b\uff0c\u7136\u540e\u4e2d\u6b62\u7a0b\u5e8f\u5e76\u663e\u793a\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002 # \u5728cause_error\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38 def cause_error (): raise Exception ( \"Somrthing is wrong\" ) # \u5728call_cause_error\u51fd\u6570\u4e2d\u8c03\u7528cause_error\u51fd\u6570 def call_cause_error (): cause_error () def deal_error (): try : cause_error () except : print ( \"Exception handled\" ) call_cause_error () ---------------------------------------------------------------------------Exception Traceback (most recent call last)<ipython-input-1-eb81f11bf5d9> in <module> ----> 1 call_cause_error() <ipython-input-1-ec5e029839e0> in call_cause_error() 1 def call_cause_error(): ----> 2 cause_error() 3 <ipython-input-1-11326a099618> in cause_error() 1 def cause_error(): ----> 2 raise Exception(\"Somrthing is wrong\") 3 Exception: Somrthing is wrong deal_error () Exception handled \u5982\u4f60\u6240\u89c1\uff0ccause_error\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u4f9d\u6b21\u4ececause_error\u548ccall_cause_error\u5411\u5916\u4f20\u64ad\uff0c\u6700\u7ec8\u5bfc\u81f4\u663e\u793a\u4e00\u6761\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002\u8c03\u7528deal_error\u65f6\uff0c\u5f02\u5e38\u5728\u4f20\u64ad\u5230deal_error\u65f6\u88ab\u6355\u83b7\uff0c\u5e76\u88ab\u8fd9\u91cc\u7684try/except\u8bed\u53e5\u5904\u7406\u3002 \u5f02\u5e38\u662fPython\u5bf9\u8c61\uff0c\u8868\u793a\u4e00\u4e2a\u9519\u8bef\u3002\u5f02\u5e38\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u88ab\u5b9a\u4e49, \u4e5f\u53ef\u4ee5\u4eba\u4e3a\u5f15\u53d1\u5f02\u5e38\u3002 \u5f02\u5e38\u5904\u7406\u8bed\u53e5 try : #' try\u8bed\u53e5\u4e2d\u4ee3\u7801\u9996\u5148\u88ab\u8fd0\u884c < statement > except \uff1a #' \u6355\u83b7\u4efb\u4f55\u5728try\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38 < statement > except < name > \uff1a #' \u6355\u83b7\u5728try\u4e2d\u5f15\u53d1\u7684<name>\u5f02\u5e38 < statement > except < name > \uff0c < data > : #' \u5982\u679c\u5f15\u53d1\u4e86'name'\u5f02\u5e38\uff0c\u83b7\u5f97\u9644\u52a0\u7684\u6570\u636e < statement > except ( < name1 > , < name2 >... ): #' \u6355\u83b7\u5217\u51fa\u7684\u591a\u4e2a\u5f02\u5e38 < statement > else : #' \u5982\u679c\u6ca1\u6709\u5f02\u5e38\u53d1\u751f < statement > finally : #' \u9000\u51fatry\u65f6\u603b\u4f1a\u6267\u884c < statement > raise #' \u4eba\u4e3a\u5f15\u53d1\u9519\u8bef assert < judgement > #' \u65ad\u8a00,\u5224\u65ad\u4e00\u5b9a\u8981\u8fd4\u56deTrue\u5426\u5219\u4f1a\u5f15\u53d1AssertionError raise\u8bed\u53e5 \u4f7f\u7528raise...from...\u8bed\u53e5\u6765\u63d0\u4f9b\u81ea\u5df1\u7684\u5f02\u5e38\u4e0a\u4e0b\u6587\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528None\u6765\u7981\u6b62\u4e0a\u4e0b\u6587\u3002 # \u9ed8\u8ba4\u8f93\u51fa\u5f02\u5e38\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 1 try: ----> 2 1/0 3 except ZeroDivisionError: ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError 5 ValueError: # \u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from ZeroDivisionError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)ZeroDivisionError: The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last)<ipython-input-1-00ed5b67ecd8> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from ZeroDivisionError 5 ValueError: # \u7981\u6b62\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from None ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-d9388897f61c> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from None ValueError: \u5185\u7f6e\u5f02\u5e38 \u5f02\u5e38\u540d\u79f0 \u63cf\u8ff0 BaseException \u6240\u6709\u5f02\u5e38\u7684\u57fa\u7c7b SystemExit \u89e3\u91ca\u5668\u8bf7\u6c42\u9000\u51fa KeyboardInterrupt \u7528\u6237\u4e2d\u65ad\u6267\u884c(\u901a\u5e38\u662f\u8f93\u5165^C) Exception \u5e38\u89c4\u9519\u8bef\u7684\u57fa\u7c7b StopIteration \u8fed\u4ee3\u5668\u6ca1\u6709\u66f4\u591a\u7684\u503c GeneratorExit \u751f\u6210\u5668(generator)\u53d1\u751f\u5f02\u5e38\u6765\u901a\u77e5\u9000\u51fa StandardError \u6240\u6709\u7684\u5185\u5efa\u6807\u51c6\u5f02\u5e38\u7684\u57fa\u7c7b ArithmeticError \u6240\u6709\u6570\u503c\u8ba1\u7b97\u9519\u8bef\u7684\u57fa\u7c7b FloatingPointError \u6d6e\u70b9\u8ba1\u7b97\u9519\u8bef OverflowError \u6570\u503c\u8fd0\u7b97\u8d85\u51fa\u6700\u5927\u9650\u5236 ZeroDivisionError \u9664(\u6216\u53d6\u6a21)\u96f6 (\u6240\u6709\u6570\u636e\u7c7b\u578b) AssertionError \u65ad\u8a00\u8bed\u53e5\u5931\u8d25 AttributeError \u5bf9\u8c61\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027 EOFError \u6ca1\u6709\u5185\u5efa\u8f93\u5165,\u5230\u8fbeEOF \u6807\u8bb0 EnvironmentError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u57fa\u7c7b IOError \u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u5931\u8d25 OSError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef WindowsError \u7cfb\u7edf\u8c03\u7528\u5931\u8d25 ImportError \u5bfc\u5165\u6a21\u5757/\u5bf9\u8c61\u5931\u8d25 LookupError \u65e0\u6548\u6570\u636e\u67e5\u8be2\u7684\u57fa\u7c7b IndexError \u5e8f\u5217\u4e2d\u6ca1\u6709\u6b64\u7d22\u5f15(index) KeyError \u6620\u5c04\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u952e MemoryError \u5185\u5b58\u6ea2\u51fa\u9519\u8bef(\u5bf9\u4e8ePython \u89e3\u91ca\u5668\u4e0d\u662f\u81f4\u547d\u7684) NameError \u672a\u58f0\u660e/\u521d\u59cb\u5316\u5bf9\u8c61 (\u6ca1\u6709\u5c5e\u6027) UnboundLocalError \u8bbf\u95ee\u672a\u521d\u59cb\u5316\u7684\u672c\u5730\u53d8\u91cf ReferenceError \u5f31\u5f15\u7528(Weak reference)\u8bd5\u56fe\u8bbf\u95ee\u5df2\u7ecf\u5783\u573e\u56de\u6536\u4e86\u7684\u5bf9\u8c61 RuntimeError \u4e00\u822c\u7684\u8fd0\u884c\u65f6\u9519\u8bef NotImplementedError \u5c1a\u672a\u5b9e\u73b0\u7684\u65b9\u6cd5 SyntaxError Python \u8bed\u6cd5\u9519\u8bef IndentationError \u7f29\u8fdb\u9519\u8bef TabError Tab \u548c\u7a7a\u683c\u6df7\u7528 SystemError \u4e00\u822c\u7684\u89e3\u91ca\u5668\u7cfb\u7edf\u9519\u8bef TypeError \u5bf9\u7c7b\u578b\u65e0\u6548\u7684\u64cd\u4f5c ValueError \u4f20\u5165\u65e0\u6548\u7684\u53c2\u6570 UnicodeError Unicode \u76f8\u5173\u7684\u9519\u8bef UnicodeDecodeError Unicode \u89e3\u7801\u65f6\u7684\u9519\u8bef UnicodeEncodeError Unicode \u7f16\u7801\u65f6\u9519\u8bef UnicodeTranslateError Unicode \u8f6c\u6362\u65f6\u9519\u8bef Warning \u8b66\u544a\u7684\u57fa\u7c7b DeprecationWarning \u5173\u4e8e\u88ab\u5f03\u7528\u7684\u7279\u5f81\u7684\u8b66\u544a FutureWarning \u5173\u4e8e\u6784\u9020\u5c06\u6765\u8bed\u4e49\u4f1a\u6709\u6539\u53d8\u7684\u8b66\u544a OverflowWarning \u65e7\u7684\u5173\u4e8e\u81ea\u52a8\u63d0\u5347\u4e3a\u957f\u6574\u578b(long)\u7684\u8b66\u544a PendingDeprecationWarning \u5173\u4e8e\u7279\u6027\u5c06\u4f1a\u88ab\u5e9f\u5f03\u7684\u8b66\u544a RuntimeWarning \u53ef\u7591\u7684\u8fd0\u884c\u65f6\u884c\u4e3a(runtime behavior)\u7684\u8b66\u544a SyntaxWarning \u53ef\u7591\u7684\u8bed\u6cd5\u7684\u8b66\u544a UserWarning \u7528\u6237\u4ee3\u7801\u751f\u6210\u7684\u8b66\u544a \u53c2\u8003 Python\u5f02\u5e38\u5904\u7406 python\u5728\u5f02\u5e38\u6355\u83b7\u91cc\u629b\u51fa\u5f02\u5e38 \u5f02\u5e38\u5904\u7406","title":"3.1.\u5f02\u5e38"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_1","text":"\u5f02\u5e38\u5904\u7406\u65e0\u5916\u4e4e\u51e0\u4ef6\u4e8b: \u65ad\u8a00\uff08assert\uff09 \u629b\u9519\uff08raise\uff09 \u68c0\u67e5\uff08try\uff09 \u6355\u83b7\uff08except\uff09 \u5904\u7406\uff08except, else, finally\uff09 \u5f02\u5e38\u5373\u662f\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u4f1a\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\uff0c\u5f71\u54cd\u4e86\u7a0b\u5e8f\u7684\u6b63\u5e38\u6267\u884c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728Python\u65e0\u6cd5\u6b63\u5e38\u5904\u7406\u7a0b\u5e8f\u65f6\u5c31\u4f1a\u53d1\u751f\u4e00\u4e2a\u5f02\u5e38\u3002\u5f53Python\u811a\u672c\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u5f02\u5e38\u4f1a\u4ece\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e\u5411\u7a0b\u5e8f\u4e0a\u5c42\u4f20\u64ad\u3002\u4f8b\u5982\u5f02\u5e38\u4ece\u51fd\u6570\u5411\u5916\u4f20\u64ad\u5230\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\uff0c\u5982\u679c\u5728\u8fd9\u91cc\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u7ee7\u7eed\u5411\u4e0a\u4f20\u64ad\uff0c\u5982\u679c\u4e00\u76f4\u90fd\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u4f20\u64ad\u5230\u7a0b\u5e8f\u7684\u6700\u9876\u5c42\uff0c\u5373\u4e3b\u7a0b\u5e8f\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\u3002\u5982\u679c\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u4e5f\u6ca1\u6709\u5904\u7406\u5f02\u5e38\u7684\u7a0b\u5e8f\uff0cpython\u5c06\u8c03\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff0c\u81ea\u52a8\u5339\u914d\u5f02\u5e38\u7684\u7c7b\u578b\uff0c\u7136\u540e\u4e2d\u6b62\u7a0b\u5e8f\u5e76\u663e\u793a\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002 # \u5728cause_error\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38 def cause_error (): raise Exception ( \"Somrthing is wrong\" ) # \u5728call_cause_error\u51fd\u6570\u4e2d\u8c03\u7528cause_error\u51fd\u6570 def call_cause_error (): cause_error () def deal_error (): try : cause_error () except : print ( \"Exception handled\" ) call_cause_error () ---------------------------------------------------------------------------Exception Traceback (most recent call last)<ipython-input-1-eb81f11bf5d9> in <module> ----> 1 call_cause_error() <ipython-input-1-ec5e029839e0> in call_cause_error() 1 def call_cause_error(): ----> 2 cause_error() 3 <ipython-input-1-11326a099618> in cause_error() 1 def cause_error(): ----> 2 raise Exception(\"Somrthing is wrong\") 3 Exception: Somrthing is wrong deal_error () Exception handled \u5982\u4f60\u6240\u89c1\uff0ccause_error\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u4f9d\u6b21\u4ececause_error\u548ccall_cause_error\u5411\u5916\u4f20\u64ad\uff0c\u6700\u7ec8\u5bfc\u81f4\u663e\u793a\u4e00\u6761\u6808\u8ddf\u8e2a\u4fe1\u606f\u3002\u8c03\u7528deal_error\u65f6\uff0c\u5f02\u5e38\u5728\u4f20\u64ad\u5230deal_error\u65f6\u88ab\u6355\u83b7\uff0c\u5e76\u88ab\u8fd9\u91cc\u7684try/except\u8bed\u53e5\u5904\u7406\u3002 \u5f02\u5e38\u662fPython\u5bf9\u8c61\uff0c\u8868\u793a\u4e00\u4e2a\u9519\u8bef\u3002\u5f02\u5e38\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u88ab\u5b9a\u4e49, \u4e5f\u53ef\u4ee5\u4eba\u4e3a\u5f15\u53d1\u5f02\u5e38\u3002","title":"\u5f02\u5e38\u5904\u7406\u673a\u5236"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_2","text":"try : #' try\u8bed\u53e5\u4e2d\u4ee3\u7801\u9996\u5148\u88ab\u8fd0\u884c < statement > except \uff1a #' \u6355\u83b7\u4efb\u4f55\u5728try\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38 < statement > except < name > \uff1a #' \u6355\u83b7\u5728try\u4e2d\u5f15\u53d1\u7684<name>\u5f02\u5e38 < statement > except < name > \uff0c < data > : #' \u5982\u679c\u5f15\u53d1\u4e86'name'\u5f02\u5e38\uff0c\u83b7\u5f97\u9644\u52a0\u7684\u6570\u636e < statement > except ( < name1 > , < name2 >... ): #' \u6355\u83b7\u5217\u51fa\u7684\u591a\u4e2a\u5f02\u5e38 < statement > else : #' \u5982\u679c\u6ca1\u6709\u5f02\u5e38\u53d1\u751f < statement > finally : #' \u9000\u51fatry\u65f6\u603b\u4f1a\u6267\u884c < statement > raise #' \u4eba\u4e3a\u5f15\u53d1\u9519\u8bef assert < judgement > #' \u65ad\u8a00,\u5224\u65ad\u4e00\u5b9a\u8981\u8fd4\u56deTrue\u5426\u5219\u4f1a\u5f15\u53d1AssertionError","title":"\u5f02\u5e38\u5904\u7406\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#raise","text":"\u4f7f\u7528raise...from...\u8bed\u53e5\u6765\u63d0\u4f9b\u81ea\u5df1\u7684\u5f02\u5e38\u4e0a\u4e0b\u6587\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528None\u6765\u7981\u6b62\u4e0a\u4e0b\u6587\u3002 # \u9ed8\u8ba4\u8f93\u51fa\u5f02\u5e38\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 1 try: ----> 2 1/0 3 except ZeroDivisionError: ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last)<ipython-input-1-56b5a2b441f0> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError 5 ValueError: # \u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from ZeroDivisionError ---------------------------------------------------------------------------ZeroDivisionError Traceback (most recent call last)ZeroDivisionError: The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last)<ipython-input-1-00ed5b67ecd8> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from ZeroDivisionError 5 ValueError: # \u7981\u6b62\u4e0a\u4e0b\u6587 try : 1 / 0 except ZeroDivisionError : raise ValueError from None ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-d9388897f61c> in <module> 2 1/0 3 except ZeroDivisionError: ----> 4 raise ValueError from None ValueError:","title":"raise\u8bed\u53e5"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_3","text":"\u5f02\u5e38\u540d\u79f0 \u63cf\u8ff0 BaseException \u6240\u6709\u5f02\u5e38\u7684\u57fa\u7c7b SystemExit \u89e3\u91ca\u5668\u8bf7\u6c42\u9000\u51fa KeyboardInterrupt \u7528\u6237\u4e2d\u65ad\u6267\u884c(\u901a\u5e38\u662f\u8f93\u5165^C) Exception \u5e38\u89c4\u9519\u8bef\u7684\u57fa\u7c7b StopIteration \u8fed\u4ee3\u5668\u6ca1\u6709\u66f4\u591a\u7684\u503c GeneratorExit \u751f\u6210\u5668(generator)\u53d1\u751f\u5f02\u5e38\u6765\u901a\u77e5\u9000\u51fa StandardError \u6240\u6709\u7684\u5185\u5efa\u6807\u51c6\u5f02\u5e38\u7684\u57fa\u7c7b ArithmeticError \u6240\u6709\u6570\u503c\u8ba1\u7b97\u9519\u8bef\u7684\u57fa\u7c7b FloatingPointError \u6d6e\u70b9\u8ba1\u7b97\u9519\u8bef OverflowError \u6570\u503c\u8fd0\u7b97\u8d85\u51fa\u6700\u5927\u9650\u5236 ZeroDivisionError \u9664(\u6216\u53d6\u6a21)\u96f6 (\u6240\u6709\u6570\u636e\u7c7b\u578b) AssertionError \u65ad\u8a00\u8bed\u53e5\u5931\u8d25 AttributeError \u5bf9\u8c61\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027 EOFError \u6ca1\u6709\u5185\u5efa\u8f93\u5165,\u5230\u8fbeEOF \u6807\u8bb0 EnvironmentError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u57fa\u7c7b IOError \u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u5931\u8d25 OSError \u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef WindowsError \u7cfb\u7edf\u8c03\u7528\u5931\u8d25 ImportError \u5bfc\u5165\u6a21\u5757/\u5bf9\u8c61\u5931\u8d25 LookupError \u65e0\u6548\u6570\u636e\u67e5\u8be2\u7684\u57fa\u7c7b IndexError \u5e8f\u5217\u4e2d\u6ca1\u6709\u6b64\u7d22\u5f15(index) KeyError \u6620\u5c04\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u952e MemoryError \u5185\u5b58\u6ea2\u51fa\u9519\u8bef(\u5bf9\u4e8ePython \u89e3\u91ca\u5668\u4e0d\u662f\u81f4\u547d\u7684) NameError \u672a\u58f0\u660e/\u521d\u59cb\u5316\u5bf9\u8c61 (\u6ca1\u6709\u5c5e\u6027) UnboundLocalError \u8bbf\u95ee\u672a\u521d\u59cb\u5316\u7684\u672c\u5730\u53d8\u91cf ReferenceError \u5f31\u5f15\u7528(Weak reference)\u8bd5\u56fe\u8bbf\u95ee\u5df2\u7ecf\u5783\u573e\u56de\u6536\u4e86\u7684\u5bf9\u8c61 RuntimeError \u4e00\u822c\u7684\u8fd0\u884c\u65f6\u9519\u8bef NotImplementedError \u5c1a\u672a\u5b9e\u73b0\u7684\u65b9\u6cd5 SyntaxError Python \u8bed\u6cd5\u9519\u8bef IndentationError \u7f29\u8fdb\u9519\u8bef TabError Tab \u548c\u7a7a\u683c\u6df7\u7528 SystemError \u4e00\u822c\u7684\u89e3\u91ca\u5668\u7cfb\u7edf\u9519\u8bef TypeError \u5bf9\u7c7b\u578b\u65e0\u6548\u7684\u64cd\u4f5c ValueError \u4f20\u5165\u65e0\u6548\u7684\u53c2\u6570 UnicodeError Unicode \u76f8\u5173\u7684\u9519\u8bef UnicodeDecodeError Unicode \u89e3\u7801\u65f6\u7684\u9519\u8bef UnicodeEncodeError Unicode \u7f16\u7801\u65f6\u9519\u8bef UnicodeTranslateError Unicode \u8f6c\u6362\u65f6\u9519\u8bef Warning \u8b66\u544a\u7684\u57fa\u7c7b DeprecationWarning \u5173\u4e8e\u88ab\u5f03\u7528\u7684\u7279\u5f81\u7684\u8b66\u544a FutureWarning \u5173\u4e8e\u6784\u9020\u5c06\u6765\u8bed\u4e49\u4f1a\u6709\u6539\u53d8\u7684\u8b66\u544a OverflowWarning \u65e7\u7684\u5173\u4e8e\u81ea\u52a8\u63d0\u5347\u4e3a\u957f\u6574\u578b(long)\u7684\u8b66\u544a PendingDeprecationWarning \u5173\u4e8e\u7279\u6027\u5c06\u4f1a\u88ab\u5e9f\u5f03\u7684\u8b66\u544a RuntimeWarning \u53ef\u7591\u7684\u8fd0\u884c\u65f6\u884c\u4e3a(runtime behavior)\u7684\u8b66\u544a SyntaxWarning \u53ef\u7591\u7684\u8bed\u6cd5\u7684\u8b66\u544a UserWarning \u7528\u6237\u4ee3\u7801\u751f\u6210\u7684\u8b66\u544a","title":"\u5185\u7f6e\u5f02\u5e38"},{"location":"Python%E5%9F%BA%E7%A1%80/3.1.%E5%BC%82%E5%B8%B8.html#_4","text":"Python\u5f02\u5e38\u5904\u7406 python\u5728\u5f02\u5e38\u6355\u83b7\u91cc\u629b\u51fa\u5f02\u5e38 \u5f02\u5e38\u5904\u7406","title":"\u53c2\u8003"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html","text":"\u547d\u540d\u7a7a\u95f4 Namespace : namespace \u662f\u4e00\u4e2a\u4ece name \u5230 object \u7684\u6620\u5c04\u3002\u73b0\u5728\u5927\u90e8\u5206\u7684 namespace \u901a\u8fc7Python\u5b57\u5178 1 \u5b9e\u73b0\uff0c\u5c06\u6765\u53ef\u80fd\u4f1a\u6539\u53d8\u5b9e\u73b0\u65b9\u5f0f\u3002 namespace\uff1a\u4e2d\u6587\u79f0\u4e3a\u547d\u540d\u7a7a\u95f4\uff0c\u6216\u8005\u540d\u5b57\u7a7a\u95f4\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u6700\u91cd\u8981\u7684\u4f5c\u7528\u662f\u907f\u514d\u540d\u5b57\u51b2\u7a81\uff0c\u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u91cd\u540d\u3002 Namespace \u7684\u79cd\u7c7b \u4e00\u822c\u800c\u8a00\uff0cname \u4ea7\u751f\u5730\u70b9\u51b3\u5b9a\u5176\u6240\u5904\u7684 namespace\u3002\u4f8b\u5982\uff0c\u5728\u51fd\u6570\u5185\u5b9a\u4e49\u7684 name \u4f1a\u4f4d\u4e8e\uff08\u51fd\u6570\u7684\uff09\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f46\u4f7f\u7528\u4e86 global \u3001 nonlocal \u8bed\u53e5\u4f1a\u6539\u53d8\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e2a\u5728\u540e\u9762\u4f1a\u8bf4\u5230\u3002 built-in namespace \uff1abuiltins \u6a21\u5757\u5b9a\u4e49\u7684\u6240\u6709\u540d\u5b57\u5b58\u5728\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u540d\u5b57\u5305\u62ec\u5185\u7f6e\u51fd\u6570\u3001\u5185\u7f6e\u5f02\u5e38\u3001\u5185\u7f6e\u5e38\u91cf\u3001\u5185\u7f6e\u7c7b\u578b\u3002\u5982\u679c\u662fPython 2\uff0c\u5219\u662f __builtin__ \u6a21\u5757\u3002 global namespace \uff1a\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5305\u62ec\u6240\u6709\u5728\u6a21\u5757\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u7c7b\u3001\u51fd\u6570\u3001\u5e38\u91cf\u3001\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u3002 local namespace \uff1a\u76f8\u5bf9\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6bcf\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u90fd\u6709\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u6216\u7c7b\u6240\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u53c2\u6570\u3001\u51fd\u6570\u5185\u7684\u53d8\u91cf\u3001\u7c7b\u5c5e\u6027\u3001\u7c7b\u65b9\u6cd5\u7b49\u3002 enclosing namespace \uff1a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e0d\u4ec5\u8bb0\u5f55\u4e86\u5f53\u524d\u5d4c\u5957\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u8fd8\u8bb0\u5f55\u4e86\u5d4c\u5957\u51fd\u6570\u5f15\u7528\u7684\u5916\u90e8\u53d8\u91cf\u3002 Namespace\u751f\u547d\u5468\u671f \u4e0d\u540c\u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\u6709\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\uff1a built-in\uff1a\u5728 Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\uff0c\u89e3\u91ca\u5668\u9000\u51fa\u65f6\u9500\u6bc1 global\uff1a\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u89e3\u91ca\u5668\u8bfb\u5165\u65f6\u521b\u5efa\uff0c\u901a\u5e38\u4e5f\u4f1a\u4e00\u76f4\u4fdd\u5b58\u5230\u89e3\u91ca\u5668\u9000\u51fa\uff0c\u9664\u975e\u4f7f\u7528 del \u8bed\u53e5\u3002 local\uff1a\u8fd9\u91cc\u8981\u533a\u5206 function \u4ee5\u53ca class \u5b9a\u4e49\uff1a \u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u51fd\u6570\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u51fd\u6570\u8fd4\u56de\u6216\u8005\u4ea7\u751f\u672a\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u65f6\u9500\u6bc1\u3002 \u7c7b\u5b9a\u4e49\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u89e3\u91ca\u5668\u8bfb\u5230\u7c7b\u5b9a\u4e49\u521b\u5efa\uff0c\u79bb\u5f00\u7c7b\u5b9a\u4e49\u65f6\u521b\u5efaclass object\u3002\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff08\u89c1\u5b98\u65b9\u5bf9\u7c7b\u5b9a\u4e49\u7684 \u8bf4\u660e \uff09\u3002 \u67e5\u770bNamespace \u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 locals() \u6765\u8bbf\u95ee \u5168\u5c40 \uff08\u6a21\u5757\u7ea7\u522b\uff09\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 globals() \u6765\u8bbf\u95ee \u867d\u7136\u90fd\u662f\u8fd4\u56de\u547d\u540d\u7a7a\u95f4\uff0c\u4f46 globals() \u548c locals() \u6709\u4e00\u70b9\u4e0d\u4e00\u6837\u3002 locals() \u8fd4\u56de\u7684\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 locals() \u5bf9\u8c61\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5c40\u90e8\u540d\u5b57\u7a7a\u95f4\u3002 globals \u8fd4\u56de\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 globals() \u5bf9\u8c61\u4f1a\u5f71\u54cd\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 # \u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u65e0\u6548 def change_local (): x = 123 print ( \"\u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\" , locals (), sep = \"\uff1a\" ) locals ()[ \"x\" ] = 6789 print ( \"\u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\" , f \"x= {x} \" , sep = \"\uff1a\" ) change_local () \u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a{'x': 123} \u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\uff1ax=123 # \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548 y = 123 globals ()[ \"y\" ] = 456 print ( \"\u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a\" , f \"y= {y} \" ) \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a y=456 \u4f5c\u7528\u57df scope : scope \u662fPython\u7a0b\u5e8f\u7684\u4e00\u5757\u6587\u672c\u533a\u57df\uff08\u5373\u4e00\u4e2a\u4ee3\u7801\u533a\u57df\uff09\uff0c\u5728\u8fd9\u4e2a\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95eenamespace \u3002 \u76f4\u63a5\u8bbf\u95ee\u610f\u5473\u7740\u65e0\u987b\u7279\u6027\u7684\u6307\u660e\u5f15\u7528\u3002\u5728Python\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u662f\u6307\u76f4\u63a5\u4f7f\u7528name\u8bbf\u95ee\u5bf9\u8c61\uff0c\u5982 name \uff0c\u8fd9\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 name \uff1b\u800c\u95f4\u63a5\u8bbf\u95ee\u662f\u6307\u4f7f\u7528\u5f62\u5982 objname.attrname \u7684\u65b9\u5f0f\uff0c\u5373\u5f15\u7528\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u8fd9\u4e0d\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 attrname \uff0c\u800c\u662f\u641c\u7d22\u540d\u5b57 objname \uff0c\u518d\u8bbf\u95ee\u5176\u5c5e\u6027\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u4f5c\u7528\u57df\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u53d1\u751f\u4f5c\u7528\u7684\u4ee3\u7801\u533a\u57df\uff0c\u53d1\u751f\u4f5c\u7528\u662f\u6307\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88ab\u4f5c\u7528\u57df\u76f4\u63a5\u8bbf\u95ee\u3002 \u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u7684\u5173\u7cfb \u547d\u540d\u7a7a\u95f4\u4fdd\u5b58\u7740\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff0c\u6620\u5c04\u5173\u7cfb\u5728\u4f5c\u7528\u57df\u4e2d\u88ab\u5b9a\u4e49\uff0c\u540c\u65f6\u4f5c\u7528\u57df\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\u8bbf\u95ee\u5bf9\u8c61\u3002\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\uff0c\u5b83\u4e5f\u5c31\u662f\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002\u6709\u4e9b\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u8bbf\u95ee\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u662f\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002 \u4f5c\u7528\u57df\u662f\u9759\u6001\u7684\uff08\u5b83\u53ea\u662f\u4ee3\u7801\u6587\u672c\uff09\uff0c\u800c\u547d\u540d\u7a7a\u95f4\u662f\u52a8\u6001\u7684\uff0c\u547d\u540d\u7a7a\u95f4\u968f\u7740\u89e3\u91ca\u5668\u7684\u6267\u884c\u800c\u4ea7\u751f\u3002 \u6709\u4e9b\u6587\u7ae0\u8ba4\u4e3a\u52a8\u6001\u7684\u4f5c\u7528\u57df\u5c31\u662f\u547d\u540d\u7a7a\u95f4\u3002\u5176\u5b9e\u5e76\u4e0d\u662f\uff0c\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u6620\u5c04\uff0c\u4f5c\u7528\u57df\u662f\u4e00\u5757\u4ee3\u7801\u533a\u57df\u3002 Python\u5bf9\u8c61\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u88ab\u8bbf\u95ee\uff0c\u800c\u4f5c\u7528\u57df\u5219\u9650\u5236\u4e86Python\u5bf9\u8c61\u7684\u4f7f\u7528\u8303\u56f4\u3002 \u540d\u5b57\u641c\u7d22\u987a\u5e8f\uff08LEGB\uff09 \u5f53\u4e00\u884c\u4ee3\u7801\u9700\u8981\u4f7f\u7528\u540d\u5b57 X \u6240\u5bf9\u5e94\u7684\u503c\uff0c Python\u4f1a\u4ece\u5f53\u524d\u5c42\u7ea7\u7684Namespace\u5f00\u59cb \uff0c\u5e76\u6839\u636e\u4ee5\u4e0b\u987a\u5e8f\uff0c\u53bb\u67e5\u627e\u540d\u5b57 X \uff1a local namespace \uff1a\u5305\u542b\u5c40\u90e8\u540d\u5b57\u7684\u6700\u5185\u5c42\uff08innermost\uff09\u4f5c\u7528\u57df\uff0c\u5982\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7c7b\u7684\u5185\u90e8\u5c40\u90e8\u4f5c\u7528\u57df\u3002 Enclosing \uff1a\u6839\u636e\u5d4c\u5957\u5c42\u6b21\u4ece\u5185\u5230\u5916\u641c\u7d22\uff0c\u5305\u542b\u975e\u5c40\u90e8\uff08nonlocal\uff09\u975e\u5168\u5c40\uff08nonglobal\uff09\u540d\u5b57\u7684\u4efb\u610f\u5c01\u95ed\u51fd\u6570\u7684\u4f5c\u7528\u57df\u3002\u5982\u4e24\u4e2a\u5d4c\u5957\u7684\u51fd\u6570\uff0c\u5185\u5c42\u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5916\u5c42\u51fd\u6570\u4f5c\u7528\u57df\u5c31\u662f\u5185\u5c42\u51fd\u6570\u7684 Enclosing \u4f5c\u7528\u57df\u3002 global built-in NameError \uff1a\u5982\u679c Python \u5728\u4ee5\u4e0a4\u4e2anamespace\u627e\u4e0d\u5230 X \uff0c\u5c06\u653e\u5f03\u641c\u7d22\u5e76\u629b\u51fa NameError \u5f02\u5e38\uff1a NameError: name 'a' is not defined \u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\uff0clocal\u3001global\u3001built-in\u4e09\u4e2anamespace\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46Enclosing namespace\u4e0d\u4e00\u5b9a\u5b58\u5728\u3002 Namespace\u548cscope\u603b\u7ed3 \u4e0d\u80fd\u5728\u540d\u5b57\u672a\u5b9a\u4e49\u524d\u5f15\u7528\u8be5\u540d\u5b57\uff08\u547d\u540d\u7a7a\u95f4\u4e0d\u5b58\u5728\u8be5\u6620\u5c04\u5173\u7cfb\uff09\u3002 built-in\u3001global\u4e24\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u5165\u662f\u4e0d\u80fd\u591f\u901a\u8fc7\u4ee3\u7801\u64cd\u4f5c\u7684\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5f15\u5165\u5b83\u4eec\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u5f15\u5165\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u3002built-in\u547d\u540d\u7a7a\u95f4\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff08\u5df2\u7ecf\u9884\u5b9a\u4e49\u597d\uff09\uff0c\u4f46global\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88abPython\u4ee3\u7801\u4fee\u6539\u3002 \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49\u3001\u63a8\u5bfc\u5f0f\u4f1a\u5f15\u5165local\u547d\u540d\u7a7a\u95f4 \uff0c\u95ed\u5305\u51fd\u6570\u5b9a\u4e49\u4f1a\u5f15\u5165enclosing\u547d\u540d\u7a7a\u95f4\u3002 \u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u88ab\u4fee\u6539\u7684\u60c5\u51b5\uff1a \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49 \u8d4b\u503c\u8bed\u53e5 import \u8bed\u53e5\u3001 if \u8bed\u53e5\u3001 for \u8bed\u53e5\u3001 while \u8bed\u53e5 if \u3001 for \u3001 while \u8bed\u53e5\u5e76\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f5c\u7528\u8303\u56f4\u6700\u5927\u7684\u547d\u540d\u7a7a\u95f4\u662fglobal namespace\uff0c\u4f46global namespace\u4e5f\u53ea\u662f\u6a21\u5757\u7ea7\u522b\u7684\u3002 a \u6a21\u5757\u4e0d\u80fd\u76f4\u63a5\u5f15\u7528\u5728 b \u6a21\u5757\u5b9a\u4e49\u7684name\uff0c\u5373\u4f7f a \u6a21\u5757\u5df2\u7ecf\u5bfc\u5165\u4e86\u6574\u4e2a b \u6a21\u5757\uff1a import b \u3002\u9664\u975e\u76f4\u63a5\u5bfc\u5165name\uff1a from b import name \u3002 \u5bfc\u5165 b \u6a21\u5757\u4e2d\u5176\u4e2d\u4e00\u4e2aname\uff1a from b import name \uff0c\u6574\u4e2a b \u6a21\u5757\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u4e3a Python \u5e76\u4e0d\u77e5\u9053 name \u5728 b.py \u6587\u6863\u7684\u4f55\u5904\uff0c\u4e3a\u4e86\u80fd\u591f\u627e\u5230 name \uff0cPython \u9700\u8981\u6267\u884c\u6574\u4e2a b.py\u3002 import \u8bed\u53e5\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8global namespace\uff0c\u4f8b\u5982 import \u8bed\u53e5\u5199\u5728\u51fd\u6570\u5185\u3002 \u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u5916\u5c42\u4f5c\u7528\u57df\u4e0d\u80fd\u5f15\u7528\u5185\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 def try_to_define_name (): '''\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u5e76\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u6574\u6570\u5bf9\u8c611''' i = 1 # \u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u5148\u8c03\u7528\u51fd\u6570\u5b9a\u4e49i try_to_define_name () # \u5728\u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u660e\u660e\u8c03\u7528\u4e86\u51fd\u6570\uff0c\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u53ef\u662f\u8fd8\u662f\u627e\u4e0d\u5230\u8fd9\u4e2a\u540d\u5b57\u3002 print ( i ) NameError : name 'i' is not defined \u867d\u7136\u5b9a\u4e49\u4e86\u540d\u5b57 i \uff0c\u4f46\u662f\u5b9a\u4e49\u5728\u4e86\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u6309\u7167 LEGB \u641c\u7d22\u89c4\u5219\uff0c\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u81ea\u7136\u8bbf\u95ee\u4e0d\u5230\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u547d\u540d\u7a7a\u95f4\uff1b\u518d\u8005\uff0c\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u88ab\u9500\u6bc1\u4e86\u3002 global \u548c nonlocal \u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u4efb\u4f55\u65f6\u5019\uff0cPython\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u5374\u4e0d\u53ef\u4ee5\u5728\u5185\u5c42\u4f5c\u7528\u57df\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u53d8\u91cf\u3002 \u53ef\u4ee5\u8bfb\u53d6\u5168\u90e8\u53d8\u91cf\uff0c\u8fd9\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a\u4efb\u4f55\u65f6\u5019\uff0cglobal namespace\u90fd\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002\u4f46\u4e3a\u4ec0\u4e48\u5728\u5185\u5c42\u4f5c\u7528\u57df\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u5374\u4e0d\u80fd\u88ab\u4fee\u6539\u5462\uff1f\u8fd9\u770b\u8d77\u6765\u50cf\u662fPython\u7684\u4e00\u4e2a\u89c4\u5b9a\uff0c\u4f46\u5176\u5b9e\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002\u5728Python\u4e2d\u4fee\u6539\u53d8\u91cf\u610f\u5473\u7740\u5c06\u4e00\u4e2a\u540d\u5b57\u7ed1\u5b9a\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u9700\u8981\u4f7f\u7528assignment\u8fd0\u7b97\u7b26 = \u3002 \u8fd9\u610f\u5473\u7740 = \u5de6\u8fb9\u7684\u540d\u5b57\u4f1a\u88ab\u52a0\u5165\u5f53\u524d\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u540d\u5b57\u5bf9\u5e94\u7740 = \u53f3\u8fb9\u7684\u5bf9\u8c61\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a a = 1 def change_a (): a = 10 change_a () a # 1 1 a = 10 \u8bed\u53e5\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\uff0c\u5f53\u5b83\u88abPython\u6267\u884c\u65f6\uff0cPython\u4f1a\u5c06 a \u52a0\u5165\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u4f1a\u5c06 a \u89c6\u4f5c\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684 a \u3002\u5f53\u6211\u4eec\u5728\u6700\u5916\u5c42\u4f5c\u7528\u57df\u5f15\u7528 a \u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0cPython\u4f1a\u4ece a \u6240\u5728\u7684\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4\uff08\u5373\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff09\u5f00\u59cb\u641c\u7d22 a \u5bf9\u5e94\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u641c\u7d22\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u518d\u8005\uff0c\u6b64\u65f6\u51fd\u6570 change_a() \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5df2\u7ecf\u88ab\u9500\u6bc1\uff0c\u5373\u4f7f\u60f3\u641c\u7d22\u4e5f\u641c\u7d22\u4e0d\u5230\u3002 \u76f8\u4fe1\u4f60\u4ece\u4e0a\u9762\u7684\u53d9\u8ff0\u5df2\u7ecf\u610f\u8bc6\u5230\uff0c\u5982\u679c\u60f3\u8ba9Python\u5728\u5185\u5c42\u4f5c\u7528\u57df\u4fee\u6539\u5916\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u9700\u8981\u8ba9Python\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u6765\u81ea\u5916\u5c42\u4f5c\u7528\u57df\u3002 global \u8bed\u53e5\u548c nonlocal \u8bed\u53e5\u6b63\u662f\u53ef\u4ee5\u8d77\u5230\u8fd9\u6837\u7684\u4f5c\u7528\u3002 global \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26\u5c06\u88ab\u89e3\u6790\u4e3a\u5168\u5c40\u53d8\u91cf\u3002 \u4f7f\u7528global\u65f6\u6709\u4ee5\u4e0b\u4e24\u6761\u9650\u5236\uff1a \u5728\u540c\u4e00\u4ee3\u7801\u5757\u4e2d\uff0c\u5217\u5728global\u8bed\u53e5\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\u4e0d\u80fd\u5728\u8be5global\u8bed\u53e5\u524d\u51fa\u73b0\u3002 \u5217\u5728global \u8bed\u53e5\u540e\u7684\u6807\u8bc6\u7b26\u4e0d\u80fd\u88ab\u5b9a\u4e49\u6210\u5f62\u53c2\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728for\u5faa\u73af\u63a7\u5236\u7684\u76ee\u6807\u3001\u7c7b\u5b9a\u4e49\u548c\u51fd\u6570\u5b9a\u4e49\uff0c\u6216\u8005import\u8bed\u53e5\u4e2d\u3002 CPython\u5b9e\u73b0\u7ec6\u8282 \u5f53\u524d\u5b9e\u73b0\u5e76\u672a\u5f3a\u5236\u5c65\u884c\u4e0a\u9762\u4e24\u6761\u9650\u5236 2 \uff0c\u4f46\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u6ee5\u7528\u8fd9\u79cd\u81ea\u7531\uff0c\u56e0\u4e3a\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u5f3a\u5236\u5c65\u884c\u5b83\u4eec\u6216\u8005\u4e0d\u7559\u75d5\u8ff9\u7684\u6539\u53d8\u7a0b\u5e8f\u542b\u4e49\u3002 nonlocal \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26 \u5173\u8054 \u5230 \u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u91cc\u5b9a\u4e49\u8fc7\u7684\u540c\u540d\u53d8\u91cf\uff08\u4e0d\u5305\u62ec\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u662f\u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff09\u3002 def scope_test (): def do_local (): spam = \"local spam of do_local\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam of do_nonlocal\" def do_global (): global spam spam = \"global spam of do_global\" spam = \"test spam of scope_test\" # do_local\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam do_local () print ( \"After local assignment:\" , spam ) # do_nonlocal\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u5168\u5c40\u7684spam do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) # do_global \u51fd\u6570\u5185\u58f0\u660e\u7684spam\u5b58\u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u800c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684 do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) After local assignment: test spam of scope_test After nonlocal assignment: nonlocal spam of do_nonlocal After global assignment: nonlocal spam of do_nonlocal In global scope: global spam of do_global nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e24\u4e2a\u4e0d\u540c\u70b9\uff1a \u5176\u4e00\uff0c global \u8bed\u53e5\u53ea\u662f\u58f0\u660e\u6807\u8bc6\u7b26\u6765\u5b58\u5728\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u521b\u5efa\u8be5\u6807\u8bc6\u7b26\uff1b nonlocal \u8bed\u53e5\u5219\u4f1a\u5728\u5b50\u51fd\u6570\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u4e0e\u7236\u51fd\u6570\u53d8\u91cf\u540c\u540d\u7684\u6807\u8bc6\u7b26\uff1a gv = 'a global var' def func (): global gv lv = 'a local var' print ( locals ()) def inn_func (): nonlocal lv global gv print ( locals ()) return inn_func a = func () a () {'lv': 'a local var'} {'lv': 'a local var'} \u4e4b\u6240\u4ee5 nonlocal \u8bed\u53e5\u4e0e global \u8bed\u53e5\u7684\u5904\u7406\u4e0d\u540c\uff0c\u662f\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u751f\u5b58\u671f\u5f88\u957f\uff0c\u5728\u6a21\u5757\u5185\u968f\u65f6\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u800c\u7236\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5728\u7236\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4fbf\u4f1a\u76f4\u63a5\u91ca\u653e\uff0c\u56e0\u6b64 nonlocal \u8bed\u53e5\u5fc5\u987b\u5c06\u7236\u51fd\u6570\u7684\u6807\u8bc6\u7b26\u548c\u5f15\u7528\u5199\u5165enclosing namespace\u3002 \u5176\u4e8c\uff0c global \u8bed\u53e5\u53ef\u4ee5\u58f0\u660e\u5168\u5c40\u4f5c\u7528\u57df\u8fd8\u6ca1\u5b58\u5728\u7684\u540d\u5b57\uff0c\u800c nonlocal \u8bed\u53e5\u53ea\u80fd\u5c06\u5b83\u58f0\u660e\u7684\u540d\u5b57\u5173\u8054\u5230enclosing\u4f5c\u7528\u57df\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u7ed1\u5b9a\uff1a # nonlocal \u8bed\u53e5\u4e4b\u524d\u7684eclosing\u4f5c\u7528\u57df\u4e0d\u5b58\u5728spam \u5219\u62a5\u9519 def scope_test (): def do_nonlocal (): # \u7236\u51fd\u6570\u4f5c\u7528\u57df\u8981\u5148\u5b9a\u4e49spam\uff0c\u5426\u5219\u62a5\u9519 nonlocal spam spam = \"nonlocal spam of do_nonlocal\" scope_test () File \"<ipython-input-1-e77162de9535>\", line 5 nonlocal spam ^ SyntaxError: no binding for nonlocal 'spam' found nonlocal \u8bed\u53e5\u53ea\u80fd\u58f0\u660e\u7684\u540d\u5b57\u4f1a\u7ed1\u5b9a\u5230\u79bb nonlocal \u8bed\u53e5\u6700\u8fd1\u7684enclosing \u4f5c\u7528\u57df\uff08\u5982\u679cenclosing \u4f5c\u7528\u57df\u5b58\u5728 nonlocal \u8bed\u53e5\u58f0\u660e\u7684\u540d\u5b57\uff09\uff1a def scope_test (): spam = \"local spam of scope_test\" def do_local (): spam = \"local spam of do_local\" print ( \"After local assignment:\" , spam ) def do_nonlocal (): # \u901a\u8fc7nonlocal\u58f0\u660e\u5c06spam\u548c\u6700\u8fd1\u7684enclosing\u4f5c\u7528\u57df\u7684spam\u5173\u8054 # \u6240\u4ee5\u5173\u8054\u7684\u662fdo_local\u51fd\u6570\u7684spam nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_local () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () After local assignment: local spam of do_local After nonlocal assignment: nonlocal spam of do_nonlocal After nonlocal assignment, scope_test's spam: local spam of scope_test \u56e0\u6b64 nonlocal \u8bed\u53e5\u91cd\u65b0\u7ed1\u5b9a\u7684name\u7684\u771f\u5b9e\u4f5c\u7528\u57df\u662f\u4e0d\u6e05\u695a\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5df2\u7ecf\u5b58\u5728\u7684name\u672c\u6765\u4f4d\u4e8e\u90a3\u4e00\u5c42\u4f5c\u7528\u57df\u3002 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e00\u4e2a\u76f8\u540c\u70b9\uff1a \u5f53\u524d\u4f5c\u7528\u57df\u4e0d\u80fd\u5728 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u4e4b\u524d\u7ed1\u5b9a\u4e24\u8005\u58f0\u660e\u7684\u6807\u8bc6\u7b26\uff1a # global def scope_test (): spam = \"conflict\" global spam spam = \"nonlocal spam of do_nonlocal\" scope_test () # nonlocal def scope_test (): spam = \"local spam of scope_test\" def do_nonlocal (): spam = \"conflict\" nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () File \"<ipython-input-1-d9548726e53c>\", line 5 global spam ^ SyntaxError: name 'spam' is assigned to before global declaration \u7c7b\u7684\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u95f4 \u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u90fd\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u5b83\u4eec\u6267\u884c\u673a\u5236\u4e0d\u4e00\u6837\uff0c\u6709\u4e0d\u5c0f\u7684\u533a\u522b\u3002 \u5176\u4e00\uff0c\u51fd\u6570\u521d\u59cb\u5316\u65f6\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u7c7b\u521d\u59cb\u5316\u65f6\u4f1a\u88ab\u6267\u884c\u3002 Python\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c\uff1a def func (): print ( \"executed\" ) Python\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u7c7b\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff1a class A : print ( \"executed_A\" ) def A_func ( self ): print ( \"executed_A_func\" ) class B : print ( \"executed_B\" ) class C : print ( \"executed_C\" ) executed_A executed_B executed_C \u8fd9\u770b\u8d77\u6765\u611f\u89c9\u6709\u70b9\u4e0d\u53ef\u601d\u8bae\uff0c\u5927\u5bb6\u90fd\u662f\u5b9a\u4e49\uff0c\u4e3a\u4ec0\u4e48\u7c7b\u5b9a\u4e49\u4f1a\u88ab\u6267\u884c\uff0c\u96be\u9053\u4e0d\u5e94\u8be5\u662f\u5b9a\u4e49\u88ab\u5f15\u7528\u65f6\u624d\u6267\u884c\u5417\uff1f \u5176\u5b9e\u8fd9\u4e5f\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002Python\u89e3\u91ca\u5668\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u53ea\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u51fd\u6570\u540d\uff0c\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u81ea\u7136\u4e0d\u9700\u8981\u6267\u884c\u51fd\u6570\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u52a8\u6001\u6027\uff1a\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4ea7\u751f\u3002 \u800c\u7c7b\u5b9a\u4e49\u5b9e\u9645\u4e0a\u662f\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff0c\u56e0\u6b64Python\u89e3\u91ca\u5668\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u4e0d\u4ec5\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u7c7b\u540d\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u800c\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4f1a\u4ea7\u751f\uff0c\u56e0\u6b64\u7c7b\u5b9a\u4e49\u9700\u8981\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5c31\u88ab\u6267\u884c\u3002\u6ce8\u610f\uff1a\u7c7b\u65b9\u6cd5\u5185\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u4e00\u6837\uff0c\u662f\u4e0d\u4f1a\u88ab\u6267\u884c\u7684\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u56e0\u4e3a\u7c7b\u5177\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u521b\u5efa\u7c7b\u5c5e\u6027\u5c31\u5fc5\u987b\u6267\u884c\u4ee3\u7801\uff08\u8fdb\u884c\u8d4b\u503c\uff09\u3002\u90a3\u4e3a\u4ec0\u4e48\u5728\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u521b\u5efa\u7c7b\u5c5e\u6027\u5462\uff1f\u56e0\u4e3a\u7c7b\u662f\u521b\u5efa\u5b9e\u4f8b\u3001\u751f\u6210\u5176\u4ed6\u7c7b\uff08\u6d89\u53ca\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49\uff09\u7684\u5bf9\u8c61\uff0c\u5fc5\u987b\u5728\u5b9e\u4f8b\u4e4b\u524d\u88ab\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u52a0\u8f7d\u65f6\u5c31\u88ab\u521b\u5efa\u6709\u52a9\u4e8e\u63d0\u9ad8\u6548\u7387\u548c\u964d\u4f4e\u903b\u8f91\u590d\u6742\u5ea6\u3002 \u53e6\u5916\uff0c\u7c7b\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u7c7b\u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u5148\u521b\u5efa\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7279\u70b9\u5c31\u8981\u6c42\u7c7b\u521d\u59cb\u5316\u65f6\u5c31\u521b\u5efa\u7c7b\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u7528\u4e8e\u7edf\u4e00\u7ba1\u7406\u67d0\u4e00\u7c7b\u5e38\u91cf\uff1a class Math_Constant : pi = 3.1415926 e = 2.7182818 sqrt_2 = 1.4142135 rho = 1.3247195 \u5982\u679c Math_Constant \u7684\u7c7b\u5c5e\u6027\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u624d\u80fd\u88ab\u8c03\u7528\uff0c\u90a3\u5c31\u592a\u9ebb\u70e6\u4e86\uff0c\u800c\u4e14\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u4e5f\u5c31\u6ca1\u4e86\u610f\u4e49\u3002 \u800c\u65b9\u6cd5\u672c\u8d28\u662f\u51fd\u6570\uff0c\u4e0d\u4f1a\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u88ab\u6267\u884c\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u4e00\u822c\u6765\u8bf4\uff0c\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e3b\u8981\u4e0e\u53c2\u6570\u6709\u5173\uff0c\u800c\u53c2\u6570\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u624d\u4f20\u5165\uff0c\u521b\u5efa\u4e86\u547d\u540d\u7a7a\u95f4\u4e5f\u610f\u4e49\u4e0d\u5927\u3002\u53e6\u5916\u51fd\u6570\u4e0d\u50cf\u7c7b\u90a3\u4e48\u590d\u6742\uff0c\u4e5f\u5c31\u6ca1\u5fc5\u8981\u8bfb\u5165\u5b9a\u4e49\u65f6\u5c31\u521b\u5efa\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u5176\u4e8c\uff0c\u7c7b\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e0d\u5728\u540d\u5b57\u641c\u7d22\u8def\u5f84\u4e2d\u3002 \u4f8b\u5982\uff1a class A : pi = 3.1415926 def print_pi ( self ): print ( pi ) A () . print_pi () NameError : name 'pi' is not defined \u7c7b A \u662f print_pi \u65b9\u6cd5\u7684\u5916\u5c42\u4f5c\u7528\u57df\uff0c\u6309\u7167\u8bbe\u60f3\uff0c print_pi \u65b9\u6cd5\u4e2d\u627e\u4e0d\u5230\u53d8\u91cf pi \uff0c\u5e94\u8be5\u4f1a\u5230\u4e0a\u4e00\u5c42\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u4f46\u662f print_pi \u65b9\u6cd5\u5e76\u6ca1\u6709\u5728\u7c7b A \u7684\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u800c\u662f\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u3002 \u53c8\u4f8b\u5982\uff1a class A (): a = 1 b = [ a + i for i in range ( 3 )] #NameError: name 'a' is not defined \u6267\u884c\u4e0a\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7c7b A \u5185\u5217\u8868\u63a8\u5bfc\u5f0f\u65e0\u6cd5\u8c03\u53d6 a \u7684\u503c\u3002 Python3\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u4f1a\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u4f46\u5728\u51fd\u6570\u4e2d\uff0c\u5b8c\u5168\u6ca1\u95ee\u9898\uff1a def func (): a = 1 b = [ a + i for i in range ( 3 )] print ( b ) func () # [ 1 , 2 , 3 ] \u56e0\u6b64\uff0c\u7c7b A \u4e2d\u7684 a \u4e0d\u540c\u4e8e\u51fd\u6570 func \u4e2d\u7684 a \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u88ab\u4efb\u610f\u5f15\u7528\u3002\u4e4b\u6240\u4ee5\u5f3a\u8c03\u201d\u4e0d\u53ef\u4ee5\u88ab\u4efb\u610f\u8bfb\u53d6\u201d\uff0c\u539f\u56e0\u5728\u4e8e\u5728\u7c7b A \u7684\u5c40\u90e8\u7a7a\u95f4\u5185\uff0c a \u5728\u5f53\u524d\u5c42\u7ea7\u7684\u4f5c\u7528\u57df\u662f\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\u7684\uff1a class A (): a = 1 c = a + 2 A . c # 3 3 \u56e0\u6b64\uff0c\u7c7b\u5185\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u4ee3\u7801\uff08\u65b9\u6cd5\u3001\u63a8\u5bfc\u5f0f\u7b49\uff09\u4e25\u683c\u4e0a\u4e0d\u662f\u4f5c\u7528\u57df\u3002 \u811a\u6ce8 \u53c2\u8003 python\u7684\u5d4c\u5957\u51fd\u6570\u4e2d\u5c40\u90e8\u4f5c\u7528\u57df\u95ee\u9898? Python\u8fdb\u9636 - \u5bf9\u8c61\uff0c\u540d\u5b57\u4ee5\u53ca\u7ed1\u5b9a \u5373 {name:object} \u3002 \u21a9 \u5f53\u524d\u7684CPython\u5df2\u7ecf\u5b9e\u73b0\u7b2c\u4e00\u6761\u9650\u5236\uff0c\u81f3\u5c11\u57280.29.14\u7248\u672c\u7684CPython\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u3002 \u21a9","title":"3.2.\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_1","text":"Namespace : namespace \u662f\u4e00\u4e2a\u4ece name \u5230 object \u7684\u6620\u5c04\u3002\u73b0\u5728\u5927\u90e8\u5206\u7684 namespace \u901a\u8fc7Python\u5b57\u5178 1 \u5b9e\u73b0\uff0c\u5c06\u6765\u53ef\u80fd\u4f1a\u6539\u53d8\u5b9e\u73b0\u65b9\u5f0f\u3002 namespace\uff1a\u4e2d\u6587\u79f0\u4e3a\u547d\u540d\u7a7a\u95f4\uff0c\u6216\u8005\u540d\u5b57\u7a7a\u95f4\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u6700\u91cd\u8981\u7684\u4f5c\u7528\u662f\u907f\u514d\u540d\u5b57\u51b2\u7a81\uff0c\u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u91cd\u540d\u3002","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespace","text":"\u4e00\u822c\u800c\u8a00\uff0cname \u4ea7\u751f\u5730\u70b9\u51b3\u5b9a\u5176\u6240\u5904\u7684 namespace\u3002\u4f8b\u5982\uff0c\u5728\u51fd\u6570\u5185\u5b9a\u4e49\u7684 name \u4f1a\u4f4d\u4e8e\uff08\u51fd\u6570\u7684\uff09\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f46\u4f7f\u7528\u4e86 global \u3001 nonlocal \u8bed\u53e5\u4f1a\u6539\u53d8\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e2a\u5728\u540e\u9762\u4f1a\u8bf4\u5230\u3002 built-in namespace \uff1abuiltins \u6a21\u5757\u5b9a\u4e49\u7684\u6240\u6709\u540d\u5b57\u5b58\u5728\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u540d\u5b57\u5305\u62ec\u5185\u7f6e\u51fd\u6570\u3001\u5185\u7f6e\u5f02\u5e38\u3001\u5185\u7f6e\u5e38\u91cf\u3001\u5185\u7f6e\u7c7b\u578b\u3002\u5982\u679c\u662fPython 2\uff0c\u5219\u662f __builtin__ \u6a21\u5757\u3002 global namespace \uff1a\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5305\u62ec\u6240\u6709\u5728\u6a21\u5757\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u7c7b\u3001\u51fd\u6570\u3001\u5e38\u91cf\u3001\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u3002 local namespace \uff1a\u76f8\u5bf9\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u6bcf\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u90fd\u6709\u4e00\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u6216\u7c7b\u6240\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u53c2\u6570\u3001\u51fd\u6570\u5185\u7684\u53d8\u91cf\u3001\u7c7b\u5c5e\u6027\u3001\u7c7b\u65b9\u6cd5\u7b49\u3002 enclosing namespace \uff1a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e0d\u4ec5\u8bb0\u5f55\u4e86\u5f53\u524d\u5d4c\u5957\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u8fd8\u8bb0\u5f55\u4e86\u5d4c\u5957\u51fd\u6570\u5f15\u7528\u7684\u5916\u90e8\u53d8\u91cf\u3002","title":"Namespace \u7684\u79cd\u7c7b"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespace_1","text":"\u4e0d\u540c\u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\u6709\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\uff1a built-in\uff1a\u5728 Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u521b\u5efa\uff0c\u89e3\u91ca\u5668\u9000\u51fa\u65f6\u9500\u6bc1 global\uff1a\u5728\u6a21\u5757\u5b9a\u4e49\u88ab\u89e3\u91ca\u5668\u8bfb\u5165\u65f6\u521b\u5efa\uff0c\u901a\u5e38\u4e5f\u4f1a\u4e00\u76f4\u4fdd\u5b58\u5230\u89e3\u91ca\u5668\u9000\u51fa\uff0c\u9664\u975e\u4f7f\u7528 del \u8bed\u53e5\u3002 local\uff1a\u8fd9\u91cc\u8981\u533a\u5206 function \u4ee5\u53ca class \u5b9a\u4e49\uff1a \u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u51fd\u6570\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u51fd\u6570\u8fd4\u56de\u6216\u8005\u4ea7\u751f\u672a\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u65f6\u9500\u6bc1\u3002 \u7c7b\u5b9a\u4e49\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a\u5728\u89e3\u91ca\u5668\u8bfb\u5230\u7c7b\u5b9a\u4e49\u521b\u5efa\uff0c\u79bb\u5f00\u7c7b\u5b9a\u4e49\u65f6\u521b\u5efaclass object\u3002\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e2a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff08\u89c1\u5b98\u65b9\u5bf9\u7c7b\u5b9a\u4e49\u7684 \u8bf4\u660e \uff09\u3002","title":"Namespace\u751f\u547d\u5468\u671f"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespace_2","text":"\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 locals() \u6765\u8bbf\u95ee \u5168\u5c40 \uff08\u6a21\u5757\u7ea7\u522b\uff09\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u901a\u8fc7 globals() \u6765\u8bbf\u95ee \u867d\u7136\u90fd\u662f\u8fd4\u56de\u547d\u540d\u7a7a\u95f4\uff0c\u4f46 globals() \u548c locals() \u6709\u4e00\u70b9\u4e0d\u4e00\u6837\u3002 locals() \u8fd4\u56de\u7684\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 locals() \u5bf9\u8c61\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5c40\u90e8\u540d\u5b57\u7a7a\u95f4\u3002 globals \u8fd4\u56de\u662f\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f\u526f\u672c\uff0c\u6240\u4ee5\u4fee\u6539 globals() \u5bf9\u8c61\u4f1a\u5f71\u54cd\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u3002 # \u4fee\u6539\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u65e0\u6548 def change_local (): x = 123 print ( \"\u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\" , locals (), sep = \"\uff1a\" ) locals ()[ \"x\" ] = 6789 print ( \"\u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\" , f \"x= {x} \" , sep = \"\uff1a\" ) change_local () \u5f53\u524d\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1a{'x': 123} \u4fee\u6539locals()\uff0c\u5e76\u4e0d\u5f71\u54cdx\u7684\u503c\uff1ax=123 # \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548 y = 123 globals ()[ \"y\" ] = 456 print ( \"\u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a\" , f \"y= {y} \" ) \u4fee\u6539\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u751f\u6548\uff1a y=456","title":"\u67e5\u770bNamespace"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_2","text":"scope : scope \u662fPython\u7a0b\u5e8f\u7684\u4e00\u5757\u6587\u672c\u533a\u57df\uff08\u5373\u4e00\u4e2a\u4ee3\u7801\u533a\u57df\uff09\uff0c\u5728\u8fd9\u4e2a\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95eenamespace \u3002 \u76f4\u63a5\u8bbf\u95ee\u610f\u5473\u7740\u65e0\u987b\u7279\u6027\u7684\u6307\u660e\u5f15\u7528\u3002\u5728Python\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u662f\u6307\u76f4\u63a5\u4f7f\u7528name\u8bbf\u95ee\u5bf9\u8c61\uff0c\u5982 name \uff0c\u8fd9\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 name \uff1b\u800c\u95f4\u63a5\u8bbf\u95ee\u662f\u6307\u4f7f\u7528\u5f62\u5982 objname.attrname \u7684\u65b9\u5f0f\uff0c\u5373\u5f15\u7528\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u8fd9\u4e0d\u4f1a\u5728\u547d\u540d\u7a7a\u95f4\u641c\u7d22\u540d\u5b57 attrname \uff0c\u800c\u662f\u641c\u7d22\u540d\u5b57 objname \uff0c\u518d\u8bbf\u95ee\u5176\u5c5e\u6027\u3002 \u6362\u800c\u8a00\u4e4b\uff0c\u4f5c\u7528\u57df\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u53d1\u751f\u4f5c\u7528\u7684\u4ee3\u7801\u533a\u57df\uff0c\u53d1\u751f\u4f5c\u7528\u662f\u6307\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88ab\u4f5c\u7528\u57df\u76f4\u63a5\u8bbf\u95ee\u3002","title":"\u4f5c\u7528\u57df"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_3","text":"\u547d\u540d\u7a7a\u95f4\u4fdd\u5b58\u7740\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff0c\u6620\u5c04\u5173\u7cfb\u5728\u4f5c\u7528\u57df\u4e2d\u88ab\u5b9a\u4e49\uff0c\u540c\u65f6\u4f5c\u7528\u57df\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\u8bbf\u95ee\u5bf9\u8c61\u3002\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u5b57\uff0c\u5b83\u4e5f\u5c31\u662f\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002\u6709\u4e9b\u4ee3\u7801\u533a\u57df\u53ef\u4ee5\u8bbf\u95ee\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u5b57\uff0c\u90a3\u4e48\u5b83\u540c\u65f6\u662f\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df\u3002 \u4f5c\u7528\u57df\u662f\u9759\u6001\u7684\uff08\u5b83\u53ea\u662f\u4ee3\u7801\u6587\u672c\uff09\uff0c\u800c\u547d\u540d\u7a7a\u95f4\u662f\u52a8\u6001\u7684\uff0c\u547d\u540d\u7a7a\u95f4\u968f\u7740\u89e3\u91ca\u5668\u7684\u6267\u884c\u800c\u4ea7\u751f\u3002 \u6709\u4e9b\u6587\u7ae0\u8ba4\u4e3a\u52a8\u6001\u7684\u4f5c\u7528\u57df\u5c31\u662f\u547d\u540d\u7a7a\u95f4\u3002\u5176\u5b9e\u5e76\u4e0d\u662f\uff0c\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u6620\u5c04\uff0c\u4f5c\u7528\u57df\u662f\u4e00\u5757\u4ee3\u7801\u533a\u57df\u3002 Python\u5bf9\u8c61\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u88ab\u8bbf\u95ee\uff0c\u800c\u4f5c\u7528\u57df\u5219\u9650\u5236\u4e86Python\u5bf9\u8c61\u7684\u4f7f\u7528\u8303\u56f4\u3002","title":"\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u7684\u5173\u7cfb"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#legb","text":"\u5f53\u4e00\u884c\u4ee3\u7801\u9700\u8981\u4f7f\u7528\u540d\u5b57 X \u6240\u5bf9\u5e94\u7684\u503c\uff0c Python\u4f1a\u4ece\u5f53\u524d\u5c42\u7ea7\u7684Namespace\u5f00\u59cb \uff0c\u5e76\u6839\u636e\u4ee5\u4e0b\u987a\u5e8f\uff0c\u53bb\u67e5\u627e\u540d\u5b57 X \uff1a local namespace \uff1a\u5305\u542b\u5c40\u90e8\u540d\u5b57\u7684\u6700\u5185\u5c42\uff08innermost\uff09\u4f5c\u7528\u57df\uff0c\u5982\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7c7b\u7684\u5185\u90e8\u5c40\u90e8\u4f5c\u7528\u57df\u3002 Enclosing \uff1a\u6839\u636e\u5d4c\u5957\u5c42\u6b21\u4ece\u5185\u5230\u5916\u641c\u7d22\uff0c\u5305\u542b\u975e\u5c40\u90e8\uff08nonlocal\uff09\u975e\u5168\u5c40\uff08nonglobal\uff09\u540d\u5b57\u7684\u4efb\u610f\u5c01\u95ed\u51fd\u6570\u7684\u4f5c\u7528\u57df\u3002\u5982\u4e24\u4e2a\u5d4c\u5957\u7684\u51fd\u6570\uff0c\u5185\u5c42\u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5916\u5c42\u51fd\u6570\u4f5c\u7528\u57df\u5c31\u662f\u5185\u5c42\u51fd\u6570\u7684 Enclosing \u4f5c\u7528\u57df\u3002 global built-in NameError \uff1a\u5982\u679c Python \u5728\u4ee5\u4e0a4\u4e2anamespace\u627e\u4e0d\u5230 X \uff0c\u5c06\u653e\u5f03\u641c\u7d22\u5e76\u629b\u51fa NameError \u5f02\u5e38\uff1a NameError: name 'a' is not defined \u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\uff0clocal\u3001global\u3001built-in\u4e09\u4e2anamespace\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46Enclosing namespace\u4e0d\u4e00\u5b9a\u5b58\u5728\u3002","title":"\u540d\u5b57\u641c\u7d22\u987a\u5e8f\uff08LEGB\uff09"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#namespacescope","text":"\u4e0d\u80fd\u5728\u540d\u5b57\u672a\u5b9a\u4e49\u524d\u5f15\u7528\u8be5\u540d\u5b57\uff08\u547d\u540d\u7a7a\u95f4\u4e0d\u5b58\u5728\u8be5\u6620\u5c04\u5173\u7cfb\uff09\u3002 built-in\u3001global\u4e24\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5f15\u5165\u662f\u4e0d\u80fd\u591f\u901a\u8fc7\u4ee3\u7801\u64cd\u4f5c\u7684\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5f15\u5165\u5b83\u4eec\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u5f15\u5165\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u3002built-in\u547d\u540d\u7a7a\u95f4\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff08\u5df2\u7ecf\u9884\u5b9a\u4e49\u597d\uff09\uff0c\u4f46global\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u88abPython\u4ee3\u7801\u4fee\u6539\u3002 \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49\u3001\u63a8\u5bfc\u5f0f\u4f1a\u5f15\u5165local\u547d\u540d\u7a7a\u95f4 \uff0c\u95ed\u5305\u51fd\u6570\u5b9a\u4e49\u4f1a\u5f15\u5165enclosing\u547d\u540d\u7a7a\u95f4\u3002 \u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u88ab\u4fee\u6539\u7684\u60c5\u51b5\uff1a \u7c7b\u5b9a\u4e49\u3001\u51fd\u6570\u5b9a\u4e49 \u8d4b\u503c\u8bed\u53e5 import \u8bed\u53e5\u3001 if \u8bed\u53e5\u3001 for \u8bed\u53e5\u3001 while \u8bed\u53e5 if \u3001 for \u3001 while \u8bed\u53e5\u5e76\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f5c\u7528\u8303\u56f4\u6700\u5927\u7684\u547d\u540d\u7a7a\u95f4\u662fglobal namespace\uff0c\u4f46global namespace\u4e5f\u53ea\u662f\u6a21\u5757\u7ea7\u522b\u7684\u3002 a \u6a21\u5757\u4e0d\u80fd\u76f4\u63a5\u5f15\u7528\u5728 b \u6a21\u5757\u5b9a\u4e49\u7684name\uff0c\u5373\u4f7f a \u6a21\u5757\u5df2\u7ecf\u5bfc\u5165\u4e86\u6574\u4e2a b \u6a21\u5757\uff1a import b \u3002\u9664\u975e\u76f4\u63a5\u5bfc\u5165name\uff1a from b import name \u3002 \u5bfc\u5165 b \u6a21\u5757\u4e2d\u5176\u4e2d\u4e00\u4e2aname\uff1a from b import name \uff0c\u6574\u4e2a b \u6a21\u5757\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u4e3a Python \u5e76\u4e0d\u77e5\u9053 name \u5728 b.py \u6587\u6863\u7684\u4f55\u5904\uff0c\u4e3a\u4e86\u80fd\u591f\u627e\u5230 name \uff0cPython \u9700\u8981\u6267\u884c\u6574\u4e2a b.py\u3002 import \u8bed\u53e5\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8global namespace\uff0c\u4f8b\u5982 import \u8bed\u53e5\u5199\u5728\u51fd\u6570\u5185\u3002 \u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u5916\u5c42\u4f5c\u7528\u57df\u4e0d\u80fd\u5f15\u7528\u5185\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 def try_to_define_name (): '''\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u5e76\u7ed1\u5b9a\u4e86\u4e00\u4e2a\u6574\u6570\u5bf9\u8c611''' i = 1 # \u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u5148\u8c03\u7528\u51fd\u6570\u5b9a\u4e49i try_to_define_name () # \u5728\u5f15\u7528\u540d\u5b57i\u4e4b\u524d\uff0c\u660e\u660e\u8c03\u7528\u4e86\u51fd\u6570\uff0c\u5b9a\u4e49\u4e86\u540d\u5b57i\uff0c\u53ef\u662f\u8fd8\u662f\u627e\u4e0d\u5230\u8fd9\u4e2a\u540d\u5b57\u3002 print ( i ) NameError : name 'i' is not defined \u867d\u7136\u5b9a\u4e49\u4e86\u540d\u5b57 i \uff0c\u4f46\u662f\u5b9a\u4e49\u5728\u4e86\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u6309\u7167 LEGB \u641c\u7d22\u89c4\u5219\uff0c\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u81ea\u7136\u8bbf\u95ee\u4e0d\u5230\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u547d\u540d\u7a7a\u95f4\uff1b\u518d\u8005\uff0c\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u88ab\u9500\u6bc1\u4e86\u3002","title":"Namespace\u548cscope\u603b\u7ed3"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#global-nonlocal","text":"\u6839\u636eLEGB\u641c\u7d22\u89c4\u5219\uff0c\u4efb\u4f55\u65f6\u5019\uff0cPython\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u662f\u5374\u4e0d\u53ef\u4ee5\u5728\u5185\u5c42\u4f5c\u7528\u57df\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u53d8\u91cf\u3002 \u53ef\u4ee5\u8bfb\u53d6\u5168\u90e8\u53d8\u91cf\uff0c\u8fd9\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a\u4efb\u4f55\u65f6\u5019\uff0cglobal namespace\u90fd\u53ef\u4ee5\u88ab\u8bbf\u95ee\u3002\u4f46\u4e3a\u4ec0\u4e48\u5728\u5185\u5c42\u4f5c\u7528\u57df\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u5374\u4e0d\u80fd\u88ab\u4fee\u6539\u5462\uff1f\u8fd9\u770b\u8d77\u6765\u50cf\u662fPython\u7684\u4e00\u4e2a\u89c4\u5b9a\uff0c\u4f46\u5176\u5b9e\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002\u5728Python\u4e2d\u4fee\u6539\u53d8\u91cf\u610f\u5473\u7740\u5c06\u4e00\u4e2a\u540d\u5b57\u7ed1\u5b9a\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u9700\u8981\u4f7f\u7528assignment\u8fd0\u7b97\u7b26 = \u3002 \u8fd9\u610f\u5473\u7740 = \u5de6\u8fb9\u7684\u540d\u5b57\u4f1a\u88ab\u52a0\u5165\u5f53\u524d\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u540d\u5b57\u5bf9\u5e94\u7740 = \u53f3\u8fb9\u7684\u5bf9\u8c61\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a a = 1 def change_a (): a = 10 change_a () a # 1 1 a = 10 \u8bed\u53e5\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4e2d\uff0c\u5f53\u5b83\u88abPython\u6267\u884c\u65f6\uff0cPython\u4f1a\u5c06 a \u52a0\u5165\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u800c\u4e0d\u4f1a\u5c06 a \u89c6\u4f5c\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u7684 a \u3002\u5f53\u6211\u4eec\u5728\u6700\u5916\u5c42\u4f5c\u7528\u57df\u5f15\u7528 a \u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0cPython\u4f1a\u4ece a \u6240\u5728\u7684\u4f5c\u7528\u57df\u5bf9\u5e94\u7684\u547d\u540d\u7a7a\u95f4\uff08\u5373\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff09\u5f00\u59cb\u641c\u7d22 a \u5bf9\u5e94\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u641c\u7d22\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u518d\u8005\uff0c\u6b64\u65f6\u51fd\u6570 change_a() \u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u5df2\u7ecf\u88ab\u9500\u6bc1\uff0c\u5373\u4f7f\u60f3\u641c\u7d22\u4e5f\u641c\u7d22\u4e0d\u5230\u3002 \u76f8\u4fe1\u4f60\u4ece\u4e0a\u9762\u7684\u53d9\u8ff0\u5df2\u7ecf\u610f\u8bc6\u5230\uff0c\u5982\u679c\u60f3\u8ba9Python\u5728\u5185\u5c42\u4f5c\u7528\u57df\u4fee\u6539\u5916\u5c42\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u9700\u8981\u8ba9Python\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u6765\u81ea\u5916\u5c42\u4f5c\u7528\u57df\u3002 global \u8bed\u53e5\u548c nonlocal \u8bed\u53e5\u6b63\u662f\u53ef\u4ee5\u8d77\u5230\u8fd9\u6837\u7684\u4f5c\u7528\u3002 global \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26\u5c06\u88ab\u89e3\u6790\u4e3a\u5168\u5c40\u53d8\u91cf\u3002 \u4f7f\u7528global\u65f6\u6709\u4ee5\u4e0b\u4e24\u6761\u9650\u5236\uff1a \u5728\u540c\u4e00\u4ee3\u7801\u5757\u4e2d\uff0c\u5217\u5728global\u8bed\u53e5\u4e2d\u7684\u6240\u6709\u6807\u8bc6\u7b26\u4e0d\u80fd\u5728\u8be5global\u8bed\u53e5\u524d\u51fa\u73b0\u3002 \u5217\u5728global \u8bed\u53e5\u540e\u7684\u6807\u8bc6\u7b26\u4e0d\u80fd\u88ab\u5b9a\u4e49\u6210\u5f62\u53c2\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728for\u5faa\u73af\u63a7\u5236\u7684\u76ee\u6807\u3001\u7c7b\u5b9a\u4e49\u548c\u51fd\u6570\u5b9a\u4e49\uff0c\u6216\u8005import\u8bed\u53e5\u4e2d\u3002 CPython\u5b9e\u73b0\u7ec6\u8282 \u5f53\u524d\u5b9e\u73b0\u5e76\u672a\u5f3a\u5236\u5c65\u884c\u4e0a\u9762\u4e24\u6761\u9650\u5236 2 \uff0c\u4f46\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u6ee5\u7528\u8fd9\u79cd\u81ea\u7531\uff0c\u56e0\u4e3a\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u5f3a\u5236\u5c65\u884c\u5b83\u4eec\u6216\u8005\u4e0d\u7559\u75d5\u8ff9\u7684\u6539\u53d8\u7a0b\u5e8f\u542b\u4e49\u3002 nonlocal \u8bed\u53e5\u58f0\u660e\u5217\u5728\u5176\u540e\u7684\u6240\u6709\u6807\u8bc6\u7b26 \u5173\u8054 \u5230 \u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u91cc\u5b9a\u4e49\u8fc7\u7684\u540c\u540d\u53d8\u91cf\uff08\u4e0d\u5305\u62ec\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u662f\u6700\u8fd1\u7684 enclosing \u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff09\u3002 def scope_test (): def do_local (): spam = \"local spam of do_local\" def do_nonlocal (): nonlocal spam spam = \"nonlocal spam of do_nonlocal\" def do_global (): global spam spam = \"global spam of do_global\" spam = \"test spam of scope_test\" # do_local\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam do_local () print ( \"After local assignment:\" , spam ) # do_nonlocal\u51fd\u6570\u5185\u90e8\u7684\u8d4b\u503c\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684spam\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u5168\u5c40\u7684spam do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) # do_global \u51fd\u6570\u5185\u58f0\u660e\u7684spam\u5b58\u5728\u4e8e\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u800c\u4e0d\u5f71\u54cdscope_test\u4f5c\u7528\u57df\u7684 do_global () print ( \"After global assignment:\" , spam ) scope_test () print ( \"In global scope:\" , spam ) After local assignment: test spam of scope_test After nonlocal assignment: nonlocal spam of do_nonlocal After global assignment: nonlocal spam of do_nonlocal In global scope: global spam of do_global nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e24\u4e2a\u4e0d\u540c\u70b9\uff1a \u5176\u4e00\uff0c global \u8bed\u53e5\u53ea\u662f\u58f0\u660e\u6807\u8bc6\u7b26\u6765\u5b58\u5728\u4e8e\u5168\u5c40\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u521b\u5efa\u8be5\u6807\u8bc6\u7b26\uff1b nonlocal \u8bed\u53e5\u5219\u4f1a\u5728\u5b50\u51fd\u6570\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u4e0e\u7236\u51fd\u6570\u53d8\u91cf\u540c\u540d\u7684\u6807\u8bc6\u7b26\uff1a gv = 'a global var' def func (): global gv lv = 'a local var' print ( locals ()) def inn_func (): nonlocal lv global gv print ( locals ()) return inn_func a = func () a () {'lv': 'a local var'} {'lv': 'a local var'} \u4e4b\u6240\u4ee5 nonlocal \u8bed\u53e5\u4e0e global \u8bed\u53e5\u7684\u5904\u7406\u4e0d\u540c\uff0c\u662f\u56e0\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u751f\u5b58\u671f\u5f88\u957f\uff0c\u5728\u6a21\u5757\u5185\u968f\u65f6\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u800c\u7236\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u5728\u7236\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4fbf\u4f1a\u76f4\u63a5\u91ca\u653e\uff0c\u56e0\u6b64 nonlocal \u8bed\u53e5\u5fc5\u987b\u5c06\u7236\u51fd\u6570\u7684\u6807\u8bc6\u7b26\u548c\u5f15\u7528\u5199\u5165enclosing namespace\u3002 \u5176\u4e8c\uff0c global \u8bed\u53e5\u53ef\u4ee5\u58f0\u660e\u5168\u5c40\u4f5c\u7528\u57df\u8fd8\u6ca1\u5b58\u5728\u7684\u540d\u5b57\uff0c\u800c nonlocal \u8bed\u53e5\u53ea\u80fd\u5c06\u5b83\u58f0\u660e\u7684\u540d\u5b57\u5173\u8054\u5230enclosing\u4f5c\u7528\u57df\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u7ed1\u5b9a\uff1a # nonlocal \u8bed\u53e5\u4e4b\u524d\u7684eclosing\u4f5c\u7528\u57df\u4e0d\u5b58\u5728spam \u5219\u62a5\u9519 def scope_test (): def do_nonlocal (): # \u7236\u51fd\u6570\u4f5c\u7528\u57df\u8981\u5148\u5b9a\u4e49spam\uff0c\u5426\u5219\u62a5\u9519 nonlocal spam spam = \"nonlocal spam of do_nonlocal\" scope_test () File \"<ipython-input-1-e77162de9535>\", line 5 nonlocal spam ^ SyntaxError: no binding for nonlocal 'spam' found nonlocal \u8bed\u53e5\u53ea\u80fd\u58f0\u660e\u7684\u540d\u5b57\u4f1a\u7ed1\u5b9a\u5230\u79bb nonlocal \u8bed\u53e5\u6700\u8fd1\u7684enclosing \u4f5c\u7528\u57df\uff08\u5982\u679cenclosing \u4f5c\u7528\u57df\u5b58\u5728 nonlocal \u8bed\u53e5\u58f0\u660e\u7684\u540d\u5b57\uff09\uff1a def scope_test (): spam = \"local spam of scope_test\" def do_local (): spam = \"local spam of do_local\" print ( \"After local assignment:\" , spam ) def do_nonlocal (): # \u901a\u8fc7nonlocal\u58f0\u660e\u5c06spam\u548c\u6700\u8fd1\u7684enclosing\u4f5c\u7528\u57df\u7684spam\u5173\u8054 # \u6240\u4ee5\u5173\u8054\u7684\u662fdo_local\u51fd\u6570\u7684spam nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment:\" , spam ) do_local () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () After local assignment: local spam of do_local After nonlocal assignment: nonlocal spam of do_nonlocal After nonlocal assignment, scope_test's spam: local spam of scope_test \u56e0\u6b64 nonlocal \u8bed\u53e5\u91cd\u65b0\u7ed1\u5b9a\u7684name\u7684\u771f\u5b9e\u4f5c\u7528\u57df\u662f\u4e0d\u6e05\u695a\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5df2\u7ecf\u5b58\u5728\u7684name\u672c\u6765\u4f4d\u4e8e\u90a3\u4e00\u5c42\u4f5c\u7528\u57df\u3002 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u6709\u4e00\u4e2a\u76f8\u540c\u70b9\uff1a \u5f53\u524d\u4f5c\u7528\u57df\u4e0d\u80fd\u5728 nonlocal \u8bed\u53e5\u548c global \u8bed\u53e5\u4e4b\u524d\u7ed1\u5b9a\u4e24\u8005\u58f0\u660e\u7684\u6807\u8bc6\u7b26\uff1a # global def scope_test (): spam = \"conflict\" global spam spam = \"nonlocal spam of do_nonlocal\" scope_test () # nonlocal def scope_test (): spam = \"local spam of scope_test\" def do_nonlocal (): spam = \"conflict\" nonlocal spam spam = \"nonlocal spam of do_nonlocal\" do_nonlocal () print ( \"After nonlocal assignment, scope_test's spam:\" , spam ) scope_test () File \"<ipython-input-1-d9548726e53c>\", line 5 global spam ^ SyntaxError: name 'spam' is assigned to before global declaration","title":"global\u548c nonlocal"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_4","text":"\u7c7b\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u90fd\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u5b83\u4eec\u6267\u884c\u673a\u5236\u4e0d\u4e00\u6837\uff0c\u6709\u4e0d\u5c0f\u7684\u533a\u522b\u3002 \u5176\u4e00\uff0c\u51fd\u6570\u521d\u59cb\u5316\u65f6\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u7c7b\u521d\u59cb\u5316\u65f6\u4f1a\u88ab\u6267\u884c\u3002 Python\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c\uff1a def func (): print ( \"executed\" ) Python\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u7c7b\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff1a class A : print ( \"executed_A\" ) def A_func ( self ): print ( \"executed_A_func\" ) class B : print ( \"executed_B\" ) class C : print ( \"executed_C\" ) executed_A executed_B executed_C \u8fd9\u770b\u8d77\u6765\u611f\u89c9\u6709\u70b9\u4e0d\u53ef\u601d\u8bae\uff0c\u5927\u5bb6\u90fd\u662f\u5b9a\u4e49\uff0c\u4e3a\u4ec0\u4e48\u7c7b\u5b9a\u4e49\u4f1a\u88ab\u6267\u884c\uff0c\u96be\u9053\u4e0d\u5e94\u8be5\u662f\u5b9a\u4e49\u88ab\u5f15\u7528\u65f6\u624d\u6267\u884c\u5417\uff1f \u5176\u5b9e\u8fd9\u4e5f\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\u3002Python\u89e3\u91ca\u5668\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u53ea\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u51fd\u6570\u540d\uff0c\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff0c\u81ea\u7136\u4e0d\u9700\u8981\u6267\u884c\u51fd\u6570\u4f5c\u7528\u57df\u7684\u4ee3\u7801\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u52a8\u6001\u6027\uff1a\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4ea7\u751f\u3002 \u800c\u7c7b\u5b9a\u4e49\u5b9e\u9645\u4e0a\u662f\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u5305\u88c5\uff0c\u56e0\u6b64Python\u89e3\u91ca\u5668\u8bfb\u5165\u7c7b\u5b9a\u4e49\u65f6\uff0c\u4e0d\u4ec5\u9700\u8981\u5728\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u7ed1\u5b9a\u7c7b\u540d\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u800c\u547d\u540d\u7a7a\u95f4\u5728\u4f5c\u7528\u57df\u88ab\u6267\u884c\u65f6\u624d\u4f1a\u4ea7\u751f\uff0c\u56e0\u6b64\u7c7b\u5b9a\u4e49\u9700\u8981\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5c31\u88ab\u6267\u884c\u3002\u6ce8\u610f\uff1a\u7c7b\u65b9\u6cd5\u5185\u7684\u4f5c\u7528\u57df\u548c\u51fd\u6570\u4e00\u6837\uff0c\u662f\u4e0d\u4f1a\u88ab\u6267\u884c\u7684\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u9700\u8981\u521b\u5efa\u7c7b\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u56e0\u4e3a\u7c7b\u5177\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u521b\u5efa\u7c7b\u5c5e\u6027\u5c31\u5fc5\u987b\u6267\u884c\u4ee3\u7801\uff08\u8fdb\u884c\u8d4b\u503c\uff09\u3002\u90a3\u4e3a\u4ec0\u4e48\u5728\u8bfb\u5165\u7c7b\u5b9a\u4e49\u5c31\u521b\u5efa\u7c7b\u5c5e\u6027\u5462\uff1f\u56e0\u4e3a\u7c7b\u662f\u521b\u5efa\u5b9e\u4f8b\u3001\u751f\u6210\u5176\u4ed6\u7c7b\uff08\u6d89\u53ca\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49\uff09\u7684\u5bf9\u8c61\uff0c\u5fc5\u987b\u5728\u5b9e\u4f8b\u4e4b\u524d\u88ab\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u52a0\u8f7d\u65f6\u5c31\u88ab\u521b\u5efa\u6709\u52a9\u4e8e\u63d0\u9ad8\u6548\u7387\u548c\u964d\u4f4e\u903b\u8f91\u590d\u6742\u5ea6\u3002 \u53e6\u5916\uff0c\u7c7b\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u7c7b\u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u5148\u521b\u5efa\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7279\u70b9\u5c31\u8981\u6c42\u7c7b\u521d\u59cb\u5316\u65f6\u5c31\u521b\u5efa\u7c7b\u547d\u540d\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u7528\u4e8e\u7edf\u4e00\u7ba1\u7406\u67d0\u4e00\u7c7b\u5e38\u91cf\uff1a class Math_Constant : pi = 3.1415926 e = 2.7182818 sqrt_2 = 1.4142135 rho = 1.3247195 \u5982\u679c Math_Constant \u7684\u7c7b\u5c5e\u6027\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u624d\u80fd\u88ab\u8c03\u7528\uff0c\u90a3\u5c31\u592a\u9ebb\u70e6\u4e86\uff0c\u800c\u4e14\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u4e5f\u5c31\u6ca1\u4e86\u610f\u4e49\u3002 \u800c\u65b9\u6cd5\u672c\u8d28\u662f\u51fd\u6570\uff0c\u4e0d\u4f1a\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u88ab\u6267\u884c\u3002 \u4e3a\u4ec0\u4e48\u8bfb\u5165\u51fd\u6570\u5b9a\u4e49\u65f6\u4e0d\u9700\u8981\u521b\u5efa\u51fd\u6570\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1f \u4e00\u822c\u6765\u8bf4\uff0c\u51fd\u6570\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e3b\u8981\u4e0e\u53c2\u6570\u6709\u5173\uff0c\u800c\u53c2\u6570\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u624d\u4f20\u5165\uff0c\u521b\u5efa\u4e86\u547d\u540d\u7a7a\u95f4\u4e5f\u610f\u4e49\u4e0d\u5927\u3002\u53e6\u5916\u51fd\u6570\u4e0d\u50cf\u7c7b\u90a3\u4e48\u590d\u6742\uff0c\u4e5f\u5c31\u6ca1\u5fc5\u8981\u8bfb\u5165\u5b9a\u4e49\u65f6\u5c31\u521b\u5efa\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u5176\u4e8c\uff0c\u7c7b\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e0d\u5728\u540d\u5b57\u641c\u7d22\u8def\u5f84\u4e2d\u3002 \u4f8b\u5982\uff1a class A : pi = 3.1415926 def print_pi ( self ): print ( pi ) A () . print_pi () NameError : name 'pi' is not defined \u7c7b A \u662f print_pi \u65b9\u6cd5\u7684\u5916\u5c42\u4f5c\u7528\u57df\uff0c\u6309\u7167\u8bbe\u60f3\uff0c print_pi \u65b9\u6cd5\u4e2d\u627e\u4e0d\u5230\u53d8\u91cf pi \uff0c\u5e94\u8be5\u4f1a\u5230\u4e0a\u4e00\u5c42\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u4f46\u662f print_pi \u65b9\u6cd5\u5e76\u6ca1\u6709\u5728\u7c7b A \u7684\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\uff0c\u800c\u662f\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u3002 \u53c8\u4f8b\u5982\uff1a class A (): a = 1 b = [ a + i for i in range ( 3 )] #NameError: name 'a' is not defined \u6267\u884c\u4e0a\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7c7b A \u5185\u5217\u8868\u63a8\u5bfc\u5f0f\u65e0\u6cd5\u8c03\u53d6 a \u7684\u503c\u3002 Python3\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u4e5f\u4f1a\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002 \u4f46\u5728\u51fd\u6570\u4e2d\uff0c\u5b8c\u5168\u6ca1\u95ee\u9898\uff1a def func (): a = 1 b = [ a + i for i in range ( 3 )] print ( b ) func () # [ 1 , 2 , 3 ] \u56e0\u6b64\uff0c\u7c7b A \u4e2d\u7684 a \u4e0d\u540c\u4e8e\u51fd\u6570 func \u4e2d\u7684 a \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u88ab\u4efb\u610f\u5f15\u7528\u3002\u4e4b\u6240\u4ee5\u5f3a\u8c03\u201d\u4e0d\u53ef\u4ee5\u88ab\u4efb\u610f\u8bfb\u53d6\u201d\uff0c\u539f\u56e0\u5728\u4e8e\u5728\u7c7b A \u7684\u5c40\u90e8\u7a7a\u95f4\u5185\uff0c a \u5728\u5f53\u524d\u5c42\u7ea7\u7684\u4f5c\u7528\u57df\u662f\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\u7684\uff1a class A (): a = 1 c = a + 2 A . c # 3 3 \u56e0\u6b64\uff0c\u7c7b\u5185\u53ef\u4ee5\u4ea7\u751f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u7684\u4ee3\u7801\uff08\u65b9\u6cd5\u3001\u63a8\u5bfc\u5f0f\u7b49\uff09\u4e25\u683c\u4e0a\u4e0d\u662f\u4f5c\u7528\u57df\u3002","title":"\u7c7b\u7684\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_5","text":"","title":"\u811a\u6ce8"},{"location":"Python%E5%9F%BA%E7%A1%80/3.2.%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F.html#_6","text":"python\u7684\u5d4c\u5957\u51fd\u6570\u4e2d\u5c40\u90e8\u4f5c\u7528\u57df\u95ee\u9898? Python\u8fdb\u9636 - \u5bf9\u8c61\uff0c\u540d\u5b57\u4ee5\u53ca\u7ed1\u5b9a \u5373 {name:object} \u3002 \u21a9 \u5f53\u524d\u7684CPython\u5df2\u7ecf\u5b9e\u73b0\u7b2c\u4e00\u6761\u9650\u5236\uff0c\u81f3\u5c11\u57280.29.14\u7248\u672c\u7684CPython\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u3002 \u21a9","title":"\u53c2\u8003"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html","text":"\u95ed\u5305\u7684\u6982\u5ff5 \u4ee5\u4e0b\u5f15\u7528\u81ea\u7ef4\u57fa\u767e\u79d1\u4e2d\u5173\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff1a \u5728 \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e2d\uff0c \u95ed\u5305 \uff08\u82f1\u8bed\uff1aClosure\uff09\uff0c\u53c8\u79f0 \u8bcd\u6cd5\u95ed\u5305 \uff08Lexical Closure\uff09\u6216 \u51fd\u6570\u95ed\u5305 \uff08function closures\uff09\uff0c\u662f\u5f15\u7528\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u88ab\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u5c06\u548c\u8fd9\u4e2a\u51fd\u6570\u4e00\u540c\u5b58\u5728\uff0c\u5373\u4f7f\u5df2\u7ecf\u79bb\u5f00\u4e86\u521b\u9020\u5b83\u7684\u73af\u5883\u4e5f\u4e0d\u4f8b\u5916\u3002\u6240\u4ee5\uff0c\u6709\u53e6\u4e00\u79cd\u8bf4\u6cd5\u8ba4\u4e3a\u95ed\u5305\u662f\u7531\u51fd\u6570\u548c\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u73af\u5883\u7ec4\u5408\u800c\u6210\u7684\u5b9e\u4f53\u3002\u95ed\u5305\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u5f15\u7528\u73af\u5883\u548c\u76f8\u540c\u7684\u51fd\u6570\u7ec4\u5408\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002 \u95ed\u5305\u7684\u6982\u5ff5\u51fa\u73b0\u4e8e60\u5e74\u4ee3\uff0c\u6700\u65e9\u5b9e\u73b0\u95ed\u5305\u7684\u7a0b\u5e8f\u8bed\u8a00\u662f Scheme \u3002\u4e4b\u540e\uff0c\u95ed\u5305\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e8e \u51fd\u6570\u5f0f\u7f16\u7a0b \u8bed\u8a00\u5982 ML\u8bed\u8a00 \u548c LISP \u3002\u5f88\u591a\u547d\u4ee4\u5f0f\u7a0b\u5e8f\u8bed\u8a00\u4e5f\u5f00\u59cb\u652f\u6301\u95ed\u5305\u3002 \u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\uff08\u5d4c\u5957\uff09\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u5185\u90e8\u7684\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u7684\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5219\u53ef\u80fd\u4ea7\u751f\u95ed\u5305\u3002\u8fd0\u884c\u65f6\uff0c\u4e00\u65e6\u5916\u90e8\u7684\u51fd\u6570\u88ab\u6267\u884c\uff0c\u4e00\u4e2a\u95ed\u5305\u5c31\u5f62\u6210\u4e86\uff0c\u95ed\u5305\u4e2d\u5305\u542b\u4e86\u5185\u90e8\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u6240\u9700\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\u7684\u5f15\u7528\u3002\u5176\u4e2d\u6240\u5f15\u7528\u7684\u53d8\u91cf\u79f0\u4f5c \u4e0a\u503c (upvalue)\u3002 \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff0c\u5e94\u8be5\u8fd8\u662f\u6bd4\u8f83\u76f4\u89c2\u7684\u3002\u7b80\u800c\u8a00\u4e4b\uff1a\u5185\u5d4c\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u5185\u5d4c\u51fd\u6570\u88ab\u6267\u884c\u65f6\uff0c\u5c31\u5f62\u6210\u4e00\u4e2a\u95ed\u5305\u3002\u4f8b\u5982\uff1a def outside ( a , b ): a = a b = b def inner (): y = a + b print ( locals ()) inner () # \u8c03\u7528outside\u51fd\u6570 inner\u88ab\u6267\u884c \u5f62\u6210\u95ed\u5305 outside ( 1 , 2 ) {'y': 3, 'a': 1, 'b': 2} inner() \u88ab\u6267\u884c\u65f6\uff0c\u521b\u5efa\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4f1a\u5305\u62ec\u5176\u5f15\u7528\u7684\u5916\u5c42\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u88ab\u79f0\u4e3a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff08enclosing namespace\uff09\u3002 \u6ce8\u610f\uff0c\u5728Python\u4e2d\uff0c\u5185\u5d4c\u51fd\u6570\u53ef\u4ee5\u88ab\u5916\u5c42\u51fd\u6570\u8fd4\u56de\uff0c\u4e5f\u5c31\u662fPython\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u95ed\u5305\u3002 \u7406\u89e3\u4ec0\u4e48\u662f\u95ed\u5305\u4e0d\u96be\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\u95ed\u5305\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u95ed\u5305\u7684\u4f5c\u7528 \u95ed\u5305\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u5b83\u53ef\u4ee5\u7ed1\u5b9a\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u751f\u6210\u95ed\u5305\u7684\u73af\u5883\uff08\u5916\u5c42\u51fd\u6570\uff09\u5df2\u7ecf\u91ca\u653e\uff0c\u95ed\u5305\u4ecd\u7136\u5b58\u5728\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u50cf\u7c7b\u751f\u6210\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u662f\u5916\u90e8\u51fd\u6570\u53ea\u5728\u8c03\u7528\u65f6\u751f\u6210\u547d\u540d\u7a7a\u95f4\uff0c\u6267\u884c\u5b8c\u6bd5\u540e\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u4f1a\u91ca\u653e\uff0c\u800c\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u521b\u5efa\uff0c\u4e00\u822cPython\u89e3\u91ca\u5668\u9000\u51fa\u624d\u91ca\u653e\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\u5bf9\u4e00\u4e9b\u9700\u8981\u91cd\u7528\u7684\u529f\u80fd\u4e14\u4e0d\u8db3\u4ee5\u5b9a\u4e49\u4e3a\u7c7b\u7684\u884c\u4e3a\uff0c\u4f7f\u7528\u95ed\u5305\u4f1a\u6bd4\u4f7f\u7528\u7c7b\u5360\u7528\u66f4\u5c11\u7684\u8d44\u6e90\uff0c\u4e14\u66f4\u8f7b\u5de7\u7075\u6d3b\u3002 \u4f8b\u5982\uff1a\u5047\u8bbe\u6211\u4eec\u4ec5\u4ec5\u60f3\u6253\u5370\u51fa\u5404\u7c7b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5206\u522b\u4ee5\u7c7b\u548c\u95ed\u5305\u6765\u5b9e\u73b0\uff1a # \u7c7b\u5b9e\u73b0 class Animal ( object ): def __init__ ( self , animal ): self . animal = animal def sound ( self , voice ): print ( self . animal , ':' , voice , \"...\" ) dog = Animal ( \"dog\" ) dog . sound ( \"wangwang\" ) dog . sound ( \"wowo\" ) dog : wangwang ... dog : wowo ... # \u95ed\u5305\u5b9e\u73b0 def voice ( animal ): def sound ( voc ): print ( animal , ':' , voc , \"...\" ) return sound dog = voice ( \"dog\" ) dog ( \"wangwang\" ) dog ( \"wowo\" ) dog : wangwang ... dog : wowo ... \u8f93\u51fa\u7ed3\u679c\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u663e\u7136\u7c7b\u7684\u5b9e\u73b0\u76f8\u5bf9\u7e41\u7410\uff0c\u4e14\u8fd9\u91cc\u53ea\u662f\u60f3\u8f93\u51fa\u4e00\u4e0b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5b9a\u4e49\u4e00\u4e2a Animal \u7c7b\u672a\u514d\u5c0f\u9898\u5927\u505a\uff0c\u800c\u4e14 voice \u51fd\u6570\u5728\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u5df2\u7ecf\u91ca\u653e\uff0c\u4f46 Animal \u7c7b\u53ca\u5176\u5b9e\u4f8b dog \u7684\u76f8\u5e94\u5c5e\u6027\u5374\u4e00\u76f4\u8d2e\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u800c\u8fd9\u79cd\u5185\u5b58\u5360\u7528\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u95ed\u5305\u8fd8\u6709\u5176\u4ed6\u4f5c\u7528\u3002\u95ed\u5305\u53ef\u4ee5\u51cf\u5c11\u51fd\u6570\u53c2\u6570\u7684\u6570\u76ee\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u5c01\u88c5\u3002\u8fd9\u5bf9\u5e76\u884c\u8ba1\u7b97\u4e5f\u975e\u5e38\u6709\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u6bcf\u53f0\u7535\u8111\u8d1f\u8d23\u4e00\u4e2a\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u53e6\u5916\uff0c\u95ed\u5305\u5728Python\u4e2d\u6709\u4e00\u79cd\u91cd\u8981\u7684\u5e94\u7528\u2014\u2014\u88c5\u9970\u5668\u3002\u8fd9\u4e2a\u4f1a\u5728\u88c5\u9970\u5668\u7684\u6587\u7ae0\u8bb2\u8ff0\u3002 \u95ed\u5305\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4 \u6765\u770b\u4e00\u4e2a\u5178\u578b\u7684 \u95ed\u5305 \u7ed3\u6784\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv = [ 'gv' ] + gv # UnboundLocalError:local variable 'gv' referenced before assignment lv = [] def inn_func (): lv = lv + [ v ] # UnboundLocalError:local variable 'lv' referenced before assignment gv . insert ( 1 , lv [ 0 ]) return gv return inn_func \u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u6ca1\u6709\u95ee\u9898\uff0c\u8d4b\u503c\u64cd\u4f5c\u4ece\u53f3\u5230\u5de6\u6267\u884c\uff0c\u5148\u4ece\u53f3\u8fb9\u7684 gv \u3001 lv \u5f00\u59cb\u6267\u884c\u4ee3\u7801\uff0c\u6b64\u65f6\u5c40\u90e8\u4f5c\u7528\u57df\u8fd8\u6ca1\u6709 gv \u53d8\u91cf\uff0c\u5c40\u90e8\u4f5c\u7528\u57df\u4e5f\u6ca1\u6709 lv \u53d8\u91cf\uff0cPython\u5e94\u8be5\u4f1a\u8bbf\u95ee\u5916\u5c42\u4f5c\u7528\u57df\u7684 gv \u3001 lv \u53d8\u91cf\u3002\u4f46\u5b9e\u9645\u8c03\u7528 func() \u51fd\u6570\u65f6\uff0c\u4e0a\u9762\u4e24\u5904\u5bf9 gv \u548c lv \u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u7684\u5730\u65b9\u90fd\u4f1a\u89e6\u53d1 UnboundLocalError \u3002 \u8fd9\u662f\u56e0\u4e3a Python \u5728\u6267\u884c\u51fd\u6570\u524d\uff0c\u4f1a\u9996\u5148\u751f\u6210\u5404\u5c42\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df \uff0c\u56e0\u6b64 Python \u5728\u6267\u884c\u8d4b\u503c\u524d\u4f1a\u5c06 func \u5185\u7684 'gv' 'lv' \u5199\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff1a dict_\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.update({\u201cgv\u201d:['gv'] + gv}) dict_\u95ed\u5305\u547d\u540d\u7a7a\u95f4.update({\u201clv\u201d:['lv'] + lv}) \u5f53 Python \u6267\u884c\u8d4b\u503c\u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0c\u4f1a\u5148\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u3001\u95ed\u5305\u4f5c\u7528\u57df\u5185\u53d1\u73b0 gv \u548c lv \u6807\u8bc6\u7b26\uff0c\u4f46 gv \u548c lv \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u5185\u90fd\u6ca1\u6709\u7ed1\u5b9a\u5bf9\u8c61\uff0c\u4ece\u800c\u5f15\u53d1\u9519\u8bef\u3002 \u8fd9\u6bb5\u4ee3\u7801\u672c\u610f\u53ea\u662f\u60f3\u8ba9\u5177\u6709\u5bf9\u8c61\u7684\u5168\u5c40\u53d8\u91cf gv \u548c\u5c40\u90e8\u53d8\u91cf lv \u53c2\u4e0e\u8fd0\u7b97\uff0c\u800c\u4e0d\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 gv \u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 lv \u3002\u4e3a\u4e86\u907f\u514d\u7c7b\u4f3c\u7684\u60c5\u51b5\u53d1\u751f\uff0c Python \u5f15\u5165\u4e86 global \u3001 nonlocal \u8bed\u53e5\u6765\u8bf4\u660e\u6240\u4fee\u9970\u7684 gv \u3001 lv \u5206\u522b\u6765\u81ea\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 \uff0c\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728 func \u548c inn_func \u5185\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u547d\u540d\u7a7a\u95f4\u5185 gv \u548c lv \u7684\u503c\uff1a gv = [ 'a' , 'global' , 'var' ] print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) def func ( v ): global gv print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) gv = [ 'gv' ] + gv lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): nonlocal lv print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) lv = lv + [ v ] gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 ['gv', 'is', 'a', 'global', 'var'] \u5982\u4e0a\uff0c\u5168\u5c40\u53d8\u91cf gv \u503c\u88ab\u51fd\u6570\u6539\u5199\u4e86\uff0c inn_func \u4fee\u6539\u7684\u4e5f\u786e\u5b9e\u662f\u7236\u51fd\u6570 lv \u7684\u503c \uff08\u4f9d\u636e\u5185\u5b58\u5730\u5740\u5224\u65ad\uff09\u3002 \u501f\u58f3 \u90a3\u4e48\u662f\u4e0d\u662f\u4e0d\u4f7f\u7528 global \u548c nonlocal \u5c31\u4e0d\u80fd\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u7684\u5462\uff1f\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv . insert ( 0 , 'gv' ) lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv . append ( v ) print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 ['gv', 'is', 'a', 'global', 'var'] \u53ef\u4ee5\u53d1\u73b0\uff0c\u6267\u884c\u7ed3\u679c\u540c\u4e0a\u9762\u5b8c\u5168\u4e00\u81f4\uff0c\u95ee\u9898\u81ea\u7136\u6765\u4e86\uff1a\u201c\u4e3a\u4ec0\u4e48\u4e0d\u7528 global nonlocal \u4e5f\u53ef\u4ee5\u6539\u5199\u5168\u5c40\u53d8\u91cf gv \u548c\u7236\u51fd\u6570\u53d8\u91cf lv \u7684\u503c\uff1f \u4e3a\u4e86\u770b\u6e05\u695a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u4e0a\u9762\u7684 gv.insert(0, 'gv') \u548c lv.append(v) \u6539\u5199\u4e3a gv[0:0] = ['gv'] \u548c lv[:] = [v] \uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv [ 0 : 0 ] = [ 'gv' ] lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv [:] = [ v ] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 ['gv', 'is', 'a', 'global', 'var'] \u6267\u884c\u7ed3\u679c\u5b8c\u5168\u4e00\u81f4\uff0c\u4e8b\u5b9e\u4e0a\u4e24\u8005\u4e4b\u95f4\u7684\u672c\u8d28\u4e5f\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 .insert() \u3001 .append() \u65b9\u6cd5\u5e76\u6ca1\u6709\u4fee\u6539 gv \u548c lv \uff0c\u800c\u662f\u4fee\u6539 gv \u548c lv \u7684\u5143\u7d20 gv[0:0] \u548c lv[:] \uff0c\u56e0\u6b64 gv \u548c lv \u5e76\u6ca1\u6709\u88ab\u52a0\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981 global \u548c nonlocal \u4fee\u9970\u5c31\u53ef\u4ee5\u76f4\u63a5\u6539\u5199\uff0c \u8fd9\u5c31\u662f\u201c\u501f\u58f3\u201d\u3002 \u53e6\u5916\uff0c\u4e5f\u662f\u501f\u52a9\u4e86list\u5bf9\u8c61\u7684mutable\u6027\u8d28\u3002 \u5728 nonlocal \u5c1a\u672a\u5f15\u5165 Python \u4e2d\uff0c\u6bd4\u5982 Python 2.x \u82e5\u8981\u5728\u5b50\u51fd\u6570\u4e2d\u6539\u5199\u7236\u51fd\u6570\u53d8\u91cf\u7684\u503c\u5c31\u5f97\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u3002","title":"3.3.\u95ed\u5305"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_1","text":"\u4ee5\u4e0b\u5f15\u7528\u81ea\u7ef4\u57fa\u767e\u79d1\u4e2d\u5173\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff1a \u5728 \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e2d\uff0c \u95ed\u5305 \uff08\u82f1\u8bed\uff1aClosure\uff09\uff0c\u53c8\u79f0 \u8bcd\u6cd5\u95ed\u5305 \uff08Lexical Closure\uff09\u6216 \u51fd\u6570\u95ed\u5305 \uff08function closures\uff09\uff0c\u662f\u5f15\u7528\u4e86\u81ea\u7531\u53d8\u91cf\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u88ab\u5f15\u7528\u7684\u81ea\u7531\u53d8\u91cf\u5c06\u548c\u8fd9\u4e2a\u51fd\u6570\u4e00\u540c\u5b58\u5728\uff0c\u5373\u4f7f\u5df2\u7ecf\u79bb\u5f00\u4e86\u521b\u9020\u5b83\u7684\u73af\u5883\u4e5f\u4e0d\u4f8b\u5916\u3002\u6240\u4ee5\uff0c\u6709\u53e6\u4e00\u79cd\u8bf4\u6cd5\u8ba4\u4e3a\u95ed\u5305\u662f\u7531\u51fd\u6570\u548c\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u73af\u5883\u7ec4\u5408\u800c\u6210\u7684\u5b9e\u4f53\u3002\u95ed\u5305\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u5f15\u7528\u73af\u5883\u548c\u76f8\u540c\u7684\u51fd\u6570\u7ec4\u5408\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002 \u95ed\u5305\u7684\u6982\u5ff5\u51fa\u73b0\u4e8e60\u5e74\u4ee3\uff0c\u6700\u65e9\u5b9e\u73b0\u95ed\u5305\u7684\u7a0b\u5e8f\u8bed\u8a00\u662f Scheme \u3002\u4e4b\u540e\uff0c\u95ed\u5305\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e8e \u51fd\u6570\u5f0f\u7f16\u7a0b \u8bed\u8a00\u5982 ML\u8bed\u8a00 \u548c LISP \u3002\u5f88\u591a\u547d\u4ee4\u5f0f\u7a0b\u5e8f\u8bed\u8a00\u4e5f\u5f00\u59cb\u652f\u6301\u95ed\u5305\u3002 \u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5728\u51fd\u6570\u4e2d\u53ef\u4ee5\uff08\u5d4c\u5957\uff09\u5b9a\u4e49\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u5185\u90e8\u7684\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u7684\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5219\u53ef\u80fd\u4ea7\u751f\u95ed\u5305\u3002\u8fd0\u884c\u65f6\uff0c\u4e00\u65e6\u5916\u90e8\u7684\u51fd\u6570\u88ab\u6267\u884c\uff0c\u4e00\u4e2a\u95ed\u5305\u5c31\u5f62\u6210\u4e86\uff0c\u95ed\u5305\u4e2d\u5305\u542b\u4e86\u5185\u90e8\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u6240\u9700\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\u7684\u5f15\u7528\u3002\u5176\u4e2d\u6240\u5f15\u7528\u7684\u53d8\u91cf\u79f0\u4f5c \u4e0a\u503c (upvalue)\u3002 \u7ef4\u57fa\u767e\u79d1\u4e2d\u5bf9\u4e8e\u95ed\u5305\u7684\u4ecb\u7ecd\uff0c\u5e94\u8be5\u8fd8\u662f\u6bd4\u8f83\u76f4\u89c2\u7684\u3002\u7b80\u800c\u8a00\u4e4b\uff1a\u5185\u5d4c\u51fd\u6570\u5f15\u7528\u4e86\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u5185\u5d4c\u51fd\u6570\u88ab\u6267\u884c\u65f6\uff0c\u5c31\u5f62\u6210\u4e00\u4e2a\u95ed\u5305\u3002\u4f8b\u5982\uff1a def outside ( a , b ): a = a b = b def inner (): y = a + b print ( locals ()) inner () # \u8c03\u7528outside\u51fd\u6570 inner\u88ab\u6267\u884c \u5f62\u6210\u95ed\u5305 outside ( 1 , 2 ) {'y': 3, 'a': 1, 'b': 2} inner() \u88ab\u6267\u884c\u65f6\uff0c\u521b\u5efa\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4f1a\u5305\u62ec\u5176\u5f15\u7528\u7684\u5916\u5c42\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u8fd9\u6837\u7684\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u88ab\u79f0\u4e3a\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff08enclosing namespace\uff09\u3002 \u6ce8\u610f\uff0c\u5728Python\u4e2d\uff0c\u5185\u5d4c\u51fd\u6570\u53ef\u4ee5\u88ab\u5916\u5c42\u51fd\u6570\u8fd4\u56de\uff0c\u4e5f\u5c31\u662fPython\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u95ed\u5305\u3002 \u7406\u89e3\u4ec0\u4e48\u662f\u95ed\u5305\u4e0d\u96be\uff0c\u4f46\u95ee\u9898\u5728\u4e8e\u95ed\u5305\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f","title":"\u95ed\u5305\u7684\u6982\u5ff5"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_2","text":"\u95ed\u5305\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u5b83\u53ef\u4ee5\u7ed1\u5b9a\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u751f\u6210\u95ed\u5305\u7684\u73af\u5883\uff08\u5916\u5c42\u51fd\u6570\uff09\u5df2\u7ecf\u91ca\u653e\uff0c\u95ed\u5305\u4ecd\u7136\u5b58\u5728\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u50cf\u7c7b\u751f\u6210\u5b9e\u4f8b\uff0c\u4e0d\u540c\u7684\u662f\u5916\u90e8\u51fd\u6570\u53ea\u5728\u8c03\u7528\u65f6\u751f\u6210\u547d\u540d\u7a7a\u95f4\uff0c\u6267\u884c\u5b8c\u6bd5\u540e\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u4f1a\u91ca\u653e\uff0c\u800c\u7c7b\u7684\u547d\u540d\u7a7a\u95f4\u5728\u8bfb\u5165\u5b9a\u4e49\u65f6\u521b\u5efa\uff0c\u4e00\u822cPython\u89e3\u91ca\u5668\u9000\u51fa\u624d\u91ca\u653e\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\u5bf9\u4e00\u4e9b\u9700\u8981\u91cd\u7528\u7684\u529f\u80fd\u4e14\u4e0d\u8db3\u4ee5\u5b9a\u4e49\u4e3a\u7c7b\u7684\u884c\u4e3a\uff0c\u4f7f\u7528\u95ed\u5305\u4f1a\u6bd4\u4f7f\u7528\u7c7b\u5360\u7528\u66f4\u5c11\u7684\u8d44\u6e90\uff0c\u4e14\u66f4\u8f7b\u5de7\u7075\u6d3b\u3002 \u4f8b\u5982\uff1a\u5047\u8bbe\u6211\u4eec\u4ec5\u4ec5\u60f3\u6253\u5370\u51fa\u5404\u7c7b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5206\u522b\u4ee5\u7c7b\u548c\u95ed\u5305\u6765\u5b9e\u73b0\uff1a # \u7c7b\u5b9e\u73b0 class Animal ( object ): def __init__ ( self , animal ): self . animal = animal def sound ( self , voice ): print ( self . animal , ':' , voice , \"...\" ) dog = Animal ( \"dog\" ) dog . sound ( \"wangwang\" ) dog . sound ( \"wowo\" ) dog : wangwang ... dog : wowo ... # \u95ed\u5305\u5b9e\u73b0 def voice ( animal ): def sound ( voc ): print ( animal , ':' , voc , \"...\" ) return sound dog = voice ( \"dog\" ) dog ( \"wangwang\" ) dog ( \"wowo\" ) dog : wangwang ... dog : wowo ... \u8f93\u51fa\u7ed3\u679c\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u663e\u7136\u7c7b\u7684\u5b9e\u73b0\u76f8\u5bf9\u7e41\u7410\uff0c\u4e14\u8fd9\u91cc\u53ea\u662f\u60f3\u8f93\u51fa\u4e00\u4e0b\u52a8\u7269\u7684\u53eb\u58f0\uff0c\u5b9a\u4e49\u4e00\u4e2a Animal \u7c7b\u672a\u514d\u5c0f\u9898\u5927\u505a\uff0c\u800c\u4e14 voice \u51fd\u6570\u5728\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5176\u547d\u540d\u7a7a\u95f4\u5c31\u5df2\u7ecf\u91ca\u653e\uff0c\u4f46 Animal \u7c7b\u53ca\u5176\u5b9e\u4f8b dog \u7684\u76f8\u5e94\u5c5e\u6027\u5374\u4e00\u76f4\u8d2e\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u800c\u8fd9\u79cd\u5185\u5b58\u5360\u7528\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u95ed\u5305\u8fd8\u6709\u5176\u4ed6\u4f5c\u7528\u3002\u95ed\u5305\u53ef\u4ee5\u51cf\u5c11\u51fd\u6570\u53c2\u6570\u7684\u6570\u76ee\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u5c01\u88c5\u3002\u8fd9\u5bf9\u5e76\u884c\u8ba1\u7b97\u4e5f\u975e\u5e38\u6709\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u6bcf\u53f0\u7535\u8111\u8d1f\u8d23\u4e00\u4e2a\u51fd\u6570\u7684\u8ba1\u7b97\u3002\u53e6\u5916\uff0c\u95ed\u5305\u5728Python\u4e2d\u6709\u4e00\u79cd\u91cd\u8981\u7684\u5e94\u7528\u2014\u2014\u88c5\u9970\u5668\u3002\u8fd9\u4e2a\u4f1a\u5728\u88c5\u9970\u5668\u7684\u6587\u7ae0\u8bb2\u8ff0\u3002","title":"\u95ed\u5305\u7684\u4f5c\u7528"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_3","text":"\u6765\u770b\u4e00\u4e2a\u5178\u578b\u7684 \u95ed\u5305 \u7ed3\u6784\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv = [ 'gv' ] + gv # UnboundLocalError:local variable 'gv' referenced before assignment lv = [] def inn_func (): lv = lv + [ v ] # UnboundLocalError:local variable 'lv' referenced before assignment gv . insert ( 1 , lv [ 0 ]) return gv return inn_func \u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u6ca1\u6709\u95ee\u9898\uff0c\u8d4b\u503c\u64cd\u4f5c\u4ece\u53f3\u5230\u5de6\u6267\u884c\uff0c\u5148\u4ece\u53f3\u8fb9\u7684 gv \u3001 lv \u5f00\u59cb\u6267\u884c\u4ee3\u7801\uff0c\u6b64\u65f6\u5c40\u90e8\u4f5c\u7528\u57df\u8fd8\u6ca1\u6709 gv \u53d8\u91cf\uff0c\u5c40\u90e8\u4f5c\u7528\u57df\u4e5f\u6ca1\u6709 lv \u53d8\u91cf\uff0cPython\u5e94\u8be5\u4f1a\u8bbf\u95ee\u5916\u5c42\u4f5c\u7528\u57df\u7684 gv \u3001 lv \u53d8\u91cf\u3002\u4f46\u5b9e\u9645\u8c03\u7528 func() \u51fd\u6570\u65f6\uff0c\u4e0a\u9762\u4e24\u5904\u5bf9 gv \u548c lv \u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u7684\u5730\u65b9\u90fd\u4f1a\u89e6\u53d1 UnboundLocalError \u3002 \u8fd9\u662f\u56e0\u4e3a Python \u5728\u6267\u884c\u51fd\u6570\u524d\uff0c\u4f1a\u9996\u5148\u751f\u6210\u5404\u5c42\u547d\u540d\u7a7a\u95f4\u548c\u4f5c\u7528\u57df \uff0c\u56e0\u6b64 Python \u5728\u6267\u884c\u8d4b\u503c\u524d\u4f1a\u5c06 func \u5185\u7684 'gv' 'lv' \u5199\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\uff1a dict_\u5c40\u90e8\u547d\u540d\u7a7a\u95f4.update({\u201cgv\u201d:['gv'] + gv}) dict_\u95ed\u5305\u547d\u540d\u7a7a\u95f4.update({\u201clv\u201d:['lv'] + lv}) \u5f53 Python \u6267\u884c\u8d4b\u503c\u65f6\uff0c\u6309\u7167LEGB\u641c\u7d22\u89c4\u5219\uff0c\u4f1a\u5148\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u3001\u95ed\u5305\u4f5c\u7528\u57df\u5185\u53d1\u73b0 gv \u548c lv \u6807\u8bc6\u7b26\uff0c\u4f46 gv \u548c lv \u5728\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u5185\u90fd\u6ca1\u6709\u7ed1\u5b9a\u5bf9\u8c61\uff0c\u4ece\u800c\u5f15\u53d1\u9519\u8bef\u3002 \u8fd9\u6bb5\u4ee3\u7801\u672c\u610f\u53ea\u662f\u60f3\u8ba9\u5177\u6709\u5bf9\u8c61\u7684\u5168\u5c40\u53d8\u91cf gv \u548c\u5c40\u90e8\u53d8\u91cf lv \u53c2\u4e0e\u8fd0\u7b97\uff0c\u800c\u4e0d\u662f\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 gv \u548c\u95ed\u5305\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 lv \u3002\u4e3a\u4e86\u907f\u514d\u7c7b\u4f3c\u7684\u60c5\u51b5\u53d1\u751f\uff0c Python \u5f15\u5165\u4e86 global \u3001 nonlocal \u8bed\u53e5\u6765\u8bf4\u660e\u6240\u4fee\u9970\u7684 gv \u3001 lv \u5206\u522b\u6765\u81ea\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u548c\u5c40\u90e8\u547d\u540d\u7a7a\u95f4 \uff0c\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728 func \u548c inn_func \u5185\u76f4\u63a5\u6539\u5199\u4e0a\u5c42\u547d\u540d\u7a7a\u95f4\u5185 gv \u548c lv \u7684\u503c\uff1a gv = [ 'a' , 'global' , 'var' ] print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) def func ( v ): global gv print ( \"gv\u7684\u5185\u5b58\u5730\u5740\" , id ( gv )) gv = [ 'gv' ] + gv lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): nonlocal lv print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) lv = lv + [ v ] gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 gv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 lv\u7684\u5185\u5b58\u5730\u5740 1484188467336 ['gv', 'is', 'a', 'global', 'var'] \u5982\u4e0a\uff0c\u5168\u5c40\u53d8\u91cf gv \u503c\u88ab\u51fd\u6570\u6539\u5199\u4e86\uff0c inn_func \u4fee\u6539\u7684\u4e5f\u786e\u5b9e\u662f\u7236\u51fd\u6570 lv \u7684\u503c \uff08\u4f9d\u636e\u5185\u5b58\u5730\u5740\u5224\u65ad\uff09\u3002","title":"\u95ed\u5305\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%9F%BA%E7%A1%80/3.3.%E9%97%AD%E5%8C%85.html#_4","text":"\u90a3\u4e48\u662f\u4e0d\u662f\u4e0d\u4f7f\u7528 global \u548c nonlocal \u5c31\u4e0d\u80fd\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u7684\u5462\uff1f\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv . insert ( 0 , 'gv' ) lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv . append ( v ) print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 lv\u7684\u5185\u5b58\u5730\u5740 1484150018632 ['gv', 'is', 'a', 'global', 'var'] \u53ef\u4ee5\u53d1\u73b0\uff0c\u6267\u884c\u7ed3\u679c\u540c\u4e0a\u9762\u5b8c\u5168\u4e00\u81f4\uff0c\u95ee\u9898\u81ea\u7136\u6765\u4e86\uff1a\u201c\u4e3a\u4ec0\u4e48\u4e0d\u7528 global nonlocal \u4e5f\u53ef\u4ee5\u6539\u5199\u5168\u5c40\u53d8\u91cf gv \u548c\u7236\u51fd\u6570\u53d8\u91cf lv \u7684\u503c\uff1f \u4e3a\u4e86\u770b\u6e05\u695a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u4e0a\u9762\u7684 gv.insert(0, 'gv') \u548c lv.append(v) \u6539\u5199\u4e3a gv[0:0] = ['gv'] \u548c lv[:] = [v] \uff1a gv = [ 'a' , 'global' , 'var' ] def func ( v ): gv [ 0 : 0 ] = [ 'gv' ] lv = [] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) def inn_func (): lv [:] = [ v ] print ( \"lv\u7684\u5185\u5b58\u5730\u5740\" , id ( lv )) gv . insert ( 1 , lv [ 0 ]) return gv return inn_func a = func ( 'is' ) a () print ( gv ) lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 lv\u7684\u5185\u5b58\u5730\u5740 1484192557512 ['gv', 'is', 'a', 'global', 'var'] \u6267\u884c\u7ed3\u679c\u5b8c\u5168\u4e00\u81f4\uff0c\u4e8b\u5b9e\u4e0a\u4e24\u8005\u4e4b\u95f4\u7684\u672c\u8d28\u4e5f\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 .insert() \u3001 .append() \u65b9\u6cd5\u5e76\u6ca1\u6709\u4fee\u6539 gv \u548c lv \uff0c\u800c\u662f\u4fee\u6539 gv \u548c lv \u7684\u5143\u7d20 gv[0:0] \u548c lv[:] \uff0c\u56e0\u6b64 gv \u548c lv \u5e76\u6ca1\u6709\u88ab\u52a0\u5165\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981 global \u548c nonlocal \u4fee\u9970\u5c31\u53ef\u4ee5\u76f4\u63a5\u6539\u5199\uff0c \u8fd9\u5c31\u662f\u201c\u501f\u58f3\u201d\u3002 \u53e6\u5916\uff0c\u4e5f\u662f\u501f\u52a9\u4e86list\u5bf9\u8c61\u7684mutable\u6027\u8d28\u3002 \u5728 nonlocal \u5c1a\u672a\u5f15\u5165 Python \u4e2d\uff0c\u6bd4\u5982 Python 2.x \u82e5\u8981\u5728\u5b50\u51fd\u6570\u4e2d\u6539\u5199\u7236\u51fd\u6570\u53d8\u91cf\u7684\u503c\u5c31\u5f97\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u3002","title":"\u501f\u58f3"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html","text":"\u88c5\u9970\u5668\u7b80\u8ff0 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u4e00\u4e2a\u51fd\u6570\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u90a3\u4e48\u6709\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u4fee\u6539\u539f\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u4f46\u8fd9\u603b\u505a\u6cd5\u6709\u65f6\u672a\u514d\u592a\u7e41\u7410\u3002\u5728python\u4e2d\uff0c\u76f4\u63a5\u7ed9\u539f\u51fd\u6570\u5957\u4e0a\u88c5\u9970\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a def hello (): return 'hello world' # hello\u51fd\u6570\u7684\u540d\u5b57 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a hello \u73b0\u5728\u6211\u4eec\u60f3\u589e\u5f3a hello() \u51fd\u6570\u7684\u529f\u80fd\uff0c\u5e0c\u671b\u7ed9\u8fd4\u56de\u52a0\u4e0a HTML \u6807\u7b7e\uff0c\u6bd4\u5982 <i>hello world</i> \uff0c\u4f46\u6709\u4e00\u4e2a\u8981\u6c42\uff0c\u4e0d\u6539\u53d8\u539f\u6765 hello() \u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped \u8981\u6ce8\u610f\u7684\u662f\uff0cmakeitalic\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662fwrapped\u51fd\u6570\u3002 # \u7ed9hello\u51fd\u6570\u5957\u4e0amakeitalic\u51fd\u6570 # makeitalic\u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570 # \u5b9e\u9645\u4e0a\u6b64\u65f6hello\u53d8\u6210\u4e86wrapped\u51fd\u6570 hello = makeitalic ( hello ) \u5c06 hello \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 makeitalic \u51fd\u6570\uff0c makeitalic \u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570\uff0c\u540d\u5b57 hello \u4e0e wrapped \u51fd\u6570\u7ed1\u5b9a\u3002\u6b64\u65f6\u540d\u5b57 hello \u4ee3\u8868\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u5c31\u662f wrapped \u51fd\u6570\u6709\u4e86\u65b0\u7684\u540d\u5b57\u2014\u2014 hello \u3002 # \u53ef\u4ee5\u770b\u51fahello\u51fd\u6570\u7684\u540d\u5b57\u53d8\u4e86 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a wrapped \u603b\u7ed3\u4e00\u4e0b\uff1a\u4e3a\u4e86\u589e\u5f3a\u539f\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u539f\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c makeitalic \u5c31\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff08decorator\uff09\uff0c\u5b83\u300e\u88c5\u9970\u300f\u4e86\u51fd\u6570 hello \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u5176\u8d4b\u7ed9 hello \u3002 \u50cf\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u51fd\u6570\uff08\u6216\u7c7b\uff09\u529f\u80fd\u7684\u51fd\u6570\u5c31\u662f\u88c5\u9970\u5668\u3002\u672c\u8d28\u4e0a\uff0c\u5b83\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u4ee5\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 hello \uff09\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u88c5\u540e\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 wrapped \uff09\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff08 hello \uff09\u3002 \u88c5\u9970\u5668\u7684\u4e00\u822c\u4f7f\u7528\u5f62\u5f0f \u5728python\u4e2d\uff0c\u88c5\u9970\u5668\u4e00\u822c\u8fd9\u6837\u7528\uff1a @decorator def func (): pass \u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u5f62\u5f0f \uff1a def func (): pass func = decorator ( func ) \u88c5\u9970\u5668\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\uff0c\u79bb\u51fd\u6570\u5b9a\u4e49\u6700\u8fd1\u7684\u88c5\u9970\u5668\u5148\u88ab\u8c03\u7528\uff0c\u6bd4\u5982 @decorator_one @decorator_two def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator_one ( decorator_two ( func )) \u88c5\u9970\u5668\u8fd8\u53ef\u4ee5\u5e26\u53c2\u6570\uff0c\u6bd4\u5982\uff1a @decorator ( arg1 , arg2 ) def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator ( arg1 , arg2 )( func ) \u4f8b\u5b50\uff1a def makeitalic2 ( func ): return \"<i>\" + func () + \"</i>\" @makeitalic def hello_2 (): return 'hello world' def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped hello_2 () ' <i> hello world </i> ' \u5982\u679c\u8fd4\u56de\u7684\u4e0d\u662f\u51fd\u6570\u5c31\u4f1a\u8fd9\u6837\uff1a @makeitalic def hello_3 (): return 'hello world' def makeitalic ( func ): return \"<i>\" + func () + \"</i>\" hello_3 <function __main__.makeitalic.<locals>.wrapped()> \u5bf9\u5e26\u53c2\u6570\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970 \u524d\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u88ab\u88c5\u9970\u7684\u51fd\u6570 hello() \u662f\u6ca1\u6709\u5e26\u53c2\u6570\u7684\uff0c\u6211\u4eec\u770b\u770b\u88ab\u88c5\u9970\u51fd\u6570\u5e26\u53c2\u6570\u7684\u60c5\u51b5\u3002\u5bf9\u524d\u9762\u4f8b\u5b50\u4e2d\u7684 hello() \u51fd\u6570\u8fdb\u884c\u6539\u5199\uff0c\u4f7f\u5176\u5e26\u53c2\u6570\uff0c\u5982\u4e0b\uff1a def makeitalic ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<i>' + ret + '</i>' return wrapped @makeitalic def hello ( name ): return 'hello %s ' % name @makeitalic def hello2 ( name1 , name2 ): return 'hello %s , %s ' % ( name1 , name2 ) hello ( 'Jack' ) hello2 ( 'Jack' , \"Lusis\" ) \u7531\u4e8e\u51fd\u6570 hello \u5e26\u53c2\u6570\uff0c\u56e0\u6b64\u5185\u5d4c\u5305\u88c5\u51fd\u6570 wrapped \u9700\u8981\u6539\u53d8\u3002 \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u589e\u5f3a\u4e86\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u7ed9\u5b83\u7684\u8fd4\u56de\u52a0\u4e0a\u4e86\u6807\u7b7e <i>...</i> \uff0c\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u6539\u7528\u6807\u7b7e <b>...</b> \u6216 <p>...</p> \u3002\u662f\u4e0d\u662f\u8981\u50cf\u524d\u9762\u4e00\u6837\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f3c makeitalic \u7684\u88c5\u9970\u5668\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bd4\u5982\uff1a def wrap_in_tag ( tag ): def decorator ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<' + tag + '>' + ret + '</' + tag + '>' return wrapped return decorator \u751f\u6210\u60f3\u8981\u7684\u88c5\u9970\u5668\u4e86\uff1a makebold = wrap_in_tag ( 'b' ) # \u6839\u636e 'b' \u8fd4\u56de makebold \u751f\u6210\u5668 @makebold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) ' <b> hello world </b> ' \u4e0a\u9762\u7684\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u5199\u5f97\u66f4\u52a0\u7b80\u6d01\uff1a @wrap_in_tag ( 'b' ) def hello ( name ): return 'hello %s ' % name \u591a\u4e2a\u88c5\u9970\u5668 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u591a\u4e2a\u88c5\u9970\u5668\u7684\u4f8b\u5b50\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u4e0d\u4f7f\u7528\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\u3002 def makebold ( func ): def wrapped (): return '<b>' + func () + '</b>' return wrapped def makeitalic ( func ): def wrapped (): return '<i>' + func () + '</i>' return wrapped @makebold @makeitalic def hello (): return 'hello world' \u4e0a\u9762\u5b9a\u4e49\u4e86\u4e24\u4e2a\u88c5\u9970\u5668\uff0c\u5bf9 hello \u8fdb\u884c\u88c5\u9970\uff0c\u4e0a\u9762\u7684\u6700\u540e\u51e0\u884c\u4ee3\u7801\u76f8\u5f53\u4e8e\uff1a def hello (): return 'hello world' hello = makebold ( makeitalic ( hello )) \u8c03\u7528\u51fd\u6570 hello\uff1a hello () ' <b><i> hello world </i></b> ' \u57fa\u4e8e\u7c7b\u7684\u88c5\u9970\u5668 \u524d\u9762\u7684\u88c5\u9970\u5668\u90fd\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u7c7b\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a class Bold ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self , * args , ** kwargs ): return '<b>' + self . func ( * args , ** kwargs ) + '</b>' @Bold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) \u53ef\u4ee5\u770b\u5230\uff0c\u7c7b Bold \u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a __init__() \uff1a\u5b83\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 __call__() \uff1a\u8ba9\u7c7b\u5bf9\u8c61\u53ef\u8c03\u7528\uff0c\u5c31\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u5728\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\u88ab\u8c03\u7528 \u8fd8\u53ef\u4ee5\u8ba9\u7c7b\u88c5\u9970\u5668\u5e26\u53c2\u6570\uff1a class Tag ( object ): def __init__ ( self , tag ): self . tag = tag def __call__ ( self , func ): def wrapped ( * args , ** kwargs ): return \"< {tag} > {res} </ {tag} >\" . format ( res = func ( * args , ** kwargs ), tag = self . tag ) return wrapped @Tag ( 'b' ) def hello ( name ): return 'hello %s ' % name \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7c7b\u88c5\u9970\u5668\u6709\u53c2\u6570\uff0c \u5219 __init__ \u63a5\u6536\u53c2\u6570\uff0c\u800c __call__ \u63a5\u6536 func\u3002 \u88c5\u9970\u5668\u7684\u526f\u4f5c\u7528 \u524d\u9762\u63d0\u5230\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u6709\u4e00\u4e2a\u7455\u75b5\uff0c\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u540d\u79f0\u4e86\uff0c\u56de\u5230\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' \u51fd\u6570 hello \u88ab makeitalic \u88c5\u9970\u540e\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u6539\u53d8\u4e86\uff1a hello . __name__ 'wrapped' \u4e3a\u4e86\u6d88\u9664\u8fd9\u6837\u7684\u526f\u4f5c\u7528\uff0cPython \u4e2d\u7684 functools \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a wraps \u7684\u88c5\u9970\u5668\uff1a from functools import wraps def makeitalic ( func ): @wraps ( func ) # \u52a0\u4e0a wraps \u88c5\u9970\u5668 def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' hello . __name__ 'hello' \u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u5c31\u662f\u95ed\u5305\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u4f46\u5b83\u6bd4\u8f83\u7279\u522b\uff0c\u63a5\u6536\u88ab\u88c5\u9970\u51fd\u6570\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u8d4b\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff0c\u95ed\u5305\u5219\u6ca1\u8fd9\u79cd\u9650\u5236\u3002","title":"3.4.\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_1","text":"\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u4e00\u4e2a\u51fd\u6570\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u90a3\u4e48\u6709\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u4fee\u6539\u539f\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u4f46\u8fd9\u603b\u505a\u6cd5\u6709\u65f6\u672a\u514d\u592a\u7e41\u7410\u3002\u5728python\u4e2d\uff0c\u76f4\u63a5\u7ed9\u539f\u51fd\u6570\u5957\u4e0a\u88c5\u9970\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a def hello (): return 'hello world' # hello\u51fd\u6570\u7684\u540d\u5b57 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a hello \u73b0\u5728\u6211\u4eec\u60f3\u589e\u5f3a hello() \u51fd\u6570\u7684\u529f\u80fd\uff0c\u5e0c\u671b\u7ed9\u8fd4\u56de\u52a0\u4e0a HTML \u6807\u7b7e\uff0c\u6bd4\u5982 <i>hello world</i> \uff0c\u4f46\u6709\u4e00\u4e2a\u8981\u6c42\uff0c\u4e0d\u6539\u53d8\u539f\u6765 hello() \u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped \u8981\u6ce8\u610f\u7684\u662f\uff0cmakeitalic\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662fwrapped\u51fd\u6570\u3002 # \u7ed9hello\u51fd\u6570\u5957\u4e0amakeitalic\u51fd\u6570 # makeitalic\u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570 # \u5b9e\u9645\u4e0a\u6b64\u65f6hello\u53d8\u6210\u4e86wrapped\u51fd\u6570 hello = makeitalic ( hello ) \u5c06 hello \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 makeitalic \u51fd\u6570\uff0c makeitalic \u51fd\u6570\u8fd4\u56dewrapped\u51fd\u6570\uff0c\u540d\u5b57 hello \u4e0e wrapped \u51fd\u6570\u7ed1\u5b9a\u3002\u6b64\u65f6\u540d\u5b57 hello \u4ee3\u8868\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u5c31\u662f wrapped \u51fd\u6570\u6709\u4e86\u65b0\u7684\u540d\u5b57\u2014\u2014 hello \u3002 # \u53ef\u4ee5\u770b\u51fahello\u51fd\u6570\u7684\u540d\u5b57\u53d8\u4e86 print ( \"hello\u51fd\u6570\u7684\u540d\u5b57\uff1a\" , hello . __name__ ) hello\u51fd\u6570\u7684\u540d\u5b57\uff1a wrapped \u603b\u7ed3\u4e00\u4e0b\uff1a\u4e3a\u4e86\u589e\u5f3a\u539f\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u539f\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c makeitalic \u5c31\u662f\u4e00\u4e2a\u88c5\u9970\u5668\uff08decorator\uff09\uff0c\u5b83\u300e\u88c5\u9970\u300f\u4e86\u51fd\u6570 hello \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u5176\u8d4b\u7ed9 hello \u3002 \u50cf\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u51fd\u6570\uff08\u6216\u7c7b\uff09\u529f\u80fd\u7684\u51fd\u6570\u5c31\u662f\u88c5\u9970\u5668\u3002\u672c\u8d28\u4e0a\uff0c\u5b83\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u4ee5\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 hello \uff09\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u88c5\u540e\u7684\u51fd\u6570\uff08\u6bd4\u5982\u4e0a\u9762\u7684 wrapped \uff09\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff08 hello \uff09\u3002","title":"\u88c5\u9970\u5668\u7b80\u8ff0"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_2","text":"\u5728python\u4e2d\uff0c\u88c5\u9970\u5668\u4e00\u822c\u8fd9\u6837\u7528\uff1a @decorator def func (): pass \u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u5f62\u5f0f \uff1a def func (): pass func = decorator ( func ) \u88c5\u9970\u5668\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\uff0c\u79bb\u51fd\u6570\u5b9a\u4e49\u6700\u8fd1\u7684\u88c5\u9970\u5668\u5148\u88ab\u8c03\u7528\uff0c\u6bd4\u5982 @decorator_one @decorator_two def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator_one ( decorator_two ( func )) \u88c5\u9970\u5668\u8fd8\u53ef\u4ee5\u5e26\u53c2\u6570\uff0c\u6bd4\u5982\uff1a @decorator ( arg1 , arg2 ) def func (): pass \u7b49\u4ef7\u4e8e\uff1a def func (): pass func = decorator ( arg1 , arg2 )( func ) \u4f8b\u5b50\uff1a def makeitalic2 ( func ): return \"<i>\" + func () + \"</i>\" @makeitalic def hello_2 (): return 'hello world' def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped hello_2 () ' <i> hello world </i> ' \u5982\u679c\u8fd4\u56de\u7684\u4e0d\u662f\u51fd\u6570\u5c31\u4f1a\u8fd9\u6837\uff1a @makeitalic def hello_3 (): return 'hello world' def makeitalic ( func ): return \"<i>\" + func () + \"</i>\" hello_3 <function __main__.makeitalic.<locals>.wrapped()>","title":"\u88c5\u9970\u5668\u7684\u4e00\u822c\u4f7f\u7528\u5f62\u5f0f"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_3","text":"\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u88ab\u88c5\u9970\u7684\u51fd\u6570 hello() \u662f\u6ca1\u6709\u5e26\u53c2\u6570\u7684\uff0c\u6211\u4eec\u770b\u770b\u88ab\u88c5\u9970\u51fd\u6570\u5e26\u53c2\u6570\u7684\u60c5\u51b5\u3002\u5bf9\u524d\u9762\u4f8b\u5b50\u4e2d\u7684 hello() \u51fd\u6570\u8fdb\u884c\u6539\u5199\uff0c\u4f7f\u5176\u5e26\u53c2\u6570\uff0c\u5982\u4e0b\uff1a def makeitalic ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<i>' + ret + '</i>' return wrapped @makeitalic def hello ( name ): return 'hello %s ' % name @makeitalic def hello2 ( name1 , name2 ): return 'hello %s , %s ' % ( name1 , name2 ) hello ( 'Jack' ) hello2 ( 'Jack' , \"Lusis\" ) \u7531\u4e8e\u51fd\u6570 hello \u5e26\u53c2\u6570\uff0c\u56e0\u6b64\u5185\u5d4c\u5305\u88c5\u51fd\u6570 wrapped \u9700\u8981\u6539\u53d8\u3002","title":"\u5bf9\u5e26\u53c2\u6570\u7684\u51fd\u6570\u8fdb\u884c\u88c5\u9970"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_4","text":"\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u589e\u5f3a\u4e86\u51fd\u6570 hello \u7684\u529f\u80fd\uff0c\u7ed9\u5b83\u7684\u8fd4\u56de\u52a0\u4e0a\u4e86\u6807\u7b7e <i>...</i> \uff0c\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u6539\u7528\u6807\u7b7e <b>...</b> \u6216 <p>...</p> \u3002\u662f\u4e0d\u662f\u8981\u50cf\u524d\u9762\u4e00\u6837\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f3c makeitalic \u7684\u88c5\u9970\u5668\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u6bd4\u5982\uff1a def wrap_in_tag ( tag ): def decorator ( func ): def wrapped ( * args , ** kwargs ): ret = func ( * args , ** kwargs ) return '<' + tag + '>' + ret + '</' + tag + '>' return wrapped return decorator \u751f\u6210\u60f3\u8981\u7684\u88c5\u9970\u5668\u4e86\uff1a makebold = wrap_in_tag ( 'b' ) # \u6839\u636e 'b' \u8fd4\u56de makebold \u751f\u6210\u5668 @makebold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) ' <b> hello world </b> ' \u4e0a\u9762\u7684\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u5199\u5f97\u66f4\u52a0\u7b80\u6d01\uff1a @wrap_in_tag ( 'b' ) def hello ( name ): return 'hello %s ' % name","title":"\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_5","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u591a\u4e2a\u88c5\u9970\u5668\u7684\u4f8b\u5b50\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u4e0d\u4f7f\u7528\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\u3002 def makebold ( func ): def wrapped (): return '<b>' + func () + '</b>' return wrapped def makeitalic ( func ): def wrapped (): return '<i>' + func () + '</i>' return wrapped @makebold @makeitalic def hello (): return 'hello world' \u4e0a\u9762\u5b9a\u4e49\u4e86\u4e24\u4e2a\u88c5\u9970\u5668\uff0c\u5bf9 hello \u8fdb\u884c\u88c5\u9970\uff0c\u4e0a\u9762\u7684\u6700\u540e\u51e0\u884c\u4ee3\u7801\u76f8\u5f53\u4e8e\uff1a def hello (): return 'hello world' hello = makebold ( makeitalic ( hello )) \u8c03\u7528\u51fd\u6570 hello\uff1a hello () ' <b><i> hello world </i></b> '","title":"\u591a\u4e2a\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_6","text":"\u524d\u9762\u7684\u88c5\u9970\u5668\u90fd\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u7c7b\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a class Bold ( object ): def __init__ ( self , func ): self . func = func def __call__ ( self , * args , ** kwargs ): return '<b>' + self . func ( * args , ** kwargs ) + '</b>' @Bold def hello ( name ): return 'hello %s ' % name hello ( 'world' ) \u53ef\u4ee5\u770b\u5230\uff0c\u7c7b Bold \u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a __init__() \uff1a\u5b83\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570 __call__() \uff1a\u8ba9\u7c7b\u5bf9\u8c61\u53ef\u8c03\u7528\uff0c\u5c31\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u5728\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570\u65f6\u88ab\u8c03\u7528 \u8fd8\u53ef\u4ee5\u8ba9\u7c7b\u88c5\u9970\u5668\u5e26\u53c2\u6570\uff1a class Tag ( object ): def __init__ ( self , tag ): self . tag = tag def __call__ ( self , func ): def wrapped ( * args , ** kwargs ): return \"< {tag} > {res} </ {tag} >\" . format ( res = func ( * args , ** kwargs ), tag = self . tag ) return wrapped @Tag ( 'b' ) def hello ( name ): return 'hello %s ' % name \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u7c7b\u88c5\u9970\u5668\u6709\u53c2\u6570\uff0c \u5219 __init__ \u63a5\u6536\u53c2\u6570\uff0c\u800c __call__ \u63a5\u6536 func\u3002","title":"\u57fa\u4e8e\u7c7b\u7684\u88c5\u9970\u5668"},{"location":"Python%E5%9F%BA%E7%A1%80/3.4.%E8%A3%85%E9%A5%B0%E5%99%A8.html#_7","text":"\u524d\u9762\u63d0\u5230\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u6709\u4e00\u4e2a\u7455\u75b5\uff0c\u5c31\u662f\u88ab\u88c5\u9970\u7684\u51fd\u6570\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u540d\u79f0\u4e86\uff0c\u56de\u5230\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\uff1a def makeitalic ( func ): def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' \u51fd\u6570 hello \u88ab makeitalic \u88c5\u9970\u540e\uff0c\u5b83\u7684\u51fd\u6570\u540d\u79f0\u5df2\u7ecf\u6539\u53d8\u4e86\uff1a hello . __name__ 'wrapped' \u4e3a\u4e86\u6d88\u9664\u8fd9\u6837\u7684\u526f\u4f5c\u7528\uff0cPython \u4e2d\u7684 functools \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a wraps \u7684\u88c5\u9970\u5668\uff1a from functools import wraps def makeitalic ( func ): @wraps ( func ) # \u52a0\u4e0a wraps \u88c5\u9970\u5668 def wrapped (): return \"<i>\" + func () + \"</i>\" return wrapped @makeitalic def hello (): return 'hello world' hello . __name__ 'hello' \u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u5c31\u662f\u95ed\u5305\u7684\u4e00\u79cd\u5e94\u7528\uff0c\u4f46\u5b83\u6bd4\u8f83\u7279\u522b\uff0c\u63a5\u6536\u88ab\u88c5\u9970\u51fd\u6570\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u8d4b\u7ed9\u88ab\u88c5\u9970\u51fd\u6570\uff0c\u95ed\u5305\u5219\u6ca1\u8fd9\u79cd\u9650\u5236\u3002","title":"\u88c5\u9970\u5668\u7684\u526f\u4f5c\u7528"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) \u7c7b\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ec4\u5408\u6570\u636e\u548c\u529f\u80fd\u7684\u65b9\u6cd5\u3002\u7c7b\u901a\u5e38\u662f\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210\u7684\u96c6\u5408\uff1a \u51fd\u6570\uff08\u79f0\u4e3a\u65b9\u6cd5\uff0cmethod\uff09\uff0c\u5305\u62ec\u7279\u6b8a\u65b9\u6cd5\u3001\u79c1\u6709\u65b9\u6cd5\u3001\u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5 \u53d8\u91cf\uff08\u79f0\u4e3a\u7c7b\u53d8\u91cf\uff0cclass variable\uff09\uff0c \u7c7b\u53d8\u91cf \u662f\u5728\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u7684\u503c\uff0c\u4e0d\u662f\u5355\u72ec\u5206\u914d\u7ed9\u6bcf\u4e2a\u5b9e\u4f8b\u7684 \u8ba1\u7b97\u51fa\u7684\u5c5e\u6027\uff08\u79f0\u4e3a\u7279\u6027\uff0cproperty\uff09 \u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u610f\u5473\u7740\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4ece\u800c\u5141\u8bb8\u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u65b0\u5b9e\u4f8b\u3002\u6bcf\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u62e5\u6709\u4fdd\u5b58\u81ea\u5df1\u72b6\u6001\u7684\u5c5e\u6027\u3002\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u548c\u7c7b\u578b\u7684\u6570\u636e\u3002\u548c\u6a21\u5757\u4e00\u6837\uff0c\u7c7b\u4e5f\u62e5\u6709 Python \u5929\u7136\u7684\u52a8\u6001\u7279\u6027\uff1a\u5b83\u4eec\u5728\u8fd0\u884c\u65f6\u521b\u5efa\uff0c\u53ef\u4ee5\u5728\u521b\u5efa\u540e\u4fee\u6539\u3002 \u5728Python\u4e2d\uff0c\u7ea6\u5b9a\u4f7f\u7528\u5355\u6570\u5355\u8bcd\u8868\u793a\u7c7b\u540d\uff0c\u5176\u9996\u5b57\u6bcd\u5927\u5199\u3002 Python \u7684\u7c7b\u63d0\u4f9b\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u6240\u6709\u6807\u51c6\u7279\u6027\uff1a \u591a\u6001\uff1a\u53ef\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u800c\u8fd9\u4e9b\u64cd\u4f5c\u5c31\u50cf\u201c\u88ab\u65bd\u4e86\u9b54\u6cd5\u201d\u4e00\u6837\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\u3002 \u5c01\u88c5\uff1a\u5bf9\u5916\u90e8\u9690\u85cf\u6709\u5173\u5bf9\u8c61\u5de5\u4f5c\u539f\u7406\u7684\u7ec6\u8282\u3002 \u7ee7\u627f\uff1a\u53ef\u57fa\u4e8e\u901a\u7528\u7c7b\u521b\u5efa\u51fa\u4e13\u7528\u7c7b\u3002\u5141\u8bb8\u6d3e\u751f\u7c7b\u7ee7\u627f\u591a\u4e2a\u57fa\u7c7b\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u5b83\u57fa\u7c7b\u7684\u4efb\u4f55\u65b9\u6cd5\uff0c\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u57fa\u7c7b\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u7684\u65b9\u6cd5\u3002 \u7c7b\u5b9e\u4f8b \u7c7b\u7684\u5b9e\u4f8b\u662f\u4ee5\u51fd\u6570\u5f62\u5f0f\u8c03\u7528\u7c7b\u5bf9\u8c61\u6765\u521b\u5efa\u7684\u3002 __new__ \u65b9\u6cd5\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u7136\u540e\u5c06\u8be5\u5b9e\u4f8b\u4f20\u9012\u7ed9\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002 __init__() \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u62ec\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b self \u548c\u5728\u8c03\u7528\u7c7b\u5bf9\u8c61\u65f6\u63d0\u4f9b\u7684\u53c2\u6570\u3002 \u5728 __init__() \u5185\uff0c\u901a\u8fc7\u5c06\u5c5e\u6027\u5206\u914d\u7ed9 self \u6765\u5c06\u5176\u4fdd\u5b58\u5230\u5b9e\u4f8b\u4e2d\u3002\u4f8b\u5982\uff0c self.name = name \u8868\u793a\u5c06 name \u5c5e\u6027\u4fdd\u5b58\u5728\u5b9e\u4f8b\u4e2d\u3002\u5176\u4e2d\uff0c\u70b9 . \u8fd0\u7b97\u7b26\u7528\u4e8e\u5c5e\u6027\u7ed1\u5b9a\u3002\u5728\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u8fd4\u56de\u5230\u7528\u6237\u4e4b\u540e\uff0c\u4f7f\u7528\u70b9 . \u8fd0\u7b97\u7b26\u5373\u53ef\u8bbf\u95ee\u8fd9\u4e9b\u5c5e\u6027\u4ee5\u53ca\u7c7b\u7684\u5c5e\u6027\u3002 \u8bbf\u95ee\u5c5e\u6027\u65f6\uff0c\u7ed3\u679c\u503c\u53ef\u80fd\u6765\u81ea\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u3002\u53ef\u80fd\u6765\u81ea\u5b9e\u4f8b\u72ec\u6709\u7684\u5c5e\u6027\uff0c\u4e5f\u53ef\u80fd\u6765\u81ea\u7c7b\u7684\u5c5e\u6027\u3002\u8bbf\u95ee\u5c5e\u6027\u65f6\uff0cPython \u9996\u5148\u4f1a\u68c0\u67e5\u5b9e\u4f8b\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u8be5\u5c5e\u6027\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u5219\u4f1a\u5bf9\u5b9e\u4f8b\u7684\u7c7b\u8fdb\u884c\u641c\u7d22\u3002\u8fd9\u662f\u7c7b\u4e0e\u5176\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u5176\u5c5e\u6027\u7684\u5e95\u5c42\u673a\u5236\u3002 \u7ee7\u627f \u7ee7\u627f\u662f\u4e00\u79cd\u521b\u5efa\u65b0\u7c7b\u7684\u673a\u5236\uff0c\u76ee\u7684\u662f\u4f7f\u7528\u6216\u4fee\u6539\u73b0\u6709\u7c7b\u7684\u884c\u4e3a\u3002\u539f\u59cb\u7c7b\u79f0\u4e3a \u57fa\u7c7b \u6216 \u8d85\u7c7b \u3002\u65b0\u7c7b\u79f0\u4e3a \u6d3e\u751f\u7c7b \u6216 \u5b50\u7c7b \u3002 \u901a\u8fc7\u7ee7\u627f\u521b\u5efa\u7c7b\u65f6\uff0c\u6240\u521b\u5efa\u7684\u7c7b\u5c06\u201c\u7ee7\u627f\u201d\u5176\u57fa\u7c7b\u5b9a\u4e49\u7684\u5c5e\u6027\u3002==\u4f46\u662f\uff0c==\u6d3e\u751f\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4efb\u4f55\u8fd9\u4e9b\u5c5e\u6027\u5e76\u6dfb\u52a0\u81ea\u5df1\u7684\u65b0\u5c5e\u6027\u3002 \u5728class\u8bed\u53e5\u4e2d\u7528\u4ee5\u9017\u53f7\u5206\u9694\u7684\u57fa\u7c7b\u540d\u79f0\u5217\u8868\u6765\u6307\u5b9a\u7ee7\u627f\u3002\u5982\u679c\u6ca1\u6709\u6709\u6548\u7684\u57fa\u7c7b\uff0c\u7c7b\u5c06\u7ee7\u627fobject\u3002object\u662f\u6240\u6709Python\u5bf9\u8c61\u7684\u6839\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u65b9\u6cd5\uff08\u5982 __str__() \uff0c\u5b83\u53ef\u521b\u5efa\u4f9b\u6253\u5370\u51fd\u6570\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\uff09\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u7ee7\u627f\u901a\u5e38\u7528\u4e8e\u91cd\u65b0\u5b9a\u4e49\u73b0\u6709\u65b9\u6cd5\u7684\u884c\u4e3a\u3002 \u7ee7\u627f\u662f\u7528\u529f\u80fd\u7a0d\u5fae\u589e\u5f3a\u7684\u70b9 . \u8fd0\u7b97\u7b26\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5982\u679c\u641c\u7d22\u4e00\u4e2a\u5c5e\u6027\u65f6\u672a\u5728\u5b9e\u4f8b\u6216\u5b9e\u4f8b\u7684\u7c7b\u4e2d\u627e\u5230\u5339\u914d\u9879\uff0c\u5c06\u4f1a\u7ee7\u7eed\u641c\u7d22\u57fa\u7c7b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u57fa\u7c7b\u53ef\u4f9b\u641c\u7d22\u4e3a\u6b62\u3002 \u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49 __init__() \u65f6\uff0c\u4e0d\u4f1a\u81ea\u52a8\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u60f3\u91cd\u5b9a\u4e49 __init__() \uff0c\u8fd8\u60f3\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\uff0c\u90a3\u4e48\u8981\u7531\u6d3e\u751f\u7c7b\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u6765\u5bf9\u5b83\u4eec\u8fdb\u884c\u6070\u5f53\u7684\u521d\u59cb\u5316\u3002\u5982\u679c\u57fa\u7c7b\u672a\u5b9a\u4e49 __init__() \uff0c\u5c31\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e00\u6b65\u3002\u5982\u679c\u4e0d\u77e5\u9053\u57fa\u7c7b\u662f\u5426\u5b9a\u4e49\u4e86 __init__() \uff0c\u53ef\u5728\u4e0d\u63d0\u4f9b\u4efb\u4f55\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u5b83\uff0c\u56e0\u4e3a\u59cb\u7ec8\u5b58\u5728\u4e00\u4e2a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u7684\u9ed8\u8ba4 __init__() \u5b9e\u73b0\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u4eba\u7c7b class Person : def __init__ ( self , name , age ): self . name = name self . age = age def get_name ( self ): return self . name def get_age ( self ): return self . age # \u5b9a\u4e49\u4e00\u4e2a\u7f8e\u56fd\u4eba\u7c7b ## \u73b0\u5728\u60f3\u7ed9\u7f8e\u56fd\u4eba\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u52a0\u4e0a \u6027\u522b \u7684\u5c5e\u6027 class American ( Person ): # \u91cd\u65b0\u5b9a\u4e49__init__()\u4f1a\u8986\u76d6Person\u7684__init__()\u65b9\u6cd5 def __init__ ( self , name , age , gender ): Person . __init__ ( self , name , age ) self . gender = gender def get_gender ( self ): return self . gender jackson = American ( name = \"Cesar T. Mauck\" , age = 14 , gender = \"male\" ) jackson . get_age () 14 jackson . get_gender () 'male' # \u6709\u65f6\uff0c\u6d3e\u751f\u7c7b\u5c06\u91cd\u65b0\u5b9e\u73b0\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd8\u60f3\u8c03\u7528\u539f\u59cb\u7684\u5b9e\u73b0\u3002 \u4e3a\u6b64\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5\uff0c\u5c06\u5b9e\u4f8b self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u5373\u53ef\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u534e\u76db\u987f\u4eba\u7c7b class Washington ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # \u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5 age = American . get_age () age += 1 self . age = age print ( \"Washington people grow up one year old\" ) \u8fd9\u4e2a\u4f8b\u5b50\u7684\u5fae\u5999\u4e4b\u5904\u5728\u4e8e\uff0cAmerican\u8fd9\u4e2a\u7c7b\u5176\u5b9e\u6ca1\u6709\u5b9e\u73b0 get_age() \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u662f\u5728Person\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002\u5c3d\u7ba1\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u6df7\u6dc6\uff08\u4f8b\u5982\uff0cAmerican\u662f\u5426\u5e94\u8be5\u5b9e\u73b0 get_age() ? \uff09\u3002\u56e0\u6b64\uff0c\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u662f\u7528 super() \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7c7b class California ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # \u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5 ## \u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3aget_age()\u65b9\u6cd5\u5728Person\u4e2d\u5b9a\u4e49 ## \u8fd9\u91cc\u53ef\u4ee5\u4f20\u5165Person\u7684\u4efb\u4f55\u4e00\u4e2a\u6d3e\u751f\u7c7b age = super ( California , self ) . get_age () age += 1 self . age = age print ( \"Californians grow up one year old\" ) Terri = California ( \"Terri H. Booth\" , 25 , \"female\" ) Terri . growing_up () Californians grow up one year old super(cls, instance) \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u652f\u6301\u5728\u57fa\u7c7b\u4e0a\u6267\u884c\u5c5e\u6027\u67e5\u627e\u3002\u5982\u679c\u4f7f\u7528\u8be5\u51fd\u6570\uff0cPython\u5c06\u4f7f\u7528\u672c\u6765\u5e94\u8be5\u5728\u57fa\u7c7b\u4e0a\u4f7f\u7528\u7684\u6b63\u5e38\u641c\u7d22\u89c4\u5219\u6765\u641c\u7d22\u5c5e\u6027\u3002\u6709\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5c31\u65e0\u9700\u5199\u6b7b\u65b9\u6cd5\u4f4d\u7f6e\uff0c\u5e76\u4e14\u80fd\u66f4\u6e05\u6670\u5730\u9648\u8ff0\u4f60\u7684\u610f\u56fe\uff08\u5373\u4f60\u5e0c\u671b\u8c03\u7528\u4ee5\u524d\u7684\u5b9e\u73b0\uff0c\u65e0\u8bba\u5b83\u662f\u54ea\u4e2a\u57fa\u7c7b\u5b9a\u4e49\u7684\uff09\u3002\u7136\u800c\uff0c super() \u7684\u8bed\u6cd5\u5c1a\u6709\u4e0d\u8db3\u4e4b\u5904\u3002\u5982\u679c\u4f7f\u7528Python 3\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5316\u7684\u8bed\u53e5 super().get_age() \u6765\u6267\u884c\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u8ba1\u7b97\u3002 \u591a\u91cd\u7ee7\u627f Python\u652f\u6301\u591a\u91cd\u7ee7\u627f\u3002\u901a\u8fc7\u8ba9\u4e00\u4e2a\u7c7b\u5217\u51fa\u591a\u4e2a\u57fa\u7c7b\u5373\u53ef\u6307\u5b9a\u591a\u91cd\u7ee7\u627f\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7c7b\u96c6\u5408\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u5723\u62c9\u8499\u4eba\u7c7b class San_Ramon ( American , California , Washington ): def growing_up ( self ): pass Edwin = San_Ramon ( \"Edwin A. Marcotte\" , 37 , \"male\" ) Edwin . get_age () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6c60ffbe4e5a> in <module> 1 # \u5b9a\u4e49\u4e00\u4e2a\u5723\u62c9\u8499\u4eba\u7c7b ----> 2 class San_Ramon(American, California, Washington): 3 def growing_up(self): 4 pass 5 TypeError: Cannot create a consistent method resolution order (MRO) for bases American, California, Washington \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u65f6\uff0c\u5c5e\u6027\u7684\u89e3\u6790\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u641c\u7d22\u8def\u5f84\u6765\u7ed1\u5b9a\u5c5e\u6027\u3002 \u5728\u67e5\u627e\u4f7f\u7528\u4e86\u591a\u91cd\u7ee7\u627f\u7684\u5c5e\u6027\u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u57fa\u7c7b\u6309\u4ece\u201c\u6700\u7279\u6b8a\u201d\u7684\u7c7b\u5230\u201c\u6700\u4e0d\u7279\u6b8a\u201d\u7684\u7c7b\u8fd9\u79cd\u987a\u5e8f\u8fdb\u884c\u6392\u5217\u3002\u7136\u540e\u5728\u641c\u7d22\u5c5e\u6027\u65f6\uff0c\u5c31\u4f1a\u6309\u8fd9\u4e2a\u987a\u5e8f\u641c\u7d22\uff0c\u76f4\u81f3\u627e\u5230\u8be5\u5c5e\u6027\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7c7b\uff0c\u901a\u8fc7\u6253\u5370\u5b83\u7684 mro \u5c5e\u6027\u5373\u53ef\u67e5\u770b\u57fa\u7c7b\u7684\u987a\u5e8f\uff0c\u4f8b\u5982\uff1a \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5217\u8868\u57fa\u4e8e\u201c\u6709\u610f\u4e49\u201d\u7684\u89c4\u5219\u6392\u5217\u5f97\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u59cb\u7ec8\u5148\u68c0\u67e5\u6d3e\u751f\u7c7b\uff0c\u7136\u540e\u518d\u68c0\u67e5\u5176\u57fa\u7c7b\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u5177\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u90a3\u4e48\u59cb\u7ec8\u6309\u7c7b\u5b9a\u4e49\u4e2d\u5217\u51fa\u7684\u7236\u7c7b\u987a\u5e8f\u68c0\u67e5\u8fd9\u4e9b\u7236\u7c7b\u3002\u4f46\u662f\uff0c\u57fa\u7c7b\u7684\u51c6\u786e\u987a\u5e8f\u5b9e\u9645\u4e0a\u975e\u5e38\u590d\u6742\uff0c\u4e0d\u662f\u57fa\u4e8e\u4efb\u4f55\u201c\u7b80\u5355\u7684\u201d\u7b97\u6cd5\uff0c\u5982\u6df1\u5ea6\u4f18\u5148\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u5b9e\u9645\u4e0a\uff0c\u57fa\u7c7b\u7684\u987a\u5e8f\u7531 C3 \u7ebf\u6027\u5316\u7b97\u6cd5\u786e\u5b9a\uff0c\u53ef\u4ee5\u5728\u8bba\u6587\u201cA Monotonic Superclass Linearization for Dylan\u201d\uff08K. Barrett \u7b49\uff0c\u53d1\u8868\u4e8e OOPSLA\u201996\uff09\u4e2d\u627e\u5230\u8be5\u7b97\u6cd5\u7684\u4ecb\u7ecd\u3002\u8be5\u7b97\u6cd5\u7684\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u67d0\u4e9b\u7c7b\u5c42\u6b21\u7ed3\u6784\u5c06\u88ab Python \u62d2\u7edd\u5e76\u4f1a\u629b\u51fa TypeError \u9519\u8bef\uff0c\u4f8b\u5982\uff1a \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5927\u591a\u6570\u7a0b\u5e8f\u4e2d\u6700\u597d\u907f\u514d\u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u3002\u4f46\u662f\uff0c\u591a\u91cd\u7ee7\u627f\u6709\u65f6\u53ef\u7528\u4e8e\u5b9a\u4e49\u6240\u8c13\u7684\u6df7\u5408\uff08mixin\uff09\u7c7b\u3002\u6df7\u5408\u7c7b\u901a\u5e38\u5b9a\u4e49\u4e86\u8981\u201c\u6df7\u5408\u5230\u201d\u5176\u4ed6\u7c7b\u4e2d\u7684\u4e00\u7ec4\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\uff08\u8fd9\u4e0e\u5b8f\u5f88\u7c7b\u4f3c\uff09\u3002\u901a\u5e38\uff0c\u6df7\u5408\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5c06\u5047\u5b9a\u5176\u4ed6\u65b9\u6cd5\u5b58\u5728\uff0c\u5e76\u5c06\u4ee5\u8fd9\u4e9b\u65b9\u6cd5\u4e3a\u57fa\u7840\u6784\u5efa\u3002 \u591a\u6001\u52a8\u6001\u7ed1\u5b9a\u548c\u9e2d\u5b50\u7c7b\u578b \u52a8\u6001\u7ed1\u5b9a\uff08\u5728\u7ee7\u627f\u80cc\u666f\u4e0b\u4f7f\u7528\u65f6\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a\u591a\u6001\u6027\uff09\u662f\u6307\u5728\u4e0d\u8003\u8651\u5b9e\u4f8b\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b9e\u4f8b\u53ea\u8981\u4ee5 obj.attr \u7684\u5f62\u5f0f\u8bbf\u95ee\u5c5e\u6027\uff0c\u5c31\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u641c\u7d22\u5e76\u5b9a\u4f4d attr \uff1a \u9996\u5148\u662f\u5b9e\u4f8b\u672c\u8eab\uff0c\u63a5\u7740\u662f\u5b9e\u4f8b\u7684\u7c7b\u5b9a\u4e49\uff0c\u7136\u540e\u662f\u57fa\u7c7b\u3002 \u67e5\u627e\u8fc7\u7a0b\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002 \u8fd9\u79cd\u7ed1\u5b9a\u8fc7\u7a0b\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5b83\u4e0d\u53d7\u5bf9\u8c61 obj \u7684\u7c7b\u578b\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6267\u884c\u50cf obj.name \u8fd9\u6837\u7684\u67e5\u627e\uff0c\u5bf9\u6240\u6709\u62e5\u6709 name \u5c5e\u6027\u7684 obj \u90fd\u662f\u9002\u7528\u7684\u3002 polymorphism \u6e90\u81ea\u5e0c\u814a\u8bed\uff0c\u610f\u601d\u662f\u201c\u6709\u591a\u79cd\u5f62\u6001\u201d\u3002\u8fd9\u5927\u81f4\u610f\u5473\u7740\u5373\u4fbf\u4f60\u4e0d\u77e5\u9053\u53d8\u91cf\u6307\u5411\u7684\u662f\u54ea\u79cd\u5bf9\u8c61\uff0c\u4e5f\u80fd\u591f\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\uff0c\u4e14\u64cd\u4f5c\u7684\u884c\u4e3a\u5c06\u968f\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u578b\uff08\u7c7b\uff09\u800c\u5f02\u3002\u4e5f\u5c31\u662f\u540c\u4e00\u79cd\u8c03\u7528\u5f62\u5f0f\uff0c\u4f46\u6709\u4e0d\u540c\u7684\u6267\u884c\u6548\u679c\u3002 \u5728Python\u4e2d\uff0c\u591a\u6001\u4e5f\u79f0\u4e3a \u9e2d\u5b50\u7c7b\u578b \uff08duck typing\uff09\u3002\u8fd9\u4e2a\u672f\u8bed\u6e90\u81ea James Whitcomb Riley \u572817\u4e16\u7eaa\u5199\u4e0b\u7684\u4e00\u53e5\u8bd7\uff1a When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. \u771f\u4e0d\u77e5\u9053\u8c01\u60f3\u51fa\u8fd9\u4e2a\u672f\u8bed\u7684\uff0c\u5982\u679c\u7528\u6570\u5b66\u8bed\u8a00\u6765\u7c7b\u6bd4\uff0c\u9e2d\u5b50\u7c7b\u578b\u76f8\u5f53\u4e8e\u6570\u5b66\u7684\u516c\u7406\u5316\u5b9a\u4e49\u3002 Python \u7a0b\u5e8f\u5458\u7ecf\u5e38\u7f16\u5199\u5229\u7528\u8fd9\u79cd\u884c\u4e3a\u7684\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60f3\u7f16\u5199\u73b0\u6709\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u7248\u672c\uff0c\u53ef\u4ee5\u7ee7\u627f\u8be5\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5916\u89c2\u548c\u884c\u4e3a\u50cf\u5b83\u4f46\u4e0e\u5b83\u65e0\u4efb\u4f55\u5173\u7cfb\u7684\u5168\u65b0\u5bf9\u8c61\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u4fdd\u6301\u7a0b\u5e8f\u7ec4\u4ef6\u7684\u677e\u6563\u8026\u5408\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u7f16\u5199\u4ee3\u7801\u6765\u5904\u7406\u4efb\u4f55\u79cd\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ea\u8981\u8be5\u5bf9\u8c61\u62e5\u6709\u7279\u5b9a\u7684\u65b9\u6cd5\u96c6\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5229\u7528\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u5404\u79cd\u201c\u7c7b\u4f3c\u6587\u4ef6\u201d\u7684\u5bf9\u8c61\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5de5\u4f5c\u65b9\u5f0f\u50cf\u6587\u4ef6\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u7ee7\u627f\u81ea\u5185\u7f6e\u6587\u4ef6\u5bf9\u8c61\u7684\u3002 \u5b9e\u4f8b\u65b9\u6cd5 \u7c7b\u4e2d\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5373 \u5c06\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u3002 \u6839\u636e\u7ea6\u5b9a\uff0c\u8fd9\u4e2a\u53c2\u6570\u540d\u79f0\u4e3aself\uff0c\u5c3d\u7ba1\u6240\u6709\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 self \u53c2\u6570\u6307\u5411\u5bf9\u8c61\u672c\u8eab\u3002 self \u53c2\u6570\u5f88\u6709\u7528\uff0c\u751a\u81f3\u5fc5\u4e0d\u53ef\u5c11\u3002\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u65e0\u6cd5\u8bbf\u95ee\u5bf9\u8c61\u672c\u8eab\uff08\u8981\u64cd\u4f5c\u7684\u5c5e\u6027\u6240\u5c5e\u7684\u5bf9\u8c61\uff09\u3002 \u4e0b\u9762\u662f\u4ee5\u662f\u5b9e\u4f8b\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def printd ( self ): print ( self . data ) ik1 = Kls ( 'arun' ) ik2 = Kls ( 'seema' ) ik1 . printd () ik2 . printd () arun seema \u7136\u540e\u770b\u4e00\u4e0b\u4ee3\u7801\u548c\u793a\u4f8b\u56fe\u7247: \u57281\u30012\u4e2d\uff0c\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002 \u57283\u4e2d\uff0c self\u53c2\u6570\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u3002 \u57284\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u7ed9\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u4f8b\uff0c Python\u89e3\u91ca\u5668\u81ea\u5df1\u4f1a\u505a\u8fd9\u4e9b\u64cd\u4f5c \u3002 \u9759\u6001\u65b9\u6cd5 Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u9759\u6001\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u4e0d\u9700\u8981\u8bbf\u95ee\u5b9e\u4f8b\u5bf9\u8c61\u6216\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u4f46\u4e0e\u7c7b\u6709\u5173\u7684\u529f\u80fd \u521b\u5efa\u6784\u9020\u51fd\u6570 \u7ecf\u5e38\u6709\u4e00\u4e9b\u8ddf\u7c7b\u6709\u5173\u7cfb\u7684\u529f\u80fd\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u53c8\u4e0d\u9700\u8981\u5b9e\u4f8b\u548c\u7c7b\u53c2\u4e0e\uff08\u6bd4\u5982\u66f4\u6539\u73af\u5883\u53d8\u91cf\u6216\u8005\u4fee\u6539\u5176\u4ed6\u7c7b\u7684\u5c5e\u6027\uff09\uff0c\u5f53\u7136\u53ef\u4ee5\u5728\u7c7b\u5b9a\u4e49\u4e4b\u5916\u5199\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u4f46\u8fd9\u6837\u4f1a\u6269\u6563\u7c7b\u5185\u90e8\u7684\u4ee3\u7801\uff0c\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002\u6bd4\u5982\u8fd9\u6837\uff1a IND = 'ON' def checkind (): return ( IND == 'ON' ) class Kls ( object ): def __init__ ( self , data ): self . data = data def do_reset ( self ): if checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if checkind (): self . db = 'new db connection' print ( 'DB connection made for:' , self . data ) ik1 = Kls ( 12 ) do_reset ( ik1 ) # Reset done for: 12 set_db ( ik1 ) # DB connection made for: 12 \u5982\u679c\u4f7f\u7528 @staticmethod \u5c31\u80fd\u628a\u76f8\u5173\u7684\u4ee3\u7801\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e86\u3002 IND = 'ON' class Kls ( object ): def __init__ ( self , data ): self . data = data @staticmethod def checkind (): return ( IND == 'ON' ) def do_reset ( self ): if self . checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if self . checkind (): self . db = 'New db connection' print ( 'DB connection made for: ' , self . data ) ik1 = Kls ( 12 ) ik1 . do_reset () ik1 . set_db () Reset done for: 12 DB connection made for: 12 \u5b9e\u9645\u4e0a\uff0c\u9759\u6001\u65b9\u6cd5\u662f\u4e00\u79cd\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4eec\u6b63\u597d\u4f4d\u4e8e\u7c7b\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c \u56e0\u4e3a\u5b83\u4e0d\u4f1a\u5bf9\u4efb\u4f55\u5b9e\u4f8b\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c \u3002 \u5982\u679c\u5728\u7f16\u5199\u7c7b\u65f6\u9700\u8981\u91c7\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u5219\u5e38\u5e38\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\u3002\u56e0\u4e3a\u7c7b\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a __init__() \u51fd\u6570\uff0c\u6240\u4ee5\u66ff\u4ee3\u7684\u521b\u5efa\u51fd\u6570\u901a\u5e38\u6309\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a import time class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @staticmethod def now (): t = time . localtime () return Date ( t . tm_year , t . tm_mon , t . tm_mday ) @staticmethod def tomorrow (): t = time . localtime ( time . time () + 86400 ) return Date ( t . tm_year , t . tm_mon , t . tm_mday ) # \u521b\u5efa\u65e5\u671f\u7684\u793a\u4f8b a = Date ( 1967 , 4 , 9 ) b = Date . now () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5now() c = Date . tomorrow () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5tomorrow() \u7c7b\u65b9\u6cd5 Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u7c7b\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u521b\u5efa\u6784\u9020\u51fd\u6570 \u52a8\u6001\u66f4\u65b0\u7c7b \u7c7b\u65b9\u6cd5\u662f\u5c06\u7c7b\u672c\u8eab\u4f5c\u4e3a\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\u7c7b\u65b9\u6cd5\u4f7f\u7528 @classmethod \u88c5\u9970\u5668\u5b9a\u4e49\uff0c\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u540c\uff0cPython\u89e3\u91ca\u5668\u4f1a\u5c06\u7c7b\u672c\u8eab\u4f20\u9012\u7ed9\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u4e00\u822c\u5c06\u8be5\u53c2\u6570\u547d\u540d\u4e3a cls \uff09\u3002\u4f8b\u5982\uff1a class Times ( object ): factor = 1 @classmethod def mul ( cls , x ): return cls . factor * x class TwoTimes ( Times ): factor = 2 x = TwoTimes . mul ( 4 ) # \u8c03\u7528Times.mul(TwoTimes, 4) -> 8 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8bf7\u6ce8\u610f\u7c7b TwoTimes \u662f\u5982\u4f55\u4f5c\u4e3a\u5bf9\u8c61\u4f20\u9012\u7ed9 mul() \u7684\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u4f8b\u5b50\u6709\u4e9b\u6df1\u5965\uff0c\u4f46\u7c7b\u65b9\u6cd5\u8fd8\u6709\u4e00\u4e9b\u5b9e\u7528\u4e14\u5de7\u5999\u7684\u7528\u6cd5\u3002\u4f8b\u5982\uff0c\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7ee7\u627f\u81ea\u524d\u9762\u7ed9\u51fa\u7684 Date \u7c7b\u5e76\u5bf9\u5176\u7565\u52a0\u5b9a\u5236\uff1a class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) \u7531\u4e8e\u8be5\u7c7b\u7ee7\u627f\u81ea Date\uff0c\u6240\u4ee5\u5b83\u62e5\u6709 Date \u7684\u6240\u6709\u7279\u6027\u3002\u4f46\u662f now() \u548c tomorrow() \u65b9\u6cd5\u7a0d\u5fae\u6709\u70b9\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8c03\u7528 EuroDate.now()\uff0c\u5219\u4f1a\u8fd4\u56de Date \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f EuroDate \u5bf9\u8c61\u3002\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\uff1a class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @classmethod def now ( cls ): t = time . localtime () return cls ( t . tm_year , t . tm_mon , t . tm_mday ) @classmethod def tomorrow ( cls ): t = time . localtime ( time . time () + 86400 ) return cls ( t . tm_year , t . tm_mon , t . tm_mday ) class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) a = Date . now () # \u8c03\u7528Date.now(Date)\u5e76\u8fd4\u56deDate b = EuroDate . now () # \u8c03\u7528Date.now(EuroDate)\u5e76\u8fd4\u56deEuroDate print ( type ( a )) print ( type ( b )) <class '__main__.Date'> <class '__main__.EuroDate'> \u7c7b\u65b9\u6cd5\u9664\u4e86\u7528\u4e8e\u521b\u5efa\u6784\u9020\u51fd\u6570\uff0c\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u52a8\u6001\u66f4\u65b0\u7c7b\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u52a8\u6001\u66f4\u65b0\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a class Kls ( object ): models = {} def __init__ ( self , model_name ): # \u52a0\u8f7d\u6a21\u578b pass @classmethod def load_model ( cls , model_name ): cls . models [ model_name ] = cls ( model_name ) @classmethod def get_model ( cls , model_name ): return cls . models . get ( model_name , None ) def predict ( self ): return \"\u9884\u6d4b\u7ed3\u679c\u4e3a1\" model_name = \"svm\" Kls . load_model ( model_name ) model = Kls . get_model ( model_name ) model . predict () '\u9884\u6d4b\u7ed3\u679c\u4e3a1' Kls . models {'svm': <__main__.Kls at 0x21aaefe5908>} \u5f53\u7136\uff0c\u9664\u4e86\u4f7f\u7528\u7c7b\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u663e\u5f0f\u8c03\u7528\u7c7b\u5c5e\u6027\uff0c\u8fbe\u5230\u52a8\u6001\u66f4\u65b0\u7c7b\u7684\u6548\u679c\uff0c\u4f8b\u5982\u6211\u4eec\u8981\u83b7\u53d6\u5b9e\u4f8b\u6570\uff1a class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 @classmethod def get_no_of_instance ( cls_obj ): return cls_obj . no_inst ik1 = Kls () ik2 = Kls () print ( ik1 . get_no_of_instance ()) print ( Kls . get_no_of_instance ()) 2 2 \u4f46\u662f\u5982\u679c\u8981\u7528\u5b9e\u4f8b\u65b9\u6cd5\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u5f97\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8981\u7ed9\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u547d\u540d\u3002\u5728\u7f16\u7a0b\u4e2d\uff0c\u7ed9\u8fc7\u591a\u7684\u53d8\u91cf\u547d\u540d\uff0c\u6709\u65f6\u662f\u4e00\u4e2a\u5934\u75bc\u7684\u95ee\u9898\u3002 \u5728\u7c7b\u5916\u9762\u5199\u4e00\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c\uff0c\u4f46\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002 def get_no_of_instances ( cls_obj ): return cls_obj . no_inst class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 ik1 = Kls () ik2 = Kls () print ( get_no_of_instances ( Kls )) 2 \u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5bf9\u6bd4 \u5728\u5b9e\u4f8b\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u4e2d\uff0cPython\u9ed8\u8ba4\u5c06\u5f53\u524d\u5b9e\u4f8b\u6216\u8005\u7c7b\u5bf9\u8c61\u4f20\u7ed9\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u975e\u6307\u5b9a\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\uff09\uff0c\u5982\u679c\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u4fbf\u4f1a\u62a5\u9519\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def imethod1 (): print ( \"\u4e0d\u63a5\u6536\u5b9e\u4f8b\" ) def imethod2 ( * arg ): print ( 'Instance:' , arg ) @staticmethod def smethod ( * arg ): print ( 'Static:' , arg ) @classmethod def cmethod1 (): print ( \"\u4e0d\u63a5\u6536\u7c7b\u5bf9\u8c61\" ) @classmethod def cmethod2 ( * arg ): print ( 'Class:' , arg ) ik3 = Kls ( 'arun' ) ik3 . imethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-82fbcd62768a> in <module> 1 ik3 = Kls('arun') ----> 2 ik3.imethod1() TypeError: imethod1() takes 0 positional arguments but 1 was given ik3 . cmethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6055e1d64eee> in <module> ----> 1 ik3.cmethod1() TypeError: cmethod1() takes 0 positional arguments but 1 was given \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5fc5\u987b\u8bbe\u7f6e\u53c2\u6570\u63a5\u6536\u7c7b\u5bf9\u8c61\uff1a ik3 . imethod2 () ik3 . cmethod2 () Instance: (<__main__.Kls object at 0x0000021AAEFF0390>,) Class: (<class '__main__.Kls'>,) \u9759\u6001\u65b9\u6cd5\u5219\u4e0d\u4f1a\u4f20\u5165\u5b9e\u4f8b\u6216\u7c7b\u5bf9\u8c61\uff1a ik3 . smethod () Static: () \u5982\u679c\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u53ea\u80fd\u901a\u8fc7\u7c7b\u53bb\u8c03\u7528\uff0c\u5e94\u8be5\u907f\u514d\u8fd9\u79cd\u7528\u6cd5\uff0c\u6ca1\u53c2\u6570\u7684\u65b9\u6cd5\u5e94\u8be5\u52a0\u4e0a @staticmethod \u88c5\u9970\u5668\uff1a Kls . imethod1 () \u4e0d\u63a5\u6536\u5b9e\u4f8b \u5173\u4e8e\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0cPython \u4e0d\u4f1a\u5728\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u72ec\u7acb\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7ba1\u7406\u5b83\u4eec\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u6216\u7c7b\u8c03\u7528\u5b83\u4eec\u3002\u4f8b\u5982\uff1a Kls . cmethod2 () Kls ( 'arun' ) . cmethod2 () Kls . smethod () Kls ( 'arun' ) . smethod () Class: (<class '__main__.Kls'>,) Class: (<class '__main__.Kls'>,) Static: () Static: () \u8fd9\u53ef\u80fd\u5f88\u5bb9\u6613\u5f15\u8d77\u6df7\u6dc6\uff0c\u56e0\u4e3a\u5bf9 Kls('arun').cmethod2() \u7684\u8c03\u7528\u4e0e\u5b9e\u4f8b Kls('arun') \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u8fd9\u79cd\u884c\u4e3a\u662f Python \u5bf9\u8c61\u7cfb\u7edf\u4e0e\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff08\u5982 Smalltalk \u548c Ruby\uff09\u5bf9\u8c61\u7cfb\u7edf\u7684\u533a\u522b\u4e4b\u4e00\u3002\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7c7b\u65b9\u6cd5\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u662f\u4e25\u683c\u5206\u5f00\u7684\u3002 \u800c\u5b9e\u4f8b\u65b9\u6cd5\u5fc5\u987b\u901a\u8fc7\u5b9e\u4f8b\u8c03\u7528\uff0c\u56e0\u4e3a\u9700\u8981\u4f20\u5165\u5b9e\u4f8b\u3002 \u7279\u6027 @property \u2014\u2014\u628a\u65b9\u6cd5\u53d8\u4e3a\u5c5e\u6027 \u901a\u5e38\uff0c\u8bbf\u95ee\u5b9e\u4f8b\u6216\u7c7b\u7684\u5c5e\u6027\u65f6\uff0c\u8fd4\u56de\u7684\u4f1a\u662f\u6240\u5b58\u50a8\u7684\u76f8\u5173\u503c\u3002\u7279\u6027\uff08property\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5c5e\u6027\uff0c\u8bbf\u95ee\u5b83\u65f6\u4f1a\u8ba1\u7b97\u5b83\u7684\u503c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius # Circle\u7684\u4e00\u4e9b\u9644\u52a0\u7279\u6027 @property def area ( self ): return math . pi * self . radius ** 2 @property def preimeter ( self ): return 2 * math . pi * self . radius \u5f97\u5230\u7684Circle\u5bf9\u8c61\u7684\u884c\u4e3a\u5982\u4e0b\uff1a c = Circle ( 4.0 ) c . radius 4.0 c . area 50.26548245743669 c . preimeter 25.132741228718345 c . area = 2 ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-0dac39a0c579> in <module> ----> 1 c.area = 2 AttributeError: can't set attribute \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cCircle \u5b9e\u4f8b\u5b58\u50a8\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf c.radius \u3002 c.area \u548c c.perimeter \u662f\u6839\u636e\u8be5\u503c\u8ba1\u7b97\u5f97\u6765\u7684\u3002 @property \u88c5\u9970\u5668\u652f\u6301\u4ee5\u7b80\u5355\u5c5e\u6027\u7684\u5f62\u5f0f\u8bbf\u95ee\u540e\u9762\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u50cf\u5e73\u5e38\u4e00\u6837\u6dfb\u52a0\u989d\u5916\u7684 () \u6765\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\u5bf9\u8c61\u7684\u4f7f\u7528\u8005\u5f88\u96be\u53d1\u73b0\u6b63\u5728\u8ba1\u7b97\u4e00\u4e2a\u5c5e\u6027\uff0c\u9664\u975e\u5728\u8bd5\u56fe\u91cd\u65b0\u5b9a\u4e49\u8be5\u5c5e\u6027\u65f6\u751f\u6210\u4e86\u9519\u8bef\u6d88\u606f\uff08\u5982\u4e0a\u9762\u7684 AttributeError \u5f02\u5e38\u6240\u793a\uff09\u3002 \u8fd9\u79cd\u7279\u6027\u4f7f\u7528\u65b9\u5f0f\u9075\u5faa\u6240\u8c13\u7684\u7edf\u4e00\u8bbf\u95ee\u539f\u5219\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5c3d\u53ef\u80fd\u4fdd\u6301\u7f16\u7a0b\u63a5\u53e3\u7684\u7edf\u4e00\u603b\u662f\u4e0d\u9519\u7684\u3002\u5982\u679c\u6ca1\u6709\u7279\u6027\uff0c\u5c06\u4f1a\u4ee5\u7b80\u5355\u5c5e\u6027\uff08\u5982 c.radius \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u800c\u5176\u4ed6\u5c5e\u6027\u5c06\u4ee5\u65b9\u6cd5\uff08\u5982 c.area() \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u3002\u8d39\u529b\u53bb\u4e86\u89e3\u4f55\u65f6\u6dfb\u52a0\u989d\u5916\u7684 () \u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u6df7\u6dc6\u3002\u7279\u6027\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 Python \u7a0b\u5e8f\u5458\u5f88\u5c11\u8ba4\u8bc6\u5230\uff0c \u65b9\u6cd5\u672c\u8eab\u662f\u88ab\u9690\u5f0f\u5730\u4f5c\u4e3a\u4e00\u7c7b\u7279\u6027\u5904\u7406\u7684\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7c7b\uff1a class Foo ( object ): def __init__ ( self , name ): self . name = name def spam ( self , x ): print ( \" %s , %s \" % ( self . name , x )) Foo ( \"d\" ) . spam <bound method Foo.spam of <__main__.Foo object at 0x0000021AAEFDC7B8>> \u7528\u6237\u521b\u5efa f = Foo(\"Guido\") \u8fd9\u6837\u7684\u5b9e\u4f8b\u7136\u540e\u8bbf\u95ee f.spam \u65f6\uff0c\u4e0d\u4f1a\u8fd4\u56de\u539f\u59cb\u51fd\u6570\u5bf9\u8c61 spam \uff0c\u800c\u662f\u4f1a\u5f97\u5230\u6240\u8c13\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff08bound method\uff09\uff0c\u7ed1\u5b9a\u65b9\u6cd5\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ee3\u8868\u5c06\u5728\u5bf9\u8c61\u4e0a\u8c03\u7528 () \u8fd0\u7b97\u7b26\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u7ed1\u5b9a\u65b9\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5df2\u90e8\u5206\u8ba1\u7b97\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u7684self\u53c2\u6570\u5df2\u7ecf\u586b\u5165\uff0c\u4f46\u5176\u4ed6\u53c2\u6570\u4ecd\u7136\u9700\u8981\u5728\u4f7f\u7528 () \u8c03\u7528\u8be5\u51fd\u6570\u65f6\u63d0\u4f9b\u3002\u8fd9\u79cd\u7ed1\u5b9a\u65b9\u6cd5\u5bf9\u8c61\u662f\u7531\u5728\u540e\u53f0\u6267\u884c\u7684\u7279\u6027\u51fd\u6570\u9759\u9ed8\u5730\u521b\u5efa\u7684\u3002 \u4f7f\u7528 @staticmethod \u548c @classmethod \u5b9a\u4e49\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u6307\u5b9a\u4e86\u4f7f\u7528\u4e0d\u540c\u7684\u7279\u6027\u51fd\u6570\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5bf9\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bbf\u95ee\u3002 \u4f8b\u5982\uff0c @staticmethod \u4ec5\u201c\u6309\u539f\u6837\u201d\u8fd4\u56de\u65b9\u6cd5\u51fd\u6570\uff0c\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u7279\u6b8a\u7684\u5305\u88c5\u6216\u5904\u7406\u3002 \u7279\u6027\u8fd8\u53ef\u4ee5\u622a\u83b7\u64cd\u4f5c\u6743\uff0c\u4ee5\u8bbe\u7f6e\u548c\u5220\u9664\u5c5e\u6027\u3002\u8fd9\u662f\u901a\u8fc7\u5411\u7279\u6027\u9644\u52a0\u5176\u4ed6 setter \u548c deleter \u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Foo ( object ): def __init__ ( self , name ): self . __name = name @property def name ( self ): return self . __name @name . setter def name ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value @name . deleter def name ( self ): raise TypeError ( \"Can't delete name\" ) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u4f7f\u7528 @property \u88c5\u9970\u5668\u548c\u76f8\u5173\u65b9\u6cd5\u5c06\u5c5e\u6027 name \u5b9a\u4e49\u4e3a\u53ea\u8bfb\u7279\u6027\u3002\u540e\u9762\u7684 @name.setter \u548c @name.deleter \u88c5\u9970\u5668\u5c06\u5176\u4ed6\u65b9\u6cd5\u4e0e name \u5c5e\u6027\u4e0a\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u540d\u79f0\u5fc5\u987b\u4e0e\u539f\u59cb\u7279\u6027\u7684\u540d\u79f0\u5b8c\u5168\u5339\u914d\u3002\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u8bf7\u6ce8\u610f\u5b9e\u9645\u7684\u540d\u79f0\u503c\u5b58\u50a8\u5728\u5c5e\u6027 __name \u4e2d\u3002\u6240\u5b58\u50a8\u5c5e\u6027\u7684\u540d\u79f0\u65e0\u9700\u9075\u5faa\u4efb\u4f55\u7ea6\u5b9a\uff0c\u4f46\u5b83\u5fc5\u987b\u4e0e\u7279\u6027\u540d\u79f0\u4e0d\u540c\uff0c\u4ee5\u4fbf\u5c06\u5b83\u4e0e\u7279\u6027\u7684\u540d\u79f0\u533a\u5206\u5f00\u3002 \u5728\u4ee5\u524d\u7684\u4ee3\u7801\u4e2d\uff0c\u901a\u5e38\u4f1a\u770b\u5230\u7528 property(getf=None, setf=None, delf=None, doc=None) \u51fd\u6570\u6765\u5b9a\u4e49\u7279\u6027\uff0c\u5f80\u5176\u4e2d\u4f20\u5165\u4e00\u7ec4\u540d\u79f0\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a class Foo ( object ): def getname ( self ): return self . __name def setname ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value def delname ( self ): raise TypeError ( \"Can't delete name\" ) name = property ( getname , setname , delname ) \u8fd9\u79cd\u8001\u65b9\u6cd5\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u88c5\u9970\u5668\u7248\u672c\u4f1a\u8ba9\u7c7b\u770b\u8d77\u6765\u66f4\u6574\u6d01\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u88c5\u9970\u5668\uff0cget\u3001 set \u548c delete \u51fd\u6570\u5c06\u4e0d\u4f1a\u663e\u793a\u4e3a\u65b9\u6cd5\u3002 \u6570\u636e\u5c01\u88c5\u548c\u79c1\u6709\u5c5e\u6027 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u201c\u516c\u5171\u7684\u201d\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u8fd9\u8fd8\u6697\u793a\u7740\uff0c\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u88ab\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u5e76\u53ef\u4ece\u6d3e\u751f\u7c7b\u5185\u8fdb\u884c\u8bbf\u95ee\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u4e0d\u5e0c\u671b\u53d1\u751f\u8fd9\u79cd\u884c\u4e3a\uff0c\u56e0\u4e3a\u5b83\u4f1a\u66b4\u9732\u5bf9\u8c61\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u53ef\u80fd\u5bfc\u81f4\u5728\u6d3e\u751f\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e0e\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u53d1\u751f\u547d\u540d\u7a7a\u95f4\u51b2\u7a81\u3002 Note \u8fd9\u610f\u5473\u7740\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49\u3002 \u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c \u7c7b\u4e2d\u6240\u6709\u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\uff08\u5982 __Foo \uff09\u90fd\u4f1a\u81ea\u52a8\u53d8\u5f62\uff0c\u5f62\u6210\u5177\u6709 _Classname__Foo \u5f62\u5f0f\u7684\u65b0\u540d\u79f0\u3002 \u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7c7b\u4e2d\u6dfb\u52a0\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u6709\u6548\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528\u7684\u79c1\u6709\u540d\u79f0\u4e0d\u4f1a\u4e0e\u57fa\u7c7b\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u79c1\u6709\u540d\u79f0\u53d1\u751f\u51b2\u7a81\uff0c\u5982\u4e0b\u6240\u793a\uff1a class A ( object ): def __init__ ( self ): self . __X = 3 # \u53d8\u5f62\u4e3aself._A__X def __spam ( self ): # \u53d8\u5f62\u4e3a_A__spam() print ( \"A\" ) def bar ( self ): self . __spam () # \u53ea\u8c03\u7528A.__spam() class B ( A ): def __init__ ( self ): A . __init__ ( self ) self . __X = 37 # \u53d8\u5f62\u4e3aself._B__X def __spam ( self ): # \u53d8\u5f62\u4e3a_B__spam() print ( \"B\" ) b = B () # \u6d3e\u751f\u7c7b\u7684\u5b9a\u4e49\u6ca1\u6709\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49 b . bar () A \u5c3d\u7ba1\u8fd9\u79cd\u65b9\u6848\u4f3c\u4e4e\u9690\u85cf\u4e86\u6570\u636e\uff0c\u4f46\u5e76\u6ca1\u6709\u4e25\u683c\u7684\u673a\u5236\u6765\u5b9e\u9645\u963b\u6b62\u5bf9\u7c7b\u7684\u201c\u79c1\u6709\u201d\u5c5e\u6027\u8fdb\u884c\u8bbf\u95ee\u3002\u7279\u522b\u662f\u5982\u679c\u5df2\u77e5\u7c7b\u540d\u79f0\u548c\u76f8\u5e94\u79c1\u6709\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53d8\u5f62\u540e\u7684\u540d\u79f0\u6765\u8bbf\u95ee\u5b83\u4eec\u3002\u901a\u8fc7\u91cd\u5b9a\u4e49 dir() \u65b9\u6cd5\uff0c\u7c7b\u53ef\u4ee5\u964d\u4f4e\u8fd9\u4e9b\u5c5e\u6027\u7684\u53ef\u89c1\u6027\uff0c dir() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u68c0\u67e5\u5bf9\u8c61\u7684 dir() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u540d\u79f0\u5217\u8868\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u540d\u79f0\u53d8\u5f62\u4f3c\u4e4e\u662f\u4e00\u4e2a\u989d\u5916\u7684\u5904\u7406\u6b65\u9aa4\uff0c\u4f46\u53d8\u5f62\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u53ea\u5728\u5b9a\u4e49\u7c7b\u65f6\u53d1\u751f\u4e00\u6b21\u3002\u5b83\u4e0d\u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u53d1\u751f\uff0c\u4e5f\u4e0d\u4f1a\u4e3a\u7a0b\u5e8f\u7684\u6267\u884c\u6dfb\u52a0\u989d\u5916\u7684\u5f00\u9500\u3002\u800c\u4e14\u8981\u77e5\u9053\uff0c\u540d\u79f0\u53d8\u5f62\u4e0d\u4f1a\u5728 getattr() \u3001 hasattr() \u3001 setattr() \u6216 delattr() \u7b49\u51fd\u6570\u4e2d\u53d1\u751f\uff0c\u5728\u8fd9\u4e9b\u51fd\u6570\u4e2d\uff0c\u5c5e\u6027\u540d\u88ab\u6307\u5b9a\u4e3a\u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u51fd\u6570\uff0c\u9700\u8981\u663e\u5f0f\u4f7f\u7528\u53d8\u5f62\u540d\u79f0\uff08\u5982 __Classname__name \uff09\u6765\u8bbf\u95ee\u5c5e\u6027\u3002 \u5efa\u8bae\u5728\u5b9a\u4e49\u53ef\u53d8\u5c5e\u6027\u65f6\uff0c\u901a\u8fc7\u7279\u6027\u6765\u4f7f\u7528\u79c1\u6709\u5c5e\u6027\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u9f13\u52b1\u7528\u6237\u4f7f\u7528\u7279\u6027\u540d\u79f0\uff0c\u800c\u65e0\u9700\u76f4\u63a5\u8bbf\u95ee\u5e95\u5c42\u5b9e\u4f8b\u6570\u636e\uff08\u5982\u679c\u4f60\u5728\u5b9e\u4f8b\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u80fd\u4e0d\u60f3\u91c7\u7528\u8fd9\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff09\u3002 \u901a\u8fc7\u4e3a\u65b9\u6cd5\u63d0\u4f9b\u79c1\u6709\u540d\u79f0\uff0c\u8d85\u7c7b\u53ef\u4ee5\u963b\u6b62\u6d3e\u751f\u7c7b\u91cd\u65b0\u5b9a\u4e49\u548c\u66f4\u6539\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u7684 A.bar() \u65b9\u6cd5\u53ea\u8c03\u7528 A.__spam() \uff0c\u65e0\u8bba self \u5177\u6709\u4f55\u79cd\u7c7b\u578b\uff0c\u6216\u8005\u6d3e\u751f\u7c7b\u4e2d\u662f\u5426\u5b58\u5728\u4e0d\u540c\u7684 __spam() \u65b9\u6cd5\u90fd\u662f\u5982\u6b64\u3002 \u6700\u540e\uff0c\u4e0d\u8981\u6df7\u6dc6\u79c1\u6709\u7c7b\u5c5e\u6027\u7684\u547d\u540d\u548c\u6a21\u5757\u4e2d\u201c\u79c1\u6709\u201d\u5b9a\u4e49\u7684\u547d\u540d\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\uff0c\u5728\u5c5e\u6027\u540d\u4e0a\u4f7f\u7528\u5355\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\u6765\u9690\u85cf\u5c5e\u6027\u503c\uff08\u5982 _name \uff09\u3002 \u5728\u6a21\u5757\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u53ef\u4ee5\u963b\u6b62\u901a\u8fc7 from module import * \u8bed\u53e5\u5bfc\u51fa\u540d\u79f0\u3002 \u8fd9\u610f\u5473\u7740\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b9a\u4e49\u53ea\u80fd\u88ab\u7c7b\u672c\u8eab\u548c\u5176\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002\u4f46\u662f\u5728\u7c7b\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u65e2\u4e0d\u80fd\u9690\u85cf\u5c5e\u6027\uff0c\u5728\u67d0\u4e2a\u7c7b\u7ee7\u627f\u8be5\u7c7b\u5e76\u4f7f\u7528\u76f8\u540c\u540d\u79f0\u5b9a\u4e49\u4e00\u4e2a\u65b0\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6\uff0c\u4e5f\u4e0d\u80fd\u963b\u6b62\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u3002 \u5bf9\u8c61\u8868\u793a\u548c\u5c5e\u6027\u7ed1\u5b9a \u4ece\u5185\u90e8\u5b9e\u73b0\u4e0a\u770b\uff0c\u5b9e\u4f8b\u662f\u4f7f\u7528\u5b57\u5178\u6765\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u8bbf\u95ee\u8be5\u5b57\u5178\u3002\u8fd9\u4e2a\u5b57\u5178\u5305\u542b\u7684\u6570\u636e\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u800c\u8a00\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance a = Account ( \"Guido\" , 1100.0 ) a . __dict__ {'name': 'Guido', 'balance': 1100.0} \u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u5411\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u4f8b\u5982\uff1a a . number = 123456 # \u5c06\u5c5e\u6027'number'\u6dfb\u52a0\u5230 a.__dict__ \u5bf9\u5b9e\u4f8b\u7684\u4fee\u6539\u59cb\u7ec8\u4f1a\u53cd\u6620\u5230\u5c40\u90e8 __dict__ \u5c5e\u6027\u4e2d\u3002\u540c\u6837\uff0c\u5982\u679c\u76f4\u63a5\u5bf9 __dict__ \u8fdb\u884c\u4fee\u6539\uff0c\u6240\u505a\u7684\u4fee\u6539\u4e5f\u4f1a\u53cd\u6620\u5728\u5b9e\u4f8b\u7684\u5c5e\u6027\u4e2d\u3002 \u5b9e\u4f8b\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __class__ \u94fe\u63a5\u56de\u5b83\u4eec\u7684\u7c7b\u3002\u7c7b\u672c\u8eab\u4e5f\u53ea\u662f\u5bf9\u5b57\u5178\u7684\u6d45\u5c42\u5305\u88c5\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u4e2d\u627e\u5230\u8fd9\u4e2a\u5b57\u5178\u3002\u53ef\u4ee5\u5728\u7c7b\u5b57\u5178\u4e2d\u627e\u5230\u5404\u79cd\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a a . __class__ __main__.Account Account . __dict__ . keys () dict_keys(['__module__', '__init__', '__dict__', '__weakref__', '__doc__']) \u6700\u540e\uff0c\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __bases__ \u4e2d\u5c06\u7c7b\u94fe\u63a5\u5230\u5b83\u4eec\u7684\u57fa\u7c7b\uff0c\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u57fa\u7c7b\u5143\u7ec4\u3002\u8fd9\u79cd\u5e95\u5c42\u7ed3\u6784\u662f\u83b7\u53d6\u3001\u8bbe\u7f6e\u548c\u5220\u9664\u5bf9\u8c61\u5c5e\u6027\u7684\u6240\u6709\u64cd\u4f5c\u7684\u57fa\u7840\u3002 \u53ea\u8981\u4f7f\u7528 obj.name = value \u8bbe\u7f6e\u4e86\u5c5e\u6027\uff0c\u7279\u6b8a\u65b9\u6cd5 obj.__setattr__(\"name\", value) \u5c31\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u4f7f\u7528 del obj.name \u5220\u9664\u4e86\u4e00\u4e2a\u5c5e\u6027\uff0c\u5c31\u4f1a\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__delattr__(\"name\") \u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u4fee\u6539\u6216\u5220\u9664 obj \u7684\u5c40\u90e8 __dict__ \u7684\u503c\uff0c\u9664\u975e\u8bf7\u6c42\u7684\u5c5e\u6027\u6b63\u597d\u662f\u4e00\u4e2a\u7279\u6027\u6216\u63cf\u8ff0\u7b26\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u5c06\u7531\u4e0e\u8be5\u7279\u6027\u76f8\u5173\u8054\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u51fd\u6570\u6267\u884c\u3002 \u5728\u67e5\u627e\u5c5e\u6027\uff08\u5982 obj.name \uff09\u65f6\uff0c\u5c06\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__getattrribute__(\"name\") \u3002\u8be5\u65b9\u6cd5\u6267\u884c\u641c\u7d22\u6765\u67e5\u627e\u8be5\u5c5e\u6027\uff0c\u8fd9\u901a\u5e38\u6d89\u53ca\u68c0\u67e5\u7279\u6027\u3001\u67e5\u627e\u5c40\u90e8 __dict__ \u5c5e\u6027\u3001\u68c0\u67e5\u7c7b\u5b57\u5178\u4ee5\u53ca\u641c\u7d22\u57fa\u7c7b\u3002\u5982\u679c\u641c\u7d22\u8fc7\u7a0b\u5931\u8d25\uff0c\u6700\u7ec8\u4f1a\u5c1d\u8bd5\u8c03\u7528\u7c7b\u7684 __getattr__() \u65b9\u6cd5\uff08\u5982\u679c\u5df2\u5b9a\u4e49\uff09\u6765\u67e5\u627e\u8be5\u5c5e\u6027\u3002\u5982\u679c\u8fd9\u4e5f\u5931\u8d25\uff0c\u5c31\u4f1a\u629b\u51fa AttributeError \u5f02\u5e38\u3002 \u5982\u679c\u6709\u5fc5\u8981\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u5176\u81ea\u5df1\u7684\u5c5e\u6027\u8bbf\u95ee\u51fd\u6570\u3002\u4f8b\u5982\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius def __getattr__ ( self , name ): if name == 'area' : return math . pi * self . radius ** 2 elif name == 'perimeter' : return 2 * math . pi * self . radius else : return object . __getattr__ ( self , name ) def __setattr__ ( self , name , value ): if name in [ 'area' , 'perimeter' ]: raise TypeError ( \" %s is readonly\" % name ) from None object . __setattr__ ( self , name , value ) c = Circle ( 2 ) c . area 12.566370614359172 c . area = 10 ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-52599b4ddcfc> in <module> ----> 1 c.area = 10 <ipython-input-1-a1a0cdcb1eb3> in __setattr__(self, name, value) 13 def __setattr__(self,name,value): 14 if name in ['area','perimeter']: ---> 15 raise TypeError(\"%s is readonly\" % name) from None 16 object.__setattr__(self,name,value) TypeError: area is readonly \u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7c7b\u5e94\u8be5\u53ef\u4ee5\u4f9d\u9760 object \u4e2d\u7684\u9ed8\u8ba4\u5b9e\u73b0\u6765\u6267\u884c\u5b9e\u9645\u7684\u5de5\u4f5c\u3002\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u5b9e\u73b0\u80fd\u591f\u5904\u7406\u7c7b\u7684\u66f4\u9ad8\u7ea7\u7279\u6027\uff0c\u5982\u63cf\u8ff0\u7b26\u548c\u7279\u6027\u3002 \u4e00\u822c\u6765\u8bb2\uff0c\u7c7b\u5f88\u5c11\u91cd\u65b0\u5b9a\u4e49\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u4f46\u662f\uff0c\u5728\u7f16\u5199\u901a\u7528\u7684\u5305\u88c5\u5668\u548c\u73b0\u6709\u5bf9\u8c61\u7684\u4ee3\u7406\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u901a\u8fc7\u91cd\u65b0\u5b9a\u4e49 __getattr__() \u3001 __setattr__() \u548c __delattr__() \uff0c\u4ee3\u7406\u53ef\u4ee5\u6355\u83b7\u5c5e\u6027\u8bbf\u95ee\u64cd\u4f5c\uff0c\u5e76\u900f\u660e\u5730\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u8f6c\u53d1\u7ed9\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002 __slots__ \u901a\u8fc7\u5b9a\u4e49\u7279\u6b8a\u53d8\u91cf slots \uff0c\u7c7b\u53ef\u4ee5\u9650\u5236\u5bf9\u5408\u6cd5\u5b9e\u4f8b\u5c5e\u6027\u540d\u79f0\u7684\u8bbe\u7f6e\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance __slots__ = ( 'name' , 'balance' ) a = Account ( \"Guido\" , 1100.0 ) a . date = \"12-12\" ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-b978ca4ed4ad> in <module> 7 8 a = Account(\"Guido\", 1100.0) ----> 9 a.date = \"12-12\" AttributeError: 'Account' object has no attribute 'date' \u5b9a\u4e49 __slots__ \u65f6\uff0c\u53ef\u4ee5\u5c06\u5b9e\u4f8b\u4e0a\u5206\u914d\u7684\u5c5e\u6027\u540d\u79f0\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u540d\u79f0\uff0c\u5426\u5219\u5c06\u5f15\u53d1 AttributeError \u5f02\u5e38\u3002\u8fd9\u79cd\u9650\u5236\u53ef\u4ee5\u963b\u6b62\u5176\u4ed6\u4eba\u5411\u73b0\u6709\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u5373\u4fbf\u7528\u6237\u5c06\u5c5e\u6027\u540d\u79f0\u5199\u9519\uff0c\u4e5f\u4e0d\u4f1a\u521b\u5efa\u51fa\u65b0\u7684\u5c5e\u6027\u6765\u3002 \u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c __slots__ \u4ece\u672a\u88ab\u5f53\u4f5c\u4e00\u79cd\u5b89\u5168\u7684\u7279\u6027\u6765\u5b9e\u73b0\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u5bf9\u5185\u5b58\u548c\u6267\u884c\u901f\u5ea6\u7684\u4e00\u79cd\u6027\u80fd\u4f18\u5316\u3002 \u4f7f\u7528 __slots__ \u7684\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u518d\u4f7f\u7528\u5b57\u5178\u6765\u5b58\u50a8\u5b9e\u4f8b\u6570\u636e\uff0c\u8f6c\u800c\u91c7\u7528\u4e00\u79cd\u57fa\u4e8e\u6570\u7ec4\u7684\u66f4\u52a0\u7d27\u51d1\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728\u4f1a\u521b\u5efa\u5927\u91cf\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528 __slots__ \u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u6267\u884c\u65f6\u95f4\u3002 \u6ce8\u610f\uff0c __slots__ \u4e0e\u7ee7\u627f\u7684\u914d\u5408\u4f7f\u7528\u9700\u8981\u4e00\u5b9a\u7684\u6280\u5de7\u3002\u5982\u679c\u7c7b\u7ee7\u627f\u81ea\u4f7f\u7528 __slots__ \u7684\u57fa\u7c7b\uff0c\u90a3\u4e48\u5b83\u4e5f\u9700\u8981\u5b9a\u4e49 __slots__ \u6765\u5b58\u50a8\u81ea\u5df1\u7684\u5c5e\u6027\uff08\u5373\u4f7f\u5b83\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u5c5e\u6027\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u8fd9\u6837\u624d\u80fd\u5229\u7528 __slots__ \u63d0\u4f9b\u7684\u4f18\u52bf\u3002\u5982\u679c\u5fd8\u8bb0\u4e86\u8fd9\u4e00\u70b9\uff0c\u6d3e\u751f\u7c7b\u7684\u8fd0\u884c\u901f\u5ea6\u5c06\u66f4\u6162\uff0c\u5360\u7528\u7684\u5185\u5b58\u4e5f\u66f4\u591a\uff0c\u6bd4\u5b8c\u5168\u4e0d\u4f7f\u7528 __slots__ \u65f6\u60c5\u51b5\u66f4\u7cdf\u3002 __slots__ \u7684\u4f7f\u7528\u8fd8\u4f1a\u7834\u574f\u671f\u671b\u5b9e\u4f8b\u5177\u6709\u5e95\u5c42 __dict__ \u5c5e\u6027\u7684\u4ee3\u7801\u3002\u5c3d\u7ba1\u8fd9\u4e00\u70b9\u901a\u5e38\u4e0d\u9002\u7528\u4e8e\u7528\u6237\u4ee3\u7801\uff0c\u4f46\u5bf9\u4e8e\u652f\u6301\u5bf9\u8c61\u7684\u5b9e\u7528\u5e93\u548c\u5176\u4ed6\u5de5\u5177\uff0c\u5176\u4ee3\u7801\u53ef\u80fd\u8981\u4f9d\u9760 __dict__ \u6765\u8c03\u8bd5\u3001\u5e8f\u5217\u5316\u5bf9\u8c61\u4ee5\u53ca\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u6700\u540e\uff0c\u5982\u679c\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u4e86 __getattribute__() \u3001 __getattr__() \u548c __setattr__() \u7b49\u65b9\u6cd5\uff0c __slots__ \u7684\u5b58\u5728\u4e0d\u4f1a\u5bf9\u5b83\u4eec\u7684\u8c03\u7528\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u5c06\u8003\u8651\u5230 __slots__ \u3002\u6b64\u5916\u5e94\u8be5\u5f3a\u8c03\u4e00\u70b9\uff0c\u6ca1\u6709\u5fc5\u8981\u5411 __slots__ \u6dfb\u52a0\u65b9\u6cd5\u6216\u7279\u6027\u540d\u79f0\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b58\u50a8\u5728\u7c7b\u4e2d\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u3002 \u53c2\u8003 difference between staticmethod and classmethod in python","title":"4.1.\u7c7b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_1","text":"\u7c7b\u7684\u5b9e\u4f8b\u662f\u4ee5\u51fd\u6570\u5f62\u5f0f\u8c03\u7528\u7c7b\u5bf9\u8c61\u6765\u521b\u5efa\u7684\u3002 __new__ \u65b9\u6cd5\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u7136\u540e\u5c06\u8be5\u5b9e\u4f8b\u4f20\u9012\u7ed9\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002 __init__() \u65b9\u6cd5\u7684\u53c2\u6570\u5305\u62ec\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b self \u548c\u5728\u8c03\u7528\u7c7b\u5bf9\u8c61\u65f6\u63d0\u4f9b\u7684\u53c2\u6570\u3002 \u5728 __init__() \u5185\uff0c\u901a\u8fc7\u5c06\u5c5e\u6027\u5206\u914d\u7ed9 self \u6765\u5c06\u5176\u4fdd\u5b58\u5230\u5b9e\u4f8b\u4e2d\u3002\u4f8b\u5982\uff0c self.name = name \u8868\u793a\u5c06 name \u5c5e\u6027\u4fdd\u5b58\u5728\u5b9e\u4f8b\u4e2d\u3002\u5176\u4e2d\uff0c\u70b9 . \u8fd0\u7b97\u7b26\u7528\u4e8e\u5c5e\u6027\u7ed1\u5b9a\u3002\u5728\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u8fd4\u56de\u5230\u7528\u6237\u4e4b\u540e\uff0c\u4f7f\u7528\u70b9 . \u8fd0\u7b97\u7b26\u5373\u53ef\u8bbf\u95ee\u8fd9\u4e9b\u5c5e\u6027\u4ee5\u53ca\u7c7b\u7684\u5c5e\u6027\u3002 \u8bbf\u95ee\u5c5e\u6027\u65f6\uff0c\u7ed3\u679c\u503c\u53ef\u80fd\u6765\u81ea\u591a\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u3002\u53ef\u80fd\u6765\u81ea\u5b9e\u4f8b\u72ec\u6709\u7684\u5c5e\u6027\uff0c\u4e5f\u53ef\u80fd\u6765\u81ea\u7c7b\u7684\u5c5e\u6027\u3002\u8bbf\u95ee\u5c5e\u6027\u65f6\uff0cPython \u9996\u5148\u4f1a\u68c0\u67e5\u5b9e\u4f8b\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u8be5\u5c5e\u6027\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u5219\u4f1a\u5bf9\u5b9e\u4f8b\u7684\u7c7b\u8fdb\u884c\u641c\u7d22\u3002\u8fd9\u662f\u7c7b\u4e0e\u5176\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u5176\u5c5e\u6027\u7684\u5e95\u5c42\u673a\u5236\u3002","title":"\u7c7b\u5b9e\u4f8b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_2","text":"\u7ee7\u627f\u662f\u4e00\u79cd\u521b\u5efa\u65b0\u7c7b\u7684\u673a\u5236\uff0c\u76ee\u7684\u662f\u4f7f\u7528\u6216\u4fee\u6539\u73b0\u6709\u7c7b\u7684\u884c\u4e3a\u3002\u539f\u59cb\u7c7b\u79f0\u4e3a \u57fa\u7c7b \u6216 \u8d85\u7c7b \u3002\u65b0\u7c7b\u79f0\u4e3a \u6d3e\u751f\u7c7b \u6216 \u5b50\u7c7b \u3002 \u901a\u8fc7\u7ee7\u627f\u521b\u5efa\u7c7b\u65f6\uff0c\u6240\u521b\u5efa\u7684\u7c7b\u5c06\u201c\u7ee7\u627f\u201d\u5176\u57fa\u7c7b\u5b9a\u4e49\u7684\u5c5e\u6027\u3002==\u4f46\u662f\uff0c==\u6d3e\u751f\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4efb\u4f55\u8fd9\u4e9b\u5c5e\u6027\u5e76\u6dfb\u52a0\u81ea\u5df1\u7684\u65b0\u5c5e\u6027\u3002 \u5728class\u8bed\u53e5\u4e2d\u7528\u4ee5\u9017\u53f7\u5206\u9694\u7684\u57fa\u7c7b\u540d\u79f0\u5217\u8868\u6765\u6307\u5b9a\u7ee7\u627f\u3002\u5982\u679c\u6ca1\u6709\u6709\u6548\u7684\u57fa\u7c7b\uff0c\u7c7b\u5c06\u7ee7\u627fobject\u3002object\u662f\u6240\u6709Python\u5bf9\u8c61\u7684\u6839\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u89c1\u65b9\u6cd5\uff08\u5982 __str__() \uff0c\u5b83\u53ef\u521b\u5efa\u4f9b\u6253\u5370\u51fd\u6570\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\uff09\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u7ee7\u627f\u901a\u5e38\u7528\u4e8e\u91cd\u65b0\u5b9a\u4e49\u73b0\u6709\u65b9\u6cd5\u7684\u884c\u4e3a\u3002 \u7ee7\u627f\u662f\u7528\u529f\u80fd\u7a0d\u5fae\u589e\u5f3a\u7684\u70b9 . \u8fd0\u7b97\u7b26\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5982\u679c\u641c\u7d22\u4e00\u4e2a\u5c5e\u6027\u65f6\u672a\u5728\u5b9e\u4f8b\u6216\u5b9e\u4f8b\u7684\u7c7b\u4e2d\u627e\u5230\u5339\u914d\u9879\uff0c\u5c06\u4f1a\u7ee7\u7eed\u641c\u7d22\u57fa\u7c7b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u57fa\u7c7b\u53ef\u4f9b\u641c\u7d22\u4e3a\u6b62\u3002 \u6d3e\u751f\u7c7b\u91cd\u5b9a\u4e49 __init__() \u65f6\uff0c\u4e0d\u4f1a\u81ea\u52a8\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u60f3\u91cd\u5b9a\u4e49 __init__() \uff0c\u8fd8\u60f3\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\uff0c\u90a3\u4e48\u8981\u7531\u6d3e\u751f\u7c7b\u8c03\u7528\u57fa\u7c7b\u7684 __init__() \u65b9\u6cd5\u6765\u5bf9\u5b83\u4eec\u8fdb\u884c\u6070\u5f53\u7684\u521d\u59cb\u5316\u3002\u5982\u679c\u57fa\u7c7b\u672a\u5b9a\u4e49 __init__() \uff0c\u5c31\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e00\u6b65\u3002\u5982\u679c\u4e0d\u77e5\u9053\u57fa\u7c7b\u662f\u5426\u5b9a\u4e49\u4e86 __init__() \uff0c\u53ef\u5728\u4e0d\u63d0\u4f9b\u4efb\u4f55\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u5b83\uff0c\u56e0\u4e3a\u59cb\u7ec8\u5b58\u5728\u4e00\u4e2a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u7684\u9ed8\u8ba4 __init__() \u5b9e\u73b0\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u4eba\u7c7b class Person : def __init__ ( self , name , age ): self . name = name self . age = age def get_name ( self ): return self . name def get_age ( self ): return self . age # \u5b9a\u4e49\u4e00\u4e2a\u7f8e\u56fd\u4eba\u7c7b ## \u73b0\u5728\u60f3\u7ed9\u7f8e\u56fd\u4eba\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u52a0\u4e0a \u6027\u522b \u7684\u5c5e\u6027 class American ( Person ): # \u91cd\u65b0\u5b9a\u4e49__init__()\u4f1a\u8986\u76d6Person\u7684__init__()\u65b9\u6cd5 def __init__ ( self , name , age , gender ): Person . __init__ ( self , name , age ) self . gender = gender def get_gender ( self ): return self . gender jackson = American ( name = \"Cesar T. Mauck\" , age = 14 , gender = \"male\" ) jackson . get_age () 14 jackson . get_gender () 'male' # \u6709\u65f6\uff0c\u6d3e\u751f\u7c7b\u5c06\u91cd\u65b0\u5b9e\u73b0\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd8\u60f3\u8c03\u7528\u539f\u59cb\u7684\u5b9e\u73b0\u3002 \u4e3a\u6b64\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5\uff0c\u5c06\u5b9e\u4f8b self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u5373\u53ef\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u534e\u76db\u987f\u4eba\u7c7b class Washington ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # \u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5 age = American . get_age () age += 1 self . age = age print ( \"Washington people grow up one year old\" ) \u8fd9\u4e2a\u4f8b\u5b50\u7684\u5fae\u5999\u4e4b\u5904\u5728\u4e8e\uff0cAmerican\u8fd9\u4e2a\u7c7b\u5176\u5b9e\u6ca1\u6709\u5b9e\u73b0 get_age() \u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u662f\u5728Person\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002\u5c3d\u7ba1\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u6df7\u6dc6\uff08\u4f8b\u5982\uff0cAmerican\u662f\u5426\u5e94\u8be5\u5b9e\u73b0 get_age() ? \uff09\u3002\u56e0\u6b64\uff0c\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u662f\u7528 super() \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7c7b class California ( American ): def get_age ( self ): return f \" {self.age} years old\" def growing_up ( self ): # \u663e\u5f0f\u5730\u8c03\u7528\u57fa\u7c7b\u4e2d\u7684\u539f\u59cb\u65b9\u6cd5 ## \u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3aget_age()\u65b9\u6cd5\u5728Person\u4e2d\u5b9a\u4e49 ## \u8fd9\u91cc\u53ef\u4ee5\u4f20\u5165Person\u7684\u4efb\u4f55\u4e00\u4e2a\u6d3e\u751f\u7c7b age = super ( California , self ) . get_age () age += 1 self . age = age print ( \"Californians grow up one year old\" ) Terri = California ( \"Terri H. Booth\" , 25 , \"female\" ) Terri . growing_up () Californians grow up one year old super(cls, instance) \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u652f\u6301\u5728\u57fa\u7c7b\u4e0a\u6267\u884c\u5c5e\u6027\u67e5\u627e\u3002\u5982\u679c\u4f7f\u7528\u8be5\u51fd\u6570\uff0cPython\u5c06\u4f7f\u7528\u672c\u6765\u5e94\u8be5\u5728\u57fa\u7c7b\u4e0a\u4f7f\u7528\u7684\u6b63\u5e38\u641c\u7d22\u89c4\u5219\u6765\u641c\u7d22\u5c5e\u6027\u3002\u6709\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5c31\u65e0\u9700\u5199\u6b7b\u65b9\u6cd5\u4f4d\u7f6e\uff0c\u5e76\u4e14\u80fd\u66f4\u6e05\u6670\u5730\u9648\u8ff0\u4f60\u7684\u610f\u56fe\uff08\u5373\u4f60\u5e0c\u671b\u8c03\u7528\u4ee5\u524d\u7684\u5b9e\u73b0\uff0c\u65e0\u8bba\u5b83\u662f\u54ea\u4e2a\u57fa\u7c7b\u5b9a\u4e49\u7684\uff09\u3002\u7136\u800c\uff0c super() \u7684\u8bed\u6cd5\u5c1a\u6709\u4e0d\u8db3\u4e4b\u5904\u3002\u5982\u679c\u4f7f\u7528Python 3\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5316\u7684\u8bed\u53e5 super().get_age() \u6765\u6267\u884c\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u8ba1\u7b97\u3002","title":"\u7ee7\u627f"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_3","text":"Python\u652f\u6301\u591a\u91cd\u7ee7\u627f\u3002\u901a\u8fc7\u8ba9\u4e00\u4e2a\u7c7b\u5217\u51fa\u591a\u4e2a\u57fa\u7c7b\u5373\u53ef\u6307\u5b9a\u591a\u91cd\u7ee7\u627f\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7c7b\u96c6\u5408\uff1a # \u5b9a\u4e49\u4e00\u4e2a\u5723\u62c9\u8499\u4eba\u7c7b class San_Ramon ( American , California , Washington ): def growing_up ( self ): pass Edwin = San_Ramon ( \"Edwin A. Marcotte\" , 37 , \"male\" ) Edwin . get_age () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6c60ffbe4e5a> in <module> 1 # \u5b9a\u4e49\u4e00\u4e2a\u5723\u62c9\u8499\u4eba\u7c7b ----> 2 class San_Ramon(American, California, Washington): 3 def growing_up(self): 4 pass 5 TypeError: Cannot create a consistent method resolution order (MRO) for bases American, California, Washington \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u65f6\uff0c\u5c5e\u6027\u7684\u89e3\u6790\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u641c\u7d22\u8def\u5f84\u6765\u7ed1\u5b9a\u5c5e\u6027\u3002 \u5728\u67e5\u627e\u4f7f\u7528\u4e86\u591a\u91cd\u7ee7\u627f\u7684\u5c5e\u6027\u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u57fa\u7c7b\u6309\u4ece\u201c\u6700\u7279\u6b8a\u201d\u7684\u7c7b\u5230\u201c\u6700\u4e0d\u7279\u6b8a\u201d\u7684\u7c7b\u8fd9\u79cd\u987a\u5e8f\u8fdb\u884c\u6392\u5217\u3002\u7136\u540e\u5728\u641c\u7d22\u5c5e\u6027\u65f6\uff0c\u5c31\u4f1a\u6309\u8fd9\u4e2a\u987a\u5e8f\u641c\u7d22\uff0c\u76f4\u81f3\u627e\u5230\u8be5\u5c5e\u6027\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u7c7b\uff0c\u901a\u8fc7\u6253\u5370\u5b83\u7684 mro \u5c5e\u6027\u5373\u53ef\u67e5\u770b\u57fa\u7c7b\u7684\u987a\u5e8f\uff0c\u4f8b\u5982\uff1a \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5217\u8868\u57fa\u4e8e\u201c\u6709\u610f\u4e49\u201d\u7684\u89c4\u5219\u6392\u5217\u5f97\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u59cb\u7ec8\u5148\u68c0\u67e5\u6d3e\u751f\u7c7b\uff0c\u7136\u540e\u518d\u68c0\u67e5\u5176\u57fa\u7c7b\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u5177\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u90a3\u4e48\u59cb\u7ec8\u6309\u7c7b\u5b9a\u4e49\u4e2d\u5217\u51fa\u7684\u7236\u7c7b\u987a\u5e8f\u68c0\u67e5\u8fd9\u4e9b\u7236\u7c7b\u3002\u4f46\u662f\uff0c\u57fa\u7c7b\u7684\u51c6\u786e\u987a\u5e8f\u5b9e\u9645\u4e0a\u975e\u5e38\u590d\u6742\uff0c\u4e0d\u662f\u57fa\u4e8e\u4efb\u4f55\u201c\u7b80\u5355\u7684\u201d\u7b97\u6cd5\uff0c\u5982\u6df1\u5ea6\u4f18\u5148\u6216\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u5b9e\u9645\u4e0a\uff0c\u57fa\u7c7b\u7684\u987a\u5e8f\u7531 C3 \u7ebf\u6027\u5316\u7b97\u6cd5\u786e\u5b9a\uff0c\u53ef\u4ee5\u5728\u8bba\u6587\u201cA Monotonic Superclass Linearization for Dylan\u201d\uff08K. Barrett \u7b49\uff0c\u53d1\u8868\u4e8e OOPSLA\u201996\uff09\u4e2d\u627e\u5230\u8be5\u7b97\u6cd5\u7684\u4ecb\u7ecd\u3002\u8be5\u7b97\u6cd5\u7684\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u67d0\u4e9b\u7c7b\u5c42\u6b21\u7ed3\u6784\u5c06\u88ab Python \u62d2\u7edd\u5e76\u4f1a\u629b\u51fa TypeError \u9519\u8bef\uff0c\u4f8b\u5982\uff1a \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5927\u591a\u6570\u7a0b\u5e8f\u4e2d\u6700\u597d\u907f\u514d\u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u3002\u4f46\u662f\uff0c\u591a\u91cd\u7ee7\u627f\u6709\u65f6\u53ef\u7528\u4e8e\u5b9a\u4e49\u6240\u8c13\u7684\u6df7\u5408\uff08mixin\uff09\u7c7b\u3002\u6df7\u5408\u7c7b\u901a\u5e38\u5b9a\u4e49\u4e86\u8981\u201c\u6df7\u5408\u5230\u201d\u5176\u4ed6\u7c7b\u4e2d\u7684\u4e00\u7ec4\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\uff08\u8fd9\u4e0e\u5b8f\u5f88\u7c7b\u4f3c\uff09\u3002\u901a\u5e38\uff0c\u6df7\u5408\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5c06\u5047\u5b9a\u5176\u4ed6\u65b9\u6cd5\u5b58\u5728\uff0c\u5e76\u5c06\u4ee5\u8fd9\u4e9b\u65b9\u6cd5\u4e3a\u57fa\u7840\u6784\u5efa\u3002","title":"\u591a\u91cd\u7ee7\u627f"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_4","text":"\u52a8\u6001\u7ed1\u5b9a\uff08\u5728\u7ee7\u627f\u80cc\u666f\u4e0b\u4f7f\u7528\u65f6\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a\u591a\u6001\u6027\uff09\u662f\u6307\u5728\u4e0d\u8003\u8651\u5b9e\u4f8b\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b9e\u4f8b\u53ea\u8981\u4ee5 obj.attr \u7684\u5f62\u5f0f\u8bbf\u95ee\u5c5e\u6027\uff0c\u5c31\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u641c\u7d22\u5e76\u5b9a\u4f4d attr \uff1a \u9996\u5148\u662f\u5b9e\u4f8b\u672c\u8eab\uff0c\u63a5\u7740\u662f\u5b9e\u4f8b\u7684\u7c7b\u5b9a\u4e49\uff0c\u7136\u540e\u662f\u57fa\u7c7b\u3002 \u67e5\u627e\u8fc7\u7a0b\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002 \u8fd9\u79cd\u7ed1\u5b9a\u8fc7\u7a0b\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5b83\u4e0d\u53d7\u5bf9\u8c61 obj \u7684\u7c7b\u578b\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6267\u884c\u50cf obj.name \u8fd9\u6837\u7684\u67e5\u627e\uff0c\u5bf9\u6240\u6709\u62e5\u6709 name \u5c5e\u6027\u7684 obj \u90fd\u662f\u9002\u7528\u7684\u3002 polymorphism \u6e90\u81ea\u5e0c\u814a\u8bed\uff0c\u610f\u601d\u662f\u201c\u6709\u591a\u79cd\u5f62\u6001\u201d\u3002\u8fd9\u5927\u81f4\u610f\u5473\u7740\u5373\u4fbf\u4f60\u4e0d\u77e5\u9053\u53d8\u91cf\u6307\u5411\u7684\u662f\u54ea\u79cd\u5bf9\u8c61\uff0c\u4e5f\u80fd\u591f\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\uff0c\u4e14\u64cd\u4f5c\u7684\u884c\u4e3a\u5c06\u968f\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u578b\uff08\u7c7b\uff09\u800c\u5f02\u3002\u4e5f\u5c31\u662f\u540c\u4e00\u79cd\u8c03\u7528\u5f62\u5f0f\uff0c\u4f46\u6709\u4e0d\u540c\u7684\u6267\u884c\u6548\u679c\u3002 \u5728Python\u4e2d\uff0c\u591a\u6001\u4e5f\u79f0\u4e3a \u9e2d\u5b50\u7c7b\u578b \uff08duck typing\uff09\u3002\u8fd9\u4e2a\u672f\u8bed\u6e90\u81ea James Whitcomb Riley \u572817\u4e16\u7eaa\u5199\u4e0b\u7684\u4e00\u53e5\u8bd7\uff1a When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. \u771f\u4e0d\u77e5\u9053\u8c01\u60f3\u51fa\u8fd9\u4e2a\u672f\u8bed\u7684\uff0c\u5982\u679c\u7528\u6570\u5b66\u8bed\u8a00\u6765\u7c7b\u6bd4\uff0c\u9e2d\u5b50\u7c7b\u578b\u76f8\u5f53\u4e8e\u6570\u5b66\u7684\u516c\u7406\u5316\u5b9a\u4e49\u3002 Python \u7a0b\u5e8f\u5458\u7ecf\u5e38\u7f16\u5199\u5229\u7528\u8fd9\u79cd\u884c\u4e3a\u7684\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60f3\u7f16\u5199\u73b0\u6709\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u7248\u672c\uff0c\u53ef\u4ee5\u7ee7\u627f\u8be5\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5916\u89c2\u548c\u884c\u4e3a\u50cf\u5b83\u4f46\u4e0e\u5b83\u65e0\u4efb\u4f55\u5173\u7cfb\u7684\u5168\u65b0\u5bf9\u8c61\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\u901a\u5e38\u7528\u4e8e\u4fdd\u6301\u7a0b\u5e8f\u7ec4\u4ef6\u7684\u677e\u6563\u8026\u5408\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u7f16\u5199\u4ee3\u7801\u6765\u5904\u7406\u4efb\u4f55\u79cd\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ea\u8981\u8be5\u5bf9\u8c61\u62e5\u6709\u7279\u5b9a\u7684\u65b9\u6cd5\u96c6\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5229\u7528\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u5404\u79cd\u201c\u7c7b\u4f3c\u6587\u4ef6\u201d\u7684\u5bf9\u8c61\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5de5\u4f5c\u65b9\u5f0f\u50cf\u6587\u4ef6\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u7ee7\u627f\u81ea\u5185\u7f6e\u6587\u4ef6\u5bf9\u8c61\u7684\u3002","title":"\u591a\u6001\u52a8\u6001\u7ed1\u5b9a\u548c\u9e2d\u5b50\u7c7b\u578b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_5","text":"\u7c7b\u4e2d\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5373 \u5c06\u5b9e\u4f8b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u3002 \u6839\u636e\u7ea6\u5b9a\uff0c\u8fd9\u4e2a\u53c2\u6570\u540d\u79f0\u4e3aself\uff0c\u5c3d\u7ba1\u6240\u6709\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 self \u53c2\u6570\u6307\u5411\u5bf9\u8c61\u672c\u8eab\u3002 self \u53c2\u6570\u5f88\u6709\u7528\uff0c\u751a\u81f3\u5fc5\u4e0d\u53ef\u5c11\u3002\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u65e0\u6cd5\u8bbf\u95ee\u5bf9\u8c61\u672c\u8eab\uff08\u8981\u64cd\u4f5c\u7684\u5c5e\u6027\u6240\u5c5e\u7684\u5bf9\u8c61\uff09\u3002 \u4e0b\u9762\u662f\u4ee5\u662f\u5b9e\u4f8b\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def printd ( self ): print ( self . data ) ik1 = Kls ( 'arun' ) ik2 = Kls ( 'seema' ) ik1 . printd () ik2 . printd () arun seema \u7136\u540e\u770b\u4e00\u4e0b\u4ee3\u7801\u548c\u793a\u4f8b\u56fe\u7247: \u57281\u30012\u4e2d\uff0c\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002 \u57283\u4e2d\uff0c self\u53c2\u6570\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u3002 \u57284\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u7ed9\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u4f8b\uff0c Python\u89e3\u91ca\u5668\u81ea\u5df1\u4f1a\u505a\u8fd9\u4e9b\u64cd\u4f5c \u3002","title":"\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_6","text":"Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u9759\u6001\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u4e0d\u9700\u8981\u8bbf\u95ee\u5b9e\u4f8b\u5bf9\u8c61\u6216\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u4f46\u4e0e\u7c7b\u6709\u5173\u7684\u529f\u80fd \u521b\u5efa\u6784\u9020\u51fd\u6570 \u7ecf\u5e38\u6709\u4e00\u4e9b\u8ddf\u7c7b\u6709\u5173\u7cfb\u7684\u529f\u80fd\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u53c8\u4e0d\u9700\u8981\u5b9e\u4f8b\u548c\u7c7b\u53c2\u4e0e\uff08\u6bd4\u5982\u66f4\u6539\u73af\u5883\u53d8\u91cf\u6216\u8005\u4fee\u6539\u5176\u4ed6\u7c7b\u7684\u5c5e\u6027\uff09\uff0c\u5f53\u7136\u53ef\u4ee5\u5728\u7c7b\u5b9a\u4e49\u4e4b\u5916\u5199\u4e00\u4e2a\u51fd\u6570\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u4f46\u8fd9\u6837\u4f1a\u6269\u6563\u7c7b\u5185\u90e8\u7684\u4ee3\u7801\uff0c\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002\u6bd4\u5982\u8fd9\u6837\uff1a IND = 'ON' def checkind (): return ( IND == 'ON' ) class Kls ( object ): def __init__ ( self , data ): self . data = data def do_reset ( self ): if checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if checkind (): self . db = 'new db connection' print ( 'DB connection made for:' , self . data ) ik1 = Kls ( 12 ) do_reset ( ik1 ) # Reset done for: 12 set_db ( ik1 ) # DB connection made for: 12 \u5982\u679c\u4f7f\u7528 @staticmethod \u5c31\u80fd\u628a\u76f8\u5173\u7684\u4ee3\u7801\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e86\u3002 IND = 'ON' class Kls ( object ): def __init__ ( self , data ): self . data = data @staticmethod def checkind (): return ( IND == 'ON' ) def do_reset ( self ): if self . checkind (): print ( 'Reset done for:' , self . data ) def set_db ( self ): if self . checkind (): self . db = 'New db connection' print ( 'DB connection made for: ' , self . data ) ik1 = Kls ( 12 ) ik1 . do_reset () ik1 . set_db () Reset done for: 12 DB connection made for: 12 \u5b9e\u9645\u4e0a\uff0c\u9759\u6001\u65b9\u6cd5\u662f\u4e00\u79cd\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4eec\u6b63\u597d\u4f4d\u4e8e\u7c7b\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c \u56e0\u4e3a\u5b83\u4e0d\u4f1a\u5bf9\u4efb\u4f55\u5b9e\u4f8b\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c \u3002 \u5982\u679c\u5728\u7f16\u5199\u7c7b\u65f6\u9700\u8981\u91c7\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u5219\u5e38\u5e38\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\u3002\u56e0\u4e3a\u7c7b\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a __init__() \u51fd\u6570\uff0c\u6240\u4ee5\u66ff\u4ee3\u7684\u521b\u5efa\u51fd\u6570\u901a\u5e38\u6309\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49\uff1a import time class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @staticmethod def now (): t = time . localtime () return Date ( t . tm_year , t . tm_mon , t . tm_mday ) @staticmethod def tomorrow (): t = time . localtime ( time . time () + 86400 ) return Date ( t . tm_year , t . tm_mon , t . tm_mday ) # \u521b\u5efa\u65e5\u671f\u7684\u793a\u4f8b a = Date ( 1967 , 4 , 9 ) b = Date . now () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5now() c = Date . tomorrow () # \u8c03\u7528\u9759\u6001\u65b9\u6cd5tomorrow()","title":"\u9759\u6001\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_7","text":"Note \u4ee5\u4e0b\u4e24\u4e2a\u4ee3\u7801\u793a\u4f8b\u4ecb\u7ecd\u4e86\u7c7b\u65b9\u6cd5\u7684\u4e24\u4e2a\u5e94\u7528\u573a\u666f\uff1a \u521b\u5efa\u6784\u9020\u51fd\u6570 \u52a8\u6001\u66f4\u65b0\u7c7b \u7c7b\u65b9\u6cd5\u662f\u5c06\u7c7b\u672c\u8eab\u4f5c\u4e3a\u5bf9\u8c61\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\u7c7b\u65b9\u6cd5\u4f7f\u7528 @classmethod \u88c5\u9970\u5668\u5b9a\u4e49\uff0c\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u540c\uff0cPython\u89e3\u91ca\u5668\u4f1a\u5c06\u7c7b\u672c\u8eab\u4f20\u9012\u7ed9\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u4e00\u822c\u5c06\u8be5\u53c2\u6570\u547d\u540d\u4e3a cls \uff09\u3002\u4f8b\u5982\uff1a class Times ( object ): factor = 1 @classmethod def mul ( cls , x ): return cls . factor * x class TwoTimes ( Times ): factor = 2 x = TwoTimes . mul ( 4 ) # \u8c03\u7528Times.mul(TwoTimes, 4) -> 8 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8bf7\u6ce8\u610f\u7c7b TwoTimes \u662f\u5982\u4f55\u4f5c\u4e3a\u5bf9\u8c61\u4f20\u9012\u7ed9 mul() \u7684\u3002\u5c3d\u7ba1\u8fd9\u4e2a\u4f8b\u5b50\u6709\u4e9b\u6df1\u5965\uff0c\u4f46\u7c7b\u65b9\u6cd5\u8fd8\u6709\u4e00\u4e9b\u5b9e\u7528\u4e14\u5de7\u5999\u7684\u7528\u6cd5\u3002\u4f8b\u5982\uff0c\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u5b83\u7ee7\u627f\u81ea\u524d\u9762\u7ed9\u51fa\u7684 Date \u7c7b\u5e76\u5bf9\u5176\u7565\u52a0\u5b9a\u5236\uff1a class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) \u7531\u4e8e\u8be5\u7c7b\u7ee7\u627f\u81ea Date\uff0c\u6240\u4ee5\u5b83\u62e5\u6709 Date \u7684\u6240\u6709\u7279\u6027\u3002\u4f46\u662f now() \u548c tomorrow() \u65b9\u6cd5\u7a0d\u5fae\u6709\u70b9\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8c03\u7528 EuroDate.now()\uff0c\u5219\u4f1a\u8fd4\u56de Date \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f EuroDate \u5bf9\u8c61\u3002\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\uff1a class Date ( object ): def __init__ ( self , year , month , day ): self . year = year self . month = month self . day = day @classmethod def now ( cls ): t = time . localtime () return cls ( t . tm_year , t . tm_mon , t . tm_mday ) @classmethod def tomorrow ( cls ): t = time . localtime ( time . time () + 86400 ) return cls ( t . tm_year , t . tm_mon , t . tm_mday ) class EuroDate ( Date ): # \u4fee\u6539\u5b57\u7b26\u4e32\u8f6c\u6362\uff0c\u4ee5\u4f7f\u7528\u6b27\u6d32\u65e5\u671f\u683c\u5f0f def __str__ ( self ): return \" %02d / %02d / %4d \" % ( self . day , self . month , self . year ) a = Date . now () # \u8c03\u7528Date.now(Date)\u5e76\u8fd4\u56deDate b = EuroDate . now () # \u8c03\u7528Date.now(EuroDate)\u5e76\u8fd4\u56deEuroDate print ( type ( a )) print ( type ( b )) <class '__main__.Date'> <class '__main__.EuroDate'> \u7c7b\u65b9\u6cd5\u9664\u4e86\u7528\u4e8e\u521b\u5efa\u6784\u9020\u51fd\u6570\uff0c\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u52a8\u6001\u66f4\u65b0\u7c7b\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u52a8\u6001\u66f4\u65b0\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a class Kls ( object ): models = {} def __init__ ( self , model_name ): # \u52a0\u8f7d\u6a21\u578b pass @classmethod def load_model ( cls , model_name ): cls . models [ model_name ] = cls ( model_name ) @classmethod def get_model ( cls , model_name ): return cls . models . get ( model_name , None ) def predict ( self ): return \"\u9884\u6d4b\u7ed3\u679c\u4e3a1\" model_name = \"svm\" Kls . load_model ( model_name ) model = Kls . get_model ( model_name ) model . predict () '\u9884\u6d4b\u7ed3\u679c\u4e3a1' Kls . models {'svm': <__main__.Kls at 0x21aaefe5908>} \u5f53\u7136\uff0c\u9664\u4e86\u4f7f\u7528\u7c7b\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u663e\u5f0f\u8c03\u7528\u7c7b\u5c5e\u6027\uff0c\u8fbe\u5230\u52a8\u6001\u66f4\u65b0\u7c7b\u7684\u6548\u679c\uff0c\u4f8b\u5982\u6211\u4eec\u8981\u83b7\u53d6\u5b9e\u4f8b\u6570\uff1a class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 @classmethod def get_no_of_instance ( cls_obj ): return cls_obj . no_inst ik1 = Kls () ik2 = Kls () print ( ik1 . get_no_of_instance ()) print ( Kls . get_no_of_instance ()) 2 2 \u4f46\u662f\u5982\u679c\u8981\u7528\u5b9e\u4f8b\u65b9\u6cd5\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u5f97\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8981\u7ed9\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u547d\u540d\u3002\u5728\u7f16\u7a0b\u4e2d\uff0c\u7ed9\u8fc7\u591a\u7684\u53d8\u91cf\u547d\u540d\uff0c\u6709\u65f6\u662f\u4e00\u4e2a\u5934\u75bc\u7684\u95ee\u9898\u3002 \u5728\u7c7b\u5916\u9762\u5199\u4e00\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c\uff0c\u4f46\u4e0d\u5229\u4e8e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002 def get_no_of_instances ( cls_obj ): return cls_obj . no_inst class Kls ( object ): no_inst = 0 def __init__ ( self ): Kls . no_inst = Kls . no_inst + 1 ik1 = Kls () ik2 = Kls () print ( get_no_of_instances ( Kls )) 2","title":"\u7c7b\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_8","text":"\u5728\u5b9e\u4f8b\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u4e2d\uff0cPython\u9ed8\u8ba4\u5c06\u5f53\u524d\u5b9e\u4f8b\u6216\u8005\u7c7b\u5bf9\u8c61\u4f20\u7ed9\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u975e\u6307\u5b9a\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\uff09\uff0c\u5982\u679c\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u4fbf\u4f1a\u62a5\u9519\uff1a class Kls ( object ): def __init__ ( self , data ): self . data = data def imethod1 (): print ( \"\u4e0d\u63a5\u6536\u5b9e\u4f8b\" ) def imethod2 ( * arg ): print ( 'Instance:' , arg ) @staticmethod def smethod ( * arg ): print ( 'Static:' , arg ) @classmethod def cmethod1 (): print ( \"\u4e0d\u63a5\u6536\u7c7b\u5bf9\u8c61\" ) @classmethod def cmethod2 ( * arg ): print ( 'Class:' , arg ) ik3 = Kls ( 'arun' ) ik3 . imethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-82fbcd62768a> in <module> 1 ik3 = Kls('arun') ----> 2 ik3.imethod1() TypeError: imethod1() takes 0 positional arguments but 1 was given ik3 . cmethod1 () ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-6055e1d64eee> in <module> ----> 1 ik3.cmethod1() TypeError: cmethod1() takes 0 positional arguments but 1 was given \u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5fc5\u987b\u8bbe\u7f6e\u53c2\u6570\u63a5\u6536\u7c7b\u5bf9\u8c61\uff1a ik3 . imethod2 () ik3 . cmethod2 () Instance: (<__main__.Kls object at 0x0000021AAEFF0390>,) Class: (<class '__main__.Kls'>,) \u9759\u6001\u65b9\u6cd5\u5219\u4e0d\u4f1a\u4f20\u5165\u5b9e\u4f8b\u6216\u7c7b\u5bf9\u8c61\uff1a ik3 . smethod () Static: () \u5982\u679c\u65b9\u6cd5\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u53ea\u80fd\u901a\u8fc7\u7c7b\u53bb\u8c03\u7528\uff0c\u5e94\u8be5\u907f\u514d\u8fd9\u79cd\u7528\u6cd5\uff0c\u6ca1\u53c2\u6570\u7684\u65b9\u6cd5\u5e94\u8be5\u52a0\u4e0a @staticmethod \u88c5\u9970\u5668\uff1a Kls . imethod1 () \u4e0d\u63a5\u6536\u5b9e\u4f8b \u5173\u4e8e\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0cPython \u4e0d\u4f1a\u5728\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u72ec\u7acb\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7ba1\u7406\u5b83\u4eec\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u6216\u7c7b\u8c03\u7528\u5b83\u4eec\u3002\u4f8b\u5982\uff1a Kls . cmethod2 () Kls ( 'arun' ) . cmethod2 () Kls . smethod () Kls ( 'arun' ) . smethod () Class: (<class '__main__.Kls'>,) Class: (<class '__main__.Kls'>,) Static: () Static: () \u8fd9\u53ef\u80fd\u5f88\u5bb9\u6613\u5f15\u8d77\u6df7\u6dc6\uff0c\u56e0\u4e3a\u5bf9 Kls('arun').cmethod2() \u7684\u8c03\u7528\u4e0e\u5b9e\u4f8b Kls('arun') \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u8fd9\u79cd\u884c\u4e3a\u662f Python \u5bf9\u8c61\u7cfb\u7edf\u4e0e\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff08\u5982 Smalltalk \u548c Ruby\uff09\u5bf9\u8c61\u7cfb\u7edf\u7684\u533a\u522b\u4e4b\u4e00\u3002\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7c7b\u65b9\u6cd5\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u662f\u4e25\u683c\u5206\u5f00\u7684\u3002 \u800c\u5b9e\u4f8b\u65b9\u6cd5\u5fc5\u987b\u901a\u8fc7\u5b9e\u4f8b\u8c03\u7528\uff0c\u56e0\u4e3a\u9700\u8981\u4f20\u5165\u5b9e\u4f8b\u3002","title":"\u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u5bf9\u6bd4"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_9","text":"@property \u2014\u2014\u628a\u65b9\u6cd5\u53d8\u4e3a\u5c5e\u6027 \u901a\u5e38\uff0c\u8bbf\u95ee\u5b9e\u4f8b\u6216\u7c7b\u7684\u5c5e\u6027\u65f6\uff0c\u8fd4\u56de\u7684\u4f1a\u662f\u6240\u5b58\u50a8\u7684\u76f8\u5173\u503c\u3002\u7279\u6027\uff08property\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5c5e\u6027\uff0c\u8bbf\u95ee\u5b83\u65f6\u4f1a\u8ba1\u7b97\u5b83\u7684\u503c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius # Circle\u7684\u4e00\u4e9b\u9644\u52a0\u7279\u6027 @property def area ( self ): return math . pi * self . radius ** 2 @property def preimeter ( self ): return 2 * math . pi * self . radius \u5f97\u5230\u7684Circle\u5bf9\u8c61\u7684\u884c\u4e3a\u5982\u4e0b\uff1a c = Circle ( 4.0 ) c . radius 4.0 c . area 50.26548245743669 c . preimeter 25.132741228718345 c . area = 2 ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-0dac39a0c579> in <module> ----> 1 c.area = 2 AttributeError: can't set attribute \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cCircle \u5b9e\u4f8b\u5b58\u50a8\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf c.radius \u3002 c.area \u548c c.perimeter \u662f\u6839\u636e\u8be5\u503c\u8ba1\u7b97\u5f97\u6765\u7684\u3002 @property \u88c5\u9970\u5668\u652f\u6301\u4ee5\u7b80\u5355\u5c5e\u6027\u7684\u5f62\u5f0f\u8bbf\u95ee\u540e\u9762\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u50cf\u5e73\u5e38\u4e00\u6837\u6dfb\u52a0\u989d\u5916\u7684 () \u6765\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\u5bf9\u8c61\u7684\u4f7f\u7528\u8005\u5f88\u96be\u53d1\u73b0\u6b63\u5728\u8ba1\u7b97\u4e00\u4e2a\u5c5e\u6027\uff0c\u9664\u975e\u5728\u8bd5\u56fe\u91cd\u65b0\u5b9a\u4e49\u8be5\u5c5e\u6027\u65f6\u751f\u6210\u4e86\u9519\u8bef\u6d88\u606f\uff08\u5982\u4e0a\u9762\u7684 AttributeError \u5f02\u5e38\u6240\u793a\uff09\u3002 \u8fd9\u79cd\u7279\u6027\u4f7f\u7528\u65b9\u5f0f\u9075\u5faa\u6240\u8c13\u7684\u7edf\u4e00\u8bbf\u95ee\u539f\u5219\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5c3d\u53ef\u80fd\u4fdd\u6301\u7f16\u7a0b\u63a5\u53e3\u7684\u7edf\u4e00\u603b\u662f\u4e0d\u9519\u7684\u3002\u5982\u679c\u6ca1\u6709\u7279\u6027\uff0c\u5c06\u4f1a\u4ee5\u7b80\u5355\u5c5e\u6027\uff08\u5982 c.radius \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\uff0c\u800c\u5176\u4ed6\u5c5e\u6027\u5c06\u4ee5\u65b9\u6cd5\uff08\u5982 c.area() \uff09\u7684\u5f62\u5f0f\u8bbf\u95ee\u3002\u8d39\u529b\u53bb\u4e86\u89e3\u4f55\u65f6\u6dfb\u52a0\u989d\u5916\u7684 () \u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u6df7\u6dc6\u3002\u7279\u6027\u53ef\u4ee5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 Python \u7a0b\u5e8f\u5458\u5f88\u5c11\u8ba4\u8bc6\u5230\uff0c \u65b9\u6cd5\u672c\u8eab\u662f\u88ab\u9690\u5f0f\u5730\u4f5c\u4e3a\u4e00\u7c7b\u7279\u6027\u5904\u7406\u7684\u3002 \u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7c7b\uff1a class Foo ( object ): def __init__ ( self , name ): self . name = name def spam ( self , x ): print ( \" %s , %s \" % ( self . name , x )) Foo ( \"d\" ) . spam <bound method Foo.spam of <__main__.Foo object at 0x0000021AAEFDC7B8>> \u7528\u6237\u521b\u5efa f = Foo(\"Guido\") \u8fd9\u6837\u7684\u5b9e\u4f8b\u7136\u540e\u8bbf\u95ee f.spam \u65f6\uff0c\u4e0d\u4f1a\u8fd4\u56de\u539f\u59cb\u51fd\u6570\u5bf9\u8c61 spam \uff0c\u800c\u662f\u4f1a\u5f97\u5230\u6240\u8c13\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff08bound method\uff09\uff0c\u7ed1\u5b9a\u65b9\u6cd5\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4ee3\u8868\u5c06\u5728\u5bf9\u8c61\u4e0a\u8c03\u7528 () \u8fd0\u7b97\u7b26\u65f6\u6267\u884c\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u7ed1\u5b9a\u65b9\u6cd5\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5df2\u90e8\u5206\u8ba1\u7b97\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u7684self\u53c2\u6570\u5df2\u7ecf\u586b\u5165\uff0c\u4f46\u5176\u4ed6\u53c2\u6570\u4ecd\u7136\u9700\u8981\u5728\u4f7f\u7528 () \u8c03\u7528\u8be5\u51fd\u6570\u65f6\u63d0\u4f9b\u3002\u8fd9\u79cd\u7ed1\u5b9a\u65b9\u6cd5\u5bf9\u8c61\u662f\u7531\u5728\u540e\u53f0\u6267\u884c\u7684\u7279\u6027\u51fd\u6570\u9759\u9ed8\u5730\u521b\u5efa\u7684\u3002 \u4f7f\u7528 @staticmethod \u548c @classmethod \u5b9a\u4e49\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u6307\u5b9a\u4e86\u4f7f\u7528\u4e0d\u540c\u7684\u7279\u6027\u51fd\u6570\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5bf9\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bbf\u95ee\u3002 \u4f8b\u5982\uff0c @staticmethod \u4ec5\u201c\u6309\u539f\u6837\u201d\u8fd4\u56de\u65b9\u6cd5\u51fd\u6570\uff0c\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u7279\u6b8a\u7684\u5305\u88c5\u6216\u5904\u7406\u3002 \u7279\u6027\u8fd8\u53ef\u4ee5\u622a\u83b7\u64cd\u4f5c\u6743\uff0c\u4ee5\u8bbe\u7f6e\u548c\u5220\u9664\u5c5e\u6027\u3002\u8fd9\u662f\u901a\u8fc7\u5411\u7279\u6027\u9644\u52a0\u5176\u4ed6 setter \u548c deleter \u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Foo ( object ): def __init__ ( self , name ): self . __name = name @property def name ( self ): return self . __name @name . setter def name ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value @name . deleter def name ( self ): raise TypeError ( \"Can't delete name\" ) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u4f7f\u7528 @property \u88c5\u9970\u5668\u548c\u76f8\u5173\u65b9\u6cd5\u5c06\u5c5e\u6027 name \u5b9a\u4e49\u4e3a\u53ea\u8bfb\u7279\u6027\u3002\u540e\u9762\u7684 @name.setter \u548c @name.deleter \u88c5\u9970\u5668\u5c06\u5176\u4ed6\u65b9\u6cd5\u4e0e name \u5c5e\u6027\u4e0a\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u540d\u79f0\u5fc5\u987b\u4e0e\u539f\u59cb\u7279\u6027\u7684\u540d\u79f0\u5b8c\u5168\u5339\u914d\u3002\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u8bf7\u6ce8\u610f\u5b9e\u9645\u7684\u540d\u79f0\u503c\u5b58\u50a8\u5728\u5c5e\u6027 __name \u4e2d\u3002\u6240\u5b58\u50a8\u5c5e\u6027\u7684\u540d\u79f0\u65e0\u9700\u9075\u5faa\u4efb\u4f55\u7ea6\u5b9a\uff0c\u4f46\u5b83\u5fc5\u987b\u4e0e\u7279\u6027\u540d\u79f0\u4e0d\u540c\uff0c\u4ee5\u4fbf\u5c06\u5b83\u4e0e\u7279\u6027\u7684\u540d\u79f0\u533a\u5206\u5f00\u3002 \u5728\u4ee5\u524d\u7684\u4ee3\u7801\u4e2d\uff0c\u901a\u5e38\u4f1a\u770b\u5230\u7528 property(getf=None, setf=None, delf=None, doc=None) \u51fd\u6570\u6765\u5b9a\u4e49\u7279\u6027\uff0c\u5f80\u5176\u4e2d\u4f20\u5165\u4e00\u7ec4\u540d\u79f0\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a class Foo ( object ): def getname ( self ): return self . __name def setname ( self , value ): if not isinstance ( value , str ): raise TypeError ( \"Must be a string!\" ) self . __name = value def delname ( self ): raise TypeError ( \"Can't delete name\" ) name = property ( getname , setname , delname ) \u8fd9\u79cd\u8001\u65b9\u6cd5\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u88c5\u9970\u5668\u7248\u672c\u4f1a\u8ba9\u7c7b\u770b\u8d77\u6765\u66f4\u6574\u6d01\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u88c5\u9970\u5668\uff0cget\u3001 set \u548c delete \u51fd\u6570\u5c06\u4e0d\u4f1a\u663e\u793a\u4e3a\u65b9\u6cd5\u3002","title":"\u7279\u6027"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_10","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u201c\u516c\u5171\u7684\u201d\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u8fd9\u8fd8\u6697\u793a\u7740\uff0c\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u88ab\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u5e76\u53ef\u4ece\u6d3e\u751f\u7c7b\u5185\u8fdb\u884c\u8bbf\u95ee\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u4e0d\u5e0c\u671b\u53d1\u751f\u8fd9\u79cd\u884c\u4e3a\uff0c\u56e0\u4e3a\u5b83\u4f1a\u66b4\u9732\u5bf9\u8c61\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u53ef\u80fd\u5bfc\u81f4\u5728\u6d3e\u751f\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e0e\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u4e4b\u95f4\u53d1\u751f\u547d\u540d\u7a7a\u95f4\u51b2\u7a81\u3002 Note \u8fd9\u610f\u5473\u7740\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49\u3002 \u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c \u7c7b\u4e2d\u6240\u6709\u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\uff08\u5982 __Foo \uff09\u90fd\u4f1a\u81ea\u52a8\u53d8\u5f62\uff0c\u5f62\u6210\u5177\u6709 _Classname__Foo \u5f62\u5f0f\u7684\u65b0\u540d\u79f0\u3002 \u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7c7b\u4e2d\u6dfb\u52a0\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u6709\u6548\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528\u7684\u79c1\u6709\u540d\u79f0\u4e0d\u4f1a\u4e0e\u57fa\u7c7b\u4e2d\u4f7f\u7528\u7684\u76f8\u540c\u79c1\u6709\u540d\u79f0\u53d1\u751f\u51b2\u7a81\uff0c\u5982\u4e0b\u6240\u793a\uff1a class A ( object ): def __init__ ( self ): self . __X = 3 # \u53d8\u5f62\u4e3aself._A__X def __spam ( self ): # \u53d8\u5f62\u4e3a_A__spam() print ( \"A\" ) def bar ( self ): self . __spam () # \u53ea\u8c03\u7528A.__spam() class B ( A ): def __init__ ( self ): A . __init__ ( self ) self . __X = 37 # \u53d8\u5f62\u4e3aself._B__X def __spam ( self ): # \u53d8\u5f62\u4e3a_B__spam() print ( \"B\" ) b = B () # \u6d3e\u751f\u7c7b\u7684\u5b9a\u4e49\u6ca1\u6709\u8986\u76d6\u57fa\u7c7b\u7684\u5b9a\u4e49 b . bar () A \u5c3d\u7ba1\u8fd9\u79cd\u65b9\u6848\u4f3c\u4e4e\u9690\u85cf\u4e86\u6570\u636e\uff0c\u4f46\u5e76\u6ca1\u6709\u4e25\u683c\u7684\u673a\u5236\u6765\u5b9e\u9645\u963b\u6b62\u5bf9\u7c7b\u7684\u201c\u79c1\u6709\u201d\u5c5e\u6027\u8fdb\u884c\u8bbf\u95ee\u3002\u7279\u522b\u662f\u5982\u679c\u5df2\u77e5\u7c7b\u540d\u79f0\u548c\u76f8\u5e94\u79c1\u6709\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53d8\u5f62\u540e\u7684\u540d\u79f0\u6765\u8bbf\u95ee\u5b83\u4eec\u3002\u901a\u8fc7\u91cd\u5b9a\u4e49 dir() \u65b9\u6cd5\uff0c\u7c7b\u53ef\u4ee5\u964d\u4f4e\u8fd9\u4e9b\u5c5e\u6027\u7684\u53ef\u89c1\u6027\uff0c dir() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u68c0\u67e5\u5bf9\u8c61\u7684 dir() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u540d\u79f0\u5217\u8868\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u540d\u79f0\u53d8\u5f62\u4f3c\u4e4e\u662f\u4e00\u4e2a\u989d\u5916\u7684\u5904\u7406\u6b65\u9aa4\uff0c\u4f46\u53d8\u5f62\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u53ea\u5728\u5b9a\u4e49\u7c7b\u65f6\u53d1\u751f\u4e00\u6b21\u3002\u5b83\u4e0d\u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u53d1\u751f\uff0c\u4e5f\u4e0d\u4f1a\u4e3a\u7a0b\u5e8f\u7684\u6267\u884c\u6dfb\u52a0\u989d\u5916\u7684\u5f00\u9500\u3002\u800c\u4e14\u8981\u77e5\u9053\uff0c\u540d\u79f0\u53d8\u5f62\u4e0d\u4f1a\u5728 getattr() \u3001 hasattr() \u3001 setattr() \u6216 delattr() \u7b49\u51fd\u6570\u4e2d\u53d1\u751f\uff0c\u5728\u8fd9\u4e9b\u51fd\u6570\u4e2d\uff0c\u5c5e\u6027\u540d\u88ab\u6307\u5b9a\u4e3a\u5b57\u7b26\u4e32\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u51fd\u6570\uff0c\u9700\u8981\u663e\u5f0f\u4f7f\u7528\u53d8\u5f62\u540d\u79f0\uff08\u5982 __Classname__name \uff09\u6765\u8bbf\u95ee\u5c5e\u6027\u3002 \u5efa\u8bae\u5728\u5b9a\u4e49\u53ef\u53d8\u5c5e\u6027\u65f6\uff0c\u901a\u8fc7\u7279\u6027\u6765\u4f7f\u7528\u79c1\u6709\u5c5e\u6027\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u9f13\u52b1\u7528\u6237\u4f7f\u7528\u7279\u6027\u540d\u79f0\uff0c\u800c\u65e0\u9700\u76f4\u63a5\u8bbf\u95ee\u5e95\u5c42\u5b9e\u4f8b\u6570\u636e\uff08\u5982\u679c\u4f60\u5728\u5b9e\u4f8b\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7279\u6027\uff0c\u53ef\u80fd\u4e0d\u60f3\u91c7\u7528\u8fd9\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff09\u3002 \u901a\u8fc7\u4e3a\u65b9\u6cd5\u63d0\u4f9b\u79c1\u6709\u540d\u79f0\uff0c\u8d85\u7c7b\u53ef\u4ee5\u963b\u6b62\u6d3e\u751f\u7c7b\u91cd\u65b0\u5b9a\u4e49\u548c\u66f4\u6539\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u7684 A.bar() \u65b9\u6cd5\u53ea\u8c03\u7528 A.__spam() \uff0c\u65e0\u8bba self \u5177\u6709\u4f55\u79cd\u7c7b\u578b\uff0c\u6216\u8005\u6d3e\u751f\u7c7b\u4e2d\u662f\u5426\u5b58\u5728\u4e0d\u540c\u7684 __spam() \u65b9\u6cd5\u90fd\u662f\u5982\u6b64\u3002 \u6700\u540e\uff0c\u4e0d\u8981\u6df7\u6dc6\u79c1\u6709\u7c7b\u5c5e\u6027\u7684\u547d\u540d\u548c\u6a21\u5757\u4e2d\u201c\u79c1\u6709\u201d\u5b9a\u4e49\u7684\u547d\u540d\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u662f\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\uff0c\u5728\u5c5e\u6027\u540d\u4e0a\u4f7f\u7528\u5355\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\u6765\u9690\u85cf\u5c5e\u6027\u503c\uff08\u5982 _name \uff09\u3002 \u5728\u6a21\u5757\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u53ef\u4ee5\u963b\u6b62\u901a\u8fc7 from module import * \u8bed\u53e5\u5bfc\u51fa\u540d\u79f0\u3002 \u8fd9\u610f\u5473\u7740\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b9a\u4e49\u53ea\u80fd\u88ab\u7c7b\u672c\u8eab\u548c\u5176\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002\u4f46\u662f\u5728\u7c7b\u4e2d\uff0c\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u65e2\u4e0d\u80fd\u9690\u85cf\u5c5e\u6027\uff0c\u5728\u67d0\u4e2a\u7c7b\u7ee7\u627f\u8be5\u7c7b\u5e76\u4f7f\u7528\u76f8\u540c\u540d\u79f0\u5b9a\u4e49\u4e00\u4e2a\u65b0\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6\uff0c\u4e5f\u4e0d\u80fd\u963b\u6b62\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u3002","title":"\u6570\u636e\u5c01\u88c5\u548c\u79c1\u6709\u5c5e\u6027"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_11","text":"\u4ece\u5185\u90e8\u5b9e\u73b0\u4e0a\u770b\uff0c\u5b9e\u4f8b\u662f\u4f7f\u7528\u5b57\u5178\u6765\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u8bbf\u95ee\u8be5\u5b57\u5178\u3002\u8fd9\u4e2a\u5b57\u5178\u5305\u542b\u7684\u6570\u636e\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u800c\u8a00\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance a = Account ( \"Guido\" , 1100.0 ) a . __dict__ {'name': 'Guido', 'balance': 1100.0} \u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u5411\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u4f8b\u5982\uff1a a . number = 123456 # \u5c06\u5c5e\u6027'number'\u6dfb\u52a0\u5230 a.__dict__ \u5bf9\u5b9e\u4f8b\u7684\u4fee\u6539\u59cb\u7ec8\u4f1a\u53cd\u6620\u5230\u5c40\u90e8 __dict__ \u5c5e\u6027\u4e2d\u3002\u540c\u6837\uff0c\u5982\u679c\u76f4\u63a5\u5bf9 __dict__ \u8fdb\u884c\u4fee\u6539\uff0c\u6240\u505a\u7684\u4fee\u6539\u4e5f\u4f1a\u53cd\u6620\u5728\u5b9e\u4f8b\u7684\u5c5e\u6027\u4e2d\u3002 \u5b9e\u4f8b\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __class__ \u94fe\u63a5\u56de\u5b83\u4eec\u7684\u7c7b\u3002\u7c7b\u672c\u8eab\u4e5f\u53ea\u662f\u5bf9\u5b57\u5178\u7684\u6d45\u5c42\u5305\u88c5\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u7684 __dict__ \u5c5e\u6027\u4e2d\u627e\u5230\u8fd9\u4e2a\u5b57\u5178\u3002\u53ef\u4ee5\u5728\u7c7b\u5b57\u5178\u4e2d\u627e\u5230\u5404\u79cd\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a a . __class__ __main__.Account Account . __dict__ . keys () dict_keys(['__module__', '__init__', '__dict__', '__weakref__', '__doc__']) \u6700\u540e\uff0c\u901a\u8fc7\u7279\u6b8a\u5c5e\u6027 __bases__ \u4e2d\u5c06\u7c7b\u94fe\u63a5\u5230\u5b83\u4eec\u7684\u57fa\u7c7b\uff0c\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u57fa\u7c7b\u5143\u7ec4\u3002\u8fd9\u79cd\u5e95\u5c42\u7ed3\u6784\u662f\u83b7\u53d6\u3001\u8bbe\u7f6e\u548c\u5220\u9664\u5bf9\u8c61\u5c5e\u6027\u7684\u6240\u6709\u64cd\u4f5c\u7684\u57fa\u7840\u3002 \u53ea\u8981\u4f7f\u7528 obj.name = value \u8bbe\u7f6e\u4e86\u5c5e\u6027\uff0c\u7279\u6b8a\u65b9\u6cd5 obj.__setattr__(\"name\", value) \u5c31\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u4f7f\u7528 del obj.name \u5220\u9664\u4e86\u4e00\u4e2a\u5c5e\u6027\uff0c\u5c31\u4f1a\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__delattr__(\"name\") \u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u4fee\u6539\u6216\u5220\u9664 obj \u7684\u5c40\u90e8 __dict__ \u7684\u503c\uff0c\u9664\u975e\u8bf7\u6c42\u7684\u5c5e\u6027\u6b63\u597d\u662f\u4e00\u4e2a\u7279\u6027\u6216\u63cf\u8ff0\u7b26\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u548c\u5220\u9664\u64cd\u4f5c\u5c06\u7531\u4e0e\u8be5\u7279\u6027\u76f8\u5173\u8054\u7684\u8bbe\u7f6e\u548c\u5220\u9664\u51fd\u6570\u6267\u884c\u3002 \u5728\u67e5\u627e\u5c5e\u6027\uff08\u5982 obj.name \uff09\u65f6\uff0c\u5c06\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 obj.__getattrribute__(\"name\") \u3002\u8be5\u65b9\u6cd5\u6267\u884c\u641c\u7d22\u6765\u67e5\u627e\u8be5\u5c5e\u6027\uff0c\u8fd9\u901a\u5e38\u6d89\u53ca\u68c0\u67e5\u7279\u6027\u3001\u67e5\u627e\u5c40\u90e8 __dict__ \u5c5e\u6027\u3001\u68c0\u67e5\u7c7b\u5b57\u5178\u4ee5\u53ca\u641c\u7d22\u57fa\u7c7b\u3002\u5982\u679c\u641c\u7d22\u8fc7\u7a0b\u5931\u8d25\uff0c\u6700\u7ec8\u4f1a\u5c1d\u8bd5\u8c03\u7528\u7c7b\u7684 __getattr__() \u65b9\u6cd5\uff08\u5982\u679c\u5df2\u5b9a\u4e49\uff09\u6765\u67e5\u627e\u8be5\u5c5e\u6027\u3002\u5982\u679c\u8fd9\u4e5f\u5931\u8d25\uff0c\u5c31\u4f1a\u629b\u51fa AttributeError \u5f02\u5e38\u3002 \u5982\u679c\u6709\u5fc5\u8981\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u5176\u81ea\u5df1\u7684\u5c5e\u6027\u8bbf\u95ee\u51fd\u6570\u3002\u4f8b\u5982\uff1a import math class Circle ( object ): def __init__ ( self , radius ): self . radius = radius def __getattr__ ( self , name ): if name == 'area' : return math . pi * self . radius ** 2 elif name == 'perimeter' : return 2 * math . pi * self . radius else : return object . __getattr__ ( self , name ) def __setattr__ ( self , name , value ): if name in [ 'area' , 'perimeter' ]: raise TypeError ( \" %s is readonly\" % name ) from None object . __setattr__ ( self , name , value ) c = Circle ( 2 ) c . area 12.566370614359172 c . area = 10 ---------------------------------------------------------------------------TypeError Traceback (most recent call last)<ipython-input-1-52599b4ddcfc> in <module> ----> 1 c.area = 10 <ipython-input-1-a1a0cdcb1eb3> in __setattr__(self, name, value) 13 def __setattr__(self,name,value): 14 if name in ['area','perimeter']: ---> 15 raise TypeError(\"%s is readonly\" % name) from None 16 object.__setattr__(self,name,value) TypeError: area is readonly \u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7c7b\u5e94\u8be5\u53ef\u4ee5\u4f9d\u9760 object \u4e2d\u7684\u9ed8\u8ba4\u5b9e\u73b0\u6765\u6267\u884c\u5b9e\u9645\u7684\u5de5\u4f5c\u3002\u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u5b9e\u73b0\u80fd\u591f\u5904\u7406\u7c7b\u7684\u66f4\u9ad8\u7ea7\u7279\u6027\uff0c\u5982\u63cf\u8ff0\u7b26\u548c\u7279\u6027\u3002 \u4e00\u822c\u6765\u8bb2\uff0c\u7c7b\u5f88\u5c11\u91cd\u65b0\u5b9a\u4e49\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u4f46\u662f\uff0c\u5728\u7f16\u5199\u901a\u7528\u7684\u5305\u88c5\u5668\u548c\u73b0\u6709\u5bf9\u8c61\u7684\u4ee3\u7406\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u5c5e\u6027\u8bbf\u95ee\u8fd0\u7b97\u7b26\u3002\u901a\u8fc7\u91cd\u65b0\u5b9a\u4e49 __getattr__() \u3001 __setattr__() \u548c __delattr__() \uff0c\u4ee3\u7406\u53ef\u4ee5\u6355\u83b7\u5c5e\u6027\u8bbf\u95ee\u64cd\u4f5c\uff0c\u5e76\u900f\u660e\u5730\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u8f6c\u53d1\u7ed9\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002","title":"\u5bf9\u8c61\u8868\u793a\u548c\u5c5e\u6027\u7ed1\u5b9a"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#__slots__","text":"\u901a\u8fc7\u5b9a\u4e49\u7279\u6b8a\u53d8\u91cf slots \uff0c\u7c7b\u53ef\u4ee5\u9650\u5236\u5bf9\u5408\u6cd5\u5b9e\u4f8b\u5c5e\u6027\u540d\u79f0\u7684\u8bbe\u7f6e\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Account ( object ): def __init__ ( self , name , balance ): self . name = name self . balance = balance __slots__ = ( 'name' , 'balance' ) a = Account ( \"Guido\" , 1100.0 ) a . date = \"12-12\" ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)<ipython-input-1-b978ca4ed4ad> in <module> 7 8 a = Account(\"Guido\", 1100.0) ----> 9 a.date = \"12-12\" AttributeError: 'Account' object has no attribute 'date' \u5b9a\u4e49 __slots__ \u65f6\uff0c\u53ef\u4ee5\u5c06\u5b9e\u4f8b\u4e0a\u5206\u914d\u7684\u5c5e\u6027\u540d\u79f0\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u540d\u79f0\uff0c\u5426\u5219\u5c06\u5f15\u53d1 AttributeError \u5f02\u5e38\u3002\u8fd9\u79cd\u9650\u5236\u53ef\u4ee5\u963b\u6b62\u5176\u4ed6\u4eba\u5411\u73b0\u6709\u5b9e\u4f8b\u6dfb\u52a0\u65b0\u5c5e\u6027\uff0c\u5373\u4fbf\u7528\u6237\u5c06\u5c5e\u6027\u540d\u79f0\u5199\u9519\uff0c\u4e5f\u4e0d\u4f1a\u521b\u5efa\u51fa\u65b0\u7684\u5c5e\u6027\u6765\u3002 \u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c __slots__ \u4ece\u672a\u88ab\u5f53\u4f5c\u4e00\u79cd\u5b89\u5168\u7684\u7279\u6027\u6765\u5b9e\u73b0\u3002\u5b83\u5b9e\u9645\u4e0a\u662f\u5bf9\u5185\u5b58\u548c\u6267\u884c\u901f\u5ea6\u7684\u4e00\u79cd\u6027\u80fd\u4f18\u5316\u3002 \u4f7f\u7528 __slots__ \u7684\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u518d\u4f7f\u7528\u5b57\u5178\u6765\u5b58\u50a8\u5b9e\u4f8b\u6570\u636e\uff0c\u8f6c\u800c\u91c7\u7528\u4e00\u79cd\u57fa\u4e8e\u6570\u7ec4\u7684\u66f4\u52a0\u7d27\u51d1\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728\u4f1a\u521b\u5efa\u5927\u91cf\u5bf9\u8c61\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528 __slots__ \u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u6267\u884c\u65f6\u95f4\u3002 \u6ce8\u610f\uff0c __slots__ \u4e0e\u7ee7\u627f\u7684\u914d\u5408\u4f7f\u7528\u9700\u8981\u4e00\u5b9a\u7684\u6280\u5de7\u3002\u5982\u679c\u7c7b\u7ee7\u627f\u81ea\u4f7f\u7528 __slots__ \u7684\u57fa\u7c7b\uff0c\u90a3\u4e48\u5b83\u4e5f\u9700\u8981\u5b9a\u4e49 __slots__ \u6765\u5b58\u50a8\u81ea\u5df1\u7684\u5c5e\u6027\uff08\u5373\u4f7f\u5b83\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u5c5e\u6027\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u8fd9\u6837\u624d\u80fd\u5229\u7528 __slots__ \u63d0\u4f9b\u7684\u4f18\u52bf\u3002\u5982\u679c\u5fd8\u8bb0\u4e86\u8fd9\u4e00\u70b9\uff0c\u6d3e\u751f\u7c7b\u7684\u8fd0\u884c\u901f\u5ea6\u5c06\u66f4\u6162\uff0c\u5360\u7528\u7684\u5185\u5b58\u4e5f\u66f4\u591a\uff0c\u6bd4\u5b8c\u5168\u4e0d\u4f7f\u7528 __slots__ \u65f6\u60c5\u51b5\u66f4\u7cdf\u3002 __slots__ \u7684\u4f7f\u7528\u8fd8\u4f1a\u7834\u574f\u671f\u671b\u5b9e\u4f8b\u5177\u6709\u5e95\u5c42 __dict__ \u5c5e\u6027\u7684\u4ee3\u7801\u3002\u5c3d\u7ba1\u8fd9\u4e00\u70b9\u901a\u5e38\u4e0d\u9002\u7528\u4e8e\u7528\u6237\u4ee3\u7801\uff0c\u4f46\u5bf9\u4e8e\u652f\u6301\u5bf9\u8c61\u7684\u5b9e\u7528\u5e93\u548c\u5176\u4ed6\u5de5\u5177\uff0c\u5176\u4ee3\u7801\u53ef\u80fd\u8981\u4f9d\u9760 __dict__ \u6765\u8c03\u8bd5\u3001\u5e8f\u5217\u5316\u5bf9\u8c61\u4ee5\u53ca\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u6700\u540e\uff0c\u5982\u679c\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u4e86 __getattribute__() \u3001 __getattr__() \u548c __setattr__() \u7b49\u65b9\u6cd5\uff0c __slots__ \u7684\u5b58\u5728\u4e0d\u4f1a\u5bf9\u5b83\u4eec\u7684\u8c03\u7528\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u5c06\u8003\u8651\u5230 __slots__ \u3002\u6b64\u5916\u5e94\u8be5\u5f3a\u8c03\u4e00\u70b9\uff0c\u6ca1\u6709\u5fc5\u8981\u5411 __slots__ \u6dfb\u52a0\u65b9\u6cd5\u6216\u7279\u6027\u540d\u79f0\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b58\u50a8\u5728\u7c7b\u4e2d\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u3002","title":"__slots__"},{"location":"Python%E5%9F%BA%E7%A1%80/4.1.%E7%B1%BB.html#_12","text":"difference between staticmethod and classmethod in python","title":"\u53c2\u8003"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html","text":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u5757 \u5982\u679c\u4f60\u60f3\u8981\u7f16\u5199\u4e00\u4e9b\u66f4\u5927\u7684\u7a0b\u5e8f\uff0c\u80af\u5b9a\u4e0d\u60f3\u5b9a\u4e49\u91cd\u590d\u7684\u51fd\u6570\u3001\u7c7b\uff0c\u60f3\u8ba9\u4ee3\u7801\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002\u968f\u7740\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u5206\u5272\u6210\u51e0\u4e2a\u66f4\u6613\u4e8e\u7ef4\u62a4\u7684\u6587\u4ef6\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u9700\u8981\uff0cPython \u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u5b9a\u4e49\uff0c\u5728\u811a\u672c\u6216\u8005\u89e3\u91ca\u5668\u7684\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u3002\u8fd9\u6837\u7684\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757\u3002\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u6a21\u5757\u5c31\u662f\u4e00\u4e2a.py\u6587\u4ef6\u3002 \u6a21\u5757\u641c\u7d22\u8def\u5f84 Python \u600e\u6837\u77e5\u9053\u4ece\u4f55\u5904\u627e\u5230\u6a21\u5757\u6587\u4ef6\uff1f \u5982\u679c\u4f60\u719f\u6089\u547d\u4ee4\u884c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5bf9\u4f60\u6765\u8bf4\u5c31\u4e0d\u96be\u7406\u89e3\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u7684\u4efb\u4f55\u547d\u4ee4\uff0c\u5b9e\u9645\u4e0a\u80cc\u540e\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff08\u6bd4\u5982 cmd, bash\uff09\u4f1a\u4ece\u4e00\u4e2a\u5168\u5c40\u7684\u73af\u5883\u53d8\u91cf PATH \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u6709\u5e8f\u7684\u5217\u8868\u3002\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u8def\u5f84\uff0c\u800c\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff0c\u4f1a\u4f9d\u6b21\u5728\u8fd9\u4e9b\u8def\u5f84\u91cc\uff0c\u641c\u7d22\u9700\u8981\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 Python \u641c\u5bfb\u6a21\u5757\u6587\u4ef6\uff0c\u4e5f\u9075\u5faa\u4e86\u7c7b\u4f3c\u7684\u601d\u8def\u3002\u6bd4\u5982\uff0c\u7528\u6237\u5728 Python \u4e2d\u5c1d\u8bd5\u5bfc\u5165 import foobar\uff0c\u90a3\u4e48 \u9996\u5148\uff0cPython \u4f1a\u5728\u5185\u5efa\u6a21\u5757\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\uff08\u5f53\u524d\u811a\u672c\u6240\u5728\u8def\u5f84\uff0c\u6216\u8005\u6267\u884c Python \u89e3\u91ca\u5668\u7684\u8def\u5f84\uff09\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u73af\u5883\u53d8\u91cf PYTHONPATH \u4e2d\u6307\u793a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4f9d\u65e7\u672a\u80fd\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5b89\u88c5\u65f6\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u65e7\u5931\u8d25\uff0c\u5219 Python \u4f1a\u62a5\u9519\uff0c\u63d0\u793a\u627e\u4e0d\u5230 foobar \u8fd9\u4e2a\u6a21\u5757\u3002 \u6dfb\u52a0\u641c\u7d22\u8def\u5f84 \u5f53\u6211\u4eec\u4f7f\u7528import\u52a0\u8f7d\u81ea\u5df1\u7f16\u5199\u7684py\u4ee3\u7801\u65f6\uff0c\u5fc5\u987b\u653e\u5728python\u7684\u641c\u7d22\u8def\u5f84\u4e0b\u624d\u53ef\u4ee5import\u3002 \u6dfb\u52a0\u4e34\u65f6\u8def\u5f84\u2014\u2014 sys.path.append \u5728python\u4e2d\u5f15\u5165 sys \uff0c sys \u4e2d\u7684 path \u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5185\u5bb9\u5c31\u662f\u8def\u5f84\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06sys\u5f15\u5165\u540e\u67e5\u770b\u5c31\u53ef\u4ee5\u6e05\u695a\u7684\u77e5\u9053\u4e86\uff1a import sys print ( type ( sys . path )) sys . path <class 'list'> ['...\\\\Anaconda3\\\\python37.zip', '...\\\\Anaconda3\\\\DLLs', '...\\\\Anaconda3\\\\lib', '...\\\\Anaconda3', '...\\\\Anaconda3\\\\lib\\\\site-packages', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\xgboost-1.0.0_snapshot-py3.7.egg', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions'] \u65e2\u7136\u662flist\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f7f\u7528append\u53ef\u4ee5\u5411\u5217\u8868\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u8def\u5f84\u662f \"C:\\Users\\Android\\Desktop\" \uff1a import sys sys . path . append ( r \"C:\\Users\\Android\\Desktop\" ) \u4f46\u8fd9\u53ea\u662f\u4e34\u65f6\u6dfb\u52a0\u8def\u5f84\uff0c\u5982\u679c\u91cd\u542f\u7f16\u8bd1\u5668\uff0c\u6dfb\u52a0\u7684\u8def\u5f84\u5c31\u4f1a\u6d88\u5931\u3002 \u4fee\u6539\u73af\u5883\u53d8\u91cf \u5728Windows10\u4e2d\uff0c\u9009\u62e9 ->\u63a7\u5236\u9762\u677f\\\u7cfb\u7edf\u548c\u5b89\u5168\\\u7cfb\u7edf->\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e->\u73af\u5883\u53d8\u91cf \uff0c # \u627e\u5230path\u540e\u9009\u62e9\u7f16\u8f91\uff0c\u6dfb\u52a0\u65b0\u7684\u8def\u5f84\u3002 \u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u9002\u7528\u6240\u6709python\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u5e76\u672a\u5c06\u8981\u67e5\u627e\u7684\u8def\u5f84\u6dfb\u52a0\u5230python\u7684Path\u7cfb\u7edf\u73af\u5883\u4e2d\uff0c\u5728sys.path\u7684\u5217\u8868\u4e2d\u627e\u4e0d\u5230\u76f8\u5173\u8def\u5f84\u7684\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u5c06\u8def\u5f84\u6dfb\u52a0\u5230python\u7684\u641c\u7d22\u8def\u5f84\u4e2d\u3002 \u6dfb\u52a0\u6c38\u4e45\u641c\u7d22\u8def\u5f84\u2014\u2014\u589e\u52a0.pth\u6587\u4ef6 \u5728site-packages\u6587\u4ef6\u5939\u6dfb\u52a0path\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u641c\u7d22\u8def\u5f84\u7684\u6c38\u4e45\u6dfb\u52a0\u3002\u65b9\u6cd5\u5982\u4e0b\uff1a \u5148\u7f16\u8f91\u4e00\u4e2a\u6269\u5c55\u540d\u4e3a .pth \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5728\u8fd9\u4e2a\u6587\u672c\u6587\u4ef6\u91cc\u9762\u5199\u4e0a\u8981\u6dfb\u52a0\u7684path\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f8b\u5982\uff1a \u6587\u672c\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u662f\uff1atest.pth test.pth \u6587\u4ef6\u7684\u5185\u5bb9\u662f\uff1a C:\\Users\\Android\\Desktop \u63a5\u7740\u83b7\u53d6python\u7684site-packages\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff1a import site site . getsitepackages () ['G:\\\\Installed\\\\Anaconda3', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages'] \u7136\u540e\u5c06 test.pth \u6587\u4ef6\u653e\u8fdb G:\\Installed\\Anaconda3\\lib\\site-packages \u91cc\u9762\u5373\u53ef\u3002 \u6a21\u5757\u7684\u5bfc\u5165 \u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757(module)\u5bfc\u5165: \u4f8b\u5982\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u4f7f\u7528 sys \u6a21\u5757\uff0c\u90a3\u4e48\u9996\u5148\u8981\u5bfc\u5165\u8be5\u6a21\u5757\uff1a import sys \u5bfc\u5165 sys \u6a21\u5757\u540e\uff0c\u6211\u4eec\u5c31\u6709\u4e86 \u53d8\u91cf sys \u6307\u5411\u8be5\u6a21\u5757\uff0c\u5229\u7528 sys \u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee sys \u6a21\u5757\u7684\u6240\u6709\u529f\u80fd\u3002 \u4e5f\u5c31\u662f\u8bf4\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u3002 \u4e5f\u53ef\u4ee5\u4e00\u6b21\u6027\u5bfc\u5165\u591a\u4e2amodule\uff1a import os , sys , time \u901a\u8fc7 as \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u5728\u5bfc\u5165module\u7684\u65f6\u5019\uff0c\u7ed9module\u5b9a\u4e49\u522b\u540d\uff1a import sys as system \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u51fd\u6570\uff1a \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570 from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570 from somemodule import firstfunc , secondfunc , thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165 from somemodule import * \u4e00\u822c\u800c\u8a00\uff0c\u9664\u4e86\u5b9e\u9a8c\u3001\u6392\u67e5\uff0c\u4e0d\u63a8\u8350\u5bfc\u5165\u6a21\u5757\u5185\u7684\u6240\u6709\u516c\u5f00\u7b26\u53f7\uff08\u6ca1\u6709\u524d\u7f00 _ \u7684\u90a3\u4e9b\uff09\u3002\u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u4f1a\u4fee\u6539namespace\uff0c\u800c\u901a\u5e38\u4f60\u4e0d\u77e5\u9053\u6a21\u5757\u5b9a\u4e49\u4e86\u54ea\u4e9b\u7b26\u53f7\u3001\u662f\u5426\u4e0e\u5f53\u524d\u7684namespace\u6709\u91cd\u540d\u7684\u7b26\u53f7\u3002\u4e00\u65e6\u6709\u91cd\u540d\uff0c\u90a3\u4e48\uff0c\u5c31\u4f1a\u8986\u76d6\u6389\u5f53\u524dnamespace\u7684\u503c\u3002\u4ece\u800c\u9020\u6210\u96be\u4ee5\u6392\u67e5\u7684\u9519\u8bef \u6a21\u5757\u91cd\u8f7d \u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c \u6bcf\u4e2a\u6a21\u5757\u5728\u6bcf\u4e2a\u89e3\u91ca\u5668\u4f1a\u8bdd\u4e2d\u53ea\u5bfc\u5165\u4e00\u904d\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4fee\u6539\u4e86\u7684\u6a21\u5757\uff0c\u9700\u8981\u91cd\u542f\u89e3\u91ca\u5668\uff1b\u5982\u679c\u60f3\u4ea4\u4e92\u5f0f\u5730\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff1a \u6ce8\u610f \u53ea\u80fd\u91cd\u8f7d\u6a21\u5757\uff0c\u4e0d\u80fd\u5355\u72ec\u91cd\u8f7d\u6a21\u5757\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u3002 Python 2.x\uff1a reload ( modulename ) Python 2.x \u81f3 Python3.3\uff1a import imp imp . reload ( modulename ) Python3.4+\uff1a import importlib importlib . reload ( modulename ) \u53e6\u5916\uff0cspyder \u7684UMR(user module reloader)\u63d0\u4f9b\u4e86\u81ea\u52a8\u91cd\u8f7d\u6a21\u5757\u7684\u529f\u80fd\u3002 __name__ \u548c Python \u4e2d\u7684\u5176\u5b83\u5bf9\u8c61\u4e00\u6837\uff0cPython \u4e5f\u4e3a\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5f62\u5982 __foo__ \u7684\u53d8\u91cf\u3002\u5bf9\u4e8e\u6a21\u5757\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u5b83\u7684\u540d\u5b57 __name__ \u4e86\u3002\u6bcf\u5f53 Python \u6267\u884c\u811a\u672c\uff0c\u5b83\u5c31\u4f1a\u4e3a\u8be5\u811a\u672c\u8d4b\u4e88\u4e00\u4e2a\u540d\u5b57\uff1a \u5bf9\u4e8e\u300c\u4e3b\u7a0b\u5e8f\u300d\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a \"__main__\" \u5bf9\u4e8e\u88ab import \u8fdb\u4e3b\u7a0b\u5e8f\u7684\u6a21\u5757\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a\u811a\u672c\u7684\u6587\u4ef6\u540d\uff08base filename\uff09 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u5f62\u5f0f\uff0c\u5728\u6a21\u5757\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e9b\u6d4b\u8bd5\u4ee3\u7801\uff1a if __name__ == \"__main__\" : ... \u5f53\u811a\u672c\u88ab\u76f4\u63a5\u8fd0\u884c\u65f6\uff0c\u6d4b\u8bd5\u4ee3\u7801\u5c31\u4f1a\u88ab\u8fd0\u884c\uff1b\u5f53\u811a\u672c\u4f5c\u4e3a\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u4f1a\u88ab\u8fd0\u884c\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\uff1a \u53c2\u8003\uff1a Python \u4e2d\u7684\u9ed1\u6697\u89d2\u843d\uff08\u4e09\uff09\uff1a\u6a21\u5757\u4e0e\u5305 #!/usr/bin/env python3 # -*- coding: utf-8 -*- ' a test module ' __author__ = 'Michael Liao' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () Hello, world! \u4f5c\u7528\u57df \u5728\u4e00\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5b9a\u4e49\u5f88\u591a\u51fd\u6570\u548c\u53d8\u91cf\uff0c\u4f46\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u7ed9\u522b\u4eba\u4f7f\u7528\uff0c\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u4ec5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u4f7f\u7528\uff08\u9690\u85cf\u4ee3\u7801\u5185\u90e8\u903b\u8f91\uff09\uff0c\u5728Python\u4e2d\uff0c\u662f\u901a\u8fc7 _ \u524d\u7f00\u6765\u5b9e\u73b0\u7684\u3002 \u6b63\u5e38\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u662f\u516c\u5f00\u7684\uff08public\uff09\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982\uff1a abc \uff0c x123 \uff0c PI \u7b49\uff1b \u7c7b\u4f3c __xxx__ \u8fd9\u6837\u7684\u53d8\u91cf\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u4f46\u662f\u6709\u7279\u6b8a\u7528\u9014\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 __author__ \uff0c __name__ \u5c31\u662f\u7279\u6b8a\u53d8\u91cf\uff0c hello \u6a21\u5757\u5b9a\u4e49\u7684\u6587\u6863\u6ce8\u91ca\u4e5f\u53ef\u4ee5\u7528\u7279\u6b8a\u53d8\u91cf __doc__ \u8bbf\u95ee\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u53d8\u91cf\u4e00\u822c\u4e0d\u8981\u7528\u8fd9\u79cd\u53d8\u91cf\u540d\uff1b \u7c7b\u4f3c _xxx \u548c __xxx \u8fd9\u6837\u7684\u51fd\u6570\u6216\u53d8\u91cf\u5c31\u662f\u975e\u516c\u5f00\u7684\uff08private\uff09\uff0c\u4e0d\u5e94\u8be5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982 _abc \uff0c __abc \u7b49\uff1b \u4e4b\u6240\u4ee5\u6211\u4eec\u8bf4\uff0cprivate\u51fd\u6570\u548c\u53d8\u91cf\u201c\u4e0d\u5e94\u8be5\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u201c\u4e0d\u80fd\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u662f\u56e0\u4e3aPython\u5e76\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u5168\u9650\u5236\u8bbf\u95eeprivate\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u4ece\u7f16\u7a0b\u4e60\u60ef\u4e0a\u4e0d\u5e94\u8be5\u5f15\u7528private\u51fd\u6570\u6216\u53d8\u91cf\u3002 \u201c\u7f16\u8bd1\u7684\u201d Python \u6587\u4ef6\u2014\u2014 pyc \u6587\u4ef6 \u548c LaTeX \u4e2d\u9047\u5230\u7684\u95ee\u9898\u4e00\u6837\uff1a\u88c5\u8f7d\u5927\u91cf\u6587\u672c\u6587\u4ef6\uff08 .py \u6587\u4ef6\uff09\u662f\u5f88\u6162\u7684\u3002\u56e0\u6b64 Python \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c LaTeX \u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5c06\u6a21\u5757\u7f16\u8bd1\u6210\u5bb9\u6613\u88c5\u8f7d\u7684\u6587\u4ef6\uff0c\u5e76\u5728 __pycache__ \u76ee\u5f55\u4e0b\u4ee5 module.*version*.pyc \u540d\u5b57\u7f13\u5b58\u8fd9\u4e9b\u6587\u4ef6\u3002\uff08\u76f8\u5f53\u4e8e LaTeX \u4e2d\u7684 dump \u683c\u5f0f\u6587\u4ef6 .fmt \uff09\u3002 \u8fd9\u91cc\u7684\u7248\u672c\u7f16\u5236\u4e86\u7f16\u8bd1\u540e\u6587\u4ef6\u7684\u683c\u5f0f\u3002\u5b83\u901a\u5e38\u4f1a\u5305\u542b Python \u7684\u7248\u672c\u53f7\u3002\u4f8b\u5982\uff0c\u5728 CPython 3.3 \u7248\u4e2d\uff0cspam.py \u7f16\u8bd1\u540e\u7684\u7248\u672c\u5c06\u7f13\u5b58\u4e3a __pycache__/spam.cpython-33.pyc \u3002\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u5141\u8bb8\u7531\u4e0d\u540c\u53d1\u5e03\u548c\u4e0d\u540c\u7248\u672c\u7684 Python \u7f16\u8bd1\u7684\u6a21\u5757\u540c\u65f6\u5b58\u5728\u3002 \u5f53 Python \u7f16\u8bd1\u597d\u6a21\u5757\u4e4b\u540e\uff0c\u4e0b\u6b21\u8f7d\u5165\u65f6\uff0cPython \u5c31\u4f1a\u8bfb\u53d6\u76f8\u5e94\u7684 .pyc \u6587\u4ef6\uff0c\u800c\u4e0d\u662f .py \u6587\u4ef6\u3002\u800c\u88c5\u8f7d .pyc \u6587\u4ef6\u4f1a\u6bd4\u88c5\u8f7d .py \u6587\u4ef6\u66f4\u5feb\u3002 Python \u4f1a\u68c0\u67e5\u6e90\u6587\u4ef6\u4e0e\u7f16\u8bd1\u7248\u7684\u4fee\u6539\u65e5\u671f\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u8fc7\u671f\u5e76\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3002 \u8fd9\u662f\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u8fc7\u7a0b\u3002\u540c\u65f6\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u5e93\u53ef\u4ee5\u5728\u4e0d\u540c\u67b6\u6784\u7684\u7cfb\u7edf\u4e4b\u95f4\u5171\u4eab\u3002 Python \u4e0d\u68c0\u67e5\u5728\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\u7684\u7f13\u5b58\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6c38\u8fdc\u91cd\u65b0\u7f16\u8bd1\u800c\u4e14\u4e0d\u4f1a\u5b58\u50a8\u76f4\u63a5\u4ece\u547d\u4ee4\u884c\u52a0\u8f7d\u7684\u6a21\u5757\u3002\u5176\u6b21\uff0c\u5982\u679c\u6ca1\u6709\u6e90\u6a21\u5757\u5b83\u4e0d\u4f1a\u68c0\u67e5\u7f13\u5b58\u3002\u82e5\u8981\u652f\u6301\u6ca1\u6709\u6e90\u6587\u4ef6\uff08\u53ea\u6709\u7f16\u8bd1\u7248\uff09\u7684\u53d1\u5e03\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u5fc5\u987b\u5728\u6e90\u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u5fc5\u987b\u6ca1\u6709\u6e90\u6587\u4ef6\u7684\u6a21\u5757\u3002 \u90e8\u5206\u9ad8\u7ea7\u6280\u5de7: \u4e3a\u4e86\u51cf\u5c11\u4e00\u4e2a\u7f16\u8bd1\u6a21\u5757\u7684\u5927\u5c0f\uff0c\u4f60\u53ef\u4ee5\u5728 Python \u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -O \u6216\u8005 -OO \u3002 -O \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\uff0c -OO \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\u548c doc \u5b57\u7b26\u4e32\u3002 \u56e0\u4e3a\u67d0\u4e9b\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u53d8\u91cf\u7684\u53ef\u7528\u6027\uff0c\u4f60\u5e94\u8be5\u53ea\u5728\u786e\u5b9a\u65e0\u8bef\u7684\u573a\u5408\u4f7f\u7528\u8fd9\u4e00\u9009\u9879\u3002\u201c\u4f18\u5316\u7684\u201d \u6a21\u5757\u6709\u4e00\u4e2a .pyo \u540e\u7f00\u800c\u4e0d\u662f .pyc \u540e\u7f00\u3002\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u6539\u53d8\u4f18\u5316\u7684\u6548\u679c\u3002 \u6765\u81ea .pyc \u6587\u4ef6\u6216 .pyo \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u6bd4\u6765\u81ea .py \u6587\u4ef6\u7684\u8fd0\u884c\u66f4\u5feb\uff1b .pyc \u6216 .pyo \u6587\u4ef6\u53ea\u662f\u5728\u5b83\u4eec\u52a0\u8f7d\u7684\u65f6\u5019\u66f4\u5feb\u4e00\u4e9b\u3002 compileall \u6a21\u5757\u53ef\u4ee5\u4e3a\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6a21\u5757\u521b\u5efa .pyc \u6587\u4ef6\uff08\u6216\u8005\u4f7f\u7528 -O \u53c2\u6570\u521b\u5efa .pyo \u6587\u4ef6\uff09\u3002 \u5728 PEP 3147 \u4e2d\u6709\u5f88\u591a\u5173\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u7684\u7ec6\u8282\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u4e00\u4e2a\u51b3\u7b56\u6d41\u7a0b\u3002","title":"4.2.\u6a21\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_1","text":"\u5982\u679c\u4f60\u60f3\u8981\u7f16\u5199\u4e00\u4e9b\u66f4\u5927\u7684\u7a0b\u5e8f\uff0c\u80af\u5b9a\u4e0d\u60f3\u5b9a\u4e49\u91cd\u590d\u7684\u51fd\u6570\u3001\u7c7b\uff0c\u60f3\u8ba9\u4ee3\u7801\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002\u968f\u7740\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u5206\u5272\u6210\u51e0\u4e2a\u66f4\u6613\u4e8e\u7ef4\u62a4\u7684\u6587\u4ef6\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u9700\u8981\uff0cPython \u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u5b9a\u4e49\uff0c\u5728\u811a\u672c\u6216\u8005\u89e3\u91ca\u5668\u7684\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u3002\u8fd9\u6837\u7684\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757\u3002\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u6a21\u5757\u5c31\u662f\u4e00\u4e2a.py\u6587\u4ef6\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6a21\u5757"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_2","text":"Python \u600e\u6837\u77e5\u9053\u4ece\u4f55\u5904\u627e\u5230\u6a21\u5757\u6587\u4ef6\uff1f \u5982\u679c\u4f60\u719f\u6089\u547d\u4ee4\u884c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5bf9\u4f60\u6765\u8bf4\u5c31\u4e0d\u96be\u7406\u89e3\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u7684\u4efb\u4f55\u547d\u4ee4\uff0c\u5b9e\u9645\u4e0a\u80cc\u540e\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff08\u6bd4\u5982 cmd, bash\uff09\u4f1a\u4ece\u4e00\u4e2a\u5168\u5c40\u7684\u73af\u5883\u53d8\u91cf PATH \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u6709\u5e8f\u7684\u5217\u8868\u3002\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u8def\u5f84\uff0c\u800c\u547d\u4ee4\u884c\u89e3\u91ca\u5668\uff0c\u4f1a\u4f9d\u6b21\u5728\u8fd9\u4e9b\u8def\u5f84\u91cc\uff0c\u641c\u7d22\u9700\u8981\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 Python \u641c\u5bfb\u6a21\u5757\u6587\u4ef6\uff0c\u4e5f\u9075\u5faa\u4e86\u7c7b\u4f3c\u7684\u601d\u8def\u3002\u6bd4\u5982\uff0c\u7528\u6237\u5728 Python \u4e2d\u5c1d\u8bd5\u5bfc\u5165 import foobar\uff0c\u90a3\u4e48 \u9996\u5148\uff0cPython \u4f1a\u5728\u5185\u5efa\u6a21\u5757\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\uff08\u5f53\u524d\u811a\u672c\u6240\u5728\u8def\u5f84\uff0c\u6216\u8005\u6267\u884c Python \u89e3\u91ca\u5668\u7684\u8def\u5f84\uff09\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u672a\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u73af\u5883\u53d8\u91cf PYTHONPATH \u4e2d\u6307\u793a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4f9d\u65e7\u672a\u80fd\u627e\u5230\uff0c\u5219 Python \u4f1a\u5728\u5b89\u88c5\u65f6\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\u641c\u5bfb foobar\uff1b \u82e5\u4ecd\u65e7\u5931\u8d25\uff0c\u5219 Python \u4f1a\u62a5\u9519\uff0c\u63d0\u793a\u627e\u4e0d\u5230 foobar \u8fd9\u4e2a\u6a21\u5757\u3002","title":"\u6a21\u5757\u641c\u7d22\u8def\u5f84"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_3","text":"\u5f53\u6211\u4eec\u4f7f\u7528import\u52a0\u8f7d\u81ea\u5df1\u7f16\u5199\u7684py\u4ee3\u7801\u65f6\uff0c\u5fc5\u987b\u653e\u5728python\u7684\u641c\u7d22\u8def\u5f84\u4e0b\u624d\u53ef\u4ee5import\u3002","title":"\u6dfb\u52a0\u641c\u7d22\u8def\u5f84"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#syspathappend","text":"\u5728python\u4e2d\u5f15\u5165 sys \uff0c sys \u4e2d\u7684 path \u662f\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5185\u5bb9\u5c31\u662f\u8def\u5f84\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06sys\u5f15\u5165\u540e\u67e5\u770b\u5c31\u53ef\u4ee5\u6e05\u695a\u7684\u77e5\u9053\u4e86\uff1a import sys print ( type ( sys . path )) sys . path <class 'list'> ['...\\\\Anaconda3\\\\python37.zip', '...\\\\Anaconda3\\\\DLLs', '...\\\\Anaconda3\\\\lib', '...\\\\Anaconda3', '...\\\\Anaconda3\\\\lib\\\\site-packages', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\xgboost-1.0.0_snapshot-py3.7.egg', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin', '...\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions'] \u65e2\u7136\u662flist\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f7f\u7528append\u53ef\u4ee5\u5411\u5217\u8868\u6dfb\u52a0\u65b0\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u8def\u5f84\u662f \"C:\\Users\\Android\\Desktop\" \uff1a import sys sys . path . append ( r \"C:\\Users\\Android\\Desktop\" ) \u4f46\u8fd9\u53ea\u662f\u4e34\u65f6\u6dfb\u52a0\u8def\u5f84\uff0c\u5982\u679c\u91cd\u542f\u7f16\u8bd1\u5668\uff0c\u6dfb\u52a0\u7684\u8def\u5f84\u5c31\u4f1a\u6d88\u5931\u3002","title":"\u6dfb\u52a0\u4e34\u65f6\u8def\u5f84\u2014\u2014sys.path.append"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_4","text":"\u5728Windows10\u4e2d\uff0c\u9009\u62e9 ->\u63a7\u5236\u9762\u677f\\\u7cfb\u7edf\u548c\u5b89\u5168\\\u7cfb\u7edf->\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e->\u73af\u5883\u53d8\u91cf \uff0c # \u627e\u5230path\u540e\u9009\u62e9\u7f16\u8f91\uff0c\u6dfb\u52a0\u65b0\u7684\u8def\u5f84\u3002 \u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u9002\u7528\u6240\u6709python\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u5e76\u672a\u5c06\u8981\u67e5\u627e\u7684\u8def\u5f84\u6dfb\u52a0\u5230python\u7684Path\u7cfb\u7edf\u73af\u5883\u4e2d\uff0c\u5728sys.path\u7684\u5217\u8868\u4e2d\u627e\u4e0d\u5230\u76f8\u5173\u8def\u5f84\u7684\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u5c06\u8def\u5f84\u6dfb\u52a0\u5230python\u7684\u641c\u7d22\u8def\u5f84\u4e2d\u3002","title":"\u4fee\u6539\u73af\u5883\u53d8\u91cf"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#pth","text":"\u5728site-packages\u6587\u4ef6\u5939\u6dfb\u52a0path\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u641c\u7d22\u8def\u5f84\u7684\u6c38\u4e45\u6dfb\u52a0\u3002\u65b9\u6cd5\u5982\u4e0b\uff1a \u5148\u7f16\u8f91\u4e00\u4e2a\u6269\u5c55\u540d\u4e3a .pth \u7684\u6587\u672c\u6587\u4ef6\uff0c\u5728\u8fd9\u4e2a\u6587\u672c\u6587\u4ef6\u91cc\u9762\u5199\u4e0a\u8981\u6dfb\u52a0\u7684path\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f8b\u5982\uff1a \u6587\u672c\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u662f\uff1atest.pth test.pth \u6587\u4ef6\u7684\u5185\u5bb9\u662f\uff1a C:\\Users\\Android\\Desktop \u63a5\u7740\u83b7\u53d6python\u7684site-packages\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff1a import site site . getsitepackages () ['G:\\\\Installed\\\\Anaconda3', 'G:\\\\Installed\\\\Anaconda3\\\\lib\\\\site- packages'] \u7136\u540e\u5c06 test.pth \u6587\u4ef6\u653e\u8fdb G:\\Installed\\Anaconda3\\lib\\site-packages \u91cc\u9762\u5373\u53ef\u3002","title":"\u6dfb\u52a0\u6c38\u4e45\u641c\u7d22\u8def\u5f84\u2014\u2014\u589e\u52a0.pth\u6587\u4ef6"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_5","text":"\u5728 python \u7528 import \u6216\u8005 from...import \u6765\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757\u3002 \u5c06\u6574\u4e2a\u6a21\u5757(module)\u5bfc\u5165: \u4f8b\u5982\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u4f7f\u7528 sys \u6a21\u5757\uff0c\u90a3\u4e48\u9996\u5148\u8981\u5bfc\u5165\u8be5\u6a21\u5757\uff1a import sys \u5bfc\u5165 sys \u6a21\u5757\u540e\uff0c\u6211\u4eec\u5c31\u6709\u4e86 \u53d8\u91cf sys \u6307\u5411\u8be5\u6a21\u5757\uff0c\u5229\u7528 sys \u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee sys \u6a21\u5757\u7684\u6240\u6709\u529f\u80fd\u3002 \u4e5f\u5c31\u662f\u8bf4\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u3002 \u4e5f\u53ef\u4ee5\u4e00\u6b21\u6027\u5bfc\u5165\u591a\u4e2amodule\uff1a import os , sys , time \u901a\u8fc7 as \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u5728\u5bfc\u5165module\u7684\u65f6\u5019\uff0c\u7ed9module\u5b9a\u4e49\u522b\u540d\uff1a import sys as system \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u51fd\u6570\uff1a \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570 from somemodule import somefunction \u4ece\u67d0\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u591a\u4e2a\u51fd\u6570 from somemodule import firstfunc , secondfunc , thirdfunc \u5c06\u67d0\u4e2a\u6a21\u5757\u4e2d\u7684\u5168\u90e8\u51fd\u6570\u5bfc\u5165 from somemodule import * \u4e00\u822c\u800c\u8a00\uff0c\u9664\u4e86\u5b9e\u9a8c\u3001\u6392\u67e5\uff0c\u4e0d\u63a8\u8350\u5bfc\u5165\u6a21\u5757\u5185\u7684\u6240\u6709\u516c\u5f00\u7b26\u53f7\uff08\u6ca1\u6709\u524d\u7f00 _ \u7684\u90a3\u4e9b\uff09\u3002\u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u4f1a\u4fee\u6539namespace\uff0c\u800c\u901a\u5e38\u4f60\u4e0d\u77e5\u9053\u6a21\u5757\u5b9a\u4e49\u4e86\u54ea\u4e9b\u7b26\u53f7\u3001\u662f\u5426\u4e0e\u5f53\u524d\u7684namespace\u6709\u91cd\u540d\u7684\u7b26\u53f7\u3002\u4e00\u65e6\u6709\u91cd\u540d\uff0c\u90a3\u4e48\uff0c\u5c31\u4f1a\u8986\u76d6\u6389\u5f53\u524dnamespace\u7684\u503c\u3002\u4ece\u800c\u9020\u6210\u96be\u4ee5\u6392\u67e5\u7684\u9519\u8bef","title":"\u6a21\u5757\u7684\u5bfc\u5165"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_6","text":"\u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c \u6bcf\u4e2a\u6a21\u5757\u5728\u6bcf\u4e2a\u89e3\u91ca\u5668\u4f1a\u8bdd\u4e2d\u53ea\u5bfc\u5165\u4e00\u904d\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4fee\u6539\u4e86\u7684\u6a21\u5757\uff0c\u9700\u8981\u91cd\u542f\u89e3\u91ca\u5668\uff1b\u5982\u679c\u60f3\u4ea4\u4e92\u5f0f\u5730\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u5219\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff1a \u6ce8\u610f \u53ea\u80fd\u91cd\u8f7d\u6a21\u5757\uff0c\u4e0d\u80fd\u5355\u72ec\u91cd\u8f7d\u6a21\u5757\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u3002 Python 2.x\uff1a reload ( modulename ) Python 2.x \u81f3 Python3.3\uff1a import imp imp . reload ( modulename ) Python3.4+\uff1a import importlib importlib . reload ( modulename ) \u53e6\u5916\uff0cspyder \u7684UMR(user module reloader)\u63d0\u4f9b\u4e86\u81ea\u52a8\u91cd\u8f7d\u6a21\u5757\u7684\u529f\u80fd\u3002","title":"\u6a21\u5757\u91cd\u8f7d"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#__name__","text":"\u548c Python \u4e2d\u7684\u5176\u5b83\u5bf9\u8c61\u4e00\u6837\uff0cPython \u4e5f\u4e3a\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5f62\u5982 __foo__ \u7684\u53d8\u91cf\u3002\u5bf9\u4e8e\u6a21\u5757\u6765\u8bf4\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u5b83\u7684\u540d\u5b57 __name__ \u4e86\u3002\u6bcf\u5f53 Python \u6267\u884c\u811a\u672c\uff0c\u5b83\u5c31\u4f1a\u4e3a\u8be5\u811a\u672c\u8d4b\u4e88\u4e00\u4e2a\u540d\u5b57\uff1a \u5bf9\u4e8e\u300c\u4e3b\u7a0b\u5e8f\u300d\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a \"__main__\" \u5bf9\u4e8e\u88ab import \u8fdb\u4e3b\u7a0b\u5e8f\u7684\u6a21\u5757\u6765\u8bf4\uff0c\u8fd9\u4e00\u811a\u672c\u7684 __name__ \u88ab\u5b9a\u4e49\u4e3a\u811a\u672c\u7684\u6587\u4ef6\u540d\uff08base filename\uff09 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u5f62\u5f0f\uff0c\u5728\u6a21\u5757\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e9b\u6d4b\u8bd5\u4ee3\u7801\uff1a if __name__ == \"__main__\" : ... \u5f53\u811a\u672c\u88ab\u76f4\u63a5\u8fd0\u884c\u65f6\uff0c\u6d4b\u8bd5\u4ee3\u7801\u5c31\u4f1a\u88ab\u8fd0\u884c\uff1b\u5f53\u811a\u672c\u4f5c\u4e3a\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u4f1a\u88ab\u8fd0\u884c\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\uff1a \u53c2\u8003\uff1a Python \u4e2d\u7684\u9ed1\u6697\u89d2\u843d\uff08\u4e09\uff09\uff1a\u6a21\u5757\u4e0e\u5305 #!/usr/bin/env python3 # -*- coding: utf-8 -*- ' a test module ' __author__ = 'Michael Liao' import sys def test (): args = sys . argv if len ( args ) == 1 : print ( 'Hello, world!' ) elif len ( args ) == 2 : print ( 'Hello, %s !' % args [ 1 ]) else : print ( 'Too many arguments!' ) if __name__ == '__main__' : test () Hello, world!","title":"__name__"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#_7","text":"\u5728\u4e00\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5b9a\u4e49\u5f88\u591a\u51fd\u6570\u548c\u53d8\u91cf\uff0c\u4f46\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u7ed9\u522b\u4eba\u4f7f\u7528\uff0c\u6709\u7684\u51fd\u6570\u548c\u53d8\u91cf\u6211\u4eec\u5e0c\u671b\u4ec5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u4f7f\u7528\uff08\u9690\u85cf\u4ee3\u7801\u5185\u90e8\u903b\u8f91\uff09\uff0c\u5728Python\u4e2d\uff0c\u662f\u901a\u8fc7 _ \u524d\u7f00\u6765\u5b9e\u73b0\u7684\u3002 \u6b63\u5e38\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u662f\u516c\u5f00\u7684\uff08public\uff09\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982\uff1a abc \uff0c x123 \uff0c PI \u7b49\uff1b \u7c7b\u4f3c __xxx__ \u8fd9\u6837\u7684\u53d8\u91cf\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u4f46\u662f\u6709\u7279\u6b8a\u7528\u9014\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 __author__ \uff0c __name__ \u5c31\u662f\u7279\u6b8a\u53d8\u91cf\uff0c hello \u6a21\u5757\u5b9a\u4e49\u7684\u6587\u6863\u6ce8\u91ca\u4e5f\u53ef\u4ee5\u7528\u7279\u6b8a\u53d8\u91cf __doc__ \u8bbf\u95ee\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u53d8\u91cf\u4e00\u822c\u4e0d\u8981\u7528\u8fd9\u79cd\u53d8\u91cf\u540d\uff1b \u7c7b\u4f3c _xxx \u548c __xxx \u8fd9\u6837\u7684\u51fd\u6570\u6216\u53d8\u91cf\u5c31\u662f\u975e\u516c\u5f00\u7684\uff08private\uff09\uff0c\u4e0d\u5e94\u8be5\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u6bd4\u5982 _abc \uff0c __abc \u7b49\uff1b \u4e4b\u6240\u4ee5\u6211\u4eec\u8bf4\uff0cprivate\u51fd\u6570\u548c\u53d8\u91cf\u201c\u4e0d\u5e94\u8be5\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u201c\u4e0d\u80fd\u201d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u662f\u56e0\u4e3aPython\u5e76\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u5168\u9650\u5236\u8bbf\u95eeprivate\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u4ece\u7f16\u7a0b\u4e60\u60ef\u4e0a\u4e0d\u5e94\u8be5\u5f15\u7528private\u51fd\u6570\u6216\u53d8\u91cf\u3002","title":"\u4f5c\u7528\u57df"},{"location":"Python%E5%9F%BA%E7%A1%80/4.2.%E6%A8%A1%E5%9D%97.html#python-pyc","text":"\u548c LaTeX \u4e2d\u9047\u5230\u7684\u95ee\u9898\u4e00\u6837\uff1a\u88c5\u8f7d\u5927\u91cf\u6587\u672c\u6587\u4ef6\uff08 .py \u6587\u4ef6\uff09\u662f\u5f88\u6162\u7684\u3002\u56e0\u6b64 Python \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c LaTeX \u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5c06\u6a21\u5757\u7f16\u8bd1\u6210\u5bb9\u6613\u88c5\u8f7d\u7684\u6587\u4ef6\uff0c\u5e76\u5728 __pycache__ \u76ee\u5f55\u4e0b\u4ee5 module.*version*.pyc \u540d\u5b57\u7f13\u5b58\u8fd9\u4e9b\u6587\u4ef6\u3002\uff08\u76f8\u5f53\u4e8e LaTeX \u4e2d\u7684 dump \u683c\u5f0f\u6587\u4ef6 .fmt \uff09\u3002 \u8fd9\u91cc\u7684\u7248\u672c\u7f16\u5236\u4e86\u7f16\u8bd1\u540e\u6587\u4ef6\u7684\u683c\u5f0f\u3002\u5b83\u901a\u5e38\u4f1a\u5305\u542b Python \u7684\u7248\u672c\u53f7\u3002\u4f8b\u5982\uff0c\u5728 CPython 3.3 \u7248\u4e2d\uff0cspam.py \u7f16\u8bd1\u540e\u7684\u7248\u672c\u5c06\u7f13\u5b58\u4e3a __pycache__/spam.cpython-33.pyc \u3002\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u5141\u8bb8\u7531\u4e0d\u540c\u53d1\u5e03\u548c\u4e0d\u540c\u7248\u672c\u7684 Python \u7f16\u8bd1\u7684\u6a21\u5757\u540c\u65f6\u5b58\u5728\u3002 \u5f53 Python \u7f16\u8bd1\u597d\u6a21\u5757\u4e4b\u540e\uff0c\u4e0b\u6b21\u8f7d\u5165\u65f6\uff0cPython \u5c31\u4f1a\u8bfb\u53d6\u76f8\u5e94\u7684 .pyc \u6587\u4ef6\uff0c\u800c\u4e0d\u662f .py \u6587\u4ef6\u3002\u800c\u88c5\u8f7d .pyc \u6587\u4ef6\u4f1a\u6bd4\u88c5\u8f7d .py \u6587\u4ef6\u66f4\u5feb\u3002 Python \u4f1a\u68c0\u67e5\u6e90\u6587\u4ef6\u4e0e\u7f16\u8bd1\u7248\u7684\u4fee\u6539\u65e5\u671f\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u8fc7\u671f\u5e76\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3002 \u8fd9\u662f\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u8fc7\u7a0b\u3002\u540c\u65f6\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u5e93\u53ef\u4ee5\u5728\u4e0d\u540c\u67b6\u6784\u7684\u7cfb\u7edf\u4e4b\u95f4\u5171\u4eab\u3002 Python \u4e0d\u68c0\u67e5\u5728\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\u7684\u7f13\u5b58\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6c38\u8fdc\u91cd\u65b0\u7f16\u8bd1\u800c\u4e14\u4e0d\u4f1a\u5b58\u50a8\u76f4\u63a5\u4ece\u547d\u4ee4\u884c\u52a0\u8f7d\u7684\u6a21\u5757\u3002\u5176\u6b21\uff0c\u5982\u679c\u6ca1\u6709\u6e90\u6a21\u5757\u5b83\u4e0d\u4f1a\u68c0\u67e5\u7f13\u5b58\u3002\u82e5\u8981\u652f\u6301\u6ca1\u6709\u6e90\u6587\u4ef6\uff08\u53ea\u6709\u7f16\u8bd1\u7248\uff09\u7684\u53d1\u5e03\uff0c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u5fc5\u987b\u5728\u6e90\u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u5fc5\u987b\u6ca1\u6709\u6e90\u6587\u4ef6\u7684\u6a21\u5757\u3002 \u90e8\u5206\u9ad8\u7ea7\u6280\u5de7: \u4e3a\u4e86\u51cf\u5c11\u4e00\u4e2a\u7f16\u8bd1\u6a21\u5757\u7684\u5927\u5c0f\uff0c\u4f60\u53ef\u4ee5\u5728 Python \u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 -O \u6216\u8005 -OO \u3002 -O \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\uff0c -OO \u53c2\u6570\u5220\u9664\u4e86\u65ad\u8a00\u8bed\u53e5\u548c doc \u5b57\u7b26\u4e32\u3002 \u56e0\u4e3a\u67d0\u4e9b\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u53d8\u91cf\u7684\u53ef\u7528\u6027\uff0c\u4f60\u5e94\u8be5\u53ea\u5728\u786e\u5b9a\u65e0\u8bef\u7684\u573a\u5408\u4f7f\u7528\u8fd9\u4e00\u9009\u9879\u3002\u201c\u4f18\u5316\u7684\u201d \u6a21\u5757\u6709\u4e00\u4e2a .pyo \u540e\u7f00\u800c\u4e0d\u662f .pyc \u540e\u7f00\u3002\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u6539\u53d8\u4f18\u5316\u7684\u6548\u679c\u3002 \u6765\u81ea .pyc \u6587\u4ef6\u6216 .pyo \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u6bd4\u6765\u81ea .py \u6587\u4ef6\u7684\u8fd0\u884c\u66f4\u5feb\uff1b .pyc \u6216 .pyo \u6587\u4ef6\u53ea\u662f\u5728\u5b83\u4eec\u52a0\u8f7d\u7684\u65f6\u5019\u66f4\u5feb\u4e00\u4e9b\u3002 compileall \u6a21\u5757\u53ef\u4ee5\u4e3a\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6a21\u5757\u521b\u5efa .pyc \u6587\u4ef6\uff08\u6216\u8005\u4f7f\u7528 -O \u53c2\u6570\u521b\u5efa .pyo \u6587\u4ef6\uff09\u3002 \u5728 PEP 3147 \u4e2d\u6709\u5f88\u591a\u5173\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u7684\u7ec6\u8282\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u4e00\u4e2a\u51b3\u7b56\u6d41\u7a0b\u3002","title":"\u201c\u7f16\u8bd1\u7684\u201d Python \u6587\u4ef6\u2014\u2014pyc \u6587\u4ef6"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html","text":"\u6784\u9020\u548c\u521d\u59cb\u5316 \u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u9b54\u672f\u65b9\u6cd5\uff0c __init__ \u3002\u901a\u8fc7\u6b64\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u7684\u521d\u59cb\u64cd\u4f5c\u3002\u4f46\u5f88\u591a\u535a\u5ba2\u548c\u4e2a\u522b\u4e66\u7c4d\u4e2d\u90fd\u628a __init__ \u5f53\u4f5c\u7c7b\u4f3c\u4e8eC++\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5176\u5b9e\u662f\u9519\u8bef\u7684\u3002 __init__ \u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb\u505a __new__ \u7684\u65b9\u6cd5\uff0c\u6765\u6784\u9020\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u7136\u540e\u7ed9\u5728\u5f00\u59cb\u521b\u5efa\u65f6\u5019\u7684\u521d\u59cb\u5316\u51fd\u6570\u6765\u4f20\u9012\u53c2\u6570\u3002\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7684\u53e6\u4e00\u7aef\uff0c\u4e5f\u6709\u4e00\u4e2a __del__ \u65b9\u6cd5\u3002 __new__(cls, [...) __new__ \u662f\u5728\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u6240\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u3002\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8fd9\u4e2a\u7c7b\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u662f\u7528\u6765\u76f4\u63a5\u4f20\u9012\u7ed9 __init__ \u65b9\u6cd5\u3002 __new__ \u65b9\u6cd5\u76f8\u5f53\u4e0d\u5e38\u7528\uff0c\u4e5f\u4e0d\u662f\u5f88\u6709\u7528\u5904\uff0c\u4f46\u662f\u5b83\u6709\u81ea\u5df1\u7684\u7279\u6027\uff0c\u7279\u522b\u662f\u5f53\u7ee7\u627f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u7c7b\u578b\uff08\u6bd4\u5982\u4e00\u4e2atuple\u6216\u8005string\uff09\uff1a class inch ( float ): \"Convert from inch to meter\" def __new__ ( cls , arg = 0.0 ): return float . __new__ ( cls , arg * 0.0254 ) print ( inch ( 12 )) 0.30479999999999996 \u8fd9\u4e2a\u7c7b\u53ef\u80fd\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u4f46\u662f\u5b83\u663e\u793a\u4e86\u5982\u4f55\u6269\u5c55\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u66ff\u4ee3 __init__ \u800c\u4e0d\u662f __new__ \uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u8d77\u4f5c\u7528\uff1a class inch ( float ): \"THIS DOESN'T WORK!!!\" def __init__ ( self , arg = 0.0 ): float . __init__ ( self , arg * 0.0254 ) try : print ( inch ( 12 )) except TypeError as e : print ( e ) object.__init__() takes exactly one argument (the instance to initialize) \u91cd\u5199\u521d\u59cb\u503c\u7684\u7248\u672c\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u6d6e\u70b9\u7c7b\u578b\u7684\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002\u53e6\u4e00\u4e2a __new__ \u7684\u4f8b\u5b50\u662f\u5355\u4f8b\u6a21\u5f0f\u3002 class A : pass new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA9651AC8> <__main__.A object at 0x0000021AA9651B00> class A ( object ): _singleton = None def __new__ ( cls , * args , ** kwargs ): if not cls . _singleton : cls . _singleton = object . __new__ ( cls , * args , ** kwargs ) return cls . _singleton new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA86752E8> <__main__.A object at 0x0000021AA86752E8> \u5173\u4e8e __new__ \u7684\u4e00\u4e9b\u89c4\u5219\uff1a __new__ \u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4f46\u5728\u91cd\u5b9a\u4e49 __new__ \u65f6\uff0c\u4e0d\u9700\u8981\u52a0\u4e0a @staticmethod \uff0c\u56e0\u4e3a\u5b83\u7684\u540d\u5b57\u5df2\u7ecf\u6697\u793a\u4e86\u8fd9\u4e00\u70b9\u3002 __new__ \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u7c7b\uff1b\u5176\u4f59\u53c2\u6570\u662f\u6784\u9020\u51fd\u6570\u8c03\u7528\u6240\u770b\u5230\u7684\u53c2\u6570\u3002 __new__ \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u8fd4\u56deNone\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528 __init__ \u65b9\u6cd5\u3002 __init__(self, [\u2026) \u6b64\u65b9\u6cd5\u4e3a\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u3002\u5f53\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5c06\u4f1a\u4f20\u7ed9\u5b83\u3002(\u6bd4\u5982\u5982\u679c\u6211\u4eec\u8c03\u7528 x = SomeClass(10, 'foo') )\uff0c\u90a3\u4e48 __init__ \u5c06\u4f1a\u5f97\u5230\u4e24\u4e2a\u53c2\u657010\u548cfoo\u3002 __init__ \u5728Python\u7684\u7c7b\u5b9a\u4e49\u4e2d\u88ab\u5e7f\u6cdb\u7528\u5230\u3002 __del__(self) \u5982\u679c __new__ \u548c __init__ \u662f\u5bf9\u8c61\u7684\u6784\u9020\u5668\u7684\u8bdd\uff0c\u90a3\u4e48 __del__ \u5c31\u662f\u6790\u6784\u5668\u3002\u5b83\u4e0d\u5b9e\u73b0\u8bed\u53e5 del x (\u4ee5\u4e0a\u4ee3\u7801\u5c06\u4e0d\u4f1a\u7ffb\u8bd1\u4e3a x.__del__() )\u3002\u5b83\u5b9a\u4e49\u7684\u662f\u5f53\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u5019\u7684\u884c\u4e3a\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5728\u5220\u9664\u7684\u65f6\u9700\u8981\u66f4\u591a\u7684\u6e05\u6d01\u5de5\u4f5c\u7684\u65f6\u5019\u6b64\u65b9\u6cd5\u4f1a\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u5957\u63a5\u5b57\u5bf9\u8c61\u6216\u8005\u662f\u6587\u4ef6\u5bf9\u8c61\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89e3\u91ca\u5668\u9000\u51fa\u7684\u65f6\u5019\u5bf9\u8c61\u8fd8\u5b58\u5b58\u5728\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1 __del__ \u80fd\u591f\u88ab\u6267\u884c\u3002 class A : def __del__ ( self ): print ( \"\u6211\u88ab\u5220\u9664\u4e86\" ) a = A () del a \u6211\u88ab\u5220\u9664\u4e86 \u7528\u4e8e\u6bd4\u8f83\u7684\u9b54\u672f\u65b9\u6cd5 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __eq__(self, other) self == other __nq__(self, other) self != other __le__(self, other) self <= other __ge__(self, other) self >= other __lt__(self, other) self < other __gt__(self, other) self > other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __eq__ ( self , other ): return self . num == other def __ne__ ( self , other ): return self . num != other def __le__ ( self , other ): return self . num <= other def __ge__ ( self , other ): return self . num >= other def __lt__ ( self , other ): return self . num < other def __gt__ ( self , other ): return self . num > other a = A ( 5 ) print ( a == 5 ) print ( a != 5 ) print ( a > 4 ) print ( a < 6 ) print ( a >= 5 ) print ( a <= 6 ) True False True True True True \u6570\u503c\u5904\u7406\u7684\u9b54\u672f\u65b9\u6cd5 \u4e00\u5143\u8fd0\u7b97\u7b26\u548c\u5185\u7f6e\u51fd\u6570 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __pos__(self) +self __neg__(self) -self __abs__(self) abs(self) __invert__(self) ~self class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __pos__ ( self ): new_num = 0 + self . num return A ( new_num ) def __neg__ ( self ): new_num = 0 - self . num return A ( new_num ) def __abs__ ( self ): new_num = abs ( self . num ) return A ( new_num ) a = A ( - 5 ) print ( + a ) print ( - a ) print ( abs ( a )) -5 5 5 \u7b97\u672f\u8fd0\u7b97\u7b26 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __add__(self, other) self + other __sub_(self, other) self - other __mul__(self, other) self * other __truediv__(self, other) self / other __pow__(self, other) self ** other __floordiv__(self, other) self // other __mod__(self, other) self % other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __add__ ( self , other ): new_num = self . num + other return A ( new_num ) def __sub__ ( self , other ): new_num = self . num - other return A ( new_num ) def __mul__ ( self , other ): new_num = self . num * other return A ( new_num ) def __truediv__ ( self , other ): new_num = self . num / other return A ( new_num ) def __pow__ ( self , other ): new_num = self . num ** other return A ( new_num ) def __floordiv__ ( self , other ): new_num = self . num // other return A ( new_num ) def __mod__ ( self , other ): new_num = self . num % other return A ( new_num ) a = A ( 5 ) print ( \"a + 2 =\" , a + 2 ) print ( \"a - 2 =\" , a - 2 ) print ( \"a * 2 =\" , a * 2 ) print ( \"a / 2 =\" , a / 2 ) print ( \"a ** 2 =\" , a ** 2 ) print ( \"a // 2 =\" , a // 2 ) print ( \"a % 2 =\" , a % 2 ) a + 2 = 7 a - 2 = 3 a * 2 = 10 a / 2 = 2.5 a ** 2 = 25 a // 2 = 2 a % 2 = 1 \u53cd\u8fd0\u7b97 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u666e\u901a\u7684\u52a0\u6cd5\u8fd0\u7b97\u7684\u4f8b\u5b50: # __add__ some_object + other \u53cd\u8fd0\u7b97\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u628a\u64cd\u4f5c\u6570\u8c03\u6362\u4e86\u4f4d\u7f6e: # __radd__ other + some_object \u6240\u4ee5\uff0c\u9664\u4e86\u5f53\u4e0e\u5176\u4ed6\u5bf9\u8c61\u64cd\u4f5c\u7684\u65f6\u5019\u81ea\u5df1\u4f1a\u6210\u4e3a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e4b\u5916\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u9b54\u672f\u65b9\u6cd5\u90fd\u4e0e\u666e\u901a\u7684\u64cd\u4f5c\u662f\u76f8\u540c\u7684\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53cd\u8fd0\u7b97\u7684\u7ed3\u679c\u662f\u4e0e\u666e\u901a\u8fd0\u7b97\u76f8\u540c\u7684\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f60\u53ef\u4ee5\u5c06 __radd__ \u4e0e __add__ \u7b49\u4ef7\u3002 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __radd__(self, other) other + self __rsub_(self, other) other - self __rmul__(self, other) other * self __rtruediv__(self, other) other / self __rpow__(self, other) other ** self __rfloordiv__(self, other) other // self __rmod__(self, other) other % self \u589e\u5f3a\u8d4b\u503c \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __iadd__(self, other) self += other __isub_(self, other) self -= other __imul__(self, other) self *= other __itruediv__(self, other) self /= other __ipow__(self, other) self **= other __ifloordiv__(self, other) self //= other __imod__(self, other) self %= other \u8868\u73b0\u4f60\u7684\u7c7b \u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u4e00\u4e2a\u7c7b\u5c06\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\uff1a a = [ 1 , 2 , 3 ] a [1, 2, 3] \u5728Python\u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u5b9a\u4e49\u5185\u7f6e\u7684\u4e00\u4e9b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 __str__(self) \u5b9a\u4e49\u5f53 str() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 __repr__(self) \u5b9a\u4e49 repr() \u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 str() \u548c repr() \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e repr() \u8fd4\u56de\u7684\u662f\u673a\u5668\u53ef\u8bfb\u7684\u8f93\u51fa\uff0c\u800c str() \u8fd4\u56de\u7684\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u3002 __unicode__(self) \u5b9a\u4e49\u5f53 unicode() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 unicode() \u548c str() \u5f88\u76f8\u4f3c\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u662funicode\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u4f60\u7684\u7c7b\u8c03\u7528 str() \u7136\u800c\u4f60\u53ea\u5b9a\u4e49\u4e86 __unicode__() \uff0c\u90a3\u4e48\u5c06\u4e0d\u4f1a\u5de5\u4f5c\u3002\u4f60\u5e94\u8be5\u5b9a\u4e49 __str__() \u6765\u786e\u4fdd\u8c03\u7528\u65f6\u80fd\u8fd4\u56de\u6b63\u786e\u7684\u503c\u3002 __hash__(self) \u5b9a\u4e49\u5f53 hash() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u7528\u6765\u5728\u5b57\u5178\u4e2d\u8fdb\u884c\u5feb\u901f\u6bd4\u8f83 __nonzero__(self) \u5b9a\u4e49\u5f53 bool() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002\u672c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56deTrue\u6216\u8005False\uff0c\u53d6\u51b3\u4e8e\u4f60\u60f3\u8ba9\u5b83\u8fd4\u56de\u7684\u503c\u3002 \u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217 \u6709\u5f88\u591a\u65b9\u6cd5\u8ba9\u4f60\u7684Python\u7c7b\u884c\u4e3a\u53ef\u4ee5\u50cf\u5185\u7f6e\u7684\u5e8f\u5217(dict, tuple,list, string\u7b49\u7b49)\u3002 \u73b0\u5728\u6211\u4eec\u5f00\u59cb\u8bb2\u5982\u4f55\u5728Python\u4e2d\u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217\uff0c\u8fd9\u4e2a\u65f6\u5019\u8be5\u8bb2\u4e00\u8bb2\u534f\u8bae\u3002\u534f\u8bae(Protocols)\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u5f88\u76f8\u4f3c\u3002\u5b83\u7ed9\u4f60\u5f88\u591a\u4f60\u5fc5\u987b\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u7136\u800c\u5728Python\u4e2d\u7684\u534f\u8bae\u662f\u5f88\u4e0d\u6b63\u5f0f\u7684\uff0c\u4e0d\u9700\u8981\u660e\u786e\u58f0\u660e\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u66f4\u50cf\u4e00\u79cd\u6307\u5357\u3002 \u6211\u4eec\u4e3a\u4ec0\u4e48\u73b0\u5728\u8ba8\u8bba\u534f\u8bae\uff1f\u56e0\u4e3a\u5982\u679c\u8981\u5b9a\u5236\u5bb9\u5668\u7c7b\u578b\u7684\u8bdd\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u534f\u8bae\uff1a \u5b9e\u73b0\u4e0d\u53d8\u5bb9\u5668\u7684\u8bdd\u6709\u4e00\u4e2a\u534f\u8bae\uff1a\u5b9e\u73b0\u4e0d\u53ef\u53d8\u5bb9\u5668\uff0c\u4f60\u53ea\u80fd\u5b9a\u4e49 __len__ \u548c __getitem__ (\u4e00\u4f1a\u4f1a\u8bb2\u66f4\u591a)\u3002 \u53ef\u53d8\u5bb9\u5668\u534f\u8bae\u5219\u9700\u8981\u6240\u6709\u4e0d\u53ef\u53d8\u5bb9\u5668\u7684\u6240\u6709\u53e6\u5916\u8fd8\u9700\u8981 __setitem__ \u548c __delitem__ \u3002 \u6700\u7ec8\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5b9a\u4e49 __iter__ \u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u8fed\u4ee3\u5668\u5fc5\u987b\u9075\u5faa\u8fed\u4ee3\u5668\u534f\u8bae\uff0c\u9700\u8981\u6709 __iter__ (\u8fd4\u56de\u5b83\u672c\u8eab) \u548c next \u3002 \u5bb9\u5668\u7684\u9b54\u6cd5 \u9b54\u6cd5\u65b9\u6cd5 \u8c03\u7528\u65b9\u6cd5 \u63cf\u8ff0 __len__(self) len(self) __index__(self) x[self] \u5bf9\u8c61\u88ab\u4f5c\u4e3a\u7d22\u5f15\u4f7f\u7528\u7684\u65f6\u5019 __getitem__(self, key) self[key] \u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\u65f6 __setitem__(self, key, val) self[key] = val \u5bf9\u67d0\u4e2a\u7d22\u5f15\u503c\u8d4b\u503c\u65f6 __delitem__(self, key) del self[key] \u5220\u9664\u67d0\u4e2a\u7d22\u5f15\u503c\u65f6 __iter__(self) for x in self \u8fed\u4ee3\u65f6 __contains__(self, value) value in self, value not in self \u4f7f\u7528 in \u64cd\u4f5c\u6d4b\u8bd5\u5173\u7cfb\u65f6 __concat__(self, value) self + other \u8fde\u63a5\u4e24\u4e2a\u5bf9\u8c61\u65f6 __reversed__(self) reversed(self) \u5b9e\u73b0\u5f53 reversed() \u88ab\u8c03\u7528\u65f6\u7684\u884c\u4e3a \u53ef\u4ee5\u8c03\u7528\u7684\u5bf9\u8c61 \u5728Python\u4e2d\uff0c\u65b9\u6cd5\u4e5f\u662f\u4e00\u79cd\u9ad8\u7b49\u7684\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u88ab\u4f20\u9012\u5230\u65b9\u6cd5\u4e2d\u5c31\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u60ca\u4eba\u7684\u7279\u6027\u3002 \u5728Python\u4e2d\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u9b54\u672f\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u7c7b\u7684\u5b9e\u4f8b\u7684\u884c\u4e3a\u8868\u73b0\u7684\u50cf\u51fd\u6570\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528\u4ed6\u4eec\uff0c\u5c06\u4e00\u4e2a\u51fd\u6570\u5f53\u505a\u4e00\u4e2a\u53c2\u6570\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\u7b49\u7b49\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u7279\u6027\u8ba9Python\u7f16\u7a0b\u66f4\u52a0\u8212\u9002\u751c\u7f8e\u3002 __call__(self, [args...]) \u5141\u8bb8\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\u3002\u5b9e\u8d28\u4e0a\u8bf4\uff0c\u8fd9\u610f\u5473\u7740 x() \u4e0e x.__call__() \u662f\u76f8\u540c\u7684\u3002\u6ce8\u610f __call__ \u53c2\u6570\u53ef\u53d8\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5b9a\u4e49 __call__ \u4e3a\u5176\u4ed6\u4f60\u60f3\u8981\u7684\u51fd\u6570\uff0c\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u53c2\u6570\u3002 __call__ \u5728\u90a3\u4e9b\u7c7b\u7684\u5b9e\u4f8b\u7ecf\u5e38\u6539\u53d8\u72b6\u6001\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u6709\u6548\u3002\u8c03\u7528\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u4e00\u79cd\u6539\u53d8\u8fd9\u4e2a\u5bf9\u8c61\u72b6\u6001\u7684\u76f4\u63a5\u548c\u4f18\u96c5\u7684\u505a\u6cd5\u3002\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u8868\u8fbe\u6700\u597d\u4e0d\u8fc7\u4e86\u3002 \u4f1a\u8bdd\u7ba1\u7406 \u5728Python 2.5\u4e2d\uff0c\u4e3a\u4e86\u4ee3\u7801\u5229\u7528\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u8bcd with \u8bed\u53e5\u3002\u4f1a\u8bdd\u63a7\u5236\u5728Python\u4e2d\u4e0d\u7f55\u89c1(\u4e4b\u524d\u662f\u4f5c\u4e3a\u5e93\u7684\u4e00\u90e8\u5206\u88ab\u5b9e\u73b0)\uff0c\u76f4\u5230 PEP343 \u88ab\u6dfb\u52a0\u540e\u3002\u5b83\u88ab\u6210\u4e3a\u4e00\u7ea7\u8bed\u8a00\u7ed3\u6784\u3002\u4f60\u4e5f\u8bb8\u4e4b\u524d\u770b\u5230\u8fd9\u6837\u7684\u8bed\u53e5: with open('foo.txt') as bar: # perform some action with bar \u56de\u8bdd\u63a7\u5236\u5668\u901a\u8fc7\u5305\u88c5\u4e00\u4e2a with \u8bed\u53e5\u6765\u8bbe\u7f6e\u548c\u6e05\u7406\u884c\u4e3a\u3002\u56de\u8bdd\u63a7\u5236\u5668\u7684\u884c\u4e3a\u901a\u8fc7\u4e24\u4e2a\u9b54\u672f\u65b9\u6cd5\u6765\u5b9a\u4e49: __enter__(self) \u5b9a\u4e49\u5f53\u4f7f\u7528 with \u8bed\u53e5\u7684\u65f6\u5019\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u521d\u59cb\u5757\u88ab\u521b\u5efa\u7684\u65f6\u5019\u7684\u884c\u4e3a\u3002\u6ce8\u610f __enter__ \u7684\u8fd4\u56de\u503c\u88ab with \u8bed\u53e5\u7684\u76ee\u6807\u6216\u8005 as \u540e\u7684\u540d\u5b57\u7ed1\u5b9a\u3002 __exit__(self, exception_type,exception_value, traceback) \u5b9a\u4e49\u5f53\u4e00\u4e2a\u4ee3\u7801\u5757\u88ab\u6267\u884c\u6216\u8005\u7ec8\u6b62\u540e\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u5b83\u53ef\u4ee5\u88ab\u7528\u6765\u5904\u7406\u5f02\u5e38\uff0c\u6e05\u9664\u5de5\u4f5c\u6216\u8005\u505a\u4e00\u4e9b\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\u7684\u65e5\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u4ee3\u7801\u5757\u6267\u884c\u6210\u529f\uff0c exception_type , exception_value , \u548c traceback \u5c06\u4f1a\u662f None \u3002\u5426\u5219\u7684\u8bdd\u4f60\u53ef\u4ee5\u9009\u62e9\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u6216\u8005\u662f\u76f4\u63a5\u4ea4\u7ed9\u7528\u6237\u5904\u7406\u3002\u5982\u679c\u4f60\u60f3\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u7684\u8bdd\uff0c\u786e\u8ba4 __exit__ \u5728\u6240\u6709\u7ed3\u675f\u4e4b\u540e\u4f1a\u8fd4\u56de True \u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5f02\u5e38\u88ab\u4f1a\u8bdd\u7ba1\u7406\u5668\u5904\u7406\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8fd9\u6837\u5904\u7406\u3002 __enter \u548c __exit__ \u5bf9\u4e8e\u660e\u786e\u6709\u5b9a\u4e49\u597d\u7684\u548c\u65e5\u5e38\u884c\u4e3a\u7684\u8bbe\u7f6e\u548c\u6e05\u6d01\u5de5\u4f5c\u7684\u7c7b\u5f88\u6709\u5e2e\u52a9\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u822c\u7684\u53ef\u4ee5\u5305\u88c5\u5176\u4ed6\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a class Closer : '''\u901a\u8fc7with\u8bed\u53e5\u548c\u4e00\u4e2aclose\u65b9\u6cd5\u6765\u5173\u95ed\u4e00\u4e2a\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668''' def __init__ ( self , obj ): self . obj = obj def __enter__ ( self ): return self . obj # bound to target def __exit__ ( self , exception_type , exception_val , trace ): try : self . obj . close () except AttributeError : # obj isn't closable print ( 'Not closable.' ) return True # exception handled successfully with Closer ( int ( 5 )) as i : i += 1 Not closable. \u53c2\u8003 \u6587\u7ae0","title":"4.3.\u9b54\u672f\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_1","text":"\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u9b54\u672f\u65b9\u6cd5\uff0c __init__ \u3002\u901a\u8fc7\u6b64\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u7684\u521d\u59cb\u64cd\u4f5c\u3002\u4f46\u5f88\u591a\u535a\u5ba2\u548c\u4e2a\u522b\u4e66\u7c4d\u4e2d\u90fd\u628a __init__ \u5f53\u4f5c\u7c7b\u4f3c\u4e8eC++\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5176\u5b9e\u662f\u9519\u8bef\u7684\u3002 __init__ \u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd8\u6709\u4e00\u4e2a\u53eb\u505a __new__ \u7684\u65b9\u6cd5\uff0c\u6765\u6784\u9020\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u7136\u540e\u7ed9\u5728\u5f00\u59cb\u521b\u5efa\u65f6\u5019\u7684\u521d\u59cb\u5316\u51fd\u6570\u6765\u4f20\u9012\u53c2\u6570\u3002\u5728\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7684\u53e6\u4e00\u7aef\uff0c\u4e5f\u6709\u4e00\u4e2a __del__ \u65b9\u6cd5\u3002 __new__(cls, [...) __new__ \u662f\u5728\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u6240\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u3002\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8fd9\u4e2a\u7c7b\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u662f\u7528\u6765\u76f4\u63a5\u4f20\u9012\u7ed9 __init__ \u65b9\u6cd5\u3002 __new__ \u65b9\u6cd5\u76f8\u5f53\u4e0d\u5e38\u7528\uff0c\u4e5f\u4e0d\u662f\u5f88\u6709\u7528\u5904\uff0c\u4f46\u662f\u5b83\u6709\u81ea\u5df1\u7684\u7279\u6027\uff0c\u7279\u522b\u662f\u5f53\u7ee7\u627f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u7c7b\u578b\uff08\u6bd4\u5982\u4e00\u4e2atuple\u6216\u8005string\uff09\uff1a class inch ( float ): \"Convert from inch to meter\" def __new__ ( cls , arg = 0.0 ): return float . __new__ ( cls , arg * 0.0254 ) print ( inch ( 12 )) 0.30479999999999996 \u8fd9\u4e2a\u7c7b\u53ef\u80fd\u4e0d\u662f\u5f88\u6709\u7528\uff0c\u4f46\u662f\u5b83\u663e\u793a\u4e86\u5982\u4f55\u6269\u5c55\u4e0d\u53ef\u53d8\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u66ff\u4ee3 __init__ \u800c\u4e0d\u662f __new__ \uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u8d77\u4f5c\u7528\uff1a class inch ( float ): \"THIS DOESN'T WORK!!!\" def __init__ ( self , arg = 0.0 ): float . __init__ ( self , arg * 0.0254 ) try : print ( inch ( 12 )) except TypeError as e : print ( e ) object.__init__() takes exactly one argument (the instance to initialize) \u91cd\u5199\u521d\u59cb\u503c\u7684\u7248\u672c\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u6d6e\u70b9\u7c7b\u578b\u7684\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002\u53e6\u4e00\u4e2a __new__ \u7684\u4f8b\u5b50\u662f\u5355\u4f8b\u6a21\u5f0f\u3002 class A : pass new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA9651AC8> <__main__.A object at 0x0000021AA9651B00> class A ( object ): _singleton = None def __new__ ( cls , * args , ** kwargs ): if not cls . _singleton : cls . _singleton = object . __new__ ( cls , * args , ** kwargs ) return cls . _singleton new1 = A () new2 = A () print ( new1 ) print ( new2 ) <__main__.A object at 0x0000021AA86752E8> <__main__.A object at 0x0000021AA86752E8> \u5173\u4e8e __new__ \u7684\u4e00\u4e9b\u89c4\u5219\uff1a __new__ \u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4f46\u5728\u91cd\u5b9a\u4e49 __new__ \u65f6\uff0c\u4e0d\u9700\u8981\u52a0\u4e0a @staticmethod \uff0c\u56e0\u4e3a\u5b83\u7684\u540d\u5b57\u5df2\u7ecf\u6697\u793a\u4e86\u8fd9\u4e00\u70b9\u3002 __new__ \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u7c7b\uff1b\u5176\u4f59\u53c2\u6570\u662f\u6784\u9020\u51fd\u6570\u8c03\u7528\u6240\u770b\u5230\u7684\u53c2\u6570\u3002 __new__ \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u8fd4\u56deNone\uff0c\u5219\u4e0d\u4f1a\u8c03\u7528 __init__ \u65b9\u6cd5\u3002 __init__(self, [\u2026) \u6b64\u65b9\u6cd5\u4e3a\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u3002\u5f53\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5c06\u4f1a\u4f20\u7ed9\u5b83\u3002(\u6bd4\u5982\u5982\u679c\u6211\u4eec\u8c03\u7528 x = SomeClass(10, 'foo') )\uff0c\u90a3\u4e48 __init__ \u5c06\u4f1a\u5f97\u5230\u4e24\u4e2a\u53c2\u657010\u548cfoo\u3002 __init__ \u5728Python\u7684\u7c7b\u5b9a\u4e49\u4e2d\u88ab\u5e7f\u6cdb\u7528\u5230\u3002 __del__(self) \u5982\u679c __new__ \u548c __init__ \u662f\u5bf9\u8c61\u7684\u6784\u9020\u5668\u7684\u8bdd\uff0c\u90a3\u4e48 __del__ \u5c31\u662f\u6790\u6784\u5668\u3002\u5b83\u4e0d\u5b9e\u73b0\u8bed\u53e5 del x (\u4ee5\u4e0a\u4ee3\u7801\u5c06\u4e0d\u4f1a\u7ffb\u8bd1\u4e3a x.__del__() )\u3002\u5b83\u5b9a\u4e49\u7684\u662f\u5f53\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u5019\u7684\u884c\u4e3a\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5728\u5220\u9664\u7684\u65f6\u9700\u8981\u66f4\u591a\u7684\u6e05\u6d01\u5de5\u4f5c\u7684\u65f6\u5019\u6b64\u65b9\u6cd5\u4f1a\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u5957\u63a5\u5b57\u5bf9\u8c61\u6216\u8005\u662f\u6587\u4ef6\u5bf9\u8c61\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89e3\u91ca\u5668\u9000\u51fa\u7684\u65f6\u5019\u5bf9\u8c61\u8fd8\u5b58\u5b58\u5728\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1 __del__ \u80fd\u591f\u88ab\u6267\u884c\u3002 class A : def __del__ ( self ): print ( \"\u6211\u88ab\u5220\u9664\u4e86\" ) a = A () del a \u6211\u88ab\u5220\u9664\u4e86","title":"\u6784\u9020\u548c\u521d\u59cb\u5316"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_2","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __eq__(self, other) self == other __nq__(self, other) self != other __le__(self, other) self <= other __ge__(self, other) self >= other __lt__(self, other) self < other __gt__(self, other) self > other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __eq__ ( self , other ): return self . num == other def __ne__ ( self , other ): return self . num != other def __le__ ( self , other ): return self . num <= other def __ge__ ( self , other ): return self . num >= other def __lt__ ( self , other ): return self . num < other def __gt__ ( self , other ): return self . num > other a = A ( 5 ) print ( a == 5 ) print ( a != 5 ) print ( a > 4 ) print ( a < 6 ) print ( a >= 5 ) print ( a <= 6 ) True False True True True True","title":"\u7528\u4e8e\u6bd4\u8f83\u7684\u9b54\u672f\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_3","text":"","title":"\u6570\u503c\u5904\u7406\u7684\u9b54\u672f\u65b9\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_4","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __pos__(self) +self __neg__(self) -self __abs__(self) abs(self) __invert__(self) ~self class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __pos__ ( self ): new_num = 0 + self . num return A ( new_num ) def __neg__ ( self ): new_num = 0 - self . num return A ( new_num ) def __abs__ ( self ): new_num = abs ( self . num ) return A ( new_num ) a = A ( - 5 ) print ( + a ) print ( - a ) print ( abs ( a )) -5 5 5","title":"\u4e00\u5143\u8fd0\u7b97\u7b26\u548c\u5185\u7f6e\u51fd\u6570"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_5","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __add__(self, other) self + other __sub_(self, other) self - other __mul__(self, other) self * other __truediv__(self, other) self / other __pow__(self, other) self ** other __floordiv__(self, other) self // other __mod__(self, other) self % other class A : def __init__ ( self , num = 2 ): self . num = num def __repr__ ( self ): return str ( self . num ) def __add__ ( self , other ): new_num = self . num + other return A ( new_num ) def __sub__ ( self , other ): new_num = self . num - other return A ( new_num ) def __mul__ ( self , other ): new_num = self . num * other return A ( new_num ) def __truediv__ ( self , other ): new_num = self . num / other return A ( new_num ) def __pow__ ( self , other ): new_num = self . num ** other return A ( new_num ) def __floordiv__ ( self , other ): new_num = self . num // other return A ( new_num ) def __mod__ ( self , other ): new_num = self . num % other return A ( new_num ) a = A ( 5 ) print ( \"a + 2 =\" , a + 2 ) print ( \"a - 2 =\" , a - 2 ) print ( \"a * 2 =\" , a * 2 ) print ( \"a / 2 =\" , a / 2 ) print ( \"a ** 2 =\" , a ** 2 ) print ( \"a // 2 =\" , a // 2 ) print ( \"a % 2 =\" , a % 2 ) a + 2 = 7 a - 2 = 3 a * 2 = 10 a / 2 = 2.5 a ** 2 = 25 a // 2 = 2 a % 2 = 1","title":"\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_6","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u666e\u901a\u7684\u52a0\u6cd5\u8fd0\u7b97\u7684\u4f8b\u5b50: # __add__ some_object + other \u53cd\u8fd0\u7b97\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u628a\u64cd\u4f5c\u6570\u8c03\u6362\u4e86\u4f4d\u7f6e: # __radd__ other + some_object \u6240\u4ee5\uff0c\u9664\u4e86\u5f53\u4e0e\u5176\u4ed6\u5bf9\u8c61\u64cd\u4f5c\u7684\u65f6\u5019\u81ea\u5df1\u4f1a\u6210\u4e3a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e4b\u5916\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u9b54\u672f\u65b9\u6cd5\u90fd\u4e0e\u666e\u901a\u7684\u64cd\u4f5c\u662f\u76f8\u540c\u7684\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53cd\u8fd0\u7b97\u7684\u7ed3\u679c\u662f\u4e0e\u666e\u901a\u8fd0\u7b97\u76f8\u540c\u7684\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f60\u53ef\u4ee5\u5c06 __radd__ \u4e0e __add__ \u7b49\u4ef7\u3002 \u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __radd__(self, other) other + self __rsub_(self, other) other - self __rmul__(self, other) other * self __rtruediv__(self, other) other / self __rpow__(self, other) other ** self __rfloordiv__(self, other) other // self __rmod__(self, other) other % self","title":"\u53cd\u8fd0\u7b97"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_7","text":"\u9b54\u672f\u65b9\u6cd5 \u8c03\u7528\u65b9\u5f0f \u63cf\u8ff0 __iadd__(self, other) self += other __isub_(self, other) self -= other __imul__(self, other) self *= other __itruediv__(self, other) self /= other __ipow__(self, other) self **= other __ifloordiv__(self, other) self //= other __imod__(self, other) self %= other","title":"\u589e\u5f3a\u8d4b\u503c"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_8","text":"\u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u4e00\u4e2a\u7c7b\u5c06\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\uff1a a = [ 1 , 2 , 3 ] a [1, 2, 3] \u5728Python\u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u5b9a\u4e49\u5185\u7f6e\u7684\u4e00\u4e9b\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 __str__(self) \u5b9a\u4e49\u5f53 str() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 __repr__(self) \u5b9a\u4e49 repr() \u88ab\u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 str() \u548c repr() \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e repr() \u8fd4\u56de\u7684\u662f\u673a\u5668\u53ef\u8bfb\u7684\u8f93\u51fa\uff0c\u800c str() \u8fd4\u56de\u7684\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u3002 __unicode__(self) \u5b9a\u4e49\u5f53 unicode() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002 unicode() \u548c str() \u5f88\u76f8\u4f3c\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u662funicode\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u4f60\u7684\u7c7b\u8c03\u7528 str() \u7136\u800c\u4f60\u53ea\u5b9a\u4e49\u4e86 __unicode__() \uff0c\u90a3\u4e48\u5c06\u4e0d\u4f1a\u5de5\u4f5c\u3002\u4f60\u5e94\u8be5\u5b9a\u4e49 __str__() \u6765\u786e\u4fdd\u8c03\u7528\u65f6\u80fd\u8fd4\u56de\u6b63\u786e\u7684\u503c\u3002 __hash__(self) \u5b9a\u4e49\u5f53 hash() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u7528\u6765\u5728\u5b57\u5178\u4e2d\u8fdb\u884c\u5feb\u901f\u6bd4\u8f83 __nonzero__(self) \u5b9a\u4e49\u5f53 bool() \u8c03\u7528\u7684\u65f6\u5019\u7684\u8fd4\u56de\u503c\u3002\u672c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56deTrue\u6216\u8005False\uff0c\u53d6\u51b3\u4e8e\u4f60\u60f3\u8ba9\u5b83\u8fd4\u56de\u7684\u503c\u3002","title":"\u8868\u73b0\u4f60\u7684\u7c7b"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_9","text":"\u6709\u5f88\u591a\u65b9\u6cd5\u8ba9\u4f60\u7684Python\u7c7b\u884c\u4e3a\u53ef\u4ee5\u50cf\u5185\u7f6e\u7684\u5e8f\u5217(dict, tuple,list, string\u7b49\u7b49)\u3002 \u73b0\u5728\u6211\u4eec\u5f00\u59cb\u8bb2\u5982\u4f55\u5728Python\u4e2d\u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217\uff0c\u8fd9\u4e2a\u65f6\u5019\u8be5\u8bb2\u4e00\u8bb2\u534f\u8bae\u3002\u534f\u8bae(Protocols)\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u5f88\u76f8\u4f3c\u3002\u5b83\u7ed9\u4f60\u5f88\u591a\u4f60\u5fc5\u987b\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u7136\u800c\u5728Python\u4e2d\u7684\u534f\u8bae\u662f\u5f88\u4e0d\u6b63\u5f0f\u7684\uff0c\u4e0d\u9700\u8981\u660e\u786e\u58f0\u660e\u5b9e\u73b0\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u66f4\u50cf\u4e00\u79cd\u6307\u5357\u3002 \u6211\u4eec\u4e3a\u4ec0\u4e48\u73b0\u5728\u8ba8\u8bba\u534f\u8bae\uff1f\u56e0\u4e3a\u5982\u679c\u8981\u5b9a\u5236\u5bb9\u5668\u7c7b\u578b\u7684\u8bdd\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u534f\u8bae\uff1a \u5b9e\u73b0\u4e0d\u53d8\u5bb9\u5668\u7684\u8bdd\u6709\u4e00\u4e2a\u534f\u8bae\uff1a\u5b9e\u73b0\u4e0d\u53ef\u53d8\u5bb9\u5668\uff0c\u4f60\u53ea\u80fd\u5b9a\u4e49 __len__ \u548c __getitem__ (\u4e00\u4f1a\u4f1a\u8bb2\u66f4\u591a)\u3002 \u53ef\u53d8\u5bb9\u5668\u534f\u8bae\u5219\u9700\u8981\u6240\u6709\u4e0d\u53ef\u53d8\u5bb9\u5668\u7684\u6240\u6709\u53e6\u5916\u8fd8\u9700\u8981 __setitem__ \u548c __delitem__ \u3002 \u6700\u7ec8\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u5b9a\u4e49 __iter__ \u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u8fed\u4ee3\u5668\u5fc5\u987b\u9075\u5faa\u8fed\u4ee3\u5668\u534f\u8bae\uff0c\u9700\u8981\u6709 __iter__ (\u8fd4\u56de\u5b83\u672c\u8eab) \u548c next \u3002","title":"\u521b\u5efa\u5b9a\u5236\u7684\u5e8f\u5217"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_10","text":"\u9b54\u6cd5\u65b9\u6cd5 \u8c03\u7528\u65b9\u6cd5 \u63cf\u8ff0 __len__(self) len(self) __index__(self) x[self] \u5bf9\u8c61\u88ab\u4f5c\u4e3a\u7d22\u5f15\u4f7f\u7528\u7684\u65f6\u5019 __getitem__(self, key) self[key] \u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\u65f6 __setitem__(self, key, val) self[key] = val \u5bf9\u67d0\u4e2a\u7d22\u5f15\u503c\u8d4b\u503c\u65f6 __delitem__(self, key) del self[key] \u5220\u9664\u67d0\u4e2a\u7d22\u5f15\u503c\u65f6 __iter__(self) for x in self \u8fed\u4ee3\u65f6 __contains__(self, value) value in self, value not in self \u4f7f\u7528 in \u64cd\u4f5c\u6d4b\u8bd5\u5173\u7cfb\u65f6 __concat__(self, value) self + other \u8fde\u63a5\u4e24\u4e2a\u5bf9\u8c61\u65f6 __reversed__(self) reversed(self) \u5b9e\u73b0\u5f53 reversed() \u88ab\u8c03\u7528\u65f6\u7684\u884c\u4e3a","title":"\u5bb9\u5668\u7684\u9b54\u6cd5"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_11","text":"\u5728Python\u4e2d\uff0c\u65b9\u6cd5\u4e5f\u662f\u4e00\u79cd\u9ad8\u7b49\u7684\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u88ab\u4f20\u9012\u5230\u65b9\u6cd5\u4e2d\u5c31\u50cf\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u60ca\u4eba\u7684\u7279\u6027\u3002 \u5728Python\u4e2d\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u9b54\u672f\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u7c7b\u7684\u5b9e\u4f8b\u7684\u884c\u4e3a\u8868\u73b0\u7684\u50cf\u51fd\u6570\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528\u4ed6\u4eec\uff0c\u5c06\u4e00\u4e2a\u51fd\u6570\u5f53\u505a\u4e00\u4e2a\u53c2\u6570\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\u7b49\u7b49\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u7279\u6027\u8ba9Python\u7f16\u7a0b\u66f4\u52a0\u8212\u9002\u751c\u7f8e\u3002 __call__(self, [args...]) \u5141\u8bb8\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528\u3002\u5b9e\u8d28\u4e0a\u8bf4\uff0c\u8fd9\u610f\u5473\u7740 x() \u4e0e x.__call__() \u662f\u76f8\u540c\u7684\u3002\u6ce8\u610f __call__ \u53c2\u6570\u53ef\u53d8\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5b9a\u4e49 __call__ \u4e3a\u5176\u4ed6\u4f60\u60f3\u8981\u7684\u51fd\u6570\uff0c\u65e0\u8bba\u6709\u591a\u5c11\u4e2a\u53c2\u6570\u3002 __call__ \u5728\u90a3\u4e9b\u7c7b\u7684\u5b9e\u4f8b\u7ecf\u5e38\u6539\u53d8\u72b6\u6001\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u6709\u6548\u3002\u8c03\u7528\u8fd9\u4e2a\u5b9e\u4f8b\u662f\u4e00\u79cd\u6539\u53d8\u8fd9\u4e2a\u5bf9\u8c61\u72b6\u6001\u7684\u76f4\u63a5\u548c\u4f18\u96c5\u7684\u505a\u6cd5\u3002\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u8868\u8fbe\u6700\u597d\u4e0d\u8fc7\u4e86\u3002","title":"\u53ef\u4ee5\u8c03\u7528\u7684\u5bf9\u8c61"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_12","text":"\u5728Python 2.5\u4e2d\uff0c\u4e3a\u4e86\u4ee3\u7801\u5229\u7528\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u5173\u952e\u8bcd with \u8bed\u53e5\u3002\u4f1a\u8bdd\u63a7\u5236\u5728Python\u4e2d\u4e0d\u7f55\u89c1(\u4e4b\u524d\u662f\u4f5c\u4e3a\u5e93\u7684\u4e00\u90e8\u5206\u88ab\u5b9e\u73b0)\uff0c\u76f4\u5230 PEP343 \u88ab\u6dfb\u52a0\u540e\u3002\u5b83\u88ab\u6210\u4e3a\u4e00\u7ea7\u8bed\u8a00\u7ed3\u6784\u3002\u4f60\u4e5f\u8bb8\u4e4b\u524d\u770b\u5230\u8fd9\u6837\u7684\u8bed\u53e5: with open('foo.txt') as bar: # perform some action with bar \u56de\u8bdd\u63a7\u5236\u5668\u901a\u8fc7\u5305\u88c5\u4e00\u4e2a with \u8bed\u53e5\u6765\u8bbe\u7f6e\u548c\u6e05\u7406\u884c\u4e3a\u3002\u56de\u8bdd\u63a7\u5236\u5668\u7684\u884c\u4e3a\u901a\u8fc7\u4e24\u4e2a\u9b54\u672f\u65b9\u6cd5\u6765\u5b9a\u4e49: __enter__(self) \u5b9a\u4e49\u5f53\u4f7f\u7528 with \u8bed\u53e5\u7684\u65f6\u5019\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u521d\u59cb\u5757\u88ab\u521b\u5efa\u7684\u65f6\u5019\u7684\u884c\u4e3a\u3002\u6ce8\u610f __enter__ \u7684\u8fd4\u56de\u503c\u88ab with \u8bed\u53e5\u7684\u76ee\u6807\u6216\u8005 as \u540e\u7684\u540d\u5b57\u7ed1\u5b9a\u3002 __exit__(self, exception_type,exception_value, traceback) \u5b9a\u4e49\u5f53\u4e00\u4e2a\u4ee3\u7801\u5757\u88ab\u6267\u884c\u6216\u8005\u7ec8\u6b62\u540e\u4f1a\u8bdd\u7ba1\u7406\u5668\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u5b83\u53ef\u4ee5\u88ab\u7528\u6765\u5904\u7406\u5f02\u5e38\uff0c\u6e05\u9664\u5de5\u4f5c\u6216\u8005\u505a\u4e00\u4e9b\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\u7684\u65e5\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u4ee3\u7801\u5757\u6267\u884c\u6210\u529f\uff0c exception_type , exception_value , \u548c traceback \u5c06\u4f1a\u662f None \u3002\u5426\u5219\u7684\u8bdd\u4f60\u53ef\u4ee5\u9009\u62e9\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u6216\u8005\u662f\u76f4\u63a5\u4ea4\u7ed9\u7528\u6237\u5904\u7406\u3002\u5982\u679c\u4f60\u60f3\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u7684\u8bdd\uff0c\u786e\u8ba4 __exit__ \u5728\u6240\u6709\u7ed3\u675f\u4e4b\u540e\u4f1a\u8fd4\u56de True \u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5f02\u5e38\u88ab\u4f1a\u8bdd\u7ba1\u7406\u5668\u5904\u7406\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8fd9\u6837\u5904\u7406\u3002 __enter \u548c __exit__ \u5bf9\u4e8e\u660e\u786e\u6709\u5b9a\u4e49\u597d\u7684\u548c\u65e5\u5e38\u884c\u4e3a\u7684\u8bbe\u7f6e\u548c\u6e05\u6d01\u5de5\u4f5c\u7684\u7c7b\u5f88\u6709\u5e2e\u52a9\u3002\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u822c\u7684\u53ef\u4ee5\u5305\u88c5\u5176\u4ed6\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a class Closer : '''\u901a\u8fc7with\u8bed\u53e5\u548c\u4e00\u4e2aclose\u65b9\u6cd5\u6765\u5173\u95ed\u4e00\u4e2a\u5bf9\u8c61\u7684\u4f1a\u8bdd\u7ba1\u7406\u5668''' def __init__ ( self , obj ): self . obj = obj def __enter__ ( self ): return self . obj # bound to target def __exit__ ( self , exception_type , exception_val , trace ): try : self . obj . close () except AttributeError : # obj isn't closable print ( 'Not closable.' ) return True # exception handled successfully with Closer ( int ( 5 )) as i : i += 1 Not closable.","title":"\u4f1a\u8bdd\u7ba1\u7406"},{"location":"Python%E5%9F%BA%E7%A1%80/4.3.%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html#_13","text":"\u6587\u7ae0","title":"\u53c2\u8003"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.27 numpy version: 1.18.1 \u5171\u540c\u7684\u53c2\u6570 \u8fd9\u91cc\u6709\u51e0\u4e2a\u5171\u540c\u7684\u53c2\u6570\uff1a a \uff1a\u4e00\u4e2a array-like \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u6570\u7ec4\uff0c\u53ef\u4ee5\u4e3a list \u3001 tuple \u3001 list of tuple \u3001 list of list \u3001 tuple of list \u3001 tuple of tuple \u7b49\u7b49\u3002 dtype \uff1a\u6570\u7ec4\u7684\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a float \u3002\u4f60\u53ef\u4ee5\u6307\u5b9aPython\u7684\u6807\u51c6\u6570\u503c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 numpy \u7684\u6570\u503c\u7c7b\u578b\u5982\uff1a numpy.int32 \u6216\u8005 numpy.float64 \u7b49\u7b49\u3002 order \uff1a\u6307\u5b9a\u5b58\u50a8\u591a\u7ef4\u6570\u636e\u7684\u65b9\u5f0f\u3002 'C' \uff0c\u8868\u793a\u6309\u884c\u4f18\u5148\u5b58\u50a8\uff08C\u98ce\u683c\uff09\uff1b 'F' \uff0c\u8868\u793a\u6309\u5217\u4f18\u5148\u5b58\u50a8\uff08Fortran\u98ce\u683c\uff09\u3002 \u5bf9\u4e8e **_like() \u51fd\u6570\uff0c order \u53ef\u4ee5\u4e3a\uff1a 'C' \uff0c 'F' \uff0c 'A' \uff08\u8868\u793a\u7ed3\u679c\u7684order\u4e0ea\u76f8\u540c\uff09\uff0c 'K' \uff08\u8868\u793a\u7ed3\u679c\u7684 order \u4e0e a \u5c3d\u53ef\u80fd\u76f8\u4f3c\uff09 subok \uff1a bool \u503c\u3002\u5982\u679c\u4e3a True \u5219\uff1a\u5982\u679c a \u4e3a ndarray \u7684\u5b50\u7c7b\uff08\u5982 matrix \u7c7b\uff09\uff0c\u5219\u7ed3\u679c\u7c7b\u578b\u4e0e a \u7c7b\u578b\u76f8\u540c\u3002\u5982\u679c\u4e3a False \u5219\uff1a\u7ed3\u679c\u7c7b\u578b\u59cb\u7ec8\u4e3a ndarray \u3002\u9ed8\u8ba4\u4e3aTrue\u3002 \u4ece\u73b0\u6709\u7684\u6570\u636e\u521b\u5efa 1 np.array(object[, dtype, copy, order, subok, ndmin]) \uff1a\u4ece object \u521b\u5efa\u3002 object \u53ef\u4ee5\u662f\u4e00\u4e2a ndarray \uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a array_like \u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u542b\u6709\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u6216\u8005 ndarray \u7684 __array__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u4e00\u4e2a\u5e8f\u5217\u3002 copy \uff1a\u9ed8\u8ba4\u4e3a True \uff0c\u8868\u793a\u62f7\u8d1d\u5bf9\u8c61 order \u53ef\u4ee5\u4e3a 'C'\u3001'F'\u3001'A' \u3002\u9ed8\u8ba4\u4e3a 'K' \u3002 subok \u9ed8\u8ba4\u4e3a False ndmin \uff1a\u6307\u5b9a\u7ed3\u679c ndarray \u6700\u5c11\u6709\u591a\u5c11\u4e2a\u7ef4\u5ea6\u3002 2 np.asarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210\u4e00\u4e2a ndarray \u3002\u5176\u4e2d a \u662f array_like \u7684\u5bf9\u8c61\uff0c \u53ef\u4ee5\u662f list \u3001 list of tuple \u3001 tuple \u3001 tuple of list \u3001 ndarray \u7c7b\u578b\u3002 order \u9ed8\u8ba4\u4e3a C \u3002 3 np.asanyarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210 ndarray \u3002 4 np.ascontiguousarray(a[, dtype]) \uff1a\u8fd4\u56deC\u98ce\u683c\u7684\u8fde\u7eed ndarray \u3002 5 np.copy(a[, order]) \uff1a\u8fd4\u56de ndarray \u7684\u4e00\u4efd\u6df1\u62f7\u8d1d\u3002 \u4ee5\u4e0a5\u4e2a\u65b9\u6cd5\u5b9e\u9645\u4e0a\u90fd\u662f\u8c03\u7528\u4e86 array() \u7684\u63a5\u53e3\u3002 np . asarray () # array(a, dtype, copy=False, order=order) np . asanyarray () # array(a, dtype, copy=False, order=order, subok=True) np . ascontiguousarray () # array(a, dtype, copy=False, order='C', ndmin=1) np . copy () # array(a, order=order, copy=True) 6 np.asmatrix(data[, dtype]) \uff1a\u8fd4\u56de matrix \u3002 7 np.frombuffer(buffer[, dtype, count, offset]) \uff1a\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u8fd4\u56de\u4e00\u7ef4 ndarray \u3002 count \u6307\u5b9a\u8bfb\u53d6\u7684\u6570\u91cf\uff0c -1 \u8868\u793a\u5168\u90e8\u8bfb\u53d6\uff1b offset \u6307\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u4e3a0\u3002 \u521b\u5efa\u7684\u6570\u7ec4\u4e0e buffer \u5171\u4eab\u5185\u5b58\u3002 buffer \u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 buffer \u63a5\u53e3\u7684\u5bf9\u8c61\uff08 \u5185\u7f6e\u7684 bytes/bytearray/array.array \u7c7b\u578b\u63d0\u4f9b\u4e86\u8be5\u63a5\u53e3 \uff09\u3002 from array import array # array.array \u63d0\u4f9b\u4e86\u7c7b\u4f3clist\u5bf9\u8c61\u7684\u5185\u5b58\u673a\u5236 # \u521b\u5efa\u4e00\u4e2aarray\u6570\u7ec4 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # \u901a\u8fc7np.frombuffer()\u521b\u5efa\u4e00\u4e2a\u548ca\u5171\u4eab\u5185\u5b58\u7684NumPy\u6570\u7ec4 na = np . frombuffer ( a , dtype = np . float ) print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # \u4fee\u6539NumPy\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 a # array\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e5f\u540c\u65f6\u6539\u53d8 a : array ( 'd' , [ 1.0 , 2.0 , 3.0 , 4.0 ]) na : [ 1 . 2 . 3 . 4 .] array('d', [1.0, 20.0, 3.0, 4.0]) 8 np.fromfile(file[, dtype, count, sep]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8005\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u8fd4\u56de ndarray \u3002 sep \uff1a\u5f53\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65f6\uff0c\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u5982\u679c sep \u662f\u7a7a\u5b57\u7b26\u4e32\u5219\u8868\u793a\u6587\u4ef6\u5e94\u8be5\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\uff1b\u5982\u679c sep \u4e3a \" \" \u8868\u793a\u53ef\u4ee5\u5339\u914d0\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u3002 9 np.fromfunction(function, shape, \\**kwargs) \uff1a\u8fd4\u56de\u4e00\u4e2a ndarray \u3002function\u4f1a\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5750\u6807\u70b9\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002\u5047\u8bbe shape \u7684\u7ef4\u5ea6\u4e3aN\uff0c\u90a3\u4e48 function \u5e26\u6709 N \u4e2a\u53c2\u6570\uff0c fn(x1,x2,...x_N) \uff0c\u5176\u8fd4\u56de\u503c\u5c31\u662f\u8be5\u5750\u6807\u70b9\u7684\u503c\u3002 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array([[0., 1., 2.], [1., 2., 3.], [2., 3., 4.]]) 10 np.fromiter(iterable, dtype[, count]) \uff1a\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fed\u4ee3\u83b7\u53d6\u6570\u636e\u521b\u5efa\u4e00\u7ef4 ndarray \u3002 np . fromiter ( \"123\" , dtype = \"int64\" ) array([1, 2, 3], dtype=int64) 11 np.fromstring(string[, dtype, count, sep]) \uff1a\u4ece\u5b57\u7b26\u4e32\u6216\u8005 raw binary \u4e2d\u521b\u5efa\u4e00\u7ef4 ndarray \u3002\u5982\u679c sep \u4e3a\u7a7a\u5b57\u7b26\u4e32\u5219 string \u5c06\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u91ca\uff08\u5373\u6bcf\u4e2a\u5b57\u7b26\u4f5c\u4e3a ASCII \u7801\u503c\u5bf9\u5f85\uff09\u3002\u521b\u5efa\u7684\u6570\u7ec4\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u533a\u3002 a = \"abcdefg\" a = np . fromstring ( a , dtype = np . int8 ) # \u5c06\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7f16\u7801\u89e3\u91ca\u4e3a\u6574\u6570 print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] .\\setup_m.py:2: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead from datetime import datetime 12 np.loadtxt(fname[, dtype, comments, delimiter, ...]) :\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e\u521b\u5efa ndarray \uff0c\u8981\u6c42\u6587\u672c\u6587\u4ef6\u6bcf\u4e00\u884c\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u503c\u3002 comments \uff1a\u6307\u793a\u6ce8\u91ca\u884c\u7684\u8d77\u59cb\u5b57\u7b26\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u5217\u8868\uff08\u9ed8\u8ba4\u4e3a # \uff09\u3002 delimiter :\u6307\u5b9a\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u767d\u7b26\u3002 converters \uff1a\u5c06\u6307\u5b9a\u5217\u53f7(0,1,2...)\u7684\u5217\u6570\u636e\u6267\u884c\u8f6c\u6362\uff0c\u662f\u4e00\u4e2a map \uff0c\u5982 {0:func1} \u8868\u793a\u5bf9\u7b2c\u4e00\u5217\u6570\u636e\u6267\u884c func1(val_0) \u3002 skiprows \uff1a\u6307\u5b9a\u8df3\u8fc7\u5f00\u5934\u7684\u591a\u5c11\u884c\u3002 usecols \uff1a\u6307\u5b9a\u8bfb\u53d6\u90a3\u4e9b\u5217\uff080\u8868\u793a\u7b2c\u4e00\u5217\uff09\u3002 \u4ece\u6570\u503c\u533a\u95f4\u521b\u5efa 1 np.arange([start,] stop[, step,][, dtype]) :\u8fd4\u56de\u5747\u5300\u95f4\u9694\u7684\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u533a\u95f4\u662f\u534a\u95ed\u534a\u5f00\u7684 [start,stop) \uff0c\u5176\u91c7\u6837\u884c\u4e3a\u7c7b\u4f3cPython\u7684 range \u51fd\u6570\u3002 start \u4e3a\u5f00\u59cb\u70b9\uff0c stop \u4e3a\u7ec8\u6b62\u70b9\uff0c step \u4e3a\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u8fd9\u51e0\u4e2a\u6570\u53ef\u4ee5\u4e3a\u6574\u6570\u53ef\u4ee5\u4e3a\u6d6e\u70b9\u6570\u3002 \u6ce8\u610f\u5982\u679c step \u4e3a\u6d6e\u70b9\u6570\uff0c\u5219\u7ed3\u679c\u53ef\u80fd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u76f8\u7b49\u6bd4\u8f83\u4e0d\u51c6\u786e\uff08\u8ba1\u7b97\u673a\u7cbe\u5ea6\u6709\u9650\uff09\u3002 2 np.linspace(start, stop[, num, endpoint, ...]) \uff1a\u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \uff08\u9ed8\u8ba4\u4e3a50\uff09\u3002\u533a\u95f4\u662f\u95ed\u533a\u95f4 [start,stop] \u3002 endpoint \u4e3a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a\u771f\u5219\u8868\u793a stop \u662f\u6700\u540e\u91c7\u6837\u7684\u503c\uff08\u9ed8\u8ba4\u4e3a True \uff09\uff0c\u5426\u5219\u7ed3\u679c\u4e0d\u5305\u542b stop \u3002 retstep \u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u91c7\u6837\u6b65\u957f step \uff0c\u9ed8\u8ba4\u4e3a True \u3002 3 np.logspace(start, stop[, num, endpoint, base, ...]) \uff1a\u8fd4\u56de\u5bf9\u6570\u7ea7\u522b\u4e0a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u91c7\u6837\u70b9\u5f00\u59cb\u4e8e base^start \uff0c\u7ed3\u675f\u4e8e base^stop \u3002 base \u4e3a\u5bf9\u6570\u7684\u57fa\uff0c\u9ed8\u8ba4\u4e3a 10\u3002 \u5b83\u903b\u8f91\u4e0a\u76f8\u5f53\u4e8e\u5148\u6267\u884c arange \u83b7\u53d6\u6570\u7ec4 array \uff0c\u7136\u540e\u518d\u6267\u884c base^array[i] \u83b7\u53d6\u91c7\u6837\u70b9 \u5b83\u6ca1\u6709 retstep \u5173\u952e\u5b57\u53c2\u6570 \u4ee5\u586b\u5145\u7684\u65b9\u5f0f\u521b\u5efa 1 np.empty(shape[,dtype,order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c dtype \uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 2 np.empty_like(a[,dtype,order,subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 # \u5185\u5b58\u672a\u521d\u59cb\u5316 a = np . empty (( 3 , 2 ), order = \"C\" ) # \u5185\u5b58\u672a\u521d\u59cb\u5316 np . empty_like ( a ) array([[0., 1.], [2., 3.], [4., 5.]]) 3 np.eye(N[, M, k, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a==\u4e8c\u7ef4\u6570\u7ec4==\uff0c\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5176\u4f59\u5143\u7d20\u4e3a0\u3002 M \u9ed8\u8ba4\u7b49\u4e8e N \u3002 k \u9ed8\u8ba4\u4e3a0\u8868\u793a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u6b63\u6570\u5219\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u8d1f\u6570\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\u3002 4 np.identity(n[, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\u3002 np . eye ( N = 2 , M = 3 ) np . eye ( N = 2 , M = 3 , k = 0 ) # \u53c2\u6570k\u662f\u53ef\u4ee5\u8d85\u51fa\u8303\u56f4\u7684 np . eye ( N = 2 , M = 3 , k = 1 ) # \u8fd4\u56den\u9636\u5355\u4f4d\u77e9\u9635 np . identity ( n = 4 ) array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) 5 np.ones(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1. 6 np.ones_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1\u3002 7 np.zeros(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0. 8 np.zeros_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \uff08\u53e6\u4e00\u4e2a\u6570\u7ec4\uff09\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002 9 np.full(shape, fill_value[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 10 np.full_like(a, fill_value[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 np . full (( 2 , 3 ), fill_value = 2 ) array([[2, 2, 2], [2, 2, 2]])","title":"6.1.\u521b\u5efa\u6570\u7ec4"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_1","text":"\u8fd9\u91cc\u6709\u51e0\u4e2a\u5171\u540c\u7684\u53c2\u6570\uff1a a \uff1a\u4e00\u4e2a array-like \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u6570\u7ec4\uff0c\u53ef\u4ee5\u4e3a list \u3001 tuple \u3001 list of tuple \u3001 list of list \u3001 tuple of list \u3001 tuple of tuple \u7b49\u7b49\u3002 dtype \uff1a\u6570\u7ec4\u7684\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a float \u3002\u4f60\u53ef\u4ee5\u6307\u5b9aPython\u7684\u6807\u51c6\u6570\u503c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 numpy \u7684\u6570\u503c\u7c7b\u578b\u5982\uff1a numpy.int32 \u6216\u8005 numpy.float64 \u7b49\u7b49\u3002 order \uff1a\u6307\u5b9a\u5b58\u50a8\u591a\u7ef4\u6570\u636e\u7684\u65b9\u5f0f\u3002 'C' \uff0c\u8868\u793a\u6309\u884c\u4f18\u5148\u5b58\u50a8\uff08C\u98ce\u683c\uff09\uff1b 'F' \uff0c\u8868\u793a\u6309\u5217\u4f18\u5148\u5b58\u50a8\uff08Fortran\u98ce\u683c\uff09\u3002 \u5bf9\u4e8e **_like() \u51fd\u6570\uff0c order \u53ef\u4ee5\u4e3a\uff1a 'C' \uff0c 'F' \uff0c 'A' \uff08\u8868\u793a\u7ed3\u679c\u7684order\u4e0ea\u76f8\u540c\uff09\uff0c 'K' \uff08\u8868\u793a\u7ed3\u679c\u7684 order \u4e0e a \u5c3d\u53ef\u80fd\u76f8\u4f3c\uff09 subok \uff1a bool \u503c\u3002\u5982\u679c\u4e3a True \u5219\uff1a\u5982\u679c a \u4e3a ndarray \u7684\u5b50\u7c7b\uff08\u5982 matrix \u7c7b\uff09\uff0c\u5219\u7ed3\u679c\u7c7b\u578b\u4e0e a \u7c7b\u578b\u76f8\u540c\u3002\u5982\u679c\u4e3a False \u5219\uff1a\u7ed3\u679c\u7c7b\u578b\u59cb\u7ec8\u4e3a ndarray \u3002\u9ed8\u8ba4\u4e3aTrue\u3002","title":"\u5171\u540c\u7684\u53c2\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_2","text":"1 np.array(object[, dtype, copy, order, subok, ndmin]) \uff1a\u4ece object \u521b\u5efa\u3002 object \u53ef\u4ee5\u662f\u4e00\u4e2a ndarray \uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a array_like \u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u542b\u6709\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u6216\u8005 ndarray \u7684 __array__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u4e00\u4e2a\u5e8f\u5217\u3002 copy \uff1a\u9ed8\u8ba4\u4e3a True \uff0c\u8868\u793a\u62f7\u8d1d\u5bf9\u8c61 order \u53ef\u4ee5\u4e3a 'C'\u3001'F'\u3001'A' \u3002\u9ed8\u8ba4\u4e3a 'K' \u3002 subok \u9ed8\u8ba4\u4e3a False ndmin \uff1a\u6307\u5b9a\u7ed3\u679c ndarray \u6700\u5c11\u6709\u591a\u5c11\u4e2a\u7ef4\u5ea6\u3002 2 np.asarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210\u4e00\u4e2a ndarray \u3002\u5176\u4e2d a \u662f array_like \u7684\u5bf9\u8c61\uff0c \u53ef\u4ee5\u662f list \u3001 list of tuple \u3001 tuple \u3001 tuple of list \u3001 ndarray \u7c7b\u578b\u3002 order \u9ed8\u8ba4\u4e3a C \u3002 3 np.asanyarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210 ndarray \u3002 4 np.ascontiguousarray(a[, dtype]) \uff1a\u8fd4\u56deC\u98ce\u683c\u7684\u8fde\u7eed ndarray \u3002 5 np.copy(a[, order]) \uff1a\u8fd4\u56de ndarray \u7684\u4e00\u4efd\u6df1\u62f7\u8d1d\u3002 \u4ee5\u4e0a5\u4e2a\u65b9\u6cd5\u5b9e\u9645\u4e0a\u90fd\u662f\u8c03\u7528\u4e86 array() \u7684\u63a5\u53e3\u3002 np . asarray () # array(a, dtype, copy=False, order=order) np . asanyarray () # array(a, dtype, copy=False, order=order, subok=True) np . ascontiguousarray () # array(a, dtype, copy=False, order='C', ndmin=1) np . copy () # array(a, order=order, copy=True) 6 np.asmatrix(data[, dtype]) \uff1a\u8fd4\u56de matrix \u3002 7 np.frombuffer(buffer[, dtype, count, offset]) \uff1a\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u8fd4\u56de\u4e00\u7ef4 ndarray \u3002 count \u6307\u5b9a\u8bfb\u53d6\u7684\u6570\u91cf\uff0c -1 \u8868\u793a\u5168\u90e8\u8bfb\u53d6\uff1b offset \u6307\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u4e3a0\u3002 \u521b\u5efa\u7684\u6570\u7ec4\u4e0e buffer \u5171\u4eab\u5185\u5b58\u3002 buffer \u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 buffer \u63a5\u53e3\u7684\u5bf9\u8c61\uff08 \u5185\u7f6e\u7684 bytes/bytearray/array.array \u7c7b\u578b\u63d0\u4f9b\u4e86\u8be5\u63a5\u53e3 \uff09\u3002 from array import array # array.array \u63d0\u4f9b\u4e86\u7c7b\u4f3clist\u5bf9\u8c61\u7684\u5185\u5b58\u673a\u5236 # \u521b\u5efa\u4e00\u4e2aarray\u6570\u7ec4 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # \u901a\u8fc7np.frombuffer()\u521b\u5efa\u4e00\u4e2a\u548ca\u5171\u4eab\u5185\u5b58\u7684NumPy\u6570\u7ec4 na = np . frombuffer ( a , dtype = np . float ) print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # \u4fee\u6539NumPy\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 a # array\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e5f\u540c\u65f6\u6539\u53d8 a : array ( 'd' , [ 1.0 , 2.0 , 3.0 , 4.0 ]) na : [ 1 . 2 . 3 . 4 .] array('d', [1.0, 20.0, 3.0, 4.0]) 8 np.fromfile(file[, dtype, count, sep]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8005\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u8fd4\u56de ndarray \u3002 sep \uff1a\u5f53\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65f6\uff0c\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u5982\u679c sep \u662f\u7a7a\u5b57\u7b26\u4e32\u5219\u8868\u793a\u6587\u4ef6\u5e94\u8be5\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\uff1b\u5982\u679c sep \u4e3a \" \" \u8868\u793a\u53ef\u4ee5\u5339\u914d0\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u3002 9 np.fromfunction(function, shape, \\**kwargs) \uff1a\u8fd4\u56de\u4e00\u4e2a ndarray \u3002function\u4f1a\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5750\u6807\u70b9\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002\u5047\u8bbe shape \u7684\u7ef4\u5ea6\u4e3aN\uff0c\u90a3\u4e48 function \u5e26\u6709 N \u4e2a\u53c2\u6570\uff0c fn(x1,x2,...x_N) \uff0c\u5176\u8fd4\u56de\u503c\u5c31\u662f\u8be5\u5750\u6807\u70b9\u7684\u503c\u3002 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array([[0., 1., 2.], [1., 2., 3.], [2., 3., 4.]]) 10 np.fromiter(iterable, dtype[, count]) \uff1a\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fed\u4ee3\u83b7\u53d6\u6570\u636e\u521b\u5efa\u4e00\u7ef4 ndarray \u3002 np . fromiter ( \"123\" , dtype = \"int64\" ) array([1, 2, 3], dtype=int64) 11 np.fromstring(string[, dtype, count, sep]) \uff1a\u4ece\u5b57\u7b26\u4e32\u6216\u8005 raw binary \u4e2d\u521b\u5efa\u4e00\u7ef4 ndarray \u3002\u5982\u679c sep \u4e3a\u7a7a\u5b57\u7b26\u4e32\u5219 string \u5c06\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u91ca\uff08\u5373\u6bcf\u4e2a\u5b57\u7b26\u4f5c\u4e3a ASCII \u7801\u503c\u5bf9\u5f85\uff09\u3002\u521b\u5efa\u7684\u6570\u7ec4\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u533a\u3002 a = \"abcdefg\" a = np . fromstring ( a , dtype = np . int8 ) # \u5c06\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7f16\u7801\u89e3\u91ca\u4e3a\u6574\u6570 print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] .\\setup_m.py:2: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead from datetime import datetime 12 np.loadtxt(fname[, dtype, comments, delimiter, ...]) :\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e\u521b\u5efa ndarray \uff0c\u8981\u6c42\u6587\u672c\u6587\u4ef6\u6bcf\u4e00\u884c\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u503c\u3002 comments \uff1a\u6307\u793a\u6ce8\u91ca\u884c\u7684\u8d77\u59cb\u5b57\u7b26\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u5217\u8868\uff08\u9ed8\u8ba4\u4e3a # \uff09\u3002 delimiter :\u6307\u5b9a\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u767d\u7b26\u3002 converters \uff1a\u5c06\u6307\u5b9a\u5217\u53f7(0,1,2...)\u7684\u5217\u6570\u636e\u6267\u884c\u8f6c\u6362\uff0c\u662f\u4e00\u4e2a map \uff0c\u5982 {0:func1} \u8868\u793a\u5bf9\u7b2c\u4e00\u5217\u6570\u636e\u6267\u884c func1(val_0) \u3002 skiprows \uff1a\u6307\u5b9a\u8df3\u8fc7\u5f00\u5934\u7684\u591a\u5c11\u884c\u3002 usecols \uff1a\u6307\u5b9a\u8bfb\u53d6\u90a3\u4e9b\u5217\uff080\u8868\u793a\u7b2c\u4e00\u5217\uff09\u3002","title":"\u4ece\u73b0\u6709\u7684\u6570\u636e\u521b\u5efa"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_3","text":"1 np.arange([start,] stop[, step,][, dtype]) :\u8fd4\u56de\u5747\u5300\u95f4\u9694\u7684\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u533a\u95f4\u662f\u534a\u95ed\u534a\u5f00\u7684 [start,stop) \uff0c\u5176\u91c7\u6837\u884c\u4e3a\u7c7b\u4f3cPython\u7684 range \u51fd\u6570\u3002 start \u4e3a\u5f00\u59cb\u70b9\uff0c stop \u4e3a\u7ec8\u6b62\u70b9\uff0c step \u4e3a\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u8fd9\u51e0\u4e2a\u6570\u53ef\u4ee5\u4e3a\u6574\u6570\u53ef\u4ee5\u4e3a\u6d6e\u70b9\u6570\u3002 \u6ce8\u610f\u5982\u679c step \u4e3a\u6d6e\u70b9\u6570\uff0c\u5219\u7ed3\u679c\u53ef\u80fd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u76f8\u7b49\u6bd4\u8f83\u4e0d\u51c6\u786e\uff08\u8ba1\u7b97\u673a\u7cbe\u5ea6\u6709\u9650\uff09\u3002 2 np.linspace(start, stop[, num, endpoint, ...]) \uff1a\u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \uff08\u9ed8\u8ba4\u4e3a50\uff09\u3002\u533a\u95f4\u662f\u95ed\u533a\u95f4 [start,stop] \u3002 endpoint \u4e3a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a\u771f\u5219\u8868\u793a stop \u662f\u6700\u540e\u91c7\u6837\u7684\u503c\uff08\u9ed8\u8ba4\u4e3a True \uff09\uff0c\u5426\u5219\u7ed3\u679c\u4e0d\u5305\u542b stop \u3002 retstep \u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u91c7\u6837\u6b65\u957f step \uff0c\u9ed8\u8ba4\u4e3a True \u3002 3 np.logspace(start, stop[, num, endpoint, base, ...]) \uff1a\u8fd4\u56de\u5bf9\u6570\u7ea7\u522b\u4e0a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u91c7\u6837\u70b9\u5f00\u59cb\u4e8e base^start \uff0c\u7ed3\u675f\u4e8e base^stop \u3002 base \u4e3a\u5bf9\u6570\u7684\u57fa\uff0c\u9ed8\u8ba4\u4e3a 10\u3002 \u5b83\u903b\u8f91\u4e0a\u76f8\u5f53\u4e8e\u5148\u6267\u884c arange \u83b7\u53d6\u6570\u7ec4 array \uff0c\u7136\u540e\u518d\u6267\u884c base^array[i] \u83b7\u53d6\u91c7\u6837\u70b9 \u5b83\u6ca1\u6709 retstep \u5173\u952e\u5b57\u53c2\u6570","title":"\u4ece\u6570\u503c\u533a\u95f4\u521b\u5efa"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.1.%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.html#_4","text":"1 np.empty(shape[,dtype,order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c dtype \uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 2 np.empty_like(a[,dtype,order,subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 # \u5185\u5b58\u672a\u521d\u59cb\u5316 a = np . empty (( 3 , 2 ), order = \"C\" ) # \u5185\u5b58\u672a\u521d\u59cb\u5316 np . empty_like ( a ) array([[0., 1.], [2., 3.], [4., 5.]]) 3 np.eye(N[, M, k, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a==\u4e8c\u7ef4\u6570\u7ec4==\uff0c\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5176\u4f59\u5143\u7d20\u4e3a0\u3002 M \u9ed8\u8ba4\u7b49\u4e8e N \u3002 k \u9ed8\u8ba4\u4e3a0\u8868\u793a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u6b63\u6570\u5219\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u8d1f\u6570\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\u3002 4 np.identity(n[, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\u3002 np . eye ( N = 2 , M = 3 ) np . eye ( N = 2 , M = 3 , k = 0 ) # \u53c2\u6570k\u662f\u53ef\u4ee5\u8d85\u51fa\u8303\u56f4\u7684 np . eye ( N = 2 , M = 3 , k = 1 ) # \u8fd4\u56den\u9636\u5355\u4f4d\u77e9\u9635 np . identity ( n = 4 ) array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) 5 np.ones(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1. 6 np.ones_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1\u3002 7 np.zeros(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0. 8 np.zeros_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \uff08\u53e6\u4e00\u4e2a\u6570\u7ec4\uff09\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002 9 np.full(shape, fill_value[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 10 np.full_like(a, fill_value[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 np . full (( 2 , 3 ), fill_value = 2 ) array([[2, 2, 2], [2, 2, 2]])","title":"\u4ee5\u586b\u5145\u7684\u65b9\u5f0f\u521b\u5efa"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.10.%E5%87%BD%E6%95%B0%E5%BA%93.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 numpy version: 1.18.1 \u968f\u673a\u6570\u5e93 \u51fd\u6570 \u8bf4\u660e seed \u786e\u5b9a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50 permutation \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u7684\u968f\u673a\u6392\u5217\u6216\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u6392\u5217\u7684\u8303\u56f4 shuffle \u5bf9\u4e00\u4e2a\u5e8f\u5217\u5c31\u5730\u968f\u673a\u6392\u5217 rand \u4ea7\u751f\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c randint \u4ece\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u9650\u8303\u56f4\u5185\u968f\u673a\u9009\u53d6\u6574\u6570 randn \u4ea7\u751f\u6b63\u6001\u5206\u5e03\uff08\u5e73\u5747\u503c\u4e3a0,\u6807\u51c6\u5dee\u4e3a1)\u7684\u6837\u672c\u503c\uff0c\u7c7b\u4f3c\u4e8eMATLAB\u63a5\u53e3 binomial \u4ea7\u751f_\u9879\u5206\u5e03\u7684\u6837\u672c\u503c normal \u4ea7\u751f\u6b63\u6001\uff08\u9ad8\u65af\uff09\u5206\u5e03\u7684\u6837\u672c\u503c beta \u4ea7\u751fBeta\u5206\u5e03\u7684\u6837\u672c\u503c chisquare \u4ea7\u751f\u5361\u65b9\u5206\u5e03\u7684\u6837\u672c\u503c gamma \u4ea7\u751fGamma\u5206\u5e03\u7684\u6837\u672c\u503c uniform \u4ea7\u751f\u5728[0,1)\u4e2d\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c \u968f\u673a\u62bd\u6837 np.random.choice(a, size=None, replace=True, p=None) \uff1a\u4ece\u4e00\u7ef4\u6570\u7ec4 a \u4e2d\u968f\u673a\u62bd\u53d6\u6837\u672c\u91cf\u4e3a size \u7684\u6837\u672c\u3002 a \u5fc5\u987b\u662f\u4e00\u7ef4\u7684\u3002 replace \u63a7\u5236\u662f\u5426\u91cd\u590d\u62bd\u6837\uff0c p \u662fa\u7684\u6982\u7387\u5206 \u5e03\uff0c p \u548c a \u5fc5\u987b\u6709\u76f8\u540c\u7684size\u3002 a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] np . random . choice ( a , size = ( 2 , 2 ), replace = False , p = None ) array([[1, 8], [3, 7]]) \u7ebf\u6027\u4ee3\u6570 \u5e38\u7528\u7684 numpy.linalg \u51fd\u6570\uff1a \u51fd\u6570 \u8bf4\u660e diag \u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u65b9\u9635\u7684\u5bf9\u89d2\u7ebf\uff08\u6216\u975e\u5bf9\u89d2\u7ebf\uff09\u5143\u7d20\uff0c\u6216\u5c06\u4e00\u7ef4\u6570\u7ec4 \u8f6c\u6362\u4e3a\u65b9\u9635\uff08\u975e\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a0) dot \u77e9\u9635\u4e58\u6cd5 trace \u8ba1\u7b97\u5bf9\u89d2\u7ebf\u5143\u7d20\u7684\u548c det \u8ba1\u7b97\u77e9\u9635\u884c\u5217\u5f0f eig \u8ba1\u7b97\u65b9\u9635\u7684\u672c\u5f81\u503c\u548c\u672c\u5f81\u5411\u91cf inv \u8ba1\u7b97\u65b9\u9635\u7684\u9006 pinv \u8ba1\u7b97\u77e9\u9635\u7684Moore-Penrose\u4f2a\u9006 qr \u8ba1\u7b97QR\u5206\u89e3 svd \u8ba1\u7b97\u5947\u5f02\u503c\u5206\u89e3\uff08SVD) solve \u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4$Ax = b$\uff0c\u5176\u4e2d$A$\u4e3a\u4e00\u4e2a\u65b9\u9635 Istsq \u8ba1\u7b97$Ax = b$\u7684\u6700\u5c0f\u4e8c\u4e58\u89e3","title":"6.10.\u51fd\u6570\u5e93"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.10.%E5%87%BD%E6%95%B0%E5%BA%93.html#_1","text":"\u51fd\u6570 \u8bf4\u660e seed \u786e\u5b9a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u79cd\u5b50 permutation \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u7684\u968f\u673a\u6392\u5217\u6216\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u6392\u5217\u7684\u8303\u56f4 shuffle \u5bf9\u4e00\u4e2a\u5e8f\u5217\u5c31\u5730\u968f\u673a\u6392\u5217 rand \u4ea7\u751f\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c randint \u4ece\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u9650\u8303\u56f4\u5185\u968f\u673a\u9009\u53d6\u6574\u6570 randn \u4ea7\u751f\u6b63\u6001\u5206\u5e03\uff08\u5e73\u5747\u503c\u4e3a0,\u6807\u51c6\u5dee\u4e3a1)\u7684\u6837\u672c\u503c\uff0c\u7c7b\u4f3c\u4e8eMATLAB\u63a5\u53e3 binomial \u4ea7\u751f_\u9879\u5206\u5e03\u7684\u6837\u672c\u503c normal \u4ea7\u751f\u6b63\u6001\uff08\u9ad8\u65af\uff09\u5206\u5e03\u7684\u6837\u672c\u503c beta \u4ea7\u751fBeta\u5206\u5e03\u7684\u6837\u672c\u503c chisquare \u4ea7\u751f\u5361\u65b9\u5206\u5e03\u7684\u6837\u672c\u503c gamma \u4ea7\u751fGamma\u5206\u5e03\u7684\u6837\u672c\u503c uniform \u4ea7\u751f\u5728[0,1)\u4e2d\u5747\u5300\u5206\u5e03\u7684\u6837\u672c\u503c","title":"\u968f\u673a\u6570\u5e93"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.10.%E5%87%BD%E6%95%B0%E5%BA%93.html#_2","text":"np.random.choice(a, size=None, replace=True, p=None) \uff1a\u4ece\u4e00\u7ef4\u6570\u7ec4 a \u4e2d\u968f\u673a\u62bd\u53d6\u6837\u672c\u91cf\u4e3a size \u7684\u6837\u672c\u3002 a \u5fc5\u987b\u662f\u4e00\u7ef4\u7684\u3002 replace \u63a7\u5236\u662f\u5426\u91cd\u590d\u62bd\u6837\uff0c p \u662fa\u7684\u6982\u7387\u5206 \u5e03\uff0c p \u548c a \u5fc5\u987b\u6709\u76f8\u540c\u7684size\u3002 a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] np . random . choice ( a , size = ( 2 , 2 ), replace = False , p = None ) array([[1, 8], [3, 7]])","title":"\u968f\u673a\u62bd\u6837"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.10.%E5%87%BD%E6%95%B0%E5%BA%93.html#_3","text":"\u5e38\u7528\u7684 numpy.linalg \u51fd\u6570\uff1a \u51fd\u6570 \u8bf4\u660e diag \u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u65b9\u9635\u7684\u5bf9\u89d2\u7ebf\uff08\u6216\u975e\u5bf9\u89d2\u7ebf\uff09\u5143\u7d20\uff0c\u6216\u5c06\u4e00\u7ef4\u6570\u7ec4 \u8f6c\u6362\u4e3a\u65b9\u9635\uff08\u975e\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a0) dot \u77e9\u9635\u4e58\u6cd5 trace \u8ba1\u7b97\u5bf9\u89d2\u7ebf\u5143\u7d20\u7684\u548c det \u8ba1\u7b97\u77e9\u9635\u884c\u5217\u5f0f eig \u8ba1\u7b97\u65b9\u9635\u7684\u672c\u5f81\u503c\u548c\u672c\u5f81\u5411\u91cf inv \u8ba1\u7b97\u65b9\u9635\u7684\u9006 pinv \u8ba1\u7b97\u77e9\u9635\u7684Moore-Penrose\u4f2a\u9006 qr \u8ba1\u7b97QR\u5206\u89e3 svd \u8ba1\u7b97\u5947\u5f02\u503c\u5206\u89e3\uff08SVD) solve \u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4$Ax = b$\uff0c\u5176\u4e2d$A$\u4e3a\u4e00\u4e2a\u65b9\u9635 Istsq \u8ba1\u7b97$Ax = b$\u7684\u6700\u5c0f\u4e8c\u4e58\u89e3","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html","text":"import numpy as np import os Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 x = np . arange ( 20 ) x . resize ( 4 , 5 ) npy ny.save(file, arr, allow_pickle=True, fix_imports=True) \uff1a\u5c06 \u4e00\u4e2a numpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a .npy \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npy \u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd arr \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4 allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 save_path = \"array\" # \u4fdd\u5b58\u65f6\u4f1a\u81ea\u52a8\u6dfb\u52a0.npy\u540e\u7f00 np . save ( save_path , x ) # npy\u6587\u4ef6\u88ab\u4fdd\u5b58\u5728\u5de5\u4f5c\u76ee\u5f55 [ i for i in os . listdir () if i . endswith ( \"npy\" )] ['array.npy'] \u8bfb\u5165 .npy \u6587\u4ef6 ny.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII') \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u7ec4\u3002\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7ec4\uff0c\u6216\u8005\u5b57\u5178\uff08\u5f53\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f savez \u751f\u6210\u65f6\uff09 file \uff1a\u4e00\u4e2a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002 mmap_mode \uff1a\u5982\u679c\u4e0d\u662fNone\uff0c\u5219memory-map\u8be5\u6587\u4ef6\u3002\u6b64\u65f6\u5bf9\u6570\u7ec4\u7684\u4fee\u6539\u4f1a\u540c\u6b65\u5230\u6587\u4ef6\u4e0a\u3002\u5f53\u8bfb\u53d6\u5927\u6587\u4ef6\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5fc5\u4e00\u6b21\u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\u3002\u53ef\u9009\u503c\u4e3aNone/'r+'/'r'/'w+'/'c' allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 encoding \uff1a\u53ea\u7528\u4e8epython2\uff0c\u8bfb\u53d6python2\u5b57\u7b26\u4e32\u3002 np . load ( \"array.npy\" , allow_pickle = True ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]) npz ny.savez(file, *args, **kwds) \uff1a\u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npz \uff0c\u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd args \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\u3002\u8fd9\u4e9b\u6570\u7ec4\u7684\u540d\u5b57\u5c06\u88ab\u81ea\u52a8\u547d\u540d\u4e3a arr_0/arr_1/... kwds \uff1a\u5c06\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u5c31\u662f\u952e\u7684\u540d\u5b57 np . savez ( save_path , x , x ) \u8bfb\u5165 .npyz \u6587\u4ef6 np . load ( \"array.npz\" , allow_pickle = True ) <numpy.lib.npyio.NpzFile at 0x1d934ea1be0> \u53e6\u5916\uff0c np.savez_compressed \u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u538b\u7f29\u6587\u4ef6\u3002 \u6587\u672c\u6587\u4ef6 np.savetxt() \u5c06\u4e00\u4e2anumpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff1a np . savetxt ( save_path , x ) \u8bfb\u5165\u6587\u672c\u6587\u4ef6 np . loadtxt ( \"array\" ) array([[ 0., 1., 2., 3., 4.], [ 5., 6., 7., 8., 9.], [10., 11., 12., 13., 14.], [15., 16., 17., 18., 19.]]) \u6e05\u9664\u6587\u4ef6 try : os . remove ( \"array\" ) os . remove ( \"array.npy\" ) os . remove ( \"array.npz\" ) except : pass","title":"6.11.\u4fdd\u5b58\u548c\u52a0\u8f7d"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html#npy","text":"ny.save(file, arr, allow_pickle=True, fix_imports=True) \uff1a\u5c06 \u4e00\u4e2a numpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a .npy \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npy \u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd arr \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4 allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 save_path = \"array\" # \u4fdd\u5b58\u65f6\u4f1a\u81ea\u52a8\u6dfb\u52a0.npy\u540e\u7f00 np . save ( save_path , x ) # npy\u6587\u4ef6\u88ab\u4fdd\u5b58\u5728\u5de5\u4f5c\u76ee\u5f55 [ i for i in os . listdir () if i . endswith ( \"npy\" )] ['array.npy'] \u8bfb\u5165 .npy \u6587\u4ef6 ny.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII') \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u7ec4\u3002\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5143\u7ec4\uff0c\u6216\u8005\u5b57\u5178\uff08\u5f53\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f savez \u751f\u6210\u65f6\uff09 file \uff1a\u4e00\u4e2a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002 mmap_mode \uff1a\u5982\u679c\u4e0d\u662fNone\uff0c\u5219memory-map\u8be5\u6587\u4ef6\u3002\u6b64\u65f6\u5bf9\u6570\u7ec4\u7684\u4fee\u6539\u4f1a\u540c\u6b65\u5230\u6587\u4ef6\u4e0a\u3002\u5f53\u8bfb\u53d6\u5927\u6587\u4ef6\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5fc5\u4e00\u6b21\u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\u3002\u53ef\u9009\u503c\u4e3aNone/'r+'/'r'/'w+'/'c' allow_pickle \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u4f7f\u7528Python pickle\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u800c\u4e0d\u4f7f\u7528pickle fix_imports \uff1a\u7528\u4e8epython3\u7684\u6570\u7ec4import\u5230python2\u7684\u60c5\u5f62 encoding \uff1a\u53ea\u7528\u4e8epython2\uff0c\u8bfb\u53d6python2\u5b57\u7b26\u4e32\u3002 np . load ( \"array.npy\" , allow_pickle = True ) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])","title":"npy"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html#npz","text":"ny.savez(file, *args, **kwds) \uff1a\u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 file \uff1a\u6587\u4ef6\u540d\u6216\u8005\u6587\u4ef6\u5bf9\u8c61\u3002\u5982\u679c\u662f\u4e2a\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u81ea\u52a8\u6dfb\u52a0\u540e\u7f00 .npz \uff0c\u5982\u679c\u6ca1\u6709\u8be5\u540e\u7f00\u7684\u8bdd args \uff1a\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\u3002\u8fd9\u4e9b\u6570\u7ec4\u7684\u540d\u5b57\u5c06\u88ab\u81ea\u52a8\u547d\u540d\u4e3a arr_0/arr_1/... kwds \uff1a\u5c06\u88ab\u5b58\u50a8\u7684\u6570\u7ec4\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u5c31\u662f\u952e\u7684\u540d\u5b57 np . savez ( save_path , x , x ) \u8bfb\u5165 .npyz \u6587\u4ef6 np . load ( \"array.npz\" , allow_pickle = True ) <numpy.lib.npyio.NpzFile at 0x1d934ea1be0> \u53e6\u5916\uff0c np.savez_compressed \u5c06 \u591a\u4e2anumpy\u6570\u7ec4 \u50a8\u5b58\u4e3a\u4e00\u4e2a .npz \u683c\u5f0f\u7684\u538b\u7f29\u6587\u4ef6\u3002","title":"npz"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.11.%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD.html#_1","text":"np.savetxt() \u5c06\u4e00\u4e2anumpy\u6570\u7ec4\u50a8\u5b58\u4e3a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff1a np . savetxt ( save_path , x ) \u8bfb\u5165\u6587\u672c\u6587\u4ef6 np . loadtxt ( \"array\" ) array([[ 0., 1., 2., 3., 4.], [ 5., 6., 7., 8., 9.], [10., 11., 12., 13., 14.], [15., 16., 17., 18., 19.]]) \u6e05\u9664\u6587\u4ef6 try : os . remove ( \"array\" ) os . remove ( \"array.npy\" ) os . remove ( \"array.npz\" ) except : pass","title":"\u6587\u672c\u6587\u4ef6"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html","text":"import numpy as np import pprint Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.28 numpy version: 1.18.1 \u7ed3\u6784\u5316\u6570\u7ec4\u5e38\u7528\u64cd\u4f5c x = np . array ([( 'Rex' , 9 , 81.0 ), ( 'Fido' , 3 , 27.0 )], dtype = [( 'name' , 'U10' ), ( 'age' , 'i4' ), ( 'weight' , 'f4' )]) pprint . pprint ( x ) array([('Rex', 9, 81.), ('Fido', 3, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) \u901a\u8fc7\u7d22\u5f15\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u7ed3\u6784 pprint . pprint ( x [ 0 ]) # \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \u5b57\u6bb5\u540d\u79f0 \u5efa\u7acb\u7d22\u5f15\u6765\u8bbf\u95ee\u548c\u4fee\u6539\u7ed3\u6784\u5316\u6570\u7ec4\u7684\u5404\u4e2a \u5b57\u6bb5\uff1a pprint . pprint ( x [ \"name\" ]) pprint . pprint ( x [[ \"age\" , \"name\" ]]) # \u6839\u636e \u5b57\u6bb5\u540d\u79f0 \u505a\u8fc7\u6ee4 pprint . pprint ( x [ x [ \"age\" ] > 5 ][ \"name\" ]) # \u4fee\u6539\u5168\u90e8\u6570\u7ec4\u7684age\u5b57\u6bb5 x [ \"age\" ] = 20 pprint . pprint ( x ) ('Rex', 9, 81.) array(['Rex', 'Fido'], dtype='<U10') array([(9, 'Rex'), (3, 'Fido')], dtype={'names':['age','name'], 'formats':['<i4','<U10'], 'offsets':[40,0], 'itemsize':48}) array(['Rex'], dtype='<U10') array([('Rex', 20, 81.), ('Fido', 20, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4 list of tuple \u53ef\u4ee5\u901a\u8fc7 a list of tuple \u7684\u5f62\u5f0f\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002 Tuple\u7684\u5f62\u5f0f\u662f (fieldname, datatype, Shape) \u3002 fieldname \u662f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4f7f\u7528title\uff0c\u5219\u4e3a\u5143\u7ec4\u3002 fieldname \u3001 Shape \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c fieldname \u7701\u7565\uff0c\u5219\u7528 f# \u7684\u9ed8\u8ba4\u540d\u79f0\u4ee3\u66ff\uff0c shape \u5982\u679c\u7701\u7565\uff0c\u5219\u9ed8\u8ba4\u4e3a (1,) \u3002 np . dtype ([( 'x' , 'f4' ), ( 'y' , np . float32 ), ( 'z' , 'f4' , ( 2 , 2 ))]) dtype([('x', '<f4'), ('y', '<f4'), ('z', '<f4', (2, 2))]) \u5982\u679c fieldname \u662f\u7a7a\u5b57\u7b26\u4e32 '' \uff0c\u5219\u5c06\u4e3a\u5b57\u6bb5\u6307\u5b9a\u683c\u5f0f\u4e3a f# \u7684\u9ed8\u8ba4\u540d\u79f0\uff0c\u5176\u4e2d # \u662f\u5b57\u6bb5\u7684\u6574\u6570\u7d22\u5f15\uff0c\u4ece\u5de6\u4fa7\u5f00\u59cb\u4ece0\u5f00\u59cb\u8ba1\u6570\uff1a np . dtype ([( 'x' , 'f4' ), ( '' , 'i4' ), ( 'z' , 'i8' )]) dtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')]) \u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\u4e32 \u53ef\u4ee5\u901a\u8fc7\u201cA string of comma-separated dtype specifications\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u5b57\u7b26\u4e32\u8981\u7b26\u5408\u89c4\u8303\u3002 np . dtype ( 'i8, f4, S3' ) np . dtype ( '3int8, float32, (2, 3)float64' ) dtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))]) dict of field parameter arrays \u901a\u8fc7\u201c\u5173\u952e\u5b57\u53c2\u6570\u7ec4\u6210\u7684\u5b57\u5178\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u8fd9\u662f\u6700\u7075\u6d3b\u7684\u89c4\u8303\u5f62\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u63a7\u5236\u5b57\u6bb5\u7684\u5b57\u8282\u504f\u79fb\u548c\u7ed3\u6784\u7684\u9879\u76ee\u5927\u5c0f\u3002 dict\u6709\u4e24\u4e2a\u5fc5\u9700\u952e names \u548c format \uff0c\u4ee5\u53ca\u56db\u4e2a\u53ef\u9009\u952e offsets \u3001 itemsize \u3001 Aligned \u548c title \uff1a names \u548c format \u7684\u503c\u5e94\u8be5\u5206\u522b\u662f\u76f8\u540c\u957f\u5ea6\u7684\u5b57\u6bb5\u540d\u5217\u8868\u548cdtype\u89c4\u8303\u5217\u8868\u3002 \u53ef\u9009\u7684 offsets \u503c\u5e94\u8be5\u662f\u6574\u6570\u5b57\u8282\u504f\u79fb\u91cf\u7684\u5217\u8868\uff0c\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u5982\u679c\u672a\u7ed9\u51fa offsets \uff0c\u5219\u81ea\u52a8\u786e\u5b9a\u504f\u79fb\u91cf\u3002 \u53ef\u9009\u7684 itemsize \u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u6574\u6570\uff0c \u63cf\u8ff0 dtype \u7684\u603b\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u5b83\u5fc5\u987b\u8db3\u591f\u5927\u4ee5\u5305\u542b\u6240\u6709\u5b57\u6bb5\u3002 \u53ef\u9009\u7684 Aligned \u503c\u53ef\u4ee5\u8bbe\u7f6e\u4e3aTrue\uff0c\u4ee5\u4f7f\u81ea\u52a8\u504f\u79fb\u8ba1\u7b97\u4f7f\u7528\u5bf9\u9f50\u7684\u504f\u79fb\u91cf\uff08 \u8bf7\u53c2\u9605\u81ea\u52a8\u5b57\u8282\u504f\u79fb\u91cf\u548c\u5bf9\u9f50 \uff09\u3002 \u53ef\u9009\u7684 titles \u503c\u5e94\u8be5\u662f\u957f\u5ea6\u4e0e names \u76f8\u540c\u7684\u6807\u9898\u5217\u8868\u3002 np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ]}) np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ], 'offsets' : [ 0 , 4 ], 'itemsize' : 12 }) dtype({'names':['col1','col2'], 'formats':['<i4','<f4'], 'offsets':[0,4], 'itemsize':12}) dict of fieldnam \u901a\u8fc7 dict of fieldname \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u4e0d\u9f13\u52b1\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u56e0\u4e3aPython\u5b57\u5178\u5728Python 3.6\u4e4b\u524d\u7684Python\u7248\u672c\u4e2d\u4e0d\u4fdd\u7559\u987a\u5e8f\uff0c\u4f46\u7ed3\u6784\u5316dtype\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u6709\u610f\u4e49\u3002 \u5b57\u5178\u7684\u5173\u952e\u5b57\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u6307\u5b9a\u7c7b\u578b\u548c\u504f\u79fb\u91cf\u7684\u5143\u7ec4\uff1a np . dtype ({ 'col1' : ( 'i1' , 0 ), 'col2' : ( 'f4' , 1 )}) dtype([('col1', 'i1'), ('col2', '<f4')]) \u64cd\u4f5c\u548c\u663e\u793a\u7ed3\u6784\u5316\u6570\u636e\u7c7b\u578b d = np . dtype ([( 'x' , 'i8' ), ( 'y' , 'f4' )]) print ( d . names ) print ( d . fields ) ('x', 'y') {'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)} \u4e3a\u4ec0\u4e48\u9700\u8981\u7ed3\u6784\u5316\u6570\u7ec4 numpy\u7ed3\u6784\u5316\u6570\u7ec4\u4e2d\u7684\u7528\u6cd5\u597d\u50cf\u7c7b\u4f3c\u4e8ePython\u7684dict of list\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528numpy\u7ed3\u6784\u5316\u6570\u7ec4\u5462\uff1f \u56e0\u4e3anumpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u5e95\u5c42\u662f\u7c7b\u4f3cC\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5360\u7528\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\uff0c\u5e76\u4e14numpy\u5e95\u5c42\u662fC\u5b9e\u73b0\uff0cnumpy\u6570\u7ec4\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u6027\u80fd\u597d\u4e8ePython\u7684\u7684\u5b57\u5178\u5217\u8868\u3002 \u53ef\u4ee5\u6765\u505a\u4e00\u4e0b\u6027\u80fd\u6bd4\u8f83\u3002 import time ### \u5b9a\u4e49\u8ba1\u65f6\u5668 def timer ( func ): def wrapper ( self , * args , ** kwargs ): start = time . process_time () something = func ( self , * args , ** kwargs ) end = time . process_time () type_str = func . __repr__ () print ( \"\u5f53\u524d\u51fd\u6570\uff1a\" , type_str , \" \\n \" , \"\u7528\u65f6\uff1a\" , end - start , \"\u79d2\" , sep = \"\" ) return something return wrapper # numpy\u7248\u672c\u957f\u4e00\u5c81 @timer def addage_numpy ( data , loop ): for i in range ( loop ): data [ 'age' ] += 1 # python\u5faa\u73af\u957f\u4e00\u5c81 @timer def addage_python ( data , loop ): for j in range ( loop ): for i in range ( 4 ): data [ i ][ \"age\" ] += 1 # \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4 names = [ 'Lin' , 'Pan' , 'Shen' , 'Zhou' ] ages = [ 28 , 33 , 34 , 29 ] grades = [ 25 , 26 , 27 , 24 ] data_np = np . zeros ( 4 , dtype = { 'names' :( 'name' , 'age' , 'grade' ), 'formats' :( 'U10' , 'i4' , 'i4' ) }) data_np [ 'name' ] = names data_np [ 'age' ] = ages data_np [ 'grade' ] = grades data_py = [] for i in range ( 4 ): person = { \"name\" : names [ i ], \"age\" : ages [ i ], \"grade\" : grades [ i ]} data_py . append ( person ) addage_numpy ( data_np , loop = 1000000 ) addage_python ( data_py , loop = 1000000 ) \u5f53\u524d\u51fd\u6570\uff1a<function addage_numpy at 0x0000021944ECBA60> \u7528\u65f6\uff1a4.453125\u79d2 \u5f53\u524d\u51fd\u6570\uff1a<function addage_python at 0x0000021944ECB9D8> \u7528\u65f6\uff1a1.421875\u79d2 \u8bb0\u5f55\u6570\u7ec4 \u8bb0\u5f55\u6570\u7ec4\u548c\u7ed3\u6784\u6570\u7ec4\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u573a\u666f\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bb0\u5f55\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u6570\u636e\u3002 \u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f numpy.rec.array \u3002 recordarr = np . rec . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ),( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) print ( type ( recordarr )) # \u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u6570\u636e recordarr . foo <class 'numpy.recarray'> array([1, 2]) numpy.rec.array \u53ef\u4ee5\u5c06\u5404\u79cd\u53c2\u6570\u8f6c\u6362\u4e3a\u8bb0\u5f55\u6570\u7ec4\uff0c\u5305\u62ec\u7ed3\u6784\u5316\u6570\u7ec4\uff1a arr = np . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ), ( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) recordarr = np . rec . array ( arr ) pprint . pprint ( recordarr ) rec.array([(1, 2., b'Hello'), (2, 3., b'World')], dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]) numpy.rec \u6a21\u5757\u63d0\u4f9b\u4e86\u591a\u4e2a\u4fbf\u5229\u7684\u51fd\u6570\u6765\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\uff0c\u8bf7\u53c2\u9605 \u8bb0\u5f55\u6570\u7ec4\u521b\u5efa\u65b9\u6cd5\u5217\u8868 \u3002 \u6ce8\u610f\uff1a numpy.rec \u662f numpy.core.records \u7684\u9996\u9009\u522b\u540d\u3002 core.records.array(obj[, dtype, shape, \u2026]) \uff1a\u4ece\u5404\u79cd\u5404\u6837\u7684\u5bf9\u8c61\u6784\u9020\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromarrays(arrayList[, dtype, \u2026]) \uff1a\u4ece\u4e00\u7ef4\u7684list\u6216array\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromrecords(recList[, dtype, \u2026]) \uff1a\u4ece\u6587\u672c\u683c\u5f0f\u7684list\u521b\u5efa\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromstring(datastring[, dtype, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u6570\u636e\u521b\u5efa\uff08\u53ea\u8bfb\uff09\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromfile(fd[, dtype, shape, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6570\u636e\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002 \u53c2\u8003 \u4e00\u6587\u5f7b\u5e95\u641e\u61c2numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u2014\u2014structured array Numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4","title":"6.12.\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_1","text":"x = np . array ([( 'Rex' , 9 , 81.0 ), ( 'Fido' , 3 , 27.0 )], dtype = [( 'name' , 'U10' ), ( 'age' , 'i4' ), ( 'weight' , 'f4' )]) pprint . pprint ( x ) array([('Rex', 9, 81.), ('Fido', 3, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')]) \u901a\u8fc7\u7d22\u5f15\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u7ed3\u6784 pprint . pprint ( x [ 0 ]) # \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \u5b57\u6bb5\u540d\u79f0 \u5efa\u7acb\u7d22\u5f15\u6765\u8bbf\u95ee\u548c\u4fee\u6539\u7ed3\u6784\u5316\u6570\u7ec4\u7684\u5404\u4e2a \u5b57\u6bb5\uff1a pprint . pprint ( x [ \"name\" ]) pprint . pprint ( x [[ \"age\" , \"name\" ]]) # \u6839\u636e \u5b57\u6bb5\u540d\u79f0 \u505a\u8fc7\u6ee4 pprint . pprint ( x [ x [ \"age\" ] > 5 ][ \"name\" ]) # \u4fee\u6539\u5168\u90e8\u6570\u7ec4\u7684age\u5b57\u6bb5 x [ \"age\" ] = 20 pprint . pprint ( x ) ('Rex', 9, 81.) array(['Rex', 'Fido'], dtype='<U10') array([(9, 'Rex'), (3, 'Fido')], dtype={'names':['age','name'], 'formats':['<i4','<U10'], 'offsets':[40,0], 'itemsize':48}) array(['Rex'], dtype='<U10') array([('Rex', 20, 81.), ('Fido', 20, 27.)], dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f4')])","title":"\u7ed3\u6784\u5316\u6570\u7ec4\u5e38\u7528\u64cd\u4f5c"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_2","text":"","title":"\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#list-of-tuple","text":"\u53ef\u4ee5\u901a\u8fc7 a list of tuple \u7684\u5f62\u5f0f\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002 Tuple\u7684\u5f62\u5f0f\u662f (fieldname, datatype, Shape) \u3002 fieldname \u662f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4f7f\u7528title\uff0c\u5219\u4e3a\u5143\u7ec4\u3002 fieldname \u3001 Shape \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c fieldname \u7701\u7565\uff0c\u5219\u7528 f# \u7684\u9ed8\u8ba4\u540d\u79f0\u4ee3\u66ff\uff0c shape \u5982\u679c\u7701\u7565\uff0c\u5219\u9ed8\u8ba4\u4e3a (1,) \u3002 np . dtype ([( 'x' , 'f4' ), ( 'y' , np . float32 ), ( 'z' , 'f4' , ( 2 , 2 ))]) dtype([('x', '<f4'), ('y', '<f4'), ('z', '<f4', (2, 2))]) \u5982\u679c fieldname \u662f\u7a7a\u5b57\u7b26\u4e32 '' \uff0c\u5219\u5c06\u4e3a\u5b57\u6bb5\u6307\u5b9a\u683c\u5f0f\u4e3a f# \u7684\u9ed8\u8ba4\u540d\u79f0\uff0c\u5176\u4e2d # \u662f\u5b57\u6bb5\u7684\u6574\u6570\u7d22\u5f15\uff0c\u4ece\u5de6\u4fa7\u5f00\u59cb\u4ece0\u5f00\u59cb\u8ba1\u6570\uff1a np . dtype ([( 'x' , 'f4' ), ( '' , 'i4' ), ( 'z' , 'i8' )]) dtype([('x', '<f4'), ('f1', '<i4'), ('z', '<i8')])","title":"list of tuple"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_3","text":"\u53ef\u4ee5\u901a\u8fc7\u201cA string of comma-separated dtype specifications\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u5b57\u7b26\u4e32\u8981\u7b26\u5408\u89c4\u8303\u3002 np . dtype ( 'i8, f4, S3' ) np . dtype ( '3int8, float32, (2, 3)float64' ) dtype([('f0', 'i1', (3,)), ('f1', '<f4'), ('f2', '<f8', (2, 3))])","title":"\u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\u4e32"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#dict-of-field-parameter-arrays","text":"\u901a\u8fc7\u201c\u5173\u952e\u5b57\u53c2\u6570\u7ec4\u6210\u7684\u5b57\u5178\u201d\u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u8fd9\u662f\u6700\u7075\u6d3b\u7684\u89c4\u8303\u5f62\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u63a7\u5236\u5b57\u6bb5\u7684\u5b57\u8282\u504f\u79fb\u548c\u7ed3\u6784\u7684\u9879\u76ee\u5927\u5c0f\u3002 dict\u6709\u4e24\u4e2a\u5fc5\u9700\u952e names \u548c format \uff0c\u4ee5\u53ca\u56db\u4e2a\u53ef\u9009\u952e offsets \u3001 itemsize \u3001 Aligned \u548c title \uff1a names \u548c format \u7684\u503c\u5e94\u8be5\u5206\u522b\u662f\u76f8\u540c\u957f\u5ea6\u7684\u5b57\u6bb5\u540d\u5217\u8868\u548cdtype\u89c4\u8303\u5217\u8868\u3002 \u53ef\u9009\u7684 offsets \u503c\u5e94\u8be5\u662f\u6574\u6570\u5b57\u8282\u504f\u79fb\u91cf\u7684\u5217\u8868\uff0c\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u5982\u679c\u672a\u7ed9\u51fa offsets \uff0c\u5219\u81ea\u52a8\u786e\u5b9a\u504f\u79fb\u91cf\u3002 \u53ef\u9009\u7684 itemsize \u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u6574\u6570\uff0c \u63cf\u8ff0 dtype \u7684\u603b\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u5b83\u5fc5\u987b\u8db3\u591f\u5927\u4ee5\u5305\u542b\u6240\u6709\u5b57\u6bb5\u3002 \u53ef\u9009\u7684 Aligned \u503c\u53ef\u4ee5\u8bbe\u7f6e\u4e3aTrue\uff0c\u4ee5\u4f7f\u81ea\u52a8\u504f\u79fb\u8ba1\u7b97\u4f7f\u7528\u5bf9\u9f50\u7684\u504f\u79fb\u91cf\uff08 \u8bf7\u53c2\u9605\u81ea\u52a8\u5b57\u8282\u504f\u79fb\u91cf\u548c\u5bf9\u9f50 \uff09\u3002 \u53ef\u9009\u7684 titles \u503c\u5e94\u8be5\u662f\u957f\u5ea6\u4e0e names \u76f8\u540c\u7684\u6807\u9898\u5217\u8868\u3002 np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ]}) np . dtype ({ 'names' : [ 'col1' , 'col2' ], 'formats' : [ 'i4' , 'f4' ], 'offsets' : [ 0 , 4 ], 'itemsize' : 12 }) dtype({'names':['col1','col2'], 'formats':['<i4','<f4'], 'offsets':[0,4], 'itemsize':12})","title":"dict of field parameter arrays"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#dict-of-fieldnam","text":"\u901a\u8fc7 dict of fieldname \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4\u3002\u4e0d\u9f13\u52b1\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u56e0\u4e3aPython\u5b57\u5178\u5728Python 3.6\u4e4b\u524d\u7684Python\u7248\u672c\u4e2d\u4e0d\u4fdd\u7559\u987a\u5e8f\uff0c\u4f46\u7ed3\u6784\u5316dtype\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u6709\u610f\u4e49\u3002 \u5b57\u5178\u7684\u5173\u952e\u5b57\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u6307\u5b9a\u7c7b\u578b\u548c\u504f\u79fb\u91cf\u7684\u5143\u7ec4\uff1a np . dtype ({ 'col1' : ( 'i1' , 0 ), 'col2' : ( 'f4' , 1 )}) dtype([('col1', 'i1'), ('col2', '<f4')])","title":"dict of fieldnam"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_4","text":"d = np . dtype ([( 'x' , 'i8' ), ( 'y' , 'f4' )]) print ( d . names ) print ( d . fields ) ('x', 'y') {'x': (dtype('int64'), 0), 'y': (dtype('float32'), 8)}","title":"\u64cd\u4f5c\u548c\u663e\u793a\u7ed3\u6784\u5316\u6570\u636e\u7c7b\u578b"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_5","text":"numpy\u7ed3\u6784\u5316\u6570\u7ec4\u4e2d\u7684\u7528\u6cd5\u597d\u50cf\u7c7b\u4f3c\u4e8ePython\u7684dict of list\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528numpy\u7ed3\u6784\u5316\u6570\u7ec4\u5462\uff1f \u56e0\u4e3anumpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u5e95\u5c42\u662f\u7c7b\u4f3cC\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5360\u7528\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\uff0c\u5e76\u4e14numpy\u5e95\u5c42\u662fC\u5b9e\u73b0\uff0cnumpy\u6570\u7ec4\u4e2d\u7684\u7c7b\u578b\u90fd\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u6027\u80fd\u597d\u4e8ePython\u7684\u7684\u5b57\u5178\u5217\u8868\u3002 \u53ef\u4ee5\u6765\u505a\u4e00\u4e0b\u6027\u80fd\u6bd4\u8f83\u3002 import time ### \u5b9a\u4e49\u8ba1\u65f6\u5668 def timer ( func ): def wrapper ( self , * args , ** kwargs ): start = time . process_time () something = func ( self , * args , ** kwargs ) end = time . process_time () type_str = func . __repr__ () print ( \"\u5f53\u524d\u51fd\u6570\uff1a\" , type_str , \" \\n \" , \"\u7528\u65f6\uff1a\" , end - start , \"\u79d2\" , sep = \"\" ) return something return wrapper # numpy\u7248\u672c\u957f\u4e00\u5c81 @timer def addage_numpy ( data , loop ): for i in range ( loop ): data [ 'age' ] += 1 # python\u5faa\u73af\u957f\u4e00\u5c81 @timer def addage_python ( data , loop ): for j in range ( loop ): for i in range ( 4 ): data [ i ][ \"age\" ] += 1 # \u521b\u5efa\u7ed3\u6784\u5316\u6570\u7ec4 names = [ 'Lin' , 'Pan' , 'Shen' , 'Zhou' ] ages = [ 28 , 33 , 34 , 29 ] grades = [ 25 , 26 , 27 , 24 ] data_np = np . zeros ( 4 , dtype = { 'names' :( 'name' , 'age' , 'grade' ), 'formats' :( 'U10' , 'i4' , 'i4' ) }) data_np [ 'name' ] = names data_np [ 'age' ] = ages data_np [ 'grade' ] = grades data_py = [] for i in range ( 4 ): person = { \"name\" : names [ i ], \"age\" : ages [ i ], \"grade\" : grades [ i ]} data_py . append ( person ) addage_numpy ( data_np , loop = 1000000 ) addage_python ( data_py , loop = 1000000 ) \u5f53\u524d\u51fd\u6570\uff1a<function addage_numpy at 0x0000021944ECBA60> \u7528\u65f6\uff1a4.453125\u79d2 \u5f53\u524d\u51fd\u6570\uff1a<function addage_python at 0x0000021944ECB9D8> \u7528\u65f6\uff1a1.421875\u79d2","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u7ed3\u6784\u5316\u6570\u7ec4"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_6","text":"\u8bb0\u5f55\u6570\u7ec4\u548c\u7ed3\u6784\u6570\u7ec4\u6ca1\u6709\u592a\u5927\u533a\u522b\uff0c\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u573a\u666f\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bb0\u5f55\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u6570\u636e\u3002 \u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f numpy.rec.array \u3002 recordarr = np . rec . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ),( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) print ( type ( recordarr )) # \u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u6570\u636e recordarr . foo <class 'numpy.recarray'> array([1, 2]) numpy.rec.array \u53ef\u4ee5\u5c06\u5404\u79cd\u53c2\u6570\u8f6c\u6362\u4e3a\u8bb0\u5f55\u6570\u7ec4\uff0c\u5305\u62ec\u7ed3\u6784\u5316\u6570\u7ec4\uff1a arr = np . array ([( 1 , 2. , 'Hello' ), ( 2 , 3. , \"World\" )], dtype = [( 'foo' , 'i4' ), ( 'bar' , 'f4' ), ( 'baz' , 'S10' )]) recordarr = np . rec . array ( arr ) pprint . pprint ( recordarr ) rec.array([(1, 2., b'Hello'), (2, 3., b'World')], dtype=[('foo', '<i4'), ('bar', '<f4'), ('baz', 'S10')]) numpy.rec \u6a21\u5757\u63d0\u4f9b\u4e86\u591a\u4e2a\u4fbf\u5229\u7684\u51fd\u6570\u6765\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\uff0c\u8bf7\u53c2\u9605 \u8bb0\u5f55\u6570\u7ec4\u521b\u5efa\u65b9\u6cd5\u5217\u8868 \u3002 \u6ce8\u610f\uff1a numpy.rec \u662f numpy.core.records \u7684\u9996\u9009\u522b\u540d\u3002 core.records.array(obj[, dtype, shape, \u2026]) \uff1a\u4ece\u5404\u79cd\u5404\u6837\u7684\u5bf9\u8c61\u6784\u9020\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromarrays(arrayList[, dtype, \u2026]) \uff1a\u4ece\u4e00\u7ef4\u7684list\u6216array\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromrecords(recList[, dtype, \u2026]) \uff1a\u4ece\u6587\u672c\u683c\u5f0f\u7684list\u521b\u5efa\u4e00\u4e2a\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromstring(datastring[, dtype, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u6570\u636e\u521b\u5efa\uff08\u53ea\u8bfb\uff09\u8bb0\u5f55\u6570\u7ec4\u3002 core.records.fromfile(fd[, dtype, shape, \u2026]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6570\u636e\u521b\u5efa\u8bb0\u5f55\u6570\u7ec4\u3002","title":"\u8bb0\u5f55\u6570\u7ec4"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.12.%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E7%BB%84.html#_7","text":"\u4e00\u6587\u5f7b\u5e95\u641e\u61c2numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4\u2014\u2014structured array Numpy\u7684\u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4 \u7ed3\u6784\u5316\u6570\u7ec4","title":"\u53c2\u8003"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.12 numpy version: 1.18.1 ary = copy . deepcopy ( np . arange ( 16 ) . reshape ( 4 , 4 )) ary array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15]]) \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u7684\u7d22\u5f15 \u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15 print ( np . argmax ( ary )) print ( np . argmax ( ary , axis = 1 )) print ( ary . argmax ( axis = 1 )) 15 [3 3 3 3] [3 3 3 3] \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5927\u503c\uff1a print ( np . amax ( ary )) # np.max\u662fnp.amax\u7684\u522b\u540d print ( np . max ( ary , axis = 0 )) print ( ary . max ()) print ( ary . max ( axis = 0 )) 15 [12 13 14 15] 15 [12 13 14 15] \u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15 np . argmin ( ary ) 0 \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5c0f\u503c\uff1a np . amin ( ary ) 0 \u6309\u5927\u5c0f\u6392\u5e8f\u7684\u7d22\u5f15 np . argsort ( a , axis =- 1 , kind = None , order = None ) kind \uff1a 'quicksort', 'mergesort', 'heapsort', 'stable' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'quicksort' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # \u7531\u5c0f\u5230\u5927\u6392\u5e8f ary2 . argsort () ary2 [ ary2 . argsort ()] array([0, 1, 2, ..., 7, 8, 9]) np . argpartition ( a , kth , axis =- 1 , kind = 'introselect' , order = None ) kth \uff1a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u524d kth \u4e2a\u5143\u7d20\u3002\u56e0\u4e3a\u662f\u4e0d\u5b8c\u5168\u6392\u5e8f\uff0c\u56e0\u6b64\u6bd4 argsort \u7684\u6548\u679c\u66f4\u9ad8\u3002 kind \uff1a 'introselect' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'introselect' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # kth \u4e3a\u975e\u8d1f\u6570: \u4ece\u5c0f\u5230\u5927\u6392\u5e8f print ( ary2 . argpartition ( 2 )) print ( ary2 [ ary2 . argpartition ( 2 )]) # kth \u4e3a\u8d1f\u6570: \u4ece\u5927\u5230\u5c0f\u6392\u5e8f print ( ary2 [ ary2 . argpartition ( - 2 )]) [4 0 3 ... 6 7 8] [0 1 2 ... 8 5 7] [0 1 5 ... 7 8 9] \u975e\u96f6\u6570\u7684\u7d22\u5f15 np.nonzero \u4f1a\u8fd4\u56de\u975e\u96f6\u5143\u7d20\u7684\u7d22\u5f15\uff08\u8fd9\u610f\u5473\u7740 nan \u7684\u7d22\u5f15\u4e5f\u4f1a\u88ab\u8fd4\u56de\uff09\u3002 print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . nonzero ( ary )) # ary.nonzero() ary [ np . nonzero ( ary )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([0, 0, 0, ..., 3, 3, 3], dtype=int64), array([1, 2, 3, ..., 1, 2, 3], dtype=int64)) array([ 1, 2, 3, ..., 13, 14, 15]) \u6307\u5b9a\u6761\u4ef6 np.where(condition) \uff0c\u5f53condition\u4e3a\u771f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u7684\u7d22\u5f15\uff1a print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . where ( ary > 5 )) ary [ np . where ( ary > 5 )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([1, 1, 2, ..., 3, 3, 3], dtype=int64), array([2, 3, 0, ..., 1, 2, 3], dtype=int64)) array([ 6, 7, 8, ..., 13, 14, 15]) np.where(condition) \u5b9e\u9645\u4e0a\u662f np.asarray(condition).nonzero() \u7684\u5feb\u6377\u65b9\u5f0f\u3002 ary [ np . asarray ( ary > 5 ) . nonzero ()] array([ 6, 7, 8, ..., 13, 14, 15]) \u5982\u679c\u53ea\u662f\u60f3\u5f97\u5230\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u4e0d\u9700\u8981\u7d22\u5f15\uff0c\u4f7f\u7528mask\u6570\u7ec4\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1a pprint . pprint ( ary > 5 ) ary [ ary > 5 ] # np.nanargmax(ary) array([[False, False, False, False], [False, False, True, True], [ True, True, True, True], [ True, True, True, True]]) array([ 6, 7, 8, ..., 13, 14, 15]) \u7f3a\u5931\u503c\u5904\u7406 nan_ary = np . arange ( 16 , dtype = np . float32 ) . reshape ( 4 , 4 ) nan_ary [ 3 , 2 ] = np . NAN nan_ary [ 1 , 1 ] = np . nan nan_ary array([[ 0., 1., 2., 3.], [ 4., nan, 6., 7.], [ 8., 9., 10., 11.], [12., 13., nan, 15.]], dtype=float32) \u4f7f\u7528 np.isnan ufunc \u51fd\u6570\u5f97\u5230mask\u6570\u7ec4\uff1a np . isnan ( nan_ary ) array([[False, False, False, False], [False, True, False, False], [False, False, False, False], [False, False, True, False]]) \u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 nan \u586b\u5145\u4e3a\u5e38\u91cf\uff1a nan_ary [ np . isnan ( nan_ary )] # nan_ary[np.isnan(nan_ary)] = 2 array([nan, nan], dtype=float32) \u5982\u679c\u60f3\u5f97\u5230 nan \u503c\u7684\u7d22\u5f15\uff1a np . where ( np . isnan ( nan_ary )) (array([1, 3], dtype=int64), array([1, 2], dtype=int64)) \u5982\u679c\u60f3\u4e22\u5f03\u5b58\u5728 nan \u503c\u7684\u884c\uff1a np . delete ( nan_ary , np . where ( np . isnan ( nan_ary ))[ 0 ], axis = 0 ) array([[ 0., 1., 2., 3.], [ 8., 9., 10., 11.]], dtype=float32) \u7edf\u8ba1\u5b58\u5728 nan \u503c\u7684\u884c\uff08\u6837\u672c\uff09\u6240\u5360\u7684\u6bd4\u5217\u4e5f\u5f88\u7b80\u5355\uff1a len ( np . where ( np . isnan ( nan_ary ))[ 0 ]) / nan_ary . shape [ 0 ] 0.5 \u5982\u679c\u60f3\u5c06 nan \u503c\u586b\u5145\u4e3a\u975e\u5e38\u91cf\uff08\u6bd4\u5982\u5e73\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u7b49\uff09\uff0c\u8fd9\u5c31\u8981\u5148\u8ba1\u7b97\u51fa\u5e73\u5747\u503c,\u518d\u5bf9 nan \u6570\u636e\u9010\u4e2a\u8fdb\u884c\u586b\u5145\u3002 \u586b\u5145\u8fb9\u7f18 np . pad ( nan_ary , pad_width = 1 , mode = \"mean\" ) array([[ nan, 6. , nan, nan, 9. , nan], [ 1.5, 0. , 1. , 2. , 3. , 1.5], [ nan, 4. , nan, 6. , 7. , nan], [ 9.5, 8. , 9. , 10. , 11. , 9.5], [ nan, 12. , 13. , nan, 15. , nan], [ nan, 6. , nan, nan, 9. , nan]], dtype=float32)","title":"6.13.\u6570\u636e\u5904\u7406"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_1","text":"","title":"\u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_2","text":"print ( np . argmax ( ary )) print ( np . argmax ( ary , axis = 1 )) print ( ary . argmax ( axis = 1 )) 15 [3 3 3 3] [3 3 3 3] \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5927\u503c\uff1a print ( np . amax ( ary )) # np.max\u662fnp.amax\u7684\u522b\u540d print ( np . max ( ary , axis = 0 )) print ( ary . max ()) print ( ary . max ( axis = 0 )) 15 [12 13 14 15] 15 [12 13 14 15]","title":"\u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_3","text":"np . argmin ( ary ) 0 \u5982\u679c\u53ea\u662f\u60f3\u627e\u51fa\u6700\u5c0f\u503c\uff1a np . amin ( ary ) 0","title":"\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_4","text":"np . argsort ( a , axis =- 1 , kind = None , order = None ) kind \uff1a 'quicksort', 'mergesort', 'heapsort', 'stable' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'quicksort' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # \u7531\u5c0f\u5230\u5927\u6392\u5e8f ary2 . argsort () ary2 [ ary2 . argsort ()] array([0, 1, 2, ..., 7, 8, 9]) np . argpartition ( a , kth , axis =- 1 , kind = 'introselect' , order = None ) kth \uff1a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u524d kth \u4e2a\u5143\u7d20\u3002\u56e0\u4e3a\u662f\u4e0d\u5b8c\u5168\u6392\u5e8f\uff0c\u56e0\u6b64\u6bd4 argsort \u7684\u6548\u679c\u66f4\u9ad8\u3002 kind \uff1a 'introselect' \u3002\u6307\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\u9ed8\u8ba4\u4e3a 'introselect' \u3002 order \uff1a\u5982\u679c\u662f\u7ed3\u6784\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528 order \u53c2\u6570\u6307\u5b9a\u6309\u7167\u6570\u7ec4\u7684\u5b57\u6bb5\u987a\u5e8f\u6392\u5e8f\u3002 ary2 = np . array ([ 1 , 4 , 3 , 2 , 0 , 9 , 8 , 5 , 7 ]) # kth \u4e3a\u975e\u8d1f\u6570: \u4ece\u5c0f\u5230\u5927\u6392\u5e8f print ( ary2 . argpartition ( 2 )) print ( ary2 [ ary2 . argpartition ( 2 )]) # kth \u4e3a\u8d1f\u6570: \u4ece\u5927\u5230\u5c0f\u6392\u5e8f print ( ary2 [ ary2 . argpartition ( - 2 )]) [4 0 3 ... 6 7 8] [0 1 2 ... 8 5 7] [0 1 5 ... 7 8 9]","title":"\u6309\u5927\u5c0f\u6392\u5e8f\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_5","text":"np.nonzero \u4f1a\u8fd4\u56de\u975e\u96f6\u5143\u7d20\u7684\u7d22\u5f15\uff08\u8fd9\u610f\u5473\u7740 nan \u7684\u7d22\u5f15\u4e5f\u4f1a\u88ab\u8fd4\u56de\uff09\u3002 print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . nonzero ( ary )) # ary.nonzero() ary [ np . nonzero ( ary )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([0, 0, 0, ..., 3, 3, 3], dtype=int64), array([1, 2, 3, ..., 1, 2, 3], dtype=int64)) array([ 1, 2, 3, ..., 13, 14, 15])","title":"\u975e\u96f6\u6570\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_6","text":"np.where(condition) \uff0c\u5f53condition\u4e3a\u771f\uff0c\u5219\u8fd4\u56de\u5143\u7d20\u7684\u7d22\u5f15\uff1a print ( \"\u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a\" ) pprint . pprint ( np . where ( ary > 5 )) ary [ np . where ( ary > 5 )] \u7b26\u5408\u6761\u4ef6\u7684\u7d22\u5f15\uff1a (array([1, 1, 2, ..., 3, 3, 3], dtype=int64), array([2, 3, 0, ..., 1, 2, 3], dtype=int64)) array([ 6, 7, 8, ..., 13, 14, 15]) np.where(condition) \u5b9e\u9645\u4e0a\u662f np.asarray(condition).nonzero() \u7684\u5feb\u6377\u65b9\u5f0f\u3002 ary [ np . asarray ( ary > 5 ) . nonzero ()] array([ 6, 7, 8, ..., 13, 14, 15]) \u5982\u679c\u53ea\u662f\u60f3\u5f97\u5230\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u4e0d\u9700\u8981\u7d22\u5f15\uff0c\u4f7f\u7528mask\u6570\u7ec4\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1a pprint . pprint ( ary > 5 ) ary [ ary > 5 ] # np.nanargmax(ary) array([[False, False, False, False], [False, False, True, True], [ True, True, True, True], [ True, True, True, True]]) array([ 6, 7, 8, ..., 13, 14, 15])","title":"\u6307\u5b9a\u6761\u4ef6"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_7","text":"nan_ary = np . arange ( 16 , dtype = np . float32 ) . reshape ( 4 , 4 ) nan_ary [ 3 , 2 ] = np . NAN nan_ary [ 1 , 1 ] = np . nan nan_ary array([[ 0., 1., 2., 3.], [ 4., nan, 6., 7.], [ 8., 9., 10., 11.], [12., 13., nan, 15.]], dtype=float32) \u4f7f\u7528 np.isnan ufunc \u51fd\u6570\u5f97\u5230mask\u6570\u7ec4\uff1a np . isnan ( nan_ary ) array([[False, False, False, False], [False, True, False, False], [False, False, False, False], [False, False, True, False]]) \u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 nan \u586b\u5145\u4e3a\u5e38\u91cf\uff1a nan_ary [ np . isnan ( nan_ary )] # nan_ary[np.isnan(nan_ary)] = 2 array([nan, nan], dtype=float32) \u5982\u679c\u60f3\u5f97\u5230 nan \u503c\u7684\u7d22\u5f15\uff1a np . where ( np . isnan ( nan_ary )) (array([1, 3], dtype=int64), array([1, 2], dtype=int64)) \u5982\u679c\u60f3\u4e22\u5f03\u5b58\u5728 nan \u503c\u7684\u884c\uff1a np . delete ( nan_ary , np . where ( np . isnan ( nan_ary ))[ 0 ], axis = 0 ) array([[ 0., 1., 2., 3.], [ 8., 9., 10., 11.]], dtype=float32) \u7edf\u8ba1\u5b58\u5728 nan \u503c\u7684\u884c\uff08\u6837\u672c\uff09\u6240\u5360\u7684\u6bd4\u5217\u4e5f\u5f88\u7b80\u5355\uff1a len ( np . where ( np . isnan ( nan_ary ))[ 0 ]) / nan_ary . shape [ 0 ] 0.5 \u5982\u679c\u60f3\u5c06 nan \u503c\u586b\u5145\u4e3a\u975e\u5e38\u91cf\uff08\u6bd4\u5982\u5e73\u5747\u503c\u3001\u4e2d\u4f4d\u6570\u7b49\uff09\uff0c\u8fd9\u5c31\u8981\u5148\u8ba1\u7b97\u51fa\u5e73\u5747\u503c,\u518d\u5bf9 nan \u6570\u636e\u9010\u4e2a\u8fdb\u884c\u586b\u5145\u3002","title":"\u7f3a\u5931\u503c\u5904\u7406"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.13.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_8","text":"np . pad ( nan_ary , pad_width = 1 , mode = \"mean\" ) array([[ nan, 6. , nan, nan, 9. , nan], [ 1.5, 0. , 1. , 2. , 3. , 1.5], [ nan, 4. , nan, 6. , 7. , nan], [ 9.5, 8. , 9. , 10. , 11. , 9.5], [ nan, 12. , 13. , nan, 15. , nan], [ nan, 6. , nan, nan, 9. , nan]], dtype=float32)","title":"\u586b\u5145\u8fb9\u7f18"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.2.%E7%B4%A2%E5%BC%95.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.28 numpy version: 1.18.1 ndarrays \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6 Python x[obj] \u8bed\u6cd5\u5bf9\u5176\u8fdb\u884c\u7d22\u5f15 \uff0c\u5176\u4e2d x \u662f\u6570\u7ec4\uff0c obj \u662f\u7d22\u5f15\u3002\u6709\u4e09\u79cd\u53ef\u7528\u7684\u7d22\u5f15\uff0c\u54ea\u4e00\u4e2a\u53d1\u751f\u53d6\u51b3\u4e8e obj \uff1a \u5b57\u6bb5\u8bbf\u95ee\uff08\u7ed3\u6784\u6570\u7ec4\uff09 \u57fa\u672c\u5207\u7247 \u9ad8\u7ea7\u7d22\u5f15\uff08\u6574\u6570\u7d22\u5f15\u3001\u5e03\u5c14\u7d22\u5f15\uff09 \u5728 Python \u4e2d\uff0c x[(exp1\uff0cexp2\uff0c.\uff0cEXPN)] \u7b49\u540c\u4e8e x[exp1\uff0cexp2\uff0c.\uff0cEXPN] \u3002\u540e\u8005\u53ea\u662f\u524d\u8005\u7684\u8bed\u6cd5\u7cd6\u3002 # \u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 a = np . arange ( 100 ) # \u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 b = copy . deepcopy ( np . reshape ( a , ( 20 , 5 ))) # \u521b\u5efa\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4 c = copy . deepcopy ( np . arange ( 90 ) . reshape (( 10 , 3 , 3 ))) # x = np.array([[1,2,3],[4,5,6]], dtype=[('a', np.int32), ('b', np.float64)]) # x = np.zeros((2,2), dtype=[('a', np.int32), ('b', np.float64, (3,3))]) \u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15 \u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5217\u8868\u76f8\u540c\u3002\u5047\u8bbe A \u662f\u4e00\u7ef4\u6570\u7ec4\uff0c\u90a3\u4e48\u6709\u4ee5\u4e0b5\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570 i \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 A[i] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5207\u7247 \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 A[i:j] \uff0c\u7b49\u4ef7\u4e8e A[slice(i,j)] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570list \u5bf9\u6570\u7ec4\u8fdb\u884c\u5b58\u53d6\uff0c\u5982 A[[i,j,z]] \u3002\u6b64\u65f6\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u4f5c\u4e3a\u4e0b\u6807 (i/j/z) \uff0c\u4f7f\u7528\u5217\u8868\u4f5c\u4e3a\u4e0b\u6807\u5f97\u5230\u7684\u6570\u7ec4\u4e3a np.array([A[i],A[j],A[z]]) \uff0c\u5b83\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u5185\u5b58\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982 A[B] \u6b64\u65f6\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f62\u72b6\u548c\u4e0b\u6807\u6570\u7ec4 B \u76f8\u540c\u7684\u65b0\u6570\u7ec4\u3002\u65b0\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e0b\u6807\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u4f5c\u4e3a\u4e0b\u6807\u4ece\u539f\u59cb\u6570\u7ec4\u4e2d\u83b7\u5f97\u7684\u503c\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5e03\u5c14\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982 A[B] \u3002\u6b64\u65f6\u5c06\u83b7\u5f97\u6570\u7ec4 A \u4e2d\u4e0e\u6570\u7ec4 B \u4e2d\u7684 True \u5bf9\u5e94\u7684\u5143\u7d20\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570 a [ 1 ] # OWNDATA : True ## \u7b49\u4ef7\u4e8e a [( 1 )] # OWNDATA : True # \u6307\u5b9a\u5207\u7247 a [ 0 : 20 : 2 ] # \u8fd4\u56de\u89c6\u56fe a [ slice ( 0 , 20 , 2 )] # \u8fd4\u56de\u89c6\u56fe # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5217\u8868 a [[ 1 , 2 , 3 , 4 ]] # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ## index\u662f\u4e00\u7ef4\u6570\u7ec4 index = np . array ([ 0 , 1 , 2 , 3 , 4 ]) a [ index ] # OWNDATA : True ## index\u662f\u4e8c\u7ef4\u6570\u7ec4 index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) print ( a [ index ]) # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4 ## \u5e03\u5c14\u6570\u7ec4\u7684ndim\u9700\u8981\u548c\u539f\u6570\u7ec4\u76f8\u540c bool_a = a > 50 bool_a = list ( bool_a ) [[0 1 2] [3 4 5]] \u591a\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15 \u591a\u7ef4\u6570\u7ec4\u4f7f\u7528 \u5143\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5982 A[1,2] \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u5706\u62ec\u53f7\u4e3a A[(1,2)] \u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u7ef4\u6570\u7ec4\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u662f\u4e00\u7ef4\u6570\u7ec4\u53ea\u6709\u7b2c 0 \u8f74\u3002 \u4e0b\u6807\u5143\u7ec4 \u4e2d\u6bcf\u4e2a\u5143\u7d20\u548c\u6570\u7ec4\u7684\u6bcf\u4e2a\u8f74\u5bf9\u5e94\u3002 \u4e0b\u6807\u5143\u7ec4\u7684\u7b2c 0 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 0 \u8f74\uff0c\u7b2c 1 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 1 \u8f74\uff0c\u7b2c 2 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 2 \u8f74\u00b7\u00b7\u00b7 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u76f8\u7b49\u7684\u5143\u7ec4\u3002 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219\u629b\u51fa IndexError \u3002 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219\u81ea\u52a8\u5728\u5143\u7ec4\u7684\u540e\u9762\u8865 : \uff0c\u4f7f\u5f97\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u7b49\u4e8e\u6570\u7ec4\u7ef4\u5ea6ndim\u3002 \u5982\u679c\u4e0b\u6807\u5bf9\u8c61\u4e0d\u662f\u5143\u7ec4\uff0c\u5219Numpy\u4f1a\u9996\u5148\u5c06\u5176\u8f6c\u6362\u4e3a\u5143\u7ec4\u3002 \u6709\u4ee5\u4e0b7\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u6574\u6570\u5143\u7ec4 \u5207\u7247 \u6574\u6570\u5143\u7ec4\u642d\u914d\u5207\u7247 \u6574\u6570list \u6574\u6570\u6570\u7ec4 \u5e03\u5c14\u6570\u7ec4 \u6574\u6570\u6570\u7ec4\u3001\u5207\u7247\u3001\u6574\u6570\u5143\u7ec4\u6df7\u642d # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5143\u7ec4 b [( 1 , 2 )] # OWNDATA : Trues ## \u7b49\u4ef7\u4e8e b [ 1 , 2 ] # OWNDATA : Trues ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u8fc7\u591a\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6:IndexError ''' b[(1,2,3)] ''' ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u5c11\u4e8e\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6 b [ 1 ] # \u8fd4\u56de\u89c6\u56fe \u7b49\u4ef7\u4e8e b[1,:] # \u5207\u7247 b [ 0 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , 0 :: 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , slice ( 0 , None , 2 )] # \u8fd4\u56de\u89c6\u56fe ## SyntaxError b[0,slice(0,,2)] b [ 0 : 10 : 2 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe ## \u7b2c\u4e8c\u5217 b [:, 1 ] # \u8fd4\u56de\u89c6\u56fe b [ ... , 1 ] # \u8fd4\u56de\u89c6\u56fe ## IndexError: an index can only have a single ellipsis ('...') ''' b[...,...] IndexError ''' b [ ... ,:] # \u8fd4\u56de\u89c6\u56fe b [:,:] # \u8fd4\u56de\u89c6\u56fe # \u6574\u6570\u6570\u7ec4 ## arrays used as indices must be of integer (or boolean) type index = np . array ([ 0 , 1 , 2 , 3 ]) b [ index ] # OWNDATA : True index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) b [ index ] # OWNDATA : True ## \u5982\u679c\u4e0b\u6807\u6574\u6570\u6570\u7ec4\u7684\u7ef4\u5ea6\u4e0d\u4e00\u81f4\uff0c\u4f1a\u8fdb\u884c\u5e7f\u64ad rows = np . array ([[ 0 , 1 , 2 ]]) columns = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 4 ]]) index = ( rows , columns ) b [ index ] array([[ 0, 6, 12], [ 3, 9, 14]]) \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u662f\u5e03\u5c14\u6570\u7ec4\u6216\u8005\u4e0b\u6807\u5143\u7ec4\u4e2d\u5305\u542b\u4e86\u5e03\u5c14\u6570\u7ec4\uff0c\u5219\u76f8\u5f53\u4e8e\u5c06\u5e03\u5c14\u6570\u7ec4\u901a\u8fc7 np.nonzero() \u5c06\u5e03\u5c14\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u7684\u5143\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u4e0b\u6807\u8fd0\u884c\u3002 np.nonzero(a) \u8fd4\u56de\u6570\u7ec4 a \u4e2d\uff0c\u503c\u975e\u96f6\u7684\u5143\u7d20\u7684 \u4e0b\u6807 \u3002\u5b83\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a a.ndim \u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u4e00\u7ef4\u7684\u6574\u6570\u6570\u7ec4\uff0c\u5176\u503c\u4e3a\u975e\u96f6\u5143\u7d20\u7684\u4e0b\u6807\u5728\u5bf9\u5e94\u8f74\u4e0a\u7684\u503c\u3002\u5982\uff1a\u7b2c 0 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57280\u8f74\u7684\u4e0b\u6807\u3001\u7b2c 1 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57281\u8f74\u7684\u4e0b\u6807... np . nonzero ( bool_a ) (array([51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], dtype=int64),) \u8fdb\u9636\u8bf4\u660e \u4f7f\u7528\u5207\u7247\u8fd4\u56de\u89c6\u56fe\u7684\u539f\u56e0\uff1a \u5f53\u4e0b\u6807\u4f7f\u7528\u5207\u7247\u65f6\uff0c\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u57df\u4e2d\u662f\u7b49\u95f4\u9694\u5206\u5e03\u7684\u3002\u56e0\u4e3a\u53ea\u9700\u8981\u4fee\u6539\u6570\u7ec4\u7684ndim/shape/strides\u7b49\u5c5e\u6027\u4ee5\u53ca\u6307\u5411\u6570\u636e\u5b58\u50a8\u533a\u57df\u7684data\u6307\u9488\u5c31\u80fd\u591f\u5b9e\u73b0\u6574\u6570\u548c\u5207\u7247\u4e0b\u6807\u7684\u7d22\u5f15\u3002\u6240\u4ee5\u65b0\u6570\u7ec4\u548c\u539f\u59cb\u6570\u7ec4\u80fd\u591f\u5171\u4eab\u6570\u636e\u5b58\u50a8\u533a\u57df\u3002 \u5f53\u4f7f\u7528\u6574\u6570\u6570\u7ec4\uff08\u6574\u6570\u5143\u7ec4\uff0c\u6574\u6570\u5217\u8868\u9875\u8f6c\u6362\u6210\u6574\u6570\u6570\u7ec4\uff09\uff0c\u5e03\u5c14\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u662f\u7b49\u95f4\u9694\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236\u3002 \u901a\u8fc7\u6574\u6570\u5143\u7ec4\u83b7\u53d6\u7684\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u4e3a\u6570\u7ec4\u7684dtype\u7c7b\u578b \u3002\u5982\u679c\u60f3\u83b7\u53d6\u6807\u51c6Python\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7684 item() \u65b9\u6cd5\u3002 \u7d22\u5f15\u7684\u7ef4\u5ea6\u53d8\u6362 \u7d22\u5f15\u7684\u4e0b\u6807\u5143\u7ec4\u4e2d\uff1a \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u90fd\u662f\u5207\u7247\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u4e0e\u539f\u59cb\u6570\u7ec4\u7684\u7ef4\u5ea6\u76f8\u540c\uff08\u8f74\u7684\u6570\u91cf\u76f8\u7b49\uff09 \u6bcf\u591a\u4e00\u4e2a\u6574\u6570\u4e0b\u6807\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u5c31\u5c11\u4e00\u4e2a\u7ef4\u5ea6\uff08\u5c11\u4e00\u4e2a\u8f74\uff09 \u5982\u679c\u6240\u6709\u7684\u4e0b\u6807\u90fd\u662f\u6574\u6570\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u7ef4\u5ea6\u4e3a 0 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u4e2d\u5b58\u5728\u6570\u7ec4\uff0c\u5219\u8fd8\u9700\u8981\u8003\u8651\u8be5\u4e0b\u6807\u6570\u7ec4\u5e7f\u64ad\u540e\u7684\u7ef4\u5ea6 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6 ndim \u76f8\u7b49\u7684\u5143\u7ec4\u3002\u4f46\u662f\u5982\u679c\u4e0b\u6807\u4e2d\u5305\u542bNone\uff0c\u5219\u53ef\u4ee5\u7a81\u7834\u8fd9\u4e00\u9650\u5236\u3002 \u6bcf\u591a\u4e00\u4e2aNone\uff0c\u5219\u7d22\u5f15\u7ed3\u6784\u7ef4\u5ea6\u5347 1 \u3002 \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u51fa\u73b0\u7684None\u7b49\u4ef7\u4e8e\u5207\u7247 : \u3002 \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u54ea\u91cc\u51fa\u73b0None\uff0c\u7d22\u5f15\u7ed3\u679c\u5c31\u5728\u54ea\u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u8f74\uff0c\u8be5\u8f74\u957f\u5ea6\u4e3a 1\u3002 print ( b [ 1 , 2 ]) print ( b [ 1 , 2 , None ]) print ( b [ 1 , 2 , np . newaxis ]) 7 [7] [7]","title":"6.2.\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.2.%E7%B4%A2%E5%BC%95.html#_1","text":"\u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5217\u8868\u76f8\u540c\u3002\u5047\u8bbe A \u662f\u4e00\u7ef4\u6570\u7ec4\uff0c\u90a3\u4e48\u6709\u4ee5\u4e0b5\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570 i \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 A[i] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5207\u7247 \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 A[i:j] \uff0c\u7b49\u4ef7\u4e8e A[slice(i,j)] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570list \u5bf9\u6570\u7ec4\u8fdb\u884c\u5b58\u53d6\uff0c\u5982 A[[i,j,z]] \u3002\u6b64\u65f6\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u4f5c\u4e3a\u4e0b\u6807 (i/j/z) \uff0c\u4f7f\u7528\u5217\u8868\u4f5c\u4e3a\u4e0b\u6807\u5f97\u5230\u7684\u6570\u7ec4\u4e3a np.array([A[i],A[j],A[z]]) \uff0c\u5b83\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u5185\u5b58\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982 A[B] \u6b64\u65f6\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f62\u72b6\u548c\u4e0b\u6807\u6570\u7ec4 B \u76f8\u540c\u7684\u65b0\u6570\u7ec4\u3002\u65b0\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e0b\u6807\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u4f5c\u4e3a\u4e0b\u6807\u4ece\u539f\u59cb\u6570\u7ec4\u4e2d\u83b7\u5f97\u7684\u503c\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5e03\u5c14\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982 A[B] \u3002\u6b64\u65f6\u5c06\u83b7\u5f97\u6570\u7ec4 A \u4e2d\u4e0e\u6570\u7ec4 B \u4e2d\u7684 True \u5bf9\u5e94\u7684\u5143\u7d20\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570 a [ 1 ] # OWNDATA : True ## \u7b49\u4ef7\u4e8e a [( 1 )] # OWNDATA : True # \u6307\u5b9a\u5207\u7247 a [ 0 : 20 : 2 ] # \u8fd4\u56de\u89c6\u56fe a [ slice ( 0 , 20 , 2 )] # \u8fd4\u56de\u89c6\u56fe # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5217\u8868 a [[ 1 , 2 , 3 , 4 ]] # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ## index\u662f\u4e00\u7ef4\u6570\u7ec4 index = np . array ([ 0 , 1 , 2 , 3 , 4 ]) a [ index ] # OWNDATA : True ## index\u662f\u4e8c\u7ef4\u6570\u7ec4 index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) print ( a [ index ]) # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4 ## \u5e03\u5c14\u6570\u7ec4\u7684ndim\u9700\u8981\u548c\u539f\u6570\u7ec4\u76f8\u540c bool_a = a > 50 bool_a = list ( bool_a ) [[0 1 2] [3 4 5]]","title":"\u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.2.%E7%B4%A2%E5%BC%95.html#_2","text":"\u591a\u7ef4\u6570\u7ec4\u4f7f\u7528 \u5143\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5982 A[1,2] \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u5706\u62ec\u53f7\u4e3a A[(1,2)] \u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u7ef4\u6570\u7ec4\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u662f\u4e00\u7ef4\u6570\u7ec4\u53ea\u6709\u7b2c 0 \u8f74\u3002 \u4e0b\u6807\u5143\u7ec4 \u4e2d\u6bcf\u4e2a\u5143\u7d20\u548c\u6570\u7ec4\u7684\u6bcf\u4e2a\u8f74\u5bf9\u5e94\u3002 \u4e0b\u6807\u5143\u7ec4\u7684\u7b2c 0 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 0 \u8f74\uff0c\u7b2c 1 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 1 \u8f74\uff0c\u7b2c 2 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 2 \u8f74\u00b7\u00b7\u00b7 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u76f8\u7b49\u7684\u5143\u7ec4\u3002 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219\u629b\u51fa IndexError \u3002 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219\u81ea\u52a8\u5728\u5143\u7ec4\u7684\u540e\u9762\u8865 : \uff0c\u4f7f\u5f97\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u7b49\u4e8e\u6570\u7ec4\u7ef4\u5ea6ndim\u3002 \u5982\u679c\u4e0b\u6807\u5bf9\u8c61\u4e0d\u662f\u5143\u7ec4\uff0c\u5219Numpy\u4f1a\u9996\u5148\u5c06\u5176\u8f6c\u6362\u4e3a\u5143\u7ec4\u3002 \u6709\u4ee5\u4e0b7\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u6574\u6570\u5143\u7ec4 \u5207\u7247 \u6574\u6570\u5143\u7ec4\u642d\u914d\u5207\u7247 \u6574\u6570list \u6574\u6570\u6570\u7ec4 \u5e03\u5c14\u6570\u7ec4 \u6574\u6570\u6570\u7ec4\u3001\u5207\u7247\u3001\u6574\u6570\u5143\u7ec4\u6df7\u642d # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5143\u7ec4 b [( 1 , 2 )] # OWNDATA : Trues ## \u7b49\u4ef7\u4e8e b [ 1 , 2 ] # OWNDATA : Trues ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u8fc7\u591a\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6:IndexError ''' b[(1,2,3)] ''' ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u5c11\u4e8e\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6 b [ 1 ] # \u8fd4\u56de\u89c6\u56fe \u7b49\u4ef7\u4e8e b[1,:] # \u5207\u7247 b [ 0 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , 0 :: 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , slice ( 0 , None , 2 )] # \u8fd4\u56de\u89c6\u56fe ## SyntaxError b[0,slice(0,,2)] b [ 0 : 10 : 2 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe ## \u7b2c\u4e8c\u5217 b [:, 1 ] # \u8fd4\u56de\u89c6\u56fe b [ ... , 1 ] # \u8fd4\u56de\u89c6\u56fe ## IndexError: an index can only have a single ellipsis ('...') ''' b[...,...] IndexError ''' b [ ... ,:] # \u8fd4\u56de\u89c6\u56fe b [:,:] # \u8fd4\u56de\u89c6\u56fe # \u6574\u6570\u6570\u7ec4 ## arrays used as indices must be of integer (or boolean) type index = np . array ([ 0 , 1 , 2 , 3 ]) b [ index ] # OWNDATA : True index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) b [ index ] # OWNDATA : True ## \u5982\u679c\u4e0b\u6807\u6574\u6570\u6570\u7ec4\u7684\u7ef4\u5ea6\u4e0d\u4e00\u81f4\uff0c\u4f1a\u8fdb\u884c\u5e7f\u64ad rows = np . array ([[ 0 , 1 , 2 ]]) columns = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 4 ]]) index = ( rows , columns ) b [ index ] array([[ 0, 6, 12], [ 3, 9, 14]]) \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u662f\u5e03\u5c14\u6570\u7ec4\u6216\u8005\u4e0b\u6807\u5143\u7ec4\u4e2d\u5305\u542b\u4e86\u5e03\u5c14\u6570\u7ec4\uff0c\u5219\u76f8\u5f53\u4e8e\u5c06\u5e03\u5c14\u6570\u7ec4\u901a\u8fc7 np.nonzero() \u5c06\u5e03\u5c14\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u7684\u5143\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u4e0b\u6807\u8fd0\u884c\u3002 np.nonzero(a) \u8fd4\u56de\u6570\u7ec4 a \u4e2d\uff0c\u503c\u975e\u96f6\u7684\u5143\u7d20\u7684 \u4e0b\u6807 \u3002\u5b83\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a a.ndim \u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u4e00\u7ef4\u7684\u6574\u6570\u6570\u7ec4\uff0c\u5176\u503c\u4e3a\u975e\u96f6\u5143\u7d20\u7684\u4e0b\u6807\u5728\u5bf9\u5e94\u8f74\u4e0a\u7684\u503c\u3002\u5982\uff1a\u7b2c 0 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57280\u8f74\u7684\u4e0b\u6807\u3001\u7b2c 1 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57281\u8f74\u7684\u4e0b\u6807... np . nonzero ( bool_a ) (array([51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], dtype=int64),)","title":"\u591a\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.2.%E7%B4%A2%E5%BC%95.html#_3","text":"\u4f7f\u7528\u5207\u7247\u8fd4\u56de\u89c6\u56fe\u7684\u539f\u56e0\uff1a \u5f53\u4e0b\u6807\u4f7f\u7528\u5207\u7247\u65f6\uff0c\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u57df\u4e2d\u662f\u7b49\u95f4\u9694\u5206\u5e03\u7684\u3002\u56e0\u4e3a\u53ea\u9700\u8981\u4fee\u6539\u6570\u7ec4\u7684ndim/shape/strides\u7b49\u5c5e\u6027\u4ee5\u53ca\u6307\u5411\u6570\u636e\u5b58\u50a8\u533a\u57df\u7684data\u6307\u9488\u5c31\u80fd\u591f\u5b9e\u73b0\u6574\u6570\u548c\u5207\u7247\u4e0b\u6807\u7684\u7d22\u5f15\u3002\u6240\u4ee5\u65b0\u6570\u7ec4\u548c\u539f\u59cb\u6570\u7ec4\u80fd\u591f\u5171\u4eab\u6570\u636e\u5b58\u50a8\u533a\u57df\u3002 \u5f53\u4f7f\u7528\u6574\u6570\u6570\u7ec4\uff08\u6574\u6570\u5143\u7ec4\uff0c\u6574\u6570\u5217\u8868\u9875\u8f6c\u6362\u6210\u6574\u6570\u6570\u7ec4\uff09\uff0c\u5e03\u5c14\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u662f\u7b49\u95f4\u9694\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236\u3002 \u901a\u8fc7\u6574\u6570\u5143\u7ec4\u83b7\u53d6\u7684\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u4e3a\u6570\u7ec4\u7684dtype\u7c7b\u578b \u3002\u5982\u679c\u60f3\u83b7\u53d6\u6807\u51c6Python\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7684 item() \u65b9\u6cd5\u3002","title":"\u8fdb\u9636\u8bf4\u660e"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.2.%E7%B4%A2%E5%BC%95.html#_4","text":"\u7d22\u5f15\u7684\u4e0b\u6807\u5143\u7ec4\u4e2d\uff1a \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u90fd\u662f\u5207\u7247\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u4e0e\u539f\u59cb\u6570\u7ec4\u7684\u7ef4\u5ea6\u76f8\u540c\uff08\u8f74\u7684\u6570\u91cf\u76f8\u7b49\uff09 \u6bcf\u591a\u4e00\u4e2a\u6574\u6570\u4e0b\u6807\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u5c31\u5c11\u4e00\u4e2a\u7ef4\u5ea6\uff08\u5c11\u4e00\u4e2a\u8f74\uff09 \u5982\u679c\u6240\u6709\u7684\u4e0b\u6807\u90fd\u662f\u6574\u6570\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u7ef4\u5ea6\u4e3a 0 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u4e2d\u5b58\u5728\u6570\u7ec4\uff0c\u5219\u8fd8\u9700\u8981\u8003\u8651\u8be5\u4e0b\u6807\u6570\u7ec4\u5e7f\u64ad\u540e\u7684\u7ef4\u5ea6 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6 ndim \u76f8\u7b49\u7684\u5143\u7ec4\u3002\u4f46\u662f\u5982\u679c\u4e0b\u6807\u4e2d\u5305\u542bNone\uff0c\u5219\u53ef\u4ee5\u7a81\u7834\u8fd9\u4e00\u9650\u5236\u3002 \u6bcf\u591a\u4e00\u4e2aNone\uff0c\u5219\u7d22\u5f15\u7ed3\u6784\u7ef4\u5ea6\u5347 1 \u3002 \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u51fa\u73b0\u7684None\u7b49\u4ef7\u4e8e\u5207\u7247 : \u3002 \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u54ea\u91cc\u51fa\u73b0None\uff0c\u7d22\u5f15\u7ed3\u679c\u5c31\u5728\u54ea\u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u8f74\uff0c\u8be5\u8f74\u957f\u5ea6\u4e3a 1\u3002 print ( b [ 1 , 2 ]) print ( b [ 1 , 2 , None ]) print ( b [ 1 , 2 , np . newaxis ]) 7 [7] [7]","title":"\u7d22\u5f15\u7684\u7ef4\u5ea6\u53d8\u6362"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html","text":"import numpy as np import pprint import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.28 numpy version: 1.18.1 ndarray\u5bf9\u8c61 NumPy\u63d0\u4f9b\u4e86\u4e00\u4e2aN\u7ef4\u6570\u7ec4\u5bf9\u8c61ndarray\uff0c\u5b83\u63cf\u8ff0\u4e86\u540c\u4e00\u7c7b\u578b\u7684\u5143\u7d20\u7684\u96c6\u5408\u3002\u53ef\u4ee5\u4f7f\u7528N\u4e2a\u6574\u6570\u5bf9\u5143\u7d20\u8fdb\u884c\u7d22\u5f15\u3002 ndarray\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f \u540c\u8d28\u7684 1 \uff1a\u6bcf\u4e2a\u5143\u7d20\u5360\u7528\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u5e76\u4e14\u6240\u6709\u5185\u5b58\u5757\u7684\u89e3\u91ca\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002ndarray\u5185\u5b58\u5757\uff08\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\uff09\u89e3\u91ca\u4e3a\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u4fe1\u606f\u5305\u542b\u5728 data-type \u5bf9\u8c61\uff08dtype\uff09\u4e4b\u4e2d\u3002 \u56fe\u4e2d\u663e\u793a\u4e86\u7528\u4e8e\u63cf\u8ff0\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u4e09\u4e2a\u57fa\u672c\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a ndarray\u672c\u8eab \u63cf\u8ff0\u6570\u7ec4\u4e2d\u5355\u4e2a\u56fa\u5b9a\u5927\u5c0f\u5143\u7d20\u7684\u5185\u5b58\u5e03\u5c40\u7684data-type\u5bf9\u8c61 \u8bbf\u95ee\u6570\u7ec4\u7684\u5355\u4e2a\u5143\u7d20\u65f6\u8fd4\u56de\u7684\u6570\u7ec4\u6807\u91cf\uff08Python\u5bf9\u8c61\uff09 ndarray\u7c7b\u7684\u5b9e\u4f8b\u7531\u4e00\u4e2a \u8fde\u7eed\u7684 \u4e00\u7ef4\u8ba1\u7b97\u673a\u5185\u5b58\u5757\uff08\u7531\u6570\u7ec4\u6216\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\uff09\u548c\u4e00\u4e2a\u7d22\u5f15\u65b9\u6848\u7ec4\u5408\u800c\u6210\uff0c\u8be5\u7d22\u5f15\u65b9\u6848\u5c06N\u4e2a\u6574\u6570\u5206\u522b\u6620\u5c04\u5230\u5185\u5b58\u5757\u4e2dN\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u3002\u7d22\u5f15\u53ef\u4ee5\u53d8\u5316\u7684\u8303\u56f4\u88ab\u6570\u7ec4\u7684shape\u9650\u5236\u3002 ndarray\u770b\u4e0a\u53bb\u4f3c\u4e4e\u53ef\u4ee5\u662f\u591a\u7ef4\u7684\uff0c\u4f46\u5728\u5185\u5b58\u4e2d\uff0cndarray\u662f\u4e00\u7ef4\u50a8\u5b58\u7684\u3002\u6709\u8bb8\u591a\u65b9\u6848\u5c06N\u7ef4\u6570\u7ec4\u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u4e2dnumpy\u6709\u4e24\u79cd\u50a8\u5b58\u65b9\u5f0f\uff1a \u5143\u7d20\u6309\u884c\u987a\u5e8f\u50a8\u5b58\uff08C\u8bed\u8a00\u98ce\u683c\uff09 \u6216\u8005\u6309\u5217\u987a\u5e8f\u50a8\u5b58\uff08Fortran\u8bed\u8a00\u98ce\u683c\uff09 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5bf9\u4e00\u4e2andarray\u4ee5\u884c\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u597d\u4ee5C-type\u7684\u65b9\u5f0f\u521b\u5efandarray\uff1b\u5982\u679c\u8981\u5bf9\u4e00\u4e2andarray\u4ee5\u5217\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u5219\u7528Fortran\u65b9\u5f0f\u3002 \u5185\u5b58\u5e03\u5c40 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) pprint . pprint ( A ) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=int16) \u5c5e\u6027\uff08\u4e0e\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u6709\u5173\uff09 A\u7684\u5c5e\u6027\u503c \u63cf\u8ff0 A.dtype dtype('int16') \u5143\u7d20\u6570\u636e\u7c7b\u578b\u3002A\u7684\u6bcf\u4e2a\u5143\u7d20\u662f16bit\u5927\u5c0f\u7684int\u578b\u6570\u636e\u3002 A.ndim 2 \u8f74\uff08\u7ef4\u5ea6\uff09\u7684\u4e2a\u6570\u3002A\u6709\u4e24\u4e2a\u8f74\uff1a0\u8f74\u30011\u8f74\u3002 A.shape (3, 3) \u5404\u4e2a\u8f74\u7684\u5927\u5c0f\u30020\u8f74\u67093\u4e2a\u5143\u7d20\uff0c1\u8f74\u67093\u4e2a\u5143\u7d20\u3002 A.size 9 \u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002 A.data <memory at 0x000001B17A238A68> \u6307\u5411\u6570\u7ec4\u7684\u6570\u636e\u7684\u5b58\u50a8\u533a\u3002 A.itemsize 2 \u4e00\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u300216bit\u7b49\u4e8e2\u5b57\u8282\u3002 A.nbytes 18 \u6570\u7ec4\u5143\u7d20\u5360\u636e\u7684\u603b\u5b57\u8282\u6570\u3002 A.base None \u5982\u679c\u5185\u5b58\u6765\u81ea\u5176\u4ed6\u5bf9\u8c61\uff0c\u5219\u4ee5\u6b64\u4e3a\u57fa\u7840\u5bf9\u8c61\u3002 A.flags \u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\u3002 A.strides (6, 2) \u4e00\u4e2a\u6574\u6570\u5143\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fdd\u5b58\u7740\u6bcf\u4e2a\u8f74\u4e0a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5dee\u3002 \u5373\u5f53\u67d0\u4e2a\u8f74\u7684\u4e0b\u6807\u589e\u52a01 \u65f6\uff0c\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u7684\u6307\u9488\u589e\u52a0\u7684\u5b57\u8282\u6570\u3002 \u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6(\u5373\u5e03\u5c40)\u89c2\u5bdf\u8be5array\uff1a shape [ 1 ] ( = 3 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2510 \u2502 \u2502 0 \u2502 1 \u2502 2 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 shape [ 0 ] \u2502 \u2502 3 \u2502 4 \u2502 5 \u2502 \u2502 len ( Z ) ( = 3 ) \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 ( = 3 ) \u2502 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2502 \u2514 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2518 \u5c55\u5f00\u7684item layout \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A . size ( = 9 ) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f) strides [ 1 ] ( = 2 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2510 \u2502 p + 00 : \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 p + 02 : \u2502 00000000 \u2502 00000001 \u2502 \u2502 strides [ 0 ] \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 ( = 2 x3 ) \u2502 p + 04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2518 \u2502 p + 06 \u2502 00000000 \u2502 00000011 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 A . nbytes \u2502 p + 08 : \u2502 00000000 \u2502 00000100 \u2502 ( = 3 x3x2 ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 10 : \u2502 00000000 \u2502 00000101 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 12 : \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 14 : \u2502 00000000 \u2502 00000111 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 16 : \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A . itemsize A . dtype . itemsize ( = 2 ) \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: Item layout shape [ 1 ] ( = 2 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2510 \u2502 \u2502 0 \u2502 \u2502 2 \u2502 \u2502 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 | 0 \u2502 2 \u2502 shape [ 0 ] \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 len ( A ) \u2192 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 ( = 2 ) \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 ( = 2 ) | 6 \u2502 8 \u2502 \u2502 \u2502 6 \u2502 \u2502 8 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2518 \u5c55\u5f00\u7684item layout \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2192 \u2502 0 \u2502 2 \u2502 6 \u2502 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A.size (=4) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f\uff0c\u5927\u7aef\u5e8f) \u250c \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2510 \u2510 \u250c\u2500\u2524 p + 00 : \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u2502 \u2514 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 strides [ 1 ] \u2502 \u250c\u2500\u2524 p + 02 : \u2502 \u2502 \u2502 \u2502 ( = 4 ) \u2502 \u2502 \u2502 \u250c \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2518 \u2502 \u2502 \u2514\u2500\u2524 p + 04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u2514 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 strides [ 0 ] \u2502 p + 06 : \u2502 \u2502 \u2502 \u2502 ( = 12 ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 A . nbytes \u2500\u2524 p + 08 : \u2502 \u2502 \u2502 \u2502 ( = 8 ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 p + 10 : \u2502 \u2502 \u2502 \u2502 \u2502 \u250c \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2518 \u2502 \u250c\u2500\u2524 p + 12 : \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u2502 \u2514 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2514\u2500\u2524 p + 14 : \u2502 \u2502 \u2502 \u2502 \u250c \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2514\u2500\u2524 p + 16 : \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A . itemsize A . dtype . itemsize ( = 2 ) \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 ndarray \u5bf9\u8c61\u7684 strides \u5c5e\u6027\uff0c\u6539\u53d8 ndarray \u7684\u5185\u5b58\u5e03\u5c40\uff0c\u4f46\u6b64\u65f6\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\u3002 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) A . strides = ( 2 , 4 ) pprint . pprint ( A ) array([[0, 2, 4], [1, 3, 5], [2, 4, 6]], dtype=int16) \u89c6\u56fe\u548c\u526f\u672c \u89c6\u56fe\u548c\u526f\u672c\u662f\u4f18\u5316\u6570\u503c\u8ba1\u7b97\u7684\u91cd\u8981\u6982\u5ff5\u3002 \u5728numpy\u4e2d\uff0c\u53ef\u4ee5\u7528\u5207\u7247\u548c \u82b1\u5f0f\u7d22\u5f15 \uff08\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff09\u6765\u7d22\u5f15\u6570\u636e\u3002\u5207\u7247\u5c06\u59cb\u7ec8\u8fd4\u56de\u89c6\u56fe\uff0c\u800c\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u5c06\u8fd4\u56de\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u5207\u7247\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u89c6\u56fe\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u800c\u5728\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u60c5\u51b5\u4e0b\u5219\u4e0d\u662f\u8fd9\u6837\uff1a Z = np . zeros ( 9 ) Z_view = Z [: 3 ] Z_view [ ... ] = 1 print ( Z ) [1. 1. 1. 0. 0. 0. 0. 0. 0.] Z = np . zeros ( 9 ) Z_copy = Z [[ 0 , 1 , 2 ]] Z_copy [ ... ] = 1 print ( Z ) [0. 0. 0. 0. 0. 0. 0. 0. 0.] \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u9700\u8981\u53cd\u590d\u7528\u5230\u67d0\u4e2a\u82b1\u5f0f\u7d22\u5f15\uff0c\u6700\u597d\u4fdd\u7559\u5b83\u7684\u526f\u672c\uff08\u7279\u522b\u662f\u5982\u679c\u8ba1\u7b97\u5b83\u5f88\u590d\u6742\uff09\u3002\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u7d22\u5f15\u7684\u7ed3\u679c\u662f\u89c6\u56fe\u8fd8\u662f\u526f\u672c\uff0c\u5219\u53ef\u4ee5\u68c0\u67e5base\u7684\u7ed3\u679c\u3002\u5982\u679c\u662fNone\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f\u526f\u672c\uff1a Z = np . random . uniform ( 0 , 1 ,( 5 , 5 )) Z1 = Z [: 3 ,:] Z2 = Z [[ 0 , 1 , 2 ], :] print ( np . allclose ( Z1 , Z2 )) True print ( Z1 . base is Z ) True print ( Z2 . base is Z ) False print ( Z2 . base is None ) True \u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9bnumpy\u51fd\u6570\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u89c6\u56fe(\u4f8b\u5982\uff0c ravel )\uff0c\u800c\u53e6\u4e00\u4e9b\u51fd\u6570\u603b\u662f\u8fd4\u56de\u526f\u672c(\u4f8b\u5982\uff0c flatten ): Z = np . zeros (( 5 , 5 )) print ( Z . ravel () . base is Z ) True print ( Z [:: 2 ,:: 2 ] . ravel () . base is Z ) False print ( Z . flatten () . base is Z ) False \u53ef\u4ee5\u901a\u8fc7 ndarray.view() \u65b9\u6cd5\uff0c\u4ece\u540c\u4e00\u5757\u5185\u5b58\u533a\uff08\u50a8\u5b58\u7740numpy\u6570\u7ec4\u7684\u5185\u5b58\u533a\uff09\u521b\u5efa\u4e0d\u540c\u7684dtype\u6570\u7ec4\u3002\u5373\u7528\u4e0d\u540c\u7684\u6570\u503c\u7c7b\u578b\u67e5\u770b\u540c\u4e00\u6bb5\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5b83\u4eec\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5757\u5185\u5b58\u3002 \u5b9e\u9645\u4e0a\uff0c ndarray.view() \u65b9\u6cd5\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u89c6\u56fe\u3002 A = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ],[ 6 , 7 , 8 ]]) A_view = A . view ( np . int32 ) # A_view \u662f\u89c6\u56fe A_view . flags C_CONTIGUOUS : True F_CONTIGUOUS : False OWNDATA : False WRITEABLE : True ALIGNED : True WRITEBACKIFCOPY : False UPDATEIFCOPY : False \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u7684 dtype \uff0c\u4f1a\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c \u4f46\u6b64\u65f6\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u3002 A . dtype = np . float32 Caution \u901a\u5e38\u5e94\u907f\u514d\u6539\u53d8\u7531\u5207\u7247\u3001transposes\u3001fortran\u6392\u5e8f\u7b49\u5b9a\u4e49\u7684\u6570\u7ec4\u7684 dtype \u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u5982\u4e0b\uff1a A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) try : A_view = A . view ( np . int32 ) except ValueError as e : print ( \"ValueError:\" , e ) ValueError : When changing to a larger dtype , its size must be a divisor of the total size in bytes of the last axis of the array . ndarray \u6570\u636e\u7c7b\u578b \u8bb0\u4e0d\u4f4f\u8fd9\u4e9bNumPy\u7684dtype\u4e5f\u6ca1\u5173\u7cfb\uff0c\u65b0\u624b\u66f4\u662f\u5982\u6b64\u3002\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u4f60\u6240\u5904\u7406\u7684\u6570\u636e\u7684\u5927\u81f4\u7c7b\u578b\u662f\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u4e32\uff0c\u8fd8\u662f\u666e\u901a\u7684Python\u5bf9\u8c61\u5373\u53ef\u3002\u5f53\u4f60\u9700\u8981\u63a7\u5236\u6570\u636e\u5728\u5185\u5b58\u548c\u78c1\u76d8\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u65f6\uff08\u5c24\u5176\u662f\u5bf9\u5927\u6570\u636e\u96c6\uff09\uff0c\u90a3\u5c31\u5f97\u4e86\u89e3\u5982\u4f55\u63a7\u5236\u5b58\u50a8\u7c7b\u578b\u3002 \u7c7b\u578b \u7c7b\u578b\u4ee3\u7801 \u8bf4\u660e int8\u3001 uint8 i1\u3001u1 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u76848\u4f4d\uff081\u4e2a\u5b57\u8282\uff09\u6574\u578b int16\u3001uint16 i2\u3001u2 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768416\u4f4d\uff082\u4e2a\u5b57\u8282\uff09\u6574\u578b int32\u3001uint32 i4\u3001u4 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768432\u4f4d\uff084\u4e2a\u5b57\u8282\uff09\u6574\u578b int64\u3001uint64 i8\u3001u8 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768464\u4f4d\uff088\u4e2a\u5b57\u8282\uff09\u6574\u578b float16 f2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570 float32 f4\u6216f \u6807\u51c6\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684float\u517c\u5bb9 float64 f8\u6216d \u6807\u51c6\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684double\u548cPython \u7684float\u5bf9\u8c61\u517c\u5bb9 float128 f16 \u6216 g \u6269\u5c55\u7cbe\u5ea6\u6d6e\u70b9\u6570 complex64\u3001complex128\u3001 c8\u3001 c16\u3001 \u5206\u522b\u7528\u4e24\u4e2a32\u4f4d\u300164\u4f4d\u6216128\u4f4d\u6d6e\u70b9\u6570\u8868\u793a\u7684 complex256 c32 \u590d\u6570 bool ? \u5b58\u50a8True\u548cFalse\u503c\u7684\u5e03\u5c14\u7c7b\u578b object O Python\u5bf9\u8c61\u7c7b\u578b string_ S \u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff08\u6bcf\u4e2a\u5b57\u7b261\u4e2a\u5b57\u8282\uff09\u3002 \u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5b57\u7b26\u4e32\uff0c\u5e94\u4f7f\u7528 S10 unicode_ U \u56fa\u5b9a\u957f\u5ea6\u7684Unicode\u7c7b\u578b\uff08\u5b57\u8282\u6570\u7531\u5e73\u53f0\u51b3\u5b9a\uff09\u3002 \u8ddf\u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u65b9\u5f0f\u4e00\u6837\uff08\u5982U10) \u4f8b\u5916\uff1aNumpy\u7684\u7ed3\u6784\u6570\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u8d28\u3002 \u21a9","title":"6.3.\u5185\u5b58\u5e03\u5c40"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#ndarray","text":"NumPy\u63d0\u4f9b\u4e86\u4e00\u4e2aN\u7ef4\u6570\u7ec4\u5bf9\u8c61ndarray\uff0c\u5b83\u63cf\u8ff0\u4e86\u540c\u4e00\u7c7b\u578b\u7684\u5143\u7d20\u7684\u96c6\u5408\u3002\u53ef\u4ee5\u4f7f\u7528N\u4e2a\u6574\u6570\u5bf9\u5143\u7d20\u8fdb\u884c\u7d22\u5f15\u3002 ndarray\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f \u540c\u8d28\u7684 1 \uff1a\u6bcf\u4e2a\u5143\u7d20\u5360\u7528\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u5e76\u4e14\u6240\u6709\u5185\u5b58\u5757\u7684\u89e3\u91ca\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002ndarray\u5185\u5b58\u5757\uff08\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\uff09\u89e3\u91ca\u4e3a\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u4fe1\u606f\u5305\u542b\u5728 data-type \u5bf9\u8c61\uff08dtype\uff09\u4e4b\u4e2d\u3002 \u56fe\u4e2d\u663e\u793a\u4e86\u7528\u4e8e\u63cf\u8ff0\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u4e09\u4e2a\u57fa\u672c\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a ndarray\u672c\u8eab \u63cf\u8ff0\u6570\u7ec4\u4e2d\u5355\u4e2a\u56fa\u5b9a\u5927\u5c0f\u5143\u7d20\u7684\u5185\u5b58\u5e03\u5c40\u7684data-type\u5bf9\u8c61 \u8bbf\u95ee\u6570\u7ec4\u7684\u5355\u4e2a\u5143\u7d20\u65f6\u8fd4\u56de\u7684\u6570\u7ec4\u6807\u91cf\uff08Python\u5bf9\u8c61\uff09 ndarray\u7c7b\u7684\u5b9e\u4f8b\u7531\u4e00\u4e2a \u8fde\u7eed\u7684 \u4e00\u7ef4\u8ba1\u7b97\u673a\u5185\u5b58\u5757\uff08\u7531\u6570\u7ec4\u6216\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\uff09\u548c\u4e00\u4e2a\u7d22\u5f15\u65b9\u6848\u7ec4\u5408\u800c\u6210\uff0c\u8be5\u7d22\u5f15\u65b9\u6848\u5c06N\u4e2a\u6574\u6570\u5206\u522b\u6620\u5c04\u5230\u5185\u5b58\u5757\u4e2dN\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u3002\u7d22\u5f15\u53ef\u4ee5\u53d8\u5316\u7684\u8303\u56f4\u88ab\u6570\u7ec4\u7684shape\u9650\u5236\u3002 ndarray\u770b\u4e0a\u53bb\u4f3c\u4e4e\u53ef\u4ee5\u662f\u591a\u7ef4\u7684\uff0c\u4f46\u5728\u5185\u5b58\u4e2d\uff0cndarray\u662f\u4e00\u7ef4\u50a8\u5b58\u7684\u3002\u6709\u8bb8\u591a\u65b9\u6848\u5c06N\u7ef4\u6570\u7ec4\u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u4e2dnumpy\u6709\u4e24\u79cd\u50a8\u5b58\u65b9\u5f0f\uff1a \u5143\u7d20\u6309\u884c\u987a\u5e8f\u50a8\u5b58\uff08C\u8bed\u8a00\u98ce\u683c\uff09 \u6216\u8005\u6309\u5217\u987a\u5e8f\u50a8\u5b58\uff08Fortran\u8bed\u8a00\u98ce\u683c\uff09 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5bf9\u4e00\u4e2andarray\u4ee5\u884c\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u597d\u4ee5C-type\u7684\u65b9\u5f0f\u521b\u5efandarray\uff1b\u5982\u679c\u8981\u5bf9\u4e00\u4e2andarray\u4ee5\u5217\u4e3a\u5355\u4f4d\u8fdb\u884c\u64cd\u4f5c\uff0c\u5219\u7528Fortran\u65b9\u5f0f\u3002","title":"ndarray\u5bf9\u8c61"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#_1","text":"A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) pprint . pprint ( A ) array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=int16) \u5c5e\u6027\uff08\u4e0e\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u6709\u5173\uff09 A\u7684\u5c5e\u6027\u503c \u63cf\u8ff0 A.dtype dtype('int16') \u5143\u7d20\u6570\u636e\u7c7b\u578b\u3002A\u7684\u6bcf\u4e2a\u5143\u7d20\u662f16bit\u5927\u5c0f\u7684int\u578b\u6570\u636e\u3002 A.ndim 2 \u8f74\uff08\u7ef4\u5ea6\uff09\u7684\u4e2a\u6570\u3002A\u6709\u4e24\u4e2a\u8f74\uff1a0\u8f74\u30011\u8f74\u3002 A.shape (3, 3) \u5404\u4e2a\u8f74\u7684\u5927\u5c0f\u30020\u8f74\u67093\u4e2a\u5143\u7d20\uff0c1\u8f74\u67093\u4e2a\u5143\u7d20\u3002 A.size 9 \u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002 A.data <memory at 0x000001B17A238A68> \u6307\u5411\u6570\u7ec4\u7684\u6570\u636e\u7684\u5b58\u50a8\u533a\u3002 A.itemsize 2 \u4e00\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u300216bit\u7b49\u4e8e2\u5b57\u8282\u3002 A.nbytes 18 \u6570\u7ec4\u5143\u7d20\u5360\u636e\u7684\u603b\u5b57\u8282\u6570\u3002 A.base None \u5982\u679c\u5185\u5b58\u6765\u81ea\u5176\u4ed6\u5bf9\u8c61\uff0c\u5219\u4ee5\u6b64\u4e3a\u57fa\u7840\u5bf9\u8c61\u3002 A.flags \u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\u3002 A.strides (6, 2) \u4e00\u4e2a\u6574\u6570\u5143\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fdd\u5b58\u7740\u6bcf\u4e2a\u8f74\u4e0a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5dee\u3002 \u5373\u5f53\u67d0\u4e2a\u8f74\u7684\u4e0b\u6807\u589e\u52a01 \u65f6\uff0c\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u7684\u6307\u9488\u589e\u52a0\u7684\u5b57\u8282\u6570\u3002 \u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6(\u5373\u5e03\u5c40)\u89c2\u5bdf\u8be5array\uff1a shape [ 1 ] ( = 3 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2510 \u2502 \u2502 0 \u2502 1 \u2502 2 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 shape [ 0 ] \u2502 \u2502 3 \u2502 4 \u2502 5 \u2502 \u2502 len ( Z ) ( = 3 ) \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 ( = 3 ) \u2502 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2502 \u2514 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2518 \u5c55\u5f00\u7684item layout \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A . size ( = 9 ) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f) strides [ 1 ] ( = 2 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2510 \u2502 p + 00 : \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 p + 02 : \u2502 00000000 \u2502 00000001 \u2502 \u2502 strides [ 0 ] \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 ( = 2 x3 ) \u2502 p + 04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2518 \u2502 p + 06 \u2502 00000000 \u2502 00000011 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 A . nbytes \u2502 p + 08 : \u2502 00000000 \u2502 00000100 \u2502 ( = 3 x3x2 ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 10 : \u2502 00000000 \u2502 00000101 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 12 : \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 14 : \u2502 00000000 \u2502 00000111 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 p + 16 : \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A . itemsize A . dtype . itemsize ( = 2 ) \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: \u5982\u679c\u6211\u4eec\u73b0\u5728\u53d6\u4e00A\u7684\u5207\u7247\uff0c\u7ed3\u679c\u662fA\u7684\u57fa\u672c\u6570\u7ec4\u7684\u4e00\u4e2a\u89c6\u56fe\uff1a V = A[::2,::2] \u8fd9\u6837\u7684\u89c6\u56fe\u662f\u7531shape\uff0cdtype \u548c strides \u6307\u5b9a\u7684\uff0c\u56e0\u4e3a\u4ec5\u51eddtype\u548cshape\u4e0d\u80fd\u63a8\u65ad\u51fastrides: Item layout shape [ 1 ] ( = 2 ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2510 \u2502 \u2502 0 \u2502 \u2502 2 \u2502 \u2502 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 | 0 \u2502 2 \u2502 shape [ 0 ] \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 len ( A ) \u2192 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 ( = 2 ) \u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502 ( = 2 ) | 6 \u2502 8 \u2502 \u2502 \u2502 6 \u2502 \u2502 8 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2518 \u5c55\u5f00\u7684item layout \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 5 \u2502 6 \u2502 7 \u2502 8 \u2502 \u2192 \u2502 0 \u2502 2 \u2502 6 \u2502 8 \u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u252c\u2500\u2518 \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A.size (=4) \u5185\u5b58\u5e03\u5c40(C\u987a\u5e8f\uff0c\u5927\u7aef\u5e8f) \u250c \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2510 \u2510 \u250c\u2500\u2524 p + 00 : \u2502 00000000 \u2502 00000000 \u2502 \u2502 \u2502 \u2502 \u2514 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 strides [ 1 ] \u2502 \u250c\u2500\u2524 p + 02 : \u2502 \u2502 \u2502 \u2502 ( = 4 ) \u2502 \u2502 \u2502 \u250c \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2518 \u2502 \u2502 \u2514\u2500\u2524 p + 04 \u2502 00000000 \u2502 00000010 \u2502 \u2502 \u2502 \u2514 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 strides [ 0 ] \u2502 p + 06 : \u2502 \u2502 \u2502 \u2502 ( = 12 ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 A . nbytes \u2500\u2524 p + 08 : \u2502 \u2502 \u2502 \u2502 ( = 8 ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 p + 10 : \u2502 \u2502 \u2502 \u2502 \u2502 \u250c \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2518 \u2502 \u250c\u2500\u2524 p + 12 : \u2502 00000000 \u2502 00000110 \u2502 \u2502 \u2502 \u2514 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2514\u2500\u2524 p + 14 : \u2502 \u2502 \u2502 \u2502 \u250c \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2514\u2500\u2524 p + 16 : \u2502 00000000 \u2502 00001000 \u2502 \u2514 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A . itemsize A . dtype . itemsize ( = 2 ) \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 ndarray \u5bf9\u8c61\u7684 strides \u5c5e\u6027\uff0c\u6539\u53d8 ndarray \u7684\u5185\u5b58\u5e03\u5c40\uff0c\u4f46\u6b64\u65f6\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\u3002 A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) A . strides = ( 2 , 4 ) pprint . pprint ( A ) array([[0, 2, 4], [1, 3, 5], [2, 4, 6]], dtype=int16)","title":"\u5185\u5b58\u5e03\u5c40"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#_2","text":"\u89c6\u56fe\u548c\u526f\u672c\u662f\u4f18\u5316\u6570\u503c\u8ba1\u7b97\u7684\u91cd\u8981\u6982\u5ff5\u3002 \u5728numpy\u4e2d\uff0c\u53ef\u4ee5\u7528\u5207\u7247\u548c \u82b1\u5f0f\u7d22\u5f15 \uff08\u6574\u6570\u6570\u7ec4\u7d22\u5f15\uff09\u6765\u7d22\u5f15\u6570\u636e\u3002\u5207\u7247\u5c06\u59cb\u7ec8\u8fd4\u56de\u89c6\u56fe\uff0c\u800c\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u5c06\u8fd4\u56de\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u5207\u7247\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u89c6\u56fe\u4f1a\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u800c\u5728\u6574\u6570\u6570\u7ec4\u7d22\u5f15\u60c5\u51b5\u4e0b\u5219\u4e0d\u662f\u8fd9\u6837\uff1a Z = np . zeros ( 9 ) Z_view = Z [: 3 ] Z_view [ ... ] = 1 print ( Z ) [1. 1. 1. 0. 0. 0. 0. 0. 0.] Z = np . zeros ( 9 ) Z_copy = Z [[ 0 , 1 , 2 ]] Z_copy [ ... ] = 1 print ( Z ) [0. 0. 0. 0. 0. 0. 0. 0. 0.] \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u9700\u8981\u53cd\u590d\u7528\u5230\u67d0\u4e2a\u82b1\u5f0f\u7d22\u5f15\uff0c\u6700\u597d\u4fdd\u7559\u5b83\u7684\u526f\u672c\uff08\u7279\u522b\u662f\u5982\u679c\u8ba1\u7b97\u5b83\u5f88\u590d\u6742\uff09\u3002\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u7d22\u5f15\u7684\u7ed3\u679c\u662f\u89c6\u56fe\u8fd8\u662f\u526f\u672c\uff0c\u5219\u53ef\u4ee5\u68c0\u67e5base\u7684\u7ed3\u679c\u3002\u5982\u679c\u662fNone\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f\u526f\u672c\uff1a Z = np . random . uniform ( 0 , 1 ,( 5 , 5 )) Z1 = Z [: 3 ,:] Z2 = Z [[ 0 , 1 , 2 ], :] print ( np . allclose ( Z1 , Z2 )) True print ( Z1 . base is Z ) True print ( Z2 . base is Z ) False print ( Z2 . base is None ) True \u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9bnumpy\u51fd\u6570\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u89c6\u56fe(\u4f8b\u5982\uff0c ravel )\uff0c\u800c\u53e6\u4e00\u4e9b\u51fd\u6570\u603b\u662f\u8fd4\u56de\u526f\u672c(\u4f8b\u5982\uff0c flatten ): Z = np . zeros (( 5 , 5 )) print ( Z . ravel () . base is Z ) True print ( Z [:: 2 ,:: 2 ] . ravel () . base is Z ) False print ( Z . flatten () . base is Z ) False \u53ef\u4ee5\u901a\u8fc7 ndarray.view() \u65b9\u6cd5\uff0c\u4ece\u540c\u4e00\u5757\u5185\u5b58\u533a\uff08\u50a8\u5b58\u7740numpy\u6570\u7ec4\u7684\u5185\u5b58\u533a\uff09\u521b\u5efa\u4e0d\u540c\u7684dtype\u6570\u7ec4\u3002\u5373\u7528\u4e0d\u540c\u7684\u6570\u503c\u7c7b\u578b\u67e5\u770b\u540c\u4e00\u6bb5\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5b83\u4eec\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5757\u5185\u5b58\u3002 \u5b9e\u9645\u4e0a\uff0c ndarray.view() \u65b9\u6cd5\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u89c6\u56fe\u3002 A = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ],[ 6 , 7 , 8 ]]) A_view = A . view ( np . int32 ) # A_view \u662f\u89c6\u56fe A_view . flags C_CONTIGUOUS : True F_CONTIGUOUS : False OWNDATA : False WRITEABLE : True ALIGNED : True WRITEBACKIFCOPY : False UPDATEIFCOPY : False \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u7684 dtype \uff0c\u4f1a\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c \u4f46\u6b64\u65f6\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u3002 A . dtype = np . float32 Caution \u901a\u5e38\u5e94\u907f\u514d\u6539\u53d8\u7531\u5207\u7247\u3001transposes\u3001fortran\u6392\u5e8f\u7b49\u5b9a\u4e49\u7684\u6570\u7ec4\u7684 dtype \u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u5982\u4e0b\uff1a A = copy . deepcopy ( np . arange ( 9 , dtype = np . int16 ) . reshape ( 3 , 3 )) try : A_view = A . view ( np . int32 ) except ValueError as e : print ( \"ValueError:\" , e ) ValueError : When changing to a larger dtype , its size must be a divisor of the total size in bytes of the last axis of the array .","title":"\u89c6\u56fe\u548c\u526f\u672c"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.3.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html#ndarray_1","text":"\u8bb0\u4e0d\u4f4f\u8fd9\u4e9bNumPy\u7684dtype\u4e5f\u6ca1\u5173\u7cfb\uff0c\u65b0\u624b\u66f4\u662f\u5982\u6b64\u3002\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u4f60\u6240\u5904\u7406\u7684\u6570\u636e\u7684\u5927\u81f4\u7c7b\u578b\u662f\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u4e32\uff0c\u8fd8\u662f\u666e\u901a\u7684Python\u5bf9\u8c61\u5373\u53ef\u3002\u5f53\u4f60\u9700\u8981\u63a7\u5236\u6570\u636e\u5728\u5185\u5b58\u548c\u78c1\u76d8\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u65f6\uff08\u5c24\u5176\u662f\u5bf9\u5927\u6570\u636e\u96c6\uff09\uff0c\u90a3\u5c31\u5f97\u4e86\u89e3\u5982\u4f55\u63a7\u5236\u5b58\u50a8\u7c7b\u578b\u3002 \u7c7b\u578b \u7c7b\u578b\u4ee3\u7801 \u8bf4\u660e int8\u3001 uint8 i1\u3001u1 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u76848\u4f4d\uff081\u4e2a\u5b57\u8282\uff09\u6574\u578b int16\u3001uint16 i2\u3001u2 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768416\u4f4d\uff082\u4e2a\u5b57\u8282\uff09\u6574\u578b int32\u3001uint32 i4\u3001u4 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768432\u4f4d\uff084\u4e2a\u5b57\u8282\uff09\u6574\u578b int64\u3001uint64 i8\u3001u8 \u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u768464\u4f4d\uff088\u4e2a\u5b57\u8282\uff09\u6574\u578b float16 f2 \u534a\u7cbe\u5ea6\u6d6e\u70b9\u6570 float32 f4\u6216f \u6807\u51c6\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684float\u517c\u5bb9 float64 f8\u6216d \u6807\u51c6\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u4e0eC\u7684double\u548cPython \u7684float\u5bf9\u8c61\u517c\u5bb9 float128 f16 \u6216 g \u6269\u5c55\u7cbe\u5ea6\u6d6e\u70b9\u6570 complex64\u3001complex128\u3001 c8\u3001 c16\u3001 \u5206\u522b\u7528\u4e24\u4e2a32\u4f4d\u300164\u4f4d\u6216128\u4f4d\u6d6e\u70b9\u6570\u8868\u793a\u7684 complex256 c32 \u590d\u6570 bool ? \u5b58\u50a8True\u548cFalse\u503c\u7684\u5e03\u5c14\u7c7b\u578b object O Python\u5bf9\u8c61\u7c7b\u578b string_ S \u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff08\u6bcf\u4e2a\u5b57\u7b261\u4e2a\u5b57\u8282\uff09\u3002 \u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5b57\u7b26\u4e32\uff0c\u5e94\u4f7f\u7528 S10 unicode_ U \u56fa\u5b9a\u957f\u5ea6\u7684Unicode\u7c7b\u578b\uff08\u5b57\u8282\u6570\u7531\u5e73\u53f0\u51b3\u5b9a\uff09\u3002 \u8ddf\u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u65b9\u5f0f\u4e00\u6837\uff08\u5982U10) \u4f8b\u5916\uff1aNumpy\u7684\u7ed3\u6784\u6570\u7ec4\u7684\u5143\u7d20\u53ef\u4ee5\u4e0d\u540c\u8d28\u3002 \u21a9","title":"ndarray \u6570\u636e\u7c7b\u578b"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.4.%E5%B9%BF%E6%92%AD.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 \u5e7f\u64ad\u89c4\u5219 \u5f53\u4f7f\u7528ufunc\u51fd\u6570\u5bf9\u4e24\u4e2a\u6570\u7ec4\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0cufunc\u51fd\u6570\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u8981\u6c42\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u4e0d\u540c\uff0c\u5c31\u901a\u8fc7\u5e7f\u64adbroadcasting\u8fdb\u884c\u5904\u7406\uff1a \u9996\u5148\u8ba9\u6240\u6709\u8f93\u5165\u6570\u7ec4\u90fd\u5411\u5176\u4e2d\u7ef4\u5ea6\u6700\u9ad8\u7684\u6570\u7ec4\u770b\u9f50\u3002 \u770b\u9f50\u65b9\u5f0f\u4e3a\uff1a\u5728shape\u5c5e\u6027\u7684\u5de6\u4fa7\u63d2\u5165\u6570\u5b571 \u6700\u540e\u8f93\u51fa\u6570\u7ec4\u7684shape\u5c5e\u6027\u662f\u8f93\u5165\u6570\u7ec4\u7684shape\u5c5e\u6027\u7684\u5404\u8f74\u4e0a\u7684\u6700\u5927\u503c \u5982\u679c\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\uff0c\u6216\u8005\u4e0e\u8f93\u51fa\u6570\u7ec4\u7684\u5404\u5bf9\u5e94\u8f74\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u8be5\u6570\u7ec4\u80fd\u6b63\u786e\u5e7f\u64ad\u3002\u5426\u5219\u8ba1\u7b97\u51fa\u9519 \u5f53\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\u65f6\uff0c\u6cbf\u7740\u6b64\u8f74\u8fd0\u7b97\u65f6\u90fd\u7528\u6b64\u8f74\u4e0a\u7684\u7b2c\u4e00\u7ec4\u503c\u3002 \u5e7f\u64ad\u89c4\u5219\u793a\u610f\u56fe The code to produce the figures is part of the AstroML book \u4e0e\u5e7f\u64ad\u76f8\u5173\u7684\u51fd\u6570 ny.broadcast_arrays() \uff1a\u67e5\u770b\u5e7f\u64ad\u4e4b\u540e\u7684\u6570\u7ec4 \u3002 np.broadcast_to(array, shape, subok=False) \uff1a\u5c06array\u5e7f\u64ad\u4e3a\u6307\u5b9a\u7684shape\uff0c\u5982\u679c\u6307\u5b9a\u7684shape\u4e0d\u6ee1\u8db3\u5e7f\u64ad\u8981\u6c42\uff0c\u5219\u62a5\u9519\u3002 ndarray.repeat(repeats, axis=None) \uff1a\u91cd\u590d\u67d0\u4e2a\u8f74\u4e0a\u7684\u503c\u3002repeats\u4e3a\u91cd\u590d\u6b21\u6570\u3002axis\u6307\u5b9a\u88ab\u91cd\u590d\u7684\u8f74\uff0c\u5373\u6cbf\u7740\u54ea\u4e00\u8f74\u91cd\u590d\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u6570\u7ec4\u5c55\u5e73\u7136\u540e\u91cd\u590d\u3002\u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u5c55\u5e73\u7684\u6570\u7ec4 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = np . arange ( 5 ) c = b [:, None ] d = np . ones (( 5 , 3 )) a = [[ 0 1 ] b = [ 0 1 2 3 4 ] [ 2 3 ] [ 4 5 ] [ 6 7 ] [ 8 9 ]] c = [[ 0 ] d = [[ 1 . 1 . 1 .] [ 1 ] [ 1 . 1 . 1 .] [ 2 ] [ 1 . 1 . 1 .] [ 3 ] [ 1 . 1 . 1 .] [ 4 ]] [ 1 . 1 . 1 .]] np . broadcast_arrays ( d , c ) [array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]), array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])] np . broadcast_to ( b [:, None ], ( 5 , 2 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) a . repeat ( 3 , axis = 1 ) array([[0, 0, 0, 1, 1, 1], [2, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5, 5], [6, 6, 6, 7, 7, 7], [8, 8, 8, 9, 9, 9]])","title":"6.4.\u5e7f\u64ad"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.4.%E5%B9%BF%E6%92%AD.html#_1","text":"\u5f53\u4f7f\u7528ufunc\u51fd\u6570\u5bf9\u4e24\u4e2a\u6570\u7ec4\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0cufunc\u51fd\u6570\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u8981\u6c42\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5f62\u72b6\u4e0d\u540c\uff0c\u5c31\u901a\u8fc7\u5e7f\u64adbroadcasting\u8fdb\u884c\u5904\u7406\uff1a \u9996\u5148\u8ba9\u6240\u6709\u8f93\u5165\u6570\u7ec4\u90fd\u5411\u5176\u4e2d\u7ef4\u5ea6\u6700\u9ad8\u7684\u6570\u7ec4\u770b\u9f50\u3002 \u770b\u9f50\u65b9\u5f0f\u4e3a\uff1a\u5728shape\u5c5e\u6027\u7684\u5de6\u4fa7\u63d2\u5165\u6570\u5b571 \u6700\u540e\u8f93\u51fa\u6570\u7ec4\u7684shape\u5c5e\u6027\u662f\u8f93\u5165\u6570\u7ec4\u7684shape\u5c5e\u6027\u7684\u5404\u8f74\u4e0a\u7684\u6700\u5927\u503c \u5982\u679c\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\uff0c\u6216\u8005\u4e0e\u8f93\u51fa\u6570\u7ec4\u7684\u5404\u5bf9\u5e94\u8f74\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u8be5\u6570\u7ec4\u80fd\u6b63\u786e\u5e7f\u64ad\u3002\u5426\u5219\u8ba1\u7b97\u51fa\u9519 \u5f53\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a 1\u65f6\uff0c\u6cbf\u7740\u6b64\u8f74\u8fd0\u7b97\u65f6\u90fd\u7528\u6b64\u8f74\u4e0a\u7684\u7b2c\u4e00\u7ec4\u503c\u3002","title":"\u5e7f\u64ad\u89c4\u5219"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.4.%E5%B9%BF%E6%92%AD.html#_2","text":"The code to produce the figures is part of the AstroML book","title":"\u5e7f\u64ad\u89c4\u5219\u793a\u610f\u56fe"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.4.%E5%B9%BF%E6%92%AD.html#_3","text":"ny.broadcast_arrays() \uff1a\u67e5\u770b\u5e7f\u64ad\u4e4b\u540e\u7684\u6570\u7ec4 \u3002 np.broadcast_to(array, shape, subok=False) \uff1a\u5c06array\u5e7f\u64ad\u4e3a\u6307\u5b9a\u7684shape\uff0c\u5982\u679c\u6307\u5b9a\u7684shape\u4e0d\u6ee1\u8db3\u5e7f\u64ad\u8981\u6c42\uff0c\u5219\u62a5\u9519\u3002 ndarray.repeat(repeats, axis=None) \uff1a\u91cd\u590d\u67d0\u4e2a\u8f74\u4e0a\u7684\u503c\u3002repeats\u4e3a\u91cd\u590d\u6b21\u6570\u3002axis\u6307\u5b9a\u88ab\u91cd\u590d\u7684\u8f74\uff0c\u5373\u6cbf\u7740\u54ea\u4e00\u8f74\u91cd\u590d\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u6570\u7ec4\u5c55\u5e73\u7136\u540e\u91cd\u590d\u3002\u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u5c55\u5e73\u7684\u6570\u7ec4 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = np . arange ( 5 ) c = b [:, None ] d = np . ones (( 5 , 3 )) a = [[ 0 1 ] b = [ 0 1 2 3 4 ] [ 2 3 ] [ 4 5 ] [ 6 7 ] [ 8 9 ]] c = [[ 0 ] d = [[ 1 . 1 . 1 .] [ 1 ] [ 1 . 1 . 1 .] [ 2 ] [ 1 . 1 . 1 .] [ 3 ] [ 1 . 1 . 1 .] [ 4 ]] [ 1 . 1 . 1 .]] np . broadcast_arrays ( d , c ) [array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]), array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])] np . broadcast_to ( b [:, None ], ( 5 , 2 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) a . repeat ( 3 , axis = 1 ) array([[0, 0, 0, 1, 1, 1], [2, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5, 5], [6, 6, 6, 7, 7, 7], [8, 8, 8, 9, 9, 9]])","title":"\u4e0e\u5e7f\u64ad\u76f8\u5173\u7684\u51fd\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.5.%E5%B8%B8%E9%87%8F.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 NumPy\u5b9a\u4e49\u4e86\u51e0\u4e2a\u5e38\u91cf\uff08\u90fd\u662fIEEE 754 \u6d6e\u70b9\u8868\u793a\uff09\uff1a \uff08\u6b63\uff09\u65e0\u7a77\u5927 # \u4f7f\u7528`inf`\u662f\u56e0\u4e3a`Inf`\u3001`Infinity`\u3001`PINF`\u548c`infty`\u662f`inf`\u7684\u522b\u540d\u3002 np . inf np . Infinity np . PINF np . Inf np . infty inf \u8d1f\u65e0\u7a77\u5927 np . NINF -inf \u975e\u6570\u5b57 NaN # `NaN`\u548c`NAN`\u662f`nan`\u7684\u7b49\u4ef7\u5b9a\u4e49\u3002\u8bf7\u4f7f\u7528`nan\u800c\u4e0d\u662f`NAN`\u3002 np . nan np . NAN np . NaN nan \u8d1f\u96f6 np . NZERO -0.0 \u6b63\u96f6 np . PZERO 0.0 \u81ea\u7136\u5bf9\u6570\u7684\u57fa\u7840\uff0c\u7eb3\u76ae\u5c14\u7684\u5e38\u6570 np . e 2.718281828459045 \u6b27\u62c9\u5e38\u6570 \u03b3 = 0.5772156649015328606065120900824024310421... \u53c2\u8003 np . euler_gamma 0.5772156649015329 None\u7684\u4fbf\u6377\u522b\u540d \u7ed9\u6570\u7ec4\u589e\u52a0\u8f74\uff0c\u6216\u7d22\u5f15\u6570\u7ec4\u65f6\u4f7f\u7528\u3002 np . newaxis \u5706\u5468\u7387 np . pi 3.141592653589793","title":"6.5.\u5e38\u91cf"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.6.%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 numpy version: 1.18.1 \u6570\u7ec4\u6253\u5370\u7684\u89c4\u5219 \u5f53\u6253\u5370ndarray\u65f6\uff0cnumpy\u6309\u7167Python\u7684\u5d4c\u5957list\u7684\u683c\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u4f46\u662f\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6253\u5370\uff1a \u6700\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8f93\u51fa \u6b21\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa \u5176\u4ed6\u5c42\u7684axis\u4e5f\u662f\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u662f\u6bcf\u4e2aslice\u4e2d\u95f4\u95f4\u9694\u4e00\u6761\u7a7a\u884c \u5982\uff1a \u4e00\u7ef4\u7684ndarray\u6309\u884c\u6253\u5370\uff1b\u4e8c\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u6253\u5370\uff1b\u4e09\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u7684list\u6253\u5370 \u5982\u679cndarray\u592a\u5927\uff0c\u90a3\u4e48numpy\u9ed8\u8ba4\u8df3\u8fc7\u4e2d\u95f4\u90e8\u5206\u7684\u6570\u636e\u800c\u53ea\u662f\u8f93\u51fa\u56db\u4e2a\u89d2\u843d\u7684\u6570\u636e\u3002 \u8981\u60f3\u4efb\u4f55\u65f6\u5019\u90fd\u6253\u5370\u5168\u90e8\u6570\u636e\uff0c\u53ef\u4ee5\u5728print(array)\u4e4b\u524d\u8bbe\u7f6e\u9009\u9879 np . set_printoptions ( threshold = None ) \u8fd9\u6837\u540e\u7eed\u7684\u6253\u5370ndarray\u5c31\u4e0d\u4f1a\u7701\u7565\u4e2d\u95f4\u6570\u636e\u3002 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array([ 0, 1, 2, ..., 197, 198, 199])","title":"6.6.\u6253\u5370\u6570\u7ec4"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.6.%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84.html#_1","text":"\u5f53\u6253\u5370ndarray\u65f6\uff0cnumpy\u6309\u7167Python\u7684\u5d4c\u5957list\u7684\u683c\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u4f46\u662f\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6253\u5370\uff1a \u6700\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8f93\u51fa \u6b21\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa \u5176\u4ed6\u5c42\u7684axis\u4e5f\u662f\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u662f\u6bcf\u4e2aslice\u4e2d\u95f4\u95f4\u9694\u4e00\u6761\u7a7a\u884c \u5982\uff1a \u4e00\u7ef4\u7684ndarray\u6309\u884c\u6253\u5370\uff1b\u4e8c\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u6253\u5370\uff1b\u4e09\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u7684list\u6253\u5370 \u5982\u679cndarray\u592a\u5927\uff0c\u90a3\u4e48numpy\u9ed8\u8ba4\u8df3\u8fc7\u4e2d\u95f4\u90e8\u5206\u7684\u6570\u636e\u800c\u53ea\u662f\u8f93\u51fa\u56db\u4e2a\u89d2\u843d\u7684\u6570\u636e\u3002 \u8981\u60f3\u4efb\u4f55\u65f6\u5019\u90fd\u6253\u5370\u5168\u90e8\u6570\u636e\uff0c\u53ef\u4ee5\u5728print(array)\u4e4b\u524d\u8bbe\u7f6e\u9009\u9879 np . set_printoptions ( threshold = None ) \u8fd9\u6837\u540e\u7eed\u7684\u6253\u5370ndarray\u5c31\u4e0d\u4f1a\u7701\u7565\u4e2d\u95f4\u6570\u636e\u3002 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array([ 0, 1, 2, ..., 197, 198, 199])","title":"\u6570\u7ec4\u6253\u5370\u7684\u89c4\u5219"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.7.%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4.html","text":"import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 \u6dfb\u52a0\u548c\u5220\u9664\u6570\u7ec4\u5143\u7d20 \u65b9\u6cd5 \u63cf\u8ff0 delete (arr, obj[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5220\u9664\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u7ec4 insert (arr, obj, values[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5728\u6307\u5b9a\u7d22\u5f15\u4e4b\u524d\u63d2\u5165\u503c append (arr, values[, axis]) \u5c06\u503c\u9644\u52a0\u5230\u6570\u7ec4\u7684\u672b\u5c3e trim_zeros s(filt[, trim]) \u4fee\u526a\u4e00\u7ef4\u6570\u7ec4\u6216\u5e8f\u5217\u4e2d\u7684\u524d\u5bfc\u3001\u5c3e\u968f\u7684\u96f6 unique (ar[, return_index, return_inverse, \u2026]) \u8fd4\u56de\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 # append a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . append ( a , [[ 1 , 2 ],[ 3 , 4 ]], axis = 0 ) array([[0, 1], [2, 3], [1, 2], [3, 4]]) # insert a = np . arange ( 4 ) . reshape (( 2 , 2 )) # obj \u662f\u7d22\u5f15 np . insert ( a , obj = 1 , values = [ 10 , 11 ], axis = 0 ) array([[ 0, 1], [10, 11], [ 2, 3]]) # delete \u5220\u9664\u6307\u5b9a\u6570\u636e\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u636e a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . delete ( a , 1 , axis = 0 ) array([[0, 1]]) # \u9ed8\u8ba4\u8fd4\u56de\u4e00\u7ef4\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = None ) array([1, 2, 3]) # \u8bbe\u7f6eaxis\u53c2\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = 0 ) array([[1, 2], [2, 3]]) # \u540c\u65f6\u8fd4\u56deunique\u6570\u7ec4\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = True , return_inverse = False , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 2], dtype=int64)) # \u540c\u65f6\u8fd4\u56de\u539f\u6570\u7ec4\u5143\u7d20\u5728unique\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index # \u53ef\u7528\u4e8e\u91cd\u5efa\u539f\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = True , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 0, 1], dtype=int64)) # \u540c\u65f6\u8fd4\u56de \u8ba1\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = True , axis = 0 ) (array([[1, 2], [2, 3]]), array([2, 1], dtype=int64)) a = np . array ([ 0 , 0 , 1 , 2 , 3 , 0 , 0 ]) # \u5220\u9664\u4e00\u7ef4\u6570\u7ec4\u5f00\u5934\u548c\u7ed3\u5c3e\u76840\u5143\u7d20 # trim='f' \u4ece\u524d\u9762\u88c1\u526a # trim='b' \u4ece\u540e\u9762\u88c1\u526a # \u9ed8\u8ba4\u4e3a trim='fb' np . trim_zeros ( a , trim = 'fb' ) array([1, 2, 3])","title":"6.7.\u6dfb\u52a0\u548c\u5220\u9664"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.7.%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4.html#_1","text":"\u65b9\u6cd5 \u63cf\u8ff0 delete (arr, obj[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5220\u9664\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u7ec4 insert (arr, obj, values[, axis]) \u6cbf\u6307\u5b9a\u8f74\u5728\u6307\u5b9a\u7d22\u5f15\u4e4b\u524d\u63d2\u5165\u503c append (arr, values[, axis]) \u5c06\u503c\u9644\u52a0\u5230\u6570\u7ec4\u7684\u672b\u5c3e trim_zeros s(filt[, trim]) \u4fee\u526a\u4e00\u7ef4\u6570\u7ec4\u6216\u5e8f\u5217\u4e2d\u7684\u524d\u5bfc\u3001\u5c3e\u968f\u7684\u96f6 unique (ar[, return_index, return_inverse, \u2026]) \u8fd4\u56de\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 # append a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . append ( a , [[ 1 , 2 ],[ 3 , 4 ]], axis = 0 ) array([[0, 1], [2, 3], [1, 2], [3, 4]]) # insert a = np . arange ( 4 ) . reshape (( 2 , 2 )) # obj \u662f\u7d22\u5f15 np . insert ( a , obj = 1 , values = [ 10 , 11 ], axis = 0 ) array([[ 0, 1], [10, 11], [ 2, 3]]) # delete \u5220\u9664\u6307\u5b9a\u6570\u636e\uff0c\u8fd4\u56de\u672a\u5220\u9664\u7684\u6570\u636e a = np . arange ( 4 ) . reshape (( 2 , 2 )) np . delete ( a , 1 , axis = 0 ) array([[0, 1]]) # \u9ed8\u8ba4\u8fd4\u56de\u4e00\u7ef4\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = None ) array([1, 2, 3]) # \u8bbe\u7f6eaxis\u53c2\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = False , axis = 0 ) array([[1, 2], [2, 3]]) # \u540c\u65f6\u8fd4\u56deunique\u6570\u7ec4\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = True , return_inverse = False , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 2], dtype=int64)) # \u540c\u65f6\u8fd4\u56de\u539f\u6570\u7ec4\u5143\u7d20\u5728unique\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15index # \u53ef\u7528\u4e8e\u91cd\u5efa\u539f\u6570\u7ec4 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = True , return_counts = False , axis = 0 ) (array([[1, 2], [2, 3]]), array([0, 0, 1], dtype=int64)) # \u540c\u65f6\u8fd4\u56de \u8ba1\u6570 a = np . array ([[ 1 , 2 ],[ 1 , 2 ],[ 2 , 3 ]]) np . unique ( a , return_index = False , return_inverse = False , return_counts = True , axis = 0 ) (array([[1, 2], [2, 3]]), array([2, 1], dtype=int64)) a = np . array ([ 0 , 0 , 1 , 2 , 3 , 0 , 0 ]) # \u5220\u9664\u4e00\u7ef4\u6570\u7ec4\u5f00\u5934\u548c\u7ed3\u5c3e\u76840\u5143\u7d20 # trim='f' \u4ece\u524d\u9762\u88c1\u526a # trim='b' \u4ece\u540e\u9762\u88c1\u526a # \u9ed8\u8ba4\u4e3a trim='fb' np . trim_zeros ( a , trim = 'fb' ) array([1, 2, 3])","title":"\u6dfb\u52a0\u548c\u5220\u9664\u6570\u7ec4\u5143\u7d20"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html","text":"import numpy as np import copy Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.22 numpy version: 1.18.1 \u5f62\u72b6\u64cd\u4f5c( shape ) .shape .reshape() .resize() reshape resize \u533a\u522b\uff1a reshape\u4e0d\u4f1a\u4fee\u6539\u539f\u6570\u636e,\u8fd4\u56de\u89c6\u56fe resize\u4fee\u6539\u539f\u6570\u636e\uff0c\u8fd4\u56deNone # \u521b\u5efa\u793a\u4f8b\u6570\u636e a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . shape = ( 5 , 10 ) a . flags # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . shape = ( 25 , - 1 ) # \u4e0d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . reshape ( 5 , 10 ) # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . reshape ( 5 , - 1 ) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . resize (( 25 , 2 )) \u5f62\u72b6\u64cd\u4f5c( ndim ) .flatten() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .reval() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .squeeze() \uff1a\u5c06\u5927\u5c0f\u7b49\u4e8e1\u7684\u8f74\u5220\u9664 .swapaxes(a, axis1, axis2)) \uff1a\u4ea4\u6362\u6307\u5b9a\u7684\u4e24\u4e2a\u8f74axis1/axis2\u3002\u5b83\u83b7\u5f97\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .transpose(a, axes=None) \uff1a\u91cd\u7f6e\u8f74\u5e8f\u3002\u5982\u679c axes=None \uff0c\u5219\u9ed8\u8ba4\u91cd\u7f6e\u4e3a\u9006\u5e8f\u7684\u8f74\u5e8f\uff0c\u5982\u539f\u6765\u7684 shape=(1,2,3) \uff0c\u9006\u5e8f\u4e4b\u540e\u4e3a (3,2,1\uff09 \u5982\u679c axes!=None \uff0c\u5219\u8981\u7ed9\u51fa\u91cd\u7f6e\u540e\u7684\u8f74\u5e8f\u3002\u5b83\u83b7\u5f97\u7684\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .atleast_1d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e00\u7ef4\u7684\u6570\u7ec4 .atleast_2d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e8c\u7ef4\u7684\u6570\u7ec4 .atleast_3d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e09\u7ef4\u7684\u6570\u7ec4 .expand_dims() \uff1a\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5927\u5c0f\u4e3a1\u7684\u65b0\u8f74 .moveaxis(a, source, destination) \uff1a\u5c06a\u4e2d\u7684source\u8f74\u79fb\u52a8\u5230\u4f4d\u7f6edestination\uff0csource\u3001destination\u53ef\u4ee5\u662fint of list\uff0c\u4e00\u6b21\u6027\u79fb\u52a8\u591a\u4e2a\u8f74 # \u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 a . flatten () # \u8fd4\u56de\u526f\u672c a . ravel () # \u4e00\u822c\u8fd4\u56de\u89c6\u56fe ## flatten ravel \u533a\u522b ## ravel()\uff1a\u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6e90\u6570\u636e\u7684\u526f\u672c ## flatten()\uff1a\u8fd4\u56de\u6e90\u6570\u636e\u7684\u526f\u672c b = np . arange ( 10 ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # \u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4,\u8fd4\u56de\u526f\u672c b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array([[0], [1], [2], [3], [4], [5]]) b . squeeze ( 1 ) array([ 0, 1, 2, ..., 17, 18, 19]) # \u8fd4\u56de\u6570\u7ec4\u7684\u89c6\u56fe\uff0c\u5176\u4e2daxis1\u548caxis2\u4e92\u6362\u3002 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # \u89c6\u56fe array([[ 0, 2, 4, ..., 14, 16, 18], [ 1, 3, 5, ..., 15, 17, 19]]) # \u8fd4\u56de\u8f74\u8f6c\u7f6e\u7684\u6570\u7ec4\u89c6\u56fe\u3002 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array ([[[ 0 , 20 , 40 ], [ 10 , 30 , 50 ]], [[ 1 , 21 , 41 ], [ 11 , 31 , 51 ]], [[ 2 , 22 , 42 ], [ 12 , 32 , 52 ]], ..., [[ 7 , 27 , 47 ], [ 17 , 37 , 57 ]], [[ 8 , 28 , 48 ], [ 18 , 38 , 58 ]], [[ 9 , 29 , 49 ], [ 19 , 39 , 59 ]]]) # atleast_nd np . atleast_1d ( 1 ) array([1]) np . atleast_2d ([ 1 , 2 , 3 , 4 ]) array([[1, 2, 3, 4]]) np . atleast_3d ([[ 1 , 2 ],[ 3 , 4 ]]) array ([[[ 1 ], [ 2 ]], [[ 3 ], [ 4 ]]]) a = np . arange ( 4 ) . reshape ( 2 , 2 ) np . expand_dims ( a , 1 ) . shape (2, 1, 2) x = np . zeros (( 3 , 4 , 5 )) print ( np . moveaxis ( x , 0 , - 1 ) . shape ) print ( np . moveaxis ( x , - 1 , 0 ) . shape ) (4, 5, 3) (5, 3, 4) \"\u4ee5\u4e0b\u4ee3\u7801\u7684\u6548\u679c\u4e00\u6837\" x = np . zeros (( 3 , 4 , 5 )) np . transpose ( x ) . shape np . swapaxes ( x , 0 , - 1 ) . shape np . moveaxis ( x , [ 0 , 2 ], [ - 1 , - 2 ]) . shape np . moveaxis ( x , [ 0 , 1 , 2 ], [ - 1 , - 2 , - 3 ]) . shape \u6570\u7ec4\u62fc\u63a5 .concatenate((a1, a2, ...), axis=0) \uff1a\u8fde\u63a5\u591a\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d (a1,a2,...) \u4e3a\u6570\u7ec4\u7684\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u5f85\u8fde\u63a5\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u6cbf\u7740 axis \u6307\u5b9a\u7684\u5df2\u5b58\u5728\u7684\u8f74\u8fde\u63a5\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u6570\u7ec4\u7684\u5f62\u72b6\uff0c\u9664\u4e86 axis \u8f74\u4e4b\u5916\u90fd\u76f8\u540c\u3002 .vstack(tup) \uff1a\u6cbf0\u8f74\u62fc\u63a5\uff08\u5782\u76f4\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u884c\u3002 .hstack(tup) \uff1a\u6cbf1\u8f74\u62fc\u63a5\uff08\u6c34\u5e73\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u5217\u3002 .dstack(tup) \uff1a numpy.concatenate((a1, a2, ...), axis=3) \u3002\u6cbf\u77403\u8f74\u5806\u53e0\u6570\u7ec4\u3002 .column_stack(tup) \uff1a\u7c7b\u4f3c\u4e8e hstack \uff0c\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002 .c_ \uff1a .c_ \u5bf9\u8c61\u7684 [] \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6309\u5217\u8fde\u63a5\u6570\u7ec4\u3002\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002\u6cbf\u5217\u65b9\u5411\u62fc\u63a5\uff0c\u589e\u52a0\u5217\u3002 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # \u6a2a\u5411\u62fc\u63a5\u3001\u62fc\u63a5 1 \u8f74\uff08\u7b2c\u4e8c\u4e2a\u8f74\uff0c\u5373\u5217\uff09 np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array([[0, 1, 0, 1], [2, 3, 2, 3], [4, 5, 4, 5], [6, 7, 6, 7], [8, 9, 8, 9]]) # column_stack hstack np.c_\u533a\u522b a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) np . hstack (( a1 , a1 )) array([0, 1, 2, ..., 2, 3, 4]) np . c_ [ a1 , a1 ] array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) \u6570\u7ec4\u62c6\u5206 1. .split(ary, indices_or_sections, axis=0) \uff1a\u7528\u4e8e\u6cbf\u7740\u6307\u5b9a\u7684\u8f74\u62c6\u5206\u6570\u7ec4ary\u3002indices_or_sections\u6307\u5b9a\u4e86\u62c6\u5206\u70b9\uff1a \u5982\u679c\u4e3a\u6574\u6570N\uff0c\u5219\u8868\u793a\u5e73\u5747\u62c6\u5206\u6210N\u4efd\u3002\u5982\u679c\u4e0d\u80fd\u5e73\u5747\u62c6\u5206\uff0c\u5219\u62a5\u9519 \u5982\u679c\u4e3a\u5e8f\u5217\uff0c\u5219\u8be5\u5e8f\u5217\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\uff08\u65e0\u9700\u6307\u5b9a\u6700\u5f00\u59cb\u76840\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\u5982 [1,3] \u6307\u5b9a\u4e86\u533a\u95f4\uff1a [0,1],[1,3],[3:] 2. .array_split(ary, indices_or_sections, axis=0) \uff1a\u4f5c\u7528\u4e0e .split() \u7c7b\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff1a\u5f53indices_or_sections\u4e3a\u6574\u6570\uff0c\u4e14\u65e0\u6cd5\u5e73\u5747\u62c6\u5206\u65f6\uff0c\u5e76\u4e0d\u62a5\u9519\uff0c\u800c\u662f\u5c3d\u53ef\u80fd\u7684\u7ef4\u6301\u5e73\u5747\u62c6\u5206\u3002 3. .dsplit(ary, indices_or_sections) \uff1a\u6cbf\u7b2c3\u8f74\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 4. .hsplit(ary, indices_or_sections) \uff1a\u6c34\u5e73\uff08\u6309\u5217\uff09\u5c06\u4e00\u4e2a\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 5. .vsplit(ary, indices_or_sections) \uff1a\u5782\u76f4\uff08\u884c\uff09\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]), array([[25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [array([[ 0], [ 5], [10], ..., [35], [40], [45]]), array([[ 1, 2], [ 6, 7], [11, 12], ..., [36, 37], [41, 42], [46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])] np . array_split ( a , 2 , axis = 1 ) [array([[ 0, 1, 2], [ 5, 6, 7], [10, 11, 12], ..., [35, 36, 37], [40, 41, 42], [45, 46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])]","title":"6.8.\u5f62\u72b6\u64cd\u7eb5"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#shape","text":".shape .reshape() .resize() reshape resize \u533a\u522b\uff1a reshape\u4e0d\u4f1a\u4fee\u6539\u539f\u6570\u636e,\u8fd4\u56de\u89c6\u56fe resize\u4fee\u6539\u539f\u6570\u636e\uff0c\u8fd4\u56deNone # \u521b\u5efa\u793a\u4f8b\u6570\u636e a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . shape = ( 5 , 10 ) a . flags # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . shape = ( 25 , - 1 ) # \u4e0d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . reshape ( 5 , 10 ) # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . reshape ( 5 , - 1 ) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . resize (( 25 , 2 ))","title":"\u5f62\u72b6\u64cd\u4f5c(shape)"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#ndim","text":".flatten() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .reval() \uff1a\u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 .squeeze() \uff1a\u5c06\u5927\u5c0f\u7b49\u4e8e1\u7684\u8f74\u5220\u9664 .swapaxes(a, axis1, axis2)) \uff1a\u4ea4\u6362\u6307\u5b9a\u7684\u4e24\u4e2a\u8f74axis1/axis2\u3002\u5b83\u83b7\u5f97\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .transpose(a, axes=None) \uff1a\u91cd\u7f6e\u8f74\u5e8f\u3002\u5982\u679c axes=None \uff0c\u5219\u9ed8\u8ba4\u91cd\u7f6e\u4e3a\u9006\u5e8f\u7684\u8f74\u5e8f\uff0c\u5982\u539f\u6765\u7684 shape=(1,2,3) \uff0c\u9006\u5e8f\u4e4b\u540e\u4e3a (3,2,1\uff09 \u5982\u679c axes!=None \uff0c\u5219\u8981\u7ed9\u51fa\u91cd\u7f6e\u540e\u7684\u8f74\u5e8f\u3002\u5b83\u83b7\u5f97\u7684\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 .atleast_1d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e00\u7ef4\u7684\u6570\u7ec4 .atleast_2d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e8c\u7ef4\u7684\u6570\u7ec4 .atleast_3d(*arys) \uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u81f3\u5c11\u4e09\u7ef4\u7684\u6570\u7ec4 .expand_dims() \uff1a\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u5927\u5c0f\u4e3a1\u7684\u65b0\u8f74 .moveaxis(a, source, destination) \uff1a\u5c06a\u4e2d\u7684source\u8f74\u79fb\u52a8\u5230\u4f4d\u7f6edestination\uff0csource\u3001destination\u53ef\u4ee5\u662fint of list\uff0c\u4e00\u6b21\u6027\u79fb\u52a8\u591a\u4e2a\u8f74 # \u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 a . flatten () # \u8fd4\u56de\u526f\u672c a . ravel () # \u4e00\u822c\u8fd4\u56de\u89c6\u56fe ## flatten ravel \u533a\u522b ## ravel()\uff1a\u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6e90\u6570\u636e\u7684\u526f\u672c ## flatten()\uff1a\u8fd4\u56de\u6e90\u6570\u636e\u7684\u526f\u672c b = np . arange ( 10 ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # \u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4,\u8fd4\u56de\u526f\u672c b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array([[0], [1], [2], [3], [4], [5]]) b . squeeze ( 1 ) array([ 0, 1, 2, ..., 17, 18, 19]) # \u8fd4\u56de\u6570\u7ec4\u7684\u89c6\u56fe\uff0c\u5176\u4e2daxis1\u548caxis2\u4e92\u6362\u3002 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # \u89c6\u56fe array([[ 0, 2, 4, ..., 14, 16, 18], [ 1, 3, 5, ..., 15, 17, 19]]) # \u8fd4\u56de\u8f74\u8f6c\u7f6e\u7684\u6570\u7ec4\u89c6\u56fe\u3002 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array ([[[ 0 , 20 , 40 ], [ 10 , 30 , 50 ]], [[ 1 , 21 , 41 ], [ 11 , 31 , 51 ]], [[ 2 , 22 , 42 ], [ 12 , 32 , 52 ]], ..., [[ 7 , 27 , 47 ], [ 17 , 37 , 57 ]], [[ 8 , 28 , 48 ], [ 18 , 38 , 58 ]], [[ 9 , 29 , 49 ], [ 19 , 39 , 59 ]]]) # atleast_nd np . atleast_1d ( 1 ) array([1]) np . atleast_2d ([ 1 , 2 , 3 , 4 ]) array([[1, 2, 3, 4]]) np . atleast_3d ([[ 1 , 2 ],[ 3 , 4 ]]) array ([[[ 1 ], [ 2 ]], [[ 3 ], [ 4 ]]]) a = np . arange ( 4 ) . reshape ( 2 , 2 ) np . expand_dims ( a , 1 ) . shape (2, 1, 2) x = np . zeros (( 3 , 4 , 5 )) print ( np . moveaxis ( x , 0 , - 1 ) . shape ) print ( np . moveaxis ( x , - 1 , 0 ) . shape ) (4, 5, 3) (5, 3, 4) \"\u4ee5\u4e0b\u4ee3\u7801\u7684\u6548\u679c\u4e00\u6837\" x = np . zeros (( 3 , 4 , 5 )) np . transpose ( x ) . shape np . swapaxes ( x , 0 , - 1 ) . shape np . moveaxis ( x , [ 0 , 2 ], [ - 1 , - 2 ]) . shape np . moveaxis ( x , [ 0 , 1 , 2 ], [ - 1 , - 2 , - 3 ]) . shape","title":"\u5f62\u72b6\u64cd\u4f5c(ndim)"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#_1","text":".concatenate((a1, a2, ...), axis=0) \uff1a\u8fde\u63a5\u591a\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d (a1,a2,...) \u4e3a\u6570\u7ec4\u7684\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u5f85\u8fde\u63a5\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u6cbf\u7740 axis \u6307\u5b9a\u7684\u5df2\u5b58\u5728\u7684\u8f74\u8fde\u63a5\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u6570\u7ec4\u7684\u5f62\u72b6\uff0c\u9664\u4e86 axis \u8f74\u4e4b\u5916\u90fd\u76f8\u540c\u3002 .vstack(tup) \uff1a\u6cbf0\u8f74\u62fc\u63a5\uff08\u5782\u76f4\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u884c\u3002 .hstack(tup) \uff1a\u6cbf1\u8f74\u62fc\u63a5\uff08\u6c34\u5e73\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u5217\u3002 .dstack(tup) \uff1a numpy.concatenate((a1, a2, ...), axis=3) \u3002\u6cbf\u77403\u8f74\u5806\u53e0\u6570\u7ec4\u3002 .column_stack(tup) \uff1a\u7c7b\u4f3c\u4e8e hstack \uff0c\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002 .c_ \uff1a .c_ \u5bf9\u8c61\u7684 [] \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6309\u5217\u8fde\u63a5\u6570\u7ec4\u3002\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684$(N,1)$\u3002\u6cbf\u5217\u65b9\u5411\u62fc\u63a5\uff0c\u589e\u52a0\u5217\u3002 a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # \u6a2a\u5411\u62fc\u63a5\u3001\u62fc\u63a5 1 \u8f74\uff08\u7b2c\u4e8c\u4e2a\u8f74\uff0c\u5373\u5217\uff09 np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array([[0, 1, 0, 1], [2, 3, 2, 3], [4, 5, 4, 5], [6, 7, 6, 7], [8, 9, 8, 9]]) # column_stack hstack np.c_\u533a\u522b a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) np . hstack (( a1 , a1 )) array([0, 1, 2, ..., 2, 3, 4]) np . c_ [ a1 , a1 ] array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])","title":"\u6570\u7ec4\u62fc\u63a5"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.8.%E5%BD%A2%E7%8A%B6%E6%93%8D%E7%BA%B5.html#_2","text":"1. .split(ary, indices_or_sections, axis=0) \uff1a\u7528\u4e8e\u6cbf\u7740\u6307\u5b9a\u7684\u8f74\u62c6\u5206\u6570\u7ec4ary\u3002indices_or_sections\u6307\u5b9a\u4e86\u62c6\u5206\u70b9\uff1a \u5982\u679c\u4e3a\u6574\u6570N\uff0c\u5219\u8868\u793a\u5e73\u5747\u62c6\u5206\u6210N\u4efd\u3002\u5982\u679c\u4e0d\u80fd\u5e73\u5747\u62c6\u5206\uff0c\u5219\u62a5\u9519 \u5982\u679c\u4e3a\u5e8f\u5217\uff0c\u5219\u8be5\u5e8f\u5217\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\uff08\u65e0\u9700\u6307\u5b9a\u6700\u5f00\u59cb\u76840\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\u5982 [1,3] \u6307\u5b9a\u4e86\u533a\u95f4\uff1a [0,1],[1,3],[3:] 2. .array_split(ary, indices_or_sections, axis=0) \uff1a\u4f5c\u7528\u4e0e .split() \u7c7b\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff1a\u5f53indices_or_sections\u4e3a\u6574\u6570\uff0c\u4e14\u65e0\u6cd5\u5e73\u5747\u62c6\u5206\u65f6\uff0c\u5e76\u4e0d\u62a5\u9519\uff0c\u800c\u662f\u5c3d\u53ef\u80fd\u7684\u7ef4\u6301\u5e73\u5747\u62c6\u5206\u3002 3. .dsplit(ary, indices_or_sections) \uff1a\u6cbf\u7b2c3\u8f74\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 4. .hsplit(ary, indices_or_sections) \uff1a\u6c34\u5e73\uff08\u6309\u5217\uff09\u5c06\u4e00\u4e2a\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 5. .vsplit(ary, indices_or_sections) \uff1a\u5782\u76f4\uff08\u884c\uff09\u5c06\u6570\u7ec4\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u6570\u7ec4\u3002 a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]]), array([[25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [array([[ 0], [ 5], [10], ..., [35], [40], [45]]), array([[ 1, 2], [ 6, 7], [11, 12], ..., [36, 37], [41, 42], [46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])] np . array_split ( a , 2 , axis = 1 ) [array([[ 0, 1, 2], [ 5, 6, 7], [10, 11, 12], ..., [35, 36, 37], [40, 41, 42], [45, 46, 47]]), array([[ 3, 4], [ 8, 9], [13, 14], ..., [38, 39], [43, 44], [48, 49]])]","title":"\u6570\u7ec4\u62c6\u5206"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html","text":"import numpy as np np . set_printoptions ( threshold = 40 ) Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.28 numpy version: 1.18.1 \u901a\u7528\u51fd\u6570\uff08\u5373ufunc\uff09\u662f\u4e00\u79cd\u5bf9ndarray\u4e2d\u7684\u6570\u636e\u6267\u884c\u5143\u7d20\u7ea7\u8fd0\u7b97\u7684\u51fd\u6570\u3002\u53ef\u4ee5\u5c06\u5176\u770b\u505a\u7b80\u5355\u51fd\u6570\uff08\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff09\u7684\u77e2\u91cf\u5316\u5305\u88c5\u5668\u3002 \u4e00\u5143\uff08unary\uff09ufunc\uff1a\u63a5\u53d71\u4e2a\u6570\u7ec4\u7684\u8f93\u5165\u3002 \u4e8c\u5143\uff08binary\uff09ufunc\uff1a\u63a5\u53d72\u4e2a\u6570\u7ec4\u7684\u8f93\u5165\u3002 \u56db\u5219\u8fd0\u7b97 a = np . arange ( 1 , 6 ) b = np . arange ( 5 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a + a a - a a * a # \u5143\u7d20\u76f8\u4e58 a / a b // a # \u53d6\u6574\u9664\u6cd5 b % a # \u53d6\u6a21 # ufunc\u51fd\u6570\u5f62\u5f0f np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) # \u5143\u7d20\u76f8\u4e58 ## \u5728python3 divide\u3001true_divide\u6ca1\u6709\u5dee\u522b np . true_divide ( b , a ) np . divide ( b , a ) ## \u76f8\u5f53\u4e8e\u5148\u8c03\u7528divide\u51fd\u6570 \u518d\u8c03\u7528floor\u51fd\u6570 np . floor_divide ( b , a ) # \u53d6\u6574\u9664\u6cd5 np . mod ( b , a ) # \u5143\u7d20\u7ea7\u6c42\u6a21 array([0, 0, 1, 0, 4], dtype=int32) \u6bd4\u8f83\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a == b a != b a < b a <= b a > b a >= b # ufunc\u51fd\u6570\u5f62\u5f0f np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array([[False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]]) \u903b\u8f91\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u4e0e np . logical_and ( a , b ) # \u6216 np . logical_or ( a , b ) # \u975e np . logical_not ( b ) # \u5f02\u6216 np . logical_xor ( a , b ) # \u4efb\u610f\u4e00\u4e2a\u5143\u7d20 np . any ( a ) # \u5168\u90e8\u5143\u7d20 np . all ( a ) False \u4f4d\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # \u6309\u4f4d\u4e0e np . bitwise_and ( a , b ) # \u6309\u4f4d\u6216 np . bitwise_or ( a , b ) # \u6309\u4f4d\u53d6\u53cd np . bitwise_not ( a ) # \u6309\u4f4d\u5f02\u6216 np . bitwise_xor ( a , b ) array([[10, 10, 14, 14, 10, 10, 22, 22, 26, 26], [30, 30, 26, 26, 22, 22, 10, 10, 14, 14]], dtype=int32) \u81ea\u5b9a\u4e49 ufunc \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7 frompyfunc() \u5c06\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u8f6c\u6362\u6210ufunc\u51fd\u6570\u3002\u8c03\u7528\u683c\u5f0f\u4e3a\u5982\u4e0b\uff1a numpy . frompyfunc ( func , nin , nout ) # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # nin\uff1afunc\u7684\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570 The number of input # nout\uff1afunc\u8fd4\u56de\u503c\u7684\u4e2a\u6570 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array([6, 8, 10, 12, 14], dtype=object) \u4e5f\u53ef\u4ee5\u901a\u8fc7 vectorize() \u51fd\u6570\u6765\u5b9e\u73b0 frompyfunc() \u7684\u529f\u80fd\u3002 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) \u3002 # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # otypes\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7ed3\u679c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\u578b\u5217\u8868\u3002\u5982\u679c\u4f7f\u7528\u7c7b\u578b\u5217\u8868\uff0c\u53ef\u4ee5\u63cf\u8ff0\u591a\u4e2a\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b # doc\uff1a\u51fd\u6570\u7684\u63cf\u8ff0\u5b57\u7b26\u4e32\u3002\u82e5\u672a\u7ed9\u5b9a\uff0c\u5219\u4f7f\u7528func.__doc__ # excluded\uff1a\u6307\u5b9afunc\u4e2d\u54ea\u4e9b\u53c2\u6570\u672a\u88ab\u5411\u91cf\u5316\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u4ee3\u8868\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6574\u6570\u4ee3\u8868\u4f4d\u7f6e\u53c2\u6570\u3002 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"\u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) \u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570 array([1, 2, 3, 4, 5]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num \u4f5c\u4e3a\u4e00\u4e2alist\uff0c\u800c\u4e0d\u662f\u5411\u91cf\u5316\u6210\u4e00\u4e2a\u4e2a\u5143\u7d20 array([11, 13, 15, 17, 19]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) (array([1., 2., 3., 4., 5.]), array([1, 2, 3, 4, 5])) ufunc \u5bf9\u8c61\u7684\u65b9\u6cd5 ufunc\u51fd\u6570\u5bf9\u8c61\u672c\u8eab\u8fd8\u6709\u4e00\u4e9b\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u53ea\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u3001\u4e00\u4e2a\u8f93\u51fa\u7684ufunc\u51fd\u6570\u51fd\u6570\u6709\u6548\u3002\u5bf9\u4e8e\u5176\u4ed6\u7684ufunc\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u4f1a\u629b\u51fa ValueError \u5f02\u5e38\u3002 ufunc.reduce() ufunc.reduce \u65b9\u6cd5\uff1a\u7c7b\u4f3c\u4e8ePython\u7684 reduce \u51fd\u6570\uff0c\u5b83==\u6cbf\u7740== axis \u53c2\u6570\u6307\u5b9a\u7684\u8f74\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u7ecf\u8fc7\u4e00\u6b21reduce\uff0c\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\u964d\u4f4e\u4e00\u7ef4\u3002 \u5047\u8bbe <op> \u662f\u4e00\u4e2aufunc\u51fd\u6570\uff0c ufunc.reduce \u7528\u6cd5\u5982\u4e0b\uff1a < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # \u6cbf\u7740 \u5217\u65b9\u5411 array([ 6, 22, 38, 54, 70]) np . add . reduce ( a , axis = 0 ) # \u6cbf\u7740 \u884c\u65b9\u5411 array([40, 45, 50, 55]) \u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u63d2\u5165\u5230\u6cbf\u7740axis\u8f74\u7684\u6240\u6709\u5143\u7d20\u4e4b\u95f4\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array([9, 25, 41, 57, 73], dtype=object) ufunc.accumulate() ufunc.accumulate \u65b9\u6cd5\uff1a\u5b83\u7c7b\u4f3c\u4e8ereduce()\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd4\u56de\u6570\u7ec4\u7684\u5f62\u72b6\u548c\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38], [12, 25, 39, 54], [16, 33, 51, 70]], dtype=int32) ufunc.outer() ufunc.outer \u65b9\u6cd5\uff1a\u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u5bf9\u8f93\u5165\u6570\u7ec4A\u548c\u8f93\u5165\u6570\u7ec4B\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u5bf9(a,b)\u8d77\u4f5c\u7528\u3002\u8bbeA\u7684shape=(4,5)\uff0cB\u7684shape\u4e3a(4,)\uff0c\u5219\u7ed3\u679c\u6570\u7ec4\u7684shape=(4,5,4) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7684outer\u64cd\u4f5c\u4e3a\u4e8c\u7ef4\u6570\u7ec4 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]) \u591a\u7ef4\u6570\u7ec4\u7684outer\u62c6\u5206\u6210\u5404\u81ea\u7684\u4e00\u7ef4\u64cd\u4f5c a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ]], [[ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ], [ 7 , 8 , 9 , 10 ]]]) \u6570\u5b66\u51fd\u6570 \u4e0b\u9762\u662f\u4e00\u5143\u7684\u6570\u5b66\u51fd\u6570\uff1a abs/fabs \uff1a\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u7684\u7edd\u5bf9\u503c\u3002\u5bf9\u4e8e\u975e\u590d\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684fabs sqrt \uff1a\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u76f8\u5f53\u4e8e$a^{0.5}$ square \uff1a\u8ba1\u7b97\u5e73\u65b9\uff0c\u76f8\u5f53\u4e8e$a^2$ exp \uff1a\u8ba1\u7b97\u6307\u6570$e^x$ log/log10/log2/log1p \uff1a\u5206\u522b\u4e3a$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign \uff1a\u8ba1\u7b97$sign(a)$ ceil \uff1a\u8ba1\u7b97\u5404\u5143\u7d20\u7684ceiling\u503c\uff1a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u6574\u6570 floor \uff1a\u8ba1\u7b97\u4e2a\u5143\u7d20\u7684floor\u503c\uff1a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5927\u6574\u6570 rint \uff1a\u5c06\u5404\u5143\u7d20\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4fdd\u7559 dtype modf \uff1a\u5c06\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\u4ee5\u4e24\u4e2a\u72ec\u7acb\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de cos/cosh/sin/sinh/tan/tanh \uff1a\u666e\u901a\u548c\u53cc\u66f2\u578b\u4e09\u89d2\u51fd\u6570 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :\u53cd\u4e09\u89d2\u51fd\u6570 isnan \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u90a3\u4e9b\u662f NaN isfinite/isinf \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u662f\u6709\u9650\u7684/\u65e0\u9650\u6570 \u7edf\u8ba1\u51fd\u6570 \u65b9\u6cd5 \u8bf4\u660e sum \u5bf9\u6570\u7ec4\u4e2d\u5168\u90e8\u6216\u67d0\u8f74\u5411\u7684\u5143\u7d20\u6c42\u548c\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684sum\u4e3a0 mean \u7b97\u672f\u5e73\u5747\u6570\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684mean\u4e3a NaN std \u3001 var \u5206\u522b\u4e3a\u6807\u51c6\u5dee\u548c\u65b9\u5dee\uff0c\u81ea\u7531\u5ea6\u53ef\u8c03\uff08\u9ed8\u8ba4\u4e3an\uff09 min \u3001 max \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c argmin \u3001 argmax \u5206\u522b\u4e3a\u6700\u5927\u548c\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15 cumsum \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u548c cumprod \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u79ef \u4ee5\u4e0a\u51fd\u6570\u6709\u4e00\u4e9b\u5171\u540c\u7684\u53c2\u6570\uff1a (a, axis=None, dtype=None, out=None) axis \uff1a None \u3001\u6574\u6570\u3001\u6574\u6570\u5143\u7ec4\u3002\u6309\u987a\u5e8f\u5bf9 axis \u6307\u5b9a\u7684\u8f74\u8fdb\u884c\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u6240\u6709\u7684\u8f74\uff0c\u6700\u540e\u5219\u8f93\u51fa\u4e00\u4e2a\u6807\u91cf\u3002 out \uff1andarray\u3002\u5c06\u7ed3\u679c\u8f93\u51fa\u5230\u8be5\u6570\u7ec4\u3002\u5b83\u5fc5\u987b\u6709\u4e0e\u9884\u671f\u8f93\u51fa\u5f62\u72b6\u76f8\u540c\uff0c\u4f46\u8f93\u51fa\u7c7b\u578b\u5fc5\u8981\u65f6\u5c06\u5f3a\u5236\u8f6c\u6362\u503c\u3002 \u96c6\u5408\u8fd0\u7b97 \u65b9\u6cd5 \u8bf4\u660e unique(x) \u8ba1\u7b97x\u4e2d\u7684\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c intersect1d(x, y) \u8ba1\u7b97X\u548cy\u4e2d\u7684\u516c\u5171\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c union1d(x, y) \u8ba1\u7b97X\u548cy\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c in1d(x,y) \u5f97\u5230\u4e00\u4e2a\u8868\u793a\u201cX\u7684\u5143\u7d20\u662f\u5426\u5305\u542b\u4e8ey\u201d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 setdiff1d(x, y) \u96c6\u5408\u7684\u5dee\uff0c\u5373\u5143\u7d20\u5728x\u4e2d\u4e14\u4e0d\u5728y\u4e2d setxor1d(x, y) \u96c6\u5408\u7684\u5bf9\u79f0\u5dee\uff0c\u5373\u5b58\u5728\u4e8e\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4f46\u4e0d\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 a = np . arange ( 0 , 5 ) b = np . arange ( 3 , 8 ) print ( np . unique ( a )) print ( np . intersect1d ( a , b )) print ( np . union1d ( a , b )) print ( np . in1d ( a , b )) print ( np . setdiff1d ( a , b )) print ( np . setxor1d ( a , b )) [0 1 2 3 4] [3 4] [0 1 2 3 4 5 6 7] [False False False True True] [0 1 2] [0 1 2 5 6 7]","title":"6.9.ufunc\u51fd\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_1","text":"a = np . arange ( 1 , 6 ) b = np . arange ( 5 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a + a a - a a * a # \u5143\u7d20\u76f8\u4e58 a / a b // a # \u53d6\u6574\u9664\u6cd5 b % a # \u53d6\u6a21 # ufunc\u51fd\u6570\u5f62\u5f0f np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) # \u5143\u7d20\u76f8\u4e58 ## \u5728python3 divide\u3001true_divide\u6ca1\u6709\u5dee\u522b np . true_divide ( b , a ) np . divide ( b , a ) ## \u76f8\u5f53\u4e8e\u5148\u8c03\u7528divide\u51fd\u6570 \u518d\u8c03\u7528floor\u51fd\u6570 np . floor_divide ( b , a ) # \u53d6\u6574\u9664\u6cd5 np . mod ( b , a ) # \u5143\u7d20\u7ea7\u6c42\u6a21 array([0, 0, 1, 0, 4], dtype=int32)","title":"\u56db\u5219\u8fd0\u7b97"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_2","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a == b a != b a < b a <= b a > b a >= b # ufunc\u51fd\u6570\u5f62\u5f0f np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array([[False, False, False, False, False, False, False, False, False, False], [False, False, False, False, False, False, False, False, False, False]])","title":"\u6bd4\u8f83\u8fd0\u7b97"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_3","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u4e0e np . logical_and ( a , b ) # \u6216 np . logical_or ( a , b ) # \u975e np . logical_not ( b ) # \u5f02\u6216 np . logical_xor ( a , b ) # \u4efb\u610f\u4e00\u4e2a\u5143\u7d20 np . any ( a ) # \u5168\u90e8\u5143\u7d20 np . all ( a ) False","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_4","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # \u6309\u4f4d\u4e0e np . bitwise_and ( a , b ) # \u6309\u4f4d\u6216 np . bitwise_or ( a , b ) # \u6309\u4f4d\u53d6\u53cd np . bitwise_not ( a ) # \u6309\u4f4d\u5f02\u6216 np . bitwise_xor ( a , b ) array([[10, 10, 14, 14, 10, 10, 22, 22, 26, 26], [30, 30, 26, 26, 22, 22, 10, 10, 14, 14]], dtype=int32)","title":"\u4f4d\u8fd0\u7b97"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#ufunc","text":"\u53ef\u4ee5\u901a\u8fc7 frompyfunc() \u5c06\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u8f6c\u6362\u6210ufunc\u51fd\u6570\u3002\u8c03\u7528\u683c\u5f0f\u4e3a\u5982\u4e0b\uff1a numpy . frompyfunc ( func , nin , nout ) # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # nin\uff1afunc\u7684\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570 The number of input # nout\uff1afunc\u8fd4\u56de\u503c\u7684\u4e2a\u6570 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array([6, 8, 10, 12, 14], dtype=object) \u4e5f\u53ef\u4ee5\u901a\u8fc7 vectorize() \u51fd\u6570\u6765\u5b9e\u73b0 frompyfunc() \u7684\u529f\u80fd\u3002 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) \u3002 # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # otypes\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7ed3\u679c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\u578b\u5217\u8868\u3002\u5982\u679c\u4f7f\u7528\u7c7b\u578b\u5217\u8868\uff0c\u53ef\u4ee5\u63cf\u8ff0\u591a\u4e2a\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b # doc\uff1a\u51fd\u6570\u7684\u63cf\u8ff0\u5b57\u7b26\u4e32\u3002\u82e5\u672a\u7ed9\u5b9a\uff0c\u5219\u4f7f\u7528func.__doc__ # excluded\uff1a\u6307\u5b9afunc\u4e2d\u54ea\u4e9b\u53c2\u6570\u672a\u88ab\u5411\u91cf\u5316\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u4ee3\u8868\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6574\u6570\u4ee3\u8868\u4f4d\u7f6e\u53c2\u6570\u3002 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"\u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) \u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570 array([1, 2, 3, 4, 5]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num \u4f5c\u4e3a\u4e00\u4e2alist\uff0c\u800c\u4e0d\u662f\u5411\u91cf\u5316\u6210\u4e00\u4e2a\u4e2a\u5143\u7d20 array([11, 13, 15, 17, 19]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) (array([1., 2., 3., 4., 5.]), array([1, 2, 3, 4, 5]))","title":"\u81ea\u5b9a\u4e49 ufunc \u51fd\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#ufunc_1","text":"ufunc\u51fd\u6570\u5bf9\u8c61\u672c\u8eab\u8fd8\u6709\u4e00\u4e9b\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u53ea\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u3001\u4e00\u4e2a\u8f93\u51fa\u7684ufunc\u51fd\u6570\u51fd\u6570\u6709\u6548\u3002\u5bf9\u4e8e\u5176\u4ed6\u7684ufunc\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u4f1a\u629b\u51fa ValueError \u5f02\u5e38\u3002","title":"ufunc \u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#ufuncreduce","text":"ufunc.reduce \u65b9\u6cd5\uff1a\u7c7b\u4f3c\u4e8ePython\u7684 reduce \u51fd\u6570\uff0c\u5b83==\u6cbf\u7740== axis \u53c2\u6570\u6307\u5b9a\u7684\u8f74\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u7ecf\u8fc7\u4e00\u6b21reduce\uff0c\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\u964d\u4f4e\u4e00\u7ef4\u3002 \u5047\u8bbe <op> \u662f\u4e00\u4e2aufunc\u51fd\u6570\uff0c ufunc.reduce \u7528\u6cd5\u5982\u4e0b\uff1a < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # \u6cbf\u7740 \u5217\u65b9\u5411 array([ 6, 22, 38, 54, 70]) np . add . reduce ( a , axis = 0 ) # \u6cbf\u7740 \u884c\u65b9\u5411 array([40, 45, 50, 55]) \u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u63d2\u5165\u5230\u6cbf\u7740axis\u8f74\u7684\u6240\u6709\u5143\u7d20\u4e4b\u95f4\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array([9, 25, 41, 57, 73], dtype=object)","title":"ufunc.reduce()"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#ufuncaccumulate","text":"ufunc.accumulate \u65b9\u6cd5\uff1a\u5b83\u7c7b\u4f3c\u4e8ereduce()\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd4\u56de\u6570\u7ec4\u7684\u5f62\u72b6\u548c\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38], [12, 25, 39, 54], [16, 33, 51, 70]], dtype=int32)","title":"ufunc.accumulate()"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#ufuncouter","text":"ufunc.outer \u65b9\u6cd5\uff1a\u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u5bf9\u8f93\u5165\u6570\u7ec4A\u548c\u8f93\u5165\u6570\u7ec4B\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u5bf9(a,b)\u8d77\u4f5c\u7528\u3002\u8bbeA\u7684shape=(4,5)\uff0cB\u7684shape\u4e3a(4,)\uff0c\u5219\u7ed3\u679c\u6570\u7ec4\u7684shape=(4,5,4) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7684outer\u64cd\u4f5c\u4e3a\u4e8c\u7ef4\u6570\u7ec4 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9]]) \u591a\u7ef4\u6570\u7ec4\u7684outer\u62c6\u5206\u6210\u5404\u81ea\u7684\u4e00\u7ef4\u64cd\u4f5c a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ]], [[ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ], [ 7 , 8 , 9 , 10 ]]])","title":"ufunc.outer()"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_5","text":"\u4e0b\u9762\u662f\u4e00\u5143\u7684\u6570\u5b66\u51fd\u6570\uff1a abs/fabs \uff1a\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u7684\u7edd\u5bf9\u503c\u3002\u5bf9\u4e8e\u975e\u590d\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684fabs sqrt \uff1a\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u76f8\u5f53\u4e8e$a^{0.5}$ square \uff1a\u8ba1\u7b97\u5e73\u65b9\uff0c\u76f8\u5f53\u4e8e$a^2$ exp \uff1a\u8ba1\u7b97\u6307\u6570$e^x$ log/log10/log2/log1p \uff1a\u5206\u522b\u4e3a$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign \uff1a\u8ba1\u7b97$sign(a)$ ceil \uff1a\u8ba1\u7b97\u5404\u5143\u7d20\u7684ceiling\u503c\uff1a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u6574\u6570 floor \uff1a\u8ba1\u7b97\u4e2a\u5143\u7d20\u7684floor\u503c\uff1a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5927\u6574\u6570 rint \uff1a\u5c06\u5404\u5143\u7d20\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4fdd\u7559 dtype modf \uff1a\u5c06\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\u4ee5\u4e24\u4e2a\u72ec\u7acb\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de cos/cosh/sin/sinh/tan/tanh \uff1a\u666e\u901a\u548c\u53cc\u66f2\u578b\u4e09\u89d2\u51fd\u6570 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :\u53cd\u4e09\u89d2\u51fd\u6570 isnan \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u90a3\u4e9b\u662f NaN isfinite/isinf \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u662f\u6709\u9650\u7684/\u65e0\u9650\u6570","title":"\u6570\u5b66\u51fd\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_6","text":"\u65b9\u6cd5 \u8bf4\u660e sum \u5bf9\u6570\u7ec4\u4e2d\u5168\u90e8\u6216\u67d0\u8f74\u5411\u7684\u5143\u7d20\u6c42\u548c\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684sum\u4e3a0 mean \u7b97\u672f\u5e73\u5747\u6570\u3002\u96f6\u957f\u5ea6\u7684\u6570\u7ec4\u7684mean\u4e3a NaN std \u3001 var \u5206\u522b\u4e3a\u6807\u51c6\u5dee\u548c\u65b9\u5dee\uff0c\u81ea\u7531\u5ea6\u53ef\u8c03\uff08\u9ed8\u8ba4\u4e3an\uff09 min \u3001 max \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c argmin \u3001 argmax \u5206\u522b\u4e3a\u6700\u5927\u548c\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15 cumsum \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u548c cumprod \u6240\u6709\u5143\u7d20\u7684\u7d2f\u8ba1\u79ef \u4ee5\u4e0a\u51fd\u6570\u6709\u4e00\u4e9b\u5171\u540c\u7684\u53c2\u6570\uff1a (a, axis=None, dtype=None, out=None) axis \uff1a None \u3001\u6574\u6570\u3001\u6574\u6570\u5143\u7ec4\u3002\u6309\u987a\u5e8f\u5bf9 axis \u6307\u5b9a\u7684\u8f74\u8fdb\u884c\u8ba1\u7b97\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u6240\u6709\u7684\u8f74\uff0c\u6700\u540e\u5219\u8f93\u51fa\u4e00\u4e2a\u6807\u91cf\u3002 out \uff1andarray\u3002\u5c06\u7ed3\u679c\u8f93\u51fa\u5230\u8be5\u6570\u7ec4\u3002\u5b83\u5fc5\u987b\u6709\u4e0e\u9884\u671f\u8f93\u51fa\u5f62\u72b6\u76f8\u540c\uff0c\u4f46\u8f93\u51fa\u7c7b\u578b\u5fc5\u8981\u65f6\u5c06\u5f3a\u5236\u8f6c\u6362\u503c\u3002","title":"\u7edf\u8ba1\u51fd\u6570"},{"location":"numpy%E7%AC%94%E8%AE%B0/6.9.ufunc%E5%87%BD%E6%95%B0.html#_7","text":"\u65b9\u6cd5 \u8bf4\u660e unique(x) \u8ba1\u7b97x\u4e2d\u7684\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c intersect1d(x, y) \u8ba1\u7b97X\u548cy\u4e2d\u7684\u516c\u5171\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c union1d(x, y) \u8ba1\u7b97X\u548cy\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\u6709\u5e8f\u7ed3\u679c in1d(x,y) \u5f97\u5230\u4e00\u4e2a\u8868\u793a\u201cX\u7684\u5143\u7d20\u662f\u5426\u5305\u542b\u4e8ey\u201d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 setdiff1d(x, y) \u96c6\u5408\u7684\u5dee\uff0c\u5373\u5143\u7d20\u5728x\u4e2d\u4e14\u4e0d\u5728y\u4e2d setxor1d(x, y) \u96c6\u5408\u7684\u5bf9\u79f0\u5dee\uff0c\u5373\u5b58\u5728\u4e8e\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4f46\u4e0d\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 a = np . arange ( 0 , 5 ) b = np . arange ( 3 , 8 ) print ( np . unique ( a )) print ( np . intersect1d ( a , b )) print ( np . union1d ( a , b )) print ( np . in1d ( a , b )) print ( np . setdiff1d ( a , b )) print ( np . setxor1d ( a , b )) [0 1 2 3 4] [3 4] [0 1 2 3 4 5 6 7] [False False False True True] [0 1 2] [0 1 2 5 6 7]","title":"\u96c6\u5408\u8fd0\u7b97"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.1.Series.html","text":"import pandas as pd from pandas import Series Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.24 pandas version: 1.0.1 Series\u662f\u80fd\u591f\u4fdd\u5b58\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u7684\u4e00\u7ef4\u6570\u7ec4\u3002 Series\u7c7b\u4f3cnumpy\u7684\u4e00\u7ef4ndarray\uff0c\u4f46\u662f\u548cndarray\u53c8\u4e0d\u540c\uff0cndarray\u7684\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\u6216\u7ed3\u6784\u5fc5\u987b\u76f8\u540c 1 \uff0c\u800cSeries\u80fd\u4fdd\u5b58\u4e0d\u540c\u7c7b\u578b\u3001\u7ed3\u6784\u7684\u6570\u636e\uff1b\u53e6\u5916Series\u7684\u5143\u7d20\u5e26\u6709\u7d22\u5f15\u3002Series\u50cf\u4e00\u4e2a\u6709\u5e8f\u5b57\u5178\uff0c\u56e0\u4e3a\u5b83\u662f\u7d22\u5f15\u503c\u5230\u6570\u636e\u503c\u7684\u4e00\u4e2a\u6620\u5c04\u3002\u5b83\u53ef\u4ee5\u7528\u5728\u8bb8\u591a\u539f\u672c\u9700\u8981\u5b57\u5178\u53c2\u6570\u7684\u51fd\u6570\u4e2d\u3002 \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efaSeries\u6570\u636e\u7ed3\u6784\uff1a \u5b57\u5178 \u4e00\u7ef4NumPy\u6570\u7ec4 \u5355\u4e2a\u6807\u91cf\uff1a\u6570\u503c\u6807\u91cf\u3001\u5b57\u7b26\u4e32 list\u3001tuple\uff08\u53ef\u4ee5\u662f\u591a\u5c42\u5d4c\u5957\u7684list\u3001tuple\uff09 Series\u7c7b class pandas.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False) \u53c2\u6570\uff1a data \uff1a dict \u3001 array-like \u3001 list \u3001 scalar \u3002\u5982\u679c\u662f\u5e8f\u5217\u6216\u6570\u7ec4\uff0c\u5219\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 \u5982\u679c\u662f\u5b57\u5178\uff0c\u5219\u5b57\u5178\u7684\u952e\u6307\u5b9a\u4e86 label \u3002\u5982\u679c\u540c\u65f6\u4f7f\u7528\u4e86 index \uff0c\u5219\u4ee5 index \u4e3a\u51c6\u3002 - \u5982\u679c\u662f\u6807\u91cf\uff0c\u5219\u7ed3\u679c\u4e3a\uff1a\u8be5\u6807\u91cf\u6269\u5145\u4e3a index \u957f\u5ea6\u76f8\u540c\u7684\u5217\u8868\u3002 index \uff1a\u4e00\u4e2a array-like \u6216\u8005\u4e00\u4e2a Index \u5bf9\u8c61\u3002\u5b83\u6307\u5b9a\u4e86 label \u3002\u5176\u503c\u8981\u6c42 hashable \uff0c\u4f46\u4e0d\u8981\u6c42\u60df\u4e00\uff0c\u957f\u5ea6\u4e0e data \u4e00\u81f4\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u4f7f\u7528 RangeIndex (0, 1, 2, ..., n) \u3002 name \uff1a str \uff0c Series \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u6570\u636e\u7c7b\u578b\u88ab\u81ea\u52a8\u63a8\u65ad copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data \u8fd8\u53ef\u4ee5\u901a\u8fc7\u7c7b\u65b9\u6cd5\u521b\u5efa Series \uff1a Series.from_array(arr, index=None, name=None, dtype=None, copy=False, fastpath=False) \u4f46 from_array \u7c7b\u65b9\u6cd5\u4f1a\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u88ab\u79fb\u9664\u3002 \u4ece dict \u6765\u521b\u5efa \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2a\u5b57\u5178\uff0c\u5219\u7ed3\u679cSeries\u4e2d\u7684\u7d22\u5f15\u5c31\u662f\u539f\u5b57\u5178\u7684\u952e\uff1a sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } # dict\u7684key\u662f\u65e0\u5e8f\u7684\uff0c\u4f46series\u7684index\u662f\u6709\u5e8f\u7684 Series ( sdata ) Ohio 35000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u539f\u5b57\u5178\u7684key\u7684\u6392\u5217\u987a\u5e8f\uff1a \u6ce8\u610f \u5982\u679c\u4f20\u5165dict\u548c\u5e76\u6307\u5b9aindex\uff0cindex\u9700\u8981\u548cdict\u7684\u952e\u5339\u914d\uff0c\u82e5index\u4e0d\u5728dict\u7684key\u4e2d\uff0c\u5bf9\u5e94\u7684series\u503c\u5219\u4e3aNaN\u3002 sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } states = [ 'California' , 'Ohio' , 'Oregon' , 'Texas' ] Series ( sdata , index = states ) California NaN Ohio 35000.0 Oregon 16000.0 Texas 71000.0 dtype: float64 \u4eceNumPy\u6570\u7ec4\u6765\u521b\u5efa \u6570\u7ec4\u5fc5\u987b\u662f\u4e00\u7ef4\u7684\uff1a import numpy as np a = np . array ([ 1 , 2 , 3 ]) Series ( a ) 0 1 1 2 2 3 dtype: int32 \u4ece\u6807\u91cf\u521b\u5efa \u5982\u679c\u63d0\u4f9b\u7d22\u5f15\uff0c\u5c06\u91cd\u590d\u6807\u91cf\u503c\u4ee5\u5339\u914d\u7d22\u5f15\u7684\u957f\u5ea6\u3002 Series ( 5 , index = [ 0 , 1 , 2 , 3 ]) 0 5 1 5 2 5 3 5 dtype: int64 \u5b9e\u9645\u4e0anumpy\u53ef\u4ee5\u5b9a\u4e49\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684\u7ed3\u6784\u6570\u7ec4\u3002 \u21a9","title":"7.1.Series"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.1.Series.html#series","text":"class pandas.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False) \u53c2\u6570\uff1a data \uff1a dict \u3001 array-like \u3001 list \u3001 scalar \u3002\u5982\u679c\u662f\u5e8f\u5217\u6216\u6570\u7ec4\uff0c\u5219\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 \u5982\u679c\u662f\u5b57\u5178\uff0c\u5219\u5b57\u5178\u7684\u952e\u6307\u5b9a\u4e86 label \u3002\u5982\u679c\u540c\u65f6\u4f7f\u7528\u4e86 index \uff0c\u5219\u4ee5 index \u4e3a\u51c6\u3002 - \u5982\u679c\u662f\u6807\u91cf\uff0c\u5219\u7ed3\u679c\u4e3a\uff1a\u8be5\u6807\u91cf\u6269\u5145\u4e3a index \u957f\u5ea6\u76f8\u540c\u7684\u5217\u8868\u3002 index \uff1a\u4e00\u4e2a array-like \u6216\u8005\u4e00\u4e2a Index \u5bf9\u8c61\u3002\u5b83\u6307\u5b9a\u4e86 label \u3002\u5176\u503c\u8981\u6c42 hashable \uff0c\u4f46\u4e0d\u8981\u6c42\u60df\u4e00\uff0c\u957f\u5ea6\u4e0e data \u4e00\u81f4\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u4f7f\u7528 RangeIndex (0, 1, 2, ..., n) \u3002 name \uff1a str \uff0c Series \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u6570\u636e\u7c7b\u578b\u88ab\u81ea\u52a8\u63a8\u65ad copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data \u8fd8\u53ef\u4ee5\u901a\u8fc7\u7c7b\u65b9\u6cd5\u521b\u5efa Series \uff1a Series.from_array(arr, index=None, name=None, dtype=None, copy=False, fastpath=False) \u4f46 from_array \u7c7b\u65b9\u6cd5\u4f1a\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u88ab\u79fb\u9664\u3002","title":"Series\u7c7b"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.1.Series.html#dict","text":"\u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2a\u5b57\u5178\uff0c\u5219\u7ed3\u679cSeries\u4e2d\u7684\u7d22\u5f15\u5c31\u662f\u539f\u5b57\u5178\u7684\u952e\uff1a sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } # dict\u7684key\u662f\u65e0\u5e8f\u7684\uff0c\u4f46series\u7684index\u662f\u6709\u5e8f\u7684 Series ( sdata ) Ohio 35000 Texas 71000 Oregon 16000 Utah 5000 dtype: int64 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u539f\u5b57\u5178\u7684key\u7684\u6392\u5217\u987a\u5e8f\uff1a \u6ce8\u610f \u5982\u679c\u4f20\u5165dict\u548c\u5e76\u6307\u5b9aindex\uff0cindex\u9700\u8981\u548cdict\u7684\u952e\u5339\u914d\uff0c\u82e5index\u4e0d\u5728dict\u7684key\u4e2d\uff0c\u5bf9\u5e94\u7684series\u503c\u5219\u4e3aNaN\u3002 sdata = { 'Ohio' : 35000 , 'Texas' : 71000 , 'Oregon' : 16000 , 'Utah' : 5000 } states = [ 'California' , 'Ohio' , 'Oregon' , 'Texas' ] Series ( sdata , index = states ) California NaN Ohio 35000.0 Oregon 16000.0 Texas 71000.0 dtype: float64","title":"\u4ecedict\u6765\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.1.Series.html#numpy","text":"\u6570\u7ec4\u5fc5\u987b\u662f\u4e00\u7ef4\u7684\uff1a import numpy as np a = np . array ([ 1 , 2 , 3 ]) Series ( a ) 0 1 1 2 2 3 dtype: int32","title":"\u4eceNumPy\u6570\u7ec4\u6765\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.1.Series.html#_1","text":"\u5982\u679c\u63d0\u4f9b\u7d22\u5f15\uff0c\u5c06\u91cd\u590d\u6807\u91cf\u503c\u4ee5\u5339\u914d\u7d22\u5f15\u7684\u957f\u5ea6\u3002 Series ( 5 , index = [ 0 , 1 , 2 , 3 ]) 0 5 1 5 2 5 3 5 dtype: int64 \u5b9e\u9645\u4e0anumpy\u53ef\u4ee5\u5b9a\u4e49\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7684\u7ed3\u6784\u6570\u7ec4\u3002 \u21a9","title":"\u4ece\u6807\u91cf\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.12 pandas version: 1.0.1 df = DataFrame ( np . arange ( 24 ) . reshape ( 6 , 4 ), columns = [ \"a\" , \"b\" , \"c\" , \"d\" ]) df . iloc [ 3 ] = np . nan df . loc [ 2 , \"a\" ] = np . nan df . loc [ 4 , \"a\" ] = np . nan df . loc [ 1 , \"b\" ] = np . nan df . loc [ 5 , \"c\" ] = np . nan df a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u5904\u7406\u7f3a\u5931\u503c pandas\u7684 DataFrame \u8bd5\u56fe\u6a21\u4effR\u8bed\u8a00\u4e2d\u7684 data.frame \u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5728Python\u4e2d\uff0cpandas\u5efa\u7acb\u5728numpy\u4e4b\u4e0a\uff0c\u800c numpy \u53ea\u6709 nan \u503c\uff08Not a Number\uff09\uff0c\u56e0\u6b64pandas\u7528 nan \u503c\u8868\u793a \u7f3a\u5931\u6570\u636e \uff0cPython\u5185\u7f6e\u7684None\u503c\u5728 DataFrame \u4e2d\u4e5f\u4f5c\u4e3a nan \u503c\u3002\u4f46\u5728R\u8bed\u8a00\u4e2d\uff0c NA \u3001 NaN \u3001 Null \u6709\u4e0d\u540c\u7684\u610f\u4e49\uff1a NA \uff1a\u8868\u793a\u7f3a\u5931\u503c(Missing value)\uff0c\u662f\u201cNot Available\u201d\u7684\u7f29\u5199 NaN \uff1a\u8868\u793a\u975e\u6570\u503c\uff0c\u662f\u201cNot a Number\u201d\u7684\u7f29\u5199 NULL \uff1a\u8868\u793a\u7a7a\u503c\uff0c\u5373\u6ca1\u6709\u5185\u5bb9 \u56e0\u6b64\u5728pandas\u4e2d\uff0c\u5224\u65ad\u7f3a\u5931\u503c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a .isna \u548c isnull \uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u76f8\u540c\u7684\u3002\u867d\u7136\u7f3a\u5931\u6570\u636e\u5728pandas\u4e2d\u5448\u73b0\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u53ef\u4ee5\u4fdd\u8bc1\u529f\u80fd\u6b63\u5e38\u3002 \u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u7f3a\u5931\u6570\u636e\u5904\u7406\u7684\u51fd\u6570\uff1a \u65b9\u6cd5 \u8bf4\u660e isnull \u3001 isna \u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u5e03\u5c14\u503c\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5e03\u5c14\u503c\u8868\u793a\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c/NA\uff0c\u8be5\u5bf9\u8c61\u7684\u7c7b\u578b\u4e0e\u6e90\u7c7b\u578b\u4e00\u6837 fillna \u7528\u6307\u5b9a\u503c\u6216\u63d2\u503c\u65b9\u6cd5\uff08\u5982 ffill \u6216 bfill \uff09\u586b\u5145\u7f3a\u5931\u6570\u636e dropna \u6839\u636e\u5404\u6807\u7b7e\u7684\u503c\u4e2d\u662f\u5426\u5b58\u5728\u7f3a\u5931\u6570\u636e\u5bf9\u8f74\u6807\u7b7e\u8fdb\u884c\u8fc7\u6ee4\uff0c\u53ef\u901a\u8fc7\u9608\u503c\u8c03\u8282\u5bf9\u7f3a\u5931\u503c\u7684\u5bb9\u5fcd\u5ea6 notnull isnull \u7684\u5426\u5b9a\u5f0f \u7b5b\u9009\u51fa\u7f3a\u5931\u6570\u636e df . isna () a b c d 0 False False False False 1 False True False False 2 True False False False 3 True True True True 4 True False False False 5 False False True False \u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c df [ np . array ( df . isna ())] a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 print ( df . isna () . any ( axis = 1 )) df [ df . isna () . any ( axis = 1 )] 0 False 1 True 2 True 3 True 4 True 5 True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\u6570 df . isna () . any ( axis = 1 ) . sum () 5 \u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u5217 print ( df . isna () . any ( axis = 0 )) df [ np . array ( df . isna ())] a True b True c True d True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u5217\u6570 df . isna () . any ( axis = 0 ) . sum () 4 \u5220\u9664\u7f3a\u5931\u6570\u636e dropna ( axis = 0 , how = \"any\" , thresh = None , subset = None , inplace = False ) how \uff1a how=any \uff0c\u5220\u9664\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1b how=all \uff0c\u5220\u9664\u6240\u6709\u6570\u636e\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\u3002 thresh \uff1a\u5982\u679c\u67d0\u4e00\u884c\uff08\u5217\uff09\u6709 thresh \u4e2a\u975e NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\u8be5\u884c\uff08\u5217\uff09\u3002 subset \uff1a\u5220\u9664 NA \u6570\u636e\u65f6\uff0c\u8981\u8003\u8651\u7684\u5176\u4ed6\u8f74\u4e0a\u7684\u6807\u7b7e\u3002\u5373\u53ea\u8981\u8be5\u6807\u7b7e\u4e0d\u662f NA \u503c\uff0c\u5219\u65e0\u9700\u5220\u9664\u3002 \u5220\u9664\u6240\u6709\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a df . dropna ( how = \"any\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 \u5220\u9664\u6240\u6709\u503c\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a # \u56e0\u4e3a\u6ca1\u6709\u4e00\u884c\u6216\u5217\u90fd\u662fNA\u503c \u6240\u4ee5\u4e0d\u5220\u9664\u6570\u636e df . dropna ( how = \"all\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u6bcf\u4e00\u884c\u53ea\u8981\u67093\u4e2a\u503c\u4e0d\u662f NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , thresh = 3 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u53ea\u8981\u5217 a \u7684\u503c\u4e0d\u662f NA \u503c\uff0c\u5c31\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , subset = [ \"a\" ]) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 5 20.0 21.0 NaN 23.0 \u586b\u5145\u7f3a\u5931\u6570\u636e fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) value \uff1a scalar, dict, Series, or DataFrame \u3002\u7528\u4e8e\u586b\u5145\u7684\u503c\u3002\u5982\u679c\u4f20\u5165 dict \u3001 Series \u3001 DataFrame \uff0c\u5219\u6307\u5b9a\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2aindex\uff08\u5bf9\u4e8e Series \uff09\u6216\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2a\u5217\uff08\u5bf9\u4e8e DataFrame \uff09\u3002\u4e0d\u5728 dict \u3001 Series \u3001 DataFrame \u4e2d\u7684\u503c\u5c06\u4e0d\u88ab\u586b\u5145\u3002 method \uff1a {'backfill', 'bfill', 'pad', 'ffill', None} \u3002\u7528\u4e8e\u586b\u5145\u7684\u65b9\u6cd5\u3002 backfill \u548c bfill \u662f\u540e\u5411\u586b\u5145\uff08\u4ece\u540e\u5411\u524d\uff09\uff0c pad \u548c ffill \u662f\u524d\u5411\u586b\u5145\u3002 limit \uff1a int \u3002\u5f53\u6307\u5b9a\u4e86 method \u53c2\u6570\u65f6\uff0c limit \u662f\u6700\u5927\u8fde\u7eed\u586b\u5145\u7684\u6570\u91cf\u3002\u5f53\u6ca1\u6709\u6307\u5b9a method \u53c2\u6570\u65f6\uff0c limit \u662f\u6bcf\u4e2a\u8f74\u6700\u5927\u586b\u5145\u6570\u91cf\u3002 downcast \uff1a dict of item->dtype \uff0c\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 \u5168\u90e8 NA \u503c\u586b\u5145\u4e3a10\uff0c\u6bcf\u4e2a\u8f74\u6700\u591a\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( value = 10 , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 10.0 6.0 7.0 2 10.0 9.0 10.0 11.0 3 10.0 10.0 10.0 10.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 10.0 23.0 \u540e\u5411\u586b\u5145 NA \u503c\uff0c\u6700\u591a\u8fde\u7eed\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( method = \"bfill\" , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 9.0 6.0 7.0 2 NaN 9.0 10.0 11.0 3 20.0 17.0 18.0 19.0 4 20.0 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u5982\u679c\u60f3\u7528\u5e73\u5747\u503c\u6216\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u5145\uff0c\u4e5f\u662f\u5f88\u65b9\u4fbf\u7684\uff1a print ( df . mean ()) df . fillna ( df . mean ()) a 8.0 b 12.0 c 9.0 d 12.6 dtype: float64 a b c d 0 0.0 1.0 2.0 3.0 1 4.0 12.0 6.0 7.0 2 8.0 9.0 10.0 11.0 3 8.0 12.0 9.0 12.6 4 8.0 17.0 18.0 19.0 5 20.0 21.0 9.0 23.0 \u79fb\u9664\u91cd\u590d\u6570\u636e data = pd . DataFrame ({ 'k1' : [ 'one' , 'two' ] * 3 + [ 'two' ], 'k2' : [ 1 , 1 , 2 , 3 , 3 , 4 , 4 ]}) data k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 6 two 4 DataFrame\u7684 duplicated \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578b Series \uff0c\u8868\u793a\u5404\u884c\u662f\u5426\u662f\u91cd\u590d\u884c\uff08\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u884c\uff09\uff1a data . duplicated () 0 False 1 False 2 False 3 False 4 False 5 False 6 True dtype: bool drop_duplicates \u65b9\u6cd5\u79fb\u9664\u91cd\u590d\u6570\u636e\uff1a data . drop_duplicates () k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u9ed8\u8ba4\u4f1a\u5224\u65ad\u5168\u90e8\u5217\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u5217\u8fdb\u884c\u91cd\u590d\u9879\u5224\u65ad\uff1a data . duplicated ([ \"k1\" ]) 0 False 1 False 2 True 3 True 4 True 5 True 6 True dtype: bool duplicated\u548cdrop_duplicates\u9ed8\u8ba4\u4fdd\u7559\u7684\u662f\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7ec4\u5408\u3002\u4f20\u5165keep='last'\u5219\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\uff1a data . drop_duplicates ([ 'k1' , 'k2' ], keep = 'last' ) k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 6 two 4 \u5229\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362 \u5bf9\u4e8e\u8bb8\u591a\u6570\u636e\u96c6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u6570\u7ec4\u3001Series\u6216DataFrame\u5217\u4e2d\u7684\u503c\u6765\u5b9e\u73b0\u8f6c\u6362\u5de5\u4f5c\u3002 data = pd . DataFrame ({ 'food' : [ 'bacon' , 'pulled pork' , 'bacon' , 'pastrami' , 'corned beef' , 'bacon' , 'pastrami' , 'honey ham' , 'nova lox' ], 'ounces' : [ 4 , 3 , 12 , 6 , 7.5 , 8 , 3 , 5 , 6 ]}) data food ounces 0 bacon 4.0 1 pulled pork 3.0 2 bacon 12.0 3 pastrami 6.0 4 corned beef 7.5 5 bacon 8.0 6 pastrami 3.0 7 honey ham 5.0 8 nova lox 6.0 \u5047\u8bbe\u4f60\u60f3\u8981\u6dfb\u52a0\u4e00\u5217\u8868\u793a\u8be5\u8089\u7c7b\u98df\u7269\u6765\u6e90\u7684\u52a8\u7269\u7c7b\u578b\u3002\u6211\u4eec\u5148\u7f16\u5199\u4e00\u4e2a\u4e0d\u540c\u8089\u7c7b\u5230\u52a8\u7269\u7684\u6620\u5c04\uff1a meat_to_animal = { 'bacon' : 'pig' , 'pulled pork' : 'pig' , 'pastrami' : 'cow' , 'corned beef' : 'cow' , 'honey ham' : 'pig' , 'nova lox' : 'salmon' } data [ 'food' ] . map ( meat_to_animal ) 0 pig 1 pig 2 pig 3 cow 4 cow 5 pig 6 cow 7 pig 8 salmon Name: food, dtype: object \u66ff\u6362\u503c \u5229\u7528 fillna \u65b9\u6cd5\u586b\u5145\u7f3a\u5931\u6570\u636e\u53ef\u4ee5\u770b\u505a\u503c\u66ff\u6362\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u524d\u9762\u5df2\u7ecf\u770b\u5230\uff0cmap\u53ef\u7528\u4e8e\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u5b50\u96c6\uff0c\u800creplace\u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u8be5\u529f\u80fd\u7684\u66f4\u7b80\u5355\u3001\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2aSeries\uff1a data = pd . Series ([ 1. , - 999. , 2. , - 999. , - 1000. , 3. ]) data 0 1.0 1 -999.0 2 2.0 3 -999.0 4 -1000.0 5 3.0 dtype: float64 -999\u8fd9\u4e2a\u503c\u53ef\u80fd\u662f\u4e00\u4e2a\u8868\u793a\u7f3a\u5931\u6570\u636e\u7684\u6807\u8bb0\u503c\u3002\u8981\u5c06\u5176\u66ff\u6362\u4e3apandas\u80fd\u591f\u7406\u89e3\u7684NA\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528replace\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Series\uff08\u9664\u975e\u4f20\u5165inplace=True\uff09\uff1a data . replace ( - 999 , np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 -1000.0 5 3.0 dtype: float64 \u5982\u679c\u4f60\u5e0c\u671b\u4e00\u6b21\u6027\u66ff\u6362\u591a\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u7531\u5f85\u66ff\u6362\u503c\u7ec4\u6210\u7684\u5217\u8868\u4ee5\u53ca\u4e00\u4e2a\u66ff\u6362\u503c\uff1a\uff1a data . replace ([ - 999 , - 1000 ], np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 NaN 5 3.0 dtype: float64 \u8981\u8ba9\u6bcf\u4e2a\u503c\u6709\u4e0d\u540c\u7684\u66ff\u6362\u503c\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u66ff\u6362\u5217\u8868\uff1a data . replace ([ - 999 , - 1000 ], [ np . nan , 0 ]) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64 \u4f20\u5165\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u5b57\u5178\uff1a data . replace ({ - 999 : np . nan , - 1000 : 0 }) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64 \u91cd\u547d\u540d\u8f74\u7d22\u5f15 \u8ddfSeries\u4e2d\u7684\u503c\u4e00\u6837\uff0c\u8f74\u6807\u7b7e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4e0d\u540c\u6807\u7b7e\u7684\u5bf9\u8c61\u3002\u8f74\u8fd8\u53ef\u4ee5\u88ab\u5c31\u5730\u4fee\u6539\uff0c\u800c\u65e0\u9700\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u63a5\u4e0b\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a data = pd . DataFrame ( np . arange ( 12 ) . reshape (( 3 , 4 )), index = [ 'Ohio' , 'Colorado' , 'New York' ], columns = [ 'one' , 'two' , 'three' , 'four' ]) data one two three four Ohio 0 1 2 3 Colorado 4 5 6 7 New York 8 9 10 11 \u8ddfSeries\u4e00\u6837\uff0c\u8f74\u7d22\u5f15\u4e5f\u6709\u4e00\u4e2a map \u65b9\u6cd5\uff1a transform = lambda x : x [: 4 ] . upper () data . index . map ( transform ) Index(['OHIO', 'COLO', 'NEW '], dtype='object') \u4f60\u53ef\u4ee5\u5c06\u5176\u8d4b\u503c\u7ed9index\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5bf9DataFrame\u8fdb\u884c\u5c31\u5730\u4fee\u6539\uff1a data . index = data . index . map ( transform ) data one two three four OHIO 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 \u5982\u679c\u60f3\u8981\u521b\u5efa\u6570\u636e\u96c6\u7684\u8f6c\u6362\u7248\uff08\u800c\u4e0d\u662f\u4fee\u6539\u539f\u59cb\u6570\u636e\uff09\uff0c\u6bd4\u8f83\u5b9e\u7528\u7684\u65b9\u6cd5\u662f rename \uff1a data . rename ( index = str . title , columns = str . upper ) ONE TWO THREE FOUR Ohio 0 1 2 3 Colo 4 5 6 7 New 8 9 10 11 \u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0crename\u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u578b\u5bf9\u8c61\u5b9e\u73b0\u5bf9\u90e8\u5206\u8f74\u6807\u7b7e\u7684\u66f4\u65b0\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, columns = { 'three' : 'peekaboo' }) one two peekaboo four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 rename\u53ef\u4ee5\u5b9e\u73b0\u590d\u5236DataFrame\u5e76\u5bf9\u5176\u7d22\u5f15\u548c\u5217\u6807\u7b7e\u8fdb\u884c\u8d4b\u503c\u3002\u5982\u679c\u5e0c\u671b\u5c31\u5730\u4fee\u6539\u67d0\u4e2a\u6570\u636e\u96c6\uff0c\u4f20\u5165 inplace=True \u5373\u53ef\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, inplace = True ) data one two three four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 \u79bb\u6563\u5316\u548c\u9762\u5143\u5212\u5206 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u76f8\u5bf9\u8fde\u7eed\u7684\u6570\u636e\u5206\u7ec4\u5206\u6790\uff0c\u800cpandas\u6709\u4e00\u4e9b\u80fd\u6839\u636e\u6307\u5b9a \u201c\u9762\u5143\u201d \uff08bin\uff09\u6216\u6837\u672c\u5206\u4f4d\u6570\u5c06\u6570\u636e\u62c6\u5206\u6210\u591a\u5757\u7684\u5de5\u5177\uff08\u6bd4\u5982 pandas.cut() \u548cqcut\uff09\u3002\u5c06\u8fd9\u4e9b\u51fd\u6570\u8ddfgroupby\u7ed3\u5408\u8d77\u6765\uff0c\u5c31\u80fd\u975e\u5e38\u8f7b\u677e\u5730\u5b9e\u73b0\u5bf9\u6570\u636e\u96c6\u7684\u6876\uff08bucket\uff09\u6216\u5206\u4f4d\u6570\uff08quantile\uff09\u5206\u6790\u4e86\u3002 \u5047\u8bbe\u6709\u4e00\u7ec4\u4eba\u5458\u6570\u636e\uff0c\u60f3\u5c06\u5b83\u4eec\u5212\u5206\u4e3a\u201c18\u523025\u201d\u3001\u201c26\u523035\u201d\u3001\u201c35\u523060\u201d\u4ee5\u53ca\u201c60\u4ee5\u4e0a\u201d4\u4e2a\u4e0d\u540c\u7684\u5e74\u9f84\u7ec4\uff1a ages = [ 20 , 22 , 25 , 27 , 21 , 23 , 37 , 31 , 61 , 45 , 41 , 32 ] bins = [ 18 , 25 , 35 , 60 , 100 ] cats = pd . cut ( ages , bins ) cats [ (18, 25 ] , ( 18 , 25 ] , ( 18 , 25 ] , ( 25 , 35 ] , ( 18 , 25 ] , ..., ( 25 , 35 ] , ( 60 , 100 ] , ( 35 , 60 ] , ( 35 , 60 ] , ( 25 , 35 ]] Length : 12 Categories ( 4 , interval [ int64 ] ) : [ (18, 25 ] < ( 25 , 35 ] < ( 35 , 60 ] < ( 60 , 100 ]] list ( cats ) [Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(25, 35, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right'), Interval(60, 100, closed='right'), Interval(35, 60, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right')] pandas\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Categorical\u5bf9\u8c61\u3002\u7ed3\u679c\u5c55\u793a\u4e86 pandas.cut \u5212\u5206\u7684 \u9762\u5143 \u3002\u4f60\u53ef\u4ee5\u5c06\u8f93\u51fa\u7ed3\u679c\u770b\u505a\u4e00\u7ec4\u8868\u793a \u9762\u5143 \u540d\u79f0\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u7684\u5e95\u5c42\u542b\u6709\u4e00\u4e2a\u8868\u793a\u4e0d\u540c\u5206\u7c7b\u540d\u79f0\u7684\u7c7b\u578b\u6570\u7ec4\uff0c\u4ee5\u53ca\u4e00\u4e2acodes\u5c5e\u6027\u4e2d\u7684\u5e74\u9f84\u6570\u636e\u7684\u6807\u7b7e\uff1a pprint . pprint ( cats . codes ) pprint . pprint ( cats . categories ) pd . value_counts ( cats ) array ( [ 0, 0, 0, ..., 2, 2, 1 ] , dtype = int8 ) IntervalIndex ( [ (18, 25 ] , ( 25 , 35 ] , ( 35 , 60 ] , ( 60 , 100 ]] , closed = 'right' , dtype = 'interval[int64]' ) (18, 25] 5 (35, 60] 3 (25, 35] 3 (60, 100] 1 dtype: int64 pd.value_counts(cats) \u662f pandas.cut \u7ed3\u679c\u7684\u9762\u5143\u8ba1\u6570\u3002 \u793a\u4f8b\uff1a\u5206\u7ec4\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97 \u7531cut\u8fd4\u56de\u7684Categorical\u5bf9\u8c61\u53ef\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165groupby\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bf9ages\u505a\u4e00\u4e9b\u7edf\u8ba1\u8ba1\u7b97\uff1a def get_stats ( group ): return { 'min' : group . min (), 'max' : group . max (), 'count' : group . count (), 'mean' : group . mean ()} grouped = Series ( ages ) . groupby ( cats ) grouped . apply ( get_stats ) . unstack () min max count mean (18, 25] 20.0 25.0 5.0 22.2 (25, 35] 27.0 32.0 3.0 30.0 (35, 60] 37.0 45.0 3.0 41.0 (60, 100] 61.0 61.0 1.0 61.0 \u793a\u4f8b\uff1a\u5206\u7ec4\u586b\u5145\u7f3a\u5931\u503c \u5bf9\u4e8e\u7f3a\u5931\u6570\u636e\u7684\u586b\u5145\u5de5\u4f5c\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5e0c\u671b\u7528\u4e00\u4e2a\u7531\u6570\u636e\u96c6\u672c\u8eab\u6240\u884d\u751f\u51fa\u6765\u7684\u503c\u53bb\u586b\u5145NA\u503c\u3002\u4f8b\u5982\uff0c\u7528\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c\u3002 \u5047\u8bbe\u4f60\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u5206\u7ec4\u586b\u5145\u4e0d\u540c\u7684\u503c\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u6570\u636e\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528apply\u548c\u4e00\u4e2a\u80fd\u591f\u5bf9\u5404\u6570\u636e\u5757\u8c03\u7528 fillna \u7684\u51fd\u6570\u5373\u53ef\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6709\u5173\u7f8e\u56fd\u51e0\u4e2a\u5dde\u7684\u793a\u4f8b\u6570\u636e\uff0c\u8fd9\u4e9b\u5dde\u53c8\u88ab\u5206\u4e3a\u4e1c\u90e8\u548c\u897f\u90e8\uff1a data = pd . read_excel ( r \".\\datasets\\example.xlsx\" , index_col = 0 ) print ( data , \" \\n \" ) print ( data . groupby ( \"region\" ) . mean ()) index region Ohio 22 . 0 East New York - 2 . 0 East Vermont NaN East Florida 1 . 0 East Oregon - 8 . 0 West Nevada NaN West California 10 . 0 West Idaho NaN West index region East 7 . 0 West 1 . 0 \u6211\u4eec\u53ef\u4ee5\u7528\u5206\u7ec4\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c: fill_mean = lambda g : g . fillna ( g . mean ()) data . groupby ( \"region\" ) . apply ( fill_mean ) index region region East Ohio 22.0 East New York -2.0 East Vermont 7.0 East Florida 1.0 East West Oregon -8.0 West Nevada 1.0 West California 10.0 West Idaho 1.0 West \u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u9884\u5b9a\u4e49\u5404\u7ec4\u7684\u586b\u5145\u503c\u3002\u7531\u4e8e\u5206\u7ec4\u5177\u6709\u4e00\u4e2aname\u5c5e\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u62ff\u6765\u7528\u4e00\u4e0b\uff1a fill_values = { 'East' : 0.5 , 'West' : - 1 } fill_func = lambda g : g . fillna ( fill_values [ g . name ]) data . groupby ( \"region\" ) . apply ( fill_func ) index region Ohio 22.0 East New York -2.0 East Vermont 0.5 East Florida 1.0 East Oregon -8.0 West Nevada -1.0 West California 10.0 West Idaho -1.0 West right \u548c labels \u53c2\u6570 \u8ddf\u201c\u533a\u95f4\u201d\u7684\u6570\u5b66\u7b26\u53f7\u4e00\u6837\uff0c\u5706\u62ec\u53f7\u8868\u793a\u5f00\u7aef\uff0c\u800c\u65b9\u62ec\u53f7\u5219\u8868\u793a\u95ed\u7aef\uff08\u5305\u62ec\uff09\u3002\u54ea\u8fb9\u662f\u95ed\u7aef\u53ef\u4ee5\u901a\u8fc7right=False\u8fdb\u884c\u4fee\u6539\uff1a pd . cut ( ages , [ 18 , 26 , 36 , 61 , 100 ], right = False ) [ [18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36) ] Length : 12 Categories ( 4 , interval [ int64 ] ) : [ [18, 26) < [26, 36) < [36, 61) < [61, 100) ] \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u5230 labels \u53c2\u6570\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u9762\u5143\u540d\u79f0\uff1a group_names = [ 'Youth' , 'YoungAdult' , 'MiddleAged' , 'Senior' ] pd . cut ( ages , bins , labels = group_names ) [Youth, Youth, Youth, YoungAdult, Youth, ..., YoungAdult, Senior, MiddleAged, MiddleAged, YoungAdult] Length: 12 Categories (4, object): [Youth < YoungAdult < MiddleAged < Senior] cut \u51fd\u6570 vs qcut \u51fd\u6570 \u5982\u679c\u5411 cut \u4f20\u5165\u7684\u662f\u9762\u5143\u7684\u6570\u91cf\u800c\u4e0d\u662f\u786e\u5207\u7684\u9762\u5143\u8fb9\u754c\uff0c\u5219\u5b83\u4f1a\u6839\u636e\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u7b49\u957f\u9762\u5143\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u4e9b\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u5206\u6210\u56db\u7ec4\uff1a data = np . random . rand ( 20 ) pd . cut ( data , 4 , precision = 2 ) [ (0.75, 0.99 ] , ( 0.75 , 0.99 ] , ( 0.0074 , 0.25 ] , ( 0.0074 , 0.25 ] , ( 0.25 , 0.5 ] , ..., ( 0.5 , 0.75 ] , ( 0.75 , 0.99 ] , ( 0.5 , 0.75 ] , ( 0.75 , 0.99 ] , ( 0.0074 , 0.25 ]] Length : 20 Categories ( 4 , interval [ float64 ] ) : [ (0.0074, 0.25 ] < ( 0.25 , 0.5 ] < ( 0.5 , 0.75 ] < ( 0.75 , 0.99 ]] \u9009\u9879precision=2\uff0c\u9650\u5b9a\u5c0f\u6570\u53ea\u6709\u4e24\u4f4d\u3002 qcut \u662f\u4e00\u4e2a\u975e\u5e38\u7c7b\u4f3c\u4e8e cut \u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u9762\u5143\u5212\u5206\u3002\u6839\u636e\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\uff0c cut \u53ef\u80fd\u65e0\u6cd5\u4f7f\u5404\u4e2a\u9762\u5143\u4e2d\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u636e\u70b9\u3002\u800c qcut \u7531\u4e8e\u4f7f\u7528\u7684\u662f\u6837\u672c\u5206\u4f4d\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u5927\u5c0f\u57fa\u672c\u76f8\u7b49\u7684\u9762\u5143\uff1a data = np . random . randn ( 1000 ) # Normally distributed cats = pd . qcut ( data , 4 ) # Cut into quartiles pd . value_counts ( cats ) (0.62, 3.928] 250 (-0.0192, 0.62] 250 (-0.691, -0.0192] 250 (-2.9499999999999997, -0.691] 250 dtype: int64 \u4e0ecut\u7c7b\u4f3c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u81ea\u5b9a\u4e49\u7684\u5206\u4f4d\u6570\uff080\u52301\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u5305\u542b\u7aef\u70b9\uff09\uff1a pd . qcut ( data , [ 0 , 0.1 , 0.5 , 0.9 , 1. ]) [ (1.289, 3.928 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ] , ( - 0.0192 , 1.289 ] , ( - 0.0192 , 1.289 ] , ..., ( 1.289 , 3.928 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ]] Length : 1000 Categories ( 4 , interval [ float64 ] ) : [ (-2.9499999999999997, -1.191 ] < ( - 1.191 , - 0.0192 ] < ( - 0.0192 , 1.289 ] < ( 1.289 , 3.928 ]] \u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c \u8fc7\u6ee4\u6216\u53d8\u6362\u5f02\u5e38\u503c\uff08outlier\uff09\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5c31\u662f\u8fd0\u7528\u6570\u7ec4\u8fd0\u7b97\u3002\u6765\u770b\u4e00\u4e2a\u542b\u6709\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684DataFrame\uff1a data = pd . DataFrame ( np . random . randn ( 1000 , 4 )) data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.022282 -0.001383 -0.055245 0.043350 std 1.008995 0.995882 0.998735 0.996658 min -3.184377 -3.745356 -3.428254 -3.645860 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.525865 2.735527 3.366626 2.653656 \u5047\u8bbe\u4f60\u60f3\u8981\u627e\u51fa\u67d0\u5217\u4e2d\u7edd\u5bf9\u503c\u5927\u5c0f\u8d85\u8fc73\u7684\u503c\uff1a col = data [ 2 ] col [ np . abs ( col ) > 3 ] 267 -3.428254 644 3.366626 Name: 2, dtype: float64 \u8981\u9009\u51fa\u5168\u90e8\u542b\u6709\u201c\u8d85\u8fc73\u6216\uff0d3\u7684\u503c\u201d\u7684\u884c\uff0c\u4f60\u53ef\u4ee5\u5728\u5e03\u5c14\u578bDataFrame\u4e2d\u4f7f\u7528 any \u65b9\u6cd5\uff1a data [( np . abs ( data ) > 3 ) . any ( axis = 1 )] 0 1 2 3 50 -0.025907 -3.399312 -0.974657 -0.685312 69 3.260383 0.963301 1.201206 -1.852001 145 -0.196713 -3.745356 -1.520113 -0.346839 244 -3.056990 1.918403 -0.578828 1.847446 267 0.326045 0.425384 -3.428254 -0.296336 331 -3.184377 1.369891 -1.074833 -0.089937 552 0.208011 -0.150923 -0.362528 -3.548824 644 0.193299 1.397822 3.366626 -2.372214 791 3.525865 0.283070 0.544635 0.462204 811 -0.450721 -0.080332 0.599947 -3.645860 \u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5bf9\u503c\u8fdb\u884c\u8bbe\u7f6e\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5c06\u503c\u9650\u5236\u5728\u533a\u95f4\uff0d3\u52303\u4ee5\u5185\uff1a data [ np . abs ( data ) > 3 ] = np . sign ( data ) * 3 data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.021737 -0.000238 -0.055183 0.044545 std 1.005754 0.992064 0.996186 0.992637 min -3.000000 -3.000000 -3.000000 -3.000000 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.000000 2.735527 3.000000 2.653656 \u6839\u636e\u6570\u636e\u7684\u503c\u662f\u6b63\u8fd8\u662f\u8d1f\uff0c np.sign(data) \u53ef\u4ee5\u751f\u62101\u548c-1\uff1a np . sign ( data ) . head () 0 1 2 3 0 1.0 1.0 1.0 -1.0 1 1.0 1.0 -1.0 -1.0 2 1.0 -1.0 -1.0 -1.0 3 1.0 1.0 -1.0 1.0 4 -1.0 -1.0 -1.0 -1.0 \u6392\u5217\u548c\u968f\u673a\u91c7\u6837 \u5229\u7528 numpy.random.permutation \u51fd\u6570\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u5bf9Series\u6216DataFrame\u7684\u5217\u7684\u6392\u5217\u5de5\u4f5c\uff08permuting\uff0c\u968f\u673a\u91cd\u6392\u5e8f\uff09\u3002\u901a\u8fc7\u9700\u8981\u6392\u5217\u7684\u8f74\u7684\u957f\u5ea6\u8c03\u7528permutation\uff0c\u53ef\u4ea7\u751f\u4e00\u4e2a\u8868\u793a\u65b0\u987a\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff1a df = pd . DataFrame ( np . arange ( 5 * 4 ) . reshape (( 5 , 4 ))) sampler = np . random . permutation ( 5 ) sampler array([4, 3, 2, 1, 0]) \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8e iloc \u7684\u7d22\u5f15\u64cd\u4f5c\u6216take\u51fd\u6570\u4e2d\u4f7f\u7528\u8be5\u6570\u7ec4\u4e86\uff1a df df . take ( sampler ) 0 1 2 3 4 16 17 18 19 3 12 13 14 15 2 8 9 10 11 1 4 5 6 7 0 0 1 2 3 \u5982\u679c\u4e0d\u60f3\u7528\u66ff\u6362\u7684\u65b9\u5f0f\u9009\u53d6\u968f\u673a\u5b50\u96c6\uff0c\u53ef\u4ee5\u5728Series\u548cDataFrame\u4e0a\u4f7f\u7528sample\u65b9\u6cd5\uff1a df . sample ( n = 3 ) 0 1 2 3 0 0 1 2 3 4 16 17 18 19 1 4 5 6 7 \u8981\u901a\u8fc7\u66ff\u6362\u7684\u65b9\u5f0f\u4ea7\u751f\u6837\u672c\uff08\u5141\u8bb8\u91cd\u590d\u9009\u62e9\uff09\uff0c\u53ef\u4ee5\u4f20\u9012replace=True\u5230sample\uff1a choices = pd . Series ([ 5 , 7 , - 1 , 6 , 4 ]) draws = choices . sample ( n = 10 , replace = True ) draws 0 5 1 7 3 6 4 4 0 5 0 5 1 7 0 5 0 5 4 4 dtype: int64 \u8ba1\u7b97\u6307\u6807/\u54d1\u53d8\u91cf \u53e6\u4e00\u79cd\u5e38\u7528\u4e8e\u7edf\u8ba1\u5efa\u6a21\u6216\u673a\u5668\u5b66\u4e60\u7684\u8f6c\u6362\u65b9\u5f0f\u662f\uff1a\u5c06\u5206\u7c7b\u53d8\u91cf\uff08categorical variable\uff09\u8f6c\u6362\u4e3a\u201c\u54d1\u53d8\u91cf\u201d\u6216\u201c\u6307\u6807\u77e9\u9635\u201d\u3002 \u5982\u679cDataFrame\u7684\u67d0\u4e00\u5217\u4e2d\u542b\u6709k\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u6d3e\u751f\u51fa\u4e00\u4e2ak\u5217\u77e9\u9635\u6216DataFrame\uff08\u5176\u503c\u5168\u4e3a1\u548c0\uff09\u3002pandas\u6709\u4e00\u4e2aget_dummies\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff08\u5176\u5b9e\u81ea\u5df1\u52a8\u624b\u505a\u4e00\u4e2a\u4e5f\u4e0d\u96be\uff09\u3002\u4f7f\u7528\u4e4b\u524d\u7684\u4e00\u4e2aDataFrame\u4f8b\u5b50\uff1a df = pd . DataFrame ({ 'key' : [ 'b' , 'b' , 'a' , 'c' , 'a' , 'b' ], 'data1' : range ( 6 )}) pd . get_dummies ( df [ 'key' ]) a b c 0 0 1 0 1 0 1 0 2 1 0 0 3 0 0 1 4 1 0 0 5 0 1 0 \u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u60f3\u7ed9\u6307\u6807DataFrame\u7684\u5217\u52a0\u4e0a\u4e00\u4e2a\u524d\u7f00\uff0c\u4ee5\u4fbf\u80fd\u591f\u8ddf\u5176\u4ed6\u6570\u636e\u8fdb\u884c\u5408\u5e76\u3002get_dummies\u7684prefix\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff1a dummies = pd . get_dummies ( df [ 'key' ], prefix = 'key' ) df_with_dummy = df [[ 'data1' ]] . join ( dummies ) df_with_dummy data1 key_a key_b key_c 0 0 0 1 0 1 1 0 1 0 2 2 1 0 0 3 3 0 0 1 4 4 1 0 0 5 5 0 1 0 \u5982\u679cDataFrame\u4e2d\u7684\u67d0\u884c\u540c\u5c5e\u4e8e\u591a\u4e2a\u5206\u7c7b\uff0c\u5219\u4e8b\u60c5\u5c31\u4f1a\u6709\u70b9\u590d\u6742\u3002\u770b\u4e00\u4e0bMovieLens 1M\u6570\u636e\u96c6\uff0c14\u7ae0\u4f1a\u66f4\u6df1\u5165\u5730\u7814\u7a76\u5b83\uff1a mnames = [ 'movie_id' , 'title' , 'genres' ] movies = pd . read_table ( './datasets/movies.dat' , sep = '::' , header = None , names = mnames , engine = 'python' ) movies [: 10 ] movie_id title genres 0 1 Toy Story (1995) Animation|Children's|Comedy 1 2 Jumanji (1995) Adventure|Children's|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance 3 4 Waiting to Exhale (1995) Comedy|Drama 4 5 Father of the Bride Part II (1995) Comedy 5 6 Heat (1995) Action|Crime|Thriller 6 7 Sabrina (1995) Comedy|Romance 7 8 Tom and Huck (1995) Adventure|Children's 8 9 Sudden Death (1995) Action 9 10 GoldenEye (1995) Action|Adventure|Thriller \u8981\u4e3a\u6bcf\u4e2agenre\u6dfb\u52a0\u6307\u6807\u53d8\u91cf\u5c31\u9700\u8981\u505a\u4e00\u4e9b\u6570\u636e\u89c4\u6574\u64cd\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u4ece\u6570\u636e\u96c6\u4e2d\u62bd\u53d6\u51fa\u4e0d\u540c\u7684genre\u503c\uff1a all_genres = [] for x in movies . genres : all_genres . extend ( x . split ( '|' )) genres = pd . unique ( all_genres ) \u73b0\u5728\u6709\uff1a genres \u6784\u5efa\u6307\u6807DataFrame\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u4ece\u4e00\u4e2a\u5168\u96f6DataFrame\u5f00\u59cb\uff1a zero_matrix = np . zeros (( len ( movies ), len ( genres ))) dummies = pd . DataFrame ( zero_matrix , columns = genres ) \u73b0\u5728\uff0c\u8fed\u4ee3\u6bcf\u4e00\u90e8\u7535\u5f71\uff0c\u5e76\u5c06dummies\u5404\u884c\u7684\u6761\u76ee\u8bbe\u4e3a1\u3002\u8981\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f7f\u7528 dummies.columns \u6765\u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u578b\u7684\u5217\u7d22\u5f15\uff1a gen = movies . genres [ 0 ] gen . split ( '|' ) dummies . columns . get_indexer ( gen . split ( '|' )) array([0, 1, 2], dtype=int64) \u7136\u540e\uff0c\u6839\u636e\u7d22\u5f15\uff0c\u4f7f\u7528 .iloc \u8bbe\u5b9a\u503c\uff1a for i , gen in enumerate ( movies . genres ): indices = dummies . columns . get_indexer ( gen . split ( '|' )) dummies . iloc [ i , indices ] = 1 \u7136\u540e\uff0c\u548c\u4ee5\u524d\u6837\uff0c\u518d\u5c06\u5176\u4e0emovies\u5408\u5e76\u8d77\u6765\uff1a movies_windic = movies . join ( dummies . add_prefix ( 'Genre_' )) movies_windic . iloc [ 0 ] movie_id 1 title Toy Story (1995) genres Animation|Children's|Comedy Genre_Animation 1 Genre_Children's 1 Genre_Comedy 1 Genre_Adventure 0 Genre_Fantasy 0 Genre_Romance 0 Genre_Drama 0 Genre_Action 0 Genre_Crime 0 Genre_Thriller 0 Genre_Horror 0 Genre_Sci-Fi 0 Genre_Documentary 0 Genre_War 0 Genre_Musical 0 Genre_Mystery 0 Genre_Film-Noir 0 Genre_Western 0 Name: 0, dtype: object \u7b14\u8bb0\uff1a\u5bf9\u4e8e\u5f88\u5927\u7684\u6570\u636e\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u6784\u5efa\u591a\u6210\u5458\u6307\u6807\u53d8\u91cf\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u6162\u3002\u6700\u597d\u4f7f\u7528\u66f4\u4f4e\u7ea7\u7684\u51fd\u6570\uff0c\u5c06\u5176\u5199\u5165NumPy\u6570\u7ec4\uff0c\u7136\u540e\u7ed3\u679c\u5305\u88c5\u5728DataFrame\u4e2d\u3002 \u4e00\u4e2a\u5bf9\u7edf\u8ba1\u5e94\u7528\u6709\u7528\u7684\u79d8\u8bc0\u662f\uff1a\u7ed3\u5408 get_dummies \u548c\u8bf8\u5982 cut \u4e4b\u7c7b\u7684\u79bb\u6563\u5316\u51fd\u6570\uff1a np . random . seed ( 12345 ) values = np . random . rand ( 10 ) values bins = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1 ] pd . get_dummies ( pd . cut ( values , bins )) (0.0, 0.2] (0.2, 0.4] (0.4, 0.6] (0.6, 0.8] (0.8, 1.0] 0 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 3 0 1 0 0 0 4 0 0 1 0 0 5 0 0 1 0 0 6 0 0 0 0 1 7 0 0 0 1 0 8 0 0 0 1 0 9 0 0 0 1 0 \u6211\u4eec\u7528 numpy.random.seed \uff0c\u4f7f\u8fd9\u4e2a\u4f8b\u5b50\u5177\u6709\u786e\u5b9a\u6027\u3002\u672c\u4e66\u540e\u9762\u4f1a\u4ecb\u7ecd pandas.get_dummies \u3002 # h = H(pd) # d = h.dicts # d[\"function\"] # [i for i in dir(pd) if \"na\" in i]","title":"7.11.\u6570\u636e\u5904\u7406"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_1","text":"pandas\u7684 DataFrame \u8bd5\u56fe\u6a21\u4effR\u8bed\u8a00\u4e2d\u7684 data.frame \u6570\u636e\u7ed3\u6784\uff0c\u4f46\u5728Python\u4e2d\uff0cpandas\u5efa\u7acb\u5728numpy\u4e4b\u4e0a\uff0c\u800c numpy \u53ea\u6709 nan \u503c\uff08Not a Number\uff09\uff0c\u56e0\u6b64pandas\u7528 nan \u503c\u8868\u793a \u7f3a\u5931\u6570\u636e \uff0cPython\u5185\u7f6e\u7684None\u503c\u5728 DataFrame \u4e2d\u4e5f\u4f5c\u4e3a nan \u503c\u3002\u4f46\u5728R\u8bed\u8a00\u4e2d\uff0c NA \u3001 NaN \u3001 Null \u6709\u4e0d\u540c\u7684\u610f\u4e49\uff1a NA \uff1a\u8868\u793a\u7f3a\u5931\u503c(Missing value)\uff0c\u662f\u201cNot Available\u201d\u7684\u7f29\u5199 NaN \uff1a\u8868\u793a\u975e\u6570\u503c\uff0c\u662f\u201cNot a Number\u201d\u7684\u7f29\u5199 NULL \uff1a\u8868\u793a\u7a7a\u503c\uff0c\u5373\u6ca1\u6709\u5185\u5bb9 \u56e0\u6b64\u5728pandas\u4e2d\uff0c\u5224\u65ad\u7f3a\u5931\u503c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a .isna \u548c isnull \uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u76f8\u540c\u7684\u3002\u867d\u7136\u7f3a\u5931\u6570\u636e\u5728pandas\u4e2d\u5448\u73b0\u7684\u65b9\u5f0f\u6709\u4e9b\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u53ef\u4ee5\u4fdd\u8bc1\u529f\u80fd\u6b63\u5e38\u3002 \u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u7f3a\u5931\u6570\u636e\u5904\u7406\u7684\u51fd\u6570\uff1a \u65b9\u6cd5 \u8bf4\u660e isnull \u3001 isna \u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u5e03\u5c14\u503c\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5e03\u5c14\u503c\u8868\u793a\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c/NA\uff0c\u8be5\u5bf9\u8c61\u7684\u7c7b\u578b\u4e0e\u6e90\u7c7b\u578b\u4e00\u6837 fillna \u7528\u6307\u5b9a\u503c\u6216\u63d2\u503c\u65b9\u6cd5\uff08\u5982 ffill \u6216 bfill \uff09\u586b\u5145\u7f3a\u5931\u6570\u636e dropna \u6839\u636e\u5404\u6807\u7b7e\u7684\u503c\u4e2d\u662f\u5426\u5b58\u5728\u7f3a\u5931\u6570\u636e\u5bf9\u8f74\u6807\u7b7e\u8fdb\u884c\u8fc7\u6ee4\uff0c\u53ef\u901a\u8fc7\u9608\u503c\u8c03\u8282\u5bf9\u7f3a\u5931\u503c\u7684\u5bb9\u5fcd\u5ea6 notnull isnull \u7684\u5426\u5b9a\u5f0f","title":"\u5904\u7406\u7f3a\u5931\u503c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_2","text":"df . isna () a b c d 0 False False False False 1 False True False False 2 True False False False 3 True True True True 4 True False False False 5 False False True False","title":"\u7b5b\u9009\u51fa\u7f3a\u5931\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_3","text":"df [ np . array ( df . isna ())] a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 print ( df . isna () . any ( axis = 1 )) df [ df . isna () . any ( axis = 1 )] 0 False 1 True 2 True 3 True 4 True 5 True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\u6570 df . isna () . any ( axis = 1 ) . sum () 5","title":"\u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_4","text":"print ( df . isna () . any ( axis = 0 )) df [ np . array ( df . isna ())] a True b True c True d True dtype: bool a b c d 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 3 NaN NaN NaN NaN 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u7edf\u8ba1\u6709\u7f3a\u5931\u503c\u7684\u5217\u6570 df . isna () . any ( axis = 0 ) . sum () 4","title":"\u7b5b\u9009\u51fa\u6709\u7f3a\u5931\u503c\u7684\u5217"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_5","text":"dropna ( axis = 0 , how = \"any\" , thresh = None , subset = None , inplace = False ) how \uff1a how=any \uff0c\u5220\u9664\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1b how=all \uff0c\u5220\u9664\u6240\u6709\u6570\u636e\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\u3002 thresh \uff1a\u5982\u679c\u67d0\u4e00\u884c\uff08\u5217\uff09\u6709 thresh \u4e2a\u975e NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\u8be5\u884c\uff08\u5217\uff09\u3002 subset \uff1a\u5220\u9664 NA \u6570\u636e\u65f6\uff0c\u8981\u8003\u8651\u7684\u5176\u4ed6\u8f74\u4e0a\u7684\u6807\u7b7e\u3002\u5373\u53ea\u8981\u8be5\u6807\u7b7e\u4e0d\u662f NA \u503c\uff0c\u5219\u65e0\u9700\u5220\u9664\u3002 \u5220\u9664\u6240\u6709\u5b58\u5728\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a df . dropna ( how = \"any\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 \u5220\u9664\u6240\u6709\u503c\u90fd\u662f\u7f3a\u5931\u6570\u636e\u7684\u884c\u6216\u5217\uff1a # \u56e0\u4e3a\u6ca1\u6709\u4e00\u884c\u6216\u5217\u90fd\u662fNA\u503c \u6240\u4ee5\u4e0d\u5220\u9664\u6570\u636e df . dropna ( how = \"all\" , axis = 0 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u6bcf\u4e00\u884c\u53ea\u8981\u67093\u4e2a\u503c\u4e0d\u662f NA \u503c\uff0c\u5219\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , thresh = 3 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 2 NaN 9.0 10.0 11.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u53ea\u8981\u5217 a \u7684\u503c\u4e0d\u662f NA \u503c\uff0c\u5c31\u4e0d\u5220\u9664\uff1a df . dropna ( how = \"any\" , axis = 0 , subset = [ \"a\" ]) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 NaN 6.0 7.0 5 20.0 21.0 NaN 23.0","title":"\u5220\u9664\u7f3a\u5931\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_6","text":"fillna ( value = None , method = None , axis = None , inplace = False , limit = None , downcast = None ) value \uff1a scalar, dict, Series, or DataFrame \u3002\u7528\u4e8e\u586b\u5145\u7684\u503c\u3002\u5982\u679c\u4f20\u5165 dict \u3001 Series \u3001 DataFrame \uff0c\u5219\u6307\u5b9a\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2aindex\uff08\u5bf9\u4e8e Series \uff09\u6216\u54ea\u4e2a\u503c\u586b\u5145\u54ea\u4e2a\u5217\uff08\u5bf9\u4e8e DataFrame \uff09\u3002\u4e0d\u5728 dict \u3001 Series \u3001 DataFrame \u4e2d\u7684\u503c\u5c06\u4e0d\u88ab\u586b\u5145\u3002 method \uff1a {'backfill', 'bfill', 'pad', 'ffill', None} \u3002\u7528\u4e8e\u586b\u5145\u7684\u65b9\u6cd5\u3002 backfill \u548c bfill \u662f\u540e\u5411\u586b\u5145\uff08\u4ece\u540e\u5411\u524d\uff09\uff0c pad \u548c ffill \u662f\u524d\u5411\u586b\u5145\u3002 limit \uff1a int \u3002\u5f53\u6307\u5b9a\u4e86 method \u53c2\u6570\u65f6\uff0c limit \u662f\u6700\u5927\u8fde\u7eed\u586b\u5145\u7684\u6570\u91cf\u3002\u5f53\u6ca1\u6709\u6307\u5b9a method \u53c2\u6570\u65f6\uff0c limit \u662f\u6bcf\u4e2a\u8f74\u6700\u5927\u586b\u5145\u6570\u91cf\u3002 downcast \uff1a dict of item->dtype \uff0c\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u3002 \u5168\u90e8 NA \u503c\u586b\u5145\u4e3a10\uff0c\u6bcf\u4e2a\u8f74\u6700\u591a\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( value = 10 , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 10.0 6.0 7.0 2 10.0 9.0 10.0 11.0 3 10.0 10.0 10.0 10.0 4 NaN 17.0 18.0 19.0 5 20.0 21.0 10.0 23.0 \u540e\u5411\u586b\u5145 NA \u503c\uff0c\u6700\u591a\u8fde\u7eed\u586b\u51452\u4e2a NA \u503c\uff1a df . fillna ( method = \"bfill\" , limit = 2 ) a b c d 0 0.0 1.0 2.0 3.0 1 4.0 9.0 6.0 7.0 2 NaN 9.0 10.0 11.0 3 20.0 17.0 18.0 19.0 4 20.0 17.0 18.0 19.0 5 20.0 21.0 NaN 23.0 \u5982\u679c\u60f3\u7528\u5e73\u5747\u503c\u6216\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u5145\uff0c\u4e5f\u662f\u5f88\u65b9\u4fbf\u7684\uff1a print ( df . mean ()) df . fillna ( df . mean ()) a 8.0 b 12.0 c 9.0 d 12.6 dtype: float64 a b c d 0 0.0 1.0 2.0 3.0 1 4.0 12.0 6.0 7.0 2 8.0 9.0 10.0 11.0 3 8.0 12.0 9.0 12.6 4 8.0 17.0 18.0 19.0 5 20.0 21.0 9.0 23.0","title":"\u586b\u5145\u7f3a\u5931\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_7","text":"data = pd . DataFrame ({ 'k1' : [ 'one' , 'two' ] * 3 + [ 'two' ], 'k2' : [ 1 , 1 , 2 , 3 , 3 , 4 , 4 ]}) data k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 6 two 4 DataFrame\u7684 duplicated \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578b Series \uff0c\u8868\u793a\u5404\u884c\u662f\u5426\u662f\u91cd\u590d\u884c\uff08\u524d\u9762\u51fa\u73b0\u8fc7\u7684\u884c\uff09\uff1a data . duplicated () 0 False 1 False 2 False 3 False 4 False 5 False 6 True dtype: bool drop_duplicates \u65b9\u6cd5\u79fb\u9664\u91cd\u590d\u6570\u636e\uff1a data . drop_duplicates () k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 5 two 4 \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u9ed8\u8ba4\u4f1a\u5224\u65ad\u5168\u90e8\u5217\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u5217\u8fdb\u884c\u91cd\u590d\u9879\u5224\u65ad\uff1a data . duplicated ([ \"k1\" ]) 0 False 1 False 2 True 3 True 4 True 5 True 6 True dtype: bool duplicated\u548cdrop_duplicates\u9ed8\u8ba4\u4fdd\u7559\u7684\u662f\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7ec4\u5408\u3002\u4f20\u5165keep='last'\u5219\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\uff1a data . drop_duplicates ([ 'k1' , 'k2' ], keep = 'last' ) k1 k2 0 one 1 1 two 1 2 one 2 3 two 3 4 one 3 6 two 4","title":"\u79fb\u9664\u91cd\u590d\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_8","text":"\u5bf9\u4e8e\u8bb8\u591a\u6570\u636e\u96c6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u6570\u7ec4\u3001Series\u6216DataFrame\u5217\u4e2d\u7684\u503c\u6765\u5b9e\u73b0\u8f6c\u6362\u5de5\u4f5c\u3002 data = pd . DataFrame ({ 'food' : [ 'bacon' , 'pulled pork' , 'bacon' , 'pastrami' , 'corned beef' , 'bacon' , 'pastrami' , 'honey ham' , 'nova lox' ], 'ounces' : [ 4 , 3 , 12 , 6 , 7.5 , 8 , 3 , 5 , 6 ]}) data food ounces 0 bacon 4.0 1 pulled pork 3.0 2 bacon 12.0 3 pastrami 6.0 4 corned beef 7.5 5 bacon 8.0 6 pastrami 3.0 7 honey ham 5.0 8 nova lox 6.0 \u5047\u8bbe\u4f60\u60f3\u8981\u6dfb\u52a0\u4e00\u5217\u8868\u793a\u8be5\u8089\u7c7b\u98df\u7269\u6765\u6e90\u7684\u52a8\u7269\u7c7b\u578b\u3002\u6211\u4eec\u5148\u7f16\u5199\u4e00\u4e2a\u4e0d\u540c\u8089\u7c7b\u5230\u52a8\u7269\u7684\u6620\u5c04\uff1a meat_to_animal = { 'bacon' : 'pig' , 'pulled pork' : 'pig' , 'pastrami' : 'cow' , 'corned beef' : 'cow' , 'honey ham' : 'pig' , 'nova lox' : 'salmon' } data [ 'food' ] . map ( meat_to_animal ) 0 pig 1 pig 2 pig 3 cow 4 cow 5 pig 6 cow 7 pig 8 salmon Name: food, dtype: object","title":"\u5229\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_9","text":"\u5229\u7528 fillna \u65b9\u6cd5\u586b\u5145\u7f3a\u5931\u6570\u636e\u53ef\u4ee5\u770b\u505a\u503c\u66ff\u6362\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\u524d\u9762\u5df2\u7ecf\u770b\u5230\uff0cmap\u53ef\u7528\u4e8e\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u5b50\u96c6\uff0c\u800creplace\u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u8be5\u529f\u80fd\u7684\u66f4\u7b80\u5355\u3001\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2aSeries\uff1a data = pd . Series ([ 1. , - 999. , 2. , - 999. , - 1000. , 3. ]) data 0 1.0 1 -999.0 2 2.0 3 -999.0 4 -1000.0 5 3.0 dtype: float64 -999\u8fd9\u4e2a\u503c\u53ef\u80fd\u662f\u4e00\u4e2a\u8868\u793a\u7f3a\u5931\u6570\u636e\u7684\u6807\u8bb0\u503c\u3002\u8981\u5c06\u5176\u66ff\u6362\u4e3apandas\u80fd\u591f\u7406\u89e3\u7684NA\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528replace\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Series\uff08\u9664\u975e\u4f20\u5165inplace=True\uff09\uff1a data . replace ( - 999 , np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 -1000.0 5 3.0 dtype: float64 \u5982\u679c\u4f60\u5e0c\u671b\u4e00\u6b21\u6027\u66ff\u6362\u591a\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u7531\u5f85\u66ff\u6362\u503c\u7ec4\u6210\u7684\u5217\u8868\u4ee5\u53ca\u4e00\u4e2a\u66ff\u6362\u503c\uff1a\uff1a data . replace ([ - 999 , - 1000 ], np . nan ) 0 1.0 1 NaN 2 2.0 3 NaN 4 NaN 5 3.0 dtype: float64 \u8981\u8ba9\u6bcf\u4e2a\u503c\u6709\u4e0d\u540c\u7684\u66ff\u6362\u503c\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u66ff\u6362\u5217\u8868\uff1a data . replace ([ - 999 , - 1000 ], [ np . nan , 0 ]) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64 \u4f20\u5165\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u5b57\u5178\uff1a data . replace ({ - 999 : np . nan , - 1000 : 0 }) 0 1.0 1 NaN 2 2.0 3 NaN 4 0.0 5 3.0 dtype: float64","title":"\u66ff\u6362\u503c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_10","text":"\u8ddfSeries\u4e2d\u7684\u503c\u4e00\u6837\uff0c\u8f74\u6807\u7b7e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4e0d\u540c\u6807\u7b7e\u7684\u5bf9\u8c61\u3002\u8f74\u8fd8\u53ef\u4ee5\u88ab\u5c31\u5730\u4fee\u6539\uff0c\u800c\u65e0\u9700\u65b0\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u63a5\u4e0b\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a data = pd . DataFrame ( np . arange ( 12 ) . reshape (( 3 , 4 )), index = [ 'Ohio' , 'Colorado' , 'New York' ], columns = [ 'one' , 'two' , 'three' , 'four' ]) data one two three four Ohio 0 1 2 3 Colorado 4 5 6 7 New York 8 9 10 11 \u8ddfSeries\u4e00\u6837\uff0c\u8f74\u7d22\u5f15\u4e5f\u6709\u4e00\u4e2a map \u65b9\u6cd5\uff1a transform = lambda x : x [: 4 ] . upper () data . index . map ( transform ) Index(['OHIO', 'COLO', 'NEW '], dtype='object') \u4f60\u53ef\u4ee5\u5c06\u5176\u8d4b\u503c\u7ed9index\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5bf9DataFrame\u8fdb\u884c\u5c31\u5730\u4fee\u6539\uff1a data . index = data . index . map ( transform ) data one two three four OHIO 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 \u5982\u679c\u60f3\u8981\u521b\u5efa\u6570\u636e\u96c6\u7684\u8f6c\u6362\u7248\uff08\u800c\u4e0d\u662f\u4fee\u6539\u539f\u59cb\u6570\u636e\uff09\uff0c\u6bd4\u8f83\u5b9e\u7528\u7684\u65b9\u6cd5\u662f rename \uff1a data . rename ( index = str . title , columns = str . upper ) ONE TWO THREE FOUR Ohio 0 1 2 3 Colo 4 5 6 7 New 8 9 10 11 \u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0crename\u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u578b\u5bf9\u8c61\u5b9e\u73b0\u5bf9\u90e8\u5206\u8f74\u6807\u7b7e\u7684\u66f4\u65b0\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, columns = { 'three' : 'peekaboo' }) one two peekaboo four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11 rename\u53ef\u4ee5\u5b9e\u73b0\u590d\u5236DataFrame\u5e76\u5bf9\u5176\u7d22\u5f15\u548c\u5217\u6807\u7b7e\u8fdb\u884c\u8d4b\u503c\u3002\u5982\u679c\u5e0c\u671b\u5c31\u5730\u4fee\u6539\u67d0\u4e2a\u6570\u636e\u96c6\uff0c\u4f20\u5165 inplace=True \u5373\u53ef\uff1a data . rename ( index = { 'OHIO' : 'INDIANA' }, inplace = True ) data one two three four INDIANA 0 1 2 3 COLO 4 5 6 7 NEW 8 9 10 11","title":"\u91cd\u547d\u540d\u8f74\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_11","text":"\u6709\u65f6\u5019\uff0c\u6211\u4eec\u76f8\u5bf9\u8fde\u7eed\u7684\u6570\u636e\u5206\u7ec4\u5206\u6790\uff0c\u800cpandas\u6709\u4e00\u4e9b\u80fd\u6839\u636e\u6307\u5b9a \u201c\u9762\u5143\u201d \uff08bin\uff09\u6216\u6837\u672c\u5206\u4f4d\u6570\u5c06\u6570\u636e\u62c6\u5206\u6210\u591a\u5757\u7684\u5de5\u5177\uff08\u6bd4\u5982 pandas.cut() \u548cqcut\uff09\u3002\u5c06\u8fd9\u4e9b\u51fd\u6570\u8ddfgroupby\u7ed3\u5408\u8d77\u6765\uff0c\u5c31\u80fd\u975e\u5e38\u8f7b\u677e\u5730\u5b9e\u73b0\u5bf9\u6570\u636e\u96c6\u7684\u6876\uff08bucket\uff09\u6216\u5206\u4f4d\u6570\uff08quantile\uff09\u5206\u6790\u4e86\u3002 \u5047\u8bbe\u6709\u4e00\u7ec4\u4eba\u5458\u6570\u636e\uff0c\u60f3\u5c06\u5b83\u4eec\u5212\u5206\u4e3a\u201c18\u523025\u201d\u3001\u201c26\u523035\u201d\u3001\u201c35\u523060\u201d\u4ee5\u53ca\u201c60\u4ee5\u4e0a\u201d4\u4e2a\u4e0d\u540c\u7684\u5e74\u9f84\u7ec4\uff1a ages = [ 20 , 22 , 25 , 27 , 21 , 23 , 37 , 31 , 61 , 45 , 41 , 32 ] bins = [ 18 , 25 , 35 , 60 , 100 ] cats = pd . cut ( ages , bins ) cats [ (18, 25 ] , ( 18 , 25 ] , ( 18 , 25 ] , ( 25 , 35 ] , ( 18 , 25 ] , ..., ( 25 , 35 ] , ( 60 , 100 ] , ( 35 , 60 ] , ( 35 , 60 ] , ( 25 , 35 ]] Length : 12 Categories ( 4 , interval [ int64 ] ) : [ (18, 25 ] < ( 25 , 35 ] < ( 35 , 60 ] < ( 60 , 100 ]] list ( cats ) [Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(25, 35, closed='right'), Interval(18, 25, closed='right'), Interval(18, 25, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right'), Interval(60, 100, closed='right'), Interval(35, 60, closed='right'), Interval(35, 60, closed='right'), Interval(25, 35, closed='right')] pandas\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Categorical\u5bf9\u8c61\u3002\u7ed3\u679c\u5c55\u793a\u4e86 pandas.cut \u5212\u5206\u7684 \u9762\u5143 \u3002\u4f60\u53ef\u4ee5\u5c06\u8f93\u51fa\u7ed3\u679c\u770b\u505a\u4e00\u7ec4\u8868\u793a \u9762\u5143 \u540d\u79f0\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u7684\u5e95\u5c42\u542b\u6709\u4e00\u4e2a\u8868\u793a\u4e0d\u540c\u5206\u7c7b\u540d\u79f0\u7684\u7c7b\u578b\u6570\u7ec4\uff0c\u4ee5\u53ca\u4e00\u4e2acodes\u5c5e\u6027\u4e2d\u7684\u5e74\u9f84\u6570\u636e\u7684\u6807\u7b7e\uff1a pprint . pprint ( cats . codes ) pprint . pprint ( cats . categories ) pd . value_counts ( cats ) array ( [ 0, 0, 0, ..., 2, 2, 1 ] , dtype = int8 ) IntervalIndex ( [ (18, 25 ] , ( 25 , 35 ] , ( 35 , 60 ] , ( 60 , 100 ]] , closed = 'right' , dtype = 'interval[int64]' ) (18, 25] 5 (35, 60] 3 (25, 35] 3 (60, 100] 1 dtype: int64 pd.value_counts(cats) \u662f pandas.cut \u7ed3\u679c\u7684\u9762\u5143\u8ba1\u6570\u3002","title":"\u79bb\u6563\u5316\u548c\u9762\u5143\u5212\u5206"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_12","text":"\u7531cut\u8fd4\u56de\u7684Categorical\u5bf9\u8c61\u53ef\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165groupby\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bf9ages\u505a\u4e00\u4e9b\u7edf\u8ba1\u8ba1\u7b97\uff1a def get_stats ( group ): return { 'min' : group . min (), 'max' : group . max (), 'count' : group . count (), 'mean' : group . mean ()} grouped = Series ( ages ) . groupby ( cats ) grouped . apply ( get_stats ) . unstack () min max count mean (18, 25] 20.0 25.0 5.0 22.2 (25, 35] 27.0 32.0 3.0 30.0 (35, 60] 37.0 45.0 3.0 41.0 (60, 100] 61.0 61.0 1.0 61.0","title":"\u793a\u4f8b\uff1a\u5206\u7ec4\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_13","text":"\u5bf9\u4e8e\u7f3a\u5931\u6570\u636e\u7684\u586b\u5145\u5de5\u4f5c\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5e0c\u671b\u7528\u4e00\u4e2a\u7531\u6570\u636e\u96c6\u672c\u8eab\u6240\u884d\u751f\u51fa\u6765\u7684\u503c\u53bb\u586b\u5145NA\u503c\u3002\u4f8b\u5982\uff0c\u7528\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c\u3002 \u5047\u8bbe\u4f60\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u5206\u7ec4\u586b\u5145\u4e0d\u540c\u7684\u503c\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u6570\u636e\u5206\u7ec4\uff0c\u5e76\u4f7f\u7528apply\u548c\u4e00\u4e2a\u80fd\u591f\u5bf9\u5404\u6570\u636e\u5757\u8c03\u7528 fillna \u7684\u51fd\u6570\u5373\u53ef\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6709\u5173\u7f8e\u56fd\u51e0\u4e2a\u5dde\u7684\u793a\u4f8b\u6570\u636e\uff0c\u8fd9\u4e9b\u5dde\u53c8\u88ab\u5206\u4e3a\u4e1c\u90e8\u548c\u897f\u90e8\uff1a data = pd . read_excel ( r \".\\datasets\\example.xlsx\" , index_col = 0 ) print ( data , \" \\n \" ) print ( data . groupby ( \"region\" ) . mean ()) index region Ohio 22 . 0 East New York - 2 . 0 East Vermont NaN East Florida 1 . 0 East Oregon - 8 . 0 West Nevada NaN West California 10 . 0 West Idaho NaN West index region East 7 . 0 West 1 . 0 \u6211\u4eec\u53ef\u4ee5\u7528\u5206\u7ec4\u5e73\u5747\u503c\u53bb\u586b\u5145NA\u503c: fill_mean = lambda g : g . fillna ( g . mean ()) data . groupby ( \"region\" ) . apply ( fill_mean ) index region region East Ohio 22.0 East New York -2.0 East Vermont 7.0 East Florida 1.0 East West Oregon -8.0 West Nevada 1.0 West California 10.0 West Idaho 1.0 West \u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u9884\u5b9a\u4e49\u5404\u7ec4\u7684\u586b\u5145\u503c\u3002\u7531\u4e8e\u5206\u7ec4\u5177\u6709\u4e00\u4e2aname\u5c5e\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u62ff\u6765\u7528\u4e00\u4e0b\uff1a fill_values = { 'East' : 0.5 , 'West' : - 1 } fill_func = lambda g : g . fillna ( fill_values [ g . name ]) data . groupby ( \"region\" ) . apply ( fill_func ) index region Ohio 22.0 East New York -2.0 East Vermont 0.5 East Florida 1.0 East Oregon -8.0 West Nevada -1.0 West California 10.0 West Idaho -1.0 West","title":"\u793a\u4f8b\uff1a\u5206\u7ec4\u586b\u5145\u7f3a\u5931\u503c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#rightlabels","text":"\u8ddf\u201c\u533a\u95f4\u201d\u7684\u6570\u5b66\u7b26\u53f7\u4e00\u6837\uff0c\u5706\u62ec\u53f7\u8868\u793a\u5f00\u7aef\uff0c\u800c\u65b9\u62ec\u53f7\u5219\u8868\u793a\u95ed\u7aef\uff08\u5305\u62ec\uff09\u3002\u54ea\u8fb9\u662f\u95ed\u7aef\u53ef\u4ee5\u901a\u8fc7right=False\u8fdb\u884c\u4fee\u6539\uff1a pd . cut ( ages , [ 18 , 26 , 36 , 61 , 100 ], right = False ) [ [18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36) ] Length : 12 Categories ( 4 , interval [ int64 ] ) : [ [18, 26) < [26, 36) < [36, 61) < [61, 100) ] \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u5230 labels \u53c2\u6570\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u9762\u5143\u540d\u79f0\uff1a group_names = [ 'Youth' , 'YoungAdult' , 'MiddleAged' , 'Senior' ] pd . cut ( ages , bins , labels = group_names ) [Youth, Youth, Youth, YoungAdult, Youth, ..., YoungAdult, Senior, MiddleAged, MiddleAged, YoungAdult] Length: 12 Categories (4, object): [Youth < YoungAdult < MiddleAged < Senior]","title":"right\u548clabels\u53c2\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#cut-vs-qcut","text":"\u5982\u679c\u5411 cut \u4f20\u5165\u7684\u662f\u9762\u5143\u7684\u6570\u91cf\u800c\u4e0d\u662f\u786e\u5207\u7684\u9762\u5143\u8fb9\u754c\uff0c\u5219\u5b83\u4f1a\u6839\u636e\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u7b49\u957f\u9762\u5143\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u4e9b\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u5206\u6210\u56db\u7ec4\uff1a data = np . random . rand ( 20 ) pd . cut ( data , 4 , precision = 2 ) [ (0.75, 0.99 ] , ( 0.75 , 0.99 ] , ( 0.0074 , 0.25 ] , ( 0.0074 , 0.25 ] , ( 0.25 , 0.5 ] , ..., ( 0.5 , 0.75 ] , ( 0.75 , 0.99 ] , ( 0.5 , 0.75 ] , ( 0.75 , 0.99 ] , ( 0.0074 , 0.25 ]] Length : 20 Categories ( 4 , interval [ float64 ] ) : [ (0.0074, 0.25 ] < ( 0.25 , 0.5 ] < ( 0.5 , 0.75 ] < ( 0.75 , 0.99 ]] \u9009\u9879precision=2\uff0c\u9650\u5b9a\u5c0f\u6570\u53ea\u6709\u4e24\u4f4d\u3002 qcut \u662f\u4e00\u4e2a\u975e\u5e38\u7c7b\u4f3c\u4e8e cut \u7684\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u9762\u5143\u5212\u5206\u3002\u6839\u636e\u6570\u636e\u7684\u5206\u5e03\u60c5\u51b5\uff0c cut \u53ef\u80fd\u65e0\u6cd5\u4f7f\u5404\u4e2a\u9762\u5143\u4e2d\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u636e\u70b9\u3002\u800c qcut \u7531\u4e8e\u4f7f\u7528\u7684\u662f\u6837\u672c\u5206\u4f4d\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u5927\u5c0f\u57fa\u672c\u76f8\u7b49\u7684\u9762\u5143\uff1a data = np . random . randn ( 1000 ) # Normally distributed cats = pd . qcut ( data , 4 ) # Cut into quartiles pd . value_counts ( cats ) (0.62, 3.928] 250 (-0.0192, 0.62] 250 (-0.691, -0.0192] 250 (-2.9499999999999997, -0.691] 250 dtype: int64 \u4e0ecut\u7c7b\u4f3c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u81ea\u5b9a\u4e49\u7684\u5206\u4f4d\u6570\uff080\u52301\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u5305\u542b\u7aef\u70b9\uff09\uff1a pd . qcut ( data , [ 0 , 0.1 , 0.5 , 0.9 , 1. ]) [ (1.289, 3.928 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ] , ( - 0.0192 , 1.289 ] , ( - 0.0192 , 1.289 ] , ..., ( 1.289 , 3.928 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ] , ( - 1.191 , - 0.0192 ]] Length : 1000 Categories ( 4 , interval [ float64 ] ) : [ (-2.9499999999999997, -1.191 ] < ( - 1.191 , - 0.0192 ] < ( - 0.0192 , 1.289 ] < ( 1.289 , 3.928 ]]","title":"cut\u51fd\u6570 vs qcut\u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_14","text":"\u8fc7\u6ee4\u6216\u53d8\u6362\u5f02\u5e38\u503c\uff08outlier\uff09\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5c31\u662f\u8fd0\u7528\u6570\u7ec4\u8fd0\u7b97\u3002\u6765\u770b\u4e00\u4e2a\u542b\u6709\u6b63\u6001\u5206\u5e03\u6570\u636e\u7684DataFrame\uff1a data = pd . DataFrame ( np . random . randn ( 1000 , 4 )) data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.022282 -0.001383 -0.055245 0.043350 std 1.008995 0.995882 0.998735 0.996658 min -3.184377 -3.745356 -3.428254 -3.645860 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.525865 2.735527 3.366626 2.653656 \u5047\u8bbe\u4f60\u60f3\u8981\u627e\u51fa\u67d0\u5217\u4e2d\u7edd\u5bf9\u503c\u5927\u5c0f\u8d85\u8fc73\u7684\u503c\uff1a col = data [ 2 ] col [ np . abs ( col ) > 3 ] 267 -3.428254 644 3.366626 Name: 2, dtype: float64 \u8981\u9009\u51fa\u5168\u90e8\u542b\u6709\u201c\u8d85\u8fc73\u6216\uff0d3\u7684\u503c\u201d\u7684\u884c\uff0c\u4f60\u53ef\u4ee5\u5728\u5e03\u5c14\u578bDataFrame\u4e2d\u4f7f\u7528 any \u65b9\u6cd5\uff1a data [( np . abs ( data ) > 3 ) . any ( axis = 1 )] 0 1 2 3 50 -0.025907 -3.399312 -0.974657 -0.685312 69 3.260383 0.963301 1.201206 -1.852001 145 -0.196713 -3.745356 -1.520113 -0.346839 244 -3.056990 1.918403 -0.578828 1.847446 267 0.326045 0.425384 -3.428254 -0.296336 331 -3.184377 1.369891 -1.074833 -0.089937 552 0.208011 -0.150923 -0.362528 -3.548824 644 0.193299 1.397822 3.366626 -2.372214 791 3.525865 0.283070 0.544635 0.462204 811 -0.450721 -0.080332 0.599947 -3.645860 \u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5bf9\u503c\u8fdb\u884c\u8bbe\u7f6e\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5c06\u503c\u9650\u5236\u5728\u533a\u95f4\uff0d3\u52303\u4ee5\u5185\uff1a data [ np . abs ( data ) > 3 ] = np . sign ( data ) * 3 data . describe () 0 1 2 3 count 1000.000000 1000.000000 1000.000000 1000.000000 mean 0.021737 -0.000238 -0.055183 0.044545 std 1.005754 0.992064 0.996186 0.992637 min -3.000000 -3.000000 -3.000000 -3.000000 25% -0.628122 -0.697084 -0.747963 -0.600254 50% -0.016127 -0.026381 -0.096965 0.043663 75% 0.695298 0.699046 0.622384 0.740562 max 3.000000 2.735527 3.000000 2.653656 \u6839\u636e\u6570\u636e\u7684\u503c\u662f\u6b63\u8fd8\u662f\u8d1f\uff0c np.sign(data) \u53ef\u4ee5\u751f\u62101\u548c-1\uff1a np . sign ( data ) . head () 0 1 2 3 0 1.0 1.0 1.0 -1.0 1 1.0 1.0 -1.0 -1.0 2 1.0 -1.0 -1.0 -1.0 3 1.0 1.0 -1.0 1.0 4 -1.0 -1.0 -1.0 -1.0","title":"\u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_15","text":"\u5229\u7528 numpy.random.permutation \u51fd\u6570\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u5bf9Series\u6216DataFrame\u7684\u5217\u7684\u6392\u5217\u5de5\u4f5c\uff08permuting\uff0c\u968f\u673a\u91cd\u6392\u5e8f\uff09\u3002\u901a\u8fc7\u9700\u8981\u6392\u5217\u7684\u8f74\u7684\u957f\u5ea6\u8c03\u7528permutation\uff0c\u53ef\u4ea7\u751f\u4e00\u4e2a\u8868\u793a\u65b0\u987a\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff1a df = pd . DataFrame ( np . arange ( 5 * 4 ) . reshape (( 5 , 4 ))) sampler = np . random . permutation ( 5 ) sampler array([4, 3, 2, 1, 0]) \u7136\u540e\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8e iloc \u7684\u7d22\u5f15\u64cd\u4f5c\u6216take\u51fd\u6570\u4e2d\u4f7f\u7528\u8be5\u6570\u7ec4\u4e86\uff1a df df . take ( sampler ) 0 1 2 3 4 16 17 18 19 3 12 13 14 15 2 8 9 10 11 1 4 5 6 7 0 0 1 2 3 \u5982\u679c\u4e0d\u60f3\u7528\u66ff\u6362\u7684\u65b9\u5f0f\u9009\u53d6\u968f\u673a\u5b50\u96c6\uff0c\u53ef\u4ee5\u5728Series\u548cDataFrame\u4e0a\u4f7f\u7528sample\u65b9\u6cd5\uff1a df . sample ( n = 3 ) 0 1 2 3 0 0 1 2 3 4 16 17 18 19 1 4 5 6 7 \u8981\u901a\u8fc7\u66ff\u6362\u7684\u65b9\u5f0f\u4ea7\u751f\u6837\u672c\uff08\u5141\u8bb8\u91cd\u590d\u9009\u62e9\uff09\uff0c\u53ef\u4ee5\u4f20\u9012replace=True\u5230sample\uff1a choices = pd . Series ([ 5 , 7 , - 1 , 6 , 4 ]) draws = choices . sample ( n = 10 , replace = True ) draws 0 5 1 7 3 6 4 4 0 5 0 5 1 7 0 5 0 5 4 4 dtype: int64","title":"\u6392\u5217\u548c\u968f\u673a\u91c7\u6837"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.11.%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.html#_16","text":"\u53e6\u4e00\u79cd\u5e38\u7528\u4e8e\u7edf\u8ba1\u5efa\u6a21\u6216\u673a\u5668\u5b66\u4e60\u7684\u8f6c\u6362\u65b9\u5f0f\u662f\uff1a\u5c06\u5206\u7c7b\u53d8\u91cf\uff08categorical variable\uff09\u8f6c\u6362\u4e3a\u201c\u54d1\u53d8\u91cf\u201d\u6216\u201c\u6307\u6807\u77e9\u9635\u201d\u3002 \u5982\u679cDataFrame\u7684\u67d0\u4e00\u5217\u4e2d\u542b\u6709k\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u6d3e\u751f\u51fa\u4e00\u4e2ak\u5217\u77e9\u9635\u6216DataFrame\uff08\u5176\u503c\u5168\u4e3a1\u548c0\uff09\u3002pandas\u6709\u4e00\u4e2aget_dummies\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff08\u5176\u5b9e\u81ea\u5df1\u52a8\u624b\u505a\u4e00\u4e2a\u4e5f\u4e0d\u96be\uff09\u3002\u4f7f\u7528\u4e4b\u524d\u7684\u4e00\u4e2aDataFrame\u4f8b\u5b50\uff1a df = pd . DataFrame ({ 'key' : [ 'b' , 'b' , 'a' , 'c' , 'a' , 'b' ], 'data1' : range ( 6 )}) pd . get_dummies ( df [ 'key' ]) a b c 0 0 1 0 1 0 1 0 2 1 0 0 3 0 0 1 4 1 0 0 5 0 1 0 \u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u60f3\u7ed9\u6307\u6807DataFrame\u7684\u5217\u52a0\u4e0a\u4e00\u4e2a\u524d\u7f00\uff0c\u4ee5\u4fbf\u80fd\u591f\u8ddf\u5176\u4ed6\u6570\u636e\u8fdb\u884c\u5408\u5e76\u3002get_dummies\u7684prefix\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff1a dummies = pd . get_dummies ( df [ 'key' ], prefix = 'key' ) df_with_dummy = df [[ 'data1' ]] . join ( dummies ) df_with_dummy data1 key_a key_b key_c 0 0 0 1 0 1 1 0 1 0 2 2 1 0 0 3 3 0 0 1 4 4 1 0 0 5 5 0 1 0 \u5982\u679cDataFrame\u4e2d\u7684\u67d0\u884c\u540c\u5c5e\u4e8e\u591a\u4e2a\u5206\u7c7b\uff0c\u5219\u4e8b\u60c5\u5c31\u4f1a\u6709\u70b9\u590d\u6742\u3002\u770b\u4e00\u4e0bMovieLens 1M\u6570\u636e\u96c6\uff0c14\u7ae0\u4f1a\u66f4\u6df1\u5165\u5730\u7814\u7a76\u5b83\uff1a mnames = [ 'movie_id' , 'title' , 'genres' ] movies = pd . read_table ( './datasets/movies.dat' , sep = '::' , header = None , names = mnames , engine = 'python' ) movies [: 10 ] movie_id title genres 0 1 Toy Story (1995) Animation|Children's|Comedy 1 2 Jumanji (1995) Adventure|Children's|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance 3 4 Waiting to Exhale (1995) Comedy|Drama 4 5 Father of the Bride Part II (1995) Comedy 5 6 Heat (1995) Action|Crime|Thriller 6 7 Sabrina (1995) Comedy|Romance 7 8 Tom and Huck (1995) Adventure|Children's 8 9 Sudden Death (1995) Action 9 10 GoldenEye (1995) Action|Adventure|Thriller \u8981\u4e3a\u6bcf\u4e2agenre\u6dfb\u52a0\u6307\u6807\u53d8\u91cf\u5c31\u9700\u8981\u505a\u4e00\u4e9b\u6570\u636e\u89c4\u6574\u64cd\u4f5c\u3002\u9996\u5148\uff0c\u6211\u4eec\u4ece\u6570\u636e\u96c6\u4e2d\u62bd\u53d6\u51fa\u4e0d\u540c\u7684genre\u503c\uff1a all_genres = [] for x in movies . genres : all_genres . extend ( x . split ( '|' )) genres = pd . unique ( all_genres ) \u73b0\u5728\u6709\uff1a genres \u6784\u5efa\u6307\u6807DataFrame\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u4ece\u4e00\u4e2a\u5168\u96f6DataFrame\u5f00\u59cb\uff1a zero_matrix = np . zeros (( len ( movies ), len ( genres ))) dummies = pd . DataFrame ( zero_matrix , columns = genres ) \u73b0\u5728\uff0c\u8fed\u4ee3\u6bcf\u4e00\u90e8\u7535\u5f71\uff0c\u5e76\u5c06dummies\u5404\u884c\u7684\u6761\u76ee\u8bbe\u4e3a1\u3002\u8981\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f7f\u7528 dummies.columns \u6765\u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u578b\u7684\u5217\u7d22\u5f15\uff1a gen = movies . genres [ 0 ] gen . split ( '|' ) dummies . columns . get_indexer ( gen . split ( '|' )) array([0, 1, 2], dtype=int64) \u7136\u540e\uff0c\u6839\u636e\u7d22\u5f15\uff0c\u4f7f\u7528 .iloc \u8bbe\u5b9a\u503c\uff1a for i , gen in enumerate ( movies . genres ): indices = dummies . columns . get_indexer ( gen . split ( '|' )) dummies . iloc [ i , indices ] = 1 \u7136\u540e\uff0c\u548c\u4ee5\u524d\u6837\uff0c\u518d\u5c06\u5176\u4e0emovies\u5408\u5e76\u8d77\u6765\uff1a movies_windic = movies . join ( dummies . add_prefix ( 'Genre_' )) movies_windic . iloc [ 0 ] movie_id 1 title Toy Story (1995) genres Animation|Children's|Comedy Genre_Animation 1 Genre_Children's 1 Genre_Comedy 1 Genre_Adventure 0 Genre_Fantasy 0 Genre_Romance 0 Genre_Drama 0 Genre_Action 0 Genre_Crime 0 Genre_Thriller 0 Genre_Horror 0 Genre_Sci-Fi 0 Genre_Documentary 0 Genre_War 0 Genre_Musical 0 Genre_Mystery 0 Genre_Film-Noir 0 Genre_Western 0 Name: 0, dtype: object \u7b14\u8bb0\uff1a\u5bf9\u4e8e\u5f88\u5927\u7684\u6570\u636e\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u6784\u5efa\u591a\u6210\u5458\u6307\u6807\u53d8\u91cf\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u6162\u3002\u6700\u597d\u4f7f\u7528\u66f4\u4f4e\u7ea7\u7684\u51fd\u6570\uff0c\u5c06\u5176\u5199\u5165NumPy\u6570\u7ec4\uff0c\u7136\u540e\u7ed3\u679c\u5305\u88c5\u5728DataFrame\u4e2d\u3002 \u4e00\u4e2a\u5bf9\u7edf\u8ba1\u5e94\u7528\u6709\u7528\u7684\u79d8\u8bc0\u662f\uff1a\u7ed3\u5408 get_dummies \u548c\u8bf8\u5982 cut \u4e4b\u7c7b\u7684\u79bb\u6563\u5316\u51fd\u6570\uff1a np . random . seed ( 12345 ) values = np . random . rand ( 10 ) values bins = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1 ] pd . get_dummies ( pd . cut ( values , bins )) (0.0, 0.2] (0.2, 0.4] (0.4, 0.6] (0.6, 0.8] (0.8, 1.0] 0 0 0 0 0 1 1 0 1 0 0 0 2 1 0 0 0 0 3 0 1 0 0 0 4 0 0 1 0 0 5 0 0 1 0 0 6 0 0 0 0 1 7 0 0 0 1 0 8 0 0 0 1 0 9 0 0 0 1 0 \u6211\u4eec\u7528 numpy.random.seed \uff0c\u4f7f\u8fd9\u4e2a\u4f8b\u5b50\u5177\u6709\u786e\u5b9a\u6027\u3002\u672c\u4e66\u540e\u9762\u4f1a\u4ecb\u7ecd pandas.get_dummies \u3002 # h = H(pd) # d = h.dicts # d[\"function\"] # [i for i in dir(pd) if \"na\" in i]","title":"\u8ba1\u7b97\u6307\u6807/\u54d1\u53d8\u91cf"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html","text":"from pandas import DataFrame from pandas import Series import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.24 pandas version: 1.0.1 numpy version: 1.18.1 DataFrame\u7c7b DataFrame\u662f\u4e00\u4e2a\u8868\u683c\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u542b\u6709\u4e00\u7ec4\u6709\u5e8f\u7684\u5217\uff0c\u6bcf\u5217\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u503c\u7c7b\u578b 1 \uff08\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u7b49\uff09\u3002DataFrame\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u505a\u662fSeries\u7684\u5bb9\u5668\u3002 pandas\u4e2d\u7684 DataFrame \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u51fd\u6570\u521b\u5efa - pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) data \uff1a\u6570\u636e\u53ef\u4ee5\u662f\u5404\u79cd\u5f62\u5f0f\uff0c\u5982: ndarray \uff0c series \uff0c map \uff0c lists \uff0c dict \uff0c constant \u548c\u53e6\u4e00\u4e2a DataFrame \u3002 index \uff1a\u884c\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 columns \uff1a\u5217\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 dtype \uff1a\u6570\u636e\u7c7b\u578b\u3002 copy \uff1a\u662f\u5426\u590d\u5236\u6570\u636e\u3002 \u53ef\u4ee5\u8f93\u5165\u7ed9DataFrame\u6784\u9020\u5668\u7684\u6570\u636e\uff1a \u7c7b\u578b \u8bf4\u660e \u4e8c\u7ef4ndarray \u7531\u6570\u7ec4\u3001\u5217\u8868\u6216\u5143\u7ec4\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2a\u5e8f\u5217\u4f5c\u4e3aDataFrame\u7684\u4e00\u5217\u3002 \u6240\u6709\u5e8f\u5217\u7684\u957f\u5ea6\u5fc5\u987b\u76f8\u540c \u3002 NumPy\u7684\u7ed3\u6784\u5316/\u8bb0\u5f55\u6570\u7ec4 \u7c7b\u4f3c\u4e8e\u201c\u7531\u6570\u7ec4\u7ec4\u6210\u7684\u5b57\u5178\u201d \u7531Series\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2aSeries\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u6307\u5b9aindex\uff0c\u5219 \u5404Series\u7684index\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\u3002 \u6bcf\u4e2aSeries\u7684\u957f\u5ea6\u4e0d\u8981\u6c42\u5fc5\u987b\u76f8\u540c \uff0cDataFrame\u4f1a\u4ee5NaN\u586b\u5145\u3002 \u7531\u5b57\u5178\u7ec4\u6210\u7684\u5b57\u5178 \u5404\u5185\u5c42\u5b57\u5178\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u952e\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22 \u5f13\u4e28\uff0c\u8ddf\u7531\u201cSeries\u7ec4\u6210\u7684\u5b57\u5178\u201d\u7684\u60c5\u51b5\u4e00\u6837 \u5b57\u5178\u6216Series\u7684\u5217\u8868 \u5404\u9879\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u4e00\u884c\u3002\u5b57\u5178\u952e\u6216Series\u7d22\u5f15 \u7684\u5e76\u96c6\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u5217\u6807 \u7531list\u6216tuple\u7ec4\u6210\u7684list \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d \u53e6\u2014\u4e2aDataFrame \u8be5DataFrame\u7684\u7d22\u5f15\u5c06\u4f1a\u88ab\u6cbf\u7528\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u4e86\u5176\u4ed6\u7d22\u5f15 NumPy \u7684 Masked Array \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d\u7684\u60c5\u51b5\uff0c\u53ea\u662f\u63a9\u7801\u503c\u5728\u7ed3\u679c DataFrame\u4f1a\u53d8\u6210NA/\u7f3a\u5931\u503c \u603b\u7684\u6765\u8bf4\uff0c\u652f\u6301\u8f93\u5165\u7684\u6570\u636e\u7c7b\u578b\u662f\uff1a dict \u3001 list \u3001 ndarray \u3001 DataFrame \u3002 \u4ece\u5217\u8868\u521b\u5efa \u53ef\u4ee5\u4f7f\u7528 \u5355\u4e2a\u5217\u8868 \u6216 \u5217\u8868\u5185\u5d4c\u5217\u8868 \u6765\u521b\u5efaDataFrame\u3002 \u5355\u4e2a\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [ 1 , 2 , 3 , 4 , 5 ] DataFrame ( data ) 0 0 1 1 2 2 3 3 4 4 5 \u5217\u8868\u5185\u5d4c\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [[ 'Alex' , 10 ],[ 'Bob' , 12 ],[ 'Clarke' , 13 ]] DataFrame ( data , columns = [ 'Name' , 'Age' ]) Name Age 0 Alex 10 1 Bob 12 2 Clarke 13 \u4ece\u5305\u542bndarrays/Lists\u7684\u5b57\u5178\u521b\u5efa \u4f20\u5165\u4e00\u4e2a\u7531\u7b49\u957flist\u6216ndarray\u7ec4\u6210\u7684\u5b57\u5178\uff1a \u7ed3\u679cDataFrame\u4f1a\u81ea\u52a8\u52a0\u4e0a\u7d22\u5f15\uff08\u8ddfSeries\u4e00\u6837\uff09\uff0c\u4e14\u5168\u90e8\u5217 \u4f1a\u88ab\u6709\u5e8f\u6392\u5217\u3002 data = { 'state' : [ 'Ohio' , 'Ohio' , 'Ohio' , 'Nevada' , 'Nevada' ], 'year' : [ 2000 , 2001 , 2002 , 2001 , 2002 ], 'pop' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 ]} DataFrame ( data ) state year pop 0 Ohio 2000 1.5 1 Ohio 2001 1.7 2 Ohio 2002 3.6 3 Nevada 2001 2.4 4 Nevada 2002 2.9 \u5982\u679c\u6307\u5b9a\u4e86\u5217\u5e8f\u5217\uff0c\u5219DataFrame\u7684\u5217\u5c31\u4f1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u8fdb\u884c\u6392\u5217\uff1a DataFrame ( data , columns = [ 'year' , 'state' , 'pop' ]) year state pop 0 2000 Ohio 1.5 1 2001 Ohio 1.7 2 2002 Ohio 3.6 3 2001 Nevada 2.4 4 2002 Nevada 2.9 \u4ece\u5b57\u5178\u5217\u8868\u521b\u5efa data = [{ 'a' : 1 , 'b' : 2 },{ 'a' : 5 , 'b' : 10 , 'c' : 20 }] DataFrame ( data , index = [ 'first' , 'second' ]) a b c first 1 2 NaN second 5 10 20.0 \u4eceSeries\u7684\u5b57\u5178\u521b\u5efa d = { 'one' : Series ([ 1 , 2 , 3 ], index = [ 'a' , 'b' , 'c' ]), 'two' : Series ([ 1 , 2 , 3 , 4 ], index = [ 'a' , 'b' , 'c' , 'd' ])} df = DataFrame ( d ) df [[ \"two\" , \"two\" ]] two two a 1 1 b 2 2 c 3 3 d 4 4 \u66ff\u4ee3\u6784\u9020\u51fd\u6570 DataFrame.from_dict DataFrame.from_dict(data, orient=\"columns\", dtype=None, columns=None) DataFrame.from_dict \u63a5\u53d7dict\u6216\u7c7b\u4f3c\u6570\u7ec4\u7684\u5e8f\u5217\u7684dict\u5e76\u8fd4\u56deDataFrame\u3002 DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])])) DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])]), orient = 'index' , columns = [ 'one' , 'two' , 'three' ]) one two three A 1 2 3 B 4 5 6 DataFrame.from_records DataFrame.from_records( data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None, ) DataFrame.from_records \u63a5\u53d7\u5177\u6709\u7ed3\u6784\u5316dtype\u7684\u5143\u7ec4\u6216ndarray\u7684\u5217\u8868\u3002\u5b83\u4e0e\u666e\u901a\u7684 DataFrame \u6784\u9020\u51fd\u6570\u76f8\u4f3c\uff0c\u9664\u4e86\u6240\u5f97\u7684DataFrame\u7d22\u5f15\u53ef\u80fd\u662f\u7ed3\u6784\u5316dtype\u7684\u7279\u5b9a\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a data = np . array ([( 1 , 2. , b 'Hello' ), ( 2 , 3. , b 'World' )], dtype = [( 'A' , '<i4' ), ( 'B' , '<f4' ), ( 'C' , 'S10' )]) DataFrame . from_records ( data , index = 'C' ) A B C b'Hello' 1 2.0 b'World' 2 3.0 DataFrame.from_items DataFrame . from_items ( items , columns = None , orient = 'columns' ) # items \uff1a\u4e3a\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u683c\u5f0f\u4e3a\uff1a ( key , value ) # \u5f53 orient = 'index' \u65f6\u5fc5\u987b\u4f20\u5165\uff08\u6b64\u65f6 key \u6307\u5b9a\u7684\u662f\u884c\u7684 label \uff09\uff0c\u4e14\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e DataFrame\u7684\u5217\u6570 \u3002 # \u5f53 orient = ' columns\u65f6 \uff0c key\u5c31\u662f\u5217\u7684label \uff0c\u6b64\u65f6 columns\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u7684\u5217label\u5fc5\u987b\u7b49\u4e8e\u67d0\u4e2akey \uff1b\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002 \u4ece\u5143\u7ec4\u5e8f\u5217\u4e2d\u521b\u5efa DataFrame \u3002 \u5b9e\u9645\u4e0a\uff0cDataFrame\u6bcf\u4e00\u4e2a\u503c\u90fd\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u21a9","title":"7.2.DataFrame"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#dataframe","text":"DataFrame\u662f\u4e00\u4e2a\u8868\u683c\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u542b\u6709\u4e00\u7ec4\u6709\u5e8f\u7684\u5217\uff0c\u6bcf\u5217\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u503c\u7c7b\u578b 1 \uff08\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u7b49\uff09\u3002DataFrame\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u505a\u662fSeries\u7684\u5bb9\u5668\u3002 pandas\u4e2d\u7684 DataFrame \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u51fd\u6570\u521b\u5efa - pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False) data \uff1a\u6570\u636e\u53ef\u4ee5\u662f\u5404\u79cd\u5f62\u5f0f\uff0c\u5982: ndarray \uff0c series \uff0c map \uff0c lists \uff0c dict \uff0c constant \u548c\u53e6\u4e00\u4e2a DataFrame \u3002 index \uff1a\u884c\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 columns \uff1a\u5217\u6807\u7b7e\u3002\u9ed8\u8ba4\u4e3a np.arrange(n) \u3002 dtype \uff1a\u6570\u636e\u7c7b\u578b\u3002 copy \uff1a\u662f\u5426\u590d\u5236\u6570\u636e\u3002 \u53ef\u4ee5\u8f93\u5165\u7ed9DataFrame\u6784\u9020\u5668\u7684\u6570\u636e\uff1a \u7c7b\u578b \u8bf4\u660e \u4e8c\u7ef4ndarray \u7531\u6570\u7ec4\u3001\u5217\u8868\u6216\u5143\u7ec4\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2a\u5e8f\u5217\u4f5c\u4e3aDataFrame\u7684\u4e00\u5217\u3002 \u6240\u6709\u5e8f\u5217\u7684\u957f\u5ea6\u5fc5\u987b\u76f8\u540c \u3002 NumPy\u7684\u7ed3\u6784\u5316/\u8bb0\u5f55\u6570\u7ec4 \u7c7b\u4f3c\u4e8e\u201c\u7531\u6570\u7ec4\u7ec4\u6210\u7684\u5b57\u5178\u201d \u7531Series\u7ec4\u6210\u7684\u5b57\u5178 \u6bcf\u4e2aSeries\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u6307\u5b9aindex\uff0c\u5219 \u5404Series\u7684index\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\u3002 \u6bcf\u4e2aSeries\u7684\u957f\u5ea6\u4e0d\u8981\u6c42\u5fc5\u987b\u76f8\u540c \uff0cDataFrame\u4f1a\u4ee5NaN\u586b\u5145\u3002 \u7531\u5b57\u5178\u7ec4\u6210\u7684\u5b57\u5178 \u5404\u5185\u5c42\u5b57\u5178\u4f1a\u6210\u4e3a\u4e00\u5217\u3002\u952e\u4f1a\u88ab\u5408\u5e76\u6210\u7ed3\u679c\u7684\u884c\u7d22 \u5f13\u4e28\uff0c\u8ddf\u7531\u201cSeries\u7ec4\u6210\u7684\u5b57\u5178\u201d\u7684\u60c5\u51b5\u4e00\u6837 \u5b57\u5178\u6216Series\u7684\u5217\u8868 \u5404\u9879\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u4e00\u884c\u3002\u5b57\u5178\u952e\u6216Series\u7d22\u5f15 \u7684\u5e76\u96c6\u5c06\u4f1a\u6210\u4e3aDataFrame\u7684\u5217\u6807 \u7531list\u6216tuple\u7ec4\u6210\u7684list \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d \u53e6\u2014\u4e2aDataFrame \u8be5DataFrame\u7684\u7d22\u5f15\u5c06\u4f1a\u88ab\u6cbf\u7528\uff0c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u4e86\u5176\u4ed6\u7d22\u5f15 NumPy \u7684 Masked Array \u7c7b\u4f3c\u4e8e\u201c\u4e8c\u7ef4ndarray\u201d\u7684\u60c5\u51b5\uff0c\u53ea\u662f\u63a9\u7801\u503c\u5728\u7ed3\u679c DataFrame\u4f1a\u53d8\u6210NA/\u7f3a\u5931\u503c \u603b\u7684\u6765\u8bf4\uff0c\u652f\u6301\u8f93\u5165\u7684\u6570\u636e\u7c7b\u578b\u662f\uff1a dict \u3001 list \u3001 ndarray \u3001 DataFrame \u3002","title":"DataFrame\u7c7b"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#_1","text":"\u53ef\u4ee5\u4f7f\u7528 \u5355\u4e2a\u5217\u8868 \u6216 \u5217\u8868\u5185\u5d4c\u5217\u8868 \u6765\u521b\u5efaDataFrame\u3002 \u5355\u4e2a\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [ 1 , 2 , 3 , 4 , 5 ] DataFrame ( data ) 0 0 1 1 2 2 3 3 4 4 5 \u5217\u8868\u5185\u5d4c\u5217\u8868\u7684\u4f8b\u5b50\uff1a data = [[ 'Alex' , 10 ],[ 'Bob' , 12 ],[ 'Clarke' , 13 ]] DataFrame ( data , columns = [ 'Name' , 'Age' ]) Name Age 0 Alex 10 1 Bob 12 2 Clarke 13","title":"\u4ece\u5217\u8868\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#ndarrayslists","text":"\u4f20\u5165\u4e00\u4e2a\u7531\u7b49\u957flist\u6216ndarray\u7ec4\u6210\u7684\u5b57\u5178\uff1a \u7ed3\u679cDataFrame\u4f1a\u81ea\u52a8\u52a0\u4e0a\u7d22\u5f15\uff08\u8ddfSeries\u4e00\u6837\uff09\uff0c\u4e14\u5168\u90e8\u5217 \u4f1a\u88ab\u6709\u5e8f\u6392\u5217\u3002 data = { 'state' : [ 'Ohio' , 'Ohio' , 'Ohio' , 'Nevada' , 'Nevada' ], 'year' : [ 2000 , 2001 , 2002 , 2001 , 2002 ], 'pop' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 ]} DataFrame ( data ) state year pop 0 Ohio 2000 1.5 1 Ohio 2001 1.7 2 Ohio 2002 3.6 3 Nevada 2001 2.4 4 Nevada 2002 2.9 \u5982\u679c\u6307\u5b9a\u4e86\u5217\u5e8f\u5217\uff0c\u5219DataFrame\u7684\u5217\u5c31\u4f1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u8fdb\u884c\u6392\u5217\uff1a DataFrame ( data , columns = [ 'year' , 'state' , 'pop' ]) year state pop 0 2000 Ohio 1.5 1 2001 Ohio 1.7 2 2002 Ohio 3.6 3 2001 Nevada 2.4 4 2002 Nevada 2.9","title":"\u4ece\u5305\u542bndarrays/Lists\u7684\u5b57\u5178\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#_2","text":"data = [{ 'a' : 1 , 'b' : 2 },{ 'a' : 5 , 'b' : 10 , 'c' : 20 }] DataFrame ( data , index = [ 'first' , 'second' ]) a b c first 1 2 NaN second 5 10 20.0","title":"\u4ece\u5b57\u5178\u5217\u8868\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#series","text":"d = { 'one' : Series ([ 1 , 2 , 3 ], index = [ 'a' , 'b' , 'c' ]), 'two' : Series ([ 1 , 2 , 3 , 4 ], index = [ 'a' , 'b' , 'c' , 'd' ])} df = DataFrame ( d ) df [[ \"two\" , \"two\" ]] two two a 1 1 b 2 2 c 3 3 d 4 4","title":"\u4eceSeries\u7684\u5b57\u5178\u521b\u5efa"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#_3","text":"","title":"\u66ff\u4ee3\u6784\u9020\u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#dataframefrom_dict","text":"DataFrame.from_dict(data, orient=\"columns\", dtype=None, columns=None) DataFrame.from_dict \u63a5\u53d7dict\u6216\u7c7b\u4f3c\u6570\u7ec4\u7684\u5e8f\u5217\u7684dict\u5e76\u8fd4\u56deDataFrame\u3002 DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])])) DataFrame . from_dict ( dict ([( 'A' , [ 1 , 2 , 3 ]), ( 'B' , [ 4 , 5 , 6 ])]), orient = 'index' , columns = [ 'one' , 'two' , 'three' ]) one two three A 1 2 3 B 4 5 6","title":"DataFrame.from_dict"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#dataframefrom_records","text":"DataFrame.from_records( data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None, ) DataFrame.from_records \u63a5\u53d7\u5177\u6709\u7ed3\u6784\u5316dtype\u7684\u5143\u7ec4\u6216ndarray\u7684\u5217\u8868\u3002\u5b83\u4e0e\u666e\u901a\u7684 DataFrame \u6784\u9020\u51fd\u6570\u76f8\u4f3c\uff0c\u9664\u4e86\u6240\u5f97\u7684DataFrame\u7d22\u5f15\u53ef\u80fd\u662f\u7ed3\u6784\u5316dtype\u7684\u7279\u5b9a\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a data = np . array ([( 1 , 2. , b 'Hello' ), ( 2 , 3. , b 'World' )], dtype = [( 'A' , '<i4' ), ( 'B' , '<f4' ), ( 'C' , 'S10' )]) DataFrame . from_records ( data , index = 'C' ) A B C b'Hello' 1 2.0 b'World' 2 3.0","title":"DataFrame.from_records"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.2.DataFrame.html#dataframefrom_items","text":"DataFrame . from_items ( items , columns = None , orient = 'columns' ) # items \uff1a\u4e3a\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u683c\u5f0f\u4e3a\uff1a ( key , value ) # \u5f53 orient = 'index' \u65f6\u5fc5\u987b\u4f20\u5165\uff08\u6b64\u65f6 key \u6307\u5b9a\u7684\u662f\u884c\u7684 label \uff09\uff0c\u4e14\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e DataFrame\u7684\u5217\u6570 \u3002 # \u5f53 orient = ' columns\u65f6 \uff0c key\u5c31\u662f\u5217\u7684label \uff0c\u6b64\u65f6 columns\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u7684\u5217label\u5fc5\u987b\u7b49\u4e8e\u67d0\u4e2akey \uff1b\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002 \u4ece\u5143\u7ec4\u5e8f\u5217\u4e2d\u521b\u5efa DataFrame \u3002 \u5b9e\u9645\u4e0a\uff0cDataFrame\u6bcf\u4e00\u4e2a\u503c\u90fd\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u21a9","title":"DataFrame.from_items"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html","text":"from Toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 pandas version: 1.0.1 numpy version: 1.18.1 Series\u548cDataFrame\u7684\u7d22\u5f15\u65b9\u5f0f\u5f88\u76f8\u4f3c\uff1a \u90fd\u53ef\u4ee5\u901a\u8fc7 .loc[] \u4f7f\u7528 \u6807\u7b7e \u9009\u62e9\u884c \u90fd\u53ef\u4ee5\u901a\u8fc7 .iloc[] \u4f7f\u7528 \u6574\u6570 \u9009\u62e9\u884c \u90fd\u53ef\u4ee5\u901a\u8fc7 [] \u4f7f\u7528 \u5207\u7247 \u9009\u62e9\u884c \u4f46\u4ed6\u4eec\u7684\u7d22\u5f15\u65b9\u5f0f\u4e5f\u6709\u4e00\u4e9b\u4e0d\u540c\u70b9\uff1a Series\u53ef\u4ee5\u901a\u8fc7 \u5c5e\u6027\u8bbf\u95ee \u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 \u6807\u7b7e \u9009\u62e9\u884c .row_index \uff1bDataFrame\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u7684\u65b9\u5f0f\u9009\u62e9\u5217 .column_index Series\u53ef\u4ee5\u901a\u8fc7 [] \u4f7f\u7528 \u6574\u6570 \u3001 \u6807\u7b7e \u9009\u62e9\u884c [row_index] \uff1bDataFrame\u53ea\u80fd\u901a\u8fc7 [column_index] \u4f7f\u7528 \u5217\u6807\u7b7e \u9009\u62e9\u5217 \u521b\u5efa\u793a\u4f8bSeries\u548cDataFrame\uff1a ser = pd . Series ([ 4.5 , 7.2 , - 5.3 , 3.6 , 6.1 ], index = [ 'd' , 'b' , 'a' , 'c' , 'b' ]) print ( ser ) d 4.5 b 7.2 a -5.3 c 3.6 b 6.1 dtype: float64 d = { 'one' : pd . Series ([ 1 , 2 , 3 , 5 ], index = [ 'a' , 'b' , 'c' , 'e' ]), 'two' : pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ])} df = pd . DataFrame ( d ) print ( df ) one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u884c # Series print ( ser . b ) print ( ser [ \"b\" ]) print ( ser . loc [ \"b\" ]) b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 # DataFrame df . loc [ \"a\" ] one 1.0 two 1.0 Name: a, dtype: float64 \u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u591a\u884c # Series ser [[ \"b\" , \"a\" ]] ser . loc [[ \"b\" , \"a\" ]] b 7.2 b 6.1 a -5.3 dtype: float64 # DataFrame df . loc [[ \"a\" , \"b\" ]] one two a 1.0 1 b 2.0 2 \u4e0d\u80fd\u4f7f\u7528 () ser . loc [( \"b\" , \"a\" )] ---------------------------------------------------------------------------IndexingError Traceback (most recent call last)<ipython-input-1-36ce192f3c34> in <module> ----> 1 ser.loc[(\"b\", \"a\")] G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in __getitem__(self, key) 1759 except (KeyError, IndexError, AttributeError): 1760 pass -> 1761 return self._getitem_tuple(key) 1762 else: 1763 # we by definition only have the 0th axis G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _getitem_tuple(self, tup) 1274 1275 # no multi-index, so validate all of the indexers -> 1276 self._has_valid_tuple(tup) 1277 1278 # ugly hack for GH #836 G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _has_valid_tuple(self, key) 698 for i, k in enumerate(key): 699 if i >= self.ndim: --> 700 raise IndexingError(\"Too many indexers\") 701 try: 702 self._validate_key(k, i) IndexingError: Too many indexers \u901a\u8fc7\u6574\u6570\u9009\u62e9\u884c # Series ser [ 1 ] ser . iloc [ 1 ] 7.2 # DataFrame df . iloc [ 0 ] one 1.0 two 1.0 Name: a, dtype: float64 \u901a\u8fc7\u6574\u6570\u9009\u62e9\u591a\u884c # Series ser [[ 1 , 0 ]] ser . iloc [[ 1 , 0 ]] b 7.2 d 4.5 dtype: float64 # DataFrame df . iloc [[ 0 , 1 ]] one two a 1.0 1 b 2.0 2 \u901a\u8fc7\u5207\u7247\u9009\u62e9\u591a\u884c \u5207\u7247\u5305\u62ec \u6574\u6570\u5207\u7247 \u548c \u6807\u7b7e\u5207\u7247 \u3002 # Series ser [ 1 : 3 ] ser . iloc [ 1 : 3 ] b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ 0 : 3 : 2 ]) print ( df [ 0 : 2 ]) one two a 1.0 1 c 3.0 3 one two a 1.0 1 b 2.0 2 \u5207\u7247\u6709\u6574\u6570\u503c\u7684\u666e\u901a\u5207\u7247\u548c\u6807\u7b7e\u5207\u7247\u3002 \u5229\u7528\u6807\u7b7e\u7684\u5207\u7247\u8fd0\u7b97\u4e0e\u666e\u901a\u7684Python\u5207\u7247\u8fd0\u7b97\u4e0d\u540c\uff0c\u5176\u672b\u7aef\u662f\u5305\u542b\u7684\uff08inclusive\uff09\uff0c\u5373\u5c01\u95ed\u533a\u95f4\u3002 # Series print ( ser [ 0 : 2 ]) print ( ser [ \"d\" : \"a\" ]) d 4.5 b 7.2 dtype: float64 d 4.5 b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ \"a\" : \"c\" ]) print ( df . iloc [ 0 : 3 : 2 ]) one two a 1.0 1 b 2.0 2 c 3.0 3 one two a 1.0 1 c 3.0 3 \u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u5217 \u4e0eSeries\u4e0d\u540c\u7684\u662f\uff0cDataFrame\u8fd8\u6709\u5217\u9009\u62e9\u3002\u4f46\u662fDataFrame\u7684\u5217\u9009\u62e9\u548c\u884c\u9009\u62e9\u4e0d\u540c\u3002 DataFrame\u7684\u884c\u53ef\u4ee5\u540c\u65f6\u6709 \u6574\u6570\u7d22\u5f15 \u548c \u6807\u7b7e\u7d22\u5f15 \uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u6807\u7b7e\u8d4b\u503c\uff0c\u5219\u53ea\u6709\u6574\u6570\u503c\u7d22\u5f15\u3002 DataFrame\u7684\u5217\u5728\u6807\u7b7e\u8d4b\u503c\u540e\uff0c\u53ea\u80fd\u4f7f\u7528\u6807\u7b7e\u7d22\u5f15\u3002 \u9009\u53d6DataFrame\u7684\u5217\uff0c\u5b9e\u9645\u4e0a\u662f\u83b7\u53d6\u4e86\u4e00\u4e2aSeries\uff0c\u8fd4\u56de\u7684Series\u62e5\u6709\u539fDataFrame\u76f8\u540c\u7684\u884c\u7d22\u5f15\u3002 print ( df . one ) print ( df [ \"one\" ]) a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 \u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u591a\u5217 df [[ \"one\" , \"two\" ]] one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u6ce8\u610f\uff1a \u901a\u8fc7\u7d22\u5f15\u65b9\u5f0f\u8fd4\u56de\u7684\u5217\u53ea\u662f\u76f8\u5e94\u6570\u636e\u7684\u89c6\u56fe\u800c\u5df2\uff0c \u5e76\u4e0d\u662f\u526f\u672c\u3002\u56e0\u6b64\uff0c\u5bf9\u8fd4\u56de\u7684Series\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u5168\u90fd\u4f1a\u53cd\u6620\u5230\u539fDataFrame\u4e0a\u3002\u901a\u8fc7Series\u7684copy\u65b9\u6cd5\u5373\u53ef\u663e\u5f0f\u5730\u590d\u5236\u5217\u3002 df [ \"one\" ][ \"a\" ] = np . nan df . \\ setup_m . py : 1 : SettingWithCopyWarning : A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation : https : // pandas . pydata . org / pandas - docs / stable / user_guide / indexing . html #returning-a-view-versus-a-copy import os one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u884c\u5217\u540c\u65f6\u7d22\u5f15 df . loc [ \"c\" , \"one\" ] df . iloc [ 2 , 0 ] df . loc [ \"c\" , [ \"one\" , \"two\" ]] df . iloc [ 2 , [ 0 , 1 ]] one 3.0 two 3.0 Name: c, dtype: float64 \u5148\u9009\u62e9\u5217\uff0c\u5728\u9009\u62e9\u884c df [ \"one\" ][ \"c\" ] 3.0 \u5173\u4e8e\u7d22\u5f15\u7684\u5176\u5b83 \u5bf9Series\u8fdb\u884c\u8fd0\u7b97\uff08\u5e03\u5c14\u7d22\u5f15\u8fc7\u6ee4\u3001\u6807\u91cf\u4e58\u6cd5\u3001\u6570\u5b66\u51fd\u6570\u7b49\uff09\uff0c\u90fd\u4f1a\u4fdd\u7559\u6807\u7b7e\u548c\u503c\u4e4b\u95f4\u7684\u94fe\u63a5\u3002 Series\u7684\u6807\u7b7e\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u7684\u65b9\u5f0f\u8fdb\u884c\u4fee\u6539\uff1a s = pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ]) s . index = [ 'f' , 'b' , 'c' , 'd' , 'e' ] s f 1 b 2 c 3 d 4 e 5 dtype: int64 \u867d\u7136\u5f88\u591a\u65f6\u5019\u90fd\u5f3a\u8c03\u8f74\u6807\u7b7e\uff08\u7d22\u5f15\u503c\uff09\u8981\u552f\u4e00\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u5e26\u6709\u91cd\u590d\u7d22\u5f15\u503c\u7684Series\uff1a obj = pd . Series ( range ( 5 ), index = [ 'a' , 'a' , 'b' , 'b' , 'c' ]) obj a 0 a 1 b 2 b 3 c 4 dtype: int64 \u7d22\u5f15\u7684is_unique\u5c5e\u6027\u53ef\u4ee5\u544a\u8bc9\u4f60\u5b83\u7684\u503c\u662f\u5426\u662f\u552f\u4e00\u7684 obj . index . is_unique False \u5bf9\u4e8e\u5e26\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\uff0c\u6570\u636e\u9009\u53d6\u7684\u884c\u4e3a\u5c06\u4f1a\u6709\u4e9b\u4e0d\u540c\u3002\u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u591a\u4e2a\u503c\uff0c\u5219\u8fd4\u56de\u4e00\u4e2aSeries\uff1b\u800c\u5bf9\u5e94\u5355\u4e2a\u503c\u7684\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002\u5bf9DataFrame\u7684\u884c\u8fdb\u884c\u7d22\u5f15\u65f6\u4e5f\u662f\u5982\u6b64\u3002 get \u65b9\u6cd5 Series\u6216DataFrame\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e00\u4e2a get \u53ef\u4ee5\u8fd4\u56de\u9ed8\u8ba4\u503c\u7684\u65b9\u6cd5\u3002 ser . get ( \"a\" ) -5.3 df . get ( \"onef\" , 5 ) 5 lookup \u65b9\u6cd5 \u7ed9\u5b9a\u4e00\u7cfb\u5217\u884c\u6807\u7b7e\u548c\u5217\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u63d0\u53d6\u4e00\u7ec4\u503c\uff1a # \u8fd4\u56de ('c','one') \u548c ('b','two') df . lookup ([ \"c\" , \"b\" ], [ \"one\" , \"two\" ]) array([3., 2.]) \u7d22\u5f15\u65b9\u5f0f\u603b\u7ed3\u8868 \u7c7b\u578b df[val] \u4eceDataFrame\u9009\u53d6\u5355\u5217\u6216\u4e00\u7ec4\u5217\uff1b \u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u6bd4\u8f83\u4fbf\u5229\uff1a\u5e03\u5c14\u578b\u6570\u7ec4\uff08\u8fc7\u6ee4\u884c\uff09\u3001\u5207\u7247\uff08\u884c\u5207\u7247\uff09\u3001\u6216\u5e03\u5c14\u578bDataFrame (\u6839\u636e\u6761\u4ef6\u8bbe\u7f6e\u503c\uff09 df.loc[val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6DataFrame\u7684\u5355\u4e2a\u884c\u6216\u4e00\u7ec4\u884c df.loc[:, val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u5217\u6216\u5217\u5b50\u96c6 df.loc[val1, val2] \u901a\u8fc7\u6807\u7b7e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.iloc[where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u884c\u6216\u884c\u5b50\u96c6 df.iloc[:, where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u5217\u6216\u5217\u5b50\u96c6 df.iloc[where_i, where_j] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.at [label_i, label_j] \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf df.iat[i, j] \u901a\u8fc7\u884c\u548c\u5217\u7684\u4f4d\u7f6e\uff08\u6574\u6570\uff09\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf reindex \u901a\u8fc7\u6807\u7b7e\u9009\u53d6\u884c\u6216\u5217 get _value, set_value \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\u9009\u53d6\u5355\u4e00\u503c","title":"7.3.\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_1","text":"# Series print ( ser . b ) print ( ser [ \"b\" ]) print ( ser . loc [ \"b\" ]) b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 b 7.2 b 6.1 dtype: float64 # DataFrame df . loc [ \"a\" ] one 1.0 two 1.0 Name: a, dtype: float64","title":"\u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u884c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_2","text":"# Series ser [[ \"b\" , \"a\" ]] ser . loc [[ \"b\" , \"a\" ]] b 7.2 b 6.1 a -5.3 dtype: float64 # DataFrame df . loc [[ \"a\" , \"b\" ]] one two a 1.0 1 b 2.0 2 \u4e0d\u80fd\u4f7f\u7528 () ser . loc [( \"b\" , \"a\" )] ---------------------------------------------------------------------------IndexingError Traceback (most recent call last)<ipython-input-1-36ce192f3c34> in <module> ----> 1 ser.loc[(\"b\", \"a\")] G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in __getitem__(self, key) 1759 except (KeyError, IndexError, AttributeError): 1760 pass -> 1761 return self._getitem_tuple(key) 1762 else: 1763 # we by definition only have the 0th axis G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _getitem_tuple(self, tup) 1274 1275 # no multi-index, so validate all of the indexers -> 1276 self._has_valid_tuple(tup) 1277 1278 # ugly hack for GH #836 G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _has_valid_tuple(self, key) 698 for i, k in enumerate(key): 699 if i >= self.ndim: --> 700 raise IndexingError(\"Too many indexers\") 701 try: 702 self._validate_key(k, i) IndexingError: Too many indexers","title":"\u901a\u8fc7\u884c\u6807\u7b7e\u9009\u62e9\u591a\u884c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_3","text":"# Series ser [ 1 ] ser . iloc [ 1 ] 7.2 # DataFrame df . iloc [ 0 ] one 1.0 two 1.0 Name: a, dtype: float64","title":"\u901a\u8fc7\u6574\u6570\u9009\u62e9\u884c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_4","text":"# Series ser [[ 1 , 0 ]] ser . iloc [[ 1 , 0 ]] b 7.2 d 4.5 dtype: float64 # DataFrame df . iloc [[ 0 , 1 ]] one two a 1.0 1 b 2.0 2","title":"\u901a\u8fc7\u6574\u6570\u9009\u62e9\u591a\u884c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_5","text":"\u5207\u7247\u5305\u62ec \u6574\u6570\u5207\u7247 \u548c \u6807\u7b7e\u5207\u7247 \u3002 # Series ser [ 1 : 3 ] ser . iloc [ 1 : 3 ] b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ 0 : 3 : 2 ]) print ( df [ 0 : 2 ]) one two a 1.0 1 c 3.0 3 one two a 1.0 1 b 2.0 2 \u5207\u7247\u6709\u6574\u6570\u503c\u7684\u666e\u901a\u5207\u7247\u548c\u6807\u7b7e\u5207\u7247\u3002 \u5229\u7528\u6807\u7b7e\u7684\u5207\u7247\u8fd0\u7b97\u4e0e\u666e\u901a\u7684Python\u5207\u7247\u8fd0\u7b97\u4e0d\u540c\uff0c\u5176\u672b\u7aef\u662f\u5305\u542b\u7684\uff08inclusive\uff09\uff0c\u5373\u5c01\u95ed\u533a\u95f4\u3002 # Series print ( ser [ 0 : 2 ]) print ( ser [ \"d\" : \"a\" ]) d 4.5 b 7.2 dtype: float64 d 4.5 b 7.2 a -5.3 dtype: float64 # DataFrame print ( df [ \"a\" : \"c\" ]) print ( df . iloc [ 0 : 3 : 2 ]) one two a 1.0 1 b 2.0 2 c 3.0 3 one two a 1.0 1 c 3.0 3","title":"\u901a\u8fc7\u5207\u7247\u9009\u62e9\u591a\u884c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_6","text":"\u4e0eSeries\u4e0d\u540c\u7684\u662f\uff0cDataFrame\u8fd8\u6709\u5217\u9009\u62e9\u3002\u4f46\u662fDataFrame\u7684\u5217\u9009\u62e9\u548c\u884c\u9009\u62e9\u4e0d\u540c\u3002 DataFrame\u7684\u884c\u53ef\u4ee5\u540c\u65f6\u6709 \u6574\u6570\u7d22\u5f15 \u548c \u6807\u7b7e\u7d22\u5f15 \uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u6807\u7b7e\u8d4b\u503c\uff0c\u5219\u53ea\u6709\u6574\u6570\u503c\u7d22\u5f15\u3002 DataFrame\u7684\u5217\u5728\u6807\u7b7e\u8d4b\u503c\u540e\uff0c\u53ea\u80fd\u4f7f\u7528\u6807\u7b7e\u7d22\u5f15\u3002 \u9009\u53d6DataFrame\u7684\u5217\uff0c\u5b9e\u9645\u4e0a\u662f\u83b7\u53d6\u4e86\u4e00\u4e2aSeries\uff0c\u8fd4\u56de\u7684Series\u62e5\u6709\u539fDataFrame\u76f8\u540c\u7684\u884c\u7d22\u5f15\u3002 print ( df . one ) print ( df [ \"one\" ]) a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64 a 1.0 b 2.0 c 3.0 d NaN e 5.0 Name: one, dtype: float64","title":"\u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u5217"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_7","text":"df [[ \"one\" , \"two\" ]] one two a 1.0 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5 \u6ce8\u610f\uff1a \u901a\u8fc7\u7d22\u5f15\u65b9\u5f0f\u8fd4\u56de\u7684\u5217\u53ea\u662f\u76f8\u5e94\u6570\u636e\u7684\u89c6\u56fe\u800c\u5df2\uff0c \u5e76\u4e0d\u662f\u526f\u672c\u3002\u56e0\u6b64\uff0c\u5bf9\u8fd4\u56de\u7684Series\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u5168\u90fd\u4f1a\u53cd\u6620\u5230\u539fDataFrame\u4e0a\u3002\u901a\u8fc7Series\u7684copy\u65b9\u6cd5\u5373\u53ef\u663e\u5f0f\u5730\u590d\u5236\u5217\u3002 df [ \"one\" ][ \"a\" ] = np . nan df . \\ setup_m . py : 1 : SettingWithCopyWarning : A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation : https : // pandas . pydata . org / pandas - docs / stable / user_guide / indexing . html #returning-a-view-versus-a-copy import os one two a NaN 1 b 2.0 2 c 3.0 3 d NaN 4 e 5.0 5","title":"\u901a\u8fc7\u5217\u6807\u7b7e\u9009\u62e9\u591a\u5217"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_8","text":"df . loc [ \"c\" , \"one\" ] df . iloc [ 2 , 0 ] df . loc [ \"c\" , [ \"one\" , \"two\" ]] df . iloc [ 2 , [ 0 , 1 ]] one 3.0 two 3.0 Name: c, dtype: float64 \u5148\u9009\u62e9\u5217\uff0c\u5728\u9009\u62e9\u884c df [ \"one\" ][ \"c\" ] 3.0","title":"\u884c\u5217\u540c\u65f6\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_9","text":"\u5bf9Series\u8fdb\u884c\u8fd0\u7b97\uff08\u5e03\u5c14\u7d22\u5f15\u8fc7\u6ee4\u3001\u6807\u91cf\u4e58\u6cd5\u3001\u6570\u5b66\u51fd\u6570\u7b49\uff09\uff0c\u90fd\u4f1a\u4fdd\u7559\u6807\u7b7e\u548c\u503c\u4e4b\u95f4\u7684\u94fe\u63a5\u3002 Series\u7684\u6807\u7b7e\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u7684\u65b9\u5f0f\u8fdb\u884c\u4fee\u6539\uff1a s = pd . Series ([ 1 , 2 , 3 , 4 , 5 ], index = [ 'a' , 'b' , 'c' , 'd' , 'e' ]) s . index = [ 'f' , 'b' , 'c' , 'd' , 'e' ] s f 1 b 2 c 3 d 4 e 5 dtype: int64 \u867d\u7136\u5f88\u591a\u65f6\u5019\u90fd\u5f3a\u8c03\u8f74\u6807\u7b7e\uff08\u7d22\u5f15\u503c\uff09\u8981\u552f\u4e00\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u5e26\u6709\u91cd\u590d\u7d22\u5f15\u503c\u7684Series\uff1a obj = pd . Series ( range ( 5 ), index = [ 'a' , 'a' , 'b' , 'b' , 'c' ]) obj a 0 a 1 b 2 b 3 c 4 dtype: int64 \u7d22\u5f15\u7684is_unique\u5c5e\u6027\u53ef\u4ee5\u544a\u8bc9\u4f60\u5b83\u7684\u503c\u662f\u5426\u662f\u552f\u4e00\u7684 obj . index . is_unique False \u5bf9\u4e8e\u5e26\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\uff0c\u6570\u636e\u9009\u53d6\u7684\u884c\u4e3a\u5c06\u4f1a\u6709\u4e9b\u4e0d\u540c\u3002\u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u591a\u4e2a\u503c\uff0c\u5219\u8fd4\u56de\u4e00\u4e2aSeries\uff1b\u800c\u5bf9\u5e94\u5355\u4e2a\u503c\u7684\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002\u5bf9DataFrame\u7684\u884c\u8fdb\u884c\u7d22\u5f15\u65f6\u4e5f\u662f\u5982\u6b64\u3002","title":"\u5173\u4e8e\u7d22\u5f15\u7684\u5176\u5b83"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#get","text":"Series\u6216DataFrame\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e00\u4e2a get \u53ef\u4ee5\u8fd4\u56de\u9ed8\u8ba4\u503c\u7684\u65b9\u6cd5\u3002 ser . get ( \"a\" ) -5.3 df . get ( \"onef\" , 5 ) 5","title":"get\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#lookup","text":"\u7ed9\u5b9a\u4e00\u7cfb\u5217\u884c\u6807\u7b7e\u548c\u5217\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\u63d0\u53d6\u4e00\u7ec4\u503c\uff1a # \u8fd4\u56de ('c','one') \u548c ('b','two') df . lookup ([ \"c\" , \"b\" ], [ \"one\" , \"two\" ]) array([3., 2.])","title":"lookup\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.3.%E7%B4%A2%E5%BC%95.html#_10","text":"\u7c7b\u578b df[val] \u4eceDataFrame\u9009\u53d6\u5355\u5217\u6216\u4e00\u7ec4\u5217\uff1b \u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u6bd4\u8f83\u4fbf\u5229\uff1a\u5e03\u5c14\u578b\u6570\u7ec4\uff08\u8fc7\u6ee4\u884c\uff09\u3001\u5207\u7247\uff08\u884c\u5207\u7247\uff09\u3001\u6216\u5e03\u5c14\u578bDataFrame (\u6839\u636e\u6761\u4ef6\u8bbe\u7f6e\u503c\uff09 df.loc[val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6DataFrame\u7684\u5355\u4e2a\u884c\u6216\u4e00\u7ec4\u884c df.loc[:, val] \u901a\u8fc7\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u5217\u6216\u5217\u5b50\u96c6 df.loc[val1, val2] \u901a\u8fc7\u6807\u7b7e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.iloc[where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u884c\u6216\u884c\u5b50\u96c6 df.iloc[:, where] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u4eceDataFrame\u9009\u53d6\u5355\u4e2a\u5217\u6216\u5217\u5b50\u96c6 df.iloc[where_i, where_j] \u901a\u8fc7\u6574\u6570\u4f4d\u7f6e\uff0c\u540c\u65f6\u9009\u53d6\u884c\u548c\u5217 df.at [label_i, label_j] \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf df.iat[i, j] \u901a\u8fc7\u884c\u548c\u5217\u7684\u4f4d\u7f6e\uff08\u6574\u6570\uff09\uff0c\u9009\u53d6\u5355\u4e00\u7684\u6807\u91cf reindex \u901a\u8fc7\u6807\u7b7e\u9009\u53d6\u884c\u6216\u5217 get _value, set_value \u901a\u8fc7\u884c\u548c\u5217\u6807\u7b7e\u9009\u53d6\u5355\u4e00\u503c","title":"\u7d22\u5f15\u65b9\u5f0f\u603b\u7ed3\u8868"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html","text":"from Toolkit.Help import Help as H import numpy as np import pandas as pd import pprint Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 pandas version: 1.0.1 numpy version: 1.18.1 \u7d22\u5f15\u5bf9\u8c61 pandas\u7684\u7d22\u5f15\u5bf9\u8c61\u8d1f\u8d23\u7ba1\u7406\u8f74\u6807\u7b7e\u548c\u5176\u4ed6\u5143\u6570\u636e\uff08\u6bd4\u5982\u8f74\u540d\u79f0\u7b49\uff09\u3002\u6784\u5efaSeries\u6216DataFrame\u65f6\uff0c\u6240\u7528\u5230\u7684\u4efb\u4f55\u6570\u7ec4\u6216\u5176\u4ed6\u5e8f\u5217\u7684\u6807\u7b7e\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210\u4e00\u4e2aIndex\uff0c\u800c index\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684 \uff0c\u4e5f\u5c31\u662findex\u5bf9\u8c61\u7684\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\uff08immutable\uff09\u3002\u5982\u679c\u8981\u4fee\u6539index\u5185\u5bb9\uff0c\u53ea\u80fd\u901a\u8fc7\u91cd\u65b0\u8d4b\u503c\u7684\u5f62\u5f0f\u3002 \u4e0d\u53ef\u4fee\u6539\u6027\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u4f7fIndex\u5bf9\u8c61\u5728\u591a\u4e2a\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u5b89\u5168\u5171\u4eab\u3002 \u4e0b\u8868\u5217\u51fa\u4e86pandas\u4e2d\u4e3b\u8981\u7684Index\u5bf9\u8c61\uff1a \u7c7b \u8bf4\u660e Index \u6700\u6cdb\u5316\u7684Index\u5bf9\u8c61\uff0c\u5c06\u8f74\u6807\u7b7e\u8868\u793a\u4e3a\u4e00\u4e2a\u7531Python\u5bf9\u8c61\u7ec4\u6210\u7684NumPy \u6570\u7ec4 Int64lndex \u9488\u5bf9\u6574\u6570\u7684\u7279\u6b8aIndex Multiindex \u201c\u5c42\u6b21\u5316\u201d\u7d22\u5f15\u5bf9\u8c61\uff0c\u8868\u793a\u5355\u4e2a\u8f74\u4e0a\u7684\u591a\u5c42\u7d22\u5f15\u3002\u53ef\u4ee5\u770b\u505a\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u6570\u7ec4 Datetimelndex \u5b58\u50a8\u7eb3\u79d2\u7ea7\u65f6\u95f4\u622a\uff08\u7528NumPy\u7684datetime64\u7c7b\u578b\u8868\u793a\uff09 Periodlndex \u9488\u5bf9Period\u6570\u636e\uff08\u65f6\u95f4\u95f4\u9694\uff09\u7684\u7279\u6b8aIndex \u4ee5\u4e0b\u662fpandas\u4e2d\u6240\u6709Index\u5bf9\u8c61\uff1a [ 'CategoricalIndex' , 'DatetimeIndex' , 'Float64Index' , 'Index' , 'Int64Index' , 'IntervalIndex' , 'MultiIndex' , 'PeriodIndex' , 'RangeIndex' , 'TimedeltaIndex' , 'UInt64Index' ] \u6bcf\u4e2a\u7d22\u5f15\u90fd\u6709\u4e00\u4e9b\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u8bbe\u7f6e\u903b\u8f91\u5e76\u56de\u7b54\u6709\u5173\u8be5\u7d22\u5f15\u6240\u5305\u542b\u7684\u6570\u636e\u7684\u5e38\u89c1\u95ee\u9898\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u8fd9\u4e9b\u51fd\u6570\uff1a \u8bf4\u660e \u65b9\u6cd5 append \u8fde\u63a5\u53e6\u4e00\u4e2aindex\u5bf9\u8c61.\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Index diff \u8ba1\u7b97\u5dee\u96c6\uff0c\u5e76\u5f97\u5230\u4e00\u4e2aIndex intersection \u8ba1\u7b97\u4ea4\u96c6 union \u8ba1\u7b97\u5e76\u96c6 isin \u8ba1\u7b97\u4e00\u4e2a\u6307\u793a\u5404\u503c\u662f\u5426\u90fd\u5305\u542b\u5728\u53c2\u6570\u96c6\u5408\u4e2d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 delete \u5220\u9664\u7d22\u5f15i\u5904\u7684\u5143\u7d20\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index drop \u5220\u9664\u4f20\u5165\u7684\u503c.\u5e76\u5f97\u5230\u65b0\u7684Index insert \u5c06\u5143\u7d20\u63d2\u5165\u5230\u7d22\u5f15i\u5904\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index is_monotonic \u5f53\u5404\u5143\u7d20\u5747\u5927\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u8fd4\u56deTRUE is_unique \u5f53Index\u6ca1\u6709\u91cd\u590d\u503c\u65f6\uff0c\u8fd4\u56deTrue unique \u8ba1\u7b97Index\u4e2d\u552f\u4e00\u503c\u7684\u6570\u7ec4 Index class pandas.Index(data=None, dtype=None, copy=False, name=None, fastpath=False, tupleize_cols=True) \uff1a\u521b\u5efa Index \u5bf9\u8c61\u3002 \u53c2\u6570\uff1a data \uff1a\u4e00\u4e2a array-like \uff0c\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 name \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3a Index \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4e3a object copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data tupleize_cols \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u53ef\u80fd\u5219\u5c3d\u91cf\u521b\u5efa MultiIndex \u5bf9\u8c61 pd . Index ([ \"a\" , \"b\" , \"c\" ]) Index(['a', 'b', 'c'], dtype='object') \u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7 pd.Index \u7c7b\u4e5f\u53ef\u4ee5\u521b\u5efa pd.Int64Index \u3001 pd.Float64Index \u3001 pd.RangeIndex \u3001 pd.UInt64Index \u3001 pd.DatetimeIndex \u3001 pd.TimedeltaIndex from datetime import datetime , timedelta print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . uint64 , name = \"UInt64Index\" ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . int64 , name = \"Int64Index\" ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . float64 , name = \"Float64Index\" ))) print ( type ( pd . Index ( range ( 5 ), name = \"RangeIndex\" ))) print ( type ( pd . Index ([ datetime . today ()], name = \"DatetimeIndex\" ))) print ( type ( pd . Index ([ timedelta ( microseconds = 1 )], name = \"TimedeltaIndex\" ))) <class 'pandas.core.indexes.numeric.UInt64Index'> <class 'pandas.core.indexes.numeric.Int64Index'> <class 'pandas.core.indexes.numeric.Float64Index'> <class 'pandas.core.indexes.range.RangeIndex'> <class 'pandas.core.indexes.datetimes.DatetimeIndex'> <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'> \u591a\u7ea7\u7d22\u5f15 MultiIndex MultiIndex \u4ee3\u8868\u7684\u662f\u591a\u7ea7\u7d22\u5f15\u5bf9\u8c61\u3002\u5b83\u7ee7\u627f\u81ea Index \uff0c\u5176\u4e2d\u7684\u591a\u7ea7 label \u91c7\u7528\u5143\u7ec4\u5bf9\u8c61\u6765\u8868\u793a\u3002\u5728 MultiIndex \u5185\u90e8\uff0c\u5e76\u4e0d\u76f4\u63a5\u4fdd\u5b58\u5143\u7ec4\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u591a\u4e2a Index \u5bf9\u8c61\u4fdd\u5b58\u7d22\u5f15\u4e2d\u6bcf\u7ea7\u7684 label \u3002 class pandas.MultiIndex(levels=None, labels=None, sortorder=None, names=None, copy=False, verify_integrity=True, _set_identity=True, name=None, **kwargs) \u53c2\u6570\uff1a levels \uff1a\u4e00\u4e2a\u6570\u7ec4\u7684\u5217\u8868\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e00\u7ea7\u7684 level \u3002 labels \uff1a\u4e00\u4e2a\u6570\u7ec4\u7684\u5217\u8868\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e00\u7ea7 level \u7684\u4e0b\u6807\u3002\u7b2c$i$\u7ea7 label \u662f\u8fd9\u6837\u4ea7\u751f\u7684\uff1a \u9996\u5148\u83b7\u53d6 labels[i] \uff0c\u5b83\u662f\u4e00\u4e2a\u4e0b\u6807\u5e8f\u5217\uff0c\u4ee3\u8868\u7b2c$i$\u7ea7\u3002 \u5047\u8bbe\u7b2c$k$\u4f4d\u7f6e\u4e3a\u6574\u6570 3\uff0c\u5728\u7b2c$i$\u7ea7\u7b2c$k$\u4f4d\u7684 label \u5c31\u662f levels[i][3] \u3002 sortorder \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\u7684 level \u7ea7\u522b\u3002 names \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a Index \u7684 name \u3002\u5176\u4e2d\u6bcf\u4e2a\u7ea7\u522b\u5bf9\u5e94\u4e00\u4e2a Index copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u6d4b\u5404\u7ea7\u522b\u7684 label/level \u90fd\u662f\u8fde\u7eed\u7684\u4e14\u6709\u6548\u7684 name \uff1a MultiIndex \u7684\u540d\u5b57 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7c7b\u65b9\u6cd5\u6765\u521b\u5efa MultiIndex \uff1a MultiIndex.from_arrays(arrays[, sortorder, ...]) \uff1a\u5c06\u4e8c\u7ef4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d arrays \u4e3a array-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u5217 label \uff08\u4e00\u4e2a\u7ea7\u522b\uff09 MultiIndex.from_tuples(tuples[, sortorder, ...]) \uff1a\u5c06\u5143\u7ec4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d tuples \u4e3a tuple-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u884c label \u5bf9\uff08\u4e0d\u540c\u7ea7\u522b\u7684\u4e00\u5bf9\uff09 MultiIndex.from_product(iterables[, ...]) \uff1a\u6839\u636e\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u4e00\u4e2a MultiIndex \uff0c\u5176\u4e2d\u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7684\u7b97\u6cd5\u3002\u5176\u4e2d iterables \u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5e8f\u5217 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u7ed9 Index() \uff0c\u5e76\u4e14\u5c06 tupleize_cols \u8bbe\u7f6e\u4e3a True \u6765\u521b\u5efa MultiIndex \u4ecetuple\u521b\u5efaMultiIndex arrays = [ [ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]] tuples = list ( zip ( * arrays )) pprint . pprint ( tuples ) print ( \"\" ) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )], names = [ 'first' , 'second' ]) \u4eceiterables\u521b\u5efaMultiIndex iterables = [[ 'bar' , 'baz' , 'foo' , 'qux' ], [ 'one' , 'two' ]] pprint . pprint ( iterables ) print ( \"\" ) index = pd . MultiIndex . from_product ( iterables , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [['bar', 'baz', 'foo', 'qux'], ['one', 'two']] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names = ['first', 'second']) \u4eceDataFrame\u521b\u5efaMultiIndex df = pd . DataFrame ([[ 'bar' , 'one' ], [ 'bar' , 'two' ], [ 'foo' , 'one' ], [ 'foo' , 'two' ]], columns = [ 'first' , 'second' ]) pprint . pprint ( df ) print ( \"\" ) index = pd . MultiIndex . from_frame ( df ) pprint . pprint ( index ) first second 0 bar one 1 bar two 2 foo one 3 foo two MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' )], names = [ 'first' , 'second' ]) \u4ecelist-like\u521b\u5efaMultiIndex arrays = [ np . array ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ]), np . array ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ])] pprint . pprint ( arrays ) pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) [array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='<U3'), array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='<U3')] 0 1 2 3 bar one 1.272859 1.590902 1.533832 0.896089 two -1.338722 -0.930629 0.228179 1.229562 baz one -3.015706 -1.701900 1.237405 -2.174275 two -0.826832 -1.058854 -0.367501 0.974535 foo one -0.617897 -1.102916 -0.049820 1.055834 two -0.361094 -1.281896 0.596017 -0.763006 qux one 0.162307 -0.839610 -1.930223 0.178659 two -1.095679 0.109408 0.342514 0.676979 # s = pd.Series(np.random.randn(8), index=arrays) # s \u9009\u62e9\u6570\u636e \u5217\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15 \u521b\u5efa\u793a\u4f8bdataframe\uff1a tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 3 , 8 ), index = [ 'A' , 'B' , 'C' ], columns = index ) df first bar baz foo qux second one two one two one two one two A -0.943993 0.713135 -1.476287 0.148504 -0.745637 0.213429 0.292039 0.576053 B -1.526875 -0.661510 0.233744 -2.124779 2.527988 -0.649525 -1.197415 -1.194035 C -0.948963 -1.212174 -0.172934 -1.164432 0.017524 -0.044831 0.744810 -1.540683 dataframe\u7684 [] \u9009\u62e9\u5217\uff1a df [ \"bar\" ] second one two A -0.943993 0.713135 B -1.526875 -0.661510 C -0.948963 -1.212174 [] \u4f7f\u7528\u591a\u7ea7\u7d22\u5f15\uff1a # \u5b9e\u9645\u4e0a\u4e0e df[(\"bar\", \"one\")] \u7b49\u4ef7 df [ \"bar\" , \"one\" ] A -0.943993 B -1.526875 C -0.948963 Name: (bar, one), dtype: float64 [[]] \u9009\u62e9\u591a\u5217\uff1a df [[ \"bar\" , \"baz\" , \"foo\" ]] # list first bar baz foo second one two one two one two A -0.943993 0.713135 -1.476287 0.148504 -0.745637 0.213429 B -1.526875 -0.661510 0.233744 -2.124779 2.527988 -0.649525 C -0.948963 -1.212174 -0.172934 -1.164432 0.017524 -0.044831 () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15\uff1a df [[( \"bar\" , \"one\" ), ( \"baz\" , \"one\" )]] # list of tuples first bar baz second one one A -0.943993 -1.476287 B -1.526875 0.233744 C -0.948963 -0.172934 # \u884c\u5217\u7d22\u5f15 print ( df . loc [ \"A\" , \"bar\" ], \" \\n \" ) # () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15 print ( df . loc [ \"A\" , ( \"bar\" , \"one\" )], \" \\n \" ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 \u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801\u7b49\u4ef7 print ( df . loc [ \"A\" , [( \"bar\" , \"one\" )]], \" \\n \" ) print ( df . loc [ \"A\" , ( \"bar\" , [ \"one\" ])], \" \\n \" ) print ( df . loc [ \"A\" , ([ \"bar\" ], \"one\" )], \" \\n \" ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 print ( df . loc [ \"A\" , [ \"bar\" ]], \" \\n \" ) second one - 0 . 943993 two 0 . 713135 Name : A , dtype : float64 - 0 . 943993274158185 first second bar one - 0 . 943993 Name : A , dtype : float64 first second bar one - 0 . 943993 Name : A , dtype : float64 first second bar one - 0 . 943993 Name : A , dtype : float64 first second bar one - 0 . 943993 two 0 . 713135 Name : A , dtype : float64 # tuple of lists print ( df . loc [ \"A\" , ([ \"bar\" , \"foo\" ], [ \"one\" , \"two\" ])], \" \\n \" ) # list of tuples print ( df . loc [ \"A\" , [( \"bar\" , \"one\" ), ( \"foo\" , \"two\" )]], \" \\n \" ) first second bar one - 0 . 943993 two 0 . 713135 foo one - 0 . 745637 two 0 . 213429 Name : A , dtype : float64 first second bar one - 0 . 943993 foo two 0 . 213429 Name : A , dtype : float64 \u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15 df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) df 0 1 2 3 bar one -0.059500 1.192862 1.134994 -1.745307 two 0.561741 1.629883 1.580909 0.052081 baz one -0.044704 -0.500037 0.104440 -0.226358 two 0.393521 -0.188607 0.632692 0.983372 foo one 0.767599 1.202836 -0.720521 -0.407423 two -0.624066 0.647863 0.250755 0.114761 qux one -0.671501 1.231328 -0.307714 0.155759 two 1.349382 -0.866358 0.527276 0.587707 df . loc [ 'bar' , [ 0 , 1 ]] 0 1 one -0.059500 1.192862 two 0.561741 1.629883 df . loc [([ 'bar' ], \"one\" ), [ 0 , 1 ]] # df.loc[(['bar'], \"one\"), (0, 1)] 0 1 bar one -0.0595 1.192862 \u9009\u62e9\u6570\u636e\u8fdb\u9636 \u521b\u5efa\u7d22\u5f15 def mklbl ( prefix , n ): return [ \" %s%s \" % ( prefix , i ) for i in range ( n )] miindex = pd . MultiIndex . from_product ([ mklbl ( 'A' , 4 ), mklbl ( 'B' , 2 ), mklbl ( 'C' , 4 ), mklbl ( 'D' , 2 )]) micolumns = pd . MultiIndex . from_tuples ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) print ( miindex , \" \\n \" ) print ( micolumns , \" \\n \" ) MultiIndex ([( 'A0' , 'B0' , 'C0' , 'D0' ), ( 'A0' , 'B0' , 'C0' , 'D1' ), ( 'A0' , 'B0' , 'C1' , 'D0' ), ( 'A0' , 'B0' , 'C1' , 'D1' ), ( 'A0' , 'B0' , 'C2' , 'D0' ), ( 'A0' , 'B0' , 'C2' , 'D1' ), ( 'A0' , 'B0' , 'C3' , 'D0' ), ( 'A0' , 'B0' , 'C3' , 'D1' ), ( 'A0' , 'B1' , 'C0' , 'D0' ), ( 'A0' , 'B1' , 'C0' , 'D1' ), ( 'A0' , 'B1' , 'C1' , 'D0' ), ( 'A0' , 'B1' , 'C1' , 'D1' ), ( 'A0' , 'B1' , 'C2' , 'D0' ), ( 'A0' , 'B1' , 'C2' , 'D1' ), ( 'A0' , 'B1' , 'C3' , 'D0' ), ( 'A0' , 'B1' , 'C3' , 'D1' ), ( 'A1' , 'B0' , 'C0' , 'D0' ), ( 'A1' , 'B0' , 'C0' , 'D1' ), ( 'A1' , 'B0' , 'C1' , 'D0' ), ( 'A1' , 'B0' , 'C1' , 'D1' ), ( 'A1' , 'B0' , 'C2' , 'D0' ), ( 'A1' , 'B0' , 'C2' , 'D1' ), ( 'A1' , 'B0' , 'C3' , 'D0' ), ( 'A1' , 'B0' , 'C3' , 'D1' ), ( 'A1' , 'B1' , 'C0' , 'D0' ), ( 'A1' , 'B1' , 'C0' , 'D1' ), ( 'A1' , 'B1' , 'C1' , 'D0' ), ( 'A1' , 'B1' , 'C1' , 'D1' ), ( 'A1' , 'B1' , 'C2' , 'D0' ), ( 'A1' , 'B1' , 'C2' , 'D1' ), ( 'A1' , 'B1' , 'C3' , 'D0' ), ( 'A1' , 'B1' , 'C3' , 'D1' ), ( 'A2' , 'B0' , 'C0' , 'D0' ), ( 'A2' , 'B0' , 'C0' , 'D1' ), ( 'A2' , 'B0' , 'C1' , 'D0' ), ( 'A2' , 'B0' , 'C1' , 'D1' ), ( 'A2' , 'B0' , 'C2' , 'D0' ), ( 'A2' , 'B0' , 'C2' , 'D1' ), ( 'A2' , 'B0' , 'C3' , 'D0' ), ( 'A2' , 'B0' , 'C3' , 'D1' ), ( 'A2' , 'B1' , 'C0' , 'D0' ), ( 'A2' , 'B1' , 'C0' , 'D1' ), ( 'A2' , 'B1' , 'C1' , 'D0' ), ( 'A2' , 'B1' , 'C1' , 'D1' ), ( 'A2' , 'B1' , 'C2' , 'D0' ), ( 'A2' , 'B1' , 'C2' , 'D1' ), ( 'A2' , 'B1' , 'C3' , 'D0' ), ( 'A2' , 'B1' , 'C3' , 'D1' ), ( 'A3' , 'B0' , 'C0' , 'D0' ), ( 'A3' , 'B0' , 'C0' , 'D1' ), ( 'A3' , 'B0' , 'C1' , 'D0' ), ( 'A3' , 'B0' , 'C1' , 'D1' ), ( 'A3' , 'B0' , 'C2' , 'D0' ), ( 'A3' , 'B0' , 'C2' , 'D1' ), ( 'A3' , 'B0' , 'C3' , 'D0' ), ( 'A3' , 'B0' , 'C3' , 'D1' ), ( 'A3' , 'B1' , 'C0' , 'D0' ), ( 'A3' , 'B1' , 'C0' , 'D1' ), ( 'A3' , 'B1' , 'C1' , 'D0' ), ( 'A3' , 'B1' , 'C1' , 'D1' ), ( 'A3' , 'B1' , 'C2' , 'D0' ), ( 'A3' , 'B1' , 'C2' , 'D1' ), ( 'A3' , 'B1' , 'C3' , 'D0' ), ( 'A3' , 'B1' , 'C3' , 'D1' )], ) MultiIndex ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) \u521b\u5efa\u793a\u4f8b\u6570\u636e dfmi = pd . DataFrame ( np . arange ( len ( miindex ) * len ( micolumns )) . reshape (( len ( miindex ), len ( micolumns ))), index = miindex , columns = micolumns ) . sort_index () . sort_index ( axis = 1 ) dfmi lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237 236 239 238 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249 248 251 250 D1 253 252 255 254 [ 64 rows x 4 columns ] \u4f7f\u7528\u5207\u7247 slice dfmi . loc [( slice ( 'A1' , 'A3' ), slice ( None ), [ 'C1' , 'C3' ]), :] dfmi . loc [ 'A1' , ( slice ( None ), 'foo' )] lvl0 a b lvl1 foo foo B0 C0 D0 64 66 D1 68 70 C1 D0 72 74 D1 76 78 C2 D0 80 82 D1 84 86 C3 D0 88 90 D1 92 94 B1 C0 D0 96 98 D1 100 102 C1 D0 104 106 D1 108 110 C2 D0 112 114 D1 116 118 C3 D0 120 122 D1 124 126 IndexSlice idx = pd . IndexSlice dfmi . loc [ idx [:, :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A0 B0 C1 D0 8 10 D1 12 14 C3 D0 24 26 D1 28 30 B1 C1 D0 40 42 D1 44 46 C3 D0 56 58 D1 60 62 A1 B0 C1 D0 72 74 D1 76 78 C3 D0 88 90 D1 92 94 B1 C1 D0 104 106 D1 108 110 C3 D0 120 122 D1 124 126 A2 B0 C1 D0 136 138 D1 140 142 C3 D0 152 154 D1 156 158 B1 C1 D0 168 170 D1 172 174 C3 D0 184 186 D1 188 190 A3 B0 C1 D0 200 202 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 \u4f7f\u7528 mask \u7d22\u5f15 mask = dfmi [( 'a' , 'foo' )] > 200 dfmi . loc [ idx [ mask , :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A3 B0 C1 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254 \u7ed9 loc \u6216 iloc \u6307\u5b9a\u8f74\u53c2\u6570 loc \u9ed8\u8ba4\u5bf9\u884c\u8fdb\u884c\u7d22\u5f15\uff1a dfmi . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] lvl0 a b lvl1 bar foo bah foo A0 B0 C1 D0 9 8 11 10 D1 13 12 15 14 C3 D0 25 24 27 26 D1 29 28 31 30 B1 C1 D0 41 40 43 42 D1 45 44 47 46 C3 D0 57 56 59 58 D1 61 60 63 62 A1 B0 C1 D0 73 72 75 74 D1 77 76 79 78 C3 D0 89 88 91 90 D1 93 92 95 94 B1 C1 D0 105 104 107 106 D1 109 108 111 110 C3 D0 121 120 123 122 D1 125 124 127 126 A2 B0 C1 D0 137 136 139 138 D1 141 140 143 142 C3 D0 153 152 155 154 D1 157 156 159 158 B1 C1 D0 169 168 171 170 D1 173 172 175 174 C3 D0 185 184 187 186 D1 189 188 191 190 A3 B0 C1 D0 201 200 203 202 D1 205 204 207 206 C3 D0 217 216 219 218 D1 221 220 223 222 B1 C1 D0 233 232 235 234 D1 237 236 239 238 C3 D0 249 248 251 250 D1 253 252 255 254 \u53ef\u4ee5\u6307\u5b9a axis \u53c2\u6570\uff0c\u6307\u5b9a\u9700\u8981\u7d22\u5f15\u7684\u8f74\uff1a dfmi . loc ( axis = 1 )[ \"a\" ] lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 C2 D0 17 16 ... ... ... A3 B1 C1 D1 237 236 C2 D0 241 240 D1 245 244 C3 D0 249 248 D1 253 252 [ 64 rows x 2 columns ] \u91cd\u65b0\u8d4b\u503c df2 = dfmi . copy () df2 . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] = - 10 df2 df2 = dfmi . copy () df2 . loc [ idx [:, :, [ 'C1' , 'C3' ]], :] = df2 * 1000 df2 lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9000 8000 11000 10000 D1 13000 12000 15000 14000 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237000 236000 239000 238000 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249000 248000 251000 250000 D1 253000 252000 255000 254000 [ 64 rows x 4 columns ] \u4ea4\u53c9\u9009\u62e9 DataFrame \u7684 xs() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u4ece\u800c\u53ef\u4ee5\u7b80\u4fbf\u5730\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u67d0\u4e00\u4e2a\u5c42\u7ea7\u8fdb\u884c\u6570\u636e\u7684\u9009\u53d6\u3002 df = pd . DataFrame ( np . random . randn ( 6 , 3 ), index = index [: 6 ]) df = df . T df first bar baz foo second one two one two one two 0 -1.103671 -0.169328 -1.575613 -1.972754 -0.774569 -0.791508 1 -0.902346 1.154518 2.185713 -0.473948 -0.312497 -0.267216 2 -0.020286 1.012314 -1.039006 0.277789 -0.674508 0.707265 .xs \u65b9\u6cd5\u9ed8\u8ba4 axis=0 \uff1a df . xs ( \"bar\" , level = 'first' , axis = 1 ) df . xs ( \"one\" , level = 'second' , axis = 1 ) first bar baz foo 0 -1.103671 -1.575613 -0.774569 1 -0.902346 2.185713 -0.312497 2 -0.020286 -1.039006 -0.674508 df . xs (( 'one' , 'bar' ), level = ( 'second' , 'first' ), axis = 1 ) first bar second one 0 -1.103671 1 -0.902346 2 -0.020286 .xs \u65b9\u6cd5\u9ed8\u8ba4 drop_level=False \uff1a df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = False ) first bar baz foo second one one one 0 -1.103671 -1.575613 -0.774569 1 -0.902346 2.185713 -0.312497 2 -0.020286 -1.039006 -0.674508 df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = True ) first bar baz foo 0 -1.103671 -1.575613 -0.774569 1 -0.902346 2.185713 -0.312497 2 -0.020286 -1.039006 -0.674508 Take\u65b9\u6cd5 \u4e0e NumPy \u7684 ndarrays \u76f8\u4f3c\uff0cpandas\u7684 Index \uff0c Series \uff0c\u548c DataFrame \u4e5f\u63d0\u4f9b take() \u65b9\u6cd5\u3002\u4ed6\u53ef\u4ee5\u6cbf\u7740\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u7d22\u5f15\u53d6\u56de\u6240\u6709\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u7d22\u5f15\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u5217\u8868\u6216\u8005ndarray\uff0c\u7528\u4ee5\u6307\u660e\u5728\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e\u3002 take \u4e5f\u53ef\u4ee5\u63a5\u53d7\u8d1f\u6574\u6570\uff0c\u4f5c\u4e3a\u76f8\u5bf9\u4e8e\u7ed3\u5c3e\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 index = pd . Index ( np . random . randint ( 0 , 1000 , 10 )) print ( index ) positions = [ 0 , 9 , 3 ] print ( index [ positions ]) print ( index . take ( positions )) Int64Index([886, 20, 973, 555, 482, 741, 14, 455, 473, 483], dtype='int64') Int64Index([886, 483, 555], dtype='int64') Int64Index([886, 483, 555], dtype='int64') ser = pd . Series ( np . random . randn ( 10 )) print ( ser . iloc [ positions ]) print ( ser . take ( positions )) 0 1.554295 9 2.223200 3 0.471164 dtype: float64 0 1.554295 9 2.223200 3 0.471164 dtype: float64 \u5bf9\u4e8e DataFrames \u6765\u8bf4\uff0c\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u7d22\u5f15\u5e94\u5f53\u662f\u4e00\u4e2a\u4e00\u7ef4\u5217\u8868\u6216\u8005ndarray\uff0c\u7528\u4e8e\u6307\u660e\u884c\u6216\u8005\u5217\u7684\u4f4d\u7f6e\u3002 frm = pd . DataFrame ( np . random . randn ( 5 , 3 )) print ( frm ) print ( frm . take ([ 1 , 4 , 3 ])) print ( frm . take ([ 0 , 2 ], axis = 1 )) 0 1 2 0 -0.847795 -1.868665 -0.309621 1 0.320975 0.344141 -0.947815 2 -0.960208 1.004652 -1.203950 3 0.756643 0.825118 -0.842164 4 0.834936 -1.210857 1.975266 0 1 2 1 0.320975 0.344141 -0.947815 4 0.834936 -1.210857 1.975266 3 0.756643 0.825118 -0.842164 0 2 0 -0.847795 -0.309621 1 0.320975 -0.947815 2 -0.960208 -1.203950 3 0.756643 -0.842164 4 0.834936 1.975266 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c pandas\u5bf9\u8c61\u7684 take \u65b9\u6cd5\u5e76\u4e0d\u4f1a\u6b63\u5e38\u5730\u5de5\u4f5c\u5728\u5e03\u5c14\u7d22\u5f15\u4e0a\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u5207\u610f\u5916\u7684\u7ed3\u679c\u3002 arr = np . random . randn ( 10 ) print ( arr ) print ( arr . take ([ False , False , True , True ])) print ( arr [[ 0 , 1 ]]) [-0.88574368 0.48475226 0.30228338 1.40681914 -0.93639036 0.05250617 -0.17633065 0.04839581 0.52009008 0.79065631] [-0.88574368 -0.88574368 0.48475226 0.48475226] [-0.88574368 0.48475226] ser = pd . Series ( np . random . randn ( 10 )) print ( ser ) print ( ser . take ([ False , False , True , True ])) print ( ser . iloc [[ 0 , 1 ]]) 0 0.783778 1 0.804286 2 1.054039 3 -0.673453 4 -0.162131 5 -0.516954 6 0.474947 7 0.595180 8 0.961538 9 0.512165 dtype: float64 0 0.783778 0 0.783778 1 0.804286 1 0.804286 dtype: float64 0 0.783778 1 0.804286 dtype: float64 \u6700\u540e\uff0c\u5173\u4e8e\u6027\u80fd\u65b9\u9762\u7684\u4e00\u4e2a\u5c0f\u5efa\u8bae\uff0c\u56e0\u4e3a take \u65b9\u6cd5\u5904\u7406\u7684\u662f\u4e00\u4e2a\u8303\u56f4\u66f4\u7a84\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u4f1a\u6bd4\u8bdd\u5b9e\u7d22\u5f15\uff08fancy indexing\uff09\u7684\u901f\u5ea6\u5feb\u5f88\u591a\u3002 arr = np . random . randn ( 10000 , 5 ) indexer = np . arange ( 10000 ) np . random . shuffle ( indexer ) % timeit arr [ indexer ] % timeit arr . take ( indexer , axis = 0 ) The slowest run took 4.86 times longer than the fastest. This could mean that an intermediate result is being cached. 1.2 ms \u00b1 688 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 291 \u00b5s \u00b1 60.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) ser = pd . Series ( arr [:, 0 ]) % timeit ser . iloc [ indexer ] % timeit ser . take ( indexer ) The slowest run took 5.55 times longer than the fastest. This could mean that an intermediate result is being cached. 1.44 ms \u00b1 1.03 ms per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 1.12 ms \u00b1 504 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \u5206\u7c7b\u7d22\u5f15 CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u975e\u5e38\u9002\u5408\u6709\u91cd\u590d\u7684\u7d22\u5f15\u3002\u8fd9\u662f\u4e00\u4e2a\u56f4\u7ed5 Categorical \u800c\u521b\u5efa\u7684\u5bb9\u5668\u3002\u8fd9\u53ef\u4ee5\u975e\u5e38\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u7d22\u5f15\u7684\u5177\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u3002 from pandas.api.types import CategoricalDtype df = pd . DataFrame ({ 'A' : np . arange ( 6 ), 'B' : list ( 'aabbca' )}) df [ 'B' ] = df [ 'B' ] . astype ( CategoricalDtype ( list ( 'cab' ))) print ( df , \" \\n \" ) print ( df . dtypes , \" \\n \" ) print ( df . B . cat . categories , \" \\n \" ) A B 0 0 a 1 1 a 2 2 b 3 3 b 4 4 c 5 5 a A int32 B category dtype : object Index ([ 'c' , 'a' , 'b' ], dtype = 'object' ) \u901a\u8fc7 .set_index() \u5efa\u7acb\u4e00\u4e2a\u6709 CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u7684 df2 \uff1a df2 = df . set_index ( 'B' ) print ( df2 . index ) CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u4f7f\u7528 __getitem__/.iloc/.loc \u8fdb\u884c\u7d22\u5f15\uff0c\u5728\u542b\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\u4e0a\u7684\u5de5\u4f5c\u539f\u7406\u76f8\u4f3c\u3002\u7d22\u5f15\u503c \u5fc5\u987b \u5728\u4e00\u4e2a\u5206\u7c7b\u4e2d\uff0c\u5426\u8005\u5c06\u4f1a\u5f15\u53d1 KeyError \u9519\u8bef\u3002 df2 . loc [ 'a' ] A B a 0 a 1 a 5 CategoricalIndex \u5728\u7d22\u5f15\u4e4b\u540e\u4e5f\u4f1a\u88ab \u4fdd\u7559 \uff1a df2 . loc [ 'a' ] . index CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u7d22\u5f15\u6392\u5e8f\u5c06\u4f1a\u6309\u7167\u7c7b\u522b\u6e05\u5355\u4e2d\u7684\u987a\u5e8f\u8fdb\u884c\uff08\u6211\u4eec\u5df2\u7ecf\u57fa\u4e8e CategoricalDtype(list('cab')) \u5efa\u7acb\u4e86\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u6b64\u6392\u5e8f\u7684\u987a\u5e8f\u662f cab \uff09 df2 . sort_index () A B c 4 a 0 a 1 a 5 b 2 b 3 \u5206\u7ec4\u64cd\u4f5c\uff08Groupby\uff09\u4e5f\u4f1a\u4fdd\u7559\u7d22\u5f15\u7684\u5168\u90e8\u4fe1\u606f\u3002 df2 . groupby ( level = 0 ) . sum () df2 . groupby ( level = 0 ) . sum () . index CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u91cd\u8bbe\u7d22\u5f15\u7684\u64cd\u4f5c\u5c06\u4f1a\u6839\u636e\u8f93\u5165\u7684\u7d22\u5f15\u503c\u8fd4\u56de\u4e00\u4e2a\u7d22\u5f15\u3002\u4f20\u5165\u4e00\u4e2a\u5217\u8868\uff0c\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u666e\u901a\u7684 Index \uff1b\u5982\u679c\u4f7f\u7528\u7c7b\u522b\u5bf9\u8c61 Categorical \uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b\u7d22\u5f15 CategoricalIndex \uff0c\u6309\u7167\u5176\u4e2d \u4f20\u5165\u7684 \u7684\u7c7b\u522b\u503c Categorical dtype\u6765\u8fdb\u884c\u7d22\u5f15\u3002\u6b63\u5982\u540c\u4f60\u53ef\u4ee5\u5bf9 \u4efb\u610f pandas\u7684\u7d22\u5f15\u8fdb\u884c\u91cd\u65b0\u7d22\u5f15\u4e00\u6837\uff0c\u8fd9\u5c06\u5141\u8bb8\u4f60\u968f\u610f\u7d22\u5f15\u4efb\u610f\u7684\u7d22\u5f15\u503c\uff0c\u5373\u4fbf\u5b83\u4eec\u5e76 \u4e0d\u5b58\u5728 \u5728\u4f60\u7684\u7c7b\u522b\u5bf9\u8c61\u4e2d\u3002 df2 . reindex ([ 'a' , 'e' ]) df2 . reindex ([ 'a' , 'e' ]) . index df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) . index \u95f4\u9694\u7d22\u5f15 pandas\u5728 0.20.0 \u7248\u672c\u4e2d\u65b0\u52a0\u5165 IntervalIndex \u548c\u5b83\u81ea\u5df1\u7279\u6709\u7684 IntervalDtype \u4ee5\u53ca Interval \u6807\u91cf\u7c7b\u578b\uff0c\u5728pandas\u4e2d\uff0c\u95f4\u9694\u6570\u636e\u662f\u83b7\u5f97\u5934\u7b49\u652f\u6301\u7684\u3002 IntervalIndex \u95f4\u9694\u7d22\u5f15\u5141\u8bb8\u4e00\u4e9b\u552f\u4e00\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u4e5f\u662f cut() \u548c qcut() \u7684\u8fd4\u56de\u7c7b\u578b \u4f7f\u7528 \u95f4\u9694\u7d22\u5f15 \u6765\u8fdb\u884c\u6570\u636e\u7d22\u5f15 df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 , 4 ]}, index = pd . IntervalIndex . from_breaks ([ 0 , 1 , 2 , 3 , 4 ])) df A (0, 1] 1 (1, 2] 2 (2, 3] 3 (3, 4] 4 \u95f4\u9694\u7d22\u5f15\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u6807\u7b7e\u7684\u7d22\u5f15 .loc \uff1a # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d df . loc [ 2 ] A 2 Name: (1, 2], dtype: int64 # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d 3\u4f4d\u4e8e(2, 3]\u4e4b\u4e2d df . loc [[ 2 , 3 ]] A (1, 2] 2 (2, 3] 3 \u5982\u679c\u6807\u7b7e\u88ab\u5305\u542b\u5728\u95f4\u9694\u5f53\u4e2d\uff0c\u8fd9\u4e2a\u95f4\u9694\u4e5f\u5c06\u4f1a\u88ab\u9009\u62e9 print ( df . loc [ 2.5 ]) print ( df . loc [[ 2.5 , 3.5 ]]) A 3 Name: (2, 3], dtype: int64 A (2, 3] 3 (3, 4] 4 \u4f7f\u7528 Interval \u6765\u9009\u62e9\u6570\u636e\uff0c\u5c06\u53ea\u8fd4\u56de\u4e25\u683c\u5339\u914d\uff08\u4ecepandas0.25.0\u5f00\u59cb\uff09\u3002 df . loc [ pd . Interval ( 1 , 2 )] A 2 Name: (1, 2], dtype: int64 \u8bd5\u56fe\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u88ab\u4e25\u683c\u5305\u542b\u5728 IntervalIndex \u5185\u7684\u533a\u95f4 Interval \uff0c\u5c06\u4f1a\u51fa\u53d1 KeyError \u9519\u8bef\u3002 try : df . loc [ pd . Interval ( 0.5 , 2.5 )] except KeyError as e : print ( \"KeyError:\" , e ) KeyError : Interval ( 0.5 , 2.5 , closed = 'right' ) \u53ef\u4ee5\u4f7f\u7528 overlaps() \u6765\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u9009\u62e9\u5668\uff0c\u6765\u9009\u4e2d\u6240\u6709\u4e0e \u7ed9\u5b9a\u533a\u95f4 ( Interval )\u91cd\u590d\u7684\u6240\u6709\u533a\u95f4\u3002 idxr = df . index . overlaps ( pd . Interval ( 0.5 , 2.5 )) print ( idxr ) print ( df [ idxr ]) [ True True True False] A (0, 1] 1 (1, 2] 2 (2, 3] 3 \u4f7f\u7528 cut \u548c qcut \u6765\u4e3a\u6570\u636e\u5206\u5757 cut() \u548c qcut() \u90fd\u5c06\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b Categorical \u5bf9\u8c61\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5206\u5757\u533a\u57df\u90fd\u4f1a\u4ee5 \u5206\u7c7b\u7d22\u5f15 IntervalIndex \u7684\u65b9\u5f0f\u88ab\u521b\u5efa\u5e76\u4fdd\u5b58\u5728\u5b83\u7684 .categories \u5c5e\u6027\u4e2d\u3002 c = pd . cut ( range ( 4 ), bins = 2 ) print ( c ) print ( c . categories ) [(-0.003, 1.5], (-0.003, 1.5], (1.5, 3.0], (1.5, 3.0]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] IntervalIndex([(-0.003, 1.5], (1.5, 3.0]], closed = 'right', dtype='interval[float64]') cut() \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a IntervalIndex \u4f5c\u4e3a\u4ed6\u7684 bins \u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684pandas\u7684\u5199\u6cd5\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528 cut() \u5728\u4e00\u4e9b\u6570\u636e\u4e0a\u9762\uff0c\u5e76\u4e14\u5c06 bins \u8bbe\u7f6e\u4e3a\u67d0\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570 \uff0c\u4ece\u800c\u751f\u6210bins\u3002 \u968f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6\u7684\u6570\u636e\u4e0a\u8c03\u7528 cut() \uff0c\u5e76\u4f20\u5165 .categories \u7684\u503c\uff0c\u4f5c\u4e3a bins \u53c2\u6570\u3002\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5c31\u4e5f\u5c06\u4f1a\u88ab\u5206\u914d\u5230\u540c\u6837\u7684bins\u91cc\u9762 pd . cut ([ 0 , 3 , 5 , 1 ], bins = c . categories ) [(-0.003, 1.5], (1.5, 3.0], NaN, (-0.003, 1.5]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] \u4efb\u4f55\u843d\u5728bins\u4e4b\u5916\u7684\u6570\u636e\u90fd\u5c06\u4f1a\u88ab\u8bbe\u4e3a NaN \u751f\u6210\u4e00\u5b9a\u533a\u95f4\u5185\u7684\u95f4\u9694 \u5982\u679c\u6211\u4eec\u9700\u8981\u7ecf\u5e38\u5730\u4f7f\u7528\u6b65\u8fdb\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 interval_range() \u51fd\u6570\uff0c\u7ed3\u5408 start , end , \u548c periods \u6765\u5efa\u7acb\u4e00\u4e2a IntervalIndex \u5bf9\u4e8e\u6570\u503c\u578b\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u7684 interval_range \u95f4\u9694\u9891\u7387\u662f1\uff0c\u5bf9\u4e8edatetime\u7c7b\u578b\u7684\u95f4\u9694\u5219\u662f\u65e5\u5386\u65e5\u3002 pd . interval_range ( start = 0 , end = 5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 ) pd . interval_range ( end = pd . Timedelta ( '3 days' ), periods = 3 ) IntervalIndex ( [ (0 days 00:00:00, 1 days 00:00:00 ] , ( 1 days 00 : 00 : 00 , 2 days 00 : 00 : 00 ] , ( 2 days 00 : 00 : 00 , 3 days 00 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) freq \u53c2\u6570\u53ef\u4ee5\u88ab\u7528\u6765\u660e\u786e\u975e\u9ed8\u8ba4\u7684\u9891\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u5145\u5206\u5730\u5229\u7528\u5404\u79cd\u5404\u6837\u7684 frequency aliases datetime\u7c7b\u578b\u7684\u65f6\u95f4\u95f4\u9694\u3002 pd . interval_range ( start = 0 , periods = 5 , freq = 1.5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 , freq = 'W' ) pd . interval_range ( start = pd . Timedelta ( '0 days' ), periods = 3 , freq = '9H' ) IntervalIndex ( [ (0 days 00:00:00, 0 days 09:00:00 ] , ( 0 days 09 : 00 : 00 , 0 days 18 : 00 : 00 ] , ( 0 days 18 : 00 : 00 , 1 days 03 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) \u6b64\u5916\uff0c closed \u53c2\u6570\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u54ea\u4e2a\u8fb9\u754c\u662f\u5305\u542b\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u95f4\u9694\u7684\u53f3\u754c\u662f\u5305\u542b\u7684\u3002 pd . interval_range ( start = 0 , end = 4 , closed = 'both' ) pd . interval_range ( start = 0 , end = 4 , closed = 'neither' ) IntervalIndex ( [ (0, 1), (1, 2), (2, 3), (3, 4) ] , closed = 'neither' , dtype = 'interval[int64]' ) 0.23.0\u7248\u672c\u52a0\u5165\u7684\u529f\u80fd \u4f7f\u7528 start , end , \u548c periods \u53ef\u4ee5\u4ece start \u5230 end \uff08\u5305\u542b\uff09\u751f\u6210\u4e00\u4e2a\u5e73\u5747\u5206\u914d\u7684\u95f4\u9694\uff0c\u5728\u8fd4\u56de IntervalIndex \u4e2d\u751f\u6210 periods \u8fd9\u4e48\u591a\u7684\u5143\u7d20\uff08\u8bd1\u8005\uff1a\u533a\u95f4\uff09\u3002 pd . interval_range ( start = 0 , end = 6 , periods = 4 ) pd . interval_range ( pd . Timestamp ( '2018-01-01' ), pd . Timestamp ( '2018-02-28' ), periods = 3 ) IntervalIndex ( [ (2018-01-01, 2018-01-20 08:00:00 ] , ( 2018 - 01 - 20 08 : 00 : 00 , 2018 - 02 - 08 16 : 00 : 00 ] , ( 2018 - 02 - 08 16 : 00 : 00 , 2018 - 02 - 28 ]] , closed = 'right' , dtype = 'interval[datetime64[ns]]' )","title":"7.4.\u7d22\u5f15\u5bf9\u8c61"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_1","text":"pandas\u7684\u7d22\u5f15\u5bf9\u8c61\u8d1f\u8d23\u7ba1\u7406\u8f74\u6807\u7b7e\u548c\u5176\u4ed6\u5143\u6570\u636e\uff08\u6bd4\u5982\u8f74\u540d\u79f0\u7b49\uff09\u3002\u6784\u5efaSeries\u6216DataFrame\u65f6\uff0c\u6240\u7528\u5230\u7684\u4efb\u4f55\u6570\u7ec4\u6216\u5176\u4ed6\u5e8f\u5217\u7684\u6807\u7b7e\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210\u4e00\u4e2aIndex\uff0c\u800c index\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684 \uff0c\u4e5f\u5c31\u662findex\u5bf9\u8c61\u7684\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\uff08immutable\uff09\u3002\u5982\u679c\u8981\u4fee\u6539index\u5185\u5bb9\uff0c\u53ea\u80fd\u901a\u8fc7\u91cd\u65b0\u8d4b\u503c\u7684\u5f62\u5f0f\u3002 \u4e0d\u53ef\u4fee\u6539\u6027\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u4f7fIndex\u5bf9\u8c61\u5728\u591a\u4e2a\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u5b89\u5168\u5171\u4eab\u3002 \u4e0b\u8868\u5217\u51fa\u4e86pandas\u4e2d\u4e3b\u8981\u7684Index\u5bf9\u8c61\uff1a \u7c7b \u8bf4\u660e Index \u6700\u6cdb\u5316\u7684Index\u5bf9\u8c61\uff0c\u5c06\u8f74\u6807\u7b7e\u8868\u793a\u4e3a\u4e00\u4e2a\u7531Python\u5bf9\u8c61\u7ec4\u6210\u7684NumPy \u6570\u7ec4 Int64lndex \u9488\u5bf9\u6574\u6570\u7684\u7279\u6b8aIndex Multiindex \u201c\u5c42\u6b21\u5316\u201d\u7d22\u5f15\u5bf9\u8c61\uff0c\u8868\u793a\u5355\u4e2a\u8f74\u4e0a\u7684\u591a\u5c42\u7d22\u5f15\u3002\u53ef\u4ee5\u770b\u505a\u7531\u5143\u7ec4\u7ec4\u6210\u7684\u6570\u7ec4 Datetimelndex \u5b58\u50a8\u7eb3\u79d2\u7ea7\u65f6\u95f4\u622a\uff08\u7528NumPy\u7684datetime64\u7c7b\u578b\u8868\u793a\uff09 Periodlndex \u9488\u5bf9Period\u6570\u636e\uff08\u65f6\u95f4\u95f4\u9694\uff09\u7684\u7279\u6b8aIndex \u4ee5\u4e0b\u662fpandas\u4e2d\u6240\u6709Index\u5bf9\u8c61\uff1a [ 'CategoricalIndex' , 'DatetimeIndex' , 'Float64Index' , 'Index' , 'Int64Index' , 'IntervalIndex' , 'MultiIndex' , 'PeriodIndex' , 'RangeIndex' , 'TimedeltaIndex' , 'UInt64Index' ] \u6bcf\u4e2a\u7d22\u5f15\u90fd\u6709\u4e00\u4e9b\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u8bbe\u7f6e\u903b\u8f91\u5e76\u56de\u7b54\u6709\u5173\u8be5\u7d22\u5f15\u6240\u5305\u542b\u7684\u6570\u636e\u7684\u5e38\u89c1\u95ee\u9898\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u8fd9\u4e9b\u51fd\u6570\uff1a \u8bf4\u660e \u65b9\u6cd5 append \u8fde\u63a5\u53e6\u4e00\u4e2aindex\u5bf9\u8c61.\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684Index diff \u8ba1\u7b97\u5dee\u96c6\uff0c\u5e76\u5f97\u5230\u4e00\u4e2aIndex intersection \u8ba1\u7b97\u4ea4\u96c6 union \u8ba1\u7b97\u5e76\u96c6 isin \u8ba1\u7b97\u4e00\u4e2a\u6307\u793a\u5404\u503c\u662f\u5426\u90fd\u5305\u542b\u5728\u53c2\u6570\u96c6\u5408\u4e2d\u7684\u5e03\u5c14\u578b\u6570\u7ec4 delete \u5220\u9664\u7d22\u5f15i\u5904\u7684\u5143\u7d20\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index drop \u5220\u9664\u4f20\u5165\u7684\u503c.\u5e76\u5f97\u5230\u65b0\u7684Index insert \u5c06\u5143\u7d20\u63d2\u5165\u5230\u7d22\u5f15i\u5904\uff0c\u5e76\u5f97\u5230\u65b0\u7684Index is_monotonic \u5f53\u5404\u5143\u7d20\u5747\u5927\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u8fd4\u56deTRUE is_unique \u5f53Index\u6ca1\u6709\u91cd\u590d\u503c\u65f6\uff0c\u8fd4\u56deTrue unique \u8ba1\u7b97Index\u4e2d\u552f\u4e00\u503c\u7684\u6570\u7ec4","title":"\u7d22\u5f15\u5bf9\u8c61"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#index","text":"class pandas.Index(data=None, dtype=None, copy=False, name=None, fastpath=False, tupleize_cols=True) \uff1a\u521b\u5efa Index \u5bf9\u8c61\u3002 \u53c2\u6570\uff1a data \uff1a\u4e00\u4e2a array-like \uff0c\u5fc5\u987b\u662f\u4e00\u7ef4\u7684 name \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e3a Index \u7684\u540d\u5b57\u3002 dtype \uff1a\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4e3a object copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u8f93\u5165\u6570\u636e data tupleize_cols \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u53ef\u80fd\u5219\u5c3d\u91cf\u521b\u5efa MultiIndex \u5bf9\u8c61 pd . Index ([ \"a\" , \"b\" , \"c\" ]) Index(['a', 'b', 'c'], dtype='object') \u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7 pd.Index \u7c7b\u4e5f\u53ef\u4ee5\u521b\u5efa pd.Int64Index \u3001 pd.Float64Index \u3001 pd.RangeIndex \u3001 pd.UInt64Index \u3001 pd.DatetimeIndex \u3001 pd.TimedeltaIndex from datetime import datetime , timedelta print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . uint64 , name = \"UInt64Index\" ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . int64 , name = \"Int64Index\" ))) print ( type ( pd . Index ([ 1 , 2 , 3 , 4 ], dtype = np . float64 , name = \"Float64Index\" ))) print ( type ( pd . Index ( range ( 5 ), name = \"RangeIndex\" ))) print ( type ( pd . Index ([ datetime . today ()], name = \"DatetimeIndex\" ))) print ( type ( pd . Index ([ timedelta ( microseconds = 1 )], name = \"TimedeltaIndex\" ))) <class 'pandas.core.indexes.numeric.UInt64Index'> <class 'pandas.core.indexes.numeric.Int64Index'> <class 'pandas.core.indexes.numeric.Float64Index'> <class 'pandas.core.indexes.range.RangeIndex'> <class 'pandas.core.indexes.datetimes.DatetimeIndex'> <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>","title":"Index"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#multiindex","text":"MultiIndex \u4ee3\u8868\u7684\u662f\u591a\u7ea7\u7d22\u5f15\u5bf9\u8c61\u3002\u5b83\u7ee7\u627f\u81ea Index \uff0c\u5176\u4e2d\u7684\u591a\u7ea7 label \u91c7\u7528\u5143\u7ec4\u5bf9\u8c61\u6765\u8868\u793a\u3002\u5728 MultiIndex \u5185\u90e8\uff0c\u5e76\u4e0d\u76f4\u63a5\u4fdd\u5b58\u5143\u7ec4\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u591a\u4e2a Index \u5bf9\u8c61\u4fdd\u5b58\u7d22\u5f15\u4e2d\u6bcf\u7ea7\u7684 label \u3002 class pandas.MultiIndex(levels=None, labels=None, sortorder=None, names=None, copy=False, verify_integrity=True, _set_identity=True, name=None, **kwargs) \u53c2\u6570\uff1a levels \uff1a\u4e00\u4e2a\u6570\u7ec4\u7684\u5217\u8868\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e00\u7ea7\u7684 level \u3002 labels \uff1a\u4e00\u4e2a\u6570\u7ec4\u7684\u5217\u8868\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e00\u7ea7 level \u7684\u4e0b\u6807\u3002\u7b2c$i$\u7ea7 label \u662f\u8fd9\u6837\u4ea7\u751f\u7684\uff1a \u9996\u5148\u83b7\u53d6 labels[i] \uff0c\u5b83\u662f\u4e00\u4e2a\u4e0b\u6807\u5e8f\u5217\uff0c\u4ee3\u8868\u7b2c$i$\u7ea7\u3002 \u5047\u8bbe\u7b2c$k$\u4f4d\u7f6e\u4e3a\u6574\u6570 3\uff0c\u5728\u7b2c$i$\u7ea7\u7b2c$k$\u4f4d\u7684 label \u5c31\u662f levels[i][3] \u3002 sortorder \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u4e86\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\u7684 level \u7ea7\u522b\u3002 names \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u6bcf\u4e2a Index \u7684 name \u3002\u5176\u4e2d\u6bcf\u4e2a\u7ea7\u522b\u5bf9\u5e94\u4e00\u4e2a Index copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u6d4b\u5404\u7ea7\u522b\u7684 label/level \u90fd\u662f\u8fde\u7eed\u7684\u4e14\u6709\u6548\u7684 name \uff1a MultiIndex \u7684\u540d\u5b57 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7c7b\u65b9\u6cd5\u6765\u521b\u5efa MultiIndex \uff1a MultiIndex.from_arrays(arrays[, sortorder, ...]) \uff1a\u5c06\u4e8c\u7ef4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d arrays \u4e3a array-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u5217 label \uff08\u4e00\u4e2a\u7ea7\u522b\uff09 MultiIndex.from_tuples(tuples[, sortorder, ...]) \uff1a\u5c06\u5143\u7ec4\u5e8f\u5217\u8f6c\u6362\u4e3a MultiIndex \u3002\u5176\u4e2d tuples \u4e3a tuple-like \u7684\u5e8f\u5217\uff0c\u6bcf\u4e2a array-like \u6309\u987a\u5e8f\u7684\u7ed9\u51fa\u4e86\u4e00\u884c label \u5bf9\uff08\u4e0d\u540c\u7ea7\u522b\u7684\u4e00\u5bf9\uff09 MultiIndex.from_product(iterables[, ...]) \uff1a\u6839\u636e\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u4e00\u4e2a MultiIndex \uff0c\u5176\u4e2d\u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7684\u7b97\u6cd5\u3002\u5176\u4e2d iterables \u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5e8f\u5217 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u7ed9 Index() \uff0c\u5e76\u4e14\u5c06 tupleize_cols \u8bbe\u7f6e\u4e3a True \u6765\u521b\u5efa MultiIndex","title":"\u591a\u7ea7\u7d22\u5f15 MultiIndex"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#tuplemultiindex","text":"arrays = [ [ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]] tuples = list ( zip ( * arrays )) pprint . pprint ( tuples ) print ( \"\" ) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )], names = [ 'first' , 'second' ])","title":"\u4ecetuple\u521b\u5efaMultiIndex"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#iterablesmultiindex","text":"iterables = [[ 'bar' , 'baz' , 'foo' , 'qux' ], [ 'one' , 'two' ]] pprint . pprint ( iterables ) print ( \"\" ) index = pd . MultiIndex . from_product ( iterables , names = [ 'first' , 'second' ]) pprint . pprint ( index ) [['bar', 'baz', 'foo', 'qux'], ['one', 'two']] MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names = ['first', 'second'])","title":"\u4eceiterables\u521b\u5efaMultiIndex"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#dataframemultiindex","text":"df = pd . DataFrame ([[ 'bar' , 'one' ], [ 'bar' , 'two' ], [ 'foo' , 'one' ], [ 'foo' , 'two' ]], columns = [ 'first' , 'second' ]) pprint . pprint ( df ) print ( \"\" ) index = pd . MultiIndex . from_frame ( df ) pprint . pprint ( index ) first second 0 bar one 1 bar two 2 foo one 3 foo two MultiIndex ([( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' )], names = [ 'first' , 'second' ])","title":"\u4eceDataFrame\u521b\u5efaMultiIndex"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#list-likemultiindex","text":"arrays = [ np . array ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ]), np . array ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ])] pprint . pprint ( arrays ) pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) [array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], dtype='<U3'), array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'], dtype='<U3')] 0 1 2 3 bar one 1.272859 1.590902 1.533832 0.896089 two -1.338722 -0.930629 0.228179 1.229562 baz one -3.015706 -1.701900 1.237405 -2.174275 two -0.826832 -1.058854 -0.367501 0.974535 foo one -0.617897 -1.102916 -0.049820 1.055834 two -0.361094 -1.281896 0.596017 -0.763006 qux one 0.162307 -0.839610 -1.930223 0.178659 two -1.095679 0.109408 0.342514 0.676979 # s = pd.Series(np.random.randn(8), index=arrays) # s","title":"\u4ecelist-like\u521b\u5efaMultiIndex"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_2","text":"","title":"\u9009\u62e9\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_3","text":"\u521b\u5efa\u793a\u4f8bdataframe\uff1a tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 3 , 8 ), index = [ 'A' , 'B' , 'C' ], columns = index ) df first bar baz foo qux second one two one two one two one two A -0.943993 0.713135 -1.476287 0.148504 -0.745637 0.213429 0.292039 0.576053 B -1.526875 -0.661510 0.233744 -2.124779 2.527988 -0.649525 -1.197415 -1.194035 C -0.948963 -1.212174 -0.172934 -1.164432 0.017524 -0.044831 0.744810 -1.540683 dataframe\u7684 [] \u9009\u62e9\u5217\uff1a df [ \"bar\" ] second one two A -0.943993 0.713135 B -1.526875 -0.661510 C -0.948963 -1.212174 [] \u4f7f\u7528\u591a\u7ea7\u7d22\u5f15\uff1a # \u5b9e\u9645\u4e0a\u4e0e df[(\"bar\", \"one\")] \u7b49\u4ef7 df [ \"bar\" , \"one\" ] A -0.943993 B -1.526875 C -0.948963 Name: (bar, one), dtype: float64 [[]] \u9009\u62e9\u591a\u5217\uff1a df [[ \"bar\" , \"baz\" , \"foo\" ]] # list first bar baz foo second one two one two one two A -0.943993 0.713135 -1.476287 0.148504 -0.745637 0.213429 B -1.526875 -0.661510 0.233744 -2.124779 2.527988 -0.649525 C -0.948963 -1.212174 -0.172934 -1.164432 0.017524 -0.044831 () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15\uff1a df [[( \"bar\" , \"one\" ), ( \"baz\" , \"one\" )]] # list of tuples first bar baz second one one A -0.943993 -1.476287 B -1.526875 0.233744 C -0.948963 -0.172934 # \u884c\u5217\u7d22\u5f15 print ( df . loc [ \"A\" , \"bar\" ], \" \\n \" ) # () \u7528\u4e8e\u540c\u4e00\u8f74\u7684\u591a\u7ea7\u7d22\u5f15 print ( df . loc [ \"A\" , ( \"bar\" , \"one\" )], \" \\n \" ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 \u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801\u7b49\u4ef7 print ( df . loc [ \"A\" , [( \"bar\" , \"one\" )]], \" \\n \" ) print ( df . loc [ \"A\" , ( \"bar\" , [ \"one\" ])], \" \\n \" ) print ( df . loc [ \"A\" , ([ \"bar\" ], \"one\" )], \" \\n \" ) # [] \u7528\u4e8e\u589e\u52a0\u8f74 print ( df . loc [ \"A\" , [ \"bar\" ]], \" \\n \" ) second one - 0 . 943993 two 0 . 713135 Name : A , dtype : float64 - 0 . 943993274158185 first second bar one - 0 . 943993 Name : A , dtype : float64 first second bar one - 0 . 943993 Name : A , dtype : float64 first second bar one - 0 . 943993 Name : A , dtype : float64 first second bar one - 0 . 943993 two 0 . 713135 Name : A , dtype : float64 # tuple of lists print ( df . loc [ \"A\" , ([ \"bar\" , \"foo\" ], [ \"one\" , \"two\" ])], \" \\n \" ) # list of tuples print ( df . loc [ \"A\" , [( \"bar\" , \"one\" ), ( \"foo\" , \"two\" )]], \" \\n \" ) first second bar one - 0 . 943993 two 0 . 713135 foo one - 0 . 745637 two 0 . 213429 Name : A , dtype : float64 first second bar one - 0 . 943993 foo two 0 . 213429 Name : A , dtype : float64","title":"\u5217\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_4","text":"df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = arrays ) df 0 1 2 3 bar one -0.059500 1.192862 1.134994 -1.745307 two 0.561741 1.629883 1.580909 0.052081 baz one -0.044704 -0.500037 0.104440 -0.226358 two 0.393521 -0.188607 0.632692 0.983372 foo one 0.767599 1.202836 -0.720521 -0.407423 two -0.624066 0.647863 0.250755 0.114761 qux one -0.671501 1.231328 -0.307714 0.155759 two 1.349382 -0.866358 0.527276 0.587707 df . loc [ 'bar' , [ 0 , 1 ]] 0 1 one -0.059500 1.192862 two 0.561741 1.629883 df . loc [([ 'bar' ], \"one\" ), [ 0 , 1 ]] # df.loc[(['bar'], \"one\"), (0, 1)] 0 1 bar one -0.0595 1.192862","title":"\u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_5","text":"","title":"\u9009\u62e9\u6570\u636e\u8fdb\u9636"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_6","text":"def mklbl ( prefix , n ): return [ \" %s%s \" % ( prefix , i ) for i in range ( n )] miindex = pd . MultiIndex . from_product ([ mklbl ( 'A' , 4 ), mklbl ( 'B' , 2 ), mklbl ( 'C' , 4 ), mklbl ( 'D' , 2 )]) micolumns = pd . MultiIndex . from_tuples ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ]) print ( miindex , \" \\n \" ) print ( micolumns , \" \\n \" ) MultiIndex ([( 'A0' , 'B0' , 'C0' , 'D0' ), ( 'A0' , 'B0' , 'C0' , 'D1' ), ( 'A0' , 'B0' , 'C1' , 'D0' ), ( 'A0' , 'B0' , 'C1' , 'D1' ), ( 'A0' , 'B0' , 'C2' , 'D0' ), ( 'A0' , 'B0' , 'C2' , 'D1' ), ( 'A0' , 'B0' , 'C3' , 'D0' ), ( 'A0' , 'B0' , 'C3' , 'D1' ), ( 'A0' , 'B1' , 'C0' , 'D0' ), ( 'A0' , 'B1' , 'C0' , 'D1' ), ( 'A0' , 'B1' , 'C1' , 'D0' ), ( 'A0' , 'B1' , 'C1' , 'D1' ), ( 'A0' , 'B1' , 'C2' , 'D0' ), ( 'A0' , 'B1' , 'C2' , 'D1' ), ( 'A0' , 'B1' , 'C3' , 'D0' ), ( 'A0' , 'B1' , 'C3' , 'D1' ), ( 'A1' , 'B0' , 'C0' , 'D0' ), ( 'A1' , 'B0' , 'C0' , 'D1' ), ( 'A1' , 'B0' , 'C1' , 'D0' ), ( 'A1' , 'B0' , 'C1' , 'D1' ), ( 'A1' , 'B0' , 'C2' , 'D0' ), ( 'A1' , 'B0' , 'C2' , 'D1' ), ( 'A1' , 'B0' , 'C3' , 'D0' ), ( 'A1' , 'B0' , 'C3' , 'D1' ), ( 'A1' , 'B1' , 'C0' , 'D0' ), ( 'A1' , 'B1' , 'C0' , 'D1' ), ( 'A1' , 'B1' , 'C1' , 'D0' ), ( 'A1' , 'B1' , 'C1' , 'D1' ), ( 'A1' , 'B1' , 'C2' , 'D0' ), ( 'A1' , 'B1' , 'C2' , 'D1' ), ( 'A1' , 'B1' , 'C3' , 'D0' ), ( 'A1' , 'B1' , 'C3' , 'D1' ), ( 'A2' , 'B0' , 'C0' , 'D0' ), ( 'A2' , 'B0' , 'C0' , 'D1' ), ( 'A2' , 'B0' , 'C1' , 'D0' ), ( 'A2' , 'B0' , 'C1' , 'D1' ), ( 'A2' , 'B0' , 'C2' , 'D0' ), ( 'A2' , 'B0' , 'C2' , 'D1' ), ( 'A2' , 'B0' , 'C3' , 'D0' ), ( 'A2' , 'B0' , 'C3' , 'D1' ), ( 'A2' , 'B1' , 'C0' , 'D0' ), ( 'A2' , 'B1' , 'C0' , 'D1' ), ( 'A2' , 'B1' , 'C1' , 'D0' ), ( 'A2' , 'B1' , 'C1' , 'D1' ), ( 'A2' , 'B1' , 'C2' , 'D0' ), ( 'A2' , 'B1' , 'C2' , 'D1' ), ( 'A2' , 'B1' , 'C3' , 'D0' ), ( 'A2' , 'B1' , 'C3' , 'D1' ), ( 'A3' , 'B0' , 'C0' , 'D0' ), ( 'A3' , 'B0' , 'C0' , 'D1' ), ( 'A3' , 'B0' , 'C1' , 'D0' ), ( 'A3' , 'B0' , 'C1' , 'D1' ), ( 'A3' , 'B0' , 'C2' , 'D0' ), ( 'A3' , 'B0' , 'C2' , 'D1' ), ( 'A3' , 'B0' , 'C3' , 'D0' ), ( 'A3' , 'B0' , 'C3' , 'D1' ), ( 'A3' , 'B1' , 'C0' , 'D0' ), ( 'A3' , 'B1' , 'C0' , 'D1' ), ( 'A3' , 'B1' , 'C1' , 'D0' ), ( 'A3' , 'B1' , 'C1' , 'D1' ), ( 'A3' , 'B1' , 'C2' , 'D0' ), ( 'A3' , 'B1' , 'C2' , 'D1' ), ( 'A3' , 'B1' , 'C3' , 'D0' ), ( 'A3' , 'B1' , 'C3' , 'D1' )], ) MultiIndex ([( 'a' , 'foo' ), ( 'a' , 'bar' ), ( 'b' , 'foo' ), ( 'b' , 'bah' )], names = [ 'lvl0' , 'lvl1' ])","title":"\u521b\u5efa\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_7","text":"dfmi = pd . DataFrame ( np . arange ( len ( miindex ) * len ( micolumns )) . reshape (( len ( miindex ), len ( micolumns ))), index = miindex , columns = micolumns ) . sort_index () . sort_index ( axis = 1 ) dfmi lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9 8 11 10 D1 13 12 15 14 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237 236 239 238 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249 248 251 250 D1 253 252 255 254 [ 64 rows x 4 columns ]","title":"\u521b\u5efa\u793a\u4f8b\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_8","text":"","title":"\u4f7f\u7528\u5207\u7247"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#slice","text":"dfmi . loc [( slice ( 'A1' , 'A3' ), slice ( None ), [ 'C1' , 'C3' ]), :] dfmi . loc [ 'A1' , ( slice ( None ), 'foo' )] lvl0 a b lvl1 foo foo B0 C0 D0 64 66 D1 68 70 C1 D0 72 74 D1 76 78 C2 D0 80 82 D1 84 86 C3 D0 88 90 D1 92 94 B1 C0 D0 96 98 D1 100 102 C1 D0 104 106 D1 108 110 C2 D0 112 114 D1 116 118 C3 D0 120 122 D1 124 126","title":"slice"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#indexslice","text":"idx = pd . IndexSlice dfmi . loc [ idx [:, :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A0 B0 C1 D0 8 10 D1 12 14 C3 D0 24 26 D1 28 30 B1 C1 D0 40 42 D1 44 46 C3 D0 56 58 D1 60 62 A1 B0 C1 D0 72 74 D1 76 78 C3 D0 88 90 D1 92 94 B1 C1 D0 104 106 D1 108 110 C3 D0 120 122 D1 124 126 A2 B0 C1 D0 136 138 D1 140 142 C3 D0 152 154 D1 156 158 B1 C1 D0 168 170 D1 172 174 C3 D0 184 186 D1 188 190 A3 B0 C1 D0 200 202 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254","title":"IndexSlice"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#mask","text":"mask = dfmi [( 'a' , 'foo' )] > 200 dfmi . loc [ idx [ mask , :, [ 'C1' , 'C3' ]], idx [:, 'foo' ]] lvl0 a b lvl1 foo foo A3 B0 C1 D1 204 206 C3 D0 216 218 D1 220 222 B1 C1 D0 232 234 D1 236 238 C3 D0 248 250 D1 252 254","title":"\u4f7f\u7528 mask \u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#lociloc","text":"loc \u9ed8\u8ba4\u5bf9\u884c\u8fdb\u884c\u7d22\u5f15\uff1a dfmi . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] lvl0 a b lvl1 bar foo bah foo A0 B0 C1 D0 9 8 11 10 D1 13 12 15 14 C3 D0 25 24 27 26 D1 29 28 31 30 B1 C1 D0 41 40 43 42 D1 45 44 47 46 C3 D0 57 56 59 58 D1 61 60 63 62 A1 B0 C1 D0 73 72 75 74 D1 77 76 79 78 C3 D0 89 88 91 90 D1 93 92 95 94 B1 C1 D0 105 104 107 106 D1 109 108 111 110 C3 D0 121 120 123 122 D1 125 124 127 126 A2 B0 C1 D0 137 136 139 138 D1 141 140 143 142 C3 D0 153 152 155 154 D1 157 156 159 158 B1 C1 D0 169 168 171 170 D1 173 172 175 174 C3 D0 185 184 187 186 D1 189 188 191 190 A3 B0 C1 D0 201 200 203 202 D1 205 204 207 206 C3 D0 217 216 219 218 D1 221 220 223 222 B1 C1 D0 233 232 235 234 D1 237 236 239 238 C3 D0 249 248 251 250 D1 253 252 255 254 \u53ef\u4ee5\u6307\u5b9a axis \u53c2\u6570\uff0c\u6307\u5b9a\u9700\u8981\u7d22\u5f15\u7684\u8f74\uff1a dfmi . loc ( axis = 1 )[ \"a\" ] lvl1 bar foo A0 B0 C0 D0 1 0 D1 5 4 C1 D0 9 8 D1 13 12 C2 D0 17 16 ... ... ... A3 B1 C1 D1 237 236 C2 D0 241 240 D1 245 244 C3 D0 249 248 D1 253 252 [ 64 rows x 2 columns ]","title":"\u7ed9 loc\u6216iloc \u6307\u5b9a\u8f74\u53c2\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_9","text":"df2 = dfmi . copy () df2 . loc ( axis = 0 )[:, :, [ 'C1' , 'C3' ]] = - 10 df2 df2 = dfmi . copy () df2 . loc [ idx [:, :, [ 'C1' , 'C3' ]], :] = df2 * 1000 df2 lvl0 a b lvl1 bar foo bah foo A0 B0 C0 D0 1 0 3 2 D1 5 4 7 6 C1 D0 9000 8000 11000 10000 D1 13000 12000 15000 14000 C2 D0 17 16 19 18 ... ... ... ... ... A3 B1 C1 D1 237000 236000 239000 238000 C2 D0 241 240 243 242 D1 245 244 247 246 C3 D0 249000 248000 251000 250000 D1 253000 252000 255000 254000 [ 64 rows x 4 columns ]","title":"\u91cd\u65b0\u8d4b\u503c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_10","text":"DataFrame \u7684 xs() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u4ece\u800c\u53ef\u4ee5\u7b80\u4fbf\u5730\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u591a\u7ea7\u7d22\u5f15\u4e2d\u7684\u67d0\u4e00\u4e2a\u5c42\u7ea7\u8fdb\u884c\u6570\u636e\u7684\u9009\u53d6\u3002 df = pd . DataFrame ( np . random . randn ( 6 , 3 ), index = index [: 6 ]) df = df . T df first bar baz foo second one two one two one two 0 -1.103671 -0.169328 -1.575613 -1.972754 -0.774569 -0.791508 1 -0.902346 1.154518 2.185713 -0.473948 -0.312497 -0.267216 2 -0.020286 1.012314 -1.039006 0.277789 -0.674508 0.707265 .xs \u65b9\u6cd5\u9ed8\u8ba4 axis=0 \uff1a df . xs ( \"bar\" , level = 'first' , axis = 1 ) df . xs ( \"one\" , level = 'second' , axis = 1 ) first bar baz foo 0 -1.103671 -1.575613 -0.774569 1 -0.902346 2.185713 -0.312497 2 -0.020286 -1.039006 -0.674508 df . xs (( 'one' , 'bar' ), level = ( 'second' , 'first' ), axis = 1 ) first bar second one 0 -1.103671 1 -0.902346 2 -0.020286 .xs \u65b9\u6cd5\u9ed8\u8ba4 drop_level=False \uff1a df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = False ) first bar baz foo second one one one 0 -1.103671 -1.575613 -0.774569 1 -0.902346 2.185713 -0.312497 2 -0.020286 -1.039006 -0.674508 df . xs ( 'one' , level = 'second' , axis = 1 , drop_level = True ) first bar baz foo 0 -1.103671 -1.575613 -0.774569 1 -0.902346 2.185713 -0.312497 2 -0.020286 -1.039006 -0.674508","title":"\u4ea4\u53c9\u9009\u62e9"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#take","text":"\u4e0e NumPy \u7684 ndarrays \u76f8\u4f3c\uff0cpandas\u7684 Index \uff0c Series \uff0c\u548c DataFrame \u4e5f\u63d0\u4f9b take() \u65b9\u6cd5\u3002\u4ed6\u53ef\u4ee5\u6cbf\u7740\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u7d22\u5f15\u53d6\u56de\u6240\u6709\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u7d22\u5f15\u5fc5\u987b\u8981\u662f\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u5217\u8868\u6216\u8005ndarray\uff0c\u7528\u4ee5\u6307\u660e\u5728\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e\u3002 take \u4e5f\u53ef\u4ee5\u63a5\u53d7\u8d1f\u6574\u6570\uff0c\u4f5c\u4e3a\u76f8\u5bf9\u4e8e\u7ed3\u5c3e\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 index = pd . Index ( np . random . randint ( 0 , 1000 , 10 )) print ( index ) positions = [ 0 , 9 , 3 ] print ( index [ positions ]) print ( index . take ( positions )) Int64Index([886, 20, 973, 555, 482, 741, 14, 455, 473, 483], dtype='int64') Int64Index([886, 483, 555], dtype='int64') Int64Index([886, 483, 555], dtype='int64') ser = pd . Series ( np . random . randn ( 10 )) print ( ser . iloc [ positions ]) print ( ser . take ( positions )) 0 1.554295 9 2.223200 3 0.471164 dtype: float64 0 1.554295 9 2.223200 3 0.471164 dtype: float64 \u5bf9\u4e8e DataFrames \u6765\u8bf4\uff0c\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u7d22\u5f15\u5e94\u5f53\u662f\u4e00\u4e2a\u4e00\u7ef4\u5217\u8868\u6216\u8005ndarray\uff0c\u7528\u4e8e\u6307\u660e\u884c\u6216\u8005\u5217\u7684\u4f4d\u7f6e\u3002 frm = pd . DataFrame ( np . random . randn ( 5 , 3 )) print ( frm ) print ( frm . take ([ 1 , 4 , 3 ])) print ( frm . take ([ 0 , 2 ], axis = 1 )) 0 1 2 0 -0.847795 -1.868665 -0.309621 1 0.320975 0.344141 -0.947815 2 -0.960208 1.004652 -1.203950 3 0.756643 0.825118 -0.842164 4 0.834936 -1.210857 1.975266 0 1 2 1 0.320975 0.344141 -0.947815 4 0.834936 -1.210857 1.975266 3 0.756643 0.825118 -0.842164 0 2 0 -0.847795 -0.309621 1 0.320975 -0.947815 2 -0.960208 -1.203950 3 0.756643 -0.842164 4 0.834936 1.975266 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c pandas\u5bf9\u8c61\u7684 take \u65b9\u6cd5\u5e76\u4e0d\u4f1a\u6b63\u5e38\u5730\u5de5\u4f5c\u5728\u5e03\u5c14\u7d22\u5f15\u4e0a\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u5207\u610f\u5916\u7684\u7ed3\u679c\u3002 arr = np . random . randn ( 10 ) print ( arr ) print ( arr . take ([ False , False , True , True ])) print ( arr [[ 0 , 1 ]]) [-0.88574368 0.48475226 0.30228338 1.40681914 -0.93639036 0.05250617 -0.17633065 0.04839581 0.52009008 0.79065631] [-0.88574368 -0.88574368 0.48475226 0.48475226] [-0.88574368 0.48475226] ser = pd . Series ( np . random . randn ( 10 )) print ( ser ) print ( ser . take ([ False , False , True , True ])) print ( ser . iloc [[ 0 , 1 ]]) 0 0.783778 1 0.804286 2 1.054039 3 -0.673453 4 -0.162131 5 -0.516954 6 0.474947 7 0.595180 8 0.961538 9 0.512165 dtype: float64 0 0.783778 0 0.783778 1 0.804286 1 0.804286 dtype: float64 0 0.783778 1 0.804286 dtype: float64 \u6700\u540e\uff0c\u5173\u4e8e\u6027\u80fd\u65b9\u9762\u7684\u4e00\u4e2a\u5c0f\u5efa\u8bae\uff0c\u56e0\u4e3a take \u65b9\u6cd5\u5904\u7406\u7684\u662f\u4e00\u4e2a\u8303\u56f4\u66f4\u7a84\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u4f1a\u6bd4\u8bdd\u5b9e\u7d22\u5f15\uff08fancy indexing\uff09\u7684\u901f\u5ea6\u5feb\u5f88\u591a\u3002 arr = np . random . randn ( 10000 , 5 ) indexer = np . arange ( 10000 ) np . random . shuffle ( indexer ) % timeit arr [ indexer ] % timeit arr . take ( indexer , axis = 0 ) The slowest run took 4.86 times longer than the fastest. This could mean that an intermediate result is being cached. 1.2 ms \u00b1 688 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 291 \u00b5s \u00b1 60.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) ser = pd . Series ( arr [:, 0 ]) % timeit ser . iloc [ indexer ] % timeit ser . take ( indexer ) The slowest run took 5.55 times longer than the fastest. This could mean that an intermediate result is being cached. 1.44 ms \u00b1 1.03 ms per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) 1.12 ms \u00b1 504 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)","title":"Take\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_11","text":"CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u975e\u5e38\u9002\u5408\u6709\u91cd\u590d\u7684\u7d22\u5f15\u3002\u8fd9\u662f\u4e00\u4e2a\u56f4\u7ed5 Categorical \u800c\u521b\u5efa\u7684\u5bb9\u5668\u3002\u8fd9\u53ef\u4ee5\u975e\u5e38\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u7d22\u5f15\u7684\u5177\u6709\u5927\u91cf\u91cd\u590d\u5143\u7d20\u7684\u7d22\u5f15\u3002 from pandas.api.types import CategoricalDtype df = pd . DataFrame ({ 'A' : np . arange ( 6 ), 'B' : list ( 'aabbca' )}) df [ 'B' ] = df [ 'B' ] . astype ( CategoricalDtype ( list ( 'cab' ))) print ( df , \" \\n \" ) print ( df . dtypes , \" \\n \" ) print ( df . B . cat . categories , \" \\n \" ) A B 0 0 a 1 1 a 2 2 b 3 3 b 4 4 c 5 5 a A int32 B category dtype : object Index ([ 'c' , 'a' , 'b' ], dtype = 'object' ) \u901a\u8fc7 .set_index() \u5efa\u7acb\u4e00\u4e2a\u6709 CategoricalIndex \u5206\u7c7b\u7d22\u5f15\u7684 df2 \uff1a df2 = df . set_index ( 'B' ) print ( df2 . index ) CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u4f7f\u7528 __getitem__/.iloc/.loc \u8fdb\u884c\u7d22\u5f15\uff0c\u5728\u542b\u6709\u91cd\u590d\u503c\u7684\u7d22\u5f15\u4e0a\u7684\u5de5\u4f5c\u539f\u7406\u76f8\u4f3c\u3002\u7d22\u5f15\u503c \u5fc5\u987b \u5728\u4e00\u4e2a\u5206\u7c7b\u4e2d\uff0c\u5426\u8005\u5c06\u4f1a\u5f15\u53d1 KeyError \u9519\u8bef\u3002 df2 . loc [ 'a' ] A B a 0 a 1 a 5 CategoricalIndex \u5728\u7d22\u5f15\u4e4b\u540e\u4e5f\u4f1a\u88ab \u4fdd\u7559 \uff1a df2 . loc [ 'a' ] . index CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u7d22\u5f15\u6392\u5e8f\u5c06\u4f1a\u6309\u7167\u7c7b\u522b\u6e05\u5355\u4e2d\u7684\u987a\u5e8f\u8fdb\u884c\uff08\u6211\u4eec\u5df2\u7ecf\u57fa\u4e8e CategoricalDtype(list('cab')) \u5efa\u7acb\u4e86\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u6b64\u6392\u5e8f\u7684\u987a\u5e8f\u662f cab \uff09 df2 . sort_index () A B c 4 a 0 a 1 a 5 b 2 b 3 \u5206\u7ec4\u64cd\u4f5c\uff08Groupby\uff09\u4e5f\u4f1a\u4fdd\u7559\u7d22\u5f15\u7684\u5168\u90e8\u4fe1\u606f\u3002 df2 . groupby ( level = 0 ) . sum () df2 . groupby ( level = 0 ) . sum () . index CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \u91cd\u8bbe\u7d22\u5f15\u7684\u64cd\u4f5c\u5c06\u4f1a\u6839\u636e\u8f93\u5165\u7684\u7d22\u5f15\u503c\u8fd4\u56de\u4e00\u4e2a\u7d22\u5f15\u3002\u4f20\u5165\u4e00\u4e2a\u5217\u8868\uff0c\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u666e\u901a\u7684 Index \uff1b\u5982\u679c\u4f7f\u7528\u7c7b\u522b\u5bf9\u8c61 Categorical \uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b\u7d22\u5f15 CategoricalIndex \uff0c\u6309\u7167\u5176\u4e2d \u4f20\u5165\u7684 \u7684\u7c7b\u522b\u503c Categorical dtype\u6765\u8fdb\u884c\u7d22\u5f15\u3002\u6b63\u5982\u540c\u4f60\u53ef\u4ee5\u5bf9 \u4efb\u610f pandas\u7684\u7d22\u5f15\u8fdb\u884c\u91cd\u65b0\u7d22\u5f15\u4e00\u6837\uff0c\u8fd9\u5c06\u5141\u8bb8\u4f60\u968f\u610f\u7d22\u5f15\u4efb\u610f\u7684\u7d22\u5f15\u503c\uff0c\u5373\u4fbf\u5b83\u4eec\u5e76 \u4e0d\u5b58\u5728 \u5728\u4f60\u7684\u7c7b\u522b\u5bf9\u8c61\u4e2d\u3002 df2 . reindex ([ 'a' , 'e' ]) df2 . reindex ([ 'a' , 'e' ]) . index df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) df2 . reindex ( pd . Categorical ([ 'a' , 'e' ], categories = list ( 'abcde' ))) . index","title":"\u5206\u7c7b\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_12","text":"pandas\u5728 0.20.0 \u7248\u672c\u4e2d\u65b0\u52a0\u5165 IntervalIndex \u548c\u5b83\u81ea\u5df1\u7279\u6709\u7684 IntervalDtype \u4ee5\u53ca Interval \u6807\u91cf\u7c7b\u578b\uff0c\u5728pandas\u4e2d\uff0c\u95f4\u9694\u6570\u636e\u662f\u83b7\u5f97\u5934\u7b49\u652f\u6301\u7684\u3002 IntervalIndex \u95f4\u9694\u7d22\u5f15\u5141\u8bb8\u4e00\u4e9b\u552f\u4e00\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u4e5f\u662f cut() \u548c qcut() \u7684\u8fd4\u56de\u7c7b\u578b","title":"\u95f4\u9694\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_13","text":"df = pd . DataFrame ({ 'A' : [ 1 , 2 , 3 , 4 ]}, index = pd . IntervalIndex . from_breaks ([ 0 , 1 , 2 , 3 , 4 ])) df A (0, 1] 1 (1, 2] 2 (2, 3] 3 (3, 4] 4 \u95f4\u9694\u7d22\u5f15\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u6807\u7b7e\u7684\u7d22\u5f15 .loc \uff1a # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d df . loc [ 2 ] A 2 Name: (1, 2], dtype: int64 # 2\u4f4d\u4e8e(1, 2]\u4e4b\u4e2d 3\u4f4d\u4e8e(2, 3]\u4e4b\u4e2d df . loc [[ 2 , 3 ]] A (1, 2] 2 (2, 3] 3 \u5982\u679c\u6807\u7b7e\u88ab\u5305\u542b\u5728\u95f4\u9694\u5f53\u4e2d\uff0c\u8fd9\u4e2a\u95f4\u9694\u4e5f\u5c06\u4f1a\u88ab\u9009\u62e9 print ( df . loc [ 2.5 ]) print ( df . loc [[ 2.5 , 3.5 ]]) A 3 Name: (2, 3], dtype: int64 A (2, 3] 3 (3, 4] 4 \u4f7f\u7528 Interval \u6765\u9009\u62e9\u6570\u636e\uff0c\u5c06\u53ea\u8fd4\u56de\u4e25\u683c\u5339\u914d\uff08\u4ecepandas0.25.0\u5f00\u59cb\uff09\u3002 df . loc [ pd . Interval ( 1 , 2 )] A 2 Name: (1, 2], dtype: int64 \u8bd5\u56fe\u9009\u62e9\u4e00\u4e2a\u6ca1\u6709\u88ab\u4e25\u683c\u5305\u542b\u5728 IntervalIndex \u5185\u7684\u533a\u95f4 Interval \uff0c\u5c06\u4f1a\u51fa\u53d1 KeyError \u9519\u8bef\u3002 try : df . loc [ pd . Interval ( 0.5 , 2.5 )] except KeyError as e : print ( \"KeyError:\" , e ) KeyError : Interval ( 0.5 , 2.5 , closed = 'right' ) \u53ef\u4ee5\u4f7f\u7528 overlaps() \u6765\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u9009\u62e9\u5668\uff0c\u6765\u9009\u4e2d\u6240\u6709\u4e0e \u7ed9\u5b9a\u533a\u95f4 ( Interval )\u91cd\u590d\u7684\u6240\u6709\u533a\u95f4\u3002 idxr = df . index . overlaps ( pd . Interval ( 0.5 , 2.5 )) print ( idxr ) print ( df [ idxr ]) [ True True True False] A (0, 1] 1 (1, 2] 2 (2, 3] 3","title":"\u4f7f\u7528 \u95f4\u9694\u7d22\u5f15 \u6765\u8fdb\u884c\u6570\u636e\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#cut-qcut","text":"cut() \u548c qcut() \u90fd\u5c06\u8fd4\u56de\u4e00\u4e2a\u5206\u7c7b Categorical \u5bf9\u8c61\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5206\u5757\u533a\u57df\u90fd\u4f1a\u4ee5 \u5206\u7c7b\u7d22\u5f15 IntervalIndex \u7684\u65b9\u5f0f\u88ab\u521b\u5efa\u5e76\u4fdd\u5b58\u5728\u5b83\u7684 .categories \u5c5e\u6027\u4e2d\u3002 c = pd . cut ( range ( 4 ), bins = 2 ) print ( c ) print ( c . categories ) [(-0.003, 1.5], (-0.003, 1.5], (1.5, 3.0], (1.5, 3.0]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] IntervalIndex([(-0.003, 1.5], (1.5, 3.0]], closed = 'right', dtype='interval[float64]') cut() \u4e5f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a IntervalIndex \u4f5c\u4e3a\u4ed6\u7684 bins \u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684pandas\u7684\u5199\u6cd5\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528 cut() \u5728\u4e00\u4e9b\u6570\u636e\u4e0a\u9762\uff0c\u5e76\u4e14\u5c06 bins \u8bbe\u7f6e\u4e3a\u67d0\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570 \uff0c\u4ece\u800c\u751f\u6210bins\u3002 \u968f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6\u7684\u6570\u636e\u4e0a\u8c03\u7528 cut() \uff0c\u5e76\u4f20\u5165 .categories \u7684\u503c\uff0c\u4f5c\u4e3a bins \u53c2\u6570\u3002\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5c31\u4e5f\u5c06\u4f1a\u88ab\u5206\u914d\u5230\u540c\u6837\u7684bins\u91cc\u9762 pd . cut ([ 0 , 3 , 5 , 1 ], bins = c . categories ) [(-0.003, 1.5], (1.5, 3.0], NaN, (-0.003, 1.5]] Categories (2, interval[float64]): [(-0.003, 1.5] < (1.5, 3.0]] \u4efb\u4f55\u843d\u5728bins\u4e4b\u5916\u7684\u6570\u636e\u90fd\u5c06\u4f1a\u88ab\u8bbe\u4e3a NaN","title":"\u4f7f\u7528 cut \u548c qcut\u6765\u4e3a\u6570\u636e\u5206\u5757"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.4.%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%B1%A1.html#_14","text":"\u5982\u679c\u6211\u4eec\u9700\u8981\u7ecf\u5e38\u5730\u4f7f\u7528\u6b65\u8fdb\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 interval_range() \u51fd\u6570\uff0c\u7ed3\u5408 start , end , \u548c periods \u6765\u5efa\u7acb\u4e00\u4e2a IntervalIndex \u5bf9\u4e8e\u6570\u503c\u578b\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u7684 interval_range \u95f4\u9694\u9891\u7387\u662f1\uff0c\u5bf9\u4e8edatetime\u7c7b\u578b\u7684\u95f4\u9694\u5219\u662f\u65e5\u5386\u65e5\u3002 pd . interval_range ( start = 0 , end = 5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 ) pd . interval_range ( end = pd . Timedelta ( '3 days' ), periods = 3 ) IntervalIndex ( [ (0 days 00:00:00, 1 days 00:00:00 ] , ( 1 days 00 : 00 : 00 , 2 days 00 : 00 : 00 ] , ( 2 days 00 : 00 : 00 , 3 days 00 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) freq \u53c2\u6570\u53ef\u4ee5\u88ab\u7528\u6765\u660e\u786e\u975e\u9ed8\u8ba4\u7684\u9891\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u5145\u5206\u5730\u5229\u7528\u5404\u79cd\u5404\u6837\u7684 frequency aliases datetime\u7c7b\u578b\u7684\u65f6\u95f4\u95f4\u9694\u3002 pd . interval_range ( start = 0 , periods = 5 , freq = 1.5 ) pd . interval_range ( start = pd . Timestamp ( '2017-01-01' ), periods = 4 , freq = 'W' ) pd . interval_range ( start = pd . Timedelta ( '0 days' ), periods = 3 , freq = '9H' ) IntervalIndex ( [ (0 days 00:00:00, 0 days 09:00:00 ] , ( 0 days 09 : 00 : 00 , 0 days 18 : 00 : 00 ] , ( 0 days 18 : 00 : 00 , 1 days 03 : 00 : 00 ]] , closed = 'right' , dtype = 'interval[timedelta64[ns]]' ) \u6b64\u5916\uff0c closed \u53c2\u6570\u53ef\u4ee5\u7528\u6765\u58f0\u660e\u54ea\u4e2a\u8fb9\u754c\u662f\u5305\u542b\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u95f4\u9694\u7684\u53f3\u754c\u662f\u5305\u542b\u7684\u3002 pd . interval_range ( start = 0 , end = 4 , closed = 'both' ) pd . interval_range ( start = 0 , end = 4 , closed = 'neither' ) IntervalIndex ( [ (0, 1), (1, 2), (2, 3), (3, 4) ] , closed = 'neither' , dtype = 'interval[int64]' ) 0.23.0\u7248\u672c\u52a0\u5165\u7684\u529f\u80fd \u4f7f\u7528 start , end , \u548c periods \u53ef\u4ee5\u4ece start \u5230 end \uff08\u5305\u542b\uff09\u751f\u6210\u4e00\u4e2a\u5e73\u5747\u5206\u914d\u7684\u95f4\u9694\uff0c\u5728\u8fd4\u56de IntervalIndex \u4e2d\u751f\u6210 periods \u8fd9\u4e48\u591a\u7684\u5143\u7d20\uff08\u8bd1\u8005\uff1a\u533a\u95f4\uff09\u3002 pd . interval_range ( start = 0 , end = 6 , periods = 4 ) pd . interval_range ( pd . Timestamp ( '2018-01-01' ), pd . Timestamp ( '2018-02-28' ), periods = 3 ) IntervalIndex ( [ (2018-01-01, 2018-01-20 08:00:00 ] , ( 2018 - 01 - 20 08 : 00 : 00 , 2018 - 02 - 08 16 : 00 : 00 ] , ( 2018 - 02 - 08 16 : 00 : 00 , 2018 - 02 - 28 ]] , closed = 'right' , dtype = 'interval[datetime64[ns]]' )","title":"\u751f\u6210\u4e00\u5b9a\u533a\u95f4\u5185\u7684\u95f4\u9694"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html","text":"from Toolkit.Help import Help as H import pandas as pd from pandas import DataFrame , Series import numpy as np Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 pandas version: 1.0.1 numpy version: 1.18.1 \u7d22\u5f15\u5bf9\u8c61\u7684\u65b9\u6cd5 tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) index MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) .levels \u4e3a property \u5c5e\u6027\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a FrozenList \uff08\u4e0d\u53ef\u53d8\u5217\u8868\uff09\uff0c\u5217\u8868\u4e2d\u5b58\u50a8\u6bcf\u4e00\u7ea7\u7684 label \uff08\u4e5f\u5c31\u662f\u521b\u5efa MultiIndex \u65f6\u4f20\u5165\u7684 levels \u53c2\u6570\uff09\u3002 index . levels FrozenList([['bar', 'baz', 'foo', 'qux'], ['one', 'two']]) .get_level_values(level) \uff1a\u8fd4\u56de\u6307\u5b9a level \u7684 Index \uff0c\u7528\u4e8e MultiIndex \u3002 print ( index . get_level_values ( 0 ), \" \\n \" ) print ( index . get_level_values ( 1 ), \" \\n \" ) print ( index . get_level_values ( 'second' )) Index ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], dtype = 'object' , name = 'first' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) df = pd . DataFrame ( np . random . randn ( 6 , 6 ), index = index [: 6 ], columns = index [: 6 ]) df . columns . levels # original MultiIndex df [[ 'foo' , 'qux' ]] . columns . levels # sliced df [[ 'foo' , 'qux' ]] . columns . to_numpy () # for a specific level df [[ 'foo' , 'qux' ]] . columns . get_level_values ( 0 ) Index(['foo', 'foo'], dtype='object', name='first') new_mi = df [[ 'foo' , 'qux' ]] . columns . remove_unused_levels () new_mi . levels FrozenList([['foo'], ['one', 'two']]) \u7d22\u5f15\u91cd\u8d4b\u503c\u3001\u7d22\u5f15\u5bf9\u9f50 level \u53c2\u6570\u5df2\u7ecf\u88ab\u52a0\u5165\u5230pandas\u5bf9\u8c61\u4e2d\u7684 reindex() \u548c align() \u65b9\u6cd5\u4e2d\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u6cbf\u7740\u4e00\u4e2a\u5c42\u7ea7\u6765\u5e7f\u64ad\u503c\uff08broadcast values\uff09\u3002\u4f8b\u5982\uff1a \u521b\u5efa\u793a\u4f8b df \uff1a midx = pd . MultiIndex ( levels = [[ 'zero' , 'one' ], [ 'x' , 'y' ]], codes = [[ 1 , 1 , 0 , 0 ], [ 1 , 0 , 1 , 0 ]]) df = pd . DataFrame ( np . random . randn ( 4 , 2 ), index = midx ) df 0 1 one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u521b\u5efa\u793a\u4f8b df2 \uff1a df2 = df . mean ( level = 0 ) df2 0 1 one 0.660752 0.495076 zero -1.115352 -0.095941 df2 . reindex ( df . index , level = 0 ) 0 1 one y 0.660752 0.495076 x 0.660752 0.495076 zero y -1.115352 -0.095941 x -1.115352 -0.095941 # aligning df_aligned , df2_aligned = df . align ( df2 , level = 0 ) print ( df_aligned , \" \\n \" ) print ( df2_aligned ) 0 1 one y 0 . 525254 1 . 268302 x 0 . 796250 - 0 . 278151 zero y - 1 . 861484 0 . 216773 x - 0 . 369220 - 0 . 408655 0 1 one y 0 . 660752 0 . 495076 x 0 . 660752 0 . 495076 zero y - 1 . 115352 - 0 . 095941 x - 1 . 115352 - 0 . 095941 reindex \u65b9\u6cd5\u53c2\u6570 \u91cd\u65b0\u7d22\u5f15\uff1a Series/DataFrame.reindex(index=None, **kwargs) \uff1a index \uff1a\u4e00\u4e2a array-like \u5bf9\u8c61\uff0c\u7ed9\u51fa\u4e86\u65b0\u7684 index \u7684 label columns \uff1a\u4e00\u4e2a array-like \u5bf9\u8c61\uff0c\u7ed9\u51fa\u4e86\u65b0\u7684 columns \u7684 label method \uff1a\u5f53\u65b0\u7684 label \u7684\u503c\u7f3a\u5931\u65f6\uff0c\u5982\u4f55\u5904\u7406\u3002\u53c2\u6570\u503c\u53ef\u4ee5\u4e3a\uff1a None \uff1a\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u7f3a\u5931\u5730\u65b9\u586b\u5145 NaN - 'backfill'/'bfill' \uff1a\u7528\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u540e\u5411\u586b\u5145\uff09 - 'pad'/'ffill' \uff1a\u7528\u4e0a\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u524d\u5411\u586b\u5145\uff09 - 'nearest' \uff1a\u7528\u6700\u8fd1\u7684\u53ef\u7528\u503c\u586b\u5145\u8be5\u7a7a\u7f3a- copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Series \u5bf9\u8c61\uff08\u5373\u4f7f\u4f20\u5165\u7684 index \u4e0e\u539f\u6765\u7684 index \u76f8\u540c\uff09 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 name \uff0c\u5728 MultiIndex \u7684\u6307\u5b9a\u7ea7\u522b\u4e0a\u5339\u914d\u7b80\u5355\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u6307\u5b9a\u7f3a\u5931\u503c\u7684\u586b\u5145\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a NaN \uff08\u5982\u679c\u8be5\u53c2\u6570\u4e0e method \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u4ee5 method \u4e3a\u4e3b\uff09 limit \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6307\u5b9a\u524d\u5411/\u540e\u5411\u586b\u5145\u65f6\uff1a\u5982\u679c\u6709\u8fde\u7eed\u7684 k \u4e2a NaN \uff0c\u5219\u53ea\u586b\u5145\u5176\u4e2d limit \u4e2a\u3002\u5b83\u4e0e method \u914d\u5408 tolerance \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u5728\u4e0d\u5339\u914d\u65f6\uff0c\u8fde\u7eed\u91c7\u7528\u524d\u5411/\u540e\u5411/\u6700\u8fd1\u90bb\u5339\u914d\u7684\u8de8\u5ea6\u7684\u6700\u5927\u503c\u3002\u5b83\u4e0e method \u914d\u5408 \u4ea4\u6362\u7d22\u5f15\u5c42\u7ea7\uff1a swaplevel \u65b9\u6cd5 swaplevel() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u5c42\u7ea7 print ( df , \" \\n \" ) print ( df . swaplevel ( 0 , 1 , axis = 0 )) 0 1 one y 0 . 525254 1 . 268302 x 0 . 796250 - 0 . 278151 zero y - 1 . 861484 0 . 216773 x - 0 . 369220 - 0 . 408655 0 1 y one 0 . 525254 1 . 268302 x one 0 . 796250 - 0 . 278151 y zero - 1 . 861484 0 . 216773 x zero - 0 . 369220 - 0 . 408655 \u4ea4\u6362\u7d22\u5f15\u5c42\u7ea7\uff1a reorder_levels \u65b9\u6cd5 reorder_levels() \u662f\u4e00\u4e2a\u66f4\u4e00\u822c\u5316\u7684 swaplevel \u65b9\u6cd5\uff0c\u5141\u8bb8\u60a8\u7528\u7b80\u5355\u7684\u4e00\u6b65\u6765\u91cd\u6392\u5217\u7d22\u5f15\u7684\u5c42\u7ea7\uff1a print ( df , \" \\n \" ) print ( df . reorder_levels ([ 1 , 0 ], axis = 0 )) 0 1 one y 0 . 525254 1 . 268302 x 0 . 796250 - 0 . 278151 zero y - 1 . 861484 0 . 216773 x - 0 . 369220 - 0 . 408655 0 1 y one 0 . 525254 1 . 268302 x one 0 . 796250 - 0 . 278151 y zero - 1 . 861484 0 . 216773 x zero - 0 . 369220 - 0 . 408655 \u91cd\u547d\u540d\u7d22\u5f15 rename() \u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u91cd\u547d\u540d\u591a\u5c42\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u91cd\u547d\u540d\u5217\u3002 renames \u7684 columns \u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u800c\u4ec5\u4ec5\u91cd\u547d\u540d\u4f60\u5e0c\u671b\u66f4\u6539\u540d\u5b57\u7684\u5217\uff1a df . rename ( columns = { 0 : \"col0\" , 1 : \"col1\" }) col0 col1 one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u7528\u4e8e\u91cd\u547d\u540d\u7d22\u5f15\uff1a df . rename ( index = { \"one\" : \"two\" , \"y\" : \"z\" }) 0 1 two z 0.525254 1.268302 x 0.796250 -0.278151 zero z -1.861484 0.216773 x -0.369220 -0.408655 rename_axis() \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5bf9 Index \u6216\u8005 MultiIndex \u8fdb\u884c\u91cd\u547d\u540d\u3002\u5c24\u5176\u7684\uff0c\u4f60\u53ef\u4ee5\u660e\u786e MultiIndex \u4e2d\u7684\u4e0d\u540c\u5c42\u7ea7\u7684\u540d\u79f0\uff0c\u8fd9\u53ef\u4ee5\u88ab\u7528\u4e8e\u5728\u4e4b\u540e\u4f7f\u7528 reset_index() \uff0c\u628a\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u503c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5217 df . rename_axis ( index = [ 'abc' , 'def' ]) 0 1 abc def one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u6ce8\u610f\uff0c DataFrame \u7684\u5217\u4e5f\u662f\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u6b64\u5728 rename_axis \u4e2d\u4f7f\u7528 columns \u53c2\u6570\uff0c\u5c06\u4f1a\u6539\u53d8\u90a3\u4e2a\u7d22\u5f15\u7684\u540d\u79f0 df . rename_axis ( columns = \"Cols\" ) . columns RangeIndex(start=0, stop=2, step=1, name='Cols') rename \u548c rename_axis \u90fd\u652f\u6301\u4e00\u4e2a\u660e\u786e\u7684\u5b57\u5178\uff0c Series \u6216\u8005\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\uff0c\u540d\u79f0\u6620\u5c04\u4e3a\u65b0\u7684\u503c\u3002 df . rename_axis ( index = [ 'abc' , 'def' ], inplace = True ) print ( df ) 0 1 abc def one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u5bf9 \u591a\u7d22\u5f15 \u8fdb\u884c\u6392\u5e8f \u5bf9\u4e8e\u62e5\u6709\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f7f\u7528 sort_index \u65b9\u6cd5\u6765\u6392\u5e8f\u3002 \u521b\u5efa\u793a\u4f8b s \uff1a import random tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] random . shuffle ( tuples ) s = pd . Series ( np . random . randn ( 8 ), index = pd . MultiIndex . from_tuples ( tuples )) s baz one -0.030676 qux one -1.202456 bar two -0.427874 qux two 0.143079 foo two -1.195304 baz two -0.420060 bar one 0.777924 foo one -1.037374 dtype: float64 # \u4e24\u8005\u7b49\u4ef7 s . sort_index () s . sort_index ( level = 0 ) bar one 0.777924 two -0.427874 baz one -0.030676 two -0.420060 foo one -1.037374 two -1.195304 qux one -1.202456 two 0.143079 dtype: float64 s . sort_index ( level = 1 ) bar one 0.777924 baz one -0.030676 foo one -1.037374 qux one -1.202456 bar two -0.427874 baz two -0.420060 foo two -1.195304 qux two 0.143079 dtype: float64 \u5982\u679c\u201c\u591a\u5c42\u7ea7\u7d22\u5f15\u201d\u90fd\u88ab\u547d\u540d\u4e86\u7684\u8bdd\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5411 sort_index \u4f20\u5165\u4e00\u4e2a\u5c42\u7ea7\u540d\u79f0\u3002 s . index . set_names ([ 'L1' , 'L2' ], inplace = True ) print ( s . sort_index ( level = 'L1' ), \" \\n \" ) print ( s . sort_index ( level = 'L2' )) L1 L2 bar one 0 . 777924 two - 0 . 427874 baz one - 0 . 030676 two - 0 . 420060 foo one - 1 . 037374 two - 1 . 195304 qux one - 1 . 202456 two 0 . 143079 dtype : float64 L1 L2 bar one 0 . 777924 baz one - 0 . 030676 foo one - 1 . 037374 qux one - 1 . 202456 bar two - 0 . 427874 baz two - 0 . 420060 foo two - 1 . 195304 qux two 0 . 143079 dtype : float64 \u5bf9\u4e8e\u591a\u7ef4\u5ea6\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u4efb\u610f\u7684\u7684\u7ef4\u5ea6\u6765\u8fdb\u884c\u7d22\u5f15\uff0c\u53ea\u8981\u4ed6\u4eec\u662f\u5177\u6709 \u591a\u5c42\u7ea7\u7d22\u5f15 \u7684\uff1a df . T . sort_index ( level = 1 , axis = 1 ) abc one zero one zero def x x y y 0 0.796250 -0.369220 0.525254 -1.861484 1 -0.278151 -0.408655 1.268302 0.216773 \u5373\u4fbf\u6570\u636e\u6ca1\u6709\u6392\u5e8f\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5bf9\u4ed6\u4eec\u8fdb\u884c\u7d22\u5f15\uff0c\u4f46\u662f\u7d22\u5f15\u7684\u6548\u7387\u4f1a\u6781\u5927\u964d\u4f4e\uff0c\u5e76\u4e14\u4e5f\u4f1a\u629b\u51fa PerformanceWarning \u8b66\u544a\u3002\u800c\u4e14\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u7684\u526f\u672c\u800c\u975e\u4e00\u4e2a\u6570\u636e\u7684\u89c6\u56fe\uff1a dfm = pd . DataFrame ({ 'jim' : [ 0 , 0 , 1 , 1 ], 'joe' : [ 'x' , 'x' , 'z' , 'y' ], 'jolie' : np . random . rand ( 4 )}) dfm = dfm . set_index ([ 'jim' , 'joe' ]) dfm dfm . loc [( 1 , 'z' )] .\\setup_m.py:9: PerformanceWarning: indexing past lexsort depth may impact performance. jolie jim joe 1 z 0.411054 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u7d22\u5f15\u4e00\u4e2a\u6ca1\u6709\u5b8c\u5168lexsorted\u7684\u5bf9\u8c61\uff0c\u4f60\u5c06\u4f1a\u78b0\u5230\u5982\u4e0b\u7684\u9519\u8bef\uff1a try : dfm . loc [( 0 , 'y' ):( 1 , 'z' )] except Exception as e : print ( f \"UnsortedIndexError: {e} \" ) UnsortedIndexError: 'Key length (2) was greater than MultiIndex lexsort depth (1)' \u6392\u5e8f\u4e4b\u540e\u5219\u4e0d\u4f1a\u62a5\u9519 dfm . sort_index () . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.599272 z 0.411054 \u5728 MultiIndex \u4e0a\u4f7f\u7528 is_lexsorted() \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e2a\u7d22\u5f15\u662f\u5426\u5df2\u7ecf\u88ab\u6392\u5e8f\u3002\u800c\u4f7f\u7528 lexsort_depth \u5c5e\u6027\u5219\u53ef\u4ee5\u8fd4\u56de\u6392\u5e8f\u7684\u6df1\u5ea6 dfm . index . is_lexsorted () False dfm . index . lexsort_depth 1 dfm = dfm . sort_index () dfm jolie jim joe 0 x 0.180559 x 0.757809 1 y 0.599272 z 0.411054 dfm . index . is_lexsorted () True dfm . index . lexsort_depth 2 \u73b0\u5728\uff0c\u4f60\u7684\u9009\u62e9\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 dfm . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.599272 z 0.411054 \u5c06\u5217\u8f6c\u6362\u4e3a\u7d22\u5f15 \u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff08\u53ea\u5bf9 DataFrame \u6709\u6548\uff0c\u56e0\u4e3a Series \u6ca1\u6709\u5217\u7d22\u5f15\uff09\uff0c\u5176\u4e2d\uff1a col label \u53d8\u6210 index name \uff0c\u5217\u6570\u636e\u53d8\u6210\u884c label \uff1a DataFrame . set_index ( keys , drop = True , append = False , inplace = False , verify_integrity = False ) keys \uff1a \u6307\u5b9a\u4e86\u4e00\u4e2a\u6216\u8005\u4e00\u5217\u7684 column label \u3002\u8fd9\u4e9b\u5217\u5c06\u4f1a\u8f6c\u6362\u4e3a\u884c index drop \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219 keys \u5bf9\u5e94\u7684\u5217\u4f1a\u88ab\u5220\u9664\uff1b\u5426\u5219\u8fd9\u4e9b\u5217\u4ecd\u7136\u88ab\u4fdd\u7559 append \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u6709\u7684\u884c\u7d22\u5f15\u5c06\u4fdd\u7559\uff08\u6b64\u65f6\u4e00\u5b9a\u662f\u4e2a\u591a\u7ea7\u7d22\u5f15\uff09\uff1b\u5426\u5219\u629b\u5f03\u539f\u6765\u7684\u884c\u7d22\u5f15\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u67e5\u65b0\u7684 index \u662f\u5426\u6709\u91cd\u590d\u503c\u3002\u5426\u5219\u4f1a\u63a8\u8fdf\u5230\u68c0\u6d4b\u8fc7\u7a0b\u5230\u5fc5\u987b\u68c0\u6d4b\u7684\u65f6\u5019\u3002 df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 ))) df [ \"key\" ] = [ \"A\" , \"B\" , \"C\" , \"D\" ] print ( df ) df . set_index ( keys = \"key\" , append = True ) 0 1 2 key 0 2 9 3 A 1 2 4 9 B 2 0 6 4 C 3 4 3 2 D 0 1 2 key 0 A 2 9 3 1 B 2 4 9 2 C 0 6 4 3 D 4 3 2 \u5c06\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\uff1a reset_index reset_index \u4f1a\u5c06\u5c42\u6b21\u5316\u7684\u884c index \u8f6c\u79fb\u5230\u5217\u4e2d\uff0c\u6210\u4e3a\u65b0\u7684\u4e00\u5217\u3002\u540c\u65f6 index \u53d8\u6210\u4e00\u4e2a\u6574\u6570\u578b\u7684\uff0c\u4ece0\u5f00\u59cb\u7f16\u53f7\uff1a DataFrame . reset_index ( level = None , drop = False , inplace = False , col_level = 0 , col_fill = '' ) Series . reset_index ( level = None , drop = False , name = None , inplace = False ) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 str \u3001\u5143\u7ec4\u6216\u8005\u5217\u8868\u3002\u5b83\u6307\u5b9a\u4e86\u5c06\u4ece\u5c42\u6b21\u5316\u7684 index \u4e2d\u79fb\u9664\u7684 level \u3002\u5982\u679c\u4e3a None \uff0c\u5219\u79fb\u9664\u6240\u6709\u7684 level \u3002 drop \uff1a drop=True \uff0c\u4e22\u5f03\u6307\u5b9alevel\uff0c\u4e0d\u52a0\u5165\u5217\u4e2d\u3002 drop=False \uff0c\u5219\u5c06\u6307\u5b9a\u7684level\u8f6c\u6362\u4e3a\u5217\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None \u3002 col_level \uff1a\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u540e\uff0c\u6307\u5b9a\u8be5\u5217\u7684\u5217\u6807\u7b7e\u4f4d\u4e8e\u5217\u7d22\u5f15\u7684\u54ea\u4e2alevel\u3002 col_fill \uff1a\u6307\u5b9a\u9664 col_level \u4e4b\u5916\u7684\u5217level\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\u5f53\u5b58\u5728\u591a\u7ea7\u5217\u7d22\u5f15\u65f6\u751f\u6548\u3002 \u5bf9\u4e8e Series \uff0c name \u5c31\u662f\u63d2\u5165\u540e\uff0c\u5bf9\u5e94\u7684\u5217 label columns = [[ \"a\" , \"a\" , \"b\" ],[ \"1\" , \"2\" , \"3\" ]] df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 )), columns = columns ) print ( df ) df . reset_index ( drop = False , col_level = 0 ) a b 1 2 3 0 9 6 3 1 8 1 3 2 5 0 9 3 6 0 5 index a b 1 2 3 0 0 9 6 3 1 1 8 1 3 2 2 5 0 9 3 3 6 0 5 \u6309label\u5220\u9664\u884c\u3001\u5217 \u4e22\u5f03\u67d0\u6761\u8f74\u4e0a\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a label \uff1a Series/DataFrame.drop(labels[, axis, level, inplace, errors]) : labels \uff1a\u5355\u4e2a label \u6216\u8005\u4e00\u4e2a label \u5e8f\u5217\uff0c\u4ee3\u8868\u8981\u88ab\u4e22\u5f03\u7684 label axis \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u8f74\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a 0 \u8f74 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 level \u540d\u5b57\uff0c\u7528\u4e8e MultiIndex \u3002\u56e0\u4e3a\u53ef\u80fd\u5728\u591a\u4e2a level \u4e0a\u90fd\u6709\u540c\u540d\u7684 label \u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None errors \uff1a\u53ef\u4ee5\u4e3a 'ignore'/'raise' a = df . reset_index ( drop = False , col_level = 0 ) a . drop ( labels = \"a\" , axis = 1 ) a idx = a . index def fun ( x ): return x + 10 idx . map ( fun ) G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:3936: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. obj = obj._drop_axis(labels, axis, level=level, errors=errors) Int64Index([10, 11, 12, 13], dtype='int64')","title":"7.5.\u7d22\u5f15\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_1","text":"tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) index MultiIndex([('bar', 'one'), ('bar', 'two'), ('baz', 'one'), ('baz', 'two'), ('foo', 'one'), ('foo', 'two'), ('qux', 'one'), ('qux', 'two')], names=['first', 'second']) .levels \u4e3a property \u5c5e\u6027\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a FrozenList \uff08\u4e0d\u53ef\u53d8\u5217\u8868\uff09\uff0c\u5217\u8868\u4e2d\u5b58\u50a8\u6bcf\u4e00\u7ea7\u7684 label \uff08\u4e5f\u5c31\u662f\u521b\u5efa MultiIndex \u65f6\u4f20\u5165\u7684 levels \u53c2\u6570\uff09\u3002 index . levels FrozenList([['bar', 'baz', 'foo', 'qux'], ['one', 'two']]) .get_level_values(level) \uff1a\u8fd4\u56de\u6307\u5b9a level \u7684 Index \uff0c\u7528\u4e8e MultiIndex \u3002 print ( index . get_level_values ( 0 ), \" \\n \" ) print ( index . get_level_values ( 1 ), \" \\n \" ) print ( index . get_level_values ( 'second' )) Index ([ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], dtype = 'object' , name = 'first' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) Index ([ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ], dtype = 'object' , name = 'second' ) df = pd . DataFrame ( np . random . randn ( 6 , 6 ), index = index [: 6 ], columns = index [: 6 ]) df . columns . levels # original MultiIndex df [[ 'foo' , 'qux' ]] . columns . levels # sliced df [[ 'foo' , 'qux' ]] . columns . to_numpy () # for a specific level df [[ 'foo' , 'qux' ]] . columns . get_level_values ( 0 ) Index(['foo', 'foo'], dtype='object', name='first') new_mi = df [[ 'foo' , 'qux' ]] . columns . remove_unused_levels () new_mi . levels FrozenList([['foo'], ['one', 'two']])","title":"\u7d22\u5f15\u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_2","text":"level \u53c2\u6570\u5df2\u7ecf\u88ab\u52a0\u5165\u5230pandas\u5bf9\u8c61\u4e2d\u7684 reindex() \u548c align() \u65b9\u6cd5\u4e2d\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u6cbf\u7740\u4e00\u4e2a\u5c42\u7ea7\u6765\u5e7f\u64ad\u503c\uff08broadcast values\uff09\u3002\u4f8b\u5982\uff1a \u521b\u5efa\u793a\u4f8b df \uff1a midx = pd . MultiIndex ( levels = [[ 'zero' , 'one' ], [ 'x' , 'y' ]], codes = [[ 1 , 1 , 0 , 0 ], [ 1 , 0 , 1 , 0 ]]) df = pd . DataFrame ( np . random . randn ( 4 , 2 ), index = midx ) df 0 1 one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u521b\u5efa\u793a\u4f8b df2 \uff1a df2 = df . mean ( level = 0 ) df2 0 1 one 0.660752 0.495076 zero -1.115352 -0.095941 df2 . reindex ( df . index , level = 0 ) 0 1 one y 0.660752 0.495076 x 0.660752 0.495076 zero y -1.115352 -0.095941 x -1.115352 -0.095941 # aligning df_aligned , df2_aligned = df . align ( df2 , level = 0 ) print ( df_aligned , \" \\n \" ) print ( df2_aligned ) 0 1 one y 0 . 525254 1 . 268302 x 0 . 796250 - 0 . 278151 zero y - 1 . 861484 0 . 216773 x - 0 . 369220 - 0 . 408655 0 1 one y 0 . 660752 0 . 495076 x 0 . 660752 0 . 495076 zero y - 1 . 115352 - 0 . 095941 x - 1 . 115352 - 0 . 095941","title":"\u7d22\u5f15\u91cd\u8d4b\u503c\u3001\u7d22\u5f15\u5bf9\u9f50"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#reindex","text":"\u91cd\u65b0\u7d22\u5f15\uff1a Series/DataFrame.reindex(index=None, **kwargs) \uff1a index \uff1a\u4e00\u4e2a array-like \u5bf9\u8c61\uff0c\u7ed9\u51fa\u4e86\u65b0\u7684 index \u7684 label columns \uff1a\u4e00\u4e2a array-like \u5bf9\u8c61\uff0c\u7ed9\u51fa\u4e86\u65b0\u7684 columns \u7684 label method \uff1a\u5f53\u65b0\u7684 label \u7684\u503c\u7f3a\u5931\u65f6\uff0c\u5982\u4f55\u5904\u7406\u3002\u53c2\u6570\u503c\u53ef\u4ee5\u4e3a\uff1a None \uff1a\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u7f3a\u5931\u5730\u65b9\u586b\u5145 NaN - 'backfill'/'bfill' \uff1a\u7528\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u540e\u5411\u586b\u5145\uff09 - 'pad'/'ffill' \uff1a\u7528\u4e0a\u4e00\u4e2a\u53ef\u7528\u7684\u503c\u586b\u5145\u8be5\u7a7a\u7f3a\uff08\u524d\u5411\u586b\u5145\uff09 - 'nearest' \uff1a\u7528\u6700\u8fd1\u7684\u53ef\u7528\u503c\u586b\u5145\u8be5\u7a7a\u7f3a- copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Series \u5bf9\u8c61\uff08\u5373\u4f7f\u4f20\u5165\u7684 index \u4e0e\u539f\u6765\u7684 index \u76f8\u540c\uff09 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 name \uff0c\u5728 MultiIndex \u7684\u6307\u5b9a\u7ea7\u522b\u4e0a\u5339\u914d\u7b80\u5355\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u6307\u5b9a\u7f3a\u5931\u503c\u7684\u586b\u5145\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a NaN \uff08\u5982\u679c\u8be5\u53c2\u6570\u4e0e method \u540c\u65f6\u51fa\u73b0\uff0c\u5219\u4ee5 method \u4e3a\u4e3b\uff09 limit \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6307\u5b9a\u524d\u5411/\u540e\u5411\u586b\u5145\u65f6\uff1a\u5982\u679c\u6709\u8fde\u7eed\u7684 k \u4e2a NaN \uff0c\u5219\u53ea\u586b\u5145\u5176\u4e2d limit \u4e2a\u3002\u5b83\u4e0e method \u914d\u5408 tolerance \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u7ed9\u51fa\u5728\u4e0d\u5339\u914d\u65f6\uff0c\u8fde\u7eed\u91c7\u7528\u524d\u5411/\u540e\u5411/\u6700\u8fd1\u90bb\u5339\u914d\u7684\u8de8\u5ea6\u7684\u6700\u5927\u503c\u3002\u5b83\u4e0e method \u914d\u5408","title":"reindex\u65b9\u6cd5\u53c2\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#swaplevel","text":"swaplevel() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u5c42\u7ea7 print ( df , \" \\n \" ) print ( df . swaplevel ( 0 , 1 , axis = 0 )) 0 1 one y 0 . 525254 1 . 268302 x 0 . 796250 - 0 . 278151 zero y - 1 . 861484 0 . 216773 x - 0 . 369220 - 0 . 408655 0 1 y one 0 . 525254 1 . 268302 x one 0 . 796250 - 0 . 278151 y zero - 1 . 861484 0 . 216773 x zero - 0 . 369220 - 0 . 408655","title":"\u4ea4\u6362\u7d22\u5f15\u5c42\u7ea7\uff1aswaplevel\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#reorder_levels","text":"reorder_levels() \u662f\u4e00\u4e2a\u66f4\u4e00\u822c\u5316\u7684 swaplevel \u65b9\u6cd5\uff0c\u5141\u8bb8\u60a8\u7528\u7b80\u5355\u7684\u4e00\u6b65\u6765\u91cd\u6392\u5217\u7d22\u5f15\u7684\u5c42\u7ea7\uff1a print ( df , \" \\n \" ) print ( df . reorder_levels ([ 1 , 0 ], axis = 0 )) 0 1 one y 0 . 525254 1 . 268302 x 0 . 796250 - 0 . 278151 zero y - 1 . 861484 0 . 216773 x - 0 . 369220 - 0 . 408655 0 1 y one 0 . 525254 1 . 268302 x one 0 . 796250 - 0 . 278151 y zero - 1 . 861484 0 . 216773 x zero - 0 . 369220 - 0 . 408655","title":"\u4ea4\u6362\u7d22\u5f15\u5c42\u7ea7\uff1areorder_levels\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_3","text":"rename() \u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u91cd\u547d\u540d\u591a\u5c42\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u91cd\u547d\u540d\u5217\u3002 renames \u7684 columns \u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u5178\uff0c\u4ece\u800c\u4ec5\u4ec5\u91cd\u547d\u540d\u4f60\u5e0c\u671b\u66f4\u6539\u540d\u5b57\u7684\u5217\uff1a df . rename ( columns = { 0 : \"col0\" , 1 : \"col1\" }) col0 col1 one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u7528\u4e8e\u91cd\u547d\u540d\u7d22\u5f15\uff1a df . rename ( index = { \"one\" : \"two\" , \"y\" : \"z\" }) 0 1 two z 0.525254 1.268302 x 0.796250 -0.278151 zero z -1.861484 0.216773 x -0.369220 -0.408655 rename_axis() \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5bf9 Index \u6216\u8005 MultiIndex \u8fdb\u884c\u91cd\u547d\u540d\u3002\u5c24\u5176\u7684\uff0c\u4f60\u53ef\u4ee5\u660e\u786e MultiIndex \u4e2d\u7684\u4e0d\u540c\u5c42\u7ea7\u7684\u540d\u79f0\uff0c\u8fd9\u53ef\u4ee5\u88ab\u7528\u4e8e\u5728\u4e4b\u540e\u4f7f\u7528 reset_index() \uff0c\u628a\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u503c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5217 df . rename_axis ( index = [ 'abc' , 'def' ]) 0 1 abc def one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655 \u6ce8\u610f\uff0c DataFrame \u7684\u5217\u4e5f\u662f\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u6b64\u5728 rename_axis \u4e2d\u4f7f\u7528 columns \u53c2\u6570\uff0c\u5c06\u4f1a\u6539\u53d8\u90a3\u4e2a\u7d22\u5f15\u7684\u540d\u79f0 df . rename_axis ( columns = \"Cols\" ) . columns RangeIndex(start=0, stop=2, step=1, name='Cols') rename \u548c rename_axis \u90fd\u652f\u6301\u4e00\u4e2a\u660e\u786e\u7684\u5b57\u5178\uff0c Series \u6216\u8005\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\uff0c\u5c06\u6807\u7b7e\uff0c\u540d\u79f0\u6620\u5c04\u4e3a\u65b0\u7684\u503c\u3002 df . rename_axis ( index = [ 'abc' , 'def' ], inplace = True ) print ( df ) 0 1 abc def one y 0.525254 1.268302 x 0.796250 -0.278151 zero y -1.861484 0.216773 x -0.369220 -0.408655","title":"\u91cd\u547d\u540d\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_4","text":"\u5bf9\u4e8e\u62e5\u6709\u591a\u5c42\u7ea7\u7d22\u5f15\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f7f\u7528 sort_index \u65b9\u6cd5\u6765\u6392\u5e8f\u3002 \u521b\u5efa\u793a\u4f8b s \uff1a import random tuples = [( 'bar' , 'one' ), ( 'bar' , 'two' ), ( 'baz' , 'one' ), ( 'baz' , 'two' ), ( 'foo' , 'one' ), ( 'foo' , 'two' ), ( 'qux' , 'one' ), ( 'qux' , 'two' )] random . shuffle ( tuples ) s = pd . Series ( np . random . randn ( 8 ), index = pd . MultiIndex . from_tuples ( tuples )) s baz one -0.030676 qux one -1.202456 bar two -0.427874 qux two 0.143079 foo two -1.195304 baz two -0.420060 bar one 0.777924 foo one -1.037374 dtype: float64 # \u4e24\u8005\u7b49\u4ef7 s . sort_index () s . sort_index ( level = 0 ) bar one 0.777924 two -0.427874 baz one -0.030676 two -0.420060 foo one -1.037374 two -1.195304 qux one -1.202456 two 0.143079 dtype: float64 s . sort_index ( level = 1 ) bar one 0.777924 baz one -0.030676 foo one -1.037374 qux one -1.202456 bar two -0.427874 baz two -0.420060 foo two -1.195304 qux two 0.143079 dtype: float64 \u5982\u679c\u201c\u591a\u5c42\u7ea7\u7d22\u5f15\u201d\u90fd\u88ab\u547d\u540d\u4e86\u7684\u8bdd\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5411 sort_index \u4f20\u5165\u4e00\u4e2a\u5c42\u7ea7\u540d\u79f0\u3002 s . index . set_names ([ 'L1' , 'L2' ], inplace = True ) print ( s . sort_index ( level = 'L1' ), \" \\n \" ) print ( s . sort_index ( level = 'L2' )) L1 L2 bar one 0 . 777924 two - 0 . 427874 baz one - 0 . 030676 two - 0 . 420060 foo one - 1 . 037374 two - 1 . 195304 qux one - 1 . 202456 two 0 . 143079 dtype : float64 L1 L2 bar one 0 . 777924 baz one - 0 . 030676 foo one - 1 . 037374 qux one - 1 . 202456 bar two - 0 . 427874 baz two - 0 . 420060 foo two - 1 . 195304 qux two 0 . 143079 dtype : float64 \u5bf9\u4e8e\u591a\u7ef4\u5ea6\u7684\u5bf9\u8c61\u6765\u8bf4\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u4efb\u610f\u7684\u7684\u7ef4\u5ea6\u6765\u8fdb\u884c\u7d22\u5f15\uff0c\u53ea\u8981\u4ed6\u4eec\u662f\u5177\u6709 \u591a\u5c42\u7ea7\u7d22\u5f15 \u7684\uff1a df . T . sort_index ( level = 1 , axis = 1 ) abc one zero one zero def x x y y 0 0.796250 -0.369220 0.525254 -1.861484 1 -0.278151 -0.408655 1.268302 0.216773 \u5373\u4fbf\u6570\u636e\u6ca1\u6709\u6392\u5e8f\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5bf9\u4ed6\u4eec\u8fdb\u884c\u7d22\u5f15\uff0c\u4f46\u662f\u7d22\u5f15\u7684\u6548\u7387\u4f1a\u6781\u5927\u964d\u4f4e\uff0c\u5e76\u4e14\u4e5f\u4f1a\u629b\u51fa PerformanceWarning \u8b66\u544a\u3002\u800c\u4e14\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u7684\u526f\u672c\u800c\u975e\u4e00\u4e2a\u6570\u636e\u7684\u89c6\u56fe\uff1a dfm = pd . DataFrame ({ 'jim' : [ 0 , 0 , 1 , 1 ], 'joe' : [ 'x' , 'x' , 'z' , 'y' ], 'jolie' : np . random . rand ( 4 )}) dfm = dfm . set_index ([ 'jim' , 'joe' ]) dfm dfm . loc [( 1 , 'z' )] .\\setup_m.py:9: PerformanceWarning: indexing past lexsort depth may impact performance. jolie jim joe 1 z 0.411054 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u7d22\u5f15\u4e00\u4e2a\u6ca1\u6709\u5b8c\u5168lexsorted\u7684\u5bf9\u8c61\uff0c\u4f60\u5c06\u4f1a\u78b0\u5230\u5982\u4e0b\u7684\u9519\u8bef\uff1a try : dfm . loc [( 0 , 'y' ):( 1 , 'z' )] except Exception as e : print ( f \"UnsortedIndexError: {e} \" ) UnsortedIndexError: 'Key length (2) was greater than MultiIndex lexsort depth (1)' \u6392\u5e8f\u4e4b\u540e\u5219\u4e0d\u4f1a\u62a5\u9519 dfm . sort_index () . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.599272 z 0.411054 \u5728 MultiIndex \u4e0a\u4f7f\u7528 is_lexsorted() \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e2a\u7d22\u5f15\u662f\u5426\u5df2\u7ecf\u88ab\u6392\u5e8f\u3002\u800c\u4f7f\u7528 lexsort_depth \u5c5e\u6027\u5219\u53ef\u4ee5\u8fd4\u56de\u6392\u5e8f\u7684\u6df1\u5ea6 dfm . index . is_lexsorted () False dfm . index . lexsort_depth 1 dfm = dfm . sort_index () dfm jolie jim joe 0 x 0.180559 x 0.757809 1 y 0.599272 z 0.411054 dfm . index . is_lexsorted () True dfm . index . lexsort_depth 2 \u73b0\u5728\uff0c\u4f60\u7684\u9009\u62e9\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 dfm . loc [( 0 , 'y' ):( 1 , 'z' )] jolie jim joe 1 y 0.599272 z 0.411054","title":"\u5bf9\u591a\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#_5","text":"\u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff08\u53ea\u5bf9 DataFrame \u6709\u6548\uff0c\u56e0\u4e3a Series \u6ca1\u6709\u5217\u7d22\u5f15\uff09\uff0c\u5176\u4e2d\uff1a col label \u53d8\u6210 index name \uff0c\u5217\u6570\u636e\u53d8\u6210\u884c label \uff1a DataFrame . set_index ( keys , drop = True , append = False , inplace = False , verify_integrity = False ) keys \uff1a \u6307\u5b9a\u4e86\u4e00\u4e2a\u6216\u8005\u4e00\u5217\u7684 column label \u3002\u8fd9\u4e9b\u5217\u5c06\u4f1a\u8f6c\u6362\u4e3a\u884c index drop \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219 keys \u5bf9\u5e94\u7684\u5217\u4f1a\u88ab\u5220\u9664\uff1b\u5426\u5219\u8fd9\u4e9b\u5217\u4ecd\u7136\u88ab\u4fdd\u7559 append \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u6709\u7684\u884c\u7d22\u5f15\u5c06\u4fdd\u7559\uff08\u6b64\u65f6\u4e00\u5b9a\u662f\u4e2a\u591a\u7ea7\u7d22\u5f15\uff09\uff1b\u5426\u5219\u629b\u5f03\u539f\u6765\u7684\u884c\u7d22\u5f15\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None verify_integrity \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u68c0\u67e5\u65b0\u7684 index \u662f\u5426\u6709\u91cd\u590d\u503c\u3002\u5426\u5219\u4f1a\u63a8\u8fdf\u5230\u68c0\u6d4b\u8fc7\u7a0b\u5230\u5fc5\u987b\u68c0\u6d4b\u7684\u65f6\u5019\u3002 df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 ))) df [ \"key\" ] = [ \"A\" , \"B\" , \"C\" , \"D\" ] print ( df ) df . set_index ( keys = \"key\" , append = True ) 0 1 2 key 0 2 9 3 A 1 2 4 9 B 2 0 6 4 C 3 4 3 2 D 0 1 2 key 0 A 2 9 3 1 B 2 4 9 2 C 0 6 4 3 D 4 3 2","title":"\u5c06\u5217\u8f6c\u6362\u4e3a\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#reset_index","text":"reset_index \u4f1a\u5c06\u5c42\u6b21\u5316\u7684\u884c index \u8f6c\u79fb\u5230\u5217\u4e2d\uff0c\u6210\u4e3a\u65b0\u7684\u4e00\u5217\u3002\u540c\u65f6 index \u53d8\u6210\u4e00\u4e2a\u6574\u6570\u578b\u7684\uff0c\u4ece0\u5f00\u59cb\u7f16\u53f7\uff1a DataFrame . reset_index ( level = None , drop = False , inplace = False , col_level = 0 , col_fill = '' ) Series . reset_index ( level = None , drop = False , name = None , inplace = False ) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 str \u3001\u5143\u7ec4\u6216\u8005\u5217\u8868\u3002\u5b83\u6307\u5b9a\u4e86\u5c06\u4ece\u5c42\u6b21\u5316\u7684 index \u4e2d\u79fb\u9664\u7684 level \u3002\u5982\u679c\u4e3a None \uff0c\u5219\u79fb\u9664\u6240\u6709\u7684 level \u3002 drop \uff1a drop=True \uff0c\u4e22\u5f03\u6307\u5b9alevel\uff0c\u4e0d\u52a0\u5165\u5217\u4e2d\u3002 drop=False \uff0c\u5219\u5c06\u6307\u5b9a\u7684level\u8f6c\u6362\u4e3a\u5217\u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None \u3002 col_level \uff1a\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u540e\uff0c\u6307\u5b9a\u8be5\u5217\u7684\u5217\u6807\u7b7e\u4f4d\u4e8e\u5217\u7d22\u5f15\u7684\u54ea\u4e2alevel\u3002 col_fill \uff1a\u6307\u5b9a\u9664 col_level \u4e4b\u5916\u7684\u5217level\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\u5f53\u5b58\u5728\u591a\u7ea7\u5217\u7d22\u5f15\u65f6\u751f\u6548\u3002 \u5bf9\u4e8e Series \uff0c name \u5c31\u662f\u63d2\u5165\u540e\uff0c\u5bf9\u5e94\u7684\u5217 label columns = [[ \"a\" , \"a\" , \"b\" ],[ \"1\" , \"2\" , \"3\" ]] df = DataFrame ( np . random . randint ( low = 0 , high = 10 , size = ( 4 , 3 )), columns = columns ) print ( df ) df . reset_index ( drop = False , col_level = 0 ) a b 1 2 3 0 9 6 3 1 8 1 3 2 5 0 9 3 6 0 5 index a b 1 2 3 0 0 9 6 3 1 1 8 1 3 2 2 5 0 9 3 3 6 0 5","title":"\u5c06\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\uff1areset_index"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.5.%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#label","text":"\u4e22\u5f03\u67d0\u6761\u8f74\u4e0a\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a label \uff1a Series/DataFrame.drop(labels[, axis, level, inplace, errors]) : labels \uff1a\u5355\u4e2a label \u6216\u8005\u4e00\u4e2a label \u5e8f\u5217\uff0c\u4ee3\u8868\u8981\u88ab\u4e22\u5f03\u7684 label axis \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u8f74\u7684\u540d\u5b57\u3002\u9ed8\u8ba4\u4e3a 0 \u8f74 level \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005 level \u540d\u5b57\uff0c\u7528\u4e8e MultiIndex \u3002\u56e0\u4e3a\u53ef\u80fd\u5728\u591a\u4e2a level \u4e0a\u90fd\u6709\u540c\u540d\u7684 label \u3002 inplace \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u539f\u5730\u4fee\u6539\u5e76\u4e14\u8fd4\u56de None errors \uff1a\u53ef\u4ee5\u4e3a 'ignore'/'raise' a = df . reset_index ( drop = False , col_level = 0 ) a . drop ( labels = \"a\" , axis = 1 ) a idx = a . index def fun ( x ): return x + 10 idx . map ( fun ) G:\\Installed\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:3936: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. obj = obj._drop_axis(labels, axis, level=level, errors=errors) Int64Index([10, 11, 12, 13], dtype='int64')","title":"\u6309label\u5220\u9664\u884c\u3001\u5217"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html","text":"from Toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.13 pandas version: 1.0.1 numpy version: 1.18.1 Pandas\u6709\u4e24\u79cd\u62fc\u63a5DataFrame\u7684\u51fd\u6570\uff0c\u4e00\u79cd\u662f concat \u51fd\u6570\uff0c\u53e6\u4e00\u79cd\u662fSQL\u98ce\u683c\u7684\u62fc\u63a5\u51fd\u6570\uff0c\u4f8b\u5982 merge \u51fd\u6570\u3002 concat \u51fd\u6570\u53ea\u80fd\u6309\u8f74\u7d22\u5f15\u8fdb\u884c\u62fc\u63a5\uff0c\u800c merge \u51fd\u6570\u5219\u66f4\u52a0\u7075\u6d3b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u6839\u636e\u5217\u7d22\u5f15\u8fdb\u884c\u62fc\u63a5\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6307\u5b9a\u7684\u5217\u8fdb\u884c\u62fc\u63a5\u3002\u4f46 merge \u51fd\u6570\u4e0d\u80fd\u6839\u636e\u884c\u6807\u7b7e\u8fdb\u884c\u62fc\u63a5\u3002 concat \u51fd\u6570 \u5728\u6df1\u5165\u7814\u7a76 concat \u51fd\u6570\u7684\u7ec6\u8282\u53ca\u5176\u4f5c\u7528\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) frames = [ df1 , df2 , df3 ] result = pd . concat ( frames ) \u4e0e\u5176\u5728ndarrays\u4e0a\u7684\u540c\u7ea7\u51fd\u6570\u4e00\u6837 numpy.concatenate \uff0c pandas.concat \u83b7\u53d6\u540c\u7c7b\u7c7b\u578b\u5bf9\u8c61\u7684\u5217\u8868\u6216\u5b57\u5178\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u201c\u5bf9\u5176\u4ed6\u8f74\u7684\u64cd\u4f5c\u201d\u7684\u4e00\u4e9b\u53ef\u914d\u7f6e\u5904\u7406\u8fdb\u884c\u8fde\u63a5\uff1a pd . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , copy = True ) objs \uff1aSeries\u6216DataFrame\u5bf9\u8c61\u7684\u5e8f\u5217\u6216\u6620\u5c04\u3002\u5982\u679c\u4f20\u9012\u4e86dict \uff0c\u5219\u9664\u975e\u4f20\u9012\u4e86\u6392\u5e8f\u7684\u952e\uff0c\u5426\u5219\u5c06\u4f7f\u7528\u6392\u5e8f\u540e\u7684\u952e\u4f5c\u4e3akeys\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u9009\u62e9\u503c\uff08\u8bf7\u53c2\u89c1\u4e0b\u6587\uff09\u3002\u9664\u975e\u5b83\u4eec\u90fd\u4e3aNone\uff0c\u5426\u5219\u6240\u6709None\u5bf9\u8c61\u90fd\u5c06\u88ab\u9759\u9ed8\u5220\u9664\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5f15\u53d1ValueError\u3002 axis \uff1a {0,1,\u2026} \uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002\u6cbf\u7740\u8be5\u8f74\u8fdb\u884c\u62fc\u63a5\u3002 join \uff1a {'inner','outer'} \uff0c\u9ed8\u8ba4\u4e3a 'outer' \u3002\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u3002 'outer' \u4e3a\u5e76\u96c6\uff0c 'inner' \u4e3a\u4ea4\u96c6\u3002 ignore_index \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u5982\u679c\u4e3aTrue\uff0c\u5219\u75280, \u2026, n-1\u4ee3\u66ff\u4e32\u8054\u8f74\u7684\u539f\u7d22\u5f15\u3002\u6ce8\u610f\uff0c\u62fc\u63a5\u65f6\u4ecd\u4f1a\u8003\u8651\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u503c\u3002 keys \uff1a\u5e8f\u5217\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u4f7f\u7528\u4f20\u9012\u7684\u952e\u4f5c\u4e3a\u6700\u5916\u5c42\u7ea7\u522b\u6765\u6784\u9020\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u3002\u5982\u679c\u901a\u8fc7\u4e86\u591a\u4e2a\u7ea7\u522b\uff0c\u5219\u5e94\u5305\u542b\u5143\u7ec4\u3002 levels \uff1a\u5e8f\u5217\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u7528\u4e8e\u6784\u9020MultiIndex\u7684\u7279\u5b9a\u7ea7\u522b\uff08\u552f\u4e00\u503c\uff09\u3002\u5426\u5219\uff0c\u5c06\u4ece\u6309\u952e\u63a8\u65ad\u51fa\u5b83\u4eec\u3002 names \uff1a\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u751f\u6210\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u4e2d\u7684\u7ea7\u522b\u7684\u540d\u79f0\u3002 verify_integrity \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u68c0\u67e5\u65b0\u7684\u4e32\u8054\u8f74\u662f\u5426\u5305\u542b\u91cd\u590d\u9879\u3002\u76f8\u5bf9\u4e8e\u5b9e\u9645\u6570\u636e\u4e32\u8054\u800c\u8a00\uff0c\u8fd9\u53ef\u80fd\u975e\u5e38\u6602\u8d35\u3002 copy \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aTrue\u3002\u5982\u679c\u4e3aFalse\uff0c\u5728\u975e\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u3002 \u6ca1\u6709\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba8\u8bba\u8fd9\u4e9b\u53c2\u6570\u7684\u4f5c\u7528\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u56de\u987e\u4e00\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u5c06\u7279\u5b9a\u7684\u952e\u4e0e\u5404\u4e2a\u5f85\u62fc\u63a5\u7684DataFrame\u76f8\u5173\u8054\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 keys \u53c2\u6570\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd4\u56de\u5bf9\u8c61\u7684\u7d22\u5f15\u5177\u6709 \u5c42\u6b21\u7ed3\u6784\u7d22\u5f15 \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u952e\u9009\u62e9\u6bcf\u4e2a\u5757\uff1a result . loc [ 'y' ] A B C D 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 \u610f\u8bc6\u5230\u8fd9\u4e2a\u529f\u80fd\u662f\u975e\u5e38\u6709\u7528\u7684\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\uff0c\u6709\u5173\u6b64\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u53c2\u89c1\u4e0b\u6587\u3002 Note \u503c\u5f97\u6ce8\u610f\u7684\u662f concat() \u4f1a\u5b8c\u6574\u590d\u5236\u6570\u636e\uff08 append() \u65b9\u6cd5\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u4e0d\u65ad\u91cd\u590d\u4f7f\u7528\u6b64\u51fd\u6570\u4f1a\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002\u5982\u679c\u9700\u8981\u5bf9\u591a\u4e2a\u6570\u636e\u96c6\u4f7f\u7528\u8be5\u64cd\u4f5c\uff0c\u8bf7\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 frames = [ process_your_file ( f ) for f in files ] result = pd . concat ( frames ) \u5904\u7406\u5176\u4ed6\u8f74\u7684\u903b\u8f91\uff1ajoin\u53c2\u6570 \u5c06\u591a\u4e2aDataFrame\u7c98\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\uff08\u800c\u4e0d\u662f\u4e32\u8054\u7684\u8f74\uff09\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5b8c\u6210\uff1a \u628a\u5b83\u4eec\u5168\u90e8\u7ed3\u5408\u8d77\u6765 join='outer' \u3002\u8fd9\u662f\u9ed8\u8ba4\u9009\u9879\uff0c\u8fd9\u4e0d\u4f1a\u4e22\u5931\u4fe1\u606f\u3002 \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \u3002 \u9ed8\u8ba4 join='outer' \uff1a df4 = pd . DataFrame ({ 'B' : [ 'B2' , 'B3' , 'B6' , 'B7' ], 'D' : [ 'D2' , 'D3' , 'D6' , 'D7' ], 'F' : [ 'F2' , 'F3' , 'F6' , 'F7' ]}, index = [ 2 , 3 , 7 , 6 ]) result = pd . concat ([ df1 , df4 ], axis = 1 , sort = True , join = \"outer\" ) \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \uff1a result = pd . concat ([ df1 , df4 ], axis = 1 , join = 'inner' ) \u5982\u679c\u53ea\u60f3\u7528\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\uff1a result = pd . concat ([ df1 , df4 ], axis = 1 ) . reindex ( df1 . index ) \u4e5f\u53ef\u4ee5\u5728\u8fde\u63a5\u4e4b\u524d\u5efa\u7acb\u7d22\u5f15\uff1a pd . concat ([ df1 , df4 . reindex ( df1 . index )], axis = 1 ) A B C D B D F 0 A0 B0 C0 D0 NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN 2 A2 B2 C2 D2 B2 D2 F2 3 A3 B3 C3 D3 B3 D3 F3 \u4f7f\u7528 append \u62fc\u63a5 append() \u662fSeries\u548cDataFrame\u7684 \u5b9e\u4f8b\u65b9\u6cd5 \uff0c\u5b83\u662f concat() \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c append \u6bd4 concat \u66f4\u65e9\u51fa\u73b0\u3002 append \u65b9\u6cd5\u8ba9Series\u548cDataFrame\u6cbf\u7740\u884c\uff08 axis=0 \uff09\u62fc\u63a5\u5728\u4e00\u8d77\uff1a append ( self , other , ignore_index = False , verify_integrity = False , sort = None ) append \u4e0d\u8981\u6c42\u4e24\u4e2aDataFrame\u7684\u884c\u7d22\u5f15\u6216\u5217\u7d22\u5f15\u4ea4\u96c6\u4e3a\u7a7a\uff1a result = df1 . append ( df4 , sort = False , ignore_index = True ) append \u53ef\u4ee5\u62fc\u63a5\u591a\u4e2a\u5bf9\u8c61\uff1a result = df1 . append ([ df2 , df3 ]) \u4e0elist\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4e0d\u540c\uff0cDataFrame\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u526f\u672c\uff0c \u4e0d\u4f1a\u4fee\u6539 df1 \u3002 \u5ffd\u7565\u4e32\u8054\u8f74\u4e0a\u7684\u7d22\u5f15\uff1aignore_index \u5982\u679c DataFrame \u7684\u7d22\u5f15\u6ca1\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528 ignore_index \u53c2\u6570\uff1a result = pd . concat ([ df1 , df4 ], ignore_index = True , sort = False ) DataFrame.append() \u65b9\u6cd5\u4e5f\u6709\u8fd9\u4e2a\u53c2\u6570\uff1a result = df1 . append ( df4 , ignore_index = True , sort = False ) \u6df7\u5408\u4e32\u8054 Series \u548c DataFrame \u53ef\u4ee5\u62fc\u63a5 Series \u548c DataFrame \u3002\u8be5 Series \u4f1a\u8f6c\u5316\u4e3a DataFrame \u7684\u4e00\u5217\uff0c\u5217\u540d\u662f Series \u7684 name \u3002 s1 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], name = 'X' ) result = pd . concat ([ df1 , s1 ], axis = 1 ) \u5982\u679c Series \u672a\u547d\u540d\uff0c\u5219\u5c06\u8fde\u7eed\u7f16\u53f7\u3002 s2 = pd . Series ([ '_0' , '_1' , '_2' , '_3' ]) result = pd . concat ([ df1 , s2 , s2 , s2 ], axis = 1 ) \u901a\u8fc7 ignore_index=True \u5220\u9664\u539f\u6709\u7d22\u5f15\u6807\u7b7e\u3002 result = pd . concat ([ df1 , s1 ], axis = 1 , ignore_index = True ) key \u53c2\u6570 keys \u53c2\u6570\u7684\u4e00\u4e2a\u76f8\u5f53\u666e\u904d\u7684\u7528\u6cd5\u662f\u91cd\u65b0\u6307\u5b9a\u539fDataFrame\u6216Series\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u62fc\u63a5\u540e\u7684DataFrame\u7684\u5217\u7d22\u5f15\uff1a s3 = pd . Series ([ 0 , 1 , 2 , 3 ], name = 'foo' ) s4 = pd . Series ([ 0 , 1 , 2 , 3 ]) s5 = pd . Series ([ 0 , 1 , 4 , 5 ]) pd . concat ([ s3 , s4 , s5 ], axis = 1 ) foo 0 1 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u901a\u8fc7 keys \u53c2\u6570\uff0c\u53ef\u4ee5\u8986\u76d6\u73b0\u6709\u7684\u5217\u540d\u3002 pd . concat ([ s3 , s4 , s5 ], axis = 1 , keys = [ 'red' , 'blue' , 'yellow' ]) red blue yellow 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u8ba9\u6211\u4eec\u8003\u8651\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7684\u53d8\u4f53\uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd8\u53ef\u4ee5\u5c06\u9700\u8981\u62fc\u63a5\u7684DataFrame\u4ee5dict\u5f62\u5f0f\u4f20\u9012\u7ed9 concat \u51fd\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdict\u952e\u5c06\u7528\u4f5c keys \u53c2\u6570\uff08\u9664\u975e\u6307\u5b9a\u4e86\u5176\u4ed6\u952e\uff09\uff1a pieces = { 'x' : df1 , 'y' : df2 , 'z' : df3 } result = pd . concat ( pieces ) result = pd . concat ( pieces , keys = [ 'z' , 'y' ]) \u521b\u5efa\u7684MultiIndex\u7531\u4f20\u9012\u7684\u952e\u548c DataFrame \u884c\u7d22\u5f15\u6784\u9020\uff1a result . index . levels FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \u5982\u679c\u60f3\u6307\u5b9a\u5176\u4ed6\u7ea7\u522b\uff08\u5076\u5c14\u4f1a\u8fd9\u6837\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b levels \u53c2\u6570\uff1a result = pd . concat ( pieces , keys = [ 'x' , 'y' , 'z' ], levels = [[ 'z' , 'y' , 'x' , 'w' ]], names = [ 'group_key' ]) result . index . levels FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]) \u884c\u8ffd\u52a0\u5230 DataFrame \u5c3d\u7ba1\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff08\u56e0\u4e3a\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff09\uff0c\u4f46\u662f\u53ef\u4ee5\u5411 append \u4f20\u9012\u4e00\u4e2a Series \u6216dict\u6765\u5c06\u4e00\u884c\u9644\u52a0\u5230 DataFrame \uff1a s2 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], index = [ 'A' , 'B' , 'C' , 'D' ]) result = df1 . append ( s2 , ignore_index = True ) \u8fd8\u53ef\u4ee5\u4f20\u9012\u5b57\u5178\u6216\u7cfb\u5217\u7684\u5217\u8868\uff1a dicts = [{ 'A' : 1 , 'B' : 2 , 'C' : 3 , 'X' : 4 }, { 'A' : 5 , 'B' : 6 , 'C' : 7 , 'Y' : 8 }] result = df1 . append ( dicts , ignore_index = True , sort = False ) \u6570\u636e\u5e93\u5f62\u5f0f\u7684\u62fc\u63a5 pandas\u5177\u6709\u5168\u529f\u80fd\u3001\u9ad8\u6027\u80fd\u7684\u5185\u5b58\u8fde\u63a5\u64cd\u4f5c\uff0c\u4e0eSQL\u7b49\u5173\u7cfb\u6570\u636e\u5e93\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6027\u80fd\u6bd4\u5176\u4ed6\u5f00\u6e90\u5b9e\u73b0\uff08\u5982R\u4e2d\u7684 base::merge.data.frame \uff09\u8981\u597d\u5f97\u591a\uff08\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u751a\u81f3\u8d85\u8fc7\u4e00\u4e2a\u6570\u91cf\u7ea7\uff09\u3002\u539f\u56e0\u662f\u4ed4\u7ec6\u7684\u7b97\u6cd5\u8bbe\u8ba1\u548cDataFrame\u7684\u6570\u636e\u7684\u5185\u90e8\u5e03\u5c40\u3002 pandas\u63d0\u4f9b\u51fd\u6570 merge() \uff0c\u4f5c\u4e3aDataFrame\u6216Series\u5bf9\u8c61\u4e4b\u95f4\u6240\u6709\u6807\u51c6\u6570\u636e\u5e93\u62fc\u63a5\u64cd\u4f5c\u7684\u5165\u53e3\u70b9\uff1a pd . merge ( left , right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = True , suffixes = ( '_x' , '_y' ), copy = True , indicator = False , validate = None ) left \uff1a\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 right \uff1a\u53e6\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u5b83\u6307\u5b9a\u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\u7684 label \u3002\u5e76\u4e14\u5fc5\u987b\u5728\u4e24\u4e2a DataFrame \u4e2d\u8fd9\u4e9b label \u90fd\u5b58\u5728\u3002\u5982\u679c\u5b83\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u4e24\u4e2a DataFrame \u7684\u5217 label \u7684\u4ea4\u96c6\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 left_on/right_on \u5206\u522b\u6307\u5b9a\u4e24\u4fa7 DataFrame \u5bf9\u9f50\u7684\u8fde\u63a5\u952e\u3002 left_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u5de6\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 right_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u53f3\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 left_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u5de6\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 right_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u53f3\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 how \uff1a\u5176\u4e00 'left' \uff0c 'right' \uff0c 'outer' \uff0c 'inner' \u3002\u9ed8\u8ba4\u4e3a inner \u3002\u6709\u5173\u6bcf\u79cd\u65b9\u6cd5\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1\u4e0b\u6587\u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5728\u7ed3\u679c\u4e2d\uff0c\u5bf9\u5408\u5e76\u91c7\u7528\u7684\u8fde\u63a5\u952e\u8fdb\u884c\u6392\u5e8f\u3002 suffixes \uff1a\u4e00\u4e2a\u4e8c\u5143\u5e8f\u5217\u3002\u5bf9\u4e8e\u7ed3\u679c\u4e2d\u540c\u540d\u7684\u5217\uff0c\u5b83\u4f1a\u6dfb\u52a0\u524d\u7f00\u6765\u6307\u793a\u5b83\u4eec\u6765\u81ea\u54ea\u4e2a DataFrame \u3002 copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e\u3002\u5426\u5219\u4e0d\u62f7\u8d1d\u6570\u636e\u3002 indicator \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\u79f0\u4f5c _merge \uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 \u5982\u679c\u4e3a\u5b57\u7b26\u4e32\uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\uff08\u8be5\u5217\u540d\u5b57\u7531 indicator \u5b57\u7b26\u4e32\u7ed9\u51fa\uff09\uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 validate \uff1a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u5982\u679c\u6307\u5b9a\uff0c\u5219\u68c0\u67e5\u5408\u5e76\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\u3002 'one_to_one'\u6216'1:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u53f3\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'one_to_many'\u6216'1:m'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_one'\u6216'm:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u6b63\u786e\u7684\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_many'\u6216'm:m'\uff1a\u5141\u8bb8\uff0c\u4f46\u4e0d\u8fdb\u884c\u68c0\u67e5\u3002 \u65b0\u529f\u80fd 0.23.0\u7248\u672c\u4e2d\u6dfb\u52a0\u4e86\u6307\u5b9a\u7d22\u5f15\u7ea7\u522b\u7684 on \u3001 left_on \u3001 right_on \u53c2\u6570\u7684\u652f\u6301\u3002\u57280.24.0\u7248\u4e2d\u6dfb\u52a0\u4e86\u5bf9\u88ab\u547d\u540d\u7684Series\u5408\u5e76\u7684\u652f\u6301\u3002 merge \u662fpandas\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3aDataFrame\u5b9e\u4f8b\u65b9\u6cd5 merge() \u4f7f\u7528\uff0c\u8c03\u7528 DataFrame.merge \u65f6\uff0c DataFrame \u88ab\u89c6\u4e3a\u62fc\u63a5\u4e2d\u7684\u5de6\u4fa7\u5bf9\u8c61\u3002 \u76f8\u5173 join() \u65b9\u6cd5\u5728 merge \u5185\u90e8\u7528\u4e8e\u7d22\u5f15\u7d22\u5f15\u8fde\u63a5\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\u548c\u7d22\u5f15\u5217\u8fde\u63a5\u3002\u5982\u679c\u4ec5\u52a0\u5165\u7d22\u5f15\uff0c\u5219\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 DataFrame.join \u6765\u8282\u7701\u4e00\u4e9b\u8f93\u5165\u3002 \u5408\u5e76\u65b9\u6cd5\u7b80\u4ecb\uff08\u5173\u7cfb\u4ee3\u6570\uff09 \u6709\u7ecf\u9a8c\u7684\u5173\u7cfb\u6570\u636e\u5e93\uff08\u5982SQL\uff09\u7528\u6237\u5c06\u719f\u6089\u7528\u4e8e\u63cf\u8ff0\u4e24\u4e2aSQL\u7c7b\u8868\u7ed3\u6784\uff08DataFrame\u5bf9\u8c61\uff09\u4e4b\u95f4\u7684\u8fde\u63a5\u64cd\u4f5c\u7684\u672f\u8bed\u3002\u6709\u51e0\u4e2a\u6848\u4f8b\u9700\u8981\u8003\u8651\uff0c\u8fd9\u4e9b\u6848\u4f8b\u975e\u5e38\u91cd\u8981\uff1a one-to-one \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u662f\u552f\u4e00\u503c\u3002 many-to-one \u8054\u63a5\uff1a\u5176\u4e2d\u4e00\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u662f\u552f\u4e00\u503c\uff0c\u53e6\u4e00\u4e2a\u6709\u91cd\u590d\u503c\u3002 many-to-many \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u6709\u91cd\u590d\u503c\u3002 Caution \u5728\u5217\u4e0a\u8fde\u63a5\u5217\u65f6\uff08\u53ef\u80fd\u662f\u591a\u5bf9\u591a\u8fde\u63a5\uff09\uff0c\u4f20\u9012\u7684 DataFrame \u5bf9\u8c61\u4e0a\u7684\u6240\u6709\u7d22\u5f15 \u90fd\u5c06\u88ab\u4e22\u5f03 \u3002 \u503c\u5f97\u82b1\u4e9b\u65f6\u95f4\u4e86\u89e3\u591a\u5bf9\u591a\u8fde\u63a5\u6848\u4f8b\u7684\u7ed3\u679c\u3002 \u5728SQL/\u6807\u51c6\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u5982\u679c\u952e\u7ec4\u5408\u5728\u4e24\u4e2a\u8868\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u5219\u751f\u6210\u7684\u8868\u5c06\u5177\u6709\u5173\u8054\u6570\u636e\u7684\u7b1b\u5361\u5c14\u79ef\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e00\u4e2a\u7ec4\u5408\u952e\uff0c\u5e76\u4e14\u7ec4\u5408\u952e\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\uff1a left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = 'key' ) \u591a\u4e2a\u7ec4\u5408\u952e\u7684\u793a\u4f8b\uff08\u9ed8\u8ba4 how='inner' \uff09\uff1a left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = [ 'key1' , 'key2' ]) \u5f53\u5de6\u53f3\u4e24\u8fb9\u7684\u7ec4\u5408\u952e\u4e0d\u4e00\u81f4\u65f6\uff0c\u5904\u7406\u884c\u4e3a\u7531 how \u53c2\u6570\u6307\u5b9a\u3002\u4ee5\u4e0b\u662f how \u9009\u9879\u53ca\u5176SQL\u7b49\u6548\u540d\u79f0\u7684\u6458\u8981\uff1a \u5408\u5e76\u65b9\u5f0f SQL\u8fde\u63a5\u540d\u79f0 \u63cf\u8ff0 left LEFT OUTER JOIN \u4ec5\u4fdd\u7559left\u51fa\u73b0\u7684\u7ec4\u5408\u952e right RIGHT OUTER JOIN \u4ec5\u4fdd\u7559right\u51fa\u73b0\u7684\u7ec4\u5408\u952e outer FULL OUTER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u5e76\u96c6 inner INNER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u4ea4\u96c6 result = pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'inner' , on = [ 'key1' , 'key2' ]) \u8fd9\u662f\u7ec4\u5408\u952e\u5177\u6709\u91cd\u590d\u503c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 2 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) result = pd . merge ( left , right , on = 'B' , how = 'outer' ) Caution \u5728\u91cd\u590d\u952e\u4e0a\u8fdb\u884c\u62fc\u63a5\uff0c\u4f1a\u5bfc\u81f4\u8fd4\u56de\u7684DataFrame\u7684\u51fd\u6570\u662f\u539f\u6765\u4e24\u4e2aDataFrame\u884c\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\u3002\u5982\u679cDataFrame\u5f88\u5927\uff0c\u5e94\u8be5\u5bf9\u91cd\u590d\u952e\u8fdb\u884c\u7ba1\u7406\u3002 \u68c0\u67e5\u91cd\u590d\u952e\uff1avalidate \u8fd9\u662f 0.21.0\u7248\u6dfb\u52a0\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u4f7f\u7528 validate \u53c2\u6570\u81ea\u52a8\u68c0\u67e5\u7ec4\u5408\u952e\u4e2d\u662f\u5426\u6709\u610f\u5916\u7684\u91cd\u590d\u9879\u3002\u5728\u5408\u5e76\u64cd\u4f5c\u4e4b\u524d\u68c0\u67e5\u952e\u7684\u552f\u4e00\u6027\uff0c\u53ef\u4ee5\u9632\u6b62\u5185\u5b58\u6ea2\u51fa\u3002\u68c0\u67e5\u7ec4\u5408\u952e\u7684\u552f\u4e00\u6027\u4e5f\u662f\u786e\u4fdd\u6570\u636e\u7ed3\u6784\u7b26\u5408\u9884\u671f\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0cright\u4e2d\u7684 B \u5b58\u5728\u91cd\u590d\u7684\u503c\u3002\u7531\u4e8e\u8fd9\u4e0d\u662f validate \u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u4e00\u5bf9\u4e00\u5408\u5e76\uff0c\u56e0\u6b64\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 1 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) try : result = pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_one\" ) except Exception as e : print ( \"MergeError:\" , e ) MergeError : Merge keys are not unique in right dataset ; not a one - to - one merge \u5982\u679c\u7528\u6237\u77e5\u9053\u53f3\u8fb9\u7684\u91cd\u590d\u9879\uff0c DataFrame \u4f46\u8981\u786e\u4fdd\u5de6\u8fb9\u7684DataFrame\u4e2d\u6ca1\u6709\u91cd\u590d\u9879\uff0c\u5219\u53ef\u4ee5\u6539\u7528\u8be5 validate='one_to_many' \u53c2\u6570\uff0c\u8fd9\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_many\" ) A_x B A_y 0 1 1 NaN 1 2 2 4.0 2 2 2 5.0 3 2 2 6.0 \u6307\u793a\u7b26\uff1aindicator merge() \u63a5\u53d7\u6307\u793a\u7b26\u53c2\u6570 indicator \u3002\u5982\u679c indicator=True \uff0c\u5219\u5c06\u4e00\u4e2a\u540d\u4e3a _merge \uff0cdtype\u4e3aCategorical\u7684\u5217\u6dfb\u52a0\u5230\u8f93\u51faDataFrame\u7684\u672b\u5c3e\uff1a indicator _merge \u503c \u4ec5\u51fa\u73b0\u5728 'left' \u7ec4\u5408\u952e left_only \u4ec5\u51fa\u73b0\u5728 'right' \u7ec4\u5408\u952e right_only \u540c\u65f6\u51fa\u73b0\u5728 'left' \u548c 'right' \u7ec4\u5408\u952e both df1 = pd . DataFrame ({ 'col1' : [ 0 , 1 ], 'col_left' : [ 'a' , 'b' ]}) df2 = pd . DataFrame ({ 'col1' : [ 1 , 2 , 2 ], 'col_right' : [ 2 , 2 , 2 ]}) pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = True ) col1 col_left col_right _merge 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only indicator \u53c2\u6570\u8fd8\u53ef\u4ee5\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6307\u6807\u51fd\u6570\u5c06\u4f7f\u7528\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u7684\u503c\u4f5c\u4e3a \u6307\u6807\u5217 \u7684\u540d\u79f0\u3002 pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = 'indicator_column' ) col1 col_left col_right indicator_column 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only \u5408\u5e76\u65f6\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362 \u5408\u5e76\u5c06\u4fdd\u7559\u7ec4\u5408\u952e\u7684\u6570\u636e\u7c7b\u578b left = pd . DataFrame ({ 'key' : [ 1 ], 'v1' : [ 10 ]}) print ( left , \" \\n \" ) right = pd . DataFrame ({ 'key' : [ 1 , 2 ], 'v1' : [ 20 , 30 ]}) print ( right ) key v1 0 1 10 key v1 0 1 20 1 2 30 \u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u7ec4\u5408\u952e\uff1a print ( pd . merge ( left , right , how = 'outer' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' ) . dtypes ) key v1 0 1 10 1 1 20 2 2 30 key int64 v1 int64 dtype : object \u5982\u679c\u7f3a\u5c11\u5f15\u5165\u7684\u503c\uff0c\u5219\u751f\u6210\u7684dtype\u5c06\u88ab\u8f6c\u6362\uff1a print ( pd . merge ( left , right , how = 'outer' , on = 'key' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' , on = 'key' ) . dtypes ) key v1_x v1_y 0 1 10 . 0 20 1 2 NaN 30 key int64 v1_x float64 v1_y int64 dtype : object \u5408\u5e76\u5c06\u4fdd\u7559mergands\u7684category\u7c7b\u578b\u3002\u53e6\u8bf7\u53c2\u9605\u5173\u4e8e categoricals \u7684\u90e8\u5206\u3002 left\uff1a from pandas.api.types import CategoricalDtype X = pd . Series ( np . random . choice ([ 'foo' , 'bar' ], size = ( 10 ,))) X = X . astype ( CategoricalDtype ( categories = [ 'foo' , 'bar' ])) left = pd . DataFrame ({ 'X' : X , 'Y' : np . random . choice ([ 'one' , 'two' , 'three' ], size = ( 10 ,))}) print ( left , \" \\n \" ) print ( left . dtypes ) X Y 0 bar one 1 foo three 2 bar three 3 foo one 4 bar one 5 bar three 6 bar one 7 foo three 8 bar two 9 foo three X category Y object dtype : object right\uff1a right = pd . DataFrame ({ 'X' : pd . Series ([ 'foo' , 'bar' ], dtype = CategoricalDtype ([ 'foo' , 'bar' ])), 'Z' : [ 1 , 2 ]}) print ( right , \" \\n \" ) print ( right . dtypes ) X Z 0 foo 1 1 bar 2 X category Z int64 dtype : object \u5408\u5e76\u7ed3\u679c\uff1a result = pd . merge ( left , right , how = 'outer' ) print ( result , \" \\n \" ) print ( result . dtypes ) X Y Z 0 bar one 2 1 bar three 2 2 bar one 2 3 bar three 2 4 bar one 2 5 bar two 2 6 foo three 1 7 foo one 1 8 foo three 1 9 foo three 1 X category Y object Z int64 dtype : object \u6ce8\u610f category \u7c7b\u578b\u5fc5\u987b \u5b8c\u5168\u76f8\u540c \uff0c\u8fd9\u610f\u5473\u7740category\u5bf9\u8c61\u6709\u76f8\u540c\u7684\u7c7b\u522b\u548c\u6709\u5e8f\u5c5e\u6027\u3002\u5426\u5219\uff0ccategory\u7c7b\u578b\u5c06\u88ab\u8f6c\u6362\u6210object\u7c7b\u578b\u3002 \u6ce8\u610f \u4e0eobject\u6570\u636e\u7c7b\u578b\u5408\u5e76\u76f8\u6bd4\uff0c\u5728\u76f8\u540c\u7684category\u6570\u636e\u7c7b\u578b\u4e0a\u8fdb\u884c\u5408\u5e76\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002 DataFrame.join() \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) result = left . join ( right ) result = left . join ( right , how = 'outer' ) \u4e0e\u4e0a\u8ff0\u76f8\u540c\uff0c\u4f46\u5e26\u6709 how='inner' \uff1a result = left . join ( right , how = 'inner' ) \u6b64\u5904\u7684\u6570\u636e\u5bf9\u9f50\u5728\u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09\u4e0a\u3002\u4f7f\u7528 merge \u6307\u793a\u5176\u4f7f\u7528\u7d22\u5f15\u7684\u9644\u52a0\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u884c\u4e3a\uff1a result = pd . merge ( left , right , left_index = True , right_index = True , how = 'outer' ) result = pd . merge ( left , right , left_index = True , right_index = True , how = 'inner' ) \u6309 \u7ec4\u5408\u952e\u5217 \u548c \u7d22\u5f15 \u62fc\u63a5\uff1ajoin join() \u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 on \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u6216\u591a\u4e2a\u5217\u540d\uff0c\u5b83\u6307\u5b9a\u4f20\u9012\u7684DataFrame\u5c06\u5728\u539fDataFrame\u4e2d\u7684\u8be5\u5217\u4e0a\u5bf9\u9f50\u3002\u5373\u8fd9\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u5b8c\u5168\u7b49\u4ef7\uff1a left . join ( right , on = key_or_keys ) pd . merge ( left , right , left_on = key_or_keys , right_index = True , how = 'left' , sort = False ) \u663e\u7136\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u79cd\u66f4\u65b9\u4fbf\u7684\u5f62\u5f0f\u3002\u5bf9\u4e8emany-to-one\u62fc\u63a5\uff08\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\u662f\u7ec4\u5408\u952e\uff09\uff0c\u4f7f\u7528 join \u53ef\u80fd\u4f1a\u66f4\u65b9\u4fbf\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' ], 'D' : [ 'D0' , 'D1' ]}, index = [ 'K0' , 'K1' ]) result = left . join ( right , on = 'key' ) result = pd . merge ( left , right , left_on = 'key' , right_index = True , how = 'left' , sort = False ); \u5982\u679c\u7ec4\u5408\u952e\u6709\u591a\u4e2a\uff0c\u4f20\u9012\u7684DataFrame\u5fc5\u987b\u5177\u6709 MultiIndex \uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) index = pd . MultiIndex . from_tuples ([( 'K0' , 'K0' ), ( 'K1' , 'K0' ), ( 'K2' , 'K0' ), ( 'K2' , 'K1' )]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) \u73b0\u5728\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e24\u4e2a\u7ec4\u5408\u952e\u6765\u8fdb\u884c\u62fc\u63a5\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ]) \u9ed8\u8ba4\u7684 DataFrame.join \u662f\u6267\u884c\u5de6\u8054\u63a5\uff08\u5bf9\u4e8eExcel\u7528\u6237\uff0c\u672c\u8d28\u4e0a\u662f\u201c VLOOKUP\u201d\u64cd\u4f5c\uff09\uff0c\u8be5\u8054\u63a5\u4ec5\u4f7f\u7528\u5728\u8c03\u7528DataFrame\u4e2d\u627e\u5230\u7684\u952e\u3002\u5176\u4ed6\u8054\u63a5\u7c7b\u578b\uff08\u4f8b\u5982\u5185\u90e8\u8054\u63a5\uff09\u4e5f\u53ef\u4ee5\u8f7b\u677e\u6267\u884c\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ], how = 'inner' ) \u5982\u60a8\u6240\u89c1\uff0c\u8fd9\u5c06\u5220\u9664\u6240\u6709\u4e0d\u5339\u914d\u7684\u884c\u3002 \u6309 \u5355\u5c42\u7d22\u5f15 \u548c \u591a\u5c42\u7d22\u5f15 \u62fc\u63a5\uff1ajoin \u53ef\u4ee5\u5c06\u5355\u5c42\u7d22\u5f15DataFrame\u4e0e\u591a\u5c42\u7d22\u5f15DataFrame\u7684 \u4e00\u4e2a\u7ea7\u522b \u8fde\u63a5\u8d77\u6765\u3002\u8be5\u7ea7\u522b\u5c06\u4e0e\u5355\u7d22\u5f15DataFrame\u7684\u7d22\u5f15\u540d\u79f0\u548c\u591a\u7d22\u5f15DataFrame\u7684\u7ea7\u522b\u540d\u79f0\u76f8\u5339\u914d left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = pd . Index ([ 'K0' , 'K1' , 'K2' ], name = 'key' )) index = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) result = left . join ( right , how = 'inner' ) \u4e0b\u9762\u7684\u51fd\u6570\u548c\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u7b49\u6548\u7684\uff0c\u4f46 pd.merge \u7684\u4fe1\u606f\u66f4\u8be6\u7ec6\uff0c\u5b58\u50a8\u6548\u7387\u66f4\u9ad8/\u66f4\u5feb\u3002 result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'Y' ]) \u6309MultiIndexes\u62fc\u63a5\uff1ajoin \u53ea\u8981\u5728\u8fde\u63a5\u4e2d\u5b8c\u5168\u4f7f\u7528\u4e86\u53f3\u53c2\u6570\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u8be5\u53c2\u6570\u662f\u5de6\u53c2\u6570\u4e2d\u7d22\u5f15\u7684\u5b50\u96c6\uff0c\u5c31\u53ef\u4ee5\u7528\u6709\u9650\u7684\u65b9\u5f0f\u6765\u652f\u6301\u5b83\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a leftindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' ), [ 1 , 2 ]], names = [ 'abc' , 'xy' , 'num' ]) left = pd . DataFrame ({ 'v1' : range ( 12 )}, index = leftindex ) print ( left , \" \\n \" ) rightindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' )], names = [ 'abc' , 'xy' ]) right = pd . DataFrame ({ 'v2' : [ 100 * i for i in range ( 1 , 7 )]}, index = rightindex ) print ( right , \" \\n \" ) left . join ( right , on = [ 'abc' , 'xy' ], how = 'inner' ) v1 abc xy num a x 1 0 2 1 y 1 2 2 3 b x 1 4 2 5 y 1 6 2 7 c x 1 8 2 9 y 1 10 2 11 v2 abc xy a x 100 y 200 b x 300 y 400 c x 500 y 600 v1 v2 abc xy num a x 1 0 100 2 1 100 y 1 2 200 2 3 200 b x 1 4 300 2 5 300 y 1 6 400 2 7 400 c x 1 8 500 2 9 500 y 1 10 600 2 11 600 \u5982\u679c\u4e0d\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5177\u6709\u4e24\u4e2a\u591a\u7d22\u5f15\u7684\u8054\u63a5\u3002 leftindex = pd . MultiIndex . from_tuples ([( 'K0' , 'X0' ), ( 'K0' , 'X1' ), ( 'K1' , 'X2' )], names = [ 'key' , 'X' ]) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = leftindex ) rightindex = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = rightindex ) result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'X' , 'Y' ]) \u6309\u7167\u5217\u548c\u7d22\u5f15\u5408\u5e76 \u8fd9\u662f 0.23 \u7248\u4e2d\u6dfb\u52a0\u7684\u529f\u80fd\u3002 on \u3001 left_on \u548c right_on \u53c2\u6570\u53ef\u4ee5\u5f15\u7528\u5217\u540d\u6216\u7d22\u5f15\u7ea7\u540d\u79f0\u3002\u8fd9\u5141\u8bb8\u5728\u7d22\u5f15\u548c\u5217\u7684\u7ec4\u5408\u4e0a\u5408\u5e76DataFrame\u5b9e\u4f8b\uff0c\u800c\u4e0d\u5fc5\u91cd\u7f6e\u7d22\u5f15\uff1a left_index = pd . Index ([ 'K0' , 'K0' , 'K1' , 'K2' ], name = 'key1' ) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}, index = left_index ) right_index = pd . Index ([ 'K0' , 'K1' , 'K2' , 'K2' ], name = 'key1' ) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K1' ]}, index = right_index ) result = left . merge ( right , on = [ 'key1' , 'key2' ]) \u503c\u5217\u91cd\u53e0 merge \u51fd\u6570\u7684 suffixes \u53c2\u6570\u63a5\u53d7\u5b57\u7b26\u4e32\u5217\u8868\u7684\u5143\u7ec4\uff0c\u4ee5\u9644\u52a0\u5230\u8f93\u5165DataFrame\u4e2d\u91cd\u53e0\u7684\u5217\u540d\u4ee5\u6d88\u9664\u7ed3\u679c\u5217\u7684\u6b67\u4e49\uff1a left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K2' ], 'v' : [ 1 , 2 , 3 ]}) right = pd . DataFrame ({ 'k' : [ 'K0' , 'K0' , 'K3' ], 'v' : [ 4 , 5 , 6 ]}) result = pd . merge ( left , right , on = 'k' ) result = pd . merge ( left , right , on = 'k' , suffixes = [ '_l' , '_r' ]) DataFrame.join() \u5177\u6709 lsuffix \u548c rsuffix \u884c\u4e3a\u7c7b\u4f3c\u7684\u53c2\u6570\u3002 left = left . set_index ( 'k' ) right = right . set_index ( 'k' ) result = left . join ( right , lsuffix = '_l' , rsuffix = '_r' ) \u62fc\u63a5\u591a\u4e2aDataFrames DataFrames \u4e5f\u53ef\u4ee5\u4f20\u9012\u7684\u5217\u8868\u6216\u5143\u7ec4\u4ee5 join() \u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u5b83\u4eec\u7684\u7d22\u5f15\u4e0a\u3002 right2 = pd . DataFrame ({ 'v' : [ 7 , 8 , 9 ]}, index = [ 'K1' , 'K1' , 'K2' ]) result = left . join ([ right , right2 ]) \u6309\u7d22\u5f15\u586b\u8865\u7f3a\u5931\u503c \u53e6\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u6709\u4e24\u4e2a\u7d22\u5f15\u5b58\u5728\u4ea4\u96c6\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u60f3\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u586b\u8865\u7f3a\u5931\u503c\u3002\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a df1 = pd . DataFrame ([[ np . nan , 3. , 5. ], [ - 4.6 , np . nan , np . nan ], [ np . nan , 7. , np . nan ]]) df2 = pd . DataFrame ([[ - 42.6 , np . nan , - 8.2 ], [ - 5. , 1.6 , 4 ]], index = [ 1 , 2 ]) combine_first() \u65b9\u6cd5\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff1a result = df1 . combine_first ( df2 ) \u8bf7\u6ce8\u610f\uff0c combine_first \u8fd4\u56de\u526f\u672c\uff0c\u800c update() \u5219\u4f1a\u4fee\u6539\u539f\u5bf9\u8c61\uff1a df1 . update ( df2 ) \u5408\u5e76\u65f6\u95f4\u5e8f\u5217 \u5408\u5e76\u6709\u5e8f\u6570\u636e merge_ordered() \u51fd\u6570\u5141\u8bb8\u7ec4\u5408\u65f6\u95f4\u5e8f\u5217\u548c\u5176\u4ed6\u6709\u5e8f\u6570\u636e\u3002 merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ( \"_x\" , \"_y\" ), how = \"outer\" , ) left_by : Group left DataFrame by group columns and merge piece by piece with right DataFrame left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'lv' : [ 1 , 2 , 3 , 4 ], 's' : [ 'a' , 'b' , 'c' , 'd' ]}) right = pd . DataFrame ({ 'k' : [ 'K1' , 'K2' , 'K4' ], 'rv' : [ 1 , 2 , 3 ]}) print ( left , \" \\n \" ) print ( right ) pd . merge_ordered ( left , right , fill_method = None , left_by = 's' ) k lv s 0 K0 1 a 1 K1 2 b 2 K1 3 c 3 K2 4 d k rv 0 K1 1 1 K2 2 2 K4 3 k lv s rv 0 K0 1.0 a NaN 1 K1 NaN a 1.0 2 K2 NaN a 2.0 3 K4 NaN a 3.0 4 K1 2.0 b 1.0 5 K2 NaN b 2.0 6 K4 NaN b 3.0 7 K1 3.0 c 1.0 8 K2 NaN c 2.0 9 K4 NaN c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 NaN d 3.0 \u5b83\u5177\u6709\u4e00\u4e2a\u53ef\u9009 fill_method \u5173\u952e\u5b57\u6765\u586b\u5145\u4e22\u5931\u7684\u6570\u636e\uff1a # \u524d\u5411\u586b\u5145\uff1a\u540e\u9762\u7684\u7f3a\u5931\u503c\u7528\u524d\u9762\u7684\u6570\u5b57\u586b\u5145 pd . merge_ordered ( left , right , fill_method = \"ffill\" , left_by = 's' ) k lv s rv 0 K0 1.0 a NaN 1 K1 1.0 a 1.0 2 K2 1.0 a 2.0 3 K4 1.0 a 3.0 4 K1 2.0 b 1.0 5 K2 2.0 b 2.0 6 K4 2.0 b 3.0 7 K1 3.0 c 1.0 8 K2 3.0 c 2.0 9 K4 3.0 c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 4.0 d 3.0 \u5408\u5e76ASOF merge_asof() \u7c7b\u4f3c\u4e8e\u6709\u5e8f\u5de6\u8054\u63a5\uff0c\u53ea\u662f\u6211\u4eec\u5339\u914d\u6700\u8fd1\u7684\u952e\u800c\u4e0d\u662f\u76f8\u7b49\u7684\u952e\u3002\u5bf9\u4e8e\u5de6\u6570\u636e\u6846\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u9009\u62e9\u53f3\u6570\u636e\u6846\u4e2d\u7684\u6700\u540e\u4e00\u884c\uff0c\u8be5\u884c\u7684on\u952e\u5c0f\u4e8elefs\u952e\u3002\u4e24\u4e2a\u6570\u636e\u5e27\u90fd\u5fc5\u987b\u6309\u952e\u6392\u5e8f\u3002 \u53ef\u9009\u5730\uff0casof\u5408\u5e76\u53ef\u4ee5\u6267\u884c\u9010\u7ec4\u5408\u5e76\u3002\u9664\u4e86on\u952e\u4e0a\u6700\u63a5\u8fd1\u7684\u5339\u914d\u4e4b\u5916\uff0c\u5b83\u4e0eby\u952e\u7684\u5339\u914d\u76f8\u540c merge_asof ( left , right , on = None , left_on = None , right_on = None , left_index = False , right_index = False , by = None , left_by = None , right_by = None , suffixes = ( \"_x\" , \"_y\" ), tolerance = None , allow_exact_matches = True , direction = \"backward\" , ) \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u6709 trades \u548c quotes \uff0c\u6211\u4eec\u60f3\u5408\u5e76\u5b83\u4eec trades = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.038' , '20160525 13:30:00.048' , '20160525 13:30:00.048' , '20160525 13:30:00.048' ]), 'ticker' : [ 'MSFT' , 'MSFT' , 'GOOG' , 'GOOG' , 'AAPL' ], 'price' : [ 51.95 , 51.95 , 720.77 , 720.92 , 98.00 ], 'quantity' : [ 75 , 155 , 100 , 100 , 100 ]}, columns = [ 'time' , 'ticker' , 'price' , 'quantity' ]) quotes = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.023' , '20160525 13:30:00.030' , '20160525 13:30:00.041' , '20160525 13:30:00.048' , '20160525 13:30:00.049' , '20160525 13:30:00.072' , '20160525 13:30:00.075' ]), 'ticker' : [ 'GOOG' , 'MSFT' , 'MSFT' , 'MSFT' , 'GOOG' , 'AAPL' , 'GOOG' , 'MSFT' ], 'bid' : [ 720.50 , 51.95 , 51.97 , 51.99 , 720.50 , 97.99 , 720.50 , 52.01 ], 'ask' : [ 720.93 , 51.96 , 51.98 , 52.00 , 720.93 , 98.01 , 720.88 , 52.03 ]}, columns = [ 'time' , 'ticker' , 'bid' , 'ask' ]) print ( trades , \" \\n \" ) print ( quotes ) time ticker price quantity 0 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 75 1 2016 - 05 - 25 13 : 30 : 00 . 038 MSFT 51 . 95 155 2 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 77 100 3 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 92 100 4 2016 - 05 - 25 13 : 30 : 00 . 048 AAPL 98 . 00 100 time ticker bid ask 0 2016 - 05 - 25 13 : 30 : 00 . 023 GOOG 720 . 50 720 . 93 1 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 51 . 96 2 2016 - 05 - 25 13 : 30 : 00 . 030 MSFT 51 . 97 51 . 98 3 2016 - 05 - 25 13 : 30 : 00 . 041 MSFT 51 . 99 52 . 00 4 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 50 720 . 93 5 2016 - 05 - 25 13 : 30 : 00 . 049 AAPL 97 . 99 98 . 01 6 2016 - 05 - 25 13 : 30 : 00 . 072 GOOG 720 . 50 720 . 88 7 2016 - 05 - 25 13 : 30 : 00 . 075 MSFT 52 . 01 52 . 03 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u91c7\u7528\u7684\u662fquotes\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u76842\u6beb\u79d2\u5185\u5408\u5e76\uff1a pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '2ms' )) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 NaN NaN 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u768410\u6beb\u79d2\u5185\u5408\u5e76\uff0c\u5e76\u4e14\u4e0d\u5305\u62ec\u7cbe\u786e\u5339\u914d\u3002\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6211\u4eec\u6392\u9664\u4e86\uff08quotes\u7684\uff09\u5b8c\u5168\u5339\u914d\u9879\uff0c\u4f46\u4ee5\u524d\u7684quotes\u786e\u5b9e\u4f1a\u4f20\u64ad\u5230\u90a3\u4e2a\u65f6\u95f4\u70b9\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '10ms' ), allow_exact_matches = False ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 NaN NaN 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 NaN NaN 3 2016-05-25 13:30:00.048 GOOG 720.92 100 NaN NaN 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN","title":"7.6.\u62fc\u63a5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#concat","text":"\u5728\u6df1\u5165\u7814\u7a76 concat \u51fd\u6570\u7684\u7ec6\u8282\u53ca\u5176\u4f5c\u7528\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a df1 = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ 'A' : [ 'A4' , 'A5' , 'A6' , 'A7' ], 'B' : [ 'B4' , 'B5' , 'B6' , 'B7' ], 'C' : [ 'C4' , 'C5' , 'C6' , 'C7' ], 'D' : [ 'D4' , 'D5' , 'D6' , 'D7' ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ 'A' : [ 'A8' , 'A9' , 'A10' , 'A11' ], 'B' : [ 'B8' , 'B9' , 'B10' , 'B11' ], 'C' : [ 'C8' , 'C9' , 'C10' , 'C11' ], 'D' : [ 'D8' , 'D9' , 'D10' , 'D11' ]}, index = [ 8 , 9 , 10 , 11 ]) frames = [ df1 , df2 , df3 ] result = pd . concat ( frames ) \u4e0e\u5176\u5728ndarrays\u4e0a\u7684\u540c\u7ea7\u51fd\u6570\u4e00\u6837 numpy.concatenate \uff0c pandas.concat \u83b7\u53d6\u540c\u7c7b\u7c7b\u578b\u5bf9\u8c61\u7684\u5217\u8868\u6216\u5b57\u5178\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u201c\u5bf9\u5176\u4ed6\u8f74\u7684\u64cd\u4f5c\u201d\u7684\u4e00\u4e9b\u53ef\u914d\u7f6e\u5904\u7406\u8fdb\u884c\u8fde\u63a5\uff1a pd . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False , keys = None , levels = None , names = None , verify_integrity = False , copy = True ) objs \uff1aSeries\u6216DataFrame\u5bf9\u8c61\u7684\u5e8f\u5217\u6216\u6620\u5c04\u3002\u5982\u679c\u4f20\u9012\u4e86dict \uff0c\u5219\u9664\u975e\u4f20\u9012\u4e86\u6392\u5e8f\u7684\u952e\uff0c\u5426\u5219\u5c06\u4f7f\u7528\u6392\u5e8f\u540e\u7684\u952e\u4f5c\u4e3akeys\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u9009\u62e9\u503c\uff08\u8bf7\u53c2\u89c1\u4e0b\u6587\uff09\u3002\u9664\u975e\u5b83\u4eec\u90fd\u4e3aNone\uff0c\u5426\u5219\u6240\u6709None\u5bf9\u8c61\u90fd\u5c06\u88ab\u9759\u9ed8\u5220\u9664\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5f15\u53d1ValueError\u3002 axis \uff1a {0,1,\u2026} \uff0c\u9ed8\u8ba4\u503c\u4e3a0\u3002\u6cbf\u7740\u8be5\u8f74\u8fdb\u884c\u62fc\u63a5\u3002 join \uff1a {'inner','outer'} \uff0c\u9ed8\u8ba4\u4e3a 'outer' \u3002\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u3002 'outer' \u4e3a\u5e76\u96c6\uff0c 'inner' \u4e3a\u4ea4\u96c6\u3002 ignore_index \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u5982\u679c\u4e3aTrue\uff0c\u5219\u75280, \u2026, n-1\u4ee3\u66ff\u4e32\u8054\u8f74\u7684\u539f\u7d22\u5f15\u3002\u6ce8\u610f\uff0c\u62fc\u63a5\u65f6\u4ecd\u4f1a\u8003\u8651\u5176\u4ed6\u8f74\u4e0a\u7684\u7d22\u5f15\u503c\u3002 keys \uff1a\u5e8f\u5217\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u4f7f\u7528\u4f20\u9012\u7684\u952e\u4f5c\u4e3a\u6700\u5916\u5c42\u7ea7\u522b\u6765\u6784\u9020\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u3002\u5982\u679c\u901a\u8fc7\u4e86\u591a\u4e2a\u7ea7\u522b\uff0c\u5219\u5e94\u5305\u542b\u5143\u7ec4\u3002 levels \uff1a\u5e8f\u5217\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u7528\u4e8e\u6784\u9020MultiIndex\u7684\u7279\u5b9a\u7ea7\u522b\uff08\u552f\u4e00\u503c\uff09\u3002\u5426\u5219\uff0c\u5c06\u4ece\u6309\u952e\u63a8\u65ad\u51fa\u5b83\u4eec\u3002 names \uff1a\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u751f\u6210\u5c42\u6b21\u7ed3\u6784\u7d22\u5f15\u4e2d\u7684\u7ea7\u522b\u7684\u540d\u79f0\u3002 verify_integrity \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\u68c0\u67e5\u65b0\u7684\u4e32\u8054\u8f74\u662f\u5426\u5305\u542b\u91cd\u590d\u9879\u3002\u76f8\u5bf9\u4e8e\u5b9e\u9645\u6570\u636e\u4e32\u8054\u800c\u8a00\uff0c\u8fd9\u53ef\u80fd\u975e\u5e38\u6602\u8d35\u3002 copy \uff1a\u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3aTrue\u3002\u5982\u679c\u4e3aFalse\uff0c\u5728\u975e\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u3002 \u6ca1\u6709\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba8\u8bba\u8fd9\u4e9b\u53c2\u6570\u7684\u4f5c\u7528\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u56de\u987e\u4e00\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u5c06\u7279\u5b9a\u7684\u952e\u4e0e\u5404\u4e2a\u5f85\u62fc\u63a5\u7684DataFrame\u76f8\u5173\u8054\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 keys \u53c2\u6570\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd4\u56de\u5bf9\u8c61\u7684\u7d22\u5f15\u5177\u6709 \u5c42\u6b21\u7ed3\u6784\u7d22\u5f15 \u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u952e\u9009\u62e9\u6bcf\u4e2a\u5757\uff1a result . loc [ 'y' ] A B C D 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 \u610f\u8bc6\u5230\u8fd9\u4e2a\u529f\u80fd\u662f\u975e\u5e38\u6709\u7528\u7684\u5e76\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\uff0c\u6709\u5173\u6b64\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u53c2\u89c1\u4e0b\u6587\u3002 Note \u503c\u5f97\u6ce8\u610f\u7684\u662f concat() \u4f1a\u5b8c\u6574\u590d\u5236\u6570\u636e\uff08 append() \u65b9\u6cd5\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u4e0d\u65ad\u91cd\u590d\u4f7f\u7528\u6b64\u51fd\u6570\u4f1a\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002\u5982\u679c\u9700\u8981\u5bf9\u591a\u4e2a\u6570\u636e\u96c6\u4f7f\u7528\u8be5\u64cd\u4f5c\uff0c\u8bf7\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 frames = [ process_your_file ( f ) for f in files ] result = pd . concat ( frames )","title":"concat\u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#join","text":"\u5c06\u591a\u4e2aDataFrame\u7c98\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u5982\u4f55\u5904\u7406\u5176\u4ed6\u8f74\uff08\u800c\u4e0d\u662f\u4e32\u8054\u7684\u8f74\uff09\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5b8c\u6210\uff1a \u628a\u5b83\u4eec\u5168\u90e8\u7ed3\u5408\u8d77\u6765 join='outer' \u3002\u8fd9\u662f\u9ed8\u8ba4\u9009\u9879\uff0c\u8fd9\u4e0d\u4f1a\u4e22\u5931\u4fe1\u606f\u3002 \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \u3002 \u9ed8\u8ba4 join='outer' \uff1a df4 = pd . DataFrame ({ 'B' : [ 'B2' , 'B3' , 'B6' , 'B7' ], 'D' : [ 'D2' , 'D3' , 'D6' , 'D7' ], 'F' : [ 'F2' , 'F3' , 'F6' , 'F7' ]}, index = [ 2 , 3 , 7 , 6 ]) result = pd . concat ([ df1 , df4 ], axis = 1 , sort = True , join = \"outer\" ) \u53ea\u4fdd\u7559\u4ea4\u96c6 join='inner' \uff1a result = pd . concat ([ df1 , df4 ], axis = 1 , join = 'inner' ) \u5982\u679c\u53ea\u60f3\u7528\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\uff1a result = pd . concat ([ df1 , df4 ], axis = 1 ) . reindex ( df1 . index ) \u4e5f\u53ef\u4ee5\u5728\u8fde\u63a5\u4e4b\u524d\u5efa\u7acb\u7d22\u5f15\uff1a pd . concat ([ df1 , df4 . reindex ( df1 . index )], axis = 1 ) A B C D B D F 0 A0 B0 C0 D0 NaN NaN NaN 1 A1 B1 C1 D1 NaN NaN NaN 2 A2 B2 C2 D2 B2 D2 F2 3 A3 B3 C3 D3 B3 D3 F3","title":"\u5904\u7406\u5176\u4ed6\u8f74\u7684\u903b\u8f91\uff1ajoin\u53c2\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#append","text":"append() \u662fSeries\u548cDataFrame\u7684 \u5b9e\u4f8b\u65b9\u6cd5 \uff0c\u5b83\u662f concat() \u7684\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c append \u6bd4 concat \u66f4\u65e9\u51fa\u73b0\u3002 append \u65b9\u6cd5\u8ba9Series\u548cDataFrame\u6cbf\u7740\u884c\uff08 axis=0 \uff09\u62fc\u63a5\u5728\u4e00\u8d77\uff1a append ( self , other , ignore_index = False , verify_integrity = False , sort = None ) append \u4e0d\u8981\u6c42\u4e24\u4e2aDataFrame\u7684\u884c\u7d22\u5f15\u6216\u5217\u7d22\u5f15\u4ea4\u96c6\u4e3a\u7a7a\uff1a result = df1 . append ( df4 , sort = False , ignore_index = True ) append \u53ef\u4ee5\u62fc\u63a5\u591a\u4e2a\u5bf9\u8c61\uff1a result = df1 . append ([ df2 , df3 ]) \u4e0elist\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4e0d\u540c\uff0cDataFrame\u5bf9\u8c61\u7684 append() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u526f\u672c\uff0c \u4e0d\u4f1a\u4fee\u6539 df1 \u3002","title":"\u4f7f\u7528append\u62fc\u63a5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#ignore_index","text":"\u5982\u679c DataFrame \u7684\u7d22\u5f15\u6ca1\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528 ignore_index \u53c2\u6570\uff1a result = pd . concat ([ df1 , df4 ], ignore_index = True , sort = False ) DataFrame.append() \u65b9\u6cd5\u4e5f\u6709\u8fd9\u4e2a\u53c2\u6570\uff1a result = df1 . append ( df4 , ignore_index = True , sort = False )","title":"\u5ffd\u7565\u4e32\u8054\u8f74\u4e0a\u7684\u7d22\u5f15\uff1aignore_index"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#seriesdataframe","text":"\u53ef\u4ee5\u62fc\u63a5 Series \u548c DataFrame \u3002\u8be5 Series \u4f1a\u8f6c\u5316\u4e3a DataFrame \u7684\u4e00\u5217\uff0c\u5217\u540d\u662f Series \u7684 name \u3002 s1 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], name = 'X' ) result = pd . concat ([ df1 , s1 ], axis = 1 ) \u5982\u679c Series \u672a\u547d\u540d\uff0c\u5219\u5c06\u8fde\u7eed\u7f16\u53f7\u3002 s2 = pd . Series ([ '_0' , '_1' , '_2' , '_3' ]) result = pd . concat ([ df1 , s2 , s2 , s2 ], axis = 1 ) \u901a\u8fc7 ignore_index=True \u5220\u9664\u539f\u6709\u7d22\u5f15\u6807\u7b7e\u3002 result = pd . concat ([ df1 , s1 ], axis = 1 , ignore_index = True )","title":"\u6df7\u5408\u4e32\u8054Series\u548cDataFrame"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#key","text":"keys \u53c2\u6570\u7684\u4e00\u4e2a\u76f8\u5f53\u666e\u904d\u7684\u7528\u6cd5\u662f\u91cd\u65b0\u6307\u5b9a\u539fDataFrame\u6216Series\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u62fc\u63a5\u540e\u7684DataFrame\u7684\u5217\u7d22\u5f15\uff1a s3 = pd . Series ([ 0 , 1 , 2 , 3 ], name = 'foo' ) s4 = pd . Series ([ 0 , 1 , 2 , 3 ]) s5 = pd . Series ([ 0 , 1 , 4 , 5 ]) pd . concat ([ s3 , s4 , s5 ], axis = 1 ) foo 0 1 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u901a\u8fc7 keys \u53c2\u6570\uff0c\u53ef\u4ee5\u8986\u76d6\u73b0\u6709\u7684\u5217\u540d\u3002 pd . concat ([ s3 , s4 , s5 ], axis = 1 , keys = [ 'red' , 'blue' , 'yellow' ]) red blue yellow 0 0 0 0 1 1 1 1 2 2 2 4 3 3 3 5 \u8ba9\u6211\u4eec\u8003\u8651\u7b2c\u4e00\u4e2a\u793a\u4f8b\u7684\u53d8\u4f53\uff1a result = pd . concat ( frames , keys = [ 'x' , 'y' , 'z' ]) \u8fd8\u53ef\u4ee5\u5c06\u9700\u8981\u62fc\u63a5\u7684DataFrame\u4ee5dict\u5f62\u5f0f\u4f20\u9012\u7ed9 concat \u51fd\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdict\u952e\u5c06\u7528\u4f5c keys \u53c2\u6570\uff08\u9664\u975e\u6307\u5b9a\u4e86\u5176\u4ed6\u952e\uff09\uff1a pieces = { 'x' : df1 , 'y' : df2 , 'z' : df3 } result = pd . concat ( pieces ) result = pd . concat ( pieces , keys = [ 'z' , 'y' ]) \u521b\u5efa\u7684MultiIndex\u7531\u4f20\u9012\u7684\u952e\u548c DataFrame \u884c\u7d22\u5f15\u6784\u9020\uff1a result . index . levels FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \u5982\u679c\u60f3\u6307\u5b9a\u5176\u4ed6\u7ea7\u522b\uff08\u5076\u5c14\u4f1a\u8fd9\u6837\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b levels \u53c2\u6570\uff1a result = pd . concat ( pieces , keys = [ 'x' , 'y' , 'z' ], levels = [[ 'z' , 'y' , 'x' , 'w' ]], names = [ 'group_key' ]) result . index . levels FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]])","title":"key\u53c2\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#dataframe","text":"\u5c3d\u7ba1\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff08\u56e0\u4e3a\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff09\uff0c\u4f46\u662f\u53ef\u4ee5\u5411 append \u4f20\u9012\u4e00\u4e2a Series \u6216dict\u6765\u5c06\u4e00\u884c\u9644\u52a0\u5230 DataFrame \uff1a s2 = pd . Series ([ 'X0' , 'X1' , 'X2' , 'X3' ], index = [ 'A' , 'B' , 'C' , 'D' ]) result = df1 . append ( s2 , ignore_index = True ) \u8fd8\u53ef\u4ee5\u4f20\u9012\u5b57\u5178\u6216\u7cfb\u5217\u7684\u5217\u8868\uff1a dicts = [{ 'A' : 1 , 'B' : 2 , 'C' : 3 , 'X' : 4 }, { 'A' : 5 , 'B' : 6 , 'C' : 7 , 'Y' : 8 }] result = df1 . append ( dicts , ignore_index = True , sort = False )","title":"\u884c\u8ffd\u52a0\u5230 DataFrame"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_1","text":"pandas\u5177\u6709\u5168\u529f\u80fd\u3001\u9ad8\u6027\u80fd\u7684\u5185\u5b58\u8fde\u63a5\u64cd\u4f5c\uff0c\u4e0eSQL\u7b49\u5173\u7cfb\u6570\u636e\u5e93\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6027\u80fd\u6bd4\u5176\u4ed6\u5f00\u6e90\u5b9e\u73b0\uff08\u5982R\u4e2d\u7684 base::merge.data.frame \uff09\u8981\u597d\u5f97\u591a\uff08\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u751a\u81f3\u8d85\u8fc7\u4e00\u4e2a\u6570\u91cf\u7ea7\uff09\u3002\u539f\u56e0\u662f\u4ed4\u7ec6\u7684\u7b97\u6cd5\u8bbe\u8ba1\u548cDataFrame\u7684\u6570\u636e\u7684\u5185\u90e8\u5e03\u5c40\u3002 pandas\u63d0\u4f9b\u51fd\u6570 merge() \uff0c\u4f5c\u4e3aDataFrame\u6216Series\u5bf9\u8c61\u4e4b\u95f4\u6240\u6709\u6807\u51c6\u6570\u636e\u5e93\u62fc\u63a5\u64cd\u4f5c\u7684\u5165\u53e3\u70b9\uff1a pd . merge ( left , right , how = 'inner' , on = None , left_on = None , right_on = None , left_index = False , right_index = False , sort = True , suffixes = ( '_x' , '_y' ), copy = True , indicator = False , validate = None ) left \uff1a\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 right \uff1a\u53e6\u4e00\u4e2aDataFrame\u6216Series\u7684\u5bf9\u8c61\u3002 on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u5b83\u6307\u5b9a\u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\u7684 label \u3002\u5e76\u4e14\u5fc5\u987b\u5728\u4e24\u4e2a DataFrame \u4e2d\u8fd9\u4e9b label \u90fd\u5b58\u5728\u3002\u5982\u679c\u5b83\u4e3a None \uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u4e24\u4e2a DataFrame \u7684\u5217 label \u7684\u4ea4\u96c6\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 left_on/right_on \u5206\u522b\u6307\u5b9a\u4e24\u4fa7 DataFrame \u5bf9\u9f50\u7684\u8fde\u63a5\u952e\u3002 left_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u5de6\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 right_on \uff1a\u4e00\u4e2a label \u6216\u8005 label list \u3002\u6307\u5b9a\u53f3\u8fb9 DataFrame \u7528\u4f5c\u8fde\u63a5\u952e\u7684\u5217\uff0c\u53c2\u8003 on \u3002 left_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u5de6\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 right_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u4f7f\u7528\u53f3\u8fb9\u7684 DataFrame \u7684\u884c\u7684 index value \u6765\u4f5c\u4e3a\u8fde\u63a5\u952e\u6765\u5408\u5e76\u3002 how \uff1a\u5176\u4e00 'left' \uff0c 'right' \uff0c 'outer' \uff0c 'inner' \u3002\u9ed8\u8ba4\u4e3a inner \u3002\u6709\u5173\u6bcf\u79cd\u65b9\u6cd5\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1\u4e0b\u6587\u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5728\u7ed3\u679c\u4e2d\uff0c\u5bf9\u5408\u5e76\u91c7\u7528\u7684\u8fde\u63a5\u952e\u8fdb\u884c\u6392\u5e8f\u3002 suffixes \uff1a\u4e00\u4e2a\u4e8c\u5143\u5e8f\u5217\u3002\u5bf9\u4e8e\u7ed3\u679c\u4e2d\u540c\u540d\u7684\u5217\uff0c\u5b83\u4f1a\u6dfb\u52a0\u524d\u7f00\u6765\u6307\u793a\u5b83\u4eec\u6765\u81ea\u54ea\u4e2a DataFrame \u3002 copy \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u62f7\u8d1d\u57fa\u7840\u6570\u636e\u3002\u5426\u5219\u4e0d\u62f7\u8d1d\u6570\u636e\u3002 indicator \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\u79f0\u4f5c _merge \uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 \u5982\u679c\u4e3a\u5b57\u7b26\u4e32\uff0c\u5219\u7ed3\u679c\u4e2d\u591a\u4e86\u4e00\u5217\uff08\u8be5\u5217\u540d\u5b57\u7531 indicator \u5b57\u7b26\u4e32\u7ed9\u51fa\uff09\uff0c\u8be5\u5217\u7ed9\u51fa\u4e86\u6bcf\u4e00\u884c\u6765\u81ea\u4e8e\u90a3\u4e2a DataFrame \u3002 validate \uff1a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u65e0\u3002\u5982\u679c\u6307\u5b9a\uff0c\u5219\u68c0\u67e5\u5408\u5e76\u662f\u5426\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\u3002 'one_to_one'\u6216'1:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u53f3\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'one_to_many'\u6216'1:m'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u5de6\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_one'\u6216'm:1'\uff1a\u68c0\u67e5\u5408\u5e76\u952e\u5728\u6b63\u786e\u7684\u6570\u636e\u96c6\u4e2d\u662f\u5426\u552f\u4e00\u3002 'many_to_many'\u6216'm:m'\uff1a\u5141\u8bb8\uff0c\u4f46\u4e0d\u8fdb\u884c\u68c0\u67e5\u3002 \u65b0\u529f\u80fd 0.23.0\u7248\u672c\u4e2d\u6dfb\u52a0\u4e86\u6307\u5b9a\u7d22\u5f15\u7ea7\u522b\u7684 on \u3001 left_on \u3001 right_on \u53c2\u6570\u7684\u652f\u6301\u3002\u57280.24.0\u7248\u4e2d\u6dfb\u52a0\u4e86\u5bf9\u88ab\u547d\u540d\u7684Series\u5408\u5e76\u7684\u652f\u6301\u3002 merge \u662fpandas\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3aDataFrame\u5b9e\u4f8b\u65b9\u6cd5 merge() \u4f7f\u7528\uff0c\u8c03\u7528 DataFrame.merge \u65f6\uff0c DataFrame \u88ab\u89c6\u4e3a\u62fc\u63a5\u4e2d\u7684\u5de6\u4fa7\u5bf9\u8c61\u3002 \u76f8\u5173 join() \u65b9\u6cd5\u5728 merge \u5185\u90e8\u7528\u4e8e\u7d22\u5f15\u7d22\u5f15\u8fde\u63a5\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\u548c\u7d22\u5f15\u5217\u8fde\u63a5\u3002\u5982\u679c\u4ec5\u52a0\u5165\u7d22\u5f15\uff0c\u5219\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 DataFrame.join \u6765\u8282\u7701\u4e00\u4e9b\u8f93\u5165\u3002","title":"\u6570\u636e\u5e93\u5f62\u5f0f\u7684\u62fc\u63a5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_2","text":"\u6709\u7ecf\u9a8c\u7684\u5173\u7cfb\u6570\u636e\u5e93\uff08\u5982SQL\uff09\u7528\u6237\u5c06\u719f\u6089\u7528\u4e8e\u63cf\u8ff0\u4e24\u4e2aSQL\u7c7b\u8868\u7ed3\u6784\uff08DataFrame\u5bf9\u8c61\uff09\u4e4b\u95f4\u7684\u8fde\u63a5\u64cd\u4f5c\u7684\u672f\u8bed\u3002\u6709\u51e0\u4e2a\u6848\u4f8b\u9700\u8981\u8003\u8651\uff0c\u8fd9\u4e9b\u6848\u4f8b\u975e\u5e38\u91cd\u8981\uff1a one-to-one \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u662f\u552f\u4e00\u503c\u3002 many-to-one \u8054\u63a5\uff1a\u5176\u4e2d\u4e00\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u662f\u552f\u4e00\u503c\uff0c\u53e6\u4e00\u4e2a\u6709\u91cd\u590d\u503c\u3002 many-to-many \u8054\u63a5\uff1a\u4e24\u4e2aDataFrame\u5bf9\u8c61\u7684\u7ec4\u5408\u952e\u90fd\u6709\u91cd\u590d\u503c\u3002 Caution \u5728\u5217\u4e0a\u8fde\u63a5\u5217\u65f6\uff08\u53ef\u80fd\u662f\u591a\u5bf9\u591a\u8fde\u63a5\uff09\uff0c\u4f20\u9012\u7684 DataFrame \u5bf9\u8c61\u4e0a\u7684\u6240\u6709\u7d22\u5f15 \u90fd\u5c06\u88ab\u4e22\u5f03 \u3002 \u503c\u5f97\u82b1\u4e9b\u65f6\u95f4\u4e86\u89e3\u591a\u5bf9\u591a\u8fde\u63a5\u6848\u4f8b\u7684\u7ed3\u679c\u3002 \u5728SQL/\u6807\u51c6\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u5982\u679c\u952e\u7ec4\u5408\u5728\u4e24\u4e2a\u8868\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u5219\u751f\u6210\u7684\u8868\u5c06\u5177\u6709\u5173\u8054\u6570\u636e\u7684\u7b1b\u5361\u5c14\u79ef\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e00\u4e2a\u7ec4\u5408\u952e\uff0c\u5e76\u4e14\u7ec4\u5408\u952e\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\uff1a left = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key' : [ 'K0' , 'K1' , 'K2' , 'K3' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = 'key' ) \u591a\u4e2a\u7ec4\u5408\u952e\u7684\u793a\u4f8b\uff08\u9ed8\u8ba4 how='inner' \uff09\uff1a left = pd . DataFrame ({ 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ], 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ]}) right = pd . DataFrame ({ 'key1' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K0' ], 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}) result = pd . merge ( left , right , on = [ 'key1' , 'key2' ]) \u5f53\u5de6\u53f3\u4e24\u8fb9\u7684\u7ec4\u5408\u952e\u4e0d\u4e00\u81f4\u65f6\uff0c\u5904\u7406\u884c\u4e3a\u7531 how \u53c2\u6570\u6307\u5b9a\u3002\u4ee5\u4e0b\u662f how \u9009\u9879\u53ca\u5176SQL\u7b49\u6548\u540d\u79f0\u7684\u6458\u8981\uff1a \u5408\u5e76\u65b9\u5f0f SQL\u8fde\u63a5\u540d\u79f0 \u63cf\u8ff0 left LEFT OUTER JOIN \u4ec5\u4fdd\u7559left\u51fa\u73b0\u7684\u7ec4\u5408\u952e right RIGHT OUTER JOIN \u4ec5\u4fdd\u7559right\u51fa\u73b0\u7684\u7ec4\u5408\u952e outer FULL OUTER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u5e76\u96c6 inner INNER JOIN \u4fdd\u7559left\u548cright\u7ec4\u5408\u952e\u7684\u4ea4\u96c6 result = pd . merge ( left , right , how = 'left' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'right' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'outer' , on = [ 'key1' , 'key2' ]) result = pd . merge ( left , right , how = 'inner' , on = [ 'key1' , 'key2' ]) \u8fd9\u662f\u7ec4\u5408\u952e\u5177\u6709\u91cd\u590d\u503c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 2 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) result = pd . merge ( left , right , on = 'B' , how = 'outer' ) Caution \u5728\u91cd\u590d\u952e\u4e0a\u8fdb\u884c\u62fc\u63a5\uff0c\u4f1a\u5bfc\u81f4\u8fd4\u56de\u7684DataFrame\u7684\u51fd\u6570\u662f\u539f\u6765\u4e24\u4e2aDataFrame\u884c\u6570\u7684\u4e58\u79ef\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\u3002\u5982\u679cDataFrame\u5f88\u5927\uff0c\u5e94\u8be5\u5bf9\u91cd\u590d\u952e\u8fdb\u884c\u7ba1\u7406\u3002","title":"\u5408\u5e76\u65b9\u6cd5\u7b80\u4ecb\uff08\u5173\u7cfb\u4ee3\u6570\uff09"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#validate","text":"\u8fd9\u662f 0.21.0\u7248\u6dfb\u52a0\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u4f7f\u7528 validate \u53c2\u6570\u81ea\u52a8\u68c0\u67e5\u7ec4\u5408\u952e\u4e2d\u662f\u5426\u6709\u610f\u5916\u7684\u91cd\u590d\u9879\u3002\u5728\u5408\u5e76\u64cd\u4f5c\u4e4b\u524d\u68c0\u67e5\u952e\u7684\u552f\u4e00\u6027\uff0c\u53ef\u4ee5\u9632\u6b62\u5185\u5b58\u6ea2\u51fa\u3002\u68c0\u67e5\u7ec4\u5408\u952e\u7684\u552f\u4e00\u6027\u4e5f\u662f\u786e\u4fdd\u6570\u636e\u7ed3\u6784\u7b26\u5408\u9884\u671f\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0cright\u4e2d\u7684 B \u5b58\u5728\u91cd\u590d\u7684\u503c\u3002\u7531\u4e8e\u8fd9\u4e0d\u662f validate \u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u4e00\u5bf9\u4e00\u5408\u5e76\uff0c\u56e0\u6b64\u5c06\u5f15\u53d1\u5f02\u5e38\u3002 left = pd . DataFrame ({ 'A' : [ 1 , 2 ], 'B' : [ 1 , 2 ]}) right = pd . DataFrame ({ 'A' : [ 4 , 5 , 6 ], 'B' : [ 2 , 2 , 2 ]}) try : result = pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_one\" ) except Exception as e : print ( \"MergeError:\" , e ) MergeError : Merge keys are not unique in right dataset ; not a one - to - one merge \u5982\u679c\u7528\u6237\u77e5\u9053\u53f3\u8fb9\u7684\u91cd\u590d\u9879\uff0c DataFrame \u4f46\u8981\u786e\u4fdd\u5de6\u8fb9\u7684DataFrame\u4e2d\u6ca1\u6709\u91cd\u590d\u9879\uff0c\u5219\u53ef\u4ee5\u6539\u7528\u8be5 validate='one_to_many' \u53c2\u6570\uff0c\u8fd9\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002 pd . merge ( left , right , on = 'B' , how = 'outer' , validate = \"one_to_many\" ) A_x B A_y 0 1 1 NaN 1 2 2 4.0 2 2 2 5.0 3 2 2 6.0","title":"\u68c0\u67e5\u91cd\u590d\u952e\uff1avalidate"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#indicator","text":"merge() \u63a5\u53d7\u6307\u793a\u7b26\u53c2\u6570 indicator \u3002\u5982\u679c indicator=True \uff0c\u5219\u5c06\u4e00\u4e2a\u540d\u4e3a _merge \uff0cdtype\u4e3aCategorical\u7684\u5217\u6dfb\u52a0\u5230\u8f93\u51faDataFrame\u7684\u672b\u5c3e\uff1a indicator _merge \u503c \u4ec5\u51fa\u73b0\u5728 'left' \u7ec4\u5408\u952e left_only \u4ec5\u51fa\u73b0\u5728 'right' \u7ec4\u5408\u952e right_only \u540c\u65f6\u51fa\u73b0\u5728 'left' \u548c 'right' \u7ec4\u5408\u952e both df1 = pd . DataFrame ({ 'col1' : [ 0 , 1 ], 'col_left' : [ 'a' , 'b' ]}) df2 = pd . DataFrame ({ 'col1' : [ 1 , 2 , 2 ], 'col_right' : [ 2 , 2 , 2 ]}) pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = True ) col1 col_left col_right _merge 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only indicator \u53c2\u6570\u8fd8\u53ef\u4ee5\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6307\u6807\u51fd\u6570\u5c06\u4f7f\u7528\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u7684\u503c\u4f5c\u4e3a \u6307\u6807\u5217 \u7684\u540d\u79f0\u3002 pd . merge ( df1 , df2 , on = 'col1' , how = 'outer' , indicator = 'indicator_column' ) col1 col_left col_right indicator_column 0 0 a NaN left_only 1 1 b 2.0 both 2 2 NaN 2.0 right_only 3 2 NaN 2.0 right_only","title":"\u6307\u793a\u7b26\uff1aindicator"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_3","text":"\u5408\u5e76\u5c06\u4fdd\u7559\u7ec4\u5408\u952e\u7684\u6570\u636e\u7c7b\u578b left = pd . DataFrame ({ 'key' : [ 1 ], 'v1' : [ 10 ]}) print ( left , \" \\n \" ) right = pd . DataFrame ({ 'key' : [ 1 , 2 ], 'v1' : [ 20 , 30 ]}) print ( right ) key v1 0 1 10 key v1 0 1 20 1 2 30 \u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u7ec4\u5408\u952e\uff1a print ( pd . merge ( left , right , how = 'outer' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' ) . dtypes ) key v1 0 1 10 1 1 20 2 2 30 key int64 v1 int64 dtype : object \u5982\u679c\u7f3a\u5c11\u5f15\u5165\u7684\u503c\uff0c\u5219\u751f\u6210\u7684dtype\u5c06\u88ab\u8f6c\u6362\uff1a print ( pd . merge ( left , right , how = 'outer' , on = 'key' ), \" \\n \" ) print ( pd . merge ( left , right , how = 'outer' , on = 'key' ) . dtypes ) key v1_x v1_y 0 1 10 . 0 20 1 2 NaN 30 key int64 v1_x float64 v1_y int64 dtype : object \u5408\u5e76\u5c06\u4fdd\u7559mergands\u7684category\u7c7b\u578b\u3002\u53e6\u8bf7\u53c2\u9605\u5173\u4e8e categoricals \u7684\u90e8\u5206\u3002 left\uff1a from pandas.api.types import CategoricalDtype X = pd . Series ( np . random . choice ([ 'foo' , 'bar' ], size = ( 10 ,))) X = X . astype ( CategoricalDtype ( categories = [ 'foo' , 'bar' ])) left = pd . DataFrame ({ 'X' : X , 'Y' : np . random . choice ([ 'one' , 'two' , 'three' ], size = ( 10 ,))}) print ( left , \" \\n \" ) print ( left . dtypes ) X Y 0 bar one 1 foo three 2 bar three 3 foo one 4 bar one 5 bar three 6 bar one 7 foo three 8 bar two 9 foo three X category Y object dtype : object right\uff1a right = pd . DataFrame ({ 'X' : pd . Series ([ 'foo' , 'bar' ], dtype = CategoricalDtype ([ 'foo' , 'bar' ])), 'Z' : [ 1 , 2 ]}) print ( right , \" \\n \" ) print ( right . dtypes ) X Z 0 foo 1 1 bar 2 X category Z int64 dtype : object \u5408\u5e76\u7ed3\u679c\uff1a result = pd . merge ( left , right , how = 'outer' ) print ( result , \" \\n \" ) print ( result . dtypes ) X Y Z 0 bar one 2 1 bar three 2 2 bar one 2 3 bar three 2 4 bar one 2 5 bar two 2 6 foo three 1 7 foo one 1 8 foo three 1 9 foo three 1 X category Y object Z int64 dtype : object \u6ce8\u610f category \u7c7b\u578b\u5fc5\u987b \u5b8c\u5168\u76f8\u540c \uff0c\u8fd9\u610f\u5473\u7740category\u5bf9\u8c61\u6709\u76f8\u540c\u7684\u7c7b\u522b\u548c\u6709\u5e8f\u5c5e\u6027\u3002\u5426\u5219\uff0ccategory\u7c7b\u578b\u5c06\u88ab\u8f6c\u6362\u6210object\u7c7b\u578b\u3002 \u6ce8\u610f \u4e0eobject\u6570\u636e\u7c7b\u578b\u5408\u5e76\u76f8\u6bd4\uff0c\u5728\u76f8\u540c\u7684category\u6570\u636e\u7c7b\u578b\u4e0a\u8fdb\u884c\u5408\u5e76\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002","title":"\u5408\u5e76\u65f6\u6570\u636e\u7c7b\u578b\u7684\u8f6c\u6362"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#dataframejoin","text":"\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = [ 'K0' , 'K1' , 'K2' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D2' , 'D3' ]}, index = [ 'K0' , 'K2' , 'K3' ]) result = left . join ( right ) result = left . join ( right , how = 'outer' ) \u4e0e\u4e0a\u8ff0\u76f8\u540c\uff0c\u4f46\u5e26\u6709 how='inner' \uff1a result = left . join ( right , how = 'inner' ) \u6b64\u5904\u7684\u6570\u636e\u5bf9\u9f50\u5728\u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09\u4e0a\u3002\u4f7f\u7528 merge \u6307\u793a\u5176\u4f7f\u7528\u7d22\u5f15\u7684\u9644\u52a0\u53c2\u6570\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u884c\u4e3a\uff1a result = pd . merge ( left , right , left_index = True , right_index = True , how = 'outer' ) result = pd . merge ( left , right , left_index = True , right_index = True , how = 'inner' )","title":"DataFrame.join()"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#join_1","text":"join() \u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 on \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u6216\u591a\u4e2a\u5217\u540d\uff0c\u5b83\u6307\u5b9a\u4f20\u9012\u7684DataFrame\u5c06\u5728\u539fDataFrame\u4e2d\u7684\u8be5\u5217\u4e0a\u5bf9\u9f50\u3002\u5373\u8fd9\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u5b8c\u5168\u7b49\u4ef7\uff1a left . join ( right , on = key_or_keys ) pd . merge ( left , right , left_on = key_or_keys , right_index = True , how = 'left' , sort = False ) \u663e\u7136\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u79cd\u66f4\u65b9\u4fbf\u7684\u5f62\u5f0f\u3002\u5bf9\u4e8emany-to-one\u62fc\u63a5\uff08\u5176\u4e2d\u4e00\u4e2aDataFrame\u7684\u7d22\u5f15\u662f\u7ec4\u5408\u952e\uff09\uff0c\u4f7f\u7528 join \u53ef\u80fd\u4f1a\u66f4\u65b9\u4fbf\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' ], 'D' : [ 'D0' , 'D1' ]}, index = [ 'K0' , 'K1' ]) result = left . join ( right , on = 'key' ) result = pd . merge ( left , right , left_on = 'key' , right_index = True , how = 'left' , sort = False ); \u5982\u679c\u7ec4\u5408\u952e\u6709\u591a\u4e2a\uff0c\u4f20\u9012\u7684DataFrame\u5fc5\u987b\u5177\u6709 MultiIndex \uff1a left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key1' : [ 'K0' , 'K0' , 'K1' , 'K2' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}) index = pd . MultiIndex . from_tuples ([( 'K0' , 'K0' ), ( 'K1' , 'K0' ), ( 'K2' , 'K0' ), ( 'K2' , 'K1' )]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) \u73b0\u5728\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e24\u4e2a\u7ec4\u5408\u952e\u6765\u8fdb\u884c\u62fc\u63a5\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ]) \u9ed8\u8ba4\u7684 DataFrame.join \u662f\u6267\u884c\u5de6\u8054\u63a5\uff08\u5bf9\u4e8eExcel\u7528\u6237\uff0c\u672c\u8d28\u4e0a\u662f\u201c VLOOKUP\u201d\u64cd\u4f5c\uff09\uff0c\u8be5\u8054\u63a5\u4ec5\u4f7f\u7528\u5728\u8c03\u7528DataFrame\u4e2d\u627e\u5230\u7684\u952e\u3002\u5176\u4ed6\u8054\u63a5\u7c7b\u578b\uff08\u4f8b\u5982\u5185\u90e8\u8054\u63a5\uff09\u4e5f\u53ef\u4ee5\u8f7b\u677e\u6267\u884c\uff1a result = left . join ( right , on = [ 'key1' , 'key2' ], how = 'inner' ) \u5982\u60a8\u6240\u89c1\uff0c\u8fd9\u5c06\u5220\u9664\u6240\u6709\u4e0d\u5339\u914d\u7684\u884c\u3002","title":"\u6309\u7ec4\u5408\u952e\u5217\u548c\u7d22\u5f15\u62fc\u63a5\uff1ajoin"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#join_2","text":"\u53ef\u4ee5\u5c06\u5355\u5c42\u7d22\u5f15DataFrame\u4e0e\u591a\u5c42\u7d22\u5f15DataFrame\u7684 \u4e00\u4e2a\u7ea7\u522b \u8fde\u63a5\u8d77\u6765\u3002\u8be5\u7ea7\u522b\u5c06\u4e0e\u5355\u7d22\u5f15DataFrame\u7684\u7d22\u5f15\u540d\u79f0\u548c\u591a\u7d22\u5f15DataFrame\u7684\u7ea7\u522b\u540d\u79f0\u76f8\u5339\u914d left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = pd . Index ([ 'K0' , 'K1' , 'K2' ], name = 'key' )) index = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = index ) result = left . join ( right , how = 'inner' ) \u4e0b\u9762\u7684\u51fd\u6570\u548c\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u7b49\u6548\u7684\uff0c\u4f46 pd.merge \u7684\u4fe1\u606f\u66f4\u8be6\u7ec6\uff0c\u5b58\u50a8\u6548\u7387\u66f4\u9ad8/\u66f4\u5feb\u3002 result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'Y' ])","title":"\u6309\u5355\u5c42\u7d22\u5f15\u548c\u591a\u5c42\u7d22\u5f15\u62fc\u63a5\uff1ajoin"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#multiindexesjoin","text":"\u53ea\u8981\u5728\u8fde\u63a5\u4e2d\u5b8c\u5168\u4f7f\u7528\u4e86\u53f3\u53c2\u6570\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u8be5\u53c2\u6570\u662f\u5de6\u53c2\u6570\u4e2d\u7d22\u5f15\u7684\u5b50\u96c6\uff0c\u5c31\u53ef\u4ee5\u7528\u6709\u9650\u7684\u65b9\u5f0f\u6765\u652f\u6301\u5b83\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a leftindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' ), [ 1 , 2 ]], names = [ 'abc' , 'xy' , 'num' ]) left = pd . DataFrame ({ 'v1' : range ( 12 )}, index = leftindex ) print ( left , \" \\n \" ) rightindex = pd . MultiIndex . from_product ([ list ( 'abc' ), list ( 'xy' )], names = [ 'abc' , 'xy' ]) right = pd . DataFrame ({ 'v2' : [ 100 * i for i in range ( 1 , 7 )]}, index = rightindex ) print ( right , \" \\n \" ) left . join ( right , on = [ 'abc' , 'xy' ], how = 'inner' ) v1 abc xy num a x 1 0 2 1 y 1 2 2 3 b x 1 4 2 5 y 1 6 2 7 c x 1 8 2 9 y 1 10 2 11 v2 abc xy a x 100 y 200 b x 300 y 400 c x 500 y 600 v1 v2 abc xy num a x 1 0 100 2 1 100 y 1 2 200 2 3 200 b x 1 4 300 2 5 300 y 1 6 400 2 7 400 c x 1 8 500 2 9 500 y 1 10 600 2 11 600 \u5982\u679c\u4e0d\u6ee1\u8db3\u8be5\u6761\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5177\u6709\u4e24\u4e2a\u591a\u7d22\u5f15\u7684\u8054\u63a5\u3002 leftindex = pd . MultiIndex . from_tuples ([( 'K0' , 'X0' ), ( 'K0' , 'X1' ), ( 'K1' , 'X2' )], names = [ 'key' , 'X' ]) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' ], 'B' : [ 'B0' , 'B1' , 'B2' ]}, index = leftindex ) rightindex = pd . MultiIndex . from_tuples ([( 'K0' , 'Y0' ), ( 'K1' , 'Y1' ), ( 'K2' , 'Y2' ), ( 'K2' , 'Y3' )], names = [ 'key' , 'Y' ]) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ]}, index = rightindex ) result = pd . merge ( left . reset_index (), right . reset_index (), on = [ 'key' ], how = 'inner' ) . set_index ([ 'key' , 'X' , 'Y' ])","title":"\u6309MultiIndexes\u62fc\u63a5\uff1ajoin"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_4","text":"\u8fd9\u662f 0.23 \u7248\u4e2d\u6dfb\u52a0\u7684\u529f\u80fd\u3002 on \u3001 left_on \u548c right_on \u53c2\u6570\u53ef\u4ee5\u5f15\u7528\u5217\u540d\u6216\u7d22\u5f15\u7ea7\u540d\u79f0\u3002\u8fd9\u5141\u8bb8\u5728\u7d22\u5f15\u548c\u5217\u7684\u7ec4\u5408\u4e0a\u5408\u5e76DataFrame\u5b9e\u4f8b\uff0c\u800c\u4e0d\u5fc5\u91cd\u7f6e\u7d22\u5f15\uff1a left_index = pd . Index ([ 'K0' , 'K0' , 'K1' , 'K2' ], name = 'key1' ) left = pd . DataFrame ({ 'A' : [ 'A0' , 'A1' , 'A2' , 'A3' ], 'B' : [ 'B0' , 'B1' , 'B2' , 'B3' ], 'key2' : [ 'K0' , 'K1' , 'K0' , 'K1' ]}, index = left_index ) right_index = pd . Index ([ 'K0' , 'K1' , 'K2' , 'K2' ], name = 'key1' ) right = pd . DataFrame ({ 'C' : [ 'C0' , 'C1' , 'C2' , 'C3' ], 'D' : [ 'D0' , 'D1' , 'D2' , 'D3' ], 'key2' : [ 'K0' , 'K0' , 'K0' , 'K1' ]}, index = right_index ) result = left . merge ( right , on = [ 'key1' , 'key2' ])","title":"\u6309\u7167\u5217\u548c\u7d22\u5f15\u5408\u5e76"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_5","text":"merge \u51fd\u6570\u7684 suffixes \u53c2\u6570\u63a5\u53d7\u5b57\u7b26\u4e32\u5217\u8868\u7684\u5143\u7ec4\uff0c\u4ee5\u9644\u52a0\u5230\u8f93\u5165DataFrame\u4e2d\u91cd\u53e0\u7684\u5217\u540d\u4ee5\u6d88\u9664\u7ed3\u679c\u5217\u7684\u6b67\u4e49\uff1a left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K2' ], 'v' : [ 1 , 2 , 3 ]}) right = pd . DataFrame ({ 'k' : [ 'K0' , 'K0' , 'K3' ], 'v' : [ 4 , 5 , 6 ]}) result = pd . merge ( left , right , on = 'k' ) result = pd . merge ( left , right , on = 'k' , suffixes = [ '_l' , '_r' ]) DataFrame.join() \u5177\u6709 lsuffix \u548c rsuffix \u884c\u4e3a\u7c7b\u4f3c\u7684\u53c2\u6570\u3002 left = left . set_index ( 'k' ) right = right . set_index ( 'k' ) result = left . join ( right , lsuffix = '_l' , rsuffix = '_r' )","title":"\u503c\u5217\u91cd\u53e0"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#dataframes","text":"DataFrames \u4e5f\u53ef\u4ee5\u4f20\u9012\u7684\u5217\u8868\u6216\u5143\u7ec4\u4ee5 join() \u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u5b83\u4eec\u7684\u7d22\u5f15\u4e0a\u3002 right2 = pd . DataFrame ({ 'v' : [ 7 , 8 , 9 ]}, index = [ 'K1' , 'K1' , 'K2' ]) result = left . join ([ right , right2 ])","title":"\u62fc\u63a5\u591a\u4e2aDataFrames"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_6","text":"\u53e6\u4e00\u4e2a\u76f8\u5f53\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u6709\u4e24\u4e2a\u7d22\u5f15\u5b58\u5728\u4ea4\u96c6\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u60f3\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u586b\u8865\u7f3a\u5931\u503c\u3002\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a df1 = pd . DataFrame ([[ np . nan , 3. , 5. ], [ - 4.6 , np . nan , np . nan ], [ np . nan , 7. , np . nan ]]) df2 = pd . DataFrame ([[ - 42.6 , np . nan , - 8.2 ], [ - 5. , 1.6 , 4 ]], index = [ 1 , 2 ]) combine_first() \u65b9\u6cd5\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff1a result = df1 . combine_first ( df2 ) \u8bf7\u6ce8\u610f\uff0c combine_first \u8fd4\u56de\u526f\u672c\uff0c\u800c update() \u5219\u4f1a\u4fee\u6539\u539f\u5bf9\u8c61\uff1a df1 . update ( df2 )","title":"\u6309\u7d22\u5f15\u586b\u8865\u7f3a\u5931\u503c"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_7","text":"","title":"\u5408\u5e76\u65f6\u95f4\u5e8f\u5217"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#_8","text":"merge_ordered() \u51fd\u6570\u5141\u8bb8\u7ec4\u5408\u65f6\u95f4\u5e8f\u5217\u548c\u5176\u4ed6\u6709\u5e8f\u6570\u636e\u3002 merge_ordered ( left , right , on = None , left_on = None , right_on = None , left_by = None , right_by = None , fill_method = None , suffixes = ( \"_x\" , \"_y\" ), how = \"outer\" , ) left_by : Group left DataFrame by group columns and merge piece by piece with right DataFrame left = pd . DataFrame ({ 'k' : [ 'K0' , 'K1' , 'K1' , 'K2' ], 'lv' : [ 1 , 2 , 3 , 4 ], 's' : [ 'a' , 'b' , 'c' , 'd' ]}) right = pd . DataFrame ({ 'k' : [ 'K1' , 'K2' , 'K4' ], 'rv' : [ 1 , 2 , 3 ]}) print ( left , \" \\n \" ) print ( right ) pd . merge_ordered ( left , right , fill_method = None , left_by = 's' ) k lv s 0 K0 1 a 1 K1 2 b 2 K1 3 c 3 K2 4 d k rv 0 K1 1 1 K2 2 2 K4 3 k lv s rv 0 K0 1.0 a NaN 1 K1 NaN a 1.0 2 K2 NaN a 2.0 3 K4 NaN a 3.0 4 K1 2.0 b 1.0 5 K2 NaN b 2.0 6 K4 NaN b 3.0 7 K1 3.0 c 1.0 8 K2 NaN c 2.0 9 K4 NaN c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 NaN d 3.0 \u5b83\u5177\u6709\u4e00\u4e2a\u53ef\u9009 fill_method \u5173\u952e\u5b57\u6765\u586b\u5145\u4e22\u5931\u7684\u6570\u636e\uff1a # \u524d\u5411\u586b\u5145\uff1a\u540e\u9762\u7684\u7f3a\u5931\u503c\u7528\u524d\u9762\u7684\u6570\u5b57\u586b\u5145 pd . merge_ordered ( left , right , fill_method = \"ffill\" , left_by = 's' ) k lv s rv 0 K0 1.0 a NaN 1 K1 1.0 a 1.0 2 K2 1.0 a 2.0 3 K4 1.0 a 3.0 4 K1 2.0 b 1.0 5 K2 2.0 b 2.0 6 K4 2.0 b 3.0 7 K1 3.0 c 1.0 8 K2 3.0 c 2.0 9 K4 3.0 c 3.0 10 K1 NaN d 1.0 11 K2 4.0 d 2.0 12 K4 4.0 d 3.0","title":"\u5408\u5e76\u6709\u5e8f\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.6.%E6%8B%BC%E6%8E%A5.html#asof","text":"merge_asof() \u7c7b\u4f3c\u4e8e\u6709\u5e8f\u5de6\u8054\u63a5\uff0c\u53ea\u662f\u6211\u4eec\u5339\u914d\u6700\u8fd1\u7684\u952e\u800c\u4e0d\u662f\u76f8\u7b49\u7684\u952e\u3002\u5bf9\u4e8e\u5de6\u6570\u636e\u6846\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u9009\u62e9\u53f3\u6570\u636e\u6846\u4e2d\u7684\u6700\u540e\u4e00\u884c\uff0c\u8be5\u884c\u7684on\u952e\u5c0f\u4e8elefs\u952e\u3002\u4e24\u4e2a\u6570\u636e\u5e27\u90fd\u5fc5\u987b\u6309\u952e\u6392\u5e8f\u3002 \u53ef\u9009\u5730\uff0casof\u5408\u5e76\u53ef\u4ee5\u6267\u884c\u9010\u7ec4\u5408\u5e76\u3002\u9664\u4e86on\u952e\u4e0a\u6700\u63a5\u8fd1\u7684\u5339\u914d\u4e4b\u5916\uff0c\u5b83\u4e0eby\u952e\u7684\u5339\u914d\u76f8\u540c merge_asof ( left , right , on = None , left_on = None , right_on = None , left_index = False , right_index = False , by = None , left_by = None , right_by = None , suffixes = ( \"_x\" , \"_y\" ), tolerance = None , allow_exact_matches = True , direction = \"backward\" , ) \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u6709 trades \u548c quotes \uff0c\u6211\u4eec\u60f3\u5408\u5e76\u5b83\u4eec trades = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.038' , '20160525 13:30:00.048' , '20160525 13:30:00.048' , '20160525 13:30:00.048' ]), 'ticker' : [ 'MSFT' , 'MSFT' , 'GOOG' , 'GOOG' , 'AAPL' ], 'price' : [ 51.95 , 51.95 , 720.77 , 720.92 , 98.00 ], 'quantity' : [ 75 , 155 , 100 , 100 , 100 ]}, columns = [ 'time' , 'ticker' , 'price' , 'quantity' ]) quotes = pd . DataFrame ({ 'time' : pd . to_datetime ([ '20160525 13:30:00.023' , '20160525 13:30:00.023' , '20160525 13:30:00.030' , '20160525 13:30:00.041' , '20160525 13:30:00.048' , '20160525 13:30:00.049' , '20160525 13:30:00.072' , '20160525 13:30:00.075' ]), 'ticker' : [ 'GOOG' , 'MSFT' , 'MSFT' , 'MSFT' , 'GOOG' , 'AAPL' , 'GOOG' , 'MSFT' ], 'bid' : [ 720.50 , 51.95 , 51.97 , 51.99 , 720.50 , 97.99 , 720.50 , 52.01 ], 'ask' : [ 720.93 , 51.96 , 51.98 , 52.00 , 720.93 , 98.01 , 720.88 , 52.03 ]}, columns = [ 'time' , 'ticker' , 'bid' , 'ask' ]) print ( trades , \" \\n \" ) print ( quotes ) time ticker price quantity 0 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 75 1 2016 - 05 - 25 13 : 30 : 00 . 038 MSFT 51 . 95 155 2 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 77 100 3 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 92 100 4 2016 - 05 - 25 13 : 30 : 00 . 048 AAPL 98 . 00 100 time ticker bid ask 0 2016 - 05 - 25 13 : 30 : 00 . 023 GOOG 720 . 50 720 . 93 1 2016 - 05 - 25 13 : 30 : 00 . 023 MSFT 51 . 95 51 . 96 2 2016 - 05 - 25 13 : 30 : 00 . 030 MSFT 51 . 97 51 . 98 3 2016 - 05 - 25 13 : 30 : 00 . 041 MSFT 51 . 99 52 . 00 4 2016 - 05 - 25 13 : 30 : 00 . 048 GOOG 720 . 50 720 . 93 5 2016 - 05 - 25 13 : 30 : 00 . 049 AAPL 97 . 99 98 . 01 6 2016 - 05 - 25 13 : 30 : 00 . 072 GOOG 720 . 50 720 . 88 7 2016 - 05 - 25 13 : 30 : 00 . 075 MSFT 52 . 01 52 . 03 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u91c7\u7528\u7684\u662fquotes\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u76842\u6beb\u79d2\u5185\u5408\u5e76\uff1a pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '2ms' )) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 51.95 51.96 1 2016-05-25 13:30:00.038 MSFT 51.95 155 NaN NaN 2 2016-05-25 13:30:00.048 GOOG 720.77 100 720.50 720.93 3 2016-05-25 13:30:00.048 GOOG 720.92 100 720.50 720.93 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN \u6211\u4eec\u53ea\u5728quote \u65f6\u95f4\u548ctrade \u65f6\u95f4\u4e4b\u95f4\u768410\u6beb\u79d2\u5185\u5408\u5e76\uff0c\u5e76\u4e14\u4e0d\u5305\u62ec\u7cbe\u786e\u5339\u914d\u3002\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6211\u4eec\u6392\u9664\u4e86\uff08quotes\u7684\uff09\u5b8c\u5168\u5339\u914d\u9879\uff0c\u4f46\u4ee5\u524d\u7684quotes\u786e\u5b9e\u4f1a\u4f20\u64ad\u5230\u90a3\u4e2a\u65f6\u95f4\u70b9\u3002 pd . merge_asof ( trades , quotes , on = 'time' , by = 'ticker' , tolerance = pd . Timedelta ( '10ms' ), allow_exact_matches = False ) time ticker price quantity bid ask 0 2016-05-25 13:30:00.023 MSFT 51.95 75 NaN NaN 1 2016-05-25 13:30:00.038 MSFT 51.95 155 51.97 51.98 2 2016-05-25 13:30:00.048 GOOG 720.77 100 NaN NaN 3 2016-05-25 13:30:00.048 GOOG 720.92 100 NaN NaN 4 2016-05-25 13:30:00.048 AAPL 98.00 100 NaN NaN","title":"\u5408\u5e76ASOF"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html","text":"from Toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 pandas version: 1.0.1 numpy version: 1.18.1 \u91cd\u5851\u548c\u6570\u636e\u900f\u89c6\u8868 pivot DataFrame.pivot() \u65b9\u6cd5\u91cd\u6392\u6570\u636e\u3002\u5b83\u662f\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u5b83\u4f7f\u7528 set_index \u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u7136\u540e\u4f7f\u7528 unstack \u5c06\u884c\u7d22\u5f15\u8f6c\u4e3a\u5217\u7d22\u5f15\u3002 DataFrame . pivot ( index = None , columns = None , values = None ) index \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6307\u5b9a\u4e86\u4e00\u4e2a column name \uff0c\u7528\u8be5\u5217\u6570\u636e\u6765 set_index \uff08\u5c06\u8be5\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u5220\u9664\u4e86\u539f\u6765\u7684\u65e7\u7684\u884c\u7d22\u5f15\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4e0d\u6267\u884c set_index columns \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684 columns labels \u3002 \u5b9e\u9645\u4e0a\u5bf9 index,clumns \u6307\u5b9a\u7684\u5217\u6570\u636e\u5747 set_index\uff0c\u7136\u540e\u4ec5\u5bf9 columns \u5bf9\u5e94\u7684\u5217\u6570\u636e unstack values \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u5269\u4f59\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002 \u521b\u5efa\u793a\u4f8bDataFrame\uff1a import pandas.util.testing as tm tm . N = 3 def unpivot ( frame ): N , K = frame . shape data = { 'value' : frame . to_numpy () . ravel ( 'F' ), 'variable' : np . asarray ( frame . columns ) . repeat ( N ), 'date' : np . tile ( np . asarray ( frame . index ), K )} return pd . DataFrame ( data , columns = [ 'date' , 'variable' , 'value' ]) df = unpivot ( tm . makeTimeDataFrame ()) df . \\ setup_m . py : 1 : FutureWarning : pandas . util . testing is deprecated . Use the functions in the public API at pandas . testing instead . import os date variable value 0 2000 - 01 - 03 A - 0 . 583727 1 2000 - 01 - 04 A 0 . 340234 2 2000 - 01 - 05 A 0 . 410428 3 2000 - 01 - 06 A - 0 . 252046 4 2000 - 01 - 07 A - 0 . 293375 .. ... ... ... 115 2000 - 02 - 07 D - 0 . 028772 116 2000 - 02 - 08 D 0 . 289038 117 2000 - 02 - 09 D - 0 . 533676 118 2000 - 02 - 10 D 1 . 591452 119 2000 - 02 - 11 D - 0 . 887297 [ 120 rows x 3 columns ] \u8981\u9009\u62e9\u6240\u6709 variable=A \u7684\u503c\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a df [ df [ 'variable' ] == 'A' ] date variable value 0 2000-01-03 A -0.583727 1 2000-01-04 A 0.340234 2 2000-01-05 A 0.410428 3 2000-01-06 A -0.252046 4 2000-01-07 A -0.293375 5 2000-01-10 A -0.421153 6 2000-01-11 A 0.681974 7 2000-01-12 A -0.017518 8 2000-01-13 A -1.209101 9 2000-01-14 A -1.213280 10 2000-01-17 A -2.155664 11 2000-01-18 A -1.923265 12 2000-01-19 A 1.530217 13 2000-01-20 A 1.262092 14 2000-01-21 A -0.238558 15 2000-01-24 A 0.516102 16 2000-01-25 A 1.000411 17 2000-01-26 A -1.648478 18 2000-01-27 A -0.129441 19 2000-01-28 A 0.598608 20 2000-01-31 A -0.521135 21 2000-02-01 A -0.006746 22 2000-02-02 A 0.921157 23 2000-02-03 A 1.057643 24 2000-02-04 A 0.487059 25 2000-02-07 A 1.385754 26 2000-02-08 A 0.023419 27 2000-02-09 A 0.204676 28 2000-02-10 A -1.057568 29 2000-02-11 A -0.517982 \u4f46\u662f\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5bf9\u53d8\u91cf\u8fdb\u884c\u65f6\u95f4\u5e8f\u5217\u8fd0\u7b97\uff0c\u66f4\u597d\u7684\u8868\u793a\u65b9\u6cd5\u662f\u5217\u662f\u552f\u4e00\u7684\u53d8\u91cf\uff0c\u884c\u7d22\u5f15\u4f5c\u4e3a\u65e5\u671f\u3002\u4e3a\u4e86\u5c06\u6570\u636e\u91cd\u5851\u4e3a\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 DataFrame.pivot() \u65b9\u6cd5\uff08\u4e5f\u5b9e\u73b0\u4e3a\u9876\u7ea7\u51fd\u6570 pivot() \uff09\uff1a df . pivot ( index = 'date' , columns = 'variable' , values = 'value' ) variable A B C D date 2000-01-03 -0.583727 -1.441919 1.200268 -0.471893 2000-01-04 0.340234 3.255920 0.794416 1.861937 2000-01-05 0.410428 0.109927 -0.965633 1.876427 2000-01-06 -0.252046 0.907018 -0.796725 1.479889 2000-01-07 -0.293375 1.136764 2.259704 0.225658 2000-01-10 -0.421153 1.698767 -1.016906 0.793135 2000-01-11 0.681974 1.125952 0.125062 0.716256 2000-01-12 -0.017518 0.244659 -1.160187 1.429645 2000-01-13 -1.209101 0.023551 0.607597 0.886414 2000-01-14 -1.213280 -1.026138 0.638492 -0.893937 2000-01-17 -2.155664 -2.277503 1.367296 0.257675 2000-01-18 -1.923265 0.250619 -0.304361 -1.435702 2000-01-19 1.530217 -0.870065 1.947222 -0.113143 2000-01-20 1.262092 -1.923809 0.029966 2.391130 2000-01-21 -0.238558 0.391937 0.318018 0.158791 2000-01-24 0.516102 -0.072348 -0.672369 0.588425 2000-01-25 1.000411 0.994835 -0.150023 0.064140 2000-01-26 -1.648478 -1.088900 -0.534931 -1.912055 2000-01-27 -0.129441 -0.523823 0.347119 1.164735 2000-01-28 0.598608 0.314038 -0.190196 0.081086 2000-01-31 -0.521135 -0.523132 1.888897 -0.196702 2000-02-01 -0.006746 0.478018 0.152105 -0.429027 2000-02-02 0.921157 0.232220 -0.181593 2.401682 2000-02-03 1.057643 0.164677 0.807376 1.563860 2000-02-04 0.487059 0.543105 -0.576517 -0.092737 2000-02-07 1.385754 -0.021569 0.737789 -0.028772 2000-02-08 0.023419 -0.117981 -1.510365 0.289038 2000-02-09 0.204676 -0.959515 -0.927897 -0.533676 2000-02-10 -1.057568 -0.808019 -0.222857 1.591452 2000-02-11 -0.517982 -0.290321 -1.055313 -0.887297 \u5982\u679c\u7701\u7565 values \u53c2\u6570\uff0c\u5e76\u4e14\u8f93\u5165 DataFrame \u5177\u6709\u591a\u4e8e\u4e00\u5217\u7684\u503c\uff0c\u5219\u7ed3\u679cDataFrame\u5c06\u5177\u6709\u591a\u5c42\u6b21\u5217\u7d22\u5f15\uff1a df [ 'value2' ] = df [ 'value' ] * 2 print ( df ) pivoted = df . pivot ( index = 'date' , columns = 'variable' ) pivoted date variable value value2 0 2000 - 01 - 03 A - 0 . 583727 - 1 . 167454 1 2000 - 01 - 04 A 0 . 340234 0 . 680468 2 2000 - 01 - 05 A 0 . 410428 0 . 820856 3 2000 - 01 - 06 A - 0 . 252046 - 0 . 504093 4 2000 - 01 - 07 A - 0 . 293375 - 0 . 586751 .. ... ... ... ... 115 2000 - 02 - 07 D - 0 . 028772 - 0 . 057545 116 2000 - 02 - 08 D 0 . 289038 0 . 578076 117 2000 - 02 - 09 D - 0 . 533676 - 1 . 067353 118 2000 - 02 - 10 D 1 . 591452 3 . 182904 119 2000 - 02 - 11 D - 0 . 887297 - 1 . 774595 [ 120 rows x 4 columns ] value value2 variable A B C D A B C D date 2000-01-03 -0.583727 -1.441919 1.200268 -0.471893 -1.167454 -2.883839 2.400536 -0.943787 2000-01-04 0.340234 3.255920 0.794416 1.861937 0.680468 6.511839 1.588832 3.723873 2000-01-05 0.410428 0.109927 -0.965633 1.876427 0.820856 0.219854 -1.931265 3.752855 2000-01-06 -0.252046 0.907018 -0.796725 1.479889 -0.504093 1.814035 -1.593450 2.959778 2000-01-07 -0.293375 1.136764 2.259704 0.225658 -0.586751 2.273528 4.519408 0.451316 2000-01-10 -0.421153 1.698767 -1.016906 0.793135 -0.842305 3.397533 -2.033811 1.586270 2000-01-11 0.681974 1.125952 0.125062 0.716256 1.363947 2.251905 0.250123 1.432512 2000-01-12 -0.017518 0.244659 -1.160187 1.429645 -0.035037 0.489317 -2.320373 2.859291 2000-01-13 -1.209101 0.023551 0.607597 0.886414 -2.418202 0.047103 1.215195 1.772829 2000-01-14 -1.213280 -1.026138 0.638492 -0.893937 -2.426560 -2.052275 1.276983 -1.787874 2000-01-17 -2.155664 -2.277503 1.367296 0.257675 -4.311328 -4.555006 2.734592 0.515350 2000-01-18 -1.923265 0.250619 -0.304361 -1.435702 -3.846530 0.501238 -0.608722 -2.871404 2000-01-19 1.530217 -0.870065 1.947222 -0.113143 3.060434 -1.740130 3.894444 -0.226287 2000-01-20 1.262092 -1.923809 0.029966 2.391130 2.524184 -3.847617 0.059932 4.782259 2000-01-21 -0.238558 0.391937 0.318018 0.158791 -0.477116 0.783873 0.636036 0.317583 2000-01-24 0.516102 -0.072348 -0.672369 0.588425 1.032204 -0.144695 -1.344737 1.176851 2000-01-25 1.000411 0.994835 -0.150023 0.064140 2.000822 1.989669 -0.300046 0.128280 2000-01-26 -1.648478 -1.088900 -0.534931 -1.912055 -3.296956 -2.177800 -1.069863 -3.824110 2000-01-27 -0.129441 -0.523823 0.347119 1.164735 -0.258883 -1.047645 0.694239 2.329469 2000-01-28 0.598608 0.314038 -0.190196 0.081086 1.197217 0.628076 -0.380393 0.162171 2000-01-31 -0.521135 -0.523132 1.888897 -0.196702 -1.042271 -1.046265 3.777794 -0.393404 2000-02-01 -0.006746 0.478018 0.152105 -0.429027 -0.013491 0.956036 0.304209 -0.858054 2000-02-02 0.921157 0.232220 -0.181593 2.401682 1.842315 0.464441 -0.363185 4.803363 2000-02-03 1.057643 0.164677 0.807376 1.563860 2.115286 0.329354 1.614752 3.127721 2000-02-04 0.487059 0.543105 -0.576517 -0.092737 0.974117 1.086209 -1.153034 -0.185475 2000-02-07 1.385754 -0.021569 0.737789 -0.028772 2.771507 -0.043137 1.475578 -0.057545 2000-02-08 0.023419 -0.117981 -1.510365 0.289038 0.046838 -0.235962 -3.020731 0.578076 2000-02-09 0.204676 -0.959515 -0.927897 -0.533676 0.409352 -1.919029 -1.855794 -1.067353 2000-02-10 -1.057568 -0.808019 -0.222857 1.591452 -2.115135 -1.616039 -0.445714 3.182904 2000-02-11 -0.517982 -0.290321 -1.055313 -0.887297 -1.035964 -0.580642 -2.110625 -1.774595 \u6ce8\u610f \u5982\u679c\u7d22\u5f15\u5305\u542b\u91cd\u590d\u9879\uff0c pivot() \u5c06\u51fa\u9519\uff0c\u65e0\u6cd5\u91cd\u5851\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 pivot_table() \uff0c\u5b83\u662fpivot\u7684\u6cdb\u5316\uff0c\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u7d22\u5f15/\u5217\u5bf9\u7684\u91cd\u590d\u503c\u3002 stack DataFrame.stack() \u65b9\u6cd5\u5c06\u6570\u636e\u7684\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.stack(level=-1, dropna=True) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u5217\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15 dropna \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5982\u679c\u7ed3\u679c\u4e2d\u67d0\u884c\u5168\u4e3a NaN \uff0c\u5219\u629b\u5f03\u8be5\u884c \u65cb\u8f6c\u65f6\uff0c\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\uff0c\u65b0\u7684\u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15\uff0c\u6700\u5185\u5c42\u7684\u884c\u7d22\u5f15\u5c31\u662f\u539f\u6765\u7684\u5217\u7d22\u5f15\u3002 \u6700\u6e05\u6670\u7684\u89e3\u91ca\u65b9\u5f0f\u662f\u901a\u8fc7\u793a\u4f8b\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u6570\u636e\uff1a tuples = list ( zip ( * [[ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ 'A' , 'B' ]) df2 = df [: 4 ] df2 A B first second bar one -0.171712 1.977172 two -0.644910 1.826664 baz one 0.836510 0.690421 two 1.745594 -0.166019 stacked = df2 . stack () stacked first second bar one A -0.171712 B 1.977172 two A -0.644910 B 1.826664 baz one A 0.836510 B 0.690421 two A 1.745594 B -0.166019 dtype: float64 unstack \u4e0e DataFrame.stack() \u5bf9\u5e94\u7684\u5c31\u662f DataFrame.unstack() \u65b9\u6cd5\u3002 \u5b83\u5c06\u6570\u636e\u7684\u884c\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.unstack(level=-1, fill_value=None) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u884c\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u5217\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u5982\u679c\u7ed3\u679c\u4e2d\u6709 NaN \uff0c\u5219\u4f7f\u7528 fill_value \u66ff\u6362\u3002 unstack \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6700\u540e\u4e00\u7ea7\u884c\u7d22\u5f15\u8f6c\u6362\u6210\u5217\u7d22\u5f15\uff1a print ( stacked ) first second bar one A -0.171712 B 1.977172 two A -0.644910 B 1.826664 baz one A 0.836510 B 0.690421 two A 1.745594 B -0.166019 dtype: float64 stacked . unstack () A B first second bar one -0.171712 1.977172 two -0.644910 1.826664 baz one 0.836510 0.690421 two 1.745594 -0.166019 stacked . unstack ( 1 ) second one two first bar A -0.171712 -0.644910 B 1.977172 1.826664 baz A 0.836510 1.745594 B 0.690421 -0.166019 stacked . unstack ( 0 ) first bar baz second one A -0.171712 0.836510 B 1.977172 0.690421 two A -0.644910 1.745594 B 1.826664 -0.166019 \u5982\u679c\u7d22\u5f15\u5177\u6709\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7ea7\u522b\u540d\u79f0\u800c\u4e0d\u662f\u6307\u5b9a\u7ea7\u522b\u7f16\u53f7\uff1a stacked . unstack ( 'second' ) second one two first bar A -0.171712 -0.644910 B 1.977172 1.826664 baz A 0.836510 1.745594 B 0.690421 -0.166019 \u6ce8\u610f\uff0c stack \u548c unstack \u65b9\u6cd5\u4f1a\u9690\u5f0f\u5730\u5bf9\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff1a index = pd . MultiIndex . from_product ([[ 2 , 1 ], [ 'a' , 'b' ]]) df = pd . DataFrame ( np . random . randn ( 4 ), index = index , columns = [ 'A' ]) print ( df , \" \\n \" ) print ( df . unstack () . stack ()) all ( df . unstack () . stack () == df . sort_index ()) A 2 a 0 . 024983 b 0 . 522676 1 a 0 . 590347 b 1 . 343382 A 1 a 0 . 590347 b 1 . 343382 2 a 0 . 024983 b 0 . 522676 True \u591a\u7ea7\u522b\u7d22\u5f15 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u7d22\u5f15\u540d\u5b57\u5217\u8868\u6765\u4e00\u6b21\u5806\u6808\u6216\u53d6\u6d88\u5806\u6808\u591a\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u597d\u50cf\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u90fd\u662f\u5355\u72ec\u5904\u7406\u7684\uff1a columns = pd . MultiIndex . from_tuples ([ ( 'A' , 'cat' , 'long' ), ( 'B' , 'cat' , 'long' ), ( 'A' , 'dog' , 'short' ), ( 'B' , 'dog' , 'short' )], names = [ 'exp' , 'animal' , 'hair_length' ]) df = pd . DataFrame ( np . random . randn ( 4 , 4 ), columns = columns ) print ( df ) df . stack ( level = [ 'animal' , 'hair_length' ]) exp A B A B animal cat cat dog dog hair_length long long short short 0 0.880163 0.641968 -0.882871 1.599603 1 0.428190 -0.225521 1.308824 0.305095 2 0.967418 -0.373880 -0.583663 -1.481239 3 0.481296 1.358393 0.085874 -1.651179 exp A B animal hair_length 0 cat long 0.880163 0.641968 dog short -0.882871 1.599603 1 cat long 0.428190 -0.225521 dog short 1.308824 0.305095 2 cat long 0.967418 -0.373880 dog short -0.583663 -1.481239 3 cat long 0.481296 1.358393 dog short 0.085874 -1.651179 \u7d22\u5f15\u5217\u8868\u53ef\u4ee5\u5305\u542b\u7d22\u5f15\u540d\u79f0\u6216\u7d22\u5f15\u7ea7\u522b\u7684\u7f16\u53f7\uff08\u4f46\u4e0d\u80fd\u540c\u65f6\u5305\u542b\u4e24\u8005\uff09\uff1a # df.stack(level=['animal', 'hair_length']) # from above is equivalent to: df . stack ( level = [ 1 , 2 ]) exp A B animal hair_length 0 cat long 0.880163 0.641968 dog short -0.882871 1.599603 1 cat long 0.428190 -0.225521 dog short 1.308824 0.305095 2 cat long 0.967418 -0.373880 dog short -0.583663 -1.481239 3 cat long 0.481296 1.358393 dog short 0.085874 -1.651179 \u7f3a\u5931\u6570\u636e \u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u5904\u7406\u4e22\u5931\u7684\u6570\u636e\u975e\u5e38\u667a\u80fd\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u5c42\u6b21\u7d22\u5f15\u4e2d\u7684\u6bcf\u4e2a\u5b50\u7ec4\u90fd\u5177\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\u3002\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5904\u7406\u672a\u6392\u5e8f\u7684\u7d22\u5f15\uff08\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528sort_index\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff09\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff1a columns = pd . MultiIndex . from_tuples ([( 'A' , 'cat' ), ( 'B' , 'dog' ), ( 'B' , 'cat' ), ( 'A' , 'dog' )], names = [ 'exp' , 'animal' ]) index = pd . MultiIndex . from_product ([( 'bar' , 'baz' , 'foo' , 'qux' ), ( 'one' , 'two' )], names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = index , columns = columns ) df2 = df . iloc [[ 0 , 1 , 2 , 4 , 5 , 7 ]] print ( df2 ) exp A B A animal cat dog cat dog first second bar one 1.326144 -0.450262 -1.285382 0.882166 two 0.376297 -0.384137 1.124666 -0.708317 baz one 0.741561 0.188875 0.134048 -1.764457 foo one 0.650607 1.218110 0.520376 0.233811 two 1.143299 -0.735135 -1.162965 0.112320 qux two -0.066577 1.292260 -1.520939 0.145216 \u5982\u4e0a\u6240\u8ff0\uff0c stack \u53ef\u4ee5\u4f7f\u7528 level \u53c2\u6570\u6765\u8c03\u7528\u4ee5\u9009\u62e9\u8981\u5806\u53e0\u7684\u5217\u4e2d\u7684\u7ea7\u522b\uff1a df2 . stack ( 'exp' ) animal cat dog first second exp bar one A 1.326144 0.882166 B -1.285382 -0.450262 two A 0.376297 -0.708317 B 1.124666 -0.384137 baz one A 0.741561 -1.764457 B 0.134048 0.188875 foo one A 0.650607 0.233811 B 0.520376 1.218110 two A 1.143299 0.112320 B -1.162965 -0.735135 qux two A -0.066577 0.145216 B -1.520939 1.292260 df2 . stack ( 'animal' ) exp A B first second animal bar one cat 1.326144 -1.285382 dog 0.882166 -0.450262 two cat 0.376297 1.124666 dog -0.708317 -0.384137 baz one cat 0.741561 0.134048 dog -1.764457 0.188875 foo one cat 0.650607 0.520376 dog 0.233811 1.218110 two cat 1.143299 -1.162965 dog 0.112320 -0.735135 qux two cat -0.066577 -1.520939 dog 0.145216 1.292260 \u5982\u679c\u5b50\u7ec4\u6ca1\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\uff0c\u5219\u53d6\u6d88\u5806\u53e0\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f3a\u5c11\u503c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u66ff\u6362\u4e3a\u8be5\u6570\u636e\u7c7b\u578b\u7684\u9ed8\u8ba4\u586b\u5145\u503c\uff0cNaN\u8868\u793a\u6d6e\u70b9\uff0cNaT\u8868\u793adatetimelike\uff0c\u7b49\u7b49\u3002\u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5c06\u8f6c\u6362\u4e3a\u6d6e\u70b9\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u8bbe\u7f6e\u4e3aNaN\uff1a df3 = df . iloc [[ 0 , 1 , 4 , 7 ], [ 1 , 2 ]] print ( df3 ) df3 . unstack () exp B animal dog cat first second bar one -0.450262 -1.285382 two -0.384137 1.124666 foo one 1.218110 0.520376 qux two 1.292260 -1.520939 exp B animal dog cat second one two one two first bar -0.450262 -0.384137 -1.285382 1.124666 foo 1.218110 NaN 0.520376 NaN qux NaN 1.292260 NaN -1.520939 \u6216\u8005\u8bbe\u7f6e fill_value \u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u7f3a\u5931\u6570\u636e\u7684\u503c\u3002 df3 . unstack ( fill_value =- 1e9 ) exp B animal dog cat second one two one two first bar -4.502621e-01 -3.841368e-01 -1.285382e+00 1.124666e+00 foo 1.218110e+00 -1.000000e+09 5.203757e-01 -1.000000e+09 qux -1.000000e+09 1.292260e+00 -1.000000e+09 -1.520939e+00 \u591a\u7ea7\u7d22\u5f15 \u5f53\u5217\u662f\u591a\u7d22\u5f15\u65f6\uff0c\u53d6\u6d88\u5806\u6808\u4e5f\u4f1a\u5c0f\u5fc3\u5730\u6267\u884c\u6b63\u786e\u7684\u64cd\u4f5c\uff1a df [: 3 ] . unstack ( 0 ) exp A B A animal cat dog cat dog first bar baz bar baz bar baz bar baz second one 1.326144 0.741561 -0.450262 0.188875 -1.285382 0.134048 0.882166 -1.764457 two 0.376297 NaN -0.384137 NaN 1.124666 NaN -0.708317 NaN df2 . unstack ( 1 ) exp A B A animal cat dog cat dog second one two one two one two one two first bar 1.326144 0.376297 -0.450262 -0.384137 -1.285382 1.124666 0.882166 -0.708317 baz 0.741561 NaN 0.188875 NaN 0.134048 NaN -1.764457 NaN foo 0.650607 1.143299 1.218110 -0.735135 0.520376 -1.162965 0.233811 0.112320 qux NaN -0.066577 NaN 1.292260 NaN -1.520939 NaN 0.145216 \u901a\u8fc7Melt\u91cd\u5851 cheese = pd . DataFrame ({ 'first' : [ 'John' , 'Mary' ], 'last' : [ 'Doe' , 'Bo' ], 'height' : [ 5.5 , 6.0 ], 'weight' : [ 130 , 150 ]}) print ( cheese ) first last height weight 0 John Doe 5.5 130 1 Mary Bo 6.0 150 cheese . melt ( id_vars = [ 'first' , 'last' ]) first last variable value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 cheese . melt ( id_vars = [ 'first' , 'last' ], var_name = 'quantity' ) first last quantity value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 \u53e6\u4e00\u79cd\u8f6c\u6362\u65b9\u6cd5\u662f\u4f7f\u7528 wide_to_long() \u9762\u677f\u6570\u636e\u4fbf\u5229\u529f\u80fd\u3002\u5b83\u4e0d\u5982\u7075\u6d3b melt() \uff0c\u4f46\u66f4\u6613\u4e8e\u4f7f\u7528\u3002 dft = pd . DataFrame ({ \"A1970\" : { 0 : \"a\" , 1 : \"b\" , 2 : \"c\" }, \"A1980\" : { 0 : \"d\" , 1 : \"e\" , 2 : \"f\" }, \"B1970\" : { 0 : 2.5 , 1 : 1.2 , 2 : . 7 }, \"B1980\" : { 0 : 3.2 , 1 : 1.3 , 2 : . 1 }, \"X\" : dict ( zip ( range ( 3 ), np . random . randn ( 3 )))}) dft [ \"id\" ] = dft . index print ( dft ) pd . wide_to_long ( dft , [ \"A\" , \"B\" ], i = \"id\" , j = \"year\" ) A1970 A1980 B1970 B1980 X id 0 a d 2.5 3.2 0.452655 0 1 b e 1.2 1.3 -0.017028 1 2 c f 0.7 0.1 -0.588708 2 X A B id year 0 1970 0.452655 a 2.5 1 1970 -0.017028 b 1.2 2 1970 -0.588708 c 0.7 0 1980 0.452655 d 3.2 1 1980 -0.017028 e 1.3 2 1980 -0.588708 f 0.1","title":"7.7.\u53d8\u6362\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_1","text":"","title":"\u91cd\u5851\u548c\u6570\u636e\u900f\u89c6\u8868"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#pivot","text":"DataFrame.pivot() \u65b9\u6cd5\u91cd\u6392\u6570\u636e\u3002\u5b83\u662f\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u5b83\u4f7f\u7528 set_index \u5c06\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u7136\u540e\u4f7f\u7528 unstack \u5c06\u884c\u7d22\u5f15\u8f6c\u4e3a\u5217\u7d22\u5f15\u3002 DataFrame . pivot ( index = None , columns = None , values = None ) index \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6307\u5b9a\u4e86\u4e00\u4e2a column name \uff0c\u7528\u8be5\u5217\u6570\u636e\u6765 set_index \uff08\u5c06\u8be5\u5217\u6570\u636e\u53d8\u6210\u884c\u7d22\u5f15\uff0c\u5220\u9664\u4e86\u539f\u6765\u7684\u65e7\u7684\u884c\u7d22\u5f15\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4e0d\u6267\u884c set_index columns \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684 columns labels \u3002 \u5b9e\u9645\u4e0a\u5bf9 index,clumns \u6307\u5b9a\u7684\u5217\u6570\u636e\u5747 set_index\uff0c\u7136\u540e\u4ec5\u5bf9 columns \u5bf9\u5e94\u7684\u5217\u6570\u636e unstack values \uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u4e86\u54ea\u4e2a\u5217\u6570\u636e\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u5269\u4f59\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f5c\u4e3a\u7ed3\u679c\u7684\u6570\u636e\u3002 \u521b\u5efa\u793a\u4f8bDataFrame\uff1a import pandas.util.testing as tm tm . N = 3 def unpivot ( frame ): N , K = frame . shape data = { 'value' : frame . to_numpy () . ravel ( 'F' ), 'variable' : np . asarray ( frame . columns ) . repeat ( N ), 'date' : np . tile ( np . asarray ( frame . index ), K )} return pd . DataFrame ( data , columns = [ 'date' , 'variable' , 'value' ]) df = unpivot ( tm . makeTimeDataFrame ()) df . \\ setup_m . py : 1 : FutureWarning : pandas . util . testing is deprecated . Use the functions in the public API at pandas . testing instead . import os date variable value 0 2000 - 01 - 03 A - 0 . 583727 1 2000 - 01 - 04 A 0 . 340234 2 2000 - 01 - 05 A 0 . 410428 3 2000 - 01 - 06 A - 0 . 252046 4 2000 - 01 - 07 A - 0 . 293375 .. ... ... ... 115 2000 - 02 - 07 D - 0 . 028772 116 2000 - 02 - 08 D 0 . 289038 117 2000 - 02 - 09 D - 0 . 533676 118 2000 - 02 - 10 D 1 . 591452 119 2000 - 02 - 11 D - 0 . 887297 [ 120 rows x 3 columns ] \u8981\u9009\u62e9\u6240\u6709 variable=A \u7684\u503c\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a df [ df [ 'variable' ] == 'A' ] date variable value 0 2000-01-03 A -0.583727 1 2000-01-04 A 0.340234 2 2000-01-05 A 0.410428 3 2000-01-06 A -0.252046 4 2000-01-07 A -0.293375 5 2000-01-10 A -0.421153 6 2000-01-11 A 0.681974 7 2000-01-12 A -0.017518 8 2000-01-13 A -1.209101 9 2000-01-14 A -1.213280 10 2000-01-17 A -2.155664 11 2000-01-18 A -1.923265 12 2000-01-19 A 1.530217 13 2000-01-20 A 1.262092 14 2000-01-21 A -0.238558 15 2000-01-24 A 0.516102 16 2000-01-25 A 1.000411 17 2000-01-26 A -1.648478 18 2000-01-27 A -0.129441 19 2000-01-28 A 0.598608 20 2000-01-31 A -0.521135 21 2000-02-01 A -0.006746 22 2000-02-02 A 0.921157 23 2000-02-03 A 1.057643 24 2000-02-04 A 0.487059 25 2000-02-07 A 1.385754 26 2000-02-08 A 0.023419 27 2000-02-09 A 0.204676 28 2000-02-10 A -1.057568 29 2000-02-11 A -0.517982 \u4f46\u662f\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5bf9\u53d8\u91cf\u8fdb\u884c\u65f6\u95f4\u5e8f\u5217\u8fd0\u7b97\uff0c\u66f4\u597d\u7684\u8868\u793a\u65b9\u6cd5\u662f\u5217\u662f\u552f\u4e00\u7684\u53d8\u91cf\uff0c\u884c\u7d22\u5f15\u4f5c\u4e3a\u65e5\u671f\u3002\u4e3a\u4e86\u5c06\u6570\u636e\u91cd\u5851\u4e3a\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 DataFrame.pivot() \u65b9\u6cd5\uff08\u4e5f\u5b9e\u73b0\u4e3a\u9876\u7ea7\u51fd\u6570 pivot() \uff09\uff1a df . pivot ( index = 'date' , columns = 'variable' , values = 'value' ) variable A B C D date 2000-01-03 -0.583727 -1.441919 1.200268 -0.471893 2000-01-04 0.340234 3.255920 0.794416 1.861937 2000-01-05 0.410428 0.109927 -0.965633 1.876427 2000-01-06 -0.252046 0.907018 -0.796725 1.479889 2000-01-07 -0.293375 1.136764 2.259704 0.225658 2000-01-10 -0.421153 1.698767 -1.016906 0.793135 2000-01-11 0.681974 1.125952 0.125062 0.716256 2000-01-12 -0.017518 0.244659 -1.160187 1.429645 2000-01-13 -1.209101 0.023551 0.607597 0.886414 2000-01-14 -1.213280 -1.026138 0.638492 -0.893937 2000-01-17 -2.155664 -2.277503 1.367296 0.257675 2000-01-18 -1.923265 0.250619 -0.304361 -1.435702 2000-01-19 1.530217 -0.870065 1.947222 -0.113143 2000-01-20 1.262092 -1.923809 0.029966 2.391130 2000-01-21 -0.238558 0.391937 0.318018 0.158791 2000-01-24 0.516102 -0.072348 -0.672369 0.588425 2000-01-25 1.000411 0.994835 -0.150023 0.064140 2000-01-26 -1.648478 -1.088900 -0.534931 -1.912055 2000-01-27 -0.129441 -0.523823 0.347119 1.164735 2000-01-28 0.598608 0.314038 -0.190196 0.081086 2000-01-31 -0.521135 -0.523132 1.888897 -0.196702 2000-02-01 -0.006746 0.478018 0.152105 -0.429027 2000-02-02 0.921157 0.232220 -0.181593 2.401682 2000-02-03 1.057643 0.164677 0.807376 1.563860 2000-02-04 0.487059 0.543105 -0.576517 -0.092737 2000-02-07 1.385754 -0.021569 0.737789 -0.028772 2000-02-08 0.023419 -0.117981 -1.510365 0.289038 2000-02-09 0.204676 -0.959515 -0.927897 -0.533676 2000-02-10 -1.057568 -0.808019 -0.222857 1.591452 2000-02-11 -0.517982 -0.290321 -1.055313 -0.887297 \u5982\u679c\u7701\u7565 values \u53c2\u6570\uff0c\u5e76\u4e14\u8f93\u5165 DataFrame \u5177\u6709\u591a\u4e8e\u4e00\u5217\u7684\u503c\uff0c\u5219\u7ed3\u679cDataFrame\u5c06\u5177\u6709\u591a\u5c42\u6b21\u5217\u7d22\u5f15\uff1a df [ 'value2' ] = df [ 'value' ] * 2 print ( df ) pivoted = df . pivot ( index = 'date' , columns = 'variable' ) pivoted date variable value value2 0 2000 - 01 - 03 A - 0 . 583727 - 1 . 167454 1 2000 - 01 - 04 A 0 . 340234 0 . 680468 2 2000 - 01 - 05 A 0 . 410428 0 . 820856 3 2000 - 01 - 06 A - 0 . 252046 - 0 . 504093 4 2000 - 01 - 07 A - 0 . 293375 - 0 . 586751 .. ... ... ... ... 115 2000 - 02 - 07 D - 0 . 028772 - 0 . 057545 116 2000 - 02 - 08 D 0 . 289038 0 . 578076 117 2000 - 02 - 09 D - 0 . 533676 - 1 . 067353 118 2000 - 02 - 10 D 1 . 591452 3 . 182904 119 2000 - 02 - 11 D - 0 . 887297 - 1 . 774595 [ 120 rows x 4 columns ] value value2 variable A B C D A B C D date 2000-01-03 -0.583727 -1.441919 1.200268 -0.471893 -1.167454 -2.883839 2.400536 -0.943787 2000-01-04 0.340234 3.255920 0.794416 1.861937 0.680468 6.511839 1.588832 3.723873 2000-01-05 0.410428 0.109927 -0.965633 1.876427 0.820856 0.219854 -1.931265 3.752855 2000-01-06 -0.252046 0.907018 -0.796725 1.479889 -0.504093 1.814035 -1.593450 2.959778 2000-01-07 -0.293375 1.136764 2.259704 0.225658 -0.586751 2.273528 4.519408 0.451316 2000-01-10 -0.421153 1.698767 -1.016906 0.793135 -0.842305 3.397533 -2.033811 1.586270 2000-01-11 0.681974 1.125952 0.125062 0.716256 1.363947 2.251905 0.250123 1.432512 2000-01-12 -0.017518 0.244659 -1.160187 1.429645 -0.035037 0.489317 -2.320373 2.859291 2000-01-13 -1.209101 0.023551 0.607597 0.886414 -2.418202 0.047103 1.215195 1.772829 2000-01-14 -1.213280 -1.026138 0.638492 -0.893937 -2.426560 -2.052275 1.276983 -1.787874 2000-01-17 -2.155664 -2.277503 1.367296 0.257675 -4.311328 -4.555006 2.734592 0.515350 2000-01-18 -1.923265 0.250619 -0.304361 -1.435702 -3.846530 0.501238 -0.608722 -2.871404 2000-01-19 1.530217 -0.870065 1.947222 -0.113143 3.060434 -1.740130 3.894444 -0.226287 2000-01-20 1.262092 -1.923809 0.029966 2.391130 2.524184 -3.847617 0.059932 4.782259 2000-01-21 -0.238558 0.391937 0.318018 0.158791 -0.477116 0.783873 0.636036 0.317583 2000-01-24 0.516102 -0.072348 -0.672369 0.588425 1.032204 -0.144695 -1.344737 1.176851 2000-01-25 1.000411 0.994835 -0.150023 0.064140 2.000822 1.989669 -0.300046 0.128280 2000-01-26 -1.648478 -1.088900 -0.534931 -1.912055 -3.296956 -2.177800 -1.069863 -3.824110 2000-01-27 -0.129441 -0.523823 0.347119 1.164735 -0.258883 -1.047645 0.694239 2.329469 2000-01-28 0.598608 0.314038 -0.190196 0.081086 1.197217 0.628076 -0.380393 0.162171 2000-01-31 -0.521135 -0.523132 1.888897 -0.196702 -1.042271 -1.046265 3.777794 -0.393404 2000-02-01 -0.006746 0.478018 0.152105 -0.429027 -0.013491 0.956036 0.304209 -0.858054 2000-02-02 0.921157 0.232220 -0.181593 2.401682 1.842315 0.464441 -0.363185 4.803363 2000-02-03 1.057643 0.164677 0.807376 1.563860 2.115286 0.329354 1.614752 3.127721 2000-02-04 0.487059 0.543105 -0.576517 -0.092737 0.974117 1.086209 -1.153034 -0.185475 2000-02-07 1.385754 -0.021569 0.737789 -0.028772 2.771507 -0.043137 1.475578 -0.057545 2000-02-08 0.023419 -0.117981 -1.510365 0.289038 0.046838 -0.235962 -3.020731 0.578076 2000-02-09 0.204676 -0.959515 -0.927897 -0.533676 0.409352 -1.919029 -1.855794 -1.067353 2000-02-10 -1.057568 -0.808019 -0.222857 1.591452 -2.115135 -1.616039 -0.445714 3.182904 2000-02-11 -0.517982 -0.290321 -1.055313 -0.887297 -1.035964 -0.580642 -2.110625 -1.774595 \u6ce8\u610f \u5982\u679c\u7d22\u5f15\u5305\u542b\u91cd\u590d\u9879\uff0c pivot() \u5c06\u51fa\u9519\uff0c\u65e0\u6cd5\u91cd\u5851\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 pivot_table() \uff0c\u5b83\u662fpivot\u7684\u6cdb\u5316\uff0c\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u7d22\u5f15/\u5217\u5bf9\u7684\u91cd\u590d\u503c\u3002","title":"pivot"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#stack","text":"DataFrame.stack() \u65b9\u6cd5\u5c06\u6570\u636e\u7684\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.stack(level=-1, dropna=True) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u5217\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15 dropna \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5982\u679c\u7ed3\u679c\u4e2d\u67d0\u884c\u5168\u4e3a NaN \uff0c\u5219\u629b\u5f03\u8be5\u884c \u65cb\u8f6c\u65f6\uff0c\u5217\u7d22\u5f15\u65cb\u8f6c\u4e3a\u884c\u7d22\u5f15\uff0c\u65b0\u7684\u884c\u7d22\u5f15\u662f\u591a\u7ea7\u7d22\u5f15\uff0c\u6700\u5185\u5c42\u7684\u884c\u7d22\u5f15\u5c31\u662f\u539f\u6765\u7684\u5217\u7d22\u5f15\u3002 \u6700\u6e05\u6670\u7684\u89e3\u91ca\u65b9\u5f0f\u662f\u901a\u8fc7\u793a\u4f8b\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u793a\u4f8b\u6570\u636e\uff1a tuples = list ( zip ( * [[ 'bar' , 'bar' , 'baz' , 'baz' , 'foo' , 'foo' , 'qux' , 'qux' ], [ 'one' , 'two' , 'one' , 'two' , 'one' , 'two' , 'one' , 'two' ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ 'A' , 'B' ]) df2 = df [: 4 ] df2 A B first second bar one -0.171712 1.977172 two -0.644910 1.826664 baz one 0.836510 0.690421 two 1.745594 -0.166019 stacked = df2 . stack () stacked first second bar one A -0.171712 B 1.977172 two A -0.644910 B 1.826664 baz one A 0.836510 B 0.690421 two A 1.745594 B -0.166019 dtype: float64","title":"stack"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#unstack","text":"\u4e0e DataFrame.stack() \u5bf9\u5e94\u7684\u5c31\u662f DataFrame.unstack() \u65b9\u6cd5\u3002 \u5b83\u5c06\u6570\u636e\u7684\u884c\u7d22\u5f15\u8f6c\u6362\u4e3a\u5217\u7d22\u5f15\u3002 \u6ce8\u610f\uff1a\u5b83\u8ddf\u8f6c\u7f6e\u4e0d\u540c\uff0c\u8f6c\u7f6e\u4f1a\u540c\u65f6\u65cb\u8f6c\u6570\u636e\u3002 DataFrame.unstack(level=-1, fill_value=None) level \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u5b57\u7b26\u4e32\u6216\u8005\u6574\u6570\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002\u5982\u679c\u884c\u7d22\u5f15\u4e3a\u591a\u7ea7\u7d22\u5f15\uff0c\u5b83\u6307\u5b9a\u4e86\u5c06\u54ea\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u65cb\u8f6c\u4e3a\u5217\u7d22\u5f15 fill_value \uff1a\u4e00\u4e2a\u6807\u91cf\u3002\u5982\u679c\u7ed3\u679c\u4e2d\u6709 NaN \uff0c\u5219\u4f7f\u7528 fill_value \u66ff\u6362\u3002 unstack \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6700\u540e\u4e00\u7ea7\u884c\u7d22\u5f15\u8f6c\u6362\u6210\u5217\u7d22\u5f15\uff1a print ( stacked ) first second bar one A -0.171712 B 1.977172 two A -0.644910 B 1.826664 baz one A 0.836510 B 0.690421 two A 1.745594 B -0.166019 dtype: float64 stacked . unstack () A B first second bar one -0.171712 1.977172 two -0.644910 1.826664 baz one 0.836510 0.690421 two 1.745594 -0.166019 stacked . unstack ( 1 ) second one two first bar A -0.171712 -0.644910 B 1.977172 1.826664 baz A 0.836510 1.745594 B 0.690421 -0.166019 stacked . unstack ( 0 ) first bar baz second one A -0.171712 0.836510 B 1.977172 0.690421 two A -0.644910 1.745594 B 1.826664 -0.166019 \u5982\u679c\u7d22\u5f15\u5177\u6709\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7ea7\u522b\u540d\u79f0\u800c\u4e0d\u662f\u6307\u5b9a\u7ea7\u522b\u7f16\u53f7\uff1a stacked . unstack ( 'second' ) second one two first bar A -0.171712 -0.644910 B 1.977172 1.826664 baz A 0.836510 1.745594 B 0.690421 -0.166019 \u6ce8\u610f\uff0c stack \u548c unstack \u65b9\u6cd5\u4f1a\u9690\u5f0f\u5730\u5bf9\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff1a index = pd . MultiIndex . from_product ([[ 2 , 1 ], [ 'a' , 'b' ]]) df = pd . DataFrame ( np . random . randn ( 4 ), index = index , columns = [ 'A' ]) print ( df , \" \\n \" ) print ( df . unstack () . stack ()) all ( df . unstack () . stack () == df . sort_index ()) A 2 a 0 . 024983 b 0 . 522676 1 a 0 . 590347 b 1 . 343382 A 1 a 0 . 590347 b 1 . 343382 2 a 0 . 024983 b 0 . 522676 True","title":"unstack"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_2","text":"\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u7d22\u5f15\u540d\u5b57\u5217\u8868\u6765\u4e00\u6b21\u5806\u6808\u6216\u53d6\u6d88\u5806\u6808\u591a\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u597d\u50cf\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ea7\u522b\u7684\u7d22\u5f15\u90fd\u662f\u5355\u72ec\u5904\u7406\u7684\uff1a columns = pd . MultiIndex . from_tuples ([ ( 'A' , 'cat' , 'long' ), ( 'B' , 'cat' , 'long' ), ( 'A' , 'dog' , 'short' ), ( 'B' , 'dog' , 'short' )], names = [ 'exp' , 'animal' , 'hair_length' ]) df = pd . DataFrame ( np . random . randn ( 4 , 4 ), columns = columns ) print ( df ) df . stack ( level = [ 'animal' , 'hair_length' ]) exp A B A B animal cat cat dog dog hair_length long long short short 0 0.880163 0.641968 -0.882871 1.599603 1 0.428190 -0.225521 1.308824 0.305095 2 0.967418 -0.373880 -0.583663 -1.481239 3 0.481296 1.358393 0.085874 -1.651179 exp A B animal hair_length 0 cat long 0.880163 0.641968 dog short -0.882871 1.599603 1 cat long 0.428190 -0.225521 dog short 1.308824 0.305095 2 cat long 0.967418 -0.373880 dog short -0.583663 -1.481239 3 cat long 0.481296 1.358393 dog short 0.085874 -1.651179 \u7d22\u5f15\u5217\u8868\u53ef\u4ee5\u5305\u542b\u7d22\u5f15\u540d\u79f0\u6216\u7d22\u5f15\u7ea7\u522b\u7684\u7f16\u53f7\uff08\u4f46\u4e0d\u80fd\u540c\u65f6\u5305\u542b\u4e24\u8005\uff09\uff1a # df.stack(level=['animal', 'hair_length']) # from above is equivalent to: df . stack ( level = [ 1 , 2 ]) exp A B animal hair_length 0 cat long 0.880163 0.641968 dog short -0.882871 1.599603 1 cat long 0.428190 -0.225521 dog short 1.308824 0.305095 2 cat long 0.967418 -0.373880 dog short -0.583663 -1.481239 3 cat long 0.481296 1.358393 dog short 0.085874 -1.651179","title":"\u591a\u7ea7\u522b\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_3","text":"\u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u5904\u7406\u4e22\u5931\u7684\u6570\u636e\u975e\u5e38\u667a\u80fd\uff0c\u5e76\u4e14\u4e0d\u5e0c\u671b\u5c42\u6b21\u7d22\u5f15\u4e2d\u7684\u6bcf\u4e2a\u5b50\u7ec4\u90fd\u5177\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\u3002\u5b83\u4eec\u8fd8\u53ef\u4ee5\u5904\u7406\u672a\u6392\u5e8f\u7684\u7d22\u5f15\uff08\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528sort_index\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff09\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4f8b\u5b50\uff1a columns = pd . MultiIndex . from_tuples ([( 'A' , 'cat' ), ( 'B' , 'dog' ), ( 'B' , 'cat' ), ( 'A' , 'dog' )], names = [ 'exp' , 'animal' ]) index = pd . MultiIndex . from_product ([( 'bar' , 'baz' , 'foo' , 'qux' ), ( 'one' , 'two' )], names = [ 'first' , 'second' ]) df = pd . DataFrame ( np . random . randn ( 8 , 4 ), index = index , columns = columns ) df2 = df . iloc [[ 0 , 1 , 2 , 4 , 5 , 7 ]] print ( df2 ) exp A B A animal cat dog cat dog first second bar one 1.326144 -0.450262 -1.285382 0.882166 two 0.376297 -0.384137 1.124666 -0.708317 baz one 0.741561 0.188875 0.134048 -1.764457 foo one 0.650607 1.218110 0.520376 0.233811 two 1.143299 -0.735135 -1.162965 0.112320 qux two -0.066577 1.292260 -1.520939 0.145216 \u5982\u4e0a\u6240\u8ff0\uff0c stack \u53ef\u4ee5\u4f7f\u7528 level \u53c2\u6570\u6765\u8c03\u7528\u4ee5\u9009\u62e9\u8981\u5806\u53e0\u7684\u5217\u4e2d\u7684\u7ea7\u522b\uff1a df2 . stack ( 'exp' ) animal cat dog first second exp bar one A 1.326144 0.882166 B -1.285382 -0.450262 two A 0.376297 -0.708317 B 1.124666 -0.384137 baz one A 0.741561 -1.764457 B 0.134048 0.188875 foo one A 0.650607 0.233811 B 0.520376 1.218110 two A 1.143299 0.112320 B -1.162965 -0.735135 qux two A -0.066577 0.145216 B -1.520939 1.292260 df2 . stack ( 'animal' ) exp A B first second animal bar one cat 1.326144 -1.285382 dog 0.882166 -0.450262 two cat 0.376297 1.124666 dog -0.708317 -0.384137 baz one cat 0.741561 0.134048 dog -1.764457 0.188875 foo one cat 0.650607 0.520376 dog 0.233811 1.218110 two cat 1.143299 -1.162965 dog 0.112320 -0.735135 qux two cat -0.066577 -1.520939 dog 0.145216 1.292260 \u5982\u679c\u5b50\u7ec4\u6ca1\u6709\u76f8\u540c\u7684\u6807\u7b7e\u96c6\uff0c\u5219\u53d6\u6d88\u5806\u53e0\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f3a\u5c11\u503c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u66ff\u6362\u4e3a\u8be5\u6570\u636e\u7c7b\u578b\u7684\u9ed8\u8ba4\u586b\u5145\u503c\uff0cNaN\u8868\u793a\u6d6e\u70b9\uff0cNaT\u8868\u793adatetimelike\uff0c\u7b49\u7b49\u3002\u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5c06\u8f6c\u6362\u4e3a\u6d6e\u70b9\uff0c\u7f3a\u5c11\u7684\u503c\u5c06\u8bbe\u7f6e\u4e3aNaN\uff1a df3 = df . iloc [[ 0 , 1 , 4 , 7 ], [ 1 , 2 ]] print ( df3 ) df3 . unstack () exp B animal dog cat first second bar one -0.450262 -1.285382 two -0.384137 1.124666 foo one 1.218110 0.520376 qux two 1.292260 -1.520939 exp B animal dog cat second one two one two first bar -0.450262 -0.384137 -1.285382 1.124666 foo 1.218110 NaN 0.520376 NaN qux NaN 1.292260 NaN -1.520939 \u6216\u8005\u8bbe\u7f6e fill_value \u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u7f3a\u5931\u6570\u636e\u7684\u503c\u3002 df3 . unstack ( fill_value =- 1e9 ) exp B animal dog cat second one two one two first bar -4.502621e-01 -3.841368e-01 -1.285382e+00 1.124666e+00 foo 1.218110e+00 -1.000000e+09 5.203757e-01 -1.000000e+09 qux -1.000000e+09 1.292260e+00 -1.000000e+09 -1.520939e+00","title":"\u7f3a\u5931\u6570\u636e"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#_4","text":"\u5f53\u5217\u662f\u591a\u7d22\u5f15\u65f6\uff0c\u53d6\u6d88\u5806\u6808\u4e5f\u4f1a\u5c0f\u5fc3\u5730\u6267\u884c\u6b63\u786e\u7684\u64cd\u4f5c\uff1a df [: 3 ] . unstack ( 0 ) exp A B A animal cat dog cat dog first bar baz bar baz bar baz bar baz second one 1.326144 0.741561 -0.450262 0.188875 -1.285382 0.134048 0.882166 -1.764457 two 0.376297 NaN -0.384137 NaN 1.124666 NaN -0.708317 NaN df2 . unstack ( 1 ) exp A B A animal cat dog cat dog second one two one two one two one two first bar 1.326144 0.376297 -0.450262 -0.384137 -1.285382 1.124666 0.882166 -0.708317 baz 0.741561 NaN 0.188875 NaN 0.134048 NaN -1.764457 NaN foo 0.650607 1.143299 1.218110 -0.735135 0.520376 -1.162965 0.233811 0.112320 qux NaN -0.066577 NaN 1.292260 NaN -1.520939 NaN 0.145216","title":"\u591a\u7ea7\u7d22\u5f15"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.7.%E5%8F%98%E6%8D%A2%E7%B4%A2%E5%BC%95.html#melt","text":"cheese = pd . DataFrame ({ 'first' : [ 'John' , 'Mary' ], 'last' : [ 'Doe' , 'Bo' ], 'height' : [ 5.5 , 6.0 ], 'weight' : [ 130 , 150 ]}) print ( cheese ) first last height weight 0 John Doe 5.5 130 1 Mary Bo 6.0 150 cheese . melt ( id_vars = [ 'first' , 'last' ]) first last variable value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 cheese . melt ( id_vars = [ 'first' , 'last' ], var_name = 'quantity' ) first last quantity value 0 John Doe height 5.5 1 Mary Bo height 6.0 2 John Doe weight 130.0 3 Mary Bo weight 150.0 \u53e6\u4e00\u79cd\u8f6c\u6362\u65b9\u6cd5\u662f\u4f7f\u7528 wide_to_long() \u9762\u677f\u6570\u636e\u4fbf\u5229\u529f\u80fd\u3002\u5b83\u4e0d\u5982\u7075\u6d3b melt() \uff0c\u4f46\u66f4\u6613\u4e8e\u4f7f\u7528\u3002 dft = pd . DataFrame ({ \"A1970\" : { 0 : \"a\" , 1 : \"b\" , 2 : \"c\" }, \"A1980\" : { 0 : \"d\" , 1 : \"e\" , 2 : \"f\" }, \"B1970\" : { 0 : 2.5 , 1 : 1.2 , 2 : . 7 }, \"B1980\" : { 0 : 3.2 , 1 : 1.3 , 2 : . 1 }, \"X\" : dict ( zip ( range ( 3 ), np . random . randn ( 3 )))}) dft [ \"id\" ] = dft . index print ( dft ) pd . wide_to_long ( dft , [ \"A\" , \"B\" ], i = \"id\" , j = \"year\" ) A1970 A1980 B1970 B1980 X id 0 a d 2.5 3.2 0.452655 0 1 b e 1.2 1.3 -0.017028 1 2 c f 0.7 0.1 -0.588708 2 X A B id year 0 1970 0.452655 a 2.5 1 1970 -0.017028 b 1.2 2 1970 -0.588708 c 0.7 0 1980 0.452655 d 3.2 1 1980 -0.017028 e 1.3 2 1980 -0.588708 f 0.1","title":"\u901a\u8fc7Melt\u91cd\u5851"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html","text":"from Toolkit.Help import Help as H import pprint import numpy as np import pandas as pd Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.12 pandas version: 1.0.1 numpy version: 1.18.1 \u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7ec4\u5e76\u5bf9\u5404\u7ec4\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\uff08\u65e0\u8bba\u662f\u805a\u5408\u8fd8\u662f\u8f6c\u6362\uff09\uff0c\u901a\u5e38\u662f\u6570\u636e\u5206\u6790\u5de5\u4f5c\u4e2d\u7684\u91cd\u8981\u73af\u8282\u3002\u5728\u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u3001\u878d\u5408\u3001\u51c6\u5907\u597d\u4e4b\u540e\uff0c\u901a\u5e38\u5c31\u662f\u8ba1\u7b97\u5206\u7ec4\u7edf\u8ba1\u6216\u751f\u6210\u900f\u89c6\u8868\u3002pandas\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7075\u6d3b\u9ad8\u6548\u7684 gruopby \u529f\u80fd\uff0c\u5b83\u80fd\u4ee5\u4e00\u79cd\u81ea\u7136\u7684\u65b9\u5f0f\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5207\u7247\u3001\u5207\u5757\u3001\u6458\u8981\u7b49\u64cd\u4f5c\u3002 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u548cSQL\uff08Structured Query Language\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u80fd\u591f\u5982\u6b64\u6d41\u884c\u7684\u539f\u56e0\u4e4b\u4e00\u5c31\u662f\u5176\u80fd\u591f\u65b9\u4fbf\u5730\u5bf9\u6570\u636e\u8fdb\u884c\u8fde\u63a5\u3001\u8fc7\u6ee4\u3001\u8f6c\u6362\u548c\u805a\u5408\u3002\u4f46\u662f\uff0c\u50cfSQL\u8fd9\u6837\u7684\u67e5\u8be2\u8bed\u8a00\u6240\u80fd\u6267\u884c\u7684\u5206\u7ec4\u8fd0\u7b97\u7684\u79cd\u7c7b\u5f88\u6709\u9650\u3002pandas\u53ef\u4ee5\u6267\u884c\u590d\u6742\u5f97\u591a\u7684\u5206\u7ec4\u8fd0\u7b97\uff08\u5229\u7528\u4efb\u4f55\u53ef\u4ee5\u63a5\u53d7pandas\u5bf9\u8c61\u6216NumPy\u6570\u7ec4\u7684\u51fd\u6570\uff09\u3002 GroupBy \u673a\u5236 Hadley Wickham\uff08\u8bb8\u591a\u70ed\u95e8R\u8bed\u8a00\u5305\u7684\u4f5c\u8005\uff09\u521b\u9020\u4e86\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u5206\u7ec4\u8fd0\u7b97\u7684\u672f\u8bed\"split-apply-combine\"\uff08\u62c6\u5206\uff0d\u5e94\u7528\uff0d\u5408\u5e76\uff09\uff1a split\uff1a\u6839\u636e\u5206\u7ec4\u952e\u5c06pandas\u5bf9\u8c61\uff08Series\u3001DataFrame\u6216\u8005\u5176\u4ed6\uff09\u5206\u6210\u51e0\u7ec4\u3002 apply\uff1a\u5c06\u51fd\u6570\u72ec\u7acb\u5730\u5e94\u7528\u4e8e\u6bcf\u4e2a\u7ec4\u3002 combine\uff1a\u5c06\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002 \u4e0b\u56fe\u5927\u81f4\u8bf4\u660e\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u7ec4\u805a\u5408\u8fc7\u7a0b\uff1a \u62c6\u5206\u6b65\u9aa4\u662f\u6700\u7b80\u5355\u7684\uff0c\u5206\u7ec4\u952e\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f\uff0c\u4e14\u7c7b\u578b\u4e0d\u5fc5\u76f8\u540c\uff1a \u5217\u8868\u6216\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u4e0e\u5f85\u5206\u7ec4\u7684\u8f74\u4e00\u6837\u3002 \u8868\u793aDataFrame\u67d0\u4e2a\u5217\u540d\u7684\u503c\u3002 \u5b57\u5178\u6216Series\uff0c\u7ed9\u51fa\u5f85\u5206\u7ec4\u8f74\u4e0a\u7684\u503c\u4e0e\u5206\u7ec4\u540d\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u8f74\u7d22\u5f15\u6216\u7d22\u5f15\u4e2d\u7684\u5404\u4e2a\u6807\u7b7e\u3002 \u540e\u4e09\u79cd\u90fd\u53ea\u662f\u7b2c\u4e00\u79cd\u7684\u5feb\u6377\u65b9\u5f0f\u800c\u5df2\uff0c\u5176\u6700\u7ec8\u76ee\u7684\u4ecd\u7136\u662f\u4ea7\u751f\u4e00\u7ec4\u7528\u4e8e\u62c6\u5206\u5bf9\u8c61\u7684\u503c\u3002 \u5728apply\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff1a \u6c47\u603b\uff1a\u591a\u4e2a\u6570\u6c47\u603b\u6210\u4e00\u4e2a\u6570\u503c\uff08\u4f8b\u5982\uff1a\u6c42\u548c\u3001\u5e73\u5747\u503c\uff09\u3002 \u8f6c\u6362\uff1a\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u5e76\u8fd4\u56de\u5177\u6709\u76f8\u4f3c\u7d22\u5f15\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\uff1a\u6807\u51c6\u5316\u3001\u586b\u5145NA\u503c\uff09\u3002 \u8fc7\u6ee4\uff1a\u6839\u636e\u51fd\u6570\u5728group\u4e0a\u9762\u7684\u8ba1\u7b97\u7ed3\u679c\u5f97\u5230 True \u6216 False \uff0c\u7531\u6b64\u51b3\u5b9a\u4e22\u5f03\u4e00\u4e9b\u7ec4\uff08\u4f8b\u5982\uff1a\u4e22\u5f03\u6210\u5458\u4e2a\u6570\u8fc7\u5c11\u7684\u7ec4\u3001\u6839\u636e\u5e73\u5747\u503c\u7b5b\u9009\u6570\u636e\uff09\u3002 groupby \u65b9\u6cd5 .groupby() \u65b9\u6cd5\u662f\u5206\u7ec4\u65b9\u6cd5\uff1a groupby ( by = None , axis = 0 , level = None , as_index : bool = True , sort : bool = True , group_keys : bool = True , squeeze : bool = False , observed : bool = False ) by \uff1a mapping function \u3001 list of function \u3001\u5b57\u5178\u3001\u5e8f\u5217\u3001\u5143\u7ec4\u3001 list of column name \u3002\u5b83\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\uff08\u5206\u7ec4\u952e\uff09\u3002 \u4f20\u5165\u51fd\u6570\uff0c\u5219\u5728\u6bcf\u4e2a index value \u4e0a\u8c03\u7528\u51fd\u6570\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e\uff0c axis \u6307\u5b9a\u662f\u54ea\u4e2a\u8f74\u7684 index value \u4f20\u5165 Series \u6216\u8005\u5b57\u5178\uff0c\u5219\u6839\u636e\u6bcf\u4e2a index value \u5728\u5b57\u5178/ Series \u4e2d\u7684\u503c\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \uff0c\u5219\u4f7f\u7528\u8be5 label \u62bd\u53d6\u51fa\u6765\u7684\u4e00\u5217\u6570\u636e\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \u7684 list \uff0c\u5219\u4f7f\u7528\u4e00\u7ec4 column label \u62bd\u53d6\u51fa\u6765\u7684\u591a\u5217\u6570\u636e\u4f5c\u4e3a\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\uff0c\u5219\u5b83\u76f4\u63a5\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\u7684\u5e8f\u5217\uff0c\u5219\u4f7f\u7528\u8fd9\u4e9b\u5e8f\u5217\u62fc\u63a5\u6210\u4e00\u4e2a MulitiIndex \uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a MultiIndex \u66ff\u6362\u6389 index \u540e\uff0c\u6839\u636e label value \u6765\u5206\u7ec4\u3002\uff08\u4e8b\u5b9e\u4e0a\u5e76\u6ca1\u6709\u66ff\u6362\uff0c\u53ea\u662f\u7528\u4e8e\u8bf4\u660e\u8fd9\u4e2a\u8fc7\u7a0b\uff09 axis \uff1a\u6307\u5b9a\u6cbf\u7740\u54ea\u4e2a\u8f74\u5206\u7ec4 level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 level name \u6216\u8005\u5176\u5e8f\u5217\u3002\u5982\u679c axis \u662f\u4e2a MultiIndex \uff0c\u5219\u5728\u6307\u5b9a\u7ea7\u522b\u4e0a\u7684\u7d22\u5f15\u6765\u5206\u7ec4 as_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c06 group label \u4f5c\u4e3a\u8f93\u51fa\u7684 index \u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f93\u51fa\u662f SQL \u98ce\u683c\u7684\u5206\u7ec4\uff08\u6b64\u65f6\u5206\u7ec4\u7684 key \u4f5c\u4e3a\u4e00\u5217\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a index \uff09\u3002 Series \u4e2d\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u4e3a True \u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5bf9\u5206\u7ec4\u7684\u952e\u8fdb\u884c\u6392\u5e8f\u3002 group_keys \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u4e14\u8c03\u7528\u4e86\u51fd\u6570\u6765\u51b3\u5b9a\u5206\u7ec4\uff0c\u5219\u6dfb\u52a0\u5206\u7ec4\u952e\u6765\u533a\u5206\u4e0d\u540c\u7684\u6570\u636e squeeze \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c3d\u53ef\u80fd\u7684\u7f29\u51cf\u7ed3\u679c\u7684\u7c7b\u578b\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a GroupBy \u5bf9\u8c61\u3002 \u62c6\u5206\u7ec4 \u521b\u5efa\u793a\u4f8b\u6570\u636e: df = pd . DataFrame ({ 'Class' : [ '1\u73ed' , '2\u73ed' , '1\u73ed' , '1\u73ed' , '2\u73ed' , '2\u73ed' ], 'Gender' : [ '\u7537' , '\u7537' , '\u5973' , '\u7537' , '\u5973' , '\u5973' ], 'Math Score' : [ 72 , 86 , 76 , 85 , 89 , 90 ], 'Language Score' : [ 73 , 88 , 81 , 82 , 79 , 86 ]}, index = [ '\u5c0f\u660e' , '\u5c0f\u806a' , '\u5c0f\u7ea2' , '\u5c0f\u534e' , '\u5c0f\u4e3d' , '\u5c0f\u7f8e' ]) df . index . name = \"Name\" df Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86 \u4ee5\u4e0b\u662f\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u5206\u7ec4\u952e\u7684\u793a\u4f8b\u3002 Series\u6216\u5b57\u5178 grouped = df [ 'Math Score' ] . groupby ( dict ( df [ 'Class' ])) # grouped = df['Math Score'].groupby(df['Class']) pprint . pprint ( list ( grouped )) [('1\u73ed', Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('2\u73ed', Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64)] column label grouped = df . groupby ( 'Class' ) pprint . pprint ( list ( grouped )) [('1\u73ed', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82), ('2\u73ed', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86)] \u901a\u8fc7 axis \u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u884c\u7684index\uff1a grouped = df . groupby ( 'Name' , axis = 0 ) list ( grouped ) [('\u5c0f\u4e3d', Class Gender Math Score Language Score Name \u5c0f\u4e3d 2\u73ed \u5973 89 79), ('\u5c0f\u534e', Class Gender Math Score Language Score Name \u5c0f\u534e 1\u73ed \u7537 85 82), ('\u5c0f\u660e', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73), ('\u5c0f\u7ea2', Class Gender Math Score Language Score Name \u5c0f\u7ea2 1\u73ed \u5973 76 81), ('\u5c0f\u7f8e', Class Gender Math Score Language Score Name \u5c0f\u7f8e 2\u73ed \u5973 90 86), ('\u5c0f\u806a', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88)] list of column label # axis=1 \u6cbf\u77401\u8f74\u62c6\u5206 \u4f7f\u75280\u8f74\u7684lable grouped = df . groupby ([ 'Class' , 'Gender' ], axis = 1 ) pprint . pprint ( list ( grouped )) [] \u5e8f\u5217 seq_1 = list ( df [ 'Class' ]) seq_2 = list ( df [ 'Gender' ]) grouped = df [ 'Math Score' ] . groupby ( seq_1 ) print ( list ( grouped ), \" \\n \" ) grouped = df [ 'Math Score' ] . groupby ([ seq_1 , seq_2 ]) print ( list ( grouped )) [( '1\u73ed' , Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name : Math Score , dtype : int64 ), ( '2\u73ed' , Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name : Math Score , dtype : int64 )] [(( '1\u73ed' , '\u5973' ), Name \u5c0f\u7ea2 76 Name : Math Score , dtype : int64 ), (( '1\u73ed' , '\u7537' ), Name \u5c0f\u660e 72 \u5c0f\u534e 85 Name : Math Score , dtype : int64 ), (( '2\u73ed' , '\u5973' ), Name \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name : Math Score , dtype : int64 ), (( '2\u73ed' , '\u7537' ), Name \u5c0f\u806a 86 Name : Math Score , dtype : int64 )] \u51fd\u6570 # \u5b9a\u4e49\u51fd\u6570 def fun_1 ( key ): return key def fun_2 ( key ): return \"a\" # function grouped = df [ 'Math Score' ] . groupby ( fun_1 ) print ( list ( grouped ), \" \\n \" ) # list of function grouped = df . groupby ([ fun_1 , fun_2 ]) print ( list ( grouped )) [( '\u5c0f\u4e3d' , Name \u5c0f\u4e3d 89 Name : Math Score , dtype : int64 ), ( '\u5c0f\u534e' , Name \u5c0f\u534e 85 Name : Math Score , dtype : int64 ), ( '\u5c0f\u660e' , Name \u5c0f\u660e 72 Name : Math Score , dtype : int64 ), ( '\u5c0f\u7ea2' , Name \u5c0f\u7ea2 76 Name : Math Score , dtype : int64 ), ( '\u5c0f\u7f8e' , Name \u5c0f\u7f8e 90 Name : Math Score , dtype : int64 ), ( '\u5c0f\u806a' , Name \u5c0f\u806a 86 Name : Math Score , dtype : int64 )] [(( '\u5c0f\u4e3d' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u4e3d 2 \u73ed \u5973 89 79 ), (( '\u5c0f\u534e' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u534e 1 \u73ed \u7537 85 82 ), (( '\u5c0f\u660e' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u660e 1 \u73ed \u7537 72 73 ), (( '\u5c0f\u7ea2' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u7ea2 1 \u73ed \u5973 76 81 ), (( '\u5c0f\u7f8e' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u7f8e 2 \u73ed \u5973 90 86 ), (( '\u5c0f\u806a' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u806a 2 \u73ed \u7537 86 88 )] \u904d\u5386\u7ec4 grouped = df . groupby ( 'Class' ) for name , group in grouped : print ( name ) print ( group ) 1\u73ed Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 2\u73ed Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86 \u9009\u62e9\u7ec4 grouped = df . groupby ( 'Class' ) grouped . get_group ( \"1\u73ed\" ) Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 cut \u51fd\u6570 pandas . cut ( x , bins , right = True , labels = None , retbins = False , precision = 3 , include_lowest = False ) x \uff1a\u4e00\u7ef4\u7684\u6570\u7ec4\u3002 bins \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u4e00\u4e2a\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u533a\u95f4\u662f\u7b49\u957f\u7684\uff0c\u4e14\u6700\u5de6\u4fa7\u7684\u533a\u95f4\u7684\u5de6\u4fa7\u6bd4 x \u6700\u5c0f\u503c\u5c0f 0.1% \uff1b\u6700\u53f3\u4fa7\u7684\u533a\u95f4\u7684\u53f3\u4fa7\u6bd4 x \u6700\u5927\u503c\u5927 0.1% \u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86 bins \u7684\u6bcf\u4e2a\u5212\u5206\u70b9\u3002 right \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u533a\u95f4\u662f\u5de6\u5f00\u53f3\u95ed\uff1b\u5426\u5219\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u3002 labels \uff1a\u4e00\u4e2a array \u6216\u8005 None \u3002\u5982\u679c\u4e3a\u4e00\u4e2a array \uff0c\u5219\u5b83\u6307\u5b9a\u4e86\u7ed3\u679c bins \u7684 label \uff08\u8981\u6c42\u957f\u5ea6\u4e0e bins \u6570\u91cf\u76f8\u540c\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4f7f\u7528\u533a\u95f4\u6765\u8868\u793a\u3002 retbins \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de bins precision \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u5b58\u50a8\u548c\u663e\u793a bin label \u7684\u7cbe\u5ea6 include_lowest \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u6700\u5de6\u4fa7 bin \u7684\u5de6\u4fa7\u662f\u95ed\u533a\u95f4 \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Categorical \u5bf9\u8c61\u6216\u8005 Series \u5bf9\u8c61\u3002\u8be5\u51fd\u6570\u7c7b\u4f3c\u4e8e numpy.histogram() \u51fd\u6570\u3002 qcut \u51fd\u6570 pandas . qcut ( x , q , labels = None , retbins = False , precision = 3 ) q \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86\u767e\u5206\u6bd4\u5212\u5206\u70b9\u3002\u6bd4\u5982 [0,0.25,0.5,0.75,0.1] \u3002 0.25 \u4ee3\u8868 25% \u5212\u5206\u70b9\u3002\u5982\u679c\u6570\u636e\u4e0d\u5728\u4efb\u4f55\u533a\u95f4\u5185\uff0c\u5219\u6807\u8bb0\u4e3a NaN \u3002 \u5176\u4ed6\u53c2\u6570\u4e0e cut \u76f8\u540c\u3002( qcut \u6ca1\u6709 bins \u53c2\u6570\uff09 \u805a\u5408 \u5e38\u7528\u805a\u5408\u51fd\u6570 \u805a\u5408\u51fd\u6570\u53ef\u4ee5\u51cf\u5c0f\u8fd4\u56de\u5bf9\u8c61\u7684\u5c3a\u5bf8\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u6c47\u603b\u529f\u80fd\uff1a \u529f\u80fd \u63cf\u8ff0 mean() \u8ba1\u7b97\u7ec4\u7684\u5e73\u5747\u503c sum() \u8ba1\u7b97\u7ec4\u503c\u4e4b\u548c size() \u8ba1\u7b97\u7ec4\u5927\u5c0f count() \u8ba1\u7b97\u5404\u7ec4\u7684\u5143\u7d20\u7684\u6570\u91cf std() \u7ec4\u7684\u6807\u51c6\u504f\u5dee var() \u8ba1\u7b97\u7ec4\u7684\u65b9\u5dee sem() \u5747\u503c\u7684\u6807\u51c6\u8bef describe() \u751f\u6210\u63cf\u8ff0\u6027\u7edf\u8ba1 first() \u8fd4\u56de\u6bcf\u7ec4\u7684\u7b2c\u4e00\u4e2a\u503c last() \u8fd4\u56de\u6bcf\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u503c nth() \u53d6\u7b2cn\u4e2a\u503c\uff0c\u5982\u679cn\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5219\u53d6\u4e00\u4e2a\u5b50\u96c6 min() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5c0f\u503c max() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5927\u503c \u4e0a\u9762\u7684\u6c47\u603b\u51fd\u6570\u5c06\u6392\u9664 NA \u503c\u3002 \u5c06Series\u51cf\u5c11\u4e3a\u6807\u91cf\u503c\u7684\u4efb\u4f55\u51fd\u6570\u90fd\u662f\u805a\u5408\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u3002 \u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570 \u5982\u679c\u5e0c\u671b\u4f7f\u7528\u81ea\u5df1\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ea\u9700\u8981\u5c06\u5176\u4f20\u5165 .aggregate(func, *args, **kwargs) \u6216\u8005 .agg() \u65b9\u6cd5\u5373\u53ef\u3002\u5176\u4e2d func \u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 \u6ce8\u610f\uff1a\u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u4f1a\u6162\u5f97\u591a\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6784\u9020\u4e2d\u95f4\u5206\u7ec4\u6570\u636e\u5757\u65f6\u5b58\u5728\u975e\u5e38\u5927\u7684\u5f00\u9500\uff08\u51fd\u6570\u8c03\u7528\u3001\u6570\u636e\u91cd\u6392\u7b49\uff09 \u4f60\u53ef\u4ee5\u5c06\u524d\u9762\u4ecb\u7ecd\u7684 GroupBy \u7684\u7edf\u8ba1\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u5165\u3002 \u5982\u679c\u4f60\u4f20\u5165\u4e86\u4e00\u7ec4\u51fd\u6570\u6216\u8005\u51fd\u6570\u540d\uff0c\u5219\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\uff0c\u76f8\u5e94\u7684\u5217\u5c31\u7528\u5bf9\u5e94\u7684\u51fd\u6570\u540d\u547d\u540d\u3002\u5982\u679c\u4f60\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u5219\u4f7f\u7528 (name,function) \u5143\u7ec4\u7684\u5e8f\u5217\u3002\u5176\u4e2d name \u7528\u4f5c\u7ed3\u679c\u5217\u7684\u5217\u540d\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u5bf9\u4e0d\u540c\u7684\u5217\u91c7\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\uff0c\u5219\u5411 agg() \u4f20\u5165\u4e00\u4e2a\u5b57\u5178\u3002\u5b57\u5178\u7684\u952e\u5c31\u662f\u5217\u540d\uff0c\u503c\u5c31\u662f\u4f60\u5e0c\u671b\u5bf9\u8be5\u5217\u91c7\u7528\u7684\u51fd\u6570\u3002 grouped = df . groupby ( 'Class' ) grouped . aggregate ( np . sum ) Math Score Language Score Class 1\u73ed 233 236 2\u73ed 265 253 apply \u65b9\u6cd5 df . apply ( func , axis = 0 , raw = False , reduce = None , result_type = None , args = (), ** kwds ) func \uff1a\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u4f1a\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\u6216\u8005\u6bcf\u4e00\u5217 axis \uff1a\u6307\u5b9a\u5e94\u7528\u4e8e\u884c\u8fd8\u662f\u5217\u3002\u5982\u679c\u4e3a 0/'index' \uff0c\u5219\u6cbf\u77400\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u5217\uff09\uff1b\u5982\u679c\u4e3a 1/'columns' \uff0c\u5219\u6cbf\u77401\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\uff09\u3002 broadcast \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \uff08\u4e0d\u8db3\u7684\u90e8\u5206\u901a\u8fc7\u5e7f\u64ad\u6765\u586b\u5145\uff09 raw \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f6c\u6362\u6bcf\u4e00\u884c/\u6bcf\u4e00\u5217\u4e3a\u4e00\u4e2a Series \uff0c\u7136\u540e\u4f20\u7ed9 func \u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c True \uff0c\u5219 func \u63a5\u53d7\u5230\u7684\u662f ndarray \uff0c\u800c\u4e0d\u662f Series reduce \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u7528\u4e8e\u5224\u65ad\u5f53 DataFrame \u4e3a\u7a7a\u65f6\uff0c\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a Series \u8fd8\u662f\u8fd4\u56de\u4e00\u4e2a DataFrame \u3002\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a Series \uff1b\u5982\u679c\u4e3a False \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \u3002 args \uff1a\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u59cb\u7ec8\u4e3a Series/ndarray \uff09 \u5206\u7ec4\u7ea7\u8fd0\u7b97 agg/aggregate \u53ea\u662f\u5206\u7ec4\u7ea7\u8fd0\u7b97\u5176\u4e2d\u7684\u4e00\u79cd\u3002\u5b83\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 transform \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u4e5f\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\u3002\u53ea\u80fd\u8fd4\u56de\u4e24\u79cd\u7ed3\u679c\uff1a\u8981\u4e48\u662f\u4e00\u4e2a\u6807\u91cf\u503c\uff08\u8be5\u6807\u91cf\u503c\u5c06\u88ab\u5e7f\u64ad\uff09\uff0c\u6216\u8005\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u7ed3\u679c\u6570\u7ec4\u3002 \u65e0\u6cd5\u901a\u8fc7\u5b57\u5178\u6765\u5bf9\u4e0d\u540c\u7684\u5217\u8fdb\u884c\u4e0d\u540c\u7684 transform GroupBy . transform ( func , * args , ** kwargs ) apply \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u662f\u6700\u4e00\u822c\u5316\u7684\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u5c06\u5f85\u5904\u7406\u7684\u5bf9\u8c61\u62c6\u5206\u6210\u591a\u4e2a\u7247\u6bb5\uff0c\u7136\u540e\u5bf9\u5404\u4e2a\u7247\u6bb5\u8c03\u7528\u4f20\u5165\u7684\u51fd\u6570\uff0c\u6700\u540e\u5c1d\u8bd5\u5c06\u5404\u4e2a\u7247\u6bb5\u7ec4\u5408\u5230\u4e00\u8d77\u3002 GroupBy . apply ( func , * args , ** kwargs ) func \uff1a\u8fd0\u7b97\u51fd\u6570\u3002\u5176\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a\u5f85\u5904\u7406\u5bf9\u8c61\u3002\u5176\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6807\u91cf\u503c\u6216\u8005 pandas \u5bf9\u8c61\u3002 args/kwargs \u662f\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\u4e0e\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5bf9\u4e8e DataFrame \u7684 .groupby \u65f6\uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f DataFrame \uff1b\u5bf9\u4e8e Series \u7684 .groupby \uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Series \u3002 pd.cut()/qcut() \u51fd\u6570\u8fd4\u56de\u7684\u662f Categorical \u5bf9\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4f5c\u4e3a .groupby() \u7684 by \u53c2\u6570\u7684\u503c\u3002\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u6876\u5206\u6790\u3002","title":"7.8.\u5206\u7ec4\u4e0e\u805a\u5408"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#groupby","text":"Hadley Wickham\uff08\u8bb8\u591a\u70ed\u95e8R\u8bed\u8a00\u5305\u7684\u4f5c\u8005\uff09\u521b\u9020\u4e86\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u5206\u7ec4\u8fd0\u7b97\u7684\u672f\u8bed\"split-apply-combine\"\uff08\u62c6\u5206\uff0d\u5e94\u7528\uff0d\u5408\u5e76\uff09\uff1a split\uff1a\u6839\u636e\u5206\u7ec4\u952e\u5c06pandas\u5bf9\u8c61\uff08Series\u3001DataFrame\u6216\u8005\u5176\u4ed6\uff09\u5206\u6210\u51e0\u7ec4\u3002 apply\uff1a\u5c06\u51fd\u6570\u72ec\u7acb\u5730\u5e94\u7528\u4e8e\u6bcf\u4e2a\u7ec4\u3002 combine\uff1a\u5c06\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002 \u4e0b\u56fe\u5927\u81f4\u8bf4\u660e\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u7ec4\u805a\u5408\u8fc7\u7a0b\uff1a \u62c6\u5206\u6b65\u9aa4\u662f\u6700\u7b80\u5355\u7684\uff0c\u5206\u7ec4\u952e\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f\uff0c\u4e14\u7c7b\u578b\u4e0d\u5fc5\u76f8\u540c\uff1a \u5217\u8868\u6216\u6570\u7ec4\uff0c\u5176\u957f\u5ea6\u4e0e\u5f85\u5206\u7ec4\u7684\u8f74\u4e00\u6837\u3002 \u8868\u793aDataFrame\u67d0\u4e2a\u5217\u540d\u7684\u503c\u3002 \u5b57\u5178\u6216Series\uff0c\u7ed9\u51fa\u5f85\u5206\u7ec4\u8f74\u4e0a\u7684\u503c\u4e0e\u5206\u7ec4\u540d\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u8f74\u7d22\u5f15\u6216\u7d22\u5f15\u4e2d\u7684\u5404\u4e2a\u6807\u7b7e\u3002 \u540e\u4e09\u79cd\u90fd\u53ea\u662f\u7b2c\u4e00\u79cd\u7684\u5feb\u6377\u65b9\u5f0f\u800c\u5df2\uff0c\u5176\u6700\u7ec8\u76ee\u7684\u4ecd\u7136\u662f\u4ea7\u751f\u4e00\u7ec4\u7528\u4e8e\u62c6\u5206\u5bf9\u8c61\u7684\u503c\u3002 \u5728apply\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff1a \u6c47\u603b\uff1a\u591a\u4e2a\u6570\u6c47\u603b\u6210\u4e00\u4e2a\u6570\u503c\uff08\u4f8b\u5982\uff1a\u6c42\u548c\u3001\u5e73\u5747\u503c\uff09\u3002 \u8f6c\u6362\uff1a\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u5e76\u8fd4\u56de\u5177\u6709\u76f8\u4f3c\u7d22\u5f15\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\uff1a\u6807\u51c6\u5316\u3001\u586b\u5145NA\u503c\uff09\u3002 \u8fc7\u6ee4\uff1a\u6839\u636e\u51fd\u6570\u5728group\u4e0a\u9762\u7684\u8ba1\u7b97\u7ed3\u679c\u5f97\u5230 True \u6216 False \uff0c\u7531\u6b64\u51b3\u5b9a\u4e22\u5f03\u4e00\u4e9b\u7ec4\uff08\u4f8b\u5982\uff1a\u4e22\u5f03\u6210\u5458\u4e2a\u6570\u8fc7\u5c11\u7684\u7ec4\u3001\u6839\u636e\u5e73\u5747\u503c\u7b5b\u9009\u6570\u636e\uff09\u3002","title":"GroupBy\u673a\u5236"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#groupby_1","text":".groupby() \u65b9\u6cd5\u662f\u5206\u7ec4\u65b9\u6cd5\uff1a groupby ( by = None , axis = 0 , level = None , as_index : bool = True , sort : bool = True , group_keys : bool = True , squeeze : bool = False , observed : bool = False ) by \uff1a mapping function \u3001 list of function \u3001\u5b57\u5178\u3001\u5e8f\u5217\u3001\u5143\u7ec4\u3001 list of column name \u3002\u5b83\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\uff08\u5206\u7ec4\u952e\uff09\u3002 \u4f20\u5165\u51fd\u6570\uff0c\u5219\u5728\u6bcf\u4e2a index value \u4e0a\u8c03\u7528\u51fd\u6570\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e\uff0c axis \u6307\u5b9a\u662f\u54ea\u4e2a\u8f74\u7684 index value \u4f20\u5165 Series \u6216\u8005\u5b57\u5178\uff0c\u5219\u6839\u636e\u6bcf\u4e2a index value \u5728\u5b57\u5178/ Series \u4e2d\u7684\u503c\u6765\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \uff0c\u5219\u4f7f\u7528\u8be5 label \u62bd\u53d6\u51fa\u6765\u7684\u4e00\u5217\u6570\u636e\u4ea7\u751f\u5206\u7ec4\u6570\u636e \u4f20\u5165 column label \u7684 list \uff0c\u5219\u4f7f\u7528\u4e00\u7ec4 column label \u62bd\u53d6\u51fa\u6765\u7684\u591a\u5217\u6570\u636e\u4f5c\u4e3a\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\uff0c\u5219\u5b83\u76f4\u63a5\u6307\u5b9a\u4e86\u5206\u7ec4\u6570\u636e\u3002 \u4f20\u5165\u5e8f\u5217\u7684\u5e8f\u5217\uff0c\u5219\u4f7f\u7528\u8fd9\u4e9b\u5e8f\u5217\u62fc\u63a5\u6210\u4e00\u4e2a MulitiIndex \uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a MultiIndex \u66ff\u6362\u6389 index \u540e\uff0c\u6839\u636e label value \u6765\u5206\u7ec4\u3002\uff08\u4e8b\u5b9e\u4e0a\u5e76\u6ca1\u6709\u66ff\u6362\uff0c\u53ea\u662f\u7528\u4e8e\u8bf4\u660e\u8fd9\u4e2a\u8fc7\u7a0b\uff09 axis \uff1a\u6307\u5b9a\u6cbf\u7740\u54ea\u4e2a\u8f74\u5206\u7ec4 level \uff1a\u4e00\u4e2a\u6574\u6570\u3001 level name \u6216\u8005\u5176\u5e8f\u5217\u3002\u5982\u679c axis \u662f\u4e2a MultiIndex \uff0c\u5219\u5728\u6307\u5b9a\u7ea7\u522b\u4e0a\u7684\u7d22\u5f15\u6765\u5206\u7ec4 as_index \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c06 group label \u4f5c\u4e3a\u8f93\u51fa\u7684 index \u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f93\u51fa\u662f SQL \u98ce\u683c\u7684\u5206\u7ec4\uff08\u6b64\u65f6\u5206\u7ec4\u7684 key \u4f5c\u4e3a\u4e00\u5217\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a index \uff09\u3002 Series \u4e2d\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u4e3a True \u3002 sort \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5bf9\u5206\u7ec4\u7684\u952e\u8fdb\u884c\u6392\u5e8f\u3002 group_keys \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u4e14\u8c03\u7528\u4e86\u51fd\u6570\u6765\u51b3\u5b9a\u5206\u7ec4\uff0c\u5219\u6dfb\u52a0\u5206\u7ec4\u952e\u6765\u533a\u5206\u4e0d\u540c\u7684\u6570\u636e squeeze \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u5c3d\u53ef\u80fd\u7684\u7f29\u51cf\u7ed3\u679c\u7684\u7c7b\u578b\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a GroupBy \u5bf9\u8c61\u3002","title":"groupby\u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_1","text":"\u521b\u5efa\u793a\u4f8b\u6570\u636e: df = pd . DataFrame ({ 'Class' : [ '1\u73ed' , '2\u73ed' , '1\u73ed' , '1\u73ed' , '2\u73ed' , '2\u73ed' ], 'Gender' : [ '\u7537' , '\u7537' , '\u5973' , '\u7537' , '\u5973' , '\u5973' ], 'Math Score' : [ 72 , 86 , 76 , 85 , 89 , 90 ], 'Language Score' : [ 73 , 88 , 81 , 82 , 79 , 86 ]}, index = [ '\u5c0f\u660e' , '\u5c0f\u806a' , '\u5c0f\u7ea2' , '\u5c0f\u534e' , '\u5c0f\u4e3d' , '\u5c0f\u7f8e' ]) df . index . name = \"Name\" df Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86 \u4ee5\u4e0b\u662f\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u5206\u7ec4\u952e\u7684\u793a\u4f8b\u3002","title":"\u62c6\u5206\u7ec4"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#series","text":"grouped = df [ 'Math Score' ] . groupby ( dict ( df [ 'Class' ])) # grouped = df['Math Score'].groupby(df['Class']) pprint . pprint ( list ( grouped )) [('1\u73ed', Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name: Math Score, dtype: int64), ('2\u73ed', Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name: Math Score, dtype: int64)]","title":"Series\u6216\u5b57\u5178"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#column-label","text":"grouped = df . groupby ( 'Class' ) pprint . pprint ( list ( grouped )) [('1\u73ed', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82), ('2\u73ed', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86)] \u901a\u8fc7 axis \u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u884c\u7684index\uff1a grouped = df . groupby ( 'Name' , axis = 0 ) list ( grouped ) [('\u5c0f\u4e3d', Class Gender Math Score Language Score Name \u5c0f\u4e3d 2\u73ed \u5973 89 79), ('\u5c0f\u534e', Class Gender Math Score Language Score Name \u5c0f\u534e 1\u73ed \u7537 85 82), ('\u5c0f\u660e', Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73), ('\u5c0f\u7ea2', Class Gender Math Score Language Score Name \u5c0f\u7ea2 1\u73ed \u5973 76 81), ('\u5c0f\u7f8e', Class Gender Math Score Language Score Name \u5c0f\u7f8e 2\u73ed \u5973 90 86), ('\u5c0f\u806a', Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88)]","title":"column label"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#list-of-column-label","text":"# axis=1 \u6cbf\u77401\u8f74\u62c6\u5206 \u4f7f\u75280\u8f74\u7684lable grouped = df . groupby ([ 'Class' , 'Gender' ], axis = 1 ) pprint . pprint ( list ( grouped )) []","title":"list of column label"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_2","text":"seq_1 = list ( df [ 'Class' ]) seq_2 = list ( df [ 'Gender' ]) grouped = df [ 'Math Score' ] . groupby ( seq_1 ) print ( list ( grouped ), \" \\n \" ) grouped = df [ 'Math Score' ] . groupby ([ seq_1 , seq_2 ]) print ( list ( grouped )) [( '1\u73ed' , Name \u5c0f\u660e 72 \u5c0f\u7ea2 76 \u5c0f\u534e 85 Name : Math Score , dtype : int64 ), ( '2\u73ed' , Name \u5c0f\u806a 86 \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name : Math Score , dtype : int64 )] [(( '1\u73ed' , '\u5973' ), Name \u5c0f\u7ea2 76 Name : Math Score , dtype : int64 ), (( '1\u73ed' , '\u7537' ), Name \u5c0f\u660e 72 \u5c0f\u534e 85 Name : Math Score , dtype : int64 ), (( '2\u73ed' , '\u5973' ), Name \u5c0f\u4e3d 89 \u5c0f\u7f8e 90 Name : Math Score , dtype : int64 ), (( '2\u73ed' , '\u7537' ), Name \u5c0f\u806a 86 Name : Math Score , dtype : int64 )]","title":"\u5e8f\u5217"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_3","text":"# \u5b9a\u4e49\u51fd\u6570 def fun_1 ( key ): return key def fun_2 ( key ): return \"a\" # function grouped = df [ 'Math Score' ] . groupby ( fun_1 ) print ( list ( grouped ), \" \\n \" ) # list of function grouped = df . groupby ([ fun_1 , fun_2 ]) print ( list ( grouped )) [( '\u5c0f\u4e3d' , Name \u5c0f\u4e3d 89 Name : Math Score , dtype : int64 ), ( '\u5c0f\u534e' , Name \u5c0f\u534e 85 Name : Math Score , dtype : int64 ), ( '\u5c0f\u660e' , Name \u5c0f\u660e 72 Name : Math Score , dtype : int64 ), ( '\u5c0f\u7ea2' , Name \u5c0f\u7ea2 76 Name : Math Score , dtype : int64 ), ( '\u5c0f\u7f8e' , Name \u5c0f\u7f8e 90 Name : Math Score , dtype : int64 ), ( '\u5c0f\u806a' , Name \u5c0f\u806a 86 Name : Math Score , dtype : int64 )] [(( '\u5c0f\u4e3d' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u4e3d 2 \u73ed \u5973 89 79 ), (( '\u5c0f\u534e' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u534e 1 \u73ed \u7537 85 82 ), (( '\u5c0f\u660e' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u660e 1 \u73ed \u7537 72 73 ), (( '\u5c0f\u7ea2' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u7ea2 1 \u73ed \u5973 76 81 ), (( '\u5c0f\u7f8e' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u7f8e 2 \u73ed \u5973 90 86 ), (( '\u5c0f\u806a' , 'a' ), Class Gender Math Score Language Score Name \u5c0f\u806a 2 \u73ed \u7537 86 88 )]","title":"\u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_4","text":"grouped = df . groupby ( 'Class' ) for name , group in grouped : print ( name ) print ( group ) 1\u73ed Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82 2\u73ed Class Gender Math Score Language Score Name \u5c0f\u806a 2\u73ed \u7537 86 88 \u5c0f\u4e3d 2\u73ed \u5973 89 79 \u5c0f\u7f8e 2\u73ed \u5973 90 86","title":"\u904d\u5386\u7ec4"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_5","text":"grouped = df . groupby ( 'Class' ) grouped . get_group ( \"1\u73ed\" ) Class Gender Math Score Language Score Name \u5c0f\u660e 1\u73ed \u7537 72 73 \u5c0f\u7ea2 1\u73ed \u5973 76 81 \u5c0f\u534e 1\u73ed \u7537 85 82","title":"\u9009\u62e9\u7ec4"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#cut","text":"pandas . cut ( x , bins , right = True , labels = None , retbins = False , precision = 3 , include_lowest = False ) x \uff1a\u4e00\u7ef4\u7684\u6570\u7ec4\u3002 bins \uff1a\u4e00\u4e2a\u6574\u6570\u3001\u4e00\u4e2a\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u533a\u95f4\u662f\u7b49\u957f\u7684\uff0c\u4e14\u6700\u5de6\u4fa7\u7684\u533a\u95f4\u7684\u5de6\u4fa7\u6bd4 x \u6700\u5c0f\u503c\u5c0f 0.1% \uff1b\u6700\u53f3\u4fa7\u7684\u533a\u95f4\u7684\u53f3\u4fa7\u6bd4 x \u6700\u5927\u503c\u5927 0.1% \u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86 bins \u7684\u6bcf\u4e2a\u5212\u5206\u70b9\u3002 right \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u533a\u95f4\u662f\u5de6\u5f00\u53f3\u95ed\uff1b\u5426\u5219\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u3002 labels \uff1a\u4e00\u4e2a array \u6216\u8005 None \u3002\u5982\u679c\u4e3a\u4e00\u4e2a array \uff0c\u5219\u5b83\u6307\u5b9a\u4e86\u7ed3\u679c bins \u7684 label \uff08\u8981\u6c42\u957f\u5ea6\u4e0e bins \u6570\u91cf\u76f8\u540c\uff09\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u4f7f\u7528\u533a\u95f4\u6765\u8868\u793a\u3002 retbins \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u8fd4\u56de bins precision \uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u7ed9\u51fa\u5b58\u50a8\u548c\u663e\u793a bin label \u7684\u7cbe\u5ea6 include_lowest \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a True \uff0c\u5219\u6700\u5de6\u4fa7 bin \u7684\u5de6\u4fa7\u662f\u95ed\u533a\u95f4 \u8fd4\u56de\u7684\u662f\u4e00\u4e2a Categorical \u5bf9\u8c61\u6216\u8005 Series \u5bf9\u8c61\u3002\u8be5\u51fd\u6570\u7c7b\u4f3c\u4e8e numpy.histogram() \u51fd\u6570\u3002","title":"cut \u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#qcut","text":"pandas . qcut ( x , q , labels = None , retbins = False , precision = 3 ) q \uff1a\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5e8f\u5217\u3002 \u6574\u6570\uff1a\u5b83\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\u7684\u6570\u91cf\u3002 \u4e00\u4e2a\u5e8f\u5217\uff1a\u5b83\u7ed9\u51fa\u4e86\u767e\u5206\u6bd4\u5212\u5206\u70b9\u3002\u6bd4\u5982 [0,0.25,0.5,0.75,0.1] \u3002 0.25 \u4ee3\u8868 25% \u5212\u5206\u70b9\u3002\u5982\u679c\u6570\u636e\u4e0d\u5728\u4efb\u4f55\u533a\u95f4\u5185\uff0c\u5219\u6807\u8bb0\u4e3a NaN \u3002 \u5176\u4ed6\u53c2\u6570\u4e0e cut \u76f8\u540c\u3002( qcut \u6ca1\u6709 bins \u53c2\u6570\uff09","title":"qcut \u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_6","text":"","title":"\u805a\u5408"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_7","text":"\u805a\u5408\u51fd\u6570\u53ef\u4ee5\u51cf\u5c0f\u8fd4\u56de\u5bf9\u8c61\u7684\u5c3a\u5bf8\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u6c47\u603b\u529f\u80fd\uff1a \u529f\u80fd \u63cf\u8ff0 mean() \u8ba1\u7b97\u7ec4\u7684\u5e73\u5747\u503c sum() \u8ba1\u7b97\u7ec4\u503c\u4e4b\u548c size() \u8ba1\u7b97\u7ec4\u5927\u5c0f count() \u8ba1\u7b97\u5404\u7ec4\u7684\u5143\u7d20\u7684\u6570\u91cf std() \u7ec4\u7684\u6807\u51c6\u504f\u5dee var() \u8ba1\u7b97\u7ec4\u7684\u65b9\u5dee sem() \u5747\u503c\u7684\u6807\u51c6\u8bef describe() \u751f\u6210\u63cf\u8ff0\u6027\u7edf\u8ba1 first() \u8fd4\u56de\u6bcf\u7ec4\u7684\u7b2c\u4e00\u4e2a\u503c last() \u8fd4\u56de\u6bcf\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u503c nth() \u53d6\u7b2cn\u4e2a\u503c\uff0c\u5982\u679cn\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5219\u53d6\u4e00\u4e2a\u5b50\u96c6 min() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5c0f\u503c max() \u8ba1\u7b97\u7ec4\u503c\u7684\u6700\u5927\u503c \u4e0a\u9762\u7684\u6c47\u603b\u51fd\u6570\u5c06\u6392\u9664 NA \u503c\u3002 \u5c06Series\u51cf\u5c11\u4e3a\u6807\u91cf\u503c\u7684\u4efb\u4f55\u51fd\u6570\u90fd\u662f\u805a\u5408\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u3002","title":"\u5e38\u7528\u805a\u5408\u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_8","text":"\u5982\u679c\u5e0c\u671b\u4f7f\u7528\u81ea\u5df1\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ea\u9700\u8981\u5c06\u5176\u4f20\u5165 .aggregate(func, *args, **kwargs) \u6216\u8005 .agg() \u65b9\u6cd5\u5373\u53ef\u3002\u5176\u4e2d func \u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 \u6ce8\u610f\uff1a\u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u4f1a\u6162\u5f97\u591a\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u6784\u9020\u4e2d\u95f4\u5206\u7ec4\u6570\u636e\u5757\u65f6\u5b58\u5728\u975e\u5e38\u5927\u7684\u5f00\u9500\uff08\u51fd\u6570\u8c03\u7528\u3001\u6570\u636e\u91cd\u6392\u7b49\uff09 \u4f60\u53ef\u4ee5\u5c06\u524d\u9762\u4ecb\u7ecd\u7684 GroupBy \u7684\u7edf\u8ba1\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u5165\u3002 \u5982\u679c\u4f60\u4f20\u5165\u4e86\u4e00\u7ec4\u51fd\u6570\u6216\u8005\u51fd\u6570\u540d\uff0c\u5219\u5f97\u5230\u7684\u7ed3\u679c\u4e2d\uff0c\u76f8\u5e94\u7684\u5217\u5c31\u7528\u5bf9\u5e94\u7684\u51fd\u6570\u540d\u547d\u540d\u3002\u5982\u679c\u4f60\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u5219\u4f7f\u7528 (name,function) \u5143\u7ec4\u7684\u5e8f\u5217\u3002\u5176\u4e2d name \u7528\u4f5c\u7ed3\u679c\u5217\u7684\u5217\u540d\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u5bf9\u4e0d\u540c\u7684\u5217\u91c7\u7528\u4e0d\u540c\u7684\u805a\u5408\u51fd\u6570\uff0c\u5219\u5411 agg() \u4f20\u5165\u4e00\u4e2a\u5b57\u5178\u3002\u5b57\u5178\u7684\u952e\u5c31\u662f\u5217\u540d\uff0c\u503c\u5c31\u662f\u4f60\u5e0c\u671b\u5bf9\u8be5\u5217\u91c7\u7528\u7684\u51fd\u6570\u3002 grouped = df . groupby ( 'Class' ) grouped . aggregate ( np . sum ) Math Score Language Score Class 1\u73ed 233 236 2\u73ed 265 253","title":"\u81ea\u5b9a\u4e49\u805a\u5408\u51fd\u6570"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#apply","text":"df . apply ( func , axis = 0 , raw = False , reduce = None , result_type = None , args = (), ** kwds ) func \uff1a\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5b83\u4f1a\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\u6216\u8005\u6bcf\u4e00\u5217 axis \uff1a\u6307\u5b9a\u5e94\u7528\u4e8e\u884c\u8fd8\u662f\u5217\u3002\u5982\u679c\u4e3a 0/'index' \uff0c\u5219\u6cbf\u77400\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u5217\uff09\uff1b\u5982\u679c\u4e3a 1/'columns' \uff0c\u5219\u6cbf\u77401\u8f74\u8ba1\u7b97\uff08\u5e94\u7528\u4e8e\u6bcf\u4e00\u884c\uff09\u3002 broadcast \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \uff08\u4e0d\u8db3\u7684\u90e8\u5206\u901a\u8fc7\u5e7f\u64ad\u6765\u586b\u5145\uff09 raw \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5982\u679c\u4e3a False \uff0c\u5219\u8f6c\u6362\u6bcf\u4e00\u884c/\u6bcf\u4e00\u5217\u4e3a\u4e00\u4e2a Series \uff0c\u7136\u540e\u4f20\u7ed9 func \u4f5c\u4e3a\u53c2\u6570\u3002\u5982\u679c True \uff0c\u5219 func \u63a5\u53d7\u5230\u7684\u662f ndarray \uff0c\u800c\u4e0d\u662f Series reduce \uff1a\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u7528\u4e8e\u5224\u65ad\u5f53 DataFrame \u4e3a\u7a7a\u65f6\uff0c\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a Series \u8fd8\u662f\u8fd4\u56de\u4e00\u4e2a DataFrame \u3002\u5982\u679c\u4e3a True \uff0c\u5219\u7ed3\u679c\u4e3a Series \uff1b\u5982\u679c\u4e3a False \uff0c\u5219\u7ed3\u679c\u4e3a DataFrame \u3002 args \uff1a\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u59cb\u7ec8\u4e3a Series/ndarray \uff09","title":"apply \u65b9\u6cd5"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.8.%E5%88%86%E7%BB%84%E4%B8%8E%E8%81%9A%E5%90%88.html#_9","text":"agg/aggregate \u53ea\u662f\u5206\u7ec4\u7ea7\u8fd0\u7b97\u5176\u4e2d\u7684\u4e00\u79cd\u3002\u5b83\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6807\u91cf\u503c\u3002 transform \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u4e5f\u63a5\u53d7\u4e00\u7ef4\u6570\u7ec4\u3002\u53ea\u80fd\u8fd4\u56de\u4e24\u79cd\u7ed3\u679c\uff1a\u8981\u4e48\u662f\u4e00\u4e2a\u6807\u91cf\u503c\uff08\u8be5\u6807\u91cf\u503c\u5c06\u88ab\u5e7f\u64ad\uff09\uff0c\u6216\u8005\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u7ed3\u679c\u6570\u7ec4\u3002 \u65e0\u6cd5\u901a\u8fc7\u5b57\u5178\u6765\u5bf9\u4e0d\u540c\u7684\u5217\u8fdb\u884c\u4e0d\u540c\u7684 transform GroupBy . transform ( func , * args , ** kwargs ) apply \u662f\u53e6\u4e00\u4e2a\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u662f\u6700\u4e00\u822c\u5316\u7684\u5206\u7ec4\u7ea7\u8fd0\u7b97\u3002\u5b83\u5c06\u5f85\u5904\u7406\u7684\u5bf9\u8c61\u62c6\u5206\u6210\u591a\u4e2a\u7247\u6bb5\uff0c\u7136\u540e\u5bf9\u5404\u4e2a\u7247\u6bb5\u8c03\u7528\u4f20\u5165\u7684\u51fd\u6570\uff0c\u6700\u540e\u5c1d\u8bd5\u5c06\u5404\u4e2a\u7247\u6bb5\u7ec4\u5408\u5230\u4e00\u8d77\u3002 GroupBy . apply ( func , * args , ** kwargs ) func \uff1a\u8fd0\u7b97\u51fd\u6570\u3002\u5176\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u4e3a\u5f85\u5904\u7406\u5bf9\u8c61\u3002\u5176\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6807\u91cf\u503c\u6216\u8005 pandas \u5bf9\u8c61\u3002 args/kwargs \u662f\u4f20\u9012\u7ed9 func \u7684\u989d\u5916\u7684\u4f4d\u7f6e\u53c2\u6570\u4e0e\u5173\u952e\u5b57\u53c2\u6570\u3002 \u5bf9\u4e8e DataFrame \u7684 .groupby \u65f6\uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f DataFrame \uff1b\u5bf9\u4e8e Series \u7684 .groupby \uff0c\u4f20\u9012\u7ed9 func \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Series \u3002 pd.cut()/qcut() \u51fd\u6570\u8fd4\u56de\u7684\u662f Categorical \u5bf9\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4f5c\u4e3a .groupby() \u7684 by \u53c2\u6570\u7684\u503c\u3002\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u6876\u5206\u6790\u3002","title":"\u5206\u7ec4\u7ea7\u8fd0\u7b97"},{"location":"pandas%E7%AC%94%E8%AE%B0/7.9.%E7%BB%98%E5%9B%BE.html","text":"from Toolkit.Help import Help as H import numpy as np import pandas as pd Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 pandas version: 1.0.1 numpy version: 1.18.1 module","title":"7.9.\u7ed8\u56fe"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html","text":"from sklearn import datasets Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.29 sklearn version: 0.21.3 \u6570\u636e\u96c6 sklearn \u5305\u81ea\u5e26\u4e00\u4e9b\u73a9\u5177\u6570\u636e\u96c6\uff0c\u8fd8\u5177\u6709\u4e00\u4e9b\u4eba\u5de5\u6570\u636e\u751f\u6210\u5668\u3002\u4e3b\u8981\u63a5\u53e3\u5982\u4e0b\uff1a datasets.load_*() \uff1a\u83b7\u53d6\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u6570\u636e\u5df2\u7ecf\u5305\u542b\u5728datasets\u91cc\u9762\u3002 load_* \u51fd\u6570\u6709\u4e00\u4e2a\u901a\u7528\u53c2\u6570 return_X_y \uff0c\u9ed8\u8ba4\u503c\u4e3a return_X_y=False \uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a sklearn.utils.Bunch \u5bf9\u8c61\u3002\u5982\u679c return_X_y=True \uff0c\u5219\u4ec5\u8fd4\u56detuple\uff1a (data,target) \u3002 datasets.fetch_*() \uff1a\u83b7\u53d6\u5927\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u9700\u8981\u4ece\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u3002\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f data_home \uff0c\u8868\u793a\u6570\u636e\u96c6\u4e0b\u8f7d\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662f ~/scikit_learn_data/ \u3002 ~ \u8868\u793a\u8ba1\u7b97\u673a\u7528\u6237\u8def\u5f84\uff0c\u4f8b\u5982'C:\\Users\\UserName'\u3002\u8981\u4fee\u6539\u9ed8\u8ba4\u76ee\u5f55\uff0c\u53ef\u4ee5\u4fee\u6539\u73af\u5883\u53d8\u91cfSCIKIT_LEARN_DATA\u3002 datasets.make_*() \uff1a\u672c\u5730\u751f\u6210\u6570\u636e\u96c6\u3002 datasets . get_data_home () # \u83b7\u53d6\u6570\u636e\u96c6\u76ee\u5f55 datasets . clear_data_home ( data_home = None ) # \u5220\u9664\u6240\u6709\u4e0b\u8f7d\u6570\u636e load* \u548c fetch* \u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u662f datasets.base.Bunch \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a dict \u3002\u53ef\u50cf dict \u4e00\u6837\uff0c\u901a\u8fc7 key \u8bbf\u95ee value \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5c5e\u6027\u65b9\u5f0f\u8bbf\u95ee\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a data\uff1a\u7279\u5f81\u6570\u636e\u6570\u636e\uff08\u6837\u672c\u96c6\uff09\uff0c\u662f $\\text{n_samples} \\times \\text{n_features}$ \u7684\u4e8c\u7ef4 numpy.ndarray \u6570\u7ec4 target\uff1a\u6807\u7b7e\u6570\u7ec4\uff0c\u662f n_samples \u7684\u4e00\u7ef4 numpy.ndarray DESCR\uff1a\u6570\u636e\u63cf\u8ff0 feature_names\uff1a\u7279\u5f81\u540d target_names\uff1a\u6807\u7b7e\u540d loaders:\u52a0\u8f7d\u5668\u2014\u2014\u83b7\u53d6\u5c0f\u6570\u636e\u96c6 \u5c0f\u6570\u636e\u96c6\u5728 sklearn \u91cc\u9762\u7684API\u7edf\u4e00\u4e3a load_ \uff0cThe dataset loaders\u53ef\u4ee5\u52a0\u8f7d\u5c0f\u578b\u6807\u51c6\u6570\u636e\u3002\u5c0f\u6570\u636e\u96c6\u662f\u5c01\u88c5\u5728 sklearn \u91cc\u9762\u7684\u3002 \u4e00\u5171\u670912\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a \u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6 load_boston(return_X_y) \uff0c\u56de\u5f52 \u4e73\u817a\u764c\u6570\u636e\u96c6 load_breast_cancer(return_X_y) \uff0c\u5206\u7c7b \u7cd6\u5c3f\u75c5\u6570\u636e\u96c6 load_diabetes(return_X_y) \uff0c\u56de\u5f52 \u6570\u5b57\u6570\u636e\u96c6 load_digits(n_class, return_X_y) \uff0c\u5206\u7c7b \u9e22\u5c3e\u82b1\u6570\u636e\u96c6 load_iris(return_X_y) \uff0c\u5206\u7c7b \u8461\u8404\u9152\u6570\u636e\u96c6 load_wine(return_X_y) \uff0c\u5206\u7c7b \u00b7\u00b7\u00b7 \u8fd9\u4e9b\u6570\u636e\u96c6\u53ef\u7528\u4e8e\u5feb\u901f\u5b9e\u73b0 scikit-learn \u4e2d\u7684\u5404\u79cd\u7b97\u6cd5\u3002\u4f46\u662f\u8fd9\u4e9b\u6570\u636e\u96c6\u592a\u5c0f\uff0c\u5e76\u4e0d\u80fd\u4ee3\u8868\u73b0\u5b9e\u4e16\u754c\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002 ''' \u7528\u4e8e\u5206\u7c7b\u7684iris\u6570\u636e ''' iris = datasets . load_iris ( return_X_y = True ) # (data,target) \u7684\u4e8c\u7ef4tuple type ( iris ) iris = datasets . load_iris ( return_X_y = False ) type ( iris ) iris . data # \u6837\u672c\u6570\u636e iris [ \"data\" ] iris . target # label \u6570\u636e iris . DESCR # \u6570\u636e\u63cf\u8ff0 iris . feature_names # \u6837\u672c\u7279\u5f81\u540d\uff08\u53d8\u91cf\u540d\uff09 iris . target_names # label \u540d fetchers:\u63d0\u53d6\u5668\u2014\u2014\u83b7\u53d6\u5927\u6570\u636e\u96c6 # \u52a0\u8f7d20\u4e2a\u65b0\u95fb\u7ec4\u6570\u636e\u96c6\u4e2d\u7684\u6587\u4ef6\u540d\u548c\u6570\u636e datasets . fetch_20newsgroups ( data_home = None , subset = 'train' , categories = None , shuffle = True , random_state = 42 , remove = (), download_if_missing = True ) data_home : \u6307\u5b9a\u6570\u636e\u96c6\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u503c\uff1aNone\uff0c\u8868\u793a\u5b58\u50a8\u5728 \u301c/ scikit_learn_data \u6587\u4ef6\u5939\u4e2d\u3002 subset : train \u6216\u8005 test , all \uff0c\u53ef\u9009\uff0c\u5206\u522b\u5bf9\u5e94\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u4e24\u8005\u3002 categories : \u65e0\u6216\u5b57\u7b26\u4e32\u6216 Unicode \u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u52a0\u8f7d\u6240\u6709\u7c7b\u522b\u3002\u5982\u679c\u4e0d\u662f\u65e0\uff0c\u8981\u52a0\u8f7d\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff08\u5ffd\u7565\u5176\u4ed6\u7c7b\u522b\uff09 shuffle : \u662f\u5426\u5bf9\u6570\u636e\u8fdb\u884c\u6d17\u724c\u3002 random_state : numpy \u968f\u673a\u6570\u751f\u6210\u5668\u6216\u79cd\u5b50\u6574\u6570\u3002 download_if_missing : \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aTrue\uff0c\u5982\u679cFalse\uff0c\u5982\u679c\u6570\u636e\u4e0d\u5728\u672c\u5730\u53ef\u7528\u800c\u4e0d\u662f\u5c1d\u8bd5\u4ece\u6e90\u7ad9\u70b9\u4e0b\u8f7d\u6570\u636e\uff0c\u5219\u5f15\u53d1 IOError \u3002 \u4e00\u5171\u670911\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a 20\u7ec4\u65b0\u95fb\u6570\u636e fetch_20newsgroups() \uff0c\u5206\u7c7b 20\u7ec4\u5411\u91cf\u5316\u7684\u65b0\u95fb\u6570\u636e fetch_20newsgroups_vectorized() \uff0c\u5206\u7c7b \u52a0\u5229\u798f\u5c3c\u4e9a\u4f4f\u623f\u6570\u636e\u96c6 fetch_california_housing() \uff0c\u56de\u5f52 fetch_covtype() \uff0c\u5206\u7c7b fetch_kddcup99() \uff0c\u5206\u7c7b fetch_lfw_pairs() \uff0c\u5206\u7c7b fetch_lfw_people() \uff0c\u5206\u7c7b fetch_olivetti_faces() \uff0c fetch_openml() \uff0c fetch_rcvl() \uff0c\u5206\u7c7b fetch_species_distributions() \uff0c\u5206\u7c7b Samples generators:\u6837\u672c\u751f\u6210\u5668 \u5206\u7c7b make_classification \uff1a\u751f\u6210\u968f\u673a\u7684$n$\u5206\u7c7b\u6570\u636e\u3002 # \u751f\u6210\u7528\u4e8e\u5206\u7c7b\u7684\u6570\u636e\u96c6 datasets . make_classification ( n_samples = 100 , n_features = 20 , n_informative = 2 , n_redundant = 2 , n_repeated = 0 , n_classes = 2 , n_clusters_per_class = 2 , weights = None , flip_y = 0.01 , class_sep = 1.0 , hypercube = True , shift = 0.0 , scale = 1.0 , shuffle = True , random_state = None ) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int \uff0c\u53ef\u9009\uff08\u9ed8\u8ba4= 20\uff09\uff0c\u7279\u5f81\u603b\u6570\u3002 n_features \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e n_repeated + n_repeated + n_informative \u3002 n_repeated : int \uff0c\u91cd\u590d\u7684\u7279\u5f81\u6570\u91cf\u3002 n_redundant : int \uff0c\u4e0e\u5176\u4ed6\u7279\u5f81\u7ebf\u6027\u76f8\u5173\u7684\u7279\u5f81\u6570\u91cf\u3002 n_informative : int \uff0cn_clusters_per_class must be smaller or equal 2 ** n_informative\u3002 n_classes : int \uff0c\u53ef\u9009\uff08default = 2)\uff0c\u7c7b\uff08\u6216\u6807\u7b7e\uff09\u7684\u5206\u7c7b\u95ee\u9898\u7684\u6570\u91cf\u3002 weights : \u6bcf\u4e2a\u7c7b\u7684\u6743\u91cd\uff0c\u7528\u4e8e\u5206\u914d\u6837\u672c\u70b9\u3002 lip_y : \u968f\u673a\u5206\u914d\u7c7b\u522b\u7684\u6837\u672c\u6bd4\u4f8b\u3002\u8f83\u5927\u7684\u503c\u4f1a\u5728\u6807\u7b7e\u4e2d\u5f15\u5165\u566a\u97f3\uff0c\u5e76\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u56f0\u96be\u3002 class_sep : \u8d85\u7acb\u65b9\u4f53\u5927\u5c0f\u4e58\u4ee5\u7684\u56e0\u5b50\u3002\u8f83\u5927\u7684\u503c\u5206\u6563\u4e86\u7fa4\u96c6/\u7c7b\uff0c\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u5bb9\u6613\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002 \u56de\u5f52 make_regression \uff1a\u751f\u6210\u56de\u5f52\u6570\u636e\u3002 # \u751f\u6210\u7528\u4e8e\u56de\u5f52\u7684\u6570\u636e\u96c6 datasets . make_regression ( n_samples = 100 , n_features = 100 , n_informative = 10 , n_targets = 1 , bias = 0.0 , effective_rank = None , tail_strength = 0.5 , noise = 0.0 , shuffle = True , coef = False , random_state = None ) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int ,optional\uff08default = 100)\uff0c\u7279\u5f81\u6570\u91cf\u3002 coef : boolean \uff0coptional\uff08default = False\uff09\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u8fd4\u56de\u5e95\u5c42\u7ebf\u6027\u6a21\u578b\u7684\u7cfb\u6570\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002","title":"11.1.\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_1","text":"sklearn \u5305\u81ea\u5e26\u4e00\u4e9b\u73a9\u5177\u6570\u636e\u96c6\uff0c\u8fd8\u5177\u6709\u4e00\u4e9b\u4eba\u5de5\u6570\u636e\u751f\u6210\u5668\u3002\u4e3b\u8981\u63a5\u53e3\u5982\u4e0b\uff1a datasets.load_*() \uff1a\u83b7\u53d6\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u6570\u636e\u5df2\u7ecf\u5305\u542b\u5728datasets\u91cc\u9762\u3002 load_* \u51fd\u6570\u6709\u4e00\u4e2a\u901a\u7528\u53c2\u6570 return_X_y \uff0c\u9ed8\u8ba4\u503c\u4e3a return_X_y=False \uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a sklearn.utils.Bunch \u5bf9\u8c61\u3002\u5982\u679c return_X_y=True \uff0c\u5219\u4ec5\u8fd4\u56detuple\uff1a (data,target) \u3002 datasets.fetch_*() \uff1a\u83b7\u53d6\u5927\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u9700\u8981\u4ece\u7f51\u7edc\u4e0a\u4e0b\u8f7d\u3002\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f data_home \uff0c\u8868\u793a\u6570\u636e\u96c6\u4e0b\u8f7d\u7684\u76ee\u5f55\uff0c\u9ed8\u8ba4\u662f ~/scikit_learn_data/ \u3002 ~ \u8868\u793a\u8ba1\u7b97\u673a\u7528\u6237\u8def\u5f84\uff0c\u4f8b\u5982'C:\\Users\\UserName'\u3002\u8981\u4fee\u6539\u9ed8\u8ba4\u76ee\u5f55\uff0c\u53ef\u4ee5\u4fee\u6539\u73af\u5883\u53d8\u91cfSCIKIT_LEARN_DATA\u3002 datasets.make_*() \uff1a\u672c\u5730\u751f\u6210\u6570\u636e\u96c6\u3002 datasets . get_data_home () # \u83b7\u53d6\u6570\u636e\u96c6\u76ee\u5f55 datasets . clear_data_home ( data_home = None ) # \u5220\u9664\u6240\u6709\u4e0b\u8f7d\u6570\u636e load* \u548c fetch* \u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u662f datasets.base.Bunch \uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a dict \u3002\u53ef\u50cf dict \u4e00\u6837\uff0c\u901a\u8fc7 key \u8bbf\u95ee value \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5c5e\u6027\u65b9\u5f0f\u8bbf\u95ee\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a data\uff1a\u7279\u5f81\u6570\u636e\u6570\u636e\uff08\u6837\u672c\u96c6\uff09\uff0c\u662f $\\text{n_samples} \\times \\text{n_features}$ \u7684\u4e8c\u7ef4 numpy.ndarray \u6570\u7ec4 target\uff1a\u6807\u7b7e\u6570\u7ec4\uff0c\u662f n_samples \u7684\u4e00\u7ef4 numpy.ndarray DESCR\uff1a\u6570\u636e\u63cf\u8ff0 feature_names\uff1a\u7279\u5f81\u540d target_names\uff1a\u6807\u7b7e\u540d","title":"\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#loaders","text":"\u5c0f\u6570\u636e\u96c6\u5728 sklearn \u91cc\u9762\u7684API\u7edf\u4e00\u4e3a load_ \uff0cThe dataset loaders\u53ef\u4ee5\u52a0\u8f7d\u5c0f\u578b\u6807\u51c6\u6570\u636e\u3002\u5c0f\u6570\u636e\u96c6\u662f\u5c01\u88c5\u5728 sklearn \u91cc\u9762\u7684\u3002 \u4e00\u5171\u670912\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a \u6ce2\u58eb\u987f\u623f\u4ef7\u6570\u636e\u96c6 load_boston(return_X_y) \uff0c\u56de\u5f52 \u4e73\u817a\u764c\u6570\u636e\u96c6 load_breast_cancer(return_X_y) \uff0c\u5206\u7c7b \u7cd6\u5c3f\u75c5\u6570\u636e\u96c6 load_diabetes(return_X_y) \uff0c\u56de\u5f52 \u6570\u5b57\u6570\u636e\u96c6 load_digits(n_class, return_X_y) \uff0c\u5206\u7c7b \u9e22\u5c3e\u82b1\u6570\u636e\u96c6 load_iris(return_X_y) \uff0c\u5206\u7c7b \u8461\u8404\u9152\u6570\u636e\u96c6 load_wine(return_X_y) \uff0c\u5206\u7c7b \u00b7\u00b7\u00b7 \u8fd9\u4e9b\u6570\u636e\u96c6\u53ef\u7528\u4e8e\u5feb\u901f\u5b9e\u73b0 scikit-learn \u4e2d\u7684\u5404\u79cd\u7b97\u6cd5\u3002\u4f46\u662f\u8fd9\u4e9b\u6570\u636e\u96c6\u592a\u5c0f\uff0c\u5e76\u4e0d\u80fd\u4ee3\u8868\u73b0\u5b9e\u4e16\u754c\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u3002 ''' \u7528\u4e8e\u5206\u7c7b\u7684iris\u6570\u636e ''' iris = datasets . load_iris ( return_X_y = True ) # (data,target) \u7684\u4e8c\u7ef4tuple type ( iris ) iris = datasets . load_iris ( return_X_y = False ) type ( iris ) iris . data # \u6837\u672c\u6570\u636e iris [ \"data\" ] iris . target # label \u6570\u636e iris . DESCR # \u6570\u636e\u63cf\u8ff0 iris . feature_names # \u6837\u672c\u7279\u5f81\u540d\uff08\u53d8\u91cf\u540d\uff09 iris . target_names # label \u540d","title":"loaders:\u52a0\u8f7d\u5668\u2014\u2014\u83b7\u53d6\u5c0f\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#fetchers","text":"# \u52a0\u8f7d20\u4e2a\u65b0\u95fb\u7ec4\u6570\u636e\u96c6\u4e2d\u7684\u6587\u4ef6\u540d\u548c\u6570\u636e datasets . fetch_20newsgroups ( data_home = None , subset = 'train' , categories = None , shuffle = True , random_state = 42 , remove = (), download_if_missing = True ) data_home : \u6307\u5b9a\u6570\u636e\u96c6\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u503c\uff1aNone\uff0c\u8868\u793a\u5b58\u50a8\u5728 \u301c/ scikit_learn_data \u6587\u4ef6\u5939\u4e2d\u3002 subset : train \u6216\u8005 test , all \uff0c\u53ef\u9009\uff0c\u5206\u522b\u5bf9\u5e94\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u4e24\u8005\u3002 categories : \u65e0\u6216\u5b57\u7b26\u4e32\u6216 Unicode \u7684\u96c6\u5408\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u52a0\u8f7d\u6240\u6709\u7c7b\u522b\u3002\u5982\u679c\u4e0d\u662f\u65e0\uff0c\u8981\u52a0\u8f7d\u7684\u7c7b\u522b\u540d\u79f0\u5217\u8868\uff08\u5ffd\u7565\u5176\u4ed6\u7c7b\u522b\uff09 shuffle : \u662f\u5426\u5bf9\u6570\u636e\u8fdb\u884c\u6d17\u724c\u3002 random_state : numpy \u968f\u673a\u6570\u751f\u6210\u5668\u6216\u79cd\u5b50\u6574\u6570\u3002 download_if_missing : \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aTrue\uff0c\u5982\u679cFalse\uff0c\u5982\u679c\u6570\u636e\u4e0d\u5728\u672c\u5730\u53ef\u7528\u800c\u4e0d\u662f\u5c1d\u8bd5\u4ece\u6e90\u7ad9\u70b9\u4e0b\u8f7d\u6570\u636e\uff0c\u5219\u5f15\u53d1 IOError \u3002 \u4e00\u5171\u670911\u4e2a\u5c0f\u6570\u636e\u96c6\u3002\u5206\u522b\u5982\u4e0b\uff1a 20\u7ec4\u65b0\u95fb\u6570\u636e fetch_20newsgroups() \uff0c\u5206\u7c7b 20\u7ec4\u5411\u91cf\u5316\u7684\u65b0\u95fb\u6570\u636e fetch_20newsgroups_vectorized() \uff0c\u5206\u7c7b \u52a0\u5229\u798f\u5c3c\u4e9a\u4f4f\u623f\u6570\u636e\u96c6 fetch_california_housing() \uff0c\u56de\u5f52 fetch_covtype() \uff0c\u5206\u7c7b fetch_kddcup99() \uff0c\u5206\u7c7b fetch_lfw_pairs() \uff0c\u5206\u7c7b fetch_lfw_people() \uff0c\u5206\u7c7b fetch_olivetti_faces() \uff0c fetch_openml() \uff0c fetch_rcvl() \uff0c\u5206\u7c7b fetch_species_distributions() \uff0c\u5206\u7c7b","title":"fetchers:\u63d0\u53d6\u5668\u2014\u2014\u83b7\u53d6\u5927\u6570\u636e\u96c6"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#samples-generators","text":"","title":"Samples generators:\u6837\u672c\u751f\u6210\u5668"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_2","text":"make_classification \uff1a\u751f\u6210\u968f\u673a\u7684$n$\u5206\u7c7b\u6570\u636e\u3002 # \u751f\u6210\u7528\u4e8e\u5206\u7c7b\u7684\u6570\u636e\u96c6 datasets . make_classification ( n_samples = 100 , n_features = 20 , n_informative = 2 , n_redundant = 2 , n_repeated = 0 , n_classes = 2 , n_clusters_per_class = 2 , weights = None , flip_y = 0.01 , class_sep = 1.0 , hypercube = True , shift = 0.0 , scale = 1.0 , shuffle = True , random_state = None ) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int \uff0c\u53ef\u9009\uff08\u9ed8\u8ba4= 20\uff09\uff0c\u7279\u5f81\u603b\u6570\u3002 n_features \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e n_repeated + n_repeated + n_informative \u3002 n_repeated : int \uff0c\u91cd\u590d\u7684\u7279\u5f81\u6570\u91cf\u3002 n_redundant : int \uff0c\u4e0e\u5176\u4ed6\u7279\u5f81\u7ebf\u6027\u76f8\u5173\u7684\u7279\u5f81\u6570\u91cf\u3002 n_informative : int \uff0cn_clusters_per_class must be smaller or equal 2 ** n_informative\u3002 n_classes : int \uff0c\u53ef\u9009\uff08default = 2)\uff0c\u7c7b\uff08\u6216\u6807\u7b7e\uff09\u7684\u5206\u7c7b\u95ee\u9898\u7684\u6570\u91cf\u3002 weights : \u6bcf\u4e2a\u7c7b\u7684\u6743\u91cd\uff0c\u7528\u4e8e\u5206\u914d\u6837\u672c\u70b9\u3002 lip_y : \u968f\u673a\u5206\u914d\u7c7b\u522b\u7684\u6837\u672c\u6bd4\u4f8b\u3002\u8f83\u5927\u7684\u503c\u4f1a\u5728\u6807\u7b7e\u4e2d\u5f15\u5165\u566a\u97f3\uff0c\u5e76\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u56f0\u96be\u3002 class_sep : \u8d85\u7acb\u65b9\u4f53\u5927\u5c0f\u4e58\u4ee5\u7684\u56e0\u5b50\u3002\u8f83\u5927\u7684\u503c\u5206\u6563\u4e86\u7fa4\u96c6/\u7c7b\uff0c\u4f7f\u5206\u7c7b\u4efb\u52a1\u66f4\u52a0\u5bb9\u6613\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002","title":"\u5206\u7c7b"},{"location":"scikit-learn/11.1.%E6%95%B0%E6%8D%AE%E9%9B%86.html#_3","text":"make_regression \uff1a\u751f\u6210\u56de\u5f52\u6570\u636e\u3002 # \u751f\u6210\u7528\u4e8e\u56de\u5f52\u7684\u6570\u636e\u96c6 datasets . make_regression ( n_samples = 100 , n_features = 100 , n_informative = 10 , n_targets = 1 , bias = 0.0 , effective_rank = None , tail_strength = 0.5 , noise = 0.0 , shuffle = True , coef = False , random_state = None ) n_samples : int \uff0coptional\uff08default = 100)\uff0c\u6837\u672c\u6570\u91cf\u3002 n_features : int ,optional\uff08default = 100)\uff0c\u7279\u5f81\u6570\u91cf\u3002 coef : boolean \uff0coptional\uff08default = False\uff09\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u8fd4\u56de\u5e95\u5c42\u7ebf\u6027\u6a21\u578b\u7684\u7cfb\u6570\u3002 random_state : int \uff0c RandomState \u5b9e\u4f8b\u6216\u65e0\uff0c\u53ef\u9009\uff08\u9ed8\u8ba4=\u65e0\uff09\u5982\u679c int \uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u4f7f\u7528\u7684\u79cd\u5b50\u5982\u679c RandomState \u7684\u5b9e\u4f8b\uff0c random_state \u662f\u968f\u673a\u6570\u751f\u6210\u5668\u5982\u679c\u6ca1\u6709\uff0c\u968f\u673a\u6570\u751f\u6210\u5668\u6240\u4f7f\u7528\u7684 RandomState \u5b9e\u4f8b np.random \u3002 return : X \u7279\u5f81\u6570\u636e\u96c6\uff1b y \u76ee\u6807\u5206\u7c7b\u503c\u3002","title":"\u56de\u5f52"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.20 sklearn version: 0.22.1 \u8bc4\u4ef7\u6307\u6807 accuracy $$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i) $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219\u4e00\u822c\u5316\u7684\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{\\sum_{i=0}^{n_\\text{samples}-1}w_i} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i)w_i $$ from sklearn.metrics import accuracy_score accuracy_score ( y_true , y_pred , normalize = True , sample_weight = None ) normalize : \u5982\u679c False \uff0c\u5219\u8fd4\u56de\u5206\u7c7b\u6b63\u786e\u7684\u6837\u672c\u6570\u91cf\uff0c\u5982\u679c True \uff0c\u5219\u8fd4\u56de\u603b\u4f53\u7684\u6b63\u786e\u7387\u3002 y_true = [ 0 , 1 , 2 , 3 ] y_pred = [ 0 , 2 , 1 , 3 ] print ( accuracy_score ( y_true , y_pred )) print ( accuracy_score ( y_true , y_pred , normalize = False )) print ( accuracy_score ( y_true , y_pred , sample_weight = ( 1 , 1 , 1 , 10 ))) 0.5 2 0.8461538461538461 balanced accuracy $$ \\texttt{balanced accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{class}} \\sum_{i=1}^{n_\\text{class}} \\text{accuracy}_i $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219$\\text{accuracy}_i$\u5e94\u8be5\u5148\u6309\u6743\u91cd\u8ba1\u7b97\u3002 from sklearn.metrics import balanced_accuracy_score balanced_accuracy_score ( y_true , y_pred , sample_weight = None , adjusted = False ) adjusted : The best value is 1 and the worst value is 0 when adjusted=False . When true, the result is adjusted for chance, so that random performance would score 0, and perfect performance scores 1. y_true = [ 0 , 1 , 0 , 0 , 1 , 0 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 ] balanced_accuracy_score ( y_true , y_pred ) 0.625 precision\u3001recall\u3001F1 \u4e8c\u5206\u7c7b \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e8c\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\u7684precision\u3001recall\u3001F1\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\text{precision} = \\frac{TP}{TP+FP} $$ $$ \\text{recall} = \\frac{TP}{TP+FN} $$ $$ F1 = \\frac{2\\times\\text{precision}\\times \\text{recall}}{\\text{precision}+ \\text{recall}} $$ \u5982\u679c\u662f\u591a\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\uff0c\u5219\u53ef\u80fd\u4f7f\u7528\u5982\u4e0b\u8ba1\u7b97\u516c\u5f0f\uff1a Macro-averaging \u5b8f\u5e73\u5747\uff08Macro-averaging\uff09\u662f\u6307\u6240\u6709\u7c7b\u522b\u7684\u6bcf\u4e00\u4e2a\u7edf\u8ba1\u6307\u6807\u503c\u7684\u7b97\u672f\u5e73\u5747\u503c\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ {P_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} P_{i}} $$ $$ {R_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} R_{i}} $$ $$ {F_{\\text {macro}}=\\frac{2 \\times P_{\\text {macro}} \\times R_{\\text {macro}}}{P_{\\text {macro}}+R_{\\text {macro}}}} $$ Micro-averaging \u5fae\u5e73\u5747\uff08Micro-averaging\uff09\u662f\u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u793a\u4f8b\u4e0d\u5206\u7c7b\u522b\u8fdb\u884c\u7edf\u8ba1\u5efa\u7acb\u5168\u5c40\u6df7\u6dc6\u77e9\u9635\uff0c\u7136\u540e\u8ba1\u7b97\u76f8\u5e94\u7684\u6307\u6807\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\begin{aligned} P_{\\text {micro }}=\\frac{\\overline{T P}}{\\overline{T P}+\\overline{F P}}& =\\frac{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}}{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}+\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} F P_{i}} \\\\ &=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F P_{i}} \\end{aligned} $$ $$ {R_{\\text {micro}}=\\frac{\\overline{TP}}{\\overline{TP} + \\overline{F N}}=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F N_{i}}} $$ $$ {F_{\\text {micro}}=\\frac{2 \\times P_{\\text {micro}} \\times R_{\\text {micro}}}{P_{\\text {micro}}+R_{\\text {micro}}}} $$ \u5728 sklearn \u4e2d\uff0c precision_score \u3001 recall_score \u548c f1_score \u4e09\u4e2a\u51fd\u6570\u7684\u63a5\u53e3\u662f\u4e00\u81f4\uff0c\u5b83\u4eec\u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\u3002 precision_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) recall_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) f1_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) labels : list , optional\u3002\u53ef\u4ee5\u6392\u9664\u6570\u636e\u4e2d\u5b58\u5728\u7684label\uff0c\u800c\u5982\u679c\u8f93\u5165\u6570\u636e\u4e2d\u4e0d\u5b58\u5728\u7684label\uff0c\u5219\u4f1a\u4ee50\u586b\u5145\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c y_true \u548c y_pred \u4e2d\u7684\u6240\u6709label\u4f1a\u81ea\u52a8\u6392\u5e8f\u3002 pos_label : str or int , 1 by default\u3002\u5bf9\u4e8e\u4e8c\u5206\u7c7b\u6570\u636e\u6709\u6548\uff0c\u5982\u679c\u6570\u636e\u662f\u591a\u5206\u7c7b\u7684\uff0c\u8be5\u53c2\u6570\u5c06\u88ab\u5ffd\u7565\u3002 average : string, [None, 'binary' (default), 'micro', 'macro', 'samples','weighted'] \u3002\u5bf9\u4e8e\u591a\u7c7b\u3001\u591a\u6807\u7b7e\u6570\u636e\uff0c\u6b64\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u522b\u7684\u5206\u6570\u3002\u5426\u5219\u5c06\u6267\u884c\u6307\u5b9a\u7684\u5e73\u5747\u7c7b\u578b\u3002 'binary' : \u4ec5\u8fd4\u56de pos_label \u7684\u5206\u6570\uff0c\u4ec5\u5f53\u4e8c\u5206\u7c7b\u65f6\u624d\u9002\u7528\u3002 'micro' : \u8fd4\u56demicro\u5e73\u5747\u3002 'macro' : \u8fd4\u56demacro\u5e73\u5747\uff08\u672a\u52a0\u6743\uff0c\u5373\u672a\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff09 'weighted' : \u52a0\u6743\u7684macro\u5e73\u5747\uff0c\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4F1\u4e0d\u5728precision\u548crecall\u4e4b\u95f4\u3002 'samples' : \u8ba1\u7b97\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u6307\u6807\uff0c\u5e76\u627e\u5230\u5176\u5e73\u5747\u503c\uff0c\u4ec5\u5bf9\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u6709\u610f\u4e49\u3002 sample_weight : array-like of shape = [n_samples], optional\u3002Sample weights. \u5047\u8bbe\u73b0\u5728\u6709\u5982\u4e0b\u6570\u636e\uff1a y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] \u5bfc\u5165\u51fd\u6570\uff1a from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.metrics import f1_score from sklearn.metrics import confusion_matrix \u5148\u8ba1\u7b97\u51fa\u6df7\u6dc6\u77e9\u9635\u5982\u4e0b\uff1a confusion_matrix ( y_true , y_pred , labels = [ 0 , 1 , 2 ]) array([[3, 0, 1], [1, 1, 1], [0, 1, 2]], dtype=int64) \u6839\u636e\u516c\u5f0f\uff0c\u5404\u5206\u7c7b\u7684\u6307\u6807\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ R_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ F_{0} = \\frac{2\\times P_{0}\\times R_{0}}{P_{0} + R_{0}} = \\frac{3}{4} $$ $$ P_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{2} \\\\ R_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{3} \\\\ F_{1} = \\frac{2\\times P_{1}\\times R_{1}}{P_{1} + R_{1}} = \\frac{2}{5} $$ $$ P_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{4} \\\\ R_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{3} \\\\ F_{2} = \\frac{2\\times P_{2}\\times R_{2}}{P_{2} + R_{2}} = \\frac{4}{7} $$ \u5373 $$ P_{0} = \\frac{3}{4} \\ \\ P_{1}=\\frac{1}{2} \\ \\ P_{2}=\\frac{1}{2} \\\\ R_{0} = \\frac{3}{4} \\ \\ R_{1}=\\frac{1}{3} \\ \\ R_{2}=\\frac{2}{3} \\\\ F_{0} = \\frac{3}{4} \\ \\ F_{1}=\\frac{2}{5} \\ \\ F_{2}=\\frac{4}{7} $$ precision_score ( y_true , y_pred , average = None ) array([0.75, 0.5 , 0.5 ]) recall_score ( y_true , y_pred , average = None ) array([0.75 , 0.33333333, 0.66666667]) f1_score ( y_true , y_pred , average = None ) array([0.75 , 0.4 , 0.57142857]) \u518d\u8ba1\u7b97Macro-averaging\u548cMicro-averaging\uff1a $$ P_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{2} + \\frac{1}{2}) = 0.58 \\\\ R_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{3} + \\frac{2}{3}) = 0.58 \\\\ F_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{2}{5} + \\frac{4}{7}) = 0.57 $$ \u6ce8\u610f\uff1a\u5728 sklearn \u4e2d\uff0c$F_\\text{macro}$\u548c$F_{\\text{mirco}}$\u7684\u8ba1\u7b97\u65b9\u5f0f\u90fd\u662f\u7b97\u672f\u5e73\u5747\uff0c\u5e76\u4e0d\u662f\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u7684\u8c03\u548c\u5e73\u5747\u3002 print ( precision_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' )) 0.5833333333333334 0.5833333333333334 0.5833333333333334 $$ P_{\\text {micro}} = \\frac{3+1+2}{4+2+4} = 0.6 \\\\ R_{\\text {micro}} = \\frac{3+1+2}{4+3+3} = 0.6 \\\\ F_{\\text {micro}} = 0.6 $$ print ( precision_score ( y_true , y_pred , average = 'micro' ) ) print ( recall_score ( y_true , y_pred , average = 'micro' ) ) print ( f1_score ( y_true , y_pred , average = 'micro' ) ) 0.6 0.6 0.6 \u5728\u4e0a\u8ff0\u6570\u636e\u4e2d\uff0c\u5404\u5206\u7c7b\u7684\u6743\u91cd\u5206\u522b\u4e3a\uff1a 0 \u7c7b\uff1a4\u3001 1 \u7c7b\uff1a3\u3001 2 \u7c7b\uff1a3\uff0c\u603b\u6743\u91cd\u4e3a10\u3002\u90a3\u4e48\uff0c\u52a0\u6743\u7684macro\u5e73\u5747\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{2}\\times3 + \\frac{1}{2}\\times3) = 0.6 \\\\ R_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{3}\\times3 + \\frac{2}{3}\\times3) = 0.6 \\\\ F_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{2}{5}\\times3 + \\frac{4}{7}\\times3) = 0.59 $$ print ( precision_score ( y_true , y_pred , average = 'weighted' ) ) print ( recall_score ( y_true , y_pred , average = 'weighted' ) ) print ( f1_score ( y_true , y_pred , average = 'weighted' ) ) 0.6 0.6 0.5914285714285714 F-beta $$ F_{\\beta} = \\frac{(1+\\beta^2)\\times P\\times R}{\\beta^2\\times P + R} $$ fbeta_score ( y_true , y_pred , beta , labels = None , pos_label = 1 , average = \u2019 binary \u2019 , sample_weight = None ) \u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807 classification_report \u51fd\u6570\u548c precision_recall_fscore_support \u51fd\u6570\u90fd\u53ef\u4ee5\u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807\u3002 classification_report \u51fd\u6570\u66f4\u9f50\u5168\u548c\u65b9\u4fbf\u4e00\u4e9b\u3002 classification_report classification_report ( y_true , y_pred , labels = None , target_names = None , sample_weight = None , digits = 2 , output_dict = False ) - labels : \u9009\u62e9\u5c55\u793a\u5206\u6570\u4fe1\u606f\u7684\u7c7b\u522b \uff0c \u9ed8\u8ba4\u4e3aNone \uff0c \u5c55\u793a\u6240\u6709\u7c7b\u522b - target_names \uff1a label\u7684\u522b\u540d - digits \uff1a \u5c0f\u6570\u7cbe\u5ea6 \uff0c \u4ec5\u5f53output_dict = False\u65f6\u6709\u6548 - output_dict \uff1a \u9ed8\u8ba4\u4e3aFalse \uff0c \u8fd4\u56de\u5b57\u7b26\u4e32 \uff0c \u82e5\u4e3aTrue \uff0c \u8fd4\u56dedict from sklearn.metrics import classification_report y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( classification_report ( y_true , y_pred , target_names = [ \"A\" , \"B\" , \"C\" ]) ) precision recall f1 - score support A 0 . 75 0 . 75 0 . 75 4 B 0 . 50 0 . 33 0 . 40 3 C 0 . 50 0 . 67 0 . 57 3 accuracy 0 . 60 10 macro avg 0 . 58 0 . 58 0 . 57 10 weighted avg 0 . 60 0 . 60 0 . 59 10 precision_recall_fscore_support precision_recall_fscore_support ( y_true , y_pred , beta = 1.0 , labels = None , pos_label = 1 , average = None , warn_for = ( \u2018 precision \u2019 , \u2019 recall \u2019 , \u2019 f - score \u2019 ), sample_weight = None ) from sklearn.metrics import precision_recall_fscore_support y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( precision_recall_fscore_support ( y_true , y_pred , average = 'macro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'micro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'weighted' )) (0.5833333333333334, 0.5833333333333334, 0.5738095238095239, None) (0.6, 0.6, 0.6, None) (0.6, 0.6, 0.5914285714285714, None) P-R\u66f2\u7ebf precision_recall_curve ( y_true , probas_pred , pos_label = None , sample_weight = None ) import numpy as np from sklearn.metrics import precision_recall_curve y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) precision , recall , thresholds = precision_recall_curve ( y_true , y_scores ) # precision, recall, thresholds = precision_recall_curve(y_true, y_scores, pos_label=0) print ( thresholds ) print ( precision ) print ( recall ) [0.35 0.4 0.8 ] [0.66666667 0.5 1. 1. ] [1. 0.5 0.5 0. ] ROC\u66f2\u7ebf roc_curve ( y_true , y_score , pos_label = None , sample_weight = None , drop_intermediate = True ) import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , scores , pos_label = 2 ) print ( thresholds ) print ( fpr ) print ( tpr ) [1.8 0.8 0.4 0.35 0.1 ] [0. 0. 0.5 0.5 1. ] [0. 0.5 0.5 1. 1. ] \u8ba1\u7b97AUC \u5728 sklearn \u4e2d\uff0c\u8ba1\u7b97AUC\u6709\u4e24\u4e2a\u51fd\u6570\uff1a auc \u3001 roc_auc_score \u3002 auc \u662f\u4f7f\u7528\u68af\u5f62\u9762\u79ef\u516c\u5f0f\u8ba1\u7b97AUC\uff0c\u9700\u8981\u4f20\u5165 fpr \u3001 tpr \u53c2\u6570\uff1b\u800c roc_auc_score \u5219\u662f\u76f4\u63a5\u4f20\u5165 y_true \u3001 y_score \u53c2\u6570\u5c31\u53ef\u4ee5\u5f97\u51faAUC\u3002 roc_auc_score ( y_true , y_score , average = \u2019 macro \u2019 , sample_weight = None , max_fpr = None ) auc ( x , y , reorder = \u2019 deprecated \u2019 ) import numpy as np from sklearn.metrics import roc_auc_score y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) roc_auc_score ( y_true , y_scores ) 0.75 import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) pred = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , pred , pos_label = 2 ) metrics . auc ( fpr , tpr ) 0.75 Average Precision average_precision_score ( y_true , y_score , average = 'macro' , pos_label = 1 , sample_weight = None ) $$ \\text{AP} = \\sum_n (R_n - R_{n-1}) P_n $$ \u5176\u4e2d\uff0c$P_n$ \u548c $R_n$ \u662f\u7b2c$n$\u4e2a\u9608\u503c\u5904\u7684precision\u548crecall\u3002 \u8be5\u8ba1\u7b97\u516c\u5f0f\u4e0e\u4f7f\u7528\u68af\u5f62\u516c\u5f0f\u7cbe\u786e\u8ba1\u7b97\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u4e0d\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5728\u8fde\u7eed\u7684\u573a\u5408\uff0c\u8be5\u516c\u5f0f\u5c31\u662f\u4e00\u4e2a\u5b9a\u79ef\u5206\u3002\u5728sklearn\u4e2d\uff0c\u6b64\u5b9e\u73b0\u672a\u8fdb\u884c\u63d2\u503c\uff0c\u56e0\u4e3a\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u53ef\u80fd\u4f7f\u7ed3\u679c\u8fc7\u4e8e\u4e50\u89c2\u3002 \u6ce8\u610f\uff1a\u6b64\u5b9e\u73b0\u4ec5\u9650\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\u6216\u8005 multilabel classification\u4efb\u52a1\u3002 # from sklearn.metrics import jaccard_similarity_score import numpy as np from sklearn.metrics import jaccard_score y_true = np . array ([[ 0 , 1 , 1 ], [ 1 , 1 , 0 ]]) y_pred = np . array ([[ 1 , 1 , 1 ], [ 1 , 0 , 0 ]]) jaccard_score ( y_true [ 0 ], y_pred [ 0 ]) y_true [ 0 ], y_pred [ 0 ] jaccard_score ( y_true [ 0 ] . reshape ( 1 , 3 ), y_pred [ 0 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 1 ) jaccard_score ( y_true [ 0 ] . reshape ( 1 , 3 ), y_pred [ 0 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 0 ) jaccard_score ( y_true [ 1 ] . reshape ( 1 , 3 ), y_pred [ 1 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 1 ) jaccard_score ( y_true [ 1 ] . reshape ( 1 , 3 ), y_pred [ 1 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 0 ) ( 0.66666 + 0.5 ) / 2 y_pred = [ 0 , 2 , 1 , 2 ] y_true = [ 0 , 1 , 2 , 2 ] y_pred = [ 0 , 2 , 1 , 2 , 2 ] y_true = [ 0 , 1 , 2 , 2 , 1 ] jaccard_score ( y_true , y_pred , average = 'samples' ) ( 1 + 0 + 0 + 1 ) / 3 ( 1 + 0 + 0.5 ) / 3 ( 1 + 0 + 0.5 ) / 3 jaccard_score ( y_true , y_pred , average = 'macro' ) jaccard_score ( y_true , y_pred , average = \"micro\" ) 0.44444444444 4 / 9 4 / 3 / 3 ( 1 + 1 / 3 ) / 3 ( 1 / 1 + 0 / 2 + 1 / 3 ) ( 1 / 1 + 0 + 1 / 2 ) / 3 5 / 4 / 3 jaccard_score ( y_true , y_pred , average = None ) y_pred = [ 0 , 0 , 1 , 0 , 1 , 1 , 2 , 1 ] y_true = [ 0 , 1 , 0 , 1 , 1 , 1 , 2 , 2 ] average = '' jaccard_score ( y_true , y_pred , pos_label = 1 , average = None ) jaccard_score ( y_true , y_pred , pos_label = 1 , average = 'macro' ) jaccard_score ( y_true , y_pred , pos_label = 1 , average = 'macro' ) jaccard_score ( y_true , y_pred , pos_label = 1 , average = None ) ( 0.25 + 0.4 + 1 ) / 3 1 / 4 + 2 / 5 5 / 20 + 8 / 20 13 / 40 G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ sklearn \\ metrics \\ _classification . py : 1321 : UserWarning : Note that pos_label ( set to 0 ) is ignored when average != 'binary' ( got 'samples' ). You may use labels =[ pos_label ] to specify a single positive class . % ( pos_label , average ), UserWarning ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-4488a4f6f931> in <module> 35 36 ---> 37 jaccard_score(y_true, y_pred, average='samples') 38 39 (1+0+0+1) / 3 G:\\Installed\\Anaconda3\\lib\\site- packages\\sklearn\\metrics\\_classification.py in jaccard_score(y_true, y_pred, labels, pos_label, average, sample_weight) 795 MCM = multilabel_confusion_matrix(y_true, y_pred, 796 sample_weight=sample_weight, --> 797 labels=labels, samplewise=samplewise) 798 numerator = MCM[:, 1, 1] 799 denominator = MCM[:, 1, 1] + MCM[:, 0, 1] + MCM[:, 1, 0] G:\\Installed\\Anaconda3\\lib\\site- packages\\sklearn\\metrics\\_classification.py in multilabel_confusion_matrix(y_true, y_pred, sample_weight, labels, samplewise) 441 if y_true.ndim == 1: 442 if samplewise: --> 443 raise ValueError(\"Samplewise metrics are not available outside of \" 444 \"multilabel classification.\") 445 ValueError: Samplewise metrics are not available outside of multilabel classification. ! \\","title":"11.2.\u8bc4\u4ef7\u6307\u6807"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#_1","text":"","title":"\u8bc4\u4ef7\u6307\u6807"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#accuracy","text":"$$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i) $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219\u4e00\u822c\u5316\u7684\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{\\sum_{i=0}^{n_\\text{samples}-1}w_i} \\sum_{i=0}^{n_\\text{samples}-1} \\mathbb{I}(\\hat{y}_i = y_i)w_i $$ from sklearn.metrics import accuracy_score accuracy_score ( y_true , y_pred , normalize = True , sample_weight = None ) normalize : \u5982\u679c False \uff0c\u5219\u8fd4\u56de\u5206\u7c7b\u6b63\u786e\u7684\u6837\u672c\u6570\u91cf\uff0c\u5982\u679c True \uff0c\u5219\u8fd4\u56de\u603b\u4f53\u7684\u6b63\u786e\u7387\u3002 y_true = [ 0 , 1 , 2 , 3 ] y_pred = [ 0 , 2 , 1 , 3 ] print ( accuracy_score ( y_true , y_pred )) print ( accuracy_score ( y_true , y_pred , normalize = False )) print ( accuracy_score ( y_true , y_pred , sample_weight = ( 1 , 1 , 1 , 10 ))) 0.5 2 0.8461538461538461","title":"accuracy"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#balanced-accuracy","text":"$$ \\texttt{balanced accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{class}} \\sum_{i=1}^{n_\\text{class}} \\text{accuracy}_i $$ \u5982\u679c\u8bbe\u7f6e\u4e86\u6743\u91cd\uff0c\u5219$\\text{accuracy}_i$\u5e94\u8be5\u5148\u6309\u6743\u91cd\u8ba1\u7b97\u3002 from sklearn.metrics import balanced_accuracy_score balanced_accuracy_score ( y_true , y_pred , sample_weight = None , adjusted = False ) adjusted : The best value is 1 and the worst value is 0 when adjusted=False . When true, the result is adjusted for chance, so that random performance would score 0, and perfect performance scores 1. y_true = [ 0 , 1 , 0 , 0 , 1 , 0 ] y_pred = [ 0 , 1 , 0 , 0 , 0 , 1 ] balanced_accuracy_score ( y_true , y_pred ) 0.625","title":"balanced accuracy"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#precisionrecallf1","text":"\u4e8c\u5206\u7c7b \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e8c\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\u7684precision\u3001recall\u3001F1\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\text{precision} = \\frac{TP}{TP+FP} $$ $$ \\text{recall} = \\frac{TP}{TP+FN} $$ $$ F1 = \\frac{2\\times\\text{precision}\\times \\text{recall}}{\\text{precision}+ \\text{recall}} $$ \u5982\u679c\u662f\u591a\u5206\u7c7b\u6df7\u6dc6\u77e9\u9635\uff0c\u5219\u53ef\u80fd\u4f7f\u7528\u5982\u4e0b\u8ba1\u7b97\u516c\u5f0f\uff1a Macro-averaging \u5b8f\u5e73\u5747\uff08Macro-averaging\uff09\u662f\u6307\u6240\u6709\u7c7b\u522b\u7684\u6bcf\u4e00\u4e2a\u7edf\u8ba1\u6307\u6807\u503c\u7684\u7b97\u672f\u5e73\u5747\u503c\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ {P_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} P_{i}} $$ $$ {R_{\\text {macro}}=\\frac{1}{n} \\sum_{i=1}^{n} R_{i}} $$ $$ {F_{\\text {macro}}=\\frac{2 \\times P_{\\text {macro}} \\times R_{\\text {macro}}}{P_{\\text {macro}}+R_{\\text {macro}}}} $$ Micro-averaging \u5fae\u5e73\u5747\uff08Micro-averaging\uff09\u662f\u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u793a\u4f8b\u4e0d\u5206\u7c7b\u522b\u8fdb\u884c\u7edf\u8ba1\u5efa\u7acb\u5168\u5c40\u6df7\u6dc6\u77e9\u9635\uff0c\u7136\u540e\u8ba1\u7b97\u76f8\u5e94\u7684\u6307\u6807\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a $$ \\begin{aligned} P_{\\text {micro }}=\\frac{\\overline{T P}}{\\overline{T P}+\\overline{F P}}& =\\frac{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}}{\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} T P_{i}+\\frac{1}{n_{\\text {class}}} \\sum_{i=1}^{n} F P_{i}} \\\\ &=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F P_{i}} \\end{aligned} $$ $$ {R_{\\text {micro}}=\\frac{\\overline{TP}}{\\overline{TP} + \\overline{F N}}=\\frac{\\sum_{i=1}^{n} T P_{i}}{\\sum_{i=1}^{n} T P_{i}+\\sum_{i=1}^{n} F N_{i}}} $$ $$ {F_{\\text {micro}}=\\frac{2 \\times P_{\\text {micro}} \\times R_{\\text {micro}}}{P_{\\text {micro}}+R_{\\text {micro}}}} $$ \u5728 sklearn \u4e2d\uff0c precision_score \u3001 recall_score \u548c f1_score \u4e09\u4e2a\u51fd\u6570\u7684\u63a5\u53e3\u662f\u4e00\u81f4\uff0c\u5b83\u4eec\u62e5\u6709\u76f8\u540c\u7684\u53c2\u6570\u3002 precision_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) recall_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) f1_score ( y_true , y_pred , labels = None , pos_label = 1 , average = 'binary' , sample_weight = None ) labels : list , optional\u3002\u53ef\u4ee5\u6392\u9664\u6570\u636e\u4e2d\u5b58\u5728\u7684label\uff0c\u800c\u5982\u679c\u8f93\u5165\u6570\u636e\u4e2d\u4e0d\u5b58\u5728\u7684label\uff0c\u5219\u4f1a\u4ee50\u586b\u5145\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c y_true \u548c y_pred \u4e2d\u7684\u6240\u6709label\u4f1a\u81ea\u52a8\u6392\u5e8f\u3002 pos_label : str or int , 1 by default\u3002\u5bf9\u4e8e\u4e8c\u5206\u7c7b\u6570\u636e\u6709\u6548\uff0c\u5982\u679c\u6570\u636e\u662f\u591a\u5206\u7c7b\u7684\uff0c\u8be5\u53c2\u6570\u5c06\u88ab\u5ffd\u7565\u3002 average : string, [None, 'binary' (default), 'micro', 'macro', 'samples','weighted'] \u3002\u5bf9\u4e8e\u591a\u7c7b\u3001\u591a\u6807\u7b7e\u6570\u636e\uff0c\u6b64\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002\u5982\u679c\u4e3a None \uff0c\u5219\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u522b\u7684\u5206\u6570\u3002\u5426\u5219\u5c06\u6267\u884c\u6307\u5b9a\u7684\u5e73\u5747\u7c7b\u578b\u3002 'binary' : \u4ec5\u8fd4\u56de pos_label \u7684\u5206\u6570\uff0c\u4ec5\u5f53\u4e8c\u5206\u7c7b\u65f6\u624d\u9002\u7528\u3002 'micro' : \u8fd4\u56demicro\u5e73\u5747\u3002 'macro' : \u8fd4\u56demacro\u5e73\u5747\uff08\u672a\u52a0\u6743\uff0c\u5373\u672a\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff09 'weighted' : \u52a0\u6743\u7684macro\u5e73\u5747\uff0c\u8003\u8651\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4F1\u4e0d\u5728precision\u548crecall\u4e4b\u95f4\u3002 'samples' : \u8ba1\u7b97\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u6307\u6807\uff0c\u5e76\u627e\u5230\u5176\u5e73\u5747\u503c\uff0c\u4ec5\u5bf9\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u6709\u610f\u4e49\u3002 sample_weight : array-like of shape = [n_samples], optional\u3002Sample weights. \u5047\u8bbe\u73b0\u5728\u6709\u5982\u4e0b\u6570\u636e\uff1a y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] \u5bfc\u5165\u51fd\u6570\uff1a from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.metrics import f1_score from sklearn.metrics import confusion_matrix \u5148\u8ba1\u7b97\u51fa\u6df7\u6dc6\u77e9\u9635\u5982\u4e0b\uff1a confusion_matrix ( y_true , y_pred , labels = [ 0 , 1 , 2 ]) array([[3, 0, 1], [1, 1, 1], [0, 1, 2]], dtype=int64) \u6839\u636e\u516c\u5f0f\uff0c\u5404\u5206\u7c7b\u7684\u6307\u6807\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ R_{0} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a0\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{3}{4} \\\\ F_{0} = \\frac{2\\times P_{0}\\times R_{0}}{P_{0} + R_{0}} = \\frac{3}{4} $$ $$ P_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{2} \\\\ R_{1} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a1\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{1}{3} \\\\ F_{1} = \\frac{2\\times P_{1}\\times R_{1}}{P_{1} + R_{1}} = \\frac{2}{5} $$ $$ P_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{4} \\\\ R_{2} = \\frac{\\text{\u6b63\u786e\u9884\u6d4b\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}}{\\text{\u771f\u5b9e\u4e3a2\u7684\u6837\u672c\u4e2a\u6570}} = \\frac{2}{3} \\\\ F_{2} = \\frac{2\\times P_{2}\\times R_{2}}{P_{2} + R_{2}} = \\frac{4}{7} $$ \u5373 $$ P_{0} = \\frac{3}{4} \\ \\ P_{1}=\\frac{1}{2} \\ \\ P_{2}=\\frac{1}{2} \\\\ R_{0} = \\frac{3}{4} \\ \\ R_{1}=\\frac{1}{3} \\ \\ R_{2}=\\frac{2}{3} \\\\ F_{0} = \\frac{3}{4} \\ \\ F_{1}=\\frac{2}{5} \\ \\ F_{2}=\\frac{4}{7} $$ precision_score ( y_true , y_pred , average = None ) array([0.75, 0.5 , 0.5 ]) recall_score ( y_true , y_pred , average = None ) array([0.75 , 0.33333333, 0.66666667]) f1_score ( y_true , y_pred , average = None ) array([0.75 , 0.4 , 0.57142857]) \u518d\u8ba1\u7b97Macro-averaging\u548cMicro-averaging\uff1a $$ P_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{2} + \\frac{1}{2}) = 0.58 \\\\ R_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{1}{3} + \\frac{2}{3}) = 0.58 \\\\ F_{\\text {macro}} = \\frac{1}{3}\\times (\\frac{3}{4} + \\frac{2}{5} + \\frac{4}{7}) = 0.57 $$ \u6ce8\u610f\uff1a\u5728 sklearn \u4e2d\uff0c$F_\\text{macro}$\u548c$F_{\\text{mirco}}$\u7684\u8ba1\u7b97\u65b9\u5f0f\u90fd\u662f\u7b97\u672f\u5e73\u5747\uff0c\u5e76\u4e0d\u662f\u4e0a\u8ff0\u516c\u5f0f\u4e2d\u7684\u8c03\u548c\u5e73\u5747\u3002 print ( precision_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' ) ) print ( recall_score ( y_true , y_pred , average = 'macro' )) 0.5833333333333334 0.5833333333333334 0.5833333333333334 $$ P_{\\text {micro}} = \\frac{3+1+2}{4+2+4} = 0.6 \\\\ R_{\\text {micro}} = \\frac{3+1+2}{4+3+3} = 0.6 \\\\ F_{\\text {micro}} = 0.6 $$ print ( precision_score ( y_true , y_pred , average = 'micro' ) ) print ( recall_score ( y_true , y_pred , average = 'micro' ) ) print ( f1_score ( y_true , y_pred , average = 'micro' ) ) 0.6 0.6 0.6 \u5728\u4e0a\u8ff0\u6570\u636e\u4e2d\uff0c\u5404\u5206\u7c7b\u7684\u6743\u91cd\u5206\u522b\u4e3a\uff1a 0 \u7c7b\uff1a4\u3001 1 \u7c7b\uff1a3\u3001 2 \u7c7b\uff1a3\uff0c\u603b\u6743\u91cd\u4e3a10\u3002\u90a3\u4e48\uff0c\u52a0\u6743\u7684macro\u5e73\u5747\u8ba1\u7b97\u5982\u4e0b\uff1a $$ P_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{2}\\times3 + \\frac{1}{2}\\times3) = 0.6 \\\\ R_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{1}{3}\\times3 + \\frac{2}{3}\\times3) = 0.6 \\\\ F_{\\text {macro}} = \\frac{1}{10}\\times (\\frac{3}{4}\\times4 + \\frac{2}{5}\\times3 + \\frac{4}{7}\\times3) = 0.59 $$ print ( precision_score ( y_true , y_pred , average = 'weighted' ) ) print ( recall_score ( y_true , y_pred , average = 'weighted' ) ) print ( f1_score ( y_true , y_pred , average = 'weighted' ) ) 0.6 0.6 0.5914285714285714","title":"precision\u3001recall\u3001F1"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#f-beta","text":"$$ F_{\\beta} = \\frac{(1+\\beta^2)\\times P\\times R}{\\beta^2\\times P + R} $$ fbeta_score ( y_true , y_pred , beta , labels = None , pos_label = 1 , average = \u2019 binary \u2019 , sample_weight = None )","title":"F-beta"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#_2","text":"classification_report \u51fd\u6570\u548c precision_recall_fscore_support \u51fd\u6570\u90fd\u53ef\u4ee5\u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807\u3002 classification_report \u51fd\u6570\u66f4\u9f50\u5168\u548c\u65b9\u4fbf\u4e00\u4e9b\u3002 classification_report classification_report ( y_true , y_pred , labels = None , target_names = None , sample_weight = None , digits = 2 , output_dict = False ) - labels : \u9009\u62e9\u5c55\u793a\u5206\u6570\u4fe1\u606f\u7684\u7c7b\u522b \uff0c \u9ed8\u8ba4\u4e3aNone \uff0c \u5c55\u793a\u6240\u6709\u7c7b\u522b - target_names \uff1a label\u7684\u522b\u540d - digits \uff1a \u5c0f\u6570\u7cbe\u5ea6 \uff0c \u4ec5\u5f53output_dict = False\u65f6\u6709\u6548 - output_dict \uff1a \u9ed8\u8ba4\u4e3aFalse \uff0c \u8fd4\u56de\u5b57\u7b26\u4e32 \uff0c \u82e5\u4e3aTrue \uff0c \u8fd4\u56dedict from sklearn.metrics import classification_report y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( classification_report ( y_true , y_pred , target_names = [ \"A\" , \"B\" , \"C\" ]) ) precision recall f1 - score support A 0 . 75 0 . 75 0 . 75 4 B 0 . 50 0 . 33 0 . 40 3 C 0 . 50 0 . 67 0 . 57 3 accuracy 0 . 60 10 macro avg 0 . 58 0 . 58 0 . 57 10 weighted avg 0 . 60 0 . 60 0 . 59 10 precision_recall_fscore_support precision_recall_fscore_support ( y_true , y_pred , beta = 1.0 , labels = None , pos_label = 1 , average = None , warn_for = ( \u2018 precision \u2019 , \u2019 recall \u2019 , \u2019 f - score \u2019 ), sample_weight = None ) from sklearn.metrics import precision_recall_fscore_support y_true = [ 0 , 0 , 0 , 2 , 1 , 2 , 0 , 1 , 1 , 2 ] y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 1 , 2 ] print ( precision_recall_fscore_support ( y_true , y_pred , average = 'macro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'micro' )) print ( precision_recall_fscore_support ( y_true , y_pred , average = 'weighted' )) (0.5833333333333334, 0.5833333333333334, 0.5738095238095239, None) (0.6, 0.6, 0.6, None) (0.6, 0.6, 0.5914285714285714, None)","title":"\u663e\u793a\u4e3b\u8981\u7684\u5206\u7c7b\u6307\u6807"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#p-r","text":"precision_recall_curve ( y_true , probas_pred , pos_label = None , sample_weight = None ) import numpy as np from sklearn.metrics import precision_recall_curve y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) precision , recall , thresholds = precision_recall_curve ( y_true , y_scores ) # precision, recall, thresholds = precision_recall_curve(y_true, y_scores, pos_label=0) print ( thresholds ) print ( precision ) print ( recall ) [0.35 0.4 0.8 ] [0.66666667 0.5 1. 1. ] [1. 0.5 0.5 0. ]","title":"P-R\u66f2\u7ebf"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#roc","text":"roc_curve ( y_true , y_score , pos_label = None , sample_weight = None , drop_intermediate = True ) import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , scores , pos_label = 2 ) print ( thresholds ) print ( fpr ) print ( tpr ) [1.8 0.8 0.4 0.35 0.1 ] [0. 0. 0.5 0.5 1. ] [0. 0.5 0.5 1. 1. ]","title":"ROC\u66f2\u7ebf"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#auc","text":"\u5728 sklearn \u4e2d\uff0c\u8ba1\u7b97AUC\u6709\u4e24\u4e2a\u51fd\u6570\uff1a auc \u3001 roc_auc_score \u3002 auc \u662f\u4f7f\u7528\u68af\u5f62\u9762\u79ef\u516c\u5f0f\u8ba1\u7b97AUC\uff0c\u9700\u8981\u4f20\u5165 fpr \u3001 tpr \u53c2\u6570\uff1b\u800c roc_auc_score \u5219\u662f\u76f4\u63a5\u4f20\u5165 y_true \u3001 y_score \u53c2\u6570\u5c31\u53ef\u4ee5\u5f97\u51faAUC\u3002 roc_auc_score ( y_true , y_score , average = \u2019 macro \u2019 , sample_weight = None , max_fpr = None ) auc ( x , y , reorder = \u2019 deprecated \u2019 ) import numpy as np from sklearn.metrics import roc_auc_score y_true = np . array ([ 0 , 0 , 1 , 1 ]) y_scores = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) roc_auc_score ( y_true , y_scores ) 0.75 import numpy as np from sklearn import metrics y = np . array ([ 1 , 1 , 2 , 2 ]) pred = np . array ([ 0.1 , 0.4 , 0.35 , 0.8 ]) fpr , tpr , thresholds = metrics . roc_curve ( y , pred , pos_label = 2 ) metrics . auc ( fpr , tpr ) 0.75","title":"\u8ba1\u7b97AUC"},{"location":"scikit-learn/11.2.%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.html#average-precision","text":"average_precision_score ( y_true , y_score , average = 'macro' , pos_label = 1 , sample_weight = None ) $$ \\text{AP} = \\sum_n (R_n - R_{n-1}) P_n $$ \u5176\u4e2d\uff0c$P_n$ \u548c $R_n$ \u662f\u7b2c$n$\u4e2a\u9608\u503c\u5904\u7684precision\u548crecall\u3002 \u8be5\u8ba1\u7b97\u516c\u5f0f\u4e0e\u4f7f\u7528\u68af\u5f62\u516c\u5f0f\u7cbe\u786e\u8ba1\u7b97\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\u4e0d\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u5728\u8fde\u7eed\u7684\u573a\u5408\uff0c\u8be5\u516c\u5f0f\u5c31\u662f\u4e00\u4e2a\u5b9a\u79ef\u5206\u3002\u5728sklearn\u4e2d\uff0c\u6b64\u5b9e\u73b0\u672a\u8fdb\u884c\u63d2\u503c\uff0c\u56e0\u4e3a\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u53ef\u80fd\u4f7f\u7ed3\u679c\u8fc7\u4e8e\u4e50\u89c2\u3002 \u6ce8\u610f\uff1a\u6b64\u5b9e\u73b0\u4ec5\u9650\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\u6216\u8005 multilabel classification\u4efb\u52a1\u3002 # from sklearn.metrics import jaccard_similarity_score import numpy as np from sklearn.metrics import jaccard_score y_true = np . array ([[ 0 , 1 , 1 ], [ 1 , 1 , 0 ]]) y_pred = np . array ([[ 1 , 1 , 1 ], [ 1 , 0 , 0 ]]) jaccard_score ( y_true [ 0 ], y_pred [ 0 ]) y_true [ 0 ], y_pred [ 0 ] jaccard_score ( y_true [ 0 ] . reshape ( 1 , 3 ), y_pred [ 0 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 1 ) jaccard_score ( y_true [ 0 ] . reshape ( 1 , 3 ), y_pred [ 0 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 0 ) jaccard_score ( y_true [ 1 ] . reshape ( 1 , 3 ), y_pred [ 1 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 1 ) jaccard_score ( y_true [ 1 ] . reshape ( 1 , 3 ), y_pred [ 1 ] . reshape ( 1 , 3 ), average = 'samples' , pos_label = 0 ) ( 0.66666 + 0.5 ) / 2 y_pred = [ 0 , 2 , 1 , 2 ] y_true = [ 0 , 1 , 2 , 2 ] y_pred = [ 0 , 2 , 1 , 2 , 2 ] y_true = [ 0 , 1 , 2 , 2 , 1 ] jaccard_score ( y_true , y_pred , average = 'samples' ) ( 1 + 0 + 0 + 1 ) / 3 ( 1 + 0 + 0.5 ) / 3 ( 1 + 0 + 0.5 ) / 3 jaccard_score ( y_true , y_pred , average = 'macro' ) jaccard_score ( y_true , y_pred , average = \"micro\" ) 0.44444444444 4 / 9 4 / 3 / 3 ( 1 + 1 / 3 ) / 3 ( 1 / 1 + 0 / 2 + 1 / 3 ) ( 1 / 1 + 0 + 1 / 2 ) / 3 5 / 4 / 3 jaccard_score ( y_true , y_pred , average = None ) y_pred = [ 0 , 0 , 1 , 0 , 1 , 1 , 2 , 1 ] y_true = [ 0 , 1 , 0 , 1 , 1 , 1 , 2 , 2 ] average = '' jaccard_score ( y_true , y_pred , pos_label = 1 , average = None ) jaccard_score ( y_true , y_pred , pos_label = 1 , average = 'macro' ) jaccard_score ( y_true , y_pred , pos_label = 1 , average = 'macro' ) jaccard_score ( y_true , y_pred , pos_label = 1 , average = None ) ( 0.25 + 0.4 + 1 ) / 3 1 / 4 + 2 / 5 5 / 20 + 8 / 20 13 / 40 G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ sklearn \\ metrics \\ _classification . py : 1321 : UserWarning : Note that pos_label ( set to 0 ) is ignored when average != 'binary' ( got 'samples' ). You may use labels =[ pos_label ] to specify a single positive class . % ( pos_label , average ), UserWarning ) ---------------------------------------------------------------------------ValueError Traceback (most recent call last)<ipython-input-1-4488a4f6f931> in <module> 35 36 ---> 37 jaccard_score(y_true, y_pred, average='samples') 38 39 (1+0+0+1) / 3 G:\\Installed\\Anaconda3\\lib\\site- packages\\sklearn\\metrics\\_classification.py in jaccard_score(y_true, y_pred, labels, pos_label, average, sample_weight) 795 MCM = multilabel_confusion_matrix(y_true, y_pred, 796 sample_weight=sample_weight, --> 797 labels=labels, samplewise=samplewise) 798 numerator = MCM[:, 1, 1] 799 denominator = MCM[:, 1, 1] + MCM[:, 0, 1] + MCM[:, 1, 0] G:\\Installed\\Anaconda3\\lib\\site- packages\\sklearn\\metrics\\_classification.py in multilabel_confusion_matrix(y_true, y_pred, sample_weight, labels, samplewise) 441 if y_true.ndim == 1: 442 if samplewise: --> 443 raise ValueError(\"Samplewise metrics are not available outside of \" 444 \"multilabel classification.\") 445 ValueError: Samplewise metrics are not available outside of multilabel classification. ! \\","title":"Average Precision"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.03.09 tensorflow version: 2.1.0 from tensorflow import keras from tensorflow.keras.datasets import boston_housing from tensorflow.keras.datasets import imdb from tensorflow.keras.datasets import reuters from tensorflow.keras.datasets import mnist from tensorflow.keras.datasets import cifar10 from tensorflow.keras.datasets import cifar100 from tensorflow.keras.datasets import fashion_mnist import matplotlib.pyplot as plt tensorflow \u4e2d\u53ef\u4ee5\u5feb\u901f\u8c03\u7528\u7684\u6570\u636e\u96c6\uff08\u8fd8\u662f\u8981\u5148\u4e0b\u8f7d\u7684\uff09\uff1a ['cifar10', 'cifar100', 'imdb', 'mnist', 'reuters'] boston_housing \u56de\u5f52\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6765\u81ea\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7ef4\u62a4\u7684 StatLib \u5e93\u3002\u6837\u672c\u5305\u542b 1970 \u5e74\u4ee3\u7684\u5728\u6ce2\u58eb\u987f\u90ca\u533a\u4e0d\u540c\u4f4d\u7f6e\u7684\u623f\u5c4b\u4fe1\u606f\uff0c\u603b\u5171\u6709 13 \u79cd\u623f\u5c4b\u5c5e\u6027\u3002\u76ee\u6807\u503c\u662f\u4e00\u4e2a\u4f4d\u7f6e\u7684\u623f\u5c4b\u4ef7\u683c\u7684\u4e2d\u503c\uff08\u5355\u4f4d\uff1ak$\uff09\u3002 ( x_train , y_train ), ( x_test , y_test ) = boston_housing . load_data () \u53c2\u6570\uff1a path: \u7f13\u5b58\u672c\u5730\u6570\u636e\u96c6\u7684\u4f4d\u7f6e (\u76f8\u5bf9\u8def\u5f84 ~/.keras/datasets)\u3002 seed: \u5728\u8ba1\u7b97\u6d4b\u8bd5\u5206\u5272\u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u7684\u968f\u673a\u79cd\u5b50\u3002 test_split: \u9700\u8981\u4fdd\u7559\u4f5c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\u3002 x_train.shape: (404, 13) y_train.shape: (404,) x_test.shape : (102, 13) y_test.shape : (102,) imdb \u60c5\u611f\u5206\u7c7b\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6765\u81ea IMDB \u7684 25,000 \u6761\u7535\u5f71\u8bc4\u8bba\uff0c\u4ee5\u60c5\u7eea\uff08\u6b63\u9762/\u8d1f\u9762\uff09\u6807\u8bb0\u3002\u8bc4\u8bba\u5df2\u7ecf\u8fc7\u9884\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u8bcd\u7d22\u5f15\uff08\u6574\u6570\uff09\u7684\u5e8f\u5217\u8868\u793a\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5c06\u8bcd\u6309\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u8fdb\u884c\u7d22\u5f15\uff0c\u4f8b\u5982\u6574\u6570 3 \u7f16\u7801\u6570\u636e\u4e2d\u7b2c\u4e09\u4e2a\u6700\u9891\u7e41\u7684\u8bcd\u3002\u8fd9\u5141\u8bb8\u5feb\u901f\u7b5b\u9009\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u300c\u53ea\u8003\u8651\u524d 10,000 \u4e2a\u6700\u5e38\u7528\u7684\u8bcd\uff0c\u4f46\u6392\u9664\u524d 20 \u4e2a\u6700\u5e38\u89c1\u7684\u8bcd\u300d\u3002 \u4f5c\u4e3a\u60ef\u4f8b\uff0c0 \u4e0d\u4ee3\u8868\u7279\u5b9a\u7684\u5355\u8bcd\uff0c\u800c\u662f\u88ab\u7528\u4e8e\u7f16\u7801\u4efb\u4f55\u672a\u77e5\u5355\u8bcd\u3002 ( x_train , y_train ), ( x_test , y_test ) = imdb . load_data ( path = \"imdb.npz\" , num_words = None , skip_top = 0 , maxlen = None , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) x_train.shape: (25000,) y_train.shape: (25000,) x_test.shape : (25000,) y_test.shape : (25000,) x_train \u662f\u4e0d\u7b49\u957f\u7684list\u7ec4\u6210\u7684array\uff0c\u6240\u4ee5\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 y_train \u662f\u5206\u7c7b\u6807\u7b7e\uff0c\u53ea\u6709\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6240\u4ee5\u4e5f\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u8bcd\u5e93\uff1a word_index = imdb . get_word_index () print ( len ( word_index )) 88584 i = 0 for k , v in word_index . items (): print ( f \" {k} : {v} \" ) i += 1 if i > 5 : break fawn : 34701 tsukino : 52006 nunnery : 52007 sonja : 16816 vani : 63951 woods : 1408 mnist \u624b\u5199\u6570\u5b57\u5206\u7c7b\u6570\u636e\u96c6 ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28) y_test.shape : (10000,) def mnist_plot_img ( img ): plt . figure () plt . gray () plt . imshow ( img ) plt . show () mnist_plot_img ( x_train [ 0 ]) cifar10 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 10 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar10 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ]) cifar100 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 100 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar100 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ]) fashion_mnist \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6 Fashion-MNIST\u662fZalando\u6587\u7ae0\u56fe\u7247\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b60,000\u4e2a\u793a\u4f8b\u7684\u8bad\u7ec3\u96c6\u548c10,000\u4e2a\u793a\u4f8b\u7684\u6d4b\u8bd5\u96c6\u3002\u6bcf\u4e2a\u793a\u4f8b\u90fd\u662f\u4e00\u4e2a28x28\u7070\u5ea6\u56fe\u50cf\uff0c\u4e0e\u6765\u81ea10\u4e2a\u7c7b\u522b\u7684\u6807\u7b7e\u76f8\u5173\u8054\u3002\u7c7b\u522b\u6807\u7b7e\u662f\uff1a \u7c7b\u522b \u63cf\u8ff0 \u4e2d\u6587 0 T-shirt/top T\u6064/\u4e0a\u8863 1 Trouser \u88e4\u5b50 2 Pullover \u5957\u5934\u886b 3 Dress \u8fde\u8863\u88d9 4 Coat \u5916\u5957 5 Sandal \u51c9\u978b 6 Shirt \u886c\u886b 7 Sneaker \u8fd0\u52a8\u978b 8 Bag \u80cc\u5305 9 Ankle boot \u77ed\u9774 ( x_train , y_train ), ( x_test , y_test ) = fashion_mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d ,)\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d \" % x_test . shape ) print ( \"y_test.shape : ( %d ,)\" % y_test . shape ) x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28 y_test.shape : (10000,) mnist_plot_img ( x_train [ 100 ]) reuters \u8def\u900f\u793e\u65b0\u95fb\u4e3b\u9898\u5206\u7c7b\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6765\u6e90\u4e8e\u8def\u900f\u793e\u7684 11,228 \u6761\u65b0\u95fb\u6587\u672c\uff0c\u603b\u5171\u5206\u4e3a 46 \u4e2a\u4e3b\u9898\u3002\u4e0e IMDB \u6570\u636e\u96c6\u4e00\u6837\uff0c\u6bcf\u6761\u65b0\u95fb\u90fd\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u8bcd\u7d22\u5f15\u7684\u5e8f\u5217\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data ( path = \"reuters.npz\" , num_words = None , skip_top = 0 , maxlen = None , test_split = 0.2 , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) \u89c4\u683c\u4e0e IMDB \u6570\u636e\u96c6\u7684\u89c4\u683c\u76f8\u540c\uff0c\u4f46\u589e\u52a0\u4e86 test_split \u53c2\u6570\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data () x_train.shape: (8982,) y_train.shape: (8982,) x_test.shape : (2246,) y_test.shape : (2246,) word_index = reuters . get_word_index","title":"12.1.keras\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#boston_housing","text":"\u6570\u636e\u96c6\u6765\u81ea\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7ef4\u62a4\u7684 StatLib \u5e93\u3002\u6837\u672c\u5305\u542b 1970 \u5e74\u4ee3\u7684\u5728\u6ce2\u58eb\u987f\u90ca\u533a\u4e0d\u540c\u4f4d\u7f6e\u7684\u623f\u5c4b\u4fe1\u606f\uff0c\u603b\u5171\u6709 13 \u79cd\u623f\u5c4b\u5c5e\u6027\u3002\u76ee\u6807\u503c\u662f\u4e00\u4e2a\u4f4d\u7f6e\u7684\u623f\u5c4b\u4ef7\u683c\u7684\u4e2d\u503c\uff08\u5355\u4f4d\uff1ak$\uff09\u3002 ( x_train , y_train ), ( x_test , y_test ) = boston_housing . load_data () \u53c2\u6570\uff1a path: \u7f13\u5b58\u672c\u5730\u6570\u636e\u96c6\u7684\u4f4d\u7f6e (\u76f8\u5bf9\u8def\u5f84 ~/.keras/datasets)\u3002 seed: \u5728\u8ba1\u7b97\u6d4b\u8bd5\u5206\u5272\u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u6df7\u6d17\u7684\u968f\u673a\u79cd\u5b50\u3002 test_split: \u9700\u8981\u4fdd\u7559\u4f5c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\u3002 x_train.shape: (404, 13) y_train.shape: (404,) x_test.shape : (102, 13) y_test.shape : (102,)","title":"boston_housing \u56de\u5f52\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#imdb","text":"\u6570\u636e\u96c6\u6765\u81ea IMDB \u7684 25,000 \u6761\u7535\u5f71\u8bc4\u8bba\uff0c\u4ee5\u60c5\u7eea\uff08\u6b63\u9762/\u8d1f\u9762\uff09\u6807\u8bb0\u3002\u8bc4\u8bba\u5df2\u7ecf\u8fc7\u9884\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u8bcd\u7d22\u5f15\uff08\u6574\u6570\uff09\u7684\u5e8f\u5217\u8868\u793a\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5c06\u8bcd\u6309\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u8fdb\u884c\u7d22\u5f15\uff0c\u4f8b\u5982\u6574\u6570 3 \u7f16\u7801\u6570\u636e\u4e2d\u7b2c\u4e09\u4e2a\u6700\u9891\u7e41\u7684\u8bcd\u3002\u8fd9\u5141\u8bb8\u5feb\u901f\u7b5b\u9009\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\u300c\u53ea\u8003\u8651\u524d 10,000 \u4e2a\u6700\u5e38\u7528\u7684\u8bcd\uff0c\u4f46\u6392\u9664\u524d 20 \u4e2a\u6700\u5e38\u89c1\u7684\u8bcd\u300d\u3002 \u4f5c\u4e3a\u60ef\u4f8b\uff0c0 \u4e0d\u4ee3\u8868\u7279\u5b9a\u7684\u5355\u8bcd\uff0c\u800c\u662f\u88ab\u7528\u4e8e\u7f16\u7801\u4efb\u4f55\u672a\u77e5\u5355\u8bcd\u3002 ( x_train , y_train ), ( x_test , y_test ) = imdb . load_data ( path = \"imdb.npz\" , num_words = None , skip_top = 0 , maxlen = None , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) x_train.shape: (25000,) y_train.shape: (25000,) x_test.shape : (25000,) y_test.shape : (25000,) x_train \u662f\u4e0d\u7b49\u957f\u7684list\u7ec4\u6210\u7684array\uff0c\u6240\u4ee5\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 y_train \u662f\u5206\u7c7b\u6807\u7b7e\uff0c\u53ea\u6709\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6240\u4ee5\u4e5f\u53ea\u663e\u793a\u4e86\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u8bcd\u5e93\uff1a word_index = imdb . get_word_index () print ( len ( word_index )) 88584 i = 0 for k , v in word_index . items (): print ( f \" {k} : {v} \" ) i += 1 if i > 5 : break fawn : 34701 tsukino : 52006 nunnery : 52007 sonja : 16816 vani : 63951 woods : 1408","title":"imdb \u60c5\u611f\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#mnist","text":"( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28) y_test.shape : (10000,) def mnist_plot_img ( img ): plt . figure () plt . gray () plt . imshow ( img ) plt . show () mnist_plot_img ( x_train [ 0 ])","title":"mnist \u624b\u5199\u6570\u5b57\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#cifar10","text":"50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 10 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar10 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ])","title":"cifar10 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#cifar100","text":"50,000 \u5f20 32x32 \u5f69\u8272\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0c\u4ee5\u53ca 10,000 \u5f20\u6d4b\u8bd5\u56fe\u50cf\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a 100 \u4e2a\u7c7b\u522b\u3002 ( x_train , y_train ), ( x_test , y_test ) = cifar100 . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684 RGB \u56fe\u50cf\u6570\u636e\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 3, 32, 32) \u6216 (num_samples, 32, 32, 3) \uff0c\u57fa\u4e8e image_data_format \u540e\u7aef\u8bbe\u5b9a\u7684 channels_first \u6216 channels_last\u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7c7b\u522b\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d , %d )\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d , %d )\" % x_test . shape ) print ( \"y_test.shape : ( %d , %d )\" % y_test . shape ) x_train.shape: (50000, 32, 32, 3) y_train.shape: (50000, 1) x_test.shape : (10000, 32, 32, 3) y_test.shape : (10000, 1) mnist_plot_img ( x_train [ 1 ])","title":"cifar100 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#fashion_mnist","text":"Fashion-MNIST\u662fZalando\u6587\u7ae0\u56fe\u7247\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b60,000\u4e2a\u793a\u4f8b\u7684\u8bad\u7ec3\u96c6\u548c10,000\u4e2a\u793a\u4f8b\u7684\u6d4b\u8bd5\u96c6\u3002\u6bcf\u4e2a\u793a\u4f8b\u90fd\u662f\u4e00\u4e2a28x28\u7070\u5ea6\u56fe\u50cf\uff0c\u4e0e\u6765\u81ea10\u4e2a\u7c7b\u522b\u7684\u6807\u7b7e\u76f8\u5173\u8054\u3002\u7c7b\u522b\u6807\u7b7e\u662f\uff1a \u7c7b\u522b \u63cf\u8ff0 \u4e2d\u6587 0 T-shirt/top T\u6064/\u4e0a\u8863 1 Trouser \u88e4\u5b50 2 Pullover \u5957\u5934\u886b 3 Dress \u8fde\u8863\u88d9 4 Coat \u5916\u5957 5 Sandal \u51c9\u978b 6 Shirt \u886c\u886b 7 Sneaker \u8fd0\u52a8\u978b 8 Bag \u80cc\u5305 9 Ankle boot \u77ed\u9774 ( x_train , y_train ), ( x_test , y_test ) = fashion_mnist . load_data () x_train, x_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u7070\u5ea6\u56fe\u50cf\uff0c\u5c3a\u5bf8\u4e3a (num_samples, 28, 28) \u3002 y_train, y_test: uint8 \u6570\u7ec4\u8868\u793a\u7684\u6570\u5b57\u6807\u7b7e\uff08\u8303\u56f4\u5728 0-9 \u4e4b\u95f4\u7684\u6574\u6570\uff09\uff0c\u5c3a\u5bf8\u4e3a (num_samples,) \u3002 print ( \"x_train.shape: ( %d , %d , %d )\" % x_train . shape ) print ( \"y_train.shape: ( %d ,)\" % y_train . shape ) print ( \"x_test.shape : ( %d , %d , %d \" % x_test . shape ) print ( \"y_test.shape : ( %d ,)\" % y_test . shape ) x_train.shape: (60000, 28, 28) y_train.shape: (60000,) x_test.shape : (10000, 28, 28 y_test.shape : (10000,) mnist_plot_img ( x_train [ 100 ])","title":"fashion_mnist \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"tensorflowb%E7%AC%94%E8%AE%B0/12.1.keras%E6%95%B0%E6%8D%AE%E9%9B%86.html#reuters","text":"\u6570\u636e\u96c6\u6765\u6e90\u4e8e\u8def\u900f\u793e\u7684 11,228 \u6761\u65b0\u95fb\u6587\u672c\uff0c\u603b\u5171\u5206\u4e3a 46 \u4e2a\u4e3b\u9898\u3002\u4e0e IMDB \u6570\u636e\u96c6\u4e00\u6837\uff0c\u6bcf\u6761\u65b0\u95fb\u90fd\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u8bcd\u7d22\u5f15\u7684\u5e8f\u5217\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data ( path = \"reuters.npz\" , num_words = None , skip_top = 0 , maxlen = None , test_split = 0.2 , seed = 113 , start_char = 1 , oov_char = 2 , index_from = 3 ) \u89c4\u683c\u4e0e IMDB \u6570\u636e\u96c6\u7684\u89c4\u683c\u76f8\u540c\uff0c\u4f46\u589e\u52a0\u4e86 test_split \u53c2\u6570\u3002 ( x_train , y_train ), ( x_test , y_test ) = reuters . load_data () x_train.shape: (8982,) y_train.shape: (8982,) x_test.shape : (2246,) y_test.shape : (2246,) word_index = reuters . get_word_index","title":"reuters \u8def\u900f\u793e\u65b0\u95fb\u4e3b\u9898\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html","text":"conda conda \u7684\u53ef\u7528\u547d\u4ee4\u5982\u4e0b\uff1a usage: conda-script.py [-h] [-V] command ... conda is a tool for managing and deploying applications, environments and packages. Options: positional arguments: command clean \u5220\u9664\u672a\u4f7f\u7528\u7684\u5305\u548c\u7f13\u5b58 config \u4fee\u6539.condarc\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u503c create \u4ece\u6307\u5b9a\u7684package\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684conda\u73af\u5883 help \u663e\u793a\u53ef\u7528\u7684conda\u547d\u4ee4\u53ca\u5176\u5e2e\u52a9\u5b57\u7b26\u4e32\u7684\u5217\u8868 info \u663e\u793a\u6709\u5173\u5f53\u524d\u5b89\u88c5\u7684conda\u7684\u4fe1\u606f init \u521d\u59cb\u5316conda\u4ee5\u8fdb\u884cshell\u4ea4\u4e92 [\u5b9e\u9a8c\u6027\u529f\u80fd] install \u628a\u4e00\u4e2a\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u7684conda\u73af\u5883 list \u5217\u51fa\u94fe\u63a5\u5230\u67d0\u4e2aconda\u73af\u5883\u7684\u6240\u6709\u5305\u540d remove \u4ece\u6307\u5b9a\u7684conda\u73af\u5883\u79fb\u9664\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305 uninstall conda remove\u7684\u522b\u540d\u3002 run \u5728 conda \u73af\u5883\u4e2d\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 [\u5b9e\u9a8c\u6027\u529f\u80fd] search \u641c\u7d22package\u5e76\u663e\u793a\u76f8\u5173\u4fe1\u606f\u3002\u8f93\u5165\u662f\u4e00\u4e2aMatchSpec\u8bed\u53e5\uff08conda\u8f6f\u4ef6\u5305\u7684\u67e5\u8be2\u8bed\u8a00\uff09 update \u5c06 conda \u5305\u66f4\u65b0\u4e3a\u6700\u65b0\u7684\u517c\u5bb9\u7248\u672c\u3002 upgrade conda update\u7684\u522b\u540d optional arguments: -h, --help Show this help message and exit. -V, --version Show the conda version number and exit. conda\u547d\u4ee4 conda info \u8be5\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49\u3002 usage: conda-script.py info [ -h ] [ --json ] [ -v ] [ -q ] [ -a ] [ --base ] [ -e ] [ -s ] [ --unsafe-channels ] Display information about current conda install. Options: optional arguments: -h, --help Show this help message and exit. -a, --all \u663e\u793a\u6240\u6709\u4fe1\u606f\u3002 --base \u57fa\u672c\u663e\u793a base \u73af\u5883\u8def\u5f84\u3002 -e, --envs \u5217\u51fa\u6240\u6709\u5df2\u77e5\u7684Conda\u73af\u5883\u3002 -s, --system \u5217\u51fa\u73af\u5883\u53d8\u91cf\u3002 --unsafe-channels Display list of channels with tokens exposed. Output, Prompt, and Flow Control Options: --json Report all output as json. Suitable for using conda programmatically. -v, --verbose Use once for info, twice for debug, three times for trace. -q, --quiet Do not display progress bar. conda create usage: conda-script.py create [ -h ] [ --clone ENV ] [ -n ENVIRONMENT | -p PATH ] [ -c CHANNEL ] [ --use-local ] [ --override-channels ] [ --repodata-fn REPODATA_FNS ] [ --strict-channel-priority ] [ --no-channel-priority ] [ --no-deps | --only-deps ] [ --no-pin ] [ --copy ] [ --no-shortcuts ] [ -C ] [ -k ] [ --offline ] [ -d ] [ --json ] [ -q ] [ -v ] [ -y ] [ --download-only ] [ --show-channel-urls ] [ --file FILE ] [ --no-default-packages ] [ --dev ] [ package_spec [ package_spec ... ]] Create a new conda environment from a list of specified packages. To use the created environment, use 'source activate envname' look in that directory first. This command requires either the -n NAME or -p PREFIX option. Options: positional arguments: package_spec Packages to install or update in the conda environment. optional arguments: -h, --help Show this help message and exit. --clone ENV \u901a\u8fc7\u514b\u9686\u5176\u4ed6\u73af\u5883\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883\uff0c 'ENV' \u53ef\u4ee5\u662f\u73b0\u6709\u672c\u5730\u73af\u5883\u7684\u8def\u5f84\uff08\u6216\u540d \u79f0\uff09\u3002 --file FILE \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883 ( \u4ece\u7ed9\u5b9a\u7684\u6587\u4ef6\u8bfb\u5165\u6307\u5b9a\u7248\u672c\u7684\u5305 ) \u3002\u53ef\u4ee5\u4f20\u9012\u91cd\u590d\u7684\u6587\u4ef6\u89c4\u8303\uff08\u4f8b \u5982--file = file1 --file = file2\uff09\u3002 --dev Use ` sys.executable -m conda ` in wrapper scripts instead of CONDA_EXE This is mainly for use during tests where we test new conda source against old Python versions. Target Environment Specification: -n ENVIRONMENT, --name ENVIRONMENT Name of environment. -p PATH, --prefix PATH Full path to environment location ( i.e. prefix ) . Channel Customization: -c CHANNEL, --channel CHANNEL \u7528\u4e8e\u641c\u7d22\u5305\u7684\u5176\u4ed6\u901a\u9053\u3002\u8fd9\u4e9b URL \u6309\u7ed9\u5b9a\u987a\u5e8f\u641c\u7d22 ( \u5305\u62ec\u672c\u5730\u76ee\u5f55file:// ) \u3002\u7136 \u540e,\u641c\u7d22 .condarc \u4e2d\u7684\u9ed8\u8ba4\u503c\u6216\u901a\u9053 ( \u9664\u975e\u63d0\u4f9b --override-channels ) \u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \"defaults\" \u83b7\u53d6 conda \u7684\u9ed8\u8ba4\u5305\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u540d\u79f0, .condarc\u7684channel_alias\u503c\u5c06\u9884\u7f6e\u3002\u9ed8\u8ba4\u7684channel_alias\u662f http://conda.anaconda.org/\u3002 --use-local \u4f7f\u7528\u672c\u5730\u6784\u5efa\u7684\u5305\u3002\u7b49\u540c\u4e8e \"-c local\" \u3002 --override-channels \u4e0d\u5728 default \u6216\u8005 .condarc channels \u4e2d\u641c\u7d22. Requires --channel. --repodata-fn REPODATA_FNS Specify name of repodata on remote server. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is reduced in time scope. You may pass this flagmore than once. Leftmost entries are tried first, and the fallback torepodata.json is added for you automatically. Solver Mode Modifiers: --strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel. --no-channel-priority Package version takes precedence over channel priority. Overrides the value given by ` conda config --show channel_priority ` . --no-deps Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk. --only-deps Only install dependencies. --no-pin Ignore pinned file. --no-default-packages Ignore create_default_packages in the .condarc file. Package Linking and Install-time Options: --copy Install all packages using copies instead of hard- or soft-linking. --no-shortcuts Don 't install start menu shortcuts Networking Options: -C, --use-index-cache Use cache of channel index files, even if it has expired. -k, --insecure Allow conda to perform \"insecure\" SSL connections and transfers. Equivalent to setting ' ssl_verify ' to ' false '. --offline Offline mode. Don' t connect to the Internet. Output, Prompt, and Flow Control Options: -d, --dry-run Only display what would have been done . --json Report all output as json. Suitable for using conda programmatically. -q, --quiet Do not display progress bar. -v, --verbose Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE. -y, --yes Do not ask for confirmation. --download-only Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix. --show-channel-urls Show channel urls. Overrides the value given by ` conda config --show show_channel_urls ` . conda\u5e38\u7528\u547d\u4ee4 \u67e5\u770b\u4fe1\u606f # \u67e5\u770bconda\u7684\u4fe1\u606f ## \u8be5\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49\u3002 conda info # \u67e5\u770bconda\u7248\u672c\u4fe1\u606f conda -V conda --version \u73af\u5883\u7ba1\u7406 \u67e5\u770b\u73af\u5883\u4fe1\u606f # \u67e5\u770b\u73af\u5883\u4fe1\u606f ## \u67e5\u770b\u7cfb\u7edf\u4e2d\u5b89\u88c5\u7684\u6240\u6709\u73af\u5883\uff1a ### \u8fd9\u4e24\u4e2a\u547d\u4ee4\u90fd\u53ef\u4ee5\u67e5\u770b\u5f53\u524d conda \u4e2d\u5df2\u7ecf\u521b\u5efa\u7684\u73af\u5883\u5217\u8868\uff0c\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u7684\u73af\u5883\u65c1\u8fb9\u4f1a\u6709\u4e00\u4e2a*\u7684\u5b57\u6837\u3002 conda env list conda info \u2013-envs conda info -e ## \u67e5\u770b Conda \u73af\u5883\u7cfb\u7edf\u4fe1\u606f\uff1a conda info \u2013-system conda info \u2013s ## \u67e5\u770b\u73af\u5883\u7cfb\u7edf\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a conda info \u2013-all conda info \u2013a # \u8fdb\u5165\u6307\u5b9a\u73af\u5883 conda activate <env> # \u9000\u51fa\u73af\u5883 conda deactivate \u5bfc\u51fa\u73af\u5883 # \u5bfc\u51fa\u73af\u5883 ## \u5bfc\u51fa\u73af\u5883\u4e4b\u524d\u9996\u5148\u8981\u8fdb\u5165\u8be5\u73af\u5883 conda list -e > package-list.txt conda list -e > package-list.yml ## \u6216\u8005\u8fd9\u6837 ### \u8fd9\u4f1a\u5c06\u5f53\u524d\u73af\u5883\u4e2d\u7531 conda \u7ba1\u7406\u7684\u5305\u548c\u7531 pip \u5b89\u88c5\u7684\u5305\u540c\u65f6\u5bfc\u51fa\u5230\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5f53\u6839\u636e\u6587\u4ef6\u521b\u5efa\u73af\u5883\u65f6\uff0c\u65e0\u9700\u91cd\u65b0\u5b89\u88c5 pip \u7684\u5305\u3002 conda env export \u2013-name base \u2013-file base_bunnies.yml \u521b\u5efa\u73af\u5883 # \u521b\u5efa\u73af\u5883 ## \u65b0\u5efa\u4e00\u4e2a\u540d\u4e3a newenv \u7684\u73af\u5883\uff0c\u5e76\u6307\u5b9a\u65b0\u73af\u5883\u4e2d\u7684 python \u7248\u672c\u4e3a 3.6 \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u4e2d\u53ea\u5e26\u6709\u6700\u57fa\u672c\u7684\u5305 conda create --name newenv python = 3 .6 ## \u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u73af\u5883\u65f6\u5019\uff0c\u5305\u542b\u67d0\u4e9b\u7a0b\u5e8f\u6216\u8005\u5305 conda create --name newenv python = 3 .6 biopython ipython ## \u901a\u8fc7\u514b\u9686\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883 conda create \u2013-name newenv \u2013clone base ## \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883 ### \u5982\u679c\u662f\u7528 conda env export --name \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u53ef\u7528\u4e0b\u5217\u547d\u4ee4\u521b\u5efa\uff1a conda env create -f package-list.yml ### \u5982\u679c\u662f\u7528 conda list -e \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u7528\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a conda create \u2013-name <env> \u2013-file <deps file> \u66f4\u65b0\u73af\u5883 # \u66f4\u65b0\u73af\u5883 conda env update \u2013-name <env> \u2013file = <deps file> \u5220\u9664\u73af\u5883 # \u5220\u9664\u73af\u5883 ## \u5220\u9664\u73af\u5883\u4e2d\u6307\u5b9a\u7684\u5305\uff1a conda remove \u2013-name <env> ipython biopython ## \u5f7b\u5e95\u5220\u9664\u73af\u5883\uff1a conda env remove \u2013name <env> \u4ece\u6307\u5b9a\u8def\u5f84\u5b89\u88c5\u73af\u5883 conda \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u9ed8\u8ba4\u653e\u5728 /User/<yourname>/anaconda/env \u76ee\u5f55\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u67d0\u4e2a\u73af\u5883\u6587\u4ef6\u5939\u6574\u4f53\u62f7\u8d1d\u8d70\uff0c\u590d\u5236\u5230\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u7136\u540e\u57fa\u4e8e\u6b64\u6587\u4ef6\u5939\u521b\u5efa\u73af\u5883\u3002 \u5305\u7ba1\u7406 conda list # \u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u5305 conda update conda # \u5347\u7ea7conda\u81ea\u8eab conda search requests # \u67e5\u8be2\u67d0\u4e2a\u5305 conda install requests # \u5b89\u88c5\u65b0\u5305 conda install -n base requests # \u5c06\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u73af\u5883 conda update --all # \u66f4\u65b0\u6240\u6709\u5305 conda update requests # \u5347\u7ea7\u5305 conda remove requests # \u79fb\u9664\u5305 conda remove -n base requests # \u4ece\u6307\u5b9a\u73af\u5883\u4e2d\u79fb\u9664\u5305 conda \u4e0d\u63d0\u4f9b\u68c0\u67e5\u53ef\u66f4\u65b0\u7684\u5305\u7684\u547d\u4ee4\uff0cupdate \u6240\u6709\u5305\u65f6\u4f1a\u6709\u63d0\u793a\uff0c\u5217\u51fa\u6240\u6709\u53ef\u66f4\u65b0\u7684\u5305\uff0c\u5e76\u8ba9\u7528\u6237\u786e\u8ba4\u662f\u5426\u5168\u90e8\u66f4\u65b0\u3002 \u4e3a conda \u6307\u5b9a\u56fd\u5185\u955c\u50cf\u6e90 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes \u4f7f\u7528 conda config --show channels \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684\u6e90\u4ed3\u5e93\u5730\u5740\u3002","title":"5.1.conda\u7b14\u8bb0"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda","text":"conda \u7684\u53ef\u7528\u547d\u4ee4\u5982\u4e0b\uff1a usage: conda-script.py [-h] [-V] command ... conda is a tool for managing and deploying applications, environments and packages. Options: positional arguments: command clean \u5220\u9664\u672a\u4f7f\u7528\u7684\u5305\u548c\u7f13\u5b58 config \u4fee\u6539.condarc\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u503c create \u4ece\u6307\u5b9a\u7684package\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684conda\u73af\u5883 help \u663e\u793a\u53ef\u7528\u7684conda\u547d\u4ee4\u53ca\u5176\u5e2e\u52a9\u5b57\u7b26\u4e32\u7684\u5217\u8868 info \u663e\u793a\u6709\u5173\u5f53\u524d\u5b89\u88c5\u7684conda\u7684\u4fe1\u606f init \u521d\u59cb\u5316conda\u4ee5\u8fdb\u884cshell\u4ea4\u4e92 [\u5b9e\u9a8c\u6027\u529f\u80fd] install \u628a\u4e00\u4e2a\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u7684conda\u73af\u5883 list \u5217\u51fa\u94fe\u63a5\u5230\u67d0\u4e2aconda\u73af\u5883\u7684\u6240\u6709\u5305\u540d remove \u4ece\u6307\u5b9a\u7684conda\u73af\u5883\u79fb\u9664\u5217\u8868\u4e2d\u5305\u542b\u7684\u5305 uninstall conda remove\u7684\u522b\u540d\u3002 run \u5728 conda \u73af\u5883\u4e2d\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 [\u5b9e\u9a8c\u6027\u529f\u80fd] search \u641c\u7d22package\u5e76\u663e\u793a\u76f8\u5173\u4fe1\u606f\u3002\u8f93\u5165\u662f\u4e00\u4e2aMatchSpec\u8bed\u53e5\uff08conda\u8f6f\u4ef6\u5305\u7684\u67e5\u8be2\u8bed\u8a00\uff09 update \u5c06 conda \u5305\u66f4\u65b0\u4e3a\u6700\u65b0\u7684\u517c\u5bb9\u7248\u672c\u3002 upgrade conda update\u7684\u522b\u540d optional arguments: -h, --help Show this help message and exit. -V, --version Show the conda version number and exit.","title":"conda"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda_1","text":"","title":"conda\u547d\u4ee4"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda-info","text":"\u8be5\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49\u3002 usage: conda-script.py info [ -h ] [ --json ] [ -v ] [ -q ] [ -a ] [ --base ] [ -e ] [ -s ] [ --unsafe-channels ] Display information about current conda install. Options: optional arguments: -h, --help Show this help message and exit. -a, --all \u663e\u793a\u6240\u6709\u4fe1\u606f\u3002 --base \u57fa\u672c\u663e\u793a base \u73af\u5883\u8def\u5f84\u3002 -e, --envs \u5217\u51fa\u6240\u6709\u5df2\u77e5\u7684Conda\u73af\u5883\u3002 -s, --system \u5217\u51fa\u73af\u5883\u53d8\u91cf\u3002 --unsafe-channels Display list of channels with tokens exposed. Output, Prompt, and Flow Control Options: --json Report all output as json. Suitable for using conda programmatically. -v, --verbose Use once for info, twice for debug, three times for trace. -q, --quiet Do not display progress bar.","title":"conda info"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda-create","text":"usage: conda-script.py create [ -h ] [ --clone ENV ] [ -n ENVIRONMENT | -p PATH ] [ -c CHANNEL ] [ --use-local ] [ --override-channels ] [ --repodata-fn REPODATA_FNS ] [ --strict-channel-priority ] [ --no-channel-priority ] [ --no-deps | --only-deps ] [ --no-pin ] [ --copy ] [ --no-shortcuts ] [ -C ] [ -k ] [ --offline ] [ -d ] [ --json ] [ -q ] [ -v ] [ -y ] [ --download-only ] [ --show-channel-urls ] [ --file FILE ] [ --no-default-packages ] [ --dev ] [ package_spec [ package_spec ... ]] Create a new conda environment from a list of specified packages. To use the created environment, use 'source activate envname' look in that directory first. This command requires either the -n NAME or -p PREFIX option. Options: positional arguments: package_spec Packages to install or update in the conda environment. optional arguments: -h, --help Show this help message and exit. --clone ENV \u901a\u8fc7\u514b\u9686\u5176\u4ed6\u73af\u5883\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883\uff0c 'ENV' \u53ef\u4ee5\u662f\u73b0\u6709\u672c\u5730\u73af\u5883\u7684\u8def\u5f84\uff08\u6216\u540d \u79f0\uff09\u3002 --file FILE \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883 ( \u4ece\u7ed9\u5b9a\u7684\u6587\u4ef6\u8bfb\u5165\u6307\u5b9a\u7248\u672c\u7684\u5305 ) \u3002\u53ef\u4ee5\u4f20\u9012\u91cd\u590d\u7684\u6587\u4ef6\u89c4\u8303\uff08\u4f8b \u5982--file = file1 --file = file2\uff09\u3002 --dev Use ` sys.executable -m conda ` in wrapper scripts instead of CONDA_EXE This is mainly for use during tests where we test new conda source against old Python versions. Target Environment Specification: -n ENVIRONMENT, --name ENVIRONMENT Name of environment. -p PATH, --prefix PATH Full path to environment location ( i.e. prefix ) . Channel Customization: -c CHANNEL, --channel CHANNEL \u7528\u4e8e\u641c\u7d22\u5305\u7684\u5176\u4ed6\u901a\u9053\u3002\u8fd9\u4e9b URL \u6309\u7ed9\u5b9a\u987a\u5e8f\u641c\u7d22 ( \u5305\u62ec\u672c\u5730\u76ee\u5f55file:// ) \u3002\u7136 \u540e,\u641c\u7d22 .condarc \u4e2d\u7684\u9ed8\u8ba4\u503c\u6216\u901a\u9053 ( \u9664\u975e\u63d0\u4f9b --override-channels ) \u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \"defaults\" \u83b7\u53d6 conda \u7684\u9ed8\u8ba4\u5305\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u540d\u79f0, .condarc\u7684channel_alias\u503c\u5c06\u9884\u7f6e\u3002\u9ed8\u8ba4\u7684channel_alias\u662f http://conda.anaconda.org/\u3002 --use-local \u4f7f\u7528\u672c\u5730\u6784\u5efa\u7684\u5305\u3002\u7b49\u540c\u4e8e \"-c local\" \u3002 --override-channels \u4e0d\u5728 default \u6216\u8005 .condarc channels \u4e2d\u641c\u7d22. Requires --channel. --repodata-fn REPODATA_FNS Specify name of repodata on remote server. Conda will try whatever you specify, but will ultimately fall back to repodata.json if your specs are not satisfiable with what you specify here. This is used to employ repodata that is reduced in time scope. You may pass this flagmore than once. Leftmost entries are tried first, and the fallback torepodata.json is added for you automatically. Solver Mode Modifiers: --strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel. --no-channel-priority Package version takes precedence over channel priority. Overrides the value given by ` conda config --show channel_priority ` . --no-deps Do not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk. --only-deps Only install dependencies. --no-pin Ignore pinned file. --no-default-packages Ignore create_default_packages in the .condarc file. Package Linking and Install-time Options: --copy Install all packages using copies instead of hard- or soft-linking. --no-shortcuts Don 't install start menu shortcuts Networking Options: -C, --use-index-cache Use cache of channel index files, even if it has expired. -k, --insecure Allow conda to perform \"insecure\" SSL connections and transfers. Equivalent to setting ' ssl_verify ' to ' false '. --offline Offline mode. Don' t connect to the Internet. Output, Prompt, and Flow Control Options: -d, --dry-run Only display what would have been done . --json Report all output as json. Suitable for using conda programmatically. -q, --quiet Do not display progress bar. -v, --verbose Can be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE. -y, --yes Do not ask for confirmation. --download-only Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix. --show-channel-urls Show channel urls. Overrides the value given by ` conda config --show show_channel_urls ` .","title":"conda create"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda_2","text":"","title":"conda\u5e38\u7528\u547d\u4ee4"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_1","text":"# \u67e5\u770bconda\u7684\u4fe1\u606f ## \u8be5\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u5b89\u88c5\u7684 conda \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec conda \u7248\u672c\u3001python \u7248\u672c\u3001\u8f6f\u4ef6\u5305\u4ed3\u5e93\u5730\u5740\u3001\u65b0\u5efa\u73af\u5883\u7684\u5b58\u653e\u8def\u5f84\u7b49\u3002 conda info # \u67e5\u770bconda\u7248\u672c\u4fe1\u606f conda -V conda --version","title":"\u67e5\u770b\u4fe1\u606f"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_2","text":"","title":"\u73af\u5883\u7ba1\u7406"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_3","text":"# \u67e5\u770b\u73af\u5883\u4fe1\u606f ## \u67e5\u770b\u7cfb\u7edf\u4e2d\u5b89\u88c5\u7684\u6240\u6709\u73af\u5883\uff1a ### \u8fd9\u4e24\u4e2a\u547d\u4ee4\u90fd\u53ef\u4ee5\u67e5\u770b\u5f53\u524d conda \u4e2d\u5df2\u7ecf\u521b\u5efa\u7684\u73af\u5883\u5217\u8868\uff0c\u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u7684\u73af\u5883\u65c1\u8fb9\u4f1a\u6709\u4e00\u4e2a*\u7684\u5b57\u6837\u3002 conda env list conda info \u2013-envs conda info -e ## \u67e5\u770b Conda \u73af\u5883\u7cfb\u7edf\u4fe1\u606f\uff1a conda info \u2013-system conda info \u2013s ## \u67e5\u770b\u73af\u5883\u7cfb\u7edf\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\uff1a conda info \u2013-all conda info \u2013a # \u8fdb\u5165\u6307\u5b9a\u73af\u5883 conda activate <env> # \u9000\u51fa\u73af\u5883 conda deactivate","title":"\u67e5\u770b\u73af\u5883\u4fe1\u606f"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_4","text":"# \u5bfc\u51fa\u73af\u5883 ## \u5bfc\u51fa\u73af\u5883\u4e4b\u524d\u9996\u5148\u8981\u8fdb\u5165\u8be5\u73af\u5883 conda list -e > package-list.txt conda list -e > package-list.yml ## \u6216\u8005\u8fd9\u6837 ### \u8fd9\u4f1a\u5c06\u5f53\u524d\u73af\u5883\u4e2d\u7531 conda \u7ba1\u7406\u7684\u5305\u548c\u7531 pip \u5b89\u88c5\u7684\u5305\u540c\u65f6\u5bfc\u51fa\u5230\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5f53\u6839\u636e\u6587\u4ef6\u521b\u5efa\u73af\u5883\u65f6\uff0c\u65e0\u9700\u91cd\u65b0\u5b89\u88c5 pip \u7684\u5305\u3002 conda env export \u2013-name base \u2013-file base_bunnies.yml","title":"\u5bfc\u51fa\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_5","text":"# \u521b\u5efa\u73af\u5883 ## \u65b0\u5efa\u4e00\u4e2a\u540d\u4e3a newenv \u7684\u73af\u5883\uff0c\u5e76\u6307\u5b9a\u65b0\u73af\u5883\u4e2d\u7684 python \u7248\u672c\u4e3a 3.6 \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u4e2d\u53ea\u5e26\u6709\u6700\u57fa\u672c\u7684\u5305 conda create --name newenv python = 3 .6 ## \u4e5f\u53ef\u4ee5\u5728\u521b\u5efa\u73af\u5883\u65f6\u5019\uff0c\u5305\u542b\u67d0\u4e9b\u7a0b\u5e8f\u6216\u8005\u5305 conda create --name newenv python = 3 .6 biopython ipython ## \u901a\u8fc7\u514b\u9686\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883 conda create \u2013-name newenv \u2013clone base ## \u4ece\u6587\u4ef6\u521b\u5efa\u73af\u5883 ### \u5982\u679c\u662f\u7528 conda env export --name \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u53ef\u7528\u4e0b\u5217\u547d\u4ee4\u521b\u5efa\uff1a conda env create -f package-list.yml ### \u5982\u679c\u662f\u7528 conda list -e \u5bfc\u51fa\u7684\u6587\u4ef6\uff0c\u5219\u7528\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a conda create \u2013-name <env> \u2013-file <deps file>","title":"\u521b\u5efa\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_6","text":"# \u66f4\u65b0\u73af\u5883 conda env update \u2013-name <env> \u2013file = <deps file>","title":"\u66f4\u65b0\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_7","text":"# \u5220\u9664\u73af\u5883 ## \u5220\u9664\u73af\u5883\u4e2d\u6307\u5b9a\u7684\u5305\uff1a conda remove \u2013-name <env> ipython biopython ## \u5f7b\u5e95\u5220\u9664\u73af\u5883\uff1a conda env remove \u2013name <env>","title":"\u5220\u9664\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_8","text":"conda \u521b\u5efa\u51fa\u6765\u7684\u73af\u5883\u9ed8\u8ba4\u653e\u5728 /User/<yourname>/anaconda/env \u76ee\u5f55\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u67d0\u4e2a\u73af\u5883\u6587\u4ef6\u5939\u6574\u4f53\u62f7\u8d1d\u8d70\uff0c\u590d\u5236\u5230\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u7136\u540e\u57fa\u4e8e\u6b64\u6587\u4ef6\u5939\u521b\u5efa\u73af\u5883\u3002","title":"\u4ece\u6307\u5b9a\u8def\u5f84\u5b89\u88c5\u73af\u5883"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#_9","text":"conda list # \u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u5305 conda update conda # \u5347\u7ea7conda\u81ea\u8eab conda search requests # \u67e5\u8be2\u67d0\u4e2a\u5305 conda install requests # \u5b89\u88c5\u65b0\u5305 conda install -n base requests # \u5c06\u5305\u5b89\u88c5\u5230\u6307\u5b9a\u73af\u5883 conda update --all # \u66f4\u65b0\u6240\u6709\u5305 conda update requests # \u5347\u7ea7\u5305 conda remove requests # \u79fb\u9664\u5305 conda remove -n base requests # \u4ece\u6307\u5b9a\u73af\u5883\u4e2d\u79fb\u9664\u5305 conda \u4e0d\u63d0\u4f9b\u68c0\u67e5\u53ef\u66f4\u65b0\u7684\u5305\u7684\u547d\u4ee4\uff0cupdate \u6240\u6709\u5305\u65f6\u4f1a\u6709\u63d0\u793a\uff0c\u5217\u51fa\u6240\u6709\u53ef\u66f4\u65b0\u7684\u5305\uff0c\u5e76\u8ba9\u7528\u6237\u786e\u8ba4\u662f\u5426\u5168\u90e8\u66f4\u65b0\u3002","title":"\u5305\u7ba1\u7406"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.1.conda%E7%AC%94%E8%AE%B0.html#conda_3","text":"conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes \u4f7f\u7528 conda config --show channels \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684\u6e90\u4ed3\u5e93\u5730\u5740\u3002","title":"\u4e3a conda \u6307\u5b9a\u56fd\u5185\u955c\u50cf\u6e90"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html","text":"\u4e3a pip\u6307\u5b9a\u6e05\u534e\u955c\u50cf\u6e90 \u6e05\u534e pypi \u955c\u50cf\u6bcf 5 \u5206\u949f\u540c\u6b65\u4e00\u6b21\u3002 \u4e34\u65f6\u4f7f\u7528 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package \u6ce8\u610f\uff0c simple \u4e0d\u80fd\u5c11, \u662f https \u800c\u4e0d\u662f http \u8bbe\u4e3a\u9ed8\u8ba4 \u5347\u7ea7 pip \u5230\u6700\u65b0\u7684\u7248\u672c (>=10.0.0) \u540e\u8fdb\u884c\u914d\u7f6e\uff1a pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \u4e34\u65f6\u4f7f\u7528\u6e05\u534e\u955c\u50cf\u7ad9\u6765\u5347\u7ea7 pip\uff1a pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U","title":"5.2.pip\u7b14\u8bb0"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#pip","text":"\u6e05\u534e pypi \u955c\u50cf\u6bcf 5 \u5206\u949f\u540c\u6b65\u4e00\u6b21\u3002","title":"\u4e3a pip\u6307\u5b9a\u6e05\u534e\u955c\u50cf\u6e90"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#_1","text":"pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package \u6ce8\u610f\uff0c simple \u4e0d\u80fd\u5c11, \u662f https \u800c\u4e0d\u662f http","title":"\u4e34\u65f6\u4f7f\u7528"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.2.pip%E7%AC%94%E8%AE%B0.html#_2","text":"\u5347\u7ea7 pip \u5230\u6700\u65b0\u7684\u7248\u672c (>=10.0.0) \u540e\u8fdb\u884c\u914d\u7f6e\uff1a pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \u4e34\u65f6\u4f7f\u7528\u6e05\u534e\u955c\u50cf\u7ad9\u6765\u5347\u7ea7 pip\uff1a pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U","title":"\u8bbe\u4e3a\u9ed8\u8ba4"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.3.pip%E5%AF%B9%E6%AF%94conda.html","text":"\u4e86\u89e3conda and pip\u7684\u5f02\u540c \u2014\u2014 \u672c\u6587\u7ffb\u8bd1\u81ea\uff1a Understanding Conda and Pip \u539f\u6587\u4f5c\u8005\uff1aJonathan Helmus Conda\u548cpip\u8fd9\u4e24\u4e2a\u5de5\u5177\u6709\u4e00\u4e9b\u91cd\u53e0\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u5b83\u4eec\u5e38\u5e38\u88ab\u8ba4\u4e3a\u662f\u6ca1\u4ec0\u4e48\u533a\u522b\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u88ab\u8bbe\u8ba1\u7528\u4e8e\u4e0d\u540c\u7684\u76ee\u7684\u3002 pip \u662fPython Packaging Authority \u63a8\u8350\u7684\u4ece Python Package Index (PyPI)\u5b89\u88c5\u5305\u7684\u5de5\u5177\u3002 pip\u53ef\u4ee5\u5b89\u88c5\u6253\u5305\u4e3awheels\u683c\u5f0f\u7684\u5305\uff0c\u6216\u8005\u76f4\u63a5\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5\u3002\u4ece\u6e90\u4ee3\u7801\u6587\u4ef6\u5b89\u88c5\u53ef\u80fd\u9700\u8981\u7cfb\u7edf\u5b89\u88c5\u517c\u5bb9\u7684\u7f16\u8bd1\u5668\u548c\u76f8\u5e94\u7684\u5e93 1 \u3002 Conda \u662f\u8de8\u5e73\u53f0\u7684\u5305\u548c\u73af\u5883\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u5b89\u88c5\u548c\u7ba1\u7406\u6765\u81ea Anaconda repository \u548c Anaconda Cloud \u7684conda\u5305\u3002Conda\u5305\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u7f16\u8bd1\u5668\u6765\u5b89\u88c5\u3002\u53e6\u5916\uff0cconda\u5305\u4e0d\u9650\u4e8ePython\u5305\uff0c\u8fd8\u53ef\u4ee5\u5305\u542bC\u6216C++ \u5e93\u3001R\u5305\u6216\u4efb\u4f55\u5176\u4ed6\u8f6f\u4ef6\u3002 \u8fd9\u662fconda\u548cpip\u7684\u5173\u952e\u533a\u522b\u3002pip\u53ea\u80fd\u5b89\u88c5Python\u5305\uff0c\u800cconda\u5b89\u88c5\u7684\u5305\u53ef\u4ee5\u662f\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4f7f\u7528pip\u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u201d\u7cfb\u7edf\u7a0b\u5e8f\u7ba1\u7406\u5668\u201c\u6216\u201d\u4e0b\u8f7d\u5e76\u8fd0\u884c\u5b89\u88c5\u7a0b\u5e8f\u201c\u6765\u5b89\u88c5Python\u89e3\u91ca\u5668\uff0c\u800cConda\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5Python\u5305\u548cPython\u89e3\u91ca\u5668\u3002 \u8fd9\u4e24\u4e2a\u5de5\u5177\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u533a\u522b\u662fconda\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7248\u672c\u7684python\u6216package\u521b\u5efa\u9694\u79bb\u7684\u73af\u5883\u3002\u8fd9\u5728\u4f7f\u7528\u6570\u636e\u79d1\u5b66\u5de5\u5177\u65f6\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u5de5\u5177\u53ef\u80fd\u5305\u542b\u51b2\u7a81\u7684\u4f9d\u8d56\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b83\u4eec\u4e0d\u9002\u5408\u5b89\u88c5\u5230\u76f8\u540c\u7684\u73af\u5883\u4e2d\u3002pip\u6ca1\u6709\u5185\u7f6e\u7684\u73af\u5883\u7ba1\u7406\u529f\u80fd\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e virtualenv \u6216 venv \u7b49\u5176\u4ed6\u5de5\u5177\u6765\u521b\u5efa\u9694\u79bb\u73af\u5883\u3002 pipenv\u3001poetry\u3001hatch wrap pip\u3001virtualenv\u7b49\u5de5\u5177\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\u3002 pip\u548cconda\u5728\u5982\u4f55\u5b9e\u73b0\u73af\u5883\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u65b9\u9762\u4e5f\u6709\u6240\u4e0d\u540c\u3002\u5b89\u88c5\u5305\u65f6\uff0cpip\u4f1a\u5728\u9012\u5f52\u7684\u4e32\u884c\u5faa\u73af\u4e2d\u5b89\u88c5\u4f9d\u8d56\u9879\uff0c\u6ca1\u6709\u52aa\u529b\u786e\u4fdd\u540c\u65f6\u6ee1\u8db3\u6240\u6709\u5305\u7684\u4f9d\u8d56\u6027\u3002\u5982\u679c\u8f83\u65e9\u5b89\u88c5\u7684\u5305\u4e0e\u7a0d\u540e\u5b89\u88c5\u7684\u5305\u5177\u6709\u4e0d\u517c\u5bb9\u7684\u4f9d\u8d56\uff0c\u73af\u5883\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u76f8\u53cd\u7684\uff0cconda\u4f7f\u7528\u4e00\u4e2asatisfiability (SAT)\u7684\u5904\u7406\u7a0b\u5e8f\u53bb\u68c0\u67e5\u73af\u5883\u4e2d\u7684\u6240\u6709\u5305\u7684\u4f9d\u8d56\u662f\u5426\u90fd\u5f97\u5230\u6ee1\u8db3\u3002\u6b64\u68c0\u67e5\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684\u65f6\u95f4\uff0c\u4f46\u53ef\u4ee5\u9632\u6b62\u521b\u5efa\u4e00\u4e2a\u88ab\u7834\u574f\u7684\u73af\u5883\u3002\u53ea\u8981\u5305\u542b\u4f9d\u8d56\u5173\u7cfb\u7684package metadata\u662f\u6b63\u786e\u7684\uff0cconda\u5c31\u53ef\u4ee5\u521b\u5efa\u6709\u6548\u7684\u73af\u5883\u3002 \u8003\u8651\u5230conda\u548cpip\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u6709\u4e9b\u4eba\u8bd5\u56fe\u5c06\u8fd9\u4e9b\u5de5\u5177\u7ed3\u5408\u8d77\u6765\u521b\u5efa\u6570\u636e\u79d1\u5b66\u73af\u5883\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u5c06pip\u4e0econda\u7ed3\u5408\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6709\u4e9b\u5305\u53ea\u80fd\u901a\u8fc7pip\u5b89\u88c5\u3002\u5728Anaconda repository\u4e2d\u67091500\u591a\u4e2a\u5305\u53ef\u7528\uff0c\u5176\u4e2d\u6db5\u76d6\u4e86\u6700\u6d41\u884c\u7684\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u548cAI\u6846\u67b6\u3002\u53e6\u5916\uff0c\u5728conda-forge\u548cbioconda\u7684channel\u8fd8\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u5305\u53ef\u4ee5\u4f7f\u7528conda\u5b89\u88c5\u3002\u5c3d\u7ba1Anaconda cloud\u6709\u5927\u91cf\u7684\u5305\uff0c\u4f46\u4e0ePyPI\u4e0a\u53ef\u63d0\u4f9b\u7684150,000\u591a\u4e2a\u5305\u76f8\u6bd4\uff0c\u6570\u91cf\u4ecd\u7136\u5f88\u5c11\u3002\u6709\u65f6\u5019\u9700\u8981\u7684\u5305\u6ca1\u6709\u76f8\u5e94\u7684conda\u5305\uff0c\u4f46\u5728PyPI\u4e0a\u6709\u5b89\u88c5\u6587\u4ef6\uff0c\u5219\u53ef\u4ee5\u7528pip\u5b89\u88c5\u3002 \u8865\u5145 conda \u5b89\u88c5\u5305\u8def\u5f84\u662f \\Anaconda3\\pkgs pip \u5b89\u88c5\u5305\u8def\u5f84\u5728\u865a\u62df\u73af\u5883\u4e0b\u662f \\Anaconda3\\envs\\Lib\\site-packages pip\u53ef\u80fd\u4f1a\u751f\u6210\u5b58\u5728\u51b2\u7a81\u7684\u73af\u5883\uff0c\u800cconda\u4e0d\u4f1a pip\u4e0econda\u4e0d\u4f1a\u91cd\u590d\u5b89\u88c5\u5df2\u7ecf\u5b89\u88c5\u7684\u4f9d\u8d56 pip\u5b89\u88c5\u7684\u5305\u4e0d\u4f1a\u663e\u793a\u5728anaconda navigation\u7684\u73af\u5883\u4e2d conda \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5305\u53ea\u5b89\u88c5\u4e00\u6b21\uff0c\u7531conda\u96c6\u4e2d\u7ba1\u7406 pip \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u4f7f\u7528\u7684pip\u5728\u4e0d\u540c\u7684\u8def\u5f84\u4e0b\uff0c\u56e0\u6b64\u4f1a\u91cd\u590d\u5b89\u88c5 \u5173\u4e8ePython\u5305\u7ba1\u7406\u5de5\u5177\u7684\u53d1\u5c55\u5386\u53f2\u53ef\u4ee5\u53c2\u8003 Python's New Package Landscape (andrew)\uff0c\u5176\u4e2d\u6587\u7ffb\u8bd1\u7248\u672c \u5728\u8fd9 \u3002\u63d2\u56fe\u6765\u81eahttps://www.xkcd.com/1987/\u3002 \u7f16\u8bd1\u5668\u548c\u5e93\u7528\u4e8e\u7f16\u8bd1\u6e90\u4ee3\u7801\u3002 \u21a9","title":"5.3.pip\u5bf9\u6bd4conda"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.3.pip%E5%AF%B9%E6%AF%94conda.html#conda-and-pip","text":"\u2014\u2014 \u672c\u6587\u7ffb\u8bd1\u81ea\uff1a Understanding Conda and Pip \u539f\u6587\u4f5c\u8005\uff1aJonathan Helmus Conda\u548cpip\u8fd9\u4e24\u4e2a\u5de5\u5177\u6709\u4e00\u4e9b\u91cd\u53e0\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u5b83\u4eec\u5e38\u5e38\u88ab\u8ba4\u4e3a\u662f\u6ca1\u4ec0\u4e48\u533a\u522b\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u88ab\u8bbe\u8ba1\u7528\u4e8e\u4e0d\u540c\u7684\u76ee\u7684\u3002 pip \u662fPython Packaging Authority \u63a8\u8350\u7684\u4ece Python Package Index (PyPI)\u5b89\u88c5\u5305\u7684\u5de5\u5177\u3002 pip\u53ef\u4ee5\u5b89\u88c5\u6253\u5305\u4e3awheels\u683c\u5f0f\u7684\u5305\uff0c\u6216\u8005\u76f4\u63a5\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5\u3002\u4ece\u6e90\u4ee3\u7801\u6587\u4ef6\u5b89\u88c5\u53ef\u80fd\u9700\u8981\u7cfb\u7edf\u5b89\u88c5\u517c\u5bb9\u7684\u7f16\u8bd1\u5668\u548c\u76f8\u5e94\u7684\u5e93 1 \u3002 Conda \u662f\u8de8\u5e73\u53f0\u7684\u5305\u548c\u73af\u5883\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u5b89\u88c5\u548c\u7ba1\u7406\u6765\u81ea Anaconda repository \u548c Anaconda Cloud \u7684conda\u5305\u3002Conda\u5305\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u7f16\u8bd1\u5668\u6765\u5b89\u88c5\u3002\u53e6\u5916\uff0cconda\u5305\u4e0d\u9650\u4e8ePython\u5305\uff0c\u8fd8\u53ef\u4ee5\u5305\u542bC\u6216C++ \u5e93\u3001R\u5305\u6216\u4efb\u4f55\u5176\u4ed6\u8f6f\u4ef6\u3002 \u8fd9\u662fconda\u548cpip\u7684\u5173\u952e\u533a\u522b\u3002pip\u53ea\u80fd\u5b89\u88c5Python\u5305\uff0c\u800cconda\u5b89\u88c5\u7684\u5305\u53ef\u4ee5\u662f\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4f7f\u7528pip\u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u201d\u7cfb\u7edf\u7a0b\u5e8f\u7ba1\u7406\u5668\u201c\u6216\u201d\u4e0b\u8f7d\u5e76\u8fd0\u884c\u5b89\u88c5\u7a0b\u5e8f\u201c\u6765\u5b89\u88c5Python\u89e3\u91ca\u5668\uff0c\u800cConda\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5Python\u5305\u548cPython\u89e3\u91ca\u5668\u3002 \u8fd9\u4e24\u4e2a\u5de5\u5177\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u533a\u522b\u662fconda\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7248\u672c\u7684python\u6216package\u521b\u5efa\u9694\u79bb\u7684\u73af\u5883\u3002\u8fd9\u5728\u4f7f\u7528\u6570\u636e\u79d1\u5b66\u5de5\u5177\u65f6\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u5de5\u5177\u53ef\u80fd\u5305\u542b\u51b2\u7a81\u7684\u4f9d\u8d56\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b83\u4eec\u4e0d\u9002\u5408\u5b89\u88c5\u5230\u76f8\u540c\u7684\u73af\u5883\u4e2d\u3002pip\u6ca1\u6709\u5185\u7f6e\u7684\u73af\u5883\u7ba1\u7406\u529f\u80fd\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e virtualenv \u6216 venv \u7b49\u5176\u4ed6\u5de5\u5177\u6765\u521b\u5efa\u9694\u79bb\u73af\u5883\u3002 pipenv\u3001poetry\u3001hatch wrap pip\u3001virtualenv\u7b49\u5de5\u5177\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\u3002 pip\u548cconda\u5728\u5982\u4f55\u5b9e\u73b0\u73af\u5883\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u65b9\u9762\u4e5f\u6709\u6240\u4e0d\u540c\u3002\u5b89\u88c5\u5305\u65f6\uff0cpip\u4f1a\u5728\u9012\u5f52\u7684\u4e32\u884c\u5faa\u73af\u4e2d\u5b89\u88c5\u4f9d\u8d56\u9879\uff0c\u6ca1\u6709\u52aa\u529b\u786e\u4fdd\u540c\u65f6\u6ee1\u8db3\u6240\u6709\u5305\u7684\u4f9d\u8d56\u6027\u3002\u5982\u679c\u8f83\u65e9\u5b89\u88c5\u7684\u5305\u4e0e\u7a0d\u540e\u5b89\u88c5\u7684\u5305\u5177\u6709\u4e0d\u517c\u5bb9\u7684\u4f9d\u8d56\uff0c\u73af\u5883\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u76f8\u53cd\u7684\uff0cconda\u4f7f\u7528\u4e00\u4e2asatisfiability (SAT)\u7684\u5904\u7406\u7a0b\u5e8f\u53bb\u68c0\u67e5\u73af\u5883\u4e2d\u7684\u6240\u6709\u5305\u7684\u4f9d\u8d56\u662f\u5426\u90fd\u5f97\u5230\u6ee1\u8db3\u3002\u6b64\u68c0\u67e5\u53ef\u80fd\u9700\u8981\u989d\u5916\u7684\u65f6\u95f4\uff0c\u4f46\u53ef\u4ee5\u9632\u6b62\u521b\u5efa\u4e00\u4e2a\u88ab\u7834\u574f\u7684\u73af\u5883\u3002\u53ea\u8981\u5305\u542b\u4f9d\u8d56\u5173\u7cfb\u7684package metadata\u662f\u6b63\u786e\u7684\uff0cconda\u5c31\u53ef\u4ee5\u521b\u5efa\u6709\u6548\u7684\u73af\u5883\u3002 \u8003\u8651\u5230conda\u548cpip\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u6709\u4e9b\u4eba\u8bd5\u56fe\u5c06\u8fd9\u4e9b\u5de5\u5177\u7ed3\u5408\u8d77\u6765\u521b\u5efa\u6570\u636e\u79d1\u5b66\u73af\u5883\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u5c06pip\u4e0econda\u7ed3\u5408\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6709\u4e9b\u5305\u53ea\u80fd\u901a\u8fc7pip\u5b89\u88c5\u3002\u5728Anaconda repository\u4e2d\u67091500\u591a\u4e2a\u5305\u53ef\u7528\uff0c\u5176\u4e2d\u6db5\u76d6\u4e86\u6700\u6d41\u884c\u7684\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u548cAI\u6846\u67b6\u3002\u53e6\u5916\uff0c\u5728conda-forge\u548cbioconda\u7684channel\u8fd8\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u5305\u53ef\u4ee5\u4f7f\u7528conda\u5b89\u88c5\u3002\u5c3d\u7ba1Anaconda cloud\u6709\u5927\u91cf\u7684\u5305\uff0c\u4f46\u4e0ePyPI\u4e0a\u53ef\u63d0\u4f9b\u7684150,000\u591a\u4e2a\u5305\u76f8\u6bd4\uff0c\u6570\u91cf\u4ecd\u7136\u5f88\u5c11\u3002\u6709\u65f6\u5019\u9700\u8981\u7684\u5305\u6ca1\u6709\u76f8\u5e94\u7684conda\u5305\uff0c\u4f46\u5728PyPI\u4e0a\u6709\u5b89\u88c5\u6587\u4ef6\uff0c\u5219\u53ef\u4ee5\u7528pip\u5b89\u88c5\u3002","title":"\u4e86\u89e3conda and pip\u7684\u5f02\u540c"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.3.pip%E5%AF%B9%E6%AF%94conda.html#_1","text":"conda \u5b89\u88c5\u5305\u8def\u5f84\u662f \\Anaconda3\\pkgs pip \u5b89\u88c5\u5305\u8def\u5f84\u5728\u865a\u62df\u73af\u5883\u4e0b\u662f \\Anaconda3\\envs\\Lib\\site-packages pip\u53ef\u80fd\u4f1a\u751f\u6210\u5b58\u5728\u51b2\u7a81\u7684\u73af\u5883\uff0c\u800cconda\u4e0d\u4f1a pip\u4e0econda\u4e0d\u4f1a\u91cd\u590d\u5b89\u88c5\u5df2\u7ecf\u5b89\u88c5\u7684\u4f9d\u8d56 pip\u5b89\u88c5\u7684\u5305\u4e0d\u4f1a\u663e\u793a\u5728anaconda navigation\u7684\u73af\u5883\u4e2d conda \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5305\u53ea\u5b89\u88c5\u4e00\u6b21\uff0c\u7531conda\u96c6\u4e2d\u7ba1\u7406 pip \u4e3a\u591a\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u65f6\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u73af\u5883\u5b89\u88c5\u5305\u4f7f\u7528\u7684pip\u5728\u4e0d\u540c\u7684\u8def\u5f84\u4e0b\uff0c\u56e0\u6b64\u4f1a\u91cd\u590d\u5b89\u88c5 \u5173\u4e8ePython\u5305\u7ba1\u7406\u5de5\u5177\u7684\u53d1\u5c55\u5386\u53f2\u53ef\u4ee5\u53c2\u8003 Python's New Package Landscape (andrew)\uff0c\u5176\u4e2d\u6587\u7ffb\u8bd1\u7248\u672c \u5728\u8fd9 \u3002\u63d2\u56fe\u6765\u81eahttps://www.xkcd.com/1987/\u3002 \u7f16\u8bd1\u5668\u548c\u5e93\u7528\u4e8e\u7f16\u8bd1\u6e90\u4ee3\u7801\u3002 \u21a9","title":"\u8865\u5145"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.4.anaconda.html","text":"Anaconda\u4e0b\u5404\u4e2a\u6587\u4ef6\u5939\u4f5c\u7528 anacoda3/conda-meta/history \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u5b89\u88c5\u3001\u5378\u8f7d\u3001\u5347\u7ea7\u5305\u7684\u64cd\u4f5c anaconda3/pkgs/urls.txt \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u4e0b\u8f7d\u5305\u7684\u5730\u5740\uff0c\u76f4\u63a5\u590d\u5236\u5730\u5740\u5230\u6d4f\u89c8\u5668\u4e2d\u4e5f\u53ef\u4ee5\u4e0b\u8f7d anaconda3/conda-meta/ \uff1a\u6587\u4ef6\u5939\u91cc\u4fdd\u5b58\u7740\u4e0e\u5404\u4e2a\u5305\u540c\u540d\u7684.json\u6587\u4ef6\uff08\u6709\u4e9b\u5305\u4f1a\u6709\u591a\u4e2a.json\u6587\u4ef6\uff09\uff0c\u8fd9\u4e9bjson\u6587\u4ef6\u4f1a\u8bb0\u5f55\u5bf9\u5e94\u7684\u5305\u7684\u7248\u672c\u3001\u5b58\u653e\u4f4d\u7f6e\u3001md5\u503c\u7b49\u4fe1\u606f anaconda3/pkgs/ \uff1a\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u5b58\u653e\u4e86\u6bcf\u4e2a\u5305\u521a\u4e0b\u8f7d\u6765\u7684\u6587\u4ef6\uff0c\u683c\u5f0f\u662f.tar.gz2\uff0c\u53e6\u5916\u4e5f\u4f1a\u81ea\u52a8\u89e3\u538b\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u3002\u6bd4\u5982\u4f60\u4e0b\u8f7d\u4e86six\u8fd9\u4e2a\u5305\uff0canaconda3/pkgs/\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u4f1a\u591a\u51fa\u5982\u4e0b2\u4e2a\u6587\u4ef6\u3002\u53e6\u5916\uff0c\u5f53\u4f60\u5378\u8f7d\u5305\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u76842\u4e2a\u6587\u4ef6\u662f\u4e0d\u4f1a\u88ab\u5220\u9664\u7684 anaconda3/lib/python3.6/site-packages/ \uff1a\u5305\u7684\u5b58\u653e\u76ee\u5f55 anaconda3/bin \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b\u53ef\u6267\u884c\u6587\u4ef6 anaconda3/lib \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b.so\u6587\u4ef6 anaconda3/include \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/man \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/share \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6","title":"5.4.anaconda"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.4.anaconda.html#anaconda","text":"anacoda3/conda-meta/history \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u5b89\u88c5\u3001\u5378\u8f7d\u3001\u5347\u7ea7\u5305\u7684\u64cd\u4f5c anaconda3/pkgs/urls.txt \uff1a\u8bb0\u5f55\u7528\u6237\u4f7f\u7528conda\u547d\u4ee4\u4e0b\u8f7d\u5305\u7684\u5730\u5740\uff0c\u76f4\u63a5\u590d\u5236\u5730\u5740\u5230\u6d4f\u89c8\u5668\u4e2d\u4e5f\u53ef\u4ee5\u4e0b\u8f7d anaconda3/conda-meta/ \uff1a\u6587\u4ef6\u5939\u91cc\u4fdd\u5b58\u7740\u4e0e\u5404\u4e2a\u5305\u540c\u540d\u7684.json\u6587\u4ef6\uff08\u6709\u4e9b\u5305\u4f1a\u6709\u591a\u4e2a.json\u6587\u4ef6\uff09\uff0c\u8fd9\u4e9bjson\u6587\u4ef6\u4f1a\u8bb0\u5f55\u5bf9\u5e94\u7684\u5305\u7684\u7248\u672c\u3001\u5b58\u653e\u4f4d\u7f6e\u3001md5\u503c\u7b49\u4fe1\u606f anaconda3/pkgs/ \uff1a\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u5b58\u653e\u4e86\u6bcf\u4e2a\u5305\u521a\u4e0b\u8f7d\u6765\u7684\u6587\u4ef6\uff0c\u683c\u5f0f\u662f.tar.gz2\uff0c\u53e6\u5916\u4e5f\u4f1a\u81ea\u52a8\u89e3\u538b\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u3002\u6bd4\u5982\u4f60\u4e0b\u8f7d\u4e86six\u8fd9\u4e2a\u5305\uff0canaconda3/pkgs/\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u4f1a\u591a\u51fa\u5982\u4e0b2\u4e2a\u6587\u4ef6\u3002\u53e6\u5916\uff0c\u5f53\u4f60\u5378\u8f7d\u5305\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u76842\u4e2a\u6587\u4ef6\u662f\u4e0d\u4f1a\u88ab\u5220\u9664\u7684 anaconda3/lib/python3.6/site-packages/ \uff1a\u5305\u7684\u5b58\u653e\u76ee\u5f55 anaconda3/bin \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b\u53ef\u6267\u884c\u6587\u4ef6 anaconda3/lib \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e00\u4e9b.so\u6587\u4ef6 anaconda3/include \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/man \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6 anaconda3/share \uff1a\u5b89\u88c5\u4e00\u4e9b\u5305\u7684\u65f6\u5019\u4f1a\u5f80\u91cc\u91cc\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6587\u4ef6","title":"Anaconda\u4e0b\u5404\u4e2a\u6587\u4ef6\u5939\u4f5c\u7528"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html","text":"\u8ba9\u4ee3\u7801\u7a97\u53e3\u8f93\u51fa\u5168\u90e8\u7ed3\u679c \u5c06\u6b64\u4ee3\u7801\u653e\u7f6e\u5728jupyter\u5355\u5143\u4e2d\uff1a from IPython.core.interactiveshell import InteractiveShell InteractiveShell . ast_node_interactivity = \"all\" \u4fee\u6539\u5168\u5c40\u8bbe\u7f6e \u5728Windows\u4e2d\uff0c\u4ee5\u4e0b\u6b65\u9aa4\u4f1a\u4f7f\u66f4\u6539\u6c38\u4e45\u751f\u6548\u3002\u5e94\u8be5\u9002\u7528\u4e8e\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u3002\u60a8\u53ef\u80fd\u5fc5\u987b\u66f4\u6539\u8def\u5f84\u3002 C:\\Users\\your_profile\\\\.ipython\\profile_default \u505a\u4e00\u4e2aipython_config.py\u6587\u4ef6\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801profile_defaults\uff1a c = get_config () c . InteractiveShell . ast_node_interactivity = \"all\" \u4f7f\u7528 print \u51fd\u6570 \u5feb\u6377\u952e\u4f7f\u7528\u6307\u5357 Jupyter Notebook \u6709\u4e24\u79cd\u952e\u76d8\u8f93\u5165\u6a21\u5f0f\u3002\u5373\u547d\u4ee4\u6a21\u5f0f\u548c\u7f16\u8f91\u6a21\u5f0f\uff0c\u8fd9\u4e0e Vim \u6709\u4e9b\u7c7b\u4f3c\u3002\u5728\u7f16\u8f91\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u5f80cell\u4e2d\u952e\u5165\u4ee3\u7801\u6216\u6587\u672c\uff0c\u6b64\u65f6\u547d\u4ee4\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002\u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u7528\u5feb\u6377\u952e\u547d\u4ee4\u8fd0\u884c\u5355\u5143\u683c\uff0c\u79fb\u52a8\u5355\u5143\u683c\uff0c\u5207\u6362\u5355\u5143\u683c\u7f16\u8f91\u72b6\u6001\u7b49\u7b49\uff0c\u6b64\u65f6\u7f16\u8f91\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002 \u4ece\u547d\u4ee4\u6a21\u5f0f\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\u9700\u6309 Enter \u952e\uff0c\u4ece\u7f16\u8f91\u6a21\u5f0f\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f\u9700\u6309 Esc \u952e\u3002 \u4ee5\u4e0b\u4e24\u8868\u5206\u522b\u662f\u5bf9\u547d\u4ee4\u548c\u7f16\u8f91\u4e24\u79cd\u6a21\u5f0f\u4e0b\u5feb\u6377\u952e\u7684\u7b80\u5355\u8bf4\u660e\uff1a \u547d\u4ee4\u6a21\u5f0f\u5feb\u6377\u952e\uff08\u6309 Esc \u952e\u5f00\u542f\uff09: \u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Enter \u8f6c\u5165\u7f16\u8f91\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e2a\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u5176\u4e0b\u63d2\u5165\u65b0\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Y \u5355\u5143\u8f6c\u5165\u4ee3\u7801\u72b6\u6001 M \u5355\u5143\u8f6c\u5165 markdown \u72b6\u6001 R \u5355\u5143\u8f6c\u5165 raw \u72b6\u6001 1 \u8bbe\u5b9a 1 \u7ea7\u6807\u9898 \u4ec5\u5728 markdown \u72b6\u6001\u4e0b\u65f6\u5efa\u8bae\u4f7f\u7528\u6807\u9898\u76f8\u5173\u5feb\u6377\u952e\uff0c\u5982\u679c\u5355\u5143\u5904\u4e8e\u5176\u4ed6\u72b6\u6001\uff0c\u5219\u4f1a\u5f3a\u5236\u5207\u6362\u5230 markdown \u72b6\u6001 2 \u8bbe\u5b9a 2 \u7ea7\u6807\u9898 3 \u8bbe\u5b9a 3 \u7ea7\u6807\u9898 4 \u8bbe\u5b9a 4 \u7ea7\u6807\u9898 5 \u8bbe\u5b9a 5 \u7ea7\u6807\u9898 6 \u8bbe\u5b9a 6 \u7ea7\u6807\u9898 Up \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 K \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 Down \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 J \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 Shift-K \u8fde\u7eed\u9009\u62e9\u4e0a\u65b9\u5355\u5143 Shift-J \u8fde\u7eed\u9009\u62e9\u4e0b\u65b9\u5355\u5143 A \u5728\u4e0a\u65b9\u63d2\u5165\u65b0\u5355\u5143 B \u5728\u4e0b\u65b9\u63d2\u5165\u65b0\u5355\u5143 X \u526a\u5207\u9009\u4e2d\u7684\u5355\u5143 C \u590d\u5236\u9009\u4e2d\u7684\u5355\u5143 Shift-V \u7c98\u8d34\u5230\u4e0a\u65b9\u5355\u5143 V \u7c98\u8d34\u5230\u4e0b\u65b9\u5355\u5143 Z \u6062\u590d\u5220\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5355\u5143 D,D \u5220\u9664\u9009\u4e2d\u7684\u5355\u5143 \u8fde\u7eed\u6309\u4e24\u4e2a D \u952e Shift-M \u5408\u5e76\u9009\u4e2d\u7684\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook S \u4fdd\u5b58\u5f53\u524d NoteBook L \u5f00\u5173\u884c\u53f7 \u7f16\u8f91\u6846\u7684\u884c\u53f7\u662f\u53ef\u4ee5\u5f00\u542f\u548c\u5173\u95ed\u7684 O \u8f6c\u6362\u8f93\u51fa Shift-O \u8f6c\u6362\u8f93\u51fa\u6eda\u52a8 Esc \u5173\u95ed\u9875\u9762 Q \u5173\u95ed\u9875\u9762 H \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 I,I \u4e2d\u65ad NoteBook \u5185\u6838 0,0 \u91cd\u542f NoteBook \u5185\u6838 Shift \u5ffd\u7565 Shift-Space \u5411\u4e0a\u6eda\u52a8 Space \u5411\u4e0b\u6eda\u52a8 \u7f16\u8f91\u6a21\u5f0f\u5feb\u6377\u952e\uff08 \u6309 Enter \u952e\u542f\u52a8\uff09: \u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Tab \u4ee3\u7801\u8865\u5168\u6216\u7f29\u8fdb Shift-Tab \u63d0\u793a \u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\uff0c\u90e8\u5206\u51fd\u6570\u3001\u7c7b\u3001\u65b9\u6cd5\u7b49\u4f1a\u663e\u793a\u5176\u5b9a\u4e49\u539f\u578b\uff0c\u5982\u679c\u5728\u5176\u540e\u52a0 ? \u518d\u8fd0\u884c\u4f1a\u663e\u793a\u66f4\u52a0\u8be6\u7ec6\u7684\u5e2e\u52a9 Ctrl-] \u7f29\u8fdb \u5411\u53f3\u7f29\u8fdb Ctrl-[ \u89e3\u9664\u7f29\u8fdb \u5411\u5de6\u7f29\u8fdb Ctrl-A \u5168\u9009 Ctrl-Z \u64a4\u9500 Ctrl-Shift-Z \u91cd\u505a Ctrl-Y \u91cd\u505a Ctrl-Home \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-Up \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-End \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Down \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Left \u8df3\u5230\u5de6\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Right \u8df3\u5230\u53f3\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Backspace \u5220\u9664\u524d\u9762\u4e00\u4e2a\u5b57 Ctrl-Delete \u5220\u9664\u540e\u9762\u4e00\u4e2a\u5b57 Esc \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Ctrl-M \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u4e0b\u9762\u63d2\u5165\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Ctrl-Shift-- \u5206\u5272\u5355\u5143 \u6309\u5149\u6807\u6240\u5728\u884c\u8fdb\u884c\u5206\u5272 Ctrl-Shift-Subtract \u5206\u5272\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook Shift \u5ffd\u7565 Up \u5149\u6807\u4e0a\u79fb\u6216\u8f6c\u5165\u4e0a\u4e00\u5355\u5143 Down \u5149\u6807\u4e0b\u79fb\u6216\u8f6c\u5165\u4e0b\u4e00\u5355\u5143 Ctrl-/ \u6ce8\u91ca\u6574\u884c/\u64a4\u9500\u6ce8\u91ca \u4ec5\u4ee3\u7801\u72b6\u6001\u6709\u6548 \u6ce8\uff1a \u5982\u679c\u5feb\u6377\u952e\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u5e94\u7528\u5360\u7528\uff0c\u5219\u53ef\u80fd\u4f1a\u5931\u6548 \u5728\u4efb\u610f\u76ee\u5f55\u4e0b\u6253\u5f00notebook \u5728\u8be5\u76ee\u5f55\u4e0b\uff1ashift + \u53f3\u952e \ud83d\udc49 \u6253\u5f00powershell\uff0c\u8f93\u5165jupter notebook \u81ea\u5b9a\u4e49\u4e3b\u9898 \u901a\u8fc7 pip \u5b89\u88c5 jupyterthemes package\uff1a # \u5b89\u88c5 pip install jupyterthemes # \u66f4\u65b0jupyterthemes pip install --upgrade jupyterthemes \u5b89\u88c5\u597d jupyterthemes package\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8f93\u5165 jupyterthemes \u7684\u547d\u4ee4\uff1a # \u5217\u51fa\u6240\u6709\u5b89\u88c5\u597d\u7684\u4e3b\u9898 jt -l # \u4f7f\u7528\u5e2e\u52a9 jt -h \u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53c2\u89c1\uff1a jupyterthemes\u5b98\u65b9\u8bf4\u660e \u5b89\u88c5\u6269\u5c55 \u5b89\u88c5 jupyter_contrib_nbextensions \u5305\u3002\u8be5\u63d2\u4ef6\u5e76\u4e0d\u662fjupyter notebook\u5b98\u65b9\u7684\u63d2\u4ef6\u3002\u5177\u4f53\u53c2\u8003 Unofficial Jupyter Notebook Extensions \u548c \u4e3aJupyter Notebook\u5b89\u88c5\u6269\u5c55\u5e76\u542f\u7528Configurator \u3002 # \u5b89\u88c5 pip install jupyter_contrib_nbextensions # \u6216\u8005\u901a\u8fc7conda\u5b89\u88c5 conda install -c conda-forge jupyter_contrib_nbextensions # \u6fc0\u6d3b jupyter contrib nbextension install --user # \u542f\u7528 jupyter nbextensions_configurator enable --user \u8f93\u51fa\u5e26\u6709\u4e2d\u6587\u7684pdf jupyter notebook\u672c\u8eab\u4e0d\u80fd\u8f93\u51fapdf\uff0c\u8f93\u51fapdf\u4f9d\u8d56\u4e8e$\\LaTeX$\u5f15\u64ce\u3002\u76ee\u524d\uff0c\u5e26\u6709\u4e2d\u6587\u7684ipynb\u6587\u4ef6\u8f93\u51fa\u4e3apdf\u4f1a\u62a5\u9519\uff0c\u4e3b\u8981\u539f\u56e0\u662fjupyter\u7684$\\LaTeX$\u6a21\u677f\u8bbe\u7f6e\u4e86$\\text{pdf}\\LaTeX$\u5f15\u64ce\uff0c\u4f46\u662fPdf$\\LaTeX$\u4e0d\u53ef\u4ee5\u76f4\u63a5\u7f16\u8bd1\u4e2d\u6587\u6587\u6863\u7684\u3002\u56e0\u6b64\uff0c\u9700\u8981\u628ajupyter\u7684$\\LaTeX$\u5f15\u64ce\u6539\u4e3a$\\text{Xe}\\LaTeX$\u5f15\u64ce\u3002 \u4fee\u6539\u6a21\u677f\uff0c\u6a21\u677f\u4f4d\u7f6e\u4e3a\uff1a...\\site-packages\\nbconvert\\templates\\latex\\article.tplx\uff0c\u5c06latex\u6a21\u677f\u7c7b\u7531article\u6539\u4e3actexart\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [11pt] { article } ((* endblock docclass *)) \u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [13pt] { ctexart } ((* endblock docclass *)) \u6216\u8005\uff0c\u4f9d\u7136\u4f7f\u7528PdfLatex\u5f15\u64ce\uff0c\u4f46\u5f15\u5165xeCJK\u5b8f\u5305\uff1a \\documentclass [11pt] { article } \\usepackage { xeCJK } % \u5982\u679c\u8bbe\u7f6emainfont\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5df2\u5b89\u88c5\u7684\u4e2d\u6587\u5b57\u4f53\uff0c\u4f8b\u5982\u5fae\u8f6f\u96c5\u9ed1\u3002 %\\setCJKmainfont{SourceHanSansCN-Light} \u60f3\u8981\u4fee\u6539\u8f93\u51fapdf\u7684\u6392\u7248\uff0c\u5219\u9700\u8981\u4fee\u6539\u5176\u9884\u5b9a\u4e49\u7684latex\u6392\u7248\u6a21\u677f\uff0c\u5373base.tplx\u6587\u4ef6\u3002\u4f8b\u5982\u53ef\u4ee5\u5728base.tplx\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\u63a7\u5236\u8f93\u51fa\u7684pdf\u7684\u9875\u8fb9\u8ddd\u3002 \\geometry { a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm } \u4f46\u662f\uff0c\u53ef\u80fd\u6539\u4e86jupyter\u7684latex\u6a21\u677f\uff0cjupyter notebook\u8f93\u51fapdf\u4f9d\u7136\u62a5\u9519\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u62a5\u9519\u4fe1\u606f\uff1a nbconvert failed: PDF creating failed, captured latex output: This is XeTeX, Version 3.14159265-2.6-0.99999 (TeX Live 2018/W32TeX) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode ! Undefined control sequence. <*> .\\notebook .tex ? ! Emergency stop. <*> .\\notebook .tex No pages of output. Transcript written on ?. \u8fd9\u662fjupyter\u4e2d\u63a7\u5236\u8c03\u7528latex\u5f15\u64ce\u7684\u811a\u672cpdf.py\u6709bug\uff0c\u4f4d\u4e8e66\u884c\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '.' }) \u6b63\u786e\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '' }) \u539f\u6765\u7684\u4ee3\u7801\u7ed9xelatex\u5f15\u64ce\u53d1\u9001\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u8def\u5f84\uff1a \u9519\u8bef\u7684\u8def\u5f84\uff1a xelatex .\\notebook.tex \u6b63\u786e\u7684\u8def\u5f84\uff1a xelatex notebook.tex \u8be6\u7ec6\u5185\u5bb9\u53c2\u8003\u8fd9\u91cc Problem in Converting Jupyter notebook to pdf #144 \u3002 \u7248\u672c\u63a7\u5236 Save and CheckPoint \u548c Revert to CheckPoint\u3002","title":"5.5.jupyter\u4f7f\u7528\u7b14\u8bb0"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_1","text":"\u5c06\u6b64\u4ee3\u7801\u653e\u7f6e\u5728jupyter\u5355\u5143\u4e2d\uff1a from IPython.core.interactiveshell import InteractiveShell InteractiveShell . ast_node_interactivity = \"all\" \u4fee\u6539\u5168\u5c40\u8bbe\u7f6e \u5728Windows\u4e2d\uff0c\u4ee5\u4e0b\u6b65\u9aa4\u4f1a\u4f7f\u66f4\u6539\u6c38\u4e45\u751f\u6548\u3002\u5e94\u8be5\u9002\u7528\u4e8e\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u3002\u60a8\u53ef\u80fd\u5fc5\u987b\u66f4\u6539\u8def\u5f84\u3002 C:\\Users\\your_profile\\\\.ipython\\profile_default \u505a\u4e00\u4e2aipython_config.py\u6587\u4ef6\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801profile_defaults\uff1a c = get_config () c . InteractiveShell . ast_node_interactivity = \"all\" \u4f7f\u7528 print \u51fd\u6570","title":"\u8ba9\u4ee3\u7801\u7a97\u53e3\u8f93\u51fa\u5168\u90e8\u7ed3\u679c"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_2","text":"Jupyter Notebook \u6709\u4e24\u79cd\u952e\u76d8\u8f93\u5165\u6a21\u5f0f\u3002\u5373\u547d\u4ee4\u6a21\u5f0f\u548c\u7f16\u8f91\u6a21\u5f0f\uff0c\u8fd9\u4e0e Vim \u6709\u4e9b\u7c7b\u4f3c\u3002\u5728\u7f16\u8f91\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u5f80cell\u4e2d\u952e\u5165\u4ee3\u7801\u6216\u6587\u672c\uff0c\u6b64\u65f6\u547d\u4ee4\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002\u5728\u547d\u4ee4\u6a21\u5f0f\u4e0b\uff0c\u53ef\u4ee5\u7528\u5feb\u6377\u952e\u547d\u4ee4\u8fd0\u884c\u5355\u5143\u683c\uff0c\u79fb\u52a8\u5355\u5143\u683c\uff0c\u5207\u6362\u5355\u5143\u683c\u7f16\u8f91\u72b6\u6001\u7b49\u7b49\uff0c\u6b64\u65f6\u7f16\u8f91\u6a21\u5f0f\u4e0b\u7684\u5feb\u6377\u952e\u4e0d\u751f\u6548\u3002 \u4ece\u547d\u4ee4\u6a21\u5f0f\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\u9700\u6309 Enter \u952e\uff0c\u4ece\u7f16\u8f91\u6a21\u5f0f\u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f\u9700\u6309 Esc \u952e\u3002 \u4ee5\u4e0b\u4e24\u8868\u5206\u522b\u662f\u5bf9\u547d\u4ee4\u548c\u7f16\u8f91\u4e24\u79cd\u6a21\u5f0f\u4e0b\u5feb\u6377\u952e\u7684\u7b80\u5355\u8bf4\u660e\uff1a","title":"\u5feb\u6377\u952e\u4f7f\u7528\u6307\u5357"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#esc","text":"\u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Enter \u8f6c\u5165\u7f16\u8f91\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e2a\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u5176\u4e0b\u63d2\u5165\u65b0\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Y \u5355\u5143\u8f6c\u5165\u4ee3\u7801\u72b6\u6001 M \u5355\u5143\u8f6c\u5165 markdown \u72b6\u6001 R \u5355\u5143\u8f6c\u5165 raw \u72b6\u6001 1 \u8bbe\u5b9a 1 \u7ea7\u6807\u9898 \u4ec5\u5728 markdown \u72b6\u6001\u4e0b\u65f6\u5efa\u8bae\u4f7f\u7528\u6807\u9898\u76f8\u5173\u5feb\u6377\u952e\uff0c\u5982\u679c\u5355\u5143\u5904\u4e8e\u5176\u4ed6\u72b6\u6001\uff0c\u5219\u4f1a\u5f3a\u5236\u5207\u6362\u5230 markdown \u72b6\u6001 2 \u8bbe\u5b9a 2 \u7ea7\u6807\u9898 3 \u8bbe\u5b9a 3 \u7ea7\u6807\u9898 4 \u8bbe\u5b9a 4 \u7ea7\u6807\u9898 5 \u8bbe\u5b9a 5 \u7ea7\u6807\u9898 6 \u8bbe\u5b9a 6 \u7ea7\u6807\u9898 Up \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 K \u9009\u4e2d\u4e0a\u65b9\u5355\u5143 Down \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 J \u9009\u4e2d\u4e0b\u65b9\u5355\u5143 Shift-K \u8fde\u7eed\u9009\u62e9\u4e0a\u65b9\u5355\u5143 Shift-J \u8fde\u7eed\u9009\u62e9\u4e0b\u65b9\u5355\u5143 A \u5728\u4e0a\u65b9\u63d2\u5165\u65b0\u5355\u5143 B \u5728\u4e0b\u65b9\u63d2\u5165\u65b0\u5355\u5143 X \u526a\u5207\u9009\u4e2d\u7684\u5355\u5143 C \u590d\u5236\u9009\u4e2d\u7684\u5355\u5143 Shift-V \u7c98\u8d34\u5230\u4e0a\u65b9\u5355\u5143 V \u7c98\u8d34\u5230\u4e0b\u65b9\u5355\u5143 Z \u6062\u590d\u5220\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5355\u5143 D,D \u5220\u9664\u9009\u4e2d\u7684\u5355\u5143 \u8fde\u7eed\u6309\u4e24\u4e2a D \u952e Shift-M \u5408\u5e76\u9009\u4e2d\u7684\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook S \u4fdd\u5b58\u5f53\u524d NoteBook L \u5f00\u5173\u884c\u53f7 \u7f16\u8f91\u6846\u7684\u884c\u53f7\u662f\u53ef\u4ee5\u5f00\u542f\u548c\u5173\u95ed\u7684 O \u8f6c\u6362\u8f93\u51fa Shift-O \u8f6c\u6362\u8f93\u51fa\u6eda\u52a8 Esc \u5173\u95ed\u9875\u9762 Q \u5173\u95ed\u9875\u9762 H \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 I,I \u4e2d\u65ad NoteBook \u5185\u6838 0,0 \u91cd\u542f NoteBook \u5185\u6838 Shift \u5ffd\u7565 Shift-Space \u5411\u4e0a\u6eda\u52a8 Space \u5411\u4e0b\u6eda\u52a8","title":"\u547d\u4ee4\u6a21\u5f0f\u5feb\u6377\u952e\uff08\u6309 Esc \u952e\u5f00\u542f\uff09:"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#enter","text":"\u5feb\u6377\u952e \u4f5c\u7528 \u8bf4\u660e Tab \u4ee3\u7801\u8865\u5168\u6216\u7f29\u8fdb Shift-Tab \u63d0\u793a \u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\uff0c\u90e8\u5206\u51fd\u6570\u3001\u7c7b\u3001\u65b9\u6cd5\u7b49\u4f1a\u663e\u793a\u5176\u5b9a\u4e49\u539f\u578b\uff0c\u5982\u679c\u5728\u5176\u540e\u52a0 ? \u518d\u8fd0\u884c\u4f1a\u663e\u793a\u66f4\u52a0\u8be6\u7ec6\u7684\u5e2e\u52a9 Ctrl-] \u7f29\u8fdb \u5411\u53f3\u7f29\u8fdb Ctrl-[ \u89e3\u9664\u7f29\u8fdb \u5411\u5de6\u7f29\u8fdb Ctrl-A \u5168\u9009 Ctrl-Z \u64a4\u9500 Ctrl-Shift-Z \u91cd\u505a Ctrl-Y \u91cd\u505a Ctrl-Home \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-Up \u8df3\u5230\u5355\u5143\u5f00\u5934 Ctrl-End \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Down \u8df3\u5230\u5355\u5143\u672b\u5c3e Ctrl-Left \u8df3\u5230\u5de6\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Right \u8df3\u5230\u53f3\u8fb9\u4e00\u4e2a\u5b57\u9996 Ctrl-Backspace \u5220\u9664\u524d\u9762\u4e00\u4e2a\u5b57 Ctrl-Delete \u5220\u9664\u540e\u9762\u4e00\u4e2a\u5b57 Esc \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Ctrl-M \u5207\u6362\u5230\u547d\u4ee4\u6a21\u5f0f Shift-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u9009\u4e2d\u4e0b\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u547d\u4ee4\u6a21\u5f0f Ctrl-Enter \u8fd0\u884c\u672c\u5355\u5143 Alt-Enter \u8fd0\u884c\u672c\u5355\u5143\uff0c\u5728\u4e0b\u9762\u63d2\u5165\u4e00\u5355\u5143 \u65b0\u5355\u5143\u9ed8\u8ba4\u4e3a\u7f16\u8f91\u6a21\u5f0f Ctrl-Shift-- \u5206\u5272\u5355\u5143 \u6309\u5149\u6807\u6240\u5728\u884c\u8fdb\u884c\u5206\u5272 Ctrl-Shift-Subtract \u5206\u5272\u5355\u5143 Ctrl-S \u4fdd\u5b58\u5f53\u524d NoteBook Shift \u5ffd\u7565 Up \u5149\u6807\u4e0a\u79fb\u6216\u8f6c\u5165\u4e0a\u4e00\u5355\u5143 Down \u5149\u6807\u4e0b\u79fb\u6216\u8f6c\u5165\u4e0b\u4e00\u5355\u5143 Ctrl-/ \u6ce8\u91ca\u6574\u884c/\u64a4\u9500\u6ce8\u91ca \u4ec5\u4ee3\u7801\u72b6\u6001\u6709\u6548 \u6ce8\uff1a \u5982\u679c\u5feb\u6377\u952e\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u5e94\u7528\u5360\u7528\uff0c\u5219\u53ef\u80fd\u4f1a\u5931\u6548","title":"\u7f16\u8f91\u6a21\u5f0f\u5feb\u6377\u952e\uff08 \u6309 Enter \u952e\u542f\u52a8\uff09:"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#notebook","text":"\u5728\u8be5\u76ee\u5f55\u4e0b\uff1ashift + \u53f3\u952e \ud83d\udc49 \u6253\u5f00powershell\uff0c\u8f93\u5165jupter notebook","title":"\u5728\u4efb\u610f\u76ee\u5f55\u4e0b\u6253\u5f00notebook"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_3","text":"\u901a\u8fc7 pip \u5b89\u88c5 jupyterthemes package\uff1a # \u5b89\u88c5 pip install jupyterthemes # \u66f4\u65b0jupyterthemes pip install --upgrade jupyterthemes \u5b89\u88c5\u597d jupyterthemes package\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u8f93\u5165 jupyterthemes \u7684\u547d\u4ee4\uff1a # \u5217\u51fa\u6240\u6709\u5b89\u88c5\u597d\u7684\u4e3b\u9898 jt -l # \u4f7f\u7528\u5e2e\u52a9 jt -h \u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53c2\u89c1\uff1a jupyterthemes\u5b98\u65b9\u8bf4\u660e","title":"\u81ea\u5b9a\u4e49\u4e3b\u9898"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_4","text":"\u5b89\u88c5 jupyter_contrib_nbextensions \u5305\u3002\u8be5\u63d2\u4ef6\u5e76\u4e0d\u662fjupyter notebook\u5b98\u65b9\u7684\u63d2\u4ef6\u3002\u5177\u4f53\u53c2\u8003 Unofficial Jupyter Notebook Extensions \u548c \u4e3aJupyter Notebook\u5b89\u88c5\u6269\u5c55\u5e76\u542f\u7528Configurator \u3002 # \u5b89\u88c5 pip install jupyter_contrib_nbextensions # \u6216\u8005\u901a\u8fc7conda\u5b89\u88c5 conda install -c conda-forge jupyter_contrib_nbextensions # \u6fc0\u6d3b jupyter contrib nbextension install --user # \u542f\u7528 jupyter nbextensions_configurator enable --user","title":"\u5b89\u88c5\u6269\u5c55"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#pdf","text":"jupyter notebook\u672c\u8eab\u4e0d\u80fd\u8f93\u51fapdf\uff0c\u8f93\u51fapdf\u4f9d\u8d56\u4e8e$\\LaTeX$\u5f15\u64ce\u3002\u76ee\u524d\uff0c\u5e26\u6709\u4e2d\u6587\u7684ipynb\u6587\u4ef6\u8f93\u51fa\u4e3apdf\u4f1a\u62a5\u9519\uff0c\u4e3b\u8981\u539f\u56e0\u662fjupyter\u7684$\\LaTeX$\u6a21\u677f\u8bbe\u7f6e\u4e86$\\text{pdf}\\LaTeX$\u5f15\u64ce\uff0c\u4f46\u662fPdf$\\LaTeX$\u4e0d\u53ef\u4ee5\u76f4\u63a5\u7f16\u8bd1\u4e2d\u6587\u6587\u6863\u7684\u3002\u56e0\u6b64\uff0c\u9700\u8981\u628ajupyter\u7684$\\LaTeX$\u5f15\u64ce\u6539\u4e3a$\\text{Xe}\\LaTeX$\u5f15\u64ce\u3002 \u4fee\u6539\u6a21\u677f\uff0c\u6a21\u677f\u4f4d\u7f6e\u4e3a\uff1a...\\site-packages\\nbconvert\\templates\\latex\\article.tplx\uff0c\u5c06latex\u6a21\u677f\u7c7b\u7531article\u6539\u4e3actexart\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [11pt] { article } ((* endblock docclass *)) \u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a ((* block docclass *)) \\documentclass [13pt] { ctexart } ((* endblock docclass *)) \u6216\u8005\uff0c\u4f9d\u7136\u4f7f\u7528PdfLatex\u5f15\u64ce\uff0c\u4f46\u5f15\u5165xeCJK\u5b8f\u5305\uff1a \\documentclass [11pt] { article } \\usepackage { xeCJK } % \u5982\u679c\u8bbe\u7f6emainfont\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5df2\u5b89\u88c5\u7684\u4e2d\u6587\u5b57\u4f53\uff0c\u4f8b\u5982\u5fae\u8f6f\u96c5\u9ed1\u3002 %\\setCJKmainfont{SourceHanSansCN-Light} \u60f3\u8981\u4fee\u6539\u8f93\u51fapdf\u7684\u6392\u7248\uff0c\u5219\u9700\u8981\u4fee\u6539\u5176\u9884\u5b9a\u4e49\u7684latex\u6392\u7248\u6a21\u677f\uff0c\u5373base.tplx\u6587\u4ef6\u3002\u4f8b\u5982\u53ef\u4ee5\u5728base.tplx\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\u63a7\u5236\u8f93\u51fa\u7684pdf\u7684\u9875\u8fb9\u8ddd\u3002 \\geometry { a4paper,left=2cm,right=2cm,top=1cm,bottom=1cm } \u4f46\u662f\uff0c\u53ef\u80fd\u6539\u4e86jupyter\u7684latex\u6a21\u677f\uff0cjupyter notebook\u8f93\u51fapdf\u4f9d\u7136\u62a5\u9519\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u62a5\u9519\u4fe1\u606f\uff1a nbconvert failed: PDF creating failed, captured latex output: This is XeTeX, Version 3.14159265-2.6-0.99999 (TeX Live 2018/W32TeX) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode ! Undefined control sequence. <*> .\\notebook .tex ? ! Emergency stop. <*> .\\notebook .tex No pages of output. Transcript written on ?. \u8fd9\u662fjupyter\u4e2d\u63a7\u5236\u8c03\u7528latex\u5f15\u64ce\u7684\u811a\u672cpdf.py\u6709bug\uff0c\u4f4d\u4e8e66\u884c\u3002 \u539f\u6765\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '.' }) \u6b63\u786e\u7684\u4ee3\u7801\uff1a writer = Instance ( \"nbconvert.writers.FilesWriter\" , args = (), kw = { 'build_directory' : '' }) \u539f\u6765\u7684\u4ee3\u7801\u7ed9xelatex\u5f15\u64ce\u53d1\u9001\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u8def\u5f84\uff1a \u9519\u8bef\u7684\u8def\u5f84\uff1a xelatex .\\notebook.tex \u6b63\u786e\u7684\u8def\u5f84\uff1a xelatex notebook.tex \u8be6\u7ec6\u5185\u5bb9\u53c2\u8003\u8fd9\u91cc Problem in Converting Jupyter notebook to pdf #144 \u3002","title":"\u8f93\u51fa\u5e26\u6709\u4e2d\u6587\u7684pdf"},{"location":"%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/5.5.jupyter%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html#_5","text":"Save and CheckPoint \u548c Revert to CheckPoint\u3002","title":"\u7248\u672c\u63a7\u5236"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.1.string.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Template \u5728 string.Template \u4e2d\uff0c\u901a\u8fc7\u524d\u7f6e $ \u6765\u8bc6\u522b\u53d8\u91cf\uff08\u4f8b\u5982\uff0c $var \uff09\u3002\u53e6\u5916\uff0c \u5982\u679c\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u62ec\u53f7\u5c06\u5b83\u4eec\u4ece\u5468\u56f4\u7684\u6587\u672c\u4e2d\u5206\u5f00\uff08\u4f8b\u5982\uff0c ${var} \uff09\u3002 \u901a\u8fc7\u4f8b\u5b50\u6765\u5bf9\u6bd4\u4e0b\uff1a values = { 'var' : 'foo' } t = string . Template ( \"\"\" Variable : $var Escape : $$ Variable in text: $ {var} iable \"\"\" ) print ( 'TEMPLATE:' , t . substitute ( values )) s = \"\"\" Variable : %(var)s Escape : %% Variable in text: %(var)s iable \"\"\" print ( 'INTERPOLATION:' , s % values ) s = \"\"\" Variable : {var} Escape : {{}} Variable in text: {var} iable \"\"\" print ( 'FORMAT:' , s . format ( ** values )) TEMPLATE : Variable : foo Escape : $ Variable in text : fooiable INTERPOLATION : Variable : foo Escape : % Variable in text : fooiable FORMAT : Variable : foo Escape : {} Variable in text : fooiable \u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u89e6\u53d1\u5b57\u7b26\uff08 $ \u548c % \uff09\u9700\u8981\u91cd\u590d\u4e24\u6b21\u6765\u8f6c\u4e49\u3002\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u683c\u5f0f\u5316\u8bed\u6cd5\uff0c { \u548c } \u90fd\u9700\u8981\u91cd\u590d\u624d\u80fd\u8f6c\u4e49\u3002 Template \u6ca1\u6709\u53ef\u7528\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u4f8b\u5982\uff0c\u65e0\u6cd5\u63a7\u5236\u7528\u6765\u8868\u793a\u6d6e\u70b9\u6570\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4f7f\u7528 safe_substitute() \u65b9\u6cd5\u53ef\u4ee5\u5e26\u6765\u4e00\u4e2a\u597d\u5904\uff0c\u90a3\u5c31\u662f\u5982\u679c\u6a21\u677f\u9700\u8981\u7684\u503c\u6ca1\u6709\u5168\u90e8\u4f5c\u4e3a\u53c2\u6570\u63d0\u4f9b\u7ed9\u6a21\u677f\u7684\u8bdd\u53ef\u4ee5\u907f\u514d\u53d1\u751f\u5f02\u5e38\u3002 values = { 'var' : 'foo' } t = string . Template ( \"$var is here but $missing is not provided\" ) try : print ( 'substitute() :' , t . substitute ( values )) except KeyError as err : print ( 'ERROR:' , str ( err )) print ( 'safe_substitute():' , t . safe_substitute ( values )) ERROR: 'missing' safe_substitute(): foo is here but $missing is not provided \u56e0\u4e3a\u5728 values \u5b57\u5178\u4e2d\u6ca1\u6709\u503c\u63d0\u4f9b\u7ed9 missing , \u6240\u4ee5 substitute() \u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u5f02\u5e38\u3002\u800c safe_substitute() \u5c06\u6355\u6349\u8fd9\u4e2a\u5f02\u5e38\u5e76\u5c06\u53d8\u91cf\u8868\u8fbe\u5f0f\u5355\u72ec\u7559\u5728\u6587\u672c\u4e2d\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\u3002 string.Template \u7f3a\u7701\u8bed\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6765\u8c03\u6574\uff0c\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4e00\u822c\u662f\u7528\u6765\u5bfb\u627e\u6a21\u677f\u5185\u5bb9\u5185\u53d8\u91cf\u540d\u5b57\u7684\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u6539\u53d8 delimiter \u548c idpattern \u7684\u7c7b\u5c5e\u6027\u6765\u505a\u8c03\u6574\u3002 class MyTemplate ( string . Template ): delimiter = '%' idpattern = '[a-z]+_[a-z]+' template_text = ''' Delimiter : %% Replaced : %with_underscore Ignored : %notunderscored ''' d = { 'with_underscore' : 'replaced' , 'notunderscored' : 'not replaced' , } t = MyTemplate ( template_text ) print ( 'Modified ID pattern:' ) print ( t . safe_substitute ( d )) Modified ID pattern : Delimiter : % Replaced : replaced Ignored : % notunderscored \u5728\u8fd9\u4e2a\u793a\u4f8b\u91cc\uff0c\u66ff\u6362\u89c4\u5219\u8fdb\u884c\u4e86\u53d8\u66f4\uff0c\u5206\u9694\u7b26\u7528 % \u6765\u66ff\u4ee3\u4e86 $ \u5e76\u4e14\u53d8\u91cf\u540d\u5b57\u4e2d\u5fc5\u987b\u5305\u542b\u4e0b\u5212\u7ebf\u3002 %notunderscored \u6a21\u5f0f\u5e76\u6ca1\u6709\u88ab\u66ff\u6362\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5305\u62ec\u4e0b\u5212\u7ebf\u5b57\u7b26\u3002 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6539\u53d8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 pattern \u5c5e\u6027\u548c\u5b9a\u4e49\u4e00\u4e2a\u5168\u65b0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u3002\u8986\u5199\u7684\u6a21\u5f0f\u5fc5\u987b\u63d0\u4f9b\u56db\u4e2a\u547d\u540d\u7ec4\u6765\u83b7\u53d6\u672a\u8bc6\u522b\u7684\u5206\u9694\u7b26\u3001\u547d\u540d\u7684\u53d8\u91cf\u3001\u5927\u62ec\u53f7\u6a21\u5f0f\u7684\u53d8\u91cf\u540d\u79f0\u3001\u548c\u65e0\u6548\u7684\u5206\u9694\u7b26\u6a21\u5f0f\u3002 t.pattern \u7684\u503c\u662f\u7f16\u8bd1\u597d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684 pattern \u5c5e\u6027\u6765\u83b7\u53d6 t = string . Template ( '$var' ) print ( t . pattern . pattern ) \\$(?: (?P<escaped>\\$) | # Escape sequence of two delimiters (?P<named>(?a:[_a-z][_a-z0-9]*)) | # delimiter and a Python identifier {(?P<braced>(?a:[_a-z][_a-z0-9]*))} | # delimiter and a braced identifier (?P<invalid>) # Other ill-formed delimiter exprs ) \u4e0b\u9762\u7684\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6a21\u5f0f\u6765\u751f\u6210\u4e00\u79cd\u65b0\u7684\u6a21\u677f\uff0c\u4f7f\u7528 {{var}} \u4f5c\u4e3a\u53d8\u91cf\u8bed\u6cd5\u3002 import re import string class MyTemplate ( string . Template ): delimiter = '{{' pattern = r ''' \\{\\{(?: (?P<escaped>\\{\\{)| (?P<named>[_a-z][_a-z0-9]*)\\}\\}| (?P<braced>[_a-z][_a-z0-9]*)\\}\\}| (?P<invalid>) ) ''' t = MyTemplate ( ''' {{{{ {{var}} ''' ) print ( 'MATCHES:' , t . pattern . findall ( t . template )) print ( 'SUBSTITUTED:' , t . safe_substitute ( var = 'replacement' )) MATCHES: [('{{', '', '', ''), ('', 'var', '', '')] SUBSTITUTED: {{ replacement named \u548c braced \u4e24\u4e2a\u6a21\u5f0f\u90fd\u5fc5\u987b\u5355\u72ec\u63d0\u4f9b\uff0c\u867d\u7136\u5b83\u4eec\u90fd\u662f\u4e00\u6837\u7684\u3002 Formatter Formatter \u7c7b\u7684\u6267\u884c\u6548\u679c\u4e0e str \u7684 format() \u65b9\u6cd5\u4e00\u81f4\uff0c\u5b83\u7684\u7279\u5f81\u5305\u62ec\u578b\u6001\u8f6c\u6362\uff0c\u6392\u5217\uff0c\u5c5e\u6027\u4ee5\u53ca\u5b57\u6bb5\u5f15\u7528\uff0c\u5df2\u547d\u540d\u7279\u5b9a\u4f4d\u7f6e\u7684\u6a21\u677f\u53c2\u6570\uff0c \u4ee5\u53ca\u7279\u5b9a\u7c7b\u578b\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u901a\u5e38 format() \u65b9\u6cd5\u5bf9\u4e8e\u8fd9\u4e9b\u7279\u5f81\u662f\u6700\u4fbf\u6377\u7684\u63a5\u53e3\uff0c\u4f46 Formatter \u63d0\u4f9b\u4e86\u5efa\u7acb\u5b50\u7c7b\u7684\u65b9\u6cd5\uff0c\u5728\u9700\u8981\u591a\u6001\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002 \u5e38\u91cf string \u6a21\u5757\u5305\u542b\u4e86\u4e0e ASCII \u3001\u6570\u5b57\u5b57\u7b26\u76f8\u5173\u7684\u4e00\u7cfb\u5217\u5e38\u91cf\u3002\u8fd9\u4e9b\u5e38\u91cf\u5728\u5904\u7406 ASCII \u6570\u636e\u65f6\u662f\u975e\u5e38\u6709\u6548\u7684\uff0c\u4f46\u662f\u73b0\u5728\u5927\u5bb6\u4f1a\u8d8a\u6765\u8d8a\u591a\u7684\u9047\u5230 Unicode \u7c7b\u578b\u7684\u975e ASCII \u6587\u672c\uff0c\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u7684\u8fd9\u4e9b\u5e38\u91cf\u7684\u4f5c\u7528\u5c31\u5f88\u6709\u9650\u4e86\u3002 import inspect import string def is_str ( value ): return isinstance ( value , str ) for name , value in inspect . getmembers ( string , is_str ): if name . startswith ( '_' ): continue print ( ' %s = %r \\n ' % ( name , value )) ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz' ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' digits = '0123456789' hexdigits = '0123456789abcdefABCDEF' octdigits = '01234567' printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\' () *+ , - . / :; <=>?@ [ \\\\ ] ^ _ ` { | } ~ \\ t \\ n \\ r \\ x0b \\ x0c ' punctuation=' ! \" # $ %& \\ '()*+,-./:;<=>?@[\\\\]^_`{|}~' whitespace = ' \\t\\n\\r\\x0b\\x0c'","title":"8.1.string"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.1.string.html#template","text":"\u5728 string.Template \u4e2d\uff0c\u901a\u8fc7\u524d\u7f6e $ \u6765\u8bc6\u522b\u53d8\u91cf\uff08\u4f8b\u5982\uff0c $var \uff09\u3002\u53e6\u5916\uff0c \u5982\u679c\u6709\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u62ec\u53f7\u5c06\u5b83\u4eec\u4ece\u5468\u56f4\u7684\u6587\u672c\u4e2d\u5206\u5f00\uff08\u4f8b\u5982\uff0c ${var} \uff09\u3002 \u901a\u8fc7\u4f8b\u5b50\u6765\u5bf9\u6bd4\u4e0b\uff1a values = { 'var' : 'foo' } t = string . Template ( \"\"\" Variable : $var Escape : $$ Variable in text: $ {var} iable \"\"\" ) print ( 'TEMPLATE:' , t . substitute ( values )) s = \"\"\" Variable : %(var)s Escape : %% Variable in text: %(var)s iable \"\"\" print ( 'INTERPOLATION:' , s % values ) s = \"\"\" Variable : {var} Escape : {{}} Variable in text: {var} iable \"\"\" print ( 'FORMAT:' , s . format ( ** values )) TEMPLATE : Variable : foo Escape : $ Variable in text : fooiable INTERPOLATION : Variable : foo Escape : % Variable in text : fooiable FORMAT : Variable : foo Escape : {} Variable in text : fooiable \u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u89e6\u53d1\u5b57\u7b26\uff08 $ \u548c % \uff09\u9700\u8981\u91cd\u590d\u4e24\u6b21\u6765\u8f6c\u4e49\u3002\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u683c\u5f0f\u5316\u8bed\u6cd5\uff0c { \u548c } \u90fd\u9700\u8981\u91cd\u590d\u624d\u80fd\u8f6c\u4e49\u3002 Template \u6ca1\u6709\u53ef\u7528\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u4f8b\u5982\uff0c\u65e0\u6cd5\u63a7\u5236\u7528\u6765\u8868\u793a\u6d6e\u70b9\u6570\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4f7f\u7528 safe_substitute() \u65b9\u6cd5\u53ef\u4ee5\u5e26\u6765\u4e00\u4e2a\u597d\u5904\uff0c\u90a3\u5c31\u662f\u5982\u679c\u6a21\u677f\u9700\u8981\u7684\u503c\u6ca1\u6709\u5168\u90e8\u4f5c\u4e3a\u53c2\u6570\u63d0\u4f9b\u7ed9\u6a21\u677f\u7684\u8bdd\u53ef\u4ee5\u907f\u514d\u53d1\u751f\u5f02\u5e38\u3002 values = { 'var' : 'foo' } t = string . Template ( \"$var is here but $missing is not provided\" ) try : print ( 'substitute() :' , t . substitute ( values )) except KeyError as err : print ( 'ERROR:' , str ( err )) print ( 'safe_substitute():' , t . safe_substitute ( values )) ERROR: 'missing' safe_substitute(): foo is here but $missing is not provided \u56e0\u4e3a\u5728 values \u5b57\u5178\u4e2d\u6ca1\u6709\u503c\u63d0\u4f9b\u7ed9 missing , \u6240\u4ee5 substitute() \u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u5f02\u5e38\u3002\u800c safe_substitute() \u5c06\u6355\u6349\u8fd9\u4e2a\u5f02\u5e38\u5e76\u5c06\u53d8\u91cf\u8868\u8fbe\u5f0f\u5355\u72ec\u7559\u5728\u6587\u672c\u4e2d\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\u3002 string.Template \u7f3a\u7701\u8bed\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6765\u8c03\u6574\uff0c\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4e00\u822c\u662f\u7528\u6765\u5bfb\u627e\u6a21\u677f\u5185\u5bb9\u5185\u53d8\u91cf\u540d\u5b57\u7684\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u6539\u53d8 delimiter \u548c idpattern \u7684\u7c7b\u5c5e\u6027\u6765\u505a\u8c03\u6574\u3002 class MyTemplate ( string . Template ): delimiter = '%' idpattern = '[a-z]+_[a-z]+' template_text = ''' Delimiter : %% Replaced : %with_underscore Ignored : %notunderscored ''' d = { 'with_underscore' : 'replaced' , 'notunderscored' : 'not replaced' , } t = MyTemplate ( template_text ) print ( 'Modified ID pattern:' ) print ( t . safe_substitute ( d )) Modified ID pattern : Delimiter : % Replaced : replaced Ignored : % notunderscored \u5728\u8fd9\u4e2a\u793a\u4f8b\u91cc\uff0c\u66ff\u6362\u89c4\u5219\u8fdb\u884c\u4e86\u53d8\u66f4\uff0c\u5206\u9694\u7b26\u7528 % \u6765\u66ff\u4ee3\u4e86 $ \u5e76\u4e14\u53d8\u91cf\u540d\u5b57\u4e2d\u5fc5\u987b\u5305\u542b\u4e0b\u5212\u7ebf\u3002 %notunderscored \u6a21\u5f0f\u5e76\u6ca1\u6709\u88ab\u66ff\u6362\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5305\u62ec\u4e0b\u5212\u7ebf\u5b57\u7b26\u3002 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6539\u53d8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 pattern \u5c5e\u6027\u548c\u5b9a\u4e49\u4e00\u4e2a\u5168\u65b0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u3002\u8986\u5199\u7684\u6a21\u5f0f\u5fc5\u987b\u63d0\u4f9b\u56db\u4e2a\u547d\u540d\u7ec4\u6765\u83b7\u53d6\u672a\u8bc6\u522b\u7684\u5206\u9694\u7b26\u3001\u547d\u540d\u7684\u53d8\u91cf\u3001\u5927\u62ec\u53f7\u6a21\u5f0f\u7684\u53d8\u91cf\u540d\u79f0\u3001\u548c\u65e0\u6548\u7684\u5206\u9694\u7b26\u6a21\u5f0f\u3002 t.pattern \u7684\u503c\u662f\u7f16\u8bd1\u597d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684 pattern \u5c5e\u6027\u6765\u83b7\u53d6 t = string . Template ( '$var' ) print ( t . pattern . pattern ) \\$(?: (?P<escaped>\\$) | # Escape sequence of two delimiters (?P<named>(?a:[_a-z][_a-z0-9]*)) | # delimiter and a Python identifier {(?P<braced>(?a:[_a-z][_a-z0-9]*))} | # delimiter and a braced identifier (?P<invalid>) # Other ill-formed delimiter exprs ) \u4e0b\u9762\u7684\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6a21\u5f0f\u6765\u751f\u6210\u4e00\u79cd\u65b0\u7684\u6a21\u677f\uff0c\u4f7f\u7528 {{var}} \u4f5c\u4e3a\u53d8\u91cf\u8bed\u6cd5\u3002 import re import string class MyTemplate ( string . Template ): delimiter = '{{' pattern = r ''' \\{\\{(?: (?P<escaped>\\{\\{)| (?P<named>[_a-z][_a-z0-9]*)\\}\\}| (?P<braced>[_a-z][_a-z0-9]*)\\}\\}| (?P<invalid>) ) ''' t = MyTemplate ( ''' {{{{ {{var}} ''' ) print ( 'MATCHES:' , t . pattern . findall ( t . template )) print ( 'SUBSTITUTED:' , t . safe_substitute ( var = 'replacement' )) MATCHES: [('{{', '', '', ''), ('', 'var', '', '')] SUBSTITUTED: {{ replacement named \u548c braced \u4e24\u4e2a\u6a21\u5f0f\u90fd\u5fc5\u987b\u5355\u72ec\u63d0\u4f9b\uff0c\u867d\u7136\u5b83\u4eec\u90fd\u662f\u4e00\u6837\u7684\u3002","title":"Template"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.1.string.html#formatter","text":"Formatter \u7c7b\u7684\u6267\u884c\u6548\u679c\u4e0e str \u7684 format() \u65b9\u6cd5\u4e00\u81f4\uff0c\u5b83\u7684\u7279\u5f81\u5305\u62ec\u578b\u6001\u8f6c\u6362\uff0c\u6392\u5217\uff0c\u5c5e\u6027\u4ee5\u53ca\u5b57\u6bb5\u5f15\u7528\uff0c\u5df2\u547d\u540d\u7279\u5b9a\u4f4d\u7f6e\u7684\u6a21\u677f\u53c2\u6570\uff0c \u4ee5\u53ca\u7279\u5b9a\u7c7b\u578b\u7684\u683c\u5f0f\u5316\u9009\u9879\u3002\u901a\u5e38 format() \u65b9\u6cd5\u5bf9\u4e8e\u8fd9\u4e9b\u7279\u5f81\u662f\u6700\u4fbf\u6377\u7684\u63a5\u53e3\uff0c\u4f46 Formatter \u63d0\u4f9b\u4e86\u5efa\u7acb\u5b50\u7c7b\u7684\u65b9\u6cd5\uff0c\u5728\u9700\u8981\u591a\u6001\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002","title":"Formatter"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.1.string.html#_1","text":"string \u6a21\u5757\u5305\u542b\u4e86\u4e0e ASCII \u3001\u6570\u5b57\u5b57\u7b26\u76f8\u5173\u7684\u4e00\u7cfb\u5217\u5e38\u91cf\u3002\u8fd9\u4e9b\u5e38\u91cf\u5728\u5904\u7406 ASCII \u6570\u636e\u65f6\u662f\u975e\u5e38\u6709\u6548\u7684\uff0c\u4f46\u662f\u73b0\u5728\u5927\u5bb6\u4f1a\u8d8a\u6765\u8d8a\u591a\u7684\u9047\u5230 Unicode \u7c7b\u578b\u7684\u975e ASCII \u6587\u672c\uff0c\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u7684\u8fd9\u4e9b\u5e38\u91cf\u7684\u4f5c\u7528\u5c31\u5f88\u6709\u9650\u4e86\u3002 import inspect import string def is_str ( value ): return isinstance ( value , str ) for name , value in inspect . getmembers ( string , is_str ): if name . startswith ( '_' ): continue print ( ' %s = %r \\n ' % ( name , value )) ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz' ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' digits = '0123456789' hexdigits = '0123456789abcdefABCDEF' octdigits = '01234567' printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\' () *+ , - . / :; <=>?@ [ \\\\ ] ^ _ ` { | } ~ \\ t \\ n \\ r \\ x0b \\ x0c ' punctuation=' ! \" # $ %& \\ '()*+,-./:;<=>?@[\\\\]^_`{|}~' whitespace = ' \\t\\n\\r\\x0b\\x0c'","title":"\u5e38\u91cf"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.10.os_path.html","text":"import os from Toolkit import H Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.27 os\u6807\u51c6\u6a21\u5757\u53ea\u6709\u4e00\u4e2a\u5b50\u6a21\u5757\u2014\u2014os.path\u6a21\u5757\u3002os.path \u6a21\u5757\u63d0\u4f9b\u4e86\u8de8\u5e73\u53f0\u5904\u7406\u6587\u4ef6\u8def\u5f84\u7684\u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0c\u5728windows\u7cfb\u7edf\u4e0a\uff0cos.path\u6a21\u5757\u662fntpath\u6a21\u5757\u3002\u8fd9\u4e9b\u5904\u7406\u8def\u5f84\u7684\u51fd\u6570\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u771f\u5b9e\u5b58\u5728\u7684\u8def\u5f84\uff0c\u672c\u8d28\u4e0a\u5b83\u4eec\u53ea\u662f\u64cd\u4f5c\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 os.path\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e9b\u53d8\u91cf\uff0cos.path\u5bf9\u8def\u5f84\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u53d8\u91cf\u3002 explanation code output \u8def\u5f84\u5404\u90e8\u5206\u7684\u5206\u9694\u7b26 os.path.sep \\ \u8def\u5f84\u5404\u90e8\u5206\u7684\u53ef\u9009\u5206\u9694\u7b26 os.path.altsep / \u7cfb\u7edf\u53d8\u91cf\u4e2dPATH\u53d8\u91cf\u7684\u5206\u9694\u7b26 os.path.pathsep ; \u6587\u4ef6\u540d\u548c\u6269\u5c55\u540d\u4e4b\u95f4\u7684\u5206\u9694\u7b26 os.path.extsep . \u8868\u793a\u5f53\u524d\u76ee\u5f55\u7684\u8def\u5f84\u7ec4\u4ef6 os.path.curdir . \u8868\u793a\u4e0a\u7ea7\u76ee\u5f55\u7684\u8def\u5f84\u7ec4\u4ef6 os.path.pardir .. \u7cfb\u7edf\u9ed8\u8ba4\u641c\u7d22\u8def\u5f84 os.path.defpath .;C:\\bin NULL\u8bbe\u5907\u8def\u5f84 os.path.devnull nul \u662f\u5426\u652f\u6301\u4efb\u610fUnicode\u5b57\u7b26\u7528\u4f5c\u6587\u4ef6\u540d os.path.supports_unicode_filenames TRUE \u62c6\u5206\u8def\u5f84 .basename() \u8fd4\u56de\u8def\u5f84\u7684\u6700\u540e\u4e00\u5c42 os . path . basename ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # r\"C:\\one\\two\\three\".rsplit(\"\\\\\", maxsplit=1)[1] 'three' \u5982\u679c\u8def\u5f84\u662f\u4ee5\u76ee\u5f55\u5206\u9694\u7b26 os.sep \u7ed3\u5c3e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u7684\u57fa\u7840\u90e8\u5206\u5c06\u88ab\u8ba4\u4e3a\u662f\u7a7a\u7684: os . path . basename ( r \"C:/one/two/three/\" ) '' .dirname() \u8fd4\u56de\u8def\u5f84\u7684\u7b2c\u4e00\u5c42\u5230\u5012\u6570\u7b2c\u4e8c\u5c42\uff1a os . path . dirname ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # \"C:/one/two/three/\".rsplit(\"/\", maxsplit=1)[0] 'C:\\\\one\\\\two' \u5c06 basename() \u548c dirname() \u7684\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\uff0c\u5c31\u4f1a\u5f97\u5230\u539f\u59cb\u7684\u8def\u5f84\u3002 \u4f7f\u7528 .split \u53ef\u4ee5\u540c\u65f6\u5f97\u5230 basename() \u548c dirname() \u7684\u7ed3\u679c\uff1a print ( os . path . split ( p = r \"C:\\one\\two\\three\" )) print ( os . path . split ( p = r \"C:\\one\\two\\three.txt\" )) ('C:\\\\one\\\\two', 'three') ('C:\\\\one\\\\two', 'three.txt') .splitext() \u6839\u636e os.extsep \u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32\uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt\" )) # \u7b49\u4ef7\u4e8e print ( r \"C:/one/two/three.txt\" . rsplit ( \".\" , maxsplit = 1 )) ('C:/one/two/three', '.txt') ['C:/one/two/three', 'txt'] \u67e5\u627e\u6587\u4ef6\u6269\u5c55\u540d\u7684\u65f6\uff0c\u53ea\u4f7f\u7528\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684 os.extsep \uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt.md\" )) ('C:/one/two/three.txt', '.md') .splitdrive() \u5c06\u8def\u5f84\u7684\u76d8\u7b26\u548c\u5176\u4f59\u90e8\u5206\u5206\u5f00\uff1a print ( os . path . splitdrive ( p = r \"C:/one/two/three.txt\" )) print ( os . path . splitdrive ( p = r \"/one/two/three.txt\" )) ('C:', '/one/two/three.txt') ('', '/one/two/three.txt') \u6784\u5efa\u8def\u5f84 os.path.join \u53ef\u4ee5\u5c06\u591a\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u4e3a\u4e00\u4e2a\u8def\u5f84\u3002\u5982\u679c\u67d0\u4e2a\u53c2\u6570\u662f\u4ee5 os.sep \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u90fd\u5c06\u88ab\u4e22\u5f03\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u5c06\u4ee5\u5b83\u4f5c\u4e3a\u65b0\u7684\u5f00\u59cb\u3002 PATHS = [ ( 'one' , 'two' , 'three' ), ( '/' , 'one' , 'two' , 'three' ), ( '/one' , '/two' , '/three' ), ] for parts in PATHS : print ( ' {0:<30} : {1!r} ' . format ( str ( parts ), os . path . join ( * parts ))) ('one', 'two', 'three') : 'one\\\\two\\\\three' ('/', 'one', 'two', 'three') : '/one\\\\two\\\\three' ('/one', '/two', '/three') : '/three' .expanduser() \u5c06\u4f1a\u8f6c\u5316\u6ce2\u6d6a\u53f7~\u4e3a\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u540d\u79f0\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u7528\u6237\u7684\u4e3b\u76ee\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c06\u88ab\u539f\u6837\u8fd4\u56de\u3002 for user in [ '' , 'dhellmann' , 'nosuchuser' ]: lookup = '~' + user print ( ' {!r:>15} : {!r} ' . format ( lookup , os . path . expanduser ( lookup ))) '~' : 'C:\\\\Users\\\\Android' '~dhellmann' : 'C:\\\\Users\\\\dhellmann' '~nosuchuser' : 'C:\\\\Users\\\\nosuchuser' .expandvars() \u66f4\u4e00\u822c\u5316\uff0c\u5b83\u5c06\u4f1a\u89e3\u6790\u8def\u5f84\u4e2d\u6240\u6709 shell \u73af\u5883\u53d8\u91cf\u3002 os . environ [ 'MYVAR' ] = 'VALUE' os . path . expandvars ( '/path/to/$MYVAR' ) '/path/to/VALUE' \u89c4\u8303\u8def\u5f84 \u4f7f\u7528 .join() \u6216\u8005\u5d4c\u5165\u53d8\u91cf\u7684\u72ec\u7acb\u5b57\u7b26\u4e32\u7ec4\u5408\u7684\u8def\u5f84\u7ed3\u5c3e\u53ef\u80fd\u6709\u989d\u5916\u7684\u8def\u5f84\u5206\u9694\u7b26\u6216\u8005\u76f8\u5bf9\u8def\u5f84\u7ec4\u4ef6\u3002\u4f7f\u7528 .normpath() \u6765\u6e05\u7406\u4ed6\u4eec\uff1a PATHS = [ 'one//two//three' , 'one/./two/./three' , 'one/../alt/two/three' , ] for path in PATHS : print ( ' {!r:>22} : {!r} ' . format ( path , os . path . normpath ( path ))) 'one//two//three' : 'one\\\\two\\\\three' 'one/./two/./three' : 'one\\\\two\\\\three' 'one/../alt/two/three' : 'alt\\\\two\\\\three' \u7531 os.curdir \u548c os.pardir \u7ec4\u6210\u7684\u8def\u5f84\u7247\u6bb5\u5c06\u88ab\u89e3\u6790\u5e76\u5c55\u5f00\u3002 \u4f7f\u7528 abspath() \u53ef\u4ee5\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u5316\u4e3a\u7edd\u5bf9\u8def\u5f84\u3002\u5b9e\u9645\u4e0a\uff0c\u5c31\u662f\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u62fc\u63a5\u5230\u76f8\u5bf9\u8def\u5f84\u4e4b\u524d\u3002 absolute path = os.getcwd() + relative path \u516c\u5171\u8def\u5f84 .commonprefix() \u51fd\u6570\u4f1a\u63a5\u53d7\u4e00\u4e2a\u8def\u5f84\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u800c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u6240\u6709\u8def\u5f84\u4e2d\u7684\u516c\u5171\u524d\u7f00\u3002 #` \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u80fd\u8868\u793a\u4e00\u4e2a\u5b9e\u9645\u4e0d\u5b58\u5728\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u8def\u5f84\u5206\u9694\u7b26\u5e76\u6ca1\u6709\u88ab\u8003\u8651\u5728\u5185\uff0c #` \u6240\u4ee5\u8fd9\u4e2a\u516c\u5171\u524d\u7f00\u53ef\u80fd\u5e76\u6ca1\u6709\u843d\u5728\u5206\u9694\u7b26\u8fb9\u754c\u4e0a\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonprefix ( paths )) PATH : / one / two / three / four PATH : / one / two / threefold PATH : / one / two / three / PREFIX : / one / two / three .commonpath() \u5145\u5206\u8003\u8651\u8def\u5f84\u5206\u9694\u7b26\uff0c\u4f1a\u8fd4\u56de\u8def\u5f84\u5e8f\u5217\u4e2d\u5404\u4e2a\u90e8\u5206\u7684\u6700\u957f\u516c\u5171\u6709\u6548\u5b50\u8def\u5f84\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonpath ( paths )) PATH : / one / two / three / four PATH : / one / two / threefold PATH : / one / two / three / PREFIX : \\ one \\ two \u68c0\u67e5\u8def\u5f84 .islink(path) : Test whether a path is a symbolic link. This will always return false for Windows prior to 6.0. .ismount(path) : Test whether a path is a mount point (a drive root, the root of a share, or a mounted volume) FILENAMES = [ __file__ , os . path . dirname ( __file__ ), '/' , './broken_link' , ] for file in FILENAMES : print ( 'File : {!r} ' . format ( file )) print ( 'Absolute :' , os . path . isabs ( file )) print ( 'Is File? :' , os . path . isfile ( file )) print ( 'Is Dir? :' , os . path . isdir ( file )) print ( 'Is Link? :' , os . path . islink ( file )) print ( 'Mountpoint? :' , os . path . ismount ( file )) print ( 'Exists? :' , os . path . exists ( file )) print ( 'Link Exists?:' , os . path . lexists ( file )) print () File : os . getcwd () + '8.10.\u6807\u51c6\u5e93_os_path.py' Absolute : True Is File ? : True Is Dir ? : False Is Link ? : False Mountpoint ? : False Exists ? : True Link Exists ?: True File : os . getcwd () Absolute : True Is File ? : False Is Dir ? : True Is Link ? : False Mountpoint ? : False Exists ? : True Link Exists ?: True File : '/' Absolute : True Is File ? : False Is Dir ? : True Is Link ? : False Mountpoint ? : True Exists ? : True Link Exists ?: True File : './broken_link' Absolute : False Is File ? : False Is Dir ? : False Is Link ? : False Mountpoint ? : False Exists ? : False Link Exists ?: False","title":"8.10.os.path"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.10.os_path.html#_1","text":".basename() \u8fd4\u56de\u8def\u5f84\u7684\u6700\u540e\u4e00\u5c42 os . path . basename ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # r\"C:\\one\\two\\three\".rsplit(\"\\\\\", maxsplit=1)[1] 'three' \u5982\u679c\u8def\u5f84\u662f\u4ee5\u76ee\u5f55\u5206\u9694\u7b26 os.sep \u7ed3\u5c3e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u7684\u57fa\u7840\u90e8\u5206\u5c06\u88ab\u8ba4\u4e3a\u662f\u7a7a\u7684: os . path . basename ( r \"C:/one/two/three/\" ) '' .dirname() \u8fd4\u56de\u8def\u5f84\u7684\u7b2c\u4e00\u5c42\u5230\u5012\u6570\u7b2c\u4e8c\u5c42\uff1a os . path . dirname ( r \"C:\\one\\two\\three\" ) # \u7b49\u4ef7\u4e8e # \"C:/one/two/three/\".rsplit(\"/\", maxsplit=1)[0] 'C:\\\\one\\\\two' \u5c06 basename() \u548c dirname() \u7684\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\uff0c\u5c31\u4f1a\u5f97\u5230\u539f\u59cb\u7684\u8def\u5f84\u3002 \u4f7f\u7528 .split \u53ef\u4ee5\u540c\u65f6\u5f97\u5230 basename() \u548c dirname() \u7684\u7ed3\u679c\uff1a print ( os . path . split ( p = r \"C:\\one\\two\\three\" )) print ( os . path . split ( p = r \"C:\\one\\two\\three.txt\" )) ('C:\\\\one\\\\two', 'three') ('C:\\\\one\\\\two', 'three.txt') .splitext() \u6839\u636e os.extsep \u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32\uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt\" )) # \u7b49\u4ef7\u4e8e print ( r \"C:/one/two/three.txt\" . rsplit ( \".\" , maxsplit = 1 )) ('C:/one/two/three', '.txt') ['C:/one/two/three', 'txt'] \u67e5\u627e\u6587\u4ef6\u6269\u5c55\u540d\u7684\u65f6\uff0c\u53ea\u4f7f\u7528\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684 os.extsep \uff1a print ( os . path . splitext ( p = r \"C:/one/two/three.txt.md\" )) ('C:/one/two/three.txt', '.md') .splitdrive() \u5c06\u8def\u5f84\u7684\u76d8\u7b26\u548c\u5176\u4f59\u90e8\u5206\u5206\u5f00\uff1a print ( os . path . splitdrive ( p = r \"C:/one/two/three.txt\" )) print ( os . path . splitdrive ( p = r \"/one/two/three.txt\" )) ('C:', '/one/two/three.txt') ('', '/one/two/three.txt')","title":"\u62c6\u5206\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.10.os_path.html#_2","text":"os.path.join \u53ef\u4ee5\u5c06\u591a\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u4e3a\u4e00\u4e2a\u8def\u5f84\u3002\u5982\u679c\u67d0\u4e2a\u53c2\u6570\u662f\u4ee5 os.sep \u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u90fd\u5c06\u88ab\u4e22\u5f03\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u5c06\u4ee5\u5b83\u4f5c\u4e3a\u65b0\u7684\u5f00\u59cb\u3002 PATHS = [ ( 'one' , 'two' , 'three' ), ( '/' , 'one' , 'two' , 'three' ), ( '/one' , '/two' , '/three' ), ] for parts in PATHS : print ( ' {0:<30} : {1!r} ' . format ( str ( parts ), os . path . join ( * parts ))) ('one', 'two', 'three') : 'one\\\\two\\\\three' ('/', 'one', 'two', 'three') : '/one\\\\two\\\\three' ('/one', '/two', '/three') : '/three' .expanduser() \u5c06\u4f1a\u8f6c\u5316\u6ce2\u6d6a\u53f7~\u4e3a\u7528\u6237\u4e3b\u76ee\u5f55\u7684\u540d\u79f0\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u7528\u6237\u7684\u4e3b\u76ee\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c06\u88ab\u539f\u6837\u8fd4\u56de\u3002 for user in [ '' , 'dhellmann' , 'nosuchuser' ]: lookup = '~' + user print ( ' {!r:>15} : {!r} ' . format ( lookup , os . path . expanduser ( lookup ))) '~' : 'C:\\\\Users\\\\Android' '~dhellmann' : 'C:\\\\Users\\\\dhellmann' '~nosuchuser' : 'C:\\\\Users\\\\nosuchuser' .expandvars() \u66f4\u4e00\u822c\u5316\uff0c\u5b83\u5c06\u4f1a\u89e3\u6790\u8def\u5f84\u4e2d\u6240\u6709 shell \u73af\u5883\u53d8\u91cf\u3002 os . environ [ 'MYVAR' ] = 'VALUE' os . path . expandvars ( '/path/to/$MYVAR' ) '/path/to/VALUE'","title":"\u6784\u5efa\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.10.os_path.html#_3","text":"\u4f7f\u7528 .join() \u6216\u8005\u5d4c\u5165\u53d8\u91cf\u7684\u72ec\u7acb\u5b57\u7b26\u4e32\u7ec4\u5408\u7684\u8def\u5f84\u7ed3\u5c3e\u53ef\u80fd\u6709\u989d\u5916\u7684\u8def\u5f84\u5206\u9694\u7b26\u6216\u8005\u76f8\u5bf9\u8def\u5f84\u7ec4\u4ef6\u3002\u4f7f\u7528 .normpath() \u6765\u6e05\u7406\u4ed6\u4eec\uff1a PATHS = [ 'one//two//three' , 'one/./two/./three' , 'one/../alt/two/three' , ] for path in PATHS : print ( ' {!r:>22} : {!r} ' . format ( path , os . path . normpath ( path ))) 'one//two//three' : 'one\\\\two\\\\three' 'one/./two/./three' : 'one\\\\two\\\\three' 'one/../alt/two/three' : 'alt\\\\two\\\\three' \u7531 os.curdir \u548c os.pardir \u7ec4\u6210\u7684\u8def\u5f84\u7247\u6bb5\u5c06\u88ab\u89e3\u6790\u5e76\u5c55\u5f00\u3002 \u4f7f\u7528 abspath() \u53ef\u4ee5\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u5316\u4e3a\u7edd\u5bf9\u8def\u5f84\u3002\u5b9e\u9645\u4e0a\uff0c\u5c31\u662f\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u62fc\u63a5\u5230\u76f8\u5bf9\u8def\u5f84\u4e4b\u524d\u3002 absolute path = os.getcwd() + relative path","title":"\u89c4\u8303\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.10.os_path.html#_4","text":".commonprefix() \u51fd\u6570\u4f1a\u63a5\u53d7\u4e00\u4e2a\u8def\u5f84\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u800c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u6240\u6709\u8def\u5f84\u4e2d\u7684\u516c\u5171\u524d\u7f00\u3002 #` \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u80fd\u8868\u793a\u4e00\u4e2a\u5b9e\u9645\u4e0d\u5b58\u5728\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u8def\u5f84\u5206\u9694\u7b26\u5e76\u6ca1\u6709\u88ab\u8003\u8651\u5728\u5185\uff0c #` \u6240\u4ee5\u8fd9\u4e2a\u516c\u5171\u524d\u7f00\u53ef\u80fd\u5e76\u6ca1\u6709\u843d\u5728\u5206\u9694\u7b26\u8fb9\u754c\u4e0a\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonprefix ( paths )) PATH : / one / two / three / four PATH : / one / two / threefold PATH : / one / two / three / PREFIX : / one / two / three .commonpath() \u5145\u5206\u8003\u8651\u8def\u5f84\u5206\u9694\u7b26\uff0c\u4f1a\u8fd4\u56de\u8def\u5f84\u5e8f\u5217\u4e2d\u5404\u4e2a\u90e8\u5206\u7684\u6700\u957f\u516c\u5171\u6709\u6548\u5b50\u8def\u5f84\u3002 paths = [ '/one/two/three/four' , '/one/two/threefold' , '/one/two/three/' , ] for path in paths : print ( 'PATH:' , path ) print () print ( 'PREFIX:' , os . path . commonpath ( paths )) PATH : / one / two / three / four PATH : / one / two / threefold PATH : / one / two / three / PREFIX : \\ one \\ two","title":"\u516c\u5171\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.10.os_path.html#_5","text":".islink(path) : Test whether a path is a symbolic link. This will always return false for Windows prior to 6.0. .ismount(path) : Test whether a path is a mount point (a drive root, the root of a share, or a mounted volume) FILENAMES = [ __file__ , os . path . dirname ( __file__ ), '/' , './broken_link' , ] for file in FILENAMES : print ( 'File : {!r} ' . format ( file )) print ( 'Absolute :' , os . path . isabs ( file )) print ( 'Is File? :' , os . path . isfile ( file )) print ( 'Is Dir? :' , os . path . isdir ( file )) print ( 'Is Link? :' , os . path . islink ( file )) print ( 'Mountpoint? :' , os . path . ismount ( file )) print ( 'Exists? :' , os . path . exists ( file )) print ( 'Link Exists?:' , os . path . lexists ( file )) print () File : os . getcwd () + '8.10.\u6807\u51c6\u5e93_os_path.py' Absolute : True Is File ? : True Is Dir ? : False Is Link ? : False Mountpoint ? : False Exists ? : True Link Exists ?: True File : os . getcwd () Absolute : True Is File ? : False Is Dir ? : True Is Link ? : False Mountpoint ? : False Exists ? : True Link Exists ?: True File : '/' Absolute : True Is File ? : False Is Dir ? : True Is Link ? : False Mountpoint ? : True Exists ? : True Link Exists ?: True File : './broken_link' Absolute : False Is File ? : False Is Dir ? : False Is Link ? : False Mountpoint ? : False Exists ? : False Link Exists ?: False","title":"\u68c0\u67e5\u8def\u5f84"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import textwrap from Toolkit.Help import Help as H \u5220\u9664\u524d\u5bfc\u7a7a\u683c\u548c\u540e\u7f00\u7a7a\u683c \u5220\u9664\u7b2c\u4e00\u884c\u7684\u524d\u5bfc\u7a7a\u683c\u548c\u6700\u540e\u4e00\u884c\u7684\u540e\u7f00\u7a7a\u683c\uff0c width \u53c2\u6570\u63a7\u5236\u6bcf\u4e00\u884c\u7684\u5bbd\u5ea6\uff1a sample_text = ''' The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. ''' print ( sample_text ) print ( textwrap . fill ( sample_text , width = 50 )) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . \u7ed3\u679c\u5e76\u4e0d\u5c3d\u5982\u4eba\u610f\u3002\u6587\u672c\u73b0\u5728\u662f\u5de6\u5bf9\u9f50\u7684\uff0c\u53ea\u6709\u7b2c\u4e00\u884c\u4fdd\u7559\u4e86\u7f29\u8fdb\uff0c\u4f46\u662f\u539f\u6765\u7684\u6bcf\u4e00\u884c\u7684\u672b\u5c3e\u548c\u4e0b\u4e00\u884c\u7684\u5f00\u5934\u4e4b\u95f4\u4ecd\u6709\u7a7a\u683c\u3002 \u79fb\u9664\u6240\u6709\u7a7a\u683c \u4f7f\u7528 dedent() \u51fd\u6570\u53ef\u4ee5\u79fb\u53bb\u6240\u6709\u884c\u4e2d\u7684\u7a7a\u683c\u524d\u7f00\u548c\u540e\u7f00\uff1a dedented_text = textwrap . dedent ( sample_text ) print ( dedented_text ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u56e0\u4e3a dedent \u662f indent \u7684\u53cd\u4e49\u8bcd\uff0c \u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u662f\u4e00\u6bb5\u5220\u9664\u4e86\u6bcf\u4e00\u884c\u4e2d\u90fd\u5b58\u5728\u7684\u7f29\u8fdb\u7a7a\u767d\u7684\u6587\u5b57\u3002\u5982\u679c\u67d0\u4e00\u884c\u6bd4\u5176\u4ed6\u884c\u7f29\u8fdb\u7684\u66f4\u591a\uff0c\u591a\u51fa\u7684\u90e8\u5206\u5c06\u4e0d\u4f1a\u88ab\u79fb\u9664\u3002 print ( textwrap . dedent ( \"\"\" Line one. Line two. Line three. \"\"\" )) Line one. Line two. Line three. \u6dfb\u52a0\u524d\u7f00 \u7528 indent() \u51fd\u6570\u5728\u5b57\u7b26\u4e32\u6bcf\u4e00\u884c\u5f00\u5934\u52a0\u5165\u524d\u7f00\u6587\u672c\u3002\u8fd9\u4e2a\u4f8b\u5b50\u975e\u5e38\u7c7b\u4f3c\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u4e2d\u88ab\u5f15\u7528\u7684\u90e8\u5206\uff0c\u4f7f\u7528 > \u7b26\u53f7\u6765\u505a\u6bcf\u884c\u6587\u5b57\u7684\u524d\u7f00\u3002 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) wrapped += ' \\n\\n Second paragraph after a blank line.' print ( wrapped ) final = textwrap . indent ( wrapped , '> ' ) print ( 'Quoted block: \\n ' ) print ( final ) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Second paragraph after a blank line . Quoted block : > The textwrap module can be used to format text > for output in situations where pretty - printing is > desired . It offers programmatic functionality > similar to the paragraph wrapping or filling > features found in many text editors . > Second paragraph after a blank line . \u4e00\u6bb5\u6587\u5b57\u88ab\u5206\u6210\u4e86\u51e0\u884c\uff0c\u6bcf\u4e00\u884c\u6587\u5b57\u524d\u90fd\u52a0\u4e86\u524d\u7f00\uff0c\u7136\u540e\u6bcf\u884c\u6587\u5b57\u91cd\u65b0\u7ec4\u6210\u6574\u4e2a\u6587\u5b57\u6bb5\u843d\u5e76\u8fd4\u56de\u3002 \u8981\u63a7\u5236\u7279\u5b9a\u7684\u4e00\u884c\u63a5\u53d7\u65b0\u524d\u7f00\uff0c\u7ed9 indent() \u7684 predicate \u53c2\u6570\u8d4b\u503c\u3002\u8be5\u64cd\u4f5c\u4f1a\u8f6e\u6d41\u904d\u5386\u6bcf\u884c\u7684\u6587\u672c\uff0c\u5f53\u503c\u4e3a\u771f\u65f6\u5c06\u5728\u8be5\u884c\u52a0\u4e0a\u524d\u7f00\u3002 def should_indent ( line ): print ( 'Indent {!r} ?' . format ( line )) return len ( line . strip ()) % 2 == 0 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) final = textwrap . indent ( wrapped , 'EVEN ' , predicate = should_indent ) print ( ' \\n Quoted block: \\n ' ) print ( final ) Indent ' The textwrap module can be used to format text\\n' ? Indent 'for output in situations where pretty-printing is\\n' ? Indent 'desired. It offers programmatic functionality\\n' ? Indent 'similar to the paragraph wrapping or filling\\n' ? Indent 'features found in many text editors.' ? Quoted block : EVEN The textwrap module can be used to format text for output in situations where pretty - printing is EVEN desired . It offers programmatic functionality EVEN similar to the paragraph wrapping or filling EVEN features found in many text editors . \u60ac\u6302\u7f29\u8fdb \u540c\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u8f93\u51fa\u6bb5\u843d\u7684\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u5355\u72ec\u63a7\u5236\u9996\u884c\u7684\u7f29\u8fdb\u3002 dedented_text = textwrap . dedent ( sample_text ) . strip () print ( textwrap . fill ( dedented_text , initial_indent = '' , subsequent_indent = ' ' * 4 , width = 50 , )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u51cf\u77ed\u957f\u6587\u672c \u4e3a\u4e86\u67e5\u770b\u957f\u6587\u672c\u7684\u6458\u8981\u6216\u9884\u89c8\uff0c\u53ef\u4ee5\u4f7f\u7528 shorten() \u3002\u6240\u6709\u7684\u7a7a\u683c\uff0c\u6bd4\u5982\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u7a7a\u683c\u90fd\u5c06\u6807\u51c6\u5316\u4e3a\u5355\u4e2a\u7a7a\u683c\u3002\u7136\u540e\u6b64\u6587\u672c\u5c06\u51cf\u77ed\u4e3a\u8981\u6c42\u7684\u957f\u5ea6\u6765\u663e\u793a\uff0c\u5728\u5b57\u8bcd\u8fb9\u754c\u4e4b\u95f4\uff0c\u5c06\u4e0d\u5305\u62ec\u4e0d\u5b8c\u6574\u7684\u8bcd\u3002 dedented_text = textwrap . dedent ( sample_text ) original = textwrap . fill ( dedented_text , width = 50 ) print ( 'Original: \\n ' ) print ( original ) shortened = textwrap . shorten ( original , 100 ) shortened_wrapped = textwrap . fill ( shortened , width = 50 ) print ( ' \\n Shortened: \\n ' ) print ( shortened_wrapped ) Original : The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Shortened : The textwrap module can be used to format text for output in situations where pretty - printing [...] \u5982\u679c\u975e\u7a7a\u5b57\u5143\u5728\u539f\u6587\u672c\u4e2d\u88ab\u5f53\u4f5c\u51cf\u77ed\u7684\u90e8\u5206\u88ab\u79fb\u9664\uff0c\u4ed6\u5c06\u66ff\u6362\u4e3a\u5360\u4f4d\u7b26\u3002\u9ed8\u8ba4\u503c [...] \u53ef\u4ee5\u88ab\u66ff\u6362\uff0c\u5728 shorten() \u4e2d\u52a0\u5165 placeholder \u53c2\u6570\u3002 \u5f3a\u5236\u6362\u884c \u6bcf\u4e00\u884c\u8d85\u8fc720\u4e2a\u5b57\u7b26\u5c31\u5f3a\u5236\u6362\u884c\uff08\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5355\u8bcd\u88ab\u62c6\u5206\uff09\uff1a textwrap . wrap ( sample_text , width = 20 ) [' The textwrap', 'module can be used', 'to format text for', 'output in', 'situations where', 'pretty-printing is', 'desired. It offers', 'programmatic', 'functionality', 'similar to the', 'paragraph wrapping', 'or filling features', 'found in many text', 'editors.']","title":"8.2.textwrap"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html#_1","text":"\u5220\u9664\u7b2c\u4e00\u884c\u7684\u524d\u5bfc\u7a7a\u683c\u548c\u6700\u540e\u4e00\u884c\u7684\u540e\u7f00\u7a7a\u683c\uff0c width \u53c2\u6570\u63a7\u5236\u6bcf\u4e00\u884c\u7684\u5bbd\u5ea6\uff1a sample_text = ''' The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. ''' print ( sample_text ) print ( textwrap . fill ( sample_text , width = 50 )) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . \u7ed3\u679c\u5e76\u4e0d\u5c3d\u5982\u4eba\u610f\u3002\u6587\u672c\u73b0\u5728\u662f\u5de6\u5bf9\u9f50\u7684\uff0c\u53ea\u6709\u7b2c\u4e00\u884c\u4fdd\u7559\u4e86\u7f29\u8fdb\uff0c\u4f46\u662f\u539f\u6765\u7684\u6bcf\u4e00\u884c\u7684\u672b\u5c3e\u548c\u4e0b\u4e00\u884c\u7684\u5f00\u5934\u4e4b\u95f4\u4ecd\u6709\u7a7a\u683c\u3002","title":"\u5220\u9664\u524d\u5bfc\u7a7a\u683c\u548c\u540e\u7f00\u7a7a\u683c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html#_2","text":"\u4f7f\u7528 dedent() \u51fd\u6570\u53ef\u4ee5\u79fb\u53bb\u6240\u6709\u884c\u4e2d\u7684\u7a7a\u683c\u524d\u7f00\u548c\u540e\u7f00\uff1a dedented_text = textwrap . dedent ( sample_text ) print ( dedented_text ) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors. \u56e0\u4e3a dedent \u662f indent \u7684\u53cd\u4e49\u8bcd\uff0c \u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u662f\u4e00\u6bb5\u5220\u9664\u4e86\u6bcf\u4e00\u884c\u4e2d\u90fd\u5b58\u5728\u7684\u7f29\u8fdb\u7a7a\u767d\u7684\u6587\u5b57\u3002\u5982\u679c\u67d0\u4e00\u884c\u6bd4\u5176\u4ed6\u884c\u7f29\u8fdb\u7684\u66f4\u591a\uff0c\u591a\u51fa\u7684\u90e8\u5206\u5c06\u4e0d\u4f1a\u88ab\u79fb\u9664\u3002 print ( textwrap . dedent ( \"\"\" Line one. Line two. Line three. \"\"\" )) Line one. Line two. Line three.","title":"\u79fb\u9664\u6240\u6709\u7a7a\u683c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html#_3","text":"\u7528 indent() \u51fd\u6570\u5728\u5b57\u7b26\u4e32\u6bcf\u4e00\u884c\u5f00\u5934\u52a0\u5165\u524d\u7f00\u6587\u672c\u3002\u8fd9\u4e2a\u4f8b\u5b50\u975e\u5e38\u7c7b\u4f3c\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u4e2d\u88ab\u5f15\u7528\u7684\u90e8\u5206\uff0c\u4f7f\u7528 > \u7b26\u53f7\u6765\u505a\u6bcf\u884c\u6587\u5b57\u7684\u524d\u7f00\u3002 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) wrapped += ' \\n\\n Second paragraph after a blank line.' print ( wrapped ) final = textwrap . indent ( wrapped , '> ' ) print ( 'Quoted block: \\n ' ) print ( final ) The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Second paragraph after a blank line . Quoted block : > The textwrap module can be used to format text > for output in situations where pretty - printing is > desired . It offers programmatic functionality > similar to the paragraph wrapping or filling > features found in many text editors . > Second paragraph after a blank line . \u4e00\u6bb5\u6587\u5b57\u88ab\u5206\u6210\u4e86\u51e0\u884c\uff0c\u6bcf\u4e00\u884c\u6587\u5b57\u524d\u90fd\u52a0\u4e86\u524d\u7f00\uff0c\u7136\u540e\u6bcf\u884c\u6587\u5b57\u91cd\u65b0\u7ec4\u6210\u6574\u4e2a\u6587\u5b57\u6bb5\u843d\u5e76\u8fd4\u56de\u3002 \u8981\u63a7\u5236\u7279\u5b9a\u7684\u4e00\u884c\u63a5\u53d7\u65b0\u524d\u7f00\uff0c\u7ed9 indent() \u7684 predicate \u53c2\u6570\u8d4b\u503c\u3002\u8be5\u64cd\u4f5c\u4f1a\u8f6e\u6d41\u904d\u5386\u6bcf\u884c\u7684\u6587\u672c\uff0c\u5f53\u503c\u4e3a\u771f\u65f6\u5c06\u5728\u8be5\u884c\u52a0\u4e0a\u524d\u7f00\u3002 def should_indent ( line ): print ( 'Indent {!r} ?' . format ( line )) return len ( line . strip ()) % 2 == 0 dedented_text = textwrap . dedent ( sample_text ) wrapped = textwrap . fill ( dedented_text , width = 50 ) final = textwrap . indent ( wrapped , 'EVEN ' , predicate = should_indent ) print ( ' \\n Quoted block: \\n ' ) print ( final ) Indent ' The textwrap module can be used to format text\\n' ? Indent 'for output in situations where pretty-printing is\\n' ? Indent 'desired. It offers programmatic functionality\\n' ? Indent 'similar to the paragraph wrapping or filling\\n' ? Indent 'features found in many text editors.' ? Quoted block : EVEN The textwrap module can be used to format text for output in situations where pretty - printing is EVEN desired . It offers programmatic functionality EVEN similar to the paragraph wrapping or filling EVEN features found in many text editors .","title":"\u6dfb\u52a0\u524d\u7f00"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html#_4","text":"\u540c\u65f6\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u8f93\u51fa\u6bb5\u843d\u7684\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u5355\u72ec\u63a7\u5236\u9996\u884c\u7684\u7f29\u8fdb\u3002 dedented_text = textwrap . dedent ( sample_text ) . strip () print ( textwrap . fill ( dedented_text , initial_indent = '' , subsequent_indent = ' ' * 4 , width = 50 , )) The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors.","title":"\u60ac\u6302\u7f29\u8fdb"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html#_5","text":"\u4e3a\u4e86\u67e5\u770b\u957f\u6587\u672c\u7684\u6458\u8981\u6216\u9884\u89c8\uff0c\u53ef\u4ee5\u4f7f\u7528 shorten() \u3002\u6240\u6709\u7684\u7a7a\u683c\uff0c\u6bd4\u5982\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u7a7a\u683c\u90fd\u5c06\u6807\u51c6\u5316\u4e3a\u5355\u4e2a\u7a7a\u683c\u3002\u7136\u540e\u6b64\u6587\u672c\u5c06\u51cf\u77ed\u4e3a\u8981\u6c42\u7684\u957f\u5ea6\u6765\u663e\u793a\uff0c\u5728\u5b57\u8bcd\u8fb9\u754c\u4e4b\u95f4\uff0c\u5c06\u4e0d\u5305\u62ec\u4e0d\u5b8c\u6574\u7684\u8bcd\u3002 dedented_text = textwrap . dedent ( sample_text ) original = textwrap . fill ( dedented_text , width = 50 ) print ( 'Original: \\n ' ) print ( original ) shortened = textwrap . shorten ( original , 100 ) shortened_wrapped = textwrap . fill ( shortened , width = 50 ) print ( ' \\n Shortened: \\n ' ) print ( shortened_wrapped ) Original : The textwrap module can be used to format text for output in situations where pretty - printing is desired . It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors . Shortened : The textwrap module can be used to format text for output in situations where pretty - printing [...] \u5982\u679c\u975e\u7a7a\u5b57\u5143\u5728\u539f\u6587\u672c\u4e2d\u88ab\u5f53\u4f5c\u51cf\u77ed\u7684\u90e8\u5206\u88ab\u79fb\u9664\uff0c\u4ed6\u5c06\u66ff\u6362\u4e3a\u5360\u4f4d\u7b26\u3002\u9ed8\u8ba4\u503c [...] \u53ef\u4ee5\u88ab\u66ff\u6362\uff0c\u5728 shorten() \u4e2d\u52a0\u5165 placeholder \u53c2\u6570\u3002","title":"\u51cf\u77ed\u957f\u6587\u672c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.2.textwrap.html#_6","text":"\u6bcf\u4e00\u884c\u8d85\u8fc720\u4e2a\u5b57\u7b26\u5c31\u5f3a\u5236\u6362\u884c\uff08\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5355\u8bcd\u88ab\u62c6\u5206\uff09\uff1a textwrap . wrap ( sample_text , width = 20 ) [' The textwrap', 'module can be used', 'to format text for', 'output in', 'situations where', 'pretty-printing is', 'desired. It offers', 'programmatic', 'functionality', 'similar to the', 'paragraph wrapping', 'or filling features', 'found in many text', 'editors.']","title":"\u5f3a\u5236\u6362\u884c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import time import textwrap import warnings # from tools import Help as H warnings . filterwarnings ( \"ignore\" ) \u65f6\u95f4\u6a21\u5757 time \u63d0\u4f9b\u4e86\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u65f6\u95f4\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e00\u79cd\u5bf9\u4e0d\u540c\u76ee\u7684\u90fd\u6709\u7528\u3002 \u6807\u51c6\u7cfb\u7edf\u901a\u8fc7\u8c03\u7528 time() \uff08\u6a21\u5757\uff09\u62a5\u544a\u7cfb\u7edf\u6302\u949f\u65f6\u95f4\uff08\"wall clock\" \u4e00\u822c\u6307\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\uff09\u3002 \u5355\u8c03\u65f6\u949f\u6a21\u5757 monotonic() \u7528\u4e8e\u4f30\u7b97\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u56e0\u4e3a\u5373\u4f7f\u7cfb\u7edf\u65f6\u95f4\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5b83\u4e5f\u4fdd\u8bc1\u4e0d\u4f1a\u540e\u9000\u3002 \u5bf9\u4e8e\u7a0b\u5e8f\u6d4b\u8bd5\uff0c perf_counter() \uff08\u6a21\u5757\uff09 \u63d0\u4f9b\u4e86\u9ad8\u5206\u8fa8\u7387\u7684\u65f6\u949f\u8bbf\u95ee\u65b9\u5f0f\uff0c\u4f7f\u77ed\u65f6\u95f4\u7684\u6d4b\u8bd5\u66f4\u51c6\u786e\u3002 CPU \u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7 clock() \u83b7\u5f97\uff0c\u800c process_time() \u5219\u4f1a\u8fd4\u56de\u5904\u7406\u5668\u65f6\u95f4\u548c\u7cfb\u7edf\u65f6\u95f4\u7684\u7ec4\u5408\u3002 \u5404\u4e2a\u65f6\u949f \u65f6\u949f\u7684\u5b9e\u73b0\u7ec6\u8282\u56e0\u5e73\u53f0\u800c\u5f02\u3002\u4f7f\u7528 \u201cget_clock_info ()\u201d \u6765\u8bbf\u95ee\u5173\u4e8e\u5f53\u524d\u65b9\u5f0f\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u65f6\u949f\u7684\u5206\u8fa8\u7387\u3002 \u5f53\u524dPython\u7248\u672c\u6240\u6709\u53ef\u7528\u7684\u65f6\u949f\u5982\u4e0b\uff1a available_clocks = [ ( 'clock' , time . clock ), ( 'monotonic' , time . monotonic ), ( 'perf_counter' , time . perf_counter ), ( 'process_time' , time . process_time ), ( 'time' , time . time ), ( 'thread_time' , time . thread_time ), ] for clock_name , func in available_clocks : print ( textwrap . dedent ( ''' \\ {name} : adjustable : {info.adjustable} implementation: {info.implementation} monotonic : {info.monotonic} resolution : {info.resolution} current : {current} ''' ) . format ( name = clock_name , info = time . get_clock_info ( clock_name ), current = func ()) ) clock : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6853218 monotonic : adjustable : False implementation : GetTickCount64 () monotonic : True resolution : 0.015625 current : 1123921.625 perf_counter : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6890105 process_time : adjustable : False implementation : GetProcessTimes () monotonic : True resolution : 1 e - 07 current : 565.125 time : adjustable : True implementation : GetSystemTimeAsFileTime () monotonic : False resolution : 0.015625 current : 1580735857.8439054 thread_time : adjustable : False implementation : GetThreadTimes () monotonic : True resolution : 1 e - 07 current : 528.671875 Windows 10 \u7684\u8f93\u51fa\u663e\u793a\u5176 perf_counter \u548c clocks \u6a21\u5757\u8c03\u7528\u76f8\u540c\u7684\u5e95\u5c42\u3002clocks \u5728Python 3.8\u4f1a\u88ab\u79fb\u9664\u3002 \u6302\u949f\u65f6\u95f4\u2014\u2014time time \u6a21\u5757\u7684\u6838\u5fc3\u51fd\u6570\u4e4b\u4e00\u662f time() \uff0c\u5b83\u53ef\u4ee5\u628a\u4ece \u300cepoch\u300d \u5f00\u59cb\u4e4b\u540e\u7684\u79d2\u6570\u4ee5\u6d6e\u70b9\u6570\u7684\u683c\u5f0f\u8fd4\u56de\u3002 print ( 'The time is:' , time . time ()) print ( 'The time is:' , time . time_ns ()) The time is: 1580735857.8729014 The time is: 1580735857877901000 \u65f6\u5143 (epoch) \u662f\u6d4b\u91cf\u65f6\u95f4\u7684\u5f00\u59cb\uff0c\u5bf9\u4e8e Unix \u7cfb\u7edf\u6765\u8bf4\uff0c\u65f6\u5143\u662f 1970 \u5e74 1 \u6708 1 \u65e5 0 \u70b9\u3002 \u867d\u7136\u8be5\u6570\u503c\u4e00\u76f4\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4f46\u662f\u5b83\u7684\u5b9e\u9645\u7cbe\u5ea6\u662f\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684\u3002 \u867d\u7136\u6d6e\u70b9\u8868\u793a\u5728\u5b58\u50a8\u6216\u8005\u6bd4\u8f83\u65e5\u671f\u65f6\u975e\u5e38\u6709\u6548\uff0c\u4f46\u662f\uff0c\u5728\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u8868\u793a\u65f6\u5c31\u663e\u5f97\u6709\u70b9\u529b\u4e0d\u4ece\u5fc3\u3002\u5bf9\u4e8e\u8bb0\u5f55\u6216\u8005\u6253\u5370\u65f6\u95f4\uff0c ctime() \u53ef\u80fd\u4f1a\u66f4\u6709\u6548\u3002 ctime() \u5c06\u81eaepoch\u4ee5\u6765\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u7b49\u6548\u4e8e asctime(localtime(seconds)) \u3002\u5982\u679c\u65f6\u95f4\u5143\u7ec4\u4e0d\u5b58\u5728\uff0c\u5219\u4f7f\u7528localtime()\u8fd4\u56de\u7684\u5f53\u524d\u65f6\u95f4\u3002 print ( 'The time is:' , time . ctime ()) The time is: Mon Feb 3 21:17:37 2020 \u5355\u8c03\u65f6\u949f\u2014\u2014monotonic \u56e0\u4e3a time() \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u662f\u7cfb\u7edf\u65f6\u949f\uff0c\u5e76\u4e14\uff0c\u4e3a\u4e86\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u540c\u6b65\u65f6\u949f\uff0c\u7cfb\u7edf\u65f6\u949f\u53ef\u4ee5\u88ab\u7528\u6237\u6216\u8005\u662f\u7cfb\u7edf\u670d\u52a1\u66f4\u6539\uff1b\u6240\u4ee5\uff0c\u5728\u91cd\u590d\u8c03\u7528 time() \u51fd\u6570\u65f6\u4ea7\u751f\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u4f1a\u6709\u524d\u540e\u6ce2\u52a8\u3002\u5728\u6d4b\u91cf\u6301\u7eed\u65f6\u95f4\u6216\u8005\u4f7f\u7528\u8fd9\u4e9b\u65f6\u95f4\u8fdb\u884c\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u6599\u4e4b\u5916\u7684\u884c\u4e3a\u3002\u901a\u8fc7\u4f7f\u7528 monotonic() \u51fd\u6570\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e9b\u60c5\u51b5\uff0c\u56e0\u4e3a monotonic() \u51fd\u6570\u603b\u662f\u8fd4\u56de\u524d\u5411\u7684\u65f6\u95f4\u503c\u3002 start = time . monotonic () time . sleep ( 0.1 ) end = time . monotonic () print ( 'start : {:>9.2f} ' . format ( start )) print ( 'end : {:>9.2f} ' . format ( end )) print ( 'span : {:>9.2f} ' . format ( end - start )) start : 1123921.73 end : 1123921.84 span : 0.11 \u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u5355\u8c03\u65f6\u949f\u7684\u8d77\u59cb\u70b9\u3002\u56e0\u6b64\uff0c \u53ea\u6709\u5728\u4f7f\u7528\u5176\u5b83\u65f6\u949f\u503c\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0c\u5355\u8c03\u65f6\u949f\u7684\u8fd4\u56de\u503c\u624d\u4f1a\u6709\u7528\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7761\u7720\u7684\u6301\u7eed\u65f6\u95f4\u5c31\u662f\u7528 monotonic() \u51fd\u6570\u6d4b\u91cf\u7684\u3002 \u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4 time() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6302\u949f\u65f6\u95f4\uff0c perf_counter() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4\u3002 perf_counter() \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53cd\u6620\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f7f\u7528\u7684\u5b9e\u9645\u65f6\u95f4\u3002 for i in range ( 4 ): time . sleep ( 1 ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . perf_counter ())) Mon Feb 3 21:17:39 2020 : 1580735859.086 516161.933 Mon Feb 3 21:17:40 2020 : 1580735860.087 516162.934 Mon Feb 3 21:17:41 2020 : 1580735861.088 516163.935 Mon Feb 3 21:17:42 2020 : 1580735862.089 516164.936 \u5982\u679c\u4f60\u60f3\u8981\u5728\u81ea\u5df1\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u589e\u52a0\u5355\u6b21\u5185\u5faa\u73af\u7684\u5faa\u73af\u5468\u671f\u6216\u8005\u663e\u8457\u5730\u589e\u52a0\u5faa\u73af\u7684\u603b\u6b21\u6570\uff0c\u624d\u53ef\u4ee5\u771f\u6b63\u5730\u770b\u5230\u65f6\u95f4\u5dee\u5f02\u3002\uff08\u5982\u679c\u5faa\u73af\u5468\u671f\u592a\u77ed\uff0c\u5faa\u73af\u6b21\u6570\u592a\u5c11\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u53d8\u5316\uff0c\u6574\u4e2a\u7a0b\u5e8f\u5c31\u7ed3\u675f\u4e86\u3002\uff09 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7a0b\u5e8f\u4ec0\u4e48\u4e8b\u60c5\u6ca1\u6709\u505a\uff0c\u5904\u7406\u5668\u65f6\u949f\u5c31\u4e0d\u4f1a\u6ef4\u7b54\u8ba1\u65f6\uff0c\u6216\u8005\u8ba1\u65f6\u91cf\u5f88\u5c0f\u3002 print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) for i in range ( 4 ): print ( 'Sleeping' ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) Mon Feb 3 21:17:42 2020 : 1580735862.112 516164.959 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.960 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 \u6027\u80fd\u8ba1\u6570\u5668 \u6709\u4e00\u4e2a\u9ad8\u5206\u8fa8\u7387\u7684\u5355\u8c03\u65f6\u949f\u6765\u8861\u91cf\u6027\u80fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u8981\u60f3\u786e\u5b9a\u6700\u4f73\u65f6\u949f\u6570\u636e\u6e90\uff0c\u9700\u8981\u4e00\u4e9b\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u77e5\u8bc6\uff0c\u8fd9\u4e9b\u77e5\u8bc6\u7531 Python \u4e2d\u7684 perf_counter() \u63d0\u4f9b\u3002 \u548c monotonic() \u51fd\u6570\u4e00\u6837\uff0c perf_counter() \u51fd\u6570\u7684\u65f6\u5143\uff08epoch\uff09\u662f\u672a\u5b9a\u4e49\u7684\u3002\u5e76\u4e14\uff0c\u51fd\u6570\u7684\u8fd9\u4e9b\u8fd4\u56de\u503c\u7528\u4e8e\u6bd4\u8f83\u548c\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u7528\u4f5c\u7edd\u5bf9\u65f6\u95f4\u3002 struct_time \u6309\u79d2\u8ba1\u6570\uff0c\u628a\u79d2\u4f5c\u4e3a\u5355\u4f4d\u6765\u5b58\u50a8\u65f6\u95f4\u5728\u67d0\u4e9b\u573a\u5408\u5f88\u9002\u7528\uff0c\u4f46\u6709\u65f6\u5019\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u7684\uff08\u6216\u8005\u8bf4\u7a0b\u5e8f\u611f\u5174\u8da3\u7684\uff09\u662f\u65e5\u671f\u7684\u4e0d\u540c\u5355\u4f4d\u6240\u5bf9\u5e94\u7684\u5404\u4e2a\u90e8\u5206\uff08\u6bd4\u5982\uff0c\u67d0\u5e74\u3001\u67d0\u6708\u7b49\uff09\u3002\u4e3a\u4e86\u8ba9\u65e5\u671f\u7684\u5404\u4e2a\u90e8\u5206\u4fbf\u4e8e\u8bbf\u95ee\uff0c time \u6a21\u5757\u5b9a\u4e49\u4e86 struct_time \uff0c\u5b83\u4ee5\u5404\u4e2a\u90e8\u5206\u5206\u79bb\u7684\u683c\u5f0f\u6765\u5b58\u50a8\u65e5\u671f\u548c\u65f6\u95f4\u503c\u3002 \u6709\u4e9b\u51fd\u6570\u4ee5 struct_time \u7c7b\u578b\u7684\u6570\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u6d6e\u70b9\u578b\u7684\u6570\u503c\u3002 gmtime() \u51fd\u6570\u8fd4\u56de\u5f53\u524d UTC 1 \u65f6\u95f4\uff08\u4e16\u754c\u6807\u51c6\u65f6\u95f4\uff09\u3002 localtime() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e0e\u5f53\u524d\u65f6\u533a\u7684\u5f53\u524d\u65f6\u95f4 \u3002 mktime() \u63a5\u6536\u4e00\u4e2a struct_time \u578b\u6570\u503c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\u6570\u503c\u3002 print ( time . gmtime ()) print ( \"\" ) print ( time . localtime ()) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 13 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 ) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 21 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 ) \u4e0e\u65f6\u533a\u76f8\u5173\u7684\u5de5\u4f5c \u786e\u5b9a\u5f53\u524d\u65f6\u95f4\u7684\u51fd\u6570\u4f9d\u8d56\u4e8e\u65f6\u533a\u8bbe\u7f6e\uff0c\u65f6\u533a\u53ef\u4ee5\u7531\u7a0b\u5e8f\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u7684\u9ed8\u8ba4\u65f6\u533a\u8bbe\u7f6e\u3002\u6539\u53d8\u65f6\u533a\u5e76\u4e0d\u4f1a\u6539\u53d8\u5b9e\u9645\u7684\u65f6\u95f4\uff0c\u53ea\u662f\u6539\u53d8\u5b83\u7684\u8868\u73b0\u65b9\u5f0f\u3002 time \u6a21\u5757\u67094\u4e2a\u5c5e\u6027\u8bb0\u5f55\u4e86\u65f6\u533a\u7684\u4fe1\u606f\uff1a import os def show_zone_info (): print ( ' TZ :' , os . environ . get ( 'TZ' , '(not set)' )) print ( ' tzname:' , str ( time . tzname ) . encode ( 'latin-1' ) . decode ( 'gbk' )) print ( ' Zone : {} ( {} )' . format ( time . timezone , ( time . timezone / 3600 ))) print ( ' DST :' , time . daylight ) print ( ' ALZone : {} ( {} )' . format ( time . altzone , ( time . altzone / 3600 ))) print ( ' Time :' , time . ctime ()) print () show_zone_info () TZ : (not set) tzname: ('\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4', '\u4e2d\u56fd\u590f\u4ee4\u65f6') Zone : -28800 (-8.0) DST : 0 ALZone : -32400 (-9.0) Time : Mon Feb 3 21:17:42 2020 \u89e3\u6790\u548c\u683c\u5f0f\u5316\u65f6\u95f4 \u6709\u4e24\u4e2a\u51fd\u6570 \u2014\u2014 strptime() \u548c strftime() \u2014\u2014 \u53ef\u4ee5\u4f7f\u65f6\u95f4\u503c\u5728 struct_time \u8868\u793a\u548c\u5b57\u7b26\u4e32\u8868\u793a\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u3002\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u683c\u5f0f\u8bf4\u660e\u5217\u8868\u53ef\u4ee5\u7528\u6765\u652f\u6301\u4e0d\u540c\u683c\u5f0f\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5b8c\u6574\u7684\u5217\u8868\u8bb0\u5f55\u5728 time \u6a21\u5757\u7684\u5e93\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u5f53\u524d\u65f6\u95f4\u4ece\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u6362\u6210 struct_time \u5b9e\u4f8b\uff0c\u7136\u540e\u53c8\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 struct_time \u2192 \u6d6e\u70b9\u6570\u65f6\u95f4\uff08\u79d2\uff09 struct_time = time . localtime () print ( struct_time ) seconds = time . mktime ( struct_time ) print ( seconds ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 1580735862.0 \u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 struct_time \u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4 print ( time . time ()) time . ctime ( time . time ()) 1580735862.2027004 'Mon Feb 3 21:17:42 2020' \u5b57\u7b26\u4e32\u65f6\u95f4 \u2192 struct_time print ( time . ctime ( time . time ())) time . strptime ( time . ctime ( time . time ())) Mon Feb 3 21:17:42 2020 time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=-1) struct_time \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4 print ( time . localtime ()) time . strftime ( \" %a %b %d %H:%M:%S %Y\" , time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 'Mon Feb 03 21:17:42 2020' time . asctime ( time . localtime ()) 'Mon Feb 3 21:17:42 2020' 0\u65f6\u533a\u7684\u65f6\u95f4\u662fUTC\u65f6\u95f4\uff0cUTC\u65f6\u95f4\u548c\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\uff08GMT\uff09\u5f88\u63a5\u8fd1\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e24\u8005\u76f8\u4e92\u66ff\u4ee3\u4e0d\u4f1a\u51fa\u95ee\u9898\uff0c\u4f46\u4e25\u683c\u6765\u8bf4UTC\u548cGMT\u5e76\u4e0d\u76f8\u7b49\u3002 \u21a9","title":"8.3.time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#_1","text":"\u65f6\u949f\u7684\u5b9e\u73b0\u7ec6\u8282\u56e0\u5e73\u53f0\u800c\u5f02\u3002\u4f7f\u7528 \u201cget_clock_info ()\u201d \u6765\u8bbf\u95ee\u5173\u4e8e\u5f53\u524d\u65b9\u5f0f\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u65f6\u949f\u7684\u5206\u8fa8\u7387\u3002 \u5f53\u524dPython\u7248\u672c\u6240\u6709\u53ef\u7528\u7684\u65f6\u949f\u5982\u4e0b\uff1a available_clocks = [ ( 'clock' , time . clock ), ( 'monotonic' , time . monotonic ), ( 'perf_counter' , time . perf_counter ), ( 'process_time' , time . process_time ), ( 'time' , time . time ), ( 'thread_time' , time . thread_time ), ] for clock_name , func in available_clocks : print ( textwrap . dedent ( ''' \\ {name} : adjustable : {info.adjustable} implementation: {info.implementation} monotonic : {info.monotonic} resolution : {info.resolution} current : {current} ''' ) . format ( name = clock_name , info = time . get_clock_info ( clock_name ), current = func ()) ) clock : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6853218 monotonic : adjustable : False implementation : GetTickCount64 () monotonic : True resolution : 0.015625 current : 1123921.625 perf_counter : adjustable : False implementation : QueryPerformanceCounter () monotonic : True resolution : 1 e - 07 current : 516160.6890105 process_time : adjustable : False implementation : GetProcessTimes () monotonic : True resolution : 1 e - 07 current : 565.125 time : adjustable : True implementation : GetSystemTimeAsFileTime () monotonic : False resolution : 0.015625 current : 1580735857.8439054 thread_time : adjustable : False implementation : GetThreadTimes () monotonic : True resolution : 1 e - 07 current : 528.671875 Windows 10 \u7684\u8f93\u51fa\u663e\u793a\u5176 perf_counter \u548c clocks \u6a21\u5757\u8c03\u7528\u76f8\u540c\u7684\u5e95\u5c42\u3002clocks \u5728Python 3.8\u4f1a\u88ab\u79fb\u9664\u3002","title":"\u5404\u4e2a\u65f6\u949f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#time","text":"time \u6a21\u5757\u7684\u6838\u5fc3\u51fd\u6570\u4e4b\u4e00\u662f time() \uff0c\u5b83\u53ef\u4ee5\u628a\u4ece \u300cepoch\u300d \u5f00\u59cb\u4e4b\u540e\u7684\u79d2\u6570\u4ee5\u6d6e\u70b9\u6570\u7684\u683c\u5f0f\u8fd4\u56de\u3002 print ( 'The time is:' , time . time ()) print ( 'The time is:' , time . time_ns ()) The time is: 1580735857.8729014 The time is: 1580735857877901000 \u65f6\u5143 (epoch) \u662f\u6d4b\u91cf\u65f6\u95f4\u7684\u5f00\u59cb\uff0c\u5bf9\u4e8e Unix \u7cfb\u7edf\u6765\u8bf4\uff0c\u65f6\u5143\u662f 1970 \u5e74 1 \u6708 1 \u65e5 0 \u70b9\u3002 \u867d\u7136\u8be5\u6570\u503c\u4e00\u76f4\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4f46\u662f\u5b83\u7684\u5b9e\u9645\u7cbe\u5ea6\u662f\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684\u3002 \u867d\u7136\u6d6e\u70b9\u8868\u793a\u5728\u5b58\u50a8\u6216\u8005\u6bd4\u8f83\u65e5\u671f\u65f6\u975e\u5e38\u6709\u6548\uff0c\u4f46\u662f\uff0c\u5728\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u8868\u793a\u65f6\u5c31\u663e\u5f97\u6709\u70b9\u529b\u4e0d\u4ece\u5fc3\u3002\u5bf9\u4e8e\u8bb0\u5f55\u6216\u8005\u6253\u5370\u65f6\u95f4\uff0c ctime() \u53ef\u80fd\u4f1a\u66f4\u6709\u6548\u3002 ctime() \u5c06\u81eaepoch\u4ee5\u6765\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u7b49\u6548\u4e8e asctime(localtime(seconds)) \u3002\u5982\u679c\u65f6\u95f4\u5143\u7ec4\u4e0d\u5b58\u5728\uff0c\u5219\u4f7f\u7528localtime()\u8fd4\u56de\u7684\u5f53\u524d\u65f6\u95f4\u3002 print ( 'The time is:' , time . ctime ()) The time is: Mon Feb 3 21:17:37 2020","title":"\u6302\u949f\u65f6\u95f4\u2014\u2014time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#monotonic","text":"\u56e0\u4e3a time() \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u662f\u7cfb\u7edf\u65f6\u949f\uff0c\u5e76\u4e14\uff0c\u4e3a\u4e86\u5728\u591a\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u540c\u6b65\u65f6\u949f\uff0c\u7cfb\u7edf\u65f6\u949f\u53ef\u4ee5\u88ab\u7528\u6237\u6216\u8005\u662f\u7cfb\u7edf\u670d\u52a1\u66f4\u6539\uff1b\u6240\u4ee5\uff0c\u5728\u91cd\u590d\u8c03\u7528 time() \u51fd\u6570\u65f6\u4ea7\u751f\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u4f1a\u6709\u524d\u540e\u6ce2\u52a8\u3002\u5728\u6d4b\u91cf\u6301\u7eed\u65f6\u95f4\u6216\u8005\u4f7f\u7528\u8fd9\u4e9b\u65f6\u95f4\u8fdb\u884c\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u610f\u6599\u4e4b\u5916\u7684\u884c\u4e3a\u3002\u901a\u8fc7\u4f7f\u7528 monotonic() \u51fd\u6570\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e9b\u60c5\u51b5\uff0c\u56e0\u4e3a monotonic() \u51fd\u6570\u603b\u662f\u8fd4\u56de\u524d\u5411\u7684\u65f6\u95f4\u503c\u3002 start = time . monotonic () time . sleep ( 0.1 ) end = time . monotonic () print ( 'start : {:>9.2f} ' . format ( start )) print ( 'end : {:>9.2f} ' . format ( end )) print ( 'span : {:>9.2f} ' . format ( end - start )) start : 1123921.73 end : 1123921.84 span : 0.11 \u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u5355\u8c03\u65f6\u949f\u7684\u8d77\u59cb\u70b9\u3002\u56e0\u6b64\uff0c \u53ea\u6709\u5728\u4f7f\u7528\u5176\u5b83\u65f6\u949f\u503c\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0c\u5355\u8c03\u65f6\u949f\u7684\u8fd4\u56de\u503c\u624d\u4f1a\u6709\u7528\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7761\u7720\u7684\u6301\u7eed\u65f6\u95f4\u5c31\u662f\u7528 monotonic() \u51fd\u6570\u6d4b\u91cf\u7684\u3002","title":"\u5355\u8c03\u65f6\u949f\u2014\u2014monotonic"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#_2","text":"time() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6302\u949f\u65f6\u95f4\uff0c perf_counter() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4\u3002 perf_counter() \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53cd\u6620\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f7f\u7528\u7684\u5b9e\u9645\u65f6\u95f4\u3002 for i in range ( 4 ): time . sleep ( 1 ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . perf_counter ())) Mon Feb 3 21:17:39 2020 : 1580735859.086 516161.933 Mon Feb 3 21:17:40 2020 : 1580735860.087 516162.934 Mon Feb 3 21:17:41 2020 : 1580735861.088 516163.935 Mon Feb 3 21:17:42 2020 : 1580735862.089 516164.936 \u5982\u679c\u4f60\u60f3\u8981\u5728\u81ea\u5df1\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u589e\u52a0\u5355\u6b21\u5185\u5faa\u73af\u7684\u5faa\u73af\u5468\u671f\u6216\u8005\u663e\u8457\u5730\u589e\u52a0\u5faa\u73af\u7684\u603b\u6b21\u6570\uff0c\u624d\u53ef\u4ee5\u771f\u6b63\u5730\u770b\u5230\u65f6\u95f4\u5dee\u5f02\u3002\uff08\u5982\u679c\u5faa\u73af\u5468\u671f\u592a\u77ed\uff0c\u5faa\u73af\u6b21\u6570\u592a\u5c11\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u65f6\u95f4\u503c\u53ef\u80fd\u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u53d8\u5316\uff0c\u6574\u4e2a\u7a0b\u5e8f\u5c31\u7ed3\u675f\u4e86\u3002\uff09 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7a0b\u5e8f\u4ec0\u4e48\u4e8b\u60c5\u6ca1\u6709\u505a\uff0c\u5904\u7406\u5668\u65f6\u949f\u5c31\u4e0d\u4f1a\u6ef4\u7b54\u8ba1\u65f6\uff0c\u6216\u8005\u8ba1\u65f6\u91cf\u5f88\u5c0f\u3002 print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) for i in range ( 4 ): print ( 'Sleeping' ) print ( time . ctime (), ': {:0.3f} {:0.3f} ' . format ( time . time (), time . clock ())) Mon Feb 3 21:17:42 2020 : 1580735862.112 516164.959 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.960 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.113 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961 Sleeping Mon Feb 3 21:17:42 2020 : 1580735862.114 516164.961","title":"\u5904\u7406\u5668\u65f6\u949f\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#_3","text":"\u6709\u4e00\u4e2a\u9ad8\u5206\u8fa8\u7387\u7684\u5355\u8c03\u65f6\u949f\u6765\u8861\u91cf\u6027\u80fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u8981\u60f3\u786e\u5b9a\u6700\u4f73\u65f6\u949f\u6570\u636e\u6e90\uff0c\u9700\u8981\u4e00\u4e9b\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u77e5\u8bc6\uff0c\u8fd9\u4e9b\u77e5\u8bc6\u7531 Python \u4e2d\u7684 perf_counter() \u63d0\u4f9b\u3002 \u548c monotonic() \u51fd\u6570\u4e00\u6837\uff0c perf_counter() \u51fd\u6570\u7684\u65f6\u5143\uff08epoch\uff09\u662f\u672a\u5b9a\u4e49\u7684\u3002\u5e76\u4e14\uff0c\u51fd\u6570\u7684\u8fd9\u4e9b\u8fd4\u56de\u503c\u7528\u4e8e\u6bd4\u8f83\u548c\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u7528\u4f5c\u7edd\u5bf9\u65f6\u95f4\u3002","title":"\u6027\u80fd\u8ba1\u6570\u5668"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#struct_time","text":"\u6309\u79d2\u8ba1\u6570\uff0c\u628a\u79d2\u4f5c\u4e3a\u5355\u4f4d\u6765\u5b58\u50a8\u65f6\u95f4\u5728\u67d0\u4e9b\u573a\u5408\u5f88\u9002\u7528\uff0c\u4f46\u6709\u65f6\u5019\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u7684\uff08\u6216\u8005\u8bf4\u7a0b\u5e8f\u611f\u5174\u8da3\u7684\uff09\u662f\u65e5\u671f\u7684\u4e0d\u540c\u5355\u4f4d\u6240\u5bf9\u5e94\u7684\u5404\u4e2a\u90e8\u5206\uff08\u6bd4\u5982\uff0c\u67d0\u5e74\u3001\u67d0\u6708\u7b49\uff09\u3002\u4e3a\u4e86\u8ba9\u65e5\u671f\u7684\u5404\u4e2a\u90e8\u5206\u4fbf\u4e8e\u8bbf\u95ee\uff0c time \u6a21\u5757\u5b9a\u4e49\u4e86 struct_time \uff0c\u5b83\u4ee5\u5404\u4e2a\u90e8\u5206\u5206\u79bb\u7684\u683c\u5f0f\u6765\u5b58\u50a8\u65e5\u671f\u548c\u65f6\u95f4\u503c\u3002 \u6709\u4e9b\u51fd\u6570\u4ee5 struct_time \u7c7b\u578b\u7684\u6570\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u6d6e\u70b9\u578b\u7684\u6570\u503c\u3002 gmtime() \u51fd\u6570\u8fd4\u56de\u5f53\u524d UTC 1 \u65f6\u95f4\uff08\u4e16\u754c\u6807\u51c6\u65f6\u95f4\uff09\u3002 localtime() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e0e\u5f53\u524d\u65f6\u533a\u7684\u5f53\u524d\u65f6\u95f4 \u3002 mktime() \u63a5\u6536\u4e00\u4e2a struct_time \u578b\u6570\u503c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\u6570\u503c\u3002 print ( time . gmtime ()) print ( \"\" ) print ( time . localtime ()) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 13 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 ) time . struct_time ( tm_year = 2020 , tm_mon = 2 , tm_mday = 3 , tm_hour = 21 , tm_min = 17 , tm_sec = 42 , tm_wday = 0 , tm_yday = 34 , tm_isdst = 0 )","title":"struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#_4","text":"\u786e\u5b9a\u5f53\u524d\u65f6\u95f4\u7684\u51fd\u6570\u4f9d\u8d56\u4e8e\u65f6\u533a\u8bbe\u7f6e\uff0c\u65f6\u533a\u53ef\u4ee5\u7531\u7a0b\u5e8f\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u7684\u9ed8\u8ba4\u65f6\u533a\u8bbe\u7f6e\u3002\u6539\u53d8\u65f6\u533a\u5e76\u4e0d\u4f1a\u6539\u53d8\u5b9e\u9645\u7684\u65f6\u95f4\uff0c\u53ea\u662f\u6539\u53d8\u5b83\u7684\u8868\u73b0\u65b9\u5f0f\u3002 time \u6a21\u5757\u67094\u4e2a\u5c5e\u6027\u8bb0\u5f55\u4e86\u65f6\u533a\u7684\u4fe1\u606f\uff1a import os def show_zone_info (): print ( ' TZ :' , os . environ . get ( 'TZ' , '(not set)' )) print ( ' tzname:' , str ( time . tzname ) . encode ( 'latin-1' ) . decode ( 'gbk' )) print ( ' Zone : {} ( {} )' . format ( time . timezone , ( time . timezone / 3600 ))) print ( ' DST :' , time . daylight ) print ( ' ALZone : {} ( {} )' . format ( time . altzone , ( time . altzone / 3600 ))) print ( ' Time :' , time . ctime ()) print () show_zone_info () TZ : (not set) tzname: ('\u4e2d\u56fd\u6807\u51c6\u65f6\u95f4', '\u4e2d\u56fd\u590f\u4ee4\u65f6') Zone : -28800 (-8.0) DST : 0 ALZone : -32400 (-9.0) Time : Mon Feb 3 21:17:42 2020","title":"\u4e0e\u65f6\u533a\u76f8\u5173\u7684\u5de5\u4f5c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#_5","text":"\u6709\u4e24\u4e2a\u51fd\u6570 \u2014\u2014 strptime() \u548c strftime() \u2014\u2014 \u53ef\u4ee5\u4f7f\u65f6\u95f4\u503c\u5728 struct_time \u8868\u793a\u548c\u5b57\u7b26\u4e32\u8868\u793a\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u3002\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u683c\u5f0f\u8bf4\u660e\u5217\u8868\u53ef\u4ee5\u7528\u6765\u652f\u6301\u4e0d\u540c\u683c\u5f0f\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5b8c\u6574\u7684\u5217\u8868\u8bb0\u5f55\u5728 time \u6a21\u5757\u7684\u5e93\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u5f53\u524d\u65f6\u95f4\u4ece\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u6362\u6210 struct_time \u5b9e\u4f8b\uff0c\u7136\u540e\u53c8\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f\u3002","title":"\u89e3\u6790\u548c\u683c\u5f0f\u5316\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#struct_time_1","text":"struct_time = time . localtime () print ( struct_time ) seconds = time . mktime ( struct_time ) print ( seconds ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 1580735862.0","title":"struct_time \u2192 \u6d6e\u70b9\u6570\u65f6\u95f4\uff08\u79d2\uff09"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#struct_time_2","text":"","title":"\u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#_6","text":"print ( time . time ()) time . ctime ( time . time ()) 1580735862.2027004 'Mon Feb 3 21:17:42 2020'","title":"\u6d6e\u70b9\u6570\u65f6\u95f4 \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#struct_time_3","text":"print ( time . ctime ( time . time ())) time . strptime ( time . ctime ( time . time ())) Mon Feb 3 21:17:42 2020 time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=-1)","title":"\u5b57\u7b26\u4e32\u65f6\u95f4 \u2192 struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.3.time.html#struct_time_4","text":"print ( time . localtime ()) time . strftime ( \" %a %b %d %H:%M:%S %Y\" , time . localtime ()) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=17, tm_sec=42, tm_wday=0, tm_yday=34, tm_isdst=0) 'Mon Feb 03 21:17:42 2020' time . asctime ( time . localtime ()) 'Mon Feb 3 21:17:42 2020' 0\u65f6\u533a\u7684\u65f6\u95f4\u662fUTC\u65f6\u95f4\uff0cUTC\u65f6\u95f4\u548c\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\uff08GMT\uff09\u5f88\u63a5\u8fd1\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e24\u8005\u76f8\u4e92\u66ff\u4ee3\u4e0d\u4f1a\u51fa\u95ee\u9898\uff0c\u4f46\u4e25\u683c\u6765\u8bf4UTC\u548cGMT\u5e76\u4e0d\u76f8\u7b49\u3002 \u21a9","title":"struct_time \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) # from tools import Help as H import datetime time\uff1a\u65f6\u95f4 time \u5b9e\u4f8b\u53ea\u4fdd\u5b58\u65f6\u95f4\u503c\uff0c\u800c\u4e0d\u4fdd\u5b58\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u65e5\u671f\u503c\u3002 t = datetime . time ( hour = 1 , minute = 2 , second = 3 , microsecond = 4 , tzinfo = None ) print ( t ) print ( 'hour :' , t . hour ) print ( 'minute :' , t . minute ) print ( 'second :' , t . second ) print ( 'microsecond:' , t . microsecond ) print ( 'tzinfo :' , t . tzinfo ) 01 : 02 : 03.000004 hour : 1 minute : 2 second : 3 microsecond : 4 tzinfo : None min \u548c max \u7c7b\u7684\u5c5e\u6027\u4ee3\u8868\u4e00\u5929\u5185\u7684\u6709\u6548\u65f6\u95f4\u8303\u56f4\u3002 time \u7684\u7cbe\u5ea6\uff08\u5373 time \u80fd\u591f\u6709\u6548\u8868\u793a\u7684\u6700\u5c0f\u65f6\u95f4\u95f4\u9694\uff09\u88ab\u9650\u5236\u4e3a1\u5fae\u79d2\u3002 print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . time . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . time . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . time . resolution ) \u6700\u5c0f\u65f6\u95f4 min: 00:00:00 \u6700\u5927\u65f6\u95f4 min: 23:59:59.999999 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 0:00:00.000001 \u5176\u4ed6\u6784\u9020\u5668\uff1a datetime.date.today() \uff1a datetime . date . today () datetime.date(2020, 2, 3) date\uff1a\u65e5\u671f \u65e5\u5386\u65e5\u671f\u53ef\u4ee5\u7528 date \u7c7b\u6765\u63cf\u8ff0\u3002 date \u7c7b\u5b9e\u4f8b\u5316\u540e\u6709\u5c5e\u6027 year \uff0c month \uff0c\u548c day \u3002 # \u5982\u679c\u53c2\u6570\u8d85\u51fa\u9650\u5236\u8303\u56f4\uff0c\u629b\u51faValueError\u5f02\u5e38 MYdate = datetime . date ( year = 2019 , month = 3 , day = 22 ) print ( MYdate ) print ( 'year :' , MYdate . year ) print ( 'month :' , MYdate . month ) print ( 'day :' , MYdate . day ) print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . date . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . date . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . date . resolution ) 2019-03-22 year : 2019 month : 3 day : 22 \u6700\u5c0f\u65f6\u95f4 min: 0001-01-01 \u6700\u5927\u65f6\u95f4 min: 9999-12-31 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 1 day, 0:00:00 \u5176\u4ed6\u6784\u9020\u51fd\u6570 import time t = time . time () \u4ecetimestamp\u6784\u9020date datetime . date . fromtimestamp ( t ) datetime.date(2020, 2, 3) \u4eceproleptic Gregorian ordinal\u6784\u9020date datetime . date . fromordinal ( 737140 ) datetime.date(2019, 3, 22) \u4eceISO\u683c\u5f0f\u7684\u65e5\u671f\u6784\u9020date datetime . date . fromisoformat ( '2019-03-22' ) datetime.date(2019, 3, 22) date \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4 print ( datetime . date . ctime ( MYdate )) print ( datetime . date . strftime ( MYdate , \" %a %b %d %H:%M:%S %Y\" )) Fri Mar 22 00:00:00 2019 Fri Mar 22 00:00:00 2019 date \u2192 struct_time datetime . date . timetuple ( MYdate ) time.struct_time(tm_year=2019, tm_mon=3, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=81, tm_isdst=-1) \u65e5\u671f\u51fd\u6570 Return a 3-tuple containing ISO year, week number, and weekday. datetime . date . isocalendar ( MYdate ) (2019, 12, 5) Return the date formatted according to ISO.This is 'YYYY-MM-DD'. datetime . date . isoformat ( MYdate ) '2019-03-22' \"Return day of the week, where Monday == 1 ... Sunday == 7.\" datetime . date . isoweekday ( MYdate ) 5 \"Return day of the week, where Monday == 0 ... Sunday == 6.\" datetime . date . weekday ( MYdate ) 4 Return proleptic Gregorian ordinal for the year, month and day. datetime . date . toordinal ( MYdate ) 737140 datetime\uff1a\u65e5\u671f\u548c\u65f6\u95f4 date_time = datetime . datetime ( year = 2020 , month = 3 , day = 23 , hour = 10 , minute = 15 , second = 30 , microsecond = 4 , tzinfo = None ) \u5176\u4ed6\u6784\u9020\u51fd\u6570 datetime . datetime . utcnow () datetime . datetime . now () datetime . datetime . today () datetime . datetime . fromisoformat ( '2019-03-22-10:15:30' ) datetime . datetime . fromordinal ( 737140 ) datetime . datetime . fromtimestamp ( time . time ()) datetime . datetime . utcfromtimestamp ( time . time ()) datetime.datetime(2020, 2, 3, 13, 11, 31, 149891) datetime \u2192 date date_time = datetime . datetime . now () datetime . datetime . date ( date_time ) datetime.date(2020, 2, 3) datetime \u2192 time datetime . datetime . time ( date_time ) datetime.time(21, 11, 31, 172888) date and time \u2192 datetime t1 = datetime . date . today () t2 = datetime . time ( hour = 10 , minute = 15 , second = 30 ) datetime . datetime . combine ( t1 , t2 ) datetime.datetime(2020, 2, 3, 10, 15, 30) datetime \u2192 time string datetime . datetime . ctime ( date_time ) print ( datetime . datetime . strftime ( date_time , \" %a %b %d %H:%M:%S %Y\" )) Mon Feb 03 21:11:31 2020 time string \u2192 datetime datetime . datetime . strptime ( 'Mon Feb 3 19:56:21 2020' , \" %a %b %d %H:%M:%S %Y\" ) datetime.datetime(2020, 2, 3, 19, 56, 21) datetime \u2192 timestamp datetime . datetime . timestamp ( date_time ) 1580735491.172888 datetime \u2192 timetuple datetime . datetime . timetuple ( date_time ) datetime . datetime . utctimetuple ( date_time ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=11, tm_sec=31, tm_wday=0, tm_yday=34, tm_isdst=0) \u5176\u4ed6\u51fd\u6570 datetime . datetime . toordinal ( date_time ) datetime . datetime . isocalendar ( date_time ) datetime . datetime . isoformat ( date_time ) datetime . datetime . isoweekday ( date_time ) datetime . datetime . weekday ( date_time ) datetime . datetime . astimezone ( date_time , tz = None ) datetime . datetime . dst ( date_time ) date_time . astimezone ( tz = None ) datetime.datetime(2020, 2, 3, 21, 11, 31, 172888, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), '?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0??')) ['astimezone', 'dst', 'replace', 'timetz', 'tzname', 'utcoffset'] timedelta \u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a datetime \u5bf9\u8c61\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u8ba1\u7b97\u672a\u6765\u548c\u8fc7\u53bb\u7684\u65e5\u671f\uff0c\u6216\u8005\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a datetime \u5bf9\u8c61\u548c\u4e00\u4e2a timedelta \u5bf9\u8c61\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u3002\u4e0d\u540c\u7684\u65e5\u671f\u76f8\u51cf\u4f1a\u4ea7\u751f\u4e00\u4e2a timedelta \uff0c\u4e00\u4e2a\u65e5\u671f\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u4e00\u4e2a timedelta \u4f1a\u4ea7\u751f\u53e6\u4e00\u4e2a\u65e5\u671f\u3002 timedelta \u7684\u5185\u90e8\u503c\u4ee5\u5929\u3001\u79d2\u548c\u5fae\u79d2\u7684\u5f62\u5f0f\u5b58\u50a8\u3002 print ( 'microseconds:' , datetime . timedelta ( microseconds = 1 )) print ( 'milliseconds:' , datetime . timedelta ( milliseconds = 1 )) print ( 'seconds :' , datetime . timedelta ( seconds = 1 )) print ( 'minutes :' , datetime . timedelta ( minutes = 1 )) print ( 'hours :' , datetime . timedelta ( hours = 1 )) print ( 'days :' , datetime . timedelta ( days = 1 )) print ( 'weeks :' , datetime . timedelta ( weeks = 1 )) microseconds : 0 : 00 : 00.000001 milliseconds : 0 : 00 : 00.001000 seconds : 0 : 00 : 01 minutes : 0 : 01 : 00 hours : 1 : 00 : 00 days : 1 day , 0 : 00 : 00 weeks : 7 days , 0 : 00 : 00 \u53ef\u4ee5\u4f7f\u7528 total_seconds() \u5c06 timedelta \u7684\u6574\u4e2a\u6301\u7eed\u65f6\u95f4\u68c0\u7d22\u4e3a\u79d2\u6570\u3002 for delta in [ datetime . timedelta ( microseconds = 1 ), datetime . timedelta ( milliseconds = 1 ), datetime . timedelta ( seconds = 1 ), datetime . timedelta ( minutes = 1 ), datetime . timedelta ( hours = 1 ), datetime . timedelta ( days = 1 ), datetime . timedelta ( weeks = 1 ), ]: print ( ' {:15} = {:8} seconds' . format ( str ( delta ), delta . total_seconds ()) ) 0 : 00 : 00.000001 = 1 e - 06 seconds 0 : 00 : 00.001000 = 0.001 seconds 0 : 00 : 01 = 1.0 seconds 0 : 01 : 00 = 60.0 seconds 1 : 00 : 00 = 3600.0 seconds 1 day , 0 : 00 : 00 = 86400.0 seconds 7 days , 0 : 00 : 00 = 604800.0 seconds \u65e5\u671f\u7b97\u672f\u8fd0\u7b97 one_day = datetime . timedelta ( days = 1 ) today = datetime . date . today () yesterday = today - one_day tomorrow = today + one_day print ( type ( today )) type ( yesterday ) == type ( today ) == type ( tomorrow ) <class 'datetime.date'> True timedelta \u5bf9\u8c61\u8fd8\u652f\u6301\u4e0e\u6574\u578b\u6570\u3001\u6d6e\u70b9\u6570\u548c\u5176\u5b83 timedelta \u5b9e\u4f8b\u7684\u7b97\u672f\u8fd0\u7b97\u3002 one_day = datetime . timedelta ( days = 1 ) print ( '1 day :' , one_day ) print ( '5 days :' , one_day * 5 ) print ( '1.5 days :' , one_day * 1.5 ) print ( '1/4 day :' , one_day / 4 ) # \u5047\u8bbe\u5348\u996d\u65f6\u95f4\u4e3a 1 \u5c0f\u65f6 work_day = datetime . timedelta ( hours = 7 ) meeting_length = datetime . timedelta ( hours = 1 ) print ( 'meetings per day :' , work_day / meeting_length ) 1 day : 1 day, 0:00:00 5 days : 5 days, 0:00:00 1.5 days : 1 day, 12:00:00 1/4 day : 6:00:00 meetings per day : 7.0 \u6bd4\u8f83\u6570\u503c print ( 'Times:' ) t1 = datetime . time ( 12 , 55 , 0 ) print ( ' t1:' , t1 ) t2 = datetime . time ( 13 , 5 , 0 ) print ( ' t2:' , t2 ) print ( ' t1 < t2:' , t1 < t2 ) print () print ( 'Dates:' ) d1 = datetime . date . today () print ( ' d1:' , d1 ) d2 = datetime . date . today () + datetime . timedelta ( days = 1 ) print ( ' d2:' , d2 ) print ( ' d1 > d2:' , d1 > d2 ) Times : t1 : 12 : 55 : 00 t2 : 13 : 05 : 00 t1 < t2 : True Dates : d1 : 2020 - 02 - 03 d2 : 2020 - 02 - 04 d1 > d2 : False \u683c\u5f0f\u5316\u548c\u89e3\u6790 datetime \u5bf9\u8c61\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u6cd5\u91c7\u7528\u7684\u662f ISO-8601 \u683c\u5f0f ( YYYY-MM-DDTHH:MM:SS.mmmmmm )\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 strftime() \u51fd\u6570\u751f\u6210\u5176\u5b83\u7684\u683c\u5f0f\u3002 format = \" %a %b %d %H:%M:%S %Y\" today = datetime . datetime . today () print ( 'ISO :' , today ) s = today . strftime ( format ) print ( 'strftime:' , s ) d = datetime . datetime . strptime ( s , format ) print ( 'strptime:' , d . strftime ( format )) ISO : 2020 - 02 - 03 21 : 11 : 31.684806 strftime : Mon Feb 03 21 : 11 : 31 2020 strptime : Mon Feb 03 21 : 11 : 31 2020 \u76f8\u540c\u7684\u683c\u5f0f\u5316\u4ee3\u7801\u53ef\u4ee5\u4e0e Python \u7684 string formatting mini-language \u4e00\u8d77\u4f7f\u7528\uff0c\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u89c4\u8303\u4e2d\u7684 : \u540e\u9762\u3002 today = datetime . datetime . today () print ( 'ISO :' , today ) print ( 'format(): {: %a %b %d %H:%M:%S %Y}' . format ( today )) ISO : 2020 - 02 - 03 21 : 11 : 31.729803 format (): Mon Feb 03 21 : 11 : 31 2020 \u6bcf\u4e00\u4e2a datetime \u683c\u5f0f\u4ee3\u7801\u5747\u4ee5 % \u4e3a\u524d\u7f00\uff0c\u5e76\u4e14\u540e\u9762\u7684\u5192\u53f7\u88ab\u5f53\u4f5c\u662f\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u3002 \u7b26\u53f7 \u542b\u4e49 \u4f8b\u5b50 %a \u661f\u671f\u7684\u7b80\u5199 'Wed' %A \u661f\u671f\u7684\u5b8c\u6574\u5199\u6cd5 'Wednesday' %w \u661f\u671f\u4ee3\u53f7 -- \u4ece 0 (\u5468\u65e5) \u5230 6 (\u5468\u516d) '3' %d \u6708\u7684\u7b2c\u51e0\u65e5 (\u4e2a\u4f4d\u6570\u65f6\uff0c\u5341\u4f4d\u8865 0) '13' %b \u6708\u4efd\u7684\u7b80\u5199 'Jan' %B \u6708\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 'January' %m \u6708\u4efd '01' %y \u5e74\u4efd\u7684\u7f29\u5199 '16' %Y \u5e74\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 '2016' %H \u5c0f\u65f6\uff08 24 \u5c0f\u65f6\u5236\uff09 '17' %I \u5c0f\u65f6\uff08 12 \u5c0f\u65f6\u5236\uff09 '05' %p AM/PM 'PM' %M \u5206\u949f '00' %S \u79d2 '00' %f \u5fae\u79d2 '000000' %z \u8bbe\u7f6e\u65f6\u533a\uff08\u9002\u7528\u4e8e\u5bf9\u65f6\u533a\u654f\u611f\u7684\u7c7b\uff09 '-0500' %Z \u65f6\u533a\u540d 'EST' %j \u4e00\u5e74\u7684\u7b2c\u51e0\u5929 '013' %W \u4e00\u5e74\u7684\u7b2c\u51e0\u5468 '02' %c \u5f53\u5730\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4 'Wed Jan 13 17:00:00 2016' %x \u5f53\u5730\u5f53\u524d\u65e5\u671f '01/13/16' %X \u5f53\u5730\u5f53\u524d\u65f6\u95f4 '17:00:00' %% \u4e00\u4e2a % '%' \u65f6\u533a \u5728 datetime \u4e2d\uff0c\u65f6\u533a\u7531 tzinfo \u7684\u5b50\u7c7b\u8868\u793a\u3002\u7531\u4e8e tzinfo \u662f\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\uff0c\u56e0\u6b64\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b\u3002\u4e3a\u4e86\u8ba9\u8fd9\u4e2a\u7c7b\u80fd\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u8981\u4e3a\u4e00\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u9002\u5f53\u7684\u5b9e\u73b0\u3002 \u5728 timezone \u7c7b\u4e2d\uff0c datetime \u786e\u5b9e\u5305\u542b\u4e86\u4e00\u4e2a\u7565\u4e3a\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u5b83\u4f7f\u7528 UTC \u7684\u56fa\u5b9a\u504f\u79fb\u91cf\uff0c\u5e76\u4e14\u4e0d\u652f\u6301\u4e00\u5e74\u4e2d\u4e0d\u540c\u65e5\u671f\u7684\u4e0d\u540c\u504f\u79fb\u91cf\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u590f\u4ee4\u65f6\u7684\u5730\u65b9\u6216\u8005 UTC \u7684\u504f\u79fb\u91cf\u4f1a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u5730\u65b9\u3002 min6 = datetime . timezone ( datetime . timedelta ( hours =- 6 )) plus6 = datetime . timezone ( datetime . timedelta ( hours = 6 )) d = datetime . datetime . now ( min6 ) print ( min6 , ':' , d ) print ( datetime . timezone . utc , ':' , d . astimezone ( datetime . timezone . utc )) print ( plus6 , ':' , d . astimezone ( plus6 )) # \u8f6c\u6362\u4e3a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 d_system = d . astimezone () print ( d_system . tzinfo , ' :' , d_system ) UTC-06:00 : 2020-02-03 07:11:31.756794-06:00 UTC : 2020-02-03 13:11:31.756794+00:00 UTC+06:00 : 2020-02-03 19:11:31.756794+06:00 ?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0?? : 2020-02-03 21:11:31.756794+08:00 \u8981\u60f3\u5c06 datetime \u503c\u4ece\u4e00\u4e2a\u65f6\u533a\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u65f6\u533a\uff0c\u53ef\u4ee5\u4f7f\u7528 astimezone() \u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728 UTC \u7684\u4e24\u8fb9\u5206\u522b\u663e\u793a\u4e86 6 \u5c0f\u65f6\u7684\u65f6\u533a\uff0c\u5e76\u4e14\u8fd8\u4f7f\u7528 datetime.timezone \u4e2d\u7684 utc \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u8003\u3002\u6700\u540e\u7684\u8f93\u51fa\u884c\u663e\u793a\u7cfb\u7edf\u65f6\u533a\u4e2d\u7684\u503c\uff0c\u8be5\u503c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 astimezone() \u51fd\u6570\u83b7\u5f97\uff0c\u8c03\u7528\u65f6\u4e0d\u9700\u8981\u53c2\u6570\u3002","title":"8.4.datetime"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#time","text":"time \u5b9e\u4f8b\u53ea\u4fdd\u5b58\u65f6\u95f4\u503c\uff0c\u800c\u4e0d\u4fdd\u5b58\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u65e5\u671f\u503c\u3002 t = datetime . time ( hour = 1 , minute = 2 , second = 3 , microsecond = 4 , tzinfo = None ) print ( t ) print ( 'hour :' , t . hour ) print ( 'minute :' , t . minute ) print ( 'second :' , t . second ) print ( 'microsecond:' , t . microsecond ) print ( 'tzinfo :' , t . tzinfo ) 01 : 02 : 03.000004 hour : 1 minute : 2 second : 3 microsecond : 4 tzinfo : None min \u548c max \u7c7b\u7684\u5c5e\u6027\u4ee3\u8868\u4e00\u5929\u5185\u7684\u6709\u6548\u65f6\u95f4\u8303\u56f4\u3002 time \u7684\u7cbe\u5ea6\uff08\u5373 time \u80fd\u591f\u6709\u6548\u8868\u793a\u7684\u6700\u5c0f\u65f6\u95f4\u95f4\u9694\uff09\u88ab\u9650\u5236\u4e3a1\u5fae\u79d2\u3002 print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . time . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . time . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . time . resolution ) \u6700\u5c0f\u65f6\u95f4 min: 00:00:00 \u6700\u5927\u65f6\u95f4 min: 23:59:59.999999 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 0:00:00.000001 \u5176\u4ed6\u6784\u9020\u5668\uff1a datetime.date.today() \uff1a datetime . date . today () datetime.date(2020, 2, 3)","title":"time\uff1a\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#date","text":"\u65e5\u5386\u65e5\u671f\u53ef\u4ee5\u7528 date \u7c7b\u6765\u63cf\u8ff0\u3002 date \u7c7b\u5b9e\u4f8b\u5316\u540e\u6709\u5c5e\u6027 year \uff0c month \uff0c\u548c day \u3002 # \u5982\u679c\u53c2\u6570\u8d85\u51fa\u9650\u5236\u8303\u56f4\uff0c\u629b\u51faValueError\u5f02\u5e38 MYdate = datetime . date ( year = 2019 , month = 3 , day = 22 ) print ( MYdate ) print ( 'year :' , MYdate . year ) print ( 'month :' , MYdate . month ) print ( 'day :' , MYdate . day ) print ( \"\u6700\u5c0f\u65f6\u95f4\" ) print ( 'min:' , datetime . date . min ) print ( \"\u6700\u5927\u65f6\u95f4\" ) print ( 'min:' , datetime . date . max ) print ( \"\u6700\u5c0f\u523b\u5ea6\u5355\u4f4d\" ) print ( 'Resolution:' , datetime . date . resolution ) 2019-03-22 year : 2019 month : 3 day : 22 \u6700\u5c0f\u65f6\u95f4 min: 0001-01-01 \u6700\u5927\u65f6\u95f4 min: 9999-12-31 \u6700\u5c0f\u523b\u5ea6\u5355\u4f4d Resolution: 1 day, 0:00:00","title":"date\uff1a\u65e5\u671f"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_1","text":"import time t = time . time () \u4ecetimestamp\u6784\u9020date datetime . date . fromtimestamp ( t ) datetime.date(2020, 2, 3) \u4eceproleptic Gregorian ordinal\u6784\u9020date datetime . date . fromordinal ( 737140 ) datetime.date(2019, 3, 22) \u4eceISO\u683c\u5f0f\u7684\u65e5\u671f\u6784\u9020date datetime . date . fromisoformat ( '2019-03-22' ) datetime.date(2019, 3, 22)","title":"\u5176\u4ed6\u6784\u9020\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#date_1","text":"print ( datetime . date . ctime ( MYdate )) print ( datetime . date . strftime ( MYdate , \" %a %b %d %H:%M:%S %Y\" )) Fri Mar 22 00:00:00 2019 Fri Mar 22 00:00:00 2019","title":"date \u2192 \u5b57\u7b26\u4e32\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#date-struct_time","text":"datetime . date . timetuple ( MYdate ) time.struct_time(tm_year=2019, tm_mon=3, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=81, tm_isdst=-1)","title":"date \u2192 struct_time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_2","text":"Return a 3-tuple containing ISO year, week number, and weekday. datetime . date . isocalendar ( MYdate ) (2019, 12, 5) Return the date formatted according to ISO.This is 'YYYY-MM-DD'. datetime . date . isoformat ( MYdate ) '2019-03-22' \"Return day of the week, where Monday == 1 ... Sunday == 7.\" datetime . date . isoweekday ( MYdate ) 5 \"Return day of the week, where Monday == 0 ... Sunday == 6.\" datetime . date . weekday ( MYdate ) 4 Return proleptic Gregorian ordinal for the year, month and day. datetime . date . toordinal ( MYdate ) 737140","title":"\u65e5\u671f\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#datetime","text":"date_time = datetime . datetime ( year = 2020 , month = 3 , day = 23 , hour = 10 , minute = 15 , second = 30 , microsecond = 4 , tzinfo = None )","title":"datetime\uff1a\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_3","text":"datetime . datetime . utcnow () datetime . datetime . now () datetime . datetime . today () datetime . datetime . fromisoformat ( '2019-03-22-10:15:30' ) datetime . datetime . fromordinal ( 737140 ) datetime . datetime . fromtimestamp ( time . time ()) datetime . datetime . utcfromtimestamp ( time . time ()) datetime.datetime(2020, 2, 3, 13, 11, 31, 149891)","title":"\u5176\u4ed6\u6784\u9020\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#datetime-date","text":"date_time = datetime . datetime . now () datetime . datetime . date ( date_time ) datetime.date(2020, 2, 3)","title":"datetime \u2192 date"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#datetime-time","text":"datetime . datetime . time ( date_time ) datetime.time(21, 11, 31, 172888)","title":"datetime \u2192 time"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#date-and-time-datetime","text":"t1 = datetime . date . today () t2 = datetime . time ( hour = 10 , minute = 15 , second = 30 ) datetime . datetime . combine ( t1 , t2 ) datetime.datetime(2020, 2, 3, 10, 15, 30)","title":"date and time \u2192 datetime"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#datetime-time-string","text":"datetime . datetime . ctime ( date_time ) print ( datetime . datetime . strftime ( date_time , \" %a %b %d %H:%M:%S %Y\" )) Mon Feb 03 21:11:31 2020","title":"datetime \u2192 time string"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#time-string-datetime","text":"datetime . datetime . strptime ( 'Mon Feb 3 19:56:21 2020' , \" %a %b %d %H:%M:%S %Y\" ) datetime.datetime(2020, 2, 3, 19, 56, 21)","title":"time string \u2192 datetime"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#datetime-timestamp","text":"datetime . datetime . timestamp ( date_time ) 1580735491.172888","title":"datetime \u2192 timestamp"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#datetime-timetuple","text":"datetime . datetime . timetuple ( date_time ) datetime . datetime . utctimetuple ( date_time ) time.struct_time(tm_year=2020, tm_mon=2, tm_mday=3, tm_hour=21, tm_min=11, tm_sec=31, tm_wday=0, tm_yday=34, tm_isdst=0)","title":"datetime \u2192 timetuple"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_4","text":"datetime . datetime . toordinal ( date_time ) datetime . datetime . isocalendar ( date_time ) datetime . datetime . isoformat ( date_time ) datetime . datetime . isoweekday ( date_time ) datetime . datetime . weekday ( date_time ) datetime . datetime . astimezone ( date_time , tz = None ) datetime . datetime . dst ( date_time ) date_time . astimezone ( tz = None ) datetime.datetime(2020, 2, 3, 21, 11, 31, 172888, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), '?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0??')) ['astimezone', 'dst', 'replace', 'timetz', 'tzname', 'utcoffset']","title":"\u5176\u4ed6\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#timedelta","text":"\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a datetime \u5bf9\u8c61\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u8ba1\u7b97\u672a\u6765\u548c\u8fc7\u53bb\u7684\u65e5\u671f\uff0c\u6216\u8005\u662f\u901a\u8fc7\u5c06\u4e00\u4e2a datetime \u5bf9\u8c61\u548c\u4e00\u4e2a timedelta \u5bf9\u8c61\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u3002\u4e0d\u540c\u7684\u65e5\u671f\u76f8\u51cf\u4f1a\u4ea7\u751f\u4e00\u4e2a timedelta \uff0c\u4e00\u4e2a\u65e5\u671f\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u4e00\u4e2a timedelta \u4f1a\u4ea7\u751f\u53e6\u4e00\u4e2a\u65e5\u671f\u3002 timedelta \u7684\u5185\u90e8\u503c\u4ee5\u5929\u3001\u79d2\u548c\u5fae\u79d2\u7684\u5f62\u5f0f\u5b58\u50a8\u3002 print ( 'microseconds:' , datetime . timedelta ( microseconds = 1 )) print ( 'milliseconds:' , datetime . timedelta ( milliseconds = 1 )) print ( 'seconds :' , datetime . timedelta ( seconds = 1 )) print ( 'minutes :' , datetime . timedelta ( minutes = 1 )) print ( 'hours :' , datetime . timedelta ( hours = 1 )) print ( 'days :' , datetime . timedelta ( days = 1 )) print ( 'weeks :' , datetime . timedelta ( weeks = 1 )) microseconds : 0 : 00 : 00.000001 milliseconds : 0 : 00 : 00.001000 seconds : 0 : 00 : 01 minutes : 0 : 01 : 00 hours : 1 : 00 : 00 days : 1 day , 0 : 00 : 00 weeks : 7 days , 0 : 00 : 00 \u53ef\u4ee5\u4f7f\u7528 total_seconds() \u5c06 timedelta \u7684\u6574\u4e2a\u6301\u7eed\u65f6\u95f4\u68c0\u7d22\u4e3a\u79d2\u6570\u3002 for delta in [ datetime . timedelta ( microseconds = 1 ), datetime . timedelta ( milliseconds = 1 ), datetime . timedelta ( seconds = 1 ), datetime . timedelta ( minutes = 1 ), datetime . timedelta ( hours = 1 ), datetime . timedelta ( days = 1 ), datetime . timedelta ( weeks = 1 ), ]: print ( ' {:15} = {:8} seconds' . format ( str ( delta ), delta . total_seconds ()) ) 0 : 00 : 00.000001 = 1 e - 06 seconds 0 : 00 : 00.001000 = 0.001 seconds 0 : 00 : 01 = 1.0 seconds 0 : 01 : 00 = 60.0 seconds 1 : 00 : 00 = 3600.0 seconds 1 day , 0 : 00 : 00 = 86400.0 seconds 7 days , 0 : 00 : 00 = 604800.0 seconds","title":"timedelta"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_5","text":"one_day = datetime . timedelta ( days = 1 ) today = datetime . date . today () yesterday = today - one_day tomorrow = today + one_day print ( type ( today )) type ( yesterday ) == type ( today ) == type ( tomorrow ) <class 'datetime.date'> True timedelta \u5bf9\u8c61\u8fd8\u652f\u6301\u4e0e\u6574\u578b\u6570\u3001\u6d6e\u70b9\u6570\u548c\u5176\u5b83 timedelta \u5b9e\u4f8b\u7684\u7b97\u672f\u8fd0\u7b97\u3002 one_day = datetime . timedelta ( days = 1 ) print ( '1 day :' , one_day ) print ( '5 days :' , one_day * 5 ) print ( '1.5 days :' , one_day * 1.5 ) print ( '1/4 day :' , one_day / 4 ) # \u5047\u8bbe\u5348\u996d\u65f6\u95f4\u4e3a 1 \u5c0f\u65f6 work_day = datetime . timedelta ( hours = 7 ) meeting_length = datetime . timedelta ( hours = 1 ) print ( 'meetings per day :' , work_day / meeting_length ) 1 day : 1 day, 0:00:00 5 days : 5 days, 0:00:00 1.5 days : 1 day, 12:00:00 1/4 day : 6:00:00 meetings per day : 7.0","title":"\u65e5\u671f\u7b97\u672f\u8fd0\u7b97"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_6","text":"print ( 'Times:' ) t1 = datetime . time ( 12 , 55 , 0 ) print ( ' t1:' , t1 ) t2 = datetime . time ( 13 , 5 , 0 ) print ( ' t2:' , t2 ) print ( ' t1 < t2:' , t1 < t2 ) print () print ( 'Dates:' ) d1 = datetime . date . today () print ( ' d1:' , d1 ) d2 = datetime . date . today () + datetime . timedelta ( days = 1 ) print ( ' d2:' , d2 ) print ( ' d1 > d2:' , d1 > d2 ) Times : t1 : 12 : 55 : 00 t2 : 13 : 05 : 00 t1 < t2 : True Dates : d1 : 2020 - 02 - 03 d2 : 2020 - 02 - 04 d1 > d2 : False","title":"\u6bd4\u8f83\u6570\u503c"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_7","text":"datetime \u5bf9\u8c61\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u6cd5\u91c7\u7528\u7684\u662f ISO-8601 \u683c\u5f0f ( YYYY-MM-DDTHH:MM:SS.mmmmmm )\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 strftime() \u51fd\u6570\u751f\u6210\u5176\u5b83\u7684\u683c\u5f0f\u3002 format = \" %a %b %d %H:%M:%S %Y\" today = datetime . datetime . today () print ( 'ISO :' , today ) s = today . strftime ( format ) print ( 'strftime:' , s ) d = datetime . datetime . strptime ( s , format ) print ( 'strptime:' , d . strftime ( format )) ISO : 2020 - 02 - 03 21 : 11 : 31.684806 strftime : Mon Feb 03 21 : 11 : 31 2020 strptime : Mon Feb 03 21 : 11 : 31 2020 \u76f8\u540c\u7684\u683c\u5f0f\u5316\u4ee3\u7801\u53ef\u4ee5\u4e0e Python \u7684 string formatting mini-language \u4e00\u8d77\u4f7f\u7528\uff0c\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u89c4\u8303\u4e2d\u7684 : \u540e\u9762\u3002 today = datetime . datetime . today () print ( 'ISO :' , today ) print ( 'format(): {: %a %b %d %H:%M:%S %Y}' . format ( today )) ISO : 2020 - 02 - 03 21 : 11 : 31.729803 format (): Mon Feb 03 21 : 11 : 31 2020 \u6bcf\u4e00\u4e2a datetime \u683c\u5f0f\u4ee3\u7801\u5747\u4ee5 % \u4e3a\u524d\u7f00\uff0c\u5e76\u4e14\u540e\u9762\u7684\u5192\u53f7\u88ab\u5f53\u4f5c\u662f\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u3002 \u7b26\u53f7 \u542b\u4e49 \u4f8b\u5b50 %a \u661f\u671f\u7684\u7b80\u5199 'Wed' %A \u661f\u671f\u7684\u5b8c\u6574\u5199\u6cd5 'Wednesday' %w \u661f\u671f\u4ee3\u53f7 -- \u4ece 0 (\u5468\u65e5) \u5230 6 (\u5468\u516d) '3' %d \u6708\u7684\u7b2c\u51e0\u65e5 (\u4e2a\u4f4d\u6570\u65f6\uff0c\u5341\u4f4d\u8865 0) '13' %b \u6708\u4efd\u7684\u7b80\u5199 'Jan' %B \u6708\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 'January' %m \u6708\u4efd '01' %y \u5e74\u4efd\u7684\u7f29\u5199 '16' %Y \u5e74\u4efd\u7684\u5b8c\u6574\u5199\u6cd5 '2016' %H \u5c0f\u65f6\uff08 24 \u5c0f\u65f6\u5236\uff09 '17' %I \u5c0f\u65f6\uff08 12 \u5c0f\u65f6\u5236\uff09 '05' %p AM/PM 'PM' %M \u5206\u949f '00' %S \u79d2 '00' %f \u5fae\u79d2 '000000' %z \u8bbe\u7f6e\u65f6\u533a\uff08\u9002\u7528\u4e8e\u5bf9\u65f6\u533a\u654f\u611f\u7684\u7c7b\uff09 '-0500' %Z \u65f6\u533a\u540d 'EST' %j \u4e00\u5e74\u7684\u7b2c\u51e0\u5929 '013' %W \u4e00\u5e74\u7684\u7b2c\u51e0\u5468 '02' %c \u5f53\u5730\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4 'Wed Jan 13 17:00:00 2016' %x \u5f53\u5730\u5f53\u524d\u65e5\u671f '01/13/16' %X \u5f53\u5730\u5f53\u524d\u65f6\u95f4 '17:00:00' %% \u4e00\u4e2a % '%'","title":"\u683c\u5f0f\u5316\u548c\u89e3\u6790"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.4.datetime.html#_8","text":"\u5728 datetime \u4e2d\uff0c\u65f6\u533a\u7531 tzinfo \u7684\u5b50\u7c7b\u8868\u793a\u3002\u7531\u4e8e tzinfo \u662f\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\uff0c\u56e0\u6b64\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b\u3002\u4e3a\u4e86\u8ba9\u8fd9\u4e2a\u7c7b\u80fd\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u8981\u4e3a\u4e00\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u9002\u5f53\u7684\u5b9e\u73b0\u3002 \u5728 timezone \u7c7b\u4e2d\uff0c datetime \u786e\u5b9e\u5305\u542b\u4e86\u4e00\u4e2a\u7565\u4e3a\u7b80\u5355\u7684\u5b9e\u73b0\u3002\u5b83\u4f7f\u7528 UTC \u7684\u56fa\u5b9a\u504f\u79fb\u91cf\uff0c\u5e76\u4e14\u4e0d\u652f\u6301\u4e00\u5e74\u4e2d\u4e0d\u540c\u65e5\u671f\u7684\u4e0d\u540c\u504f\u79fb\u91cf\u3002\u6bd4\u5982\uff0c\u4f7f\u7528\u590f\u4ee4\u65f6\u7684\u5730\u65b9\u6216\u8005 UTC \u7684\u504f\u79fb\u91cf\u4f1a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u5730\u65b9\u3002 min6 = datetime . timezone ( datetime . timedelta ( hours =- 6 )) plus6 = datetime . timezone ( datetime . timedelta ( hours = 6 )) d = datetime . datetime . now ( min6 ) print ( min6 , ':' , d ) print ( datetime . timezone . utc , ':' , d . astimezone ( datetime . timezone . utc )) print ( plus6 , ':' , d . astimezone ( plus6 )) # \u8f6c\u6362\u4e3a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 d_system = d . astimezone () print ( d_system . tzinfo , ' :' , d_system ) UTC-06:00 : 2020-02-03 07:11:31.756794-06:00 UTC : 2020-02-03 13:11:31.756794+00:00 UTC+06:00 : 2020-02-03 19:11:31.756794+06:00 ?D1\u00a8\u00b2\u00a1\u00c0\u00a8\u00ba\u00a1\u00c1?\u00a8\u00ba\u00a1\u00c0?? : 2020-02-03 21:11:31.756794+08:00 \u8981\u60f3\u5c06 datetime \u503c\u4ece\u4e00\u4e2a\u65f6\u533a\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u65f6\u533a\uff0c\u53ef\u4ee5\u4f7f\u7528 astimezone() \u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5728 UTC \u7684\u4e24\u8fb9\u5206\u522b\u663e\u793a\u4e86 6 \u5c0f\u65f6\u7684\u65f6\u533a\uff0c\u5e76\u4e14\u8fd8\u4f7f\u7528 datetime.timezone \u4e2d\u7684 utc \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u8003\u3002\u6700\u540e\u7684\u8f93\u51fa\u884c\u663e\u793a\u7cfb\u7edf\u65f6\u533a\u4e2d\u7684\u503c\uff0c\u8be5\u503c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 astimezone() \u51fd\u6570\u83b7\u5f97\uff0c\u8c03\u7528\u65f6\u4e0d\u9700\u8981\u53c2\u6570\u3002","title":"\u65f6\u533a"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.5.calendar.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) import calendar from Toolkit.Help import Help as H h = H ( calendar ) d = h . dicts c = calendar . TextCalendar ( calendar . SUNDAY ) c . prmonth ( 2017 , 7 ) H ( calendar . TextCalendar ) . param d = h . dicts module July 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class","title":"8.5.calendar"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html","text":"import urllib Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.05 \u5728 Python 2 \u4e2d\uff0c\u6709 urllib \u548c urllib2 \u4e24\u4e2a\u5e93\u6765\u5b9e\u73b0\u8bf7\u6c42\u7684\u53d1\u9001\u3002\u800c\u5728 Python 3 \u4e2d\uff0c\u5df2\u7ecf\u4e0d\u5b58\u5728 urllib2 \u8fd9\u4e2a\u5e93\u4e86\uff0c\u7edf\u4e00\u4e3a urllib\uff0c\u5176\u5b98\u65b9\u6587\u6863\u94fe\u63a5\u4e3a https://docs.python.org/3/library/urllib.html \u3002 urllib \u5e93\u662f Python \u5185\u7f6e\u7684 HTTP \u8bf7\u6c42\u5e93\uff0c\u5b83\u5305\u542b\u5982\u4e0b 4 \u4e2a\u6a21\u5757\uff1a request \uff1a\u5b83\u662f\u6700\u57fa\u672c\u7684 HTTP \u8bf7\u6c42\u6a21\u5757\uff0c\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u53d1\u9001\u8bf7\u6c42\u3002\u5c31\u50cf\u5728\u6d4f\u89c8\u5668\u91cc\u8f93\u5165\u7f51\u5740\u7136\u540e\u56de\u8f66\u4e00\u6837\uff0c\u53ea\u9700\u8981\u7ed9\u5e93\u65b9\u6cd5\u4f20\u5165 URL \u4ee5\u53ca\u989d\u5916\u7684\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u4e86\u3002 error \uff1a\u5f02\u5e38\u5904\u7406\u6a21\u5757\uff0c\u5982\u679c\u51fa\u73b0\u8bf7\u6c42\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\uff0c\u7136\u540e\u8fdb\u884c\u91cd\u8bd5\u6216\u5176\u4ed6\u64cd\u4f5c\u4ee5\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u610f\u5916\u7ec8\u6b62\u3002 parse \uff1a\u4e00\u4e2a\u5de5\u5177\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a URL \u5904\u7406\u65b9\u6cd5\uff0c\u6bd4\u5982\u62c6\u5206\u3001\u89e3\u6790\u3001\u5408\u5e76\u7b49\u3002 robotparser \uff1a\u4e3b\u8981\u662f\u7528\u6765\u8bc6\u522b\u7f51\u7ad9\u7684 robots.txt \u6587\u4ef6\uff0c\u7136\u540e\u5224\u65ad\u54ea\u4e9b\u7f51\u7ad9\u53ef\u4ee5\u722c\uff0c\u54ea\u4e9b\u7f51\u7ad9\u4e0d\u53ef\u4ee5\u722c\uff0c\u7528\u5f97\u6bd4\u8f83\u5c11\u3002 request \u6a21\u5757 hurllib.request \u6a21\u5757\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6784\u9020 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u8fc7\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5e26\u6709\u5904\u7406\u6388\u6743\u9a8c\u8bc1\uff08authentication\uff09\u3001\u91cd\u5b9a\u5411\uff08redirection)\u3001\u6d4f\u89c8\u5668 Cookies \u4ee5\u53ca\u5176\u4ed6\u5185\u5bb9\u3002 urlopen urllib . request . urlopen ( url , data = None , [ timeout ,] * , cafile = None , capath = None , cadefault = False ) # data \u9644\u52a0\u6570\u636e # timeout \u8d85\u65f6\u65f6\u95f4 # context \u5fc5\u987b\u662f ssl.SSLContext \u7c7b\u578b\uff0c\u7528\u6765\u6307\u5b9a SSL \u8bbe\u7f6e # cafile \u548c capath \u5206\u522b\u6307\u5b9a CA \u8bc1\u4e66\u548c\u5b83\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u5728\u8bf7\u6c42 HTTPS \u94fe\u63a5\u65f6\u4f1a\u6709\u7528 # cadefault \u73b0\u5728\u5df2\u7ecf\u5f03\u7528\u4e86\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a False \u4f8b\u5982\uff0c\u8981\u8bf7\u6c42 Python \u5b98\u7f51\uff1a import urllib.request url = 'https://www.python.org' # response\u662f\u4e00\u4e2a HTTPResposne \u7c7b\u578b\u7684\u5bf9\u8c61 response = urllib . request . urlopen ( url = url ) # \u8bfb\u5165\u7f51\u9875\u5185\u5bb9 \u8fd9\u662f\u4e00\u4e2abytes\u5b57\u7b26\u4e32 response . read () # \u54cd\u5e94\u7684\u72b6\u6001\u7801 response . status # \u54cd\u5e94\u7684\u72b6\u6001\u4fe1\u606f response . reason # \u54cd\u5e94\u7684\u5934\u4fe1\u606f response . getheaders () # \u83b7\u53d6\u54cd\u5e94\u7684\u5934\u4fe1\u606f\u7684\u67d0\u4e2a\u53c2\u6570 response . getheader ( 'Server' ) 'nginx' \u4e3b\u8981\u5305\u542b readinto\u3001fileno \u7b49\u65b9\u6cd5\uff0c\u4ee5\u53ca msg\u3001version\u3001debuglevel\u3001closed \u7b49\u5c5e\u6027\u3002 data \u53c2\u6570 \u5982\u679c\u8981\u6dfb\u52a0 data \u53c2\u6570\uff0c\u9700\u8981\u4f7f\u7528 bytes \u65b9\u6cd5\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5b57\u8282\u6d41\u7f16\u7801\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u5373 bytes \u7c7b\u578b\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f20\u9012\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf7\u6c42\u65b9\u5f0f\u5c31\u4e0d\u518d\u662f GET \u65b9\u5f0f\uff0c\u800c\u662f POST \u65b9\u5f0f\u3002 # import urllib.parse import urllib.request # \u4f7f\u7528\u4e86 bytes \u65b9\u6cd5\u7f16\u7801\u6210\u5b57\u8282\u6d41 # data = bytes(urllib.parse.urlencode({'word': 'hello'}), encoding='utf8') data = bytes ( \"word=hello\" , encoding = \"utf-8\" ) response = urllib . request . urlopen ( 'http://httpbin.org/post' , data = data ) print ( response . read () . decode ( \"utf-8\" )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"word\": \"hello\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"10\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.7\", \"X-Amzn-Trace-Id\": \"Root=1-5e89900b-e9bf3454905bafbadf6d7311\" }, \"json\": null, \"origin\": \"47.240.21.73\", \"url\": \"http://httpbin.org/post\" } \u8bf7\u6c42\u7684 URL \u4e3a\uff1a http://httpbin.org/post \uff0c\u8fd9\u4e2a\u94fe\u63a5\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5 POST \u8bf7\u6c42\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa Request \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5176\u4e2d\u5c31\u5305\u542b\u4f20\u9012\u7684 data \u53c2\u6570\u3002 \u6211\u4eec\u4f20\u9012\u7684\u53c2\u6570\u51fa\u73b0\u5728\u4e86 form \u5b57\u6bb5\u4e2d\uff0c\u8fd9\u8868\u660e\u662f\u6a21\u62df\u4e86\u8868\u5355\u63d0\u4ea4\u7684\u65b9\u5f0f\uff0c\u4ee5 POST \u65b9\u5f0f\u4f20\u8f93\u6570\u636e\u3002 timeout \u53c2\u6570 timeout \u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u610f\u601d\u5c31\u662f\u5982\u679c\u8bf7\u6c42\u8d85\u51fa\u4e86\u8bbe\u7f6e\u7684\u8fd9\u4e2a\u65f6\u95f4\uff0c\u8fd8\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\uff0c\u5c31\u4f1a\u629b\u51fa URLError \u5f02\u5e38\uff0cURLError \u5f02\u5e38\u5c5e\u4e8e urllib.error \u6a21\u5757\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u8be5\u53c2\u6570\uff0c\u5c31\u4f1a\u4f7f\u7528\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u3002\u5b83\u652f\u6301 HTTP\u3001HTTPS\u3001FTP \u8bf7\u6c42\u3002 import urllib.request # 1\u79d2\u5185\u5f97\u5230\u54cd\u5e94\uff0c\u5219\u4e0d\u4f1a\u629b\u51faURLError \u5f02\u5e38 try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 1 ) print ( response . read () . decode ( \"utf-8\" )) except : print ( 'TIME OUT' ) { \"args\": {}, \"headers\": { \"Accept-Encoding\": \"identity\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.7\", \"X-Amzn-Trace-Id\": \"Root=1-5e89900c-e29de7835a97edcf0f16f5f7\" }, \"origin\": \"47.240.21.73\", \"url\": \"http://httpbin.org/get\" } \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u6765\u63a7\u5236\u4e00\u4e2a\u7f51\u9875\u5982\u679c\u957f\u65f6\u95f4\u672a\u54cd\u5e94\uff0c\u5c31\u8df3\u8fc7\u5b83\u7684\u6293\u53d6\u3002 # need to fix. output should be 'TIME OUT 1' import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 0.1 ) except urllib . error . URLError as e : if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT 1' ) except Exception : print ( 'TIME OUT 2' ) TIME OUT 2 \u4e00\u822c\u6765\u8bf4\uff0c0.1 \u79d2\u5185\u57fa\u672c\u4e0d\u53ef\u80fd\u5f97\u5230\u670d\u52a1\u5668\u54cd\u5e94\uff0c\u56e0\u6b64\u8f93\u51fa\u4e86 TIME OUT \u7684\u63d0\u793a\u3002 Request \u5229\u7528 urlopen \u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6700\u57fa\u672c\u8bf7\u6c42\u7684\u53d1\u8d77\uff0c\u4f46\u8fd9\u51e0\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u5e76\u4e0d\u8db3\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\u3002\u5982\u679c\u8bf7\u6c42\u4e2d\u9700\u8981\u52a0\u5165 Headers \u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u5229\u7528\u66f4\u5f3a\u5927\u7684 Request \u7c7b\u6765\u6784\u5efa\u3002 import urllib.request request = urllib . request . Request ( 'https://python.org' ) response = urllib . request . urlopen ( request ) print ( response . read () . decode ( 'utf-8' )) < ! doctype html > < ! --[if lt IE 7]> <html class=\"no-js ie6 lt-ie7 lt-ie8 lt-ie9\"> < ! [ endif ] --> < ! --[if IE 7]> <html class=\"no-js ie7 lt-ie8 lt-ie9\"> < ! [ endif ] --> < ! --[if IE 8]> <html class=\"no-js ie8 lt-ie9\"> < ! [ endif ] --> < ! --[if gt IE 8]><!--><html class=\"no-js\" . . . 0 be1d290 . js \" charset=\" utf - 8 \" ></ script > < ! [ endif ] --> </ body > </ html > \u4f9d\u7136\u662f\u7528 urlopen \u65b9\u6cd5\u6765\u53d1\u9001\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u4e0d\u518d\u662f URL\uff0c\u800c\u662f\u4e00\u4e2a Request \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u901a\u8fc7\u6784\u9020\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u65b9\u9762\u6211\u4eec\u53ef\u4ee5\u5c06\u8bf7\u6c42\u72ec\u7acb\u6210\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u66f4\u52a0\u4e30\u5bcc\u548c\u7075\u6d3b\u5730\u914d\u7f6e\u53c2\u6570\u3002 Request \u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a class urllib . request . Request ( url , data = None , headers = {}, origin_req_host = None , unverifiable = False , method = None ) url \uff1a\u7528\u4e8e\u8bf7\u6c42 URL\uff0c\u8fd9\u662f\u5fc5\u4f20\u53c2\u6570\uff0c\u5176\u4ed6\u90fd\u662f\u53ef\u9009\u53c2\u6570\u3002 data \uff1abytes\uff08\u5b57\u8282\u6d41\uff09\u7c7b\u578b\u3002\u5982\u679c\u5b83\u662f\u5b57\u5178\uff0c\u53ef\u4ee5\u5148\u7528 urllib.parse \u6a21\u5757\u91cc\u7684 urlencode() \u7f16\u7801\u3002 headers \uff1a\u5b83\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4e5f\u5c31\u662f\u8bf7\u6c42\u5934\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6784\u9020\u8bf7\u6c42\u65f6\u901a\u8fc7 headers \u53c2\u6570\u76f4\u63a5\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8bf7\u6c42\u5b9e\u4f8b\u7684 add_header() \u65b9\u6cd5\u6dfb\u52a0\u3002\u6dfb\u52a0\u8bf7\u6c42\u5934\u6700\u5e38\u7528\u7684\u7528\u6cd5\u5c31\u662f\u901a\u8fc7\u4fee\u6539 User-Agent \u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\uff0c\u9ed8\u8ba4\u7684 User-Agent \u662f Python-urllib\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5b83\u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\u3002\u6bd4\u5982\u8981\u4f2a\u88c5\u706b\u72d0\u6d4f\u89c8\u5668\uff0c\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\uff1a Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11 origin_req_host \uff1a\u6307\u7684\u662f\u8bf7\u6c42\u65b9\u7684 host \u540d\u79f0\u6216\u8005 IP \u5730\u5740\u3002 unverifiable \uff1a\u8868\u793a\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u662f\u65e0\u6cd5\u9a8c\u8bc1\u7684\uff0c\u9ed8\u8ba4\u662f False\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u7528\u6237\u6ca1\u6709\u8db3\u591f\u6743\u9650\u6765\u9009\u62e9\u63a5\u6536\u8fd9\u4e2a\u8bf7\u6c42\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a HTML \u6587\u6863\u4e2d\u7684\u56fe\u7247\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u81ea\u52a8\u6293\u53d6\u56fe\u50cf\u7684\u6743\u9650\uff0c\u8fd9\u65f6 unverifiable \u7684\u503c\u5c31\u662f True\u3002 method \uff1a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u6307\u793a\u8bf7\u6c42\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 GET\u3001POST \u548c PUT \u7b49\u3002 \u4e0b\u9762\u6211\u4eec\u4f20\u5165\u591a\u4e2a\u53c2\u6570\u6784\u5efa\u8bf7\u6c42\u6765\u770b\u4e00\u4e0b\uff1a from urllib import request , parse url = 'http://httpbin.org/post' headers = { 'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' , 'Host' : 'httpbin.org' } dict = { 'name' : 'Germey' } data = bytes ( parse . urlencode ( dict ), encoding = 'utf8' ) # data = b'name=Germey' req = request . Request ( url = url , data = data , headers = headers , method = 'POST' ) response = request . urlopen ( req ) print ( response . read () . decode ( 'utf-8' )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"name\": \"Germey\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"11\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\", \"X-Amzn-Trace-Id\": \"Root=1-5e89900f-c9abba36385912b6c6495750\" }, \"json\": null, \"origin\": \"47.240.21.73\", \"url\": \"http://httpbin.org/post\" } \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 4 \u4e2a\u53c2\u6570\u6784\u9020\u4e86\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u4e2d url \u5373\u8bf7\u6c42 URL\uff0cheaders \u4e2d\u6307\u5b9a\u4e86 User-Agent \u548c Host\uff0c\u53c2\u6570 data \u7528 urlencode \u548c bytes \u65b9\u6cd5\u8f6c\u6210\u5b57\u8282\u6d41\u3002\u53e6\u5916\uff0c\u6307\u5b9a\u4e86\u8bf7\u6c42\u65b9\u5f0f\u4e3a POST\u3002 \u89c2\u5bdf\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u6210\u529f\u8bbe\u7f6e\u4e86 data\u3001headers \u548c method\u3002 \u53e6\u5916\uff0cheaders \u4e5f\u53ef\u4ee5\u7528 add_header \u65b9\u6cd5\u6765\u6dfb\u52a0\uff1a req = request . Request ( url = url , data = data , method = 'POST' ) req . add_header ( 'User-Agent' , 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' ) Handler \u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u867d\u7136\u53ef\u4ee5\u6784\u9020\u8bf7\u6c42\uff0c\u4f46\u5982\u679c\u8981\u5904\u7406\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 Cookies \u5904\u7406\u3001\u4ee3\u7406\u8bbe\u7f6e\u7b49\uff09\uff0c\u5219\u9700\u8981 Handler \u3002\u6211\u4eec\u53ef\u4ee5\u628a Handler \u7406\u89e3\u4e3a\u5404\u79cd\u5904\u7406\u5668\uff0c\u6709\u4e13\u95e8\u5904\u7406\u767b\u5f55\u9a8c\u8bc1\u7684\uff0c\u6709\u5904\u7406 Cookies \u7684\uff0c\u6709\u5904\u7406\u4ee3\u7406\u8bbe\u7f6e\u7684\u3002\u5229\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u505a\u5230 HTTP \u8bf7\u6c42\u4e2d\u6240\u6709\u7684\u4e8b\u60c5\u3002 urllib.request \u6a21\u5757\u91cc\u7684 BaseHandler \u7c7b\u662f\u6240\u6709\u5176\u4ed6 Handler \u7684\u7236\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 default_open\u3001protocol_request \u7b49\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u6709\u5404\u79cd Handler \u5b50\u7c7b\u7ee7\u627f\u8fd9\u4e2a BaseHandler \u7c7b\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a HTTPDefaultErrorHandler \u7528\u4e8e\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\uff0c\u9519\u8bef\u90fd\u4f1a\u629b\u51fa HTTPError \u7c7b\u578b\u7684\u5f02\u5e38\u3002 HTTPRedirectHandler \u7528\u4e8e\u5904\u7406\u91cd\u5b9a\u5411\u3002 HTTPCookieProcessor \u7528\u4e8e\u5904\u7406 Cookies\u3002 ProxyHandler \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7406\uff0c\u9ed8\u8ba4\u4ee3\u7406\u4e3a\u7a7a\u3002 HTTPPasswordMgr \u7528\u4e8e\u7ba1\u7406\u5bc6\u7801\uff0c\u5b83\u7ef4\u62a4\u4e86\u7528\u6237\u540d\u5bc6\u7801\u7684\u8868\u3002 HTTPBasicAuthHandler \u7528\u4e8e\u7ba1\u7406\u8ba4\u8bc1\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u6253\u5f00\u65f6\u9700\u8981\u8ba4\u8bc1\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5b83\u6765\u89e3\u51b3\u8ba4\u8bc1\u95ee\u9898\u3002 \u53e6\u5916\u8fd8\u6709\u5176\u4ed6\u7684 Handler \u7c7b\uff0c\u5728\u8fd9\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler \u5173\u4e8e\u600e\u4e48\u4f7f\u7528\u5b83\u4eec\uff0c\u73b0\u5728\u5148\u4e0d\u7528\u7740\u6025\uff0c\u540e\u9762\u4f1a\u6709\u5b9e\u4f8b\u6f14\u793a\u3002 \u53e6\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\u5c31\u662f OpenerDirector\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u4e3a Opener\u3002\u6211\u4eec\u4e4b\u524d\u7528\u8fc7 urlopen \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f urllib \u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u4e2a Opener\u3002 \u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 Opener \u5462\uff1f\u56e0\u4e3a\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\u3002\u4e4b\u524d\u4f7f\u7528\u7684 Request \u548c urlopen \u76f8\u5f53\u4e8e\u7c7b\u5e93\u4e3a\u4f60\u5c01\u88c5\u597d\u4e86\u6781\u5176\u5e38\u7528\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u4eec\u53ef\u4ee5\u5b8c\u6210\u57fa\u672c\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u73b0\u5728\u4e0d\u4e00\u6837\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u6df1\u5165\u4e00\u5c42\u8fdb\u884c\u914d\u7f6e\uff0c\u4f7f\u7528\u66f4\u5e95\u5c42\u7684\u5b9e\u4f8b\u6765\u5b8c\u6210\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u7528\u5230\u4e86 Opener\u3002 Opener \u53ef\u4ee5\u4f7f\u7528 open \u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u548c urlopen \u5982\u51fa\u4e00\u8f99\u3002\u90a3\u4e48\uff0c\u5b83\u548c Handler \u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u5229\u7528 Handler \u6765\u6784\u5efa Opener\u3002 \u4e0b\u9762\u7528\u51e0\u4e2a\u5b9e\u4f8b\u6765\u770b\u770b\u5b83\u4eec\u7684\u7528\u6cd5\u3002 \u9a8c\u8bc1 \u6709\u4e9b\u7f51\u7ad9\u5728\u6253\u5f00\u65f6\u5c31\u4f1a\u5f39\u51fa\u63d0\u793a\u6846\uff0c\u76f4\u63a5\u63d0\u793a\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u80fd\u67e5\u770b\u9875\u9762\uff0c\u5982\u56fe\u6240\u793a\uff1a HTTPBasicAuthHandler \u5c31\u53ef\u4ee5\u8bf7\u6c42\u8fd9\u6837\u7684\u9875\u9762\uff1a from urllib.request import ( HTTPPasswordMgrWithDefaultRealm , HTTPBasicAuthHandler , build_opener ) from urllib.error import URLError username = 'name' password = '12345678' url = 'https://httpbin.org/basic-auth/name/12345678' p = HTTPPasswordMgrWithDefaultRealm () p . add_password ( None , url , username , password ) auth_handler = HTTPBasicAuthHandler ( p ) opener = build_opener ( auth_handler ) try : result = opener . open ( url ) html = result . read () . decode ( 'utf-8' ) print ( html ) except URLError as e : print ( e . reason ) { \"authenticated\": true, \"user\": \"name\" } \u8fd9\u91cc\u9996\u5148\u5b9e\u4f8b\u5316 HTTPBasicAuthHandler \u5bf9\u8c61\uff0c\u5176\u53c2\u6570\u662f HTTPPasswordMgrWithDefaultRealm \u5bf9\u8c61\uff0c\u5b83\u5229\u7528 add_password \u65b9\u6cd5\u6dfb\u52a0\u8fdb\u53bb\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u8fd9\u6837\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u5904\u7406\u9a8c\u8bc1\u7684 Handler\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u5e76\u4f7f\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u4e00\u4e2a Opener\uff0c\u8fd9\u4e2a Opener \u5728\u53d1\u9001\u8bf7\u6c42\u65f6\u5c31\u76f8\u5f53\u4e8e\u5df2\u7ecf\u9a8c\u8bc1\u6210\u529f\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528 Opener \u7684 open \u65b9\u6cd5\u6253\u5f00\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u9a8c\u8bc1\u4e86\u3002\u8fd9\u91cc\u83b7\u53d6\u5230\u7684\u7ed3\u679c\u5c31\u662f\u9a8c\u8bc1\u540e\u7684\u9875\u9762\u6e90\u7801\u5185\u5bb9\u3002 \u4ee3\u7406 \u5728\u505a\u722c\u866b\u7684\u65f6\u5019\uff0c\u514d\u4e0d\u4e86\u8981\u4f7f\u7528\u4ee3\u7406\uff0c\u5982\u679c\u8981\u6dfb\u52a0\u4ee3\u7406\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a from urllib.error import URLError from urllib.request import ProxyHandler , build_opener proxy_handler = ProxyHandler ({ 'http' : 'http://127.0.0.1:9743' , 'https' : 'https://127.0.0.1:9743' }) opener = build_opener ( proxy_handler ) try : response = opener . open ( 'https://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) except URLError as e : print ( e . reason ) [WinError 10061] \u7531\u4e8e\u76ee\u6807\u8ba1\u7b97\u673a\u79ef\u6781\u62d2\u7edd\uff0c\u65e0\u6cd5\u8fde\u63a5\u3002 \u8fd9\u91cc\u6211\u4eec\u5728\u672c\u5730\u642d\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7406\uff0c\u5b83\u8fd0\u884c\u5728 9743 \u7aef\u53e3\u4e0a\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86 ProxyHandler\uff0c\u5176\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u540d\u662f\u534f\u8bae\u7c7b\u578b\uff08\u6bd4\u5982 HTTP \u6216\u8005 HTTPS \u7b49\uff09\uff0c\u952e\u503c\u662f\u4ee3\u7406\u94fe\u63a5\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u4ee3\u7406\u3002 \u7136\u540e\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u53ca build_opener \u65b9\u6cd5\u6784\u9020\u4e00\u4e2a Opener\uff0c\u4e4b\u540e\u53d1\u9001\u8bf7\u6c42\u5373\u53ef\u3002 Cookies \u83b7\u53d6\u7f51\u7ad9\u7684 Cookies\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a CookieJar \u5bf9\u8c61\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u9700\u8981\u5229\u7528 HTTPCookieProcessor \u6765\u6784\u5efa\u4e00\u4e2a Handler\uff0c\u6700\u540e\u5229\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u51fa Opener\uff0c\u6267\u884c open \u51fd\u6570\u5373\u53ef\u3002 import http.cookiejar , urllib.request cookie = http . cookiejar . CookieJar () handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) for item in cookie : print ( item . name + \"=\" + item . value ) BAIDUID=90D729D96CB91305A6D7948F01D31C3E:FG=1 BIDUPSID=90D729D96CB913059EC2400548332001 H_PS_PSSID=30971_1429_31121_21101_30825_31187_30823_31163 PSTM=1586073620 BDSVRTM=0 BD_HOME=1 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8f93\u51fa\u4e86\u6bcf\u6761 Cookie \u7684\u540d\u79f0\u548c\u503c\u3002 \u4e0d\u8fc7\u65e2\u7136\u80fd\u8f93\u51fa\uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u8f93\u51fa\u6210\u6587\u4ef6\u683c\u5f0f\u5462\uff1f\u6211\u4eec\u77e5\u9053 Cookies \u5b9e\u9645\u4e0a\u4e5f\u662f\u4ee5\u6587\u672c\u5f62\u5f0f\u4fdd\u5b58\u7684\u3002 \u7b54\u6848\u5f53\u7136\u662f\u80af\u5b9a\u7684\uff0c\u8fd9\u91cc\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u4f8b\u6765\u770b\u770b\uff1a filename = 'cookies.txt' cookie = http . cookiejar . MozillaCookieJar ( filename ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) cookie . save ( ignore_discard = True , ignore_expires = True ) \u8fd9\u65f6 CookieJar \u5c31\u9700\u8981\u6362\u6210 MozillaCookieJar\uff0c\u5b83\u5728\u751f\u6210\u6587\u4ef6\u65f6\u4f1a\u7528\u5230\uff0c\u662f CookieJar \u7684\u5b50\u7c7b\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406 Cookies \u548c\u6587\u4ef6\u76f8\u5173\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u53ef\u4ee5\u5c06 Cookies \u4fdd\u5b58\u6210 Mozilla \u578b\u6d4f\u89c8\u5668\u7684 Cookies \u683c\u5f0f\u3002 \u8fd0\u884c\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u751f\u6210\u4e86\u4e00\u4e2a cookies.txt \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a # Netscape HTTP Cookie File # http : // curl . haxx . se / rfc / cookie_spec . html # This is a generated file ! Do not edit . . baidu . com TRUE / FALSE 3622386254 BAIDUID 05 AE39B5F56C1DEC474325CDA522D44F : FG = 1 . baidu . com TRUE / FALSE 3622386254 BIDUPSID 05 AE39B5F56C1DEC474325CDA522D44F . baidu . com TRUE / FALSE H_PS_PSSID 19638 _1453_17710_18240_21091_18560_17001_ 21191 _21161 . baidu . com TRUE / FALSE 3622386254 PSTM 1474902606 www . baidu . com FALSE / FALSE BDSVRTM 0 www . baidu . com FALSE / FALSE BD_HOME 0 \u53e6\u5916\uff0cLWPCookieJar \u540c\u6837\u53ef\u4ee5\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u4f46\u662f\u4fdd\u5b58\u7684\u683c\u5f0f\u548c MozillaCookieJar \u4e0d\u4e00\u6837\uff0c\u5b83\u4f1a\u4fdd\u5b58\u6210 libwww-perl(LWP) \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\u3002 \u8981\u4fdd\u5b58\u6210 LWP \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u5c31\u6539\u4e3a\uff1a cookie = http . cookiejar . LWPCookieJar ( filename ) \u6b64\u65f6\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a #LWP-Cookies-2.0 Set-Cookie3: BAIDUID=\"0CE9C56F598E69DB375B7C294AE5C591:FG=1\"; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BIDUPSID=0CE9C56F598E69DB375B7C294AE5C591; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: H_PS_PSSID=20048_1448_18240_17944_21089_21192_21161_20929; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; discard; version=0 Set-Cookie3: PSTM=1474902671; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BDSVRTM=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 Set-Cookie3: BD_HOME=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 \u7531\u6b64\u770b\u6765\uff0c\u751f\u6210\u7684\u683c\u5f0f\u8fd8\u662f\u6709\u6bd4\u8f83\u5927\u5dee\u5f02\u7684\u3002 \u90a3\u4e48\uff0c\u751f\u6210\u4e86 Cookies \u6587\u4ef6\u540e\uff0c\u600e\u6837\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5e76\u5229\u7528\u5462\uff1f \u4e0b\u9762\u6211\u4eec\u4ee5 LWPCookieJar \u683c\u5f0f\u4e3a\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a cookie = http . cookiejar . LWPCookieJar () cookie . load ( 'cookies.txt' , ignore_discard = True , ignore_expires = True ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8c03\u7528 load \u65b9\u6cd5\u6765\u8bfb\u53d6\u672c\u5730\u7684 Cookies \u6587\u4ef6\uff0c\u83b7\u53d6\u5230\u4e86 Cookies \u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\u524d\u63d0\u662f\u6211\u4eec\u9996\u5148\u751f\u6210\u4e86 LWPCookieJar \u683c\u5f0f\u7684 Cookies\uff0c\u5e76\u4fdd\u5b58\u6210\u6587\u4ef6\uff0c\u7136\u540e\u8bfb\u53d6 Cookies \u4e4b\u540e\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u6784\u5efa Handler \u548c Opener \u5373\u53ef\u5b8c\u6210\u64cd\u4f5c\u3002 \u8fd0\u884c\u7ed3\u679c\u6b63\u5e38\u7684\u8bdd\uff0c\u4f1a\u8f93\u51fa\u767e\u5ea6\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7edd\u5927\u591a\u6570\u8bf7\u6c42\u529f\u80fd\u7684\u8bbe\u7f6e\u4e86\u3002 \u8fd9\u4fbf\u662f urllib \u5e93\u4e2d request \u6a21\u5757\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u5982\u679c\u60f3\u5b9e\u73b0\u66f4\u591a\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u660e\uff1a https://docs.python.org/3/library/urllib.request.html#basehandler-objects \u3002 \u5904\u7406\u5f02\u5e38 urllib \u7684 error \u6a21\u5757\u5b9a\u4e49\u4e86\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0crequest \u6a21\u5757\u4fbf\u4f1a\u629b\u51fa error \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5f02\u5e38\u3002error \u6a21\u5757\u5b9a\u4e49\u4e86\u4e09\u79cd\u5f02\u5e38: ['ContentTooShortError', 'HTTPError', 'URLError'] URLError URLError \u7c7b\u6765\u81ea urllib \u5e93\u7684 error \u6a21\u5757\uff0c\u5b83\u7ee7\u627f\u81ea OSError \u7c7b\uff0c\u662f error \u5f02\u5e38\u6a21\u5757\u7684\u57fa\u7c7b\uff0c\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u90fd\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u8fd9\u4e2a\u7c7b\u6765\u5904\u7406\u3002 \u5b83\u5177\u6709\u4e00\u4e2a\u5c5e\u6027 reason\uff0c\u5373\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 from urllib import request , error try : # \u8bf7\u6c42\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7f51\u9875 response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . URLError as e : print ( e . reason ) Not Found HTTPError \u5b83\u662f URLError \u7684\u5b50\u7c7b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406 HTTP \u8bf7\u6c42\u9519\u8bef\uff0c\u6bd4\u5982\u8ba4\u8bc1\u8bf7\u6c42\u5931\u8d25\u7b49\u3002\u5b83\u6709\u5982\u4e0b 3 \u4e2a\u5c5e\u6027\u3002 code\uff1a\u8fd4\u56de HTTP \u72b6\u6001\u7801\uff0c\u6bd4\u5982 404 \u8868\u793a\u7f51\u9875\u4e0d\u5b58\u5728\uff0c500 \u8868\u793a\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7b49\u3002 reason\uff1a\u540c\u7236\u7c7b\u4e00\u6837\uff0c\u7528\u4e8e\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 headers\uff1a\u8fd4\u56de\u8bf7\u6c42\u5934\u3002 from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sun, 05 Apr 2020 08:00:21 GMT Content-Type: text / html ; charset = UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=a9qontd6vq2sdjsjbvql90qiq0; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u4f9d\u7136\u662f\u540c\u6837\u7684\u7f51\u5740\uff0c\u8fd9\u91cc\u6355\u83b7\u4e86 HTTPError \u5f02\u5e38\uff0c\u8f93\u51fa\u4e86 reason\u3001code \u548c headers \u5c5e\u6027\u3002 \u56e0\u4e3a URLError \u662f HTTPError \u7684\u7236\u7c7b\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u9009\u62e9\u6355\u83b7\u5b50\u7c7b\u7684\u9519\u8bef\uff0c\u518d\u53bb\u6355\u83b7\u7236\u7c7b\u7684\u9519\u8bef\uff0c\u6240\u4ee5\u4e0a\u8ff0\u4ee3\u7801\u66f4\u597d\u7684\u5199\u6cd5\u5982\u4e0b\uff1a from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) except error . URLError as e : print ( e . reason ) else : print ( 'Request Successfully' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sun, 05 Apr 2020 08:00:21 GMT Content-Type: text / html ; charset = UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=soesm72j68a3251otggm3smjp1; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5148\u6355\u83b7 HTTPError \uff0c\u83b7\u53d6\u5b83\u7684\u9519\u8bef\u72b6\u6001\u7801\u3001\u539f\u56e0\u3001headers \u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e0d\u662f HTTPError \u5f02\u5e38\uff0c\u5c31\u4f1a\u6355\u83b7 URLError \u5f02\u5e38\uff0c\u8f93\u51fa\u9519\u8bef\u539f\u56e0\u3002\u6700\u540e\uff0c\u7528 else \u6765\u5904\u7406\u6b63\u5e38\u7684\u903b\u8f91\u3002\u8fd9\u662f\u4e00\u4e2a\u8f83\u597d\u7684\u5f02\u5e38\u5904\u7406\u5199\u6cd5\u3002 \u6709\u65f6\u5019\uff0creason \u5c5e\u6027\u8fd4\u56de\u7684\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u518d\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'https://www.baidu.com' , timeout = 0.01 ) except urllib . error . URLError as e : print ( type ( e . reason )) if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT' ) <class 'socket.timeout'> TIME OUT \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u6765\u5f3a\u5236\u629b\u51fa timeout \u5f02\u5e38\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0creason \u5c5e\u6027\u7684\u7ed3\u679c\u662f socket.timeout \u7c7b\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528 isinstance \u65b9\u6cd5\u6765\u5224\u65ad\u5b83\u7684\u7c7b\u578b\uff0c\u4f5c\u51fa\u66f4\u8be6\u7ec6\u7684\u5f02\u5e38\u5224\u65ad\u3002 \u89e3\u6790\u94fe\u63a5 urllib \u5e93\u7684 parse \u6a21\u5757\uff0c\u5b83\u5b9a\u4e49\u4e86\u5904\u7406 URL \u7684\u6807\u51c6\u63a5\u53e3\uff0c\u4f8b\u5982\u5b9e\u73b0 URL \u5404\u90e8\u5206\u7684\u62bd\u53d6\u3001\u5408\u5e76\u4ee5\u53ca\u94fe\u63a5\u8f6c\u6362\u3002\u5b83\u652f\u6301\u5982\u4e0b\u534f\u8bae\u7684 URL \u5904\u7406\uff1afile\u3001ftp\u3001gopher\u3001hdl\u3001http\u3001https\u3001imap\u3001mailto\u3001 mms\u3001news\u3001nntp\u3001prospero\u3001rsync\u3001rtsp\u3001rtspu\u3001sftp\u3001 sip\u3001sips\u3001snews\u3001svn\u3001svn+ssh\u3001telnet \u548c wais\u3002 urlparse \u8be5\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0 URL \u7684\u8bc6\u522b\u548c\u5206\u6bb5\uff1a urllib . parse . urlparse ( urlstring , scheme = '' , allow_fragments = True ) urlstring \uff1a\u5f85\u89e3\u6790\u7684 URL scheme \uff1a\u5b83\u662f\u9ed8\u8ba4\u7684\u534f\u8bae\uff08\u6bd4\u5982 http \u6216 https \u7b49\uff09\u3002 scheme \u53c2\u6570\u53ea\u6709\u5728 urlstring \u4e2d\u4e0d\u5305\u542b scheme \u4fe1\u606f\u65f6\u624d\u751f\u6548\u3002 allow_fragments \uff1a\u662f\u5426\u5ffd\u7565 fragment\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a False\uff0cfragment \u90e8\u5206\u5c31\u4f1a\u88ab\u5ffd\u7565\uff0c\u5b83\u4f1a\u88ab\u89e3\u6790\u4e3a path\u3001parameters \u6216\u8005 query \u7684\u4e00\u90e8\u5206\uff0c\u800c fragment \u90e8\u5206\u4e3a\u7a7a\u3002\u5f53 URL \u4e2d\u4e0d\u5305\u542b params \u548c query \u65f6\uff0cfragment \u4fbf\u4f1a\u88ab\u89e3\u6790\u4e3a path \u7684\u4e00\u90e8\u5206 \u4f8b\u5b50\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( type ( result ), result ) <class 'urllib.parse.ParseResult'> ParseResult(scheme='http', netloc='www.baidu.com', path='/index.html', params='user', query='id=5', fragment='comment') \u53ef\u4ee5\u770b\u5230\uff0c\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a ParseResult \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u5305\u542b 6 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f scheme\u3001netloc\u3001path\u3001params\u3001query \u548c fragment\u3002 \u89c2\u5bdf\u4e00\u4e0b\u8be5\u5b9e\u4f8b\u7684 URL\uff1a http://www.baidu.com/index.html;user?id=5#comment \u53ef\u4ee5\u53d1\u73b0\uff0curlparse \u65b9\u6cd5\u5c06\u5176\u62c6\u5206\u6210\u4e86 6 \u4e2a\u90e8\u5206\u3002\u5927\u4f53\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u89e3\u6790\u65f6\u6709\u7279\u5b9a\u7684\u5206\u9694\u7b26\u3002\u6bd4\u5982\uff0c:// \u524d\u9762\u7684\u5c31\u662f scheme\uff0c\u4ee3\u8868\u534f\u8bae\uff1b\u7b2c\u4e00\u4e2a / \u7b26\u53f7\u524d\u9762\u4fbf\u662f netloc\uff0c\u5373\u57df\u540d\uff0c\u540e\u9762\u662f path\uff0c\u5373\u8bbf\u95ee\u8def\u5f84\uff1b\u5206\u53f7\uff1b\u540e\u9762\u662f params\uff0c\u4ee3\u8868\u53c2\u6570\uff1b\u95ee\u53f7\uff1f\u540e\u9762\u662f\u67e5\u8be2\u6761\u4ef6 query\uff0c\u4e00\u822c\u7528\u4f5c GET \u7c7b\u578b\u7684 URL\uff1b\u4e95\u53f7 #\u540e\u9762\u662f\u951a\u70b9\uff0c\u7528\u4e8e\u76f4\u63a5\u5b9a\u4f4d\u9875\u9762\u5185\u90e8\u7684\u4e0b\u62c9\u4f4d\u7f6e\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u6807\u51c6\u7684\u94fe\u63a5\u683c\u5f0f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a scheme://netloc/path;params?query#fragment \u4e00\u4e2a\u6807\u51c6\u7684 URL \u90fd\u4f1a\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\uff0c\u5229\u7528 urlparse \u65b9\u6cd5\u53ef\u4ee5\u5c06\u5b83\u62c6\u5206\u5f00\u6765\u3002 \u8fd4\u56de\u7ed3\u679c ParseResult \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7d22\u5f15\u987a\u5e8f\u6765\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u7528\u5c5e\u6027\u540d\u83b7\u53d6\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html#comment' , allow_fragments = False ) print ( result . scheme , result [ 0 ], result . netloc , result [ 1 ], sep = ' \\n ' ) http http www.baidu.com www.baidu.com urlunparse \u6709\u4e86 urlparse \u65b9\u6cd5\uff0c\u76f8\u5e94\u5730\u5c31\u6709\u4e86\u5b83\u7684\u5bf9\u7acb\u65b9\u6cd5 urlunparse \u3002\u5b83\u63a5\u53d7\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u7684\u957f\u5ea6\u5fc5\u987b\u662f 6\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u53c2\u6570\u6570\u91cf\u4e0d\u8db3\u6216\u8005\u8fc7\u591a\u7684\u95ee\u9898\u3002 from urllib.parse import urlunparse data = [ 'http' , 'www.baidu.com' , 'index.html' , 'user' , 'a=6' , 'comment' ] print ( urlunparse ( data )) http://www.baidu.com/index.html;user?a=6#comment \u8fd9\u91cc\u53c2\u6570 data \u7528\u4e86\u5217\u8868\u7c7b\u578b\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\uff0c\u6bd4\u5982\u5143\u7ec4\u6216\u8005\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u3002 urlsplit \u8fd9\u4e2a\u65b9\u6cd5\u548c urlparse \u65b9\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4e0d\u518d\u5355\u72ec\u89e3\u6790 params \u8fd9\u4e00\u90e8\u5206\uff0c\u53ea\u8fd4\u56de 5 \u4e2a\u7ed3\u679c\u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 params \u4f1a\u5408\u5e76\u5230 path \u4e2d\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlsplit result = urlsplit ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( result ) SplitResult(scheme='http', netloc='www.baidu.com', path='/index.html;user', query='id=5', fragment='comment') \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7ed3\u679c\u662f SplitResult \uff0c\u5b83\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\uff0c\u65e2\u53ef\u4ee5\u7528\u5c5e\u6027\u83b7\u53d6\u503c\uff0c\u4e5f\u53ef\u4ee5\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u3002 urlunsplit \u4e0e urlunparse \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5b83\u4e5f\u662f\u5c06\u94fe\u63a5\u5404\u4e2a\u90e8\u5206\u7ec4\u5408\u6210\u5b8c\u6574\u94fe\u63a5\u7684\u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5143\u7ec4\u7b49\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u957f\u5ea6\u5fc5\u987b\u4e3a 5\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlunsplit data = [ 'http' , 'www.baidu.com' , 'index.html' , 'a=6' , 'comment' ] print ( urlunsplit ( data )) http://www.baidu.com/index.html?a=6#comment urljoin \u6709\u4e86 urlunparse \u548c urlunsplit \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u94fe\u63a5\u7684\u5408\u5e76\uff0c\u4e0d\u8fc7\u524d\u63d0\u5fc5\u987b\u8981\u6709\u7279\u5b9a\u957f\u5ea6\u7684\u5bf9\u8c61\uff0c\u94fe\u63a5\u7684\u6bcf\u4e00\u90e8\u5206\u90fd\u8981\u6e05\u6670\u5206\u5f00\u3002 \u6b64\u5916\uff0c\u751f\u6210\u94fe\u63a5\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f urljoin \u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a base_url\uff08\u57fa\u7840\u94fe\u63a5\uff09\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c06\u65b0\u7684\u94fe\u63a5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5206\u6790 base_url \u7684 scheme\u3001netloc \u548c path \u8fd9 3 \u4e2a\u5185\u5bb9\u5e76\u5bf9\u65b0\u94fe\u63a5\u7f3a\u5931\u7684\u90e8\u5206\u8fdb\u884c\u8865\u5145\uff0c\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u3002 from urllib.parse import urljoin print ( urljoin ( 'http://www.baidu.com' , 'FAQ.html' )) print ( urljoin ( 'http://www.baidu.com' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html?question=2' )) print ( urljoin ( 'http://www.baidu.com?wd=abc' , 'https://cuiqingcai.com/index.php' )) print ( urljoin ( 'http://www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com#comment' , '?category=2' )) http://www.baidu.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html?question=2 https://cuiqingcai.com/index.php http://www.baidu.com?category=2#comment www.baidu.com?category=2#comment www.baidu.com?category=2 \u53ef\u4ee5\u53d1\u73b0\uff0cbase_url \u63d0\u4f9b\u4e86\u4e09\u9879\u5185\u5bb9 scheme\u3001netloc \u548c path\u3002\u5982\u679c\u8fd9 3 \u9879\u5728\u65b0\u7684\u94fe\u63a5\u91cc\u4e0d\u5b58\u5728\uff0c\u5c31\u4e88\u4ee5\u8865\u5145\uff1b\u5982\u679c\u65b0\u7684\u94fe\u63a5\u5b58\u5728\uff0c\u5c31\u4f7f\u7528\u65b0\u7684\u94fe\u63a5\u7684\u90e8\u5206\u3002\u800c base_url \u4e2d\u7684 params\u3001query \u548c fragment \u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002 urlencode urlencode \u5728\u6784\u9020 GET \u8bf7\u6c42\u53c2\u6570\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlencode params = { 'name' : 'germey' , 'age' : 22 } base_url = 'http://www.baidu.com?' url = base_url + urlencode ( params ) print ( url ) http://www.baidu.com?name=germey&age=22 \u8fd9\u91cc\u9996\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u5178\u6765\u5c06\u53c2\u6570\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u8c03\u7528 urlencode \u65b9\u6cd5\u5c06\u5176\u5e8f\u5217\u5316\u4e3a GET \u8bf7\u6c42\u53c2\u6570\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u5e38\u7528\u3002\u6709\u65f6\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u6784\u9020\u53c2\u6570\uff0c\u6211\u4eec\u4f1a\u4e8b\u5148\u7528\u5b57\u5178\u6765\u8868\u793a\u3002\u8981\u8f6c\u5316\u4e3a URL \u7684\u53c2\u6570\u65f6\uff0c\u53ea\u9700\u8981\u8c03\u7528\u8be5\u65b9\u6cd5\u5373\u53ef\u3002 parse_qs \u6709\u4e86\u5e8f\u5217\u5316\uff0c\u5fc5\u7136\u5c31\u6709\u53cd\u5e8f\u5217\u5316\u3002\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e32 GET \u8bf7\u6c42\u53c2\u6570\uff0c\u5229\u7528 parse_qs \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b83\u8f6c\u56de\u5b57\u5178\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qs query = 'name=germey&amp;age=22' print ( parse_qs ( query )) {'name': ['germey'], 'age': ['22']} \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u8f6c\u56de\u4e3a\u5b57\u5178\u7c7b\u578b\u4e86\u3002 parse_qsl \u8fd8\u6709\u4e00\u4e2a parse_qsl \u65b9\u6cd5\uff0c\u5b83\u7528\u4e8e\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qsl query = 'name=germey&amp;age=22' print ( parse_qsl ( query )) [('name', 'germey'), ('age', '22')] \u53ef\u4ee5\u770b\u5230\uff0c\u8fd0\u884c\u7ed3\u679c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u503c\u3002 quote \u8be5\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5185\u5bb9\u8f6c\u5316\u4e3a URL \u7f16\u7801\u7684\u683c\u5f0f\u3002URL \u4e2d\u5e26\u6709\u4e2d\u6587\u53c2\u6570\u65f6\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e71\u7801\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e2d\u6587\u5b57\u7b26\u8f6c\u5316\u4e3a URL \u7f16\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import quote keyword = ' \u58c1\u7eb8 ' url = 'https://www.baidu.com/s?wd=' + quote ( keyword ) print ( url ) https://www.baidu.com/s?wd=%20%E5%A3%81%E7%BA%B8%20 unquote \u6709\u4e86 quote \u65b9\u6cd5\uff0c\u5f53\u7136\u8fd8\u6709 unquote \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c URL \u89e3\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import unquote url = 'https://www.baidu.com/s?wd= % E 5% A3 %81% E7% BA% B8' print ( unquote ( url )) https://www.baidu.com/s?wd=% E5% A3\ufffd% E7% BA% B8 \u8fd9\u662f\u4e0a\u9762\u5f97\u5230\u7684 URL \u7f16\u7801\u540e\u7684\u7ed3\u679c\uff0c\u518d\u5229\u7528 unquote \u65b9\u6cd5\u8fd8\u539f\u3002 \u5206\u6790 Robots \u534f\u8bae \u5229\u7528 urllib \u7684 robotparser \u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7ad9 Robots \u534f\u8bae\u7684\u5206\u6790\u3002 Robots \u534f\u8bae Robots \u534f\u8bae\u4e5f\u79f0\u4f5c\u722c\u866b\u534f\u8bae\u3001\u673a\u5668\u4eba\u534f\u8bae\uff0c\u5b83\u7684\u5168\u540d\u53eb\u4f5c\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6\uff08Robots Exclusion Protocol\uff09\uff0c\u7528\u6765\u544a\u8bc9\u722c\u866b\u548c\u641c\u7d22\u5f15\u64ce\u54ea\u4e9b\u9875\u9762\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u53eb\u4f5c robots.txt \u7684\u6587\u672c\u6587\u4ef6\uff0c\u4e00\u822c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\u3002 \u5f53\u641c\u7d22\u722c\u866b\u8bbf\u95ee\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u5b83\u9996\u5148\u4f1a\u68c0\u67e5\u8fd9\u4e2a\u7ad9\u70b9\u6839\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728 robots.txt \u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\uff0c\u641c\u7d22\u722c\u866b\u4f1a\u6839\u636e\u5176\u4e2d\u5b9a\u4e49\u7684\u722c\u53d6\u8303\u56f4\u6765\u722c\u53d6\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\uff0c\u641c\u7d22\u722c\u866b\u4fbf\u4f1a\u8bbf\u95ee\u6240\u6709\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684\u9875\u9762\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a robots.txt \u7684\u6837\u4f8b\uff1a User-agent: * Disallow: / Allow: /public/ \u8fd9\u5b9e\u73b0\u4e86\u5bf9\u6240\u6709\u641c\u7d22\u722c\u866b\u53ea\u5141\u8bb8\u722c\u53d6 public \u76ee\u5f55\u7684\u529f\u80fd\uff0c\u5c06\u4e0a\u8ff0\u5185\u5bb9\u4fdd\u5b58\u6210 robots.txt \u6587\u4ef6\uff0c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u548c\u7f51\u7ad9\u7684\u5165\u53e3\u6587\u4ef6\uff08\u6bd4\u5982 index.php\u3001index.html \u548c index.jsp \u7b49\uff09\u653e\u5728\u4e00\u8d77\u3002 \u4e0a\u9762\u7684 User-agent \u63cf\u8ff0\u4e86\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\uff0c\u8fd9\u91cc\u5c06\u5176\u8bbe\u7f6e\u4e3a * \u5219\u4ee3\u8868\u8be5\u534f\u8bae\u5bf9\u4efb\u4f55\u722c\u53d6\u722c\u866b\u6709\u6548\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\uff1a User-agent: Baiduspider \u8fd9\u5c31\u4ee3\u8868\u6211\u4eec\u8bbe\u7f6e\u7684\u89c4\u5219\u5bf9\u767e\u5ea6\u722c\u866b\u662f\u6709\u6548\u7684\u3002\u5982\u679c\u6709\u591a\u6761 User-agent \u8bb0\u5f55\uff0c\u5219\u5c31\u4f1a\u6709\u591a\u4e2a\u722c\u866b\u4f1a\u53d7\u5230\u722c\u53d6\u9650\u5236\uff0c\u4f46\u81f3\u5c11\u9700\u8981\u6307\u5b9a\u4e00\u6761\u3002 Disallow \u6307\u5b9a\u4e86\u4e0d\u5141\u8bb8\u6293\u53d6\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4e0a\u4f8b\u5b50\u4e2d\u8bbe\u7f6e\u4e3a / \u5219\u4ee3\u8868\u4e0d\u5141\u8bb8\u6293\u53d6\u6240\u6709\u9875\u9762\u3002 Allow \u4e00\u822c\u548c Disallow \u4e00\u8d77\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\uff0c\u7528\u6765\u6392\u9664\u67d0\u4e9b\u9650\u5236\u3002\u73b0\u5728\u6211\u4eec\u8bbe\u7f6e\u4e3a /public/\uff0c\u5219\u8868\u793a\u6240\u6709\u9875\u9762\u4e0d\u5141\u8bb8\u6293\u53d6\uff0c\u4f46\u53ef\u4ee5\u6293\u53d6 public \u76ee\u5f55\u3002 \u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u51e0\u4e2a\u4f8b\u5b50\u3002\u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: / \u5141\u8bb8\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: \u53e6\u5916\uff0c\u76f4\u63a5\u628a robots.txt \u6587\u4ef6\u7559\u7a7a\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u7f51\u7ad9\u67d0\u4e9b\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: /private/ Disallow: /tmp/ \u53ea\u5141\u8bb8\u67d0\u4e00\u4e2a\u722c\u866b\u8bbf\u95ee\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: WebCrawler Disallow: User-agent: * Disallow: / \u8fd9\u4e9b\u662f robots.txt \u7684\u4e00\u4e9b\u5e38\u89c1\u5199\u6cd5\u3002 \u722c\u866b\u540d\u79f0 \u5927\u5bb6\u53ef\u80fd\u4f1a\u7591\u60d1\uff0c\u722c\u866b\u540d\u662f\u54ea\u513f\u6765\u7684\uff1f\u4e3a\u4ec0\u4e48\u5c31\u53eb\u8fd9\u4e2a\u540d\uff1f\u5176\u5b9e\u5b83\u662f\u6709\u56fa\u5b9a\u540d\u5b57\u7684\u4e86\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u5c31\u53eb\u4f5c BaiduSpider\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\u53ca\u5bf9\u5e94\u7684\u7f51\u7ad9\u3002 \u722c\u866b\u540d\u79f0 \u540d\u3000\u3000\u79f0 \u7f51\u3000\u3000\u7ad9 BaiduSpider \u767e\u5ea6 www.baidu.com Googlebot \u8c37\u6b4c www.google.com 360Spider 360 \u641c\u7d22 www.so.com YodaoBot \u6709\u9053 www.youdao.com ia_archiver Alexa www.alexa.cn Scooter altavista www.altavista.com robotparser \u4e86\u89e3 Robots \u534f\u8bae\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 robotparser \u6a21\u5757\u6765\u89e3\u6790 robots.txt \u4e86\u3002\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b RobotFileParser \uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u67d0\u7f51\u7ad9\u7684 robots.txt \u6587\u4ef6\u6765\u5224\u65ad\u4e00\u4e2a\u722c\u53d6\u722c\u866b\u662f\u5426\u6709\u6743\u9650\u6765\u722c\u53d6\u8fd9\u4e2a\u7f51\u9875\u3002 \u8be5\u7c7b\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6784\u9020\u65b9\u6cd5\u91cc\u4f20\u5165 robots.txt \u7684\u94fe\u63a5\u5373\u53ef\u3002\u9996\u5148\u770b\u4e00\u4e0b\u5b83\u7684\u58f0\u660e\uff1a urllib . robotparser . RobotFileParser ( url = '' ) <urllib.robotparser.RobotFileParser at 0x1e87a256b00> \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u6700\u540e\u518d\u4f7f\u7528 set_url() \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e0b\u4e5f\u53ef\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u8fd9\u4e2a\u7c7b\u5e38\u7528\u7684\u51e0\u4e2a\u65b9\u6cd5\u3002 set_url \uff1a\u7528\u6765\u8bbe\u7f6e robots.txt \u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u5728\u521b\u5efa RobotFileParser \u5bf9\u8c61\u65f6\u4f20\u5165\u4e86\u94fe\u63a5\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8bbe\u7f6e\u4e86\u3002 read \uff1a\u8bfb\u53d6 robots.txt \u6587\u4ef6\u5e76\u8fdb\u884c\u5206\u6790\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6267\u884c\u4e00\u4e2a\u8bfb\u53d6\u548c\u5206\u6790\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u90fd\u4f1a\u4e3a False\uff0c\u6240\u4ee5\u4e00\u5b9a\u8bb0\u5f97\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u662f\u6267\u884c\u4e86\u8bfb\u53d6\u64cd\u4f5c\u3002 parse \uff1a\u7528\u6765\u89e3\u6790 robots.txt \u6587\u4ef6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f robots.txt \u67d0\u4e9b\u884c\u7684\u5185\u5bb9\uff0c\u5b83\u4f1a\u6309\u7167 robots.txt \u7684\u8bed\u6cd5\u89c4\u5219\u6765\u5206\u6790\u8fd9\u4e9b\u5185\u5bb9\u3002 can_fetch \uff1a\u8be5\u65b9\u6cd5\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f User-agent\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6293\u53d6\u7684 URL\u3002\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u8be5\u641c\u7d22\u5f15\u64ce\u662f\u5426\u53ef\u4ee5\u6293\u53d6\u8fd9\u4e2a URL\uff0c\u8fd4\u56de\u7ed3\u679c\u662f True \u6216 False\u3002 mtime \uff1a\u8fd4\u56de\u7684\u662f\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\uff0c\u8fd9\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u68c0\u67e5\u6765\u6293\u53d6\u6700\u65b0\u7684 robots.txt\u3002 modified \uff1a\u5b83\u540c\u6837\u5bf9\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u5f88\u6709\u5e2e\u52a9\uff0c\u5c06\u5f53\u524d\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\u3002 \u8fd9\u91cc\u4ee5\u7b80\u4e66\u4e3a\u4f8b\uff0c\u9996\u5148\u521b\u5efa RobotFileParser \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 set_url \u65b9\u6cd5\u8bbe\u7f6e\u4e86 robots.txt \u7684\u94fe\u63a5\uff1a # need to fix from urllib.robotparser import RobotFileParser rp = RobotFileParser () rp . set_url ( 'http://www.jianshu.com/robots.txt' ) rp . read () print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" )) False False \u5f53\u7136\uff0c\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u76f4\u63a5\u7528\u5982\u4e0b\u65b9\u6cd5\u8bbe\u7f6e\uff1a rp = RobotFileParser ( 'http://www.jianshu.com/robots.txt' ) \u63a5\u7740\u5229\u7528 can_fetch \u65b9\u6cd5\u5224\u65ad\u4e86\u7f51\u9875\u662f\u5426\u53ef\u4ee5\u88ab\u6293\u53d6\u3002 \u8fd9\u91cc\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 parse \u65b9\u6cd5\u6267\u884c\u8bfb\u53d6\u548c\u5206\u6790\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a # need to fix from urllib.robotparser import RobotFileParser from urllib.request import urlopen rp = RobotFileParser () rp . parse ( urlopen ( 'http://www.jianshu.com/robots.txt' ) . read () . decode ( 'utf-8' ) . split ( ' \\n ' )) print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" ))","title":"8.7.urllib"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#request","text":"hurllib.request \u6a21\u5757\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6784\u9020 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u8fc7\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5e26\u6709\u5904\u7406\u6388\u6743\u9a8c\u8bc1\uff08authentication\uff09\u3001\u91cd\u5b9a\u5411\uff08redirection)\u3001\u6d4f\u89c8\u5668 Cookies \u4ee5\u53ca\u5176\u4ed6\u5185\u5bb9\u3002","title":"request \u6a21\u5757"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlopen","text":"urllib . request . urlopen ( url , data = None , [ timeout ,] * , cafile = None , capath = None , cadefault = False ) # data \u9644\u52a0\u6570\u636e # timeout \u8d85\u65f6\u65f6\u95f4 # context \u5fc5\u987b\u662f ssl.SSLContext \u7c7b\u578b\uff0c\u7528\u6765\u6307\u5b9a SSL \u8bbe\u7f6e # cafile \u548c capath \u5206\u522b\u6307\u5b9a CA \u8bc1\u4e66\u548c\u5b83\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u5728\u8bf7\u6c42 HTTPS \u94fe\u63a5\u65f6\u4f1a\u6709\u7528 # cadefault \u73b0\u5728\u5df2\u7ecf\u5f03\u7528\u4e86\uff0c\u5176\u9ed8\u8ba4\u503c\u4e3a False \u4f8b\u5982\uff0c\u8981\u8bf7\u6c42 Python \u5b98\u7f51\uff1a import urllib.request url = 'https://www.python.org' # response\u662f\u4e00\u4e2a HTTPResposne \u7c7b\u578b\u7684\u5bf9\u8c61 response = urllib . request . urlopen ( url = url ) # \u8bfb\u5165\u7f51\u9875\u5185\u5bb9 \u8fd9\u662f\u4e00\u4e2abytes\u5b57\u7b26\u4e32 response . read () # \u54cd\u5e94\u7684\u72b6\u6001\u7801 response . status # \u54cd\u5e94\u7684\u72b6\u6001\u4fe1\u606f response . reason # \u54cd\u5e94\u7684\u5934\u4fe1\u606f response . getheaders () # \u83b7\u53d6\u54cd\u5e94\u7684\u5934\u4fe1\u606f\u7684\u67d0\u4e2a\u53c2\u6570 response . getheader ( 'Server' ) 'nginx' \u4e3b\u8981\u5305\u542b readinto\u3001fileno \u7b49\u65b9\u6cd5\uff0c\u4ee5\u53ca msg\u3001version\u3001debuglevel\u3001closed \u7b49\u5c5e\u6027\u3002","title":"urlopen"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#data","text":"\u5982\u679c\u8981\u6dfb\u52a0 data \u53c2\u6570\uff0c\u9700\u8981\u4f7f\u7528 bytes \u65b9\u6cd5\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5b57\u8282\u6d41\u7f16\u7801\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u5373 bytes \u7c7b\u578b\u3002\u53e6\u5916\uff0c\u5982\u679c\u4f20\u9012\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf7\u6c42\u65b9\u5f0f\u5c31\u4e0d\u518d\u662f GET \u65b9\u5f0f\uff0c\u800c\u662f POST \u65b9\u5f0f\u3002 # import urllib.parse import urllib.request # \u4f7f\u7528\u4e86 bytes \u65b9\u6cd5\u7f16\u7801\u6210\u5b57\u8282\u6d41 # data = bytes(urllib.parse.urlencode({'word': 'hello'}), encoding='utf8') data = bytes ( \"word=hello\" , encoding = \"utf-8\" ) response = urllib . request . urlopen ( 'http://httpbin.org/post' , data = data ) print ( response . read () . decode ( \"utf-8\" )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"word\": \"hello\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"10\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.7\", \"X-Amzn-Trace-Id\": \"Root=1-5e89900b-e9bf3454905bafbadf6d7311\" }, \"json\": null, \"origin\": \"47.240.21.73\", \"url\": \"http://httpbin.org/post\" } \u8bf7\u6c42\u7684 URL \u4e3a\uff1a http://httpbin.org/post \uff0c\u8fd9\u4e2a\u94fe\u63a5\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5 POST \u8bf7\u6c42\uff0c\u5b83\u53ef\u4ee5\u8f93\u51fa Request \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5176\u4e2d\u5c31\u5305\u542b\u4f20\u9012\u7684 data \u53c2\u6570\u3002 \u6211\u4eec\u4f20\u9012\u7684\u53c2\u6570\u51fa\u73b0\u5728\u4e86 form \u5b57\u6bb5\u4e2d\uff0c\u8fd9\u8868\u660e\u662f\u6a21\u62df\u4e86\u8868\u5355\u63d0\u4ea4\u7684\u65b9\u5f0f\uff0c\u4ee5 POST \u65b9\u5f0f\u4f20\u8f93\u6570\u636e\u3002","title":"data \u53c2\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#timeout","text":"timeout \u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u610f\u601d\u5c31\u662f\u5982\u679c\u8bf7\u6c42\u8d85\u51fa\u4e86\u8bbe\u7f6e\u7684\u8fd9\u4e2a\u65f6\u95f4\uff0c\u8fd8\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\uff0c\u5c31\u4f1a\u629b\u51fa URLError \u5f02\u5e38\uff0cURLError \u5f02\u5e38\u5c5e\u4e8e urllib.error \u6a21\u5757\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u8be5\u53c2\u6570\uff0c\u5c31\u4f1a\u4f7f\u7528\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u3002\u5b83\u652f\u6301 HTTP\u3001HTTPS\u3001FTP \u8bf7\u6c42\u3002 import urllib.request # 1\u79d2\u5185\u5f97\u5230\u54cd\u5e94\uff0c\u5219\u4e0d\u4f1a\u629b\u51faURLError \u5f02\u5e38 try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 1 ) print ( response . read () . decode ( \"utf-8\" )) except : print ( 'TIME OUT' ) { \"args\": {}, \"headers\": { \"Accept-Encoding\": \"identity\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Python-urllib/3.7\", \"X-Amzn-Trace-Id\": \"Root=1-5e89900c-e29de7835a97edcf0f16f5f7\" }, \"origin\": \"47.240.21.73\", \"url\": \"http://httpbin.org/get\" } \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u6765\u63a7\u5236\u4e00\u4e2a\u7f51\u9875\u5982\u679c\u957f\u65f6\u95f4\u672a\u54cd\u5e94\uff0c\u5c31\u8df3\u8fc7\u5b83\u7684\u6293\u53d6\u3002 # need to fix. output should be 'TIME OUT 1' import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'http://httpbin.org/get' , timeout = 0.1 ) except urllib . error . URLError as e : if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT 1' ) except Exception : print ( 'TIME OUT 2' ) TIME OUT 2 \u4e00\u822c\u6765\u8bf4\uff0c0.1 \u79d2\u5185\u57fa\u672c\u4e0d\u53ef\u80fd\u5f97\u5230\u670d\u52a1\u5668\u54cd\u5e94\uff0c\u56e0\u6b64\u8f93\u51fa\u4e86 TIME OUT \u7684\u63d0\u793a\u3002","title":"timeout \u53c2\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#request_1","text":"\u5229\u7528 urlopen \u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6700\u57fa\u672c\u8bf7\u6c42\u7684\u53d1\u8d77\uff0c\u4f46\u8fd9\u51e0\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u5e76\u4e0d\u8db3\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\u3002\u5982\u679c\u8bf7\u6c42\u4e2d\u9700\u8981\u52a0\u5165 Headers \u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u5229\u7528\u66f4\u5f3a\u5927\u7684 Request \u7c7b\u6765\u6784\u5efa\u3002 import urllib.request request = urllib . request . Request ( 'https://python.org' ) response = urllib . request . urlopen ( request ) print ( response . read () . decode ( 'utf-8' )) < ! doctype html > < ! --[if lt IE 7]> <html class=\"no-js ie6 lt-ie7 lt-ie8 lt-ie9\"> < ! [ endif ] --> < ! --[if IE 7]> <html class=\"no-js ie7 lt-ie8 lt-ie9\"> < ! [ endif ] --> < ! --[if IE 8]> <html class=\"no-js ie8 lt-ie9\"> < ! [ endif ] --> < ! --[if gt IE 8]><!--><html class=\"no-js\" . . . 0 be1d290 . js \" charset=\" utf - 8 \" ></ script > < ! [ endif ] --> </ body > </ html > \u4f9d\u7136\u662f\u7528 urlopen \u65b9\u6cd5\u6765\u53d1\u9001\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u4e0d\u518d\u662f URL\uff0c\u800c\u662f\u4e00\u4e2a Request \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u901a\u8fc7\u6784\u9020\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u65b9\u9762\u6211\u4eec\u53ef\u4ee5\u5c06\u8bf7\u6c42\u72ec\u7acb\u6210\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u66f4\u52a0\u4e30\u5bcc\u548c\u7075\u6d3b\u5730\u914d\u7f6e\u53c2\u6570\u3002 Request \u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a class urllib . request . Request ( url , data = None , headers = {}, origin_req_host = None , unverifiable = False , method = None ) url \uff1a\u7528\u4e8e\u8bf7\u6c42 URL\uff0c\u8fd9\u662f\u5fc5\u4f20\u53c2\u6570\uff0c\u5176\u4ed6\u90fd\u662f\u53ef\u9009\u53c2\u6570\u3002 data \uff1abytes\uff08\u5b57\u8282\u6d41\uff09\u7c7b\u578b\u3002\u5982\u679c\u5b83\u662f\u5b57\u5178\uff0c\u53ef\u4ee5\u5148\u7528 urllib.parse \u6a21\u5757\u91cc\u7684 urlencode() \u7f16\u7801\u3002 headers \uff1a\u5b83\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4e5f\u5c31\u662f\u8bf7\u6c42\u5934\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6784\u9020\u8bf7\u6c42\u65f6\u901a\u8fc7 headers \u53c2\u6570\u76f4\u63a5\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8bf7\u6c42\u5b9e\u4f8b\u7684 add_header() \u65b9\u6cd5\u6dfb\u52a0\u3002\u6dfb\u52a0\u8bf7\u6c42\u5934\u6700\u5e38\u7528\u7684\u7528\u6cd5\u5c31\u662f\u901a\u8fc7\u4fee\u6539 User-Agent \u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\uff0c\u9ed8\u8ba4\u7684 User-Agent \u662f Python-urllib\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5b83\u6765\u4f2a\u88c5\u6d4f\u89c8\u5668\u3002\u6bd4\u5982\u8981\u4f2a\u88c5\u706b\u72d0\u6d4f\u89c8\u5668\uff0c\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u4e3a\uff1a Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11 origin_req_host \uff1a\u6307\u7684\u662f\u8bf7\u6c42\u65b9\u7684 host \u540d\u79f0\u6216\u8005 IP \u5730\u5740\u3002 unverifiable \uff1a\u8868\u793a\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u662f\u65e0\u6cd5\u9a8c\u8bc1\u7684\uff0c\u9ed8\u8ba4\u662f False\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u7528\u6237\u6ca1\u6709\u8db3\u591f\u6743\u9650\u6765\u9009\u62e9\u63a5\u6536\u8fd9\u4e2a\u8bf7\u6c42\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a HTML \u6587\u6863\u4e2d\u7684\u56fe\u7247\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u81ea\u52a8\u6293\u53d6\u56fe\u50cf\u7684\u6743\u9650\uff0c\u8fd9\u65f6 unverifiable \u7684\u503c\u5c31\u662f True\u3002 method \uff1a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u6307\u793a\u8bf7\u6c42\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 GET\u3001POST \u548c PUT \u7b49\u3002 \u4e0b\u9762\u6211\u4eec\u4f20\u5165\u591a\u4e2a\u53c2\u6570\u6784\u5efa\u8bf7\u6c42\u6765\u770b\u4e00\u4e0b\uff1a from urllib import request , parse url = 'http://httpbin.org/post' headers = { 'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' , 'Host' : 'httpbin.org' } dict = { 'name' : 'Germey' } data = bytes ( parse . urlencode ( dict ), encoding = 'utf8' ) # data = b'name=Germey' req = request . Request ( url = url , data = data , headers = headers , method = 'POST' ) response = request . urlopen ( req ) print ( response . read () . decode ( 'utf-8' )) { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"name\": \"Germey\" }, \"headers\": { \"Accept-Encoding\": \"identity\", \"Content-Length\": \"11\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\", \"X-Amzn-Trace-Id\": \"Root=1-5e89900f-c9abba36385912b6c6495750\" }, \"json\": null, \"origin\": \"47.240.21.73\", \"url\": \"http://httpbin.org/post\" } \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 4 \u4e2a\u53c2\u6570\u6784\u9020\u4e86\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u4e2d url \u5373\u8bf7\u6c42 URL\uff0cheaders \u4e2d\u6307\u5b9a\u4e86 User-Agent \u548c Host\uff0c\u53c2\u6570 data \u7528 urlencode \u548c bytes \u65b9\u6cd5\u8f6c\u6210\u5b57\u8282\u6d41\u3002\u53e6\u5916\uff0c\u6307\u5b9a\u4e86\u8bf7\u6c42\u65b9\u5f0f\u4e3a POST\u3002 \u89c2\u5bdf\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u6210\u529f\u8bbe\u7f6e\u4e86 data\u3001headers \u548c method\u3002 \u53e6\u5916\uff0cheaders \u4e5f\u53ef\u4ee5\u7528 add_header \u65b9\u6cd5\u6765\u6dfb\u52a0\uff1a req = request . Request ( url = url , data = data , method = 'POST' ) req . add_header ( 'User-Agent' , 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)' )","title":"Request"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#handler","text":"\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u867d\u7136\u53ef\u4ee5\u6784\u9020\u8bf7\u6c42\uff0c\u4f46\u5982\u679c\u8981\u5904\u7406\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff08\u6bd4\u5982 Cookies \u5904\u7406\u3001\u4ee3\u7406\u8bbe\u7f6e\u7b49\uff09\uff0c\u5219\u9700\u8981 Handler \u3002\u6211\u4eec\u53ef\u4ee5\u628a Handler \u7406\u89e3\u4e3a\u5404\u79cd\u5904\u7406\u5668\uff0c\u6709\u4e13\u95e8\u5904\u7406\u767b\u5f55\u9a8c\u8bc1\u7684\uff0c\u6709\u5904\u7406 Cookies \u7684\uff0c\u6709\u5904\u7406\u4ee3\u7406\u8bbe\u7f6e\u7684\u3002\u5229\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u505a\u5230 HTTP \u8bf7\u6c42\u4e2d\u6240\u6709\u7684\u4e8b\u60c5\u3002 urllib.request \u6a21\u5757\u91cc\u7684 BaseHandler \u7c7b\u662f\u6240\u6709\u5176\u4ed6 Handler \u7684\u7236\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 default_open\u3001protocol_request \u7b49\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u6709\u5404\u79cd Handler \u5b50\u7c7b\u7ee7\u627f\u8fd9\u4e2a BaseHandler \u7c7b\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a HTTPDefaultErrorHandler \u7528\u4e8e\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\uff0c\u9519\u8bef\u90fd\u4f1a\u629b\u51fa HTTPError \u7c7b\u578b\u7684\u5f02\u5e38\u3002 HTTPRedirectHandler \u7528\u4e8e\u5904\u7406\u91cd\u5b9a\u5411\u3002 HTTPCookieProcessor \u7528\u4e8e\u5904\u7406 Cookies\u3002 ProxyHandler \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7406\uff0c\u9ed8\u8ba4\u4ee3\u7406\u4e3a\u7a7a\u3002 HTTPPasswordMgr \u7528\u4e8e\u7ba1\u7406\u5bc6\u7801\uff0c\u5b83\u7ef4\u62a4\u4e86\u7528\u6237\u540d\u5bc6\u7801\u7684\u8868\u3002 HTTPBasicAuthHandler \u7528\u4e8e\u7ba1\u7406\u8ba4\u8bc1\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u6253\u5f00\u65f6\u9700\u8981\u8ba4\u8bc1\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5b83\u6765\u89e3\u51b3\u8ba4\u8bc1\u95ee\u9898\u3002 \u53e6\u5916\u8fd8\u6709\u5176\u4ed6\u7684 Handler \u7c7b\uff0c\u5728\u8fd9\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler \u5173\u4e8e\u600e\u4e48\u4f7f\u7528\u5b83\u4eec\uff0c\u73b0\u5728\u5148\u4e0d\u7528\u7740\u6025\uff0c\u540e\u9762\u4f1a\u6709\u5b9e\u4f8b\u6f14\u793a\u3002 \u53e6\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\u5c31\u662f OpenerDirector\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u4e3a Opener\u3002\u6211\u4eec\u4e4b\u524d\u7528\u8fc7 urlopen \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f urllib \u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u4e2a Opener\u3002 \u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 Opener \u5462\uff1f\u56e0\u4e3a\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\u3002\u4e4b\u524d\u4f7f\u7528\u7684 Request \u548c urlopen \u76f8\u5f53\u4e8e\u7c7b\u5e93\u4e3a\u4f60\u5c01\u88c5\u597d\u4e86\u6781\u5176\u5e38\u7528\u7684\u8bf7\u6c42\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u4eec\u53ef\u4ee5\u5b8c\u6210\u57fa\u672c\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u73b0\u5728\u4e0d\u4e00\u6837\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u6df1\u5165\u4e00\u5c42\u8fdb\u884c\u914d\u7f6e\uff0c\u4f7f\u7528\u66f4\u5e95\u5c42\u7684\u5b9e\u4f8b\u6765\u5b8c\u6210\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u7528\u5230\u4e86 Opener\u3002 Opener \u53ef\u4ee5\u4f7f\u7528 open \u65b9\u6cd5\uff0c\u8fd4\u56de\u7684\u7c7b\u578b\u548c urlopen \u5982\u51fa\u4e00\u8f99\u3002\u90a3\u4e48\uff0c\u5b83\u548c Handler \u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u5229\u7528 Handler \u6765\u6784\u5efa Opener\u3002 \u4e0b\u9762\u7528\u51e0\u4e2a\u5b9e\u4f8b\u6765\u770b\u770b\u5b83\u4eec\u7684\u7528\u6cd5\u3002","title":"Handler"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#_1","text":"\u6709\u4e9b\u7f51\u7ad9\u5728\u6253\u5f00\u65f6\u5c31\u4f1a\u5f39\u51fa\u63d0\u793a\u6846\uff0c\u76f4\u63a5\u63d0\u793a\u4f60\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u80fd\u67e5\u770b\u9875\u9762\uff0c\u5982\u56fe\u6240\u793a\uff1a HTTPBasicAuthHandler \u5c31\u53ef\u4ee5\u8bf7\u6c42\u8fd9\u6837\u7684\u9875\u9762\uff1a from urllib.request import ( HTTPPasswordMgrWithDefaultRealm , HTTPBasicAuthHandler , build_opener ) from urllib.error import URLError username = 'name' password = '12345678' url = 'https://httpbin.org/basic-auth/name/12345678' p = HTTPPasswordMgrWithDefaultRealm () p . add_password ( None , url , username , password ) auth_handler = HTTPBasicAuthHandler ( p ) opener = build_opener ( auth_handler ) try : result = opener . open ( url ) html = result . read () . decode ( 'utf-8' ) print ( html ) except URLError as e : print ( e . reason ) { \"authenticated\": true, \"user\": \"name\" } \u8fd9\u91cc\u9996\u5148\u5b9e\u4f8b\u5316 HTTPBasicAuthHandler \u5bf9\u8c61\uff0c\u5176\u53c2\u6570\u662f HTTPPasswordMgrWithDefaultRealm \u5bf9\u8c61\uff0c\u5b83\u5229\u7528 add_password \u65b9\u6cd5\u6dfb\u52a0\u8fdb\u53bb\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u8fd9\u6837\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u5904\u7406\u9a8c\u8bc1\u7684 Handler\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u5e76\u4f7f\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u4e00\u4e2a Opener\uff0c\u8fd9\u4e2a Opener \u5728\u53d1\u9001\u8bf7\u6c42\u65f6\u5c31\u76f8\u5f53\u4e8e\u5df2\u7ecf\u9a8c\u8bc1\u6210\u529f\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5229\u7528 Opener \u7684 open \u65b9\u6cd5\u6253\u5f00\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u9a8c\u8bc1\u4e86\u3002\u8fd9\u91cc\u83b7\u53d6\u5230\u7684\u7ed3\u679c\u5c31\u662f\u9a8c\u8bc1\u540e\u7684\u9875\u9762\u6e90\u7801\u5185\u5bb9\u3002","title":"\u9a8c\u8bc1"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#_2","text":"\u5728\u505a\u722c\u866b\u7684\u65f6\u5019\uff0c\u514d\u4e0d\u4e86\u8981\u4f7f\u7528\u4ee3\u7406\uff0c\u5982\u679c\u8981\u6dfb\u52a0\u4ee3\u7406\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a from urllib.error import URLError from urllib.request import ProxyHandler , build_opener proxy_handler = ProxyHandler ({ 'http' : 'http://127.0.0.1:9743' , 'https' : 'https://127.0.0.1:9743' }) opener = build_opener ( proxy_handler ) try : response = opener . open ( 'https://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) except URLError as e : print ( e . reason ) [WinError 10061] \u7531\u4e8e\u76ee\u6807\u8ba1\u7b97\u673a\u79ef\u6781\u62d2\u7edd\uff0c\u65e0\u6cd5\u8fde\u63a5\u3002 \u8fd9\u91cc\u6211\u4eec\u5728\u672c\u5730\u642d\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7406\uff0c\u5b83\u8fd0\u884c\u5728 9743 \u7aef\u53e3\u4e0a\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86 ProxyHandler\uff0c\u5176\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u952e\u540d\u662f\u534f\u8bae\u7c7b\u578b\uff08\u6bd4\u5982 HTTP \u6216\u8005 HTTPS \u7b49\uff09\uff0c\u952e\u503c\u662f\u4ee3\u7406\u94fe\u63a5\uff0c\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u4ee3\u7406\u3002 \u7136\u540e\uff0c\u5229\u7528\u8fd9\u4e2a Handler \u53ca build_opener \u65b9\u6cd5\u6784\u9020\u4e00\u4e2a Opener\uff0c\u4e4b\u540e\u53d1\u9001\u8bf7\u6c42\u5373\u53ef\u3002","title":"\u4ee3\u7406"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#cookies","text":"\u83b7\u53d6\u7f51\u7ad9\u7684 Cookies\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a CookieJar \u5bf9\u8c61\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u9700\u8981\u5229\u7528 HTTPCookieProcessor \u6765\u6784\u5efa\u4e00\u4e2a Handler\uff0c\u6700\u540e\u5229\u7528 build_opener \u65b9\u6cd5\u6784\u5efa\u51fa Opener\uff0c\u6267\u884c open \u51fd\u6570\u5373\u53ef\u3002 import http.cookiejar , urllib.request cookie = http . cookiejar . CookieJar () handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) for item in cookie : print ( item . name + \"=\" + item . value ) BAIDUID=90D729D96CB91305A6D7948F01D31C3E:FG=1 BIDUPSID=90D729D96CB913059EC2400548332001 H_PS_PSSID=30971_1429_31121_21101_30825_31187_30823_31163 PSTM=1586073620 BDSVRTM=0 BD_HOME=1 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8f93\u51fa\u4e86\u6bcf\u6761 Cookie \u7684\u540d\u79f0\u548c\u503c\u3002 \u4e0d\u8fc7\u65e2\u7136\u80fd\u8f93\u51fa\uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u8f93\u51fa\u6210\u6587\u4ef6\u683c\u5f0f\u5462\uff1f\u6211\u4eec\u77e5\u9053 Cookies \u5b9e\u9645\u4e0a\u4e5f\u662f\u4ee5\u6587\u672c\u5f62\u5f0f\u4fdd\u5b58\u7684\u3002 \u7b54\u6848\u5f53\u7136\u662f\u80af\u5b9a\u7684\uff0c\u8fd9\u91cc\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u4f8b\u6765\u770b\u770b\uff1a filename = 'cookies.txt' cookie = http . cookiejar . MozillaCookieJar ( filename ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) cookie . save ( ignore_discard = True , ignore_expires = True ) \u8fd9\u65f6 CookieJar \u5c31\u9700\u8981\u6362\u6210 MozillaCookieJar\uff0c\u5b83\u5728\u751f\u6210\u6587\u4ef6\u65f6\u4f1a\u7528\u5230\uff0c\u662f CookieJar \u7684\u5b50\u7c7b\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406 Cookies \u548c\u6587\u4ef6\u76f8\u5173\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u53ef\u4ee5\u5c06 Cookies \u4fdd\u5b58\u6210 Mozilla \u578b\u6d4f\u89c8\u5668\u7684 Cookies \u683c\u5f0f\u3002 \u8fd0\u884c\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u751f\u6210\u4e86\u4e00\u4e2a cookies.txt \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a # Netscape HTTP Cookie File # http : // curl . haxx . se / rfc / cookie_spec . html # This is a generated file ! Do not edit . . baidu . com TRUE / FALSE 3622386254 BAIDUID 05 AE39B5F56C1DEC474325CDA522D44F : FG = 1 . baidu . com TRUE / FALSE 3622386254 BIDUPSID 05 AE39B5F56C1DEC474325CDA522D44F . baidu . com TRUE / FALSE H_PS_PSSID 19638 _1453_17710_18240_21091_18560_17001_ 21191 _21161 . baidu . com TRUE / FALSE 3622386254 PSTM 1474902606 www . baidu . com FALSE / FALSE BDSVRTM 0 www . baidu . com FALSE / FALSE BD_HOME 0 \u53e6\u5916\uff0cLWPCookieJar \u540c\u6837\u53ef\u4ee5\u8bfb\u53d6\u548c\u4fdd\u5b58 Cookies\uff0c\u4f46\u662f\u4fdd\u5b58\u7684\u683c\u5f0f\u548c MozillaCookieJar \u4e0d\u4e00\u6837\uff0c\u5b83\u4f1a\u4fdd\u5b58\u6210 libwww-perl(LWP) \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\u3002 \u8981\u4fdd\u5b58\u6210 LWP \u683c\u5f0f\u7684 Cookies \u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u5c31\u6539\u4e3a\uff1a cookie = http . cookiejar . LWPCookieJar ( filename ) \u6b64\u65f6\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a #LWP-Cookies-2.0 Set-Cookie3: BAIDUID=\"0CE9C56F598E69DB375B7C294AE5C591:FG=1\"; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BIDUPSID=0CE9C56F598E69DB375B7C294AE5C591; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: H_PS_PSSID=20048_1448_18240_17944_21089_21192_21161_20929; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; discard; version=0 Set-Cookie3: PSTM=1474902671; path=\"/\"; domain=\".baidu.com\"; path_spec; domain_dot; expires=\"2084-10-14 18:25:19Z\"; version=0 Set-Cookie3: BDSVRTM=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 Set-Cookie3: BD_HOME=0; path=\"/\"; domain=\"www.baidu.com\"; path_spec; discard; version=0 \u7531\u6b64\u770b\u6765\uff0c\u751f\u6210\u7684\u683c\u5f0f\u8fd8\u662f\u6709\u6bd4\u8f83\u5927\u5dee\u5f02\u7684\u3002 \u90a3\u4e48\uff0c\u751f\u6210\u4e86 Cookies \u6587\u4ef6\u540e\uff0c\u600e\u6837\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5e76\u5229\u7528\u5462\uff1f \u4e0b\u9762\u6211\u4eec\u4ee5 LWPCookieJar \u683c\u5f0f\u4e3a\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a cookie = http . cookiejar . LWPCookieJar () cookie . load ( 'cookies.txt' , ignore_discard = True , ignore_expires = True ) handler = urllib . request . HTTPCookieProcessor ( cookie ) opener = urllib . request . build_opener ( handler ) response = opener . open ( 'http://www.baidu.com' ) print ( response . read () . decode ( 'utf-8' )) \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u8c03\u7528 load \u65b9\u6cd5\u6765\u8bfb\u53d6\u672c\u5730\u7684 Cookies \u6587\u4ef6\uff0c\u83b7\u53d6\u5230\u4e86 Cookies \u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\u524d\u63d0\u662f\u6211\u4eec\u9996\u5148\u751f\u6210\u4e86 LWPCookieJar \u683c\u5f0f\u7684 Cookies\uff0c\u5e76\u4fdd\u5b58\u6210\u6587\u4ef6\uff0c\u7136\u540e\u8bfb\u53d6 Cookies \u4e4b\u540e\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u6784\u5efa Handler \u548c Opener \u5373\u53ef\u5b8c\u6210\u64cd\u4f5c\u3002 \u8fd0\u884c\u7ed3\u679c\u6b63\u5e38\u7684\u8bdd\uff0c\u4f1a\u8f93\u51fa\u767e\u5ea6\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7edd\u5927\u591a\u6570\u8bf7\u6c42\u529f\u80fd\u7684\u8bbe\u7f6e\u4e86\u3002 \u8fd9\u4fbf\u662f urllib \u5e93\u4e2d request \u6a21\u5757\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u5982\u679c\u60f3\u5b9e\u73b0\u66f4\u591a\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u660e\uff1a https://docs.python.org/3/library/urllib.request.html#basehandler-objects \u3002","title":"Cookies"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#_3","text":"urllib \u7684 error \u6a21\u5757\u5b9a\u4e49\u4e86\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0crequest \u6a21\u5757\u4fbf\u4f1a\u629b\u51fa error \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5f02\u5e38\u3002error \u6a21\u5757\u5b9a\u4e49\u4e86\u4e09\u79cd\u5f02\u5e38: ['ContentTooShortError', 'HTTPError', 'URLError']","title":"\u5904\u7406\u5f02\u5e38"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlerror","text":"URLError \u7c7b\u6765\u81ea urllib \u5e93\u7684 error \u6a21\u5757\uff0c\u5b83\u7ee7\u627f\u81ea OSError \u7c7b\uff0c\u662f error \u5f02\u5e38\u6a21\u5757\u7684\u57fa\u7c7b\uff0c\u7531 request \u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u90fd\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u8fd9\u4e2a\u7c7b\u6765\u5904\u7406\u3002 \u5b83\u5177\u6709\u4e00\u4e2a\u5c5e\u6027 reason\uff0c\u5373\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 from urllib import request , error try : # \u8bf7\u6c42\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7f51\u9875 response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . URLError as e : print ( e . reason ) Not Found","title":"URLError"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#httperror","text":"\u5b83\u662f URLError \u7684\u5b50\u7c7b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406 HTTP \u8bf7\u6c42\u9519\u8bef\uff0c\u6bd4\u5982\u8ba4\u8bc1\u8bf7\u6c42\u5931\u8d25\u7b49\u3002\u5b83\u6709\u5982\u4e0b 3 \u4e2a\u5c5e\u6027\u3002 code\uff1a\u8fd4\u56de HTTP \u72b6\u6001\u7801\uff0c\u6bd4\u5982 404 \u8868\u793a\u7f51\u9875\u4e0d\u5b58\u5728\uff0c500 \u8868\u793a\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7b49\u3002 reason\uff1a\u540c\u7236\u7c7b\u4e00\u6837\uff0c\u7528\u4e8e\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 headers\uff1a\u8fd4\u56de\u8bf7\u6c42\u5934\u3002 from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sun, 05 Apr 2020 08:00:21 GMT Content-Type: text / html ; charset = UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=a9qontd6vq2sdjsjbvql90qiq0; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u4f9d\u7136\u662f\u540c\u6837\u7684\u7f51\u5740\uff0c\u8fd9\u91cc\u6355\u83b7\u4e86 HTTPError \u5f02\u5e38\uff0c\u8f93\u51fa\u4e86 reason\u3001code \u548c headers \u5c5e\u6027\u3002 \u56e0\u4e3a URLError \u662f HTTPError \u7684\u7236\u7c7b\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u9009\u62e9\u6355\u83b7\u5b50\u7c7b\u7684\u9519\u8bef\uff0c\u518d\u53bb\u6355\u83b7\u7236\u7c7b\u7684\u9519\u8bef\uff0c\u6240\u4ee5\u4e0a\u8ff0\u4ee3\u7801\u66f4\u597d\u7684\u5199\u6cd5\u5982\u4e0b\uff1a from urllib import request , error try : response = request . urlopen ( 'https://cuiqingcai.com/index.htm' ) except error . HTTPError as e : print ( e . reason , e . code , e . headers , sep = ' \\n ' ) except error . URLError as e : print ( e . reason ) else : print ( 'Request Successfully' ) Not Found 404 Server: nginx/1.10.3 (Ubuntu) Date: Sun, 05 Apr 2020 08:00:21 GMT Content-Type: text / html ; charset = UTF-8 Transfer-Encoding: chunked Connection: close Set-Cookie: PHPSESSID=soesm72j68a3251otggm3smjp1; path=/ Pragma: no-cache Vary: Cookie Expires: Wed, 11 Jan 1984 05:00:00 GMT Cache-Control: no-cache, must-revalidate, max-age=0 Link: <https://cuiqingcai.com/wp-json/>; rel=\"https://api.w.org/\" \u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5148\u6355\u83b7 HTTPError \uff0c\u83b7\u53d6\u5b83\u7684\u9519\u8bef\u72b6\u6001\u7801\u3001\u539f\u56e0\u3001headers \u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e0d\u662f HTTPError \u5f02\u5e38\uff0c\u5c31\u4f1a\u6355\u83b7 URLError \u5f02\u5e38\uff0c\u8f93\u51fa\u9519\u8bef\u539f\u56e0\u3002\u6700\u540e\uff0c\u7528 else \u6765\u5904\u7406\u6b63\u5e38\u7684\u903b\u8f91\u3002\u8fd9\u662f\u4e00\u4e2a\u8f83\u597d\u7684\u5f02\u5e38\u5904\u7406\u5199\u6cd5\u3002 \u6709\u65f6\u5019\uff0creason \u5c5e\u6027\u8fd4\u56de\u7684\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002\u518d\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a import socket import urllib.request import urllib.error try : response = urllib . request . urlopen ( 'https://www.baidu.com' , timeout = 0.01 ) except urllib . error . URLError as e : print ( type ( e . reason )) if isinstance ( e . reason , socket . timeout ): print ( 'TIME OUT' ) <class 'socket.timeout'> TIME OUT \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u6765\u5f3a\u5236\u629b\u51fa timeout \u5f02\u5e38\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0creason \u5c5e\u6027\u7684\u7ed3\u679c\u662f socket.timeout \u7c7b\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528 isinstance \u65b9\u6cd5\u6765\u5224\u65ad\u5b83\u7684\u7c7b\u578b\uff0c\u4f5c\u51fa\u66f4\u8be6\u7ec6\u7684\u5f02\u5e38\u5224\u65ad\u3002","title":"HTTPError"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#_4","text":"urllib \u5e93\u7684 parse \u6a21\u5757\uff0c\u5b83\u5b9a\u4e49\u4e86\u5904\u7406 URL \u7684\u6807\u51c6\u63a5\u53e3\uff0c\u4f8b\u5982\u5b9e\u73b0 URL \u5404\u90e8\u5206\u7684\u62bd\u53d6\u3001\u5408\u5e76\u4ee5\u53ca\u94fe\u63a5\u8f6c\u6362\u3002\u5b83\u652f\u6301\u5982\u4e0b\u534f\u8bae\u7684 URL \u5904\u7406\uff1afile\u3001ftp\u3001gopher\u3001hdl\u3001http\u3001https\u3001imap\u3001mailto\u3001 mms\u3001news\u3001nntp\u3001prospero\u3001rsync\u3001rtsp\u3001rtspu\u3001sftp\u3001 sip\u3001sips\u3001snews\u3001svn\u3001svn+ssh\u3001telnet \u548c wais\u3002","title":"\u89e3\u6790\u94fe\u63a5"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlparse","text":"\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0 URL \u7684\u8bc6\u522b\u548c\u5206\u6bb5\uff1a urllib . parse . urlparse ( urlstring , scheme = '' , allow_fragments = True ) urlstring \uff1a\u5f85\u89e3\u6790\u7684 URL scheme \uff1a\u5b83\u662f\u9ed8\u8ba4\u7684\u534f\u8bae\uff08\u6bd4\u5982 http \u6216 https \u7b49\uff09\u3002 scheme \u53c2\u6570\u53ea\u6709\u5728 urlstring \u4e2d\u4e0d\u5305\u542b scheme \u4fe1\u606f\u65f6\u624d\u751f\u6548\u3002 allow_fragments \uff1a\u662f\u5426\u5ffd\u7565 fragment\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a False\uff0cfragment \u90e8\u5206\u5c31\u4f1a\u88ab\u5ffd\u7565\uff0c\u5b83\u4f1a\u88ab\u89e3\u6790\u4e3a path\u3001parameters \u6216\u8005 query \u7684\u4e00\u90e8\u5206\uff0c\u800c fragment \u90e8\u5206\u4e3a\u7a7a\u3002\u5f53 URL \u4e2d\u4e0d\u5305\u542b params \u548c query \u65f6\uff0cfragment \u4fbf\u4f1a\u88ab\u89e3\u6790\u4e3a path \u7684\u4e00\u90e8\u5206 \u4f8b\u5b50\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( type ( result ), result ) <class 'urllib.parse.ParseResult'> ParseResult(scheme='http', netloc='www.baidu.com', path='/index.html', params='user', query='id=5', fragment='comment') \u53ef\u4ee5\u770b\u5230\uff0c\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a ParseResult \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5b83\u5305\u542b 6 \u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f scheme\u3001netloc\u3001path\u3001params\u3001query \u548c fragment\u3002 \u89c2\u5bdf\u4e00\u4e0b\u8be5\u5b9e\u4f8b\u7684 URL\uff1a http://www.baidu.com/index.html;user?id=5#comment \u53ef\u4ee5\u53d1\u73b0\uff0curlparse \u65b9\u6cd5\u5c06\u5176\u62c6\u5206\u6210\u4e86 6 \u4e2a\u90e8\u5206\u3002\u5927\u4f53\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u89e3\u6790\u65f6\u6709\u7279\u5b9a\u7684\u5206\u9694\u7b26\u3002\u6bd4\u5982\uff0c:// \u524d\u9762\u7684\u5c31\u662f scheme\uff0c\u4ee3\u8868\u534f\u8bae\uff1b\u7b2c\u4e00\u4e2a / \u7b26\u53f7\u524d\u9762\u4fbf\u662f netloc\uff0c\u5373\u57df\u540d\uff0c\u540e\u9762\u662f path\uff0c\u5373\u8bbf\u95ee\u8def\u5f84\uff1b\u5206\u53f7\uff1b\u540e\u9762\u662f params\uff0c\u4ee3\u8868\u53c2\u6570\uff1b\u95ee\u53f7\uff1f\u540e\u9762\u662f\u67e5\u8be2\u6761\u4ef6 query\uff0c\u4e00\u822c\u7528\u4f5c GET \u7c7b\u578b\u7684 URL\uff1b\u4e95\u53f7 #\u540e\u9762\u662f\u951a\u70b9\uff0c\u7528\u4e8e\u76f4\u63a5\u5b9a\u4f4d\u9875\u9762\u5185\u90e8\u7684\u4e0b\u62c9\u4f4d\u7f6e\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u6807\u51c6\u7684\u94fe\u63a5\u683c\u5f0f\uff0c\u5177\u4f53\u5982\u4e0b\uff1a scheme://netloc/path;params?query#fragment \u4e00\u4e2a\u6807\u51c6\u7684 URL \u90fd\u4f1a\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\uff0c\u5229\u7528 urlparse \u65b9\u6cd5\u53ef\u4ee5\u5c06\u5b83\u62c6\u5206\u5f00\u6765\u3002 \u8fd4\u56de\u7ed3\u679c ParseResult \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7d22\u5f15\u987a\u5e8f\u6765\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u7528\u5c5e\u6027\u540d\u83b7\u53d6\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlparse result = urlparse ( 'http://www.baidu.com/index.html#comment' , allow_fragments = False ) print ( result . scheme , result [ 0 ], result . netloc , result [ 1 ], sep = ' \\n ' ) http http www.baidu.com www.baidu.com","title":"urlparse"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlunparse","text":"\u6709\u4e86 urlparse \u65b9\u6cd5\uff0c\u76f8\u5e94\u5730\u5c31\u6709\u4e86\u5b83\u7684\u5bf9\u7acb\u65b9\u6cd5 urlunparse \u3002\u5b83\u63a5\u53d7\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u7684\u957f\u5ea6\u5fc5\u987b\u662f 6\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u53c2\u6570\u6570\u91cf\u4e0d\u8db3\u6216\u8005\u8fc7\u591a\u7684\u95ee\u9898\u3002 from urllib.parse import urlunparse data = [ 'http' , 'www.baidu.com' , 'index.html' , 'user' , 'a=6' , 'comment' ] print ( urlunparse ( data )) http://www.baidu.com/index.html;user?a=6#comment \u8fd9\u91cc\u53c2\u6570 data \u7528\u4e86\u5217\u8868\u7c7b\u578b\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\uff0c\u6bd4\u5982\u5143\u7ec4\u6216\u8005\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"urlunparse"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlsplit","text":"\u8fd9\u4e2a\u65b9\u6cd5\u548c urlparse \u65b9\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4e0d\u518d\u5355\u72ec\u89e3\u6790 params \u8fd9\u4e00\u90e8\u5206\uff0c\u53ea\u8fd4\u56de 5 \u4e2a\u7ed3\u679c\u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 params \u4f1a\u5408\u5e76\u5230 path \u4e2d\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlsplit result = urlsplit ( 'http://www.baidu.com/index.html;user?id=5#comment' ) print ( result ) SplitResult(scheme='http', netloc='www.baidu.com', path='/index.html;user', query='id=5', fragment='comment') \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd4\u56de\u7ed3\u679c\u662f SplitResult \uff0c\u5b83\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a\u5143\u7ec4\u7c7b\u578b\uff0c\u65e2\u53ef\u4ee5\u7528\u5c5e\u6027\u83b7\u53d6\u503c\uff0c\u4e5f\u53ef\u4ee5\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u3002","title":"urlsplit"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlunsplit","text":"\u4e0e urlunparse \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5b83\u4e5f\u662f\u5c06\u94fe\u63a5\u5404\u4e2a\u90e8\u5206\u7ec4\u5408\u6210\u5b8c\u6574\u94fe\u63a5\u7684\u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5143\u7ec4\u7b49\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u957f\u5ea6\u5fc5\u987b\u4e3a 5\u3002\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlunsplit data = [ 'http' , 'www.baidu.com' , 'index.html' , 'a=6' , 'comment' ] print ( urlunsplit ( data )) http://www.baidu.com/index.html?a=6#comment","title":"urlunsplit"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urljoin","text":"\u6709\u4e86 urlunparse \u548c urlunsplit \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u94fe\u63a5\u7684\u5408\u5e76\uff0c\u4e0d\u8fc7\u524d\u63d0\u5fc5\u987b\u8981\u6709\u7279\u5b9a\u957f\u5ea6\u7684\u5bf9\u8c61\uff0c\u94fe\u63a5\u7684\u6bcf\u4e00\u90e8\u5206\u90fd\u8981\u6e05\u6670\u5206\u5f00\u3002 \u6b64\u5916\uff0c\u751f\u6210\u94fe\u63a5\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f urljoin \u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a base_url\uff08\u57fa\u7840\u94fe\u63a5\uff09\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c06\u65b0\u7684\u94fe\u63a5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5206\u6790 base_url \u7684 scheme\u3001netloc \u548c path \u8fd9 3 \u4e2a\u5185\u5bb9\u5e76\u5bf9\u65b0\u94fe\u63a5\u7f3a\u5931\u7684\u90e8\u5206\u8fdb\u884c\u8865\u5145\uff0c\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u3002 from urllib.parse import urljoin print ( urljoin ( 'http://www.baidu.com' , 'FAQ.html' )) print ( urljoin ( 'http://www.baidu.com' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html' )) print ( urljoin ( 'http://www.baidu.com/about.html' , 'https://cuiqingcai.com/FAQ.html?question=2' )) print ( urljoin ( 'http://www.baidu.com?wd=abc' , 'https://cuiqingcai.com/index.php' )) print ( urljoin ( 'http://www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com' , '?category=2#comment' )) print ( urljoin ( 'www.baidu.com#comment' , '?category=2' )) http://www.baidu.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html https://cuiqingcai.com/FAQ.html?question=2 https://cuiqingcai.com/index.php http://www.baidu.com?category=2#comment www.baidu.com?category=2#comment www.baidu.com?category=2 \u53ef\u4ee5\u53d1\u73b0\uff0cbase_url \u63d0\u4f9b\u4e86\u4e09\u9879\u5185\u5bb9 scheme\u3001netloc \u548c path\u3002\u5982\u679c\u8fd9 3 \u9879\u5728\u65b0\u7684\u94fe\u63a5\u91cc\u4e0d\u5b58\u5728\uff0c\u5c31\u4e88\u4ee5\u8865\u5145\uff1b\u5982\u679c\u65b0\u7684\u94fe\u63a5\u5b58\u5728\uff0c\u5c31\u4f7f\u7528\u65b0\u7684\u94fe\u63a5\u7684\u90e8\u5206\u3002\u800c base_url \u4e2d\u7684 params\u3001query \u548c fragment \u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002","title":"urljoin"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#urlencode","text":"urlencode \u5728\u6784\u9020 GET \u8bf7\u6c42\u53c2\u6570\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import urlencode params = { 'name' : 'germey' , 'age' : 22 } base_url = 'http://www.baidu.com?' url = base_url + urlencode ( params ) print ( url ) http://www.baidu.com?name=germey&age=22 \u8fd9\u91cc\u9996\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u5178\u6765\u5c06\u53c2\u6570\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u8c03\u7528 urlencode \u65b9\u6cd5\u5c06\u5176\u5e8f\u5217\u5316\u4e3a GET \u8bf7\u6c42\u53c2\u6570\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u5e38\u7528\u3002\u6709\u65f6\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u6784\u9020\u53c2\u6570\uff0c\u6211\u4eec\u4f1a\u4e8b\u5148\u7528\u5b57\u5178\u6765\u8868\u793a\u3002\u8981\u8f6c\u5316\u4e3a URL \u7684\u53c2\u6570\u65f6\uff0c\u53ea\u9700\u8981\u8c03\u7528\u8be5\u65b9\u6cd5\u5373\u53ef\u3002","title":"urlencode"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#parse_qs","text":"\u6709\u4e86\u5e8f\u5217\u5316\uff0c\u5fc5\u7136\u5c31\u6709\u53cd\u5e8f\u5217\u5316\u3002\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e32 GET \u8bf7\u6c42\u53c2\u6570\uff0c\u5229\u7528 parse_qs \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b83\u8f6c\u56de\u5b57\u5178\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qs query = 'name=germey&amp;age=22' print ( parse_qs ( query )) {'name': ['germey'], 'age': ['22']} \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u5c31\u6210\u529f\u8f6c\u56de\u4e3a\u5b57\u5178\u7c7b\u578b\u4e86\u3002","title":"parse_qs"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#parse_qsl","text":"\u8fd8\u6709\u4e00\u4e2a parse_qsl \u65b9\u6cd5\uff0c\u5b83\u7528\u4e8e\u5c06\u53c2\u6570\u8f6c\u5316\u4e3a\u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import parse_qsl query = 'name=germey&amp;age=22' print ( parse_qsl ( query )) [('name', 'germey'), ('age', '22')] \u53ef\u4ee5\u770b\u5230\uff0c\u8fd0\u884c\u7ed3\u679c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u540d\uff0c\u7b2c\u4e8c\u4e2a\u5185\u5bb9\u662f\u53c2\u6570\u503c\u3002","title":"parse_qsl"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#quote","text":"\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5185\u5bb9\u8f6c\u5316\u4e3a URL \u7f16\u7801\u7684\u683c\u5f0f\u3002URL \u4e2d\u5e26\u6709\u4e2d\u6587\u53c2\u6570\u65f6\uff0c\u6709\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e71\u7801\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e2d\u6587\u5b57\u7b26\u8f6c\u5316\u4e3a URL \u7f16\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import quote keyword = ' \u58c1\u7eb8 ' url = 'https://www.baidu.com/s?wd=' + quote ( keyword ) print ( url ) https://www.baidu.com/s?wd=%20%E5%A3%81%E7%BA%B8%20","title":"quote"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#unquote","text":"\u6709\u4e86 quote \u65b9\u6cd5\uff0c\u5f53\u7136\u8fd8\u6709 unquote \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c URL \u89e3\u7801\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from urllib.parse import unquote url = 'https://www.baidu.com/s?wd= % E 5% A3 %81% E7% BA% B8' print ( unquote ( url )) https://www.baidu.com/s?wd=% E5% A3\ufffd% E7% BA% B8 \u8fd9\u662f\u4e0a\u9762\u5f97\u5230\u7684 URL \u7f16\u7801\u540e\u7684\u7ed3\u679c\uff0c\u518d\u5229\u7528 unquote \u65b9\u6cd5\u8fd8\u539f\u3002","title":"unquote"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#robots","text":"\u5229\u7528 urllib \u7684 robotparser \u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7ad9 Robots \u534f\u8bae\u7684\u5206\u6790\u3002","title":"\u5206\u6790 Robots \u534f\u8bae"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#robots_1","text":"Robots \u534f\u8bae\u4e5f\u79f0\u4f5c\u722c\u866b\u534f\u8bae\u3001\u673a\u5668\u4eba\u534f\u8bae\uff0c\u5b83\u7684\u5168\u540d\u53eb\u4f5c\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6\uff08Robots Exclusion Protocol\uff09\uff0c\u7528\u6765\u544a\u8bc9\u722c\u866b\u548c\u641c\u7d22\u5f15\u64ce\u54ea\u4e9b\u9875\u9762\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u53eb\u4f5c robots.txt \u7684\u6587\u672c\u6587\u4ef6\uff0c\u4e00\u822c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\u3002 \u5f53\u641c\u7d22\u722c\u866b\u8bbf\u95ee\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u5b83\u9996\u5148\u4f1a\u68c0\u67e5\u8fd9\u4e2a\u7ad9\u70b9\u6839\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728 robots.txt \u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\uff0c\u641c\u7d22\u722c\u866b\u4f1a\u6839\u636e\u5176\u4e2d\u5b9a\u4e49\u7684\u722c\u53d6\u8303\u56f4\u6765\u722c\u53d6\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\uff0c\u641c\u7d22\u722c\u866b\u4fbf\u4f1a\u8bbf\u95ee\u6240\u6709\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684\u9875\u9762\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a robots.txt \u7684\u6837\u4f8b\uff1a User-agent: * Disallow: / Allow: /public/ \u8fd9\u5b9e\u73b0\u4e86\u5bf9\u6240\u6709\u641c\u7d22\u722c\u866b\u53ea\u5141\u8bb8\u722c\u53d6 public \u76ee\u5f55\u7684\u529f\u80fd\uff0c\u5c06\u4e0a\u8ff0\u5185\u5bb9\u4fdd\u5b58\u6210 robots.txt \u6587\u4ef6\uff0c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u548c\u7f51\u7ad9\u7684\u5165\u53e3\u6587\u4ef6\uff08\u6bd4\u5982 index.php\u3001index.html \u548c index.jsp \u7b49\uff09\u653e\u5728\u4e00\u8d77\u3002 \u4e0a\u9762\u7684 User-agent \u63cf\u8ff0\u4e86\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\uff0c\u8fd9\u91cc\u5c06\u5176\u8bbe\u7f6e\u4e3a * \u5219\u4ee3\u8868\u8be5\u534f\u8bae\u5bf9\u4efb\u4f55\u722c\u53d6\u722c\u866b\u6709\u6548\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\uff1a User-agent: Baiduspider \u8fd9\u5c31\u4ee3\u8868\u6211\u4eec\u8bbe\u7f6e\u7684\u89c4\u5219\u5bf9\u767e\u5ea6\u722c\u866b\u662f\u6709\u6548\u7684\u3002\u5982\u679c\u6709\u591a\u6761 User-agent \u8bb0\u5f55\uff0c\u5219\u5c31\u4f1a\u6709\u591a\u4e2a\u722c\u866b\u4f1a\u53d7\u5230\u722c\u53d6\u9650\u5236\uff0c\u4f46\u81f3\u5c11\u9700\u8981\u6307\u5b9a\u4e00\u6761\u3002 Disallow \u6307\u5b9a\u4e86\u4e0d\u5141\u8bb8\u6293\u53d6\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4e0a\u4f8b\u5b50\u4e2d\u8bbe\u7f6e\u4e3a / \u5219\u4ee3\u8868\u4e0d\u5141\u8bb8\u6293\u53d6\u6240\u6709\u9875\u9762\u3002 Allow \u4e00\u822c\u548c Disallow \u4e00\u8d77\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\uff0c\u7528\u6765\u6392\u9664\u67d0\u4e9b\u9650\u5236\u3002\u73b0\u5728\u6211\u4eec\u8bbe\u7f6e\u4e3a /public/\uff0c\u5219\u8868\u793a\u6240\u6709\u9875\u9762\u4e0d\u5141\u8bb8\u6293\u53d6\uff0c\u4f46\u53ef\u4ee5\u6293\u53d6 public \u76ee\u5f55\u3002 \u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u51e0\u4e2a\u4f8b\u5b50\u3002\u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: / \u5141\u8bb8\u6240\u6709\u722c\u866b\u8bbf\u95ee\u4efb\u4f55\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: \u53e6\u5916\uff0c\u76f4\u63a5\u628a robots.txt \u6587\u4ef6\u7559\u7a7a\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u7981\u6b62\u6240\u6709\u722c\u866b\u8bbf\u95ee\u7f51\u7ad9\u67d0\u4e9b\u76ee\u5f55\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: * Disallow: /private/ Disallow: /tmp/ \u53ea\u5141\u8bb8\u67d0\u4e00\u4e2a\u722c\u866b\u8bbf\u95ee\u7684\u4ee3\u7801\u5982\u4e0b\uff1a User-agent: WebCrawler Disallow: User-agent: * Disallow: / \u8fd9\u4e9b\u662f robots.txt \u7684\u4e00\u4e9b\u5e38\u89c1\u5199\u6cd5\u3002","title":"Robots \u534f\u8bae"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#_5","text":"\u5927\u5bb6\u53ef\u80fd\u4f1a\u7591\u60d1\uff0c\u722c\u866b\u540d\u662f\u54ea\u513f\u6765\u7684\uff1f\u4e3a\u4ec0\u4e48\u5c31\u53eb\u8fd9\u4e2a\u540d\uff1f\u5176\u5b9e\u5b83\u662f\u6709\u56fa\u5b9a\u540d\u5b57\u7684\u4e86\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u5c31\u53eb\u4f5c BaiduSpider\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u641c\u7d22\u722c\u866b\u7684\u540d\u79f0\u53ca\u5bf9\u5e94\u7684\u7f51\u7ad9\u3002 \u722c\u866b\u540d\u79f0 \u540d\u3000\u3000\u79f0 \u7f51\u3000\u3000\u7ad9 BaiduSpider \u767e\u5ea6 www.baidu.com Googlebot \u8c37\u6b4c www.google.com 360Spider 360 \u641c\u7d22 www.so.com YodaoBot \u6709\u9053 www.youdao.com ia_archiver Alexa www.alexa.cn Scooter altavista www.altavista.com","title":"\u722c\u866b\u540d\u79f0"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.7.urllib.html#robotparser","text":"\u4e86\u89e3 Robots \u534f\u8bae\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 robotparser \u6a21\u5757\u6765\u89e3\u6790 robots.txt \u4e86\u3002\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b RobotFileParser \uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u67d0\u7f51\u7ad9\u7684 robots.txt \u6587\u4ef6\u6765\u5224\u65ad\u4e00\u4e2a\u722c\u53d6\u722c\u866b\u662f\u5426\u6709\u6743\u9650\u6765\u722c\u53d6\u8fd9\u4e2a\u7f51\u9875\u3002 \u8be5\u7c7b\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6784\u9020\u65b9\u6cd5\u91cc\u4f20\u5165 robots.txt \u7684\u94fe\u63a5\u5373\u53ef\u3002\u9996\u5148\u770b\u4e00\u4e0b\u5b83\u7684\u58f0\u660e\uff1a urllib . robotparser . RobotFileParser ( url = '' ) <urllib.robotparser.RobotFileParser at 0x1e87a256b00> \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u6700\u540e\u518d\u4f7f\u7528 set_url() \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e0b\u4e5f\u53ef\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u8fd9\u4e2a\u7c7b\u5e38\u7528\u7684\u51e0\u4e2a\u65b9\u6cd5\u3002 set_url \uff1a\u7528\u6765\u8bbe\u7f6e robots.txt \u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u5728\u521b\u5efa RobotFileParser \u5bf9\u8c61\u65f6\u4f20\u5165\u4e86\u94fe\u63a5\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8bbe\u7f6e\u4e86\u3002 read \uff1a\u8bfb\u53d6 robots.txt \u6587\u4ef6\u5e76\u8fdb\u884c\u5206\u6790\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6267\u884c\u4e00\u4e2a\u8bfb\u53d6\u548c\u5206\u6790\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u90fd\u4f1a\u4e3a False\uff0c\u6240\u4ee5\u4e00\u5b9a\u8bb0\u5f97\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u662f\u6267\u884c\u4e86\u8bfb\u53d6\u64cd\u4f5c\u3002 parse \uff1a\u7528\u6765\u89e3\u6790 robots.txt \u6587\u4ef6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f robots.txt \u67d0\u4e9b\u884c\u7684\u5185\u5bb9\uff0c\u5b83\u4f1a\u6309\u7167 robots.txt \u7684\u8bed\u6cd5\u89c4\u5219\u6765\u5206\u6790\u8fd9\u4e9b\u5185\u5bb9\u3002 can_fetch \uff1a\u8be5\u65b9\u6cd5\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f User-agent\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6293\u53d6\u7684 URL\u3002\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u8be5\u641c\u7d22\u5f15\u64ce\u662f\u5426\u53ef\u4ee5\u6293\u53d6\u8fd9\u4e2a URL\uff0c\u8fd4\u56de\u7ed3\u679c\u662f True \u6216 False\u3002 mtime \uff1a\u8fd4\u56de\u7684\u662f\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\uff0c\u8fd9\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u68c0\u67e5\u6765\u6293\u53d6\u6700\u65b0\u7684 robots.txt\u3002 modified \uff1a\u5b83\u540c\u6837\u5bf9\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u5f88\u6709\u5e2e\u52a9\uff0c\u5c06\u5f53\u524d\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\u3002 \u8fd9\u91cc\u4ee5\u7b80\u4e66\u4e3a\u4f8b\uff0c\u9996\u5148\u521b\u5efa RobotFileParser \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 set_url \u65b9\u6cd5\u8bbe\u7f6e\u4e86 robots.txt \u7684\u94fe\u63a5\uff1a # need to fix from urllib.robotparser import RobotFileParser rp = RobotFileParser () rp . set_url ( 'http://www.jianshu.com/robots.txt' ) rp . read () print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" )) False False \u5f53\u7136\uff0c\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u76f4\u63a5\u7528\u5982\u4e0b\u65b9\u6cd5\u8bbe\u7f6e\uff1a rp = RobotFileParser ( 'http://www.jianshu.com/robots.txt' ) \u63a5\u7740\u5229\u7528 can_fetch \u65b9\u6cd5\u5224\u65ad\u4e86\u7f51\u9875\u662f\u5426\u53ef\u4ee5\u88ab\u6293\u53d6\u3002 \u8fd9\u91cc\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 parse \u65b9\u6cd5\u6267\u884c\u8bfb\u53d6\u548c\u5206\u6790\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a # need to fix from urllib.robotparser import RobotFileParser from urllib.request import urlopen rp = RobotFileParser () rp . parse ( urlopen ( 'http://www.jianshu.com/robots.txt' ) . read () . decode ( 'utf-8' ) . split ( ' \\n ' )) print ( rp . can_fetch ( '*' , 'http://www.jianshu.com/p/b67554025d7d' )) print ( rp . can_fetch ( '*' , \"http://www.jianshu.com/search?q=python&page=1&type=collections\" ))","title":"robotparser"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.8.requests.html","text":"import requests Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.05 requests version: 2.22.0","title":"8.8.requests"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html","text":"import re from Toolkit.Help import Help as H Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 re version: 2.2.1 re\u6a21\u5757\u7684\u51fd\u6570 re \u6a21\u5757\u5305\u542b12\u4e2a\u51fd\u6570\uff1a h = H ( re ) d = h . dicts d [ \"function\" ] module ['compile', 'escape', 'findall', 'finditer', 'fullmatch', 'match', 'purge', 'search', 'split', 'sub', 'subn', 'template'] match \u5c1d\u8bd5\u5728 \u5b57\u7b26\u4e32\u7684\u5f00\u5934 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25\uff0c\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . match ( '^Hello\\s {1} \\d {2} ' , content ) result <re.Match object; span=(0, 8), match='Hello 12'> # \u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25 content = 'Hello 123' result = re . match ( '^hello\\s {1} \\d {2} ' , content ) print ( result ) None Match \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u7528\u4e8e\u9009\u62e9\u5339\u914d\u7ed3\u679c\uff1a [ i for i in dir ( re . Match ) if \"_\" not in i ] ['end', 'endpos', 'expand', 'group', 'groupdict', 'groups', 'lastgroup', 'lastindex', 'pos', 're', 'regs', 'span', 'start', 'string'] fullmatch \u5c1d\u8bd5\u5728 \u6574\u4e2a\u5b57\u7b26\u4e32 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5fc5\u987b\u80fd\u5339\u914d\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {2} ' , content ) print ( result ) None # \u5339\u914d\u6574\u4e2a\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {3} ' , content ) result <re.Match object; span=(0, 9), match='Hello 123'> search \u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56deMatch\u5bf9\u8c61\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . search ( '\\d' , content ) print ( result ) <re.Match object; span=(6, 7), match='1'> findall \u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u5339\u914d\u5bf9\u8c61\u7684\u5217\u8868\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . findall ( '\\d' , content ) print ( result ) ['1', '2', '3'] finditer \u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542bMatch\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . finditer ( '\\d' , content ) list ( result ) [<re.Match object; span=(6, 7), match='1'>, <re.Match object; span=(7, 8), match='2'>, <re.Match object; span=(8, 9), match='3'>] sub \u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . sub ( '\\d' , \"A\" , content ) result 'Hello AAA' subn \u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u548c\u66ff\u6362\u6b21\u6570\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . subn ( '\\d' , \"A\" , content ) result ('Hello AAA', 3) split \u6839\u636e\u6b63\u5219\u8868\u8fbe\u5f0f\u62c6\u5206\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u5728\u5339\u914d\u9879\u5904\u88ab\u62c6\u5206\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u5339\u914d\u9879\u7684\u4f4d\u7f6e\u90fd\u88ab\u62c6\u5206\u3002 content = 'Hello 123' result = re . split ( '[e2]' , content ) result ['H', 'llo 1', '3'] compile compile \u51fd\u6570\u53ef\u4ee5\u5c06\u6b63\u5219\u5b57\u7b26\u4e32\u7f16\u8bd1\u6210RegexObject\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u540e\u9762\u7684\u5339\u914d\u4e2d\u590d\u7528\uff1a content1 = '2016-12-15 12:00' content2 = '2016-12-17 12:55' content3 = '2016-12-22 13:21' pattern = re . compile ( '\\d {2} :\\d {2} ' ) result1 = re . sub ( pattern , '' , content1 ) result2 = re . sub ( pattern , '' , content2 ) result3 = re . sub ( pattern , '' , content3 ) print ( result1 , result2 , result3 ) 2016-12-15 2016-12-17 2016-12-22 \u53e6\u5916\uff0ccompile \u8fd8\u53ef\u4ee5\u4f20\u5165\u4fee\u9970\u7b26\uff0c\u4f8b\u5982 re.S \u7b49\u4fee\u9970\u7b26\uff0c\u8fd9\u6837\u5728 search\u3001findall \u7b49\u65b9\u6cd5\u4e2d\u5c31\u4e0d\u9700\u8981\u989d\u5916\u4f20\u4e86\u3002 escape \u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002 print ( re . escape ( \"\\d\" )) \\\\d purge Clear the regular expression caches. template Compile a template pattern, returning a Pattern object.","title":"8.9.re"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#re","text":"re \u6a21\u5757\u5305\u542b12\u4e2a\u51fd\u6570\uff1a h = H ( re ) d = h . dicts d [ \"function\" ] module ['compile', 'escape', 'findall', 'finditer', 'fullmatch', 'match', 'purge', 'search', 'split', 'sub', 'subn', 'template']","title":"re\u6a21\u5757\u7684\u51fd\u6570"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#match","text":"\u5c1d\u8bd5\u5728 \u5b57\u7b26\u4e32\u7684\u5f00\u5934 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25\uff0c\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . match ( '^Hello\\s {1} \\d {2} ' , content ) result <re.Match object; span=(0, 8), match='Hello 12'> # \u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5c31\u5339\u914d\u5931\u8d25 content = 'Hello 123' result = re . match ( '^hello\\s {1} \\d {2} ' , content ) print ( result ) None Match \u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u7528\u4e8e\u9009\u62e9\u5339\u914d\u7ed3\u679c\uff1a [ i for i in dir ( re . Match ) if \"_\" not in i ] ['end', 'endpos', 'expand', 'group', 'groupdict', 'groups', 'lastgroup', 'lastindex', 'pos', 're', 'regs', 'span', 'start', 'string']","title":"match"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#fullmatch","text":"\u5c1d\u8bd5\u5728 \u6574\u4e2a\u5b57\u7b26\u4e32 \u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56deMatch\u5bf9\u8c61\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5fc5\u987b\u80fd\u5339\u914d\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 # \u5339\u914d\u90e8\u5206\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {2} ' , content ) print ( result ) None # \u5339\u914d\u6574\u4e2a\u5b57\u7b26\u4e32 content = 'Hello 123' result = re . fullmatch ( '^Hello\\s {1} \\d {3} ' , content ) result <re.Match object; span=(0, 9), match='Hello 123'>","title":"fullmatch"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#search","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56deMatch\u5bf9\u8c61\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56deNone\u3002 \u6ce8\u610f\uff1a\u53ea\u4f1a\u8fd4\u56de\u7b2c\u4e00\u4e2a\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . search ( '\\d' , content ) print ( result ) <re.Match object; span=(6, 7), match='1'>","title":"search"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#findall","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u5339\u914d\u5bf9\u8c61\u7684\u5217\u8868\uff1b\u5982\u679c\u672a\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . findall ( '\\d' , content ) print ( result ) ['1', '2', '3']","title":"findall"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#finditer","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u4ee5\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u8fd4\u56de\u5305\u542bMatch\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002 \u6ce8\u610f\uff1a\u8fd4\u56de\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . finditer ( '\\d' , content ) list ( result ) [<re.Match object; span=(6, 7), match='1'>, <re.Match object; span=(7, 8), match='2'>, <re.Match object; span=(8, 9), match='3'>]","title":"finditer"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#sub","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . sub ( '\\d' , \"A\" , content ) result 'Hello AAA'","title":"sub"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#subn","text":"\u626b\u63cf\u5b57\u7b26\u4e32\u67e5\u627e\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u9879\uff0c\u5e76\u5c06\u5339\u914d\u9879\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\u548c\u66ff\u6362\u6b21\u6570\u3002 \u6ce8\u610f\uff1a\u66ff\u6362\u6240\u6709\u88ab\u627e\u5230\u7684\u5339\u914d\u9879\u3002 content = 'Hello 123' result = re . subn ( '\\d' , \"A\" , content ) result ('Hello AAA', 3)","title":"subn"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#split","text":"\u6839\u636e\u6b63\u5219\u8868\u8fbe\u5f0f\u62c6\u5206\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u5728\u5339\u914d\u9879\u5904\u88ab\u62c6\u5206\u3002 \u6ce8\u610f\uff1a\u6240\u6709\u5339\u914d\u9879\u7684\u4f4d\u7f6e\u90fd\u88ab\u62c6\u5206\u3002 content = 'Hello 123' result = re . split ( '[e2]' , content ) result ['H', 'llo 1', '3']","title":"split"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#compile","text":"compile \u51fd\u6570\u53ef\u4ee5\u5c06\u6b63\u5219\u5b57\u7b26\u4e32\u7f16\u8bd1\u6210RegexObject\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u540e\u9762\u7684\u5339\u914d\u4e2d\u590d\u7528\uff1a content1 = '2016-12-15 12:00' content2 = '2016-12-17 12:55' content3 = '2016-12-22 13:21' pattern = re . compile ( '\\d {2} :\\d {2} ' ) result1 = re . sub ( pattern , '' , content1 ) result2 = re . sub ( pattern , '' , content2 ) result3 = re . sub ( pattern , '' , content3 ) print ( result1 , result2 , result3 ) 2016-12-15 2016-12-17 2016-12-22 \u53e6\u5916\uff0ccompile \u8fd8\u53ef\u4ee5\u4f20\u5165\u4fee\u9970\u7b26\uff0c\u4f8b\u5982 re.S \u7b49\u4fee\u9970\u7b26\uff0c\u8fd9\u6837\u5728 search\u3001findall \u7b49\u65b9\u6cd5\u4e2d\u5c31\u4e0d\u9700\u8981\u989d\u5916\u4f20\u4e86\u3002","title":"compile"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#escape","text":"\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002 print ( re . escape ( \"\\d\" )) \\\\d","title":"escape"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#purge","text":"Clear the regular expression caches.","title":"purge"},{"location":"%E6%A0%87%E5%87%86%E5%BA%93/8.9.re.html#template","text":"Compile a template pattern, returning a Pattern object.","title":"template"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 lxml version: 4.5.0 \u2014\u2014 \u672c\u6587\u4fee\u6539\u81ea\uff1a \u300aPython3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218\u300b \u539f\u6587\u4f5c\u8005\uff1a\u5d14\u5e86\u624d XPath\uff0c\u5168\u79f0 XML Path Language\uff0c\u5373 XML \u8def\u5f84\u8bed\u8a00\uff0c\u5b83\u662f\u4e00\u95e8\u5728 XML \u6587\u6863\u4e2d\u67e5\u627e\u4fe1\u606f\u7684\u8bed\u8a00\u3002\u5b83\u6700\u521d\u662f\u7528\u6765\u641c\u5bfb XML \u6587\u6863\u7684\uff0c\u4f46\u662f\u5b83\u540c\u6837\u9002\u7528\u4e8e HTML \u6587\u6863\u7684\u641c\u7d22\u3002 XPath \u7684\u9009\u62e9\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0c\u5b83\u63d0\u4f9b\u4e86\u975e\u5e38\u7b80\u6d01\u660e\u4e86\u7684\u8def\u5f84\u9009\u62e9\u8868\u8fbe\u5f0f\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u8d85\u8fc7 100 \u4e2a\u5185\u5efa\u51fd\u6570\uff0c\u7528\u4e8e\u5b57\u7b26\u4e32\u3001\u6570\u503c\u3001\u65f6\u95f4\u7684\u5339\u914d\u4ee5\u53ca\u8282\u70b9\u3001\u5e8f\u5217\u7684\u5904\u7406\u7b49\u3002\u51e0\u4e4e\u6240\u6709\u6211\u4eec\u60f3\u8981\u5b9a\u4f4d\u7684\u8282\u70b9\uff0c\u90fd\u53ef\u4ee5\u7528 XPath \u6765\u9009\u62e9\u3002 XPath \u4e8e 1999 \u5e74 11 \u6708 16 \u65e5\u6210\u4e3a W3C \u6807\u51c6\uff0c\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u4f9b XSLT\u3001XPointer \u4ee5\u53ca\u5176\u4ed6 XML \u89e3\u6790\u8f6f\u4ef6\u4f7f\u7528\uff0c\u66f4\u591a\u7684\u6587\u6863\u53ef\u4ee5\u8bbf\u95ee\u5176 \u5b98\u65b9\u7f51\u7ad9 \u3002 Python \u7684 lxml \u5e93\u63d0\u4f9b\u4e86\u4f7f\u7528XPath \u8fdb\u884c HTML \u89e3\u6790\u7684\u529f\u80fd\u3002 XPath \u5e38\u7528\u89c4\u5219 \u4e0b\u8868\u5217\u51fa\u4e86 XPath \u7684\u5e38\u7528\u5339\u914d\u89c4\u5219\uff1a \u8868\u8fbe\u5f0f \u63cf\u8ff0 nodename \u9009\u53d6\u6b64\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9 / \u4ece\u5f53\u524d\u8282\u70b9\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9 // \u4ece\u5f53\u524d\u8282\u70b9\u9009\u53d6\u5b50\u5b59\u8282\u70b9 . \u9009\u53d6\u5f53\u524d\u8282\u70b9 .. \u9009\u53d6\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9 @ \u9009\u53d6\u5c5e\u6027 \u6bd4\u5982\uff0c\u4e0b\u9762\u7684 XPath \u89c4\u5219\u7684\u610f\u601d\u662f\uff1a\u9009\u62e9\u6240\u6709\u540d\u79f0\u4e3a title\uff0c\u540c\u65f6\u5c5e\u6027 lang \u7684\u503c\u4e3a eng \u7684\u8282\u70b9\u3002 //title[@lang='eng'] \u5b9e\u4f8b\u5f15\u5165 \u73b0\u5728\u901a\u8fc7\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\u4f7f\u7528 XPath \u6765\u5bf9\u7f51\u9875\u8fdb\u884c\u89e3\u6790\u7684\u8fc7\u7a0b\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' # \u8c03\u7528 HTML \u7c7b\u8fdb\u884c\u521d\u59cb\u5316 html = etree . HTML ( text ) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 64275 f4b6170 > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <div> 4 <ul> 5 <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u7684HTML \u6587\u672c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u662f\u6ca1\u6709\u95ed\u5408\u7684\uff0c\u4f46\u662f etree \u6a21\u5757\u53ef\u4ee5\u81ea\u52a8\u4fee\u6b63 HTML \u6587\u672c\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7ecf\u8fc7\u5904\u7406\u4e4b\u540e\uff0cli \u8282\u70b9\u6807\u7b7e\u88ab\u8865\u5168\uff0c\u5e76\u4e14\u8fd8\u81ea\u52a8\u6dfb\u52a0\u4e86 body\u3001html \u8282\u70b9\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 72 ff04846d46 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = etree . tostring ( html ) 5 print ( result . decode ( 'utf-8' )) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u6b21\u7684\u8f93\u51fa\u7ed3\u679c\u591a\u4e86\u4e00\u4e2a DOCTYPE \u7684\u58f0\u660e\uff0c\u4e0d\u8fc7\u5bf9\u89e3\u6790\u65e0\u4efb\u4f55\u5f71\u54cd\u3002 \u6240\u6709\u8282\u70b9 \u6211\u4eec\u4e00\u822c\u4f1a\u7528 // \u5f00\u5934\u7684 XPath \u89c4\u5219\u6765\u9009\u53d6\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u4ee5\u524d\u9762\u7684 HTML \u6587\u672c\u4e3a\u4f8b\uff0c\u5982\u679c\u8981\u9009\u53d6\u6240\u6709\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//*' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 2e7 fb9353e92 > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//*' ) 4 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u4f7f\u7528 * \u4ee3\u8868\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a HTML \u6587\u672c\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u88ab\u83b7\u53d6\u3002 \u5f53\u7136\uff0c\u6b64\u5904\u5339\u914d\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8282\u70b9\u540d\u79f0\u3002\u5982\u679c\u60f3\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - c10fbe7f490a > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//li' ) 4 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u5b50\u8282\u70b9 \u6211\u4eec\u901a\u8fc7 / \u6216 // \u5373\u53ef\u67e5\u627e\u5143\u7d20\u7684\u5b50\u8282\u70b9\u6216\u5b50\u5b59\u8282\u70b9\u3002\u5047\u5982\u73b0\u5728\u60f3\u9009\u62e9 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li/a' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - fb0a5f43925f > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li/a' ) 5 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u901a\u8fc7\u8ffd\u52a0 /a \u5373\u9009\u62e9\u4e86\u6240\u6709 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\u3002\u56e0\u4e3a //li \u7528\u4e8e\u9009\u4e2d\u6240\u6709 li \u8282\u70b9\uff0c/a \u7528\u4e8e\u9009\u4e2d li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u4e8c\u8005\u7ec4\u5408\u5728\u4e00\u8d77\u5373\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\u3002 \u8fd9\u91cc\u8981\u6ce8\u610f / \u548c // \u7684\u533a\u522b\uff0c\u5176\u4e2d / \u7528\u4e8e\u83b7\u53d6 \u76f4\u63a5\u5b50\u8282\u70b9 \uff0c// \u7528\u4e8e\u83b7\u53d6\u5b50\u5b59\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u8981\u83b7\u53d6 ul \u8282\u70b9\u4e0b\u7684\u6240\u6709\u5b50\u5b59 a \u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//ul//a' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 452 ef7b48825 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//ul//a' ) 5 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd0\u884c\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002 \u4f46\u662f\u5982\u679c\u8fd9\u91cc\u7528 //ul/a \uff0c\u5c31\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u7ed3\u679c\u4e86\u3002\u56e0\u4e3a / \u7528\u4e8e\u83b7\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c\u5728 ul \u8282\u70b9\u4e0b\u6ca1\u6709\u76f4\u63a5\u7684 a \u5b50\u8282\u70b9\uff0c\u53ea\u6709 li \u8282\u70b9\uff0c\u6240\u4ee5\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u5339\u914d\u7ed3\u679c\uff1a \u7236\u8282\u70b9 \u53ef\u4ee5\u901a\u8fc7\u5b50\u8282\u70b9\uff0c\u4f7f\u7528 .. \u6765\u67e5\u627e\u7236\u8282\u70b9\u3002 \u73b0\u5728\u9996\u5148\u9009\u4e2d href \u5c5e\u6027\u4e3a link4.html \u7684 a \u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5176\u7236\u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5176 class \u5c5e\u6027\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/../@class' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - afbca6a550a4 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//a[@href=\"link4.html\"]/../@class' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 parent:: \u6765\u83b7\u53d6\u7236\u8282\u70b9\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/parent::*/@class' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 618 b9d6d1c71 > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//a[@href=\"link4.html\"]/parent::*/@class' ) 4 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u5c5e\u6027\u5339\u914d \u5728\u9009\u53d6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7528 @ \u7b26\u53f7\u8fdb\u884c\u5c5e\u6027\u8fc7\u6ee4\u3002\u6bd4\u5982\uff0c\u8fd9\u91cc\u5982\u679c\u8981\u9009\u53d6 class \u4e3a item-0 \u7684 li \u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0: from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 78768 c549146 > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//li[@class=\"item-0\"]' ) 4 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u52a0\u5165 [@class=\"item-0\"]\uff0c\u9650\u5236\u4e86\u8282\u70b9\u7684 class \u5c5e\u6027\u4e3a item-0\uff0c\u800c HTML \u6587\u672c\u4e2d\u7b26\u5408\u6761\u4ef6\u7684 li \u8282\u70b9\u6709\u4e24\u4e2a\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u8be5\u8fd4\u56de\u4e24\u4e2a\u5339\u914d\u5230\u7684\u5143\u7d20\u3002 \u6587\u672c\u83b7\u53d6 \u6211\u4eec\u7528 XPath \u4e2d\u7684 text \u65b9\u6cd5\u83b7\u53d6\u8282\u70b9\u4e2d\u7684\u6587\u672c\uff0c\u63a5\u4e0b\u6765\u5c1d\u8bd5\u83b7\u53d6\u524d\u9762 li \u8282\u70b9\u4e2d\u7684\u6587\u672c\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 6451679 f68d4 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li[@class=\"item-0\"]/text()' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u5947\u602a\u7684\u662f\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u83b7\u53d6\u5230\u4efb\u4f55\u6587\u672c\uff0c\u53ea\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a XPath \u4e2d text \u65b9\u6cd5\u524d\u9762\u662f /\uff0c\u800c\u6b64\u5904 / \u7684\u542b\u4e49\u662f\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u5f88\u660e\u663e li \u7684\u76f4\u63a5\u5b50\u8282\u70b9\u90fd\u662f a \u8282\u70b9\uff0c\u6587\u672c\u90fd\u662f\u5728 a \u8282\u70b9\u5185\u90e8\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5339\u914d\u5230\u7684\u7ed3\u679c\u5c31\u662f\u88ab\u4fee\u6b63\u7684 li \u8282\u70b9\u5185\u90e8\u7684\u6362\u884c\u7b26\uff0c\u56e0\u4e3a\u81ea\u52a8\u4fee\u6b63\u7684 li \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u6362\u884c\u4e86\u3002 \u5373\u9009\u4e2d\u7684\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\uff1a < li class = \"item-0\" >< a href = \"link1.html\" > first item </ a ></ li > < li class = \"item-0\" >< a href = \"link5.html\" > fifth item </ a > </ li > \u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\u56e0\u4e3a\u81ea\u52a8\u4fee\u6b63\uff0cli \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u6dfb\u52a0\u7684\u65f6\u5019\u6362\u884c\u4e86\uff0c\u6240\u4ee5\u63d0\u53d6\u6587\u672c\u5f97\u5230\u7684\u552f\u4e00\u7ed3\u679c\u5c31\u662f li \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u548c a \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u4e4b\u95f4\u7684\u6362\u884c\u7b26\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u60f3\u83b7\u53d6 li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u5c31\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u5148\u9009\u53d6 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u4f7f\u7528 //\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e0b\u4e8c\u8005\u7684\u533a\u522b\u3002 \u9996\u5148\uff0c\u9009\u53d6\u5230 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f3945a2ca20a > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//li[@class=\"item-0\"]/a/text()' ) 4 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u662f\u4e24\u4e2a\uff0c\u5185\u5bb9\u90fd\u662f\u5c5e\u6027\u4e3a item-0 \u7684 li \u8282\u70b9\u7684\u6587\u672c\uff0c\u8fd9\u4e5f\u5370\u8bc1\u4e86\u524d\u9762\u5c5e\u6027\u5339\u914d\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u662f\u9010\u5c42\u9009\u53d6\u7684\uff0c\u5148\u9009\u53d6\u4e86 li \u8282\u70b9\uff0c\u53c8\u5229\u7528 / \u9009\u53d6\u4e86\u5176\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u6587\u672c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u6070\u597d\u662f\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684\u4e24\u4e2a\u7ed3\u679c\u3002 \u518d\u6765\u770b\u4e0b\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\uff08\u5373\u4f7f\u7528 //\uff09\u9009\u53d6\u7684\u7ed3\u679c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]//text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - c76ff2747af1 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li[@class=\"item-0\"]//text()' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a [ 'first item' , 'fifth item' , ' \\n ' ] ['first item', 'fifth item', '\\n '] \u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u7ed3\u679c\u662f 3 \u4e2a\u3002\u53ef\u60f3\u800c\u77e5\uff0c\u8fd9\u91cc\u662f\u9009\u53d6\u6240\u6709\u5b50\u5b59\u8282\u70b9\u7684\u6587\u672c\uff0c\u5176\u4e2d\u524d\u4e24\u4e2a\u5c31\u662f li \u7684\u5b50\u8282\u70b9 a \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u5373\u6362\u884c\u7b26\u3002 \u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u8981\u60f3\u83b7\u53d6\u5b50\u5b59\u8282\u70b9\u5185\u90e8\u7684\u6240\u6709\u6587\u672c\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528 // \u52a0 text \u65b9\u6cd5\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u83b7\u53d6\u5230\u6700\u5168\u9762\u7684\u6587\u672c\u4fe1\u606f\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u5939\u6742\u4e00\u4e9b\u6362\u884c\u7b26\u7b49\u7279\u6b8a\u5b57\u7b26\u3002\u5982\u679c\u60f3\u83b7\u53d6\u67d0\u4e9b\u7279\u5b9a\u5b50\u5b59\u8282\u70b9\u4e0b\u7684\u6240\u6709\u6587\u672c\uff0c\u53ef\u4ee5\u5148\u9009\u53d6\u5230\u7279\u5b9a\u7684\u5b50\u5b59\u8282\u70b9\uff0c\u7136\u540e\u518d\u8c03\u7528 text \u65b9\u6cd5\u65b9\u6cd5\u83b7\u53d6\u5176\u5185\u90e8\u6587\u672c\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u83b7\u53d6\u7684\u7ed3\u679c\u662f\u6574\u6d01\u7684\u3002 \u5c5e\u6027\u83b7\u53d6 \u6211\u4eec\u77e5\u9053\u7528 text \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8282\u70b9\u5185\u90e8\u6587\u672c\uff0c\u90a3\u4e48\u8282\u70b9\u5c5e\u6027\u8be5\u600e\u6837\u83b7\u53d6\u5462\uff1f\u5176\u5b9e\u8fd8\u662f\u7528 @\u7b26\u53f7\u5c31\u53ef\u4ee5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u4e0b\u6240\u6709 a \u8282\u70b9\u7684 href \u5c5e\u6027\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li/a/@href' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 017551 c05ab8 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li/a/@href' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 @href \u5373\u53ef\u83b7\u53d6\u8282\u70b9\u7684 href \u5c5e\u6027\u3002\u6ce8\u610f\uff0c\u6b64\u5904\u548c\u5c5e\u6027\u5339\u914d\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u5c5e\u6027\u5339\u914d\u662f\u4e2d\u62ec\u53f7\u52a0\u5c5e\u6027\u540d\u548c\u503c\u6765\u9650\u5b9a\u67d0\u4e2a\u5c5e\u6027\uff0c\u5982 [@href=\"link1.html\"]\uff0c\u800c\u6b64\u5904\u7684 @href \u6307\u7684\u662f\u83b7\u53d6\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\uff0c\u4e8c\u8005\u9700\u8981\u505a\u597d\u533a\u5206\u3002 \u5c5e\u6027\u591a\u503c\u5339\u914d \u6709\u65f6\u5019\uff0c\u67d0\u4e9b\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u53ef\u80fd\u6709\u591a\u4e2a\u503c\uff0c\u4f8b\u5982\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[@class=\"li\"]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 6 a826abfe641 > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> 4 ''' 5 html = etree . HTML ( text ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc HTML \u6587\u672c\u4e2d li \u8282\u70b9\u7684 class \u5c5e\u6027\u6709\u4e24\u4e2a\u503c li \u548c li-first\uff0c\u6b64\u65f6\u5982\u679c\u8fd8\u60f3\u7528\u4e4b\u524d\u7684\u5c5e\u6027\u5339\u914d\u83b7\u53d6\uff0c\u5c31\u65e0\u6cd5\u5339\u914d\u4e86\u3002 \u8fd9\u65f6\u5c31\u9700\u8981\u7528 contains \u65b9\u6cd5\u4e86\uff0c\u4ee3\u7801\u53ef\u4ee5\u6539\u5199\u5982\u4e0b\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\")]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - ed5bac55fbdf > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> 4 ''' 5 html = etree . HTML ( text ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u6837\u901a\u8fc7 contains \u65b9\u6cd5\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u5c5e\u6027\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u5165\u5c5e\u6027\u503c\uff0c\u53ea\u8981\u6b64\u5c5e\u6027\u5305\u542b\u6240\u4f20\u5165\u7684\u5c5e\u6027\u503c\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u5339\u914d\u4e86\u3002 \u6b64\u79cd\u65b9\u5f0f\u5728\u67d0\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u6709\u591a\u4e2a\u503c\u65f6\u7ecf\u5e38\u7528\u5230\uff0c\u5982\u67d0\u4e2a\u8282\u70b9\u7684 class \u5c5e\u6027\u901a\u5e38\u6709\u591a\u4e2a\u3002 \u591a\u5c5e\u6027\u5339\u914d \u53e6\u5916\uff0c\u6211\u4eec\u53ef\u80fd\u8fd8\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u90a3\u5c31\u662f\u6839\u636e\u591a\u4e2a\u5c5e\u6027\u786e\u5b9a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u540c\u65f6\u5339\u914d\u591a\u4e2a\u5c5e\u6027\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26 and \u6765\u8fde\u63a5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <li class=\"li li-first\" name=\"item\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\") and @name=\"item\"]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - b2359a5935ab > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <li class=\"li li-first\" name=\"item\"><a href=\"link.html\">first item</a></li> 4 ''' 5 html = etree . HTML ( text ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u7684 li \u8282\u70b9\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u5c5e\u6027 name\u3002\u8981\u786e\u5b9a\u8fd9\u4e2a\u8282\u70b9\uff0c\u9700\u8981\u540c\u65f6\u6839\u636e class \u548c name \u5c5e\u6027\u6765\u9009\u62e9\uff0c\u4e00\u4e2a\u6761\u4ef6\u662f class \u5c5e\u6027\u91cc\u9762\u5305\u542b li \u5b57\u7b26\u4e32\uff0c\u53e6\u4e00\u4e2a\u6761\u4ef6\u662f name \u5c5e\u6027\u4e3a item \u5b57\u7b26\u4e32\uff0c\u4e8c\u8005\u9700\u8981\u540c\u65f6\u6ee1\u8db3\uff0c\u9700\u8981\u7528 and \u64cd\u4f5c\u7b26\u76f8\u8fde\uff0c\u76f8\u8fde\u4e4b\u540e\u7f6e\u4e8e\u4e2d\u62ec\u53f7\u5185\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\u3002 \u8fd9\u91cc\u7684 and \u5176\u5b9e\u662f XPath \u4e2d\u7684\u8fd0\u7b97\u7b26\u3002\u53e6\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u8fd0\u7b97\u7b26\uff0c\u5982 or\u3001mod \u7b49\uff0c\u5728\u6b64\u603b\u7ed3\u4e3a\u4e0b\u8868\u3002 XPath\u8fd0\u7b97\u7b26 \u63cf \u8ff0 \u5b9e \u4f8b \u8fd4\u56de\u503c or \u6216 age=19 or age=20 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 21\uff0c\u5219\u8fd4\u56de false and \u4e0e age>19 and age<21 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false mod \u8ba1\u7b97\u9664\u6cd5\u7684\u4f59\u6570 5 mod 2 1 \u8ba1\u7b97\u4e24\u4e2a\u8282\u70b9\u96c6 //book + \u52a0\u6cd5 6 + 4 10 - \u51cf\u6cd5 6 - 4 2 * \u4e58\u6cd5 6 * 4 24 div \u9664\u6cd5 8 div 4 2 = \u7b49\u4e8e age=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false != \u4e0d\u7b49\u4e8e age!=19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false < \u5c0f\u4e8e age<19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false <= \u5c0f\u4e8e\u6216\u7b49\u4e8e age<=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false > \u5927\u4e8e age>19 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false >= \u5927\u4e8e\u6216\u7b49\u4e8e age>=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false \u6b64\u8868\u53c2\u8003\u6765\u6e90\uff1a http://www.w3school.com.cn/xpath/xpath_operators.asp \u3002 \u6309\u5e8f\u9009\u62e9 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u5728\u9009\u62e9\u7684\u65f6\u5019\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u540c\u65f6\u5339\u914d\u4e86\u591a\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u53ea\u60f3\u8981\u5176\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u5982\u7b2c\u4e8c\u4e2a\u8282\u70b9\u6216\u8005\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u8fd9\u65f6\u53ef\u4ee5\u5229\u7528\u4e2d\u62ec\u53f7\u4f20\u5165\u7d22\u5f15\u7684\u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u6b21\u5e8f\u7684\u8282\u70b9\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()]/a/text()' ) print ( result ) result = html . xpath ( '//li[position()<3]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()-2]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 30140 d698020 > in < module > ----> 1 from lxml import etree 2 3 text = ''' 4 <div> 5 <ul> ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u7b2c\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u4f20\u5165\u6570\u5b57 1 \u5373\u53ef\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u548c\u4ee3\u7801\u4e2d\u4e0d\u540c\uff0c\u5e8f\u53f7\u662f\u4ee5 1 \u5f00\u5934\u7684\uff0c\u4e0d\u662f\u4ee5 0 \u5f00\u5934\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u5373\u53ef\uff0c\u8fd4\u56de\u7684\u4fbf\u662f\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u4f4d\u7f6e\u5c0f\u4e8e 3 \u7684 li \u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4f4d\u7f6e\u5e8f\u53f7\u4e3a 1 \u548c 2 \u7684\u8282\u70b9\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u524d\u4e24\u4e2a li \u8282\u70b9\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u5012\u6570\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u518d\u51cf\u53bb 2 \u5373\u53ef\u3002\u56e0\u4e3a last \u65b9\u6cd5\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\uff0c\u5728\u6b64\u57fa\u7840\u51cf 2 \u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 last\u3001position \u7b49\u65b9\u6cd5\u3002\u5728 XPath \u4e2d\uff0c\u63d0\u4f9b\u4e86 100 \u591a\u4e2a\u65b9\u6cd5\uff0c\u5305\u62ec\u5b58\u53d6\u3001\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u903b\u8f91\u3001\u8282\u70b9\u3001\u5e8f\u5217\u7b49\u5904\u7406\u529f\u80fd\uff0c\u5b83\u4eec\u7684\u5177\u4f53\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_functions.asp \u3002 \u8282\u70b9\u8f74\u9009\u62e9 XPath \u63d0\u4f9b\u4e86\u5f88\u591a\u8282\u70b9\u8f74\u9009\u62e9\u65b9\u6cd5\uff0c\u5305\u62ec\u83b7\u53d6\u5b50\u5143\u7d20\u3001\u5144\u5f1f\u5143\u7d20\u3001\u7236\u5143\u7d20\u3001\u7956\u5148\u5143\u7d20\u7b49\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\"><span>first item</span></a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/ancestor::*' ) print ( result ) result = html . xpath ( '//li[1]/ancestor::div' ) print ( result ) result = html . xpath ( '//li[1]/attribute::*' ) print ( result ) result = html . xpath ( '//li[1]/child::a[@href=\"link1.html\"]' ) print ( result ) result = html . xpath ( '//li[1]/descendant::span' ) print ( result ) result = html . xpath ( '//li[1]/following::*[2]' ) print ( result ) result = html . xpath ( '//li[1]/following-sibling::*' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 5 d7fbf8ba4d6 > in < module > ----> 1 from lxml import etree 2 3 text = ''' 4 <div> 5 <ul> ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 ancestor \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u7956\u5148\u8282\u70b9\u3002\u5176\u540e\u9700\u8981\u8ddf\u4e24\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u8282\u70b9\u7684\u9009\u62e9\u5668\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 *\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed3\u679c\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u5305\u62ec html\u3001body\u3001div \u548c ul\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u8fd9\u6b21\u5728\u5192\u53f7\u540e\u9762\u52a0\u4e86 div\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u53ea\u6709 div \u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u4e86\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 attribute \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u503c\uff0c\u5176\u540e\u8ddf\u7684\u9009\u62e9\u5668\u8fd8\u662f *\uff0c\u8fd9\u4ee3\u8868\u83b7\u53d6\u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\uff0c\u8fd4\u56de\u503c\u5c31\u662f li \u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\u503c\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 child \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u9009\u53d6 href \u5c5e\u6027\u4e3a link1.html \u7684 a \u8282\u70b9\u3002 \u7b2c\u4e94\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 descendant \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b50\u5b59\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\u83b7\u53d6 span \u8282\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u53ea\u5305\u542b span \u8282\u70b9\u800c\u4e0d\u5305\u542b a \u8282\u70b9\u3002 \u7b2c\u516d\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 following \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u867d\u7136\u4f7f\u7528\u7684\u662f * \u5339\u914d\uff0c\u4f46\u53c8\u52a0\u4e86\u7d22\u5f15\u9009\u62e9\uff0c\u6240\u4ee5\u53ea\u83b7\u53d6\u4e86\u7b2c\u4e8c\u4e2a\u540e\u7eed\u8282\u70b9\u3002 \u7b2c\u4e03\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 following-sibling \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u540c\u7ea7\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 * \u5339\u914d\uff0c\u6240\u4ee5\u83b7\u53d6\u4e86\u6240\u6709\u540e\u7eed\u540c\u7ea7\u8282\u70b9\u3002 \u4ee5\u4e0a\u662f XPath \u8f74\u7684\u7b80\u5355\u7528\u6cd5\uff0c\u66f4\u591a\u8f74\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_axes.asp \u3002","title":"13.1.lxml"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#xpath","text":"\u4e0b\u8868\u5217\u51fa\u4e86 XPath \u7684\u5e38\u7528\u5339\u914d\u89c4\u5219\uff1a \u8868\u8fbe\u5f0f \u63cf\u8ff0 nodename \u9009\u53d6\u6b64\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9 / \u4ece\u5f53\u524d\u8282\u70b9\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9 // \u4ece\u5f53\u524d\u8282\u70b9\u9009\u53d6\u5b50\u5b59\u8282\u70b9 . \u9009\u53d6\u5f53\u524d\u8282\u70b9 .. \u9009\u53d6\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9 @ \u9009\u53d6\u5c5e\u6027 \u6bd4\u5982\uff0c\u4e0b\u9762\u7684 XPath \u89c4\u5219\u7684\u610f\u601d\u662f\uff1a\u9009\u62e9\u6240\u6709\u540d\u79f0\u4e3a title\uff0c\u540c\u65f6\u5c5e\u6027 lang \u7684\u503c\u4e3a eng \u7684\u8282\u70b9\u3002 //title[@lang='eng']","title":"XPath \u5e38\u7528\u89c4\u5219"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_1","text":"\u73b0\u5728\u901a\u8fc7\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\u4f7f\u7528 XPath \u6765\u5bf9\u7f51\u9875\u8fdb\u884c\u89e3\u6790\u7684\u8fc7\u7a0b\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' # \u8c03\u7528 HTML \u7c7b\u8fdb\u884c\u521d\u59cb\u5316 html = etree . HTML ( text ) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 64275 f4b6170 > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <div> 4 <ul> 5 <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u7684HTML \u6587\u672c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u662f\u6ca1\u6709\u95ed\u5408\u7684\uff0c\u4f46\u662f etree \u6a21\u5757\u53ef\u4ee5\u81ea\u52a8\u4fee\u6b63 HTML \u6587\u672c\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7ecf\u8fc7\u5904\u7406\u4e4b\u540e\uff0cli \u8282\u70b9\u6807\u7b7e\u88ab\u8865\u5168\uff0c\u5e76\u4e14\u8fd8\u81ea\u52a8\u6dfb\u52a0\u4e86 body\u3001html \u8282\u70b9\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u8fdb\u884c\u89e3\u6790\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = etree . tostring ( html ) print ( result . decode ( 'utf-8' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 72 ff04846d46 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = etree . tostring ( html ) 5 print ( result . decode ( 'utf-8' )) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u6b21\u7684\u8f93\u51fa\u7ed3\u679c\u591a\u4e86\u4e00\u4e2a DOCTYPE \u7684\u58f0\u660e\uff0c\u4e0d\u8fc7\u5bf9\u89e3\u6790\u65e0\u4efb\u4f55\u5f71\u54cd\u3002","title":"\u5b9e\u4f8b\u5f15\u5165"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_2","text":"\u6211\u4eec\u4e00\u822c\u4f1a\u7528 // \u5f00\u5934\u7684 XPath \u89c4\u5219\u6765\u9009\u53d6\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u4ee5\u524d\u9762\u7684 HTML \u6587\u672c\u4e3a\u4f8b\uff0c\u5982\u679c\u8981\u9009\u53d6\u6240\u6709\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//*' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 2e7 fb9353e92 > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//*' ) 4 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u4f7f\u7528 * \u4ee3\u8868\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a HTML \u6587\u672c\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u88ab\u83b7\u53d6\u3002 \u5f53\u7136\uff0c\u6b64\u5904\u5339\u914d\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8282\u70b9\u540d\u79f0\u3002\u5982\u679c\u60f3\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - c10fbe7f490a > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//li' ) 4 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002","title":"\u6240\u6709\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_3","text":"\u6211\u4eec\u901a\u8fc7 / \u6216 // \u5373\u53ef\u67e5\u627e\u5143\u7d20\u7684\u5b50\u8282\u70b9\u6216\u5b50\u5b59\u8282\u70b9\u3002\u5047\u5982\u73b0\u5728\u60f3\u9009\u62e9 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li/a' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - fb0a5f43925f > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li/a' ) 5 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u901a\u8fc7\u8ffd\u52a0 /a \u5373\u9009\u62e9\u4e86\u6240\u6709 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\u3002\u56e0\u4e3a //li \u7528\u4e8e\u9009\u4e2d\u6240\u6709 li \u8282\u70b9\uff0c/a \u7528\u4e8e\u9009\u4e2d li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u4e8c\u8005\u7ec4\u5408\u5728\u4e00\u8d77\u5373\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u7684\u6240\u6709\u76f4\u63a5 a \u5b50\u8282\u70b9\u3002 \u8fd9\u91cc\u8981\u6ce8\u610f / \u548c // \u7684\u533a\u522b\uff0c\u5176\u4e2d / \u7528\u4e8e\u83b7\u53d6 \u76f4\u63a5\u5b50\u8282\u70b9 \uff0c// \u7528\u4e8e\u83b7\u53d6\u5b50\u5b59\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u8981\u83b7\u53d6 ul \u8282\u70b9\u4e0b\u7684\u6240\u6709\u5b50\u5b59 a \u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//ul//a' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 452 ef7b48825 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//ul//a' ) 5 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd0\u884c\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002 \u4f46\u662f\u5982\u679c\u8fd9\u91cc\u7528 //ul/a \uff0c\u5c31\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u7ed3\u679c\u4e86\u3002\u56e0\u4e3a / \u7528\u4e8e\u83b7\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c\u5728 ul \u8282\u70b9\u4e0b\u6ca1\u6709\u76f4\u63a5\u7684 a \u5b50\u8282\u70b9\uff0c\u53ea\u6709 li \u8282\u70b9\uff0c\u6240\u4ee5\u65e0\u6cd5\u83b7\u53d6\u4efb\u4f55\u5339\u914d\u7ed3\u679c\uff1a","title":"\u5b50\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_4","text":"\u53ef\u4ee5\u901a\u8fc7\u5b50\u8282\u70b9\uff0c\u4f7f\u7528 .. \u6765\u67e5\u627e\u7236\u8282\u70b9\u3002 \u73b0\u5728\u9996\u5148\u9009\u4e2d href \u5c5e\u6027\u4e3a link4.html \u7684 a \u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5176\u7236\u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5176 class \u5c5e\u6027\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/../@class' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - afbca6a550a4 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//a[@href=\"link4.html\"]/../@class' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 parent:: \u6765\u83b7\u53d6\u7236\u8282\u70b9\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//a[@href=\"link4.html\"]/parent::*/@class' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 618 b9d6d1c71 > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//a[@href=\"link4.html\"]/parent::*/@class' ) 4 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002","title":"\u7236\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_5","text":"\u5728\u9009\u53d6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7528 @ \u7b26\u53f7\u8fdb\u884c\u5c5e\u6027\u8fc7\u6ee4\u3002\u6bd4\u5982\uff0c\u8fd9\u91cc\u5982\u679c\u8981\u9009\u53d6 class \u4e3a item-0 \u7684 li \u8282\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0: from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]' ) result --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 78768 c549146 > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//li[@class=\"item-0\"]' ) 4 result ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u52a0\u5165 [@class=\"item-0\"]\uff0c\u9650\u5236\u4e86\u8282\u70b9\u7684 class \u5c5e\u6027\u4e3a item-0\uff0c\u800c HTML \u6587\u672c\u4e2d\u7b26\u5408\u6761\u4ef6\u7684 li \u8282\u70b9\u6709\u4e24\u4e2a\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u8be5\u8fd4\u56de\u4e24\u4e2a\u5339\u914d\u5230\u7684\u5143\u7d20\u3002","title":"\u5c5e\u6027\u5339\u914d"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_6","text":"\u6211\u4eec\u7528 XPath \u4e2d\u7684 text \u65b9\u6cd5\u83b7\u53d6\u8282\u70b9\u4e2d\u7684\u6587\u672c\uff0c\u63a5\u4e0b\u6765\u5c1d\u8bd5\u83b7\u53d6\u524d\u9762 li \u8282\u70b9\u4e2d\u7684\u6587\u672c\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 6451679 f68d4 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li[@class=\"item-0\"]/text()' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u5947\u602a\u7684\u662f\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u83b7\u53d6\u5230\u4efb\u4f55\u6587\u672c\uff0c\u53ea\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a XPath \u4e2d text \u65b9\u6cd5\u524d\u9762\u662f /\uff0c\u800c\u6b64\u5904 / \u7684\u542b\u4e49\u662f\u9009\u53d6\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u5f88\u660e\u663e li \u7684\u76f4\u63a5\u5b50\u8282\u70b9\u90fd\u662f a \u8282\u70b9\uff0c\u6587\u672c\u90fd\u662f\u5728 a \u8282\u70b9\u5185\u90e8\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5339\u914d\u5230\u7684\u7ed3\u679c\u5c31\u662f\u88ab\u4fee\u6b63\u7684 li \u8282\u70b9\u5185\u90e8\u7684\u6362\u884c\u7b26\uff0c\u56e0\u4e3a\u81ea\u52a8\u4fee\u6b63\u7684 li \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u6362\u884c\u4e86\u3002 \u5373\u9009\u4e2d\u7684\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\uff1a < li class = \"item-0\" >< a href = \"link1.html\" > first item </ a ></ li > < li class = \"item-0\" >< a href = \"link5.html\" > fifth item </ a > </ li > \u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\u56e0\u4e3a\u81ea\u52a8\u4fee\u6b63\uff0cli \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u6dfb\u52a0\u7684\u65f6\u5019\u6362\u884c\u4e86\uff0c\u6240\u4ee5\u63d0\u53d6\u6587\u672c\u5f97\u5230\u7684\u552f\u4e00\u7ed3\u679c\u5c31\u662f li \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u548c a \u8282\u70b9\u7684\u5c3e\u6807\u7b7e\u4e4b\u95f4\u7684\u6362\u884c\u7b26\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u60f3\u83b7\u53d6 li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u5c31\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u5148\u9009\u53d6 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u4f7f\u7528 //\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e0b\u4e8c\u8005\u7684\u533a\u522b\u3002 \u9996\u5148\uff0c\u9009\u53d6\u5230 a \u8282\u70b9\u518d\u83b7\u53d6\u6587\u672c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f3945a2ca20a > in < module > ----> 1 from lxml import etree 2 html = etree . parse ( './test.html' , etree . HTMLParser ()) 3 result = html . xpath ( '//li[@class=\"item-0\"]/a/text()' ) 4 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u662f\u4e24\u4e2a\uff0c\u5185\u5bb9\u90fd\u662f\u5c5e\u6027\u4e3a item-0 \u7684 li \u8282\u70b9\u7684\u6587\u672c\uff0c\u8fd9\u4e5f\u5370\u8bc1\u4e86\u524d\u9762\u5c5e\u6027\u5339\u914d\u7684\u7ed3\u679c\u662f\u6b63\u786e\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u662f\u9010\u5c42\u9009\u53d6\u7684\uff0c\u5148\u9009\u53d6\u4e86 li \u8282\u70b9\uff0c\u53c8\u5229\u7528 / \u9009\u53d6\u4e86\u5176\u76f4\u63a5\u5b50\u8282\u70b9 a\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u6587\u672c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u6070\u597d\u662f\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684\u4e24\u4e2a\u7ed3\u679c\u3002 \u518d\u6765\u770b\u4e0b\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\uff08\u5373\u4f7f\u7528 //\uff09\u9009\u53d6\u7684\u7ed3\u679c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li[@class=\"item-0\"]//text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - c76ff2747af1 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li[@class=\"item-0\"]//text()' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a [ 'first item' , 'fifth item' , ' \\n ' ] ['first item', 'fifth item', '\\n '] \u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u7ed3\u679c\u662f 3 \u4e2a\u3002\u53ef\u60f3\u800c\u77e5\uff0c\u8fd9\u91cc\u662f\u9009\u53d6\u6240\u6709\u5b50\u5b59\u8282\u70b9\u7684\u6587\u672c\uff0c\u5176\u4e2d\u524d\u4e24\u4e2a\u5c31\u662f li \u7684\u5b50\u8282\u70b9 a \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u5373\u6362\u884c\u7b26\u3002 \u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u8981\u60f3\u83b7\u53d6\u5b50\u5b59\u8282\u70b9\u5185\u90e8\u7684\u6240\u6709\u6587\u672c\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528 // \u52a0 text \u65b9\u6cd5\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u83b7\u53d6\u5230\u6700\u5168\u9762\u7684\u6587\u672c\u4fe1\u606f\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u5939\u6742\u4e00\u4e9b\u6362\u884c\u7b26\u7b49\u7279\u6b8a\u5b57\u7b26\u3002\u5982\u679c\u60f3\u83b7\u53d6\u67d0\u4e9b\u7279\u5b9a\u5b50\u5b59\u8282\u70b9\u4e0b\u7684\u6240\u6709\u6587\u672c\uff0c\u53ef\u4ee5\u5148\u9009\u53d6\u5230\u7279\u5b9a\u7684\u5b50\u5b59\u8282\u70b9\uff0c\u7136\u540e\u518d\u8c03\u7528 text \u65b9\u6cd5\u65b9\u6cd5\u83b7\u53d6\u5176\u5185\u90e8\u6587\u672c\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u83b7\u53d6\u7684\u7ed3\u679c\u662f\u6574\u6d01\u7684\u3002","title":"\u6587\u672c\u83b7\u53d6"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_7","text":"\u6211\u4eec\u77e5\u9053\u7528 text \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8282\u70b9\u5185\u90e8\u6587\u672c\uff0c\u90a3\u4e48\u8282\u70b9\u5c5e\u6027\u8be5\u600e\u6837\u83b7\u53d6\u5462\uff1f\u5176\u5b9e\u8fd8\u662f\u7528 @\u7b26\u53f7\u5c31\u53ef\u4ee5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u83b7\u53d6\u6240\u6709 li \u8282\u70b9\u4e0b\u6240\u6709 a \u8282\u70b9\u7684 href \u5c5e\u6027\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from lxml import etree html = etree . parse ( './test.html' , etree . HTMLParser ()) result = html . xpath ( '//li/a/@href' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 017551 c05ab8 > in < module > ----> 1 from lxml import etree 2 3 html = etree . parse ( './test.html' , etree . HTMLParser ()) 4 result = html . xpath ( '//li/a/@href' ) 5 print ( result ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 @href \u5373\u53ef\u83b7\u53d6\u8282\u70b9\u7684 href \u5c5e\u6027\u3002\u6ce8\u610f\uff0c\u6b64\u5904\u548c\u5c5e\u6027\u5339\u914d\u7684\u65b9\u6cd5\u4e0d\u540c\uff0c\u5c5e\u6027\u5339\u914d\u662f\u4e2d\u62ec\u53f7\u52a0\u5c5e\u6027\u540d\u548c\u503c\u6765\u9650\u5b9a\u67d0\u4e2a\u5c5e\u6027\uff0c\u5982 [@href=\"link1.html\"]\uff0c\u800c\u6b64\u5904\u7684 @href \u6307\u7684\u662f\u83b7\u53d6\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\uff0c\u4e8c\u8005\u9700\u8981\u505a\u597d\u533a\u5206\u3002","title":"\u5c5e\u6027\u83b7\u53d6"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_8","text":"\u6709\u65f6\u5019\uff0c\u67d0\u4e9b\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u53ef\u80fd\u6709\u591a\u4e2a\u503c\uff0c\u4f8b\u5982\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[@class=\"li\"]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 6 a826abfe641 > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> 4 ''' 5 html = etree . HTML ( text ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc HTML \u6587\u672c\u4e2d li \u8282\u70b9\u7684 class \u5c5e\u6027\u6709\u4e24\u4e2a\u503c li \u548c li-first\uff0c\u6b64\u65f6\u5982\u679c\u8fd8\u60f3\u7528\u4e4b\u524d\u7684\u5c5e\u6027\u5339\u914d\u83b7\u53d6\uff0c\u5c31\u65e0\u6cd5\u5339\u914d\u4e86\u3002 \u8fd9\u65f6\u5c31\u9700\u8981\u7528 contains \u65b9\u6cd5\u4e86\uff0c\u4ee3\u7801\u53ef\u4ee5\u6539\u5199\u5982\u4e0b\uff1a from lxml import etree text = ''' <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\")]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - ed5bac55fbdf > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <li class=\"li li-first\"><a href=\"link.html\">first item</a></li> 4 ''' 5 html = etree . HTML ( text ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u6837\u901a\u8fc7 contains \u65b9\u6cd5\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u5c5e\u6027\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u5165\u5c5e\u6027\u503c\uff0c\u53ea\u8981\u6b64\u5c5e\u6027\u5305\u542b\u6240\u4f20\u5165\u7684\u5c5e\u6027\u503c\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u5339\u914d\u4e86\u3002 \u6b64\u79cd\u65b9\u5f0f\u5728\u67d0\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027\u6709\u591a\u4e2a\u503c\u65f6\u7ecf\u5e38\u7528\u5230\uff0c\u5982\u67d0\u4e2a\u8282\u70b9\u7684 class \u5c5e\u6027\u901a\u5e38\u6709\u591a\u4e2a\u3002","title":"\u5c5e\u6027\u591a\u503c\u5339\u914d"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_9","text":"\u53e6\u5916\uff0c\u6211\u4eec\u53ef\u80fd\u8fd8\u9047\u5230\u4e00\u79cd\u60c5\u51b5\uff0c\u90a3\u5c31\u662f\u6839\u636e\u591a\u4e2a\u5c5e\u6027\u786e\u5b9a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u540c\u65f6\u5339\u914d\u591a\u4e2a\u5c5e\u6027\u3002\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26 and \u6765\u8fde\u63a5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <li class=\"li li-first\" name=\"item\"><a href=\"link.html\">first item</a></li> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[contains(@class, \"li\") and @name=\"item\"]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - b2359a5935ab > in < module > ----> 1 from lxml import etree 2 text = ''' 3 <li class=\"li li-first\" name=\"item\"><a href=\"link.html\">first item</a></li> 4 ''' 5 html = etree . HTML ( text ) ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u7684 li \u8282\u70b9\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u5c5e\u6027 name\u3002\u8981\u786e\u5b9a\u8fd9\u4e2a\u8282\u70b9\uff0c\u9700\u8981\u540c\u65f6\u6839\u636e class \u548c name \u5c5e\u6027\u6765\u9009\u62e9\uff0c\u4e00\u4e2a\u6761\u4ef6\u662f class \u5c5e\u6027\u91cc\u9762\u5305\u542b li \u5b57\u7b26\u4e32\uff0c\u53e6\u4e00\u4e2a\u6761\u4ef6\u662f name \u5c5e\u6027\u4e3a item \u5b57\u7b26\u4e32\uff0c\u4e8c\u8005\u9700\u8981\u540c\u65f6\u6ee1\u8db3\uff0c\u9700\u8981\u7528 and \u64cd\u4f5c\u7b26\u76f8\u8fde\uff0c\u76f8\u8fde\u4e4b\u540e\u7f6e\u4e8e\u4e2d\u62ec\u53f7\u5185\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\u3002 \u8fd9\u91cc\u7684 and \u5176\u5b9e\u662f XPath \u4e2d\u7684\u8fd0\u7b97\u7b26\u3002\u53e6\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u8fd0\u7b97\u7b26\uff0c\u5982 or\u3001mod \u7b49\uff0c\u5728\u6b64\u603b\u7ed3\u4e3a\u4e0b\u8868\u3002 XPath\u8fd0\u7b97\u7b26 \u63cf \u8ff0 \u5b9e \u4f8b \u8fd4\u56de\u503c or \u6216 age=19 or age=20 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 21\uff0c\u5219\u8fd4\u56de false and \u4e0e age>19 and age<21 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false mod \u8ba1\u7b97\u9664\u6cd5\u7684\u4f59\u6570 5 mod 2 1 \u8ba1\u7b97\u4e24\u4e2a\u8282\u70b9\u96c6 //book + \u52a0\u6cd5 6 + 4 10 - \u51cf\u6cd5 6 - 4 2 * \u4e58\u6cd5 6 * 4 24 div \u9664\u6cd5 8 div 4 2 = \u7b49\u4e8e age=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false != \u4e0d\u7b49\u4e8e age!=19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false < \u5c0f\u4e8e age<19 \u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false <= \u5c0f\u4e8e\u6216\u7b49\u4e8e age<=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de false > \u5927\u4e8e age>19 \u5982\u679c age \u662f 20\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de false >= \u5927\u4e8e\u6216\u7b49\u4e8e age>=19 \u5982\u679c age \u662f 19\uff0c\u5219\u8fd4\u56de true\u3002\u5982\u679c age \u662f 18\uff0c\u5219\u8fd4\u56de false \u6b64\u8868\u53c2\u8003\u6765\u6e90\uff1a http://www.w3school.com.cn/xpath/xpath_operators.asp \u3002","title":"\u591a\u5c5e\u6027\u5339\u914d"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_10","text":"\u6709\u65f6\u5019\uff0c\u6211\u4eec\u5728\u9009\u62e9\u7684\u65f6\u5019\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u540c\u65f6\u5339\u914d\u4e86\u591a\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u53ea\u60f3\u8981\u5176\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u5982\u7b2c\u4e8c\u4e2a\u8282\u70b9\u6216\u8005\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u8fd9\u65f6\u53ef\u4ee5\u5229\u7528\u4e2d\u62ec\u53f7\u4f20\u5165\u7d22\u5f15\u7684\u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u6b21\u5e8f\u7684\u8282\u70b9\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\">first item</a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()]/a/text()' ) print ( result ) result = html . xpath ( '//li[position()<3]/a/text()' ) print ( result ) result = html . xpath ( '//li[last()-2]/a/text()' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 30140 d698020 > in < module > ----> 1 from lxml import etree 2 3 text = ''' 4 <div> 5 <ul> ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u7b2c\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u4f20\u5165\u6570\u5b57 1 \u5373\u53ef\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u548c\u4ee3\u7801\u4e2d\u4e0d\u540c\uff0c\u5e8f\u53f7\u662f\u4ee5 1 \u5f00\u5934\u7684\uff0c\u4e0d\u662f\u4ee5 0 \u5f00\u5934\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u5373\u53ef\uff0c\u8fd4\u56de\u7684\u4fbf\u662f\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u4f4d\u7f6e\u5c0f\u4e8e 3 \u7684 li \u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4f4d\u7f6e\u5e8f\u53f7\u4e3a 1 \u548c 2 \u7684\u8282\u70b9\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u524d\u4e24\u4e2a li \u8282\u70b9\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u5012\u6570\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u4e2d\u62ec\u53f7\u4e2d\u8c03\u7528 last \u65b9\u6cd5\u518d\u51cf\u53bb 2 \u5373\u53ef\u3002\u56e0\u4e3a last \u65b9\u6cd5\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\uff0c\u5728\u6b64\u57fa\u7840\u51cf 2 \u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 last\u3001position \u7b49\u65b9\u6cd5\u3002\u5728 XPath \u4e2d\uff0c\u63d0\u4f9b\u4e86 100 \u591a\u4e2a\u65b9\u6cd5\uff0c\u5305\u62ec\u5b58\u53d6\u3001\u6570\u503c\u3001\u5b57\u7b26\u4e32\u3001\u903b\u8f91\u3001\u8282\u70b9\u3001\u5e8f\u5217\u7b49\u5904\u7406\u529f\u80fd\uff0c\u5b83\u4eec\u7684\u5177\u4f53\u4f5c\u7528\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_functions.asp \u3002","title":"\u6309\u5e8f\u9009\u62e9"},{"location":"%E7%88%AC%E8%99%AB/13.1.lxml.html#_11","text":"XPath \u63d0\u4f9b\u4e86\u5f88\u591a\u8282\u70b9\u8f74\u9009\u62e9\u65b9\u6cd5\uff0c\u5305\u62ec\u83b7\u53d6\u5b50\u5143\u7d20\u3001\u5144\u5f1f\u5143\u7d20\u3001\u7236\u5143\u7d20\u3001\u7956\u5148\u5143\u7d20\u7b49\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from lxml import etree text = ''' <div> <ul> <li class=\"item-0\"><a href=\"link1.html\"><span>first item</span></a></li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-inactive\"><a href=\"link3.html\">third item</a></li> <li class=\"item-1\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a> </ul> </div> ''' html = etree . HTML ( text ) result = html . xpath ( '//li[1]/ancestor::*' ) print ( result ) result = html . xpath ( '//li[1]/ancestor::div' ) print ( result ) result = html . xpath ( '//li[1]/attribute::*' ) print ( result ) result = html . xpath ( '//li[1]/child::a[@href=\"link1.html\"]' ) print ( result ) result = html . xpath ( '//li[1]/descendant::span' ) print ( result ) result = html . xpath ( '//li[1]/following::*[2]' ) print ( result ) result = html . xpath ( '//li[1]/following-sibling::*' ) print ( result ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 5 d7fbf8ba4d6 > in < module > ----> 1 from lxml import etree 2 3 text = ''' 4 <div> 5 <ul> ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u7b2c\u4e00\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 ancestor \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u7956\u5148\u8282\u70b9\u3002\u5176\u540e\u9700\u8981\u8ddf\u4e24\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u8282\u70b9\u7684\u9009\u62e9\u5668\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 *\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u8282\u70b9\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed3\u679c\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u5305\u62ec html\u3001body\u3001div \u548c ul\u3002 \u7b2c\u4e8c\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u8fd9\u6b21\u5728\u5192\u53f7\u540e\u9762\u52a0\u4e86 div\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u53ea\u6709 div \u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u4e86\u3002 \u7b2c\u4e09\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 attribute \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5c5e\u6027\u503c\uff0c\u5176\u540e\u8ddf\u7684\u9009\u62e9\u5668\u8fd8\u662f *\uff0c\u8fd9\u4ee3\u8868\u83b7\u53d6\u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\uff0c\u8fd4\u56de\u503c\u5c31\u662f li \u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\u503c\u3002 \u7b2c\u56db\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 child \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u76f4\u63a5\u5b50\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\uff0c\u9009\u53d6 href \u5c5e\u6027\u4e3a link1.html \u7684 a \u8282\u70b9\u3002 \u7b2c\u4e94\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 descendant \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u5b50\u5b59\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u53c8\u52a0\u4e86\u9650\u5b9a\u6761\u4ef6\u83b7\u53d6 span \u8282\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u53ea\u5305\u542b span \u8282\u70b9\u800c\u4e0d\u5305\u542b a \u8282\u70b9\u3002 \u7b2c\u516d\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 following \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u867d\u7136\u4f7f\u7528\u7684\u662f * \u5339\u914d\uff0c\u4f46\u53c8\u52a0\u4e86\u7d22\u5f15\u9009\u62e9\uff0c\u6240\u4ee5\u53ea\u83b7\u53d6\u4e86\u7b2c\u4e8c\u4e2a\u540e\u7eed\u8282\u70b9\u3002 \u7b2c\u4e03\u6b21\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u8c03\u7528\u4e86 following-sibling \u8f74\uff0c\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u8282\u70b9\u4e4b\u540e\u7684\u6240\u6709\u540c\u7ea7\u8282\u70b9\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 * \u5339\u914d\uff0c\u6240\u4ee5\u83b7\u53d6\u4e86\u6240\u6709\u540e\u7eed\u540c\u7ea7\u8282\u70b9\u3002 \u4ee5\u4e0a\u662f XPath \u8f74\u7684\u7b80\u5355\u7528\u6cd5\uff0c\u66f4\u591a\u8f74\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\uff1a http://www.w3school.com.cn/xpath/xpath_axes.asp \u3002","title":"\u8282\u70b9\u8f74\u9009\u62e9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html","text":"Windows 10 Python 3.7.3 @ MSC v.1915 64 bit (AMD64) Latest build date 2020.04.11 \u521d\u59cb\u5316 \u50cf Beautiful Soup \u4e00\u6837\uff0c\u521d\u59cb\u5316 pyquery \u7684\u65f6\u5019\uff0c\u4e5f\u9700\u8981\u4f20\u5165 HTML \u6587\u672c\u6765\u521d\u59cb\u5316\u4e00\u4e2a PyQuery \u5bf9\u8c61\u3002\u5b83\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u6709\u591a\u79cd\uff0c\u6bd4\u5982\u76f4\u63a5\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u4f20\u5165 URL\uff0c\u4f20\u5165\u6587\u4ef6\u540d\uff0c\u7b49\u7b49\u3002 \u5b57\u7b26\u4e32\u521d\u59cb\u5316 html = ''' <div> <ul> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) doc ( 'li' ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 31 a1d150b3e9 > in < module > 11 ''' 12 ---> 13 from pyquery import PyQuery as pq 14 doc = pq(html) 15 doc('li') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 URL \u521d\u59cb\u5316 \u521d\u59cb\u5316\u7684\u53c2\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\u8fd8\u53ef\u4ee5\u4f20\u5165\u7f51\u9875\u7684 URL\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u6307\u5b9a\u53c2\u6570\u4e3a url \u5373\u53ef\uff1a from pyquery import PyQuery as pq doc = pq ( url = 'http://cuiqingcai.com' ) print ( doc ( 'title' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - e5e6fbbbbd1b > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( url = 'http://cuiqingcai.com' ) 3 print ( doc ( 'title' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 PyQuery \u5bf9\u8c61\u4f1a\u9996\u5148\u8bf7\u6c42\u8fd9\u4e2a URL\uff0c\u7136\u540e\u7528\u5f97\u5230\u7684 HTML \u5185\u5bb9\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u8fd9\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u7528\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002 \u5b83\u4e0e\u4e0b\u9762\u7684\u529f\u80fd\u662f\u76f8\u540c\u7684\uff1a from pyquery import PyQuery as pq import requests doc = pq ( requests . get ( 'http://cuiqingcai.com' ) . text ) print ( doc ( 'title' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f4629f0af834 > in < module > ----> 1 from pyquery import PyQuery as pq 2 import requests 3 doc = pq ( requests . get ( 'http://cuiqingcai.com' ) . text ) 4 print ( doc ( 'title' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u6587\u4ef6\u521d\u59cb\u5316 \u5f53\u7136\u9664\u4e86\u4f20\u9012\u4e00\u4e2a URL\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u7684\u6587\u4ef6\u540d\uff0c\u53c2\u6570\u6307\u5b9a\u4e3a filename \u5373\u53ef\uff1a from pyquery import PyQuery as pq doc = pq ( filename = 'test.html' ) print ( doc ( 'li' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 8 edfaa3f99e5 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( filename = 'test.html' ) 3 print ( doc ( 'li' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u9996\u5148\u8bfb\u53d6\u672c\u5730\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u7528\u6587\u4ef6\u5185\u5bb9\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002 \u4ee5\u4e0a 3 \u79cd\u521d\u59cb\u5316\u65b9\u5f0f\u5747\u53ef\uff0c\u6700\u5e38\u7528\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u662f\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u4f20\u9012\u3002 \u57fa\u672c CSS \u9009\u62e9\u5668 \u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b pyquery \u7684 CSS \u9009\u62e9\u5668\u7684\u7528\u6cd5\uff1a html = ''' <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) print ( doc ( '#container .list li' ), \" \\n \" ) print ( type ( doc ( '#container .list li' ))) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 07455 81 c5274 > in < module > 11 ''' 12 ---> 13 from pyquery import PyQuery as pq 14 doc = pq(html) 15 print(doc('#container .list li'), \" \\n \") G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u521d\u59cb\u5316 PyQuery \u5bf9\u8c61\u4e4b\u540e\uff0c\u4f20\u5165\u4e86\u4e00\u4e2a CSS \u9009\u62e9\u5668 #container .list li \uff0c\u5b83\u7684\u610f\u601d\u662f\u5148\u9009\u53d6 id \u4e3a container \u7684\u8282\u70b9\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u5185\u90e8\u7684 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8\u7684\u6240\u6709 li \u8282\u70b9\u3002\u7136\u540e\uff0c\u6253\u5370\u8f93\u51fa\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u6210\u529f\u83b7\u53d6\u5230\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u3002 \u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684\u67e5\u8be2\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c jQuery \u4e2d\u7684\u65b9\u6cd5\u7528\u6cd5\u4e5f\u5b8c\u5168\u76f8\u540c\u3002 \u67e5\u627e\u5b50\u8282\u70b9 \u67e5\u627e\u5b50\u8282\u70b9\u9700\u8981\u7528\u5230 find \u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f CSS \u9009\u62e9\u5668\uff0c\u6211\u4eec\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4e3a\u4f8b\uff1a from pyquery import PyQuery as pq doc = pq ( html ) items = doc ( '.list' ) print ( type ( items ), \" \\n \" ) print ( items ) lis = items . find ( 'li' ) print ( type ( lis ), \" \\n \" ) print ( lis ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 3799 d669e7b0 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 items = doc ( '.list' ) 4 print ( type ( items ), \" \\n \" ) 5 print ( items ) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 find() \u65b9\u6cd5\uff0c\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u9009\u53d6\u5176\u5185\u90e8\u7684 li \u8282\u70b9\uff0c\u6700\u540e\u6253\u5370\u8f93\u51fa\u3002\u53ef\u4ee5\u53d1\u73b0\uff0cfind() \u65b9\u6cd5\u4f1a\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u8282\u70b9\u9009\u62e9\u51fa\u6765\uff0c\u7ed3\u679c\u7684\u7c7b\u578b\u662f PyQuery \u7c7b\u578b\u3002 \u5176\u5b9e find \u7684\u67e5\u627e\u8303\u56f4\u662f\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u8282\u70b9\uff0c\u800c\u5982\u679c\u6211\u4eec\u53ea\u60f3\u67e5\u627e\u5b50\u8282\u70b9\uff0c\u90a3\u53ef\u4ee5\u7528 children \u65b9\u6cd5\uff1a lis = items . children () print ( type ( lis ), \" \\n \" ) print ( lis ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-452bf360e751> in <module> ----> 1 lis = items.children() 2 print(type(lis), \"\\n\") 3 print(lis) NameError: name 'items' is not defined \u5982\u679c\u8981\u7b5b\u9009\u6240\u6709\u5b50\u8282\u70b9\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u6bd4\u5982\u60f3\u7b5b\u9009\u51fa\u5b50\u8282\u70b9\u4e2d class \u4e3a active \u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5411 children() \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668.active\uff1a lis = items . children ( '.active' ) print ( lis ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-1d1023d72c55> in <module> ----> 1 lis = items.children('.active') 2 print(lis) NameError: name 'items' is not defined \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u7ed3\u679c\u5df2\u7ecf\u505a\u4e86\u7b5b\u9009\uff0c\u7559\u4e0b\u4e86 class \u4e3a active \u7684\u8282\u70b9\u3002 \u67e5\u627e\u7236\u8282\u70b9 \u6211\u4eec\u53ef\u4ee5\u7528 parent \u65b9\u6cd5\u6765\u83b7\u53d6\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) items = doc ( '.list' ) container = items . parent () print ( type ( container )) print ( container ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - ad976eaebf5c > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 items = doc('.list') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u7528.list \u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 parent \u65b9\u6cd5\u5f97\u5230\u5176\u7236\u8282\u70b9\uff0c\u5176\u7c7b\u578b\u4f9d\u7136\u662f PyQuery \u7c7b\u578b\u3002 \u8fd9\u91cc\u7684\u7236\u8282\u70b9\u662f\u8be5\u8282\u70b9\u7684\u76f4\u63a5\u7236\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u518d\u53bb\u67e5\u627e\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373\u7956\u5148\u8282\u70b9\u3002 \u4f46\u662f\u5982\u679c\u60f3\u83b7\u53d6\u67d0\u4e2a\u7956\u5148\u8282\u70b9\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u53ef\u4ee5\u7528 parents \u65b9\u6cd5\uff1a from pyquery import PyQuery as pq doc = pq ( html ) items = doc ( '.list' ) parents = items . parents () print ( type ( parents )) print ( parents ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - bde020348b13 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 items = doc ( '.list' ) 4 parents = items . parents () 5 print ( type ( parents )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u6709\u4e24\u4e2a\uff1a\u4e00\u4e2a\u662f class \u4e3a wrap \u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u662f id \u4e3a container \u7684\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cparents() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u6240\u6709\u7684\u7956\u5148\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u7b5b\u9009\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8bdd\uff0c\u53ef\u4ee5\u5411 parents \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u8fd4\u56de\u7956\u5148\u8282\u70b9\u4e2d\u7b26\u5408 CSS \u9009\u62e9\u5668\u7684\u8282\u70b9\uff1a parent = items . parents ( '.wrap' ) print ( parent ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-de1acd099015> in <module> ----> 1 parent = items.parents('.wrap') 2 print(parent) NameError: name 'items' is not defined \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u5c11\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u4e86 class \u4e3a wrap \u7684\u8282\u70b9\u3002 \u67e5\u627e\u5144\u5f1f\u8282\u70b9 \u524d\u9762\u6211\u4eec\u8bf4\u660e\u4e86\u5b50\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u7528\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cd\u8282\u70b9\uff0c\u90a3\u5c31\u662f\u5144\u5f1f\u8282\u70b9\u3002\u5982\u679c\u8981\u83b7\u53d6\u5144\u5f1f\u8282\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 siblings() \u65b9\u6cd5\u3002\u8fd9\u91cc\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4ee3\u7801\u4e3a\u4f8b\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ()) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - bb7c74ce6549 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 li = doc ( '.list .item-0.active' ) 4 print ( li . siblings ()) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u9996\u5148\u9009\u62e9 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8 class \u4e3a item-0 \u548c active \u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e09\u4e2a li \u8282\u70b9\u3002\u90a3\u4e48\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u7684\u5144\u5f1f\u8282\u70b9\u6709 4 \u4e2a\uff0c\u90a3\u5c31\u662f\u7b2c\u4e00\u3001\u4e8c\u3001\u56db\u3001\u4e94\u4e2a li \u8282\u70b9\u3002 \u5982\u679c\u8981\u7b5b\u9009\u67d0\u4e2a\u5144\u5f1f\u8282\u70b9\uff0c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5411 siblings \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u4ece\u6240\u6709\u5144\u5f1f\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u4e86\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ( '.active' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 84 d9472365b0 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 li = doc ( '.list .item-0.active' ) 4 print ( li . siblings ( '.active' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u7b5b\u9009\u4e86 class \u4e3a active \u7684\u8282\u70b9\uff0c\u901a\u8fc7\u521a\u624d\u7684\u7ed3\u679c\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cclass \u4e3a active \u7684\u5144\u5f1f\u8282\u70b9\u53ea\u6709\u7b2c\u56db\u4e2a li \u8282\u70b9\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u4e2a\u3002 \u904d\u5386 \u521a\u624d\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cpyquery \u7684\u9009\u62e9\u7ed3\u679c\u53ef\u80fd\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u4e2a\u8282\u70b9\uff0c\u7c7b\u578b\u90fd\u662f PyQuery \u7c7b\u578b\uff0c\u5e76\u6ca1\u6709\u8fd4\u56de\u50cf Beautiful Soup \u90a3\u6837\u7684\u5217\u8868\u3002 \u5bf9\u4e8e\u5355\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6210\u5b57\u7b26\u4e32\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) print ( str ( li )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 473195 efb0c7 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 li = doc ( '.item-0.active' ) 4 print ( li ) 5 print ( str ( li )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u5bf9\u4e8e\u591a\u4e2a\u8282\u70b9\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u904d\u5386\u6765\u83b7\u53d6\u4e86\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u628a\u6bcf\u4e00\u4e2a li \u8282\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u9700\u8981\u8c03\u7528 items \u65b9\u6cd5\uff1a from pyquery import PyQuery as pq doc = pq ( html ) lis = doc ( 'li' ) . items () print ( type ( lis )) for li in lis : print ( li , type ( li )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f239bfd53560 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 lis = doc ( 'li' ) . items () 4 print ( type ( lis )) 5 for li in lis : G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 items() \u65b9\u6cd5\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u904d\u5386\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u9010\u4e2a\u5f97\u5230 li \u8282\u70b9\u5bf9\u8c61\u4e86\uff0c\u5b83\u7684\u7c7b\u578b\u4e5f\u662f PyQuery \u7c7b\u578b\u3002\u6bcf\u4e2a li \u8282\u70b9\u8fd8\u53ef\u4ee5\u8c03\u7528\u524d\u9762\u6240\u8bf4\u7684\u65b9\u6cd5\u8fdb\u884c\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7eed\u67e5\u8be2\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7b49\uff0c\u975e\u5e38\u7075\u6d3b\u3002 \u83b7\u53d6\u4fe1\u606f \u63d0\u53d6\u5230\u8282\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u7684\u5f53\u7136\u662f\u63d0\u53d6\u8282\u70b9\u6240\u5305\u542b\u7684\u4fe1\u606f\u4e86\u3002\u6bd4\u8f83\u91cd\u8981\u7684\u4fe1\u606f\u6709\u4e24\u7c7b\uff0c\u4e00\u662f\u83b7\u53d6\u5c5e\u6027\uff0c\u4e8c\u662f\u83b7\u53d6\u6587\u672c\uff0c\u4e0b\u9762\u5206\u522b\u8fdb\u884c\u8bf4\u660e\u3002 \u83b7\u53d6\u5c5e\u6027 \u63d0\u53d6\u5230\u67d0\u4e2a PyQuery \u7c7b\u578b\u7684\u8282\u70b9\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 attr() \u65b9\u6cd5\u6765\u83b7\u53d6\u5c5e\u6027\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) a = doc ( '.item-0.active a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - b164646adfc4 > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 a = doc('.item-0.active a') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u9996\u5148\u9009\u4e2d class \u4e3a item-0 \u548c active \u7684 li \u8282\u70b9\u5185\u7684 a \u8282\u70b9\uff0c\u5b83\u7684\u7c7b\u578b\u662f PyQuery \u7c7b\u578b\u3002 \u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u3002\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u4f20\u5165\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u5c5e\u6027\u503c\u4e86\u3002 \u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 attr \u5c5e\u6027\u6765\u83b7\u53d6\u5c5e\u6027\uff0c\u7528\u6cd5\u5982\u4e0b\uff1a print ( a . attr . href ) ---------------------------------------------------------------------------AttributeError Traceback ( most recent call last ) < ipython - input - 1 - 4 ae3016252d4 > in < module > ----> 1 print(a.attr.href) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pandas \\ core \\ generic . py in __getattr__ ( self , name ) 5272 if self . _info_axis . _can_hold_identifiers_and_holds_name ( name ) : 5273 return self [ name ] -> 5274 return object . __getattribute__ ( self , name ) 5275 5276 def __setattr__ ( self , name : str , value ) -> None : AttributeError : 'DataFrame' object has no attribute 'attr' \u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u679c\u5b8c\u5168\u4e00\u6837\u3002 \u5982\u679c\u9009\u4e2d\u7684\u662f\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u4f1a\u51fa\u73b0\u600e\u6837\u7684\u7ed3\u679c\u5462\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a a = doc ( 'a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) print ( a . attr . href ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-70e6043e550d> in <module> ----> 1 a = doc('a') 2 print(a, type(a)) 3 print(a.attr('href')) 4 print(a.attr.href) NameError: name 'doc' is not defined \u7167\u7406\u6765\u8bf4\uff0c\u6211\u4eec\u9009\u4e2d\u7684 a \u8282\u70b9\u5e94\u8be5\u6709 4 \u4e2a\uff0c\u800c\u4e14\u6253\u5370\u7ed3\u679c\u4e5f\u5e94\u8be5\u662f 4 \u4e2a\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u8c03\u7528 attr \u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de\u7ed3\u679c\u5374\u53ea\u662f\u7b2c\u4e00\u4e2a\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5f53\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u591a\u4e2a\u8282\u70b9\u65f6\uff0c\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u53ea\u4f1a\u5f97\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002 \u90a3\u4e48\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u6240\u6709\u7684 a \u8282\u70b9\u7684\u5c5e\u6027\uff0c\u5c31\u8981\u7528\u5230\u524d\u9762\u6240\u8bf4\u7684\u904d\u5386\u4e86\uff1a from pyquery import PyQuery as pq doc = pq ( html ) a = doc ( 'a' ) for item in a . items (): print ( item . attr ( 'href' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - b915e71352d2 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 a = doc ( 'a' ) 4 for item in a . items (): 5 print ( item . attr ( 'href' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u56e0\u6b64\uff0c\u5728\u8fdb\u884c\u5c5e\u6027\u83b7\u53d6\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u8fd4\u56de\u8282\u70b9\u662f\u4e00\u4e2a\u8fd8\u662f\u591a\u4e2a\uff0c\u5982\u679c\u662f\u591a\u4e2a\uff0c\u5219\u9700\u8981\u904d\u5386\u624d\u80fd\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002 \u83b7\u53d6\u6587\u672c \u83b7\u53d6\u8282\u70b9\u4e4b\u540e\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u64cd\u4f5c\u5c31\u662f\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4e86\uff0c\u6b64\u65f6\u53ef\u4ee5\u8c03\u7528 text \u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) a = doc ( '.item-0.active a' ) print ( a ) print ( a . text ()) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 93 b4cb226c5f > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 a = doc('.item-0.active a') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u9996\u5148\u9009\u4e2d\u4e00\u4e2a a \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 text \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4fe1\u606f\u3002\u6b64\u65f6\u5b83\u4f1a\u5ffd\u7565\u6389\u8282\u70b9\u5185\u90e8\u5305\u542b\u7684\u6240\u6709 HTML\uff0c\u53ea\u8fd4\u56de\u7eaf\u6587\u5b57\u5185\u5bb9\u3002 \u4f46\u5982\u679c\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u8282\u70b9\u5185\u90e8\u7684 HTML \u6587\u672c\uff0c\u5c31\u8981\u7528 html \u65b9\u6cd5\u4e86\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) print ( li . html ()) \u8fd9\u91cc\u6211\u4eec\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 html() \u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u662f li \u8282\u70b9\u5185\u7684\u6240\u6709 HTML \u6587\u672c\u3002 \u8fd9\u91cc\u540c\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e2d\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0ctext() \u6216 html() \u4f1a\u8fd4\u56de\u4ec0\u4e48\u5185\u5bb9\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( 'li' ) print ( li . html ()) print ( li . text ()) print ( type ( li . text ()) File \"<ipython-input-1-dde919c3f270>\", line 18 print(type(li.text()) ^ SyntaxError: unexpected EOF while parsing \u7ed3\u679c\u53ef\u80fd\u6bd4\u8f83\u51fa\u4e4e\u610f\u6599\uff0chtml \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u800c text \u5219\u8fd4\u56de\u4e86\u6240\u6709\u7684 li \u8282\u70b9\u5185\u90e8\u7684\u7eaf\u6587\u672c\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\u5f00\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\uff0c\u5982\u679c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u60f3\u8981\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u5219\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\u3002\u800c text() \u65b9\u6cd5\u4e0d\u9700\u8981\u904d\u5386\u5c31\u53ef\u4ee5\u83b7\u53d6\uff0c\u5b83\u5c06\u6240\u6709\u8282\u70b9\u53d6\u6587\u672c\u4e4b\u540e\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u8282\u70b9\u64cd\u4f5c pyquery \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u6765\u5bf9\u8282\u70b9\u8fdb\u884c\u52a8\u6001\u4fee\u6539\uff0c\u6bd4\u5982\u4e3a\u67d0\u4e2a\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a class\uff0c\u79fb\u9664\u67d0\u4e2a\u8282\u70b9\u7b49\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6709\u65f6\u5019\u4f1a\u4e3a\u63d0\u53d6\u4fe1\u606f\u5e26\u6765\u6781\u5927\u7684\u4fbf\u5229\u3002 \u7531\u4e8e\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\u592a\u591a\uff0c\u4e0b\u9762\u4e3e\u51e0\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5b83\u7684\u7528\u6cd5\u3002 addClass \u548c removeClass \u6211\u4eec\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) li . removeClass ( 'active' ) print ( li ) li . addClass ( 'active' ) print ( li ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - ee3763a29e9c > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 li = doc('.item-0.active') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u9996\u5148\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 removeClass() \u65b9\u6cd5\uff0c\u5c06 li \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u79fb\u9664\uff0c\u540e\u6765\u53c8\u8c03\u7528 addClass() \u65b9\u6cd5\uff0c\u5c06 class \u6dfb\u52a0\u56de\u6765\u3002\u6bcf\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u6253\u5370\u8f93\u51fa\u5f53\u524d li \u8282\u70b9\u7684\u5185\u5bb9\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u5171\u8f93\u51fa\u4e86 3 \u6b21\u3002\u7b2c\u4e8c\u6b21\u8f93\u51fa\u65f6\uff0cli \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u88ab\u79fb\u9664\u4e86\uff0c\u7b2c\u4e09\u6b21 class \u53c8\u6dfb\u52a0\u56de\u6765\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0caddClass \u548c removeClass \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u6539\u53d8\u8282\u70b9\u7684 class \u5c5e\u6027\u3002 attr\u3001text\u3001html \u5f53\u7136\uff0c\u9664\u4e86\u64cd\u4f5c class \u8fd9\u4e2a\u5c5e\u6027\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528 attr \u65b9\u6cd5\u5bf9\u5c5e\u6027\u8fdb\u884c\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <ul class=\"list\"> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> </ul> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) li . attr ( 'name' , 'link' ) print ( li ) li . text ( 'changed item' ) print ( li ) li . html ( '<span>changed item</span>' ) print ( li ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f56d8beede07 > in < module > 4 </ ul > 5 ''' ----> 6 from pyquery import PyQuery as pq 7 doc = pq(html) 8 li = doc('.item-0.active') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u9009\u4e2d li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u6765\u4fee\u6539\u5c5e\u6027\uff0c\u5176\u4e2d\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u503c\u3002\u63a5\u7740\uff0c\u8c03\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u4e09\u6b21\u64cd\u4f5c\u540e\uff0c\u5206\u522b\u6253\u5370\u8f93\u51fa\u5f53\u524d\u7684 li \u8282\u70b9\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 attr \u65b9\u6cd5\u540e\uff0cli \u8282\u70b9\u591a\u4e86\u4e00\u4e2a\u539f\u672c\u4e0d\u5b58\u5728\u7684\u5c5e\u6027 name\uff0c\u5176\u503c\u4e3a link\u3002\u63a5\u7740\u8c03\u7528 text \u65b9\u6cd5\uff0c\u4f20\u5165\u6587\u672c\u4e4b\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u5168\u88ab\u6539\u4e3a\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u6587\u672c\u4e86\u3002\u6700\u540e\uff0c\u8c03\u7528 html \u65b9\u6cd5\u4f20\u5165 HTML \u6587\u672c\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u53c8\u53d8\u4e3a\u4f20\u5165\u7684 HTML \u6587\u672c\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0c\u5982\u679c attr \u65b9\u6cd5\u53ea\u4f20\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5c5e\u6027\u540d\uff0c\u5219\u662f\u83b7\u53d6\u8fd9\u4e2a\u5c5e\u6027\u503c\uff1b\u5982\u679c\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u5c5e\u6027\u503c\u3002text \u548c html \u65b9\u6cd5\u5982\u679c\u4e0d\u4f20\u53c2\u6570\uff0c\u5219\u662f\u83b7\u53d6\u8282\u70b9\u5185\u7eaf\u6587\u672c\u548c HTML \u6587\u672c\uff1b\u5982\u679c\u4f20\u5165\u53c2\u6570\uff0c\u5219\u8fdb\u884c\u8d4b\u503c\u3002 remove \u987e\u540d\u601d\u4e49\uff0cremove \u65b9\u6cd5\u5c31\u662f\u79fb\u9664\uff0c\u5b83\u6709\u65f6\u4f1a\u4e3a\u4fe1\u606f\u7684\u63d0\u53d6\u5e26\u6765\u975e\u5e38\u5927\u7684\u4fbf\u5229\u3002\u4e0b\u9762\u6709\u4e00\u6bb5 HTML \u6587\u672c\uff1a html = ''' <div class=\"wrap\"> Hello, World <p>This is a paragraph.</p> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) wrap = doc ( '.wrap' ) print ( wrap . text ()) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - e5ba1f107800 > in < module > 5 </ div > 6 ''' ----> 7 from pyquery import PyQuery as pq 8 doc = pq(html) 9 wrap = doc('.wrap') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u73b0\u5728\u60f3\u63d0\u53d6 Hello, World \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u8981 p \u8282\u70b9\u5185\u90e8\u7684\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u600e\u6837\u64cd\u4f5c\u5462\uff1f \u8fd9\u91cc\u76f4\u63a5\u5148\u5c1d\u8bd5\u63d0\u53d6 class \u4e3a wrap \u7684\u8282\u70b9\u7684\u5185\u5bb9\uff0c\u770b\u770b\u662f\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a Hello, World This is a paragraph. \u8fd9\u4e2a\u7ed3\u679c\u8fd8\u5305\u542b\u4e86\u5185\u90e8\u7684 p \u8282\u70b9\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 text \u628a\u6240\u6709\u7684\u7eaf\u6587\u672c\u5168\u63d0\u53d6\u51fa\u6765\u4e86\u3002\u5982\u679c\u6211\u4eec\u60f3\u53bb\u6389 p \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u53ef\u4ee5\u9009\u62e9\u518d\u628a p \u8282\u70b9\u5185\u7684\u6587\u672c\u63d0\u53d6\u4e00\u904d\uff0c\u7136\u540e\u4ece\u6574\u4e2a\u7ed3\u679c\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5b50\u4e32\uff0c\u4f46\u8fd9\u4e2a\u505a\u6cd5\u660e\u663e\u6bd4\u8f83\u70e6\u7410\u3002 \u8fd9\u65f6 remove \u65b9\u6cd5\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u8fd9\u4e48\u505a: wrap . find ( 'p' ) . remove () print ( wrap . text ()) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-30d933010338> in <module> ----> 1 wrap.find('p').remove() 2 print(wrap.text()) NameError: name 'wrap' is not defined \u9996\u5148\u9009\u4e2d p \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 remove() \u65b9\u6cd5\u5c06\u5176\u79fb\u9664\uff0c\u7136\u540e\u8fd9\u65f6 wrap \u5185\u90e8\u5c31\u53ea\u5269\u4e0b Hello, World \u8fd9\u53e5\u8bdd\u4e86\uff0c\u7136\u540e\u518d\u5229\u7528 text() \u65b9\u6cd5\u63d0\u53d6\u5373\u53ef\u3002 \u53e6\u5916\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 append()\u3001empty() \u548c prepend() \u7b49\u65b9\u6cd5\uff0c\u5b83\u4eec\u548c jQuery \u7684\u7528\u6cd5\u5b8c\u5168\u4e00\u81f4\uff0c\u8be6\u7ec6\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a http://pyquery.readthedocs.io/en/latest/api.html \u4f2a\u7c7b\u9009\u62e9\u5668 CSS \u9009\u62e9\u5668\u4e4b\u6240\u4ee5\u5f3a\u5927\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u539f\u56e0\uff0c\u90a3\u5c31\u662f\u5b83\u652f\u6301\u591a\u79cd\u591a\u6837\u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f8b\u5982\u9009\u62e9\u7b2c\u4e00\u4e2a\u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3001\u5947\u5076\u6570\u8282\u70b9\u3001\u5305\u542b\u67d0\u4e00\u6587\u672c\u7684\u8282\u70b9\u7b49\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( 'li:first-child' ) print ( li ) li = doc ( 'li:last-child' ) print ( li ) li = doc ( 'li:nth-child(2)' ) print ( li ) li = doc ( 'li:gt(2)' ) print ( li ) li = doc ( 'li:nth-child(2n)' ) print ( li ) li = doc ( 'li:contains(second)' ) print ( li ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - fc296508a0f6 > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 li = doc('li:first-child') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 CSS3 \u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f9d\u6b21\u9009\u62e9\u4e86\u7b2c\u4e00\u4e2a li \u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e8c\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e09\u4e2a li \u4e4b\u540e\u7684 li \u8282\u70b9\u3001\u5076\u6570\u4f4d\u7f6e\u7684 li \u8282\u70b9\u3001\u5305\u542b second \u6587\u672c\u7684 li \u8282\u70b9\u3002 \u5173\u4e8e CSS \u9009\u62e9\u5668\u7684\u66f4\u591a\u7528\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003 http://www.w3school.com.cn/css/index.asp \u3002","title":"13.3.pyquery"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_1","text":"\u50cf Beautiful Soup \u4e00\u6837\uff0c\u521d\u59cb\u5316 pyquery \u7684\u65f6\u5019\uff0c\u4e5f\u9700\u8981\u4f20\u5165 HTML \u6587\u672c\u6765\u521d\u59cb\u5316\u4e00\u4e2a PyQuery \u5bf9\u8c61\u3002\u5b83\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u6709\u591a\u79cd\uff0c\u6bd4\u5982\u76f4\u63a5\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u4f20\u5165 URL\uff0c\u4f20\u5165\u6587\u4ef6\u540d\uff0c\u7b49\u7b49\u3002","title":"\u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_2","text":"html = ''' <div> <ul> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) doc ( 'li' ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 31 a1d150b3e9 > in < module > 11 ''' 12 ---> 13 from pyquery import PyQuery as pq 14 doc = pq(html) 15 doc('li') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002","title":"\u5b57\u7b26\u4e32\u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#url","text":"\u521d\u59cb\u5316\u7684\u53c2\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\u8fd8\u53ef\u4ee5\u4f20\u5165\u7f51\u9875\u7684 URL\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u6307\u5b9a\u53c2\u6570\u4e3a url \u5373\u53ef\uff1a from pyquery import PyQuery as pq doc = pq ( url = 'http://cuiqingcai.com' ) print ( doc ( 'title' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - e5e6fbbbbd1b > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( url = 'http://cuiqingcai.com' ) 3 print ( doc ( 'title' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 PyQuery \u5bf9\u8c61\u4f1a\u9996\u5148\u8bf7\u6c42\u8fd9\u4e2a URL\uff0c\u7136\u540e\u7528\u5f97\u5230\u7684 HTML \u5185\u5bb9\u5b8c\u6210\u521d\u59cb\u5316\uff0c\u8fd9\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u7528\u7f51\u9875\u7684\u6e90\u4ee3\u7801\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002 \u5b83\u4e0e\u4e0b\u9762\u7684\u529f\u80fd\u662f\u76f8\u540c\u7684\uff1a from pyquery import PyQuery as pq import requests doc = pq ( requests . get ( 'http://cuiqingcai.com' ) . text ) print ( doc ( 'title' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f4629f0af834 > in < module > ----> 1 from pyquery import PyQuery as pq 2 import requests 3 doc = pq ( requests . get ( 'http://cuiqingcai.com' ) . text ) 4 print ( doc ( 'title' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002","title":"URL \u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_3","text":"\u5f53\u7136\u9664\u4e86\u4f20\u9012\u4e00\u4e2a URL\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u672c\u5730\u7684\u6587\u4ef6\u540d\uff0c\u53c2\u6570\u6307\u5b9a\u4e3a filename \u5373\u53ef\uff1a from pyquery import PyQuery as pq doc = pq ( filename = 'test.html' ) print ( doc ( 'li' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 8 edfaa3f99e5 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( filename = 'test.html' ) 3 print ( doc ( 'li' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u9996\u5148\u8bfb\u53d6\u672c\u5730\u7684\u6587\u4ef6\u5185\u5bb9\uff0c\u7136\u540e\u7528\u6587\u4ef6\u5185\u5bb9\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 PyQuery \u7c7b\u6765\u521d\u59cb\u5316\u3002 \u4ee5\u4e0a 3 \u79cd\u521d\u59cb\u5316\u65b9\u5f0f\u5747\u53ef\uff0c\u6700\u5e38\u7528\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u662f\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u4f20\u9012\u3002","title":"\u6587\u4ef6\u521d\u59cb\u5316"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#css","text":"\u6211\u4eec\u9996\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b pyquery \u7684 CSS \u9009\u62e9\u5668\u7684\u7528\u6cd5\uff1a html = ''' <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) print ( doc ( '#container .list li' ), \" \\n \" ) print ( type ( doc ( '#container .list li' ))) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 07455 81 c5274 > in < module > 11 ''' 12 ---> 13 from pyquery import PyQuery as pq 14 doc = pq(html) 15 print(doc('#container .list li'), \" \\n \") G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u521d\u59cb\u5316 PyQuery \u5bf9\u8c61\u4e4b\u540e\uff0c\u4f20\u5165\u4e86\u4e00\u4e2a CSS \u9009\u62e9\u5668 #container .list li \uff0c\u5b83\u7684\u610f\u601d\u662f\u5148\u9009\u53d6 id \u4e3a container \u7684\u8282\u70b9\uff0c\u7136\u540e\u518d\u9009\u53d6\u5176\u5185\u90e8\u7684 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8\u7684\u6240\u6709 li \u8282\u70b9\u3002\u7136\u540e\uff0c\u6253\u5370\u8f93\u51fa\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u6210\u529f\u83b7\u53d6\u5230\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u3002 \u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684\u67e5\u8be2\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c jQuery \u4e2d\u7684\u65b9\u6cd5\u7528\u6cd5\u4e5f\u5b8c\u5168\u76f8\u540c\u3002","title":"\u57fa\u672c CSS \u9009\u62e9\u5668"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_4","text":"\u67e5\u627e\u5b50\u8282\u70b9\u9700\u8981\u7528\u5230 find \u65b9\u6cd5\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f CSS \u9009\u62e9\u5668\uff0c\u6211\u4eec\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4e3a\u4f8b\uff1a from pyquery import PyQuery as pq doc = pq ( html ) items = doc ( '.list' ) print ( type ( items ), \" \\n \" ) print ( items ) lis = items . find ( 'li' ) print ( type ( lis ), \" \\n \" ) print ( lis ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 3799 d669e7b0 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 items = doc ( '.list' ) 4 print ( type ( items ), \" \\n \" ) 5 print ( items ) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 find() \u65b9\u6cd5\uff0c\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u9009\u53d6\u5176\u5185\u90e8\u7684 li \u8282\u70b9\uff0c\u6700\u540e\u6253\u5370\u8f93\u51fa\u3002\u53ef\u4ee5\u53d1\u73b0\uff0cfind() \u65b9\u6cd5\u4f1a\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u6240\u6709\u8282\u70b9\u9009\u62e9\u51fa\u6765\uff0c\u7ed3\u679c\u7684\u7c7b\u578b\u662f PyQuery \u7c7b\u578b\u3002 \u5176\u5b9e find \u7684\u67e5\u627e\u8303\u56f4\u662f\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u8282\u70b9\uff0c\u800c\u5982\u679c\u6211\u4eec\u53ea\u60f3\u67e5\u627e\u5b50\u8282\u70b9\uff0c\u90a3\u53ef\u4ee5\u7528 children \u65b9\u6cd5\uff1a lis = items . children () print ( type ( lis ), \" \\n \" ) print ( lis ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-452bf360e751> in <module> ----> 1 lis = items.children() 2 print(type(lis), \"\\n\") 3 print(lis) NameError: name 'items' is not defined \u5982\u679c\u8981\u7b5b\u9009\u6240\u6709\u5b50\u8282\u70b9\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u6bd4\u5982\u60f3\u7b5b\u9009\u51fa\u5b50\u8282\u70b9\u4e2d class \u4e3a active \u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5411 children() \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668.active\uff1a lis = items . children ( '.active' ) print ( lis ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-1d1023d72c55> in <module> ----> 1 lis = items.children('.active') 2 print(lis) NameError: name 'items' is not defined \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u7ed3\u679c\u5df2\u7ecf\u505a\u4e86\u7b5b\u9009\uff0c\u7559\u4e0b\u4e86 class \u4e3a active \u7684\u8282\u70b9\u3002","title":"\u67e5\u627e\u5b50\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_5","text":"\u6211\u4eec\u53ef\u4ee5\u7528 parent \u65b9\u6cd5\u6765\u83b7\u53d6\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) items = doc ( '.list' ) container = items . parent () print ( type ( container )) print ( container ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - ad976eaebf5c > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 items = doc('.list') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u7528.list \u9009\u53d6 class \u4e3a list \u7684\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 parent \u65b9\u6cd5\u5f97\u5230\u5176\u7236\u8282\u70b9\uff0c\u5176\u7c7b\u578b\u4f9d\u7136\u662f PyQuery \u7c7b\u578b\u3002 \u8fd9\u91cc\u7684\u7236\u8282\u70b9\u662f\u8be5\u8282\u70b9\u7684\u76f4\u63a5\u7236\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u518d\u53bb\u67e5\u627e\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373\u7956\u5148\u8282\u70b9\u3002 \u4f46\u662f\u5982\u679c\u60f3\u83b7\u53d6\u67d0\u4e2a\u7956\u5148\u8282\u70b9\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u53ef\u4ee5\u7528 parents \u65b9\u6cd5\uff1a from pyquery import PyQuery as pq doc = pq ( html ) items = doc ( '.list' ) parents = items . parents () print ( type ( parents )) print ( parents ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - bde020348b13 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 items = doc ( '.list' ) 4 parents = items . parents () 5 print ( type ( parents )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u6709\u4e24\u4e2a\uff1a\u4e00\u4e2a\u662f class \u4e3a wrap \u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u662f id \u4e3a container \u7684\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cparents() \u65b9\u6cd5\u4f1a\u8fd4\u56de\u6240\u6709\u7684\u7956\u5148\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u7b5b\u9009\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8bdd\uff0c\u53ef\u4ee5\u5411 parents \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u8fd4\u56de\u7956\u5148\u8282\u70b9\u4e2d\u7b26\u5408 CSS \u9009\u62e9\u5668\u7684\u8282\u70b9\uff1a parent = items . parents ( '.wrap' ) print ( parent ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-de1acd099015> in <module> ----> 1 parent = items.parents('.wrap') 2 print(parent) NameError: name 'items' is not defined \u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7ed3\u679c\u5c11\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u4e86 class \u4e3a wrap \u7684\u8282\u70b9\u3002","title":"\u67e5\u627e\u7236\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_6","text":"\u524d\u9762\u6211\u4eec\u8bf4\u660e\u4e86\u5b50\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u7528\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cd\u8282\u70b9\uff0c\u90a3\u5c31\u662f\u5144\u5f1f\u8282\u70b9\u3002\u5982\u679c\u8981\u83b7\u53d6\u5144\u5f1f\u8282\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 siblings() \u65b9\u6cd5\u3002\u8fd9\u91cc\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 HTML \u4ee3\u7801\u4e3a\u4f8b\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ()) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - bb7c74ce6549 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 li = doc ( '.list .item-0.active' ) 4 print ( li . siblings ()) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u9996\u5148\u9009\u62e9 class \u4e3a list \u7684\u8282\u70b9\u5185\u90e8 class \u4e3a item-0 \u548c active \u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e09\u4e2a li \u8282\u70b9\u3002\u90a3\u4e48\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u7684\u5144\u5f1f\u8282\u70b9\u6709 4 \u4e2a\uff0c\u90a3\u5c31\u662f\u7b2c\u4e00\u3001\u4e8c\u3001\u56db\u3001\u4e94\u4e2a li \u8282\u70b9\u3002 \u5982\u679c\u8981\u7b5b\u9009\u67d0\u4e2a\u5144\u5f1f\u8282\u70b9\uff0c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5411 siblings \u65b9\u6cd5\u4f20\u5165 CSS \u9009\u62e9\u5668\uff0c\u8fd9\u6837\u5c31\u4f1a\u4ece\u6240\u6709\u5144\u5f1f\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8282\u70b9\u4e86\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.list .item-0.active' ) print ( li . siblings ( '.active' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 84 d9472365b0 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 li = doc ( '.list .item-0.active' ) 4 print ( li . siblings ( '.active' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u7b5b\u9009\u4e86 class \u4e3a active \u7684\u8282\u70b9\uff0c\u901a\u8fc7\u521a\u624d\u7684\u7ed3\u679c\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cclass \u4e3a active \u7684\u5144\u5f1f\u8282\u70b9\u53ea\u6709\u7b2c\u56db\u4e2a li \u8282\u70b9\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u4e2a\u3002","title":"\u67e5\u627e\u5144\u5f1f\u8282\u70b9"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_7","text":"\u521a\u624d\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cpyquery \u7684\u9009\u62e9\u7ed3\u679c\u53ef\u80fd\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u4e2a\u8282\u70b9\uff0c\u7c7b\u578b\u90fd\u662f PyQuery \u7c7b\u578b\uff0c\u5e76\u6ca1\u6709\u8fd4\u56de\u50cf Beautiful Soup \u90a3\u6837\u7684\u5217\u8868\u3002 \u5bf9\u4e8e\u5355\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6210\u5b57\u7b26\u4e32\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) print ( str ( li )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 473195 efb0c7 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 li = doc ( '.item-0.active' ) 4 print ( li ) 5 print ( str ( li )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u5bf9\u4e8e\u591a\u4e2a\u8282\u70b9\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u904d\u5386\u6765\u83b7\u53d6\u4e86\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u628a\u6bcf\u4e00\u4e2a li \u8282\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u9700\u8981\u8c03\u7528 items \u65b9\u6cd5\uff1a from pyquery import PyQuery as pq doc = pq ( html ) lis = doc ( 'li' ) . items () print ( type ( lis )) for li in lis : print ( li , type ( li )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f239bfd53560 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 lis = doc ( 'li' ) . items () 4 print ( type ( lis )) 5 for li in lis : G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 items() \u65b9\u6cd5\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u904d\u5386\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u9010\u4e2a\u5f97\u5230 li \u8282\u70b9\u5bf9\u8c61\u4e86\uff0c\u5b83\u7684\u7c7b\u578b\u4e5f\u662f PyQuery \u7c7b\u578b\u3002\u6bcf\u4e2a li \u8282\u70b9\u8fd8\u53ef\u4ee5\u8c03\u7528\u524d\u9762\u6240\u8bf4\u7684\u65b9\u6cd5\u8fdb\u884c\u9009\u62e9\uff0c\u6bd4\u5982\u7ee7\u7eed\u67e5\u8be2\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u67d0\u4e2a\u7956\u5148\u8282\u70b9\u7b49\uff0c\u975e\u5e38\u7075\u6d3b\u3002","title":"\u904d\u5386"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_8","text":"\u63d0\u53d6\u5230\u8282\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u7684\u5f53\u7136\u662f\u63d0\u53d6\u8282\u70b9\u6240\u5305\u542b\u7684\u4fe1\u606f\u4e86\u3002\u6bd4\u8f83\u91cd\u8981\u7684\u4fe1\u606f\u6709\u4e24\u7c7b\uff0c\u4e00\u662f\u83b7\u53d6\u5c5e\u6027\uff0c\u4e8c\u662f\u83b7\u53d6\u6587\u672c\uff0c\u4e0b\u9762\u5206\u522b\u8fdb\u884c\u8bf4\u660e\u3002","title":"\u83b7\u53d6\u4fe1\u606f"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_9","text":"\u63d0\u53d6\u5230\u67d0\u4e2a PyQuery \u7c7b\u578b\u7684\u8282\u70b9\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 attr() \u65b9\u6cd5\u6765\u83b7\u53d6\u5c5e\u6027\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) a = doc ( '.item-0.active a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - b164646adfc4 > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 a = doc('.item-0.active a') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u9996\u5148\u9009\u4e2d class \u4e3a item-0 \u548c active \u7684 li \u8282\u70b9\u5185\u7684 a \u8282\u70b9\uff0c\u5b83\u7684\u7c7b\u578b\u662f PyQuery \u7c7b\u578b\u3002 \u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u3002\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u4f20\u5165\u5c5e\u6027\u7684\u540d\u79f0\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u5c5e\u6027\u503c\u4e86\u3002 \u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 attr \u5c5e\u6027\u6765\u83b7\u53d6\u5c5e\u6027\uff0c\u7528\u6cd5\u5982\u4e0b\uff1a print ( a . attr . href ) ---------------------------------------------------------------------------AttributeError Traceback ( most recent call last ) < ipython - input - 1 - 4 ae3016252d4 > in < module > ----> 1 print(a.attr.href) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pandas \\ core \\ generic . py in __getattr__ ( self , name ) 5272 if self . _info_axis . _can_hold_identifiers_and_holds_name ( name ) : 5273 return self [ name ] -> 5274 return object . __getattribute__ ( self , name ) 5275 5276 def __setattr__ ( self , name : str , value ) -> None : AttributeError : 'DataFrame' object has no attribute 'attr' \u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u679c\u5b8c\u5168\u4e00\u6837\u3002 \u5982\u679c\u9009\u4e2d\u7684\u662f\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u4f1a\u51fa\u73b0\u600e\u6837\u7684\u7ed3\u679c\u5462\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a a = doc ( 'a' ) print ( a , type ( a )) print ( a . attr ( 'href' )) print ( a . attr . href ) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-70e6043e550d> in <module> ----> 1 a = doc('a') 2 print(a, type(a)) 3 print(a.attr('href')) 4 print(a.attr.href) NameError: name 'doc' is not defined \u7167\u7406\u6765\u8bf4\uff0c\u6211\u4eec\u9009\u4e2d\u7684 a \u8282\u70b9\u5e94\u8be5\u6709 4 \u4e2a\uff0c\u800c\u4e14\u6253\u5370\u7ed3\u679c\u4e5f\u5e94\u8be5\u662f 4 \u4e2a\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u8c03\u7528 attr \u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de\u7ed3\u679c\u5374\u53ea\u662f\u7b2c\u4e00\u4e2a\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5f53\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u591a\u4e2a\u8282\u70b9\u65f6\uff0c\u8c03\u7528 attr \u65b9\u6cd5\uff0c\u53ea\u4f1a\u5f97\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002 \u90a3\u4e48\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u5982\u679c\u60f3\u83b7\u53d6\u6240\u6709\u7684 a \u8282\u70b9\u7684\u5c5e\u6027\uff0c\u5c31\u8981\u7528\u5230\u524d\u9762\u6240\u8bf4\u7684\u904d\u5386\u4e86\uff1a from pyquery import PyQuery as pq doc = pq ( html ) a = doc ( 'a' ) for item in a . items (): print ( item . attr ( 'href' )) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - b915e71352d2 > in < module > ----> 1 from pyquery import PyQuery as pq 2 doc = pq ( html ) 3 a = doc ( 'a' ) 4 for item in a . items (): 5 print ( item . attr ( 'href' )) G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ __init__ . py in < module > 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G : \\ Installed \\ Anaconda3 \\ lib \\ site - packages \\ pyquery \\ pyquery . py in < module > 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError : DLL load failed : \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u56e0\u6b64\uff0c\u5728\u8fdb\u884c\u5c5e\u6027\u83b7\u53d6\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u8fd4\u56de\u8282\u70b9\u662f\u4e00\u4e2a\u8fd8\u662f\u591a\u4e2a\uff0c\u5982\u679c\u662f\u591a\u4e2a\uff0c\u5219\u9700\u8981\u904d\u5386\u624d\u80fd\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5c5e\u6027\u3002","title":"\u83b7\u53d6\u5c5e\u6027"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_10","text":"\u83b7\u53d6\u8282\u70b9\u4e4b\u540e\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u64cd\u4f5c\u5c31\u662f\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4e86\uff0c\u6b64\u65f6\u53ef\u4ee5\u8c03\u7528 text \u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) a = doc ( '.item-0.active a' ) print ( a ) print ( a . text ()) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - 93 b4cb226c5f > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 a = doc('.item-0.active a') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u9996\u5148\u9009\u4e2d\u4e00\u4e2a a \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 text \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5176\u5185\u90e8\u7684\u6587\u672c\u4fe1\u606f\u3002\u6b64\u65f6\u5b83\u4f1a\u5ffd\u7565\u6389\u8282\u70b9\u5185\u90e8\u5305\u542b\u7684\u6240\u6709 HTML\uff0c\u53ea\u8fd4\u56de\u7eaf\u6587\u5b57\u5185\u5bb9\u3002 \u4f46\u5982\u679c\u60f3\u8981\u83b7\u53d6\u8fd9\u4e2a\u8282\u70b9\u5185\u90e8\u7684 HTML \u6587\u672c\uff0c\u5c31\u8981\u7528 html \u65b9\u6cd5\u4e86\uff1a from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) print ( li . html ()) \u8fd9\u91cc\u6211\u4eec\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 html() \u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u662f li \u8282\u70b9\u5185\u7684\u6240\u6709 HTML \u6587\u672c\u3002 \u8fd9\u91cc\u540c\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e2d\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0ctext() \u6216 html() \u4f1a\u8fd4\u56de\u4ec0\u4e48\u5185\u5bb9\uff1f\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u770b\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( 'li' ) print ( li . html ()) print ( li . text ()) print ( type ( li . text ()) File \"<ipython-input-1-dde919c3f270>\", line 18 print(type(li.text()) ^ SyntaxError: unexpected EOF while parsing \u7ed3\u679c\u53ef\u80fd\u6bd4\u8f83\u51fa\u4e4e\u610f\u6599\uff0chtml \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u4e2a li \u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u800c text \u5219\u8fd4\u56de\u4e86\u6240\u6709\u7684 li \u8282\u70b9\u5185\u90e8\u7684\u7eaf\u6587\u672c\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\u5f00\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\uff0c\u5982\u679c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u591a\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u60f3\u8981\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u5185\u90e8 HTML \u6587\u672c\uff0c\u5219\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\u3002\u800c text() \u65b9\u6cd5\u4e0d\u9700\u8981\u904d\u5386\u5c31\u53ef\u4ee5\u83b7\u53d6\uff0c\u5b83\u5c06\u6240\u6709\u8282\u70b9\u53d6\u6587\u672c\u4e4b\u540e\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002","title":"\u83b7\u53d6\u6587\u672c"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_11","text":"pyquery \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u6765\u5bf9\u8282\u70b9\u8fdb\u884c\u52a8\u6001\u4fee\u6539\uff0c\u6bd4\u5982\u4e3a\u67d0\u4e2a\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a class\uff0c\u79fb\u9664\u67d0\u4e2a\u8282\u70b9\u7b49\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6709\u65f6\u5019\u4f1a\u4e3a\u63d0\u53d6\u4fe1\u606f\u5e26\u6765\u6781\u5927\u7684\u4fbf\u5229\u3002 \u7531\u4e8e\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\u592a\u591a\uff0c\u4e0b\u9762\u4e3e\u51e0\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u5b83\u7684\u7528\u6cd5\u3002","title":"\u8282\u70b9\u64cd\u4f5c"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#addclass-removeclass","text":"\u6211\u4eec\u5148\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) li . removeClass ( 'active' ) print ( li ) li . addClass ( 'active' ) print ( li ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - ee3763a29e9c > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 li = doc('.item-0.active') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u9996\u5148\u9009\u4e2d\u4e86\u7b2c\u4e09\u4e2a li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 removeClass() \u65b9\u6cd5\uff0c\u5c06 li \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u79fb\u9664\uff0c\u540e\u6765\u53c8\u8c03\u7528 addClass() \u65b9\u6cd5\uff0c\u5c06 class \u6dfb\u52a0\u56de\u6765\u3002\u6bcf\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u6253\u5370\u8f93\u51fa\u5f53\u524d li \u8282\u70b9\u7684\u5185\u5bb9\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u5171\u8f93\u51fa\u4e86 3 \u6b21\u3002\u7b2c\u4e8c\u6b21\u8f93\u51fa\u65f6\uff0cli \u8282\u70b9\u7684 active \u8fd9\u4e2a class \u88ab\u79fb\u9664\u4e86\uff0c\u7b2c\u4e09\u6b21 class \u53c8\u6dfb\u52a0\u56de\u6765\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0caddClass \u548c removeClass \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u6539\u53d8\u8282\u70b9\u7684 class \u5c5e\u6027\u3002","title":"addClass \u548c removeClass"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#attrtexthtml","text":"\u5f53\u7136\uff0c\u9664\u4e86\u64cd\u4f5c class \u8fd9\u4e2a\u5c5e\u6027\u5916\uff0c\u4e5f\u53ef\u4ee5\u7528 attr \u65b9\u6cd5\u5bf9\u5c5e\u6027\u8fdb\u884c\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <ul class=\"list\"> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> </ul> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( '.item-0.active' ) print ( li ) li . attr ( 'name' , 'link' ) print ( li ) li . text ( 'changed item' ) print ( li ) li . html ( '<span>changed item</span>' ) print ( li ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - f56d8beede07 > in < module > 4 </ ul > 5 ''' ----> 6 from pyquery import PyQuery as pq 7 doc = pq(html) 8 li = doc('.item-0.active') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u9996\u5148\u9009\u4e2d li \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 attr \u65b9\u6cd5\u6765\u4fee\u6539\u5c5e\u6027\uff0c\u5176\u4e2d\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u540d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u5c5e\u6027\u503c\u3002\u63a5\u7740\uff0c\u8c03\u7528 text \u548c html \u65b9\u6cd5\u6765\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u5185\u5bb9\u3002\u4e09\u6b21\u64cd\u4f5c\u540e\uff0c\u5206\u522b\u6253\u5370\u8f93\u51fa\u5f53\u524d\u7684 li \u8282\u70b9\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8c03\u7528 attr \u65b9\u6cd5\u540e\uff0cli \u8282\u70b9\u591a\u4e86\u4e00\u4e2a\u539f\u672c\u4e0d\u5b58\u5728\u7684\u5c5e\u6027 name\uff0c\u5176\u503c\u4e3a link\u3002\u63a5\u7740\u8c03\u7528 text \u65b9\u6cd5\uff0c\u4f20\u5165\u6587\u672c\u4e4b\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u5168\u88ab\u6539\u4e3a\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u6587\u672c\u4e86\u3002\u6700\u540e\uff0c\u8c03\u7528 html \u65b9\u6cd5\u4f20\u5165 HTML \u6587\u672c\u540e\uff0cli \u8282\u70b9\u5185\u90e8\u53c8\u53d8\u4e3a\u4f20\u5165\u7684 HTML \u6587\u672c\u4e86\u3002 \u6240\u4ee5\u8bf4\uff0c\u5982\u679c attr \u65b9\u6cd5\u53ea\u4f20\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5c5e\u6027\u540d\uff0c\u5219\u662f\u83b7\u53d6\u8fd9\u4e2a\u5c5e\u6027\u503c\uff1b\u5982\u679c\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u5c5e\u6027\u503c\u3002text \u548c html \u65b9\u6cd5\u5982\u679c\u4e0d\u4f20\u53c2\u6570\uff0c\u5219\u662f\u83b7\u53d6\u8282\u70b9\u5185\u7eaf\u6587\u672c\u548c HTML \u6587\u672c\uff1b\u5982\u679c\u4f20\u5165\u53c2\u6570\uff0c\u5219\u8fdb\u884c\u8d4b\u503c\u3002","title":"attr\u3001text\u3001html"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#remove","text":"\u987e\u540d\u601d\u4e49\uff0cremove \u65b9\u6cd5\u5c31\u662f\u79fb\u9664\uff0c\u5b83\u6709\u65f6\u4f1a\u4e3a\u4fe1\u606f\u7684\u63d0\u53d6\u5e26\u6765\u975e\u5e38\u5927\u7684\u4fbf\u5229\u3002\u4e0b\u9762\u6709\u4e00\u6bb5 HTML \u6587\u672c\uff1a html = ''' <div class=\"wrap\"> Hello, World <p>This is a paragraph.</p> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) wrap = doc ( '.wrap' ) print ( wrap . text ()) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - e5ba1f107800 > in < module > 5 </ div > 6 ''' ----> 7 from pyquery import PyQuery as pq 8 doc = pq(html) 9 wrap = doc('.wrap') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u73b0\u5728\u60f3\u63d0\u53d6 Hello, World \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u8981 p \u8282\u70b9\u5185\u90e8\u7684\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u600e\u6837\u64cd\u4f5c\u5462\uff1f \u8fd9\u91cc\u76f4\u63a5\u5148\u5c1d\u8bd5\u63d0\u53d6 class \u4e3a wrap \u7684\u8282\u70b9\u7684\u5185\u5bb9\uff0c\u770b\u770b\u662f\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a Hello, World This is a paragraph. \u8fd9\u4e2a\u7ed3\u679c\u8fd8\u5305\u542b\u4e86\u5185\u90e8\u7684 p \u8282\u70b9\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 text \u628a\u6240\u6709\u7684\u7eaf\u6587\u672c\u5168\u63d0\u53d6\u51fa\u6765\u4e86\u3002\u5982\u679c\u6211\u4eec\u60f3\u53bb\u6389 p \u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\uff0c\u53ef\u4ee5\u9009\u62e9\u518d\u628a p \u8282\u70b9\u5185\u7684\u6587\u672c\u63d0\u53d6\u4e00\u904d\uff0c\u7136\u540e\u4ece\u6574\u4e2a\u7ed3\u679c\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5b50\u4e32\uff0c\u4f46\u8fd9\u4e2a\u505a\u6cd5\u660e\u663e\u6bd4\u8f83\u70e6\u7410\u3002 \u8fd9\u65f6 remove \u65b9\u6cd5\u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u7740\u8fd9\u4e48\u505a: wrap . find ( 'p' ) . remove () print ( wrap . text ()) ---------------------------------------------------------------------------NameError Traceback (most recent call last)<ipython-input-1-30d933010338> in <module> ----> 1 wrap.find('p').remove() 2 print(wrap.text()) NameError: name 'wrap' is not defined \u9996\u5148\u9009\u4e2d p \u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528\u4e86 remove() \u65b9\u6cd5\u5c06\u5176\u79fb\u9664\uff0c\u7136\u540e\u8fd9\u65f6 wrap \u5185\u90e8\u5c31\u53ea\u5269\u4e0b Hello, World \u8fd9\u53e5\u8bdd\u4e86\uff0c\u7136\u540e\u518d\u5229\u7528 text() \u65b9\u6cd5\u63d0\u53d6\u5373\u53ef\u3002 \u53e6\u5916\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u8282\u70b9\u64cd\u4f5c\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 append()\u3001empty() \u548c prepend() \u7b49\u65b9\u6cd5\uff0c\u5b83\u4eec\u548c jQuery \u7684\u7528\u6cd5\u5b8c\u5168\u4e00\u81f4\uff0c\u8be6\u7ec6\u7684\u7528\u6cd5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1a http://pyquery.readthedocs.io/en/latest/api.html","title":"remove"},{"location":"%E7%88%AC%E8%99%AB/13.3.pyquery.html#_12","text":"CSS \u9009\u62e9\u5668\u4e4b\u6240\u4ee5\u5f3a\u5927\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u539f\u56e0\uff0c\u90a3\u5c31\u662f\u5b83\u652f\u6301\u591a\u79cd\u591a\u6837\u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f8b\u5982\u9009\u62e9\u7b2c\u4e00\u4e2a\u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3001\u5947\u5076\u6570\u8282\u70b9\u3001\u5305\u542b\u67d0\u4e00\u6587\u672c\u7684\u8282\u70b9\u7b49\u3002\u793a\u4f8b\u5982\u4e0b\uff1a html = ''' <div class=\"wrap\"> <div id=\"container\"> <ul class=\"list\"> <li class=\"item-0\">first item</li> <li class=\"item-1\"><a href=\"link2.html\">second item</a></li> <li class=\"item-0 active\"><a href=\"link3.html\"><span class=\"bold\">third item</span></a></li> <li class=\"item-1 active\"><a href=\"link4.html\">fourth item</a></li> <li class=\"item-0\"><a href=\"link5.html\">fifth item</a></li> </ul> </div> </div> ''' from pyquery import PyQuery as pq doc = pq ( html ) li = doc ( 'li:first-child' ) print ( li ) li = doc ( 'li:last-child' ) print ( li ) li = doc ( 'li:nth-child(2)' ) print ( li ) li = doc ( 'li:gt(2)' ) print ( li ) li = doc ( 'li:nth-child(2n)' ) print ( li ) li = doc ( 'li:contains(second)' ) print ( li ) --------------------------------------------------------------------------- ImportError Traceback ( most recent call last ) < ipython - input - 1 - fc296508a0f6 > in < module > 12 </ div > 13 ''' ---> 14 from pyquery import PyQuery as pq 15 doc = pq(html) 16 li = doc('li:first-child') G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\__init__.py in <module> 5 # Distributed under the BSD license, see LICENSE.txt 6 ----> 7 from .pyquery import PyQuery # NOQA G:\\Installed\\Anaconda3\\lib\\site-packages\\pyquery\\pyquery.py in <module> 9 from .text import extract_text 10 from copy import deepcopy ---> 11 from lxml import etree 12 import lxml.html 13 import inspect ImportError: DLL load failed: \u627e\u4e0d\u5230\u6307\u5b9a\u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 CSS3 \u7684\u4f2a\u7c7b\u9009\u62e9\u5668\uff0c\u4f9d\u6b21\u9009\u62e9\u4e86\u7b2c\u4e00\u4e2a li \u8282\u70b9\u3001\u6700\u540e\u4e00\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e8c\u4e2a li \u8282\u70b9\u3001\u7b2c\u4e09\u4e2a li \u4e4b\u540e\u7684 li \u8282\u70b9\u3001\u5076\u6570\u4f4d\u7f6e\u7684 li \u8282\u70b9\u3001\u5305\u542b second \u6587\u672c\u7684 li \u8282\u70b9\u3002 \u5173\u4e8e CSS \u9009\u62e9\u5668\u7684\u66f4\u591a\u7528\u6cd5\uff0c\u53ef\u4ee5\u53c2\u8003 http://www.w3school.com.cn/css/index.asp \u3002","title":"\u4f2a\u7c7b\u9009\u62e9\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html","text":"CPU \u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u8fc7\u7a0b\u5c31\u662f\u8ba1\u7b97\u673a\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u7a0b\u5e8f\u662f\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\uff0c\u8fd9\u4e2a\u5e8f\u5217\u660e\u786e\u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u8be5\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\uff0c\u5728\u4ec0\u4e48\u5730\u65b9\u80fd\u591f\u627e\u5230\u7528\u6765\u64cd\u4f5c\u7684\u6570\u636e\u3002 \u4e00\u65e6\u628a\u7a0b\u5e8f\u88c5\u5165\u4e3b\u5b58\u50a8\u5668\uff0c\u8ba1\u7b97\u673a\u5c31\u53ef\u4ee5\u81ea\u52a8\u6267\u884c\u53d6\u51fa\u6307\u4ee4\u548c\u6267\u884c\u6307\u4ee4\u7684\u4efb\u52a1\u3002 \u4e13\u95e8\u7528\u6765\u5b8c\u6210\u6b64\u9879\u5de5\u4f5c\u7684\u8ba1\u7b97\u673a\u90e8\u4ef6\u79f0\u4e3a\u4e2d\u592e\u5904\u7406\u5668\uff08Central Processing Unit\uff0cCPU\uff09 \uff0c\u505a\u6210\u5355\u7247\u96c6\u6210\u7535\u8def\u7684CPU\u901a\u5e38\u53c8\u79f0\u4e3a\u5fae\u5904\u7406\u5668\uff08Microprocessor\uff09\uff0c\u5728\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u4e2d\u96c6\u6210\u4e86\u4e24\u4e2a CPU \u82af\u7247\uff0c\u79f0\u4e4b\u4e3a\u53cc\u6838\uff08dual core\uff09\u5fae\u5904\u7406\u5668\u3002\u73b0\u4ee3\u7684\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u5fae\u5904\u7406\u5668\u4f5c\u4e3aCPU\u3002 \u6ce8\u610f\uff1aCPU\u4e0d\u662f\u6307\u4e00\u4e2a\u7279\u5b9a\u7684\u67d0\u4e00\u7c7b\u4e1c\u897f\uff0c\u800c\u662f\u5177\u6709\u67d0\u79cd\u529f\u80fd\u7684\u90e8\u4ef6\u7684\u603b\u79f0\u3002\u6240\u4ee5\uff0c\u4e0d\u7ba1\u662f\u4f55\u79cd\u5f62\u6001\u3001\u8bbe\u8ba1\u3001\u539f\u7406\u7684\u90e8\u4ef6\uff0c\u53ea\u8981\u5b83\u80fd\u5177\u6709\u53d6\u51fa\u6307\u4ee4\u3001\u6267\u884c\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u5b83\u5c31\u662fCPU\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c CPU \u662f\u7528\u6765\u8868\u793a\u8ba1\u7b97\u673a\u5185\u90e8\u5143\u4ef6\u529f\u80fd\u7684\u672f\u8bed\u3002 \u4e0b\u56fe\u4e3a\u9676\u74f7PGA\u5c01\u88c5\u7684Intel 80486 DX2 CPU\uff1a \u8ba1\u7b97\u673a\u5de5\u4e1a\u4ece1960\u5e74\u4ee3\u65e9\u671f\u5f00\u59cb\u4f7f\u7528CPU\u8fd9\u4e2a\u672f\u8bed\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0cCPU\u4ece\u5f62\u6001\u3001\u8bbe\u8ba1\u5230\u5b9e\u73b0\u90fd\u5df2\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4f46\u662f\u5176\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u5374\u4e00\u76f4\u6ca1\u6709\u5927\u7684\u53d8\u5316\u3002 \u65e9\u671f\u7684CPU\u901a\u5e38\u662f\u4e3a\u5927\u578b\u3001\u7279\u5b9a\u7684\u5e94\u7528\u800c\u5b9a\u5236\u7684\u3002\u76ee\u524d\uff0c\u8fd9\u79cd\u4e3a\u7279\u5b9a\u5e94\u7528\u800c\u8bbe\u8ba1\u5b9a\u5236CPU\u7684\u6602\u8d35\u65b9\u6cd5\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5df2\u7ecf\u8ba9\u4f4d\u4e8e\u53ef\u5927\u89c4\u6a21\u751f\u4ea7\u7684\u901a\u7528\u5904\u7406\u5668\u3002\u8fd9\u79cd\u6807\u51c6\u5316\u8d8b\u52bf\uff0c\u8bde\u751f\u4e8e\u5206\u7acb\u6676\u4f53\u7ba1\u5927\u578b\u8ba1\u7b97\u673a\uff08Mainframe\uff09\u548c\u5c0f\u578b\u8ba1\u7b97\u673a\uff08Minicomputer\uff09\u5e74\u4ee3\uff0c\u5e76\u4e14\u968f\u7740\u96c6\u6210\u7535\u8def\uff08IC\uff09\u7684\u666e\u53ca\u800c\u5927\u5927\u52a0\u901f\u3002 \u73b0\u4ee3\u7684CPU\u4f7f\u7528\u96c6\u6210\u7535\u8def\u5236\u4f5c\uff0c\u96c6\u6210\u7535\u8def\u53ef\u4ee5\u628a\u65e5\u76ca\u590d\u6742\u7684CPU\u8bbe\u8ba1\u5236\u9020\u5728\u5f88\u5c0f\u7684\u7a7a\u95f4\u91cc\u3002CPU\u7684\u5c0f\u578b\u5316\u548c\u6807\u51c6\u5316\uff0c\u5927\u5927\u589e\u52a0\u4e86\u8fd9\u4e9b\u6570\u5b57\u5668\u4ef6\u5728\u73b0\u4ee3\u751f\u6d3b\u4e2d\u7684\u5e94\u7528\u8303\u56f4\uff0c\u8fdc\u8fdc\u8d85\u51fa\u4e86\u4e13\u7528\u8fd0\u7b97\u673a\u5668\u8fd9\u4e00\u6709\u9650\u7684\u5e94\u7528\u3002\u73b0\u4ee3\u5fae\u5904\u7406\u5668\u5df2\u7ecf\u968f\u5904\u53ef\u89c1\uff0c\u4ece\u6c7d\u8f66\u5230\u624b\u673a\uff0c\u751a\u81f3\u513f\u7ae5\u73a9\u5177\u3002 \u2014\u2014 \u4ee5\u4e0a\u53c2\u8003\u4e8e\u82f1\u7279\u5c14\u6587\u6863\uff1a CPU\u7684\u529f\u80fd\u548c\u7ec4\u6210 CPU\u548c\u5185\u5b58\u7531\u6570\u5b57\u96c6\u6210\u7535\u8def\uff08\u6570\u5b57\u82af\u7247\uff09\u6784\u6210\uff0c\u96c6\u6210\u7535\u8def\u901a\u5e38\u79f0\u4e3aIC\uff08Integrated Circuit\uff09\uff0c\u5b83\u7531\u6676\u4f53\u7ba1\u7ec4\u6210\uff0c\u6bcf\u4e00\u4e2a\u6676\u4f53\u7ba1\u5177\u6709ON/OFF\u4e24\u4e2a\u72b6\u6001\u3002 \u4ece\u529f\u80fd\u65b9\u9762\u6765\u770b \uff0cCPU\u7684\u5185\u90e8\u7531\u5bc4\u5b58\u5668\u3001\u63a7\u5236\u5668\u3001\u8fd0\u7b97\u5668\u548c\u65f6\u949f\u56db\u4e2a\u90e8\u5206\u6784\u6210\uff0c\u5404\u90e8\u5206\u4e4b\u95f4\u7531\u7535\u6d41\u4fe1\u53f7\u76f8\u4e92\u8fde\u901a\u3002 \u5bc4\u5b58\u5668\u53ef\u7528\u6765\u6682\u5b58\u6307\u4ee4\u3001\u6570\u636e\u7b49\u5904\u7406\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5c06\u5176\u770b\u4f5c\u662f\u5185\u5b58\u7684\u4e00\u79cd\u3002\u6839\u636e\u79cd\u7c7b\u7684\u4e0d\u540c\uff0c\u4e00\u4e2a CPU \u5185\u90e8\u4f1a\u670920\uff5e100 \u4e2a\u5bc4\u5b58\u5668\u3002 \u63a7\u5236\u5668\u8d1f\u8d23\u628a\u5185\u5b58\u4e0a\u7684\u6307\u4ee4\u3001\u6570\u636e\u7b49\u8bfb\u5165\u5bc4\u5b58\u5668\uff0c\u5e76\u6839\u636e\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u6765\u63a7\u5236\u6574\u4e2a\u8ba1\u7b97\u673a\u3002 \u8fd0\u7b97\u5668\u8d1f\u8d23\u8fd0\u7b97\u4ece\u5185\u5b58\u8bfb\u5165\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002 \u65f6\u949f\u8d1f\u8d23\u53d1\u51fa CPU \u5f00\u59cb\u8ba1\u65f6\u7684\u65f6\u949f\u4fe1\u53f7\u3002\u4e0d\u8fc7\uff0c\u4e5f\u6709\u4e9b\u8ba1\u7b97\u673a\u7684\u65f6\u949f\u4f4d\u4e8e CPU \u7684\u5916\u90e8\u3002 \u5bc4\u5b58\u5668\u7684\u4e3b\u8981\u79cd\u7c7b\u548c\u529f\u80fd \u6839\u636e\u529f\u80fd\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5bc4\u5b58\u5668\u5927\u81f4\u5212\u5206\u4e3a\u516b\u7c7b\u3002\u53ef\u4ee5\u770b\u51fa\uff0c==\u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\u65e2\u53ef\u4ee5\u662f\u6307\u4ee4\u4e5f\u53ef\u4ee5\u662f\u6570\u636e\u3002\u5176\u4e2d\uff0c\u6570\u636e\u5206\u4e3a\u201c\u7528\u4e8e\u8fd0\u7b97\u7684\u6570\u503c\u201d\u548c\u201c\u8868\u793a\u5185\u5b58\u5730\u5740\u7684\u6570\u503c\u201d\u4e24\u79cd\u3002==\u6570\u636e\u79cd\u7c7b\u4e0d\u540c\uff0c\u5b58\u50a8\u8be5\u6570\u503c\u7684\u5bc4\u5b58\u5668\u4e5f\u4e0d\u540c\u3002CPU \u4e2d\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u529f\u80fd\u90fd\u662f\u4e0d\u540c\u7684\u3002 \u79cd\u7c7b \u529f\u80fd \u7d2f\u52a0\u5bc4\u5b58\u5668 accumulator \u5b58\u50a8\u6267\u884c\u8fd0\u7b97\u7684\u6570\u636e\u548c\u8fd0\u7b97\u540e\u7684\u6570\u636e \u6807\u5fd7\u5bc4\u5b58\u5668 flag register \u5b58\u50a8\u8fd0\u7b97\u5904\u7406\u540e\u7684 CPU \u7684\u72b6\u6001 \u7a0b\u5e8f\u8ba1\u6570\u5668 program counter \u5b58\u50a8\u4e0b\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5185\u5b58\u7684\u5730\u5740 \u57fa\u5740\u5bc4\u5b58\u5668 base register \u5b58\u50a8\u6570\u636e\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740 \u53d8\u5740\u5bc4\u5b58\u5668 index register \u5b58\u50a8\u57fa\u5740\u5bc4\u5b58\u5668\u7684\u76f8\u5bf9\u5730\u5740 \u901a\u7528\u5bc4\u5b58\u5668 general purpose register \u5b58\u50a8\u4efb\u610f\u6570\u636e \u6307\u4ee4\u5bc4\u5b58\u5668 instruction register \u5b58\u50a8\u6307\u4ee4\u3002CPU \u5185\u90e8\u4f7f\u7528\uff0c\u7a0b\u5e8f\u5458\u65e0\u6cd5\u901a\u8fc7\u7a0b\u5e8f\u5bf9\u8be5\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c \u6808\u5bc4\u5b58\u5668 stack register \u5b58\u50a8\u6808\u533a\u57df\u7684\u8d77\u59cb\u5730\u5740 \u5bc4\u5b58\u5668\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u6bd4\u8f83\u7279\u6b8a\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u662f\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f8b\u5982\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff1a # \u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u793a\u4f8b mov eax, dword ptr [ebp-8] \u2026\u628a\u6570\u503c\u4ece\u5185\u5b58\u590d\u5236\u5230 eax add eax, dword ptr [ebp-0Ch] \u2026exa \u7684\u6570\u503c\u548c\u5185\u5b58\u7684\u6570\u503c\u76f8\u52a0 mov dword ptr [ebp-4], eax \u2026\u628a exa \u7684\u6570\u503c\uff08\u4e0a\u4e00\u6b65\u7684\u76f8\u52a0\u7ed3\u679c\uff09\u5b58\u50a8\u5728\u5185\u5b58\u4e2d eax \u548c ebp \u662f CPU \u5185\u90e8\u7684\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u3002\u5185\u5b58\u7684\u5b58\u50a8\u573a\u6240\u901a\u8fc7\u5730\u5740\u7f16\u53f7\u6765\u533a\u5206\uff0c\u800c\u5bc4\u5b58\u5668\u7684\u79cd\u7c7b\u5219\u901a\u8fc7\u540d\u5b57\u6765\u533a\u5206\u3002 main memory \u901a\u5e38\u6240\u8bf4\u7684\u5185\u5b58\u6307\u7684\u662f\u8ba1\u7b97\u673a\u7684\u4e3b\u5b58\u50a8\u5668\uff08main memory\uff09\uff0c\u7b80\u79f0\u4e3b\u5b58\u3002 \u4e3b\u5b58\u901a\u8fc7\u63a7\u5236\u82af\u7247\u7b49\u4e0e CPU \u76f8\u8fde\uff0c \u4e3b\u8981\u8d1f\u8d23\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e\u3002 \u4e3b\u5b58\u7531\u53ef\u8bfb\u5199\u7684\u5143\u7d20\u6784\u6210\uff0c\u6bcf\u4e2a\u5b57\u8282\uff081 Byte = 8 bit \uff09\u90fd\u5e26\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\u3002 CPU \u53ef\u4ee5\u901a\u8fc7\u8be5\u5730\u5740\u8bfb\u53d6\u4e3b\u5b58\u4e2d\u7684\u6307\u4ee4\u548c\u6570\u636e\uff0c\u4ee5\u53ca\u5199\u5165\u6570\u636e\u3002 \u5982\u4f55\u901a\u8fc7\u5185\u5b58\u7d22\u5f15\u6570\u636e\uff1f \u5185\u5b58\u7684\u6784\u6210\u5355\u4f4d\u662f\u4e00\u4e2a\u5b57\u8282\uff088\u4f4d\uff09\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\uff0c\u8fd9\u4e2a\u5730\u5740\u7f16\u53f7\u662f\u5b83\u7684\u903b\u8f91\u5730\u5740\u3002 CPU\u4e2d\u7684\u5bc4\u5b58\u5668\uff08\u57fa\u5740\u5bc4\u5b58\u5668\u3001\u53d8\u5740\u5bc4\u5b58\u5668\uff09\u4f1a\u50a8\u5b58\u4e2d\u88ab\u8fd0\u7b97\u7684\u6570\u636e\u7684\u7f16\u53f7\u5730\u5740\u3002CPU\u5bc4\u5b58\u5668\u7684\u7a7a\u95f4\u5927\u5c0f\u51b3\u5b9a\u4e86CPU\u80fd\u8bc6\u522b\u591a\u5927\u7684\u5185\u5b58\u3002 \u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a32\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u4e3a$2^{32}-1=4294967295$\uff08\u5341\u8fdb\u5236\u6570\uff0c\u4ece0\u5f00\u59cb\uff1b\u6362\u621016\u8fdb\u5236\u6570\u5c31\u662fFFFFFFFF\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5b83\u80fd\u8868\u793a$2^{32}=4294967296$\u79cd\u72b6\u6001\u3002\u800c4g\u7684\u5185\u5b58\u4e00\u5171\u6709$4\\times1024\\times1024\\times1024=4294967296$\u4e2abyte\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u5177\u670932\u4f4d\u7684\u5bc4\u5b58\u5668\u7684CPU\u6700\u591a\u80fd\u8bc6\u522b4g\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u57fa\u5740\u5bc4\u5b58\u5668\u548c\u53d8\u5740\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e3b\u5185\u5b58\u4e0a\u7279\u5b9a\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u5212\u5206\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528\u5341\u516d\u8fdb\u5236\u6570 \u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e0a 00000000\uff5eFFFFFFFF\u7684\u5730\u5740\u5212\u5206\u51fa\u6765\u3002\u90a3\u4e48\uff0c\u51e1\u662f\u8be5\u8303\u56f4\u7684\u5185\u5b58\u533a\u57df\uff0c\u53ea\u8981\u6709\u4e00\u4e2a 32 \u4f4d\u7684 \u5bc4\u5b58\u5668\uff0c\u5373\u53ef\u67e5\u770b\u5168\u90e8\u7684\u5185\u5b58\u5730\u5740\u3002 CPU\u6240\u751f\u6210\u7684\u5730\u5740\u901a\u5e38\u79f0\u4e3a\u903b\u8f91\u5730\u5740(logical address)\uff0c\u800c\u5185\u5b58\u5355\u5143\u6240\u770b\u5230\u7684\u5730\u5740\uff08\u5373\u52a0\u8f7d\u5230\u5185\u5b58\u5730\u5740\u5bc4\u5b58\u5668(memory-address register)\u4e2d\u7684\u5730\u5740\uff09\u901a\u5e38\u79f0\u4e3a\u7269\u7406\u5730\u5740(physical address) \u3002 \u903b\u8f91\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6267\u884c\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u903b\u8f91\u5730\u5740\u53c8\u79f0\u4e3a\u865a\u62df\u5730\u5740\u3002\u865a\u62df\u5730\u5740\u901a\u8fc7 \u6620\u5c04 \u4e0e\u7269\u7406\u5730\u5740\u5bf9\u5e94\u8d77\u6765\u3002\u5b8c\u6210\u8fd9\u79cd\u6620\u5c04\u7684\u786c\u4ef6\u8bbe\u5907\u662f \u5185\u5b58\u7ba1\u7406\u5355\u5143 (memory-management unit, MMU)\uff0c\u5b8c\u6210\u6620\u5c04\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4e5f\u5c31\u662f\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u6709\u591a\u79cd\u3002\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u53ea\u80fd\u57fa\u4e8e\u865a\u62df\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\u3002","title":"1.1.\u8ba1\u7b97\u673a\u4e0e\u7a0b\u5e8f\u7ed3\u6784"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html#cpu","text":"\u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u8fc7\u7a0b\u5c31\u662f\u8ba1\u7b97\u673a\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u7a0b\u5e8f\u662f\u4e00\u4e2a\u6307\u4ee4\u5e8f\u5217\uff0c\u8fd9\u4e2a\u5e8f\u5217\u660e\u786e\u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u8be5\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\uff0c\u5728\u4ec0\u4e48\u5730\u65b9\u80fd\u591f\u627e\u5230\u7528\u6765\u64cd\u4f5c\u7684\u6570\u636e\u3002 \u4e00\u65e6\u628a\u7a0b\u5e8f\u88c5\u5165\u4e3b\u5b58\u50a8\u5668\uff0c\u8ba1\u7b97\u673a\u5c31\u53ef\u4ee5\u81ea\u52a8\u6267\u884c\u53d6\u51fa\u6307\u4ee4\u548c\u6267\u884c\u6307\u4ee4\u7684\u4efb\u52a1\u3002 \u4e13\u95e8\u7528\u6765\u5b8c\u6210\u6b64\u9879\u5de5\u4f5c\u7684\u8ba1\u7b97\u673a\u90e8\u4ef6\u79f0\u4e3a\u4e2d\u592e\u5904\u7406\u5668\uff08Central Processing Unit\uff0cCPU\uff09 \uff0c\u505a\u6210\u5355\u7247\u96c6\u6210\u7535\u8def\u7684CPU\u901a\u5e38\u53c8\u79f0\u4e3a\u5fae\u5904\u7406\u5668\uff08Microprocessor\uff09\uff0c\u5728\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u4e2d\u96c6\u6210\u4e86\u4e24\u4e2a CPU \u82af\u7247\uff0c\u79f0\u4e4b\u4e3a\u53cc\u6838\uff08dual core\uff09\u5fae\u5904\u7406\u5668\u3002\u73b0\u4ee3\u7684\u4e2a\u4eba\u8ba1\u7b97\u673a\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u5fae\u5904\u7406\u5668\u4f5c\u4e3aCPU\u3002 \u6ce8\u610f\uff1aCPU\u4e0d\u662f\u6307\u4e00\u4e2a\u7279\u5b9a\u7684\u67d0\u4e00\u7c7b\u4e1c\u897f\uff0c\u800c\u662f\u5177\u6709\u67d0\u79cd\u529f\u80fd\u7684\u90e8\u4ef6\u7684\u603b\u79f0\u3002\u6240\u4ee5\uff0c\u4e0d\u7ba1\u662f\u4f55\u79cd\u5f62\u6001\u3001\u8bbe\u8ba1\u3001\u539f\u7406\u7684\u90e8\u4ef6\uff0c\u53ea\u8981\u5b83\u80fd\u5177\u6709\u53d6\u51fa\u6307\u4ee4\u3001\u6267\u884c\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u5b83\u5c31\u662fCPU\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c CPU \u662f\u7528\u6765\u8868\u793a\u8ba1\u7b97\u673a\u5185\u90e8\u5143\u4ef6\u529f\u80fd\u7684\u672f\u8bed\u3002 \u4e0b\u56fe\u4e3a\u9676\u74f7PGA\u5c01\u88c5\u7684Intel 80486 DX2 CPU\uff1a \u8ba1\u7b97\u673a\u5de5\u4e1a\u4ece1960\u5e74\u4ee3\u65e9\u671f\u5f00\u59cb\u4f7f\u7528CPU\u8fd9\u4e2a\u672f\u8bed\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0cCPU\u4ece\u5f62\u6001\u3001\u8bbe\u8ba1\u5230\u5b9e\u73b0\u90fd\u5df2\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4f46\u662f\u5176\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u5374\u4e00\u76f4\u6ca1\u6709\u5927\u7684\u53d8\u5316\u3002 \u65e9\u671f\u7684CPU\u901a\u5e38\u662f\u4e3a\u5927\u578b\u3001\u7279\u5b9a\u7684\u5e94\u7528\u800c\u5b9a\u5236\u7684\u3002\u76ee\u524d\uff0c\u8fd9\u79cd\u4e3a\u7279\u5b9a\u5e94\u7528\u800c\u8bbe\u8ba1\u5b9a\u5236CPU\u7684\u6602\u8d35\u65b9\u6cd5\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5df2\u7ecf\u8ba9\u4f4d\u4e8e\u53ef\u5927\u89c4\u6a21\u751f\u4ea7\u7684\u901a\u7528\u5904\u7406\u5668\u3002\u8fd9\u79cd\u6807\u51c6\u5316\u8d8b\u52bf\uff0c\u8bde\u751f\u4e8e\u5206\u7acb\u6676\u4f53\u7ba1\u5927\u578b\u8ba1\u7b97\u673a\uff08Mainframe\uff09\u548c\u5c0f\u578b\u8ba1\u7b97\u673a\uff08Minicomputer\uff09\u5e74\u4ee3\uff0c\u5e76\u4e14\u968f\u7740\u96c6\u6210\u7535\u8def\uff08IC\uff09\u7684\u666e\u53ca\u800c\u5927\u5927\u52a0\u901f\u3002 \u73b0\u4ee3\u7684CPU\u4f7f\u7528\u96c6\u6210\u7535\u8def\u5236\u4f5c\uff0c\u96c6\u6210\u7535\u8def\u53ef\u4ee5\u628a\u65e5\u76ca\u590d\u6742\u7684CPU\u8bbe\u8ba1\u5236\u9020\u5728\u5f88\u5c0f\u7684\u7a7a\u95f4\u91cc\u3002CPU\u7684\u5c0f\u578b\u5316\u548c\u6807\u51c6\u5316\uff0c\u5927\u5927\u589e\u52a0\u4e86\u8fd9\u4e9b\u6570\u5b57\u5668\u4ef6\u5728\u73b0\u4ee3\u751f\u6d3b\u4e2d\u7684\u5e94\u7528\u8303\u56f4\uff0c\u8fdc\u8fdc\u8d85\u51fa\u4e86\u4e13\u7528\u8fd0\u7b97\u673a\u5668\u8fd9\u4e00\u6709\u9650\u7684\u5e94\u7528\u3002\u73b0\u4ee3\u5fae\u5904\u7406\u5668\u5df2\u7ecf\u968f\u5904\u53ef\u89c1\uff0c\u4ece\u6c7d\u8f66\u5230\u624b\u673a\uff0c\u751a\u81f3\u513f\u7ae5\u73a9\u5177\u3002 \u2014\u2014 \u4ee5\u4e0a\u53c2\u8003\u4e8e\u82f1\u7279\u5c14\u6587\u6863\uff1a CPU\u7684\u529f\u80fd\u548c\u7ec4\u6210 CPU\u548c\u5185\u5b58\u7531\u6570\u5b57\u96c6\u6210\u7535\u8def\uff08\u6570\u5b57\u82af\u7247\uff09\u6784\u6210\uff0c\u96c6\u6210\u7535\u8def\u901a\u5e38\u79f0\u4e3aIC\uff08Integrated Circuit\uff09\uff0c\u5b83\u7531\u6676\u4f53\u7ba1\u7ec4\u6210\uff0c\u6bcf\u4e00\u4e2a\u6676\u4f53\u7ba1\u5177\u6709ON/OFF\u4e24\u4e2a\u72b6\u6001\u3002 \u4ece\u529f\u80fd\u65b9\u9762\u6765\u770b \uff0cCPU\u7684\u5185\u90e8\u7531\u5bc4\u5b58\u5668\u3001\u63a7\u5236\u5668\u3001\u8fd0\u7b97\u5668\u548c\u65f6\u949f\u56db\u4e2a\u90e8\u5206\u6784\u6210\uff0c\u5404\u90e8\u5206\u4e4b\u95f4\u7531\u7535\u6d41\u4fe1\u53f7\u76f8\u4e92\u8fde\u901a\u3002 \u5bc4\u5b58\u5668\u53ef\u7528\u6765\u6682\u5b58\u6307\u4ee4\u3001\u6570\u636e\u7b49\u5904\u7406\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5c06\u5176\u770b\u4f5c\u662f\u5185\u5b58\u7684\u4e00\u79cd\u3002\u6839\u636e\u79cd\u7c7b\u7684\u4e0d\u540c\uff0c\u4e00\u4e2a CPU \u5185\u90e8\u4f1a\u670920\uff5e100 \u4e2a\u5bc4\u5b58\u5668\u3002 \u63a7\u5236\u5668\u8d1f\u8d23\u628a\u5185\u5b58\u4e0a\u7684\u6307\u4ee4\u3001\u6570\u636e\u7b49\u8bfb\u5165\u5bc4\u5b58\u5668\uff0c\u5e76\u6839\u636e\u6307\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u6765\u63a7\u5236\u6574\u4e2a\u8ba1\u7b97\u673a\u3002 \u8fd0\u7b97\u5668\u8d1f\u8d23\u8fd0\u7b97\u4ece\u5185\u5b58\u8bfb\u5165\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002 \u65f6\u949f\u8d1f\u8d23\u53d1\u51fa CPU \u5f00\u59cb\u8ba1\u65f6\u7684\u65f6\u949f\u4fe1\u53f7\u3002\u4e0d\u8fc7\uff0c\u4e5f\u6709\u4e9b\u8ba1\u7b97\u673a\u7684\u65f6\u949f\u4f4d\u4e8e CPU \u7684\u5916\u90e8\u3002","title":"CPU"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html#_1","text":"\u6839\u636e\u529f\u80fd\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5bc4\u5b58\u5668\u5927\u81f4\u5212\u5206\u4e3a\u516b\u7c7b\u3002\u53ef\u4ee5\u770b\u51fa\uff0c==\u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\u65e2\u53ef\u4ee5\u662f\u6307\u4ee4\u4e5f\u53ef\u4ee5\u662f\u6570\u636e\u3002\u5176\u4e2d\uff0c\u6570\u636e\u5206\u4e3a\u201c\u7528\u4e8e\u8fd0\u7b97\u7684\u6570\u503c\u201d\u548c\u201c\u8868\u793a\u5185\u5b58\u5730\u5740\u7684\u6570\u503c\u201d\u4e24\u79cd\u3002==\u6570\u636e\u79cd\u7c7b\u4e0d\u540c\uff0c\u5b58\u50a8\u8be5\u6570\u503c\u7684\u5bc4\u5b58\u5668\u4e5f\u4e0d\u540c\u3002CPU \u4e2d\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u529f\u80fd\u90fd\u662f\u4e0d\u540c\u7684\u3002 \u79cd\u7c7b \u529f\u80fd \u7d2f\u52a0\u5bc4\u5b58\u5668 accumulator \u5b58\u50a8\u6267\u884c\u8fd0\u7b97\u7684\u6570\u636e\u548c\u8fd0\u7b97\u540e\u7684\u6570\u636e \u6807\u5fd7\u5bc4\u5b58\u5668 flag register \u5b58\u50a8\u8fd0\u7b97\u5904\u7406\u540e\u7684 CPU \u7684\u72b6\u6001 \u7a0b\u5e8f\u8ba1\u6570\u5668 program counter \u5b58\u50a8\u4e0b\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5185\u5b58\u7684\u5730\u5740 \u57fa\u5740\u5bc4\u5b58\u5668 base register \u5b58\u50a8\u6570\u636e\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740 \u53d8\u5740\u5bc4\u5b58\u5668 index register \u5b58\u50a8\u57fa\u5740\u5bc4\u5b58\u5668\u7684\u76f8\u5bf9\u5730\u5740 \u901a\u7528\u5bc4\u5b58\u5668 general purpose register \u5b58\u50a8\u4efb\u610f\u6570\u636e \u6307\u4ee4\u5bc4\u5b58\u5668 instruction register \u5b58\u50a8\u6307\u4ee4\u3002CPU \u5185\u90e8\u4f7f\u7528\uff0c\u7a0b\u5e8f\u5458\u65e0\u6cd5\u901a\u8fc7\u7a0b\u5e8f\u5bf9\u8be5\u5bc4\u5b58\u5668\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c \u6808\u5bc4\u5b58\u5668 stack register \u5b58\u50a8\u6808\u533a\u57df\u7684\u8d77\u59cb\u5730\u5740 \u5bc4\u5b58\u5668\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\u6bd4\u8f83\u7279\u6b8a\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u662f\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f8b\u5982\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff1a # \u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u793a\u4f8b mov eax, dword ptr [ebp-8] \u2026\u628a\u6570\u503c\u4ece\u5185\u5b58\u590d\u5236\u5230 eax add eax, dword ptr [ebp-0Ch] \u2026exa \u7684\u6570\u503c\u548c\u5185\u5b58\u7684\u6570\u503c\u76f8\u52a0 mov dword ptr [ebp-4], eax \u2026\u628a exa \u7684\u6570\u503c\uff08\u4e0a\u4e00\u6b65\u7684\u76f8\u52a0\u7ed3\u679c\uff09\u5b58\u50a8\u5728\u5185\u5b58\u4e2d eax \u548c ebp \u662f CPU \u5185\u90e8\u7684\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u3002\u5185\u5b58\u7684\u5b58\u50a8\u573a\u6240\u901a\u8fc7\u5730\u5740\u7f16\u53f7\u6765\u533a\u5206\uff0c\u800c\u5bc4\u5b58\u5668\u7684\u79cd\u7c7b\u5219\u901a\u8fc7\u540d\u5b57\u6765\u533a\u5206\u3002","title":"\u5bc4\u5b58\u5668\u7684\u4e3b\u8981\u79cd\u7c7b\u548c\u529f\u80fd"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html#main-memory","text":"\u901a\u5e38\u6240\u8bf4\u7684\u5185\u5b58\u6307\u7684\u662f\u8ba1\u7b97\u673a\u7684\u4e3b\u5b58\u50a8\u5668\uff08main memory\uff09\uff0c\u7b80\u79f0\u4e3b\u5b58\u3002 \u4e3b\u5b58\u901a\u8fc7\u63a7\u5236\u82af\u7247\u7b49\u4e0e CPU \u76f8\u8fde\uff0c \u4e3b\u8981\u8d1f\u8d23\u5b58\u50a8\u6307\u4ee4\u548c\u6570\u636e\u3002 \u4e3b\u5b58\u7531\u53ef\u8bfb\u5199\u7684\u5143\u7d20\u6784\u6210\uff0c\u6bcf\u4e2a\u5b57\u8282\uff081 Byte = 8 bit \uff09\u90fd\u5e26\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\u3002 CPU \u53ef\u4ee5\u901a\u8fc7\u8be5\u5730\u5740\u8bfb\u53d6\u4e3b\u5b58\u4e2d\u7684\u6307\u4ee4\u548c\u6570\u636e\uff0c\u4ee5\u53ca\u5199\u5165\u6570\u636e\u3002","title":"main memory"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html#_2","text":"\u5185\u5b58\u7684\u6784\u6210\u5355\u4f4d\u662f\u4e00\u4e2a\u5b57\u8282\uff088\u4f4d\uff09\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u5730\u5740\u7f16\u53f7\uff0c\u8fd9\u4e2a\u5730\u5740\u7f16\u53f7\u662f\u5b83\u7684\u903b\u8f91\u5730\u5740\u3002 CPU\u4e2d\u7684\u5bc4\u5b58\u5668\uff08\u57fa\u5740\u5bc4\u5b58\u5668\u3001\u53d8\u5740\u5bc4\u5b58\u5668\uff09\u4f1a\u50a8\u5b58\u4e2d\u88ab\u8fd0\u7b97\u7684\u6570\u636e\u7684\u7f16\u53f7\u5730\u5740\u3002CPU\u5bc4\u5b58\u5668\u7684\u7a7a\u95f4\u5927\u5c0f\u51b3\u5b9a\u4e86CPU\u80fd\u8bc6\u522b\u591a\u5927\u7684\u5185\u5b58\u3002 \u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a32\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u4e3a$2^{32}-1=4294967295$\uff08\u5341\u8fdb\u5236\u6570\uff0c\u4ece0\u5f00\u59cb\uff1b\u6362\u621016\u8fdb\u5236\u6570\u5c31\u662fFFFFFFFF\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\u5b83\u80fd\u8868\u793a$2^{32}=4294967296$\u79cd\u72b6\u6001\u3002\u800c4g\u7684\u5185\u5b58\u4e00\u5171\u6709$4\\times1024\\times1024\\times1024=4294967296$\u4e2abyte\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u5177\u670932\u4f4d\u7684\u5bc4\u5b58\u5668\u7684CPU\u6700\u591a\u80fd\u8bc6\u522b4g\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u57fa\u5740\u5bc4\u5b58\u5668\u548c\u53d8\u5740\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e3b\u5185\u5b58\u4e0a\u7279\u5b9a\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u5212\u5206\u3002\u9996\u5148\uff0c\u6211\u4eec\u7528\u5341\u516d\u8fdb\u5236\u6570 \u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e0a 00000000\uff5eFFFFFFFF\u7684\u5730\u5740\u5212\u5206\u51fa\u6765\u3002\u90a3\u4e48\uff0c\u51e1\u662f\u8be5\u8303\u56f4\u7684\u5185\u5b58\u533a\u57df\uff0c\u53ea\u8981\u6709\u4e00\u4e2a 32 \u4f4d\u7684 \u5bc4\u5b58\u5668\uff0c\u5373\u53ef\u67e5\u770b\u5168\u90e8\u7684\u5185\u5b58\u5730\u5740\u3002 CPU\u6240\u751f\u6210\u7684\u5730\u5740\u901a\u5e38\u79f0\u4e3a\u903b\u8f91\u5730\u5740(logical address)\uff0c\u800c\u5185\u5b58\u5355\u5143\u6240\u770b\u5230\u7684\u5730\u5740\uff08\u5373\u52a0\u8f7d\u5230\u5185\u5b58\u5730\u5740\u5bc4\u5b58\u5668(memory-address register)\u4e2d\u7684\u5730\u5740\uff09\u901a\u5e38\u79f0\u4e3a\u7269\u7406\u5730\u5740(physical address) \u3002 \u903b\u8f91\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6267\u884c\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u903b\u8f91\u5730\u5740\u53c8\u79f0\u4e3a\u865a\u62df\u5730\u5740\u3002\u865a\u62df\u5730\u5740\u901a\u8fc7 \u6620\u5c04 \u4e0e\u7269\u7406\u5730\u5740\u5bf9\u5e94\u8d77\u6765\u3002\u5b8c\u6210\u8fd9\u79cd\u6620\u5c04\u7684\u786c\u4ef6\u8bbe\u5907\u662f \u5185\u5b58\u7ba1\u7406\u5355\u5143 (memory-management unit, MMU)\uff0c\u5b8c\u6210\u6620\u5c04\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u4e5f\u5c31\u662f\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u6709\u591a\u79cd\u3002\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u53ea\u80fd\u57fa\u4e8e\u865a\u62df\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\u3002","title":"\u5982\u4f55\u901a\u8fc7\u5185\u5b58\u7d22\u5f15\u6570\u636e\uff1f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html","text":"\u7a0b\u5e8f\u548c\u7f16\u7a0b\u8bed\u8a00 \u7a0b\u5e8f\uff08Program\uff09 \u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u5982\u4f55\u5b8c\u6210\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd9\u91cc\u7684\u8ba1\u7b97\u53ef\u4ee5\u662f\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982\u89e3\u65b9\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7b26\u53f7\u8fd0\u7b97\uff0c\u6bd4\u5982\u67e5\u627e\u548c\u66ff\u6362\u6587\u6863\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\u3002\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c \u8ba1\u7b97\u673a\u662f\u7531\u6570\u5b57\u7535\u8def\u7ec4\u6210\u7684\u8fd0\u7b97\u673a\u5668\uff0c\u53ea\u80fd\u5bf9\u6570\u5b57\u505a\u8fd0\u7b97\uff0c\u7a0b\u5e8f\u4e4b\u6240\u4ee5\u80fd\u505a\u7b26\u53f7\u8fd0\u7b97\uff0c\u662f\u56e0\u4e3a\u7b26\u53f7\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\u3002 \u6b64\u5916\uff0c\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u5904\u7406\u58f0\u97f3\u548c\u56fe\u50cf\uff0c\u58f0\u97f3\u548c\u56fe\u50cf\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u5fc5\u7136\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\uff0c\u8fd9\u4e9b\u6570\u5b57\u7ecf\u8fc7\u4e13\u95e8\u7684\u786c\u4ef6\u8bbe\u5907\u8f6c\u6362\u6210\u4eba\u53ef\u4ee5\u542c\u5230\u3001\u770b\u5230\u7684\u58f0\u97f3\u548c\u56fe\u50cf\u3002 \u7a0b\u5e8f\u7531\u4e00\u7cfb\u5217 \u6307\u4ee4\uff08Instruction\uff09 \u7ec4\u6210\uff0c\u6307\u4ee4\u662f\u6307\u793a\u8ba1\u7b97\u673a\u505a\u67d0\u79cd\u8fd0\u7b97\u7684\u547d\u4ee4\uff0c\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u8f93\u5165\uff08Input\uff09\uff1a\u4ece\u952e\u76d8\u3001\u6587\u4ef6\u6216\u8005\u5176\u5b83\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002 \u8f93\u51fa\uff08Output\uff09\uff1a\u628a\u6570\u636e\u663e\u793a\u5230\u5c4f\u5e55\uff0c\u6216\u8005\u5b58\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u8005\u53d1\u9001\u5230\u5176\u5b83\u8bbe\u5907\u3002 \u57fa\u672c\u8fd0\u7b97\uff1a\u6267\u884c\u6700\u57fa\u672c\u7684\u6570\u5b66\u8fd0\u7b97\uff08\u52a0\u51cf\u4e58\u9664\uff09\u548c\u6570\u636e\u5b58\u53d6\u3002 \u6d4b\u8bd5\u548c\u5206\u652f\uff1a\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\uff0c\u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u6d4b\u8bd5\u7ed3\u679c\u6267\u884c\u4e0d\u540c\u7684\u540e\u7eed\u6307\u4ee4\u3002 \u5faa\u73af\uff1a\u91cd\u590d\u6267\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\uff0c\u6709\u4e0a\u9762\u8fd9\u51e0\u7c7b\u6307\u4ee4\u5c31\u8db3\u591f\u4e86\u3002\u4f60\u66fe\u7528\u8fc7\u7684\u4efb\u4f55\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u7ba1\u5b83\u6709\u591a\u4e48\u590d\u6742\uff0c\u90fd\u662f\u7531\u8fd9\u51e0\u7c7b\u6307\u4ee4\u7ec4\u6210\u7684\u3002\u7a0b\u5e8f\u662f\u90a3\u4e48\u7684\u590d\u6742\uff0c\u800c\u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u7528\u7684\u6307\u4ee4\u5374\u53ea\u6709\u8fd9\u4e48\u7b80\u5355\u7684\u51e0\u79cd\uff0c\u8fd9\u4e2d\u95f4\u5de8\u5927\u7684\u843d\u5dee\u5c31\u8981\u7531\u7a0b\u5e8f\u5458\u53bb\u586b\u4e86\uff0c\u6240\u4ee5\u7f16\u5199\u7a0b\u5e8f\u7406\u5e94\u662f\u4e00\u4ef6\u76f8\u5f53\u590d\u6742\u7684\u5de5\u4f5c\u3002 \u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u8bf4\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u628a\u590d\u6742\u7684\u4efb\u52a1\u5206\u89e3\u6210\u5b50\u4efb\u52a1\uff0c\u628a\u5b50\u4efb\u52a1\u518d\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c42\u5c42\u5206\u89e3\uff0c\u76f4\u5230\u6700\u540e\u7b80\u5355\u5f97\u53ef\u4ee5\u7528\u4ee5\u4e0a\u6307\u4ee4\u6765\u5b8c\u6210\u3002 \u7f16\u7a0b\u8bed\u8a00 \uff1a\u7f16\u7a0b\u8bed\u8a00\uff08Programming Language\uff09\u5206\u4e3a\u4f4e\u7ea7\u8bed\u8a00\uff08Low-level Language\uff09\u548c\u9ad8\u7ea7\u8bed\u8a00\uff08High-level Language\uff09\u3002 \u673a\u5668\u8bed\u8a00\uff08Machine Language\uff09\u548c\u6c47\u7f16\u8bed\u8a00\uff08Assembly Language\uff09\u5c5e\u4e8e\u4f4e\u7ea7\u8bed\u8a00\uff0c\u76f4\u63a5\u7528\u8ba1\u7b97\u673a\u6307\u4ee4\u7f16\u5199\u7a0b\u5e8f\u3002\u800cC\u3001C++\u3001Java\u3001Python\u7b49\u5c5e\u4e8e\u9ad8\u7ea7\u8bed\u8a00\uff0c\u7528\u8bed\u53e5\uff08Statement\uff09\u7f16\u5199\u7a0b\u5e8f\uff0c==\u8bed\u53e5\u662f\u8ba1\u7b97\u673a\u6307\u4ee4\u7684\u62bd\u8c61\u8868\u793a\u3002==\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u540c\u6837\u4e00\u4e2a\u8bed\u53e5\u7528C\u8bed\u8a00\u3001\u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u5206\u522b\u8868\u793a\u5982\u4e0b\uff1a \u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u8ba1\u7b97\u673a\u6307\u4ee4\u7f16\u5199\u7a0b\u5e8f\uff1b \u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u8bed\u53e5\u7f16\u5199\u7a0b\u5e8f\u3002 \u8ba1\u7b97\u673a\u53ea\u80fd\u5bf9\u6570\u5b57\u505a\u8fd0\u7b97\uff0c\u7b26\u53f7\u3001\u58f0\u97f3\u3001\u56fe\u50cf\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u90fd\u8981\u7528\u6570\u5b57\u8868\u793a\uff0c\u6307\u4ee4\u4e5f\u4e0d\u4f8b\u5916\uff0c\u4e0a\u8868\u4e2d\u7684\u673a\u5668\u8bed\u8a00\u5b8c\u5168\u7531\u5341\u516d\u8fdb\u5236\u6570\u5b57\u7ec4\u6210\u3002\u6700\u65e9\u7684\u7a0b\u5e8f\u5458\u90fd\u662f\u76f4\u63a5\u7528\u673a\u5668\u8bed\u8a00\u7f16\u7a0b\uff0c\u4f46\u662f\u5f88\u9ebb\u70e6\uff0c\u9700\u8981\u67e5\u5927\u91cf\u7684\u8868\u683c\u6765\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u8868\u793a\u4ec0\u4e48\u610f\u601d\uff0c\u7f16\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u5f88\u4e0d\u76f4\u89c2\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u4e8e\u662f\u6709\u4e86==\u6c47\u7f16\u8bed\u8a00\uff0c\u628a\u673a\u5668\u8bed\u8a00\u4e2d\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u5b57\u7528\u52a9\u8bb0\u7b26\uff08Mnemonic\uff09\u8868\u793a\uff0c\u76f4\u63a5\u7528\u8fd9\u4e9b\u52a9\u8bb0\u7b26\u5199\u51fa\u6c47\u7f16\u7a0b\u5e8f\uff0c\u7136\u540e\u8ba9\u6c47\u7f16\u5668\uff08Assembler\uff09\u53bb\u67e5\u8868\u628a\u52a9\u8bb0\u7b26\u66ff\u6362\u6210\u6570\u5b57\uff0c\u4e5f\u5c31\u628a\u6c47\u7f16\u8bed\u8a00\u7ffb\u8bd1\u6210\u4e86\u673a\u5668\u8bed\u8a00\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0c==\u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u7684\u6307\u4ee4\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6c47\u7f16\u8bed\u8a00\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u673a\u5668\u8bed\u8a00\u4e5f\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u6c47\u7f16\u5668\u5c31\u662f\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u66ff\u6362\u5de5\u4f5c \uff0c\u4f8b\u5982\u5728\u7b2c\u4e00\u6761\u6307\u4ee4\u4e2d\uff0c\u628a movl ?,%eax \u8fd9\u79cd\u683c\u5f0f\u7684\u6307\u4ee4\u66ff\u6362\u6210\u673a\u5668\u7801 a1 ? \uff0c?\u8868\u793a\u4e00\u4e2a\u5730\u5740\uff0c\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u662f 0x804a01c \uff0c\u8f6c\u6362\u6210\u673a\u5668\u7801\u4e4b\u540e\u662f 1c a0 04 08 \uff08\u8fd9\u662f\u6307\u4ee4\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u6570\u7684\u5c0f\u7aef\u8868\u793a\uff0c\u5c0f\u7aef\u8868\u793a\u5c06\u5728 \u7b2c 5.1 \u8282 \u201c\u76ee\u6807\u6587\u4ef6\u201d \u4ecb\u7ecd\uff09\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u8fd8\u53ef\u4ee5\u770b\u51fa\uff0c==\u9ad8\u7ea7\u8bed\u8a00\u7684\u8bed\u53e5\u548c\u4f4e\u7ea7\u8bed\u8a00\u7684\u6307\u4ee4\u4e4b\u95f4\u4e0d\u662f\u7b80\u5355\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c==\u4e00\u6761 a=b+1; \u8bed\u53e5\u8981\u7ffb\u8bd1\u6210\u4e09\u6761\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u7f16\u8bd1\uff08Compile\uff09 \uff0c\u7531\u7f16\u8bd1\u5668\uff08Compiler\uff09\u6765\u5b8c\u6210\uff0c\u663e\u7136\u7f16\u8bd1\u5668\u7684\u529f\u80fd\u6bd4\u6c47\u7f16\u5668\u8981\u590d\u6742\u5f97\u591a\u3002\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u5fc5\u987b\u7ecf\u8fc7\u7f16\u8bd1\u8f6c\u6210\u673a\u5668\u6307\u4ee4\u624d\u80fd\u88ab\u8ba1\u7b97\u673a\u6267\u884c\uff0c\u7f16\u8bd1\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\uff0c\u8fd9\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u7684\u4e00\u4e2a\u7f3a\u70b9\uff0c\u7136\u800c\u66f4\u591a\u7684\u662f\u4f18\u70b9\u3002\u9996\u5148\uff0c\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u66f4\u5bb9\u6613\uff0c\u5199\u51fa\u6765\u7684\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u51fa\u4e86\u9519\u4e5f\u66f4\u5bb9\u6613\u6539\u6b63\u3002\u5176\u6b21\uff0c\u9ad8\u7ea7\u8bed\u8a00\u662f\u53ef\u79fb\u690d\u7684\uff08Portable\uff09\u6216\u8005\u79f0\u4e3a\u5e73\u53f0\u65e0\u5173\u7684\uff08Platform Independent\uff09\u3002 \u5e73\u53f0 \u8fd9\u4e2a\u8bcd\u6709\u5f88\u591a\u79cd\u89e3\u91ca\uff0c\u53ef\u4ee5\u6307\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff08Architecture\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u64cd\u4f5c\u7cfb\u7edf\uff08Operating System\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u5f00\u53d1\u5e73\u53f0\uff08\u7f16\u8bd1\u5668\u3001\u94fe\u63a5\u5668\u7b49\uff09\u3002\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6709\u4e0d\u540c\u7684\u6307\u4ee4\u96c6\uff08Instruction Set\uff09\uff0c\u53ef\u4ee5\u8bc6\u522b\u7684\u673a\u5668\u6307\u4ee4\u683c\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u76f4\u63a5\u7528\u67d0\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u53ea\u80fd\u5728\u8fd9\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\uff0c\u7136\u800c\u5404\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u90fd\u6709\u5404\u81ea\u7684C\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u628aC\u7a0b\u5e8f\u7f16\u8bd1\u6210\u5404\u79cd\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7684\u673a\u5668\u6307\u4ee4\uff0c\u8fd9\u610f\u5473\u7740\u7528C\u8bed\u8a00\u5199\u7684\u7a0b\u5e8f\u53ea\u9700\u7a0d\u52a0\u4fee\u6539\u751a\u81f3\u4e0d\u7528\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u7f16\u8bd1\u8fd0\u884c\u3002\u5404\u79cd\u9ad8\u7ea7\u8bed\u8a00\u90fd\u5177\u6709C\u8bed\u8a00\u7684\u8fd9\u4e9b\u4f18\u70b9\uff0c\u6240\u4ee5\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u53ea\u6709\u548c\u786c\u4ef6\u5173\u7cfb\u5bc6\u5207\u7684\u5c11\u6570\u7a0b\u5e8f\uff08\u4f8b\u5982\u9a71\u52a8\u7a0b\u5e8f\uff09\u624d\u4f1a\u7528\u5230\u4f4e\u7ea7\u8bed\u8a00\u3002\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5373\u4f7f\u5728\u76f8\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e0b\uff0c\u7528\u4e0d\u540c\u7684C\u7f16\u8bd1\u5668\uff08\u6216\u8005\u540c\u4e00\u4e2aC\u7f16\u8bd1\u5668\u7684\u4e0d\u540c\u7248\u672c\uff09\u7f16\u8bd1\u540c\u4e00\u4e2a\u7a0b\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u6709\u53ef\u80fd\u4e0d\u540c\uff0cC\u8bed\u8a00\u6709\u4e9b\u8bed\u6cd5\u7279\u6027\u5728C\u6807\u51c6\u4e2d\u5e76\u6ca1\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5404\u7f16\u8bd1\u5668\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u7f16\u8bd1\u51fa\u6765\u7684\u6307\u4ee4\u7684\u884c\u4e3a\u7279\u6027\u4e5f\u4f1a\u4e0d\u540c\uff0c\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u4e0d\u53ef\u79fb\u690d\u7684\u8bed\u6cd5\u7279\u6027\u3002 \u603b\u7ed3\u4e00\u4e0b\u7f16\u8bd1\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u4f60\u7528\u6587\u672c\u7f16\u8f91\u5668\u5199\u4e00\u4e2aC\u7a0b\u5e8f\uff0c\u7136\u540e\u4fdd\u5b58\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982 program.c \uff08\u901a\u5e38C\u7a0b\u5e8f\u7684\u6587\u4ef6\u540d\u540e\u7f00\u662f .c \uff09\uff0c\u8fd9\u79f0\u4e3a\u6e90\u4ee3\u7801\uff08Source Code\uff09\u6216\u6e90\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u7f16\u8bd1\u5668\u5bf9\u5b83\u8fdb\u884c\u7f16\u8bd1\uff0c\u7f16\u8bd1\u7684\u8fc7\u7a0b\u5e76\u4e0d\u6267\u884c\u7a0b\u5e8f\uff0c\u800c\u662f\u628a\u6e90\u4ee3\u7801\u5168\u90e8\u7ffb\u8bd1\u6210\u673a\u5668\u6307\u4ee4\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u63cf\u8ff0\u4fe1\u606f\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\uff0c\u4f8b\u5982 a.out \uff0c\u8fd9\u79f0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4ee5\u88ab\u64cd\u4f5c\u7cfb\u7edf\u52a0\u8f7d\u8fd0\u884c\uff0c\u8ba1\u7b97\u673a\u6267\u884c\u8be5\u6587\u4ef6\u4e2d\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6307\u4ee4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6709\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4ee5\u89e3\u91ca\uff08Interpret\uff09\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u89e3\u91ca\u6267\u884c\u8fc7\u7a0b\u548cC\u8bed\u8a00\u7684\u7f16\u8bd1\u6267\u884c\u8fc7\u7a0b\u5f88\u4e0d\u4e00\u6837\u3002\u4f8b\u5982\u7f16\u5199\u4e00\u4e2aShell\u811a\u672c script.sh \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a #! /bin/sh VAR = 1 VAR = $(( $VAR + 1 )) echo $VAR \u5b9a\u4e49Shell\u53d8\u91cf VAR \u7684\u521d\u59cb\u503c\u662f1\uff0c\u7136\u540e\u81ea\u589e1\uff0c\u7136\u540e\u6253\u5370 VAR \u7684\u503c\u3002\u7528Shell\u7a0b\u5e8f /bin/sh \u89e3\u91ca\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a $ / bin / sh script . sh 2 \u8fd9\u91cc\u7684 /bin/sh \u79f0\u4e3a\u89e3\u91ca\u5668\uff08Interpreter\uff09\uff0c\u5b83\u628a\u811a\u672c\u4e2d\u7684\u6bcf\u4e00\u884c\u5f53\u4f5c\u4e00\u6761\u547d\u4ee4\u89e3\u91ca\u6267\u884c\uff0c\u800c\u4e0d\u9700\u8981\u5148\u751f\u6210\u5305\u542b\u673a\u5668\u6307\u4ee4\u7684\u53ef\u6267\u884c\u6587\u4ef6\u518d\u6267\u884c\u3002\u5982\u679c\u628a\u811a\u672c\u4e2d\u7684\u8fd9\u4e09\u884c\u5f53\u4f5c\u4e09\u6761\u547d\u4ee4\u76f4\u63a5\u6572\u5230Shell\u63d0\u793a\u7b26\u4e0b\uff0c\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\uff1a $ VAR = 1 $ VAR = $ (( $ VAR + 1 )) $ echo $ VAR 2 \u7f16\u7a0b\u8bed\u8a00\u4ecd\u5728\u53d1\u5c55\u6f14\u5316\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u673a\u5668\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e00\u4ee3\u8bed\u8a00\uff081GL\uff0c1st Generation Programming Language\uff09\uff0c\u6c47\u7f16\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e8c\u4ee3\u8bed\u8a00\uff082GL\uff0c2nd Generation Programming Language\uff09\uff0cC\u3001C++\u3001Java\u3001Python\u7b49\u53ef\u4ee5\u79f0\u4e3a\u7b2c\u4e09\u4ee3\u8bed\u8a00\uff083GL\uff0c3rd Generation Programming Language\uff09\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e864GL\uff084th Generation Programming Language\uff09\u548c5GL\uff085th Generation Programming Language\uff09\u7684\u6982\u5ff5\u30023GL\u7684\u7f16\u7a0b\u8bed\u8a00\u867d\u7136\u662f\u7528\u8bed\u53e5\u7f16\u7a0b\u800c\u4e0d\u76f4\u63a5\u7528\u6307\u4ee4\u7f16\u7a0b\uff0c\u4f46\u8bed\u53e5\u4e5f\u5206\u4e3a\u8f93\u5165\u3001\u8f93\u51fa\u3001\u57fa\u672c\u8fd0\u7b97\u3001\u6d4b\u8bd5\u5206\u652f\u548c\u5faa\u73af\u7b49\u51e0\u79cd\uff0c\u548c\u6307\u4ee4\u6709\u76f4\u63a5\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u800c4GL\u4ee5\u540e\u7684\u7f16\u7a0b\u8bed\u8a00\u66f4\u591a\u662f\u63cf\u8ff0\u8981\u505a\u4ec0\u4e48\uff08Declarative\uff09\u800c\u4e0d\u63cf\u8ff0\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\uff08Imperative\uff09\uff0c\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\u5b8c\u5168\u7531\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\u51b3\u5b9a\uff0c\u4f8b\u5982SQL\u8bed\u8a00\uff08SQL\uff0cStructured Query Language\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u5c31\u662f\u8fd9\u6837\u7684\u4f8b\u5b50\u3002 \u89e3\u91ca\u6267\u884c\u7684\u8bed\u8a00\u76f8\u6bd4\u7f16\u8bd1\u6267\u884c\u7684\u8bed\u8a00\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\uff1f \u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u601d\u8003\u9898\u3002\u672c\u4e66\u7684\u601d\u8003\u9898\u901a\u5e38\u8981\u6c42\u8bfb\u8005\u7cfb\u7edf\u5730\u603b\u7ed3\u5f53\u524d\u5c0f\u8282\u7684\u77e5\u8bc6\uff0c\u7ed3\u5408\u4ee5\u524d\u7684\u77e5\u8bc6\uff0c\u5e76\u7ecf\u8fc7\u4e00\u5b9a\u7684\u63a8\u7406\uff0c\u7136\u540e\u4f5c\u7b54\u3002\u672c\u4e66\u5f3a\u8c03\u7684\u662f\u57fa\u672c\u6982\u5ff5\uff0c\u8bfb\u8005\u5e94\u8be5\u6293\u4f4f\u6982\u5ff5\u7684\u5b9a\u4e49\u548c\u6982\u5ff5\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u603b\u7ed3\uff0c\u6bd4\u5982\u672c\u8282\u4ecb\u7ecd\u4e86\u5f88\u591a\u6982\u5ff5\uff1a\u7a0b\u5e8f\u7531\u8bed\u53e5\u6216\u6307\u4ee4\u7ec4\u6210\uff0c\u8ba1\u7b97\u673a\u53ea\u80fd\u6267\u884c \u4f4e\u7ea7\u8bed\u8a00 \u4e2d\u7684\u6307\u4ee4\uff08\u6c47\u7f16\u8bed\u8a00\u7684\u6307\u4ee4\u8981\u5148\u8f6c\u6210\u673a\u5668\u7801\u624d\u80fd\u6267\u884c\uff09\uff0c\u9ad8\u7ea7\u8bed\u8a00\u8981\u6267\u884c\u5c31\u5fc5\u987b\u5148\u7ffb\u8bd1\u6210\u4f4e\u7ea7\u8bed\u8a00\uff0c\u7ffb\u8bd1\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a\u7f16\u8bd1\u548c\u89e3\u91ca\uff0c\u867d\u7136\u6709\u8fd9\u6837\u7684\u4e0d\u4fbf\uff0c\u4f46\u9ad8\u7ea7\u8bed\u8a00\u6709\u4e00\u4e2a\u597d\u5904\u662f\u5e73\u53f0\u65e0\u5173\u6027\u3002\u4ec0\u4e48\u662f\u5e73\u53f0\uff1f\u4e00\u79cd\u5e73\u53f0\uff0c\u5c31\u662f\u4e00\u79cd\u4f53\u7cfb\u7ed3\u6784\uff0c\u5c31\u662f\u4e00\u79cd\u6307\u4ee4\u96c6\uff0c\u5c31\u662f\u4e00\u79cd\u673a\u5668\u8bed\u8a00\uff0c\u8fd9\u4e9b\u90fd\u53ef\u770b\u4f5c\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u4e0a\u6587\u5e76\u6ca1\u6709\u7528\u201c\u4e00\u4e00\u5bf9\u5e94\u201d\u8fd9\u4e2a\u8bcd\uff0c\u4f46\u8bfb\u8005\u5e94\u8be5\u80fd\u63a8\u7406\u51fa\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u800c\u9ad8\u7ea7\u8bed\u8a00\u548c\u5b83\u4eec\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u56e0\u6b64\u9ad8\u7ea7\u8bed\u8a00\u662f\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u6982\u5ff5\u4e4b\u95f4\u50cf\u8fd9\u6837\u7684\u6570\u91cf\u5bf9\u5e94\u5173\u7cfb\u5c24\u5176\u91cd\u8981\u3002\u90a3\u4e48\u7f16\u8bd1\u548c\u89e3\u91ca\u7684\u8fc7\u7a0b\u6709\u54ea\u4e9b\u4e0d\u540c\uff1f\u4e3b\u8981\u7684\u4e0d\u540c\u5728\u4e8e\u4ec0\u4e48\u65f6\u5019\u7ffb\u8bd1\u548c\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u3002 \u73b0\u5728\u56de\u7b54\u8fd9\u4e2a\u601d\u8003\u9898\uff0c\u6839\u636e\u7f16\u8bd1\u548c\u89e3\u91ca\u7684\u4e0d\u540c\u539f\u7406\uff0c\u4f60\u80fd\u5426\u5728\u6267\u884c\u6548\u7387\u548c\u5e73\u53f0\u65e0\u5173\u6027\u7b49\u65b9\u9762\u505a\u4e00\u4e0b\u6bd4\u8f83\uff1f \u7a0b\u5e8f\u7684\u8c03\u8bd5 \u7f16\u7a0b\u662f\u4e00\u4ef6\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u662f\u4eba\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u96be\u514d\u7ecf\u5e38\u51fa\u9519\u3002\u636e\u8bf4\u6709\u8fd9\u6837\u4e00\u4e2a\u5178\u6545\uff1a\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u4f53\u79ef\u90fd\u5f88\u5927\uff0c\u6709\u4e00\u6b21\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5de5\u7a0b\u5e08\u4eec\u627e\u4e86\u534a\u5929\u539f\u56e0\u6700\u540e\u53d1\u73b0\u662f\u4e00\u53ea\u81ed\u866b\u94bb\u8fdb\u8ba1\u7b97\u673a\u4e2d\u9020\u6210\u7684\u3002\u4ece\u6b64\u4ee5\u540e\uff0c\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u88ab\u53eb\u505a\u81ed\u866b\uff08Bug\uff09\uff0c\u800c\u627e\u5230\u8fd9\u4e9bBug\u5e76\u52a0\u4ee5\u7ea0\u6b63\u7684\u8fc7\u7a0b\u5c31\u53eb\u505a\u8c03\u8bd5\uff08Debug\uff09\u3002\u6709\u65f6\u5019\u8c03\u8bd5\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u8981\u6c42\u7a0b\u5e8f\u5458\u6982\u5ff5\u660e\u786e\u3001\u903b\u8f91\u6e05\u6670\u3001\u6027\u683c\u6c89\u7a33\uff0c\u8fd8\u9700\u8981\u4e00\u70b9\u8fd0\u6c14\u3002\u8c03\u8bd5\u7684\u6280\u80fd\u6211\u4eec\u5728\u540e\u7eed\u7684\u5b66\u4e60\u4e2d\u6162\u6162\u57f9\u517b\uff0c\u4f46\u9996\u5148\u6211\u4eec\u8981\u533a\u5206\u6e05\u695a\u7a0b\u5e8f\u4e2d\u7684Bug\u5206\u4e3a\u54ea\u51e0\u7c7b\u3002 \u7f16\u8bd1\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u53ea\u80fd\u7ffb\u8bd1\u8bed\u6cd5\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\uff0c\u65e0\u6cd5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5bf9\u4e8e\u81ea\u7136\u8bed\u8a00\u6765\u8bf4\uff0c\u4e00\u70b9\u8bed\u6cd5\u9519\u8bef\u4e0d\u662f\u5f88\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8bfb\u61c2\u53e5\u5b50\u3002\u800c\u7f16\u8bd1\u5668\u5c31\u6ca1\u90a3\u4e48\u5bbd\u5bb9\u4e86\uff0c\u53ea\u8981\u6709\u54ea\u6015\u4e00\u4e2a\u5f88\u5c0f\u7684\u8bed\u6cd5\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u6761\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u7136\u540e\u7f62\u5de5\uff0c\u4f60\u5c31\u5f97\u4e0d\u5230\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u867d\u7136\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5c31\u662f\u4f60\u51fa\u9519\u7684\u4ee3\u7801\u884c\uff0c\u4f46\u4e5f\u6709\u4e2a\u522b\u65f6\u5019\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5e2e\u52a9\u4e0d\u5927\uff0c\u751a\u81f3\u4f1a\u8bef\u5bfc\u4f60\u3002\u5728\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u7684\u524d\u51e0\u4e2a\u661f\u671f\uff0c\u4f60\u53ef\u80fd\u4f1a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u6765\u7ea0\u6b63\u8bed\u6cd5\u9519\u8bef\u3002\u7b49\u5230\u6709\u4e86\u4e00\u4e9b\u7ecf\u9a8c\u4e4b\u540e\uff0c\u8fd8\u662f\u4f1a\u72af\u8fd9\u6837\u7684\u9519\u8bef\uff0c\u4e0d\u8fc7\u4f1a\u5c11\u5f97\u591a\uff0c\u800c\u4e14\u4f60\u80fd\u66f4\u5feb\u5730\u53d1\u73b0\u9519\u8bef\u539f\u56e0\u3002\u7b49\u5230\u7ecf\u9a8c\u66f4\u4e30\u5bcc\u4e4b\u540e\u4f60\u5c31\u4f1a\u89c9\u5f97\uff0c\u8bed\u6cd5\u9519\u8bef\u662f\u6700\u7b80\u5355\u6700\u4f4e\u7ea7\u7684\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u7684\u9519\u8bef\u63d0\u793a\u4e5f\u5c31\u90a3\u4e48\u51e0\u79cd\uff0c\u5373\u4f7f\u9519\u8bef\u63d0\u793a\u662f\u6709\u8bef\u5bfc\u7684\u4e5f\u80fd\u591f\u7acb\u523b\u627e\u51fa\u771f\u6b63\u7684\u9519\u8bef\u539f\u56e0\u662f\u4ec0\u4e48\u3002\u76f8\u6bd4\u4e0b\u9762\u4e24\u79cd\u9519\u8bef\uff0c\u8bed\u6cd5\u9519\u8bef\u89e3\u51b3\u8d77\u6765\u8981\u5bb9\u6613\u5f97\u591a\u3002 \u8fd0\u884c\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u68c0\u67e5\u4e0d\u51fa\u8fd9\u7c7b\u9519\u8bef\uff0c\u4ecd\u7136\u53ef\u4ee5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u4f1a\u51fa\u9519\u800c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5bf9\u4e8e\u6211\u4eec\u63a5\u4e0b\u6765\u7684\u51e0\u7ae0\u5c06\u7f16\u5199\u7684\u7b80\u5355\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd0\u884c\u65f6\u9519\u8bef\u5f88\u5c11\u89c1\uff0c\u5230\u4e86\u540e\u9762\u7684\u7ae0\u8282\u4f60\u4f1a\u9047\u5230\u8d8a\u6765\u8d8a\u591a\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u8bfb\u8005\u5728\u4ee5\u540e\u7684\u5b66\u4e60\u4e2d\u8981\u65f6\u523b \u6ce8\u610f\u533a\u5206\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\uff08Run-time\uff09\u8fd9\u4e24\u4e2a\u6982\u5ff5 \uff0c\u4e0d\u4ec5\u5728\u8c03\u8bd5\u65f6\u9700\u8981\u533a\u5206\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u5728\u5b66\u4e60C\u8bed\u8a00\u7684\u5f88\u591a\u8bed\u6cd5\u65f6\u90fd\u9700\u8981\u533a\u5206\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u6709\u4e9b\u4e8b\u60c5\u5728\u7f16\u8bd1\u65f6\u505a\uff0c\u6709\u4e9b\u4e8b\u60c5\u5219\u5728\u8fd0\u884c\u65f6\u505a\u3002 \u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef \u7b2c\u4e09\u7c7b\u9519\u8bef\u662f\u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef\u3002\u5982\u679c\u7a0b\u5e8f\u91cc\u6709\u903b\u8f91\u9519\u8bef\uff0c\u7f16\u8bd1\u548c\u8fd0\u884c\u90fd\u4f1a\u5f88\u987a\u5229\uff0c\u770b\u4e0a\u53bb\u4e5f\u4e0d\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u7a0b\u5e8f\u6ca1\u6709\u5e72\u5b83\u8be5\u5e72\u7684\u4e8b\u60c5\uff0c\u800c\u662f\u5e72\u4e86\u522b\u7684\u4e8b\u60c5\u3002\u5f53\u7136\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u8ba1\u7b97\u673a\u53ea\u4f1a\u6309\u4f60\u5199\u7684\u7a0b\u5e8f\u53bb\u505a\uff0c\u95ee\u9898\u5728\u4e8e\u4f60\u5199\u7684\u7a0b\u5e8f\u4e0d\u662f\u4f60\u771f\u6b63\u60f3\u8981\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u7684\u610f\u601d\uff08\u5373\u8bed\u4e49\uff09\u662f\u9519\u7684\u3002\u627e\u5230\u903b\u8f91\u9519\u8bef\u5728\u54ea\u9700\u8981\u5341\u5206\u6e05\u9192\u7684\u5934\u8111\uff0c\u8981\u901a\u8fc7\u89c2\u5bdf\u7a0b\u5e8f\u7684\u8f93\u51fa\u56de\u8fc7\u5934\u6765\u5224\u65ad\u5b83\u5230\u5e95\u5728\u505a\u4ec0\u4e48\u3002 \u8c03\u8bd5\u7684\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5230\u4e00\u4e9b\u6cae\u4e27\uff0c\u4f46\u8c03\u8bd5\u4e5f\u662f\u7f16\u7a0b\u4e2d\u6700\u9700\u8981\u52a8\u8111\u7684\u3001\u6700\u6709\u6311\u6218\u548c\u4e50\u8da3\u7684\u90e8\u5206\u3002\u4ece\u67d0\u79cd\u89d2\u5ea6\u770b\u8c03\u8bd5\u5c31\u50cf\u4fa6\u63a2\u5de5\u4f5c\uff0c\u6839\u636e\u638c\u63e1\u7684\u7ebf\u7d22\u6765\u63a8\u65ad\u662f\u4ec0\u4e48\u539f\u56e0\u548c\u8fc7\u7a0b\u5bfc\u81f4\u4e86\u4f60\u6240\u770b\u5230\u7684\u7ed3\u679c\u3002\u8c03\u8bd5\u4e5f\u50cf\u662f\u4e00\u95e8\u5b9e\u9a8c\u79d1\u5b66\uff0c\u6bcf\u6b21\u60f3\u5230\u54ea\u91cc\u53ef\u80fd\u6709\u9519\uff0c\u5c31\u4fee\u6539\u7a0b\u5e8f\u7136\u540e\u518d\u8bd5\u4e00\u6b21\u3002\u5982\u679c\u5047\u8bbe\u662f\u5bf9\u7684\uff0c\u5c31\u80fd\u5f97\u5230\u9884\u671f\u7684\u6b63\u786e\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u63a5\u7740\u8c03\u8bd5\u4e0b\u4e00\u4e2aBug\uff0c\u4e00\u6b65\u4e00\u6b65\u903c\u8fd1\u6b63\u786e\u7684\u7a0b\u5e8f\uff1b\u5982\u679c\u5047\u8bbe\u9519\u8bef\uff0c\u53ea\u597d\u53e6\u5916\u518d\u627e\u601d\u8def\u518d\u505a\u5047\u8bbe\u3002\u201c\u5f53\u4f60\u628a\u4e0d\u53ef\u80fd\u7684\u5168\u90e8\u5254\u9664\uff0c\u5269\u4e0b\u7684\u2014\u2014\u5373\u4f7f\u770b\u8d77\u6765\u518d\u600e\u4e48\u4e0d\u53ef\u80fd\u2014\u2014\u5c31\u4e00\u5b9a\u662f\u4e8b\u5b9e\u3002\u201d\uff08\u5373\u4f7f\u4f60\u6ca1\u770b\u8fc7\u798f\u5c14\u6469\u65af\u4e5f\u8be5\u770b\u8fc7\u67ef\u5357\u5427\uff09\u3002 \u4e5f\u6709\u4e00\u79cd\u89c2\u70b9\u8ba4\u4e3a\uff0c\u7f16\u7a0b\u548c\u8c03\u8bd5\u662f\u4e00\u56de\u4e8b\uff0c\u7f16\u7a0b\u7684\u8fc7\u7a0b\u5c31\u662f\u9010\u6b65\u8c03\u8bd5\u76f4\u5230\u83b7\u5f97\u671f\u671b\u7684\u7ed3\u679c\u4e3a\u6b62\u3002\u4f60\u5e94\u8be5\u603b\u662f\u4ece\u4e00\u4e2a\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u5c0f\u89c4\u6a21\u7a0b\u5e8f\u5f00\u59cb\uff0c\u6bcf\u505a\u4e00\u6b65\u5c0f\u7684\u6539\u52a8\u5c31\u7acb\u523b\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u603b\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u7a0b\u5e8f\u505a\u53c2\u8003\uff1a\u5982\u679c\u6b63\u786e\u5c31\u7ee7\u7eed\u7f16\u7a0b\uff0c\u5982\u679c\u4e0d\u6b63\u786e\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u521a\u624d\u7684\u5c0f\u6539\u52a8\u51fa\u4e86\u95ee\u9898\u3002\u4f8b\u5982\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u5305\u542b\u4e86\u6210\u5343\u4e0a\u4e07\u884c\u4ee3\u7801\uff0c\u4f46\u5b83\u4e5f\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u89c4\u5212\u597d\u4e86\u5185\u5b58\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u7b49\u7b49\u5927\u7684\u6a21\u5757\uff0c\u4e00\u5f00\u59cb\u5b83\u4ec5\u4ec5\u662fLinus Torvalds\u7528\u6765\u7422\u78e8Intel 80386\u82af\u7247\u800c\u5199\u7684\u5c0f\u7a0b\u5e8f\u3002\u636eLarry Greenfield \u8bf4\uff0c\u201cLinus\u7684\u65e9\u671f\u5de5\u7a0b\u4e4b\u4e00\u662f\u7f16\u5199\u4e00\u4e2a\u4ea4\u66ff\u6253\u5370AAAA\u548cBBBB\u7684\u7a0b\u5e8f\uff0c\u8fd9\u73a9\u610f\u513f\u540e\u6765\u8fdb\u5316\u6210\u4e86Linux\u3002\u201d\uff08\u5f15\u81eaThe Linux User's Guide Beta1\u7248\uff09\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u4f1a\u7ed9\u51fa\u66f4\u591a\u5173\u4e8e\u8c03\u8bd5\u548c\u7f16\u7a0b\u5b9e\u8df5\u7684\u5efa\u8bae\u3002 \u53d8\u91cf\u53ca\u5176\u884c\u4e3a \u53d8\u91cf\uff08Variable\uff09\u662f\u7f16\u7a0b\u8bed\u8a00\u6700\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\u3002 \u53d8\u91cf\u662f\u8ba1\u7b97\u673a\u5b58\u50a8\u5668\u4e2d\u7684\u4e00\u5757\u547d\u540d\u7684\u7a7a\u95f4\uff0c\u53ef\u4ee5\u5728\u91cc\u9762\u5b58\u50a8\u4e00\u4e2a\u503c\uff08Value\uff09\uff0c\u5b58\u50a8\u7684\u503c\u662f\u53ef\u4ee5\u968f\u65f6\u53d8\u7684\uff0c\u6bd4\u5982\u8fd9\u6b21\u5b58\u4e2a\u5b57\u7b26 'a' \u4e0b\u6b21\u5b58\u4e2a\u5b57\u7b26 'b' \uff0c\u6b63\u56e0\u4e3a\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u968f\u65f6\u53d8\u6240\u4ee5\u624d\u53eb\u53d8\u91cf\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53d8\u91cf\u6709\u4e00\u4e2a\u50a8\u5b58\u5730\u5740\uff0c\u8be5\u5730\u5740\u50a8\u5b58\u7684\u503c\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u3002\u6216\u8005\u8bf4\uff0c\u53d8\u91cf\u662f\u4e00\u79cd\u4f7f\u7528\u65b9\u4fbf\u7684\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u5f15\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u5730\u5740\uff0c\u53d8\u91cf\u521b\u5efa\u540e\u4f1a\u5360\u7528\u4e00\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4e0d\u8981\u5f04\u6df7\u53d8\u91cf\u548c\u53d8\u91cf\u540d\uff0c\u53d8\u91cf\u540d\u662f\u6807\u8bc6\u7b26\u7684\u4e00\u79cd\u3002 \u5360\u4f4d\u7b26 \uff1a\u5148\u5360\u4f4f\u4e00\u4e2a\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff0c\u7b49\u5f85\u503c\u6dfb\u52a0\u5230\u8be5\u4f4d\u7f6e\u7684\u7b26\u53f7\u3002 \u53d8\u91cf\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u5b83\u6240\u5360\u7684\u5b58\u50a8\u7a7a\u95f4\u7684\u5927\u5c0f\u3002 \u53d8\u91cf\u7684\u884c\u4e3a\u4e00\u5171\u6709\u56db\u79cd\uff1a\u58f0\u660e\u3001\u5b9a\u4e49\u3001\u521d\u59cb\u5316\u3001\u8d4b\u503c\u3002 \u58f0\u660e \uff1a\u544a\u8bc9\u7f16\u8bd1\u5668/\u89e3\u6790\u5668\u6709\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9a\u4e49 \uff1a\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9e\u9645\u4e0a\uff0c\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u6709\u4e24\u79cd\uff1a \u5f15\u7528\u6027\u58f0\u660e\uff08defining declaration\uff09\uff1a\u4e0d\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 extern in a \u4e2d\u7684\u53d8\u91cf a \u5df2\u7ecf\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49\u3002 \u5b9a\u4e49\u6027\u58f0\u660e\uff08referencing declaration\uff09\uff1a\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 int a \u5728\u58f0\u660e\u65f6\u5c31\u5efa\u7acb\u4e86 a \u7684\u50a8\u5b58\u7a7a\u95f4\u3002 \u53ef\u89c1\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u5305\u542b\u4e86\u5b9a\u4e49\uff0c\u800c\u5e76\u975e\u6240\u6709\u7684\u58f0\u660e\u90fd\u662f\u5b9a\u4e49\u3002\u4e00\u822c\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5e38\u5e38\u8fd9\u6837\u53d9\u8ff0\uff0c\u628a\u5efa\u7acb\u7a7a\u95f4\u7684\u58f0\u660e\u79f0\u4e4b\u4e3a\"\u5b9a\u4e49\"\uff0c\u800c\u628a\u4e0d\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u79f0\u4e4b\u4e3a\"\u58f0\u660e\"\u3002 \u5b9a\u4e49\u548c\u58f0\u660e\u7684\u672c\u8d28\u533a\u522b\u5c31\u662f\uff1a\u5b9a\u4e49\u4f1a\u7ed9\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u58f0\u660e\u5219\u4e0d\u4f1a\u3002 \u521d\u59cb\u5316 \uff1a\u5728\u5b9a\u4e49\u53d8\u91cf\u4e4b\u540e\uff0c\u7cfb\u7edf\u4e3a\u53d8\u91cf\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5185\u5e76\u6ca1\u6709\u503c\uff0c\u6b64\u65f6\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4e3a\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u548c\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5bf9\u8fd9\u4e2a\u5185\u5b58\u7a7a\u95f4\u8fdb\u884c\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u4e00\u822c\u4f34\u968f\u7740\u5b9a\u4e49\u800c\u4ea7\u751f\u3002\u521d\u59cb\u5316\u662f\u4ece\u65e0\u5230\u6709\u7684\u8fc7\u7a0b\u3002 \u5982\u679c\u53d8\u91cf\u7684\u5b9a\u4e49\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u90a3\u8fd9\u4e2a\u6700\u521d\u5206\u914d\u7684\u7a7a\u95f4\u7684\u503c\u662f\u968f\u673a\u7684\uff08\u7a7a\u95f4\u4e0a\u539f\u6765\u5b58\u50a8\u7684\u503c\uff09\u3002\u4e0d\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u53d8\u91cf\u53ef\u80fd\u4f1a\u4e3a\u7a0b\u5e8f\u5e26\u6765\u4e0d\u5b89\u5168\u4e0e\u4e0d\u786e\u5b9a\u6027\u3002 \u8d4b\u503c \uff1a\u8d4b\u503c\u662f\u53d8\u91cf\u503c\u5f97\u5237\u65b0\u64cd\u4f5c\u3002\u8d4b\u503c\u662f\u4ece\u65e7\u5230\u65b0\u7684\u8fc7\u7a0b\u3002 \u57fa\u672c\u672f\u8bed\u89e3\u91ca assignment \uff1aAssignments do not copy data \u2014 they just bind names to objects. assignment\u64cd\u4f5c\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u53ea\u662f\u628a\u540d\u5b57\u548c\u5bf9\u8c61\u505a\u4e00\u4e2a\u7ed1\u5b9a\u3002\u4e5f\u5c31\u662fassignment\u8bed\u53e5\u662f\u8d77\u4e00\u4e2a\u7ed1\u5b9a\u6216\u91cd\u7ed1\u5b9a\u7684\u4f5c\u7528\uff08bind or rebind\uff09\u3002\u51fd\u6570\u8c03\u7528\u7684\u53c2\u6570\u4f20\u9012\u662f\u4f20\u5f15\u7528\uff0c\u4e0d\u662f\u62f7\u8d1d\u3002 \u5f15\u7528\uff08reference \uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a==\u8be5\u8d44\u6599==\u7684 \u6307\u6807 \u6216 \u4f4d\u5740 \u3002 \u6807\u8bc6\u7b26\uff08identifier\uff0c\u7f29\u5199\u4e3aID\uff09 \uff1a\u53c8\u79f0\u4e3a\u8bc6\u522b\u7801\uff0c\u662f\u4e00\u4e2a\u7528\u6765\u8bc6\u522b\u4e0d\u540c\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6807\u8bc6\u7b26\u5c31\u662f\u7a0b\u5e8f\u5458\u81ea\u5df1\u89c4\u5b9a\u7684\u5177\u6709\u7279\u5b9a\u542b\u4e49\u7684\u8bcd\uff0c\u6bd4\u5982\u51fd\u6570\u540d\u3001\u65b9\u6cd5\u540d\u3001\u7c7b\u540d\uff0c\u53d8\u91cf\u540d\u3001\u5e38\u91cf\u540d\u7b49\u3002 \u5bf9\u8c61\uff08object\uff09 \uff1a\u662f\u4e00\u4e2a\u8bb0\u5fc6\u4f53\u4f4d\u5740\uff0c\u5176\u4e2d\u62e5\u6709\u503c\uff0c\u8fd9\u4e2a\u4f4d\u5740\u53ef\u80fd\u6709\u6807\u8bc6\u7b26\u6307\u5411\u6b64\u5904\u3002\u53f0\u6e7e\u8bd1\u4f5c\u7269\u4ef6\u3002\u5bf9\u8c61\u662f\u67d0\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5c06\u6570\u636e\u548c\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u878d\u4e3a\u4e00\u4f53\uff0c\u5f62\u6210\u5177\u6709\u9759\u6001\u4fe1\u606f\u548c\u52a8\u6001\u884c\u4e3a\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5177\u6709\u4e00\u4e2aID\u3001\u4e00\u4e2a\u7c7b\u578b\u3001\u4e00\u4e2a\u503c\u3002\u5bf9\u8c61\u4e00\u65e6\u5efa\u7acb\uff0cID\u4fbf\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u91cc\u6240\u8bf4\u7684ID\u662f\u662f\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662fidentifier\u3002 \u5bf9\u8c61\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u6807\u8bc6\u7b26\u5e76\u4e0d\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6307\u5411\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002\u800c\u7ba1\u7406\u8fd9\u4e9b\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u7684\u4e8b\u7269\u5c31\u662f\u201c\u547d\u540d\u7a7a\u95f4\u201d\u3002 \u547d\u540d\u7a7a\u95f4\uff08Namespace\uff09 \uff1a\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u5230\u5bf9\u8c61\u7684==\u6620\u5c04==\u3002 A namespace is a mapping from names to objects. \u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\uff0c\u4f46\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u91cd\u540d\u800c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u73b0\u4eca Python \u7684\u5927\u90e8\u5206\u547d\u540d\u7a7a\u95f4\u662f\u901a\u8fc7\u5b57\u5178\u6765\u5b9e\u73b0\u7684\uff0c\u4e5f\u5373\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u5c31\u662f\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff0c\u6807\u8bc6\u7b26\u662f\u952e\uff0c\u5bf9\u8c61\u5219\u662f\u503c\u3002 \u4e0e\u547d\u540d\u7a7a\u95f4\u76f8\u5bf9\u7684\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\u201c\u4f5c\u7528\u57df\u201d \u3002 \u4f5c\u7528\u57df\uff08Scope\uff09 \uff1a\u672c\u8d28\u662f\u4e00\u5757\u6587\u672c\u533a\u57df\uff0cPython \u901a\u8fc7\u8be5\u6587\u672c\u533a\u57df\u53ef\u4ee5 \u76f4\u63a5\u8bbf\u95ee \u76f8\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u76f4\u63a5\u8bbf\u95ee \uff1aPython \u4e2d\u4e0d\u52a0 . \u7684\u8bbf\u95ee\u4e3a\u76f4\u63a5\u8bbf\u95ee\uff0c\u53cd\u4e4b\u4e3a\u5c5e\u6027\u8bbf\u95ee\u3002 \u547d\u540d\u7a7a\u95f4\u4e0e\u4f5c\u7528\u57df\u7684\u8054\u7cfb \uff1a\u4f5c\u7528\u57df\u662f Python \u7684\u4e00\u5757\u6587\u672c\u533a\u57df\uff0c\u5373\u4e00\u5757\u4ee3\u7801\u533a\u57df\uff0c\u9700\u8981\u4ee3\u7801\u533a\u57df\u5f15\u7528\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u6765\u8bbf\u95ee\u53d8\u91cf\uff0c\u90a3\u4e48\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u5c31\u6709\u4e86\u8054\u7cfb\u3002 \u540d\u5b57\u4f5c\u7528\u57df \uff1a\u540d\u5b57\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df \uff1a\u5c31\u662f\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u663e\u7136\u53ef\u4ee5\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u4e2a\u4ee3\u7801\u6587\u672c\u533a\u57df\uff0c\u5b83\u53ef\u4ee5\u88ab\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u5f71\u54cd\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \uff1a\u57fa\u4e8e\u5bf9\u8c61\u6982\u5ff5\u6765\u5206\u6790\u95ee\u9898\u548c\u8bbe\u8ba1\u89e3\u6cd5\uff0c\u8fd9\u5c31\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08object-orientation programming\uff0c\u7b80\u79f0OOP\uff09\u3002\u901a\u8fc7OOP\u6240\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u4e2a\u7531\u5f88\u591a\u5bf9\u8c61\u7ec4\u6210\u7684\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5411\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u6765\u5b9e\u73b0\u5bf9\u6570\u636e\u7684\u5904\u7406\uff0c\u5168\u4f53\u5bf9\u8c61\u901a\u8fc7\u76f8\u4e92\u534f\u4f5c\u6765\u5b8c\u6210\u7a0b\u5e8f\u7684\u6570\u636e\u5904\u7406\u529f\u80fd\u3002 \u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b \uff1a\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u7ec4\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff0c\u901a\u8fc7\u6309\u987a\u5e8f\u6267\u884c\u8fd9\u4e9b\u8fc7\u7a0b\u6765\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u3002 \u7c7b\u7684\u6982\u5ff5 \u7c7b\u662f\u7c7b\u578b\u6982\u5ff5\u7684\u53d1\u5c55\u3002 \u5bf9\u8c61\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u7528\u8ba1\u7b97\u673a\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u9996\u5148\u9700\u8981\u660e\u786e\u95ee\u9898\u4e2d\u6d89\u53ca\u54ea\u4e9b\u6570\u636e\uff0c\u5e76\u5728\u7a0b\u5e8f\u4e2d\u5c06\u8fd9\u4e9b\u6570\u636e\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u518d\u53bb\u8003\u8651\u9700\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u6267\u884c\u4f55\u79cd\u64cd\u4f5c\u3002 \u4e3a\u4e86\u8868\u793a\u6570\u636e\uff0c\u7f16\u7a0b\u8bed\u8a00\u4e00\u822c\u63d0\u4f9b\u82e5\u5e72 \u57fa\u672c\u6570\u636e\u7c7b\u578b \uff08\u5982Python\u7684int\u3001float\u3001str\u548clist\u7b49\u7c7b\u578b\uff09 \uff0c\u5e76\u4e3a\u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u63d0\u4f9b\u76f8\u5e94\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u5982Python\u4e2d\u5bf9int\u3001float\u3001str\u548clist\u90fd\u63d0\u4f9b\u4e86+\u8fd0\u7b97\uff0c\u5c3d\u7ba1\u542b\u4e49\u4e0d\u540c\uff09\u3002 \u7136\u800c\uff0c\u5b9e\u9645\u95ee\u9898\u4e2d\u5f80\u5f80\u6d89\u53ca\u5f88\u590d\u6742\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u3002\u4e3a\u4e86\u8868\u793a\u590d\u6742\u6570\u636e\uff0c\u5927\u4f53\u6709\u4e24\u79cd\u529e\u6cd5\uff1a \u4e00\u79cd\u662f\u5c06\u590d\u6742\u6570\u636e\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u6570\u636e\u9879\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u7528\u57fa\u672c\u7c7b\u578b\u8868\u793a \u53e6\u4e00\u79cd\u662f\u7531\u7528\u6237\u81ea\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5bf9\u590d\u6742\u6570\u636e\u8fdb\u884c\u76f4\u63a5\u7684\u3001\u6574\u4f53\u7684\u8868\u793a\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u8868\u793a\u4e00\u4e2a\u5b66\u751f\u7684\u59d3\u540d\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u636e\u8868\u793a\uff1b\u5982\u679c\u8981\u8868\u793a\u4e00\u4e2a\u5b66\u751f\u7684\u5e74\u9f84\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u6574\u6570\u6570\u636e\u8868\u793a\u3002\u4f46\u5982\u679c\u8981\u6574\u4f53\u8868\u793a\u4e00\u4e2a\u201c\u5b66\u751f\u201d\uff0c\u5305\u62ec\u8be5\u5b66\u751f\u7684\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u4fe1\u606f\uff0c\u5c31\u6ca1\u6cd5\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u4e86\u3002 \u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u6574\u4f53\u7684\u201c\u5b66\u751f\u201d\u5206\u89e3\u6210\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u7b80\u5355\u6570\u636e\uff0c\u5e76\u901a\u8fc7\u5206\u522b\u5904\u7406\u8fd9\u4e9b\u7b80\u5355\u6570\u636e\u800c\u8fbe\u5230\u5904\u7406\u201c\u5b66\u751f\u201d\u6570\u636e\u7684\u76ee\u7684\u3002\u4f46\u8fd9\u4e0d\u662f\u597d\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u793a\u6cd5\u4e22\u5931\u4e86\u6570\u636e\u7684\u6574\u4f53\u6027\uff0c\u5728\u7ef4\u62a4\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u6570\u636e\u95f4\u7684\u8054\u7cfb\u65f6\u5f88\u9ebb\u70e6\u3002 \u53e6\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u5b66\u751f\u6574\u4f53\u89c6\u4e3a\u4e00\u4e2a\u6570\u636e\u503c\uff0c\u5e76\u4e3a\u8fd9\u79cd\u6570\u636e\u503c\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff08\u56e0\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6ca1\u6709\u73b0\u6210\u7684\u7c7b\u578b\u80fd\u591f\u8868\u793a\u8be5\u6570\u636e\uff09\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u4e3a\u201c\u5b66\u751f\u201c\u6570\u636e\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578bS\uff0c\u90a3\u4e48S\u5e94\u8be5\u662f\u7531\u82e5\u5e72\u66f4\u7b80\u5355\u7684\u6570\u636e\u9879\u6784\u6210\u7684\uff08\u5982\u5b66\u53f7\u3001\u59d3\u540d\u7b49\uff09\uff0c\u6211\u4eec\u79f0\u8fd9\u4e9b\u6784\u6210S\u7684\u6210\u5458\u6570\u636e\u4e3aS\u7684\u5c5e\u6027\u3002\u9664\u4e86\u5b9a\u4e49S\u7c7b\u578b\u6570\u636e\u7684\u5c5e\u6027\uff0c\u8fd8\u9700\u8981\u5b9a\u4e49\u80fd\u5bf9S\u6570\u636e\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\uff08\u5982\u4fee\u6539\u59d3\u540d\u6216\u5e74\u9f84\u3001\u8bfb\u53d6\u5730\u5740\u7b49\uff09\u3002\u53ef\u4ee5\u5229\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u57fa\u672c\u7c7b\u578b\u548c\u65b0\u7c7b\u578b\u5b9a\u4e49\u673a\u5236\u6765\u5b9e\u73b0S\uff0c\u4f8b\u5982\u7528str\u7c7b\u578b\u8868\u793a\u59d3\u540d\u548c\u5b66\u53f7\uff0c\u7528int\u7c7b\u578b\u8868\u793a\u5e74\u9f84\u4e4b\u7c7b\uff0c\u7528\u51fd\u6570\u5b9e\u73b0\u5bf9S\u6570\u636e\u7684\u64cd\u4f5c\u3002\u5b9a\u4e49\u4e86S\uff0c\u5c31\u597d\u50cf\u4e3a\u7f16\u7a0b\u8bed\u8a00\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u50cf\u4f7f\u7528\u6574\u6570\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u672c\u7c7b\u578b\u4e00\u6837\u53bb\u4f7f\u7528S\u3002 \u7531\u6b64\uff0c\u6211\u4eec\u4ece\u4f20\u7edf\u7684\u6570\u636e\u7c7b\u578b\u6982\u5ff5\u53d1\u5c55\u51fa\u4e86\u201c\u7c7b\u201d\u7684\u6982\u5ff5\u3002\u7c7b\uff08class\uff09\u662f\u5e7f\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u80fd\u591f\u5b9a\u4e49\u590d\u6742\u6570\u636e\u7684\u7279\u6027\uff0c\u5305\u62ec\u9759\u6001\u7279\u6027\uff08\u5373\u6570\u636e\uff09\u548c\u52a8\u6001\u7279\u6027\uff08\u5373\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u65b9\u6cd5\uff09\u3002 \u7c7b\u7684\u503c\u5c31\u662f\u201c\u5bf9\u8c61\u201d\uff0c\u4e5f\u79f0\u4e3a\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5bf9\u8c61 vs \u53d8\u91cf python\u7684\u5165\u95e8\u8005\u53ef\u80fd\u5f88\u5bb9\u6613\u628a\u53d8\u91cf\u548c\u5bf9\u8c61\u6df7\u4e3a\u4e00\u8c08\u3002\u5728Python\u4e2d\uff0c\u53d8\u91cf\u7684\u51c6\u786e\u8bf4\u6cd5\u5e94\u8be5name\uff08\u540d\u5b57\uff09\u3002 \u5728python\u4e2d\uff0c\u5bf9\u8c61\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u540d\u5b57\u662f\u6ca1\u6709\u7c7b\u578b\u7684\u3002\u6240\u6709\u7684\u540d\u5b57\u90fd\u662f\u5185\u5b58\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u7684\u201c\u5f15\u7528\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\u540d\u5b57\u5bf9\u5e94\u7740\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f\u50a8\u5b58\u4e86\u5bf9\u8c61\u672c\u8eab\u3002 \u4f8b\u5982\uff1a nfoo = 1 #\u4e00\u4e2a\u6307\u5411int\u6570\u636e\u7c7b\u578b\u7684nfoo\uff08\u518d\u6b21\u63d0\u9192\uff0cnfoo\u6ca1\u6709\u7c7b\u578b\uff09\uff0c\u5728\u8fd9\u91cc\uff0c\u5177\u6709\u7c7b\u578b\u7684\u662f1 lstFoo = [ 1 ] #\u4e00\u4e2a\u6307\u5411list\u7c7b\u578b\u7684lstFoo\uff0c\u8fd9\u4e2alist\u4e2d\u5305\u542b\u4e00\u4e2a\u6574\u65701","title":"1.2.\u57fa\u672c\u6982\u5ff5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_1","text":"\u7a0b\u5e8f\uff08Program\uff09 \u544a\u8bc9\u8ba1\u7b97\u673a\u5e94\u5982\u4f55\u5b8c\u6210\u4e00\u4e2a\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd9\u91cc\u7684\u8ba1\u7b97\u53ef\u4ee5\u662f\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982\u89e3\u65b9\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u662f\u7b26\u53f7\u8fd0\u7b97\uff0c\u6bd4\u5982\u67e5\u627e\u548c\u66ff\u6362\u6587\u6863\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\u3002\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c \u8ba1\u7b97\u673a\u662f\u7531\u6570\u5b57\u7535\u8def\u7ec4\u6210\u7684\u8fd0\u7b97\u673a\u5668\uff0c\u53ea\u80fd\u5bf9\u6570\u5b57\u505a\u8fd0\u7b97\uff0c\u7a0b\u5e8f\u4e4b\u6240\u4ee5\u80fd\u505a\u7b26\u53f7\u8fd0\u7b97\uff0c\u662f\u56e0\u4e3a\u7b26\u53f7\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\u3002 \u6b64\u5916\uff0c\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u5904\u7406\u58f0\u97f3\u548c\u56fe\u50cf\uff0c\u58f0\u97f3\u548c\u56fe\u50cf\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u5fc5\u7136\u4e5f\u662f\u7528\u6570\u5b57\u8868\u793a\u7684\uff0c\u8fd9\u4e9b\u6570\u5b57\u7ecf\u8fc7\u4e13\u95e8\u7684\u786c\u4ef6\u8bbe\u5907\u8f6c\u6362\u6210\u4eba\u53ef\u4ee5\u542c\u5230\u3001\u770b\u5230\u7684\u58f0\u97f3\u548c\u56fe\u50cf\u3002 \u7a0b\u5e8f\u7531\u4e00\u7cfb\u5217 \u6307\u4ee4\uff08Instruction\uff09 \u7ec4\u6210\uff0c\u6307\u4ee4\u662f\u6307\u793a\u8ba1\u7b97\u673a\u505a\u67d0\u79cd\u8fd0\u7b97\u7684\u547d\u4ee4\uff0c\u901a\u5e38\u5305\u62ec\u4ee5\u4e0b\u51e0\u7c7b\uff1a \u8f93\u5165\uff08Input\uff09\uff1a\u4ece\u952e\u76d8\u3001\u6587\u4ef6\u6216\u8005\u5176\u5b83\u8bbe\u5907\u83b7\u53d6\u6570\u636e\u3002 \u8f93\u51fa\uff08Output\uff09\uff1a\u628a\u6570\u636e\u663e\u793a\u5230\u5c4f\u5e55\uff0c\u6216\u8005\u5b58\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u8005\u53d1\u9001\u5230\u5176\u5b83\u8bbe\u5907\u3002 \u57fa\u672c\u8fd0\u7b97\uff1a\u6267\u884c\u6700\u57fa\u672c\u7684\u6570\u5b66\u8fd0\u7b97\uff08\u52a0\u51cf\u4e58\u9664\uff09\u548c\u6570\u636e\u5b58\u53d6\u3002 \u6d4b\u8bd5\u548c\u5206\u652f\uff1a\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\uff0c\u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u6d4b\u8bd5\u7ed3\u679c\u6267\u884c\u4e0d\u540c\u7684\u540e\u7eed\u6307\u4ee4\u3002 \u5faa\u73af\uff1a\u91cd\u590d\u6267\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\uff0c\u6709\u4e0a\u9762\u8fd9\u51e0\u7c7b\u6307\u4ee4\u5c31\u8db3\u591f\u4e86\u3002\u4f60\u66fe\u7528\u8fc7\u7684\u4efb\u4f55\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u7ba1\u5b83\u6709\u591a\u4e48\u590d\u6742\uff0c\u90fd\u662f\u7531\u8fd9\u51e0\u7c7b\u6307\u4ee4\u7ec4\u6210\u7684\u3002\u7a0b\u5e8f\u662f\u90a3\u4e48\u7684\u590d\u6742\uff0c\u800c\u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u7528\u7684\u6307\u4ee4\u5374\u53ea\u6709\u8fd9\u4e48\u7b80\u5355\u7684\u51e0\u79cd\uff0c\u8fd9\u4e2d\u95f4\u5de8\u5927\u7684\u843d\u5dee\u5c31\u8981\u7531\u7a0b\u5e8f\u5458\u53bb\u586b\u4e86\uff0c\u6240\u4ee5\u7f16\u5199\u7a0b\u5e8f\u7406\u5e94\u662f\u4e00\u4ef6\u76f8\u5f53\u590d\u6742\u7684\u5de5\u4f5c\u3002 \u7f16\u5199\u7a0b\u5e8f\u53ef\u4ee5\u8bf4\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u628a\u590d\u6742\u7684\u4efb\u52a1\u5206\u89e3\u6210\u5b50\u4efb\u52a1\uff0c\u628a\u5b50\u4efb\u52a1\u518d\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c42\u5c42\u5206\u89e3\uff0c\u76f4\u5230\u6700\u540e\u7b80\u5355\u5f97\u53ef\u4ee5\u7528\u4ee5\u4e0a\u6307\u4ee4\u6765\u5b8c\u6210\u3002 \u7f16\u7a0b\u8bed\u8a00 \uff1a\u7f16\u7a0b\u8bed\u8a00\uff08Programming Language\uff09\u5206\u4e3a\u4f4e\u7ea7\u8bed\u8a00\uff08Low-level Language\uff09\u548c\u9ad8\u7ea7\u8bed\u8a00\uff08High-level Language\uff09\u3002 \u673a\u5668\u8bed\u8a00\uff08Machine Language\uff09\u548c\u6c47\u7f16\u8bed\u8a00\uff08Assembly Language\uff09\u5c5e\u4e8e\u4f4e\u7ea7\u8bed\u8a00\uff0c\u76f4\u63a5\u7528\u8ba1\u7b97\u673a\u6307\u4ee4\u7f16\u5199\u7a0b\u5e8f\u3002\u800cC\u3001C++\u3001Java\u3001Python\u7b49\u5c5e\u4e8e\u9ad8\u7ea7\u8bed\u8a00\uff0c\u7528\u8bed\u53e5\uff08Statement\uff09\u7f16\u5199\u7a0b\u5e8f\uff0c==\u8bed\u53e5\u662f\u8ba1\u7b97\u673a\u6307\u4ee4\u7684\u62bd\u8c61\u8868\u793a\u3002==\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u540c\u6837\u4e00\u4e2a\u8bed\u53e5\u7528C\u8bed\u8a00\u3001\u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u5206\u522b\u8868\u793a\u5982\u4e0b\uff1a \u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u8ba1\u7b97\u673a\u6307\u4ee4\u7f16\u5199\u7a0b\u5e8f\uff1b \u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u8bed\u53e5\u7f16\u5199\u7a0b\u5e8f\u3002 \u8ba1\u7b97\u673a\u53ea\u80fd\u5bf9\u6570\u5b57\u505a\u8fd0\u7b97\uff0c\u7b26\u53f7\u3001\u58f0\u97f3\u3001\u56fe\u50cf\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u90fd\u8981\u7528\u6570\u5b57\u8868\u793a\uff0c\u6307\u4ee4\u4e5f\u4e0d\u4f8b\u5916\uff0c\u4e0a\u8868\u4e2d\u7684\u673a\u5668\u8bed\u8a00\u5b8c\u5168\u7531\u5341\u516d\u8fdb\u5236\u6570\u5b57\u7ec4\u6210\u3002\u6700\u65e9\u7684\u7a0b\u5e8f\u5458\u90fd\u662f\u76f4\u63a5\u7528\u673a\u5668\u8bed\u8a00\u7f16\u7a0b\uff0c\u4f46\u662f\u5f88\u9ebb\u70e6\uff0c\u9700\u8981\u67e5\u5927\u91cf\u7684\u8868\u683c\u6765\u786e\u5b9a\u6bcf\u4e2a\u6570\u5b57\u8868\u793a\u4ec0\u4e48\u610f\u601d\uff0c\u7f16\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u5f88\u4e0d\u76f4\u89c2\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u4e8e\u662f\u6709\u4e86==\u6c47\u7f16\u8bed\u8a00\uff0c\u628a\u673a\u5668\u8bed\u8a00\u4e2d\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u5b57\u7528\u52a9\u8bb0\u7b26\uff08Mnemonic\uff09\u8868\u793a\uff0c\u76f4\u63a5\u7528\u8fd9\u4e9b\u52a9\u8bb0\u7b26\u5199\u51fa\u6c47\u7f16\u7a0b\u5e8f\uff0c\u7136\u540e\u8ba9\u6c47\u7f16\u5668\uff08Assembler\uff09\u53bb\u67e5\u8868\u628a\u52a9\u8bb0\u7b26\u66ff\u6362\u6210\u6570\u5b57\uff0c\u4e5f\u5c31\u628a\u6c47\u7f16\u8bed\u8a00\u7ffb\u8bd1\u6210\u4e86\u673a\u5668\u8bed\u8a00\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0c==\u6c47\u7f16\u8bed\u8a00\u548c\u673a\u5668\u8bed\u8a00\u7684\u6307\u4ee4\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u6c47\u7f16\u8bed\u8a00\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u673a\u5668\u8bed\u8a00\u4e5f\u6709\u4e09\u6761\u6307\u4ee4\uff0c\u6c47\u7f16\u5668\u5c31\u662f\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u66ff\u6362\u5de5\u4f5c \uff0c\u4f8b\u5982\u5728\u7b2c\u4e00\u6761\u6307\u4ee4\u4e2d\uff0c\u628a movl ?,%eax \u8fd9\u79cd\u683c\u5f0f\u7684\u6307\u4ee4\u66ff\u6362\u6210\u673a\u5668\u7801 a1 ? \uff0c?\u8868\u793a\u4e00\u4e2a\u5730\u5740\uff0c\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u662f 0x804a01c \uff0c\u8f6c\u6362\u6210\u673a\u5668\u7801\u4e4b\u540e\u662f 1c a0 04 08 \uff08\u8fd9\u662f\u6307\u4ee4\u4e2d\u7684\u5341\u516d\u8fdb\u5236\u6570\u7684\u5c0f\u7aef\u8868\u793a\uff0c\u5c0f\u7aef\u8868\u793a\u5c06\u5728 \u7b2c 5.1 \u8282 \u201c\u76ee\u6807\u6587\u4ef6\u201d \u4ecb\u7ecd\uff09\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u8fd8\u53ef\u4ee5\u770b\u51fa\uff0c==\u9ad8\u7ea7\u8bed\u8a00\u7684\u8bed\u53e5\u548c\u4f4e\u7ea7\u8bed\u8a00\u7684\u6307\u4ee4\u4e4b\u95f4\u4e0d\u662f\u7b80\u5355\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c==\u4e00\u6761 a=b+1; \u8bed\u53e5\u8981\u7ffb\u8bd1\u6210\u4e09\u6761\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u7f16\u8bd1\uff08Compile\uff09 \uff0c\u7531\u7f16\u8bd1\u5668\uff08Compiler\uff09\u6765\u5b8c\u6210\uff0c\u663e\u7136\u7f16\u8bd1\u5668\u7684\u529f\u80fd\u6bd4\u6c47\u7f16\u5668\u8981\u590d\u6742\u5f97\u591a\u3002\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u5fc5\u987b\u7ecf\u8fc7\u7f16\u8bd1\u8f6c\u6210\u673a\u5668\u6307\u4ee4\u624d\u80fd\u88ab\u8ba1\u7b97\u673a\u6267\u884c\uff0c\u7f16\u8bd1\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\uff0c\u8fd9\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u7684\u4e00\u4e2a\u7f3a\u70b9\uff0c\u7136\u800c\u66f4\u591a\u7684\u662f\u4f18\u70b9\u3002\u9996\u5148\uff0c\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u66f4\u5bb9\u6613\uff0c\u5199\u51fa\u6765\u7684\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u51fa\u4e86\u9519\u4e5f\u66f4\u5bb9\u6613\u6539\u6b63\u3002\u5176\u6b21\uff0c\u9ad8\u7ea7\u8bed\u8a00\u662f\u53ef\u79fb\u690d\u7684\uff08Portable\uff09\u6216\u8005\u79f0\u4e3a\u5e73\u53f0\u65e0\u5173\u7684\uff08Platform Independent\uff09\u3002 \u5e73\u53f0 \u8fd9\u4e2a\u8bcd\u6709\u5f88\u591a\u79cd\u89e3\u91ca\uff0c\u53ef\u4ee5\u6307\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\uff08Architecture\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u64cd\u4f5c\u7cfb\u7edf\uff08Operating System\uff09\uff0c\u4e5f\u53ef\u4ee5\u6307\u5f00\u53d1\u5e73\u53f0\uff08\u7f16\u8bd1\u5668\u3001\u94fe\u63a5\u5668\u7b49\uff09\u3002\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u6709\u4e0d\u540c\u7684\u6307\u4ee4\u96c6\uff08Instruction Set\uff09\uff0c\u53ef\u4ee5\u8bc6\u522b\u7684\u673a\u5668\u6307\u4ee4\u683c\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u76f4\u63a5\u7528\u67d0\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u6c47\u7f16\u6216\u673a\u5668\u6307\u4ee4\u5199\u51fa\u6765\u7684\u7a0b\u5e8f\u53ea\u80fd\u5728\u8fd9\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\uff0c\u7136\u800c\u5404\u79cd\u4f53\u7cfb\u7ed3\u6784\u7684\u8ba1\u7b97\u673a\u90fd\u6709\u5404\u81ea\u7684C\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u628aC\u7a0b\u5e8f\u7f16\u8bd1\u6210\u5404\u79cd\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7684\u673a\u5668\u6307\u4ee4\uff0c\u8fd9\u610f\u5473\u7740\u7528C\u8bed\u8a00\u5199\u7684\u7a0b\u5e8f\u53ea\u9700\u7a0d\u52a0\u4fee\u6539\u751a\u81f3\u4e0d\u7528\u4fee\u6539\u5c31\u53ef\u4ee5\u5728\u5404\u79cd\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u7f16\u8bd1\u8fd0\u884c\u3002\u5404\u79cd\u9ad8\u7ea7\u8bed\u8a00\u90fd\u5177\u6709C\u8bed\u8a00\u7684\u8fd9\u4e9b\u4f18\u70b9\uff0c\u6240\u4ee5\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u53ea\u6709\u548c\u786c\u4ef6\u5173\u7cfb\u5bc6\u5207\u7684\u5c11\u6570\u7a0b\u5e8f\uff08\u4f8b\u5982\u9a71\u52a8\u7a0b\u5e8f\uff09\u624d\u4f1a\u7528\u5230\u4f4e\u7ea7\u8bed\u8a00\u3002\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5373\u4f7f\u5728\u76f8\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e0b\uff0c\u7528\u4e0d\u540c\u7684C\u7f16\u8bd1\u5668\uff08\u6216\u8005\u540c\u4e00\u4e2aC\u7f16\u8bd1\u5668\u7684\u4e0d\u540c\u7248\u672c\uff09\u7f16\u8bd1\u540c\u4e00\u4e2a\u7a0b\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u6709\u53ef\u80fd\u4e0d\u540c\uff0cC\u8bed\u8a00\u6709\u4e9b\u8bed\u6cd5\u7279\u6027\u5728C\u6807\u51c6\u4e2d\u5e76\u6ca1\u6709\u660e\u786e\u89c4\u5b9a\uff0c\u5404\u7f16\u8bd1\u5668\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u7f16\u8bd1\u51fa\u6765\u7684\u6307\u4ee4\u7684\u884c\u4e3a\u7279\u6027\u4e5f\u4f1a\u4e0d\u540c\uff0c\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u4e0d\u53ef\u79fb\u690d\u7684\u8bed\u6cd5\u7279\u6027\u3002 \u603b\u7ed3\u4e00\u4e0b\u7f16\u8bd1\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u9996\u5148\u4f60\u7528\u6587\u672c\u7f16\u8f91\u5668\u5199\u4e00\u4e2aC\u7a0b\u5e8f\uff0c\u7136\u540e\u4fdd\u5b58\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982 program.c \uff08\u901a\u5e38C\u7a0b\u5e8f\u7684\u6587\u4ef6\u540d\u540e\u7f00\u662f .c \uff09\uff0c\u8fd9\u79f0\u4e3a\u6e90\u4ee3\u7801\uff08Source Code\uff09\u6216\u6e90\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u7f16\u8bd1\u5668\u5bf9\u5b83\u8fdb\u884c\u7f16\u8bd1\uff0c\u7f16\u8bd1\u7684\u8fc7\u7a0b\u5e76\u4e0d\u6267\u884c\u7a0b\u5e8f\uff0c\u800c\u662f\u628a\u6e90\u4ee3\u7801\u5168\u90e8\u7ffb\u8bd1\u6210\u673a\u5668\u6307\u4ee4\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u63cf\u8ff0\u4fe1\u606f\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\uff0c\u4f8b\u5982 a.out \uff0c\u8fd9\u79f0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4ee5\u88ab\u64cd\u4f5c\u7cfb\u7edf\u52a0\u8f7d\u8fd0\u884c\uff0c\u8ba1\u7b97\u673a\u6267\u884c\u8be5\u6587\u4ef6\u4e2d\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6307\u4ee4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6709\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4ee5\u89e3\u91ca\uff08Interpret\uff09\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u89e3\u91ca\u6267\u884c\u8fc7\u7a0b\u548cC\u8bed\u8a00\u7684\u7f16\u8bd1\u6267\u884c\u8fc7\u7a0b\u5f88\u4e0d\u4e00\u6837\u3002\u4f8b\u5982\u7f16\u5199\u4e00\u4e2aShell\u811a\u672c script.sh \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a #! /bin/sh VAR = 1 VAR = $(( $VAR + 1 )) echo $VAR \u5b9a\u4e49Shell\u53d8\u91cf VAR \u7684\u521d\u59cb\u503c\u662f1\uff0c\u7136\u540e\u81ea\u589e1\uff0c\u7136\u540e\u6253\u5370 VAR \u7684\u503c\u3002\u7528Shell\u7a0b\u5e8f /bin/sh \u89e3\u91ca\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a $ / bin / sh script . sh 2 \u8fd9\u91cc\u7684 /bin/sh \u79f0\u4e3a\u89e3\u91ca\u5668\uff08Interpreter\uff09\uff0c\u5b83\u628a\u811a\u672c\u4e2d\u7684\u6bcf\u4e00\u884c\u5f53\u4f5c\u4e00\u6761\u547d\u4ee4\u89e3\u91ca\u6267\u884c\uff0c\u800c\u4e0d\u9700\u8981\u5148\u751f\u6210\u5305\u542b\u673a\u5668\u6307\u4ee4\u7684\u53ef\u6267\u884c\u6587\u4ef6\u518d\u6267\u884c\u3002\u5982\u679c\u628a\u811a\u672c\u4e2d\u7684\u8fd9\u4e09\u884c\u5f53\u4f5c\u4e09\u6761\u547d\u4ee4\u76f4\u63a5\u6572\u5230Shell\u63d0\u793a\u7b26\u4e0b\uff0c\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\uff1a $ VAR = 1 $ VAR = $ (( $ VAR + 1 )) $ echo $ VAR 2 \u7f16\u7a0b\u8bed\u8a00\u4ecd\u5728\u53d1\u5c55\u6f14\u5316\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u673a\u5668\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e00\u4ee3\u8bed\u8a00\uff081GL\uff0c1st Generation Programming Language\uff09\uff0c\u6c47\u7f16\u8bed\u8a00\u79f0\u4e3a\u7b2c\u4e8c\u4ee3\u8bed\u8a00\uff082GL\uff0c2nd Generation Programming Language\uff09\uff0cC\u3001C++\u3001Java\u3001Python\u7b49\u53ef\u4ee5\u79f0\u4e3a\u7b2c\u4e09\u4ee3\u8bed\u8a00\uff083GL\uff0c3rd Generation Programming Language\uff09\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e864GL\uff084th Generation Programming Language\uff09\u548c5GL\uff085th Generation Programming Language\uff09\u7684\u6982\u5ff5\u30023GL\u7684\u7f16\u7a0b\u8bed\u8a00\u867d\u7136\u662f\u7528\u8bed\u53e5\u7f16\u7a0b\u800c\u4e0d\u76f4\u63a5\u7528\u6307\u4ee4\u7f16\u7a0b\uff0c\u4f46\u8bed\u53e5\u4e5f\u5206\u4e3a\u8f93\u5165\u3001\u8f93\u51fa\u3001\u57fa\u672c\u8fd0\u7b97\u3001\u6d4b\u8bd5\u5206\u652f\u548c\u5faa\u73af\u7b49\u51e0\u79cd\uff0c\u548c\u6307\u4ee4\u6709\u76f4\u63a5\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u800c4GL\u4ee5\u540e\u7684\u7f16\u7a0b\u8bed\u8a00\u66f4\u591a\u662f\u63cf\u8ff0\u8981\u505a\u4ec0\u4e48\uff08Declarative\uff09\u800c\u4e0d\u63cf\u8ff0\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\uff08Imperative\uff09\uff0c\u5177\u4f53\u4e00\u6b65\u4e00\u6b65\u600e\u4e48\u505a\u5b8c\u5168\u7531\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\u51b3\u5b9a\uff0c\u4f8b\u5982SQL\u8bed\u8a00\uff08SQL\uff0cStructured Query Language\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u5c31\u662f\u8fd9\u6837\u7684\u4f8b\u5b50\u3002","title":"\u7a0b\u5e8f\u548c\u7f16\u7a0b\u8bed\u8a00"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_2","text":"\u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u601d\u8003\u9898\u3002\u672c\u4e66\u7684\u601d\u8003\u9898\u901a\u5e38\u8981\u6c42\u8bfb\u8005\u7cfb\u7edf\u5730\u603b\u7ed3\u5f53\u524d\u5c0f\u8282\u7684\u77e5\u8bc6\uff0c\u7ed3\u5408\u4ee5\u524d\u7684\u77e5\u8bc6\uff0c\u5e76\u7ecf\u8fc7\u4e00\u5b9a\u7684\u63a8\u7406\uff0c\u7136\u540e\u4f5c\u7b54\u3002\u672c\u4e66\u5f3a\u8c03\u7684\u662f\u57fa\u672c\u6982\u5ff5\uff0c\u8bfb\u8005\u5e94\u8be5\u6293\u4f4f\u6982\u5ff5\u7684\u5b9a\u4e49\u548c\u6982\u5ff5\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u603b\u7ed3\uff0c\u6bd4\u5982\u672c\u8282\u4ecb\u7ecd\u4e86\u5f88\u591a\u6982\u5ff5\uff1a\u7a0b\u5e8f\u7531\u8bed\u53e5\u6216\u6307\u4ee4\u7ec4\u6210\uff0c\u8ba1\u7b97\u673a\u53ea\u80fd\u6267\u884c \u4f4e\u7ea7\u8bed\u8a00 \u4e2d\u7684\u6307\u4ee4\uff08\u6c47\u7f16\u8bed\u8a00\u7684\u6307\u4ee4\u8981\u5148\u8f6c\u6210\u673a\u5668\u7801\u624d\u80fd\u6267\u884c\uff09\uff0c\u9ad8\u7ea7\u8bed\u8a00\u8981\u6267\u884c\u5c31\u5fc5\u987b\u5148\u7ffb\u8bd1\u6210\u4f4e\u7ea7\u8bed\u8a00\uff0c\u7ffb\u8bd1\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a\u7f16\u8bd1\u548c\u89e3\u91ca\uff0c\u867d\u7136\u6709\u8fd9\u6837\u7684\u4e0d\u4fbf\uff0c\u4f46\u9ad8\u7ea7\u8bed\u8a00\u6709\u4e00\u4e2a\u597d\u5904\u662f\u5e73\u53f0\u65e0\u5173\u6027\u3002\u4ec0\u4e48\u662f\u5e73\u53f0\uff1f\u4e00\u79cd\u5e73\u53f0\uff0c\u5c31\u662f\u4e00\u79cd\u4f53\u7cfb\u7ed3\u6784\uff0c\u5c31\u662f\u4e00\u79cd\u6307\u4ee4\u96c6\uff0c\u5c31\u662f\u4e00\u79cd\u673a\u5668\u8bed\u8a00\uff0c\u8fd9\u4e9b\u90fd\u53ef\u770b\u4f5c\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u4e0a\u6587\u5e76\u6ca1\u6709\u7528\u201c\u4e00\u4e00\u5bf9\u5e94\u201d\u8fd9\u4e2a\u8bcd\uff0c\u4f46\u8bfb\u8005\u5e94\u8be5\u80fd\u63a8\u7406\u51fa\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u800c\u9ad8\u7ea7\u8bed\u8a00\u548c\u5b83\u4eec\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u56e0\u6b64\u9ad8\u7ea7\u8bed\u8a00\u662f\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u6982\u5ff5\u4e4b\u95f4\u50cf\u8fd9\u6837\u7684\u6570\u91cf\u5bf9\u5e94\u5173\u7cfb\u5c24\u5176\u91cd\u8981\u3002\u90a3\u4e48\u7f16\u8bd1\u548c\u89e3\u91ca\u7684\u8fc7\u7a0b\u6709\u54ea\u4e9b\u4e0d\u540c\uff1f\u4e3b\u8981\u7684\u4e0d\u540c\u5728\u4e8e\u4ec0\u4e48\u65f6\u5019\u7ffb\u8bd1\u548c\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u3002 \u73b0\u5728\u56de\u7b54\u8fd9\u4e2a\u601d\u8003\u9898\uff0c\u6839\u636e\u7f16\u8bd1\u548c\u89e3\u91ca\u7684\u4e0d\u540c\u539f\u7406\uff0c\u4f60\u80fd\u5426\u5728\u6267\u884c\u6548\u7387\u548c\u5e73\u53f0\u65e0\u5173\u6027\u7b49\u65b9\u9762\u505a\u4e00\u4e0b\u6bd4\u8f83\uff1f","title":"\u89e3\u91ca\u6267\u884c\u7684\u8bed\u8a00\u76f8\u6bd4\u7f16\u8bd1\u6267\u884c\u7684\u8bed\u8a00\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\uff1f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_3","text":"\u7f16\u7a0b\u662f\u4e00\u4ef6\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u662f\u4eba\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u96be\u514d\u7ecf\u5e38\u51fa\u9519\u3002\u636e\u8bf4\u6709\u8fd9\u6837\u4e00\u4e2a\u5178\u6545\uff1a\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u4f53\u79ef\u90fd\u5f88\u5927\uff0c\u6709\u4e00\u6b21\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5de5\u7a0b\u5e08\u4eec\u627e\u4e86\u534a\u5929\u539f\u56e0\u6700\u540e\u53d1\u73b0\u662f\u4e00\u53ea\u81ed\u866b\u94bb\u8fdb\u8ba1\u7b97\u673a\u4e2d\u9020\u6210\u7684\u3002\u4ece\u6b64\u4ee5\u540e\uff0c\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u88ab\u53eb\u505a\u81ed\u866b\uff08Bug\uff09\uff0c\u800c\u627e\u5230\u8fd9\u4e9bBug\u5e76\u52a0\u4ee5\u7ea0\u6b63\u7684\u8fc7\u7a0b\u5c31\u53eb\u505a\u8c03\u8bd5\uff08Debug\uff09\u3002\u6709\u65f6\u5019\u8c03\u8bd5\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u5de5\u4f5c\uff0c\u8981\u6c42\u7a0b\u5e8f\u5458\u6982\u5ff5\u660e\u786e\u3001\u903b\u8f91\u6e05\u6670\u3001\u6027\u683c\u6c89\u7a33\uff0c\u8fd8\u9700\u8981\u4e00\u70b9\u8fd0\u6c14\u3002\u8c03\u8bd5\u7684\u6280\u80fd\u6211\u4eec\u5728\u540e\u7eed\u7684\u5b66\u4e60\u4e2d\u6162\u6162\u57f9\u517b\uff0c\u4f46\u9996\u5148\u6211\u4eec\u8981\u533a\u5206\u6e05\u695a\u7a0b\u5e8f\u4e2d\u7684Bug\u5206\u4e3a\u54ea\u51e0\u7c7b\u3002 \u7f16\u8bd1\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u53ea\u80fd\u7ffb\u8bd1\u8bed\u6cd5\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u5426\u5219\u5c06\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\uff0c\u65e0\u6cd5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5bf9\u4e8e\u81ea\u7136\u8bed\u8a00\u6765\u8bf4\uff0c\u4e00\u70b9\u8bed\u6cd5\u9519\u8bef\u4e0d\u662f\u5f88\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8bfb\u61c2\u53e5\u5b50\u3002\u800c\u7f16\u8bd1\u5668\u5c31\u6ca1\u90a3\u4e48\u5bbd\u5bb9\u4e86\uff0c\u53ea\u8981\u6709\u54ea\u6015\u4e00\u4e2a\u5f88\u5c0f\u7684\u8bed\u6cd5\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u6761\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u7136\u540e\u7f62\u5de5\uff0c\u4f60\u5c31\u5f97\u4e0d\u5230\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u867d\u7136\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5c31\u662f\u4f60\u51fa\u9519\u7684\u4ee3\u7801\u884c\uff0c\u4f46\u4e5f\u6709\u4e2a\u522b\u65f6\u5019\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u5e2e\u52a9\u4e0d\u5927\uff0c\u751a\u81f3\u4f1a\u8bef\u5bfc\u4f60\u3002\u5728\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u7684\u524d\u51e0\u4e2a\u661f\u671f\uff0c\u4f60\u53ef\u80fd\u4f1a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u6765\u7ea0\u6b63\u8bed\u6cd5\u9519\u8bef\u3002\u7b49\u5230\u6709\u4e86\u4e00\u4e9b\u7ecf\u9a8c\u4e4b\u540e\uff0c\u8fd8\u662f\u4f1a\u72af\u8fd9\u6837\u7684\u9519\u8bef\uff0c\u4e0d\u8fc7\u4f1a\u5c11\u5f97\u591a\uff0c\u800c\u4e14\u4f60\u80fd\u66f4\u5feb\u5730\u53d1\u73b0\u9519\u8bef\u539f\u56e0\u3002\u7b49\u5230\u7ecf\u9a8c\u66f4\u4e30\u5bcc\u4e4b\u540e\u4f60\u5c31\u4f1a\u89c9\u5f97\uff0c\u8bed\u6cd5\u9519\u8bef\u662f\u6700\u7b80\u5355\u6700\u4f4e\u7ea7\u7684\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u7684\u9519\u8bef\u63d0\u793a\u4e5f\u5c31\u90a3\u4e48\u51e0\u79cd\uff0c\u5373\u4f7f\u9519\u8bef\u63d0\u793a\u662f\u6709\u8bef\u5bfc\u7684\u4e5f\u80fd\u591f\u7acb\u523b\u627e\u51fa\u771f\u6b63\u7684\u9519\u8bef\u539f\u56e0\u662f\u4ec0\u4e48\u3002\u76f8\u6bd4\u4e0b\u9762\u4e24\u79cd\u9519\u8bef\uff0c\u8bed\u6cd5\u9519\u8bef\u89e3\u51b3\u8d77\u6765\u8981\u5bb9\u6613\u5f97\u591a\u3002 \u8fd0\u884c\u65f6\u9519\u8bef \u7f16\u8bd1\u5668\u68c0\u67e5\u4e0d\u51fa\u8fd9\u7c7b\u9519\u8bef\uff0c\u4ecd\u7136\u53ef\u4ee5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u4f1a\u51fa\u9519\u800c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5bf9\u4e8e\u6211\u4eec\u63a5\u4e0b\u6765\u7684\u51e0\u7ae0\u5c06\u7f16\u5199\u7684\u7b80\u5355\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd0\u884c\u65f6\u9519\u8bef\u5f88\u5c11\u89c1\uff0c\u5230\u4e86\u540e\u9762\u7684\u7ae0\u8282\u4f60\u4f1a\u9047\u5230\u8d8a\u6765\u8d8a\u591a\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u8bfb\u8005\u5728\u4ee5\u540e\u7684\u5b66\u4e60\u4e2d\u8981\u65f6\u523b \u6ce8\u610f\u533a\u5206\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\uff08Run-time\uff09\u8fd9\u4e24\u4e2a\u6982\u5ff5 \uff0c\u4e0d\u4ec5\u5728\u8c03\u8bd5\u65f6\u9700\u8981\u533a\u5206\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u5728\u5b66\u4e60C\u8bed\u8a00\u7684\u5f88\u591a\u8bed\u6cd5\u65f6\u90fd\u9700\u8981\u533a\u5206\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u6709\u4e9b\u4e8b\u60c5\u5728\u7f16\u8bd1\u65f6\u505a\uff0c\u6709\u4e9b\u4e8b\u60c5\u5219\u5728\u8fd0\u884c\u65f6\u505a\u3002 \u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef \u7b2c\u4e09\u7c7b\u9519\u8bef\u662f\u903b\u8f91\u9519\u8bef\u548c\u8bed\u4e49\u9519\u8bef\u3002\u5982\u679c\u7a0b\u5e8f\u91cc\u6709\u903b\u8f91\u9519\u8bef\uff0c\u7f16\u8bd1\u548c\u8fd0\u884c\u90fd\u4f1a\u5f88\u987a\u5229\uff0c\u770b\u4e0a\u53bb\u4e5f\u4e0d\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u7a0b\u5e8f\u6ca1\u6709\u5e72\u5b83\u8be5\u5e72\u7684\u4e8b\u60c5\uff0c\u800c\u662f\u5e72\u4e86\u522b\u7684\u4e8b\u60c5\u3002\u5f53\u7136\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u8ba1\u7b97\u673a\u53ea\u4f1a\u6309\u4f60\u5199\u7684\u7a0b\u5e8f\u53bb\u505a\uff0c\u95ee\u9898\u5728\u4e8e\u4f60\u5199\u7684\u7a0b\u5e8f\u4e0d\u662f\u4f60\u771f\u6b63\u60f3\u8981\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u7684\u610f\u601d\uff08\u5373\u8bed\u4e49\uff09\u662f\u9519\u7684\u3002\u627e\u5230\u903b\u8f91\u9519\u8bef\u5728\u54ea\u9700\u8981\u5341\u5206\u6e05\u9192\u7684\u5934\u8111\uff0c\u8981\u901a\u8fc7\u89c2\u5bdf\u7a0b\u5e8f\u7684\u8f93\u51fa\u56de\u8fc7\u5934\u6765\u5224\u65ad\u5b83\u5230\u5e95\u5728\u505a\u4ec0\u4e48\u3002 \u8c03\u8bd5\u7684\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5230\u4e00\u4e9b\u6cae\u4e27\uff0c\u4f46\u8c03\u8bd5\u4e5f\u662f\u7f16\u7a0b\u4e2d\u6700\u9700\u8981\u52a8\u8111\u7684\u3001\u6700\u6709\u6311\u6218\u548c\u4e50\u8da3\u7684\u90e8\u5206\u3002\u4ece\u67d0\u79cd\u89d2\u5ea6\u770b\u8c03\u8bd5\u5c31\u50cf\u4fa6\u63a2\u5de5\u4f5c\uff0c\u6839\u636e\u638c\u63e1\u7684\u7ebf\u7d22\u6765\u63a8\u65ad\u662f\u4ec0\u4e48\u539f\u56e0\u548c\u8fc7\u7a0b\u5bfc\u81f4\u4e86\u4f60\u6240\u770b\u5230\u7684\u7ed3\u679c\u3002\u8c03\u8bd5\u4e5f\u50cf\u662f\u4e00\u95e8\u5b9e\u9a8c\u79d1\u5b66\uff0c\u6bcf\u6b21\u60f3\u5230\u54ea\u91cc\u53ef\u80fd\u6709\u9519\uff0c\u5c31\u4fee\u6539\u7a0b\u5e8f\u7136\u540e\u518d\u8bd5\u4e00\u6b21\u3002\u5982\u679c\u5047\u8bbe\u662f\u5bf9\u7684\uff0c\u5c31\u80fd\u5f97\u5230\u9884\u671f\u7684\u6b63\u786e\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u63a5\u7740\u8c03\u8bd5\u4e0b\u4e00\u4e2aBug\uff0c\u4e00\u6b65\u4e00\u6b65\u903c\u8fd1\u6b63\u786e\u7684\u7a0b\u5e8f\uff1b\u5982\u679c\u5047\u8bbe\u9519\u8bef\uff0c\u53ea\u597d\u53e6\u5916\u518d\u627e\u601d\u8def\u518d\u505a\u5047\u8bbe\u3002\u201c\u5f53\u4f60\u628a\u4e0d\u53ef\u80fd\u7684\u5168\u90e8\u5254\u9664\uff0c\u5269\u4e0b\u7684\u2014\u2014\u5373\u4f7f\u770b\u8d77\u6765\u518d\u600e\u4e48\u4e0d\u53ef\u80fd\u2014\u2014\u5c31\u4e00\u5b9a\u662f\u4e8b\u5b9e\u3002\u201d\uff08\u5373\u4f7f\u4f60\u6ca1\u770b\u8fc7\u798f\u5c14\u6469\u65af\u4e5f\u8be5\u770b\u8fc7\u67ef\u5357\u5427\uff09\u3002 \u4e5f\u6709\u4e00\u79cd\u89c2\u70b9\u8ba4\u4e3a\uff0c\u7f16\u7a0b\u548c\u8c03\u8bd5\u662f\u4e00\u56de\u4e8b\uff0c\u7f16\u7a0b\u7684\u8fc7\u7a0b\u5c31\u662f\u9010\u6b65\u8c03\u8bd5\u76f4\u5230\u83b7\u5f97\u671f\u671b\u7684\u7ed3\u679c\u4e3a\u6b62\u3002\u4f60\u5e94\u8be5\u603b\u662f\u4ece\u4e00\u4e2a\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u5c0f\u89c4\u6a21\u7a0b\u5e8f\u5f00\u59cb\uff0c\u6bcf\u505a\u4e00\u6b65\u5c0f\u7684\u6539\u52a8\u5c31\u7acb\u523b\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u603b\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u7a0b\u5e8f\u505a\u53c2\u8003\uff1a\u5982\u679c\u6b63\u786e\u5c31\u7ee7\u7eed\u7f16\u7a0b\uff0c\u5982\u679c\u4e0d\u6b63\u786e\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u521a\u624d\u7684\u5c0f\u6539\u52a8\u51fa\u4e86\u95ee\u9898\u3002\u4f8b\u5982\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u5305\u542b\u4e86\u6210\u5343\u4e0a\u4e07\u884c\u4ee3\u7801\uff0c\u4f46\u5b83\u4e5f\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u89c4\u5212\u597d\u4e86\u5185\u5b58\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u7b49\u7b49\u5927\u7684\u6a21\u5757\uff0c\u4e00\u5f00\u59cb\u5b83\u4ec5\u4ec5\u662fLinus Torvalds\u7528\u6765\u7422\u78e8Intel 80386\u82af\u7247\u800c\u5199\u7684\u5c0f\u7a0b\u5e8f\u3002\u636eLarry Greenfield \u8bf4\uff0c\u201cLinus\u7684\u65e9\u671f\u5de5\u7a0b\u4e4b\u4e00\u662f\u7f16\u5199\u4e00\u4e2a\u4ea4\u66ff\u6253\u5370AAAA\u548cBBBB\u7684\u7a0b\u5e8f\uff0c\u8fd9\u73a9\u610f\u513f\u540e\u6765\u8fdb\u5316\u6210\u4e86Linux\u3002\u201d\uff08\u5f15\u81eaThe Linux User's Guide Beta1\u7248\uff09\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u4f1a\u7ed9\u51fa\u66f4\u591a\u5173\u4e8e\u8c03\u8bd5\u548c\u7f16\u7a0b\u5b9e\u8df5\u7684\u5efa\u8bae\u3002","title":"\u7a0b\u5e8f\u7684\u8c03\u8bd5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_4","text":"\u53d8\u91cf\uff08Variable\uff09\u662f\u7f16\u7a0b\u8bed\u8a00\u6700\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\u3002 \u53d8\u91cf\u662f\u8ba1\u7b97\u673a\u5b58\u50a8\u5668\u4e2d\u7684\u4e00\u5757\u547d\u540d\u7684\u7a7a\u95f4\uff0c\u53ef\u4ee5\u5728\u91cc\u9762\u5b58\u50a8\u4e00\u4e2a\u503c\uff08Value\uff09\uff0c\u5b58\u50a8\u7684\u503c\u662f\u53ef\u4ee5\u968f\u65f6\u53d8\u7684\uff0c\u6bd4\u5982\u8fd9\u6b21\u5b58\u4e2a\u5b57\u7b26 'a' \u4e0b\u6b21\u5b58\u4e2a\u5b57\u7b26 'b' \uff0c\u6b63\u56e0\u4e3a\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u968f\u65f6\u53d8\u6240\u4ee5\u624d\u53eb\u53d8\u91cf\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53d8\u91cf\u6709\u4e00\u4e2a\u50a8\u5b58\u5730\u5740\uff0c\u8be5\u5730\u5740\u50a8\u5b58\u7684\u503c\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u3002\u6216\u8005\u8bf4\uff0c\u53d8\u91cf\u662f\u4e00\u79cd\u4f7f\u7528\u65b9\u4fbf\u7684\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u5f15\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u5730\u5740\uff0c\u53d8\u91cf\u521b\u5efa\u540e\u4f1a\u5360\u7528\u4e00\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4e0d\u8981\u5f04\u6df7\u53d8\u91cf\u548c\u53d8\u91cf\u540d\uff0c\u53d8\u91cf\u540d\u662f\u6807\u8bc6\u7b26\u7684\u4e00\u79cd\u3002 \u5360\u4f4d\u7b26 \uff1a\u5148\u5360\u4f4f\u4e00\u4e2a\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff0c\u7b49\u5f85\u503c\u6dfb\u52a0\u5230\u8be5\u4f4d\u7f6e\u7684\u7b26\u53f7\u3002 \u53d8\u91cf\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u5b83\u6240\u5360\u7684\u5b58\u50a8\u7a7a\u95f4\u7684\u5927\u5c0f\u3002 \u53d8\u91cf\u7684\u884c\u4e3a\u4e00\u5171\u6709\u56db\u79cd\uff1a\u58f0\u660e\u3001\u5b9a\u4e49\u3001\u521d\u59cb\u5316\u3001\u8d4b\u503c\u3002 \u58f0\u660e \uff1a\u544a\u8bc9\u7f16\u8bd1\u5668/\u89e3\u6790\u5668\u6709\u8fd9\u4e2a\u53d8\u91cf\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e0d\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9a\u4e49 \uff1a\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002 \u5b9e\u9645\u4e0a\uff0c\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u6709\u4e24\u79cd\uff1a \u5f15\u7528\u6027\u58f0\u660e\uff08defining declaration\uff09\uff1a\u4e0d\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 extern in a \u4e2d\u7684\u53d8\u91cf a \u5df2\u7ecf\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49\u3002 \u5b9a\u4e49\u6027\u58f0\u660e\uff08referencing declaration\uff09\uff1a\u9700\u8981\u5efa\u7acb\u50a8\u5b58\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u4f8b\u5982 int a \u5728\u58f0\u660e\u65f6\u5c31\u5efa\u7acb\u4e86 a \u7684\u50a8\u5b58\u7a7a\u95f4\u3002 \u53ef\u89c1\u4ece\u5e7f\u4e49\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u58f0\u660e\u5305\u542b\u4e86\u5b9a\u4e49\uff0c\u800c\u5e76\u975e\u6240\u6709\u7684\u58f0\u660e\u90fd\u662f\u5b9a\u4e49\u3002\u4e00\u822c\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5e38\u5e38\u8fd9\u6837\u53d9\u8ff0\uff0c\u628a\u5efa\u7acb\u7a7a\u95f4\u7684\u58f0\u660e\u79f0\u4e4b\u4e3a\"\u5b9a\u4e49\"\uff0c\u800c\u628a\u4e0d\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u79f0\u4e4b\u4e3a\"\u58f0\u660e\"\u3002 \u5b9a\u4e49\u548c\u58f0\u660e\u7684\u672c\u8d28\u533a\u522b\u5c31\u662f\uff1a\u5b9a\u4e49\u4f1a\u7ed9\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u58f0\u660e\u5219\u4e0d\u4f1a\u3002 \u521d\u59cb\u5316 \uff1a\u5728\u5b9a\u4e49\u53d8\u91cf\u4e4b\u540e\uff0c\u7cfb\u7edf\u4e3a\u53d8\u91cf\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5185\u5e76\u6ca1\u6709\u503c\uff0c\u6b64\u65f6\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4e3a\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u548c\u786e\u5b9a\u6027\uff0c\u9700\u8981\u5bf9\u8fd9\u4e2a\u5185\u5b58\u7a7a\u95f4\u8fdb\u884c\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u4e00\u822c\u4f34\u968f\u7740\u5b9a\u4e49\u800c\u4ea7\u751f\u3002\u521d\u59cb\u5316\u662f\u4ece\u65e0\u5230\u6709\u7684\u8fc7\u7a0b\u3002 \u5982\u679c\u53d8\u91cf\u7684\u5b9a\u4e49\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u90a3\u8fd9\u4e2a\u6700\u521d\u5206\u914d\u7684\u7a7a\u95f4\u7684\u503c\u662f\u968f\u673a\u7684\uff08\u7a7a\u95f4\u4e0a\u539f\u6765\u5b58\u50a8\u7684\u503c\uff09\u3002\u4e0d\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u53d8\u91cf\u53ef\u80fd\u4f1a\u4e3a\u7a0b\u5e8f\u5e26\u6765\u4e0d\u5b89\u5168\u4e0e\u4e0d\u786e\u5b9a\u6027\u3002 \u8d4b\u503c \uff1a\u8d4b\u503c\u662f\u53d8\u91cf\u503c\u5f97\u5237\u65b0\u64cd\u4f5c\u3002\u8d4b\u503c\u662f\u4ece\u65e7\u5230\u65b0\u7684\u8fc7\u7a0b\u3002","title":"\u53d8\u91cf\u53ca\u5176\u884c\u4e3a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_5","text":"assignment \uff1aAssignments do not copy data \u2014 they just bind names to objects. assignment\u64cd\u4f5c\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u53ea\u662f\u628a\u540d\u5b57\u548c\u5bf9\u8c61\u505a\u4e00\u4e2a\u7ed1\u5b9a\u3002\u4e5f\u5c31\u662fassignment\u8bed\u53e5\u662f\u8d77\u4e00\u4e2a\u7ed1\u5b9a\u6216\u91cd\u7ed1\u5b9a\u7684\u4f5c\u7528\uff08bind or rebind\uff09\u3002\u51fd\u6570\u8c03\u7528\u7684\u53c2\u6570\u4f20\u9012\u662f\u4f20\u5f15\u7528\uff0c\u4e0d\u662f\u62f7\u8d1d\u3002 \u5f15\u7528\uff08reference \uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002\u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a==\u8be5\u8d44\u6599==\u7684 \u6307\u6807 \u6216 \u4f4d\u5740 \u3002 \u6807\u8bc6\u7b26\uff08identifier\uff0c\u7f29\u5199\u4e3aID\uff09 \uff1a\u53c8\u79f0\u4e3a\u8bc6\u522b\u7801\uff0c\u662f\u4e00\u4e2a\u7528\u6765\u8bc6\u522b\u4e0d\u540c\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6807\u8bc6\u7b26\u5c31\u662f\u7a0b\u5e8f\u5458\u81ea\u5df1\u89c4\u5b9a\u7684\u5177\u6709\u7279\u5b9a\u542b\u4e49\u7684\u8bcd\uff0c\u6bd4\u5982\u51fd\u6570\u540d\u3001\u65b9\u6cd5\u540d\u3001\u7c7b\u540d\uff0c\u53d8\u91cf\u540d\u3001\u5e38\u91cf\u540d\u7b49\u3002 \u5bf9\u8c61\uff08object\uff09 \uff1a\u662f\u4e00\u4e2a\u8bb0\u5fc6\u4f53\u4f4d\u5740\uff0c\u5176\u4e2d\u62e5\u6709\u503c\uff0c\u8fd9\u4e2a\u4f4d\u5740\u53ef\u80fd\u6709\u6807\u8bc6\u7b26\u6307\u5411\u6b64\u5904\u3002\u53f0\u6e7e\u8bd1\u4f5c\u7269\u4ef6\u3002\u5bf9\u8c61\u662f\u67d0\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5c06\u6570\u636e\u548c\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u878d\u4e3a\u4e00\u4f53\uff0c\u5f62\u6210\u5177\u6709\u9759\u6001\u4fe1\u606f\u548c\u52a8\u6001\u884c\u4e3a\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5177\u6709\u4e00\u4e2aID\u3001\u4e00\u4e2a\u7c7b\u578b\u3001\u4e00\u4e2a\u503c\u3002\u5bf9\u8c61\u4e00\u65e6\u5efa\u7acb\uff0cID\u4fbf\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u91cc\u6240\u8bf4\u7684ID\u662f\u662f\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662fidentifier\u3002 \u5bf9\u8c61\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u6807\u8bc6\u7b26\u5e76\u4e0d\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u6307\u5411\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002\u800c\u7ba1\u7406\u8fd9\u4e9b\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u7684\u4e8b\u7269\u5c31\u662f\u201c\u547d\u540d\u7a7a\u95f4\u201d\u3002 \u547d\u540d\u7a7a\u95f4\uff08Namespace\uff09 \uff1a\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u5230\u5bf9\u8c61\u7684==\u6620\u5c04==\u3002 A namespace is a mapping from names to objects. \u5404\u4e2a\u547d\u540d\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u4e0d\u80fd\u6709\u91cd\u540d\uff0c\u4f46\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u91cd\u540d\u800c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u73b0\u4eca Python \u7684\u5927\u90e8\u5206\u547d\u540d\u7a7a\u95f4\u662f\u901a\u8fc7\u5b57\u5178\u6765\u5b9e\u73b0\u7684\uff0c\u4e5f\u5373\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u5c31\u662f\u540d\u5b57\u5230\u5bf9\u8c61\u7684\u6620\u5c04\uff0c\u6807\u8bc6\u7b26\u662f\u952e\uff0c\u5bf9\u8c61\u5219\u662f\u503c\u3002 \u4e0e\u547d\u540d\u7a7a\u95f4\u76f8\u5bf9\u7684\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\u201c\u4f5c\u7528\u57df\u201d \u3002 \u4f5c\u7528\u57df\uff08Scope\uff09 \uff1a\u672c\u8d28\u662f\u4e00\u5757\u6587\u672c\u533a\u57df\uff0cPython \u901a\u8fc7\u8be5\u6587\u672c\u533a\u57df\u53ef\u4ee5 \u76f4\u63a5\u8bbf\u95ee \u76f8\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u76f4\u63a5\u8bbf\u95ee \uff1aPython \u4e2d\u4e0d\u52a0 . \u7684\u8bbf\u95ee\u4e3a\u76f4\u63a5\u8bbf\u95ee\uff0c\u53cd\u4e4b\u4e3a\u5c5e\u6027\u8bbf\u95ee\u3002 \u547d\u540d\u7a7a\u95f4\u4e0e\u4f5c\u7528\u57df\u7684\u8054\u7cfb \uff1a\u4f5c\u7528\u57df\u662f Python \u7684\u4e00\u5757\u6587\u672c\u533a\u57df\uff0c\u5373\u4e00\u5757\u4ee3\u7801\u533a\u57df\uff0c\u9700\u8981\u4ee3\u7801\u533a\u57df\u5f15\u7528\u540d\u5b57\uff08\u6807\u8bc6\u7b26\uff09\u6765\u8bbf\u95ee\u53d8\u91cf\uff0c\u90a3\u4e48\u4f5c\u7528\u57df\u4e0e\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u5c31\u6709\u4e86\u8054\u7cfb\u3002 \u540d\u5b57\u4f5c\u7528\u57df \uff1a\u540d\u5b57\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u547d\u540d\u7a7a\u95f4\u7684\u4f5c\u7528\u57df \uff1a\u5c31\u662f\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u4ee3\u7801\u6587\u672c\u533a\u57df\u3002 \u663e\u7136\u53ef\u4ee5\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u4e2a\u4ee3\u7801\u6587\u672c\u533a\u57df\uff0c\u5b83\u53ef\u4ee5\u88ab\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u5f71\u54cd\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \uff1a\u57fa\u4e8e\u5bf9\u8c61\u6982\u5ff5\u6765\u5206\u6790\u95ee\u9898\u548c\u8bbe\u8ba1\u89e3\u6cd5\uff0c\u8fd9\u5c31\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08object-orientation programming\uff0c\u7b80\u79f0OOP\uff09\u3002\u901a\u8fc7OOP\u6240\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u4e2a\u7531\u5f88\u591a\u5bf9\u8c61\u7ec4\u6210\u7684\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5411\u5bf9\u8c61\u53d1\u9001\u6d88\u606f\u6765\u5b9e\u73b0\u5bf9\u6570\u636e\u7684\u5904\u7406\uff0c\u5168\u4f53\u5bf9\u8c61\u901a\u8fc7\u76f8\u4e92\u534f\u4f5c\u6765\u5b8c\u6210\u7a0b\u5e8f\u7684\u6570\u636e\u5904\u7406\u529f\u80fd\u3002 \u9762\u5411\u8fc7\u7a0b\u7f16\u7a0b \uff1a\u5f97\u5230\u7684\u7a0b\u5e8f\u662f\u4e00\u7ec4\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff0c\u901a\u8fc7\u6309\u987a\u5e8f\u6267\u884c\u8fd9\u4e9b\u8fc7\u7a0b\u6765\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u3002","title":"\u57fa\u672c\u672f\u8bed\u89e3\u91ca"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#_6","text":"\u7c7b\u662f\u7c7b\u578b\u6982\u5ff5\u7684\u53d1\u5c55\u3002 \u5bf9\u8c61\u53ef\u4ee5\u89c6\u4e3a\u5e7f\u4e49\u7684\u6570\u636e\uff0c\u56e0\u6b64\u548c\u666e\u901a\u6570\u636e\u4e00\u6837\u5c5e\u4e8e\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u3002 \u7528\u8ba1\u7b97\u673a\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u9996\u5148\u9700\u8981\u660e\u786e\u95ee\u9898\u4e2d\u6d89\u53ca\u54ea\u4e9b\u6570\u636e\uff0c\u5e76\u5728\u7a0b\u5e8f\u4e2d\u5c06\u8fd9\u4e9b\u6570\u636e\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u518d\u53bb\u8003\u8651\u9700\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u6267\u884c\u4f55\u79cd\u64cd\u4f5c\u3002 \u4e3a\u4e86\u8868\u793a\u6570\u636e\uff0c\u7f16\u7a0b\u8bed\u8a00\u4e00\u822c\u63d0\u4f9b\u82e5\u5e72 \u57fa\u672c\u6570\u636e\u7c7b\u578b \uff08\u5982Python\u7684int\u3001float\u3001str\u548clist\u7b49\u7c7b\u578b\uff09 \uff0c\u5e76\u4e3a\u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u63d0\u4f9b\u76f8\u5e94\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u5982Python\u4e2d\u5bf9int\u3001float\u3001str\u548clist\u90fd\u63d0\u4f9b\u4e86+\u8fd0\u7b97\uff0c\u5c3d\u7ba1\u542b\u4e49\u4e0d\u540c\uff09\u3002 \u7136\u800c\uff0c\u5b9e\u9645\u95ee\u9898\u4e2d\u5f80\u5f80\u6d89\u53ca\u5f88\u590d\u6742\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u3002\u4e3a\u4e86\u8868\u793a\u590d\u6742\u6570\u636e\uff0c\u5927\u4f53\u6709\u4e24\u79cd\u529e\u6cd5\uff1a \u4e00\u79cd\u662f\u5c06\u590d\u6742\u6570\u636e\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u6570\u636e\u9879\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u7528\u57fa\u672c\u7c7b\u578b\u8868\u793a \u53e6\u4e00\u79cd\u662f\u7531\u7528\u6237\u81ea\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5bf9\u590d\u6742\u6570\u636e\u8fdb\u884c\u76f4\u63a5\u7684\u3001\u6574\u4f53\u7684\u8868\u793a\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u8868\u793a\u4e00\u4e2a\u5b66\u751f\u7684\u59d3\u540d\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u636e\u8868\u793a\uff1b\u5982\u679c\u8981\u8868\u793a\u4e00\u4e2a\u5b66\u751f\u7684\u5e74\u9f84\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u6574\u6570\u6570\u636e\u8868\u793a\u3002\u4f46\u5982\u679c\u8981\u6574\u4f53\u8868\u793a\u4e00\u4e2a\u201c\u5b66\u751f\u201d\uff0c\u5305\u62ec\u8be5\u5b66\u751f\u7684\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u4fe1\u606f\uff0c\u5c31\u6ca1\u6cd5\u7528\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u4e86\u3002 \u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u6574\u4f53\u7684\u201c\u5b66\u751f\u201d\u5206\u89e3\u6210\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u7b80\u5355\u6570\u636e\uff0c\u5e76\u901a\u8fc7\u5206\u522b\u5904\u7406\u8fd9\u4e9b\u7b80\u5355\u6570\u636e\u800c\u8fbe\u5230\u5904\u7406\u201c\u5b66\u751f\u201d\u6570\u636e\u7684\u76ee\u7684\u3002\u4f46\u8fd9\u4e0d\u662f\u597d\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u793a\u6cd5\u4e22\u5931\u4e86\u6570\u636e\u7684\u6574\u4f53\u6027\uff0c\u5728\u7ef4\u62a4\u59d3\u540d\u3001\u5e74\u9f84\u3001\u5730\u5740\u7b49\u6570\u636e\u95f4\u7684\u8054\u7cfb\u65f6\u5f88\u9ebb\u70e6\u3002 \u53e6\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u5b66\u751f\u6574\u4f53\u89c6\u4e3a\u4e00\u4e2a\u6570\u636e\u503c\uff0c\u5e76\u4e3a\u8fd9\u79cd\u6570\u636e\u503c\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff08\u56e0\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6ca1\u6709\u73b0\u6210\u7684\u7c7b\u578b\u80fd\u591f\u8868\u793a\u8be5\u6570\u636e\uff09\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u4e3a\u201c\u5b66\u751f\u201c\u6570\u636e\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578bS\uff0c\u90a3\u4e48S\u5e94\u8be5\u662f\u7531\u82e5\u5e72\u66f4\u7b80\u5355\u7684\u6570\u636e\u9879\u6784\u6210\u7684\uff08\u5982\u5b66\u53f7\u3001\u59d3\u540d\u7b49\uff09\uff0c\u6211\u4eec\u79f0\u8fd9\u4e9b\u6784\u6210S\u7684\u6210\u5458\u6570\u636e\u4e3aS\u7684\u5c5e\u6027\u3002\u9664\u4e86\u5b9a\u4e49S\u7c7b\u578b\u6570\u636e\u7684\u5c5e\u6027\uff0c\u8fd8\u9700\u8981\u5b9a\u4e49\u80fd\u5bf9S\u6570\u636e\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\uff08\u5982\u4fee\u6539\u59d3\u540d\u6216\u5e74\u9f84\u3001\u8bfb\u53d6\u5730\u5740\u7b49\uff09\u3002\u53ef\u4ee5\u5229\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u57fa\u672c\u7c7b\u578b\u548c\u65b0\u7c7b\u578b\u5b9a\u4e49\u673a\u5236\u6765\u5b9e\u73b0S\uff0c\u4f8b\u5982\u7528str\u7c7b\u578b\u8868\u793a\u59d3\u540d\u548c\u5b66\u53f7\uff0c\u7528int\u7c7b\u578b\u8868\u793a\u5e74\u9f84\u4e4b\u7c7b\uff0c\u7528\u51fd\u6570\u5b9e\u73b0\u5bf9S\u6570\u636e\u7684\u64cd\u4f5c\u3002\u5b9a\u4e49\u4e86S\uff0c\u5c31\u597d\u50cf\u4e3a\u7f16\u7a0b\u8bed\u8a00\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u50cf\u4f7f\u7528\u6574\u6570\u3001\u5b57\u7b26\u4e32\u7b49\u57fa\u672c\u7c7b\u578b\u4e00\u6837\u53bb\u4f7f\u7528S\u3002 \u7531\u6b64\uff0c\u6211\u4eec\u4ece\u4f20\u7edf\u7684\u6570\u636e\u7c7b\u578b\u6982\u5ff5\u53d1\u5c55\u51fa\u4e86\u201c\u7c7b\u201d\u7684\u6982\u5ff5\u3002\u7c7b\uff08class\uff09\u662f\u5e7f\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u80fd\u591f\u5b9a\u4e49\u590d\u6742\u6570\u636e\u7684\u7279\u6027\uff0c\u5305\u62ec\u9759\u6001\u7279\u6027\uff08\u5373\u6570\u636e\uff09\u548c\u52a8\u6001\u7279\u6027\uff08\u5373\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u65b9\u6cd5\uff09\u3002 \u7c7b\u7684\u503c\u5c31\u662f\u201c\u5bf9\u8c61\u201d\uff0c\u4e5f\u79f0\u4e3a\u7c7b\u7684\u5b9e\u4f8b\u3002","title":"\u7c7b\u7684\u6982\u5ff5"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.2.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html#vs","text":"python\u7684\u5165\u95e8\u8005\u53ef\u80fd\u5f88\u5bb9\u6613\u628a\u53d8\u91cf\u548c\u5bf9\u8c61\u6df7\u4e3a\u4e00\u8c08\u3002\u5728Python\u4e2d\uff0c\u53d8\u91cf\u7684\u51c6\u786e\u8bf4\u6cd5\u5e94\u8be5name\uff08\u540d\u5b57\uff09\u3002 \u5728python\u4e2d\uff0c\u5bf9\u8c61\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u540d\u5b57\u662f\u6ca1\u6709\u7c7b\u578b\u7684\u3002\u6240\u6709\u7684\u540d\u5b57\u90fd\u662f\u5185\u5b58\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u7684\u201c\u5f15\u7528\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\u540d\u5b57\u5bf9\u5e94\u7740\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f\u50a8\u5b58\u4e86\u5bf9\u8c61\u672c\u8eab\u3002 \u4f8b\u5982\uff1a nfoo = 1 #\u4e00\u4e2a\u6307\u5411int\u6570\u636e\u7c7b\u578b\u7684nfoo\uff08\u518d\u6b21\u63d0\u9192\uff0cnfoo\u6ca1\u6709\u7c7b\u578b\uff09\uff0c\u5728\u8fd9\u91cc\uff0c\u5177\u6709\u7c7b\u578b\u7684\u662f1 lstFoo = [ 1 ] #\u4e00\u4e2a\u6307\u5411list\u7c7b\u578b\u7684lstFoo\uff0c\u8fd9\u4e2alist\u4e2d\u5305\u542b\u4e00\u4e2a\u6574\u65701","title":"\u5bf9\u8c61  vs  \u53d8\u91cf"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html","text":"\u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u4f18\u7f3a\u70b9\u5bf9\u6bd4 \u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u5206\u4e3a\uff1a\u5b8c\u5168\u7684\u7f16\u8bd1\u578b\uff0c\u7eaf\u7cb9\u7684\u89e3\u91ca\u578b\u6216\u8005\u4e24\u8005\u76f8\u4e92\u6df7\u5408\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u73b0\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u540c\u65f6\u62e5\u6709\u5176\u7f16\u8bd1\u578b\u548c\u89e3\u91ca\u578b\u7248\u672c\u3002 \u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u5206\u522b\u6709\u5176\u5404\u81ea\u7684\u4f18\u52bf\u548c\u4e0d\u8db3\u3002\u4e0b\u9762\u4ece\u7f16\u8bd1\u578b\u8bed\u8a00\u5f00\u59cb\u4ecb\u7ecd\u3002 \u7f16\u8bd1\u578b\u8bed\u8a00\uff1a \u7f16\u8bd1\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u5c31\u662f\u5176\u6267\u884c\u901f\u5ea6\u3002\u7528C/C++\u7f16\u5199\u7684\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6\u8981\u6bd4\u7528Java\u7f16\u5199\u7684\u76f8\u540c\u7a0b\u5e8f\u5feb30%-70%\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u6bd4\u89e3\u91ca\u578b\u7a0b\u5e8f\u6d88\u8017\u7684\u5185\u5b58\u66f4\u5c11\u3002 \u4e0d\u5229\u7684\u4e00\u9762\u2014\u2014\u7f16\u8bd1\u5668\u6bd4\u89e3\u91ca\u5668\u8981\u96be\u5199\u5f97\u591a\u3002 \u7f16\u8bd1\u5668\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u63d0\u4f9b\u4e0d\u4e86\u591a\u5c11\u5e2e\u52a9\u2014\u2014\u6709\u591a\u5c11\u6b21\u5728\u4f60\u7684C\u8bed\u8a00\u4ee3\u7801\u4e2d\u9047\u5230\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\u65f6\uff0c\u9700\u8981\u82b1\u8d39\u597d\u51e0\u4e2a\u5c0f\u65f6\u6765\u660e\u786e\u9519\u8bef\u5230\u5e95\u5728\u4ee3\u7801\u4e2d\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002 \u53ef\u6267\u884c\u7684\u7f16\u8bd1\u578b\u4ee3\u7801\u8981\u6bd4\u76f8\u540c\u7684\u89e3\u91ca\u578b\u4ee3\u7801\u5927\u8bb8\u591a\u3002\u4f8b\u5982\uff0cC/C++\u7684.exe\u6587\u4ef6\u8981\u6bd4\u540c\u6837\u529f\u80fd\u7684Java\u7684.class\u6587\u4ef6\u5927\u5f88\u591a\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u662f\u9762\u5411\u7279\u5b9a\u5e73\u53f0\u7684\u56e0\u800c\u662f\u5e73\u53f0\u4f9d\u8d56\u7684\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u4e0d\u652f\u6301\u4ee3\u7801\u4e2d\u5b9e\u73b0\u5b89\u5168\u6027\u2014\u2014\u4f8b\u5982\uff0c\u4e00\u4e2a\u7f16\u8bd1\u578b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u7684\u4efb\u4f55\u533a\u57df\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u4f60\u7684PC\u505a\u5b83\u60f3\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\uff08\u5927\u90e8\u5206\u75c5\u6bd2\u662f\u4f7f\u7528\u7f16\u8bd1\u578b\u8bed\u8a00\u7f16\u5199\u7684\uff09 \u7531\u4e8e\u677e\u6563\u7684\u5b89\u5168\u6027\u548c\u5e73\u53f0\u4f9d\u8d56\u6027\uff0c\u7f16\u8bd1\u578b\u8bed\u8a00\u4e0d\u592a\u9002\u5408\u5f00\u53d1\u56e0\u7279\u7f51\u6216\u8005\u57fa\u4e8eWeb\u7684\u5e94\u7528\u3002 \u89e3\u91ca\u578b\u8bed\u8a00\uff1a \u89e3\u91ca\u578b\u8bed\u8a00\u63d0\u4f9b\u4e86\u6781\u4f73\u7684\u8c03\u8bd5\u652f\u6301\u3002\u4e00\u540dJava\u7a0b\u5e8f\u5458\u53ea\u9700\u8981\u51e0\u5206\u949f\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u5e76\u4fee\u590d\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\uff0c\u56e0\u4e3aJava\u8fd0\u884c\u73af\u5883\u4e0d\u4ec5\u6307\u660e\u4e86\u5f02\u5e38\u7684\u6027\u8d28\uff0c\u800c\u4e14\u7ed9\u51fa\u4e86\u5f02\u5e38\u53d1\u751f\u4f4d\u7f6e\u5177\u4f53\u7684\u884c\u53f7\u548c\u51fd\u6570\u8c03\u7528\u987a\u5e8f\uff08\u8457\u540d\u7684\u5806\u6808\u8ddf\u8e2a\u4fe1\u606f\uff09\u3002\u8fd9\u6837\u7684\u4fbf\u5229\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\u6240\u65e0\u6cd5\u63d0\u4f9b\u7684\u3002 \u53e6\u4e00\u4e2a\u4f18\u52bf\u662f\u89e3\u91ca\u5668\u6bd4\u7f16\u8bd1\u5668\u5bb9\u6613\u5b9e\u73b0 \u89e3\u91ca\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u5176\u5e73\u53f0\u72ec\u7acb\u6027 \u89e3\u91ca\u578b\u8bed\u8a00\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u9ad8\u5ea6\u7684\u5b89\u5168\u6027\u2014\u2014\u8fd9\u662f\u4e92\u8054\u7f51\u5e94\u7528\u8feb\u5207\u9700\u8981\u7684 \u4e2d\u95f4\u8bed\u8a00\u4ee3\u7801\u7684\u5927\u5c0f\u6bd4\u7f16\u8bd1\u578b\u53ef\u6267\u884c\u4ee3\u7801\u5c0f\u5f88\u591a \u5e73\u53f0\u72ec\u7acb\u6027\uff0c\u4ee5\u53ca\u4e25\u5bc6\u7684\u5b89\u5168\u6027\u662f\u4f7f\u89e3\u91ca\u578b\u8bed\u8a00\u6210\u4e3a\u9002\u5408\u4e92\u8054\u7f51\u548cWeb\u5e94\u7528\u7684\u7406\u60f3\u8bed\u8a00\u76842\u4e2a\u6700\u91cd\u8981\u7684\u56e0\u7d20\u3002 \u89e3\u91ca\u578b\u8bed\u8a00\u5b58\u5728\u4e00\u4e9b\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u89e3\u91ca\u578b\u5e94\u7528\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u548cCPU\u8d44\u6e90\u3002\u8fd9\u662f\u7531\u4e8e\uff0c\u4e3a\u4e86\u8fd0\u884c\u89e3\u91ca\u578b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u76f8\u5173\u7684\u89e3\u91ca\u5668\u5fc5\u987b\u9996\u5148\u8fd0\u884c\u3002\u89e3\u91ca\u5668\u662f\u590d\u6742\u7684\uff0c\u667a\u80fd\u7684\uff0c\u5927\u91cf\u6d88\u8017\u8d44\u6e90\u7684\u7a0b\u5e8f\u5e76\u4e14\u5b83\u4eec\u4f1a\u5360\u7528\u5f88\u591aCPU\u5468\u671f\u548c\u5185\u5b58\u3002 \u7531\u4e8e\u89e3\u91ca\u578b\u5e94\u7528\u7684decode-fetch-execute\uff08\u89e3\u7801-\u6293\u53d6-\u6267\u884c\uff09\u7684\u5468\u671f\uff0c\u5b83\u4eec\u6bd4\u7f16\u8bd1\u578b\u7a0b\u5e8f\u6162\u5f88\u591a\u3002 \u89e3\u91ca\u5668\u4e5f\u4f1a\u505a\u5f88\u591a\u4ee3\u7801\u4f18\u5316\uff0c\u8fd0\u884c\u65f6\u5b89\u5168\u6027\u68c0\u67e5\uff1b\u8fd9\u4e9b\u989d\u5916\u7684\u6b65\u9aa4\u5360\u7528\u4e86\u66f4\u591a\u7684\u8d44\u6e90\u5e76\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86\u5e94\u7528\u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u539f\u6587\u94fe\u63a5\uff1a http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E Pros and cons of compiled and interpreted languages Languages can be developed either as fully-compiled, pure-interpreted, or hybrid compiled-interpreted. As a matter of fact, most of the current programming languages have both a compiled and interpreted versions available. Both compiled and interpreted approaches have their advantages and disadvantages. I will start with the compiled languages. Compiled languages One of the biggest advantages of Compiled languages is their execution speed. A program written in C/C++ runs 30-70 % faster then an equivalent program written in Java. Compiled code also takes less memory as compared to an interpreted program. On the down side - a compiler is much more difficult to write than an interpreter. A compiler does not provide much help in debugging a program - how many times have you received a \"Null pointer exception\" in your C code and have spent hours trying to figure out where in your source code did the exception occurred. The executable Compiled code is much bigger in size than an equivalent interpreted code e.g. a C/C++ .exe file is much bigger than an equivalent Java .class file Compiled programs are targeted towards a particular platform and hence are platform dependent. Compiled programs do not allow security to be implemented with in the code - e.g. a compiled program can access any area of the memory, and can do whatever it wants with your PC (most of the viruses are made in compiled languages). Due to loose security and platform dependence - a compiled language is not particularly suited to be used to develop Internet or web-based applications. Interpreted languages Interpreted language provides excellent debugging support. A Java programmer only spends a few minutes fixing a \"Null pointer exception\", because Java runtime not only specifies the nature of exception but also gives the exact line number and function call sequence (the famous stack trace information) where the exception occurred. This facility is something that a compiled language can never provide. Another advantage is that Interpreters are much easier to build then a compiler. One of the biggest advantages of Interpreters is that they make platform-independence possible. Interpreted language also allow high degree of security - something badly needed for an Internet application. An intermediate language code size is much smaller than a compiled executable code. Platform independence, and tight security are the two most important factors that make an interpreted language ideally suited for Internet and web-based applications. Interpreted languages have some serious drawbacks. The interpreted applications take up more memory and CPU resources. This is because in order to run a program written in interpreted language; the corresponding interpreter must be run first. Interpreters are sophisticated, intelligent and resource hungry programs and they take up lot of CPU cycles and RAM. Due to interpreted application's decode-fetch-execute cycle; they are much slower than compiled programs. Interpreters also do lot of code-optimization, security violation checking at run-time; these extra steps take up even more resources and further slows the application down.","title":"1.3.\u7f16\u8bd1\u578b\u8bed\u8a00 vs \u89e3\u91ca\u578b\u8bed\u8a00"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#_1","text":"\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u5206\u4e3a\uff1a\u5b8c\u5168\u7684\u7f16\u8bd1\u578b\uff0c\u7eaf\u7cb9\u7684\u89e3\u91ca\u578b\u6216\u8005\u4e24\u8005\u76f8\u4e92\u6df7\u5408\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u73b0\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u540c\u65f6\u62e5\u6709\u5176\u7f16\u8bd1\u578b\u548c\u89e3\u91ca\u578b\u7248\u672c\u3002 \u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u5206\u522b\u6709\u5176\u5404\u81ea\u7684\u4f18\u52bf\u548c\u4e0d\u8db3\u3002\u4e0b\u9762\u4ece\u7f16\u8bd1\u578b\u8bed\u8a00\u5f00\u59cb\u4ecb\u7ecd\u3002","title":"\u7f16\u8bd1\u578b\u8bed\u8a00\u548c\u89e3\u91ca\u578b\u8bed\u8a00\u7684\u4f18\u7f3a\u70b9\u5bf9\u6bd4"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#_2","text":"\u7f16\u8bd1\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u5c31\u662f\u5176\u6267\u884c\u901f\u5ea6\u3002\u7528C/C++\u7f16\u5199\u7684\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6\u8981\u6bd4\u7528Java\u7f16\u5199\u7684\u76f8\u540c\u7a0b\u5e8f\u5feb30%-70%\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u6bd4\u89e3\u91ca\u578b\u7a0b\u5e8f\u6d88\u8017\u7684\u5185\u5b58\u66f4\u5c11\u3002 \u4e0d\u5229\u7684\u4e00\u9762\u2014\u2014\u7f16\u8bd1\u5668\u6bd4\u89e3\u91ca\u5668\u8981\u96be\u5199\u5f97\u591a\u3002 \u7f16\u8bd1\u5668\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u63d0\u4f9b\u4e0d\u4e86\u591a\u5c11\u5e2e\u52a9\u2014\u2014\u6709\u591a\u5c11\u6b21\u5728\u4f60\u7684C\u8bed\u8a00\u4ee3\u7801\u4e2d\u9047\u5230\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\u65f6\uff0c\u9700\u8981\u82b1\u8d39\u597d\u51e0\u4e2a\u5c0f\u65f6\u6765\u660e\u786e\u9519\u8bef\u5230\u5e95\u5728\u4ee3\u7801\u4e2d\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002 \u53ef\u6267\u884c\u7684\u7f16\u8bd1\u578b\u4ee3\u7801\u8981\u6bd4\u76f8\u540c\u7684\u89e3\u91ca\u578b\u4ee3\u7801\u5927\u8bb8\u591a\u3002\u4f8b\u5982\uff0cC/C++\u7684.exe\u6587\u4ef6\u8981\u6bd4\u540c\u6837\u529f\u80fd\u7684Java\u7684.class\u6587\u4ef6\u5927\u5f88\u591a\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u662f\u9762\u5411\u7279\u5b9a\u5e73\u53f0\u7684\u56e0\u800c\u662f\u5e73\u53f0\u4f9d\u8d56\u7684\u3002 \u7f16\u8bd1\u578b\u7a0b\u5e8f\u4e0d\u652f\u6301\u4ee3\u7801\u4e2d\u5b9e\u73b0\u5b89\u5168\u6027\u2014\u2014\u4f8b\u5982\uff0c\u4e00\u4e2a\u7f16\u8bd1\u578b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u7684\u4efb\u4f55\u533a\u57df\uff0c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u4f60\u7684PC\u505a\u5b83\u60f3\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\uff08\u5927\u90e8\u5206\u75c5\u6bd2\u662f\u4f7f\u7528\u7f16\u8bd1\u578b\u8bed\u8a00\u7f16\u5199\u7684\uff09 \u7531\u4e8e\u677e\u6563\u7684\u5b89\u5168\u6027\u548c\u5e73\u53f0\u4f9d\u8d56\u6027\uff0c\u7f16\u8bd1\u578b\u8bed\u8a00\u4e0d\u592a\u9002\u5408\u5f00\u53d1\u56e0\u7279\u7f51\u6216\u8005\u57fa\u4e8eWeb\u7684\u5e94\u7528\u3002","title":"\u7f16\u8bd1\u578b\u8bed\u8a00\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#_3","text":"\u89e3\u91ca\u578b\u8bed\u8a00\u63d0\u4f9b\u4e86\u6781\u4f73\u7684\u8c03\u8bd5\u652f\u6301\u3002\u4e00\u540dJava\u7a0b\u5e8f\u5458\u53ea\u9700\u8981\u51e0\u5206\u949f\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u5e76\u4fee\u590d\u4e00\u4e2a\u201c\u7a7a\u6307\u9488\u5f02\u5e38\u201d\uff0c\u56e0\u4e3aJava\u8fd0\u884c\u73af\u5883\u4e0d\u4ec5\u6307\u660e\u4e86\u5f02\u5e38\u7684\u6027\u8d28\uff0c\u800c\u4e14\u7ed9\u51fa\u4e86\u5f02\u5e38\u53d1\u751f\u4f4d\u7f6e\u5177\u4f53\u7684\u884c\u53f7\u548c\u51fd\u6570\u8c03\u7528\u987a\u5e8f\uff08\u8457\u540d\u7684\u5806\u6808\u8ddf\u8e2a\u4fe1\u606f\uff09\u3002\u8fd9\u6837\u7684\u4fbf\u5229\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\u6240\u65e0\u6cd5\u63d0\u4f9b\u7684\u3002 \u53e6\u4e00\u4e2a\u4f18\u52bf\u662f\u89e3\u91ca\u5668\u6bd4\u7f16\u8bd1\u5668\u5bb9\u6613\u5b9e\u73b0 \u89e3\u91ca\u578b\u8bed\u8a00\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u5176\u5e73\u53f0\u72ec\u7acb\u6027 \u89e3\u91ca\u578b\u8bed\u8a00\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u9ad8\u5ea6\u7684\u5b89\u5168\u6027\u2014\u2014\u8fd9\u662f\u4e92\u8054\u7f51\u5e94\u7528\u8feb\u5207\u9700\u8981\u7684 \u4e2d\u95f4\u8bed\u8a00\u4ee3\u7801\u7684\u5927\u5c0f\u6bd4\u7f16\u8bd1\u578b\u53ef\u6267\u884c\u4ee3\u7801\u5c0f\u5f88\u591a \u5e73\u53f0\u72ec\u7acb\u6027\uff0c\u4ee5\u53ca\u4e25\u5bc6\u7684\u5b89\u5168\u6027\u662f\u4f7f\u89e3\u91ca\u578b\u8bed\u8a00\u6210\u4e3a\u9002\u5408\u4e92\u8054\u7f51\u548cWeb\u5e94\u7528\u7684\u7406\u60f3\u8bed\u8a00\u76842\u4e2a\u6700\u91cd\u8981\u7684\u56e0\u7d20\u3002 \u89e3\u91ca\u578b\u8bed\u8a00\u5b58\u5728\u4e00\u4e9b\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u89e3\u91ca\u578b\u5e94\u7528\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u548cCPU\u8d44\u6e90\u3002\u8fd9\u662f\u7531\u4e8e\uff0c\u4e3a\u4e86\u8fd0\u884c\u89e3\u91ca\u578b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u76f8\u5173\u7684\u89e3\u91ca\u5668\u5fc5\u987b\u9996\u5148\u8fd0\u884c\u3002\u89e3\u91ca\u5668\u662f\u590d\u6742\u7684\uff0c\u667a\u80fd\u7684\uff0c\u5927\u91cf\u6d88\u8017\u8d44\u6e90\u7684\u7a0b\u5e8f\u5e76\u4e14\u5b83\u4eec\u4f1a\u5360\u7528\u5f88\u591aCPU\u5468\u671f\u548c\u5185\u5b58\u3002 \u7531\u4e8e\u89e3\u91ca\u578b\u5e94\u7528\u7684decode-fetch-execute\uff08\u89e3\u7801-\u6293\u53d6-\u6267\u884c\uff09\u7684\u5468\u671f\uff0c\u5b83\u4eec\u6bd4\u7f16\u8bd1\u578b\u7a0b\u5e8f\u6162\u5f88\u591a\u3002 \u89e3\u91ca\u5668\u4e5f\u4f1a\u505a\u5f88\u591a\u4ee3\u7801\u4f18\u5316\uff0c\u8fd0\u884c\u65f6\u5b89\u5168\u6027\u68c0\u67e5\uff1b\u8fd9\u4e9b\u989d\u5916\u7684\u6b65\u9aa4\u5360\u7528\u4e86\u66f4\u591a\u7684\u8d44\u6e90\u5e76\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e86\u5e94\u7528\u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u539f\u6587\u94fe\u63a5\uff1a http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E","title":"\u89e3\u91ca\u578b\u8bed\u8a00\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.3.%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94.html#pros-and-cons-of-compiled-and-interpreted-languages","text":"Languages can be developed either as fully-compiled, pure-interpreted, or hybrid compiled-interpreted. As a matter of fact, most of the current programming languages have both a compiled and interpreted versions available. Both compiled and interpreted approaches have their advantages and disadvantages. I will start with the compiled languages. Compiled languages One of the biggest advantages of Compiled languages is their execution speed. A program written in C/C++ runs 30-70 % faster then an equivalent program written in Java. Compiled code also takes less memory as compared to an interpreted program. On the down side - a compiler is much more difficult to write than an interpreter. A compiler does not provide much help in debugging a program - how many times have you received a \"Null pointer exception\" in your C code and have spent hours trying to figure out where in your source code did the exception occurred. The executable Compiled code is much bigger in size than an equivalent interpreted code e.g. a C/C++ .exe file is much bigger than an equivalent Java .class file Compiled programs are targeted towards a particular platform and hence are platform dependent. Compiled programs do not allow security to be implemented with in the code - e.g. a compiled program can access any area of the memory, and can do whatever it wants with your PC (most of the viruses are made in compiled languages). Due to loose security and platform dependence - a compiled language is not particularly suited to be used to develop Internet or web-based applications. Interpreted languages Interpreted language provides excellent debugging support. A Java programmer only spends a few minutes fixing a \"Null pointer exception\", because Java runtime not only specifies the nature of exception but also gives the exact line number and function call sequence (the famous stack trace information) where the exception occurred. This facility is something that a compiled language can never provide. Another advantage is that Interpreters are much easier to build then a compiler. One of the biggest advantages of Interpreters is that they make platform-independence possible. Interpreted language also allow high degree of security - something badly needed for an Internet application. An intermediate language code size is much smaller than a compiled executable code. Platform independence, and tight security are the two most important factors that make an interpreted language ideally suited for Internet and web-based applications. Interpreted languages have some serious drawbacks. The interpreted applications take up more memory and CPU resources. This is because in order to run a program written in interpreted language; the corresponding interpreter must be run first. Interpreters are sophisticated, intelligent and resource hungry programs and they take up lot of CPU cycles and RAM. Due to interpreted application's decode-fetch-execute cycle; they are much slower than compiled programs. Interpreters also do lot of code-optimization, security violation checking at run-time; these extra steps take up even more resources and further slows the application down.","title":"Pros and cons of compiled and interpreted languages"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html","text":"\u76f8\u5bf9\u4e8e\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u6bd4\u8f83\u7279\u6b8a\u7684\u662f\u8fd8\u6709\u4e00\u4e2a\u7f16\u7801\u95ee\u9898\u3002 \u4e00\u822c\uff0c\u8ba1\u7b97\u673a\u7684\u7cfb\u7edf\u7ed3\u6784\u662f\u57fa\u4e8e\u6570\u5b57\u4fe1\u53f7\u6765\u642d\u5efa\u7684\uff0c\u8ba1\u7b97\u673a\u4e2d\u7684\u8ba1\u7b97\u57fa\u4e8e\u6570\u5b57\u7535\u8def\u3002\u5728\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u6240\u6709\u4fe1\u606f\u6700\u7ec8\u90fd\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u503c\u3002\u8ba1\u7b97\u673a\u53ea\u80fd\u5904\u7406\u6570\u5b57\uff0c\u5982\u679c\u8981\u5904\u7406\u6587\u672c\uff0c\u5c31\u5fc5\u987b\u5148\u628a\u6587\u672c\u8f6c\u6362\u4e3a\u6570\u5b57\u624d\u80fd\u5904\u7406\u3002 \u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff08bit\uff09\u6709 0 \u548c 1 \u4e24\u79cd\u72b6\u6001\uff0c\u6700\u65e9\u7684\u8ba1\u7b97\u673a\u5728\u8bbe\u8ba1\u65f6\u91c7\u75288\u4e2a\u6bd4\u7279\uff08bit\uff09\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09\uff0c\u56e0\u6b64\u4e00\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a256\u79cd\u72b6\u6001\uff08$2^8=256$\uff09\uff0c\u6bcf\u4e00\u4e2a\u72b6\u6001\u5bf9\u5e94\u4e00\u4e2a\u7b26\u53f7\uff0c\u5c31\u662f256\u4e2a\u7b26\u53f7\uff0c\u4ece 00000000 \u5230 11111111 \u3002\u4e00\u4e2a\u5b57\u8282\u80fd\u8868\u793a\u7684\u6700\u5927\u7684\u6574\u6570\u5c31\u662f255\uff08\u4e8c\u8fdb\u523611111111=\u5341\u8fdb\u5236255\uff09\uff0c\u5982\u679c\u8981\u8868\u793a\u66f4\u5927\u7684\u6574\u6570\uff0c\u5c31\u5fc5\u987b\u7528\u66f4\u591a\u7684\u5b57\u8282\u3002\u6bd4\u5982\u4e24\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u6574\u6570\u662f 65535 \uff0c4\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u6574\u6570\u662f 4294967295 \u3002 ASCII\u7801 \u56e0\u4e3a\u8ba1\u7b97\u673a\u662f\u7f8e\u56fd\u4eba\u53d1\u660e\u7684\uff0c\u6240\u4ee5\u5728\u4e0a\u4e2a\u4e16\u7eaa60\u5e74\u4ee3\uff0c\u7f8e\u56fd\u5236\u5b9a\u4e86\u4e00\u5957\u5b57\u7b26\u7f16\u7801\uff0c\u5bf9\u82f1\u8bed\u5b57\u7b26\u4e0e\u4e8c\u8fdb\u5236\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u505a\u4e86\u7edf\u4e00\u89c4\u5b9a\u3002\u8fd9\u88ab\u79f0\u4e3a ASCII \u7801\uff0c\u4e00\u76f4\u6cbf\u7528\u81f3\u4eca\u3002ASCII \u7801\u4e00\u5171\u89c4\u5b9a\u4e86128\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff0c\u6bd4\u5982\u7a7a\u683c SPACE \u662f32\uff08\u4e8c\u8fdb\u5236 00100000 \uff09\uff0c\u5927\u5199\u7684\u5b57\u6bcd A \u662f65\uff08\u4e8c\u8fdb\u5236 01000001 \uff09\u3002\u8fd9128\u4e2a\u7b26\u53f7\uff08\u5305\u62ec32\u4e2a\u4e0d\u80fd\u6253\u5370\u51fa\u6765\u7684\u63a7\u5236\u7b26\u53f7\uff09\uff0c\u53ea\u5360\u7528\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u540e\u97627\u4f4d\uff0c\u6700\u524d\u9762\u7684\u4e00\u4f4d\u7edf\u4e00\u89c4\u5b9a\u4e3a 0 \u3002 \u975eASCII\u7801 \u82f1\u8bed\u7528128\u4e2a\u7b26\u53f7\u7f16\u7801\u5c31\u591f\u4e86\uff0c\u4f46\u662f\u7528\u6765\u8868\u793a\u5176\u4ed6\u8bed\u8a00\uff0c128\u4e2a\u7b26\u53f7\u662f\u4e0d\u591f\u7684\u3002\u6bd4\u5982\uff0c\u5728\u6cd5\u8bed\u4e2d\uff0c\u5b57\u6bcd\u4e0a\u65b9\u6709\u6ce8\u97f3\u7b26\u53f7\uff0c\u5b83\u5c31\u65e0\u6cd5\u7528 ASCII \u7801\u8868\u793a\u3002\u4e8e\u662f\uff0c\u4e00\u4e9b\u6b27\u6d32\u56fd\u5bb6\u5c31\u51b3\u5b9a\uff0c\u5229\u7528\u5b57\u8282\u4e2d\u95f2\u7f6e\u7684\u6700\u9ad8\u4f4d\u7f16\u5165\u65b0\u7684\u7b26\u53f7\u3002\u6bd4\u5982\uff0c\u6cd5\u8bed\u4e2d\u7684 \u00e9 \u7684\u7f16\u7801\u4e3a130\uff08\u4e8c\u8fdb\u5236 10000010 \uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u4e9b\u6b27\u6d32\u56fd\u5bb6\u4f7f\u7528\u7684\u7f16\u7801\u4f53\u7cfb\uff0c\u53ef\u4ee5\u8868\u793a\u6700\u591a256\u4e2a\u7b26\u53f7\u3002 \u4f46\u662f\uff0c\u8fd9\u91cc\u53c8\u51fa\u73b0\u4e86\u65b0\u7684\u95ee\u9898\u3002\u4e0d\u540c\u7684\u56fd\u5bb6\u6709\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u56e0\u6b64\uff0c\u54ea\u6015\u5b83\u4eec\u90fd\u4f7f\u7528256\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u4ee3\u8868\u7684\u5b57\u6bcd\u5374\u4e0d\u4e00\u6837\u3002\u6bd4\u5982\uff0c130\u5728\u6cd5\u8bed\u7f16\u7801\u4e2d\u4ee3\u8868\u4e86 \u00e9 \uff0c\u5728\u5e0c\u4f2f\u6765\u8bed\u7f16\u7801\u4e2d\u5374\u4ee3\u8868\u4e86\u5b57\u6bcd Gimel ( \u05d2 )\uff0c\u5728\u4fc4\u8bed\u7f16\u7801\u4e2d\u53c8\u4f1a\u4ee3\u8868\u53e6\u4e00\u4e2a\u7b26\u53f7\u3002\u4f46\u662f\u4e0d\u7ba1\u600e\u6837\uff0c\u6240\u6709\u8fd9\u4e9b\u7f16\u7801\u65b9\u5f0f\u4e2d\uff0c0--127\u8868\u793a\u7684\u7b26\u53f7\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u4e00\u6837\u7684\u53ea\u662f128--255\u7684\u8fd9\u4e00\u6bb5\u3002 GB2312\u7801 \u6c49\u5b57\u591a\u8fbe10\u4e07\u5de6\u53f3\uff0c\u8981\u5904\u7406\u4e2d\u6587\u663e\u7136\u4e00\u4e2a\u5b57\u8282\u662f\u4e0d\u591f\u7684\uff0c\u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u4e14\u8fd8\u4e0d\u80fd\u548cASCII\u7f16\u7801\u51b2\u7a81\uff0c\u6240\u4ee5\uff0c\u4e2d\u56fd\u5236\u5b9a\u4e86 GB2312 \u7f16\u7801\uff0c\u4f7f\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u6c49\u5b57\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u6700\u591a\u53ef\u4ee5\u8868\u793a 256 x 256 = 65536 \u4e2a\u7b26\u53f7\u3002 \u867d\u7136\u90fd\u662f\u7528\u591a\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f46\u662fGB\u7c7b\u7684\u6c49\u5b57\u7f16\u7801\u4e0e\u540e\u6587\u7684 Unicode \u548c UTF-8 \u662f\u6beb\u65e0\u5173\u7cfb\u7684\u3002 \u53ef\u4ee5\u60f3\u5f97\u5230\u7684\u662f\uff0c\u5168\u4e16\u754c\u6709\u4e0a\u767e\u79cd\u8bed\u8a00\uff0c\u65e5\u672c\u628a\u65e5\u6587\u7f16\u5230 Shift_JIS \u91cc\uff0c\u97e9\u56fd\u628a\u97e9\u6587\u7f16\u5230 Euc-kr \u91cc\uff0c\u5404\u56fd\u6709\u5404\u56fd\u7684\u6807\u51c6\uff0c\u5c31\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u51fa\u73b0\u51b2\u7a81\uff0c\u7ed3\u679c\u5c31\u662f\uff0c\u5728\u591a\u8bed\u8a00\u6df7\u5408\u7684\u6587\u672c\u4e2d\uff0c\u663e\u793a\u51fa\u6765\u4f1a\u6709\u4e71\u7801\u3002 Unicode \u6b63\u5982\u4e0a\u4e00\u8282\u6240\u8bf4\uff0c\u4e16\u754c\u4e0a\u5b58\u5728\u7740\u591a\u79cd\u7f16\u7801\u65b9\u5f0f\uff0c\u540c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u53ef\u4ee5\u88ab\u89e3\u91ca\u6210\u4e0d\u540c\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u8981\u60f3\u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5c31\u5fc5\u987b\u77e5\u9053\u5b83\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5426\u5219\u7528\u9519\u8bef\u7684\u7f16\u7801\u65b9\u5f0f\u89e3\u8bfb\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\u4e3a\u4ec0\u4e48\u7535\u5b50\u90ae\u4ef6\u5e38\u5e38\u51fa\u73b0\u4e71\u7801\uff1f\u5c31\u662f\u56e0\u4e3a\u53d1\u4fe1\u4eba\u548c\u6536\u4fe1\u4eba\u4f7f\u7528\u7684\u7f16\u7801\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002 \u56e0\u6b64\uff0cUnicode\u5e94\u8fd0\u800c\u751f\u3002Unicode\u628a\u6240\u6709\u8bed\u8a00\u90fd\u7edf\u4e00\u5230\u4e00\u5957\u7f16\u7801\u91cc\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u518d\u6709\u4e71\u7801\u95ee\u9898\u4e86\u3002 Unicode\u5c31\u50cf\u5b83\u7684\u540d\u5b57\u90fd\u8868\u793a\u7684\uff0c\u8fd9\u662f\u4e00\u79cd\u6240\u6709\u7b26\u53f7\u7684\u7f16\u7801\u3002 Unicode\u6807\u51c6\u4e5f\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u4f46\u6700\u5e38\u7528\u7684\u662f\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u5982\u679c\u8981\u7528\u5230\u975e\u5e38\u504f\u50fb\u7684\u5b57\u7b26\uff0c\u5c31\u9700\u89814\u4e2a\u5b57\u8282\uff09\u3002\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u548c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u76f4\u63a5\u652f\u6301Unicode\u3002 Unicode \u662f\u4e00\u4e2a\u5f88\u5927\u7684\u96c6\u5408\uff0c\u73b0\u5728\u7684\u89c4\u6a21\u53ef\u4ee5\u5bb9\u7eb3100\u591a\u4e07\u4e2a\u7b26\u53f7\u3002\u6bcf\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u90fd\u4e0d\u4e00\u6837\uff0c\u53ef\u4ee5\u67e5\u8be2 unicode.org \uff0c\u6216\u8005\u4e13\u95e8\u7684 \u6c49\u5b57\u5bf9\u5e94\u8868 \u3002 Unicode \u7684\u95ee\u9898 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cUnicode \u53ea\u662f\u4e00\u4e2a\u7b26\u53f7\u96c6\uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u7b26\u53f7\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u5374\u6ca1\u6709\u89c4\u5b9a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u5b58\u50a8\u3002\uff08 \u8fd9\u91cc\u8bf4\u7684\u50a8\u5b58\u662f\u50a8\u5b58\u5728 ROM \u4e2d\uff0c\u6bd4\u5982\u8bf4\u786c\u76d8\u3002 \uff09 \u6bd4\u5982\uff0c\u6c49\u5b57 \u4e25 \u7684 Unicode \u662f\u5341\u516d\u8fdb\u5236\u6570 4E25 \uff0c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\u8db3\u8db3\u670915\u4f4d\uff08 100111000100101 \uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u7b26\u53f7\u7684\u8868\u793a\u81f3\u5c11\u9700\u89812\u4e2a\u5b57\u8282\u3002\u8868\u793a\u5176\u4ed6\u66f4\u5927\u7684\u7b26\u53f7\uff0c\u53ef\u80fd\u9700\u89813\u4e2a\u5b57\u8282\u6216\u80054\u4e2a\u5b57\u8282\uff0c\u751a\u81f3\u66f4\u591a\u3002 \u8fd9\u91cc\u5c31\u6709\u4e24\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u624d\u80fd\u533a\u522b Unicode \u548c ASCII \uff1f\u8ba1\u7b97\u673a\u600e\u4e48\u77e5\u9053\u4e09\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u800c\u4e0d\u662f\u5206\u522b\u8868\u793a\u4e09\u4e2a\u7b26\u53f7\u5462\uff1f\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u82f1\u6587\u5b57\u6bcd\u53ea\u7528\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u5c31\u591f\u4e86\uff0c\u5982\u679c Unicode \u7edf\u4e00\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u7b26\u53f7\u7528\u4e09\u4e2a\u6216\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u90a3\u4e48\u6bcf\u4e2a\u82f1\u6587\u5b57\u6bcd\u524d\u90fd\u5fc5\u7136\u6709\u4e8c\u5230\u4e09\u4e2a\u5b57\u8282\u662f 0 \uff0c\u8fd9\u5bf9\u4e8e\u5b58\u50a8\u6765\u8bf4\u662f\u6781\u5927\u7684\u6d6a\u8d39\uff0c\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f\u4f1a\u56e0\u6b64\u5927\u51fa\u4e8c\u4e09\u500d\uff0c\u8fd9\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u56e0\u6b64\u4e0d\u80fd\u7528Unicode\u7801\u76f4\u63a5\u50a8\u5b58\u6587\u4ef6\u3002 \u5b83\u4eec\u9020\u6210\u7684\u7ed3\u679c\u662f\uff1a \u51fa\u73b0\u4e86 Unicode \u7684\u591a\u79cd\u5b58\u50a8\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u8bb8\u591a\u79cd\u4e0d\u540c\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u8868\u793a Unicode\u3002 Unicode \u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u65e0\u6cd5\u63a8\u5e7f\uff0c\u76f4\u5230\u4e92\u8054\u7f51\u7684\u51fa\u73b0\u3002 UTF-8 \u4e92\u8054\u7f51\u7684\u666e\u53ca\uff0c\u5f3a\u70c8\u8981\u6c42\u51fa\u73b0\u4e00\u79cd\u7edf\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u3002UTF-8 \u5c31\u662f\u5728\u4e92\u8054\u7f51\u4e0a\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd Unicode \u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u5176\u4ed6\u5b9e\u73b0\u65b9\u5f0f\u8fd8\u5305\u62ec UTF-16\uff08\u5b57\u7b26\u7528\u4e24\u4e2a\u5b57\u8282\u6216\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff09\u548c UTF-32\uff08\u5b57\u7b26\u7528\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff09\uff0c\u4e0d\u8fc7\u5728\u4e92\u8054\u7f51\u4e0a\u57fa\u672c\u4e0d\u7528\u3002 ==\u5f3a\u8c03\u4e00\u4e0bUnicode\u548cUTF-8\u7684\u533a\u522b\uff1aUTF-8\u662fUnicode\u7684\u4e00\u79cd\u50a8\u5b58\u5f62\u5f0f\uff0c\u4f46\u8ba1\u7b97\u673a\u53ea\u80fd\u8bfb\u53d6\u4e8c\u8fdb\u5236\u7684\u5185\u5bb9\uff0c\u56e0\u6b64\u8ba1\u7b97\u673a\u8bfb\u53d6UTF-8\u7f16\u7801\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5c06\u6587\u4ef6\u8f6c\u7801\u4e3aUnicode\uff08Unicode\u662f\u5b8c\u5168\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6587\u4ef6\u4ee5UTF-8\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u4ee5Unicode\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\uff08Ram\uff09\u4e2d\u3002==\u4f8b\u5982\uff1a \u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u7edf\u4e00\u4f7f\u7528Unicode\u7f16\u7801\uff0c\u5f53\u9700\u8981\u4fdd\u5b58\u5230\u786c\u76d8\u6216\u8005\u9700\u8981\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u5c31\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u3002 \u7528\u8bb0\u4e8b\u672c\u7f16\u8f91\u7684\u65f6\u5019\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6\u7684UTF-8\u5b57\u7b26\u88ab\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26\u5230\u5185\u5b58\u91cc\uff0c\u7f16\u8f91\u5b8c\u6210\u540e\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u518d\u628aUnicode\u8f6c\u6362\u4e3aUTF-8\u4fdd\u5b58\u5230\u6587\u4ef6\u3002 \u6d4f\u89c8\u7f51\u9875\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u628a\u52a8\u6001\u751f\u6210\u7684Unicode\u5185\u5bb9\u8f6c\u6362\u4e3aUTF-8\u518d\u4f20\u8f93\u5230\u6d4f\u89c8\u5668\u3002\u5f88\u591a\u7f51\u9875\u7684\u6e90\u7801\u4e0a\u4f1a\u6709\u7c7b\u4f3c <meta charset=\"UTF-8\" /> \u7684\u4fe1\u606f\uff0c\u8868\u793a\u8be5\u7f51\u9875\u6b63\u662f\u7528\u7684UTF-8\u7f16\u7801\u3002 UTF-8 \u6700\u5927\u7684\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u5b83\u662f\u4e00\u79cd\u53d8\u957f\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u5b83\u53ef\u4ee5\u4f7f\u75281~4\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u6839\u636e\u4e0d\u540c\u7684\u7b26\u53f7\u800c\u53d8\u5316\u5b57\u8282\u957f\u5ea6\u3002 UTF-8 \u7684\u7f16\u7801\u89c4\u5219\u5f88\u7b80\u5355\uff0c\u53ea\u6709\u4e8c\u6761\uff1a 1\uff09\u5bf9\u4e8e\u5355\u5b57\u8282\u7684\u7b26\u53f7\uff0c\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u97627\u4f4d\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002\u56e0\u6b64\u5bf9\u4e8e\u82f1\u8bed\u5b57\u6bcd\uff0cUTF-8 \u7f16\u7801\u548c ASCII \u7801\u662f\u76f8\u540c\u7684\u3002 2\uff09\u5bf9\u4e8e n \u5b57\u8282\u7684\u7b26\u53f7\uff08 n > 1 \uff09\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d n \u4f4d\u90fd\u8bbe\u4e3a 1 \uff0c\u7b2c n + 1 \u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u9762\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u4e00\u5f8b\u8bbe\u4e3a 10 \u3002\u5269\u4e0b\u7684\u6ca1\u6709\u63d0\u53ca\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5168\u90e8\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002 \u4e0b\u8868\u603b\u7ed3\u4e86\u7f16\u7801\u89c4\u5219\uff0c\u5b57\u6bcd x \u8868\u793a\u53ef\u7528\u7f16\u7801\u7684\u4f4d\u3002 Unicode\u7b26\u53f7\u8303\u56f4 | UTF-8\u7f16\u7801\u65b9\u5f0f (\u5341\u516d\u8fdb\u5236) | \uff08\u4e8c\u8fdb\u5236\uff09 --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \u8ddf\u636e\u4e0a\u8868\uff0c\u89e3\u8bfb UTF-8 \u7f16\u7801\u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u4e00\u4e2a\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u662f 0 \uff0c\u5219\u8fd9\u4e2a\u5b57\u8282\u5355\u72ec\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\uff1b\u5982\u679c\u7b2c\u4e00\u4f4d\u662f 1 \uff0c\u5219\u8fde\u7eed\u6709\u591a\u5c11\u4e2a 1 \uff0c\u5c31\u8868\u793a\u5f53\u524d\u5b57\u7b26\u5360\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u3002 \u4e0b\u9762\uff0c\u8fd8\u662f\u4ee5\u6c49\u5b57 \u4e25 \u4e3a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5b9e\u73b0 UTF-8 \u7f16\u7801\u3002 \u4e25 \u7684 Unicode \u662f 4E25 \uff08 100111000100101 \uff09\uff0c\u6839\u636e\u4e0a\u8868\uff0c\u53ef\u4ee5\u53d1\u73b0 4E25 \u5904\u5728\u7b2c\u4e09\u884c\u7684\u8303\u56f4\u5185\uff08 0000 0800 - 0000 FFFF \uff09\uff0c\u56e0\u6b64 \u4e25 \u7684 UTF-8 \u7f16\u7801\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff0c\u5373\u683c\u5f0f\u662f 1110xxxx 10xxxxxx 10xxxxxx \u3002\u7136\u540e\uff0c\u4ece \u4e25 \u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u4ece\u540e\u5411\u524d\u586b\u5165\u683c\u5f0f\u4e2d\u7684 x \uff0c\u591a\u51fa\u7684\u4f4d\u8865 0 \u3002\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\uff0c \u4e25 \u7684 UTF-8 \u7f16\u7801\u662f 11100100 10111000 10100101 \uff0c\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u5c31\u662f E4B8A5 \u3002 UTF-8\u7f16\u7801\u6709\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u5c31\u662fASCII\u7f16\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u88ab\u770b\u6210\u662fUTF-8\u7f16\u7801\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\uff0c\u5927\u91cf\u53ea\u652f\u6301ASCII\u7f16\u7801\u7684\u5386\u53f2\u9057\u7559\u8f6f\u4ef6\u53ef\u4ee5\u5728UTF-8\u7f16\u7801\u4e0b\u7ee7\u7eed\u5de5\u4f5c\u3002 \u53c2\u8003 \u5b57\u7b26\u7f16\u7801\u7b14\u8bb0\uff1aASCII\uff0cUnicode \u548c UTF-8","title":"1.4.\u5b57\u7b26\u7f16\u7801"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#ascii","text":"\u56e0\u4e3a\u8ba1\u7b97\u673a\u662f\u7f8e\u56fd\u4eba\u53d1\u660e\u7684\uff0c\u6240\u4ee5\u5728\u4e0a\u4e2a\u4e16\u7eaa60\u5e74\u4ee3\uff0c\u7f8e\u56fd\u5236\u5b9a\u4e86\u4e00\u5957\u5b57\u7b26\u7f16\u7801\uff0c\u5bf9\u82f1\u8bed\u5b57\u7b26\u4e0e\u4e8c\u8fdb\u5236\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u505a\u4e86\u7edf\u4e00\u89c4\u5b9a\u3002\u8fd9\u88ab\u79f0\u4e3a ASCII \u7801\uff0c\u4e00\u76f4\u6cbf\u7528\u81f3\u4eca\u3002ASCII \u7801\u4e00\u5171\u89c4\u5b9a\u4e86128\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff0c\u6bd4\u5982\u7a7a\u683c SPACE \u662f32\uff08\u4e8c\u8fdb\u5236 00100000 \uff09\uff0c\u5927\u5199\u7684\u5b57\u6bcd A \u662f65\uff08\u4e8c\u8fdb\u5236 01000001 \uff09\u3002\u8fd9128\u4e2a\u7b26\u53f7\uff08\u5305\u62ec32\u4e2a\u4e0d\u80fd\u6253\u5370\u51fa\u6765\u7684\u63a7\u5236\u7b26\u53f7\uff09\uff0c\u53ea\u5360\u7528\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u540e\u97627\u4f4d\uff0c\u6700\u524d\u9762\u7684\u4e00\u4f4d\u7edf\u4e00\u89c4\u5b9a\u4e3a 0 \u3002","title":"ASCII\u7801"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#ascii_1","text":"\u82f1\u8bed\u7528128\u4e2a\u7b26\u53f7\u7f16\u7801\u5c31\u591f\u4e86\uff0c\u4f46\u662f\u7528\u6765\u8868\u793a\u5176\u4ed6\u8bed\u8a00\uff0c128\u4e2a\u7b26\u53f7\u662f\u4e0d\u591f\u7684\u3002\u6bd4\u5982\uff0c\u5728\u6cd5\u8bed\u4e2d\uff0c\u5b57\u6bcd\u4e0a\u65b9\u6709\u6ce8\u97f3\u7b26\u53f7\uff0c\u5b83\u5c31\u65e0\u6cd5\u7528 ASCII \u7801\u8868\u793a\u3002\u4e8e\u662f\uff0c\u4e00\u4e9b\u6b27\u6d32\u56fd\u5bb6\u5c31\u51b3\u5b9a\uff0c\u5229\u7528\u5b57\u8282\u4e2d\u95f2\u7f6e\u7684\u6700\u9ad8\u4f4d\u7f16\u5165\u65b0\u7684\u7b26\u53f7\u3002\u6bd4\u5982\uff0c\u6cd5\u8bed\u4e2d\u7684 \u00e9 \u7684\u7f16\u7801\u4e3a130\uff08\u4e8c\u8fdb\u5236 10000010 \uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u4e9b\u6b27\u6d32\u56fd\u5bb6\u4f7f\u7528\u7684\u7f16\u7801\u4f53\u7cfb\uff0c\u53ef\u4ee5\u8868\u793a\u6700\u591a256\u4e2a\u7b26\u53f7\u3002 \u4f46\u662f\uff0c\u8fd9\u91cc\u53c8\u51fa\u73b0\u4e86\u65b0\u7684\u95ee\u9898\u3002\u4e0d\u540c\u7684\u56fd\u5bb6\u6709\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u56e0\u6b64\uff0c\u54ea\u6015\u5b83\u4eec\u90fd\u4f7f\u7528256\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u4ee3\u8868\u7684\u5b57\u6bcd\u5374\u4e0d\u4e00\u6837\u3002\u6bd4\u5982\uff0c130\u5728\u6cd5\u8bed\u7f16\u7801\u4e2d\u4ee3\u8868\u4e86 \u00e9 \uff0c\u5728\u5e0c\u4f2f\u6765\u8bed\u7f16\u7801\u4e2d\u5374\u4ee3\u8868\u4e86\u5b57\u6bcd Gimel ( \u05d2 )\uff0c\u5728\u4fc4\u8bed\u7f16\u7801\u4e2d\u53c8\u4f1a\u4ee3\u8868\u53e6\u4e00\u4e2a\u7b26\u53f7\u3002\u4f46\u662f\u4e0d\u7ba1\u600e\u6837\uff0c\u6240\u6709\u8fd9\u4e9b\u7f16\u7801\u65b9\u5f0f\u4e2d\uff0c0--127\u8868\u793a\u7684\u7b26\u53f7\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u4e00\u6837\u7684\u53ea\u662f128--255\u7684\u8fd9\u4e00\u6bb5\u3002","title":"\u975eASCII\u7801"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#gb2312","text":"\u6c49\u5b57\u591a\u8fbe10\u4e07\u5de6\u53f3\uff0c\u8981\u5904\u7406\u4e2d\u6587\u663e\u7136\u4e00\u4e2a\u5b57\u8282\u662f\u4e0d\u591f\u7684\uff0c\u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u4e14\u8fd8\u4e0d\u80fd\u548cASCII\u7f16\u7801\u51b2\u7a81\uff0c\u6240\u4ee5\uff0c\u4e2d\u56fd\u5236\u5b9a\u4e86 GB2312 \u7f16\u7801\uff0c\u4f7f\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u6c49\u5b57\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u6700\u591a\u53ef\u4ee5\u8868\u793a 256 x 256 = 65536 \u4e2a\u7b26\u53f7\u3002 \u867d\u7136\u90fd\u662f\u7528\u591a\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f46\u662fGB\u7c7b\u7684\u6c49\u5b57\u7f16\u7801\u4e0e\u540e\u6587\u7684 Unicode \u548c UTF-8 \u662f\u6beb\u65e0\u5173\u7cfb\u7684\u3002 \u53ef\u4ee5\u60f3\u5f97\u5230\u7684\u662f\uff0c\u5168\u4e16\u754c\u6709\u4e0a\u767e\u79cd\u8bed\u8a00\uff0c\u65e5\u672c\u628a\u65e5\u6587\u7f16\u5230 Shift_JIS \u91cc\uff0c\u97e9\u56fd\u628a\u97e9\u6587\u7f16\u5230 Euc-kr \u91cc\uff0c\u5404\u56fd\u6709\u5404\u56fd\u7684\u6807\u51c6\uff0c\u5c31\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u51fa\u73b0\u51b2\u7a81\uff0c\u7ed3\u679c\u5c31\u662f\uff0c\u5728\u591a\u8bed\u8a00\u6df7\u5408\u7684\u6587\u672c\u4e2d\uff0c\u663e\u793a\u51fa\u6765\u4f1a\u6709\u4e71\u7801\u3002","title":"GB2312\u7801"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#unicode","text":"\u6b63\u5982\u4e0a\u4e00\u8282\u6240\u8bf4\uff0c\u4e16\u754c\u4e0a\u5b58\u5728\u7740\u591a\u79cd\u7f16\u7801\u65b9\u5f0f\uff0c\u540c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u53ef\u4ee5\u88ab\u89e3\u91ca\u6210\u4e0d\u540c\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u8981\u60f3\u6253\u5f00\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5c31\u5fc5\u987b\u77e5\u9053\u5b83\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5426\u5219\u7528\u9519\u8bef\u7684\u7f16\u7801\u65b9\u5f0f\u89e3\u8bfb\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\u4e3a\u4ec0\u4e48\u7535\u5b50\u90ae\u4ef6\u5e38\u5e38\u51fa\u73b0\u4e71\u7801\uff1f\u5c31\u662f\u56e0\u4e3a\u53d1\u4fe1\u4eba\u548c\u6536\u4fe1\u4eba\u4f7f\u7528\u7684\u7f16\u7801\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002 \u56e0\u6b64\uff0cUnicode\u5e94\u8fd0\u800c\u751f\u3002Unicode\u628a\u6240\u6709\u8bed\u8a00\u90fd\u7edf\u4e00\u5230\u4e00\u5957\u7f16\u7801\u91cc\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u518d\u6709\u4e71\u7801\u95ee\u9898\u4e86\u3002 Unicode\u5c31\u50cf\u5b83\u7684\u540d\u5b57\u90fd\u8868\u793a\u7684\uff0c\u8fd9\u662f\u4e00\u79cd\u6240\u6709\u7b26\u53f7\u7684\u7f16\u7801\u3002 Unicode\u6807\u51c6\u4e5f\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u4f46\u6700\u5e38\u7528\u7684\u662f\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u5982\u679c\u8981\u7528\u5230\u975e\u5e38\u504f\u50fb\u7684\u5b57\u7b26\uff0c\u5c31\u9700\u89814\u4e2a\u5b57\u8282\uff09\u3002\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u548c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u76f4\u63a5\u652f\u6301Unicode\u3002 Unicode \u662f\u4e00\u4e2a\u5f88\u5927\u7684\u96c6\u5408\uff0c\u73b0\u5728\u7684\u89c4\u6a21\u53ef\u4ee5\u5bb9\u7eb3100\u591a\u4e07\u4e2a\u7b26\u53f7\u3002\u6bcf\u4e2a\u7b26\u53f7\u7684\u7f16\u7801\u90fd\u4e0d\u4e00\u6837\uff0c\u53ef\u4ee5\u67e5\u8be2 unicode.org \uff0c\u6216\u8005\u4e13\u95e8\u7684 \u6c49\u5b57\u5bf9\u5e94\u8868 \u3002","title":"Unicode"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#unicode_1","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cUnicode \u53ea\u662f\u4e00\u4e2a\u7b26\u53f7\u96c6\uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u7b26\u53f7\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u5374\u6ca1\u6709\u89c4\u5b9a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4ee3\u7801\u5e94\u8be5\u5982\u4f55\u5b58\u50a8\u3002\uff08 \u8fd9\u91cc\u8bf4\u7684\u50a8\u5b58\u662f\u50a8\u5b58\u5728 ROM \u4e2d\uff0c\u6bd4\u5982\u8bf4\u786c\u76d8\u3002 \uff09 \u6bd4\u5982\uff0c\u6c49\u5b57 \u4e25 \u7684 Unicode \u662f\u5341\u516d\u8fdb\u5236\u6570 4E25 \uff0c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u6570\u8db3\u8db3\u670915\u4f4d\uff08 100111000100101 \uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u7b26\u53f7\u7684\u8868\u793a\u81f3\u5c11\u9700\u89812\u4e2a\u5b57\u8282\u3002\u8868\u793a\u5176\u4ed6\u66f4\u5927\u7684\u7b26\u53f7\uff0c\u53ef\u80fd\u9700\u89813\u4e2a\u5b57\u8282\u6216\u80054\u4e2a\u5b57\u8282\uff0c\u751a\u81f3\u66f4\u591a\u3002 \u8fd9\u91cc\u5c31\u6709\u4e24\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u624d\u80fd\u533a\u522b Unicode \u548c ASCII \uff1f\u8ba1\u7b97\u673a\u600e\u4e48\u77e5\u9053\u4e09\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u800c\u4e0d\u662f\u5206\u522b\u8868\u793a\u4e09\u4e2a\u7b26\u53f7\u5462\uff1f\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u82f1\u6587\u5b57\u6bcd\u53ea\u7528\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u5c31\u591f\u4e86\uff0c\u5982\u679c Unicode \u7edf\u4e00\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u7b26\u53f7\u7528\u4e09\u4e2a\u6216\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff0c\u90a3\u4e48\u6bcf\u4e2a\u82f1\u6587\u5b57\u6bcd\u524d\u90fd\u5fc5\u7136\u6709\u4e8c\u5230\u4e09\u4e2a\u5b57\u8282\u662f 0 \uff0c\u8fd9\u5bf9\u4e8e\u5b58\u50a8\u6765\u8bf4\u662f\u6781\u5927\u7684\u6d6a\u8d39\uff0c\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f\u4f1a\u56e0\u6b64\u5927\u51fa\u4e8c\u4e09\u500d\uff0c\u8fd9\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u56e0\u6b64\u4e0d\u80fd\u7528Unicode\u7801\u76f4\u63a5\u50a8\u5b58\u6587\u4ef6\u3002 \u5b83\u4eec\u9020\u6210\u7684\u7ed3\u679c\u662f\uff1a \u51fa\u73b0\u4e86 Unicode \u7684\u591a\u79cd\u5b58\u50a8\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u8bb8\u591a\u79cd\u4e0d\u540c\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u8868\u793a Unicode\u3002 Unicode \u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u65e0\u6cd5\u63a8\u5e7f\uff0c\u76f4\u5230\u4e92\u8054\u7f51\u7684\u51fa\u73b0\u3002","title":"Unicode \u7684\u95ee\u9898"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#utf-8","text":"\u4e92\u8054\u7f51\u7684\u666e\u53ca\uff0c\u5f3a\u70c8\u8981\u6c42\u51fa\u73b0\u4e00\u79cd\u7edf\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u3002UTF-8 \u5c31\u662f\u5728\u4e92\u8054\u7f51\u4e0a\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd Unicode \u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u5176\u4ed6\u5b9e\u73b0\u65b9\u5f0f\u8fd8\u5305\u62ec UTF-16\uff08\u5b57\u7b26\u7528\u4e24\u4e2a\u5b57\u8282\u6216\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff09\u548c UTF-32\uff08\u5b57\u7b26\u7528\u56db\u4e2a\u5b57\u8282\u8868\u793a\uff09\uff0c\u4e0d\u8fc7\u5728\u4e92\u8054\u7f51\u4e0a\u57fa\u672c\u4e0d\u7528\u3002 ==\u5f3a\u8c03\u4e00\u4e0bUnicode\u548cUTF-8\u7684\u533a\u522b\uff1aUTF-8\u662fUnicode\u7684\u4e00\u79cd\u50a8\u5b58\u5f62\u5f0f\uff0c\u4f46\u8ba1\u7b97\u673a\u53ea\u80fd\u8bfb\u53d6\u4e8c\u8fdb\u5236\u7684\u5185\u5bb9\uff0c\u56e0\u6b64\u8ba1\u7b97\u673a\u8bfb\u53d6UTF-8\u7f16\u7801\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5c06\u6587\u4ef6\u8f6c\u7801\u4e3aUnicode\uff08Unicode\u662f\u5b8c\u5168\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6587\u4ef6\u4ee5UTF-8\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u4ee5Unicode\u7684\u5f62\u5f0f\u50a8\u5b58\u5728\u5185\u5b58\uff08Ram\uff09\u4e2d\u3002==\u4f8b\u5982\uff1a \u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u7edf\u4e00\u4f7f\u7528Unicode\u7f16\u7801\uff0c\u5f53\u9700\u8981\u4fdd\u5b58\u5230\u786c\u76d8\u6216\u8005\u9700\u8981\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u5c31\u8f6c\u6362\u4e3aUTF-8\u7f16\u7801\u3002 \u7528\u8bb0\u4e8b\u672c\u7f16\u8f91\u7684\u65f6\u5019\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6\u7684UTF-8\u5b57\u7b26\u88ab\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26\u5230\u5185\u5b58\u91cc\uff0c\u7f16\u8f91\u5b8c\u6210\u540e\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u518d\u628aUnicode\u8f6c\u6362\u4e3aUTF-8\u4fdd\u5b58\u5230\u6587\u4ef6\u3002 \u6d4f\u89c8\u7f51\u9875\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u628a\u52a8\u6001\u751f\u6210\u7684Unicode\u5185\u5bb9\u8f6c\u6362\u4e3aUTF-8\u518d\u4f20\u8f93\u5230\u6d4f\u89c8\u5668\u3002\u5f88\u591a\u7f51\u9875\u7684\u6e90\u7801\u4e0a\u4f1a\u6709\u7c7b\u4f3c <meta charset=\"UTF-8\" /> \u7684\u4fe1\u606f\uff0c\u8868\u793a\u8be5\u7f51\u9875\u6b63\u662f\u7528\u7684UTF-8\u7f16\u7801\u3002 UTF-8 \u6700\u5927\u7684\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u5b83\u662f\u4e00\u79cd\u53d8\u957f\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u5b83\u53ef\u4ee5\u4f7f\u75281~4\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7b26\u53f7\uff0c\u6839\u636e\u4e0d\u540c\u7684\u7b26\u53f7\u800c\u53d8\u5316\u5b57\u8282\u957f\u5ea6\u3002 UTF-8 \u7684\u7f16\u7801\u89c4\u5219\u5f88\u7b80\u5355\uff0c\u53ea\u6709\u4e8c\u6761\uff1a 1\uff09\u5bf9\u4e8e\u5355\u5b57\u8282\u7684\u7b26\u53f7\uff0c\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u97627\u4f4d\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002\u56e0\u6b64\u5bf9\u4e8e\u82f1\u8bed\u5b57\u6bcd\uff0cUTF-8 \u7f16\u7801\u548c ASCII \u7801\u662f\u76f8\u540c\u7684\u3002 2\uff09\u5bf9\u4e8e n \u5b57\u8282\u7684\u7b26\u53f7\uff08 n > 1 \uff09\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d n \u4f4d\u90fd\u8bbe\u4e3a 1 \uff0c\u7b2c n + 1 \u4f4d\u8bbe\u4e3a 0 \uff0c\u540e\u9762\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u4e00\u5f8b\u8bbe\u4e3a 10 \u3002\u5269\u4e0b\u7684\u6ca1\u6709\u63d0\u53ca\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5168\u90e8\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684 Unicode \u7801\u3002 \u4e0b\u8868\u603b\u7ed3\u4e86\u7f16\u7801\u89c4\u5219\uff0c\u5b57\u6bcd x \u8868\u793a\u53ef\u7528\u7f16\u7801\u7684\u4f4d\u3002 Unicode\u7b26\u53f7\u8303\u56f4 | UTF-8\u7f16\u7801\u65b9\u5f0f (\u5341\u516d\u8fdb\u5236) | \uff08\u4e8c\u8fdb\u5236\uff09 --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \u8ddf\u636e\u4e0a\u8868\uff0c\u89e3\u8bfb UTF-8 \u7f16\u7801\u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u4e00\u4e2a\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u662f 0 \uff0c\u5219\u8fd9\u4e2a\u5b57\u8282\u5355\u72ec\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\uff1b\u5982\u679c\u7b2c\u4e00\u4f4d\u662f 1 \uff0c\u5219\u8fde\u7eed\u6709\u591a\u5c11\u4e2a 1 \uff0c\u5c31\u8868\u793a\u5f53\u524d\u5b57\u7b26\u5360\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u3002 \u4e0b\u9762\uff0c\u8fd8\u662f\u4ee5\u6c49\u5b57 \u4e25 \u4e3a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5b9e\u73b0 UTF-8 \u7f16\u7801\u3002 \u4e25 \u7684 Unicode \u662f 4E25 \uff08 100111000100101 \uff09\uff0c\u6839\u636e\u4e0a\u8868\uff0c\u53ef\u4ee5\u53d1\u73b0 4E25 \u5904\u5728\u7b2c\u4e09\u884c\u7684\u8303\u56f4\u5185\uff08 0000 0800 - 0000 FFFF \uff09\uff0c\u56e0\u6b64 \u4e25 \u7684 UTF-8 \u7f16\u7801\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff0c\u5373\u683c\u5f0f\u662f 1110xxxx 10xxxxxx 10xxxxxx \u3002\u7136\u540e\uff0c\u4ece \u4e25 \u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u4ece\u540e\u5411\u524d\u586b\u5165\u683c\u5f0f\u4e2d\u7684 x \uff0c\u591a\u51fa\u7684\u4f4d\u8865 0 \u3002\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\uff0c \u4e25 \u7684 UTF-8 \u7f16\u7801\u662f 11100100 10111000 10100101 \uff0c\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u5c31\u662f E4B8A5 \u3002 UTF-8\u7f16\u7801\u6709\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u5c31\u662fASCII\u7f16\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u88ab\u770b\u6210\u662fUTF-8\u7f16\u7801\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\uff0c\u5927\u91cf\u53ea\u652f\u6301ASCII\u7f16\u7801\u7684\u5386\u53f2\u9057\u7559\u8f6f\u4ef6\u53ef\u4ee5\u5728UTF-8\u7f16\u7801\u4e0b\u7ee7\u7eed\u5de5\u4f5c\u3002","title":"UTF-8"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/1.4.%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html#_1","text":"\u5b57\u7b26\u7f16\u7801\u7b14\u8bb0\uff1aASCII\uff0cUnicode \u548c UTF-8","title":"\u53c2\u8003"}]}