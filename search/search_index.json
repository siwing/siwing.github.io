{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files . $\\sum$ $$\\sum$$ (\\sum\\) $$ \\sum $$","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files . $\\sum$ $$\\sum$$ (\\sum\\) $$ \\sum $$","title":"Project layout"},{"location":"List/","text":"# -*- coding: utf-8 -*- List siwing 2019.08.08 List list\u7684\u65b9\u6cd5 \u521b\u5efa\u4e00\u4e2alist list_1 = list () # \u67e5\u770blist\u7684\u65b9\u6cd5\u3001\u5c5e\u6027 dir ( list_1 ) [ '__add__' , '__class__' , '__contains__' , '__delattr__' , '__delitem__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__getitem__' , '__gt__' , '__hash__' , '__iadd__' , '__imul__' , '__init__' , '__init_subclass__' , '__iter__' , '__le__' , '__len__' , '__lt__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__reversed__' , '__rmul__' , '__setattr__' , '__setitem__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'append' , 'clear' , 'copy' , 'count' , 'extend' , 'index' , 'insert' , 'pop' , 'remove' , 'reverse' , 'sort' ] \u4fee\u6539list\u5143\u7d20\u7684\u503c \u4fee\u6539\u73b0\u6709list\u7684\u503c\uff0c\u901a\u8fc7\u7d22\u5f15\u3001\u5207\u7247\u6765\u5b8c\u6210\u3002 list_1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # \u4fee\u6539\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u7684\u503c list_1 [ 0 ] = 12 ; list_1 [ 12 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # \u4fee\u6539\u67d0\u4e2a\u8fde\u7eed\u533a\u57df\u7684\u503c list_1 [ 0 : 5 ] = [ 11 , 12 , 13 , 14 , 15 ]; list_1 [ 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 ] \u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e 'append'\u65b9\u6cd5\u6bcf\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 list_1 . append ( 12 ); list_1 [ 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 ] \u6dfb\u52a0\u4efb\u610f\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e 'extend'\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u4e2alist\u6765\u6269\u5145\u5f53\u524d\u7684list\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u62fc\u63a5list\u3002 list_2 = [ '0' , '00' , '000' ] list_1 + list_2 # \u6b64\u65f6list_1\u6ca1\u6709\u88ab\u4fee\u6539 print ( list_1 ) list_1 . extend ( list_2 ) # \u6b64\u65f6list_1\u88ab\u4fee\u6539 print ( list_1 ) # \u663e\u7136\u62fc\u63a5\u7684\u6548\u7387\u56de\u6bd4`extend`\u65b9\u6cd5\u7684\u6548\u7387\u4f4e # \u8fd8\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u6765\u6269\u5145list\uff0c\u50cf\u8fd9\u6837 list_1 [ len ( list_1 ):] = list_2 list_1 # \u4f46\u662f\u8fd9\u6837\u7684\u53ef\u8bfb\u6027\u4e0d\u9ad8 [11, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10, 12] [11, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10, 12, '0', '00', '000'] [ 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ] \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20 insert \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5bf9\u8c61\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e list_1 . insert ( 0 , 11 ); list_1 [ 11 , 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ] # \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 # \u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e00\u4e2alist\u4f7f\u7528\u5207\u7247\uff0c\u5fc5\u5b9a\u4f1a\u5f97\u5230\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u4e00\u4e2alist\u5bf9\u5207\u7247\u8d4b\u503c # \u8fd9\u6837\u867d\u7136\u5de7\u5999\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u6bd4\u4e0d\u4e0ainsert list_1 [ 0 : 0 ] = [ 11 ] list_1 [ 11 , 11 , 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ] \u5220\u9664\\\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\uff08\u4efb\u610f\u4f4d\u7f6e\u7684\uff09\u5143\u7d20 list_2 [ '0' , '00' , '000' ] # \u6ce8\u610f\uff0cpop\u662flist\u4e2d\u552f\u4e00\u4e00\u4e2a\u4fee\u6539\u539f\u5217\u8868\uff0c\u5e76\u4e14\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5 list_2 . pop () '000' list_2 [ '0' , '00' ] # pop\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u8f93\u5165\u7d22\u5f15\u503c\uff0c\u6307\u5b9a\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e list_2 . pop ( 0 ) '0' list_2 [ '00' ] \u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5143\u7d20 list_1 . remove ( 11 ) list_1 [ 11 , 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ] \u53cd\u5e8f\u6392\u5e8f list_1 . reverse () list_1 [ '000' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] \u6392\u5e8f \u65b9\u6cd5sort\u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff1akey\u548creverse\u3002\u5c06key\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684\u51fd\u6570\u3002\u7136\u800c\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u662f\u4f7f\u7528\u5b83\u6765\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u518d\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570reverse\uff0c\u53ea\u9700\u5c06\u5176\u6307\u5b9a\u4e3aTrue\u6216False\uff0c\u4ee5\u6307\u51fa\u662f\u5426\u8981\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 [ 'add' , 'acme' , 'aerate' , 'abalone' , 'aardvark' ] # \u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f list_3 . sort ( key = len , reverse = True ) list_3 [ 'aardvark' , 'abalone' , 'aerate' , 'acme' , 'add' ] \u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 list_1 list_1 . count ( 11 ) 2 \u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c list_1 list_1 . index ( \"000\" ) 0 \u6df1\u62f7\u8d1d\u5217\u8868 list_4 = list_1 list_1 [ 0 ] = \"\u4fee\u6539\u4e86\" print ( \"list_1\" , list_1 ) print ( \"list_4\" , list_4 ) print ( \" \\n \" ) # \u6df1\u62f7\u8d1d list_5 = list_1 . copy () list_1 [ 0 ] = \"\u53c8\u4fee\u6539\u4e86\" print ( \"list_1\" , list_1 ) print ( \"list_5\" , list_5 ) list_1 [ '\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] list_4 [ '\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] list_1 [ '\u53c8\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] list_5 [ '\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] \u6e05\u7a7a\u5217\u8868 list_1 . clear () list_1 []","title":"List"},{"location":"List/#list","text":"","title":"List"},{"location":"List/#list_1","text":"\u521b\u5efa\u4e00\u4e2alist list_1 = list () # \u67e5\u770blist\u7684\u65b9\u6cd5\u3001\u5c5e\u6027 dir ( list_1 ) [ '__add__' , '__class__' , '__contains__' , '__delattr__' , '__delitem__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__getitem__' , '__gt__' , '__hash__' , '__iadd__' , '__imul__' , '__init__' , '__init_subclass__' , '__iter__' , '__le__' , '__len__' , '__lt__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__reversed__' , '__rmul__' , '__setattr__' , '__setitem__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'append' , 'clear' , 'copy' , 'count' , 'extend' , 'index' , 'insert' , 'pop' , 'remove' , 'reverse' , 'sort' ]","title":"list\u7684\u65b9\u6cd5"},{"location":"List/#list_2","text":"\u4fee\u6539\u73b0\u6709list\u7684\u503c\uff0c\u901a\u8fc7\u7d22\u5f15\u3001\u5207\u7247\u6765\u5b8c\u6210\u3002 list_1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # \u4fee\u6539\u67d0\u4e2a\u7d22\u5f15\u5bf9\u5e94\u5143\u7d20\u7684\u503c list_1 [ 0 ] = 12 ; list_1 [ 12 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # \u4fee\u6539\u67d0\u4e2a\u8fde\u7eed\u533a\u57df\u7684\u503c list_1 [ 0 : 5 ] = [ 11 , 12 , 13 , 14 , 15 ]; list_1 [ 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 ]","title":"\u4fee\u6539list\u5143\u7d20\u7684\u503c"},{"location":"List/#_1","text":"'append'\u65b9\u6cd5\u6bcf\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 list_1 . append ( 12 ); list_1 [ 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 ]","title":"\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e"},{"location":"List/#_2","text":"'extend'\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u4e2alist\u6765\u6269\u5145\u5f53\u524d\u7684list\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u62fc\u63a5list\u3002 list_2 = [ '0' , '00' , '000' ] list_1 + list_2 # \u6b64\u65f6list_1\u6ca1\u6709\u88ab\u4fee\u6539 print ( list_1 ) list_1 . extend ( list_2 ) # \u6b64\u65f6list_1\u88ab\u4fee\u6539 print ( list_1 ) # \u663e\u7136\u62fc\u63a5\u7684\u6548\u7387\u56de\u6bd4`extend`\u65b9\u6cd5\u7684\u6548\u7387\u4f4e # \u8fd8\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u6765\u6269\u5145list\uff0c\u50cf\u8fd9\u6837 list_1 [ len ( list_1 ):] = list_2 list_1 # \u4f46\u662f\u8fd9\u6837\u7684\u53ef\u8bfb\u6027\u4e0d\u9ad8 [11, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10, 12] [11, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10, 12, '0', '00', '000'] [ 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ]","title":"\u6dfb\u52a0\u4efb\u610f\u4e2a\u65b0\u5143\u7d20\u5230\u672b\u5c3e"},{"location":"List/#_3","text":"insert \u65b9\u6cd5\u5c06\u4e00\u4e2a\u5bf9\u8c61\u63d2\u5165\u6307\u5b9a\u4f4d\u7f6e list_1 . insert ( 0 , 11 ); list_1 [ 11 , 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ] # \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u501f\u52a9\u5207\u7247\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 # \u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e00\u4e2alist\u4f7f\u7528\u5207\u7247\uff0c\u5fc5\u5b9a\u4f1a\u5f97\u5230\u4e00\u4e2alist\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u4e00\u4e2alist\u5bf9\u5207\u7247\u8d4b\u503c # \u8fd9\u6837\u867d\u7136\u5de7\u5999\uff0c\u4f46\u662f\u53ef\u8bfb\u6027\u6bd4\u4e0d\u4e0ainsert list_1 [ 0 : 0 ] = [ 11 ] list_1 [ 11 , 11 , 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ]","title":"\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20"},{"location":"List/#_4","text":"list_2 [ '0' , '00' , '000' ] # \u6ce8\u610f\uff0cpop\u662flist\u4e2d\u552f\u4e00\u4e00\u4e2a\u4fee\u6539\u539f\u5217\u8868\uff0c\u5e76\u4e14\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5 list_2 . pop () '000' list_2 [ '0' , '00' ] # pop\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u8f93\u5165\u7d22\u5f15\u503c\uff0c\u6307\u5b9a\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e list_2 . pop ( 0 ) '0' list_2 [ '00' ]","title":"\u5220\u9664\\\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\uff08\u4efb\u610f\u4f4d\u7f6e\u7684\uff09\u5143\u7d20"},{"location":"List/#_5","text":"list_1 . remove ( 11 ) list_1 [ 11 , 11 , 12 , 13 , 14 , 15 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , '0' , '00' , '000' , '0' , '00' , '000' ]","title":"\u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5143\u7d20"},{"location":"List/#_6","text":"list_1 . reverse () list_1 [ '000' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ]","title":"\u53cd\u5e8f\u6392\u5e8f"},{"location":"List/#_7","text":"\u65b9\u6cd5sort\u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff1akey\u548creverse\u3002\u5c06key\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7528\u4e8e\u6392\u5e8f\u7684\u51fd\u6570\u3002\u7136\u800c\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u6bd4\u53e6\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u662f\u4f7f\u7528\u5b83\u6765\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u952e\uff0c\u518d\u6839\u636e\u8fd9\u4e9b\u952e\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570reverse\uff0c\u53ea\u9700\u5c06\u5176\u6307\u5b9a\u4e3aTrue\u6216False\uff0c\u4ee5\u6307\u51fa\u662f\u5426\u8981\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_3 = [ 'aardvark' , 'abalone' , 'acme' , 'add' , 'aerate' ] list_3 . sort ( key = len ) list_3 [ 'add' , 'acme' , 'aerate' , 'abalone' , 'aardvark' ] # \u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f list_3 . sort ( key = len , reverse = True ) list_3 [ 'aardvark' , 'abalone' , 'aerate' , 'acme' , 'add' ]","title":"\u6392\u5e8f"},{"location":"List/#_8","text":"list_1 list_1 . count ( 11 ) 2","title":"\u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"List/#_9","text":"list_1 list_1 . index ( \"000\" ) 0","title":"\u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c"},{"location":"List/#_10","text":"list_4 = list_1 list_1 [ 0 ] = \"\u4fee\u6539\u4e86\" print ( \"list_1\" , list_1 ) print ( \"list_4\" , list_4 ) print ( \" \\n \" ) # \u6df1\u62f7\u8d1d list_5 = list_1 . copy () list_1 [ 0 ] = \"\u53c8\u4fee\u6539\u4e86\" print ( \"list_1\" , list_1 ) print ( \"list_5\" , list_5 ) list_1 [ '\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] list_4 [ '\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] list_1 [ '\u53c8\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ] list_5 [ '\u4fee\u6539\u4e86' , '00' , '0' , '000' , '00' , '0' , 12 , 10 , 9 , 8 , 7 , 6 , 5 , 15 , 14 , 13 , 12 , 11 , 11 ]","title":"\u6df1\u62f7\u8d1d\u5217\u8868"},{"location":"List/#_11","text":"list_1 . clear () list_1 []","title":"\u6e05\u7a7a\u5217\u8868"},{"location":"linear_regression/","text":"% Linear Regression model with Python % Matti Pastell % 19.4.2013 Requirements This en example of doing linear regression analysis using Python and statsmodels . We'll use the new formula API which makes fitting the models very familiar for R users. You'll also need Numpy , Pandas and matplolib . The analysis can be published using Pweave 0.22 and later. Import libraries import pandas as pd import numpy as np import statsmodels.formula.api as sm import statsmodels import matplotlib.pyplot as plt Statsmodels api seems to change often, check release version: statsmodels . __version__ '0.10.0' We'll use whiteside dataset from R package MASS. You can read the description of the dataset from the link, but in short it contains: The weekly gas consumption and average external temperature at a house in south-east England for two heating seasons, one of 26 weeks before, and one of 30 weeks after cavity-wall insulation was installed. Load dataset using Pandas: url = 'https://raw.githubusercontent.com/mpastell/Rdatasets/master/csv/MASS/whiteside.csv' whiteside = pd . read_csv ( url ) Fitting the model Let's see what the relationship between the gas consumption is before the insulation. See statsmodels documentation for more information about the syntax. model = sm . ols ( formula = 'Gas ~ Temp' , data = whiteside , subset = whiteside [ 'Insul' ] == \"Before\" ) fitted = model . fit () print ( fitted . summary ()) OLS Regression Results ============================================================================== Dep . Variable : Gas R - squared : 0 . 944 Model : OLS Adj . R - squared : 0 . 941 Method : Least Squares F - statistic : 403 . 1 Date : Wed , 07 Aug 2019 Prob ( F - statistic ): 1 . 64 e - 16 Time : 21 : 59 : 50 Log - Likelihood : - 2 . 8783 No . Observations : 26 AIC : 9 . 757 Df Residuals : 24 BIC : 12 . 27 Df Model : 1 Covariance Type : nonrobust ============================================================================== coef std err t P >| t | [ 0 . 025 0 . 975 ] ------------------------------------------------------------------------------ Intercept 6 . 8538 0 . 118 57 . 876 0 . 000 6 . 609 7 . 098 Temp - 0 . 3932 0 . 020 - 20 . 078 0 . 000 - 0 . 434 - 0 . 353 ============================================================================== Omnibus : 0 . 296 Durbin - Watson : 2 . 420 Prob ( Omnibus ): 0 . 862 Jarque - Bera ( JB ): 0 . 164 Skew : - 0 . 177 Prob ( JB ): 0 . 921 Kurtosis : 2 . 839 Cond . No . 13 . 3 ============================================================================== Warnings : [ 1 ] Standard Errors assume that the covariance matrix of the errors is correctly specified . Plot the data and fit Before = whiteside [ whiteside [ \"Insul\" ] == \"Before\" ] plt . plot ( Before [ \"Temp\" ], Before [ \"Gas\" ], 'ro' ) plt . plot ( Before [ \"Temp\" ], fitted . fittedvalues , 'b' ) plt . legend ([ 'Data' , 'Fitted model' ]) plt . ylim ( 0 , 10 ) plt . xlim ( - 2 , 12 ) plt . xlabel ( 'Temperature' ) plt . ylabel ( 'Gas' ) plt . title ( 'Before Insulation' ) Text ( 0 . 5 , 1 . 0 , 'Before Insulation' ) \\ Fit diagnostiscs Statsmodels OLSresults objects contain the usual diagnostic information about the model and you can use the get_influence() method to get more diagnostic information (such as Cook's distance). A look at the residuals Histogram of normalized residuals plt . hist ( fitted . resid_pearson ) plt . ylabel ( 'Count' ) plt . xlabel ( 'Normalized residuals' ) Text ( 0 . 5 , 0 , 'Normalized residuals' ) \\ Cooks distance OLSInfluence objects contain more diagnostic information influence = fitted . get_influence () #c is the distance and p is p-value ( c , p ) = influence . cooks_distance plt . stem ( np . arange ( len ( c )), c , markerfmt = \",\" ) G : \\ Installed \\ Anaconda3 \\ Scripts \\ pweave : 4 : UserWarning : In Matplotlib 3 . 3 individual lines on a stem plot will be added as a LineCollection instead of individual lines . This significantly improves the performance of a stem plot . To remove this warning and switch to the new behaviour , set the \"use_line_collection\" keyword argument to True . < StemContainer object of 3 artists > \\ Statsmodels builtin plots Statsmodels includes a some builtin function for plotting residuals against leverage: from statsmodels.graphics.regressionplots import * plot_leverage_resid2 ( fitted ) influence_plot ( fitted ) \\ \\","title":"Linear regression"},{"location":"linear_regression/#requirements","text":"This en example of doing linear regression analysis using Python and statsmodels . We'll use the new formula API which makes fitting the models very familiar for R users. You'll also need Numpy , Pandas and matplolib . The analysis can be published using Pweave 0.22 and later. Import libraries import pandas as pd import numpy as np import statsmodels.formula.api as sm import statsmodels import matplotlib.pyplot as plt Statsmodels api seems to change often, check release version: statsmodels . __version__ '0.10.0' We'll use whiteside dataset from R package MASS. You can read the description of the dataset from the link, but in short it contains: The weekly gas consumption and average external temperature at a house in south-east England for two heating seasons, one of 26 weeks before, and one of 30 weeks after cavity-wall insulation was installed. Load dataset using Pandas: url = 'https://raw.githubusercontent.com/mpastell/Rdatasets/master/csv/MASS/whiteside.csv' whiteside = pd . read_csv ( url )","title":"Requirements"},{"location":"linear_regression/#fitting-the-model","text":"Let's see what the relationship between the gas consumption is before the insulation. See statsmodels documentation for more information about the syntax. model = sm . ols ( formula = 'Gas ~ Temp' , data = whiteside , subset = whiteside [ 'Insul' ] == \"Before\" ) fitted = model . fit () print ( fitted . summary ()) OLS Regression Results ============================================================================== Dep . Variable : Gas R - squared : 0 . 944 Model : OLS Adj . R - squared : 0 . 941 Method : Least Squares F - statistic : 403 . 1 Date : Wed , 07 Aug 2019 Prob ( F - statistic ): 1 . 64 e - 16 Time : 21 : 59 : 50 Log - Likelihood : - 2 . 8783 No . Observations : 26 AIC : 9 . 757 Df Residuals : 24 BIC : 12 . 27 Df Model : 1 Covariance Type : nonrobust ============================================================================== coef std err t P >| t | [ 0 . 025 0 . 975 ] ------------------------------------------------------------------------------ Intercept 6 . 8538 0 . 118 57 . 876 0 . 000 6 . 609 7 . 098 Temp - 0 . 3932 0 . 020 - 20 . 078 0 . 000 - 0 . 434 - 0 . 353 ============================================================================== Omnibus : 0 . 296 Durbin - Watson : 2 . 420 Prob ( Omnibus ): 0 . 862 Jarque - Bera ( JB ): 0 . 164 Skew : - 0 . 177 Prob ( JB ): 0 . 921 Kurtosis : 2 . 839 Cond . No . 13 . 3 ============================================================================== Warnings : [ 1 ] Standard Errors assume that the covariance matrix of the errors is correctly specified .","title":"Fitting the model"},{"location":"linear_regression/#plot-the-data-and-fit","text":"Before = whiteside [ whiteside [ \"Insul\" ] == \"Before\" ] plt . plot ( Before [ \"Temp\" ], Before [ \"Gas\" ], 'ro' ) plt . plot ( Before [ \"Temp\" ], fitted . fittedvalues , 'b' ) plt . legend ([ 'Data' , 'Fitted model' ]) plt . ylim ( 0 , 10 ) plt . xlim ( - 2 , 12 ) plt . xlabel ( 'Temperature' ) plt . ylabel ( 'Gas' ) plt . title ( 'Before Insulation' ) Text ( 0 . 5 , 1 . 0 , 'Before Insulation' ) \\","title":"Plot the data and fit"},{"location":"linear_regression/#fit-diagnostiscs","text":"Statsmodels OLSresults objects contain the usual diagnostic information about the model and you can use the get_influence() method to get more diagnostic information (such as Cook's distance).","title":"Fit diagnostiscs"},{"location":"linear_regression/#a-look-at-the-residuals","text":"Histogram of normalized residuals plt . hist ( fitted . resid_pearson ) plt . ylabel ( 'Count' ) plt . xlabel ( 'Normalized residuals' ) Text ( 0 . 5 , 0 , 'Normalized residuals' ) \\","title":"A look at the residuals"},{"location":"linear_regression/#cooks-distance","text":"OLSInfluence objects contain more diagnostic information influence = fitted . get_influence () #c is the distance and p is p-value ( c , p ) = influence . cooks_distance plt . stem ( np . arange ( len ( c )), c , markerfmt = \",\" ) G : \\ Installed \\ Anaconda3 \\ Scripts \\ pweave : 4 : UserWarning : In Matplotlib 3 . 3 individual lines on a stem plot will be added as a LineCollection instead of individual lines . This significantly improves the performance of a stem plot . To remove this warning and switch to the new behaviour , set the \"use_line_collection\" keyword argument to True . < StemContainer object of 3 artists > \\","title":"Cooks distance"},{"location":"linear_regression/#statsmodels-builtin-plots","text":"Statsmodels includes a some builtin function for plotting residuals against leverage: from statsmodels.graphics.regressionplots import * plot_leverage_resid2 ( fitted ) influence_plot ( fitted ) \\ \\","title":"Statsmodels builtin plots"},{"location":"tuple/","text":"# -*- coding: utf-8 -*- Tuple siwing 2019.08.10 Tuple tuple\u662f\u4e00\u79cd\u4e00\u7ef4\u7684\uff0c\u5b9a\u957f\u7684\u3001\u4e0d\u53ef\u53d8\u7684Python\u5bf9\u8c61\u5e8f\u5217\uff0c\u5143\u7d20\u5199\u5728\u5c0f\u62ec\u53f7 () \u91cc\uff0c\u5143\u7d20\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002 \u4e0d\u53ef\u53d8\u7684tuple\u6709\u4ec0\u4e48\u610f\u4e49\uff1f\u56e0\u4e3atuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u53ef\u80fd\uff0c\u80fd\u7528tuple\u4ee3\u66fflist\u5c31\u5c3d\u91cf\u7528tuple\u3002 \u867d\u7136tuple\u7684\u5143\u7d20\u4e0d\u53ef\u6539\u53d8\uff0c\u4f46\u5b83\u53ef\u4ee5\u5305\u542b\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982list\u5217\u8868\u3002 Tuple\u7684\u9677\u9631\u2014\u2014\u4e00\u4e2a\u5143\u7d20\u7684Tuple \u5b9a\u4e49\u4e2a\u4e00\u4e2aTuple\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aiterable\u5bf9\u8c61\u3002 tuple ( \"123\" ) ( '1' , '2' , '3' ) \u5982\u679c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684Tuple\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a # \u901a\u8fc7tuple\u7c7b\u6765\u5b9a\u4e49 a = tuple () type ( a ) # \u6216\u8005\u7528 () \u5b9a\u4e49 a = () type ( a ) # \u662f\u7684\uff0c\u7684\u786e\u901a\u8fc7()\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7a7atuple tuple \u4f46\u662f\u5982\u679c\u8981\u9876\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u5c31\u5f97\u8981\u6ce8\u610f\u4e86\u3002 # \u5982\u679c\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\uff0c\u5219\u662f\u9519\u8bef\u7684 b = ( \"123\" ) type ( b ) str # \u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u9700\u8981\u8fd9\u6837\u5b9a\u4e49 b = ( \"123\" ,) type ( b ) tuple # \u6216\u8005\u8fd9\u6837\u5b9a\u4e49 b = tuple ([ \"123\" ]) type ( b ) tuple \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u56e0\u4e3a () \u5728python\u4e2d\u5373\u8868\u793a\u8fd0\u7b97\u7b26\u7684 () \uff0c\u4e5f\u53ef\u4ee5\u8868\u793aTuple\u3002\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u6b67\u4e49\uff0c\u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0cPython\u89c4\u5b9a\u62ec\u53f7\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c #\u2019 \u6309\u8fd0\u7b97\u7b26\u7684`()`\u8fdb\u884c\u89e3\u6790\u3002 Tuple\u7684\u9677\u9631\u2014\u2014\u201c\u53ef\u53d8\u7684\u201dTuple \u524d\u9762\u8bf4\u8fc7\uff0cTuple\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6709\u65f6\u6211\u4eec\u53c8\u4f1a\u53d1\u73b0Tuple\u662f\u201c\u53ef\u53d8\u7684\u201d\u3002 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"\u539f\u59cb\u5b9a\u4e49\u7684Tuple\uff1a\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"\u4fee\u6539\u540e\u7684Tuple\uff1a\" , c ) \u539f\u59cb\u5b9a\u4e49\u7684 Tuple \uff1a ( 'a' , 'b' , [ 'A' , 'B' ]) \u4fee\u6539\u540e\u7684 Tuple \uff1a ( 'a' , 'b' , [ 'X' , 'Y' ]) \u524d\u9762\u8bf4\u8fc7tuple\u4e00\u65e6\u5b9a\u4e49\u540e\u5c31\u4e0d\u53ef\u53d8\uff0c\u90a3\u4e0a\u9762\u7684c\u600e\u4e48\u5c31\u6539\u53d8\u4e86\u5462\uff1f\u5176\u5b9e\uff0cc\u7684\u5143\u7d20\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662flist\u4e2d\u7684\u5143\u7d20\uff0ctuple\u4e00\u5f00\u59cb\u6307\u5411\u7684list\u5e76\u6ca1\u6709\u6539\u6210\u522b\u7684list\uff0c\u6240\u4ee5\uff0ctuple\u6240\u8c13\u7684\u201c\u4e0d\u53d8\u201d\u662f\u8bf4\uff0ctuple\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u6307\u5411\u6c38\u8fdc\u4e0d\u53d8\u3002\u5373\u6307\u5411'a'\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411'b'\uff0c\u6307\u5411\u4e00\u4e2alist\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6307\u5411\u7684\u8fd9\u4e2alist\u672c\u8eab\u662f\u53ef\u53d8\u7684\uff01 \u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u7684tuple\uff0c\u90a3\u5c31\u5fc5\u987b\u4fdd\u8bc1tuple\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u4e5f\u4e0d\u80fd\u53d8\u3002 Tuple\u7684\u65b9\u6cd5 \u56e0\u4e3aTuple\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u6240\u4ee5Tuple\u5bf9\u8c61\u7684\u65b9\u6cd5\u5f88\u5c11\u3002 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) dir ( d ) [ '__add__' , '__class__' , '__contains__' , '__delattr__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__getitem__' , '__getnewargs__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__iter__' , '__le__' , '__len__' , '__lt__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__rmul__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'count' , 'index' ] \u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 d . count ( 4 ) 2 \u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c d . index ( 4 ) 4","title":"Tuple"},{"location":"tuple/#tuple","text":"tuple\u662f\u4e00\u79cd\u4e00\u7ef4\u7684\uff0c\u5b9a\u957f\u7684\u3001\u4e0d\u53ef\u53d8\u7684Python\u5bf9\u8c61\u5e8f\u5217\uff0c\u5143\u7d20\u5199\u5728\u5c0f\u62ec\u53f7 () \u91cc\uff0c\u5143\u7d20\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002 \u4e0d\u53ef\u53d8\u7684tuple\u6709\u4ec0\u4e48\u610f\u4e49\uff1f\u56e0\u4e3atuple\u4e0d\u53ef\u53d8\uff0c\u6240\u4ee5\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u53ef\u80fd\uff0c\u80fd\u7528tuple\u4ee3\u66fflist\u5c31\u5c3d\u91cf\u7528tuple\u3002 \u867d\u7136tuple\u7684\u5143\u7d20\u4e0d\u53ef\u6539\u53d8\uff0c\u4f46\u5b83\u53ef\u4ee5\u5305\u542b\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u6bd4\u5982list\u5217\u8868\u3002","title":"Tuple"},{"location":"tuple/#tupletuple","text":"\u5b9a\u4e49\u4e2a\u4e00\u4e2aTuple\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aiterable\u5bf9\u8c61\u3002 tuple ( \"123\" ) ( '1' , '2' , '3' ) \u5982\u679c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684Tuple\uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a # \u901a\u8fc7tuple\u7c7b\u6765\u5b9a\u4e49 a = tuple () type ( a ) # \u6216\u8005\u7528 () \u5b9a\u4e49 a = () type ( a ) # \u662f\u7684\uff0c\u7684\u786e\u901a\u8fc7()\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7a7atuple tuple \u4f46\u662f\u5982\u679c\u8981\u9876\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u5c31\u5f97\u8981\u6ce8\u610f\u4e86\u3002 # \u5982\u679c\u6211\u4eec\u8fd9\u6837\u5b9a\u4e49\uff0c\u5219\u662f\u9519\u8bef\u7684 b = ( \"123\" ) type ( b ) str # \u5b9a\u4e49\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff0c\u9700\u8981\u8fd9\u6837\u5b9a\u4e49 b = ( \"123\" ,) type ( b ) tuple # \u6216\u8005\u8fd9\u6837\u5b9a\u4e49 b = tuple ([ \"123\" ]) type ( b ) tuple \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u56e0\u4e3a () \u5728python\u4e2d\u5373\u8868\u793a\u8fd0\u7b97\u7b26\u7684 () \uff0c\u4e5f\u53ef\u4ee5\u8868\u793aTuple\u3002\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u5730\u4ea7\u751f\u4e86\u6b67\u4e49\uff0c\u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0cPython\u89c4\u5b9a\u62ec\u53f7\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c #\u2019 \u6309\u8fd0\u7b97\u7b26\u7684`()`\u8fdb\u884c\u89e3\u6790\u3002","title":"Tuple\u7684\u9677\u9631\u2014\u2014\u4e00\u4e2a\u5143\u7d20\u7684Tuple"},{"location":"tuple/#tupletuple_1","text":"\u524d\u9762\u8bf4\u8fc7\uff0cTuple\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u6709\u65f6\u6211\u4eec\u53c8\u4f1a\u53d1\u73b0Tuple\u662f\u201c\u53ef\u53d8\u7684\u201d\u3002 c = ( 'a' , 'b' , [ 'A' , 'B' ]) print ( \"\u539f\u59cb\u5b9a\u4e49\u7684Tuple\uff1a\" , c ) c [ 2 ][ 0 ] = 'X' c [ 2 ][ 1 ] = 'Y' print ( \"\u4fee\u6539\u540e\u7684Tuple\uff1a\" , c ) \u539f\u59cb\u5b9a\u4e49\u7684 Tuple \uff1a ( 'a' , 'b' , [ 'A' , 'B' ]) \u4fee\u6539\u540e\u7684 Tuple \uff1a ( 'a' , 'b' , [ 'X' , 'Y' ]) \u524d\u9762\u8bf4\u8fc7tuple\u4e00\u65e6\u5b9a\u4e49\u540e\u5c31\u4e0d\u53ef\u53d8\uff0c\u90a3\u4e0a\u9762\u7684c\u600e\u4e48\u5c31\u6539\u53d8\u4e86\u5462\uff1f\u5176\u5b9e\uff0cc\u7684\u5143\u7d20\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662flist\u4e2d\u7684\u5143\u7d20\uff0ctuple\u4e00\u5f00\u59cb\u6307\u5411\u7684list\u5e76\u6ca1\u6709\u6539\u6210\u522b\u7684list\uff0c\u6240\u4ee5\uff0ctuple\u6240\u8c13\u7684\u201c\u4e0d\u53d8\u201d\u662f\u8bf4\uff0ctuple\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u6307\u5411\u6c38\u8fdc\u4e0d\u53d8\u3002\u5373\u6307\u5411'a'\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411'b'\uff0c\u6307\u5411\u4e00\u4e2alist\uff0c\u5c31\u4e0d\u80fd\u6539\u6210\u6307\u5411\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6307\u5411\u7684\u8fd9\u4e2alist\u672c\u8eab\u662f\u53ef\u53d8\u7684\uff01 \u6240\u4ee5\u8981\u521b\u5efa\u4e00\u4e2a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u7684tuple\uff0c\u90a3\u5c31\u5fc5\u987b\u4fdd\u8bc1tuple\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u672c\u8eab\u4e5f\u4e0d\u80fd\u53d8\u3002","title":"Tuple\u7684\u9677\u9631\u2014\u2014\u201c\u53ef\u53d8\u7684\u201dTuple"},{"location":"tuple/#tuple_1","text":"\u56e0\u4e3aTuple\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u6240\u4ee5Tuple\u5bf9\u8c61\u7684\u65b9\u6cd5\u5f88\u5c11\u3002 d = ( 0 , 1 , 2 , 3 , 4 , 4 ) dir ( d ) [ '__add__' , '__class__' , '__contains__' , '__delattr__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattribute__' , '__getitem__' , '__getnewargs__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__iter__' , '__le__' , '__len__' , '__lt__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__rmul__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'count' , 'index' ]","title":"Tuple\u7684\u65b9\u6cd5"},{"location":"tuple/#_1","text":"d . count ( 4 ) 2","title":"\u7edf\u8ba1\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"tuple/#_2","text":"d . index ( 4 ) 4","title":"\u5f97\u5230\u67d0\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u5bf9\u5e94\u7684\u7d22\u5f15\u503c"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/","text":"# -*- coding: utf-8 -*- \u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d siwing 2019.08.10 name\u4e0evalue name\u4e0evalue \u5f15\u7528\uff08reference\uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002 \u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a\u8be5\u8d44\u6599\u7684\u6307\u6807\u6216\u4f4d\u5740\u3002 name\u662fvalue\u7684\u5f15\u7528\u3002 \u5728python\u91cc\u9762\uff0c\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7684\u503c\u662f\u67d0\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002 Python\u8d4b\u503c\u8bed\u53e5\u5c06\u5de6\u4fa7\u7684\u7b26\u53f7\u540d\u79f0\u4e0e\u53f3\u4fa7\u7684\u503c \u76f8\u5173\u8054 \u3002 \u5728Python\u4e2d\uff0c\u6211\u4eec\u8bf4\u540d\u79f0\u5f15\u7528\u503c\uff0c\u6216\u8005\u540d\u79f0\u662f\u5bf9\u503c\u7684\u5f15\u7528 \u4e0b\u6b21\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u65f6\uff0c\u4fbf\u5f97\u5230\u4e0e\u540d\u79f0\u76f8\u5173\u8054\u7684\u503c\u3002 \u591a\u4e2aname\u53ef\u4ee5\u5f15\u7528\u540c\u4e00\u4e2avalue\u3002 x = 23 y = x x \u548c y \u5177\u6709\u76f8\u540c\u7684\u72b6\u6001\uff1a\u6bcf\u4e2a\u90fd\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u5f15\u7528\u8be5\u503c\u3002 \u540d\u79f0\u662f\u72ec\u7acb\u4e8e\u5176\u4ed6\u540d\u79f0\u91cd\u65b0\u5206\u914d\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u76f8\u540c\u7684\u503c\uff0c\u5219\u4e0d\u4f1a\u94fe\u63a5\u8fd9\u4e24\u4e2a\u540d\u79f0\u3002 \u91cd\u65b0\u5206\u914d\u5176\u4e2d\u4e00\u4e2a\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4e5f\u88ab\u91cd\u65b0\u5206\u914d\uff1a x = 23 y = x x = 12 \u503c\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u540d\u79f0\u5f15\u7528\u5b83 Python\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u503c\u6709\u591a\u5c11\u5f15\u7528\uff0c\u5e76\u81ea\u52a8\u6e05\u9664\u6ca1\u6709\u5f15\u7528\u7684\u503c\u3002 \u8fd9\u88ab\u79f0\u4e3a\u201c\u5783\u573e\u6536\u96c6\u201d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u5fc5\u6e05\u695a\u503c\uff0c\u5f53\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u65f6\u5b83\u4eec\u4f1a\u81ea\u884c\u6d88\u5931\u3002 Assignment assignment\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u3002 \u5f53\u503c\u5177\u6709\u591a\u4e2a\u540d\u79f0\u65f6\uff0c\u5f88\u5bb9\u6613\u6df7\u6dc6\u5e76\u5c06\u5176\u89c6\u4e3a\u4e24\u4e2a\u540d\u79f0\u548c\u4e24\u4e2a\u503c\uff1a x = 23 y = x \u4f46\u662f\u7ed9\u540d\u79f0\u5206\u914d\u503c\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u521b\u5efa\u65b0\u503c\u3002\u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a23\uff0cx\u548cy\u90fd\u5f15\u7528\u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002 \u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f x = 23 y = x \u5f53python\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0cassignment\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u67e5\u770bx\u548cy\u7684\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230x\u548cy\u7684\u5185\u5b58\u5730\u5740\u4e00\u6837\uff0c\u8fd9\u4e5f\u8bf4\u660e\u4e86\u8be5\u8fc7\u7a0b\u5e76\u6ca1\u6709\u521b\u5efa\u65b0\u503c\u3002 print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 \u540c\u6837\u5730\uff0c\u5982\u679c\u6211\u4eec\u8fd9\u6837\u8d4b\u503c\uff0c\u4e5f\u4e0d\u4f1a\u521b\u5efa\u65b0\u503c\u3002 x = 23 y = 23 print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 \u5f53\u6211\u4eec\u6709\u66f4\u590d\u6742\u7684\u503c\u65f6\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u6709\u8da3\uff0c\u6bd4\u5982\u5217\u8868\uff1a x = [ 1 , 2 , 3 ] y = [ 1 , 2 , 3 ] print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998125886728 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126264072 \u867d\u7136\u6211\u4eec\u7ed9x\u548cy\u90fd\u8d4b\u503c\u4e86\u76f8\u540c\u7684list\uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230x\u548cy\u7ed1\u5b9a\u4e86\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u5185\u5b58\u5730\u5740\u5e76\u4e0d\u4e00\u6837\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f \u539f\u56e0\u5728\u4e8e 23 \u662f int \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u800c int \u7c7b\u578b\u5728python\u4e2d\u5c5e\u4e8e immutable \u7684\u7c7b\u578b\uff1blist \u5219\u5c5e\u4e8e mutable \u7684\u7c7b\u578b\u3002\u5f53\u7136\uff0cmutable\u3001immutable\u53ea\u662fpython\u8bed\u8a00\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u56e0\u4e3a int \u662fimmutable\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7ed9x\u91cd\u65b0\u8d4b\u503c\uff0c\u65e0\u8bba\u600e\u4e48\u6837\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230y\u3002 x = 23 y = x x = 12 y x = 23 y = 23 x = 12 y 23 \u4f46\u662f mutable \u7c7b\u578b\u7684\u503c\u5219\u4e0d\u4e00\u6837\uff0c\u5982\u679cx\u548cy\u5b58\u50a8\u7684\u662f\u540c\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u7ed9\u5176\u4e2d\u4e00\u4e2a\u540d\u79f0\u8d4b\u503c\u65f6\uff0c\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u540d\u79f0\u3002 x = [ 1 , 2 , 3 ] y = x print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) # \u7ed9x\u91cd\u65b0\u8d4b\u503c x [ 0 ] = 0 y x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998125885832 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998125885832 [ 0 , 2 , 3 ] \u6240\u4ee5\uff0c\u4e3a\u4e86\u907f\u514d\u6df7\u4e71\uff0c\u5f53\u6211\u4eec\u76f4\u63a5\u628a\u4e00\u4e2a\u76f8\u540c\u7684\u503c\u8d4b\u503c\u7ed9\u4e0d\u540c\u7684\u540d\u79f0\u65f6\uff0cpython\u4f1a\u65b0\u5efa\u5bf9\u8c61\u3002 x = [ 1 , 2 , 3 ] y = [ 1 , 2 , 3 ] print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) # \u7ed9x\u91cd\u65b0\u8d4b\u503c x [ 0 ] = 0 y x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126410760 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126506184 [ 1 , 2 , 3 ] \u901a\u8fc7\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a \u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u503c\u7684\u53d8\u5316\u3002 \u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u540d\u5b57\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0cx\u548cy\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u5b57\uff0c\u56e0\u4e3ax\u548cy\u50a8\u5b58\u7684\u5f15\u7528\u662f\u76f8\u540c\u7684\u3002 x = [ 1 , 2 , 3 ] y = x print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126567048 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126567048 Assignment\u9677\u9631\u2014\u2014mutable \u548cimmutable \u795e\u8bdd\uff1aPython\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u914d\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u503c\u3002 \u56e0\u4e3amutable\u5bf9\u8c61\u662f\u4e0d\u53ef\u66f4\u6539\u7684\uff0cimmutable\u5bf9\u8c61\u5219\u53ef\u4ee5\u66f4\u6539\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97mutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u7684\u503c\u5206\u914d\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cmutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u6240\u6709\u7684\u8d4b\u503c\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 Assignment\u9677\u9631\u2014\u2014\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d \u795e\u8bdd\uff1a\u503c\u662f\u6709\u8303\u56f4\u7684\u3002 \u5728python\u4e2d\u5b58\u5728\u4f5c\u7528\u57df\u8fd9\u6837\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u4f5c\u7528\u57df\u6307\u7684\u662f\u503c\uff08\u5bf9\u8c61\uff09\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c \u503c\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff0c\u4f5c\u7528\u57df\u6307\u7684\u662f\u540d\u79f0\u7684\u4f5c\u7528\u8303\u56f4\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4e0a\u5c42\u4f5c\u7528\u57df\uff0c\u4e0d\u80fd\u4f7f\u7528\u4e0b\u5c42\u4f5c\u7528\u57df\u7684\u540d\u79f0\u6765\u4f7f\u7528\u503c\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e0e\u9a8c\u8bc1\u8fd9\u70b9\u3002 def check_name_space_range ( x ): print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) # \u5148\u5728\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u8d4b\u503c\uff0c\u5e76\u6253\u5370\u5730\u5740 a = 10 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) check_name_space_range ( a ) a\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766112 x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766112 \u5f88\u660e\u663e\uff0c\u5728\u5185\u5916\u5c42\u4f5c\u7528\u57df\u7684\u503c\u90fd\u662f\u540c\u4e00\u4e2a\u3002 \u56e0\u4e3a\u503c\u6ca1\u6709\u8303\u56f4\uff0c\u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u4e00\u4e9b\u60ca\u559c\u3002 def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] \u53ef\u4ee5\u770b\u5230\uff0ca\u3001a_other\u90fd\u88ab\u6539\u53d8\u4e86\uff0c\u5b9e\u9645\u4e0aa\u3001a_other\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) a\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126580808 a_other\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126580808 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5728\u51fd\u6570\u91cc\u9762\u66f4\u6539\u53c2\u6570\u7684\u503c\uff0c\u6700\u597d\u590d\u5236\u4e00\u4e2a\u526f\u672c\u3002 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998125984648 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998125886792 a\u7684\u503c\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u770b\u4f3c\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u8fd8\u662f\u4f1a\u6709\u65b0\u7684\u60ca\u559c\u3002 \u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0bvariable_change_shallow\u51fd\u6570 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998126580808 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998126715592 \u60ca\u559c\u5c31\u662fa\u7684\u503c\u4e5f\u6539\u53d8\u4e86\u3002\u56e0\u4e3a x.copy() \u53ea\u662f\u6d45\u62f7\u8d1d\u3002 \u5728python\u91cc\u9762\u6709\u4e09\u79cd\u65b9\u5f0f\u53bb\u5f15\u7528\u67d0\u4e2a\u503c\uff1a 1. \u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf 2. \u6d45\u62f7\u8d1d 3. \u6df1\u62f7\u8d1d \u8fd9\u4e09\u79cd\u65b9\u5f0f\u662f\u6709\u533a\u522b\u7684\u3002 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) \u53d8\u91cfa\u548ca_reference\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u6d45\u62f7\u8d1d\u5f97\u5230\u53d8\u91cfa_shallow\uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46a_shallow\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20a_shallow[2]\u5374\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u8fd9\u548ca\u3001a_reference\u4e00\u6837\u3002 \u6df1\u62f7\u8d1d\u5f97\u5230\u53d8\u91cfa_deep_copy\uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e5f\u662f\u65b0\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u6d45\u62f7\u8d1d\u7684\u5bf9\u8c61\u5305\u542b\u4e86mutable\u5bf9\u8c61\uff0c\u5219mutable\u5bf9\u8c61\u4e0d\u4f1a\u62f7\u8d1d\uff1b\u800c\u6df1\u62f7\u8d1d\u5219\u4f1a\u5b8c\u6574\u62f7\u8d1d\u5bf9\u8c61\u3002 Assignment\u9677\u9631\u2014\u2014\u5f15\u7528\u4e0d\u4ec5\u4ec5\u662f\u540d\u79f0 \u4ee5\u4e0a\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528\u540d\u79f0\u4f5c\u4e3a\u503c\u7684\u5f15\u7528\uff0c\u4f46\u5f15\u7528\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e1c\u897f\u3002 Python\u6709\u8bb8\u591a\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7ed3\u6784\u90fd\u5305\u542b\u5bf9\u503c\u7684\u5f15\u7528\uff1a\u5217\u8868\u5143\u7d20\uff0c\u5b57\u5178\u952e\u548c\u503c\uff0c\u5bf9\u8c61\u5c5e\u6027\u7b49\u3002 \u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5728\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u4fa7\u4f7f\u7528\uff0c\u4ee5\u4e0a\u6240\u6709\u7ec6\u8282\u90fd\u9002\u7528\u4e8e\u5b83\u4eec\u3002 \u4efb\u4f55\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u5de6\u4fa7\u7684\u5185\u5bb9\u90fd\u662f\u5f15\u7528 \uff0c\u5728\u672c\u6587\u4e2d\u8bf4\u201c\u540d\u79f0\u201d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u7528\u201c\u5f15\u7528\u201d\u66ff\u6362\u3002 \u5728\u4e0a\u9762\u7684\u793a\u610f\u56fe\u4e2d\uff0c\u6570\u5b57\u88ab\u663e\u793a\u4e3a\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5bf9\u6570\u5b57\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\u7ed8\u5236\uff1a nums = [ 1 , 2 , 3 ] \u4f46\u8fd9\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ed8\u56fe\u7528\u4e86\u89c6\u89c9\u901f\u8bb0\uff1a \u5982\u679c\u4f60\u6709\u5217\u8868\u5143\u7d20\u5f15\u7528\u5176\u4ed6\u53ef\u53d8\u503c\uff0c\u4f8b\u5982\u5b50\u5217\u8868\uff0c\u8bf7\u52a1\u5fc5\u8bb0\u4f4f\u5217\u8868\u5143\u7d20\u53ea\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u8fd9\u662f\u4e00\u4e9b\u5176\u4ed6assignment\u3002\u8fd9\u4e9b\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5f15\u7528\uff08reference\uff09\uff1a my_obj . attr = 23 my_dict [ key ] = 24 my_list [ index ] = 25 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" \u6ce8\u610f\u7684\u662f i = x \u6307\u5b9a\u4e86\u540d\u79f0 i \uff0c\u4f46 i[0] = x \u5e76\u4e0d\u662f\u6307\u5b9a\u540d\u79f0 i \uff0c\u800c\u662f\u6307\u5b9a\u4e86 i \u7684\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5f88\u591a\u4e1c\u897f\u90fd\u662fAssignment \u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c\u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f15\u7528\uff0cpython\u91cc\u9762\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f5c\u4e3aassignments\u3002 \u8fd9\u4e9b\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u540d\u79f0X\u7684\u8d4b\u503c\uff1a X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X \u6ce8\u610f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u8bed\u53e5\u50cfassignments\uff0c\u6211\u7684\u610f\u601d\u662f\u8fd9\u4e9b\u8bed\u53e5\u90fd\u662f\u8d4b\u503c\u3002\u5b83\u4eec\u90fd\u4f7f\u540d\u79f0X\u5f15\u7528\u67d0\u4e2a\u503c\u3002\u4e0a\u9762\u6240\u8bf4\u7684\u5173\u4e8e\u8d4b\u503c\u7684\u6240\u6709\u5185\u5bb9\u90fd\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u8d4b\u503c\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bed\u53e5\u5c06X\u5b9a\u4e49\u5728\u4e0e\u8bed\u53e5\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002Python 2\u548cPython 3\u4e4b\u95f4\u7684\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002\u4f46\u5b83\u4eec\u90fd\u662f\u771f\u6b63\u7684\u8d4b\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4e8b\u5b9e\u90fd\u662f\u5173\u4e8e\u8d4b\u503c\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u3002 Python\u901a\u8fc7\u8d4b\u503c\u6765\u4f20\u9012\u51fd\u6570\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e9b\u4e0a\u9762assignment\u5217\u8868\u4e2d\u6700\u6709\u8da3\u7684\u4e00\u4e2a\uff1a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6211\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u5c06\u5176\u53c2\u6570\u547d\u540d\u4e3a\uff1a def my_func ( x , y ): return x + y \u8fd9\u91ccx\u548cy\u662f\u51fd\u6570my_func\u7684\u53c2\u6570\u3002\u5f53\u6211\u8c03\u7528my_func\u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u5b9e\u9645\u503c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u503c\u5206\u914d\u7ed9 \u53c2\u6570\u540d\u79f0 \uff0c\u5c31\u50cf\u4f7f\u7528\u4e86\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\uff1a def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 \u8c03\u7528my_func\u65f6\uff0c8\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0x\uff0c9\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0y\u3002\u8be5\u8d4b\u503c\u4e0e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u7b80\u5355\u8d4b\u503c\u8bed\u53e5\u5b8c\u5168\u76f8\u540c\u3002\u540d\u79f0x\u548cy\u662f\u51fd\u6570\u7684\u672c\u5730\u540d\u79f0\uff08local\uff09\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c31\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u503c\u4ecd\u7136\u88ab\u5176\u4ed6\u540d\u79f0\u5f15\u7528\uff0c\u5219\u503c\u4ecd\u7136\u5b58\u5728\u3002 \u5c31\u50cf\u6240\u6709\u5176\u4ed6\u8d4b\u503c\u4e00\u6837\uff0c\u53ef\u53d8\u503c\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5e76\u4e14\u901a\u8fc7\u5176\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u5bf9\u503c\u7684\u66f4\u6539\u3002\u8fd9\u5728 \u4e2d\u5df2\u7ecf\u63d0\u5230\u3002 \u540d\u79f0\u548c\u503c\u7684\u4e00\u4e9b\u7ec6\u8282 \u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u3002\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002\u540d\u79f0\u53ef\u4ee5\u5f15\u7528\u6574\u6570\uff0c\u7136\u540e\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5f15\u7528\u51fd\u6570\uff0c\u7136\u540e\u5f15\u7528\u6a21\u5757\u3002\u5f53\u7136\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6df7\u4e71\u7684\u7a0b\u5e8f\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46Python\u8bed\u8a00\u4e0d\u4f1a\u4ecb\u610f\u3002 \u540d\u79f0\u6ca1\u6709\u7c7b\u578b\uff0c\u503c\u6ca1\u6709\u8303\u56f4\u3002 \u6b63\u5982\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u503c\u4e5f\u6ca1\u6709\u8303\u56f4\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u8be5\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\uff1a\u4f60\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u8be5\u540d\u79f0\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u540d\u79f0\u5c06\u88ab\u9500\u6bc1\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5982\u679c\u540d\u79f0\u7684\u503c\u5177\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u5916\u3002\u5b83\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u672c\u5730\u503c\u3002 \u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u6709\u540d\u79f0\u53ef\u4ee5\u5220\u9664\u3002 Python\u7684\u5185\u5b58\u7ba1\u7406\u5bf9\u5176\u884c\u4e3a\u81f3\u5173\u91cd\u8981\uff0c\u4f60\u4e0d\u4ec5\u4e0d\u5fc5\u5220\u9664\u503c\uff0c\u800c\u4e14\u65e0\u6cd5\u5220\u9664\u503c\u3002 nums = [ 1 , 2 , 3 ] del nums \u8fd9\u4e0d\u4f1a\u5220\u9664\u503cnums\uff0c\u5b83\u4f1a\u5220\u9664\u540d\u79f0nums\u3002\u8be5\u540d\u79f0\u5c06\u4ece\u5176\u8303\u56f4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u5e38\u7684\u5f15\u7528\u8ba1\u6570\u5f00\u59cb\u6267\u884c\uff1a\u5982\u679cnums\u7684\u503c\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u5c06\u56de\u6536\u8be5\u503c\u3002\u4f46\u5982\u679c\u5b83\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 \u795e\u8bdd\uff1aPython\u6ca1\u6709\u53d8\u91cf\u3002 \u6709\u4e9b\u4eba\u559c\u6b22\u8bf4\uff0c\u201cPython\u6ca1\u6709\u53d8\u91cf\uff0c\u5b83\u6709\u540d\u5b57\u3002\u201d\u8fd9\u4e2a\u53e3\u53f7\u5177\u6709\u8bef\u5bfc\u6027\u3002\u4e8b\u5b9e\u662fPython\u6709\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eC\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\u3002 \u540d\u79f0\u662fPython\u7684\u53d8\u91cf\uff1a\u5b83\u4eec\u5f15\u7528\u503c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u503c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u53d8\u5316\uff08\u53d8\u5316\uff09\u3002\u4ec5\u4ec5\u56e0\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u5c3d\u7ba1\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8bed\u8a00\uff09\u8868\u73b0\u4e0d\u540c\uff0c\u6ca1\u6709\u7406\u7531\u5c06Python\u63cf\u8ff0\u4e3a\u6ca1\u6709\u53d8\u91cf\u3002","title":"\u6d45\u62f7\u8d1d \u6df1\u62f7\u8d1d"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#namevalue","text":"","title":"name\u4e0evalue"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#namevalue_1","text":"\u5f15\u7528\uff08reference\uff09 \uff1a\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u7a0b\u5f0f\u95f4\u63a5\u5b58\u53d6\u4e8e\u7535\u8111\u8bb0\u5fc6\u4f53\u6216\u5176\u4ed6\u50a8\u5b58\u88c5\u7f6e\u4e2d\u4e00\u7279\u5b9a\u8d44\u6599\u7684\u503c\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5f15\u7528\u4f1a\u662f\u8d44\u6599\u50a8\u5b58\u4e8e\u8bb0\u5fc6\u4f53\u6216\u50a8\u5b58\u88c5\u7f6e\u4e2d\u7684\u5b9e\u4f53\u4f4d\u5740 \u3002 \u56e0\u6b64\uff0c\u5f15\u7528\u4ea6\u5e38\u88ab\u79f0\u4e3a\u8be5\u8d44\u6599\u7684\u6307\u6807\u6216\u4f4d\u5740\u3002 name\u662fvalue\u7684\u5f15\u7528\u3002 \u5728python\u91cc\u9762\uff0c\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7684\u503c\u662f\u67d0\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u3002 Python\u8d4b\u503c\u8bed\u53e5\u5c06\u5de6\u4fa7\u7684\u7b26\u53f7\u540d\u79f0\u4e0e\u53f3\u4fa7\u7684\u503c \u76f8\u5173\u8054 \u3002 \u5728Python\u4e2d\uff0c\u6211\u4eec\u8bf4\u540d\u79f0\u5f15\u7528\u503c\uff0c\u6216\u8005\u540d\u79f0\u662f\u5bf9\u503c\u7684\u5f15\u7528 \u4e0b\u6b21\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u65f6\uff0c\u4fbf\u5f97\u5230\u4e0e\u540d\u79f0\u76f8\u5173\u8054\u7684\u503c\u3002 \u591a\u4e2aname\u53ef\u4ee5\u5f15\u7528\u540c\u4e00\u4e2avalue\u3002 x = 23 y = x x \u548c y \u5177\u6709\u76f8\u540c\u7684\u72b6\u6001\uff1a\u6bcf\u4e2a\u90fd\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u5f15\u7528\u8be5\u503c\u3002 \u540d\u79f0\u662f\u72ec\u7acb\u4e8e\u5176\u4ed6\u540d\u79f0\u91cd\u65b0\u5206\u914d\u7684\u3002 \u5982\u679c\u4e24\u4e2a\u540d\u79f0\u5f15\u7528\u76f8\u540c\u7684\u503c\uff0c\u5219\u4e0d\u4f1a\u94fe\u63a5\u8fd9\u4e24\u4e2a\u540d\u79f0\u3002 \u91cd\u65b0\u5206\u914d\u5176\u4e2d\u4e00\u4e2a\u4e0d\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4e5f\u88ab\u91cd\u65b0\u5206\u914d\uff1a x = 23 y = x x = 12 \u503c\u4e00\u76f4\u5b58\u5728\uff0c\u76f4\u5230\u6ca1\u6709\u540d\u79f0\u5f15\u7528\u5b83 Python\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u503c\u6709\u591a\u5c11\u5f15\u7528\uff0c\u5e76\u81ea\u52a8\u6e05\u9664\u6ca1\u6709\u5f15\u7528\u7684\u503c\u3002 \u8fd9\u88ab\u79f0\u4e3a\u201c\u5783\u573e\u6536\u96c6\u201d\uff0c\u610f\u5473\u7740\u4f60\u4e0d\u5fc5\u6e05\u695a\u503c\uff0c\u5f53\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u65f6\u5b83\u4eec\u4f1a\u81ea\u884c\u6d88\u5931\u3002","title":"name\u4e0evalue"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#assignment","text":"assignment\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\u3002 \u5f53\u503c\u5177\u6709\u591a\u4e2a\u540d\u79f0\u65f6\uff0c\u5f88\u5bb9\u6613\u6df7\u6dc6\u5e76\u5c06\u5176\u89c6\u4e3a\u4e24\u4e2a\u540d\u79f0\u548c\u4e24\u4e2a\u503c\uff1a x = 23 y = x \u4f46\u662f\u7ed9\u540d\u79f0\u5206\u914d\u503c\u6c38\u8fdc\u4e0d\u4f1a\u590d\u5236\u6570\u636e\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u521b\u5efa\u65b0\u503c\u3002\u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a23\uff0cx\u548cy\u90fd\u5f15\u7528\u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u7684\u90a3\u6837\u3002 \u5206\u914d\u53ea\u662f\u4f7f\u5de6\u4fa7\u7684\u540d\u79f0\u5f15\u7528\u53f3\u4fa7\u7684\u503c\u3002\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f x = 23 y = x \u5f53python\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0cassignment\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u67e5\u770bx\u548cy\u7684\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230x\u548cy\u7684\u5185\u5b58\u5730\u5740\u4e00\u6837\uff0c\u8fd9\u4e5f\u8bf4\u660e\u4e86\u8be5\u8fc7\u7a0b\u5e76\u6ca1\u6709\u521b\u5efa\u65b0\u503c\u3002 print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 \u540c\u6837\u5730\uff0c\u5982\u679c\u6211\u4eec\u8fd9\u6837\u8d4b\u503c\uff0c\u4e5f\u4e0d\u4f1a\u521b\u5efa\u65b0\u503c\u3002 x = 23 y = 23 print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766528 \u5f53\u6211\u4eec\u6709\u66f4\u590d\u6742\u7684\u503c\u65f6\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u6709\u8da3\uff0c\u6bd4\u5982\u5217\u8868\uff1a x = [ 1 , 2 , 3 ] y = [ 1 , 2 , 3 ] print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998125886728 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126264072 \u867d\u7136\u6211\u4eec\u7ed9x\u548cy\u90fd\u8d4b\u503c\u4e86\u76f8\u540c\u7684list\uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230x\u548cy\u7ed1\u5b9a\u4e86\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u5185\u5b58\u5730\u5740\u5e76\u4e0d\u4e00\u6837\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f \u539f\u56e0\u5728\u4e8e 23 \u662f int \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u800c int \u7c7b\u578b\u5728python\u4e2d\u5c5e\u4e8e immutable \u7684\u7c7b\u578b\uff1blist \u5219\u5c5e\u4e8e mutable \u7684\u7c7b\u578b\u3002\u5f53\u7136\uff0cmutable\u3001immutable\u53ea\u662fpython\u8bed\u8a00\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u56e0\u4e3a int \u662fimmutable\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7ed9x\u91cd\u65b0\u8d4b\u503c\uff0c\u65e0\u8bba\u600e\u4e48\u6837\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230y\u3002 x = 23 y = x x = 12 y x = 23 y = 23 x = 12 y 23 \u4f46\u662f mutable \u7c7b\u578b\u7684\u503c\u5219\u4e0d\u4e00\u6837\uff0c\u5982\u679cx\u548cy\u5b58\u50a8\u7684\u662f\u540c\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u7ed9\u5176\u4e2d\u4e00\u4e2a\u540d\u79f0\u8d4b\u503c\u65f6\uff0c\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u540d\u79f0\u3002 x = [ 1 , 2 , 3 ] y = x print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) # \u7ed9x\u91cd\u65b0\u8d4b\u503c x [ 0 ] = 0 y x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998125885832 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998125885832 [ 0 , 2 , 3 ] \u6240\u4ee5\uff0c\u4e3a\u4e86\u907f\u514d\u6df7\u4e71\uff0c\u5f53\u6211\u4eec\u76f4\u63a5\u628a\u4e00\u4e2a\u76f8\u540c\u7684\u503c\u8d4b\u503c\u7ed9\u4e0d\u540c\u7684\u540d\u79f0\u65f6\uff0cpython\u4f1a\u65b0\u5efa\u5bf9\u8c61\u3002 x = [ 1 , 2 , 3 ] y = [ 1 , 2 , 3 ] print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) # \u7ed9x\u91cd\u65b0\u8d4b\u503c x [ 0 ] = 0 y x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126410760 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126506184 [ 1 , 2 , 3 ] \u901a\u8fc7\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a \u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u503c\u7684\u53d8\u5316\u3002 \u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u540d\u5b57\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0cx\u548cy\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u5b57\uff0c\u56e0\u4e3ax\u548cy\u50a8\u5b58\u7684\u5f15\u7528\u662f\u76f8\u540c\u7684\u3002 x = [ 1 , 2 , 3 ] y = x print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) print ( \"y\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( y ))) x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126567048 y\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126567048","title":"Assignment"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#assignmentmutable-immutable","text":"\u795e\u8bdd\uff1aPython\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5206\u914d\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u503c\u3002 \u56e0\u4e3amutable\u5bf9\u8c61\u662f\u4e0d\u53ef\u66f4\u6539\u7684\uff0cimmutable\u5bf9\u8c61\u5219\u53ef\u4ee5\u66f4\u6539\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97mutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u7684\u503c\u5206\u914d\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cmutable\u5bf9\u8c61\u548cimmutable\u5bf9\u8c61\u6240\u6709\u7684\u8d4b\u503c\u7684\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002","title":"Assignment\u9677\u9631\u2014\u2014mutable \u548cimmutable"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#assignment_1","text":"\u795e\u8bdd\uff1a\u503c\u662f\u6709\u8303\u56f4\u7684\u3002 \u5728python\u4e2d\u5b58\u5728\u4f5c\u7528\u57df\u8fd9\u6837\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u4f5c\u7528\u57df\u6307\u7684\u662f\u503c\uff08\u5bf9\u8c61\uff09\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c \u503c\u662f\u6ca1\u6709\u8303\u56f4\u7684\uff0c\u4f5c\u7528\u57df\u6307\u7684\u662f\u540d\u79f0\u7684\u4f5c\u7528\u8303\u56f4\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4e0a\u5c42\u4f5c\u7528\u57df\uff0c\u4e0d\u80fd\u4f7f\u7528\u4e0b\u5c42\u4f5c\u7528\u57df\u7684\u540d\u79f0\u6765\u4f7f\u7528\u503c\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e0e\u9a8c\u8bc1\u8fd9\u70b9\u3002 def check_name_space_range ( x ): print ( \"x\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( x ))) # \u5148\u5728\u6700\u5916\u5c42\u7684\u4f5c\u7528\u57df\u8d4b\u503c\uff0c\u5e76\u6253\u5370\u5730\u5740 a = 10 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) check_name_space_range ( a ) a\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766112 x\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 140708311766112 \u5f88\u660e\u663e\uff0c\u5728\u5185\u5916\u5c42\u4f5c\u7528\u57df\u7684\u503c\u90fd\u662f\u540c\u4e00\u4e2a\u3002 \u56e0\u4e3a\u503c\u6ca1\u6709\u8303\u56f4\uff0c\u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u4e00\u4e9b\u60ca\u559c\u3002 def variable_change ( x ): x [ 0 ] = 10 return x a = [ 1 , 2 , 3 ] a_other = variable_change ( a ) print ( a ) print ( a_other ) [10, 2, 3] [10, 2, 3] \u53ef\u4ee5\u770b\u5230\uff0ca\u3001a_other\u90fd\u88ab\u6539\u53d8\u4e86\uff0c\u5b9e\u9645\u4e0aa\u3001a_other\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) a\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126580808 a_other\u7684\u5185\u5b58\u5730\u5740\u662f \uff1a 1998126580808 \u56e0\u6b64\uff0c\u5982\u679c\u8981\u5728\u51fd\u6570\u91cc\u9762\u66f4\u6539\u53c2\u6570\u7684\u503c\uff0c\u6700\u597d\u590d\u5236\u4e00\u4e2a\u526f\u672c\u3002 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ] = 10 else : pass return x a = [ 1 , 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [1, 2, 3] [10, 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998125984648 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998125886792 a\u7684\u503c\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4e0a\u9762\u7684\u7ed3\u679c\u770b\u4f3c\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u8fd8\u662f\u4f1a\u6709\u65b0\u7684\u60ca\u559c\u3002 \u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0bvariable_change_shallow\u51fd\u6570 def variable_change_shallow ( x ): if isinstance ( x , list ): x = x . copy () x [ 0 ][ 0 ] = 10 else : pass return x a = [[ 1 , 2 ], 2 , 3 ] a_other = variable_change_shallow ( a ) print ( a ) print ( a_other ) print ( \"a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a ))) print ( \"a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a\" + str ( id ( a_other ))) [[10, 2], 2, 3] [[10, 2], 2, 3] a\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998126580808 a_other\u7684\u5185\u5b58\u5730\u5740\u662f\uff1a1998126715592 \u60ca\u559c\u5c31\u662fa\u7684\u503c\u4e5f\u6539\u53d8\u4e86\u3002\u56e0\u4e3a x.copy() \u53ea\u662f\u6d45\u62f7\u8d1d\u3002 \u5728python\u91cc\u9762\u6709\u4e09\u79cd\u65b9\u5f0f\u53bb\u5f15\u7528\u67d0\u4e2a\u503c\uff1a 1. \u5f15\u7528\u53e6\u4e00\u4e2a\u53d8\u91cf 2. \u6d45\u62f7\u8d1d 3. \u6df1\u62f7\u8d1d \u8fd9\u4e09\u79cd\u65b9\u5f0f\u662f\u6709\u533a\u522b\u7684\u3002 import copy a = [ 1 , 2 ,[ 1 , 2 ]] a_reference = a a_shallow = copy . copy ( a ) a_deep_copy = copy . deepcopy ( a ) \u53d8\u91cfa\u548ca_reference\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u540d\u79f0\u3002 \u6d45\u62f7\u8d1d\u5f97\u5230\u53d8\u91cfa_shallow\uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46a_shallow\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20a_shallow[2]\u5374\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u8fd9\u548ca\u3001a_reference\u4e00\u6837\u3002 \u6df1\u62f7\u8d1d\u5f97\u5230\u53d8\u91cfa_deep_copy\uff0c\u5b83\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e5f\u662f\u65b0\u7684\u5bf9\u8c61\u3002 \u5982\u679c\u6d45\u62f7\u8d1d\u7684\u5bf9\u8c61\u5305\u542b\u4e86mutable\u5bf9\u8c61\uff0c\u5219mutable\u5bf9\u8c61\u4e0d\u4f1a\u62f7\u8d1d\uff1b\u800c\u6df1\u62f7\u8d1d\u5219\u4f1a\u5b8c\u6574\u62f7\u8d1d\u5bf9\u8c61\u3002","title":"Assignment\u9677\u9631\u2014\u2014\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#assignment_2","text":"\u4ee5\u4e0a\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528\u540d\u79f0\u4f5c\u4e3a\u503c\u7684\u5f15\u7528\uff0c\u4f46\u5f15\u7528\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e1c\u897f\u3002 Python\u6709\u8bb8\u591a\u590d\u5408\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7ed3\u6784\u90fd\u5305\u542b\u5bf9\u503c\u7684\u5f15\u7528\uff1a\u5217\u8868\u5143\u7d20\uff0c\u5b57\u5178\u952e\u548c\u503c\uff0c\u5bf9\u8c61\u5c5e\u6027\u7b49\u3002 \u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5728\u8d4b\u503c\u7b26\u53f7\u7684\u5de6\u4fa7\u4f7f\u7528\uff0c\u4ee5\u4e0a\u6240\u6709\u7ec6\u8282\u90fd\u9002\u7528\u4e8e\u5b83\u4eec\u3002 \u4efb\u4f55\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u5de6\u4fa7\u7684\u5185\u5bb9\u90fd\u662f\u5f15\u7528 \uff0c\u5728\u672c\u6587\u4e2d\u8bf4\u201c\u540d\u79f0\u201d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u7528\u201c\u5f15\u7528\u201d\u66ff\u6362\u3002 \u5728\u4e0a\u9762\u7684\u793a\u610f\u56fe\u4e2d\uff0c\u6570\u5b57\u88ab\u663e\u793a\u4e3a\u5143\u7d20\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5bf9\u6570\u5b57\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u5e94\u8be5\u50cf\u8fd9\u6837\u7ed8\u5236\uff1a nums = [ 1 , 2 , 3 ] \u4f46\u8fd9\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u7ed8\u56fe\u7528\u4e86\u89c6\u89c9\u901f\u8bb0\uff1a \u5982\u679c\u4f60\u6709\u5217\u8868\u5143\u7d20\u5f15\u7528\u5176\u4ed6\u53ef\u53d8\u503c\uff0c\u4f8b\u5982\u5b50\u5217\u8868\uff0c\u8bf7\u52a1\u5fc5\u8bb0\u4f4f\u5217\u8868\u5143\u7d20\u53ea\u662f\u5bf9\u503c\u7684\u5f15\u7528\u3002 \u8fd9\u662f\u4e00\u4e9b\u5176\u4ed6assignment\u3002\u8fd9\u4e9b\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u5f15\u7528\uff08reference\uff09\uff1a my_obj . attr = 23 my_dict [ key ] = 24 my_list [ index ] = 25 my_obj . attr [ key ][ index ] . attr = \"etc, etc\" \u6ce8\u610f\u7684\u662f i = x \u6307\u5b9a\u4e86\u540d\u79f0 i \uff0c\u4f46 i[0] = x \u5e76\u4e0d\u662f\u6307\u5b9a\u540d\u79f0 i \uff0c\u800c\u662f\u6307\u5b9a\u4e86 i \u7684\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u5f88\u591a\u4e1c\u897f\u90fd\u662fAssignment \u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c\u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f15\u7528\uff0cpython\u91cc\u9762\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f5c\u4e3aassignments\u3002 \u8fd9\u4e9b\u884c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u540d\u79f0X\u7684\u8d4b\u503c\uff1a X = ... for X in ... [ ... for X in ... ] ( ... for X in ... ) { ... for X in ... } class X ( ... ): def X ( ... ): def fn ( X ): ... ; fn ( 12 ) with ... as X : except ... as X : import X from ... import X import ... as X from ... import ... as X \u6ce8\u610f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e9b\u8bed\u53e5\u50cfassignments\uff0c\u6211\u7684\u610f\u601d\u662f\u8fd9\u4e9b\u8bed\u53e5\u90fd\u662f\u8d4b\u503c\u3002\u5b83\u4eec\u90fd\u4f7f\u540d\u79f0X\u5f15\u7528\u67d0\u4e2a\u503c\u3002\u4e0a\u9762\u6240\u8bf4\u7684\u5173\u4e8e\u8d4b\u503c\u7684\u6240\u6709\u5185\u5bb9\u90fd\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u8d4b\u503c\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bed\u53e5\u5c06X\u5b9a\u4e49\u5728\u4e0e\u8bed\u53e5\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u3002Python 2\u548cPython 3\u4e4b\u95f4\u7684\u7ec6\u8282\u7565\u6709\u4e0d\u540c\u3002\u4f46\u5b83\u4eec\u90fd\u662f\u771f\u6b63\u7684\u8d4b\u503c\uff0c\u800c\u4e14\u6bcf\u4e2a\u4e8b\u5b9e\u90fd\u662f\u5173\u4e8e\u8d4b\u503c\u9002\u7528\u4e8e\u6240\u6709\u8fd9\u4e9b\u3002 Python\u901a\u8fc7\u8d4b\u503c\u6765\u4f20\u9012\u51fd\u6570\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e9b\u4e0a\u9762assignment\u5217\u8868\u4e2d\u6700\u6709\u8da3\u7684\u4e00\u4e2a\uff1a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6211\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u5c06\u5176\u53c2\u6570\u547d\u540d\u4e3a\uff1a def my_func ( x , y ): return x + y \u8fd9\u91ccx\u548cy\u662f\u51fd\u6570my_func\u7684\u53c2\u6570\u3002\u5f53\u6211\u8c03\u7528my_func\u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u5b9e\u9645\u503c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u8fd9\u4e9b\u503c\u5206\u914d\u7ed9 \u53c2\u6570\u540d\u79f0 \uff0c\u5c31\u50cf\u4f7f\u7528\u4e86\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\uff1a def my_func ( x , y ): return x + y print ( my_func ( 8 , 9 )) 17 \u8c03\u7528my_func\u65f6\uff0c8\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0x\uff0c9\u88ab\u8d4b\u503c\u7ed9\u540d\u79f0y\u3002\u8be5\u8d4b\u503c\u4e0e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684\u7b80\u5355\u8d4b\u503c\u8bed\u53e5\u5b8c\u5168\u76f8\u540c\u3002\u540d\u79f0x\u548cy\u662f\u51fd\u6570\u7684\u672c\u5730\u540d\u79f0\uff08local\uff09\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c31\u4f1a\u6d88\u5931\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u503c\u4ecd\u7136\u88ab\u5176\u4ed6\u540d\u79f0\u5f15\u7528\uff0c\u5219\u503c\u4ecd\u7136\u5b58\u5728\u3002 \u5c31\u50cf\u6240\u6709\u5176\u4ed6\u8d4b\u503c\u4e00\u6837\uff0c\u53ef\u53d8\u503c\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5e76\u4e14\u901a\u8fc7\u5176\u6240\u6709\u540d\u79f0\u53ef\u4ee5\u770b\u5230\u5bf9\u503c\u7684\u66f4\u6539\u3002\u8fd9\u5728 \u4e2d\u5df2\u7ecf\u63d0\u5230\u3002","title":"Assignment\u9677\u9631\u2014\u2014\u5f15\u7528\u4e0d\u4ec5\u4ec5\u662f\u540d\u79f0"},{"location":"\u6d45\u62f7\u8d1d_\u6df1\u62f7\u8d1d/#_1","text":"\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002 Python\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u3002\u4efb\u4f55\u540d\u79f0\u90fd\u53ef\u4ee5\u968f\u65f6\u5f15\u7528\u4efb\u4f55\u503c\u3002\u540d\u79f0\u53ef\u4ee5\u5f15\u7528\u6574\u6570\uff0c\u7136\u540e\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5f15\u7528\u51fd\u6570\uff0c\u7136\u540e\u5f15\u7528\u6a21\u5757\u3002\u5f53\u7136\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u975e\u5e38\u6df7\u4e71\u7684\u7a0b\u5e8f\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46Python\u8bed\u8a00\u4e0d\u4f1a\u4ecb\u610f\u3002 \u540d\u79f0\u6ca1\u6709\u7c7b\u578b\uff0c\u503c\u6ca1\u6709\u8303\u56f4\u3002 \u6b63\u5982\u540d\u79f0\u6ca1\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u503c\u4e5f\u6ca1\u6709\u8303\u56f4\u3002\u5f53\u6211\u4eec\u8bf4\u4e00\u4e2a\u51fd\u6570\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u8be5\u540d\u79f0\u7684\u4f5c\u7528\u57df\u662f\u51fd\u6570\uff1a\u4f60\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u90e8\u4f7f\u7528\u8be5\u540d\u79f0\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u540d\u79f0\u5c06\u88ab\u9500\u6bc1\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5982\u679c\u540d\u79f0\u7684\u503c\u5177\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u5b83\u5c06\u7ee7\u7eed\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u5916\u3002\u5b83\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u672c\u5730\u503c\u3002 \u503c\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u6709\u540d\u79f0\u53ef\u4ee5\u5220\u9664\u3002 Python\u7684\u5185\u5b58\u7ba1\u7406\u5bf9\u5176\u884c\u4e3a\u81f3\u5173\u91cd\u8981\uff0c\u4f60\u4e0d\u4ec5\u4e0d\u5fc5\u5220\u9664\u503c\uff0c\u800c\u4e14\u65e0\u6cd5\u5220\u9664\u503c\u3002 nums = [ 1 , 2 , 3 ] del nums \u8fd9\u4e0d\u4f1a\u5220\u9664\u503cnums\uff0c\u5b83\u4f1a\u5220\u9664\u540d\u79f0nums\u3002\u8be5\u540d\u79f0\u5c06\u4ece\u5176\u8303\u56f4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u5e38\u7684\u5f15\u7528\u8ba1\u6570\u5f00\u59cb\u6267\u884c\uff1a\u5982\u679cnums\u7684\u503c\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u5c06\u56de\u6536\u8be5\u503c\u3002\u4f46\u5982\u679c\u5b83\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u88ab\u56de\u6536\u3002 \u795e\u8bdd\uff1aPython\u6ca1\u6709\u53d8\u91cf\u3002 \u6709\u4e9b\u4eba\u559c\u6b22\u8bf4\uff0c\u201cPython\u6ca1\u6709\u53d8\u91cf\uff0c\u5b83\u6709\u540d\u5b57\u3002\u201d\u8fd9\u4e2a\u53e3\u53f7\u5177\u6709\u8bef\u5bfc\u6027\u3002\u4e8b\u5b9e\u662fPython\u6709\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0eC\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\u3002 \u540d\u79f0\u662fPython\u7684\u53d8\u91cf\uff1a\u5b83\u4eec\u5f15\u7528\u503c\uff0c\u5e76\u4e14\u8fd9\u4e9b\u503c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u53d8\u5316\uff08\u53d8\u5316\uff09\u3002\u4ec5\u4ec5\u56e0\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u5c3d\u7ba1\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8bed\u8a00\uff09\u8868\u73b0\u4e0d\u540c\uff0c\u6ca1\u6709\u7406\u7531\u5c06Python\u63cf\u8ff0\u4e3a\u6ca1\u6709\u53d8\u91cf\u3002","title":"\u540d\u79f0\u548c\u503c\u7684\u4e00\u4e9b\u7ec6\u8282"},{"location":"numpy\u7b14\u8bb0/5.1.\u521b\u5efa\u6570\u7ec4/","text":"import numpy as np \u5171\u540c\u7684\u53c2\u6570 \u8fd9\u91cc\u6709\u51e0\u4e2a\u5171\u540c\u7684\u53c2\u6570\uff1a a \uff1a\u4e00\u4e2a array-like \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u6570\u7ec4\uff0c\u53ef\u4ee5\u4e3a list \u3001 tuple \u3001 list of tuple \u3001 list of list \u3001 tuple of list \u3001 tuple of tuple \u7b49\u7b49\u3002 dtype \uff1a\u6570\u7ec4\u7684\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a float \u3002\u4f60\u53ef\u4ee5\u6307\u5b9aPython\u7684\u6807\u51c6\u6570\u503c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 numpy \u7684\u6570\u503c\u7c7b\u578b\u5982\uff1a numpy.int32 \u6216\u8005 numpy.float64 \u7b49\u7b49\u3002 order \uff1a\u6307\u5b9a\u5b58\u50a8\u591a\u7ef4\u6570\u636e\u7684\u65b9\u5f0f\u3002 - 'C' \uff0c\u8868\u793a\u6309\u884c\u4f18\u5148\u5b58\u50a8\uff08C\u98ce\u683c\uff09\uff1b - 'F' \uff0c\u8868\u793a\u6309\u5217\u4f18\u5148\u5b58\u50a8\uff08Fortran\u98ce\u683c\uff09\u3002 - \u5bf9\u4e8e **_like() \u51fd\u6570\uff0c order \u53ef\u4ee5\u4e3a\uff1a 'C' \uff0c 'F' \uff0c 'A' \uff08\u8868\u793a\u7ed3\u679c\u7684order\u4e0ea\u76f8\u540c\uff09\uff0c 'K' \uff08\u8868\u793a\u7ed3\u679c\u7684 order \u4e0e a \u5c3d\u53ef\u80fd\u76f8\u4f3c\uff09 subok \uff1a bool \u503c\u3002\u5982\u679c\u4e3a True \u5219\uff1a\u5982\u679c a \u4e3a ndarray \u7684\u5b50\u7c7b\uff08\u5982 matrix \u7c7b\uff09\uff0c\u5219\u7ed3\u679c\u7c7b\u578b\u4e0e a \u7c7b\u578b\u76f8\u540c\u3002\u5982\u679c\u4e3a False \u5219\uff1a\u7ed3\u679c\u7c7b\u578b\u59cb\u7ec8\u4e3a ndarray \u3002\u9ed8\u8ba4\u4e3aTrue\u3002 \u4ece\u73b0\u6709\u7684\u6570\u636e\u521b\u5efa np.array(object[, dtype, copy, order, subok, ndmin]) :\u4ece object \u521b\u5efa\u3002 - object \u53ef\u4ee5\u662f\u4e00\u4e2a ndarray \uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a array_like \u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u542b\u6709\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u6216\u8005 ndarray \u7684 __array__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u4e00\u4e2a\u5e8f\u5217\u3002 copy \uff1a\u9ed8\u8ba4\u4e3a True \uff0c\u8868\u793a\u62f7\u8d1d\u5bf9\u8c61 order \u53ef\u4ee5\u4e3a 'C'\u3001'F'\u3001'A' \u3002\u9ed8\u8ba4\u4e3a 'K' \u3002 subok \u9ed8\u8ba4\u4e3a False ndmin \uff1a\u6307\u5b9a\u7ed3\u679c ndarray \u6700\u5c11\u6709\u591a\u5c11\u4e2a\u7ef4\u5ea6\u3002 np.asarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210\u4e00\u4e2a ndarray \u3002\u5176\u4e2d a \u662f array_like \u7684\u5bf9\u8c61\uff0c \u53ef\u4ee5\u662f list \u3001 list of tuple \u3001 tuple \u3001 tuple of list \u3001 ndarray \u7c7b\u578b\u3002 order \u9ed8\u8ba4\u4e3a C \u3002 np.asanyarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210 ndarray \u3002 np.ascontiguousarray(a[, dtype]) \uff1a\u8fd4\u56deC\u98ce\u683c\u7684\u8fde\u7eed ndarray \u3002 np.copy(a[, order]) \uff1a\u8fd4\u56de ndarray \u7684\u4e00\u4efd\u6df1\u62f7\u8d1d\u3002 \u4ee5\u4e0a5\u4e2a\u65b9\u6cd5\u5b9e\u9645\u4e0a\u90fd\u662f\u8c03\u7528\u4e86 array() \u7684\u63a5\u53e3\u3002 np . asarray () # array(a, dtype, copy=False, order=order) np . asanyarray () # array(a, dtype, copy=False, order=order, subok=True) np . ascontiguousarray () # array(a, dtype, copy=False, order='C', ndmin=1) np . copy () # array(a, order=order, copy=True) np.asmatrix(data[, dtype]) \uff1a\u8fd4\u56de matrix \u3002 np.frombuffer(buffer[, dtype, count, offset]) \uff1a\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u8fd4\u56de\u4e00\u7ef4 ndarray \u3002 count \u6307\u5b9a\u8bfb\u53d6\u7684\u6570\u91cf\uff0c -1 \u8868\u793a\u5168\u90e8\u8bfb\u53d6\uff1b offset \u6307\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u4e3a0\u3002 \u521b\u5efa\u7684\u6570\u7ec4\u4e0e buffer \u5171\u4eab\u5185\u5b58\u3002 buffer \u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 buffer \u63a5\u53e3\u7684\u5bf9\u8c61\uff08 \u5185\u7f6e\u7684 bytes/bytearray/array.array \u7c7b\u578b\u63d0\u4f9b\u4e86\u8be5\u63a5\u53e3 \uff09\u3002 from array import array # array.array \u63d0\u4f9b\u4e86\u7c7b\u4f3clist\u5bf9\u8c61\u7684\u5185\u5b58\u673a\u5236 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # \u521b\u5efa\u4e00\u4e2aarray\u6570\u7ec4 na = np . frombuffer ( a , dtype = np . float ) # \u901a\u8fc7np.frombuffer()\u521b\u5efa\u4e00\u4e2a\u548ca\u5171\u4eab\u5185\u5b58\u7684NumPy\u6570\u7ec4 print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # \u4fee\u6539NumPy\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 a # array\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e5f\u540c\u65f6\u6539\u53d8 a : array ( 'd' , [ 1.0 , 2.0 , 3.0 , 4.0 ]) na : [ 1 . 2 . 3 . 4 .] array ( 'd' , [ 1 . 0 , 20 . 0 , 3 . 0 , 4 . 0 ]) np.fromfile(file[, dtype, count, sep]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8005\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u8fd4\u56de ndarray \u3002 sep \uff1a\u5f53\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65f6\uff0c\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u5982\u679c sep \u662f\u7a7a\u5b57\u7b26\u4e32\u5219\u8868\u793a\u6587\u4ef6\u5e94\u8be5\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\uff1b\u5982\u679c sep \u4e3a \" \" \u8868\u793a\u53ef\u4ee5\u5339\u914d0\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u3002 np.fromfunction(function, shape, \\**kwargs) \uff1a\u8fd4\u56de\u4e00\u4e2a ndarray \u3002function\u4f1a\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5750\u6807\u70b9\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002\u5047\u8bbe shape \u7684\u7ef4\u5ea6\u4e3aN\uff0c\u90a3\u4e48 function \u5e26\u6709 N \u4e2a\u53c2\u6570\uff0c fn(x1,x2,...x_N) \uff0c\u5176\u8fd4\u56de\u503c\u5c31\u662f\u8be5\u5750\u6807\u70b9\u7684\u503c\u3002 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array ([[ 0 ., 1 ., 2 .], [ 1 ., 2 ., 3 .], [ 2 ., 3 ., 4 .]]) np.fromiter(iterable, dtype[, count]) \uff1a\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fed\u4ee3\u83b7\u53d6\u6570\u636e\u521b\u5efa\u4e00\u7ef4 ndarray \u3002 np . fromiter ( \"123\" , dtype = \"int64\" ) array ([ 1 , 2 , 3 ], dtype = int64 ) np.fromstring(string[, dtype, count, sep]) \uff1a\u4ece\u5b57\u7b26\u4e32\u6216\u8005 raw binary \u4e2d\u521b\u5efa\u4e00\u7ef4 ndarray \u3002\u5982\u679c sep \u4e3a\u7a7a\u5b57\u7b26\u4e32\u5219 string \u5c06\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u91ca\uff08\u5373\u6bcf\u4e2a\u5b57\u7b26\u4f5c\u4e3a ASCII \u7801\u503c\u5bf9\u5f85\uff09\u3002\u521b\u5efa\u7684\u6570\u7ec4\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u533a\u3002 a = \"abcdefg\" a = np . fromstring ( a , dtype = np . int8 ) # \u5c06\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7f16\u7801\u89e3\u91ca\u4e3a\u6574\u6570 print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] .\\setup.py:2: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead \"\"\" np.loadtxt(fname[, dtype, comments, delimiter, ...]) :\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e\u521b\u5efa ndarray \uff0c\u8981\u6c42\u6587\u672c\u6587\u4ef6\u6bcf\u4e00\u884c\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u503c\u3002 comments \uff1a\u6307\u793a\u6ce8\u91ca\u884c\u7684\u8d77\u59cb\u5b57\u7b26\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u5217\u8868\uff08\u9ed8\u8ba4\u4e3a # \uff09\u3002 delimiter :\u6307\u5b9a\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u767d\u7b26\u3002 converters \uff1a\u5c06\u6307\u5b9a\u5217\u53f7(0,1,2...)\u7684\u5217\u6570\u636e\u6267\u884c\u8f6c\u6362\uff0c\u662f\u4e00\u4e2a map \uff0c\u5982 {0:func1} \u8868\u793a\u5bf9\u7b2c\u4e00\u5217\u6570\u636e\u6267\u884c func1(val_0) \u3002 skiprows \uff1a\u6307\u5b9a\u8df3\u8fc7\u5f00\u5934\u7684\u591a\u5c11\u884c\u3002 usecols \uff1a\u6307\u5b9a\u8bfb\u53d6\u90a3\u4e9b\u5217\uff080\u8868\u793a\u7b2c\u4e00\u5217\uff09\u3002 \u4ece\u6570\u503c\u533a\u95f4\u521b\u5efa np.arange([start,] stop[, step,][, dtype]) :\u8fd4\u56de\u5747\u5300\u95f4\u9694\u7684\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u533a\u95f4\u662f\u534a\u95ed\u534a\u5f00\u7684 [start,stop) \uff0c\u5176\u91c7\u6837\u884c\u4e3a\u7c7b\u4f3cPython\u7684 range \u51fd\u6570\u3002 start \u4e3a\u5f00\u59cb\u70b9\uff0c stop \u4e3a\u7ec8\u6b62\u70b9\uff0c step \u4e3a\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u8fd9\u51e0\u4e2a\u6570\u53ef\u4ee5\u4e3a\u6574\u6570\u53ef\u4ee5\u4e3a\u6d6e\u70b9\u6570\u3002 \u6ce8\u610f\u5982\u679c step \u4e3a\u6d6e\u70b9\u6570\uff0c\u5219\u7ed3\u679c\u53ef\u80fd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u76f8\u7b49\u6bd4\u8f83\u4e0d\u51c6\u786e\uff08\u8ba1\u7b97\u673a\u7cbe\u5ea6\u6709\u9650\uff09\u3002 np.linspace(start, stop[, num, endpoint, ...]) \uff1a\u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \uff08\u9ed8\u8ba4\u4e3a50\uff09\u3002\u533a\u95f4\u662f\u95ed\u533a\u95f4 [start,stop] \u3002 endpoint \u4e3a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a\u771f\u5219\u8868\u793a stop \u662f\u6700\u540e\u91c7\u6837\u7684\u503c\uff08\u9ed8\u8ba4\u4e3a True \uff09\uff0c\u5426\u5219\u7ed3\u679c\u4e0d\u5305\u542b stop \u3002 retstep \u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u91c7\u6837\u6b65\u957f step \uff0c\u9ed8\u8ba4\u4e3a True \u3002 np.logspace(start, stop[, num, endpoint, base, ...]) \uff1a\u8fd4\u56de\u5bf9\u6570\u7ea7\u522b\u4e0a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u91c7\u6837\u70b9\u5f00\u59cb\u4e8e base^start \uff0c\u7ed3\u675f\u4e8e base^stop \u3002 base \u4e3a\u5bf9\u6570\u7684\u57fa\uff0c\u9ed8\u8ba4\u4e3a 10\u3002 \u5b83\u903b\u8f91\u4e0a\u76f8\u5f53\u4e8e\u5148\u6267\u884c arange \u83b7\u53d6\u6570\u7ec4 array \uff0c\u7136\u540e\u518d\u6267\u884c base^array[i] \u83b7\u53d6\u91c7\u6837\u70b9 - \u5b83\u6ca1\u6709 retstep \u5173\u952e\u5b57\u53c2\u6570 \u4ee5\u586b\u5145\u7684\u65b9\u5f0f\u521b\u5efa np.empty(shape[,dtype,order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c dtype \uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 np.empty_like(a[,dtype,order,subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 # \u5185\u5b58\u672a\u521d\u59cb\u5316 a = np . empty (( 3 , 2 ), order = \"C\" ) # \u5185\u5b58\u672a\u521d\u59cb\u5316 np . empty_like ( a ) array ([[ 0 ., 0 .], [ 0 ., 0 .], [ 0 ., 0 .]]) np.eye(N[, M, k, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a==\u4e8c\u7ef4\u6570\u7ec4==\uff0c\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5176\u4f59\u5143\u7d20\u4e3a0\u3002 M \u9ed8\u8ba4\u7b49\u4e8e N \u3002 k \u9ed8\u8ba4\u4e3a0\u8868\u793a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u6b63\u6570\u5219\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u8d1f\u6570\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\u3002 np.identity(n[, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\u3002 np . eye ( N = 2 , M = 3 ) np . eye ( N = 2 , M = 3 , k = 0 ) # \u53c2\u6570k\u662f\u53ef\u4ee5\u8d85\u51fa\u8303\u56f4\u7684 np . eye ( N = 2 , M = 3 , k = 1 ) # \u8fd4\u56den\u9636\u5355\u4f4d\u77e9\u9635 np . identity ( n = 4 ) array ([[ 1 ., 0 ., 0 ., 0 .], [ 0 ., 1 ., 0 ., 0 .], [ 0 ., 0 ., 1 ., 0 .], [ 0 ., 0 ., 0 ., 1 .]]) np.ones(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1. np.ones_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1\u3002 np.zeros(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0. np.zeros_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \uff08\u53e6\u4e00\u4e2a\u6570\u7ec4\uff09\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002 9 np.full(shape, fill_value[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 np.full_like(a, fill_value[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 np . full (( 2 , 3 ), fill_value = 2 ) array ([[ 2 , 2 , 2 ], [ 2 , 2 , 2 ]])","title":"5.1.\u521b\u5efa\u6570\u7ec4"},{"location":"numpy\u7b14\u8bb0/5.1.\u521b\u5efa\u6570\u7ec4/#_1","text":"\u8fd9\u91cc\u6709\u51e0\u4e2a\u5171\u540c\u7684\u53c2\u6570\uff1a a \uff1a\u4e00\u4e2a array-like \u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u6570\u7ec4\uff0c\u53ef\u4ee5\u4e3a list \u3001 tuple \u3001 list of tuple \u3001 list of list \u3001 tuple of list \u3001 tuple of tuple \u7b49\u7b49\u3002 dtype \uff1a\u6570\u7ec4\u7684\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a float \u3002\u4f60\u53ef\u4ee5\u6307\u5b9aPython\u7684\u6807\u51c6\u6570\u503c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 numpy \u7684\u6570\u503c\u7c7b\u578b\u5982\uff1a numpy.int32 \u6216\u8005 numpy.float64 \u7b49\u7b49\u3002 order \uff1a\u6307\u5b9a\u5b58\u50a8\u591a\u7ef4\u6570\u636e\u7684\u65b9\u5f0f\u3002 - 'C' \uff0c\u8868\u793a\u6309\u884c\u4f18\u5148\u5b58\u50a8\uff08C\u98ce\u683c\uff09\uff1b - 'F' \uff0c\u8868\u793a\u6309\u5217\u4f18\u5148\u5b58\u50a8\uff08Fortran\u98ce\u683c\uff09\u3002 - \u5bf9\u4e8e **_like() \u51fd\u6570\uff0c order \u53ef\u4ee5\u4e3a\uff1a 'C' \uff0c 'F' \uff0c 'A' \uff08\u8868\u793a\u7ed3\u679c\u7684order\u4e0ea\u76f8\u540c\uff09\uff0c 'K' \uff08\u8868\u793a\u7ed3\u679c\u7684 order \u4e0e a \u5c3d\u53ef\u80fd\u76f8\u4f3c\uff09 subok \uff1a bool \u503c\u3002\u5982\u679c\u4e3a True \u5219\uff1a\u5982\u679c a \u4e3a ndarray \u7684\u5b50\u7c7b\uff08\u5982 matrix \u7c7b\uff09\uff0c\u5219\u7ed3\u679c\u7c7b\u578b\u4e0e a \u7c7b\u578b\u76f8\u540c\u3002\u5982\u679c\u4e3a False \u5219\uff1a\u7ed3\u679c\u7c7b\u578b\u59cb\u7ec8\u4e3a ndarray \u3002\u9ed8\u8ba4\u4e3aTrue\u3002","title":"\u5171\u540c\u7684\u53c2\u6570"},{"location":"numpy\u7b14\u8bb0/5.1.\u521b\u5efa\u6570\u7ec4/#_2","text":"np.array(object[, dtype, copy, order, subok, ndmin]) :\u4ece object \u521b\u5efa\u3002 - object \u53ef\u4ee5\u662f\u4e00\u4e2a ndarray \uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a array_like \u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u542b\u6709\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u6216\u8005 ndarray \u7684 __array__ \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u4e00\u4e2a\u5e8f\u5217\u3002 copy \uff1a\u9ed8\u8ba4\u4e3a True \uff0c\u8868\u793a\u62f7\u8d1d\u5bf9\u8c61 order \u53ef\u4ee5\u4e3a 'C'\u3001'F'\u3001'A' \u3002\u9ed8\u8ba4\u4e3a 'K' \u3002 subok \u9ed8\u8ba4\u4e3a False ndmin \uff1a\u6307\u5b9a\u7ed3\u679c ndarray \u6700\u5c11\u6709\u591a\u5c11\u4e2a\u7ef4\u5ea6\u3002 np.asarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210\u4e00\u4e2a ndarray \u3002\u5176\u4e2d a \u662f array_like \u7684\u5bf9\u8c61\uff0c \u53ef\u4ee5\u662f list \u3001 list of tuple \u3001 tuple \u3001 tuple of list \u3001 ndarray \u7c7b\u578b\u3002 order \u9ed8\u8ba4\u4e3a C \u3002 np.asanyarray(a[, dtype, order]) \uff1a\u5c06 a \u8f6c\u6362\u6210 ndarray \u3002 np.ascontiguousarray(a[, dtype]) \uff1a\u8fd4\u56deC\u98ce\u683c\u7684\u8fde\u7eed ndarray \u3002 np.copy(a[, order]) \uff1a\u8fd4\u56de ndarray \u7684\u4e00\u4efd\u6df1\u62f7\u8d1d\u3002 \u4ee5\u4e0a5\u4e2a\u65b9\u6cd5\u5b9e\u9645\u4e0a\u90fd\u662f\u8c03\u7528\u4e86 array() \u7684\u63a5\u53e3\u3002 np . asarray () # array(a, dtype, copy=False, order=order) np . asanyarray () # array(a, dtype, copy=False, order=order, subok=True) np . ascontiguousarray () # array(a, dtype, copy=False, order='C', ndmin=1) np . copy () # array(a, order=order, copy=True) np.asmatrix(data[, dtype]) \uff1a\u8fd4\u56de matrix \u3002 np.frombuffer(buffer[, dtype, count, offset]) \uff1a\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u8fd4\u56de\u4e00\u7ef4 ndarray \u3002 count \u6307\u5b9a\u8bfb\u53d6\u7684\u6570\u91cf\uff0c -1 \u8868\u793a\u5168\u90e8\u8bfb\u53d6\uff1b offset \u6307\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u4e3a0\u3002 \u521b\u5efa\u7684\u6570\u7ec4\u4e0e buffer \u5171\u4eab\u5185\u5b58\u3002 buffer \u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 buffer \u63a5\u53e3\u7684\u5bf9\u8c61\uff08 \u5185\u7f6e\u7684 bytes/bytearray/array.array \u7c7b\u578b\u63d0\u4f9b\u4e86\u8be5\u63a5\u53e3 \uff09\u3002 from array import array # array.array \u63d0\u4f9b\u4e86\u7c7b\u4f3clist\u5bf9\u8c61\u7684\u5185\u5b58\u673a\u5236 a = array ( \"d\" , [ 1 , 2 , 3 , 4 ]) # \u521b\u5efa\u4e00\u4e2aarray\u6570\u7ec4 na = np . frombuffer ( a , dtype = np . float ) # \u901a\u8fc7np.frombuffer()\u521b\u5efa\u4e00\u4e2a\u548ca\u5171\u4eab\u5185\u5b58\u7684NumPy\u6570\u7ec4 print ( \"a:\" , a ) print ( \"na:\" , na ) na [ 1 ] = 20 # \u4fee\u6539NumPy\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 a # array\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e5f\u540c\u65f6\u6539\u53d8 a : array ( 'd' , [ 1.0 , 2.0 , 3.0 , 4.0 ]) na : [ 1 . 2 . 3 . 4 .] array ( 'd' , [ 1 . 0 , 20 . 0 , 3 . 0 , 4 . 0 ]) np.fromfile(file[, dtype, count, sep]) \uff1a\u4ece\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8005\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u8fd4\u56de ndarray \u3002 sep \uff1a\u5f53\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65f6\uff0c\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u5982\u679c sep \u662f\u7a7a\u5b57\u7b26\u4e32\u5219\u8868\u793a\u6587\u4ef6\u5e94\u8be5\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u8bfb\u53d6\uff1b\u5982\u679c sep \u4e3a \" \" \u8868\u793a\u53ef\u4ee5\u5339\u914d0\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u767d\u5b57\u7b26\u3002 np.fromfunction(function, shape, \\**kwargs) \uff1a\u8fd4\u56de\u4e00\u4e2a ndarray \u3002function\u4f1a\u83b7\u53d6\u6bcf\u4e00\u4e2a\u5750\u6807\u70b9\u7684\u6570\u636e\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002\u5047\u8bbe shape \u7684\u7ef4\u5ea6\u4e3aN\uff0c\u90a3\u4e48 function \u5e26\u6709 N \u4e2a\u53c2\u6570\uff0c fn(x1,x2,...x_N) \uff0c\u5176\u8fd4\u56de\u503c\u5c31\u662f\u8be5\u5750\u6807\u70b9\u7684\u503c\u3002 def fun ( x , y ): return x + y np . fromfunction ( fun , shape = ( 3 , 3 )) array ([[ 0 ., 1 ., 2 .], [ 1 ., 2 ., 3 .], [ 2 ., 3 ., 4 .]]) np.fromiter(iterable, dtype[, count]) \uff1a\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fed\u4ee3\u83b7\u53d6\u6570\u636e\u521b\u5efa\u4e00\u7ef4 ndarray \u3002 np . fromiter ( \"123\" , dtype = \"int64\" ) array ([ 1 , 2 , 3 ], dtype = int64 ) np.fromstring(string[, dtype, count, sep]) \uff1a\u4ece\u5b57\u7b26\u4e32\u6216\u8005 raw binary \u4e2d\u521b\u5efa\u4e00\u7ef4 ndarray \u3002\u5982\u679c sep \u4e3a\u7a7a\u5b57\u7b26\u4e32\u5219 string \u5c06\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u636e\u89e3\u91ca\uff08\u5373\u6bcf\u4e2a\u5b57\u7b26\u4f5c\u4e3a ASCII \u7801\u503c\u5bf9\u5f85\uff09\u3002\u521b\u5efa\u7684\u6570\u7ec4\u6709\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u533a\u3002 a = \"abcdefg\" a = np . fromstring ( a , dtype = np . int8 ) # \u5c06\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7f16\u7801\u89e3\u91ca\u4e3a\u6574\u6570 print ( a ) a = \"1;2;3;4;5\" a = np . fromstring ( a , dtype = np . int8 , sep = \";\" ) print ( a ) [ 97 98 99 100 101 102 103] [1 2 3 4 5] .\\setup.py:2: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead \"\"\" np.loadtxt(fname[, dtype, comments, delimiter, ...]) :\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e\u521b\u5efa ndarray \uff0c\u8981\u6c42\u6587\u672c\u6587\u4ef6\u6bcf\u4e00\u884c\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684\u6570\u503c\u3002 comments \uff1a\u6307\u793a\u6ce8\u91ca\u884c\u7684\u8d77\u59cb\u5b57\u7b26\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u5217\u8868\uff08\u9ed8\u8ba4\u4e3a # \uff09\u3002 delimiter :\u6307\u5b9a\u6570\u503c\u4e4b\u95f4\u7684\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u767d\u7b26\u3002 converters \uff1a\u5c06\u6307\u5b9a\u5217\u53f7(0,1,2...)\u7684\u5217\u6570\u636e\u6267\u884c\u8f6c\u6362\uff0c\u662f\u4e00\u4e2a map \uff0c\u5982 {0:func1} \u8868\u793a\u5bf9\u7b2c\u4e00\u5217\u6570\u636e\u6267\u884c func1(val_0) \u3002 skiprows \uff1a\u6307\u5b9a\u8df3\u8fc7\u5f00\u5934\u7684\u591a\u5c11\u884c\u3002 usecols \uff1a\u6307\u5b9a\u8bfb\u53d6\u90a3\u4e9b\u5217\uff080\u8868\u793a\u7b2c\u4e00\u5217\uff09\u3002","title":"\u4ece\u73b0\u6709\u7684\u6570\u636e\u521b\u5efa"},{"location":"numpy\u7b14\u8bb0/5.1.\u521b\u5efa\u6570\u7ec4/#_3","text":"np.arange([start,] stop[, step,][, dtype]) :\u8fd4\u56de\u5747\u5300\u95f4\u9694\u7684\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u533a\u95f4\u662f\u534a\u95ed\u534a\u5f00\u7684 [start,stop) \uff0c\u5176\u91c7\u6837\u884c\u4e3a\u7c7b\u4f3cPython\u7684 range \u51fd\u6570\u3002 start \u4e3a\u5f00\u59cb\u70b9\uff0c stop \u4e3a\u7ec8\u6b62\u70b9\uff0c step \u4e3a\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a1\u3002\u8fd9\u51e0\u4e2a\u6570\u53ef\u4ee5\u4e3a\u6574\u6570\u53ef\u4ee5\u4e3a\u6d6e\u70b9\u6570\u3002 \u6ce8\u610f\u5982\u679c step \u4e3a\u6d6e\u70b9\u6570\uff0c\u5219\u7ed3\u679c\u53ef\u80fd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u76f8\u7b49\u6bd4\u8f83\u4e0d\u51c6\u786e\uff08\u8ba1\u7b97\u673a\u7cbe\u5ea6\u6709\u9650\uff09\u3002 np.linspace(start, stop[, num, endpoint, ...]) \uff1a\u8fd4\u56de num \u4e2a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \uff08\u9ed8\u8ba4\u4e3a50\uff09\u3002\u533a\u95f4\u662f\u95ed\u533a\u95f4 [start,stop] \u3002 endpoint \u4e3a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3a\u771f\u5219\u8868\u793a stop \u662f\u6700\u540e\u91c7\u6837\u7684\u503c\uff08\u9ed8\u8ba4\u4e3a True \uff09\uff0c\u5426\u5219\u7ed3\u679c\u4e0d\u5305\u542b stop \u3002 retstep \u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u7ed3\u679c\u5305\u542b\u91c7\u6837\u6b65\u957f step \uff0c\u9ed8\u8ba4\u4e3a True \u3002 np.logspace(start, stop[, num, endpoint, base, ...]) \uff1a\u8fd4\u56de\u5bf9\u6570\u7ea7\u522b\u4e0a\u5747\u5300\u91c7\u6837\u7684\u6570\u503c\u7ec4\u6210\u7684\u4e00\u7ef4 ndarray \u3002\u91c7\u6837\u70b9\u5f00\u59cb\u4e8e base^start \uff0c\u7ed3\u675f\u4e8e base^stop \u3002 base \u4e3a\u5bf9\u6570\u7684\u57fa\uff0c\u9ed8\u8ba4\u4e3a 10\u3002 \u5b83\u903b\u8f91\u4e0a\u76f8\u5f53\u4e8e\u5148\u6267\u884c arange \u83b7\u53d6\u6570\u7ec4 array \uff0c\u7136\u540e\u518d\u6267\u884c base^array[i] \u83b7\u53d6\u91c7\u6837\u70b9 - \u5b83\u6ca1\u6709 retstep \u5173\u952e\u5b57\u53c2\u6570","title":"\u4ece\u6570\u503c\u533a\u95f4\u521b\u5efa"},{"location":"numpy\u7b14\u8bb0/5.1.\u521b\u5efa\u6570\u7ec4/#_4","text":"np.empty(shape[,dtype,order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c dtype \uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 np.empty_like(a[,dtype,order,subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u4f46\u662f\u6ca1\u6709\u521d\u59cb\u5316\u5143\u7d20\u3002\u56e0\u6b64\u5176\u5185\u5bb9\u662f\u968f\u673a\u7684\u3002 # \u5185\u5b58\u672a\u521d\u59cb\u5316 a = np . empty (( 3 , 2 ), order = \"C\" ) # \u5185\u5b58\u672a\u521d\u59cb\u5316 np . empty_like ( a ) array ([[ 0 ., 0 .], [ 0 ., 0 .], [ 0 ., 0 .]]) np.eye(N[, M, k, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a==\u4e8c\u7ef4\u6570\u7ec4==\uff0c\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5176\u4f59\u5143\u7d20\u4e3a0\u3002 M \u9ed8\u8ba4\u7b49\u4e8e N \u3002 k \u9ed8\u8ba4\u4e3a0\u8868\u793a\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u6b63\u6570\u5219\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0a\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\uff0c\u5982\u4e3a\u8d1f\u6570\u8868\u793a\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u4e00\u683c\u7684\u5143\u7d20\u4e3a1\u3002 np.identity(n[, dtype]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\u3002 np . eye ( N = 2 , M = 3 ) np . eye ( N = 2 , M = 3 , k = 0 ) # \u53c2\u6570k\u662f\u53ef\u4ee5\u8d85\u51fa\u8303\u56f4\u7684 np . eye ( N = 2 , M = 3 , k = 1 ) # \u8fd4\u56den\u9636\u5355\u4f4d\u77e9\u9635 np . identity ( n = 4 ) array ([[ 1 ., 0 ., 0 ., 0 .], [ 0 ., 1 ., 0 ., 0 .], [ 0 ., 0 ., 1 ., 0 .], [ 0 ., 0 ., 0 ., 1 .]]) np.ones(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1. np.ones_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a1\u3002 np.zeros(shape[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0. np.zeros_like(a[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \uff08\u53e6\u4e00\u4e2a\u6570\u7ec4\uff09\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002 9 np.full(shape, fill_value[, dtype, order]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c\u6307\u5b9a\u4e86 shape \u548c type \uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 np.full_like(a, fill_value[, dtype, order, subok]) \uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ndarray \uff0c shape \u4e0e a \u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a fill_value \u3002 np . full (( 2 , 3 ), fill_value = 2 ) array ([[ 2 , 2 , 2 ], [ 2 , 2 , 2 ]])","title":"\u4ee5\u586b\u5145\u7684\u65b9\u5f0f\u521b\u5efa"},{"location":"numpy\u7b14\u8bb0/5.2.\u7d22\u5f15/","text":"import numpy as np import copy ndarrays \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6 Python x[obj] \u8bed\u6cd5\u5bf9\u5176\u8fdb\u884c\u7d22\u5f15 \uff0c\u5176\u4e2d x \u662f\u6570\u7ec4\uff0c obj \u662f\u7d22\u5f15\u3002\u6709\u4e09\u79cd\u53ef\u7528\u7684\u7d22\u5f15\uff1a\u5b57\u6bb5\u8bbf\u95ee\uff0c\u57fa\u672c\u5207\u7247\uff0c\u9ad8\u7ea7\u7d22\u5f15\u3002\u54ea\u4e00\u4e2a\u53d1\u751f\u53d6\u51b3\u4e8e obj \u3002 \u5728 Python \u4e2d\uff0c x[(exp1\uff0cexp2\uff0c.\uff0cEXPN)] \u7b49\u540c\u4e8e x[exp1\uff0cexp2\uff0c.\uff0cEXPN] \u3002\u540e\u8005\u53ea\u662f\u524d\u8005\u7684\u8bed\u6cd5\u7cd6\u3002 # \u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 a = np . arange ( 100 ) # \u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 b = copy . deepcopy ( np . reshape ( a , ( 20 , 5 ))) # \u521b\u5efa\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4 c = copy . deepcopy ( np . arange ( 90 ) . reshape (( 10 , 3 , 3 ))) \u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15 \u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5217\u8868\u76f8\u540c\u3002\u5047\u8bbe a1 \u662f\u4e00\u7ef4\u6570\u7ec4\uff0c\u90a3\u4e48\u6709\u4ee5\u4e0b5\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570 i \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 a1[i] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5207\u7247 \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 a1[i:j] \uff0c\u7b49\u4ef7\u4e8e a1[slice(j,j)] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570list \u5bf9\u6570\u7ec4\u8fdb\u884c\u5b58\u53d6\uff0c\u5982 a1[[i1,i2,i3]] \u3002\u6b64\u65f6\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u4f5c\u4e3a\u4e0b\u6807 (i1/i2/i3) \uff0c\u4f7f\u7528\u5217\u8868\u4f5c\u4e3a\u4e0b\u6807\u5f97\u5230\u7684\u6570\u7ec4\u4e3a np.array([a1[i1],a1[i2],a1[i3]]) \uff0c\u5b83\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u5185\u5b58\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982 a1[a2] \u6b64\u65f6\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f62\u72b6\u548c\u4e0b\u6807\u6570\u7ec4 a2 \u76f8\u540c\u7684\u65b0\u6570\u7ec4\u3002\u65b0\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e0b\u6807\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u4f5c\u4e3a\u4e0b\u6807\u4ece\u539f\u59cb\u6570\u7ec4\u4e2d\u83b7\u5f97\u7684\u503c\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5e03\u5c14\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982a1[b]\u3002\u6b64\u65f6\u5c06\u83b7\u5f97\u6570\u7ec4a1\u4e2d\u4e0e\u6570\u7ec4b\u4e2d\u7684True\u5bf9\u5e94\u7684\u5143\u7d20\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570 a [ 1 ] # OWNDATA : True ## \u7b49\u4ef7\u4e8e a [( 1 )] # OWNDATA : True # \u6307\u5b9a\u5207\u7247 a [ 0 : 20 : 2 ] # \u8fd4\u56de\u89c6\u56fe a [ slice ( 0 , 20 , 2 )] # \u8fd4\u56de\u89c6\u56fe # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5217\u8868 a [[ 1 , 2 , 3 , 4 ]] # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ## index\u662f\u4e00\u7ef4\u6570\u7ec4 index = np . array ([ 0 , 1 , 2 , 3 , 4 ]) a [ index ] # OWNDATA : True ## index\u662f\u4e8c\u7ef4\u6570\u7ec4 index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) a [ index ] # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4 ## \u5e03\u5c14\u6570\u7ec4\u7684ndim\u9700\u8981\u548c\u539f\u6570\u7ec4\u76f8\u540c bool_a = a > 50 bool_a = list ( bool_a ) \u591a\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15 \u591a\u7ef4\u6570\u7ec4\u4f7f\u7528 \u5143\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5982 a[1,2] \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u5706\u62ec\u53f7\u4e3a a[(1,2)] \u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u7ef4\u6570\u7ec4\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u662f\u4e00\u7ef4\u6570\u7ec4\u53ea\u6709\u7b2c 0 \u8f74\u3002 \u4e0b\u6807\u5143\u7ec4 \u4e2d\u6bcf\u4e2a\u5143\u7d20\u548c\u6570\u7ec4\u7684\u6bcf\u4e2a\u8f74\u5bf9\u5e94\u3002\u4e0b\u6807\u5143\u7ec4\u7684\u7b2c 0 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 0 \u8f74\uff0c\u7b2c 1 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 1 \u8f74\uff0c\u7b2c 2 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 2 \u8f74\u00b7\u00b7\u00b7 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u76f8\u7b49\u7684\u5143\u7ec4\u3002 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219IndexError \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219\u81ea\u52a8\u5728\u5143\u7ec4\u7684\u540e\u9762\u8865 : \uff0c\u4f7f\u5f97\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u7b49\u4e8e\u6570\u7ec4\u7ef4\u5ea6ndim\u3002 \u5982\u679c\u4e0b\u6807\u5bf9\u8c61\u4e0d\u662f\u5143\u7ec4\uff0c\u5219Numpy\u4f1a\u9996\u5148\u5c06\u5176\u8f6c\u6362\u4e3a\u5143\u7ec4\u3002 \u6709\u4ee5\u4e0b7\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u6574\u6570\u5143\u7ec4 \u5207\u7247 \u6574\u6570\u5143\u7ec4\u642d\u914d\u5207\u7247 \u6574\u6570list \u6574\u6570\u6570\u7ec4 \u5e03\u5c14\u6570\u7ec4 \u6574\u6570\u6570\u7ec4\u3001\u5207\u7247\u3001\u6574\u6570\u5143\u7ec4\u6df7\u642d # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5143\u7ec4 b [( 1 , 2 )] # OWNDATA : Trues ## \u7b49\u4ef7\u4e8e b [ 1 , 2 ] # OWNDATA : Trues ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u8fc7\u591a\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6:IndexError ''' b[(1,2,3)] ''' ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u5c11\u4e8e\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6 b [ 1 ] # \u8fd4\u56de\u89c6\u56fe \u7b49\u4ef7\u4e8e b[1,:] # \u5207\u7247 b [ 0 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , 0 :: 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , slice ( 0 , None , 2 )] # \u8fd4\u56de\u89c6\u56fe ## SyntaxError b[0,slice(0,,2)] b [ 0 : 10 : 2 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe ## \u7b2c\u4e8c\u5217 b [:, 1 ] # \u8fd4\u56de\u89c6\u56fe b [ ... , 1 ] # \u8fd4\u56de\u89c6\u56fe ## IndexError: an index can only have a single ellipsis ('...') ''' b[...,...] IndexError ''' b [ ... ,:] # \u8fd4\u56de\u89c6\u56fe b [:,:] # \u8fd4\u56de\u89c6\u56fe # \u6574\u6570\u6570\u7ec4 ## arrays used as indices must be of integer (or boolean) type index = np . array ([ 0 , 1 , 2 , 3 ]) b [ index ] # OWNDATA : True index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) b [ index ] # OWNDATA : True ## \u5982\u679c\u4e0b\u6807\u6574\u6570\u6570\u7ec4\u7684\u7ef4\u5ea6\u4e0d\u4e00\u81f4\uff0c\u4f1a\u8fdb\u884c\u5e7f\u64ad rows = np . array ([[ 0 , 1 , 2 ]]) columns = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 4 ]]) index = ( rows , columns ) b [ index ] array ([[ 0 , 6 , 12 ], [ 3 , 9 , 14 ]]) \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u662f\u5e03\u5c14\u6570\u7ec4\u6216\u8005\u4e0b\u6807\u5143\u7ec4\u4e2d\u5305\u542b\u4e86\u5e03\u5c14\u6570\u7ec4\uff0c\u5219\u76f8\u5f53\u4e8e\u5c06\u5e03\u5c14\u6570\u7ec4\u901a\u8fc7 np.nonzero() \u5c06\u5e03\u5c14\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u7684\u5143\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u4e0b\u6807\u8fd0\u884c\u3002 np.nonzero(a) \u8fd4\u56de\u6570\u7ec4 a \u4e2d\uff0c\u503c\u975e\u96f6\u7684\u5143\u7d20\u7684 \u4e0b\u6807 \u3002\u5b83\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a a.ndim \u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u4e00\u7ef4\u7684\u6574\u6570\u6570\u7ec4\uff0c\u5176\u503c\u4e3a\u975e\u96f6\u5143\u7d20\u7684\u4e0b\u6807\u5728\u5bf9\u5e94\u8f74\u4e0a\u7684\u503c\u3002\u5982\uff1a\u7b2c 0 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57280\u8f74\u7684\u4e0b\u6807\u3001\u7b2c 1 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57281\u8f74\u7684\u4e0b\u6807... np . nonzero ( bool_a ) ( array ([ 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 98 , 99 ], dtype = int64 ),) \u8fdb\u9636\u8bf4\u660e \u4f7f\u7528\u5207\u7247\u8fd4\u56de\u89c6\u56fe\u7684\u539f\u56e0\uff1a \u5f53\u4e0b\u6807\u4f7f\u7528\u5207\u7247\u65f6\uff0c\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u57df\u4e2d\u662f\u7b49\u95f4\u9694\u5206\u5e03\u7684\u3002\u56e0\u4e3a\u53ea\u9700\u8981\u4fee\u6539\u6570\u7ec4\u7684ndim/shape/strides\u7b49\u5c5e\u6027\u4ee5\u53ca\u6307\u5411\u6570\u636e\u5b58\u50a8\u533a\u57df\u7684data\u6307\u9488\u5c31\u80fd\u591f\u5b9e\u73b0\u6574\u6570\u548c\u5207\u7247\u4e0b\u6807\u7684\u7d22\u5f15\u3002\u6240\u4ee5\u65b0\u6570\u7ec4\u548c\u539f\u59cb\u6570\u7ec4\u80fd\u591f\u5171\u4eab\u6570\u636e\u5b58\u50a8\u533a\u57df\u3002 \u5f53\u4f7f\u7528\u6574\u6570\u6570\u7ec4\uff08\u6574\u6570\u5143\u7ec4\uff0c\u6574\u6570\u5217\u8868\u9875\u8f6c\u6362\u6210\u6574\u6570\u6570\u7ec4\uff09\uff0c\u5e03\u5c14\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u662f\u7b49\u95f4\u9694\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236\u3002 \u901a\u8fc7\u6574\u6570\u5143\u7ec4\u83b7\u53d6\u7684\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u4e3a\u6570\u7ec4\u7684dtype\u7c7b\u578b \u3002\u5982\u679c\u4f60\u60f3\u83b7\u53d6\u6807\u51c6python\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7684item()\u65b9\u6cd5\u3002 \u7d22\u5f15\u7684\u7ef4\u5ea6\u53d8\u6362 \u7d22\u5f15\u7684\u4e0b\u6807\u5143\u7ec4\u4e2d\uff1a \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u90fd\u662f\u5207\u7247\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u4e0e\u539f\u59cb\u6570\u7ec4\u7684\u7ef4\u5ea6\u76f8\u540c\uff08\u8f74\u7684\u6570\u91cf\u76f8\u7b49\uff09 \u6bcf\u591a\u4e00\u4e2a\u6574\u6570\u4e0b\u6807\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u5c31\u5c11\u4e00\u4e2a\u7ef4\u5ea6\uff08\u5c11\u4e00\u4e2a\u8f74\uff09 \u5982\u679c\u6240\u6709\u7684\u4e0b\u6807\u90fd\u662f\u6574\u6570\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u7ef4\u5ea6\u4e3a 0 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u4e2d\u5b58\u5728\u6570\u7ec4\uff0c\u5219\u8fd8\u9700\u8981\u8003\u8651\u8be5\u4e0b\u6807\u6570\u7ec4\u5e7f\u64ad\u540e\u7684\u7ef4\u5ea6 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6 ndim \u76f8\u7b49\u7684\u5143\u7ec4\u3002\u4f46\u662f\u5982\u679c\u4e0b\u6807\u4e2d\u5305\u542bNone\uff0c\u5219\u53ef\u4ee5\u7a81\u7834\u8fd9\u4e00\u9650\u5236\u3002\u6bcf\u591a\u4e00\u4e2aNone\uff0c\u5219\u7d22\u5f15\u7ed3\u6784\u7ef4\u5ea6\u5347 1 \u3002 \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u51fa\u73b0\u7684None\u7b49\u4ef7\u4e8e\u5207\u7247: \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u54ea\u91cc\u51fa\u73b0None\uff0c\u7d22\u5f15\u7ed3\u679c\u5c31\u5728\u54ea\u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u8f74\uff0c\u8be5\u8f74\u957f\u5ea6\u4e3a 1\u3002 b [ 1 , 2 ] b [ 1 , 2 , None ] b [ 1 , 2 , np . newaxis ] array ([ 7 ])","title":"5.2.\u7d22\u5f15"},{"location":"numpy\u7b14\u8bb0/5.2.\u7d22\u5f15/#_1","text":"\u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u548c\u5217\u8868\u76f8\u540c\u3002\u5047\u8bbe a1 \u662f\u4e00\u7ef4\u6570\u7ec4\uff0c\u90a3\u4e48\u6709\u4ee5\u4e0b5\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570 i \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 a1[i] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5207\u7247 \u4f5c\u4e3a\u7d22\u5f15\u4e0b\u6807\uff0c\u5982 a1[i:j] \uff0c\u7b49\u4ef7\u4e8e a1[slice(j,j)] \u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570list \u5bf9\u6570\u7ec4\u8fdb\u884c\u5b58\u53d6\uff0c\u5982 a1[[i1,i2,i3]] \u3002\u6b64\u65f6\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u4f5c\u4e3a\u4e0b\u6807 (i1/i2/i3) \uff0c\u4f7f\u7528\u5217\u8868\u4f5c\u4e3a\u4e0b\u6807\u5f97\u5230\u7684\u6570\u7ec4\u4e3a np.array([a1[i1],a1[i2],a1[i3]]) \uff0c\u5b83\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u5185\u5b58\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u6574\u6570\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982 a1[a2] \u6b64\u65f6\u4f1a\u5f97\u5230\u4e00\u4e2a\u5f62\u72b6\u548c\u4e0b\u6807\u6570\u7ec4 a2 \u76f8\u540c\u7684\u65b0\u6570\u7ec4\u3002\u65b0\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e0b\u6807\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u4f5c\u4e3a\u4e0b\u6807\u4ece\u539f\u59cb\u6570\u7ec4\u4e2d\u83b7\u5f97\u7684\u503c\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 \u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u5e03\u5c14\u6570\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u4e0b\u6807\uff0c\u5982a1[b]\u3002\u6b64\u65f6\u5c06\u83b7\u5f97\u6570\u7ec4a1\u4e2d\u4e0e\u6570\u7ec4b\u4e2d\u7684True\u5bf9\u5e94\u7684\u5143\u7d20\u3002\u65b0\u6570\u7ec4\u4e0d\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\u3002 # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570 a [ 1 ] # OWNDATA : True ## \u7b49\u4ef7\u4e8e a [( 1 )] # OWNDATA : True # \u6307\u5b9a\u5207\u7247 a [ 0 : 20 : 2 ] # \u8fd4\u56de\u89c6\u56fe a [ slice ( 0 , 20 , 2 )] # \u8fd4\u56de\u89c6\u56fe # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5217\u8868 a [[ 1 , 2 , 3 , 4 ]] # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ## index\u662f\u4e00\u7ef4\u6570\u7ec4 index = np . array ([ 0 , 1 , 2 , 3 , 4 ]) a [ index ] # OWNDATA : True ## index\u662f\u4e8c\u7ef4\u6570\u7ec4 index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) a [ index ] # OWNDATA : True # \u6307\u5b9a\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4 ## \u5e03\u5c14\u6570\u7ec4\u7684ndim\u9700\u8981\u548c\u539f\u6570\u7ec4\u76f8\u540c bool_a = a > 50 bool_a = list ( bool_a )","title":"\u4e00\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15"},{"location":"numpy\u7b14\u8bb0/5.2.\u7d22\u5f15/#_2","text":"\u591a\u7ef4\u6570\u7ec4\u4f7f\u7528 \u5143\u7ec4 \u4f5c\u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u5982 a[1,2] \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u5706\u62ec\u53f7\u4e3a a[(1,2)] \u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u7ef4\u6570\u7ec4\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u662f\u4e00\u7ef4\u6570\u7ec4\u53ea\u6709\u7b2c 0 \u8f74\u3002 \u4e0b\u6807\u5143\u7ec4 \u4e2d\u6bcf\u4e2a\u5143\u7d20\u548c\u6570\u7ec4\u7684\u6bcf\u4e2a\u8f74\u5bf9\u5e94\u3002\u4e0b\u6807\u5143\u7ec4\u7684\u7b2c 0 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 0 \u8f74\uff0c\u7b2c 1 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 1 \u8f74\uff0c\u7b2c 2 \u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u7ec4\u7b2c 2 \u8f74\u00b7\u00b7\u00b7 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u76f8\u7b49\u7684\u5143\u7ec4\u3002 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219IndexError \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\uff0c\u5219\u81ea\u52a8\u5728\u5143\u7ec4\u7684\u540e\u9762\u8865 : \uff0c\u4f7f\u5f97\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u7b49\u4e8e\u6570\u7ec4\u7ef4\u5ea6ndim\u3002 \u5982\u679c\u4e0b\u6807\u5bf9\u8c61\u4e0d\u662f\u5143\u7ec4\uff0c\u5219Numpy\u4f1a\u9996\u5148\u5c06\u5176\u8f6c\u6362\u4e3a\u5143\u7ec4\u3002 \u6709\u4ee5\u4e0b7\u79cd\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\uff1a \u6574\u6570\u5143\u7ec4 \u5207\u7247 \u6574\u6570\u5143\u7ec4\u642d\u914d\u5207\u7247 \u6574\u6570list \u6574\u6570\u6570\u7ec4 \u5e03\u5c14\u6570\u7ec4 \u6574\u6570\u6570\u7ec4\u3001\u5207\u7247\u3001\u6574\u6570\u5143\u7ec4\u6df7\u642d # \u6307\u5b9a\u4e00\u4e2a\u6574\u6570\u5143\u7ec4 b [( 1 , 2 )] # OWNDATA : Trues ## \u7b49\u4ef7\u4e8e b [ 1 , 2 ] # OWNDATA : Trues ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u8fc7\u591a\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6:IndexError ''' b[(1,2,3)] ''' ## \u5143\u7ec4\u7684\u7ef4\u5ea6\u8d85\u5c11\u4e8e\u7ef4\u6570\u7ec4\u7684\u7ef4\u5ea6 b [ 1 ] # \u8fd4\u56de\u89c6\u56fe \u7b49\u4ef7\u4e8e b[1,:] # \u5207\u7247 b [ 0 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , 0 :: 2 ] # \u8fd4\u56de\u89c6\u56fe b [ 0 , slice ( 0 , None , 2 )] # \u8fd4\u56de\u89c6\u56fe ## SyntaxError b[0,slice(0,,2)] b [ 0 : 10 : 2 , 0 : 5 : 2 ] # \u8fd4\u56de\u89c6\u56fe ## \u7b2c\u4e8c\u5217 b [:, 1 ] # \u8fd4\u56de\u89c6\u56fe b [ ... , 1 ] # \u8fd4\u56de\u89c6\u56fe ## IndexError: an index can only have a single ellipsis ('...') ''' b[...,...] IndexError ''' b [ ... ,:] # \u8fd4\u56de\u89c6\u56fe b [:,:] # \u8fd4\u56de\u89c6\u56fe # \u6574\u6570\u6570\u7ec4 ## arrays used as indices must be of integer (or boolean) type index = np . array ([ 0 , 1 , 2 , 3 ]) b [ index ] # OWNDATA : True index = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 5 ]]) b [ index ] # OWNDATA : True ## \u5982\u679c\u4e0b\u6807\u6574\u6570\u6570\u7ec4\u7684\u7ef4\u5ea6\u4e0d\u4e00\u81f4\uff0c\u4f1a\u8fdb\u884c\u5e7f\u64ad rows = np . array ([[ 0 , 1 , 2 ]]) columns = np . array ([[ 0 , 1 , 2 ],[ 3 , 4 , 4 ]]) index = ( rows , columns ) b [ index ] array ([[ 0 , 6 , 12 ], [ 3 , 9 , 14 ]]) \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u662f\u5e03\u5c14\u6570\u7ec4\u6216\u8005\u4e0b\u6807\u5143\u7ec4\u4e2d\u5305\u542b\u4e86\u5e03\u5c14\u6570\u7ec4\uff0c\u5219\u76f8\u5f53\u4e8e\u5c06\u5e03\u5c14\u6570\u7ec4\u901a\u8fc7 np.nonzero() \u5c06\u5e03\u5c14\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u7684\u5143\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u4e0b\u6807\u8fd0\u884c\u3002 np.nonzero(a) \u8fd4\u56de\u6570\u7ec4 a \u4e2d\uff0c\u503c\u975e\u96f6\u7684\u5143\u7d20\u7684 \u4e0b\u6807 \u3002\u5b83\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a a.ndim \u7684\u5143\u7ec4\uff0c\u5143\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u4e00\u7ef4\u7684\u6574\u6570\u6570\u7ec4\uff0c\u5176\u503c\u4e3a\u975e\u96f6\u5143\u7d20\u7684\u4e0b\u6807\u5728\u5bf9\u5e94\u8f74\u4e0a\u7684\u503c\u3002\u5982\uff1a\u7b2c 0 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57280\u8f74\u7684\u4e0b\u6807\u3001\u7b2c 1 \u4e2a\u5143\u7d20\u4e3aa\u4e2d\u7684\u975e\u96f6\u503c\u5143\u7d20\u57281\u8f74\u7684\u4e0b\u6807... np . nonzero ( bool_a ) ( array ([ 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 98 , 99 ], dtype = int64 ),)","title":"\u591a\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15"},{"location":"numpy\u7b14\u8bb0/5.2.\u7d22\u5f15/#_3","text":"\u4f7f\u7528\u5207\u7247\u8fd4\u56de\u89c6\u56fe\u7684\u539f\u56e0\uff1a \u5f53\u4e0b\u6807\u4f7f\u7528\u5207\u7247\u65f6\uff0c\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u57df\u4e2d\u662f\u7b49\u95f4\u9694\u5206\u5e03\u7684\u3002\u56e0\u4e3a\u53ea\u9700\u8981\u4fee\u6539\u6570\u7ec4\u7684ndim/shape/strides\u7b49\u5c5e\u6027\u4ee5\u53ca\u6307\u5411\u6570\u636e\u5b58\u50a8\u533a\u57df\u7684data\u6307\u9488\u5c31\u80fd\u591f\u5b9e\u73b0\u6574\u6570\u548c\u5207\u7247\u4e0b\u6807\u7684\u7d22\u5f15\u3002\u6240\u4ee5\u65b0\u6570\u7ec4\u548c\u539f\u59cb\u6570\u7ec4\u80fd\u591f\u5171\u4eab\u6570\u636e\u5b58\u50a8\u533a\u57df\u3002 \u5f53\u4f7f\u7528\u6574\u6570\u6570\u7ec4\uff08\u6574\u6570\u5143\u7ec4\uff0c\u6574\u6570\u5217\u8868\u9875\u8f6c\u6362\u6210\u6574\u6570\u6570\u7ec4\uff09\uff0c\u5e03\u5c14\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u6240\u53d6\u5f97\u7684\u6570\u636e\u5728\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u662f\u7b49\u95f4\u9694\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u548c\u539f\u59cb\u6570\u7ec4\u5171\u4eab\u6570\u636e\uff0c\u53ea\u80fd\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236\u3002 \u901a\u8fc7\u6574\u6570\u5143\u7ec4\u83b7\u53d6\u7684\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u4e3a\u6570\u7ec4\u7684dtype\u7c7b\u578b \u3002\u5982\u679c\u4f60\u60f3\u83b7\u53d6\u6807\u51c6python\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7684item()\u65b9\u6cd5\u3002","title":"\u8fdb\u9636\u8bf4\u660e"},{"location":"numpy\u7b14\u8bb0/5.2.\u7d22\u5f15/#_4","text":"\u7d22\u5f15\u7684\u4e0b\u6807\u5143\u7ec4\u4e2d\uff1a \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u90fd\u662f\u5207\u7247\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u4e0e\u539f\u59cb\u6570\u7ec4\u7684\u7ef4\u5ea6\u76f8\u540c\uff08\u8f74\u7684\u6570\u91cf\u76f8\u7b49\uff09 \u6bcf\u591a\u4e00\u4e2a\u6574\u6570\u4e0b\u6807\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u6570\u7ec4\u5c31\u5c11\u4e00\u4e2a\u7ef4\u5ea6\uff08\u5c11\u4e00\u4e2a\u8f74\uff09 \u5982\u679c\u6240\u6709\u7684\u4e0b\u6807\u90fd\u662f\u6574\u6570\uff0c\u5219\u7d22\u5f15\u7ed3\u679c\u7684\u7ef4\u5ea6\u4e3a 0 \u5982\u679c\u4e0b\u6807\u5143\u7ec4\u4e2d\u5b58\u5728\u6570\u7ec4\uff0c\u5219\u8fd8\u9700\u8981\u8003\u8651\u8be5\u4e0b\u6807\u6570\u7ec4\u5e7f\u64ad\u540e\u7684\u7ef4\u5ea6 \u591a\u7ef4\u6570\u7ec4\u7684\u4e0b\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u957f\u5ea6\u548c\u6570\u7ec4\u7684\u7ef4\u5ea6 ndim \u76f8\u7b49\u7684\u5143\u7ec4\u3002\u4f46\u662f\u5982\u679c\u4e0b\u6807\u4e2d\u5305\u542bNone\uff0c\u5219\u53ef\u4ee5\u7a81\u7834\u8fd9\u4e00\u9650\u5236\u3002\u6bcf\u591a\u4e00\u4e2aNone\uff0c\u5219\u7d22\u5f15\u7ed3\u6784\u7ef4\u5ea6\u5347 1 \u3002 \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u51fa\u73b0\u7684None\u7b49\u4ef7\u4e8e\u5207\u7247: \u5f53\u6570\u7ec4\u7684\u4e0b\u6807\u5143\u7ec4\u7684\u957f\u5ea6\u5927\u4e8e\u6570\u7ec4\u7684\u7ef4\u5ea6ndim\u65f6\uff0c\u5143\u7ec4\u4e2d\u54ea\u91cc\u51fa\u73b0None\uff0c\u7d22\u5f15\u7ed3\u679c\u5c31\u5728\u54ea\u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u8f74\uff0c\u8be5\u8f74\u957f\u5ea6\u4e3a 1\u3002 b [ 1 , 2 ] b [ 1 , 2 , None ] b [ 1 , 2 , np . newaxis ] array ([ 7 ])","title":"\u7d22\u5f15\u7684\u7ef4\u5ea6\u53d8\u6362"},{"location":"numpy\u7b14\u8bb0/5.3.\u5c5e\u6027/","text":"import numpy as np import copy \u6570\u7ec4\u5c5e\u6027 \u5185\u5b58\u5e03\u5c40 \u4ee5\u4e0b\u5c5e\u6027\u5305\u542b\u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\uff1a a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4ee5\u4e0b\u5c5e\u6027\u5305\u542b\u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\uff1a # \u5143\u7d20\u7c7b\u578b a . dtype # \u8f74\u7684\u4e2a\u6570\uff08\u7ef4\u5ea6\u7684\u4e2a\u6570\uff09 a . ndim # \u5404\u4e2a\u8f74\u7684\u5927\u5c0f a . shape # \u6307\u5411\u6570\u7ec4\u7684\u6570\u636e\u7684\u5b58\u50a8\u533a a . data # \u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d a . itemsize # \u6570\u7ec4\u5143\u7d20\u5360\u636e\u7684\u603b\u5b57\u8282\u6570 a . nbytes # \u5982\u679c\u5185\u5b58\u6765\u81ea\u5176\u4ed6\u5bf9\u8c61\uff0c\u5219\u4ee5\u6b64\u4e3a\u57fa\u7840\u5bf9\u8c61 a . base # \u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f a . flags # \u5b83\u662f\u4e00\u4e2a\u6574\u6570\u7684\u5143\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fdd\u5b58\u7740\u6bcf\u4e2a\u8f74\u4e0a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5dee\u3002 # \u5373\u5f53\u67d0\u4e2a\u8f74\u7684\u4e0b\u6807\u589e\u52a01 \u65f6\uff0c\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u7684\u6307\u9488\u589e\u52a0\u7684\u5b57\u8282\u6570 a . strides ( 20 , 4 ) \u53ef\u4ee5\u901a\u8fc7 ndarray.view() \u65b9\u6cd5\uff0c\u4ece\u540c\u4e00\u5757\u6570\u636e\u533a\u521b\u5efa\u4e0d\u540c\u7684dtype\u6570\u7ec4\u3002\u5373\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u503c\u7c7b\u578b\u67e5\u770b\u540c\u4e00\u6bb5\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5b83\u4eec\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5757\u5185\u5b58\u3002 a_view = a . view ( np . float32 ) # a_view \u662f\u89c6\u56fe a_view . flags # \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u7684`dtype`\uff0c\u4f1a\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c==\u4f46\u6b64\u65f6\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u3002== a . dtype = np . float32 # \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539ndarray\u5bf9\u8c61\u7684strides\u5c5e\u6027\u3002\u6b64\u65f6\u4fee\u6539\u7684\u662f\u539f\u59cb\u6570\u7ec4\u3002 a . strides = ( 8 , 4 ) \u6570\u7ec4\u65b9\u6cd5 # \u5c06\u6570\u7ec4\u4f5c\u4e3aa.ndim-levels\u6df1\u5c42\u5d4c\u5957\u7684Python\u6807\u91cf\u5217\u8868\u8fd4\u56de a . tolist () # \u6784\u9020\u5305\u542b\u6570\u7ec4\u4e2d\u539f\u59cb\u6570\u636e\u5b57\u8282\u7684Python\u5b57\u8282\u3002 a . tostring () # \u6784\u9020\u5305\u542b\u6570\u7ec4\u4e2d\u539f\u59cb\u6570\u636e\u5b57\u8282\u7684Python\u5b57\u8282\u3002 a . tobytes () b '\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\t\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\t\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\r\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\r\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x15\\x00\\x00\\x00\\x16\\x00\\x00\\x00'","title":"5.3.\u5c5e\u6027"},{"location":"numpy\u7b14\u8bb0/5.3.\u5c5e\u6027/#_1","text":"","title":"\u6570\u7ec4\u5c5e\u6027"},{"location":"numpy\u7b14\u8bb0/5.3.\u5c5e\u6027/#_2","text":"\u4ee5\u4e0b\u5c5e\u6027\u5305\u542b\u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\uff1a a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4ee5\u4e0b\u5c5e\u6027\u5305\u542b\u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f\uff1a # \u5143\u7d20\u7c7b\u578b a . dtype # \u8f74\u7684\u4e2a\u6570\uff08\u7ef4\u5ea6\u7684\u4e2a\u6570\uff09 a . ndim # \u5404\u4e2a\u8f74\u7684\u5927\u5c0f a . shape # \u6307\u5411\u6570\u7ec4\u7684\u6570\u636e\u7684\u5b58\u50a8\u533a a . data # \u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d a . itemsize # \u6570\u7ec4\u5143\u7d20\u5360\u636e\u7684\u603b\u5b57\u8282\u6570 a . nbytes # \u5982\u679c\u5185\u5b58\u6765\u81ea\u5176\u4ed6\u5bf9\u8c61\uff0c\u5219\u4ee5\u6b64\u4e3a\u57fa\u7840\u5bf9\u8c61 a . base # \u6709\u5173\u6570\u7ec4\u5185\u5b58\u5e03\u5c40\u7684\u4fe1\u606f a . flags # \u5b83\u662f\u4e00\u4e2a\u6574\u6570\u7684\u5143\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fdd\u5b58\u7740\u6bcf\u4e2a\u8f74\u4e0a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5dee\u3002 # \u5373\u5f53\u67d0\u4e2a\u8f74\u7684\u4e0b\u6807\u589e\u52a01 \u65f6\uff0c\u6570\u636e\u5b58\u50a8\u533a\u4e2d\u7684\u6307\u9488\u589e\u52a0\u7684\u5b57\u8282\u6570 a . strides ( 20 , 4 ) \u53ef\u4ee5\u901a\u8fc7 ndarray.view() \u65b9\u6cd5\uff0c\u4ece\u540c\u4e00\u5757\u6570\u636e\u533a\u521b\u5efa\u4e0d\u540c\u7684dtype\u6570\u7ec4\u3002\u5373\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u503c\u7c7b\u578b\u67e5\u770b\u540c\u4e00\u6bb5\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5b83\u4eec\u4f7f\u7528\u7684\u662f\u540c\u4e00\u5757\u5185\u5b58\u3002 a_view = a . view ( np . float32 ) # a_view \u662f\u89c6\u56fe a_view . flags # \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u7684`dtype`\uff0c\u4f1a\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c==\u4f46\u6b64\u65f6\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4\u3002== a . dtype = np . float32 # \u53ef\u4ee5\u76f4\u63a5\u4fee\u6539ndarray\u5bf9\u8c61\u7684strides\u5c5e\u6027\u3002\u6b64\u65f6\u4fee\u6539\u7684\u662f\u539f\u59cb\u6570\u7ec4\u3002 a . strides = ( 8 , 4 )","title":"\u5185\u5b58\u5e03\u5c40"},{"location":"numpy\u7b14\u8bb0/5.3.\u5c5e\u6027/#_3","text":"# \u5c06\u6570\u7ec4\u4f5c\u4e3aa.ndim-levels\u6df1\u5c42\u5d4c\u5957\u7684Python\u6807\u91cf\u5217\u8868\u8fd4\u56de a . tolist () # \u6784\u9020\u5305\u542b\u6570\u7ec4\u4e2d\u539f\u59cb\u6570\u636e\u5b57\u8282\u7684Python\u5b57\u8282\u3002 a . tostring () # \u6784\u9020\u5305\u542b\u6570\u7ec4\u4e2d\u539f\u59cb\u6570\u636e\u5b57\u8282\u7684Python\u5b57\u8282\u3002 a . tobytes () b '\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\t\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\t\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\r\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\r\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x15\\x00\\x00\\x00\\x16\\x00\\x00\\x00'","title":"\u6570\u7ec4\u65b9\u6cd5"},{"location":"numpy\u7b14\u8bb0/5.5.\u5e38\u91cf/","text":"import numpy as np NumPy\u5b9a\u4e49\u4e86\u51e0\u4e2a\u5e38\u91cf\uff08\u90fd\u662fIEEE 754 \u6d6e\u70b9\u8868\u793a\uff09\uff1a \uff08\u6b63\uff09\u65e0\u7a77\u5927 # \u4f7f\u7528`inf`\u662f\u56e0\u4e3a`Inf`\u3001`Infinity`\u3001`PINF`\u548c`infty`\u662f`inf`\u7684\u522b\u540d\u3002 np . inf np . Infinity np . PINF np . Inf np . infty inf \u8d1f\u65e0\u7a77\u5927 np . NINF - inf \u975e\u6570\u5b57 NaN # `NaN`\u548c`NAN`\u662f`nan`\u7684\u7b49\u4ef7\u5b9a\u4e49\u3002\u8bf7\u4f7f\u7528`nan\u800c\u4e0d\u662f`NAN`\u3002 np . nan np . NAN np . NaN nan \u8d1f\u96f6 np . NZERO - 0 . 0 \u6b63\u96f6 np . PZERO 0 . 0 \u81ea\u7136\u5bf9\u6570\u7684\u57fa\u7840\uff0c\u7eb3\u76ae\u5c14\u7684\u5e38\u6570 np . e 2 . 718281828459045 \u6b27\u62c9\u5e38\u6570 \u03b3 = 0.5772156649015328606065120900824024310421... \u53c2\u8003 np . euler_gamma 0 . 5772156649015329 None\u7684\u4fbf\u6377\u522b\u540d \u5bf9\u7d22\u5f15\u6570\u7ec4\u5f88\u6709\u7528 np . newaxis \u5706\u5468\u7387 np . pi 3 . 141592653589793","title":"5.5.\u5e38\u91cf"},{"location":"numpy\u7b14\u8bb0/5.6.\u6253\u5370\u6570\u7ec4/","text":"import numpy import numpy as np \u6253\u5370\u6570\u7ec4 \u5f53\u6253\u5370ndarray\u65f6\uff0cnumpy\u6309\u7167Python\u7684\u5d4c\u5957list\u7684\u683c\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u4f46\u662f\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6253\u5370\uff1a \u6700\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8f93\u51fa \u6b21\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa \u5176\u4ed6\u5c42\u7684axis\u4e5f\u662f\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u662f\u6bcf\u4e2aslice\u4e2d\u95f4\u95f4\u9694\u4e00\u6761\u7a7a\u884c \u5982\uff1a \u4e00\u7ef4\u7684ndarray\u6309\u884c\u6253\u5370\uff1b\u4e8c\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u6253\u5370\uff1b\u4e09\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u7684list\u6253\u5370 \u5982\u679cndarray\u592a\u5927\uff0c\u90a3\u4e48numpy\u9ed8\u8ba4\u8df3\u8fc7\u4e2d\u95f4\u90e8\u5206\u7684\u6570\u636e\u800c\u53ea\u662f\u8f93\u51fa\u56db\u4e2a\u89d2\u843d\u7684\u6570\u636e\u3002 \u8981\u60f3\u4efb\u4f55\u65f6\u5019\u90fd\u6253\u5370\u5168\u90e8\u6570\u636e\uff0c\u53ef\u4ee5\u5728print(array)\u4e4b\u524d\u8bbe\u7f6e\u9009\u9879 numpy . set_printoptions ( threshold = None ) \u8fd9\u6837\u540e\u7eed\u7684\u6253\u5370ndarray\u5c31\u4e0d\u4f1a\u7701\u7565\u4e2d\u95f4\u6570\u636e\u3002 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array ([ 0 , 1 , 2 , ..., 197 , 198 , 199 ])","title":"5.6.\u6253\u5370\u6570\u7ec4"},{"location":"numpy\u7b14\u8bb0/5.6.\u6253\u5370\u6570\u7ec4/#_1","text":"\u5f53\u6253\u5370ndarray\u65f6\uff0cnumpy\u6309\u7167Python\u7684\u5d4c\u5957list\u7684\u683c\u5f0f\u6253\u5370\u8f93\u51fa\uff0c\u4f46\u662f\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6253\u5370\uff1a \u6700\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8f93\u51fa \u6b21\u5e95\u5c42\u7684axis\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa \u5176\u4ed6\u5c42\u7684axis\u4e5f\u662f\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u662f\u6bcf\u4e2aslice\u4e2d\u95f4\u95f4\u9694\u4e00\u6761\u7a7a\u884c \u5982\uff1a \u4e00\u7ef4\u7684ndarray\u6309\u884c\u6253\u5370\uff1b\u4e8c\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u6253\u5370\uff1b\u4e09\u7ef4\u7684ndarray\u6309\u7167\u77e9\u9635\u7684list\u6253\u5370 \u5982\u679cndarray\u592a\u5927\uff0c\u90a3\u4e48numpy\u9ed8\u8ba4\u8df3\u8fc7\u4e2d\u95f4\u90e8\u5206\u7684\u6570\u636e\u800c\u53ea\u662f\u8f93\u51fa\u56db\u4e2a\u89d2\u843d\u7684\u6570\u636e\u3002 \u8981\u60f3\u4efb\u4f55\u65f6\u5019\u90fd\u6253\u5370\u5168\u90e8\u6570\u636e\uff0c\u53ef\u4ee5\u5728print(array)\u4e4b\u524d\u8bbe\u7f6e\u9009\u9879 numpy . set_printoptions ( threshold = None ) \u8fd9\u6837\u540e\u7eed\u7684\u6253\u5370ndarray\u5c31\u4e0d\u4f1a\u7701\u7565\u4e2d\u95f4\u6570\u636e\u3002 np . set_printoptions ( threshold = 5 ) np . arange ( 200 ) array ([ 0 , 1 , 2 , ..., 197 , 198 , 199 ])","title":"\u6253\u5370\u6570\u7ec4"},{"location":"numpy\u7b14\u8bb0/5.7.\u5f62\u72b6\u64cd\u7eb5/","text":"import numpy as np import copy \u5f62\u72b6\u64cd\u4f5c( shape ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . shape = ( 5 , 10 ) a . flags # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . shape = ( 25 , - 1 ) # \u4e0d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . reshape ( 5 , 10 ) # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . reshape ( 5 , - 1 ) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . resize (( 25 , 2 )) # reshape resize \u533a\u522b ## reshape\u4e0d\u4f1a\u4fee\u6539\u539f\u6570\u636e ## resize\u4f1a\u4fee\u6539\u539f\u6570\u636e \u5f62\u72b6\u64cd\u4f5c( ndim ) \"\"\" numpy.transpose(a, axes=None) \u91cd\u7f6e\u8f74\u5e8f\u3002\u5982\u679caxes=None\uff0c\u5219\u9ed8\u8ba4\u91cd\u7f6e\u4e3a\u9006\u5e8f\u7684\u8f74\u5e8f\uff0c\u5982\u539f\u6765\u7684shape=(1,2,3)\uff0c\u9006\u5e8f\u4e4b\u540e\u4e3a(3,2,1)\uff09 \u5982\u679caxes!=None\uff0c\u5219\u8981\u7ed9\u51fa\u91cd\u7f6e\u540e\u7684\u8f74\u5e8f\u3002\u5b83\u83b7\u5f97\u7684\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 numpy.swapaxes(a, axis1, axis2) \u4ea4\u6362\u6307\u5b9a\u7684\u4e24\u4e2a\u8f74axis1/axis2\u3002\u5b83\u83b7\u5f97\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 \"\"\" # \u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 a . flatten () # \u8fd4\u56de\u526f\u672c a . ravel () # \u4e00\u822c\u8fd4\u56de\u89c6\u56fe ## flatten ravel \u533a\u522b ## ravel()\uff1a\u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6e90\u6570\u636e\u7684\u526f\u672c ## flatten()\uff1a\u8fd4\u56de\u6e90\u6570\u636e\u7684\u526f\u672c b = np . arange ( 10 ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # \u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4,\u8fd4\u56de\u526f\u672c b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array ([[ 0 ], [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ]]) b . squeeze ( 1 ) array ([ 0 , 1 , 2 , ..., 17 , 18 , 19 ]) # \u8fd4\u56de\u6570\u7ec4\u7684\u89c6\u56fe\uff0c\u5176\u4e2daxis1\u548caxis2\u4e92\u6362\u3002 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # \u89c6\u56fe array ([[ 0 , 2 , 4 , ..., 14 , 16 , 18 ], [ 1 , 3 , 5 , ..., 15 , 17 , 19 ]]) # \u8fd4\u56de\u8f74\u8f6c\u7f6e\u7684\u6570\u7ec4\u89c6\u56fe\u3002 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array ([[[ 0 , 20 , 40 ], [ 10 , 30 , 50 ]], [[ 1 , 21 , 41 ], [ 11 , 31 , 51 ]], [[ 2 , 22 , 42 ], [ 12 , 32 , 52 ]], ..., [[ 7 , 27 , 47 ], [ 17 , 37 , 57 ]], [[ 8 , 28 , 48 ], [ 18 , 38 , 58 ]], [[ 9 , 29 , 49 ], [ 19 , 39 , 59 ]]]) \u6570\u7ec4\u62fc\u63a5 \"\"\" numpy.concatenate((a1, a2, ...), axis=0) \u8fde\u63a5\u591a\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d(a1,a2,...)\u4e3a\u6570\u7ec4\u7684\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u5f85\u8fde\u63a5\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u6cbf\u7740axis\u6307\u5b9a\u7684\u8f74\u8fde\u63a5\u3002 \u6240\u6709\u7684\u8fd9\u4e9b\u6570\u7ec4\u7684\u5f62\u72b6\uff0c\u9664\u4e86axis\u8f74\u4e4b\u5916\u90fd\u76f8\u540c numpy.vstack(tup) \u7b49\u4ef7\u4e8enumpy.concatenate((a1, a2, ...), axis=0)\u3002 \u6cbf0\u8f74\u62fc\u63a5\uff08\u5782\u76f4\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u884c numpy.hstack(tup) \u7b49\u4ef7\u4e8enumpy.concatenate((a1, a2, ...), axis=1)\u3002 \u6cbf1\u8f74\u62fc\u63a5\uff08\u6c34\u5e73\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u5217 numpy.column_stack(tup) \u7c7b\u4f3c\u4e8ehstack\uff0c\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684(N,1)\u3002 numpy.c_\u5bf9\u8c61\u7684[]\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6309\u5217\u8fde\u63a5\u6570\u7ec4\u3002 \u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684(N,1)\u3002 \u6cbf\u5217\u65b9\u5411\u62fc\u63a5\uff0c\u589e\u52a0\u5217 \"\"\" a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # \u6a2a\u5411\u62fc\u63a5\u3001\u62fc\u63a5 1 \u8f74\uff08\u7b2c\u4e8c\u4e2a\u8f74\uff0c\u5373\u5217\uff09 np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array ([[ 0 , 1 , 0 , 1 ], [ 2 , 3 , 2 , 3 ], [ 4 , 5 , 4 , 5 ], [ 6 , 7 , 6 , 7 ], [ 8 , 9 , 8 , 9 ]]) # column_stack hstack np.c_\u533a\u522b a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array ([[ 0 , 0 ], [ 1 , 1 ], [ 2 , 2 ], [ 3 , 3 ], [ 4 , 4 ]]) np . hstack (( a1 , a1 )) array ([ 0 , 1 , 2 , ..., 2 , 3 , 4 ]) np . c_ [ a1 , a1 ] array ([[ 0 , 0 ], [ 1 , 1 ], [ 2 , 2 ], [ 3 , 3 ], [ 4 , 4 ]]) \u6570\u7ec4\u62c6\u5206 \"\"\" numpy.split(ary, indices_or_sections, axis=0) \u7528\u4e8e\u6cbf\u7740\u6307\u5b9a\u7684\u8f74\u62c6\u5206\u6570\u7ec4ary\u3002indices_or_sections\u6307\u5b9a\u4e86\u62c6\u5206\u70b9\uff1a \u5982\u679c\u4e3a\u6574\u6570N\uff0c\u5219\u8868\u793a\u5e73\u5747\u62c6\u5206\u6210N\u4efd\u3002\u5982\u679c\u4e0d\u80fd\u5e73\u5747\u62c6\u5206\uff0c\u5219\u62a5\u9519 \u5982\u679c\u4e3a\u5e8f\u5217\uff0c\u5219\u8be5\u5e8f\u5217\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\uff08\u65e0\u9700\u6307\u5b9a\u6700\u5f00\u59cb\u76840\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\u5982[1,3]\u6307\u5b9a\u4e86\u533a\u95f4\uff1a[0,1],[1,3],[3:] \u800cnumpy.array_split(ary, indices_or_sections, axis=0)\u7684\u4f5c\u7528\u4e5f\u662f\u7c7b\u4f3c\u3002 \u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff1a\u5f53indices_or_sections\u4e3a\u6574\u6570\uff0c\u4e14\u65e0\u6cd5\u5e73\u5747\u62c6\u5206\u65f6\uff0c\u5e76\u4e0d\u62a5\u9519\uff0c\u800c\u662f\u5c3d\u53ef\u80fd\u7684\u7ef4\u6301\u5e73\u5747\u62c6\u5206\u3002 \"\"\" a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [ array ([[ 0 , 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 , 9 ], [ 10 , 11 , 12 , 13 , 14 ], [ 15 , 16 , 17 , 18 , 19 ], [ 20 , 21 , 22 , 23 , 24 ]]), array ([[ 25 , 26 , 27 , 28 , 29 ], [ 30 , 31 , 32 , 33 , 34 ], [ 35 , 36 , 37 , 38 , 39 ], [ 40 , 41 , 42 , 43 , 44 ], [ 45 , 46 , 47 , 48 , 49 ]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [ array ([[ 0 ], [ 5 ], [ 10 ], ..., [ 35 ], [ 40 ], [ 45 ]]), array ([[ 1 , 2 ], [ 6 , 7 ], [ 11 , 12 ], ..., [ 36 , 37 ], [ 41 , 42 ], [ 46 , 47 ]]), array ([[ 3 , 4 ], [ 8 , 9 ], [ 13 , 14 ], ..., [ 38 , 39 ], [ 43 , 44 ], [ 48 , 49 ]])] np . array_split ( a , 2 , axis = 1 ) [ array ([[ 0 , 1 , 2 ], [ 5 , 6 , 7 ], [ 10 , 11 , 12 ], ..., [ 35 , 36 , 37 ], [ 40 , 41 , 42 ], [ 45 , 46 , 47 ]]), array ([[ 3 , 4 ], [ 8 , 9 ], [ 13 , 14 ], ..., [ 38 , 39 ], [ 43 , 44 ], [ 48 , 49 ]])]","title":"5.7.\u5f62\u72b6\u64cd\u7eb5"},{"location":"numpy\u7b14\u8bb0/5.7.\u5f62\u72b6\u64cd\u7eb5/#shape","text":"# \u521b\u5efa\u793a\u4f8b\u6570\u636e a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . shape = ( 5 , 10 ) a . flags # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . shape = ( 25 , - 1 ) # \u4e0d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . reshape ( 5 , 10 ) # \u53ef\u4ee5\u5728\u67d0\u4e2a\u7ef4\u5ea6\u8bbe\u7f6e\u5176\u957f\u5ea6\u4e3a -1\uff0c\u6b64\u65f6\u8be5\u7ef4\u5ea6\u7684\u957f\u5ea6\u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97 a . reshape ( 5 , - 1 ) # \u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u59cb\u6570\u7ec4 a . resize (( 25 , 2 )) # reshape resize \u533a\u522b ## reshape\u4e0d\u4f1a\u4fee\u6539\u539f\u6570\u636e ## resize\u4f1a\u4fee\u6539\u539f\u6570\u636e","title":"\u5f62\u72b6\u64cd\u4f5c(shape)"},{"location":"numpy\u7b14\u8bb0/5.7.\u5f62\u72b6\u64cd\u7eb5/#ndim","text":"\"\"\" numpy.transpose(a, axes=None) \u91cd\u7f6e\u8f74\u5e8f\u3002\u5982\u679caxes=None\uff0c\u5219\u9ed8\u8ba4\u91cd\u7f6e\u4e3a\u9006\u5e8f\u7684\u8f74\u5e8f\uff0c\u5982\u539f\u6765\u7684shape=(1,2,3)\uff0c\u9006\u5e8f\u4e4b\u540e\u4e3a(3,2,1)\uff09 \u5982\u679caxes!=None\uff0c\u5219\u8981\u7ed9\u51fa\u91cd\u7f6e\u540e\u7684\u8f74\u5e8f\u3002\u5b83\u83b7\u5f97\u7684\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 numpy.swapaxes(a, axis1, axis2) \u4ea4\u6362\u6307\u5b9a\u7684\u4e24\u4e2a\u8f74axis1/axis2\u3002\u5b83\u83b7\u5f97\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\u3002 \"\"\" # \u591a\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e00\u7ef4\u6570\u7ec4 a . flatten () # \u8fd4\u56de\u526f\u672c a . ravel () # \u4e00\u822c\u8fd4\u56de\u89c6\u56fe ## flatten ravel \u533a\u522b ## ravel()\uff1a\u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u4f1a\u4ea7\u751f\u6e90\u6570\u636e\u7684\u526f\u672c ## flatten()\uff1a\u8fd4\u56de\u6e90\u6570\u636e\u7684\u526f\u672c b = np . arange ( 10 ) # \u521b\u5efa\u793a\u4f8b\u6570\u636e b . flatten () . flags [ \"OWNDATA\" ] True b . ravel () . flags [ \"OWNDATA\" ] False a . ravel ( order = \"F\" ) . flags [ \"OWNDATA\" ] True # \u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4,\u8fd4\u56de\u526f\u672c b = copy . deepcopy ( np . arange ( 20 ) . reshape ( 20 , 1 )) b [: 6 ] array ([[ 0 ], [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ]]) b . squeeze ( 1 ) array ([ 0 , 1 , 2 , ..., 17 , 18 , 19 ]) # \u8fd4\u56de\u6570\u7ec4\u7684\u89c6\u56fe\uff0c\u5176\u4e2daxis1\u548caxis2\u4e92\u6362\u3002 ## ndarray.swapaxes(axis1, axis2) a = copy . deepcopy ( np . arange ( 20 ) . reshape ( 10 , 2 )) a . swapaxes ( 0 , 1 ) # \u89c6\u56fe array ([[ 0 , 2 , 4 , ..., 14 , 16 , 18 ], [ 1 , 3 , 5 , ..., 15 , 17 , 19 ]]) # \u8fd4\u56de\u8f74\u8f6c\u7f6e\u7684\u6570\u7ec4\u89c6\u56fe\u3002 b = copy . deepcopy ( np . arange ( 60 ) . reshape ( 3 , 2 , 10 )) b . transpose () array ([[[ 0 , 20 , 40 ], [ 10 , 30 , 50 ]], [[ 1 , 21 , 41 ], [ 11 , 31 , 51 ]], [[ 2 , 22 , 42 ], [ 12 , 32 , 52 ]], ..., [[ 7 , 27 , 47 ], [ 17 , 37 , 57 ]], [[ 8 , 28 , 48 ], [ 18 , 38 , 58 ]], [[ 9 , 29 , 49 ], [ 19 , 39 , 59 ]]])","title":"\u5f62\u72b6\u64cd\u4f5c(ndim)"},{"location":"numpy\u7b14\u8bb0/5.7.\u5f62\u72b6\u64cd\u7eb5/#_1","text":"\"\"\" numpy.concatenate((a1, a2, ...), axis=0) \u8fde\u63a5\u591a\u4e2a\u6570\u7ec4\u3002\u5176\u4e2d(a1,a2,...)\u4e3a\u6570\u7ec4\u7684\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e86\u5f85\u8fde\u63a5\u7684\u6570\u7ec4\uff0c\u5b83\u4eec\u6cbf\u7740axis\u6307\u5b9a\u7684\u8f74\u8fde\u63a5\u3002 \u6240\u6709\u7684\u8fd9\u4e9b\u6570\u7ec4\u7684\u5f62\u72b6\uff0c\u9664\u4e86axis\u8f74\u4e4b\u5916\u90fd\u76f8\u540c numpy.vstack(tup) \u7b49\u4ef7\u4e8enumpy.concatenate((a1, a2, ...), axis=0)\u3002 \u6cbf0\u8f74\u62fc\u63a5\uff08\u5782\u76f4\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u884c numpy.hstack(tup) \u7b49\u4ef7\u4e8enumpy.concatenate((a1, a2, ...), axis=1)\u3002 \u6cbf1\u8f74\u62fc\u63a5\uff08\u6c34\u5e73\u62fc\u63a5\uff09\uff0c\u589e\u52a0\u5217 numpy.column_stack(tup) \u7c7b\u4f3c\u4e8ehstack\uff0c\u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684(N,1)\u3002 numpy.c_\u5bf9\u8c61\u7684[]\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6309\u5217\u8fde\u63a5\u6570\u7ec4\u3002 \u4f46\u662f\u5982\u679c\u88ab\u62fc\u63a5\u7684\u6570\u7ec4\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u5c06\u5176\u5f62\u72b6\u4fee\u6539\u4e3a\u4e8c\u7ef4\u7684(N,1)\u3002 \u6cbf\u5217\u65b9\u5411\u62fc\u63a5\uff0c\u589e\u52a0\u5217 \"\"\" a = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) b = copy . deepcopy ( np . arange ( 10 ) . reshape ( 5 , 2 )) # \u6a2a\u5411\u62fc\u63a5\u3001\u62fc\u63a5 1 \u8f74\uff08\u7b2c\u4e8c\u4e2a\u8f74\uff0c\u5373\u5217\uff09 np . concatenate (( a , b ), axis = 1 ) np . hstack (( a , b )) np . c_ [ a , b ] array ([[ 0 , 1 , 0 , 1 ], [ 2 , 3 , 2 , 3 ], [ 4 , 5 , 4 , 5 ], [ 6 , 7 , 6 , 7 ], [ 8 , 9 , 8 , 9 ]]) # column_stack hstack np.c_\u533a\u522b a1 = np . arange ( 5 ) np . column_stack (( a1 , a1 )) array ([[ 0 , 0 ], [ 1 , 1 ], [ 2 , 2 ], [ 3 , 3 ], [ 4 , 4 ]]) np . hstack (( a1 , a1 )) array ([ 0 , 1 , 2 , ..., 2 , 3 , 4 ]) np . c_ [ a1 , a1 ] array ([[ 0 , 0 ], [ 1 , 1 ], [ 2 , 2 ], [ 3 , 3 ], [ 4 , 4 ]])","title":"\u6570\u7ec4\u62fc\u63a5"},{"location":"numpy\u7b14\u8bb0/5.7.\u5f62\u72b6\u64cd\u7eb5/#_2","text":"\"\"\" numpy.split(ary, indices_or_sections, axis=0) \u7528\u4e8e\u6cbf\u7740\u6307\u5b9a\u7684\u8f74\u62c6\u5206\u6570\u7ec4ary\u3002indices_or_sections\u6307\u5b9a\u4e86\u62c6\u5206\u70b9\uff1a \u5982\u679c\u4e3a\u6574\u6570N\uff0c\u5219\u8868\u793a\u5e73\u5747\u62c6\u5206\u6210N\u4efd\u3002\u5982\u679c\u4e0d\u80fd\u5e73\u5747\u62c6\u5206\uff0c\u5219\u62a5\u9519 \u5982\u679c\u4e3a\u5e8f\u5217\uff0c\u5219\u8be5\u5e8f\u5217\u6307\u5b9a\u4e86\u5212\u5206\u533a\u95f4\uff08\u65e0\u9700\u6307\u5b9a\u6700\u5f00\u59cb\u76840\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u3002\u5982[1,3]\u6307\u5b9a\u4e86\u533a\u95f4\uff1a[0,1],[1,3],[3:] \u800cnumpy.array_split(ary, indices_or_sections, axis=0)\u7684\u4f5c\u7528\u4e5f\u662f\u7c7b\u4f3c\u3002 \u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\uff1a\u5f53indices_or_sections\u4e3a\u6574\u6570\uff0c\u4e14\u65e0\u6cd5\u5e73\u5747\u62c6\u5206\u65f6\uff0c\u5e76\u4e0d\u62a5\u9519\uff0c\u800c\u662f\u5c3d\u53ef\u80fd\u7684\u7ef4\u6301\u5e73\u5747\u62c6\u5206\u3002 \"\"\" a = copy . deepcopy ( np . arange ( 50 ) . reshape ( 10 , 5 )) np . split ( a , 2 , axis = 0 ) [ array ([[ 0 , 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 , 9 ], [ 10 , 11 , 12 , 13 , 14 ], [ 15 , 16 , 17 , 18 , 19 ], [ 20 , 21 , 22 , 23 , 24 ]]), array ([[ 25 , 26 , 27 , 28 , 29 ], [ 30 , 31 , 32 , 33 , 34 ], [ 35 , 36 , 37 , 38 , 39 ], [ 40 , 41 , 42 , 43 , 44 ], [ 45 , 46 , 47 , 48 , 49 ]])] # [0,1) [1,3) [3:] np . split ( a ,[ 1 , 3 ], axis = 1 ) [ array ([[ 0 ], [ 5 ], [ 10 ], ..., [ 35 ], [ 40 ], [ 45 ]]), array ([[ 1 , 2 ], [ 6 , 7 ], [ 11 , 12 ], ..., [ 36 , 37 ], [ 41 , 42 ], [ 46 , 47 ]]), array ([[ 3 , 4 ], [ 8 , 9 ], [ 13 , 14 ], ..., [ 38 , 39 ], [ 43 , 44 ], [ 48 , 49 ]])] np . array_split ( a , 2 , axis = 1 ) [ array ([[ 0 , 1 , 2 ], [ 5 , 6 , 7 ], [ 10 , 11 , 12 ], ..., [ 35 , 36 , 37 ], [ 40 , 41 , 42 ], [ 45 , 46 , 47 ]]), array ([[ 3 , 4 ], [ 8 , 9 ], [ 13 , 14 ], ..., [ 38 , 39 ], [ 43 , 44 ], [ 48 , 49 ]])]","title":"\u6570\u7ec4\u62c6\u5206"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/","text":"import numpy as np np . set_printoptions ( threshold = 40 ) \u56db\u5219\u8fd0\u7b97 a = np . arange ( 1 , 6 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a + a a - a a * a a / a # ufunc\u51fd\u6570\u5f62\u5f0f np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) np . true_divide ( a , a ) array ([ 1 ., 1 ., 1 ., 1 ., 1 .]) \u6bd4\u8f83\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a == b a != b a < b a <= b a > b a >= b # ufunc\u51fd\u6570\u5f62\u5f0f np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array ([[ False , False , False , False , False , False , False , False , False , False ], [ False , False , False , False , False , False , False , False , False , False ]]) \u903b\u8f91\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u4e0e np . logical_and ( a , b ) # \u6216 np . logical_or ( a , b ) # \u975e np . logical_not ( a , b ) # \u5f02\u6216 np . logical_xor ( a , b ) # \u4efb\u610f\u4e00\u4e2a\u5143\u7d20 np . any ( a ) # \u5168\u90e8\u5143\u7d20 np . all ( a ) False \u4f4d\u8fd0\u7b97 a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # \u6309\u4f4d\u4e0e np . bitwise_and ( a , b ) # \u6309\u4f4d\u6216 np . bitwise_or ( a , b ) # \u6309\u4f4d\u53d6\u53cd np . bitwise_not ( a ) # \u6309\u4f4d\u5f02\u6216 np . bitwise_xor ( a , b ) array ([[ 10 , 10 , 14 , 14 , 10 , 10 , 22 , 22 , 26 , 26 ], [ 30 , 30 , 26 , 26 , 22 , 22 , 10 , 10 , 14 , 14 ]], dtype = int32 ) \u81ea\u5b9a\u4e49 ufunc \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7 frompyfunc() \u5c06\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u8f6c\u6362\u6210ufunc\u51fd\u6570\u3002\u8c03\u7528\u683c\u5f0f\u4e3a\u5982\u4e0b\uff1a numpy . frompyfunc ( func , nin , nout ) # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # nin\uff1afunc\u7684\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570 The number of input # nout\uff1afunc\u8fd4\u56de\u503c\u7684\u4e2a\u6570 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array ([ 6 , 8 , 10 , 12 , 14 ], dtype = object ) \u4e5f\u53ef\u4ee5\u901a\u8fc7 vectorize() \u51fd\u6570\u6765\u5b9e\u73b0 frompyfunc() \u7684\u529f\u80fd\u3002 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) \u3002 # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # otypes\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7ed3\u679c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\u578b\u5217\u8868\u3002\u5982\u679c\u4f7f\u7528\u7c7b\u578b\u5217\u8868\uff0c\u53ef\u4ee5\u63cf\u8ff0\u591a\u4e2a\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b # doc\uff1a\u51fd\u6570\u7684\u63cf\u8ff0\u5b57\u7b26\u4e32\u3002\u82e5\u672a\u7ed9\u5b9a\uff0c\u5219\u4f7f\u7528func.__doc__ # excluded\uff1a\u6307\u5b9afunc\u4e2d\u54ea\u4e9b\u53c2\u6570\u672a\u88ab\u5411\u91cf\u5316\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u4ee3\u8868\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6574\u6570\u4ee3\u8868\u4f4d\u7f6e\u53c2\u6570\u3002 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"\u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) \u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570 array ([ 1 , 2 , 3 , 4 , 5 ]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num \u4f5c\u4e3a\u4e00\u4e2alist\uff0c\u800c\u4e0d\u662f\u5411\u91cf\u5316\u6210\u4e00\u4e2a\u4e2a\u5143\u7d20 array ([ 11 , 13 , 15 , 17 , 19 ]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) ( array ([ 1 ., 2 ., 3 ., 4 ., 5 .]), array ([ 1 , 2 , 3 , 4 , 5 ])) ufunc \u5bf9\u8c61\u7684\u65b9\u6cd5 ufunc\u51fd\u6570\u5bf9\u8c61\u672c\u8eab\u8fd8\u6709\u4e00\u4e9b\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u53ea\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u3001\u4e00\u4e2a\u8f93\u51fa\u7684ufunc\u51fd\u6570\u51fd\u6570\u6709\u6548\u3002\u5bf9\u4e8e\u5176\u4ed6\u7684ufunc\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u4f1a\u629b\u51fa ValueError \u5f02\u5e38\u3002 ufunc.reduce() ufunc.reduce \u65b9\u6cd5\uff1a\u7c7b\u4f3c\u4e8ePython\u7684 reduce \u51fd\u6570\uff0c\u5b83==\u6cbf\u7740== axis \u53c2\u6570\u6307\u5b9a\u7684\u8f74\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u7ecf\u8fc7\u4e00\u6b21reduce\uff0c\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\u964d\u4f4e\u4e00\u7ef4\u3002 \u5047\u8bbe <op> \u662f\u4e00\u4e2aufunc\u51fd\u6570\uff0c ufunc.reduce \u7528\u6cd5\u5982\u4e0b\uff1a < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # \u6cbf\u7740 \u5217\u65b9\u5411 array ([ 6 , 22 , 38 , 54 , 70 ]) np . add . reduce ( a , axis = 0 ) # \u6cbf\u7740 \u884c\u65b9\u5411 array ([ 40 , 45 , 50 , 55 ]) \u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u63d2\u5165\u5230\u6cbf\u7740axis\u8f74\u7684\u6240\u6709\u5143\u7d20\u4e4b\u95f4\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array ([ 9 , 25 , 41 , 57 , 73 ], dtype = object ) ufunc.accumulate() ufunc.accumulate \u65b9\u6cd5\uff1a\u5b83\u7c7b\u4f3c\u4e8ereduce()\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd4\u56de\u6570\u7ec4\u7684\u5f62\u72b6\u548c\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array ([[ 0 , 1 , 3 , 6 ], [ 4 , 9 , 15 , 22 ], [ 8 , 17 , 27 , 38 ], [ 12 , 25 , 39 , 54 ], [ 16 , 33 , 51 , 70 ]], dtype = int32 ) ufunc.outer() ufunc.outer \u65b9\u6cd5\uff1a\u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u5bf9\u8f93\u5165\u6570\u7ec4A\u548c\u8f93\u5165\u6570\u7ec4B\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u5bf9(a,b)\u8d77\u4f5c\u7528\u3002\u8bbeA\u7684shape=(4,5)\uff0cB\u7684shape\u4e3a(4,)\uff0c\u5219\u7ed3\u679c\u6570\u7ec4\u7684shape=(4,5,4) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7684outer\u64cd\u4f5c\u4e3a\u4e8c\u7ef4\u6570\u7ec4 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ], [ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ]]) \u591a\u7ef4\u6570\u7ec4\u7684outer\u62c6\u5206\u6210\u5404\u81ea\u7684\u4e00\u7ef4\u64cd\u4f5c a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ]], [[ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ], [ 7 , 8 , 9 , 10 ]]]) \u6570\u5b66\u51fd\u6570 \u4e0b\u9762\u662f\u4e00\u5143\u7684\u6570\u5b66\u51fd\u6570\uff1a abs/fabs \uff1a\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u7684\u7edd\u5bf9\u503c\u3002\u5bf9\u4e8e\u975e\u590d\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684fabs sqrt \uff1a\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u76f8\u5f53\u4e8e$a^{0.5}$ square \uff1a\u8ba1\u7b97\u5e73\u65b9\uff0c\u76f8\u5f53\u4e8e$a^2$ exp \uff1a\u8ba1\u7b97\u6307\u6570$e^x$ log/log10/log2/log1p \uff1a\u5206\u522b\u4e3a$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign \uff1a\u8ba1\u7b97$sign(a)$ ceil \uff1a\u8ba1\u7b97\u5404\u5143\u7d20\u7684ceiling\u503c\uff1a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u6574\u6570 floor \uff1a\u8ba1\u7b97\u4e2a\u5143\u7d20\u7684floor\u503c\uff1a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5927\u6574\u6570 rint \uff1a\u5c06\u5404\u5143\u7d20\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4fdd\u7559 dtype modf \uff1a\u5c06\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\u4ee5\u4e24\u4e2a\u72ec\u7acb\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de cos/cosh/sin/sinh/tan/tanh \uff1a\u666e\u901a\u548c\u53cc\u66f2\u578b\u4e09\u89d2\u51fd\u6570 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :\u53cd\u4e09\u89d2\u51fd\u6570 isnan \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u90a3\u4e9b\u662f NaN isfinite/isinf \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u662f\u6709\u9650\u7684/\u65e0\u9650\u6570","title":"5.8.ufunc\u51fd\u6570"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#_1","text":"a = np . arange ( 1 , 6 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a + a a - a a * a a / a # ufunc\u51fd\u6570\u5f62\u5f0f np . add ( a , a ) np . subtract ( a , a ) np . multiply ( a , a ) np . true_divide ( a , a ) array ([ 1 ., 1 ., 1 ., 1 ., 1 .])","title":"\u56db\u5219\u8fd0\u7b97"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#_2","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u8868\u8fbe\u5f0f\u5f62\u5f0f a == b a != b a < b a <= b a > b a >= b # ufunc\u51fd\u6570\u5f62\u5f0f np . equal ( a , b ) np . not_equal ( a , b ) np . less ( a , b ) np . less_equal ( a , b ) np . greater ( a , b ) np . greater_equal ( a , b ) array ([[ False , False , False , False , False , False , False , False , False , False ], [ False , False , False , False , False , False , False , False , False , False ]])","title":"\u6bd4\u8f83\u8fd0\u7b97"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#_3","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) # \u4e0e np . logical_and ( a , b ) # \u6216 np . logical_or ( a , b ) # \u975e np . logical_not ( a , b ) # \u5f02\u6216 np . logical_xor ( a , b ) # \u4efb\u610f\u4e00\u4e2a\u5143\u7d20 np . any ( a ) # \u5168\u90e8\u5143\u7d20 np . all ( a ) False","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#_4","text":"a = np . arange ( 20 ) . reshape ( 2 , 10 ) b = np . arange ( 10 , 30 ) . reshape ( 2 , 10 ) a & b a | b ~ a a ^ b # \u6309\u4f4d\u4e0e np . bitwise_and ( a , b ) # \u6309\u4f4d\u6216 np . bitwise_or ( a , b ) # \u6309\u4f4d\u53d6\u53cd np . bitwise_not ( a ) # \u6309\u4f4d\u5f02\u6216 np . bitwise_xor ( a , b ) array ([[ 10 , 10 , 14 , 14 , 10 , 10 , 22 , 22 , 26 , 26 ], [ 30 , 30 , 26 , 26 , 22 , 22 , 10 , 10 , 14 , 14 ]], dtype = int32 )","title":"\u4f4d\u8fd0\u7b97"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#ufunc","text":"\u53ef\u4ee5\u901a\u8fc7 frompyfunc() \u5c06\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570\u8f6c\u6362\u6210ufunc\u51fd\u6570\u3002\u8c03\u7528\u683c\u5f0f\u4e3a\u5982\u4e0b\uff1a numpy . frompyfunc ( func , nin , nout ) # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # nin\uff1afunc\u7684\u8f93\u5165\u53c2\u6570\u7684\u4e2a\u6570 The number of input # nout\uff1afunc\u8fd4\u56de\u503c\u7684\u4e2a\u6570 The number of output def my_add ( x , y ): z = x + y + 1 return z myufunc = np . frompyfunc ( my_add , 2 , 1 ) a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) myufunc ( a , b ) array ([ 6 , 8 , 10 , 12 , 14 ], dtype = object ) \u4e5f\u53ef\u4ee5\u901a\u8fc7 vectorize() \u51fd\u6570\u6765\u5b9e\u73b0 frompyfunc() \u7684\u529f\u80fd\u3002 np . vectorize ( func , otypes = '' , doc = None , excluded = None ) \u3002 # func\uff1a\u8ba1\u7b97\u5355\u4e2a\u5143\u7d20\u7684\u51fd\u6570 # otypes\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7ed3\u679c\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\u578b\u5217\u8868\u3002\u5982\u679c\u4f7f\u7528\u7c7b\u578b\u5217\u8868\uff0c\u53ef\u4ee5\u63cf\u8ff0\u591a\u4e2a\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b # doc\uff1a\u51fd\u6570\u7684\u63cf\u8ff0\u5b57\u7b26\u4e32\u3002\u82e5\u672a\u7ed9\u5b9a\uff0c\u5219\u4f7f\u7528func.__doc__ # excluded\uff1a\u6307\u5b9afunc\u4e2d\u54ea\u4e9b\u53c2\u6570\u672a\u88ab\u5411\u91cf\u5316\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u6574\u6570\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u4ee3\u8868\u5173\u952e\u5b57\u53c2\u6570\uff0c\u6574\u6570\u4ee3\u8868\u4f4d\u7f6e\u53c2\u6570\u3002 a = np . arange ( 5 ) b = np . arange ( 5 , 10 ) def my_add ( x , num ): z = x + num return z myufunc = np . vectorize ( my_add , doc = \"\u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570\" ) print ( myufunc . __doc__ ) myufunc ( a , 1 ) \u6bcf\u4e00\u4e2a\u5143\u7d20\u52a0\u4e0a\u4e00\u4e2a\u6307\u5b9a\u7684\u6570 array ([ 1 , 2 , 3 , 4 , 5 ]) def my_add ( x , y , list_num ): z = x + y for i in list_num : z = z + i return z myufunc = np . vectorize ( my_add , excluded = [ 2 ]) myufunc ( a , b , [ 1 , 2 , 3 ]) # list_num \u4f5c\u4e3a\u4e00\u4e2alist\uff0c\u800c\u4e0d\u662f\u5411\u91cf\u5316\u6210\u4e00\u4e2a\u4e2a\u5143\u7d20 array ([ 11 , 13 , 15 , 17 , 19 ]) def my_add ( x , num ): z = x + num return z , z myufunc = np . vectorize ( my_add , otypes = [ np . float , int ]) myufunc ( a , 1 ) ( array ([ 1 ., 2 ., 3 ., 4 ., 5 .]), array ([ 1 , 2 , 3 , 4 , 5 ]))","title":"\u81ea\u5b9a\u4e49 ufunc \u51fd\u6570"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#ufunc_1","text":"ufunc\u51fd\u6570\u5bf9\u8c61\u672c\u8eab\u8fd8\u6709\u4e00\u4e9b\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u53ea\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u3001\u4e00\u4e2a\u8f93\u51fa\u7684ufunc\u51fd\u6570\u51fd\u6570\u6709\u6548\u3002\u5bf9\u4e8e\u5176\u4ed6\u7684ufunc\u51fd\u6570\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u65f6\uff0c\u4f1a\u629b\u51fa ValueError \u5f02\u5e38\u3002","title":"ufunc \u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#ufuncreduce","text":"ufunc.reduce \u65b9\u6cd5\uff1a\u7c7b\u4f3c\u4e8ePython\u7684 reduce \u51fd\u6570\uff0c\u5b83==\u6cbf\u7740== axis \u53c2\u6570\u6307\u5b9a\u7684\u8f74\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u7ecf\u8fc7\u4e00\u6b21reduce\uff0c\u7ed3\u679c\u6570\u7ec4\u7684\u7ef4\u5ea6\u964d\u4f4e\u4e00\u7ef4\u3002 \u5047\u8bbe <op> \u662f\u4e00\u4e2aufunc\u51fd\u6570\uff0c ufunc.reduce \u7528\u6cd5\u5982\u4e0b\uff1a < op >. reduce ( array , axis = 0 , dtype = None ) a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . reduce ( a , axis = 1 ) # \u6cbf\u7740 \u5217\u65b9\u5411 array ([ 6 , 22 , 38 , 54 , 70 ]) np . add . reduce ( a , axis = 0 ) # \u6cbf\u7740 \u884c\u65b9\u5411 array ([ 40 , 45 , 50 , 55 ]) \u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u63d2\u5165\u5230\u6cbf\u7740axis\u8f74\u7684\u6240\u6709\u5143\u7d20\u4e4b\u95f4\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) def fun ( a , b ): z = a + b + 1 return z fun2 = np . frompyfunc ( fun , 2 , 1 ) fun2 . reduce ( a , axis = 1 ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] array ([ 9 , 25 , 41 , 57 , 73 ], dtype = object )","title":"ufunc.reduce()"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#ufuncaccumulate","text":"ufunc.accumulate \u65b9\u6cd5\uff1a\u5b83\u7c7b\u4f3c\u4e8ereduce()\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u5b83\u4f1a\u4fdd\u5b58\u6240\u6709\u7684\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u4f7f\u5f97\u8fd4\u56de\u6570\u7ec4\u7684\u5f62\u72b6\u548c\u8f93\u5165\u6570\u7ec4\u7684\u5f62\u72b6\u76f8\u540c\uff1a a = np . arange ( 20 ) . reshape ( 5 , 4 ) print ( a ) [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15] [16 17 18 19]] np . add . accumulate ( a , axis = 1 ) array ([[ 0 , 1 , 3 , 6 ], [ 4 , 9 , 15 , 22 ], [ 8 , 17 , 27 , 38 ], [ 12 , 25 , 39 , 54 ], [ 16 , 33 , 51 , 70 ]], dtype = int32 )","title":"ufunc.accumulate()"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#ufuncouter","text":"ufunc.outer \u65b9\u6cd5\uff1a\u76f8\u5f53\u4e8e\u5c06 \u8fd0\u7b97\u7b26\u5bf9\u8f93\u5165\u6570\u7ec4A\u548c\u8f93\u5165\u6570\u7ec4B\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u5bf9(a,b)\u8d77\u4f5c\u7528\u3002\u8bbeA\u7684shape=(4,5)\uff0cB\u7684shape\u4e3a(4,)\uff0c\u5219\u7ed3\u679c\u6570\u7ec4\u7684shape=(4,5,4) \u4e00\u7ef4\u6570\u7ec4\u548c\u4e00\u7ef4\u6570\u7ec4\u7684outer\u64cd\u4f5c\u4e3a\u4e8c\u7ef4\u6570\u7ec4 a = np . arange ( 1 , 6 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ], [ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ]]) \u591a\u7ef4\u6570\u7ec4\u7684outer\u62c6\u5206\u6210\u5404\u81ea\u7684\u4e00\u7ef4\u64cd\u4f5c a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) b = np . arange ( 1 , 5 ) np . add . outer ( a , b ) array ([[[ 2 , 3 , 4 , 5 ], [ 3 , 4 , 5 , 6 ], [ 4 , 5 , 6 , 7 ]], [[ 5 , 6 , 7 , 8 ], [ 6 , 7 , 8 , 9 ], [ 7 , 8 , 9 , 10 ]]])","title":"ufunc.outer()"},{"location":"numpy\u7b14\u8bb0/5.8.ufunc\u51fd\u6570/#_5","text":"\u4e0b\u9762\u662f\u4e00\u5143\u7684\u6570\u5b66\u51fd\u6570\uff1a abs/fabs \uff1a\u8ba1\u7b97\u6574\u6570\u3001\u6d6e\u70b9\u6570\u6216\u8005\u590d\u6570\u7684\u7edd\u5bf9\u503c\u3002\u5bf9\u4e8e\u975e\u590d\u6570\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684fabs sqrt \uff1a\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u76f8\u5f53\u4e8e$a^{0.5}$ square \uff1a\u8ba1\u7b97\u5e73\u65b9\uff0c\u76f8\u5f53\u4e8e$a^2$ exp \uff1a\u8ba1\u7b97\u6307\u6570$e^x$ log/log10/log2/log1p \uff1a\u5206\u522b\u4e3a$log_{e}(a), log_{10}(a), log_2(a), log_e(1+x)$ sign \uff1a\u8ba1\u7b97$sign(a)$ ceil \uff1a\u8ba1\u7b97\u5404\u5143\u7d20\u7684ceiling\u503c\uff1a\u5927\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u6574\u6570 floor \uff1a\u8ba1\u7b97\u4e2a\u5143\u7d20\u7684floor\u503c\uff1a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u503c\u7684\u6700\u5927\u6574\u6570 rint \uff1a\u5c06\u5404\u5143\u7d20\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4fdd\u7559 dtype modf \uff1a\u5c06\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\u4ee5\u4e24\u4e2a\u72ec\u7acb\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de cos/cosh/sin/sinh/tan/tanh \uff1a\u666e\u901a\u548c\u53cc\u66f2\u578b\u4e09\u89d2\u51fd\u6570 arccos/arcsosh/arcsin/arcsinh/arctan/arctanh :\u53cd\u4e09\u89d2\u51fd\u6570 isnan \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u90a3\u4e9b\u662f NaN isfinite/isinf \uff1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u6307\u793a\u54ea\u4e9b\u662f\u6709\u9650\u7684/\u65e0\u9650\u6570","title":"\u6570\u5b66\u51fd\u6570"},{"location":"numpy\u7b14\u8bb0/5.9.\u51fd\u6570\u5e93/","text":"import numpy as np \u968f\u673a\u6570\u5e93","title":"5.9.\u51fd\u6570\u5e93"},{"location":"numpy\u7b14\u8bb0/5.9.\u51fd\u6570\u5e93/#_1","text":"","title":"\u968f\u673a\u6570\u5e93"}]}